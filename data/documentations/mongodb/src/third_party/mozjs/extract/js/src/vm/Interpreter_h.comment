['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]
['text':'
 * JS interpreter interface.
 ','line_number':10,'multiline':True]
['text':' CheckIsObjectKind','line_number':17,'multiline':False]
['text':'
 * Convert null/undefined |thisv| into the global lexical's |this| object, and
 * replace other primitives with boxed versions.
 ','line_number':27,'multiline':True]
['text':'
 * numToSkip is the number of stack values the expression decompiler should skip
 * before it reaches |v|. If it's -1, the decompiler will search the stack.
 ','line_number':39,'multiline':True]
['text':' See ReportIsNotFunction comment for the meaning of numToSkip. ','line_number':46,'multiline':True]
['text':' Reasons why a call could be performed, for passing onto the debugger.','line_number':51,'multiline':False]
['text':'
 * Call or construct arguments that are stored in rooted memory.
 *
 * NOTE: Any necessary |GetThisValue| computation must have been performed on
 *       |args.thisv()|, likely by the interpreter when pushing |this| onto the
 *       stack.  If you're not sure whether |GetThisValue| processing has been
 *       performed, use |Invoke|.
 ','line_number':54,'multiline':True]
['text':'
 * These helpers take care of the infinite-recursion check necessary for
 * getter/setter calls.
 ','line_number':66,'multiline':True]
['text':' ES7 rev 0c1bd3004329336774cbc90de727cd0cf5f11e93','line_number':76,'multiline':False]
['text':' 7.3.12 Call(F, V, argumentsList).','line_number':77,'multiline':False]
['text':' All parameters are required, hopefully forcing callers to be careful not to','line_number':78,'multiline':False]
['text':' (say) blindly pass callee as |newTarget| when a different value should have','line_number':79,'multiline':False]
['text':' been passed.  Behavior is unspecified if any element of |args| isn't','line_number':80,'multiline':False]
['text':' initialized.','line_number':81,'multiline':False]
['text':'','line_number':82,'multiline':False]
['text':' |rval| is written to *only* after |fval| and |thisv| have been consumed, so','line_number':83,'multiline':False]
['text':' |rval| *may* alias either argument.','line_number':84,'multiline':False]
['text':' Perform the above Call() operation using the given arguments.  Similar to','line_number':134,'multiline':False]
['text':' ConstructFromStack() below, this handles |!IsCallable(args.calleev())|.','line_number':135,'multiline':False]
['text':'','line_number':136,'multiline':False]
['text':' This internal operation is intended only for use with arguments known to be','line_number':137,'multiline':False]
['text':' on the JS stack, or at least in carefully-rooted memory. The vast majority of','line_number':138,'multiline':False]
['text':' potential users should instead use InvokeArgs in concert with Call().','line_number':139,'multiline':False]
['text':' ES6 7.3.13 Construct(F, argumentsList, newTarget).  All parameters are','line_number':142,'multiline':False]
['text':' required, hopefully forcing callers to be careful not to (say) blindly pass','line_number':143,'multiline':False]
['text':' callee as |newTarget| when a different value should have been passed.','line_number':144,'multiline':False]
['text':' Behavior is unspecified if any element of |args| isn't initialized.','line_number':145,'multiline':False]
['text':'','line_number':146,'multiline':False]
['text':' |rval| is written to *only* after |fval| and |newTarget| have been consumed,','line_number':147,'multiline':False]
['text':' so |rval| *may* alias either argument.','line_number':148,'multiline':False]
['text':'','line_number':149,'multiline':False]
['text':' NOTE: As with the ES6 spec operation, it's the caller's responsibility to','line_number':150,'multiline':False]
['text':'       ensure |fval| and |newTarget| are both |IsConstructor|.','line_number':151,'multiline':False]
['text':' Check that in the given |args|, which must be |args.isConstructing()|, that','line_number':156,'multiline':False]
['text':' |IsConstructor(args.callee())|. If this is not the case, throw a TypeError.','line_number':157,'multiline':False]
['text':' Otherwise, the user must ensure that, additionally,','line_number':158,'multiline':False]
['text':' |IsConstructor(args.newTarget())|. (If |args| comes directly from the','line_number':159,'multiline':False]
['text':' interpreter stack, as set up by JSOp::New, this comes for free.) Then perform','line_number':160,'multiline':False]
['text':' a Construct() operation using |args|.','line_number':161,'multiline':False]
['text':'','line_number':162,'multiline':False]
['text':' This internal operation is intended only for use with arguments known to be','line_number':163,'multiline':False]
['text':' on the JS stack, or at least in carefully-rooted memory. The vast majority of','line_number':164,'multiline':False]
['text':' potential users should instead use ConstructArgs in concert with Construct().','line_number':165,'multiline':False]
['text':' Call Construct(fval, args, newTarget), but use the given |thisv| as |this|','line_number':168,'multiline':False]
['text':' during construction of |fval|.','line_number':169,'multiline':False]
['text':'','line_number':170,'multiline':False]
['text':' |rval| is written to *only* after |fval|, |thisv|, and |newTarget| have been','line_number':171,'multiline':False]
['text':' consumed, so |rval| *may* alias any of these arguments.','line_number':172,'multiline':False]
['text':'','line_number':173,'multiline':False]
['text':' This method exists only for very rare cases where a |this| was created','line_number':174,'multiline':False]
['text':' caller-side for construction of |fval|: basically only for JITs using','line_number':175,'multiline':False]
['text':' |CreateThis|.  If that's not you, use Construct()!','line_number':176,'multiline':False]
['text':'
 * Executes a script with the given envChain. To support debugging, the
 * evalInFrame parameter can point to an arbitrary frame in the context's call
 * stack to simulate executing an eval in that frame.
 ','line_number':183,'multiline':True]
['text':' Execute a script with the given envChain as global code. ','line_number':193,'multiline':True]
['text':' RunState is passed to RunScript and RunScript then either passes it to the','line_number':200,'multiline':False]
['text':' interpreter or to the JITs. RunState contains all information we need to','line_number':201,'multiline':False]
['text':' construct an interpreter or JIT frame.','line_number':202,'multiline':False]
['text':' Eval or global script.','line_number':238,'multiline':False]
['text':' Data to invoke a function.','line_number':267,'multiline':False]
['text':' Unwind environment chain and iterator to match the scope corresponding to','line_number':303,'multiline':False]
['text':' the given bytecode position.','line_number':304,'multiline':False]
['text':' Unwind all environments.','line_number':308,'multiline':False]
['text':' Compute the pc needed to unwind the scope to the beginning of the block','line_number':311,'multiline':False]
['text':' pointed to by the try note.','line_number':312,'multiline':False]
['text':'  Try notes cannot be disjoint. That is, we can't have
       *  multiple notes with disjoint pc ranges jumping to the same
       *  catch block. This interacts awkwardly with for-of loops, in
       *  which calls to IteratorClose emitted due to abnormal
       *  completion (break, throw, return) are emitted inline, at the
       *  source location of the break, throw, or return
       *  statement. For example:
       *
       *      for (x of iter) {
       *        try { return; } catch (e) { }
       *      }
       *
       *  From the try-note nesting's perspective, the IteratorClose
       *  resulting from |return| is covered by the inner try, when it
       *  should not be. If IteratorClose throws, we don't want to
       *  catch it here.
       *
       *  To make this work, we use TryNoteKind::ForOfIterClose try-notes,
       *  which cover the range of the abnormal completion. When
       *  looking up trynotes, a for-of iterclose note indicates that
       *  the enclosing for-of has just been terminated. As a result,
       *  trynotes within that for-of are no longer active. When we
       *  see a for-of-iterclose, we skip ahead in the trynotes list
       *  until we see the matching for-of.
       *
       *  Breaking out of multiple levels of for-of at once is handled
       *  using nested FOR_OF_ITERCLOSE try-notes. Consider this code:
       *
       *  try {
       *    loop: for (i of first) {
       *      <A>
       *      for (j of second) {
       *        <B>
       *        break loop; // <C1/2>
       *      }
       *    }
       *  } catch {...}
       *
       *  Here is the mapping from various PCs to try-notes that we
       *  want to return:
       *
       *        A     B     C1     C2
       *        |     |     |      |
       *        |     |     |  [---|---]     ForOfIterClose (outer)
       *        |     | [---|------|---]     ForOfIterClose (inner)
       *        |  [--X-----|------|----]    ForOf (inner)
       *    [---X-----------X------|-----]   ForOf (outer)
       *  [------------------------X------]  TryCatch
       *
       *  - At A, we find the outer for-of.
       *  - At B, we find the inner for-of.
       *  - At C1, we find one FOR_OF_ITERCLOSE, skip past one FOR_OF, and find
       *    the outer for-of. (This occurs if an exception is thrown while
       *    closing the inner iterator.)
       *  - At C2, we find two FOR_OF_ITERCLOSE, skip past two FOR_OF, and reach
       *    the outer try-catch. (This occurs if an exception is thrown while
       *    closing the outer iterator.)
       ','line_number':332,'multiline':True]
['text':' Advance to trynote following the enclosing for-of.','line_number':404,'multiline':False]
['text':'
       * We have a note that covers the exception pc but we must check
       * whether the interpreter has already executed the corresponding
       * handler. This is possible when the executed bytecode implements
       * break or return from inside a for-in loop.
       *
       * In this case the emitter generates additional [enditer] and [gosub]
       * opcodes to close all outstanding iterators and execute the finally
       * blocks. If such an [enditer] throws an exception, its pc can still
       * be inside several nested for-in loops and try-finally statements
       * even if we have already closed the corresponding iterators and
       * invoked the finally blocks.
       *
       * To address this, we make [enditer] always decrease the stack even
       * when its implementation throws an exception. Thus already executed
       * [enditer] and [gosub] opcodes will have try notes with the stack
       * depth exceeding the current one and this condition is what we use to
       * filter them out.
       ','line_number':408,'multiline':True]
['text':' NOTE: The Span is a temporary so we can't use begin()/end()','line_number':437,'multiline':False]
['text':' here or the iterator will outlive the span.','line_number':438,'multiline':False]
['text':' This checks both ends of the range at once','line_number':452,'multiline':False]
['text':' because unsigned integers wrap on underflow.','line_number':453,'multiline':False]
['text':' namespace detail','line_number':463,'multiline':False]
['text':' Keep the script alive as long as the iterator is live.','line_number':470,'multiline':False]
['text':' Iterator over all try notes. Code using this iterator is not allowed to','line_number':485,'multiline':False]
['text':' trigger GC to make sure the script stays alive. See TryNoteIter above for the','line_number':486,'multiline':False]
['text':' can-GC version.','line_number':487,'multiline':False]
['text':'**********************************************************************','line_number':501,'multiline':True]
['text':' Called from JIT code when inline array allocation fails.','line_number':637,'multiline':False]
['text':' The parser only reports redeclarations that occurs within a single','line_number':660,'multiline':False]
['text':' script. Due to the extensibility of the global lexical scope, we also check','line_number':661,'multiline':False]
['text':' for redeclarations during runtime in JSOp::GlobalOrEvalDeclInstantation.','line_number':662,'multiline':False]
['text':' namespace js ','line_number':692,'multiline':True]
['text':' vm_Interpreter_h ','line_number':694,'multiline':True]
