['text':' Copyright 2015, ARM Limited','line_number':1,'multiline':False]
['text':' All rights reserved.','line_number':2,'multiline':False]
['text':'','line_number':3,'multiline':False]
['text':' Redistribution and use in source and binary forms, with or without','line_number':4,'multiline':False]
['text':' modification, are permitted provided that the following conditions are met:','line_number':5,'multiline':False]
['text':'','line_number':6,'multiline':False]
['text':'   * Redistributions of source code must retain the above copyright notice,','line_number':7,'multiline':False]
['text':'     this list of conditions and the following disclaimer.','line_number':8,'multiline':False]
['text':'   * Redistributions in binary form must reproduce the above copyright notice,','line_number':9,'multiline':False]
['text':'     this list of conditions and the following disclaimer in the documentation','line_number':10,'multiline':False]
['text':'     and/or other materials provided with the distribution.','line_number':11,'multiline':False]
['text':'   * Neither the name of ARM Limited nor the names of its contributors may be','line_number':12,'multiline':False]
['text':'     used to endorse or promote products derived from this software without','line_number':13,'multiline':False]
['text':'     specific prior written permission.','line_number':14,'multiline':False]
['text':'','line_number':15,'multiline':False]
['text':' THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS CONTRIBUTORS "AS IS" AND','line_number':16,'multiline':False]
['text':' ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED','line_number':17,'multiline':False]
['text':' WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE','line_number':18,'multiline':False]
['text':' DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE','line_number':19,'multiline':False]
['text':' FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL','line_number':20,'multiline':False]
['text':' DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR','line_number':21,'multiline':False]
['text':' SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER','line_number':22,'multiline':False]
['text':' CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,','line_number':23,'multiline':False]
['text':' OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE','line_number':24,'multiline':False]
['text':' OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.','line_number':25,'multiline':False]
['text':' If the code represents the stack pointer, index the name after zr.','line_number':116,'multiline':False]
['text':' If the code represents the stack pointer, index the name after zr.','line_number':126,'multiline':False]
['text':' Helpers ---------------------------------------------------------------------','line_number':221,'multiline':False]
['text':' Compute the C flag by comparing the result to the max unsigned integer.','line_number':242,'multiline':False]
['text':' Overflow iff the sign bit is the same for the two inputs and different','line_number':247,'multiline':False]
['text':' for the result.','line_number':248,'multiline':False]
['text':' Shift used to restore the sign.','line_number':275,'multiline':False]
['text':' Value with its sign restored.','line_number':277,'multiline':False]
['text':' TODO: This assumes that the C++ implementation handles comparisons in the','line_number':333,'multiline':False]
['text':' way that we expect (as per AssertSupportedFPCR()).','line_number':334,'multiline':False]
['text':' These sizes would be duplicate case labels.','line_number':377,'multiline':False]
['text':' At this point there is no type information, so print as a raw 1Q.','line_number':412,'multiline':False]
['text':' At this point there is no type information, so print as a raw 1Q.','line_number':433,'multiline':False]
['text':' Print a register's name and raw value.','line_number':439,'multiline':False]
['text':'','line_number':440,'multiline':False]
['text':' Only the least-significant `size_in_bytes` bytes of the register are printed,','line_number':441,'multiline':False]
['text':' but the value is aligned as if the whole register had been printed.','line_number':442,'multiline':False]
['text':'','line_number':443,'multiline':False]
['text':' For typical register updates, size_in_bytes should be set to kXRegSizeInBytes','line_number':444,'multiline':False]
['text':' -- the default -- so that the whole register is printed. Other values of','line_number':445,'multiline':False]
['text':' size_in_bytes are intended for use when the register hasn't actually been','line_number':446,'multiline':False]
['text':' updated (such as in PrintWrite).','line_number':447,'multiline':False]
['text':'','line_number':448,'multiline':False]
['text':' No newline is printed. This allows the caller to print more details (such as','line_number':449,'multiline':False]
['text':' a memory access annotation).','line_number':450,'multiline':False]
['text':' The template for all supported sizes.','line_number':453,'multiline':False]
['text':'   "# x{code}: 0xffeeddccbbaa9988"','line_number':454,'multiline':False]
['text':'   "# w{code}:         0xbbaa9988"','line_number':455,'multiline':False]
['text':'   "# w{code}<15:0>:       0x9988"','line_number':456,'multiline':False]
['text':'   "# w{code}<7:0>:          0x88"','line_number':457,'multiline':False]
['text':' Print leading padding spaces.','line_number':480,'multiline':False]
['text':' Print the specified bits in hexadecimal format.','line_number':486,'multiline':False]
['text':' Don't print writes into xzr.','line_number':500,'multiline':False]
['text':' The template for all x and w registers:','line_number':505,'multiline':False]
['text':'   "# x{code}: 0x{value}"','line_number':506,'multiline':False]
['text':'   "# w{code}: 0x{value}"','line_number':507,'multiline':False]
['text':' Print a register's name and raw value.','line_number':514,'multiline':False]
['text':'','line_number':515,'multiline':False]
['text':' The `bytes` and `lsb` arguments can be used to limit the bytes that are','line_number':516,'multiline':False]
['text':' printed. These arguments are intended for use in cases where register hasn't','line_number':517,'multiline':False]
['text':' actually been updated (such as in PrintVWrite).','line_number':518,'multiline':False]
['text':'','line_number':519,'multiline':False]
['text':' No newline is printed. This allows the caller to print more details (such as','line_number':520,'multiline':False]
['text':' a floating-point interpretation or a memory access annotation).','line_number':521,'multiline':False]
['text':' The template for vector types:','line_number':523,'multiline':False]
['text':'   "# v{code}: 0xffeeddccbbaa99887766554433221100".','line_number':524,'multiline':False]
['text':' An example with bytes=4 and lsb=8:','line_number':525,'multiline':False]
['text':'   "# v{code}:         0xbbaa9988                ".','line_number':526,'multiline':False]
['text':' Print leading padding spaces. (Two spaces per byte.)','line_number':533,'multiline':False]
['text':' Print the specified part of the value, byte by byte.','line_number':539,'multiline':False]
['text':' Print trailing padding spaces.','line_number':547,'multiline':False]
['text':' Print each of the specified lanes of a register as a float or double value.','line_number':556,'multiline':False]
['text':'','line_number':557,'multiline':False]
['text':' The `lane_count` and `lslane` arguments can be used to limit the lanes that','line_number':558,'multiline':False]
['text':' are printed. These arguments are intended for use in cases where register','line_number':559,'multiline':False]
['text':' hasn't actually been updated (such as in PrintVWrite).','line_number':560,'multiline':False]
['text':'','line_number':561,'multiline':False]
['text':' No newline is printed. This allows the caller to print more details (such as','line_number':562,'multiline':False]
['text':' a memory access annotation).','line_number':563,'multiline':False]
['text':' For scalar types ((lane_count == 1) && (rightmost_lane == 0)), a register','line_number':574,'multiline':False]
['text':' name is used:','line_number':575,'multiline':False]
['text':'   " (s{code}: {value})"','line_number':576,'multiline':False]
['text':'   " (d{code}: {value})"','line_number':577,'multiline':False]
['text':' For vector types, "..." is used to represent one or more omitted lanes.','line_number':578,'multiline':False]
['text':'   " (..., {value}, {value}, ...)"','line_number':579,'multiline':False]
['text':' Print the list of values.','line_number':593,'multiline':False]
['text':' Scalar types.','line_number':622,'multiline':False]
['text':' The template for vector types:','line_number':629,'multiline':False]
['text':'   "# v{code}: 0x{rawbits} (..., {value}, ...)".','line_number':630,'multiline':False]
['text':' The template for scalar types:','line_number':631,'multiline':False]
['text':'   "# v{code}: 0x{rawbits} ({reg}:{value})".','line_number':632,'multiline':False]
['text':' The values in parentheses after the bit representations are floating-point','line_number':633,'multiline':False]
['text':' interpretations. They are displayed only if the kPrintVRegAsFP bit is set.','line_number':634,'multiline':False]
['text':' The template is "# {reg}: 0x{value} <- {address}".','line_number':681,'multiline':False]
['text':' The template is "# v{code}: 0x{rawbits} <- address".','line_number':694,'multiline':False]
['text':' The template is "# v{code}: 0x{value} -> {address}". To keep the trace tidy','line_number':710,'multiline':False]
['text':' and readable, the value is aligned with the values in the register trace.','line_number':711,'multiline':False]
['text':' The templates:','line_number':723,'multiline':False]
['text':'   "# v{code}: 0x{rawbits} -> {address}"','line_number':724,'multiline':False]
['text':'   "# v{code}: 0x{rawbits} (..., {value}, ...) -> {address}".','line_number':725,'multiline':False]
['text':'   "# v{code}: 0x{rawbits} ({reg}:{value}) -> {address}"','line_number':726,'multiline':False]
['text':' Because this trace doesn't represent a change to the source register's','line_number':727,'multiline':False]
['text':' value, only the relevant part of the value is printed. To keep the trace','line_number':728,'multiline':False]
['text':' tidy and readable, the raw value is aligned with the other values in the','line_number':729,'multiline':False]
['text':' register trace.','line_number':730,'multiline':False]
['text':' Visitors---------------------------------------------------------------------','line_number':743,'multiline':False]
['text':' Switch on the logical operation, stripping out the NOT bit, as it has a','line_number':934,'multiline':False]
['text':' different meaning for logical immediate instructions.','line_number':935,'multiline':False]
['text':' If the condition passes, set the status flags to the result of comparing','line_number':974,'multiline':False]
['text':' the operands.','line_number':975,'multiline':False]
['text':' If the condition fails, set the status flags to the nzcv immediate.','line_number':983,'multiline':False]
['text':' Ignore prfm hint instructions.','line_number':1101,'multiline':False]
['text':' 'rt' and 'rt2' can only be aliased for stores.','line_number':1162,'multiline':False]
['text':' Use NoRegLog to suppress the register trace (LOG_REGS, LOG_FP_REGS). We','line_number':1166,'multiline':False]
['text':' will print a more detailed log.','line_number':1167,'multiline':False]
['text':' Print a detailed trace (including the memory address) instead of the basic','line_number':1226,'multiline':False]
['text':' register:value trace generated by set_*reg().','line_number':1227,'multiline':False]
['text':' Verify that the address is available to the host.','line_number':1288,'multiline':False]
['text':' Check the alignment of `address`.','line_number':1291,'multiline':False]
['text':' The sp must be aligned to 16 bytes when it is accessed.','line_number':1296,'multiline':False]
['text':' Any non-exclusive load can clear the local monitor as a side effect. We','line_number':1305,'multiline':False]
['text':' don't need to do this, but it is useful to stress the simulated code.','line_number':1306,'multiline':False]
['text':' Use NoRegLog to suppress the register trace (LOG_REGS, LOG_FP_REGS). We','line_number':1310,'multiline':False]
['text':' will print a more detailed log.','line_number':1311,'multiline':False]
['text':' Approximate load-acquire by issuing a full barrier after the load.','line_number':1348,'multiline':False]
['text':' Approximate store-release by issuing a full barrier before the store.','line_number':1359,'multiline':False]
['text':'  - All exclusive stores explicitly clear the local monitor.','line_number':1369,'multiline':False]
['text':'  - Any other store can clear the local monitor as a side effect.','line_number':1372,'multiline':False]
['text':' Verify that the calculated address is available to the host.','line_number':1426,'multiline':False]
['text':' Use NoRegLog to suppress the register trace (LOG_REGS, LOG_VREGS), then','line_number':1430,'multiline':False]
['text':' print a more detailed log.','line_number':1431,'multiline':False]
['text':' Ignore prfm hint instructions.','line_number':1457,'multiline':False]
['text':' When the base register is SP the stack pointer is required to be','line_number':1473,'multiline':False]
['text':' quadword aligned prior to the address calculation and write-backs.','line_number':1474,'multiline':False]
['text':' Misalignment will cause a stack alignment fault.','line_number':1475,'multiline':False]
['text':' Only preindex should log the register update here. For Postindex, the','line_number':1481,'multiline':False]
['text':' update will be printed automatically by LogWrittenRegisters _after_ the','line_number':1482,'multiline':False]
['text':' memory access itself is logged.','line_number':1483,'multiline':False]
['text':' Verify that the calculated address is available to the host.','line_number':1492,'multiline':False]
['text':' Shift is limited for W operations.','line_number':1505,'multiline':False]
['text':' Get the shifted immediate.','line_number':1508,'multiline':False]
['text':' Compute the new value.','line_number':1512,'multiline':False]
['text':' Update the destination register.','line_number':1538,'multiline':False]
['text':' Number of bits in type T.','line_number':1607,'multiline':False]
['text':' Poly32Mod2 cannot handle inputs with more than 32 bits, so compute','line_number':1616,'multiline':False]
['text':' the CRC of each 32-bit word sequentially.','line_number':1617,'multiline':False]
['text':' Division by zero can be trapped, but not on A-class processors.','line_number':1635,'multiline':False]
['text':' Division by zero can be trapped, but not on A-class processors.','line_number':1648,'multiline':False]
['text':' Division by zero can be trapped, but not on A-class processors.','line_number':1659,'multiline':False]
['text':' Division by zero can be trapped, but not on A-class processors.','line_number':1670,'multiline':False]
['text':' Shift distance encoded in the least-significant five/six bits of the','line_number':1739,'multiline':False]
['text':' register.','line_number':1740,'multiline':False]
['text':' The algorithm used is adapted from the one described in section 8.2 of','line_number':1750,'multiline':False]
['text':'   Hacker's Delight, by Henry S. Warren, Jr.','line_number':1751,'multiline':False]
['text':' It assumes that a right shift on a signed integer is an arithmetic shift.','line_number':1752,'multiline':False]
['text':' Type T must be either uint64_t or int64_t.','line_number':1753,'multiline':False]
['text':' Extract and sign- or zero-extend 32-bit arguments for widening operations.','line_number':1780,'multiline':False]
['text':' inzero indicates if the extracted bitfield is inserted into the','line_number':1827,'multiline':False]
['text':' destination register value or in zero.','line_number':1828,'multiline':False]
['text':' If extend is true, extend the sign of the extracted bitfield.','line_number':1829,'multiline':False]
['text':' Rotate source bitfield into place.','line_number':1851,'multiline':False]
['text':' Determine the sign extension.','line_number':1853,'multiline':False]
['text':' Merge sign extension, dest/zero and bitfield.','line_number':1857,'multiline':False]
['text':' A 32-bit input can be handled in the same way as a 64-bit input, since','line_number':1980,'multiline':False]
['text':' the sign- or zero-extension will not affect the conversion.','line_number':1981,'multiline':False]
['text':' A 32-bit input can be handled in the same way as a 64-bit input, since','line_number':2012,'multiline':False]
['text':' the sign- or zero-extension will not affect the conversion.','line_number':2013,'multiline':False]
['text':' Use FPCR rounding mode.','line_number':2177,'multiline':False]
['text':' Only FRINT* instructions fall through the switch above.','line_number':2193,'multiline':False]
['text':' fd = fa +/- (fn * fm)','line_number':2240,'multiline':False]
['text':' Negated variants of the above.','line_number':2245,'multiline':False]
['text':' Perform a dummy memory access to ensure that we have read access','line_number':2293,'multiline':False]
['text':' to the specified address.','line_number':2294,'multiline':False]
['text':' TODO: Implement "case ZVA:".','line_number':2297,'multiline':False]
['text':' Some system instructions hijack their Op and Cp fields to represent a','line_number':2307,'multiline':False]
['text':' range of immediates instead of indicating a different instruction. This','line_number':2308,'multiline':False]
['text':' makes the decoding tricky.','line_number':2309,'multiline':False]
['text':' These instructions all use a two bit size field, except NOT and RBIT,','line_number':2402,'multiline':False]
['text':' which use the field to encode the operation.','line_number':2403,'multiline':False]
['text':' These instructions all use a one bit size field, except XTN, SQXTUN,','line_number':2441,'multiline':False]
['text':' SHLL, SQXTN and UQXTN, which use a two bit size field.','line_number':2442,'multiline':False]
['text':' The following instructions break from the switch statement, rather','line_number':2469,'multiline':False]
['text':' than return.','line_number':2470,'multiline':False]
['text':' Use FPCR rounding mode.','line_number':2471,'multiline':False]
['text':' Only FRINT* instructions fall through the switch above.','line_number':2524,'multiline':False]
['text':' The input operand's VectorFormat is passed for these instructions.','line_number':2725,'multiline':False]
['text':' We use the PostIndex mask here, as it works in this case for both Offset','line_number':2940,'multiline':False]
['text':' and PostIndex addressing.','line_number':2941,'multiline':False]
['text':' Explicitly log the register update whilst we have type information.','line_number':3006,'multiline':False]
['text':' For de-interleaving loads, only print the base address.','line_number':3008,'multiline':False]
['text':' The immediate post index addressing mode is indicated by rm = 31.','line_number':3021,'multiline':False]
['text':' The immediate is implied by the number of vector registers used.','line_number':3022,'multiline':False]
['text':' We use the PostIndex mask here, as it works in this case for both Offset','line_number':3055,'multiline':False]
['text':' and PostIndex addressing.','line_number':3056,'multiline':False]
['text':' Make sure that the print_format only includes a single lane.','line_number':3146,'multiline':False]
['text':' Find the format and immediate value','line_number':3260,'multiline':False]
['text':' cmode_0 == 1, cmode == 0xf.','line_number':3296,'multiline':False]
['text':' Find the operation','line_number':3312,'multiline':False]
['text':' cmode<0> == '1'','line_number':3317,'multiline':False]
['text':' cmode<3> == '1'','line_number':3320,'multiline':False]
['text':' cmode<0> == '1'','line_number':3324,'multiline':False]
['text':' cmode<2> == '1'','line_number':3327,'multiline':False]
['text':' cmode<1> == '1'','line_number':3330,'multiline':False]
['text':' cmode<0> == '1'','line_number':3333,'multiline':False]
['text':' Call the logic function','line_number':3340,'multiline':False]
['text':' These instructions all use a two bit size field, except NOT and RBIT,','line_number':3363,'multiline':False]
['text':' which use the field to encode the operation.','line_number':3364,'multiline':False]
['text':' These instructions all use a one bit size field, except SQXTUN, SQXTN','line_number':3383,'multiline':False]
['text':' and UQXTN, which use a two bit size field.','line_number':3384,'multiline':False]
['text':' Unlike all of the other FP instructions above, fcvtxn encodes dest','line_number':3407,'multiline':False]
['text':' size S as size<0>=1. There's only one case, so we ignore the form.','line_number':3408,'multiline':False]
['text':' 00010->8B, 00011->16B, 001x0->4H, 001x1->8H,','line_number':3657,'multiline':False]
['text':' 01xx0->2S, 01xx1->4S, 1xxx1->2D, all others undefined.','line_number':3658,'multiline':False]
['text':' 0001->8H, 001x->4S, 01xx->2D, all others undefined.','line_number':3669,'multiline':False]
['text':' Read the arguments encoded inline in the instruction stream.','line_number':3838,'multiline':False]
['text':' Read the arguments encoded inline in the instruction stream.','line_number':3865,'multiline':False]
['text':' We don't support a one-shot LOG_DISASM.','line_number':3871,'multiline':False]
['text':' Print the requested information.','line_number':3873,'multiline':False]
['text':' Read the arguments encoded inline in the instruction stream.','line_number':3886,'multiline':False]
['text':' We need to call the host printf function with a set of arguments defined by','line_number':3900,'multiline':False]
['text':' arg_pattern_list. Because we don't know the types and sizes of the','line_number':3901,'multiline':False]
['text':' arguments, this is very difficult to do in a robust and portable way. To','line_number':3902,'multiline':False]
['text':' work around the problem, we pick apart the format string, and print one','line_number':3903,'multiline':False]
['text':' format placeholder at a time.','line_number':3904,'multiline':False]
['text':' Allocate space for the format string. We take a copy, so we can modify it.','line_number':3906,'multiline':False]
['text':' Leave enough space for one extra character per expected argument (plus the','line_number':3907,'multiline':False]
['text':' '\0' termination).','line_number':3908,'multiline':False]
['text':' A list of chunks, each with exactly one format placeholder.','line_number':3914,'multiline':False]
['text':' Copy the format string and search for format placeholders.','line_number':3917,'multiline':False]
['text':' Ignore explicit "%%" sequences.','line_number':3925,'multiline':False]
['text':' Chunks after the first are passed as format strings to printf, so we','line_number':3928,'multiline':False]
['text':' need to escape '%' characters in those chunks.','line_number':3929,'multiline':False]
['text':' Insert '\0' before placeholders, and store their locations.','line_number':3933,'multiline':False]
['text':' Finally, call printf with each chunk, passing the appropriate register','line_number':3942,'multiline':False]
['text':' argument. Normally, printf returns the number of bytes transmitted, so we','line_number':3943,'multiline':False]
['text':' can emulate a single printf call by adding the result from each chunk. If','line_number':3944,'multiline':False]
['text':' any call returns a negative (error) value, though, just return that value.','line_number':3945,'multiline':False]
['text':' Because '\0' is inserted before each placeholder, the first string in','line_number':3949,'multiline':False]
['text':' 'format' contains no format placeholders and should be printed literally.','line_number':3950,'multiline':False]
['text':' Start at x1. x0 holds the format string.','line_number':3952,'multiline':False]
['text':' Start at d0.','line_number':3953,'multiline':False]
['text':' Handle error values.','line_number':3968,'multiline':False]
['text':' Printf returns its result in x0 (just like the C library's printf).','line_number':3979,'multiline':False]
['text':' The printf parameters are inlined in the code, so skip them.','line_number':3982,'multiline':False]
['text':' Set LR as if we'd just called a native printf function.','line_number':3985,'multiline':False]
['text':' namespace vixl','line_number':3991,'multiline':False]
['text':' JS_SIMULATOR_ARM64','line_number':3993,'multiline':False]
