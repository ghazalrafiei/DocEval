['text':' Copyright 2011 the V8 project authors. All rights reserved.','line_number':1,'multiline':False]
['text':' Use of this source code is governed by a BSD-style license that can be','line_number':2,'multiline':False]
['text':' found in the LICENSE file.','line_number':3,'multiline':False]
['text':' Maximum number of bytecodes that will be used (next power of 2 of actually','line_number':13,'multiline':False]
['text':' defined bytecodes).','line_number':14,'multiline':False]
['text':' All slots between the last actually defined bytecode and maximum id will be','line_number':15,'multiline':False]
['text':' filled with BREAKs, indicating an invalid operation. This way using','line_number':16,'multiline':False]
['text':' BYTECODE_MASK guarantees no OOB access to the dispatch table.','line_number':17,'multiline':False]
['text':' The first argument is packed in with the byte code in one word, but so it','line_number':20,'multiline':False]
['text':' has 24 bits, but it can be positive and negative so only use 23 bits for','line_number':21,'multiline':False]
['text':' positive values.','line_number':22,'multiline':False]
['text':' TODO(pthier): Argument offsets of bytecodes should be easily accessible by','line_number':27,'multiline':False]
['text':' name or at least by position.','line_number':28,'multiline':False]
['text':' TODO(jgruber): More precise types (e.g. int32/uint32 instead of value32).','line_number':29,'multiline':False]
['text':' bc8                                        ','line_number':31,'multiline':True]
['text':' bc8 pad24                                  ','line_number':32,'multiline':True]
['text':' bc8 pad24 offset32                         ','line_number':33,'multiline':True]
['text':' bc8 reg_idx24                              ','line_number':34,'multiline':True]
['text':' bc8 reg_idx24 offset32                     ','line_number':35,'multiline':True]
['text':' bc8 reg_idx24                              ','line_number':36,'multiline':True]
['text':' bc8 reg_idx24                              ','line_number':37,'multiline':True]
['text':' bc8 reg_idx24                              ','line_number':38,'multiline':True]
['text':' bc8 reg_idx24 value32                      ','line_number':39,'multiline':True]
['text':' bc8 reg_idx24 value32                      ','line_number':40,'multiline':True]
['text':' bc8 pad24                                  ','line_number':41,'multiline':True]
['text':' bc8 pad24                                  ','line_number':42,'multiline':True]
['text':' bc8 reg_idx24                              ','line_number':43,'multiline':True]
['text':' bc8 pad24                                  ','line_number':44,'multiline':True]
['text':' bc8 pad24                                  ','line_number':45,'multiline':True]
['text':' bc8 offset24                               ','line_number':46,'multiline':True]
['text':' Jump to another bytecode given its offset.                             ','line_number':47,'multiline':True]
['text':' Bit Layout:                                                            ','line_number':48,'multiline':True]
['text':' 0x00 - 0x07:   0x10 (fixed) Bytecode                                   ','line_number':49,'multiline':True]
['text':' 0x08 - 0x1F:   0x00 (unused) Padding                                   ','line_number':50,'multiline':True]
['text':' 0x20 - 0x3F:   Address of bytecode to jump to                          ','line_number':51,'multiline':True]
['text':' bc8 pad24 addr32                           ','line_number':52,'multiline':True]
['text':' Check if offset is in range and load character at given offset.        ','line_number':53,'multiline':True]
['text':' Bit Layout:                                                            ','line_number':54,'multiline':True]
['text':' 0x00 - 0x07:   0x11 (fixed) Bytecode                                   ','line_number':55,'multiline':True]
['text':' 0x08 - 0x1F:   Offset from current position                            ','line_number':56,'multiline':True]
['text':' 0x20 - 0x3F:   Address of bytecode when load is out of range           ','line_number':57,'multiline':True]
['text':' bc8 offset24 addr32                        ','line_number':58,'multiline':True]
['text':' Load character at given offset without range checks.                   ','line_number':59,'multiline':True]
['text':' Bit Layout:                                                            ','line_number':60,'multiline':True]
['text':' 0x00 - 0x07:   0x12 (fixed) Bytecode                                   ','line_number':61,'multiline':True]
['text':' 0x08 - 0x1F:   Offset from current position                            ','line_number':62,'multiline':True]
['text':' bc8 offset24 ','line_number':63,'multiline':True]
['text':' bc8 offset24 addr32 ','line_number':64,'multiline':True]
['text':' bc8 offset24 ','line_number':65,'multiline':True]
['text':' bc8 offset24 addr32 ','line_number':66,'multiline':True]
['text':' bc8 offset24 ','line_number':67,'multiline':True]
['text':' bc8 pad24 uint32 addr32                    ','line_number':68,'multiline':True]
['text':' Check if current character is equal to a given character               ','line_number':69,'multiline':True]
['text':' Bit Layout:                                                            ','line_number':70,'multiline':True]
['text':' 0x00 - 0x07:   0x19 (fixed) Bytecode                                   ','line_number':71,'multiline':True]
['text':' 0x08 - 0x0F:   0x00 (unused) Padding                                   ','line_number':72,'multiline':True]
['text':' 0x10 - 0x1F:   Character to check                                      ','line_number':73,'multiline':True]
['text':' 0x20 - 0x3F:   Address of bytecode when matched                        ','line_number':74,'multiline':True]
['text':' bc8 pad8 uint16 addr32                     ','line_number':75,'multiline':True]
['text':' bc8 pad24 uint32 addr32 ','line_number':76,'multiline':True]
['text':' bc8 pad8 uint16 addr32                     ','line_number':77,'multiline':True]
['text':' bc8 pad24 uint32 uint32 addr32 ','line_number':78,'multiline':True]
['text':' Checks if the current character combined with mask (bitwise and)       ','line_number':79,'multiline':True]
['text':' matches a character (e.g. used when two characters in a disjunction    ','line_number':80,'multiline':True]
['text':' differ by only a single bit                                            ','line_number':81,'multiline':True]
['text':' Bit Layout:                                                            ','line_number':82,'multiline':True]
['text':' 0x00 - 0x07:   0x1c (fixed) Bytecode                                   ','line_number':83,'multiline':True]
['text':' 0x08 - 0x0F:   0x00 (unused) Padding                                   ','line_number':84,'multiline':True]
['text':' 0x10 - 0x1F:   Character to match against (after mask aplied)          ','line_number':85,'multiline':True]
['text':' 0x20 - 0x3F:   Bitmask bitwise and combined with current character     ','line_number':86,'multiline':True]
['text':' 0x40 - 0x5F:   Address of bytecode when matched                        ','line_number':87,'multiline':True]
['text':' bc8 pad8 uint16 uint32 addr32      ','line_number':88,'multiline':True]
['text':' bc8 pad24 uint32 uint32 addr32 ','line_number':89,'multiline':True]
['text':' bc8 pad8 uint16 uint32 addr32 ','line_number':90,'multiline':True]
['text':' bc8 pad8 uc16 uc16 uc16 addr32 ','line_number':91,'multiline':True]
['text':' bc8 pad24 uc16 uc16 addr32 ','line_number':92,'multiline':True]
['text':' bc8 pad24 uc16 uc16 addr32 ','line_number':93,'multiline':True]
['text':' Checks if the current character matches any of the characters encoded  ','line_number':94,'multiline':True]
['text':' in a bit table. Similar to/inspired by boyer moore string search       ','line_number':95,'multiline':True]
['text':' Bit Layout:                                                            ','line_number':96,'multiline':True]
['text':' 0x00 - 0x07:   0x22 (fixed) Bytecode                                   ','line_number':97,'multiline':True]
['text':' 0x08 - 0x1F:   0x00 (unused) Padding                                   ','line_number':98,'multiline':True]
['text':' 0x20 - 0x3F:   Address of bytecode when bit is set                     ','line_number':99,'multiline':True]
['text':' 0x40 - 0xBF:   Bit table                                               ','line_number':100,'multiline':True]
['text':' bc8 pad24 addr32 bits128           ','line_number':101,'multiline':True]
['text':' bc8 pad8 uc16 addr32                       ','line_number':102,'multiline':True]
['text':' bc8 pad8 uc16 addr32                       ','line_number':103,'multiline':True]
['text':' bc8 reg_idx24 addr32 ','line_number':104,'multiline':True]
['text':' bc8 reg_idx24 addr32 ','line_number':105,'multiline':True]
['text':' bc8 reg_idx24 addr32 ','line_number':107,'multiline':True]
['text':' bc8 reg_idx24 addr32 ','line_number':108,'multiline':True]
['text':' bc8 regidx24 reg_idx32 addr32 ','line_number':110,'multiline':True]
['text':' bc8 reg_idx24 value32 addr32 ','line_number':111,'multiline':True]
['text':' bc8 reg_idx24 value32 addr32 ','line_number':112,'multiline':True]
['text':' bc8 reg_idx24 addr32 ','line_number':113,'multiline':True]
['text':' bc8 pad24 addr32                           ','line_number':114,'multiline':True]
['text':' bc8 offset24 addr32 ','line_number':115,'multiline':True]
['text':' Checks if the current position matches top of backtrack stack          ','line_number':116,'multiline':True]
['text':' Bit Layout:                                                            ','line_number':117,'multiline':True]
['text':' 0x00 - 0x07:   0x31 (fixed) Bytecode                                   ','line_number':118,'multiline':True]
['text':' 0x08 - 0x1F:   0x00 (unused) Padding                                   ','line_number':119,'multiline':True]
['text':' 0x20 - 0x3F:   Address of bytecode when current matches tos            ','line_number':120,'multiline':True]
['text':' bc8 pad24 addr32                           ','line_number':121,'multiline':True]
['text':' Advance character pointer by given offset and jump to another bytecode.','line_number':122,'multiline':True]
['text':' Bit Layout:                                                            ','line_number':123,'multiline':True]
['text':' 0x00 - 0x07:   0x32 (fixed) Bytecode                                   ','line_number':124,'multiline':True]
['text':' 0x08 - 0x1F:   Number of characters to advance                         ','line_number':125,'multiline':True]
['text':' 0x20 - 0x3F:   Address of bytecode to jump to                          ','line_number':126,'multiline':True]
['text':' bc8 offset24 addr32                    ','line_number':127,'multiline':True]
['text':' bc8 idx24 ','line_number':128,'multiline':True]
['text':' Checks if current position + given offset is in range.                 ','line_number':129,'multiline':True]
['text':' Bit Layout:                                                            ','line_number':130,'multiline':True]
['text':' 0x00 - 0x07:   0x34 (fixed) Bytecode                                   ','line_number':131,'multiline':True]
['text':' 0x08 - 0x1F:   Offset from current position                            ','line_number':132,'multiline':True]
['text':' 0x20 - 0x3F:   Address of bytecode when position is out of range       ','line_number':133,'multiline':True]
['text':' bc8 idx24 addr32                     ','line_number':134,'multiline':True]
['text':' Combination of:                                                        ','line_number':135,'multiline':True]
['text':' LOAD_CURRENT_CHAR, CHECK_BIT_IN_TABLE and ADVANCE_CP_AND_GOTO          ','line_number':136,'multiline':True]
['text':' Emitted by RegExpBytecodePeepholeOptimization.                         ','line_number':137,'multiline':True]
['text':' Bit Layout:                                                            ','line_number':138,'multiline':True]
['text':' 0x00 - 0x07    0x35 (fixed) Bytecode                                   ','line_number':139,'multiline':True]
['text':' 0x08 - 0x1F    Load character offset from current position             ','line_number':140,'multiline':True]
['text':' 0x20 - 0x3F    Number of characters to advance                         ','line_number':141,'multiline':True]
['text':' 0x40 - 0xBF    Bit Table                                               ','line_number':142,'multiline':True]
['text':' 0xC0 - 0xDF    Address of bytecode when character is matched           ','line_number':143,'multiline':True]
['text':' 0xE0 - 0xFF    Address of bytecode when no match                       ','line_number':144,'multiline':True]
['text':' Combination of:                                                        ','line_number':146,'multiline':True]
['text':' CHECK_CURRENT_POSITION, LOAD_CURRENT_CHAR_UNCHECKED, AND_CHECK_CHAR    ','line_number':147,'multiline':True]
['text':' and ADVANCE_CP_AND_GOTO                                                ','line_number':148,'multiline':True]
['text':' Emitted by RegExpBytecodePeepholeOptimization.                         ','line_number':149,'multiline':True]
['text':' Bit Layout:                                                            ','line_number':150,'multiline':True]
['text':' 0x00 - 0x07    0x36 (fixed) Bytecode                                   ','line_number':151,'multiline':True]
['text':' 0x08 - 0x1F    Load character offset from current position             ','line_number':152,'multiline':True]
['text':' 0x20 - 0x2F    Number of characters to advance                         ','line_number':153,'multiline':True]
['text':' 0x30 - 0x3F    Character to match against (after mask applied)         ','line_number':154,'multiline':True]
['text':' 0x40 - 0x5F:   Bitmask bitwise and combined with current character     ','line_number':155,'multiline':True]
['text':' 0x60 - 0x7F    Minimum number of characters this pattern consumes      ','line_number':156,'multiline':True]
['text':' 0x80 - 0x9F    Address of bytecode when character is matched           ','line_number':157,'multiline':True]
['text':' 0xA0 - 0xBF    Address of bytecode when no match                       ','line_number':158,'multiline':True]
['text':' Combination of:                                                        ','line_number':160,'multiline':True]
['text':' LOAD_CURRENT_CHAR, CHECK_CHAR and ADVANCE_CP_AND_GOTO                  ','line_number':161,'multiline':True]
['text':' Emitted by RegExpBytecodePeepholeOptimization.                         ','line_number':162,'multiline':True]
['text':' Bit Layout:                                                            ','line_number':163,'multiline':True]
['text':' 0x00 - 0x07    0x37 (fixed) Bytecode                                   ','line_number':164,'multiline':True]
['text':' 0x08 - 0x1F    Load character offset from current position             ','line_number':165,'multiline':True]
['text':' 0x20 - 0x2F    Number of characters to advance                         ','line_number':166,'multiline':True]
['text':' 0x30 - 0x3F    Character to match                                      ','line_number':167,'multiline':True]
['text':' 0x40 - 0x5F    Address of bytecode when character is matched           ','line_number':168,'multiline':True]
['text':' 0x60 - 0x7F    Address of bytecode when no match                       ','line_number':169,'multiline':True]
['text':' Combination of:                                                        ','line_number':171,'multiline':True]
['text':' CHECK_CURRENT_POSITION, LOAD_CURRENT_CHAR_UNCHECKED, CHECK_CHAR        ','line_number':172,'multiline':True]
['text':' and ADVANCE_CP_AND_GOTO                                                ','line_number':173,'multiline':True]
['text':' Emitted by RegExpBytecodePeepholeOptimization.                         ','line_number':174,'multiline':True]
['text':' Bit Layout:                                                            ','line_number':175,'multiline':True]
['text':' 0x00 - 0x07    0x38 (fixed) Bytecode                                   ','line_number':176,'multiline':True]
['text':' 0x08 - 0x1F    Load character offset from current position             ','line_number':177,'multiline':True]
['text':' 0x20 - 0x2F    Number of characters to advance                         ','line_number':178,'multiline':True]
['text':' 0x30 - 0x3F    Character to match                                      ','line_number':179,'multiline':True]
['text':' 0x40 - 0x5F    Minimum number of characters this pattern consumes      ','line_number':180,'multiline':True]
['text':' 0x60 - 0x7F    Address of bytecode when character is matched           ','line_number':181,'multiline':True]
['text':' 0x80 - 0x9F    Address of bytecode when no match                       ','line_number':182,'multiline':True]
['text':' Combination of:                                                        ','line_number':184,'multiline':True]
['text':' LOAD_CURRENT_CHAR, CHECK_CHAR, CHECK_CHAR and ADVANCE_CP_AND_GOTO      ','line_number':185,'multiline':True]
['text':' Emitted by RegExpBytecodePeepholeOptimization.                         ','line_number':186,'multiline':True]
['text':' Bit Layout:                                                            ','line_number':187,'multiline':True]
['text':' 0x00 - 0x07    0x39 (fixed) Bytecode                                   ','line_number':188,'multiline':True]
['text':' 0x08 - 0x1F    Load character offset from current position             ','line_number':189,'multiline':True]
['text':' 0x20 - 0x3F    Number of characters to advance                         ','line_number':190,'multiline':True]
['text':' 0x40 - 0x4F    Character to match                                      ','line_number':191,'multiline':True]
['text':' 0x50 - 0x5F    Other Character to match                                ','line_number':192,'multiline':True]
['text':' 0x60 - 0x7F    Address of bytecode when either character is matched    ','line_number':193,'multiline':True]
['text':' 0x80 - 0x9F    Address of bytecode when no match                       ','line_number':194,'multiline':True]
['text':' Combination of:                                                        ','line_number':196,'multiline':True]
['text':' LOAD_CURRENT_CHAR, CHECK_GT, CHECK_BIT_IN_TABLE, GOTO and              ','line_number':197,'multiline':True]
['text':' and ADVANCE_CP_AND_GOTO                                                ','line_number':198,'multiline':True]
['text':' Emitted by RegExpBytecodePeepholeOptimization.                         ','line_number':199,'multiline':True]
['text':' Bit Layout:                                                            ','line_number':200,'multiline':True]
['text':' 0x00 - 0x07    0x3A (fixed) Bytecode                                   ','line_number':201,'multiline':True]
['text':' 0x08 - 0x1F    Load character offset from current position             ','line_number':202,'multiline':True]
['text':' 0x20 - 0x2F    Number of characters to advance                         ','line_number':203,'multiline':True]
['text':' 0x30 - 0x3F    Character to check if it is less than current char      ','line_number':204,'multiline':True]
['text':' 0x40 - 0xBF    Bit Table                                               ','line_number':205,'multiline':True]
['text':' 0xC0 - 0xDF    Address of bytecode when character is matched           ','line_number':206,'multiline':True]
['text':' 0xE0 - 0xFF    Address of bytecode when no match                       ','line_number':207,'multiline':True]
['text':' Just making sure we assigned values above properly. They should be','line_number':214,'multiline':False]
['text':' contiguous, strictly increasing, and start at 0.','line_number':215,'multiline':False]
['text':' TODO(jgruber): Do not explicitly assign values, instead generate them','line_number':216,'multiline':False]
['text':' implicitly from the list order.','line_number':217,'multiline':False]
['text':' namespace internal','line_number':251,'multiline':False]
['text':' namespace v8','line_number':252,'multiline':False]
['text':' V8_REGEXP_REGEXP_BYTECODES_H_','line_number':254,'multiline':False]
