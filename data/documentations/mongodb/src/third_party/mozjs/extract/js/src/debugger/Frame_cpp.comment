['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]
['text':' for AssertionConditionType','line_number':9,'multiline':False]
['text':' for HashMapEntry','line_number':10,'multiline':False]
['text':' for Maybe','line_number':11,'multiline':False]
['text':' for Range','line_number':12,'multiline':False]
['text':' for RangedPtr','line_number':13,'multiline':False]
['text':' for Result','line_number':14,'multiline':False]
['text':' for MakeScopeExit, ScopeExit','line_number':15,'multiline':False]
['text':' for ThreadLocal','line_number':16,'multiline':False]
['text':' for Vector','line_number':17,'multiline':False]
['text':' for size_t','line_number':19,'multiline':False]
['text':' for int32_t','line_number':20,'multiline':False]
['text':' for strlen','line_number':21,'multiline':False]
['text':' for std::move','line_number':22,'multiline':False]
['text':' for CallArgs, Handle','line_number':24,'multiline':False]
['text':' for Int32ToString','line_number':25,'multiline':False]
['text':' for NewDenseCopiedArray','line_number':27,'multiline':False]
['text':' for Completion, Debugger','line_number':28,'multiline':False]
['text':' for DebuggerEnvironment','line_number':30,'multiline':False]
['text':' for LeaveDebuggeeNoExecute','line_number':31,'multiline':False]
['text':' for DebuggerObject','line_number':32,'multiline':False]
['text':' for DebuggerScript','line_number':33,'multiline':False]
['text':' for CompileEvalScript','line_number':34,'multiline':False]
['text':' for GlobalScharedContext','line_number':35,'multiline':False]
['text':' for HeapPtr','line_number':36,'multiline':False]
['text':' for JSFreeOp','line_number':37,'multiline':False]
['text':' for MemoryUse','line_number':38,'multiline':False]
['text':' for IsAboutToBeFinalized','line_number':39,'multiline':False]
['text':' for RootedDebuggerFrame','line_number':40,'multiline':False]
['text':' for TraceCrossCompartmentEdge','line_number':41,'multiline':False]
['text':' for AddCellMemory','line_number':42,'multiline':False]
['text':' for InlineFrameIterator','line_number':43,'multiline':False]
['text':' for RematerializedFrame','line_number':44,'multiline':False]
['text':' for GetErrorMessage, JSMSG_*','line_number':45,'multiline':False]
['text':' for SetReservedSlot','line_number':46,'multiline':False]
['text':' for PrivateValue','line_number':47,'multiline':False]
['text':' for SourceText, SourceOwnership','line_number':48,'multiline':False]
['text':' for AutoStableStringChars','line_number':49,'multiline':False]
['text':' for ArgumentsObject','line_number':50,'multiline':False]
['text':' for ArrayObject','line_number':51,'multiline':False]
['text':' for AsyncFunctionGeneratorObject','line_number':52,'multiline':False]
['text':' for AsyncGeneratorObject','line_number':53,'multiline':False]
['text':' for JSDVG_SEARCH_STACK','line_number':54,'multiline':False]
['text':' for Compartment','line_number':55,'multiline':False]
['text':' for IsGlobalLexicalEnvironment','line_number':56,'multiline':False]
['text':' for AbstractGeneratorObject','line_number':57,'multiline':False]
['text':' for GlobalObject','line_number':58,'multiline':False]
['text':' for Call, ExecuteKernel','line_number':59,'multiline':False]
['text':' for Atomize','line_number':60,'multiline':False]
['text':' for JSContext, ReportValueError','line_number':61,'multiline':False]
['text':' for JSFunction, NewNativeFunction','line_number':62,'multiline':False]
['text':' for JSObject, RequireObject','line_number':63,'multiline':False]
['text':' for JSScript','line_number':64,'multiline':False]
['text':' for NativeDefineDataProperty','line_number':65,'multiline':False]
['text':' for AutoRealm','line_number':66,'multiline':False]
['text':' for JSAtomState','line_number':67,'multiline':False]
['text':' for PositionalFormalParameterIter','line_number':68,'multiline':False]
['text':' for AbstractFramePtr, FrameIter','line_number':69,'multiline':False]
['text':' for PropertyName, JSString','line_number':70,'multiline':False]
['text':' for DebugState','line_number':71,'multiline':False]
['text':' for Instance','line_number':72,'multiline':False]
['text':' for WasmInstanceObject','line_number':73,'multiline':False]
['text':' for DebugFrame','line_number':74,'multiline':False]
['text':' for Debugger::fromJSObject','line_number':76,'multiline':False]
['text':' for WeakMap::remove','line_number':77,'multiline':False]
['text':' for Compartment::wrap','line_number':78,'multiline':False]
['text':' for JSContext::check','line_number':79,'multiline':False]
['text':' for NewObjectWithGivenProto','line_number':80,'multiline':False]
['text':' for NativeObject::global','line_number':81,'multiline':False]
['text':' for GetProperty','line_number':82,'multiline':False]
['text':' for AutoRealm::AutoRealm','line_number':83,'multiline':False]
['text':' for AbstractFramePtr::script','line_number':84,'multiline':False]
['text':' namespace jit ','line_number':89,'multiline':True]
['text':' namespace js ','line_number':90,'multiline':True]
['text':' The Debugger.Frame.prototype object also has a class of','line_number':174,'multiline':False]
['text':' DebuggerFrame::class_ so we differentiate instances from the prototype','line_number':175,'multiline':False]
['text':' based on the presence of an owner debugger.','line_number':176,'multiline':False]
['text':' addProperty','line_number':187,'multiline':False]
['text':' delProperty','line_number':188,'multiline':False]
['text':' enumerate','line_number':189,'multiline':False]
['text':' newEnumerate','line_number':190,'multiline':False]
['text':' resolve','line_number':191,'multiline':False]
['text':' mayResolve','line_number':192,'multiline':False]
['text':' finalize','line_number':193,'multiline':False]
['text':' call','line_number':194,'multiline':False]
['text':' hasInstance','line_number':195,'multiline':False]
['text':' construct','line_number':196,'multiline':False]
['text':' trace','line_number':197,'multiline':False]
['text':' We require foreground finalization so we can destruct GeneratorInfo's','line_number':203,'multiline':False]
['text':' HeapPtrs.','line_number':204,'multiline':False]
['text':' static ','line_number':227,'multiline':True]
['text':' static ','line_number':235,'multiline':True]
['text':'*
 * Information held by a DebuggerFrame about a generator/async call. A
 * Debugger.Frame's GENERATOR_INFO_SLOT, if set, holds a PrivateValue pointing
 * to one of these.
 *
 * This is created and attached as soon as a generator object is created for a
 * debuggee generator/async frame, retained across suspensions and resumptions,
 * and cleared when the generator call ends permanently.
 *
 * It may seem like this information might belong in ordinary reserved slots on
 * the DebuggerFrame object. But that isn't possible:
 *
 * 1) Slots cannot contain cross-compartment references directly.
 * 2) Ordinary cross-compartment wrappers aren't good enough, because the
 *    debugger must create its own magic entries in the wrapper table for the GC
 *    to get zone collection groups right.
 * 3) Even if we make debugger wrapper table entries by hand, hiding
 *    cross-compartment edges as PrivateValues doesn't call post-barriers, and
 *    the generational GC won't update our pointer when the generator object
 *    gets tenured.
 *
 * Yes, officer, I definitely knew all this in advance and designed it this way
 * the first time.
 *
 * Note that it is not necessary to have a second cross-compartment wrapper
 * table entry to cover the pointer to the generator's script. The wrapper table
 * entries play two roles: they help the GC put a debugger zone in the same zone
 * group as its debuggee, and they serve as roots when collecting the debuggee
 * zone, but not the debugger zone. Since an AbstractGeneratorObject holds a
 * strong reference to its callee's script (via the callee), and the AGO and the
 * script are always in the same compartment, it suffices to add a
 * cross-compartment wrapper table entry for the Debugger.Frame -> AGO edge.
 ','line_number':267,'multiline':True]
['text':' An unwrapped cross-compartment reference to the generator object.','line_number':301,'multiline':False]
['text':'','line_number':302,'multiline':False]
['text':' Always an object.','line_number':303,'multiline':False]
['text':'','line_number':304,'multiline':False]
['text':' This cannot be GCPtr because we are not always destructed during sweeping;','line_number':305,'multiline':False]
['text':' a Debugger.Frame's generator is also cleared when the generator returns','line_number':306,'multiline':False]
['text':' permanently.','line_number':307,'multiline':False]
['text':' A cross-compartment reference to the generator's script.','line_number':310,'multiline':False]
['text':' Trace a rooted instance of this class, e.g. a Rooted<GeneratorInfo>.','line_number':319,'multiline':False]
['text':' Trace a GeneratorInfo from a DebuggerFrame object.','line_number':324,'multiline':False]
['text':' static ','line_number':358,'multiline':True]
['text':' When we initialize the generator information, we do not need to adjust','line_number':366,'multiline':False]
['text':' the stepper increment, because either it was already incremented when','line_number':367,'multiline':False]
['text':' the step hook was added, or we're setting this into on a new DebuggerFrame','line_number':368,'multiline':False]
['text':' that has not yet had the chance for a hook to be added to it.','line_number':369,'multiline':False]
['text':' There are two relations we must establish:','line_number':373,'multiline':False]
['text':'','line_number':374,'multiline':False]
['text':' 1) The DebuggerFrame must point to the AbstractGeneratorObject.','line_number':375,'multiline':False]
['text':'','line_number':376,'multiline':False]
['text':' 2) The generator's script's observer count must be bumped.','line_number':377,'multiline':False]
['text':' All frames running a debuggee script must themselves be marked as','line_number':388,'multiline':False]
['text':' debuggee frames. Bumping a script's generator observer count makes it a','line_number':389,'multiline':False]
['text':' debuggee, so we need to mark all frames on the stack running it as','line_number':390,'multiline':False]
['text':' debuggees as well, not just this one. This call takes care of all that.','line_number':391,'multiline':False]
['text':' If no frame pointer was provided to decrement the stepper counter,','line_number':407,'multiline':False]
['text':' then we must be terminating a generator, otherwise the stepper count','line_number':408,'multiline':False]
['text':' would have no way to synchronize properly.','line_number':409,'multiline':False]
['text':' If we are terminating a non-generator frame that had a step handler,','line_number':414,'multiline':False]
['text':' we need to decrement the counter to keep things in sync.','line_number':415,'multiline':False]
['text':' 3) The generator's script's observer count must be dropped.','line_number':426,'multiline':False]
['text':'','line_number':427,'multiline':False]
['text':' For ordinary calls, Debugger.Frame objects drop the script's stepper count','line_number':428,'multiline':False]
['text':' when the frame is popped, but for generators, they leave the stepper count','line_number':429,'multiline':False]
['text':' incremented across suspensions. This means that, whereas ordinary calls','line_number':430,'multiline':False]
['text':' never need to drop the stepper count from the D.F finalizer, generator','line_number':431,'multiline':False]
['text':' calls may.','line_number':432,'multiline':False]
['text':' If we are terminating a generator frame that had a step handler,','line_number':437,'multiline':False]
['text':' we need to decrement the counter to keep things in sync.','line_number':438,'multiline':False]
['text':' 1) The DebuggerFrame must no longer point to the AbstractGeneratorObject.','line_number':443,'multiline':False]
['text':' There must be generator info because otherwise this would be the same','line_number':449,'multiline':False]
['text':' overall behavior as terminate() except that here we do not properly','line_number':450,'multiline':False]
['text':' adjust stepper counts.','line_number':451,'multiline':False]
['text':' static ','line_number':457,'multiline':True]
['text':' static ','line_number':475,'multiline':True]
['text':' Generators and async functions can't be constructed.','line_number':485,'multiline':False]
['text':' Wasm debug frames don't need their pc updated -- it's null.','line_number':493,'multiline':False]
['text':' Rematerialized frames don't need their pc updated. The reason we','line_number':499,'multiline':False]
['text':' need to update pc is because we might get the same Debugger.Frame','line_number':500,'multiline':False]
['text':' object for multiple re-entries into debugger code from debuggee','line_number':501,'multiline':False]
['text':' code. This reentrancy is not possible with rematerialized frames,','line_number':502,'multiline':False]
['text':' because when returning to debuggee code, we would have bailed out','line_number':503,'multiline':False]
['text':' to baseline.','line_number':504,'multiline':False]
['text':'','line_number':505,'multiline':False]
['text':' We walk the stack to assert that it doesn't need updating.','line_number':506,'multiline':False]
['text':' static ','line_number':538,'multiline':True]
['text':' static ','line_number':572,'multiline':True]
['text':' static ','line_number':599,'multiline':True]
['text':' If the parent frame crosses an explicit async stack boundary, we','line_number':610,'multiline':False]
['text':' treat that as an indication to stop traversing sync frames, so that','line_number':611,'multiline':False]
['text':' the on-stack Debugger.Frame instances align with what you would','line_number':612,'multiline':False]
['text':' see in a stringified stack trace.','line_number':613,'multiline':False]
['text':' If there is no parent frame, we're done.','line_number':619,'multiline':False]
['text':' If the frame is suspended, there is no older frame.','line_number':634,'multiline':False]
['text':' static ','line_number':641,'multiline':True]
['text':' An on-stack frame may not have an associated generator yet when the','line_number':647,'multiline':False]
['text':' frame is initially entered.','line_number':648,'multiline':False]
['text':' In initial function execution, there is no promise.','line_number':660,'multiline':False]
['text':' static ','line_number':671,'multiline':True]
['text':' static ','line_number':710,'multiline':True]
['text':' Indirect eval frames are both isGlobalFrame() and isEvalFrame(), so the','line_number':715,'multiline':False]
['text':' order of checks here is significant.','line_number':716,'multiline':False]
['text':' static ','line_number':745,'multiline':True]
['text':'
 * If succesful, transfers the ownership of the given `handler` to this
 * Debugger.Frame. Note that on failure, the ownership of `handler` is not
 * transferred, and the caller is responsible for cleaning it up.
 ','line_number':765,'multiline':True]
['text':' static ','line_number':770,'multiline':True]
['text':' Handler has never been successfully associated with the frame so allow','line_number':773,'multiline':False]
['text':' UniquePtr to delete it rather than calling drop() if we return early from','line_number':774,'multiline':False]
['text':' this method..','line_number':775,'multiline':False]
['text':' Adjust execution observability and step counts on whatever code (JS or','line_number':787,'multiline':False]
['text':' Wasm) this frame is running.','line_number':788,'multiline':False]
['text':' If the frame is entirely dead, we still allow setting the onStep','line_number':807,'multiline':False]
['text':' handler, but it has no effect.','line_number':808,'multiline':False]
['text':' Now that the stepper counts and observability are set correctly, we can','line_number':811,'multiline':False]
['text':' actually switch the handler.','line_number':812,'multiline':False]
['text':' Single stepping toggled off->on.','line_number':837,'multiline':False]
['text':' Single stepping toggled off->on.','line_number':847,'multiline':False]
['text':' Ensure observability *before* incrementing the step mode count.','line_number':849,'multiline':False]
['text':' Calling this function after calling incrementStepperCount','line_number':850,'multiline':False]
['text':' will make it a no-op.','line_number':851,'multiline':False]
['text':' Single stepping toggled on->off.','line_number':871,'multiline':False]
['text':' Single stepping toggled on->off.','line_number':876,'multiline':False]
['text':' static ','line_number':880,'multiline':True]
['text':'
 * Evaluate |chars[0..length-1]| in the environment |env|, treating that
 * source as appearing starting at |lineno| in |filename|. Store the return
 * value in |*rval|. Use |thisv| as the 'this' value.
 *
 * If |frame| is non-nullptr, evaluate as for a direct eval in that frame; |env|
 * must be either |frame|'s DebugScopeObject, or some extension of that
 * environment; either way, |frame|'s scope is where newly declared variables
 * go. In this case, |frame| must have a computed 'this' value, equal to
 * |thisv|.
 ','line_number':913,'multiline':True]
['text':' Do not perform the Javascript filename validation security check for
       * javascript executions sent through the debugger. Besides making up
       * a filename for these codepaths, we must allow arbitrary JS execution
       * for the Browser toolbox to function. ','line_number':936,'multiline':True]
['text':' Don't lazy parse. We need full-parsing to correctly support bytecode
       * emission for private fields/methods. See EmitterScope::lookupPrivate.
       ','line_number':941,'multiline':True]
['text':' Do not consider executeInGlobal{WithBindings} as an eval, but instead','line_number':981,'multiline':False]
['text':' as executing a series of statements at the global level. This is to','line_number':982,'multiline':False]
['text':' circumvent the fresh lexical scope that all eval have, so that the','line_number':983,'multiline':False]
['text':' users of executeInGlobal, like the web console, may add new bindings to','line_number':984,'multiline':False]
['text':' the global scope.','line_number':985,'multiline':False]
['text':' Note: pass NullHandleValue for newTarget because the parser doesn't accept','line_number':996,'multiline':False]
['text':' new.target in debugger eval frames (bug 1169076). Once that changes we need','line_number':997,'multiline':False]
['text':' to compute newTarget here based on |frame|.','line_number':998,'multiline':False]
['text':' Either we're specifying the frame, or a global.','line_number':1006,'multiline':False]
['text':' Gather keys and values of bindings, if any. This must be done in the','line_number':1010,'multiline':False]
['text':' debugger compartment, since that is where any exceptions must be thrown.','line_number':1011,'multiline':False]
['text':' If evalWithBindings, create the inner environment.','line_number':1045,'multiline':False]
['text':' Note whether we are in an evaluation that might invoke the OnNativeCall','line_number':1076,'multiline':False]
['text':' hook, so that the JITs will be disabled.','line_number':1077,'multiline':False]
['text':' Run the code and produce the completion value.','line_number':1081,'multiline':False]
['text':' static ','line_number':1095,'multiline':True]
['text':' static ','line_number':1152,'multiline':True]
['text':' static ','line_number':1166,'multiline':True]
['text':' static ','line_number':1202,'multiline':True]
['text':' Connections between dying Debugger.Frames and their','line_number':1208,'multiline':False]
['text':' AbstractGeneratorObjects, as well as the frame's stack data should have','line_number':1209,'multiline':False]
['text':' been by a call to terminate() from sweepAll or some other place.','line_number':1210,'multiline':False]
['text':' static ','line_number':1238,'multiline':True]
['text':' Forbid Debugger.Frame.prototype, which is of class DebuggerFrame::class_','line_number':1253,'multiline':False]
['text':' but isn't really a working Debugger.Frame object.','line_number':1254,'multiline':False]
['text':' static ','line_number':1307,'multiline':True]
['text':' The async promise value is only provided for async functions and','line_number':1483,'multiline':False]
['text':' async generator functions.','line_number':1484,'multiline':False]
['text':' static ','line_number':1513,'multiline':True]
['text':' If the parent frame crosses an explicit async stack boundary, or we','line_number':1524,'multiline':False]
['text':' have hit the end of the synchronous frames, we want to switch over','line_number':1525,'multiline':False]
['text':' to using SavedFrames.','line_number':1526,'multiline':False]
['text':' If there are no more parent frames, we're done.','line_number':1540,'multiline':False]
['text':' If we hit another frame that we observe, then there is no saved','line_number':1545,'multiline':False]
['text':' frame that we'd want to return.','line_number':1546,'multiline':False]
['text':' The getter used for each element of frame.arguments.','line_number':1581,'multiline':False]
['text':' See DebuggerFrame::getArguments.','line_number':1582,'multiline':False]
['text':' Check that the this value is an Arguments object.','line_number':1587,'multiline':False]
['text':' TODO handle wasm frame arguments -- they are not yet reflectable.','line_number':1609,'multiline':False]
['text':' Since getters can be extracted and applied to other objects,','line_number':1612,'multiline':False]
['text':' there is no guarantee this object has an ith argument.','line_number':1613,'multiline':False]
['text':' We might've been called before the CallObject was','line_number':1622,'multiline':False]
['text':' created.','line_number':1623,'multiline':False]
['text':' static ','line_number':1648,'multiline':True]
['text':' static ','line_number':1896,'multiline':True]
