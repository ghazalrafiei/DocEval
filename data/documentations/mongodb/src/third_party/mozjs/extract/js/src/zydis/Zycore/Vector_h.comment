['text':'**************************************************************************************************

  Zyan Core Library (Zycore-C)

  Original Author : Florian Bernd

 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.

**************************************************************************************************','line_number':1,'multiline':True]
['text':'*
 * @file
 * @brief   Implements the vector container class.
 ','line_number':27,'multiline':True]
['text':' ============================================================================================== ','line_number':46,'multiline':True]
['text':' Constants                                                                                      ','line_number':47,'multiline':True]
['text':' ============================================================================================== ','line_number':48,'multiline':True]
['text':'*
 * @brief   The initial minimum capacity (number of elements) for all dynamically allocated vector
 *          instances.
 ','line_number':50,'multiline':True]
['text':'*
 * @brief   The default growth factor for all vector instances.
 ','line_number':56,'multiline':True]
['text':'*
 * @brief   The default shrink threshold for all vector instances.
 ','line_number':61,'multiline':True]
['text':' ============================================================================================== ','line_number':66,'multiline':True]
['text':' Enums and types                                                                                ','line_number':67,'multiline':True]
['text':' ============================================================================================== ','line_number':68,'multiline':True]
['text':'*
 * @brief   Defines the `ZyanVector` struct.
 *
 * All fields in this struct should be considered as "private". Any changes may lead to unexpected
 * behavior.
 ','line_number':70,'multiline':True]
['text':'*
     * @brief   The memory allocator.
     ','line_number':78,'multiline':True]
['text':'*
     * @brief   The growth factor.
     ','line_number':82,'multiline':True]
['text':'*
     * @brief   The shrink threshold.
     ','line_number':86,'multiline':True]
['text':'*
     * @brief   The current number of elements in the vector.
     ','line_number':90,'multiline':True]
['text':'*
     * @brief   The maximum capacity (number of elements).
     ','line_number':94,'multiline':True]
['text':'*
     * @brief   The size of a single element in bytes.
     ','line_number':98,'multiline':True]
['text':'*
     * @brief   The element destructor callback.   
     ','line_number':102,'multiline':True]
['text':'*
     * @brief   The data pointer.
     ','line_number':106,'multiline':True]
['text':' ============================================================================================== ','line_number':112,'multiline':True]
['text':' Macros                                                                                         ','line_number':113,'multiline':True]
['text':' ============================================================================================== ','line_number':114,'multiline':True]
['text':' ---------------------------------------------------------------------------------------------- ','line_number':116,'multiline':True]
['text':' General                                                                                        ','line_number':117,'multiline':True]
['text':' ---------------------------------------------------------------------------------------------- ','line_number':118,'multiline':True]
['text':'*
 * @brief   Defines an uninitialized `ZyanVector` instance.
 ','line_number':120,'multiline':True]
['text':' allocator        ','line_number':125,'multiline':True]
['text':' growth_factor    ','line_number':126,'multiline':True]
['text':' shrink_threshold ','line_number':127,'multiline':True]
['text':' size             ','line_number':128,'multiline':True]
['text':' capacity         ','line_number':129,'multiline':True]
['text':' element_size     ','line_number':130,'multiline':True]
['text':' destructor       ','line_number':131,'multiline':True]
['text':' data             ','line_number':132,'multiline':True]
['text':' ---------------------------------------------------------------------------------------------- ','line_number':135,'multiline':True]
['text':' Helper macros                                                                                  ','line_number':136,'multiline':True]
['text':' ---------------------------------------------------------------------------------------------- ','line_number':137,'multiline':True]
['text':'*
 * @brief   Returns the value of the element at the given `index`.
 *
 * @param   type    The desired value type.
 * @param   vector  A pointer to the `ZyanVector` instance.
 * @param   index   The element index.
 *
 * @result  The value of the desired element in the vector.
 *
 * Note that this function is unsafe and might dereference a null-pointer.
 ','line_number':139,'multiline':True]
['text':'*
 * @brief   Loops through all elements of the vector.
 *
 * @param   type        The desired value type.
 * @param   vector      A pointer to the `ZyanVector` instance.
 * @param   item_name   The name of the iterator item.
 * @param   body        The body to execute for each item in the vector.
 ','line_number':158,'multiline':True]
['text':'*
 * @brief   Loops through all elements of the vector.
 *
 * @param   type        The desired value type.
 * @param   vector      A pointer to the `ZyanVector` instance.
 * @param   item_name   The name of the iterator item.
 * @param   body        The body to execute for each item in the vector.
 ','line_number':180,'multiline':True]
['text':' ---------------------------------------------------------------------------------------------- ','line_number':202,'multiline':True]
['text':' ============================================================================================== ','line_number':204,'multiline':True]
['text':' Exported functions                                                                             ','line_number':205,'multiline':True]
['text':' ============================================================================================== ','line_number':206,'multiline':True]
['text':' ---------------------------------------------------------------------------------------------- ','line_number':208,'multiline':True]
['text':' Constructor and destructor                                                                     ','line_number':209,'multiline':True]
['text':' ---------------------------------------------------------------------------------------------- ','line_number':210,'multiline':True]
['text':'*
 * @brief   Initializes the given `ZyanVector` instance.
 *
 * @param   vector          A pointer to the `ZyanVector` instance.
 * @param   element_size    The size of a single element in bytes.
 * @param   capacity        The initial capacity (number of elements).
 * @param   destructor      A destructor callback that is invoked every time an item is deleted, or
 *                          `ZYAN_NULL` if not needed.
 *
 * @return  A zyan status code.
 *
 * The memory for the vector elements is dynamically allocated by the default allocator using the
 * default growth factor of `2.0f` and the default shrink threshold of `0.25f`.
 *
 * Finalization with `ZyanVectorDestroy` is required for all instances created by this function.
 ','line_number':214,'multiline':True]
['text':' ZYAN_NO_LIBC','line_number':233,'multiline':False]
['text':'*
 * @brief   Initializes the given `ZyanVector` instance and sets a custom `allocator` and memory
 *          allocation/deallocation parameters.
 *
 * @param   vector              A pointer to the `ZyanVector` instance.
 * @param   element_size        The size of a single element in bytes.
 * @param   capacity            The initial capacity (number of elements).
 * @param   destructor          A destructor callback that is invoked every time an item is deleted, 
 *                              or `ZYAN_NULL` if not needed.
 * @param   allocator           A pointer to a `ZyanAllocator` instance.
 * @param   growth_factor       The growth factor (from `1.0f` to `x.xf`).
 * @param   shrink_threshold    The shrink threshold (from `0.0f` to `1.0f`).
 *
 * @return  A zyan status code.
 *
 * A growth factor of `1.0f` disables overallocation and a shrink threshold of `0.0f` disables
 * dynamic shrinking.
 *
 * Finalization with `ZyanVectorDestroy` is required for all instances created by this function.
 ','line_number':235,'multiline':True]
['text':'*
 * @brief   Initializes the given `ZyanVector` instance and configures it to use a custom user
 *          defined buffer with a fixed size.
 *
 * @param   vector          A pointer to the `ZyanVector` instance.
 * @param   element_size    The size of a single element in bytes.
 * @param   buffer          A pointer to the buffer that is used as storage for the elements.
 * @param   capacity        The maximum capacity (number of elements) of the buffer.
 * @param   destructor      A destructor callback that is invoked every time an item is deleted, or
 *                          `ZYAN_NULL` if not needed.
 *
 * @return  A zyan status code.
 *
 * Finalization is not required for instances created by this function.
 ','line_number':259,'multiline':True]
['text':'*
 * @brief   Destroys the given `ZyanVector` instance.
 *
 * @param   vector  A pointer to the `ZyanVector` instance..
 *
 * @return  A zyan status code.
 ','line_number':277,'multiline':True]
['text':' ---------------------------------------------------------------------------------------------- ','line_number':286,'multiline':True]
['text':' Duplication                                                                                    ','line_number':287,'multiline':True]
['text':' ---------------------------------------------------------------------------------------------- ','line_number':288,'multiline':True]
['text':'*
 * @brief   Initializes a new `ZyanVector` instance by duplicating an existing vector.
 *
 * @param   destination A pointer to the (uninitialized) destination `ZyanVector` instance.
 * @param   source      A pointer to the source vector.
 * @param   capacity    The initial capacity (number of elements).
 *
 *                      This value is automatically adjusted to the size of the source vector, if
 *                      a smaller value was passed.
 *
 * @return  A zyan status code.
 *
 * The memory for the vector is dynamically allocated by the default allocator using the default
 * growth factor of `2.0f` and the default shrink threshold of `0.25f`.
 *
 * Finalization with `ZyanVectorDestroy` is required for all instances created by this function.
 ','line_number':292,'multiline':True]
['text':' ZYAN_NO_LIBC','line_number':312,'multiline':False]
['text':'*
 * @brief   Initializes a new `ZyanVector` instance by duplicating an existing vector and sets a
 *          custom `allocator` and memory allocation/deallocation parameters.
 *
 * @param   destination         A pointer to the (uninitialized) destination `ZyanVector` instance.
 * @param   source              A pointer to the source vector.
 * @param   capacity            The initial capacity (number of elements).

 *                              This value is automatically adjusted to the size of the source
 *                              vector, if a smaller value was passed.
 * @param   allocator           A pointer to a `ZyanAllocator` instance.
 * @param   growth_factor       The growth factor (from `1.0f` to `x.xf`).
 * @param   shrink_threshold    The shrink threshold (from `0.0f` to `1.0f`).
 *
 * @return  A zyan status code.
 *
 * A growth factor of `1.0f` disables overallocation and a shrink threshold of `0.0f` disables
 * dynamic shrinking.
 *
 * Finalization with `ZyanVectorDestroy` is required for all instances created by this function.
 ','line_number':314,'multiline':True]
['text':'*
 * @brief   Initializes a new `ZyanVector` instance by duplicating an existing vector and
 *          configures it to use a custom user defined buffer with a fixed size.
 *
 * @param   destination A pointer to the (uninitialized) destination `ZyanVector` instance.
 * @param   source      A pointer to the source vector.
 * @param   buffer      A pointer to the buffer that is used as storage for the elements.
 * @param   capacity    The maximum capacity (number of elements) of the buffer.

 *                      This function will fail, if the capacity of the buffer is less than the
 *                      size of the source vector.
 *
 * @return  A zyan status code.
 *
 * Finalization is not required for instances created by this function.
 ','line_number':338,'multiline':True]
['text':' ---------------------------------------------------------------------------------------------- ','line_number':357,'multiline':True]
['text':' Element access                                                                                 ','line_number':358,'multiline':True]
['text':' ---------------------------------------------------------------------------------------------- ','line_number':359,'multiline':True]
['text':'*
 * @brief   Returns a constant pointer to the element at the given `index`.
 *
 * @param   vector      A pointer to the `ZyanVector` instance.
 * @param   index       The element index.
 *
 * @return  A constant pointer to the desired element in the vector or `ZYAN_NULL`, if an error
 *          occured.
 *
 * Note that the returned pointer might get invalid when the vector is resized by either a manual
 * call to the memory-management functions or implicitly by inserting or removing elements.
 *
 * Take a look at `ZyanVectorGetPointer` instead, if you need a function that returns a zyan status
 * code.
 ','line_number':361,'multiline':True]
['text':'*
 * @brief   Returns a mutable pointer to the element at the given `index`.
 *
 * @param   vector      A pointer to the `ZyanVector` instance.
 * @param   index       The element index.
 *
 * @return  A mutable pointer to the desired element in the vector or `ZYAN_NULL`, if an error
 *          occured.
 *
 * Note that the returned pointer might get invalid when the vector is resized by either a manual
 * call to the memory-management functions or implicitly by inserting or removing elements.
 *
 * Take a look at `ZyanVectorGetPointerMutable` instead, if you need a function that returns a
 * zyan status code.
 ','line_number':378,'multiline':True]
['text':'*
 * @brief   Returns a constant pointer to the element at the given `index`.
 *
 * @param   vector  A pointer to the `ZyanVector` instance.
 * @param   index   The element index.
 * @param   value   Receives a constant pointer to the desired element in the vector.
 *
 * Note that the returned pointer might get invalid when the vector is resized by either a manual
 * call to the memory-management functions or implicitly by inserting or removing elements.
 *
 * @return  A zyan status code.
 ','line_number':395,'multiline':True]
['text':'*
 * @brief   Returns a mutable pointer to the element at the given `index`.
 *
 * @param   vector  A pointer to the `ZyanVector` instance.
 * @param   index   The element index.
 * @param   value Receives a mutable pointer to the desired element in the vector.
 *
 * Note that the returned pointer might get invalid when the vector is resized by either a manual
 * call to the memory-management functions or implicitly by inserting or removing elements.
 *
 * @return  A zyan status code.
 ','line_number':410,'multiline':True]
['text':'*
 * @brief   Assigns a new value to the element at the given `index`.
 *
 * @param   vector  A pointer to the `ZyanVector` instance.
 * @param   index   The value index.
 * @param   value   The value to assign.
 *
 * @return  A zyan status code.
 ','line_number':425,'multiline':True]
['text':' ---------------------------------------------------------------------------------------------- ','line_number':437,'multiline':True]
['text':' Insertion                                                                                      ','line_number':438,'multiline':True]
['text':' ---------------------------------------------------------------------------------------------- ','line_number':439,'multiline':True]
['text':'*
 * @brief   Adds a new `element` to the end of the vector.
 *
 * @param   vector  A pointer to the `ZyanVector` instance.
 * @param   element A pointer to the element to add.
 *
 * @return  A zyan status code.
 ','line_number':441,'multiline':True]
['text':'*
 * @brief   Inserts an `element` at the given `index` of the vector.
 *
 * @param   vector  A pointer to the `ZyanVector` instance.
 * @param   index   The insert index.
 * @param   element A pointer to the element to insert.
 *
 * @return  A zyan status code.
 ','line_number':451,'multiline':True]
['text':'*
 * @brief   Inserts multiple `elements` at the given `index` of the vector.
 *
 * @param   vector      A pointer to the `ZyanVector` instance.
 * @param   index       The insert index.
 * @param   elements    A pointer to the first element.
 * @param   count       The number of elements to insert.
 *
 * @return  A zyan status code.
 ','line_number':463,'multiline':True]
['text':'*
 * @brief   Constructs an `element` in-place at the end of the vector.
 *
 * @param   vector      A pointer to the `ZyanVector` instance.
 * @param   element     Receives a pointer to the new element.
 * @param   constructor The constructor callback or `ZYAN_NULL`. The new element will be in
 *                      undefined state, if no constructor was passed.
 *
 * @return  A zyan status code.
 ','line_number':476,'multiline':True]
['text':'*
 * @brief   Constructs an `element` in-place and inserts it at the given `index` of the vector.
 *
 * @param   vector      A pointer to the `ZyanVector` instance.
 * @param   index       The insert index.
 * @param   element     Receives a pointer to the new element.
 * @param   constructor The constructor callback or `ZYAN_NULL`. The new element will be in
 *                      undefined state, if no constructor was passed.
 *
 * @return  A zyan status code.
 ','line_number':489,'multiline':True]
['text':' ---------------------------------------------------------------------------------------------- ','line_number':503,'multiline':True]
['text':' Utils                                                                                          ','line_number':504,'multiline':True]
['text':' ---------------------------------------------------------------------------------------------- ','line_number':505,'multiline':True]
['text':'*
 * @brief   Swaps the element at `index_first` with the element at `index_second`.
 *
 * @param   vector          A pointer to the `ZyanVector` instance.
 * @param   index_first     The index of the first element.
 * @param   index_second    The index of the second element.
 *
 * @return  A zyan status code.
 *
 * This function requires the vector to have spare capacity for one temporary element. Call
 * `ZyanVectorReserve` before this function to increase capacity, if needed.
 ','line_number':507,'multiline':True]
['text':' ---------------------------------------------------------------------------------------------- ','line_number':522,'multiline':True]
['text':' Deletion                                                                                       ','line_number':523,'multiline':True]
['text':' ---------------------------------------------------------------------------------------------- ','line_number':524,'multiline':True]
['text':'*
 * @brief   Deletes the element at the given `index` of the vector.
 *
 * @param   vector  A pointer to the `ZyanVector` instance.
 * @param   index   The element index.
 *
 * @return  A zyan status code.
 ','line_number':526,'multiline':True]
['text':'*
 * @brief   Deletes multiple elements from the given vector, starting at `index`.
 *
 * @param   vector  A pointer to the `ZyanVector` instance.
 * @param   index   The index of the first element to delete.
 * @param   count   The number of elements to delete.
 *
 * @return  A zyan status code.
 ','line_number':536,'multiline':True]
['text':'*
 * @brief   Removes the last element of the vector.
 *
 * @param   vector  A pointer to the `ZyanVector` instance.
 *
 * @return  A zyan status code.
 ','line_number':548,'multiline':True]
['text':'*
 * @brief   Erases all elements of the given vector.
 *
 * @param   vector  A pointer to the `ZyanVector` instance.
 *
 * @return  A zyan status code.
 ','line_number':557,'multiline':True]
['text':' ---------------------------------------------------------------------------------------------- ','line_number':566,'multiline':True]
['text':' Searching                                                                                      ','line_number':567,'multiline':True]
['text':' ---------------------------------------------------------------------------------------------- ','line_number':568,'multiline':True]
['text':'*
 * @brief   Sequentially searches for the first occurrence of `element` in the given vector.
 *
 * @param   vector      A pointer to the `ZyanVector` instance.
 * @param   element     A pointer to the element to search for.
 * @param   found_index A pointer to a variable that receives the index of the found element.
 * @param   comparison  The comparison function to use.
 *
 * @return  `ZYAN_STATUS_TRUE` if the element was found, `ZYAN_STATUS_FALSE` if not or a generic
 *          zyan status code if an error occured.
 *
 * The `found_index` is set to `-1`, if the element was not found.
 ','line_number':570,'multiline':True]
['text':'*
 * @brief   Sequentially searches for the first occurrence of `element` in the given vector.
 *
 * @param   vector      A pointer to the `ZyanVector` instance.
 * @param   element     A pointer to the element to search for.
 * @param   found_index A pointer to a variable that receives the index of the found element.
 * @param   comparison  The comparison function to use.
 * @param   index       The start index.
 * @param   count       The maximum number of elements to iterate, beginning from the start `index`.
 *
 * @return  `ZYAN_STATUS_TRUE` if the element was found, `ZYAN_STATUS_FALSE` if not or a generic
 *          zyan status code if an error occured.
 *
 * The `found_index` is set to `-1`, if the element was not found.
 ','line_number':586,'multiline':True]
['text':'*
 * @brief   Searches for the first occurrence of `element` in the given vector using a binary-
 *          search algorithm.
 *
 * @param   vector      A pointer to the `ZyanVector` instance.
 * @param   element     A pointer to the element to search for.
 * @param   found_index A pointer to a variable that receives the index of the found element.
 * @param   comparison  The comparison function to use.
 *
 * @return  `ZYAN_STATUS_TRUE` if the element was found, `ZYAN_STATUS_FALSE` if not or a generic
 *          zyan status code if an error occured.
 *
 * If found, `found_index` contains the zero-based index of `element`. If not found, `found_index`
 * contains the index of the first entry larger than `element`.
 *
 * This function requires all elements in the vector to be strictly ordered (sorted).
 ','line_number':604,'multiline':True]
['text':'*
 * @brief   Searches for the first occurrence of `element` in the given vector using a binary-
 *          search algorithm.
 *
 * @param   vector      A pointer to the `ZyanVector` instance.
 * @param   element     A pointer to the element to search for.
 * @param   found_index A pointer to a variable that receives the index of the found element.
 * @param   comparison  The comparison function to use.
 * @param   index       The start index.
 * @param   count       The maximum number of elements to iterate, beginning from the start `index`.
 *
 * @return  `ZYAN_STATUS_TRUE` if the element was found, `ZYAN_STATUS_FALSE` if not or a generic
 *          zyan status code if an error occured.
 *
 * If found, `found_index` contains the zero-based index of `element`. If not found, `found_index`
 * contains the index of the first entry larger than `element`.
 *
 * This function requires all elements in the vector to be strictly ordered (sorted).
 ','line_number':624,'multiline':True]
['text':' ---------------------------------------------------------------------------------------------- ','line_number':646,'multiline':True]
['text':' Memory management                                                                              ','line_number':647,'multiline':True]
['text':' ---------------------------------------------------------------------------------------------- ','line_number':648,'multiline':True]
['text':'*
 * @brief   Resizes the given `ZyanVector` instance.
 *
 * @param   vector  A pointer to the `ZyanVector` instance.
 * @param   size    The new size of the vector.
 *
 * @return  A zyan status code.
 ','line_number':650,'multiline':True]
['text':'*
 * @brief   Resizes the given `ZyanVector` instance.
 *
 * @param   vector      A pointer to the `ZyanVector` instance.
 * @param   size        The new size of the vector.
 * @param   initializer A pointer to a value to be used as initializer for new items.
 *
 * @return  A zyan status code.
 ','line_number':660,'multiline':True]
['text':'*
 * @brief   Changes the capacity of the given `ZyanVector` instance.
 *
 * @param   vector      A pointer to the `ZyanVector` instance.
 * @param   capacity    The new minimum capacity of the vector.
 *
 * @return  A zyan status code.
 ','line_number':672,'multiline':True]
['text':'*
 * @brief   Shrinks the capacity of the given vector to match it's size.
 *
 * @param   vector  A pointer to the `ZyanVector` instance.
 *
 * @return  A zyan status code.
 ','line_number':682,'multiline':True]
['text':' ---------------------------------------------------------------------------------------------- ','line_number':691,'multiline':True]
['text':' Information                                                                                    ','line_number':692,'multiline':True]
['text':' ---------------------------------------------------------------------------------------------- ','line_number':693,'multiline':True]
['text':'*
 * @brief   Returns the current capacity of the vector.
 *
 * @param   vector      A pointer to the `ZyanVector` instance.
 * @param   capacity    Receives the size of the vector.
 *
 * @return  A zyan status code.
 ','line_number':695,'multiline':True]
['text':'*
 * @brief   Returns the current size of the vector.
 *
 * @param   vector  A pointer to the `ZyanVector` instance.
 * @param   size    Receives the size of the vector.
 *
 * @return  A zyan status code.
 ','line_number':705,'multiline':True]
['text':' ---------------------------------------------------------------------------------------------- ','line_number':715,'multiline':True]
['text':' ============================================================================================== ','line_number':717,'multiline':True]
['text':' ZYCORE_VECTOR_H ','line_number':723,'multiline':True]
