['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 *
 * Copyright 2014 Mozilla Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ','line_number':1,'multiline':True]
['text':' This function performs the low-overhead signal handler initialization that we','line_number':30,'multiline':False]
['text':' want to do eagerly to ensure a more-deterministic global process state. This','line_number':31,'multiline':False]
['text':' is especially relevant for signal handlers since handler ordering depends on','line_number':32,'multiline':False]
['text':' installation order: the wasm signal handler must run *before* the other crash','line_number':33,'multiline':False]
['text':' handlers (ds/MemoryProtectionExceptionHandler.h and breakpad) and since POSIX','line_number':34,'multiline':False]
['text':' signal handlers work LIFO, this function needs to be called at the end of the','line_number':35,'multiline':False]
['text':' startup process, after the other two handlers have been installed. Currently,','line_number':36,'multiline':False]
['text':' this is achieved by having JSRuntime() call this function. There can be','line_number':37,'multiline':False]
['text':' multiple JSRuntimes per process so this function can thus be called multiple','line_number':38,'multiline':False]
['text':' times, having no effect after the first call.','line_number':39,'multiline':False]
['text':' Assuming EnsureEagerProcessSignalHandlers() has already been called,','line_number':42,'multiline':False]
['text':' this function performs the full installation of signal handlers which must','line_number':43,'multiline':False]
['text':' be performed per-thread/JSContext. This operation may incur some overhead and','line_number':44,'multiline':False]
['text':' so should be done only when needed to use wasm. Currently, this is done in','line_number':45,'multiline':False]
['text':' wasm::HasPlatformSupport() which is called when deciding whether to expose','line_number':46,'multiline':False]
['text':' the 'WebAssembly' object on the global object.','line_number':47,'multiline':False]
['text':' Return whether, with the given simulator register state, a memory access to','line_number':50,'multiline':False]
['text':' 'addr' of size 'numBytes' needs to trap and, if so, where the simulator','line_number':51,'multiline':False]
['text':' should redirect pc to.','line_number':52,'multiline':False]
['text':' Return whether, with the given simulator register state, an illegal','line_number':56,'multiline':False]
['text':' instruction fault is expected and, if so, the value of the next PC.','line_number':57,'multiline':False]
['text':' namespace wasm','line_number':60,'multiline':False]
['text':' namespace js','line_number':61,'multiline':False]
['text':' wasm_signal_handlers_h','line_number':63,'multiline':False]
