['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]
['text':'
 * JS standard exception implementation.
 ','line_number':7,'multiline':True]
['text':' JS::PrintError','line_number':32,'multiline':False]
['text':' JS::ExceptionStack','line_number':33,'multiline':False]
['text':' JS_IsArrayBufferViewObject','line_number':34,'multiline':False]
['text':' JSErrNum, js::GetErrorMessage, JSMSG_*','line_number':35,'multiline':False]
['text':' JS::GetBuiltinClass','line_number':36,'multiline':False]
['text':' JS::{,Set}WarningReporter','line_number':40,'multiline':False]
['text':' js::NonBuiltinFrameIter','line_number':46,'multiline':False]
['text':' js_*_str','line_number':58,'multiline':False]
['text':' js::GetProperty','line_number':64,'multiline':False]
['text':'
     * Count with null terminator and alignment.
     * See CopyExtraData for the details about alignment.
     ','line_number':73,'multiline':True]
['text':'
     * Make sure cursor is properly aligned for char16_t for platforms
     * which need it and it's at the end of the buffer on exit.
     ','line_number':88,'multiline':True]
['text':' Copy non-pointer members. ','line_number':107,'multiline':True]
['text':' Deep copy notes. ','line_number':112,'multiline':True]
['text':'
   * We use a single malloc block to make a deep copy of JSErrorReport or
   * JSErrorNotes::Note, except JSErrorNotes linked from JSErrorReport with
   * the following layout:
   *   JSErrorReport or JSErrorNotes::Note
   *   char array with characters for message_
   *   char array with characters for filename
   *   char16_t array with characters for linebuf (only for JSErrorReport)
   * Such layout together with the properties enforced by the following
   * asserts does not need any extra alignment padding.
   ','line_number':133,'multiline':True]
['text':'
   * The mallocSize can not overflow since it represents the sum of the
   * sizes of already allocated objects.
   ','line_number':153,'multiline':True]
['text':' errorMessageName should be static.','line_number':185,'multiline':False]
['text':' Copy non-pointer members. ','line_number':188,'multiline':True]
['text':' Cut off the stack if it gets too deep (most commonly for infinite recursion','line_number':220,'multiline':False]
['text':' errors).','line_number':221,'multiline':False]
['text':' It's ok to UncheckedUnwrap here, since all we do is get the','line_number':246,'multiline':False]
['text':' JSErrorReport, and consumers are careful with the information they get','line_number':247,'multiline':False]
['text':' from that anyway.  Anyone doing things that would expose anything in the','line_number':248,'multiline':False]
['text':' JSErrorReport to page script either does a security check on the','line_number':249,'multiline':False]
['text':' JSErrorReport's principal or also tries to do toString on our object and','line_number':250,'multiline':False]
['text':' will fail if they can't unwrap it.','line_number':251,'multiline':False]
['text':'
   * JSEXN_INTERNALERR returns null to prevent that "InternalError: "
   * is prepended before "uncaught exception: "
   ','line_number':277,'multiline':True]
['text':' We cannot throw a proper object inside the self-hosting realm, as we','line_number':293,'multiline':False]
['text':' cannot construct the Error constructor without self-hosted code. Just','line_number':294,'multiline':False]
['text':' print the error to stderr to help debugging.','line_number':295,'multiline':False]
['text':' Find the exception index associated with this error.','line_number':301,'multiline':False]
['text':' Prevent infinite recursion.','line_number':311,'multiline':False]
['text':' Create an exception object.','line_number':319,'multiline':False]
['text':' Error reports don't provide a |cause|, so we default to |Nothing| here.','line_number':334,'multiline':False]
['text':' Throw it.','line_number':354,'multiline':False]
['text':'
   * This function is called from ErrorReport::init and so should not generate
   * any new exceptions.
   ','line_number':367,'multiline':True]
['text':' First try "filename".','line_number':378,'multiline':False]
['text':' If that doesn't work, try "fileName".','line_number':384,'multiline':False]
['text':' This function has no side-effects so always use it.','line_number':403,'multiline':False]
['text':' Create a new error message similar to what Error.prototype.toString would','line_number':416,'multiline':False]
['text':' produce when called on an object with those property values for name and','line_number':417,'multiline':False]
['text':' message.','line_number':418,'multiline':False]
['text':' Prefix the message with the error type, if it exists.','line_number':425,'multiline':False]
['text':' The error object might have custom `name` overwriting the exnType in the','line_number':439,'multiline':False]
['text':' error report. Try getting that property and use the exnType as a fallback.','line_number':440,'multiline':False]
['text':' We do NOT want to use GetErrorTypeName() here because it will not do the','line_number':448,'multiline':False]
['text':' "right thing" for JSEXN_INTERNALERR.  That is, the caller of this API','line_number':449,'multiline':False]
['text':' expects that "InternalError: " will be prepended but GetErrorTypeName','line_number':450,'multiline':False]
['text':' goes out of its way to avoid this.','line_number':451,'multiline':False]
['text':' Because ToString below could error and an exception object could become','line_number':489,'multiline':False]
['text':' unrooted, we must root our exception object, if any.','line_number':490,'multiline':False]
['text':' Be careful not to invoke ToString if we've already successfully extracted','line_number':495,'multiline':False]
['text':' an error report, since the exception might be wrapped in a security','line_number':496,'multiline':False]
['text':' wrapper, and ToString-ing it might throw.','line_number':497,'multiline':False]
['text':' If ErrorFromException didn't get us a JSErrorReport, then the object','line_number':519,'multiline':False]
['text':' was not an ErrorObject, security-wrapped or otherwise. However, it might','line_number':520,'multiline':False]
['text':' still quack like one. Give duck-typing a chance.  We start by looking for','line_number':521,'multiline':False]
['text':' "filename" (all lowercase), since that's where DOMExceptions store their','line_number':522,'multiline':False]
['text':' filename.  Then we check "fileName", which is where Errors store it.  We','line_number':523,'multiline':False]
['text':' have to do it in that order, because DOMExceptions have Error.prototype','line_number':524,'multiline':False]
['text':' on their proto chain, and hence also have a "fileName" property, but its','line_number':525,'multiline':False]
['text':' value is "".','line_number':526,'multiline':False]
['text':' Temporary value for pulling properties off of duck-typed objects.','line_number':530,'multiline':False]
['text':' If we have the right fields, override the ToString we performed on','line_number':547,'multiline':False]
['text':' the exception object above with something built out of its quacks','line_number':548,'multiline':False]
['text':' (i.e. as much of |NameQuack: MessageQuack| as we can make).','line_number':549,'multiline':False]
['text':' Note that using |str| for |message_| here is kind of wrong,','line_number':591,'multiline':False]
['text':' because |str| is supposed to be of the format','line_number':592,'multiline':False]
['text':' |ErrorName: ErrorMessage|, and |message_| is supposed to','line_number':593,'multiline':False]
['text':' correspond to |ErrorMessage|. But this is what we've','line_number':594,'multiline':False]
['text':' historically done for duck-typed error objects.','line_number':595,'multiline':False]
['text':'','line_number':596,'multiline':False]
['text':' If only this stuff could get specced one day...','line_number':597,'multiline':False]
['text':' This is basically an inlined version of','line_number':620,'multiline':False]
['text':'','line_number':621,'multiline':False]
['text':'   JS_ReportErrorNumberUTF8(cx, GetErrorMessage, nullptr,','line_number':622,'multiline':False]
['text':'                            JSMSG_UNCAUGHT_EXCEPTION, utf8Message);','line_number':623,'multiline':False]
['text':'','line_number':624,'multiline':False]
['text':' but without the reporting bits.  Instead it just puts all','line_number':625,'multiline':False]
['text':' the stuff we care about in our ownedReport and message_.','line_number':626,'multiline':False]
['text':' Just give up.  We're out of memory or something; not much we can','line_number':629,'multiline':False]
['text':' do here.','line_number':630,'multiline':False]
['text':' |ownedReport.filename| inherits the lifetime of |ErrorReport::filename|.','line_number':665,'multiline':False]
['text':' Follow FixupColumnForDisplay and set column to 1 for WASM.','line_number':669,'multiline':False]
['text':' XXXbz this assumes the stack we have right now is still','line_number':673,'multiline':False]
['text':' related to our exception object.','line_number':674,'multiline':False]
['text':' Create the Error object.','line_number':732,'multiline':False]
['text':' The public API doesn't (yet) support a |cause| argument, so we default to','line_number':754,'multiline':False]
['text':' |Nothing()| here.','line_number':755,'multiline':False]
