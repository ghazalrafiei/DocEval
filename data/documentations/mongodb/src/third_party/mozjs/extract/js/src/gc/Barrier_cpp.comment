['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]
['text':' JS::shadow::Zone','line_number':12,'multiline':False]
['text':' JS::BigInt','line_number':14,'multiline':False]
['text':' DEBUG','line_number':100,'multiline':False]
['text':' Tagged pointer barriers','line_number':102,'multiline':False]
['text':'','line_number':103,'multiline':False]
['text':' It's tempting to use ApplyGCThingTyped to dispatch to the typed barrier','line_number':104,'multiline':False]
['text':' functions (e.g. gc::ReadBarrier(JSObject*)) but this does not compile well','line_number':105,'multiline':False]
['text':' (clang generates 1580 bytes on x64 versus 296 bytes for this implementation','line_number':106,'multiline':False]
['text':' of ValueReadBarrier).','line_number':107,'multiline':False]
['text':'','line_number':108,'multiline':False]
['text':' Instead, check known special cases and call the generic barrier functions.','line_number':109,'multiline':False]
['text':' Using mozilla::DebugOnly here still generated code in opt builds.','line_number':123,'multiline':False]
['text':' static ','line_number':201,'multiline':True]
['text':' static ','line_number':210,'multiline':True]
['text':' static ','line_number':220,'multiline':True]
['text':' We have to access the zone from-any-thread here: a worker thread may be','line_number':225,'multiline':False]
['text':' cloning a self-hosted object from the main runtime's self- hosting zone','line_number':226,'multiline':False]
['text':' into another runtime. The zone's uid lock will protect against multiple','line_number':227,'multiline':False]
['text':' workers doing this simultaneously.','line_number':228,'multiline':False]
['text':' static ','line_number':237,'multiline':True]
['text':' Return true if both are null or false if only one is null.','line_number':238,'multiline':False]
['text':' Incremental table sweeping means that existing table entries may no','line_number':257,'multiline':False]
['text':' longer have unique IDs. We fail the match in that case and the entry is','line_number':258,'multiline':False]
['text':' removed from the table later on.','line_number':259,'multiline':False]
['text':' Key is dead and cannot match lookup which must be live.','line_number':269,'multiline':False]
['text':' namespace js','line_number':290,'multiline':False]
['text':' Post-write barrier, used by the C++ Heap<T> implementation.','line_number':292,'multiline':False]
['text':' Combined pre- and post-write barriers, used by the rust Heap<T>','line_number':322,'multiline':False]
['text':' implementation.','line_number':323,'multiline':False]
