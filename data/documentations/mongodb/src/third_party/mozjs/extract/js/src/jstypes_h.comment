['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]
['text':'
** File:                jstypes.h
** Description: Definitions of NSPR's basic types
**
** Prototypes and macros used to make up for deficiencies in ANSI environments
** that we have found.
**
** Since we do not wrap <stdlib.h> and all the other standard headers, authors
** of portable code will not know in general that they need these definitions.
** Instead of requiring these authors to find the dependent uses in their code
** and take the following steps only in those C files, we take steps once here
** for all C files.
*','line_number':7,'multiline':True]
['text':' jstypes.h is (or should be!) included by every file in SpiderMonkey.','line_number':30,'multiline':False]
['text':' js-config.h also should be included by every file. So include it here.','line_number':31,'multiline':False]
['text':'
 * The linkage of JS API functions differs depending on whether the file is
 * used within the JS library or not. Any source file within the JS
 * interpreter should define EXPORT_JS_API whereas any client of the library
 * should not. STATIC_JS_API is used to build JS as a static library.
 ','line_number':34,'multiline':True]
['text':'**********************************************************************
** MACROS:      JS_BEGIN_MACRO
**              JS_END_MACRO
** DESCRIPTION:
**      Macro body brackets so that macros with compound statement definitions
**      behave syntactically more like functions when called.
**********************************************************************','line_number':51,'multiline':True]
['text':'**********************************************************************
** FUNCTIONS:   Bit
**              BitMask
** DESCRIPTION:
** Bit masking functions.  XXX n must be <= 31 to be portable
**********************************************************************','line_number':63,'multiline':True]
['text':' namespace js','line_number':73,'multiline':False]
['text':'**********************************************************************
** FUNCTIONS:   HowMany
**              RoundUp
**              RoundDown
**              Round
** DESCRIPTION:
**      Commonly used functions for operations on compatible types.
**********************************************************************','line_number':75,'multiline':True]
['text':' namespace js','line_number':91,'multiline':False]
['text':'**********************************************************************
** MACROS:      JS_FUNC_TO_DATA_PTR
**              JS_DATA_TO_FUNC_PTR
** DESCRIPTION:
**      Macros to convert between function and data pointers of the same
**      size. Use them like this:
**
**      JSGetterOp nativeGetter;
**      JSObject* scriptedGetter;
**      ...
**      scriptedGetter = JS_FUNC_TO_DATA_PTR(JSObject*, nativeGetter);
**      ...
**      nativeGetter = JS_DATA_TO_FUNC_PTR(JSGetterOp, scriptedGetter);
**
**********************************************************************','line_number':104,'multiline':True]
['text':' jstypes_h ','line_number':123,'multiline':True]
