['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=4 et sw=4 tw=99:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]
['text':' For overall documentation, see jit/AtomicOperations.h.
 *
 * NOTE CAREFULLY: This file is only applicable when we have configured a JIT
 * and the JIT is for the same architecture that we're compiling the shell for.
 * Simulators must use a different mechanism.
 *
 * See comments before the include nest near the end of jit/AtomicOperations.h
 * if you didn't understand that.
 ','line_number':7,'multiline':True]
['text':' The function pointers in this section all point to jitted code.','line_number':31,'multiline':False]
['text':'','line_number':32,'multiline':False]
['text':' On 32-bit systems we assume for simplicity's sake that we don't have any','line_number':33,'multiline':False]
['text':' 64-bit atomic operations except cmpxchg (this is a concession to x86 but it's','line_number':34,'multiline':False]
['text':' not a hardship).  On 32-bit systems we therefore implement other 64-bit','line_number':35,'multiline':False]
['text':' atomic operations in terms of cmpxchg along with some C++ code and a local','line_number':36,'multiline':False]
['text':' reordering fence to prevent other loads and stores from being intermingled','line_number':37,'multiline':False]
['text':' with operations in the implementation of the atomic.','line_number':38,'multiline':False]
['text':' `fence` performs a full memory barrier.','line_number':40,'multiline':False]
['text':' `compiler_fence` erects a reordering boundary for operations on the current','line_number':44,'multiline':False]
['text':' thread.  We use it to prevent the compiler from reordering loads and stores','line_number':45,'multiline':False]
['text':' inside larger primitives that are synthesized from cmpxchg.','line_number':46,'multiline':False]
['text':' These are access-atomic up to sizeof(uintptr_t).','line_number':57,'multiline':False]
['text':' These are access-atomic up to sizeof(uintptr_t).','line_number':72,'multiline':False]
['text':' `exchange` takes a cell address and a value.  It stores it in the cell and','line_number':80,'multiline':False]
['text':' returns the value previously in the cell.','line_number':81,'multiline':False]
['text':' `add` adds a value atomically to the cell and returns the old value in the','line_number':89,'multiline':False]
['text':' cell.  (There is no `sub`; just add the negated value.)','line_number':90,'multiline':False]
['text':' `and` bitwise-ands a value atomically into the cell and returns the old value','line_number':98,'multiline':False]
['text':' in the cell.','line_number':99,'multiline':False]
['text':' `or` bitwise-ors a value atomically into the cell and returns the old value','line_number':107,'multiline':False]
['text':' in the cell.','line_number':108,'multiline':False]
['text':' `xor` bitwise-xors a value atomically into the cell and returns the old value','line_number':116,'multiline':False]
['text':' in the cell.','line_number':117,'multiline':False]
['text':' `cmpxchg` takes a cell address, an expected value and a replacement value.','line_number':125,'multiline':False]
['text':' If the value in the cell equals the expected value then the replacement value','line_number':126,'multiline':False]
['text':' is stored in the cell.  It always returns the value previously in the cell.','line_number':127,'multiline':False]
['text':' `...MemcpyDown` moves bytes toward lower addresses in memory: dest <= src.','line_number':137,'multiline':False]
['text':' `...MemcpyUp` moves bytes toward higher addresses in memory: dest >= src.','line_number':138,'multiline':False]
['text':' namespace jit','line_number':144,'multiline':False]
['text':' namespace js','line_number':145,'multiline':False]
['text':' !JS_64BIT','line_number':168,'multiline':False]
['text':' namespace jit','line_number':188,'multiline':False]
['text':' namespace js','line_number':189,'multiline':False]
['text':' good initial approximation ','line_number':207,'multiline':True]
['text':' !JS_64BIT','line_number':218,'multiline':False]
['text':' namespace jit','line_number':238,'multiline':False]
['text':' namespace js','line_number':239,'multiline':False]
['text':' !JS_64BIT','line_number':269,'multiline':False]
['text':' namespace jit','line_number':289,'multiline':False]
['text':' namespace js','line_number':290,'multiline':False]
['text':' namespace jit','line_number':315,'multiline':False]
['text':' namespace js','line_number':316,'multiline':False]
['text':' Good initial approximation ','line_number':340,'multiline':True]
['text':' !JS_64BIT','line_number':352,'multiline':False]
['text':' namespace jit','line_number':381,'multiline':False]
['text':' namespace js','line_number':382,'multiline':False]
['text':' !JS_64BIT','line_number':429,'multiline':False]
['text':' namespace jit','line_number':457,'multiline':False]
['text':' namespace js','line_number':458,'multiline':False]
['text':' !JS_64BIT','line_number':492,'multiline':False]
['text':' Clang requires a specialization for uint8_clamped.','line_number':514,'multiline':False]
['text':' namespace jit','line_number':521,'multiline':False]
['text':' namespace js','line_number':522,'multiline':False]
['text':' !JS_64BIT','line_number':553,'multiline':False]
['text':' Clang requires a specialization for uint8_clamped.','line_number':575,'multiline':False]
['text':' namespace jit','line_number':582,'multiline':False]
['text':' namespace js','line_number':583,'multiline':False]
['text':' namespace jit','line_number':613,'multiline':False]
['text':' namespace js','line_number':614,'multiline':False]
['text':' jit_shared_AtomicOperations_shared_jit_h','line_number':622,'multiline':False]
