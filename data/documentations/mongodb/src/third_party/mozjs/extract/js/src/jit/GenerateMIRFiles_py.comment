['text':' This Source Code Form is subject to the terms of the Mozilla Public','line_number':1,'multiline':False]
['text':' License, v. 2.0. If a copy of the MPL was not distributed with this','line_number':2,'multiline':False]
['text':' file, You can obtain one at http://mozilla.org/MPL/2.0/.','line_number':3,'multiline':False]
['text':' This script generates jit/MIROpsGenerated.h (list of MIR instructions)','line_number':5,'multiline':False]
['text':' from MIROps.yaml, as well as MIR op definitions.','line_number':6,'multiline':False]
['text':' First invoke preprocessor.py so that we can use #ifdef JS_SIMULATOR in','line_number':41,'multiline':False]
['text':' the YAML file.','line_number':42,'multiline':False]
['text':' Load into an OrderedDict to ensure order is preserved. Note: Python 3.7+','line_number':50,'multiline':False]
['text':' also preserves ordering for normal dictionaries.','line_number':51,'multiline':False]
['text':' Code based on https://stackoverflow.com/a/21912744.','line_number':52,'multiline':False]
['text':' Generate a MIR opcode class definition.','line_number':135,'multiline':False]
['text':' For example:','line_number':136,'multiline':False]
['text':' class MGuardIndexIsValidUpdateOrAdd','line_number':137,'multiline':False]
['text':'     : public MBinaryInstruction,','line_number':138,'multiline':False]
['text':'       public MixPolicy<ObjectPolicy<0>, UnboxedInt32Policy<1>>::Data {','line_number':139,'multiline':False]
['text':'  explicit MGuardIndexIsValidUpdateOrAdd(MDefinition* object,','line_number':140,'multiline':False]
['text':'                                         MDefinition* index)','line_number':141,'multiline':False]
['text':'     : MBinaryInstruction(classOpcode, object, index) {','line_number':142,'multiline':False]
['text':'   setGuard();','line_number':143,'multiline':False]
['text':'   setMovable();','line_number':144,'multiline':False]
['text':'   setResultType(MIRType::Int32);','line_number':145,'multiline':False]
['text':'  }','line_number':146,'multiline':False]
['text':' public:','line_number':147,'multiline':False]
['text':'  INSTRUCTION_HEADER(GetFrameArgument)','line_number':148,'multiline':False]
['text':'  TRIVIAL_NEW_WRAPPERS','line_number':149,'multiline':False]
['text':'  NAMED_OPERANDS((0, object), (1, index))','line_number':150,'multiline':False]
['text':'  AliasSet getAliasSet() const override { return AliasSet::None(); }','line_number':151,'multiline':False]
['text':'  bool congruentTo(const MDefinition* ins) const override {','line_number':152,'multiline':False]
['text':'    return congruentIfOperandsEqual(ins); }','line_number':153,'multiline':False]
['text':'  };','line_number':154,'multiline':False]
['text':'','line_number':155,'multiline':False]
['text':' MIR op constructor operands.','line_number':158,'multiline':False]
['text':' MIR op base class constructor operands.','line_number':160,'multiline':False]
['text':' Types of each constructor operand.','line_number':162,'multiline':False]
['text':' Items for NAMED_OPERANDS.','line_number':164,'multiline':False]
['text':' Collect all the MIR argument types to use for determining the','line_number':172,'multiline':False]
['text':' ops type policy.','line_number':173,'multiline':False]
['text':' Collecting named operands for defining accessors.','line_number':175,'multiline':False]
['text':' Arguments to class constructor that require accessors.','line_number':190,'multiline':False]
['text':' MIR_OPCODE_LIST items. Stores the name of each MIR op.','line_number':293,'multiline':False]
['text':' Generated MIR op class definitions.','line_number':296,'multiline':False]
['text':' Unique and non gc pointer types seen for arguments to the MIR constructor.','line_number':299,'multiline':False]
