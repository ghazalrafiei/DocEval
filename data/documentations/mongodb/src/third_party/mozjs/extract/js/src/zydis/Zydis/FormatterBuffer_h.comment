['text':'**************************************************************************************************

  Zyan Disassembler Library (Zydis)

  Original Author : Florian Bernd

 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.

**************************************************************************************************','line_number':1,'multiline':True]
['text':'*
 * @file
 * @brief   Implements the `ZydisFormatterToken` type and provides functions to use it.
 ','line_number':27,'multiline':True]
['text':' ============================================================================================== ','line_number':44,'multiline':True]
['text':' Constants                                                                                      ','line_number':45,'multiline':True]
['text':' ============================================================================================== ','line_number':46,'multiline':True]
['text':' ---------------------------------------------------------------------------------------------- ','line_number':48,'multiline':True]
['text':' Token types                                                                                    ','line_number':49,'multiline':True]
['text':' ---------------------------------------------------------------------------------------------- ','line_number':50,'multiline':True]
['text':'*
 * @biref   Defines the `ZydisTokenType` data-type.
 ','line_number':52,'multiline':True]
['text':'*
 * @brief   A whitespace character.
 ','line_number':58,'multiline':True]
['text':'*
 * @brief   A delimiter character (like `','`, `':'`, `'+'`, `'-'`, `'*'`).
 ','line_number':62,'multiline':True]
['text':'*
 * @brief   An opening parenthesis character (like `'('`, `'['`, `'{'`).
 ','line_number':66,'multiline':True]
['text':'*
 * @brief   A closing parenthesis character (like `')'`, `']'`, `'}'`).
 ','line_number':70,'multiline':True]
['text':'*
 * @brief   A prefix literal (like `"LOCK"`, `"REP"`).
 ','line_number':74,'multiline':True]
['text':'*
 * @brief   A mnemonic literal (like `"MOV"`, `"VCMPPSD"`, `"LCALL"`).
 ','line_number':78,'multiline':True]
['text':'*
 * @brief   A register literal (like `"RAX"`, `"DS"`, `"%ECX"`).
 ','line_number':82,'multiline':True]
['text':'*
 * @brief   An absolute address literal (like `0x00400000`).
 ','line_number':86,'multiline':True]
['text':'*
 * @brief   A relative address literal (like `-0x100`).
 ','line_number':90,'multiline':True]
['text':'*
 * @brief   A displacement literal (like `0xFFFFFFFF`, `-0x100`, `+0x1234`).
 ','line_number':94,'multiline':True]
['text':'*
 * @brief   An immediate literal (like `0xC0`, `-0x1234`, `$0x0000`).
 ','line_number':98,'multiline':True]
['text':'*
 * @brief   A typecast literal (like `DWORD PTR`).
 ','line_number':102,'multiline':True]
['text':'*
 * @brief   A decorator literal (like `"Z"`, `"1TO4"`).
 ','line_number':106,'multiline':True]
['text':'*
 * @brief   A symbol literal.
 ','line_number':110,'multiline':True]
['text':'*
 * @brief   The base for user-defined token types.
 ','line_number':115,'multiline':True]
['text':' ---------------------------------------------------------------------------------------------- ','line_number':120,'multiline':True]
['text':' ============================================================================================== ','line_number':122,'multiline':True]
['text':' Enums and types                                                                                ','line_number':123,'multiline':True]
['text':' ============================================================================================== ','line_number':124,'multiline':True]
['text':' ---------------------------------------------------------------------------------------------- ','line_number':126,'multiline':True]
['text':' Token                                                                                          ','line_number':127,'multiline':True]
['text':' ---------------------------------------------------------------------------------------------- ','line_number':128,'multiline':True]
['text':'*
 * @brief   Defines the `ZydisFormatterToken` struct.
 *
 * All fields in this struct should be considered as "private". Any changes may lead to unexpected
 * behavior.
 ','line_number':132,'multiline':True]
['text':'*
     * @brief   The token type.
     ','line_number':140,'multiline':True]
['text':'*
     * @brief   An offset to the next token, or `0`.
     ','line_number':144,'multiline':True]
['text':'*
 * @brief   Defines the `ZydisFormatterTokenConst` data-type.
 ','line_number':152,'multiline':True]
['text':' ---------------------------------------------------------------------------------------------- ','line_number':157,'multiline':True]
['text':' Buffer                                                                                         ','line_number':158,'multiline':True]
['text':' ---------------------------------------------------------------------------------------------- ','line_number':159,'multiline':True]
['text':'*
 * @brief   Defines the `ZydisFormatterBuffer` struct.
 *
 * All fields in this struct should be considered as "private". Any changes may lead to unexpected
 * behavior.
 ','line_number':161,'multiline':True]
['text':'*
     * @brief   `ZYAN_TRUE`, if the buffer contains a token stream or `ZYAN_FALSE, if it contains
     *          a simple string.
     ','line_number':169,'multiline':True]
['text':'*
     * @brief   The remaining capacity of the buffer.
     ','line_number':174,'multiline':True]
['text':'*
     * @brief   The `ZyanString` instance that refers to the literal value of the most recently
     *          added token.
     ','line_number':178,'multiline':True]
['text':' ---------------------------------------------------------------------------------------------- ','line_number':185,'multiline':True]
['text':' ============================================================================================== ','line_number':187,'multiline':True]
['text':' Exported functions                                                                             ','line_number':188,'multiline':True]
['text':' ============================================================================================== ','line_number':189,'multiline':True]
['text':' ---------------------------------------------------------------------------------------------- ','line_number':191,'multiline':True]
['text':' Token                                                                                          ','line_number':192,'multiline':True]
['text':' ---------------------------------------------------------------------------------------------- ','line_number':193,'multiline':True]
['text':'*
 * @brief   Returns the `type` and the string `value` of the given `token`.
 *
 * @param   token   A pointer to the `ZydisFormatterToken` struct.
 * @param   type    Receives the token type.
 * @param   value   Receives a pointer to the string value of the token.
 *
 * @return  A zyan status code.
 ','line_number':195,'multiline':True]
['text':'*
 * @brief   Obtains the next `token` linked to the passed one.
 *
 * @param   token   Receives a pointer to the next `ZydisFormatterToken` struct linked to the
 *                  passed one.
 *
 * @return  A zyan status code.
 ','line_number':207,'multiline':True]
['text':' ---------------------------------------------------------------------------------------------- ','line_number':217,'multiline':True]
['text':' Buffer                                                                                         ','line_number':218,'multiline':True]
['text':' ---------------------------------------------------------------------------------------------- ','line_number':219,'multiline':True]
['text':'*
 * @brief   Returns the current (most recently added) token.
 *
 * @param   buffer  A pointer to the `ZydisFormatterBuffer` struct.
 * @param   token   Receives a pointer to the current token.
 *
 * @return  A zyan status code.
 *
 * This function returns `ZYAN_STATUS_INVALID_OPERATION`, if the buffer does not contain at least
 * one token.
 ','line_number':221,'multiline':True]
['text':'*
 * @brief   Returns the `ZyanString` instance associated with the given buffer.
 *
 * @param   buffer  A pointer to the `ZydisFormatterBuffer` struct.
 * @param   string  Receives a pointer to the `ZyanString` instance associated with the given
 *                  buffer.
 *
 * @return  A zyan status code.
 *
 * This function returns `ZYAN_STATUS_INVALID_OPERATION`, if the buffer does not contain at least
 * one token.
 *
 * The returned string always refers to the literal value of the current (most recently added)
 * token and will remain valid until the buffer is destroyed.
 ','line_number':235,'multiline':True]
['text':'*
 * @brief   Appends a new token to the `buffer`.
 *
 * @param   buffer  A pointer to the `ZydisFormatterBuffer` struct.
 * @param   type    The type of the new token.
 *
 * @return  A zyan status code.
 *
 * Note that the `ZyanString` instance returned by `ZydisFormatterBufferGetString` will
 * automatically be updated by calling this function.
 ','line_number':253,'multiline':True]
['text':'*
 * @brief   Returns a snapshot of the buffer-state.
 *
 * @param   buffer  A pointer to the `ZydisFormatterBuffer` struct.
 * @param   state   Receives a snapshot of the buffer-state.
 *
 * @return  A zyan status code.
 *
 * Note that the buffer-state is saved inside the buffer itself and thus becomes invalid as soon
 * as the buffer gets overwritten or destroyed.
 ','line_number':267,'multiline':True]
['text':'*
 * @brief   Restores a previously saved buffer-state.
 *
 * @param   buffer  A pointer to the `ZydisFormatterBuffer` struct.
 * @param   state   The buffer-state to restore.
 *
 * @return  A zyan status code.
 *
 * All tokens added after obtaining the given `state` snapshot will be removed. This function
 * does NOT restore any string content.
 *
 * Note that the `ZyanString` instance returned by `ZydisFormatterBufferGetString` will
 * automatically be updated by calling this function.
 ','line_number':281,'multiline':True]
['text':' ---------------------------------------------------------------------------------------------- ','line_number':298,'multiline':True]
['text':' ============================================================================================== ','line_number':300,'multiline':True]
['text':' ZYDIS_FORMATTER_TOKEN_H ','line_number':306,'multiline':True]
