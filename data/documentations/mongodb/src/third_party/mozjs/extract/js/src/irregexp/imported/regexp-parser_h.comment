['text':' Copyright 2016 the V8 project authors. All rights reserved.','line_number':1,'multiline':False]
['text':' Use of this source code is governed by a BSD-style license that can be','line_number':2,'multiline':False]
['text':' found in the LICENSE file.','line_number':3,'multiline':False]
['text':' A BufferedZoneList is an automatically growing list, just like (and backed','line_number':16,'multiline':False]
['text':' by) a ZoneList, that is optimized for the case of adding and removing','line_number':17,'multiline':False]
['text':' a single element. The last element added is stored outside the backing list,','line_number':18,'multiline':False]
['text':' and if no more than one element is ever added, the ZoneList isn't even','line_number':19,'multiline':False]
['text':' allocated.','line_number':20,'multiline':False]
['text':' Elements must not be nullptr pointers.','line_number':21,'multiline':False]
['text':' Adds element at end of list. This element is buffered and can','line_number':27,'multiline':False]
['text':' be read using last() or removed using RemoveLast until a new Add or until','line_number':28,'multiline':False]
['text':' RemoveLast or GetList has been called.','line_number':29,'multiline':False]
['text':' Accumulates RegExp atoms and assertions into lists of terms and alternatives.','line_number':97,'multiline':False]
['text':' "Adds" an empty expression. Does nothing except consume a','line_number':104,'multiline':False]
['text':' following quantifier','line_number':105,'multiline':False]
['text':' '|'','line_number':112,'multiline':False]
['text':' Used by the SpiderMonkey embedding of irregexp.','line_number':160,'multiline':False]
['text':' Parses a {...,...} quantifier and stores the range in the given','line_number':173,'multiline':False]
['text':' out parameters.','line_number':174,'multiline':False]
['text':' Parses and returns a single escaped character.  The character','line_number':177,'multiline':False]
['text':' must not be 'b' or 'B' since they are usually handle specially.','line_number':178,'multiline':False]
['text':' Checks whether the following is a length-digit hexadecimal number,','line_number':181,'multiline':False]
['text':' and sets the value if it is.','line_number':182,'multiline':False]
['text':' Tries to parse the input as a back reference.  If successful it','line_number':198,'multiline':False]
['text':' stores the result in the output parameter and returns true.  If','line_number':199,'multiline':False]
['text':' it fails it will push back the characters read so the same characters','line_number':200,'multiline':False]
['text':' can be reparsed.','line_number':201,'multiline':False]
['text':' Parse inside a class. Either add escaped class to the range, or return','line_number':204,'multiline':False]
['text':' false and pass parsed single character through |char_out|.','line_number':205,'multiline':False]
['text':' Reports whether the pattern might be used as a literal search string.','line_number':217,'multiline':False]
['text':' Only use if the result of the parse is a single atom node.','line_number':218,'multiline':False]
['text':' The Unicode flag can't be changed using in-regexp syntax, so it's OK to','line_number':225,'multiline':False]
['text':' just read the initial flag value here.','line_number':226,'multiline':False]
['text':' All positive values represent captures.','line_number':236,'multiline':False]
['text':' Push a state on the stack.','line_number':244,'multiline':False]
['text':' Parser state of containing expression, if any.','line_number':257,'multiline':False]
['text':' RegExpBuilder building this regexp's AST.','line_number':260,'multiline':False]
['text':' Type of regexp being parsed (parenthesized group or entire regexp).','line_number':262,'multiline':False]
['text':' Lookahead or Lookbehind.','line_number':264,'multiline':False]
['text':' Index in captures array of first capture in this sub-expression, if any.','line_number':266,'multiline':False]
['text':' Also the capture index of this sub-expression itself, if group_type','line_number':267,'multiline':False]
['text':' is CAPTURE.','line_number':268,'multiline':False]
['text':' The name of the current sub-expression, if group_type is CAPTURE. Only','line_number':270,'multiline':False]
['text':' used for named captures.','line_number':271,'multiline':False]
['text':' Check whether the parser is inside a capture group with the given index.','line_number':276,'multiline':False]
['text':' Check whether the parser is inside a capture group with the given name.','line_number':278,'multiline':False]
['text':' Linked list implementation of stack of states.','line_number':282,'multiline':False]
['text':' Builder for the stored disjunction.','line_number':284,'multiline':False]
['text':' Stored disjunction type (capture, look-ahead or grouping), if any.','line_number':286,'multiline':False]
['text':' Stored read direction.','line_number':288,'multiline':False]
['text':' Stored disjunction's capture index (if any).','line_number':290,'multiline':False]
['text':' Stored capture name (if any).','line_number':292,'multiline':False]
['text':' Return the 1-indexed RegExpCapture object, allocate if necessary.','line_number':296,'multiline':False]
['text':' Creates a new named capture at the specified index. Must be called exactly','line_number':299,'multiline':False]
['text':' once for each named capture. Fails if a capture with the same name is','line_number':300,'multiline':False]
['text':' encountered.','line_number':301,'multiline':False]
['text':' Parses the name of a capture group (?<name>pattern). The name must adhere','line_number':304,'multiline':False]
['text':' to IdentifierName in the ECMAScript standard.','line_number':305,'multiline':False]
['text':' After the initial parsing pass, patch corresponding RegExpCapture objects','line_number':312,'multiline':False]
['text':' into all RegExpBackReferences. This is done after initial parsing in order','line_number':313,'multiline':False]
['text':' to avoid complicating cases in which references comes before the capture.','line_number':314,'multiline':False]
['text':' Returns true iff the pattern contains named captures. May call','line_number':319,'multiline':False]
['text':' ScanForCaptures to look ahead at the remaining pattern.','line_number':320,'multiline':False]
['text':' These are the flags specified outside the regexp syntax ie after the','line_number':352,'multiline':False]
['text':' terminating '/' or in the second argument to the constructor.  The current','line_number':353,'multiline':False]
['text':' flags are stored on the RegExpBuilder.','line_number':354,'multiline':False]
['text':' Only valid after we have scanned for captures.','line_number':358,'multiline':False]
['text':' Only valid after we have scanned for captures.','line_number':363,'multiline':False]
['text':' namespace internal','line_number':367,'multiline':False]
['text':' namespace v8','line_number':368,'multiline':False]
['text':' V8_REGEXP_REGEXP_PARSER_H_','line_number':370,'multiline':False]
