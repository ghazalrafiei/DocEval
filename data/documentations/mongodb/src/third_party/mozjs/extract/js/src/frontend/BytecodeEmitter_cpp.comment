['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]
['text':'
 * JS bytecode generation.
 ','line_number':7,'multiline':True]
['text':' mozilla::AssertedCast','line_number':13,'multiline':False]
['text':' mozilla::DebugOnly','line_number':14,'multiline':False]
['text':' mozilla::NumberEqualsInt32, mozilla::NumberIsInt32','line_number':15,'multiline':False]
['text':' mozilla::HashSet','line_number':16,'multiline':False]
['text':' mozilla::{Maybe,Nothing,Some}','line_number':17,'multiline':False]
['text':' mozilla::PodCopy','line_number':18,'multiline':False]
['text':' SprintfLiteral','line_number':19,'multiline':False]
['text':' mozilla::AsVariant','line_number':20,'multiline':False]
['text':' JS_BIT','line_number':26,'multiline':False]
['text':' Nestable','line_number':28,'multiline':False]
['text':' ScopeIndex','line_number':29,'multiline':False]
['text':' NestableControl, BreakableControl, LabelControl, LoopControl, TryFinallyControl','line_number':30,'multiline':False]
['text':' CallOrNewEmitter','line_number':31,'multiline':False]
['text':' CForEmitter','line_number':32,'multiline':False]
['text':' DefaultEmitter','line_number':33,'multiline':False]
['text':' DoWhileEmitter','line_number':34,'multiline':False]
['text':' ElemOpEmitter','line_number':35,'multiline':False]
['text':' EmitterScope','line_number':36,'multiline':False]
['text':' ExpressionStatementEmitter','line_number':37,'multiline':False]
['text':' ForInEmitter','line_number':38,'multiline':False]
['text':' ForOfEmitter','line_number':39,'multiline':False]
['text':' ForOfLoopControl','line_number':40,'multiline':False]
['text':' FunctionEmitter, FunctionScriptEmitter, FunctionParamsEmitter','line_number':41,'multiline':False]
['text':' IfEmitter, InternalIfEmitter, CondEmitter','line_number':42,'multiline':False]
['text':' LabelEmitter','line_number':43,'multiline':False]
['text':' LexicalScopeEmitter','line_number':44,'multiline':False]
['text':' ModuleSharedContext','line_number':45,'multiline':False]
['text':' PrivateNameKind','line_number':46,'multiline':False]
['text':' NameFunctions','line_number':47,'multiline':False]
['text':' NameOpEmitter','line_number':48,'multiline':False]
['text':' PropertyEmitter, ObjectEmitter, ClassEmitter','line_number':49,'multiline':False]
['text':' OptionalEmitter','line_number':50,'multiline':False]
['text':' ParseNodeKind, ParseNode and subclasses','line_number':51,'multiline':False]
['text':' Parser','line_number':52,'multiline':False]
['text':' ParserAtomsTable','line_number':53,'multiline':False]
['text':' PrivateOpEmitter','line_number':54,'multiline':False]
['text':' PropOpEmitter','line_number':55,'multiline':False]
['text':' SrcNote, SrcNoteType, SrcNoteWriter','line_number':56,'multiline':False]
['text':' SwitchEmitter','line_number':57,'multiline':False]
['text':' TaggedParserAtomIndexHasher','line_number':58,'multiline':False]
['text':' TDZCheckCache','line_number':59,'multiline':False]
['text':' TryEmitter','line_number':60,'multiline':False]
['text':' WhileEmitter','line_number':61,'multiline':False]
['text':' TransitiveCompileOptions, CompileOptions','line_number':62,'multiline':False]
['text':' JSMSG_*','line_number':63,'multiline':False]
['text':' AutoCheckRecursionLimit','line_number':64,'multiline':False]
['text':' StringBuffer','line_number':65,'multiline':False]
['text':' AsyncFunctionResolveKind','line_number':66,'multiline':False]
['text':' JOF_*, IsArgOp, IsLocalOp, SET_UINT24, SET_ICINDEX, BytecodeFallsThrough, BytecodeIsJumpTarget','line_number':67,'multiline':False]
['text':' FunctionPrefixKind','line_number':68,'multiline':False]
['text':' AbstractGeneratorObject','line_number':69,'multiline':False]
['text':' JSAtom','line_number':70,'multiline':False]
['text':' JSContext','line_number':71,'multiline':False]
['text':' JSFunction,','line_number':72,'multiline':False]
['text':' JSScript, ScriptSourceObject, MemberInitializers, BaseScript','line_number':73,'multiline':False]
['text':' JSOp, JSOpLength_*','line_number':74,'multiline':False]
['text':' SharedPropMap::MaxPropsForNonDictionary','line_number':75,'multiline':False]
['text':' GetScopeDataTrailingNames','line_number':76,'multiline':False]
['text':' ScopeNote','line_number':77,'multiline':False]
['text':' ThrowMsgKind','line_number':78,'multiline':False]
['text':' js_*_str','line_number':79,'multiline':False]
['text':' IsAsmJSModule','line_number':80,'multiline':False]
['text':' JSObject','line_number':82,'multiline':False]
['text':' The few node types listed below are exceptions to the usual','line_number':98,'multiline':False]
['text':' location-source-note-emitting code in BytecodeEmitter::emitTree().','line_number':99,'multiline':False]
['text':' Single-line `while` loops and C-style `for` loops require careful','line_number':100,'multiline':False]
['text':' handling to avoid strange stepping behavior.','line_number':101,'multiline':False]
['text':' Functions usually shouldn't have location information (bug 1431202).','line_number':102,'multiline':False]
['text':' For the purposes of bytecode emission, StaticClassBlocks are treated as if','line_number':110,'multiline':False]
['text':' they were static initializers.','line_number':111,'multiline':False]
['text':' Suppress for all self-hosting code.','line_number':129,'multiline':False]
['text':' Suppress for synthesized class constructors.','line_number':134,'multiline':False]
['text':' (T*) -> bool ','line_number':197,'multiline':True]
['text':' We track the location of the most recent separator for use in','line_number':240,'multiline':False]
['text':' markSimpleBreakpoint. Note that this means that the position must already','line_number':241,'multiline':False]
['text':' be set before markStepBreakpoint is called.','line_number':242,'multiline':False]
['text':' If a breakable call ends up being the same location as the most recent','line_number':253,'multiline':False]
['text':' expression start, we need to skip marking it breakable in order to avoid','line_number':254,'multiline':False]
['text':' having two breakpoints with the same line/column position.','line_number':255,'multiline':False]
['text':' Note: This assumes that the position for the call has already been set.','line_number':256,'multiline':False]
['text':' Even if every bytecode op is a JOF_IC op and the function has ARGC_LIMIT','line_number':282,'multiline':False]
['text':' arguments, numICEntries cannot overflow.','line_number':283,'multiline':False]
['text':' this ','line_number':284,'multiline':True]
['text':' These should filter through emitVarOp. ','line_number':336,'multiline':True]
['text':' The remaining |extra| bytes are set by the caller ','line_number':364,'multiline':True]
['text':'
   * Don't updateDepth if op's use-count comes from the immediate
   * operand yet to be stored in the extra bytes after op.
   ','line_number':366,'multiline':True]
['text':' Record the current IC-entry index at start of this op.','line_number':383,'multiline':False]
['text':' Alias consecutive jump targets.','line_number':400,'multiline':False]
['text':' 2 JSOp::Pop instructions (2 bytes) are shorter than JSOp::PopN (3 bytes).','line_number':519,'multiline':False]
['text':' Updates line number notes, not column notes. ','line_number':555,'multiline':True]
['text':' If we use a `SetLine` note below, we want it to be relative to the','line_number':572,'multiline':False]
['text':' scripts initial line number for better chance of sharing.','line_number':573,'multiline':False]
['text':'
     * Encode any change in the current source line number by using
     * either several SrcNoteType::NewLine notes or just one
     * SrcNoteType::SetLine note, whichever consumes less space.
     *
     * NB: We handle backward line number deltas (possible with for
     * loops where the update part is emitted after the body, but its
     * line number is <= any line number in the body) here by letting
     * unsigned delta_ wrap to a very large number, which triggers a
     * SrcNoteType::SetLine.
     ','line_number':577,'multiline':True]
['text':' Updates the line number and column number information in the source notes. ','line_number':607,'multiline':True]
['text':' Assert colspan is always representable.','line_number':620,'multiline':False]
['text':' Try to give the JSOp::LoopHead the same line number as the next','line_number':643,'multiline':False]
['text':' instruction. nextpn is often a block, in which case the next instruction','line_number':644,'multiline':False]
['text':' typically comes from the first statement inside.','line_number':645,'multiline':False]
['text':' IteratorClose is handled especially inside the exception unwinder.','line_number':680,'multiline':False]
['text':' A 'continue' statement does not call IteratorClose for the loop it','line_number':683,'multiline':False]
['text':' is continuing, i.e. excluding the target loop.','line_number':684,'multiline':False]
['text':' A 'break' or 'return' statement does call IteratorClose for the','line_number':687,'multiline':False]
['text':' loop it is breaking out of or returning from, i.e. including the','line_number':688,'multiline':False]
['text':' target loop.','line_number':689,'multiline':False]
['text':' nonLocal = ','line_number':730,'multiline':True]
['text':' As we pop each scope due to the non-local jump, emit notes that','line_number':734,'multiline':False]
['text':' record the extent of the enclosing scope. These notes will have','line_number':735,'multiline':False]
['text':' their ends recorded in ~NonLocalExitControl().','line_number':736,'multiline':False]
['text':'
 * Emit additional bytecode(s) for non-local jumps.
 ','line_number':751,'multiline':True]
['text':' For 'continue', 'break', and 'return' statements, emit IteratorClose','line_number':760,'multiline':False]
['text':' bytecode inline. 'continue' statements do not call IteratorClose for','line_number':761,'multiline':False]
['text':' the loop they are continuing.','line_number':762,'multiline':False]
['text':' If we are closing multiple for-of loops, the resulting FOR_OF_ITERCLOSE','line_number':775,'multiline':False]
['text':' trynotes must be appropriately nested. Each FOR_OF_ITERCLOSE starts when','line_number':776,'multiline':False]
['text':' we close the corresponding for-of iterator, and continues until the','line_number':777,'multiline':False]
['text':' actual jump.','line_number':778,'multiline':False]
['text':' Walk the nestable control stack and patch jumps.','line_number':781,'multiline':False]
['text':' Walk the scope stack and leave the scopes we entered. Leaving a scope','line_number':784,'multiline':False]
['text':' may emit administrative ops like JSOp::PopLexicalEnv but never anything','line_number':785,'multiline':False]
['text':' that manipulates the stack.','line_number':786,'multiline':False]
['text':'
           * There's a [exception or hole, retsub pc-index] pair and the
           * possible return value on the stack that we need to pop.
           ','line_number':797,'multiline':True]
['text':'      [stack] ...','line_number':807,'multiline':False]
['text':' isTarget = ','line_number':823,'multiline':True]
['text':'      [stack] ...','line_number':824,'multiline':False]
['text':' The iterator next method, the iterator, and the current','line_number':831,'multiline':False]
['text':' value are on the stack.','line_number':832,'multiline':False]
['text':' The iterator and the current value are on the stack.','line_number':842,'multiline':False]
['text':'        [stack] ...','line_number':844,'multiline':False]
['text':' isTarget = ','line_number':862,'multiline':True]
['text':'            [stack] ... UNDEF UNDEF UNDEF','line_number':864,'multiline':False]
['text':' Close FOR_OF_ITERCLOSE trynotes.','line_number':880,'multiline':False]
['text':' anonymous namespace','line_number':891,'multiline':False]
['text':' .generator lookups should be emitted as JSOp::GetAliasedVar instead of','line_number':935,'multiline':False]
['text':' JSOp::GetName etc, to bypass |with| objects on the scope chain.','line_number':936,'multiline':False]
['text':' It's safe to emit .this lookups though because |with| objects skip','line_number':937,'multiline':False]
['text':' those.','line_number':938,'multiline':False]
['text':' Trivial cases with no side effects.','line_number':1047,'multiline':False]
['text':' no side effects, unlike','line_number':1060,'multiline':False]
['text':' ParseNodeKind::Name','line_number':1061,'multiline':False]
['text':' |this| can throw in derived class constructors, including nested arrow','line_number':1083,'multiline':False]
['text':' functions or eval.','line_number':1084,'multiline':False]
['text':' Trivial binary nodes with more token pos holders.','line_number':1090,'multiline':False]
['text':' Watch out for getters!','line_number':1115,'multiline':False]
['text':' Unary cases with side effects only if the child has them.','line_number':1122,'multiline':False]
['text':' Even if the name expression is effect-free, performing ToPropertyKey on','line_number':1128,'multiline':False]
['text':' it might not be effect-free:','line_number':1129,'multiline':False]
['text':'','line_number':1130,'multiline':False]
['text':'   RegExp.prototype.toString = () => { throw 42; };','line_number':1131,'multiline':False]
['text':'   ({ [/regex/]: 0 }); // ToPropertyKey(/regex/) throws 42','line_number':1132,'multiline':False]
['text':'','line_number':1133,'multiline':False]
['text':'   function Q() {','line_number':1134,'multiline':False]
['text':'     ({ [new.target]: 0 });','line_number':1135,'multiline':False]
['text':'   }','line_number':1136,'multiline':False]
['text':'   Q.toString = () => { throw 17; };','line_number':1137,'multiline':False]
['text':'   new Q; // new.target will be Q, ToPropertyKey(Q) throws 17','line_number':1138,'multiline':False]
['text':' Looking up or evaluating the associated name could throw.','line_number':1144,'multiline':False]
['text':' This unary case has side effects on the enclosing object, sure.  But','line_number':1150,'multiline':False]
['text':' that's not the question this function answers: it's whether the','line_number':1151,'multiline':False]
['text':' operation may have a side effect on something *other* than the result','line_number':1152,'multiline':False]
['text':' of the overall operation in which it's embedded.  The answer to that','line_number':1153,'multiline':False]
['text':' is no, because an object literal having a mutated prototype only','line_number':1154,'multiline':False]
['text':' produces a value, without affecting anything else.','line_number':1155,'multiline':False]
['text':' Unary cases with obvious side effects.','line_number':1159,'multiline':False]
['text':' These might invoke valueOf/toString, even with a subexpression without','line_number':1169,'multiline':False]
['text':' side effects!  Consider |+{ valueOf: null, toString: null }|.','line_number':1170,'multiline':False]
['text':' This invokes the (user-controllable) iterator protocol.','line_number':1178,'multiline':False]
['text':' Deletion generally has side effects, even if isolated cases have none.','line_number':1192,'multiline':False]
['text':' Deletion of a non-Reference expression has side effects only through','line_number':1201,'multiline':False]
['text':' evaluating the expression.','line_number':1202,'multiline':False]
['text':' Binary cases with obvious side effects.','line_number':1211,'multiline':False]
['text':' Strict equality operations and short circuit operators are well-behaved','line_number':1242,'multiline':False]
['text':' and perform no conversions.','line_number':1243,'multiline':False]
['text':' Any subexpression of a comma expression could be effectful.','line_number':1249,'multiline':False]
['text':' Subcomponents of a literal may be effectful.','line_number':1253,'multiline':False]
['text':' Most other binary operations (parsed as lists in SpiderMonkey) may','line_number':1266,'multiline':False]
['text':' perform conversions triggering side effects.  Math operations perform','line_number':1267,'multiline':False]
['text':' ToNumber and may fail invoking invalid user-defined toString/valueOf:','line_number':1268,'multiline':False]
['text':' |5 < { toString: null }|.  |instanceof| throws if provided a','line_number':1269,'multiline':False]
['text':' non-object constructor: |null instanceof null|.  |in| throws if given','line_number':1270,'multiline':False]
['text':' a non-object RHS: |5 in null|.','line_number':1271,'multiline':False]
['text':' More getters.','line_number':1309,'multiline':False]
['text':' Throws if the operand is not of the right class. Can also call a private','line_number':1316,'multiline':False]
['text':' getter.','line_number':1317,'multiline':False]
['text':' These affect visible names in this code, or in other code.','line_number':1323,'multiline':False]
['text':' Likewise.','line_number':1331,'multiline':False]
['text':' Every part of a loop might be effect-free, but looping infinitely *is*','line_number':1342,'multiline':False]
['text':' an effect.  (Language lawyer trivia: C++ says threads can be assumed','line_number':1343,'multiline':False]
['text':' to exit or have side effects, C++14 [intro.multithread]p27, so a C++','line_number':1344,'multiline':False]
['text':' implementation's equivalent of the below could set |*answer = false;|','line_number':1345,'multiline':False]
['text':' if all loop sub-nodes set |*answer = false|!)','line_number':1346,'multiline':False]
['text':' Declarations affect the name set of the relevant scope.','line_number':1354,'multiline':False]
['text':' Function calls can invoke non-local code.','line_number':1383,'multiline':False]
['text':' Function arg lists can contain arbitrary expressions. Technically','line_number':1393,'multiline':False]
['text':' this only causes side-effects if one of the arguments does, but since','line_number':1394,'multiline':False]
['text':' the call being made will always trigger side-effects, it isn't needed.','line_number':1395,'multiline':False]
['text':' Classes typically introduce names.  Even if no name is introduced,','line_number':1406,'multiline':False]
['text':' the heritage and/or class body (through computed property names)','line_number':1407,'multiline':False]
['text':' usually have effects.','line_number':1408,'multiline':False]
['text':' |with| calls |ToObject| on its expression and so throws if that value','line_number':1414,'multiline':False]
['text':' is null/undefined.','line_number':1415,'multiline':False]
['text':' Shorthands could trigger getters: the |x| in the object literal in','line_number':1431,'multiline':False]
['text':' |with ({ get x() { throw 42; } }) ({ x });|, for example, triggers','line_number':1432,'multiline':False]
['text':' one.  (Of course, it isn't necessary to use |with| for a shorthand to','line_number':1433,'multiline':False]
['text':' trigger a getter.)','line_number':1434,'multiline':False]
['text':'
       * A named function, contrary to ES3, is no longer effectful, because
       * we bind its name lexically (using JSOp::Callee) instead of creating
       * an Object instance and binding a readonly, permanent property in it
       * (the object and binding can be detected and hijacked or captured).
       * This is a bug fix to ES3; it is fixed in ES3.1 drafts.
       ','line_number':1442,'multiline':True]
['text':' We could methodically check every interpolated expression, but it's','line_number':1508,'multiline':False]
['text':' probably not worth the trouble.  Treat template strings as effect-free','line_number':1509,'multiline':False]
['text':' only if they don't contain any substitutions.','line_number':1510,'multiline':False]
['text':' This should be unreachable but is left as-is for now.','line_number':1521,'multiline':False]
['text':' by ParseNodeKind::For','line_number':1526,'multiline':False]
['text':' by ParseNodeKind::For','line_number':1527,'multiline':False]
['text':' by ParseNodeKind::For','line_number':1528,'multiline':False]
['text':' by ParseNodeKind::ClassDecl','line_number':1529,'multiline':False]
['text':' by ParseNodeKind::ClassDecl','line_number':1530,'multiline':False]
['text':' by ParseNodeKind::ClassDecl','line_number':1531,'multiline':False]
['text':' by ParseNodeKind::ClassDecl','line_number':1532,'multiline':False]
['text':' by ParseNodeKind::ClassDecl','line_number':1533,'multiline':False]
['text':' by ParseNodeKind::ClassDecl','line_number':1534,'multiline':False]
['text':' by ParseNodeKind::ClassDecl','line_number':1535,'multiline':False]
['text':' by ParseNodeKind::Import','line_number':1536,'multiline':False]
['text':' by ParseNodeKind::Import','line_number':1537,'multiline':False]
['text':' by ParseNodeKind::Import','line_number':1538,'multiline':False]
['text':' by ParseNodeKind::Export','line_number':1539,'multiline':False]
['text':' by ParseNodeKind::Export','line_number':1540,'multiline':False]
['text':' by ParseNodeKind::Export','line_number':1541,'multiline':False]
['text':' by ParseNodeKind::Export','line_number':1542,'multiline':False]
['text':' by ParseNodeKind::TaggedTemplate','line_number':1543,'multiline':False]
['text':' by ParseNodeKind::NewTarget','line_number':1544,'multiline':False]
['text':' by ParseNodeKind::Elem and others','line_number':1545,'multiline':False]
['text':' by ParseNodeKind::Dot','line_number':1546,'multiline':False]
['text':' Short-circuit if there is an enclosing 'with' scope.','line_number':1569,'multiline':False]
['text':' Otherwise see if the current point is under a 'with'.','line_number':1574,'multiline':False]
['text':' The Parser is responsible for marking the environment as either','line_number':1593,'multiline':False]
['text':' closed-over or used-by-eval which ensure that is must exist.','line_number':1594,'multiline':False]
['text':' The "this" environment exists outside of the compilation, but the','line_number':1605,'multiline':False]
['text':' `ScopeContext` recorded the number of additional hops needed, so add','line_number':1606,'multiline':False]
['text':' those in now.','line_number':1607,'multiline':False]
['text':' Get the innermost enclosing function that has a |this| binding.','line_number':1614,'multiline':False]
['text':' Directly load callee from the frame if possible.','line_number':1616,'multiline':False]
['text':' We have to load the callee from the environment chain.','line_number':1621,'multiline':False]
['text':' The parser ensures the private name is present on the environment chain,','line_number':1768,'multiline':False]
['text':' but its location can be Dynamic or Global when emitting debugger','line_number':1769,'multiline':False]
['text':' eval-in-frame code.','line_number':1770,'multiline':False]
['text':' Dynamic accesses have TDZ checks built into their VM code and should','line_number':1783,'multiline':False]
['text':' never emit explicit TDZ checks.','line_number':1784,'multiline':False]
['text':' Private names are implemented as lexical bindings, but it's just an','line_number':1788,'multiline':False]
['text':' implementation detail. Per spec there's no TDZ check when using them.','line_number':1789,'multiline':False]
['text':' We've already emitted a check in this basic block.','line_number':1800,'multiline':False]
['text':' If the value is not on the stack, we have to load it first.','line_number':1805,'multiline':False]
['text':' Emit the lexical check.','line_number':1818,'multiline':False]
['text':' Pop the value if needed.','line_number':1830,'multiline':False]
['text':' The non-optimized case.','line_number':1846,'multiline':False]
['text':' If the object operand is also a dotted property reference, reverse the','line_number':1850,'multiline':False]
['text':' list linked via expression() temporarily so we can iterate over it from','line_number':1851,'multiline':False]
['text':' the bottom up (reversing again as we go), to avoid excessive recursion.','line_number':1852,'multiline':False]
['text':' Reverse pndot->expression() to point up, not down.','line_number':1857,'multiline':False]
['text':' pndown is a primary expression, not a dotted property reference.','line_number':1868,'multiline':False]
['text':' Walk back up the list, emitting annotated name ops.','line_number':1874,'multiline':False]
['text':' Reverse the pndot->expression() link again.','line_number':1879,'multiline':False]
['text':'            [stack] THIS','line_number':1911,'multiline':False]
['text':'            [stack] OBJ','line_number':1916,'multiline':False]
['text':'              [stack] RESULT','line_number':1921,'multiline':False]
['text':'            [stack]','line_number':1952,'multiline':False]
['text':'            [stack] THIS','line_number':1957,'multiline':False]
['text':'            [stack] THIS','line_number':1961,'multiline':False]
['text':'            [stack] THIS KEY','line_number':1965,'multiline':False]
['text':'              [stack]','line_number':1973,'multiline':False]
['text':'              [stack] OBJ','line_number':1977,'multiline':False]
['text':'              [stack] OBJ? OBJ','line_number':1981,'multiline':False]
['text':'              [stack] OBJ? OBJ KEY','line_number':1985,'multiline':False]
['text':'              [stack] # if Super','line_number':2045,'multiline':False]
['text':'              [stack] THIS KEY','line_number':2046,'multiline':False]
['text':'              [stack] # otherwise','line_number':2047,'multiline':False]
['text':'              [stack] OBJ KEY','line_number':2048,'multiline':False]
['text':'              [stack] RESULT','line_number':2052,'multiline':False]
['text':'              [stack] CALLRESULT','line_number':2068,'multiline':False]
['text':'              [stack] N','line_number':2072,'multiline':False]
['text':' The increment/decrement has no side effects, so proceed to throw for','line_number':2076,'multiline':False]
['text':' invalid assignment target.','line_number':2077,'multiline':False]
['text':'              [stack] OBJ','line_number':2087,'multiline':False]
['text':'              [stack] OBJ NAME','line_number':2091,'multiline':False]
['text':'              [stack] RESULT','line_number':2095,'multiline':False]
['text':'
 * Using MOZ_NEVER_INLINE in here is a workaround for llvm.org/pr14047.
 * LLVM is deciding to inline this function which uses a lot of stack space
 * into emitTree which is recursive and uses relatively little stack space.
 ','line_number':2152,'multiline':True]
['text':' Enter the scope before pushing the switch BreakableControl since all','line_number':2175,'multiline':False]
['text':' breaks are under this scope.','line_number':2176,'multiline':False]
['text':' A switch statement may contain hoisted functions inside its','line_number':2183,'multiline':False]
['text':' cases. The PNX_FUNCDEFS flag is propagated from the STATEMENTLIST','line_number':2184,'multiline':False]
['text':' bodies of the cases to the case list.','line_number':2185,'multiline':False]
['text':' Emit code for evaluating cases and jumping to case statements.','line_number':2247,'multiline':False]
['text':' If the expression is a literal, suppress line number emission so','line_number':2259,'multiline':False]
['text':' that debugging works more naturally.','line_number':2260,'multiline':False]
['text':' Emit code for each case's statements.','line_number':2273,'multiline':False]
['text':' Use NumberEqualsInt32 here because switches compare using','line_number':2287,'multiline':False]
['text':' strict equality, which will equate -0 and +0.  In contrast','line_number':2288,'multiline':False]
['text':' NumberIsInt32 would return false for -0.','line_number':2289,'multiline':False]
['text':' ParseNodeKind::SetThis is used to update |this| after a super() call','line_number':2389,'multiline':False]
['text':' in a derived class constructor.','line_number':2390,'multiline':False]
['text':' The 'this' binding is not lexical, but due to super() semantics this','line_number':2397,'multiline':False]
['text':' initialization needs to be treated as a lexical one.','line_number':2398,'multiline':False]
['text':'              [stack]','line_number':2415,'multiline':False]
['text':' Emit the new |this| value.','line_number':2419,'multiline':False]
['text':'              [stack] NEWTHIS','line_number':2421,'multiline':False]
['text':' Get the original |this| and throw if we already initialized','line_number':2425,'multiline':False]
['text':' it. Do *not* use the NameLocation argument, as that's the special','line_number':2426,'multiline':False]
['text':' lexical location below to deal with super() semantics.','line_number':2427,'multiline':False]
['text':'              [stack] NEWTHIS THIS','line_number':2429,'multiline':False]
['text':'              [stack] NEWTHIS THIS','line_number':2433,'multiline':False]
['text':'              [stack] NEWTHIS','line_number':2437,'multiline':False]
['text':'              [stack] NEWTHIS','line_number':2441,'multiline':False]
['text':' For Global and sloppy-Eval scripts, this performs most of the steps of the','line_number':2469,'multiline':False]
['text':' spec's [GlobalDeclarationInstantiation] and [EvalDeclarationInstantiation]','line_number':2470,'multiline':False]
['text':' operations.','line_number':2471,'multiline':False]
['text':'','line_number':2472,'multiline':False]
['text':' Note that while strict-Eval is handled in the same part of the spec, it never','line_number':2473,'multiline':False]
['text':' fails for global-redeclaration checks so those scripts initialize directly in','line_number':2474,'multiline':False]
['text':' their bytecode.','line_number':2475,'multiline':False]
['text':' ES Modules have dedicated variable and lexial environments and therefore','line_number':2478,'multiline':False]
['text':' do not have to perform redeclaration checks. We initialize their bindings','line_number':2479,'multiline':False]
['text':' elsewhere in bytecode.','line_number':2480,'multiline':False]
['text':' Strict Eval has a dedicated variables (and lexical) environment and','line_number':2485,'multiline':False]
['text':' therefore does not have to perform redeclaration checks. We initialize','line_number':2486,'multiline':False]
['text':' their bindings elsewhere in the bytecode.','line_number':2487,'multiline':False]
['text':' If we have no variables bindings, then we are done!','line_number':2491,'multiline':False]
['text':' There should be no emitted functions yet.','line_number':2505,'multiline':False]
['text':' Emit the hoisted functions to gc-things list. There is no bytecode','line_number':2511,'multiline':False]
['text':' generated yet to bind them.','line_number':2512,'multiline':False]
['text':' Save the last GCThingIndex emitted. The hoisted functions are contained in','line_number':2517,'multiline':False]
['text':' the gc-things list up until this point. This set of gc-things also contain','line_number':2518,'multiline':False]
['text':' initial scopes (of which there must be at least one).','line_number':2519,'multiline':False]
['text':' Check for declaration conflicts and initialize the bindings.','line_number':2531,'multiline':False]
['text':' Sloppy eval scripts may emit hoisted functions bindings with a','line_number':2573,'multiline':False]
['text':' `JSOp::GlobalOrEvalDeclInstantiation` opcode below. If this eval needs a','line_number':2574,'multiline':False]
['text':' top-level lexical environment, we must ensure that environment is created','line_number':2575,'multiline':False]
['text':' before those functions are created and bound.','line_number':2576,'multiline':False]
['text':'','line_number':2577,'multiline':False]
['text':' This differs from the global-script case below because the global-lexical','line_number':2578,'multiline':False]
['text':' environment exists outside the script itself. In the case of strict eval','line_number':2579,'multiline':False]
['text':' scripts, the `emitterScope` above is already sufficient.','line_number':2580,'multiline':False]
['text':'            [stack]','line_number':2626,'multiline':False]
['text':' Create a Stencil and convert it into a JSScript.','line_number':2657,'multiline':False]
['text':'                [stack]','line_number':2701,'multiline':False]
['text':'              [stack]','line_number':2706,'multiline':False]
['text':'              [stack]','line_number':2711,'multiline':False]
['text':'              [stack]','line_number':2716,'multiline':False]
['text':'              [stack]','line_number':2721,'multiline':False]
['text':'              [stack]','line_number':2726,'multiline':False]
['text':' No need to recur into ParseNodeKind::Array and','line_number':2749,'multiline':False]
['text':' ParseNodeKind::Object subpatterns here, since','line_number':2750,'multiline':False]
['text':' emitSetOrInitializeDestructuring does the recursion when','line_number':2751,'multiline':False]
['text':' setting or initializing value.  Getting reference doesn't recur.','line_number':2752,'multiline':False]
['text':'        [stack] THIS SUPERBASE','line_number':2776,'multiline':False]
['text':' SUPERBASE is pushed onto THIS in poe.prepareForRhs below.','line_number':2779,'multiline':False]
['text':'        [stack] OBJ','line_number':2783,'multiline':False]
['text':'          [stack] # if Super','line_number':2789,'multiline':False]
['text':'          [stack] THIS SUPERBASE','line_number':2790,'multiline':False]
['text':'          [stack] # otherwise','line_number':2791,'multiline':False]
['text':'          [stack] OBJ','line_number':2792,'multiline':False]
['text':'          [stack] # if Super','line_number':2806,'multiline':False]
['text':'          [stack] THIS KEY','line_number':2807,'multiline':False]
['text':'          [stack] # otherwise','line_number':2808,'multiline':False]
['text':'          [stack] OBJ KEY','line_number':2809,'multiline':False]
['text':' SUPERBASE is pushed onto KEY in eoe.prepareForRhs below.','line_number':2813,'multiline':False]
['text':'          [stack] # if Super','line_number':2819,'multiline':False]
['text':'          [stack] THIS KEY SUPERBASE','line_number':2820,'multiline':False]
['text':'          [stack] # otherwise','line_number':2821,'multiline':False]
['text':'          [stack] OBJ KEY','line_number':2822,'multiline':False]
['text':'          [stack] OBJ','line_number':2833,'multiline':False]
['text':'          [stack] OBJ NAME','line_number':2837,'multiline':False]
['text':' Now emit the lvalue opcode sequence. If the lvalue is a nested','line_number':2862,'multiline':False]
['text':' destructuring initialiser-form, call ourselves to handle it, then pop','line_number':2863,'multiline':False]
['text':' the matched value. Otherwise emit an lvalue bytecode sequence followed','line_number':2864,'multiline':False]
['text':' by an assignment op.','line_number':2865,'multiline':False]
['text':' emitDestructuringOps leaves the assigned (to-be-destructured) value on','line_number':2878,'multiline':False]
['text':' top of the stack.','line_number':2879,'multiline':False]
['text':'          [stack] V ENV?','line_number':2898,'multiline':False]
['text':' This is like ordinary assignment, but with one difference.','line_number':2902,'multiline':False]
['text':'','line_number':2903,'multiline':False]
['text':' In `a = b`, we first determine a binding for `a` (using','line_number':2904,'multiline':False]
['text':' JSOp::BindName or JSOp::BindGName), then we evaluate `b`, then','line_number':2905,'multiline':False]
['text':' a JSOp::SetName instruction.','line_number':2906,'multiline':False]
['text':'','line_number':2907,'multiline':False]
['text':' In `[a] = [b]`, per spec, `b` is evaluated first, then we','line_number':2908,'multiline':False]
['text':' determine a binding for `a`. Then we need to do assignment--','line_number':2909,'multiline':False]
['text':' but the operands are on the stack in the wrong order for','line_number':2910,'multiline':False]
['text':' JSOp::SetProp, so we have to add a JSOp::Swap.','line_number':2911,'multiline':False]
['text':'','line_number':2912,'multiline':False]
['text':' In the cases where we are emitting a name op, emit a swap','line_number':2913,'multiline':False]
['text':' because of this.','line_number':2914,'multiline':False]
['text':'        [stack] ENV V','line_number':2916,'multiline':False]
['text':' In cases of emitting a frame slot or environment slot,','line_number':2920,'multiline':False]
['text':' nothing needs be done.','line_number':2921,'multiline':False]
['text':'          [stack] V','line_number':2924,'multiline':False]
['text':' The reference is already pushed by emitDestructuringLHSRef.','line_number':2932,'multiline':False]
['text':'            [stack] # if Super','line_number':2933,'multiline':False]
['text':'            [stack] THIS SUPERBASE VAL','line_number':2934,'multiline':False]
['text':'            [stack] # otherwise','line_number':2935,'multiline':False]
['text':'            [stack] OBJ VAL','line_number':2936,'multiline':False]
['text':'            [stack] # VAL','line_number':2945,'multiline':False]
['text':' The reference is already pushed by emitDestructuringLHSRef.','line_number':2953,'multiline':False]
['text':'            [stack] # if Super','line_number':2954,'multiline':False]
['text':'            [stack] THIS KEY SUPERBASE VAL','line_number':2955,'multiline':False]
['text':'            [stack] # otherwise','line_number':2956,'multiline':False]
['text':'            [stack] OBJ KEY VAL','line_number':2957,'multiline':False]
['text':'          [stack] VAL','line_number':2968,'multiline':False]
['text':' The reference is already pushed by emitDestructuringLHSRef.','line_number':2975,'multiline':False]
['text':'            [stack] OBJ NAME VAL','line_number':2976,'multiline':False]
['text':'          [stack] VAL','line_number':2984,'multiline':False]
['text':' Pop the assigned value.','line_number':3001,'multiline':False]
['text':'              [stack] # empty','line_number':3003,'multiline':False]
['text':' = IteratorKind::Sync ','line_number':3012,'multiline':True]
['text':' = false ','line_number':3013,'multiline':True]
['text':' TODO: migrate Module code to cpp, to avoid having the extra check here.','line_number':3014,'multiline':False]
['text':'                [stack] ... NEXT ITER','line_number':3021,'multiline':False]
['text':'              [stack] ... RESULT','line_number':3025,'multiline':False]
['text':'            [stack] ... RESULT','line_number':3031,'multiline':False]
['text':'              [stack] ... RESULT','line_number':3037,'multiline':False]
['text':'                [stack] V','line_number':3044,'multiline':False]
['text':'              [stack] V V','line_number':3048,'multiline':False]
['text':'              [stack] V V UNDEFINED','line_number':3052,'multiline':False]
['text':'              [stack] V NEQ','line_number':3056,'multiline':False]
['text':'              [stack] V NEQ','line_number':3062,'multiline':False]
['text':'              [stack] V','line_number':3067,'multiline':False]
['text':'              [stack] V V','line_number':3071,'multiline':False]
['text':'              [stack] V V NULL','line_number':3075,'multiline':False]
['text':'              [stack] V NEQ','line_number':3079,'multiline':False]
['text':'              [stack] V NOT-UNDEF-OR-NULL','line_number':3084,'multiline':False]
['text':' = IteratorKind::Sync ','line_number':3093,'multiline':True]
['text':' = CompletionKind::Normal ','line_number':3094,'multiline':True]
['text':' = false ','line_number':3095,'multiline':True]
['text':' Generate inline logic corresponding to IteratorClose (ES2021 7.4.6) and','line_number':3101,'multiline':False]
['text':' AsyncIteratorClose (ES2021 7.4.7). Steps numbers apply to both operations.','line_number':3102,'multiline':False]
['text':'','line_number':3103,'multiline':False]
['text':' Callers need to ensure that the iterator object is at the top of the','line_number':3104,'multiline':False]
['text':' stack.','line_number':3105,'multiline':False]
['text':' For non-Throw completions, we emit the equivalent of:','line_number':3107,'multiline':False]
['text':'','line_number':3108,'multiline':False]
['text':' var returnMethod = GetMethod(iterator, "return");','line_number':3109,'multiline':False]
['text':' if (returnMethod !== undefined) {','line_number':3110,'multiline':False]
['text':'   var innerResult = [Await] Call(returnMethod, iterator);','line_number':3111,'multiline':False]
['text':'   CheckIsObj(innerResult);','line_number':3112,'multiline':False]
['text':' }','line_number':3113,'multiline':False]
['text':'','line_number':3114,'multiline':False]
['text':' Whereas for Throw completions, we emit:','line_number':3115,'multiline':False]
['text':'','line_number':3116,'multiline':False]
['text':' try {','line_number':3117,'multiline':False]
['text':'   var returnMethod = GetMethod(iterator, "return");','line_number':3118,'multiline':False]
['text':'   if (returnMethod !== undefined) {','line_number':3119,'multiline':False]
['text':'     [Await] Call(returnMethod, iterator);','line_number':3120,'multiline':False]
['text':'   }','line_number':3121,'multiline':False]
['text':' } catch {}','line_number':3122,'multiline':False]
['text':'            [stack] ... ITER','line_number':3131,'multiline':False]
['text':'              [stack] ... ITER ITER','line_number':3137,'multiline':False]
['text':' Steps 1-2 are assertions, step 3 is implicit.','line_number':3141,'multiline':False]
['text':' Step 4.','line_number':3143,'multiline':False]
['text':'','line_number':3144,'multiline':False]
['text':' Get the "return" method.','line_number':3145,'multiline':False]
['text':'              [stack] ... ITER RET','line_number':3147,'multiline':False]
['text':' Step 5.','line_number':3151,'multiline':False]
['text':'','line_number':3152,'multiline':False]
['text':' Do nothing if "return" is undefined or null.','line_number':3153,'multiline':False]
['text':'              [stack] ... ITER RET NOT-UNDEF-OR-NULL','line_number':3156,'multiline':False]
['text':'              [stack] ... ITER RET','line_number':3161,'multiline':False]
['text':' Steps 5.c, 7.','line_number':3165,'multiline':False]
['text':'','line_number':3166,'multiline':False]
['text':' Call the "return" method.','line_number':3167,'multiline':False]
['text':'              [stack] ... RET ITER','line_number':3169,'multiline':False]
['text':'              [stack] ... RESULT','line_number':3174,'multiline':False]
['text':' 7.4.7 AsyncIteratorClose, step 5.d.','line_number':3178,'multiline':False]
['text':' Await clobbers rval, so save the current rval.','line_number':3181,'multiline':False]
['text':'          [stack] ... RESULT RVAL','line_number':3183,'multiline':False]
['text':'          [stack] ... RVAL RESULT','line_number':3187,'multiline':False]
['text':'            [stack] ... RVAL? RESULT','line_number':3193,'multiline':False]
['text':'          [stack] ... RESULT RVAL','line_number':3199,'multiline':False]
['text':'          [stack] ... RESULT','line_number':3203,'multiline':False]
['text':' Step 6 (Handled in caller).','line_number':3209,'multiline':False]
['text':' Step 8.','line_number':3211,'multiline':False]
['text':' Check that the "return" result is an object.','line_number':3213,'multiline':False]
['text':'            [stack] ... RESULT','line_number':3215,'multiline':False]
['text':'              [stack] ... ITER RET','line_number':3221,'multiline':False]
['text':'              [stack] ... ITER','line_number':3226,'multiline':False]
['text':'            [stack] ... ITER EXC','line_number':3236,'multiline':False]
['text':' Just ignore the exception thrown by call and await.','line_number':3240,'multiline':False]
['text':'            [stack] ... ITER','line_number':3242,'multiline':False]
['text':'            [stack] ... ITER','line_number':3247,'multiline':False]
['text':' Step 9 (Handled in caller).','line_number':3252,'multiline':False]
['text':'                [stack] ...','line_number':3255,'multiline':False]
['text':' Pad a nop at the beginning of the bytecode covered by the trynote so','line_number':3263,'multiline':False]
['text':' that when unwinding environments, we may unwind to the scope','line_number':3264,'multiline':False]
['text':' corresponding to the pc *before* the start, in case the first bytecode','line_number':3265,'multiline':False]
['text':' emitted by |emitter| is the start of an inner scope. See comment above','line_number':3266,'multiline':False]
['text':' UnwindEnvironmentToTryPc.','line_number':3267,'multiline':False]
['text':'                [stack] VALUE','line_number':3284,'multiline':False]
['text':'              [stack]','line_number':3288,'multiline':False]
['text':'              [stack] DEFAULTVALUE','line_number':3292,'multiline':False]
['text':'              [stack] VALUE/DEFAULTVALUE','line_number':3296,'multiline':False]
['text':' Function doesn't have 'name' property at this point.','line_number':3307,'multiline':False]
['text':' Set function's name at compile time.','line_number':3308,'multiline':False]
['text':'            [stack] NAME FUN','line_number':3327,'multiline':False]
['text':'            [stack] NAME FUN NAME','line_number':3331,'multiline':False]
['text':'            [stack] NAME FUN','line_number':3335,'multiline':False]
['text':' The inferred name may already be set if this function is an interpreted','line_number':3349,'multiline':False]
['text':' lazy function and we OOM'ed after we set the inferred name the first','line_number':3350,'multiline':False]
['text':' time.','line_number':3351,'multiline':False]
['text':' Here's pseudo code for |let [a, b, , c=y, ...d] = x;|','line_number':3385,'multiline':False]
['text':'','line_number':3386,'multiline':False]
['text':' Lines that are annotated "covered by trynote" mean that upon throwing','line_number':3387,'multiline':False]
['text':' an exception, IteratorClose is called on iter only if done is false.','line_number':3388,'multiline':False]
['text':'','line_number':3389,'multiline':False]
['text':'   let x, y;','line_number':3390,'multiline':False]
['text':'   let a, b, c, d;','line_number':3391,'multiline':False]
['text':'   let iter, next, lref, result, done, value; // stack values','line_number':3392,'multiline':False]
['text':'','line_number':3393,'multiline':False]
['text':'   iter = x[Symbol.iterator]();','line_number':3394,'multiline':False]
['text':'   next = iter.next;','line_number':3395,'multiline':False]
['text':'','line_number':3396,'multiline':False]
['text':'   // ==== emitted by loop for a ====','line_number':3397,'multiline':False]
['text':'   lref = GetReference(a);              // covered by trynote','line_number':3398,'multiline':False]
['text':'','line_number':3399,'multiline':False]
['text':'   result = Call(next, iter);','line_number':3400,'multiline':False]
['text':'   done = result.done;','line_number':3401,'multiline':False]
['text':'','line_number':3402,'multiline':False]
['text':'   if (done)','line_number':3403,'multiline':False]
['text':'     value = undefined;','line_number':3404,'multiline':False]
['text':'   else','line_number':3405,'multiline':False]
['text':'     value = result.value;','line_number':3406,'multiline':False]
['text':'','line_number':3407,'multiline':False]
['text':'   SetOrInitialize(lref, value);        // covered by trynote','line_number':3408,'multiline':False]
['text':'','line_number':3409,'multiline':False]
['text':'   // ==== emitted by loop for b ====','line_number':3410,'multiline':False]
['text':'   lref = GetReference(b);              // covered by trynote','line_number':3411,'multiline':False]
['text':'','line_number':3412,'multiline':False]
['text':'   if (done) {','line_number':3413,'multiline':False]
['text':'     value = undefined;','line_number':3414,'multiline':False]
['text':'   } else {','line_number':3415,'multiline':False]
['text':'     result = Call(next, iter);','line_number':3416,'multiline':False]
['text':'     done = result.done;','line_number':3417,'multiline':False]
['text':'     if (done)','line_number':3418,'multiline':False]
['text':'       value = undefined;','line_number':3419,'multiline':False]
['text':'     else','line_number':3420,'multiline':False]
['text':'       value = result.value;','line_number':3421,'multiline':False]
['text':'   }','line_number':3422,'multiline':False]
['text':'','line_number':3423,'multiline':False]
['text':'   SetOrInitialize(lref, value);        // covered by trynote','line_number':3424,'multiline':False]
['text':'','line_number':3425,'multiline':False]
['text':'   // ==== emitted by loop for elision ====','line_number':3426,'multiline':False]
['text':'   if (done) {','line_number':3427,'multiline':False]
['text':'     value = undefined;','line_number':3428,'multiline':False]
['text':'   } else {','line_number':3429,'multiline':False]
['text':'     result = Call(next, iter);','line_number':3430,'multiline':False]
['text':'     done = result.done;','line_number':3431,'multiline':False]
['text':'     if (done)','line_number':3432,'multiline':False]
['text':'       value = undefined;','line_number':3433,'multiline':False]
['text':'     else','line_number':3434,'multiline':False]
['text':'       value = result.value;','line_number':3435,'multiline':False]
['text':'   }','line_number':3436,'multiline':False]
['text':'','line_number':3437,'multiline':False]
['text':'   // ==== emitted by loop for c ====','line_number':3438,'multiline':False]
['text':'   lref = GetReference(c);              // covered by trynote','line_number':3439,'multiline':False]
['text':'','line_number':3440,'multiline':False]
['text':'   if (done) {','line_number':3441,'multiline':False]
['text':'     value = undefined;','line_number':3442,'multiline':False]
['text':'   } else {','line_number':3443,'multiline':False]
['text':'     result = Call(next, iter);','line_number':3444,'multiline':False]
['text':'     done = result.done;','line_number':3445,'multiline':False]
['text':'     if (done)','line_number':3446,'multiline':False]
['text':'       value = undefined;','line_number':3447,'multiline':False]
['text':'     else','line_number':3448,'multiline':False]
['text':'       value = result.value;','line_number':3449,'multiline':False]
['text':'   }','line_number':3450,'multiline':False]
['text':'','line_number':3451,'multiline':False]
['text':'   if (value === undefined)','line_number':3452,'multiline':False]
['text':'     value = y;                         // covered by trynote','line_number':3453,'multiline':False]
['text':'','line_number':3454,'multiline':False]
['text':'   SetOrInitialize(lref, value);        // covered by trynote','line_number':3455,'multiline':False]
['text':'','line_number':3456,'multiline':False]
['text':'   // ==== emitted by loop for d ====','line_number':3457,'multiline':False]
['text':'   lref = GetReference(d);              // covered by trynote','line_number':3458,'multiline':False]
['text':'','line_number':3459,'multiline':False]
['text':'   if (done)','line_number':3460,'multiline':False]
['text':'     value = [];','line_number':3461,'multiline':False]
['text':'   else','line_number':3462,'multiline':False]
['text':'     value = [...iter];','line_number':3463,'multiline':False]
['text':'','line_number':3464,'multiline':False]
['text':'   SetOrInitialize(lref, value);        // covered by trynote','line_number':3465,'multiline':False]
['text':'','line_number':3466,'multiline':False]
['text':'   // === emitted after loop ===','line_number':3467,'multiline':False]
['text':'   if (!done)','line_number':3468,'multiline':False]
['text':'      IteratorClose(iter);','line_number':3469,'multiline':False]
['text':' Use an iterator to destructure the RHS, instead of index lookup. We','line_number':3471,'multiline':False]
['text':' must leave the *original* value on the stack.','line_number':3472,'multiline':False]
['text':'              [stack] ... OBJ OBJ','line_number':3474,'multiline':False]
['text':'              [stack] ... OBJ NEXT ITER','line_number':3478,'multiline':False]
['text':' For an empty pattern [], call IteratorClose unconditionally. Nothing','line_number':3482,'multiline':False]
['text':' else needs to be done.','line_number':3483,'multiline':False]
['text':'            [stack] ... OBJ ITER NEXT','line_number':3486,'multiline':False]
['text':'            [stack] ... OBJ ITER','line_number':3490,'multiline':False]
['text':'              [stack] ... OBJ','line_number':3495,'multiline':False]
['text':' Push an initial FALSE value for DONE.','line_number':3498,'multiline':False]
['text':'              [stack] ... OBJ NEXT ITER FALSE','line_number':3500,'multiline':False]
['text':' TryNoteKind::Destructuring expects the iterator and the done value','line_number':3504,'multiline':False]
['text':' to be the second to top and the top of the stack, respectively.','line_number':3505,'multiline':False]
['text':' IteratorClose is called upon exception only if done is false.','line_number':3506,'multiline':False]
['text':' Spec requires LHS reference to be evaluated first.','line_number':3515,'multiline':False]
['text':'          [stack] ... OBJ NEXT ITER DONE LREF*','line_number':3525,'multiline':False]
['text':' Pick the DONE value to the top of the stack.','line_number':3532,'multiline':False]
['text':'          [stack] ... OBJ NEXT ITER LREF* DONE','line_number':3535,'multiline':False]
['text':' If this element is the first, DONE is always FALSE, so pop it.','line_number':3541,'multiline':False]
['text':'','line_number':3542,'multiline':False]
['text':' Non-first elements should emit if-else depending on the','line_number':3543,'multiline':False]
['text':' member pattern, below.','line_number':3544,'multiline':False]
['text':'          [stack] ... OBJ NEXT ITER LREF*','line_number':3546,'multiline':False]
['text':' If spread is not the first element of the pattern,','line_number':3554,'multiline':False]
['text':' iterator can already be completed.','line_number':3555,'multiline':False]
['text':'          [stack] ... OBJ NEXT ITER LREF* DONE','line_number':3556,'multiline':False]
['text':'        [stack] ... OBJ NEXT ITER LREF*','line_number':3559,'multiline':False]
['text':'        [stack] ... OBJ NEXT ITER LREF* ARRAY','line_number':3564,'multiline':False]
['text':'        [stack] ... OBJ NEXT ITER LREF*','line_number':3568,'multiline':False]
['text':' If iterator is not completed, create a new array with the rest','line_number':3573,'multiline':False]
['text':' of the iterator.','line_number':3574,'multiline':False]
['text':'          [stack] ... OBJ NEXT ITER LREF* NEXT','line_number':3576,'multiline':False]
['text':'          [stack] ... OBJ NEXT ITER LREF* NEXT ITER ARRAY','line_number':3580,'multiline':False]
['text':'          [stack] ... OBJ NEXT ITER LREF* NEXT ITER ARRAY INDEX','line_number':3584,'multiline':False]
['text':'          [stack] ... OBJ NEXT ITER LREF* ARRAY INDEX','line_number':3588,'multiline':False]
['text':'          [stack] ... OBJ NEXT ITER LREF* ARRAY','line_number':3592,'multiline':False]
['text':' At this point the iterator is done. Unpick a TRUE value for DONE above','line_number':3603,'multiline':False]
['text':' ITER.','line_number':3604,'multiline':False]
['text':'          [stack] ... OBJ NEXT ITER LREF* ARRAY TRUE','line_number':3606,'multiline':False]
['text':'          [stack] ... OBJ NEXT ITER TRUE LREF* ARRAY','line_number':3610,'multiline':False]
['text':'          [stack] ... OBJ NEXT ITER TRUE','line_number':3616,'multiline':False]
['text':'            [stack] ... OBJ NEXT ITER LREF* DONE','line_number':3635,'multiline':False]
['text':'          [stack] ... OBJ NEXT ITER LREF*','line_number':3638,'multiline':False]
['text':'          [stack] ... OBJ NEXT ITER LREF* UNDEF','line_number':3643,'multiline':False]
['text':'          [stack] ... OBJ NEXT ITER LREF* UNDEF','line_number':3647,'multiline':False]
['text':' The iterator is done. Unpick a TRUE value for DONE above ITER.','line_number':3651,'multiline':False]
['text':'          [stack] ... OBJ NEXT ITER LREF* UNDEF TRUE','line_number':3653,'multiline':False]
['text':'          [stack] ... OBJ NEXT ITER TRUE LREF* UNDEF','line_number':3657,'multiline':False]
['text':'          [stack] ... OBJ NEXT ITER LREF*','line_number':3662,'multiline':False]
['text':'            [stack] ... OBJ NEXT ITER LREF* NEXT','line_number':3668,'multiline':False]
['text':'            [stack] ... OBJ NEXT ITER LREF* RESULT','line_number':3672,'multiline':False]
['text':'            [stack] ... OBJ NEXT ITER LREF* RESULT RESULT','line_number':3676,'multiline':False]
['text':'            [stack] ... OBJ NEXT ITER LREF* RESULT DONE','line_number':3680,'multiline':False]
['text':'            [stack] ... OBJ NEXT ITER LREF* RESULT DONE DONE','line_number':3685,'multiline':False]
['text':'            [stack] ... OBJ NEXT ITER DONE LREF* RESULT DONE','line_number':3689,'multiline':False]
['text':'            [stack] ... OBJ NEXT ITER DONE LREF* RESULT','line_number':3695,'multiline':False]
['text':'            [stack] ... OBJ NEXT ITER DONE LREF*','line_number':3700,'multiline':False]
['text':'            [stack] ... OBJ NEXT ITER DONE LREF* UNDEF','line_number':3704,'multiline':False]
['text':'            [stack] ... OBJ NEXT ITER DONE LREF* UNDEF','line_number':3708,'multiline':False]
['text':'            [stack] ... OBJ NEXT ITER DONE LREF* RESULT','line_number':3713,'multiline':False]
['text':'            [stack] ... OBJ NEXT ITER DONE LREF* VALUE','line_number':3718,'multiline':False]
['text':'          [stack] ... OBJ NEXT ITER DONE LREF* VALUE','line_number':3737,'multiline':False]
['text':'          [stack] ... OBJ NEXT ITER DONE','line_number':3748,'multiline':False]
['text':'          [stack] ... OBJ NEXT ITER DONE','line_number':3756,'multiline':False]
['text':' The last DONE value is on top of the stack. If not DONE, call','line_number':3762,'multiline':False]
['text':' IteratorClose.','line_number':3763,'multiline':False]
['text':'                [stack] ... OBJ NEXT ITER DONE','line_number':3764,'multiline':False]
['text':'              [stack] ... OBJ NEXT ITER','line_number':3768,'multiline':False]
['text':'              [stack] ... OBJ','line_number':3772,'multiline':False]
['text':'              [stack] ... OBJ NEXT ITER','line_number':3776,'multiline':False]
['text':'              [stack] ... OBJ ITER NEXT','line_number':3780,'multiline':False]
['text':'              [stack] ... OBJ ITER','line_number':3784,'multiline':False]
['text':'              [stack] ... OBJ','line_number':3788,'multiline':False]
['text':'                [stack] ... RHS','line_number':3807,'multiline':False]
['text':'              [stack] ... RHS','line_number':3811,'multiline':False]
['text':'            [stack] ... RHS SET','line_number':3819,'multiline':False]
['text':'            [stack] ... SET RHS','line_number':3824,'multiline':False]
['text':'            [stack] ... SET? RHS LREF*','line_number':3849,'multiline':False]
['text':' Duplicate the value being destructured to use as a reference base.','line_number':3853,'multiline':False]
['text':'            [stack] ... SET? RHS LREF* RHS','line_number':3855,'multiline':False]
['text':'          [stack] ... SET? RHS LREF* RHS TARGET','line_number':3865,'multiline':False]
['text':'          [stack] ... SET? RHS LREF* RHS TARGET TARGET','line_number':3869,'multiline':False]
['text':'          [stack] ... SET? RHS LREF* TARGET TARGET RHS','line_number':3873,'multiline':False]
['text':'        [stack] ... RHS LREF* TARGET TARGET RHS SET','line_number':3879,'multiline':False]
['text':'          [stack] ... RHS LREF* TARGET','line_number':3887,'multiline':False]
['text':' Destructure TARGET per this member's lhs.','line_number':3891,'multiline':False]
['text':'          [stack] ... RHS','line_number':3893,'multiline':False]
['text':' Now push the property name currently being matched, which is the','line_number':3901,'multiline':False]
['text':' current property name "label" on the left of a colon in the object','line_number':3902,'multiline':False]
['text':' initialiser.','line_number':3903,'multiline':False]
['text':'          [stack] ... SET? RHS LREF* PROP','line_number':3909,'multiline':False]
['text':'        [stack]... SET? RHS LREF* RHS KEY','line_number':3920,'multiline':False]
['text':'        [stack]... SET? RHS LREF* RHS KEY','line_number':3925,'multiline':False]
['text':'        [stack] ... SET? RHS LREF* PROP','line_number':3931,'multiline':False]
['text':'        [stack] ... SET? RHS LREF* RHS KEY','line_number':3937,'multiline':False]
['text':' Add the computed property key to the exclusion set.','line_number':3941,'multiline':False]
['text':'      [stack] ... SET RHS LREF* RHS KEY SET','line_number':3944,'multiline':False]
['text':'      [stack] ... SET RHS LREF* RHS KEY SET KEY','line_number':3948,'multiline':False]
['text':'      [stack] ... SET RHS LREF* RHS KEY SET KEY UNDEFINED','line_number':3952,'multiline':False]
['text':'      [stack] ... SET RHS LREF* RHS KEY SET','line_number':3956,'multiline':False]
['text':'      [stack] ... SET RHS LREF* RHS KEY','line_number':3960,'multiline':False]
['text':' Get the property value if not done already.','line_number':3967,'multiline':False]
['text':'            [stack] ... SET? RHS LREF* PROP','line_number':3969,'multiline':False]
['text':'          [stack] ... SET? RHS LREF* VALUE','line_number':3975,'multiline':False]
['text':' Destructure PROP per this member's lhs.','line_number':3980,'multiline':False]
['text':'            [stack] ... SET? RHS','line_number':3982,'multiline':False]
['text':' Number and BigInt keys aren't yet supported. Computed property names need','line_number':4011,'multiline':False]
['text':' to be added dynamically.','line_number':4012,'multiline':False]
['text':' JSOp::NewObject cannot accept dictionary-mode objects.','line_number':4020,'multiline':False]
['text':' See if we can use ObjLiteral to construct the exclusion set object.','line_number':4031,'multiline':False]
['text':'            [stack] OBJ','line_number':4034,'multiline':False]
['text':' Take the slow but sure way and start off with a blank object.','line_number':4038,'multiline':False]
['text':'            [stack] OBJ','line_number':4040,'multiline':False]
['text':' Otherwise this is a computed property name which needs to','line_number':4071,'multiline':False]
['text':' be added dynamically.','line_number':4072,'multiline':False]
['text':' Initialize elements with |undefined|.','line_number':4078,'multiline':False]
['text':' Skip empty strings. These are very common: a template string like','line_number':4112,'multiline':False]
['text':' `${a}${b}` has three empty strings and without this optimization','line_number':4113,'multiline':False]
['text':' we'd emit four JSOp::Add operations instead of just one.','line_number':4114,'multiline':False]
['text':' We update source notes before emitting the expression','line_number':4121,'multiline':False]
['text':' We need to convert the expression to a string','line_number':4132,'multiline':False]
['text':' We've pushed two strings onto the stack. Add them together, leaving','line_number':4139,'multiline':False]
['text':' just one.','line_number':4140,'multiline':False]
['text':' All strings were empty, this can happen for something like `${""}`.','line_number':4150,'multiline':False]
['text':' Just push an empty string.','line_number':4151,'multiline':False]
['text':' initializer can be null here.','line_number':4174,'multiline':False]
['text':' Nothing to do for initializer-less 'var' declarations, as there's no TDZ.','line_number':4211,'multiline':False]
['text':'              [stack] ENV?','line_number':4219,'multiline':False]
['text':' Lexical declarations are initialized to undefined without an','line_number':4223,'multiline':False]
['text':' initializer.','line_number':4224,'multiline':False]
['text':'            [stack] ENV? UNDEF','line_number':4229,'multiline':False]
['text':'            [stack] ENV? V','line_number':4242,'multiline':False]
['text':'              [stack] V','line_number':4247,'multiline':False]
['text':'              [stack]','line_number':4251,'multiline':False]
['text':' The RHS value to assign is already on the stack, i.e., the next enumeration','line_number':4269,'multiline':False]
['text':' value in a for-in or for-of loop. Offset is the location in the stack of the','line_number':4270,'multiline':False]
['text':' already-emitted rhs. If we emitted a BIND[G]NAME, then the scope is on the','line_number':4271,'multiline':False]
['text':' top of the stack and we need to dig one deeper to get the right RHS value.','line_number':4272,'multiline':False]
['text':' Short-circuit assignment operators are handled elsewhere.','line_number':4314,'multiline':False]
['text':' |name| is used within NameOpEmitter, so its lifetime must surpass |noe|.','line_number':4331,'multiline':False]
['text':' Deal with non-name assignments.','line_number':4339,'multiline':False]
['text':' Purpose of anonFunctionName:','line_number':4342,'multiline':False]
['text':'','line_number':4343,'multiline':False]
['text':' In normal name assignments (`f = function(){}`), an anonymous function gets','line_number':4344,'multiline':False]
['text':' an inferred name based on the left-hand side name node.','line_number':4345,'multiline':False]
['text':'','line_number':4346,'multiline':False]
['text':' In normal property assignments (`obj.x = function(){}`), the anonymous','line_number':4347,'multiline':False]
['text':' function does not have a computed name, and rhs->isDirectRHSAnonFunction()','line_number':4348,'multiline':False]
['text':' will be false (and anonFunctionName will not be used). However, in field','line_number':4349,'multiline':False]
['text':' initializers (`class C { x = function(){} }`), field initialization is','line_number':4350,'multiline':False]
['text':' implemented via a property or elem assignment (where we are now), and','line_number':4351,'multiline':False]
['text':' rhs->isDirectRHSAnonFunction() is set - so we'll assign the name of the','line_number':4352,'multiline':False]
['text':' function.','line_number':4353,'multiline':False]
['text':'        [stack] THIS SUPERBASE','line_number':4381,'multiline':False]
['text':' SUPERBASE is pushed onto THIS later in poe->emitGet below.','line_number':4384,'multiline':False]
['text':'        [stack] OBJ','line_number':4388,'multiline':False]
['text':'          [stack] # if Super','line_number':4406,'multiline':False]
['text':'          [stack] THIS KEY','line_number':4407,'multiline':False]
['text':'          [stack] # otherwise','line_number':4408,'multiline':False]
['text':'          [stack] OBJ KEY','line_number':4409,'multiline':False]
['text':' SUPERBASE is pushed onto KEY in eoe->emitGet below.','line_number':4413,'multiline':False]
['text':'          [stack] OBJ','line_number':4428,'multiline':False]
['text':'          [stack] OBJ KEY','line_number':4432,'multiline':False]
['text':' Assignment to function calls is forbidden, but we have to make the','line_number':4446,'multiline':False]
['text':' call first.  Now we can throw.','line_number':4447,'multiline':False]
['text':' Rebalance the stack to placate stack-depth assertions.','line_number':4452,'multiline':False]
['text':'        [stack] # if Super','line_number':4467,'multiline':False]
['text':'        [stack] THIS SUPERBASE PROP','line_number':4468,'multiline':False]
['text':'        [stack] # otherwise','line_number':4469,'multiline':False]
['text':'        [stack] OBJ PROP','line_number':4470,'multiline':False]
['text':'        [stack] KEY THIS OBJ ELEM','line_number':4477,'multiline':False]
['text':'        [stack] OBJ KEY VALUE','line_number':4484,'multiline':False]
['text':' We just emitted a JSOp::ThrowMsg and popped the call's return','line_number':4490,'multiline':False]
['text':' value.  Push a random value to make sure the stack depth is','line_number':4491,'multiline':False]
['text':' correct.','line_number':4492,'multiline':False]
['text':'        [stack] NULL','line_number':4494,'multiline':False]
['text':'          [stack] ENV? VAL?','line_number':4505,'multiline':False]
['text':'          [stack] # if Simple Assignment with Super','line_number':4512,'multiline':False]
['text':'          [stack] THIS SUPERBASE','line_number':4513,'multiline':False]
['text':'          [stack] # if Simple Assignment with other','line_number':4514,'multiline':False]
['text':'          [stack] OBJ','line_number':4515,'multiline':False]
['text':'          [stack] # if Compound Assignment with Super','line_number':4516,'multiline':False]
['text':'          [stack] THIS SUPERBASE PROP','line_number':4517,'multiline':False]
['text':'          [stack] # if Compound Assignment with other','line_number':4518,'multiline':False]
['text':'          [stack] OBJ PROP','line_number':4519,'multiline':False]
['text':'          [stack] # if Simple Assignment with Super','line_number':4525,'multiline':False]
['text':'          [stack] THIS KEY SUPERBASE','line_number':4526,'multiline':False]
['text':'          [stack] # if Simple Assignment with other','line_number':4527,'multiline':False]
['text':'          [stack] OBJ KEY','line_number':4528,'multiline':False]
['text':'          [stack] # if Compound Assignment with Super','line_number':4529,'multiline':False]
['text':'          [stack] THIS KEY SUPERBASE ELEM','line_number':4530,'multiline':False]
['text':'          [stack] # if Compound Assignment with other','line_number':4531,'multiline':False]
['text':'          [stack] OBJ KEY ELEM','line_number':4532,'multiline':False]
['text':' no stack adjustment needed','line_number':4537,'multiline':False]
['text':'            [stack] ... VAL? RHS','line_number':4545,'multiline':False]
['text':' Assumption: Things with pre-emitted RHS values never need to be named.','line_number':4549,'multiline':False]
['text':'            [stack] ... VAL? RHS','line_number':4551,'multiline':False]
['text':' If += etc., emit the binary operator with a source note. ','line_number':4556,'multiline':True]
['text':'            [stack] ... VAL','line_number':4562,'multiline':False]
['text':' Finally, emit the specialized assignment bytecode. ','line_number':4567,'multiline':True]
['text':'          [stack] VAL','line_number':4571,'multiline':False]
['text':'          [stack] VAL','line_number':4579,'multiline':False]
['text':' We threw above, so nothing to do here.','line_number':4585,'multiline':False]
['text':'          [stack] VAL','line_number':4589,'multiline':False]
['text':'          [stack] VAL','line_number':4596,'multiline':False]
['text':' |name| is used within NameOpEmitter, so its lifetime must surpass |noe|.','line_number':4634,'multiline':False]
['text':' Select the appropriate emitter based on the left-hand side.','line_number':4637,'multiline':False]
['text':' Number of values pushed onto the stack in addition to the lhs value.','line_number':4645,'multiline':False]
['text':' Evaluate the left-hand side expression and compute any stack values needed','line_number':4648,'multiline':False]
['text':' for the assignment.','line_number':4649,'multiline':False]
['text':'          [stack] ENV? LHS','line_number':4656,'multiline':False]
['text':'        [stack] THIS SUPERBASE','line_number':4679,'multiline':False]
['text':'        [stack] OBJ','line_number':4684,'multiline':False]
['text':'          [stack] # if Super','line_number':4690,'multiline':False]
['text':'          [stack] THIS SUPERBASE LHS','line_number':4691,'multiline':False]
['text':'          [stack] # otherwise','line_number':4692,'multiline':False]
['text':'          [stack] OBJ LHS','line_number':4693,'multiline':False]
['text':'          [stack] # if Super','line_number':4698,'multiline':False]
['text':'          [stack] THIS SUPERBASE LHS','line_number':4699,'multiline':False]
['text':'          [stack] # otherwise','line_number':4700,'multiline':False]
['text':'          [stack] OBJ LHS','line_number':4701,'multiline':False]
['text':'          [stack] # if Super','line_number':4718,'multiline':False]
['text':'          [stack] THIS KEY','line_number':4719,'multiline':False]
['text':'          [stack] # otherwise','line_number':4720,'multiline':False]
['text':'          [stack] OBJ KEY','line_number':4721,'multiline':False]
['text':'          [stack] # if Super','line_number':4726,'multiline':False]
['text':'          [stack] THIS KEY SUPERBASE LHS','line_number':4727,'multiline':False]
['text':'          [stack] # otherwise','line_number':4728,'multiline':False]
['text':'          [stack] OBJ KEY LHS','line_number':4729,'multiline':False]
['text':'          [stack] # if Super','line_number':4734,'multiline':False]
['text':'          [stack] THIS KEY SUPERBASE LHS','line_number':4735,'multiline':False]
['text':'          [stack] # otherwise','line_number':4736,'multiline':False]
['text':'          [stack] OBJ KEY LHS','line_number':4737,'multiline':False]
['text':'          [stack] OBJ','line_number':4750,'multiline':False]
['text':'          [stack] OBJ NAME','line_number':4754,'multiline':False]
['text':'          [stack] OBJ NAME LHS','line_number':4758,'multiline':False]
['text':' Test for the short-circuit condition.','line_number':4771,'multiline':False]
['text':'              [stack] ... LHS','line_number':4774,'multiline':False]
['text':' The short-circuit condition wasn't fulfilled, pop the left-hand side value','line_number':4778,'multiline':False]
['text':' which was kept on the stack.','line_number':4779,'multiline':False]
['text':'              [stack] ...','line_number':4781,'multiline':False]
['text':'              [stack] ... RHS','line_number':4786,'multiline':False]
['text':' Perform the actual assignment.','line_number':4790,'multiline':False]
['text':'          [stack] RHS','line_number':4794,'multiline':False]
['text':'          [stack] RHS','line_number':4804,'multiline':False]
['text':'          [stack] RHS','line_number':4812,'multiline':False]
['text':'          [stack] RHS','line_number':4820,'multiline':False]
['text':' Join with the short-circuit jump and pop anything left on the stack.','line_number':4831,'multiline':False]
['text':'            [stack] RHS','line_number':4835,'multiline':False]
['text':'            [stack] ... LHS','line_number':4840,'multiline':False]
['text':' Reconstruct the stack depth after the jump.','line_number':4844,'multiline':False]
['text':' Move the left-hand side value to the bottom and pop the rest.','line_number':4847,'multiline':False]
['text':'            [stack] LHS ...','line_number':4849,'multiline':False]
['text':'            [stack] LHS','line_number':4853,'multiline':False]
['text':'            [stack] LHS | RHS','line_number':4858,'multiline':False]
['text':'            [stack] LHS | RHS','line_number':4863,'multiline':False]
['text':' The first element of a call-site node is the raw-values list. Skip over it.','line_number':4878,'multiline':False]
['text':' We must be nested under a try-finally statement.','line_number':4924,'multiline':False]
['text':' Catch parameter was omitted; just discard the exception.','line_number':4929,'multiline':False]
['text':' Emit the catch body. ','line_number':4960,'multiline':True]
['text':' Using MOZ_NEVER_INLINE in here is a workaround for llvm.org/pr14047. See the','line_number':4964,'multiline':False]
['text':' comment on EmitSwitch.','line_number':4965,'multiline':False]
['text':' If this try has a catch block, emit it.','line_number':4991,'multiline':False]
['text':' The emitted code for a catch block looks like:','line_number':4993,'multiline':False]
['text':'','line_number':4994,'multiline':False]
['text':' [pushlexicalenv]             only if any local aliased','line_number':4995,'multiline':False]
['text':' exception','line_number':4996,'multiline':False]
['text':' setlocal 0; pop              assign or possibly destructure exception','line_number':4997,'multiline':False]
['text':' < catch block contents >','line_number':4998,'multiline':False]
['text':' debugleaveblock','line_number':4999,'multiline':False]
['text':' [poplexicalenv]              only if any local aliased','line_number':5000,'multiline':False]
['text':' if there is a finally block:','line_number':5001,'multiline':False]
['text':'   gosub <finally>','line_number':5002,'multiline':False]
['text':'   goto <after finally>','line_number':5003,'multiline':False]
['text':' Emit the lexical scope and catch body.','line_number':5008,'multiline':False]
['text':' Emit the finally handler, if there is one.','line_number':5014,'multiline':False]
['text':' Emit the following:','line_number':5033,'multiline':False]
['text':'','line_number':5034,'multiline':False]
['text':'     False','line_number':5035,'multiline':False]
['text':'     ResumeIndex <resumeIndex>','line_number':5036,'multiline':False]
['text':'     Gosub <target>','line_number':5037,'multiline':False]
['text':'   resumeOffset:','line_number':5038,'multiline':False]
['text':'     JumpTarget','line_number':5039,'multiline':False]
['text':'','line_number':5040,'multiline':False]
['text':' The order is important: the Baseline Interpreter relies on JSOp::JumpTarget','line_number':5041,'multiline':False]
['text':' setting the frame's ICEntry when resuming at resumeOffset.','line_number':5042,'multiline':False]
['text':' Emit code for the condition before pushing stmtInfo.','line_number':5087,'multiline':False]
['text':' NOTE: NotExpr of testNode may be unwrapped, and in that case the negation','line_number':5088,'multiline':False]
['text':'       is handled by conditionKind.','line_number':5089,'multiline':False]
['text':' Emit code for the then part. ','line_number':5105,'multiline':True]
['text':' Emit code for the else part. ','line_number':5125,'multiline':True]
['text':' We can call this multiple times for sloppy eval scopes.','line_number':5141,'multiline':False]
['text':' = EMIT_LINENOTE ','line_number':5169,'multiline':True]
['text':' This block contains function statements whose definitions are','line_number':5172,'multiline':False]
['text':' hoisted to the top of the block. Emit these as a separate pass','line_number':5173,'multiline':False]
['text':' before the rest of the block.','line_number':5174,'multiline':False]
['text':' Line notes were updated by emitLexicalScope or emitScript.','line_number':5180,'multiline':False]
['text':' Using MOZ_NEVER_INLINE in here is a workaround for llvm.org/pr14047. See','line_number':5184,'multiline':False]
['text':' the comment on emitSwitch.','line_number':5185,'multiline':False]
['text':' We are about to emit some bytecode for what the spec calls "declaration','line_number':5207,'multiline':False]
['text':' instantiation". Assign these instructions to the opening `{` of the','line_number':5208,'multiline':False]
['text':' block. (Using the location of each declaration we're instantiating is','line_number':5209,'multiline':False]
['text':' too weird when stepping in the debugger.)','line_number':5210,'multiline':False]
['text':' for loops need to emit {FRESHEN,RECREATE}LEXICALENV if there are','line_number':5233,'multiline':False]
['text':' lexical declarations in the head. Signal this by passing a','line_number':5234,'multiline':False]
['text':' non-nullptr lexical scope.','line_number':5235,'multiline':False]
['text':' Ensure that the column of the 'with' is set properly.','line_number':5252,'multiline':False]
['text':'              [stack] TARGET SOURCE SET','line_number':5283,'multiline':False]
['text':'            [stack] TARGET SOURCE SET COPYDATAPROPERTIES','line_number':5288,'multiline':False]
['text':'              [stack] TARGET SOURCE','line_number':5293,'multiline':False]
['text':'            [stack] TARGET SOURCE COPYDATAPROPERTIES','line_number':5299,'multiline':False]
['text':'              [stack] TARGET SOURCE SET? COPYDATAPROPERTIES','line_number':5305,'multiline':False]
['text':'                    UNDEFINED','line_number':5306,'multiline':False]
['text':'              [stack] SOURCE SET? COPYDATAPROPERTIES UNDEFINED','line_number':5310,'multiline':False]
['text':'                    TARGET','line_number':5311,'multiline':False]
['text':'              [stack] SET? COPYDATAPROPERTIES UNDEFINED TARGET','line_number':5315,'multiline':False]
['text':'                    SOURCE','line_number':5316,'multiline':False]
['text':'            [stack] COPYDATAPROPERTIES UNDEFINED TARGET SOURCE SET','line_number':5321,'multiline':False]
['text':'              [stack] IGNORED','line_number':5326,'multiline':False]
['text':'              [stack]','line_number':5331,'multiline':False]
['text':' Convert iterable to iterator.','line_number':5348,'multiline':False]
['text':'              [stack] OBJ OBJ','line_number':5350,'multiline':False]
['text':'              [stack] OBJ OBJ @@ITERATOR','line_number':5354,'multiline':False]
['text':'              [stack] OBJ ITERFN','line_number':5358,'multiline':False]
['text':'              [stack] ITERFN OBJ','line_number':5362,'multiline':False]
['text':'              [stack] ITER','line_number':5366,'multiline':False]
['text':'              [stack] ITER','line_number':5370,'multiline':False]
['text':'              [stack] ITER ITER','line_number':5374,'multiline':False]
['text':'              [stack] ITER NEXT','line_number':5378,'multiline':False]
['text':'              [stack] NEXT ITER','line_number':5382,'multiline':False]
['text':' Convert iterable to iterator.','line_number':5389,'multiline':False]
['text':'              [stack] OBJ OBJ','line_number':5391,'multiline':False]
['text':'              [stack] OBJ OBJ @@ASYNCITERATOR','line_number':5395,'multiline':False]
['text':'              [stack] OBJ ITERFN','line_number':5399,'multiline':False]
['text':'              [stack] OBJ ITERFN !UNDEF-OR-NULL','line_number':5405,'multiline':False]
['text':'              [stack] OBJ ITERFN','line_number':5410,'multiline':False]
['text':'              [stack] OBJ','line_number':5415,'multiline':False]
['text':'              [stack] OBJ OBJ','line_number':5419,'multiline':False]
['text':'              [stack] OBJ OBJ @@ITERATOR','line_number':5423,'multiline':False]
['text':'              [stack] OBJ ITERFN','line_number':5427,'multiline':False]
['text':'              [stack] ITERFN OBJ','line_number':5431,'multiline':False]
['text':'              [stack] ITER','line_number':5435,'multiline':False]
['text':'              [stack] ITER','line_number':5439,'multiline':False]
['text':'              [stack] ITER ITER','line_number':5444,'multiline':False]
['text':'              [stack] ITER SYNCNEXT','line_number':5448,'multiline':False]
['text':'              [stack] ITER','line_number':5453,'multiline':False]
['text':'              [stack] OBJ ITERFN','line_number':5458,'multiline':False]
['text':'              [stack] ITERFN OBJ','line_number':5463,'multiline':False]
['text':'              [stack] ITER','line_number':5467,'multiline':False]
['text':'              [stack] ITER','line_number':5471,'multiline':False]
['text':'              [stack] ITER','line_number':5476,'multiline':False]
['text':'              [stack] ITER ITER','line_number':5481,'multiline':False]
['text':'              [stack] ITER NEXT','line_number':5485,'multiline':False]
['text':'              [stack] NEXT ITER','line_number':5489,'multiline':False]
['text':'              [stack] NEXT ITER ARR I','line_number':5500,'multiline':False]
['text':' Spread operations can't contain |continue|, so don't bother setting loop','line_number':5509,'multiline':False]
['text':' and enclosing "update" offsets, as we do with for-loops.','line_number':5510,'multiline':False]
['text':'            [stack] NEXT ITER ARR I NEXT','line_number':5513,'multiline':False]
['text':'            [stack] NEXT ITER ARR I RESULT','line_number':5517,'multiline':False]
['text':'            [stack] NEXT ITER ARR I RESULT RESULT','line_number':5521,'multiline':False]
['text':'            [stack] NEXT ITER ARR I RESULT DONE','line_number':5525,'multiline':False]
['text':'            [stack] NEXT ITER ARR I RESULT','line_number':5529,'multiline':False]
['text':' Emit code to assign result.value to the iteration variable.','line_number':5533,'multiline':False]
['text':'            [stack] NEXT ITER ARR I VALUE','line_number':5535,'multiline':False]
['text':'            [stack] NEXT ITER ARR (I+1)','line_number':5539,'multiline':False]
['text':'            [stack] NEXT ITER ARR (I+1)','line_number':5544,'multiline':False]
['text':' When we leave the loop body and jump to this point, the result value is','line_number':5551,'multiline':False]
['text':' still on the stack. Account for that by updating the stack depth','line_number':5552,'multiline':False]
['text':' manually.','line_number':5553,'multiline':False]
['text':' No continues should occur in spreads.','line_number':5556,'multiline':False]
['text':'              [stack] ITER ARR FINAL_INDEX RESULT NEXT','line_number':5560,'multiline':False]
['text':'              [stack] ARR FINAL_INDEX RESULT NEXT ITER','line_number':5564,'multiline':False]
['text':'                [stack] ARR FINAL_INDEX','line_number':5569,'multiline':False]
['text':' If the for-in/of loop didn't have a variable declaration, per-loop','line_number':5582,'multiline':False]
['text':' initialization is just assigning the iteration value to a target','line_number':5583,'multiline':False]
['text':' expression.','line_number':5584,'multiline':False]
['text':'              [stack] ... ITERVAL','line_number':5587,'multiline':False]
['text':' Otherwise, per-loop initialization is (possibly) declaration','line_number':5590,'multiline':False]
['text':' initialization.  If the declaration is a lexical declaration, it must be','line_number':5591,'multiline':False]
['text':' initialized.  If the declaration is a variable declaration, an','line_number':5592,'multiline':False]
['text':' assignment to that name (which does *not* necessarily assign to the','line_number':5593,'multiline':False]
['text':' variable!) must be generated.','line_number':5594,'multiline':False]
['text':' Per-iteration initialization in for-in/of loops computes the','line_number':5622,'multiline':False]
['text':' iteration value *before* initializing.  Thus the initializing','line_number':5623,'multiline':False]
['text':' value may be buried under a bind-specific value on the stack.','line_number':5624,'multiline':False]
['text':' Swap it to the top of the stack.','line_number':5625,'multiline':False]
['text':' In cases of emitting a frame slot or environment slot,','line_number':5631,'multiline':False]
['text':' nothing needs be done.','line_number':5632,'multiline':False]
['text':' The caller handles removing the iteration value from the stack.','line_number':5639,'multiline':False]
['text':' Certain builtins (e.g. Array.from) are implemented in self-hosting','line_number':5670,'multiline':False]
['text':' as for-of loops.','line_number':5671,'multiline':False]
['text':'              [stack]','line_number':5676,'multiline':False]
['text':'              [stack] ITERABLE','line_number':5687,'multiline':False]
['text':'              [stack] NEXT ITER VALUE','line_number':5698,'multiline':False]
['text':'              [stack] NEXT ITER VALUE','line_number':5703,'multiline':False]
['text':'              [stack] NEXT ITER UNDEF','line_number':5708,'multiline':False]
['text':' Perform the loop body.','line_number':5712,'multiline':False]
['text':'              [stack] NEXT ITER UNDEF','line_number':5715,'multiline':False]
['text':'              [stack]','line_number':5720,'multiline':False]
['text':' Annex B: Evaluate the var-initializer expression if present.','line_number':5734,'multiline':False]
['text':' |for (var i = initializer in expr) { ... }|','line_number':5735,'multiline':False]
['text':' Pop the initializer.','line_number':5766,'multiline':False]
['text':'              [stack]','line_number':5775,'multiline':False]
['text':' Evaluate the expression being iterated.','line_number':5779,'multiline':False]
['text':'              [stack] EXPR','line_number':5789,'multiline':False]
['text':'              [stack] ITER ITERVAL','line_number':5800,'multiline':False]
['text':'              [stack] ITER ITERVAL','line_number':5805,'multiline':False]
['text':'              [stack] ITER ITERVAL','line_number':5810,'multiline':False]
['text':' Perform the loop body.','line_number':5814,'multiline':False]
['text':'              [stack] ITER ITERVAL','line_number':5817,'multiline':False]
['text':'              [stack]','line_number':5822,'multiline':False]
['text':' C-style `for (init; cond; update) ...` loop. ','line_number':5829,'multiline':True]
['text':'              [stack]','line_number':5842,'multiline':False]
['text':' If the head of this for-loop declared any lexical variables, the parser','line_number':5846,'multiline':False]
['text':' wrapped this ParseNodeKind::For node in a ParseNodeKind::LexicalScope','line_number':5847,'multiline':False]
['text':' representing the implicit scope of those variables. By the time we get','line_number':5848,'multiline':False]
['text':' here, we have already entered that scope. So far, so good.','line_number':5849,'multiline':False]
['text':' Emit the `init` clause, whether it's an expression or a variable','line_number':5851,'multiline':False]
['text':' declaration. (The loop variables were hoisted into an enclosing','line_number':5852,'multiline':False]
['text':' scope, but we still need to emit code for the initializers.)','line_number':5853,'multiline':False]
['text':'          [stack]','line_number':5856,'multiline':False]
['text':' 'init' is an expression, not a declaration. emitTree left its','line_number':5867,'multiline':False]
['text':' value on the stack.','line_number':5868,'multiline':False]
['text':'          [stack] VAL','line_number':5870,'multiline':False]
['text':'          [stack]','line_number':5874,'multiline':False]
['text':'              [stack]','line_number':5881,'multiline':False]
['text':'            [stack] VAL','line_number':5893,'multiline':False]
['text':'              [stack]','line_number':5900,'multiline':False]
['text':'              [stack]','line_number':5905,'multiline':False]
['text':'              [stack]','line_number':5912,'multiline':False]
['text':' Check for update code to do before the condition (if any).','line_number':5916,'multiline':False]
['text':'            [stack] VAL','line_number':5925,'multiline':False]
['text':'              [stack]','line_number':5931,'multiline':False]
['text':' = false ','line_number':5957,'multiline':True]
['text':'                [stack]','line_number':5960,'multiline':False]
['text':' |wasEmittedByEnclosingScript| flag is set to true once the function has','line_number':5967,'multiline':False]
['text':' been emitted. Function definitions that need hoisting to the top of the','line_number':5968,'multiline':False]
['text':' function will be seen by emitFunction in two places.','line_number':5969,'multiline':False]
['text':'            [stack]','line_number':5972,'multiline':False]
['text':'            [stack] FUN?','line_number':5979,'multiline':False]
['text':'            [stack]','line_number':5983,'multiline':False]
['text':' We measured the max scope depth when we parsed the function. ','line_number':5992,'multiline':True]
['text':'            [stack] FUN?','line_number':5998,'multiline':False]
['text':'            [stack]','line_number':6003,'multiline':False]
['text':' Track the last emitted top-level self-hosted function, so that intrinsics','line_number':6008,'multiline':False]
['text':' can adjust attributes at parse time.','line_number':6009,'multiline':False]
['text':'','line_number':6010,'multiline':False]
['text':' NOTE: We also disallow lambda functions in the top-level body. This is done','line_number':6011,'multiline':False]
['text':' to simplify handling of the self-hosted stencil. Within normal function','line_number':6012,'multiline':False]
['text':' declarations there are no such restrictions.','line_number':6013,'multiline':False]
['text':' Any statement with the matching label may be the break target.','line_number':6098,'multiline':False]
['text':' Find the loop statement enclosed by the matching label.','line_number':6116,'multiline':False]
['text':'              [stack] THIS','line_number':6147,'multiline':False]
['text':'            [stack] THIS','line_number':6152,'multiline':False]
['text':'                [stack] THIS','line_number':6164,'multiline':False]
['text':'              [stack] THIS','line_number':6171,'multiline':False]
['text':'              [stack] UNDEF','line_number':6176,'multiline':False]
['text':'                [stack] THIS','line_number':6181,'multiline':False]
['text':' Push a return value ','line_number':6216,'multiline':True]
['text':' No explicit return value provided ','line_number':6229,'multiline':True]
['text':' We know functionBodyEndPos is set because "return" is only','line_number':6241,'multiline':False]
['text':' valid in a function, and so we've passed through','line_number':6242,'multiline':False]
['text':' emitFunctionScript.','line_number':6243,'multiline':False]
['text':'
   * EmitNonLocalJumpFixup may add fixup bytecode to close open try
   * blocks having finally clauses and to exit intermingled let blocks.
   * We can't simply transfer control flow to our caller in that case,
   * because we must gosub to those finally clauses from inner to outer,
   * with the correct stack pointer (i.e., after popping any with,
   * for/in, etc., slots nested inside the finally's try).
   *
   * In this case we mutate JSOp::Return into JSOp::SetRval and add an
   * extra JSOp::RetRval after the fixups.
   ','line_number':6248,'multiline':True]
['text':' Make sure that we emit this before popping the blocks in','line_number':6271,'multiline':False]
['text':' prepareForNonLocalJump, to ensure that the error is thrown while the','line_number':6272,'multiline':False]
['text':' scope-chain is still intact.','line_number':6273,'multiline':False]
['text':' We know that .generator is on the function scope, as we just exited','line_number':6287,'multiline':False]
['text':' all nested scopes.','line_number':6288,'multiline':False]
['text':' Resolve the return value before emitting the final yield.','line_number':6292,'multiline':False]
['text':'          [stack] RVAL','line_number':6295,'multiline':False]
['text':'          [stack] RVAL GEN','line_number':6300,'multiline':False]
['text':'          [stack] PROMISE','line_number':6305,'multiline':False]
['text':'          [stack]','line_number':6309,'multiline':False]
['text':'              [stack] RVAL GENERATOR RESUMEKIND','line_number':6357,'multiline':False]
['text':'              [stack] RVAL','line_number':6361,'multiline':False]
['text':'              [stack]','line_number':6365,'multiline':False]
['text':'            [stack] ITEROBJ','line_number':6380,'multiline':False]
['text':'            [stack] ITEROBJ? VAL','line_number':6386,'multiline':False]
['text':'            [stack] ITEROBJ? UNDEFINED','line_number':6391,'multiline':False]
['text':' 25.5.3.7 AsyncGeneratorYield step 5.','line_number':6396,'multiline':False]
['text':'            [stack] RESULT','line_number':6400,'multiline':False]
['text':'            [stack] ITEROBJ','line_number':6407,'multiline':False]
['text':'              [stack] # if needsIteratorResult','line_number':6413,'multiline':False]
['text':'              [stack] ITEROBJ .GENERATOR','line_number':6414,'multiline':False]
['text':'              [stack] # else','line_number':6415,'multiline':False]
['text':'              [stack] RESULT .GENERATOR','line_number':6416,'multiline':False]
['text':'              [stack] YIELDRESULT GENERATOR RESUMEKIND','line_number':6421,'multiline':False]
['text':'              [stack] YIELDRESULT','line_number':6426,'multiline':False]
['text':'              [stack] VALUE CANSKIP','line_number':6445,'multiline':False]
['text':'              [stack] VALUE_OR_RESOLVED CANSKIP','line_number':6450,'multiline':False]
['text':'              [stack] VALUE_OR_RESOLVED','line_number':6456,'multiline':False]
['text':'            [stack] VALUE GENERATOR','line_number':6462,'multiline':False]
['text':'            [stack] PROMISE','line_number':6466,'multiline':False]
['text':'              [stack] VALUE|PROMISE GENERATOR','line_number':6472,'multiline':False]
['text':'              [stack] RESOLVED GENERATOR RESUMEKIND','line_number':6476,'multiline':False]
['text':'              [stack] RESOLVED','line_number':6480,'multiline':False]
['text':' ES2019 draft rev 49b781ec80117b60f73327ef3054703a3111e40c','line_number':6493,'multiline':False]
['text':' 14.4.14 Runtime Semantics: Evaluation','line_number':6494,'multiline':False]
['text':' YieldExpression : yield* AssignmentExpression','line_number':6495,'multiline':False]
['text':' Step 1.','line_number':6500,'multiline':False]
['text':' Steps 2-5.','line_number':6506,'multiline':False]
['text':'              [stack] ITERABLE','line_number':6508,'multiline':False]
['text':'            [stack] NEXT ITER','line_number':6513,'multiline':False]
['text':'            [stack] NEXT ITER','line_number':6518,'multiline':False]
['text':' Step 6.','line_number':6523,'multiline':False]
['text':' Start with NormalCompletion(undefined).','line_number':6524,'multiline':False]
['text':'              [stack] NEXT ITER RECEIVED','line_number':6526,'multiline':False]
['text':'              [stack] NEXT ITER RECEIVED RESUMEKIND','line_number':6530,'multiline':False]
['text':' Step 7 is a loop.','line_number':6537,'multiline':False]
['text':'              [stack] NEXT ITER RECEIVED RESUMEKIND','line_number':6540,'multiline':False]
['text':' Step 7.a. Check for Normal completion.','line_number':6544,'multiline':False]
['text':'              [stack] NEXT ITER RECEIVED RESUMEKIND RESUMEKIND','line_number':6546,'multiline':False]
['text':'              [stack] NEXT ITER RECEIVED RESUMEKIND RESUMEKIND NORMAL','line_number':6550,'multiline':False]
['text':'              [stack] NEXT ITER RECEIVED RESUMEKIND IS_NORMAL','line_number':6554,'multiline':False]
['text':'              [stack] NEXT ITER RECEIVED RESUMEKIND','line_number':6560,'multiline':False]
['text':'            [stack] NEXT ITER RECEIVED','line_number':6565,'multiline':False]
['text':' Step 7.a.i.','line_number':6569,'multiline':False]
['text':' result = iter.next(received)','line_number':6570,'multiline':False]
['text':'            [stack] RECEIVED NEXT ITER','line_number':6572,'multiline':False]
['text':'            [stack] RECEIVED NEXT ITER NEXT ITER','line_number':6576,'multiline':False]
['text':'            [stack] NEXT ITER NEXT ITER RECEIVED','line_number':6580,'multiline':False]
['text':'            [stack] NEXT ITER RESULT','line_number':6584,'multiline':False]
['text':' Step 7.a.ii.','line_number':6588,'multiline':False]
['text':'          [stack] NEXT ITER RESULT','line_number':6591,'multiline':False]
['text':' Step 7.a.iii.','line_number':6596,'multiline':False]
['text':'            [stack] NEXT ITER RESULT','line_number':6598,'multiline':False]
['text':' Bytecode for steps 7.a.iv-vii is emitted after the ifKind if-else because','line_number':6602,'multiline':False]
['text':' it's shared with other branches.','line_number':6603,'multiline':False]
['text':' Step 7.b. Check for Throw completion.','line_number':6606,'multiline':False]
['text':'              [stack] NEXT ITER RECEIVED RESUMEKIND','line_number':6608,'multiline':False]
['text':'              [stack] NEXT ITER RECEIVED RESUMEKIND RESUMEKIND','line_number':6612,'multiline':False]
['text':'              [stack] NEXT ITER RECEIVED RESUMEKIND RESUMEKIND THROW','line_number':6616,'multiline':False]
['text':'              [stack] NEXT ITER RECEIVED RESUMEKIND IS_THROW','line_number':6620,'multiline':False]
['text':'              [stack] NEXT ITER RECEIVED RESUMEKIND','line_number':6624,'multiline':False]
['text':'            [stack] NEXT ITER RECEIVED','line_number':6629,'multiline':False]
['text':' Step 7.b.i.','line_number':6632,'multiline':False]
['text':'            [stack] NEXT ITER RECEIVED ITER','line_number':6634,'multiline':False]
['text':'            [stack] NEXT ITER RECEIVED ITER ITER','line_number':6638,'multiline':False]
['text':'            [stack] NEXT ITER RECEIVED ITER THROW','line_number':6643,'multiline':False]
['text':' Step 7.b.ii.','line_number':6647,'multiline':False]
['text':'            [stack] NEXT ITER RECEIVED ITER THROW','line_number':6650,'multiline':False]
['text':'            [stack]   NOT-UNDEF-OR_NULL','line_number':6651,'multiline':False]
['text':'            [stack] NEXT ITER RECEIVED ITER THROW','line_number':6656,'multiline':False]
['text':' Step 7.b.ii.1.','line_number':6660,'multiline':False]
['text':' RESULT = ITER.throw(EXCEPTION)','line_number':6661,'multiline':False]
['text':'            [stack] NEXT ITER RECEIVED THROW ITER','line_number':6663,'multiline':False]
['text':'            [stack] NEXT ITER THROW ITER RECEIVED','line_number':6667,'multiline':False]
['text':'            [stack] NEXT ITER RESULT','line_number':6671,'multiline':False]
['text':' Step 7.b.ii.2.','line_number':6675,'multiline':False]
['text':'          [stack] NEXT ITER RESULT','line_number':6678,'multiline':False]
['text':' Step 7.b.ii.4.','line_number':6683,'multiline':False]
['text':'            [stack] NEXT ITER RESULT','line_number':6685,'multiline':False]
['text':' Bytecode for steps 7.b.ii.5-8 is emitted after the ifKind if-else because','line_number':6689,'multiline':False]
['text':' it's shared with other branches.','line_number':6690,'multiline':False]
['text':' Step 7.b.iii.','line_number':6692,'multiline':False]
['text':'            [stack] NEXT ITER RECEIVED ITER THROW','line_number':6694,'multiline':False]
['text':'            [stack] NEXT ITER RECEIVED ITER','line_number':6698,'multiline':False]
['text':' Steps 7.b.iii.1-4.','line_number':6702,'multiline':False]
['text':'','line_number':6703,'multiline':False]
['text':' If the iterator does not have a "throw" method, it calls IteratorClose','line_number':6704,'multiline':False]
['text':' and then throws a TypeError.','line_number':6705,'multiline':False]
['text':'            [stack] NEXT ITER RECEIVED ITER','line_number':6708,'multiline':False]
['text':' Steps 7.b.iii.5-6.','line_number':6711,'multiline':False]
['text':'            [stack] NEXT ITER RECEIVED ITER','line_number':6713,'multiline':False]
['text':'            [stack] # throw','line_number':6714,'multiline':False]
['text':' Step 7.c. It must be a Return completion.','line_number':6723,'multiline':False]
['text':'              [stack] NEXT ITER RECEIVED RESUMEKIND','line_number':6725,'multiline':False]
['text':'            [stack] NEXT ITER RECEIVED','line_number':6730,'multiline':False]
['text':' Step 7.c.i.','line_number':6734,'multiline':False]
['text':'','line_number':6735,'multiline':False]
['text':' Call iterator.return() for receiving a "forced return" completion from','line_number':6736,'multiline':False]
['text':' the generator.','line_number':6737,'multiline':False]
['text':' Step 7.c.ii.','line_number':6739,'multiline':False]
['text':'','line_number':6740,'multiline':False]
['text':' Get the "return" method.','line_number':6741,'multiline':False]
['text':'            [stack] NEXT ITER RECEIVED ITER','line_number':6743,'multiline':False]
['text':'            [stack] NEXT ITER RECEIVED ITER ITER','line_number':6747,'multiline':False]
['text':'            [stack] NEXT ITER RECEIVED ITER RET','line_number':6752,'multiline':False]
['text':' Step 7.c.iii.','line_number':6756,'multiline':False]
['text':'','line_number':6757,'multiline':False]
['text':' Do nothing if "return" is undefined or null.','line_number':6758,'multiline':False]
['text':'            [stack] NEXT ITER RECEIVED ITER RET NOT-UNDEF-OR_NULL','line_number':6761,'multiline':False]
['text':' Step 7.c.iv.','line_number':6765,'multiline':False]
['text':'','line_number':6766,'multiline':False]
['text':' Call "return" with the argument passed to Generator.prototype.return.','line_number':6767,'multiline':False]
['text':'            [stack] NEXT ITER RECEIVED ITER RET','line_number':6769,'multiline':False]
['text':'            [stack] NEXT ITER RECEIVED RET ITER','line_number':6773,'multiline':False]
['text':'            [stack] NEXT ITER RET ITER RECEIVED','line_number':6777,'multiline':False]
['text':'          [stack] NEXT ITER RET ITER VAL','line_number':6783,'multiline':False]
['text':'            [stack] NEXT ITER RESULT','line_number':6788,'multiline':False]
['text':' Step 7.c.v.','line_number':6792,'multiline':False]
['text':'          [stack] NEXT ITER RESULT','line_number':6795,'multiline':False]
['text':' Step 7.c.vi.','line_number':6800,'multiline':False]
['text':'            [stack] NEXT ITER RESULT','line_number':6802,'multiline':False]
['text':' Check if the returned object from iterator.return() is done. If not,','line_number':6806,'multiline':False]
['text':' continue yielding.','line_number':6807,'multiline':False]
['text':' Steps 7.c.vii-viii.','line_number':6809,'multiline':False]
['text':'            [stack] NEXT ITER RESULT RESULT','line_number':6812,'multiline':False]
['text':'            [stack] NEXT ITER RESULT DONE','line_number':6816,'multiline':False]
['text':'            [stack] NEXT ITER RESULT','line_number':6820,'multiline':False]
['text':' Step 7.c.viii.1.','line_number':6824,'multiline':False]
['text':'            [stack] NEXT ITER VALUE','line_number':6826,'multiline':False]
['text':'          [stack] NEXT ITER VALUE RESULT','line_number':6831,'multiline':False]
['text':'          [stack] NEXT ITER RESULT VALUE','line_number':6835,'multiline':False]
['text':'          [stack] NEXT ITER RESULT','line_number':6839,'multiline':False]
['text':'            [stack] NEXT ITER RESULT','line_number':6845,'multiline':False]
['text':' Jump to continue label for steps 7.c.ix-x.','line_number':6849,'multiline':False]
['text':'            [stack] NEXT ITER RESULT','line_number':6851,'multiline':False]
['text':'            [stack] NEXT ITER RESULT','line_number':6856,'multiline':False]
['text':' Step 7.c.iii.','line_number':6860,'multiline':False]
['text':'            [stack] NEXT ITER RECEIVED ITER RET','line_number':6862,'multiline':False]
['text':'            [stack] NEXT ITER RECEIVED','line_number':6866,'multiline':False]
['text':' Step 7.c.iii.1.','line_number':6870,'multiline':False]
['text':'          [stack] NEXT ITER RECEIVED','line_number':6872,'multiline':False]
['text':'            [stack] NEXT ITER RECEIVED','line_number':6877,'multiline':False]
['text':' Perform a "forced generator return".','line_number':6881,'multiline':False]
['text':'','line_number':6882,'multiline':False]
['text':' Step 7.c.iii.2.','line_number':6883,'multiline':False]
['text':' Step 7.c.viii.2.','line_number':6884,'multiline':False]
['text':'            [stack] NEXT ITER RESULT GENOBJ','line_number':6886,'multiline':False]
['text':'            [stack] NEXT ITER RESULT GENOBJ RESUMEKIND','line_number':6890,'multiline':False]
['text':'            [stack] NEXT ITER RESULT GENOBJ RESUMEKIND','line_number':6894,'multiline':False]
['text':'              [stack] NEXT ITER RESULT','line_number':6900,'multiline':False]
['text':' Shared tail for Normal/Throw completions.','line_number':6904,'multiline':False]
['text':'','line_number':6905,'multiline':False]
['text':' Steps 7.a.iv-v.','line_number':6906,'multiline':False]
['text':' Steps 7.b.ii.5-6.','line_number':6907,'multiline':False]
['text':'','line_number':6908,'multiline':False]
['text':'                [stack] NEXT ITER RESULT','line_number':6909,'multiline':False]
['text':' if (result.done) break;','line_number':6911,'multiline':False]
['text':'              [stack] NEXT ITER RESULT RESULT','line_number':6913,'multiline':False]
['text':'              [stack] NEXT ITER RESULT DONE','line_number':6917,'multiline':False]
['text':'              [stack] NEXT ITER RESULT','line_number':6921,'multiline':False]
['text':' Steps 7.a.vi-vii.','line_number':6925,'multiline':False]
['text':' Steps 7.b.ii.7-8.','line_number':6926,'multiline':False]
['text':' Steps 7.c.ix-x.','line_number':6927,'multiline':False]
['text':'              [stack] NEXT ITER RESULT','line_number':6929,'multiline':False]
['text':'            [stack] NEXT ITER RESULT','line_number':6934,'multiline':False]
['text':'            [stack] NEXT ITER RESULT','line_number':6938,'multiline':False]
['text':'              [stack] NEXT ITER RESULT GENOBJ','line_number':6943,'multiline':False]
['text':'              [stack] NEXT ITER RVAL GENOBJ RESUMEKIND','line_number':6947,'multiline':False]
['text':'              [stack] NEXT ITER RVAL RESUMEKIND GENOBJ','line_number':6951,'multiline':False]
['text':'              [stack] NEXT ITER RVAL RESUMEKIND','line_number':6955,'multiline':False]
['text':'              [stack] NEXT ITER RVAL RESUMEKIND','line_number':6959,'multiline':False]
['text':' Jumps to this point have 3 (instead of 4) values on the stack.','line_number':6963,'multiline':False]
['text':'                [stack] NEXT ITER RESULT','line_number':6967,'multiline':False]
['text':' Step 7.a.v.1.','line_number':6969,'multiline':False]
['text':' Step 7.b.ii.6.a.','line_number':6970,'multiline':False]
['text':'','line_number':6971,'multiline':False]
['text':' result.value','line_number':6972,'multiline':False]
['text':'              [stack] RESULT NEXT ITER','line_number':6974,'multiline':False]
['text':'              [stack] RESULT','line_number':6978,'multiline':False]
['text':'              [stack] VALUE','line_number':6982,'multiline':False]
['text':'
   * Top-level or called-from-a-native JS_Execute/EvaluateScript,
   * debugger, and eval frames may need the value of the ultimate
   * expression statement as the script's result, despite the fact
   * that it appears useless to the compiler.
   *
   * API users may also set the JSOPTION_NO_SCRIPT_RVAL option when
   * calling JS_Compile* to suppress JSOp::SetRval.
   ','line_number':7003,'multiline':True]
['text':' Don't eliminate expressions with side effects. ','line_number':7018,'multiline':True]
['text':'
     * Don't eliminate apparently useless expressions if they are labeled
     * expression statements. The startOffset() test catches the case
     * where we are nesting in emitTree for a labeled compound statement.
     ','line_number':7025,'multiline':True]
['text':' The expression |delete super.foo;| has to evaluate |super.foo|,','line_number':7077,'multiline':False]
['text':' which could throw if |this| hasn't yet been set by a |super(...)|','line_number':7078,'multiline':False]
['text':' call or the super-base is not an object, before throwing a','line_number':7079,'multiline':False]
['text':' ReferenceError for attempting to delete a super-reference.','line_number':7080,'multiline':False]
['text':'            [stack] THIS','line_number':7083,'multiline':False]
['text':'            [stack] OBJ','line_number':7091,'multiline':False]
['text':'              [stack] # if Super','line_number':7097,'multiline':False]
['text':'              [stack] THIS','line_number':7098,'multiline':False]
['text':'              [stack] # otherwise','line_number':7099,'multiline':False]
['text':'              [stack] SUCCEEDED','line_number':7100,'multiline':False]
['text':' The expression |delete super[foo];| has to evaluate |super[foo]|,','line_number':7119,'multiline':False]
['text':' which could throw if |this| hasn't yet been set by a |super(...)|','line_number':7120,'multiline':False]
['text':' call, or trigger side-effects when evaluating ToPropertyKey(foo),','line_number':7121,'multiline':False]
['text':' or also throw when the super-base is not an object, before throwing','line_number':7122,'multiline':False]
['text':' a ReferenceError for attempting to delete a super-reference.','line_number':7123,'multiline':False]
['text':'            [stack]','line_number':7125,'multiline':False]
['text':'            [stack] THIS','line_number':7131,'multiline':False]
['text':'            [stack] THIS','line_number':7135,'multiline':False]
['text':'            [stack] THIS KEY','line_number':7139,'multiline':False]
['text':'            [stack] OBJ KEY','line_number':7144,'multiline':False]
['text':'              [stack] # if Super','line_number':7149,'multiline':False]
['text':'              [stack] THIS','line_number':7150,'multiline':False]
['text':'              [stack] # otherwise','line_number':7151,'multiline':False]
['text':'              [stack] SUCCEEDED','line_number':7152,'multiline':False]
['text':' If useless, just emit JSOp::True; otherwise convert |delete <expr>| to','line_number':7164,'multiline':False]
['text':' effectively |<expr>, true|.','line_number':7165,'multiline':False]
['text':'          [stack] # If shortcircuit','line_number':7194,'multiline':False]
['text':'          [stack] UNDEFINED-OR-NULL','line_number':7195,'multiline':False]
['text':'          [stack] # otherwise','line_number':7196,'multiline':False]
['text':'          [stack] SUCCEEDED','line_number':7197,'multiline':False]
['text':'          [stack] # If shortcircuit','line_number':7207,'multiline':False]
['text':'          [stack] UNDEFINED-OR-NULL','line_number':7208,'multiline':False]
['text':'          [stack] # otherwise','line_number':7209,'multiline':False]
['text':'          [stack] SUCCEEDED','line_number':7210,'multiline':False]
['text':'              [stack] # If shortcircuit','line_number':7220,'multiline':False]
['text':'              [stack] TRUE','line_number':7221,'multiline':False]
['text':'              [stack] # otherwise','line_number':7222,'multiline':False]
['text':'              [stack] SUCCEEDED','line_number':7223,'multiline':False]
['text':'              [stack]','line_number':7238,'multiline':False]
['text':'              [stack] OBJ','line_number':7242,'multiline':False]
['text':'            [stack] # if Jump','line_number':7247,'multiline':False]
['text':'            [stack] UNDEFINED-OR-NULL','line_number':7248,'multiline':False]
['text':'            [stack] # otherwise','line_number':7249,'multiline':False]
['text':'            [stack] OBJ','line_number':7250,'multiline':False]
['text':'              [stack] SUCCEEDED','line_number':7256,'multiline':False]
['text':'              [stack]','line_number':7271,'multiline':False]
['text':'              [stack] OBJ','line_number':7276,'multiline':False]
['text':'            [stack] # if Jump','line_number':7282,'multiline':False]
['text':'            [stack] UNDEFINED-OR-NULL','line_number':7283,'multiline':False]
['text':'            [stack] # otherwise','line_number':7284,'multiline':False]
['text':'            [stack] OBJ','line_number':7285,'multiline':False]
['text':'              [stack] OBJ','line_number':7291,'multiline':False]
['text':'              [stack] OBJ KEY','line_number':7296,'multiline':False]
['text':'              [stack] SUCCEEDED','line_number':7301,'multiline':False]
['text':' Special-casing of callFunction to emit bytecode that directly','line_number':7324,'multiline':False]
['text':' invokes the callee with the correct |this| object and arguments.','line_number':7325,'multiline':False]
['text':' callFunction(fun, thisArg, arg0, arg1) thus becomes:','line_number':7326,'multiline':False]
['text':' - emit lookup for fun','line_number':7327,'multiline':False]
['text':' - emit lookup for thisArg','line_number':7328,'multiline':False]
['text':' - emit lookups for arg0, arg1','line_number':7329,'multiline':False]
['text':'','line_number':7330,'multiline':False]
['text':' argc is set to the amount of actually emitted args and the','line_number':7331,'multiline':False]
['text':' emitting of args below is disabled by setting emitArgs to false.','line_number':7332,'multiline':False]
['text':' Save off the new.target value, but here emit a proper |this| for a','line_number':7375,'multiline':False]
['text':' constructing call.','line_number':7376,'multiline':False]
['text':' It's |this|, emit it.','line_number':7381,'multiline':False]
['text':' Syntax: resumeGenerator(gen, value, 'next'|'throw'|'return')','line_number':7411,'multiline':False]
['text':'              [stack] GENERATOR','line_number':7419,'multiline':False]
['text':'              [stack] GENERATOR VALUE','line_number':7425,'multiline':False]
['text':'              [stack] GENERATOR VALUE RESUMEKIND','line_number':7436,'multiline':False]
['text':'              [stack] RVAL','line_number':7441,'multiline':False]
['text':' JSScript::hasForceInterpreterOp() relies on JSOp::ForceInterpreter being','line_number':7449,'multiline':False]
['text':' the first bytecode op in the script.','line_number':7450,'multiline':False]
['text':' We're just here as a sentinel. Pass the value through directly.','line_number':7471,'multiline':False]
['text':' Only optimize when 3 arguments are passed.','line_number':7478,'multiline':False]
['text':' This will leave the object on the stack instead of pushing |undefined|,','line_number':7496,'multiline':False]
['text':' but that's fine because the self-hosted code doesn't use the return','line_number':7497,'multiline':False]
['text':' value.','line_number':7498,'multiline':False]
['text':' isConstructor = ','line_number':7624,'multiline':True]
['text':' isConstructor = ','line_number':7629,'multiline':True]
['text':' NOTE: This is a linear search, but the set of entries is quite small and','line_number':7633,'multiline':False]
['text':' this is only used for initial self-hosted parse.','line_number':7634,'multiline':False]
['text':' The function argument is expected to be a simple binding/function name.','line_number':7676,'multiline':False]
['text':' Eg. `function foo() { }; SpecialIntrinsic(foo)`','line_number':7677,'multiline':False]
['text':' The special intrinsics must follow the target functions definition. A','line_number':7685,'multiline':False]
['text':' simple assert is fine here since any hoisted function will cause a non-null','line_number':7686,'multiline':False]
['text':' value to be set here.','line_number':7687,'multiline':False]
['text':' The target function must match the most recently defined top-level','line_number':7690,'multiline':False]
['text':' self-hosted function.','line_number':7691,'multiline':False]
['text':' This is still a call node, so we must generate a stack value.','line_number':7720,'multiline':False]
['text':' Store the canonical name for instantiation.','line_number':7743,'multiline':False]
['text':' Ensure that the slot argument is fixed, this is required by the JITs.','line_number':7764,'multiline':False]
['text':' Ensure that the slot argument is fixed, this is required by the JITs.','line_number':7787,'multiline':False]
['text':' A version of emitCalleeAndThis for the optional cases:
 *   * a?.()
 *   * a?.b()
 *   * a?.["b"]()
 *   * (a?.b)()
 *   * a?.#b()
 *
 * See emitCallOrNew and emitOptionalCall for more context.
 ','line_number':7808,'multiline':True]
['text':'          [stack] CALLEE THIS','line_number':7830,'multiline':False]
['text':'          [stack] CALLEE THIS','line_number':7843,'multiline':False]
['text':'          [stack] CALLEE THIS','line_number':7855,'multiline':False]
['text':'          [stack] CALLEE THIS','line_number':7867,'multiline':False]
['text':'          [stack] CALLEE THIS','line_number':7878,'multiline':False]
['text':'          [stack] CALLEE THIS','line_number':7891,'multiline':False]
['text':'          [stack] CALLEE','line_number':7902,'multiline':False]
['text':'          [stack] CALLEE','line_number':7919,'multiline':False]
['text':'              [stack] CALLEE THIS','line_number':7926,'multiline':False]
['text':'          [stack] CALLEE THIS?','line_number':7939,'multiline':False]
['text':'        [stack] THIS','line_number':7956,'multiline':False]
['text':'        [stack] OBJ','line_number':7961,'multiline':False]
['text':'          [stack] CALLEE THIS?','line_number':7966,'multiline':False]
['text':'          [stack] # if Super','line_number':7979,'multiline':False]
['text':'          [stack] THIS? THIS KEY','line_number':7980,'multiline':False]
['text':'          [stack] # otherwise','line_number':7981,'multiline':False]
['text':'          [stack] OBJ? OBJ KEY','line_number':7982,'multiline':False]
['text':'          [stack] CALLEE THIS?','line_number':7986,'multiline':False]
['text':'          [stack] OBJ','line_number':7999,'multiline':False]
['text':'          [stack] OBJ NAME','line_number':8003,'multiline':False]
['text':'          [stack] CALLEE THIS','line_number':8007,'multiline':False]
['text':'          [stack] CALLEE','line_number':8018,'multiline':False]
['text':'          [stack] CALLEE IsConstructing','line_number':8026,'multiline':False]
['text':'              [stack] CALLEE THIS','line_number':8045,'multiline':False]
['text':' Default to using the location of the `(` itself.','line_number':8058,'multiline':False]
['text':' obj[expr]() // expression','line_number':8059,'multiline':False]
['text':'          ^  // column coord','line_number':8060,'multiline':False]
['text':' Use the position of a property access identifier.','line_number':8065,'multiline':False]
['text':'','line_number':8066,'multiline':False]
['text':' obj().aprop() // expression','line_number':8067,'multiline':False]
['text':'       ^       // column coord','line_number':8068,'multiline':False]
['text':'','line_number':8069,'multiline':False]
['text':' Note: Because of the constant folding logic in FoldElement,','line_number':8070,'multiline':False]
['text':' this case also applies for constant string properties.','line_number':8071,'multiline':False]
['text':'','line_number':8072,'multiline':False]
['text':' obj()['aprop']() // expression','line_number':8073,'multiline':False]
['text':'       ^          // column coord','line_number':8074,'multiline':False]
['text':' Use the start of callee name unless it is at a separator','line_number':8078,'multiline':False]
['text':' or has no args.','line_number':8079,'multiline':False]
['text':'','line_number':8080,'multiline':False]
['text':' 2 + obj()   // expression','line_number':8081,'multiline':False]
['text':'     ^       // column coord','line_number':8082,'multiline':False]
['text':'','line_number':8083,'multiline':False]
['text':' Use the start of callee names.','line_number':8086,'multiline':False]
['text':'            [stack] CALLEE THIS','line_number':8109,'multiline':False]
['text':'          [stack] CALLEE THIS ARG*','line_number':8114,'multiline':False]
['text':'          [stack] CALLEE THIS ARG0','line_number':8122,'multiline':False]
['text':'            [stack] CALLEE THIS','line_number':8127,'multiline':False]
['text':'          [stack] CALLEE THIS ARR','line_number':8132,'multiline':False]
['text':'
   * A modified version of emitCallOrNew that handles optional calls.
   *
   * These include the following:
   *    a?.()
   *    a.b?.()
   *    a.["b"]?.()
   *    (a?.b)?.()
   *
   * See CallOrNewEmitter for more context.
   ','line_number':8143,'multiline':True]
['text':'              [stack] CALLEE THIS','line_number':8172,'multiline':False]
['text':'            [stack] CALLEE THIS','line_number':8178,'multiline':False]
['text':' isCall = ','line_number':8183,'multiline':True]
['text':'              [stack] CALLEE THIS ARGS...','line_number':8184,'multiline':False]
['text':'              [stack] RVAL','line_number':8189,'multiline':False]
['text':' = ValueUsage::WantValue ','line_number':8197,'multiline':True]
['text':'
   * Emit callable invocation or operator new (constructor call) code.
   * First, emit code for the left operand to evaluate the callable or
   * constructable object expression.
   *
   * Then (or in a call case that has no explicit reference-base
   * object) we emit JSOp::Undefined to produce the undefined |this|
   * value required for calls (which non-strict mode functions
   * will box into the global object).
   ','line_number':8198,'multiline':True]
['text':' Calls to "forceInterpreter", "callFunction",','line_number':8216,'multiline':False]
['text':' "callContentFunction", or "resumeGenerator" in self-hosted','line_number':8217,'multiline':False]
['text':' code generate inline bytecode.','line_number':8218,'multiline':False]
['text':' Make sure that this call is correct, but don't emit any special code.','line_number':8280,'multiline':False]
['text':' Make sure that this call is correct, but don't emit any special code.','line_number':8287,'multiline':False]
['text':' Fall through','line_number':8293,'multiline':False]
['text':'              [stack] CALLEE THIS','line_number':8315,'multiline':False]
['text':'              [stack] CALLEE THIS ARGS...','line_number':8319,'multiline':False]
['text':'              [stack] RVAL','line_number':8326,'multiline':False]
['text':' This list must be kept in the same order in several places:','line_number':8333,'multiline':False]
['text':'   - The binary operators in ParseNode.h ,','line_number':8334,'multiline':False]
['text':'   - the binary operators in TokenKind.h','line_number':8335,'multiline':False]
['text':'   - the precedence list in Parser.cpp','line_number':8336,'multiline':False]
['text':' Some binary ops require special code generation (PrivateIn);','line_number':8338,'multiline':False]
['text':' these should not use BinaryOpParseNodeKindToJSOp. This table fills those','line_number':8339,'multiline':False]
['text':' slots with Nops to make the rest of the table lookup work.','line_number':8340,'multiline':False]
['text':' Ensure we don't use this to find an op for a parse node','line_number':8357,'multiline':False]
['text':' requiring special emission rules.','line_number':8358,'multiline':False]
['text':' ** is the only right-associative operator.','line_number':8365,'multiline':False]
['text':' Right-associative operator chain.','line_number':8368,'multiline':False]
['text':' Left-associative operator chain.','line_number':8383,'multiline':False]
['text':'              [stack] OBJ','line_number':8413,'multiline':False]
['text':'              [stack] OBJ BRAND  if private method','line_number':8418,'multiline':False]
['text':'              [stack] OBJ NAME   if private field or accessor.','line_number':8419,'multiline':False]
['text':'              [stack] OBJ BRAND BOOL if private method','line_number':8424,'multiline':False]
['text':'              [stack] OBJ NAME  BOOL if private field or accessor.','line_number':8425,'multiline':False]
['text':'              [stack] BOOL OBJ BRAND if private method','line_number':8430,'multiline':False]
['text':'              [stack] BOOL OBJ NAME   if private field or accessor.','line_number':8431,'multiline':False]
['text':'              [stack] BOOL','line_number':8436,'multiline':False]
['text':'
 * Special `emitTree` for Optional Chaining case.
 * Examples of this are `emitOptionalChain`, `emitDeleteOptionalChain` and
 * `emitCalleeAndThisForOptionalChain`.
 ','line_number':8443,'multiline':True]
['text':' = ValueUsage::WantValue ','line_number':8450,'multiline':True]
['text':' List of accepted ParseNodeKinds that might appear only at the beginning','line_number':8520,'multiline':False]
['text':' of an Optional Chain.','line_number':8521,'multiline':False]
['text':' For example, a taggedTemplateExpr node might occur if we have','line_number':8522,'multiline':False]
['text':' `test`?.b, with `test` as the taggedTemplateExpr ParseNode.','line_number':8523,'multiline':False]
['text':' https://tc39.es/ecma262/#sec-primary-expression','line_number':8526,'multiline':False]
['text':' https://tc39.es/ecma262/#sec-left-hand-side-expressions','line_number':8543,'multiline':False]
['text':' Handle the case of a call made on a OptionalChainParseNode.','line_number':8561,'multiline':False]
['text':' For example `(a?.b)()` and `(a?.b)?.()`.','line_number':8562,'multiline':False]
['text':' Create a new OptionalEmitter, in order to emit the right bytecode','line_number':8567,'multiline':False]
['text':' in isolation.','line_number':8568,'multiline':False]
['text':'              [stack] CALLEE THIS','line_number':8572,'multiline':False]
['text':' complete the jump if necessary. This will set both the "this" value','line_number':8576,'multiline':False]
['text':' and the "callee" value to undefined, if the callee is undefined. It','line_number':8577,'multiline':False]
['text':' does not matter much what the this value is, the function call will','line_number':8578,'multiline':False]
['text':' fail if it is not optional, and be set to undefined otherwise.','line_number':8579,'multiline':False]
['text':'              [stack] # If shortcircuit','line_number':8582,'multiline':False]
['text':'              [stack] UNDEFINED UNDEFINED','line_number':8583,'multiline':False]
['text':'              [stack] # otherwise','line_number':8584,'multiline':False]
['text':'              [stack] CALLEE THIS','line_number':8585,'multiline':False]
['text':'              [stack] VAL','line_number':8598,'multiline':False]
['text':'              [stack] # If shortcircuit','line_number':8603,'multiline':False]
['text':'              [stack] UNDEFINED','line_number':8604,'multiline':False]
['text':'              [stack] # otherwise','line_number':8605,'multiline':False]
['text':'              [stack] VAL','line_number':8606,'multiline':False]
['text':'              [stack]','line_number':8618,'multiline':False]
['text':'            [stack] OBJ','line_number':8625,'multiline':False]
['text':'            [stack] OBJ','line_number':8630,'multiline':False]
['text':'            [stack] # if Jump','line_number':8638,'multiline':False]
['text':'            [stack] UNDEFINED-OR-NULL','line_number':8639,'multiline':False]
['text':'            [stack] # otherwise','line_number':8640,'multiline':False]
['text':'            [stack] OBJ','line_number':8641,'multiline':False]
['text':'              [stack] PROP','line_number':8647,'multiline':False]
['text':'              [stack]','line_number':8659,'multiline':False]
['text':'            [stack] OBJ','line_number':8666,'multiline':False]
['text':'            [stack] OBJ','line_number':8671,'multiline':False]
['text':'            [stack] # if Jump','line_number':8679,'multiline':False]
['text':'            [stack] UNDEFINED-OR-NULL','line_number':8680,'multiline':False]
['text':'            [stack] # otherwise','line_number':8681,'multiline':False]
['text':'            [stack] OBJ','line_number':8682,'multiline':False]
['text':'              [stack] OBJ? OBJ','line_number':8688,'multiline':False]
['text':'              [stack] OBJ? OBJ KEY','line_number':8693,'multiline':False]
['text':'              [stack] ELEM','line_number':8698,'multiline':False]
['text':'              [stack] OBJ','line_number':8709,'multiline':False]
['text':'            [stack] # if Jump','line_number':8715,'multiline':False]
['text':'            [stack] UNDEFINED-OR-NULL','line_number':8716,'multiline':False]
['text':'            [stack] # otherwise','line_number':8717,'multiline':False]
['text':'            [stack] OBJ','line_number':8718,'multiline':False]
['text':'              [stack] OBJ NAME','line_number':8724,'multiline':False]
['text':'              [stack] CALLEE THIS  # if call','line_number':8728,'multiline':False]
['text':'              [stack] VALUE        # otherwise','line_number':8729,'multiline':False]
['text':'
   * JSOp::Or converts the operand on the stack to boolean, leaves the original
   * value on the stack and jumps if true; otherwise it falls into the next
   * bytecode, which pops the left operand and then evaluates the right operand.
   * The jump goes around the right operand evaluation.
   *
   * JSOp::And converts the operand on the stack to boolean and jumps if false;
   * otherwise it falls into the right operand's bytecode.
   ','line_number':8741,'multiline':True]
['text':' Left-associative operator chain: avoid too much recursion. ','line_number':8753,'multiline':True]
['text':' Emit nodes between the head and the tail. ','line_number':8783,'multiline':True]
['text':' = ValueUsage::WantValue ','line_number':8806,'multiline':True]
['text':' Using MOZ_NEVER_INLINE in here is a workaround for llvm.org/pr14047. See','line_number':8825,'multiline':False]
['text':' the comment on emitSwitch.','line_number':8826,'multiline':False]
['text':' Using MOZ_NEVER_INLINE in here is a workaround for llvm.org/pr14047. See','line_number':8842,'multiline':False]
['text':' the comment on emitSwitch.','line_number':8843,'multiline':False]
['text':' = ValueUsage::WantValue ','line_number':8863,'multiline':True]
['text':' NOTE: NotExpr of conditionNode may be unwrapped, and in that case the','line_number':8876,'multiline':False]
['text':'       negation is handled by conditionKind.','line_number':8877,'multiline':False]
['text':' Check for an object-literal property list that can be handled by the','line_number':8906,'multiline':False]
['text':' ObjLiteral writer. We ensure that for each `prop: value` pair, the key is a','line_number':8907,'multiline':False]
['text':' constant name or numeric index, there is no accessor specified, and the value','line_number':8908,'multiline':False]
['text':' can be encoded by an ObjLiteral instruction (constant number, string,','line_number':8909,'multiline':False]
['text':' boolean, null/undefined).','line_number':8910,'multiline':False]
['text':' Computed keys not OK (ObjLiteral data stores constant keys).','line_number':8929,'multiline':False]
['text':' BigIntExprs should have been lowered to computed names at parse','line_number':8935,'multiline':False]
['text':' time, and so should be excluded above.','line_number':8936,'multiline':False]
['text':' Numeric keys OK as long as they are integers and in range.','line_number':8939,'multiline':False]
['text':' JSOp::NewObject cannot accept dictionary-mode objects.','line_number':8972,'multiline':False]
['text':'                [stack] CTOR? OBJ','line_number':8994,'multiline':False]
['text':' Only handle computing field keys here: the .initializers lambda array','line_number':9001,'multiline':False]
['text':' is created elsewhere.','line_number':9002,'multiline':False]
['text':'        [stack] CTOR? OBJ ARRAY','line_number':9010,'multiline':False]
['text':'        [stack] CTOR? OBJ ARRAY KEY','line_number':9017,'multiline':False]
['text':'        [stack] CTOR? OBJ ARRAY KEY','line_number':9022,'multiline':False]
['text':'        [stack] CTOR? OBJ ARRAY','line_number':9034,'multiline':False]
['text':'        [stack] CTOR? OBJ','line_number':9039,'multiline':False]
['text':' Static class blocks are emitted as part of','line_number':9047,'multiline':False]
['text':' emitCreateMemberInitializers.','line_number':9048,'multiline':False]
['text':' Constructors are sometimes wrapped in LexicalScopeNodes. As we','line_number':9053,'multiline':False]
['text':' already handled emitting the constructor, skip it.','line_number':9054,'multiline':False]
['text':' Handle __proto__: v specially because *only* this form, and no other','line_number':9060,'multiline':False]
['text':' involving "__proto__", performs [[Prototype]] mutation.','line_number':9061,'multiline':False]
['text':'            [stack] OBJ','line_number':9063,'multiline':False]
['text':'          [stack] OBJ','line_number':9066,'multiline':False]
['text':'          [stack] OBJ PROTO','line_number':9070,'multiline':False]
['text':'          [stack] OBJ','line_number':9074,'multiline':False]
['text':'            [stack] OBJ','line_number':9082,'multiline':False]
['text':'          [stack] OBJ OBJ','line_number':9084,'multiline':False]
['text':'          [stack] OBJ OBJ VAL','line_number':9088,'multiline':False]
['text':'          [stack] OBJ','line_number':9092,'multiline':False]
['text':' Private non-static accessors are stamped onto instances from','line_number':9109,'multiline':False]
['text':' initializers; see emitCreateMemberInitializers.','line_number':9110,'multiline':False]
['text':'            [stack] CTOR? OBJ CTOR? KEY?','line_number':9120,'multiline':False]
['text':'      [stack] CTOR? OBJ CTOR? KEY VAL','line_number':9131,'multiline':False]
['text':'      [stack] CTOR? OBJ CTOR? VAL','line_number':9140,'multiline':False]
['text':' If a function name is a BigInt, then treat it as a computed name','line_number':9147,'multiline':False]
['text':' equivalent to `[ToString(B)]` for some big-int value `B`.','line_number':9148,'multiline':False]
['text':'      [stack] CTOR? OBJ CTOR? KEY VAL','line_number':9162,'multiline':False]
['text':'        [stack] CTOR? OBJ CTOR? KEY? VAL','line_number':9168,'multiline':False]
['text':'        [stack] CTOR? OBJ CTOR? KEY? FUN','line_number':9176,'multiline':False]
['text':'            [stack] CTOR? OBJ','line_number':9189,'multiline':False]
['text':'          [stack] CTOR? OBJ CTOR?','line_number':9191,'multiline':False]
['text':'        [stack] CTOR? OBJ CTOR? KEY','line_number':9196,'multiline':False]
['text':'        [stack] CTOR? OBJ CTOR? KEY','line_number':9201,'multiline':False]
['text':'          [stack] CTOR? OBJ CTOR? KEY','line_number':9206,'multiline':False]
['text':'          [stack] CTOR? OBJ CTOR? KEY VAL','line_number':9210,'multiline':False]
['text':'            [stack] CTOR? OBJ','line_number':9223,'multiline':False]
['text':' emitClass took care of constructor already.','line_number':9225,'multiline':False]
['text':'          [stack] CTOR? OBJ CTOR?','line_number':9234,'multiline':False]
['text':'          [stack] CTOR? OBJ CTOR? VAL','line_number':9239,'multiline':False]
['text':'          [stack] CTOR? OBJ','line_number':9256,'multiline':False]
['text':'          [stack] CTOR? OBJ','line_number':9262,'multiline':False]
['text':'          [stack] CTOR? OBJ METHOD','line_number':9266,'multiline':False]
['text':'          [stack] CTOR? OBJ METHOD','line_number':9270,'multiline':False]
['text':'          [stack] CTOR? OBJ','line_number':9274,'multiline':False]
['text':'          [stack] CTOR? OBJ','line_number':9278,'multiline':False]
['text':'              [stack] CTOR? OBJ','line_number':9287,'multiline':False]
['text':'            [stack] CTOR? OBJ CTOR?','line_number':9290,'multiline':False]
['text':'          [stack] CTOR? OBJ CTOR? KEY','line_number':9295,'multiline':False]
['text':'          [stack] CTOR? OBJ CTOR? KEY','line_number':9300,'multiline':False]
['text':'            [stack] CTOR? OBJ CTOR? KEY','line_number':9305,'multiline':False]
['text':'            [stack] CTOR? OBJ CTOR? KEY VAL','line_number':9309,'multiline':False]
['text':'          [stack] THIS NAME','line_number':9320,'multiline':False]
['text':'          [stack] THIS NAME FUN','line_number':9325,'multiline':False]
['text':'          [stack] THIS','line_number':9329,'multiline':False]
['text':' In self-hosted JS, we check duplication only on debug build.','line_number':9344,'multiline':False]
['text':' Self-hosted JS shouldn't contain duplicate properties.','line_number':9364,'multiline':False]
['text':' checked previously.','line_number':9383,'multiline':False]
['text':' checked previously.','line_number':9386,'multiline':False]
['text':' JSOp::Object may only be used by (top-level) run-once scripts.','line_number':9408,'multiline':False]
['text':'              [stack] OBJ','line_number':9413,'multiline':False]
['text':' If we want to squeeze out a little more performance, we could switch to the','line_number':9455,'multiline':False]
['text':' `JSOp::Object` opcode, because the exclusion set object is never exposed to','line_number':9456,'multiline':False]
['text':' the user, so it's safe to bake the object into the bytecode. But first we','line_number':9457,'multiline':False]
['text':' need to make sure this won't interfere with XDR, cf. the','line_number':9458,'multiline':False]
['text':' `RealmBehaviors::singletonsAsTemplates_` flag.','line_number':9459,'multiline':False]
['text':'              [stack] OBJ','line_number':9461,'multiline':False]
['text':'              [stack] OBJ','line_number':9490,'multiline':False]
['text':' If there are more initializers than can be represented, return invalid.','line_number':9574,'multiline':False]
['text':' Purpose of .fieldKeys:','line_number':9583,'multiline':False]
['text':' Computed field names (`["x"] = 2;`) must be ran at class-evaluation time,','line_number':9584,'multiline':False]
['text':' not object construction time. The transformation to do so is roughly as','line_number':9585,'multiline':False]
['text':' follows:','line_number':9586,'multiline':False]
['text':'','line_number':9587,'multiline':False]
['text':' class C {','line_number':9588,'multiline':False]
['text':'   [keyExpr] = valueExpr;','line_number':9589,'multiline':False]
['text':' }','line_number':9590,'multiline':False]
['text':' -->','line_number':9591,'multiline':False]
['text':' let .fieldKeys = [keyExpr];','line_number':9592,'multiline':False]
['text':' let .initializers = [','line_number':9593,'multiline':False]
['text':'   () => {','line_number':9594,'multiline':False]
['text':'     this[.fieldKeys[0]] = valueExpr;','line_number':9595,'multiline':False]
['text':'   }','line_number':9596,'multiline':False]
['text':' ];','line_number':9597,'multiline':False]
['text':' class C {','line_number':9598,'multiline':False]
['text':'   constructor() {','line_number':9599,'multiline':False]
['text':'     .initializers[0]();','line_number':9600,'multiline':False]
['text':'   }','line_number':9601,'multiline':False]
['text':' }','line_number':9602,'multiline':False]
['text':'','line_number':9603,'multiline':False]
['text':' BytecodeEmitter::emitCreateFieldKeys does `let .fieldKeys = [...];`','line_number':9604,'multiline':False]
['text':' BytecodeEmitter::emitPropertyList fills in the elements of the array.','line_number':9605,'multiline':False]
['text':' See GeneralParser::fieldInitializer for the `this[.fieldKeys[0]]` part.','line_number':9606,'multiline':False]
['text':'              [stack] ARRAY','line_number':9632,'multiline':False]
['text':'              [stack] ARRAY','line_number':9637,'multiline':False]
['text':'              [stack]','line_number':9642,'multiline':False]
['text':' FieldPlacement::Instance','line_number':9665,'multiline':False]
['text':'                [stack] HOMEOBJ HERITAGE?','line_number':9666,'multiline':False]
['text':'','line_number':9667,'multiline':False]
['text':' FieldPlacement::Static','line_number':9668,'multiline':False]
['text':'                [stack] CTOR HOMEOBJ','line_number':9669,'multiline':False]
['text':'              [stack] HOMEOBJ HERITAGE? ARRAY','line_number':9684,'multiline':False]
['text':' or:','line_number':9685,'multiline':False]
['text':'              [stack] CTOR HOMEOBJ ARRAY','line_number':9686,'multiline':False]
['text':' Private accessors could be used in the field initializers, so make sure','line_number':9690,'multiline':False]
['text':' accessor initializers appear earlier in the .initializers array so they','line_number':9691,'multiline':False]
['text':' run first. Static private methods are not initialized using initializers','line_number':9692,'multiline':False]
['text':' (emitPropertyList emits bytecode to stamp them onto the constructor), so','line_number':9693,'multiline':False]
['text':' skip this step if isStatic.','line_number':9694,'multiline':False]
['text':'            [stack] HOMEOBJ HERITAGE? ARRAY LAMBDA','line_number':9712,'multiline':False]
['text':' or:','line_number':9713,'multiline':False]
['text':'            [stack] CTOR HOMEOBJ ARRAY LAMBDA','line_number':9714,'multiline':False]
['text':'          [stack] HOMEOBJ HERITAGE? ARRAY LAMBDA','line_number':9720,'multiline':False]
['text':' or:','line_number':9721,'multiline':False]
['text':'          [stack] CTOR HOMEOBJ ARRAY LAMBDA','line_number':9722,'multiline':False]
['text':'            [stack] HOMEOBJ HERITAGE? ARRAY','line_number':9727,'multiline':False]
['text':' or:','line_number':9728,'multiline':False]
['text':'            [stack] CTOR HOMEOBJ ARRAY','line_number':9729,'multiline':False]
['text':'              [stack] HOMEOBJ HERITAGE?','line_number':9735,'multiline':False]
['text':' or:','line_number':9736,'multiline':False]
['text':'              [stack] CTOR HOMEOBJ','line_number':9737,'multiline':False]
['text':' No initializer is emitted for private methods.','line_number':9756,'multiline':False]
['text':'            [stack] HOMEOBJ HERITAGE? ARRAY','line_number':9761,'multiline':False]
['text':' or:','line_number':9762,'multiline':False]
['text':'            [stack] CTOR HOMEOBJ ARRAY','line_number':9763,'multiline':False]
['text':' Synthesize a name for the lexical variable that will store the','line_number':9767,'multiline':False]
['text':' private method body.','line_number':9768,'multiline':False]
['text':' Emit the private method body and store it as a lexical var.','line_number':9781,'multiline':False]
['text':'            [stack] HOMEOBJ HERITAGE? ARRAY METHOD','line_number':9783,'multiline':False]
['text':' or:','line_number':9784,'multiline':False]
['text':'            [stack] CTOR HOMEOBJ ARRAY METHOD','line_number':9785,'multiline':False]
['text':' The private method body needs to access the home object,','line_number':9788,'multiline':False]
['text':' and the CE knows where that is on the stack.','line_number':9789,'multiline':False]
['text':'            [stack] HOMEOBJ HERITAGE? ARRAY METHOD','line_number':9791,'multiline':False]
['text':' or:','line_number':9792,'multiline':False]
['text':'            [stack] CTOR HOMEOBJ ARRAY METHOD','line_number':9793,'multiline':False]
['text':'            [stack] HOMEOBJ HERITAGE? ARRAY METHOD','line_number':9797,'multiline':False]
['text':' or:','line_number':9798,'multiline':False]
['text':'            [stack] CTOR HOMEOBJ ARRAY METHOD','line_number':9799,'multiline':False]
['text':'            [stack] HOMEOBJ HERITAGE? ARRAY','line_number':9803,'multiline':False]
['text':' or:','line_number':9804,'multiline':False]
['text':'            [stack] CTOR HOMEOBJ ARRAY','line_number':9805,'multiline':False]
['text':'            [stack] HOMEOBJ HERITAGE? ARRAY','line_number':9811,'multiline':False]
['text':' or:','line_number':9812,'multiline':False]
['text':'            [stack] CTOR HOMEOBJ ARRAY','line_number':9813,'multiline':False]
['text':' Store the emitted initializer function into the .initializers array.','line_number':9817,'multiline':False]
['text':'            [stack] HOMEOBJ HERITAGE? ARRAY','line_number':9819,'multiline':False]
['text':' or:','line_number':9820,'multiline':False]
['text':'            [stack] CTOR HOMEOBJ ARRAY','line_number':9821,'multiline':False]
['text':' Emit the synthesized initializer function.','line_number':9832,'multiline':False]
['text':'              [stack]','line_number':9839,'multiline':False]
['text':'              [stack]','line_number':9850,'multiline':False]
['text':'              [stack]','line_number':9854,'multiline':False]
['text':'              [stack]','line_number':9858,'multiline':False]
['text':'              [stack] THIS','line_number':9863,'multiline':False]
['text':'              [stack] THIS NAME','line_number':9867,'multiline':False]
['text':'              [stack] THIS NAME METHOD','line_number':9871,'multiline':False]
['text':'          [stack] THIS','line_number':9879,'multiline':False]
['text':'          [stack] THIS','line_number':9885,'multiline':False]
['text':'          [stack] THIS NAME','line_number':9889,'multiline':False]
['text':'          [stack] THIS NAME FUN','line_number':9895,'multiline':False]
['text':'          [stack] THIS','line_number':9899,'multiline':False]
['text':'        [stack] THIS','line_number':9907,'multiline':False]
['text':'        [stack] THIS','line_number':9912,'multiline':False]
['text':' Pop remaining THIS.','line_number':9921,'multiline':False]
['text':'              [stack]','line_number':9923,'multiline':False]
['text':'              [stack]','line_number':9928,'multiline':False]
['text':'              [stack] HOMEOBJ HERITAGE? ARRAY FUN','line_number':9936,'multiline':False]
['text':' or:','line_number':9937,'multiline':False]
['text':'              [stack] CTOR HOMEOBJ ARRAY FUN','line_number':9938,'multiline':False]
['text':' If we found a non-arrow / non-constructor we were never allowed to','line_number':9954,'multiline':False]
['text':' expect fields in the first place.','line_number':9955,'multiline':False]
['text':' Stamp the class's private brand onto the instance.  We use a getter','line_number':9973,'multiline':False]
['text':' instead of a field to save a slot per object, but the getter is never','line_number':9974,'multiline':False]
['text':' called, so it doesn't matter what function we use.','line_number':9975,'multiline':False]
['text':' This is guaranteed to run after super(), so we don't need TDZ checks.','line_number':9977,'multiline':False]
['text':'            [stack] THIS','line_number':9979,'multiline':False]
['text':'            [stack] THIS BRAND','line_number':9983,'multiline':False]
['text':'            [stack] THIS BRAND GETTER','line_number':9987,'multiline':False]
['text':'            [stack] THIS','line_number':9991,'multiline':False]
['text':'            [stack]','line_number':9995,'multiline':False]
['text':'              [stack] ARRAY','line_number':10006,'multiline':False]
['text':' We Dup to keep the array around (it is consumed in the bytecode','line_number':10012,'multiline':False]
['text':' below) for next iterations of this loop, except for the last','line_number':10013,'multiline':False]
['text':' iteration, which avoids an extra Pop at the end of the loop.','line_number':10014,'multiline':False]
['text':'          [stack] ARRAY ARRAY','line_number':10016,'multiline':False]
['text':'            [stack] ARRAY? ARRAY INDEX','line_number':10022,'multiline':False]
['text':'            [stack] ARRAY? FUNC','line_number':10027,'multiline':False]
['text':' This is guaranteed to run after super(), so we don't need TDZ checks.','line_number':10031,'multiline':False]
['text':'            [stack] ARRAY? FUNC THIS','line_number':10033,'multiline':False]
['text':'            [stack] ARRAY? RVAL','line_number':10038,'multiline':False]
['text':'            [stack] ARRAY?','line_number':10043,'multiline':False]
['text':'              [stack] CTOR ARRAY','line_number':10064,'multiline':False]
['text':' We Dup to keep the array around (it is consumed in the bytecode below)','line_number':10071,'multiline':False]
['text':' for next iterations of this loop, except for the last iteration, which','line_number':10072,'multiline':False]
['text':' avoids an extra Pop at the end of the loop.','line_number':10073,'multiline':False]
['text':'          [stack] CTOR ARRAY ARRAY','line_number':10075,'multiline':False]
['text':'            [stack] CTOR ARRAY? ARRAY INDEX','line_number':10081,'multiline':False]
['text':'            [stack] CTOR ARRAY? FUNC','line_number':10086,'multiline':False]
['text':'            [stack] CTOR ARRAY? FUNC CTOR','line_number':10091,'multiline':False]
['text':'            [stack] CTOR ARRAY? RVAL','line_number':10096,'multiline':False]
['text':'            [stack] CTOR ARRAY?','line_number':10101,'multiline':False]
['text':' Overwrite |.staticInitializers| and |.staticFieldKeys| with undefined to','line_number':10106,'multiline':False]
['text':' avoid keeping the arrays alive indefinitely.','line_number':10107,'multiline':False]
['text':'            [stack] ENV? VAL?','line_number':10111,'multiline':False]
['text':'            [stack] ENV? VAL? UNDEFINED','line_number':10116,'multiline':False]
['text':'            [stack] VAL','line_number':10121,'multiline':False]
['text':'            [stack]','line_number':10126,'multiline':False]
['text':' Using MOZ_NEVER_INLINE in here is a workaround for llvm.org/pr14047. See','line_number':10156,'multiline':False]
['text':' the comment on emitSwitch.','line_number':10157,'multiline':False]
['text':' Note: this method uses the ObjLiteralWriter and emits ObjLiteralStencil','line_number':10159,'multiline':False]
['text':' objects into the GCThingList, which will evaluate them into real GC objects','line_number':10160,'multiline':False]
['text':' during JSScript::fullyInitFromEmitter. Eventually we want OBJLITERAL to be','line_number':10161,'multiline':False]
['text':' a real opcode, but for now, performance constraints limit us to evaluating','line_number':10162,'multiline':False]
['text':' object literals at the end of parse, when we're allowed to allocate GC','line_number':10163,'multiline':False]
['text':' things.','line_number':10164,'multiline':False]
['text':'','line_number':10165,'multiline':False]
['text':' There are four cases here, in descending order of preference:','line_number':10166,'multiline':False]
['text':'','line_number':10167,'multiline':False]
['text':' 1. The list of property names is "normal" and constant (no computed','line_number':10168,'multiline':False]
['text':'    values, no integer indices), the values are all simple constants','line_number':10169,'multiline':False]
['text':'    (numbers, booleans, strings), *and* this occurs in a run-once','line_number':10170,'multiline':False]
['text':'    (singleton) context. In this case, we can emit ObjLiteral','line_number':10171,'multiline':False]
['text':'    instructions to build an object with values, and the object will be','line_number':10172,'multiline':False]
['text':'    attached to a JSOp::Object opcode, whose semantics are for the backend','line_number':10173,'multiline':False]
['text':'    to simply steal the object from the script.','line_number':10174,'multiline':False]
['text':'','line_number':10175,'multiline':False]
['text':' 2. The list of property names is "normal" and constant as above, *and* this','line_number':10176,'multiline':False]
['text':'    occurs in a run-once (singleton) context, but some values are complex','line_number':10177,'multiline':False]
['text':'    (computed expressions, sub-objects, functions, etc.). In this case, we','line_number':10178,'multiline':False]
['text':'    can still use JSOp::Object (because singleton context), but the object','line_number':10179,'multiline':False]
['text':'    has |undefined| property values and InitProp ops are emitted to set the','line_number':10180,'multiline':False]
['text':'    values.','line_number':10181,'multiline':False]
['text':'','line_number':10182,'multiline':False]
['text':' 3. The list of property names is "normal" and constant as above, but this','line_number':10183,'multiline':False]
['text':'    occurs in a non-run-once (non-singleton) context. In this case, we can','line_number':10184,'multiline':False]
['text':'    use the ObjLiteral functionality to describe an *empty* object (all','line_number':10185,'multiline':False]
['text':'    values left undefined) with the right fields, which will become a','line_number':10186,'multiline':False]
['text':'    JSOp::NewObject opcode using this template object to speed the creation','line_number':10187,'multiline':False]
['text':'    of the object each time it executes (stealing its shape, etc.). The','line_number':10188,'multiline':False]
['text':'    emitted bytecode still needs InitProp ops to set the values in this','line_number':10189,'multiline':False]
['text':'    case.','line_number':10190,'multiline':False]
['text':'','line_number':10191,'multiline':False]
['text':' 4. Any other case. As a fallback, we use NewInit to create a new, empty','line_number':10192,'multiline':False]
['text':'    object (i.e., `{}`) and then emit bytecode to initialize its properties','line_number':10193,'multiline':False]
['text':'    one-by-one.','line_number':10194,'multiline':False]
['text':'                [stack]','line_number':10201,'multiline':False]
['text':'','line_number':10202,'multiline':False]
['text':' Case 1 or 2.','line_number':10210,'multiline':False]
['text':' Case 3.','line_number':10213,'multiline':False]
['text':' Use an ObjLiteral op. This will record ObjLiteral insns in the','line_number':10217,'multiline':False]
['text':' objLiteralWriter's buffer and add a fixup to the list of ObjLiteral','line_number':10218,'multiline':False]
['text':' fixups so that at GC-publish time at the end of parse, the full (case 1','line_number':10219,'multiline':False]
['text':' or 2) or template-without-values (case 3) object can be allocated and','line_number':10220,'multiline':False]
['text':' the bytecode can be patched to refer to it.','line_number':10221,'multiline':False]
['text':'            [stack] OBJ','line_number':10223,'multiline':False]
['text':' Put the ObjectEmitter in the right state. This tells it that there will','line_number':10226,'multiline':False]
['text':' already be an object on the stack as a result of the (eventual)','line_number':10227,'multiline':False]
['text':' NewObject or Object op, and prepares it to emit values if needed.','line_number':10228,'multiline':False]
['text':'            [stack] OBJ','line_number':10230,'multiline':False]
['text':' Case 2 or 3 above: we still need to emit bytecode to fill in the','line_number':10234,'multiline':False]
['text':' object's property values.','line_number':10235,'multiline':False]
['text':'          [stack] OBJ','line_number':10237,'multiline':False]
['text':' Case 4 above: no ObjLiteral use, just bytecode to build the object from','line_number':10242,'multiline':False]
['text':' scratch.','line_number':10243,'multiline':False]
['text':'            [stack] OBJ','line_number':10245,'multiline':False]
['text':'            [stack] OBJ','line_number':10249,'multiline':False]
['text':'              [stack] OBJ','line_number':10255,'multiline':False]
['text':' Emit JSOp::Object if the array consists entirely of primitive values and we','line_number':10263,'multiline':False]
['text':' are in a singleton context.','line_number':10264,'multiline':False]
['text':'
   * Emit code for [a, b, c] that is equivalent to constructing a new
   * array and in source order evaluating each element value and adding
   * it to the array, without invoking latent setters.  We use the
   * JSOp::NewInit and JSOp::InitElemArray bytecodes to ignore setters and
   * to avoid dup'ing and popping the array as each element is added, as
   * JSOp::SetElem/JSOp::SetProp would do.
   ','line_number':10274,'multiline':True]
['text':' Array literal's length is limited to NELEMENTS_LIMIT in parser.','line_number':10290,'multiline':False]
['text':' For arrays with spread, this is a very pessimistic allocation, the','line_number':10301,'multiline':False]
['text':' minimum possible final size.','line_number':10302,'multiline':False]
['text':'              [stack] ARRAY','line_number':10304,'multiline':False]
['text':'          [stack] ARRAY INDEX','line_number':10315,'multiline':False]
['text':'          [stack] ARRAY INDEX? VALUE','line_number':10338,'multiline':False]
['text':'          [stack] ARRAY INDEX NEXT ITER','line_number':10344,'multiline':False]
['text':'          [stack] INDEX NEXT ITER ARRAY','line_number':10348,'multiline':False]
['text':'          [stack] NEXT ITER ARRAY INDEX','line_number':10352,'multiline':False]
['text':'          [stack] ARRAY INDEX','line_number':10356,'multiline':False]
['text':'            [stack] ARRAY','line_number':10372,'multiline':False]
['text':' Left-hand sides are either simple names or destructuring patterns.','line_number':10442,'multiline':False]
['text':'            [stack]','line_number':10448,'multiline':False]
['text':'          [stack] DEFAULT','line_number':10451,'multiline':False]
['text':'            [stack] ARG','line_number':10458,'multiline':False]
['text':'          [stack] ARG','line_number':10462,'multiline':False]
['text':'        [stack]','line_number':10472,'multiline':False]
['text':'        [stack]','line_number':10476,'multiline':False]
['text':'        [stack]','line_number':10480,'multiline':False]
['text':'        [stack]','line_number':10486,'multiline':False]
['text':'        [stack]','line_number':10497,'multiline':False]
['text':'        [stack]','line_number':10501,'multiline':False]
['text':'        [stack]','line_number':10505,'multiline':False]
['text':'        [stack]','line_number':10509,'multiline':False]
['text':'        [stack]','line_number':10513,'multiline':False]
['text':'        [stack]','line_number':10518,'multiline':False]
['text':'        [stack]','line_number':10522,'multiline':False]
['text':'        [stack]','line_number':10526,'multiline':False]
['text':'          [stack]','line_number':10536,'multiline':False]
['text':'          [stack]','line_number':10540,'multiline':False]
['text':'          [stack]','line_number':10545,'multiline':False]
['text':'            [stack]','line_number':10554,'multiline':False]
['text':'                [stack]','line_number':10565,'multiline':False]
['text':' A special name must be slotful, either on the frame or on the','line_number':10569,'multiline':False]
['text':' call environment.','line_number':10570,'multiline':False]
['text':'        [stack]','line_number':10575,'multiline':False]
['text':'        [stack] THIS/ARGUMENTS','line_number':10579,'multiline':False]
['text':'        [stack] THIS/ARGUMENTS','line_number':10583,'multiline':False]
['text':'        [stack]','line_number':10587,'multiline':False]
['text':' Do nothing if the function doesn't have an arguments binding.','line_number':10594,'multiline':False]
['text':'            [stack]','line_number':10599,'multiline':False]
['text':' Do nothing if the function doesn't have a this-binding (this','line_number':10604,'multiline':False]
['text':' happens for instance if it doesn't use this/eval or if it's an','line_number':10605,'multiline':False]
['text':' arrow function).','line_number':10606,'multiline':False]
['text':' Do nothing if the function doesn't implicitly return a promise result.','line_number':10615,'multiline':False]
['text':'            [stack]','line_number':10620,'multiline':False]
['text':' The caller has pushed the RHS to the top of the stack. Assert that the','line_number':10637,'multiline':False]
['text':' binding can be initialized without a binding object on the stack, and that','line_number':10638,'multiline':False]
['text':' no BIND[G]NAME ops were emitted.','line_number':10639,'multiline':False]
['text':' TODO: Add a new bytecode to create private names.','line_number':10675,'multiline':False]
['text':'              [stack] HERITAGE NEWPRIVATENAME','line_number':10678,'multiline':False]
['text':' Push `undefined` as `this` parameter for call.','line_number':10682,'multiline':False]
['text':'              [stack] HERITAGE NEWPRIVATENAME UNDEFINED','line_number':10684,'multiline':False]
['text':'              [stack] HERITAGE NEWPRIVATENAME UNDEFINED NAME','line_number':10689,'multiline':False]
['text':'              [stack] HERITAGE PRIVATENAME','line_number':10695,'multiline':False]
['text':' Add a binding for #name => privatename','line_number':10699,'multiline':False]
['text':'              [stack] HERITAGE PRIVATENAME','line_number':10701,'multiline':False]
['text':' Pop Private name off the stack.','line_number':10705,'multiline':False]
['text':'              [stack] HERITAGE','line_number':10707,'multiline':False]
['text':' Non-static private methods' private names are optimized away.','line_number':10732,'multiline':False]
['text':' We don't make a private name for every optimized method, but we need one','line_number':10752,'multiline':False]
['text':' private name per class, the `.privateBrand`.','line_number':10753,'multiline':False]
['text':' This follows ES6 14.5.14 (ClassDefinitionEvaluation) and ES6 14.5.15','line_number':10762,'multiline':False]
['text':' (BindingClassDeclarationEvaluation).','line_number':10763,'multiline':False]
['text':' = ClassNameKind::BindingName ','line_number':10766,'multiline':True]
['text':' = TaggedParserAtomIndex::null() ','line_number':10768,'multiline':True]
['text':' If |nameKind != ClassNameKind::ComputedName|','line_number':10776,'multiline':False]
['text':'                [stack]','line_number':10777,'multiline':False]
['text':' Else','line_number':10778,'multiline':False]
['text':'                [stack] NAME','line_number':10779,'multiline':False]
['text':'            [stack]','line_number':10798,'multiline':False]
['text':'            [stack] HERITAGE','line_number':10812,'multiline':False]
['text':' The class body scope holds any private names. Those mustn't be visible in','line_number':10817,'multiline':False]
['text':' the heritage expression and hence the scope must be emitted after the','line_number':10818,'multiline':False]
['text':' heritage expression.','line_number':10819,'multiline':False]
['text':'            [stack] HERITAGE','line_number':10822,'multiline':False]
['text':' The spec does not say anything about private brands being symbols.  It's','line_number':10826,'multiline':False]
['text':' an implementation detail. So we can give the special private brand','line_number':10827,'multiline':False]
['text':' symbol any description we want and users won't normally see it. For','line_number':10828,'multiline':False]
['text':' debugging, use the class name.','line_number':10829,'multiline':False]
['text':'            [stack] HERITAGE HOMEOBJ','line_number':10845,'multiline':False]
['text':'            [stack] HOMEOBJ','line_number':10850,'multiline':False]
['text':' Stack currently has HOMEOBJ followed by optional HERITAGE. When HERITAGE','line_number':10855,'multiline':False]
['text':' is not used, an implicit value of %FunctionPrototype% is implied.','line_number':10856,'multiline':False]
['text':' See |Parser::classMember(...)| for the reason why |.initializers| is','line_number':10858,'multiline':False]
['text':' created within its own scope.','line_number':10859,'multiline':False]
['text':' The constructor scope should only contain the |.initializers| binding.','line_number':10865,'multiline':False]
['text':' As an optimization omit the |.initializers| binding when no instance','line_number':10877,'multiline':False]
['text':' fields or private methods are present.','line_number':10878,'multiline':False]
['text':' Any class with field initializers will have a constructor','line_number':10889,'multiline':False]
['text':' The |.initializers| binding is never emitted when in self-hosting mode.','line_number':10898,'multiline':False]
['text':' HERITAGE is consumed inside emitFunction.','line_number':10904,'multiline':False]
['text':'              [stack] HOMEOBJ CTOR','line_number':10911,'multiline':False]
['text':'              [stack] CTOR HOMEOBJ','line_number':10921,'multiline':False]
['text':'              [stack] CTOR HOMEOBJ','line_number':10938,'multiline':False]
['text':'              [stack] CTOR','line_number':10943,'multiline':False]
['text':'              [stack] CTOR','line_number':10948,'multiline':False]
['text':'              [stack] # class declaration','line_number':10953,'multiline':False]
['text':'              [stack]','line_number':10954,'multiline':False]
['text':'              [stack] # class expression','line_number':10955,'multiline':False]
['text':'              [stack] CTOR','line_number':10956,'multiline':False]
['text':' = ValueUsage::WantValue ','line_number':10994,'multiline':True]
['text':' = EMIT_LINENOTE ','line_number':10995,'multiline':True]
['text':' Emit notes to tell the current bytecode's source line number.
     However, a couple trees require special treatment; see the
     relevant emitter functions for details. ','line_number':11001,'multiline':True]
['text':' Ensure that the column of the 'break' is set properly.','line_number':11054,'multiline':False]
['text':' Ensure that the column of the 'continue' is set properly.','line_number':11068,'multiline':False]
['text':'        [stack] THIS','line_number':11338,'multiline':False]
['text':'        [stack] OBJ','line_number':11343,'multiline':False]
['text':'          [stack] PROP','line_number':11348,'multiline':False]
['text':'          [stack] # if Super','line_number':11362,'multiline':False]
['text':'          [stack] THIS KEY','line_number':11363,'multiline':False]
['text':'          [stack] # otherwise','line_number':11364,'multiline':False]
['text':'          [stack] OBJ KEY','line_number':11365,'multiline':False]
['text':'          [stack] ELEM','line_number':11369,'multiline':False]
['text':'          [stack] OBJ','line_number':11381,'multiline':False]
['text':'          [stack] OBJ NAME','line_number':11385,'multiline':False]
['text':'          [stack] VALUE','line_number':11389,'multiline':False]
['text':' Non-gettable source notes such as column/lineno and debugger should not be','line_number':11618,'multiline':False]
['text':' emitted for prologue / self-hosted.','line_number':11619,'multiline':False]
['text':'
   * Compute delta from the last annotated bytecode's offset.  If it's too
   * big to fit in sn, allocate one or more xdelta notes and reset sn.
   ','line_number':11626,'multiline':True]
['text':' Hand over the ImmutableScriptData instance generated by BCE.','line_number':11700,'multiline':False]
['text':' De-duplicate the bytecode within the runtime.','line_number':11707,'multiline':False]
['text':' Update flags specific to functions.','line_number':11715,'multiline':False]
