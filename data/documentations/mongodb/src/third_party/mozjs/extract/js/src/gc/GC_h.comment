['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]
['text':'
 * JS engine garbage collector API.
 ','line_number':7,'multiline':True]
['text':'
 * Map from C++ type to alloc kind for non-object types. JSObject does not have
 * a 1:1 mapping, so must use Arena::thingSize.
 *
 * The AllocKind is available as MapTypeToFinalizeKind<SomeType>::kind.
 ','line_number':39,'multiline':True]
['text':' namespace gc ','line_number':56,'multiline':True]
['text':' Trace roots but don't evict the nursery first; used from DumpHeap.','line_number':60,'multiline':False]
['text':' Functions for managing cross compartment gray pointers. ','line_number':67,'multiline':True]
['text':'
 * This function calls |zoneCallback| on every zone, |realmCallback| on
 * every realm, |arenaCallback| on every in-use arena, and |cellCallback|
 * on every in-use cell in the GC heap.
 *
 * Note that no read barrier is triggered on the cells passed to cellCallback,
 * so no these pointers must not escape the callback.
 ','line_number':85,'multiline':True]
['text':'
 * This function is like IterateHeapUnbarriered, but does it for a single zone.
 ','line_number':99,'multiline':True]
['text':'
 * Invoke chunkCallback on every in-use chunk.
 ','line_number':107,'multiline':True]
['text':'
 * Invoke scriptCallback on every in-use script for the given realm or for all
 * realms if it is null. The scripts may or may not have bytecode.
 ','line_number':116,'multiline':True]
['text':'
 * Merge all contents of source into target. This can only be used if source is
 * the only realm in its zone.
 ','line_number':132,'multiline':True]
['text':' Check that write barriers have been used correctly. See gc/Verifier.cpp. ','line_number':146,'multiline':True]
['text':'
 * Instances of this class prevent GC from happening while they are live. If an
 * allocation causes a heap threshold to be exceeded, no GC will be performed
 * and the allocation will succeed. Allocation may still fail for other reasons.
 *
 * Use of this class is highly discouraged, since without GC system memory can
 * become exhausted and this can cause crashes at places where we can't handle
 * allocation failure.
 *
 * Use of this is permissible in situations where it would be impossible (or at
 * least very difficult) to tolerate GC and where only a fixed number of objects
 * are allocated, such as:
 *
 *  - error reporting
 *  - JIT bailout handling
 *  - brain transplants (JSObject::swap)
 *  - debugging utilities not exposed to the browser
 *
 * This works by updating the |JSContext::suppressGC| counter which is checked
 * at the start of GC.
 ','line_number':161,'multiline':True]
['text':' namespace gc ','line_number':193,'multiline':True]
['text':' Use this to avoid assertions when manipulating the wrapper map. ','line_number':195,'multiline':True]
['text':' namespace js ','line_number':214,'multiline':True]
['text':' gc_GC_h ','line_number':216,'multiline':True]
