['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]
['text':' RematerializedFrame: An optimized frame that has been rematerialized with','line_number':41,'multiline':False]
['text':' values read out of Snapshots.','line_number':42,'multiline':False]
['text':'','line_number':43,'multiline':False]
['text':' If the Debugger API tries to inspect or modify an IonMonkey frame, much of','line_number':44,'multiline':False]
['text':' the information it expects to find in a frame is missing: function calls may','line_number':45,'multiline':False]
['text':' have been inlined, variables may have been optimized out, and so on. So when','line_number':46,'multiline':False]
['text':' this happens, SpiderMonkey builds one or more Rematerialized frames from the','line_number':47,'multiline':False]
['text':' IonMonkey frame, using the snapshot metadata built by Ion to reconstruct the','line_number':48,'multiline':False]
['text':' missing parts. The Rematerialized frames are now the authority on the state','line_number':49,'multiline':False]
['text':' of those frames, and the Ion frame is ignored: stack iterators ignore the Ion','line_number':50,'multiline':False]
['text':' frame, producing the Rematerialized frames in their stead; and when control','line_number':51,'multiline':False]
['text':' returns to the Ion frame, we pop it, rebuild Baseline frames from the','line_number':52,'multiline':False]
['text':' Rematerialized frames, and resume execution in Baseline.','line_number':53,'multiline':False]
['text':' See DebugScopes::updateLiveScopes.','line_number':55,'multiline':False]
['text':' Propagated to the Baseline frame once this is popped.','line_number':58,'multiline':False]
['text':' Has an initial environment has been pushed on the environment chain for','line_number':61,'multiline':False]
['text':' function frames that need a CallObject or eval frames that need a','line_number':62,'multiline':False]
['text':' VarEnvironmentObject?','line_number':63,'multiline':False]
['text':' Is this frame constructing?','line_number':66,'multiline':False]
['text':' If true, this frame has been on the stack when','line_number':69,'multiline':False]
['text':' |js::SavedStacks::saveCurrentStack| was called, and so there is a','line_number':70,'multiline':False]
['text':' |js::SavedFrame| object cached for this frame.','line_number':71,'multiline':False]
['text':' The fp of the top frame associated with this possibly inlined frame.','line_number':74,'multiline':False]
['text':' The bytecode at the time of rematerialization.','line_number':77,'multiline':False]
['text':' RematerializedFrame are allocated on non-GC heap, so use GCVector and','line_number':101,'multiline':False]
['text':' UniquePtr to ensure they are traced and cleaned up correctly.','line_number':102,'multiline':False]
['text':' Rematerialize all remaining frames pointed to by |iter| into |frames|','line_number':105,'multiline':False]
['text':' in older-to-younger order, e.g., frames[0] is the oldest frame.','line_number':106,'multiline':False]
['text':' namespace jit','line_number':227,'multiline':False]
['text':' namespace js','line_number':228,'multiline':False]
['text':' jit_RematerializedFrame_h','line_number':230,'multiline':False]
