['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]
['text':' Class ReadableStream. ','line_number':7,'multiline':True]
['text':' mozilla::Maybe, mozilla::Some','line_number':11,'multiline':False]
['text':' JS_ReportErrorNumberASCII','line_number':13,'multiline':False]
['text':' JSProto_ReadableStream','line_number':14,'multiline':False]
['text':' js::NewDenseFullyAllocatedArray','line_number':16,'multiline':False]
['text':' JS_STREAMS_CLASS_SPEC','line_number':17,'multiline':False]
['text':' js::MakeSizeAlgorithmFromSizeFunction, js::ValidateAndNormalizeHighWaterMark, js::ReturnPromiseRejectedWithPendingError','line_number':18,'multiline':False]
['text':' js::ReadableStream{,Default}Controller, js::ReadableByteStreamController','line_number':19,'multiline':False]
['text':' js::SetUpReadableStreamDefaultControllerFromUnderlyingSource','line_number':20,'multiline':False]
['text':' js::ReadableStreamCancel','line_number':21,'multiline':False]
['text':' js::ReadableStream{PipeTo,Tee}','line_number':22,'multiline':False]
['text':' js::CreateReadableStream{BYOB,Default}Reader, js::ForAuthorCodeBool','line_number':23,'multiline':False]
['text':' js::WritableStream','line_number':24,'multiline':False]
['text':' JS::CallArgs{,FromVp}','line_number':25,'multiline':False]
['text':' JSCLASS_PRIVATE_IS_NSISUPPORTS, JSCLASS_HAS_PRIVATE, JS_NULL_CLASS_OPS','line_number':26,'multiline':False]
['text':' JS::ToBoolean','line_number':27,'multiline':False]
['text':' js::GetErrorMessage, JSMSG_*','line_number':28,'multiline':False]
['text':' JS{Function,Property}Spec, JS_FN, JS_PSG, JS_{FS,PS}_END','line_number':29,'multiline':False]
['text':' JS::Handle, JS::Rooted, js::CanGC','line_number':30,'multiline':False]
['text':' JS::ReadableStream{Mode,UnderlyingSource}','line_number':31,'multiline':False]
['text':' JS::Value','line_number':32,'multiline':False]
['text':' JSContext','line_number':33,'multiline':False]
['text':' js::GetPrototypeFromBuiltinConstructor','line_number':34,'multiline':False]
['text':' js::GetProperty','line_number':35,'multiline':False]
['text':' js::PlainObject','line_number':36,'multiline':False]
['text':' JSAtomState, JSRuntime','line_number':37,'multiline':False]
['text':' js::EqualStrings, js::ToString','line_number':38,'multiline':False]
['text':' js::UnwrapAndTypeCheck{Argument,This,Value}','line_number':40,'multiline':False]
['text':' js::NewBuiltinClassInstance','line_number':41,'multiline':False]
['text':' js::ThrowIfNotConstructing','line_number':42,'multiline':False]
['text':'** 3.2. Class ReadableStream *********************************************','line_number':74,'multiline':True]
['text':' = nullptr ','line_number':88,'multiline':True]
['text':' = nullptr ','line_number':89,'multiline':True]
['text':'*
 * Streams spec, 3.2.3. new ReadableStream(underlyingSource = {}, strategy = {})
 ','line_number':103,'multiline':True]
['text':' Implicit in the spec: argument default values.','line_number':113,'multiline':False]
['text':' Implicit in the spec: Set this to','line_number':132,'multiline':False]
['text':'     OrdinaryCreateFromConstructor(NewTarget, ...).','line_number':133,'multiline':False]
['text':' Step 1: Perform ! InitializeReadableStream(this).','line_number':134,'multiline':False]
['text':' Step 2: Let size be ? GetV(strategy, "size").','line_number':146,'multiline':False]
['text':' Step 3: Let highWaterMark be ? GetV(strategy, "highWaterMark").','line_number':152,'multiline':False]
['text':' Step 4: Let type be ? GetV(underlyingSource, "type").','line_number':159,'multiline':False]
['text':' Step 5: Let typeString be ? ToString(type).','line_number':165,'multiline':False]
['text':' Step 6: If typeString is "bytes",','line_number':171,'multiline':False]
['text':' The rest of step 6 is unimplemented, since we don't support','line_number':177,'multiline':False]
['text':' user-defined byte streams yet.','line_number':178,'multiline':False]
['text':' Step 7: Otherwise, if type is undefined,','line_number':184,'multiline':False]
['text':' Step 7.a: Let sizeAlgorithm be ? MakeSizeAlgorithmFromSizeFunction(size).','line_number':186,'multiline':False]
['text':' Step 7.b: If highWaterMark is undefined, let highWaterMark be 1.','line_number':191,'multiline':False]
['text':' Step 7.c: Set highWaterMark to ?','line_number':196,'multiline':False]
['text':' ValidateAndNormalizeHighWaterMark(highWaterMark).','line_number':197,'multiline':False]
['text':' Step 7.d: Perform','line_number':204,'multiline':False]
['text':'           ? SetUpReadableStreamDefaultControllerFromUnderlyingSource(','line_number':205,'multiline':False]
['text':'           this, underlyingSource, highWaterMark, sizeAlgorithm).','line_number':206,'multiline':False]
['text':' Step 8: Otherwise, throw a RangeError exception.','line_number':216,'multiline':False]
['text':'*
 * Streams spec, 3.2.5.1. get locked
 ','line_number':222,'multiline':True]
['text':' Step 1: If ! IsReadableStream(this) is false, throw a TypeError exception.','line_number':229,'multiline':False]
['text':' Step 2: Return ! IsReadableStreamLocked(this).','line_number':236,'multiline':False]
['text':'*
 * Streams spec, 3.2.5.2. cancel ( reason )
 ','line_number':241,'multiline':True]
['text':' Step 1: If ! IsReadableStream(this) is false, return a promise rejected','line_number':248,'multiline':False]
['text':'         with a TypeError exception.','line_number':249,'multiline':False]
['text':' Step 2: If ! IsReadableStreamLocked(this) is true, return a promise','line_number':256,'multiline':False]
['text':'         rejected with a TypeError exception.','line_number':257,'multiline':False]
['text':' Step 3: Return ! ReadableStreamCancel(this, reason).','line_number':264,'multiline':False]
['text':' Streams spec, 3.2.5.3.','line_number':274,'multiline':False]
['text':'      getIterator({ preventCancel } = {})','line_number':275,'multiline':False]
['text':'','line_number':276,'multiline':False]
['text':' Not implemented.','line_number':277,'multiline':False]
['text':'*
 * https://streams.spec.whatwg.org/#rs-get-reader
 * ReadableStreamReader getReader(optional ReadableStreamGetReaderOptions
 * options = {});
 ','line_number':281,'multiline':True]
['text':' Implicit |this| check.','line_number':290,'multiline':False]
['text':' Implicit in the spec: Dictionary destructuring.','line_number':297,'multiline':False]
['text':' https://heycam.github.io/webidl/#es-dictionary','line_number':298,'multiline':False]
['text':' 3.2.17. Dictionary types','line_number':299,'multiline':False]
['text':' Step 1.','line_number':302,'multiline':False]
['text':' Step 4: ...','line_number':310,'multiline':False]
['text':'','line_number':311,'multiline':False]
['text':' - Optimized for one dictionary member.','line_number':312,'multiline':False]
['text':' - Treat non-object options as non-existing "mode" member.','line_number':313,'multiline':False]
['text':' Step 4.1.3: If esMemberValue is not undefined, then: ...','line_number':320,'multiline':False]
['text':' https://heycam.github.io/webidl/#es-enumeration','line_number':322,'multiline':False]
['text':' 3.2.18. Enumeration types','line_number':323,'multiline':False]
['text':' Step 1:  Let S be the result of calling ToString(V).','line_number':325,'multiline':False]
['text':' Step 2: If S is not one of E's enumeration values,','line_number':331,'multiline':False]
['text':'         then throw a TypeError.','line_number':332,'multiline':False]
['text':'','line_number':333,'multiline':False]
['text':' Note: We only have one valid value "byob".','line_number':334,'multiline':False]
['text':' Step 1: If options["mode"] does not exist,','line_number':349,'multiline':False]
['text':'         return ? AcquireReadableStreamDefaultReader(this).','line_number':350,'multiline':False]
['text':' Step 2: Assert: options["mode"] is "byob".','line_number':356,'multiline':False]
['text':' Step 3: Return ? AcquireReadableStreamBYOBReader(this).','line_number':359,'multiline':False]
['text':' Streams spec, 3.2.5.5.','line_number':372,'multiline':False]
['text':'      pipeThrough({ writable, readable },','line_number':373,'multiline':False]
['text':'                  { preventClose, preventAbort, preventCancel, signal })','line_number':374,'multiline':False]
['text':'','line_number':375,'multiline':False]
['text':' Not implemented.','line_number':376,'multiline':False]
['text':'*
 * Streams spec, 3.2.5.6.
 *      pipeTo(dest, { preventClose, preventAbort, preventCancel, signal } = {})
 ','line_number':378,'multiline':True]
['text':' Implicit in the spec: argument default values.','line_number':385,'multiline':False]
['text':' Step 3 (reordered).','line_number':394,'multiline':False]
['text':' Implicit in the spec: get the values of the named parameters inside the','line_number':395,'multiline':False]
['text':' second argument destructuring pattern.  But as |ToBoolean| is infallible','line_number':396,'multiline':False]
['text':' and has no observable side effects, we may as well do step 3 here too.','line_number':397,'multiline':False]
['text':' (P)(Re)use the |signal| root.','line_number':401,'multiline':False]
['text':' Step 1: If ! IsReadableStream(this) is false, return a promise rejected','line_number':423,'multiline':False]
['text':'         with a TypeError exception.','line_number':424,'multiline':False]
['text':' Step 2: If ! IsWritableStream(dest) is false, return a promise rejected','line_number':431,'multiline':False]
['text':'         with a TypeError exception.','line_number':432,'multiline':False]
['text':' Step 3: Set preventClose to ! ToBoolean(preventClose), set preventAbort to','line_number':439,'multiline':False]
['text':'         ! ToBoolean(preventAbort), and set preventCancel to','line_number':440,'multiline':False]
['text':'         ! ToBoolean(preventCancel).','line_number':441,'multiline':False]
['text':' This already happened above.','line_number':442,'multiline':False]
['text':' Step 4: If signal is not undefined, and signal is not an instance of the','line_number':444,'multiline':False]
['text':'         AbortSignal interface, return a promise rejected with a TypeError','line_number':445,'multiline':False]
['text':'         exception.','line_number':446,'multiline':False]
['text':' Note: |signal| can be a wrapper.','line_number':457,'multiline':False]
['text':' Step 5: If ! IsReadableStreamLocked(this) is true, return a promise','line_number':461,'multiline':False]
['text':'         rejected with a TypeError exception.','line_number':462,'multiline':False]
['text':' Step 6: If ! IsWritableStreamLocked(dest) is true, return a promise','line_number':469,'multiline':False]
['text':'         rejected with a TypeError exception.','line_number':470,'multiline':False]
['text':' Step 7: Return','line_number':477,'multiline':False]
['text':'         ! ReadableStreamPipeTo(this, dest, preventClose, preventAbort,','line_number':478,'multiline':False]
['text':'                                preventCancel, signal).','line_number':479,'multiline':False]
['text':'*
 * Streams spec, 3.2.5.7. tee()
 ','line_number':491,'multiline':True]
['text':' Step 1: If ! IsReadableStream(this) is false, throw a TypeError exception.','line_number':497,'multiline':False]
['text':' Step 2: Let branches be ? ReadableStreamTee(this, false).','line_number':504,'multiline':False]
['text':' Step 3: Return ! CreateArrayFromList(branches).','line_number':511,'multiline':False]
['text':' Streams spec, 3.2.5.8.','line_number':524,'multiline':False]
['text':'      [@@asyncIterator]({ preventCancel } = {})','line_number':525,'multiline':False]
['text':'','line_number':526,'multiline':False]
['text':' Not implemented.','line_number':527,'multiline':False]
['text':' pipeTo is only conditionally supported right now, so it must be manually','line_number':532,'multiline':False]
['text':' added below if desired.','line_number':533,'multiline':False]
['text':' This function and everything below should be replaced with','line_number':543,'multiline':False]
['text':'','line_number':544,'multiline':False]
['text':' JS_STREAMS_CLASS_SPEC(ReadableStream, 0, SlotCount, 0,','line_number':545,'multiline':False]
['text':'                       JSCLASS_PRIVATE_IS_NSISUPPORTS | JSCLASS_HAS_PRIVATE,','line_number':546,'multiline':False]
['text':'                       JS_NULL_CLASS_OPS);','line_number':547,'multiline':False]
['text':'','line_number':548,'multiline':False]
['text':' when "pipeTo" is always enabled.','line_number':549,'multiline':False]
