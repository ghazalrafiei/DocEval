['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]
['text':' JSMSG_*','line_number':16,'multiline':False]
['text':' js::AutoCheckRecursionLimit, js::GetNativeStackLimit','line_number':17,'multiline':False]
['text':' js::IsWindow, js::IsWindowProxy, js::ToWindowProxyIfWindow','line_number':18,'multiline':False]
['text':' JS::ObjectValue','line_number':20,'multiline':False]
['text':' js::CallGetter','line_number':24,'multiline':False]
['text':' Used by private fields to manipulate the ProxyExpando:','line_number':37,'multiline':False]
['text':' All the following methods are called iff the handler for the proxy','line_number':38,'multiline':False]
['text':' returns true for useProxyExpandoObjectForPrivateFields.','line_number':39,'multiline':False]
['text':' For BaseProxyHandler, private names are stored in the expando object.','line_number':45,'multiline':False]
['text':' SetPrivateElementOperation checks for hasOwn first, which ensures the','line_number':48,'multiline':False]
['text':' expando exsists.','line_number':49,'multiline':False]
['text':' For BaseProxyHandler, private names are stored in the expando object.','line_number':66,'multiline':False]
['text':' We must have the expando, or GetPrivateElemOperation didn't call','line_number':69,'multiline':False]
['text':' hasPrivate first.','line_number':70,'multiline':False]
['text':' Because we controlled the creation of the expando, we know it's not a','line_number':73,'multiline':False]
['text':' proxy, and so can safely call internal methods on it without worrying about','line_number':74,'multiline':False]
['text':' exposing information about private names.','line_number':75,'multiline':False]
['text':' We must have the object, same reasoning as the expando.','line_number':80,'multiline':False]
['text':' If the private name has a getter, delegate to that.','line_number':83,'multiline':False]
['text':' For BaseProxyHandler, private names are stored in the expando object.','line_number':98,'multiline':False]
['text':' If there is no expando object, then there is no private field.','line_number':101,'multiline':False]
['text':' For BaseProxyHandler, private names are stored in the expando object.','line_number':115,'multiline':False]
['text':' default result if we refuse to perform this action','line_number':182,'multiline':False]
['text':' Unless we implment ProxyGetOwnPropertyDescriptorFromExpando,','line_number':189,'multiline':False]
['text':' this would be incorrect.','line_number':190,'multiline':False]
['text':' Private field accesses have different semantics depending on the kind','line_number':212,'multiline':False]
['text':' of proxy involved, and so take a different path compared to regular','line_number':213,'multiline':False]
['text':' [[Get]] operations. For example, scripted handlers don't fire traps','line_number':214,'multiline':False]
['text':' when accessing private fields (because of the WeakMap semantics)','line_number':215,'multiline':False]
['text':' Private names shouldn't take this path, as deleting a private name','line_number':255,'multiline':False]
['text':' should be a syntax error.','line_number':256,'multiline':False]
['text':' static ','line_number':285,'multiline':True]
['text':' static ','line_number':296,'multiline':True]
['text':' static ','line_number':308,'multiline':True]
['text':' static ','line_number':320,'multiline':True]
['text':' static ','line_number':331,'multiline':True]
['text':' static ','line_number':342,'multiline':True]
['text':' default result if we refuse to perform this action','line_number':358,'multiline':False]
['text':' Private names shouldn't take this path, but only hasOwn;','line_number':364,'multiline':False]
['text':' default result if we refuse to perform this action','line_number':405,'multiline':False]
['text':' Private field accesses have different semantics depending on the kind','line_number':411,'multiline':False]
['text':' of proxy involved, and so take a different path compared to regular','line_number':412,'multiline':False]
['text':' [[Get]] operations. For example, scripted handlers don't fire traps','line_number':413,'multiline':False]
['text':' when accessing private fields (because of the WeakMap semantics)','line_number':414,'multiline':False]
['text':' default result if we refuse to perform this action','line_number':450,'multiline':False]
['text':' Private field accesses have different semantics depending on the kind','line_number':456,'multiline':False]
['text':' of proxy involved, and so take a different path compared to regular','line_number':457,'multiline':False]
['text':' [[Get]] operations. For example, scripted handlers don't fire traps','line_number':458,'multiline':False]
['text':' when accessing private fields (because of the WeakMap semantics)','line_number':459,'multiline':False]
['text':' Use the WindowProxy as receiver if receiver_ is a Window. Proxy handlers','line_number':486,'multiline':False]
['text':' shouldn't have to know about the Window/WindowProxy distinction.','line_number':487,'multiline':False]
['text':' Private field accesses have different semantics depending on the kind','line_number':529,'multiline':False]
['text':' of proxy involved, and so take a different path compared to regular','line_number':530,'multiline':False]
['text':' [[Set]] operations.','line_number':531,'multiline':False]
['text':'','line_number':532,'multiline':False]
['text':' This doesn't interact with hasPrototype, as PrivateFields are always','line_number':533,'multiline':False]
['text':' own propertiers, and so we never deal with prototype traversals.','line_number':534,'multiline':False]
['text':' Special case. See the comment on BaseProxyHandler::mHasPrototype.','line_number':539,'multiline':False]
['text':' Use the WindowProxy as receiver if receiver_ is a Window. Proxy handlers','line_number':549,'multiline':False]
['text':' shouldn't have to know about the Window/WindowProxy distinction.','line_number':550,'multiline':False]
['text':' If the policy denies access but wants us to return true, we need','line_number':629,'multiline':False]
['text':' to return an empty |props| list.','line_number':630,'multiline':False]
['text':' Because vp[0] is JS_CALLEE on the way in and JS_RVAL on the way out, we','line_number':646,'multiline':False]
['text':' can only set our default value once we're sure that we're not calling the','line_number':647,'multiline':False]
['text':' trap.','line_number':648,'multiline':False]
['text':' Because vp[0] is JS_CALLEE on the way in and JS_RVAL on the way out, we','line_number':666,'multiline':False]
['text':' can only set our default value once we're sure that we're not calling the','line_number':667,'multiline':False]
['text':' trap.','line_number':668,'multiline':False]
['text':' Note - we don't enter a policy here because our security architecture','line_number':686,'multiline':False]
['text':' guards against nativeCall by overriding the trap itself in the right','line_number':687,'multiline':False]
['text':' circumstances.','line_number':688,'multiline':False]
['text':' default result if we refuse to perform this action','line_number':699,'multiline':False]
['text':' Check for unbounded recursion, but don't signal an error; className','line_number':726,'multiline':False]
['text':' needs to be infallible.','line_number':727,'multiline':False]
['text':' mayThrow = ','line_number':735,'multiline':True]
['text':' Do the safe thing if the policy rejects.','line_number':736,'multiline':False]
['text':' mayThrow = ','line_number':751,'multiline':True]
['text':' Do the safe thing if the policy rejects.','line_number':752,'multiline':False]
['text':' static ','line_number':778,'multiline':True]
['text':' mayThrow = ','line_number':788,'multiline':True]
['text':' static ','line_number':799,'multiline':True]
['text':' XXX is this necessary?','line_number':828,'multiline':False]
['text':' static ','line_number':831,'multiline':True]
['text':' Skip this check during compacting GC since objects' object groups may be','line_number':839,'multiline':False]
['text':' forwarded. It's not impossible to make this work, but requires adding a','line_number':840,'multiline':False]
['text':' parallel lookupWrapper() path for this one case.','line_number':841,'multiline':False]
['text':' Assert that this proxy is tracked in the wrapper map. We maintain the','line_number':847,'multiline':False]
['text':' invariant that the wrapped object is the key in the wrapper map.','line_number':848,'multiline':False]
['text':' static ','line_number':856,'multiline':True]
['text':' Note: If you add new slots here, make sure to change','line_number':869,'multiline':False]
['text':' nuke() to cope.','line_number':870,'multiline':False]
['text':'
     * The GC can use the second reserved slot to link the cross compartment
     * wrappers into a linked list, in which case we don't want to trace it.
     ','line_number':876,'multiline':True]
['text':' Suppress a bogus warning about finalize().','line_number':891,'multiline':False]
['text':' Bug 1560019: This allocation is not tracked, but is only present when','line_number':898,'multiline':False]
['text':' objects are swapped which is assumed to be relatively rare.','line_number':899,'multiline':False]
['text':' Objects in the nursery are never swapped so the proxy must have an','line_number':908,'multiline':False]
['text':' inline ProxyValueArray.','line_number':909,'multiline':False]
['text':' addProperty','line_number':918,'multiline':False]
['text':' delProperty','line_number':919,'multiline':False]
['text':' enumerate','line_number':920,'multiline':False]
['text':' newEnumerate','line_number':921,'multiline':False]
['text':' resolve','line_number':922,'multiline':False]
['text':' mayResolve','line_number':923,'multiline':False]
['text':' finalize','line_number':924,'multiline':False]
['text':' call','line_number':925,'multiline':False]
['text':' hasInstance','line_number':926,'multiline':False]
['text':' construct','line_number':927,'multiline':False]
['text':' trace','line_number':928,'multiline':False]
['text':' objectMovedOp','line_number':932,'multiline':False]
['text':' lookupProperty','line_number':936,'multiline':False]
['text':' defineProperty','line_number':937,'multiline':False]
['text':' hasProperty','line_number':938,'multiline':False]
['text':' getProperty','line_number':939,'multiline':False]
['text':' setProperty','line_number':940,'multiline':False]
['text':' getOwnPropertyDescriptor','line_number':941,'multiline':False]
['text':' deleteProperty','line_number':942,'multiline':False]
['text':' getElements','line_number':943,'multiline':False]
['text':' funToString','line_number':944,'multiline':False]
['text':' This can be called from the compartment wrap hooks while in a realm with a','line_number':966,'multiline':False]
['text':' gray global. Trigger the read barrier on the global to ensure this is','line_number':967,'multiline':False]
['text':' unmarked.','line_number':968,'multiline':False]
['text':' |priv| might be cross-compartment.','line_number':972,'multiline':False]
