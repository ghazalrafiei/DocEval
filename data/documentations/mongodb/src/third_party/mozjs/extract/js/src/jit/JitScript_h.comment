['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]
['text':' Information about a script's bytecode, used by WarpBuilder. This is cached','line_number':26,'multiline':False]
['text':' in JitScript.','line_number':27,'multiline':False]
['text':' Magic BaselineScript value indicating Baseline compilation has been disabled.','line_number':34,'multiline':False]
['text':' Magic IonScript values indicating Ion compilation has been disabled or the','line_number':40,'multiline':False]
['text':' script is being Ion-compiled off-thread.','line_number':41,'multiline':False]
['text':' [SMDOC] ICScript Lifetimes
 *
 * An ICScript owns an array of ICEntries, each of which owns a linked
 * list of ICStubs.
 *
 * A JitScript contains an embedded ICScript. If it has done any trial
 * inlining, it also owns an InliningRoot. The InliningRoot owns all
 * of the ICScripts that have been created for inlining into the
 * corresponding JitScript. This ties the lifetime of the inlined
 * ICScripts to the lifetime of the JitScript itself.
 *
 * We store pointers to ICScripts in two other places: on the stack in
 * BaselineFrame, and in IC stubs for CallInlinedFunction.
 *
 * The ICScript pointer in a BaselineFrame either points to the
 * ICScript embedded in the JitScript for that frame, or to an inlined
 * ICScript owned by a caller. In each case, there must be a frame on
 * the stack corresponding to the JitScript that owns the current
 * ICScript, which will keep the ICScript alive.
 *
 * Each ICStub is owned by an ICScript and, indirectly, a
 * JitScript. An ICStub that uses CallInlinedFunction contains an
 * ICScript for use by the callee. The ICStub and the callee ICScript
 * are always owned by the same JitScript, so the callee ICScript will
 * not be freed while the ICStub is alive.
 *
 * The lifetime of an ICScript is independent of the lifetimes of the
 * BaselineScript and IonScript/WarpScript to which it
 * corresponds. They can be destroyed and recreated, and the ICScript
 * will remain valid.
 ','line_number':53,'multiline':True]
['text':' If this ICScript was created for trial inlining or has another','line_number':169,'multiline':False]
['text':' ICScript inlined into it, a pointer to the root of the inlining','line_number':170,'multiline':False]
['text':' tree. Otherwise, nullptr.','line_number':171,'multiline':False]
['text':' ICScripts that have been inlined into this ICScript.','line_number':174,'multiline':False]
['text':' Number of times this copy of the script has been called or has had','line_number':177,'multiline':False]
['text':' backedges taken.  Reset if the script's JIT code is forcibly discarded.','line_number':178,'multiline':False]
['text':' See also the ScriptWarmUpData class.','line_number':179,'multiline':False]
['text':' The offset of the ICFallbackStub array.','line_number':182,'multiline':False]
['text':' The size of this allocation.','line_number':185,'multiline':False]
['text':' The inlining depth of this ICScript. 0 for the inlining root.','line_number':188,'multiline':False]
['text':' [SMDOC] JitScript','line_number':206,'multiline':False]
['text':'','line_number':207,'multiline':False]
['text':' JitScript stores type inference data, Baseline ICs and other JIT-related data','line_number':208,'multiline':False]
['text':' for a script. Scripts with a JitScript can run in the Baseline Interpreter.','line_number':209,'multiline':False]
['text':'','line_number':210,'multiline':False]
['text':' IC Data','line_number':211,'multiline':False]
['text':' =======','line_number':212,'multiline':False]
['text':' All IC data for Baseline (Interpreter and JIT) is stored in an ICScript. Each','line_number':213,'multiline':False]
['text':' JitScript contains an ICScript as the last field. Additional free-standing','line_number':214,'multiline':False]
['text':' ICScripts may be created during trial inlining. Ion has its own IC chains','line_number':215,'multiline':False]
['text':' stored in IonScript.','line_number':216,'multiline':False]
['text':'','line_number':217,'multiline':False]
['text':' For each IC we store an ICEntry, which points to the first ICStub in the','line_number':218,'multiline':False]
['text':' chain, and an ICFallbackStub. Note that multiple stubs in the same zone can','line_number':219,'multiline':False]
['text':' share Baseline IC code. This works because the stub data is stored in the','line_number':220,'multiline':False]
['text':' ICStub instead of baked in in the stub code.','line_number':221,'multiline':False]
['text':'','line_number':222,'multiline':False]
['text':' Storing this separate from BaselineScript allows us to use the same ICs in','line_number':223,'multiline':False]
['text':' the Baseline Interpreter and Baseline JIT. It also simplifies debug mode OSR','line_number':224,'multiline':False]
['text':' because the JitScript can be reused when we have to recompile the','line_number':225,'multiline':False]
['text':' BaselineScript.','line_number':226,'multiline':False]
['text':'','line_number':227,'multiline':False]
['text':' The JitScript contains a stub space. This stores the "can GC" CacheIR stubs.','line_number':228,'multiline':False]
['text':' These stubs are never purged before destroying the JitScript. Other stubs are','line_number':229,'multiline':False]
['text':' stored in the optimized stub space stored in JitZone and can be purged more','line_number':230,'multiline':False]
['text':' eagerly. See JitScript::purgeOptimizedStubs.','line_number':231,'multiline':False]
['text':'','line_number':232,'multiline':False]
['text':' An ICScript contains a list of IC entries and a list of fallback stubs.','line_number':233,'multiline':False]
['text':' There's one ICEntry and ICFallbackStub for each JOF_IC bytecode op.','line_number':234,'multiline':False]
['text':'','line_number':235,'multiline':False]
['text':' The ICScript also contains the warmUpCount for the script.','line_number':236,'multiline':False]
['text':'','line_number':237,'multiline':False]
['text':' Inlining Data','line_number':238,'multiline':False]
['text':' =============','line_number':239,'multiline':False]
['text':' JitScript also contains a list of Warp compilations inlining this script, for','line_number':240,'multiline':False]
['text':' invalidation.','line_number':241,'multiline':False]
['text':'','line_number':242,'multiline':False]
['text':' Memory Layout','line_number':243,'multiline':False]
['text':' =============','line_number':244,'multiline':False]
['text':' JitScript contains an ICScript as the last field. ICScript has trailing','line_number':245,'multiline':False]
['text':' (variable length) arrays for ICEntry and ICFallbackStub. The memory layout is','line_number':246,'multiline':False]
['text':' as follows:','line_number':247,'multiline':False]
['text':'','line_number':248,'multiline':False]
['text':'  Item                    | Offset','line_number':249,'multiline':False]
['text':'  ------------------------+------------------------','line_number':250,'multiline':False]
['text':'  JitScript               | 0','line_number':251,'multiline':False]
['text':'  -->ICScript  (field)    |','line_number':252,'multiline':False]
['text':'     ICEntry[]            | icEntriesOffset()','line_number':253,'multiline':False]
['text':'     ICFallbackStub[]     | fallbackStubsOffset()','line_number':254,'multiline':False]
['text':'','line_number':255,'multiline':False]
['text':' These offsets are also used to compute numICEntries.','line_number':256,'multiline':False]
['text':' Allocated space for Can-GC CacheIR stubs.','line_number':260,'multiline':False]
['text':' Profile string used by the profiler for Baseline Interpreter frames.','line_number':263,'multiline':False]
['text':' Data allocated lazily the first time this script is compiled, inlined, or','line_number':266,'multiline':False]
['text':' analyzed by WarpBuilder. This is done lazily to improve performance and','line_number':267,'multiline':False]
['text':' memory usage as most scripts are never Warp-compiled.','line_number':268,'multiline':False]
['text':' For functions with a call object, template objects to use for the call','line_number':270,'multiline':False]
['text':' object and decl env object (linked via the call object's enclosing','line_number':271,'multiline':False]
['text':' scope).','line_number':272,'multiline':False]
['text':' Analysis information based on the script and its bytecode.','line_number':275,'multiline':False]
['text':' Baseline code for the script. Either nullptr, BaselineDisabledScriptPtr or','line_number':287,'multiline':False]
['text':' a valid BaselineScript*.','line_number':288,'multiline':False]
['text':' Ion code for this script. Either nullptr, IonDisabledScriptPtr,','line_number':291,'multiline':False]
['text':' IonCompilingScriptPtr or a valid IonScript*.','line_number':292,'multiline':False]
['text':' The size of this allocation.','line_number':295,'multiline':False]
['text':' Flag set when discarding JIT code to indicate this script is on the stack','line_number':299,'multiline':False]
['text':' and type information and JIT code should not be discarded.','line_number':300,'multiline':False]
['text':' True if this script entered Ion via OSR at a loop header.','line_number':303,'multiline':False]
['text':' Zero-initialize flags.','line_number':306,'multiline':False]
['text':' If the last warp compilation invalidated because of TranspiledCacheIR','line_number':311,'multiline':False]
['text':' bailouts, this is a hash of the ICScripts used in that compilation.','line_number':312,'multiline':False]
['text':' When recompiling, we assert that the hash has changed.','line_number':313,'multiline':False]
['text':' To avoid pathological cases, we skip the check if we have purged','line_number':316,'multiline':False]
['text':' stubs due to GC pressure.','line_number':317,'multiline':False]
['text':' List of allocation sites referred to by ICs in this script.','line_number':321,'multiline':False]
['text':' End of fields.','line_number':325,'multiline':False]
['text':' The contents of the stub space are removed and freed separately after the','line_number':346,'multiline':False]
['text':' next minor GC. See prepareForDestruction.','line_number':347,'multiline':False]
['text':' BaselineScript and IonScript must have been destroyed at this point.','line_number':350,'multiline':False]
['text':' When the script contains pointers to nursery things, the store buffer can','line_number':396,'multiline':False]
['text':' contain entries that point into the stub space. Since we can destroy','line_number':397,'multiline':False]
['text':' scripts outside the context of a GC, this situation could result in us','line_number':398,'multiline':False]
['text':' trying to mark invalid store buffer entries.','line_number':399,'multiline':False]
['text':'','line_number':400,'multiline':False]
['text':' Defer freeing any allocated blocks until after the next minor GC.','line_number':401,'multiline':False]
['text':' |data| already includes the ICStubSpace itself, so use','line_number':411,'multiline':False]
['text':' sizeOfExcludingThis.','line_number':412,'multiline':False]
['text':' Methods to set baselineScript_ to a BaselineScript*, nullptr, or','line_number':457,'multiline':False]
['text':' BaselineDisabledScriptPtr.','line_number':458,'multiline':False]
['text':' Methods for getting/setting/clearing a BaselineScript*.','line_number':464,'multiline':False]
['text':' Methods to set ionScript_ to an IonScript*, nullptr, or one of the special','line_number':487,'multiline':False]
['text':' Ion{Disabled,Compiling}ScriptPtr values.','line_number':488,'multiline':False]
['text':' Methods for getting/setting/clearing an IonScript*.','line_number':493,'multiline':False]
['text':' Methods for off-thread compilation.','line_number':515,'multiline':False]
['text':' Ensures no JitScripts are purged in the current zone.','line_number':545,'multiline':False]
['text':' Mark JitScripts on the stack as active, so that they are not discarded','line_number':558,'multiline':False]
['text':' during GC.','line_number':559,'multiline':False]
['text':' namespace jit','line_number':566,'multiline':False]
['text':' namespace js','line_number':567,'multiline':False]
['text':' jit_JitScript_h ','line_number':569,'multiline':True]
