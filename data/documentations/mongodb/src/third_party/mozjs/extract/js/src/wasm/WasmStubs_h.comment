['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 *
 * Copyright 2015 Mozilla Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ','line_number':1,'multiline':True]
['text':' js::wasm::ExitReason','line_number':22,'multiline':False]
['text':' ValType and location for a single result: either in a register or on the','line_number':29,'multiline':False]
['text':' stack.','line_number':30,'multiline':False]
['text':' Sizes of items in the stack area.','line_number':74,'multiline':False]
['text':'','line_number':75,'multiline':False]
['text':' The size values come from the implementations of Push() in','line_number':76,'multiline':False]
['text':' MacroAssembler-x86-shared.cpp and MacroAssembler-arm-shared.cpp, and from','line_number':77,'multiline':False]
['text':' VFPRegister::size() in Architecture-arm.h.','line_number':78,'multiline':False]
['text':'','line_number':79,'multiline':False]
['text':' On ARM unlike on x86 we push a single for float.','line_number':80,'multiline':False]
['text':' Offset from SP.','line_number':127,'multiline':False]
['text':' Just as WebAssembly functions can take multiple arguments, they can also','line_number':135,'multiline':False]
['text':' return multiple results.  As with a call, a limited number of results will be','line_number':136,'multiline':False]
['text':' located in registers, and the rest will be stored in a stack area.  The','line_number':137,'multiline':False]
['text':' |ABIResultIter| computes result locations, given a |ResultType|.','line_number':138,'multiline':False]
['text':'','line_number':139,'multiline':False]
['text':' Recall that a |ResultType| represents a sequence of value types t1..tN,','line_number':140,'multiline':False]
['text':' indexed from 1 to N.  In principle it doesn't matter how we decide which','line_number':141,'multiline':False]
['text':' results get to be in registers and which go to the stack.  To better','line_number':142,'multiline':False]
['text':' harmonize with WebAssembly's abstract stack machine, whose properties are','line_number':143,'multiline':False]
['text':' taken advantage of by the baseline compiler, our strategy is to start','line_number':144,'multiline':False]
['text':' allocating result locations in "reverse" order: from result N down to 1.','line_number':145,'multiline':False]
['text':'','line_number':146,'multiline':False]
['text':' If a result with index I is in a register, then all results with index J > I','line_number':147,'multiline':False]
['text':' are also in registers.  If a result I is on the stack, then all results with','line_number':148,'multiline':False]
['text':' index K < I are also on the stack, farther away from the stack pointer than','line_number':149,'multiline':False]
['text':' result I.','line_number':150,'multiline':False]
['text':'','line_number':151,'multiline':False]
['text':' Currently only a single result is ever stored in a register, though this may','line_number':152,'multiline':False]
['text':' change in the future on register-rich platforms.','line_number':153,'multiline':False]
['text':'','line_number':154,'multiline':False]
['text':' NB: The baseline compiler also uses thie ABI for locations of block','line_number':155,'multiline':False]
['text':' parameters and return values, within individual WebAssembly functions.','line_number':156,'multiline':False]
['text':' A value that is written into the trap exit frame, which is useful for','line_number':270,'multiline':False]
['text':' cross-checking during garbage collection.','line_number':271,'multiline':False]
['text':' And its offset, in words, down from the highest-addressed word of the trap','line_number':274,'multiline':False]
['text':' exit frame.  The value is written into the frame using WasmPush.  In the','line_number':275,'multiline':False]
['text':' case where WasmPush allocates more than one word, the value will therefore','line_number':276,'multiline':False]
['text':' be written at the lowest-addressed word.','line_number':277,'multiline':False]
['text':' An argument that will end up on the stack according to the system ABI, to be','line_number':284,'multiline':False]
['text':' passed to GenerateDirectCallFromJit. Since the direct JIT call creates its','line_number':285,'multiline':False]
['text':' own frame, it is its responsibility to put stack arguments to their expected','line_number':286,'multiline':False]
['text':' locations; so the caller of GenerateDirectCallFromJit can put them anywhere.','line_number':287,'multiline':False]
['text':' Generates an inline wasm call (during jit compilation) to a specific wasm','line_number':345,'multiline':False]
['text':' function (as specifed by the given FuncExport).','line_number':346,'multiline':False]
['text':' This call doesn't go through a wasm entry, but rather creates its own','line_number':347,'multiline':False]
['text':' inlined exit frame.','line_number':348,'multiline':False]
['text':' Assumes:','line_number':349,'multiline':False]
['text':' - all the registers have been preserved by the caller,','line_number':350,'multiline':False]
['text':' - all arguments passed in registers have been set up at the expected','line_number':351,'multiline':False]
['text':'   locations,','line_number':352,'multiline':False]
['text':' - all arguments passed on stack slot are alive as defined by a corresponding','line_number':353,'multiline':False]
['text':'   JitCallStackArg.','line_number':354,'multiline':False]
['text':' namespace wasm','line_number':361,'multiline':False]
['text':' namespace js','line_number':362,'multiline':False]
['text':' wasm_stubs_h','line_number':364,'multiline':False]
