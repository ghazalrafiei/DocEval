['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]
['text':' js::jit::JitActivation','line_number':21,'multiline':False]
['text':' non-volatile registers.','line_number':40,'multiline':False]
['text':' First 4 argumet placeholders','line_number':54,'multiline':False]
['text':' <- sp points here when function is entered.','line_number':55,'multiline':False]
['text':' Arguments on stack','line_number':60,'multiline':False]
['text':' Restore non-volatile registers','line_number':70,'multiline':False]
['text':' Restore non-volatile floating point registers','line_number':82,'multiline':False]
['text':' Save non-volatile registers. These must be saved by the trampoline,','line_number':96,'multiline':False]
['text':' rather than the JIT'd code, because they are scanned by the conservative','line_number':97,'multiline':False]
['text':' scanner.','line_number':98,'multiline':False]
['text':'
 * This method generates a trampoline for a c++ function with the following
 * signature:
 *   void enter(void* code, int argc, Value* argv, InterpreterFrame* fp,
 *              CalleeToken calleeToken, JSObject* scopeChain, Value* vp)
 *   ...using standard EABI calling convention
 ','line_number':119,'multiline':True]
['text':' Save stack pointer into s4','line_number':142,'multiline':False]
['text':' Load calleeToken into s2.','line_number':145,'multiline':False]
['text':' Save stack pointer as baseline frame.','line_number':148,'multiline':False]
['text':' Load the number of actual arguments into s3.','line_number':151,'multiline':False]
['text':'**************************************************************
  Loop over argv vector, push arguments onto stack in reverse order
  **************************************************************','line_number':155,'multiline':True]
['text':' if we are constructing, that also needs to include newTarget','line_number':159,'multiline':False]
['text':' s0 = argc * 8','line_number':170,'multiline':False]
['text':' s0 = argv + argc * 8','line_number':171,'multiline':False]
['text':' Loop over arguments, copying them from an unknown buffer onto the Ion','line_number':173,'multiline':False]
['text':' stack so they can be accessed from JIT'ed code.','line_number':174,'multiline':False]
['text':' If there aren't any arguments, don't do anything','line_number':176,'multiline':False]
['text':' Create the frame descriptor.','line_number':192,'multiline':False]
['text':' actual arguments','line_number':198,'multiline':False]
['text':' callee token','line_number':199,'multiline':False]
['text':' descriptor','line_number':201,'multiline':False]
['text':' Handle Interpreter -> Baseline OSR.','line_number':206,'multiline':False]
['text':' Push return address.','line_number':228,'multiline':False]
['text':' Push previous frame pointer.','line_number':233,'multiline':False]
['text':' Reserve frame.','line_number':237,'multiline':False]
['text':' Reserve space for locals and stack values.','line_number':242,'multiline':False]
['text':' Enter exit frame.','line_number':246,'multiline':False]
['text':' Push frame descriptor and fake return address.','line_number':253,'multiline':False]
['text':' Frame descriptor','line_number':256,'multiline':False]
['text':' fake return address','line_number':257,'multiline':False]
['text':' No GC things to mark, push a bare token.','line_number':259,'multiline':False]
['text':' BaselineFrame','line_number':265,'multiline':False]
['text':' jitcode','line_number':266,'multiline':False]
['text':' BaselineFrame','line_number':271,'multiline':False]
['text':' InterpreterFrame','line_number':272,'multiline':False]
['text':' If OSR-ing, then emit instrumentation for setting lastProfilerFrame','line_number':289,'multiline':False]
['text':' if profiler instrumentation is enabled.','line_number':290,'multiline':False]
['text':' OOM: load error value, discard return address and previous frame','line_number':305,'multiline':False]
['text':' pointer and return.','line_number':306,'multiline':False]
['text':' Load the scope chain in R1.','line_number':315,'multiline':False]
['text':' The call will push the return address on the stack, thus we check that','line_number':320,'multiline':False]
['text':' the stack would be aligned once the call is complete.','line_number':321,'multiline':False]
['text':' Call the function with pushing return address to stack.','line_number':324,'multiline':False]
['text':' Interpreter -> Baseline OSR will return here.','line_number':328,'multiline':False]
['text':' s0 <- 8*argc (size of all arguments we pushed on the stack)','line_number':335,'multiline':False]
['text':' Discard calleeToken, numActualArgs.','line_number':339,'multiline':False]
['text':' Pop arguments off the stack.','line_number':342,'multiline':False]
['text':' Store the returned value into the slotVp','line_number':345,'multiline':False]
['text':' Restore non-volatile registers and return.','line_number':349,'multiline':False]
['text':' static','line_number':353,'multiline':False]
['text':' Not supported, or not implemented yet.','line_number':356,'multiline':False]
['text':' TODO: Implement along with the corresponding stack-walker changes, in','line_number':357,'multiline':False]
['text':' coordination with the Gecko Profiler, see bug 1635987 and follow-ups.','line_number':358,'multiline':False]
['text':' NOTE: Members ionScript_ and osiPointReturnAddress_ of','line_number':365,'multiline':False]
['text':' InvalidationBailoutStack are already on the stack.','line_number':366,'multiline':False]
['text':' Stack has to be alligned here. If not, we will have to fix it.','line_number':370,'multiline':False]
['text':' Make room for data on stack.','line_number':373,'multiline':False]
['text':' Save general purpose registers','line_number':376,'multiline':False]
['text':' Save floating point registers','line_number':384,'multiline':False]
['text':' We can use as_sd because stack is alligned.','line_number':385,'multiline':False]
['text':' Pass pointer to InvalidationBailoutStack structure.','line_number':392,'multiline':False]
['text':' Reserve place for return value and BailoutInfo pointer','line_number':395,'multiline':False]
['text':' Pass pointer to return value.','line_number':397,'multiline':False]
['text':' Pass pointer to BailoutInfo','line_number':399,'multiline':False]
['text':' Remove the return address, the IonScript, the register state','line_number':413,'multiline':False]
['text':' (InvaliationBailoutStack) and the space that was allocated for the','line_number':414,'multiline':False]
['text':' return value.','line_number':415,'multiline':False]
['text':' remove the space that this frame was using before the bailout','line_number':418,'multiline':False]
['text':' (computed by InvalidationBailout)','line_number':419,'multiline':False]
['text':' Jump to shared bailout tail. The BailoutInfo pointer has to be in r2.','line_number':422,'multiline':False]
['text':' Load the number of actual arguments into numActArgsReg','line_number':442,'multiline':False]
['text':' Load the number of |undefined|s to push into t1.','line_number':447,'multiline':False]
['text':' Copy the number of actual arguments into s3.','line_number':452,'multiline':False]
['text':' Get the topmost argument.','line_number':462,'multiline':False]
['text':' t0 <- nargs * 8','line_number':463,'multiline':False]
['text':' t2 <- sp + nargs * 8','line_number':464,'multiline':False]
['text':' Add sizeof(Value) to overcome |this|','line_number':474,'multiline':False]
['text':' Include the newly pushed newTarget value in the frame size','line_number':481,'multiline':False]
['text':' calculated below.','line_number':482,'multiline':False]
['text':' Push undefined.','line_number':488,'multiline':False]
['text':' Push arguments, |nargs| + 1 times (to include |this|).','line_number':501,'multiline':False]
['text':' Read argument and push to stack.','line_number':514,'multiline':False]
['text':' translate the framesize from values into bytes','line_number':524,'multiline':False]
['text':' Construct sizeDescriptor.','line_number':528,'multiline':False]
['text':' Construct JitFrameLayout.','line_number':531,'multiline':False]
['text':' Push actual arguments.','line_number':533,'multiline':False]
['text':' Push callee token.','line_number':535,'multiline':False]
['text':' Push frame descriptor.','line_number':537,'multiline':False]
['text':' Call the target function.','line_number':540,'multiline':False]
['text':' See BaselineCacheIRCompiler::emitCallInlinedFunction.','line_number':553,'multiline':False]
['text':' arg1','line_number':561,'multiline':False]
['text':'  ...','line_number':562,'multiline':False]
['text':' argN','line_number':563,'multiline':False]
['text':' num actual args','line_number':564,'multiline':False]
['text':' callee token','line_number':565,'multiline':False]
['text':' sizeDescriptor     <- sp now','line_number':566,'multiline':False]
['text':' return address','line_number':567,'multiline':False]
['text':' Remove the rectifier frame.','line_number':569,'multiline':False]
['text':' t0 <- descriptor with FrameType.','line_number':570,'multiline':False]
['text':' t0 <- descriptor.','line_number':572,'multiline':False]
['text':' Discard descriptor, calleeToken and number of actual arguments.','line_number':574,'multiline':False]
['text':' arg1','line_number':577,'multiline':False]
['text':'  ...','line_number':578,'multiline':False]
['text':' argN               <- sp now; t0 <- frame descriptor','line_number':579,'multiline':False]
['text':' num actual args','line_number':580,'multiline':False]
['text':' callee token','line_number':581,'multiline':False]
['text':' sizeDescriptor','line_number':582,'multiline':False]
['text':' return address','line_number':583,'multiline':False]
['text':' Discard pushed arguments.','line_number':585,'multiline':False]
['text':' NOTE: Members snapshotOffset_ and padding_ of BailoutStack','line_number':591,'multiline':False]
['text':' are not stored in PushBailoutFrame().','line_number':592,'multiline':False]
['text':' There are two different stack layouts when doing bailout. They are
 * represented via class BailoutStack.
 *
 * - First case is when bailout is done trough bailout table. In this case
 * table offset is stored in $ra (look at JitRuntime::generateBailoutTable())
 * and thunk code should save it on stack. In this case frameClassId_ cannot
 * be NO_FRAME_SIZE_CLASS_ID. Members snapshotOffset_ and padding_ are not on
 * the stack.
 *
 * - Other case is when bailout is done via out of line code (lazy bailout).
 * In this case frame size is stored in $ra (look at
 * CodeGeneratorMIPS::generateOutOfLineCode()) and thunk code should save it
 * on stack. Other difference is that members snapshotOffset_ and padding_ are
 * pushed to the stack by CodeGeneratorMIPS::visitOutOfLineBailout(). Field
 * frameClassId_ is forced to be NO_FRAME_SIZE_CLASS_ID
 * (See: JitRuntime::generateBailoutHandler).
 ','line_number':597,'multiline':True]
['text':' Make sure that alignment is proper.','line_number':616,'multiline':False]
['text':' Make room for data.','line_number':619,'multiline':False]
['text':' Save general purpose registers.','line_number':622,'multiline':False]
['text':' What to do for SIMD?','line_number':629,'multiline':False]
['text':' Save floating point registers','line_number':633,'multiline':False]
['text':' We can use as_sdc1 because stack is alligned.','line_number':634,'multiline':False]
['text':' Store the frameSize_ or tableOffset_ stored in ra','line_number':641,'multiline':False]
['text':' See: JitRuntime::generateBailoutTable()','line_number':642,'multiline':False]
['text':' See: CodeGeneratorMIPS::generateOutOfLineCode()','line_number':643,'multiline':False]
['text':' Put frame class to stack','line_number':646,'multiline':False]
['text':' Put pointer to BailoutStack as first argument to the Bailout()','line_number':650,'multiline':False]
['text':' Put pointer to BailoutInfo','line_number':658,'multiline':False]
['text':' Get BailoutInfo pointer','line_number':670,'multiline':False]
['text':' Remove both the bailout frame and the topmost Ion frame's stack.','line_number':673,'multiline':False]
['text':' Load frameSize from stack','line_number':675,'multiline':False]
['text':' Remove complete BailoutStack class and data after it','line_number':680,'multiline':False]
['text':' Remove frame size srom stack','line_number':683,'multiline':False]
['text':' Remove the data this fuction added and frame size.','line_number':687,'multiline':False]
['text':' Jump to shared bailout tail. The BailoutInfo pointer has to be in a2.','line_number':692,'multiline':False]
['text':' Calculate offset to the end of table','line_number':703,'multiline':False]
['text':' We use the 'ra' as table offset later in GenerateBailoutThunk','line_number':706,'multiline':False]
['text':' Avoid conflicts with argument registers while discarding the result after','line_number':729,'multiline':False]
['text':' the function call.','line_number':730,'multiline':False]
['text':' The context is the first argument; a0 is the first argument register.','line_number':737,'multiline':False]
['text':' If it isn't a tail call, then the return address needs to be saved','line_number':741,'multiline':False]
['text':' We're aligned to an exit frame, so link it up.','line_number':746,'multiline':False]
['text':' Save the base of the argument set stored on the stack.','line_number':750,'multiline':False]
['text':' Use temporary register.','line_number':753,'multiline':False]
['text':' Reserve space for the outparameter. Reserve sizeof(Value) for every','line_number':762,'multiline':False]
['text':' case so that stack stays aligned.','line_number':763,'multiline':False]
['text':' Make sure that stack is double aligned after outParam.','line_number':797,'multiline':False]
['text':' Reserve stack for double sized args that are copied to be aligned.','line_number':801,'multiline':False]
['text':' Copy any arguments.','line_number':818,'multiline':False]
['text':' Values should be passed by reference, not by value, so we','line_number':826,'multiline':False]
['text':' assert that the argument is a double-precision float.','line_number':827,'multiline':False]
['text':' Copy double sized argument to aligned place.','line_number':839,'multiline':False]
['text':' Copy the implicit outparam, if any.','line_number':854,'multiline':False]
['text':' Test for failure.','line_number':868,'multiline':False]
['text':' Called functions return bools, which are 0/false and non-zero/true','line_number':874,'multiline':False]
['text':' Load the outparam and free any allocated stack.','line_number':885,'multiline':False]
['text':' Call into C++ to mark this GC thing.','line_number':951,'multiline':False]
['text':'','line_number':1013,'multiline':False]
['text':' The code generated below expects that the current stack pointer points','line_number':1014,'multiline':False]
['text':' to an Ion or Baseline frame, at the state it would be immediately','line_number':1015,'multiline':False]
['text':' before a ret().  Thus, after this stub's business is done, it executes','line_number':1016,'multiline':False]
['text':' a ret() and returns directly to the caller script, on behalf of the','line_number':1017,'multiline':False]
['text':' callee script that jumped to this code.','line_number':1018,'multiline':False]
['text':'','line_number':1019,'multiline':False]
['text':' Thus the expected stack is:','line_number':1020,'multiline':False]
['text':'','line_number':1021,'multiline':False]
['text':'                                   StackPointer ----+','line_number':1022,'multiline':False]
['text':'                                                    v','line_number':1023,'multiline':False]
['text':' ..., ActualArgc, CalleeToken, Descriptor, ReturnAddr','line_number':1024,'multiline':False]
['text':' MEM-HI                                       MEM-LOW','line_number':1025,'multiline':False]
['text':'','line_number':1026,'multiline':False]
['text':'','line_number':1027,'multiline':False]
['text':' The generated jitcode is responsible for overwriting the','line_number':1028,'multiline':False]
['text':' jitActivation->lastProfilingFrame field with a pointer to the previous','line_number':1029,'multiline':False]
['text':' Ion or Baseline jit-frame that was pushed before this one. It is also','line_number':1030,'multiline':False]
['text':' responsible for overwriting jitActivation->lastProfilingCallSite with','line_number':1031,'multiline':False]
['text':' the return address into that frame.  The frame could either be an','line_number':1032,'multiline':False]
['text':' immediate "caller" frame, or it could be a frame in a previous','line_number':1033,'multiline':False]
['text':' JitActivation (if the current frame was entered from C++, and the C++','line_number':1034,'multiline':False]
['text':' was entered by some caller jit-frame further down the stack).','line_number':1035,'multiline':False]
['text':'','line_number':1036,'multiline':False]
['text':' So this jitcode is responsible for "walking up" the jit stack, finding','line_number':1037,'multiline':False]
['text':' the previous Ion or Baseline JS frame, and storing its address and the','line_number':1038,'multiline':False]
['text':' return address into the appropriate fields on the current jitActivation.','line_number':1039,'multiline':False]
['text':'','line_number':1040,'multiline':False]
['text':' There are a fixed number of different path types that can lead to the','line_number':1041,'multiline':False]
['text':' current frame, which is either a baseline or ion frame:','line_number':1042,'multiline':False]
['text':'','line_number':1043,'multiline':False]
['text':' <Baseline-Or-Ion>','line_number':1044,'multiline':False]
['text':' ^','line_number':1045,'multiline':False]
['text':' |','line_number':1046,'multiline':False]
['text':' ^--- Ion','line_number':1047,'multiline':False]
['text':' |','line_number':1048,'multiline':False]
['text':' ^--- Baseline Stub <---- Baseline','line_number':1049,'multiline':False]
['text':' |','line_number':1050,'multiline':False]
['text':' ^--- Argument Rectifier','line_number':1051,'multiline':False]
['text':' |    ^','line_number':1052,'multiline':False]
['text':' |    |','line_number':1053,'multiline':False]
['text':' |    ^--- Ion','line_number':1054,'multiline':False]
['text':' |    |','line_number':1055,'multiline':False]
['text':' |    ^--- Baseline Stub <---- Baseline','line_number':1056,'multiline':False]
['text':' |','line_number':1057,'multiline':False]
['text':' ^--- Entry Frame (From C++)','line_number':1058,'multiline':False]
['text':'','line_number':1059,'multiline':False]
['text':' Ensure that frame we are exiting is current lastProfilingFrame','line_number':1071,'multiline':False]
['text':' Load the frame descriptor into |scratch1|, figure out what to do depending','line_number':1084,'multiline':False]
['text':' on its type.','line_number':1085,'multiline':False]
['text':' Going into the conditionals, we will have:','line_number':1089,'multiline':False]
['text':'      FrameDescriptor.size in scratch1','line_number':1090,'multiline':False]
['text':'      FrameDescriptor.type in scratch2','line_number':1091,'multiline':False]
['text':' Handling of each case is dependent on FrameDescriptor.type','line_number':1095,'multiline':False]
['text':' The WasmToJSJit is just another kind of entry.','line_number':1116,'multiline':False]
['text':'','line_number':1123,'multiline':False]
['text':' FrameType::IonJS','line_number':1124,'multiline':False]
['text':'','line_number':1125,'multiline':False]
['text':' Stack layout:','line_number':1126,'multiline':False]
['text':'                  ...','line_number':1127,'multiline':False]
['text':'                  Ion-Descriptor','line_number':1128,'multiline':False]
['text':'     Prev-FP ---> Ion-ReturnAddr','line_number':1129,'multiline':False]
['text':'                  ... previous frame data ... |- Descriptor.Size','line_number':1130,'multiline':False]
['text':'                  ... arguments ...           |','line_number':1131,'multiline':False]
['text':'                  ActualArgc          |','line_number':1132,'multiline':False]
['text':'                  CalleeToken         |- JitFrameLayout::Size()','line_number':1133,'multiline':False]
['text':'                  Descriptor          |','line_number':1134,'multiline':False]
['text':'        FP -----> ReturnAddr          |','line_number':1135,'multiline':False]
['text':'','line_number':1136,'multiline':False]
['text':' |scratch1| contains Descriptor.size','line_number':1139,'multiline':False]
['text':' returning directly to an IonJS frame.  Store return addr to frame','line_number':1141,'multiline':False]
['text':' in lastProfilingCallSite.','line_number':1142,'multiline':False]
['text':' Store return frame in lastProfilingFrame.','line_number':1147,'multiline':False]
['text':' scratch2 := StackPointer + Descriptor.size*1 + JitFrameLayout::Size();','line_number':1148,'multiline':False]
['text':'','line_number':1155,'multiline':False]
['text':' FrameType::BaselineStub','line_number':1156,'multiline':False]
['text':'','line_number':1157,'multiline':False]
['text':' Look past the stub and store the frame pointer to','line_number':1158,'multiline':False]
['text':' the baselineJS frame prior to it.','line_number':1159,'multiline':False]
['text':'','line_number':1160,'multiline':False]
['text':' Stack layout:','line_number':1161,'multiline':False]
['text':'              ...','line_number':1162,'multiline':False]
['text':'              BL-Descriptor','line_number':1163,'multiline':False]
['text':' Prev-FP ---> BL-ReturnAddr','line_number':1164,'multiline':False]
['text':'      +-----> BL-PrevFramePointer','line_number':1165,'multiline':False]
['text':'      |       ... BL-FrameData ...','line_number':1166,'multiline':False]
['text':'      |       BLStub-Descriptor','line_number':1167,'multiline':False]
['text':'      |       BLStub-ReturnAddr','line_number':1168,'multiline':False]
['text':'      |       BLStub-StubPointer          |','line_number':1169,'multiline':False]
['text':'      +------ BLStub-SavedFramePointer    |- Descriptor.Size','line_number':1170,'multiline':False]
['text':'              ... arguments ...           |','line_number':1171,'multiline':False]
['text':'              ActualArgc          |','line_number':1172,'multiline':False]
['text':'              CalleeToken         |- JitFrameLayout::Size()','line_number':1173,'multiline':False]
['text':'              Descriptor          |','line_number':1174,'multiline':False]
['text':'    FP -----> ReturnAddr          |','line_number':1175,'multiline':False]
['text':'','line_number':1176,'multiline':False]
['text':' We take advantage of the fact that the stub frame saves the frame','line_number':1177,'multiline':False]
['text':' pointer pointing to the baseline frame, so a bunch of calculation can','line_number':1178,'multiline':False]
['text':' be avoided.','line_number':1179,'multiline':False]
['text':'','line_number':1180,'multiline':False]
['text':' Skip past BL-PrevFramePtr','line_number':1193,'multiline':False]
['text':'','line_number':1198,'multiline':False]
['text':' FrameType::Rectifier','line_number':1199,'multiline':False]
['text':'','line_number':1200,'multiline':False]
['text':' The rectifier frame can be preceded by either an IonJS, a BaselineStub,','line_number':1201,'multiline':False]
['text':' or a CppToJSJit/WasmToJSJit frame.','line_number':1202,'multiline':False]
['text':'','line_number':1203,'multiline':False]
['text':' Stack layout if caller of rectifier was Ion or CppToJSJit/WasmToJSJit:','line_number':1204,'multiline':False]
['text':'','line_number':1205,'multiline':False]
['text':'              Ion-Descriptor','line_number':1206,'multiline':False]
['text':'              Ion-ReturnAddr','line_number':1207,'multiline':False]
['text':'              ... ion frame data ... |- Rect-Descriptor.Size','line_number':1208,'multiline':False]
['text':'              < COMMON LAYOUT >','line_number':1209,'multiline':False]
['text':'','line_number':1210,'multiline':False]
['text':' Stack layout if caller of rectifier was Baseline:','line_number':1211,'multiline':False]
['text':'','line_number':1212,'multiline':False]
['text':'              BL-Descriptor','line_number':1213,'multiline':False]
['text':' Prev-FP ---> BL-ReturnAddr','line_number':1214,'multiline':False]
['text':'      +-----> BL-SavedFramePointer','line_number':1215,'multiline':False]
['text':'      |       ... baseline frame data ...','line_number':1216,'multiline':False]
['text':'      |       BLStub-Descriptor','line_number':1217,'multiline':False]
['text':'      |       BLStub-ReturnAddr','line_number':1218,'multiline':False]
['text':'      |       BLStub-StubPointer          |','line_number':1219,'multiline':False]
['text':'      +------ BLStub-SavedFramePointer    |- Rect-Descriptor.Size','line_number':1220,'multiline':False]
['text':'              ... args to rectifier ...   |','line_number':1221,'multiline':False]
['text':'              < COMMON LAYOUT >','line_number':1222,'multiline':False]
['text':'','line_number':1223,'multiline':False]
['text':' Common stack layout:','line_number':1224,'multiline':False]
['text':'','line_number':1225,'multiline':False]
['text':'              ActualArgc          |','line_number':1226,'multiline':False]
['text':'              CalleeToken         |- IonRectitiferFrameLayout::Size()','line_number':1227,'multiline':False]
['text':'              Rect-Descriptor     |','line_number':1228,'multiline':False]
['text':'              Rect-ReturnAddr     |','line_number':1229,'multiline':False]
['text':'              ... rectifier data & args ... |- Descriptor.Size','line_number':1230,'multiline':False]
['text':'              ActualArgc      |','line_number':1231,'multiline':False]
['text':'              CalleeToken     |- JitFrameLayout::Size()','line_number':1232,'multiline':False]
['text':'              Descriptor      |','line_number':1233,'multiline':False]
['text':'    FP -----> ReturnAddr      |','line_number':1234,'multiline':False]
['text':'','line_number':1235,'multiline':False]
['text':' scratch2 := StackPointer + Descriptor.size*1 + JitFrameLayout::Size();','line_number':1238,'multiline':False]
['text':' Now |scratch1| contains Rect-Descriptor.Size','line_number':1246,'multiline':False]
['text':' and |scratch2| points to Rectifier frame','line_number':1247,'multiline':False]
['text':' and |scratch3| contains Rect-Descriptor.Type','line_number':1248,'multiline':False]
['text':' Check for either Ion or BaselineStub frame.','line_number':1252,'multiline':False]
['text':' Handle Rectifier <- IonJS','line_number':1257,'multiline':False]
['text':' scratch3 := RectFrame[ReturnAddr]','line_number':1258,'multiline':False]
['text':' scratch3 := RectFrame + Rect-Descriptor.Size +','line_number':1264,'multiline':False]
['text':'             RectifierFrameLayout::Size()','line_number':1265,'multiline':False]
['text':' Check for either BaselineStub or a CppToJSJit/WasmToJSJit entry','line_number':1273,'multiline':False]
['text':' frame.','line_number':1274,'multiline':False]
['text':' Handle Rectifier <- BaselineStub <- BaselineJS','line_number':1278,'multiline':False]
['text':' FrameType::IonICCall','line_number':1294,'multiline':False]
['text':'','line_number':1295,'multiline':False]
['text':' The caller is always an IonJS frame.','line_number':1296,'multiline':False]
['text':'','line_number':1297,'multiline':False]
['text':'              Ion-Descriptor','line_number':1298,'multiline':False]
['text':'              Ion-ReturnAddr','line_number':1299,'multiline':False]
['text':'              ... ion frame data ... |- CallFrame-Descriptor.Size','line_number':1300,'multiline':False]
['text':'              StubCode               |','line_number':1301,'multiline':False]
['text':'              ICCallFrame-Descriptor |- IonICCallFrameLayout::Size()','line_number':1302,'multiline':False]
['text':'              ICCallFrame-ReturnAddr |','line_number':1303,'multiline':False]
['text':'              ... call frame data & args ... |- Descriptor.Size','line_number':1304,'multiline':False]
['text':'              ActualArgc      |','line_number':1305,'multiline':False]
['text':'              CalleeToken     |- JitFrameLayout::Size()','line_number':1306,'multiline':False]
['text':'              Descriptor      |','line_number':1307,'multiline':False]
['text':'    FP -----> ReturnAddr      |','line_number':1308,'multiline':False]
['text':' scratch2 := StackPointer + Descriptor.size + JitFrameLayout::Size()','line_number':1311,'multiline':False]
['text':' scratch3 := ICCallFrame-Descriptor.Size','line_number':1315,'multiline':False]
['text':' Assert previous frame is an IonJS frame.','line_number':1319,'multiline':False]
['text':' lastProfilingCallSite := ICCallFrame-ReturnAddr','line_number':1332,'multiline':False]
['text':' lastProfilingFrame := ICCallFrame + ICCallFrame-Descriptor.Size +','line_number':1338,'multiline':False]
['text':'                       IonICCallFrameLayout::Size()','line_number':1339,'multiline':False]
['text':'','line_number':1346,'multiline':False]
['text':' FrameType::CppToJSJit / FrameType::WasmToJSJit','line_number':1347,'multiline':False]
['text':'','line_number':1348,'multiline':False]
['text':' If at an entry frame, store null into both fields.','line_number':1349,'multiline':False]
['text':' A fast-path wasm->jit transition frame is an entry frame from the point','line_number':1350,'multiline':False]
['text':' of view of the JIT.','line_number':1351,'multiline':False]
['text':'','line_number':1352,'multiline':False]
