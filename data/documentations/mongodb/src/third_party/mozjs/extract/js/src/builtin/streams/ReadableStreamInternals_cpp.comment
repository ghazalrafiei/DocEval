['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]
['text':' The interface between readable streams and controllers. ','line_number':7,'multiline':True]
['text':' MOZ_ASSERT{,_IF}','line_number':11,'multiline':False]
['text':' uint32_t','line_number':13,'multiline':False]
['text':' js::AssertSameCompartment','line_number':15,'multiline':False]
['text':' js::ReadableStreamController{,CancelSteps}','line_number':17,'multiline':False]
['text':' js::ReadableStream{,Default}Reader, js::ForAuthorCodeBool','line_number':18,'multiline':False]
['text':' js::gc::AllocKind','line_number':19,'multiline':False]
['text':' JS::CallArgs{,FromVp}','line_number':20,'multiline':False]
['text':' JS::AutoSuppressGCAnalysis','line_number':21,'multiline':False]
['text':' JS::CallOriginalPromiseThen, JS::ResolvePromise','line_number':22,'multiline':False]
['text':' JS_TRY_VAR_OR_RETURN_NULL','line_number':23,'multiline':False]
['text':' JS::Handle, JS::Rooted','line_number':24,'multiline':False]
['text':' JS::ReadableStreamUnderlyingSource, JS::ReadableStreamMode','line_number':25,'multiline':False]
['text':' JS::Value, JS::{Boolean,Object}Value, JS::UndefinedHandleValue','line_number':26,'multiline':False]
['text':' JSContext','line_number':27,'multiline':False]
['text':' JSFunction, js::NewNativeFunction','line_number':28,'multiline':False]
['text':' js::GenericObject','line_number':29,'multiline':False]
['text':' js::NativeObject, js::PlainObject','line_number':30,'multiline':False]
['text':' js::PromiseObject, js::PromiseResolvedWithUndefined','line_number':31,'multiline':False]
['text':' JS::Realm','line_number':32,'multiline':False]
['text':' js::PropertyName','line_number':33,'multiline':False]
['text':' js::SetSettledPromiseIsHandled','line_number':35,'multiline':False]
['text':' js::{Reject,Resolve}UnwrappedPromiseWithUndefined','line_number':36,'multiline':False]
['text':' js::js::UnwrapReaderFromStream{,NoThrow}','line_number':37,'multiline':False]
['text':' JS::Compartment::wrap','line_number':38,'multiline':False]
['text':' JSContext::check','line_number':39,'multiline':False]
['text':' js::ListObject, js::AppendToListInFixedSlot, js::StoreNewListInFixedSlot','line_number':40,'multiline':False]
['text':' js::PlainObject::createWithTemplate','line_number':41,'multiline':False]
['text':' JS::Realm','line_number':42,'multiline':False]
['text':'** 3.5. The interface between readable streams and controllers ***********','line_number':57,'multiline':True]
['text':'*
 * Streams spec, 3.5.1.
 *      ReadableStreamAddReadIntoRequest ( stream, forAuthorCode )
 * Streams spec, 3.5.2.
 *      ReadableStreamAddReadRequest ( stream, forAuthorCode )
 *
 * Our implementation does not pass around forAuthorCode parameters in the same
 * places as the standard, but the effect is the same. See the comment on
 * `ReadableStreamReader::forAuthorCode()`.
 ','line_number':59,'multiline':True]
['text':' Step 1: Assert: ! IsReadableStream{BYOB,Default}Reader(stream.[[reader]])','line_number':71,'multiline':False]
['text':'         is true.','line_number':72,'multiline':False]
['text':' (Only default readers exist so far.)','line_number':73,'multiline':False]
['text':' Step 2 of 3.5.1: Assert: stream.[[state]] is "readable" or "closed".','line_number':81,'multiline':False]
['text':' Step 2 of 3.5.2: Assert: stream.[[state]] is "readable".','line_number':82,'multiline':False]
['text':' Step 3: Let promise be a new promise.','line_number':87,'multiline':False]
['text':' Step 4: Let read{Into}Request be','line_number':93,'multiline':False]
['text':'         Record {[[promise]]: promise, [[forAuthorCode]]: forAuthorCode}.','line_number':94,'multiline':False]
['text':' Step 5: Append read{Into}Request as the last element of','line_number':95,'multiline':False]
['text':'         stream.[[reader]].[[read{Into}Requests]].','line_number':96,'multiline':False]
['text':' Since we don't need the [[forAuthorCode]] field (see the comment on','line_number':97,'multiline':False]
['text':' `ReadableStreamReader::forAuthorCode()`), we elide the Record and store','line_number':98,'multiline':False]
['text':' only the promise.','line_number':99,'multiline':False]
['text':' Step 6: Return promise.','line_number':105,'multiline':False]
['text':'*
 * Used for transforming the result of promise fulfillment/rejection.
 ','line_number':109,'multiline':True]
['text':'*
 * Streams spec, 3.5.3. ReadableStreamCancel ( stream, reason )
 ','line_number':118,'multiline':True]
['text':' Step 1: Set stream.[[disturbed]] to true.','line_number':126,'multiline':False]
['text':' Step 2: If stream.[[state]] is "closed", return a promise resolved with','line_number':129,'multiline':False]
['text':'         undefined.','line_number':130,'multiline':False]
['text':' Step 3: If stream.[[state]] is "errored", return a promise rejected with','line_number':135,'multiline':False]
['text':'         stream.[[storedError]].','line_number':136,'multiline':False]
['text':' Step 4: Perform ! ReadableStreamClose(stream).','line_number':145,'multiline':False]
['text':' Step 5: Let sourceCancelPromise be','line_number':150,'multiline':False]
['text':'         ! stream.[[readableStreamController]].[[CancelSteps]](reason).','line_number':151,'multiline':False]
['text':' Step 6: Return the result of reacting to sourceCancelPromise with a','line_number':160,'multiline':False]
['text':'         fulfillment step that returns undefined.','line_number':161,'multiline':False]
['text':'*
 * Streams spec, 3.5.4. ReadableStreamClose ( stream )
 ','line_number':173,'multiline':True]
['text':' Step 1: Assert: stream.[[state]] is "readable".','line_number':178,'multiline':False]
['text':' Step 2: Set stream.[[state]] to "closed".','line_number':181,'multiline':False]
['text':' Step 4: If reader is undefined, return (reordered).','line_number':184,'multiline':False]
['text':' Step 3: Let reader be stream.[[reader]].','line_number':189,'multiline':False]
['text':' Step 5: If ! IsReadableStreamDefaultReader(reader) is true,','line_number':196,'multiline':False]
['text':' Step a: Repeat for each readRequest that is an element of','line_number':200,'multiline':False]
['text':'         reader.[[readRequests]],','line_number':201,'multiline':False]
['text':' Step i: Resolve readRequest.[[promise]] with','line_number':208,'multiline':False]
['text':'         ! ReadableStreamCreateReadResult(undefined, true,','line_number':209,'multiline':False]
['text':'                                          readRequest.[[forAuthorCode]]).','line_number':210,'multiline':False]
['text':' Step b: Set reader.[[readRequests]] to an empty List.','line_number':227,'multiline':False]
['text':' Step 6: Resolve reader.[[closedPromise]] with undefined.','line_number':231,'multiline':False]
['text':' Make sure we're in the stream's compartment.','line_number':238,'multiline':False]
['text':'*
 * Streams spec, 3.5.5. ReadableStreamCreateReadResult ( value, done,
 *                                                       forAuthorCode )
 ','line_number':248,'multiline':True]
['text':' Step 1: Let prototype be null.','line_number':255,'multiline':False]
['text':' Step 2: If forAuthorCode is true, set prototype to %ObjectPrototype%.','line_number':256,'multiline':False]
['text':' Step 3: Assert: Type(done) is Boolean (implicit).','line_number':267,'multiline':False]
['text':' Step 4: Let obj be ObjectCreate(prototype).','line_number':269,'multiline':False]
['text':' Step 5: Perform CreateDataProperty(obj, "value", value).','line_number':274,'multiline':False]
['text':' Step 6: Perform CreateDataProperty(obj, "done", done).','line_number':277,'multiline':False]
['text':' Step 7: Return obj.','line_number':280,'multiline':False]
['text':'*
 * Streams spec, 3.5.6. ReadableStreamError ( stream, e )
 ','line_number':284,'multiline':True]
['text':' Step 1: Assert: ! IsReadableStream(stream) is true (implicit).','line_number':289,'multiline':False]
['text':' Step 2: Assert: stream.[[state]] is "readable".','line_number':291,'multiline':False]
['text':' Step 3: Set stream.[[state]] to "errored".','line_number':294,'multiline':False]
['text':' Step 4: Set stream.[[storedError]] to e.','line_number':297,'multiline':False]
['text':' Step 6: If reader is undefined, return (reordered).','line_number':307,'multiline':False]
['text':' Step 5: Let reader be stream.[[reader]].','line_number':312,'multiline':False]
['text':' Steps 7-8: (Identical in our implementation.)','line_number':319,'multiline':False]
['text':' Step 7.a/8.b: Repeat for each read{Into}Request that is an element of','line_number':320,'multiline':False]
['text':'               reader.[[read{Into}Requests]],','line_number':321,'multiline':False]
['text':' Step i: Reject read{Into}Request.[[promise]] with e.','line_number':327,'multiline':False]
['text':' Responses have to be created in the compartment from which the error','line_number':328,'multiline':False]
['text':' was triggered, which might not be the same as the one the request was','line_number':329,'multiline':False]
['text':' created in, so we have to wrap requests here.','line_number':330,'multiline':False]
['text':' Step 7.b/8.c: Set reader.[[read{Into}Requests]] to a new empty List.','line_number':338,'multiline':False]
['text':' Step 9: Reject reader.[[closedPromise]] with e.','line_number':344,'multiline':False]
['text':' Step 10: Set reader.[[closedPromise]].[[PromiseIsHandled]] to true.','line_number':350,'multiline':False]
['text':'','line_number':351,'multiline':False]
['text':' `closedPromise` can return a CCW, but that case is filtered out by step 6,','line_number':352,'multiline':False]
['text':' given the only place that can set [[closedPromise]] to a CCW is','line_number':353,'multiline':False]
['text':' 3.8.5 ReadableStreamReaderGenericRelease step 4, and','line_number':354,'multiline':False]
['text':' 3.8.5 ReadableStreamReaderGenericRelease step 6 sets','line_number':355,'multiline':False]
['text':' stream.[[reader]] to undefined.','line_number':356,'multiline':False]
['text':' Make sure we're in the stream's compartment.','line_number':361,'multiline':False]
['text':' Ensure that the embedding doesn't have to deal with','line_number':366,'multiline':False]
['text':' mixed-compartment arguments to the callback.','line_number':367,'multiline':False]
['text':'*
 * Streams spec, 3.5.7.
 *      ReadableStreamFulfillReadIntoRequest( stream, chunk, done )
 * Streams spec, 3.5.8.
 *      ReadableStreamFulfillReadRequest ( stream, chunk, done )
 * These two spec functions are identical in our implementation.
 ','line_number':378,'multiline':True]
['text':' Step 1: Let reader be stream.[[reader]].','line_number':390,'multiline':False]
['text':' Step 2: Let read{Into}Request be the first element of','line_number':397,'multiline':False]
['text':'         reader.[[read{Into}Requests]].','line_number':398,'multiline':False]
['text':' Step 3: Remove read{Into}Request from reader.[[read{Into}Requests]],','line_number':399,'multiline':False]
['text':'         shifting all other elements downward (so that the second becomes','line_number':400,'multiline':False]
['text':'         the first, and so on).','line_number':401,'multiline':False]
['text':' Step 4: Resolve read{Into}Request.[[promise]] with','line_number':411,'multiline':False]
['text':'         ! ReadableStreamCreateReadResult(chunk, done,','line_number':412,'multiline':False]
['text':'         readIntoRequest.[[forAuthorCode]]).','line_number':413,'multiline':False]
['text':'*
 * Streams spec, 3.5.9. ReadableStreamGetNumReadIntoRequests ( stream )
 * Streams spec, 3.5.10. ReadableStreamGetNumReadRequests ( stream )
 * (Identical implementation.)
 ','line_number':424,'multiline':True]
['text':' Step 1: Return the number of elements in','line_number':430,'multiline':False]
['text':'         stream.[[reader]].[[read{Into}Requests]].','line_number':431,'multiline':False]
['text':' Reader is a dead wrapper, treat it as non-existent.','line_number':439,'multiline':False]
['text':' Streams spec, 3.5.11. ReadableStreamHasBYOBReader ( stream )','line_number':447,'multiline':False]
['text':'','line_number':448,'multiline':False]
['text':' Not implemented.','line_number':449,'multiline':False]
['text':'*
 * Streams spec 3.5.12. ReadableStreamHasDefaultReader ( stream )
 ','line_number':451,'multiline':True]
['text':' Step 1: Let reader be stream.[[reader]].','line_number':456,'multiline':False]
['text':' Step 2: If reader is undefined, return false.','line_number':457,'multiline':False]
['text':' Step 3: If ! ReadableStreamDefaultReader(reader) is false, return false.','line_number':468,'multiline':False]
['text':' Step 4: Return true.','line_number':469,'multiline':False]
