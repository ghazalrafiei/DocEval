['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 *
 * Copyright 2016 Mozilla Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ','line_number':1,'multiline':True]
['text':' js::GetErrorMessage, JSMSG_*','line_number':36,'multiline':False]
['text':' js::PlainObject','line_number':40,'multiline':False]
['text':' TODO(1626251): Consolidate definitions into Iterable.h','line_number':119,'multiline':False]
['text':' Result is either one scalar value to unpack to a wasm value, or','line_number':154,'multiline':False]
['text':' an ignored value for a zero-valued function.','line_number':155,'multiline':False]
['text':' The values are converted in the order they are pushed on the','line_number':181,'multiline':False]
['text':' abstract WebAssembly stack; switch to iterate in push order.','line_number':182,'multiline':False]
['text':' Use rval as a scratch area to hold the extracted result.','line_number':190,'multiline':False]
['text':' Currently, if a function type has results, there can be only','line_number':193,'multiline':False]
['text':' one register result.  If there is only one result, it is','line_number':194,'multiline':False]
['text':' returned as a scalar and not an iterable, so we don't get here.','line_number':195,'multiline':False]
['text':' If there are multiple results, we extract the register result','line_number':196,'multiline':False]
['text':' and set `argv[0]` set to the extracted result, to be returned by','line_number':197,'multiline':False]
['text':' register in the stub.  The register result follows any stack','line_number':198,'multiline':False]
['text':' results, so this preserves conversion order.','line_number':199,'multiline':False]
['text':' The import may already have become optimized.','line_number':282,'multiline':False]
['text':' Test if the function is JIT compiled.','line_number':292,'multiline':False]
['text':' Skip if the function does not have a signature that allows for a JIT exit.','line_number':302,'multiline':False]
['text':' Let's optimize it!','line_number':307,'multiline':False]
['text':' static ','line_number':313,'multiline':True]
['text':' 0 to signal trap; 1 to signal OK ','line_number':313,'multiline':True]
['text':' static ','line_number':320,'multiline':True]
['text':' If there has been a moving grow, this Instance should have been notified.','line_number':330,'multiline':False]
['text':' static ','line_number':337,'multiline':True]
['text':' This invariant must hold when running Wasm code. Assert it here so we can','line_number':340,'multiline':False]
['text':' write tests for cross-realm calls.','line_number':341,'multiline':False]
['text':' Ensure that the memory size is no more than 4GiB.','line_number':346,'multiline':False]
['text':' static ','line_number':396,'multiline':True]
['text':' static ','line_number':402,'multiline':True]
['text':' static ','line_number':408,'multiline':True]
['text':' The alignment guard is not in the wasm spec as of 2017-11-02, but is','line_number':414,'multiline':False]
['text':' considered likely to appear, as 4-byte alignment is required for WAKE by','line_number':415,'multiline':False]
['text':' the spec's validation algorithm.','line_number':416,'multiline':False]
['text':' Bounds check and deal with arithmetic overflow.','line_number':450,'multiline':False]
['text':' static ','line_number':465,'multiline':True]
['text':' static ','line_number':478,'multiline':True]
['text':' static ','line_number':496,'multiline':True]
['text':' Drop this instance's reference to the DataSegment so it can be released.','line_number':509,'multiline':False]
['text':' Bounds check and deal with arithmetic overflow.','line_number':517,'multiline':False]
['text':' The required write direction is upward, but that is not currently','line_number':527,'multiline':False]
['text':' observable as there are no fences nor any read/write protect operation.','line_number':528,'multiline':False]
['text':' static ','line_number':533,'multiline':True]
['text':' static ','line_number':544,'multiline':True]
['text':' static ','line_number':559,'multiline':True]
['text':' We are proposing to copy','line_number':585,'multiline':False]
['text':'','line_number':586,'multiline':False]
['text':'   seg.bytes.begin()[ srcOffset .. srcOffset + len - 1 ]','line_number':587,'multiline':False]
['text':' to','line_number':588,'multiline':False]
['text':'   memoryBase[ dstOffset .. dstOffset + len - 1 ]','line_number':589,'multiline':False]
['text':' Bounds check and deal with arithmetic overflow.','line_number':591,'multiline':False]
['text':' The required read/write direction is upward, but that is not currently','line_number':601,'multiline':False]
['text':' observable as there are no fences nor any read/write protect operation.','line_number':602,'multiline':False]
['text':'Unshared','line_number':608,'multiline':True]
['text':' static ','line_number':614,'multiline':True]
['text':' Bounds check and deal with arithmetic overflow.','line_number':626,'multiline':False]
['text':' No-op','line_number':647,'multiline':False]
['text':' static ','line_number':663,'multiline':True]
['text':' Drop this instance's reference to the ElemSegment so it can be released.','line_number':676,'multiline':False]
['text':' Note, fnref must be rooted if we do anything more than just store it.','line_number':702,'multiline':False]
['text':' OOM, which has already been reported.','line_number':705,'multiline':False]
['text':' This element is a wasm function imported from another','line_number':713,'multiline':False]
['text':' instance. To preserve the === function identity required by','line_number':714,'multiline':False]
['text':' the JS embedding spec, we must set the element to the','line_number':715,'multiline':False]
['text':' imported function's underlying CodeRange.funcCheckedCallEntry and','line_number':716,'multiline':False]
['text':' Instance so that future Table.get()s produce the same','line_number':717,'multiline':False]
['text':' function object as was imported.','line_number':718,'multiline':False]
['text':' static ','line_number':740,'multiline':True]
['text':' We are proposing to copy','line_number':766,'multiline':False]
['text':'','line_number':767,'multiline':False]
['text':'   seg[ srcOffset .. srcOffset + len - 1 ]','line_number':768,'multiline':False]
['text':' to','line_number':769,'multiline':False]
['text':'   tableBase[ dstOffset .. dstOffset + len - 1 ]','line_number':770,'multiline':False]
['text':' Bounds check and deal with arithmetic overflow.','line_number':772,'multiline':False]
['text':' OOM, which has already been reported.','line_number':783,'multiline':False]
['text':' static ','line_number':789,'multiline':True]
['text':' Bounds check and deal with arithmetic overflow.','line_number':797,'multiline':False]
['text':' static ','line_number':819,'multiline':True]
['text':' static ','line_number':845,'multiline':True]
['text':' static ','line_number':870,'multiline':True]
['text':' static ','line_number':895,'multiline':True]
['text':' static ','line_number':902,'multiline':True]
['text':' If this is an import, we need to recover the original function to maintain','line_number':910,'multiline':False]
['text':' reference equality between a re-exported function and 'ref.func'. The','line_number':911,'multiline':False]
['text':' identity of the imported function object is stable across tiers, which is','line_number':912,'multiline':False]
['text':' what we want.','line_number':913,'multiline':False]
['text':'','line_number':914,'multiline':False]
['text':' Use the imported function only if it is an exported function, otherwise','line_number':915,'multiline':False]
['text':' fall through to get a (possibly new) exported function.','line_number':916,'multiline':False]
['text':' Validation ensures that we always have a valid funcIndex, so we must','line_number':928,'multiline':False]
['text':' have OOM'ed','line_number':929,'multiline':False]
['text':' static ','line_number':937,'multiline':True]
['text':' static ','line_number':944,'multiline':True]
['text':' static ','line_number':952,'multiline':True]
['text':' The typeIndex is an index into the rttValues_ table in the instance.','line_number':963,'multiline':False]
['text':' That table holds RttValue objects.','line_number':964,'multiline':False]
['text':'','line_number':965,'multiline':False]
['text':' When we fail to allocate we return a nullptr; the wasm side must check this','line_number':966,'multiline':False]
['text':' and propagate it as an error.','line_number':967,'multiline':False]
['text':' static ','line_number':969,'multiline':True]
['text':' static ','line_number':977,'multiline':True]
['text':' static ','line_number':987,'multiline':True]
['text':' static ','line_number':1011,'multiline':True]
['text':' By always returning a nullptr, we trigger a wasmTrap(Trap::ThrowReported),','line_number':1025,'multiline':False]
['text':' and use that to trigger the stack walking for this exception.','line_number':1026,'multiline':False]
['text':' static ','line_number':1030,'multiline':True]
['text':' Signal an unknown exception tag, e.g., for a non-imported exception or','line_number':1045,'multiline':False]
['text':' JS value.','line_number':1046,'multiline':False]
['text':' static ','line_number':1050,'multiline':True]
['text':' TODO/AnyRef-boxing: With boxed immediates and strings, this may need to','line_number':1060,'multiline':False]
['text':' handle other kinds of values.','line_number':1061,'multiline':False]
['text':' static ','line_number':1075,'multiline':True]
['text':' static ','line_number':1093,'multiline':True]
['text':' Note, dst must point into nonmoveable storage that is not in the nursery,','line_number':1104,'multiline':False]
['text':' this matters for the write barriers.  Furthermore, for pointer types the','line_number':1105,'multiline':False]
['text':' current value of *dst must be null so that only a post-barrier is required.','line_number':1106,'multiline':False]
['text':'','line_number':1107,'multiline':False]
['text':' Regarding the destination not being in the nursery, we have these cases.','line_number':1108,'multiline':False]
['text':' Either the written location is in the global data section in the','line_number':1109,'multiline':False]
['text':' WasmInstanceObject, or the Cell of a WasmGlobalObject:','line_number':1110,'multiline':False]
['text':'','line_number':1111,'multiline':False]
['text':' - WasmInstanceObjects are always tenured and u.ref_ may point to a','line_number':1112,'multiline':False]
['text':'   nursery object, so we need a post-barrier since the global data of an','line_number':1113,'multiline':False]
['text':'   instance is effectively a field of the WasmInstanceObject.','line_number':1114,'multiline':False]
['text':'','line_number':1115,'multiline':False]
['text':' - WasmGlobalObjects are always tenured, and they have a Cell field, so a','line_number':1116,'multiline':False]
['text':'   post-barrier may be needed for the same reason as above.','line_number':1117,'multiline':False]
['text':' TODO/AnyRef-boxing: With boxed immediates and strings, the write','line_number':1148,'multiline':False]
['text':' barrier is going to have to be more complicated.','line_number':1149,'multiline':False]
['text':' Currently the only events are exceptions.','line_number':1196,'multiline':False]
['text':' We assume that the limit is a 32-bit quantity','line_number':1213,'multiline':False]
['text':' Initialize function imports in the tls data','line_number':1226,'multiline':False]
['text':' Initialize tables in the tls data','line_number':1255,'multiline':False]
['text':' Initialize globals in the tls data','line_number':1263,'multiline':False]
['text':' Constants are baked into the code, never stored in the global area.','line_number':1267,'multiline':False]
['text':' Add observer if our memory base may grow','line_number':1307,'multiline':False]
['text':' Add observers if our tables may grow','line_number':1313,'multiline':False]
['text':' Allocate in the global type sets for structural type checks','line_number':1320,'multiline':False]
['text':' Transfer and allocate type objects for the struct types in the module','line_number':1322,'multiline':False]
['text':' Handle functions specially (for now) as they're guaranteed to be','line_number':1352,'multiline':False]
['text':' acyclical and can use simpler hash-consing logic.','line_number':1353,'multiline':False]
['text':' Take references to the passive data segments','line_number':1378,'multiline':False]
['text':' Take references to the passive element segments','line_number':1388,'multiline':False]
['text':' comparison ','line_number':1432,'multiline':True]
['text':' This method is only called from WasmInstanceObject so the only reason why','line_number':1443,'multiline':False]
['text':' TraceEdge is called is so that the pointer can be updated during a moving','line_number':1444,'multiline':False]
['text':' GC.','line_number':1445,'multiline':False]
['text':' OK to just do one tier here; though the tiers have different funcImports','line_number':1449,'multiline':False]
['text':' tables, they share the tls object.','line_number':1450,'multiline':False]
['text':' Indirect reference globals get traced by the owning WebAssembly.Global.','line_number':1460,'multiline':False]
['text':' Technically, instead of having this method, the caller could use','line_number':1488,'multiline':False]
['text':' Instance::object() to get the owning WasmInstanceObject to mark,','line_number':1489,'multiline':False]
['text':' but this method is simpler and more efficient. The trace hook of','line_number':1490,'multiline':False]
['text':' WasmInstanceObject will call Instance::tracePrivate at which point we','line_number':1491,'multiline':False]
['text':' can mark the rest of the children.','line_number':1492,'multiline':False]
['text':' |frame| points somewhere in the middle of the area described by |map|.','line_number':1506,'multiline':False]
['text':' We have to calculate |scanStart|, the lowest address that is described by','line_number':1507,'multiline':False]
['text':' |map|, by consulting |map->frameOffsetFromTop|.','line_number':1508,'multiline':False]
['text':' Do what we can to assert that, for consecutive wasm frames, their stack','line_number':1516,'multiline':False]
['text':' maps also abut exactly.  This is a useful sanity check on the sizing of','line_number':1517,'multiline':False]
['text':' stackmaps.','line_number':1518,'multiline':False]
['text':'','line_number':1519,'multiline':False]
['text':' In debug builds, the stackmap construction machinery goes to considerable','line_number':1520,'multiline':False]
['text':' efforts to ensure that the stackmaps for consecutive frames abut exactly.','line_number':1521,'multiline':False]
['text':' This is so as to ensure there are no areas of stack inadvertently ignored','line_number':1522,'multiline':False]
['text':' by a stackmap, nor covered by two stackmaps.  Hence any failure of this','line_number':1523,'multiline':False]
['text':' assertion is serious and should be investigated.','line_number':1524,'multiline':False]
['text':' This condition isn't kept for Cranelift','line_number':1526,'multiline':False]
['text':' (https://github.com/bytecodealliance/wasmtime/issues/2281), but this is ok','line_number':1527,'multiline':False]
['text':' to disable this assertion because when CL compiles a function, in the','line_number':1528,'multiline':False]
['text':' prologue, it (generates code) copies all of the in-memory arguments into','line_number':1529,'multiline':False]
['text':' registers. So, because of that, none of the in-memory argument words are','line_number':1530,'multiline':False]
['text':' actually live.','line_number':1531,'multiline':False]
['text':' If we have some exit stub words, this means the map also covers an area','line_number':1539,'multiline':False]
['text':' created by a exit stub, and so the highest word of that should be a','line_number':1540,'multiline':False]
['text':' constant created by (code created by) GenerateTrapExit.','line_number':1541,'multiline':False]
['text':' And actually hand them off to the GC.','line_number':1547,'multiline':False]
['text':' TODO/AnyRef-boxing: With boxed immediates and strings, the value may','line_number':1553,'multiline':False]
['text':' not be a traceable JSObject*.','line_number':1554,'multiline':False]
['text':' This assertion seems at least moderately effective in detecting','line_number':1557,'multiline':False]
['text':' discrepancies or misalignments between the map and reality.','line_number':1558,'multiline':False]
['text':' Finally, deal with any GC-managed fields in the DebugFrame, if it is','line_number':1567,'multiline':False]
['text':' present.','line_number':1568,'multiline':False]
['text':' TODO/AnyRef-boxing: With boxed immediates and strings, the value may','line_number':1573,'multiline':False]
['text':' not be a traceable JSObject*.','line_number':1574,'multiline':False]
['text':' If the best tier is Ion, life is simple: background compilation has','line_number':1633,'multiline':False]
['text':' already completed and has been committed, so there's no risk of race','line_number':1634,'multiline':False]
['text':' conditions here.','line_number':1635,'multiline':False]
['text':'','line_number':1636,'multiline':False]
['text':' If the best tier is Baseline, there could be a background compilation','line_number':1637,'multiline':False]
['text':' happening at the same time. The background compilation will lock the','line_number':1638,'multiline':False]
['text':' first tier lazy stubs first to stop new baseline stubs from being','line_number':1639,'multiline':False]
['text':' generated, then the second tier stubs to generate them.','line_number':1640,'multiline':False]
['text':'','line_number':1641,'multiline':False]
['text':' - either we take the tier1 lazy stub lock before the background','line_number':1642,'multiline':False]
['text':' compilation gets it, then we generate the lazy stub for tier1. When the','line_number':1643,'multiline':False]
['text':' background thread gets the tier1 lazy stub lock, it will see it has a','line_number':1644,'multiline':False]
['text':' lazy stub and will recompile it for tier2.','line_number':1645,'multiline':False]
['text':' - or we don't take the lock here first. Background compilation won't','line_number':1646,'multiline':False]
['text':' find a lazy stub for this function, thus won't generate it. So we'll do','line_number':1647,'multiline':False]
['text':' it ourselves after taking the tier2 lock.','line_number':1648,'multiline':False]
['text':'','line_number':1649,'multiline':False]
['text':' Also see doc block for stubs in WasmJS.cpp.','line_number':1650,'multiline':False]
['text':' The best tier might have changed after we've taken the lock.','line_number':1658,'multiline':False]
['text':' If it didn't have a stub in the first tier, background compilation','line_number':1675,'multiline':False]
['text':' shouldn't have made one in the second tier.','line_number':1676,'multiline':False]
['text':' EnsureEntryStubs() has ensured proper jit-entry stubs have been created and','line_number':1698,'multiline':False]
['text':' installed in funcIndex's JumpTable entry, so check against the presence of','line_number':1699,'multiline':False]
['text':' the provisional lazy stub.  See also','line_number':1700,'multiline':False]
['text':' WasmInstanceObject::getExportedFunction().','line_number':1701,'multiline':False]
['text':' No results: set to undefined, and we're done.','line_number':1723,'multiline':False]
['text':' If we added support for multiple register results, we'd need to establish a','line_number':1728,'multiline':False]
['text':' convention for how to store them to memory in registerResultLoc.  For now','line_number':1729,'multiline':False]
['text':' we can punt.','line_number':1730,'multiline':False]
['text':' Stack results written to stackResultsLoc; register result written','line_number':1733,'multiline':False]
['text':' to registerResultLoc.','line_number':1734,'multiline':False]
['text':' First, convert the register return value, and prepare to iterate in','line_number':1736,'multiline':False]
['text':' push order.  Note that if the register result is a reference type,','line_number':1737,'multiline':False]
['text':' it may be unrooted, so ToJSValue_anyref must not GC in that case.','line_number':1738,'multiline':False]
['text':' A single result: we're done.','line_number':1755,'multiline':False]
['text':' Otherwise, collect results in an array, in push order.','line_number':1759,'multiline':False]
['text':' It is necessary to zero storage for ref results, and it doesn't','line_number':1824,'multiline':False]
['text':' hurt to do so for other POD results.','line_number':1825,'multiline':False]
['text':' If there has been a moving grow, this Instance should have been notified.','line_number':1854,'multiline':False]
['text':' Lossless coercions can handle unexposable arguments or returns. This is','line_number':1865,'multiline':False]
['text':' only available in testing code.','line_number':1866,'multiline':False]
['text':' The calling convention for an external call into wasm is to pass an','line_number':1880,'multiline':False]
['text':' array of 16-byte values where each value contains either a coerced int32','line_number':1881,'multiline':False]
['text':' (in the low word), or a double value (in the low dword) value, with the','line_number':1882,'multiline':False]
['text':' coercions specified by the wasm signature. The external entry point','line_number':1883,'multiline':False]
['text':' unpacks this array into the system-ABI-specified registers and stack','line_number':1884,'multiline':False]
['text':' memory and then calls into the internal entry point. The return value is','line_number':1885,'multiline':False]
['text':' stored in the first element of the array (which, therefore, must have','line_number':1886,'multiline':False]
['text':' length >= 1).','line_number':1887,'multiline':False]
['text':' Store in rooted array until no more GC is possible.','line_number':1915,'multiline':False]
['text':' Copy over reference values from the rooted array, if any.','line_number':1940,'multiline':False]
['text':' Call the per-exported-function trampoline created by GenerateEntry.','line_number':1965,'multiline':False]
['text':' By spec, when a JS function is called as a constructor and this','line_number':1973,'multiline':False]
['text':' function returns a primary type, which is the case for all asm.js','line_number':1974,'multiline':False]
['text':' exported functions, the returned value is discarded and an empty','line_number':1975,'multiline':False]
['text':' object is returned instead.','line_number':1976,'multiline':False]
['text':' Note that we're not rooting the register result, if any; we depend','line_number':1985,'multiline':False]
['text':' on ResultsCollector::collect to root the value on our behalf,','line_number':1986,'multiline':False]
['text':' before causing any GC.','line_number':1987,'multiline':False]
['text':' The "display name" of a function is primarily shown in Error.stack which','line_number':2000,'multiline':False]
['text':' also includes location, so use getFuncNameBeforeLocation.','line_number':2001,'multiline':False]
['text':' We assume that the limit is a 32-bit quantity','line_number':2022,'multiline':False]
['text':' `theTable` has grown and we must update cached data for it.  Importantly,','line_number':2031,'multiline':False]
['text':' we can have cached those data in more than one location: we'll have','line_number':2032,'multiline':False]
['text':' cached them once for each time the table was imported into this instance.','line_number':2033,'multiline':False]
['text':'','line_number':2034,'multiline':False]
['text':' When an instance is registered as an observer of a table it is only','line_number':2035,'multiline':False]
['text':' registered once, regardless of how many times the table was imported.','line_number':2036,'multiline':False]
['text':' Thus when a table is grown, onMovingGrowTable() is only invoked once for','line_number':2037,'multiline':False]
['text':' the table.','line_number':2038,'multiline':False]
['text':'','line_number':2039,'multiline':False]
['text':' Ergo we must go through the entire list of tables in the instance here','line_number':2040,'multiline':False]
['text':' and check for the table in all the cached-data slots; we can't exit after','line_number':2041,'multiline':False]
['text':' the first hit.','line_number':2042,'multiline':False]
['text':' In the best case, we simply have a URL, from a streaming compilation of a','line_number':2054,'multiline':False]
['text':' fetched Response.','line_number':2055,'multiline':False]
['text':' Otherwise, build wasm module URL from following parts:','line_number':2061,'multiline':False]
['text':' - "wasm:" as protocol;','line_number':2062,'multiline':False]
['text':' - URI encoded filename from metadata (if can be encoded), plus ":";','line_number':2063,'multiline':False]
['text':' - 64-bit hash of the module bytes (as hex dump).','line_number':2064,'multiline':False]
['text':' EncodeURI returns false due to invalid chars or OOM -- fail only','line_number':2072,'multiline':False]
['text':' during OOM.','line_number':2073,'multiline':False]
