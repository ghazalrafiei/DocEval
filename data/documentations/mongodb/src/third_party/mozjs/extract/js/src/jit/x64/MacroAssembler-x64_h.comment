['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]
['text':' JS::BigInt','line_number':13,'multiline':False]
['text':' ScratchTagScope and ScratchTagScopeRelease are used to manage the tag','line_number':30,'multiline':False]
['text':' register for splitTagForTest(), which has different register management on','line_number':31,'multiline':False]
['text':' different platforms.  On 64-bit platforms it requires a scratch register that','line_number':32,'multiline':False]
['text':' does not interfere with other operations; on 32-bit platforms it uses a','line_number':33,'multiline':False]
['text':' register that is already part of the Value.','line_number':34,'multiline':False]
['text':'','line_number':35,'multiline':False]
['text':' The ScratchTagScope RAII type acquires the appropriate register; a reference','line_number':36,'multiline':False]
['text':' to a variable of this type is then passed to splitTagForTest().','line_number':37,'multiline':False]
['text':'','line_number':38,'multiline':False]
['text':' On 64-bit platforms ScratchTagScopeRelease makes the owned scratch register','line_number':39,'multiline':False]
['text':' available in a dynamic scope during compilation.  However it is important to','line_number':40,'multiline':False]
['text':' remember that that does not preserve the register value in any way, so this','line_number':41,'multiline':False]
['text':' RAII type should only be used along paths that eventually branch past further','line_number':42,'multiline':False]
['text':' uses of the extracted tag value.','line_number':43,'multiline':False]
['text':'','line_number':44,'multiline':False]
['text':' On 32-bit platforms ScratchTagScopeRelease has no effect, since it does not','line_number':45,'multiline':False]
['text':' manage a register, it only aliases a register in the ValueOperand.','line_number':46,'multiline':False]
['text':' Perform a downcast. Should be removed by Bug 996602.','line_number':66,'multiline':False]
['text':' The buffer is about to be linked, make sure any constant pools or excess','line_number':83,'multiline':False]
['text':' bookkeeping has been flushed to the instruction stream.','line_number':84,'multiline':False]
['text':'///////////////////////////////////////////////////////////////','line_number':87,'multiline':False]
['text':' X64 helpers.','line_number':88,'multiline':False]
['text':'///////////////////////////////////////////////////////////////','line_number':89,'multiline':False]
['text':' Raw GC pointer relocations and Value relocations both end up in','line_number':91,'multiline':False]
['text':' Assembler::TraceDataRelocations.','line_number':92,'multiline':False]
['text':' Refers to the upper 32 bits of a 64-bit Value operand.','line_number':102,'multiline':False]
['text':' On x86_64, the upper 32 bits do not necessarily only contain the type.','line_number':103,'multiline':False]
['text':'///////////////////////////////////////////////////////////////','line_number':132,'multiline':False]
['text':' X86/X64-common interface.','line_number':133,'multiline':False]
['text':'///////////////////////////////////////////////////////////////','line_number':134,'multiline':False]
['text':' Value types with 32-bit payloads can be emitted as two 32-bit moves.','line_number':145,'multiline':False]
['text':'///////////////////////////////////////////////////////////////','line_number':525,'multiline':False]
['text':' Common interface.','line_number':526,'multiline':False]
['text':'///////////////////////////////////////////////////////////////','line_number':527,'multiline':False]
['text':' Extracts the tag of a value and places it in tag.','line_number':672,'multiline':False]
['text':' Note that the |dest| register here may be ScratchReg, so we shouldn't','line_number':715,'multiline':False]
['text':' use it.','line_number':716,'multiline':False]
['text':' Explicitly permits |dest| to be used in |src|.','line_number':785,'multiline':False]
['text':' If src is already a register, then src and dest are the same','line_number':790,'multiline':False]
['text':' thing and we don't need to move anything into dest.','line_number':791,'multiline':False]
['text':' This should only be used for GC barrier code, to unbox a GC thing Value.','line_number':856,'multiline':False]
['text':' It's fine there because we don't depend on the actual Value type (all Cells','line_number':857,'multiline':False]
['text':' are treated the same way). In almost all other cases this would be','line_number':858,'multiline':False]
['text':' Spectre-unsafe - use unboxNonDouble and friends instead.','line_number':859,'multiline':False]
['text':' Extended unboxing API. If the payload is already in a register, returns','line_number':873,'multiline':False]
['text':' that register. Otherwise, provides a move to the given scratch register,','line_number':874,'multiline':False]
['text':' and returns that.','line_number':875,'multiline':False]
['text':' These two functions use the low 32-bits of the full value register.','line_number':922,'multiline':False]
['text':' Ideally we would call unboxObjectOrNull, but we need an extra','line_number':1053,'multiline':False]
['text':' scratch register for that. So unbox as object, then clear the','line_number':1054,'multiline':False]
['text':' object-or-null bit.','line_number':1055,'multiline':False]
['text':' Checks whether a double is representable as a 64-bit integer. If so, the','line_number':1076,'multiline':False]
['text':' integer is written to the output register. Otherwise, a bailout is taken to','line_number':1077,'multiline':False]
['text':' the given snapshot. This function overwrites the scratch float register.','line_number':1078,'multiline':False]
['text':' Zero the output register to break dependencies, see convertInt32ToDouble.','line_number':1083,'multiline':False]
['text':' Zero the output register to break dependencies, see convertInt32ToDouble.','line_number':1090,'multiline':False]
['text':' Instrumentation for entering and leaving the profiler.','line_number':1104,'multiline':False]
['text':' namespace jit','line_number':1111,'multiline':False]
['text':' namespace js','line_number':1112,'multiline':False]
['text':' jit_x64_MacroAssembler_x64_h ','line_number':1114,'multiline':True]
