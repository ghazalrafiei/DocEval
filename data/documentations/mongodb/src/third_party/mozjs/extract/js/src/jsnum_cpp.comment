['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]
['text':'
 * JS number type and wrapper class.
 ','line_number':7,'multiline':True]
['text':' memmove','line_number':24,'multiline':False]
['text':' frontend::{ParserAtomsTable, TaggedParserAtomIndex}','line_number':29,'multiline':False]
['text':' js::GetErrorMessage, JSMSG_*','line_number':33,'multiline':False]
['text':' js_*_str','line_number':46,'multiline':False]
['text':' For js::UnwrapAndTypeCheckThis','line_number':48,'multiline':False]
['text':'
 * If we're accumulating a decimal number and the number is >= 2^53, then the
 * fast result from the loop in Get{Prefix,Decimal}Integer may be inaccurate.
 * Call js_strtod_harder to get the correct answer.
 ','line_number':103,'multiline':True]
['text':' Base of number; must be a power of 2 ','line_number':143,'multiline':True]
['text':' Current digit value in radix given by base ','line_number':144,'multiline':True]
['text':' Mask to extract the next bit from digit ','line_number':145,'multiline':True]
['text':' Pointer to the remaining digits ','line_number':146,'multiline':True]
['text':' Pointer to the start of the string ','line_number':147,'multiline':True]
['text':' Pointer to first non-digit ','line_number':148,'multiline':True]
['text':' Return the next binary digit from the number, or -1 if done. ','line_number':159,'multiline':True]
['text':' anonymous namespace ','line_number':183,'multiline':True]
['text':'
 * The fast result might also have been inaccurate for power-of-two bases. This
 * happens if the addition in value * 2 + digit causes a round-down to an even
 * least significant mantissa bit when the first dropped bit is a one.  If any
 * of the following digits in the number (which haven't been added in yet) are
 * nonzero, then the correct action would have been to round up instead of
 * down.  An example occurs when reading the number 0x1000000000000081, which
 * rounds to 0x1000000000000000 instead of 0x1000000000000100.
 ','line_number':185,'multiline':True]
['text':' Skip leading zeroes. ','line_number':199,'multiline':True]
['text':' guaranteed by Get{Prefix,Decimal}Integer','line_number':205,'multiline':False]
['text':' Gather the 53 significant bits (including the leading 1). ','line_number':207,'multiline':True]
['text':' bit2 is the 54th bit (the first dropped from the mantissa). ','line_number':217,'multiline':True]
['text':' sticky is 1 if any bit beyond the 54th is 1 ','line_number':221,'multiline':True]
['text':' If we haven't reached the limit of integer precision, we're done. ','line_number':289,'multiline':True]
['text':'
   * Otherwise compute the correct integer from the prefix of valid digits
   * if we're computing for base ten or a power of two.  Don't worry about
   * other bases; see ES2018, 18.2.5 `parseInt(string, radix)`, step 13.
   ','line_number':294,'multiline':True]
['text':' Can only fail for base 10.','line_number':318,'multiline':False]
['text':' namespace js','line_number':336,'multiline':False]
['text':' If we haven't reached the limit of integer precision, we're done.','line_number':358,'multiline':False]
['text':' Otherwise compute the correct integer from the prefix of valid digits.','line_number':363,'multiline':False]
['text':' namespace js','line_number':382,'multiline':False]
['text':' namespace js','line_number':435,'multiline':False]
['text':' ToString(-0) is "0", handle it accordingly.','line_number':446,'multiline':False]
['text':' Step 2. ','line_number':499,'multiline':True]
['text':' Steps 3-4. ','line_number':506,'multiline':True]
['text':' Step 5. ','line_number':509,'multiline':True]
['text':' Step 10. ','line_number':514,'multiline':True]
['text':' Steps 11-15. ','line_number':522,'multiline':True]
['text':' ES5 15.1.2.2. ','line_number':538,'multiline':True]
['text':' Fast paths and exceptional cases. ','line_number':542,'multiline':True]
['text':'
     * Step 1 is |inputString = ToString(string)|. When string >=
     * 1e21, ToString(string) is in the form "NeM". 'e' marks the end of
     * the word, which would mean the result of parseInt(string) should be |N|.
     *
     * To preserve this behaviour, we can't use the fast-path when string >
     * 1e21, or else the result would be |NeM|.
     *
     * The same goes for values smaller than 1.0e-6, because the string would be
     * in the form of "Ne-M".
     ','line_number':555,'multiline':True]
['text':' Step 1. ','line_number':591,'multiline':True]
['text':' Steps 6-9. ','line_number':598,'multiline':True]
['text':' BigInt proposal section 6.2, steps 2a-c.','line_number':658,'multiline':False]
['text':' ES2020 draft rev e08b018785606bc6465a0456a79604b149007932','line_number':691,'multiline':False]
['text':' 20.1.3 Properties of the Number Prototype Object, thisNumberValue.','line_number':692,'multiline':False]
['text':' Step 1.','line_number':698,'multiline':False]
['text':' Steps 2-3.','line_number':704,'multiline':False]
['text':' On-off helper function for the self-hosted Number_toLocaleString method.','line_number':714,'multiline':False]
['text':' This only exists to produce an error message with the right method name.','line_number':715,'multiline':False]
['text':' Returns a non-nullptr pointer to inside cbuf.  ','line_number':880,'multiline':True]
['text':' Build the string from behind. ','line_number':890,'multiline':True]
['text':'
   * Create the string, move back to bytes to make string twiddling
   * a bit easier and so we can insert platform charset seperators.
   ','line_number':968,'multiline':True]
['text':'
   * Find the first non-integer value, whether it be a letter as in
   * 'Infinity', a decimal point, or an 'e' from exponential notation.
   ','line_number':981,'multiline':True]
['text':' Figure out how long resulting string will be. ','line_number':1003,'multiline':True]
['text':' -1 to account for existing '.' ','line_number':1006,'multiline':True]
['text':' !JS_HAS_INTL_API ','line_number':1092,'multiline':True]
['text':' ES 2021 draft 21.1.3.3.','line_number':1150,'multiline':False]
['text':' Step 1.','line_number':1154,'multiline':False]
['text':' Steps 2-5.','line_number':1160,'multiline':False]
['text':' Step 6.','line_number':1175,'multiline':False]
['text':' Steps 7-10 for very large numbers.','line_number':1190,'multiline':False]
['text':' Steps 7-12.','line_number':1201,'multiline':False]
['text':' DoubleToStringConverter::ToFixed is documented as requiring a buffer size','line_number':1203,'multiline':False]
['text':' of:','line_number':1204,'multiline':False]
['text':'','line_number':1205,'multiline':False]
['text':'   1 + kMaxFixedDigitsBeforePoint + 1 + kMaxFixedDigitsAfterPoint + 1','line_number':1206,'multiline':False]
['text':'   (one additional character for the sign, one for the decimal point,','line_number':1207,'multiline':False]
['text':'      and one for the null terminator)','line_number':1208,'multiline':False]
['text':'','line_number':1209,'multiline':False]
['text':' We already ensured there are at most 21 digits before the point, and','line_number':1210,'multiline':False]
['text':' MAX_PRECISION digits after the point.','line_number':1211,'multiline':False]
['text':' The double-conversion library by default has a kMaxFixedDigitsAfterPoint of','line_number':1214,'multiline':False]
['text':' 60. Assert our modified version supports at least MAX_PRECISION (100).','line_number':1215,'multiline':False]
['text':' ES 2021 draft 21.1.3.2.','line_number':1224,'multiline':False]
['text':' Step 1.','line_number':1228,'multiline':False]
['text':' Step 2.','line_number':1234,'multiline':False]
['text':' Step 3.','line_number':1242,'multiline':False]
['text':' Step 4.','line_number':1245,'multiline':False]
['text':' Step 5.','line_number':1260,'multiline':False]
['text':' Steps 6-15.','line_number':1266,'multiline':False]
['text':' DoubleToStringConverter::ToExponential is documented as adding at most 8','line_number':1268,'multiline':False]
['text':' characters on top of the requested digits: "the sign, the digit before the','line_number':1269,'multiline':False]
['text':' decimal point, the decimal point, the exponent character, the exponent's','line_number':1270,'multiline':False]
['text':' sign, and at most 3 exponent digits". In addition, the buffer must be able','line_number':1271,'multiline':False]
['text':' to hold the trailing '\0' character.','line_number':1272,'multiline':False]
['text':' ES 2021 draft 21.1.3.5.','line_number':1281,'multiline':False]
['text':' Step 1.','line_number':1285,'multiline':False]
['text':' Step 2.','line_number':1291,'multiline':False]
['text':' Step 3.','line_number':1302,'multiline':False]
['text':' Step 4.','line_number':1308,'multiline':False]
['text':' Step 5.','line_number':1323,'multiline':False]
['text':' Steps 6-14.','line_number':1329,'multiline':False]
['text':' DoubleToStringConverter::ToPrecision is documented as adding at most 7','line_number':1331,'multiline':False]
['text':' characters on top of the requested digits: "the sign, the decimal point,','line_number':1332,'multiline':False]
['text':' the exponent character, the exponent's sign, and at most 3 exponent','line_number':1333,'multiline':False]
['text':' digits". In addition, the buffer must be able to hold the trailing '\0'','line_number':1334,'multiline':False]
['text':' character.','line_number':1335,'multiline':False]
['text':' ES6 (April 2014 draft) 20.1.2.6 ','line_number':1381,'multiline':True]
['text':' ES6 (April 2014 draft) 20.1.2.10 ','line_number':1384,'multiline':True]
['text':' ES6 (May 2013 draft) 15.7.3.7 ','line_number':1387,'multiline':True]
['text':' XXX If JS_HAS_INTL_API becomes true all the time at some point,','line_number':1393,'multiline':False]
['text':'     js::InitRuntimeNumberState is no longer fallible, and we should','line_number':1394,'multiline':False]
['text':'     change its return type.','line_number':1395,'multiline':False]
['text':' Copy locale-specific separators into the runtime strings. ','line_number':1397,'multiline':True]
['text':'
   * We use single malloc to get the memory for all separator and grouping
   * strings.
   ','line_number':1421,'multiline':True]
['text':' !JS_HAS_INTL_API ','line_number':1445,'multiline':True]
['text':'
   * The free also releases the memory for decimalSeparator and numGrouping
   * strings.
   ','line_number':1451,'multiline':True]
['text':' !JS_HAS_INTL_API','line_number':1457,'multiline':False]
['text':' Number.parseInt should be the same function object as global parseInt.','line_number':1478,'multiline':False]
['text':' Number.parseFloat should be the same function object as global','line_number':1490,'multiline':False]
['text':' parseFloat.','line_number':1491,'multiline':False]
['text':' ES5 15.1.1.1, 15.1.1.2','line_number':1512,'multiline':False]
['text':'
     * This is V8's implementation of the algorithm described in the
     * following paper:
     *
     *   Printing floating-point numbers quickly and accurately with integers.
     *   Florian Loitsch, PLDI 2010.
     ','line_number':1545,'multiline':True]
['text':' = 10','line_number':1591,'multiline':True]
['text':' Convert to C-string. ','line_number':1766,'multiline':True]
['text':' It's probably a non-decimal number. Accept if there's at least one digit','line_number':1814,'multiline':False]
['text':' after the 0b|0o|0x, and if no non-whitespace characters follow all the','line_number':1815,'multiline':False]
['text':' digits.','line_number':1816,'multiline':False]
['text':' ECMA doesn't allow signed non-decimal numbers (bug 273467).','line_number':1840,'multiline':False]
['text':'
   * Note that ECMA doesn't treat a string beginning with a '0' as
   * an octal number here. This works because all such numbers will
   * be interpreted as decimal by js_strtod.  Also, any hex numbers
   * that have made it here (which can only be negative ones) will
   * be treated as 0 without consuming the 'x' by js_strtod.
   ','line_number':1847,'multiline':True]
['text':' ECMA doesn't allow signed non-decimal numbers (bug 273467).','line_number':1886,'multiline':False]
['text':' It's probably a decimal number. Accept if no non-whitespace characters','line_number':1893,'multiline':False]
['text':' follow all the digits.','line_number':1894,'multiline':False]
['text':'','line_number':1895,'multiline':False]
['text':' NB: Fractional digits are not supported, because they require calling into','line_number':1896,'multiline':False]
['text':' dtoa, which isn't possible without a JSContext.','line_number':1897,'multiline':False]
['text':' IC Code calls this directly.','line_number':1930,'multiline':False]
['text':' BigInt proposal section 3.1.6','line_number':2000,'multiline':False]
['text':' Step 1.','line_number':2004,'multiline':False]
['text':' Step 2.','line_number':2014,'multiline':False]
['text':' Step 3.','line_number':2019,'multiline':False]
['text':'
 * Convert a value to an int8_t, according to the WebIDL rules for byte
 * conversion. Return converted value in *out on success, false on failure.
 ','line_number':2023,'multiline':True]
['text':'
 * Convert a value to an uint8_t, according to the ToUInt8() function in ES6
 * ECMA-262, 7.1.10. Return converted value in *out on success, false on
 * failure.
 ','line_number':2042,'multiline':True]
['text':'
 * Convert a value to an int16_t, according to the WebIDL rules for short
 * conversion. Return converted value in *out on success, false on failure.
 ','line_number':2062,'multiline':True]
['text':'
 * Convert a value to an int64_t, according to the WebIDL rules for long long
 * conversion. Return converted value in *out on success, false on failure.
 ','line_number':2081,'multiline':True]
['text':'
 * Convert a value to an uint64_t, according to the WebIDL rules for unsigned
 * long long conversion. Return converted value in *out on success, false on
 * failure.
 ','line_number':2100,'multiline':True]
['text':' ES2017 draft 7.1.17 ToIndex','line_number':2182,'multiline':False]
['text':' Step 1.','line_number':2187,'multiline':False]
['text':' Step 2.a.','line_number':2193,'multiline':False]
['text':' Inlined version of ToLength.','line_number':2199,'multiline':False]
['text':' 1. Already an integer.','line_number':2200,'multiline':False]
['text':' 2. Step eliminates < 0, +0 == -0 with SameValueZero.','line_number':2201,'multiline':False]
['text':' 3/4. Limit to <= 2^53-1, so everything above should fail.','line_number':2202,'multiline':False]
['text':' Step 3.','line_number':2208,'multiline':False]
['text':' Try to parse +Infinity, -Infinity or Infinity. ','line_number':2234,'multiline':True]
['text':' Everything else. ','line_number':2253,'multiline':True]
