['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]
['text':'
 * JavaScript API.
 ','line_number':7,'multiline':True]
['text':' frontend::CompileGlobalScriptToStencil, frontend::InstantiateStencils','line_number':43,'multiline':False]
['text':' frontend::CompilationStencil, frontend::CompilationGCOutput','line_number':45,'multiline':False]
['text':' JS::ContextOptions{,Ref}','line_number':56,'multiline':False]
['text':' js::GetErrorMessage, JSMSG_*','line_number':59,'multiline':False]
['text':' js::AutoCheckRecursionLimit','line_number':60,'multiline':False]
['text':' JS::SetPrivate','line_number':65,'multiline':False]
['text':' js::UseOffThreadParseGlobal','line_number':66,'multiline':False]
['text':' JS::MaxStringLength','line_number':72,'multiline':False]
['text':' js::PlainObject','line_number':98,'multiline':False]
['text':' js::PromiseObject','line_number':99,'multiline':False]
['text':' js::IsGivenTypeObject','line_number':116,'multiline':False]
['text':' See preprocessor definition of JS_BITS_PER_WORD in jstypes.h; make sure','line_number':141,'multiline':False]
['text':' JS_64BIT (used internally) agrees with it','line_number':142,'multiline':False]
['text':' We know that the original receiver was a primitive, so unbox it.','line_number':197,'multiline':False]
['text':' namespace js','line_number':307,'multiline':False]
['text':'**********************************************************************','line_number':379,'multiline':True]
['text':' Prevent functions from being discarded by linker, so that they are callable','line_number':381,'multiline':False]
['text':' when debugging.','line_number':382,'multiline':False]
['text':' Never executed.','line_number':385,'multiline':False]
['text':' Prevent linker from discarding unused debug functions.','line_number':397,'multiline':False]
['text':' Make sure that all parent runtimes are the topmost parent.','line_number':400,'multiline':False]
['text':' defined(NIGHTLY_BUILD)','line_number':475,'multiline':False]
['text':' !NIGHTLY_BUILD','line_number':482,'multiline':False]
['text':' defined(NIGHTLY_BUILD)','line_number':484,'multiline':False]
['text':' All errors are objects.','line_number':488,'multiline':False]
['text':' All errors are `ErrorObject`.','line_number':495,'multiline':False]
['text':' Not one of the primitive errors.','line_number':497,'multiline':False]
['text':'
 * [SMDOC] Brain transplants.
 *
 * Not for beginners or the squeamish.
 *
 * Sometimes a web spec requires us to transplant an object from one
 * compartment to another, like when a DOM node is inserted into a document in
 * another window and thus gets "adopted". We cannot literally change the
 * `.compartment()` of a `JSObject`; that would break the compartment
 * invariants. However, as usual, we have a workaround using wrappers.
 *
 * Of all the wrapper-based workarounds we do, it's safe to say this is the
 * most spectacular and questionable.
 *
 * `JS_TransplantObject(cx, origobj, target)` changes `origobj` into a
 * simulacrum of `target`, using highly esoteric means. To JS code, the effect
 * is as if `origobj` magically "became" `target`, but most often what actually
 * happens is that `origobj` gets turned into a cross-compartment wrapper for
 * `target`. The old behavior and contents of `origobj` are overwritten or
 * discarded.
 *
 * Thus, to "transplant" an object from one compartment to another:
 *
 * 1.  Let `origobj` be the object that you want to move. First, create a
 *     clone of it, `target`, in the destination compartment.
 *
 *     In our DOM adoption example, `target` will be a Node of the same type as
 *     `origobj`, same content, but in the adopting document.  We're not done
 *     yet: the spec for DOM adoption requires that `origobj.ownerDocument`
 *     actually change. All we've done so far is make a copy.
 *
 * 2.  Call `JS_TransplantObject(cx, origobj, target)`. This typically turns
 *     `origobj` into a wrapper for `target`, so that any JS code that has a
 *     reference to `origobj` will observe it to have the behavior of `target`
 *     going forward. In addition, all existing wrappers for `origobj` are
 *     changed into wrappers for `target`, extending the illusion to those
 *     compartments as well.
 *
 * During navigation, we use the above technique to transplant the WindowProxy
 * into the new Window's compartment.
 *
 * A few rules:
 *
 * -   `origobj` and `target` must be two distinct objects of the same
 *     `JSClass`.  Some classes may not support transplantation; WindowProxy
 *     objects and DOM nodes are OK.
 *
 * -   `target` should be created specifically to be passed to this function.
 *     There must be no existing cross-compartment wrappers for it; ideally
 *     there shouldn't be any pointers to it at all, except the one passed in.
 *
 * -   `target` shouldn't be used afterwards. Instead, `JS_TransplantObject`
 *     returns a pointer to the transplanted object, which might be `target`
 *     but might be some other object in the same compartment. Use that.
 *
 * The reason for this last rule is that JS_TransplantObject does very strange
 * things in some cases, like swapping `target`'s brain with that of another
 * object. Leaving `target` behaving like its former self is not a goal.
 *
 * We don't have a good way to recover from failure in this function, so
 * we intentionally crash instead.
 ','line_number':603,'multiline':True]
['text':' Don't allow a compacting GC to observe any intermediate state.','line_number':683,'multiline':False]
['text':' If the original object is in the same compartment as the','line_number':693,'multiline':False]
['text':' destination, then we know that we won't find a wrapper in the','line_number':694,'multiline':False]
['text':' destination's cross compartment map and that the same','line_number':695,'multiline':False]
['text':' object will continue to work.','line_number':696,'multiline':False]
['text':' There might already be a wrapper for the original object in','line_number':701,'multiline':False]
['text':' the new compartment. If there is, we use its identity and swap','line_number':702,'multiline':False]
['text':' in the contents of |target|.','line_number':703,'multiline':False]
['text':' When we remove origv from the wrapper map, its wrapper, newIdentity,','line_number':706,'multiline':False]
['text':' must immediately cease to be a cross-compartment wrapper. Nuke it.','line_number':707,'multiline':False]
['text':' Otherwise, we use |target| for the new identity object.','line_number':714,'multiline':False]
['text':' Now, iterate through other scopes looking for references to the old','line_number':718,'multiline':False]
['text':' object, and update the relevant cross-compartment wrappers. We do this','line_number':719,'multiline':False]
['text':' even if origobj is in the same compartment as target and thus','line_number':720,'multiline':False]
['text':' `newIdentity == origobj`, because this process also clears out any','line_number':721,'multiline':False]
['text':' cached wrapper state.','line_number':722,'multiline':False]
['text':' Lastly, update the original object to point to the new one.','line_number':727,'multiline':False]
['text':' The new identity object might be one of several things. Return it to avoid','line_number':746,'multiline':False]
['text':' ambiguity.','line_number':747,'multiline':False]
['text':' |target| can't be a remote proxy, because we expect it to get a CCW when','line_number':759,'multiline':False]
['text':' wrapped across compartments.','line_number':760,'multiline':False]
['text':' Don't allow a compacting GC to observe any intermediate state.','line_number':763,'multiline':False]
['text':' Use the callback to find remote proxies in all compartments that match','line_number':778,'multiline':False]
['text':' whatever criteria callback uses.','line_number':779,'multiline':False]
['text':' The object the callback returns should be a DOM remote proxy object in','line_number':785,'multiline':False]
['text':' the compartment c. We rely on it being a DOM remote proxy because that','line_number':786,'multiline':False]
['text':' means that it won't have any cross-compartment wrappers.','line_number':787,'multiline':False]
['text':' Immediately turn the DOM remote proxy object into a dead proxy object','line_number':792,'multiline':False]
['text':' so we don't have to worry about anything weird going on with it.','line_number':793,'multiline':False]
['text':' If there was a remote proxy in |target|'s compartment, we need to use it','line_number':803,'multiline':False]
['text':' instead of |target|, in case it had any references, so swap it. Do this','line_number':804,'multiline':False]
['text':' before any other compartment so that the target object will be set up','line_number':805,'multiline':False]
['text':' correctly before we start wrapping it into other compartments.','line_number':806,'multiline':False]
['text':'
 * Recompute all cross-compartment wrappers for an object, resetting state.
 * Gecko uses this to clear Xray wrappers when doing a navigation that reuses
 * the inner window and global object.
 ','line_number':819,'multiline':True]
['text':' offset of atom pointer in JSAtomState ','line_number':830,'multiline':True]
['text':'
 * Table of standard classes, indexed by JSProtoKey. For entries where the
 * JSProtoKey does not correspond to a class with a meaningful constructor, we
 * insert a null entry into the table.
 ','line_number':852,'multiline':True]
['text':'
 * Table of top-level function and constant names and the JSProtoKey of the
 * standard class that initializes them.
 ','line_number':862,'multiline':True]
['text':' Global properties and functions defined by the Number class. ','line_number':869,'multiline':True]
['text':' String global functions. ','line_number':877,'multiline':True]
['text':' On the web, it isn't presently possible to expose the global','line_number':904,'multiline':False]
['text':' "SharedArrayBuffer" property unless the page is cross-site-isolated.  Only','line_number':905,'multiline':False]
['text':' define this constructor if an option on the realm indicates that it should','line_number':906,'multiline':False]
['text':' be defined.','line_number':907,'multiline':False]
['text':' Check whether we're resolving 'undefined', and define it if so. ','line_number':924,'multiline':True]
['text':' Resolve a "globalThis" self-referential property if necessary.','line_number':933,'multiline':False]
['text':' Try for class constructors/prototypes named by well-known atoms.','line_number':939,'multiline':False]
['text':' Try less frequently used top-level functions and constants.','line_number':943,'multiline':False]
['text':' If this class is anonymous (or it's "SharedArrayBuffer" but that global','line_number':956,'multiline':False]
['text':' constructor isn't supposed to be defined), then it doesn't exist as a','line_number':957,'multiline':False]
['text':' global property, so we won't resolve anything.','line_number':958,'multiline':False]
['text':' There is no such property to resolve. An ordinary resolve hook would','line_number':972,'multiline':False]
['text':' just return true at this point. But the global object is special in one','line_number':973,'multiline':False]
['text':' more way: its prototype chain is lazily initialized. That is,','line_number':974,'multiline':False]
['text':' global->getProto() might be null right now because we haven't created','line_number':975,'multiline':False]
['text':' Object.prototype yet. Force it now.','line_number':976,'multiline':False]
['text':' The global object's resolve hook is special: JS_ResolveStandardClass','line_number':984,'multiline':False]
['text':' initializes the prototype chain lazily. Only attempt to optimize here','line_number':985,'multiline':False]
['text':' if we know the prototype chain has been initialized.','line_number':986,'multiline':False]
['text':' This will return true even for deselected constructors.  (To do','line_number':997,'multiline':False]
['text':' better, we need a JSContext here; it's fine as it is.)','line_number':998,'multiline':False]
['text':' If the standard class has been resolved, the properties have been','line_number':1026,'multiline':False]
['text':' defined on the global so we don't need to add them here.','line_number':1027,'multiline':False]
['text':' There are no enumerable standard classes and "undefined" is','line_number':1062,'multiline':False]
['text':' not enumerable.','line_number':1063,'multiline':False]
['text':' It's fine to always append |undefined| here, it's non-configurable and','line_number':1069,'multiline':False]
['text':' the enumeration code filters duplicates.','line_number':1070,'multiline':False]
['text':' namespace JS ','line_number':1140,'multiline':True]
['text':' Currently, we only collect nursery during idle time.','line_number':1307,'multiline':False]
['text':' WASI makes this easy: we build with the "stack-first" wasm-ld option, so','line_number':1489,'multiline':False]
['text':' the stack grows downward toward zero. Let's set a limit just a bit above','line_number':1490,'multiline':False]
['text':' this so that we catch an overflow before a Wasm trap occurs.','line_number':1491,'multiline':False]
['text':' __wasi__','line_number':1493,'multiline':False]
['text':' stack grows up','line_number':1501,'multiline':False]
['text':' stack grows down','line_number':1508,'multiline':False]
['text':' !__wasi__','line_number':1509,'multiline':False]
['text':'**********************************************************************','line_number':1540,'multiline':True]
['text':' This function can be called by a finalizer. ','line_number':1677,'multiline':True]
['text':' Off thread parsing and compilation tasks create a dummy global which is','line_number':1804,'multiline':False]
['text':' then merged back into the host realm. Since it used to be a global, it','line_number':1805,'multiline':False]
['text':' will still have this trace hook, but it does not have a meaning relative','line_number':1806,'multiline':False]
['text':' to its new realm. We can safely skip it.','line_number':1807,'multiline':False]
['text':'','line_number':1808,'multiline':False]
['text':' Similarly, if we GC when creating the global, we may not have set that','line_number':1809,'multiline':False]
['text':' global's realm's global pointer yet. In this case, the realm will not yet','line_number':1810,'multiline':False]
['text':' contain anything that needs to be traced.','line_number':1811,'multiline':False]
['text':' Trace the realm for any GC things that should only stick around if we','line_number':1816,'multiline':False]
['text':' know the global is live.','line_number':1817,'multiline':False]
['text':' addProperty','line_number':1826,'multiline':False]
['text':' delProperty','line_number':1827,'multiline':False]
['text':' enumerate','line_number':1828,'multiline':False]
['text':' newEnumerate','line_number':1829,'multiline':False]
['text':' resolve','line_number':1830,'multiline':False]
['text':' mayResolve','line_number':1831,'multiline':False]
['text':' finalize','line_number':1832,'multiline':False]
['text':' call','line_number':1833,'multiline':False]
['text':' hasInstance','line_number':1834,'multiline':False]
['text':' construct','line_number':1835,'multiline':False]
['text':' trace','line_number':1836,'multiline':False]
['text':' This hook is infallible, because we don't really want arbitrary script','line_number':1841,'multiline':False]
['text':' to be able to throw errors during delicate global creation routines.','line_number':1842,'multiline':False]
['text':' This infallibility will eat OOM and slow script, but if that happens','line_number':1843,'multiline':False]
['text':' we'll likely run up into them again soon in a fallible context.','line_number':1844,'multiline':False]
['text':' default class is Object ','line_number':1857,'multiline':True]
['text':' default class is Object ','line_number':1875,'multiline':True]
['text':'** Standard internal methods *********************************************','line_number':1921,'multiline':True]
['text':' JSPROP_READONLY has no meaning when accessors are involved. Ideally we'd','line_number':2051,'multiline':False]
['text':' throw if this happens, but we've accepted it for long enough that it's','line_number':2052,'multiline':False]
['text':' not worth trying to make callers change their ways. Just flip it off on','line_number':2053,'multiline':False]
['text':' its way through the API layer so that we can enforce this internally.','line_number':2054,'multiline':False]
['text':' Getter/setter are both possibly-null JSNatives. Wrap them in JSFunctions.','line_number':2068,'multiline':False]
['text':'
 * Wrapper functions to create wrappers with no corresponding JSJitInfo from API
 * function arguments.
 ','line_number':2114,'multiline':True]
['text':' * ','line_number':2838,'multiline':True]
['text':' Assume that non-extensible objects are already deep-frozen, to avoid','line_number':2911,'multiline':False]
['text':' divergence.','line_number':2912,'multiline':False]
['text':' Walk slots in obj and if any value is a non-null object, seal it.','line_number':2925,'multiline':False]
['text':' default class is Object ','line_number':2994,'multiline':True]
['text':' We are calling fromMarkedLocation(idp) even though idp points to a','line_number':3054,'multiline':False]
['text':' location that will never be marked. This is OK because the whole point','line_number':3055,'multiline':False]
['text':' of this API is to populate *idp with a jsid that does not need to be','line_number':3056,'multiline':False]
['text':' marked.','line_number':3057,'multiline':False]
['text':' |obj| can be in a different compartment here. The caller is responsible','line_number':3102,'multiline':False]
['text':' for wrapping it (see JS_WrapPropertyDescriptor).','line_number':3103,'multiline':False]
['text':' Delay cloning self-hosted functions until they are called. This is','line_number':3257,'multiline':False]
['text':' achieved by passing DefineFunction a nullptr JSNative which produces an','line_number':3258,'multiline':False]
['text':' interpreted JSFunction where !hasScript. Interpreted call paths then','line_number':3259,'multiline':False]
['text':' call InitializeLazyFunctionScript if !hasScript.','line_number':3260,'multiline':False]
['text':' OwningCompileOptions always owns these, so these casts are okay.','line_number':3445,'multiline':False]
['text':' Release existing string allocations.','line_number':3465,'multiline':False]
['text':' Distinguishing the cases is just for error reporting.','line_number':3498,'multiline':False]
['text':' Certain modes of operation force strict-mode in general.','line_number':3522,'multiline':False]
['text':' Certain modes of operation disallow syntax parsing in general.','line_number':3525,'multiline':False]
['text':' Note: If we parse outside of a specific realm, we do not inherit any realm','line_number':3528,'multiline':False]
['text':' behaviours. These can still be set manually on the options though.','line_number':3529,'multiline':False]
['text':' This is called from ThreadStackHelper which can be called from another','line_number':3557,'multiline':False]
['text':' thread or inside a signal hander, so we need to be careful in case a','line_number':3558,'multiline':False]
['text':' copmacting GC is currently moving things around.','line_number':3559,'multiline':False]
['text':' isToSource = ','line_number':3609,'multiline':True]
['text':'**********************************************************************','line_number':3671,'multiline':True]
['text':'
 * Promises.
 ','line_number':3673,'multiline':True]
['text':' = nullptr ','line_number':3682,'multiline':True]
['text':'*
 * Unforgeable version of Promise.all for internal use.
 *
 * Takes a dense array of Promise objects and returns a promise that's
 * resolved with an array of resolution values when all those promises ahve
 * been resolved, or rejected with the rejection value of the first rejected
 * promise.
 *
 * Asserts that the array is dense and all entries are Promise objects.
 ','line_number':3971,'multiline':True]
['text':' The option determines whether we actually use the new values at this','line_number':4022,'multiline':False]
['text':' point. It will not affect restoring the previous values when the object','line_number':4023,'multiline':False]
['text':' is destroyed, so if the option changes it won't cause consistency issues.','line_number':4024,'multiline':False]
['text':'**********************************************************************','line_number':4043,'multiline':True]
['text':' DEBUG','line_number':4513,'multiline':False]
['text':'**********************************************************************','line_number':4608,'multiline':True]
['text':'**********************************************************************','line_number':4753,'multiline':True]
['text':' This function can be called by a finalizer. ','line_number':4781,'multiline':True]
['text':'**********************************************************************','line_number':4785,'multiline':True]
['text':' This function can be called by a finalizer. ','line_number':4788,'multiline':True]
['text':' We don't check the compartment of `value` here, because we're not','line_number':4810,'multiline':False]
['text':' doing anything with it other than storing it, and stored','line_number':4811,'multiline':False]
['text':' exception values can be in an abitrary compartment.','line_number':4812,'multiline':False]
['text':'**********************************************************************','line_number':5339,'multiline':True]
['text':'
 * Initialization routine for the JS DLL.
 ','line_number':5346,'multiline':True]
['text':' If the caller is hidden, the embedding wants us to return false here so','line_number':5452,'multiline':False]
['text':' that it can check its own stack (see HideScriptedCaller).','line_number':5453,'multiline':False]
['text':' For Wasm, copy out the filename, there is no script source.','line_number':5460,'multiline':False]
['text':' All other frames have a script source to read the filename from.','line_number':5468,'multiline':False]
['text':' Fast path to get the activation and realm to use for GetScriptedCallerGlobal.','line_number':5482,'multiline':False]
['text':' If this returns false, the fast path didn't work out and the caller has to','line_number':5483,'multiline':False]
['text':' use the (much slower) NonBuiltinFrameIter path.','line_number':5484,'multiline':False]
['text':'','line_number':5485,'multiline':False]
['text':' The optimization here is that we skip Ion-inlined frames and only look at','line_number':5486,'multiline':False]
['text':' 'outer' frames. That's fine because Ion doesn't inline cross-realm calls.','line_number':5487,'multiline':False]
['text':' However, GetScriptedCallerGlobal has to skip self-hosted frames and Ion','line_number':5488,'multiline':False]
['text':' can inline self-hosted scripts, so we have to be careful:','line_number':5489,'multiline':False]
['text':'','line_number':5490,'multiline':False]
['text':' * When we see a non-self-hosted outer script, it's possible we inlined','line_number':5491,'multiline':False]
['text':'   self-hosted scripts into it but that doesn't matter because these scripts','line_number':5492,'multiline':False]
['text':'   all have the same realm/global anyway.','line_number':5493,'multiline':False]
['text':'','line_number':5494,'multiline':False]
['text':' * When we see a self-hosted outer script, it's possible we inlined','line_number':5495,'multiline':False]
['text':'   non-self-hosted scripts into it, so we have to give up because in this','line_number':5496,'multiline':False]
['text':'   case, whether or not to skip the self-hosted frame (to the possibly','line_number':5497,'multiline':False]
['text':'   different-realm caller) requires the slow path to handle inlining. Baseline','line_number':5498,'multiline':False]
['text':'   and the interpreter don't inline so this only affects Ion.','line_number':5499,'multiline':False]
['text':' Ion might have inlined non-self-hosted scripts in this','line_number':5527,'multiline':False]
['text':' self-hosted script.','line_number':5528,'multiline':False]
['text':' If the caller is hidden, the embedding wants us to return null here so','line_number':5566,'multiline':False]
['text':' that it can check its own stack (see HideScriptedCaller).','line_number':5567,'multiline':False]
['text':' No one should be running code in a realm without any live objects, so','line_number':5574,'multiline':False]
['text':' there should definitely be a live global.','line_number':5575,'multiline':False]
['text':' If there's no accessible activation on the stack, we'll return null from','line_number':5584,'multiline':False]
['text':' DescribeScriptedCaller anyway, so there's no need to annotate anything.','line_number':5585,'multiline':False]
['text':' namespace JS ','line_number':5601,'multiline':True]
['text':' JS_DEBUG ','line_number':5610,'multiline':True]
['text':' Run-once top-level scripts may mutate singleton objects so do not allow','line_number':5615,'multiline':False]
['text':' encoding them. It could be possible to encode early enough to avoid this,','line_number':5616,'multiline':False]
['text':' but for consistency with `CopyScriptImpl` we always disallow.','line_number':5617,'multiline':False]
['text':' The buffer contains JSScript.','line_number':5675,'multiline':False]
['text':' The buffer contains stencil.','line_number':5682,'multiline':False]
['text':' = true ','line_number':5804,'multiline':True]
['text':' = JS::StackCapture(JS::AllFrames()) ','line_number':5810,'multiline':True]
['text':' DEBUG','line_number':5890,'multiline':False]
['text':' namespace js','line_number':5892,'multiline':False]
['text':' DEBUG','line_number':5900,'multiline':False]
