['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]
['text':' ReadableStream reader abstract operations. ','line_number':7,'multiline':True]
['text':' MOZ_ASSERT{,_IF}','line_number':11,'multiline':False]
['text':' JS_ReportErrorNumberASCII','line_number':13,'multiline':False]
['text':' js::ReadableStreamController, js::ReadableStreamControllerPullSteps','line_number':15,'multiline':False]
['text':' js::ReadableStream','line_number':16,'multiline':False]
['text':' js::ReadableStreamController','line_number':17,'multiline':False]
['text':' js::ReadableStream{Cancel,CreateReadResult}','line_number':18,'multiline':False]
['text':' js::GetErrorMessage, JSMSG_*','line_number':19,'multiline':False]
['text':' JS::Handle, JS::Rooted','line_number':20,'multiline':False]
['text':' JS::Value, JS::UndefinedHandleValue','line_number':21,'multiline':False]
['text':' js::GetAndClearException','line_number':22,'multiline':False]
['text':' JSContext','line_number':23,'multiline':False]
['text':' js::PlainObject','line_number':24,'multiline':False]
['text':' js::PromiseObject, js::PromiseResolvedWithUndefined','line_number':25,'multiline':False]
['text':' JSRuntime','line_number':26,'multiline':False]
['text':' js::SetSettledPromiseIsHandled','line_number':28,'multiline':False]
['text':' JS::Compartment::wrap, js::UnwrapInternalSlot','line_number':29,'multiline':False]
['text':' js::StoreNewListInFixedSlot','line_number':30,'multiline':False]
['text':' js::AutoRealm','line_number':31,'multiline':False]
['text':'** 3.8. Readable stream reader abstract operations ***********************','line_number':41,'multiline':True]
['text':' Streams spec, 3.8.1. IsReadableStreamDefaultReader ( x )','line_number':43,'multiline':False]
['text':' Implemented via is<ReadableStreamDefaultReader>()','line_number':44,'multiline':False]
['text':' Streams spec, 3.8.2. IsReadableStreamBYOBReader ( x )','line_number':46,'multiline':False]
['text':' Implemented via is<ReadableStreamBYOBReader>()','line_number':47,'multiline':False]
['text':'*
 * Streams spec, 3.8.3. ReadableStreamReaderGenericCancel ( reader, reason )
 ','line_number':49,'multiline':True]
['text':' Step 1: Let stream be reader.[[ownerReadableStream]].','line_number':55,'multiline':False]
['text':' Step 2: Assert: stream is not undefined (implicit).','line_number':56,'multiline':False]
['text':' Step 3: Return ! ReadableStreamCancel(stream, reason).','line_number':63,'multiline':False]
['text':'*
 * Streams spec, 3.8.4.
 *      ReadableStreamReaderGenericInitialize ( reader, stream )
 ','line_number':67,'multiline':True]
['text':' Step 1: Set reader.[[forAuthorCode]] to true.','line_number':76,'multiline':False]
['text':' Step 2: Set reader.[[ownerReadableStream]] to stream.','line_number':79,'multiline':False]
['text':' Step 3 is moved to the end.','line_number':88,'multiline':False]
['text':' Step 4: If stream.[[state]] is "readable",','line_number':90,'multiline':False]
['text':' Step a: Set reader.[[closedPromise]] to a new promise.','line_number':93,'multiline':False]
['text':' Step 5: Otherwise, if stream.[[state]] is "closed",','line_number':96,'multiline':False]
['text':' Step a: Set reader.[[closedPromise]] to a promise resolved with','line_number':97,'multiline':False]
['text':'         undefined.','line_number':98,'multiline':False]
['text':' Step 6: Otherwise,','line_number':101,'multiline':False]
['text':' Step a: Assert: stream.[[state]] is "errored".','line_number':102,'multiline':False]
['text':' Step b: Set reader.[[closedPromise]] to a promise rejected with','line_number':105,'multiline':False]
['text':'         stream.[[storedError]].','line_number':106,'multiline':False]
['text':' Step c. Set reader.[[closedPromise]].[[PromiseIsHandled]] to true.','line_number':116,'multiline':False]
['text':' Step 4 of caller 3.6.3. new ReadableStreamDefaultReader(stream):','line_number':126,'multiline':False]
['text':' Step 5 of caller 3.7.3. new ReadableStreamBYOBReader(stream):','line_number':127,'multiline':False]
['text':'     Set this.[[read{Into}Requests]] to a new empty List.','line_number':128,'multiline':False]
['text':' Step 3: Set stream.[[reader]] to reader.','line_number':134,'multiline':False]
['text':' Doing this last prevents a partially-initialized reader from being','line_number':135,'multiline':False]
['text':' attached to the stream (and possibly left there on OOM).','line_number':136,'multiline':False]
['text':'*
 * Streams spec, 3.8.5. ReadableStreamReaderGenericRelease ( reader )
 ','line_number':149,'multiline':True]
['text':' Step 1: Assert: reader.[[ownerReadableStream]] is not undefined.','line_number':154,'multiline':False]
['text':' Step 2: Assert: reader.[[ownerReadableStream]].[[reader]] is reader.','line_number':161,'multiline':False]
['text':' The assertion is weakened a bit to allow for nuked wrappers.','line_number':163,'multiline':False]
['text':' Create an exception to reject promises with below. We don't have a','line_number':169,'multiline':False]
['text':' clean way to do this, unfortunately.','line_number':170,'multiline':False]
['text':' Uncatchable error. Die immediately without resolving','line_number':175,'multiline':False]
['text':' reader.[[closedPromise]].','line_number':176,'multiline':False]
['text':' Step 3: If reader.[[ownerReadableStream]].[[state]] is "readable", reject','line_number':180,'multiline':False]
['text':'         reader.[[closedPromise]] with a TypeError exception.','line_number':181,'multiline':False]
['text':' Step 4: Otherwise, set reader.[[closedPromise]] to a new promise','line_number':198,'multiline':False]
['text':'         rejected with a TypeError exception.','line_number':199,'multiline':False]
['text':' Step 5: Set reader.[[closedPromise]].[[PromiseIsHandled]] to true.','line_number':214,'multiline':False]
['text':' Step 6: Set reader.[[ownerReadableStream]].[[reader]] to undefined.','line_number':217,'multiline':False]
['text':' Step 7: Set reader.[[ownerReadableStream]] to undefined.','line_number':220,'multiline':False]
['text':'*
 * Streams spec, 3.8.7.
 *      ReadableStreamDefaultReaderRead ( reader [, forAuthorCode ] )
 ','line_number':226,'multiline':True]
['text':' Step 1: If forAuthorCode was not passed, set it to false (implicit).','line_number':232,'multiline':False]
['text':' Step 2: Let stream be reader.[[ownerReadableStream]].','line_number':234,'multiline':False]
['text':' Step 3: Assert: stream is not undefined.','line_number':235,'multiline':False]
['text':' Step 4: Set stream.[[disturbed]] to true.','line_number':242,'multiline':False]
['text':' Step 5: If stream.[[state]] is "closed", return a promise resolved with','line_number':245,'multiline':False]
['text':'         ! ReadableStreamCreateReadResult(undefined, true, forAuthorCode).','line_number':246,'multiline':False]
['text':' Step 6: If stream.[[state]] is "errored", return a promise rejected','line_number':258,'multiline':False]
['text':'         with stream.[[storedError]].','line_number':259,'multiline':False]
['text':' Step 7: Assert: stream.[[state]] is "readable".','line_number':268,'multiline':False]
['text':' Step 8: Return ! stream.[[readableStreamController]].[[PullSteps]]().','line_number':271,'multiline':False]
