['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]
['text':'
 * GC-internal definition of GC cell kinds.
 ','line_number':7,'multiline':True]
['text':' The GC allocation kinds.','line_number':31,'multiline':False]
['text':'','line_number':32,'multiline':False]
['text':' These are defined by macros which enumerate the different allocation kinds','line_number':33,'multiline':False]
['text':' and supply the following information:','line_number':34,'multiline':False]
['text':'','line_number':35,'multiline':False]
['text':'  - the corresponding AllocKind','line_number':36,'multiline':False]
['text':'  - their JS::TraceKind','line_number':37,'multiline':False]
['text':'  - their C++ base type','line_number':38,'multiline':False]
['text':'  - a C++ type of the correct size','line_number':39,'multiline':False]
['text':'  - whether they can be finalized on the background thread','line_number':40,'multiline':False]
['text':'  - whether they can be allocated in the nursery','line_number':41,'multiline':False]
['text':'  - whether they can be compacted','line_number':42,'multiline':False]
['text':' clang-format off','line_number':44,'multiline':False]
['text':' AllocKind              TraceKind     TypeName           SizedType          BGFinal Nursery Compact ','line_number':46,'multiline':True]
['text':' AllocKind              TraceKind     TypeName               SizedType              BGFinal Nursery Compact ','line_number':67,'multiline':True]
['text':' AllocKind              TraceKind     TypeName           SizedType          BGFinal Nursery Compact ','line_number':84,'multiline':True]
['text':' clang-format on','line_number':90,'multiline':False]
['text':' clang-format off','line_number':103,'multiline':False]
['text':' Hardcoded to first object kind.','line_number':115,'multiline':False]
['text':' clang-format on','line_number':116,'multiline':False]
['text':'
 * This flag allows an allocation site to request a specific heap based upon the
 * estimated lifetime or lifetime requirements of objects allocated from that
 * site.
 ','line_number':127,'multiline':True]
['text':' Returns a sequence for use in a range-based for loop,','line_number':152,'multiline':False]
['text':' to iterate over all alloc kinds.','line_number':153,'multiline':False]
['text':' Returns a sequence for use in a range-based for loop,','line_number':158,'multiline':False]
['text':' to iterate over all object alloc kinds.','line_number':159,'multiline':False]
['text':' Returns a sequence for use in a range-based for loop,','line_number':165,'multiline':False]
['text':' to iterate over alloc kinds from |first| to |limit|, exclusive.','line_number':166,'multiline':False]
['text':' AllAllocKindArray<ValueType> gives an enumerated array of ValueTypes,','line_number':174,'multiline':False]
['text':' with each index corresponding to a particular alloc kind.','line_number':175,'multiline':False]
['text':' ObjectAllocKindArray<ValueType> gives an enumerated array of ValueTypes,','line_number':180,'multiline':False]
['text':' with each index corresponding to a particular object alloc kind.','line_number':181,'multiline':False]
['text':' namespace gc ','line_number':250,'multiline':True]
['text':' namespace js ','line_number':251,'multiline':True]
['text':' gc_AllocKind_h ','line_number':253,'multiline':True]
