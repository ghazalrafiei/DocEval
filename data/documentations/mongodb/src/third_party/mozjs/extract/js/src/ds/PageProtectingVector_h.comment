['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]
['text':'
 * PageProtectingVector is a vector that can only grow or be cleared, restricts
 * access to memory pages that haven't been used yet, and marks all of its fully
 * used memory pages as read-only. It can be used to detect heap corruption in
 * important buffers, since anything that tries to write into its protected
 * pages will crash. On Nightly and Aurora, these crashes will additionally be
 * annotated with a moz crash reason using MemoryProtectionExceptionHandler.
 *
 * PageProtectingVector's protection is limited to full pages. If the front
 * of its buffer is not aligned on a page boundary, elems preceding the first
 * page boundary will not be protected. Similarly, the end of the buffer will
 * not be fully protected unless it is aligned on a page boundary. Altogether,
 * up to two pages of memory may not be protected.
 ','line_number':21,'multiline':True]
['text':' We hardcode the page size here to minimize administrative overhead. ','line_number':56,'multiline':True]
['text':'
   * The number of elements that can be added before we need to either adjust
   * the active page or resize the buffer. If |elemsUntilTest < 0| we will
   * take the slow paths in the append calls.
   ','line_number':61,'multiline':True]
['text':'
   * The offset of the currently 'active' page - that is, the page that is
   * currently being written to. If both used and unused bytes are protected,
   * this will be the only (fully owned) page with read and write access.
   ','line_number':68,'multiline':True]
['text':'
   * The first fully owned page. This is the first page that can
   * be protected, but it may not be the first *active* page.
   ','line_number':75,'multiline':True]
['text':'
   * The last fully owned page. This is the last page that can
   * be protected, but it may not be the last *active* page.
   ','line_number':81,'multiline':True]
['text':'
   * The size in elems that a buffer needs to be before its pages will be
   * protected. This is intended to reduce churn for small vectors while
   * still offering protection when they grow large enough.
   ','line_number':87,'multiline':True]
['text':'
   * Sets the lower bound on the size, in elems, that this vector's underlying
   * capacity has to be before its used pages will be protected.
   ','line_number':357,'multiline':True]
['text':' Disable protection on the smallest containing region. ','line_number':369,'multiline':True]
['text':' Re-enable protection on the smallest containing region. ','line_number':383,'multiline':True]
['text':' Ensure that we're here because we reached a page','line_number':480,'multiline':False]
['text':' boundary and not because of a buffer overflow.','line_number':481,'multiline':False]
['text':' namespace js ','line_number':500,'multiline':True]
['text':' ds_PageProtectingVector_h ','line_number':502,'multiline':True]
