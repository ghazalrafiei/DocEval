['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 *
 * Copyright 2019 Mozilla Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ','line_number':1,'multiline':True]
['text':' Generate a stackmap for a function's stack-overflow-at-entry trap, with','line_number':47,'multiline':False]
['text':' the structure:','line_number':48,'multiline':False]
['text':'','line_number':49,'multiline':False]
['text':'    <reg dump area>','line_number':50,'multiline':False]
['text':'    |       ++ <space reserved before trap, if any>','line_number':51,'multiline':False]
['text':'    |               ++ <space for Frame>','line_number':52,'multiline':False]
['text':'    |                       ++ <inbound arg area>','line_number':53,'multiline':False]
['text':'    |                                           |','line_number':54,'multiline':False]
['text':'    Lowest Addr                                 Highest Addr','line_number':55,'multiline':False]
['text':'','line_number':56,'multiline':False]
['text':' The caller owns the resulting stackmap.  This assumes a grow-down stack.','line_number':57,'multiline':False]
['text':'','line_number':58,'multiline':False]
['text':' For non-debug builds, if the stackmap would contain no pointers, no','line_number':59,'multiline':False]
['text':' stackmap is created, and nullptr is returned.  For a debug build, a','line_number':60,'multiline':False]
['text':' stackmap is always created and returned.','line_number':61,'multiline':False]
['text':'','line_number':62,'multiline':False]
['text':' The "space reserved before trap" is the space reserved by','line_number':63,'multiline':False]
['text':' MacroAssembler::wasmReserveStackChecked, in the case where the frame is','line_number':64,'multiline':False]
['text':' "small", as determined by that function.','line_number':65,'multiline':False]
['text':' Ensure this is defined on all return paths.','line_number':72,'multiline':False]
['text':' The size of the wasm::Frame itself.','line_number':75,'multiline':False]
['text':' The size of the register dump (trap) area.','line_number':78,'multiline':False]
['text':' This is the total number of bytes covered by the map.','line_number':81,'multiline':False]
['text':' Create the stackmap initially in this vector.  Since most frames will','line_number':86,'multiline':False]
['text':' contain 128 or fewer words, heap allocation is avoided in the majority of','line_number':87,'multiline':False]
['text':' cases.  vec[0] is for the lowest address in the map, vec[N-1] is for the','line_number':88,'multiline':False]
['text':' highest address in the map.','line_number':89,'multiline':False]
['text':' Keep track of whether we've actually seen any refs.','line_number':92,'multiline':False]
['text':' REG DUMP AREA','line_number':95,'multiline':False]
['text':' SPACE RESERVED BEFORE TRAP','line_number':111,'multiline':False]
['text':' SPACE FOR FRAME','line_number':117,'multiline':False]
['text':' INBOUND ARG AREA','line_number':122,'multiline':False]
['text':' We saw no references, and this is a non-debug build, so don't bother','line_number':144,'multiline':False]
['text':' building the stackmap.','line_number':145,'multiline':False]
['text':' Convert vec into a wasm::StackMap.','line_number':151,'multiline':False]
['text':' If this doesn't hold, we can't distinguish saved and not-saved','line_number':178,'multiline':False]
['text':' registers in the MachineState.  See MachineState::MachineState().','line_number':179,'multiline':False]
['text':' If this doesn't hold, the associated register wasn't saved by','line_number':194,'multiline':False]
['text':' the trap exit stub.  Better to crash now than much later, in','line_number':195,'multiline':False]
['text':' some obscure place, and possibly with security consequences.','line_number':196,'multiline':False]
['text':' offsetFromTop is an offset in words down from the highest','line_number':199,'multiline':False]
['text':' address in the exit stub save area.  Switch it around to be an','line_number':200,'multiline':False]
['text':' offset up from the bottom of the (integer register) save area.','line_number':201,'multiline':False]
['text':' If no incremental GC has started, we don't need the barrier.','line_number':213,'multiline':False]
['text':' If the previous value is null, we don't need the barrier.','line_number':220,'multiline':False]
['text':' The prebarrier assumes that x28 == sp.','line_number':232,'multiline':False]
['text':' If the pointer being stored is null, no barrier.','line_number':246,'multiline':False]
['text':' If there is a containing object and it is in the nursery, no barrier.','line_number':249,'multiline':False]
['text':' If the pointer being stored is to a tenured object, no barrier.','line_number':255,'multiline':False]
['text':' ud2','line_number':264,'multiline':False]
['text':' call *%r_','line_number':265,'multiline':False]
['text':' call simm32','line_number':266,'multiline':False]
['text':' nop_five','line_number':269,'multiline':False]
['text':' must be ARM, not Thumb','line_number':273,'multiline':False]
['text':' udf','line_number':274,'multiline':False]
['text':' blx reg (ARM, enc A1)','line_number':275,'multiline':False]
['text':' bl simm24 (ARM, enc A1)','line_number':276,'multiline':False]
['text':' "as_nop"','line_number':277,'multiline':False]
['text':' hlt','line_number':283,'multiline':False]
['text':' blr reg','line_number':284,'multiline':False]
['text':' bl simm26','line_number':285,'multiline':False]
['text':' nop','line_number':286,'multiline':False]
['text':' TODO (bug 1699696): Implement this.  As for the platforms above, we need to','line_number':289,'multiline':False]
['text':' enumerate all code sequences that can precede the stackmap location.','line_number':290,'multiline':False]
['text':' namespace wasm','line_number':298,'multiline':False]
['text':' namespace js','line_number':299,'multiline':False]
