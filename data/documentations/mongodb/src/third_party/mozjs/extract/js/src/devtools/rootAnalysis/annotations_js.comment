['text':' This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]
['text':' -*- indent-tabs-mode: nil; js-indent-level: 4 -*- ','line_number':5,'multiline':True]
['text':' Ignore calls made through these function pointers','line_number':9,'multiline':False]
['text':' Types that when constructed with no arguments, are "safe" values (they do','line_number':19,'multiline':False]
['text':' not contain GC pointers).','line_number':20,'multiline':False]
['text':' This is usually a simple variable name, but sometimes a full name gets','line_number':41,'multiline':False]
['text':' passed through. And sometimes that name is truncated. Examples:','line_number':42,'multiline':False]
['text':'   _ZL13gAbortHandler|mozalloc_oom.cpp:void (* gAbortHandler)(size_t)','line_number':43,'multiline':False]
['text':'   _ZL14pMutexUnlockFn|umutex.cpp:void (* pMutexUnlockFn)(const void*','line_number':44,'multiline':False]
['text':' hook called during script finalization which cannot GC.','line_number':56,'multiline':False]
['text':' Call through a 'callback' function pointer, in a place where we're going','line_number':60,'multiline':False]
['text':' to be throwing a JS exception.','line_number':61,'multiline':False]
['text':' The math cache only gets called with non-GC math functions.','line_number':65,'multiline':False]
['text':' It would probably be better to somehow rewrite PR_CallOnce(foo) into a','line_number':69,'multiline':False]
['text':' call of foo, but for now just assume that nobody is crazy enough to use','line_number':70,'multiline':False]
['text':' PR_CallOnce with a function that can GC.','line_number':71,'multiline':False]
['text':' Ignore calls through functions pointers with these types','line_number':78,'multiline':False]
['text':' replace_malloc','line_number':87,'multiline':False]
['text':' replace_malloc','line_number':88,'multiline':False]
['text':' Ignore calls through TYPE.FIELD, where TYPE is the class or struct name containing','line_number':93,'multiline':False]
['text':' a function pointer field named FIELD.','line_number':94,'multiline':False]
['text':' destructors in ICU code can't cause GC','line_number':101,'multiline':False]
['text':' During tracing, cannot GC.','line_number':102,'multiline':False]
['text':' During tracing, cannot GC.','line_number':103,'multiline':False]
['text':' Horrible special case for ignoring a false positive in xptcstubs: there','line_number':127,'multiline':False]
['text':' is a local variable 'paramBuffer' holding an array of nsXPTCMiniVariant','line_number':128,'multiline':False]
['text':' on the stack, which appears to be live across a GC call because its','line_number':129,'multiline':False]
['text':' constructor is called when the array is initialized, even though the','line_number':130,'multiline':False]
['text':' constructor is a no-op. So we'll do a very narrow exclusion for the use','line_number':131,'multiline':False]
['text':' that incorrectly started the live range, which was basically "__temp_1 =','line_number':132,'multiline':False]
['text':' paramBuffer".','line_number':133,'multiline':False]
['text':'','line_number':134,'multiline':False]
['text':' By scoping it so narrowly, we can detect most hazards that would be','line_number':135,'multiline':False]
['text':' caused by modifications in the PrepareAndDispatch code. It just barely','line_number':136,'multiline':False]
['text':' avoids having a hazard already.','line_number':137,'multiline':False]
['text':' Functions which should not be treated as using variable.','line_number':146,'multiline':False]
['text':' Functions which may take indirect pointers to unrooted GC things,','line_number':163,'multiline':False]
['text':' but will copy them into rooted locations before calling anything','line_number':164,'multiline':False]
['text':' that can GC. These parameters should usually be replaced with','line_number':165,'multiline':False]
['text':' handles or mutable handles.','line_number':166,'multiline':False]
['text':' Return whether csu.method is one that we claim can never GC.','line_number':179,'multiline':False]
['text':' Ignore calls of these functions (so ignore any stack containing these)','line_number':185,'multiline':False]
['text':' Has an indirect call under it by the name "__f", which seemed too','line_number':196,'multiline':False]
['text':' generic to ignore by itself.','line_number':197,'multiline':False]
['text':' Bug 1056410 - devirtualization prevents the standard nsISupports::Release heuristic from working','line_number':200,'multiline':False]
['text':' Allocation API','line_number':204,'multiline':False]
['text':' FIXME!','line_number':210,'multiline':False]
['text':' FIXME!','line_number':220,'multiline':False]
['text':' Similar to heap snapshot mock classes, and GTests below. This posts a','line_number':223,'multiline':False]
['text':' synchronous runnable when a GTest fails, and we are pretty sure that the','line_number':224,'multiline':False]
['text':' particular runnable it posts can't even GC, but the analysis isn't','line_number':225,'multiline':False]
['text':' currently smart enough to determine that. In either case, this is (a)','line_number':226,'multiline':False]
['text':' only in GTests, and (b) only when the Gtest has already failed. We have','line_number':227,'multiline':False]
['text':' static and dynamic checks for no GC in the non-test code, and in the test','line_number':228,'multiline':False]
['text':' code we fall back to only the dynamic checks.','line_number':229,'multiline':False]
['text':' This calls any JSObjectMovedOp for the tenured object via an indirect call.','line_number':234,'multiline':False]
['text':' It would be cool to somehow annotate that nsTHashtable<T> will use','line_number':243,'multiline':False]
['text':' nsTHashtable<T>::s_MatchEntry for its matchEntry function pointer, but','line_number':244,'multiline':False]
['text':' there is no mechanism for that. So we will just annotate a particularly','line_number':245,'multiline':False]
['text':' troublesome logging-related usage.','line_number':246,'multiline':False]
['text':' VTune internals that lazy-load a shared library and make IndirectCalls.','line_number':252,'multiline':False]
['text':' The big hammers.','line_number':256,'multiline':False]
['text':' This will happen early enough in initialization to not matter.','line_number':260,'multiline':False]
['text':' Stores a function pointer in an AutoProfilerLabelData struct and calls it.','line_number':267,'multiline':False]
['text':' And it's in mozglue, which doesn't have access to the attributes yet.','line_number':268,'multiline':False]
['text':' This gets into PLDHashTable function pointer territory, and should get','line_number':271,'multiline':False]
['text':' set up early enough to not do anything when it matters anyway.','line_number':272,'multiline':False]
['text':' This annotation is correct, but the reasoning is still being hashed out','line_number':275,'multiline':False]
['text':' in bug 1582326 comment 8 and on.','line_number':276,'multiline':False]
['text':' PLDHashTable again','line_number':279,'multiline':False]
['text':' OOM handling during logging','line_number':282,'multiline':False]
['text':' This would need to know that the nsCOMPtr refcount will not go to zero.','line_number':285,'multiline':False]
['text':' As the comment says "Refcount isn't zero, so Suspect won't delete anything."','line_number':288,'multiline':False]
['text':' Calls MergeSort','line_number':291,'multiline':False]
['text':' nsIEventTarget.IsOnCurrentThreadInfallible does not get resolved, and','line_number':294,'multiline':False]
['text':' this is called on non-JS threads so cannot use AutoSuppressGCAnalysis.','line_number':295,'multiline':False]
['text':' Field calls will not be in readableNames','line_number':328,'multiline':False]
['text':' The protobuf library, and [de]serialization code generated by the','line_number':337,'multiline':False]
['text':' protobuf compiler, uses a _ton_ of function pointers but they are all','line_number':338,'multiline':False]
['text':' internal. The same is true for ICU. Easiest to just ignore that mess','line_number':339,'multiline':False]
['text':' here.','line_number':340,'multiline':False]
['text':' Ignore anything that goes through heap snapshot GTests or mocked classes','line_number':344,'multiline':False]
['text':' used in heap snapshot GTests. GTest and GMock expose a lot of virtual','line_number':345,'multiline':False]
['text':' methods and function pointers that could potentially GC after an','line_number':346,'multiline':False]
['text':' assertion has already failed (depending on user-provided code), but don't','line_number':347,'multiline':False]
['text':' exhibit that behavior currently. For non-test code, we have dynamic and','line_number':348,'multiline':False]
['text':' static checks that ensure we don't GC. However, for test code we opt out','line_number':349,'multiline':False]
['text':' of static checks here, because of the above stated GMock/GTest issues,','line_number':350,'multiline':False]
['text':' and rely on only the dynamic checks provided by AutoAssertCannotGC.','line_number':351,'multiline':False]
['text':' Templatized function','line_number':355,'multiline':False]
['text':' Bug 1577915 - Sixgill is ignoring a template param that makes its CFG','line_number':359,'multiline':False]
['text':' impossible.','line_number':360,'multiline':False]
['text':' These call through an 'op' function pointer.','line_number':364,'multiline':False]
['text':' TODO: modify refillFreeList<NoGC> to not need data flow analysis to','line_number':368,'multiline':False]
['text':' understand it cannot GC. As of gcc 6, the same problem occurs with','line_number':369,'multiline':False]
['text':' tryNewTenuredThing, tryNewNurseryObject, and others.','line_number':370,'multiline':False]
['text':' If edgeType is a constructor type, return whatever limits it implies for its','line_number':411,'multiline':False]
['text':' scope (or zero if not matching).','line_number':412,'multiline':False]
['text':' Check whether this could be a constructor','line_number':415,'multiline':False]
['text':' Check whether the type is a known suppression type.','line_number':423,'multiline':False]
['text':' And now make sure this is the constructor, not some other method on a','line_number':429,'multiline':False]
['text':' suppression type. varName[0] contains the qualified name.','line_number':430,'multiline':False]
['text':' Mangled names of constructors have C<num>E or C<num>I','line_number':433,'multiline':False]
['text':' nsISupports subclasses' methods may be scriptable (or overridden','line_number':444,'multiline':False]
['text':' via binary XPCOM), and so may GC. But some fields just aren't going','line_number':445,'multiline':False]
['text':' to get overridden with something that can GC.','line_number':446,'multiline':False]
['text':' Now that binary XPCOM is dead, all these annotations should be replaced','line_number':452,'multiline':False]
['text':' with something based on bug 1347999.','line_number':453,'multiline':False]
['text':' Fields on the [builtinclass] nsIPrincipal','line_number':473,'multiline':False]
['text':' Fields on nsIURI','line_number':483,'multiline':False]
['text':' nsIScriptSecurityManager is not [builtinclass], but smaug says "the','line_number':500,'multiline':False]
['text':' interface definitely should be builtinclass", which is good enough.','line_number':501,'multiline':False]
['text':' Safe only because jsids are currently only made from pinned strings.','line_number':514,'multiline':False]
['text':' _Z...E = function','line_number':521,'multiline':False]
['text':' 9JSContext = JSContext*','line_number':522,'multiline':False]
['text':' j = uint32','line_number':523,'multiline':False]
['text':' PN2JS5Value = JS::Value*','line_number':524,'multiline':False]
['text':'   P = pointer','line_number':525,'multiline':False]
['text':'   N2JS = JS::','line_number':526,'multiline':False]
['text':'   5Value = Value','line_number':527,'multiline':False]
