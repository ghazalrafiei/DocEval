['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]
['text':'///////////////////////////////////////////////////////////////////','line_number':20,'multiline':False]
['text':' Utility','line_number':21,'multiline':False]
['text':'///////////////////////////////////////////////////////////////////','line_number':22,'multiline':False]
['text':' Fast path for the common case.','line_number':69,'multiline':False]
['text':' Only merge if the sizes match, so that we don't get confused about the','line_number':74,'multiline':False]
['text':' width of spill slots.','line_number':75,'multiline':False]
['text':'///////////////////////////////////////////////////////////////////','line_number':79,'multiline':False]
['text':' LiveRange','line_number':80,'multiline':False]
['text':'///////////////////////////////////////////////////////////////////','line_number':81,'multiline':False]
['text':' Move over all uses which fit in |other|'s boundaries.','line_number':116,'multiline':False]
['text':' Distribute the definition to |other| as well, if possible.','line_number':128,'multiline':False]
['text':'///////////////////////////////////////////////////////////////////','line_number':173,'multiline':False]
['text':' SpillSet','line_number':174,'multiline':False]
['text':'///////////////////////////////////////////////////////////////////','line_number':175,'multiline':False]
['text':'///////////////////////////////////////////////////////////////////','line_number':183,'multiline':False]
['text':' LiveBundle','line_number':184,'multiline':False]
['text':'///////////////////////////////////////////////////////////////////','line_number':185,'multiline':False]
['text':' DEBUG','line_number':195,'multiline':False]
['text':'///////////////////////////////////////////////////////////////////','line_number':259,'multiline':False]
['text':' VirtualRegister','line_number':260,'multiline':False]
['text':'///////////////////////////////////////////////////////////////////','line_number':261,'multiline':False]
['text':' Mark [from,to) as a live range for this register during the initial','line_number':267,'multiline':False]
['text':' liveness analysis, coalescing with any existing overlapping ranges.','line_number':268,'multiline':False]
['text':' On some pathological graphs there might be a huge number of different','line_number':270,'multiline':False]
['text':' live ranges. Allow non-overlapping live range to be merged if the','line_number':271,'multiline':False]
['text':' number of ranges exceeds the cap below.','line_number':272,'multiline':False]
['text':' The new range should go after this one.','line_number':281,'multiline':False]
['text':' The new range should go before this one.','line_number':288,'multiline':False]
['text':' This is the first old range we've found that overlaps the new','line_number':293,'multiline':False]
['text':' range. Extend this one to cover its union with the new range.','line_number':294,'multiline':False]
['text':' Continue searching to see if any other old ranges can be','line_number':304,'multiline':False]
['text':' coalesced with the new merged range.','line_number':305,'multiline':False]
['text':' Coalesce this range into the previous range we merged into.','line_number':310,'multiline':False]
['text':' The new range does not overlap any existing range for the vreg.','line_number':324,'multiline':False]
['text':' = false ','line_number':354,'multiline':True]
['text':'///////////////////////////////////////////////////////////////////','line_number':385,'multiline':False]
['text':' BacktrackingAllocator','line_number':386,'multiline':False]
['text':'///////////////////////////////////////////////////////////////////','line_number':387,'multiline':False]
['text':' This function pre-allocates and initializes as much global state as possible','line_number':389,'multiline':False]
['text':' to avoid littering the algorithms with memory management cruft.','line_number':390,'multiline':False]
['text':' Build virtual register objects.','line_number':409,'multiline':False]
['text':' isTemp = ','line_number':427,'multiline':True]
['text':' isTemp = ','line_number':435,'multiline':True]
['text':' isTemp = ','line_number':441,'multiline':True]
['text':' Partition the graph into hot and cold sections, for helping to make','line_number':465,'multiline':False]
['text':' splitting decisions. Since we don't have any profiling data this is a','line_number':466,'multiline':False]
['text':' crapshoot, so just mark the bodies of inner loops as hot and everything','line_number':467,'multiline':False]
['text':' else as cold.','line_number':468,'multiline':False]
['text':' If we see a loop header, mark the backedge so we know when we have','line_number':474,'multiline':False]
['text':' hit the end of the loop. Don't process the loop immediately, so that','line_number':475,'multiline':False]
['text':' if there is an inner loop we will ignore the outer backedge.','line_number':476,'multiline':False]
['text':' Returns true iff ins has a def/temp reusing the input allocation.','line_number':502,'multiline':False]
['text':'
 * This function builds up liveness ranges for all virtual registers
 * defined in the function.
 *
 * The algorithm is based on the one published in:
 *
 * Wimmer, Christian, and Michael Franz. "Linear Scan Register Allocation on
 *     SSA Form." Proceedings of the International Symposium on Code Generation
 *     and Optimization. Toronto, Ontario, Canada, ACM. 2010. 170-79. PDF.
 *
 * The algorithm operates on blocks ordered such that dominators of a block
 * are before the block itself, and such that all blocks of a loop are
 * contiguous. It proceeds backwards over the instructions in this order,
 * marking registers live at their uses, ending their live ranges at
 * definitions, and recording which registers are live at the top of every
 * block. To deal with loop backedges, registers live at the beginning of
 * a loop gain a range covering the entire loop.
 ','line_number':522,'multiline':True]
['text':' Propagate liveIn from our successors to us.','line_number':566,'multiline':False]
['text':' Skip backedges, as we fix them up at the loop header.','line_number':569,'multiline':False]
['text':' Add successor phis.','line_number':575,'multiline':False]
['text':' Registers are assumed alive for the entire block, a define shortens','line_number':587,'multiline':False]
['text':' the range to the point of definition.','line_number':588,'multiline':False]
['text':' Shorten the front end of ranges for live variables to their point of','line_number':595,'multiline':False]
['text':' definition, if found.','line_number':596,'multiline':False]
['text':' Calls may clobber registers, so force a spill and reload around the','line_number':599,'multiline':False]
['text':' callsite.','line_number':600,'multiline':False]
['text':' If this register doesn't have an explicit def above, mark','line_number':612,'multiline':False]
['text':' it as clobbered by the call unless it is actually','line_number':613,'multiline':False]
['text':' call-preserved.','line_number':614,'multiline':False]
['text':' MUST_REUSE_INPUT is implemented by allocating an output','line_number':644,'multiline':False]
['text':' register and moving the input to it. Register hints are','line_number':645,'multiline':False]
['text':' used to avoid unnecessary moves. We give the input an','line_number':646,'multiline':False]
['text':' LUse::ANY policy to avoid allocating a register for the','line_number':647,'multiline':False]
['text':' input.','line_number':648,'multiline':False]
['text':' usedAtStart = ','line_number':653,'multiline':True]
['text':' Normally temps are considered to cover both the input','line_number':670,'multiline':False]
['text':' and output of the associated instruction. In some cases','line_number':671,'multiline':False]
['text':' though we want to use a fixed register as both an input','line_number':672,'multiline':False]
['text':' and clobbered register in the instruction, so watch for','line_number':673,'multiline':False]
['text':' this and shorten the temp to cover only the output.','line_number':674,'multiline':False]
['text':' * For non-call instructions, temps cover both the input and output,','line_number':691,'multiline':False]
['text':'   so temps never alias uses (even at-start uses) or defs.','line_number':692,'multiline':False]
['text':' * For call instructions, temps only cover the input (the output is','line_number':693,'multiline':False]
['text':'   used for the force-spill ranges added above). This means temps','line_number':694,'multiline':False]
['text':'   still don't alias uses but they can alias the (fixed) defs. For now','line_number':695,'multiline':False]
['text':'   we conservatively require temps to have a fixed register for call','line_number':696,'multiline':False]
['text':'   instructions to prevent a footgun.','line_number':697,'multiline':False]
['text':' Call uses should always be at-start, since calls use all','line_number':716,'multiline':False]
['text':' registers.','line_number':717,'multiline':False]
['text':' If there are both useRegisterAtStart(x) and useRegister(y)','line_number':722,'multiline':False]
['text':' uses, we may assign the same register to both operands','line_number':723,'multiline':False]
['text':' (bug 772830). Don't allow this for now.','line_number':724,'multiline':False]
['text':' Don't treat RECOVERED_INPUT uses as keeping the vreg alive.','line_number':737,'multiline':False]
['text':' Phis have simultaneous assignment semantics at block begin, so at','line_number':769,'multiline':False]
['text':' the beginning of the block we can be sure that liveIn does not','line_number':770,'multiline':False]
['text':' contain any phi outputs.','line_number':771,'multiline':False]
['text':' This is a dead phi, so add a dummy range over all phis. This','line_number':777,'multiline':False]
['text':' can go away if we have an earlier dead code elimination pass.','line_number':778,'multiline':False]
['text':' A divergence from the published algorithm is required here, as','line_number':788,'multiline':False]
['text':' our block order does not guarantee that blocks of a loop are','line_number':789,'multiline':False]
['text':' contiguous. As a result, a single live range spanning the','line_number':790,'multiline':False]
['text':' loop is not possible. Additionally, we require liveIn in a later','line_number':791,'multiline':False]
['text':' pass for resolution, so that must also be fixed up here.','line_number':792,'multiline':False]
['text':' Blocks must already have been visited to have a liveIn set.','line_number':795,'multiline':False]
['text':' Add a range for this entire loop block','line_number':798,'multiline':False]
['text':' Fix up the liveIn set.','line_number':809,'multiline':False]
['text':' Make sure we don't visit this node again','line_number':812,'multiline':False]
['text':' If this is the loop header, any predecessors are either the','line_number':815,'multiline':False]
['text':' backedge or out of the loop, so skip any predecessors of','line_number':816,'multiline':False]
['text':' this block','line_number':817,'multiline':False]
['text':' Terminate loop if out of work.','line_number':830,'multiline':False]
['text':' Grab the next block off the work list, skipping any OSR block.','line_number':835,'multiline':False]
['text':' If end is reached without finding a non-OSR block, then no more work','line_number':844,'multiline':False]
['text':' items were found.','line_number':845,'multiline':False]
['text':' Clear the done set for other loops','line_number':852,'multiline':False]
['text':' Allocate, spill and split bundles until finished.','line_number':896,'multiline':False]
['text':' See if bundle0 and bundle1 can be merged together.','line_number':961,'multiline':False]
['text':' Get a representative virtual register from each bundle.','line_number':966,'multiline':False]
['text':' Registers which might spill to the frame's |this| slot can only be','line_number':973,'multiline':False]
['text':' grouped with other such registers. The frame's |this| slot must always','line_number':974,'multiline':False]
['text':' hold the |this| value, as required by JitFrame tracing and by the Ion','line_number':975,'multiline':False]
['text':' constructor calling convention.','line_number':976,'multiline':False]
['text':' Registers which might spill to the frame's argument slots can only be','line_number':983,'multiline':False]
['text':' grouped with other such registers if the frame might access those','line_number':984,'multiline':False]
['text':' arguments through a lazy arguments object or rest parameter.','line_number':985,'multiline':False]
['text':' When we make a call to a WebAssembly function that returns multiple','line_number':995,'multiline':False]
['text':' results, some of those results can go on the stack.  The callee is passed a','line_number':996,'multiline':False]
['text':' pointer to this stack area, which is represented as having policy','line_number':997,'multiline':False]
['text':' LDefinition::STACK (with type LDefinition::STACKRESULTS).  Individual','line_number':998,'multiline':False]
['text':' results alias parts of the stack area with a value-appropriate type, but','line_number':999,'multiline':False]
['text':' policy LDefinition::STACK.  This aliasing between allocations makes it','line_number':1000,'multiline':False]
['text':' unsound to merge anything with a LDefinition::STACK policy.','line_number':1001,'multiline':False]
['text':' Limit the number of times we compare ranges if there are many ranges in','line_number':1006,'multiline':False]
['text':' one of the bundles, to avoid quadratic behavior.','line_number':1007,'multiline':False]
['text':' Make sure that ranges in the bundles do not overlap.','line_number':1010,'multiline':False]
['text':' Move all ranges from bundle1 into bundle0.','line_number':1031,'multiline':False]
['text':' def is a vreg which reuses input for its output physical register. Try','line_number':1080,'multiline':False]
['text':' to merge ranges for def with those of input if possible, as avoiding','line_number':1081,'multiline':False]
['text':' copies before def's instruction is crucial for generated code quality','line_number':1082,'multiline':False]
['text':' (MUST_REUSE_INPUT is used for all arithmetic on x86/x64).','line_number':1083,'multiline':False]
['text':' The input is not live after the instruction, either in a safepoint','line_number':1098,'multiline':False]
['text':' for the instruction or in subsequent code. The input and output','line_number':1099,'multiline':False]
['text':' can thus be in the same group.','line_number':1100,'multiline':False]
['text':' The input is live afterwards, either in future instructions or in a','line_number':1104,'multiline':False]
['text':' safepoint for the reusing instruction. This is impossible to satisfy','line_number':1105,'multiline':False]
['text':' without copying the input.','line_number':1106,'multiline':False]
['text':'','line_number':1107,'multiline':False]
['text':' It may or may not be better to split the input into two bundles at the','line_number':1108,'multiline':False]
['text':' point of the definition, which may permit merging. One case where it is','line_number':1109,'multiline':False]
['text':' definitely better to split is if the input never has any register uses','line_number':1110,'multiline':False]
['text':' after the instruction. Handle this splitting eagerly.','line_number':1111,'multiline':False]
['text':' The input's lifetime must end within the same block as the definition,','line_number':1115,'multiline':False]
['text':' otherwise it could live on in phis elsewhere.','line_number':1116,'multiline':False]
['text':' If we already split the input for some other register, don't make a','line_number':1122,'multiline':False]
['text':' third bundle.','line_number':1123,'multiline':False]
['text':' If the input will start out in memory then adding a separate bundle for','line_number':1129,'multiline':False]
['text':' memory uses after the def won't help.','line_number':1130,'multiline':False]
['text':' The input cannot have register or reused uses after the definition.','line_number':1136,'multiline':False]
['text':' The new range starts at reg's input position, which means it overlaps','line_number':1160,'multiline':False]
['text':' with the old range at one position. This is what we want, because we','line_number':1161,'multiline':False]
['text':' need to copy the input before the instruction.','line_number':1162,'multiline':False]
['text':' The new range goes in a separate bundle, where it will be spilled during','line_number':1185,'multiline':False]
['text':' allocation.','line_number':1186,'multiline':False]
['text':' Because the definitions are visited in order, the area has been allocated','line_number':1203,'multiline':False]
['text':' before we reach this result, so we know the operand is an LStackArea.','line_number':1204,'multiline':False]
['text':' Create a bundle for each register containing all its ranges.','line_number':1215,'multiline':False]
['text':' If there is an OSR block, merge parameters in that block with the','line_number':1233,'multiline':False]
['text':' corresponding parameters in the initial block.','line_number':1234,'multiline':False]
['text':' Try to merge registers with their reused inputs.','line_number':1261,'multiline':False]
['text':' Try to merge phis with their inputs.','line_number':1279,'multiline':False]
['text':' Add all bundles to the allocation queue, and create spill sets for them.','line_number':1295,'multiline':False]
['text':' Eagerly allocate stack result areas and their component stack results.','line_number':1299,'multiline':False]
['text':' Spill bundles which are required to be in a certain stack slot.','line_number':1336,'multiline':False]
['text':' If we want, but do not require a bundle to be in a specific register,','line_number':1354,'multiline':False]
['text':' only look at that register for allocating and evict or spill if it is','line_number':1355,'multiline':False]
['text':' not available. Picking a separate register may be even worse than','line_number':1356,'multiline':False]
['text':' spilling, as it will still necessitate moves and will tie up more','line_number':1357,'multiline':False]
['text':' registers than if we spilled.','line_number':1358,'multiline':False]
['text':' Spill bundles which have no hint or register requirement.','line_number':1370,'multiline':False]
['text':' Search for any available register which the bundle can be','line_number':1383,'multiline':False]
['text':' allocated to.','line_number':1384,'multiline':False]
['text':' Spill bundles which have no register requirement if they didn't get','line_number':1396,'multiline':False]
['text':' allocated.','line_number':1397,'multiline':False]
['text':' We failed to allocate this bundle.','line_number':1407,'multiline':False]
['text':' A bundle can be processed by doing any of the following:','line_number':1419,'multiline':False]
['text':'','line_number':1420,'multiline':False]
['text':' - Assigning the bundle a register. The bundle cannot overlap any other','line_number':1421,'multiline':False]
['text':'   bundle allocated for that physical register.','line_number':1422,'multiline':False]
['text':'','line_number':1423,'multiline':False]
['text':' - Spilling the bundle, provided it has no register uses.','line_number':1424,'multiline':False]
['text':'','line_number':1425,'multiline':False]
['text':' - Splitting the bundle into two or more bundles which cover the original','line_number':1426,'multiline':False]
['text':'   one. The new bundles are placed back onto the priority queue for later','line_number':1427,'multiline':False]
['text':'   processing.','line_number':1428,'multiline':False]
['text':'','line_number':1429,'multiline':False]
['text':' - Evicting one or more existing allocated bundles, and then doing one','line_number':1430,'multiline':False]
['text':'   of the above operations. Evicted bundles are placed back on the','line_number':1431,'multiline':False]
['text':'   priority queue. Any evicted bundles must have a lower spill weight','line_number':1432,'multiline':False]
['text':'   than the bundle being processed.','line_number':1433,'multiline':False]
['text':'','line_number':1434,'multiline':False]
['text':' As long as this structure is followed, termination is guaranteed.','line_number':1435,'multiline':False]
['text':' In general, we want to minimize the amount of bundle splitting (which','line_number':1436,'multiline':False]
['text':' generally necessitates spills), so allocate longer lived, lower weight','line_number':1437,'multiline':False]
['text':' bundles first and evict and split them later if they prevent allocation','line_number':1438,'multiline':False]
['text':' for higher weight bundles.','line_number':1439,'multiline':False]
['text':' Ok, let's try allocating for this bundle.','line_number':1456,'multiline':False]
['text':' If that worked, we're done!','line_number':1469,'multiline':False]
['text':' If that didn't work, but we have one or more non-fixed bundles','line_number':1474,'multiline':False]
['text':' known to be conflicting, maybe we can evict them and try again.','line_number':1475,'multiline':False]
['text':' A minimal bundle cannot be split any further. If we try to split it','line_number':1488,'multiline':False]
['text':' it at this point we will just end up with the same bundle and will','line_number':1489,'multiline':False]
['text':' enter an infinite loop. Weights and the initial live ranges must','line_number':1490,'multiline':False]
['text':' be constructed so that any minimal bundle is allocatable.','line_number':1491,'multiline':False]
['text':' Set any requirement or hint on bundle according to its definition and','line_number':1502,'multiline':False]
['text':' uses. Return false if there are conflicting requirements which will','line_number':1503,'multiline':False]
['text':' require the bundle to be split.','line_number':1504,'multiline':False]
['text':' Deal with any definition constraints/hints.','line_number':1512,'multiline':False]
['text':' Fixed and stack policies get a FIXED requirement.  (In the stack','line_number':1515,'multiline':False]
['text':' case, the allocation should have been performed already by','line_number':1516,'multiline':False]
['text':' mergeAndQueueRegisters.)','line_number':1517,'multiline':False]
['text':' Phis don't have any requirements, but they should prefer their','line_number':1525,'multiline':False]
['text':' input allocations. This is captured by the group hints above.','line_number':1526,'multiline':False]
['text':' Non-phis get a REGISTER requirement.','line_number':1528,'multiline':False]
['text':' Search uses for requirements.','line_number':1535,'multiline':False]
['text':' If there are multiple fixed registers which the bundle is','line_number':1544,'multiline':False]
['text':' required to use, fail. The bundle will need to be split before','line_number':1545,'multiline':False]
['text':' it can be allocated.','line_number':1546,'multiline':False]
['text':' ANY differs from KEEPALIVE by actively preferring a register.','line_number':1555,'multiline':False]
['text':' The only case of STACK use policies is individual stack results using','line_number':1561,'multiline':False]
['text':' their containing stack result area, which is given a fixed allocation','line_number':1562,'multiline':False]
['text':' above.','line_number':1563,'multiline':False]
['text':' One or more aliased registers is allocated to another bundle','line_number':1623,'multiline':False]
['text':' overlapping this one. Keep track of the conflicting set, and in the','line_number':1624,'multiline':False]
['text':' case of multiple conflicting sets keep track of the set with the','line_number':1625,'multiline':False]
['text':' lowest maximum spill weight.','line_number':1626,'multiline':False]
['text':' The #ifdef guards against "unused variable 'existing'" bustage.','line_number':1628,'multiline':False]
['text':' This is likely to trigger an infinite loop in register allocation. This','line_number':1721,'multiline':False]
['text':' can be the result of invalid register constraints, making regalloc','line_number':1722,'multiline':False]
['text':' impossible; consider relaxing those.','line_number':1723,'multiline':False]
['text':' Remove all ranges in the old bundle from their register's list.','line_number':1738,'multiline':False]
['text':' Add all ranges in the new bundles to their register's list.','line_number':1745,'multiline':False]
['text':' Queue the new bundles for register assignment.','line_number':1755,'multiline':False]
['text':' Search for any available register which the bundle can be','line_number':1803,'multiline':False]
['text':' allocated to.','line_number':1804,'multiline':False]
['text':' If the bundle still has no register, spill the bundle.','line_number':1815,'multiline':False]
['text':' Look through all ranges that have been spilled in this set for a','line_number':1850,'multiline':False]
['text':' register definition which is fixed to a stack or argument slot. If we','line_number':1851,'multiline':False]
['text':' find one, use it for all bundles that have been spilled. tryMergeBundles','line_number':1852,'multiline':False]
['text':' makes sure this reuse is possible when an initial bundle contains ranges','line_number':1853,'multiline':False]
['text':' from multiple virtual registers.','line_number':1854,'multiline':False]
['text':' Maximum number of existing spill slots we will look at before giving up','line_number':1890,'multiline':False]
['text':' and allocating a new slot.','line_number':1891,'multiline':False]
['text':' We looked through every slot in the list.','line_number':1901,'multiline':False]
['text':' We can reuse this physical stack slot for the new bundles.','line_number':1922,'multiline':False]
['text':' Update the allocated ranges for the slot.','line_number':1923,'multiline':False]
['text':' On a miss, move the spill to the end of the list. This will cause us','line_number':1934,'multiline':False]
['text':' to make fewer attempts to allocate from slots with a large and','line_number':1935,'multiline':False]
['text':' highly contended range.','line_number':1936,'multiline':False]
['text':' We need a new physical stack slot.','line_number':1945,'multiline':False]
['text':' Check for direct uses of this range.','line_number':1983,'multiline':False]
['text':' Check if there are later ranges for this vreg.','line_number':1996,'multiline':False]
['text':' Check if this range ends at a loop backedge.','line_number':2005,'multiline':False]
['text':' Check if there are phis which this vreg flows to.','line_number':2012,'multiline':False]
['text':' Add moves to handle changing assignments for vregs over their lifetime.','line_number':2032,'multiline':False]
['text':' Look for places where a register's assignment changes in the middle of a','line_number':2035,'multiline':False]
['text':' basic block.','line_number':2036,'multiline':False]
['text':' Remove ranges which will never be used.','line_number':2054,'multiline':False]
['text':' The range which defines the register does not have a predecessor','line_number':2060,'multiline':False]
['text':' to add moves from.','line_number':2061,'multiline':False]
['text':' Ignore ranges that start at block boundaries. We will handle','line_number':2067,'multiline':False]
['text':' these in the next phase.','line_number':2068,'multiline':False]
['text':' If we already saw a range which covers the start of this range','line_number':2076,'multiline':False]
['text':' and has the same allocation, we don't need an explicit move at','line_number':2077,'multiline':False]
['text':' the start of this range.','line_number':2078,'multiline':False]
['text':' preferRegister = ','line_number':2099,'multiline':True]
['text':' Resolve phis to moves.','line_number':2129,'multiline':False]
['text':' preferRegister = ','line_number':2144,'multiline':True]
['text':' Note: we have to use moveAtEdge both here and below (for edge','line_number':2151,'multiline':False]
['text':' resolution) to avoid conflicting moves. See bug 1493900.','line_number':2152,'multiline':False]
['text':' Add moves to resolve graph edges with different allocations at their','line_number':2160,'multiline':False]
['text':' source and target.','line_number':2161,'multiline':False]
['text':' For any uses which feed into MUST_REUSE_INPUT definitions,','line_number':2279,'multiline':False]
['text':' add copies if the use and def have different allocations.','line_number':2280,'multiline':False]
['text':' Fill in the live register sets for all non-call safepoints.','line_number':2328,'multiline':False]
['text':' Don't add output registers to the safepoint.','line_number':2334,'multiline':False]
['text':' We don't add the output register to the safepoint,','line_number':2338,'multiline':False]
['text':' but it still might get added as one of the inputs.','line_number':2339,'multiline':False]
['text':' So eagerly add this reg to the safepoint clobbered registers.','line_number':2340,'multiline':False]
['text':' Safepoints are sorted, so we can shortcut out of this loop','line_number':2355,'multiline':False]
['text':' if we go out of range.','line_number':2356,'multiline':False]
['text':' Include temps but not instruction outputs. Also make sure','line_number':2452,'multiline':False]
['text':' MUST_REUSE_INPUT is not used with gcthings or nunboxes, or','line_number':2453,'multiline':False]
['text':' we would have to add the input reg to this safepoint.','line_number':2454,'multiline':False]
['text':' Annotate move groups in the LIR graph with any register that is not','line_number':2524,'multiline':False]
['text':' allocated at that point and can be used as a scratch register. This is','line_number':2525,'multiline':False]
['text':' only required for x86, as other platforms always have scratch registers','line_number':2526,'multiline':False]
['text':' available for use.','line_number':2527,'multiline':False]
['text':' This register is unavailable for use if (a) it is in use','line_number':2555,'multiline':False]
['text':' by some live range immediately before the move group,','line_number':2556,'multiline':False]
['text':' or (b) it is an operand in one of the group's moves. The','line_number':2557,'multiline':False]
['text':' latter case handles live ranges which end immediately','line_number':2558,'multiline':False]
['text':' before the move group or start immediately after.','line_number':2559,'multiline':False]
['text':' For (b) we need to consider move groups immediately','line_number':2560,'multiline':False]
['text':' preceding or following this one.','line_number':2561,'multiline':False]
['text':'///////////////////////////////////////////////////////////////////','line_number':2611,'multiline':False]
['text':' Debugging methods','line_number':2612,'multiline':False]
['text':'///////////////////////////////////////////////////////////////////','line_number':2613,'multiline':False]
['text':' Suppress -Wformat warning.','line_number':2647,'multiline':False]
['text':' JS_JITSPEW','line_number':2664,'multiline':False]
['text':' JS_JITSPEW','line_number':2752,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':2755,'multiline':False]
['text':' Heuristic Methods','line_number':2756,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':2757,'multiline':False]
['text':' The priority of a bundle is its total length, so that longer lived','line_number':2760,'multiline':False]
['text':' bundles will be processed before shorter ones (even if the longer ones','line_number':2761,'multiline':False]
['text':' have a low spill weight). See processBundle().','line_number':2762,'multiline':False]
['text':' Whether this is a minimal range capturing a definition at ins.','line_number':2775,'multiline':False]
['text':' Whether this is a minimal range capturing |use|.','line_number':2782,'multiline':False]
['text':' If a bundle contains multiple ranges, splitAtAllRegisterUses will split','line_number':2798,'multiline':False]
['text':' each range into a separate bundle.','line_number':2799,'multiline':False]
['text':' If a range contains a fixed use and at least one other use,','line_number':2842,'multiline':False]
['text':' splitAtAllRegisterUses will split each use into a different bundle.','line_number':2843,'multiline':False]
['text':' Minimal bundles have an extremely high spill weight, to ensure they','line_number':2855,'multiline':False]
['text':' can evict any other bundles and be allocated to a register.','line_number':2856,'multiline':False]
['text':' Bundles with fixed uses are given a higher spill weight, since they must','line_number':2886,'multiline':False]
['text':' be allocated to a specific register.','line_number':2887,'multiline':False]
['text':' Compute spill weight as a use density, lowering the weight for long','line_number':2892,'multiline':False]
['text':' lived bundles with relatively few uses.','line_number':2893,'multiline':False]
['text':' If this bundle has portions that are hot and portions that are cold,','line_number':2909,'multiline':False]
['text':' split it at the boundaries between hot and cold code.','line_number':2910,'multiline':False]
['text':' Don't split if there is no hot code in the bundle.','line_number':2922,'multiline':False]
['text':' Don't split if there is no cold code in the bundle.','line_number':2928,'multiline':False]
['text':' Tweak the splitting method when compiling wasm code to look at actual','line_number':2946,'multiline':False]
['text':' uses within the hot/cold code. This heuristic is in place as the below','line_number':2947,'multiline':False]
['text':' mechanism regresses several asm.js tests. Hopefully this will be fixed','line_number':2948,'multiline':False]
['text':' soon and this special case removed. See bug 948838.','line_number':2949,'multiline':False]
['text':' Accumulate the ranges of hot and cold code in the bundle. Note that','line_number':2977,'multiline':False]
['text':' we are only comparing with the single hot range found, so the cold code','line_number':2978,'multiline':False]
['text':' may contain separate hot ranges.','line_number':2979,'multiline':False]
['text':' If this bundle's later uses do not require it to be in a register,','line_number':3065,'multiline':False]
['text':' split it after the last use which does require a register. If conflict','line_number':3066,'multiline':False]
['text':' is specified, only consider register uses before the conflict starts.','line_number':3067,'multiline':False]
['text':' If the range defines a register, consider that a register use for','line_number':3075,'multiline':False]
['text':' our purposes here.','line_number':3076,'multiline':False]
['text':' Uses in the bundle should be sorted.','line_number':3088,'multiline':False]
['text':' considerCopy = ','line_number':3093,'multiline':True]
['text':' Can't trim non-register uses off the end by splitting.','line_number':3101,'multiline':False]
['text':' If this bundle's earlier uses do not require it to be in a register,','line_number':3125,'multiline':False]
['text':' split it before the first use which does require a register. If conflict','line_number':3126,'multiline':False]
['text':' is specified, only consider register uses after the conflict ends.','line_number':3127,'multiline':False]
['text':' considerCopy = ','line_number':3166,'multiline':True]
['text':' Can't trim non-register uses off the beginning by splitting.','line_number':3178,'multiline':False]
['text':' When splitting a bundle according to a list of split positions, return','line_number':3194,'multiline':False]
['text':' whether a use or range at |pos| should use a different bundle than the last','line_number':3195,'multiline':False]
['text':' position this was called for.','line_number':3196,'multiline':False]
['text':' When the split positions are empty we are splitting at all uses.','line_number':3200,'multiline':False]
['text':' We've advanced past all split positions.','line_number':3205,'multiline':False]
['text':' We haven't gotten to the next split position yet.','line_number':3210,'multiline':False]
['text':' We've advanced past the next split position, find the next one which we','line_number':3214,'multiline':False]
['text':' should split at.','line_number':3215,'multiline':False]
['text':' Split the bundle at the given split points. Register uses which have no','line_number':3261,'multiline':False]
['text':' intervening split points are consolidated into the same bundle. If the','line_number':3262,'multiline':False]
['text':' list of split points is empty, then all register uses are placed in','line_number':3263,'multiline':False]
['text':' minimal bundles.','line_number':3264,'multiline':False]
['text':' splitPositions should be sorted.','line_number':3266,'multiline':False]
['text':' We don't need to create a new spill bundle if there already is one.','line_number':3271,'multiline':False]
['text':' The bundle which ranges are currently being added to.','line_number':3304,'multiline':False]
['text':' State for use by UseNewBundle.','line_number':3311,'multiline':False]
['text':' Make new bundles according to the split positions, and distribute ranges','line_number':3314,'multiline':False]
['text':' and uses to them.','line_number':3315,'multiline':False]
['text':' Any uses of a register that appear before its definition has','line_number':3343,'multiline':False]
['text':' finished must be associated with the range for that definition.','line_number':3344,'multiline':False]
['text':' Place this register use into a different bundle from the','line_number':3349,'multiline':False]
['text':' last one if there are any split points between the two uses.','line_number':3350,'multiline':False]
['text':' UseNewBundle always returns true if we are splitting at all','line_number':3351,'multiline':False]
['text':' register uses, but we can still reuse the last range and','line_number':3352,'multiline':False]
['text':' bundle if they have uses at the same position, except when','line_number':3353,'multiline':False]
['text':' either use is fixed (the two uses might require incompatible','line_number':3354,'multiline':False]
['text':' registers.)','line_number':3355,'multiline':False]
['text':' Trim the ends of ranges in each new bundle when there are no other','line_number':3384,'multiline':False]
['text':' earlier or later ranges in the same bundle with the same vreg.','line_number':3385,'multiline':False]
['text':' Split the bundle to separate register uses and non-register uses and','line_number':3432,'multiline':False]
['text':' allow the vreg to be spilled across its range.','line_number':3433,'multiline':False]
['text':' Find the locations of all calls in the bundle's range.','line_number':3435,'multiline':False]
['text':' There are no calls inside this range.','line_number':3443,'multiline':False]
['text':' The search above returns an arbitrary call within the range. Walk','line_number':3448,'multiline':False]
['text':' backwards to find the first call in the range.','line_number':3449,'multiline':False]
['text':' Add all call positions within the range, by walking forwards.','line_number':3461,'multiline':False]
['text':' Calls at the beginning of the range are ignored; there is no splitting','line_number':3469,'multiline':False]
['text':' to do.','line_number':3470,'multiline':False]
['text':' Split at all register uses.','line_number':3522,'multiline':False]
