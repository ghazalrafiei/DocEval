['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]
['text':' mozilla::Maybe','line_number':11,'multiline':False]
['text':' FunctionSyntaxKind','line_number':15,'multiline':False]
['text':' PrivateNameKind','line_number':16,'multiline':False]
['text':' TaggedParserAtomIndex','line_number':18,'multiline':False]
['text':' Parse handler used when processing the syntax in a block of code, to generate','line_number':27,'multiline':False]
['text':' the minimal information which is required to detect syntax errors and allow','line_number':28,'multiline':False]
['text':' bytecode to be emitted for outer functions.','line_number':29,'multiline':False]
['text':'','line_number':30,'multiline':False]
['text':' When parsing, we start at the top level with a full parse, and when possible','line_number':31,'multiline':False]
['text':' only check the syntax for inner functions, so that they can be lazily parsed','line_number':32,'multiline':False]
['text':' into bytecode when/if they first run. Checking the syntax of a function is','line_number':33,'multiline':False]
['text':' several times faster than doing a full parse/emit, and lazy parsing improves','line_number':34,'multiline':False]
['text':' both performance and memory usage significantly when pages contain large','line_number':35,'multiline':False]
['text':' amounts of code that never executes (which happens often).','line_number':36,'multiline':False]
['text':' Remember the last encountered name or string literal during syntax parses.','line_number':38,'multiline':False]
['text':' A non-arrow function expression with block body, from bog-standard','line_number':56,'multiline':False]
['text':' ECMAScript.','line_number':57,'multiline':False]
['text':' This is needed for proper assignment-target handling.  ES6 formally','line_number':63,'multiline':False]
['text':' requires function calls *not* pass IsValidSimpleAssignmentTarget,','line_number':64,'multiline':False]
['text':' but at last check there were still sites with |f() = 5| and similar','line_number':65,'multiline':False]
['text':' in code not actually executed (or at least not executed enough to be','line_number':66,'multiline':False]
['text':' noticed).','line_number':67,'multiline':False]
['text':' Node representing normal names which don't require any special','line_number':72,'multiline':False]
['text':' casing.','line_number':73,'multiline':False]
['text':' Nodes representing the names "arguments" and "eval".','line_number':76,'multiline':False]
['text':' Node representing the "async" name, which may actually be a','line_number':80,'multiline':False]
['text':' contextual keyword.','line_number':81,'multiline':False]
['text':' Node representing private names.','line_number':84,'multiline':False]
['text':' A distinct node for [PrivateName], to make detecting delete this.#x','line_number':91,'multiline':False]
['text':' detectable in syntax parse','line_number':92,'multiline':False]
['text':' Destructuring target patterns can't be parenthesized: |([a]) = [3];|','line_number':96,'multiline':False]
['text':' must be a syntax error.  (We can't use NodeGeneric instead of these','line_number':97,'multiline':False]
['text':' because that would trigger invalid-left-hand-side ReferenceError','line_number':98,'multiline':False]
['text':' semantics when SyntaxError semantics are desired.)','line_number':99,'multiline':False]
['text':' In rare cases a parenthesized |node| doesn't have the same semantics','line_number':103,'multiline':False]
['text':' as |node|.  Each such node has a special Node value, and we use a','line_number':104,'multiline':False]
['text':' different Node value to represent the parenthesized form.  See also','line_number':105,'multiline':False]
['text':' is{Unp,P}arenthesized*(Node), parenthesize(Node), and the various','line_number':106,'multiline':False]
['text':' functions that deal in NodeUnparenthesized* below.','line_number':107,'multiline':False]
['text':' Valuable for recognizing potential destructuring patterns.','line_number':109,'multiline':False]
['text':' The directive prologue at the start of a FunctionBody or ScriptBody','line_number':113,'multiline':False]
['text':' is the longest sequence (possibly empty) of string literal','line_number':114,'multiline':False]
['text':' expression statements at the start of a function.  Thus we need this','line_number':115,'multiline':False]
['text':' to treat |"use strict";| as a possible Use Strict Directive and','line_number':116,'multiline':False]
['text':' |("use strict");| as a useless statement.','line_number':117,'multiline':False]
['text':' For destructuring patterns an assignment element with','line_number':120,'multiline':False]
['text':' an initializer expression is not allowed be parenthesized.','line_number':121,'multiline':False]
['text':' i.e. |{x = 1} = obj|','line_number':122,'multiline':False]
['text':' This node is necessary to determine if the base operand in an','line_number':125,'multiline':False]
['text':' exponentiation operation is an unparenthesized unary expression.','line_number':126,'multiline':False]
['text':' We want to reject |-2 ** 3|, but still need to allow |(-2) ** 3|.','line_number':127,'multiline':False]
['text':' This node is necessary to determine if the LHS of a property access is','line_number':130,'multiline':False]
['text':' super related.','line_number':131,'multiline':False]
['text':' Note: super() is a special form, *not* a function call.','line_number':157,'multiline':False]
['text':' Technically this isn't a destructuring target at all -- the grammar','line_number':167,'multiline':False]
['text':' doesn't treat it as such.  But we need to know when this happens to','line_number':168,'multiline':False]
['text':' consider it a SyntaxError rather than an invalid-left-hand-side','line_number':169,'multiline':False]
['text':' ReferenceError.','line_number':170,'multiline':False]
['text':' Expressions','line_number':286,'multiline':False]
['text':' Statements','line_number':406,'multiline':False]
['text':' All non-arrow function expressions are initially presumed to have','line_number':571,'multiline':False]
['text':' block body.  This will be overridden later *if* the function','line_number':572,'multiline':False]
['text':' expression permissibly has an AssignmentExpression body.','line_number':573,'multiline':False]
['text':' XXX This offset isn't relevant to the offending function name.  But','line_number':611,'multiline':False]
['text':'     we may not *have* that function name around, because of how lazy','line_number':612,'multiline':False]
['text':'     parsing works -- the actual name could be outside','line_number':613,'multiline':False]
['text':'     |tokenStream.userbuf|'s observed region.  So the current offset','line_number':614,'multiline':False]
['text':'     is the best we can do.','line_number':615,'multiline':False]
['text':' This method should only be called from parsers using FullParseHandler.','line_number':643,'multiline':False]
['text':' A number of nodes have different behavior upon parenthesization, but','line_number':685,'multiline':False]
['text':' only in some circumstances.  Convert these nodes to special','line_number':686,'multiline':False]
['text':' parenthesized forms.','line_number':687,'multiline':False]
['text':' Other nodes need not be recognizable after parenthesization; convert','line_number':695,'multiline':False]
['text':' them to a generic node.','line_number':696,'multiline':False]
['text':' Convert parenthesized |async| to a normal name node.','line_number':703,'multiline':False]
['text':' In all other cases, the parenthesized form of |node| is equivalent','line_number':708,'multiline':False]
['text':' to the unparenthesized form: return |node| unchanged.','line_number':709,'multiline':False]
['text':' Remain in syntax-parse mode.','line_number':714,'multiline':False]
['text':' Note: |super.apply(...)| is a special form that calls an "apply"','line_number':732,'multiline':False]
['text':' method retrieved from one value, but using a *different* value as','line_number':733,'multiline':False]
['text':' |this|.  It's not really eligible for the funapply/funcall','line_number':734,'multiline':False]
['text':' optimizations as they're currently implemented (assuming a single','line_number':735,'multiline':False]
['text':' value is used for both retrieval and |this|).','line_number':736,'multiline':False]
['text':' namespace frontend','line_number':761,'multiline':False]
['text':' namespace js','line_number':762,'multiline':False]
['text':' frontend_SyntaxParseHandler_h ','line_number':764,'multiline':True]
