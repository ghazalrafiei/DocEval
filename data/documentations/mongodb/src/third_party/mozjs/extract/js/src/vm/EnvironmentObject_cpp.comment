['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]
['text':' js::GetErrorMessage, JSMSG_*','line_number':13,'multiline':False]
['text':' js::AutoCheckRecursionLimit','line_number':14,'multiline':False]
['text':' js::IsWindow, js::IsWindowProxy','line_number':15,'multiline':False]
['text':' js::GetGeneratorObjectForEnvironment','line_number':20,'multiline':False]
['text':'***************************************************************************','line_number':42,'multiline':True]
['text':' Beware nameless destructuring formal. ','line_number':73,'multiline':True]
['text':'***************************************************************************','line_number':80,'multiline':True]
['text':' All environment objects can be background-finalized.','line_number':88,'multiline':False]
['text':' Helper function for simple environment objects that don't need the overloads','line_number':100,'multiline':False]
['text':' above.','line_number':101,'multiline':False]
['text':'
 * Create a CallObject for a JSScript that is not initialized to any particular
 * callsite. This object can either be initialized (with an enclosing scope and
 * callee) or used as a template for jit compilation.
 ','line_number':114,'multiline':True]
['text':' The JITs assume the result is nursery allocated unless we collected the','line_number':126,'multiline':False]
['text':' nursery, so don't change |heap| here.','line_number':127,'multiline':False]
['text':' If there are parameter expressions, all parameters are lexical and','line_number':137,'multiline':False]
['text':' have TDZ.','line_number':138,'multiline':False]
['text':'
 * Construct a call object for the given bindings.  If this is a call object
 * for a function invocation, callee should be the function being called.
 * Otherwise it must be a call object for eval of strict mode code, and callee
 * must be null.
 ','line_number':151,'multiline':True]
['text':' If there are no defaults, copy the aliased arguments into the call','line_number':185,'multiline':False]
['text':' object manually. If there are defaults, bytecode is generated to do','line_number':186,'multiline':False]
['text':' the copying.','line_number':187,'multiline':False]
['text':' This environment's enclosing link is never used: the','line_number':239,'multiline':False]
['text':' DebugEnvironmentProxy that refers to this scope carries its own','line_number':240,'multiline':False]
['text':' enclosing link, which is what Debugger uses to construct the tree of','line_number':241,'multiline':False]
['text':' Debugger.Environment objects.','line_number':242,'multiline':False]
['text':'***************************************************************************','line_number':261,'multiline':True]
['text':' static ','line_number':263,'multiline':True]
['text':' static ','line_number':282,'multiline':True]
['text':' static ','line_number':312,'multiline':True]
['text':' This environment's enclosing link is never used: the','line_number':323,'multiline':False]
['text':' DebugEnvironmentProxy that refers to this scope carries its own','line_number':324,'multiline':False]
['text':' enclosing link, which is what Debugger uses to construct the tree of','line_number':325,'multiline':False]
['text':' Debugger.Environment objects.','line_number':326,'multiline':False]
['text':'***************************************************************************','line_number':350,'multiline':True]
['text':' lookupProperty','line_number':353,'multiline':False]
['text':' defineProperty','line_number':354,'multiline':False]
['text':' hasProperty','line_number':355,'multiline':False]
['text':' getProperty','line_number':356,'multiline':False]
['text':' setProperty','line_number':357,'multiline':False]
['text':' getOwnPropertyDescriptor','line_number':359,'multiline':False]
['text':' deleteProperty','line_number':360,'multiline':False]
['text':' getElements','line_number':361,'multiline':False]
['text':' funToString','line_number':362,'multiline':False]
['text':' addProperty','line_number':366,'multiline':False]
['text':' delProperty','line_number':367,'multiline':False]
['text':' enumerate','line_number':368,'multiline':False]
['text':' newEnumerate','line_number':369,'multiline':False]
['text':' resolve','line_number':370,'multiline':False]
['text':' mayResolve','line_number':371,'multiline':False]
['text':' finalize','line_number':372,'multiline':False]
['text':' call','line_number':373,'multiline':False]
['text':' hasInstance','line_number':374,'multiline':False]
['text':' construct','line_number':375,'multiline':False]
['text':' trace','line_number':376,'multiline':False]
['text':' static ','line_number':387,'multiline':True]
['text':' Initialize this early so that we can manipulate the env object without','line_number':404,'multiline':False]
['text':' causing assertions.','line_number':405,'multiline':False]
['text':' Initialize all lexical bindings and imports as uninitialized. Imports','line_number':408,'multiline':False]
['text':' get uninitialized because they have a special TDZ for cyclic imports.','line_number':409,'multiline':False]
['text':' It is not be possible to add or remove bindings from a module environment','line_number':418,'multiline':False]
['text':' after this point as module code is always strict.','line_number':419,'multiline':False]
['text':' static ','line_number':468,'multiline':True]
['text':' static ','line_number':492,'multiline':True]
['text':' static ','line_number':504,'multiline':True]
['text':' static ','line_number':521,'multiline':True]
['text':' static ','line_number':534,'multiline':True]
['text':' static ','line_number':553,'multiline':True]
['text':' static ','line_number':560,'multiline':True]
['text':'***************************************************************************','line_number':584,'multiline':True]
['text':' static ','line_number':590,'multiline':True]
['text':'***************************************************************************','line_number':611,'multiline':True]
['text':' static ','line_number':617,'multiline':True]
['text':'***************************************************************************','line_number':636,'multiline':True]
['text':' Implements ES6 8.1.1.2.1 HasBinding steps 7-9. ','line_number':688,'multiline':True]
['text':' SpiderMonkey-specific: consider the internal '.this' name to be unscopable.','line_number':713,'multiline':False]
['text':' Other internal dot-names shouldn't even end up in with-environments.','line_number':720,'multiline':False]
['text':' ES 8.1.1.2.1 step 3-5.','line_number':754,'multiline':False]
['text':' Steps 7-10. (Step 6 is a no-op.)','line_number':762,'multiline':False]
['text':' lookupProperty','line_number':806,'multiline':False]
['text':' defineProperty','line_number':807,'multiline':False]
['text':' hasProperty','line_number':808,'multiline':False]
['text':' getProperty','line_number':809,'multiline':False]
['text':' setProperty','line_number':810,'multiline':False]
['text':' getOwnPropertyDescriptor','line_number':811,'multiline':False]
['text':' deleteProperty','line_number':812,'multiline':False]
['text':' getElements','line_number':813,'multiline':False]
['text':' funToString','line_number':814,'multiline':False]
['text':' static ','line_number':825,'multiline':True]
['text':' Callers are responsible for segregating the NonSyntactic case from simple','line_number':856,'multiline':False]
['text':' compilation cases.','line_number':857,'multiline':False]
['text':' The XPConnect subscript loader, which may pass in its own','line_number':865,'multiline':False]
['text':' environments to load scripts in, expects the environment chain to','line_number':866,'multiline':False]
['text':' be the holder of "var" declarations. In SpiderMonkey, such objects','line_number':867,'multiline':False]
['text':' are called "qualified varobjs", the "qualified" part meaning the','line_number':868,'multiline':False]
['text':' declaration was qualified by "var". There is only sadness.','line_number':869,'multiline':False]
['text':'','line_number':870,'multiline':False]
['text':' See JSObject::isQualifiedVarObj.','line_number':871,'multiline':False]
['text':' Also get a non-syntactic lexical environment to capture 'let' and','line_number':876,'multiline':False]
['text':' 'const' bindings. To persist lexical bindings, we have a 1-1','line_number':877,'multiline':False]
['text':' mapping with the final unwrapped environment object (the','line_number':878,'multiline':False]
['text':' environment that stores the 'var' bindings) and the lexical','line_number':879,'multiline':False]
['text':' environment.','line_number':880,'multiline':False]
['text':'','line_number':881,'multiline':False]
['text':' TODOshu: disallow the subscript loader from using non-distinguished','line_number':882,'multiline':False]
['text':' objects as dynamic scopes.','line_number':883,'multiline':False]
['text':'***************************************************************************','line_number':889,'multiline':True]
['text':' static ','line_number':899,'multiline':True]
['text':' The JITs assume the result is nursery allocated unless we collected the','line_number':905,'multiline':False]
['text':' nursery, so don't change |heap| here.','line_number':906,'multiline':False]
['text':' static ','line_number':927,'multiline':True]
['text':' All lexical bindings start off uninitialized for TDZ.','line_number':941,'multiline':False]
['text':' static ','line_number':953,'multiline':True]
['text':' static ','line_number':964,'multiline':True]
['text':' This environment's enclosing link is never used: the','line_number':975,'multiline':False]
['text':' DebugEnvironmentProxy that refers to this scope carries its own','line_number':976,'multiline':False]
['text':' enclosing link, which is what Debugger uses to construct the tree of','line_number':977,'multiline':False]
['text':' Debugger.Environment objects.','line_number':978,'multiline':False]
['text':' static ','line_number':1003,'multiline':True]
['text':' We can't assert that the clone has the same shape, because it could','line_number':1014,'multiline':False]
['text':' have been reshaped by ReshapeForShadowedProp.','line_number':1015,'multiline':False]
['text':' static ','line_number':1024,'multiline':True]
['text':' static ','line_number':1032,'multiline':True]
['text':' Named lambda objects have one (non-writable) property.','line_number':1044,'multiline':False]
['text':' There should be exactly one binding in the named lambda scope.','line_number':1051,'multiline':False]
['text':' static ','line_number':1068,'multiline':True]
['text':' static ','line_number':1074,'multiline':True]
['text':' static ','line_number':1082,'multiline':True]
['text':' Named lambda environments have exactly one name.','line_number':1084,'multiline':False]
['text':' static ','line_number':1088,'multiline':True]
['text':' static ','line_number':1106,'multiline':True]
['text':' Windows must never be exposed to script. setWindowProxyThisValue should','line_number':1118,'multiline':False]
['text':' have set this to the WindowProxy.','line_number':1119,'multiline':False]
['text':' WarpBuilder relies on the return value not being nursery-allocated for the','line_number':1122,'multiline':False]
['text':' global lexical environment.','line_number':1123,'multiline':False]
['text':' static ','line_number':1129,'multiline':True]
['text':' static ','line_number':1142,'multiline':True]
['text':' static ','line_number':1167,'multiline':True]
['text':' static ','line_number':1191,'multiline':True]
['text':' lookupProperty','line_number':1269,'multiline':False]
['text':' defineProperty','line_number':1270,'multiline':False]
['text':' hasProperty','line_number':1271,'multiline':False]
['text':' getProperty','line_number':1272,'multiline':False]
['text':' setProperty','line_number':1273,'multiline':False]
['text':' getOwnPropertyDescriptor','line_number':1274,'multiline':False]
['text':' deleteProperty','line_number':1275,'multiline':False]
['text':' getElements','line_number':1276,'multiline':False]
['text':' funToString','line_number':1277,'multiline':False]
['text':'***************************************************************************','line_number':1288,'multiline':True]
['text':' GlobalScopes may be syntactic or non-syntactic. Non-syntactic','line_number':1316,'multiline':False]
['text':' GlobalScopes correspond to zero or more non-syntactic','line_number':1317,'multiline':False]
['text':' EnvironmentsObjects followed by the global lexical scope, then the','line_number':1318,'multiline':False]
['text':' GlobalObject or another non-EnvironmentObject object.','line_number':1319,'multiline':False]
['text':' Check for trying to iterate a function or eval frame before the prologue','line_number':1329,'multiline':False]
['text':' has created the CallObject, in which case we have to skip.','line_number':1330,'multiline':False]
['text':' Skip until we're at the enclosing scope of the script.','line_number':1334,'multiline':False]
['text':' Check if we have left the extent of the initial frame after we've','line_number':1347,'multiline':False]
['text':' settled on a static scope.','line_number':1348,'multiline':False]
['text':' The global lexical environment still encloses non-syntactic','line_number':1381,'multiline':False]
['text':' environment objects.','line_number':1382,'multiline':False]
['text':' As an engine invariant (maintained internally and asserted by Execute),','line_number':1396,'multiline':False]
['text':' EnvironmentObjects and non-EnvironmentObjects cannot be interleaved on','line_number':1397,'multiline':False]
['text':' the scope chain; every scope chain must start with zero or more','line_number':1398,'multiline':False]
['text':' EnvironmentObjects and terminate with one or more','line_number':1399,'multiline':False]
['text':' non-EnvironmentObjects (viz., GlobalObject).','line_number':1400,'multiline':False]
['text':' The case we're worrying about here is a NonSyntactic static scope which','line_number':1407,'multiline':False]
['text':' has 0+ corresponding non-syntactic WithEnvironmentObject scopes, a','line_number':1408,'multiline':False]
['text':' NonSyntacticVariablesObject, or a NonSyntacticLexicalEnvironmentObject.','line_number':1409,'multiline':False]
['text':' static ','line_number':1418,'multiline':True]
['text':' static ','line_number':1423,'multiline':True]
['text':' Live EnvironmentIter values may be added to DebugEnvironments::liveEnvs, as','line_number':1436,'multiline':False]
['text':' LiveEnvironmentVal instances.  They need to have write barriers when they are','line_number':1437,'multiline':False]
['text':' added to the hash table, but no barriers when rehashing inside GC.  It's a','line_number':1438,'multiline':False]
['text':' nasty hack, but the important thing is that LiveEnvironmentVal and','line_number':1439,'multiline':False]
['text':' MissingEnvironmentKey need to alias each other.','line_number':1440,'multiline':False]
['text':'***************************************************************************','line_number':1451,'multiline':True]
['text':'
 * DebugEnvironmentProxy is the handler for DebugEnvironmentProxy proxy
 * objects. Having a custom handler (rather than trying to reuse js::Wrapper)
 * gives us several important abilities:
 *  - We want to pass the EnvironmentObject as the receiver to forwarded scope
 *    property ops on aliased variables so that Call/Block/With ops do not all
 *    require a 'normalization' step.
 *  - The debug scope proxy can directly manipulate the stack frame to allow
 *    the debugger to read/write args/locals that were otherwise unaliased.
 *  - The debug scope proxy can store unaliased variables after the stack frame
 *    is popped so that they may still be read/written by the debugger.
 *  - The engine has made certain assumptions about the possible reads/writes
 *    in a scope. DebugEnvironmentProxy allows us to prevent the debugger from
 *    breaking those assumptions.
 *  - The engine makes optimizations that are observable to the debugger. The
 *    proxy can either hide these optimizations or make the situation more
 *    clear to the debugger. An example is 'arguments'.
 ','line_number':1455,'multiline':True]
['text':'
   * This function handles access to unaliased locals/formals. Since they
   * are unaliased, the values of these variables are not stored in the
   * slots of the normal CallObject and BlockLexicalEnvironmentObject
   * environments and thus must be recovered from somewhere else:
   *  + if the invocation for which the env was created is still executing,
   *    there is a JS frame live on the stack holding the values;
   *  + if the invocation for which the env was created finished executing:
   *     - and there was a DebugEnvironmentProxy associated with env, then
   *       the DebugEnvironments::onPop(Call|Lexical) handler copied out the
   *       unaliased variables. In both cases, a dense array is created in
   *       onPop(Call|Lexical) to hold the unaliased values and attached to
   *       the DebugEnvironmentProxy;
   *     - and there was not a DebugEnvironmentProxy yet associated with the
   *       scope, then the unaliased values are lost and not recoverable.
   *
   * Callers should check accessResult for non-failure results:
   *  - ACCESS_UNALIASED if the access was unaliased and completed
   *  - ACCESS_GENERIC   if the access was aliased or the property not found
   *  - ACCESS_LOST      if the value has been lost to the debugger and the
   *                     action is GET; if the action is SET, we assign to the
   *                     name of the variable on the environment object
   ','line_number':1478,'multiline':True]
['text':' Handle unaliased formals, vars, lets, and consts at function or module','line_number':1512,'multiline':False]
['text':' scope.','line_number':1513,'multiline':False]
['text':' The unaliased value has been lost to the debugger. ','line_number':1568,'multiline':True]
['text':' The unaliased value has been lost to the debugger. ','line_number':1602,'multiline':True]
['text':' It is possible that an optimized out value flows to this','line_number':1610,'multiline':False]
['text':' location due to Debugger.Frame.prototype.eval operating on a','line_number':1611,'multiline':False]
['text':' live bailed-out Baseline frame. In that case, treat the access','line_number':1612,'multiline':False]
['text':' as lost.','line_number':1613,'multiline':False]
['text':'
     * Handle unaliased vars in functions with parameter expressions and
     * lexical bindings at block scope.
     ','line_number':1623,'multiline':True]
['text':' Currently consider all global and non-syntactic top-level lexical','line_number':1629,'multiline':False]
['text':' bindings to be aliased.','line_number':1630,'multiline':False]
['text':' Currently all vars inside non-strict eval var environments are aliased.','line_number':1638,'multiline':False]
['text':' Named lambdas that are not closed over are lost.','line_number':1660,'multiline':False]
['text':' Indices in the frame snapshot are offset by the first frame','line_number':1688,'multiline':False]
['text':' slot. See DebugEnvironments::takeFrameSnapshot.','line_number':1689,'multiline':False]
['text':' A {Lexical,Var}EnvironmentObject whose static scope','line_number':1699,'multiline':False]
['text':' does not have an environment shape at all is a "hollow"','line_number':1700,'multiline':False]
['text':' block object reflected for missing block scopes. Their','line_number':1701,'multiline':False]
['text':' slot values are lost.','line_number':1702,'multiline':False]
['text':' See comment above in analogous CallObject case.','line_number':1718,'multiline':False]
['text':' if (action == SET)','line_number':1749,'multiline':False]
['text':' TODO','line_number':1750,'multiline':False]
['text':' if (action == SET)','line_number':1789,'multiline':False]
['text':' TODO','line_number':1790,'multiline':False]
['text':' The rest of the internal scopes do not have unaliased vars. ','line_number':1795,'multiline':True]
['text':'
   * In theory, every non-arrow function scope contains an 'arguments'
   * bindings.  However, the engine only adds a binding if 'arguments' is
   * used in the function body. Thus, from the debugger's perspective,
   * 'arguments' may be missing from the list of bindings.
   ','line_number':1842,'multiline':True]
['text':'
   * Similar to 'arguments' above, we don't add a 'this' binding to
   * non-arrow functions if it's not used.
   ','line_number':1853,'multiline':True]
['text':'
   * This function checks if an arguments object needs to be created when
   * the debugger requests 'arguments' for a function scope where the
   * arguments object was not otherwise needed.
   ','line_number':1865,'multiline':True]
['text':'
   * If the value of |this| is requested before the this-binding has been
   * initialized by JSOp::FunctionThis, the this-binding will be |undefined|.
   * In that case, we have to call createMissingThis to initialize the
   * this-binding.
   *
   * Note that an |undefined| this-binding is perfectly valid in strict-mode
   * code, but that's fine: createMissingThis will do the right thing in that
   * case.
   ','line_number':1878,'multiline':True]
['text':'
   * Create a missing arguments object. If the function returns true but
   * argsObj is null, it means the env is dead.
   ','line_number':1893,'multiline':True]
['text':'
   * Create a missing this Value. If the function returns true but
   * *success is false, it means the scope is dead.
   ','line_number':1910,'multiline':True]
['text':' Update the this-argument to avoid boxing primitive |this| more','line_number':1927,'multiline':False]
['text':' than once.','line_number':1928,'multiline':False]
['text':' All functions except arrows should have their own this binding.','line_number':1955,'multiline':False]
['text':' always [[Extensible]], can't be made non-[[Extensible]], like most','line_number':1970,'multiline':False]
['text':' proxies','line_number':1971,'multiline':False]
['text':' See above.','line_number':1977,'multiline':False]
['text':'
   * Like 'get', but returns sentinel values instead of throwing on
   * exceptional cases.
   ','line_number':2158,'multiline':True]
['text':' WithEnvironmentObject isn't a very good proxy.  It doesn't have a','line_number':2263,'multiline':False]
['text':' JSNewEnumerateOp implementation, because if it just delegated to the','line_number':2264,'multiline':False]
['text':' target object, the object would indicate that native enumeration is','line_number':2265,'multiline':False]
['text':' the thing to do, but native enumeration over the WithEnvironmentObject','line_number':2266,'multiline':False]
['text':' wrapper yields no properties.  So instead here we hack around the','line_number':2267,'multiline':False]
['text':' issue: punch a hole through to the with object target, then manually','line_number':2268,'multiline':False]
['text':' examine @@unscopables.','line_number':2269,'multiline':False]
['text':'
     * Environments with Scopes are optimized to not contain unaliased
     * variables so they must be manually appended here.
     ','line_number':2297,'multiline':True]
['text':' Be careful not to look up '.this' as a normal binding below, it will','line_number':2324,'multiline':False]
['text':' assert in with_HasProperty.','line_number':2325,'multiline':False]
['text':' anonymous namespace ','line_number':2358,'multiline':True]
['text':' static ','line_number':2372,'multiline':True]
['text':' proto ','line_number':2381,'multiline':True]
['text':' static ','line_number':2421,'multiline':True]
['text':'***************************************************************************','line_number':2453,'multiline':True]
['text':'
   * missingEnvs points to debug envs weakly so that debug envs can be
   * released more eagerly.
   ','line_number':2466,'multiline':True]
['text':'
       * Note that onPopCall, onPopVar, and onPopLexical rely on
       * missingEnvs to find environment objects that we synthesized for
       * the debugger's sake, and clean up the synthetic environment
       * objects' entries in liveEnvs. So if we remove an entry from
       * missingEnvs here, we must also remove the corresponding
       * liveEnvs entry.
       *
       * Since the DebugEnvironmentProxy is the only thing using its environment
       * object, and the DSO is about to be finalized, you might assume
       * that the synthetic SO is also about to be finalized too, and thus
       * the loop below will take care of things. But complex GC behavior
       * means that marks are only conservative approximations of
       * liveness; we should assume that anything could be marked.
       *
       * Thus, we must explicitly remove the entries from both liveEnvs
       * and missingEnvs here.
       ','line_number':2472,'multiline':True]
['text':'
   * Scopes can be finalized when a debugger-synthesized EnvironmentObject is
   * no longer reachable via its DebugEnvironmentProxy.
   ','line_number':2501,'multiline':True]
['text':'
   * This is called at the end of StoreBuffer::mark() to check that our
   * postbarriers have worked and that no hashtable keys (or values) are left
   * pointing into the nursery.
   ','line_number':2512,'multiline':True]
['text':' Use unbarrieredGet() to prevent triggering read barrier while collecting.','line_number':2521,'multiline':False]
['text':'
 * Unfortunately, GetDebugEnvironmentForFrame needs to work even outside debug
 * mode (in particular, JS_GetFrameScopeChain does not require debug mode).
 * Since DebugEnvironments::onPop* are only called in debuggee frames, this
 * means we cannot use any of the maps in DebugEnvironments. This will produce
 * debug scope chains that do not obey the debugger invariants but that is just
 * fine.
 ','line_number':2531,'multiline':True]
['text':' static ','line_number':2558,'multiline':True]
['text':' static ','line_number':2574,'multiline':True]
['text':' static ','line_number':2593,'multiline':True]
['text':' static ','line_number':2611,'multiline':True]
['text':' Only add to liveEnvs if we synthesized the debug env on a live','line_number':2635,'multiline':False]
['text':' frame.','line_number':2636,'multiline':False]
['text':' static ','line_number':2648,'multiline':True]
['text':'
   * When the JS stack frame is popped, the values of unaliased variables
   * are lost. If there is any debug env referring to this environment, save a
   * copy of the unaliased variables' values in an array for later debugger
   * access via DebugEnvironmentProxy::handleUnaliasedAccess.
   *
   * Note: since it is simplest for this function to be infallible, failure
   * in this code will be silently ignored. This does not break any
   * invariants since DebugEnvironmentProxy::maybeSnapshot can already be
   * nullptr.
   ','line_number':2652,'multiline':True]
['text':' Act like no snapshot was taken if we run OOM while taking the snapshot.','line_number':2666,'multiline':False]
['text':' For simplicity, copy all frame slots from 0 to the frameSlotCount,','line_number':2673,'multiline':False]
['text':' even if we don't need all of them (like in the case of a defaults','line_number':2674,'multiline':False]
['text':' parameter scope having frame slots).','line_number':2675,'multiline':False]
['text':'
     * Copy in formals that are not aliased via the scope chain
     * but are aliased via the arguments object.
     ','line_number':2686,'multiline':True]
['text':'
   * Use a dense array as storage (since proxies do not have trace
   * hooks). This array must not escape into the wild.
   ','line_number':2750,'multiline':True]
['text':' static ','line_number':2765,'multiline':True]
['text':'
     * The frame may be observed before the prologue has created the
     * CallObject. See EnvironmentIter::settle.
     ','line_number':2780,'multiline':True]
['text':'
   * Note that we must always update the top frame's environment objects'
   * entries in liveEnvs because we can't be sure code hasn't run in that
   * frame to change the environment chain since we were last called. The
   * fp->prevUpToDate() flag indicates whether the environments of frames
   * older than fp are already included in liveEnvs. It might seem simpler
   * to have fp instead carry a flag indicating whether fp itself is
   * accurately described, but then we would need to clear that flag
   * whenever fp ran code. By storing the 'up to date' bit for fp->prev() in
   * fp, simply popping fp effectively clears the flag for us, at exactly
   * the time when execution resumes fp->prev().
   ','line_number':2892,'multiline':True]
['text':' static ','line_number':2963,'multiline':True]
['text':' This are two exceptions where fp->prevUpToDate() is cleared without','line_number':2966,'multiline':False]
['text':' popping the frame. When a frame is rematerialized or has its','line_number':2967,'multiline':False]
['text':' debuggeeness toggled off->on, all frames younger than the frame must','line_number':2968,'multiline':False]
['text':' have their prevUpToDate set to false. This is because unrematerialized','line_number':2969,'multiline':False]
['text':' Ion frames and non-debuggee frames are skipped by updateLiveEnvironments.','line_number':2970,'multiline':False]
['text':' If in the future a frame suddenly gains a usable AbstractFramePtr via','line_number':2971,'multiline':False]
['text':' rematerialization or becomes a debuggee, the prevUpToDate invariant','line_number':2972,'multiline':False]
['text':' will no longer hold for older frames on its stack.','line_number':2973,'multiline':False]
['text':' static ','line_number':2992,'multiline':True]
['text':' static ','line_number':3017,'multiline':True]
['text':'***************************************************************************','line_number':3026,'multiline':True]
['text':'
   * Create the missing environment object. For lexical environment objects,
   * this takes care of storing variable values after the stack frame has
   * been popped. For call objects, we only use the pretend call object to
   * access callee, bindings and to receive dynamically added
   * properties. Together, this provides the nice invariant that every
   * DebugEnvironmentProxy has a EnvironmentObject.
   *
   * Note: to preserve envChain depth invariants, these lazily-reified
   * envs must not be put on the frame's environment chain; instead, they are
   * maintained via DebugEnvironments hooks.
   ','line_number':3076,'multiline':True]
['text':' Construct With object wrappers for the things on this environment chain','line_number':3257,'multiline':False]
['text':' and use the result as the thing to scope the function to.','line_number':3258,'multiline':False]
['text':' Figure out if we executed JSOp::FunctionThis and set it.','line_number':3330,'multiline':False]
['text':' The next op after JSOp::FunctionThis always sets it.','line_number':3335,'multiline':False]
['text':' Either we're yet to initialize the this-binding','line_number':3344,'multiline':False]
['text':' (JSOp::FunctionThis), or the script does not have a this-binding','line_number':3345,'multiline':False]
['text':' (because it doesn't use |this|).','line_number':3346,'multiline':False]
['text':' If our this-argument is an object, or we're in strict mode,','line_number':3348,'multiline':False]
['text':' the this-binding is always the same as our this-argument.','line_number':3349,'multiline':False]
['text':' We didn't initialize the this-binding yet. Determine the','line_number':3355,'multiline':False]
['text':' correct |this| value for this frame (box primitives if not','line_number':3356,'multiline':False]
['text':' in strict mode), and assign it to the this-argument slot so','line_number':3357,'multiline':False]
['text':' JSOp::FunctionThis will use it and not box a second time.','line_number':3358,'multiline':False]
['text':' ES 15.1.11 step 5.a','line_number':3447,'multiline':False]
['text':' ES 15.1.11 step 5.b','line_number':3450,'multiline':False]
['text':' Faster path for ES 15.1.11 step 5.c-d when the shape can be found','line_number':3454,'multiline':False]
['text':' without going through a resolve hook.','line_number':3455,'multiline':False]
['text':' ES 15.1.11 step 5.c-d','line_number':3460,'multiline':False]
['text':' ES 8.1.1.4.15 CanDeclareGlobalVar','line_number':3509,'multiline':False]
['text':' ES 8.1.1.4.16 CanDeclareGlobalFunction','line_number':3510,'multiline':False]
['text':' Step 4.','line_number':3512,'multiline':False]
['text':' 8.1.14.15 step 6.','line_number':3514,'multiline':False]
['text':' 8.1.14.16 step 5.','line_number':3515,'multiline':False]
['text':' Global functions have additional restrictions.','line_number':3524,'multiline':False]
['text':' 8.1.14.16 step 6.','line_number':3526,'multiline':False]
['text':' 8.1.14.16 step 7.','line_number':3531,'multiline':False]
['text':' Add the var/let/const bindings to the variables environment of a global or','line_number':3545,'multiline':False]
['text':' sloppy-eval script. The redeclaration checks should already have been','line_number':3546,'multiline':False]
['text':' performed.','line_number':3547,'multiline':False]
['text':' Define the hoisted top-level functions on the variables environment of a','line_number':3611,'multiline':False]
['text':' global or sloppy-eval script. Redeclaration checks must already have been','line_number':3612,'multiline':False]
['text':' performed.','line_number':3613,'multiline':False]
['text':' The inner-functions up to `lastFun` are the hoisted function declarations','line_number':3618,'multiline':False]
['text':' of the script. We must clone and bind them now.','line_number':3619,'multiline':False]
['text':' Skip the initial scopes. In practice, there is at most one variables and','line_number':3623,'multiline':False]
['text':' one lexical scope.','line_number':3624,'multiline':False]
['text':' Clone the function before exposing to script as a binding.','line_number':3633,'multiline':False]
['text':' ECMA requires functions defined when entering Eval code to be','line_number':3646,'multiline':False]
['text':' impermanent.','line_number':3647,'multiline':False]
['text':' Done processing this function.','line_number':3662,'multiline':False]
['text':'
     * A DebugEnvironmentProxy is okay here, and sometimes necessary. If
     * Debugger.Frame.prototype.eval defines a function with the same name as an
     * extant variable in the frame, the DebugEnvironmentProxy takes care of
     * storing the function in the stack frame (for non-aliased variables) or on
     * the scope object (for aliased).
     ','line_number':3666,'multiline':True]
['text':' Careful: the presence of a shape, even one appearing to derive from','line_number':3687,'multiline':False]
['text':' a variable declaration, doesn't mean it's in [[VarNames]].','line_number':3688,'multiline':False]
['text':'
     * Non-global properties, and global properties which we aren't simply
     * redefining, must be set.  First, this preserves their attributes.
     * Second, this will produce warnings and/or errors as necessary if the
     * specified Call object property is not writable (const).
     ','line_number':3694,'multiline':True]
['text':' Due to the extensibility of the global lexical environment, we must','line_number':3714,'multiline':False]
['text':' check for redeclaring a binding.','line_number':3715,'multiline':False]
['text':'','line_number':3716,'multiline':False]
['text':' In the case of non-syntactic environment chains, we are checking','line_number':3717,'multiline':False]
['text':' redeclarations against the non-syntactic lexical environment and the','line_number':3718,'multiline':False]
['text':' variables object that the lexical environment corresponds to.','line_number':3719,'multiline':False]
['text':' ES 15.1.11 GlobalDeclarationInstantiation','line_number':3723,'multiline':False]
['text':' Step 6.','line_number':3725,'multiline':False]
['text':'','line_number':3726,'multiline':False]
['text':' Check 'var' declarations do not conflict with existing bindings in the','line_number':3727,'multiline':False]
['text':' global lexical environment.','line_number':3728,'multiline':False]
['text':' Step 10 and 12.','line_number':3738,'multiline':False]
['text':'','line_number':3739,'multiline':False]
['text':' Check that global functions and vars may be declared.','line_number':3740,'multiline':False]
['text':' Step 5.','line_number':3750,'multiline':False]
['text':'','line_number':3751,'multiline':False]
['text':' Check that lexical bindings do not conflict.','line_number':3752,'multiline':False]
['text':' Environment cannot contain lexical bindings.','line_number':3778,'multiline':False]
['text':' Annex B.3.5 allows redeclaring simple (non-destructured) catch parameters','line_number':3785,'multiline':False]
['text':' with var declarations.','line_number':3786,'multiline':False]
['text':' Strict eval has its own call objects and we shouldn't end up here.','line_number':3815,'multiline':False]
['text':'','line_number':3816,'multiline':False]
['text':' Non-strict eval may introduce 'var' bindings that conflict with lexical','line_number':3817,'multiline':False]
['text':' bindings in an enclosing lexical scope.','line_number':3818,'multiline':False]
['text':' ES 18.2.1.3.','line_number':3826,'multiline':False]
['text':' Step 5.','line_number':3828,'multiline':False]
['text':'','line_number':3829,'multiline':False]
['text':' Check that a direct eval will not hoist 'var' bindings over lexical','line_number':3830,'multiline':False]
['text':' bindings with the same name.','line_number':3831,'multiline':False]
['text':' Check for redeclared "arguments" in function parameter expressions.','line_number':3839,'multiline':False]
['text':'','line_number':3840,'multiline':False]
['text':' Direct eval in function parameter expressions isn't allowed to redeclare','line_number':3841,'multiline':False]
['text':' the implicit "arguments" bindings:','line_number':3842,'multiline':False]
['text':'   function f(a = eval("var arguments;")) {}','line_number':3843,'multiline':False]
['text':'','line_number':3844,'multiline':False]
['text':' |varObj| isn't a CallObject when the direct eval occurs in the function','line_number':3845,'multiline':False]
['text':' body and the extra function body var scope is present. The extra var scope','line_number':3846,'multiline':False]
['text':' is present iff the function has parameter expressions. So when we test','line_number':3847,'multiline':False]
['text':' that |varObj| is a CallObject and function parameter expressions are','line_number':3848,'multiline':False]
['text':' present, we can pinpoint the direct eval location to be in a function','line_number':3849,'multiline':False]
['text':' parameter expression. Additionally we must ensure the function isn't an','line_number':3850,'multiline':False]
['text':' arrow function, because arrow functions don't have an implicit "arguments"','line_number':3851,'multiline':False]
['text':' binding.','line_number':3852,'multiline':False]
['text':' Step 8.','line_number':3863,'multiline':False]
['text':'','line_number':3864,'multiline':False]
['text':' Check that global functions may be declared.','line_number':3865,'multiline':False]
['text':' Named lambdas may have an environment that holds itself for recursion.','line_number':3913,'multiline':False]
['text':' If the function has parameter default expressions, there may be an','line_number':3922,'multiline':False]
['text':' extra environment to hold the parameters.','line_number':3923,'multiline':False]
['text':' Remove from remainingNames --- the closure variables in some outer','line_number':3979,'multiline':False]
['text':' script --- any free variables in this script. This analysis isn't perfect:','line_number':3980,'multiline':False]
['text':'','line_number':3981,'multiline':False]
['text':' - It will not account for free variables in an inner script which are','line_number':3982,'multiline':False]
['text':'   actually accessing some name in an intermediate script between the','line_number':3983,'multiline':False]
['text':'   inner and outer scripts. This can cause remainingNames to be an','line_number':3984,'multiline':False]
['text':'   underapproximation.','line_number':3985,'multiline':False]
['text':'','line_number':3986,'multiline':False]
['text':' - It will not account for new names introduced via eval. This can cause','line_number':3987,'multiline':False]
['text':'   remainingNames to be an overapproximation. This would be easy to fix','line_number':3988,'multiline':False]
['text':'   but is nice to have as the eval will probably not access these','line_number':3989,'multiline':False]
['text':'   these names and putting eval in an inner script is bad news if you','line_number':3990,'multiline':False]
['text':'   care about entraining variables unnecessarily.','line_number':3991,'multiline':False]
['text':' Look for local variables in script or any other script inner to it, which are','line_number':4140,'multiline':False]
['text':' part of the script's call object and are unnecessarily entrained by their own','line_number':4141,'multiline':False]
['text':' inner scripts which do not refer to those variables. An example is:','line_number':4142,'multiline':False]
['text':'','line_number':4143,'multiline':False]
['text':' function foo() {','line_number':4144,'multiline':False]
['text':'   var a, b;','line_number':4145,'multiline':False]
['text':'   function bar() { return a; }','line_number':4146,'multiline':False]
['text':'   function baz() { return b; }','line_number':4147,'multiline':False]
['text':' }','line_number':4148,'multiline':False]
['text':'','line_number':4149,'multiline':False]
['text':' |bar| unnecessarily entrains |b|, and |baz| unnecessarily entrains |a|.','line_number':4150,'multiline':False]
['text':' We can bind name to the global lexical scope if the binding already','line_number':4192,'multiline':False]
['text':' exists, is initialized, and is writable (i.e., an initialized','line_number':4193,'multiline':False]
['text':' 'let') at compile time.','line_number':4194,'multiline':False]
['text':' If the property does not currently exist on the global lexical','line_number':4208,'multiline':False]
['text':' scope, we can bind name to the global object if the property','line_number':4209,'multiline':False]
['text':' exists on the global and is non-configurable, as then it cannot','line_number':4210,'multiline':False]
['text':' be shadowed.','line_number':4211,'multiline':False]
['text':' defined(DEBUG) || defined(JS_JITSPEW) ','line_number':4325,'multiline':True]
