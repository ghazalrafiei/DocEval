['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]
['text':' [SMDOC] IonMonkey Snapshot encoding','line_number':21,'multiline':False]
['text':'','line_number':22,'multiline':False]
['text':' Encodings:','line_number':23,'multiline':False]
['text':'   [ptr] A fixed-size pointer.','line_number':24,'multiline':False]
['text':'   [vwu] A variable-width unsigned integer.','line_number':25,'multiline':False]
['text':'   [vws] A variable-width signed integer.','line_number':26,'multiline':False]
['text':'    [u8] An 8-bit unsigned integer.','line_number':27,'multiline':False]
['text':'   [u8'] An 8-bit unsigned integer which is potentially extended with packed','line_number':28,'multiline':False]
['text':'         data.','line_number':29,'multiline':False]
['text':'   [u8"] Packed data which is stored and packed in the previous [u8'].','line_number':30,'multiline':False]
['text':'  [vwu*] A list of variable-width unsigned integers.','line_number':31,'multiline':False]
['text':'   [pld] Payload of Recover Value Allocation:','line_number':32,'multiline':False]
['text':'         PAYLOAD_NONE:','line_number':33,'multiline':False]
['text':'           There is no payload.','line_number':34,'multiline':False]
['text':'','line_number':35,'multiline':False]
['text':'         PAYLOAD_INDEX:','line_number':36,'multiline':False]
['text':'           [vwu] Index, such as the constant pool index.','line_number':37,'multiline':False]
['text':'','line_number':38,'multiline':False]
['text':'         PAYLOAD_STACK_OFFSET:','line_number':39,'multiline':False]
['text':'           [vws] Stack offset based on the base of the Ion frame.','line_number':40,'multiline':False]
['text':'','line_number':41,'multiline':False]
['text':'         PAYLOAD_GPR:','line_number':42,'multiline':False]
['text':'            [u8] Code of the general register.','line_number':43,'multiline':False]
['text':'','line_number':44,'multiline':False]
['text':'         PAYLOAD_FPU:','line_number':45,'multiline':False]
['text':'            [u8] Code of the FPU register.','line_number':46,'multiline':False]
['text':'','line_number':47,'multiline':False]
['text':'         PAYLOAD_PACKED_TAG:','line_number':48,'multiline':False]
['text':'           [u8"] Bits 5-7: JSValueType is encoded on the low bits of the Mode','line_number':49,'multiline':False]
['text':'                           of the RValueAllocation.','line_number':50,'multiline':False]
['text':'','line_number':51,'multiline':False]
['text':' Snapshot header:','line_number':52,'multiline':False]
['text':'','line_number':53,'multiline':False]
['text':'   [vwu] bits ((n+1)-31]: recover instruction offset','line_number':54,'multiline':False]
['text':'         bits [0,n): bailout kind (n = SNAPSHOT_BAILOUTKIND_BITS)','line_number':55,'multiline':False]
['text':'','line_number':56,'multiline':False]
['text':' Snapshot body, repeated "frame count" times, from oldest frame to newest','line_number':57,'multiline':False]
['text':' frame. Note that the first frame doesn't have the "parent PC" field.','line_number':58,'multiline':False]
['text':'','line_number':59,'multiline':False]
['text':'   [ptr] Debug only: JSScript*','line_number':60,'multiline':False]
['text':'   [vwu] pc offset','line_number':61,'multiline':False]
['text':'   [vwu] # of RVA's indexes, including nargs','line_number':62,'multiline':False]
['text':'  [vwu*] List of indexes to R(ecover)ValueAllocation table. Contains','line_number':63,'multiline':False]
['text':'         nargs + nfixed + stackDepth items.','line_number':64,'multiline':False]
['text':'','line_number':65,'multiline':False]
['text':' Recover value allocations are encoded at the end of the Snapshot buffer, and','line_number':66,'multiline':False]
['text':' they are padded on ALLOCATION_TABLE_ALIGNMENT.  The encoding of each','line_number':67,'multiline':False]
['text':' allocation is determined by the RValueAllocation::Layout, which can be','line_number':68,'multiline':False]
['text':' obtained from the RValueAllocation::Mode with layoutFromMode function.  The','line_number':69,'multiline':False]
['text':' layout structure list the type of payload which are used to serialized /','line_number':70,'multiline':False]
['text':' deserialized / dumped the content of the allocations.','line_number':71,'multiline':False]
['text':'','line_number':72,'multiline':False]
['text':' R(ecover)ValueAllocation items:','line_number':73,'multiline':False]
['text':'   [u8'] Mode, which defines the type of the payload as well as the','line_number':74,'multiline':False]
['text':'         interpretation.','line_number':75,'multiline':False]
['text':'   [pld] first payload (packed tag, index, stack offset, register, ...)','line_number':76,'multiline':False]
['text':'   [pld] second payload (register, stack offset, none)','line_number':77,'multiline':False]
['text':'','line_number':78,'multiline':False]
['text':'       Modes:','line_number':79,'multiline':False]
['text':'         CONSTANT [INDEX]','line_number':80,'multiline':False]
['text':'           Index into the constant pool.','line_number':81,'multiline':False]
['text':'','line_number':82,'multiline':False]
['text':'         CST_UNDEFINED []','line_number':83,'multiline':False]
['text':'           Constant value which correspond to the "undefined" JS value.','line_number':84,'multiline':False]
['text':'','line_number':85,'multiline':False]
['text':'         CST_NULL []','line_number':86,'multiline':False]
['text':'           Constant value which correspond to the "null" JS value.','line_number':87,'multiline':False]
['text':'','line_number':88,'multiline':False]
['text':'         DOUBLE_REG [FPU_REG]','line_number':89,'multiline':False]
['text':'           Double value stored in a FPU register.','line_number':90,'multiline':False]
['text':'','line_number':91,'multiline':False]
['text':'         ANY_FLOAT_REG [FPU_REG]','line_number':92,'multiline':False]
['text':'           Any Float value (float32, simd) stored in a FPU register.','line_number':93,'multiline':False]
['text':'','line_number':94,'multiline':False]
['text':'         ANY_FLOAT_STACK [STACK_OFFSET]','line_number':95,'multiline':False]
['text':'           Any Float value (float32, simd) stored on the stack.','line_number':96,'multiline':False]
['text':'','line_number':97,'multiline':False]
['text':'         UNTYPED_REG   [GPR_REG]','line_number':98,'multiline':False]
['text':'         UNTYPED_STACK [STACK_OFFSET]','line_number':99,'multiline':False]
['text':'         UNTYPED_REG_REG     [GPR_REG,      GPR_REG]','line_number':100,'multiline':False]
['text':'         UNTYPED_REG_STACK   [GPR_REG,      STACK_OFFSET]','line_number':101,'multiline':False]
['text':'         UNTYPED_STACK_REG   [STACK_OFFSET, GPR_REG]','line_number':102,'multiline':False]
['text':'         UNTYPED_STACK_STACK [STACK_OFFSET, STACK_OFFSET]','line_number':103,'multiline':False]
['text':'           Value with dynamically known type. On 32 bits architecture, the','line_number':104,'multiline':False]
['text':'           first register/stack-offset correspond to the holder of the type,','line_number':105,'multiline':False]
['text':'           and the second correspond to the payload of the JS Value.','line_number':106,'multiline':False]
['text':'','line_number':107,'multiline':False]
['text':'         RECOVER_INSTRUCTION [INDEX]','line_number':108,'multiline':False]
['text':'           Index into the list of recovered instruction results.','line_number':109,'multiline':False]
['text':'','line_number':110,'multiline':False]
['text':'         RI_WITH_DEFAULT_CST [INDEX] [INDEX]','line_number':111,'multiline':False]
['text':'           The first payload is the index into the list of recovered','line_number':112,'multiline':False]
['text':'           instruction results.  The second payload is the index in the','line_number':113,'multiline':False]
['text':'           constant pool.','line_number':114,'multiline':False]
['text':'','line_number':115,'multiline':False]
['text':'         TYPED_REG [PACKED_TAG, GPR_REG]:','line_number':116,'multiline':False]
['text':'           Value with statically known type, which payload is stored in a','line_number':117,'multiline':False]
['text':'           register.','line_number':118,'multiline':False]
['text':'','line_number':119,'multiline':False]
['text':'         TYPED_STACK [PACKED_TAG, STACK_OFFSET]:','line_number':120,'multiline':False]
['text':'           Value with statically known type, which payload is stored at an','line_number':121,'multiline':False]
['text':'           offset on the stack.','line_number':122,'multiline':False]
['text':'','line_number':123,'multiline':False]
['text':' Pad serialized RValueAllocations by a multiple of X bytes in the allocation','line_number':223,'multiline':False]
['text':' buffer.  By padding serialized value allocations, we are building an','line_number':224,'multiline':False]
['text':' indexable table of elements of X bytes, and thus we can safely divide any','line_number':225,'multiline':False]
['text':' offset within the buffer by X to obtain an index.','line_number':226,'multiline':False]
['text':'','line_number':227,'multiline':False]
['text':' By padding, we are loosing space within the allocation buffer, but we','line_number':228,'multiline':False]
['text':' multiple by X the number of indexes that we can store on one byte in each','line_number':229,'multiline':False]
['text':' snapshots.','line_number':230,'multiline':False]
['text':'','line_number':231,'multiline':False]
['text':' Some value allocations are taking more than X bytes to be encoded, in which','line_number':232,'multiline':False]
['text':' case we will pad to a multiple of X, and we are wasting indexes. The choice','line_number':233,'multiline':False]
['text':' of X should be balanced between the wasted padding of serialized value','line_number':234,'multiline':False]
['text':' allocation, and the saving made in snapshot indexes.','line_number':235,'multiline':False]
['text':' bytes ','line_number':236,'multiline':True]
['text':' This code assumes that the PACKED_TAG payload is following the','line_number':295,'multiline':False]
['text':' writeByte of the mode.','line_number':296,'multiline':False]
['text':' Write 0x7f in all padding bytes.','line_number':310,'multiline':False]
['text':' JS_JITSPEW','line_number':375,'multiline':False]
['text':' Details of snapshot header packing.','line_number':393,'multiline':False]
['text':' Details of recover header packing.','line_number':408,'multiline':False]
['text':' Based on the measurements made in Bug 962555 comment 20, this length','line_number':475,'multiline':False]
['text':' should be enough to prevent the reallocation of the hash table for at','line_number':476,'multiline':False]
['text':' least half of the compilations.','line_number':477,'multiline':False]
['text':' Place a sentinel for asserting on the other end.','line_number':594,'multiline':False]
