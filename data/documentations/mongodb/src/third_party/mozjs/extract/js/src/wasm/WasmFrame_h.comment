['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 *
 * Copyright 2021 Mozilla Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ','line_number':1,'multiline':True]
['text':' Bit set as the lowest bit of a frame pointer, used in two different mutually','line_number':35,'multiline':False]
['text':' exclusive situations:','line_number':36,'multiline':False]
['text':' - either it's a low bit tag in a FramePointer value read from the','line_number':37,'multiline':False]
['text':' Frame::callerFP of an inner wasm frame. This indicates the previous call','line_number':38,'multiline':False]
['text':' frame has been set up by a JIT caller that directly called into a wasm','line_number':39,'multiline':False]
['text':' function's body. This is only stored in Frame::callerFP for a wasm frame','line_number':40,'multiline':False]
['text':' called from JIT code, and thus it can not appear in a JitActivation's','line_number':41,'multiline':False]
['text':' exitFP.','line_number':42,'multiline':False]
['text':' - or it's the low big tag set when exiting wasm code in JitActivation's','line_number':43,'multiline':False]
['text':' exitFP.','line_number':44,'multiline':False]
['text':' wasm::Frame represents the bytes pushed by the call instruction and the','line_number':48,'multiline':False]
['text':' fixed prologue generated by wasm::GenerateCallablePrologue.','line_number':49,'multiline':False]
['text':'','line_number':50,'multiline':False]
['text':' Across all architectures it is assumed that, before the call instruction, the','line_number':51,'multiline':False]
['text':' stack pointer is WasmStackAlignment-aligned. Thus after the prologue, and','line_number':52,'multiline':False]
['text':' before the function has made its stack reservation, the stack alignment is','line_number':53,'multiline':False]
['text':' sizeof(Frame) % WasmStackAlignment.','line_number':54,'multiline':False]
['text':'','line_number':55,'multiline':False]
['text':' During MacroAssembler code generation, the bytes pushed after the wasm::Frame','line_number':56,'multiline':False]
['text':' are counted by masm.framePushed. Thus, the stack alignment at any point in','line_number':57,'multiline':False]
['text':' time is (sizeof(wasm::Frame) + masm.framePushed) % WasmStackAlignment.','line_number':58,'multiline':False]
['text':' See GenerateCallableEpilogue for why this must be','line_number':61,'multiline':False]
['text':' the first field of wasm::Frame (in a downward-growing stack).','line_number':62,'multiline':False]
['text':' It's either the caller's Frame*, for wasm callers, or the JIT caller frame','line_number':63,'multiline':False]
['text':' plus a tag otherwise.','line_number':64,'multiline':False]
['text':' The return address pushed by the call (in the case of ARM/MIPS the return','line_number':67,'multiline':False]
['text':' address is pushed by the first instruction of the prologue).','line_number':68,'multiline':False]
['text':' A DebugFrame is a Frame with additional fields that are added after the','line_number':159,'multiline':False]
['text':' normal function prologue by the baseline compiler. If a Module is compiled','line_number':160,'multiline':False]
['text':' with debugging enabled, then all its code creates DebugFrames on the stack','line_number':161,'multiline':False]
['text':' instead of just Frames. These extra fields are used by the Debugger API.','line_number':162,'multiline':False]
['text':' The register results field.  Initialized only during the baseline','line_number':165,'multiline':False]
['text':' compiler's return sequence to allow the debugger to inspect and','line_number':166,'multiline':False]
['text':' modify the return values of a frame being debugged.','line_number':167,'multiline':False]
['text':' Should we add a new value representation, this will remind us to update','line_number':180,'multiline':False]
['text':' SpilledRegisterResult.','line_number':181,'multiline':False]
['text':' The returnValue() method returns a HandleValue pointing to this field.','line_number':205,'multiline':False]
['text':' If the function returns multiple results, this field is initialized','line_number':208,'multiline':False]
['text':' to a pointer to the stack results.','line_number':209,'multiline':False]
['text':' The function index of this frame. Technically, this could be derived','line_number':212,'multiline':False]
['text':' given a PC into this frame (which could lookup the CodeRange which has','line_number':213,'multiline':False]
['text':' the function index), but this isn't always readily available.','line_number':214,'multiline':False]
['text':' Flags whose meaning are described below.','line_number':217,'multiline':False]
['text':' Avoid -Wunused-private-field warnings.','line_number':230,'multiline':False]
['text':' See alignmentStaticAsserts().  For MIPS32, ARM32 and X86 DebugFrame is only','line_number':234,'multiline':False]
['text':' 4-byte aligned, so we add another word to get up to 8-byte','line_number':235,'multiline':False]
['text':' alignment.','line_number':236,'multiline':False]
['text':' The Frame goes at the end since the stack grows down.','line_number':244,'multiline':False]
['text':' The return value must be written from the unboxed representation in the','line_number':257,'multiline':False]
['text':' results union into cachedReturnJSValue_ by updateReturnJSValue() before','line_number':258,'multiline':False]
['text':' returnValue() can return a Handle to it.','line_number':259,'multiline':False]
['text':' Once the debugger observes a frame, it must be notified via','line_number':266,'multiline':False]
['text':' onLeaveFrame() before the frame is popped. Calling observe() ensures the','line_number':267,'multiline':False]
['text':' leave frame traps are enabled. Both methods are idempotent so the caller','line_number':268,'multiline':False]
['text':' doesn't have to worry about calling them more than once.','line_number':269,'multiline':False]
['text':' The 'isDebugge' bit is initialized to false and set by the WebAssembly','line_number':274,'multiline':False]
['text':' runtime right before a frame is exposed to the debugger, as required by','line_number':275,'multiline':False]
['text':' the Debugger API. The bit is then used for Debugger-internal purposes','line_number':276,'multiline':False]
['text':' afterwards.','line_number':277,'multiline':False]
['text':' These are opaque boolean flags used by the debugger to implement','line_number':283,'multiline':False]
['text':' AbstractFramePtr. They are initialized to false and not otherwise read or','line_number':284,'multiline':False]
['text':' written by wasm code or runtime.','line_number':285,'multiline':False]
['text':' DebugFrame is accessed directly by JIT code.','line_number':300,'multiline':False]
['text':' DebugFrames are aligned to 8-byte aligned, allowing them to be placed in','line_number':332,'multiline':False]
['text':' an AbstractFramePtr.','line_number':333,'multiline':False]
['text':' namespace wasm','line_number':339,'multiline':False]
['text':' namespace js','line_number':340,'multiline':False]
['text':' wasm_frame_h','line_number':342,'multiline':False]
