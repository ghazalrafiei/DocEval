['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 *
 * Copyright 2021 Mozilla Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ','line_number':1,'multiline':True]
['text':' A PackedTypeCode represents any value type in an compact POD format.','line_number':35,'multiline':False]
['text':' Return the TypeCode, but return AbstractReferenceTypeCode for any reference','line_number':125,'multiline':False]
['text':' type.','line_number':126,'multiline':False]
['text':'','line_number':127,'multiline':False]
['text':' This function is very, very hot, hence what would normally be a switch on','line_number':128,'multiline':False]
['text':' the value `c` to map the reference types to AbstractReferenceTypeCode has','line_number':129,'multiline':False]
['text':' been distilled into a simple comparison; this is fastest.  Should type','line_number':130,'multiline':False]
['text':' codes become too complicated for this to work then a lookup table also has','line_number':131,'multiline':False]
['text':' better performance than a switch.','line_number':132,'multiline':False]
['text':'','line_number':133,'multiline':False]
['text':' An alternative is for the PackedTypeCode to represent something closer to','line_number':134,'multiline':False]
['text':' what ValType needs, so that this decoding step is not necessary, but that','line_number':135,'multiline':False]
['text':' moves complexity elsewhere, and the perf gain here would be only about 1%','line_number':136,'multiline':False]
['text':' for baseline compilation throughput.','line_number':137,'multiline':False]
['text':'','line_number':138,'multiline':False]
['text':' TODO: with rtt types this is no longer a simple comparison, we should','line_number':139,'multiline':False]
['text':' re-evaluate the performance of this function.','line_number':140,'multiline':False]
['text':' An enum that describes the representation classes for tables; The table','line_number':188,'multiline':False]
['text':' element type is mapped into this by Table::repr().','line_number':189,'multiline':False]
['text':' The RefType carries more information about types t for which t.isReference()','line_number':193,'multiline':False]
['text':' is true.','line_number':194,'multiline':False]
['text':' The PackedType represents the storage type of a WebAssembly location, whether','line_number':363,'multiline':False]
['text':' parameter, local, field, or global. See specializations below for ValType and','line_number':364,'multiline':False]
['text':' FieldType.','line_number':365,'multiline':False]
['text':' Returns whether the type has a default value.','line_number':491,'multiline':False]
['text':' Returns whether the type has a representation in JS.','line_number':497,'multiline':False]
['text':' Some types are encoded as JS::Value when they escape from Wasm (when passed','line_number':555,'multiline':False]
['text':' as parameters to imports or returned from exports).  For ExternRef the','line_number':556,'multiline':False]
['text':' Value encoding is pretty much a requirement.  For other types it's a choice','line_number':557,'multiline':False]
['text':' that may (temporarily) simplify some code.','line_number':558,'multiline':False]
['text':' The dominant use of this data type is for locals and args, and profiling','line_number':660,'multiline':False]
['text':' with ZenGarden and Tanks suggests an initial size of 16 minimises heap','line_number':661,'multiline':False]
['text':' allocation, both in terms of blocks and bytes.','line_number':662,'multiline':False]
['text':' ValType utilities','line_number':665,'multiline':False]
['text':' Note, ToMIRType is only correct within Wasm, where an AnyRef is represented','line_number':684,'multiline':False]
['text':' as a pointer.  At the JS/wasm boundary, an AnyRef can be represented as a','line_number':685,'multiline':False]
['text':' JS::Value, and the type translation may have to be handled specially and on a','line_number':686,'multiline':False]
['text':' case-by-case basis.','line_number':687,'multiline':False]
['text':' namespace wasm','line_number':720,'multiline':False]
['text':' namespace js','line_number':721,'multiline':False]
['text':' wasm_valtype_h','line_number':723,'multiline':False]
