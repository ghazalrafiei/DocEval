['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]
['text':' js::SameValue','line_number':14,'multiline':False]
['text':'** HashableValue *********************************************************','line_number':32,'multiline':True]
['text':' Atomize so that hash() and operator==() are fast and infallible.','line_number':36,'multiline':False]
['text':' Normalize int32_t-valued doubles to int32_t for faster hashing and','line_number':46,'multiline':False]
['text':' testing. Note: we use NumberEqualsInt32 here instead of NumberIsInt32','line_number':47,'multiline':False]
['text':' because we want -0 and 0 to be normalized to the same thing.','line_number':48,'multiline':False]
['text':' Normalize the sign bit of a NaN.','line_number':51,'multiline':False]
['text':' HashableValue::setValue normalizes values so that the SameValue relation','line_number':66,'multiline':False]
['text':' on HashableValues is the same as the == relationship on','line_number':67,'multiline':False]
['text':' value.asRawBits(). So why not just return that? Security.','line_number':68,'multiline':False]
['text':'','line_number':69,'multiline':False]
['text':' To avoid revealing GC of atoms, string-based hash codes are computed','line_number':70,'multiline':False]
['text':' from the string contents rather than any pointer; to avoid revealing','line_number':71,'multiline':False]
['text':' addresses, pointer-based hash codes are computed using the','line_number':72,'multiline':False]
['text':' HashCodeScrambler.','line_number':73,'multiline':False]
['text':' Two HashableValues are equal if they have equal bits.','line_number':97,'multiline':False]
['text':' BigInt values are considered equal if they represent the same','line_number':100,'multiline':False]
['text':' mathematical value.','line_number':101,'multiline':False]
['text':'** MapIterator ***********************************************************','line_number':123,'multiline':True]
['text':' anonymous namespace ','line_number':125,'multiline':True]
['text':' addProperty','line_number':128,'multiline':False]
['text':' delProperty','line_number':129,'multiline':False]
['text':' enumerate','line_number':130,'multiline':False]
['text':' newEnumerate','line_number':131,'multiline':False]
['text':' resolve','line_number':132,'multiline':False]
['text':' mayResolve','line_number':133,'multiline':False]
['text':' finalize','line_number':134,'multiline':False]
['text':' call','line_number':135,'multiline':False]
['text':' hasInstance','line_number':136,'multiline':False]
['text':' construct','line_number':137,'multiline':False]
['text':' trace','line_number':138,'multiline':False]
['text':' objectMovedOp','line_number':142,'multiline':False]
['text':' static ','line_number':172,'multiline':True]
['text':' Retry with |iterobj| and |buffer| forcibly tenured.','line_number':228,'multiline':False]
['text':' Bug 1560019: Malloc memory associated with MapIteratorObjects is not','line_number':267,'multiline':False]
['text':' currently tracked.','line_number':268,'multiline':False]
['text':' IC code calls this directly.','line_number':311,'multiline':False]
['text':' Check invariants for inlined GetNextMapEntryForIterator.','line_number':314,'multiline':False]
['text':' The array should be tenured, so that post-barrier can be done simply.','line_number':316,'multiline':False]
['text':' The array elements should be fixed.','line_number':319,'multiline':False]
['text':' static ','line_number':354,'multiline':True]
['text':'** Map *******************************************************************','line_number':369,'multiline':True]
['text':' addProperty','line_number':372,'multiline':False]
['text':' delProperty','line_number':373,'multiline':False]
['text':' enumerate','line_number':374,'multiline':False]
['text':' newEnumerate','line_number':375,'multiline':False]
['text':' resolve','line_number':376,'multiline':False]
['text':' mayResolve','line_number':377,'multiline':False]
['text':' finalize','line_number':378,'multiline':False]
['text':' call','line_number':379,'multiline':False]
['text':' hasInstance','line_number':380,'multiline':False]
['text':' construct','line_number':381,'multiline':False]
['text':' trace','line_number':382,'multiline':False]
['text':' clang-format off','line_number':410,'multiline':False]
['text':' @@iterator is re-defined in finishInit so that it has the','line_number':421,'multiline':False]
['text':' same identity as |entries|.','line_number':422,'multiline':False]
['text':' clang-format on','line_number':426,'multiline':False]
['text':' static ','line_number':431,'multiline':True]
['text':' 23.1.3.12 Map.prototype[@@iterator]()','line_number':441,'multiline':False]
['text':' The initial value of the @@iterator property is the same function object','line_number':442,'multiline':False]
['text':' as the initial value of the "entries" property.','line_number':443,'multiline':False]
['text':' The hash function must take account of the fact that the thing being','line_number':454,'multiline':False]
['text':' hashed may have been moved by GC. This is only an issue for BigInt as for','line_number':455,'multiline':False]
['text':' other types the hash function only uses the bits of the Value.','line_number':456,'multiline':False]
['text':' Clear newKey to avoid the barrier in ~PreBarriered.','line_number':460,'multiline':False]
['text':' A generic store buffer entry that traces all nursery keys for an ordered hash','line_number':512,'multiline':False]
['text':' map or set.','line_number':513,'multiline':False]
['text':' = nullptr ','line_number':618,'multiline':True]
['text':' static ','line_number':667,'multiline':True]
['text':' MapObject::trace does not trace deleted entries. Incremental GC therefore','line_number':852,'multiline':False]
['text':' requires that no HeapPtr<Value> objects pointing to heap values be left','line_number':853,'multiline':False]
['text':' alive in the ValueMap.','line_number':854,'multiline':False]
['text':'','line_number':855,'multiline':False]
['text':' OrderedHashMap::remove() doesn't destroy the removed entry. It merely','line_number':856,'multiline':False]
['text':' calls OrderedHashMap::MapOps::makeEmpty. But that is sufficient, because','line_number':857,'multiline':False]
['text':' makeEmpty clears the value by doing e->value = Value(), and in the case','line_number':858,'multiline':False]
['text':' of a ValueMap, Value() means HeapPtr<Value>(), which is the same as','line_number':859,'multiline':False]
['text':' HeapPtr<Value>(UndefinedValue()).','line_number':860,'multiline':False]
['text':'** SetIterator ***********************************************************','line_number':943,'multiline':True]
['text':' addProperty','line_number':946,'multiline':False]
['text':' delProperty','line_number':947,'multiline':False]
['text':' enumerate','line_number':948,'multiline':False]
['text':' newEnumerate','line_number':949,'multiline':False]
['text':' resolve','line_number':950,'multiline':False]
['text':' mayResolve','line_number':951,'multiline':False]
['text':' finalize','line_number':952,'multiline':False]
['text':' call','line_number':953,'multiline':False]
['text':' hasInstance','line_number':954,'multiline':False]
['text':' construct','line_number':955,'multiline':False]
['text':' trace','line_number':956,'multiline':False]
['text':' objectMovedOp','line_number':960,'multiline':False]
['text':' static ','line_number':989,'multiline':True]
['text':' Retry with |iterobj| and |buffer| forcibly tenured.','line_number':1037,'multiline':False]
['text':' Bug 1560019: Malloc memory associated with SetIteratorObjects is not','line_number':1076,'multiline':False]
['text':' currently tracked.','line_number':1077,'multiline':False]
['text':' IC code calls this directly.','line_number':1112,'multiline':False]
['text':' Check invariants for inlined _GetNextSetEntryForIterator.','line_number':1115,'multiline':False]
['text':' The array should be tenured, so that post-barrier can be done simply.','line_number':1117,'multiline':False]
['text':' The array elements should be fixed.','line_number':1120,'multiline':False]
['text':' static ','line_number':1141,'multiline':True]
['text':'** Set *******************************************************************','line_number':1155,'multiline':True]
['text':' addProperty','line_number':1158,'multiline':False]
['text':' delProperty','line_number':1159,'multiline':False]
['text':' enumerate','line_number':1160,'multiline':False]
['text':' newEnumerate','line_number':1161,'multiline':False]
['text':' resolve','line_number':1162,'multiline':False]
['text':' mayResolve','line_number':1163,'multiline':False]
['text':' finalize','line_number':1164,'multiline':False]
['text':' call','line_number':1165,'multiline':False]
['text':' hasInstance','line_number':1166,'multiline':False]
['text':' construct','line_number':1167,'multiline':False]
['text':' trace','line_number':1168,'multiline':False]
['text':' clang-format off','line_number':1198,'multiline':False]
['text':' @@iterator and |keys| re-defined in finishInit so that they have the','line_number':1207,'multiline':False]
['text':' same identity as |values|.','line_number':1208,'multiline':False]
['text':' clang-format on','line_number':1213,'multiline':False]
['text':' static ','line_number':1218,'multiline':True]
['text':' 23.2.3.8 Set.prototype.keys()','line_number':1228,'multiline':False]
['text':' The initial value of the "keys" property is the same function object','line_number':1229,'multiline':False]
['text':' as the initial value of the "values" property.','line_number':1230,'multiline':False]
['text':' 23.2.3.11 Set.prototype[@@iterator]()','line_number':1236,'multiline':False]
['text':' See above.','line_number':1237,'multiline':False]
['text':' = nullptr ','line_number':1278,'multiline':True]
['text':' static ','line_number':1336,'multiline':True]
['text':'** JS static utility functions *******************************************','line_number':1613,'multiline':True]
['text':' Handles Clear/Size for public jsapi map/set access','line_number':1630,'multiline':False]
['text':' Always unwrap, in case this is an xray or cross-compartment wrapper.','line_number':1637,'multiline':False]
['text':' Enter the realm of the backing object before calling functions on','line_number':1641,'multiline':False]
['text':' it.','line_number':1642,'multiline':False]
['text':' Handles Has/Delete for public jsapi map/set access','line_number':1647,'multiline':False]
['text':' Always unwrap, in case this is an xray or cross-compartment wrapper.','line_number':1654,'multiline':False]
['text':' If we're working with a wrapped map/set, rewrap the key into the','line_number':1659,'multiline':False]
['text':' compartment of the unwrapped map/set.','line_number':1660,'multiline':False]
['text':' Handles iterator generation for public jsapi map/set access','line_number':1670,'multiline':False]
['text':' Always unwrap, in case this is an xray or cross-compartment wrapper.','line_number':1679,'multiline':False]
['text':' Retrieve the iterator while in the unwrapped map/set's compartment,','line_number':1683,'multiline':False]
['text':' otherwise we'll crash on a compartment assert.','line_number':1684,'multiline':False]
['text':' If the caller is in a different compartment than the map/set, rewrap the','line_number':1691,'multiline':False]
['text':' iterator object into the caller's compartment.','line_number':1692,'multiline':False]
['text':'** JS public APIs ********************************************************','line_number':1701,'multiline':True]
['text':' Unwrap the object, and enter its realm. If object isn't wrapped,','line_number':1716,'multiline':False]
['text':' this is essentially a noop.','line_number':1717,'multiline':False]
['text':' If we passed in a wrapper, wrap our key into its compartment now.','line_number':1724,'multiline':False]
['text':' If we passed in a wrapper, wrap our return value on the way out.','line_number':1735,'multiline':False]
['text':' Unwrap the object, and enter its compartment. If object isn't wrapped,','line_number':1749,'multiline':False]
['text':' this is essentially a noop.','line_number':1750,'multiline':False]
['text':' If we passed in a wrapper, wrap both key and value before adding to','line_number':1756,'multiline':False]
['text':' the map','line_number':1757,'multiline':False]
['text':' Unwrap the object, and enter its compartment. If object isn't wrapped,','line_number':1816,'multiline':False]
['text':' this is essentially a noop.','line_number':1817,'multiline':False]
['text':' If we passed in a wrapper, wrap key before adding to the set','line_number':1823,'multiline':False]
