['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]
['text':' mozilla::AssertedCast','line_number':10,'multiline':False]
['text':'
 * This namespace contains all the knowledge required to handle Unicode
 * characters in JavaScript.
 *
 * SPACE
 *   Every character that is either in the ECMAScript class WhiteSpace
 *   (ES2016, § 11.2) or in LineTerminator (ES2016, § 11.3).
 *
 *   WhiteSpace
 *    \u0009, \u000B, \u000C, \u0020, \u00A0 and \uFEFF
 *    and every other Unicode character with the General Category "Zs".
 *    See <http://www.unicode.org/reports/tr44/#UnicodeData.txt> for more
 *    information about General Categories and the UnicodeData.txt file.
 *
 *   LineTerminator
 *    \u000A, \u000D, \u2028, \u2029
 *
 * UNICODE_ID_START
 *   These are all characters with the Unicode property «ID_Start».
 *
 * UNICODE_ID_CONTINUE_ONLY
 *   These are all characters with the Unicode property «ID_Continue» minus all
 *   characters with the Unicode property «ID_Start».
 *   And additionally <ZWNJ> and <ZWJ>. (ES2016, § 11.6)
 *
 * UNICODE_ID_CONTINUE
 *   These are all characters with the Unicode property «ID_Continue».
 *   And additionally <ZWNJ> and <ZWJ>. (ES2016, § 11.6)
 *
 *   Attention: UNICODE_ID_START is _not_ IdentifierStart, but you could build
 *   a matcher for the real IdentifierPart like this:
 *
 *   if char in ['$', '_']:
 *      return True
 *   if GetFlag(char) & UNICODE_ID_CONTINUE:
 *      return True
 *
 ','line_number':23,'multiline':True]
['text':' namespace CharFlag','line_number':67,'multiline':False]
['text':'
   * upperCase and lowerCase normally store the delta between two
   * letters. For example the lower case alpha (a) has the char code
   * 97, and the upper case alpha (A) has 65. So for "a" we would
   * store -32 in upperCase (97 + (-32) = 65) and 0 in lowerCase,
   * because this char is already in lower case.
   * Well, not -32 exactly, but (2**16 - 32) to induce
   * unsigned overflow with identical mathematical behavior.
   * For upper case alpha, we would store 0 in upperCase and 32 in
   * lowerCase (65 + 32 = 97).
   *
   * We use deltas to reuse information for multiple characters. For
   * example the whole lower case latin alphabet fits into one entry,
   * because it's always a UnicodeLetter and upperCase contains
   * -32.
   ','line_number':94,'multiline':True]
['text':' Also matches <ZWNJ> and <ZWJ>!','line_number':122,'multiline':False]
['text':'
   * ES2016 11.6 IdentifierStart
   *  $ (dollar sign)
   *  _ (underscore)
   *  or any character with the Unicode property «ID_Start».
   *
   * We use a lookup table for small and thus common characters for speed.
   ','line_number':140,'multiline':True]
['text':'
   * ES2016 11.6 IdentifierPart
   *  $ (dollar sign)
   *  _ (underscore)
   *  <ZWNJ>
   *  <ZWJ>
   *  or any character with the Unicode property «ID_Continue».
   *
   * We use a lookup table for small and thus common characters for speed.
   ','line_number':171,'multiline':True]
['text':' IsSpace checks if a code point is included in the merged set of WhiteSpace','line_number':216,'multiline':False]
['text':' and LineTerminator specified by #sec-white-space and #sec-line-terminators.','line_number':217,'multiline':False]
['text':' We combine them because nearly every calling function wants this, excepting','line_number':218,'multiline':False]
['text':' only some tokenizer code that necessarily handles LineTerminator specially','line_number':219,'multiline':False]
['text':' due to UTF-8/UTF-16 template specialization.','line_number':220,'multiline':False]
['text':' ASCII code points are very common and must be handled quickly, so use a','line_number':222,'multiline':False]
['text':' lookup table for them.','line_number':223,'multiline':False]
['text':' NO-BREAK SPACE is supposed to be the most common non-ASCII WhiteSpace code','line_number':228,'multiline':False]
['text':' point, so inline its handling too.','line_number':229,'multiline':False]
['text':' IsSpace(char32_t) must additionally exclude everything non-BMP.','line_number':254,'multiline':False]
['text':' An assertion in make_unicode.py:make_unicode_file guarantees that there are','line_number':264,'multiline':False]
['text':' no Space_Separator (Zs) code points outside the BMP.','line_number':265,'multiline':False]
['text':'
 * Returns the simple upper case mapping (possibly the identity mapping; see
 * ChangesWhenUpperCasedSpecialCasing for details) of the given UTF-16 code
 * unit.
 ','line_number':273,'multiline':True]
['text':'
 * Returns the simple lower case mapping (possibly the identity mapping; see
 * ChangesWhenUpperCasedSpecialCasing for details) of the given UTF-16 code
 * unit.
 ','line_number':291,'multiline':True]
['text':'
 * Returns the simple lower case mapping (possibly the identity mapping; see
 * ChangesWhenUpperCasedSpecialCasing for details) of the given Latin-1 code
 * point.
 ','line_number':311,'multiline':True]
['text':'
 * Returns the simple lower case mapping (possibly the identity mapping; see
 * ChangesWhenUpperCasedSpecialCasing for details) of the given ASCII code
 * point.
 ','line_number':320,'multiline':True]
['text':'*
 * Returns true iff ToUpperCase(ch) != ch.
 *
 * This function isn't guaranteed to correctly handle code points for which
 * |ChangesWhenUpperCasedSpecialCasing| returns true, so it is *not* always the
 * same as the value of the Changes_When_Uppercased Unicode property value for
 * the code point.
 ','line_number':330,'multiline':True]
['text':'*
 * Returns true iff ToUpperCase(ch) != ch.
 *
 * This function isn't guaranteed to correctly handle code points for which
 * |ChangesWhenUpperCasedSpecialCasing| returns true, so it is *not* always the
 * same as the value of the Changes_When_Uppercased Unicode property value for
 * the code point.
 ','line_number':345,'multiline':True]
['text':' U+00B5 and U+00E0 to U+00FF, except U+00F7, have an uppercase form.','line_number':358,'multiline':False]
['text':' Returns true iff ToLowerCase(ch) != ch.','line_number':366,'multiline':False]
['text':' Returns true iff ToLowerCase(ch) != ch.','line_number':374,'multiline':False]
['text':'
 * Returns true if, independent of language/locale, the given UTF-16 code unit
 * has a special upper case mapping.
 *
 * Unicode defines two case mapping modes:
 *
 *   1. "simple case mappings" (defined in UnicodeData.txt) for one-to-one
 *      mappings that are always the same regardless of locale or context
 *      within a string (e.g. "a"→"A").
 *   2. "special case mappings" (defined in SpecialCasing.txt) for mappings
 *      that alter string length (e.g. uppercasing "ß"→"SS") or where different
 *      mappings occur depending on language/locale (e.g. uppercasing "i"→"I"
 *      usually but "i"→"İ" in Turkish) or context within the string (e.g.
 *      lowercasing "Σ" U+03A3 GREEK CAPITAL LETTER SIGMA to "ς" U+03C2 GREEK
 *      SMALL LETTER FINAL SIGMA when the sigma appears [roughly speaking] at
 *      the end of a word but "ς" U+03C3 GREEK SMALL LETTER SIGMA anywhere
 *      else).
 *
 * The ChangesWhenUpperCased*() functions defined above will return true for
 * code points that have simple case mappings, but they may not return the
 * right result for code points that have special case mappings.  To correctly
 * support full case mappings for all code points, callers must determine
 * whether this function returns true or false for the code point, then use
 * AppendUpperCaseSpecialCasing in the former case and ToUpperCase in the
 * latter.
 *
 * NOTE: All special upper case mappings are unconditional (that is, they don't
 *       depend on language/locale or context within the string) in Unicode 10.
 ','line_number':414,'multiline':True]
['text':'
 * Returns the length of the upper case mapping of |ch|.
 *
 * This function asserts if |ch| doesn't have a special upper case mapping.
 ','line_number':445,'multiline':True]
['text':'
 * Appends the upper case mapping of |ch| to the given output buffer,
 * starting at the provided index.
 *
 * This function asserts if |ch| doesn't have a special upper case mapping.
 ','line_number':452,'multiline':True]
['text':'*
 * True iff the given value is a UTF-16 surrogate.
 *
 * This function is intended for use in contexts where 32-bit values may need
 * to be tested to see if they reside in the surrogate range, so it doesn't
 * just take char16_t.
 ','line_number':494,'multiline':True]
['text':' namespace unicode ','line_number':542,'multiline':True]
['text':' namespace js ','line_number':543,'multiline':True]
['text':' util_Unicode_h ','line_number':545,'multiline':True]
