['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]
['text':' Used to track trial inlining status for a Baseline IC.','line_number':15,'multiline':False]
['text':' See also setTrialInliningState below.','line_number':16,'multiline':False]
['text':' ICState stores information about a Baseline or Ion IC.','line_number':24,'multiline':False]
['text':' When we attach the maximum number of stubs, we discard all stubs and','line_number':27,'multiline':False]
['text':' transition the IC to Megamorphic to attach stubs that are more generic','line_number':28,'multiline':False]
['text':' (handle more cases). If we again attach the maximum number of stubs, we','line_number':29,'multiline':False]
['text':' transition to Generic and (depending on the IC) will either attach a','line_number':30,'multiline':False]
['text':' single stub that handles everything or stop attaching new stubs.','line_number':31,'multiline':False]
['text':'','line_number':32,'multiline':False]
['text':' We also transition to Generic when we repeatedly fail to attach a stub,','line_number':33,'multiline':False]
['text':' to avoid wasting time trying.','line_number':34,'multiline':False]
['text':' The TrialInliningState for a Baseline IC.','line_number':40,'multiline':False]
['text':' Whether WarpOracle created a snapshot based on stubs attached to this','line_number':43,'multiline':False]
['text':' Baseline IC.','line_number':44,'multiline':False]
['text':' Number of optimized stubs currently attached to this IC.','line_number':47,'multiline':False]
['text':' Number of times we failed to attach a stub.','line_number':50,'multiline':False]
['text':' Allow more failures if we attached stubs.','line_number':67,'multiline':False]
['text':' Note: we cannot assert that numOptimizedStubs_ <= MaxOptimizedStubs','line_number':86,'multiline':False]
['text':' because old-style baseline ICs may attach more stubs than','line_number':87,'multiline':False]
['text':' MaxOptimizedStubs allows.','line_number':88,'multiline':False]
['text':' If this returns true, we transitioned to a new mode and the caller','line_number':95,'multiline':False]
['text':' should discard all stubs.','line_number':96,'multiline':False]
['text':' Note: we cannot assert that numOptimizedStubs_ <= MaxOptimizedStubs','line_number':98,'multiline':False]
['text':' because old-style baseline ICs may attach more stubs than','line_number':99,'multiline':False]
['text':' MaxOptimizedStubs allows.','line_number':100,'multiline':False]
['text':' We'd like to assert numOptimizedStubs_ < MaxOptimizedStubs, but','line_number':130,'multiline':False]
['text':' since this code is also used for non-CacheIR Baseline stubs, assert','line_number':131,'multiline':False]
['text':' < 16 for now. Note that we do have the stronger assert in other','line_number':132,'multiline':False]
['text':' methods, because they are only used by CacheIR ICs.','line_number':133,'multiline':False]
['text':' As a heuristic, reduce the failure count after each successful attach','line_number':136,'multiline':False]
['text':' to delay hitting Generic mode. Reset to 1 instead of 0 so that','line_number':137,'multiline':False]
['text':' BaselineInspector can distinguish no-failures from rare-failures.','line_number':138,'multiline':False]
['text':' Note: we can't assert numFailures_ < maxFailures() because','line_number':142,'multiline':False]
['text':' maxFailures() depends on numOptimizedStubs_ and it's possible a','line_number':143,'multiline':False]
['text':' GC discarded stubs before we got here.','line_number':144,'multiline':False]
['text':' Moving to the Failure state is always valid. The other states should','line_number':163,'multiline':False]
['text':' happen in this order:','line_number':164,'multiline':False]
['text':'','line_number':165,'multiline':False]
['text':'   Initial -> Candidate -> Inlined','line_number':166,'multiline':False]
['text':'','line_number':167,'multiline':False]
['text':' This ensures we perform trial inlining at most once per IC site.','line_number':168,'multiline':False]
['text':' namespace jit','line_number':192,'multiline':False]
['text':' namespace js','line_number':193,'multiline':False]
['text':' jit_ICState_h ','line_number':195,'multiline':True]
