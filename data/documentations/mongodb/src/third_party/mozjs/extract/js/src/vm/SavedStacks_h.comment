['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]
['text':' # Saved Stacks','line_number':26,'multiline':False]
['text':'','line_number':27,'multiline':False]
['text':' The `SavedStacks` class provides a compact way to capture and save JS stacks','line_number':28,'multiline':False]
['text':' as `SavedFrame` `JSObject` subclasses. A single `SavedFrame` object','line_number':29,'multiline':False]
['text':' represents one frame that was on the stack, and has a strong reference to its','line_number':30,'multiline':False]
['text':' parent `SavedFrame` (the next youngest frame). This reference is null when','line_number':31,'multiline':False]
['text':' the `SavedFrame` object is the oldest frame that was on the stack.','line_number':32,'multiline':False]
['text':'','line_number':33,'multiline':False]
['text':' This comment documents implementation. For usage documentation, see the','line_number':34,'multiline':False]
['text':' `js/src/doc/SavedFrame/SavedFrame.md` file and relevant `SavedFrame`','line_number':35,'multiline':False]
['text':' functions in `js/src/jsapi.h`.','line_number':36,'multiline':False]
['text':'','line_number':37,'multiline':False]
['text':' ## Compact','line_number':38,'multiline':False]
['text':'','line_number':39,'multiline':False]
['text':' Older saved stack frame tails are shared via hash consing, to deduplicate','line_number':40,'multiline':False]
['text':' structurally identical data. `SavedStacks` contains a hash table of weakly','line_number':41,'multiline':False]
['text':' held `SavedFrame` objects, and when the owning compartment is swept, it','line_number':42,'multiline':False]
['text':' removes entries from this table that aren't held alive in any other way. When','line_number':43,'multiline':False]
['text':' saving new stacks, we use this table to find pre-existing `SavedFrame`','line_number':44,'multiline':False]
['text':' objects. If such an object is already extant, it is reused; otherwise a new','line_number':45,'multiline':False]
['text':' `SavedFrame` is allocated and inserted into the table.','line_number':46,'multiline':False]
['text':'','line_number':47,'multiline':False]
['text':'    Naive         |   Hash Consing','line_number':48,'multiline':False]
['text':'    --------------+------------------','line_number':49,'multiline':False]
['text':'    c -> b -> a   |   c -> b -> a','line_number':50,'multiline':False]
['text':'                  |        ^','line_number':51,'multiline':False]
['text':'    d -> b -> a   |   d ---|','line_number':52,'multiline':False]
['text':'                  |        |','line_number':53,'multiline':False]
['text':'    e -> b -> a   |   e ---'','line_number':54,'multiline':False]
['text':'','line_number':55,'multiline':False]
['text':' This technique is effective because of the nature of the events that trigger','line_number':56,'multiline':False]
['text':' capturing the stack. Currently, these events consist primarily of `JSObject`','line_number':57,'multiline':False]
['text':' allocation (when an observing `Debugger` has such tracking), `Promise`','line_number':58,'multiline':False]
['text':' settlement, and `Error` object creation. While these events may occur many','line_number':59,'multiline':False]
['text':' times, they tend to occur only at a few locations in the JS source. For','line_number':60,'multiline':False]
['text':' example, if we enable Object allocation tracking and run the esprima','line_number':61,'multiline':False]
['text':' JavaScript parser on its own JavaScript source, there are approximately 54700','line_number':62,'multiline':False]
['text':' total `Object` allocations, but just ~1400 unique JS stacks at allocation','line_number':63,'multiline':False]
['text':' time. There's only ~200 allocation sites if we capture only the youngest','line_number':64,'multiline':False]
['text':' stack frame.','line_number':65,'multiline':False]
['text':'','line_number':66,'multiline':False]
['text':' ## Security and Wrappers','line_number':67,'multiline':False]
['text':'','line_number':68,'multiline':False]
['text':' We save every frame on the stack, regardless of whether the `SavedStack`'s','line_number':69,'multiline':False]
['text':' compartment's principals subsume the frame's compartment's principals or','line_number':70,'multiline':False]
['text':' not. This gives us maximum flexibility down the line when accessing and','line_number':71,'multiline':False]
['text':' presenting captured stacks, but at the price of some complication involved in','line_number':72,'multiline':False]
['text':' preventing the leakage of privileged stack frames to unprivileged callers.','line_number':73,'multiline':False]
['text':'','line_number':74,'multiline':False]
['text':' When a `SavedFrame` method or accessor is called, we compare the caller's','line_number':75,'multiline':False]
['text':' compartment's principals to each `SavedFrame`'s captured principals. We avoid','line_number':76,'multiline':False]
['text':' using the usual `CallNonGenericMethod` and `nativeCall` machinery which','line_number':77,'multiline':False]
['text':' enters the `SavedFrame` object's compartment before we can check these','line_number':78,'multiline':False]
['text':' principals, because we need access to the original caller's compartment's','line_number':79,'multiline':False]
['text':' principals (unlike other `CallNonGenericMethod` users) to determine what view','line_number':80,'multiline':False]
['text':' of the stack to present. Instead, we take a similar approach to that used by','line_number':81,'multiline':False]
['text':' DOM methods, and manually unwrap wrappers until we get the underlying','line_number':82,'multiline':False]
['text':' `SavedFrame` object, find the first `SavedFrame` in its stack whose captured','line_number':83,'multiline':False]
['text':' principals are subsumed by the caller's principals, access the reserved slots','line_number':84,'multiline':False]
['text':' we care about, and then rewrap return values as necessary.','line_number':85,'multiline':False]
['text':'','line_number':86,'multiline':False]
['text':' Consider the following diagram:','line_number':87,'multiline':False]
['text':'','line_number':88,'multiline':False]
['text':'                                              Content Compartment','line_number':89,'multiline':False]
['text':'                                    +---------------------------------------+','line_number':90,'multiline':False]
['text':'                                    |                                       |','line_number':91,'multiline':False]
['text':'                                    |           +------------------------+  |','line_number':92,'multiline':False]
['text':'      Chrome Compartment            |           |                        |  |','line_number':93,'multiline':False]
['text':'    +--------------------+          |           | SavedFrame C (content) |  |','line_number':94,'multiline':False]
['text':'    |                    |          |           |                        |  |','line_number':95,'multiline':False]
['text':'    |                  +--------------+         +------------------------+  |','line_number':96,'multiline':False]
['text':'    |                  |              |                    ^                |','line_number':97,'multiline':False]
['text':'    |     var x -----> | Xray Wrapper |-----.              |                |','line_number':98,'multiline':False]
['text':'    |                  |              |     |              |                |','line_number':99,'multiline':False]
['text':'    |                  +--------------+     |   +------------------------+  |','line_number':100,'multiline':False]
['text':'    |                    |          |       |   |                        |  |','line_number':101,'multiline':False]
['text':'    |                  +--------------+     |   | SavedFrame B (content) |  |','line_number':102,'multiline':False]
['text':'    |                  |              |     |   |                        |  |','line_number':103,'multiline':False]
['text':'    |     var y -----> | CCW (waived) |--.  |   +------------------------+  |','line_number':104,'multiline':False]
['text':'    |                  |              |  |  |              ^                |','line_number':105,'multiline':False]
['text':'    |                  +--------------+  |  |              |                |','line_number':106,'multiline':False]
['text':'    |                    |          |    |  |              |                |','line_number':107,'multiline':False]
['text':'    +--------------------+          |    |  |   +------------------------+  |','line_number':108,'multiline':False]
['text':'                                    |    |  '-> |                        |  |','line_number':109,'multiline':False]
['text':'                                    |    |      | SavedFrame A (chrome)  |  |','line_number':110,'multiline':False]
['text':'                                    |    '----> |                        |  |','line_number':111,'multiline':False]
['text':'                                    |           +------------------------+  |','line_number':112,'multiline':False]
['text':'                                    |                      ^                |','line_number':113,'multiline':False]
['text':'                                    |                      |                |','line_number':114,'multiline':False]
['text':'                                    |           var z -----'                |','line_number':115,'multiline':False]
['text':'                                    |                                       |','line_number':116,'multiline':False]
['text':'                                    +---------------------------------------+','line_number':117,'multiline':False]
['text':'','line_number':118,'multiline':False]
['text':' CCW is a plain cross-compartment wrapper, yielded by waiving Xray vision. A','line_number':119,'multiline':False]
['text':' is the youngest `SavedFrame` and represents a frame that was from the chrome','line_number':120,'multiline':False]
['text':' compartment, while B and C are from frames from the content compartment. C is','line_number':121,'multiline':False]
['text':' the oldest frame.','line_number':122,'multiline':False]
['text':'','line_number':123,'multiline':False]
['text':' Note that it is always safe to waive an Xray around a SavedFrame object,','line_number':124,'multiline':False]
['text':' because SavedFrame objects and the SavedFrame prototype are always frozen you','line_number':125,'multiline':False]
['text':' will never run untrusted code.','line_number':126,'multiline':False]
['text':'','line_number':127,'multiline':False]
['text':' Depending on who the caller is, the view of the stack will be different, and','line_number':128,'multiline':False]
['text':' is summarized in the table below.','line_number':129,'multiline':False]
['text':'','line_number':130,'multiline':False]
['text':'    Var  | View','line_number':131,'multiline':False]
['text':'    -----+------------','line_number':132,'multiline':False]
['text':'    x    | A -> B -> C','line_number':133,'multiline':False]
['text':'    y, z | B -> C','line_number':134,'multiline':False]
['text':'','line_number':135,'multiline':False]
['text':' In the case of x, the `SavedFrame` accessors are called with an Xray wrapper','line_number':136,'multiline':False]
['text':' around the `SavedFrame` object as the `this` value, and the chrome','line_number':137,'multiline':False]
['text':' compartment as the cx's current principals. Because the chrome compartment's','line_number':138,'multiline':False]
['text':' principals subsume both itself and the content compartment's principals, x','line_number':139,'multiline':False]
['text':' has the complete view of the stack.','line_number':140,'multiline':False]
['text':'','line_number':141,'multiline':False]
['text':' In the case of y, the cross-compartment machinery automatically enters the','line_number':142,'multiline':False]
['text':' content compartment, and calls the `SavedFrame` accessors with the wrapped','line_number':143,'multiline':False]
['text':' `SavedFrame` object as the `this` value. Because the cx's current compartment','line_number':144,'multiline':False]
['text':' is the content compartment, and the content compartment's principals do not','line_number':145,'multiline':False]
['text':' subsume the chrome compartment's principals, it can only see the B and C','line_number':146,'multiline':False]
['text':' frames.','line_number':147,'multiline':False]
['text':'','line_number':148,'multiline':False]
['text':' In the case of z, the `SavedFrame` accessors are called with the `SavedFrame`','line_number':149,'multiline':False]
['text':' object in the `this` value, and the content compartment as the cx's current','line_number':150,'multiline':False]
['text':' compartment. Similar to the case of y, only the B and C frames are exposed','line_number':151,'multiline':False]
['text':' because the cx's current compartment's principals do not subsume A's captured','line_number':152,'multiline':False]
['text':' principals.','line_number':153,'multiline':False]
['text':' Set the sampling random number generator's state to |state0| and','line_number':181,'multiline':False]
['text':' |state1|. One or the other must be non-zero. See the comments for','line_number':182,'multiline':False]
['text':' mozilla::non_crypto::XorShift128PlusRNG::setState for details.','line_number':183,'multiline':False]
['text':' An alloction metadata builder that marks cells with the JavaScript stack','line_number':190,'multiline':False]
['text':' at which they were allocated.','line_number':191,'multiline':False]
['text':' Similar to mozilla::ReentrancyGuard, but instead of asserting against','line_number':206,'multiline':False]
['text':' reentrancy, just change the behavior of SavedStacks::saveCurrentStack to','line_number':207,'multiline':False]
['text':' return a nullptr SavedFrame.','line_number':208,'multiline':False]
['text':' Cache for memoizing PCToLineNumber lookups.','line_number':232,'multiline':False]
['text':' PCKey is weak. ','line_number':240,'multiline':True]
['text':' TODO: Bug 1501334: IsAboutToBeFinalized doesn't work for atoms.','line_number':260,'multiline':False]
['text':' Otherwise we should assert TraceWeakEdge always returns true;','line_number':261,'multiline':False]
['text':' We eagerly Atomize the script source stored in LocationValue because','line_number':287,'multiline':False]
['text':' wasm does not always have a JSScript and the source might not be','line_number':288,'multiline':False]
['text':' available when we need it later. However, since the JSScript does not','line_number':289,'multiline':False]
['text':' actually hold this atom, we have to trace it strongly to keep it alive.','line_number':290,'multiline':False]
['text':' Thus, it takes two GC passes to fully clean up this table: the first GC','line_number':291,'multiline':False]
['text':' removes the dead script; the second will clear out the source atom since','line_number':292,'multiline':False]
['text':' it is no longer held by the table.','line_number':293,'multiline':False]
['text':' namespace js ','line_number':339,'multiline':True]
['text':' vm_SavedStacks_h ','line_number':341,'multiline':True]
