['text':' This Source Code Form is subject to the terms of the Mozilla Public','line_number':1,'multiline':False]
['text':' License, v. 2.0. If a copy of the MPL was not distributed with this','line_number':2,'multiline':False]
['text':' file, You can obtain one at http://mozilla.org/MPL/2.0/.','line_number':3,'multiline':False]
['text':' This script generates jit/CacheIROpsGenerated.h from CacheIROps.yaml','line_number':5,'multiline':False]
['text':' First invoke preprocessor.py so that we can use #ifdef JS_SIMULATOR in','line_number':40,'multiline':False]
['text':' the YAML file.','line_number':41,'multiline':False]
['text':' Load into an OrderedDict to ensure order is preserved. Note: Python 3.7+','line_number':49,'multiline':False]
['text':' also preserves ordering for normal dictionaries.','line_number':50,'multiline':False]
['text':' Code based on https://stackoverflow.com/a/21912744.','line_number':51,'multiline':False]
['text':' Information for generating CacheIRWriter code for a single argument. Tuple','line_number':64,'multiline':False]
['text':' stores the C++ argument type and the CacheIRWriter method to call.','line_number':65,'multiline':False]
['text':' uint32_t to enable fits-in-byte asserts.','line_number':94,'multiline':False]
['text':' Generate a single method that writes the opcode and each argument.','line_number':113,'multiline':False]
['text':' For example:','line_number':114,'multiline':False]
['text':'','line_number':115,'multiline':False]
['text':'   void guardShape(ObjOperandId obj, Shape* shape) {','line_number':116,'multiline':False]
['text':'     writeOp(CacheOp::GuardShape);','line_number':117,'multiline':False]
['text':'     writeOperandId(obj);','line_number':118,'multiline':False]
['text':'     writeShapeField(shape);','line_number':119,'multiline':False]
['text':'     assertLengthMatches();','line_number':120,'multiline':False]
['text':'  }','line_number':121,'multiline':False]
['text':'','line_number':122,'multiline':False]
['text':' The assertLengthMatches() call is to assert the information in the','line_number':123,'multiline':False]
['text':' arg_length dictionary below matches what's written.','line_number':124,'multiline':False]
['text':' Method names start with a lowercase letter.','line_number':126,'multiline':False]
['text':' Information for generating code using CacheIRReader for a single argument.','line_number':160,'multiline':False]
['text':' Tuple stores the C++ type, the suffix used for arguments/variables of this','line_number':161,'multiline':False]
['text':' type, and the expression to read this type from CacheIRReader.','line_number':162,'multiline':False]
['text':' We generate the signature of the method that needs to be implemented and a','line_number':213,'multiline':False]
['text':' separate function forwarding to it. For example:','line_number':214,'multiline':False]
['text':'','line_number':215,'multiline':False]
['text':'   [[nodiscard]] bool emitGuardShape(ObjOperandId objId, uint32_t shapeOffset);','line_number':216,'multiline':False]
['text':'   [[nodiscard]] bool emitGuardShape(CacheIRReader& reader) {','line_number':217,'multiline':False]
['text':'     ObjOperandId objId = reader.objOperandId();','line_number':218,'multiline':False]
['text':'     uint32_t shapeOffset = reader.stubOffset();','line_number':219,'multiline':False]
['text':'     return emitGuardShape(objId, shapeOffset);','line_number':220,'multiline':False]
['text':'   }','line_number':221,'multiline':False]
['text':' Generate signature.','line_number':233,'multiline':False]
['text':' Generate the method forwarding to it.','line_number':236,'multiline':False]
['text':' For each argument type, the method name for printing it.','line_number':245,'multiline':False]
['text':' Generate code like this:','line_number':295,'multiline':False]
['text':'','line_number':296,'multiline':False]
['text':'  void spewGuardShape(CacheIRReader& reader) {','line_number':297,'multiline':False]
['text':'     spewOp(CacheOp::GuardShape);','line_number':298,'multiline':False]
['text':'     spewOperandId("objId", reader.objOperandId());','line_number':299,'multiline':False]
['text':'     spewOperandSeparator();','line_number':300,'multiline':False]
['text':'     spewField("shapeOffset", reader.stubOffset());','line_number':301,'multiline':False]
['text':'     spewOpEnd();','line_number':302,'multiline':False]
['text':'  }','line_number':303,'multiline':False]
['text':' Generate code like this:','line_number':330,'multiline':False]
['text':'','line_number':331,'multiline':False]
['text':'  void cloneGuardShape(CacheIRReader& reader, CacheIRWriter& writer) {','line_number':332,'multiline':False]
['text':'    writer.writeOp(CacheOp::GuardShape);','line_number':333,'multiline':False]
['text':'    ObjOperandId objId = reader.objOperandId();','line_number':334,'multiline':False]
['text':'    writer.writeOperandId(objId);','line_number':335,'multiline':False]
['text':'    uint32_t shapeOffset = reader.stubOffset();','line_number':336,'multiline':False]
['text':'    Shape* shape = getShapeField(shapeOffset);','line_number':337,'multiline':False]
['text':'    writer.writeShapeField(shape);','line_number':338,'multiline':False]
['text':'    writer.assertLengthMatches();','line_number':339,'multiline':False]
['text':'  }','line_number':340,'multiline':False]
['text':' If the write function takes T&, the intermediate variable','line_number':357,'multiline':False]
['text':' should be of type T.','line_number':358,'multiline':False]
['text':' Length in bytes for each argument type, either an integer or a C++ expression.','line_number':377,'multiline':False]
['text':' This is used to generate the CacheIROpArgLengths array. CacheIRWriter asserts','line_number':378,'multiline':False]
['text':' the number of bytes written matches the value in that array.','line_number':379,'multiline':False]
['text':' CACHE_IR_OPS items. Each item stores an opcode name and arguments length','line_number':431,'multiline':False]
['text':' expression. For example: _(GuardShape, 1 + 1)','line_number':432,'multiline':False]
['text':' Generated CacheIRWriter methods.','line_number':435,'multiline':False]
['text':' Generated CacheIRCompiler methods.','line_number':438,'multiline':False]
['text':' Generated WarpCacheIRTranspiler methods.','line_number':442,'multiline':False]
['text':' List of ops supported by WarpCacheIRTranspiler.','line_number':445,'multiline':False]
['text':' Generated methods for spewers.','line_number':448,'multiline':False]
['text':' Generated methods for cloning IC stubs','line_number':451,'multiline':False]
['text':' Unscored Ops default to UINT32_MAX','line_number':466,'multiline':False]
