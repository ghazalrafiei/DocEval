['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]
['text':' Examine the cycle in moves starting at position i. Determine if it's a','line_number':21,'multiline':False]
['text':' simple cycle consisting of all register-to-register moves in a single class,','line_number':22,'multiline':False]
['text':' and whether it can be implemented entirely by swaps.','line_number':23,'multiline':False]
['text':' If it isn't a cycle of registers of the same kind, we won't be able','line_number':32,'multiline':False]
['text':' to optimize it.','line_number':33,'multiline':False]
['text':' Stop iterating when we see the last one.','line_number':44,'multiline':False]
['text':' Check that this move is actually part of the cycle. This is','line_number':49,'multiline':False]
['text':' over-conservative when there are multiple reads from the same source,','line_number':50,'multiline':False]
['text':' but that's expected to be rare.','line_number':51,'multiline':False]
['text':' Check that the last move cycles back to the first move.','line_number':61,'multiline':False]
['text':' If we can emit optimized code for the cycle in moves starting at position i,','line_number':72,'multiline':False]
['text':' do so, and return true.','line_number':73,'multiline':False]
['text':' Use x86's swap-integer-registers instruction if we only have a few','line_number':79,'multiline':False]
['text':' swaps. (x86 also has a swap between registers and memory but it's','line_number':80,'multiline':False]
['text':' slow.)','line_number':81,'multiline':False]
['text':' There's no xchg for xmm registers, but if we only need a single swap,','line_number':90,'multiline':False]
['text':' it's cheap to do an XOR swap.','line_number':91,'multiline':False]
['text':' Clobber any scratch register we have, to make regalloc bugs more visible.','line_number':105,'multiline':False]
['text':' Characterize the cycle.','line_number':135,'multiline':False]
['text':' Attempt to optimize it to avoid using the stack.','line_number':140,'multiline':False]
['text':' Otherwise use the stack.','line_number':147,'multiline':False]
['text':' A normal move which is not part of a cycle.','line_number':152,'multiline':False]
['text':' Reserve stack for cycle resolution','line_number':179,'multiline':False]
['text':' Otherwise, the stack offset may need to be adjusted.','line_number':194,'multiline':False]
['text':' Warning, do not use the resulting operand with pop instructions, since they','line_number':199,'multiline':False]
['text':' compute the effective destination address after altering the stack pointer.','line_number':200,'multiline':False]
['text':' Use toPopOperand if an Operand is needed for a pop.','line_number':201,'multiline':False]
['text':' This is the same as toOperand except that it computes an Operand suitable for','line_number':214,'multiline':False]
['text':' use in a pop.','line_number':215,'multiline':False]
['text':' Otherwise, the stack offset may need to be adjusted.','line_number':224,'multiline':False]
['text':' Note the adjustment by the stack slot here, to offset for the fact that','line_number':225,'multiline':False]
['text':' pop computes its effective address after incrementing the stack pointer.','line_number':226,'multiline':False]
['text':' There is some pattern:','line_number':240,'multiline':False]
['text':'   (A -> B)','line_number':241,'multiline':False]
['text':'   (B -> A)','line_number':242,'multiline':False]
['text':'','line_number':243,'multiline':False]
['text':' This case handles (A -> B), which we reach first. We save B, then allow','line_number':244,'multiline':False]
['text':' the original move to continue.','line_number':245,'multiline':False]
['text':' x64 can't pop to a 32-bit destination, so don't push.','line_number':276,'multiline':False]
['text':' There is some pattern:','line_number':294,'multiline':False]
['text':'   (A -> B)','line_number':295,'multiline':False]
['text':'   (B -> A)','line_number':296,'multiline':False]
['text':'','line_number':297,'multiline':False]
['text':' This case handles (B -> A), which we reach last. We emit a move from the','line_number':298,'multiline':False]
['text':' saved value of B, to A.','line_number':299,'multiline':False]
['text':' x64 can't pop to a 32-bit destination.','line_number':338,'multiline':False]
['text':' Memory to memory gpr move.','line_number':365,'multiline':False]
['text':' No scratch register available; bounce it off the stack.','line_number':372,'multiline':False]
['text':' Memory to memory gpr move.','line_number':392,'multiline':False]
['text':' No scratch register available; bounce it off the stack.','line_number':398,'multiline':False]
['text':' Effective address to memory move.','line_number':403,'multiline':False]
['text':' This is tricky without a scratch reg. We can't do an lea. Bounce the','line_number':410,'multiline':False]
['text':' base register off the stack, then add the offset in place. Note that','line_number':411,'multiline':False]
['text':' this clobbers FLAGS!','line_number':412,'multiline':False]
['text':' Memory to memory move.','line_number':435,'multiline':False]
['text':' Memory to memory move.','line_number':457,'multiline':False]
['text':' Memory to memory move.','line_number':479,'multiline':False]
['text':' All registers are either in use by this move group or are live','line_number':502,'multiline':False]
['text':' afterwards. Look through the remaining moves for a register which is','line_number':503,'multiline':False]
['text':' clobbered before it is used, and is thus dead at this point.','line_number':504,'multiline':False]
