['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]
['text':' A Recover Value Allocation mirror what is known at compiled time as being the','line_number':27,'multiline':False]
['text':' MIRType and the LAllocation.  This is read out of the snapshot to recover the','line_number':28,'multiline':False]
['text':' value which would be there if this frame was an interpreter frame instead of','line_number':29,'multiline':False]
['text':' an Ion frame.','line_number':30,'multiline':False]
['text':'','line_number':31,'multiline':False]
['text':' It is used with the SnapshotIterator to recover a Value from the stack,','line_number':32,'multiline':False]
['text':' spilled registers or the list of constant of the compiled script.','line_number':33,'multiline':False]
['text':'','line_number':34,'multiline':False]
['text':' Unit tests are located in jsapi-tests/testJitRValueAlloc.cpp.','line_number':35,'multiline':False]
['text':' See RValueAllocation encoding in Snapshots.cpp','line_number':38,'multiline':False]
['text':' Recover instructions.','line_number':56,'multiline':False]
['text':' The JSValueType is packed in the Mode.','line_number':60,'multiline':False]
['text':' The JSValueType is packed in the Mode.','line_number':65,'multiline':False]
['text':' This mask can be used with any other valid mode. When this flag is','line_number':70,'multiline':False]
['text':' set on the mode, this inform the snapshot iterator that even if the','line_number':71,'multiline':False]
['text':' allocation is readable, the content of if might be incomplete unless','line_number':72,'multiline':False]
['text':' all side-effects are executed.','line_number':73,'multiline':False]
['text':' This mask represents the set of bits which can be used to encode a','line_number':76,'multiline':False]
['text':' value in a snapshot. The mode is used to determine how to interpret','line_number':77,'multiline':False]
['text':' the union of values and how to pack the value in memory.','line_number':78,'multiline':False]
['text':' See Payload encoding in Snapshots.cpp','line_number':86,'multiline':False]
['text':' Additional information to recover the content of the allocation.','line_number':105,'multiline':False]
['text':' DOUBLE_REG','line_number':192,'multiline':False]
['text':' ANY_FLOAT_REG or ANY_FLOAT_STACK','line_number':197,'multiline':False]
['text':' TYPED_REG or TYPED_STACK','line_number':205,'multiline':False]
['text':' UNTYPED','line_number':219,'multiline':False]
['text':' common constants.','line_number':254,'multiline':False]
['text':' CONSTANT's index','line_number':260,'multiline':False]
['text':' Recover instruction's index','line_number':265,'multiline':False]
['text':' Note, this equality compares the verbatim content of the payload,','line_number':333,'multiline':False]
['text':' which is made possible because we ensure that the payload content is','line_number':334,'multiline':False]
['text':' fully initialized during the creation.','line_number':335,'multiline':False]
['text':' Collects snapshots in a contiguous buffer, which is copied into IonScript','line_number':354,'multiline':False]
['text':' memory after code generation.','line_number':355,'multiline':False]
['text':' Map RValueAllocations to an offset in the allocWriter_ buffer.  This is','line_number':360,'multiline':False]
['text':' useful as value allocations are repeated frequently.','line_number':361,'multiline':False]
['text':' This is only used to assert sanity.','line_number':366,'multiline':False]
['text':' Used to report size of the snapshot in the spew messages.','line_number':369,'multiline':False]
['text':' A snapshot reader reads the entries out of the compressed snapshot buffer in','line_number':422,'multiline':False]
['text':' a script. These entries describe the equivalent interpreter frames at a given','line_number':423,'multiline':False]
['text':' position in JIT code. Each entry is an Ion's value allocations, used to','line_number':424,'multiline':False]
['text':' recover the corresponding Value from an Ion frame.','line_number':425,'multiline':False]
['text':' Number of slots that have been read.','line_number':432,'multiline':False]
['text':' Offset of the recover instructions.','line_number':433,'multiline':False]
['text':' This presumes all RInstructionStorage are safely void*-alignable.','line_number':469,'multiline':False]
['text':' RInstruction::readRecoverData asserts that no RInstruction subclass','line_number':470,'multiline':False]
['text':' has stricter alignment requirements than RInstructionStorage.','line_number':471,'multiline':False]
['text':' Making a copy of raw bytes holding a RInstruction instance would be a','line_number':482,'multiline':False]
['text':' strict aliasing violation: see bug 1269319 for an instance of bytewise','line_number':483,'multiline':False]
['text':' copying having caused crashes.','line_number':484,'multiline':False]
['text':' Number of encoded instructions.','line_number':494,'multiline':False]
['text':' Number of instruction read.','line_number':497,'multiline':False]
['text':' True if we need to resume after the Resume Point instruction of the','line_number':500,'multiline':False]
['text':' innermost frame.','line_number':501,'multiline':False]
['text':' Space is reserved as part of the RecoverReader to avoid allocations of','line_number':504,'multiline':False]
['text':' data which is needed to decode the current instruction.','line_number':505,'multiline':False]
['text':' namespace jit','line_number':533,'multiline':False]
['text':' namespace js','line_number':534,'multiline':False]
['text':' jit_Snapshot_h ','line_number':536,'multiline':True]
