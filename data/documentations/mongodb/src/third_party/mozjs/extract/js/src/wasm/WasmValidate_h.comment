['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 *
 * Copyright 2016 Mozilla Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ','line_number':1,'multiline':True]
['text':' ModuleEnvironment contains all the state necessary to process or render','line_number':33,'multiline':False]
['text':' functions, and all of the state necessary to validate all aspects of the','line_number':34,'multiline':False]
['text':' functions.','line_number':35,'multiline':False]
['text':'','line_number':36,'multiline':False]
['text':' A ModuleEnvironment is created by decoding all the sections before the wasm','line_number':37,'multiline':False]
['text':' code section and then used immutably during. When compiling a module using a','line_number':38,'multiline':False]
['text':' ModuleGenerator, the ModuleEnvironment holds state shared between the','line_number':39,'multiline':False]
['text':' ModuleGenerator thread and background compile threads. All the threads','line_number':40,'multiline':False]
['text':' are given a read-only view of the ModuleEnvironment, thus preventing race','line_number':41,'multiline':False]
['text':' conditions.','line_number':42,'multiline':False]
['text':' Constant parameters for the entire compilation:','line_number':45,'multiline':False]
['text':' Module fields decoded from the module environment (or initialized while','line_number':49,'multiline':False]
['text':' validating an asm.js module) and immutable during compilation:','line_number':50,'multiline':False]
['text':' Fields decoded as part of the wasm module tail:','line_number':71,'multiline':False]
['text':' Set the `Exported` flag, if not set.','line_number':116,'multiline':False]
['text':' Merge in the `Eager` and `CanRefFunc` flags, if they're set. Be sure','line_number':119,'multiline':False]
['text':' to not unset them if they've already been set.','line_number':120,'multiline':False]
['text':' ElemSegmentFlags provides methods for decoding and encoding the flags field','line_number':132,'multiline':False]
['text':' of an element segment. This is needed as the flags field has a non-trivial','line_number':133,'multiline':False]
['text':' encoding that is effectively split into independent `kind` and `payload`','line_number':134,'multiline':False]
['text':' enums.','line_number':135,'multiline':False]
['text':' Below this line are convenient combinations of flags','line_number':141,'multiline':False]
['text':' OpIter specialized for validation.','line_number':173,'multiline':False]
['text':' Shared subtyping function across validation.','line_number':195,'multiline':False]
['text':' The local entries are part of function bodies and thus serialized by both','line_number':201,'multiline':False]
['text':' wasm and asm.js and decoded as part of both validation and compilation.','line_number':202,'multiline':False]
['text':' This performs no validation; the local entries must already have been','line_number':206,'multiline':False]
['text':' validated by an earlier pass.','line_number':207,'multiline':False]
['text':' This validates the entries.','line_number':212,'multiline':False]
['text':' Returns whether the given [begin, end) prefix of a module's bytecode starts a','line_number':218,'multiline':False]
['text':' code section and, if so, returns the SectionRange of that code section.','line_number':219,'multiline':False]
['text':' Note that, even if this function returns 'false', [begin, end) may actually','line_number':220,'multiline':False]
['text':' be a valid module in the special case when there are no function defs and the','line_number':221,'multiline':False]
['text':' code section is not present. Such modules can be valid so the caller must','line_number':222,'multiline':False]
['text':' handle this special case.','line_number':223,'multiline':False]
['text':' Calling DecodeModuleEnvironment decodes all sections up to the code section','line_number':228,'multiline':False]
['text':' and performs full validation of all those sections. The client must then','line_number':229,'multiline':False]
['text':' decode the code section itself, reusing ValidateFunctionBody if necessary,','line_number':230,'multiline':False]
['text':' and finally call DecodeModuleTail to decode all remaining sections after the','line_number':231,'multiline':False]
['text':' code section (again, performing full validation).','line_number':232,'multiline':False]
['text':' Validate an entire module, returning true if the module was validated','line_number':242,'multiline':False]
['text':' successfully. If Validate returns false:','line_number':243,'multiline':False]
['text':'  - if *error is null, the caller should report out-of-memory','line_number':244,'multiline':False]
['text':'  - otherwise, there was a legitimate error described by *error','line_number':245,'multiline':False]
['text':' namespace wasm','line_number':250,'multiline':False]
['text':' namespace js','line_number':251,'multiline':False]
['text':' namespace wasm_validate_h','line_number':253,'multiline':False]
