['text':'**************************************************************************************************

  Zyan Disassembler Library (Zydis)

  Original Author : Florian Bernd

 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.

**************************************************************************************************','line_number':1,'multiline':True]
['text':'*
 * @file
 * @brief   Other utility functions.
 ','line_number':27,'multiline':True]
['text':' ============================================================================================== ','line_number':43,'multiline':True]
['text':' Macros                                                                                         ','line_number':44,'multiline':True]
['text':' ============================================================================================== ','line_number':45,'multiline':True]
['text':' ---------------------------------------------------------------------------------------------- ','line_number':47,'multiline':True]
['text':' Constants                                                                                      ','line_number':48,'multiline':True]
['text':' ---------------------------------------------------------------------------------------------- ','line_number':49,'multiline':True]
['text':' ---------------------------------------------------------------------------------------------- ','line_number':53,'multiline':True]
['text':' ============================================================================================== ','line_number':55,'multiline':True]
['text':' Enums and types                                                                                ','line_number':56,'multiline':True]
['text':' ============================================================================================== ','line_number':57,'multiline':True]
['text':'*
 * @brief   Defines the `ZydisInstructionSegment` struct.
 ','line_number':59,'multiline':True]
['text':'*
     * @brief   The legacy prefixes (including ignored `REX` prefixes).
     ','line_number':65,'multiline':True]
['text':'*
     * @brief   The effective `REX` prefix byte.
     ','line_number':69,'multiline':True]
['text':'*
     * @brief   The `XOP` prefix bytes.
     ','line_number':73,'multiline':True]
['text':'*
     * @brief   The `VEX` prefix bytes.
     ','line_number':77,'multiline':True]
['text':'*
     * @brief   The `EVEX` prefix bytes.
     ','line_number':81,'multiline':True]
['text':'*
     * @brief   The `MVEX` prefix bytes.
     ','line_number':85,'multiline':True]
['text':'*
     * @brief   The opcode bytes.
     ','line_number':89,'multiline':True]
['text':'*
     * @brief   The `ModRM` byte.
     ','line_number':93,'multiline':True]
['text':'*
     * @brief   The `SIB` byte.
     ','line_number':97,'multiline':True]
['text':'*
     * @brief   The displacement bytes.
     ','line_number':101,'multiline':True]
['text':'*
     * @brief   The immediate bytes.
     ','line_number':105,'multiline':True]
['text':'*
     * @brief   Maximum value of this enum.
     ','line_number':110,'multiline':True]
['text':'*
     * @brief   The minimum number of bits required to represent all values of this enum.
     ','line_number':114,'multiline':True]
['text':'*
 * @brief   Defines the `ZydisInstructionSegments` struct.
 ','line_number':120,'multiline':True]
['text':'*
     * @brief   The number of logical instruction segments.
     ','line_number':125,'multiline':True]
['text':'*
         * @brief   The type of the segment.
         ','line_number':131,'multiline':True]
['text':'*
         * @brief   The offset of the segment relative to the start of the instruction (in bytes).
         ','line_number':135,'multiline':True]
['text':'*
         * @brief   The size of the segment, in bytes.
         ','line_number':139,'multiline':True]
['text':' ============================================================================================== ','line_number':146,'multiline':True]
['text':' Exported functions                                                                             ','line_number':147,'multiline':True]
['text':' ============================================================================================== ','line_number':148,'multiline':True]
['text':'*
 * @addtogroup utils Utils
 * @brief Miscellaneous utility functions. Address translation and other helpers.
 * @{
 ','line_number':150,'multiline':True]
['text':' ---------------------------------------------------------------------------------------------- ','line_number':156,'multiline':True]
['text':' Address calculation                                                                            ','line_number':157,'multiline':True]
['text':' ---------------------------------------------------------------------------------------------- ','line_number':158,'multiline':True]
['text':' TODO: Provide a function that works in minimal-mode and does not require a operand parameter','line_number':160,'multiline':False]
['text':'*
 * @brief   Calculates the absolute address value for the given instruction operand.
 *
 * @param   instruction     A pointer to the `ZydisDecodedInstruction` struct.
 * @param   operand         A pointer to the `ZydisDecodedOperand` struct.
 * @param   runtime_address The runtime address of the instruction.
 * @param   result_address  A pointer to the memory that receives the absolute address.
 *
 * @return  A zyan status code.
 *
 * You should use this function in the following cases:
 * - `IMM` operands with relative address (e.g. `JMP`, `CALL`, ...)
 * - `MEM` operands with `RIP`/`EIP`-relative address (e.g. `MOV RAX, [RIP+0x12345678]`)
 * - `MEM` operands with absolute address (e.g. `MOV RAX, [0x12345678]`)
 *   - The displacement needs to get truncated and zero extended
 ','line_number':162,'multiline':True]
['text':'*
 * @brief   Calculates the absolute address value for the given instruction operand.
 *
 * @param   instruction         A pointer to the `ZydisDecodedInstruction` struct.
 * @param   operand             A pointer to the `ZydisDecodedOperand` struct.
 * @param   runtime_address     The runtime address of the instruction.
 * @param   register_context    A pointer to the `ZydisRegisterContext` struct.
 * @param   result_address      A pointer to the memory that receives the absolute target-address.
 *
 * @return  A zyan status code.
 *
 * This function behaves like `ZydisCalcAbsoluteAddress` but takes an additional register-context
 * argument to allow calculation of addresses depending on runtime register values.
 *
 * Note that `IP/EIP/RIP` from the register-context will be ignored in favor of the passed
 * runtime-address.
 ','line_number':181,'multiline':True]
['text':' ---------------------------------------------------------------------------------------------- ','line_number':202,'multiline':True]
['text':' Accessed CPU flags                                                                             ','line_number':203,'multiline':True]
['text':' ---------------------------------------------------------------------------------------------- ','line_number':204,'multiline':True]
['text':'*
 * @brief   Returns a mask of accessed CPU-flags matching the given `action`.
 *
 * @param   instruction A pointer to the `ZydisDecodedInstruction` struct.
 * @param   action      The CPU-flag action.
 * @param   flags       Receives the flag mask.
 *
 * @return  A zyan status code.
 ','line_number':206,'multiline':True]
['text':'*
 * @brief   Returns a mask of accessed CPU-flags that are read (tested) by the current instruction.
 *
 * @param   instruction A pointer to the `ZydisDecodedInstruction` struct.
 * @param   flags       Receives the flag mask.
 *
 * @return  A zyan status code.
 ','line_number':218,'multiline':True]
['text':'*
 * @brief   Returns a mask of accessed CPU-flags that are written (modified, undefined) by the
 *          current instruction.
 *
 * @param   instruction A pointer to the `ZydisDecodedInstruction` struct.
 * @param   flags       Receives the flag mask.
 *
 * @return  A zyan status code.
 ','line_number':229,'multiline':True]
['text':' ---------------------------------------------------------------------------------------------- ','line_number':241,'multiline':True]
['text':' Instruction segments                                                                           ','line_number':242,'multiline':True]
['text':' ---------------------------------------------------------------------------------------------- ','line_number':243,'multiline':True]
['text':'*
 * @brief   Returns offsets and sizes of all logical instruction segments (e.g. `OPCODE`,
 *          `MODRM`, ...).
 *
 * @param   instruction A pointer to the `ZydisDecodedInstruction` struct.
 * @param   segments    Receives the instruction segments information.
 *
 * @return  A zyan status code.
 ','line_number':245,'multiline':True]
['text':' ---------------------------------------------------------------------------------------------- ','line_number':257,'multiline':True]
['text':'*
 * @}
 ','line_number':259,'multiline':True]
['text':' ============================================================================================== ','line_number':263,'multiline':True]
['text':' ZYDIS_UTILS_H ','line_number':269,'multiline':True]
