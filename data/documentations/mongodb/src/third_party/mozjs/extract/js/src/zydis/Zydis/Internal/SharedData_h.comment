['text':'**************************************************************************************************

  Zyan Disassembler Library (Zydis)

  Original Author : Florian Bernd

 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.

**************************************************************************************************','line_number':1,'multiline':True]
['text':' ============================================================================================== ','line_number':40,'multiline':True]
['text':' Enums and types                                                                                ','line_number':41,'multiline':True]
['text':' ============================================================================================== ','line_number':42,'multiline':True]
['text':' MSVC does not like types other than (un-)signed int for bit-fields','line_number':44,'multiline':False]
['text':' ---------------------------------------------------------------------------------------------- ','line_number':52,'multiline':True]
['text':' Operand definition                                                                             ','line_number':53,'multiline':True]
['text':' ---------------------------------------------------------------------------------------------- ','line_number':54,'multiline':True]
['text':'*
 * @brief   Defines the `ZydisSemanticOperandType` enum.
 ','line_number':56,'multiline':True]
['text':'*
     * @brief   Maximum value of this enum.
     ','line_number':94,'multiline':True]
['text':'*
     * @brief   The minimum number of bits required to represent all values of this enum.
     ','line_number':98,'multiline':True]
['text':' ---------------------------------------------------------------------------------------------- ','line_number':104,'multiline':True]
['text':'*
 * @brief   Defines the `ZydisInternalElementType` enum.
 ','line_number':106,'multiline':True]
['text':'*
     * @brief   Maximum value of this enum.
     ','line_number':135,'multiline':True]
['text':'*
     * @brief   The minimum number of bits required to represent all values of this enum.
     ','line_number':139,'multiline':True]
['text':' ---------------------------------------------------------------------------------------------- ','line_number':145,'multiline':True]
['text':'*
 * @brief   Defines the `ZydisImplicitRegisterType` enum.
 ','line_number':147,'multiline':True]
['text':'*
     * @brief   Maximum value of this enum.
     ','line_number':160,'multiline':True]
['text':'*
     * @brief   The minimum number of bits required to represent all values of this enum.
     ','line_number':164,'multiline':True]
['text':' ---------------------------------------------------------------------------------------------- ','line_number':170,'multiline':True]
['text':'*
 * @brief   Defines the `ZydisImplicitMemBase` enum.
 ','line_number':172,'multiline':True]
['text':'*
     * @brief   Maximum value of this enum.
     ','line_number':187,'multiline':True]
['text':'*
     * @brief   The minimum number of bits required to represent all values of this enum.
     ','line_number':191,'multiline':True]
['text':' ---------------------------------------------------------------------------------------------- ','line_number':197,'multiline':True]
['text':' MSVC does not correctly execute the `pragma pack(1)` compiler-directive, if we use the correct','line_number':199,'multiline':False]
['text':' enum types','line_number':200,'multiline':False]
['text':'*
 * @brief   Defines the `ZydisOperandDefinition` struct.
 ','line_number':210,'multiline':True]
['text':' ---------------------------------------------------------------------------------------------- ','line_number':240,'multiline':True]
['text':' Instruction definition                                                                         ','line_number':241,'multiline':True]
['text':' ---------------------------------------------------------------------------------------------- ','line_number':242,'multiline':True]
['text':'*
 * @brief   Defines the `ZydisReadWriteAction` enum.
 ','line_number':244,'multiline':True]
['text':'*
     * @brief   Maximum value of this enum.
     ','line_number':254,'multiline':True]
['text':'*
     * @brief   The minimum number of bits required to represent all values of this enum.
     ','line_number':258,'multiline':True]
['text':' ---------------------------------------------------------------------------------------------- ','line_number':264,'multiline':True]
['text':'*
 * @brief   Defines the `ZydisRegisterConstraint` enum.
 ','line_number':266,'multiline':True]
['text':'*
     * @brief   Maximum value of this enum.
     ','line_number':282,'multiline':True]
['text':'*
     * @brief   The minimum number of bits required to represent all values of this enum.
     ','line_number':286,'multiline':True]
['text':' ---------------------------------------------------------------------------------------------- ','line_number':292,'multiline':True]
['text':'*
 * @brief   Defines the `ZydisInternalVectorLength` enum.
 ','line_number':294,'multiline':True]
['text':'*
     * @brief   Maximum value of this enum.
     ','line_number':304,'multiline':True]
['text':'*
     * @brief   The minimum number of bits required to represent all values of this enum.
     ','line_number':308,'multiline':True]
['text':' ---------------------------------------------------------------------------------------------- ','line_number':314,'multiline':True]
['text':'*
 * @brief   Defines the `ZydisInternalElementSize` enum.
 ','line_number':316,'multiline':True]
['text':'*
     * @brief   Maximum value of this enum.
     ','line_number':328,'multiline':True]
['text':'*
     * @brief   The minimum number of bits required to represent all values of this enum.
     ','line_number':332,'multiline':True]
['text':' ---------------------------------------------------------------------------------------------- ','line_number':338,'multiline':True]
['text':'*
 * @brief   Defines the `ZydisEVEXFunctionality` enum.
 ','line_number':340,'multiline':True]
['text':'*
     * @brief   `EVEX.b` enables broadcast functionality.
     ','line_number':346,'multiline':True]
['text':'*
     * @brief   `EVEX.b` enables embedded-rounding functionality.
     ','line_number':350,'multiline':True]
['text':'*
     * @brief   `EVEX.b` enables sae functionality.
     ','line_number':354,'multiline':True]
['text':'*
     * @brief   Maximum value of this enum.
     ','line_number':359,'multiline':True]
['text':'*
     * @brief   The minimum number of bits required to represent all values of this enum.
     ','line_number':363,'multiline':True]
['text':' ---------------------------------------------------------------------------------------------- ','line_number':369,'multiline':True]
['text':'*
 * @brief   Defines the `ZydisEVEXTupleType` enum.
 ','line_number':371,'multiline':True]
['text':'*
     * @brief   Full Vector
     ','line_number':377,'multiline':True]
['text':'*
     * @brief   Half Vector
     ','line_number':381,'multiline':True]
['text':'*
     * @brief   Full Vector Mem
     ','line_number':385,'multiline':True]
['text':'*
     * @brief   Tuple1 Scalar
     ','line_number':389,'multiline':True]
['text':'*
     * @brief   Tuple1 Fixed
     ','line_number':393,'multiline':True]
['text':'*
     * @brief   Tuple1 4x32
     ','line_number':397,'multiline':True]
['text':'*
     * @brief   Gather / Scatter
     ','line_number':401,'multiline':True]
['text':'*
     * @brief   Tuple2
     ','line_number':405,'multiline':True]
['text':'*
     * @brief   Tuple4
     ','line_number':409,'multiline':True]
['text':'*
     * @brief   Tuple8
     ','line_number':413,'multiline':True]
['text':'*
     * @brief   Half Mem
     ','line_number':417,'multiline':True]
['text':'*
     * @brief   QuarterMem
     ','line_number':421,'multiline':True]
['text':'*
     * @brief   OctMem
     ','line_number':425,'multiline':True]
['text':'*
     * @brief   Mem128
     ','line_number':429,'multiline':True]
['text':'*
     * @brief   MOVDDUP
     ','line_number':433,'multiline':True]
['text':'*
     * @brief   Maximum value of this enum.
     ','line_number':438,'multiline':True]
['text':'*
     * @brief   The minimum number of bits required to represent all values of this enum.
     ','line_number':442,'multiline':True]
['text':' ---------------------------------------------------------------------------------------------- ','line_number':448,'multiline':True]
['text':'*
 * @brief   Defines the `ZydisMVEXFunctionality` enum.
 ','line_number':450,'multiline':True]
['text':'*
     * @brief   The `MVEX.SSS` value is ignored.
     ','line_number':455,'multiline':True]
['text':'*
     * @brief   `MVEX.SSS` must be `000b`.
     ','line_number':459,'multiline':True]
['text':'*
     * @brief   `MVEX.SSS` controls embedded-rounding functionality.
     ','line_number':463,'multiline':True]
['text':'*
     * @brief   `MVEX.SSS` controls sae functionality.
     ','line_number':467,'multiline':True]
['text':'*
     * @brief   No special operation (32bit float elements).
     ','line_number':471,'multiline':True]
['text':'*
     * @brief   No special operation (32bit uint elements).
     ','line_number':475,'multiline':True]
['text':'*
     * @brief   No special operation (64bit float elements).
     ','line_number':479,'multiline':True]
['text':'*
     * @brief   No special operation (64bit uint elements).
     ','line_number':483,'multiline':True]
['text':'*
     * @brief   Sf32(reg) or Si32(reg).
     ','line_number':487,'multiline':True]
['text':'*
     * @brief   Sf64(reg) or Si64(reg).
     ','line_number':491,'multiline':True]
['text':'*
     * @brief   Sf32(mem).
     ','line_number':495,'multiline':True]
['text':'*
     * @brief   Sf32(mem) broadcast only.
     ','line_number':499,'multiline':True]
['text':'*
     * @brief   Sf32(mem) broadcast 4to16 only.
     ','line_number':503,'multiline':True]
['text':'*
     * @brief   Sf64(mem).
     ','line_number':507,'multiline':True]
['text':'*
     * @brief   Si32(mem).
     ','line_number':511,'multiline':True]
['text':'*
     * @brief   Si32(mem) broadcast only.
     ','line_number':515,'multiline':True]
['text':'*
     * @brief   Si32(mem) broadcast 4to16 only.
     ','line_number':519,'multiline':True]
['text':'*
     * @brief   Si64(mem).
     ','line_number':523,'multiline':True]
['text':'*
     * @brief   Uf32.
     ','line_number':527,'multiline':True]
['text':'*
     * @brief   Uf64.
     ','line_number':531,'multiline':True]
['text':'*
     * @brief   Ui32.
     ','line_number':535,'multiline':True]
['text':'*
     * @brief   Ui64.
     ','line_number':539,'multiline':True]
['text':'*
     * @brief   Df32.
     ','line_number':543,'multiline':True]
['text':'*
     * @brief   Df64.
     ','line_number':547,'multiline':True]
['text':'*
     * @brief   Di32.
     ','line_number':551,'multiline':True]
['text':'*
     * @brief   Di64.
     ','line_number':555,'multiline':True]
['text':'*
     * @brief   Maximum value of this enum.
     ','line_number':560,'multiline':True]
['text':'*
     * @brief   The minimum number of bits required to represent all values of this enum.
     ','line_number':564,'multiline':True]
['text':' ---------------------------------------------------------------------------------------------- ','line_number':570,'multiline':True]
['text':'*
 * @brief   Defines the `ZydisVEXStaticBroadcast` enum.
 ','line_number':572,'multiline':True]
['text':'*
     * @brief   Maximum value of this enum.
     ','line_number':585,'multiline':True]
['text':'*
     * @brief   The minimum number of bits required to represent all values of this enum.
     ','line_number':589,'multiline':True]
['text':' ---------------------------------------------------------------------------------------------- ','line_number':596,'multiline':True]
['text':'*
 * @brief   Defines the `ZydisEVEXStaticBroadcast` enum.
 ','line_number':598,'multiline':True]
['text':'*
     * @brief   Maximum value of this enum.
     ','line_number':617,'multiline':True]
['text':'*
     * @brief   The minimum number of bits required to represent all values of this enum.
     ','line_number':621,'multiline':True]
['text':' ---------------------------------------------------------------------------------------------- ','line_number':628,'multiline':True]
['text':'*
 * @brief   Defines the `ZydisMVEXStaticBroadcast` enum.
 ','line_number':630,'multiline':True]
['text':'*
     * @brief   Maximum value of this enum.
     ','line_number':641,'multiline':True]
['text':'*
     * @brief   The minimum number of bits required to represent all values of this enum.
     ','line_number':645,'multiline':True]
['text':' ---------------------------------------------------------------------------------------------- ','line_number':652,'multiline':True]
['text':'*
 * @brief   Defines the `ZydisMaskPolicy` enum.
 ','line_number':654,'multiline':True]
['text':'*
     * @brief   The instruction accepts mask-registers other than the default-mask (K0), but
     *          does not require them.
     ','line_number':660,'multiline':True]
['text':'*
     * @brief   The instruction requires a mask-register other than the default-mask (K0).
     ','line_number':665,'multiline':True]
['text':'*
     * @brief   The instruction does not allow a mask-register other than the default-mask (K0).
     ','line_number':669,'multiline':True]
['text':'*
     * @brief   Maximum value of this enum.
     ','line_number':674,'multiline':True]
['text':'*
     * @brief   The minimum number of bits required to represent all values of this enum.
     ','line_number':678,'multiline':True]
['text':' ---------------------------------------------------------------------------------------------- ','line_number':684,'multiline':True]
['text':'*
 * @brief   Defines the `ZydisMaskOverride` enum.
 ','line_number':686,'multiline':True]
['text':'*
     * @brief   Maximum value of this enum.
     ','line_number':695,'multiline':True]
['text':'*
     * @brief   The minimum number of bits required to represent all values of this enum.
     ','line_number':699,'multiline':True]
['text':' ---------------------------------------------------------------------------------------------- ','line_number':705,'multiline':True]
['text':' MSVC does not correctly execute the `pragma pack(1)` compiler-directive, if we use the correct','line_number':707,'multiline':False]
['text':' enum types','line_number':708,'multiline':False]
['text':'*
 * @brief   Defines the `ZydisInstructionDefinition` struct.
 ','line_number':755,'multiline':True]
['text':'*
 * @brief   Defines the `ZydisInstructionDefinitionLEGACY` struct.
 ','line_number':763,'multiline':True]
['text':'*
 * @brief   Defines the `ZydisInstructionDefinition3DNOW` struct.
 ','line_number':786,'multiline':True]
['text':'*
 * @brief   Defines the `ZydisInstructionDefinitionXOP` struct.
 ','line_number':794,'multiline':True]
['text':' MSVC does not correctly execute the `pragma pack(1)` compiler-directive, if we use the correct','line_number':802,'multiline':False]
['text':' enum types','line_number':803,'multiline':False]
['text':'*
 * @brief   Defines the `ZydisInstructionDefinitionVEX` struct.
 ','line_number':806,'multiline':True]
['text':' MSVC does not correctly execute the `pragma pack(1)` compiler-directive, if we use the correct','line_number':819,'multiline':False]
['text':' enum types','line_number':820,'multiline':False]
['text':'*
 * @brief   Defines the `ZydisInstructionDefinitionEVEX` struct.
 ','line_number':829,'multiline':True]
['text':' MSVC does not correctly execute the `pragma pack(1)` compiler-directive, if we use the correct','line_number':852,'multiline':False]
['text':' enum types','line_number':853,'multiline':False]
['text':'*
 * @brief   Defines the `ZydisInstructionDefinitionMVEX` struct.
 ','line_number':858,'multiline':True]
['text':' ---------------------------------------------------------------------------------------------- ','line_number':873,'multiline':True]
['text':' Accessed CPU flags                                                                             ','line_number':874,'multiline':True]
['text':' ---------------------------------------------------------------------------------------------- ','line_number':875,'multiline':True]
['text':' ---------------------------------------------------------------------------------------------- ','line_number':882,'multiline':True]
['text':' ============================================================================================== ','line_number':890,'multiline':True]
['text':' Functions                                                                                      ','line_number':891,'multiline':True]
['text':' ============================================================================================== ','line_number':892,'multiline':True]
['text':' ---------------------------------------------------------------------------------------------- ','line_number':894,'multiline':True]
['text':' Instruction definition                                                                         ','line_number':895,'multiline':True]
['text':' ---------------------------------------------------------------------------------------------- ','line_number':896,'multiline':True]
['text':'*
 * @brief   Returns the instruction-definition with the given `encoding` and `id`.
 *
 * @param   encoding    The instruction-encoding.
 * @param   id          The definition-id.
 * @param   definition  A pointer to the variable that receives a pointer to the instruction-
 *                      definition.
 ','line_number':898,'multiline':True]
['text':' ---------------------------------------------------------------------------------------------- ','line_number':909,'multiline':True]
['text':' Operand definition                                                                             ','line_number':910,'multiline':True]
['text':' ---------------------------------------------------------------------------------------------- ','line_number':911,'multiline':True]
['text':'*
 * @brief   Returns the the operand-definitions for the given instruction-`definition`.
 *
 * @param   definition  A pointer to the instruction-definition.
 * @param   operand     A pointer to the variable that receives a pointer to the first operand-
 *                      definition of the instruction.
 *
 * @return  The number of operands for the given instruction-definition.
 ','line_number':914,'multiline':True]
['text':' ---------------------------------------------------------------------------------------------- ','line_number':927,'multiline':True]
['text':' Element info                                                                                   ','line_number':928,'multiline':True]
['text':' ---------------------------------------------------------------------------------------------- ','line_number':929,'multiline':True]
['text':'*
 * @brief   Returns the actual type and size of an internal element-type.
 *
 * @param   element The internal element type.
 * @param   type    The actual element type.
 * @param   size    The element size.
 ','line_number':932,'multiline':True]
['text':' ---------------------------------------------------------------------------------------------- ','line_number':943,'multiline':True]
['text':' Accessed CPU flags                                                                             ','line_number':944,'multiline':True]
['text':' ---------------------------------------------------------------------------------------------- ','line_number':945,'multiline':True]
['text':'*
 * @brief   Returns the the operand-definitions for the given instruction-`definition`.
 *
 * @param   definition  A pointer to the instruction-definition.
 * @param   flags       A pointer to the variable that receives the `ZydisAccessedFlags` struct.
 *
 * @return  `ZYAN_TRUE`, if the instruction accesses any flags, or `ZYAN_FALSE`, if not.
 ','line_number':948,'multiline':True]
['text':' ---------------------------------------------------------------------------------------------- ','line_number':960,'multiline':True]
['text':' ============================================================================================== ','line_number':962,'multiline':True]
['text':' ZYDIS_INTERNAL_SHAREDDATA_H ','line_number':968,'multiline':True]
