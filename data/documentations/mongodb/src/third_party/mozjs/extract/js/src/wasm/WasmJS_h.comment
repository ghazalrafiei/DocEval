['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 *
 * Copyright 2016 Mozilla Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ','line_number':1,'multiline':True]
['text':' DefaultHasher','line_number':22,'multiline':False]
['text':' mozilla::Maybe','line_number':23,'multiline':False]
['text':' int32_t, int64_t, uint32_t','line_number':25,'multiline':False]
['text':' HeapPtr','line_number':27,'multiline':False]
['text':' ZoneAllocPolicy','line_number':28,'multiline':False]
['text':' SystemAllocPolicy','line_number':29,'multiline':False]
['text':' JSClassOps, ClassSpec','line_number':30,'multiline':False]
['text':' GCHashMap, GCHashSet','line_number':31,'multiline':False]
['text':' GCVector','line_number':32,'multiline':False]
['text':' JSPropertySpec, JSFunctionSpec','line_number':33,'multiline':False]
['text':' MovableCellHasher','line_number':34,'multiline':False]
['text':' JS::WeakCache','line_number':35,'multiline':False]
['text':' HandleValue, HandleObject, MutableHandleObject, MutableHandleFunction','line_number':36,'multiline':False]
['text':' JS::Vector','line_number':37,'multiline':False]
['text':' JSFunction','line_number':39,'multiline':False]
['text':' NativeObject','line_number':40,'multiline':False]
['text':' UniqueTlsData','line_number':41,'multiline':False]
['text':' MutableHandleWasmInstanceObject, wasm::*','line_number':42,'multiline':False]
['text':' WASM testing is completely disabled using the defined value below.','line_number':44,'multiline':False]
['text':' You need to change this value and re-compile the code-base to re-enable WASM testing.','line_number':45,'multiline':False]
['text':' namespace JS','line_number':62,'multiline':False]
['text':' Return whether WebAssembly can in principle be compiled on this platform (ie','line_number':78,'multiline':False]
['text':' combination of hardware and OS), assuming at least one of the compilers that','line_number':79,'multiline':False]
['text':' supports the platform is not disabled by other settings.','line_number':80,'multiline':False]
['text':'','line_number':81,'multiline':False]
['text':' This predicate must be checked and must be true to call any of the top-level','line_number':82,'multiline':False]
['text':' wasm eval/compile methods.','line_number':83,'multiline':False]
['text':' Return whether WebAssembly is supported on this platform. This determines','line_number':87,'multiline':False]
['text':' whether the WebAssembly object is exposed to JS in this context / realm and','line_number':88,'multiline':False]
['text':'','line_number':89,'multiline':False]
['text':' It does *not* guarantee that a compiler is actually available; that has to be','line_number':90,'multiline':False]
['text':' checked separately, as it is sometimes run-time variant, depending on whether','line_number':91,'multiline':False]
['text':' a debugger has been created or not.','line_number':92,'multiline':False]
['text':' Predicates for compiler availability.','line_number':96,'multiline':False]
['text':'','line_number':97,'multiline':False]
['text':' These three predicates together select zero or one baseline compiler and zero','line_number':98,'multiline':False]
['text':' or one optimizing compiler, based on: what's compiled into the executable,','line_number':99,'multiline':False]
['text':' what's supported on the current platform, what's selected by options, and the','line_number':100,'multiline':False]
['text':' current run-time environment.  As it is possible for the computed values to','line_number':101,'multiline':False]
['text':' change (when a value changes in about:config or the debugger pane is shown or','line_number':102,'multiline':False]
['text':' hidden), it is inadvisable to cache these values in such a way that they','line_number':103,'multiline':False]
['text':' could become invalid.  Generally it is cheap always to recompute them.','line_number':104,'multiline':False]
['text':' Test all three.','line_number':110,'multiline':False]
['text':' Asm.JS is translated to wasm and then compiled using the wasm optimizing','line_number':114,'multiline':False]
['text':' compiler; test whether this compiler is available.','line_number':115,'multiline':False]
['text':' Predicates for white-box compiler disablement testing.','line_number':119,'multiline':False]
['text':'','line_number':120,'multiline':False]
['text':' These predicates determine whether the optimizing compilers were disabled by','line_number':121,'multiline':False]
['text':' features that are enabled at compile-time or run-time.  They do not consider','line_number':122,'multiline':False]
['text':' the hardware platform on whether other compilers are enabled.','line_number':123,'multiline':False]
['text':'','line_number':124,'multiline':False]
['text':' If `reason` is not null then it is populated with a string that describes','line_number':125,'multiline':False]
['text':' the specific features that disable the compiler.','line_number':126,'multiline':False]
['text':'','line_number':127,'multiline':False]
['text':' Returns false on OOM (which happens only when a reason is requested),','line_number':128,'multiline':False]
['text':' otherwise true, with the result in `*isDisabled` and optionally the reason in','line_number':129,'multiline':False]
['text':' `*reason`.','line_number':130,'multiline':False]
['text':' Predicates for feature availability.','line_number':137,'multiline':False]
['text':'','line_number':138,'multiline':False]
['text':' The following predicates check whether particular wasm features are enabled,','line_number':139,'multiline':False]
['text':' and for each, whether at least one compiler is (currently) available that','line_number':140,'multiline':False]
['text':' supports the feature.','line_number':141,'multiline':False]
['text':' Streaming compilation.','line_number':143,'multiline':False]
['text':' Caching of optimized code.  Implies both streaming compilation and an','line_number':146,'multiline':False]
['text':' optimizing compiler tier.','line_number':147,'multiline':False]
['text':' Shared memory and atomics.','line_number':150,'multiline':False]
['text':' Very experimental SIMD operations.','line_number':157,'multiline':False]
['text':' Report the result of a Simd simplification to the testing infrastructure.','line_number':161,'multiline':False]
['text':' Returns true if WebAssembly as configured by compile-time flags and run-time','line_number':165,'multiline':False]
['text':' options can support try/catch, throw, rethrow, and branch_on_exn (evolving).','line_number':166,'multiline':False]
['text':' Compiles the given binary wasm module given the ArrayBufferObject','line_number':176,'multiline':False]
['text':' and links the module's imports with the given import object.','line_number':177,'multiline':False]
['text':' Extracts the various imports from the given import object into the given','line_number':183,'multiline':False]
['text':' ImportValues structure while checking the imports against the given module.','line_number':184,'multiline':False]
['text':' The resulting structure can be passed to WasmModule::instantiate.','line_number':185,'multiline':False]
['text':' For testing cross-process (de)serialization, this pair of functions are','line_number':191,'multiline':False]
['text':' responsible for, in the child process, compiling the given wasm bytecode','line_number':192,'multiline':False]
['text':' to a wasm::Module that is serialized into the given byte array, and, in','line_number':193,'multiline':False]
['text':' the parent process, deserializing the given byte array into a','line_number':194,'multiline':False]
['text':' WebAssembly.Module object.','line_number':195,'multiline':False]
['text':' A WebAssembly "Exported Function" is the spec name for the JS function','line_number':203,'multiline':False]
['text':' objects created to wrap wasm functions. This predicate returns false','line_number':204,'multiline':False]
['text':' for asm.js functions which are semantically just normal JS functions','line_number':205,'multiline':False]
['text':' (even if they are implemented via wasm under the hood). The accessor','line_number':206,'multiline':False]
['text':' functions for extracting the instance and func-index of a wasm function','line_number':207,'multiline':False]
['text':' can be used for both wasm and asm.js, however.','line_number':208,'multiline':False]
['text':' namespace wasm','line_number':218,'multiline':False]
['text':' The class of WebAssembly.Module. Each WasmModuleObject owns a','line_number':220,'multiline':False]
['text':' wasm::Module. These objects are used both as content-facing JS objects and as','line_number':221,'multiline':False]
['text':' internal implementation details of asm.js.','line_number':222,'multiline':False]
['text':' The class of WebAssembly.Global.  This wraps a storage location, and there is','line_number':247,'multiline':False]
['text':' a per-agent one-to-one relationship between the WasmGlobalObject and the','line_number':248,'multiline':False]
['text':' storage location (the Cell) it wraps: if a module re-exports an imported','line_number':249,'multiline':False]
['text':' global, the imported and exported WasmGlobalObjects are the same, and if a','line_number':250,'multiline':False]
['text':' module exports a global twice, the two exported WasmGlobalObjects are the','line_number':251,'multiline':False]
['text':' same.','line_number':252,'multiline':False]
['text':' TODO/AnyRef-boxing: With boxed immediates and strings, JSObject* is no longer','line_number':254,'multiline':False]
['text':' the most appropriate representation for Cell::anyref.','line_number':255,'multiline':False]
['text':' The class of WebAssembly.Instance. Each WasmInstanceObject owns a','line_number':293,'multiline':False]
['text':' wasm::Instance. These objects are used both as content-facing JS objects and','line_number':294,'multiline':False]
['text':' as internal implementation details of asm.js.','line_number':295,'multiline':False]
['text':' ExportMap maps from function index to exported function object.','line_number':313,'multiline':False]
['text':' This allows the instance to lazily create exported function','line_number':314,'multiline':False]
['text':' objects on demand (instead up-front for all table elements) while','line_number':315,'multiline':False]
['text':' correctly preserving observable function object identity.','line_number':316,'multiline':False]
['text':' See the definition inside WasmJS.cpp.','line_number':321,'multiline':False]
['text':' The class of WebAssembly.Memory. A WasmMemoryObject references an ArrayBuffer','line_number':369,'multiline':False]
['text':' or SharedArrayBuffer object which owns the actual memory.','line_number':370,'multiline':False]
['text':' `buffer()` returns the current buffer object always.  If the buffer','line_number':407,'multiline':False]
['text':' represents shared memory then `buffer().byteLength()` never changes, and','line_number':408,'multiline':False]
['text':' in particular it may be a smaller value than that returned from','line_number':409,'multiline':False]
['text':' `volatileMemoryLength()` below.','line_number':410,'multiline':False]
['text':'','line_number':411,'multiline':False]
['text':' Generally, you do not want to call `buffer().byteLength()`, but to call','line_number':412,'multiline':False]
['text':' `volatileMemoryLength()`, instead.','line_number':413,'multiline':False]
['text':' The current length of the memory in bytes. In the case of shared memory,','line_number':416,'multiline':False]
['text':' the length can change at any time.  Also note that this will acquire a lock','line_number':417,'multiline':False]
['text':' for shared memory, so do not call this from a signal handler.','line_number':418,'multiline':False]
['text':' The current length of the memory in pages. See the comment for','line_number':421,'multiline':False]
['text':' `volatileMemoryLength` for details on why this is 'volatile'.','line_number':422,'multiline':False]
['text':' The maximum length of the memory in pages. This is not 'volatile' in','line_number':425,'multiline':False]
['text':' contrast to the current length, as it cannot change for shared memories.','line_number':426,'multiline':False]
['text':' If isShared() is true then obtain the underlying buffer object.','line_number':434,'multiline':False]
['text':' The class of WebAssembly.Table. A WasmTableObject holds a refcount on a','line_number':442,'multiline':False]
['text':' wasm::Table, allowing a Table to be shared between multiple Instances','line_number':443,'multiline':False]
['text':' (eventually between multiple threads).','line_number':444,'multiline':False]
['text':' Note that, after creation, a WasmTableObject's table() is not initialized','line_number':473,'multiline':False]
['text':' and must be initialized before use.','line_number':474,'multiline':False]
['text':' Perform the standard `ToWebAssemblyValue` coercion on `value` and fill the','line_number':481,'multiline':False]
['text':' range [index, index + length) in the table. Callers are required to ensure','line_number':482,'multiline':False]
['text':' the range is within bounds. Returns false if the coercion failed.','line_number':483,'multiline':False]
['text':' The class of WebAssembly.Exception. This class is used to track exception','line_number':491,'multiline':False]
['text':' types for exports and imports.','line_number':492,'multiline':False]
['text':' The class of WebAssembly.RuntimeException. This class is used for','line_number':522,'multiline':False]
['text':' representing exceptions thrown from Wasm in JS. (it is also used as','line_number':523,'multiline':False]
['text':' the internal representation for exceptions in Wasm)','line_number':524,'multiline':False]
['text':' The class of the WebAssembly global namespace object.','line_number':563,'multiline':False]
['text':' namespace js','line_number':573,'multiline':False]
['text':' wasm_js_h','line_number':575,'multiline':False]
