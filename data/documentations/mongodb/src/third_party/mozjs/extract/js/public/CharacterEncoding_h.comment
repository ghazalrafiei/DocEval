['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]
['text':'
 * By default, all C/C++ 1-byte-per-character strings passed into the JSAPI
 * are treated as ISO/IEC 8859-1, also known as Latin-1. That is, each
 * byte is treated as a 2-byte character, and there is no way to pass in a
 * string containing characters beyond U+00FF.
 ','line_number':24,'multiline':True]
['text':'
 * Like Latin1Chars, but the chars are const.
 ','line_number':46,'multiline':True]
['text':'
 * A Latin1Chars, but with \0 termination for C compatibility.
 ','line_number':60,'multiline':True]
['text':' NOLINT','line_number':69,'multiline':False]
['text':'
 * SpiderMonkey also deals directly with UTF-8 encoded text in some places.
 ','line_number':103,'multiline':True]
['text':' NOLINT','line_number':112,'multiline':False]
['text':'
 * A wrapper for a "const char*" that is encoded using UTF-8.
 * This class does not manage ownership of the data; that is left
 * to others.  This differs from UTF8CharsZ in that the chars are
 * const and it disallows assignment.
 ','line_number':131,'multiline':True]
['text':'
 * SpiderMonkey uses a 2-byte character representation: it is a
 * 2-byte-at-a-time view of a UTF-16 byte stream. This is similar to UCS-2,
 * but unlike UCS-2, we do not strip UTF-16 extension bytes. This allows a
 * sufficiently dedicated JavaScript program to be fully unicode-aware by
 * manually interpreting UTF-16 extension characters embedded in the JS
 * string.
 ','line_number':164,'multiline':True]
['text':'
 * A TwoByteChars, but \0 terminated for compatibility with JSFlatString.
 ','line_number':184,'multiline':True]
['text':' NOLINT','line_number':193,'multiline':False]
['text':'
 * Like TwoByteChars, but the chars are const.
 ','line_number':204,'multiline':True]
['text':'
 * Convert a 2-byte character sequence to "ISO-Latin-1". This works by
 * truncating each 2-byte pair in the sequence to a 1-byte pair. If the source
 * contains any UTF-16 extension characters, then this may give invalid Latin1
 * output. The returned string is zero terminated. The returned string or the
 * returned string's |start()| must be freed with JS_free or js_free,
 * respectively. If allocation fails, an OOM error will be set and the method
 * will return a nullptr chars (which can be tested for with the ! operator).
 * This method cannot trigger GC.
 ','line_number':218,'multiline':True]
['text':'
 * Inflate bytes in UTF-8 encoding to char16_t.
 * - On error, returns an empty TwoByteCharsZ.
 * - On success, returns a malloc'd TwoByteCharsZ, and updates |outlen| to hold
 *   its length;  the length value excludes the trailing null.
 ','line_number':245,'multiline':True]
['text':'
 * Like UTF8CharsToNewTwoByteCharsZ, but for ConstUTF8CharsZ.
 ','line_number':255,'multiline':True]
['text':'
 * The same as UTF8CharsToNewTwoByteCharsZ(), except that any malformed UTF-8
 * characters will be replaced by \uFFFD. No exception will be thrown for
 * malformed UTF-8 input.
 ','line_number':262,'multiline':True]
['text':'
 * Returns the length of the char buffer required to encode |s| as UTF8.
 * Does not include the null-terminator.
 ','line_number':275,'multiline':True]
['text':'
 * Encode whole scalar values of |src| into |dst| as UTF-8 until |src| is
 * exhausted or too little space is available in |dst| to fit the scalar
 * value. Lone surrogates are converted to REPLACEMENT CHARACTER. Return
 * the number of bytes of |dst| that were filled.
 *
 * Use |JS_EncodeStringToUTF8BufferPartial| if your string isn't already
 * linear.
 *
 * Given |JSString* str = JS_FORGET_STRING_LINEARNESS(src)|,
 * if |JS::StringHasLatin1Chars(str)|, then |src| is always fully converted
 * if |dst.Length() >= JS_GetStringLength(str) * 2|. Otherwise |src| is
 * always fully converted if |dst.Length() >= JS_GetStringLength(str) * 3|.
 *
 * The exact space required is always |GetDeflatedUTF8StringLength(str)|.
 ','line_number':281,'multiline':True]
['text':'
 * The smallest character encoding capable of fully representing a particular
 * string.
 ','line_number':300,'multiline':True]
['text':'
 * Returns the smallest encoding possible for the given string: if all
 * codepoints are <128 then ASCII, otherwise if all codepoints are <256
 * Latin-1, else UTF16.
 ','line_number':306,'multiline':True]
['text':'
 * Return a null-terminated Latin-1 string copied from the input string,
 * storing its length (excluding null terminator) in |*outlen|.  Fail and
 * report an error if the string contains non-Latin-1 codepoints.  Returns
 * Latin1CharsZ() on failure.
 ','line_number':313,'multiline':True]
['text':'
 * Return a null-terminated Latin-1 string copied from the input string,
 * storing its length (excluding null terminator) in |*outlen|.  Non-Latin-1
 * codepoints are replaced by '?'.  Returns Latin1CharsZ() on failure.
 ','line_number':323,'multiline':True]
['text':'
 * Returns true if all characters in the given null-terminated string are
 * ASCII, i.e. < 0x80, false otherwise.
 ','line_number':332,'multiline':True]
['text':'
 * Returns true if all characters in the given span are ASCII,
 * i.e. < 0x80, false otherwise.
 ','line_number':338,'multiline':True]
['text':' namespace JS','line_number':344,'multiline':False]
['text':'*
 * DEPRECATED
 *
 * Allocate memory sufficient to contain the characters of |str| truncated to
 * Latin-1 and a trailing null terminator, fill the memory with the characters
 * interpreted in that manner plus the null terminator, and return a pointer to
 * the memory.
 *
 * This function *loses information* when it copies the characters of |str| if
 * |str| contains code units greater than 0xFF.  Additionally, users that
 * depend on null-termination will misinterpret the copied characters if |str|
 * contains any nulls.  Avoid using this function if possible, because it will
 * eventually be removed.
 ','line_number':349,'multiline':True]
['text':'*
 * DEPRECATED
 *
 * Same behavior as JS_EncodeStringToLatin1(), but encode into a UTF-8 string.
 *
 * This function *loses information* when it copies the characters of |str| if
 * |str| contains invalid UTF-16: U+FFFD REPLACEMENT CHARACTER will be copied
 * instead.
 *
 * The returned string is also subject to misinterpretation if |str| contains
 * any nulls (which are faithfully transcribed into the returned string, but
 * which will implicitly truncate the string if it's passed to functions that
 * expect null-terminated strings).
 *
 * Avoid using this function if possible, because we'll remove it once we can
 * devise a better API for the task.
 ','line_number':366,'multiline':True]
['text':'*
 * DEPRECATED
 *
 * Same behavior as JS_EncodeStringToLatin1(), but encode into an ASCII string.
 *
 * This function asserts in debug mode that the input string contains only
 * ASCII characters.
 *
 * The returned string is also subject to misinterpretation if |str| contains
 * any nulls (which are faithfully transcribed into the returned string, but
 * which will implicitly truncate the string if it's passed to functions that
 * expect null-terminated strings).
 *
 * Avoid using this function if possible, because we'll remove it once we can
 * devise a better API for the task.
 ','line_number':386,'multiline':True]
['text':' js_CharacterEncoding_h ','line_number':405,'multiline':True]
