['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]
['text':' MOZ_ASSERT','line_number':10,'multiline':False]
['text':' MOZ_STACK_CLASS','line_number':11,'multiline':False]
['text':' mozilla::Maybe','line_number':12,'multiline':False]
['text':' size_t','line_number':14,'multiline':False]
['text':' int32_t, uint32_t','line_number':15,'multiline':False]
['text':' BreakableControl','line_number':17,'multiline':False]
['text':' EmitterScope','line_number':18,'multiline':False]
['text':' JumpList, JumpTarget','line_number':19,'multiline':False]
['text':' TDZCheckCache','line_number':20,'multiline':False]
['text':' Handle','line_number':21,'multiline':False]
['text':' SystemAllocPolicy','line_number':22,'multiline':False]
['text':' JSVAL_INT_MAX, JSVAL_INT_MIN','line_number':23,'multiline':False]
['text':' Vector','line_number':24,'multiline':False]
['text':' LexicalScope','line_number':25,'multiline':False]
['text':' Class for emitting bytecode for switch-case-default block.','line_number':32,'multiline':False]
['text':'','line_number':33,'multiline':False]
['text':' Usage: (check for the return value is omitted for simplicity)','line_number':34,'multiline':False]
['text':'','line_number':35,'multiline':False]
['text':'   `switch (discriminant) { case c1_expr: c1_body; }`','line_number':36,'multiline':False]
['text':'     SwitchEmitter se(this);','line_number':37,'multiline':False]
['text':'     se.emitDiscriminant(Some(offset_of_switch));','line_number':38,'multiline':False]
['text':'     emit(discriminant);','line_number':39,'multiline':False]
['text':'','line_number':40,'multiline':False]
['text':'     se.validateCaseCount(1);','line_number':41,'multiline':False]
['text':'     se.emitCond();','line_number':42,'multiline':False]
['text':'','line_number':43,'multiline':False]
['text':'     se.prepareForCaseValue();','line_number':44,'multiline':False]
['text':'     emit(c1_expr);','line_number':45,'multiline':False]
['text':'     se.emitCaseJump();','line_number':46,'multiline':False]
['text':'','line_number':47,'multiline':False]
['text':'     se.emitCaseBody();','line_number':48,'multiline':False]
['text':'     emit(c1_body);','line_number':49,'multiline':False]
['text':'','line_number':50,'multiline':False]
['text':'     se.emitEnd();','line_number':51,'multiline':False]
['text':'','line_number':52,'multiline':False]
['text':'   `switch (discriminant) { case c1_expr: c1_body; case c2_expr: c2_body;','line_number':53,'multiline':False]
['text':'                            default: def_body; }`','line_number':54,'multiline':False]
['text':'     SwitchEmitter se(this);','line_number':55,'multiline':False]
['text':'     se.emitDiscriminant(Some(offset_of_switch));','line_number':56,'multiline':False]
['text':'     emit(discriminant);','line_number':57,'multiline':False]
['text':'','line_number':58,'multiline':False]
['text':'     se.validateCaseCount(2);','line_number':59,'multiline':False]
['text':'     se.emitCond();','line_number':60,'multiline':False]
['text':'','line_number':61,'multiline':False]
['text':'     se.prepareForCaseValue();','line_number':62,'multiline':False]
['text':'     emit(c1_expr);','line_number':63,'multiline':False]
['text':'     se.emitCaseJump();','line_number':64,'multiline':False]
['text':'','line_number':65,'multiline':False]
['text':'     se.prepareForCaseValue();','line_number':66,'multiline':False]
['text':'     emit(c2_expr);','line_number':67,'multiline':False]
['text':'     se.emitCaseJump();','line_number':68,'multiline':False]
['text':'','line_number':69,'multiline':False]
['text':'     se.emitCaseBody();','line_number':70,'multiline':False]
['text':'     emit(c1_body);','line_number':71,'multiline':False]
['text':'','line_number':72,'multiline':False]
['text':'     se.emitCaseBody();','line_number':73,'multiline':False]
['text':'     emit(c2_body);','line_number':74,'multiline':False]
['text':'','line_number':75,'multiline':False]
['text':'     se.emitDefaultBody();','line_number':76,'multiline':False]
['text':'     emit(def_body);','line_number':77,'multiline':False]
['text':'','line_number':78,'multiline':False]
['text':'     se.emitEnd();','line_number':79,'multiline':False]
['text':'','line_number':80,'multiline':False]
['text':'   `switch (discriminant) { case c1_expr: c1_body; case c2_expr: c2_body; }`','line_number':81,'multiline':False]
['text':'   with Table Switch','line_number':82,'multiline':False]
['text':'     SwitchEmitter::TableGenerator tableGen(this);','line_number':83,'multiline':False]
['text':'     tableGen.addNumber(c1_expr_value);','line_number':84,'multiline':False]
['text':'     tableGen.addNumber(c2_expr_value);','line_number':85,'multiline':False]
['text':'     tableGen.finish(2);','line_number':86,'multiline':False]
['text':'','line_number':87,'multiline':False]
['text':'     // If `!tableGen.isValid()` here, `emitCond` should be used instead.','line_number':88,'multiline':False]
['text':'','line_number':89,'multiline':False]
['text':'     SwitchEmitter se(this);','line_number':90,'multiline':False]
['text':'     se.emitDiscriminant(Some(offset_of_switch));','line_number':91,'multiline':False]
['text':'     emit(discriminant);','line_number':92,'multiline':False]
['text':'     se.validateCaseCount(2);','line_number':93,'multiline':False]
['text':'     se.emitTable(tableGen);','line_number':94,'multiline':False]
['text':'','line_number':95,'multiline':False]
['text':'     se.emitCaseBody(c1_expr_value, tableGen);','line_number':96,'multiline':False]
['text':'     emit(c1_body);','line_number':97,'multiline':False]
['text':'','line_number':98,'multiline':False]
['text':'     se.emitCaseBody(c2_expr_value, tableGen);','line_number':99,'multiline':False]
['text':'     emit(c2_body);','line_number':100,'multiline':False]
['text':'','line_number':101,'multiline':False]
['text':'     se.emitEnd();','line_number':102,'multiline':False]
['text':'','line_number':103,'multiline':False]
['text':'   `switch (discriminant) { case c1_expr: c1_body; case c2_expr: c2_body;','line_number':104,'multiline':False]
['text':'                            default: def_body; }`','line_number':105,'multiline':False]
['text':'   with Table Switch','line_number':106,'multiline':False]
['text':'     SwitchEmitter::TableGenerator tableGen(bce);','line_number':107,'multiline':False]
['text':'     tableGen.addNumber(c1_expr_value);','line_number':108,'multiline':False]
['text':'     tableGen.addNumber(c2_expr_value);','line_number':109,'multiline':False]
['text':'     tableGen.finish(2);','line_number':110,'multiline':False]
['text':'','line_number':111,'multiline':False]
['text':'     // If `!tableGen.isValid()` here, `emitCond` should be used instead.','line_number':112,'multiline':False]
['text':'','line_number':113,'multiline':False]
['text':'     SwitchEmitter se(this);','line_number':114,'multiline':False]
['text':'     se.emitDiscriminant(Some(offset_of_switch));','line_number':115,'multiline':False]
['text':'     emit(discriminant);','line_number':116,'multiline':False]
['text':'     se.validateCaseCount(2);','line_number':117,'multiline':False]
['text':'     se.emitTable(tableGen);','line_number':118,'multiline':False]
['text':'','line_number':119,'multiline':False]
['text':'     se.emitCaseBody(c1_expr_value, tableGen);','line_number':120,'multiline':False]
['text':'     emit(c1_body);','line_number':121,'multiline':False]
['text':'','line_number':122,'multiline':False]
['text':'     se.emitCaseBody(c2_expr_value, tableGen);','line_number':123,'multiline':False]
['text':'     emit(c2_body);','line_number':124,'multiline':False]
['text':'','line_number':125,'multiline':False]
['text':'     se.emitDefaultBody();','line_number':126,'multiline':False]
['text':'     emit(def_body);','line_number':127,'multiline':False]
['text':'','line_number':128,'multiline':False]
['text':'     se.emitEnd();','line_number':129,'multiline':False]
['text':'','line_number':130,'multiline':False]
['text':'   `switch (discriminant) { case c1_expr: c1_body; }`','line_number':131,'multiline':False]
['text':'   in case c1_body contains lexical bindings','line_number':132,'multiline':False]
['text':'     SwitchEmitter se(this);','line_number':133,'multiline':False]
['text':'     se.emitDiscriminant(Some(offset_of_switch));','line_number':134,'multiline':False]
['text':'     emit(discriminant);','line_number':135,'multiline':False]
['text':'','line_number':136,'multiline':False]
['text':'     se.validateCaseCount(1);','line_number':137,'multiline':False]
['text':'','line_number':138,'multiline':False]
['text':'     se.emitLexical(bindings);','line_number':139,'multiline':False]
['text':'','line_number':140,'multiline':False]
['text':'     se.emitCond();','line_number':141,'multiline':False]
['text':'','line_number':142,'multiline':False]
['text':'     se.prepareForCaseValue();','line_number':143,'multiline':False]
['text':'     emit(c1_expr);','line_number':144,'multiline':False]
['text':'     se.emitCaseJump();','line_number':145,'multiline':False]
['text':'','line_number':146,'multiline':False]
['text':'     se.emitCaseBody();','line_number':147,'multiline':False]
['text':'     emit(c1_body);','line_number':148,'multiline':False]
['text':'','line_number':149,'multiline':False]
['text':'     se.emitEnd();','line_number':150,'multiline':False]
['text':'','line_number':151,'multiline':False]
['text':'   `switch (discriminant) { case c1_expr: c1_body; }`','line_number':152,'multiline':False]
['text':'   in case c1_body contains hosted functions','line_number':153,'multiline':False]
['text':'     SwitchEmitter se(this);','line_number':154,'multiline':False]
['text':'     se.emitDiscriminant(Some(offset_of_switch));','line_number':155,'multiline':False]
['text':'     emit(discriminant);','line_number':156,'multiline':False]
['text':'','line_number':157,'multiline':False]
['text':'     se.validateCaseCount(1);','line_number':158,'multiline':False]
['text':'','line_number':159,'multiline':False]
['text':'     se.emitLexical(bindings);','line_number':160,'multiline':False]
['text':'     emit(hosted functions);','line_number':161,'multiline':False]
['text':'','line_number':162,'multiline':False]
['text':'     se.emitCond();','line_number':163,'multiline':False]
['text':'','line_number':164,'multiline':False]
['text':'     se.prepareForCaseValue();','line_number':165,'multiline':False]
['text':'     emit(c1_expr);','line_number':166,'multiline':False]
['text':'     se.emitCaseJump();','line_number':167,'multiline':False]
['text':'','line_number':168,'multiline':False]
['text':'     se.emitCaseBody();','line_number':169,'multiline':False]
['text':'     emit(c1_body);','line_number':170,'multiline':False]
['text':'','line_number':171,'multiline':False]
['text':'     se.emitEnd();','line_number':172,'multiline':False]
['text':'','line_number':173,'multiline':False]
['text':' Bytecode for each case.','line_number':175,'multiline':False]
['text':'','line_number':176,'multiline':False]
['text':' Cond Switch (uses an equality comparison for each case)','line_number':177,'multiline':False]
['text':'     {discriminant}','line_number':178,'multiline':False]
['text':'','line_number':179,'multiline':False]
['text':'     {c1_expr}','line_number':180,'multiline':False]
['text':'     JSOp::Case c1','line_number':181,'multiline':False]
['text':'','line_number':182,'multiline':False]
['text':'     JSOp::JumpTarget','line_number':183,'multiline':False]
['text':'     {c2_expr}','line_number':184,'multiline':False]
['text':'     JSOp::Case c2','line_number':185,'multiline':False]
['text':'','line_number':186,'multiline':False]
['text':'     ...','line_number':187,'multiline':False]
['text':'','line_number':188,'multiline':False]
['text':'     JSOp::JumpTarget','line_number':189,'multiline':False]
['text':'     JSOp::Default default','line_number':190,'multiline':False]
['text':'','line_number':191,'multiline':False]
['text':'   c1:','line_number':192,'multiline':False]
['text':'     JSOp::JumpTarget','line_number':193,'multiline':False]
['text':'     {c1_body}','line_number':194,'multiline':False]
['text':'     JSOp::Goto end','line_number':195,'multiline':False]
['text':'','line_number':196,'multiline':False]
['text':'   c2:','line_number':197,'multiline':False]
['text':'     JSOp::JumpTarget','line_number':198,'multiline':False]
['text':'     {c2_body}','line_number':199,'multiline':False]
['text':'     JSOp::Goto end','line_number':200,'multiline':False]
['text':'','line_number':201,'multiline':False]
['text':'   default:','line_number':202,'multiline':False]
['text':'   end:','line_number':203,'multiline':False]
['text':'     JSOp::JumpTarget','line_number':204,'multiline':False]
['text':'','line_number':205,'multiline':False]
['text':' Table Switch','line_number':206,'multiline':False]
['text':'     {discriminant}','line_number':207,'multiline':False]
['text':'     JSOp::TableSwitch c1, c2, ...','line_number':208,'multiline':False]
['text':'','line_number':209,'multiline':False]
['text':'   c1:','line_number':210,'multiline':False]
['text':'     JSOp::JumpTarget','line_number':211,'multiline':False]
['text':'     {c1_body}','line_number':212,'multiline':False]
['text':'     JSOp::Goto end','line_number':213,'multiline':False]
['text':'','line_number':214,'multiline':False]
['text':'   c2:','line_number':215,'multiline':False]
['text':'     JSOp::JumpTarget','line_number':216,'multiline':False]
['text':'     {c2_body}','line_number':217,'multiline':False]
['text':'     JSOp::Goto end','line_number':218,'multiline':False]
['text':'','line_number':219,'multiline':False]
['text':'   ...','line_number':220,'multiline':False]
['text':'','line_number':221,'multiline':False]
['text':'   end:','line_number':222,'multiline':False]
['text':'     JSOp::JumpTarget','line_number':223,'multiline':False]
['text':' Class for generating optimized table switch data.','line_number':228,'multiline':False]
['text':' Bit array for given numbers.','line_number':232,'multiline':False]
['text':' The length of the intmap_.','line_number':235,'multiline':False]
['text':' The length of the table.','line_number':238,'multiline':False]
['text':' The lower and higher bounds of the table.','line_number':241,'multiline':False]
['text':' Whether the table is still valid.','line_number':244,'multiline':False]
['text':' Add the given number to the table.  The number is the value of','line_number':258,'multiline':False]
['text':' `expr` for `case expr:` syntax.','line_number':259,'multiline':False]
['text':' Finish generating the table.','line_number':262,'multiline':False]
['text':' `caseCount` should be the number of cases in the switch statement,','line_number':263,'multiline':False]
['text':' excluding the default case.','line_number':264,'multiline':False]
['text':' The following methods can be used only after calling `finish`.','line_number':270,'multiline':False]
['text':' Returns the lower bound of the added numbers.','line_number':272,'multiline':False]
['text':' Returns the higher bound of the numbers.','line_number':278,'multiline':False]
['text':' Returns the index in SwitchEmitter.caseOffsets_ for table switch.','line_number':284,'multiline':False]
['text':' Returns the length of the table.','line_number':287,'multiline':False]
['text':' This method can be called only if `isValid()` is true.','line_number':288,'multiline':False]
['text':' `kind_` should be set to the correct value in emitCond/emitTable.','line_number':295,'multiline':False]
['text':' True if there's explicit default case.','line_number':298,'multiline':False]
['text':' The number of cases in the switch statement, excluding the default case.','line_number':301,'multiline':False]
['text':' Internal index for case jump and case body, used by cond switch.','line_number':304,'multiline':False]
['text':' Bytecode offset after emitting `discriminant`.','line_number':307,'multiline':False]
['text':' Bytecode offset of the previous JSOp::Case.','line_number':310,'multiline':False]
['text':' Bytecode offset of the JSOp::JumpTarget for default body.','line_number':313,'multiline':False]
['text':' Bytecode offset of the JSOp::Default.','line_number':316,'multiline':False]
['text':' Instantiated when there's lexical scope for entire switch.','line_number':319,'multiline':False]
['text':' Instantiated while emitting case expression and case/default body.','line_number':323,'multiline':False]
['text':' Control for switch.','line_number':326,'multiline':False]
['text':' Cond Switch:','line_number':331,'multiline':False]
['text':'   Offset of each JSOp::Case.','line_number':332,'multiline':False]
['text':' Table Switch:','line_number':333,'multiline':False]
['text':'   Offset of each JSOp::JumpTarget for case.','line_number':334,'multiline':False]
['text':' The state of this emitter.','line_number':337,'multiline':False]
['text':'','line_number':338,'multiline':False]
['text':' +-------+ emitDiscriminant +--------------+','line_number':339,'multiline':False]
['text':' | Start |----------------->| Discriminant |-+','line_number':340,'multiline':False]
['text':' +-------+                  +--------------+ |','line_number':341,'multiline':False]
['text':'                                             |','line_number':342,'multiline':False]
['text':' +-------------------------------------------+','line_number':343,'multiline':False]
['text':' |','line_number':344,'multiline':False]
['text':' |                              validateCaseCount +-----------+','line_number':345,'multiline':False]
['text':' +->+------------------------>+------------------>| CaseCount |-+','line_number':346,'multiline':False]
['text':'    |                         ^                   +-----------+ |','line_number':347,'multiline':False]
['text':'    | emitLexical +---------+ |                                 |','line_number':348,'multiline':False]
['text':'    +------------>| Lexical |-+                                 |','line_number':349,'multiline':False]
['text':'                  +---------+                                   |','line_number':350,'multiline':False]
['text':'                                                                |','line_number':351,'multiline':False]
['text':' +--------------------------------------------------------------+','line_number':352,'multiline':False]
['text':' |','line_number':353,'multiline':False]
['text':' | emitTable +-------+','line_number':354,'multiline':False]
['text':' +---------->| Table |----------------------------------->+-+','line_number':355,'multiline':False]
['text':' |           +-------+                                    ^ |','line_number':356,'multiline':False]
['text':' |                                                        | |','line_number':357,'multiline':False]
['text':' | emitCond  +------+                                     | |','line_number':358,'multiline':False]
['text':' +---------->| Cond |-+------------------------------->+->+ |','line_number':359,'multiline':False]
['text':'             +------+ |                                ^    |','line_number':360,'multiline':False]
['text':'                      |                                |    |','line_number':361,'multiline':False]
['text':'   +------------------+                                |    |','line_number':362,'multiline':False]
['text':'   |                                                   |    |','line_number':363,'multiline':False]
['text':'   |prepareForCaseValue  +-----------+                 |    |','line_number':364,'multiline':False]
['text':'   +----------+--------->| CaseValue |                 |    |','line_number':365,'multiline':False]
['text':'              ^          +-----------+                 |    |','line_number':366,'multiline':False]
['text':'              |             |                          |    |','line_number':367,'multiline':False]
['text':'              |             | emitCaseJump +------+    |    |','line_number':368,'multiline':False]
['text':'              |             +------------->| Case |->+-+    |','line_number':369,'multiline':False]
['text':'              |                            +------+  |      |','line_number':370,'multiline':False]
['text':'              |                                      |      |','line_number':371,'multiline':False]
['text':'              +--------------------------------------+      |','line_number':372,'multiline':False]
['text':'                                                            |','line_number':373,'multiline':False]
['text':' +----------------------------------------------------------+','line_number':374,'multiline':False]
['text':' |','line_number':375,'multiline':False]
['text':' |                                              emitEnd +-----+','line_number':376,'multiline':False]
['text':' +-+----------------------------------------->+-------->| End |','line_number':377,'multiline':False]
['text':'   |                                          ^         +-----+','line_number':378,'multiline':False]
['text':'   |      emitCaseBody    +----------+        |','line_number':379,'multiline':False]
['text':'   +->+-+---------------->| CaseBody |--->+-+-+','line_number':380,'multiline':False]
['text':'      ^ |                 +----------+    ^ |','line_number':381,'multiline':False]
['text':'      | |                                 | |','line_number':382,'multiline':False]
['text':'      | | emitDefaultBody +-------------+ | |','line_number':383,'multiline':False]
['text':'      | +---------------->| DefaultBody |-+ |','line_number':384,'multiline':False]
['text':'      |                   +-------------+   |','line_number':385,'multiline':False]
['text':'      |                                     |','line_number':386,'multiline':False]
['text':'      +-------------------------------------+','line_number':387,'multiline':False]
['text':'','line_number':388,'multiline':False]
['text':' The initial state.','line_number':390,'multiline':False]
['text':' After calling emitDiscriminant.','line_number':393,'multiline':False]
['text':' After calling validateCaseCount.','line_number':396,'multiline':False]
['text':' After calling emitLexical.','line_number':399,'multiline':False]
['text':' After calling emitCond.','line_number':402,'multiline':False]
['text':' After calling emitTable.','line_number':405,'multiline':False]
['text':' After calling prepareForCaseValue.','line_number':408,'multiline':False]
['text':' After calling emitCaseJump.','line_number':411,'multiline':False]
['text':' After calling emitCaseBody.','line_number':414,'multiline':False]
['text':' After calling emitDefaultBody.','line_number':417,'multiline':False]
['text':' After calling emitEnd.','line_number':420,'multiline':False]
['text':' `switchPos` is the offset in the source code for the character below:','line_number':428,'multiline':False]
['text':'','line_number':429,'multiline':False]
['text':'   switch ( cond ) { ... }','line_number':430,'multiline':False]
['text':'   ^','line_number':431,'multiline':False]
['text':'   |','line_number':432,'multiline':False]
['text':'   switchPos','line_number':433,'multiline':False]
['text':'','line_number':434,'multiline':False]
['text':' Can be Nothing() if not available.','line_number':435,'multiline':False]
['text':' `caseCount` should be the number of cases in the switch statement,','line_number':439,'multiline':False]
['text':' excluding the default case.','line_number':440,'multiline':False]
['text':' `bindings` is a lexical scope for the entire switch, in case there's','line_number':443,'multiline':False]
['text':' let/const effectively directly under case or default blocks.','line_number':444,'multiline':False]
['text':' namespace frontend ','line_number':464,'multiline':True]
['text':' namespace js ','line_number':465,'multiline':True]
['text':' frontend_SwitchEmitter_h ','line_number':467,'multiline':True]
