['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]
['text':' [SMDOC] JIT-to-C++ Function Calls. (callVM)','line_number':63,'multiline':False]
['text':'','line_number':64,'multiline':False]
['text':' Sometimes it is easier to reuse C++ code by calling VM's functions. Calling a','line_number':65,'multiline':False]
['text':' function from the VM can be achieved with the use of callWithABI but this is','line_number':66,'multiline':False]
['text':' discouraged when the called functions might trigger exceptions and/or','line_number':67,'multiline':False]
['text':' garbage collections which are expecting to walk the stack. VMFunctions and','line_number':68,'multiline':False]
['text':' callVM are interfaces provided to handle the exception handling and register','line_number':69,'multiline':False]
['text':' the stack end (JITActivation) such that walking the stack is made possible.','line_number':70,'multiline':False]
['text':'','line_number':71,'multiline':False]
['text':' VMFunctionData is a structure which contains the necessary information needed','line_number':72,'multiline':False]
['text':' for generating a trampoline function to make a call (with generateVMWrapper)','line_number':73,'multiline':False]
['text':' and to root the arguments of the function (in TraceJitExitFrame).','line_number':74,'multiline':False]
['text':' VMFunctionData is created with the VMFunctionDataHelper template, which','line_number':75,'multiline':False]
['text':' infers the VMFunctionData fields from the function signature. The rooting and','line_number':76,'multiline':False]
['text':' trampoline code is therefore determined by the arguments of a function and','line_number':77,'multiline':False]
['text':' their locations in the signature of a function.','line_number':78,'multiline':False]
['text':'','line_number':79,'multiline':False]
['text':' VM functions all expect a JSContext* as first argument. This argument is','line_number':80,'multiline':False]
['text':' implicitly provided by the trampoline code (in generateVMWrapper) and used','line_number':81,'multiline':False]
['text':' for creating new objects or reporting errors. If your function does not make','line_number':82,'multiline':False]
['text':' use of a JSContext* argument, then you might probably use a callWithABI','line_number':83,'multiline':False]
['text':' call.','line_number':84,'multiline':False]
['text':'','line_number':85,'multiline':False]
['text':' Functions described using the VMFunction system must conform to a simple','line_number':86,'multiline':False]
['text':' protocol: the return type must have a special "failure" value (for example,','line_number':87,'multiline':False]
['text':' false for bool, or nullptr for Objects). If the function is designed to','line_number':88,'multiline':False]
['text':' return a value that does not meet this requirement - such as','line_number':89,'multiline':False]
['text':' object-or-nullptr, or an integer, an optional, final outParam can be','line_number':90,'multiline':False]
['text':' specified. In this case, the return type must be boolean to indicate','line_number':91,'multiline':False]
['text':' failure.','line_number':92,'multiline':False]
['text':'','line_number':93,'multiline':False]
['text':' JIT Code usage:','line_number':94,'multiline':False]
['text':'','line_number':95,'multiline':False]
['text':' Different JIT compilers in SpiderMonkey have their own implementations of','line_number':96,'multiline':False]
['text':' callVM to call VM functions. However, the general shape of them is that','line_number':97,'multiline':False]
['text':' arguments (excluding the JSContext or trailing out-param) are pushed on to','line_number':98,'multiline':False]
['text':' the stack from right to left (rightmost argument is pushed first).','line_number':99,'multiline':False]
['text':'','line_number':100,'multiline':False]
['text':' Regardless of return value protocol being used (final outParam, or return','line_number':101,'multiline':False]
['text':' value) the generated trampolines ensure the return value ends up in','line_number':102,'multiline':False]
['text':' JSReturnOperand, ReturnReg or ReturnDoubleReg.','line_number':103,'multiline':False]
['text':'','line_number':104,'multiline':False]
['text':' Example:','line_number':105,'multiline':False]
['text':'','line_number':106,'multiline':False]
['text':' The details will differ slightly between the different compilers in','line_number':107,'multiline':False]
['text':' SpiderMonkey, but the general shape of our usage looks like this:','line_number':108,'multiline':False]
['text':'','line_number':109,'multiline':False]
['text':' Suppose we have a function Foo:','line_number':110,'multiline':False]
['text':'','line_number':111,'multiline':False]
['text':'      bool Foo(JSContext* cx, HandleObject x, HandleId y,','line_number':112,'multiline':False]
['text':'               MutableHandleValue z);','line_number':113,'multiline':False]
['text':'','line_number':114,'multiline':False]
['text':' This function returns true on success, and z is the outparam return value.','line_number':115,'multiline':False]
['text':'','line_number':116,'multiline':False]
['text':' A VM function wrapper for this can be created by adding an entry to','line_number':117,'multiline':False]
['text':' VM_FUNCTION_LIST in VMFunctionList-inl.h:','line_number':118,'multiline':False]
['text':'','line_number':119,'multiline':False]
['text':'    _(Foo, js::Foo)','line_number':120,'multiline':False]
['text':'','line_number':121,'multiline':False]
['text':' In the compiler code the call would then be issued like this:','line_number':122,'multiline':False]
['text':'','line_number':123,'multiline':False]
['text':'      masm.Push(id);','line_number':124,'multiline':False]
['text':'      masm.Push(obj);','line_number':125,'multiline':False]
['text':'','line_number':126,'multiline':False]
['text':'      using Fn = bool (*)(JSContext*, HandleObject, HandleId,','line_number':127,'multiline':False]
['text':'                          MutableHandleValue);','line_number':128,'multiline':False]
['text':'      if (!callVM<Fn, js::Foo>()) {','line_number':129,'multiline':False]
['text':'          return false;','line_number':130,'multiline':False]
['text':'      }','line_number':131,'multiline':False]
['text':'','line_number':132,'multiline':False]
['text':' After this, the result value is in the return value register.','line_number':133,'multiline':False]
['text':' Data for a VM function. All VMFunctionDatas are stored in a constexpr array.','line_number':135,'multiline':False]
['text':' Informative name of the wrapped function. The name should not be present','line_number':138,'multiline':False]
['text':' in release builds in order to save memory.','line_number':139,'multiline':False]
['text':' Note: a maximum of seven root types is supported.','line_number':143,'multiline':False]
['text':' Contains an combination of enumerated types used by the gc for marking','line_number':155,'multiline':False]
['text':' arguments of the VM wrapper.','line_number':156,'multiline':False]
['text':' BitMask version.','line_number':164,'multiline':False]
['text':' Contains properties about the first 16 arguments.','line_number':170,'multiline':False]
['text':' Which arguments should be passed in float register on platforms that','line_number':173,'multiline':False]
['text':' have them.','line_number':174,'multiline':False]
['text':' Number of arguments expected, excluding JSContext * as an implicit','line_number':177,'multiline':False]
['text':' first argument and an outparam as a possible implicit final argument.','line_number':178,'multiline':False]
['text':' The root type of the out param if outParam == Type_Handle.','line_number':181,'multiline':False]
['text':' The outparam may be any Type_*, and must be the final argument to the','line_number':184,'multiline':False]
['text':' function, if not Void. outParam != Void implies that the return type','line_number':185,'multiline':False]
['text':' has a boolean failure mode.','line_number':186,'multiline':False]
['text':' Type returned by the C function and used by the VMFunction wrapper to','line_number':189,'multiline':False]
['text':' check for failures of the C function.  Valid failure/return types are','line_number':190,'multiline':False]
['text':' boolean and object pointers which are asserted inside the VMFunction','line_number':191,'multiline':False]
['text':' constructor. If the C function use an outparam (!= Type_Void), then','line_number':192,'multiline':False]
['text':' the only valid failure/return type is boolean -- object pointers are','line_number':193,'multiline':False]
['text':' pointless because the wrapper will only use it to compare it against','line_number':194,'multiline':False]
['text':' nullptr before discarding its value.','line_number':195,'multiline':False]
['text':' Number of Values the VM wrapper should pop from the stack when it returns.','line_number':198,'multiline':False]
['text':' Used by baseline IC stubs so that they can use tail calls to call the VM','line_number':199,'multiline':False]
['text':' wrapper.','line_number':200,'multiline':False]
['text':' On some architectures, called functions need to explicitly push their','line_number':203,'multiline':False]
['text':' return address, for a tail call, there is nothing to push, so tail-callness','line_number':204,'multiline':False]
['text':' needs to be known at compile time.','line_number':205,'multiline':False]
['text':' JSContext * + args + (OutParam? *)','line_number':209,'multiline':False]
['text':' Whether this function returns anything more than a boolean flag for','line_number':215,'multiline':False]
['text':' failures.','line_number':216,'multiline':False]
['text':' Return the stack size consumed by explicit arguments.','line_number':237,'multiline':False]
['text':' Fetch all double-word flags of explicit arguments.','line_number':241,'multiline':False]
['text':' = Explicit argument mask.','line_number':242,'multiline':False]
['text':' = Mask double-size args.','line_number':243,'multiline':False]
['text':' Add the number of double-word flags. (expect a few loop','line_number':246,'multiline':False]
['text':' iteration)','line_number':247,'multiline':False]
['text':' Double-size argument which are passed by value are taking the space','line_number':255,'multiline':False]
['text':' of 2 C arguments.  This function is used to compute the number of','line_number':256,'multiline':False]
['text':' argument expected by the C function.  This is not the same as','line_number':257,'multiline':False]
['text':' explicitStackSlots because reference to stack slots may take one less','line_number':258,'multiline':False]
['text':' register in the total count.','line_number':259,'multiline':False]
['text':' Fetch all explicit arguments.','line_number':263,'multiline':False]
['text':' = Explicit argument mask.','line_number':264,'multiline':False]
['text':' Filter double-size arguments (0x5 = 0b0101) and remove (& ~)','line_number':267,'multiline':False]
['text':' arguments passed by reference (0b1010 >> 1 == 0b0101).','line_number':268,'multiline':False]
['text':' Add the number of double-word transfered by value. (expect a few','line_number':271,'multiline':False]
['text':' loop iteration)','line_number':272,'multiline':False]
['text':' Fetch all explicit arguments.','line_number':283,'multiline':False]
['text':' = Explicit argument mask.','line_number':284,'multiline':False]
['text':' Filter double-size arguments (0x5 = 0b0101) and take (&) only','line_number':287,'multiline':False]
['text':' arguments passed by reference (0b1010 >> 1 == 0b0101).','line_number':288,'multiline':False]
['text':' Add the number of double-word transfered by refference. (expect a','line_number':291,'multiline':False]
['text':' few loop iterations)','line_number':292,'multiline':False]
['text':' Check for valid failure/return type.','line_number':320,'multiline':False]
['text':' Extract the last element of a list of types.','line_number':330,'multiline':False]
['text':' If |str| represents an int32, assign it to |result| and return true.','line_number':417,'multiline':False]
['text':' Otherwise return false.','line_number':418,'multiline':False]
['text':' If |str| is an index in the range [0, INT32_MAX], return it. If the string','line_number':421,'multiline':False]
['text':' is not an index in this range, return -1.','line_number':422,'multiline':False]
['text':' Functions used when JS_MASM_VERBOSE is enabled.','line_number':668,'multiline':False]
['text':' namespace jit','line_number':679,'multiline':False]
['text':' namespace js','line_number':680,'multiline':False]
['text':' jit_VMFunctions_h ','line_number':689,'multiline':True]
