['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]
['text':'
 * JS function definitions.
 ','line_number':10,'multiline':True]
['text':' JS::shadow::Function','line_number':18,'multiline':False]
['text':' FunctionFlags','line_number':19,'multiline':False]
['text':' FunctionPrefixKind','line_number':20,'multiline':False]
['text':' GeneratorKind, FunctionAsyncKind','line_number':21,'multiline':False]
['text':' namespace js','line_number':41,'multiline':False]
['text':'
   * number of formal arguments
   * (including defaults and the rest parameter unlike f.length)
   ','line_number':48,'multiline':True]
['text':'
   * Bitfield composed of the above Flags enum, as well as the kind.
   *
   * If any of these flags needs to be accessed in off-thread JIT
   * compilation, copy it to js::jit::WrappedFunction.
   ','line_number':54,'multiline':True]
['text':' native method pointer or null ','line_number':66,'multiline':True]
['text':' Warning: this |extra| union MUST NOT store a value that could be a','line_number':67,'multiline':False]
['text':' valid BaseScript* pointer! JIT guards depend on this.','line_number':68,'multiline':False]
['text':' Information about this function to be used by the JIT, only','line_number':70,'multiline':False]
['text':' used if isBuiltinNative(); use the accessor!','line_number':71,'multiline':False]
['text':' For wasm/asm.js without a jit entry. Always has the low bit set to','line_number':73,'multiline':False]
['text':' ensure it's never identical to a BaseScript* pointer. See warning','line_number':74,'multiline':False]
['text':' above.','line_number':75,'multiline':False]
['text':' for wasm that has been given a jit entry','line_number':77,'multiline':False]
['text':' environment for new activations ','line_number':82,'multiline':True]
['text':' The `atom_` field can have different meanings depending on the function','line_number':90,'multiline':False]
['text':' type and flags. It is used for diagnostics, decompiling, and','line_number':91,'multiline':False]
['text':'','line_number':92,'multiline':False]
['text':' 1. If the function is not a bound function:','line_number':93,'multiline':False]
['text':'   a. If HAS_GUESSED_ATOM is not set, to store the initial value of the','line_number':94,'multiline':False]
['text':'      "name" property of functions. But also see RESOLVED_NAME.','line_number':95,'multiline':False]
['text':'   b. If HAS_GUESSED_ATOM is set, `atom_` is only used for diagnostics,','line_number':96,'multiline':False]
['text':'      but must not be used for the "name" property.','line_number':97,'multiline':False]
['text':'   c. If HAS_INFERRED_NAME is set, the function wasn't given an explicit','line_number':98,'multiline':False]
['text':'      name in the source text, e.g. `function fn(){}`, but instead it','line_number':99,'multiline':False]
['text':'      was inferred based on how the function was defined in the source','line_number':100,'multiline':False]
['text':'      text. The exact name inference rules are defined in the ECMAScript','line_number':101,'multiline':False]
['text':'      specification.','line_number':102,'multiline':False]
['text':'      Name inference can happen at compile-time, for example in','line_number':103,'multiline':False]
['text':'      `var fn = function(){}`, or it can happen at runtime, for example','line_number':104,'multiline':False]
['text':'      in `var o = {[Symbol.iterator]: function(){}}`. When it happens at','line_number':105,'multiline':False]
['text':'      compile-time, the HAS_INFERRED_NAME is set directly in the','line_number':106,'multiline':False]
['text':'      bytecode emitter, when it happens at runtime, the flag is set when','line_number':107,'multiline':False]
['text':'      evaluating the JSOp::SetFunName bytecode.','line_number':108,'multiline':False]
['text':'   d. HAS_GUESSED_ATOM and HAS_INFERRED_NAME cannot both be set.','line_number':109,'multiline':False]
['text':'   e. `atom_` can be null if neither an explicit, nor inferred, nor a','line_number':110,'multiline':False]
['text':'      guessed name was set.','line_number':111,'multiline':False]
['text':'','line_number':112,'multiline':False]
['text':' 2. If the function is a bound function:','line_number':113,'multiline':False]
['text':'   a. To store the initial value of the "name" property.','line_number':114,'multiline':False]
['text':'   b. If HAS_BOUND_FUNCTION_NAME_PREFIX is not set, `atom_` doesn't','line_number':115,'multiline':False]
['text':'      contain the "bound " prefix which is prepended to the "name"','line_number':116,'multiline':False]
['text':'      property of bound functions per ECMAScript.','line_number':117,'multiline':False]
['text':'   c. Bound functions can never have an inferred or guessed name.','line_number':118,'multiline':False]
['text':'   d. `atom_` is never null for bound functions.','line_number':119,'multiline':False]
['text':'','line_number':120,'multiline':False]
['text':' Self-hosted functions have two names. For example, Array.prototype.sort','line_number':121,'multiline':False]
['text':' has the standard name "sort", but the implementation in Array.js is named','line_number':122,'multiline':False]
['text':' "ArraySort".','line_number':123,'multiline':False]
['text':'','line_number':124,'multiline':False]
['text':' -   In the self-hosting realm, these functions have `_atom` set to the','line_number':125,'multiline':False]
['text':'     implementation name.','line_number':126,'multiline':False]
['text':'','line_number':127,'multiline':False]
['text':' -   When we clone these functions into normal realms, we set `_atom` to','line_number':128,'multiline':False]
['text':'     the standard name. (The self-hosted name is also stored on the clone,','line_number':129,'multiline':False]
['text':'     in another slot; see GetClonedSelfHostedFunctionName().)','line_number':130,'multiline':False]
['text':' Call objects must be created for each invocation of this function. ','line_number':138,'multiline':True]
['text':' A function can be classified as either native (C++) or interpreted (JS): ','line_number':161,'multiline':True]
['text':' Possible attributes of a native function: ','line_number':171,'multiline':True]
['text':' Possible attributes of an interpreted function: ','line_number':183,'multiline':True]
['text':' These methods determine which of the u.scripted.s union arms are active.','line_number':193,'multiline':False]
['text':' For live JSFunctions the pointer values will always be non-null, but due','line_number':194,'multiline':False]
['text':' to partial initialization the GC (and other features that scan the heap','line_number':195,'multiline':False]
['text':' directly) may still return a null pointer.','line_number':196,'multiline':False]
['text':' Arrow functions store their lexical new.target in the first extended slot.','line_number':209,'multiline':False]
['text':' Every class-constructor is also a method.','line_number':211,'multiline':False]
['text':' Compound attributes: ','line_number':238,'multiline':True]
['text':' Returns true if this function must have a non-configurable .prototype data','line_number':250,'multiline':False]
['text':' property. This is used to ensure looking up .prototype elsewhere will have','line_number':251,'multiline':False]
['text':' no side-effects.','line_number':252,'multiline':False]
['text':' Returns true if |new Fun()| should not allocate a new object caller-side','line_number':255,'multiline':False]
['text':' but pass the uninitialized-lexical MagicValue and rely on the callee to','line_number':256,'multiline':False]
['text':' construct its own |this| object.','line_number':257,'multiline':False]
['text':' Returns the strictness of this function, which must be interpreted. ','line_number':264,'multiline':True]
['text':' Make the function constructible.','line_number':270,'multiline':False]
['text':' Can be called multiple times by the parser.','line_number':273,'multiline':False]
['text':' uint16_t representation bounds number of call object dynamic slots. ','line_number':344,'multiline':True]
['text':'
   * For an interpreted function, accessors for the initial scope object of
   * activations (stack frames) of the function.
   ','line_number':347,'multiline':True]
['text':' Function Scripts','line_number':379,'multiline':False]
['text':'','line_number':380,'multiline':False]
['text':' Interpreted functions have either a BaseScript or a SelfHostedLazyScript. A','line_number':381,'multiline':False]
['text':' BaseScript may either be lazy or non-lazy (hasBytecode()). Methods may','line_number':382,'multiline':False]
['text':' return a JSScript* if underlying BaseScript is known to have bytecode.','line_number':383,'multiline':False]
['text':'','line_number':384,'multiline':False]
['text':' There are several methods to get the script of an interpreted function:','line_number':385,'multiline':False]
['text':'','line_number':386,'multiline':False]
['text':' - For all interpreted functions, getOrCreateScript() will get the','line_number':387,'multiline':False]
['text':'   JSScript, delazifying the function if necessary. This is the safest to','line_number':388,'multiline':False]
['text':'   use, but has extra checks, requires a cx and may trigger a GC.','line_number':389,'multiline':False]
['text':'','line_number':390,'multiline':False]
['text':' - For functions known to have a JSScript, nonLazyScript() will get it.','line_number':391,'multiline':False]
['text':' If this is a scripted function, returns its canonical function (the','line_number':415,'multiline':False]
['text':' original function allocated by the frontend). Note that lazy self-hosted','line_number':416,'multiline':False]
['text':' builtins don't have a lazy script so in that case we also return nullptr.','line_number':417,'multiline':False]
['text':' The default state of a JSFunction that is not ready for execution. If','line_number':425,'multiline':False]
['text':' observed outside initialization, this is the result of failure during','line_number':426,'multiline':False]
['text':' bytecode compilation.','line_number':427,'multiline':False]
['text':'','line_number':428,'multiline':False]
['text':' A BaseScript is fully initialized before u.script.s.script_ is initialized','line_number':429,'multiline':False]
['text':' with a reference to it.','line_number':430,'multiline':False]
['text':' Access fields defined on both lazy and non-lazy scripts.','line_number':445,'multiline':False]
['text':' Note: The selfHostedLazy_ field is not a GC-thing pointer so we don't','line_number':506,'multiline':False]
['text':' need to trigger barriers.','line_number':507,'multiline':False]
['text':' Called by Ion off-main thread.','line_number':519,'multiline':False]
['text':' Called by Ion off-main thread.','line_number':540,'multiline':False]
['text':' wasm functions are always natives and either:','line_number':548,'multiline':False]
['text':'  - store a function-index in u.n.extra and can only be called through the','line_number':549,'multiline':False]
['text':'    fun->native() entry point from C++.','line_number':550,'multiline':False]
['text':'  - store a jit-entry code pointer in u.n.extra and can be called by jit','line_number':551,'multiline':False]
['text':'    code directly. C++ callers can still use the fun->native() entry point','line_number':552,'multiline':False]
['text':'    (computing the function index from the jit-entry point).','line_number':553,'multiline':False]
['text':' See wasmFuncIndex_ comment for why we set the low bit.','line_number':558,'multiline':False]
['text':' Bound function accessors. ','line_number':610,'multiline':True]
['text':'
   * Used to mark bound functions as such and make them constructible if the
   * target is. Also assigns the prototype and sets the name and correct length.
   ','line_number':617,'multiline':True]
['text':'
   * Accessors for data stored in extended functions. Use setExtendedSlot if
   * the function has already been initialized. Otherwise use
   * initExtendedSlot.
   ','line_number':638,'multiline':True]
['text':'
   * Same as `toExtended` and `getExtendedSlot`, but `this` is guaranteed to be
   * an extended function.
   *
   * This function is supposed to be used off-thread, especially the JIT
   * compilation thread, that cannot access JSFunction.flags_, because of
   * a race condition.
   *
   * See Also: WrappedFunction.isExtended_
   ','line_number':648,'multiline':True]
['text':' GC support. ','line_number':662,'multiline':True]
['text':' If enclosingEnv is null, the function will have a null environment()','line_number':694,'multiline':False]
['text':' (yes, null, not the global lexical environment).  In all cases, the global','line_number':695,'multiline':False]
['text':' will be used as the terminating environment.','line_number':696,'multiline':False]
['text':' Allocate a new function backed by a JSNative.  Note that by default this','line_number':704,'multiline':False]
['text':' creates a tenured object.','line_number':705,'multiline':False]
['text':' Allocate a new constructor backed by a JSNative.  Note that by default this','line_number':716,'multiline':False]
['text':' creates a tenured object.','line_number':717,'multiline':False]
['text':' Allocate a new scripted function.  If enclosingEnv is null, the','line_number':729,'multiline':False]
['text':' global lexical environment will be used.  In all cases the terminating','line_number':730,'multiline':False]
['text':' environment of the resulting object will be the global.','line_number':731,'multiline':False]
['text':' Determine which [[Prototype]] to use when creating a new function using the','line_number':738,'multiline':False]
['text':' requested generator and async kind.','line_number':739,'multiline':False]
['text':'','line_number':740,'multiline':False]
['text':' This sets `proto` to `nullptr` for non-generator, synchronous functions to','line_number':741,'multiline':False]
['text':' mean "the builtin %FunctionPrototype% in the current realm", the common case.','line_number':742,'multiline':False]
['text':'','line_number':743,'multiline':False]
['text':' We could set it to `cx->global()->getOrCreateFunctionPrototype()`, but','line_number':744,'multiline':False]
['text':' nullptr gets a fast path in e.g. js::NewObjectWithClassProtoCommon.','line_number':745,'multiline':False]
['text':'
 * Function extended with reserved slots for use by various kinds of functions.
 * Most functions do not have these extensions, but enough do that efficient
 * storage is required (no malloc'ed reserved slots).
 ','line_number':766,'multiline':True]
['text':' Arrow functions store their lexical new.target in the first extended','line_number':775,'multiline':False]
['text':' slot.','line_number':776,'multiline':False]
['text':' Stores the length for bound functions, so the .length property doesn't need','line_number':781,'multiline':False]
['text':' to be resolved eagerly.','line_number':782,'multiline':False]
['text':' Exported asm.js/wasm functions store their WasmInstanceObject in the','line_number':785,'multiline':False]
['text':' first slot.','line_number':786,'multiline':False]
['text':' wasm/asm.js exported functions store the wasm::TlsData pointer of their','line_number':789,'multiline':False]
['text':' instance.','line_number':790,'multiline':False]
['text':' asm.js module functions store their WasmModuleObject in the first slot.','line_number':793,'multiline':False]
['text':' Async module callback handlers store their ModuleObject in the first slot.','line_number':796,'multiline':False]
['text':' Reserved slots available for storage by particular native functions. ','line_number':817,'multiline':True]
['text':' namespace js','line_number':838,'multiline':False]
['text':'
 * Report an error that call.thisv is not compatible with the specified class,
 * assuming that the method (clasp->name).prototype.<name of callee function>
 * is what was called.
 ','line_number':899,'multiline':True]
['text':'
 * Report an error that call.thisv is not an acceptable this for the callee
 * function.
 ','line_number':907,'multiline':True]
['text':' namespace js ','line_number':917,'multiline':True]
['text':' namespace detail','line_number':925,'multiline':False]
['text':' namespace JS','line_number':926,'multiline':False]
['text':' vm_JSFunction_h ','line_number':929,'multiline':True]
