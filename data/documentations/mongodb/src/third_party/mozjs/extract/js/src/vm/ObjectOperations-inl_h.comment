['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]
['text':' Fundamental operations on objects. ','line_number':7,'multiline':True]
['text':' MOZ_ASSERT','line_number':14,'multiline':False]
['text':' MOZ_ALWAYS_INLINE','line_number':15,'multiline':False]
['text':' MOZ_UNLIKELY','line_number':16,'multiline':False]
['text':' uint32_t','line_number':18,'multiline':False]
['text':' JSPROP_ENUMERATE, JS::PropertyDescriptor','line_number':20,'multiline':False]
['text':' js::{Delete,Get,Has}PropertyOp, JSMayResolveOp, JS::ObjectOpResult','line_number':22,'multiline':False]
['text':' JS::AutoSuppressGCAnalysis','line_number':23,'multiline':False]
['text':' INT_TO_JSID, jsid, JSID_INT_MAX, SYMBOL_TO_JSID','line_number':24,'multiline':False]
['text':' JS::Handle, JS::MutableHandle, JS::Rooted','line_number':25,'multiline':False]
['text':' JS::ObjectValue, JS::Value','line_number':26,'multiline':False]
['text':' js::Proxy','line_number':27,'multiline':False]
['text':' JSContext','line_number':28,'multiline':False]
['text':' JSObject','line_number':29,'multiline':False]
['text':' js::NativeObject, js::Native{Get,Has,Set}Property, js::NativeGetPropertyNoGC, js::Qualified','line_number':30,'multiline':False]
['text':' js::ProxyObject','line_number':31,'multiline':False]
['text':' js::NameToId','line_number':32,'multiline':False]
['text':' JS::Symbol','line_number':33,'multiline':False]
['text':' js::IndexToId','line_number':35,'multiline':False]
['text':' The functions below are the fundamental operations on objects. See the','line_number':39,'multiline':False]
['text':' comment about "Standard internal methods" in jsapi.h.','line_number':40,'multiline':False]
['text':'
 * ES6 [[GetPrototypeOf]]. Get obj's prototype, storing it in protop.
 *
 * If obj is definitely not a proxy, the infallible obj->getProto() can be used
 * instead. See the comment on JSObject::getTaggedProto().
 ','line_number':42,'multiline':True]
['text':'
 * ES6 [[IsExtensible]]. Extensible objects can have new properties defined on
 * them. Inextensible objects can't, and their [[Prototype]] slot is fixed as
 * well.
 ','line_number':59,'multiline':True]
['text':' If the following assertion fails, there's somewhere else a missing','line_number':73,'multiline':False]
['text':' call to shrinkCapacityToInitializedLength() which needs to be found and','line_number':74,'multiline':False]
['text':' fixed.','line_number':75,'multiline':False]
['text':'
 * ES6 [[Has]]. Set *foundp to true if `id in obj` (that is, if obj has an own
 * or inherited property obj[id]), false otherwise.
 ','line_number':82,'multiline':True]
['text':'
 * ES6 [[Get]]. Get the value of the property `obj[id]`, or undefined if no
 * such property exists.
 *
 * Typically obj == receiver; if obj != receiver then the caller is most likely
 * a proxy using GetProperty to finish a property get that started out as
 * `receiver[id]`, and we've already searched the prototype chain up to `obj`.
 ','line_number':101,'multiline':True]
['text':' Sanity check: we should only have a mayResolve hook if we have a','line_number':211,'multiline':False]
['text':' resolve hook.','line_number':212,'multiline':False]
['text':' Tell the analysis our mayResolve hooks won't trigger GC.','line_number':219,'multiline':False]
['text':' Returns whether |obj| or an object on its proto chain may have an interesting','line_number':229,'multiline':False]
['text':' symbol property (see JSObject::hasInterestingSymbolProperty). If it returns','line_number':230,'multiline':False]
['text':' true, *holder is set to the object that may have this property.','line_number':231,'multiline':False]
['text':' = nullptr ','line_number':234,'multiline':True]
['text':' Like GetProperty but optimized for interesting symbol properties like','line_number':253,'multiline':False]
['text':' @@toStringTag.','line_number':254,'multiline':False]
['text':'
 * ES6 [[Set]]. Carry out the assignment `obj[id] = v`.
 *
 * The `receiver` argument has to do with how [[Set]] interacts with the
 * prototype chain and proxies. It's hard to explain and ES6 doesn't really
 * try. Long story short, if you just want bog-standard assignment, pass
 * `ObjectValue(*obj)` as receiver. Or better, use one of the signatures that
 * doesn't have a receiver parameter.
 *
 * Callers pass obj != receiver e.g. when a proxy is involved, obj is the
 * proxy's target, and the proxy is using SetProperty to finish an assignment
 * that started out as `receiver[id] = v`, by delegating it to obj.
 ','line_number':279,'multiline':True]
['text':'
 * ES6 draft rev 31 (15 Jan 2015) 7.3.3 Put (O, P, V, Throw), except that on
 * success, the spec says this is supposed to return a boolean value, which we
 * don't bother doing.
 ','line_number':340,'multiline':True]
['text':'
 * ES6 [[Delete]]. Equivalent to the JS code `delete obj[id]`.
 ','line_number':354,'multiline':True]
['text':' namespace js ','line_number':376,'multiline':True]
['text':' vm_ObjectOperations_inl_h ','line_number':378,'multiline':True]
