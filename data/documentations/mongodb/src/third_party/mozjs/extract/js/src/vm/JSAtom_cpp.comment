['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]
['text':'
 * JS atom table.
 ','line_number':7,'multiline':True]
['text':' mozilla::HashStringKnownLength','line_number':15,'multiline':False]
['text':' js::GetErrorMessage, JSMSG_*','line_number':27,'multiline':False]
['text':' js_*_str','line_number':32,'multiline':False]
['text':' Optional. ','line_number':70,'multiline':True]
['text':' Use a low initial capacity for the permanent atoms table to avoid penalizing','line_number':208,'multiline':False]
['text':' runtimes that create a small number of atoms.','line_number':209,'multiline':False]
['text':' The bare symbol names are already part of the well-known set, but their','line_number':248,'multiline':False]
['text':' descriptions are not, so enumerate them here and add them to the initial','line_number':249,'multiline':False]
['text':' permanent atoms set below.','line_number':250,'multiline':False]
['text':' Create the well-known symbols.','line_number':290,'multiline':False]
['text':' Prevent GC until we have fully initialized the well known symbols table.','line_number':296,'multiline':False]
['text':' Faster than zeroing the array and null checking during every GC.','line_number':297,'multiline':False]
['text':' Permanent atoms only need to be traced in the runtime which owns them.','line_number':450,'multiline':False]
['text':' Static strings are not included in the permanent atoms table.','line_number':455,'multiline':False]
['text':' Add atoms that were added to the secondary table while we were sweeping','line_number':579,'multiline':False]
['text':' the main table.','line_number':580,'multiline':False]
['text':' Sweep the table incrementally until we run out of work or budget.','line_number':599,'multiline':False]
['text':' The permanent atoms table has now been populated.','line_number':639,'multiline':False]
['text':' Takes ownership.','line_number':641,'multiline':False]
['text':' Initialize the main atoms table.','line_number':644,'multiline':False]
['text':' Try the per-Zone cache first. If we find the atom there we can avoid the','line_number':681,'multiline':False]
['text':' atoms lock, the markAtom call, and the multiple HashSet lookups below.','line_number':682,'multiline':False]
['text':' We don't use the per-Zone cache if we want a pinned atom: handling that','line_number':683,'multiline':False]
['text':' is more complicated and pinning atoms is relatively uncommon.','line_number':684,'multiline':False]
['text':' The cache is purged on GC so if we're in the middle of an','line_number':690,'multiline':False]
['text':' incremental GC we should have barriered the atom when we put','line_number':691,'multiline':False]
['text':' it in the cache.','line_number':692,'multiline':False]
['text':' This function can be called during initialization, while the permanent','line_number':699,'multiline':False]
['text':' atoms table is being created. In this case all atoms created are added to','line_number':700,'multiline':False]
['text':' the permanent atoms table.','line_number':701,'multiline':False]
['text':' Validate the length before taking an atoms partition lock, as throwing an','line_number':719,'multiline':False]
['text':' exception here may reenter this code.','line_number':720,'multiline':False]
['text':' We're currently sweeping the main atoms table and all new atoms will','line_number':772,'multiline':False]
['text':' be added to a secondary table. Check this first.','line_number':773,'multiline':False]
['text':' If that fails check the main table but check if any atom found there','line_number':776,'multiline':False]
['text':' is dead.','line_number':777,'multiline':False]
['text':' We have held the lock since looking up p, and the operations we've done','line_number':801,'multiline':False]
['text':' since then can't GC; therefore the atoms table has not been modified and','line_number':802,'multiline':False]
['text':' p is still valid.','line_number':803,'multiline':False]
['text':' SystemAllocPolicy does not report OOM. ','line_number':807,'multiline':True]
['text':' |chars| must not point into an inline or short string. ','line_number':814,'multiline':True]
['text':' We are single threaded at this point, and the operations we've done since','line_number':849,'multiline':False]
['text':' then can't GC; therefore the atoms table has not been modified and p is','line_number':850,'multiline':False]
['text':' still valid.','line_number':851,'multiline':False]
['text':' SystemAllocPolicy does not report OOM. ','line_number':853,'multiline':True]
['text':' MakeLinearStringForAtomization has 4 variants.','line_number':875,'multiline':False]
['text':' This is used by Latin1Char and char16_t.','line_number':876,'multiline':False]
['text':' MakeLinearStringForAtomization has one further variant -- a non-template','line_number':883,'multiline':False]
['text':' overload accepting LittleEndianChars.','line_number':884,'multiline':False]
['text':' MakeAtomUTF8Helper is called from deep in the Atomization path, which','line_number':906,'multiline':False]
['text':' expects functions to fail gracefully with nullptr on OOM, without throwing.','line_number':907,'multiline':False]
['text':'','line_number':908,'multiline':False]
['text':' Flat strings are null-terminated. Leave room with length + 1','line_number':909,'multiline':False]
['text':' Another 2 variants of MakeLinearStringForAtomization.','line_number':923,'multiline':False]
['text':' Grudgingly forgo last-ditch GC. The alternative would be to release','line_number':944,'multiline':False]
['text':' the lock, manually GC here, and retry from the top.','line_number':945,'multiline':False]
['text':' We need to call isIndexSlow directly to avoid the flag check in isIndex,','line_number':956,'multiline':False]
['text':' because we still have to initialize that flag.','line_number':957,'multiline':False]
['text':' = js::DoNotPinAtom ','line_number':968,'multiline':True]
['text':' N.B. static atoms are effectively always interned. ','line_number':971,'multiline':True]
['text':' Non-permanent atoms must exist in atoms table.','line_number':1033,'multiline':False]
['text':' Non-permanent atoms must exist in atoms table.','line_number':1052,'multiline':False]
['text':' |chars| must not point into an inline or short string. ','line_number':1088,'multiline':True]
['text':' Permanent atoms,|JSRuntime::atoms_|, and  static strings are disjoint','line_number':1110,'multiline':False]
['text':' sets.  |AtomizeAndCopyCharsFromLookup| only consults the first two sets,','line_number':1111,'multiline':False]
['text':' so we must map any static strings ourselves.  See bug 1575947.','line_number':1112,'multiline':False]
['text':' Handle all pure-ASCII UTF-8 static strings.','line_number':1115,'multiline':False]
['text':' The only non-ASCII static strings are the single-code point strings','line_number':1120,'multiline':False]
['text':' U+0080 through U+00FF, encoded as','line_number':1121,'multiline':False]
['text':'','line_number':1122,'multiline':False]
['text':'   0b1100'00xx 0b10xx'xxxx','line_number':1123,'multiline':False]
['text':'','line_number':1124,'multiline':False]
['text':' where the encoded code point is the concatenation of the 'x' bits -- and','line_number':1125,'multiline':False]
['text':' where the highest 'x' bit is necessarily 1 (because U+0080 through U+00FF','line_number':1126,'multiline':False]
['text':' all contain an 0x80 bit).','line_number':1127,'multiline':False]
['text':' Fallthrough code handles the cases where the two units aren't a Latin-1','line_number':1141,'multiline':False]
['text':' code point or are invalid.','line_number':1142,'multiline':False]
['text':' Avoid JSString allocation for already existing atoms. See bug 321985. ','line_number':1328,'multiline':True]
