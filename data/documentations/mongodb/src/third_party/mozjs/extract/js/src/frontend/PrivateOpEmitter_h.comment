['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]
['text':' ElemOpEmitter','line_number':15,'multiline':False]
['text':' NameLocation','line_number':16,'multiline':False]
['text':' TaggedParserAtomIndex','line_number':17,'multiline':False]
['text':' GCThingIndex','line_number':19,'multiline':False]
['text':' Class for emitting bytecode for operations on private members of objects.','line_number':26,'multiline':False]
['text':'','line_number':27,'multiline':False]
['text':' Usage is similar to PropOpEmitter, but the name of the private member must','line_number':28,'multiline':False]
['text':' be passed to the constructor; prepare*() methods aren't necessary; and','line_number':29,'multiline':False]
['text':' `delete obj.#member` and `super.#member` aren't supported because both are','line_number':30,'multiline':False]
['text':' SyntaxErrors.','line_number':31,'multiline':False]
['text':'','line_number':32,'multiline':False]
['text':' Usage: (error checking is omitted for simplicity)','line_number':33,'multiline':False]
['text':'','line_number':34,'multiline':False]
['text':'   `obj.#member;`','line_number':35,'multiline':False]
['text':'     PrivateOpEmitter xoe(this,','line_number':36,'multiline':False]
['text':'                          privateName,','line_number':37,'multiline':False]
['text':'                          PrivateOpEmitter::Kind::Get);','line_number':38,'multiline':False]
['text':'     emit(obj);','line_number':39,'multiline':False]
['text':'     xoe.emitReference();','line_number':40,'multiline':False]
['text':'     xoe.emitGet();','line_number':41,'multiline':False]
['text':'','line_number':42,'multiline':False]
['text':'   `obj.#member();`','line_number':43,'multiline':False]
['text':'     PrivateOpEmitter xoe(this,','line_number':44,'multiline':False]
['text':'                          privateName,','line_number':45,'multiline':False]
['text':'                          PrivateOpEmitter::Kind::Call);','line_number':46,'multiline':False]
['text':'     emit(obj);','line_number':47,'multiline':False]
['text':'     xoe.emitReference();','line_number':48,'multiline':False]
['text':'     xoe.emitGet();','line_number':49,'multiline':False]
['text':'     emit_call_here();','line_number':50,'multiline':False]
['text':'','line_number':51,'multiline':False]
['text':'   `new obj.#member();`','line_number':52,'multiline':False]
['text':'     The same, but use PrivateOpEmitter::Kind::Get.','line_number':53,'multiline':False]
['text':'','line_number':54,'multiline':False]
['text':'   `obj.#field++;`','line_number':55,'multiline':False]
['text':'     PrivateOpEmitter xoe(this,','line_number':56,'multiline':False]
['text':'                          privateName,','line_number':57,'multiline':False]
['text':'                          PrivateOpEmitter::Kind::PostIncrement);','line_number':58,'multiline':False]
['text':'     emit(obj);','line_number':59,'multiline':False]
['text':'     xoe.emitReference();','line_number':60,'multiline':False]
['text':'     xoe.emitIncDec();','line_number':61,'multiline':False]
['text':'','line_number':62,'multiline':False]
['text':'   `obj.#field = value;`','line_number':63,'multiline':False]
['text':'     PrivateOpEmitter xoe(this,','line_number':64,'multiline':False]
['text':'                          privateName,','line_number':65,'multiline':False]
['text':'                          PrivateOpEmitter::Kind::SimpleAssignment);','line_number':66,'multiline':False]
['text':'     emit(obj);','line_number':67,'multiline':False]
['text':'     xoe.emitReference();','line_number':68,'multiline':False]
['text':'     emit(value);','line_number':69,'multiline':False]
['text':'     xoe.emitAssignment();','line_number':70,'multiline':False]
['text':'','line_number':71,'multiline':False]
['text':'   `obj.#field += value;`','line_number':72,'multiline':False]
['text':'     PrivateOpEmitter xoe(this,','line_number':73,'multiline':False]
['text':'                          privateName,','line_number':74,'multiline':False]
['text':'                          PrivateOpEmitter::Kind::CompoundAssignment);','line_number':75,'multiline':False]
['text':'     emit(obj);','line_number':76,'multiline':False]
['text':'     xoe.emitReference();','line_number':77,'multiline':False]
['text':'     emit(JSOp::Dup2);','line_number':78,'multiline':False]
['text':'     xoe.emitGet();','line_number':79,'multiline':False]
['text':'     emit(value);','line_number':80,'multiline':False]
['text':'     emit_add_op_here();','line_number':81,'multiline':False]
['text':'     xoe.emitAssignment();','line_number':82,'multiline':False]
['text':'','line_number':83,'multiline':False]
['text':' Name of the private member, e.g. "#field".','line_number':105,'multiline':False]
['text':' The index for the property name's atom.','line_number':108,'multiline':False]
['text':' Location of the slot containing the private name symbol; or, for a','line_number':111,'multiline':False]
['text':' non-static private method, the slot containing the method.','line_number':112,'multiline':False]
['text':' For non-static private method accesses, the location of the relevant','line_number':115,'multiline':False]
['text':' `.privateBrand` binding. Otherwise, `Nothing`.','line_number':116,'multiline':False]
['text':' The state of this emitter.','line_number':120,'multiline':False]
['text':'','line_number':121,'multiline':False]
['text':'            emitReference','line_number':122,'multiline':False]
['text':' +-------+  skipReference  +-----------+','line_number':123,'multiline':False]
['text':' | Start |---------------->| Reference |','line_number':124,'multiline':False]
['text':' +-------+                 +-----+-----+','line_number':125,'multiline':False]
['text':'                                 |','line_number':126,'multiline':False]
['text':'     +---------------------------+','line_number':127,'multiline':False]
['text':'     |','line_number':128,'multiline':False]
['text':'     |','line_number':129,'multiline':False]
['text':'     | [Get]','line_number':130,'multiline':False]
['text':'     |   emitGet','line_number':131,'multiline':False]
['text':'     | [Call] [Get]                  [CompoundAssignment]','line_number':132,'multiline':False]
['text':'     |   emitGetForCallOrNew +-----+   emitAssignment','line_number':133,'multiline':False]
['text':'     +---------------------->| Get |-------------------+','line_number':134,'multiline':False]
['text':'     |                       +-----+                   |','line_number':135,'multiline':False]
['text':'     | [PostIncrement]                                 |','line_number':136,'multiline':False]
['text':'     | [PreIncrement]                                  |','line_number':137,'multiline':False]
['text':'     | [PostDecrement]                                 |','line_number':138,'multiline':False]
['text':'     | [PreDecrement]                                  |','line_number':139,'multiline':False]
['text':'     |   emitIncDec                                    |','line_number':140,'multiline':False]
['text':'     +------------------------------------------------>+','line_number':141,'multiline':False]
['text':'     |                                                 |','line_number':142,'multiline':False]
['text':'     | [SimpleAssignment]                              |','line_number':143,'multiline':False]
['text':'     | [PropInit]                                      V','line_number':144,'multiline':False]
['text':'     |   emitAssignment                          +------------+','line_number':145,'multiline':False]
['text':'     +------------------------------------------>| Assignment |','line_number':146,'multiline':False]
['text':'                                                 +------------+','line_number':147,'multiline':False]
['text':' The initial state.','line_number':149,'multiline':False]
['text':' After calling emitReference or skipReference.','line_number':152,'multiline':False]
['text':' After calling emitGet.','line_number':155,'multiline':False]
['text':' After calling emitAssignment or emitIncDec.','line_number':158,'multiline':False]
['text':' Emit a GetAliasedLexical or similar instruction.','line_number':202,'multiline':False]
['text':' Emit bytecode to check for the presence/absence of a private field/brand.','line_number':209,'multiline':False]
['text':'','line_number':210,'multiline':False]
['text':' Given OBJ KEY on the stack, where KEY is a private name symbol, the','line_number':211,'multiline':False]
['text':' emitted code will throw if OBJ does not have the given KEY.','line_number':212,'multiline':False]
['text':'','line_number':213,'multiline':False]
['text':' If `isFieldInit()`, the check is reversed: the code will throw if OBJ','line_number':214,'multiline':False]
['text':' already has the KEY.','line_number':215,'multiline':False]
['text':'','line_number':216,'multiline':False]
['text':' If `isBrandCheck()`, the check verifies RHS is an object (throwing if not).','line_number':217,'multiline':False]
['text':'','line_number':218,'multiline':False]
['text':' The bytecode leaves OBJ KEY BOOL on the stack. Caller is responsible for','line_number':219,'multiline':False]
['text':' consuming or popping it.','line_number':220,'multiline':False]
['text':' namespace frontend ','line_number':233,'multiline':True]
['text':' namespace js ','line_number':234,'multiline':True]
['text':' frontend_PrivateOpEmitter_h ','line_number':236,'multiline':True]
