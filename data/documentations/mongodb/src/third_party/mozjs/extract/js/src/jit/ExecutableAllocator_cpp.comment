['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 *
 * Copyright (C) 2008 Apple Inc. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY APPLE INC. ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL APPLE INC. OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 ','line_number':1,'multiline':True]
['text':' Shouldn't underflow.','line_number':58,'multiline':False]
['text':' It should be impossible for us to roll over, because only small','line_number':64,'multiline':False]
['text':' pools have multiple holders, and they have one holder per chunk','line_number':65,'multiline':False]
['text':' of generated code, and they only hold 16KB or so of code.','line_number':66,'multiline':False]
['text':' willDestroy = ','line_number':90,'multiline':True]
['text':' If this asserts we have a pool leak.','line_number':93,'multiline':False]
['text':' Try to fit in an existing small allocator.  Use the pool with the','line_number':98,'multiline':False]
['text':' least available space that is big enough (best-fit).  This is the','line_number':99,'multiline':False]
['text':' best strategy because (a) it maximizes the chance of the next','line_number':100,'multiline':False]
['text':' allocation fitting in a small pool, and (b) it minimizes the','line_number':101,'multiline':False]
['text':' potential waste when a small pool is next abandoned.','line_number':102,'multiline':False]
['text':' If the request is large, we just provide a unshared allocator','line_number':116,'multiline':False]
['text':' Create a new allocator','line_number':121,'multiline':False]
['text':' At this point, local |pool| is the owner.','line_number':126,'multiline':False]
['text':' We haven't hit the maximum number of live pools; add the new pool.','line_number':129,'multiline':False]
['text':' If append() OOMs, we just return an unshared allocator.','line_number':130,'multiline':False]
['text':' Find the pool with the least space.','line_number':135,'multiline':False]
['text':' If the new allocator will result in more free space than the small','line_number':143,'multiline':False]
['text':' pool with the least space, then we will use it instead','line_number':144,'multiline':False]
['text':' Pass ownership to the caller.','line_number':153,'multiline':False]
['text':' static ','line_number':157,'multiline':True]
['text':' Round up to next page boundary','line_number':164,'multiline':False]
['text':' Note: this will call |systemRelease(a)|.','line_number':189,'multiline':False]
['text':' Caller must ensure 'n' is word-size aligned. If all allocations are','line_number':199,'multiline':False]
['text':' of word sized quantities, then all subsequent allocations will be','line_number':200,'multiline':False]
['text':' aligned.','line_number':201,'multiline':False]
['text':' This alloc is infallible because poolForSize() just obtained','line_number':214,'multiline':False]
['text':' (found, or created if necessary) a pool that had enough space.','line_number':215,'multiline':False]
['text':' Pool may not be present in m_pools if we hit OOM during creation.','line_number':226,'multiline':False]
['text':' Releasing this pool is not going to deallocate it, so we might as','line_number':236,'multiline':False]
['text':' well hold on to it and reuse it for future allocations.','line_number':237,'multiline':False]
['text':' static ','line_number':259,'multiline':True]
['text':' static ','line_number':271,'multiline':True]
['text':' Make sure no pools have the mark bit set.','line_number':277,'multiline':False]
['text':' This is the last reference so the release() call below will','line_number':286,'multiline':False]
['text':' unmap the memory. Don't bother poisoning it.','line_number':287,'multiline':False]
['text':' Use the pool's mark bit to indicate we made the pool writable.','line_number':293,'multiline':False]
['text':' This avoids reprotecting a pool multiple times.','line_number':294,'multiline':False]
['text':' Note: we use memset instead of js::Poison because we want to poison','line_number':300,'multiline':False]
['text':' JIT code in release builds too. Furthermore, we don't want the','line_number':301,'multiline':False]
['text':' invalid-ObjectValue poisoning js::Poison does in debug builds.','line_number':302,'multiline':False]
['text':' Make the pools executable again and drop references. We don't flush the','line_number':307,'multiline':False]
['text':' ICache here to not add extra overhead.','line_number':308,'multiline':False]
