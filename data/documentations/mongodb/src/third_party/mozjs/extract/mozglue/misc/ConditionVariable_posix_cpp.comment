['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- ','line_number':1,'multiline':True]
['text':' vim: set ts=8 sts=2 et sw=2 tw=80: ','line_number':2,'multiline':True]
['text':' This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':3,'multiline':True]
['text':' Android 32-bit & macOS 10.12 has the clock functions, but not','line_number':25,'multiline':False]
['text':' pthread_condattr_setclock.','line_number':26,'multiline':False]
['text':' The C++ specification defines std::condition_variable::wait_for in terms of','line_number':33,'multiline':False]
['text':' std::chrono::steady_clock, which is closest to CLOCK_MONOTONIC.','line_number':34,'multiline':False]
['text':' While timevaladd is widely available to work with timevals, the newer','line_number':37,'multiline':False]
['text':' timespec structure is largely lacking such conveniences. Thankfully, the','line_number':38,'multiline':False]
['text':' utilities available in MFBT make implementing our own quite easy.','line_number':39,'multiline':False]
['text':' Add nanoseconds. This may wrap, but not above 2 billion.','line_number':42,'multiline':False]
['text':' Add seconds, checking for overflow in the platform specific time_t type.','line_number':47,'multiline':False]
['text':' If nanoseconds overflowed, carry the result over into seconds.','line_number':50,'multiline':False]
['text':' Extracting the value asserts that there was no overflow.','line_number':57,'multiline':False]
['text':' Clamp to 0, as time_t is unsigned.','line_number':123,'multiline':False]
['text':' Convert the duration to a timespec.','line_number':128,'multiline':False]
['text':' Our non-clock-supporting platforms, OS X and Android, do support waiting','line_number':144,'multiline':False]
['text':' on a condition variable with a relative timeout.','line_number':145,'multiline':False]
