['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]
['text':'
 * Portable safe sprintf code.
 *
 * Author: Kipp E.B. Hickman
 ','line_number':7,'multiline':True]
['text':'
 * Note: on some platforms va_list is defined as an array,
 * and requires array notation.
 ','line_number':33,'multiline':True]
['text':'
 * Numbered Argument State
 ','line_number':45,'multiline':True]
['text':' type of the current ap','line_number':49,'multiline':False]
['text':' point to the corresponding position on ap','line_number':50,'multiline':False]
['text':' For values up to and including TYPE_DOUBLE, the lowest bit indicates','line_number':56,'multiline':False]
['text':' whether the type is signed (0) or unsigned (1).','line_number':57,'multiline':False]
['text':' Fill into the buffer using the data in src','line_number':86,'multiline':False]
['text':' Right adjusting','line_number':92,'multiline':False]
['text':' Copy out the source data','line_number':103,'multiline':False]
['text':' Left adjusting','line_number':108,'multiline':False]
['text':'
 * Fill a number. The order is: optional-sign zero-filling conversion-digits
 ','line_number':118,'multiline':True]
['text':' Need zero filling','line_number':147,'multiline':False]
['text':' Zero filling','line_number':154,'multiline':False]
['text':' Space filling on the right (i.e. left adjusting)','line_number':161,'multiline':False]
['text':' Space filling on the left (i.e. right adjusting)','line_number':166,'multiline':False]
['text':' All that the cvt_* functions care about as far as the TYPE_* constants is','line_number':201,'multiline':False]
['text':' that the low bit is set to indicate unsigned, or unset to indicate signed.','line_number':202,'multiline':False]
['text':' So we don't try to hard to ensure that the passed TYPE_* constant lines','line_number':203,'multiline':False]
['text':' up with the actual size of the number being printed here.  The main printf','line_number':204,'multiline':False]
['text':' code, below, does have to care so that the correct bits are extracted from','line_number':205,'multiline':False]
['text':' the varargs list.','line_number':206,'multiline':False]
['text':' Convert a long into its printable form. ','line_number':250,'multiline':True]
['text':' according to the man page this needs to happen','line_number':257,'multiline':False]
['text':' Converting decimal is a little tricky. In the unsigned case we','line_number':262,'multiline':False]
['text':' need to stop when we hit 10 digits. In the signed case, we can','line_number':263,'multiline':False]
['text':' stop when the number is zero.','line_number':264,'multiline':False]
['text':' Now that we have the number converted without its sign, deal with','line_number':278,'multiline':False]
['text':' the sign and zero padding.','line_number':279,'multiline':False]
['text':' Convert a 64-bit integer into its printable form. ','line_number':283,'multiline':True]
['text':' According to the man page, this needs to happen.','line_number':286,'multiline':False]
['text':' Converting decimal is a little tricky. In the unsigned case we','line_number':291,'multiline':False]
['text':' need to stop when we hit 10 digits. In the signed case, we can','line_number':292,'multiline':False]
['text':' stop when the number is zero.','line_number':293,'multiline':False]
['text':' Now that we have the number converted without its sign, deal with','line_number':311,'multiline':False]
['text':' the sign and zero padding.','line_number':312,'multiline':False]
['text':' Longest possible output from ToFixed for positive numbers:','line_number':321,'multiline':False]
['text':' [0-9]{kMaxFixedDigitsBeforePoint}\.[0-9]{kMaxFixedDigitsAfterPoint}?','line_number':322,'multiline':False]
['text':' Longest possible output from ToExponential:','line_number':326,'multiline':False]
['text':' [1-9]\.[0-9]{kMaxExponentialDigits}e[+-][0-9]{1,3}','line_number':327,'multiline':False]
['text':' (std::numeric_limits<double>::max() has exponent 308).','line_number':328,'multiline':False]
['text':' Longest possible output from ToPrecise:','line_number':332,'multiline':False]
['text':' [0-9\.]{kMaxPrecisionDigits+1} or','line_number':333,'multiline':False]
['text':' [1-9]\.[0-9]{kMaxPrecisionDigits-1}e[+-][0-9]{1,3}','line_number':334,'multiline':False]
['text':'
 * Convert a double precision floating point number into its printable
 * form.
 ','line_number':346,'multiline':True]
['text':' Longest of the above cases, plus space for a terminal nul character.','line_number':359,'multiline':False]
['text':' "If the precision is missing, it shall be taken as 6."','line_number':370,'multiline':False]
['text':' "If an explicit precision is zero, it shall be taken as 1."','line_number':385,'multiline':False]
['text':'
 * Convert a string into its printable form.  "width" is the output
 * width. "prec" is the maximum number of characters of "s" to output,
 * where -1 means until NUL.
 ','line_number':397,'multiline':True]
['text':' Limit string length by precision value','line_number':411,'multiline':False]
['text':' and away we go','line_number':417,'multiline':False]
['text':'
 * BuildArgArray stands for Numbered Argument list Sprintf
 * for example,
 *      fmp = "%4$i, %2$d, %3s, %1d";
 * the number must start from 1, and no gap among them
 ','line_number':421,'multiline':True]
['text':' First pass:','line_number':432,'multiline':False]
['text':' Detemine how many legal % I have got, then allocate space.','line_number':433,'multiline':False]
['text':' skip %% case','line_number':441,'multiline':False]
['text':' numbered argument case','line_number':447,'multiline':False]
['text':' non-numbered argument case','line_number':452,'multiline':False]
['text':' Only allow a limited number of arguments.','line_number':469,'multiline':False]
['text':' Second pass:','line_number':480,'multiline':False]
['text':' Set nas[].type.','line_number':481,'multiline':False]
['text':' should improve error check later','line_number':494,'multiline':False]
['text':' nas[cn] starts from 0, and make sure nas[cn].type is not assigned.','line_number':503,'multiline':False]
['text':' flags','line_number':511,'multiline':False]
['text':' width','line_number':516,'multiline':False]
['text':' not supported feature, for the argument is not numbered','line_number':518,'multiline':False]
['text':' precision','line_number':526,'multiline':False]
['text':' not supported feature, for the argument is not numbered','line_number':530,'multiline':False]
['text':' size','line_number':539,'multiline':False]
['text':' format','line_number':587,'multiline':False]
['text':' Mark as unsigned type.','line_number':598,'multiline':False]
['text':' Other type sizes are not supported here.','line_number':631,'multiline':False]
['text':' get a legal para.','line_number':646,'multiline':False]
['text':' Third pass:','line_number':652,'multiline':False]
['text':' Fill nas[].ap.','line_number':653,'multiline':False]
['text':' A TYPE_UNKNOWN here means that the format asked for a','line_number':657,'multiline':False]
['text':' positional argument without specifying the meaning of some','line_number':658,'multiline':False]
['text':' earlier argument.','line_number':659,'multiline':False]
['text':' Build an argument array, IF the fmt is numbered argument','line_number':734,'multiline':False]
['text':' list style, to contain the Numbered Argument list pointers.','line_number':735,'multiline':False]
['text':' the fmt contains error Numbered Argument format, jliu@netscape.com','line_number':739,'multiline':False]
['text':' Gobble up the % format string. Hopefully we have handled all','line_number':752,'multiline':False]
['text':' of the strange cases!','line_number':753,'multiline':False]
['text':' quoting a % with %%','line_number':757,'multiline':False]
['text':' the fmt contains the Numbered Arguments feature','line_number':766,'multiline':False]
['text':' should improve error check later','line_number':768,'multiline':False]
['text':' Examine optional flags.  Note that we do not implement the','line_number':781,'multiline':False]
['text':' '#' flag of sprintf().  The ANSI C spec. of the '#' flag is','line_number':782,'multiline':False]
['text':' somewhat ambiguous and not ideal, which is perhaps why','line_number':783,'multiline':False]
['text':' the various sprintf() implementations are inconsistent','line_number':784,'multiline':False]
['text':' on this feature.','line_number':785,'multiline':False]
['text':' width','line_number':808,'multiline':False]
['text':' precision','line_number':825,'multiline':False]
['text':' size','line_number':841,'multiline':False]
['text':' format','line_number':889,'multiline':False]
['text':' decimal/integer','line_number':893,'multiline':False]
['text':' octal','line_number':897,'multiline':False]
['text':' unsigned decimal','line_number':902,'multiline':False]
['text':' unsigned hex','line_number':907,'multiline':False]
['text':' unsigned HEX','line_number':912,'multiline':False]
['text':' Not supported here.','line_number':1066,'multiline':False]
['text':' Not a % token after all... skip it','line_number':1079,'multiline':False]
['text':'**********************************************************************','line_number':1092,'multiline':True]
