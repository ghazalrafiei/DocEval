['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- ','line_number':1,'multiline':True]
['text':' vim: set ts=8 sts=2 et sw=2 tw=80: ','line_number':2,'multiline':True]
['text':' This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':3,'multiline':True]
['text':' A vector of pointers space-optimized for a small number of elements. ','line_number':7,'multiline':True]
['text':' Array class for situations where a small number of NON-NULL elements (<= 2)','line_number':22,'multiline':False]
['text':' is expected, a large number of elements must be accommodated if necessary,','line_number':23,'multiline':False]
['text':' and the size of the class must be minimal. Typical vector implementations','line_number':24,'multiline':False]
['text':' will fulfill the first two requirements by simply adding inline storage','line_number':25,'multiline':False]
['text':' alongside the rest of their member variables. While this strategy works,','line_number':26,'multiline':False]
['text':' it brings unnecessary storage overhead for vectors with an expected small','line_number':27,'multiline':False]
['text':' number of elements. This class is intended to deal with that problem.','line_number':28,'multiline':False]
['text':'','line_number':29,'multiline':False]
['text':' This class is similar in performance to a vector class. Accessing its','line_number':30,'multiline':False]
['text':' elements when it has not grown over a size of 2 does not require an extra','line_number':31,'multiline':False]
['text':' level of indirection and will therefore be faster.','line_number':32,'multiline':False]
['text':'','line_number':33,'multiline':False]
['text':' The minimum (inline) size is 2 * sizeof(void*).','line_number':34,'multiline':False]
['text':'','line_number':35,'multiline':False]
['text':' Any modification of the array invalidates any outstanding iterators.','line_number':36,'multiline':False]
['text':' List-initialization would be nicer, but it only lets you initialize the','line_number':41,'multiline':False]
['text':' first union member.','line_number':42,'multiline':False]
['text':' Storing nullptr as an element is not permitted, but we do check for it','line_number':76,'multiline':False]
['text':' to avoid corruption issues in non-debug builds.','line_number':77,'multiline':False]
['text':' In addition to this we assert in debug builds to point out mistakes to','line_number':79,'multiline':False]
['text':' users of the class.','line_number':80,'multiline':False]
['text':' Expected case.','line_number':115,'multiline':False]
['text':' Methods for range-based for loops. Manipulation invalidates these.','line_number':193,'multiline':False]
['text':' Accessors for |mArray| element union arms.','line_number':222,'multiline':False]
['text':' In C++ active-union-arm terms:','line_number':238,'multiline':False]
['text':'','line_number':239,'multiline':False]
['text':'   - mArray[0].mValue is always active: a possibly null T*;','line_number':240,'multiline':False]
['text':'   - if mArray[0].mValue is null, mArray[1].mVector is active: a possibly','line_number':241,'multiline':False]
['text':'     null std::vector<T*>*; if mArray[0].mValue isn't null, mArray[1].mValue','line_number':242,'multiline':False]
['text':'     is active: a possibly null T*.','line_number':243,'multiline':False]
['text':'','line_number':244,'multiline':False]
['text':' SmallPointerArray begins empty, with mArray[1].mVector active and null.','line_number':245,'multiline':False]
['text':' Code that makes mArray[0].mValue non-null, i.e. assignments to first(),','line_number':246,'multiline':False]
['text':' must placement-new mArray[1].mValue with the proper value; code that goes','line_number':247,'multiline':False]
['text':' the opposite direction, making mArray[0].mValue null, must placement-new','line_number':248,'multiline':False]
['text':' mArray[1].mVector with the proper value.','line_number':249,'multiline':False]
['text':'','line_number':250,'multiline':False]
['text':' When !mArray[0].mValue && !mArray[1].mVector, the array is empty.','line_number':251,'multiline':False]
['text':'','line_number':252,'multiline':False]
['text':' When mArray[0].mValue && !mArray[1].mValue, the array has size 1 and','line_number':253,'multiline':False]
['text':' contains mArray[0].mValue.','line_number':254,'multiline':False]
['text':'','line_number':255,'multiline':False]
['text':' When mArray[0] && mArray[1], the array has size 2 and contains','line_number':256,'multiline':False]
['text':' mArray[0].mValue and mArray[1].mValue.','line_number':257,'multiline':False]
['text':'','line_number':258,'multiline':False]
['text':' When !mArray[0].mValue && mArray[1].mVector, mArray[1].mVector contains','line_number':259,'multiline':False]
['text':' the contents of an array of arbitrary size (even less than two if it ever','line_number':260,'multiline':False]
['text':' contained three elements and elements were removed).','line_number':261,'multiline':False]
['text':' namespace mozilla','line_number':268,'multiline':False]
['text':' mozilla_SmallPointerArray_h','line_number':270,'multiline':False]
