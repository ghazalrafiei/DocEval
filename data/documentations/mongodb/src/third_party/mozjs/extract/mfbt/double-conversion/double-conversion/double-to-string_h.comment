['text':' Copyright 2012 the V8 project authors. All rights reserved.','line_number':1,'multiline':False]
['text':' Redistribution and use in source and binary forms, with or without','line_number':2,'multiline':False]
['text':' modification, are permitted provided that the following conditions are','line_number':3,'multiline':False]
['text':' met:','line_number':4,'multiline':False]
['text':'','line_number':5,'multiline':False]
['text':'     * Redistributions of source code must retain the above copyright','line_number':6,'multiline':False]
['text':'       notice, this list of conditions and the following disclaimer.','line_number':7,'multiline':False]
['text':'     * Redistributions in binary form must reproduce the above','line_number':8,'multiline':False]
['text':'       copyright notice, this list of conditions and the following','line_number':9,'multiline':False]
['text':'       disclaimer in the documentation and/or other materials provided','line_number':10,'multiline':False]
['text':'       with the distribution.','line_number':11,'multiline':False]
['text':'     * Neither the name of Google Inc. nor the names of its','line_number':12,'multiline':False]
['text':'       contributors may be used to endorse or promote products derived','line_number':13,'multiline':False]
['text':'       from this software without specific prior written permission.','line_number':14,'multiline':False]
['text':'','line_number':15,'multiline':False]
['text':' THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS','line_number':16,'multiline':False]
['text':' "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT','line_number':17,'multiline':False]
['text':' LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR','line_number':18,'multiline':False]
['text':' A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT','line_number':19,'multiline':False]
['text':' OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,','line_number':20,'multiline':False]
['text':' SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT','line_number':21,'multiline':False]
['text':' LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,','line_number':22,'multiline':False]
['text':' DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY','line_number':23,'multiline':False]
['text':' THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT','line_number':24,'multiline':False]
['text':' (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE','line_number':25,'multiline':False]
['text':' OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.','line_number':26,'multiline':False]
['text':' When calling ToFixed with a double > 10^kMaxFixedDigitsBeforePoint','line_number':38,'multiline':False]
['text':' or a requested_digits parameter > kMaxFixedDigitsAfterPoint then the','line_number':39,'multiline':False]
['text':' function returns false.','line_number':40,'multiline':False]
['text':' When calling ToExponential with a requested_digits','line_number':44,'multiline':False]
['text':' parameter > kMaxExponentialDigits then the function returns false.','line_number':45,'multiline':False]
['text':' When calling ToPrecision with a requested_digits','line_number':48,'multiline':False]
['text':' parameter < kMinPrecisionDigits or requested_digits > kMaxPrecisionDigits','line_number':49,'multiline':False]
['text':' then the function returns false.','line_number':50,'multiline':False]
['text':' The maximal number of digits that are needed to emit a double in base 10.','line_number':54,'multiline':False]
['text':' A higher precision can be achieved by using more digits, but the shortest','line_number':55,'multiline':False]
['text':' accurate representation of any double will never use more digits than','line_number':56,'multiline':False]
['text':' kBase10MaximalLength.','line_number':57,'multiline':False]
['text':' Note that DoubleToAscii null-terminates its input. So the given buffer','line_number':58,'multiline':False]
['text':' should be at least kBase10MaximalLength + 1 characters long.','line_number':59,'multiline':False]
['text':' The maximal number of digits that are needed to emit a single in base 10.','line_number':62,'multiline':False]
['text':' A higher precision can be achieved by using more digits, but the shortest','line_number':63,'multiline':False]
['text':' accurate representation of any single will never use more digits than','line_number':64,'multiline':False]
['text':' kBase10MaximalLengthSingle.','line_number':65,'multiline':False]
['text':' The length of the longest string that 'ToShortest' can produce when the','line_number':68,'multiline':False]
['text':' converter is instantiated with EcmaScript defaults (see','line_number':69,'multiline':False]
['text':' 'EcmaScriptConverter')','line_number':70,'multiline':False]
['text':' This value does not include the trailing '\0' character.','line_number':71,'multiline':False]
['text':' This amount of characters is needed for negative values that hit the','line_number':72,'multiline':False]
['text':' 'decimal_in_shortest_low' limit. For example: "-0.0000033333333333333333"','line_number':73,'multiline':False]
['text':' Flags should be a bit-or combination of the possible Flags-enum.','line_number':85,'multiline':False]
['text':'  - NO_FLAGS: no special flags.','line_number':86,'multiline':False]
['text':'  - EMIT_POSITIVE_EXPONENT_SIGN: when the number is converted into exponent','line_number':87,'multiline':False]
['text':'    form, emits a '+' for positive exponents. Example: 1.2e+2.','line_number':88,'multiline':False]
['text':'  - EMIT_TRAILING_DECIMAL_POINT: when the input number is an integer and is','line_number':89,'multiline':False]
['text':'    converted into decimal format then a trailing decimal point is appended.','line_number':90,'multiline':False]
['text':'    Example: 2345.0 is converted to "2345.".','line_number':91,'multiline':False]
['text':'  - EMIT_TRAILING_ZERO_AFTER_POINT: in addition to a trailing decimal point','line_number':92,'multiline':False]
['text':'    emits a trailing '0'-character. This flag requires the','line_number':93,'multiline':False]
['text':'    EMIT_TRAILING_DECIMAL_POINT flag.','line_number':94,'multiline':False]
['text':'    Example: 2345.0 is converted to "2345.0".','line_number':95,'multiline':False]
['text':'  - UNIQUE_ZERO: "-0.0" is converted to "0.0".','line_number':96,'multiline':False]
['text':'  - NO_TRAILING_ZERO: Trailing zeros are removed from the fractional portion','line_number':97,'multiline':False]
['text':'    of the result in precision mode. Matches printf's %g.','line_number':98,'multiline':False]
['text':'    When EMIT_TRAILING_ZERO_AFTER_POINT is also given, one trailing zero is','line_number':99,'multiline':False]
['text':'    preserved.','line_number':100,'multiline':False]
['text':'','line_number':101,'multiline':False]
['text':' Infinity symbol and nan_symbol provide the string representation for these','line_number':102,'multiline':False]
['text':' special values. If the string is NULL and the special value is encountered','line_number':103,'multiline':False]
['text':' then the conversion functions return false.','line_number':104,'multiline':False]
['text':'','line_number':105,'multiline':False]
['text':' The exponent_character is used in exponential representations. It is','line_number':106,'multiline':False]
['text':' usually 'e' or 'E'.','line_number':107,'multiline':False]
['text':'','line_number':108,'multiline':False]
['text':' When converting to the shortest representation the converter will','line_number':109,'multiline':False]
['text':' represent input numbers in decimal format if they are in the interval','line_number':110,'multiline':False]
['text':' [10^decimal_in_shortest_low; 10^decimal_in_shortest_high[','line_number':111,'multiline':False]
['text':'    (lower boundary included, greater boundary excluded).','line_number':112,'multiline':False]
['text':' Example: with decimal_in_shortest_low = -6 and','line_number':113,'multiline':False]
['text':'               decimal_in_shortest_high = 21:','line_number':114,'multiline':False]
['text':'   ToShortest(0.000001)  -> "0.000001"','line_number':115,'multiline':False]
['text':'   ToShortest(0.0000001) -> "1e-7"','line_number':116,'multiline':False]
['text':'   ToShortest(111111111111111111111.0)  -> "111111111111111110000"','line_number':117,'multiline':False]
['text':'   ToShortest(100000000000000000000.0)  -> "100000000000000000000"','line_number':118,'multiline':False]
['text':'   ToShortest(1111111111111111111111.0) -> "1.1111111111111111e+21"','line_number':119,'multiline':False]
['text':'','line_number':120,'multiline':False]
['text':' When converting to precision mode the converter may add','line_number':121,'multiline':False]
['text':' max_leading_padding_zeroes before returning the number in exponential','line_number':122,'multiline':False]
['text':' format.','line_number':123,'multiline':False]
['text':' Example with max_leading_padding_zeroes_in_precision_mode = 6.','line_number':124,'multiline':False]
['text':'   ToPrecision(0.0000012345, 2) -> "0.0000012"','line_number':125,'multiline':False]
['text':'   ToPrecision(0.00000012345, 2) -> "1.2e-7"','line_number':126,'multiline':False]
['text':' Similarily the converter may add up to','line_number':127,'multiline':False]
['text':' max_trailing_padding_zeroes_in_precision_mode in precision mode to avoid','line_number':128,'multiline':False]
['text':' returning an exponential representation. A zero added by the','line_number':129,'multiline':False]
['text':' EMIT_TRAILING_ZERO_AFTER_POINT flag is counted for this limit.','line_number':130,'multiline':False]
['text':' Examples for max_trailing_padding_zeroes_in_precision_mode = 1:','line_number':131,'multiline':False]
['text':'   ToPrecision(230.0, 2) -> "230"','line_number':132,'multiline':False]
['text':'   ToPrecision(230.0, 2) -> "230."  with EMIT_TRAILING_DECIMAL_POINT.','line_number':133,'multiline':False]
['text':'   ToPrecision(230.0, 2) -> "2.3e2" with EMIT_TRAILING_ZERO_AFTER_POINT.','line_number':134,'multiline':False]
['text':'','line_number':135,'multiline':False]
['text':' The min_exponent_width is used for exponential representations.','line_number':136,'multiline':False]
['text':' The converter adds leading '0's to the exponent until the exponent','line_number':137,'multiline':False]
['text':' is at least min_exponent_width digits long.','line_number':138,'multiline':False]
['text':' The min_exponent_width is clamped to 5.','line_number':139,'multiline':False]
['text':' As such, the exponent may never have more than 5 digits in total.','line_number':140,'multiline':False]
['text':' When 'trailing zero after the point' is set, then 'trailing point'','line_number':161,'multiline':False]
['text':' must be set too.','line_number':162,'multiline':False]
['text':' Returns a converter following the EcmaScript specification.','line_number':167,'multiline':False]
['text':'','line_number':168,'multiline':False]
['text':' Flags: UNIQUE_ZERO and EMIT_POSITIVE_EXPONENT_SIGN.','line_number':169,'multiline':False]
['text':' Special values: "Infinity" and "NaN".','line_number':170,'multiline':False]
['text':' Lower case 'e' for exponential values.','line_number':171,'multiline':False]
['text':' decimal_in_shortest_low: -6','line_number':172,'multiline':False]
['text':' decimal_in_shortest_high: 21','line_number':173,'multiline':False]
['text':' max_leading_padding_zeroes_in_precision_mode: 6','line_number':174,'multiline':False]
['text':' max_trailing_padding_zeroes_in_precision_mode: 0','line_number':175,'multiline':False]
['text':' Computes the shortest string of digits that correctly represent the input','line_number':178,'multiline':False]
['text':' number. Depending on decimal_in_shortest_low and decimal_in_shortest_high','line_number':179,'multiline':False]
['text':' (see constructor) it then either returns a decimal representation, or an','line_number':180,'multiline':False]
['text':' exponential representation.','line_number':181,'multiline':False]
['text':' Example with decimal_in_shortest_low = -6,','line_number':182,'multiline':False]
['text':'              decimal_in_shortest_high = 21,','line_number':183,'multiline':False]
['text':'              EMIT_POSITIVE_EXPONENT_SIGN activated, and','line_number':184,'multiline':False]
['text':'              EMIT_TRAILING_DECIMAL_POINT deactived:','line_number':185,'multiline':False]
['text':'   ToShortest(0.000001)  -> "0.000001"','line_number':186,'multiline':False]
['text':'   ToShortest(0.0000001) -> "1e-7"','line_number':187,'multiline':False]
['text':'   ToShortest(111111111111111111111.0)  -> "111111111111111110000"','line_number':188,'multiline':False]
['text':'   ToShortest(100000000000000000000.0)  -> "100000000000000000000"','line_number':189,'multiline':False]
['text':'   ToShortest(1111111111111111111111.0) -> "1.1111111111111111e+21"','line_number':190,'multiline':False]
['text':'','line_number':191,'multiline':False]
['text':' Note: the conversion may round the output if the returned string','line_number':192,'multiline':False]
['text':' is accurate enough to uniquely identify the input-number.','line_number':193,'multiline':False]
['text':' For example the most precise representation of the double 9e59 equals','line_number':194,'multiline':False]
['text':' "899999999999999918767229449717619953810131273674690656206848", but','line_number':195,'multiline':False]
['text':' the converter will return the shorter (but still correct) "9e59".','line_number':196,'multiline':False]
['text':'','line_number':197,'multiline':False]
['text':' Returns true if the conversion succeeds. The conversion always succeeds','line_number':198,'multiline':False]
['text':' except when the input value is special and no infinity_symbol or','line_number':199,'multiline':False]
['text':' nan_symbol has been given to the constructor.','line_number':200,'multiline':False]
['text':'','line_number':201,'multiline':False]
['text':' The length of the longest result is the maximum of the length of the','line_number':202,'multiline':False]
['text':' following string representations (each with possible examples):','line_number':203,'multiline':False]
['text':' - NaN and negative infinity: "NaN", "-Infinity", "-inf".','line_number':204,'multiline':False]
['text':' - -10^(decimal_in_shortest_high - 1):','line_number':205,'multiline':False]
['text':'      "-100000000000000000000", "-1000000000000000.0"','line_number':206,'multiline':False]
['text':' - the longest string in range [0; -10^decimal_in_shortest_low]. Generally,','line_number':207,'multiline':False]
['text':'   this string is 3 + kBase10MaximalLength - decimal_in_shortest_low.','line_number':208,'multiline':False]
['text':'   (Sign, '0', decimal point, padding zeroes for decimal_in_shortest_low,','line_number':209,'multiline':False]
['text':'   and the significant digits).','line_number':210,'multiline':False]
['text':'      "-0.0000033333333333333333", "-0.0012345678901234567"','line_number':211,'multiline':False]
['text':' - the longest exponential representation. (A negative number with','line_number':212,'multiline':False]
['text':'   kBase10MaximalLength significant digits).','line_number':213,'multiline':False]
['text':'      "-1.7976931348623157e+308", "-1.7976931348623157E308"','line_number':214,'multiline':False]
['text':' In addition, the buffer must be able to hold the trailing '\0' character.','line_number':215,'multiline':False]
['text':' Same as ToShortest, but for single-precision floats.','line_number':220,'multiline':False]
['text':' Computes a decimal representation with a fixed number of digits after the','line_number':226,'multiline':False]
['text':' decimal point. The last emitted digit is rounded.','line_number':227,'multiline':False]
['text':'','line_number':228,'multiline':False]
['text':' Examples:','line_number':229,'multiline':False]
['text':'   ToFixed(3.12, 1) -> "3.1"','line_number':230,'multiline':False]
['text':'   ToFixed(3.1415, 3) -> "3.142"','line_number':231,'multiline':False]
['text':'   ToFixed(1234.56789, 4) -> "1234.5679"','line_number':232,'multiline':False]
['text':'   ToFixed(1.23, 5) -> "1.23000"','line_number':233,'multiline':False]
['text':'   ToFixed(0.1, 4) -> "0.1000"','line_number':234,'multiline':False]
['text':'   ToFixed(1e30, 2) -> "1000000000000000019884624838656.00"','line_number':235,'multiline':False]
['text':'   ToFixed(0.1, 30) -> "0.100000000000000005551115123126"','line_number':236,'multiline':False]
['text':'   ToFixed(0.1, 17) -> "0.10000000000000001"','line_number':237,'multiline':False]
['text':'','line_number':238,'multiline':False]
['text':' If requested_digits equals 0, then the tail of the result depends on','line_number':239,'multiline':False]
['text':' the EMIT_TRAILING_DECIMAL_POINT and EMIT_TRAILING_ZERO_AFTER_POINT.','line_number':240,'multiline':False]
['text':' Examples, for requested_digits == 0,','line_number':241,'multiline':False]
['text':'   let EMIT_TRAILING_DECIMAL_POINT and EMIT_TRAILING_ZERO_AFTER_POINT be','line_number':242,'multiline':False]
['text':'    - false and false: then 123.45 -> 123','line_number':243,'multiline':False]
['text':'                             0.678 -> 1','line_number':244,'multiline':False]
['text':'    - true and false: then 123.45 -> 123.','line_number':245,'multiline':False]
['text':'                            0.678 -> 1.','line_number':246,'multiline':False]
['text':'    - true and true: then 123.45 -> 123.0','line_number':247,'multiline':False]
['text':'                           0.678 -> 1.0','line_number':248,'multiline':False]
['text':'','line_number':249,'multiline':False]
['text':' Returns true if the conversion succeeds. The conversion always succeeds','line_number':250,'multiline':False]
['text':' except for the following cases:','line_number':251,'multiline':False]
['text':'   - the input value is special and no infinity_symbol or nan_symbol has','line_number':252,'multiline':False]
['text':'     been provided to the constructor,','line_number':253,'multiline':False]
['text':'   - 'value' > 10^kMaxFixedDigitsBeforePoint, or','line_number':254,'multiline':False]
['text':'   - 'requested_digits' > kMaxFixedDigitsAfterPoint.','line_number':255,'multiline':False]
['text':' The last two conditions imply that the result for non-special values never','line_number':256,'multiline':False]
['text':' contains more than','line_number':257,'multiline':False]
['text':'  1 + kMaxFixedDigitsBeforePoint + 1 + kMaxFixedDigitsAfterPoint characters','line_number':258,'multiline':False]
['text':' (one additional character for the sign, and one for the decimal point).','line_number':259,'multiline':False]
['text':' In addition, the buffer must be able to hold the trailing '\0' character.','line_number':260,'multiline':False]
['text':' Computes a representation in exponential format with requested_digits','line_number':265,'multiline':False]
['text':' after the decimal point. The last emitted digit is rounded.','line_number':266,'multiline':False]
['text':' If requested_digits equals -1, then the shortest exponential representation','line_number':267,'multiline':False]
['text':' is computed.','line_number':268,'multiline':False]
['text':'','line_number':269,'multiline':False]
['text':' Examples with EMIT_POSITIVE_EXPONENT_SIGN deactivated, and','line_number':270,'multiline':False]
['text':'               exponent_character set to 'e'.','line_number':271,'multiline':False]
['text':'   ToExponential(3.12, 1) -> "3.1e0"','line_number':272,'multiline':False]
['text':'   ToExponential(5.0, 3) -> "5.000e0"','line_number':273,'multiline':False]
['text':'   ToExponential(0.001, 2) -> "1.00e-3"','line_number':274,'multiline':False]
['text':'   ToExponential(3.1415, -1) -> "3.1415e0"','line_number':275,'multiline':False]
['text':'   ToExponential(3.1415, 4) -> "3.1415e0"','line_number':276,'multiline':False]
['text':'   ToExponential(3.1415, 3) -> "3.142e0"','line_number':277,'multiline':False]
['text':'   ToExponential(123456789000000, 3) -> "1.235e14"','line_number':278,'multiline':False]
['text':'   ToExponential(1000000000000000019884624838656.0, -1) -> "1e30"','line_number':279,'multiline':False]
['text':'   ToExponential(1000000000000000019884624838656.0, 32) ->','line_number':280,'multiline':False]
['text':'                     "1.00000000000000001988462483865600e30"','line_number':281,'multiline':False]
['text':'   ToExponential(1234, 0) -> "1e3"','line_number':282,'multiline':False]
['text':'','line_number':283,'multiline':False]
['text':' Returns true if the conversion succeeds. The conversion always succeeds','line_number':284,'multiline':False]
['text':' except for the following cases:','line_number':285,'multiline':False]
['text':'   - the input value is special and no infinity_symbol or nan_symbol has','line_number':286,'multiline':False]
['text':'     been provided to the constructor,','line_number':287,'multiline':False]
['text':'   - 'requested_digits' > kMaxExponentialDigits.','line_number':288,'multiline':False]
['text':'','line_number':289,'multiline':False]
['text':' The last condition implies that the result never contains more than','line_number':290,'multiline':False]
['text':' kMaxExponentialDigits + 8 characters (the sign, the digit before the','line_number':291,'multiline':False]
['text':' decimal point, the decimal point, the exponent character, the','line_number':292,'multiline':False]
['text':' exponent's sign, and at most 3 exponent digits).','line_number':293,'multiline':False]
['text':' In addition, the buffer must be able to hold the trailing '\0' character.','line_number':294,'multiline':False]
['text':' Computes 'precision' leading digits of the given 'value' and returns them','line_number':300,'multiline':False]
['text':' either in exponential or decimal format, depending on','line_number':301,'multiline':False]
['text':' max_{leading|trailing}_padding_zeroes_in_precision_mode (given to the','line_number':302,'multiline':False]
['text':' constructor).','line_number':303,'multiline':False]
['text':' The last computed digit is rounded.','line_number':304,'multiline':False]
['text':'','line_number':305,'multiline':False]
['text':' Example with max_leading_padding_zeroes_in_precision_mode = 6.','line_number':306,'multiline':False]
['text':'   ToPrecision(0.0000012345, 2) -> "0.0000012"','line_number':307,'multiline':False]
['text':'   ToPrecision(0.00000012345, 2) -> "1.2e-7"','line_number':308,'multiline':False]
['text':' Similarily the converter may add up to','line_number':309,'multiline':False]
['text':' max_trailing_padding_zeroes_in_precision_mode in precision mode to avoid','line_number':310,'multiline':False]
['text':' returning an exponential representation. A zero added by the','line_number':311,'multiline':False]
['text':' EMIT_TRAILING_ZERO_AFTER_POINT flag is counted for this limit.','line_number':312,'multiline':False]
['text':' Examples for max_trailing_padding_zeroes_in_precision_mode = 1:','line_number':313,'multiline':False]
['text':'   ToPrecision(230.0, 2) -> "230"','line_number':314,'multiline':False]
['text':'   ToPrecision(230.0, 2) -> "230."  with EMIT_TRAILING_DECIMAL_POINT.','line_number':315,'multiline':False]
['text':'   ToPrecision(230.0, 2) -> "2.3e2" with EMIT_TRAILING_ZERO_AFTER_POINT.','line_number':316,'multiline':False]
['text':' Examples for max_trailing_padding_zeroes_in_precision_mode = 3, and no','line_number':317,'multiline':False]
['text':'    EMIT_TRAILING_ZERO_AFTER_POINT:','line_number':318,'multiline':False]
['text':'   ToPrecision(123450.0, 6) -> "123450"','line_number':319,'multiline':False]
['text':'   ToPrecision(123450.0, 5) -> "123450"','line_number':320,'multiline':False]
['text':'   ToPrecision(123450.0, 4) -> "123500"','line_number':321,'multiline':False]
['text':'   ToPrecision(123450.0, 3) -> "123000"','line_number':322,'multiline':False]
['text':'   ToPrecision(123450.0, 2) -> "1.2e5"','line_number':323,'multiline':False]
['text':'','line_number':324,'multiline':False]
['text':' Returns true if the conversion succeeds. The conversion always succeeds','line_number':325,'multiline':False]
['text':' except for the following cases:','line_number':326,'multiline':False]
['text':'   - the input value is special and no infinity_symbol or nan_symbol has','line_number':327,'multiline':False]
['text':'     been provided to the constructor,','line_number':328,'multiline':False]
['text':'   - precision < kMinPericisionDigits','line_number':329,'multiline':False]
['text':'   - precision > kMaxPrecisionDigits','line_number':330,'multiline':False]
['text':'','line_number':331,'multiline':False]
['text':' The last condition implies that the result never contains more than','line_number':332,'multiline':False]
['text':' kMaxPrecisionDigits + 7 characters (the sign, the decimal point, the','line_number':333,'multiline':False]
['text':' exponent character, the exponent's sign, and at most 3 exponent digits).','line_number':334,'multiline':False]
['text':' In addition, the buffer must be able to hold the trailing '\0' character.','line_number':335,'multiline':False]
['text':' Produce the shortest correct representation.','line_number':341,'multiline':False]
['text':' For example the output of 0.299999999999999988897 is (the less accurate','line_number':342,'multiline':False]
['text':' but correct) 0.3.','line_number':343,'multiline':False]
['text':' Same as SHORTEST, but for single-precision floats.','line_number':345,'multiline':False]
['text':' Produce a fixed number of digits after the decimal point.','line_number':347,'multiline':False]
['text':' For instance fixed(0.1, 4) becomes 0.1000','line_number':348,'multiline':False]
['text':' If the input number is big, the output will be big.','line_number':349,'multiline':False]
['text':' Fixed number of digits (independent of the decimal point).','line_number':351,'multiline':False]
['text':' Converts the given double 'v' to digit characters. 'v' must not be NaN,','line_number':355,'multiline':False]
['text':' +Infinity, or -Infinity. In SHORTEST_SINGLE-mode this restriction also','line_number':356,'multiline':False]
['text':' applies to 'v' after it has been casted to a single-precision float. That','line_number':357,'multiline':False]
['text':' is, in this mode static_cast<float>(v) must not be NaN, +Infinity or','line_number':358,'multiline':False]
['text':' -Infinity.','line_number':359,'multiline':False]
['text':'','line_number':360,'multiline':False]
['text':' The result should be interpreted as buffer * 10^(point-length).','line_number':361,'multiline':False]
['text':'','line_number':362,'multiline':False]
['text':' The digits are written to the buffer in the platform's charset, which is','line_number':363,'multiline':False]
['text':' often UTF-8 (with ASCII-range digits) but may be another charset, such','line_number':364,'multiline':False]
['text':' as EBCDIC.','line_number':365,'multiline':False]
['text':'','line_number':366,'multiline':False]
['text':' The output depends on the given mode:','line_number':367,'multiline':False]
['text':'  - SHORTEST: produce the least amount of digits for which the internal','line_number':368,'multiline':False]
['text':'   identity requirement is still satisfied. If the digits are printed','line_number':369,'multiline':False]
['text':'   (together with the correct exponent) then reading this number will give','line_number':370,'multiline':False]
['text':'   'v' again. The buffer will choose the representation that is closest to','line_number':371,'multiline':False]
['text':'   'v'. If there are two at the same distance, than the one farther away','line_number':372,'multiline':False]
['text':'   from 0 is chosen (halfway cases - ending with 5 - are rounded up).','line_number':373,'multiline':False]
['text':'   In this mode the 'requested_digits' parameter is ignored.','line_number':374,'multiline':False]
['text':'  - SHORTEST_SINGLE: same as SHORTEST but with single-precision.','line_number':375,'multiline':False]
['text':'  - FIXED: produces digits necessary to print a given number with','line_number':376,'multiline':False]
['text':'   'requested_digits' digits after the decimal point. The produced digits','line_number':377,'multiline':False]
['text':'   might be too short in which case the caller has to fill the remainder','line_number':378,'multiline':False]
['text':'   with '0's.','line_number':379,'multiline':False]
['text':'   Example: toFixed(0.001, 5) is allowed to return buffer="1", point=-2.','line_number':380,'multiline':False]
['text':'   Halfway cases are rounded towards +/-Infinity (away from 0). The call','line_number':381,'multiline':False]
['text':'   toFixed(0.15, 2) thus returns buffer="2", point=0.','line_number':382,'multiline':False]
['text':'   The returned buffer may contain digits that would be truncated from the','line_number':383,'multiline':False]
['text':'   shortest representation of the input.','line_number':384,'multiline':False]
['text':'  - PRECISION: produces 'requested_digits' where the first digit is not '0'.','line_number':385,'multiline':False]
['text':'   Even though the length of produced digits usually equals','line_number':386,'multiline':False]
['text':'   'requested_digits', the function is allowed to return fewer digits, in','line_number':387,'multiline':False]
['text':'   which case the caller has to fill the missing digits with '0's.','line_number':388,'multiline':False]
['text':'   Halfway cases are again rounded away from 0.','line_number':389,'multiline':False]
['text':' DoubleToAscii expects the given buffer to be big enough to hold all','line_number':390,'multiline':False]
['text':' digits and a terminating null-character. In SHORTEST-mode it expects a','line_number':391,'multiline':False]
['text':' buffer of at least kBase10MaximalLength + 1. In all other modes the','line_number':392,'multiline':False]
['text':' requested_digits parameter and the padding-zeroes limit the size of the','line_number':393,'multiline':False]
['text':' output. Don't forget the decimal point, the exponent character and the','line_number':394,'multiline':False]
['text':' terminating null-character when computing the maximal output size.','line_number':395,'multiline':False]
['text':' The given length is only used in debug mode to ensure the buffer is big','line_number':396,'multiline':False]
['text':' enough.','line_number':397,'multiline':False]
['text':' Implementation for ToShortest and ToShortestSingle.','line_number':408,'multiline':False]
['text':' If the value is a special value (NaN or Infinity) constructs the','line_number':413,'multiline':False]
['text':' corresponding string using the configured infinity/nan-symbol.','line_number':414,'multiline':False]
['text':' If either of them is NULL or the value is not special then the','line_number':415,'multiline':False]
['text':' function returns false.','line_number':416,'multiline':False]
['text':' Constructs an exponential representation (i.e. 1.234e56).','line_number':418,'multiline':False]
['text':' The given exponent assumes a decimal point after the first decimal digit.','line_number':419,'multiline':False]
['text':' Creates a decimal representation (i.e 1234.5678).','line_number':424,'multiline':False]
['text':' namespace double_conversion','line_number':444,'multiline':False]
['text':' DOUBLE_CONVERSION_DOUBLE_TO_STRING_H_','line_number':446,'multiline':False]
