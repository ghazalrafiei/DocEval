['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- ','line_number':1,'multiline':True]
['text':' vim: set ts=8 sts=2 et sw=2 tw=80: ','line_number':2,'multiline':True]
['text':' This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':3,'multiline':True]
['text':' Functionality related to memory alignment. ','line_number':7,'multiline':True]
['text':'
 * This class, and the corresponding macro MOZ_ALIGNOF, figures out how many
 * bytes of alignment a given type needs.
 ','line_number':18,'multiline':True]
['text':' Aligner may be used to check alignment of types with deleted dtors. This','line_number':28,'multiline':False]
['text':' results in such specializations having implicitly deleted dtors, which','line_number':29,'multiline':False]
['text':' causes fatal warnings on MSVC (see bug 1481005). As we don't create','line_number':30,'multiline':False]
['text':' Aligners, we can avoid this warning by explicitly deleting the dtor.','line_number':31,'multiline':False]
['text':' namespace detail','line_number':46,'multiline':False]
['text':'
 * Use this instead of alignof to align struct field as if it is inside
 * a struct. On some platforms, there exist types which have different
 * alignment between when it is used on its own and when it is used on
 * a struct field.
 *
 * Known examples are 64bit types (uint64_t, double) on 32bit Linux,
 * where they have 8byte alignment on their own, and 4byte alignment
 * when in struct.
 ','line_number':48,'multiline':True]
['text':'
 * Declare the MOZ_ALIGNED_DECL macro for declaring aligned types.
 *
 * For instance,
 *
 *   MOZ_ALIGNED_DECL(8, char arr[2]);
 *
 * will declare a two-character array |arr| aligned to 8 bytes.
 ','line_number':60,'multiline':True]
['text':'
 * AlignedElem<N> is a structure whose alignment is guaranteed to be at least N
 * bytes.
 *
 * We support 1, 2, 4, 8, and 16-byte alignment.
 ','line_number':79,'multiline':True]
['text':'
 * We have to specialize this template because GCC doesn't like
 * __attribute__((aligned(foo))) where foo is a template parameter.
 ','line_number':88,'multiline':True]
['text':' AlignedStorage2 is non-copyable: the default copy constructor violates','line_number':130,'multiline':False]
['text':' strict aliasing rules, per bug 1269319.','line_number':131,'multiline':False]
['text':' namespace mozilla ','line_number':136,'multiline':True]
['text':' mozilla_Alignment_h ','line_number':138,'multiline':True]
