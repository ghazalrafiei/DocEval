['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- ','line_number':1,'multiline':True]
['text':' vim: set ts=8 sts=2 et sw=2 tw=80: ','line_number':2,'multiline':True]
['text':' This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':3,'multiline':True]
['text':' Simple class for computing SHA1. ','line_number':7,'multiline':True]
['text':'*
 * This class computes the SHA1 hash of a byte sequence, or of the concatenation
 * of multiple sequences.  For example, computing the SHA1 of two sequences of
 * bytes could be done as follows:
 *
 *   void SHA1(const uint8_t* buf1, uint32_t size1,
 *             const uint8_t* buf2, uint32_t size2,
 *             SHA1Sum::Hash& hash)
 *   {
 *     SHA1Sum s;
 *     s.update(buf1, size1);
 *     s.update(buf2, size2);
 *     s.finish(hash);
 *   }
 *
 * The finish method may only be called once and cannot be followed by calls
 * to update.
 ','line_number':19,'multiline':True]
['text':' input buffer ','line_number':39,'multiline':True]
['text':' count of hashed bytes. ','line_number':42,'multiline':True]
['text':' 5 state variables, 16 tmp values, 1 extra ','line_number':43,'multiline':True]
['text':' Add len bytes of dataIn to the data sequence being hashed. ','line_number':52,'multiline':True]
['text':' Compute the final hash of all data into hashOut. ','line_number':55,'multiline':True]
['text':' namespace mozilla ','line_number':59,'multiline':True]
['text':' mozilla_SHA1_h ','line_number':61,'multiline':True]
