['text':'
 * LZ4 auto-framing library
 * Copyright (C) 2011-2016, Yann Collet.
 *
 * BSD 2-Clause License (http://www.opensource.org/licenses/bsd-license.php)
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 * - Redistributions of source code must retain the above copyright
 *   notice, this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above
 *   copyright notice, this list of conditions and the following disclaimer
 *   in the documentation and/or other materials provided with the
 *   distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * You can contact the author at :
 * - LZ4 homepage : http://www.lz4.org
 * - LZ4 source repository : https://github.com/lz4/lz4
 ','line_number':1,'multiline':True]
['text':' LZ4F is a stand-alone API to create LZ4-compressed Frames
 * in full conformance with specification v1.6.1 .
 * This library rely upon memory management capabilities (malloc, free)
 * provided either by <stdlib.h>,
 * or redirected towards another library of user's choice
 * (see Memory Routines below).
 ','line_number':35,'multiline':True]
['text':'-************************************
*  Compiler Options
*************************************','line_number':44,'multiline':True]
['text':' Visual Studio ','line_number':47,'multiline':True]
['text':' disable: C4127: conditional expression is constant ','line_number':48,'multiline':True]
['text':'-************************************
*  Tuning parameters
*************************************','line_number':52,'multiline':True]
['text':'
 * LZ4F_HEAPMODE :
 * Select how default compression functions will allocate memory for their hash table,
 * in memory stack (0:default, fastest), or in memory heap (1:requires malloc()).
 ','line_number':55,'multiline':True]
['text':'-************************************
*  Memory routines
*************************************','line_number':65,'multiline':True]
['text':'
 * User may redirect invocations of
 * malloc(), calloc() and free()
 * towards another library or solution of their choice
 * by modifying below section.
 ','line_number':68,'multiline':True]
['text':' avoid redefinition when sources are coalesced ','line_number':74,'multiline':True]
['text':' malloc, calloc, free ','line_number':75,'multiline':True]
['text':' memset, memcpy, memmove ','line_number':81,'multiline':True]
['text':' avoid redefinition when sources are coalesced ','line_number':82,'multiline':True]
['text':'-************************************
*  Library declarations
*************************************','line_number':87,'multiline':True]
['text':'-************************************
*  Debug
*************************************','line_number':100,'multiline':True]
['text':' use only *after* variable declarations ','line_number':111,'multiline':True]
['text':' disabled ','line_number':123,'multiline':True]
['text':'-************************************
*  Basic Types
*************************************','line_number':127,'multiline':True]
['text':' C99 ','line_number':130,'multiline':True]
['text':' unoptimized version; solves endianess & alignment issues ','line_number':146,'multiline':True]
['text':'-************************************
*  Constants
*************************************','line_number':194,'multiline':True]
['text':' avoid double definition ','line_number':197,'multiline':True]
['text':'  7 ','line_number':214,'multiline':True]
['text':' 19 ','line_number':215,'multiline':True]
['text':' block header : size, and compress flag ','line_number':216,'multiline':True]
['text':' block footer : checksum (optional) ','line_number':217,'multiline':True]
['text':'-************************************
*  Structures and local types
*************************************','line_number':220,'multiline':True]
['text':' sized for: 0 = none, 1 = lz4 ctx, 2 = lz4hc ctx ','line_number':237,'multiline':True]
['text':' in use as: 0 = none, 1 = lz4 ctx, 2 = lz4hc ctx ','line_number':238,'multiline':True]
['text':'-************************************
*  Error management
*************************************','line_number':242,'multiline':True]
['text':' A compilation error here means sizeof(ptrdiff_t) is not large enough ','line_number':269,'multiline':True]
['text':'-************************************
*  Private functions
*************************************','line_number':289,'multiline':True]
['text':'-************************************
*  Simple-pass compression functions
*************************************','line_number':301,'multiline':True]
['text':'! LZ4F_compressBound_internal() :
 *  Provides dstCapacity given a srcSize to guarantee operation success in worst case situations.
 *  prefsPtr is optional : if NULL is provided, preferences will be set to cover worst case scenario.
 * @return is always the same for a srcSize and prefsPtr, so it can be relied upon to size reusable buffers.
 *  When srcSize==0, LZ4F_compressBound() provides an upper bound for LZ4F_flush() and LZ4F_compressEnd() operations.
 ','line_number':318,'multiline':True]
['text':' worst case ','line_number':329,'multiline':True]
['text':' worst case ','line_number':330,'multiline':True]
['text':' max header size, including optional fields ','line_number':354,'multiline':True]
['text':'! LZ4F_compressFrame_usingCDict() :
 *  Compress srcBuffer using a dictionary, in a single step.
 *  cdict can be NULL, in which case, no dictionary is used.
 *  dstBuffer MUST be >= LZ4F_compressFrameBound(srcSize, preferencesPtr).
 *  The LZ4F_preferences_t structure is optional : you may provide NULL as argument,
 *  however, it's the only way to provide a dictID, so it's not recommended.
 * @return : number of bytes written into dstBuffer,
 *           or an error code if it fails (can be tested using LZ4F_isError())
 ','line_number':364,'multiline':True]
['text':' auto-correct content size if selected (!=0) ','line_number':390,'multiline':True]
['text':' only one block => no need for inter-block link ','line_number':395,'multiline':True]
['text':' condition to guarantee success ','line_number':400,'multiline':True]
['text':' write header ','line_number':403,'multiline':True]
['text':' header size ','line_number':405,'multiline':True]
['text':' flush last block, and generate suffix ','line_number':413,'multiline':True]
['text':'! LZ4F_compressFrame() :
 *  Compress an entire srcBuffer into a valid LZ4 frame, in a single step.
 *  dstBuffer MUST be >= LZ4F_compressFrameBound(srcSize, preferencesPtr).
 *  The LZ4F_preferences_t structure is optional : you can provide NULL as argument. All preferences will be set to default.
 * @return : number of bytes written into dstBuffer.
 *           or an error code if it fails (can be tested using LZ4F_isError())
 ','line_number':422,'multiline':True]
['text':' mess with real buffer size to prevent dynamic allocation; works only because autoflush==1 & stableSrc==1 ','line_number':446,'multiline':True]
['text':'-***************************************************
*   Dictionary compression
****************************************************','line_number':474,'multiline':True]
['text':' typedef'd to LZ4F_CDict within lz4frame_static.h ','line_number':482,'multiline':True]
['text':'! LZ4F_createCDict() :
 *  When compressing multiple messages / blocks with the same dictionary, it's recommended to load it just once.
 *  LZ4F_createCDict() will create a digested dictionary, ready to start future compression operations without startup delay.
 *  LZ4F_CDict can be created once and shared by multiple threads concurrently, since its usage is read-only.
 * `dictBuffer` can be released after LZ4F_CDict creation, since its content is copied within CDict
 * @return : digested dictionary for compression, or NULL if failed ','line_number':484,'multiline':True]
['text':' support free on NULL ','line_number':516,'multiline':True]
['text':'-*********************************
*  Advanced compression functions
**********************************','line_number':524,'multiline':True]
['text':'! LZ4F_createCompressionContext() :
 *  The first thing to do is to create a compressionContext object, which will be used in all compression operations.
 *  This is achieved using LZ4F_createCompressionContext(), which takes as argument a version and an LZ4F_preferences_t structure.
 *  The version provided MUST be LZ4F_VERSION. It is intended to track potential incompatible differences between different binaries.
 *  The function will provide a pointer to an allocated LZ4F_compressionContext_t object.
 *  If the result LZ4F_errorCode_t is not OK_NoError, there was an error during context creation.
 *  Object can release its memory using LZ4F_freeCompressionContext();
 ','line_number':528,'multiline':True]
['text':' Next stage : init stream ','line_number':542,'multiline':True]
['text':' support free on NULL ','line_number':552,'multiline':True]
['text':' note: LZ4_streamHC_t and LZ4_stream_t are simple POD types ','line_number':553,'multiline':True]
['text':'*
 * This function prepares the internal LZ4(HC) stream for a new compression,
 * resetting the context and attaching the dictionary, if there is one.
 *
 * It needs to be called at the beginning of each independent compression
 * stream (i.e., at the beginning of a frame in blockLinked mode, or at the
 * beginning of each block in blockIndependent mode).
 ','line_number':562,'multiline':True]
['text':' In these cases, we will call LZ4_compress_fast_continue(),
             * which needs an already reset context. Otherwise, we'll call a
             * one-shot API. The non-continued APIs internally perform their own
             * resets at the beginning of their calls, where they know what
             * tableType they need the context to be in. So in that case this
             * would be misguided / wasted work. ','line_number':576,'multiline':True]
['text':'! LZ4F_compressBegin_usingCDict() :
 *  init streaming compression and writes frame header into dstBuffer.
 *  dstBuffer must be >= LZ4F_HEADER_SIZE_MAX bytes.
 * @return : number of bytes written into dstBuffer for the header
 *           or an error code (can be tested using LZ4F_isError())
 ','line_number':592,'multiline':True]
['text':' Ctx Management ','line_number':613,'multiline':True]
['text':' otherwise, a sufficient buffer is allocated, but we need to
             * reset it to the correct context type ','line_number':627,'multiline':True]
['text':' Buffer Management ','line_number':639,'multiline':True]
['text':' only needs past data up to window size ','line_number':645,'multiline':True]
['text':' context init ','line_number':659,'multiline':True]
['text':' frame init only for blockLinked : blockIndependent will be init at each block ','line_number':662,'multiline':True]
['text':' Magic Number ','line_number':669,'multiline':True]
['text':' FLG Byte ','line_number':674,'multiline':True]
['text':' Version('01') ','line_number':675,'multiline':True]
['text':' BD Byte ','line_number':681,'multiline':True]
['text':' Optional Frame content size field ','line_number':683,'multiline':True]
['text':' Optional dictionary ID field ','line_number':689,'multiline':True]
['text':' Header CRC Byte ','line_number':694,'multiline':True]
['text':' header written, now request input data block ','line_number':698,'multiline':True]
['text':'! LZ4F_compressBegin() :
 *  init streaming compression and writes frame header into dstBuffer.
 *  dstBuffer must be >= LZ4F_HEADER_SIZE_MAX bytes.
 *  preferencesPtr can be NULL, in which case default parameters are selected.
 * @return : number of bytes written into dstBuffer for the header
 *        or an error code (can be tested using LZ4F_isError())
 ','line_number':703,'multiline':True]
['text':'  LZ4F_compressBound() :
 * @return minimum capacity of dstBuffer for a given srcSize to handle worst case scenario.
 *  LZ4F_preferences_t structure is optional : if NULL, preferences will be set to cover worst case scenario.
 *  This function cannot fail.
 ','line_number':719,'multiline':True]
['text':'! LZ4F_makeBlock():
 *  compress a single block, add header and optional checksum.
 *  assumption : dst buffer capacity is >= BHSize + srcSize + crcSize
 ','line_number':736,'multiline':True]
['text':' compression failed ','line_number':750,'multiline':True]
['text':' checksum of compressed data ','line_number':759,'multiline':True]
['text':' init once at beginning of frame ','line_number':780,'multiline':True]
['text':' init once at beginning of frame ','line_number':795,'multiline':True]
['text':'! LZ4F_compressUpdate() :
 *  LZ4F_compressUpdate() can be called repetitively to compress as much data as necessary.
 *  dstBuffer MUST be >= LZ4F_compressBound(srcSize, preferencesPtr).
 *  LZ4F_compressOptions_t structure is optional : you can provide NULL as argument.
 * @return : the number of bytes written into dstBuffer. It can be zero, meaning input data was just buffered.
 *           or an error code if it fails (which can be tested using LZ4F_isError())
 ','line_number':818,'multiline':True]
['text':' complete tmp buffer ','line_number':847,'multiline':True]
['text':' some data already within tmp buffer ','line_number':848,'multiline':True]
['text':' add src to tmpIn buffer ','line_number':851,'multiline':True]
['text':' still needs some CRC ','line_number':855,'multiline':True]
['text':' complete tmpIn block and then compress it ','line_number':857,'multiline':True]
['text':' compress full blocks ','line_number':874,'multiline':True]
['text':' compress remaining input < blockSize ','line_number':885,'multiline':True]
['text':' preserve dictionary if necessary ','line_number':895,'multiline':True]
['text':' keep tmpIn within limits ','line_number':906,'multiline':True]
['text':' necessarily LZ4F_blockLinked && lastBlockCompressed==fromTmpBuffer ','line_number':907,'multiline':True]
['text':' some input data left, necessarily < blockSize ','line_number':914,'multiline':True]
['text':' fill tmp buffer ','line_number':916,'multiline':True]
['text':'! LZ4F_flush() :
 *  When compressed data must be sent immediately, without waiting for a block to be filled,
 *  invoke LZ4_flush(), which will immediately compress any remaining data stored within LZ4F_cctx.
 *  The result of the function is the number of bytes written into dstBuffer.
 *  It can be zero, this means there was no data left within LZ4F_cctx.
 *  The function outputs an error code if it fails (can be tested using LZ4F_isError())
 *  LZ4F_compressOptions_t* is optional. NULL is a valid argument.
 ','line_number':930,'multiline':True]
['text':' nothing to flush ','line_number':946,'multiline':True]
['text':' not yet useful ','line_number':950,'multiline':True]
['text':' select compression function ','line_number':952,'multiline':True]
['text':' compress tmp buffer ','line_number':955,'multiline':True]
['text':' keep tmpIn within limits ','line_number':967,'multiline':True]
['text':' necessarily LZ4F_blockLinked ','line_number':968,'multiline':True]
['text':'! LZ4F_compressEnd() :
 *  When you want to properly finish the compressed frame, just call LZ4F_compressEnd().
 *  It will flush whatever data remained within compressionContext (like LZ4_flush())
 *  but also properly finalize the frame, with an endMark and an (optional) checksum.
 *  LZ4F_compressOptions_t structure is optional : you can provide NULL as argument.
 * @return: the number of bytes written into dstBuffer (necessarily >= 4 (endMark size))
 *       or an error code if it fails (can be tested using LZ4F_isError())
 *  The context can then be used again to compress a new frame, starting with LZ4F_compressBegin().
 ','line_number':977,'multiline':True]
['text':' endMark ','line_number':1003,'multiline':True]
['text':' content Checksum ','line_number':1010,'multiline':True]
['text':' state is now re-usable (with identical preferences) ','line_number':1013,'multiline':True]
['text':' reuse HC context ','line_number':1014,'multiline':True]
['text':'-***************************************************
*   Frame Decompression
****************************************************','line_number':1025,'multiline':True]
['text':' typedef'd to LZ4F_dctx in lz4frame.h ','line_number':1060,'multiline':True]
['text':'! LZ4F_createDecompressionContext() :
 *  Create a decompressionContext object, which will track all decompression operations.
 *  Provides a pointer to a fully allocated and initialized LZ4F_decompressionContext object.
 *  Object can later be released using LZ4F_freeDecompressionContext().
 * @return : if != 0, there was an error during context creation.
 ','line_number':1063,'multiline':True]
['text':' failed allocation ','line_number':1072,'multiline':True]
['text':' can accept NULL input, like free() ','line_number':1085,'multiline':True]
['text':'==---   Streaming Decompression operations   ---==','line_number':1095,'multiline':True]
['text':'! LZ4F_decodeHeader() :
 *  input   : `src` points at the **beginning of the frame**
 *  output  : set internal values of dctx, such as
 *            dctx->frameInfo and dctx->dStage.
 *            Also allocates internal buffers.
 *  @return : nb Bytes read from src (necessarily <= srcSize)
 *            or an error code (testable with LZ4F_isError())
 ','line_number':1105,'multiline':True]
['text':' need to decode header to get frameInfo ','line_number':1120,'multiline':True]
['text':' minimal frame header size ','line_number':1121,'multiline':True]
['text':' special case : skippable frames ','line_number':1124,'multiline':True]
['text':' control magic number ','line_number':1138,'multiline':True]
['text':' Flags ','line_number':1147,'multiline':True]
['text':' validate ','line_number':1155,'multiline':True]
['text':' Reserved bit ','line_number':1156,'multiline':True]
['text':' Version Number, only supported value ','line_number':1157,'multiline':True]
['text':' Frame Header Size ','line_number':1160,'multiline':True]
['text':' not enough input to fully decode frame header ','line_number':1164,'multiline':True]
['text':' validate ','line_number':1175,'multiline':True]
['text':' Reserved bit ','line_number':1176,'multiline':True]
['text':' 4-7 only supported values for the time being ','line_number':1177,'multiline':True]
['text':' Reserved bits ','line_number':1178,'multiline':True]
['text':' check header ','line_number':1181,'multiline':True]
['text':' save ','line_number':1190,'multiline':True]
['text':'! LZ4F_headerSize() :
 * @return : size of frame header
 *           or an error code, which can be tested using LZ4F_isError()
 ','line_number':1208,'multiline':True]
['text':' minimal srcSize to determine header size ','line_number':1216,'multiline':True]
['text':' special case : skippable frames ','line_number':1220,'multiline':True]
['text':' control magic number ','line_number':1224,'multiline':True]
['text':' Frame Header Size ','line_number':1230,'multiline':True]
['text':'! LZ4F_getFrameInfo() :
 *  This function extracts frame parameters (max blockSize, frame checksum, etc.).
 *  Usage is optional. Objective is to provide relevant information for allocation purposes.
 *  This function works in 2 situations :
 *   - At the beginning of a new frame, in which case it will decode this information from `srcBuffer`, and start the decoding process.
 *     Amount of input data provided must be large enough to successfully decode the frame header.
 *     A header size is variable, but is guaranteed to be <= LZ4F_HEADER_SIZE_MAX bytes. It's possible to provide more input data than this minimum.
 *   - After decoding has been started. In which case, no input is read, frame parameters are extracted from dctx.
 *  The number of bytes consumed from srcBuffer will be updated within *srcSizePtr (necessarily <= original value).
 *  Decompression must resume from (srcBuffer + *srcSizePtr).
 * @return : an hint about how many srcSize bytes LZ4F_decompress() expects for next call,
 *           or an error code which can be tested using LZ4F_isError()
 *  note 1 : in case of error, dctx is not modified. Decoding operations can resume from where they stopped.
 *  note 2 : frame parameters are *copied into* an already allocated LZ4F_frameInfo_t structure.
 ','line_number':1238,'multiline':True]
['text':' frameInfo already decoded ','line_number':1259,'multiline':True]
['text':' returns : recommended nb of bytes for LZ4F_decompress() ','line_number':1263,'multiline':True]
['text':' frame decoding already started, in the middle of header => automatic fail ','line_number':1267,'multiline':True]
['text':' block header size ','line_number':1283,'multiline':True]
['text':' LZ4F_updateDict() :
 * only used for LZ4F_blockLinked mode
 * Condition : dstPtr != NULL
 ','line_number':1291,'multiline':True]
['text':' priority to prefix mode ','line_number':1301,'multiline':True]
['text':' prefix mode, everything within dstBuffer ','line_number':1305,'multiline':True]
['text':' history in dstBuffer becomes large enough to become dictionary ','line_number':1311,'multiline':True]
['text':' if dstSize >= 64 KB, dictionary would be set into dstBuffer directly ','line_number':1317,'multiline':True]
['text':' dstBuffer does not contain whole useful history (64 KB), so it must be saved within tmpOutBuffer ','line_number':1319,'multiline':True]
['text':' continue history within tmpOutBuffer ','line_number':1322,'multiline':True]
['text':' withinTmp expectation : content of [dstPtr,dstSize] is same as [dict+dictSize,dstSize], so we just extend it ','line_number':1323,'multiline':True]
['text':' copy relevant dict portion in front of tmpOut within tmpOutBuffer ','line_number':1329,'multiline':True]
['text':' copy dst into tmp to complete dict ','line_number':1343,'multiline':True]
['text':' tmp buffer not large enough ','line_number':1344,'multiline':True]
['text':' join dict & dest into tmp ','line_number':1354,'multiline':True]
['text':'! LZ4F_decompress() :
 *  Call this function repetitively to regenerate compressed data in srcBuffer.
 *  The function will attempt to decode up to *srcSizePtr bytes from srcBuffer
 *  into dstBuffer of capacity *dstSizePtr.
 *
 *  The number of bytes regenerated into dstBuffer will be provided within *dstSizePtr (necessarily <= original value).
 *
 *  The number of bytes effectively read from srcBuffer will be provided within *srcSizePtr (necessarily <= original value).
 *  If number of bytes read is < number of bytes provided, then decompression operation is not complete.
 *  Remaining data will have to be presented again in a subsequent invocation.
 *
 *  The function result is an hint of the better srcSize to use for next call to LZ4F_decompress.
 *  Schematically, it's the size of the current (or remaining) compressed block + header of next block.
 *  Respecting the hint provides a small boost to performance, since it allows less buffer shuffling.
 *  Note that this is just a hint, and it's always possible to any srcSize value.
 *  When a frame is fully decoded, @return will be 0.
 *  If decompression failed, @return is an error code which can be tested using LZ4F_isError().
 ','line_number':1366,'multiline':True]
['text':' behaves as a state machine ','line_number':1410,'multiline':True]
['text':' enough to decode - shortcut ','line_number':1419,'multiline':True]
['text':' will update dStage appropriately ','line_number':1420,'multiline':True]
['text':' 0-size input ','line_number':1426,'multiline':True]
['text':' minimum size to decode header ','line_number':1427,'multiline':True]
['text':' fall-through ','line_number':1429,'multiline':True]
['text':' rest of header + nextBlockHeader ','line_number':1439,'multiline':True]
['text':' not enough src data, ask for some more ','line_number':1440,'multiline':True]
['text':' will update dStage appropriately ','line_number':1443,'multiline':True]
['text':' internal buffers allocation ','line_number':1451,'multiline':True]
['text':' tmp buffers too small ','line_number':1454,'multiline':True]
['text':' ensure allocation will be re-attempted on next entry','line_number':1455,'multiline':True]
['text':' block checksum ','line_number':1457,'multiline':True]
['text':' fall-through ','line_number':1473,'multiline':True]
['text':' not enough input to read cBlockSize field ','line_number':1480,'multiline':True]
['text':' can be skipped ','line_number':1485,'multiline':True]
['text':' not enough input for cBlockSize ','line_number':1494,'multiline':True]
['text':' if (dctx->dStage == dstage_storeBlockHeader) ','line_number':1500,'multiline':True]
['text':' decode block header ','line_number':1502,'multiline':True]
['text':' frameEnd signal, no more block ','line_number':1506,'multiline':True]
['text':' next block is uncompressed ','line_number':1515,'multiline':True]
['text':' next block is a compressed block ','line_number':1524,'multiline':True]
['text':' uncompressed block ','line_number':1534,'multiline':True]
['text':' history management (linked blocks only)','line_number':1551,'multiline':True]
['text':' all done ','line_number':1558,'multiline':True]
['text':' new block ','line_number':1563,'multiline':True]
['text':' need to copy more ','line_number':1566,'multiline':True]
['text':' next header size ','line_number':1570,'multiline':True]
['text':' check block checksum for recently transferred uncompressed block ','line_number':1574,'multiline':True]
['text':' all input consumed ','line_number':1587,'multiline':True]
['text':' new block ','line_number':1607,'multiline':True]
['text':' input large enough to read full block directly ','line_number':1617,'multiline':True]
['text':' always jump over next block ','line_number':1621,'multiline':True]
['text':' need more input ','line_number':1629,'multiline':True]
['text':' next header size ','line_number':1632,'multiline':True]
['text':' At this stage, input is large enough to decode a block ','line_number':1639,'multiline':True]
['text':' selectedIn is defined at this stage (either srcPtr, or dctx->tmpIn) ','line_number':1642,'multiline':True]
['text':' the dictSize param is an int, avoid truncation / sign issues ','line_number':1660,'multiline':True]
['text':' enough capacity in `dst` to decompress directly there ','line_number':1664,'multiline':True]
['text':' decompression failed ','line_number':1669,'multiline':True]
['text':' dictionary management ','line_number':1675,'multiline':True]
['text':' not enough place into dst : decode into tmpOut ','line_number':1685,'multiline':True]
['text':' ensure enough place for tmpOut ','line_number':1686,'multiline':True]
['text':' dict not within tmp ','line_number':1694,'multiline':True]
['text':' Decode block ','line_number':1699,'multiline':True]
['text':' the dictSize param is an int, avoid truncation / sign issues ','line_number':1704,'multiline':True]
['text':' decompression failed ','line_number':1712,'multiline':True]
['text':' fall-through ','line_number':1722,'multiline':True]
['text':' flush decoded data from tmpOut to dstBuffer ','line_number':1724,'multiline':True]
['text':' dictionary management ','line_number':1730,'multiline':True]
['text':'withinTmp','line_number':1732,'multiline':True]
['text':' all flushed ','line_number':1737,'multiline':True]
['text':' get next block ','line_number':1738,'multiline':True]
['text':' could not flush everything : stop there, just request a block header ','line_number':1741,'multiline':True]
['text':' incorrect frame size decoded ','line_number':1748,'multiline':True]
['text':' no checksum, frame is completed ','line_number':1749,'multiline':True]
['text':' not enough size for entire CRC ','line_number':1755,'multiline':True]
['text':' can be skipped ','line_number':1763,'multiline':True]
['text':' not enough input to read complete suffix ','line_number':1771,'multiline':True]
['text':' if (dctx->dStage == dstage_storeSuffix) ','line_number':1777,'multiline':True]
['text':' case dstage_checkSuffix: ','line_number':1779,'multiline':True]
['text':' no direct entry, avoid initialization risks ','line_number':1779,'multiline':True]
['text':' not enough input to read cBlockSize field ','line_number':1800,'multiline':True]
['text':' not enough input to get full sBlockSize; wait for more ','line_number':1814,'multiline':True]
['text':' if (dctx->dStage == dstage_storeSFrameSize) ','line_number':1820,'multiline':True]
['text':' case dstage_decodeSFrameSize: ','line_number':1822,'multiline':True]
['text':' no direct entry ','line_number':1822,'multiline':True]
['text':' still more to skip ','line_number':1836,'multiline':True]
['text':' frame fully skipped : prepare context for a new frame ','line_number':1837,'multiline':True]
['text':' switch (dctx->dStage) ','line_number':1841,'multiline':True]
['text':' while (doAnotherStage) ','line_number':1842,'multiline':True]
['text':' preserve history within tmp whenever necessary ','line_number':1844,'multiline':True]
['text':' next block will use up to 64KB from previous ones ','line_number':1846,'multiline':True]
['text':' dictionary is not already within tmp ','line_number':1847,'multiline':True]
['text':' dictionary exists ','line_number':1848,'multiline':True]
['text':' cannot rely on dst data to remain there for next call ','line_number':1849,'multiline':True]
['text':' valid stages : [init ... getSuffix[ ','line_number':1850,'multiline':True]
['text':'! LZ4F_decompress_usingDict() :
 *  Same as LZ4F_decompress(), using a predefined dictionary.
 *  Dictionary is used "in place", without any preprocessing.
 *  It must remain accessible throughout the entire frame decoding.
 ','line_number':1881,'multiline':True]
