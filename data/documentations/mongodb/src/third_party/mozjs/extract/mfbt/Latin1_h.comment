['text':' This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]
['text':' Latin-1 operations (i.e. a byte is the corresponding code point).
 * (Note: this is *not* the same as the encoding of windows-1252 or
 * latin1 content on the web. In Web terms, this encoding
 * corresponds to "isomorphic decode" / "isomorphic encoding" from
 * the Infra Standard.)
 ','line_number':5,'multiline':True]
['text':' It's important for optimizations that Latin1ness checks','line_number':29,'multiline':False]
['text':' and inflation/deflation function use the same short','line_number':30,'multiline':False]
['text':' string limit. The limit is 16, because that's the shortest','line_number':31,'multiline':False]
['text':' that inflates/deflates using SIMD.','line_number':32,'multiline':False]
['text':' namespace detail','line_number':53,'multiline':False]
['text':'*
 * Returns true iff |aChar| is Latin-1 but not ASCII, i.e. in the range
 * [0x80, 0xFF].
 ','line_number':55,'multiline':True]
['text':'*
 * Returns |true| iff |aString| contains only Latin1 characters, that is,
 * characters in the range [U+0000, U+00FF].
 *
 * @param aString a potentially-invalid UTF-16 string to scan
 ','line_number':68,'multiline':True]
['text':' For short strings, calling into Rust is a pessimization, and the SIMD','line_number':77,'multiline':False]
['text':' code won't have a chance to kick in anyway.','line_number':78,'multiline':False]
['text':' 16 is a bit larger than logically necessary for this function alone,','line_number':79,'multiline':False]
['text':' but it's important that the limit here matches the limit used in','line_number':80,'multiline':False]
['text':' LossyConvertUtf16toLatin1!','line_number':81,'multiline':False]
['text':'*
 * Returns |true| iff |aString| is valid UTF-8 containing only Latin-1
 * characters.
 *
 * If you know that the argument is always absolutely guaranteed to be valid
 * UTF-8, use the faster UnsafeIsValidUtf8Latin1() instead.
 *
 * @param aString potentially-invalid UTF-8 string to scan
 ','line_number':92,'multiline':True]
['text':'*
 * Returns |true| iff |aString|, which MUST be valid UTF-8, contains only
 * Latin1 characters, that is, characters in the range [U+0000, U+00FF].
 * (If |aString| might not be valid UTF-8, use |IsUtf8Latin1| instead.)
 *
 * @param aString known-valid UTF-8 string to scan
 ','line_number':105,'multiline':True]
['text':'*
 * Returns the index of first byte that starts an invalid byte
 * sequence or a non-Latin1 byte sequence in a potentially-invalid UTF-8
 * string, or the length of the string if there are neither.
 *
 * If you know that the argument is always absolutely guaranteed to be valid
 * UTF-8, use the faster UnsafeValidUtf8Lati1UpTo() instead.
 *
 * @param aString potentially-invalid UTF-8 string to scan
 ','line_number':116,'multiline':True]
['text':'*
 * Returns the index of first byte that starts a non-Latin1 byte
 * sequence in a known-valid UTF-8 string, or the length of the
 * string if there are none. (If the string might not be valid
 * UTF-8, use Utf8Latin1UpTo() instead.)
 *
 * @param aString known-valid UTF-8 string to scan
 ','line_number':130,'multiline':True]
['text':'*
 * If all the code points in the input are below U+0100, converts to Latin1,
 * i.e. unsigned byte value is Unicode scalar value. If there are code points
 * above U+00FF, produces unspecified garbage in a memory-safe way. The
 * nature of the garbage must not be relied upon.
 *
 * The length of aDest must not be less than the length of aSource.
 ','line_number':142,'multiline':True]
['text':' Avoid function call overhead when SIMD isn't used anyway','line_number':156,'multiline':False]
['text':' If you change the length limit here, be sure to change','line_number':157,'multiline':False]
['text':' IsUtf16Latin1 and IsAscii to match so that optimizations don't','line_number':158,'multiline':False]
['text':' fail!','line_number':159,'multiline':False]
['text':'*
 * If all the code points in the input are below U+0100, converts to Latin1,
 * i.e. unsigned byte value is Unicode scalar value. If there are code points
 * above U+00FF, produces unspecified garbage in a memory-safe way. The
 * nature of the garbage must not be relied upon.
 *
 * Returns the number of code units written.
 *
 * The length of aDest must not be less than the length of aSource.
 ','line_number':174,'multiline':True]
['text':'*
 * Converts each byte of |aSource|, interpreted as a Unicode scalar value
 * having that unsigned value, to its UTF-8 representation in |aDest|.
 *
 * Returns the number of code units written.
 *
 * The length of aDest must be at least twice the length of aSource.
 ','line_number':190,'multiline':True]
['text':'*
 * Converts bytes whose unsigned value is interpreted as Unicode code point
 * (i.e. U+0000 to U+00FF, inclusive) to UTF-8 with potentially insufficient
 * output space.
 *
 * Returns the number of bytes read and the number of bytes written.
 *
 * If the output isn't large enough, not all input is consumed.
 *
 * The conversion is guaranteed to be complete if the length of aDest is
 * at least the length of aSource times two.
 *
 * The output is always valid UTF-8 ending on scalar value boundary
 * even in the case of partial conversion.
 *
 * The semantics of this function match the semantics of
 * TextEncoder.encodeInto.
 * https://encoding.spec.whatwg.org/#dom-textencoder-encodeinto
 ','line_number':204,'multiline':True]
['text':'*
 * Converts Latin-1 code points (i.e. each byte is the identical code
 * point) from |aSource| to UTF-16 code points in |aDest|.
 *
 * The length of aDest must not be less than the length of aSource.
 ','line_number':232,'multiline':True]
['text':' Avoid function call overhead when SIMD isn't used anyway','line_number':244,'multiline':False]
['text':' The code below is implemented based on the equivalent specification in','line_number':258,'multiline':False]
['text':' `encoding_rs`.','line_number':259,'multiline':False]
['text':'*
 * Returns |true| iff |aString| contains only Latin1 characters, that is,
 * characters in the range [U+0000, U+00FF].
 *
 * @param aString a potentially-invalid UTF-16 string to scan
 ','line_number':261,'multiline':True]
['text':'*
 * Returns the index of first byte that starts a non-Latin1 byte
 * sequence in a known-valid UTF-8 string, or the length of the
 * string if there are none. (If the string might not be valid
 * UTF-8, use Utf8Latin1UpTo() instead.)
 *
 * @param aString known-valid UTF-8 string to scan
 ','line_number':278,'multiline':True]
['text':' skip the second byte of the current Latin1 character','line_number':297,'multiline':False]
['text':'*
 * Returns the index of first byte that starts an invalid byte sequence in a
 * potentially-invalid UTF-8 string, or the length of the string if there are
 * neither.
 *
 * @param aString potentially-invalid UTF-8 string to scan
 ','line_number':304,'multiline':True]
['text':'*
 * Returns the index of first byte that starts an invalid byte
 * sequence or a non-Latin1 byte sequence in a potentially-invalid UTF-8
 * string, or the length of the string if there are neither.
 *
 * If you know that the argument is always absolutely guaranteed to be valid
 * UTF-8, use the faster UnsafeValidUtf8Lati1UpTo() instead.
 *
 * @param aString potentially-invalid UTF-8 string to scan
 ','line_number':313,'multiline':True]
['text':'*
 * Returns |true| iff |aString|, which MUST be valid UTF-8, contains only
 * Latin1 characters, that is, characters in the range [U+0000, U+00FF].
 * (If |aString| might not be valid UTF-8, use |IsUtf8Latin1| instead.)
 *
 * @param aString known-valid UTF-8 string to scan
 ','line_number':332,'multiline':True]
['text':'*
 * Returns |true| iff |aString| is valid UTF-8 containing only Latin-1
 * characters.
 *
 * If you know that the argument is always absolutely guaranteed to be valid
 * UTF-8, use the faster UnsafeIsValidUtf8Latin1() instead.
 *
 * @param aString potentially-invalid UTF-8 string to scan
 ','line_number':343,'multiline':True]
['text':'*
 * If all the code points in the input are below U+0100, converts to Latin1,
 * i.e. unsigned byte value is Unicode scalar value. If there are code points
 * above U+00FF, produces unspecified garbage in a memory-safe way. The
 * nature of the garbage must not be relied upon.
 *
 * The length of aDest must not be less than the length of aSource.
 ','line_number':356,'multiline':True]
['text':'*
 * If all the code points in the input are below U+0100, converts to Latin1,
 * i.e. unsigned byte value is Unicode scalar value. If there are code points
 * above U+00FF, produces unspecified garbage in a memory-safe way. The
 * nature of the garbage must not be relied upon.
 *
 * Returns the number of code units written.
 *
 * The length of aDest must not be less than the length of aSource.
 ','line_number':417,'multiline':True]
['text':'*
 * Converts bytes whose unsigned value is interpreted as Unicode code point
 * (i.e. U+0000 to U+00FF, inclusive) to UTF-8 with potentially insufficient
 * output space.
 *
 * Returns the number of bytes read and the number of bytes written.
 *
 * If the output isn't large enough, not all input is consumed.
 *
 * The conversion is guaranteed to be complete if the length of aDest is
 * at least the length of aSource times two.
 *
 * The output is always valid UTF-8 ending on scalar value boundary
 * even in the case of partial conversion.
 *
 * The semantics of this function match the semantics of
 * TextEncoder.encodeInto.
 * https://encoding.spec.whatwg.org/#dom-textencoder-encodeinto
 ','line_number':442,'multiline':True]
['text':'*
 * Converts each byte of |aSource|, interpreted as a Unicode scalar value
 * having that unsigned value, to its UTF-8 representation in |aDest|.
 *
 * Returns the number of code units written.
 *
 * The length of aDest must be at least twice the length of aSource.
 ','line_number':489,'multiline':True]
['text':'*
 * Converts Latin-1 code points (i.e. each byte is the identical code
 * point) from |aSource| to UTF-16 code points in |aDest|.
 *
 * The length of aDest must not be less than the length of aSource.
 ','line_number':507,'multiline':True]
['text':' Avoid function call overhead when SIMD isn't used anyway','line_number':518,'multiline':False]
['text':' MOZ_HAS_JSRUST()','line_number':528,'multiline':False]
['text':' namespace mozilla','line_number':530,'multiline':False]
['text':' mozilla_Latin1_h','line_number':532,'multiline':False]
