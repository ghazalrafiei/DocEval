['text':' Copyright 2010 the V8 project authors. All rights reserved.','line_number':1,'multiline':False]
['text':' Redistribution and use in source and binary forms, with or without','line_number':2,'multiline':False]
['text':' modification, are permitted provided that the following conditions are','line_number':3,'multiline':False]
['text':' met:','line_number':4,'multiline':False]
['text':'','line_number':5,'multiline':False]
['text':'     * Redistributions of source code must retain the above copyright','line_number':6,'multiline':False]
['text':'       notice, this list of conditions and the following disclaimer.','line_number':7,'multiline':False]
['text':'     * Redistributions in binary form must reproduce the above','line_number':8,'multiline':False]
['text':'       copyright notice, this list of conditions and the following','line_number':9,'multiline':False]
['text':'       disclaimer in the documentation and/or other materials provided','line_number':10,'multiline':False]
['text':'       with the distribution.','line_number':11,'multiline':False]
['text':'     * Neither the name of Google Inc. nor the names of its','line_number':12,'multiline':False]
['text':'       contributors may be used to endorse or promote products derived','line_number':13,'multiline':False]
['text':'       from this software without specific prior written permission.','line_number':14,'multiline':False]
['text':'','line_number':15,'multiline':False]
['text':' THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS','line_number':16,'multiline':False]
['text':' "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT','line_number':17,'multiline':False]
['text':' LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR','line_number':18,'multiline':False]
['text':' A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT','line_number':19,'multiline':False]
['text':' OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,','line_number':20,'multiline':False]
['text':' SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT','line_number':21,'multiline':False]
['text':' LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,','line_number':22,'multiline':False]
['text':' DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY','line_number':23,'multiline':False]
['text':' THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT','line_number':24,'multiline':False]
['text':' (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE','line_number':25,'multiline':False]
['text':' OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.','line_number':26,'multiline':False]
['text':' Forward declarations:','line_number':47,'multiline':False]
['text':' Returns an estimation of k such that 10^(k-1) <= v < 10^k.','line_number':48,'multiline':False]
['text':' Computes v / 10^estimated_power exactly, as a ratio of two bignums, numerator','line_number':50,'multiline':False]
['text':' and denominator.','line_number':51,'multiline':False]
['text':' Multiplies numerator/denominator so that its values lies in the range 1-10.','line_number':61,'multiline':False]
['text':' Returns decimal_point s.t.','line_number':62,'multiline':False]
['text':'  v = numerator'/denominator' * 10^(decimal_point-1)','line_number':63,'multiline':False]
['text':'     where numerator' and denominator' are the values of numerator and','line_number':64,'multiline':False]
['text':'     denominator after the call to this function.','line_number':65,'multiline':False]
['text':' Generates digits from the left to the right and stops when the generated','line_number':70,'multiline':False]
['text':' digits yield the shortest decimal representation of v.','line_number':71,'multiline':False]
['text':' Generates 'requested_digits' after the decimal point.','line_number':76,'multiline':False]
['text':' Generates 'count' digits of numerator/denominator.','line_number':80,'multiline':False]
['text':' Once 'count' digits have been produced rounds the result depending on the','line_number':81,'multiline':False]
['text':' remainder (remainders of exactly .5 round upwards). Might update the','line_number':82,'multiline':False]
['text':' decimal_point when rounding up (for example for 0.9999).','line_number':83,'multiline':False]
['text':' estimated_power might be too low by 1.','line_number':112,'multiline':False]
['text':' Shortcut for Fixed.','line_number':115,'multiline':False]
['text':' The requested digits correspond to the digits after the point. If the','line_number':116,'multiline':False]
['text':' number is much too small, then there is no need in trying to get any','line_number':117,'multiline':False]
['text':' digits.','line_number':118,'multiline':False]
['text':' Set decimal-point to -requested_digits. This is what Gay does.','line_number':122,'multiline':False]
['text':' Note that it should not have any effect anyways since the string is','line_number':123,'multiline':False]
['text':' empty.','line_number':124,'multiline':False]
['text':' Make sure the bignum can grow large enough. The smallest double equals','line_number':133,'multiline':False]
['text':' 4e-324. In this case the denominator needs fewer than 324*4 binary digits.','line_number':134,'multiline':False]
['text':' The maximum double is 1.7976931348623157e308 which needs fewer than','line_number':135,'multiline':False]
['text':' 308*4 binary digits.','line_number':136,'multiline':False]
['text':' We now have v = (numerator / denominator) * 10^estimated_power.','line_number':142,'multiline':False]
['text':' We now have v = (numerator / denominator) * 10^(decimal_point-1), and','line_number':146,'multiline':False]
['text':'  1 <= (numerator + delta_plus) / denominator < 10','line_number':147,'multiline':False]
['text':' The procedure starts generating digits from the left to the right and stops','line_number':172,'multiline':False]
['text':' when the generated digits yield the shortest decimal representation of v. A','line_number':173,'multiline':False]
['text':' decimal representation of v is a number lying closer to v than to any other','line_number':174,'multiline':False]
['text':' double, so it converts to v when read.','line_number':175,'multiline':False]
['text':'','line_number':176,'multiline':False]
['text':' This is true if d, the decimal representation, is between m- and m+, the','line_number':177,'multiline':False]
['text':' upper and lower boundaries. d must be strictly between them if !is_even.','line_number':178,'multiline':False]
['text':'           m- := (numerator - delta_minus) / denominator','line_number':179,'multiline':False]
['text':'           m+ := (numerator + delta_plus) / denominator','line_number':180,'multiline':False]
['text':'','line_number':181,'multiline':False]
['text':' Precondition: 0 <= (numerator+delta_plus) / denominator < 10.','line_number':182,'multiline':False]
['text':'   If 1 <= (numerator+delta_plus) / denominator < 10 then no leading 0 digit','line_number':183,'multiline':False]
['text':'   will be produced. This should be the standard precondition.','line_number':184,'multiline':False]
['text':' Small optimization: if delta_minus and delta_plus are the same just reuse','line_number':189,'multiline':False]
['text':' one of the two bignums.','line_number':190,'multiline':False]
['text':' digit is a uint16_t and therefore always positive.','line_number':198,'multiline':False]
['text':' digit = numerator / denominator (integer division).','line_number':199,'multiline':False]
['text':' numerator = numerator % denominator.','line_number':200,'multiline':False]
['text':' Can we stop already?','line_number':203,'multiline':False]
['text':' If the remainder of the division is less than the distance to the lower','line_number':204,'multiline':False]
['text':' boundary we can stop. In this case we simply round down (discarding the','line_number':205,'multiline':False]
['text':' remainder).','line_number':206,'multiline':False]
['text':' Similarly we test if we can round up (using the upper boundary).','line_number':207,'multiline':False]
['text':' Prepare for next iteration.','line_number':223,'multiline':False]
['text':' We optimized delta_plus to be equal to delta_minus (if they share the','line_number':226,'multiline':False]
['text':' same value). So don't multiply delta_plus if they point to the same','line_number':227,'multiline':False]
['text':' object.','line_number':228,'multiline':False]
['text':' Let's see if 2*numerator < denominator.','line_number':233,'multiline':False]
['text':' If yes, then the next digit would be < 5 and we can round down.','line_number':234,'multiline':False]
['text':' Remaining digits are less than .5. -> Round down (== do nothing).','line_number':237,'multiline':False]
['text':' Remaining digits are more than .5 of denominator. -> Round up.','line_number':239,'multiline':False]
['text':' Note that the last digit could not be a '9' as otherwise the whole','line_number':240,'multiline':False]
['text':' loop would have stopped earlier.','line_number':241,'multiline':False]
['text':' We still have an assert here in case the preconditions were not','line_number':242,'multiline':False]
['text':' satisfied.','line_number':243,'multiline':False]
['text':' Halfway case.','line_number':247,'multiline':False]
['text':' TODO(floitsch): need a way to solve half-way cases.','line_number':248,'multiline':False]
['text':'   For now let's round towards even (since this is what Gay seems to','line_number':249,'multiline':False]
['text':'   do).','line_number':250,'multiline':False]
['text':' Round down => Do nothing.','line_number':253,'multiline':False]
['text':' Round down (== do nothing).','line_number':261,'multiline':False]
['text':' in_delta_room_plus','line_number':263,'multiline':False]
['text':' Round up.','line_number':264,'multiline':False]
['text':' Note again that the last digit could not be '9' since this would have','line_number':265,'multiline':False]
['text':' stopped the loop earlier.','line_number':266,'multiline':False]
['text':' We still have an DOUBLE_CONVERSION_ASSERT here, in case the preconditions were not','line_number':267,'multiline':False]
['text':' satisfied.','line_number':268,'multiline':False]
['text':' Let v = numerator / denominator < 10.','line_number':277,'multiline':False]
['text':' Then we generate 'count' digits of d = x.xxxxx... (without the decimal point)','line_number':278,'multiline':False]
['text':' from left to right. Once 'count' digits have been produced we decide wether','line_number':279,'multiline':False]
['text':' to round up or down. Remainders of exactly .5 round upwards. Numbers such','line_number':280,'multiline':False]
['text':' as 9.999999 propagate a carry all the way, and change the','line_number':281,'multiline':False]
['text':' exponent (decimal_point), when rounding upwards.','line_number':282,'multiline':False]
['text':' digit is a uint16_t and therefore always positive.','line_number':290,'multiline':False]
['text':' digit = numerator / denominator (integer division).','line_number':291,'multiline':False]
['text':' numerator = numerator % denominator.','line_number':292,'multiline':False]
['text':' Prepare for next iteration.','line_number':294,'multiline':False]
['text':' Generate the last digit.','line_number':297,'multiline':False]
['text':' Correct bad digits (in case we had a sequence of '9's). Propagate the','line_number':305,'multiline':False]
['text':' carry until we hat a non-'9' or til we reach the first digit.','line_number':306,'multiline':False]
['text':' Propagate a carry past the top place.','line_number':313,'multiline':False]
['text':' Generates 'requested_digits' after the decimal point. It might omit','line_number':321,'multiline':False]
['text':' trailing '0's. If the input number is too small then no digits at all are','line_number':322,'multiline':False]
['text':' generated (ex.: 2 fixed digits for 0.00001).','line_number':323,'multiline':False]
['text':'','line_number':324,'multiline':False]
['text':' Input verifies:  1 <= (numerator + delta) / denominator < 10.','line_number':325,'multiline':False]
['text':' Note that we have to look at more than just the requested_digits, since','line_number':329,'multiline':False]
['text':' a number could be rounded up. Example: v=0.5 with requested_digits=0.','line_number':330,'multiline':False]
['text':' Even though the power of v equals 0 we can't just stop here.','line_number':331,'multiline':False]
['text':' The number is definitively too small.','line_number':333,'multiline':False]
['text':' Ex: 0.001 with requested_digits == 1.','line_number':334,'multiline':False]
['text':' Set decimal-point to -requested_digits. This is what Gay does.','line_number':335,'multiline':False]
['text':' Note that it should not have any effect anyways since the string is','line_number':336,'multiline':False]
['text':' empty.','line_number':337,'multiline':False]
['text':' We only need to verify if the number rounds down or up.','line_number':342,'multiline':False]
['text':' Ex: 0.04 and 0.06 with requested_digits == 1.','line_number':343,'multiline':False]
['text':' Initially the fraction lies in range (1, 10]. Multiply the denominator','line_number':345,'multiline':False]
['text':' by 10 so that we can compare more easily.','line_number':346,'multiline':False]
['text':' If the fraction is >= 0.5 then we have to include the rounded','line_number':349,'multiline':False]
['text':' digit.','line_number':350,'multiline':False]
['text':' Note that we caught most of similar cases earlier.','line_number':355,'multiline':False]
['text':' The requested digits correspond to the digits after the point.','line_number':360,'multiline':False]
['text':' The variable 'needed_digits' includes the digits before the point.','line_number':361,'multiline':False]
['text':' Returns an estimation of k such that 10^(k-1) <= v < 10^k where','line_number':370,'multiline':False]
['text':' v = f * 2^exponent and 2^52 <= f < 2^53.','line_number':371,'multiline':False]
['text':' v is hence a normalized double with the given exponent. The output is an','line_number':372,'multiline':False]
['text':' approximation for the exponent of the decimal approximation .digits * 10^k.','line_number':373,'multiline':False]
['text':'','line_number':374,'multiline':False]
['text':' The result might undershoot by 1 in which case 10^k <= v < 10^k+1.','line_number':375,'multiline':False]
['text':' Note: this property holds for v's upper boundary m+ too.','line_number':376,'multiline':False]
['text':'    10^k <= m+ < 10^k+1.','line_number':377,'multiline':False]
['text':'   (see explanation below).','line_number':378,'multiline':False]
['text':'','line_number':379,'multiline':False]
['text':' Examples:','line_number':380,'multiline':False]
['text':'  EstimatePower(0)   => 16','line_number':381,'multiline':False]
['text':'  EstimatePower(-52) => 0','line_number':382,'multiline':False]
['text':'','line_number':383,'multiline':False]
['text':' Note: e >= 0 => EstimatedPower(e) > 0. No similar claim can be made for e<0.','line_number':384,'multiline':False]
['text':' This function estimates log10 of v where v = f*2^e (with e == exponent).','line_number':386,'multiline':False]
['text':' Note that 10^floor(log10(v)) <= v, but v <= 10^ceil(log10(v)).','line_number':387,'multiline':False]
['text':' Note that f is bounded by its container size. Let p = 53 (the double's','line_number':388,'multiline':False]
['text':' significand size). Then 2^(p-1) <= f < 2^p.','line_number':389,'multiline':False]
['text':'','line_number':390,'multiline':False]
['text':' Given that log10(v) == log2(v)/log2(10) and e+(len(f)-1) is quite close','line_number':391,'multiline':False]
['text':' to log2(v) the function is simplified to (e+(len(f)-1)/log2(10)).','line_number':392,'multiline':False]
['text':' The computed number undershoots by less than 0.631 (when we compute log3','line_number':393,'multiline':False]
['text':' and not log10).','line_number':394,'multiline':False]
['text':'','line_number':395,'multiline':False]
['text':' Optimization: since we only need an approximated result this computation','line_number':396,'multiline':False]
['text':' can be performed on 64 bit integers. On x86/x64 architecture the speedup is','line_number':397,'multiline':False]
['text':' not really measurable, though.','line_number':398,'multiline':False]
['text':'','line_number':399,'multiline':False]
['text':' Since we want to avoid overshooting we decrement by 1e10 so that','line_number':400,'multiline':False]
['text':' floating-point imprecisions don't affect us.','line_number':401,'multiline':False]
['text':'','line_number':402,'multiline':False]
['text':' Explanation for v's boundary m+: the computation takes advantage of','line_number':403,'multiline':False]
['text':' the fact that 2^(p-1) <= f < 2^p. Boundaries still satisfy this requirement','line_number':404,'multiline':False]
['text':' (even for denormals where the delta can be much more important).','line_number':405,'multiline':False]
['text':' 1/lg(10)','line_number':407,'multiline':False]
['text':' For doubles len(f) == 53 (don't forget the hidden bit).','line_number':409,'multiline':False]
['text':' See comments for InitialScaledStartValues.','line_number':416,'multiline':False]
['text':' A positive exponent implies a positive power.','line_number':422,'multiline':False]
['text':' Since the estimated_power is positive we simply multiply the denominator','line_number':424,'multiline':False]
['text':' by 10^estimated_power.','line_number':425,'multiline':False]
['text':' numerator = v.','line_number':427,'multiline':False]
['text':' denominator = 10^estimated_power.','line_number':430,'multiline':False]
['text':' Introduce a common denominator so that the deltas to the boundaries are','line_number':434,'multiline':False]
['text':' integers.','line_number':435,'multiline':False]
['text':' Let v = f * 2^e, then m+ - v = 1/2 * 2^e; With the common','line_number':438,'multiline':False]
['text':' denominator (of 2) delta_plus equals 2^e.','line_number':439,'multiline':False]
['text':' Same for delta_minus. The adjustments if f == 2^p-1 are done later.','line_number':442,'multiline':False]
['text':' See comments for InitialScaledStartValues','line_number':449,'multiline':False]
['text':' v = f * 2^e with e < 0, and with estimated_power >= 0.','line_number':455,'multiline':False]
['text':' This means that e is close to 0 (have a look at how estimated_power is','line_number':456,'multiline':False]
['text':' computed).','line_number':457,'multiline':False]
['text':' numerator = significand','line_number':459,'multiline':False]
['text':'  since v = significand * 2^exponent this is equivalent to','line_number':460,'multiline':False]
['text':'  numerator = v * / 2^-exponent','line_number':461,'multiline':False]
['text':' denominator = 10^estimated_power * 2^-exponent (with exponent < 0)','line_number':463,'multiline':False]
['text':' Introduce a common denominator so that the deltas to the boundaries are','line_number':468,'multiline':False]
['text':' integers.','line_number':469,'multiline':False]
['text':' Let v = f * 2^e, then m+ - v = 1/2 * 2^e; With the common','line_number':472,'multiline':False]
['text':' denominator (of 2) delta_plus equals 2^e.','line_number':473,'multiline':False]
['text':' Given that the denominator already includes v's exponent the distance','line_number':474,'multiline':False]
['text':' to the boundaries is simply 1.','line_number':475,'multiline':False]
['text':' Same for delta_minus. The adjustments if f == 2^p-1 are done later.','line_number':477,'multiline':False]
['text':' See comments for InitialScaledStartValues','line_number':483,'multiline':False]
['text':' Instead of multiplying the denominator with 10^estimated_power we','line_number':489,'multiline':False]
['text':' multiply all values (numerator and deltas) by 10^-estimated_power.','line_number':490,'multiline':False]
['text':' Use numerator as temporary container for power_ten.','line_number':492,'multiline':False]
['text':' Since power_ten == numerator we must make a copy of 10^estimated_power','line_number':497,'multiline':False]
['text':' before we complete the computation of the numerator.','line_number':498,'multiline':False]
['text':' delta_plus = delta_minus = 10^estimated_power','line_number':499,'multiline':False]
['text':' numerator = significand * 2 * 10^-estimated_power','line_number':504,'multiline':False]
['text':'  since v = significand * 2^exponent this is equivalent to','line_number':505,'multiline':False]
['text':' numerator = v * 10^-estimated_power * 2 * 2^-exponent.','line_number':506,'multiline':False]
['text':' Remember: numerator has been abused as power_ten. So no need to assign it','line_number':507,'multiline':False]
['text':'  to itself.','line_number':508,'multiline':False]
['text':' denominator = 2 * 2^-exponent with exponent < 0.','line_number':512,'multiline':False]
['text':' Introduce a common denominator so that the deltas to the boundaries are','line_number':517,'multiline':False]
['text':' integers.','line_number':518,'multiline':False]
['text':' With this shift the boundaries have their correct value, since','line_number':521,'multiline':False]
['text':' delta_plus = 10^-estimated_power, and','line_number':522,'multiline':False]
['text':' delta_minus = 10^-estimated_power.','line_number':523,'multiline':False]
['text':' These assignments have been done earlier.','line_number':524,'multiline':False]
['text':' The adjustments if f == 2^p-1 (lower boundary is closer) are done later.','line_number':525,'multiline':False]
['text':' Let v = significand * 2^exponent.','line_number':530,'multiline':False]
['text':' Computes v / 10^estimated_power exactly, as a ratio of two bignums, numerator','line_number':531,'multiline':False]
['text':' and denominator. The functions GenerateShortestDigits and','line_number':532,'multiline':False]
['text':' GenerateCountedDigits will then convert this ratio to its decimal','line_number':533,'multiline':False]
['text':' representation d, with the required accuracy.','line_number':534,'multiline':False]
['text':' Then d * 10^estimated_power is the representation of v.','line_number':535,'multiline':False]
['text':' (Note: the fraction and the estimated_power might get adjusted before','line_number':536,'multiline':False]
['text':' generating the decimal representation.)','line_number':537,'multiline':False]
['text':'','line_number':538,'multiline':False]
['text':' The initial start values consist of:','line_number':539,'multiline':False]
['text':'  - a scaled numerator: s.t. numerator/denominator == v / 10^estimated_power.','line_number':540,'multiline':False]
['text':'  - a scaled (common) denominator.','line_number':541,'multiline':False]
['text':'  optionally (used by GenerateShortestDigits to decide if it has the shortest','line_number':542,'multiline':False]
['text':'  decimal converting back to v):','line_number':543,'multiline':False]
['text':'  - v - m-: the distance to the lower boundary.','line_number':544,'multiline':False]
['text':'  - m+ - v: the distance to the upper boundary.','line_number':545,'multiline':False]
['text':'','line_number':546,'multiline':False]
['text':' v, m+, m-, and therefore v - m- and m+ - v all share the same denominator.','line_number':547,'multiline':False]
['text':'','line_number':548,'multiline':False]
['text':' Let ep == estimated_power, then the returned values will satisfy:','line_number':549,'multiline':False]
['text':'  v / 10^ep = numerator / denominator.','line_number':550,'multiline':False]
['text':'  v's boundaries m- and m+:','line_number':551,'multiline':False]
['text':'    m- / 10^ep == v / 10^ep - delta_minus / denominator','line_number':552,'multiline':False]
['text':'    m+ / 10^ep == v / 10^ep + delta_plus / denominator','line_number':553,'multiline':False]
['text':'  Or in other words:','line_number':554,'multiline':False]
['text':'    m- == v - delta_minus * 10^ep / denominator;','line_number':555,'multiline':False]
['text':'    m+ == v + delta_plus * 10^ep / denominator;','line_number':556,'multiline':False]
['text':'','line_number':557,'multiline':False]
['text':' Since 10^(k-1) <= v < 10^k    (with k == estimated_power)','line_number':558,'multiline':False]
['text':'  or       10^k <= v < 10^(k+1)','line_number':559,'multiline':False]
['text':'  we then have 0.1 <= numerator/denominator < 1','line_number':560,'multiline':False]
['text':'           or    1 <= numerator/denominator < 10','line_number':561,'multiline':False]
['text':'','line_number':562,'multiline':False]
['text':' It is then easy to kickstart the digit-generation routine.','line_number':563,'multiline':False]
['text':'','line_number':564,'multiline':False]
['text':' The boundary-deltas are only filled if the mode equals BIGNUM_DTOA_SHORTEST','line_number':565,'multiline':False]
['text':' or BIGNUM_DTOA_SHORTEST_SINGLE.','line_number':566,'multiline':False]
['text':' The lower boundary is closer at half the distance of "normal" numbers.','line_number':592,'multiline':False]
['text':' Increase the common denominator and adapt all but the delta_minus.','line_number':593,'multiline':False]
['text':' *2','line_number':594,'multiline':False]
['text':' *2','line_number':595,'multiline':False]
['text':' *2','line_number':596,'multiline':False]
['text':' This routine multiplies numerator/denominator so that its values lies in the','line_number':601,'multiline':False]
['text':' range 1-10. That is after a call to this function we have:','line_number':602,'multiline':False]
['text':'    1 <= (numerator + delta_plus) /denominator < 10.','line_number':603,'multiline':False]
['text':' Let numerator the input before modification and numerator' the argument','line_number':604,'multiline':False]
['text':' after modification, then the output-parameter decimal_point is such that','line_number':605,'multiline':False]
['text':'  numerator / denominator * 10^estimated_power ==','line_number':606,'multiline':False]
['text':'    numerator' / denominator' * 10^(decimal_point - 1)','line_number':607,'multiline':False]
['text':' In some cases estimated_power was too low, and this is already the case. We','line_number':608,'multiline':False]
['text':' then simply adjust the power so that 10^(k-1) <= v < 10^k (with k ==','line_number':609,'multiline':False]
['text':' estimated_power) but do not touch the numerator or denominator.','line_number':610,'multiline':False]
['text':' Otherwise the routine multiplies the numerator and the deltas by 10.','line_number':611,'multiline':False]
['text':' For IEEE doubles half-way cases (in decimal system numbers ending with 5)','line_number':618,'multiline':False]
['text':' are rounded to the closest floating-point number with even significand.','line_number':619,'multiline':False]
['text':' Since numerator + delta_plus >= denominator we already have','line_number':625,'multiline':False]
['text':' 1 <= numerator/denominator < 10. Simply update the estimated_power.','line_number':626,'multiline':False]
['text':' namespace double_conversion','line_number':641,'multiline':False]
