['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- ','line_number':1,'multiline':True]
['text':' vim: set ts=8 sts=2 et sw=2 tw=80: ','line_number':2,'multiline':True]
['text':' This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':3,'multiline':True]
['text':'
 * A class storing one of two optional value types that supports in-place lazy
 * construction.
 ','line_number':7,'multiline':True]
['text':' for size_t','line_number':15,'multiline':False]
['text':' for placement new','line_number':17,'multiline':False]
['text':'
 * MaybeOneOf<T1, T2> is like Maybe, but it supports constructing either T1
 * or T2. When a MaybeOneOf<T1, T2> is constructed, it is |empty()|, i.e.,
 * no value has been constructed and no destructor will be called when the
 * MaybeOneOf<T1, T2> is destroyed. Upon calling |construct<T1>()| or
 * |construct<T2>()|, a T1 or T2 object will be constructed with the given
 * arguments and that object will be destroyed when the owning MaybeOneOf is
 * destroyed.
 *
 * Because MaybeOneOf must be aligned suitable to hold any value stored within
 * it, and because |alignas| requirements don't affect platform ABI with respect
 * to how parameters are laid out in memory, MaybeOneOf can't be used as the
 * type of a function parameter.  Pass MaybeOneOf to functions by pointer or
 * reference instead.
 ','line_number':26,'multiline':True]
['text':' GCC fails due to -Werror=strict-aliasing if |storage| is directly cast to','line_number':49,'multiline':False]
['text':' T*.  Indirecting through these functions addresses the problem.','line_number':50,'multiline':False]
['text':' namespace mozilla','line_number':153,'multiline':False]
['text':' mozilla_MaybeOneOf_h ','line_number':155,'multiline':True]
