['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- ','line_number':1,'multiline':True]
['text':' vim: set ts=8 sts=2 et sw=2 tw=80: ','line_number':2,'multiline':True]
['text':' This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':3,'multiline':True]
['text':' Character/text operations. ','line_number':7,'multiline':True]
['text':' Can't include mozilla/Encoding.h here.','line_number':16,'multiline':False]
['text':' Declared as uint8_t instead of char to match declaration in another header.','line_number':18,'multiline':False]
['text':' See Utf8.h for IsUtf8() and conversions between UTF-8 and UTF-16.','line_number':25,'multiline':False]
['text':' See Latin1.h for testing UTF-16 and UTF-8 for Latin1ness and','line_number':26,'multiline':False]
['text':' for conversions to and from Latin1.','line_number':27,'multiline':False]
['text':' The overloads below are not templated in order to make','line_number':29,'multiline':False]
['text':' implicit conversions to span work as expected for the Span','line_number':30,'multiline':False]
['text':' overloads.','line_number':31,'multiline':False]
['text':'* Returns true iff |aChar| is ASCII, i.e. in the range [0, 0x80). ','line_number':33,'multiline':True]
['text':'* Returns true iff |aChar| is ASCII, i.e. in the range [0, 0x80). ','line_number':36,'multiline':True]
['text':'* Returns true iff |aChar| is ASCII, i.e. in the range [0, 0x80). ','line_number':41,'multiline':True]
['text':'* Returns true iff |aChar| is ASCII, i.e. in the range [0, 0x80). ','line_number':48,'multiline':True]
['text':'* Returns true iff |aChar| is ASCII, i.e. in the range [0, 0x80). ','line_number':55,'multiline':True]
['text':'* Returns true iff |aChar| is ASCII, i.e. in the range [0, 0x80). ','line_number':58,'multiline':True]
['text':'*
 * Returns |true| iff |aString| contains only ASCII characters, that is,
 * characters in the range [0x00, 0x80).
 *
 * @param aString a 8-bit wide string to scan
 ','line_number':61,'multiline':True]
['text':' For short strings, avoid the function call, since, the SIMD','line_number':71,'multiline':False]
['text':' code won't have a chance to kick in anyway.','line_number':72,'multiline':False]
['text':'*
 * Returns |true| iff |aString| contains only ASCII characters, that is,
 * characters in the range [0x00, 0x80).
 *
 * @param aString a 16-bit wide string to scan
 ','line_number':92,'multiline':True]
['text':' For short strings, calling into Rust is a pessimization, and the SIMD','line_number':102,'multiline':False]
['text':' code won't have a chance to kick in anyway.','line_number':103,'multiline':False]
['text':' 16 is a bit larger than logically necessary for this function alone,','line_number':104,'multiline':False]
['text':' but it's important that the limit here matches the limit used in','line_number':105,'multiline':False]
['text':' LossyConvertUtf16toLatin1!','line_number':106,'multiline':False]
['text':'*
 * Returns true iff every character in the null-terminated string pointed to by
 * |aChar| is ASCII, i.e. in the range [0, 0x80).
 ','line_number':125,'multiline':True]
['text':'*
 * Returns the index of the first non-ASCII byte or
 * the length of the string if there are none.
 ','line_number':140,'multiline':True]
['text':'*
 * Returns the index of the first unpaired surrogate or
 * the length of the string if there are none.
 ','line_number':149,'multiline':True]
['text':'*
 * Replaces unpaired surrogates with U+FFFD in the argument.
 *
 * Note: If you have an nsAString, use EnsureUTF16Validity() from
 * nsReadableUtils.h instead to avoid unsharing a valid shared
 * string.
 ','line_number':157,'multiline':True]
['text':'*
 * Convert ASCII to UTF-16. In debug builds, assert that the input is
 * ASCII.
 *
 * The length of aDest must not be less than the length of aSource.
 ','line_number':168,'multiline':True]
['text':' The code below is implemented based on the equivalent specification in','line_number':180,'multiline':False]
['text':' `encoding_rs`.','line_number':181,'multiline':False]
['text':'*
 * Returns the index of the first non-ASCII byte or
 * the length of the string if there are none.
 ','line_number':183,'multiline':True]
['text':'*
 * Returns the index of the first unpaired surrogate or
 * the length of the string if there are none.
 ','line_number':199,'multiline':True]
['text':'*
 * Replaces unpaired surrogates with U+FFFD in the argument.
 *
 * Note: If you have an nsAString, use EnsureUTF16Validity() from
 * nsReadableUtils.h instead to avoid unsharing a valid shared
 * string.
 ','line_number':205,'multiline':True]
['text':'*
 * Convert ASCII to UTF-16. In debug builds, assert that the input is
 * ASCII.
 *
 * The length of aDest must not be less than the length of aSource.
 ','line_number':226,'multiline':True]
['text':' MOZ_HAS_JSRUST','line_number':237,'multiline':False]
['text':'*
 * Returns true iff |aChar| matches Ascii Whitespace.
 *
 * This function is intended to match the Infra standard
 * (https://infra.spec.whatwg.org/#ascii-whitespace)
 ','line_number':239,'multiline':True]
['text':'*
 * Returns true iff |aChar| matches [a-z].
 *
 * This function is basically what you thought islower was, except its behavior
 * doesn't depend on the user's current locale.
 ','line_number':252,'multiline':True]
['text':'*
 * Returns true iff |aChar| matches [A-Z].
 *
 * This function is basically what you thought isupper was, except its behavior
 * doesn't depend on the user's current locale.
 ','line_number':265,'multiline':True]
['text':'*
 * Returns true iff |aChar| matches [a-zA-Z].
 *
 * This function is basically what you thought isalpha was, except its behavior
 * doesn't depend on the user's current locale.
 ','line_number':278,'multiline':True]
['text':'*
 * Returns true iff |aChar| matches [0-9].
 *
 * This function is basically what you thought isdigit was, except its behavior
 * doesn't depend on the user's current locale.
 ','line_number':289,'multiline':True]
['text':'*
 * Returns true iff |aChar| matches [0-9a-fA-F].
 *
 * This function is basically isxdigit, but guaranteed to be only for ASCII.
 ','line_number':302,'multiline':True]
['text':'*
 * Returns true iff |aChar| matches [a-zA-Z0-9].
 *
 * This function is basically what you thought isalnum was, except its behavior
 * doesn't depend on the user's current locale.
 ','line_number':315,'multiline':True]
['text':'*
 * Converts an ASCII alphanumeric digit [0-9a-zA-Z] to number as if in base-36.
 * (This function therefore works for decimal, hexadecimal, etc.).
 ','line_number':326,'multiline':True]
['text':' Ideally this function would be constexpr, but unfortunately gcc at least as','line_number':343,'multiline':False]
['text':' of 6.4 forbids non-constexpr function calls in unevaluated constexpr','line_number':344,'multiline':False]
['text':' function calls.  See bug 1453456.  So for now, just assert and leave the','line_number':345,'multiline':False]
['text':' entire function non-constexpr.','line_number':346,'multiline':False]
['text':' namespace mozilla','line_number':352,'multiline':False]
['text':' mozilla_TextUtils_h ','line_number':354,'multiline':True]
