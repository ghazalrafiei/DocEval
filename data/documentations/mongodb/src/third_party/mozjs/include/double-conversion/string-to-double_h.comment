['text':' Copyright 2012 the V8 project authors. All rights reserved.','line_number':1,'multiline':False]
['text':' Redistribution and use in source and binary forms, with or without','line_number':2,'multiline':False]
['text':' modification, are permitted provided that the following conditions are','line_number':3,'multiline':False]
['text':' met:','line_number':4,'multiline':False]
['text':'','line_number':5,'multiline':False]
['text':'     * Redistributions of source code must retain the above copyright','line_number':6,'multiline':False]
['text':'       notice, this list of conditions and the following disclaimer.','line_number':7,'multiline':False]
['text':'     * Redistributions in binary form must reproduce the above','line_number':8,'multiline':False]
['text':'       copyright notice, this list of conditions and the following','line_number':9,'multiline':False]
['text':'       disclaimer in the documentation and/or other materials provided','line_number':10,'multiline':False]
['text':'       with the distribution.','line_number':11,'multiline':False]
['text':'     * Neither the name of Google Inc. nor the names of its','line_number':12,'multiline':False]
['text':'       contributors may be used to endorse or promote products derived','line_number':13,'multiline':False]
['text':'       from this software without specific prior written permission.','line_number':14,'multiline':False]
['text':'','line_number':15,'multiline':False]
['text':' THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS','line_number':16,'multiline':False]
['text':' "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT','line_number':17,'multiline':False]
['text':' LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR','line_number':18,'multiline':False]
['text':' A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT','line_number':19,'multiline':False]
['text':' OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,','line_number':20,'multiline':False]
['text':' SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT','line_number':21,'multiline':False]
['text':' LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,','line_number':22,'multiline':False]
['text':' DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY','line_number':23,'multiline':False]
['text':' THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT','line_number':24,'multiline':False]
['text':' (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE','line_number':25,'multiline':False]
['text':' OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.','line_number':26,'multiline':False]
['text':' Enumeration for allowing octals and ignoring junk when converting','line_number':37,'multiline':False]
['text':' strings to numbers.','line_number':38,'multiline':False]
['text':' Deprecated','line_number':48,'multiline':False]
['text':' Flags should be a bit-or combination of the possible Flags-enum.','line_number':54,'multiline':False]
['text':'  - NO_FLAGS: no special flags.','line_number':55,'multiline':False]
['text':'  - ALLOW_HEX: recognizes the prefix "0x". Hex numbers may only be integers.','line_number':56,'multiline':False]
['text':'      Ex: StringToDouble("0x1234") -> 4660.0','line_number':57,'multiline':False]
['text':'          In StringToDouble("0x1234.56") the characters ".56" are trailing','line_number':58,'multiline':False]
['text':'          junk. The result of the call is hence dependent on','line_number':59,'multiline':False]
['text':'          the ALLOW_TRAILING_JUNK flag and/or the junk value.','line_number':60,'multiline':False]
['text':'      With this flag "0x" is a junk-string. Even with ALLOW_TRAILING_JUNK,','line_number':61,'multiline':False]
['text':'      the string will not be parsed as "0" followed by junk.','line_number':62,'multiline':False]
['text':'','line_number':63,'multiline':False]
['text':'  - ALLOW_OCTALS: recognizes the prefix "0" for octals:','line_number':64,'multiline':False]
['text':'      If a sequence of octal digits starts with '0', then the number is','line_number':65,'multiline':False]
['text':'      read as octal integer. Octal numbers may only be integers.','line_number':66,'multiline':False]
['text':'      Ex: StringToDouble("01234") -> 668.0','line_number':67,'multiline':False]
['text':'          StringToDouble("012349") -> 12349.0  // Not a sequence of octal','line_number':68,'multiline':False]
['text':'                                               // digits.','line_number':69,'multiline':False]
['text':'          In StringToDouble("01234.56") the characters ".56" are trailing','line_number':70,'multiline':False]
['text':'          junk. The result of the call is hence dependent on','line_number':71,'multiline':False]
['text':'          the ALLOW_TRAILING_JUNK flag and/or the junk value.','line_number':72,'multiline':False]
['text':'          In StringToDouble("01234e56") the characters "e56" are trailing','line_number':73,'multiline':False]
['text':'          junk, too.','line_number':74,'multiline':False]
['text':'  - ALLOW_TRAILING_JUNK: ignore trailing characters that are not part of','line_number':75,'multiline':False]
['text':'      a double literal.','line_number':76,'multiline':False]
['text':'  - ALLOW_LEADING_SPACES: skip over leading whitespace, including spaces,','line_number':77,'multiline':False]
['text':'                          new-lines, and tabs.','line_number':78,'multiline':False]
['text':'  - ALLOW_TRAILING_SPACES: ignore trailing whitespace.','line_number':79,'multiline':False]
['text':'  - ALLOW_SPACES_AFTER_SIGN: ignore whitespace after the sign.','line_number':80,'multiline':False]
['text':'       Ex: StringToDouble("-   123.2") -> -123.2.','line_number':81,'multiline':False]
['text':'           StringToDouble("+   123.2") -> 123.2','line_number':82,'multiline':False]
['text':'  - ALLOW_CASE_INSENSITIVITY: ignore case of characters for special values:','line_number':83,'multiline':False]
['text':'      infinity and nan.','line_number':84,'multiline':False]
['text':'  - ALLOW_HEX_FLOATS: allows hexadecimal float literals.','line_number':85,'multiline':False]
['text':'      This *must* start with "0x" and separate the exponent with "p".','line_number':86,'multiline':False]
['text':'      Examples: 0x1.2p3 == 9.0','line_number':87,'multiline':False]
['text':'                0x10.1p0 == 16.0625','line_number':88,'multiline':False]
['text':'      ALLOW_HEX and ALLOW_HEX_FLOATS are indendent.','line_number':89,'multiline':False]
['text':'','line_number':90,'multiline':False]
['text':' empty_string_value is returned when an empty string is given as input.','line_number':91,'multiline':False]
['text':' If ALLOW_LEADING_SPACES or ALLOW_TRAILING_SPACES are set, then a string','line_number':92,'multiline':False]
['text':' containing only spaces is converted to the 'empty_string_value', too.','line_number':93,'multiline':False]
['text':'','line_number':94,'multiline':False]
['text':' junk_string_value is returned when','line_number':95,'multiline':False]
['text':'  a) ALLOW_TRAILING_JUNK is not set, and a junk character (a character not','line_number':96,'multiline':False]
['text':'     part of a double-literal) is found.','line_number':97,'multiline':False]
['text':'  b) ALLOW_TRAILING_JUNK is set, but the string does not start with a','line_number':98,'multiline':False]
['text':'     double literal.','line_number':99,'multiline':False]
['text':'','line_number':100,'multiline':False]
['text':' infinity_symbol and nan_symbol are strings that are used to detect','line_number':101,'multiline':False]
['text':' inputs that represent infinity and NaN. They can be null, in which case','line_number':102,'multiline':False]
['text':' they are ignored.','line_number':103,'multiline':False]
['text':' The conversion routine first reads any possible signs. Then it compares the','line_number':104,'multiline':False]
['text':' following character of the input-string with the first character of','line_number':105,'multiline':False]
['text':' the infinity, and nan-symbol. If either matches, the function assumes, that','line_number':106,'multiline':False]
['text':' a match has been found, and expects the following input characters to match','line_number':107,'multiline':False]
['text':' the remaining characters of the special-value symbol.','line_number':108,'multiline':False]
['text':' This means that the following restrictions apply to special-value symbols:','line_number':109,'multiline':False]
['text':'  - they must not start with signs ('+', or '-'),','line_number':110,'multiline':False]
['text':'  - they must not have the same first character.','line_number':111,'multiline':False]
['text':'  - they must not start with digits.','line_number':112,'multiline':False]
['text':'','line_number':113,'multiline':False]
['text':' If the separator character is not kNoSeparator, then that specific','line_number':114,'multiline':False]
['text':' character is ignored when in between two valid digits of the significant.','line_number':115,'multiline':False]
['text':' It is not allowed to appear in the exponent.','line_number':116,'multiline':False]
['text':' It is not allowed to lead or trail the number.','line_number':117,'multiline':False]
['text':' It is not allowed to appear twice next to each other.','line_number':118,'multiline':False]
['text':'','line_number':119,'multiline':False]
['text':' Examples:','line_number':120,'multiline':False]
['text':'  flags = ALLOW_HEX | ALLOW_TRAILING_JUNK,','line_number':121,'multiline':False]
['text':'  empty_string_value = 0.0,','line_number':122,'multiline':False]
['text':'  junk_string_value = NaN,','line_number':123,'multiline':False]
['text':'  infinity_symbol = "infinity",','line_number':124,'multiline':False]
['text':'  nan_symbol = "nan":','line_number':125,'multiline':False]
['text':'    StringToDouble("0x1234") -> 4660.0.','line_number':126,'multiline':False]
['text':'    StringToDouble("0x1234K") -> 4660.0.','line_number':127,'multiline':False]
['text':'    StringToDouble("") -> 0.0  // empty_string_value.','line_number':128,'multiline':False]
['text':'    StringToDouble(" ") -> NaN  // junk_string_value.','line_number':129,'multiline':False]
['text':'    StringToDouble(" 1") -> NaN  // junk_string_value.','line_number':130,'multiline':False]
['text':'    StringToDouble("0x") -> NaN  // junk_string_value.','line_number':131,'multiline':False]
['text':'    StringToDouble("-123.45") -> -123.45.','line_number':132,'multiline':False]
['text':'    StringToDouble("--123.45") -> NaN  // junk_string_value.','line_number':133,'multiline':False]
['text':'    StringToDouble("123e45") -> 123e45.','line_number':134,'multiline':False]
['text':'    StringToDouble("123E45") -> 123e45.','line_number':135,'multiline':False]
['text':'    StringToDouble("123e+45") -> 123e45.','line_number':136,'multiline':False]
['text':'    StringToDouble("123E-45") -> 123e-45.','line_number':137,'multiline':False]
['text':'    StringToDouble("123e") -> 123.0  // trailing junk ignored.','line_number':138,'multiline':False]
['text':'    StringToDouble("123e-") -> 123.0  // trailing junk ignored.','line_number':139,'multiline':False]
['text':'    StringToDouble("+NaN") -> NaN  // NaN string literal.','line_number':140,'multiline':False]
['text':'    StringToDouble("-infinity") -> -inf.  // infinity literal.','line_number':141,'multiline':False]
['text':'    StringToDouble("Infinity") -> NaN  // junk_string_value.','line_number':142,'multiline':False]
['text':'','line_number':143,'multiline':False]
['text':'  flags = ALLOW_OCTAL | ALLOW_LEADING_SPACES,','line_number':144,'multiline':False]
['text':'  empty_string_value = 0.0,','line_number':145,'multiline':False]
['text':'  junk_string_value = NaN,','line_number':146,'multiline':False]
['text':'  infinity_symbol = NULL,','line_number':147,'multiline':False]
['text':'  nan_symbol = NULL:','line_number':148,'multiline':False]
['text':'    StringToDouble("0x1234") -> NaN  // junk_string_value.','line_number':149,'multiline':False]
['text':'    StringToDouble("01234") -> 668.0.','line_number':150,'multiline':False]
['text':'    StringToDouble("") -> 0.0  // empty_string_value.','line_number':151,'multiline':False]
['text':'    StringToDouble(" ") -> 0.0  // empty_string_value.','line_number':152,'multiline':False]
['text':'    StringToDouble(" 1") -> 1.0','line_number':153,'multiline':False]
['text':'    StringToDouble("0x") -> NaN  // junk_string_value.','line_number':154,'multiline':False]
['text':'    StringToDouble("0123e45") -> NaN  // junk_string_value.','line_number':155,'multiline':False]
['text':'    StringToDouble("01239E45") -> 1239e45.','line_number':156,'multiline':False]
['text':'    StringToDouble("-infinity") -> NaN  // junk_string_value.','line_number':157,'multiline':False]
['text':'    StringToDouble("NaN") -> NaN  // junk_string_value.','line_number':158,'multiline':False]
['text':'','line_number':159,'multiline':False]
['text':'  flags = NO_FLAGS,','line_number':160,'multiline':False]
['text':'  separator = ' ':','line_number':161,'multiline':False]
['text':'    StringToDouble("1 2 3 4") -> 1234.0','line_number':162,'multiline':False]
['text':'    StringToDouble("1  2") -> NaN // junk_string_value','line_number':163,'multiline':False]
['text':'    StringToDouble("1 000 000.0") -> 1000000.0','line_number':164,'multiline':False]
['text':'    StringToDouble("1.000 000") -> 1.0','line_number':165,'multiline':False]
['text':'    StringToDouble("1.0e1 000") -> NaN // junk_string_value','line_number':166,'multiline':False]
['text':' Performs the conversion.','line_number':181,'multiline':False]
['text':' The output parameter 'processed_characters_count' is set to the number','line_number':182,'multiline':False]
['text':' of characters that have been processed to read the number.','line_number':183,'multiline':False]
['text':' Spaces than are processed with ALLOW_{LEADING|TRAILING}_SPACES are included','line_number':184,'multiline':False]
['text':' in the 'processed_characters_count'. Trailing junk is never included.','line_number':185,'multiline':False]
['text':' Same as StringToDouble above but for 16 bit characters.','line_number':190,'multiline':False]
['text':' Same as StringToDouble but reads a float.','line_number':195,'multiline':False]
['text':' Note that this is not equivalent to static_cast<float>(StringToDouble(...))','line_number':196,'multiline':False]
['text':' due to potential double-rounding.','line_number':197,'multiline':False]
['text':' Same as StringToFloat above but for 16 bit characters.','line_number':202,'multiline':False]
['text':' namespace double_conversion','line_number':224,'multiline':False]
['text':' DOUBLE_CONVERSION_STRING_TO_DOUBLE_H_','line_number':226,'multiline':False]
