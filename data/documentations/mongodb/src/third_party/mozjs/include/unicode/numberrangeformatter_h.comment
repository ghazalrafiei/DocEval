['text':' Â© 2018 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]
['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]
['text':'*
 * \file
 * \brief C++ API: Library for localized formatting of number, currency, and unit ranges.
 *
 * The main entrypoint to the formatting of ranges of numbers, including currencies and other units of measurement.
 * <p>
 * Usage example:
 * <p>
 * <pre>
 * NumberRangeFormatter::with()
 *     .identityFallback(UNUM_IDENTITY_FALLBACK_APPROXIMATELY_OR_SINGLE_VALUE)
 *     .numberFormatterFirst(NumberFormatter::with().adoptUnit(MeasureUnit::createMeter()))
 *     .numberFormatterSecond(NumberFormatter::with().adoptUnit(MeasureUnit::createKilometer()))
 *     .locale("en-GB")
 *     .formatFormattableRange(750, 1.2, status)
 *     .toString(status);
 * // => "750 m - 1.2 km"
 * </pre>
 * <p>
 * Like NumberFormatter, NumberRangeFormatter instances (i.e., LocalizedNumberRangeFormatter
 * and UnlocalizedNumberRangeFormatter) are immutable and thread-safe. This API is based on the
 * <em>fluent</em> design pattern popularized by libraries such as Google's Guava.
 *
 * @author Shane Carr
 ','line_number':24,'multiline':True]
['text':' Forward declarations:','line_number':53,'multiline':False]
['text':' icu::number','line_number':56,'multiline':False]
['text':' Forward declarations:','line_number':58,'multiline':False]
['text':' Forward declarations:','line_number':65,'multiline':False]
['text':' namespace impl','line_number':72,'multiline':False]
['text':'*
 * \cond
 * Export an explicit template instantiation. See datefmt.h
 * (When building DLLs for Windows this is required.)
 ','line_number':74,'multiline':True]
['text':' namespace icu::number','line_number':80,'multiline':False]
['text':' icu::number','line_number':88,'multiline':False]
['text':'* \endcond ','line_number':90,'multiline':True]
['text':' Other helper classes would go here, but there are none.','line_number':92,'multiline':False]
['text':' icu::number::impl','line_number':94,'multiline':False]
['text':' Do not enclose entire MacroProps with #ifndef U_HIDE_INTERNAL_API, needed for a protected field','line_number':96,'multiline':False]
['text':'* @internal ','line_number':97,'multiline':True]
['text':'* @internal ','line_number':99,'multiline':True]
['text':' = NumberFormatter::with();','line_number':100,'multiline':False]
['text':'* @internal ','line_number':102,'multiline':True]
['text':' = NumberFormatter::with();','line_number':103,'multiline':False]
['text':'* @internal ','line_number':105,'multiline':True]
['text':'* @internal ','line_number':108,'multiline':True]
['text':'* @internal ','line_number':111,'multiline':True]
['text':'* @internal ','line_number':114,'multiline':True]
['text':' NOTE: Uses default copy and move constructors.','line_number':117,'multiline':False]
['text':'*
     * Check all members for errors.
     * @internal
     ','line_number':119,'multiline':True]
['text':' namespace impl','line_number':128,'multiline':False]
['text':'*
 * An abstract base class for specifying settings related to number formatting. This class is implemented by
 * {@link UnlocalizedNumberRangeFormatter} and {@link LocalizedNumberRangeFormatter}. This class is not intended for
 * public subclassing.
 ','line_number':130,'multiline':True]
['text':'*
     * Sets the NumberFormatter instance to use for the numbers in the range. The same formatter is applied to both
     * sides of the range.
     * <p>
     * The NumberFormatter instances must not have a locale applied yet; the locale specified on the
     * NumberRangeFormatter will be used.
     *
     * @param formatter
     *            The formatter to use for both numbers in the range.
     * @return The fluent chain.
     * @stable ICU 63
     ','line_number':138,'multiline':True]
['text':'*
     * Overload of numberFormatterBoth() for use on an rvalue reference.
     *
     * @param formatter
     *            The formatter to use for both numbers in the range.
     * @return The fluent chain.
     * @see #numberFormatterBoth
     * @stable ICU 63
     ','line_number':152,'multiline':True]
['text':'*
     * Overload of numberFormatterBoth() for use on an rvalue reference.
     *
     * @param formatter
     *            The formatter to use for both numbers in the range.
     * @return The fluent chain.
     * @see #numberFormatterBoth
     * @stable ICU 63
     ','line_number':163,'multiline':True]
['text':'*
     * Overload of numberFormatterBoth() for use on an rvalue reference.
     *
     * @param formatter
     *            The formatter to use for both numbers in the range.
     * @return The fluent chain.
     * @see #numberFormatterBoth
     * @stable ICU 63
     ','line_number':174,'multiline':True]
['text':'*
     * Sets the NumberFormatter instance to use for the first number in the range.
     * <p>
     * The NumberFormatter instances must not have a locale applied yet; the locale specified on the
     * NumberRangeFormatter will be used.
     *
     * @param formatterFirst
     *            The formatter to use for the first number in the range.
     * @return The fluent chain.
     * @stable ICU 63
     ','line_number':185,'multiline':True]
['text':'*
     * Overload of numberFormatterFirst() for use on an rvalue reference.
     *
     * @param formatterFirst
     *            The formatter to use for the first number in the range.
     * @return The fluent chain.
     * @see #numberFormatterFirst
     * @stable ICU 63
     ','line_number':198,'multiline':True]
['text':'*
     * Overload of numberFormatterFirst() for use on an rvalue reference.
     *
     * @param formatterFirst
     *            The formatter to use for the first number in the range.
     * @return The fluent chain.
     * @see #numberFormatterFirst
     * @stable ICU 63
     ','line_number':209,'multiline':True]
['text':'*
     * Overload of numberFormatterFirst() for use on an rvalue reference.
     *
     * @param formatterFirst
     *            The formatter to use for the first number in the range.
     * @return The fluent chain.
     * @see #numberFormatterFirst
     * @stable ICU 63
     ','line_number':220,'multiline':True]
['text':'*
     * Sets the NumberFormatter instance to use for the second number in the range.
     * <p>
     * The NumberFormatter instances must not have a locale applied yet; the locale specified on the
     * NumberRangeFormatter will be used.
     *
     * @param formatterSecond
     *            The formatter to use for the second number in the range.
     * @return The fluent chain.
     * @stable ICU 63
     ','line_number':231,'multiline':True]
['text':'*
     * Overload of numberFormatterSecond() for use on an rvalue reference.
     *
     * @param formatterSecond
     *            The formatter to use for the second number in the range.
     * @return The fluent chain.
     * @see #numberFormatterSecond
     * @stable ICU 63
     ','line_number':244,'multiline':True]
['text':'*
     * Overload of numberFormatterSecond() for use on an rvalue reference.
     *
     * @param formatterSecond
     *            The formatter to use for the second number in the range.
     * @return The fluent chain.
     * @see #numberFormatterSecond
     * @stable ICU 63
     ','line_number':255,'multiline':True]
['text':'*
     * Overload of numberFormatterSecond() for use on an rvalue reference.
     *
     * @param formatterSecond
     *            The formatter to use for the second number in the range.
     * @return The fluent chain.
     * @see #numberFormatterSecond
     * @stable ICU 63
     ','line_number':266,'multiline':True]
['text':'*
     * Sets the aggressiveness of "collapsing" fields across the range separator. Possible values:
     * <p>
     * <ul>
     * <li>ALL: "3-5K miles"</li>
     * <li>UNIT: "3K - 5K miles"</li>
     * <li>NONE: "3K miles - 5K miles"</li>
     * <li>AUTO: usually UNIT or NONE, depending on the locale and formatter settings</li>
     * </ul>
     * <p>
     * The default value is AUTO.
     *
     * @param collapse
     *            The collapsing strategy to use for this range.
     * @return The fluent chain.
     * @stable ICU 63
     ','line_number':277,'multiline':True]
['text':'*
     * Overload of collapse() for use on an rvalue reference.
     *
     * @param collapse
     *            The collapsing strategy to use for this range.
     * @return The fluent chain.
     * @see #collapse
     * @stable ICU 63
     ','line_number':296,'multiline':True]
['text':'*
     * Sets the behavior when the two sides of the range are the same. This could happen if the same two numbers are
     * passed to the formatFormattableRange function, or if different numbers are passed to the function but they
     * become the same after rounding rules are applied. Possible values:
     * <p>
     * <ul>
     * <li>SINGLE_VALUE: "5 miles"</li>
     * <li>APPROXIMATELY_OR_SINGLE_VALUE: "~5 miles" or "5 miles", depending on whether the number was the same before
     * rounding was applied</li>
     * <li>APPROXIMATELY: "~5 miles"</li>
     * <li>RANGE: "5-5 miles" (with collapse=UNIT)</li>
     * </ul>
     * <p>
     * The default value is APPROXIMATELY.
     *
     * @param identityFallback
     *            The strategy to use when formatting two numbers that end up being the same.
     * @return The fluent chain.
     * @stable ICU 63
     ','line_number':307,'multiline':True]
['text':'*
     * Overload of identityFallback() for use on an rvalue reference.
     *
     * @param identityFallback
     *            The strategy to use when formatting two numbers that end up being the same.
     * @return The fluent chain.
     * @see #identityFallback
     * @stable ICU 63
     ','line_number':329,'multiline':True]
['text':'*
     * Returns the current (Un)LocalizedNumberRangeFormatter as a LocalPointer
     * wrapping a heap-allocated copy of the current object.
     *
     * This is equivalent to new-ing the move constructor with a value object
     * as the argument.
     *
     * @return A wrapped (Un)LocalizedNumberRangeFormatter pointer, or a wrapped
     *         nullptr on failure.
     * @stable ICU 64
     ','line_number':340,'multiline':True]
['text':'*
     * Overload of clone for use on an rvalue reference.
     *
     * @return A wrapped (Un)LocalizedNumberRangeFormatter pointer, or a wrapped
     *         nullptr on failure.
     * @stable ICU 64
     ','line_number':353,'multiline':True]
['text':'*
     * Sets the UErrorCode if an error occurred in the fluent chain.
     * Preserves older error codes in the outErrorCode.
     * @return true if U_FAILURE(outErrorCode)
     * @stable ICU 63
     ','line_number':362,'multiline':True]
['text':' Do not overwrite the older error code','line_number':370,'multiline':False]
['text':' NOTE: Uses default copy and move constructors.','line_number':377,'multiline':False]
['text':' Don't construct me directly!  Use (Un)LocalizedNumberFormatter.','line_number':382,'multiline':False]
['text':'*
 * A NumberRangeFormatter that does not yet have a locale. In order to format, a locale must be specified.
 *
 * Instances of this class are immutable and thread-safe.
 *
 * @see NumberRangeFormatter
 * @stable ICU 63
 ','line_number':389,'multiline':True]
['text':'*
     * Associate the given locale with the number range formatter. The locale is used for picking the
     * appropriate symbols, formats, and other data for number display.
     *
     * @param locale
     *            The locale to use when loading data for number formatting.
     * @return The fluent chain.
     * @stable ICU 63
     ','line_number':401,'multiline':True]
['text':'*
     * Overload of locale() for use on an rvalue reference.
     *
     * @param locale
     *            The locale to use when loading data for number formatting.
     * @return The fluent chain.
     * @see #locale
     * @stable ICU 63
     ','line_number':412,'multiline':True]
['text':'*
     * Default constructor: puts the formatter into a valid but undefined state.
     *
     * @stable ICU 63
     ','line_number':423,'multiline':True]
['text':'*
     * Returns a copy of this UnlocalizedNumberRangeFormatter.
     * @stable ICU 63
     ','line_number':430,'multiline':True]
['text':'*
     * Move constructor:
     * The source UnlocalizedNumberRangeFormatter will be left in a valid but undefined state.
     * @stable ICU 63
     ','line_number':436,'multiline':True]
['text':'*
     * Copy assignment operator.
     * @stable ICU 63
     ','line_number':443,'multiline':True]
['text':'*
     * Move assignment operator:
     * The source UnlocalizedNumberRangeFormatter will be left in a valid but undefined state.
     * @stable ICU 63
     ','line_number':449,'multiline':True]
['text':' To give the fluent setters access to this class's constructor:','line_number':463,'multiline':False]
['text':' To give NumberRangeFormatter::with() access to this class's constructor:','line_number':466,'multiline':False]
['text':'*
 * A NumberRangeFormatter that has a locale associated with it; this means .formatRange() methods are available.
 *
 * Instances of this class are immutable and thread-safe.
 *
 * @see NumberFormatter
 * @stable ICU 63
 ','line_number':470,'multiline':True]
['text':'*
     * Format the given Formattables to a string using the settings specified in the NumberRangeFormatter fluent setting
     * chain.
     *
     * @param first
     *            The first number in the range, usually to the left in LTR locales.
     * @param second
     *            The second number in the range, usually to the right in LTR locales.
     * @param status
     *            Set if an error occurs while formatting.
     * @return A FormattedNumberRange object; call .toString() to get the string.
     * @stable ICU 63
     ','line_number':481,'multiline':True]
['text':'*
     * Default constructor: puts the formatter into a valid but undefined state.
     *
     * @stable ICU 63
     ','line_number':497,'multiline':True]
['text':'*
     * Returns a copy of this LocalizedNumberRangeFormatter.
     * @stable ICU 63
     ','line_number':504,'multiline':True]
['text':'*
     * Move constructor:
     * The source LocalizedNumberRangeFormatter will be left in a valid but undefined state.
     * @stable ICU 63
     ','line_number':510,'multiline':True]
['text':'*
     * Copy assignment operator.
     * @stable ICU 63
     ','line_number':517,'multiline':True]
['text':'*
     * Move assignment operator:
     * The source LocalizedNumberRangeFormatter will be left in a valid but undefined state.
     * @stable ICU 63
     ','line_number':523,'multiline':True]
['text':'*
     * @param results
     *            The results object. This method will mutate it to save the results.
     * @param equalBeforeRounding
     *            Whether the number was equal before copying it into a DecimalQuantity.
     *            Used for determining the identity fallback behavior.
     * @param status
     *            Set if an error occurs while formatting.
     * @internal
     ','line_number':532,'multiline':True]
['text':' U_HIDE_INTERNAL_API ','line_number':545,'multiline':True]
['text':'*
     * Destruct this LocalizedNumberRangeFormatter, cleaning up any memory it might own.
     * @stable ICU 63
     ','line_number':547,'multiline':True]
['text':' To give the fluent setters access to this class's constructor:','line_number':574,'multiline':False]
['text':' To give UnlocalizedNumberRangeFormatter::locale() access to this class's constructor:','line_number':578,'multiline':False]
['text':'*
 * The result of a number range formatting operation. This class allows the result to be exported in several data types,
 * including a UnicodeString and a FieldPositionIterator.
 *
 * Instances of this class are immutable and thread-safe.
 *
 * @stable ICU 63
 ','line_number':582,'multiline':True]
['text':' Copybrief: this method is older than the parent method','line_number':592,'multiline':False]
['text':'*
     * @copybrief FormattedValue::toString()
     *
     * For more information, see FormattedValue::toString()
     *
     * @stable ICU 63
     ','line_number':593,'multiline':True]
['text':' Copydoc: this method is new in ICU 64','line_number':602,'multiline':False]
['text':'* @copydoc FormattedValue::toTempString() ','line_number':603,'multiline':True]
['text':' Copybrief: this method is older than the parent method','line_number':606,'multiline':False]
['text':'*
     * @copybrief FormattedValue::appendTo()
     *
     * For more information, see FormattedValue::appendTo()
     *
     * @stable ICU 63
     ','line_number':607,'multiline':True]
['text':' Copydoc: this method is new in ICU 64','line_number':616,'multiline':False]
['text':'* @copydoc FormattedValue::nextPosition() ','line_number':617,'multiline':True]
['text':'*
     * Extracts the formatted range as a pair of decimal numbers. This endpoint
     * is useful for obtaining the exact number being printed after scaling
     * and rounding have been applied by the number range formatting pipeline.
     * 
     * The syntax of the unformatted numbers is a "numeric string"
     * as defined in the Decimal Arithmetic Specification, available at
     * http://speleotrove.com/decimal
     *
     * Example C++17 call site:
     *
     *     auto [ first, second ] = range.getDecimalNumbers<std::string>(status);
     *
     * @tparam StringClass A string class compatible with StringByteSink;
     *         for example, std::string.
     * @param status Set if an error occurs.
     * @return A pair of StringClasses containing the numeric strings.
     * @draft ICU 68
     ','line_number':621,'multiline':True]
['text':' U_HIDE_DRAFT_API','line_number':642,'multiline':False]
['text':'*
     * Returns whether the pair of numbers was successfully formatted as a range or whether an identity fallback was
     * used. For example, if the first and second number were the same either before or after rounding occurred, an
     * identity fallback was used.
     *
     * @return An indication the resulting identity situation in the formatted number range.
     * @stable ICU 63
     * @see UNumberRangeIdentityFallback
     ','line_number':644,'multiline':True]
['text':'*
     * Copying not supported; use move constructor instead.
     ','line_number':655,'multiline':True]
['text':'*
     * Copying not supported; use move assignment instead.
     ','line_number':660,'multiline':True]
['text':'*
     * Move constructor:
     * Leaves the source FormattedNumberRange in an undefined state.
     * @stable ICU 63
     ','line_number':665,'multiline':True]
['text':'*
     * Move assignment:
     * Leaves the source FormattedNumberRange in an undefined state.
     * @stable ICU 63
     ','line_number':672,'multiline':True]
['text':'*
     * Destruct an instance of FormattedNumberRange, cleaning up any memory it might own.
     * @stable ICU 63
     ','line_number':679,'multiline':True]
['text':' Can't use LocalPointer because UFormattedNumberRangeData is forward-declared','line_number':686,'multiline':False]
['text':' Error code for the terminal methods','line_number':689,'multiline':False]
['text':'*
     * Internal constructor from data type. Adopts the data pointer.
     ','line_number':692,'multiline':True]
['text':' To allow PluralRules to access the underlying data','line_number':707,'multiline':False]
['text':' To give LocalizedNumberRangeFormatter format methods access to this class's constructor:','line_number':710,'multiline':False]
['text':' To give C API access to internals','line_number':713,'multiline':False]
['text':' inline impl of @draft ICU 68 method','line_number':718,'multiline':False]
['text':' U_HIDE_DRAFT_API','line_number':728,'multiline':False]
['text':'*
 * See the main description in numberrangeformatter.h for documentation and examples.
 *
 * @stable ICU 63
 ','line_number':730,'multiline':True]
['text':'*
     * Call this method at the beginning of a NumberRangeFormatter fluent chain in which the locale is not currently
     * known at the call site.
     *
     * @return An {@link UnlocalizedNumberRangeFormatter}, to be used for chaining.
     * @stable ICU 63
     ','line_number':737,'multiline':True]
['text':'*
     * Call this method at the beginning of a NumberRangeFormatter fluent chain in which the locale is known at the call
     * site.
     *
     * @param locale
     *            The locale from which to load formats and symbols for number range formatting.
     * @return A {@link LocalizedNumberRangeFormatter}, to be used for chaining.
     * @stable ICU 63
     ','line_number':746,'multiline':True]
['text':'*
     * Use factory methods instead of the constructor to create a NumberFormatter.
     ','line_number':757,'multiline':True]
['text':' namespace number','line_number':763,'multiline':False]
['text':' #if !UCONFIG_NO_FORMATTING ','line_number':766,'multiline':True]
['text':' U_SHOW_CPLUSPLUS_API ','line_number':768,'multiline':True]
['text':' __NUMBERRANGEFORMATTER_H__','line_number':770,'multiline':False]
