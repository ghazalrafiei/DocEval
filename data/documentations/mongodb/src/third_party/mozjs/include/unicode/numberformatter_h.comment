['text':' © 2017 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]
['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]
['text':'*
 * \file
 * \brief C++ API: All-in-one formatter for localized numbers, currencies, and units.
 * 
 * For a full list of options, see icu::number::NumberFormatterSettings.
 *
 * <pre>
 * // Most basic usage:
 * NumberFormatter::withLocale(...).format(123).toString();  // 1,234 in en-US
 *
 * // Custom notation, unit, and rounding precision:
 * NumberFormatter::with()
 *     .notation(Notation::compactShort())
 *     .unit(CurrencyUnit("EUR", status))
 *     .precision(Precision::maxDigits(2))
 *     .locale(...)
 *     .format(1234)
 *     .toString();  // €1.2K in en-US
 *
 * // Create a formatter in a singleton by value for use later:
 * static const LocalizedNumberFormatter formatter = NumberFormatter::withLocale(...)
 *     .unit(NoUnit::percent())
 *     .precision(Precision::fixedFraction(3));
 * formatter.format(5.9831).toString();  // 5.983% in en-US
 *
 * // Create a "template" in a singleton unique_ptr but without setting a locale until the call site:
 * std::unique_ptr<UnlocalizedNumberFormatter> template = NumberFormatter::with()
 *     .sign(UNumberSignDisplay::UNUM_SIGN_ALWAYS)
 *     .unit(MeasureUnit::getMeter())
 *     .unitWidth(UNumberUnitWidth::UNUM_UNIT_WIDTH_FULL_NAME)
 *     .clone();
 * template->locale(...).format(1234).toString();  // +1,234 meters in en-US
 * </pre>
 *
 * <p>
 * This API offers more features than DecimalFormat and is geared toward new users of ICU.
 *
 * <p>
 * NumberFormatter instances (i.e., LocalizedNumberFormatter and UnlocalizedNumberFormatter)
 * are immutable and thread safe. This means that invoking a configuration method has no
 * effect on the receiving instance; you must store and use the new number formatter instance it returns instead.
 *
 * <pre>
 * UnlocalizedNumberFormatter formatter = UnlocalizedNumberFormatter::with().notation(Notation::scientific());
 * formatter.precision(Precision.maxFraction(2)); // does nothing!
 * formatter.locale(Locale.getEnglish()).format(9.8765).toString(); // prints "9.8765E0", not "9.88E0"
 * </pre>
 *
 * <p>
 * This API is based on the <em>fluent</em> design pattern popularized by libraries such as Google's Guava. For
 * extensive details on the design of this API, read <a href="https://goo.gl/szi5VB">the design doc</a>.
 *
 * @author Shane Carr
 ','line_number':29,'multiline':True]
['text':' Forward declarations:','line_number':86,'multiline':False]
['text':' Forward declarations:','line_number':94,'multiline':False]
['text':' Forward declarations:','line_number':103,'multiline':False]
['text':' namespace units','line_number':106,'multiline':False]
['text':' icu::number','line_number':108,'multiline':False]
['text':' Forward declarations:','line_number':110,'multiline':False]
['text':' can't be #ifndef U_HIDE_INTERNAL_API; referenced throughout this file in public classes','line_number':124,'multiline':False]
['text':'*
 * Datatype for minimum/maximum fraction digits. Must be able to hold kMaxIntFracSig.
 *
 * @internal
 ','line_number':125,'multiline':True]
['text':' can't be #ifndef U_HIDE_INTERNAL_API; needed for struct initialization','line_number':132,'multiline':False]
['text':'*
 * Use a default threshold of 3. This means that the third time .format() is called, the data structures get built
 * using the "safe" code path. The first two calls to .format() will trigger the unsafe code path.
 *
 * @internal
 ','line_number':133,'multiline':True]
['text':' Forward declarations:','line_number':141,'multiline':False]
['text':'*
 * Used for NumberRangeFormatter and implemented in numrange_fluent.cpp.
 * Declared here so it can be friended.
 *
 * @internal
 ','line_number':168,'multiline':True]
['text':' namespace impl','line_number':176,'multiline':False]
['text':'*
 * Extra name reserved in case it is needed in the future.
 *
 * @stable ICU 63
 ','line_number':178,'multiline':True]
['text':'*
 * Extra name reserved in case it is needed in the future.
 *
 * @stable ICU 63
 ','line_number':185,'multiline':True]
['text':'*
 * A class that defines the notation style to be used when formatting numbers in NumberFormatter.
 *
 * @stable ICU 60
 ','line_number':192,'multiline':True]
['text':'*
     * Print the number using scientific notation (also known as scientific form, standard index form, or standard form
     * in the UK). The format for scientific notation varies by locale; for example, many Western locales display the
     * number in the form "#E0", where the number is displayed with one digit before the decimal separator, zero or more
     * digits after the decimal separator, and the corresponding power of 10 displayed after the "E".
     *
     * <p>
     * Example outputs in <em>en-US</em> when printing 8.765E4 through 8.765E-3:
     *
     * <pre>
     * 8.765E4
     * 8.765E3
     * 8.765E2
     * 8.765E1
     * 8.765E0
     * 8.765E-1
     * 8.765E-2
     * 8.765E-3
     * 0E0
     * </pre>
     *
     * @return A ScientificNotation for chaining or passing to the NumberFormatter notation() setter.
     * @stable ICU 60
     ','line_number':199,'multiline':True]
['text':'*
     * Print the number using engineering notation, a variant of scientific notation in which the exponent must be
     * divisible by 3.
     *
     * <p>
     * Example outputs in <em>en-US</em> when printing 8.765E4 through 8.765E-3:
     *
     * <pre>
     * 87.65E3
     * 8.765E3
     * 876.5E0
     * 87.65E0
     * 8.765E0
     * 876.5E-3
     * 87.65E-3
     * 8.765E-3
     * 0E0
     * </pre>
     *
     * @return A ScientificNotation for chaining or passing to the NumberFormatter notation() setter.
     * @stable ICU 60
     ','line_number':225,'multiline':True]
['text':'*
     * Print the number using short-form compact notation.
     *
     * <p>
     * <em>Compact notation</em>, defined in Unicode Technical Standard #35 Part 3 Section 2.4.1, prints numbers with
     * localized prefixes or suffixes corresponding to different powers of ten. Compact notation is similar to
     * engineering notation in how it scales numbers.
     *
     * <p>
     * Compact notation is ideal for displaying large numbers (over ~1000) to humans while at the same time minimizing
     * screen real estate.
     *
     * <p>
     * In short form, the powers of ten are abbreviated. In <em>en-US</em>, the abbreviations are "K" for thousands, "M"
     * for millions, "B" for billions, and "T" for trillions. Example outputs in <em>en-US</em> when printing 8.765E7
     * through 8.765E0:
     *
     * <pre>
     * 88M
     * 8.8M
     * 876K
     * 88K
     * 8.8K
     * 876
     * 88
     * 8.8
     * </pre>
     *
     * <p>
     * When compact notation is specified without an explicit rounding precision, numbers are rounded off to the closest
     * integer after scaling the number by the corresponding power of 10, but with a digit shown after the decimal
     * separator if there is only one digit before the decimal separator. The default compact notation rounding precision
     * is equivalent to:
     *
     * <pre>
     * Precision::integer().withMinDigits(2)
     * </pre>
     *
     * @return A CompactNotation for passing to the NumberFormatter notation() setter.
     * @stable ICU 60
     ','line_number':249,'multiline':True]
['text':'*
     * Print the number using long-form compact notation. For more information on compact notation, see
     * {@link #compactShort}.
     *
     * <p>
     * In long form, the powers of ten are spelled out fully. Example outputs in <em>en-US</em> when printing 8.765E7
     * through 8.765E0:
     *
     * <pre>
     * 88 million
     * 8.8 million
     * 876 thousand
     * 88 thousand
     * 8.8 thousand
     * 876
     * 88
     * 8.8
     * </pre>
     *
     * @return A CompactNotation for passing to the NumberFormatter notation() setter.
     * @stable ICU 60
     ','line_number':292,'multiline':True]
['text':'*
     * Print the number using simple notation without any scaling by powers of ten. This is the default behavior.
     *
     * <p>
     * Since this is the default behavior, this method needs to be called only when it is necessary to override a
     * previous setting.
     *
     * <p>
     * Example outputs in <em>en-US</em> when printing 8.765E7 through 8.765E0:
     *
     * <pre>
     * 87,650,000
     * 8,765,000
     * 876,500
     * 87,650
     * 8,765
     * 876.5
     * 87.65
     * 8.765
     * </pre>
     *
     * @return A SimpleNotation for passing to the NumberFormatter notation() setter.
     * @stable ICU 60
     ','line_number':316,'multiline':True]
['text':' For NTN_SCIENTIFIC','line_number':348,'multiline':False]
['text':'* @internal (private) ','line_number':349,'multiline':True]
['text':'* @internal (private) ','line_number':351,'multiline':True]
['text':'* @internal (private) ','line_number':353,'multiline':True]
['text':'* @internal (private) ','line_number':355,'multiline':True]
['text':'* @internal (private) ','line_number':357,'multiline':True]
['text':' For NTN_COMPACT','line_number':361,'multiline':False]
['text':' For NTN_ERROR','line_number':364,'multiline':False]
['text':' To allow MacroProps to initialize empty instances:','line_number':386,'multiline':False]
['text':' To allow implementation to access internal types:','line_number':390,'multiline':False]
['text':' To allow access to the skeleton generation code:','line_number':395,'multiline':False]
['text':'*
 * A class that defines the scientific notation style to be used when formatting numbers in NumberFormatter.
 *
 * <p>
 * To create a ScientificNotation, use one of the factory methods in {@link Notation}.
 *
 * @stable ICU 60
 ','line_number':399,'multiline':True]
['text':'*
     * Sets the minimum number of digits to show in the exponent of scientific notation, padding with zeros if
     * necessary. Useful for fixed-width display.
     *
     * <p>
     * For example, with minExponentDigits=2, the number 123 will be printed as "1.23E02" in <em>en-US</em> instead of
     * the default "1.23E2".
     *
     * @param minExponentDigits
     *            The minimum number of digits to show in the exponent.
     * @return A ScientificNotation, for chaining.
     * @stable ICU 60
     ','line_number':409,'multiline':True]
['text':'*
     * Sets whether to show the sign on positive and negative exponents in scientific notation. The default is AUTO,
     * showing the minus sign but not the plus sign.
     *
     * <p>
     * For example, with exponentSignDisplay=ALWAYS, the number 123 will be printed as "1.23E+2" in <em>en-US</em>
     * instead of the default "1.23E2".
     *
     * @param exponentSignDisplay
     *            The strategy for displaying the sign in the exponent.
     * @return A ScientificNotation, for chaining.
     * @stable ICU 60
     ','line_number':424,'multiline':True]
['text':' Inherit constructor','line_number':440,'multiline':False]
['text':' Raw constructor for NumberPropertyMapper','line_number':443,'multiline':False]
['text':' So that NumberPropertyMapper can create instances','line_number':449,'multiline':False]
['text':'*
 * Extra name reserved in case it is needed in the future.
 *
 * @stable ICU 63
 ','line_number':453,'multiline':True]
['text':'*
 * A class that defines the rounding precision to be used when formatting numbers in NumberFormatter.
 *
 * <p>
 * To create a Precision, use one of the factory methods.
 *
 * @stable ICU 60
 ','line_number':460,'multiline':True]
['text':'*
     * Show all available digits to full precision.
     *
     * <p>
     * <strong>NOTE:</strong> When formatting a <em>double</em>, this method, along with {@link #minFraction} and
     * {@link #minSignificantDigits}, will trigger complex algorithm similar to <em>Dragon4</em> to determine the
     * low-order digits and the number of digits to display based on the value of the double.
     * If the number of fraction places or significant digits can be bounded, consider using {@link #maxFraction}
     * or {@link #maxSignificantDigits} instead to maximize performance.
     * For more information, read the following blog post.
     *
     * <p>
     * http://www.serpentine.com/blog/2011/06/29/here-be-dragons-advances-in-problems-you-didnt-even-know-you-had/
     *
     * @return A Precision for chaining or passing to the NumberFormatter precision() setter.
     * @stable ICU 60
     ','line_number':471,'multiline':True]
['text':'*
     * Show numbers rounded if necessary to the nearest integer.
     *
     * @return A FractionPrecision for chaining or passing to the NumberFormatter precision() setter.
     * @stable ICU 60
     ','line_number':490,'multiline':True]
['text':'*
     * Show numbers rounded if necessary to a certain number of fraction places (numerals after the decimal separator).
     * Additionally, pad with zeros to ensure that this number of places are always shown.
     *
     * <p>
     * Example output with minMaxFractionPlaces = 3:
     *
     * <p>
     * 87,650.000<br>
     * 8,765.000<br>
     * 876.500<br>
     * 87.650<br>
     * 8.765<br>
     * 0.876<br>
     * 0.088<br>
     * 0.009<br>
     * 0.000 (zero)
     *
     * <p>
     * This method is equivalent to {@link #minMaxFraction} with both arguments equal.
     *
     * @param minMaxFractionPlaces
     *            The minimum and maximum number of numerals to display after the decimal separator (rounding if too
     *            long or padding with zeros if too short).
     * @return A FractionPrecision for chaining or passing to the NumberFormatter precision() setter.
     * @stable ICU 60
     ','line_number':498,'multiline':True]
['text':'*
     * Always show at least a certain number of fraction places after the decimal separator, padding with zeros if
     * necessary. Do not perform rounding (display numbers to their full precision).
     *
     * <p>
     * <strong>NOTE:</strong> If you are formatting <em>doubles</em>, see the performance note in {@link #unlimited}.
     *
     * @param minFractionPlaces
     *            The minimum number of numerals to display after the decimal separator (padding with zeros if
     *            necessary).
     * @return A FractionPrecision for chaining or passing to the NumberFormatter precision() setter.
     * @stable ICU 60
     ','line_number':527,'multiline':True]
['text':'*
     * Show numbers rounded if necessary to a certain number of fraction places (numerals after the decimal separator).
     * Unlike the other fraction rounding strategies, this strategy does <em>not</em> pad zeros to the end of the
     * number.
     *
     * @param maxFractionPlaces
     *            The maximum number of numerals to display after the decimal mark (rounding if necessary).
     * @return A FractionPrecision for chaining or passing to the NumberFormatter precision() setter.
     * @stable ICU 60
     ','line_number':542,'multiline':True]
['text':'*
     * Show numbers rounded if necessary to a certain number of fraction places (numerals after the decimal separator);
     * in addition, always show at least a certain number of places after the decimal separator, padding with zeros if
     * necessary.
     *
     * @param minFractionPlaces
     *            The minimum number of numerals to display after the decimal separator (padding with zeros if
     *            necessary).
     * @param maxFractionPlaces
     *            The maximum number of numerals to display after the decimal separator (rounding if necessary).
     * @return A FractionPrecision for chaining or passing to the NumberFormatter precision() setter.
     * @stable ICU 60
     ','line_number':554,'multiline':True]
['text':'*
     * Show numbers rounded if necessary to a certain number of significant digits or significant figures. Additionally,
     * pad with zeros to ensure that this number of significant digits/figures are always shown.
     *
     * <p>
     * This method is equivalent to {@link #minMaxSignificantDigits} with both arguments equal.
     *
     * @param minMaxSignificantDigits
     *            The minimum and maximum number of significant digits to display (rounding if too long or padding with
     *            zeros if too short).
     * @return A precision for chaining or passing to the NumberFormatter precision() setter.
     * @stable ICU 62
     ','line_number':569,'multiline':True]
['text':'*
     * Always show at least a certain number of significant digits/figures, padding with zeros if necessary. Do not
     * perform rounding (display numbers to their full precision).
     *
     * <p>
     * <strong>NOTE:</strong> If you are formatting <em>doubles</em>, see the performance note in {@link #unlimited}.
     *
     * @param minSignificantDigits
     *            The minimum number of significant digits to display (padding with zeros if too short).
     * @return A precision for chaining or passing to the NumberFormatter precision() setter.
     * @stable ICU 62
     ','line_number':584,'multiline':True]
['text':'*
     * Show numbers rounded if necessary to a certain number of significant digits/figures.
     *
     * @param maxSignificantDigits
     *            The maximum number of significant digits to display (rounding if too long).
     * @return A precision for chaining or passing to the NumberFormatter precision() setter.
     * @stable ICU 62
     ','line_number':598,'multiline':True]
['text':'*
     * Show numbers rounded if necessary to a certain number of significant digits/figures; in addition, always show at
     * least a certain number of significant digits, padding with zeros if necessary.
     *
     * @param minSignificantDigits
     *            The minimum number of significant digits to display (padding with zeros if necessary).
     * @param maxSignificantDigits
     *            The maximum number of significant digits to display (rounding if necessary).
     * @return A precision for chaining or passing to the NumberFormatter precision() setter.
     * @stable ICU 62
     ','line_number':608,'multiline':True]
['text':'*
     * Show numbers rounded if necessary to the closest multiple of a certain rounding increment. For example, if the
     * rounding increment is 0.5, then round 1.2 to 1 and round 1.3 to 1.5.
     *
     * <p>
     * In order to ensure that numbers are padded to the appropriate number of fraction places, call
     * withMinFraction() on the return value of this method.
     * For example, to round to the nearest 0.5 and always display 2 numerals after the
     * decimal separator (to display 1.2 as "1.00" and 1.3 as "1.50"), you can run:
     *
     * <pre>
     * Precision::increment(0.5).withMinFraction(2)
     * </pre>
     *
     * @param roundingIncrement
     *            The increment to which to round numbers.
     * @return A precision for chaining or passing to the NumberFormatter precision() setter.
     * @stable ICU 60
     ','line_number':622,'multiline':True]
['text':'*
     * Show numbers rounded and padded according to the rules for the currency unit. The most common
     * rounding precision settings for currencies include <code>Precision::fixedFraction(2)</code>,
     * <code>Precision::integer()</code>, and <code>Precision::increment(0.05)</code> for cash transactions
     * ("nickel rounding").
     *
     * <p>
     * The exact rounding details will be resolved at runtime based on the currency unit specified in the
     * NumberFormatter chain. To round according to the rules for one currency while displaying the symbol for another
     * currency, the withCurrency() method can be called on the return value of this method.
     *
     * @param currencyUsage
     *            Either STANDARD (for digital transactions) or CASH (for transactions where the rounding increment may
     *            be limited by the available denominations of cash or coins).
     * @return A CurrencyPrecision for chaining or passing to the NumberFormatter precision() setter.
     * @stable ICU 60
     ','line_number':643,'multiline':True]
['text':'*
     * Configure how trailing zeros are displayed on numbers. For example, to hide trailing zeros
     * when the number is an integer, use UNUM_TRAILING_ZERO_HIDE_IF_WHOLE.
     *
     * @param trailingZeroDisplay Option to configure the display of trailing zeros.
     * @draft ICU 69
     ','line_number':663,'multiline':True]
['text':' U_HIDE_DRAFT_API','line_number':671,'multiline':False]
['text':' Used for strange increments like 3.14.','line_number':681,'multiline':False]
['text':' Used for increments with 1 as the only digit. This is different than fraction','line_number':684,'multiline':False]
['text':' rounding because it supports having additional trailing zeros. For example, this','line_number':685,'multiline':False]
['text':' class is used to round with the increment 0.010.','line_number':686,'multiline':False]
['text':' Used for increments with 5 as the only digit (nickel rounding).','line_number':689,'multiline':False]
['text':'* @internal (private) ','line_number':697,'multiline':True]
['text':' For RND_FRACTION, RND_SIGNIFICANT, and RND_FRACTION_SIGNIFICANT','line_number':699,'multiline':False]
['text':'* @internal (private) ','line_number':700,'multiline':True]
['text':'* @internal (private) ','line_number':702,'multiline':True]
['text':'* @internal (private) ','line_number':704,'multiline':True]
['text':'* @internal (private) ','line_number':706,'multiline':True]
['text':'* @internal (private) ','line_number':708,'multiline':True]
['text':'* @internal (private) ','line_number':711,'multiline':True]
['text':' For RND_INCREMENT, RND_INCREMENT_ONE, and RND_INCREMENT_FIVE','line_number':713,'multiline':False]
['text':'* @internal (private) ','line_number':714,'multiline':True]
['text':'* @internal (private) ','line_number':716,'multiline':True]
['text':'* @internal (private) ','line_number':718,'multiline':True]
['text':' For RND_CURRENCY','line_number':721,'multiline':False]
['text':' For RND_ERROR','line_number':722,'multiline':False]
['text':' On the parent type so that this method can be called internally on Precision instances.','line_number':751,'multiline':False]
['text':' To allow MacroProps/MicroProps to initialize bogus instances:','line_number':768,'multiline':False]
['text':' To allow NumberFormatterImpl to access isBogus() and other internal methods:','line_number':772,'multiline':False]
['text':' To allow NumberPropertyMapper to create instances from DecimalFormatProperties:','line_number':775,'multiline':False]
['text':' To allow access to the main implementation class:','line_number':778,'multiline':False]
['text':' To allow child classes to call private methods:','line_number':781,'multiline':False]
['text':' To allow access to the skeleton generation code:','line_number':786,'multiline':False]
['text':' To allow access to isBogus and the default (bogus) constructor:','line_number':789,'multiline':False]
['text':'*
 * A class that defines a rounding precision based on a number of fraction places and optionally significant digits to be
 * used when formatting numbers in NumberFormatter.
 *
 * <p>
 * To create a FractionPrecision, use one of the factory methods on Precision.
 *
 * @stable ICU 60
 ','line_number':793,'multiline':True]
['text':'*
     * Override maximum fraction digits with maximum significant digits depending on the magnitude
     * of the number. See UNumberRoundingPriority.
     *
     * @param minSignificantDigits
     *            Pad trailing zeros to achieve this minimum number of significant digits.
     * @param maxSignificantDigits
     *            Round the number to achieve this maximum number of significant digits.
     * @param priority
     *            How to disambiguate between fraction digits and significant digits.
     * @return A precision for chaining or passing to the NumberFormatter precision() setter.
     *
     * @draft ICU 69
     ','line_number':805,'multiline':True]
['text':' U_HIDE_DRAFT_API','line_number':823,'multiline':False]
['text':'*
     * Ensure that no less than this number of significant digits are retained when rounding
     * according to fraction rules.
     *
     * For example, with integer rounding, the number 3.141 becomes "3". However, with minimum
     * figures set to 2, 3.141 becomes "3.1" instead.
     *
     * This setting does not affect the number of trailing zeros. For example, 3.01 would print as
     * "3", not "3.0".
     *
     * This is equivalent to `withSignificantDigits(1, minSignificantDigits, RELAXED)`.
     *
     * @param minSignificantDigits
     *            The number of significant figures to guarantee.
     * @return A precision for chaining or passing to the NumberFormatter precision() setter.
     * @stable ICU 60
     ','line_number':825,'multiline':True]
['text':'*
     * Ensure that no more than this number of significant digits are retained when rounding
     * according to fraction rules.
     *
     * For example, with integer rounding, the number 123.4 becomes "123". However, with maximum
     * figures set to 2, 123.4 becomes "120" instead.
     *
     * This setting does not affect the number of trailing zeros. For example, with fixed fraction
     * of 2, 123.4 would become "120.00".
     *
     * This is equivalent to `withSignificantDigits(1, maxSignificantDigits, STRICT)`.
     *
     * @param maxSignificantDigits
     *            Round the number to no more than this number of significant figures.
     * @return A precision for chaining or passing to the NumberFormatter precision() setter.
     * @stable ICU 60
     ','line_number':844,'multiline':True]
['text':' Inherit constructor','line_number':864,'multiline':False]
['text':' To allow parent class to call this class's constructor:','line_number':867,'multiline':False]
['text':'*
 * A class that defines a rounding precision parameterized by a currency to be used when formatting numbers in
 * NumberFormatter.
 *
 * <p>
 * To create a CurrencyPrecision, use one of the factory methods on Precision.
 *
 * @stable ICU 60
 ','line_number':871,'multiline':True]
['text':'*
      * Associates a currency with this rounding precision.
      *
      * <p>
      * <strong>Calling this method is <em>not required</em></strong>, because the currency specified in unit()
      * is automatically applied to currency rounding precisions. However,
      * this method enables you to override that automatic association.
      *
      * <p>
      * This method also enables numbers to be formatted using currency rounding rules without explicitly using a
      * currency format.
      *
      * @param currency
      *            The currency to associate with this rounding precision.
      * @return A precision for chaining or passing to the NumberFormatter precision() setter.
      * @stable ICU 60
      ','line_number':882,'multiline':True]
['text':' Inherit constructor','line_number':902,'multiline':False]
['text':' To allow parent class to call this class's constructor:','line_number':905,'multiline':False]
['text':'*
 * A class that defines a rounding precision parameterized by a rounding increment to be used when formatting numbers in
 * NumberFormatter.
 *
 * <p>
 * To create an IncrementPrecision, use one of the factory methods on Precision.
 *
 * @stable ICU 60
 ','line_number':909,'multiline':True]
['text':'*
     * Specifies the minimum number of fraction digits to render after the decimal separator, padding with zeros if
     * necessary.  By default, no trailing zeros are added.
     *
     * <p>
     * For example, if the rounding increment is 0.5 and minFrac is 2, then the resulting strings include "0.00",
     * "0.50", "1.00", and "1.50".
     *
     * <p>
     * Note: In ICU4J, this functionality is accomplished via the scale of the BigDecimal rounding increment.
     *
     * @param minFrac The minimum number of digits after the decimal separator.
     * @return A precision for chaining or passing to the NumberFormatter precision() setter.
     * @stable ICU 60
     ','line_number':920,'multiline':True]
['text':' Inherit constructor','line_number':938,'multiline':False]
['text':' To allow parent class to call this class's constructor:','line_number':941,'multiline':False]
['text':'*
 * A class that defines the strategy for padding and truncating integers before the decimal separator.
 *
 * <p>
 * To create an IntegerWidth, use one of the factory methods.
 *
 * @stable ICU 60
 * @see NumberFormatter
 ','line_number':945,'multiline':True]
['text':'*
     * Pad numbers at the beginning with zeros to guarantee a certain number of numerals before the decimal separator.
     *
     * <p>
     * For example, with minInt=3, the number 55 will get printed as "055".
     *
     * @param minInt
     *            The minimum number of places before the decimal separator.
     * @return An IntegerWidth for chaining or passing to the NumberFormatter integerWidth() setter.
     * @stable ICU 60
     ','line_number':956,'multiline':True]
['text':'*
     * Truncate numbers exceeding a certain number of numerals before the decimal separator.
     *
     * For example, with maxInt=3, the number 1234 will get printed as "234".
     *
     * @param maxInt
     *            The maximum number of places before the decimal separator. maxInt == -1 means no
     *            truncation.
     * @return An IntegerWidth for passing to the NumberFormatter integerWidth() setter.
     * @stable ICU 60
     ','line_number':969,'multiline':True]
['text':' NOLINT','line_number':995,'multiline':False]
['text':' NOLINT','line_number':1000,'multiline':False]
['text':'* Returns the default instance. ','line_number':1004,'multiline':True]
['text':' To allow MacroProps/MicroProps to initialize empty instances:','line_number':1025,'multiline':False]
['text':' To allow NumberFormatterImpl to access isBogus():','line_number':1029,'multiline':False]
['text':' To allow the use of this class when formatting:','line_number':1032,'multiline':False]
['text':' So that NumberPropertyMapper can create instances','line_number':1036,'multiline':False]
['text':' To allow access to the skeleton generation code:','line_number':1039,'multiline':False]
['text':'*
 * A class that defines a quantity by which a number should be multiplied when formatting.
 *
 * <p>
 * To create a Scale, use one of the factory methods.
 *
 * @stable ICU 62
 ','line_number':1043,'multiline':True]
['text':'*
     * Do not change the value of numbers when formatting or parsing.
     *
     * @return A Scale to prevent any multiplication.
     * @stable ICU 62
     ','line_number':1053,'multiline':True]
['text':'*
     * Multiply numbers by a power of ten before formatting. Useful for combining with a percent unit:
     *
     * <pre>
     * NumberFormatter::with().unit(NoUnit::percent()).multiplier(Scale::powerOfTen(2))
     * </pre>
     *
     * @return A Scale for passing to the setter in NumberFormatter.
     * @stable ICU 62
     ','line_number':1061,'multiline':True]
['text':'*
     * Multiply numbers by an arbitrary value before formatting. Useful for unit conversions.
     *
     * This method takes a string in a decimal number format with syntax
     * as defined in the Decimal Arithmetic Specification, available at
     * http://speleotrove.com/decimal
     *
     * Also see the version of this method that takes a double.
     *
     * @return A Scale for passing to the setter in NumberFormatter.
     * @stable ICU 62
     ','line_number':1073,'multiline':True]
['text':'*
     * Multiply numbers by an arbitrary value before formatting. Useful for unit conversions.
     *
     * This method takes a double; also see the version of this method that takes an exact decimal.
     *
     * @return A Scale for passing to the setter in NumberFormatter.
     * @stable ICU 62
     ','line_number':1087,'multiline':True]
['text':'*
     * Multiply a number by both a power of ten and by an arbitrary double value.
     *
     * @return A Scale for passing to the setter in NumberFormatter.
     * @stable ICU 62
     ','line_number':1097,'multiline':True]
['text':' We need a custom destructor for the DecNum, which means we need to declare','line_number':1105,'multiline':False]
['text':' the copy/move constructor/assignment quartet.','line_number':1106,'multiline':False]
['text':'* @stable ICU 62 ','line_number':1108,'multiline':True]
['text':'* @stable ICU 62 ','line_number':1111,'multiline':True]
['text':'* @stable ICU 62 ','line_number':1114,'multiline':True]
['text':'* @stable ICU 62 ','line_number':1117,'multiline':True]
['text':'* @stable ICU 62 ','line_number':1120,'multiline':True]
['text':'* @internal ','line_number':1124,'multiline':True]
['text':' U_HIDE_INTERNAL_API ','line_number':1126,'multiline':True]
['text':' To allow MacroProps/MicroProps to initialize empty instances:','line_number':1153,'multiline':False]
['text':' To allow NumberFormatterImpl to access isBogus() and perform other operations:','line_number':1157,'multiline':False]
['text':' To allow the helper class MultiplierFormatHandler access to private fields:','line_number':1160,'multiline':False]
['text':' To allow access to the skeleton generation code:','line_number':1163,'multiline':False]
['text':' To allow access to parsing code:','line_number':1166,'multiline':False]
['text':' Do not enclose entire StringProp with #ifndef U_HIDE_INTERNAL_API, needed for a protected field','line_number':1173,'multiline':False]
['text':'*
 * Manages NumberFormatterSettings::usage()'s char* instance on the heap.
 * @internal
 ','line_number':1174,'multiline':True]
['text':'* @internal ','line_number':1183,'multiline':True]
['text':'* @internal ','line_number':1186,'multiline':True]
['text':'* @internal ','line_number':1189,'multiline':True]
['text':'* @internal ','line_number':1192,'multiline':True]
['text':'* @internal ','line_number':1195,'multiline':True]
['text':'* @internal ','line_number':1198,'multiline':True]
['text':'* @internal
     * Makes a copy of value. Set to "" to unset.
     ','line_number':1203,'multiline':True]
['text':'* @internal ','line_number':1208,'multiline':True]
['text':' U_HIDE_INTERNAL_API','line_number':1213,'multiline':False]
['text':'* @internal (private) ','line_number':1223,'multiline':True]
['text':' Allow NumberFormatterImpl to access fValue.','line_number':1232,'multiline':False]
['text':' Allow skeleton generation code to access private members.','line_number':1235,'multiline':False]
['text':' Allow MacroProps/MicroProps to initialize empty instances and to call','line_number':1238,'multiline':False]
['text':' copyErrorTo().','line_number':1239,'multiline':False]
['text':' Do not enclose entire SymbolsWrapper with #ifndef U_HIDE_INTERNAL_API, needed for a protected field','line_number':1243,'multiline':False]
['text':'* @internal ','line_number':1244,'multiline':True]
['text':'* @internal ','line_number':1247,'multiline':True]
['text':'* @internal ','line_number':1250,'multiline':True]
['text':'* @internal ','line_number':1253,'multiline':True]
['text':'* @internal ','line_number':1256,'multiline':True]
['text':'* @internal ','line_number':1259,'multiline':True]
['text':'* @internal ','line_number':1262,'multiline':True]
['text':'*
     * The provided object is copied, but we do not adopt it.
     * @internal
     ','line_number':1267,'multiline':True]
['text':'*
     * Adopt the provided object.
     * @internal
     ','line_number':1273,'multiline':True]
['text':'*
     * Whether the object is currently holding a DecimalFormatSymbols.
     * @internal
     ','line_number':1279,'multiline':True]
['text':'*
     * Whether the object is currently holding a NumberingSystem.
     * @internal
     ','line_number':1285,'multiline':True]
['text':'*
     * Get the DecimalFormatSymbols pointer. No ownership change.
     * @internal
     ','line_number':1291,'multiline':True]
['text':'*
     * Get the NumberingSystem pointer. No ownership change.
     * @internal
     ','line_number':1297,'multiline':True]
['text':' U_HIDE_INTERNAL_API','line_number':1303,'multiline':False]
['text':'* @internal ','line_number':1305,'multiline':True]
['text':' Do not enclose entire Grouper with #ifndef U_HIDE_INTERNAL_API, needed for a protected field','line_number':1334,'multiline':False]
['text':'* @internal ','line_number':1335,'multiline':True]
['text':'* @internal ','line_number':1339,'multiline':True]
['text':'*
     * Resolve the values in Properties to a Grouper object.
     * @internal
     ','line_number':1342,'multiline':True]
['text':' Future: static Grouper forProperties(DecimalFormatProperties& properties);','line_number':1348,'multiline':False]
['text':'* @internal ','line_number':1350,'multiline':True]
['text':'* @internal ','line_number':1357,'multiline':True]
['text':'* @internal ','line_number':1360,'multiline':True]
['text':' U_HIDE_INTERNAL_API','line_number':1362,'multiline':False]
['text':'*
     * The grouping sizes, with the following special values:
     * <ul>
     * <li>-1 = no grouping
     * <li>-2 = needs locale data
     * <li>-4 = fall back to Western grouping if not in locale
     * </ul>
     ','line_number':1365,'multiline':True]
['text':'*
     * The minimum grouping size, with the following special values:
     * <ul>
     * <li>-2 = needs locale data
     * <li>-3 = no less than 2
     * </ul>
     ','line_number':1376,'multiline':True]
['text':'*
     * The UNumberGroupingStrategy that was used to create this Grouper, or UNUM_GROUPING_COUNT if this
     * was not created from a UNumberGroupingStrategy.
     ','line_number':1385,'multiline':True]
['text':'* NON-CONST: mutates the current instance. ','line_number':1397,'multiline':True]
['text':' To allow MacroProps/MicroProps to initialize empty instances:','line_number':1402,'multiline':False]
['text':' To allow NumberFormatterImpl to access isBogus() and perform other operations:','line_number':1406,'multiline':False]
['text':' To allow NumberParserImpl to perform setLocaleData():','line_number':1409,'multiline':False]
['text':' To allow access to the skeleton generation code:','line_number':1412,'multiline':False]
['text':' Do not enclose entire Padder with #ifndef U_HIDE_INTERNAL_API, needed for a protected field','line_number':1416,'multiline':False]
['text':'* @internal ','line_number':1417,'multiline':True]
['text':'* @internal ','line_number':1421,'multiline':True]
['text':'* @internal ','line_number':1424,'multiline':True]
['text':'* @internal ','line_number':1427,'multiline':True]
['text':' U_HIDE_INTERNAL_API','line_number':1429,'multiline':False]
['text':' -3 = error; -2 = bogus; -1 = no padding','line_number':1432,'multiline':False]
['text':' NOLINT','line_number':1445,'multiline':False]
['text':' NOLINT','line_number':1449,'multiline':False]
['text':' To allow MacroProps/MicroProps to initialize empty instances:','line_number':1471,'multiline':False]
['text':' To allow NumberFormatterImpl to access isBogus() and perform other operations:','line_number':1475,'multiline':False]
['text':' To allow access to the skeleton generation code:','line_number':1478,'multiline':False]
['text':' Do not enclose entire MacroProps with #ifndef U_HIDE_INTERNAL_API, needed for a protected field','line_number':1482,'multiline':False]
['text':'* @internal ','line_number':1483,'multiline':True]
['text':'* @internal ','line_number':1485,'multiline':True]
['text':'* @internal ','line_number':1488,'multiline':True]
['text':' = MeasureUnit();  (the base dimensionless unit)','line_number':1489,'multiline':False]
['text':'* @internal ','line_number':1491,'multiline':True]
['text':' = MeasureUnit();  (the base dimensionless unit)','line_number':1492,'multiline':False]
['text':'* @internal ','line_number':1494,'multiline':True]
['text':' = Precision();  (bogus)','line_number':1495,'multiline':False]
['text':'* @internal ','line_number':1497,'multiline':True]
['text':'* @internal ','line_number':1500,'multiline':True]
['text':' = Grouper();  (bogus)','line_number':1501,'multiline':False]
['text':'* @internal ','line_number':1503,'multiline':True]
['text':' = Padder();   (bogus)','line_number':1504,'multiline':False]
['text':'* @internal ','line_number':1506,'multiline':True]
['text':' = IntegerWidth(); (bogus)','line_number':1507,'multiline':False]
['text':'* @internal ','line_number':1509,'multiline':True]
['text':' UNUM_XYZ_COUNT denotes null (bogus) values.','line_number':1512,'multiline':False]
['text':'* @internal ','line_number':1514,'multiline':True]
['text':'* @internal ','line_number':1517,'multiline':True]
['text':'* @internal ','line_number':1520,'multiline':True]
['text':'* @internal ','line_number':1523,'multiline':True]
['text':' = Scale();  (benign value)','line_number':1524,'multiline':False]
['text':'* @internal ','line_number':1526,'multiline':True]
['text':' = StringProp();  (no usage)','line_number':1527,'multiline':False]
['text':'* @internal ','line_number':1529,'multiline':True]
['text':' = StringProp();  (nominative)','line_number':1530,'multiline':False]
['text':'* @internal ','line_number':1532,'multiline':True]
['text':' no ownership','line_number':1533,'multiline':False]
['text':'* @internal ','line_number':1535,'multiline':True]
['text':' no ownership','line_number':1536,'multiline':False]
['text':'* @internal ','line_number':1538,'multiline':True]
['text':'* @internal ','line_number':1541,'multiline':True]
['text':' NOTE: Uses default copy and move constructors.','line_number':1544,'multiline':False]
['text':'*
     * Check all members for errors.
     * @internal
     ','line_number':1546,'multiline':True]
['text':' namespace impl','line_number':1558,'multiline':False]
['text':' Ignore MSVC warning 4661. This is generated for NumberFormatterSettings<>::toSkeleton() as this method','line_number':1561,'multiline':False]
['text':' is defined elsewhere (in number_skeletons.cpp). The compiler is warning that the explicit template instantiation','line_number':1562,'multiline':False]
['text':' inside this single translation unit (CPP file) is incomplete, and thus it isn't sure if the template class is','line_number':1563,'multiline':False]
['text':' fully defined. However, since each translation unit explicitly instantiates all the necessary template classes,','line_number':1564,'multiline':False]
['text':' they will all be passed to the linker, and the linker will still find and export all the class members.','line_number':1565,'multiline':False]
['text':'*
 * An abstract base class for specifying settings related to number formatting. This class is implemented by
 * {@link UnlocalizedNumberFormatter} and {@link LocalizedNumberFormatter}. This class is not intended for
 * public subclassing.
 ','line_number':1570,'multiline':True]
['text':'*
     * Specifies the notation style (simple, scientific, or compact) for rendering numbers.
     *
     * <ul>
     * <li>Simple notation: "12,300"
     * <li>Scientific notation: "1.23E4"
     * <li>Compact notation: "12K"
     * </ul>
     *
     * <p>
     * All notation styles will be properly localized with locale data, and all notation styles are compatible with
     * units, rounding precisions, and other number formatter settings.
     *
     * <p>
     * Pass this method the return value of a {@link Notation} factory method. For example:
     *
     * <pre>
     * NumberFormatter::with().notation(Notation::compactShort())
     * </pre>
     *
     * The default is to use simple notation.
     *
     * @param notation
     *            The notation strategy to use.
     * @return The fluent chain.
     * @see Notation
     * @stable ICU 60
     ','line_number':1578,'multiline':True]
['text':'*
     * Overload of notation() for use on an rvalue reference.
     *
     * @param notation
     *            The notation strategy to use.
     * @return The fluent chain.
     * @see #notation
     * @stable ICU 62
     ','line_number':1608,'multiline':True]
['text':'*
     * Specifies the unit (unit of measure, currency, or percent) to associate with rendered numbers.
     *
     * <ul>
     * <li>Unit of measure: "12.3 meters"
     * <li>Currency: "$12.30"
     * <li>Percent: "12.3%"
     * </ul>
     *
     * All units will be properly localized with locale data, and all units are compatible with notation styles,
     * rounding precisions, and other number formatter settings.
     *
     * \note If the usage() is set, the output unit **will be changed** to
     *       produce localised units, according to usage, locale and unit. See
     *       FormattedNumber::getOutputUnit().
     *
     * Pass this method any instance of {@link MeasureUnit}. For units of measure:
     *
     * <pre>
     * NumberFormatter::with().unit(MeasureUnit::getMeter())
     * NumberFormatter::with().unit(MeasureUnit::forIdentifier("foot-per-second", status))
     * </pre>
     *
     * Currency:
     *
     * <pre>
     * NumberFormatter::with().unit(CurrencyUnit(u"USD", status))
     * </pre>
     *
     * Percent:
     *
     * <pre>
     * NumberFormatter::with().unit(NoUnit.percent())
     * </pre>
     *
     * See {@link #perUnit} for information on how to format strings like "5 meters per second".
     *
     * The default is to render without units (equivalent to NoUnit.base()).
     *
     * @param unit
     *            The unit to render.
     * @return The fluent chain.
     * @see MeasureUnit
     * @see Currency
     * @see NoUnit
     * @see #perUnit
     * @stable ICU 60
     ','line_number':1619,'multiline':True]
['text':'*
     * Overload of unit() for use on an rvalue reference.
     *
     * @param unit
     *            The unit to render.
     * @return The fluent chain.
     * @see #unit
     * @stable ICU 62
     ','line_number':1669,'multiline':True]
['text':'*
     * Like unit(), but takes ownership of a pointer.  Convenient for use with the MeasureFormat factory
     * methods that return pointers that need ownership.
     *
     * Note: consider using the MeasureFormat factory methods that return by value.
     *
     * @param unit
     *            The unit to render.
     * @return The fluent chain.
     * @see #unit
     * @see MeasureUnit
     * @stable ICU 60
     ','line_number':1680,'multiline':True]
['text':'*
     * Overload of adoptUnit() for use on an rvalue reference.
     *
     * @param unit
     *            The unit to render.
     * @return The fluent chain.
     * @see #adoptUnit
     * @stable ICU 62
     ','line_number':1695,'multiline':True]
['text':'*
     * Sets a unit to be used in the denominator. For example, to format "3 m/s", pass METER to the unit and SECOND to
     * the perUnit.
     *
     * Pass this method any instance of {@link MeasureUnit}. Example:
     *
     * <pre>
     * NumberFormatter::with()
     *      .unit(MeasureUnit::getMeter())
     *      .perUnit(MeasureUnit::getSecond())
     * </pre>
     *
     * The default is not to display any unit in the denominator.
     *
     * If a per-unit is specified without a primary unit via {@link #unit}, the behavior is undefined.
     *
     * @param perUnit
     *            The unit to render in the denominator.
     * @return The fluent chain
     * @see #unit
     * @stable ICU 61
     ','line_number':1706,'multiline':True]
['text':'*
     * Overload of perUnit() for use on an rvalue reference.
     *
     * @param perUnit
     *            The unit to render in the denominator.
     * @return The fluent chain.
     * @see #perUnit
     * @stable ICU 62
     ','line_number':1730,'multiline':True]
['text':'*
     * Like perUnit(), but takes ownership of a pointer.  Convenient for use with the MeasureFormat factory
     * methods that return pointers that need ownership.
     *
     * Note: consider using the MeasureFormat factory methods that return by value.
     *
     * @param perUnit
     *            The unit to render in the denominator.
     * @return The fluent chain.
     * @see #perUnit
     * @see MeasureUnit
     * @stable ICU 61
     ','line_number':1741,'multiline':True]
['text':'*
     * Overload of adoptPerUnit() for use on an rvalue reference.
     *
     * @param perUnit
     *            The unit to render in the denominator.
     * @return The fluent chain.
     * @see #adoptPerUnit
     * @stable ICU 62
     ','line_number':1756,'multiline':True]
['text':'*
     * Specifies the rounding precision to use when formatting numbers.
     *
     * <ul>
     * <li>Round to 3 decimal places: "3.142"
     * <li>Round to 3 significant figures: "3.14"
     * <li>Round to the closest nickel: "3.15"
     * <li>Do not perform rounding: "3.1415926..."
     * </ul>
     *
     * <p>
     * Pass this method the return value of one of the factory methods on {@link Precision}. For example:
     *
     * <pre>
     * NumberFormatter::with().precision(Precision::fixedFraction(2))
     * </pre>
     *
     * <p>
     * In most cases, the default rounding strategy is to round to 6 fraction places; i.e.,
     * <code>Precision.maxFraction(6)</code>. The exceptions are if compact notation is being used, then the compact
     * notation rounding strategy is used (see {@link Notation#compactShort} for details), or if the unit is a currency,
     * then standard currency rounding is used, which varies from currency to currency (see {@link Precision#currency} for
     * details).
     *
     * @param precision
     *            The rounding precision to use.
     * @return The fluent chain.
     * @see Precision
     * @stable ICU 62
     ','line_number':1767,'multiline':True]
['text':'*
     * Overload of precision() for use on an rvalue reference.
     *
     * @param precision
     *            The rounding precision to use.
     * @return The fluent chain.
     * @see #precision
     * @stable ICU 62
     ','line_number':1799,'multiline':True]
['text':'*
     * Specifies how to determine the direction to round a number when it has more digits than fit in the
     * desired precision.  When formatting 1.235:
     *
     * <ul>
     * <li>Ceiling rounding mode with integer precision: "2"
     * <li>Half-down rounding mode with 2 fixed fraction digits: "1.23"
     * <li>Half-up rounding mode with 2 fixed fraction digits: "1.24"
     * </ul>
     *
     * The default is HALF_EVEN. For more information on rounding mode, see the ICU userguide here:
     *
     * https://unicode-org.github.io/icu/userguide/format_parse/numbers/rounding-modes
     *
     * @param roundingMode The rounding mode to use.
     * @return The fluent chain.
     * @stable ICU 62
     ','line_number':1810,'multiline':True]
['text':'*
     * Overload of roundingMode() for use on an rvalue reference.
     *
     * @param roundingMode The rounding mode to use.
     * @return The fluent chain.
     * @see #roundingMode
     * @stable ICU 62
     ','line_number':1830,'multiline':True]
['text':'*
     * Specifies the grouping strategy to use when formatting numbers.
     *
     * <ul>
     * <li>Default grouping: "12,300" and "1,230"
     * <li>Grouping with at least 2 digits: "12,300" and "1230"
     * <li>No grouping: "12300" and "1230"
     * </ul>
     *
     * <p>
     * The exact grouping widths will be chosen based on the locale.
     *
     * <p>
     * Pass this method an element from the {@link UNumberGroupingStrategy} enum. For example:
     *
     * <pre>
     * NumberFormatter::with().grouping(UNUM_GROUPING_MIN2)
     * </pre>
     *
     * The default is to perform grouping according to locale data; most locales, but not all locales,
     * enable it by default.
     *
     * @param strategy
     *            The grouping strategy to use.
     * @return The fluent chain.
     * @stable ICU 61
     ','line_number':1840,'multiline':True]
['text':'*
     * Overload of grouping() for use on an rvalue reference.
     *
     * @param strategy
     *            The grouping strategy to use.
     * @return The fluent chain.
     * @see #grouping
     * @stable ICU 62
     ','line_number':1869,'multiline':True]
['text':'*
     * Specifies the minimum and maximum number of digits to render before the decimal mark.
     *
     * <ul>
     * <li>Zero minimum integer digits: ".08"
     * <li>One minimum integer digit: "0.08"
     * <li>Two minimum integer digits: "00.08"
     * </ul>
     *
     * <p>
     * Pass this method the return value of {@link IntegerWidth#zeroFillTo}. For example:
     *
     * <pre>
     * NumberFormatter::with().integerWidth(IntegerWidth::zeroFillTo(2))
     * </pre>
     *
     * The default is to have one minimum integer digit.
     *
     * @param style
     *            The integer width to use.
     * @return The fluent chain.
     * @see IntegerWidth
     * @stable ICU 60
     ','line_number':1880,'multiline':True]
['text':'*
     * Overload of integerWidth() for use on an rvalue reference.
     *
     * @param style
     *            The integer width to use.
     * @return The fluent chain.
     * @see #integerWidth
     * @stable ICU 62
     ','line_number':1906,'multiline':True]
['text':'*
     * Specifies the symbols (decimal separator, grouping separator, percent sign, numerals, etc.) to use when rendering
     * numbers.
     *
     * <ul>
     * <li><em>en_US</em> symbols: "12,345.67"
     * <li><em>fr_FR</em> symbols: "12&nbsp;345,67"
     * <li><em>de_CH</em> symbols: "12’345.67"
     * <li><em>my_MY</em> symbols: "၁၂,၃၄၅.၆၇"
     * </ul>
     *
     * <p>
     * Pass this method an instance of {@link DecimalFormatSymbols}. For example:
     *
     * <pre>
     * NumberFormatter::with().symbols(DecimalFormatSymbols(Locale("de_CH"), status))
     * </pre>
     *
     * <p>
     * <strong>Note:</strong> DecimalFormatSymbols automatically chooses the best numbering system based on the locale.
     * In the examples above, the first three are using the Latin numbering system, and the fourth is using the Myanmar
     * numbering system.
     *
     * <p>
     * <strong>Note:</strong> The instance of DecimalFormatSymbols will be copied: changes made to the symbols object
     * after passing it into the fluent chain will not be seen.
     *
     * <p>
     * <strong>Note:</strong> Calling this method will override any previously specified DecimalFormatSymbols
     * or NumberingSystem.
     *
     * <p>
     * The default is to choose the symbols based on the locale specified in the fluent chain.
     *
     * @param symbols
     *            The DecimalFormatSymbols to use.
     * @return The fluent chain.
     * @see DecimalFormatSymbols
     * @stable ICU 60
     ','line_number':1917,'multiline':True]
['text':'*
     * Overload of symbols() for use on an rvalue reference.
     *
     * @param symbols
     *            The DecimalFormatSymbols to use.
     * @return The fluent chain.
     * @see #symbols
     * @stable ICU 62
     ','line_number':1959,'multiline':True]
['text':'*
     * Specifies that the given numbering system should be used when fetching symbols.
     *
     * <ul>
     * <li>Latin numbering system: "12,345"
     * <li>Myanmar numbering system: "၁၂,၃၄၅"
     * <li>Math Sans Bold numbering system: "𝟭𝟮,𝟯𝟰𝟱"
     * </ul>
     *
     * <p>
     * Pass this method an instance of {@link NumberingSystem}. For example, to force the locale to always use the Latin
     * alphabet numbering system (ASCII digits):
     *
     * <pre>
     * NumberFormatter::with().adoptSymbols(NumberingSystem::createInstanceByName("latn", status))
     * </pre>
     *
     * <p>
     * <strong>Note:</strong> Calling this method will override any previously specified DecimalFormatSymbols
     * or NumberingSystem.
     *
     * <p>
     * The default is to choose the best numbering system for the locale.
     *
     * <p>
     * This method takes ownership of a pointer in order to work nicely with the NumberingSystem factory methods.
     *
     * @param symbols
     *            The NumberingSystem to use.
     * @return The fluent chain.
     * @see NumberingSystem
     * @stable ICU 60
     ','line_number':1970,'multiline':True]
['text':'*
     * Overload of adoptSymbols() for use on an rvalue reference.
     *
     * @param symbols
     *            The NumberingSystem to use.
     * @return The fluent chain.
     * @see #adoptSymbols
     * @stable ICU 62
     ','line_number':2005,'multiline':True]
['text':'*
     * Sets the width of the unit (measure unit or currency).  Most common values:
     *
     * <ul>
     * <li>Short: "$12.00", "12 m"
     * <li>ISO Code: "USD 12.00"
     * <li>Full name: "12.00 US dollars", "12 meters"
     * </ul>
     *
     * <p>
     * Pass an element from the {@link UNumberUnitWidth} enum to this setter. For example:
     *
     * <pre>
     * NumberFormatter::with().unitWidth(UNumberUnitWidth::UNUM_UNIT_WIDTH_FULL_NAME)
     * </pre>
     *
     * <p>
     * The default is the SHORT width.
     *
     * @param width
     *            The width to use when rendering numbers.
     * @return The fluent chain
     * @see UNumberUnitWidth
     * @stable ICU 60
     ','line_number':2016,'multiline':True]
['text':'*
     * Overload of unitWidth() for use on an rvalue reference.
     *
     * @param width
     *            The width to use when rendering numbers.
     * @return The fluent chain.
     * @see #unitWidth
     * @stable ICU 62
     ','line_number':2043,'multiline':True]
['text':'*
     * Sets the plus/minus sign display strategy. Most common values:
     *
     * <ul>
     * <li>Auto: "123", "-123"
     * <li>Always: "+123", "-123"
     * <li>Accounting: "$123", "($123)"
     * </ul>
     *
     * <p>
     * Pass an element from the {@link UNumberSignDisplay} enum to this setter. For example:
     *
     * <pre>
     * NumberFormatter::with().sign(UNumberSignDisplay::UNUM_SIGN_ALWAYS)
     * </pre>
     *
     * <p>
     * The default is AUTO sign display.
     *
     * @param style
     *            The sign display strategy to use when rendering numbers.
     * @return The fluent chain
     * @see UNumberSignDisplay
     * @stable ICU 60
     ','line_number':2054,'multiline':True]
['text':'*
     * Overload of sign() for use on an rvalue reference.
     *
     * @param style
     *            The sign display strategy to use when rendering numbers.
     * @return The fluent chain.
     * @see #sign
     * @stable ICU 62
     ','line_number':2081,'multiline':True]
['text':'*
     * Sets the decimal separator display strategy. This affects integer numbers with no fraction part. Most common
     * values:
     *
     * <ul>
     * <li>Auto: "1"
     * <li>Always: "1."
     * </ul>
     *
     * <p>
     * Pass an element from the {@link UNumberDecimalSeparatorDisplay} enum to this setter. For example:
     *
     * <pre>
     * NumberFormatter::with().decimal(UNumberDecimalSeparatorDisplay::UNUM_DECIMAL_SEPARATOR_ALWAYS)
     * </pre>
     *
     * <p>
     * The default is AUTO decimal separator display.
     *
     * @param style
     *            The decimal separator display strategy to use when rendering numbers.
     * @return The fluent chain
     * @see UNumberDecimalSeparatorDisplay
     * @stable ICU 60
     ','line_number':2092,'multiline':True]
['text':'*
     * Overload of decimal() for use on an rvalue reference.
     *
     * @param style
     *            The decimal separator display strategy to use when rendering numbers.
     * @return The fluent chain.
     * @see #decimal
     * @stable ICU 62
     ','line_number':2119,'multiline':True]
['text':'*
     * Sets a scale (multiplier) to be used to scale the number by an arbitrary amount before formatting.
     * Most common values:
     *
     * <ul>
     * <li>Multiply by 100: useful for percentages.
     * <li>Multiply by an arbitrary value: useful for unit conversions.
     * </ul>
     *
     * <p>
     * Pass an element from a {@link Scale} factory method to this setter. For example:
     *
     * <pre>
     * NumberFormatter::with().scale(Scale::powerOfTen(2))
     * </pre>
     *
     * <p>
     * The default is to not apply any multiplier.
     *
     * @param scale
     *            The scale to apply when rendering numbers.
     * @return The fluent chain
     * @stable ICU 62
     ','line_number':2130,'multiline':True]
['text':'*
     * Overload of scale() for use on an rvalue reference.
     *
     * @param scale
     *            The scale to apply when rendering numbers.
     * @return The fluent chain.
     * @see #scale
     * @stable ICU 62
     ','line_number':2156,'multiline':True]
['text':'*
     * Specifies the usage for which numbers will be formatted ("person-height",
     * "road", "rainfall", etc.)
     *
     * When a `usage` is specified, the output unit will change depending on the
     * `Locale` and the unit quantity. For example, formatting length
     * measurements specified in meters:
     *
     * `NumberFormatter::with().usage("person").unit(MeasureUnit::getMeter()).locale("en-US")`
     *   * When formatting 0.25, the output will be "10 inches".
     *   * When formatting 1.50, the output will be "4 feet and 11 inches".
     *
     * The input unit specified via unit() determines the type of measurement
     * being formatted (e.g. "length" when the unit is "foot"). The usage
     * requested will be looked for only within this category of measurement
     * units.
     *
     * The output unit can be found via FormattedNumber::getOutputUnit().
     *
     * If the usage has multiple parts (e.g. "land-agriculture-grain") and does
     * not match a known usage preference, the last part will be dropped
     * repeatedly until a match is found (e.g. trying "land-agriculture", then
     * "land"). If a match is still not found, usage will fall back to
     * "default".
     *
     * Setting usage to an empty string clears the usage (disables usage-based
     * localized formatting).
     *
     * Setting a usage string but not a correct input unit will result in an
     * U_ILLEGAL_ARGUMENT_ERROR.
     *
     * When using usage, specifying rounding or precision is unnecessary.
     * Specifying a precision in some manner will override the default
     * formatting.
     *
     * @param usage A `usage` parameter from the units resource. See the
     * unitPreferenceData in *source/data/misc/units.txt*, generated from
     * `unitPreferenceData` in [CLDR's
     * supplemental/units.xml](https://github.com/unicode-org/cldr/blob/master/common/supplemental/units.xml).
     * @return The fluent chain.
     * @draft ICU 68
     ','line_number':2168,'multiline':True]
['text':'*
     * Overload of usage() for use on an rvalue reference.
     *
     * @param usage The unit `usage`.
     * @return The fluent chain.
     * @draft ICU 68
     ','line_number':2212,'multiline':True]
['text':' U_HIDE_DRAFT_API','line_number':2220,'multiline':False]
['text':'*
     * Specifies the desired case for a unit formatter's output (e.g.
     * accusative, dative, genitive).
     *
     * @internal ICU 69 technology preview
     ','line_number':2224,'multiline':True]
['text':'*
     * Overload of unitDisplayCase() for use on an rvalue reference.
     *
     * @internal ICU 69 technology preview
     ','line_number':2232,'multiline':True]
['text':' U_HIDE_INTERNAL_API','line_number':2238,'multiline':False]
['text':' U_HIDE_DRAFT_API','line_number':2239,'multiline':False]
['text':'*
     * Set the padding strategy. May be added in the future; see #13338.
     *
     * @internal ICU 60: This API is ICU internal only.
     ','line_number':2243,'multiline':True]
['text':'* @internal ','line_number':2250,'multiline':True]
['text':'*
     * Internal fluent setter to support a custom regulation threshold. A threshold of 1 causes the data structures to
     * be built right away. A threshold of 0 prevents the data structures from being built.
     *
     * @internal ICU 60: This API is ICU internal only.
     ','line_number':2253,'multiline':True]
['text':'* @internal ','line_number':2261,'multiline':True]
['text':'*
     * Internal fluent setter to overwrite the entire macros object.
     *
     * @internal ICU 60: This API is ICU internal only.
     ','line_number':2264,'multiline':True]
['text':'* @internal ','line_number':2271,'multiline':True]
['text':'* @internal ','line_number':2274,'multiline':True]
['text':'* @internal ','line_number':2277,'multiline':True]
['text':' U_HIDE_INTERNAL_API ','line_number':2280,'multiline':True]
['text':'*
     * Creates a skeleton string representation of this number formatter. A skeleton string is a
     * locale-agnostic serialized form of a number formatter.
     *
     * Not all options are capable of being represented in the skeleton string; for example, a
     * DecimalFormatSymbols object. If any such option is encountered, the error code is set to
     * U_UNSUPPORTED_ERROR.
     *
     * The returned skeleton is in normalized form, such that two number formatters with equivalent
     * behavior should produce the same skeleton.
     *
     * For more information on number skeleton strings, see:
     * https://unicode-org.github.io/icu/userguide/format_parse/numbers/skeletons.html
     *
     * @return A number skeleton string with behavior corresponding to this number formatter.
     * @stable ICU 62
     ','line_number':2282,'multiline':True]
['text':'*
     * Returns the current (Un)LocalizedNumberFormatter as a LocalPointer
     * wrapping a heap-allocated copy of the current object.
     *
     * This is equivalent to new-ing the move constructor with a value object
     * as the argument.
     *
     * @return A wrapped (Un)LocalizedNumberFormatter pointer, or a wrapped
     *         nullptr on failure.
     * @stable ICU 64
     ','line_number':2301,'multiline':True]
['text':'*
     * Overload of clone for use on an rvalue reference.
     *
     * @return A wrapped (Un)LocalizedNumberFormatter pointer, or a wrapped
     *         nullptr on failure.
     * @stable ICU 64
     ','line_number':2314,'multiline':True]
['text':'*
     * Sets the UErrorCode if an error occurred in the fluent chain.
     * Preserves older error codes in the outErrorCode.
     * @return true if U_FAILURE(outErrorCode)
     * @stable ICU 60
     ','line_number':2323,'multiline':True]
['text':' Do not overwrite the older error code','line_number':2331,'multiline':False]
['text':' NOTE: Uses default copy and move constructors.','line_number':2338,'multiline':False]
['text':' Don't construct me directly!  Use (Un)LocalizedNumberFormatter.','line_number':2343,'multiline':False]
['text':' Give NumberRangeFormatter access to the MacroProps','line_number':2349,'multiline':False]
['text':'*
 * A NumberFormatter that does not yet have a locale. In order to format numbers, a locale must be specified.
 *
 * Instances of this class are immutable and thread-safe.
 *
 * @see NumberFormatter
 * @stable ICU 60
 ','line_number':2354,'multiline':True]
['text':'*
     * Associate the given locale with the number formatter. The locale is used for picking the appropriate symbols,
     * formats, and other data for number display.
     *
     * @param locale
     *            The locale to use when loading data for number formatting.
     * @return The fluent chain.
     * @stable ICU 60
     ','line_number':2366,'multiline':True]
['text':'*
     * Overload of locale() for use on an rvalue reference.
     *
     * @param locale
     *            The locale to use when loading data for number formatting.
     * @return The fluent chain.
     * @see #locale
     * @stable ICU 62
     ','line_number':2377,'multiline':True]
['text':'*
     * Default constructor: puts the formatter into a valid but undefined state.
     *
     * @stable ICU 62
     ','line_number':2388,'multiline':True]
['text':'*
     * Returns a copy of this UnlocalizedNumberFormatter.
     * @stable ICU 60
     ','line_number':2395,'multiline':True]
['text':'*
     * Move constructor:
     * The source UnlocalizedNumberFormatter will be left in a valid but undefined state.
     * @stable ICU 62
     ','line_number':2401,'multiline':True]
['text':'*
     * Copy assignment operator.
     * @stable ICU 62
     ','line_number':2408,'multiline':True]
['text':'*
     * Move assignment operator:
     * The source UnlocalizedNumberFormatter will be left in a valid but undefined state.
     * @stable ICU 62
     ','line_number':2414,'multiline':True]
['text':' To give the fluent setters access to this class's constructor:','line_number':2427,'multiline':False]
['text':' To give NumberFormatter::with() access to this class's constructor:','line_number':2430,'multiline':False]
['text':'*
 * A NumberFormatter that has a locale associated with it; this means .format() methods are available.
 *
 * Instances of this class are immutable and thread-safe.
 *
 * @see NumberFormatter
 * @stable ICU 60
 ','line_number':2434,'multiline':True]
['text':'*
     * Format the given integer number to a string using the settings specified in the NumberFormatter fluent
     * setting chain.
     *
     * @param value
     *            The number to format.
     * @param status
     *            Set to an ErrorCode if one occurred in the setter chain or during formatting.
     * @return A FormattedNumber object; call .toString() to get the string.
     * @stable ICU 60
     ','line_number':2445,'multiline':True]
['text':'*
     * Format the given float or double to a string using the settings specified in the NumberFormatter fluent setting
     * chain.
     *
     * @param value
     *            The number to format.
     * @param status
     *            Set to an ErrorCode if one occurred in the setter chain or during formatting.
     * @return A FormattedNumber object; call .toString() to get the string.
     * @stable ICU 60
     ','line_number':2458,'multiline':True]
['text':'*
     * Format the given decimal number to a string using the settings
     * specified in the NumberFormatter fluent setting chain.
     * The syntax of the unformatted number is a "numeric string"
     * as defined in the Decimal Arithmetic Specification, available at
     * http://speleotrove.com/decimal
     *
     * @param value
     *            The number to format.
     * @param status
     *            Set to an ErrorCode if one occurred in the setter chain or during formatting.
     * @return A FormattedNumber object; call .toString() to get the string.
     * @stable ICU 60
     ','line_number':2471,'multiline':True]
['text':'* Internal method.
     * @internal
     ','line_number':2489,'multiline':True]
['text':'* Internal method for DecimalFormat compatibility.
     * @internal
     ','line_number':2494,'multiline':True]
['text':'*
     * Internal method for testing.
     * @internal
     ','line_number':2499,'multiline':True]
['text':'*
     * Internal method for testing.
     * @internal
     ','line_number':2505,'multiline':True]
['text':' U_HIDE_INTERNAL_API ','line_number':2511,'multiline':True]
['text':'*
     * Creates a representation of this LocalizedNumberFormat as an icu::Format, enabling the use
     * of this number formatter with APIs that need an object of that type, such as MessageFormat.
     *
     * This API is not intended to be used other than for enabling API compatibility. The formatDouble,
     * formatInt, and formatDecimal methods should normally be used when formatting numbers, not the Format
     * object returned by this method.
     *
     * The caller owns the returned object and must delete it when finished.
     *
     * @return A Format wrapping this LocalizedNumberFormatter.
     * @stable ICU 62
     ','line_number':2513,'multiline':True]
['text':'*
     * Default constructor: puts the formatter into a valid but undefined state.
     *
     * @stable ICU 62
     ','line_number':2528,'multiline':True]
['text':'*
     * Returns a copy of this LocalizedNumberFormatter.
     * @stable ICU 60
     ','line_number':2535,'multiline':True]
['text':'*
     * Move constructor:
     * The source LocalizedNumberFormatter will be left in a valid but undefined state.
     * @stable ICU 62
     ','line_number':2541,'multiline':True]
['text':'*
     * Copy assignment operator.
     * @stable ICU 62
     ','line_number':2548,'multiline':True]
['text':'*
     * Move assignment operator:
     * The source LocalizedNumberFormatter will be left in a valid but undefined state.
     * @stable ICU 62
     ','line_number':2554,'multiline':True]
['text':'*
     * This is the core entrypoint to the number formatting pipeline. It performs self-regulation: a static code path
     * for the first few calls, and compiling a more efficient data structure if called repeatedly.
     *
     * <p>
     * This function is very hot, being called in every call to the number formatting pipeline.
     *
     * @param results
     *            The results object. This method will mutate it to save the results.
     * @param status
     * @internal
     ','line_number':2563,'multiline':True]
['text':' U_HIDE_INTERNAL_API ','line_number':2577,'multiline':True]
['text':'*
     * Destruct this LocalizedNumberFormatter, cleaning up any memory it might own.
     * @stable ICU 60
     ','line_number':2579,'multiline':True]
['text':' Note: fCompiled can't be a LocalPointer because impl::NumberFormatterImpl is defined in an internal','line_number':2586,'multiline':False]
['text':' header, and LocalPointer needs the full class definition in order to delete the instance.','line_number':2587,'multiline':False]
['text':' internally cast to u_atomic_int32_t','line_number':2589,'multiline':False]
['text':' Owned pointer to a DecimalFormatWarehouse, used when copying a LocalizedNumberFormatter','line_number':2591,'multiline':False]
['text':' from a DecimalFormat.','line_number':2592,'multiline':False]
['text':'*
     * @return true if the compiled formatter is available.
     ','line_number':2609,'multiline':True]
['text':' To give the fluent setters access to this class's constructor:','line_number':2614,'multiline':False]
['text':' To give UnlocalizedNumberFormatter::locale() access to this class's constructor:','line_number':2618,'multiline':False]
['text':' Warning 4661.','line_number':2623,'multiline':False]
['text':'*
 * The result of a number formatting operation. This class allows the result to be exported in several data types,
 * including a UnicodeString and a FieldPositionIterator.
 *
 * Instances of this class are immutable and thread-safe.
 *
 * @stable ICU 60
 ','line_number':2627,'multiline':True]
['text':'*
     * Default constructor; makes an empty FormattedNumber.
     * @stable ICU 64
     ','line_number':2638,'multiline':True]
['text':'*
     * Move constructor: Leaves the source FormattedNumber in an undefined state.
     * @stable ICU 62
     ','line_number':2645,'multiline':True]
['text':'*
     * Destruct an instance of FormattedNumber.
     * @stable ICU 60
     ','line_number':2651,'multiline':True]
['text':'* Copying not supported; use move constructor instead. ','line_number':2657,'multiline':True]
['text':'* Copying not supported; use move assignment instead. ','line_number':2660,'multiline':True]
['text':'*
     * Move assignment: Leaves the source FormattedNumber in an undefined state.
     * @stable ICU 62
     ','line_number':2663,'multiline':True]
['text':' Copybrief: this method is older than the parent method','line_number':2669,'multiline':False]
['text':'*
     * @copybrief FormattedValue::toString()
     *
     * For more information, see FormattedValue::toString()
     *
     * @stable ICU 62
     ','line_number':2670,'multiline':True]
['text':' Copydoc: this method is new in ICU 64','line_number':2679,'multiline':False]
['text':'* @copydoc FormattedValue::toTempString() ','line_number':2680,'multiline':True]
['text':' Copybrief: this method is older than the parent method','line_number':2683,'multiline':False]
['text':'*
     * @copybrief FormattedValue::appendTo()
     *
     * For more information, see FormattedValue::appendTo()
     *
     * @stable ICU 62
     ','line_number':2684,'multiline':True]
['text':' Copydoc: this method is new in ICU 64','line_number':2693,'multiline':False]
['text':'* @copydoc FormattedValue::nextPosition() ','line_number':2694,'multiline':True]
['text':'*
     * Export the formatted number as a "numeric string" conforming to the
     * syntax defined in the Decimal Arithmetic Specification, available at
     * http://speleotrove.com/decimal
     *
     * This endpoint is useful for obtaining the exact number being printed
     * after scaling and rounding have been applied by the number formatter.
     *
     * Example call site:
     *
     *     auto decimalNumber = fn.toDecimalNumber<std::string>(status);
     *
     * @tparam StringClass A string class compatible with StringByteSink;
     *         for example, std::string.
     * @param status Set if an error occurs.
     * @return A StringClass containing the numeric string.
     * @stable ICU 65
     ','line_number':2697,'multiline':True]
['text':'*
     * Gets the resolved output unit.
     *
     * The output unit is dependent upon the localized preferences for the usage
     * specified via NumberFormatterSettings::usage(), and may be a unit with
     * UMEASURE_UNIT_MIXED unit complexity (MeasureUnit::getComplexity()), such
     * as "foot-and-inch" or "hour-and-minute-and-second".
     *
     * @return `MeasureUnit`.
     * @draft ICU 68
     ','line_number':2719,'multiline':True]
['text':'*
     * Gets the gender of the formatted output. Returns "" when the gender is
     * unknown, or for ungendered languages.
     *
     * @internal ICU 69 technology preview.
     ','line_number':2732,'multiline':True]
['text':' U_HIDE_DRAFT_API','line_number':2739,'multiline':False]
['text':'*
     *  Gets the raw DecimalQuantity for plural rule selection.
     *  @internal
     ','line_number':2743,'multiline':True]
['text':'*
     * Populates the mutable builder type FieldPositionIteratorHandler.
     * @internal
     ','line_number':2749,'multiline':True]
['text':' U_HIDE_INTERNAL_API ','line_number':2755,'multiline':True]
['text':' Can't use LocalPointer because UFormattedNumberData is forward-declared','line_number':2758,'multiline':False]
['text':' Error code for the terminal methods','line_number':2761,'multiline':False]
['text':'*
     * Internal constructor from data type. Adopts the data pointer.
     * @internal (private)
     ','line_number':2764,'multiline':True]
['text':' To give LocalizedNumberFormatter format methods access to this class's constructor:','line_number':2776,'multiline':False]
['text':' To give C API access to internals','line_number':2779,'multiline':False]
['text':'*
 * See the main description in numberformatter.h for documentation and examples.
 *
 * @stable ICU 60
 ','line_number':2791,'multiline':True]
['text':'*
     * Call this method at the beginning of a NumberFormatter fluent chain in which the locale is not currently known at
     * the call site.
     *
     * @return An {@link UnlocalizedNumberFormatter}, to be used for chaining.
     * @stable ICU 60
     ','line_number':2798,'multiline':True]
['text':'*
     * Call this method at the beginning of a NumberFormatter fluent chain in which the locale is known at the call
     * site.
     *
     * @param locale
     *            The locale from which to load formats and symbols for number formatting.
     * @return A {@link LocalizedNumberFormatter}, to be used for chaining.
     * @stable ICU 60
     ','line_number':2807,'multiline':True]
['text':'*
     * Call this method at the beginning of a NumberFormatter fluent chain to create an instance based
     * on a given number skeleton string.
     *
     * It is possible for an error to occur while parsing. See the overload of this method if you are
     * interested in the location of a possible parse error.
     *
     * For more information on number skeleton strings, see:
     * https://unicode-org.github.io/icu/userguide/format_parse/numbers/skeletons.html
     *
     * @param skeleton
     *            The skeleton string off of which to base this NumberFormatter.
     * @param status
     *            Set to U_NUMBER_SKELETON_SYNTAX_ERROR if the skeleton was invalid.
     * @return An UnlocalizedNumberFormatter, to be used for chaining.
     * @stable ICU 62
     ','line_number':2818,'multiline':True]
['text':'*
     * Call this method at the beginning of a NumberFormatter fluent chain to create an instance based
     * on a given number skeleton string.
     *
     * If an error occurs while parsing the skeleton string, the offset into the skeleton string at
     * which the error occurred will be saved into the UParseError, if provided.
     *
     * For more information on number skeleton strings, see:
     * https://unicode-org.github.io/icu/userguide/format_parse/numbers/skeletons.html
     *
     * @param skeleton
     *            The skeleton string off of which to base this NumberFormatter.
     * @param perror
     *            A parse error struct populated if an error occurs when parsing.
 *                If no error occurs, perror.offset will be set to -1.
     * @param status
     *            Set to U_NUMBER_SKELETON_SYNTAX_ERROR if the skeleton was invalid.
     * @return An UnlocalizedNumberFormatter, to be used for chaining.
     * @stable ICU 64
     ','line_number':2837,'multiline':True]
['text':'*
     * Use factory methods instead of the constructor to create a NumberFormatter.
     ','line_number':2860,'multiline':True]
['text':' namespace number','line_number':2866,'multiline':False]
['text':' #if !UCONFIG_NO_FORMATTING ','line_number':2869,'multiline':True]
['text':' U_SHOW_CPLUSPLUS_API ','line_number':2871,'multiline':True]
['text':' __NUMBERFORMATTER_H__','line_number':2873,'multiline':False]
