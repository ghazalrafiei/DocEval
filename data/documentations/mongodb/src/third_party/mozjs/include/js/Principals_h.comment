['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]
['text':' JSPrincipals and related interfaces. ','line_number':7,'multiline':True]
['text':' Don't call "destroy"; use reference counting macros below. ','line_number':24,'multiline':True]
['text':' A helper to facilitate principals debugging. ','line_number':28,'multiline':True]
['text':'
   * Write the principals with the given |writer|. Return false on failure,
   * true on success.
   ','line_number':40,'multiline':True]
['text':'
   * Whether the principal corresponds to a System or AddOn Principal.
   * Technically this also checks for an ExpandedAddonPrincipal.
   ','line_number':46,'multiline':True]
['text':'
   * This is not defined by the JS engine but should be provided by the
   * embedding.
   ','line_number':52,'multiline':True]
['text':' Return whether the first principal subsumes the second. The exact meaning of','line_number':64,'multiline':False]
['text':' 'subsumes' is left up to the browser. Subsumption is checked inside the JS','line_number':65,'multiline':False]
['text':' engine when determining, e.g., which stack frames to display in a backtrace.','line_number':66,'multiline':False]
['text':'
 * Used to check if a CSP instance wants to disable eval() and friends.
 * See GlobalObject::isRuntimeCodeGenEnabled() in vm/GlobalObject.cpp.
 ','line_number':69,'multiline':True]
['text':'
 * Code running with "trusted" principals will be given a deeper stack
 * allocation than ordinary scripts. This allows trusted script to run after
 * untrusted script has exhausted the stack. This function sets the
 * runtime-wide trusted principal.
 *
 * This principals is not held (via JS_HoldPrincipals/JS_DropPrincipals).
 * Instead, the caller must ensure that the given principals stays valid for as
 * long as 'cx' may point to it. If the principals would be destroyed before
 * 'cx', JS_SetTrustedPrincipals must be called again, passing nullptr for
 * 'prin'.
 ','line_number':86,'multiline':True]
['text':'
 * Initialize the callback that is called to destroy JSPrincipals instance
 * when its reference counter drops to zero. The initialization can be done
 * only once per JS runtime.
 ','line_number':103,'multiline':True]
['text':'
 * Read a JSPrincipals instance from the given |reader| and initialize the out
 * paratemer |outPrincipals| to the JSPrincipals instance read.
 *
 * Return false on failure, true on success. The |outPrincipals| parameter
 * should not be modified if false is returned.
 *
 * The caller is not responsible for calling JS_HoldPrincipals on the resulting
 * JSPrincipals instance, the JSReadPrincipalsOp must increment the refcount of
 * the resulting JSPrincipals on behalf of the caller.
 ','line_number':111,'multiline':True]
['text':'
 * Initialize the callback that is called to read JSPrincipals instances from a
 * buffer. The initialization can be done only once per JS runtime.
 ','line_number':126,'multiline':True]
['text':' namespace JS','line_number':160,'multiline':False]
['text':' js_Principals_h ','line_number':162,'multiline':True]
