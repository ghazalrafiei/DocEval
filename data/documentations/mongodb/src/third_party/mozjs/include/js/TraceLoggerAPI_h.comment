['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- ','line_number':1,'multiline':True]
['text':' This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':2,'multiline':True]
['text':' SpiderMonkey TraceLogger APIs. ','line_number':6,'multiline':True]
['text':' namespace mozilla','line_number':18,'multiline':False]
['text':' Used to lock any tracelogger activities, and consequently, will also block','line_number':22,'multiline':False]
['text':' any further JS execution when a thread hits an atomic tracelogger activity','line_number':23,'multiline':False]
['text':' such as payload creation.','line_number':24,'multiline':False]
['text':' An implementation type must be defined in order to gather data using the','line_number':31,'multiline':False]
['text':' TraceLoggerCollectorBuffer. Each implementation must define the type that is','line_number':32,'multiline':False]
['text':' being collected in the buffer, along with a static method that is used to','line_number':33,'multiline':False]
['text':' actually write into the buffer from the tracelogger.','line_number':34,'multiline':False]
['text':' Buffer that is used to retrieve tracelogger data in fixed size chunks so that','line_number':71,'multiline':False]
['text':' allocation of a large array is not necessary.  The TraceLoggerCollectorBuffer','line_number':72,'multiline':False]
['text':' class will manage an internal state which points to the next data index being','line_number':73,'multiline':False]
['text':' collected.  Each call to NextChunk will also clobber the internal buffer used','line_number':74,'multiline':False]
['text':' to store the data.','line_number':75,'multiline':False]
['text':' Initialize the trace logger.  This must be called before using any of the','line_number':132,'multiline':False]
['text':' other trace logging functions.','line_number':133,'multiline':False]
['text':' Return whether the trace logger is supported in this browser session.','line_number':136,'multiline':False]
['text':' Begin trace logging events.  This will activate some of the','line_number':139,'multiline':False]
['text':' textId's for various events and set the global option','line_number':140,'multiline':False]
['text':' JSJITCOMPILER_ENABLE_TRACELOGGER to true.','line_number':141,'multiline':False]
['text':' This does nothing except return if the trace logger is already active.','line_number':142,'multiline':False]
['text':' Stop trace logging events.  All textId's will be set to false, and the','line_number':145,'multiline':False]
['text':' global JSJITCOMPILER_ENABLE_TRACELOGGER will be set to false.','line_number':146,'multiline':False]
['text':' This does nothing except return if the trace logger is not active.','line_number':147,'multiline':False]
['text':' Clear and free any event data that was recorded by the trace logger.','line_number':150,'multiline':False]
['text':' Spew trace logger statistics.','line_number':153,'multiline':False]
['text':' Spew trace logger statistics.','line_number':156,'multiline':False]
['text':' Define empty inline functions for when trace logging compilation is not','line_number':160,'multiline':False]
['text':' enabled.  TraceLogging.cpp will not be built in that case so we need to','line_number':161,'multiline':False]
['text':' provide something for any routines that reference these.','line_number':162,'multiline':False]
['text':' namespace JS','line_number':217,'multiline':False]
['text':' js_TraceLoggerAPI_h ','line_number':219,'multiline':True]
