['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]
['text':' namespace jit','line_number':25,'multiline':False]
['text':' namespace wasm','line_number':28,'multiline':False]
['text':' namespace js','line_number':29,'multiline':False]
['text':' This iterator can be used to walk the stack of a thread suspended at an','line_number':33,'multiline':False]
['text':' arbitrary pc. To provide accurate results, profiling must have been enabled','line_number':34,'multiline':False]
['text':' (via EnableRuntimeProfilingStack) before executing the callstack being','line_number':35,'multiline':False]
['text':' unwound.','line_number':36,'multiline':False]
['text':'','line_number':37,'multiline':False]
['text':' Note that the caller must not do anything that could cause GC to happen while','line_number':38,'multiline':False]
['text':' the iterator is alive, since this could invalidate Ion code and cause its','line_number':39,'multiline':False]
['text':' contents to become out of date.','line_number':40,'multiline':False]
['text':' Assuming the stack grows down (we do), the return value:','line_number':100,'multiline':False]
['text':'  - always points into the stack','line_number':101,'multiline':False]
['text':'  - is weakly monotonically increasing (may be equal for successive frames)','line_number':102,'multiline':False]
['text':'  - will compare greater than newer native and psuedo-stack frame addresses','line_number':103,'multiline':False]
['text':'    and less than older native and psuedo-stack frame addresses','line_number':104,'multiline':False]
['text':' Return the registers from the native caller frame.','line_number':145,'multiline':False]
['text':' Nothing{} if this iterator is NOT pointing at a native-to-JIT entry frame,','line_number':146,'multiline':False]
['text':' or if the information is not accessible/implemented on this platform.','line_number':147,'multiline':False]
['text':'*
 * After each sample run, this method should be called with the current buffer
 * position at which the buffer contents start. This will update the
 * corresponding field on the JSRuntime.
 *
 * See the field |profilerSampleBufferRangeStart| on JSRuntime for documentation
 * about what this value is used for.
 ','line_number':162,'multiline':True]
['text':' A handle to the underlying JitcodeGlobalEntry, so as to avoid repeated','line_number':175,'multiline':False]
['text':' lookups on JitcodeGlobalTable.','line_number':176,'multiline':False]
['text':' Provide the bare minimum of iterator methods that are needed for','line_number':209,'multiline':False]
['text':' C++ ranged for loops.','line_number':210,'multiline':False]
['text':' Assume maximum inlining depth is <64','line_number':237,'multiline':False]
['text':' Returns a range that can be iterated over using C++ ranged for loops.','line_number':242,'multiline':False]
['text':' namespace JS','line_number':245,'multiline':False]
['text':' js_ProfilingFrameIterator_h ','line_number':247,'multiline':True]
