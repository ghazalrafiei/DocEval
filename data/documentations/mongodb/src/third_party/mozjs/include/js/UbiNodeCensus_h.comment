['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]
['text':' A census is a ubi::Node traversal that assigns each node to one or more','line_number':20,'multiline':False]
['text':' buckets, and returns a report with the size of each bucket.','line_number':21,'multiline':False]
['text':'','line_number':22,'multiline':False]
['text':' We summarize the results of a census with counts broken down according to','line_number':23,'multiline':False]
['text':' criteria selected by the API consumer code that is requesting the census. For','line_number':24,'multiline':False]
['text':' example, the following breakdown might give an interesting overview of the','line_number':25,'multiline':False]
['text':' heap:','line_number':26,'multiline':False]
['text':'','line_number':27,'multiline':False]
['text':'   - all nodes','line_number':28,'multiline':False]
['text':'     - objects','line_number':29,'multiline':False]
['text':'       - objects with a specific [[Class]] *','line_number':30,'multiline':False]
['text':'     - strings','line_number':31,'multiline':False]
['text':'     - scripts','line_number':32,'multiline':False]
['text':'     - DOM nodes','line_number':33,'multiline':False]
['text':'       - nsINodes with a specific name (found in nsINode::NodeName()) *','line_number':34,'multiline':False]
['text':'     - all other Node types','line_number':35,'multiline':False]
['text':'       - nodes with a specific ubi::Node::typeName *','line_number':36,'multiline':False]
['text':'','line_number':37,'multiline':False]
['text':' Obviously, the parts of this tree marked with * represent many separate','line_number':38,'multiline':False]
['text':' counts, depending on how many distinct [[Class]] values and ubi::Node type','line_number':39,'multiline':False]
['text':' names we encounter.','line_number':40,'multiline':False]
['text':'','line_number':41,'multiline':False]
['text':' The supported types of breakdowns are documented in','line_number':42,'multiline':False]
['text':' js/src/doc/Debugger/Debugger.Memory.md.','line_number':43,'multiline':False]
['text':'','line_number':44,'multiline':False]
['text':' When we parse the 'breakdown' argument to takeCensus, we build a tree of','line_number':45,'multiline':False]
['text':' CountType nodes. For example, for the breakdown shown in the','line_number':46,'multiline':False]
['text':' Debugger.Memory.prototype.takeCensus, documentation:','line_number':47,'multiline':False]
['text':'','line_number':48,'multiline':False]
['text':'    {','line_number':49,'multiline':False]
['text':'      by: "coarseType",','line_number':50,'multiline':False]
['text':'      objects: { by: "objectClass" },','line_number':51,'multiline':False]
['text':'      other:    { by: "internalType" },','line_number':52,'multiline':False]
['text':'      domNode: { by: "descriptiveType" }','line_number':53,'multiline':False]
['text':'    }','line_number':54,'multiline':False]
['text':'','line_number':55,'multiline':False]
['text':' we would build the following tree of CountType subclasses:','line_number':56,'multiline':False]
['text':'','line_number':57,'multiline':False]
['text':'    ByCoarseType','line_number':58,'multiline':False]
['text':'      objects: ByObjectClass','line_number':59,'multiline':False]
['text':'        each class: SimpleCount','line_number':60,'multiline':False]
['text':'      scripts: SimpleCount','line_number':61,'multiline':False]
['text':'      strings: SimpleCount','line_number':62,'multiline':False]
['text':'      other: ByUbinodeType','line_number':63,'multiline':False]
['text':'        each type: SimpleCount','line_number':64,'multiline':False]
['text':'      domNode: ByDomObjectClass','line_number':65,'multiline':False]
['text':'        each type: SimpleCount','line_number':66,'multiline':False]
['text':'','line_number':67,'multiline':False]
['text':' The interior nodes are all breakdown types that categorize nodes according to','line_number':68,'multiline':False]
['text':' one characteristic or another; and the leaf nodes are all SimpleType.','line_number':69,'multiline':False]
['text':'','line_number':70,'multiline':False]
['text':' Each CountType has its own concrete C++ type that holds the counts it','line_number':71,'multiline':False]
['text':' produces. SimpleCount::Count just holds totals. ByObjectClass::Count has a','line_number':72,'multiline':False]
['text':' hash table whose keys are object class names and whose values are counts of','line_number':73,'multiline':False]
['text':' some other type (in the example above, SimpleCount).','line_number':74,'multiline':False]
['text':'','line_number':75,'multiline':False]
['text':' To keep actual count nodes small, they have no vtable. Instead, each count','line_number':76,'multiline':False]
['text':' points to its CountType, which knows how to carry out all the operations we','line_number':77,'multiline':False]
['text':' need on a Count. A CountType can produce new count nodes; process nodes as we','line_number':78,'multiline':False]
['text':' visit them; build a JS object reporting the results; and destruct count','line_number':79,'multiline':False]
['text':' nodes.','line_number':80,'multiline':False]
['text':' Abstract base class for CountType nodes.','line_number':95,'multiline':False]
['text':' Destruct a count tree node that this type instance constructed.','line_number':100,'multiline':False]
['text':' Return a fresh node for the count tree that categorizes nodes according','line_number':103,'multiline':False]
['text':' to this type. Return a nullptr on OOM.','line_number':104,'multiline':False]
['text':' Trace |count| and all its children, for garbage collection.','line_number':107,'multiline':False]
['text':' Implement the 'count' method for counts returned by this CountType','line_number':110,'multiline':False]
['text':' instance's 'newCount' method.','line_number':111,'multiline':False]
['text':' Implement the 'report' method for counts returned by this CountType','line_number':116,'multiline':False]
['text':' instance's 'newCount' method.','line_number':117,'multiline':False]
['text':' An abstract base class for count tree nodes.','line_number':124,'multiline':False]
['text':' In lieu of a vtable, each CountBase points to its type, which','line_number':126,'multiline':False]
['text':' carries not only the implementations of the CountBase methods, but also','line_number':127,'multiline':False]
['text':' additional parameters for the type's behavior, as specified in the','line_number':128,'multiline':False]
['text':' breakdown argument passed to takeCensus.','line_number':129,'multiline':False]
['text':' Categorize and count |node| as appropriate for this count's type.','line_number':139,'multiline':False]
['text':' Construct a JavaScript object reporting the counts recorded in this','line_number':162,'multiline':False]
['text':' count, and store it in |report|. Return true on success, or false on','line_number':163,'multiline':False]
['text':' failure.','line_number':164,'multiline':False]
['text':' Down-cast this CountBase to its true type, based on its 'type' member,','line_number':169,'multiline':False]
['text':' and run its destructor.','line_number':170,'multiline':False]
['text':' Trace this count for garbage collection.','line_number':173,'multiline':False]
['text':' The smallest JS::ubi::Node::identifier() passed to this instance's','line_number':178,'multiline':False]
['text':' count() method. This provides a stable way to sort sets.','line_number':179,'multiline':False]
['text':' Common data for a census traversal, shared across all CountType nodes.','line_number':185,'multiline':False]
['text':' If the targetZones set is non-empty, then only consider nodes whose zone','line_number':188,'multiline':False]
['text':' is an element of the set. If the targetZones set is empty, then nodes in','line_number':189,'multiline':False]
['text':' all zones are considered.','line_number':190,'multiline':False]
['text':' A BreadthFirst handler type that conducts a census, using a CountBase to','line_number':196,'multiline':False]
['text':' categorize and count each node.','line_number':197,'multiline':False]
['text':' This class needs to retain no per-node data.','line_number':212,'multiline':False]
['text':' Examine the census options supplied by the API consumer, and (among other','line_number':222,'multiline':False]
['text':' things) use that to build a CountType tree.','line_number':223,'multiline':False]
['text':' Parse the breakdown language (as described in','line_number':229,'multiline':False]
['text':' js/src/doc/Debugger/Debugger.Memory.md) into a CountTypePtr. A null pointer','line_number':230,'multiline':False]
['text':' is returned on error and is reported to the cx.','line_number':231,'multiline':False]
['text':' namespace ubi','line_number':235,'multiline':False]
['text':' namespace JS','line_number':236,'multiline':False]
['text':' js_UbiNodeCensus_h','line_number':238,'multiline':False]
