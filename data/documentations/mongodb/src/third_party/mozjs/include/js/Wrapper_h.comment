['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]
['text':'
 * Helper for Wrapper::New default options.
 *
 * Callers of Wrapper::New() who wish to specify a prototype for the created
 * Wrapper, *MUST* construct a WrapperOptions with a JSContext.
 ','line_number':17,'multiline':True]
['text':' Base class for proxy handlers that want to forward all operations to an','line_number':42,'multiline':False]
['text':' object stored in the proxy's private slot.','line_number':43,'multiline':False]
['text':' Standard internal methods. ','line_number':48,'multiline':True]
['text':' SpiderMonkey extensions. ','line_number':90,'multiline':True]
['text':' Use the target object for private fields.','line_number':116,'multiline':False]
['text':'
 * A wrapper is a proxy with a target object to which it generally forwards
 * operations, but may restrict access to certain operations or augment those
 * operations in various ways.
 *
 * A wrapper can be "unwrapped" in C++, exposing the underlying object.
 * Callers should be careful to avoid unwrapping security wrappers in the wrong
 * context.
 *
 * Important: If you add a method implementation here, you probably also need
 * to add an override in CrossCompartmentWrapper. If you don't, you risk
 * compartment mismatches. See bug 945826 comment 0.
 ','line_number':122,'multiline':True]
['text':'*
   * A hook subclasses can override to implement CheckedUnwrapDynamic
   * behavior.  The JSContext represents the "who is trying to unwrap?" Realm.
   * The JSObject is the wrapper that the caller is trying to unwrap.
   ','line_number':146,'multiline':True]
['text':' Base class for all cross compartment wrapper handlers. ','line_number':188,'multiline':True]
['text':' Standard internal methods. ','line_number':197,'multiline':True]
['text':' SpiderMonkey extensions. ','line_number':240,'multiline':True]
['text':' Allocate CrossCompartmentWrappers in the nursery.','line_number':260,'multiline':False]
['text':' Standard internal methods. ','line_number':273,'multiline':True]
['text':' SpiderMonkey extensions. ','line_number':315,'multiline':True]
['text':'
 * Base class for security wrappers. A security wrapper is potentially hiding
 * all or part of some wrapped object thus SecurityWrapper defaults to denying
 * access to the wrappee. This is the opposite of Wrapper which tries to be
 * completely transparent.
 *
 * NB: Currently, only a few ProxyHandler operations are overridden to deny
 * access, relying on derived SecurityWrapper to block access when necessary.
 ','line_number':335,'multiline':True]
['text':' hasSecurityPolicy = ','line_number':348,'multiline':True]
['text':' Allow isCallable and isConstructor. They used to be class-level, and so','line_number':380,'multiline':False]
['text':' could not be guarded against.','line_number':381,'multiline':False]
['text':'
   * Allow our subclasses to select the superclass behavior they want without
   * needing to specify an exact superclass.
   ','line_number':383,'multiline':True]
['text':' static ','line_number':407,'multiline':True]
['text':' Given a JSObject, returns that object stripped of wrappers. If','line_number':413,'multiline':False]
['text':' stopAtWindowProxy is true, then this returns the WindowProxy if it was','line_number':414,'multiline':False]
['text':' previously wrapped. Otherwise, this returns the first object for which','line_number':415,'multiline':False]
['text':' JSObject::isWrapper returns false.','line_number':416,'multiline':False]
['text':'','line_number':417,'multiline':False]
['text':' ExposeToActiveJS is called on wrapper targets to allow gray marking','line_number':418,'multiline':False]
['text':' assertions to work while an incremental GC is in progress, but this means','line_number':419,'multiline':False]
['text':' that this cannot be called from the GC or off the main thread.','line_number':420,'multiline':False]
['text':' Given a JSObject, returns that object stripped of wrappers, except','line_number':425,'multiline':False]
['text':' WindowProxy wrappers.  At each stage, the wrapper has the opportunity to veto','line_number':426,'multiline':False]
['text':' the unwrap. Null is returned if there are security wrappers that can't be','line_number':427,'multiline':False]
['text':' unwrapped.','line_number':428,'multiline':False]
['text':'','line_number':429,'multiline':False]
['text':' This does a static-only unwrap check: it basically checks whether _all_','line_number':430,'multiline':False]
['text':' globals in the wrapper's source compartment should be able to access the','line_number':431,'multiline':False]
['text':' wrapper target.  This won't necessarily return the right thing for the HTML','line_number':432,'multiline':False]
['text':' spec's cross-origin objects (WindowProxy and Location), but is fine to use','line_number':433,'multiline':False]
['text':' when failure to unwrap one of those objects wouldn't be a problem.  For','line_number':434,'multiline':False]
['text':' example, if you want to test whether your target object is a specific class','line_number':435,'multiline':False]
['text':' that's not WindowProxy or Location, you can use this.','line_number':436,'multiline':False]
['text':'','line_number':437,'multiline':False]
['text':' ExposeToActiveJS is called on wrapper targets to allow gray marking','line_number':438,'multiline':False]
['text':' assertions to work while an incremental GC is in progress, but this means','line_number':439,'multiline':False]
['text':' that this cannot be called from the GC or off the main thread.','line_number':440,'multiline':False]
['text':' Unwrap only the outermost security wrapper, with the same semantics as','line_number':443,'multiline':False]
['text':' above. This is the checked version of Wrapper::wrappedObject.','line_number':444,'multiline':False]
['text':' Given a JSObject, returns that object stripped of wrappers. At each stage,','line_number':447,'multiline':False]
['text':' the security wrapper has the opportunity to veto the unwrap. If','line_number':448,'multiline':False]
['text':' stopAtWindowProxy is true, then this returns the WindowProxy if it was','line_number':449,'multiline':False]
['text':' previously wrapped.  Null is returned if there are security wrappers that','line_number':450,'multiline':False]
['text':' can't be unwrapped.','line_number':451,'multiline':False]
['text':'','line_number':452,'multiline':False]
['text':' ExposeToActiveJS is called on wrapper targets to allow gray marking','line_number':453,'multiline':False]
['text':' assertions to work while an incremental GC is in progress, but this means','line_number':454,'multiline':False]
['text':' that this cannot be called from the GC or off the main thread.','line_number':455,'multiline':False]
['text':'','line_number':456,'multiline':False]
['text':' The JSContext argument will be used for dynamic checks (needed by WindowProxy','line_number':457,'multiline':False]
['text':' and Location) and should represent the Realm doing the unwrapping.  It is not','line_number':458,'multiline':False]
['text':' used to throw exceptions; this function never throws.','line_number':459,'multiline':False]
['text':'','line_number':460,'multiline':False]
['text':' This function may be able to GC (and the static analysis definitely thinks it','line_number':461,'multiline':False]
['text':' can), but it still takes a JSObject* argument, because some of its callers','line_number':462,'multiline':False]
['text':' would actually have a bit of a hard time producing a Rooted.  And it ends up','line_number':463,'multiline':False]
['text':' having to root internally anyway, because it wants to use the value in a loop','line_number':464,'multiline':False]
['text':' and you can't assign to a HandleObject.  What this means is that callers who','line_number':465,'multiline':False]
['text':' plan to use the argument object after they have called this function will','line_number':466,'multiline':False]
['text':' need to root it to avoid hazard failures, even though this function doesn't','line_number':467,'multiline':False]
['text':' require a Handle.','line_number':468,'multiline':False]
['text':' Unwrap only the outermost security wrapper, with the same semantics as','line_number':472,'multiline':False]
['text':' above. This is the checked version of Wrapper::wrappedObject.','line_number':473,'multiline':False]
['text':' Given a JSObject, returns that object stripped of wrappers. This returns the','line_number':478,'multiline':False]
['text':' WindowProxy if it was previously wrapped.','line_number':479,'multiline':False]
['text':'','line_number':480,'multiline':False]
['text':' ExposeToActiveJS is not called on wrapper targets so this can be called from','line_number':481,'multiline':False]
['text':' the GC or off the main thread.','line_number':482,'multiline':False]
['text':' If a cross-compartment wrapper source => target exists, nuke it.','line_number':490,'multiline':False]
['text':' API to recompute all cross-compartment wrappers whose source and target','line_number':503,'multiline':False]
['text':' match the given filters.','line_number':504,'multiline':False]
['text':' namespace js ','line_number':509,'multiline':True]
['text':' js_Wrapper_h ','line_number':511,'multiline':True]
