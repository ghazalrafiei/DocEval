['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- ','line_number':1,'multiline':True]
['text':' This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':2,'multiline':True]
['text':' Property descriptors and flags. ','line_number':6,'multiline':True]
['text':' MOZ_ASSERT{,_IF}','line_number':11,'multiline':False]
['text':' size_t','line_number':13,'multiline':False]
['text':' uint8_t, uint16_t, int32_t, uint32_t, uintptr_t','line_number':14,'multiline':False]
['text':' std::enable_if','line_number':15,'multiline':False]
['text':' JS_PUBLIC_API','line_number':17,'multiline':False]
['text':' JSNative','line_number':19,'multiline':False]
['text':' JSPROP_*','line_number':20,'multiline':False]
['text':' JS::MutableHandle','line_number':21,'multiline':False]
['text':' JS::SymbolCode, PropertySpecNameIsSymbol','line_number':22,'multiline':False]
['text':' JS::Value','line_number':23,'multiline':False]
['text':'*
 * Wrapper to relace JSNative for JSPropertySpecs and JSFunctionSpecs. This will
 * allow us to pass one JSJitInfo per function with the property/function spec,
 * without additional field overhead.
 ','line_number':28,'multiline':True]
['text':'*
 * Description of a property. JS_DefineProperties and JS_InitClass take arrays
 * of these and define many properties at once. JS_PSG, JS_PSGS and JS_PS_END
 * are helper macros for defining such arrays.
 ','line_number':45,'multiline':True]
['text':' The same type as JSNativeWrapper's first field, so that the access in','line_number':52,'multiline':False]
['text':' JSPropertySpec::checkAccessorsAreSelfHosted become valid.','line_number':53,'multiline':False]
['text':' JSPROP_* property attributes as defined in PropertyDescriptor.h.','line_number':189,'multiline':False]
['text':' Whether AccessorsOrValue below stores a value, JSNative accessors, or','line_number':192,'multiline':False]
['text':' self-hosted accessors.','line_number':193,'multiline':False]
['text':' Verify that our accessors match our Kind.','line_number':315,'multiline':False]
['text':' We may have a getter or a setter or both.  And whichever ones we have','line_number':339,'multiline':False]
['text':' should not have a SelfHostedWrapper for the accessor.','line_number':340,'multiline':False]
['text':' There can be many JSPropertySpec instances so verify the size is what we','line_number':351,'multiline':False]
['text':' expect:','line_number':352,'multiline':False]
['text':'','line_number':353,'multiline':False]
['text':' - Name (1 word)','line_number':354,'multiline':False]
['text':' - attributes_ + isAccessor_ (1 word)','line_number':355,'multiline':False]
['text':' - AccessorsOrValue (4 words, native + JSJitInfo for both getter and setter)','line_number':356,'multiline':False]
['text':'*
 * To define a native function, set call to a JSNativeWrapper. To define a
 * self-hosted function, set selfHostedName to the name of a function
 * compiled during JSRuntime::initSelfHosting.
 ','line_number':395,'multiline':True]
['text':' JSPROP_* property attributes as defined in PropertyDescriptor.h','line_number':409,'multiline':False]
['text':'
 * Terminating sentinel initializer to put at the end of a JSFunctionSpec array
 * that's passed to JS_DefineFunctions or JS_InitClass.
 ','line_number':413,'multiline':True]
['text':'
 * Initializer macros for a JSFunctionSpec array element. JS_FNINFO allows the
 * simple adding of JSJitInfos. JS_SELF_HOSTED_FN declares a self-hosted
 * function. JS_INLINABLE_FN allows specifying an InlinableNative enum value for
 * natives inlined or specialized by the JIT. Finally JS_FNSPEC has slots for
 * all the fields.
 *
 * The _SYM variants allow defining a function with a symbol key rather than a
 * string key. For example, use JS_SYM_FN(iterator, ...) to define an
 * @@iterator method.
 ','line_number':419,'multiline':True]
['text':' js_PropertySpec_h','line_number':447,'multiline':False]
