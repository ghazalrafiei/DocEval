['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]
['text':' GC Policy Mechanism','line_number':7,'multiline':False]
['text':' A GCPolicy controls how the GC interacts with both direct pointers to GC','line_number':9,'multiline':False]
['text':' things (e.g. JSObject* or JSString*), tagged and/or optional pointers to GC','line_number':10,'multiline':False]
['text':' things (e.g.  Value or jsid), and C++ container types (e.g.','line_number':11,'multiline':False]
['text':' JSPropertyDescriptor or GCHashMap).','line_number':12,'multiline':False]
['text':'','line_number':13,'multiline':False]
['text':' The GCPolicy provides at a minimum:','line_number':14,'multiline':False]
['text':'','line_number':15,'multiline':False]
['text':'   static void trace(JSTracer, T* tp, const char* name)','line_number':16,'multiline':False]
['text':'       - Trace the edge |*tp|, calling the edge |name|. Containers like','line_number':17,'multiline':False]
['text':'         GCHashMap and GCHashSet use this method to trace their children.','line_number':18,'multiline':False]
['text':'','line_number':19,'multiline':False]
['text':'   static bool needsSweep(T* tp)','line_number':20,'multiline':False]
['text':'       - [DEPRECATED], use traceWeak instead.','line_number':21,'multiline':False]
['text':'         Return true if |*tp| is about to be finalized. Otherwise, update the','line_number':22,'multiline':False]
['text':'         edge for moving GC, and return false. Containers like GCHashMap and','line_number':23,'multiline':False]
['text':'         GCHashSet use this method to decide when to remove an entry: if this','line_number':24,'multiline':False]
['text':'         function returns true on a key/value/member/etc, its entry is dropped','line_number':25,'multiline':False]
['text':'         from the container. Specializing this method is the standard way to','line_number':26,'multiline':False]
['text':'         get custom weak behavior from a container type.','line_number':27,'multiline':False]
['text':'','line_number':28,'multiline':False]
['text':'   static bool traceWeak(T* tp)','line_number':29,'multiline':False]
['text':'       - Return false if |*tp| has been set to nullptr. Otherwise, update the','line_number':30,'multiline':False]
['text':'         edge for moving GC, and return true. Containers like GCHashMap and','line_number':31,'multiline':False]
['text':'         GCHashSet use this method to decide when to remove an entry: if this','line_number':32,'multiline':False]
['text':'         function returns false on a key/value/member/etc, its entry is','line_number':33,'multiline':False]
['text':'         dropped from the container. Specializing this method is the standard','line_number':34,'multiline':False]
['text':'         way to get custom weak behavior from a container type.','line_number':35,'multiline':False]
['text':'','line_number':36,'multiline':False]
['text':'   static bool isValid(const T& t)','line_number':37,'multiline':False]
['text':'       - Return false only if |t| is corrupt in some way. The built-in GC','line_number':38,'multiline':False]
['text':'         types do some memory layout checks. For debugging only; it is ok','line_number':39,'multiline':False]
['text':'         to always return true or even to omit this member entirely.','line_number':40,'multiline':False]
['text':'','line_number':41,'multiline':False]
['text':' The default GCPolicy<T> assumes that T has a default constructor and |trace|','line_number':42,'multiline':False]
['text':' and |traceWeak| methods, and forwards to them. GCPolicy has appropriate','line_number':43,'multiline':False]
['text':' specializations for pointers to GC things and pointer-like types like','line_number':44,'multiline':False]
['text':' JS::Heap<T> and mozilla::UniquePtr<T>.','line_number':45,'multiline':False]
['text':'','line_number':46,'multiline':False]
['text':' There are some stock structs your specializations can inherit from.','line_number':47,'multiline':False]
['text':' IgnoreGCPolicy<T> does nothing. StructGCPolicy<T> forwards the methods to the','line_number':48,'multiline':False]
['text':' referent type T.','line_number':49,'multiline':False]
['text':' JS_FOR_EACH_PUBLIC_GC_POINTER_TYPE','line_number':59,'multiline':False]
['text':' Defines a policy for container types with non-GC, i.e. C storage. This','line_number':66,'multiline':False]
['text':' policy dispatches to the underlying struct for GC interactions.','line_number':67,'multiline':False]
['text':' The default GC policy attempts to defer to methods on the underlying type.','line_number':84,'multiline':False]
['text':' Most C++ structures that contain a default constructor, a trace function and','line_number':85,'multiline':False]
['text':' a sweep function will work out of the box with Rooted, Handle, GCVector,','line_number':86,'multiline':False]
['text':' and GCHash{Set,Map}.','line_number':87,'multiline':False]
['text':' This policy ignores any GC interaction, e.g. for non-GC types.','line_number':91,'multiline':False]
['text':' It's not safe to trace unbarriered pointers except as part of root','line_number':110,'multiline':False]
['text':' marking.','line_number':111,'multiline':False]
['text':' GCPolicy<UniquePtr<T>> forwards the contained pointer to GCPolicy<T>.','line_number':176,'multiline':False]
['text':' GCPolicy<Maybe<T>> forwards tracing/sweeping to GCPolicy<T*> if','line_number':208,'multiline':False]
['text':' when the Maybe<T> is full.','line_number':209,'multiline':False]
['text':' see Realm.h','line_number':238,'multiline':False]
['text':' namespace JS','line_number':240,'multiline':False]
['text':' GCPolicyAPI_h','line_number':242,'multiline':False]
