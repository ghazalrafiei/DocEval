['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]
['text':' Set of annotations for the rooting hazard analysis, used to categorize types','line_number':10,'multiline':False]
['text':' and functions.','line_number':11,'multiline':False]
['text':' Mark a type as being a GC thing (eg js::gc::Cell has this annotation).','line_number':16,'multiline':False]
['text':' Mark a type as holding a pointer to a GC thing (eg JS::Value has this','line_number':19,'multiline':False]
['text':' annotation.) "Inherited" by templatized types with','line_number':20,'multiline':False]
['text':' MOZ_INHERIT_TYPE_ANNOTATIONS_FROM_TEMPLATE_ARGS.','line_number':21,'multiline':False]
['text':' Mark a type as a rooted pointer, suitable for use on the stack (eg all','line_number':24,'multiline':False]
['text':' Rooted<T> instantiations should have this.) "Inherited" by templatized types','line_number':25,'multiline':False]
['text':' with MOZ_INHERIT_TYPE_ANNOTATIONS_FROM_TEMPLATE_ARGS.','line_number':26,'multiline':False]
['text':' Mark a type as something that should not be held live across a GC, but which','line_number':29,'multiline':False]
['text':' is not itself a GC pointer. Note that this property is *not* inherited by','line_number':30,'multiline':False]
['text':' templatized types with MOZ_INHERIT_TYPE_ANNOTATIONS_FROM_TEMPLATE_ARGS.','line_number':31,'multiline':False]
['text':' Mark a class as a base class of rooted types, eg CustomAutoRooter. All','line_number':34,'multiline':False]
['text':' descendants of this class will be considered rooted, though classes that','line_number':35,'multiline':False]
['text':' merely contain these as a field member will not be. "Inherited" by','line_number':36,'multiline':False]
['text':' templatized types with MOZ_INHERIT_TYPE_ANNOTATIONS_FROM_TEMPLATE_ARGS','line_number':37,'multiline':False]
['text':' Mark a type that would otherwise be considered a GC Pointer (eg because it','line_number':40,'multiline':False]
['text':' contains a JS::Value field) as a non-GC pointer. It is handled almost the','line_number':41,'multiline':False]
['text':' same in the analysis as a rooted pointer, except it will not be reported as','line_number':42,'multiline':False]
['text':' an unnecessary root if used across a GC call. This should rarely be used,','line_number':43,'multiline':False]
['text':' but makes sense for something like ErrorResult, which only contains a GC','line_number':44,'multiline':False]
['text':' pointer when it holds an exception (and it does its own rooting,','line_number':45,'multiline':False]
['text':' conditionally.)','line_number':46,'multiline':False]
['text':' Mark a function as something that runs a garbage collection, potentially','line_number':50,'multiline':False]
['text':' invalidating GC pointers.','line_number':51,'multiline':False]
['text':' Mark an RAII class as suppressing GC within its scope.','line_number':54,'multiline':False]
['text':' Mark a function as one that can run script if called.  This obviously','line_number':57,'multiline':False]
['text':' subsumes JS_HAZ_GC_CALL, since anything that can run script can GC.`','line_number':58,'multiline':False]
['text':' Mark a function as able to call JSNatives. Otherwise, JSNatives don't show','line_number':61,'multiline':False]
['text':' up in the callgraph. This doesn't matter for the can-GC analysis, but it is','line_number':62,'multiline':False]
['text':' very nice for other uses of the callgraph.','line_number':63,'multiline':False]
['text':' js_GCAnnotations_h ','line_number':82,'multiline':True]
