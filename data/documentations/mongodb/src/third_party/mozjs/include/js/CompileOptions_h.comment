['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- ','line_number':1,'multiline':True]
['text':' This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':2,'multiline':True]
['text':'
 * Options for JavaScript compilation.
 *
 * In the most common use case, a CompileOptions instance is allocated on the
 * stack, and holds non-owning references to non-POD option values: strings,
 * principals, objects, and so on.  The code declaring the instance guarantees
 * that such option values will outlive the CompileOptions itself: objects are
 * otherwise rooted, principals have had their reference counts bumped, and
 * strings won't be freed until the CompileOptions goes out of scope.  In this
 * situation, CompileOptions only refers to things others own, so it can be
 * lightweight.
 *
 * In some cases, however, we need to hold compilation options with a
 * non-stack-like lifetime.  For example, JS::CompileOffThread needs to save
 * compilation options where a worker thread can find them, then return
 * immediately.  The worker thread will come along at some later point, and use
 * the options.
 *
 * The compiler itself just needs to be able to access a collection of options;
 * it doesn't care who owns them, or what's keeping them alive.  It does its
 * own addrefs/copies/tracing/etc.
 *
 * Furthermore, in some cases compile options are propagated from one entity to
 * another (e.g. from a script to a function defined in that script).  This
 * involves copying over some, but not all, of the options.
 *
 * So we have a class hierarchy that reflects these four use cases:
 *
 * - TransitiveCompileOptions is the common base class, representing options
 *   that should get propagated from a script to functions defined in that
 *   script.  This class is abstract and is only ever used as a subclass.
 *
 * - ReadOnlyCompileOptions is the only subclass of TransitiveCompileOptions,
 *   representing a full set of compile options.  It can be used by code that
 *   simply needs to access options set elsewhere, like the compiler.  This
 *   class too is abstract and is only ever used as a subclass.
 *
 * - The usual CompileOptions class must be stack-allocated, and holds
 *   non-owning references to the filename, element, and so on. It's derived
 *   from ReadOnlyCompileOptions, so the compiler can use it.
 *
 * - OwningCompileOptions roots / copies / reference counts of all its values,
 *   and unroots / frees / releases them when it is destructed. It too is
 *   derived from ReadOnlyCompileOptions, so the compiler accepts it.
 ','line_number':6,'multiline':True]
['text':' mozilla::MallocSizeOf','line_number':55,'multiline':False]
['text':' size_t','line_number':57,'multiline':False]
['text':' uint8_t','line_number':58,'multiline':False]
['text':' JS_PUBLIC_API','line_number':60,'multiline':False]
['text':' JS::PersistentRooted, JS::Rooted','line_number':62,'multiline':False]
['text':'*
 * The common base class for the CompileOptions hierarchy.
 *
 * Use this in code that needs to propagate compile options from one
 * compilation unit to another.
 ','line_number':80,'multiline':True]
['text':'*
   * The Web Platform allows scripts to be loaded from arbitrary cross-origin
   * sources. This allows an attack by which a malicious website loads a
   * sensitive file (say, a bank statement) cross-origin (using the user's
   * cookies), and sniffs the generated syntax errors (via a window.onerror
   * handler) for juicy morsels of its contents.
   *
   * To counter this attack, HTML5 specifies that script errors should be
   * sanitized ("muted") when the script is not same-origin with the global
   * for which it is loaded. Callers should set this flag for cross-origin
   * scripts, and it will be propagated appropriately to child scripts and
   * passed back in JSErrorReports.
   ','line_number':88,'multiline':True]
['text':' Either the Realm configuration or specialized VM operating modes may','line_number':103,'multiline':False]
['text':' disallow syntax-parse altogether. These conditions are checked in the','line_number':104,'multiline':False]
['text':' CompileOptions constructor.','line_number':105,'multiline':False]
['text':' Either the Realm configuration or the compile request may force','line_number':108,'multiline':False]
['text':' strict-mode.','line_number':109,'multiline':False]
['text':' The context has specified that source pragmas should be parsed.','line_number':112,'multiline':False]
['text':' Flag used to bypass the filename validation callback.','line_number':119,'multiline':False]
['text':' See also SetFilenameValidationCallback.','line_number':120,'multiline':False]
['text':' POD options.','line_number':124,'multiline':False]
['text':' If set, this script will be hidden from the debugger. The requirement','line_number':134,'multiline':False]
['text':' is that once compilation is finished, a call to UpdateDebugMetadata will','line_number':135,'multiline':False]
['text':' be made, which will update the SSO with the appropiate debug metadata,','line_number':136,'multiline':False]
['text':' and expose the script to the debugger (if hideScriptFromDebugger isn't set)','line_number':137,'multiline':False]
['text':' True if transcoding to XDR should use Stencil instead of JSScripts.','line_number':151,'multiline':False]
['text':' True if off-thread parsing should use a parse GlobalObject in order to','line_number':154,'multiline':False]
['text':' directly allocate to the GC from a helper thread. If false, transfer the','line_number':155,'multiline':False]
['text':' CompilationStencil back to main thread before allocating GC objects.','line_number':156,'multiline':False]
['text':' When decoding from XDR, borrow ImmutableScriptData from the XDR buffer','line_number':159,'multiline':False]
['text':' instead of copying out of it.','line_number':160,'multiline':False]
['text':'','line_number':161,'multiline':False]
['text':' NOTE: When using this mode, the XDR buffer must live until JS_Shutdown is','line_number':162,'multiline':False]
['text':' called. There is currently no mechanism to release the data sooner.','line_number':163,'multiline':False]
['text':'*
   * |introductionType| is a statically allocated C string: one of "eval",
   * "Function", or "GeneratorFunction".
   ','line_number':166,'multiline':True]
['text':' Set all POD options (those not requiring reference counts, copies,','line_number':181,'multiline':False]
['text':' rooting, or other hand-holding) to their values in |rhs|.','line_number':182,'multiline':False]
['text':' Read-only accessors for non-POD options. The proper way to set these','line_number':186,'multiline':False]
['text':' depends on the derived type.','line_number':187,'multiline':False]
['text':'*
 * The class representing a full set of compile options.
 *
 * Use this in code that only needs to access compilation options created
 * elsewhere, like the compiler.  Don't instantiate this class (the constructor
 * is protected anyway); instead, create instances only of the derived classes:
 * CompileOptions and OwningCompileOptions.
 ','line_number':201,'multiline':True]
['text':' POD options.','line_number':211,'multiline':False]
['text':' The offset within the ScriptSource's full uncompressed text of the first','line_number':215,'multiline':False]
['text':' character we're presenting for compilation with this CompileOptions.','line_number':216,'multiline':False]
['text':'','line_number':217,'multiline':False]
['text':' When we compile a lazy script, we pass the compiler only the substring of','line_number':218,'multiline':False]
['text':' the source the lazy function occupies. With chunked decompression, we may','line_number':219,'multiline':False]
['text':' not even have the complete uncompressed source present in memory. But parse','line_number':220,'multiline':False]
['text':' node positions are offsets within the ScriptSource's full text, and','line_number':221,'multiline':False]
['text':' BaseScript indicate their substring of the full source by its starting and','line_number':222,'multiline':False]
['text':' ending offsets within the full text. This scriptSourceOffset field lets the','line_number':223,'multiline':False]
['text':' frontend convert between these offsets and offsets within the substring','line_number':224,'multiline':False]
['text':' presented for compilation.','line_number':225,'multiline':False]
['text':' These only apply to non-function scripts.','line_number':228,'multiline':False]
['text':'*
 * Compilation options, with dynamic lifetime. An instance of this type
 * makes a copy of / holds / roots all dynamically allocated resources
 * (principals; elements; strings) that it refers to. Its destructor frees
 * / drops / unroots them. This is heavier than CompileOptions, below, but
 * unlike CompileOptions, it can outlive any given stack frame.
 *
 * Note that this *roots* any JS values it refers to - they're live
 * unconditionally. Thus, instances of this type can't be owned, directly
 * or indirectly, by a JavaScript object: if any value that this roots ever
 * comes to refer to the object that owns this, then the whole cycle, and
 * anything else it entrains, will never be freed.
 ','line_number':241,'multiline':True]
['text':' A minimal constructor, for use with OwningCompileOptions::copy.','line_number':256,'multiline':False]
['text':'* Set this to a copy of |rhs|.  Return false on OOM. ','line_number':260,'multiline':True]
['text':' ES6 10.2.1 Module code is always strict mode code.','line_number':276,'multiline':False]
['text':'*
 * Compilation options stored on the stack. An instance of this type
 * simply holds references to dynamically allocated resources (element;
 * filename; source map URL) that are owned by something else. If you
 * create an instance of this type, it's up to you to guarantee that
 * everything you store in it will outlive it.
 ','line_number':290,'multiline':True]
['text':' Default options determined using the JSContext.','line_number':300,'multiline':False]
['text':' Copy both the transitive and the non-transitive options from another','line_number':303,'multiline':False]
['text':' options object.','line_number':304,'multiline':False]
['text':' Set introduction information according to any currently executing script.','line_number':402,'multiline':False]
['text':' ES6 10.2.1 Module code is always strict mode code.','line_number':423,'multiline':False]
['text':' namespace JS','line_number':434,'multiline':False]
['text':' js_CompileOptions_h ','line_number':436,'multiline':True]
