['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]
['text':' JS::{Handle,Rooted}','line_number':14,'multiline':False]
['text':' JS::Value, JS::Handle<JS::Value>','line_number':16,'multiline':False]
['text':' Do not capture any stack.','line_number':22,'multiline':False]
['text':' Capture the current JS stack when setting the exception. It may be','line_number':25,'multiline':False]
['text':' retrieved by JS::GetPendingExceptionStack.','line_number':26,'multiline':False]
['text':' namespace JS','line_number':29,'multiline':False]
['text':'*
 * If the given object is an exception object, the exception will have (or be
 * able to lazily create) an error report struct, and this function will return
 * the address of that struct.  Otherwise, it returns nullptr. The lifetime
 * of the error report struct that might be returned is the same as the
 * lifetime of the exception object.
 ','line_number':44,'multiline':True]
['text':' This class encapsulates a (pending) exception and the corresponding optional','line_number':56,'multiline':False]
['text':' SavedFrame stack object captured when the pending exception was set','line_number':57,'multiline':False]
['text':' on the JSContext. This fuzzily correlates with a `throw` statement in JS,','line_number':58,'multiline':False]
['text':' although arbitrary JSAPI consumers or VM code may also set pending exceptions','line_number':59,'multiline':False]
['text':' via `JS_SetPendingException`.','line_number':60,'multiline':False]
['text':'','line_number':61,'multiline':False]
['text':' This is not the same stack as `e.stack` when `e` is an `Error` object.','line_number':62,'multiline':False]
['text':' (That would be JS::ExceptionStackOrNull).','line_number':63,'multiline':False]
['text':' |stack| can be null.','line_number':84,'multiline':False]
['text':'*
 * Save and later restore the current exception state of a given JSContext.
 * This is useful for implementing behavior in C++ that's like try/catch
 * or try/finally in JS.
 *
 * Typical usage:
 *
 *     bool ok = JS::Evaluate(cx, ...);
 *     AutoSaveExceptionState savedExc(cx);
 *     ... cleanup that might re-enter JS ...
 *     return ok;
 ','line_number':88,'multiline':True]
['text':'
   * Take a snapshot of cx's current exception state. Then clear any current
   * pending exception in cx.
   ','line_number':110,'multiline':True]
['text':'
   * If neither drop() nor restore() was called, restore the exception
   * state only if no exception is currently pending on cx.
   ','line_number':116,'multiline':True]
['text':'
   * Discard any stored exception state.
   * If this is called, the destructor is a no-op.
   ','line_number':122,'multiline':True]
['text':'
   * Replace cx's exception state with the stored exception state. Then
   * discard the stored exception state. If this is called, the
   * destructor is a no-op.
   ','line_number':128,'multiline':True]
['text':' Get the current pending exception value and stack.','line_number':136,'multiline':False]
['text':' This function asserts that there is a pending exception.','line_number':137,'multiline':False]
['text':' If this function returns false, then retrieving the current pending exception','line_number':138,'multiline':False]
['text':' failed and might have been overwritten by a new exception.','line_number':139,'multiline':False]
['text':' Similar to GetPendingExceptionStack, but also clears the current','line_number':143,'multiline':False]
['text':' pending exception.','line_number':144,'multiline':False]
['text':' Set both the exception value and its associated stack on the context as','line_number':148,'multiline':False]
['text':' the current pending exception.','line_number':149,'multiline':False]
['text':'*
 * If the given object is an exception object (or an unwrappable
 * cross-compartment wrapper for one), return the stack for that exception, if
 * any.  Will return null if the given object is not an exception object
 * (including if it's null or a security wrapper that can't be unwrapped) or if
 * the exception has no stack.
 ','line_number':153,'multiline':True]
['text':' namespace JS','line_number':162,'multiline':False]
['text':' js_Exception_h','line_number':164,'multiline':False]
