['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]
['text':' A breadth-first traversal template for graphs of ubi::Nodes.','line_number':17,'multiline':False]
['text':'','line_number':18,'multiline':False]
['text':' No GC may occur while an instance of this template is live.','line_number':19,'multiline':False]
['text':'','line_number':20,'multiline':False]
['text':' The provided Handler type should have two members:','line_number':21,'multiline':False]
['text':'','line_number':22,'multiline':False]
['text':'   typename NodeData;','line_number':23,'multiline':False]
['text':'','line_number':24,'multiline':False]
['text':'      The value type of |BreadthFirst<Handler>::visited|, the HashMap of','line_number':25,'multiline':False]
['text':'      ubi::Nodes that have been visited so far. Since the algorithm needs a','line_number':26,'multiline':False]
['text':'      hash table like this for its own use anyway, it is simple to let','line_number':27,'multiline':False]
['text':'      Handler store its own metadata about each node in the same table.','line_number':28,'multiline':False]
['text':'','line_number':29,'multiline':False]
['text':'      For example, if you want to find a shortest path to each node from any','line_number':30,'multiline':False]
['text':'      traversal starting point, your |NodeData| type could record the first','line_number':31,'multiline':False]
['text':'      edge to reach each node, and the node from which it originates. Then,','line_number':32,'multiline':False]
['text':'      when the traversal is complete, you can walk backwards from any node','line_number':33,'multiline':False]
['text':'      to some starting point, and the path recorded will be a shortest path.','line_number':34,'multiline':False]
['text':'','line_number':35,'multiline':False]
['text':'      This type must have a default constructor. If this type owns any other','line_number':36,'multiline':False]
['text':'      resources, move constructors and assignment operators are probably a','line_number':37,'multiline':False]
['text':'      good idea, too.','line_number':38,'multiline':False]
['text':'','line_number':39,'multiline':False]
['text':'   bool operator() (BreadthFirst& traversal,','line_number':40,'multiline':False]
['text':'                    Node origin, const Edge& edge,','line_number':41,'multiline':False]
['text':'                    Handler::NodeData* referentData, bool first);','line_number':42,'multiline':False]
['text':'','line_number':43,'multiline':False]
['text':'      The visitor function, called to report that we have traversed','line_number':44,'multiline':False]
['text':'      |edge| from |origin|. This is called once for each edge we traverse.','line_number':45,'multiline':False]
['text':'      As this is a breadth-first search, any prior calls to the visitor','line_number':46,'multiline':False]
['text':'      function were for origin nodes not further from the start nodes than','line_number':47,'multiline':False]
['text':'      |origin|.','line_number':48,'multiline':False]
['text':'','line_number':49,'multiline':False]
['text':'      |traversal| is this traversal object, passed along for convenience.','line_number':50,'multiline':False]
['text':'','line_number':51,'multiline':False]
['text':'      |referentData| is a pointer to the value of the entry in','line_number':52,'multiline':False]
['text':'      |traversal.visited| for |edge.referent|; the visitor function can','line_number':53,'multiline':False]
['text':'      store whatever metadata it likes about |edge.referent| there.','line_number':54,'multiline':False]
['text':'','line_number':55,'multiline':False]
['text':'      |first| is true if this is the first time we have visited an edge','line_number':56,'multiline':False]
['text':'      leading to |edge.referent|. This could be stored in NodeData, but','line_number':57,'multiline':False]
['text':'      the algorithm knows whether it has just created the entry in','line_number':58,'multiline':False]
['text':'      |traversal.visited|, so it passes it along for convenience.','line_number':59,'multiline':False]
['text':'','line_number':60,'multiline':False]
['text':'      The visitor function may call |traversal.abandonReferent()| if it','line_number':61,'multiline':False]
['text':'      doesn't want to traverse the outgoing edges of |edge.referent|. You can','line_number':62,'multiline':False]
['text':'      use this to limit the traversal to a given portion of the graph: it will','line_number':63,'multiline':False]
['text':'      never visit nodes reachable only through nodes that you have abandoned.','line_number':64,'multiline':False]
['text':'      Note that |abandonReferent| must be called the first time the given node','line_number':65,'multiline':False]
['text':'      is reached; that is, |first| must be true.','line_number':66,'multiline':False]
['text':'','line_number':67,'multiline':False]
['text':'      The visitor function may call |doNotMarkReferentAsVisited()| if it','line_number':68,'multiline':False]
['text':'      does not want a node to be considered 'visited' (and added to the','line_number':69,'multiline':False]
['text':'      'visited' set). This is useful when the visitor has custom logic to','line_number':70,'multiline':False]
['text':'      determine whether an edge is 'interesting'.','line_number':71,'multiline':False]
['text':'','line_number':72,'multiline':False]
['text':'      The visitor function may call |traversal.stop()| if it doesn't want','line_number':73,'multiline':False]
['text':'      to visit any more nodes at all.','line_number':74,'multiline':False]
['text':'','line_number':75,'multiline':False]
['text':'      The visitor function may consult |traversal.visited| for information','line_number':76,'multiline':False]
['text':'      about other nodes, but it should not add or remove entries.','line_number':77,'multiline':False]
['text':'','line_number':78,'multiline':False]
['text':'      The visitor function should return true on success, or false if an','line_number':79,'multiline':False]
['text':'      error occurs. A false return value terminates the traversal','line_number':80,'multiline':False]
['text':'      immediately, and causes BreadthFirst<Handler>::traverse to return','line_number':81,'multiline':False]
['text':'      false.','line_number':82,'multiline':False]
['text':' Construct a breadth-first traversal object that reports the nodes it','line_number':85,'multiline':False]
['text':' reaches to |handler|. The traversal asserts that no GC happens in its','line_number':86,'multiline':False]
['text':' runtime during its lifetime.','line_number':87,'multiline':False]
['text':'','line_number':88,'multiline':False]
['text':' We do nothing with noGC, other than require it to exist, with a lifetime','line_number':89,'multiline':False]
['text':' that encloses our own.','line_number':90,'multiline':False]
['text':' Add |node| as a starting point for the traversal. You may add','line_number':102,'multiline':False]
['text':' as many starting points as you like. Return false on OOM.','line_number':103,'multiline':False]
['text':' Add |node| as a starting point for the traversal (see addStart) and also','line_number':106,'multiline':False]
['text':' add it to the |visited| set. Return false on OOM.','line_number':107,'multiline':False]
['text':' True if the handler wants us to compute edge names; doing so can be','line_number':116,'multiline':False]
['text':' expensive in time and memory. True by default.','line_number':117,'multiline':False]
['text':' Traverse the graph in breadth-first order, starting at the given','line_number':120,'multiline':False]
['text':' start nodes, applying |handler::operator()| for each edge traversed','line_number':121,'multiline':False]
['text':' as described above.','line_number':122,'multiline':False]
['text':'','line_number':123,'multiline':False]
['text':' This should be called only once per instance of this class.','line_number':124,'multiline':False]
['text':'','line_number':125,'multiline':False]
['text':' Return false on OOM or error return from |handler::operator()|.','line_number':126,'multiline':False]
['text':' While there are pending nodes, visit them.','line_number':131,'multiline':False]
['text':' Get a range containing all origin's outgoing edges.','line_number':136,'multiline':False]
['text':' Traverse each edge.','line_number':142,'multiline':False]
['text':' Pass a pointer to a stack-allocated NodeData if the referent is not','line_number':150,'multiline':False]
['text':' in |visited|.','line_number':151,'multiline':False]
['text':' Report this edge to the visitor function.','line_number':156,'multiline':False]
['text':' This is the first time we've reached |edge.referent| and the','line_number':163,'multiline':False]
['text':' handler wants it marked as visited.','line_number':164,'multiline':False]
['text':' Arrange to traverse this edge's referent's outgoing edges','line_number':174,'multiline':False]
['text':' later --- unless |handler| asked us not to.','line_number':175,'multiline':False]
['text':' Skip the enqueue; reset flag for future iterations.','line_number':177,'multiline':False]
['text':' Stop traversal, and return true from |traverse| without visiting any','line_number':190,'multiline':False]
['text':' more nodes. Only |handler::operator()| should call this function; it','line_number':191,'multiline':False]
['text':' may do so to stop the traversal early, without returning false and','line_number':192,'multiline':False]
['text':' then making |traverse|'s caller disambiguate that result from a real','line_number':193,'multiline':False]
['text':' error.','line_number':194,'multiline':False]
['text':' Request that the current edge's referent's outgoing edges not be','line_number':197,'multiline':False]
['text':' traversed. This must be called the first time that referent is reached.','line_number':198,'multiline':False]
['text':' Other edges *to* that referent will still be traversed.','line_number':199,'multiline':False]
['text':' Request the the current edge's referent not be added to the |visited| set','line_number':202,'multiline':False]
['text':' if this is the first time we're visiting it.','line_number':203,'multiline':False]
['text':' The context with which we were constructed.','line_number':206,'multiline':False]
['text':' A map associating each node N that we have reached with a','line_number':209,'multiline':False]
['text':' Handler::NodeData, for |handler|'s use. This is public, so that','line_number':210,'multiline':False]
['text':' |handler| can access it to see the traversal thus far.','line_number':211,'multiline':False]
['text':' Our handler object.','line_number':217,'multiline':False]
['text':' A queue template. Appending and popping the front are constant time.','line_number':220,'multiline':False]
['text':' Wasted space is never more than some recent actual population plus the','line_number':221,'multiline':False]
['text':' current population.','line_number':222,'multiline':False]
['text':' A queue of nodes that we have reached, but whose outgoing edges we','line_number':249,'multiline':False]
['text':' have not yet traversed. Nodes reachable in fewer edges are enqueued','line_number':250,'multiline':False]
['text':' earlier.','line_number':251,'multiline':False]
['text':' True if our traverse function has been called.','line_number':254,'multiline':False]
['text':' True if we've been asked to stop the traversal.','line_number':257,'multiline':False]
['text':' True if we've been asked to abandon the current edge's referent.','line_number':260,'multiline':False]
['text':' True if the node should be added to the |visited| set after calling the','line_number':263,'multiline':False]
['text':' handler.','line_number':264,'multiline':False]
['text':' namespace ubi','line_number':268,'multiline':False]
['text':' namespace JS','line_number':269,'multiline':False]
['text':' js_UbiNodeBreadthFirst_h','line_number':271,'multiline':False]
