['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]
['text':'*
 * A back edge along a path in the heap graph.
 ','line_number':23,'multiline':True]
['text':'*
 * A path is a series of back edges from which we discovered a target node.
 ','line_number':67,'multiline':True]
['text':'*
 * The `JS::ubi::ShortestPaths` type represents a collection of up to N shortest
 * retaining paths for each of a target set of nodes, starting from the same
 * root node.
 ','line_number':72,'multiline':True]
['text':' Types, type aliases, and data members.','line_number':79,'multiline':False]
['text':'*
   * A `JS::ubi::BreadthFirst` traversal handler that records back edges for
   * how we reached each node, allowing us to reconstruct the shortest
   * retaining paths after the traversal.
   ','line_number':89,'multiline':True]
['text':' If `first` is true, then we moved the edge's name into `back` in','line_number':122,'multiline':False]
['text':' the above call to `init`. So clone that back edge to get the','line_number':123,'multiline':False]
['text':' correct edge name. If `first` is not true, then our edge name is','line_number':124,'multiline':False]
['text':' still in `edge`. This accounts for the asymmetry between','line_number':125,'multiline':False]
['text':' `back->clone()` in the first branch, and the `init` call in the','line_number':126,'multiline':False]
['text':' second branch.','line_number':127,'multiline':False]
['text':' The maximum number of paths to record for each node.','line_number':171,'multiline':False]
['text':' The root node we are starting the search from.','line_number':174,'multiline':False]
['text':' The set of nodes we are searching for paths to.','line_number':177,'multiline':False]
['text':' The resulting paths.','line_number':180,'multiline':False]
['text':' Need to keep alive the traversal's back edges so we can walk them later','line_number':183,'multiline':False]
['text':' when the traversal is over when recreating the shortest paths.','line_number':184,'multiline':False]
['text':' Private methods.','line_number':188,'multiline':False]
['text':' Public methods.','line_number':201,'multiline':False]
['text':'*
   * Construct a new `JS::ubi::ShortestPaths`, finding up to `maxNumPaths`
   * shortest retaining paths for each target node in `targets` starting from
   * `root`.
   *
   * The resulting `ShortestPaths` instance must not outlive the
   * `JS::ubi::Node` graph it was constructed from.
   *
   *   - For `JS::ubi::Node` graphs backed by the live heap graph, this means
   *     that the `ShortestPaths`'s lifetime _must_ be contained within the
   *     scope of the provided `AutoCheckCannotGC` reference because a GC will
   *     invalidate the nodes.
   *
   *   - For `JS::ubi::Node` graphs backed by some other offline structure
   *     provided by the embedder, the resulting `ShortestPaths`'s lifetime is
   *     bounded by that offline structure's lifetime.
   *
   * Returns `mozilla::Nothing()` on OOM failure. It is the caller's
   * responsibility to handle and report the OOM.
   ','line_number':221,'multiline':True]
['text':' Take ownership of the back edges we created while traversing the','line_number':258,'multiline':False]
['text':' graph so that we can follow them from `paths_` and don't','line_number':259,'multiline':False]
['text':' use-after-free.','line_number':260,'multiline':False]
['text':'*
   * Get an iterator over each target node we searched for retaining paths
   * for. The returned iterator must not outlive the `ShortestPaths`
   * instance.
   ','line_number':266,'multiline':True]
['text':'*
   * Invoke the provided functor/lambda/callable once for each retaining path
   * discovered for `target`. The `func` is passed a single `JS::ubi::Path&`
   * argument, which contains each edge along the path ordered starting from
   * the root and ending at the target, and must not outlive the scope of the
   * call.
   *
   * Note that it is possible that we did not find any paths from the root to
   * the given target, in which case `func` will not be invoked.
   ','line_number':273,'multiline':True]
['text':' We didn't find any paths to this target, so nothing to do here.','line_number':289,'multiline':False]
['text':' A helper function to dump the first `maxNumPaths` shortest retaining paths to','line_number':329,'multiline':False]
['text':' `node` from the GC roots. Useful when GC things you expect to have been','line_number':330,'multiline':False]
['text':' reclaimed by the collector haven't been!','line_number':331,'multiline':False]
['text':'','line_number':332,'multiline':False]
['text':' Usage:','line_number':333,'multiline':False]
['text':'','line_number':334,'multiline':False]
['text':'     JSObject* foo = ...;','line_number':335,'multiline':False]
['text':'     JS::ubi::dumpPaths(rt, JS::ubi::Node(foo));','line_number':336,'multiline':False]
['text':' namespace ubi','line_number':341,'multiline':False]
['text':' namespace JS','line_number':342,'multiline':False]
['text':' js_UbiNodeShortestPaths_h','line_number':344,'multiline':False]
