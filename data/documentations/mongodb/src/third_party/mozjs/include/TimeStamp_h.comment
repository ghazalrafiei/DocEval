['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- ','line_number':1,'multiline':True]
['text':' vim: set ts=8 sts=2 et sw=2 tw=80: ','line_number':2,'multiline':True]
['text':' This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':3,'multiline':True]
['text':' for std::min, std::max','line_number':11,'multiline':False]
['text':' namespace IPC','line_number':22,'multiline':False]
['text':' defines TimeStampValue as a complex value keeping both','line_number':25,'multiline':False]
['text':' GetTickCount and QueryPerformanceCounter values','line_number':26,'multiline':False]
['text':'*
 * Platform-specific implementation details of BaseTimeDuration.
 ','line_number':67,'multiline':True]
['text':'*
 * Instances of this class represent the length of an interval of time.
 * Negative durations are allowed, meaning the end is before the start.
 *
 * Internally the duration is stored as a int64_t in units of
 * PR_TicksPerSecond() when building with NSPR interval timers, or a
 * system-dependent unit when building with system clocks.  The
 * system-dependent unit must be constant, otherwise the semantics of
 * this class would be broken.
 *
 * The ValueCalculator template parameter determines how arithmetic
 * operations are performed on the integer count of ticks (mValue).
 ','line_number':78,'multiline':True]
['text':' The default duration is 0.','line_number':94,'multiline':False]
['text':' Allow construction using '0' as the initial value, for readability,','line_number':96,'multiline':False]
['text':' but no other numbers (so we don't have any implicit unit conversions).','line_number':97,'multiline':False]
['text':' Default copy-constructor and assignment are OK','line_number':102,'multiline':False]
['text':' Converting copy-constructor and assignment operator','line_number':104,'multiline':False]
['text':' Return a duration value that includes digits of time we think to','line_number':124,'multiline':False]
['text':' be significant.  This method should be used when displaying a','line_number':125,'multiline':False]
['text':' time to humans.','line_number':126,'multiline':False]
['text':' Using a double here is safe enough; with 53 bits we can represent','line_number':139,'multiline':False]
['text':' durations up to over 280,000 years exactly.  If the units of','line_number':140,'multiline':False]
['text':' mValue do not allow us to represent durations of that length,','line_number':141,'multiline':False]
['text':' long durations are clamped to the max/min representable value','line_number':142,'multiline':False]
['text':' instead of overflowing.','line_number':143,'multiline':False]
['text':' We don't just use FromTicks(ValueCalculator::Subtract(0, mValue))','line_number':178,'multiline':False]
['text':' since that won't give the correct result for -TimeDuration::Forever().','line_number':179,'multiline':False]
['text':' Block double multiplier (slower, imprecise if long duration) - Bug 853398.','line_number':202,'multiline':False]
['text':' If required, use MultDouble explicitly and with care.','line_number':203,'multiline':False]
['text':' Block double divisor (for the same reason, and because dividing by','line_number':206,'multiline':False]
['text':' fractional values would otherwise invoke the int64_t variant, and rounding','line_number':207,'multiline':False]
['text':' the passed argument can then cause divide-by-zero) - Bug 1147491.','line_number':208,'multiline':False]
['text':' Return a best guess at the system's current timing resolution,','line_number':275,'multiline':False]
['text':' which might be variable.  BaseTimeDurations below this order of','line_number':276,'multiline':False]
['text':' magnitude are meaningless, and those at the same order of','line_number':277,'multiline':False]
['text':' magnitude or just above are suspect.','line_number':278,'multiline':False]
['text':' We could define additional operators here:','line_number':283,'multiline':False]
['text':' -- convert to/from other time units','line_number':284,'multiline':False]
['text':' -- scale duration by a float','line_number':285,'multiline':False]
['text':' but let's do that on demand.','line_number':286,'multiline':False]
['text':' Comparing durations for equality will only lead to bugs on','line_number':287,'multiline':False]
['text':' platforms with high-resolution timers.','line_number':288,'multiline':False]
['text':' NOTE: this MUST be a >= test, because int64_t(double(INT64_MAX))','line_number':303,'multiline':False]
['text':' overflows and gives INT64_MIN.','line_number':304,'multiline':False]
['text':' This MUST be a <= test.','line_number':309,'multiline':False]
['text':' Duration, result is implementation-specific difference of two TimeStamps','line_number':317,'multiline':False]
['text':'*
 * Perform arithmetic operations on the value of a BaseTimeDuration without
 * doing strict checks on the range of values.
 ','line_number':321,'multiline':True]
['text':'*
 * Specialization of BaseTimeDuration that uses TimeDurationValueCalculator for
 * arithmetic on the mValue member.
 *
 * Use this class for time durations that are *not* expected to hold values of
 * Forever (or the negative equivalent) or when such time duration are *not*
 * expected to be used in arithmetic operations.
 ','line_number':351,'multiline':True]
['text':'*
 * Instances of this class represent moments in time, or a special
 * "null" moment. We do not use the non-monotonic system clock or
 * local time, since they can be reset, causing apparent backward
 * travel in time, which can confuse algorithms. Instead we measure
 * elapsed time according to the system.  This time can never go
 * backwards (i.e. it never wraps around, at least not in less than
 * five million years of system elapsed time). It might not advance
 * while the system is sleeping. If TimeStamp::SetNow() is not called
 * at all for hours or days, we might not notice the passage of some
 * of that time.
 *
 * We deliberately do not expose a way to convert TimeStamps to some
 * particular unit. All you can do is compute a difference between two
 * TimeStamps to get a TimeDuration. You can also add a TimeDuration
 * to a TimeStamp to get a new TimeStamp. You can't do something
 * meaningless like add two TimeStamps.
 *
 * Internally this is implemented as either a wrapper around
 *   - high-resolution, monotonic, system clocks if they exist on this
 *     platform
 *   - PRIntervalTime otherwise.  We detect wraparounds of
 *     PRIntervalTime and work around them.
 *
 * This class is similar to C++11's time_point, however it is
 * explicitly nullable and provides an IsNull() method. time_point
 * is initialized to the clock's epoch and provides a
 * time_since_epoch() method that functions similiarly. i.e.
 * t.IsNull() is equivalent to t.time_since_epoch() ==
 * decltype(t)::duration::zero();
 *
 * Note that, since TimeStamp objects are small, prefer to pass them by value
 * unless there is a specific reason not to do so.
 ','line_number':361,'multiline':True]
['text':'*
   * Initialize to the "null" moment
   ','line_number':397,'multiline':True]
['text':' Default copy-constructor and assignment are OK','line_number':401,'multiline':False]
['text':'*
   * The system timestamps are the same as the TimeStamp
   * retrieved by mozilla::TimeStamp. Since we need this for
   * vsync timestamps, we enable the creation of mozilla::TimeStamps
   * on platforms that support vsync aligned refresh drivers / compositors
   * Verified true as of Jan 31, 2015: B2G and OS X
   * False on Windows 7
   * Android's event time uses CLOCK_MONOTONIC via SystemClock.uptimeMilles.
   * So it is same value of TimeStamp posix implementation.
   * Wayland/GTK event time also uses CLOCK_MONOTONIC on Weston/Mutter
   * compositors.
   * UNTESTED ON OTHER PLATFORMS
   ','line_number':403,'multiline':True]
['text':'*
   * Return true if this is the "null" moment
   ','line_number':424,'multiline':True]
['text':'*
   * Return true if this is not the "null" moment, may be used in tests, e.g.:
   * |if (timestamp) { ... }|
   ','line_number':429,'multiline':True]
['text':'*
   * Return a timestamp reflecting the current elapsed system time. This
   * is monotonically increasing (i.e., does not decrease) over the
   * lifetime of this process' XPCOM session.
   *
   * Now() is trying to ensure the best possible precision on each platform,
   * at least one millisecond.
   *
   * NowLoRes() has been introduced to workaround performance problems of
   * QueryPerformanceCounter on the Windows platform.  NowLoRes() is giving
   * lower precision, usually 15.6 ms, but with very good performance benefit.
   * Use it for measurements of longer times, like >200ms timeouts.
   ','line_number':439,'multiline':True]
['text':'*
   * Return a timestamp representing the time when the current process was
   * created which will be comparable with other timestamps taken with this
   * class. If the actual process creation time is detected to be inconsistent
   * the @a aIsInconsistent parameter will be set to true, the returned
   * timestamp however will still be valid though inaccurate.
   *
   * @param aIsInconsistent If non-null, set to true if an inconsistency was
   * detected in the process creation time
   * @returns A timestamp representing the time when the process was created,
   * this timestamp is always valid even when errors are reported
   ','line_number':457,'multiline':True]
['text':'*
   * Records a process restart. After this call ProcessCreation() will return
   * the time when the browser was restarted instead of the actual time when
   * the process was created.
   ','line_number':471,'multiline':True]
['text':'*
   * Compute the difference between two timestamps. Both must be non-null.
   ','line_number':478,'multiline':True]
['text':' Check for overflow.','line_number':486,'multiline':False]
['text':' Check for underflow.','line_number':512,'multiline':False]
['text':' (We don't check for overflow because it's not obvious what the error','line_number':513,'multiline':False]
['text':'  behavior should be in that case.)','line_number':514,'multiline':False]
['text':' Check for underflow.','line_number':527,'multiline':False]
['text':' (We don't check for overflow because it's not obvious what the error','line_number':528,'multiline':False]
['text':'  behavior should be in that case.)','line_number':529,'multiline':False]
['text':' Comparing TimeStamps for equality should be discouraged. Adding','line_number':566,'multiline':False]
['text':' two TimeStamps, or scaling TimeStamps, is nonsense and must never','line_number':567,'multiline':False]
['text':' be allowed.','line_number':568,'multiline':False]
['text':'*
   * Computes the uptime of the current process in microseconds. The result
   * is platform-dependent and needs to be checked against existing timestamps
   * for consistency.
   *
   * @returns The number of microseconds since the calling process was started
   *          or 0 if an error was encountered while computing the uptime
   ','line_number':585,'multiline':True]
['text':'*
   * When built with PRIntervalTime, a value of 0 means this instance
   * is "null". Otherwise, the low 32 bits represent a PRIntervalTime,
   * and the high 32 bits represent a counter of the number of
   * rollovers of PRIntervalTime that we've seen. This counter starts
   * at 1 to avoid a real time colliding with the "null" value.
   *
   * PR_INTERVAL_MAX is set at 100,000 ticks per second. So the minimum
   * time to wrap around is about 2^64/100000 seconds, i.e. about
   * 5,849,424 years.
   *
   * When using a system clock, a value is system dependent.
   ','line_number':595,'multiline':True]
['text':' namespace mozilla','line_number':613,'multiline':False]
['text':' mozilla_TimeStamp_h ','line_number':615,'multiline':True]
