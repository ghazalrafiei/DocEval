['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- ','line_number':1,'multiline':True]
['text':' vim: set ts=8 sts=2 et sw=2 tw=80: ','line_number':2,'multiline':True]
['text':' This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':3,'multiline':True]
['text':' Implementations of runtime and static assertion macros for C and C++. ','line_number':7,'multiline':True]
['text':'
 * The crash reason set by MOZ_CRASH_ANNOTATE is consumed by the crash reporter
 * if present. It is declared here (and defined in Assertions.cpp) to make it
 * available to all code, even libraries that don't link with the crash reporter
 * directly.
 ','line_number':27,'multiline':True]
['text':' nothing ','line_number':44,'multiline':True]
['text':'
 * TerminateProcess and GetCurrentProcess are defined in <winbase.h>, which
 * further depends on <windef.h>.  We hardcode these few definitions manually
 * because those headers clutter the global namespace with a significant
 * number of undesired macros and symbols.
 ','line_number':52,'multiline':True]
['text':'
 * On Wasm/WASI platforms, we just call __builtin_trap().
 ','line_number':64,'multiline':True]
['text':'
 * Prints |aStr| as an assertion failure (using aFilename and aLine as the
 * location of the assertion) to the standard debug-output channel.
 *
 * Usually you should use MOZ_ASSERT or MOZ_CRASH instead of this method.  This
 * method is primarily for internal use in this header, and only secondarily
 * for use in implementing release-build assertions.
 ','line_number':83,'multiline':True]
['text':' aMaxFrames ','line_number':100,'multiline':True]
['text':' aMaxFrames ','line_number':105,'multiline':True]
['text':' aMaxFrames ','line_number':120,'multiline':True]
['text':'*
 * MOZ_REALLY_CRASH is used in the implementation of MOZ_CRASH().  You should
 * call MOZ_CRASH instead.
 ','line_number':126,'multiline':True]
['text':'
 * On MSVC use the __debugbreak compiler intrinsic, which produces an inline
 * (not nested in a system function) breakpoint.  This distinctively invokes
 * Breakpad without requiring system library symbols on all stack-processing
 * machines, as a nested breakpoint would require.
 *
 * We use __LINE__ to prevent the compiler from folding multiple crash sites
 * together, which would make crash reports hard to understand.
 *
 * We use TerminateProcess with the exit code aborting would generate
 * because we don't want to invoke atexit handlers, destructors, library
 * unload handlers, and so on when our process might be in a compromised
 * state.
 *
 * We don't use abort() because it'd cause Windows to annoyingly pop up the
 * process error dialog multiple times.  See bug 345118 and bug 426163.
 *
 * (Technically these are Windows requirements, not MSVC requirements.  But
 * practically you need MSVC for debugging, and we only ship builds created
 * by MSVC, so doing it this way reduces complexity.)
 ','line_number':131,'multiline':True]
['text':'
 * MOZ_CRASH_WRITE_ADDR is the address to be used when performing a forced
 * crash. NULL is preferred however if for some reason NULL cannot be used
 * this makes choosing another value possible.
 *
 * In the case of UBSan certain checks, bounds specifically, cause the compiler
 * to emit the 'ud2' instruction when storing to 0x0. This causes forced
 * crashes to manifest as ILL (at an arbitrary address) instead of the expected
 * SEGV at 0x0.
 ','line_number':171,'multiline':True]
['text':' NOLINT ','line_number':190,'multiline':True]
['text':' NOLINT ','line_number':196,'multiline':True]
['text':'
 * MOZ_CRASH([explanation-string]) crashes the program, plain and simple, in a
 * Breakpad-compatible way, in both debug and release builds.
 *
 * MOZ_CRASH is a good solution for "handling" failure cases when you're
 * unwilling or unable to handle them more cleanly -- for OOM, for likely memory
 * corruption, and so on.  It's also a good solution if you need safe behavior
 * in release builds as well as debug builds.  But if the failure is one that
 * should be debugged and fixed, MOZ_ASSERT is generally preferable.
 *
 * The optional explanation-string, if provided, must be a string literal
 * explaining why we're crashing.  This argument is intended for use with
 * MOZ_CRASH() calls whose rationale is non-obvious; don't use it if it's
 * obvious why we're crashing.
 *
 * If we're a DEBUG build and we crash at a MOZ_CRASH which provides an
 * explanation-string, we print the string to stderr.  Otherwise, we don't
 * print anything; this is because we want MOZ_CRASH to be 100% safe in release
 * builds, and it's hard to print to stderr safely when memory might have been
 * corrupted.
 ','line_number':202,'multiline':True]
['text':'
 * MOZ_CRASH_UNSAFE(explanation-string) can be used if the explanation string
 * cannot be a string literal (but no other processing needs to be done on it).
 * A regular MOZ_CRASH() is preferred wherever possible, as passing arbitrary
 * strings from a potentially compromised process is not without risk. If the
 * string being passed is the result of a printf-style function, consider using
 * MOZ_CRASH_UNSAFE_PRINTF instead.
 *
 * @note This macro causes data collection because crash strings are annotated
 * to crash-stats and are publicly visible. Firefox data stewards must do data
 * review on usages of this macro.
 ','line_number':238,'multiline':True]
['text':'
 * MOZ_CRASH_UNSAFE_PRINTF(format, arg1 [, args]) can be used when more
 * information is desired than a string literal can supply. The caller provides
 * a printf-style format string, which must be a string literal and between
 * 1 and 4 additional arguments. A regular MOZ_CRASH() is preferred wherever
 * possible, as passing arbitrary strings to printf from a potentially
 * compromised process is not without risk.
 *
 * @note This macro causes data collection because crash strings are annotated
 * to crash-stats and are publicly visible. Firefox data stewards must do data
 * review on usages of this macro.
 ','line_number':266,'multiline':True]
['text':'
 * MOZ_ASSERT(expr [, explanation-string]) asserts that |expr| must be truthy in
 * debug builds.  If it is, execution continues.  Otherwise, an error message
 * including the expression and the explanation-string (if provided) is printed,
 * an attempt is made to invoke any existing debugger, and execution halts.
 * MOZ_ASSERT is fatal: no recovery is possible.  Do not assert a condition
 * which can correctly be falsy.
 *
 * The optional explanation-string, if provided, must be a string literal
 * explaining the assertion.  It is intended for use with assertions whose
 * correctness or rationale is non-obvious, and for assertions where the "real"
 * condition being tested is best described prosaically.  Don't provide an
 * explanation if it's not actually helpful.
 *
 *   // No explanation needed: pointer arguments often must not be NULL.
 *   MOZ_ASSERT(arg);
 *
 *   // An explanation can be helpful to explain exactly how we know an
 *   // assertion is valid.
 *   MOZ_ASSERT(state == WAITING_FOR_RESPONSE,
 *              "given that <thingA> and <thingB>, we must have...");
 *
 *   // Or it might disambiguate multiple identical (save for their location)
 *   // assertions of the same expression.
 *   MOZ_ASSERT(getSlot(PRIMITIVE_THIS_SLOT).isUndefined(),
 *              "we already set [[PrimitiveThis]] for this Boolean object");
 *   MOZ_ASSERT(getSlot(PRIMITIVE_THIS_SLOT).isUndefined(),
 *              "we already set [[PrimitiveThis]] for this String object");
 *
 * MOZ_ASSERT has no effect in non-debug builds.  It is designed to catch bugs
 * *only* during debugging, not "in the field". If you want the latter, use
 * MOZ_RELEASE_ASSERT, which applies to non-debug builds as well.
 *
 * MOZ_DIAGNOSTIC_ASSERT works like MOZ_RELEASE_ASSERT in Nightly/Aurora and
 * MOZ_ASSERT in Beta/Release - use this when a condition is potentially rare
 * enough to require real user testing to hit, but is not security-sensitive.
 * This can cause user pain, so use it sparingly. If a MOZ_DIAGNOSTIC_ASSERT
 * is firing, it should promptly be converted to a MOZ_ASSERT while the failure
 * is being investigated, rather than letting users suffer.
 *
 * MOZ_DIAGNOSTIC_ASSERT_ENABLED is defined when MOZ_DIAGNOSTIC_ASSERT is like
 * MOZ_RELEASE_ASSERT rather than MOZ_ASSERT.
 ','line_number':292,'multiline':True]
['text':'
 * Implement MOZ_VALIDATE_ASSERT_CONDITION_TYPE, which is used to guard against
 * accidentally passing something unintended in lieu of an assertion condition.
 ','line_number':336,'multiline':True]
['text':' namespace detail','line_number':365,'multiline':False]
['text':' namespace mozilla','line_number':366,'multiline':False]
['text':' nothing ','line_number':380,'multiline':True]
['text':' First the single-argument form. ','line_number':384,'multiline':True]
['text':' Now the two-argument form. ','line_number':394,'multiline':True]
['text':' DEBUG ','line_number':421,'multiline':True]
['text':'
 * MOZ_ASSERT_IF(cond1, cond2) is equivalent to MOZ_ASSERT(cond2) if cond1 is
 * true.
 *
 *   MOZ_ASSERT_IF(isPrime(num), num == 2 || isOdd(num));
 *
 * As with MOZ_ASSERT, MOZ_ASSERT_IF has effect only in debug builds.  It is
 * designed to catch bugs during debugging, not "in the field".
 ','line_number':435,'multiline':True]
['text':'
 * MOZ_DIAGNOSTIC_ASSERT_IF is like MOZ_ASSERT_IF, but using
 * MOZ_DIAGNOSTIC_ASSERT as the underlying assert.
 *
 * See the block comment for MOZ_DIAGNOSTIC_ASSERT above for more details on how
 * diagnostic assertions work and how to use them.
 ','line_number':457,'multiline':True]
['text':'
 * MOZ_ASSUME_UNREACHABLE_MARKER() expands to an expression which states that
 * it is undefined behavior for execution to reach this point.  No guarantees
 * are made about what will happen if this is reached at runtime.  Most code
 * should use MOZ_MAKE_COMPILER_ASSUME_IS_UNREACHABLE because it has extra
 * asserts.
 ','line_number':477,'multiline':True]
['text':'
 * MOZ_MAKE_COMPILER_ASSUME_IS_UNREACHABLE([reason]) tells the compiler that it
 * can assume that the macro call cannot be reached during execution.  This lets
 * the compiler generate better-optimized code under some circumstances, at the
 * expense of the program's behavior being undefined if control reaches the
 * MOZ_MAKE_COMPILER_ASSUME_IS_UNREACHABLE.
 *
 * In Gecko, you probably should not use this macro outside of performance- or
 * size-critical code, because it's unsafe.  If you don't care about code size
 * or performance, you should probably use MOZ_ASSERT or MOZ_CRASH.
 *
 * SpiderMonkey is a different beast, and there it's acceptable to use
 * MOZ_MAKE_COMPILER_ASSUME_IS_UNREACHABLE more widely.
 *
 * Note that MOZ_MAKE_COMPILER_ASSUME_IS_UNREACHABLE is noreturn, so it's valid
 * not to return a value following a MOZ_MAKE_COMPILER_ASSUME_IS_UNREACHABLE
 * call.
 *
 * Example usage:
 *
 *   enum ValueType {
 *     VALUE_STRING,
 *     VALUE_INT,
 *     VALUE_FLOAT
 *   };
 *
 *   int ptrToInt(ValueType type, void* value) {
 *   {
 *     // We know for sure that type is either INT or FLOAT, and we want this
 *     // code to run as quickly as possible.
 *     switch (type) {
 *     case VALUE_INT:
 *       return *(int*) value;
 *     case VALUE_FLOAT:
 *       return (int) *(float*) value;
 *     default:
 *       MOZ_MAKE_COMPILER_ASSUME_IS_UNREACHABLE("Unexpected ValueType");
 *     }
 *   }
 ','line_number':496,'multiline':True]
['text':'
 * Unconditional assert in debug builds for (assumed) unreachable code paths
 * that have a safe return without crashing in release builds.
 ','line_number':537,'multiline':True]
['text':'*
 * MOZ_FALLTHROUGH_ASSERT is an annotation to suppress compiler warnings about
 * switch cases that MOZ_ASSERT(false) (or its alias MOZ_ASSERT_UNREACHABLE) in
 * debug builds, but intentionally fall through in release builds to handle
 * unexpected values.
 *
 * Why do we need MOZ_FALLTHROUGH_ASSERT in addition to [[fallthrough]]? In
 * release builds, the MOZ_ASSERT(false) will expand to `do { } while (false)`,
 * requiring a [[fallthrough]] annotation to suppress a -Wimplicit-fallthrough
 * warning. In debug builds, the MOZ_ASSERT(false) will expand to something like
 * `if (true) { MOZ_CRASH(); }` and the [[fallthrough]] annotation will cause
 * a -Wunreachable-code warning. The MOZ_FALLTHROUGH_ASSERT macro breaks this
 * warning stalemate.
 *
 * // Example before MOZ_FALLTHROUGH_ASSERT:
 * switch (foo) {
 *   default:
 *     // This case wants to assert in debug builds, fall through in release.
 *     MOZ_ASSERT(false); // -Wimplicit-fallthrough warning in release builds!
 *     [[fallthrough]];   // but -Wunreachable-code warning in debug builds!
 *   case 5:
 *     return 5;
 * }
 *
 * // Example with MOZ_FALLTHROUGH_ASSERT:
 * switch (foo) {
 *   default:
 *     // This case asserts in debug builds, falls through in release.
 *     MOZ_FALLTHROUGH_ASSERT("Unexpected foo value?!");
 *   case 5:
 *     return 5;
 * }
 ','line_number':550,'multiline':True]
['text':'
 * MOZ_ALWAYS_TRUE(expr) and friends always evaluate the provided expression,
 * in debug builds and in release builds both.  Then, in debug builds and
 * Nightly and DevEdition release builds, the value of the expression is
 * asserted either true or false using MOZ_DIAGNOSTIC_ASSERT.
 ','line_number':590,'multiline':True]
['text':' Silence [[nodiscard]]. ','line_number':599,'multiline':True]
['text':' mozilla_Assertions_h ','line_number':612,'multiline':True]
