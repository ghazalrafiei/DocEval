['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- ','line_number':1,'multiline':True]
['text':' vim: set ts=8 sts=2 et sw=2 tw=80: ','line_number':2,'multiline':True]
['text':' This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':3,'multiline':True]
['text':'
 * UTF-8-related functionality, including a type-safe structure representing a
 * UTF-8 code unit.
 ','line_number':7,'multiline':True]
['text':' for mozilla::AssertedCast','line_number':15,'multiline':False]
['text':' for MOZ_UNLIKELY','line_number':16,'multiline':False]
['text':' for mozilla::Maybe','line_number':17,'multiline':False]
['text':' for mozilla::Span','line_number':18,'multiline':False]
['text':' for mozilla::IsAscii and via Latin1.h for','line_number':19,'multiline':False]
['text':' encoding_rs_mem.h and MOZ_HAS_JSRUST.','line_number':20,'multiline':False]
['text':' for mozilla::Tuple','line_number':21,'multiline':False]
['text':' for MFBT_API','line_number':22,'multiline':False]
['text':' for CHAR_BIT / std::numeric_limits','line_number':24,'multiline':False]
['text':' for size_t','line_number':25,'multiline':False]
['text':' for uint8_t','line_number':26,'multiline':False]
['text':' Can't include mozilla/Encoding.h here.','line_number':29,'multiline':False]
['text':' Declared as uint8_t instead of char to match declaration in another header.','line_number':31,'multiline':False]
['text':' namespace detail','line_number':38,'multiline':False]
['text':' namespace mozilla','line_number':39,'multiline':False]
['text':' MOZ_HAS_JSRUST','line_number':40,'multiline':False]
['text':'*
 * A code unit within a UTF-8 encoded string.  (A code unit is the smallest
 * unit within the Unicode encoding of a string.  For UTF-8 this is an 8-bit
 * number; for UTF-16 it would be a 16-bit number.)
 *
 * This is *not* the same as a single code point: in UTF-8, non-ASCII code
 * points are constituted by multiple code units.
 ','line_number':49,'multiline':True]
['text':' Utf8Unit is a union wrapping a raw |char|.  The C++ object model and C++','line_number':59,'multiline':False]
['text':' requirements as to how objects may be accessed with respect to their actual','line_number':60,'multiline':False]
['text':' types (almost?) uniquely compel this choice.','line_number':61,'multiline':False]
['text':'','line_number':62,'multiline':False]
['text':' Our requirements for a UTF-8 code unit representation are:','line_number':63,'multiline':False]
['text':'','line_number':64,'multiline':False]
['text':'   1. It must be "compatible" with C++ character/string literals that use','line_number':65,'multiline':False]
['text':'      the UTF-8 encoding.  Given a properly encoded C++ literal, you should','line_number':66,'multiline':False]
['text':'      be able to use |Utf8Unit| and friends to access it; given |Utf8Unit|','line_number':67,'multiline':False]
['text':'      and friends (particularly UnicodeData), you should be able to access','line_number':68,'multiline':False]
['text':'      C++ character types for their contents.','line_number':69,'multiline':False]
['text':'   2. |Utf8Unit| and friends must convert to/from |char| and |char*| only by','line_number':70,'multiline':False]
['text':'      explicit operation.','line_number':71,'multiline':False]
['text':'   3. |Utf8Unit| must participate in overload resolution and template type','line_number':72,'multiline':False]
['text':'      equivalence (that is, given |template<class> class X|, when |X<T>| and','line_number':73,'multiline':False]
['text':'      |X<U>| are the same type) distinctly from the C++ character types.','line_number':74,'multiline':False]
['text':'','line_number':75,'multiline':False]
['text':' And a few nice-to-haves (at least for the moment):','line_number':76,'multiline':False]
['text':'','line_number':77,'multiline':False]
['text':'   4. The representation should use unsigned numbers, to avoid undefined','line_number':78,'multiline':False]
['text':'      behavior that can arise with signed types, and because Unicode code','line_number':79,'multiline':False]
['text':'      points and code units are unsigned.','line_number':80,'multiline':False]
['text':'   5. |Utf8Unit| and friends should be convertible to/from |unsigned char|','line_number':81,'multiline':False]
['text':'      and |unsigned char*|, for APIs that (because of #4 above) use those','line_number':82,'multiline':False]
['text':'      types as the "natural" choice for UTF-8 data.','line_number':83,'multiline':False]
['text':'','line_number':84,'multiline':False]
['text':' #1 requires that |Utf8Unit| "incorporate" a C++ character type: one of','line_number':85,'multiline':False]
['text':' |{,{un,}signed} char|.[0]  |uint8_t| won't work because it might not be a','line_number':86,'multiline':False]
['text':' C++ character type.','line_number':87,'multiline':False]
['text':'','line_number':88,'multiline':False]
['text':' #2 and #3 mean that |Utf8Unit| can't *be* such a type (or a typedef to one:','line_number':89,'multiline':False]
['text':' typedefs don't generate *new* types, just type aliases).  This requires a','line_number':90,'multiline':False]
['text':' compound type.','line_number':91,'multiline':False]
['text':'','line_number':92,'multiline':False]
['text':' The ultimate representation (and character type in it) is constrained by','line_number':93,'multiline':False]
['text':' C++14 [basic.lval]p10 that defines how objects may be accessed, with','line_number':94,'multiline':False]
['text':' respect to the dynamic type in memory and the actual type used to access','line_number':95,'multiline':False]
['text':' them.  It reads:','line_number':96,'multiline':False]
['text':'','line_number':97,'multiline':False]
['text':'     If a program attempts to access the stored value of an object','line_number':98,'multiline':False]
['text':'     through a glvalue of other than one of the following types the','line_number':99,'multiline':False]
['text':'     behavior is undefined:','line_number':100,'multiline':False]
['text':'','line_number':101,'multiline':False]
['text':'       1. the dynamic type of the object,','line_number':102,'multiline':False]
['text':'       2. a cv-qualified version of the dynamic type of the object,','line_number':103,'multiline':False]
['text':'       ...other types irrelevant here...','line_number':104,'multiline':False]
['text':'       3. an aggregate or union type that includes one of the','line_number':105,'multiline':False]
['text':'          aforementioned types among its elements or non-static data','line_number':106,'multiline':False]
['text':'          members (including, recursively, an element or non-static','line_number':107,'multiline':False]
['text':'          data member of a subaggregate or contained union),','line_number':108,'multiline':False]
['text':'       ...more irrelevant types...','line_number':109,'multiline':False]
['text':'       4. a char or unsigned char type.','line_number':110,'multiline':False]
['text':'','line_number':111,'multiline':False]
['text':' Accessing (wrapped) UTF-8 data as |char|/|unsigned char| is allowed no','line_number':112,'multiline':False]
['text':' matter the representation by #4.  (Briefly set aside what values are seen.)','line_number':113,'multiline':False]
['text':' (And #2 allows |const| on either the dynamic type or the accessing type.)','line_number':114,'multiline':False]
['text':' (|signed char| is really only useful for small signed numbers, not','line_number':115,'multiline':False]
['text':' characters, so we ignore it.)','line_number':116,'multiline':False]
['text':'','line_number':117,'multiline':False]
['text':' If we interpret contents as |char|/|unsigned char| contrary to the actual','line_number':118,'multiline':False]
['text':' type stored there, what happens?  C++14 [basic.fundamental]p1 requires','line_number':119,'multiline':False]
['text':' character types be identically aligned/sized; C++14 [basic.fundamental]p3','line_number':120,'multiline':False]
['text':' requires |signed char| and |unsigned char| have the same value','line_number':121,'multiline':False]
['text':' representation.  C++ doesn't require identical bitwise representation, tho.','line_number':122,'multiline':False]
['text':' Practically we could assume it, but this verges on C++ spec bits best not','line_number':123,'multiline':False]
['text':' *relied* on for correctness, if possible.','line_number':124,'multiline':False]
['text':'','line_number':125,'multiline':False]
['text':' So we don't expose |Utf8Unit|'s contents as |unsigned char*|: only |char|','line_number':126,'multiline':False]
['text':' and |char*|.  Instead we safely expose |unsigned char| by fully-defined','line_number':127,'multiline':False]
['text':' *integral conversion* (C++14 [conv.integral]p2).  Integral conversion from','line_number':128,'multiline':False]
['text':' |unsigned char| â†’ |char| has only implementation-defined behavior.  It'd be','line_number':129,'multiline':False]
['text':' better not to depend on that, but given twos-complement won, it should be','line_number':130,'multiline':False]
['text':' okay.  (Also |unsigned char*| is awkward enough to work with for strings','line_number':131,'multiline':False]
['text':' that it probably doesn't appear in string manipulation much anyway, only in','line_number':132,'multiline':False]
['text':' places that should really use |Utf8Unit| directly.)','line_number':133,'multiline':False]
['text':'','line_number':134,'multiline':False]
['text':' The opposite direction -- interpreting |char| or |char*| data through','line_number':135,'multiline':False]
['text':' |Utf8Unit| -- isn't tricky as long as |Utf8Unit| contains a |char| as','line_number':136,'multiline':False]
['text':' decided above, using #3.  An "aggregate or union" will work that contains a','line_number':137,'multiline':False]
['text':' |char|.  Oddly, an aggregate won't work: C++14 [dcl.init.aggr]p1 says','line_number':138,'multiline':False]
['text':' aggregates must have "no private or protected non-static data members", and','line_number':139,'multiline':False]
['text':' we want to keep the inner |char| hidden.  So a |struct| is out, and only','line_number':140,'multiline':False]
['text':' |union| remains.','line_number':141,'multiline':False]
['text':'','line_number':142,'multiline':False]
['text':' (Enums are not "an aggregate or union type", so [maybe surprisingly] we','line_number':143,'multiline':False]
['text':' can't make |Utf8Unit| an enum class with |char| underlying type, because we','line_number':144,'multiline':False]
['text':' are given no license to treat |char| memory as such an |enum|'s memory.)','line_number':145,'multiline':False]
['text':'','line_number':146,'multiline':False]
['text':' Therefore |Utf8Unit| is a union type with a |char| non-static data member.','line_number':147,'multiline':False]
['text':' This satisfies all our requirements.  It also supports the nice-to-haves of','line_number':148,'multiline':False]
['text':' creating a |Utf8Unit| from an |unsigned char|, and being convertible to','line_number':149,'multiline':False]
['text':' |unsigned char|.  It doesn't satisfy the nice-to-haves of using an','line_number':150,'multiline':False]
['text':' |unsigned char| internally, nor of letting us wrap an existing','line_number':151,'multiline':False]
['text':' |unsigned char| or pointer to one.  We probably *could* do these, if we','line_number':152,'multiline':False]
['text':' were willing to rely harder on implementation-defined behaviors, but for','line_number':153,'multiline':False]
['text':' now we privilege C++'s main character type over some conceptual purity.','line_number':154,'multiline':False]
['text':'','line_number':155,'multiline':False]
['text':' 0. There's a proposal for a UTF-8 character type distinct from the existing','line_number':156,'multiline':False]
['text':'    C++ narrow character types:','line_number':157,'multiline':False]
['text':'','line_number':158,'multiline':False]
['text':'      http://open-std.org/JTC1/SC22/WG21/docs/papers/2016/p0482r0.html','line_number':159,'multiline':False]
['text':'','line_number':160,'multiline':False]
['text':'    but it hasn't been standardized (and might never be), and none of the','line_number':161,'multiline':False]
['text':'    compilers we really care about have implemented it.  Maybe someday we','line_number':162,'multiline':False]
['text':'    can change our implementation to it without too much trouble, if we're','line_number':163,'multiline':False]
['text':'    lucky...','line_number':164,'multiline':False]
['text':' Per the above comment, the prior cast is integral conversion with','line_number':181,'multiline':False]
['text':' implementation-defined semantics, and we regretfully but unavoidably','line_number':182,'multiline':False]
['text':' assume the conversion does what we want it to.','line_number':183,'multiline':False]
['text':'* Convert a UTF-8 code unit to a raw char. ','line_number':194,'multiline':True]
['text':' Only a |char| is ever permitted to be written into this location, so this','line_number':196,'multiline':False]
['text':' is both permissible and returns the desired value.','line_number':197,'multiline':False]
['text':'* Convert a UTF-8 code unit to a raw unsigned char. ','line_number':201,'multiline':True]
['text':' Per the above comment, this is well-defined integral conversion.','line_number':203,'multiline':False]
['text':'* Convert a UTF-8 code unit to a uint8_t. ','line_number':207,'multiline':True]
['text':' Per the above comment, this is well-defined integral conversion.','line_number':209,'multiline':False]
['text':' We currently don't expose |&mValue|.  |UnicodeData| sort of does, but','line_number':213,'multiline':False]
['text':' that's a somewhat separate concern, justified in different comments in','line_number':214,'multiline':False]
['text':' that other code.','line_number':215,'multiline':False]
['text':'*
 * Reinterpret the address of a UTF-8 code unit as |const unsigned char*|.
 *
 * Assuming proper backing has been set up, the resulting |const unsigned char*|
 * may validly be dereferenced.
 *
 * No access is provided to mutate this underlying memory as |unsigned char|.
 * Presently memory inside |Utf8Unit| is *only* stored as |char|, and we are
 * loath to offer a way to write non-|char| data until absolutely necessary.
 ','line_number':218,'multiline':True]
['text':' The static_asserts above only enable the reinterpret_cast<> to occur.','line_number':234,'multiline':False]
['text':'','line_number':235,'multiline':False]
['text':' Dereferencing the resulting pointer is a separate question.  Any object's','line_number':236,'multiline':False]
['text':' memory may be interpreted as |unsigned char| per C++11 [basic.lval]p10, but','line_number':237,'multiline':False]
['text':' this doesn't guarantee what values will be observed.  If |char| is','line_number':238,'multiline':False]
['text':' implemented to act like |unsigned char|, we're good to go: memory for the','line_number':239,'multiline':False]
['text':' |char| in |Utf8Unit| acts as we need.  But if |char| is implemented to act','line_number':240,'multiline':False]
['text':' like |signed char|, dereferencing produces the right value only if the','line_number':241,'multiline':False]
['text':' |char| types all use two's-complement representation.  Every modern','line_number':242,'multiline':False]
['text':' compiler does this, and there's a C++ proposal to standardize it.','line_number':243,'multiline':False]
['text':' http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0907r0.html   So','line_number':244,'multiline':False]
['text':' *technically* this is implementation-defined -- but everyone does it and','line_number':245,'multiline':False]
['text':' this behavior is being standardized.','line_number':246,'multiline':False]
['text':'* Returns true iff |aUnit| is an ASCII value. ','line_number':250,'multiline':True]
['text':'*
 * Return true if the given span of memory consists of a valid UTF-8
 * string and false otherwise.
 *
 * The string *may* contain U+0000 NULL code points.
 ','line_number':255,'multiline':True]
['text':' For short strings, the function call is a pessimization, and the SIMD','line_number':264,'multiline':False]
['text':' code won't have a chance to kick in anyway.','line_number':265,'multiline':False]
['text':' namespace detail','line_number':282,'multiline':False]
['text':' See Latin1.h for conversions between Latin1 and UTF-8.','line_number':300,'multiline':False]
['text':'*
 * Returns the index of the start of the first malformed byte
 * sequence or the length of the string if there are none.
 ','line_number':302,'multiline':True]
['text':'*
 * Converts potentially-invalid UTF-16 to UTF-8 replacing lone surrogates
 * with the REPLACEMENT CHARACTER.
 *
 * The length of aDest must be at least the length of aSource times three.
 *
 * Returns the number of code units written.
 ','line_number':311,'multiline':True]
['text':'*
 * Converts potentially-invalid UTF-8 to UTF-16 replacing malformed byte
 * sequences with the REPLACEMENT CHARACTER with potentially insufficient
 * output space.
 *
 * Returns the number of code units read and the number of bytes written.
 *
 * If the output isn't large enough, not all input is consumed.
 *
 * The conversion is guaranteed to be complete if the length of aDest is
 * at least the length of aSource times three.
 *
 * The output is always valid UTF-8 ending on scalar value boundary
 * even in the case of partial conversion.
 *
 * The semantics of this function match the semantics of
 * TextEncoder.encodeInto.
 * https://encoding.spec.whatwg.org/#dom-textencoder-encodeinto
 ','line_number':325,'multiline':True]
['text':'*
 * Converts potentially-invalid UTF-8 to UTF-16 replacing malformed byte
 * sequences with the REPLACEMENT CHARACTER.
 *
 * Returns the number of code units written.
 *
 * The length of aDest must be at least one greater than the length of aSource
 * even though the last slot isn't written to.
 *
 * If you know that the input is valid for sure, use
 * UnsafeConvertValidUtf8toUtf16() instead.
 ','line_number':353,'multiline':True]
['text':'*
 * Converts known-valid UTF-8 to UTF-16. If the input might be invalid,
 * use ConvertUtf8toUtf16() or ConvertUtf8toUtf16WithoutReplacement() instead.
 *
 * Returns the number of code units written.
 *
 * The length of aDest must be at least the length of aSource.
 ','line_number':371,'multiline':True]
['text':'*
 * Converts potentially-invalid UTF-8 to valid UTF-16 signaling on error.
 *
 * Returns the number of code units written or `mozilla::Nothing` if the
 * input was invalid.
 *
 * The length of the destination buffer must be at least the length of the
 * source buffer.
 *
 * When the input was invalid, some output may have been written.
 *
 * If you know that the input is valid for sure, use
 * UnsafeConvertValidUtf8toUtf16() instead.
 ','line_number':385,'multiline':True]
['text':' The code below is implemented based on the equivalent specification in','line_number':409,'multiline':False]
['text':' `encoding_rs`.','line_number':410,'multiline':False]
['text':' See Latin1.h for conversions between Latin1 and UTF-8.','line_number':412,'multiline':False]
['text':'*
 * Returns the index of the start of the first malformed byte
 * sequence or the length of the string if there are none.
 ','line_number':414,'multiline':True]
['text':'*
 * Converts potentially-invalid UTF-16 to UTF-8 replacing malformed byte
 * sequences with the REPLACEMENT CHARACTER with potentially insufficient
 * output space.
 *
 * Returns the number of code units read and the number of bytes written.
 *
 * If the output isn't large enough, not all input is consumed.
 *
 * The conversion is guaranteed to be complete if the length of aDest is
 * at least the length of aSource times three.
 *
 * The output is always valid UTF-8 ending on scalar value boundary
 * even in the case of partial conversion.
 *
 * The semantics of this function match the semantics of
 * TextEncoder.encodeInto.
 * https://encoding.spec.whatwg.org/#dom-textencoder-encodeinto
 ','line_number':426,'multiline':True]
['text':'*
 * Converts potentially-invalid UTF-16 to UTF-8 replacing lone surrogates
 * with the REPLACEMENT CHARACTER.
 *
 * The length of aDest must be at least the length of aSource times three.
 *
 * Returns the number of code units written.
 ','line_number':448,'multiline':True]
['text':'*
 * Converts potentially-invalid UTF-8 to UTF-16 replacing malformed byte
 * sequences with the REPLACEMENT CHARACTER.
 *
 * Returns the number of code units written.
 *
 * The length of aDest must be at least one greater than the length of aSource
 * even though the last slot isn't written to.
 *
 * If you know that the input is valid for sure, use
 * UnsafeConvertValidUtf8toUtf16() instead.
 ','line_number':459,'multiline':True]
['text':'*
 * Converts known-valid UTF-8 to UTF-16. If the input might be invalid,
 * use ConvertUtf8toUtf16() or ConvertUtf8toUtf16WithoutReplacement() instead.
 *
 * Returns the number of code units written.
 *
 * The length of aDest must be at least the length of aSource.
 ','line_number':474,'multiline':True]
['text':'*
 * Converts potentially-invalid UTF-8 to valid UTF-16 signaling on error.
 *
 * Returns the number of code units written or `mozilla::Nothing` if the
 * input was invalid.
 *
 * The length of the destination buffer must be at least the length of the
 * source buffer.
 *
 * When the input was invalid, some output may have been written.
 *
 * If you know that the input is valid for sure, use
 * UnsafeConvertValidUtf8toUtf16() instead.
 ','line_number':485,'multiline':True]
['text':' MOZ_HAS_JSRUST','line_number':508,'multiline':False]
['text':'*
 * Returns true iff |aUnit| is a UTF-8 trailing code unit matching the pattern
 * 0b10xx'xxxx.
 ','line_number':510,'multiline':True]
['text':'*
 * Given |aLeadUnit| that is a non-ASCII code unit, a pointer to an |Iter aIter|
 * that (initially) itself points one unit past |aLeadUnit|, and
 * |const EndIter& aEnd| that denotes the end of the UTF-8 data when compared
 * against |*aIter| using |aEnd - *aIter|:
 *
 * If |aLeadUnit| and subsequent code units computed using |*aIter| (up to
 * |aEnd|) encode a valid code point -- not exceeding Unicode's range, not a
 * surrogate, in shortest form -- then return Some(that code point) and advance
 * |*aIter| past those code units.
 *
 * Otherwise decrement |*aIter| (so that it points at |aLeadUnit|) and return
 * Nothing().
 *
 * |Iter| and |EndIter| are generalized concepts most easily understood as if
 * they were |const char*|, |const unsigned char*|, or |const Utf8Unit*|:
 * iterators that when dereferenced can be used to construct a |Utf8Unit| and
 * that can be compared and modified in certain limited ways.  (Carefully note
 * that this function mutates |*aIter|.)  |Iter| and |EndIter| are template
 * parameters to support more-complicated adaptor iterators.
 *
 * The template parameters after |Iter| allow users to implement custom handling
 * for various forms of invalid UTF-8.  A version of this function that defaults
 * all such handling to no-ops is defined below this function.  To learn how to
 * define your own custom handling, consult the implementation of that function,
 * which documents exactly how custom handler functors are invoked.
 *
 * This function is MOZ_ALWAYS_INLINE: if you don't need that, use the version
 * of this function without the "Inline" suffix on the name.
 ','line_number':518,'multiline':True]
['text':' |aLeadUnit| determines the number of trailing code units in the code point','line_number':561,'multiline':False]
['text':' and the bits of |aLeadUnit| that contribute to the code point's value.','line_number':562,'multiline':False]
['text':' If the code point would require more code units than remain, the encoding','line_number':583,'multiline':False]
['text':' is invalid.','line_number':584,'multiline':False]
['text':' Every non-leading code unit in properly encoded UTF-8 has its high','line_number':595,'multiline':False]
['text':' bit set and the next-highest bit unset.','line_number':596,'multiline':False]
['text':' The code point being encoded is the concatenation of all the','line_number':604,'multiline':False]
['text':' unconstrained bits.','line_number':605,'multiline':False]
['text':' UTF-16 surrogates and values outside the Unicode range are invalid.','line_number':609,'multiline':False]
['text':' Overlong code points are also invalid.','line_number':617,'multiline':False]
['text':'*
 * Identical to the above function, but not forced to be instantiated inline --
 * the compiler is permitted to common up separate invocations if it chooses.
 ','line_number':628,'multiline':True]
['text':'*
 * Like the always-inlined function above, but with no-op behavior from all
 * trailing if-invalid notifier functors.
 *
 * This function is MOZ_ALWAYS_INLINE: if you don't need that, use the version
 * of this function without the "Inline" suffix on the name.
 ','line_number':645,'multiline':True]
['text':' aOnBadLeadUnit is called when |aLeadUnit| itself is an invalid lead unit in','line_number':655,'multiline':False]
['text':' a multi-unit code point.  It is passed no arguments: the caller already has','line_number':656,'multiline':False]
['text':' |aLeadUnit| on hand, so no need to provide it again.','line_number':657,'multiline':False]
['text':' aOnNotEnoughUnits is called when |aLeadUnit| properly indicates a code','line_number':660,'multiline':False]
['text':' point length, but there aren't enough units from |*aIter| to |aEnd| to','line_number':661,'multiline':False]
['text':' satisfy that length.  It is passed the number of code units actually','line_number':662,'multiline':False]
['text':' available (according to |aEnd - *aIter|) and the number of code units that','line_number':663,'multiline':False]
['text':' |aLeadUnit| indicates are needed.  Both numbers include the contribution','line_number':664,'multiline':False]
['text':' of |aLeadUnit| itself: so |aUnitsAvailable <= 3|, |aUnitsNeeded <= 4|, and','line_number':665,'multiline':False]
['text':' |aUnitsAvailable < aUnitsNeeded|.  As above, it also is not passed the lead','line_number':666,'multiline':False]
['text':' code unit.','line_number':667,'multiline':False]
['text':' aOnBadTrailingUnit is called when one of the trailing code units implied by','line_number':670,'multiline':False]
['text':' |aLeadUnit| doesn't match the 0b10xx'xxxx bit pattern that all UTF-8','line_number':671,'multiline':False]
['text':' trailing code units must satisfy.  It is passed the total count of units','line_number':672,'multiline':False]
['text':' observed (including |aLeadUnit|).  The bad trailing code unit will','line_number':673,'multiline':False]
['text':' conceptually be at |(*aIter)[aUnitsObserved - 1]| if this functor is','line_number':674,'multiline':False]
['text':' called, and so |aUnitsObserved <= 4|.','line_number':675,'multiline':False]
['text':' aOnBadCodePoint is called when a structurally-correct code point encoding','line_number':678,'multiline':False]
['text':' is found, but the *value* that is encoded is not a valid code point: either','line_number':679,'multiline':False]
['text':' because it exceeded the U+10FFFF Unicode maximum code point, or because it','line_number':680,'multiline':False]
['text':' was a UTF-16 surrogate.  It is passed the non-code point value and the','line_number':681,'multiline':False]
['text':' number of code units used to encode it.','line_number':682,'multiline':False]
['text':' aOnNotShortestForm is called when structurally-correct encoding is found,','line_number':685,'multiline':False]
['text':' but the encoded value should have been encoded in fewer code units (e.g.','line_number':686,'multiline':False]
['text':' mis-encoding U+0000 as 0b1100'0000 0b1000'0000 in two code units instead of','line_number':687,'multiline':False]
['text':' as 0b0000'0000).  It is passed the mis-encoded code point (which will be','line_number':688,'multiline':False]
['text':' valid and not a surrogate) and the count of code units that mis-encoded it.','line_number':689,'multiline':False]
['text':'*
 * Identical to the above function, but not forced to be instantiated inline --
 * the compiler/linker are allowed to common up separate invocations.
 ','line_number':698,'multiline':True]
['text':' namespace mozilla','line_number':709,'multiline':False]
['text':' mozilla_Utf8_h ','line_number':711,'multiline':True]
