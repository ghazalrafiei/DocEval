['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- ','line_number':1,'multiline':True]
['text':' vim: set ts=8 sts=2 et sw=2 tw=80: ','line_number':2,'multiline':True]
['text':' This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':3,'multiline':True]
['text':' defined(_M_IX86)','line_number':40,'multiline':False]
['text':' Since the function doesn't exist, there is no point in holding a','line_number':59,'multiline':False]
['text':' reference to mModule anymore.','line_number':60,'multiline':False]
['text':' namespace detail','line_number':87,'multiline':False]
['text':'*
 * In most cases, this class is the one that you want to use for resolving a
 * dynamically-linked function pointer. It should be instantiated as a static
 * local variable.
 *
 * NB: It has a trivial destructor, so the DLL that is loaded is never freed.
 * Assuming that this function is called fairly often, this is the most
 * sensible option. OTOH, if the function you are calling is a one-off, or the
 * static local requirement is too restrictive, use DynamicallyLinkedFunctionPtr
 * instead.
 ','line_number':89,'multiline':True]
['text':'*
   * We only offer this operator for the static local case, as it is not
   * possible for this object to be destroyed while the returned pointer is
   * being held.
   ','line_number':108,'multiline':True]
['text':' namespace mozilla','line_number':135,'multiline':False]
['text':' mozilla_DynamicallyLinkedFunctionPtr_h','line_number':137,'multiline':False]
