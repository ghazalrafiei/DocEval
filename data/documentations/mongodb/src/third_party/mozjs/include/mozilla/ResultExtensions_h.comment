['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]
['text':' Extensions to the Result type to enable simpler handling of XPCOM/NSPR
 * results. ','line_number':7,'multiline':True]
['text':' Allow nsresult errors to automatically convert to nsresult values, so MOZ_TRY','line_number':21,'multiline':False]
['text':' can be used in XPCOM methods with Result<T, nserror> results.','line_number':22,'multiline':False]
['text':' Allow MOZ_TRY to handle `PRStatus` values.','line_number':41,'multiline':False]
['text':' namespace mozilla','line_number':44,'multiline':False]
['text':' XXX Thereotically, if R is a pointer to a non-refcounted type, this might','line_number':74,'multiline':False]
['text':' be a non-owning pointer, but unless we find a case where this actually is','line_number':75,'multiline':False]
['text':' relevant, it's safe to forbid any raw pointer result.','line_number':76,'multiline':False]
['text':' There are two ToResultInvokeSelector overloads, which cover the cases of a) a','line_number':115,'multiline':False]
['text':' pointer-typed output parameter, and b) a reference-typed output parameter,','line_number':116,'multiline':False]
['text':' using to_result_retval_t in connection with outparam_as_pointer and','line_number':117,'multiline':False]
['text':' outparam_as_reference type traits. These type traits may be specialized for','line_number':118,'multiline':False]
['text':' types other than raw pointers to allow calling functions with argument types','line_number':119,'multiline':False]
['text':' that implicitly convert/bind to a raw pointer/reference. The overload that is','line_number':120,'multiline':False]
['text':' used is selected by expression SFINAE: the decltype expression in','line_number':121,'multiline':False]
['text':' to_result_retval_t is only valid in either case.','line_number':122,'multiline':False]
['text':' namespace detail','line_number':139,'multiline':False]
['text':'*
 * Adapts a function with a nsresult error type and an R* output parameter as
 * the last parameter to a function returning a mozilla::Result<R, nsresult>
 * object.
 *
 * This can also be used with member functions together with std::men_fn, e.g.
 *
 *    nsCOMPtr<nsIFile> file = ...;
 *    auto existsOrErr = ToResultInvoke<bool>(std::mem_fn(&nsIFile::Exists),
 *                                            *file);
 *
 * but it is more convenient to use the member function overload, which
 * has the additional benefit of enabling the deduction of the success result
 * type:
 *
 *    nsCOMPtr<nsIFile> file = ...;
 *    auto existsOrErr = ToResultInvoke(*file, &nsIFile::Exists);
 ','line_number':141,'multiline':True]
['text':' No output parameter present, return a Result<Ok, nsresult>','line_number':196,'multiline':False]
['text':' For use in MOZ_TO_RESULT_INVOKE.','line_number':201,'multiline':False]
['text':' namespace detail','line_number':215,'multiline':False]
['text':' Macro version of ToResultInvoke for member functions. The macro has the','line_number':313,'multiline':False]
['text':' advantage of not requiring spelling out the member function's declarator type','line_number':314,'multiline':False]
['text':' name, at the expense of having a non-standard syntax. It can be used like','line_number':315,'multiline':False]
['text':' this:','line_number':316,'multiline':False]
['text':'','line_number':317,'multiline':False]
['text':'     nsCOMPtr<nsIFile> file;','line_number':318,'multiline':False]
['text':'     auto existsOrErr = MOZ_TO_RESULT_INVOKE(file, Exists);','line_number':319,'multiline':False]
['text':' Macro version of ToResultInvoke for member functions, where the result type','line_number':325,'multiline':False]
['text':' does not match the output parameter type. The macro has the advantage of not','line_number':326,'multiline':False]
['text':' requiring spelling out the member function's declarator type name, at the','line_number':327,'multiline':False]
['text':' expense of having a non-standard syntax. It can be used like this:','line_number':328,'multiline':False]
['text':'','line_number':329,'multiline':False]
['text':'     nsCOMPtr<nsIFile> file;','line_number':330,'multiline':False]
['text':'     auto existsOrErr = MOZ_TO_RESULT_INVOKE(nsCOMPtr<nsIFile>, file, Clone);','line_number':331,'multiline':False]
['text':' namespace mozilla','line_number':338,'multiline':False]
['text':' mozilla_ResultExtensions_h','line_number':340,'multiline':False]
