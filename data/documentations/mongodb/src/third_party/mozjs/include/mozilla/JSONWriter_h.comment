['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- ','line_number':1,'multiline':True]
['text':' vim: set ts=8 sts=2 et sw=2 tw=80: ','line_number':2,'multiline':True]
['text':' This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':3,'multiline':True]
['text':' A JSON pretty-printer class. ','line_number':7,'multiline':True]
['text':' A typical JSON-writing library requires you to first build up a data','line_number':9,'multiline':False]
['text':' structure that represents a JSON object and then serialize it (to file, or','line_number':10,'multiline':False]
['text':' somewhere else). This approach makes for a clean API, but building the data','line_number':11,'multiline':False]
['text':' structure takes up memory. Sometimes that isn't desirable, such as when the','line_number':12,'multiline':False]
['text':' JSON data is produced for memory reporting.','line_number':13,'multiline':False]
['text':'','line_number':14,'multiline':False]
['text':' The JSONWriter class instead allows JSON data to be written out','line_number':15,'multiline':False]
['text':' incrementally without building up large data structures.','line_number':16,'multiline':False]
['text':'','line_number':17,'multiline':False]
['text':' The API is slightly uglier than you would see in a typical JSON-writing','line_number':18,'multiline':False]
['text':' library, but still fairly easy to use. It's possible to generate invalid','line_number':19,'multiline':False]
['text':' JSON with JSONWriter, but typically the most basic testing will identify any','line_number':20,'multiline':False]
['text':' such problems.','line_number':21,'multiline':False]
['text':'','line_number':22,'multiline':False]
['text':' Similarly, there are no RAII facilities for automatically closing objects','line_number':23,'multiline':False]
['text':' and arrays. These would be nice if you are generating all your code within','line_number':24,'multiline':False]
['text':' nested functions, but in other cases you'd have to maintain an explicit','line_number':25,'multiline':False]
['text':' stack of RAII objects and manually unwind it, which is no better than just','line_number':26,'multiline':False]
['text':' calling "end" functions. Furthermore, the consequences of forgetting to','line_number':27,'multiline':False]
['text':' close an object or array are obvious and, again, will be identified via','line_number':28,'multiline':False]
['text':' basic testing, unlike other cases where RAII is typically used (e.g. smart','line_number':29,'multiline':False]
['text':' pointers) and the consequences of defects are more subtle.','line_number':30,'multiline':False]
['text':'','line_number':31,'multiline':False]
['text':' Importantly, the class does solve the two hard problems of JSON','line_number':32,'multiline':False]
['text':' pretty-printing, which are (a) correctly escaping strings, and (b) adding','line_number':33,'multiline':False]
['text':' appropriate indentation and commas between items.','line_number':34,'multiline':False]
['text':'','line_number':35,'multiline':False]
['text':' By default, every property is placed on its own line. However, it is','line_number':36,'multiline':False]
['text':' possible to request that objects and arrays be placed entirely on a single','line_number':37,'multiline':False]
['text':' line, which can reduce output size significantly in some cases.','line_number':38,'multiline':False]
['text':'','line_number':39,'multiline':False]
['text':' Strings used (for property names and string property values) are |const','line_number':40,'multiline':False]
['text':' char*| throughout, and can be ASCII or UTF-8.','line_number':41,'multiline':False]
['text':'','line_number':42,'multiline':False]
['text':' EXAMPLE','line_number':43,'multiline':False]
['text':' -------','line_number':44,'multiline':False]
['text':' Assume that |MyWriteFunc| is a class that implements |JSONWriteFunc|. The','line_number':45,'multiline':False]
['text':' following code:','line_number':46,'multiline':False]
['text':'','line_number':47,'multiline':False]
['text':'   JSONWriter w(MakeUnique<MyWriteFunc>());','line_number':48,'multiline':False]
['text':'   w.Start();','line_number':49,'multiline':False]
['text':'   {','line_number':50,'multiline':False]
['text':'     w.NullProperty("null");','line_number':51,'multiline':False]
['text':'     w.BoolProperty("bool", true);','line_number':52,'multiline':False]
['text':'     w.IntProperty("int", 1);','line_number':53,'multiline':False]
['text':'     w.StartArrayProperty("array");','line_number':54,'multiline':False]
['text':'     {','line_number':55,'multiline':False]
['text':'       w.StringElement("string");','line_number':56,'multiline':False]
['text':'       w.StartObjectElement();','line_number':57,'multiline':False]
['text':'       {','line_number':58,'multiline':False]
['text':'         w.DoubleProperty("double", 3.4);','line_number':59,'multiline':False]
['text':'         w.StartArrayProperty("single-line array", w.SingleLineStyle);','line_number':60,'multiline':False]
['text':'         {','line_number':61,'multiline':False]
['text':'           w.IntElement(1);','line_number':62,'multiline':False]
['text':'           w.StartObjectElement();  // SingleLineStyle is inherited from','line_number':63,'multiline':False]
['text':'           w.EndObjectElement();    //   above for this collection','line_number':64,'multiline':False]
['text':'         }','line_number':65,'multiline':False]
['text':'         w.EndArray();','line_number':66,'multiline':False]
['text':'       }','line_number':67,'multiline':False]
['text':'       w.EndObjectElement();','line_number':68,'multiline':False]
['text':'     }','line_number':69,'multiline':False]
['text':'     w.EndArrayProperty();','line_number':70,'multiline':False]
['text':'   }','line_number':71,'multiline':False]
['text':'   w.End();','line_number':72,'multiline':False]
['text':'','line_number':73,'multiline':False]
['text':' will produce pretty-printed output for the following JSON object:','line_number':74,'multiline':False]
['text':'','line_number':75,'multiline':False]
['text':'  {','line_number':76,'multiline':False]
['text':'   "null": null,','line_number':77,'multiline':False]
['text':'   "bool": true,','line_number':78,'multiline':False]
['text':'   "int": 1,','line_number':79,'multiline':False]
['text':'   "array": [','line_number':80,'multiline':False]
['text':'    "string",','line_number':81,'multiline':False]
['text':'    {','line_number':82,'multiline':False]
['text':'     "double": 3.4,','line_number':83,'multiline':False]
['text':'     "single-line array": [1, {}]','line_number':84,'multiline':False]
['text':'    }','line_number':85,'multiline':False]
['text':'   ]','line_number':86,'multiline':False]
['text':'  }','line_number':87,'multiline':False]
['text':'','line_number':88,'multiline':False]
['text':' The nesting in the example code is obviously optional, but can aid','line_number':89,'multiline':False]
['text':' readability.','line_number':90,'multiline':False]
['text':' A quasi-functor for JSONWriter. We don't use a true functor because that','line_number':108,'multiline':False]
['text':' requires templatizing JSONWriter, and the templatization seeps to lots of','line_number':109,'multiline':False]
['text':' places we don't want it to.','line_number':110,'multiline':False]
['text':' Ideally this would be within |EscapedString| but when compiling with GCC','line_number':117,'multiline':False]
['text':' on Linux that caused link errors, whereas this formulation didn't.','line_number':118,'multiline':False]
['text':' namespace detail','line_number':121,'multiline':False]
['text':' From http://www.ietf.org/rfc/rfc4627.txt:','line_number':124,'multiline':False]
['text':'','line_number':125,'multiline':False]
['text':'   "All Unicode characters may be placed within the quotation marks except','line_number':126,'multiline':False]
['text':'   for the characters that must be escaped: quotation mark, reverse','line_number':127,'multiline':False]
['text':'   solidus, and the control characters (U+0000 through U+001F)."','line_number':128,'multiline':False]
['text':'','line_number':129,'multiline':False]
['text':' This implementation uses two-char escape sequences where possible, namely:','line_number':130,'multiline':False]
['text':'','line_number':131,'multiline':False]
['text':'   \", \\, \b, \f, \n, \r, \t','line_number':132,'multiline':False]
['text':'','line_number':133,'multiline':False]
['text':' All control characters not in the above list are represented with a','line_number':134,'multiline':False]
['text':' six-char escape sequence, e.g. '\u000b' (a.k.a. '\v').','line_number':135,'multiline':False]
['text':'','line_number':136,'multiline':False]
['text':' `mStringSpan` initially points at the user-provided string. If that','line_number':138,'multiline':False]
['text':' string needs escaping, `mStringSpan` will point at `mOwnedStr` below.','line_number':139,'multiline':False]
['text':' String storage in case escaping is actually needed, null otherwise.','line_number':141,'multiline':False]
['text':' Either there was no escaping so `mOwnedStr` is null, or escaping was','line_number':145,'multiline':False]
['text':' needed, in which case `mStringSpan` should point at `mOwnedStr`.','line_number':146,'multiline':False]
['text':' First, see if we need to modify the string.','line_number':157,'multiline':False]
['text':' ensure it can't be interpreted as negative','line_number':160,'multiline':False]
['text':' Null terminator within the span, assume we may have been given a','line_number':163,'multiline':False]
['text':' span to a buffer that contains a null-terminated string in it.','line_number':164,'multiline':False]
['text':' We need to truncate the Span so that it doesn't include this null','line_number':165,'multiline':False]
['text':' terminator and anything past it; Either we will return it as-is, or','line_number':166,'multiline':False]
['text':' processing should stop there.','line_number':167,'multiline':False]
['text':' Note: Don't use `aStr` anymore, as it could contain a null terminator;','line_number':178,'multiline':False]
['text':' use the correctly-sized `mStringSpan` instead.','line_number':179,'multiline':False]
['text':' No escapes needed. mStringSpan already points at the original string.','line_number':182,'multiline':False]
['text':' Escapes are needed. We'll create a new string.','line_number':187,'multiline':False]
['text':' ensure it can't be interpreted as negative','line_number':192,'multiline':False]
['text':' Collections (objects and arrays) are printed in a multi-line style by','line_number':220,'multiline':False]
['text':' default. This can be changed to a single-line style if SingleLineStyle is','line_number':221,'multiline':False]
['text':' specified. If a collection is printed in single-line style, every nested','line_number':222,'multiline':False]
['text':' collection within it is also printed in single-line style, even if','line_number':223,'multiline':False]
['text':' multi-line style is requested.','line_number':224,'multiline':False]
['text':' the default','line_number':226,'multiline':False]
['text':' do we need a comma at depth N?','line_number':253,'multiline':False]
['text':' do we need newlines at depth N?','line_number':254,'multiline':False]
['text':' the current nesting depth','line_number':255,'multiline':False]
['text':' Adds whatever is necessary (maybe a comma, and then a newline and','line_number':263,'multiline':False]
['text':' whitespace) to separate an item (property or element) from what's come','line_number':264,'multiline':False]
['text':' before.','line_number':265,'multiline':False]
['text':' If these tiny allocations OOM we might as well just crash because we','line_number':307,'multiline':False]
['text':' must be in serious memory trouble.','line_number':308,'multiline':False]
['text':' Adds the whitespace and closing char necessary to end a collection.','line_number':330,'multiline':False]
['text':' Returns the JSONWriteFunc passed in at creation, for temporary use. The','line_number':349,'multiline':False]
['text':' JSONWriter object still owns the JSONWriteFunc.','line_number':350,'multiline':False]
['text':' For all the following functions, the "Prints:" comment indicates what the','line_number':353,'multiline':False]
['text':' basic output looks like. However, it doesn't indicate the whitespace and','line_number':354,'multiline':False]
['text':' trailing commas, which are automatically added as required.','line_number':355,'multiline':False]
['text':'','line_number':356,'multiline':False]
['text':' All property names and string properties are escaped as necessary.','line_number':357,'multiline':False]
['text':' Prints: {','line_number':359,'multiline':False]
['text':' Prints: } and final newline.','line_number':364,'multiline':False]
['text':' Prints: "<aName>": null','line_number':367,'multiline':False]
['text':' Keep null terminator from literal strings, will be removed by','line_number':374,'multiline':False]
['text':' EscapedString. This way C buffer arrays can be used as well.','line_number':375,'multiline':False]
['text':' Prints: null','line_number':379,'multiline':False]
['text':' Prints: "<aName>": <aBool>','line_number':382,'multiline':False]
['text':' Keep null terminator from literal strings, will be removed by','line_number':389,'multiline':False]
['text':' EscapedString. This way C buffer arrays can be used as well.','line_number':390,'multiline':False]
['text':' Prints: <aBool>','line_number':394,'multiline':False]
['text':' Prints: "<aName>": <aInt>','line_number':397,'multiline':False]
['text':' Keep null terminator from literal strings, will be removed by','line_number':407,'multiline':False]
['text':' EscapedString. This way C buffer arrays can be used as well.','line_number':408,'multiline':False]
['text':' Prints: <aInt>','line_number':412,'multiline':False]
['text':' Prints: "<aName>": <aDouble>','line_number':415,'multiline':False]
['text':' TODO: The builder should know the length?!','line_number':423,'multiline':False]
['text':' Keep null terminator from literal strings, will be removed by','line_number':429,'multiline':False]
['text':' EscapedString. This way C buffer arrays can be used as well.','line_number':430,'multiline':False]
['text':' Prints: <aDouble>','line_number':434,'multiline':False]
['text':' Prints: "<aName>": "<aStr>"','line_number':437,'multiline':False]
['text':' Keep null terminator from literal strings, will be removed by','line_number':445,'multiline':False]
['text':' EscapedString. This way C buffer arrays can be used as well.','line_number':446,'multiline':False]
['text':' Keep null terminator from literal strings, will be removed by','line_number':452,'multiline':False]
['text':' EscapedString. This way C buffer arrays can be used as well.','line_number':453,'multiline':False]
['text':' Keep null terminators from literal strings, will be removed by','line_number':459,'multiline':False]
['text':' EscapedString. This way C buffer arrays can be used as well.','line_number':460,'multiline':False]
['text':' Prints: "<aStr>"','line_number':464,'multiline':False]
['text':' Keep null terminator from literal strings, will be removed by','line_number':471,'multiline':False]
['text':' EscapedString. This way C buffer arrays can be used as well.','line_number':472,'multiline':False]
['text':' Prints: "<aName>": [','line_number':476,'multiline':False]
['text':' Keep null terminator from literal strings, will be removed by','line_number':485,'multiline':False]
['text':' EscapedString. This way C buffer arrays can be used as well.','line_number':486,'multiline':False]
['text':' Prints: [','line_number':490,'multiline':False]
['text':' Prints: ]','line_number':495,'multiline':False]
['text':' Prints: "<aName>": {','line_number':498,'multiline':False]
['text':' Keep null terminator from literal strings, will be removed by','line_number':507,'multiline':False]
['text':' EscapedString. This way C buffer arrays can be used as well.','line_number':508,'multiline':False]
['text':' Prints: {','line_number':512,'multiline':False]
['text':' Prints: }','line_number':517,'multiline':False]
['text':' namespace mozilla','line_number':521,'multiline':False]
['text':' mozilla_JSONWriter_h ','line_number':523,'multiline':True]
