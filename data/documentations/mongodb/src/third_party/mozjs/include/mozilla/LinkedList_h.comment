['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- ','line_number':1,'multiline':True]
['text':' vim: set ts=8 sts=2 et sw=2 tw=80: ','line_number':2,'multiline':True]
['text':' This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':3,'multiline':True]
['text':' A type-safe doubly-linked list class. ','line_number':7,'multiline':True]
['text':'
 * The classes LinkedList<T> and LinkedListElement<T> together form a
 * convenient, type-safe doubly-linked list implementation.
 *
 * The class T which will be inserted into the linked list must inherit from
 * LinkedListElement<T>.  A given object may be in only one linked list at a
 * time.
 *
 * A LinkedListElement automatically removes itself from the list upon
 * destruction, and a LinkedList will fatally assert in debug builds if it's
 * non-empty when it's destructed.
 *
 * For example, you might use LinkedList in a simple observer list class as
 * follows.
 *
 *   class Observer : public LinkedListElement<Observer>
 *   {
 *   public:
 *     void observe(char* aTopic) { ... }
 *   };
 *
 *   class ObserverContainer
 *   {
 *   private:
 *     LinkedList<Observer> list;
 *
 *   public:
 *     void addObserver(Observer* aObserver)
 *     {
 *       // Will assert if |aObserver| is part of another list.
 *       list.insertBack(aObserver);
 *     }
 *
 *     void removeObserver(Observer* aObserver)
 *     {
 *       // Will assert if |aObserver| is not part of some list.
 *       aObserver.remove();
 *       // Or, will assert if |aObserver| is not part of |list| specifically.
 *       // aObserver.removeFrom(list);
 *     }
 *
 *     void notifyObservers(char* aTopic)
 *     {
 *       for (Observer* o = list.getFirst(); o != nullptr; o = o->getNext()) {
 *         o->observe(aTopic);
 *       }
 *     }
 *   };
 *
 * Additionally, the class AutoCleanLinkedList<T> is a LinkedList<T> that will
 * remove and delete each element still within itself upon destruction. Note
 * that because each element is deleted, elements must have been allocated
 * using |new|.
 ','line_number':9,'multiline':True]
['text':'*
 * LinkedList supports refcounted elements using this adapter class. Clients
 * using LinkedList<RefPtr<T>> will get a data structure that holds a strong
 * reference to T as long as T is in the list.
 ','line_number':84,'multiline':True]
['text':' These static methods are called when an element is added to or removed from','line_number':96,'multiline':False]
['text':' a linked list. It can be used to keep track ownership in lists that are','line_number':97,'multiline':False]
['text':' supposed to own their elements. If elements are transferred from one list','line_number':98,'multiline':False]
['text':' to another, no enter or exit calls happen since the elements still belong','line_number':99,'multiline':False]
['text':' to a list.','line_number':100,'multiline':False]
['text':' This method is called when AutoCleanLinkedList cleans itself','line_number':104,'multiline':False]
['text':' during destruction. It can be used to call delete on elements if','line_number':105,'multiline':False]
['text':' the list is the sole owner.','line_number':106,'multiline':False]
['text':' namespace detail ','line_number':126,'multiline':True]
['text':'
   * It's convenient that we return nullptr when getNext() or getPrevious()
   * hits the end of the list, but doing so costs an extra word of storage in
   * each linked list node (to keep track of whether |this| is the sentinel
   * node) and a branch on this value in getNext/getPrevious.
   *
   * We could get rid of the extra word of storage by shoving the "is
   * sentinel" bit into one of the pointers, although this would, of course,
   * have performance implications of its own.
   *
   * But the goal here isn't to win an award for the fastest or slimmest
   * linked list; rather, we want a *convenient* linked list.  So we won't
   * waste time guessing which micro-optimization strategy is best.
   *
   *
   * Speaking of unnecessary work, it's worth addressing here why we wrote
   * mozilla::LinkedList in the first place, instead of using stl::list.
   *
   * The key difference between mozilla::LinkedList and stl::list is that
   * mozilla::LinkedList stores the mPrev/mNext pointers in the object itself,
   * while stl::list stores the mPrev/mNext pointers in a list element which
   * itself points to the object being stored.
   *
   * mozilla::LinkedList's approach makes it harder to store an object in more
   * than one list.  But the upside is that you can call next() / prev() /
   * remove() directly on the object.  With stl::list, you'd need to store a
   * pointer to its iterator in the object in order to accomplish this.  Not
   * only would this waste space, but you'd have to remember to update that
   * pointer every time you added or removed the object from a list.
   *
   * In-place, constant-time removal is a killer feature of doubly-linked
   * lists, and supporting this painlessly was a key design criterion.
   ','line_number':139,'multiline':True]
['text':'
   * Moves |aOther| into |*this|. If |aOther| is already in a list, then
   * |aOther| is removed from the list and replaced by |*this|.
   ','line_number':181,'multiline':True]
['text':'
   * Get the next element in the list, or nullptr if this is the last element
   * in the list.
   ','line_number':204,'multiline':True]
['text':'
   * Get the previous element in the list, or nullptr if this is the first
   * element in the list.
   ','line_number':211,'multiline':True]
['text':'
   * Insert aElem after this element in the list.  |this| must be part of a
   * linked list when you call setNext(); otherwise, this method will assert.
   ','line_number':218,'multiline':True]
['text':'
   * Insert aElem before this element in the list.  |this| must be part of a
   * linked list when you call setPrevious(); otherwise, this method will
   * assert.
   ','line_number':227,'multiline':True]
['text':'
   * Remove this element from the list which contains it.  If this element is
   * not currently part of a linked list, this method asserts.
   ','line_number':237,'multiline':True]
['text':'
   * Remove this element from the list containing it.  Returns a pointer to the
   * element that follows this element (before it was removed).  This method
   * asserts if the element does not belong to a list. Note: In a refcounted
   * list, |this| may be destroyed.
   ','line_number':252,'multiline':True]
['text':'
   * Remove this element from the list containing it.  Returns a pointer to the
   * previous element in the containing list (before the removal).  This method
   * asserts if the element does not belong to a list. Note: In a refcounted
   * list, |this| may be destroyed.
   ','line_number':264,'multiline':True]
['text':'
   * Identical to remove(), but also asserts in debug builds that this element
   * is in aList.
   ','line_number':276,'multiline':True]
['text':'
   * Return true if |this| part is of a linked list, and false otherwise.
   ','line_number':285,'multiline':True]
['text':'
   * Return |this| cast to T* if we're a normal node, or return nullptr if
   * we're a sentinel node.
   ','line_number':302,'multiline':True]
['text':'
   * Insert aElem after this element, but don't check that this element is in
   * the list.  This is called by LinkedList::insertFront().
   ','line_number':311,'multiline':True]
['text':'
   * Insert aElem before this element, but don't check that this element is in
   * the list.  This is called by LinkedList::insertBack().
   ','line_number':327,'multiline':True]
['text':'
   * Adjust mNext and mPrev for implementing move constructor and move
   * assignment.
   ','line_number':343,'multiline':True]
['text':'
     * Initialize |this| with |aOther|'s mPrev/mNext pointers, and adjust those
     * element to point to this one.
     ','line_number':361,'multiline':True]
['text':'
     * Adjust |aOther| so it doesn't think it's in a list.  This makes it
     * safely destructable.
     ','line_number':371,'multiline':True]
['text':'
   * Add aElem to the front of the list.
   ','line_number':449,'multiline':True]
['text':' Bypass setNext()'s this->isInList() assertion. ','line_number':453,'multiline':True]
['text':'
   * Add aElem to the back of the list.
   ','line_number':457,'multiline':True]
['text':'
   * Get the first element of the list, or nullptr if the list is empty.
   ','line_number':462,'multiline':True]
['text':'
   * Get the last element of the list, or nullptr if the list is empty.
   ','line_number':468,'multiline':True]
['text':'
   * Get and remove the first element of the list.  If the list is empty,
   * return nullptr.
   ','line_number':474,'multiline':True]
['text':'
   * Get and remove the last element of the list.  If the list is empty,
   * return nullptr.
   ','line_number':486,'multiline':True]
['text':'
   * Return true if the list is empty, or false otherwise.
   ','line_number':498,'multiline':True]
['text':'*
   * Returns whether the given element is in the list.
   ','line_number':503,'multiline':True]
['text':'
   * Remove all the elements from the list.
   *
   * This runs in time linear to the list's length, because we have to mark
   * each element as not in the list.
   ','line_number':510,'multiline':True]
['text':'*
   * Return the length of elements in the list.
   ','line_number':521,'multiline':True]
['text':'
   * Allow range-based iteration:
   *
   *     for (MyElementType* elt : myList) { ... }
   ','line_number':526,'multiline':True]
['text':'
   * Measures the memory consumption of the list excluding |this|.  Note that
   * it only measures the list elements themselves.  If the list elements
   * contain pointers to other memory blocks, those blocks must be measured
   * separately during a subsequent iteration over the list.
   ','line_number':544,'multiline':True]
['text':'
   * Like sizeOfExcludingThis(), but measures |this| as well.
   ','line_number':560,'multiline':True]
['text':'
   * In a debug build, make sure that the list is sane (no cycles, consistent
   * mNext/mPrev pointers, only one sentinel).  Has no effect in release builds.
   ','line_number':567,'multiline':True]
['text':'
     * Check for cycles in the forward singly-linked list using the
     * tortoise/hare algorithm.
     ','line_number':577,'multiline':True]
['text':' Check for cycles in the backward singly-linked list. ','line_number':589,'multiline':True]
['text':'
     * Check that |sentinel| is the only node in the list with
     * mIsSentinel == true.
     ','line_number':598,'multiline':True]
['text':' Check that the mNext/mPrev pointers match up. ','line_number':607,'multiline':True]
['text':' ifdef DEBUG ','line_number':617,'multiline':True]
['text':' RefPtr is stored as a raw pointer in LinkedList.','line_number':650,'multiline':False]
['text':' So instead of creating a new RefPtr from the raw','line_number':651,'multiline':False]
['text':' pointer (which is not allowed), we simply call','line_number':652,'multiline':False]
['text':' CycleCollectionNoteChild against the raw pointer','line_number':653,'multiline':False]
['text':' namespace mozilla ','line_number':676,'multiline':True]
['text':' __cplusplus ','line_number':678,'multiline':True]
['text':' mozilla_LinkedList_h ','line_number':680,'multiline':True]
