['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- ','line_number':1,'multiline':True]
['text':' vim: set ts=8 sts=2 et sw=2 tw=80: ','line_number':2,'multiline':True]
['text':' This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':3,'multiline':True]
['text':' Utilities for hashing. ','line_number':7,'multiline':True]
['text':'
 * This file exports functions for hashing data down to a uint32_t (a.k.a.
 * mozilla::HashNumber), including:
 *
 *  - HashString    Hash a char* or char16_t/wchar_t* of known or unknown
 *                  length.
 *
 *  - HashBytes     Hash a byte array of known length.
 *
 *  - HashGeneric   Hash one or more values.  Currently, we support uint32_t,
 *                  types which can be implicitly cast to uint32_t, data
 *                  pointers, and function pointers.
 *
 *  - AddToHash     Add one or more values to the given hash.  This supports the
 *                  same list of types as HashGeneric.
 *
 *
 * You can chain these functions together to hash complex objects.  For example:
 *
 *  class ComplexObject
 *  {
 *    char* mStr;
 *    uint32_t mUint1, mUint2;
 *    void (*mCallbackFn)();
 *
 *  public:
 *    HashNumber hash()
 *    {
 *      HashNumber hash = HashString(mStr);
 *      hash = AddToHash(hash, mUint1, mUint2);
 *      return AddToHash(hash, mCallbackFn);
 *    }
 *  };
 *
 * If you want to hash an nsAString or nsACString, use the HashString functions
 * in nsHashKeys.h.
 ','line_number':9,'multiline':True]
['text':'*
 * The golden ratio as a 32-bit fixed-point value.
 ','line_number':65,'multiline':True]
['text':'
 * Given a raw hash code, h, return a number that can be used to select a hash
 * bucket.
 *
 * This function aims to produce as uniform an output distribution as possible,
 * especially in the most significant (leftmost) bits, even though the input
 * distribution may be highly nonrandom, given the constraints that this must
 * be deterministic and quick to compute.
 *
 * Since the leftmost bits of the result are best, the hash bucket index is
 * computed by doing ScrambleHashCode(h) / (2^32/N) or the equivalent
 * right-shift, not ScrambleHashCode(h) % N or the equivalent bit-mask.
 *
 * FIXME: OrderedHashTable uses a bit-mask; see bug 775896.
 ','line_number':70,'multiline':True]
['text':'
   * Simply returning h would not cause any hash tables to produce wrong
   * answers. But it can produce pathologically bad performance: The caller
   * right-shifts the result, keeping only the highest bits. The high bits of
   * hash codes are very often completely entropy-free. (So are the lowest
   * bits.)
   *
   * So we use Fibonacci hashing, as described in Knuth, The Art of Computer
   * Programming, 6.4. This mixes all the bits of the input hash code h.
   *
   * The value of goldenRatio is taken from the hex expansion of the golden
   * ratio, which starts 1.9E3779B9.... This value is especially good if
   * values with consecutive hash codes are stored in a hash table; see Knuth
   * for details.
   ','line_number':86,'multiline':True]
['text':'
   * This is the meat of all our hash routines.  This hash function is not
   * particularly sophisticated, but it seems to work well for our mostly
   * plain-text inputs.  Implementation notes follow.
   *
   * Our use of the golden ratio here is arbitrary; we could pick almost any
   * number which:
   *
   *  * is odd (because otherwise, all our hash values will be even)
   *
   *  * has a reasonably-even mix of 1's and 0's (consider the extreme case
   *    where we multiply by 0x3 or 0xeffffff -- this will not produce good
   *    mixing across all bits of the hash).
   *
   * The rotation length of 5 is also arbitrary, although an odd number is again
   * preferable so our hash explores the whole universe of possible rotations.
   *
   * Finally, we multiply by the golden ratio *after* xor'ing, not before.
   * Otherwise, if |aHash| is 0 (as it often is for the beginning of a
   * message), the expression
   *
   *   mozilla::WrappingMultiply(kGoldenRatioU32, RotateLeft5(aHash))
   *   |xor|
   *   aValue
   *
   * evaluates to |aValue|.
   *
   * (Number-theoretic aside: Because any odd number |m| is relatively prime to
   * our modulus (2**32), the list
   *
   *    [x * m (mod 2**32) for 0 <= x < 2**32]
   *
   * has no duplicate elements.  This means that multiplying by |m| does not
   * cause us to skip any possible hash values.
   *
   * It's also nice if |m| has large-ish order mod 2**32 -- that is, if the
   * smallest k such that m**k == 1 (mod 2**32) is large -- so we can safely
   * multiply our hash value by |m| a few times without negating the
   * multiplicative effect.  Our golden ratio constant has order 2**29, which is
   * more than enough for our purposes.)
   ','line_number':112,'multiline':True]
['text':'*
 * AddUintptrToHash takes sizeof(uintptr_t) as a template parameter.
 ','line_number':157,'multiline':True]
['text':' namespace detail ','line_number':172,'multiline':True]
['text':'*
 * AddToHash takes a hash and some values and returns a new hash based on the
 * inputs.
 *
 * Currently, we support hashing uint32_t's, values which we can implicitly
 * convert to uint32_t, data pointers, and function pointers.
 ','line_number':174,'multiline':True]
['text':'
   * Try to convert |A| to uint32_t implicitly.  If this works, great.  If not,
   * we'll error out.
   ','line_number':185,'multiline':True]
['text':'
   * You might think this function should just take a void*.  But then we'd only
   * catch data pointers and couldn't handle function pointers.
   ','line_number':194,'multiline':True]
['text':' We use AddUintptrToHash() for hashing all integral types.  8-byte integral','line_number':204,'multiline':False]
['text':' types are treated the same as 64-bit pointers, and smaller integral types are','line_number':205,'multiline':False]
['text':' first implicitly converted to 32 bits and then passed to AddUintptrToHash()','line_number':206,'multiline':False]
['text':' to be hashed.','line_number':207,'multiline':False]
['text':' Hash using AddUintptrToHash with the underlying type of the enum type','line_number':215,'multiline':False]
['text':'*
 * The HashGeneric class of functions let you hash one or more values.
 *
 * If you want to hash together two values x and y, calling HashGeneric(x, y) is
 * much better than calling AddToHash(x, y), because AddToHash(x, y) assumes
 * that x has already been hashed.
 ','line_number':226,'multiline':True]
['text':'*
 * Hash successive |*aIter| until |!*aIter|, i.e. til null-termination.
 *
 * This function is *not* named HashString like the non-template overloads
 * below.  Some users define HashString overloads and pass inexactly-matching
 * values to them -- but an inexactly-matching value would match this overload
 * instead!  We follow the general rule and don't mix and match template and
 * regular overloads to avoid this.
 *
 * If you have the string's length, call HashStringKnownLength: it may be
 * marginally faster.
 ','line_number':238,'multiline':True]
['text':'*
 * Hash successive |aIter[i]| up to |i == aLength|.
 ','line_number':259,'multiline':True]
['text':'*
 * The HashString overloads below do just what you'd expect.
 *
 * These functions are non-template functions so that users can 1) overload them
 * with their own types 2) in a way that allows implicit conversions to happen.
 ','line_number':272,'multiline':True]
['text':' Use the |const unsigned char*| version of the above so that all ordinary','line_number':279,'multiline':False]
['text':' character data hashes identically.','line_number':280,'multiline':False]
['text':' Delegate to the |const unsigned char*| version of the above to share','line_number':285,'multiline':False]
['text':' template instantiations.','line_number':286,'multiline':False]
['text':'*
 * HashString overloads for |wchar_t| on platforms where it isn't |char16_t|.
 ','line_number':305,'multiline':True]
['text':'*
 * Hash some number of bytes.
 *
 * This hash walks word-by-word, rather than byte-by-byte, so you won't get the
 * same result out of HashBytes as you would out of HashString.
 ','line_number':322,'multiline':True]
['text':'*
 * A pseudorandom function mapping 32-bit integers to 32-bit integers.
 *
 * This is for when you're feeding private data (like pointer values or credit
 * card numbers) to a non-crypto hash function (like HashBytes) and then using
 * the hash code for something that untrusted parties could observe (like a JS
 * Map). Plug in a HashCodeScrambler before that last step to avoid leaking the
 * private data.
 *
 * By itself, this does not prevent hash-flooding DoS attacks, because an
 * attacker can still generate many values with exactly equal hash codes by
 * attacking the non-crypto hash function alone. Equal hash codes will, of
 * course, still be equal however much you scramble them.
 *
 * The algorithm is SipHash-1-3. See <https://131002.net/siphash/>.
 ','line_number':331,'multiline':True]
['text':'* Creates a new scrambler with the given 128-bit key. ','line_number':353,'multiline':True]
['text':'*
   * Scramble a hash code. Always produces the same result for the same
   * combination of key and hash code.
   ','line_number':357,'multiline':True]
['text':' 1. Initialization.','line_number':369,'multiline':False]
['text':' 2. Compression.','line_number':377,'multiline':False]
['text':' 3. Finalization.','line_number':382,'multiline':False]
['text':' namespace mozilla ','line_number':409,'multiline':True]
['text':' mozilla_HashFunctions_h ','line_number':411,'multiline':True]
