['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- ','line_number':1,'multiline':True]
['text':' vim: set ts=8 sts=2 et sw=2 tw=80: ','line_number':2,'multiline':True]
['text':' This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':3,'multiline':True]
['text':'*
 * A sorted tree with optimal access times, where recently-accessed elements
 * are faster to access again.
 ','line_number':7,'multiline':True]
['text':'*
 * Class which represents a splay tree.
 * Splay trees are balanced binary search trees for which search, insert and
 * remove are all amortized O(log n), but where accessing a node makes it
 * faster to access that node in the future.
 *
 * T indicates the type of tree elements, Comparator must have a static
 * compare(const T&, const T&) method ordering the elements. The compare
 * method must be free from side effects.
 ','line_number':37,'multiline':True]
['text':' Splay the tree so that the item to remove is the root.','line_number':86,'multiline':False]
['text':' Find another node which can be swapped in for the root: either the','line_number':90,'multiline':False]
['text':' rightmost child of the root's left, or the leftmost child of the','line_number':91,'multiline':False]
['text':' root's right.','line_number':92,'multiline':False]
['text':' The selected node has at most one child, in swapChild. Detach it','line_number':113,'multiline':False]
['text':' from the subtree by replacing it with that child.','line_number':114,'multiline':False]
['text':' Make the selected node the new root.','line_number':124,'multiline':False]
['text':' For testing purposes only.','line_number':151,'multiline':False]
['text':'*
   * Returns the node in this comparing equal to |aValue|, or a node just
   * greater or just less than |aValue| if there is no such node.
   ','line_number':155,'multiline':True]
['text':'*
   * Rotate the tree until |node| is at the root of the tree. Performing
   * the rotations in this fashion preserves the amortized balancing of
   * the tree.
   ','line_number':189,'multiline':True]
['text':' Zig rotation.','line_number':200,'multiline':False]
['text':' Zig-zig rotation.','line_number':207,'multiline':False]
['text':' Zig-zag rotation.','line_number':211,'multiline':False]
['text':' Rearrange nodes so that aNode becomes the parent of its current','line_number':219,'multiline':False]
['text':' parent, while preserving the sortedness of the tree.','line_number':220,'multiline':False]
['text':'     x          y','line_number':223,'multiline':False]
['text':'   y  c  ==>  a  x','line_number':224,'multiline':False]
['text':'  a b           b c','line_number':225,'multiline':False]
['text':'   x             y','line_number':233,'multiline':False]
['text':'  a  y   ==>   x  c','line_number':234,'multiline':False]
['text':'    b c       a b','line_number':235,'multiline':False]
['text':' namespace mozilla ','line_number':303,'multiline':True]
['text':' mozilla_SplayTree_h ','line_number':305,'multiline':True]
