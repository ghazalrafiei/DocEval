['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- ','line_number':1,'multiline':True]
['text':' vim: set ts=8 sts=2 et sw=2 tw=80: ','line_number':2,'multiline':True]
['text':' This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':3,'multiline':True]
['text':' Implements the C99 <inttypes.h> interface. ','line_number':7,'multiline':True]
['text':'
 * These macros should not be used with the NSPR printf-like functions or their
 * users.  If you need to use NSPR's facilities, see the comment on
 * supported formats at the top of nsprpub/pr/include/prprf.h.
 ','line_number':12,'multiline':True]
['text':'
 * scanf is a footgun: if the input number exceeds the bounds of the target
 * type, behavior is undefined (in the compiler sense: that is, this code
 * could overwrite your hard drive with zeroes):
 *
 *   uint8_t u;
 *   sscanf("256", "%" SCNu8, &u); // BAD
 *
 * For this reason, *never* use the SCN* macros provided by this header!
 ','line_number':18,'multiline':True]
['text':'
 * Fix up Android's broken [u]intptr_t inttype macros. Android's PRI*PTR
 * macros are defined as "ld", but sizeof(long) is 8 and sizeof(intptr_t)
 * is 4 on 32-bit Android. TestTypeTraits.cpp asserts that these new macro
 * definitions match the actual type sizes seen at compile time.
 ','line_number':31,'multiline':True]
['text':' intptr_t  ','line_number':38,'multiline':True]
['text':' intptr_t  ','line_number':39,'multiline':True]
['text':' intptr_t  ','line_number':40,'multiline':True]
['text':' intptr_t  ','line_number':41,'multiline':True]
['text':' uintptr_t ','line_number':42,'multiline':True]
['text':' uintptr_t ','line_number':43,'multiline':True]
['text':' uintptr_t ','line_number':44,'multiline':True]
['text':' uintptr_t ','line_number':45,'multiline':True]
['text':' uintptr_t ','line_number':46,'multiline':True]
['text':' uintptr_t ','line_number':47,'multiline':True]
['text':' uintptr_t ','line_number':48,'multiline':True]
['text':' uintptr_t ','line_number':49,'multiline':True]
['text':'
 * Fix up Android's broken macros for [u]int_fastN_t. On ARM64, Android's
 * PRI*FAST16/32 macros are defined as "d", but the types themselves are defined
 * as long and unsigned long.
 ','line_number':52,'multiline':True]
['text':' int_fast16_t ','line_number':58,'multiline':True]
['text':' int_fast16_t ','line_number':59,'multiline':True]
['text':' int_fast16_t ','line_number':60,'multiline':True]
['text':' int_fast16_t ','line_number':61,'multiline':True]
['text':' uint_fast16_t ','line_number':62,'multiline':True]
['text':' uint_fast16_t ','line_number':63,'multiline':True]
['text':' uint_fast16_t ','line_number':64,'multiline':True]
['text':' uint_fast16_t ','line_number':65,'multiline':True]
['text':' uint_fast16_t ','line_number':66,'multiline':True]
['text':' uint_fast16_t ','line_number':67,'multiline':True]
['text':' uint_fast16_t ','line_number':68,'multiline':True]
['text':' uint_fast16_t ','line_number':69,'multiline':True]
['text':' int_fast32_t ','line_number':70,'multiline':True]
['text':' int_fast32_t ','line_number':71,'multiline':True]
['text':' int_fast32_t ','line_number':72,'multiline':True]
['text':' int_fast32_t ','line_number':73,'multiline':True]
['text':' uint_fast32_t ','line_number':74,'multiline':True]
['text':' uint_fast32_t ','line_number':75,'multiline':True]
['text':' uint_fast32_t ','line_number':76,'multiline':True]
['text':' uint_fast32_t ','line_number':77,'multiline':True]
['text':' uint_fast32_t ','line_number':78,'multiline':True]
['text':' uint_fast32_t ','line_number':79,'multiline':True]
['text':' uint_fast32_t ','line_number':80,'multiline':True]
['text':' uint_fast32_t ','line_number':81,'multiline':True]
['text':' mozilla_IntegerPrintfMacros_h_ ','line_number':84,'multiline':True]
