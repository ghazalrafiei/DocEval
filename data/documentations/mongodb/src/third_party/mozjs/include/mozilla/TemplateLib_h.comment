['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- ','line_number':1,'multiline':True]
['text':' vim: set ts=8 sts=2 et sw=2 tw=80: ','line_number':2,'multiline':True]
['text':' This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':3,'multiline':True]
['text':'
 * Reusable template meta-functions on types and compile-time values.  Meta-
 * functions are placed inside the 'tl' namespace to avoid conflict with non-
 * meta functions of the same name (e.g., mozilla::tl::FloorLog2 vs.
 * mozilla::FloorLog2).
 *
 * When constexpr support becomes universal, we should probably use that instead
 * of some of these templates, for simplicity.
 ','line_number':7,'multiline':True]
['text':'* Compute min/max. ','line_number':28,'multiline':True]
['text':'* Compute floor(log2(i)). ','line_number':51,'multiline':True]
['text':' Error ','line_number':57,'multiline':True]
['text':'* Compute ceiling(log2(i)). ','line_number':64,'multiline':True]
['text':'* Round up to the nearest power of 2. ','line_number':70,'multiline':True]
['text':'* Compute the number of bits in the given unsigned type. ','line_number':80,'multiline':True]
['text':'*
 * Produce an N-bit mask, where N <= BitSize<size_t>::value.  Handle the
 * language-undefined edge case when N = BitSize<size_t>::value.
 ','line_number':86,'multiline':True]
['text':' Assert the precondition.  On success this evaluates to 0.  Otherwise it','line_number':92,'multiline':False]
['text':' triggers divide-by-zero at compile time: a guaranteed compile error in','line_number':93,'multiline':False]
['text':' C++11, and usually one in C++98.  Add this value to |value| to assure','line_number':94,'multiline':False]
['text':' its computation.','line_number':95,'multiline':False]
['text':'*
 * For the unsigned integral type size_t, compute a mask M for N such that
 * for all X, !(X & M) implies X * N will not overflow (w.r.t size_t)
 ','line_number':105,'multiline':True]
['text':' Error ','line_number':115,'multiline':True]
['text':'*
 * And<bool...> computes the logical 'and' of its argument booleans.
 *
 * Examples:
 *   mozilla::t1::And<true, true>::value is true.
 *   mozilla::t1::And<true, false>::value is false.
 *   mozilla::t1::And<>::value is true.
 ','line_number':122,'multiline':True]
['text':' namespace tl','line_number':134,'multiline':False]
['text':' namespace mozilla','line_number':136,'multiline':False]
['text':' mozilla_TemplateLib_h ','line_number':138,'multiline':True]
