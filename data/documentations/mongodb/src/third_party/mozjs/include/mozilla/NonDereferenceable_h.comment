['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- ','line_number':1,'multiline':True]
['text':' vim: set ts=8 sts=2 et sw=2 tw=80: ','line_number':2,'multiline':True]
['text':' This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':3,'multiline':True]
['text':' A pointer wrapper indicating that the pointer should not be dereferenced. ','line_number':10,'multiline':True]
['text':' Macro indicating that a function manipulates a pointer that will not be','line_number':16,'multiline':False]
['text':' dereferenced, and therefore there is no need to check the object.','line_number':17,'multiline':False]
['text':' nothing ','line_number':21,'multiline':True]
['text':' NonDereferenceable<T> wraps a raw pointer value of type T*, but prevents','line_number':26,'multiline':False]
['text':' dereferencing.','line_number':27,'multiline':False]
['text':'','line_number':28,'multiline':False]
['text':' The main use case is for pointers that referencing memory that may not','line_number':29,'multiline':False]
['text':' contain a valid object, either because the object has already been freed, or','line_number':30,'multiline':False]
['text':' is under active construction or destruction (and hence parts of it may be','line_number':31,'multiline':False]
['text':' uninitialized or destructed.)','line_number':32,'multiline':False]
['text':' Such a pointer may still be useful, e.g., for its numeric value for','line_number':33,'multiline':False]
['text':' logging/debugging purposes, which may be accessed with `value()`.','line_number':34,'multiline':False]
['text':' Using NonDereferenceable with such pointers will make this intent clearer,','line_number':35,'multiline':False]
['text':' and prevent misuses.','line_number':36,'multiline':False]
['text':'','line_number':37,'multiline':False]
['text':' Note that NonDereferenceable is only a wrapper and is NOT an owning pointer,','line_number':38,'multiline':False]
['text':' i.e., it will not release/free the object.','line_number':39,'multiline':False]
['text':'','line_number':40,'multiline':False]
['text':' NonDereferenceable allows conversions between compatible pointer types, e.g.,','line_number':41,'multiline':False]
['text':' to navigate a class hierarchy and identify parent/sub-objects. Note that the','line_number':42,'multiline':False]
['text':' converted pointers stay safely NonDereferenceable.','line_number':43,'multiline':False]
['text':'','line_number':44,'multiline':False]
['text':' Use of NonDereferenceable is required to avoid errors from sanitization tools','line_number':45,'multiline':False]
['text':' like `clang++ -fsanitize=vptr`, and should prevent false positives while','line_number':46,'multiline':False]
['text':' pointers are manipulated within NonDereferenceable objects.','line_number':47,'multiline':False]
['text':'','line_number':48,'multiline':False]
['text':' Default construction with a null value.','line_number':52,'multiline':False]
['text':' Default copy construction and assignment.','line_number':55,'multiline':False]
['text':' No move operations, as we're only carrying a non-owning pointer, so','line_number':60,'multiline':False]
['text':' copying is most efficient.','line_number':61,'multiline':False]
['text':' Construct/assign from a T* raw pointer.','line_number':63,'multiline':False]
['text':' A raw pointer should usually point at a valid object, however we want to','line_number':64,'multiline':False]
['text':' leave the ability to the user to create a NonDereferenceable from any','line_number':65,'multiline':False]
['text':' pointer. Also, strictly speaking, in a constructor or destructor, `this`','line_number':66,'multiline':False]
['text':' points at an object still being constructed or already partially','line_number':67,'multiline':False]
['text':' destructed, which some very sensitive sanitizers could complain about.','line_number':68,'multiline':False]
['text':' Construct/assign from a compatible pointer type.','line_number':77,'multiline':False]
['text':' Construct/assign from a NonDereferenceable with a compatible pointer type.','line_number':87,'multiline':False]
['text':' Explicitly disallow dereference operators, so that compiler errors point','line_number':99,'multiline':False]
['text':' at these lines:','line_number':100,'multiline':False]
['text':' Cannot dereference NonDereferenceable!','line_number':101,'multiline':False]
['text':' Cannot dereference NonDereferenceable!','line_number':102,'multiline':False]
['text':' Null check.','line_number':104,'multiline':False]
['text':' Extract the pointer value, untyped.','line_number':108,'multiline':False]
['text':' Let other NonDereferenceable templates access mPtr, to permit construction/','line_number':113,'multiline':False]
['text':' assignment from compatible pointer types.','line_number':114,'multiline':False]
['text':' namespace mozilla','line_number':121,'multiline':False]
['text':' mozilla_NonDereferenceable_h ','line_number':125,'multiline':True]
