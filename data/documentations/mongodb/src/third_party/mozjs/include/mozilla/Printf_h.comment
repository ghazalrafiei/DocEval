['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]
['text':' Printf-like functions, with canned variants that malloc their result.  ','line_number':7,'multiline':True]
['text':'
** API for PR printf like routines.
**
** These exist partly for historical reasons -- initially they were in
** NSPR, then forked in tree and modified in js/ -- but now the prime
** motivation is both closer control over the exact formatting (with
** one exception, see below) and also the ability to control where
** exactly the generated results are sent.
**
** It might seem that this could all be dispensed with in favor of a
** wrapper around |vsnprintf| -- except that this implementation
** guarantees that the %s format will accept a NULL pointer, whereas
** with standard functions this is undefined.
**
** This supports the following formats.  It implements a subset of the
** standard formats; due to the use of MOZ_FORMAT_PRINTF, it is not
** permissible to extend the standard, aside from relaxing undefined
** behavior.
**
**      %d - decimal
**      %u - unsigned decimal
**      %x - unsigned hex
**      %X - unsigned uppercase hex
**      %o - unsigned octal
**      %hd, %hu, %hx, %hX, %ho - "short" versions of above
**      %ld, %lu, %lx, %lX, %lo - "long" versions of above
**      %lld, %llu, %llx, %llX, %llo - "long long" versions of above
**      %zd, %zo, %zu, %zx, %zX - size_t versions of above
**      %Id, %Io, %Iu, %Ix, %IX - size_t versions of above (for Windows compat).
**           Note that MSVC 2015 and newer supports the z length modifier so
**           users should prefer using %z instead of %I. We are supporting %I in
**           addition to %z in case third-party code that uses %I gets routed to
**           use this printf implementation.
**      %s - string
**      %S, %ls - wide string, that is wchar_t*
**      %c - character
**      %p - pointer (deals with machine dependent pointer size)
**      %f - float; note that this is actually formatted using the
**           system's native printf, and so the results may vary
**      %g - float; note that this is actually formatted using the
**           system's native printf, and so the results may vary
','line_number':12,'multiline':True]
['text':'
 * This class may be subclassed to provide a way to get the output of
 * a printf-like call, as the output is generated.
 ','line_number':67,'multiline':True]
['text':' The Printf-like interface.  ','line_number':73,'multiline':True]
['text':' The Vprintf-like interface.  ','line_number':76,'multiline':True]
['text':' Fast paths for formatting integers as though by %d, %o, %u, or %x.
     Since octal and hex formatting always treat numbers as unsigned, there
     are no signed overloads for AppendInt{Oct,Hex}.  ','line_number':79,'multiline':True]
['text':' Subclasses override this.  It is called when more output is
     available.  It may be called with len==0.  This should return
     true on success, or false on failure.  ','line_number':97,'multiline':True]
['text':' Number of bytes emitted so far.  ','line_number':103,'multiline':True]
['text':' The implementation calls this to emit bytes and update
     mEmitted.  ','line_number':106,'multiline':True]
['text':' namespace detail','line_number':134,'multiline':False]
['text':' The type returned by Smprintf and friends.','line_number':136,'multiline':False]
['text':' The default type if no alloc policy is specified.','line_number':141,'multiline':False]
['text':' Used in the implementation of Smprintf et al.','line_number':144,'multiline':False]
['text':' The "" here has a single \0 character, which is what we're','line_number':157,'multiline':False]
['text':' trying to append.','line_number':158,'multiline':False]
['text':' Grow the buffer ','line_number':176,'multiline':True]
['text':' Ran out of memory ','line_number':180,'multiline':True]
['text':' Copy data ','line_number':190,'multiline':True]
['text':'
** sprintf into a malloc'd buffer. Return a pointer to the malloc'd
** buffer on success, nullptr on failure. Call AllocPolicy::free_ to release
** the memory returned.
','line_number':203,'multiline':True]
['text':'
** "append" sprintf into a malloc'd buffer. "last" is the last value of
** the malloc'd buffer. sprintf will append data to the end of last,
** growing it as necessary using realloc. If last is nullptr, SmprintfAppend
** will allocate the initial string. The return value is the new value of
** last for subsequent calls, or nullptr if there is a malloc failure.
','line_number':222,'multiline':True]
['text':'
** va_list forms of the above.
','line_number':244,'multiline':True]
['text':' namespace mozilla','line_number':264,'multiline':False]
['text':' mozilla_Printf_h ','line_number':266,'multiline':True]
