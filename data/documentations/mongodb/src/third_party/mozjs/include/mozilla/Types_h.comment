['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- ','line_number':1,'multiline':True]
['text':' vim: set ts=8 sts=2 et sw=2 tw=80: ','line_number':2,'multiline':True]
['text':' This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':3,'multiline':True]
['text':' mfbt foundational types and macros. ','line_number':7,'multiline':True]
['text':'
 * This header must be valid C and C++, includable by code embedding either
 * SpiderMonkey or Gecko.
 ','line_number':12,'multiline':True]
['text':' Expose all <stdint.h> types and size_t. ','line_number':17,'multiline':True]
['text':' Implement compiler and linker macros needed for APIs. ','line_number':21,'multiline':True]
['text':'
 * MOZ_EXPORT is used to declare and define a symbol or type which is externally
 * visible to users of the current library.  It encapsulates various decorations
 * needed to properly export the method's symbol.
 *
 *   api.h:
 *     extern MOZ_EXPORT int MeaningOfLife(void);
 *     extern MOZ_EXPORT int LuggageCombination;
 *
 *   api.c:
 *     int MeaningOfLife(void) { return 42; }
 *     int LuggageCombination = 12345;
 *
 * If you are merely sharing a method across files, just use plain |extern|.
 * These macros are designed for use by library interfaces -- not for normal
 * methods or data used cross-file.
 ','line_number':23,'multiline':True]
['text':' Unix ','line_number':42,'multiline':True]
['text':' nothing ','line_number':48,'multiline':True]
['text':'
 * Whereas implementers use MOZ_EXPORT to declare and define library symbols,
 * users use MOZ_IMPORT_API and MOZ_IMPORT_DATA to access them.  Most often the
 * implementer of the library will expose an API macro which expands to either
 * the export or import version of the macro, depending upon the compilation
 * mode.
 ','line_number':52,'multiline':True]
['text':' nothing ','line_number':61,'multiline':True]
['text':'
 * Consistent with the above comment, the MFBT_API and MFBT_DATA macros expose
 * export mfbt declarations when building mfbt, and they expose import mfbt
 * declarations when using mfbt.
 ','line_number':75,'multiline':True]
['text':'
 * On linux mozglue is linked in the program and we link libxul.so with
 * -z,defs. Normally that causes the linker to reject undefined references in
 * libxul.so, but as a loophole it allows undefined references to weak
 * symbols. We add the weak attribute to the import version of the MFBT API
 * macros to exploit this.
 ','line_number':90,'multiline':True]
['text':'
 * C symbols in C++ code must be declared immediately within |extern "C"|
 * blocks.  However, in C code, they need not be declared specially.  This
 * difference is abstracted behind the MOZ_BEGIN_EXTERN_C and MOZ_END_EXTERN_C
 * macros, so that the user need not know whether he is being used in C or C++
 * code.
 *
 *   MOZ_BEGIN_EXTERN_C
 *
 *   extern MOZ_EXPORT int MostRandomNumber(void);
 *   ...other declarations...
 *
 *   MOZ_END_EXTERN_C
 *
 * This said, it is preferable to just use |extern "C"| in C++ header files for
 * its greater clarity.
 ','line_number':107,'multiline':True]
['text':'
 * GCC's typeof is available when decltype is not.
 ','line_number':132,'multiline':True]
['text':' mozilla_Types_h ','line_number':140,'multiline':True]
