['text':' -*- Mode: C++; c-basic-offset: 2; indent-tabs-mode: nil -*-','line_number':1,'multiline':False]
['text':' Copyright (c) 2005, Google Inc.','line_number':2,'multiline':False]
['text':' All rights reserved.','line_number':3,'multiline':False]
['text':'','line_number':4,'multiline':False]
['text':' Redistribution and use in source and binary forms, with or without','line_number':5,'multiline':False]
['text':' modification, are permitted provided that the following conditions are','line_number':6,'multiline':False]
['text':' met:','line_number':7,'multiline':False]
['text':'','line_number':8,'multiline':False]
['text':'     * Redistributions of source code must retain the above copyright','line_number':9,'multiline':False]
['text':' notice, this list of conditions and the following disclaimer.','line_number':10,'multiline':False]
['text':'     * Redistributions in binary form must reproduce the above','line_number':11,'multiline':False]
['text':' copyright notice, this list of conditions and the following disclaimer','line_number':12,'multiline':False]
['text':' in the documentation and/or other materials provided with the','line_number':13,'multiline':False]
['text':' distribution.','line_number':14,'multiline':False]
['text':'     * Neither the name of Google Inc. nor the names of its','line_number':15,'multiline':False]
['text':' contributors may be used to endorse or promote products derived from','line_number':16,'multiline':False]
['text':' this software without specific prior written permission.','line_number':17,'multiline':False]
['text':'','line_number':18,'multiline':False]
['text':' THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS','line_number':19,'multiline':False]
['text':' "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT','line_number':20,'multiline':False]
['text':' LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR','line_number':21,'multiline':False]
['text':' A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT','line_number':22,'multiline':False]
['text':' OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,','line_number':23,'multiline':False]
['text':' SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT','line_number':24,'multiline':False]
['text':' LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,','line_number':25,'multiline':False]
['text':' DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY','line_number':26,'multiline':False]
['text':' THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT','line_number':27,'multiline':False]
['text':' (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE','line_number':28,'multiline':False]
['text':' OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.','line_number':29,'multiline':False]
['text':' ---','line_number':31,'multiline':False]
['text':' Author: Sanjay Ghemawat','line_number':32,'multiline':False]
['text':'','line_number':33,'multiline':False]
['text':' Routines to extract the current stack trace.  These functions are','line_number':34,'multiline':False]
['text':' thread-safe.','line_number':35,'multiline':False]
['text':' Annoying stuff for windows -- makes sure clients can import these functions','line_number':40,'multiline':False]
['text':' Skips the most recent "skip_count" stack frames (also skips the','line_number':50,'multiline':False]
['text':' frame generated for the "GetStackFrames" routine itself), and then','line_number':51,'multiline':False]
['text':' records the pc values for up to the next "max_depth" frames in','line_number':52,'multiline':False]
['text':' "result", and the corresponding stack frame sizes in "sizes".','line_number':53,'multiline':False]
['text':' Returns the number of values recorded in "result"/"sizes".','line_number':54,'multiline':False]
['text':'','line_number':55,'multiline':False]
['text':' Example:','line_number':56,'multiline':False]
['text':'      main() { foo(); }','line_number':57,'multiline':False]
['text':'      foo() { bar(); }','line_number':58,'multiline':False]
['text':'      bar() {','line_number':59,'multiline':False]
['text':'        void* result[10];','line_number':60,'multiline':False]
['text':'        int sizes[10];','line_number':61,'multiline':False]
['text':'        int depth = GetStackFrames(result, sizes, 10, 1);','line_number':62,'multiline':False]
['text':'      }','line_number':63,'multiline':False]
['text':'','line_number':64,'multiline':False]
['text':' The GetStackFrames call will skip the frame for "bar".  It will','line_number':65,'multiline':False]
['text':' return 2 and will produce pc values that map to the following','line_number':66,'multiline':False]
['text':' procedures:','line_number':67,'multiline':False]
['text':'      result[0]       foo','line_number':68,'multiline':False]
['text':'      result[1]       main','line_number':69,'multiline':False]
['text':' (Actually, there may be a few more entries after "main" to account for','line_number':70,'multiline':False]
['text':' startup procedures.)','line_number':71,'multiline':False]
['text':' And corresponding stack frame sizes will also be recorded:','line_number':72,'multiline':False]
['text':'    sizes[0]       16','line_number':73,'multiline':False]
['text':'    sizes[1]       16','line_number':74,'multiline':False]
['text':' (Stack frame sizes of 16 above are just for illustration purposes.)','line_number':75,'multiline':False]
['text':' Stack frame sizes of 0 or less indicate that those frame sizes couldn't','line_number':76,'multiline':False]
['text':' be identified.','line_number':77,'multiline':False]
['text':'','line_number':78,'multiline':False]
['text':' This routine may return fewer stack frame entries than are','line_number':79,'multiline':False]
['text':' available. Also note that "result" and "sizes" must both be non-NULL.','line_number':80,'multiline':False]
['text':' Same as above, but to be used from a signal handler. The "uc" parameter','line_number':84,'multiline':False]
['text':' should be the pointer to ucontext_t which was passed as the 3rd parameter','line_number':85,'multiline':False]
['text':' to sa_sigaction signal handler. It may help the unwinder to get a','line_number':86,'multiline':False]
['text':' better stack trace under certain conditions. The "uc" may safely be NULL.','line_number':87,'multiline':False]
['text':' This is similar to the GetStackFrames routine, except that it returns','line_number':91,'multiline':False]
['text':' the stack trace only, and not the stack frame sizes as well.','line_number':92,'multiline':False]
['text':' Example:','line_number':93,'multiline':False]
['text':'      main() { foo(); }','line_number':94,'multiline':False]
['text':'      foo() { bar(); }','line_number':95,'multiline':False]
['text':'      bar() {','line_number':96,'multiline':False]
['text':'        void* result[10];','line_number':97,'multiline':False]
['text':'        int depth = GetStackTrace(result, 10, 1);','line_number':98,'multiline':False]
['text':'      }','line_number':99,'multiline':False]
['text':'','line_number':100,'multiline':False]
['text':' This produces:','line_number':101,'multiline':False]
['text':'      result[0]       foo','line_number':102,'multiline':False]
['text':'      result[1]       main','line_number':103,'multiline':False]
['text':'           ....       ...','line_number':104,'multiline':False]
['text':'','line_number':105,'multiline':False]
['text':' "result" must not be NULL.','line_number':106,'multiline':False]
['text':' Same as above, but to be used from a signal handler. The "uc" parameter','line_number':110,'multiline':False]
['text':' should be the pointer to ucontext_t which was passed as the 3rd parameter','line_number':111,'multiline':False]
['text':' to sa_sigaction signal handler. It may help the unwinder to get a','line_number':112,'multiline':False]
['text':' better stack trace under certain conditions. The "uc" may safely be NULL.','line_number':113,'multiline':False]
['text':' GOOGLE_STACKTRACE_H_ ','line_number':117,'multiline':True]
