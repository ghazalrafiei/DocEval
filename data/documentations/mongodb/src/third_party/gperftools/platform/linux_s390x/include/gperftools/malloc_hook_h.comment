['text':' -*- Mode: C++; c-basic-offset: 2; indent-tabs-mode: nil -*-','line_number':1,'multiline':False]
['text':' Copyright (c) 2005, Google Inc.','line_number':2,'multiline':False]
['text':' All rights reserved.','line_number':3,'multiline':False]
['text':'','line_number':4,'multiline':False]
['text':' Redistribution and use in source and binary forms, with or without','line_number':5,'multiline':False]
['text':' modification, are permitted provided that the following conditions are','line_number':6,'multiline':False]
['text':' met:','line_number':7,'multiline':False]
['text':'','line_number':8,'multiline':False]
['text':'     * Redistributions of source code must retain the above copyright','line_number':9,'multiline':False]
['text':' notice, this list of conditions and the following disclaimer.','line_number':10,'multiline':False]
['text':'     * Redistributions in binary form must reproduce the above','line_number':11,'multiline':False]
['text':' copyright notice, this list of conditions and the following disclaimer','line_number':12,'multiline':False]
['text':' in the documentation and/or other materials provided with the','line_number':13,'multiline':False]
['text':' distribution.','line_number':14,'multiline':False]
['text':'     * Neither the name of Google Inc. nor the names of its','line_number':15,'multiline':False]
['text':' contributors may be used to endorse or promote products derived from','line_number':16,'multiline':False]
['text':' this software without specific prior written permission.','line_number':17,'multiline':False]
['text':'','line_number':18,'multiline':False]
['text':' THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS','line_number':19,'multiline':False]
['text':' "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT','line_number':20,'multiline':False]
['text':' LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR','line_number':21,'multiline':False]
['text':' A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT','line_number':22,'multiline':False]
['text':' OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,','line_number':23,'multiline':False]
['text':' SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT','line_number':24,'multiline':False]
['text':' LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,','line_number':25,'multiline':False]
['text':' DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY','line_number':26,'multiline':False]
['text':' THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT','line_number':27,'multiline':False]
['text':' (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE','line_number':28,'multiline':False]
['text':' OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.','line_number':29,'multiline':False]
['text':' ---','line_number':31,'multiline':False]
['text':' Author: Sanjay Ghemawat','line_number':32,'multiline':False]
['text':'','line_number':33,'multiline':False]
['text':' Some of our malloc implementations can invoke the following hooks whenever','line_number':34,'multiline':False]
['text':' memory is allocated or deallocated.  MallocHook is thread-safe, and things','line_number':35,'multiline':False]
['text':' you do before calling AddFooHook(MyHook) are visible to any resulting calls','line_number':36,'multiline':False]
['text':' to MyHook.  Hooks must be thread-safe.  If you write:','line_number':37,'multiline':False]
['text':'','line_number':38,'multiline':False]
['text':'   CHECK(MallocHook::AddNewHook(&MyNewHook));','line_number':39,'multiline':False]
['text':'','line_number':40,'multiline':False]
['text':' MyNewHook will be invoked in subsequent calls in the current thread, but','line_number':41,'multiline':False]
['text':' there are no guarantees on when it might be invoked in other threads.','line_number':42,'multiline':False]
['text':'','line_number':43,'multiline':False]
['text':' There are a limited number of slots available for each hook type.  Add*Hook','line_number':44,'multiline':False]
['text':' will return false if there are no slots available.  Remove*Hook will return','line_number':45,'multiline':False]
['text':' false if the given hook was not already installed.','line_number':46,'multiline':False]
['text':'','line_number':47,'multiline':False]
['text':' The order in which individual hooks are called in Invoke*Hook is undefined.','line_number':48,'multiline':False]
['text':'','line_number':49,'multiline':False]
['text':' It is safe for a hook to remove itself within Invoke*Hook and add other','line_number':50,'multiline':False]
['text':' hooks.  Any hooks added inside a hook invocation (for the same hook type)','line_number':51,'multiline':False]
['text':' will not be invoked for the current invocation.','line_number':52,'multiline':False]
['text':'','line_number':53,'multiline':False]
['text':' One important user of these hooks is the heap profiler.','line_number':54,'multiline':False]
['text':'','line_number':55,'multiline':False]
['text':' CAVEAT: If you add new MallocHook::Invoke* calls then those calls must be','line_number':56,'multiline':False]
['text':' directly in the code of the (de)allocation function that is provided to the','line_number':57,'multiline':False]
['text':' user and that function must have an ATTRIBUTE_SECTION(malloc_hook) attribute.','line_number':58,'multiline':False]
['text':'','line_number':59,'multiline':False]
['text':' Note: the Invoke*Hook() functions are defined in malloc_hook-inl.h.  If you','line_number':60,'multiline':False]
['text':' need to invoke a hook (which you shouldn't unless you're part of tcmalloc),','line_number':61,'multiline':False]
['text':' be sure to #include malloc_hook-inl.h in addition to malloc_hook.h.','line_number':62,'multiline':False]
['text':'','line_number':63,'multiline':False]
['text':' NOTE FOR C USERS: If you want to use malloc_hook functionality from','line_number':64,'multiline':False]
['text':' a C program, #include malloc_hook_c.h instead of this file.','line_number':65,'multiline':False]
['text':' a C version of the malloc_hook interface','line_number':73,'multiline':False]
['text':' Annoying stuff for windows -- makes sure clients can import these functions','line_number':76,'multiline':False]
['text':' The C++ methods below call the C version (MallocHook_*), and thus','line_number':85,'multiline':False]
['text':' convert between an int and a bool.  Windows complains about this','line_number':86,'multiline':False]
['text':' (a "performance warning") which we don't care about, so we suppress.','line_number':87,'multiline':False]
['text':' Note: malloc_hook_c.h defines MallocHook_*Hook and','line_number':93,'multiline':False]
['text':' MallocHook_{Add,Remove}*Hook.  The version of these inside the MallocHook','line_number':94,'multiline':False]
['text':' class are defined in terms of the malloc_hook_c version.  See malloc_hook_c.h','line_number':95,'multiline':False]
['text':' for details of these types/functions.','line_number':96,'multiline':False]
['text':' The NewHook is invoked whenever an object is allocated.','line_number':100,'multiline':False]
['text':' It may be passed NULL if the allocator returned NULL.','line_number':101,'multiline':False]
['text':' The DeleteHook is invoked whenever an object is deallocated.','line_number':111,'multiline':False]
['text':' It may be passed NULL if the caller is trying to delete NULL.','line_number':112,'multiline':False]
['text':' The PreMmapHook is invoked with mmap or mmap64 arguments just','line_number':122,'multiline':False]
['text':' before the call is actually made.  Such a hook may be useful','line_number':123,'multiline':False]
['text':' in memory limited contexts, to catch allocations that will exceed','line_number':124,'multiline':False]
['text':' a memory limit, and take outside actions to increase that limit.','line_number':125,'multiline':False]
['text':' The MmapReplacement is invoked after the PreMmapHook but before','line_number':140,'multiline':False]
['text':' the call is actually made. The MmapReplacement should return true','line_number':141,'multiline':False]
['text':' if it handled the call, or false if it is still necessary to','line_number':142,'multiline':False]
['text':' call mmap/mmap64.','line_number':143,'multiline':False]
['text':' This should be used only by experts, and users must be be','line_number':144,'multiline':False]
['text':' extremely careful to avoid recursive calls to mmap. The replacement','line_number':145,'multiline':False]
['text':' should be async signal safe.','line_number':146,'multiline':False]
['text':' Only one MmapReplacement is supported. After setting an MmapReplacement','line_number':147,'multiline':False]
['text':' you must call RemoveMmapReplacement before calling SetMmapReplacement','line_number':148,'multiline':False]
['text':' again.','line_number':149,'multiline':False]
['text':' The MmapHook is invoked whenever a region of memory is mapped.','line_number':166,'multiline':False]
['text':' It may be passed MAP_FAILED if the mmap failed.','line_number':167,'multiline':False]
['text':' The MunmapReplacement is invoked with munmap arguments just before','line_number':183,'multiline':False]
['text':' the call is actually made. The MunmapReplacement should return true','line_number':184,'multiline':False]
['text':' if it handled the call, or false if it is still necessary to','line_number':185,'multiline':False]
['text':' call munmap.','line_number':186,'multiline':False]
['text':' This should be used only by experts. The replacement should be','line_number':187,'multiline':False]
['text':' async signal safe.','line_number':188,'multiline':False]
['text':' Only one MunmapReplacement is supported. After setting an','line_number':189,'multiline':False]
['text':' MunmapReplacement you must call RemoveMunmapReplacement before','line_number':190,'multiline':False]
['text':' calling SetMunmapReplacement again.','line_number':191,'multiline':False]
['text':' The MunmapHook is invoked whenever a region of memory is unmapped.','line_number':203,'multiline':False]
['text':' The MremapHook is invoked whenever a region of memory is remapped.','line_number':213,'multiline':False]
['text':' The PreSbrkHook is invoked just before sbrk is called -- except when','line_number':228,'multiline':False]
['text':' the increment is 0.  This is because sbrk(0) is often called','line_number':229,'multiline':False]
['text':' to get the top of the memory stack, and is not actually a','line_number':230,'multiline':False]
['text':' memory-allocation call.  It may be useful in memory-limited contexts,','line_number':231,'multiline':False]
['text':' to catch allocations that will exceed the limit and take outside','line_number':232,'multiline':False]
['text':' actions to increase such a limit.','line_number':233,'multiline':False]
['text':' The SbrkHook is invoked whenever sbrk is called -- except when','line_number':243,'multiline':False]
['text':' the increment is 0.  This is because sbrk(0) is often called','line_number':244,'multiline':False]
['text':' to get the top of the memory stack, and is not actually a','line_number':245,'multiline':False]
['text':' memory-allocation call.','line_number':246,'multiline':False]
['text':' Get the current stack trace.  Try to skip all routines up to and','line_number':256,'multiline':False]
['text':' and including the caller of MallocHook::Invoke*.','line_number':257,'multiline':False]
['text':' Use "skip_count" (similarly to GetStackTrace from stacktrace.h)','line_number':258,'multiline':False]
['text':' as a hint about how many routines to skip if better information','line_number':259,'multiline':False]
['text':' is not available.','line_number':260,'multiline':False]
['text':' Unhooked versions of mmap() and munmap().   These should be used','line_number':266,'multiline':False]
['text':' only by experts, since they bypass heapchecking, etc.','line_number':267,'multiline':False]
['text':' Note: These do not run hooks, but they still use the MmapReplacement','line_number':268,'multiline':False]
['text':' and MunmapReplacement.','line_number':269,'multiline':False]
['text':' The following are DEPRECATED.','line_number':274,'multiline':False]
['text':' End of DEPRECATED methods.','line_number':314,'multiline':False]
['text':' Slow path versions of Invoke*Hook.','line_number':317,'multiline':False]
['text':' _MALLOC_HOOK_H_ ','line_number':359,'multiline':True]
