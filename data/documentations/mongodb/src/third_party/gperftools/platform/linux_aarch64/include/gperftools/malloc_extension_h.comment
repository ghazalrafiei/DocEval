['text':' -*- Mode: C++; c-basic-offset: 2; indent-tabs-mode: nil -*-','line_number':1,'multiline':False]
['text':' Copyright (c) 2005, Google Inc.','line_number':2,'multiline':False]
['text':' All rights reserved.','line_number':3,'multiline':False]
['text':'','line_number':4,'multiline':False]
['text':' Redistribution and use in source and binary forms, with or without','line_number':5,'multiline':False]
['text':' modification, are permitted provided that the following conditions are','line_number':6,'multiline':False]
['text':' met:','line_number':7,'multiline':False]
['text':'','line_number':8,'multiline':False]
['text':'     * Redistributions of source code must retain the above copyright','line_number':9,'multiline':False]
['text':' notice, this list of conditions and the following disclaimer.','line_number':10,'multiline':False]
['text':'     * Redistributions in binary form must reproduce the above','line_number':11,'multiline':False]
['text':' copyright notice, this list of conditions and the following disclaimer','line_number':12,'multiline':False]
['text':' in the documentation and/or other materials provided with the','line_number':13,'multiline':False]
['text':' distribution.','line_number':14,'multiline':False]
['text':'     * Neither the name of Google Inc. nor the names of its','line_number':15,'multiline':False]
['text':' contributors may be used to endorse or promote products derived from','line_number':16,'multiline':False]
['text':' this software without specific prior written permission.','line_number':17,'multiline':False]
['text':'','line_number':18,'multiline':False]
['text':' THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS','line_number':19,'multiline':False]
['text':' "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT','line_number':20,'multiline':False]
['text':' LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR','line_number':21,'multiline':False]
['text':' A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT','line_number':22,'multiline':False]
['text':' OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,','line_number':23,'multiline':False]
['text':' SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT','line_number':24,'multiline':False]
['text':' LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,','line_number':25,'multiline':False]
['text':' DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY','line_number':26,'multiline':False]
['text':' THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT','line_number':27,'multiline':False]
['text':' (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE','line_number':28,'multiline':False]
['text':' OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.','line_number':29,'multiline':False]
['text':' ---','line_number':31,'multiline':False]
['text':' Author: Sanjay Ghemawat <opensource@google.com>','line_number':32,'multiline':False]
['text':'','line_number':33,'multiline':False]
['text':' Extra extensions exported by some malloc implementations.  These','line_number':34,'multiline':False]
['text':' extensions are accessed through a virtual base class so an','line_number':35,'multiline':False]
['text':' application can link against a malloc that does not implement these','line_number':36,'multiline':False]
['text':' extensions, and it will get default versions that do nothing.','line_number':37,'multiline':False]
['text':'','line_number':38,'multiline':False]
['text':' NOTE FOR C USERS: If you wish to use this functionality from within','line_number':39,'multiline':False]
['text':' a C program, see malloc_extension_c.h.','line_number':40,'multiline':False]
['text':' I can't #include config.h in this public API file, but I should','line_number':46,'multiline':False]
['text':' really use configure (and make malloc_extension.h a .in file) to','line_number':47,'multiline':False]
['text':' figure out if the system has stdint.h or not.  But I'm lazy, so','line_number':48,'multiline':False]
['text':' for now I'm assuming it's a problem only with MSVC.','line_number':49,'multiline':False]
['text':' Annoying stuff for windows -- makes sure clients can import these functions','line_number':56,'multiline':False]
['text':' One day, we could support other types of writers (perhaps for C?)','line_number':67,'multiline':False]
['text':' Interface to a pluggable system allocator.','line_number':76,'multiline':False]
['text':' Allocates "size"-byte of memory from system aligned with "alignment".','line_number':83,'multiline':False]
['text':' Returns NULL if failed. Otherwise, the returned pointer p up to and','line_number':84,'multiline':False]
['text':' including (p + actual_size -1) have been allocated.','line_number':85,'multiline':False]
['text':' The default implementations of the following routines do nothing.','line_number':89,'multiline':False]
['text':' All implementations should be thread-safe; the current one','line_number':90,'multiline':False]
['text':' (TCMallocImplementation) is.','line_number':91,'multiline':False]
['text':' Call this very early in the program execution -- say, in a global','line_number':96,'multiline':False]
['text':' constructor -- to set up parameters and state needed by all','line_number':97,'multiline':False]
['text':' instrumented malloc implemenatations.  One example: this routine','line_number':98,'multiline':False]
['text':' sets environemnt variables to tell STL to use libc's malloc()','line_number':99,'multiline':False]
['text':' instead of doing its own memory management.  This is safe to call','line_number':100,'multiline':False]
['text':' multiple times, as long as each time is before threads start up.','line_number':101,'multiline':False]
['text':' See "verify_memory.h" to see what these routines do','line_number':104,'multiline':False]
['text':' Get a human readable description of the following malloc data structures.','line_number':112,'multiline':False]
['text':' - Total inuse memory by application.','line_number':113,'multiline':False]
['text':' - Free memory(thread, central and page heap),','line_number':114,'multiline':False]
['text':' - Freelist of central cache, each class.','line_number':115,'multiline':False]
['text':' - Page heap freelist.','line_number':116,'multiline':False]
['text':' The state is stored as a null-terminated string','line_number':117,'multiline':False]
['text':' in a prefix of "buffer[0,buffer_length-1]".','line_number':118,'multiline':False]
['text':' REQUIRES: buffer_length > 0.','line_number':119,'multiline':False]
['text':' Outputs to "writer" a sample of live objects and the stack traces','line_number':122,'multiline':False]
['text':' that allocated these objects.  The format of the returned output','line_number':123,'multiline':False]
['text':' is equivalent to the output of the heap profiler and can','line_number':124,'multiline':False]
['text':' therefore be passed to "pprof". This function is equivalent to','line_number':125,'multiline':False]
['text':' ReadStackTraces. The main difference is that this function returns','line_number':126,'multiline':False]
['text':' serialized data appropriately formatted for use by the pprof tool.','line_number':127,'multiline':False]
['text':'','line_number':128,'multiline':False]
['text':' Since gperftools 2.8 heap samples are not de-duplicated by the','line_number':129,'multiline':False]
['text':' library anymore.','line_number':130,'multiline':False]
['text':'','line_number':131,'multiline':False]
['text':' NOTE: by default, tcmalloc does not do any heap sampling, and this','line_number':132,'multiline':False]
['text':'       function will always return an empty sample.  To get useful','line_number':133,'multiline':False]
['text':'       data from GetHeapSample, you must also set the environment','line_number':134,'multiline':False]
['text':'       variable TCMALLOC_SAMPLE_PARAMETER to a value such as 524288.','line_number':135,'multiline':False]
['text':' Outputs to "writer" the stack traces that caused growth in the','line_number':138,'multiline':False]
['text':' address space size.  The format of the returned output is','line_number':139,'multiline':False]
['text':' equivalent to the output of the heap profiler and can therefore','line_number':140,'multiline':False]
['text':' be passed to "pprof". This function is equivalent to','line_number':141,'multiline':False]
['text':' ReadHeapGrowthStackTraces. The main difference is that this function','line_number':142,'multiline':False]
['text':' returns serialized data appropriately formatted for use by the','line_number':143,'multiline':False]
['text':' pprof tool.  (This does not depend on, or require,','line_number':144,'multiline':False]
['text':' TCMALLOC_SAMPLE_PARAMETER.)','line_number':145,'multiline':False]
['text':' Invokes func(arg, range) for every controlled memory','line_number':148,'multiline':False]
['text':' range.  *range is filled in with information about the range.','line_number':149,'multiline':False]
['text':'','line_number':150,'multiline':False]
['text':' This is a best-effort interface useful only for performance','line_number':151,'multiline':False]
['text':' analysis.  The implementation may not call func at all.','line_number':152,'multiline':False]
['text':' -------------------------------------------------------------------','line_number':156,'multiline':False]
['text':' Control operations for getting and setting malloc implementation','line_number':157,'multiline':False]
['text':' specific parameters.  Some currently useful properties:','line_number':158,'multiline':False]
['text':'','line_number':159,'multiline':False]
['text':' generic','line_number':160,'multiline':False]
['text':' -------','line_number':161,'multiline':False]
['text':' "generic.current_allocated_bytes"','line_number':162,'multiline':False]
['text':'      Number of bytes currently allocated by application','line_number':163,'multiline':False]
['text':'      This property is not writable.','line_number':164,'multiline':False]
['text':'','line_number':165,'multiline':False]
['text':' "generic.heap_size"','line_number':166,'multiline':False]
['text':'      Number of bytes in the heap ==','line_number':167,'multiline':False]
['text':'            current_allocated_bytes +','line_number':168,'multiline':False]
['text':'            fragmentation +','line_number':169,'multiline':False]
['text':'            freed memory regions','line_number':170,'multiline':False]
['text':'      This property is not writable.','line_number':171,'multiline':False]
['text':'','line_number':172,'multiline':False]
['text':'  "generic.total_physical_bytes"','line_number':173,'multiline':False]
['text':'      Estimate of total bytes of the physical memory usage by the','line_number':174,'multiline':False]
['text':'      allocator ==','line_number':175,'multiline':False]
['text':'            current_allocated_bytes +','line_number':176,'multiline':False]
['text':'            fragmentation +','line_number':177,'multiline':False]
['text':'            metadata','line_number':178,'multiline':False]
['text':'      This property is not writable.','line_number':179,'multiline':False]
['text':'','line_number':180,'multiline':False]
['text':' tcmalloc','line_number':181,'multiline':False]
['text':' --------','line_number':182,'multiline':False]
['text':' "tcmalloc.max_total_thread_cache_bytes"','line_number':183,'multiline':False]
['text':'      Upper limit on total number of bytes stored across all','line_number':184,'multiline':False]
['text':'      per-thread caches.  Default: 16MB.','line_number':185,'multiline':False]
['text':'','line_number':186,'multiline':False]
['text':' "tcmalloc.current_total_thread_cache_bytes"','line_number':187,'multiline':False]
['text':'      Number of bytes used across all thread caches.','line_number':188,'multiline':False]
['text':'      This property is not writable.','line_number':189,'multiline':False]
['text':'','line_number':190,'multiline':False]
['text':' "tcmalloc.central_cache_free_bytes"','line_number':191,'multiline':False]
['text':'      Number of free bytes in the central cache that have been','line_number':192,'multiline':False]
['text':'      assigned to size classes. They always count towards virtual','line_number':193,'multiline':False]
['text':'      memory usage, and unless the underlying memory is swapped out','line_number':194,'multiline':False]
['text':'      by the OS, they also count towards physical memory usage.','line_number':195,'multiline':False]
['text':'      This property is not writable.','line_number':196,'multiline':False]
['text':'','line_number':197,'multiline':False]
['text':' "tcmalloc.transfer_cache_free_bytes"','line_number':198,'multiline':False]
['text':'      Number of free bytes that are waiting to be transfered between','line_number':199,'multiline':False]
['text':'      the central cache and a thread cache. They always count','line_number':200,'multiline':False]
['text':'      towards virtual memory usage, and unless the underlying memory','line_number':201,'multiline':False]
['text':'      is swapped out by the OS, they also count towards physical','line_number':202,'multiline':False]
['text':'      memory usage. This property is not writable.','line_number':203,'multiline':False]
['text':'','line_number':204,'multiline':False]
['text':' "tcmalloc.thread_cache_free_bytes"','line_number':205,'multiline':False]
['text':'      Number of free bytes in thread caches. They always count','line_number':206,'multiline':False]
['text':'      towards virtual memory usage, and unless the underlying memory','line_number':207,'multiline':False]
['text':'      is swapped out by the OS, they also count towards physical','line_number':208,'multiline':False]
['text':'      memory usage. This property is not writable.','line_number':209,'multiline':False]
['text':'','line_number':210,'multiline':False]
['text':' "tcmalloc.pageheap_free_bytes"','line_number':211,'multiline':False]
['text':'      Number of bytes in free, mapped pages in page heap.  These','line_number':212,'multiline':False]
['text':'      bytes can be used to fulfill allocation requests.  They','line_number':213,'multiline':False]
['text':'      always count towards virtual memory usage, and unless the','line_number':214,'multiline':False]
['text':'      underlying memory is swapped out by the OS, they also count','line_number':215,'multiline':False]
['text':'      towards physical memory usage.  This property is not writable.','line_number':216,'multiline':False]
['text':'','line_number':217,'multiline':False]
['text':' "tcmalloc.pageheap_unmapped_bytes"','line_number':218,'multiline':False]
['text':'        Number of bytes in free, unmapped pages in page heap.','line_number':219,'multiline':False]
['text':'        These are bytes that have been released back to the OS,','line_number':220,'multiline':False]
['text':'        possibly by one of the MallocExtension "Release" calls.','line_number':221,'multiline':False]
['text':'        They can be used to fulfill allocation requests, but','line_number':222,'multiline':False]
['text':'        typically incur a page fault.  They always count towards','line_number':223,'multiline':False]
['text':'        virtual memory usage, and depending on the OS, typically','line_number':224,'multiline':False]
['text':'        do not count towards physical memory usage.  This property','line_number':225,'multiline':False]
['text':'        is not writable.','line_number':226,'multiline':False]
['text':' -------------------------------------------------------------------','line_number':227,'multiline':False]
['text':' Get the named "property"'s value.  Returns true if the property','line_number':229,'multiline':False]
['text':' is known.  Returns false if the property is not a valid property','line_number':230,'multiline':False]
['text':' name for the current malloc implementation.','line_number':231,'multiline':False]
['text':' REQUIRES: property != NULL; value != NULL','line_number':232,'multiline':False]
['text':' Set the named "property"'s value.  Returns true if the property','line_number':235,'multiline':False]
['text':' is known and writable.  Returns false if the property is not a','line_number':236,'multiline':False]
['text':' valid property name for the current malloc implementation, or','line_number':237,'multiline':False]
['text':' is not writable.','line_number':238,'multiline':False]
['text':' REQUIRES: property != NULL','line_number':239,'multiline':False]
['text':' Mark the current thread as "idle".  This routine may optionally','line_number':242,'multiline':False]
['text':' be called by threads as a hint to the malloc implementation that','line_number':243,'multiline':False]
['text':' any thread-specific resources should be released.  Note: this may','line_number':244,'multiline':False]
['text':' be an expensive routine, so it should not be called too often.','line_number':245,'multiline':False]
['text':'','line_number':246,'multiline':False]
['text':' Also, if the code that calls this routine will go to sleep for','line_number':247,'multiline':False]
['text':' a while, it should take care to not allocate anything between','line_number':248,'multiline':False]
['text':' the call to this routine and the beginning of the sleep.','line_number':249,'multiline':False]
['text':'','line_number':250,'multiline':False]
['text':' Most malloc implementations ignore this routine.','line_number':251,'multiline':False]
['text':' Mark the current thread as "busy".  This routine should be','line_number':254,'multiline':False]
['text':' called after MarkThreadIdle() if the thread will now do more','line_number':255,'multiline':False]
['text':' work.  If this method is not called, performance may suffer.','line_number':256,'multiline':False]
['text':'','line_number':257,'multiline':False]
['text':' Most malloc implementations ignore this routine.','line_number':258,'multiline':False]
['text':' Gets the system allocator used by the malloc extension instance. Returns','line_number':261,'multiline':False]
['text':' NULL for malloc implementations that do not support pluggable system','line_number':262,'multiline':False]
['text':' allocators.','line_number':263,'multiline':False]
['text':' Sets the system allocator to the specified.','line_number':266,'multiline':False]
['text':'','line_number':267,'multiline':False]
['text':' Users could register their own system allocators for malloc implementation','line_number':268,'multiline':False]
['text':' that supports pluggable system allocators, such as TCMalloc, by doing:','line_number':269,'multiline':False]
['text':'   alloc = new MyOwnSysAllocator();','line_number':270,'multiline':False]
['text':'   MallocExtension::instance()->SetSystemAllocator(alloc);','line_number':271,'multiline':False]
['text':' It's up to users whether to fall back (recommended) to the default','line_number':272,'multiline':False]
['text':' system allocator (use GetSystemAllocator() above) or not. The caller is','line_number':273,'multiline':False]
['text':' responsible to any necessary locking.','line_number':274,'multiline':False]
['text':' See tcmalloc/system-alloc.h for the interface and','line_number':275,'multiline':False]
['text':'     tcmalloc/memfs_malloc.cc for the examples.','line_number':276,'multiline':False]
['text':'','line_number':277,'multiline':False]
['text':' It's a no-op for malloc implementations that do not support pluggable','line_number':278,'multiline':False]
['text':' system allocators.','line_number':279,'multiline':False]
['text':' Try to release num_bytes of free memory back to the operating','line_number':282,'multiline':False]
['text':' system for reuse.  Use this extension with caution -- to get this','line_number':283,'multiline':False]
['text':' memory back may require faulting pages back in by the OS, and','line_number':284,'multiline':False]
['text':' that may be slow.  (Currently only implemented in tcmalloc.)','line_number':285,'multiline':False]
['text':' Same as ReleaseToSystem() but release as much memory as possible.','line_number':288,'multiline':False]
['text':' Sets the rate at which we release unused memory to the system.','line_number':291,'multiline':False]
['text':' Zero means we never release memory back to the system.  Increase','line_number':292,'multiline':False]
['text':' this flag to return memory faster; decrease it to return memory','line_number':293,'multiline':False]
['text':' slower.  Reasonable rates are in the range [0,10].  (Currently','line_number':294,'multiline':False]
['text':' only implemented in tcmalloc).','line_number':295,'multiline':False]
['text':' Gets the release rate.  Returns a value < 0 if unknown.','line_number':298,'multiline':False]
['text':' Returns the estimated number of bytes that will be allocated for','line_number':301,'multiline':False]
['text':' a request of "size" bytes.  This is an estimate: an allocation of','line_number':302,'multiline':False]
['text':' SIZE bytes may reserve more bytes, but will never reserve less.','line_number':303,'multiline':False]
['text':' (Currently only implemented in tcmalloc, other implementations','line_number':304,'multiline':False]
['text':' always return SIZE.)','line_number':305,'multiline':False]
['text':' This is equivalent to malloc_good_size() in OS X.','line_number':306,'multiline':False]
['text':' Returns the actual number N of bytes reserved by tcmalloc for the','line_number':309,'multiline':False]
['text':' pointer p.  The client is allowed to use the range of bytes','line_number':310,'multiline':False]
['text':' [p, p+N) in any way it wishes (i.e. N is the "usable size" of this','line_number':311,'multiline':False]
['text':' allocation).  This number may be equal to or greater than the number','line_number':312,'multiline':False]
['text':' of bytes requested when p was allocated.','line_number':313,'multiline':False]
['text':' p must have been allocated by this malloc implementation,','line_number':314,'multiline':False]
['text':' must not be an interior pointer -- that is, must be exactly','line_number':315,'multiline':False]
['text':' the pointer returned to by malloc() et al., not some offset','line_number':316,'multiline':False]
['text':' from that -- and should not have been freed yet.  p may be NULL.','line_number':317,'multiline':False]
['text':' (Currently only implemented in tcmalloc; other implementations','line_number':318,'multiline':False]
['text':' will return 0.)','line_number':319,'multiline':False]
['text':' This is equivalent to malloc_size() in OS X, malloc_usable_size()','line_number':320,'multiline':False]
['text':' in glibc, and _msize() for windows.','line_number':321,'multiline':False]
['text':' Returns kOwned if this malloc implementation allocated the memory','line_number':324,'multiline':False]
['text':' pointed to by p, or kNotOwned if some other malloc implementation','line_number':325,'multiline':False]
['text':' allocated it or p is NULL.  May also return kUnknownOwnership if','line_number':326,'multiline':False]
['text':' the malloc implementation does not keep track of ownership.','line_number':327,'multiline':False]
['text':' REQUIRES: p must be a value returned from a previous call to','line_number':328,'multiline':False]
['text':' malloc(), calloc(), realloc(), memalign(), posix_memalign(),','line_number':329,'multiline':False]
['text':' valloc(), pvalloc(), new, or new[], and must refer to memory that','line_number':330,'multiline':False]
['text':' is currently allocated (so, for instance, you should not pass in','line_number':331,'multiline':False]
['text':' a pointer after having called free() on it).','line_number':332,'multiline':False]
['text':' NOTE: Enum values MUST be kept in sync with the version in','line_number':334,'multiline':False]
['text':' malloc_extension_c.h','line_number':335,'multiline':False]
['text':' The current malloc implementation.  Always non-NULL.','line_number':342,'multiline':False]
['text':' Change the malloc implementation.  Typically called by the','line_number':345,'multiline':False]
['text':' malloc implementation during initialization.','line_number':346,'multiline':False]
['text':' Returns detailed information about malloc's freelists. For each list,','line_number':349,'multiline':False]
['text':' return a FreeListInfo:','line_number':350,'multiline':False]
['text':' Each item in the vector refers to a different freelist. The lists','line_number':357,'multiline':False]
['text':' are identified by the range of allocations that objects in the','line_number':358,'multiline':False]
['text':' list can satisfy ([min_object_size, max_object_size]) and the','line_number':359,'multiline':False]
['text':' type of freelist (see below). The current size of the list is','line_number':360,'multiline':False]
['text':' returned in total_bytes_free (which count against a processes','line_number':361,'multiline':False]
['text':' resident and virtual size).','line_number':362,'multiline':False]
['text':'','line_number':363,'multiline':False]
['text':' Currently supported types are:','line_number':364,'multiline':False]
['text':'','line_number':365,'multiline':False]
['text':' "tcmalloc.page{_unmapped}" - tcmalloc's page heap. An entry for each size','line_number':366,'multiline':False]
['text':'          class in the page heap is returned. Bytes in "page_unmapped"','line_number':367,'multiline':False]
['text':'          are no longer backed by physical memory and do not count against','line_number':368,'multiline':False]
['text':'          the resident size of a process.','line_number':369,'multiline':False]
['text':'','line_number':370,'multiline':False]
['text':' "tcmalloc.large{_unmapped}" - tcmalloc's list of objects larger','line_number':371,'multiline':False]
['text':'          than the largest page heap size class. Only one "large"','line_number':372,'multiline':False]
['text':'          entry is returned. There is no upper-bound on the size','line_number':373,'multiline':False]
['text':'          of objects in the large free list; this call returns','line_number':374,'multiline':False]
['text':'          kint64max for max_object_size.  Bytes in','line_number':375,'multiline':False]
['text':'          "large_unmapped" are no longer backed by physical memory','line_number':376,'multiline':False]
['text':'          and do not count against the resident size of a process.','line_number':377,'multiline':False]
['text':'','line_number':378,'multiline':False]
['text':' "tcmalloc.central" - tcmalloc's central free-list. One entry per','line_number':379,'multiline':False]
['text':'          size-class is returned. Never unmapped.','line_number':380,'multiline':False]
['text':'','line_number':381,'multiline':False]
['text':' "debug.free_queue" - free objects queued by the debug allocator','line_number':382,'multiline':False]
['text':'                      and not returned to tcmalloc.','line_number':383,'multiline':False]
['text':'','line_number':384,'multiline':False]
['text':' "tcmalloc.thread" - tcmalloc's per-thread caches. Never unmapped.','line_number':385,'multiline':False]
['text':' Get a list of stack traces of sampled allocation points.  Returns','line_number':388,'multiline':False]
['text':' a pointer to a "new[]-ed" result array, and stores the sample','line_number':389,'multiline':False]
['text':' period in "sample_period".','line_number':390,'multiline':False]
['text':'','line_number':391,'multiline':False]
['text':' The state is stored as a sequence of adjacent entries','line_number':392,'multiline':False]
['text':' in the returned array.  Each entry has the following form:','line_number':393,'multiline':False]
['text':'    uintptr_t count;        // Number of objects with following trace','line_number':394,'multiline':False]
['text':'    uintptr_t size;         // Total size of objects with following trace','line_number':395,'multiline':False]
['text':'    uintptr_t depth;        // Number of PC values in stack trace','line_number':396,'multiline':False]
['text':'    void*     stack[depth]; // PC values that form the stack trace','line_number':397,'multiline':False]
['text':'','line_number':398,'multiline':False]
['text':' The list of entries is terminated by a "count" of 0.','line_number':399,'multiline':False]
['text':'','line_number':400,'multiline':False]
['text':' It is the responsibility of the caller to "delete[]" the returned array.','line_number':401,'multiline':False]
['text':'','line_number':402,'multiline':False]
['text':' May return NULL to indicate no results.','line_number':403,'multiline':False]
['text':'','line_number':404,'multiline':False]
['text':' This is an internal extension.  Callers should use the more','line_number':405,'multiline':False]
['text':' convenient "GetHeapSample(string*)" method defined above.','line_number':406,'multiline':False]
['text':' Like ReadStackTraces(), but returns stack traces that caused growth','line_number':409,'multiline':False]
['text':' in the address space size.','line_number':410,'multiline':False]
['text':' Returns the size in bytes of the calling threads cache.','line_number':413,'multiline':False]
['text':' Like MarkThreadIdle, but does not destroy the internal data','line_number':416,'multiline':False]
['text':' structures of the thread cache. When the thread resumes, it wil','line_number':417,'multiline':False]
['text':' have an empty cache but will not need to pay to reconstruct the','line_number':418,'multiline':False]
['text':' cache data structures.','line_number':419,'multiline':False]
['text':' Invokes func(arg, classinfo) for every size class.','line_number':422,'multiline':False]
['text':' *classinfo is filled in with information about the size class.','line_number':423,'multiline':False]
['text':' Information passed per range.  More fields may be added later.','line_number':431,'multiline':False]
['text':' Application is using this range','line_number':434,'multiline':False]
['text':' Range is currently free','line_number':435,'multiline':False]
['text':' Backing physical memory has been returned to the OS','line_number':436,'multiline':False]
['text':' More enum values may be added in the future','line_number':438,'multiline':False]
['text':' Address of range','line_number':441,'multiline':False]
['text':' Byte length of range','line_number':442,'multiline':False]
['text':' Type of this range','line_number':443,'multiline':False]
['text':' Fraction of range that is being used (0 if !INUSE)','line_number':444,'multiline':False]
['text':' Perhaps add the following:','line_number':446,'multiline':False]
['text':' - stack trace if this range was sampled','line_number':447,'multiline':False]
['text':' - heap growth stack trace if applicable to this range','line_number':448,'multiline':False]
['text':' - age when allocated (for inuse) or freed (if not in use)','line_number':449,'multiline':False]
['text':' namespace base','line_number':471,'multiline':False]
['text':' BASE_MALLOC_EXTENSION_H_','line_number':473,'multiline':False]
