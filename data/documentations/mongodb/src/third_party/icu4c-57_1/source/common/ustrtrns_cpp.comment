['text':'
******************************************************************************
*
*   Copyright (C) 2001-2016, International Business Machines
*   Corporation and others.  All Rights Reserved.
*
******************************************************************************
*
* File ustrtrns.cpp
*
* Modification History:
*
*   Date        Name        Description
*   9/10/2001    Ram    Creation.
******************************************************************************
','line_number':1,'multiline':True]
['text':'******************************************************************************
 *
 * u_strTo* and u_strFrom* APIs
 * WCS functions moved to ustr_wcs.c for better modularization
 *
 *******************************************************************************
 ','line_number':18,'multiline':True]
['text':' args check ','line_number':52,'multiline':True]
['text':' simple loop for conversion of a NUL-terminated BMP string ','line_number':74,'multiline':True]
['text':' "complicated" case, find the end of the remaining string ','line_number':86,'multiline':True]
['text':' convert with length ','line_number':93,'multiline':True]
['text':' usually "loops" once; twice only for writing subchar ','line_number':97,'multiline':True]
['text':' surrogate code point, or not a Unicode code point at all ','line_number':114,'multiline':True]
['text':' Terminate the buffer ','line_number':131,'multiline':True]
['text':' args check ','line_number':167,'multiline':True]
['text':' simple loop for conversion of a NUL-terminated BMP string ','line_number':189,'multiline':True]
['text':' "complicated" case, find the end of the remaining string ','line_number':200,'multiline':True]
['text':' convert with length ','line_number':207,'multiline':True]
['text':' write or count ch below ','line_number':211,'multiline':True]
['text':' unpaired surrogate ','line_number':216,'multiline':True]
['text':' Terminate the buffer ','line_number':237,'multiline':True]
['text':' for utf8_nextCharSafeBodyTerminated() ','line_number':257,'multiline':True]
['text':'
 * Version of utf8_nextCharSafeBody() with the following differences:
 * - checks for NUL termination instead of length
 * - works with pointers instead of indexes
 * - always strict (strict==-1)
 *
 * *ps points to after the lead byte and will be moved to after the last trail byte.
 * c is the lead byte.
 * @return the code point, or U_SENTINEL
 ','line_number':261,'multiline':True]
['text':' count==0 for illegally leading trail bytes and the illegal bytes 0xfe and 0xff ','line_number':278,'multiline':True]
['text':' each branch falls through to the next one ','line_number':280,'multiline':True]
['text':' count>=4 is always illegal: no more than 3 trail bytes in Unicode's UTF-8 ','line_number':283,'multiline':True]
['text':' not a trail byte, or code point>0x10ffff (outside Unicode) ','line_number':290,'multiline':True]
['text':' not a trail byte ','line_number':298,'multiline':True]
['text':' not a trail byte ','line_number':307,'multiline':True]
['text':' no default branch to optimize switch()  - all values are covered ','line_number':314,'multiline':True]
['text':' correct sequence - all trail bytes have (b7..b6)==(10)? ','line_number':317,'multiline':True]
['text':' illegal is also set if count>=4 ','line_number':318,'multiline':True]
['text':' error handling ','line_number':320,'multiline':True]
['text':' don't go beyond this sequence ','line_number':321,'multiline':True]
['text':'
 * Version of utf8_nextCharSafeBody() with the following differences:
 * - works with pointers instead of indexes
 * - always strict (strict==-1)
 *
 * *ps points to after the lead byte and will be moved to after the last trail byte.
 * c is the lead byte.
 * @return the code point, or U_SENTINEL
 ','line_number':333,'multiline':True]
['text':' count==0 for illegally leading trail bytes and the illegal bytes 0xfe and 0xff ','line_number':349,'multiline':True]
['text':' each branch falls through to the next one ','line_number':351,'multiline':True]
['text':' count>=4 is always illegal: no more than 3 trail bytes in Unicode's UTF-8 ','line_number':354,'multiline':True]
['text':' code point>0x10ffff, outside Unicode ','line_number':363,'multiline':True]
['text':' no default branch to optimize switch()  - all values are covered ','line_number':380,'multiline':True]
['text':' too few bytes left ','line_number':383,'multiline':True]
['text':' correct sequence - all trail bytes have (b7..b6)==(10)? ','line_number':386,'multiline':True]
['text':' illegal is also set if count>=4 ','line_number':387,'multiline':True]
['text':' error handling ','line_number':390,'multiline':True]
['text':' don't go beyond this sequence ','line_number':391,'multiline':True]
['text':' trail bytes ','line_number':416,'multiline':True]
['text':' args check ','line_number':419,'multiline':True]
['text':'
     * Inline processing of UTF-8 byte sequences:
     *
     * Byte sequences for the most common characters are handled inline in
     * the conversion loops. In order to reduce the path lengths for those
     * characters, the tests are arranged in a kind of binary search.
     * ASCII (<=0x7f) is checked first, followed by the dividing point
     * between 2- and 3-byte sequences (0xe0).
     * The 3-byte branch is tested first to speed up CJK text.
     * The compiler should combine the subtractions for the two tests for 0xe0.
     * Each branch then tests for the other end of its range.
     ','line_number':437,'multiline':True]
['text':'
         * Transform a NUL-terminated string.
         * The code explicitly checks for NULs only in the lead byte position.
         * A NUL byte in the trail byte position fails the trail byte range check anyway.
         ','line_number':451,'multiline':True]
['text':' handle U+1000..U+CFFF inline ','line_number':462,'multiline':True]
['text':' no need for (ch & 0xf) because the upper bits are truncated after <<12 in the cast to (UChar) ','line_number':467,'multiline':True]
['text':' handle U+0080..U+07FF inline ','line_number':473,'multiline':True]
['text':' function call for "complicated" and error cases ','line_number':483,'multiline':True]
['text':' continue after the lead byte ','line_number':484,'multiline':True]
['text':' Pre-flight the rest of the string. ','line_number':503,'multiline':True]
['text':' handle U+1000..U+CFFF inline ','line_number':510,'multiline':True]
['text':' handle U+0080..U+07FF inline ','line_number':520,'multiline':True]
['text':' function call for "complicated" and error cases ','line_number':530,'multiline':True]
['text':' continue after the lead byte ','line_number':531,'multiline':True]
['text':' srcLength >= 0 ','line_number':540,'multiline':True]
['text':' Faster loop without ongoing checking for pSrcLimit and pDestLimit. ','line_number':544,'multiline':True]
['text':'
             * Each iteration of the inner loop progresses by at most 3 UTF-8
             * bytes and one UChar, for most characters.
             * For supplementary code points (4 & 2), which are rare,
             * there is an additional adjustment.
             ','line_number':546,'multiline':True]
['text':' min(remaining dest, remaining src/3) ','line_number':555,'multiline':True]
['text':'
                 * Too much overhead if we get near the end of the string,
                 * continue with the next loop.
                 ','line_number':558,'multiline':True]
['text':' handle U+1000..U+CFFF inline ','line_number':572,'multiline':True]
['text':' no need for (ch & 0xf) because the upper bits are truncated after <<12 in the cast to (UChar) ','line_number':577,'multiline':True]
['text':' handle U+0080..U+07FF inline ','line_number':583,'multiline':True]
['text':'
                         * We may read up to six bytes and write up to two UChars,
                         * which we didn't account for with computing count,
                         * so we adjust it here.
                         ','line_number':594,'multiline':True]
['text':' function call for "complicated" and error cases ','line_number':604,'multiline':True]
['text':' continue after the lead byte ','line_number':605,'multiline':True]
['text':' handle U+1000..U+CFFF inline ','line_number':627,'multiline':True]
['text':' no need for (ch & 0xf) because the upper bits are truncated after <<12 in the cast to (UChar) ','line_number':633,'multiline':True]
['text':' handle U+0080..U+07FF inline ','line_number':639,'multiline':True]
['text':' function call for "complicated" and error cases ','line_number':650,'multiline':True]
['text':' continue after the lead byte ','line_number':651,'multiline':True]
['text':' do not fill the dest buffer just count the UChars needed ','line_number':669,'multiline':True]
['text':' handle U+1000..U+CFFF inline ','line_number':677,'multiline':True]
['text':' handle U+0080..U+07FF inline ','line_number':688,'multiline':True]
['text':' function call for "complicated" and error cases ','line_number':699,'multiline':True]
['text':' continue after the lead byte ','line_number':700,'multiline':True]
['text':' Terminate the buffer ','line_number':721,'multiline':True]
['text':' args check ','line_number':753,'multiline':True]
['text':' Transform a NUL-terminated string. ','line_number':766,'multiline':True]
['text':' trail bytes ','line_number':768,'multiline':True]
['text':'
                 * ASCII, or a trail byte in lead position which is treated like
                 * a single-byte sequence for better character boundary
                 * resynchronization after illegal sequences.
                 ','line_number':772,'multiline':True]
['text':' U+0080..U+07FF ','line_number':780,'multiline':True]
['text':' 0x3080 = (0xc0 << 6) + 0x80 ','line_number':782,'multiline':True]
['text':' U+0800..U+FFFF ','line_number':787,'multiline':True]
['text':' no need for (ch & 0xf) because the upper bits are truncated after <<12 in the cast to (UChar) ','line_number':789,'multiline':True]
['text':' 0x2080 = (0x80 << 6) + 0x80 ','line_number':790,'multiline':True]
['text':' f0..f4 ','line_number':795,'multiline':True]
['text':' U+10000..U+10FFFF ','line_number':795,'multiline':True]
['text':' 0x3c82080 = (0xf0 << 18) + (0x80 << 12) + (0x80 << 6) + 0x80 ','line_number':798,'multiline':True]
['text':' truncated character at the end ','line_number':811,'multiline':True]
['text':' Pre-flight the rest of the string. ','line_number':817,'multiline':True]
['text':'
                 * ASCII, or a trail byte in lead position which is treated like
                 * a single-byte sequence for better character boundary
                 * resynchronization after illegal sequences.
                 ','line_number':820,'multiline':True]
['text':' U+0080..U+07FF ','line_number':828,'multiline':True]
['text':' U+0800..U+FFFF ','line_number':834,'multiline':True]
['text':' f0..f4 ','line_number':840,'multiline':True]
['text':' U+10000..U+10FFFF ','line_number':840,'multiline':True]
['text':' truncated character at the end ','line_number':848,'multiline':True]
['text':' srcLength >= 0 ','line_number':852,'multiline':True]
['text':'
         * This function requires that if srcLength is given, then it must be
         * destCapatity >= srcLength so that we need not check for
         * destination buffer overflow in the loop.
         ','line_number':855,'multiline':True]
['text':' this likely overestimates the true destLength! ','line_number':862,'multiline':True]
['text':' temporarily reduce pSrcLimit ','line_number':869,'multiline':True]
['text':' in this loop, we can always access at least 4 bytes, up to pSrc+3 ','line_number':871,'multiline':True]
['text':'
                     * ASCII, or a trail byte in lead position which is treated like
                     * a single-byte sequence for better character boundary
                     * resynchronization after illegal sequences.
                     ','line_number':875,'multiline':True]
['text':' U+0080..U+07FF ','line_number':881,'multiline':True]
['text':' 0x3080 = (0xc0 << 6) + 0x80 ','line_number':882,'multiline':True]
['text':' U+0800..U+FFFF ','line_number':884,'multiline':True]
['text':' no need for (ch & 0xf) because the upper bits are truncated after <<12 in the cast to (UChar) ','line_number':885,'multiline':True]
['text':' 0x2080 = (0x80 << 6) + 0x80 ','line_number':886,'multiline':True]
['text':' f0..f4 ','line_number':889,'multiline':True]
['text':' U+10000..U+10FFFF ','line_number':889,'multiline':True]
['text':' 0x3c82080 = (0xf0 << 18) + (0x80 << 12) + (0x80 << 6) + 0x80 ','line_number':890,'multiline':True]
['text':' restore original pSrcLimit ','line_number':899,'multiline':True]
['text':'
                 * ASCII, or a trail byte in lead position which is treated like
                 * a single-byte sequence for better character boundary
                 * resynchronization after illegal sequences.
                 ','line_number':905,'multiline':True]
['text':' U+0080..U+07FF ','line_number':912,'multiline':True]
['text':' 0x3080 = (0xc0 << 6) + 0x80 ','line_number':914,'multiline':True]
['text':' U+0800..U+FFFF ','line_number':918,'multiline':True]
['text':' no need for (ch & 0xf) because the upper bits are truncated after <<12 in the cast to (UChar) ','line_number':920,'multiline':True]
['text':' 0x2080 = (0x80 << 6) + 0x80 ','line_number':921,'multiline':True]
['text':' f0..f4 ','line_number':927,'multiline':True]
['text':' U+10000..U+10FFFF ','line_number':927,'multiline':True]
['text':' 0x3c82080 = (0xf0 << 18) + (0x80 << 12) + (0x80 << 6) + 0x80 ','line_number':929,'multiline':True]
['text':' truncated character at the end ','line_number':940,'multiline':True]
['text':' Terminate the buffer ','line_number':952,'multiline':True]
['text':' it is 0<=c<=0x10ffff and not a surrogate if called by a validating function ','line_number':960,'multiline':True]
['text':' if((uint32_t)(c)<=0x10ffff) ','line_number':970,'multiline':True]
['text':' args check ','line_number':994,'multiline':True]
['text':' ch is a surrogate ','line_number':1039,'multiline':True]
['text':'need not check for NUL because NUL fails U16_IS_TRAIL() anyway','line_number':1042,'multiline':True]
['text':' Unicode 3.2 forbids surrogate code points in UTF-8 ','line_number':1050,'multiline':True]
['text':' convert and append','line_number':1057,'multiline':True]
['text':' Unicode 3.2 forbids surrogate code points in UTF-8 ','line_number':1079,'multiline':True]
['text':' Faster loop without ongoing checking for pSrcLimit and pDestLimit. ','line_number':1088,'multiline':True]
['text':'
             * Each iteration of the inner loop progresses by at most 3 UTF-8
             * bytes and one UChar, for most characters.
             * For supplementary code points (4 & 2), which are rare,
             * there is an additional adjustment.
             ','line_number':1090,'multiline':True]
['text':' min(remaining dest/3, remaining src) ','line_number':1099,'multiline':True]
['text':'
                 * Too much overhead if we get near the end of the string,
                 * continue with the next loop.
                 ','line_number':1102,'multiline':True]
['text':' ch is a surrogate ','line_number':1119,'multiline':True]
['text':'
                     * We will read two UChars and probably output four bytes,
                     * which we didn't account for with computing count,
                     * so we adjust it here.
                     ','line_number':1120,'multiline':True]
['text':' undo ch=*pSrc++ for the lead surrogate ','line_number':1126,'multiline':True]
['text':' recompute count ','line_number':1127,'multiline':True]
['text':' writing 4 bytes per 2 UChars is ok ','line_number':1134,'multiline':True]
['text':' Unicode 3.2 forbids surrogate code points in UTF-8 ','line_number':1140,'multiline':True]
['text':' convert and append','line_number':1149,'multiline':True]
['text':' ch is a surrogate ','line_number':1182,'multiline':True]
['text':' Unicode 3.2 forbids surrogate code points in UTF-8 ','line_number':1192,'multiline':True]
['text':' convert and append','line_number':1199,'multiline':True]
['text':' Unicode 3.2 forbids surrogate code points in UTF-8 ','line_number':1222,'multiline':True]
['text':' Terminate the buffer ','line_number':1239,'multiline':True]
['text':' trail bytes ','line_number':1274,'multiline':True]
['text':' args check ','line_number':1277,'multiline':True]
['text':'
         * Transform a NUL-terminated ASCII string.
         * Handle non-ASCII strings with slower code.
         ','line_number':1295,'multiline':True]
['text':' Terminate the buffer ','line_number':1309,'multiline':True]
['text':' Faster loop without ongoing checking for pSrcLimit and pDestLimit. ','line_number':1316,'multiline':True]
['text':' fast ASCII loop ','line_number':1322,'multiline':True]
['text':'
         * Each iteration of the inner loop progresses by at most 3 UTF-8
         * bytes and one UChar.
         ','line_number':1333,'multiline':True]
['text':' min(remaining dest, remaining src/3) ','line_number':1339,'multiline':True]
['text':'
             * Too much overhead if we get near the end of the string,
             * continue with the next loop.
             ','line_number':1342,'multiline':True]
['text':' handle U+0000..U+FFFF inline ','line_number':1355,'multiline':True]
['text':' no need for (ch & 0xf) because the upper bits are truncated after <<12 in the cast to (UChar) ','line_number':1360,'multiline':True]
['text':' handle U+0000..U+07FF inline ','line_number':1366,'multiline':True]
['text':'
                     * We need to write two UChars, adjusted count for that,
                     * and ran out of space.
                     ','line_number':1380,'multiline':True]
['text':' function call for error cases ','line_number':1386,'multiline':True]
['text':' continue after the lead byte ','line_number':1387,'multiline':True]
['text':' handle U+0000..U+FFFF inline ','line_number':1408,'multiline':True]
['text':' no need for (ch & 0xf) because the upper bits are truncated after <<12 in the cast to (UChar) ','line_number':1414,'multiline':True]
['text':' handle U+0000..U+07FF inline ','line_number':1420,'multiline':True]
['text':' function call for error cases ','line_number':1435,'multiline':True]
['text':' continue after the lead byte ','line_number':1436,'multiline':True]
['text':' do not fill the dest buffer just count the UChars needed ','line_number':1454,'multiline':True]
['text':' handle U+0000..U+FFFF inline ','line_number':1462,'multiline':True]
['text':' handle U+0000..U+07FF inline ','line_number':1473,'multiline':True]
['text':' function call for error cases ','line_number':1488,'multiline':True]
['text':' continue after the lead byte ','line_number':1489,'multiline':True]
['text':' Terminate the buffer ','line_number':1506,'multiline':True]
['text':' args check ','line_number':1526,'multiline':True]
['text':' Convert NUL-terminated ASCII, then find the string length. ','line_number':1538,'multiline':True]
['text':' Terminate the buffer ','line_number':1549,'multiline':True]
['text':' Faster loop without ongoing checking for pSrcLimit and pDestLimit. ','line_number':1556,'multiline':True]
['text':' fast ASCII loop ','line_number':1562,'multiline':True]
['text':'
         * Each iteration of the inner loop progresses by at most 3 UTF-8
         * bytes and one UChar.
         ','line_number':1573,'multiline':True]
['text':' min(remaining dest/3, remaining src) ','line_number':1579,'multiline':True]
['text':'
             * Too much overhead if we get near the end of the string,
             * continue with the next loop.
             ','line_number':1582,'multiline':True]
['text':' Terminate the buffer ','line_number':1647,'multiline':True]
