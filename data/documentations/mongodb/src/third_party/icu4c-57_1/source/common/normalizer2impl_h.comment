['text':'
*******************************************************************************
*
*   Copyright (C) 2009-2014, International Business Machines
*   Corporation and others.  All Rights Reserved.
*
*******************************************************************************
*   file name:  normalizer2impl.h
*   encoding:   US-ASCII
*   tab size:   8 (not used)
*   indentation:4
*
*   created on: 2009nov22
*   created by: Markus W. Scherer
','line_number':1,'multiline':True]
['text':' Korean Hangul and Jamo constants ','line_number':38,'multiline':True]
['text':' "lead" jamo ','line_number':40,'multiline':True]
['text':' "vowel" jamo ','line_number':42,'multiline':True]
['text':' "trail" jamo ','line_number':44,'multiline':True]
['text':'*
     * Decomposes c, which must be a Hangul syllable, into buffer
     * and returns the length of the decomposition (2 or 3).
     ','line_number':75,'multiline':True]
['text':'*
     * Decomposes c, which must be a Hangul syllable, into buffer.
     * This is the raw, not recursive, decomposition. Its length is always 2.
     ','line_number':93,'multiline':True]
['text':' LV syllable','line_number':106,'multiline':False]
['text':' no instantiation','line_number':111,'multiline':False]
['text':' For Hangul composition, replacing the Leading consonant Jamo with the syllable.','line_number':137,'multiline':False]
['text':' s must be in NFD, otherwise change the implementation.','line_number':147,'multiline':False]
['text':'
     * TODO: Revisit whether it makes sense to track reorderStart.
     * It is set to after the last known character with cc<=1,
     * which stops previousCC() before it reads that character and looks up its cc.
     * previousCC() is normally only called from insert().
     * In other words, reorderStart speeds up the insertion of a combining mark
     * into a multi-combining mark sequence where it does not belong at the end.
     * This might not be worth the trouble.
     * On the other hand, it's not a huge amount of trouble.
     *
     * We probably need it for UNORM_SIMPLE_APPEND.
     ','line_number':180,'multiline':True]
['text':' private backward iterator','line_number':211,'multiline':False]
['text':' Requires start<codePointStart.','line_number':213,'multiline':False]
['text':' Returns 0 if there is no previous character.','line_number':214,'multiline':False]
['text':' low-level properties ------------------------------------------------ ***','line_number':233,'multiline':False]
['text':'*
     * Returns the FCD data for code point c.
     * @param c A Unicode code point.
     * @return The lccc(c) in bits 15..8 and tccc(c) in bits 7..0.
     ','line_number':267,'multiline':True]
['text':'*
     * Returns the FCD data for the next code point (post-increment).
     * Might skip only a lead surrogate rather than the whole surrogate pair if none of
     * the supplementary code points associated with the lead surrogate have non-zero FCD data.
     * @param s A valid pointer into a string. Requires s!=limit.
     * @param limit The end of the string, or NULL.
     * @return The lccc(c) in bits 15..8 and tccc(c) in bits 7..0.
     ','line_number':282,'multiline':True]
['text':'*
     * Returns the FCD data for the previous code point (pre-decrement).
     * @param start The start of the string.
     * @param s A valid pointer into a string. Requires start<s.
     * @return The lccc(c) in bits 15..8 and tccc(c) in bits 7..0.
     ','line_number':304,'multiline':True]
['text':'* Returns the FCD data for U+0000<=c<U+0180. ','line_number':329,'multiline':True]
['text':'* Returns TRUE if the single-or-lead code unit c might have non-zero FCD data. ','line_number':331,'multiline':True]
['text':' 0<=lead<=0xffff','line_number':333,'multiline':False]
['text':'* Returns the FCD value from the regular normalization data. ','line_number':338,'multiline':True]
['text':'*
     * Gets the decomposition for one code point.
     * @param c code point
     * @param buffer out-only buffer for algorithmic decompositions
     * @param length out-only, takes the length of the decomposition, if any
     * @return pointer to the decomposition, or NULL if none
     ','line_number':344,'multiline':True]
['text':'*
     * Gets the raw decomposition for one code point.
     * @param c code point
     * @param buffer out-only buffer for algorithmic decompositions
     * @param length out-only, takes the length of the decomposition, if any
     * @return pointer to the decomposition, or NULL if none
     ','line_number':353,'multiline':True]
['text':' Byte offsets from the start of the data, after the generic header.','line_number':380,'multiline':False]
['text':' Code point thresholds for quick check codes.','line_number':390,'multiline':False]
['text':' Norm16 value thresholds for quick check combinations and types of extra data.','line_number':394,'multiline':False]
['text':' Mappings & compositions in [minYesNo..minYesNoMappingsOnly[.','line_number':395,'multiline':False]
['text':' Mappings only in [minYesNoMappingsOnly..minNoNo[.','line_number':400,'multiline':False]
['text':' 10-1 for the "triple" bit','line_number':418,'multiline':False]
['text':' higher-level functionality ------------------------------------------ ***','line_number':423,'multiline':False]
['text':' NFD without an NFD Normalizer2 instance.','line_number':425,'multiline':False]
['text':'*
     * Decomposes [src, limit[ and writes the result to dest.
     * limit can be NULL if src is NUL-terminated.
     * destLengthEstimate is the initial dest buffer capacity and can be -1.
     ','line_number':428,'multiline':True]
['text':' UBool isCompYes(uint16_t norm16) const {','line_number':488,'multiline':False]
['text':'     return norm16>=MIN_YES_YES_WITH_CC || norm16<minNoNo;','line_number':489,'multiline':False]
['text':' }','line_number':490,'multiline':False]
['text':' UBool isCompYesOrMaybe(uint16_t norm16) const {','line_number':491,'multiline':False]
['text':'     return norm16<minNoNo || minMaybeYes<=norm16;','line_number':492,'multiline':False]
['text':' }','line_number':493,'multiline':False]
['text':' UBool hasZeroCCFromDecompYes(uint16_t norm16) const {','line_number':494,'multiline':False]
['text':'     return norm16<=MIN_NORMAL_MAYBE_YES || norm16==JAMO_VT;','line_number':495,'multiline':False]
['text':' }','line_number':496,'multiline':False]
['text':'*
     * A little faster and simpler than isDecompYesAndZeroCC() but does not include
     * the MaybeYes which combine-forward and have ccc=0.
     * (Standard Unicode 5.2 normalization does not have such characters.)
     ','line_number':502,'multiline':True]
['text':' For use with isCompYes().','line_number':512,'multiline':False]
['text':' Perhaps the compiler can combine the two tests for MIN_YES_YES_WITH_CC.','line_number':513,'multiline':False]
['text':' static uint8_t getCCFromYes(uint16_t norm16) {','line_number':514,'multiline':False]
['text':'     return norm16>=MIN_YES_YES_WITH_CC ? (uint8_t)norm16 : 0;','line_number':515,'multiline':False]
['text':' }','line_number':516,'multiline':False]
['text':' requires that the [cpStart..cpLimit[ character passes isCompYesAndZeroCC()','line_number':525,'multiline':False]
['text':' Requires algorithmic-NoNo.','line_number':528,'multiline':False]
['text':' Requires minYesNo<norm16<limitNoNo.','line_number':533,'multiline':False]
['text':' for yesYes; if Jamo L: harmless empty list','line_number':539,'multiline':False]
['text':' composite has both mapping & compositions list','line_number':545,'multiline':False]
['text':' mapping pointer','line_number':546,'multiline':False]
['text':' +1 to skip the first unit with the mapping lenth','line_number':547,'multiline':False]
['text':' + mapping length','line_number':548,'multiline':False]
['text':'*
     * @param c code point must have compositions
     * @return compositions list pointer
     ','line_number':550,'multiline':True]
['text':' UVersionInfo dataVersion;','line_number':584,'multiline':False]
['text':' Code point thresholds for quick check codes.','line_number':586,'multiline':False]
['text':' Norm16 value thresholds for quick check combinations and types of extra data.','line_number':590,'multiline':False]
['text':' mappings and/or compositions for yesYes, yesNo & noNo characters','line_number':599,'multiline':False]
['text':' [0x100] one bit per 32 BMP code points, set if any FCD!=0','line_number':600,'multiline':False]
['text':' tccc values for U+0000..U+017F','line_number':601,'multiline':False]
['text':' CanonIterData is public to allow access from C callback functions.','line_number':603,'multiline':False]
['text':' bits in canonIterData','line_number':608,'multiline':False]
['text':'*
 * ICU-internal shortcut for quick access to standard Unicode normalization.
 ','line_number':614,'multiline':True]
['text':' Get the Impl instance of the Normalizer2.','line_number':629,'multiline':False]
['text':' Must be used only when it is known that norm2 is a Normalizer2WithImpl instance.','line_number':630,'multiline':False]
['text':' No instantiation.','line_number':633,'multiline':False]
['text':'*
 * Get the NF*_QC property for a code point, for u_getIntPropertyValue().
 * @internal
 ','line_number':643,'multiline':True]
['text':'*
 * Gets the 16-bit FCD value (lead & trail CCs) for a code point, for u_getIntPropertyValue().
 * @internal
 ','line_number':650,'multiline':True]
['text':'*
 * Format of Normalizer2 .nrm data files.
 * Format version 2.0.
 *
 * Normalizer2 .nrm data files provide data for the Unicode Normalization algorithms.
 * ICU ships with data files for standard Unicode Normalization Forms
 * NFC and NFD (nfc.nrm), NFKC and NFKD (nfkc.nrm) and NFKC_Casefold (nfkc_cf.nrm).
 * Custom (application-specific) data can be built into additional .nrm files
 * with the gennorm2 build tool.
 *
 * Normalizer2.getInstance() causes a .nrm file to be loaded, unless it has been
 * cached already. Internally, Normalizer2Impl.load() reads the .nrm file.
 *
 * A .nrm file begins with a standard ICU data file header
 * (DataHeader, see ucmndata.h and unicode/udata.h).
 * The UDataInfo.dataVersion field usually contains the Unicode version
 * for which the data was generated.
 *
 * After the header, the file contains the following parts.
 * Constants are defined as enum values of the Normalizer2Impl class.
 *
 * Many details of the data structures are described in the design doc
 * which is at http://site.icu-project.org/design/normalization/custom
 *
 * int32_t indexes[indexesLength]; -- indexesLength=indexes[IX_NORM_TRIE_OFFSET]/4;
 *
 *      The first eight indexes are byte offsets in ascending order.
 *      Each byte offset marks the start of the next part in the data file,
 *      and the end of the previous one.
 *      When two consecutive byte offsets are the same, then the corresponding part is empty.
 *      Byte offsets are offsets from after the header,
 *      that is, from the beginning of the indexes[].
 *      Each part starts at an offset with proper alignment for its data.
 *      If necessary, the previous part may include padding bytes to achieve this alignment.
 *
 *      minDecompNoCP=indexes[IX_MIN_DECOMP_NO_CP] is the lowest code point
 *      with a decomposition mapping, that is, with NF*D_QC=No.
 *      minCompNoMaybeCP=indexes[IX_MIN_COMP_NO_MAYBE_CP] is the lowest code point
 *      with NF*C_QC=No (has a one-way mapping) or Maybe (combines backward).
 *
 *      The next five indexes are thresholds of 16-bit trie values for ranges of
 *      values indicating multiple normalization properties.
 *          minYesNo=indexes[IX_MIN_YES_NO];
 *          minNoNo=indexes[IX_MIN_NO_NO];
 *          limitNoNo=indexes[IX_LIMIT_NO_NO];
 *          minMaybeYes=indexes[IX_MIN_MAYBE_YES];
 *          minYesNoMappingsOnly=indexes[IX_MIN_YES_NO_MAPPINGS_ONLY];
 *      See the normTrie description below and the design doc for details.
 *
 * UTrie2 normTrie; -- see utrie2_impl.h and utrie2.h
 *
 *      The trie holds the main normalization data. Each code point is mapped to a 16-bit value.
 *      Rather than using independent bits in the value (which would require more than 16 bits),
 *      information is extracted primarily via range checks.
 *      For example, a 16-bit value norm16 in the range minYesNo<=norm16<minNoNo
 *      means that the character has NF*C_QC=Yes and NF*D_QC=No properties,
 *      which means it has a two-way (round-trip) decomposition mapping.
 *      Values in the range 2<=norm16<limitNoNo are also directly indexes into the extraData
 *      pointing to mappings, compositions lists, or both.
 *      Value norm16==0 means that the character is normalization-inert, that is,
 *      it does not have a mapping, does not participate in composition, has a zero
 *      canonical combining class, and forms a boundary where text before it and after it
 *      can be normalized independently.
 *      For details about how multiple properties are encoded in 16-bit values
 *      see the design doc.
 *      Note that the encoding cannot express all combinations of the properties involved;
 *      it only supports those combinations that are allowed by
 *      the Unicode Normalization algorithms. Details are in the design doc as well.
 *      The gennorm2 tool only builds .nrm files for data that conforms to the limitations.
 *
 *      The trie has a value for each lead surrogate code unit representing the "worst case"
 *      properties of the 1024 supplementary characters whose UTF-16 form starts with
 *      the lead surrogate. If all of the 1024 supplementary characters are normalization-inert,
 *      then their lead surrogate code unit has the trie value 0.
 *      When the lead surrogate unit's value exceeds the quick check minimum during processing,
 *      the properties for the full supplementary code point need to be looked up.
 *
 * uint16_t maybeYesCompositions[MIN_NORMAL_MAYBE_YES-minMaybeYes];
 * uint16_t extraData[];
 *
 *      There is only one byte offset for the end of these two arrays.
 *      The split between them is given by the constant and variable mentioned above.
 *
 *      The maybeYesCompositions array contains compositions lists for characters that
 *      combine both forward (as starters in composition pairs)
 *      and backward (as trailing characters in composition pairs).
 *      Such characters do not occur in Unicode 5.2 but are allowed by
 *      the Unicode Normalization algorithms.
 *      If there are no such characters, then minMaybeYes==MIN_NORMAL_MAYBE_YES
 *      and the maybeYesCompositions array is empty.
 *      If there are such characters, then minMaybeYes is subtracted from their norm16 values
 *      to get the index into this array.
 *
 *      The extraData array contains compositions lists for "YesYes" characters,
 *      followed by mappings and optional compositions lists for "YesNo" characters,
 *      followed by only mappings for "NoNo" characters.
 *      (Referring to pairs of NFC/NFD quick check values.)
 *      The norm16 values of those characters are directly indexes into the extraData array.
 *
 *      The data structures for compositions lists and mappings are described in the design doc.
 *
 * uint8_t smallFCD[0x100]; -- new in format version 2
 *
 *      This is a bit set to help speed up FCD value lookups in the absence of a full
 *      UTrie2 or other large data structure with the full FCD value mapping.
 *
 *      Each smallFCD bit is set if any of the corresponding 32 BMP code points
 *      has a non-zero FCD value (lccc!=0 or tccc!=0).
 *      Bit 0 of smallFCD[0] is for U+0000..U+001F. Bit 7 of smallFCD[0xff] is for U+FFE0..U+FFFF.
 *      A bit for 32 lead surrogates is set if any of the 32k corresponding
 *      _supplementary_ code points has a non-zero FCD value.
 *
 *      This bit set is most useful for the large blocks of CJK characters with FCD=0.
 *
 * Changes from format version 1 to format version 2 ---------------------------
 *
 * - Addition of data for raw (not recursively decomposed) mappings.
 *   + The MAPPING_NO_COMP_BOUNDARY_AFTER bit in the extraData is now also set when
 *     the mapping is to an empty string or when the character combines-forward.
 *     This subsumes the one actual use of the MAPPING_PLUS_COMPOSITION_LIST bit which
 *     is then repurposed for the MAPPING_HAS_RAW_MAPPING bit.
 *   + For details see the design doc.
 * - Addition of indexes[IX_MIN_YES_NO_MAPPINGS_ONLY] and separation of the yesNo extraData into
 *   distinct ranges (combines-forward vs. not)
 *   so that a range check can be used to find out if there is a compositions list.
 *   This is fully equivalent with formatVersion 1's MAPPING_PLUS_COMPOSITION_LIST flag.
 *   It is needed for the new (in ICU 49) composePair(), not for other normalization.
 * - Addition of the smallFCD[] bit set.
 ','line_number':657,'multiline':True]
['text':' !UCONFIG_NO_NORMALIZATION ','line_number':787,'multiline':True]
['text':' __NORMALIZER2IMPL_H__ ','line_number':788,'multiline':True]
