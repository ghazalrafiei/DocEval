['text':'
********************************************************************************
*   Copyright (C) 1996-2014, International Business Machines
*   Corporation and others.  All Rights Reserved.
********************************************************************************
*
* File UCHAR.C
*
* Modification History:
*
*   Date        Name        Description
*   04/02/97    aliu        Creation.
*   4/15/99     Madhu       Updated all the function definitions for C Implementation
*   5/20/99     Madhu       Added the function u_getVersion()
*   8/19/1999   srl         Upgraded scripts to Unicode3.0 
*   11/11/1999  weiv        added u_isalnum(), cleaned comments
*   01/11/2000  helena      Renamed u_getVersion to u_getUnicodeVersion.
*   06/20/2000  helena      OS/400 port changes; mostly typecast.
******************************************************************************
','line_number':1,'multiline':True]
['text':' uchar_props_data.h is machine-generated by genprops --csource ','line_number':34,'multiline':True]
['text':' constants and macros for access to the data ------------------------------ ','line_number':38,'multiline':True]
['text':' getting a uint32_t properties word from the data ','line_number':40,'multiline':True]
['text':' API functions ------------------------------------------------------------ ','line_number':51,'multiline':True]
['text':' Gets the Unicode character's general category.','line_number':53,'multiline':True]
['text':' Enumerate all code points with their general categories. ','line_number':61,'multiline':True]
['text':' just cast the value to UCharCategory ','line_number':74,'multiline':True]
['text':' Checks if ch is a lower case letter.','line_number':93,'multiline':True]
['text':' Checks if ch is an upper case letter.','line_number':101,'multiline':True]
['text':' Checks if ch is a title case letter; usually upper case letters.','line_number':109,'multiline':True]
['text':' Checks if ch is a decimal digit. ','line_number':117,'multiline':True]
['text':' check ASCII and Fullwidth ASCII a-fA-F ','line_number':129,'multiline':True]
['text':' Checks if the Unicode character is a letter.','line_number':141,'multiline':True]
['text':' Checks if c is a letter or a decimal digit ','line_number':154,'multiline':True]
['text':'*
 * Checks if c is alphabetic, or a decimal digit; implements UCHAR_POSIX_ALNUM.
 * @internal
 ','line_number':162,'multiline':True]
['text':' Checks if ch is a unicode character with assigned character type.','line_number':171,'multiline':True]
['text':' Checks if the Unicode character is a base form character that can take a diacritic.','line_number':179,'multiline':True]
['text':' Checks if the Unicode character is a control character.','line_number':187,'multiline':True]
['text':' Some control characters that are used as space. ','line_number':200,'multiline':True]
['text':' Java has decided that U+0085 New Line is not whitespace any more. ','line_number':204,'multiline':True]
['text':' Checks if the Unicode character is a space character.','line_number':208,'multiline':True]
['text':' Checks if the Unicode character is a whitespace character.','line_number':223,'multiline':True]
['text':' exclude no-break spaces ','line_number':230,'multiline':True]
['text':' TAB or SPACE ','line_number':238,'multiline':True]
['text':' Zs ','line_number':240,'multiline':True]
['text':' Checks if the Unicode character is printable.','line_number':252,'multiline':True]
['text':' comparing ==0 returns FALSE for the categories mentioned ','line_number':257,'multiline':True]
['text':'*
 * Checks if c is in \p{graph}\p{blank} - \p{cntrl}.
 * Implements UCHAR_POSIX_PRINT.
 * @internal
 ','line_number':261,'multiline':True]
['text':'
     * The only cntrl character in graph+blank is TAB (in blank).
     * Here we implement (blank-TAB)=Zs instead of calling u_isblank().
     ','line_number':270,'multiline':True]
['text':' comparing ==0 returns FALSE for the categories mentioned ','line_number':281,'multiline':True]
['text':'*
 * Checks if c is in
 * [^\p{space}\p{gc=Control}\p{gc=Surrogate}\p{gc=Unassigned}]
 * with space=\p{Whitespace} and Control=Cc.
 * Implements UCHAR_POSIX_GRAPH.
 * @internal
 ','line_number':287,'multiline':True]
['text':' \p{space}\p{gc=Control} == \p{gc=Z}\p{Control} ','line_number':298,'multiline':True]
['text':' comparing ==0 returns FALSE for the categories mentioned ','line_number':299,'multiline':True]
['text':' Checks if the Unicode character can start a Unicode identifier.','line_number':312,'multiline':True]
['text':' same as u_isalpha() ','line_number':315,'multiline':True]
['text':' Checks if the Unicode character can be a Unicode identifier part other than starting the
 identifier.','line_number':321,'multiline':True]
['text':'Checks if the Unicode character can be ignorable in a Java or Unicode identifier.','line_number':336,'multiline':True]
['text':'Checks if the Unicode character can start a Java identifier.','line_number':348,'multiline':True]
['text':'Checks if the Unicode character can be a Java identifier part other than starting the
 * identifier.
 ','line_number':356,'multiline':True]
['text':' decimal digit ','line_number':396,'multiline':True]
['text':' other digit ','line_number':399,'multiline':True]
['text':' small integer ','line_number':402,'multiline':True]
['text':' fraction ','line_number':405,'multiline':True]
['text':' large, single-significant-digit integer ','line_number':410,'multiline':True]
['text':' multiply by 10^exp without math.h ','line_number':416,'multiline':True]
['text':' sexagesimal (base 60) integer ','line_number':438,'multiline':True]
['text':' reserved ','line_number':462,'multiline':True]
['text':' ch is not a decimal digit, try latin letters ','line_number':473,'multiline':True]
['text':' ch - 'a' + 10 ','line_number':475,'multiline':True]
['text':' ch - 'A' + 10 ','line_number':477,'multiline':True]
['text':' fullwidth ASCII a-z ','line_number':479,'multiline':True]
['text':' fullwidth ASCII A-Z ','line_number':481,'multiline':True]
['text':' invalid radix ','line_number':485,'multiline':True]
['text':' miscellaneous, and support for uprops.cpp -------------------------------- ','line_number':501,'multiline':True]
['text':' Guard against bogus input that would make us go past the Script_Extensions terminator. ','line_number':585,'multiline':True]
['text':' property starts for UnicodeSet ------------------------------------------- ','line_number':642,'multiline':True]
['text':' add the start code point to the USet ','line_number':646,'multiline':True]
['text':' add the start code point of each same-value range of the main trie ','line_number':660,'multiline':True]
['text':' add code points with hardcoded properties, plus the ones following them ','line_number':663,'multiline':True]
['text':' add for u_isblank() ','line_number':665,'multiline':True]
['text':' add for IS_THAT_CONTROL_SPACE() ','line_number':668,'multiline':True]
['text':' range TAB..CR ','line_number':669,'multiline':True]
['text':' add for u_isIDIgnorable() what was not added above ','line_number':674,'multiline':True]
['text':' range DEL..NBSP-1, NBSP added below ','line_number':675,'multiline':True]
['text':' add no-break spaces for u_isWhitespace() what was not added above ','line_number':682,'multiline':True]
['text':' add for u_digit() ','line_number':687,'multiline':True]
['text':' add for u_isxdigit() ','line_number':697,'multiline':True]
['text':' add for UCHAR_DEFAULT_IGNORABLE_CODE_POINT what was not added above ','line_number':703,'multiline':True]
['text':' range WJ..NOMDIG ','line_number':704,'multiline':True]
['text':' add for UCHAR_GRAPHEME_BASE and others ','line_number':710,'multiline':True]
['text':' add the start code point of each same-value range of the properties vectors trie ','line_number':720,'multiline':True]
['text':' if propsVectorsColumns==0 then the properties vectors trie may not be there at all ','line_number':722,'multiline':True]
