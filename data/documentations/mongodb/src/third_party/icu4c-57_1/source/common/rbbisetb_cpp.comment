['text':'','line_number':1,'multiline':False]
['text':'  rbbisetb.cpp','line_number':2,'multiline':False]
['text':'','line_number':3,'multiline':False]
['text':'
***************************************************************************
*   Copyright (C) 2002-2008 International Business Machines Corporation   *
*   and others. All rights reserved.                                      *
***************************************************************************
','line_number':4,'multiline':True]
['text':'','line_number':10,'multiline':False]
['text':'  RBBISetBuilder   Handles processing of Unicode Sets from RBBI rules','line_number':11,'multiline':False]
['text':'                   (part of the rule building process.)','line_number':12,'multiline':False]
['text':'','line_number':13,'multiline':False]
['text':'      Starting with the rules parse tree from the scanner,','line_number':14,'multiline':False]
['text':'','line_number':15,'multiline':False]
['text':'                   -  Enumerate the set of UnicodeSets that are referenced','line_number':16,'multiline':False]
['text':'                      by the RBBI rules.','line_number':17,'multiline':False]
['text':'                   -  compute a set of non-overlapping character ranges','line_number':18,'multiline':False]
['text':'                      with all characters within a range belonging to the same','line_number':19,'multiline':False]
['text':'                      set of input uniocde sets.','line_number':20,'multiline':False]
['text':'                   -  Derive a set of non-overlapping UnicodeSet (like things)','line_number':21,'multiline':False]
['text':'                      that will correspond to columns in the state table for','line_number':22,'multiline':False]
['text':'                      the RBBI execution engine.  All characters within one','line_number':23,'multiline':False]
['text':'                      of these sets belong to the same set of the original','line_number':24,'multiline':False]
['text':'                      UnicodeSets from the user's rules.','line_number':25,'multiline':False]
['text':'                   -  construct the trie table that maps input characters','line_number':26,'multiline':False]
['text':'                      to the index of the matching non-overlapping set of set from','line_number':27,'multiline':False]
['text':'                      the previous step.','line_number':28,'multiline':False]
['text':'','line_number':29,'multiline':False]
['text':'------------------------------------------------------------------------','line_number':46,'multiline':False]
['text':'','line_number':47,'multiline':False]
['text':'   getFoldedRBBIValue        Call-back function used during building of Trie table.','line_number':48,'multiline':False]
['text':'                             Folding value: just store the offset (16 bits)','line_number':49,'multiline':False]
['text':'                             if there is any non-0 entry.','line_number':50,'multiline':False]
['text':'                             (It'd really be nice if the Trie builder would provide a','line_number':51,'multiline':False]
['text':'                             simple default, so this function could go away from here.)','line_number':52,'multiline':False]
['text':'','line_number':53,'multiline':False]
['text':'------------------------------------------------------------------------','line_number':54,'multiline':False]
['text':' folding value: just store the offset (16 bits) if there is any non-0 entry ','line_number':55,'multiline':True]
['text':'------------------------------------------------------------------------','line_number':84,'multiline':False]
['text':'','line_number':85,'multiline':False]
['text':'   Constructor','line_number':86,'multiline':False]
['text':'','line_number':87,'multiline':False]
['text':'------------------------------------------------------------------------','line_number':88,'multiline':False]
['text':'------------------------------------------------------------------------','line_number':101,'multiline':False]
['text':'','line_number':102,'multiline':False]
['text':'   Destructor','line_number':103,'multiline':False]
['text':'','line_number':104,'multiline':False]
['text':'------------------------------------------------------------------------','line_number':105,'multiline':False]
['text':' Walk through & delete the linked list of RangeDescriptors','line_number':110,'multiline':False]
['text':'------------------------------------------------------------------------','line_number':123,'multiline':False]
['text':'','line_number':124,'multiline':False]
['text':'   build          Build the list of non-overlapping character ranges','line_number':125,'multiline':False]
['text':'                  from the Unicode Sets.','line_number':126,'multiline':False]
['text':'','line_number':127,'multiline':False]
['text':'------------------------------------------------------------------------','line_number':128,'multiline':False]
['text':'','line_number':135,'multiline':False]
['text':'  Initialize the process by creating a single range encompassing all characters','line_number':136,'multiline':False]
['text':'  that is in no sets.','line_number':137,'multiline':False]
['text':'','line_number':138,'multiline':False]
['text':' will check for status here','line_number':139,'multiline':False]
['text':'','line_number':151,'multiline':False]
['text':'  Find the set of non-overlapping ranges of characters','line_number':152,'multiline':False]
['text':'','line_number':153,'multiline':False]
['text':' Loop over each of the UnicodeSets encountered in the input rules','line_number':155,'multiline':False]
['text':' skip over ranges from the range list that are completely','line_number':173,'multiline':False]
['text':'   below the current range from the input unicode set.','line_number':174,'multiline':False]
['text':' If the start of the range from the range list is before with','line_number':179,'multiline':False]
['text':'   the start of the range from the unicode set, split the range list range','line_number':180,'multiline':False]
['text':'   in two, with one part being before (wholly outside of) the unicode set','line_number':181,'multiline':False]
['text':'   and the other containing the rest.','line_number':182,'multiline':False]
['text':'   Then continue the loop; the post-split current range will then be skipped','line_number':183,'multiline':False]
['text':'     over','line_number':184,'multiline':False]
['text':' Same thing at the end of the ranges...','line_number':193,'multiline':False]
['text':' If the end of the range from the range list doesn't coincide with','line_number':194,'multiline':False]
['text':'   the end of the range from the unicode set, split the range list','line_number':195,'multiline':False]
['text':'   range in two.  The first part of the split range will be','line_number':196,'multiline':False]
['text':'   wholly inside the Unicode set.','line_number':197,'multiline':False]
['text':' The current rlRange is now entirely within the UnicodeSet range.','line_number':205,'multiline':False]
['text':' Add this unicode set to the list of sets for this rlRange','line_number':206,'multiline':False]
['text':' Advance over ranges that we are finished with.','line_number':214,'multiline':False]
['text':'','line_number':224,'multiline':False]
['text':'  Group the above ranges, with each group consisting of one or more','line_number':225,'multiline':False]
['text':'    ranges that are in exactly the same set of original UnicodeSets.','line_number':226,'multiline':False]
['text':'    The groups are numbered, and these group numbers are the set of','line_number':227,'multiline':False]
['text':'    input symbols recognized by the run-time state machine.','line_number':228,'multiline':False]
['text':'','line_number':229,'multiline':False]
['text':'    Numbering: # 0  (state table column 0) is unused.','line_number':230,'multiline':False]
['text':'               # 1  is reserved - table column 1 is for end-of-input','line_number':231,'multiline':False]
['text':'               # 2  is reserved - table column 2 is for beginning-in-input','line_number':232,'multiline':False]
['text':'               # 3  is the first range list.','line_number':233,'multiline':False]
['text':'','line_number':234,'multiline':False]
['text':' Handle input sets that contain the special string {eof}.','line_number':251,'multiline':False]
['text':'   Column 1 of the state table is reserved for EOF on input.','line_number':252,'multiline':False]
['text':'   Column 2 is reserved for before-the-start-input.','line_number':253,'multiline':False]
['text':'            (This column can be optimized away later if there are no rule','line_number':254,'multiline':False]
['text':'             references to {bof}.)','line_number':255,'multiline':False]
['text':'   Add this column value (1 or 2) to the equivalent expression','line_number':256,'multiline':False]
['text':'     subtree for each UnicodeSet that contains the string {eof}','line_number':257,'multiline':False]
['text':'   Because {bof} and {eof} are not a characters in the normal sense,','line_number':258,'multiline':False]
['text':'   they doesn't affect the computation of ranges or TRIE.','line_number':259,'multiline':False]
['text':' Loop over each of the UnicodeSets encountered in the input rules','line_number':265,'multiline':False]
['text':'','line_number':284,'multiline':False]
['text':' Build the Trie table for mapping UChar32 values to the corresponding','line_number':285,'multiline':False]
['text':'   range group number','line_number':286,'multiline':False]
['text':'','line_number':287,'multiline':False]
['text':'  Pre-existing trie to be filled in','line_number':288,'multiline':False]
['text':'  Data array  (utrie will allocate one)','line_number':289,'multiline':False]
['text':'  Max Data Length','line_number':290,'multiline':False]
['text':'  Initial value for all code points','line_number':291,'multiline':False]
['text':'  Lead surrogate unit value','line_number':292,'multiline':False]
['text':'  Keep Latin 1 in separately','line_number':293,'multiline':False]
['text':'-----------------------------------------------------------------------------------','line_number':303,'multiline':False]
['text':'','line_number':304,'multiline':False]
['text':'  getTrieSize()    Return the size that will be required to serialize the Trie.','line_number':305,'multiline':False]
['text':'','line_number':306,'multiline':False]
['text':'-----------------------------------------------------------------------------------','line_number':307,'multiline':False]
['text':'const','line_number':308,'multiline':True]
['text':' Buffer','line_number':310,'multiline':False]
['text':' Capacity','line_number':311,'multiline':False]
['text':' Reduce to 16 bits','line_number':313,'multiline':False]
['text':' RBBIDebugPrintf("Trie table size is %d\n", trieSize);','line_number':315,'multiline':False]
['text':'-----------------------------------------------------------------------------------','line_number':320,'multiline':False]
['text':'','line_number':321,'multiline':False]
['text':'  serializeTrie()   Put the serialized trie at the specified address.','line_number':322,'multiline':False]
['text':'                    Trust the caller to have given us enough memory.','line_number':323,'multiline':False]
['text':'                    getTrieSize() MUST be called first.','line_number':324,'multiline':False]
['text':'','line_number':325,'multiline':False]
['text':'-----------------------------------------------------------------------------------','line_number':326,'multiline':False]
['text':' Buffer','line_number':329,'multiline':False]
['text':' Capacity','line_number':330,'multiline':False]
['text':' Reduce to 16 bits','line_number':332,'multiline':False]
['text':'------------------------------------------------------------------------','line_number':336,'multiline':False]
['text':'','line_number':337,'multiline':False]
['text':'  addValToSets     Add a runtime-mapped input value to each uset from a','line_number':338,'multiline':False]
['text':'                   list of uset nodes. (val corresponds to a state table column.)','line_number':339,'multiline':False]
['text':'                   For each of the original Unicode sets - which correspond','line_number':340,'multiline':False]
['text':'                   directly to uset nodes - a logically equivalent expression','line_number':341,'multiline':False]
['text':'                   is constructed in terms of the remapped runtime input','line_number':342,'multiline':False]
['text':'                   symbol set.  This function adds one runtime input symbol to','line_number':343,'multiline':False]
['text':'                   a list of sets.','line_number':344,'multiline':False]
['text':'','line_number':345,'multiline':False]
['text':'                   The "logically equivalent expression" is the tree for an','line_number':346,'multiline':False]
['text':'                   or-ing together of all of the symbols that go into the set.','line_number':347,'multiline':False]
['text':'','line_number':348,'multiline':False]
['text':'------------------------------------------------------------------------','line_number':349,'multiline':False]
['text':' There are already input symbols present for this set.','line_number':370,'multiline':False]
['text':' Set up an OR node, with the previous stuff as the left child','line_number':371,'multiline':False]
['text':'   and the new value as the right child.','line_number':372,'multiline':False]
['text':'------------------------------------------------------------------------','line_number':388,'multiline':False]
['text':'','line_number':389,'multiline':False]
['text':'   getNumCharCategories','line_number':390,'multiline':False]
['text':'','line_number':391,'multiline':False]
['text':'------------------------------------------------------------------------','line_number':392,'multiline':False]
['text':'------------------------------------------------------------------------','line_number':398,'multiline':False]
['text':'','line_number':399,'multiline':False]
['text':'   sawBOF','line_number':400,'multiline':False]
['text':'','line_number':401,'multiline':False]
['text':'------------------------------------------------------------------------','line_number':402,'multiline':False]
['text':'------------------------------------------------------------------------','line_number':408,'multiline':False]
['text':'','line_number':409,'multiline':False]
['text':'   getFirstChar      Given a runtime RBBI character category, find','line_number':410,'multiline':False]
['text':'                     the first UChar32 that is in the set of chars ','line_number':411,'multiline':False]
['text':'                     in the category.','line_number':412,'multiline':False]
['text':'------------------------------------------------------------------------','line_number':413,'multiline':False]
['text':'------------------------------------------------------------------------','line_number':428,'multiline':False]
['text':'','line_number':429,'multiline':False]
['text':'   printRanges        A debugging function.','line_number':430,'multiline':False]
['text':'                      dump out all of the range definitions.','line_number':431,'multiline':False]
['text':'','line_number':432,'multiline':False]
['text':'------------------------------------------------------------------------','line_number':433,'multiline':False]
['text':'------------------------------------------------------------------------','line_number':461,'multiline':False]
['text':'','line_number':462,'multiline':False]
['text':'   printRangeGroups     A debugging function.','line_number':463,'multiline':False]
['text':'                        dump out all of the range groups.','line_number':464,'multiline':False]
['text':'','line_number':465,'multiline':False]
['text':'------------------------------------------------------------------------','line_number':466,'multiline':False]
['text':'------------------------------------------------------------------------','line_number':513,'multiline':False]
['text':'','line_number':514,'multiline':False]
['text':'   printSets          A debugging function.','line_number':515,'multiline':False]
['text':'                      dump out all of the set definitions.','line_number':516,'multiline':False]
['text':'','line_number':517,'multiline':False]
['text':'------------------------------------------------------------------------','line_number':518,'multiline':False]
['text':'-------------------------------------------------------------------------------------','line_number':558,'multiline':False]
['text':'','line_number':559,'multiline':False]
['text':'  RangeDescriptor copy constructor','line_number':560,'multiline':False]
['text':'','line_number':561,'multiline':False]
['text':'-------------------------------------------------------------------------------------','line_number':562,'multiline':False]
['text':' test for NULL ','line_number':579,'multiline':True]
['text':'-------------------------------------------------------------------------------------','line_number':591,'multiline':False]
['text':'','line_number':592,'multiline':False]
['text':'  RangeDesriptor default constructor','line_number':593,'multiline':False]
['text':'','line_number':594,'multiline':False]
['text':'-------------------------------------------------------------------------------------','line_number':595,'multiline':False]
['text':' test for NULL ','line_number':609,'multiline':True]
['text':'-------------------------------------------------------------------------------------','line_number':618,'multiline':False]
['text':'','line_number':619,'multiline':False]
['text':'  RangeDesriptor Destructor','line_number':620,'multiline':False]
['text':'','line_number':621,'multiline':False]
['text':'-------------------------------------------------------------------------------------','line_number':622,'multiline':False]
['text':'-------------------------------------------------------------------------------------','line_number':628,'multiline':False]
['text':'','line_number':629,'multiline':False]
['text':'  RangeDesriptor::split()','line_number':630,'multiline':False]
['text':'','line_number':631,'multiline':False]
['text':'-------------------------------------------------------------------------------------','line_number':632,'multiline':False]
['text':'  RangeDescriptor copy constructor copies all fields.','line_number':644,'multiline':False]
['text':'  Only need to update those that are different after the split.','line_number':645,'multiline':False]
['text':'-------------------------------------------------------------------------------------','line_number':653,'multiline':False]
['text':'','line_number':654,'multiline':False]
['text':'   RangeDescriptor::setDictionaryFlag','line_number':655,'multiline':False]
['text':'','line_number':656,'multiline':False]
['text':'            Character Category Numbers that include characters from','line_number':657,'multiline':False]
['text':'            the original Unicode Set named "dictionary" have bit 14','line_number':658,'multiline':False]
['text':'            set to 1.  The RBBI runtime engine uses this to trigger','line_number':659,'multiline':False]
['text':'            use of the word dictionary.','line_number':660,'multiline':False]
['text':'','line_number':661,'multiline':False]
['text':'            This function looks through the Unicode Sets that it','line_number':662,'multiline':False]
['text':'            (the range) includes, and sets the bit in fNum when','line_number':663,'multiline':False]
['text':'            "dictionary" is among them.','line_number':664,'multiline':False]
['text':'','line_number':665,'multiline':False]
['text':'            TODO:  a faster way would be to find the set node for','line_number':666,'multiline':False]
['text':'                   "dictionary" just once, rather than looking it','line_number':667,'multiline':False]
['text':'                   up by name every time.','line_number':668,'multiline':False]
['text':'','line_number':669,'multiline':False]
['text':'-------------------------------------------------------------------------------------','line_number':670,'multiline':False]
['text':' TODO:  no string literals.','line_number':684,'multiline':False]
['text':' #if !UCONFIG_NO_BREAK_ITERATION ','line_number':695,'multiline':True]
