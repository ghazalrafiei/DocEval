['text':'
*******************************************************************************
*
*   Copyright (C) 1999-2014, International Business Machines
*   Corporation and others.  All Rights Reserved.
*
*******************************************************************************
*   file name:  uniset_props.cpp
*   encoding:   US-ASCII
*   tab size:   8 (not used)
*   indentation:4
*
*   created on: 2004aug25
*   created by: Markus W. Scherer
*
*   Character property dependent functions moved here from uniset.cpp
','line_number':1,'multiline':True]
['text':' initial storage. Must be >= 0','line_number':50,'multiline':False]
['text':' *** same as in uniset.cpp ! ***','line_number':51,'multiline':False]
['text':' Define UChar constants using hex for EBCDIC compatibility','line_number':54,'multiline':False]
['text':' Used #define to reduce private static exports and memory access time.','line_number':55,'multiline':False]
['text':'[','line_number':56,'multiline':True]
['text':']','line_number':57,'multiline':True]
['text':'-','line_number':58,'multiline':True]
['text':'^','line_number':59,'multiline':True]
['text':':','line_number':60,'multiline':True]
['text':'\','line_number':61,'multiline':True]
['text':'&','line_number':62,'multiline':True]
['text':'U','line_number':63,'multiline':True]
['text':'u','line_number':64,'multiline':True]
['text':'{','line_number':65,'multiline':True]
['text':'}','line_number':66,'multiline':True]
['text':'P','line_number':67,'multiline':True]
['text':'p','line_number':68,'multiline':True]
['text':'N','line_number':69,'multiline':True]
['text':'=','line_number':70,'multiline':True]
['text':'static const UChar POSIX_OPEN[]  = { SET_OPEN,COLON,0 };  // "[:"','line_number':72,'multiline':False]
['text':' ":]"','line_number':73,'multiline':False]
['text':'static const UChar PERL_OPEN[]   = { BACKSLASH,LOWER_P,0 }; // "\\p"','line_number':74,'multiline':False]
['text':'static const UChar PERL_CLOSE[]  = { CLOSE_BRACE,0 };    // "}"','line_number':75,'multiline':False]
['text':'static const UChar NAME_OPEN[]   = { BACKSLASH,UPPER_N,0 };  // "\\N"','line_number':76,'multiline':False]
['text':'-]','line_number':77,'multiline':True]
['text':' Special property set IDs','line_number':79,'multiline':False]
['text':' [\u0000-\U0010FFFF]','line_number':80,'multiline':False]
['text':' [\u0000-\u007F]','line_number':81,'multiline':False]
['text':' [:^Cn:]','line_number':82,'multiline':False]
['text':' Unicode name property alias','line_number':84,'multiline':False]
['text':'*
 * Delimiter string used in patterns to close a category reference:
 * ":]".  Example: "[:Lu:]".
 ','line_number':88,'multiline':True]
['text':'static const UChar CATEGORY_CLOSE[] = {COLON, SET_CLOSE, 0x0000}; /* ":]" */','line_number':92,'multiline':False]
['text':' Cached sets ------------------------------------------------------------- ***','line_number':94,'multiline':False]
['text':' cached getInclusions()','line_number':103,'multiline':False]
['text':'----------------------------------------------------------------','line_number':108,'multiline':False]
['text':' Inclusions list','line_number':109,'multiline':False]
['text':'----------------------------------------------------------------','line_number':110,'multiline':False]
['text':' USetAdder implementation','line_number':112,'multiline':False]
['text':' Does not use uset.h to reduce code dependencies','line_number':113,'multiline':False]
['text':'*
 * Cleanup function for UnicodeSet
 ','line_number':129,'multiline':True]
['text':'
Reduce excessive reallocation, and make it easier to detect initialization problems.
Usually you don't see smaller sets than this for Unicode 5.0.
','line_number':150,'multiline':True]
['text':' This function is invoked only via umtx_initOnce().','line_number':157,'multiline':False]
['text':' This function is a friend of class UnicodeSet.','line_number':158,'multiline':False]
['text':' don't need remove()','line_number':174,'multiline':False]
['text':' don't need removeRange()','line_number':175,'multiline':False]
['text':' Compact for caching','line_number':244,'multiline':False]
['text':' Cache some sets for other services -------------------------------------- ***','line_number':259,'multiline':False]
['text':' helper functions for matching of pattern syntax pieces ------------------ ***','line_number':278,'multiline':False]
['text':' these functions are parallel to the PERL_OPEN etc. strings above','line_number':279,'multiline':False]
['text':' using these functions is not only faster than UnicodeString::compare() and','line_number':281,'multiline':False]
['text':' caseCompare(), but they also make UnicodeSet work for simple patterns when','line_number':282,'multiline':False]
['text':' no Unicode properties data is available - when caseCompare() fails','line_number':283,'multiline':False]
['text':'static inline UBool
isPerlClose(const UnicodeString &pattern, int32_t pos) {
    return pattern.charAt(pos)==CLOSE_BRACE;
}','line_number':291,'multiline':True]
['text':'static inline UBool
isPOSIXClose(const UnicodeString &pattern, int32_t pos) {
    return pattern.charAt(pos)==COLON && pattern.charAt(pos+1)==SET_CLOSE;
}','line_number':306,'multiline':True]
['text':' TODO memory debugging provided inside uniset.cpp','line_number':311,'multiline':False]
['text':' could be made available here but probably obsolete with use of modern','line_number':312,'multiline':False]
['text':' memory leak checker tools','line_number':313,'multiline':False]
['text':'----------------------------------------------------------------','line_number':316,'multiline':False]
['text':' Constructors &c','line_number':317,'multiline':False]
['text':'----------------------------------------------------------------','line_number':318,'multiline':False]
['text':'*
 * Constructs a set from the given pattern, optionally ignoring
 * white space.  See the class description for the syntax of the
 * pattern language.
 * @param pattern a string specifying what characters are in the set
 ','line_number':320,'multiline':True]
['text':' test for NULL ','line_number':334,'multiline':True]
['text':'----------------------------------------------------------------','line_number':345,'multiline':False]
['text':' Public API','line_number':346,'multiline':False]
['text':'----------------------------------------------------------------','line_number':347,'multiline':False]
['text':' Equivalent to','line_number':351,'multiline':False]
['text':'   return applyPattern(pattern, USET_IGNORE_SPACE, NULL, status);','line_number':352,'multiline':False]
['text':' but without dependency on closeOver().','line_number':353,'multiline':False]
['text':' Skip over trailing whitespace','line_number':359,'multiline':False]
['text':' Need to build the pattern in a temporary string because','line_number':379,'multiline':False]
['text':' _applyPattern calls add() etc., which set pat to empty.','line_number':380,'multiline':False]
['text':' syntaxError(chars, "Extra chars in variable value");','line_number':386,'multiline':False]
['text':'*
 * Return true if the given position, in the given pattern, appears
 * to be the start of a UnicodeSet pattern.
 ','line_number':393,'multiline':True]
['text':'[','line_number':399,'multiline':True]
['text':'----------------------------------------------------------------','line_number':403,'multiline':False]
['text':' Implementation: Pattern parsing','line_number':404,'multiline':False]
['text':'----------------------------------------------------------------','line_number':405,'multiline':False]
['text':'*
 * A small all-inline class to manage a UnicodeSet pointer.  Add
 * operator->() etc. as needed.
 ','line_number':407,'multiline':True]
['text':'*
 * Parse the pattern from the given RuleCharacterIterator.  The
 * iterator is advanced over the parsed pattern.
 * @param chars iterator over the pattern characters.  Upon return
 * it will be advanced to the first character after the parsed
 * pattern, or the end of the iteration if all characters are
 * parsed.
 * @param symbols symbol table to use to parse and dereference
 * variables, or null if none.
 * @param rebuiltPat the pattern that was parsed, rebuilt or
 * copied from the input pattern, as appropriate.
 * @param options a bit mask of zero or more of the following:
 * IGNORE_SPACE, CASE.
 ','line_number':425,'multiline':True]
['text':' Syntax characters: [ ] ^ - & { }','line_number':447,'multiline':False]
['text':' Recognized special forms for chars, sets: c-c s-s s&s','line_number':449,'multiline':False]
['text':' mode: 0=before [, 1=between [...], 2=after ]','line_number':462,'multiline':False]
['text':' lastItem: 0=none, 1=char, 2=set','line_number':463,'multiline':False]
['text':''-'','line_number':474,'multiline':True]
['text':''-'','line_number':475,'multiline':True]
['text':''&'','line_number':476,'multiline':True]
['text':' alias - do not delete','line_number':480,'multiline':False]
['text':' -------- Check for property pattern','line_number':482,'multiline':False]
['text':' setMode: 0=none, 1=unicodeset, 2=propertypat, 3=preparsed','line_number':484,'multiline':False]
['text':' -------- Parse '[' of opening delimiter OR nested set.','line_number':490,'multiline':False]
['text':' If there is a nested set, use `setMode' to define how','line_number':491,'multiline':False]
['text':' the set should be parsed.  If the '[' is part of the','line_number':492,'multiline':False]
['text':' opening delimiter for this pattern, parse special','line_number':493,'multiline':False]
['text':' strings "[", "[^", "[-", and "[^-".  Check for stand-in','line_number':494,'multiline':False]
['text':' characters representing a nested set in the symbol','line_number':495,'multiline':False]
['text':' table.','line_number':496,'multiline':False]
['text':' Prepare to backup if necessary','line_number':499,'multiline':False]
['text':''['','line_number':504,'multiline':True]
['text':' backup','line_number':506,'multiline':False]
['text':' Handle opening '[' delimiter','line_number':509,'multiline':False]
['text':''['','line_number':511,'multiline':True]
['text':' prepare to backup','line_number':512,'multiline':False]
['text':''^'','line_number':515,'multiline':True]
['text':''^'','line_number':517,'multiline':True]
['text':' prepare to backup','line_number':518,'multiline':False]
['text':' Fall through to handle special leading '-';','line_number':522,'multiline':False]
['text':' otherwise restart loop for nested [], \p{}, etc.','line_number':523,'multiline':False]
['text':''-'','line_number':524,'multiline':True]
['text':' Fall through to handle literal '-' below','line_number':526,'multiline':False]
['text':' backup','line_number':528,'multiline':False]
['text':' casting away const, but `nested' won't be modified','line_number':540,'multiline':False]
['text':' (important not to modify stored set)','line_number':541,'multiline':False]
['text':' -------- Handle a nested set.  This either is inline in','line_number':548,'multiline':False]
['text':' the pattern or represented by a stand-in that has','line_number':549,'multiline':False]
['text':' previously been parsed and was looked up in the symbol','line_number':550,'multiline':False]
['text':' table.','line_number':551,'multiline':False]
['text':' syntaxError(chars, "Char expected after operator");','line_number':556,'multiline':False]
['text':''-'','line_number':566,'multiline':True]
['text':''&'','line_number':566,'multiline':True]
['text':' lazy allocation','line_number':571,'multiline':False]
['text':' `nested' already parsed','line_number':587,'multiline':False]
['text':' Entire pattern is a category; leave parse loop','line_number':595,'multiline':False]
['text':''-'','line_number':602,'multiline':True]
['text':''&'','line_number':605,'multiline':True]
['text':' syntaxError(chars, "Missing '['");','line_number':620,'multiline':False]
['text':' -------- Parse special (syntax) characters.  If the','line_number':625,'multiline':False]
['text':' current character is not special, or if it is escaped,','line_number':626,'multiline':False]
['text':' then fall through and handle it below.','line_number':627,'multiline':False]
['text':'']'','line_number':631,'multiline':True]
['text':' Treat final trailing '-' as a literal','line_number':636,'multiline':False]
['text':''-'','line_number':637,'multiline':True]
['text':''&'','line_number':640,'multiline':True]
['text':' syntaxError(chars, "Trailing '&'");','line_number':641,'multiline':False]
['text':'']'','line_number':645,'multiline':True]
['text':''-'','line_number':648,'multiline':True]
['text':' Treat final trailing '-' as a literal','line_number':654,'multiline':False]
['text':'']'','line_number':658,'multiline':True]
['text':' syntaxError(chars, "'-' not after char or set");','line_number':665,'multiline':False]
['text':''&'','line_number':668,'multiline':True]
['text':' syntaxError(chars, "'&' not after set");','line_number':673,'multiline':False]
['text':''^'','line_number':676,'multiline':True]
['text':' syntaxError(chars, "'^' not after '['");','line_number':677,'multiline':False]
['text':''{'','line_number':680,'multiline':True]
['text':' syntaxError(chars, "Missing operand after operator");','line_number':682,'multiline':False]
['text':''}'','line_number':697,'multiline':True]
['text':' syntaxError(chars, "Invalid multicharacter string");','line_number':704,'multiline':False]
['text':' We have new string. Add it to set and continue;','line_number':709,'multiline':False]
['text':' we don't need to drop through to the further','line_number':710,'multiline':False]
['text':' processing','line_number':711,'multiline':False]
['text':''{'','line_number':713,'multiline':True]
['text':''}'','line_number':715,'multiline':True]
['text':'         symbols  nosymbols','line_number':718,'multiline':False]
['text':' [a-$]   error    error (ambiguous)','line_number':719,'multiline':False]
['text':' [a$]    anchor   anchor','line_number':720,'multiline':False]
['text':' [a-$x]  var "x"* literal '$'','line_number':721,'multiline':False]
['text':' [a-$.]  error    literal '$'','line_number':722,'multiline':False]
['text':' *We won't get here in the case of var "x"','line_number':723,'multiline':False]
['text':'']'','line_number':728,'multiline':True]
['text':' literal '$'','line_number':732,'multiline':False]
['text':'']'','line_number':742,'multiline':True]
['text':' syntaxError(chars, "Unquoted '$'");','line_number':746,'multiline':False]
['text':' -------- Parse literal characters.  This includes both','line_number':755,'multiline':False]
['text':' escaped chars ("\u4E01") and non-syntax characters','line_number':756,'multiline':False]
['text':' ("a").','line_number':757,'multiline':False]
['text':''-'','line_number':765,'multiline':True]
['text':' Don't allow redundant (a-a) or empty (b-a) ranges;','line_number':767,'multiline':False]
['text':' these are most likely typos.','line_number':768,'multiline':False]
['text':' syntaxError(chars, "Invalid range");','line_number':769,'multiline':False]
['text':' syntaxError(chars, "Set expected after operator");','line_number':787,'multiline':False]
['text':' syntaxError(chars, "Missing ']'");','line_number':798,'multiline':False]
['text':'*
     * Handle global flags (invert, case insensitivity).  If this
     * pattern should be compiled case-insensitive, then we need
     * to close over case BEFORE COMPLEMENTING.  This makes
     * patterns like /[^abc]/i work.
     ','line_number':805,'multiline':True]
['text':' Use the rebuilt pattern (patLocal) only if necessary.  Prefer the','line_number':821,'multiline':False]
['text':' generated pattern.','line_number':822,'multiline':False]
['text':' We likely ran out of memory. AHHH!','line_number':829,'multiline':False]
['text':'----------------------------------------------------------------','line_number':834,'multiline':False]
['text':' Property set implementation','line_number':835,'multiline':False]
['text':'----------------------------------------------------------------','line_number':836,'multiline':False]
['text':'*
 * Generic filter-based scanning code for UCD property UnicodeSets.
 ','line_number':869,'multiline':True]
['text':' Logically, walk through all Unicode characters, noting the start','line_number':878,'multiline':False]
['text':' and end of each range for which filter.contain(c) is','line_number':879,'multiline':False]
['text':' true.  Add each range to a set.','line_number':880,'multiline':False]
['text':'','line_number':881,'multiline':False]
['text':' To improve performance, use an inclusions set which','line_number':882,'multiline':False]
['text':' encodes information about character ranges that are known','line_number':883,'multiline':False]
['text':' to have identical properties.','line_number':884,'multiline':False]
['text':' getInclusions(src) contains exactly the first characters of','line_number':885,'multiline':False]
['text':' same-value ranges for the given properties "source".','line_number':886,'multiline':False]
['text':' get current range','line_number':898,'multiline':False]
['text':' for all the code points in the range, process','line_number':902,'multiline':False]
['text':' only add to this UnicodeSet on inflection points --','line_number':904,'multiline':False]
['text':' where the hasProperty value changes to false','line_number':905,'multiline':False]
['text':' We likely ran out of memory. AHHH!','line_number':920,'multiline':False]
['text':' Note: we use ' ' in compiler code page ','line_number':926,'multiline':True]
['text':' make room for term. zero ','line_number':929,'multiline':True]
['text':'----------------------------------------------------------------','line_number':942,'multiline':False]
['text':' Property set API','line_number':943,'multiline':False]
['text':'----------------------------------------------------------------','line_number':944,'multiline':False]
['text':' prop and value used to be converted to char * using the default','line_number':970,'multiline':False]
['text':' converter instead of the invariant conversion.','line_number':971,'multiline':False]
['text':' This should not be necessary because all Unicode property and value','line_number':972,'multiline':False]
['text':' names use only invariant characters.','line_number':973,'multiline':False]
['text':' If there are any variant characters, then we won't find them anyway.','line_number':974,'multiline':False]
['text':' Checking first avoids assertion failures in the conversion.','line_number':975,'multiline':False]
['text':' Treat gc as gcm','line_number':994,'multiline':False]
['text':' Handle numeric CCC','line_number':1004,'multiline':False]
['text':' non-integral or negative value, or trailing junk','line_number':1012,'multiline':False]
['text':' If the resultant set is empty then the numeric value','line_number':1015,'multiline':False]
['text':' was invalid.','line_number':1016,'multiline':False]
['text':' Must munge name, since u_charFromName() does not do','line_number':1039,'multiline':False]
['text':' 'loose' matching.','line_number':1040,'multiline':False]
['text':' it suffices that this be > uprv_getMaxCharNameLength','line_number':1041,'multiline':False]
['text':' ICU 49 deprecates the Unicode_1_Name property APIs.','line_number':1053,'multiline':False]
['text':' Must munge name, since u_versionFromString() does not do','line_number':1057,'multiline':False]
['text':' 'loose' matching.','line_number':1058,'multiline':False]
['text':' fall through to calling applyIntPropertyValue()','line_number':1071,'multiline':False]
['text':' p is a non-binary, non-enumerated property that we','line_number':1074,'multiline':False]
['text':' don't support (yet).','line_number':1075,'multiline':False]
['text':' value is empty.  Interpret as General Category, Script, or','line_number':1082,'multiline':False]
['text':' Binary property.','line_number':1083,'multiline':False]
['text':' [:Assigned:]=[:^Cn:]','line_number':1100,'multiline':False]
['text':' mustNotBeEmpty is set to true if an empty set indicates','line_number':1117,'multiline':False]
['text':' invalid input.','line_number':1118,'multiline':False]
['text':' We likely ran out of memory. AHHH!','line_number':1123,'multiline':False]
['text':'----------------------------------------------------------------','line_number':1129,'multiline':False]
['text':' Property set patterns','line_number':1130,'multiline':False]
['text':'----------------------------------------------------------------','line_number':1131,'multiline':False]
['text':'*
 * Return true if the given position, in the given pattern, appears
 * to be the start of a property set pattern.
 ','line_number':1133,'multiline':True]
['text':' Patterns are at least 5 characters long','line_number':1139,'multiline':False]
['text':' Look for an opening [:, [:^, \p, or \P','line_number':1144,'multiline':False]
['text':'*
 * Return true if the given iterator appears to point at a
 * property pattern.  Regardless of the result, return with the
 * iterator unchanged.
 * @param chars iterator over the pattern characters.  Upon return
 * it will be unchanged.
 * @param iterOpts RuleCharacterIterator options
 ','line_number':1148,'multiline':True]
['text':' NOTE: literal will always be FALSE, because we don't parse escapes.','line_number':1158,'multiline':False]
['text':''['','line_number':1165,'multiline':True]
['text':''\\'','line_number':1165,'multiline':True]
['text':''['','line_number':1168,'multiline':True]
['text':'':'','line_number':1168,'multiline':True]
['text':''N'','line_number':1169,'multiline':True]
['text':''p'','line_number':1169,'multiline':True]
['text':''P'','line_number':1169,'multiline':True]
['text':'*
 * Parse the given property pattern at the given parse position.
 ','line_number':1175,'multiline':True]
['text':' true for [:pat:], false for \p{pat} \P{pat} \N{pat}','line_number':1183,'multiline':False]
['text':' true for \N{pat}, o/w false','line_number':1184,'multiline':False]
['text':' Minimum length is 5 characters, e.g. \p{L}','line_number':1189,'multiline':False]
['text':' On entry, ppos should point to one of the following locations:','line_number':1194,'multiline':False]
['text':' Look for an opening [:, [:^, \p, or \P','line_number':1195,'multiline':False]
['text':' Syntax error; "\p" or "\P" not followed by "{"','line_number':1211,'multiline':False]
['text':' Open delimiter not seen','line_number':1215,'multiline':False]
['text':' Look for the matching close delimiter, either :] or }','line_number':1219,'multiline':False]
['text':' Syntax error; close delimiter missing','line_number':1227,'multiline':False]
['text':' Look for an '=' sign.  If this is present, we will parse a','line_number':1231,'multiline':False]
['text':' medium \p{gc=Cf} or long \p{GeneralCategory=Format}','line_number':1232,'multiline':False]
['text':' pattern.','line_number':1233,'multiline':False]
['text':' Equals seen; parse medium/long pattern','line_number':1237,'multiline':False]
['text':' Handle case where no '=' is seen, and \N{}','line_number':1243,'multiline':False]
['text':' Handle \N{name}','line_number':1246,'multiline':False]
['text':' This is a little inefficient since it means we have to','line_number':1248,'multiline':False]
['text':' parse NAME_PROP back to UCHAR_NAME even though we already','line_number':1249,'multiline':False]
['text':' know it's UCHAR_NAME.  If we refactor the API to','line_number':1250,'multiline':False]
['text':' support args of (UProperty, char*) then we can remove','line_number':1251,'multiline':False]
['text':' NAME_PROP and make this a little more efficient.','line_number':1252,'multiline':False]
['text':' Move to the limit position after the close delimiter if the','line_number':1265,'multiline':False]
['text':' parse succeeded.','line_number':1266,'multiline':False]
['text':'*
 * Parse a property pattern.
 * @param chars iterator over the pattern characters.  Upon return
 * it will be advanced to the first character after the parsed
 * pattern, or the end of the iteration if all characters are
 * parsed.
 * @param rebuiltPat the pattern that was parsed, rebuilt or
 * copied from the input pattern, as appropriate.
 ','line_number':1273,'multiline':True]
['text':' syntaxError(chars, "Invalid property pattern");','line_number':1292,'multiline':False]
