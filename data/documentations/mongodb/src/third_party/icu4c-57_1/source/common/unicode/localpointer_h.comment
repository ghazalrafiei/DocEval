['text':'
*******************************************************************************
*
*   Copyright (C) 2009-2016, International Business Machines
*   Corporation and others.  All Rights Reserved.
*
*******************************************************************************
*   file name:  localpointer.h
*   encoding:   US-ASCII
*   tab size:   8 (not used)
*   indentation:4
*
*   created on: 2009nov13
*   created by: Markus W. Scherer
','line_number':1,'multiline':True]
['text':'*
 * \file
 * \brief C++ API: "Smart pointers" for use with and in ICU4C C++ code.
 *
 * These classes are inspired by
 * - std::auto_ptr
 * - boost::scoped_ptr & boost::scoped_array
 * - Taligent Safe Pointers (TOnlyPointerTo)
 *
 * but none of those provide for all of the goals for ICU smart pointers:
 * - Smart pointer owns the object and releases it when it goes out of scope.
 * - No transfer of ownership via copy/assignment to reduce misuse. Simpler & more robust.
 * - ICU-compatible: No exceptions.
 * - Need to be able to orphan/release the pointer and its ownership.
 * - Need variants for normal C++ object pointers, C++ arrays, and ICU C service objects.
 *
 * For details see http://site.icu-project.org/design/cpp/scoped_ptr
 ','line_number':20,'multiline':True]
['text':'*
 * "Smart pointer" base class; do not use directly: use LocalPointer etc.
 *
 * Base class for smart pointer classes that do not throw exceptions.
 *
 * Do not use this base class directly, since it does not delete its pointer.
 * A subclass must implement methods that delete the pointer:
 * Destructor and adoptInstead().
 *
 * There is no operator T *() provided because the programmer must decide
 * whether to use getAlias() (without transfer of ownership) or orphan()
 * (with transfer of ownership and NULLing of the pointer).
 *
 * @see LocalPointer
 * @see LocalArray
 * @see U_DEFINE_LOCAL_OPEN_POINTER
 * @stable ICU 4.4
 ','line_number':45,'multiline':True]
['text':'*
     * Constructor takes ownership.
     * @param p simple pointer to an object that is adopted
     * @stable ICU 4.4
     ','line_number':66,'multiline':True]
['text':'*
     * Destructor deletes the object it owns.
     * Subclass must override: Base class does nothing.
     * @stable ICU 4.4
     ','line_number':72,'multiline':True]
['text':' delete ptr; ','line_number':77,'multiline':True]
['text':'*
     * NULL check.
     * @return TRUE if ==NULL
     * @stable ICU 4.4
     ','line_number':78,'multiline':True]
['text':'*
     * NULL check.
     * @return TRUE if !=NULL
     * @stable ICU 4.4
     ','line_number':84,'multiline':True]
['text':'*
     * Comparison with a simple pointer, so that existing code
     * with ==NULL need not be changed.
     * @param other simple pointer for comparison
     * @return true if this pointer value equals other
     * @stable ICU 4.4
     ','line_number':90,'multiline':True]
['text':'*
     * Comparison with a simple pointer, so that existing code
     * with !=NULL need not be changed.
     * @param other simple pointer for comparison
     * @return true if this pointer value differs from other
     * @stable ICU 4.4
     ','line_number':98,'multiline':True]
['text':'*
     * Access without ownership change.
     * @return the pointer value
     * @stable ICU 4.4
     ','line_number':106,'multiline':True]
['text':'*
     * Access without ownership change.
     * @return the pointer value as a reference
     * @stable ICU 4.4
     ','line_number':112,'multiline':True]
['text':'*
     * Access without ownership change.
     * @return the pointer value
     * @stable ICU 4.4
     ','line_number':118,'multiline':True]
['text':'*
     * Gives up ownership; the internal pointer becomes NULL.
     * @return the pointer value;
     *         caller becomes responsible for deleting the object
     * @stable ICU 4.4
     ','line_number':124,'multiline':True]
['text':'*
     * Deletes the object it owns,
     * and adopts (takes ownership of) the one passed in.
     * Subclass must override: Base class does not delete the object.
     * @param p simple pointer to an object that is adopted
     * @stable ICU 4.4
     ','line_number':135,'multiline':True]
['text':' delete ptr;','line_number':143,'multiline':False]
['text':'*
     * Actual pointer.
     * @internal
     ','line_number':147,'multiline':True]
['text':' No comparison operators with other LocalPointerBases.','line_number':153,'multiline':False]
['text':' No ownership sharing: No copy constructor, no assignment operator.','line_number':156,'multiline':False]
['text':' No heap allocation. Use only on the stack.','line_number':159,'multiline':False]
['text':'*
 * "Smart pointer" class, deletes objects via the standard C++ delete operator.
 * For most methods see the LocalPointerBase base class.
 *
 * Usage example:
 * \code
 * LocalPointer<UnicodeString> s(new UnicodeString((UChar32)0x50005));
 * int32_t length=s->length();  // 2
 * UChar lead=s->charAt(0);  // 0xd900
 * if(some condition) { return; }  // no need to explicitly delete the pointer
 * s.adoptInstead(new UnicodeString((UChar)0xfffc));
 * length=s->length();  // 1
 * // no need to explicitly delete the pointer
 * \endcode
 *
 * @see LocalPointerBase
 * @stable ICU 4.4
 ','line_number':167,'multiline':True]
['text':'*
     * Constructor takes ownership.
     * @param p simple pointer to an object that is adopted
     * @stable ICU 4.4
     ','line_number':190,'multiline':True]
['text':'*
     * Constructor takes ownership and reports an error if NULL.
     *
     * This constructor is intended to be used with other-class constructors
     * that may report a failure UErrorCode,
     * so that callers need to check only for U_FAILURE(errorCode)
     * and not also separately for isNull().
     *
     * @param p simple pointer to an object that is adopted
     * @param errorCode in/out UErrorCode, set to U_MEMORY_ALLOCATION_ERROR
     *     if p==NULL and no other failure code had been set
     * @stable ICU 55
     ','line_number':196,'multiline':True]
['text':'*
     * Move constructor, leaves src with isNull().
     * @param src source smart pointer
     * @draft ICU 56
     ','line_number':216,'multiline':True]
['text':' U_HIDE_DRAFT_API ','line_number':225,'multiline':True]
['text':'*
     * Destructor deletes the object it owns.
     * @stable ICU 4.4
     ','line_number':226,'multiline':True]
['text':'*
     * Move assignment operator, leaves src with isNull().
     * The behavior is undefined if *this and src are the same object.
     * @param src source smart pointer
     * @return *this
     * @draft ICU 56
     ','line_number':235,'multiline':True]
['text':'*
     * Move assignment, leaves src with isNull().
     * The behavior is undefined if *this and src are the same object.
     *
     * Can be called explicitly, does not need C++11 support.
     * @param src source smart pointer
     * @return *this
     * @draft ICU 56
     ','line_number':246,'multiline':True]
['text':'*
     * Swap pointers.
     * @param other other smart pointer
     * @draft ICU 56
     ','line_number':261,'multiline':True]
['text':' U_HIDE_DRAFT_API ','line_number':271,'multiline':True]
['text':'*
     * Non-member LocalPointer swap function.
     * @param p1 will get p2's pointer
     * @param p2 will get p1's pointer
     * @draft ICU 56
     ','line_number':272,'multiline':True]
['text':'*
     * Deletes the object it owns,
     * and adopts (takes ownership of) the one passed in.
     * @param p simple pointer to an object that is adopted
     * @stable ICU 4.4
     ','line_number':281,'multiline':True]
['text':'*
     * Deletes the object it owns,
     * and adopts (takes ownership of) the one passed in.
     *
     * If U_FAILURE(errorCode), then the current object is retained and the new one deleted.
     *
     * If U_SUCCESS(errorCode) but the input pointer is NULL,
     * then U_MEMORY_ALLOCATION_ERROR is set,
     * the current object is deleted, and NULL is set.
     *
     * @param p simple pointer to an object that is adopted
     * @param errorCode in/out UErrorCode, set to U_MEMORY_ALLOCATION_ERROR
     *     if p==NULL and no other failure code had been set
     * @stable ICU 55
     ','line_number':291,'multiline':True]
['text':'*
 * "Smart pointer" class, deletes objects via the C++ array delete[] operator.
 * For most methods see the LocalPointerBase base class.
 * Adds operator[] for array item access.
 *
 * Usage example:
 * \code
 * LocalArray<UnicodeString> a(new UnicodeString[2]);
 * a[0].append((UChar)0x61);
 * if(some condition) { return; }  // no need to explicitly delete the array
 * a.adoptInstead(new UnicodeString[4]);
 * a[3].append((UChar)0x62).append((UChar)0x63).reverse();
 * // no need to explicitly delete the array
 * \endcode
 *
 * @see LocalPointerBase
 * @stable ICU 4.4
 ','line_number':319,'multiline':True]
['text':'*
     * Constructor takes ownership.
     * @param p simple pointer to an array of T objects that is adopted
     * @stable ICU 4.4
     ','line_number':342,'multiline':True]
['text':'*
     * Constructor takes ownership and reports an error if NULL.
     *
     * This constructor is intended to be used with other-class constructors
     * that may report a failure UErrorCode,
     * so that callers need to check only for U_FAILURE(errorCode)
     * and not also separately for isNull().
     *
     * @param p simple pointer to an array of T objects that is adopted
     * @param errorCode in/out UErrorCode, set to U_MEMORY_ALLOCATION_ERROR
     *     if p==NULL and no other failure code had been set
     * @draft ICU 56
     ','line_number':349,'multiline':True]
['text':'*
     * Move constructor, leaves src with isNull().
     * @param src source smart pointer
     * @draft ICU 56
     ','line_number':368,'multiline':True]
['text':' U_HIDE_DRAFT_API ','line_number':377,'multiline':True]
['text':'*
     * Destructor deletes the array it owns.
     * @stable ICU 4.4
     ','line_number':378,'multiline':True]
['text':'*
     * Move assignment operator, leaves src with isNull().
     * The behavior is undefined if *this and src are the same object.
     * @param src source smart pointer
     * @return *this
     * @draft ICU 56
     ','line_number':387,'multiline':True]
['text':'*
     * Move assignment, leaves src with isNull().
     * The behavior is undefined if *this and src are the same object.
     *
     * Can be called explicitly, does not need C++11 support.
     * @param src source smart pointer
     * @return *this
     * @draft ICU 56
     ','line_number':398,'multiline':True]
['text':'*
     * Swap pointers.
     * @param other other smart pointer
     * @draft ICU 56
     ','line_number':413,'multiline':True]
['text':' U_HIDE_DRAFT_API ','line_number':423,'multiline':True]
['text':'*
     * Non-member LocalArray swap function.
     * @param p1 will get p2's pointer
     * @param p2 will get p1's pointer
     * @draft ICU 56
     ','line_number':424,'multiline':True]
['text':'*
     * Deletes the array it owns,
     * and adopts (takes ownership of) the one passed in.
     * @param p simple pointer to an array of T objects that is adopted
     * @stable ICU 4.4
     ','line_number':433,'multiline':True]
['text':'*
     * Deletes the array it owns,
     * and adopts (takes ownership of) the one passed in.
     *
     * If U_FAILURE(errorCode), then the current array is retained and the new one deleted.
     *
     * If U_SUCCESS(errorCode) but the input pointer is NULL,
     * then U_MEMORY_ALLOCATION_ERROR is set,
     * the current array is deleted, and NULL is set.
     *
     * @param p simple pointer to an array of T objects that is adopted
     * @param errorCode in/out UErrorCode, set to U_MEMORY_ALLOCATION_ERROR
     *     if p==NULL and no other failure code had been set
     * @draft ICU 56
     ','line_number':444,'multiline':True]
['text':' U_HIDE_DRAFT_API ','line_number':470,'multiline':True]
['text':'*
     * Array item access (writable).
     * No index bounds check.
     * @param i array index
     * @return reference to the array item
     * @stable ICU 4.4
     ','line_number':471,'multiline':True]
['text':'*
 * \def U_DEFINE_LOCAL_OPEN_POINTER
 * "Smart pointer" definition macro, deletes objects via the closeFunction.
 * Defines a subclass of LocalPointerBase which works just
 * like LocalPointer<Type> except that this subclass will use the closeFunction
 * rather than the C++ delete operator.
 *
 * Requirement: The closeFunction must tolerate a NULL pointer.
 * (We could add a NULL check here but it is normally redundant.)
 *
 * Usage example:
 * \code
 * LocalUCaseMapPointer csm(ucasemap_open(localeID, options, &errorCode));
 * utf8OutLength=ucasemap_utf8ToLower(csm.getAlias(),
 *     utf8Out, (int32_t)sizeof(utf8Out),
 *     utf8In, utf8InLength, &errorCode);
 * if(U_FAILURE(errorCode)) { return; }  // no need to explicitly delete the UCaseMap
 * \endcode
 *
 * @see LocalPointerBase
 * @see LocalPointer
 * @stable ICU 4.4
 ','line_number':481,'multiline':True]
['text':' U_SHOW_CPLUSPLUS_API ','line_number':569,'multiline':True]
['text':' __LOCALPOINTER_H__ ','line_number':570,'multiline':True]
