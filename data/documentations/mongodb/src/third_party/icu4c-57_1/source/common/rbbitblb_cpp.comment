['text':'
**********************************************************************
*   Copyright (c) 2002-2016, International Business Machines
*   Corporation and others.  All Rights Reserved.
**********************************************************************
','line_number':1,'multiline':True]
['text':'','line_number':7,'multiline':False]
['text':'  rbbitblb.cpp','line_number':8,'multiline':False]
['text':'','line_number':9,'multiline':False]
['text':'-----------------------------------------------------------------------------','line_number':56,'multiline':False]
['text':'','line_number':57,'multiline':False]
['text':'   RBBITableBuilder::build  -  This is the main function for building the DFA state transtion','line_number':58,'multiline':False]
['text':'                               table from the RBBI rules parse tree.','line_number':59,'multiline':False]
['text':'','line_number':60,'multiline':False]
['text':'-----------------------------------------------------------------------------','line_number':61,'multiline':False]
['text':' If there were no rules, just return.  This situation can easily arise','line_number':68,'multiline':False]
['text':'   for the reverse rules.','line_number':69,'multiline':False]
['text':'','line_number':74,'multiline':False]
['text':' Walk through the tree, replacing any references to $variables with a copy of the','line_number':75,'multiline':False]
['text':'   parse tree for the substition expression.','line_number':76,'multiline':False]
['text':'','line_number':77,'multiline':False]
['text':'','line_number':86,'multiline':False]
['text':' If the rules contained any references to {bof} ','line_number':87,'multiline':False]
['text':'   add a {bof} <cat> <former root of tree> to the','line_number':88,'multiline':False]
['text':'   tree.  Means that all matches must start out with the ','line_number':89,'multiline':False]
['text':'   {bof} fake character.','line_number':90,'multiline':False]
['text':' ','line_number':91,'multiline':False]
['text':' Delete and exit if memory allocation failed.','line_number':95,'multiline':False]
['text':' Reserved value for {bof}.','line_number':105,'multiline':False]
['text':'','line_number':109,'multiline':False]
['text':' Add a unique right-end marker to the expression.','line_number':110,'multiline':False]
['text':'   Appears as a cat-node, left child being the original tree,','line_number':111,'multiline':False]
['text':'   right child being the end marker.','line_number':112,'multiline':False]
['text':'','line_number':113,'multiline':False]
['text':' Exit if memory allocation failed.','line_number':115,'multiline':False]
['text':' Delete and exit if memory allocation failed.','line_number':123,'multiline':False]
['text':'','line_number':132,'multiline':False]
['text':'  Replace all references to UnicodeSets with the tree for the equivalent','line_number':133,'multiline':False]
['text':'      expression.','line_number':134,'multiline':False]
['text':'','line_number':135,'multiline':False]
['text':'','line_number':145,'multiline':False]
['text':' calculate the functions nullable, firstpos, lastpos and followpos on','line_number':146,'multiline':False]
['text':' nodes in the parse tree.','line_number':147,'multiline':False]
['text':'    See the alogrithm description in Aho.','line_number':148,'multiline':False]
['text':'    Understanding how this works by looking at the code alone will be','line_number':149,'multiline':False]
['text':'       nearly impossible.','line_number':150,'multiline':False]
['text':'','line_number':151,'multiline':False]
['text':'','line_number':161,'multiline':False]
['text':'  For "chained" rules, modify the followPos sets','line_number':162,'multiline':False]
['text':'','line_number':163,'multiline':False]
['text':'','line_number':168,'multiline':False]
['text':'  BOF (start of input) test fixup.','line_number':169,'multiline':False]
['text':'','line_number':170,'multiline':False]
['text':'','line_number':175,'multiline':False]
['text':' Build the DFA state transition tables.','line_number':176,'multiline':False]
['text':'','line_number':177,'multiline':False]
['text':'','line_number':183,'multiline':False]
['text':' Update the global table of rule status {tag} values','line_number':184,'multiline':False]
['text':' The rule builder has a global vector of status values that are common','line_number':185,'multiline':False]
['text':'    for all tables.  Merge the ones from this table into the global set.','line_number':186,'multiline':False]
['text':'','line_number':187,'multiline':False]
['text':'-----------------------------------------------------------------------------','line_number':195,'multiline':False]
['text':'','line_number':196,'multiline':False]
['text':'   calcNullable.    Impossible to explain succinctly.  See Aho, section 3.9','line_number':197,'multiline':False]
['text':'','line_number':198,'multiline':False]
['text':'-----------------------------------------------------------------------------','line_number':199,'multiline':False]
['text':' These are non-empty leaf node types.','line_number':206,'multiline':False]
['text':' Lookahead marker node.  It's a leaf, so no recursion on children.','line_number':212,'multiline':False]
['text':' It's nullable because it does not match any literal text from the input stream.','line_number':213,'multiline':False]
['text':' The node is not a leaf.','line_number':219,'multiline':False]
['text':'  Calculate nullable on its children.','line_number':220,'multiline':False]
['text':' Apply functions from table 3.40 in Aho','line_number':224,'multiline':False]
['text':'-----------------------------------------------------------------------------','line_number':242,'multiline':False]
['text':'','line_number':243,'multiline':False]
['text':'   calcFirstPos.    Impossible to explain succinctly.  See Aho, section 3.9','line_number':244,'multiline':False]
['text':'','line_number':245,'multiline':False]
['text':'-----------------------------------------------------------------------------','line_number':246,'multiline':False]
['text':' These are non-empty leaf node types.','line_number':255,'multiline':False]
['text':' Note: In order to maintain the sort invariant on the set,','line_number':256,'multiline':False]
['text':' this function should only be called on a node whose set is','line_number':257,'multiline':False]
['text':' empty to start with.','line_number':258,'multiline':False]
['text':' The node is not a leaf.','line_number':263,'multiline':False]
['text':'  Calculate firstPos on its children.','line_number':264,'multiline':False]
['text':' Apply functions from table 3.40 in Aho','line_number':268,'multiline':False]
['text':'-----------------------------------------------------------------------------','line_number':288,'multiline':False]
['text':'','line_number':289,'multiline':False]
['text':'   calcLastPos.    Impossible to explain succinctly.  See Aho, section 3.9','line_number':290,'multiline':False]
['text':'','line_number':291,'multiline':False]
['text':'-----------------------------------------------------------------------------','line_number':292,'multiline':False]
['text':' These are non-empty leaf node types.','line_number':301,'multiline':False]
['text':' Note: In order to maintain the sort invariant on the set,','line_number':302,'multiline':False]
['text':' this function should only be called on a node whose set is','line_number':303,'multiline':False]
['text':' empty to start with.','line_number':304,'multiline':False]
['text':' The node is not a leaf.','line_number':309,'multiline':False]
['text':'  Calculate lastPos on its children.','line_number':310,'multiline':False]
['text':' Apply functions from table 3.40 in Aho','line_number':314,'multiline':False]
['text':'-----------------------------------------------------------------------------','line_number':334,'multiline':False]
['text':'','line_number':335,'multiline':False]
['text':'   calcFollowPos.    Impossible to explain succinctly.  See Aho, section 3.9','line_number':336,'multiline':False]
['text':'','line_number':337,'multiline':False]
['text':'-----------------------------------------------------------------------------','line_number':338,'multiline':False]
['text':' Aho rule #1','line_number':349,'multiline':False]
['text':' is 'i' in Aho's description','line_number':351,'multiline':False]
['text':' Aho rule #2','line_number':362,'multiline':False]
['text':' again, n and i are the names from Aho's description.','line_number':365,'multiline':False]
['text':'-----------------------------------------------------------------------------','line_number':378,'multiline':False]
['text':'','line_number':379,'multiline':False]
['text':'    addRuleRootNodes    Recursively walk a parse tree, adding all nodes flagged','line_number':380,'multiline':False]
['text':'                        as roots of a rule to a destination vector.','line_number':381,'multiline':False]
['text':'','line_number':382,'multiline':False]
['text':'-----------------------------------------------------------------------------','line_number':383,'multiline':False]
['text':' Note: rules cannot nest. If we found a rule start node,','line_number':390,'multiline':False]
['text':'       no child node can also be a start node.','line_number':391,'multiline':False]
['text':'-----------------------------------------------------------------------------','line_number':398,'multiline':False]
['text':'','line_number':399,'multiline':False]
['text':'   calcChainedFollowPos.    Modify the previously calculated followPos sets','line_number':400,'multiline':False]
['text':'                            to implement rule chaining.  NOT described by Aho','line_number':401,'multiline':False]
['text':'','line_number':402,'multiline':False]
['text':'-----------------------------------------------------------------------------','line_number':403,'multiline':False]
['text':' get a list of all endmarker nodes.','line_number':414,'multiline':False]
['text':' get a list all leaf nodes','line_number':417,'multiline':False]
['text':' Collect all leaf nodes that can start matches for rules','line_number':423,'multiline':False]
['text':' with inbound chaining enabled, which is the union of the ','line_number':424,'multiline':False]
['text':' firstPosition sets from each of the rule root nodes.','line_number':425,'multiline':False]
['text':' Identify leaf nodes that correspond to overall rule match positions.','line_number':448,'multiline':False]
['text':'   These include an endMarkerNode in their followPos sets.','line_number':449,'multiline':False]
['text':' node wasn't an end node.  Try again with the next.','line_number':457,'multiline':False]
['text':' We've got a node that can end a match.','line_number':461,'multiline':False]
['text':' Line Break Specific hack:  If this node's val correspond to the $CM char class,','line_number':463,'multiline':False]
['text':'                            don't chain from it.','line_number':464,'multiline':False]
['text':' TODO:  Add rule syntax for this behavior, get specifics out of here and','line_number':465,'multiline':False]
['text':'        into the rule file.','line_number':466,'multiline':False]
['text':' c == -1 occurs with sets containing only the {eof} marker string.','line_number':470,'multiline':False]
['text':' Now iterate over the nodes that can start a match, looking for ones','line_number':479,'multiline':False]
['text':'   with the same char class as our ending node.','line_number':480,'multiline':False]
['text':' The end val (character class) of one possible match is the','line_number':489,'multiline':False]
['text':'   same as the start of another.','line_number':490,'multiline':False]
['text':' Add all nodes from the followPos of the start node to the','line_number':492,'multiline':False]
['text':'  followPos set of the end node, which will have the effect of','line_number':493,'multiline':False]
['text':'  letting matches transition from a match state at endNode','line_number':494,'multiline':False]
['text':'  to the second char of a match starting with startNode.','line_number':495,'multiline':False]
['text':'-----------------------------------------------------------------------------','line_number':503,'multiline':False]
['text':'','line_number':504,'multiline':False]
['text':'   bofFixup.    Fixup for state tables that include {bof} beginning of input testing.','line_number':505,'multiline':False]
['text':'                Do an swizzle similar to chaining, modifying the followPos set of','line_number':506,'multiline':False]
['text':'                the bofNode to include the followPos nodes from other {bot} nodes','line_number':507,'multiline':False]
['text':'                scattered through the tree.','line_number':508,'multiline':False]
['text':'','line_number':509,'multiline':False]
['text':'                This function has much in common with calcChainedFollowPos().','line_number':510,'multiline':False]
['text':'','line_number':511,'multiline':False]
['text':'-----------------------------------------------------------------------------','line_number':512,'multiline':False]
['text':'   The parse tree looks like this ...','line_number':519,'multiline':False]
['text':'         fTree root  --->       <cat>','line_number':520,'multiline':False]
['text':'                               /     \       .','line_number':521,'multiline':False]
['text':'                            <cat>   <#end node>','line_number':522,'multiline':False]
['text':'                           /     \  .','line_number':523,'multiline':False]
['text':'                     <bofNode>   rest','line_number':524,'multiline':False]
['text':'                               of tree','line_number':525,'multiline':False]
['text':'','line_number':526,'multiline':False]
['text':'    We will be adding things to the followPos set of the <bofNode>','line_number':527,'multiline':False]
['text':'','line_number':528,'multiline':False]
['text':' Get all nodes that can be the start a match of the user-written rules','line_number':533,'multiline':False]
['text':'  (excluding the fake bofNode)','line_number':534,'multiline':False]
['text':'  We want the nodes that can start a match in the','line_number':535,'multiline':False]
['text':'     part labeled "rest of tree"','line_number':536,'multiline':False]
['text':' ','line_number':537,'multiline':False]
['text':'  We found a leaf node corresponding to a {bof} that was','line_number':549,'multiline':False]
['text':'    explicitly written into a rule.','line_number':550,'multiline':False]
['text':'  Add everything from the followPos set of this node to the','line_number':551,'multiline':False]
['text':'    followPos set of the fake bofNode at the start of the tree.','line_number':552,'multiline':False]
['text':'  ','line_number':553,'multiline':False]
['text':'-----------------------------------------------------------------------------','line_number':559,'multiline':False]
['text':'','line_number':560,'multiline':False]
['text':'   buildStateTable()    Determine the set of runtime DFA states and the','line_number':561,'multiline':False]
['text':'                        transition tables for these states, by the algorithm','line_number':562,'multiline':False]
['text':'                        of fig. 3.44 in Aho.','line_number':563,'multiline':False]
['text':'','line_number':564,'multiline':False]
['text':'                        Most of the comments are quotes of Aho's psuedo-code.','line_number':565,'multiline':False]
['text':'','line_number':566,'multiline':False]
['text':'-----------------------------------------------------------------------------','line_number':567,'multiline':False]
['text':' Set it to NULL to avoid uninitialized warning','line_number':573,'multiline':False]
['text':'','line_number':575,'multiline':False]
['text':' Add a dummy state 0 - the stop state.  Not from Aho.','line_number':576,'multiline':False]
['text':' initially, the only unmarked state in Dstates is firstpos(root),','line_number':595,'multiline':False]
['text':'       where toot is the root of the syntax tree for (r)#;','line_number':596,'multiline':False]
['text':' while there is an unmarked state T in Dstates do begin','line_number':617,'multiline':False]
['text':' mark T;','line_number':633,'multiline':False]
['text':' for each input symbol a do begin','line_number':636,'multiline':False]
['text':' let U be the set of positions that are in followpos(p)','line_number':639,'multiline':False]
['text':'    for some position p in T','line_number':640,'multiline':False]
['text':'    such that the symbol at position p is a;','line_number':641,'multiline':False]
['text':' if U is not empty and not in DStates then','line_number':659,'multiline':False]
['text':' Add U as an unmarked state to Dstates','line_number':677,'multiline':False]
['text':' Dtran[T, a] := U;','line_number':695,'multiline':False]
['text':' delete local pointers only if error occured.','line_number':701,'multiline':False]
['text':'-----------------------------------------------------------------------------','line_number':709,'multiline':False]
['text':'','line_number':710,'multiline':False]
['text':'   flagAcceptingStates    Identify accepting states.','line_number':711,'multiline':False]
['text':'                          First get a list of all of the end marker nodes.','line_number':712,'multiline':False]
['text':'                          Then, for each state s,','line_number':713,'multiline':False]
['text':'                              if s contains one of the end marker nodes in its list of tree positions then','line_number':714,'multiline':False]
['text':'                                  s is an accepting state.','line_number':715,'multiline':False]
['text':'','line_number':716,'multiline':False]
['text':'-----------------------------------------------------------------------------','line_number':717,'multiline':False]
['text':' Any non-zero value for fAccepting means this is an accepting node.','line_number':741,'multiline':False]
['text':' The value is what will be returned to the user as the break status.','line_number':742,'multiline':False]
['text':' If no other value was specified, force it to -1.','line_number':743,'multiline':False]
['text':' State hasn't been marked as accepting yet.  Do it now.','line_number':746,'multiline':False]
['text':' Both lookahead and non-lookahead accepting for this state.','line_number':753,'multiline':False]
['text':' Favor the look-ahead.  Expedient for line break.','line_number':754,'multiline':False]
['text':' TODO:  need a more elegant resolution for conflicting rules.','line_number':755,'multiline':False]
['text':' implicit else:','line_number':758,'multiline':False]
['text':' if sd->fAccepting already had a value other than 0 or -1, leave it be.','line_number':759,'multiline':False]
['text':' If the end marker node is from a look-ahead rule, set','line_number':761,'multiline':False]
['text':'   the fLookAhead field or this state also.','line_number':762,'multiline':False]
['text':' TODO:  don't change value if already set?','line_number':764,'multiline':False]
['text':' TODO:  allow for more than one active look-ahead rule in engine.','line_number':765,'multiline':False]
['text':'        Make value here an index to a side array in engine?','line_number':766,'multiline':False]
['text':'-----------------------------------------------------------------------------','line_number':775,'multiline':False]
['text':'','line_number':776,'multiline':False]
['text':'    flagLookAheadStates   Very similar to flagAcceptingStates, above.','line_number':777,'multiline':False]
['text':'','line_number':778,'multiline':False]
['text':'-----------------------------------------------------------------------------','line_number':779,'multiline':False]
['text':'-----------------------------------------------------------------------------','line_number':808,'multiline':False]
['text':'','line_number':809,'multiline':False]
['text':'    flagTaggedStates','line_number':810,'multiline':False]
['text':'','line_number':811,'multiline':False]
['text':'-----------------------------------------------------------------------------','line_number':812,'multiline':False]
['text':' For each tag node t (all of 'em)','line_number':829,'multiline':False]
['text':'    For each state  s (row in the state table)','line_number':832,'multiline':False]
['text':'       if  s include the tag node t','line_number':834,'multiline':False]
['text':'-----------------------------------------------------------------------------','line_number':844,'multiline':False]
['text':'','line_number':845,'multiline':False]
['text':'  mergeRuleStatusVals','line_number':846,'multiline':False]
['text':'','line_number':847,'multiline':False]
['text':'      Update the global table of rule status {tag} values','line_number':848,'multiline':False]
['text':'      The rule builder has a global vector of status values that are common','line_number':849,'multiline':False]
['text':'      for all tables.  Merge the ones from this table into the global set.','line_number':850,'multiline':False]
['text':'','line_number':851,'multiline':False]
['text':'-----------------------------------------------------------------------------','line_number':852,'multiline':False]
['text':'','line_number':854,'multiline':False]
['text':'  The basic outline of what happens here is this...','line_number':855,'multiline':False]
['text':'','line_number':856,'multiline':False]
['text':'    for each state in this state table','line_number':857,'multiline':False]
['text':'       if the status tag list for this state is in the global statuses list','line_number':858,'multiline':False]
['text':'           record where and','line_number':859,'multiline':False]
['text':'           continue with the next state','line_number':860,'multiline':False]
['text':'       else','line_number':861,'multiline':False]
['text':'           add the tag list for this state to the global list.','line_number':862,'multiline':False]
['text':'','line_number':863,'multiline':False]
['text':' Pre-set a single tag of {0} into the table.','line_number':867,'multiline':False]
['text':'   We will need this as a default, for rule sets with no explicit tagging.','line_number':868,'multiline':False]
['text':' Num of statuses in group','line_number':870,'multiline':False]
['text':'   and our single status of zero','line_number':871,'multiline':False]
['text':'    For each state','line_number':874,'multiline':False]
['text':' No tag values are explicitly associated with this state.','line_number':879,'multiline':False]
['text':'   Set the default tag value.','line_number':880,'multiline':False]
['text':' There are tag(s) associated with this state.','line_number':885,'multiline':False]
['text':'   fTagsIdx will be the index into the global tag list for this state's tag values.','line_number':886,'multiline':False]
['text':'   Initial value of -1 flags that we haven't got it set yet.','line_number':887,'multiline':False]
['text':' indexes into the global rule status vals list','line_number':889,'multiline':False]
['text':' Loop runs once per group of tags in the global list','line_number':892,'multiline':False]
['text':' The number of tags for this state is different from','line_number':897,'multiline':False]
['text':'    the number of tags in this group from the global list.','line_number':898,'multiline':False]
['text':'    Continue with the next group from the global list.','line_number':899,'multiline':False]
['text':' The lengths match, go ahead and compare the actual tag values','line_number':902,'multiline':False]
['text':'    between this state and the group from the global list.','line_number':903,'multiline':False]
['text':' Mismatch.','line_number':907,'multiline':False]
['text':' We found a set of tag values in the global list that match','line_number':913,'multiline':False]
['text':'   those for this state.  Use them.','line_number':914,'multiline':False]
['text':' No suitable entry in the global tag list already.  Add one','line_number':921,'multiline':False]
['text':'-----------------------------------------------------------------------------','line_number':937,'multiline':False]
['text':'','line_number':938,'multiline':False]
['text':'  sortedAdd  Add a value to a vector of sorted values (ints).','line_number':939,'multiline':False]
['text':'             Do not replicate entries; if the value is already there, do not','line_number':940,'multiline':False]
['text':'                add a second one.','line_number':941,'multiline':False]
['text':'             Lazily create the vector if it does not already exist.','line_number':942,'multiline':False]
['text':'','line_number':943,'multiline':False]
['text':'-----------------------------------------------------------------------------','line_number':944,'multiline':False]
['text':' The value is already in the vector.  Don't add it again.','line_number':959,'multiline':False]
['text':'-----------------------------------------------------------------------------','line_number':971,'multiline':False]
['text':'','line_number':972,'multiline':False]
['text':'  setAdd     Set operation on UVector','line_number':973,'multiline':False]
['text':'             dest = dest union source','line_number':974,'multiline':False]
['text':'             Elements may only appear once and must be sorted.','line_number':975,'multiline':False]
['text':'','line_number':976,'multiline':False]
['text':'-----------------------------------------------------------------------------','line_number':977,'multiline':False]
['text':' Handle small cases without malloc','line_number':982,'multiline':False]
['text':' destArray.getArrayLimit()?','line_number':992,'multiline':False]
['text':' sourceArray.getArrayLimit()?','line_number':1000,'multiline':False]
['text':' Avoid multiple "get element" calls by getting the contents into arrays','line_number':1002,'multiline':False]
['text':' This check is required for machines with segmented memory, like i5/OS.','line_number':1013,'multiline':False]
['text':' Direct pointer comparison is not recommended.','line_number':1014,'multiline':False]
['text':' *sourcePtr < *destPtr ','line_number':1018,'multiline':True]
['text':' At most one of these two cleanup loops will execute','line_number':1023,'multiline':False]
['text':'-----------------------------------------------------------------------------','line_number':1036,'multiline':False]
['text':'','line_number':1037,'multiline':False]
['text':'  setEqual    Set operation on UVector.','line_number':1038,'multiline':False]
['text':'              Compare for equality.','line_number':1039,'multiline':False]
['text':'              Elements must be sorted.','line_number':1040,'multiline':False]
['text':'','line_number':1041,'multiline':False]
['text':'-----------------------------------------------------------------------------','line_number':1042,'multiline':False]
['text':'-----------------------------------------------------------------------------','line_number':1048,'multiline':False]
['text':'','line_number':1049,'multiline':False]
['text':'  printPosSets   Debug function.  Dump Nullable, firstpos, lastpos and followpos','line_number':1050,'multiline':False]
['text':'                 for each node in the tree.','line_number':1051,'multiline':False]
['text':'','line_number':1052,'multiline':False]
['text':'-----------------------------------------------------------------------------','line_number':1053,'multiline':False]
['text':'-----------------------------------------------------------------------------','line_number':1080,'multiline':False]
['text':'','line_number':1081,'multiline':False]
['text':'   getTableSize()    Calculate the size of the runtime form of this','line_number':1082,'multiline':False]
['text':'                     state transition table.','line_number':1083,'multiline':False]
['text':'','line_number':1084,'multiline':False]
['text':'-----------------------------------------------------------------------------','line_number':1085,'multiline':False]
['text':' The header, with no rows to the table.','line_number':1096,'multiline':False]
['text':'  Note  The declaration of RBBIStateTableRow is for a table of two columns.','line_number':1101,'multiline':False]
['text':'        Therefore we subtract two from numCols when determining','line_number':1102,'multiline':False]
['text':'        how much storage to add to a row for the total columns.','line_number':1103,'multiline':False]
['text':'-----------------------------------------------------------------------------','line_number':1111,'multiline':False]
['text':'','line_number':1112,'multiline':False]
['text':'   exportTable()    export the state transition table in the format required','line_number':1113,'multiline':False]
['text':'                    by the runtime engine.  getTableSize() bytes of memory','line_number':1114,'multiline':False]
['text':'                    must be available at the output address "where".','line_number':1115,'multiline':False]
['text':'','line_number':1116,'multiline':False]
['text':'-----------------------------------------------------------------------------','line_number':1117,'multiline':False]
['text':'-----------------------------------------------------------------------------','line_number':1161,'multiline':False]
['text':'','line_number':1162,'multiline':False]
['text':'   printSet    Debug function.   Print the contents of a UVector','line_number':1163,'multiline':False]
['text':'','line_number':1164,'multiline':False]
['text':'-----------------------------------------------------------------------------','line_number':1165,'multiline':False]
['text':'-----------------------------------------------------------------------------','line_number':1178,'multiline':False]
['text':'','line_number':1179,'multiline':False]
['text':'   printStates    Debug Function.  Dump the fully constructed state transition table.','line_number':1180,'multiline':False]
['text':'','line_number':1181,'multiline':False]
['text':'-----------------------------------------------------------------------------','line_number':1182,'multiline':False]
['text':' input "character"','line_number':1185,'multiline':False]
['text':' state number','line_number':1186,'multiline':False]
['text':'-----------------------------------------------------------------------------','line_number':1215,'multiline':False]
['text':'','line_number':1216,'multiline':False]
['text':'   printRuleStatusTable    Debug Function.  Dump the common rule status table','line_number':1217,'multiline':False]
['text':'','line_number':1218,'multiline':False]
['text':'-----------------------------------------------------------------------------','line_number':1219,'multiline':False]
['text':'-----------------------------------------------------------------------------','line_number':1244,'multiline':False]
['text':'','line_number':1245,'multiline':False]
['text':'   RBBIStateDescriptor     Methods.  This is a very struct-like class','line_number':1246,'multiline':False]
['text':'                           Most access is directly to the fields.','line_number':1247,'multiline':False]
['text':'','line_number':1248,'multiline':False]
['text':'-----------------------------------------------------------------------------','line_number':1249,'multiline':False]
['text':' fDtran needs to be pre-sized.','line_number':1268,'multiline':False]
['text':'   It is indexed by input symbols, and will','line_number':1269,'multiline':False]
['text':'   hold  the next state number for each','line_number':1270,'multiline':False]
['text':'   symbol.','line_number':1271,'multiline':False]
['text':' #if !UCONFIG_NO_BREAK_ITERATION ','line_number':1286,'multiline':True]
