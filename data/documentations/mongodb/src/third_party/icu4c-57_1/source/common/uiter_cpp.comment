['text':'
*******************************************************************************
*
*   Copyright (C) 2002-2012, International Business Machines
*   Corporation and others.  All Rights Reserved.
*
*******************************************************************************
*   file name:  uiter.cpp
*   encoding:   US-ASCII
*   tab size:   8 (not used)
*   indentation:4
*
*   created on: 2002jan18
*   created by: Markus W. Scherer
','line_number':1,'multiline':True]
['text':' No-Op UCharIterator implementation for illegal input --------------------- ','line_number':34,'multiline':True]
['text':'iter','line_number':37,'multiline':True]
['text':'origin','line_number':37,'multiline':True]
['text':'iter','line_number':42,'multiline':True]
['text':'delta','line_number':42,'multiline':True]
['text':'origin','line_number':42,'multiline':True]
['text':'iter','line_number':47,'multiline':True]
['text':'iter','line_number':52,'multiline':True]
['text':'iter','line_number':57,'multiline':True]
['text':'iter','line_number':62,'multiline':True]
['text':'state','line_number':62,'multiline':True]
['text':' UCharIterator implementation for simple strings -------------------------- ','line_number':80,'multiline':True]
['text':'
 * This is an implementation of a code unit (UChar) iterator
 * for UChar * strings.
 *
 * The UCharIterator.context field holds a pointer to the string.
 ','line_number':82,'multiline':True]
['text':' not a valid origin ','line_number':103,'multiline':True]
['text':' Should never get here! ','line_number':104,'multiline':True]
['text':' Error ','line_number':130,'multiline':True]
['text':' do nothing ','line_number':187,'multiline':True]
['text':' UCharIterator implementation for UTF-16BE strings ------------------------ ','line_number':229,'multiline':True]
['text':'
 * This is an implementation of a code unit (UChar) iterator
 * for UTF-16BE strings, i.e., strings in byte-vectors where
 * each UChar is stored as a big-endian pair of bytes.
 *
 * The UCharIterator.context field holds a pointer to the string.
 * Everything works just like with a normal UChar iterator (uiter_setString),
 * except that UChars are assembled from byte pairs.
 ','line_number':231,'multiline':True]
['text':' internal helper function ','line_number':241,'multiline':True]
['text':'
 * Count the number of UChars in a UTF-16BE string before a terminating UChar NUL,
 * i.e., before a pair of 0 bytes where the first 0 byte is at an even
 * offset from s.
 ','line_number':297,'multiline':True]
['text':'
         * even-aligned, call u_strlen(s)
         * we are probably on a little-endian machine, but searching for UChar NUL
         * does not care about endianness
         ','line_number':305,'multiline':True]
['text':' odd-aligned, search for pair of 0 bytes ','line_number':312,'multiline':True]
['text':' allow only even-length strings (the input length counts bytes) ','line_number':325,'multiline':True]
['text':' length/=2, except that >>=1 also works for -1 (-1/2==0, -1>>1==-1) ','line_number':327,'multiline':True]
['text':' big-endian machine and 2-aligned UTF-16BE string: use normal UChar iterator ','line_number':331,'multiline':True]
['text':' UCharIterator wrapper around CharacterIterator --------------------------- ','line_number':350,'multiline':True]
['text':'
 * This is wrapper code around a C++ CharacterIterator to
 * look like a C UCharIterator.
 *
 * The UCharIterator.context field holds a pointer to the CharacterIterator.
 ','line_number':352,'multiline':True]
['text':' not a valid origin ','line_number':373,'multiline':True]
['text':' Should never get here! ','line_number':374,'multiline':True]
['text':' not a valid origin ','line_number':393,'multiline':True]
['text':' Should never get here! ','line_number':394,'multiline':True]
['text':' do nothing ','line_number':447,'multiline':True]
['text':' UCharIterator wrapper around Replaceable --------------------------------- ','line_number':483,'multiline':True]
['text':'
 * This is an implementation of a code unit (UChar) iterator
 * based on a Replaceable object.
 *
 * The UCharIterator.context field holds a pointer to the Replaceable.
 * UCharIterator.length and UCharIterator.index hold Replaceable.length()
 * and the iteration index.
 ','line_number':485,'multiline':True]
['text':' UCharIterator implementation for UTF-8 strings --------------------------- ','line_number':548,'multiline':True]
['text':'
 * Possible, probably necessary only for an implementation for arbitrary
 * converters:
 * Maintain a buffer (ring buffer?) for a piece of converted 16-bit text.
 * This would require to turn reservedFn into a close function and
 * to introduce a uiter_close(iter).
 ','line_number':550,'multiline':True]
['text':'
 * Minimal implementation:
 * Maintain a single-UChar buffer for an additional surrogate.
 * The caller must not modify start and limit because they are used internally.
 *
 * Use UCharIterator fields as follows:
 *   context        pointer to UTF-8 string
 *   length         UTF-16 length of the string; -1 until lazy evaluation
 *   start          current UTF-8 index
 *   index          current UTF-16 index; may be -1="unknown" after setState()
 *   limit          UTF-8 length of the string
 *   reservedField  supplementary code point
 *
 * Since UCharIterator delivers 16-bit code units, the iteration can be
 * currently in the middle of the byte sequence for a supplementary code point.
 * In this case, reservedField will contain that code point and start will
 * point to after the corresponding byte sequence. The UTF-16 index will be
 * one less than what it would otherwise be corresponding to the UTF-8 index.
 * Otherwise, reservedField will be 0.
 ','line_number':560,'multiline':True]
['text':'
 * Possible optimization for NUL-terminated UTF-8 and UTF-16 strings:
 * Add implementations that do not call strlen() for iteration but check for NUL.
 ','line_number':581,'multiline':True]
['text':' the current UTF-16 index is unknown after setState(), count from the beginning ','line_number':594,'multiline':True]
['text':' count up to the UTF-8 index ','line_number':601,'multiline':True]
['text':' just in case setState() did not get us to a code point boundary ','line_number':607,'multiline':True]
['text':' in case it was <0 or wrong ','line_number':609,'multiline':True]
['text':' we are in the middle of a supplementary code point ','line_number':612,'multiline':True]
['text':'
                 * the current UTF-16 index is unknown after setState(),
                 * we must first count from the beginning to here
                 ','line_number':626,'multiline':True]
['text':' count from the beginning to the current index ','line_number':633,'multiline':True]
['text':' assume i==limit==iter->start, set the UTF-16 index ','line_number':639,'multiline':True]
['text':' just in case setState() did not get us to a code point boundary ','line_number':640,'multiline':True]
['text':' count from the current index to the end ','line_number':650,'multiline':True]
['text':' not a valid origin ','line_number':660,'multiline':True]
['text':' Should never get here! ','line_number':661,'multiline':True]
['text':' requested UTF-16 index ','line_number':670,'multiline':True]
['text':' UTF-8 index ','line_number':671,'multiline':True]
['text':' calculate the requested UTF-16 index ','line_number':674,'multiline':True]
['text':' iter->index<0 (unknown) is possible ','line_number':680,'multiline':True]
['text':' the current UTF-16 index is unknown after setState(), use only delta ','line_number':687,'multiline':True]
['text':' pin to the end, avoid counting the length ','line_number':698,'multiline':True]
['text':' the current UTF-16 index is unknown, use only delta ','line_number':705,'multiline':True]
['text':' Error ','line_number':712,'multiline':True]
['text':' shortcuts: pinning to the edges of the string ','line_number':716,'multiline':True]
['text':' minimize the number of U8_NEXT/PREV operations ','line_number':727,'multiline':True]
['text':' go forward from the start instead of backward from the current index ','line_number':729,'multiline':True]
['text':'
             * if we have the UTF-16 index and length and the new position is
             * closer to the end than the current index,
             * then go backward from the end instead of forward from the current index
             ','line_number':732,'multiline':True]
['text':' nothing to do ','line_number':744,'multiline':True]
['text':' move relative to unknown UTF-16 index ','line_number':747,'multiline':True]
['text':' nothing to do ','line_number':749,'multiline':True]
['text':' moving backwards by more UChars than there are UTF-8 bytes, pin to 0 ','line_number':751,'multiline':True]
['text':' moving forward by more UChars than the remaining UTF-8 bytes, pin to the end ','line_number':755,'multiline':True]
['text':' may or may not be <0 (unknown) ','line_number':756,'multiline':True]
['text':' delta!=0 ','line_number':763,'multiline':True]
['text':' move towards the requested position, pin to the edges of the string ','line_number':765,'multiline':True]
['text':' could be <0 (unknown) ','line_number':767,'multiline':True]
['text':' go forward ','line_number':770,'multiline':True]
['text':' delta==1 ','line_number':785,'multiline':True]
['text':' stop in the middle of a supplementary code point ','line_number':786,'multiline':True]
['text':' delta=0; ','line_number':789,'multiline':True]
['text':' delta<0 ','line_number':799,'multiline':True]
['text':' go backward ','line_number':800,'multiline':True]
['text':' we stayed behind the supplementary code point; go before it now ','line_number':803,'multiline':True]
['text':' delta==-1 ','line_number':815,'multiline':True]
['text':' stop in the middle of a supplementary code point ','line_number':816,'multiline':True]
['text':' back to behind this supplementary code point for consistent state ','line_number':817,'multiline':True]
['text':' delta=0; ','line_number':820,'multiline':True]
['text':' we started with index<0 (unknown) so pos is bogus ','line_number':829,'multiline':True]
['text':' reached the beginning ','line_number':831,'multiline':True]
['text':' we still don't know the UTF-16 index ','line_number':833,'multiline':True]
['text':' we stayed behind the supplementary code point; go before it now ','line_number':911,'multiline':True]
['text':' back to behind this supplementary code point for consistent state ','line_number':929,'multiline':True]
['text':' do nothing ','line_number':953,'multiline':True]
['text':' setting to the current state: no-op ','line_number':957,'multiline':True]
['text':' UTF-8 index ','line_number':959,'multiline':True]
['text':' 1 if in surrogate pair, must be index>=4 ','line_number':960,'multiline':True]
['text':' restore UTF-8 byte index ','line_number':965,'multiline':True]
['text':' unknown UTF-16 index ','line_number':969,'multiline':True]
['text':' verified index>=4 above ','line_number':974,'multiline':True]
['text':' Helper functions --------------------------------------------------------- ','line_number':1019,'multiline':True]
['text':'
             * go to the next code unit
             * we know that we are not at the limit because c!=U_SENTINEL
             ','line_number':1028,'multiline':True]
['text':' undo index movement ','line_number':1037,'multiline':True]
['text':' undo index movement ','line_number':1044,'multiline':True]
['text':' unmatched first surrogate, undo index movement ','line_number':1061,'multiline':True]
['text':' unmatched second surrogate, undo index movement ','line_number':1077,'multiline':True]
['text':' do nothing ','line_number':1096,'multiline':True]
