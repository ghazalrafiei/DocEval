['text':'
******************************************************************************
* Copyright (C) 2015, International Business Machines Corporation and         
* others. All Rights Reserved.                                                
******************************************************************************
*                                                                             
* File UNIFIEDCACHE.CPP 
******************************************************************************
','line_number':1,'multiline':True]
['text':' gNoValue must be created first to avoid assertion error in','line_number':74,'multiline':False]
['text':' cache constructor.','line_number':75,'multiline':False]
['text':' We add a softref because we want hash elements with gNoValue to be','line_number':88,'multiline':False]
['text':' elligible for purging but we don't ever want gNoValue to be deleted.','line_number':89,'multiline':False]
['text':' Use a loop in case cache items that are flushed held hard references to','line_number':156,'multiline':False]
['text':' other cache items making those additional cache items eligible for','line_number':157,'multiline':False]
['text':' flushing.','line_number':158,'multiline':False]
['text':' Dumps content of cache.','line_number':180,'multiline':False]
['text':' On entry, gCacheMutex must be held.','line_number':181,'multiline':False]
['text':' On exit, cache contents dumped to stderr.','line_number':182,'multiline':False]
['text':' Try our best to clean up first.','line_number':210,'multiline':False]
['text':' Now all that should be left in the cache are entries that refer to','line_number':213,'multiline':False]
['text':' each other and entries with hard references from outside the cache. ','line_number':214,'multiline':False]
['text':' Nothing we can do about these so proceed to wipe out the cache.','line_number':215,'multiline':False]
['text':' Returns the next element in the cache round robin style.','line_number':222,'multiline':False]
['text':' On entry, gCacheMutex must be held.','line_number':223,'multiline':False]
['text':' Flushes the contents of the cache. If cache values hold references to other','line_number':234,'multiline':False]
['text':' cache values then _flush should be called in a loop until it returns FALSE.','line_number':235,'multiline':False]
['text':' On entry, gCacheMutex must be held.','line_number':236,'multiline':False]
['text':' On exit, those values with are evictable are flushed. If all is true','line_number':237,'multiline':False]
['text':' then every value is flushed even if it is not evictable.','line_number':238,'multiline':False]
['text':' Returns TRUE if any value in cache was flushed or FALSE otherwise.','line_number':239,'multiline':False]
['text':' Computes how many items should be evicted.','line_number':256,'multiline':False]
['text':' On entry, gCacheMutex must be held.','line_number':257,'multiline':False]
['text':' Returns number of items that should be evicted or a value <= 0 if no','line_number':258,'multiline':False]
['text':' items need to be evicted.','line_number':259,'multiline':False]
['text':' Run an eviction slice.','line_number':270,'multiline':False]
['text':' On entry, gCacheMutex must be held.','line_number':271,'multiline':False]
['text':' _runEvictionSlice runs a slice of the evict pipeline by examining the next','line_number':272,'multiline':False]
['text':' 10 entries in the cache round robin style evicting them if they are eligible.','line_number':273,'multiline':False]
['text':' Places a new value and creationStatus in the cache for the given key.','line_number':295,'multiline':False]
['text':' On entry, gCacheMutex must be held. key must not exist in the cache. ','line_number':296,'multiline':False]
['text':' On exit, value and creation status placed under key. Soft reference added','line_number':297,'multiline':False]
['text':' to value on successful add. On error sets status.','line_number':298,'multiline':False]
['text':' Places value and status at key if there is no value at key or if cache','line_number':322,'multiline':False]
['text':' entry for key is in progress. Otherwise, it leaves the current value and','line_number':323,'multiline':False]
['text':' status there.','line_number':324,'multiline':False]
['text':' On entry. gCacheMutex must not be held. value must be','line_number':325,'multiline':False]
['text':' included in the reference count of the object to which it points.','line_number':326,'multiline':False]
['text':' On exit, value and status are changed to what was already in the cache if','line_number':327,'multiline':False]
['text':' something was there and not in progress. Otherwise, value and status are left','line_number':328,'multiline':False]
['text':' unchanged in which case they are placed in the cache on a best-effort basis.','line_number':329,'multiline':False]
['text':' Caller must call removeRef() on value.','line_number':330,'multiline':False]
['text':' best-effort basis only.','line_number':343,'multiline':False]
['text':' Run an eviction slice. This will run even if we added a master entry','line_number':348,'multiline':False]
['text':' which doesn't increase the unused count, but that is still o.k','line_number':349,'multiline':False]
['text':' Attempts to fetch value and status for key from cache.','line_number':353,'multiline':False]
['text':' On entry, gCacheMutex must not be held value must be NULL and status must','line_number':354,'multiline':False]
['text':' be U_ZERO_ERROR.','line_number':355,'multiline':False]
['text':' On exit, either returns FALSE (In this','line_number':356,'multiline':False]
['text':' case caller should try to create the object) or returns TRUE with value','line_number':357,'multiline':False]
['text':' pointing to the fetched value and status set to fetched status. When','line_number':358,'multiline':False]
['text':' FALSE is returned status may be set to failure if an in progress hash','line_number':359,'multiline':False]
['text':' entry could not be made but value will remain unchanged. When TRUE is','line_number':360,'multiline':False]
['text':' returned, caler must call removeRef() on value.','line_number':361,'multiline':False]
['text':' Gets value out of cache.','line_number':382,'multiline':False]
['text':' On entry. gCacheMutex must not be held. value must be NULL. status','line_number':383,'multiline':False]
['text':' must be U_ZERO_ERROR.','line_number':384,'multiline':False]
['text':' On exit. value and status set to what is in cache at key or on cache','line_number':385,'multiline':False]
['text':' miss the key's createObject() is called and value and status are set to','line_number':386,'multiline':False]
['text':' the result of that. In this latter case, best effort is made to add the','line_number':387,'multiline':False]
['text':' value and status to the cache. If createObject() fails to create a value,','line_number':388,'multiline':False]
['text':' gNoValue is stored in cache, and value is set to NULL. Caller must call','line_number':389,'multiline':False]
['text':' removeRef on value if non NULL.','line_number':390,'multiline':False]
['text':' Register a master cache entry.','line_number':433,'multiline':False]
['text':' On entry, gCacheMutex must be held.','line_number':434,'multiline':False]
['text':' On exit, items in use count incremented, entry is marked as a master','line_number':435,'multiline':False]
['text':' entry, and value registered with cache so that subsequent calls to','line_number':436,'multiline':False]
['text':' addRef() and removeRef() on it correctly updates items in use count','line_number':437,'multiline':False]
['text':' Store a value and error in given hash entry.','line_number':445,'multiline':False]
['text':' On entry, gCacheMutex must be held. Hash entry element must be in progress.','line_number':446,'multiline':False]
['text':' value must be non NULL.','line_number':447,'multiline':False]
['text':' On Exit, soft reference added to value. value and status stored in hash','line_number':448,'multiline':False]
['text':' entry. Soft reference removed from previous stored value. Waiting','line_number':449,'multiline':False]
['text':' threads notified.','line_number':450,'multiline':False]
['text':' Tell waiting threads that we replace in-progress status with','line_number':467,'multiline':False]
['text':' an error.','line_number':468,'multiline':False]
['text':' Fetch value and error code from a particular hash entry.','line_number':494,'multiline':False]
['text':' On entry, gCacheMutex must be held. value must be either NULL or must be','line_number':495,'multiline':False]
['text':' included in the ref count of the object to which it points.','line_number':496,'multiline':False]
['text':' On exit, value and status set to what is in the hash entry. Caller must','line_number':497,'multiline':False]
['text':' eventually call removeRef on value.','line_number':498,'multiline':False]
['text':' If hash entry is in progress, value will be set to gNoValue and status will','line_number':499,'multiline':False]
['text':' be set to U_ZERO_ERROR.','line_number':500,'multiline':False]
['text':' Since we have the cache lock, calling regular SharedObject methods','line_number':508,'multiline':False]
['text':' could cause us to deadlock on ourselves since they may need to lock','line_number':509,'multiline':False]
['text':' the cache mutex.','line_number':510,'multiline':False]
['text':' Determine if given hash entry is in progress.','line_number':514,'multiline':False]
['text':' On entry, gCacheMutex must be held.','line_number':515,'multiline':False]
['text':' Since we have the cache lock, calling regular SharedObject methods','line_number':522,'multiline':False]
['text':' could cause us to deadlock on ourselves since they may need to lock','line_number':523,'multiline':False]
['text':' the cache mutex.','line_number':524,'multiline':False]
['text':' Determine if given hash entry is in progress.','line_number':529,'multiline':False]
['text':' On entry, gCacheMutex must be held.','line_number':530,'multiline':False]
['text':' Determine if given hash entry is eligible for eviction.','line_number':536,'multiline':False]
['text':' On entry, gCacheMutex must be held.','line_number':537,'multiline':False]
['text':' Entries that are under construction are never evictable','line_number':543,'multiline':False]
['text':' We can evict entries that are either not a master or have just','line_number':548,'multiline':False]
['text':' one reference (The one reference being from the cache itself).','line_number':549,'multiline':False]
