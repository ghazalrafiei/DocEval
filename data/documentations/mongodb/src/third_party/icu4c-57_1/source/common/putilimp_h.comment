['text':'
******************************************************************************
*
*   Copyright (C) 1997-2015, International Business Machines
*   Corporation and others.  All Rights Reserved.
*
******************************************************************************
*
*  FILE NAME : putilimp.h
*
*   Date        Name        Description
*   10/17/04    grhoten     Move internal functions from putil.h to this file.
******************************************************************************
','line_number':1,'multiline':True]
['text':'*
 * \def U_SIGNED_RIGHT_SHIFT_IS_ARITHMETIC
 * Nearly all CPUs and compilers implement a right-shift of a signed integer
 * as an Arithmetic Shift Right which copies the sign bit (the Most Significant Bit (MSB))
 * into the vacated bits (sign extension).
 * For example, (int32_t)0xfff5fff3>>4 becomes 0xffff5fff and -1>>1=-1.
 *
 * This can be useful for storing a signed value in the upper bits
 * and another bit field in the lower bits.
 * The signed value can be retrieved by simple right-shifting.
 *
 * This is consistent with the Java language.
 *
 * However, the C standard allows compilers to implement a right-shift of a signed integer
 * as a Logical Shift Right which copies a 0 into the vacated bits.
 * For example, (int32_t)0xfff5fff3>>4 becomes 0x0fff5fff and -1>>1=0x7fffffff.
 *
 * Code that depends on the natural behavior should be guarded with this macro,
 * with an alternate path for unusual platforms.
 * @internal
 ','line_number':22,'multiline':True]
['text':' Use the predefined value. ','line_number':44,'multiline':True]
['text':'
     * Nearly all CPUs & compilers implement a right-shift of a signed integer
     * as an Arithmetic Shift Right (with sign extension).
     ','line_number':46,'multiline':True]
['text':'* Define this to 1 if your platform supports IEEE 754 floating point,
   to 0 if it does not. ','line_number':53,'multiline':True]
['text':'*
 * uintptr_t is an optional part of the standard definitions in stdint.h.
 * The opengroup.org documentation for stdint.h says
 * "On XSI-conformant systems, the intptr_t and uintptr_t types are required;
 * otherwise, they are optional."
 * We assume that when uintptr_t is defined, UINTPTR_MAX is defined as well.
 *
 * Do not use ptrdiff_t since it is signed. size_t is unsigned.
 ','line_number':59,'multiline':True]
['text':' TODO: This check fails on some z environments. Filed a ticket #9357 for this. ','line_number':68,'multiline':True]
['text':'*
 * \def U_HAVE_MSVC_2003_OR_EARLIER
 * Flag for workaround of MSVC 2003 optimization bugs
 * @internal
 ','line_number':73,'multiline':True]
['text':'===========================================================================','line_number':82,'multiline':True]
['text':'* @{ Information about POSIX support                                       ','line_number':83,'multiline':True]
['text':'===========================================================================','line_number':84,'multiline':True]
['text':' Use the predefined value. ','line_number':87,'multiline':True]
['text':' Use the predefined value. ','line_number':95,'multiline':True]
['text':' not defined ','line_number':99,'multiline':True]
['text':' Use the predefined value. ','line_number':105,'multiline':True]
['text':' not defined ','line_number':109,'multiline':True]
['text':' Use the predefined value. ','line_number':115,'multiline':True]
['text':' uClibc does not have __timezone or _timezone. ','line_number':120,'multiline':True]
['text':' glibc ','line_number':124,'multiline':True]
['text':' not defined ','line_number':130,'multiline':True]
['text':' not defined ','line_number':132,'multiline':True]
['text':' not defined ','line_number':134,'multiline':True]
['text':' Use the predefined value. ','line_number':140,'multiline':True]
['text':' not defined ','line_number':144,'multiline':True]
['text':' Use the predefined value. ','line_number':150,'multiline':True]
['text':' Use the predefined value. ','line_number':158,'multiline':True]
['text':'*
 * \def U_HAVE_DIRENT_H
 * Defines whether dirent.h is available.
 * @internal
 ','line_number':167,'multiline':True]
['text':' Use the predefined value. ','line_number':173,'multiline':True]
['text':'* @} ','line_number':180,'multiline':True]
['text':'===========================================================================','line_number':182,'multiline':True]
['text':'* @{ GCC built in functions for atomic memory operations                   ','line_number':183,'multiline':True]
['text':'===========================================================================','line_number':184,'multiline':True]
['text':'*
 * \def U_HAVE_GCC_ATOMICS
 * @internal
 ','line_number':186,'multiline':True]
['text':' Use the predefined value. ','line_number':191,'multiline':True]
['text':' TODO: Intel icc and IBM xlc on AIX also support gcc atomics.  (Intel originated them.)
     *       Add them for these compilers.
     * Note: Clang sets __GNUC__ defines for version 4.2, so misses the 4.4 test here.
     ','line_number':195,'multiline':True]
['text':'* @} ','line_number':204,'multiline':True]
['text':'*
 * \def U_HAVE_STD_ATOMICS
 * Defines whether the standard C++11 <atomic> is available.
 * ICU will use this when avialable,
 * otherwise will fall back to compiler or platform specific alternatives.
 * @internal
 ','line_number':206,'multiline':True]
['text':' Use the predefined value. ','line_number':214,'multiline':True]
['text':' Not C++11, disable use of atomics ','line_number':216,'multiline':True]
['text':' Clang 3.1, has atomic variable initializer bug. ','line_number':219,'multiline':True]
['text':' U_HAVE_ATOMIC is typically set by an autoconf test of #include <atomic>  ','line_number':222,'multiline':True]
['text':'   Can be set manually, or left undefined, on platforms without autoconf. ','line_number':223,'multiline':True]
['text':'*
 *  \def U_HAVE_CLANG_ATOMICS
 *  Defines whether Clang c11 style built-in atomics are avaialable.
 *  These are used in preference to gcc atomics when both are available.
 ','line_number':232,'multiline':True]
['text':' Use the predefined value. ','line_number':238,'multiline':True]
['text':'===========================================================================','line_number':248,'multiline':True]
['text':'* @{ Programs used by ICU code                                             ','line_number':249,'multiline':True]
['text':'===========================================================================','line_number':250,'multiline':True]
['text':'*
 * \def U_MAKE_IS_NMAKE
 * Defines whether the "make" program is Windows nmake.
 ','line_number':252,'multiline':True]
['text':' Use the predefined value. ','line_number':257,'multiline':True]
['text':'* @} ','line_number':264,'multiline':True]
['text':'==========================================================================','line_number':266,'multiline':True]
['text':' Platform utilities                                                       ','line_number':267,'multiline':True]
['text':'==========================================================================','line_number':268,'multiline':True]
['text':'*
 * Platform utilities isolates the platform dependencies of the
 * libarary.  For each platform which this code is ported to, these
 * functions may have to be re-implemented.
 ','line_number':270,'multiline':True]
['text':'*
 * Floating point utility to determine if a double is Not a Number (NaN).
 * @internal
 ','line_number':276,'multiline':True]
['text':'*
 * Floating point utility to determine if a double has an infinite value.
 * @internal
 ','line_number':281,'multiline':True]
['text':'*
 * Floating point utility to determine if a double has a positive infinite value.
 * @internal
 ','line_number':286,'multiline':True]
['text':'*
 * Floating point utility to determine if a double has a negative infinite value.
 * @internal
 ','line_number':291,'multiline':True]
['text':'*
 * Floating point utility that returns a Not a Number (NaN) value.
 * @internal
 ','line_number':296,'multiline':True]
['text':'*
 * Floating point utility that returns an infinite value.
 * @internal
 ','line_number':301,'multiline':True]
['text':'*
 * Floating point utility to truncate a double.
 * @internal
 ','line_number':307,'multiline':True]
['text':'*
 * Floating point utility to calculate the floor of a double.
 * @internal
 ','line_number':312,'multiline':True]
['text':'*
 * Floating point utility to calculate the ceiling of a double.
 * @internal
 ','line_number':317,'multiline':True]
['text':'*
 * Floating point utility to calculate the absolute value of a double.
 * @internal
 ','line_number':322,'multiline':True]
['text':'*
 * Floating point utility to calculate the fractional and integer parts of a double.
 * @internal
 ','line_number':327,'multiline':True]
['text':'*
 * Floating point utility to calculate the remainder of a double divided by another double.
 * @internal
 ','line_number':332,'multiline':True]
['text':'*
 * Floating point utility to calculate d to the power of exponent (d^exponent).
 * @internal
 ','line_number':337,'multiline':True]
['text':'*
 * Floating point utility to calculate 10 to the power of exponent (10^exponent).
 * @internal
 ','line_number':342,'multiline':True]
['text':'*
 * Floating point utility to calculate the maximum value of two doubles.
 * @internal
 ','line_number':347,'multiline':True]
['text':'*
 * Floating point utility to calculate the minimum value of two doubles.
 * @internal
 ','line_number':352,'multiline':True]
['text':'*
 * Private utility to calculate the maximum value of two integers.
 * @internal
 ','line_number':357,'multiline':True]
['text':'*
 * Private utility to calculate the minimum value of two integers.
 * @internal
 ','line_number':362,'multiline':True]
['text':'*
 * Return the largest positive number that can be represented by an integer
 * type of arbitrary bit length.
 * @internal
 ','line_number':374,'multiline':True]
['text':'*
 * Floating point utility to calculate the logarithm of a double.
 * @internal
 ','line_number':381,'multiline':True]
['text':'*
 * Does common notion of rounding e.g. uprv_floor(x + 0.5);
 * @param x the double number
 * @return the rounded double
 * @internal
 ','line_number':387,'multiline':True]
['text':'*
 * Returns the number of digits after the decimal point in a double number x.
 *
 * @param x the double number
 * @return the number of digits after the decimal point in a double number x.
 * @internal
 ','line_number':396,'multiline':True]
['text':'U_INTERNAL int32_t  U_EXPORT2 uprv_digitsAfterDecimal(double x);','line_number':403,'multiline':True]
['text':'*
 * Please use ucnv_getDefaultName() instead.
 * Return the default codepage for this platform and locale.
 * This function can call setlocale() on Unix platforms. Please read the
 * platform documentation on setlocale() before calling this function.
 * @return the default codepage for this platform 
 * @internal
 ','line_number':407,'multiline':True]
['text':'*
 * Please use uloc_getDefault() instead.
 * Return the default locale ID string by querying ths system, or
 *     zero if one cannot be found. 
 * This function can call setlocale() on Unix platforms. Please read the
 * platform documentation on setlocale() before calling this function.
 * @return the default locale ID string
 * @internal
 ','line_number':418,'multiline':True]
['text':'*
 * Time zone utilities
 *
 * Wrappers for C runtime library functions relating to timezones.
 * The t_tzset() function (similar to tzset) uses the current setting
 * of the environment variable TZ to assign values to three global
 * variables: daylight, timezone, and tzname. These variables have the
 * following meanings, and are declared in &lt;time.h&gt;.
 *
 *   daylight   Nonzero if daylight-saving-time zone (DST) is specified
 *              in TZ; otherwise, 0. Default value is 1.
 *   timezone   Difference in seconds between coordinated universal
 *              time and local time. E.g., -28,800 for PST (GMT-8hrs)
 *   tzname(0)  Three-letter time-zone name derived from TZ environment
 *              variable. E.g., "PST".
 *   tzname(1)  Three-letter DST zone name derived from TZ environment
 *              variable.  E.g., "PDT". If DST zone is omitted from TZ,
 *              tzname(1) is an empty string.
 *
 * Notes: For example, to set the TZ environment variable to correspond
 * to the current time zone in Germany, you can use one of the
 * following statements:
 *
 *   set TZ=GST1GDT
 *   set TZ=GST+1GDT
 *
 * If the TZ value is not set, t_tzset() attempts to use the time zone
 * information specified by the operating system. Under Windows NT
 * and Windows 95, this information is specified in the Control Panel's
 * Date/Time application.
 * @internal
 ','line_number':429,'multiline':True]
['text':'*
 * Difference in seconds between coordinated universal
 * time and local time. E.g., -28,800 for PST (GMT-8hrs)
 * @return the difference in seconds between coordinated universal time and local time.
 * @internal
 ','line_number':463,'multiline':True]
['text':'*
 *   tzname(0)  Three-letter time-zone name derived from TZ environment
 *              variable. E.g., "PST".
 *   tzname(1)  Three-letter DST zone name derived from TZ environment
 *              variable.  E.g., "PDT". If DST zone is omitted from TZ,
 *              tzname(1) is an empty string.
 * @internal
 ','line_number':471,'multiline':True]
['text':'*
 * Get UTC (GMT) time measured in milliseconds since 0:00 on 1/1/1970.
 * This function is affected by 'faketime' and should be the bottleneck for all user-visible ICU time functions.
 * @return the UTC time measured in milliseconds
 * @internal
 ','line_number':481,'multiline':True]
['text':'*
 * Get UTC (GMT) time measured in milliseconds since 0:00 on 1/1/1970.
 * This function is not affected by 'faketime', so it should only be used by low level test functions- not by anything that
 * exposes time to the end user.
 * @return the UTC time measured in milliseconds
 * @internal
 ','line_number':489,'multiline':True]
['text':'*
 * Determine whether a pathname is absolute or not, as defined by the platform.
 * @param path Pathname to test
 * @return TRUE if the path is absolute
 * @internal (ICU 3.0)
 ','line_number':498,'multiline':True]
['text':'*
 * Use U_MAX_PTR instead of this function.
 * @param void pointer to test
 * @return the largest possible pointer greater than the base
 * @internal (ICU 3.8)
 ','line_number':506,'multiline':True]
['text':'*
 * Maximum value of a (void*) - use to indicate the limit of an 'infinite' buffer.
 * In fact, buffer sizes must not exceed 2GB so that the difference between
 * the buffer limit and the buffer start can be expressed in an int32_t.
 *
 * The definition of U_MAX_PTR must fulfill the following conditions:
 * - return the largest possible pointer greater than base
 * - return a valid pointer according to the machine architecture (AS/400, 64-bit, etc.)
 * - avoid wrapping around at high addresses
 * - make sure that the returned pointer is not farther from base than 0x7fffffff bytes
 *
 * @param base The beginning of a buffer to find the maximum offset from
 * @internal
 ','line_number':514,'multiline':True]
['text':' We have 31-bit pointers. ','line_number':530,'multiline':True]
['text':'
     * For platforms where pointers are scalar values (which is normal, but unlike i5/OS)
     * but that do not define uintptr_t.
     *
     * However, this does not work on modern compilers:
     * The C++ standard does not define pointer overflow, and allows compilers to
     * assume that p+u>p for any pointer p and any integer u>0.
     * Thus, modern compilers optimize away the ">" comparison.
     * (See ICU tickets #7187 and #8096.)
     ','line_number':535,'multiline':True]
['text':' Default version. C++ standard compliant for scalar pointers. ','line_number':550,'multiline':True]
['text':'  Dynamic Library Functions ','line_number':558,'multiline':True]
['text':'*
 * Load a library
 * @internal (ICU 4.4)
 ','line_number':563,'multiline':True]
['text':'*
 * Close a library
 * @internal (ICU 4.4)
 ','line_number':569,'multiline':True]
['text':'*
 * Extract a symbol from a library (function)
 * @internal (ICU 4.8)
 ','line_number':575,'multiline':True]
['text':'*
 * Extract a symbol from a library (function)
 * Not implemented, no clients.
 * @internal
 ','line_number':581,'multiline':True]
['text':' U_INTERNAL void * U_EXPORT2 uprv_dlsym_data( void *lib, const char *symbolName, UErrorCode *status); ','line_number':586,'multiline':True]
['text':'*
 * Define malloc and related functions
 * @internal
 ','line_number':590,'multiline':True]
['text':' also _C_TS_calloc(x) ','line_number':598,'multiline':True]
['text':' C defaults ','line_number':600,'multiline':True]
