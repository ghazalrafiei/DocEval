['text':'
******************************************************************************
*
*   Copyright (C) 2001-2014, International Business Machines
*   Corporation and others.  All Rights Reserved.
*
******************************************************************************
*   file name:  utrie2.cpp
*   encoding:   US-ASCII
*   tab size:   8 (not used)
*   indentation:4
*
*   created on: 2008aug16 (starting from a copy of utrie.c)
*   created by: Markus W. Scherer
*
*   This is a common implementation of a Unicode trie.
*   It is a kind of compressed, serializable table of 16- or 32-bit values associated with
*   Unicode code points (0..0x10ffff).
*   This is the second common version of a Unicode trie (hence the name UTrie2).
*   See utrie2.h for a comparison.
*
*   This file contains only the runtime and enumeration code, for read-only access.
*   See utrie2_builder.c for the builder code.
','line_number':1,'multiline':True]
['text':' Public UTrie2 API implementation ----------------------------------------- ','line_number':38,'multiline':True]
['text':' support 64-bit pointers by avoiding cast of arbitrary difference ','line_number':101,'multiline':True]
['text':' support 64-bit pointers by avoiding cast of arbitrary difference ','line_number':115,'multiline':True]
['text':' number of bytes read backward from src ','line_number':123,'multiline':True]
['text':' enough data for a trie header? ','line_number':149,'multiline':True]
['text':' check the signature ','line_number':155,'multiline':True]
['text':' get the options ','line_number':162,'multiline':True]
['text':' get the length values and offsets ','line_number':168,'multiline':True]
['text':' calculate the actual length ','line_number':181,'multiline':True]
['text':' not enough bytes ','line_number':189,'multiline':True]
['text':' allocate the trie ','line_number':193,'multiline':True]
['text':' set the pointers to its index and data arrays ','line_number':204,'multiline':True]
['text':' get the data ','line_number':209,'multiline':True]
['text':' >0 if the data is moved to the end of the index array ','line_number':243,'multiline':True]
['text':' calculate the total length of the dummy trie data ','line_number':254,'multiline':True]
['text':' allocate the trie ','line_number':264,'multiline':True]
['text':' set the UTrie2 fields ','line_number':280,'multiline':True]
['text':' set the header fields ','line_number':296,'multiline':True]
['text':' "Tri2" ','line_number':299,'multiline':True]
['text':' fill the index and data arrays ','line_number':308,'multiline':True]
['text':' write the index-2 array values shifted right by UTRIE2_INDEX_SHIFT ','line_number':312,'multiline':True]
['text':' null data block ','line_number':314,'multiline':True]
['text':' write UTF-8 2-byte index-2 values, not right-shifted ','line_number':317,'multiline':True]
['text':' C0..C1 ','line_number':318,'multiline':True]
['text':' C2..DF ','line_number':321,'multiline':True]
['text':' write the 16/32-bit data array ','line_number':325,'multiline':True]
['text':' write 16-bit data values ','line_number':328,'multiline':True]
['text':' highValue and reserved values ','line_number':337,'multiline':True]
['text':' write 32-bit data values ','line_number':343,'multiline':True]
['text':' highValue and reserved values ','line_number':353,'multiline':True]
['text':' argument check ','line_number':411,'multiline':True]
['text':' setup and swapping ','line_number':448,'multiline':True]
['text':' not a UTrie ','line_number':468,'multiline':True]
['text':' swap the header ','line_number':495,'multiline':True]
['text':' swap the index and the data ','line_number':499,'multiline':True]
['text':' utrie2_swapAnyVersion() should be defined here but lives in utrie2_builder.c','line_number':518,'multiline':False]
['text':' to avoid a dependency from utrie2.cpp on utrie.c.','line_number':519,'multiline':False]
['text':' enumeration -------------------------------------------------------------- ','line_number':521,'multiline':True]
['text':' default UTrie2EnumValue() returns the input value itself ','line_number':525,'multiline':True]
['text':'context','line_number':527,'multiline':True]
['text':'*
 * Enumerate all ranges of code points with the same relevant values.
 * The values are transformed from the raw trie entries by the enumValue function.
 *
 * Currently requires start<limit and both start and limit must be multiples
 * of UTRIE2_DATA_BLOCK_LENGTH.
 *
 * Optimizations:
 * - Skip a whole block if we know that it is filled with a single value,
 *   and it is the same as we visited just before.
 * - Handle the null block specially because we know a priori that it is filled
 *   with a single value.
 ','line_number':531,'multiline':True]
['text':' frozen trie ','line_number':563,'multiline':True]
['text':' the following code assumes trie->newTrie is not NULL when idx is NULL ','line_number':565,'multiline':True]
['text':' unfrozen, mutable trie ','line_number':571,'multiline':True]
['text':' the following code assumes idx is not NULL when data32 is NULL ','line_number':574,'multiline':True]
['text':' get the enumeration value that corresponds to an initial-value trie data entry ','line_number':582,'multiline':True]
['text':' set variables for previous range ','line_number':585,'multiline':True]
['text':' enumerate index-2 blocks ','line_number':591,'multiline':True]
['text':' Code point limit for iterating inside this i2Block. ','line_number':593,'multiline':True]
['text':'
                 * Enumerate values for lead surrogate code points, not code units:
                 * This special block has half the normal length.
                 ','line_number':602,'multiline':True]
['text':'
                 * Switch back to the normal part of the index-2 table.
                 * Enumerate the second half of the surrogates block.
                 ','line_number':609,'multiline':True]
['text':' supplementary code points ','line_number':617,'multiline':True]
['text':'
                 * The index-2 block is the same as the previous one, and filled with prevValue.
                 * Only possible for supplementary code points because the linear-BMP index-2
                 * table creates unique i2Block values.
                 ','line_number':625,'multiline':True]
['text':' this is the null index-2 block ','line_number':636,'multiline':True]
['text':' enumerate data blocks for one index-2 block ','line_number':647,'multiline':True]
['text':' the block is the same as the previous one, and filled with prevValue ','line_number':662,'multiline':True]
['text':' this is the null data block ','line_number':668,'multiline':True]
['text':' could be higher if in the index2NullOffset ','line_number':695,'multiline':True]
['text':' c==highStart<limit ','line_number':697,'multiline':True]
['text':' deliver last range ','line_number':718,'multiline':True]
['text':' start code point ','line_number':735,'multiline':True]
['text':' C++ convenience wrappers ------------------------------------------------- ','line_number':739,'multiline':True]
