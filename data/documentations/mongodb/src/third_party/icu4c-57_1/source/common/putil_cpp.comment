['text':'
******************************************************************************
*
*   Copyright (C) 1997-2015, International Business Machines
*   Corporation and others.  All Rights Reserved.
*
******************************************************************************
*
*  FILE NAME : putil.c (previously putil.cpp and ptypes.cpp)
*
*   Date        Name        Description
*   04/14/97    aliu        Creation.
*   04/24/97    aliu        Added getDefaultDataDirectory() and
*                            getDefaultLocaleID().
*   04/28/97    aliu        Rewritten to assume Unix and apply general methods
*                            for assumed case.  Non-UNIX platforms must be
*                            special-cased.  Rewrote numeric methods dealing
*                            with NaN and Infinity to be platform independent
*                             over all IEEE 754 platforms.
*   05/13/97    aliu        Restored sign of timezone
*                            (semantics are hours West of GMT)
*   06/16/98    erm         Added IEEE_754 stuff, cleaned up isInfinite, isNan,
*                             nextDouble..
*   07/22/98    stephen     Added remainder, max, min, trunc
*   08/13/98    stephen     Added isNegativeInfinity, isPositiveInfinity
*   08/24/98    stephen     Added longBitsFromDouble
*   09/08/98    stephen     Minor changes for Mac Port
*   03/02/99    stephen     Removed openFile().  Added AS400 support.
*                            Fixed EBCDIC tables
*   04/15/99    stephen     Converted to C.
*   06/28/99    stephen     Removed mutex locking in u_isBigEndian().
*   08/04/99    jeffrey R.  Added OS/2 changes
*   11/15/99    helena      Integrated S/390 IEEE support.
*   04/26/01    Barry N.    OS/400 support for uprv_getDefaultLocaleID
*   08/15/01    Steven H.   OS/400 support for uprv_getDefaultCodepage
*   01/03/08    Steven L.   Fake Time Support
******************************************************************************
','line_number':1,'multiline':True]
['text':' Defines _XOPEN_SOURCE for access to POSIX functions.','line_number':40,'multiline':False]
['text':' Must be before any other #includes.','line_number':41,'multiline':False]
['text':' include ICU headers ','line_number':44,'multiline':True]
['text':' Include standard headers. ','line_number':57,'multiline':True]
['text':'userguide.icu-project.org/howtouseicu','line_number':66,'multiline':False]
['text':' include system headers ','line_number':70,'multiline':True]
['text':'
     * TODO: U_PLATFORM_USES_ONLY_WIN32_API includes MinGW.
     * Should Cygwin be included as well (U_PLATFORM_HAS_WIN32_API)
     * to use native APIs as much as possible?
     ','line_number':72,'multiline':True]
['text':' error code structure ','line_number':87,'multiline':True]
['text':' EPT_CALL macro  - this include must be after all other "QSYSINCs" ','line_number':89,'multiline':True]
['text':' For uprv_maximumPtr ','line_number':90,'multiline':True]
['text':' Needed for UCNV_SWAP_LFNL_OPTION_STRING ','line_number':92,'multiline':True]
['text':' tzset isn't defined in strict ANSI on Cygwin and MinGW. ','line_number':106,'multiline':True]
['text':'
 * Cygwin with GCC requires inclusion of time.h after the above disabling strict asci mode statement.
 ','line_number':110,'multiline':True]
['text':'
 * Only include langinfo.h if we have a way to get the codeset. If we later
 * depend on more feature, we can test on U_HAVE_NL_LANGINFO.
 *
 ','line_number':119,'multiline':True]
['text':'*
 * Simple things (presence of functions, etc) should just go in configure.in and be added to
 * icucfg.h via autoheader.
 ','line_number':129,'multiline':True]
['text':' Define the extension for data files, again... ','line_number':156,'multiline':True]
['text':' Leave this copyright notice here! ','line_number':159,'multiline':True]
['text':' floating point implementations ------------------------------------------- ','line_number':162,'multiline':True]
['text':' We return QNAN rather than SNAN','line_number':164,'multiline':True]
['text':' Make it easy to define certain types of constants ','line_number':167,'multiline':True]
['text':' This must be defined first in order to allow the initialization to work. This is a C89 feature. ','line_number':169,'multiline':True]
['text':'---------------------------------------------------------------------------
  Platform utilities
  Our general strategy is to assume we're on a POSIX platform.  Platforms which
  are non-POSIX must declare themselves so.  The default POSIX implementation
  will sometimes work for non-POSIX platforms as well (e.g., the NaN-related
  functions).
  ---------------------------------------------------------------------------','line_number':175,'multiline':True]
['text':'
    WARNING! u_topNBytesOfDouble and u_bottomNBytesOfDouble
    can't be properly optimized by the gcc compiler sometimes (i.e. gcc 3.2).
','line_number':189,'multiline':True]
['text':' !IEEE_754 ','line_number':213,'multiline':True]
['text':' Override the clock to test things without having to move the system clock.
 * Assumes POSIX gettimeofday() will function
 ','line_number':231,'multiline':True]
['text':'* Time to start the clock from *','line_number':234,'multiline':True]
['text':'* Offset (fake time - real time) *','line_number':235,'multiline':True]
['text':'* True if fake clock has spun up *','line_number':236,'multiline':True]
['text':' This is like a ULARGE_INTEGER ','line_number':273,'multiline':True]
['text':' Number of 100 nanoseconds from 1/1/1601 to 1/1/1970 ','line_number':275,'multiline':True]
['text':'---------------------------------------------------------------------------
  Universal Implementations
  These are designed to work on all platforms.  Try these, and if they
  don't work on your platform, then special case your platform with new
  implementations.
---------------------------------------------------------------------------','line_number':281,'multiline':True]
['text':' Hook for overriding the clock ','line_number':292,'multiline':True]
['text':' Return UTC (GMT) time measured in milliseconds since 0:00 on 1/1/70.','line_number':298,'multiline':True]
['text':'-----------------------------------------------------------------------------
  IEEE 754
  These methods detect and return NaN and infinity values for doubles
  conforming to IEEE 754.  Platforms which support this standard include X86,
  Mac 680x0, Mac PowerPC, AIX RS/6000, and most others.
  If this doesn't work on your platform, you have non-IEEE floating-point, and
  will need to code your own versions.  A naive implementation is to return 0.0
  for getNaN and getInfinity, and false for isNaN and isInfinite.
  ---------------------------------------------------------------------------','line_number':322,'multiline':True]
['text':' Infinity is 0x7FF0000000000000U. Anything greater than that is a NaN ','line_number':338,'multiline':True]
['text':' If your platform doesn't support IEEE 754 but *does* have an NaN value,','line_number':351,'multiline':True]
['text':' you'll need to replace this default implementation with what's correct','line_number':352,'multiline':True]
['text':' for your platform.','line_number':353,'multiline':True]
['text':' Infinity is exactly 0x7FF0000000000000U. ','line_number':364,'multiline':True]
['text':' If your platform doesn't support IEEE 754 but *does* have an infinity','line_number':375,'multiline':True]
['text':' value, you'll need to replace this default implementation with what's','line_number':376,'multiline':True]
['text':' correct for your platform.','line_number':377,'multiline':True]
['text':' If your platform doesn't support IEEE 754 but *does* have an NaN value,','line_number':412,'multiline':True]
['text':' you'll need to replace this default implementation with what's correct','line_number':413,'multiline':True]
['text':' for your platform.','line_number':414,'multiline':True]
['text':' If your platform doesn't support IEEE 754 but *does* have an infinity','line_number':425,'multiline':True]
['text':' value, you'll need to replace this default implementation with what's','line_number':426,'multiline':True]
['text':' correct for your platform.','line_number':427,'multiline':True]
['text':' This is declared as "double pow(double x, double y)" ','line_number':471,'multiline':True]
['text':' first handle NaN','line_number':485,'multiline':True]
['text':' check for -0 and 0','line_number':489,'multiline':True]
['text':' this should work for all flt point w/o NaN and Inf special cases ','line_number':495,'multiline':True]
['text':' first handle NaN','line_number':503,'multiline':True]
['text':' check for -0 and 0','line_number':507,'multiline':True]
['text':' this should work for all flt point w/o NaN and Inf special cases ','line_number':513,'multiline':True]
['text':'*
 * Truncates the given double.
 * trunc(3.3) = 3.0, trunc (-3.3) = -3.0
 * This is different than calling floor() or ceil():
 * floor(3.3) = 3, floor(-3.3) = -4
 * ceil(3.3) = 4, ceil(-3.3) = -3
 ','line_number':517,'multiline':True]
['text':' handle error cases','line_number':528,'multiline':True]
['text':' Signbit() picks up -0.0;  d<0 does not. ','line_number':534,'multiline':True]
['text':'*
 * Return the largest positive number that can be represented by an integer
 * type of arbitrary bit length.
 ','line_number':545,'multiline':True]
['text':'
     * With the provided function we should never be out of range of a given segment
     * (a traditional/typical segment that is).  Our segments have 5 bytes for the
     * id and 3 bytes for the offset.  The key is that the casting takes care of
     * only retrieving the offset portion minus x1000.  Hence, the smallest offset
     * seen in a program is x001000 and when casted to an int would be 0.
     * That's why we can only add 0xffefff.  Otherwise, we would exceed the segment.
     *
     * Currently, 16MB is the current addressing limitation on i5/OS if the activation is
     * non-TERASPACE.  If it is TERASPACE it is 2GB - 4k(header information).
     * This function determines the activation based on the pointer that is passed in and
     * calculates the appropriate maximum available size for
     * each pointer type (TERASPACE and non-TERASPACE)
     *
     * Unlike other operating systems, the pointer model isn't determined at
     * compile time on i5/OS.
     ','line_number':565,'multiline':True]
['text':' if it is a TERASPACE pointer the max is 2GB - 4k ','line_number':583,'multiline':True]
['text':' otherwise 16MB since NULL ptr is not checkable or the ptr is not TERASPACE ','line_number':586,'multiline':True]
['text':'---------------------------------------------------------------------------
  Platform-specific Implementations
  Try these, and if they don't work on your platform, then special case your
  platform with new implementations.
  ---------------------------------------------------------------------------','line_number':594,'multiline':True]
['text':' Generic time zone layer -------------------------------------------------- ','line_number':600,'multiline':True]
['text':' Time zone utilities ','line_number':602,'multiline':True]
['text':' no initialization','line_number':609,'multiline':True]
['text':' daylight savings time is checked','line_number':626,'multiline':True]
['text':' local time in seconds','line_number':628,'multiline':True]
['text':' GMT (or UTC) in seconds','line_number':630,'multiline':True]
['text':' imitate NT behaviour, which returns same timezone offset to GMT for
       winter and summer.
       This does not work on all platforms. For instance, on glibc on Linux
       and on Mac OS 10.5, tdiff calculated above remains the same
       regardless of whether DST is in effect or not. iOS is another
       platform where this does not work. Linux + glibc and Mac OS 10.5
       have U_TIMEZONE defined so that this code is not reached.
    ','line_number':634,'multiline':True]
['text':' Note that U_TZNAME does *not* have to be tzname, but if it is,
   some platforms need to have it declared here. ','line_number':649,'multiline':True]
['text':' RS6000 and others reject char **tzname.  ','line_number':653,'multiline':True]
['text':' These platforms are likely to use Olson timezone IDs. ','line_number':658,'multiline':True]
['text':' tz file to skip when searching. ','line_number':673,'multiline':True]
['text':' Some Linux distributions have 'localtime' in /usr/share/zoneinfo
   symlinked to /etc/localtime, which makes searchForTZFile return
   'localtime' when it's the first match. ','line_number':674,'multiline':True]
['text':' Needed to search through system timezone files ','line_number':679,'multiline':True]
['text':' Determine if this is something like Iceland (Olson ID)
    or AST4ADT (non-Olson ID) ','line_number':690,'multiline':True]
['text':' If we went through the whole string, then it might be okay.
    The timezone is sometimes set to "CST-7CDT", "CST6CDT5,J129,J131/19:30",
    "GRNLNDST3GRNLNDDT" or similar, so we cannot use it.
    The rest of the time it could be an Olson ID. George ','line_number':696,'multiline':True]
['text':' On some Unix-like OS, 'posix' subdirectory in
   /usr/share/zoneinfo replicates the top-level contents. 'right'
   subdirectory has the same set of files, but individual files
   are different from those in the top-level directory or 'posix'
   because 'right' has files for TAI (Int'l Atomic Time) while 'posix'
   has files for UTC.
   When the first match for /etc/localtime is in either of them
   (usually in posix because 'right' has different file contents),
   or TZ environment variable points to one of them, createTimeZone
   fails because, say, 'posix/America/New_York' is not an Olson
   timezone id ('America/New_York' is). So, we have to skip
   'posix/' and 'right/' at the beginning. ','line_number':707,'multiline':True]
['text':' 0=U_DAYLIGHT_NONE, 1=daylight in June-U_DAYLIGHT_JUNE, 2=daylight in December=U_DAYLIGHT_DECEMBER','line_number':733,'multiline':True]
['text':'
This list tries to disambiguate a set of abbreviated timezone IDs and offsets
and maps it to an Olson ID.
Before adding anything to this list, take a look at
icu/source/tools/tzcode/tz.alias
Sometimes no daylight savings (0) is important to define due to aliases.
This list can be tested with icu/source/test/compat/tzone.pl
More values could be added to daylightType to increase precision.
','line_number':741,'multiline':True]
['text':' Conflicts with Africa/Cairo ','line_number':779,'multiline':True]
['text':' Conflicts with America/Grand_Turk ','line_number':800,'multiline':True]
['text':' Conflicts with Mexico/General ','line_number':804,'multiline':True]
['text':' Conflicts with Mexico/BajaSur ','line_number':805,'multiline':True]
['text':' Conflicts with Mexico/BajaNorte ','line_number':807,'multiline':True]
['text':'#define DEBUG_TZNAME','line_number':812,'multiline':True]
['text':' Set the limit for the size of the path. ','line_number':835,'multiline':True]
['text':'
 * This method compares the two files given to see if they are a match.
 * It is currently use to compare two TZ files.
 ','line_number':846,'multiline':True]
['text':' reset position to begin search ','line_number':864,'multiline':True]
['text':' First check that the file size are equal. ','line_number':867,'multiline':True]
['text':' Store the data from the files in seperate buffers and
             * compare each byte to determine equality.
             ','line_number':879,'multiline':True]
['text':'
 * This method recursively traverses the directory given for a matching TZ file and returns the first match.
 ','line_number':911,'multiline':True]
['text':' dirent also lists two entries: "." and ".." that we can safely ignore. ','line_number':914,'multiline':True]
['text':' Save the current path ','line_number':929,'multiline':True]
['text':' Check each entry in the directory. ','line_number':933,'multiline':True]
['text':' Create a newpath with the new entry to test each entry in the directory. ','line_number':937,'multiline':True]
['text':' If this new path is a directory, make a recursive call with the newpath. ','line_number':943,'multiline':True]
['text':'
                 Have to get out here. Otherwise, we'd keep looking
                 and return the first match in the top-level directory
                 if there's a match in the top-level. If not, this function
                 would return NULL and set gTimeZoneBufferPtr to NULL in initDefault().
                 It worked without this in most cases because we have a fallback of calling
                 localtime_r to figure out the default timezone.
                ','line_number':947,'multiline':True]
['text':' Get out after the first one found. ','line_number':963,'multiline':True]
['text':'#if U_PLATFORM_IS_DARWIN_BASED
    int ret;

    tzid = getenv("TZFILE");
    if (tzid != NULL) {
        return tzid;
    }
#endif','line_number':985,'multiline':True]
['text':' This code can be temporarily disabled to test tzname resolution later on. ','line_number':994,'multiline':True]
['text':' When TZ equals localtime on Solaris, check the /etc/localtime file. ','line_number':999,'multiline':True]
['text':' The colon forces tzset() to treat the remainder as zoneinfo path ','line_number':1003,'multiline':True]
['text':' This might be a good Olson ID. ','line_number':1007,'multiline':True]
['text':' else U_TZNAME will give a better result. ','line_number':1011,'multiline':True]
['text':' Caller must handle threading issues ','line_number':1015,'multiline':True]
['text':'
        This is a trick to look at the name of the link to get the Olson ID
        because the tzfile contents is underspecified.
        This isn't guaranteed to work because it may not be a symlink.
        ','line_number':1017,'multiline':True]
['text':' Free previously allocated memory ','line_number':1054,'multiline':True]
['text':' The return value is free'd in timezone.cpp on Windows because
     * the other code path returns a pointer to a heap location. ','line_number':1078,'multiline':True]
['text':'
    U_TZNAME is usually a non-unique abbreviation, which isn't normally usable.
    So we remap the abbreviation to an olson ID.

    Since Windows exposes a little more timezone information,
    we normally don't use this code on Windows because
    uprv_detectWindowsTimeZone should have already given the correct answer.
    ','line_number':1082,'multiline':True]
['text':'2007-06-21 18:11 UT','line_number':1093,'multiline':True]
['text':'2007-12-22 06:09 UT','line_number':1094,'multiline':True]
['text':' This probing will tell us when daylight savings occurs.  ','line_number':1096,'multiline':True]
['text':' Get and set the ICU data directory --------------------------------------- ','line_number':1118,'multiline':True]
['text':' Heap allocated ','line_number':1127,'multiline':True]
['text':'
 * Set the data directory.
 *    Make a copy of the passed string, and set the global data dir to point to it.
 ','line_number':1151,'multiline':True]
['text':' A small optimization to prevent the malloc and copy when the
        shared library is used, and this is a way to make sure that NULL
        is never returned.
        ','line_number':1161,'multiline':True]
['text':' Exit out if newDataDir could not be created. ','line_number':1170,'multiline':True]
['text':' Temporary backup setting of ICU_DATA_DIR_PREFIX_ENV_VAR
   until some client wrapper makefiles are updated ','line_number':1221,'multiline':True]
['text':' If we already have the directory, then return immediately. Will happen if user called
     * u_setDataDirectory().
     ','line_number':1230,'multiline':True]
['text':'
    When ICU_NO_USER_DATA_OVERRIDE is defined, users aren't allowed to
    override ICU's data with the ICU_DATA environment variable. This prevents
    problems where multiple custom copies of ICU's specific version of data
    are installed on a system. Either the application must define the data
    directory with u_setDataDirectory, define ICU_DATA_DIR when compiling
    ICU, set the data with udata_setCommonData or trust that all of the
    required data is contained in ICU's data library that contains
    the entry point defined by U_ICUDATA_ENTRY_POINT.

    There may also be some platforms where environment variables
    are not allowed.
    ','line_number':1242,'multiline':True]
['text':' First try to get the environment variable ','line_number':1256,'multiline':True]
['text':' ICU_DATA_DIR may be set as a compile option.
     * U_ICU_DATA_DEFAULT_DIR is provided and is set by ICU at compile time
     * and is used only when data is built in archive mode eliminating the need
     * for ICU_DATA_DIR to be set. U_ICU_DATA_DEFAULT_DIR is set to the installation
     * directory of the data dat file. Users should use ICU_DATA_DIR if they want to
     * set their own path.
     ','line_number':1260,'multiline':True]
['text':' It looks really bad, set it to something. ','line_number':1287,'multiline':True]
['text':' Note: this function does some extra churn, first setting based on the','line_number':1350,'multiline':False]
['text':'       environment, then immediately replacing with the value passed in.','line_number':1351,'multiline':False]
['text':'       The logic is simpler that way, and performance shouldn't be an issue.','line_number':1352,'multiline':False]
['text':' A helper function used by uprv_getPOSIXIDForDefaultLocale and
 * uprv_getPOSIXIDForDefaultCodepage. Returns the posix locale id for
 * LC_CTYPE and LC_MESSAGES. It doesn't support other locale categories.
 ','line_number':1357,'multiline':True]
['text':'
        * On Solaris two different calls to setlocale can result in
        * different values. Only get this value once.
        *
        * We must check this first because an application can set this.
        *
        * LC_ALL can't be used because it's platform dependent. The LANG
        * environment variable seems to affect LC_CTYPE variable by default.
        * Here is what setlocale(LC_ALL, NULL) can return.
        * HPUX can return 'C C C C C C C'
        * Solaris can return /en_US/C/C/C/C/C on the second try.
        * Linux can return LC_CTYPE=C;LC_NUMERIC=C;...
        *
        * The default codepage detection also needs to use LC_CTYPE.
        *
        * Do not call setlocale(LC_*, "")! Using an empty string instead
        * of NULL, will modify the libc behavior.
        ','line_number':1365,'multiline':True]
['text':' Maybe we got some garbage.  Try something more reasonable ','line_number':1388,'multiline':True]
['text':' Solaris speaks POSIX -  See IEEE Std 1003.1-2008 
             * This is needed to properly handle empty env. variables
             ','line_number':1390,'multiline':True]
['text':' Nothing worked.  Give it a nice POSIX default value. ','line_number':1411,'multiline':True]
['text':' Return just the POSIX id for the default locale, whatever happens to be in
 * it. It gets the value from LC_MESSAGES and indirectly from LC_ALL and LANG.
 ','line_number':1417,'multiline':True]
['text':' Return just the POSIX id for the default codepage, whatever happens to be in
 * it. It gets the value from LC_CTYPE and indirectly from LC_ALL and LANG.
 ','line_number':1430,'multiline':True]
['text':' NOTE: The caller should handle thread safety ','line_number':1444,'multiline':True]
['text':'
  Note that:  (a '!' means the ID is improper somehow)
     LC_ALL  ---->     default_loc          codepage
--------------------------------------------------------
     ab.CD             ab                   CD
     ab@CD             ab__CD               -
     ab@CD.EF          ab__CD               EF

     ab_CD.EF@GH       ab_CD_GH             EF

Some 'improper' ways to do the same as above:
  !  ab_CD@GH.EF       ab_CD_GH             EF
  !  ab_CD.EF@GH.IJ    ab_CD_GH             EF
  !  ab_CD@ZZ.EF@GH.IJ ab_CD_GH             EF

     _CD@GH            _CD_GH               -
     _CD.EF@GH         _CD_GH               EF

The variant cannot have dots in it.
The 'rightmost' variant (@xxx) wins.
The leftmost codepage (.xxx) wins.
','line_number':1449,'multiline':True]
['text':' Format: (no spaces)
    ll [ _CC ] [ . MM ] [ @ VV]

      l = lang, C = ctry, M = charmap, V = variant
    ','line_number':1477,'multiline':True]
['text':' assume new locale can't be larger than old one? ','line_number':1488,'multiline':True]
['text':' Exit on memory allocation error. ','line_number':1490,'multiline':True]
['text':' do not copy after the @ ','line_number':1497,'multiline':True]
['text':' Note that we scan the *uncorrected* ID. ','line_number':1503,'multiline':True]
['text':' Exit on memory allocation error. ','line_number':1507,'multiline':True]
['text':' Take care of any special cases here.. ','line_number':1516,'multiline':True]
['text':' Don't worry about no__NY. In practice, it won't appear. ','line_number':1519,'multiline':True]
['text':' aa@b -> aa__b ','line_number':1523,'multiline':True]
['text':' aa_CC@b -> aa_CC_b ','line_number':1526,'multiline':True]
['text':' How big will the resulting string be? ','line_number':1530,'multiline':True]
['text':' Anything following the @ sign ','line_number':1536,'multiline':True]
['text':' Should there be a map from 'no@nynorsk' -> no_NO_NY here?
         * How about 'russian' -> 'ru'?
         * Many of the other locales using ISO codes will be handled by the
         * canonicalization functions in uloc_getDefault.
         ','line_number':1540,'multiline':True]
['text':' Was a correction made? ','line_number':1547,'multiline':True]
['text':' copy it, just in case the original pointer goes away.  See j2395 ','line_number':1552,'multiline':True]
['text':' Exit on memory allocation error. ','line_number':1554,'multiline':True]
['text':' Was already set - clean up. ','line_number':1567,'multiline':True]
['text':' locales are process scoped and are by definition thread safe ','line_number':1601,'multiline':True]
['text':' Make sure we have something... ','line_number':1610,'multiline':True]
['text':' Extract the locale name from the path. ','line_number':1614,'multiline':True]
['text':' Increment p to start of locale name. ','line_number':1617,'multiline':True]
['text':' Copy to work location. ','line_number':1622,'multiline':True]
['text':' Strip off the '.locale' extension. ','line_number':1625,'multiline':True]
['text':' Upper case the locale name. ','line_number':1630,'multiline':True]
['text':' See if we are using the POSIX locale.  Any of the
    * following are equivalent and use the same QLGPGCMA
    * (POSIX) locale.
    * QLGPGCMA2 means UCS2
    * QLGPGCMA_4 means UTF-32
    * QLGPGCMA_8 means UTF-8
    ','line_number':1633,'multiline':True]
['text':' Lower case the lang portion. ','line_number':1650,'multiline':True]
['text':' Adjust for Euro.  After '_E' add 'URO'. ','line_number':1656,'multiline':True]
['text':' If using Lotus-based locale then convert to
         * equivalent non Lotus.
         ','line_number':1664,'multiline':True]
['text':' There are separate simplified and traditional
         * locales called zh_HK_S and zh_HK_T.
         ','line_number':1673,'multiline':True]
['text':' A special zh_CN_GBK locale...
        ','line_number':1681,'multiline':True]
['text':'
Due to various platform differences, one platform may specify a charset,
when they really mean a different charset. Remap the names so that they are
compatible with ICU. Only conflicting/ambiguous aliases should be resolved
here. Before adding anything to this function, please consider adding unique
names to the ICU alias table in the data directory.
','line_number':1697,'multiline':True]
['text':' Make sure that an empty locale is handled the same way. ','line_number':1707,'multiline':True]
['text':' Use the ASCII compatible ibm-943 ','line_number':1715,'multiline':True]
['text':' Use the windows-1252 that contains the Euro ','line_number':1719,'multiline':True]
['text':' Solaris underspecifies the "EUC" name. ','line_number':1724,'multiline':True]
['text':'
        ibm-954 is the best match.
        ibm-33722 is the default for eucJP (similar to Windows).
        ','line_number':1736,'multiline':True]
['text':'
         * The default codepage given by Solaris is 646 but the C library routines treat it as if it was
         * ISO-8859-1 instead of US-ASCII(646).
         ','line_number':1743,'multiline':True]
['text':'
        No locale was specified, and an empty name was passed in.
        This usually indicates that nl_langinfo didn't return valid information.
        Mac OS X uses UTF-8 by default (especially the locale data and console).
        ','line_number':1751,'multiline':True]
['text':' Remap CP949 to a similar codepage to avoid issues with backslash and won symbol. ','line_number':1759,'multiline':True]
['text':'
         * For non C/POSIX locale, default the code page to UTF-8 instead of US-ASCII.
         ','line_number':1763,'multiline':True]
['text':' Remap CP949 to a similar codepage to avoid issues with backslash and won symbol. ','line_number':1770,'multiline':True]
['text':' HP decided to extend big5 as hkbig5 even though it's not compatible :-( ','line_number':1775,'multiline':True]
['text':' zh_TW.big5 is not the same charset as zh_HK.big5! ','line_number':1776,'multiline':True]
['text':'
        ibm-1350 is the best match, but unavailable.
        ibm-954 is mostly a superset of ibm-1350.
        ibm-33722 is the default for eucJP (similar to Windows).
        ','line_number':1780,'multiline':True]
['text':' Linux underspecifies the "EUC" name. ','line_number':1789,'multiline':True]
['text':' See comment below about eucJP ','line_number':1794,'multiline':True]
['text':'
        ibm-1350 is the best match, but unavailable.
        ibm-954 is mostly a superset of ibm-1350.
        ibm-33722 is the default for eucJP (similar to Windows).
        ','line_number':1799,'multiline':True]
['text':'
         * For non C/POSIX locale, default the code page to UTF-8 instead of US-ASCII.
         ','line_number':1808,'multiline':True]
['text':'
     * Linux returns ANSI_X3.4-1968 for C/POSIX, but the call site takes care of
     * it by falling back to 'US-ASCII' when NULL is returned from this
     * function. So, we don't have to worry about it here.
     ','line_number':1813,'multiline':True]
['text':' return NULL when "" is passed in ','line_number':1819,'multiline':True]
['text':' ensure NULL termination ','line_number':1836,'multiline':True]
['text':' ensure NULL termination ','line_number':1838,'multiline':True]
['text':' Default to ibm-37 ','line_number':1852,'multiline':True]
['text':' SPI error code ','line_number':1855,'multiline':True]
['text':' else use the default ','line_number':1867,'multiline':True]
['text':' NULL terminate ','line_number':1877,'multiline':True]
['text':' On Solaris nl_langinfo returns C locale values unless setlocale
     * was called earlier.
     ','line_number':1893,'multiline':True]
['text':' When available, check nl_langinfo first because it usually gives more
       useful names. It depends on LC_CTYPE.
       nl_langinfo may use the same buffer as setlocale. ','line_number':1897,'multiline':True]
['text':'
         * On Linux and MacOSX, ensure that default codepage for non C/POSIX locale is UTF-8
         * instead of ASCII.
         ','line_number':1903,'multiline':True]
['text':' Use setlocale in a nice way, and then check some environment variables.
       Maybe the application used setlocale already.
    ','line_number':1923,'multiline':True]
['text':' if we can find the codeset name from setlocale, return that. ','line_number':1929,'multiline':True]
['text':' Everything failed. Return US ASCII (ISO 646). ','line_number':1935,'multiline':True]
['text':' !U_CHARSET_IS_UTF8 ','line_number':1956,'multiline':True]
['text':' end of platform-specific implementation -------------- ','line_number':1959,'multiline':True]
['text':' version handling --------------------------------------------------------- ','line_number':1961,'multiline':True]
['text':' count how many fields need to be written ','line_number':2015,'multiline':True]
['text':' write the first part ','line_number':2023,'multiline':True]
['text':' write the decimal field value ','line_number':2024,'multiline':True]
['text':' write the following parts ','line_number':2036,'multiline':True]
['text':' write a dot first ','line_number':2038,'multiline':True]
['text':' write the decimal field value ','line_number':2041,'multiline':True]
['text':' NUL-terminate ','line_number':2054,'multiline':True]
['text':' Suppress unused variable warning from clang.','line_number':2060,'multiline':False]
['text':'*
 * icucfg.h dependent code 
 ','line_number':2064,'multiline':True]
['text':' null (nonexistent) implementation. ','line_number':2122,'multiline':True]
['text':' other unknown error. ','line_number':2193,'multiline':True]
['text':' No dynamic loading set. ','line_number':2203,'multiline':True]
['text':' U_ENABLE_DYLOAD ','line_number':2232,'multiline':True]
['text':'
 * Hey, Emacs, please set the following:
 *
 * Local Variables:
 * indent-tabs-mode: nil
 * End:
 *
 ','line_number':2234,'multiline':True]
