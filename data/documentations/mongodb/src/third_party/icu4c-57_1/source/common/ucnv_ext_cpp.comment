['text':'
******************************************************************************
*
*   Copyright (C) 2003-2016, International Business Machines
*   Corporation and others.  All Rights Reserved.
*
******************************************************************************
*   file name:  ucnv_ext.cpp
*   encoding:   US-ASCII
*   tab size:   8 (not used)
*   indentation:4
*
*   created on: 2003jun13
*   created by: Markus W. Scherer
*
*   Conversion extensions
','line_number':1,'multiline':True]
['text':' to Unicode --------------------------------------------------------------- ','line_number':30,'multiline':True]
['text':'
 * @return lookup value for the byte, if found; else 0
 ','line_number':32,'multiline':True]
['text':' check the input byte against the lowest and highest section bytes ','line_number':40,'multiline':True]
['text':' the byte is out of range ','line_number':44,'multiline':True]
['text':' direct access on a linear array ','line_number':48,'multiline':True]
['text':' could be 0 ','line_number':49,'multiline':True]
['text':' word0 is suitable for <=toUSection[] comparison, word for <toUSection[] ','line_number':52,'multiline':True]
['text':'
     * Shift byte once instead of each section word and add 0xffffff.
     * We will compare the shifted/added byte (bbffffff) against
     * section words which have byte values in the same bit position.
     * If and only if byte bb < section byte ss then bbffffff<ssvvvvvv
     * for all v=0..f
     * so we need not mask off the lower 24 bits of each section word.
     ','line_number':55,'multiline':True]
['text':' binary search ','line_number':65,'multiline':True]
['text':' done ','line_number':71,'multiline':True]
['text':' start<limit-1 ','line_number':73,'multiline':True]
['text':' linear search for the last part ','line_number':76,'multiline':True]
['text':' always break at start==limit-1 ','line_number':86,'multiline':True]
['text':' did we really find it? ','line_number':99,'multiline':True]
['text':' never 0 ','line_number':101,'multiline':True]
['text':' not found ','line_number':103,'multiline':True]
['text':'
 * TRUE if not an SI/SO stateful converter,
 * or if the match length fits with the current converter state
 ','line_number':107,'multiline':True]
['text':'
 * this works like ucnv_extMatchFromU() except
 * - the first character is in pre
 * - no trie is used
 * - the returned matchLength is not offset by 2
 ','line_number':114,'multiline':True]
['text':'useFallback','line_number':125,'multiline':True]
['text':' no extension data, no match ','line_number':133,'multiline':True]
['text':' initialize ','line_number':136,'multiline':True]
['text':' SBCS state of an SI/SO stateful converter, look at only exactly 1 byte ','line_number':144,'multiline':True]
['text':' no match of a DBCS sequence in SBCS mode ','line_number':146,'multiline':True]
['text':' preLength==0 ','line_number':149,'multiline':True]
['text':' we must not remember fallback matches when not using fallbacks ','line_number':157,'multiline':True]
['text':' match input units until there is a full match or the input is consumed ','line_number':159,'multiline':True]
['text':' go to the next section ','line_number':161,'multiline':True]
['text':' read first pair of the section ','line_number':164,'multiline':True]
['text':' remember longest match so far ','line_number':173,'multiline':True]
['text':' match pre[] then src[] ','line_number':178,'multiline':True]
['text':' all input consumed, partial match ','line_number':184,'multiline':True]
['text':'
                 * end of the entire input stream, stop with the longest match so far
                 * or: partial match must not be longer than UCNV_EXT_MAX_BYTES
                 * because it must fit into state buffers
                 ','line_number':186,'multiline':True]
['text':' continue with more input next time ','line_number':193,'multiline':True]
['text':' search for the current UChar ','line_number':198,'multiline':True]
['text':' no match here, stop with the longest match so far ','line_number':201,'multiline':True]
['text':' partial match, continue ','line_number':205,'multiline':True]
['text':' full match, stop with result ','line_number':212,'multiline':True]
['text':' full match on fallback not taken, stop with the longest match so far ','line_number':216,'multiline':True]
['text':' no match at all ','line_number':224,'multiline':True]
['text':' return result ','line_number':228,'multiline':True]
['text':' output the result ','line_number':239,'multiline':True]
['text':' output a single code point ','line_number':241,'multiline':True]
['text':' output a string - with correct data we have resultLength>0 ','line_number':248,'multiline':True]
['text':'
 * get the SI/SO toU state (state 0 is for SBCS, 1 for DBCS),
 * or 1 for DBCS-only,
 * or -1 if the converter is not SI/SO stateful
 *
 * Note: For SI/SO stateful converters getting here,
 * cnv->mode==0 is equivalent to firstLength==1.
 ','line_number':260,'multiline':True]
['text':'
 * target<targetLimit; set error code for overflow
 ','line_number':272,'multiline':True]
['text':' initialize output-only param to 0 to silence gcc ','line_number':283,'multiline':True]
['text':' try to match ','line_number':286,'multiline':True]
['text':' advance src pointer for the consumed input ','line_number':293,'multiline':True]
['text':' write result to target ','line_number':296,'multiline':True]
['text':' save state for partial match ','line_number':304,'multiline':True]
['text':' copy the first code point ','line_number':308,'multiline':True]
['text':' now copy the newly consumed input ','line_number':315,'multiline':True]
['text':' same as *src=srcLimit; because we reached the end of input ','line_number':321,'multiline':True]
['text':' match==0 no match ','line_number':324,'multiline':True]
['text':' initialize output-only param to 0 to silence gcc ','line_number':333,'multiline':True]
['text':' try to match ','line_number':340,'multiline':True]
['text':' write result for simple, single-character conversion ','line_number':347,'multiline':True]
['text':'
     * return no match because
     * - match>0 && value points to string: simple conversion cannot handle multiple code points
     * - match>0 && match!=length: not all input consumed, forbidden for this function
     * - match==0: no match found in the first place
     * - match<0: partial match, not supported for simple conversion (and flush==TRUE)
     ','line_number':353,'multiline':True]
['text':'
 * continue partial match with new input
 * never called for simple, single-character conversion
 ','line_number':363,'multiline':True]
['text':' initialize output-only param to 0 to silence gcc ','line_number':371,'multiline':True]
['text':' advance src pointer for the consumed input ','line_number':381,'multiline':True]
['text':' the match did not use all of preToU[] - keep the rest for replay ','line_number':385,'multiline':True]
['text':' write result ','line_number':391,'multiline':True]
['text':' save state for partial match ','line_number':398,'multiline':True]
['text':' just _append_ the newly consumed input to preToU[] ','line_number':402,'multiline':True]
['text':' same as *src=srcLimit; because we reached the end of input ','line_number':408,'multiline':True]
['text':' match==0 ','line_number':410,'multiline':True]
['text':'
         * no match
         *
         * We need to split the previous input into two parts:
         *
         * 1. The first codepage character is unmappable - that's how we got into
         *    trying the extension data in the first place.
         *    We need to move it from the preToU buffer
         *    to the error buffer, set an error code,
         *    and prepare the rest of the previous input for 2.
         *
         * 2. The rest of the previous input must be converted once we
         *    come back from the callback for the first character.
         *    At that time, we have to try again from scratch to convert
         *    these input characters.
         *    The replay will be handled by the ucnv.c conversion code.
         ','line_number':411,'multiline':True]
['text':' move the first codepage character to the error field ','line_number':429,'multiline':True]
['text':' move the rest up inside the buffer ','line_number':433,'multiline':True]
['text':' mark preToU for replay ','line_number':439,'multiline':True]
['text':' set the error code for unassigned ','line_number':442,'multiline':True]
['text':' from Unicode ------------------------------------------------------------- ','line_number':447,'multiline':True]
['text':' Use roundtrips, "good one-way" mappings, and some normal fallbacks.','line_number':449,'multiline':False]
['text':'
 * @return index of the UChar, if found; else <0
 ','line_number':458,'multiline':True]
['text':' binary search ','line_number':465,'multiline':True]
['text':' done ','line_number':471,'multiline':True]
['text':' start<limit-1 ','line_number':473,'multiline':True]
['text':' linear search for the last part ','line_number':476,'multiline':True]
['text':' always break at start==limit-1 ','line_number':486,'multiline':True]
['text':' did we really find it? ','line_number':499,'multiline':True]
['text':' not found ','line_number':503,'multiline':True]
['text':'
 * @param cx pointer to extension data; if NULL, returns 0
 * @param firstCP the first code point before all the other UChars
 * @param pre UChars that must match; !initialMatch: partial match with them
 * @param preLength length of pre, >=0
 * @param src UChars that can be used to complete a match
 * @param srcLength length of src, >=0
 * @param pMatchValue [out] output result value for the match from the data structure
 * @param useFallback "use fallback" flag, usually from cnv->useFallback
 * @param flush TRUE if the end of the input stream is reached
 * @return >1: matched, return value=total match length (number of input units matched)
 *          1: matched, no mapping but request for <subchar1>
 *             (only for the first code point)
 *          0: no match
 *         <0: partial match, return value=negative total match length
 *             (partial matches are never returned for flush==TRUE)
 *             (partial matches are never returned as being longer than UCNV_EXT_MAX_UCHARS)
 *         the matchLength is 2 if only firstCP matched, and >2 if firstCP and
 *         further code units matched
 ','line_number':507,'multiline':True]
['text':' no extension data, no match ','line_number':545,'multiline':True]
['text':' trie lookup of firstCP ','line_number':548,'multiline':True]
['text':' stage 1 index ','line_number':549,'multiline':True]
['text':' the first code point is outside the trie ','line_number':551,'multiline':True]
['text':'
     * Tests for (value&UCNV_EXT_FROM_U_RESERVED_MASK)==0:
     * Do not interpret values with reserved bits used, for forward compatibility,
     * and do not even remember intermediate results with reserved bits used.
     ','line_number':564,'multiline':True]
['text':' partial match, enter the loop below ','line_number':571,'multiline':True]
['text':' initialize ','line_number':574,'multiline':True]
['text':' we must not remember fallback matches when not using fallbacks ','line_number':581,'multiline':True]
['text':' match input units until there is a full match or the input is consumed ','line_number':583,'multiline':True]
['text':' go to the next section ','line_number':585,'multiline':True]
['text':' read first pair of the section ','line_number':589,'multiline':True]
['text':' remember longest match so far ','line_number':593,'multiline':True]
['text':' match pre[] then src[] ','line_number':598,'multiline':True]
['text':' all input consumed, partial match ','line_number':604,'multiline':True]
['text':'
                     * end of the entire input stream, stop with the longest match so far
                     * or: partial match must not be longer than UCNV_EXT_MAX_UCHARS
                     * because it must fit into state buffers
                     ','line_number':606,'multiline':True]
['text':' continue with more input next time ','line_number':613,'multiline':True]
['text':' search for the current UChar ','line_number':618,'multiline':True]
['text':' no match here, stop with the longest match so far ','line_number':621,'multiline':True]
['text':' partial match, continue ','line_number':626,'multiline':True]
['text':' full match, stop with result ','line_number':630,'multiline':True]
['text':' full match on fallback not taken, stop with the longest match so far ','line_number':634,'multiline':True]
['text':' no match at all ','line_number':642,'multiline':True]
['text':' result from firstCP trie lookup ','line_number':645,'multiline':True]
['text':' full match, stop with result ','line_number':647,'multiline':True]
['text':' fallback not taken ','line_number':651,'multiline':True]
['text':' return result ','line_number':656,'multiline':True]
['text':' assert matchLength==2 ','line_number':658,'multiline':True]
['text':'
 * @param value fromUnicode mapping table value; ignores roundtrip and reserved bits
 ','line_number':665,'multiline':True]
['text':' output the result ','line_number':681,'multiline':True]
['text':'
         * Generate a byte array and then write it below.
         * This is not the fastest possible way, but it should be ok for
         * extension mappings, and it is much simpler.
         * Offset and overflow handling are only done once this way.
         ','line_number':683,'multiline':True]
['text':' reserve buffer[0] for shiftByte below ','line_number':689,'multiline':True]
['text':' will never occur ','line_number':701,'multiline':True]
['text':' with correct data we have length>0 ','line_number':708,'multiline':True]
['text':' handle SI/SO stateful output ','line_number':711,'multiline':True]
['text':' change from double-byte mode to single-byte ','line_number':715,'multiline':True]
['text':' change from single-byte mode to double-byte ','line_number':719,'multiline':True]
['text':' prepend the shift byte to the result bytes ','line_number':727,'multiline':True]
['text':'
 * target<targetLimit; set error code for overflow
 ','line_number':743,'multiline':True]
['text':' initialize output-only param to 0 to silence gcc ','line_number':754,'multiline':True]
['text':' try to match ','line_number':757,'multiline':True]
['text':' reject a match if the result is a single byte for DBCS-only ','line_number':764,'multiline':True]
['text':' advance src pointer for the consumed input ','line_number':769,'multiline':True]
['text':' remove 2 for the initial code point ','line_number':770,'multiline':True]
['text':' write result to target ','line_number':772,'multiline':True]
['text':' save state for partial match ','line_number':780,'multiline':True]
['text':' copy the first code point ','line_number':784,'multiline':True]
['text':' now copy the newly consumed input ','line_number':787,'multiline':True]
['text':' remove 2 for the initial code point ','line_number':789,'multiline':True]
['text':' same as *src=srcLimit; because we reached the end of input ','line_number':793,'multiline':True]
['text':' matched, no mapping but request for <subchar1> ','line_number':797,'multiline':True]
['text':' match==0 no match ','line_number':800,'multiline':True]
['text':'
 * Used by ISO 2022 implementation.
 * @return number of bytes in *pValue; negative number if fallback; 0 for no mapping
 ','line_number':805,'multiline':True]
['text':' try to match ','line_number':816,'multiline':True]
['text':' write result for simple, single-character conversion ','line_number':824,'multiline':True]
['text':' not currently used ','line_number':835,'multiline':True]
['text':' de-serialize a 4-byte result ','line_number':837,'multiline':True]
['text':'
     * return no match because
     * - match>1 && resultLength>4: result too long for simple conversion
     * - match==1: no match found, <subchar1> preferred
     * - match==0: no match found in the first place
     * - match<0: partial match, not supported for simple conversion (and flush==TRUE)
     ','line_number':849,'multiline':True]
['text':'
 * continue partial match with new input, requires cnv->preFromUFirstCP>=0
 * never called for simple, single-character conversion
 ','line_number':859,'multiline':True]
['text':' initialize output-only param to 0 to silence gcc ','line_number':867,'multiline':True]
['text':' remove 2 for the initial code point ','line_number':877,'multiline':True]
['text':' advance src pointer for the consumed input ','line_number':880,'multiline':True]
['text':' the match did not use all of preFromU[] - keep the rest for replay ','line_number':884,'multiline':True]
['text':' finish the partial match ','line_number':890,'multiline':True]
['text':' write result ','line_number':893,'multiline':True]
['text':' save state for partial match ','line_number':900,'multiline':True]
['text':' just _append_ the newly consumed input to preFromU[] ','line_number':904,'multiline':True]
['text':' remove 2 for the initial code point ','line_number':906,'multiline':True]
['text':' same as *src=srcLimit; because we reached the end of input ','line_number':911,'multiline':True]
['text':' match==0 or 1 ','line_number':913,'multiline':True]
['text':'
         * no match
         *
         * We need to split the previous input into two parts:
         *
         * 1. The first code point is unmappable - that's how we got into
         *    trying the extension data in the first place.
         *    We need to move it from the preFromU buffer
         *    to the error buffer, set an error code,
         *    and prepare the rest of the previous input for 2.
         *
         * 2. The rest of the previous input must be converted once we
         *    come back from the callback for the first code point.
         *    At that time, we have to try again from scratch to convert
         *    these input characters.
         *    The replay will be handled by the ucnv.c conversion code.
         ','line_number':914,'multiline':True]
['text':' matched, no mapping but request for <subchar1> ','line_number':933,'multiline':True]
['text':' move the first code point to the error field ','line_number':937,'multiline':True]
['text':' mark preFromU for replay ','line_number':941,'multiline':True]
['text':' set the error code for unassigned ','line_number':944,'multiline':True]
['text':' Add only code points for which the roundtrip flag is set.','line_number':952,'multiline':False]
['text':' Do not add any fallbacks, even if ucnv_fromUnicode() would use them','line_number':953,'multiline':False]
['text':' (fallbacks from PUA). See the API docs for ucnv_getUnicodeSet().','line_number':954,'multiline':False]
['text':'','line_number':955,'multiline':False]
['text':' By analogy, also do not add "good one-way" mappings.','line_number':956,'multiline':False]
['text':'','line_number':957,'multiline':False]
['text':' Do not add entries with reserved bits set.','line_number':958,'multiline':False]
['text':' UCNV_ROUNDTRIP_AND_FALLBACK_SET ','line_number':963,'multiline':True]
['text':' Do not add entries with reserved bits set.','line_number':964,'multiline':False]
['text':' Do not add <subchar1> entries or other (future?) pseudo-entries','line_number':969,'multiline':False]
['text':' with an output length of 0.','line_number':970,'multiline':False]
['text':' read first pair of the section ','line_number':993,'multiline':True]
['text':' add the initial code point ','line_number':999,'multiline':True]
['text':' add the string so far ','line_number':1002,'multiline':True]
['text':' append this code unit and recurse or add the string ','line_number':1008,'multiline':True]
['text':' no mapping, do nothing ','line_number':1013,'multiline':True]
['text':' enumerate the from-Unicode trie table ','line_number':1054,'multiline':True]
['text':' keep track of the current code point while enumerating ','line_number':1055,'multiline':True]
['text':' DBCS-only, ignore single-byte results ','line_number':1062,'multiline':True]
['text':'
     * the trie enumeration is almost the same as
     * in MBCSGetUnicodeSet() for MBCS_OUTPUT_1
     ','line_number':1068,'multiline':True]
['text':' read the stage 3 block ','line_number':1078,'multiline':True]
['text':' no mapping, do nothing ','line_number':1084,'multiline':True]
['text':' Recurse for partial results.','line_number':1086,'multiline':False]
['text':'
                                 * UCNV_SET_FILTER_NONE,
                                 * or UCNV_SET_FILTER_DBCS_ONLY which is handled via minLength
                                 ','line_number':1121,'multiline':True]
['text':' empty stage 3 block ','line_number':1131,'multiline':True]
['text':' empty stage 2 block ','line_number':1135,'multiline':True]
['text':' #if !UCONFIG_NO_LEGACY_CONVERSION ','line_number':1140,'multiline':True]
