['text':'
******************************************************************************
*
*   Copyright (C) 1997-2016, International Business Machines
*   Corporation and others.  All Rights Reserved.
*
******************************************************************************
*
* File CMEMORY.H
*
*  Contains stdlib.h/string.h memory functions
*
* @author       Bertrand A. Damiba
*
* Modification History:
*
*   Date        Name        Description
*   6/20/98     Bertrand    Created.
*  05/03/99     stephen     Changed from functions to macros.
*
******************************************************************************
','line_number':1,'multiline':True]
['text':'
 * The C++ standard requires that the source pointer for memcpy() & memmove()
 * is valid, not NULL, and not at the end of an allocated memory block.
 * In debug mode, we read one byte from the source point to verify that it's
 * a valid, readable pointer.
 ','line_number':39,'multiline':True]
['text':' U_DEBUG ','line_number':60,'multiline':True]
['text':'*
 * \def UPRV_LENGTHOF
 * Convenience macro to determine the length of a fixed array at compile-time.
 * @param array A fixed length array
 * @return The length of the array, in elements
 * @internal
 ','line_number':62,'multiline':True]
['text':'*
 * This should align the memory properly on any machine.
 * This is very useful for the safeClone functions.
 ','line_number':85,'multiline':True]
['text':'*
 * Get the least significant bits of a pointer (a memory address).
 * For example, with a mask of 3, the macro gets the 2 least significant bits,
 * which will be 0 if the pointer is 32-bit (4-byte) aligned.
 *
 * ptrdiff_t is the most appropriate integer type to cast to.
 * size_t should work too, since on most (or all?) platforms it has the same
 * width as ptrdiff_t.
 ','line_number':95,'multiline':True]
['text':'*
 * Get the amount of bytes that a pointer is off by from
 * the previous UAlignedMemory-aligned pointer.
 ','line_number':106,'multiline':True]
['text':'*
 * Get the amount of bytes to add to a pointer
 * in order to get the next UAlignedMemory-aligned address.
 ','line_number':112,'multiline':True]
['text':'*
  *  Heap clean up function, called from u_cleanup()
  *    Clears any user heap functions from u_setMemoryFunctions()
  *    Does NOT deallocate any remaining allocated memory.
  ','line_number':118,'multiline':True]
['text':'*
 * A function called by <TT>uhash_remove</TT>,
 * <TT>uhash_close</TT>, or <TT>uhash_put</TT> to delete
 * an existing key or value.
 * @param obj A key or value stored in a hashtable
 * @see uprv_deleteUObject
 ','line_number':126,'multiline':True]
['text':'*
 * Deleter for UObject instances.
 * Works for all subclasses of UObject because it has a virtual destructor.
 ','line_number':135,'multiline':True]
['text':'*
 * "Smart pointer" class, deletes memory via uprv_free().
 * For most methods see the LocalPointerBase base class.
 * Adds operator[] for array item access.
 *
 * @see LocalPointerBase
 ','line_number':146,'multiline':True]
['text':'*
     * Constructor takes ownership.
     * @param p simple pointer to an array of T items that is adopted
     ','line_number':158,'multiline':True]
['text':'*
     * Move constructor, leaves src with isNull().
     * @param src source smart pointer
     ','line_number':164,'multiline':True]
['text':'*
     * Destructor deletes the memory it owns.
     ','line_number':172,'multiline':True]
['text':'*
     * Move assignment operator, leaves src with isNull().
     * The behavior is undefined if *this and src are the same object.
     * @param src source smart pointer
     * @return *this
     ','line_number':179,'multiline':True]
['text':'*
     * Move assignment, leaves src with isNull().
     * The behavior is undefined if *this and src are the same object.
     *
     * Can be called explicitly, does not need C++11 support.
     * @param src source smart pointer
     * @return *this
     ','line_number':189,'multiline':True]
['text':'*
     * Swap pointers.
     * @param other other smart pointer
     ','line_number':203,'multiline':True]
['text':'*
     * Non-member LocalMemory swap function.
     * @param p1 will get p2's pointer
     * @param p2 will get p1's pointer
     ','line_number':212,'multiline':True]
['text':'*
     * Deletes the array it owns,
     * and adopts (takes ownership of) the one passed in.
     * @param p simple pointer to an array of T items that is adopted
     ','line_number':220,'multiline':True]
['text':'*
     * Deletes the array it owns, allocates a new one and reset its bytes to 0.
     * Returns the new array pointer.
     * If the allocation fails, then the current array is unchanged and
     * this method returns NULL.
     * @param newCapacity must be >0
     * @return the allocated array pointer, or NULL if the allocation failed
     ','line_number':229,'multiline':True]
['text':'*
     * Deletes the array it owns and allocates a new one, copying length T items.
     * Returns the new array pointer.
     * If the allocation fails, then the current array is unchanged and
     * this method returns NULL.
     * @param newCapacity must be >0
     * @param length number of T items to be copied from the old array to the new one;
     *               must be no more than the capacity of the old array,
     *               which the caller must track because the LocalMemory does not track it
     * @return the allocated array pointer, or NULL if the allocation failed
     ','line_number':238,'multiline':True]
['text':'*
     * Array item access (writable).
     * No index bounds check.
     * @param i array index
     * @return reference to the array item
     ','line_number':250,'multiline':True]
['text':'*
 * Simple array/buffer management class using uprv_malloc() and uprv_free().
 * Provides an internal array with fixed capacity. Can alias another array
 * or allocate one.
 *
 * The array address is properly aligned for type T. It might not be properly
 * aligned for types larger than T (or larger than the largest subtype of T).
 *
 * Unlike LocalMemory and LocalArray, this class never adopts
 * (takes ownership of) another array.
 ','line_number':295,'multiline':True]
['text':'*
     * Default constructor initializes with internal T[stackCapacity] buffer.
     ','line_number':309,'multiline':True]
['text':'*
     * Destructor deletes the array (if owned).
     ','line_number':313,'multiline':True]
['text':'*
     * Returns the array capacity (number of T items).
     * @return array capacity
     ','line_number':317,'multiline':True]
['text':'*
     * Access without ownership change.
     * @return the array pointer
     ','line_number':322,'multiline':True]
['text':'*
     * Returns the array limit. Simple convenience method.
     * @return getAlias()+getCapacity()
     ','line_number':327,'multiline':True]
['text':' No "operator T *() const" because that can make','line_number':332,'multiline':False]
['text':' expressions like mbs[index] ambiguous for some compilers.','line_number':333,'multiline':False]
['text':'*
     * Array item access (const).
     * No index bounds check.
     * @param i array index
     * @return reference to the array item
     ','line_number':334,'multiline':True]
['text':'*
     * Array item access (writable).
     * No index bounds check.
     * @param i array index
     * @return reference to the array item
     ','line_number':341,'multiline':True]
['text':'*
     * Deletes the array (if owned) and aliases another one, no transfer of ownership.
     * If the arguments are illegal, then the current array is unchanged.
     * @param otherArray must not be NULL
     * @param otherCapacity must be >0
     ','line_number':348,'multiline':True]
['text':'*
     * Deletes the array (if owned) and allocates a new one, copying length T items.
     * Returns the new array pointer.
     * If the allocation fails, then the current array is unchanged and
     * this method returns NULL.
     * @param newCapacity can be less than or greater than the current capacity;
     *                    must be >0
     * @param length number of T items to be copied from the old array to the new one
     * @return the allocated array pointer, or NULL if the allocation failed
     ','line_number':362,'multiline':True]
['text':'*
     * Gives up ownership of the array if owned, or else clones it,
     * copying length T items; resets itself to the internal stack array.
     * Returns NULL if the allocation failed.
     * @param length number of T items to copy when cloning,
     *        and capacity of the clone when cloning
     * @param resultCapacity will be set to the returned array's capacity (output-only)
     * @return the array pointer;
     *         caller becomes responsible for deleting the array
     ','line_number':373,'multiline':True]
['text':' No comparison operators with other MaybeStackArray's. ','line_number':394,'multiline':True]
['text':'other','line_number':395,'multiline':True]
['text':'other','line_number':396,'multiline':True]
['text':' No ownership transfer: No copy constructor, no assignment operator. ','line_number':397,'multiline':True]
['text':'other','line_number':398,'multiline':True]
['text':'other','line_number':399,'multiline':True]
['text':' No heap allocation. Use only on the stack.','line_number':401,'multiline':False]
['text':'   (Declaring these functions private triggers a cascade of problems:','line_number':402,'multiline':False]
['text':'      MSVC insists on exporting an instantiation of MaybeStackArray, which','line_number':403,'multiline':False]
['text':'      requires that all functions be defined.','line_number':404,'multiline':False]
['text':'      An empty implementation of new() is rejected, it must return a value.','line_number':405,'multiline':False]
['text':'      Returning NULL is rejected by gcc for operator new.','line_number':406,'multiline':False]
['text':'      The expedient thing is just not to override operator new.','line_number':407,'multiline':False]
['text':'      While relatively pointless, heap allocated instances will function.','line_number':408,'multiline':False]
['text':' static void * U_EXPORT2 operator new(size_t size); ','line_number':409,'multiline':False]
['text':' static void * U_EXPORT2 operator new[](size_t size);','line_number':410,'multiline':False]
['text':' static void * U_EXPORT2 operator new(size_t, void *ptr);','line_number':412,'multiline':False]
['text':'*
 * Variant of MaybeStackArray that allocates a header struct and an array
 * in one contiguous memory block, using uprv_malloc() and uprv_free().
 * Provides internal memory with fixed array capacity. Can alias another memory
 * block or allocate one.
 * The stackCapacity is the number of T items in the internal memory,
 * not counting the H header.
 * Unlike LocalMemory and LocalArray, this class never adopts
 * (takes ownership of) another memory block.
 ','line_number':471,'multiline':True]
['text':'*
     * Default constructor initializes with internal H+T[stackCapacity] buffer.
     ','line_number':484,'multiline':True]
['text':'*
     * Destructor deletes the memory (if owned).
     ','line_number':488,'multiline':True]
['text':'*
     * Returns the array capacity (number of T items).
     * @return array capacity
     ','line_number':492,'multiline':True]
['text':'*
     * Access without ownership change.
     * @return the header pointer
     ','line_number':497,'multiline':True]
['text':'*
     * Returns the array start.
     * @return array start, same address as getAlias()+1
     ','line_number':502,'multiline':True]
['text':'*
     * Returns the array limit.
     * @return array limit
     ','line_number':507,'multiline':True]
['text':'*
     * Access without ownership change. Same as getAlias().
     * A class instance can be used directly in expressions that take a T *.
     * @return the header pointer
     ','line_number':512,'multiline':True]
['text':'*
     * Array item access (writable).
     * No index bounds check.
     * @param i array index
     * @return reference to the array item
     ','line_number':518,'multiline':True]
['text':'*
     * Deletes the memory block (if owned) and aliases another one, no transfer of ownership.
     * If the arguments are illegal, then the current memory is unchanged.
     * @param otherArray must not be NULL
     * @param otherCapacity must be >0
     ','line_number':525,'multiline':True]
['text':'*
     * Deletes the memory block (if owned) and allocates a new one,
     * copying the header and length T array items.
     * Returns the new header pointer.
     * If the allocation fails, then the current memory is unchanged and
     * this method returns NULL.
     * @param newCapacity can be less than or greater than the current capacity;
     *                    must be >0
     * @param length number of T items to be copied from the old array to the new one
     * @return the allocated pointer, or NULL if the allocation failed
     ','line_number':539,'multiline':True]
['text':'*
     * Gives up ownership of the memory if owned, or else clones it,
     * copying the header and length T array items; resets itself to the internal memory.
     * Returns NULL if the allocation failed.
     * @param length number of T items to copy when cloning,
     *        and array capacity of the clone when cloning
     * @param resultCapacity will be set to the returned array's capacity (output-only)
     * @return the header pointer;
     *         caller becomes responsible for deleting the array
     ','line_number':551,'multiline':True]
['text':' stackHeader must precede stackArray immediately.','line_number':566,'multiline':False]
['text':' No comparison operators with other MaybeStackHeaderAndArray's. ','line_number':574,'multiline':True]
['text':'other','line_number':575,'multiline':True]
['text':'other','line_number':576,'multiline':True]
['text':' No ownership transfer: No copy constructor, no assignment operator. ','line_number':577,'multiline':True]
['text':'other','line_number':578,'multiline':True]
['text':'other','line_number':579,'multiline':True]
['text':' No heap allocation. Use only on the stack.','line_number':581,'multiline':False]
['text':'   (Declaring these functions private triggers a cascade of problems;','line_number':582,'multiline':False]
['text':'    see the MaybeStackArray class for details.)','line_number':583,'multiline':False]
['text':' static void * U_EXPORT2 operator new(size_t size); ','line_number':584,'multiline':False]
['text':' static void * U_EXPORT2 operator new[](size_t size);','line_number':585,'multiline':False]
['text':' static void * U_EXPORT2 operator new(size_t, void *ptr);','line_number':587,'multiline':False]
['text':' __cplusplus ','line_number':652,'multiline':True]
['text':' CMEMORY_H ','line_number':653,'multiline':True]
