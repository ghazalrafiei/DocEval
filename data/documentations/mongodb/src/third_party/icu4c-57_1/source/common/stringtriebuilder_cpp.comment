['text':'
*******************************************************************************
*   Copyright (C) 2010-2012, International Business Machines
*   Corporation and others.  All Rights Reserved.
*******************************************************************************
*   file name:  stringtriebuilder.cpp
*   encoding:   US-ASCII
*   tab size:   8 (not used)
*   indentation:4
*
*   created on: 2010dec24
*   created by: Markus W. Scherer
','line_number':1,'multiline':True]
['text':' for 'typeid' to work','line_number':15,'multiline':False]
['text':' USTRINGTRIE_BUILD_SMALL ','line_number':70,'multiline':True]
['text':' Requires start<limit,','line_number':81,'multiline':False]
['text':' and all strings of the [start..limit[ elements must be sorted and','line_number':82,'multiline':False]
['text':' have a common prefix of length unitIndex.','line_number':83,'multiline':False]
['text':' An intermediate or final value.','line_number':90,'multiline':False]
['text':' final-value node','line_number':93,'multiline':False]
['text':' Now all [start..limit[ strings are longer than unitIndex.','line_number':97,'multiline':False]
['text':' Linear-match node: All strings have the same character at unitIndex.','line_number':101,'multiline':False]
['text':' Break the linear-match sequence into chunks of at most kMaxLinearMatchLength.','line_number':104,'multiline':False]
['text':' Branch node.','line_number':116,'multiline':False]
['text':' length>=2 because minUnit!=maxUnit.','line_number':118,'multiline':False]
['text':' start<limit && all strings longer than unitIndex &&','line_number':130,'multiline':False]
['text':' length different units at unitIndex','line_number':131,'multiline':False]
['text':' Branch on the middle unit.','line_number':138,'multiline':False]
['text':' First, find the middle unit.','line_number':139,'multiline':False]
['text':' Encode the less-than branch first.','line_number':141,'multiline':False]
['text':' middle unit','line_number':142,'multiline':False]
['text':' Continue for the greater-or-equal branch.','line_number':145,'multiline':False]
['text':' For each unit, find its elements array start and whether it has a final value.','line_number':149,'multiline':False]
['text':' unitNumber==length-1, and the maxUnit elements range is [start..limit[','line_number':160,'multiline':False]
['text':' Write the sub-nodes in reverse order: The jump lengths are deltas from','line_number':163,'multiline':False]
['text':' after their own positions, so if we wrote the minUnit sub-node first,','line_number':164,'multiline':False]
['text':' then its jump delta would be larger.','line_number':165,'multiline':False]
['text':' Instead we write the minUnit sub-node last, for a shorter delta.','line_number':166,'multiline':False]
['text':' The maxUnit sub-node is written as the very last one because we do','line_number':174,'multiline':False]
['text':' not jump for it at all.','line_number':175,'multiline':False]
['text':' Write the rest of this node's unit-value pairs.','line_number':179,'multiline':False]
['text':' Write the final value for the one string ending with this unit.','line_number':184,'multiline':False]
['text':' Write the delta to the start position of the sub-node.','line_number':187,'multiline':False]
['text':' Write the split-branch nodes.','line_number':193,'multiline':False]
['text':' Requires start<limit,','line_number':202,'multiline':False]
['text':' and all strings of the [start..limit[ elements must be sorted and','line_number':203,'multiline':False]
['text':' have a common prefix of length unitIndex.','line_number':204,'multiline':False]
['text':' An intermediate or final value.','line_number':213,'multiline':False]
['text':' Now all [start..limit[ strings are longer than unitIndex.','line_number':221,'multiline':False]
['text':' Linear-match node: All strings have the same character at unitIndex.','line_number':225,'multiline':False]
['text':' Break the linear-match sequence into chunks of at most kMaxLinearMatchLength.','line_number':228,'multiline':False]
['text':' Branch node.','line_number':239,'multiline':False]
['text':' length>=2 because minUnit!=maxUnit.','line_number':241,'multiline':False]
['text':' start<limit && all strings longer than unitIndex &&','line_number':255,'multiline':False]
['text':' length different units at unitIndex','line_number':256,'multiline':False]
['text':' Branch on the middle unit.','line_number':267,'multiline':False]
['text':' First, find the middle unit.','line_number':268,'multiline':False]
['text':' Create the less-than branch.','line_number':270,'multiline':False]
['text':' middle unit','line_number':271,'multiline':False]
['text':' Continue for the greater-or-equal branch.','line_number':274,'multiline':False]
['text':' For each unit, find its elements array start and whether it has a final value.','line_number':286,'multiline':False]
['text':' unitNumber==length-1, and the maxUnit elements range is [start..limit[','line_number':299,'multiline':False]
['text':' Create the split-branch nodes.','line_number':307,'multiline':False]
['text':' If uhash_puti() returns a non-zero value from an equivalent, previously','line_number':331,'multiline':False]
['text':' registered node, then uhash_find() failed to find that and we will leak newNode.','line_number':332,'multiline':False]
['text':' Only in debug mode to avoid a compiler warning about unused oldValue.','line_number':334,'multiline':False]
['text':' If uhash_puti() returns a non-zero value from an equivalent, previously','line_number':360,'multiline':False]
['text':' registered node, then uhash_find() failed to find that and we will leak newNode.','line_number':361,'multiline':False]
['text':' Only in debug mode to avoid a compiler warning about unused oldValue.','line_number':363,'multiline':False]
['text':' For all but the rightmost edge, decrement the edge number.','line_number':500,'multiline':False]
['text':' Write the sub-nodes in reverse order: The jump lengths are deltas from','line_number':510,'multiline':False]
['text':' after their own positions, so if we wrote the minUnit sub-node first,','line_number':511,'multiline':False]
['text':' then its jump delta would be larger.','line_number':512,'multiline':False]
['text':' Instead we write the minUnit sub-node last, for a shorter delta.','line_number':513,'multiline':False]
['text':' The maxUnit sub-node is written as the very last one because we do','line_number':523,'multiline':False]
['text':' not jump for it at all.','line_number':524,'multiline':False]
['text':' Write the rest of this node's unit-value pairs.','line_number':532,'multiline':False]
['text':' Write the final value for the one string ending with this unit.','line_number':537,'multiline':False]
['text':' Write the delta to the start position of the sub-node.','line_number':541,'multiline':False]
['text':' Encode the less-than branch first.','line_number':575,'multiline':False]
['text':' Encode the greater-or-equal branch last because we do not jump for it at all.','line_number':577,'multiline':False]
['text':' Write this node.','line_number':579,'multiline':False]
['text':' less-than','line_number':581,'multiline':False]
