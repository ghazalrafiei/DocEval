['text':'
*******************************************************************************
*
*   Copyright (C) 2004-2012, International Business Machines
*   Corporation and others.  All Rights Reserved.
*
*******************************************************************************
*   file name:  ucase.h
*   encoding:   US-ASCII
*   tab size:   8 (not used)
*   indentation:4
*
*   created on: 2004aug30
*   created by: Markus W. Scherer
*
*   Low-level Unicode character/string case mapping code.
','line_number':1,'multiline':True]
['text':' library API -------------------------------------------------------------- ','line_number':36,'multiline':True]
['text':'*
 * Requires non-NULL locale ID but otherwise does the equivalent of
 * checking for language codes as if uloc_getLanguage() were called:
 * Accepts both 2- and 3-letter codes and accepts case variants.
 ','line_number':51,'multiline':True]
['text':' Casing locale types for ucase_getCaseLocale ','line_number':59,'multiline':True]
['text':'*
 * Bit mask for getting just the options from a string compare options word
 * that are relevant for case-insensitive string comparison.
 * See uchar.h. Also include _STRNCMP_STYLE and U_COMPARE_CODE_POINT_ORDER.
 * @internal
 ','line_number':68,'multiline':True]
['text':'*
 * Bit mask for getting just the options from a string compare options word
 * that are relevant for case folding (of a single string or code point).
 * See uchar.h.
 * @internal
 ','line_number':76,'multiline':True]
['text':' single-code point functions ','line_number':84,'multiline':True]
['text':'*
 * Adds all simple case mappings and the full case folding for c to sa,
 * and also adds special case closure mappings.
 * c itself is not added.
 * For example, the mappings
 * - for s include long s
 * - for sharp s include ss
 * - for k include the Kelvin sign
 ','line_number':98,'multiline':True]
['text':'*
 * Maps the string to single code points and adds the associated case closure
 * mappings.
 * The string is mapped to code points if it is their full case folding string.
 * In other words, this performs a reverse full case folding and then
 * adds the case closure items of the resulting code points.
 * If the string is found and its closure applied, then
 * the string itself is added as well as part of its code points' closure.
 * It must be length>=0.
 *
 * @return TRUE if the string was found
 ','line_number':110,'multiline':True]
['text':'*
 * Iterator over characters with more than one code point in the full default Case_Folding.
 ','line_number':128,'multiline':True]
['text':'* Constructor. ','line_number':133,'multiline':True]
['text':'*
     * Returns the next (cp, full) pair where "full" is cp's full default Case_Folding.
     * Returns a negative cp value at the end of the iteration.
     ','line_number':135,'multiline':True]
['text':' no copy','line_number':141,'multiline':False]
['text':' no assignment','line_number':142,'multiline':False]
['text':'* @return UCASE_NONE, UCASE_LOWER, UCASE_UPPER, UCASE_TITLE ','line_number':155,'multiline':True]
['text':'* @return same as ucase_getType(), or <0 if c is case-ignorable ','line_number':159,'multiline':True]
['text':' string case mapping functions ','line_number':169,'multiline':True]
['text':'*
 * Iterator function for string case mappings, which need to look at the
 * context (surrounding text) of a given character for conditional mappings.
 *
 * The iterator only needs to go backward or forward away from the
 * character in question. It does not use any indexes on this interface.
 * It does not support random access or an arbitrary change of
 * iteration direction.
 *
 * The code point being case-mapped itself is never returned by
 * this iterator.
 *
 * @param context A pointer to the iterator's working data.
 * @param dir If <0 then start iterating backward from the character;
 *            if >0 then start iterating forward from the character;
 *            if 0 then continue iterating in the current direction.
 * @return Next code point, or <0 when the iteration is done.
 ','line_number':173,'multiline':True]
['text':'*
 * Sample struct which may be used by some implementations of
 * UCaseContextIterator.
 ','line_number':194,'multiline':True]
['text':'*
     * For string case mappings, a single character (a code point) is mapped
     * either to itself (in which case in-place mapping functions do nothing),
     * or to another single code point, or to a string.
     * Aside from the string contents, these are indicated with a single int32_t
     * value as follows:
     *
     * Mapping to self: Negative values (~self instead of -self to support U+0000)
     *
     * Mapping to another code point: Positive values >UCASE_MAX_STRING_LENGTH
     *
     * Mapping to a string: The string length (0..UCASE_MAX_STRING_LENGTH) is
     * returned. Note that the string result may indeed have zero length.
     ','line_number':212,'multiline':True]
['text':'*
 * Get the full lowercase mapping for c.
 *
 * @param csp Case mapping properties.
 * @param c Character to be mapped.
 * @param iter Character iterator, used for context-sensitive mappings.
 *             See UCaseContextIterator for details.
 *             If iter==NULL then a context-independent result is returned.
 * @param context Pointer to be passed into iter.
 * @param pString If the mapping result is a string, then the pointer is
 *                written to *pString.
 * @param locale Locale ID for locale-dependent mappings.
 * @param locCache Initialize to 0; may be used to cache the result of parsing
 *                 the locale ID for subsequent calls.
 *                 Can be NULL.
 * @return Output code point or string length, see UCASE_MAX_STRING_LENGTH.
 *
 * @see UCaseContextIterator
 * @see UCASE_MAX_STRING_LENGTH
 * @internal
 ','line_number':229,'multiline':True]
['text':'*
 * @internal
 ','line_number':279,'multiline':True]
['text':' file definitions --------------------------------------------------------- ','line_number':290,'multiline':True]
['text':' format "cAsE" ','line_number':295,'multiline':True]
['text':' indexes into indexes[] ','line_number':301,'multiline':True]
['text':' definitions for 16-bit case properties word ------------------------------ ','line_number':313,'multiline':True]
['text':' 2-bit constants for types of cased characters ','line_number':315,'multiline':True]
['text':' normal characters with cc=0 ','line_number':333,'multiline':True]
['text':' soft-dotted characters with cc=0 ','line_number':334,'multiline':True]
['text':' "above" accents with cc=230 ','line_number':335,'multiline':True]
['text':' other accent character (0<cc!=230) ','line_number':336,'multiline':True]
['text':' no exception: bits 15..7 are a 9-bit signed case mapping delta ','line_number':339,'multiline':True]
['text':' exception: bits 15..5 are an unsigned 11-bit index into the exceptions array ','line_number':351,'multiline':True]
['text':' definitions for 16-bit main exceptions word ------------------------------ ','line_number':356,'multiline':True]
['text':' first 8 bits indicate values in optional slots ','line_number':358,'multiline':True]
['text':' reserved ','line_number':364,'multiline':True]
['text':' reserved ','line_number':365,'multiline':True]
['text':' one past the last slot ','line_number':368,'multiline':True]
['text':' each slot is 2 uint16_t instead of 1 ','line_number':371,'multiline':True]
['text':' reserved: exception bits 11..9 ','line_number':374,'multiline':True]
['text':' UCASE_EXC_DOT_MASK=UCASE_DOT_MASK<<UCASE_EXC_DOT_SHIFT ','line_number':376,'multiline':True]
['text':' normally stored in the main word, but pushed out for larger exception indexes ','line_number':379,'multiline':True]
['text':' "above" accents with cc=230 ','line_number':384,'multiline':True]
['text':' other character (0<cc!=230) ','line_number':385,'multiline':True]
['text':' complex/conditional mappings ','line_number':388,'multiline':True]
['text':' definitions for lengths word for full case mappings ','line_number':392,'multiline':True]
['text':' maximum lengths ','line_number':398,'multiline':True]
['text':' constants for reverse case folding ("unfold") data ','line_number':402,'multiline':True]
