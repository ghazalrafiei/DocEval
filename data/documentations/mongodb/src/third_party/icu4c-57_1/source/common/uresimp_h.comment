['text':'
**********************************************************************
*   Copyright (C) 2000-2015, International Business Machines
*   Corporation and others.  All Rights Reserved.
**********************************************************************
','line_number':1,'multiline':True]
['text':'
 The default minor version and the version separator must be exactly one
 character long.
','line_number':18,'multiline':True]
['text':'
 * Note: If we wanted to make this structure smaller, then we could try
 * to use one UResourceDataEntry pointer for fAlias and fPool, with a separate
 * flag to distinguish whether this struct is for a real bundle with a pool,
 * or for an alias entry for which we won't use the pool after loading.
 ','line_number':38,'multiline':True]
['text':' name of the locale for bundle - still to decide whether it is original or fallback ','line_number':45,'multiline':True]
['text':' path to bundle - used for distinguishing between resources with the same name ','line_number':46,'multiline':True]
['text':'next resource in fallback chain','line_number':47,'multiline':True]
['text':' data for low level access ','line_number':50,'multiline':True]
['text':' A small buffer of free space for fName. The free space is due to struct padding. ','line_number':51,'multiline':True]
['text':' how much is this resource used ','line_number':52,'multiline':True]
['text':' int32_t fHashKey;','line_number':54,'multiline':True]
['text':' for faster access in the hashtable ','line_number':54,'multiline':True]
['text':'tag','line_number':62,'multiline':True]
['text':'for low-level access','line_number':63,'multiline':True]
['text':' for getting the valid locale ','line_number':65,'multiline':True]
['text':' full path to the resource: "zh_TW/CollationElements/Sequence" ','line_number':66,'multiline':True]
['text':' For determining if it's a stack object ','line_number':73,'multiline':True]
['text':' For determining if it's a stack object ','line_number':74,'multiline':True]
['text':'const UResourceBundle *fParentRes;','line_number':78,'multiline':True]
['text':' needed to get the actual locale for a child resource ','line_number':78,'multiline':True]
['text':'*
 * Opens a resource bundle for the locale;
 * if there is not even a base language bundle, then loads the root bundle;
 * never falls back to the default locale.
 *
 * This is used for algorithms that have good pan-Unicode default behavior,
 * such as case mappings, collation, and segmentation (BreakIterator).
 ','line_number':83,'multiline':True]
['text':' Some getters used by the copy constructor ','line_number':94,'multiline':True]
['text':'*
 * If anything was in the RB cache, dump it to the screen.
 * @return TRUE if there was anything into the cache
 ','line_number':98,'multiline':True]
['text':'U_CFUNC void ures_appendResPath(UResourceBundle *resB, const char* toAdd, int32_t lenToAdd);','line_number':104,'multiline':True]
['text':'U_CFUNC void ures_setResPath(UResourceBundle *resB, const char* toAdd);','line_number':105,'multiline':True]
['text':'U_CFUNC void ures_freeResPath(UResourceBundle *resB);','line_number':106,'multiline':True]
['text':' Candidates for export ','line_number':108,'multiline':True]
['text':'*
 * Returns a resource that can be located using the pathToResource argument. One needs optional package, locale
 * and path inside the locale, for example: "/myData/en/zoneStrings/3". Keys and indexes are supported. Keys
 * need to reference data in named structures, while indexes can reference both named and anonymous resources.
 * Features a fill-in parameter. 
 * 
 * Note, this function does NOT have a syntax for specifying items within a tree.  May want to consider a
 * syntax that delineates between package/tree and resource.  
 *
 * @param pathToResource    a path that will lead to the requested resource
 * @param fillIn            if NULL a new UResourceBundle struct is allocated and must be deleted by the caller.
 *                          Alternatively, you can supply a struct to be filled by this function.
 * @param status            fills in the outgoing error code.
 * @return                  a pointer to a UResourceBundle struct. If fill in param was NULL, caller must delete it
 ','line_number':111,'multiline':True]
['text':'*
 * Returns a sub resource that can be located using the pathToResource argument. One needs a path inside 
 * the supplied resource, for example, if you have "en_US" resource bundle opened, you might ask for
 * "zoneStrings/3". Keys and indexes are supported. Keys
 * need to reference data in named structures, while indexes can reference both 
 * named and anonymous resources.
 * Features a fill-in parameter. 
 *
 * @param resourceBundle    a resource
 * @param pathToResource    a path that will lead to the requested resource
 * @param fillIn            if NULL a new UResourceBundle struct is allocated and must be deleted by the caller.
 *                          Alternatively, you can supply a struct to be filled by this function.
 * @param status            fills in the outgoing error code.
 * @return                  a pointer to a UResourceBundle struct. If fill in param was NULL, caller must delete it
 ','line_number':130,'multiline':True]
['text':'*
 * Returns a functionally equivalent locale (considering keywords) for the specified keyword.
 * @param result fillin for the equivalent locale
 * @param resultCapacity capacity of the fillin buffer
 * @param path path to the tree, or NULL for ICU data
 * @param resName top level resource. Example: "collations"
 * @param keyword locale keyword. Example: "collation"
 * @param locid The requested locale
 * @param isAvailable If non-null, pointer to fillin parameter that indicates whether the 
 * requested locale was available. The locale is defined as 'available' if it physically 
 * exists within the specified tree.
 * @param omitDefault if TRUE, omit keyword and value if default. 'de_DE\@collation=standard' -> 'de_DE'
 * @param status error code
 * @return  the actual buffer size needed for the full locale.  If it's greater 
 * than resultCapacity, the returned full name will be truncated and an error code will be returned.
 ','line_number':150,'multiline':True]
['text':'*
 * Given a tree path and keyword, return a string enumeration of all possible values for that keyword.
 * @param path path to the tree, or NULL for ICU data
 * @param keyword a particular keyword to consider, must match a top level resource name 
 * within the tree.
 * @param status error code
 ','line_number':171,'multiline':True]
['text':'*
 * Get a resource with multi-level fallback. Normally only the top level resources will
 * fallback to its parent. This performs fallback on subresources. For example, when a table
 * is defined in a resource bundle and a parent resource bundle, normally no fallback occurs
 * on the sub-resources because the table is defined in the current resource bundle, but this
 * function can perform fallback on the sub-resources of the table.
 * @param resB              a resource
 * @param inKey             a key associated with the requested resource
 * @param fillIn            if NULL a new UResourceBundle struct is allocated and must be deleted by the caller.
 *                          Alternatively, you can supply a struct to be filled by this function.
 * @param status: fills in the outgoing error code
 *                could be <TT>U_MISSING_RESOURCE_ERROR</TT> if the key is not found
 *                could be a non-failing error 
 *                e.g.: <TT>U_USING_FALLBACK_WARNING</TT>,<TT>U_USING_DEFAULT_WARNING </TT>
 * @return                  a pointer to a UResourceBundle struct. If fill in param was NULL, caller must delete it
 ','line_number':182,'multiline':True]
['text':'*
 * Get a String with multi-level fallback. Normally only the top level resources will
 * fallback to its parent. This performs fallback on subresources. For example, when a table
 * is defined in a resource bundle and a parent resource bundle, normally no fallback occurs
 * on the sub-resources because the table is defined in the current resource bundle, but this
 * function can perform fallback on the sub-resources of the table.
 * @param resB              a resource
 * @param inKey             a key associated with the requested resource
 * @param status: fills in the outgoing error code
 *                could be <TT>U_MISSING_RESOURCE_ERROR</TT> if the key is not found
 *                could be a non-failing error 
 *                e.g.: <TT>U_USING_FALLBACK_WARNING</TT>,<TT>U_USING_DEFAULT_WARNING </TT>
 * @return                  a pointer to a UResourceBundle struct. If fill in param was NULL, caller must delete it
 ','line_number':205,'multiline':True]
['text':' __cplusplus ','line_number':235,'multiline':True]
['text':'*
 * Get a version number by key
 * @param resB bundle containing version number
 * @param key the key for the version number
 * @param ver fillin for the version number
 * @param status error code
 ','line_number':237,'multiline':True]
['text':'*
 * Internal function.
 * Return the version number associated with this ResourceBundle as a string.
 *
 * @param resourceBundle The resource bundle for which the version is checked.
 * @return  A version number string as specified in the resource bundle or its parent.
 *          The caller does not own this string.
 * @see ures_getVersion
 ','line_number':251,'multiline':True]
['text':'*
 * Return the name of the Locale associated with this ResourceBundle. This API allows
 * you to query for the real locale of the resource. For example, if you requested 
 * "en_US_CALIFORNIA" and only "en_US" bundle exists, "en_US" will be returned. 
 * For subresources, the locale where this resource comes from will be returned.
 * If fallback has occured, getLocale will reflect this.
 *
 * This internal version avoids deprecated-warnings in ICU code.
 *
 * @param resourceBundle resource bundle in question
 * @param status just for catching illegal arguments
 * @return  A Locale name
 ','line_number':263,'multiline':True]
['text':'URESIMP_H','line_number':280,'multiline':True]
