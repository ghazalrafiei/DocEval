['text':' 
**********************************************************************
*   Copyright (C) 2000-2015, International Business Machines
*   Corporation and others.  All Rights Reserved.
**********************************************************************
*   file name:  ucnvlat1.cpp
*   encoding:   US-ASCII
*   tab size:   8 (not used)
*   indentation:4
*
*   created on: 2000feb07
*   created by: Markus W. Scherer
','line_number':1,'multiline':True]
['text':' control optimizations according to the platform ','line_number':25,'multiline':True]
['text':' ISO 8859-1 --------------------------------------------------------------- ','line_number':28,'multiline':True]
['text':' This is a table-less and callback-less version of ucnv_MBCSSingleToBMPWithOffsets(). ','line_number':30,'multiline':True]
['text':' set up the local pointers ','line_number':41,'multiline':True]
['text':'
     * since the conversion here is 1:1 UChar:uint8_t, we need only one counter
     * for the minimum of the sourceLength and targetCapacity
     ','line_number':49,'multiline':True]
['text':' target will be full ','line_number':57,'multiline':True]
['text':' This loop is unrolled for speed and improved pipelining. ','line_number':63,'multiline':True]
['text':' conversion loop ','line_number':96,'multiline':True]
['text':' write back the updated pointers ','line_number':102,'multiline':True]
['text':' set offsets ','line_number':106,'multiline':True]
['text':' This is a table-less and callback-less version of ucnv_MBCSSingleGetNextUChar(). ','line_number':116,'multiline':True]
['text':' no output because of empty input ','line_number':126,'multiline':True]
['text':' This is a table-less version of ucnv_MBCSSingleFromBMPWithOffsets(). ','line_number':131,'multiline':True]
['text':' set up the local pointers ','line_number':146,'multiline':True]
['text':' Latin-1 ','line_number':155,'multiline':True]
['text':' US-ASCII ','line_number':157,'multiline':True]
['text':' get the converter state from UConverter ','line_number':160,'multiline':True]
['text':' sourceIndex=-1 if the current character began in the previous buffer ','line_number':163,'multiline':True]
['text':'
     * since the conversion here is 1:1 UChar:uint8_t, we need only one counter
     * for the minimum of the sourceLength and targetCapacity
     ','line_number':166,'multiline':True]
['text':' conversion loop ','line_number':175,'multiline':True]
['text':' unroll the loop with the most common case ','line_number':181,'multiline':True]
['text':' were all 16 entries really valid? ','line_number':221,'multiline':True]
['text':' no, return to the first of these 16 ','line_number':223,'multiline':True]
['text':' conversion loop ','line_number':257,'multiline':True]
['text':' convert the Unicode code point ','line_number':260,'multiline':True]
['text':' callback(unassigned) ','line_number':268,'multiline':True]
['text':' test the following code unit ','line_number':272,'multiline':True]
['text':' this codepage does not map supplementary code points ','line_number':277,'multiline':True]
['text':' callback(unassigned) ','line_number':278,'multiline':True]
['text':' this is an unmatched lead code unit (1st surrogate) ','line_number':280,'multiline':True]
['text':' callback(illegal) ','line_number':281,'multiline':True]
['text':' no more input ','line_number':284,'multiline':True]
['text':' this is an unmatched trail code unit (2nd surrogate) ','line_number':289,'multiline':True]
['text':' callback(illegal) ','line_number':290,'multiline':True]
['text':' set offsets since the start ','line_number':298,'multiline':True]
['text':' target is full ','line_number':308,'multiline':True]
['text':' write back the updated pointers ','line_number':312,'multiline':True]
['text':' Convert UTF-8 to Latin-1. Adapted from ucnv_SBCSFromUTF8(). ','line_number':318,'multiline':True]
['text':' set up the local pointers ','line_number':331,'multiline':True]
['text':' get the converter state from the UTF-8 UConverter ','line_number':338,'multiline':True]
['text':' complicated, illegal or unmappable input: fall back to the pivoting implementation ','line_number':352,'multiline':True]
['text':'
     * Make sure that the last byte sequence before sourceLimit is complete
     * or runs into a lead byte.
     * In the conversion loop compare source with sourceLimit only once
     * per multi-byte character.
     * For Latin-1, adjust sourceLimit only for 1 trail byte because
     * the conversion loop handles at most 2-byte sequences.
     ','line_number':358,'multiline':True]
['text':' conversion loop ','line_number':370,'multiline':True]
['text':' convert ASCII ','line_number':375,'multiline':True]
['text':' handle U+0080..U+00FF inline ','line_number':378,'multiline':True]
['text':' complicated, illegal or unmappable input: fall back to the pivoting implementation ','line_number':386,'multiline':True]
['text':' target is full ','line_number':393,'multiline':True]
['text':'
     * The sourceLimit may have been adjusted before the conversion loop
     * to stop before a truncated sequence.
     * If so, then collect the truncated sequence now.
     * For Latin-1, there is at most exactly one lead byte because of the
     * smaller sourceLimit adjustment logic.
     ','line_number':399,'multiline':True]
['text':' write back the updated pointers ','line_number':412,'multiline':True]
['text':' reserved ','line_number':458,'multiline':True]
['text':' US-ASCII ----------------------------------------------------------------- ','line_number':464,'multiline':True]
['text':' This is a table-less version of ucnv_MBCSSingleToBMPWithOffsets(). ','line_number':466,'multiline':True]
['text':' set up the local pointers ','line_number':479,'multiline':True]
['text':' sourceIndex=-1 if the current character began in the previous buffer ','line_number':486,'multiline':True]
['text':'
     * since the conversion here is 1:1 UChar:uint8_t, we need only one counter
     * for the minimum of the sourceLength and targetCapacity
     ','line_number':489,'multiline':True]
['text':' This loop is unrolled for speed and improved pipelining. ','line_number':499,'multiline':True]
['text':' were all 16 entries really valid? ','line_number':514,'multiline':True]
['text':' no, return to the first of these 16 ','line_number':516,'multiline':True]
['text':' conversion loop ','line_number':542,'multiline':True]
['text':' callback(illegal); copy the current bytes to toUBytes[] ','line_number':550,'multiline':True]
['text':' target is full ','line_number':556,'multiline':True]
['text':' set offsets since the start ','line_number':560,'multiline':True]
['text':' write back the updated pointers ','line_number':569,'multiline':True]
['text':' This is a table-less version of ucnv_MBCSSingleGetNextUChar(). ','line_number':575,'multiline':True]
['text':' no output because of empty input ','line_number':597,'multiline':True]
['text':' "Convert" UTF-8 to US-ASCII: Validate and copy. ','line_number':602,'multiline':True]
['text':' no handling of partial UTF-8 characters here, fall back to pivoting ','line_number':614,'multiline':True]
['text':' set up the local pointers ','line_number':619,'multiline':True]
['text':'
     * since the conversion here is 1:1 uint8_t:uint8_t, we need only one counter
     * for the minimum of the sourceLength and targetCapacity
     ','line_number':625,'multiline':True]
['text':' unroll the loop with the most common case ','line_number':634,'multiline':True]
['text':' were all 16 entries really valid? ','line_number':658,'multiline':True]
['text':' no, return to the first of these 16 ','line_number':660,'multiline':True]
['text':' conversion loop ','line_number':670,'multiline':True]
['text':' non-ASCII character, handle in standard converter ','line_number':679,'multiline':True]
['text':' target is full ','line_number':682,'multiline':True]
['text':' write back the updated pointers ','line_number':686,'multiline':True]
['text':' reserved ','line_number':732,'multiline':True]
