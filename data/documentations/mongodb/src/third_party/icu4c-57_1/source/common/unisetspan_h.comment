['text':'
******************************************************************************
*
*   Copyright (C) 2007, International Business Machines
*   Corporation and others.  All Rights Reserved.
*
******************************************************************************
*   file name:  unisetspan.h
*   encoding:   US-ASCII
*   tab size:   8 (not used)
*   indentation:4
*
*   created on: 2007mar01
*   created by: Markus W. Scherer
','line_number':1,'multiline':True]
['text':'
 * Implement span() etc. for a set with strings.
 * Avoid recursion because of its exponential complexity.
 * Instead, try multiple paths at once and track them with an IndexList.
 ','line_number':25,'multiline':True]
['text':'
     * Which span() variant will be used?
     * The object is either built for one variant and used once,
     * or built for all and may be used many times.
     ','line_number':32,'multiline':True]
['text':' Copy constructor. Assumes which==ALL for a frozen set.','line_number':59,'multiline':False]
['text':'
     * Do the strings need to be checked in span() etc.?
     * @return TRUE if strings need to be checked (call span() here),
     *         FALSE if not (use a BMPSet for best performance).
     ','line_number':64,'multiline':True]
['text':' For fast UnicodeSet::contains(c).','line_number':72,'multiline':False]
['text':' Special spanLength byte values.','line_number':84,'multiline':False]
['text':' The spanLength is >=0xfe.','line_number':86,'multiline':False]
['text':' All code points in the string are contained in the parent set.','line_number':88,'multiline':False]
['text':' Add a starting or ending string character to the spanNotSet','line_number':92,'multiline':False]
['text':' so that a character span ends before any string.','line_number':93,'multiline':False]
['text':' Set for span(). Same as parent but without strings.','line_number':101,'multiline':False]
['text':' Set for span(not contained).','line_number':104,'multiline':False]
['text':' Same as spanSet, plus characters that start or end strings.','line_number':105,'multiline':False]
['text':' The strings of the parent set.','line_number':108,'multiline':False]
['text':' Pointer to the UTF-8 string lengths.','line_number':111,'multiline':False]
['text':' Also pointer to further allocated storage for meta data and','line_number':112,'multiline':False]
['text':' UTF-8 string contents as necessary.','line_number':113,'multiline':False]
['text':' Pointer to the part of the (utf8Lengths) memory block that stores','line_number':116,'multiline':False]
['text':' the lengths of span(), spanBack() etc. for each string.','line_number':117,'multiline':False]
['text':' Pointer to the part of the (utf8Lengths) memory block that stores','line_number':120,'multiline':False]
['text':' the UTF-8 versions of the parent set's strings.','line_number':121,'multiline':False]
['text':' Number of bytes for all UTF-8 versions of strings together.','line_number':124,'multiline':False]
['text':' Maximum lengths of relevant strings.','line_number':127,'multiline':False]
['text':' Set up for all variants of span()?','line_number':131,'multiline':False]
['text':' Memory for small numbers and lengths of strings.','line_number':134,'multiline':False]
['text':' For example, for 8 strings:','line_number':135,'multiline':False]
['text':' 8 UTF-8 lengths, 8*4 bytes span lengths, 8*2 3-byte UTF-8 characters','line_number':136,'multiline':False]
['text':' = 112 bytes = int32_t[28].','line_number':137,'multiline':False]
