['text':'
******************************************************************************
*
*   Copyright (C) 1999-2013, International Business Machines
*   Corporation and others.  All Rights Reserved.
*
*****************************************************************************','line_number':1,'multiline':True]
['text':'----------------------------------------------------------------------------
 *
 *       Memory mapped file wrappers for use by the ICU Data Implementation
 *       All of the platform-specific implementation for mapping data files
 *         is here.  The rest of the ICU Data implementation uses only the
 *         wrapper functions.
 *
 *----------------------------------------------------------------------------','line_number':10,'multiline':True]
['text':' Defines _XOPEN_SOURCE for access to POSIX functions.
 * Must be before any other #includes. ','line_number':18,'multiline':True]
['text':' memory-mapping base definitions ------------------------------------------ ','line_number':26,'multiline':True]
['text':'   No memory mapping for 390 batch mode.  Fake it using dll loading.  ','line_number':56,'multiline':True]
['text':' This is inconvienient until we figure out what to do with U_ICUDATA_NAME in utypes.h ','line_number':63,'multiline':True]
['text':'----------------------------------------------------------------------------*
 *                                                                            *
 *   Memory Mapped File support.  Platform dependent implementation of        *
 *                           functions used by the rest of the implementation.*
 *                                                                            *
 *----------------------------------------------------------------------------','line_number':75,'multiline':True]
['text':' Clear the output struct. ','line_number':84,'multiline':True]
['text':' no file access ','line_number':85,'multiline':True]
['text':' nothing to do ','line_number':89,'multiline':True]
['text':' Fill in with info on the result doing the mapping. ','line_number':94,'multiline':True]
['text':'   Output only; any original contents are cleared.  ','line_number':95,'multiline':True]
['text':' File path to be opened/mapped                      ','line_number':96,'multiline':True]
['text':' Clear the output struct.        ','line_number':105,'multiline':True]
['text':' open the input file ','line_number':107,'multiline':True]
['text':' Declare and initialize a security descriptor.
           This is required for multiuser systems on Windows 2000 SP4 and beyond ','line_number':115,'multiline':True]
['text':' give the security descriptor a Null Dacl done using the  "TRUE, (PACL)NULL" here	','line_number':118,'multiline':True]
['text':' Make the security attributes point to the security descriptor ','line_number':120,'multiline':True]
['text':' object uninheritable ','line_number':124,'multiline':True]
['text':' else creating security descriptors can fail when we are on Windows 98,
           and mappingAttributesPtr == NULL for that case. ','line_number':128,'multiline':True]
['text':' create an unnamed Windows file-mapping object for the specified file ','line_number':131,'multiline':True]
['text':' map a view of the file into our address space ','line_number':138,'multiline':True]
['text':' Clear the output struct.        ','line_number':168,'multiline':True]
['text':' determine the length of the file ','line_number':170,'multiline':True]
['text':' open the file ','line_number':176,'multiline':True]
['text':' get a view of the mapping ','line_number':182,'multiline':True]
['text':' no longer needed ','line_number':188,'multiline':True]
['text':' copy of the filestrm.c/T_FileStream_size() implementation ','line_number':217,'multiline':True]
['text':'Changes by Bertrand A. D. doesn't affect the current position
        goes to the end of the file before ftell','line_number':223,'multiline':True]
['text':' Clear the output struct.        ','line_number':237,'multiline':True]
['text':' open the input file ','line_number':238,'multiline':True]
['text':' get the file length ','line_number':244,'multiline':True]
['text':' allocate the memory to hold the file data ','line_number':251,'multiline':True]
['text':' read the file ','line_number':258,'multiline':True]
['text':'  390 specific Library Loading.
     *  This is the only platform left that dynamically loads an ICU Data Library.
     *  All other platforms use .data files when dynamic loading is required, but
     *  this turn out to be awkward to support in 390 batch mode.
     *
     *  The idea here is to hide the fact that 390 is using dll loading from the
     *   rest of ICU, and make it look like there is file loading happening.
     *
     ','line_number':284,'multiline':True]
['text':'------------------------------------------------------------------------------
     *                                                                              
     *  computeDirPath   given a user-supplied path of an item to be opened,             
     *                         compute and return 
     *                            - the full directory path to be used 
     *                              when opening the file.
     *                            - Pointer to null at end of above returned path    
     *
     *                       Parameters:
     *                          path:        input path.  Buffer is not altered.
     *                          pathBuffer:  Output buffer.  Any contents are overwritten.
     *
     *                       Returns:
     *                          Pointer to null termination in returned pathBuffer.
     *
     *                    TODO:  This works the way ICU historically has, but the
     *                           whole data fallback search path is so complicated that
     *                           proabably almost no one will ever really understand it,
     *                           the potential for confusion is large.  (It's not just 
     *                           this one function, but the whole scheme.)
     *                            
     *------------------------------------------------------------------------------','line_number':303,'multiline':True]
['text':' Ptr to last dir separator in input path, or null if none. ','line_number':327,'multiline':True]
['text':' Length of the returned directory path                     ','line_number':328,'multiline':True]
['text':' No user-supplied path.  
            * Copy the ICU_DATA path to the path buffer and return that','line_number':337,'multiline':True]
['text':' there is no icuDataDir either.  Just return the empty pathBuffer. ','line_number':344,'multiline':True]
['text':' User supplied path did contain a directory portion.
        * Copy it to the output path buffer ','line_number':349,'multiline':True]
['text':' must mmap file... for build ','line_number':376,'multiline':True]
['text':' Clear the output struct. ','line_number':381,'multiline':True]
['text':' determine the length of the file ','line_number':383,'multiline':True]
['text':' open the file ','line_number':389,'multiline':True]
['text':' get a view of the mapping ','line_number':395,'multiline':True]
['text':' no longer needed ','line_number':397,'multiline':True]
['text':' ### hack: we still need to get u_getDataDirectory() fixed
            for OS/390 (batch mode - always return "//"? )
            and this here straightened out with LIB_PREFIX and LIB_SUFFIX (both empty?!)
            This is probably due to the strange file system on OS/390.  It's more like
            a database with short entry names than a typical file system. ','line_number':408,'multiline':True]
['text':' U_ICUDATA_NAME should always have the correct name ','line_number':413,'multiline':True]
['text':' BUT FOR BATCH MODE IT IS AN EXCEPTION BECAUSE ','line_number':414,'multiline':True]
['text':' THE FIRST THREE LETTERS ARE PREASSIGNED TO THE ','line_number':415,'multiline':True]
['text':' PROJECT!!!!! ','line_number':416,'multiline':True]
['text':' set up the library name ','line_number':419,'multiline':True]
['text':' we have a data DLL - what kind of lookup do we need here? ','line_number':434,'multiline':True]
['text':' try to find the Table of Contents ','line_number':435,'multiline':True]
['text':' Clear the output struct.        ','line_number':436,'multiline':True]
['text':' failed... so keep looking ','line_number':439,'multiline':True]
['text':' no handle ','line_number':449,'multiline':True]
