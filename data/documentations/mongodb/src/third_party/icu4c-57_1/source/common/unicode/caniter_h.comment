['text':'
 *******************************************************************************
 * Copyright (C) 1996-2014, International Business Machines Corporation and
 * others. All Rights Reserved.
 *******************************************************************************
 ','line_number':1,'multiline':True]
['text':'*
 * \file
 * \brief C++ API: Canonical Iterator
 ','line_number':18,'multiline':True]
['text':'* Should permutation skip characters with combining class zero
 *  Should be either TRUE or FALSE. This is a compile time option
 *  @stable ICU 2.4
 ','line_number':23,'multiline':True]
['text':'*
 * This class allows one to iterate through all the strings that are canonically equivalent to a given
 * string. For example, here are some sample results:
Results for: {LATIN CAPITAL LETTER A WITH RING ABOVE}{LATIN SMALL LETTER D}{COMBINING DOT ABOVE}{COMBINING CEDILLA}
1: \\u0041\\u030A\\u0064\\u0307\\u0327
 = {LATIN CAPITAL LETTER A}{COMBINING RING ABOVE}{LATIN SMALL LETTER D}{COMBINING DOT ABOVE}{COMBINING CEDILLA}
2: \\u0041\\u030A\\u0064\\u0327\\u0307
 = {LATIN CAPITAL LETTER A}{COMBINING RING ABOVE}{LATIN SMALL LETTER D}{COMBINING CEDILLA}{COMBINING DOT ABOVE}
3: \\u0041\\u030A\\u1E0B\\u0327
 = {LATIN CAPITAL LETTER A}{COMBINING RING ABOVE}{LATIN SMALL LETTER D WITH DOT ABOVE}{COMBINING CEDILLA}
4: \\u0041\\u030A\\u1E11\\u0307
 = {LATIN CAPITAL LETTER A}{COMBINING RING ABOVE}{LATIN SMALL LETTER D WITH CEDILLA}{COMBINING DOT ABOVE}
5: \\u00C5\\u0064\\u0307\\u0327
 = {LATIN CAPITAL LETTER A WITH RING ABOVE}{LATIN SMALL LETTER D}{COMBINING DOT ABOVE}{COMBINING CEDILLA}
6: \\u00C5\\u0064\\u0327\\u0307
 = {LATIN CAPITAL LETTER A WITH RING ABOVE}{LATIN SMALL LETTER D}{COMBINING CEDILLA}{COMBINING DOT ABOVE}
7: \\u00C5\\u1E0B\\u0327
 = {LATIN CAPITAL LETTER A WITH RING ABOVE}{LATIN SMALL LETTER D WITH DOT ABOVE}{COMBINING CEDILLA}
8: \\u00C5\\u1E11\\u0307
 = {LATIN CAPITAL LETTER A WITH RING ABOVE}{LATIN SMALL LETTER D WITH CEDILLA}{COMBINING DOT ABOVE}
9: \\u212B\\u0064\\u0307\\u0327
 = {ANGSTROM SIGN}{LATIN SMALL LETTER D}{COMBINING DOT ABOVE}{COMBINING CEDILLA}
10: \\u212B\\u0064\\u0327\\u0307
 = {ANGSTROM SIGN}{LATIN SMALL LETTER D}{COMBINING CEDILLA}{COMBINING DOT ABOVE}
11: \\u212B\\u1E0B\\u0327
 = {ANGSTROM SIGN}{LATIN SMALL LETTER D WITH DOT ABOVE}{COMBINING CEDILLA}
12: \\u212B\\u1E11\\u0307
 = {ANGSTROM SIGN}{LATIN SMALL LETTER D WITH CEDILLA}{COMBINING DOT ABOVE}
 *<br>Note: the code is intended for use with small strings, and is not suitable for larger ones,
 * since it has not been optimized for that situation.
 * Note, CanonicalIterator is not intended to be subclassed.
 * @author M. Davis
 * @author C++ port by V. Weinstein
 * @stable ICU 2.4
 ','line_number':37,'multiline':True]
['text':'*
     * Construct a CanonicalIterator object
     * @param source    string to get results for
     * @param status    Fill-in parameter which receives the status of this operation.
     * @stable ICU 2.4
     ','line_number':74,'multiline':True]
['text':'* Destructor
     *  Cleans pieces
     * @stable ICU 2.4
     ','line_number':82,'multiline':True]
['text':'*
     * Gets the NFD form of the current source we are iterating over.
     * @return gets the source: NOTE: it is the NFD form of source
     * @stable ICU 2.4
     ','line_number':88,'multiline':True]
['text':'*
     * Resets the iterator so that one can start again from the beginning.
     * @stable ICU 2.4
     ','line_number':95,'multiline':True]
['text':'*
     * Get the next canonically equivalent string.
     * <br><b>Warning: The strings are not guaranteed to be in any particular order.</b>
     * @return the next string that is canonically equivalent. A bogus string is returned when
     * the iteration is done.
     * @stable ICU 2.4
     ','line_number':101,'multiline':True]
['text':'*
     * Set a new source for this iterator. Allows object reuse.
     * @param newSource     the source string to iterate against. This allows the same iterator to be used
     *                     while changing the source string, saving object creation.
     * @param status        Fill-in parameter which receives the status of this operation.
     * @stable ICU 2.4
     ','line_number':110,'multiline':True]
['text':'*
     * Dumb recursive implementation of permutation.
     * TODO: optimize
     * @param source     the string to find permutations for
     * @param skipZeros  determine if skip zeros
     * @param result     the results in a set.
     * @param status       Fill-in parameter which receives the status of this operation.
     * @internal
     ','line_number':120,'multiline':True]
['text':' U_HIDE_INTERNAL_API ','line_number':130,'multiline':True]
['text':'*
     * ICU "poor man's RTTI", returns a UClassID for this class.
     *
     * @stable ICU 2.2
     ','line_number':132,'multiline':True]
['text':'*
     * ICU "poor man's RTTI", returns a UClassID for the actual class.
     *
     * @stable ICU 2.2
     ','line_number':139,'multiline':True]
['text':' ===================== PRIVATES ==============================','line_number':147,'multiline':False]
['text':' private default constructor','line_number':148,'multiline':False]
['text':'*
     * Copy constructor. Private for now.
     * @internal
     ','line_number':152,'multiline':True]
['text':'*
     * Assignment operator. Private for now.
     * @internal
     ','line_number':158,'multiline':True]
['text':' fields','line_number':164,'multiline':False]
['text':' 2 dimensional array holds the pieces of the string with','line_number':168,'multiline':False]
['text':' their different canonically equivalent representations','line_number':169,'multiline':False]
['text':' current is used in iterating to combine pieces','line_number':174,'multiline':False]
['text':' transient fields','line_number':178,'multiline':False]
['text':' we have a segment, in NFD. Find all the strings that are canonically equivalent to it.','line_number':184,'multiline':False]
['text':'private String[] getEquivalents(String segment)','line_number':185,'multiline':False]
['text':'Set getEquivalents2(String segment);','line_number':187,'multiline':False]
['text':'Hashtable *getEquivalents2(const UnicodeString &segment, int32_t segLen, UErrorCode &status);','line_number':189,'multiline':False]
['text':'*
     * See if the decomposition of cp2 is at segment starting at segmentPos
     * (with canonical rearrangment!)
     * If so, take the remainder, and return the equivalents
     ','line_number':191,'multiline':True]
['text':'Set extract(int comp, String segment, int segmentPos, StringBuffer buffer);','line_number':196,'multiline':False]
['text':'Hashtable *extract(UChar32 comp, const UnicodeString &segment, int32_t segLen, int32_t segmentPos, UErrorCode &status);','line_number':198,'multiline':False]
['text':' #if !UCONFIG_NO_NORMALIZATION ','line_number':206,'multiline':True]
