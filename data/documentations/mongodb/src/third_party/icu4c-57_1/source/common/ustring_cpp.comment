['text':'
******************************************************************************
*
*   Copyright (C) 1998-2016, International Business Machines
*   Corporation and others.  All Rights Reserved.
*
******************************************************************************
*
* File ustring.cpp
*
* Modification History:
*
*   Date        Name        Description
*   12/07/98    bertrand    Creation.
******************************************************************************
','line_number':1,'multiline':True]
['text':' ANSI string.h - style functions ------------------------------------------ ','line_number':27,'multiline':True]
['text':' U+ffff is the highest BMP code point, the highest one that fits into a 16-bit UChar ','line_number':29,'multiline':True]
['text':' Forward binary string search functions ----------------------------------- ','line_number':32,'multiline':True]
['text':'
 * Test if a substring match inside a string is at code point boundaries.
 * All pointers refer to the same buffer.
 * The limit pointer may be NULL, all others must be real pointers.
 ','line_number':34,'multiline':True]
['text':' the leading edge of the match is in the middle of a surrogate pair ','line_number':42,'multiline':True]
['text':' the trailing edge of the match is in the middle of a surrogate pair ','line_number':46,'multiline':True]
['text':' both strings are NUL-terminated ','line_number':68,'multiline':True]
['text':' the substring consists of a single, non-surrogate BMP code point ','line_number':73,'multiline':True]
['text':' found first substring UChar, compare rest ','line_number':79,'multiline':True]
['text':' well-formed match ','line_number':85,'multiline':True]
['text':' no match because surrogate pair is split ','line_number':87,'multiline':True]
['text':' no match, and none possible after s ','line_number':91,'multiline':True]
['text':' no match ','line_number':94,'multiline':True]
['text':' not found ','line_number':102,'multiline':True]
['text':' get sub[0] to search for it fast ','line_number':113,'multiline':True]
['text':' the substring consists of a single, non-surrogate BMP code point ','line_number':119,'multiline':True]
['text':' s is NUL-terminated ','line_number':124,'multiline':True]
['text':' found first substring UChar, compare rest ','line_number':127,'multiline':True]
['text':' well-formed match ','line_number':133,'multiline':True]
['text':' no match because surrogate pair is split ','line_number':135,'multiline':True]
['text':' no match, and none possible after s ','line_number':139,'multiline':True]
['text':' no match ','line_number':142,'multiline':True]
['text':' subLength was decremented above ','line_number':152,'multiline':True]
['text':' s is shorter than sub ','line_number':154,'multiline':True]
['text':' the substring must start before preLimit ','line_number':159,'multiline':True]
['text':' found first substring UChar, compare rest ','line_number':165,'multiline':True]
['text':' well-formed match ','line_number':171,'multiline':True]
['text':' no match because surrogate pair is split ','line_number':173,'multiline':True]
['text':' no match ','line_number':177,'multiline':True]
['text':' not found ','line_number':186,'multiline':True]
['text':' make sure to not find half of a surrogate pair ','line_number':198,'multiline':True]
['text':' trivial search for a BMP code point ','line_number':203,'multiline':True]
['text':' find BMP code point ','line_number':219,'multiline':True]
['text':' find supplementary code point as surrogate pair ','line_number':222,'multiline':True]
['text':' not a Unicode code point, not findable ','line_number':232,'multiline':True]
['text':' no string ','line_number':240,'multiline':True]
['text':' make sure to not find half of a surrogate pair ','line_number':242,'multiline':True]
['text':' trivial search for a BMP code point ','line_number':245,'multiline':True]
['text':' find BMP code point ','line_number':259,'multiline':True]
['text':' too short for a surrogate pair ','line_number':262,'multiline':True]
['text':' find supplementary code point as surrogate pair ','line_number':265,'multiline':True]
['text':' -1 so that we do not need a separate check for the trail unit ','line_number':266,'multiline':True]
['text':' not a Unicode code point, not findable ','line_number':276,'multiline':True]
['text':' Backward binary string search functions ---------------------------------- ','line_number':281,'multiline':True]
['text':'
     * This implementation is more lazy than the one for u_strFindFirst():
     * There is no special search code for NUL-terminated strings.
     * It does not seem to be worth it for searching substrings to
     * search forward and find all matches like in u_strrchr() and similar.
     * Therefore, we simply get both string lengths and search backward.
     *
     * markus 2002oct23
     ','line_number':296,'multiline':True]
['text':' get sub[subLength-1] to search for it fast ','line_number':313,'multiline':True]
['text':' the substring consists of a single, non-surrogate BMP code point ','line_number':319,'multiline':True]
['text':' subLength was decremented above ','line_number':327,'multiline':True]
['text':' s is shorter than sub ','line_number':329,'multiline':True]
['text':' the substring must start no later than s+subLength ','line_number':335,'multiline':True]
['text':' found last substring UChar, compare rest ','line_number':341,'multiline':True]
['text':' well-formed match ','line_number':347,'multiline':True]
['text':' no match because surrogate pair is split ','line_number':349,'multiline':True]
['text':' no match ','line_number':353,'multiline':True]
['text':' not found ','line_number':359,'multiline':True]
['text':' make sure to not find half of a surrogate pair ','line_number':371,'multiline':True]
['text':' trivial search for a BMP code point ','line_number':377,'multiline':True]
['text':' find BMP code point ','line_number':393,'multiline':True]
['text':' find supplementary code point as surrogate pair ','line_number':396,'multiline':True]
['text':' not a Unicode code point, not findable ','line_number':407,'multiline':True]
['text':' no string ','line_number':415,'multiline':True]
['text':' make sure to not find half of a surrogate pair ','line_number':417,'multiline':True]
['text':' trivial search for a BMP code point ','line_number':420,'multiline':True]
['text':' find BMP code point ','line_number':434,'multiline':True]
['text':' too short for a surrogate pair ','line_number':437,'multiline':True]
['text':' find supplementary code point as surrogate pair ','line_number':440,'multiline':True]
['text':' not a Unicode code point, not findable ','line_number':451,'multiline':True]
['text':' Tokenization functions --------------------------------------------------- ','line_number':456,'multiline':True]
['text':'
 * Match each code point in a string against each code point in the matchSet.
 * Return the index of the first string code point that
 * is (polarity==TRUE) or is not (FALSE) contained in the matchSet.
 * Return -(string length)-1 if there is no such code point.
 ','line_number':458,'multiline':True]
['text':' first part of matchSet contains only BMP code points ','line_number':470,'multiline':True]
['text':' second part of matchSet contains BMP and supplementary code points ','line_number':476,'multiline':True]
['text':' one matches ','line_number':488,'multiline':True]
['text':' none matches ','line_number':497,'multiline':True]
['text':'
             * No need to check for string length before U16_IS_TRAIL
             * because c2 could at worst be the terminating NUL.
             ','line_number':500,'multiline':True]
['text':' unpaired trail surrogate ','line_number':508,'multiline':True]
['text':' one matches ','line_number':515,'multiline':True]
['text':' none matches ','line_number':525,'multiline':True]
['text':' wish C had continue with labels like Java... ','line_number':529,'multiline':True]
['text':' Didn't find it. ','line_number':532,'multiline':True]
['text':' Search for a codepoint in a string that matches one of the matchSet codepoints. ','line_number':536,'multiline':True]
['text':' Search for a codepoint in a string that matches one of the matchSet codepoints. ','line_number':548,'multiline':True]
['text':' == u_strlen(string) ','line_number':556,'multiline':True]
['text':' Search for a codepoint in a string that does not match one of the matchSet codepoints. ','line_number':560,'multiline':True]
['text':' == u_strlen(string) ','line_number':568,'multiline':True]
['text':' ----- Text manipulation functions --- ','line_number':572,'multiline':True]
['text':' If saveState is NULL, the user messed up. ','line_number':583,'multiline':True]
['text':' Set to "src" in case there are no delimiters ','line_number':586,'multiline':True]
['text':' src == NULL && *saveState == NULL ','line_number':592,'multiline':True]
['text':' This shouldn't happen. We already finished tokenizing. ','line_number':593,'multiline':True]
['text':' Skip initial delimiters ','line_number':597,'multiline':True]
['text':' Create a token ','line_number':604,'multiline':True]
['text':' Return the last token ','line_number':610,'multiline':True]
['text':' No tokens were found. Only delimiters were left. ','line_number':616,'multiline':True]
['text':' Miscellaneous functions -------------------------------------------------- ','line_number':622,'multiline':True]
['text':' save a pointer to start of dst ','line_number':628,'multiline':True]
['text':' To end of first string          ','line_number':630,'multiline':True]
['text':' copy string 2 over              ','line_number':633,'multiline':True]
['text':' save a pointer to start of dst ','line_number':645,'multiline':True]
['text':' To end of first string          ','line_number':647,'multiline':True]
['text':' copy string 2 over              ','line_number':650,'multiline':True]
['text':' ----- Text property functions --- ','line_number':665,'multiline':True]
['text':' setup for fix-up ','line_number':690,'multiline':True]
['text':' compare identical prefixes - they do not need to be fixed up ','line_number':694,'multiline':True]
['text':' strcmp style, both NUL-terminated ','line_number':696,'multiline':True]
['text':' setup for fix-up ','line_number':714,'multiline':True]
['text':' special handling for strncmp, assume length1==length2>=0 but also check for NUL ','line_number':717,'multiline':True]
['text':' both lengths are same, check only one limit ','line_number':725,'multiline':True]
['text':' setup for fix-up ','line_number':742,'multiline':True]
['text':' use length1 here, too, to enforce assumption ','line_number':743,'multiline':True]
['text':' memcmp/UnicodeString style, both length-specified ','line_number':745,'multiline':True]
['text':' limit1=start1+min(lenght1, length2) ','line_number':755,'multiline':True]
['text':' length1>length2 ','line_number':762,'multiline':True]
['text':' check pseudo-limit ','line_number':772,'multiline':True]
['text':' setup for fix-up ','line_number':786,'multiline':True]
['text':' if both values are in or above the surrogate range, fix them up ','line_number':791,'multiline':True]
['text':' subtract 0x2800 from BMP code points to make them smaller than supplementary ones ','line_number':793,'multiline':True]
['text':' part of a surrogate pair, leave >=d800 ','line_number':798,'multiline':True]
['text':' BMP code point - may be surrogate code point - make <d800 ','line_number':800,'multiline':True]
['text':' part of a surrogate pair, leave >=d800 ','line_number':808,'multiline':True]
['text':' BMP code point - may be surrogate code point - make <d800 ','line_number':810,'multiline':True]
['text':' now c1 and c2 are in the requested (code unit or code point) order ','line_number':815,'multiline':True]
['text':'
 * Compare two strings as presented by UCharIterators.
 * Use code unit or code point order.
 * When the function returns, it is undefined where the iterators
 * have stopped.
 ','line_number':819,'multiline':True]
['text':' argument checking ','line_number':829,'multiline':True]
['text':' bad arguments ','line_number':831,'multiline':True]
['text':' identical iterators ','line_number':834,'multiline':True]
['text':' reset iterators to start? ','line_number':837,'multiline':True]
['text':' compare identical prefixes - they do not need to be fixed up ','line_number':841,'multiline':True]
['text':' if both values are in or above the surrogate range, fix them up ','line_number':853,'multiline':True]
['text':' subtract 0x2800 from BMP code points to make them smaller than supplementary ones ','line_number':855,'multiline':True]
['text':' part of a surrogate pair, leave >=d800 ','line_number':860,'multiline':True]
['text':' BMP code point - may be surrogate code point - make <d800 ','line_number':862,'multiline':True]
['text':' part of a surrogate pair, leave >=d800 ','line_number':870,'multiline':True]
['text':' BMP code point - may be surrogate code point - make <d800 ','line_number':872,'multiline':True]
['text':' now c1 and c2 are in the requested (code unit or code point) order ','line_number':877,'multiline':True]
['text':'
 * u_strCompareIter() does not leave the iterators _on_ the different units.
 * This is possible but would cost a few extra indirect function calls to back
 * up if the last unit (c1 or c2 respectively) was >=0.
 *
 * Consistently leaving them _behind_ the different units is not an option
 * because the current "unit" is the end of the string if that is reached,
 * and in such a case the iterator does not move.
 * For example, when comparing "ab" with "abc", both iterators rest _on_ the end
 * of their strings. Calling previous() on each does not move them to where
 * the comparison fails.
 *
 * So the simplest semantics is to not define where the iterators end up.
 *
 * The following fragment is part of what would need to be done for backing up.
 ','line_number':882,'multiline':True]
['text':' iff a surrogate is part of a surrogate pair, leave >=d800 ','line_number':899,'multiline':True]
['text':' lead surrogate code point - make <d800 ','line_number':902,'multiline':True]
['text':' ==c1 ','line_number':907,'multiline':True]
['text':' trail surrogate code point - make <d800 ','line_number':909,'multiline':True]
['text':' go back to behind where the difference is ','line_number':912,'multiline':True]
['text':' 0xe000<=c1<=0xffff ','line_number':914,'multiline':True]
['text':' BMP code point - make <d800 ','line_number':915,'multiline':True]
['text':' argument checking ','line_number':925,'multiline':True]
['text':' String compare in code point order - u_strcmp() compares in code unit order. ','line_number':932,'multiline':True]
['text':' save a pointer to start of dst ','line_number':967,'multiline':True]
['text':' copy string 2 over              ','line_number':969,'multiline':True]
['text':' save a pointer to start of dst ','line_number':980,'multiline':True]
['text':' copy string 2 over ','line_number':982,'multiline':True]
['text':' length==-1 ','line_number':1024,'multiline':True]
['text':'
             * sufficient to look ahead one because of UTF-16;
             * safe to look ahead one because at worst that would be the terminating NUL
             ','line_number':1033,'multiline':True]
['text':' s is NUL-terminated ','line_number':1056,'multiline':True]
['text':' count code points until they exceed ','line_number':1059,'multiline':True]
['text':' length>=0 known ','line_number':1073,'multiline':True]
['text':' s contains at least (length+1)/2 code points: <=2 UChars per cp ','line_number':1077,'multiline':True]
['text':' check if s does not even contain enough UChars ','line_number':1082,'multiline':True]
['text':' there are maxSupplementary=length-number more UChars than asked-for code points ','line_number':1087,'multiline':True]
['text':'
         * count code points until they exceed and also check that there are
         * no more than maxSupplementary supplementary code points (UChar pairs)
         ','line_number':1089,'multiline':True]
['text':' too many pairs - too few code points ','line_number':1104,'multiline':True]
['text':' u_unescape & support fns ------------------------------------------------- ','line_number':1165,'multiline':True]
['text':' This map must be in ASCENDING ORDER OF THE ESCAPE CODE ','line_number':1167,'multiline':True]
['text':'"   0x22, 0x22 ','line_number':1169,'multiline':True]
['text':''   0x27, 0x27 ','line_number':1170,'multiline':True]
['text':'?   0x3F, 0x3F ','line_number':1171,'multiline':True]
['text':'\   0x5C, 0x5C ','line_number':1172,'multiline':True]
['text':'a','line_number':1173,'multiline':True]
['text':'b','line_number':1174,'multiline':True]
['text':'e','line_number':1175,'multiline':True]
['text':'f','line_number':1176,'multiline':True]
['text':'n','line_number':1177,'multiline':True]
['text':'r','line_number':1178,'multiline':True]
['text':'t','line_number':1179,'multiline':True]
['text':'v','line_number':1180,'multiline':True]
['text':' Convert one octal digit to a numeric value 0..7, or -1 on failure ','line_number':1184,'multiline':True]
['text':' Convert one hex digit to a numeric value 0..F, or -1 on failure ','line_number':1192,'multiline':True]
['text':' Parse a single escape sequence.  Although this method deals in
 * UChars, it does not use C++ or UnicodeString.  This allows it to
 * be used from C contexts. ','line_number':1206,'multiline':True]
['text':' Check that offset is in range ','line_number':1226,'multiline':True]
['text':' Fetch first UChar after '\\' ','line_number':1231,'multiline':True]
['text':' Convert hexadecimal and octal escapes ','line_number':1234,'multiline':True]
['text':''u'','line_number':1236,'multiline':True]
['text':''U'','line_number':1239,'multiline':True]
['text':''x'','line_number':1242,'multiline':True]
['text':'{','line_number':1244,'multiline':True]
['text':' Already have first octal digit ','line_number':1257,'multiline':True]
['text':'}','line_number':1278,'multiline':True]
['text':' If an escape sequence specifies a lead surrogate, see if
         * there is a trail surrogate after it, either as an escape or
         * as a literal.  If so, join them up into a supplementary.
         ','line_number':1286,'multiline':True]
['text':''\\'','line_number':1293,'multiline':True]
['text':' Convert C-style escapes in table ','line_number':1304,'multiline':True]
['text':' Map \cX to control-X: X & 0x1F ','line_number':1313,'multiline':True]
['text':''c'','line_number':1314,'multiline':True]
['text':' [sic] ','line_number':1320,'multiline':True]
['text':' If no special forms are recognized, then consider
     * the backslash to generically escape the next character.
     * Deal with surrogate pairs. ','line_number':1326,'multiline':True]
['text':' Invalid escape sequence ','line_number':1339,'multiline':True]
['text':' Reset to initial value ','line_number':1340,'multiline':True]
['text':' u_unescapeAt() callback to return a UChar from a char* ','line_number':1344,'multiline':True]
['text':' It would be more efficient to access the invariant tables
     * directly but there is no API for that. ','line_number':1348,'multiline':True]
['text':' Append an escape-free segment of the text; used by u_unescape() ','line_number':1354,'multiline':True]
['text':' Do an invariant conversion of char* -> UChar*, with escape parsing ','line_number':1366,'multiline':True]
['text':' '\\' intentionally written as compiler-specific
         * character constant to correspond to compiler-specific
         * char* constants. ','line_number':1374,'multiline':True]
['text':' advance past '\\' ','line_number':1387,'multiline':True]
['text':' advance past escape seq. ','line_number':1392,'multiline':True]
['text':' NUL-termination of strings ----------------------------------------------- ','line_number':1422,'multiline':True]
['text':'*
 * NUL-terminate a string no matter what its type.
 * Set warning and error codes accordingly.
 ','line_number':1424,'multiline':True]
['text':' not a public function, so no complete argument checking ','line_number':1430,'multiline':True]
['text':' assume that the caller handles this ','line_number':1433,'multiline':True]
['text':' NUL-terminate the string, the NUL fits ','line_number':1435,'multiline':True]
['text':' unset the not-terminated warning but leave all others ','line_number':1437,'multiline':True]
['text':' unable to NUL-terminate, but the string itself fit - set a warning code ','line_number':1442,'multiline':True]
['text':' length>destCapacity ','line_number':1444,'multiline':True]
['text':' even the string itself did not fit - set an error code ','line_number':1445,'multiline':True]
['text':' Compute the hash code for a string -------------------------------------- ***','line_number':1474,'multiline':False]
['text':' Moved here from uhash.c so that UnicodeString::hashCode() does not depend','line_number':1476,'multiline':False]
['text':' on UHashtable code.','line_number':1477,'multiline':False]
['text':'
  Compute the hash by iterating sparsely over about 32 (up to 63)
  characters spaced evenly through the string.  For each character,
  multiply the previous hash value by a prime number and add the new
  character in, like a linear congruential random number generator,
  producing a pseudorandom deterministic value well distributed over
  the output range. [LIU]
','line_number':1479,'multiline':True]
['text':' Used by UnicodeString to compute its hashcode - Not public API. ','line_number':1502,'multiline':True]
