['text':'
*******************************************************************************
*
*   Copyright (C) 2009-2014, International Business Machines
*   Corporation and others.  All Rights Reserved.
*
*******************************************************************************
*   file name:  normalizer2impl.cpp
*   encoding:   US-ASCII
*   tab size:   8 (not used)
*   indentation:4
*
*   created on: 2009nov22
*   created by: Markus W. Scherer
','line_number':1,'multiline':True]
['text':' ReorderingBuffer -------------------------------------------------------- ***','line_number':36,'multiline':False]
['text':' getBuffer() already did str.setToBogus()','line_number':42,'multiline':False]
['text':' Set reorderStart after the last code point with cc<=1 if there is one.','line_number':54,'multiline':False]
['text':' Ok if not a code point boundary.','line_number':103,'multiline':False]
['text':' insert first code point','line_number':112,'multiline':False]
['text':' s must be in NFD, otherwise we need to use getCC().','line_number':116,'multiline':False]
['text':' getBuffer() already did str.setToBogus()','line_number':193,'multiline':False]
['text':' Inserts c somewhere before the last character.','line_number':229,'multiline':False]
['text':' Requires 0<cc<lastCC which implies reorderStart<limit.','line_number':230,'multiline':False]
['text':' insert c at codePointLimit, after the character with prevCC<=cc','line_number':233,'multiline':False]
['text':' Normalizer2Impl --------------------------------------------------------- ***','line_number':245,'multiline':False]
['text':' contains UnicodeSet *','line_number':252,'multiline':False]
['text':' Build tccc180[].','line_number':278,'multiline':False]
['text':' gennorm2 enforces lccc=0 for c<MIN_CCC_LCCC_CP=U+0300.','line_number':279,'multiline':False]
['text':' one byte per 0x100 code points','line_number':283,'multiline':False]
['text':' yesYes and Hangul LV/LVT have ccc=tccc=0','line_number':305,'multiline':False]
['text':' tccc from yesNo','line_number':307,'multiline':False]
['text':' Range of code points with same-norm16-value algorithmic decompositions.','line_number':319,'multiline':False]
['text':' They might have different non-zero FCD16 values.','line_number':320,'multiline':False]
['text':' namespace','line_number':344,'multiline':False]
['text':' add the start code point to the USet ','line_number':356,'multiline':True]
['text':' Range of code points with same-norm16-value algorithmic decompositions.','line_number':361,'multiline':False]
['text':' They might have different non-zero FCD16 values.','line_number':362,'multiline':False]
['text':'end','line_number':376,'multiline':True]
['text':'value','line_number':376,'multiline':True]
['text':' add the start code point to the USet ','line_number':377,'multiline':True]
['text':'context','line_number':384,'multiline':True]
['text':' add the start code point of each same-value range of each trie ','line_number':392,'multiline':True]
['text':'errorCode','line_number':398,'multiline':True]
['text':' add the start code point of each same-value range of each trie ','line_number':399,'multiline':True]
['text':' add Hangul LV syllables and LV+1 because of skippables ','line_number':403,'multiline':True]
['text':' add Hangul+1 to continue with other properties ','line_number':408,'multiline':True]
['text':' add the start code point of each same-value range of the canonical iterator data trie ','line_number':413,'multiline':True]
['text':' currently only used for the SEGMENT_STARTER property','line_number':415,'multiline':False]
['text':' Make some effort to support NUL-terminated strings reasonably.','line_number':425,'multiline':False]
['text':' Take the part of the fast quick check loop that does not look up','line_number':426,'multiline':False]
['text':' data and check the first part of the string.','line_number':427,'multiline':False]
['text':' After this prefix, determine the string length to simplify the rest','line_number':428,'multiline':False]
['text':' of the code.','line_number':429,'multiline':False]
['text':' Back out the last character for full processing.','line_number':433,'multiline':False]
['text':' Copy this prefix.','line_number':434,'multiline':False]
['text':' Dual functionality:','line_number':475,'multiline':False]
['text':' buffer!=NULL: normalize','line_number':476,'multiline':False]
['text':' buffer==NULL: isNormalized/spanQuickCheckYes','line_number':477,'multiline':False]
['text':' only for quick check','line_number':495,'multiline':False]
['text':' count code units below the minimum or with irrelevant data for the quick check','line_number':500,'multiline':False]
['text':' trail surrogate ','line_number':514,'multiline':True]
['text':' copy these code units all at once','line_number':527,'multiline':False]
['text':' Check one above-minimum, relevant code point.','line_number':542,'multiline':False]
['text':' "no" or cc out of order','line_number':559,'multiline':False]
['text':' Decompose a short piece of text which is likely to contain characters that','line_number':565,'multiline':False]
['text':' fail the quick check loop and/or where the quick check loop's overhead','line_number':566,'multiline':False]
['text':' is unlikely to be amortized.','line_number':567,'multiline':False]
['text':' Called by the compose() and makeFCD() implementations.','line_number':568,'multiline':False]
['text':' Only loops for 1:1 algorithmic mappings.','line_number':586,'multiline':False]
['text':' get the decomposition and the lead and trail cc's','line_number':588,'multiline':False]
['text':' c does not decompose','line_number':590,'multiline':False]
['text':' Hangul syllable: decompose algorithmically','line_number':593,'multiline':False]
['text':' c decomposes, get everything from the variable-length extra data','line_number':600,'multiline':False]
['text':' c does not decompose','line_number':622,'multiline':False]
['text':' Hangul syllable: decompose algorithmically','line_number':625,'multiline':False]
['text':' c decomposes, get everything from the variable-length extra data','line_number':634,'multiline':False]
['text':' The capacity of the buffer must be 30=MAPPING_LENGTH_MASK-1','line_number':642,'multiline':False]
['text':' so that a raw mapping fits that consists of one unit ("rm0")','line_number':643,'multiline':False]
['text':' plus all but the first two code units of the normal mapping.','line_number':644,'multiline':False]
['text':' The maximum length of a normal mapping is 31=MAPPING_LENGTH_MASK.','line_number':645,'multiline':False]
['text':' We do not loop in this method because an algorithmic mapping itself','line_number':648,'multiline':False]
['text':' becomes a final result rather than having to be decomposed recursively.','line_number':649,'multiline':False]
['text':' c does not decompose','line_number':652,'multiline':False]
['text':' Hangul syllable: decompose algorithmically','line_number':655,'multiline':False]
['text':' c decomposes, get everything from the variable-length extra data','line_number':665,'multiline':False]
['text':' length of normal mapping','line_number':668,'multiline':False]
['text':' Read the raw mapping from before the firstUnit and before the optional ccc/lccc word.','line_number':670,'multiline':False]
['text':' Bit 7=MAPPING_HAS_CCC_LCCC_WORD','line_number':671,'multiline':False]
['text':' Copy the normal mapping and replace its first two code units with rm0.','line_number':678,'multiline':False]
['text':' Just merge the strings at the boundary.','line_number':701,'multiline':False]
['text':' appendZeroCC() needs limit!=NULL','line_number':709,'multiline':False]
['text':' Note: hasDecompBoundary() could be implemented as aliases to','line_number':718,'multiline':False]
['text':' hasFCDBoundaryBefore() and hasFCDBoundaryAfter()','line_number':719,'multiline':False]
['text':' at the cost of building the FCD trie for a decomposition normalizer.','line_number':720,'multiline':False]
['text':' ccc!=0','line_number':730,'multiline':False]
['text':' c decomposes, get everything from the variable-length extra data','line_number':734,'multiline':False]
['text':' decomp after-boundary: same as hasFCDBoundaryAfter(),','line_number':741,'multiline':False]
['text':' fcd16<=1 || trailCC==0','line_number':742,'multiline':False]
['text':' trailCC>1','line_number':744,'multiline':False]
['text':' trailCC==0','line_number':747,'multiline':False]
['text':' if(trailCC==1) test leadCC==0, same as checking for before-boundary','line_number':749,'multiline':False]
['text':' TRUE if leadCC==0 (hasFCDBoundaryBefore())','line_number':751,'multiline':False]
['text':'
 * Finds the recomposition result for
 * a forward-combining "lead" character,
 * specified with a pointer to its compositions list,
 * and a backward-combining "trail" character.
 *
 * If the lead and trail characters combine, then this function returns
 * the following "compositeAndFwd" value:
 * Bits 21..1  composite character
 * Bit      0  set if the composite is a forward-combining starter
 * otherwise it returns -1.
 *
 * The compositions list has (trail, compositeAndFwd) pair entries,
 * encoded as either pairs or triples of 16-bit units.
 * The last entry has the high bit of its first unit set.
 *
 * The list is sorted by ascending trail characters (there are no duplicates).
 * A linear search is used.
 *
 * See normalizer2impl.h for a more detailed description
 * of the compositions list format.
 ','line_number':757,'multiline':True]
['text':' trail character is 0..33FF','line_number':782,'multiline':False]
['text':' result entry may have 2 or 3 units','line_number':783,'multiline':False]
['text':' trail character is 3400..10FFFF','line_number':796,'multiline':False]
['text':' result entry has 3 units','line_number':797,'multiline':False]
['text':'*
  * @param list some character's compositions list
  * @param set recursively receives the composites from these compositions
  ','line_number':826,'multiline':True]
['text':'
 * Recomposes the buffer text starting at recomposeStartIndex
 * (which is in NFD - decomposed and canonically ordered),
 * and truncates the buffer contents.
 *
 * Note that recomposition never lengthens the text:
 * Any character consists of either one or two code units;
 * a composition may contain at most one more code unit than the original starter,
 * while the combining mark that is removed has at least one code unit.
 ','line_number':850,'multiline':True]
['text':' Some of the following variables are not used until we have a forward-combining starter','line_number':875,'multiline':False]
['text':' and are only initialized now to avoid compiler warnings.','line_number':876,'multiline':False]
['text':' used as indicator for whether we have a forward-combining starter','line_number':877,'multiline':False]
['text':' this character combines backward and','line_number':885,'multiline':False]
['text':' we have seen a starter that combines forward and','line_number':887,'multiline':False]
['text':' the backward-combining character is not blocked','line_number':889,'multiline':False]
['text':' c is a Jamo V/T, see if we can compose it with the previous character.','line_number':893,'multiline':False]
['text':' c is a Jamo Vowel, compose with previous Jamo L and following Jamo T.','line_number':895,'multiline':False]
['text':' The next character was a Jamo T.','line_number':906,'multiline':False]
['text':' remove the Jamo V/T','line_number':909,'multiline':False]
['text':'
                 * No "else" for Jamo T:
                 * Since the input is in NFD, there are no Hangul LV syllables that
                 * a Jamo T could combine with.
                 * All Jamo Ts are combined above when handling Jamo Vs.
                 ','line_number':919,'multiline':True]
['text':' The starter and the combining mark (c) do combine.','line_number':931,'multiline':False]
['text':' Replace the starter with the composite, remove the combining mark.','line_number':934,'multiline':False]
['text':' pRemove & p: start & limit of the combining mark','line_number':935,'multiline':False]
['text':' both are supplementary','line_number':938,'multiline':False]
['text':' The composite is shorter than the starter,','line_number':943,'multiline':False]
['text':' move the intermediate characters forward one.','line_number':944,'multiline':False]
['text':' The composite is longer than the starter,','line_number':954,'multiline':False]
['text':' move the intermediate characters back one.','line_number':955,'multiline':False]
['text':' temporarily increment for the loop boundary','line_number':957,'multiline':False]
['text':' undo the temporary increment','line_number':964,'multiline':False]
['text':' both are on the BMP','line_number':966,'multiline':False]
['text':' remove the combining mark by moving the following text over it ','line_number':970,'multiline':True]
['text':' Keep prevCC because we removed the combining mark.','line_number':980,'multiline':False]
['text':' Is the composite a starter that combines forward?','line_number':985,'multiline':False]
['text':' We combined; continue with looking for compositions.','line_number':993,'multiline':False]
['text':' no combination this time','line_number':998,'multiline':False]
['text':' If c did not combine, then check if it is a starter.','line_number':1004,'multiline':False]
['text':' Found a new starter.','line_number':1006,'multiline':False]
['text':' It may combine with something, prepare for it.','line_number':1008,'multiline':False]
['text':' FCC: no discontiguous compositions; any intervening character blocks.','line_number':1018,'multiline':False]
['text':' maps an out-of-range 'a' to inert norm16=0','line_number':1027,'multiline':False]
['text':' not b==0!','line_number':1044,'multiline':False]
['text':' 'a' has a compositions list in extraData','line_number':1050,'multiline':False]
['text':' composite 'a' has both mapping & compositions list','line_number':1052,'multiline':False]
['text':' mapping pointer','line_number':1053,'multiline':False]
['text':' +1 to skip the first unit with the mapping lenth','line_number':1054,'multiline':False]
['text':' + mapping length','line_number':1055,'multiline':False]
['text':' combine(list, b) requires a valid code point b','line_number':1063,'multiline':False]
['text':' Very similar to composeQuickCheck(): Make the same changes in both places if relevant.','line_number':1074,'multiline':False]
['text':' doCompose: normalize','line_number':1075,'multiline':False]
['text':' !doCompose: isNormalized (buffer must be empty and initialized)','line_number':1076,'multiline':False]
['text':'
     * prevBoundary points to the last character before the current one
     * that has a composition boundary before it with ccc==0 and quick check "yes".
     * Keeping track of prevBoundary saves us looking for a composition boundary
     * when we find a "no" or "maybe".
     *
     * When we back out from prevSrc back to prevBoundary,
     * then we also remove those same characters (which had been simply copied
     * or canonically-order-inserted) from the ReorderingBuffer.
     * Therefore, at all times, the [prevBoundary..prevSrc[ source units
     * must correspond 1:1 to destination units at the end of the destination buffer.
     ','line_number':1083,'multiline':True]
['text':' Set prevBoundary to the last character in the prefix.','line_number':1105,'multiline':False]
['text':' only for isNormalized','line_number':1115,'multiline':False]
['text':' count code units below the minimum or with irrelevant data for the quick check','line_number':1119,'multiline':False]
['text':' trail surrogate ','line_number':1133,'multiline':True]
['text':' copy these code units all at once','line_number':1146,'multiline':False]
['text':' Set prevBoundary to the last character in the quick check loop.','line_number':1158,'multiline':False]
['text':' The start of the current character (c).','line_number':1165,'multiline':False]
['text':'
         * isCompYesAndZeroCC(norm16) is false, that is, norm16>=minNoNo.
         * c is either a "noNo" (has a mapping) or a "maybeYes" (combines backward)
         * or has ccc!=0.
         * Check for Jamo V/T, then for regular characters.
         * c is not a Hangul syllable or Jamo L because those have "yes" properties.
         ','line_number':1172,'multiline':True]
['text':' c is a Jamo Vowel, compose with previous Jamo L and following Jamo T.','line_number':1183,'multiline':False]
['text':' The next character was a Jamo T.','line_number':1196,'multiline':False]
['text':' If we see L+V+x where x!=T then we drop to the slow path,','line_number':1201,'multiline':False]
['text':' decompose and recompose.','line_number':1202,'multiline':False]
['text':' This is to deal with NFKC finding normal L and V but a','line_number':1203,'multiline':False]
['text':' compatibility variant of a T. We need to either fully compose that','line_number':1204,'multiline':False]
['text':' combination here (which would complicate the code and may not work','line_number':1205,'multiline':False]
['text':' with strange custom data) or use the slow path -- or else our replacing','line_number':1206,'multiline':False]
['text':' two input characters (L+V) with one output character (LV syllable)','line_number':1207,'multiline':False]
['text':' would violate the invariant that [prevBoundary..prevSrc[ has the same','line_number':1208,'multiline':False]
['text':' length as what we appended to the buffer since prevBoundary.','line_number':1209,'multiline':False]
['text':' c is a Jamo Trailing consonant,','line_number':1213,'multiline':False]
['text':' compose with previous Hangul LV that does not contain a Jamo T.','line_number':1214,'multiline':False]
['text':' The Jamo V/T did not compose into a Hangul syllable.','line_number':1223,'multiline':False]
['text':'
         * Source buffer pointers:
         *
         *  all done      quick check   current char  not yet
         *                "yes" but     (c)           processed
         *                may combine
         *                forward
         * [-------------[-------------[-------------[-------------[
         * |             |             |             |             |
         * orig. src     prevBoundary  prevSrc       src           limit
         *
         *
         * Destination buffer pointers inside the ReorderingBuffer:
         *
         *  all done      might take    not filled yet
         *                characters for
         *                reordering
         * [-------------[-------------[-------------[
         * |             |             |             |
         * start         reorderStart  limit         |
         *                             +remainingCap.+
         ','line_number':1234,'multiline':True]
['text':' cc!=0','line_number':1257,'multiline':False]
['text':' FCC','line_number':1258,'multiline':False]
['text':' buffer.getLastCC()==0 && prevBoundary<prevSrc tell us that','line_number':1261,'multiline':False]
['text':' [prevBoundary..prevSrc[ (which is exactly one character under these conditions)','line_number':1262,'multiline':False]
['text':' passed the quick check "yes && ccc==0" test.','line_number':1263,'multiline':False]
['text':' Check whether the last character was a "yesYes" or a "yesNo".','line_number':1264,'multiline':False]
['text':' If a "yesNo", then we get its trailing ccc from its','line_number':1265,'multiline':False]
['text':' mapping and check for canonical order.','line_number':1266,'multiline':False]
['text':' All other cases are ok.','line_number':1267,'multiline':False]
['text':' Fails FCD test, need to decompose and contiguously recompose.','line_number':1270,'multiline':False]
['text':'
         * Find appropriate boundaries around this character,
         * decompose the source text from between the boundaries,
         * and recompose it.
         *
         * We may need to remove the last few characters from the ReorderingBuffer
         * to account for source text that was copied or appended
         * but needs to take part in the recomposition.
         ','line_number':1289,'multiline':True]
['text':'
         * Find the last composition boundary in [prevBoundary..src[.
         * It is either the decomposition of the current character (at prevSrc),
         * or prevBoundary.
         ','line_number':1299,'multiline':True]
['text':' Find the next composition boundary in [src..limit[ -','line_number':1310,'multiline':False]
['text':' modifies src to point to the next starter.','line_number':1311,'multiline':False]
['text':' Decompose [prevBoundary..src[ into the buffer and then recompose that part of it.','line_number':1314,'multiline':False]
['text':' Move to the next starter. We never need to look back before this point again.','line_number':1328,'multiline':False]
['text':' Very similar to compose(): Make the same changes in both places if relevant.','line_number':1334,'multiline':False]
['text':' pQCResult==NULL: spanQuickCheckYes','line_number':1335,'multiline':False]
['text':' pQCResult!=NULL: quickCheck (*pQCResult must be UNORM_YES)','line_number':1336,'multiline':False]
['text':'
     * prevBoundary points to the last character before the current one
     * that has a composition boundary before it with ccc==0 and quick check "yes".
     ','line_number':1341,'multiline':True]
['text':' Set prevBoundary to the last character in the prefix.','line_number':1351,'multiline':False]
['text':' count code units below the minimum or with irrelevant data for the quick check','line_number':1363,'multiline':False]
['text':' trail surrogate ','line_number':1380,'multiline':True]
['text':' Set prevBoundary to the last character in the quick check loop.','line_number':1394,'multiline':False]
['text':' The start of the current character (c).','line_number':1402,'multiline':False]
['text':'
         * isCompYesAndZeroCC(norm16) is false, that is, norm16>=minNoNo.
         * c is either a "noNo" (has a mapping) or a "maybeYes" (combines backward)
         * or has ccc!=0.
         ','line_number':1407,'multiline':True]
['text':' FCC','line_number':1414,'multiline':False]
['text':' prevCC==0 && prevBoundary<prevSrc tell us that','line_number':1418,'multiline':False]
['text':' [prevBoundary..prevSrc[ (which is exactly one character under these conditions)','line_number':1419,'multiline':False]
['text':' passed the quick check "yes && ccc==0" test.','line_number':1420,'multiline':False]
['text':' Check whether the last character was a "yesYes" or a "yesNo".','line_number':1421,'multiline':False]
['text':' If a "yesNo", then we get its trailing ccc from its','line_number':1422,'multiline':False]
['text':' mapping and check for canonical order.','line_number':1423,'multiline':False]
['text':' All other cases are ok.','line_number':1424,'multiline':False]
['text':' Fails FCD test.','line_number':1427,'multiline':False]
['text':' appendZeroCC() needs limit!=NULL','line_number':1475,'multiline':False]
['text':'*
 * Does c have a composition boundary before it?
 * True if its decomposition begins with a character that has
 * ccc=0 && NFC_QC=Yes (isCompYesAndZeroCC()).
 * As a shortcut, this is true if c itself has ccc=0 && NFC_QC=Yes
 * (isCompYesAndZeroCC()) so we need not decompose.
 ','line_number':1482,'multiline':True]
['text':' c decomposes, get everything from the variable-length extra data','line_number':1499,'multiline':False]
['text':' non-zero leadCC','line_number':1506,'multiline':False]
['text':' skip over the firstUnit','line_number':1508,'multiline':False]
['text':' Hangul: norm16==minYesNo','line_number':1522,'multiline':False]
['text':' Hangul LVT has a boundary after it.','line_number':1523,'multiline':False]
['text':' Hangul LV and non-inert yesYes characters combine forward.','line_number':1524,'multiline':False]
['text':' c decomposes, get everything from the variable-length extra data.','line_number':1531,'multiline':False]
['text':' If testInert, then c must be a yesNo character which has lccc=0,','line_number':1532,'multiline':False]
['text':' otherwise it could be a noNo.','line_number':1533,'multiline':False]
['text':' TRUE if','line_number':1536,'multiline':False]
['text':'   not MAPPING_NO_COMP_BOUNDARY_AFTER','line_number':1537,'multiline':False]
['text':'     (which is set if','line_number':1538,'multiline':False]
['text':'       c is not deleted, and','line_number':1539,'multiline':False]
['text':'       it and its decomposition do not combine forward, and it has a starter)','line_number':1540,'multiline':False]
['text':'   and if FCC then trailCC<=1','line_number':1541,'multiline':False]
['text':' We could also test hasCompBoundaryAfter() and return iter.codePointLimit,','line_number':1555,'multiline':False]
['text':' but that's probably not worth the extra cost.','line_number':1556,'multiline':False]
['text':' Note: normalizer2impl.cpp r30982 (2011-nov-27)','line_number':1569,'multiline':False]
['text':' still had getFCDTrie() which built and cached an FCD trie.','line_number':1570,'multiline':False]
['text':' That provided faster access to FCD data than getFCD16FromNormData()','line_number':1571,'multiline':False]
['text':' but required synchronization and consumed some 10kB of heap memory','line_number':1572,'multiline':False]
['text':' in any process that uses FCD (e.g., via collation).','line_number':1573,'multiline':False]
['text':' tccc180[] and smallFCD[] are intended to help with any loss of performance,','line_number':1574,'multiline':False]
['text':' at least for Latin & CJK.','line_number':1575,'multiline':False]
['text':' Gets the FCD value from the regular normalization data.','line_number':1577,'multiline':False]
['text':' Only loops for 1:1 algorithmic mappings.','line_number':1579,'multiline':False]
['text':' no decomposition or Hangul syllable, all zeros','line_number':1583,'multiline':False]
['text':' combining mark','line_number':1586,'multiline':False]
['text':' c decomposes, get everything from the variable-length extra data','line_number':1594,'multiline':False]
['text':' A character that is deleted (maps to an empty string) must','line_number':1598,'multiline':False]
['text':' get the worst-case lccc and tccc values because arbitrary','line_number':1599,'multiline':False]
['text':' characters on both sides will become adjacent.','line_number':1600,'multiline':False]
['text':' tccc','line_number':1603,'multiline':False]
['text':' lccc','line_number':1605,'multiline':False]
['text':' Dual functionality:','line_number':1613,'multiline':False]
['text':' buffer!=NULL: normalize','line_number':1614,'multiline':False]
['text':' buffer==NULL: isNormalized/quickCheck/spanQuickCheckYes','line_number':1615,'multiline':False]
['text':' Tracks the last FCD-safe boundary, before lccc=0 or after properly-ordered tccc<=1.','line_number':1620,'multiline':False]
['text':' Similar to the prevBoundary in the compose() implementation.','line_number':1621,'multiline':False]
['text':' We know that the previous character's lccc==0.','line_number':1631,'multiline':False]
['text':' Fetching the fcd16 value was deferred for this below-U+0300 code point.','line_number':1632,'multiline':False]
['text':' Note: In this function we use buffer->appendZeroCC() because we track','line_number':1641,'multiline':False]
['text':' the lead and trail combining classes here, rather than leaving it to','line_number':1642,'multiline':False]
['text':' the ReorderingBuffer.','line_number':1643,'multiline':False]
['text':' The exception is the call to decomposeShort() which uses the buffer','line_number':1644,'multiline':False]
['text':' in the normal way.','line_number':1645,'multiline':False]
['text':' count code units with lccc==0','line_number':1652,'multiline':False]
['text':' trail surrogate ','line_number':1667,'multiline':True]
['text':' copy these code units all at once','line_number':1682,'multiline':False]
['text':' We know that the previous character's lccc==0.','line_number':1691,'multiline':False]
['text':' Fetching the fcd16 value was deferred for this below-U+0300 code point.','line_number':1693,'multiline':False]
['text':' Need to fetch the previous character's FCD value because','line_number':1703,'multiline':False]
['text':' prevFCD16 was just for the trail surrogate code point.','line_number':1704,'multiline':False]
['text':' Still known to have lccc==0 because its lead surrogate unit had lccc==0.','line_number':1706,'multiline':False]
['text':' The start of the current character (c).','line_number':1712,'multiline':False]
['text':' The current character (c) at [prevSrc..src[ has a non-zero lead combining class.','line_number':1719,'multiline':False]
['text':' Check for proper order, and decompose locally if necessary.','line_number':1720,'multiline':False]
['text':' proper order: prev tccc <= current lccc','line_number':1722,'multiline':False]
['text':' quick check "no"','line_number':1732,'multiline':False]
['text':'
             * Back out the part of the source that we copied or appended
             * already but is now going to be decomposed.
             * prevSrc is set to after what was copied/appended.
             ','line_number':1734,'multiline':True]
['text':'
             * Find the part of the source that needs to be decomposed,
             * up to the next safe boundary.
             ','line_number':1740,'multiline':True]
['text':'
             * The source text does not fulfill the conditions for FCD.
             * Decompose and reorder a limited piece of the text.
             ','line_number':1745,'multiline':True]
['text':' appendZeroCC() needs limit!=NULL','line_number':1785,'multiline':False]
['text':' CanonicalIterator data -------------------------------------------------- ***','line_number':1807,'multiline':False]
['text':' origin is the first character whose decomposition starts with','line_number':1820,'multiline':False]
['text':' the character for which we are setting the value.','line_number':1821,'multiline':False]
['text':' origin is not the first character, or it is U+0000.','line_number':1824,'multiline':False]
['text':' Call Normalizer2Impl::makeCanonIterDataFromNorm16() for a range of same-norm16 characters.','line_number':1848,'multiline':False]
['text':'     context: the Normalizer2Impl','line_number':1849,'multiline':False]
['text':' UInitOnce instantiation function for CanonIterData','line_number':1863,'multiline':False]
['text':' Inert, or 2-way mapping (including Hangul syllable).','line_number':1888,'multiline':False]
['text':' We do not write a canonStartSet for any yesNo character.','line_number':1889,'multiline':False]
['text':' Composites from 2-way mappings are added at runtime from the','line_number':1890,'multiline':False]
['text':' starter's compositions list, and the other characters in','line_number':1891,'multiline':False]
['text':' 2-way mappings get CANON_NOT_SEGMENT_STARTER set because they are','line_number':1892,'multiline':False]
['text':' "maybe" characters.','line_number':1893,'multiline':False]
['text':' not a segment starter if it occurs in a decomposition or has cc!=0','line_number':1900,'multiline':False]
['text':' c has a one-way decomposition','line_number':1908,'multiline':False]
['text':' c decomposes, get everything from the variable-length extra data','line_number':1916,'multiline':False]
['text':' original c has cc!=0','line_number':1922,'multiline':False]
['text':' Skip empty mappings (no characters in the decomposition).','line_number':1925,'multiline':False]
['text':' skip over the firstUnit','line_number':1927,'multiline':False]
['text':' add c to first code point's start set','line_number':1928,'multiline':False]
['text':' Set CANON_NOT_SEGMENT_STARTER for each remaining code point of a','line_number':1932,'multiline':False]
['text':' one-way mapping. A 2-way mapping is possible here after','line_number':1933,'multiline':False]
['text':' intermediate algorithmic mapping.','line_number':1934,'multiline':False]
['text':' c decomposed to c2 algorithmically; c has cc==0','line_number':1947,'multiline':False]
['text':' Logically const: Synchronized instantiation.','line_number':1958,'multiline':False]
['text':' Normalizer2 data swapping ----------------------------------------------- ***','line_number':2003,'multiline':False]
['text':' udata_swapDataHeader checks the arguments ','line_number':2022,'multiline':True]
['text':' check data format and format version ','line_number':2028,'multiline':True]
['text':' dataFormat="Nrm2" ','line_number':2031,'multiline':True]
['text':' read the first few indexes ','line_number':2060,'multiline':True]
['text':' get the total length of the data ','line_number':2065,'multiline':True]
['text':' copy the data for inaccessible bytes ','line_number':2076,'multiline':True]
['text':' swap the int32_t indexes[] ','line_number':2083,'multiline':True]
['text':' swap the UTrie2 ','line_number':2088,'multiline':True]
['text':' swap the uint16_t extraData[] ','line_number':2093,'multiline':True]
['text':' no need to swap the uint8_t smallFCD[] (new in formatVersion 2) ','line_number':2098,'multiline':True]
['text':' !UCONFIG_NO_NORMALIZATION','line_number':2108,'multiline':False]
