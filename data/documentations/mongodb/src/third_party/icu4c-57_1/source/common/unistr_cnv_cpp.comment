['text':'
*******************************************************************************
*
*   Copyright (C) 1999-2014, International Business Machines
*   Corporation and others.  All Rights Reserved.
*
*******************************************************************************
*   file name:  unistr_cnv.cpp
*   encoding:   US-ASCII
*   tab size:   8 (not used)
*   indentation:2
*
*   created on: 2004aug19
*   created by: Markus W. Scherer
*
*   Character conversion functions moved here from unistr.cpp
','line_number':1,'multiline':True]
['text':'========================================','line_number':36,'multiline':False]
['text':' Constructors','line_number':37,'multiline':False]
['text':'========================================','line_number':38,'multiline':False]
['text':' else see unistr.cpp','line_number':57,'multiline':False]
['text':' check arguments','line_number':82,'multiline':False]
['text':' treat as an empty string, do nothing more','line_number':84,'multiline':False]
['text':' get input length','line_number':88,'multiline':False]
['text':' use the provided converter','line_number':94,'multiline':False]
['text':' use the default converter','line_number':98,'multiline':False]
['text':'========================================','line_number':112,'multiline':False]
['text':' Codeset conversion','line_number':113,'multiline':False]
['text':'========================================','line_number':114,'multiline':False]
['text':' else see unistr.cpp','line_number':126,'multiline':False]
['text':' if the arguments are illegal, then do nothing','line_number':136,'multiline':False]
['text':'dstSize < 0 || ','line_number':137,'multiline':True]
['text':' pin the indices to legal values','line_number':141,'multiline':False]
['text':' We need to cast dstSize to int32_t for all subsequent code.','line_number':144,'multiline':False]
['text':' I don't know why the API was defined with uint32_t but we are stuck with it.','line_number':145,'multiline':False]
['text':' Also, dstSize==0xffffffff means "unlimited" but if we use target+dstSize','line_number':146,'multiline':False]
['text':' as a limit in some functions, it may wrap around and yield a pointer','line_number':147,'multiline':False]
['text':' that compares less-than target.','line_number':148,'multiline':False]
['text':' Assume that the capacity is real and a limit pointer won't wrap around.','line_number':151,'multiline':False]
['text':' Pin the capacity so that a limit pointer does not wrap around.','line_number':154,'multiline':False]
['text':' U_MAX_PTR(target) returns a targetLimit that is at most 0x7fffffff','line_number':156,'multiline':False]
['text':' greater than target and does not wrap around the top of the address space.','line_number':157,'multiline':False]
['text':' create the converter','line_number':161,'multiline':False]
['text':' just write the NUL if the string length is 0','line_number':165,'multiline':False]
['text':' if the codepage is the default, use our cache','line_number':170,'multiline':False]
['text':' if it is an empty string, then use the "invariant character" conversion','line_number':171,'multiline':False]
['text':' use the "invariant characters" conversion','line_number':179,'multiline':False]
['text':' close the converter','line_number':194,'multiline':False]
['text':' nothing to do?','line_number':218,'multiline':False]
['text':' get the converter','line_number':223,'multiline':False]
['text':' convert','line_number':236,'multiline':False]
['text':' release the converter','line_number':239,'multiline':False]
['text':' Pin the limit to U_MAX_PTR if the "magic" destCapacity is used.','line_number':267,'multiline':False]
['text':' for NUL-termination, translate into highest int32_t','line_number':269,'multiline':False]
['text':' perform the conversion','line_number':275,'multiline':False]
['text':' if an overflow occurs, then get the preflighting length','line_number':279,'multiline':False]
['text':' if there's nothing to convert, do nothing','line_number':300,'multiline':False]
['text':' create the converter','line_number':310,'multiline':False]
['text':' if the codepage is the default, use our cache','line_number':311,'multiline':False]
['text':' if it is an empty string, then use the "invariant character" conversion','line_number':312,'multiline':False]
['text':' use the "invariant characters" conversion','line_number':322,'multiline':False]
['text':' if we failed, set the appropriate flags and return','line_number':334,'multiline':False]
['text':' perform the conversion','line_number':340,'multiline':False]
['text':' close the converter','line_number':346,'multiline':False]
['text':' set up the conversion parameters','line_number':364,'multiline':False]
['text':' estimate the size needed:','line_number':369,'multiline':False]
['text':' try to use the stack buffer','line_number':372,'multiline':False]
['text':' 1.25 UChar's per source byte should cover most cases','line_number':375,'multiline':False]
['text':' we do not care about the current contents','line_number':379,'multiline':False]
['text':' perform the conversion','line_number':387,'multiline':False]
['text':' update the conversion parameters','line_number':393,'multiline':False]
['text':' allocate more space and copy data, if needed','line_number':396,'multiline':False]
['text':' reset the error code','line_number':398,'multiline':False]
['text':' keep the previous conversion results','line_number':401,'multiline':False]
['text':' estimate the new size needed, larger than before','line_number':404,'multiline':False]
['text':' try 2 UChar's per remaining source byte','line_number':405,'multiline':False]
