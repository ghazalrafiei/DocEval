['text':'
 ******************************************************************************
 *
 *   Copyright (C) 2000-2016, International Business Machines
 *   Corporation and others.  All Rights Reserved.
 *
 ******************************************************************************
 *   file name:  ushape.cpp
 *   encoding:   US-ASCII
 *   tab size:   8 (not used)
 *   indentation:4
 *
 *   created on: 2000jun29
 *   created by: Markus W. Scherer
 *
 *   Arabic letter shaping implemented by Ayman Roshdy
 ','line_number':1,'multiline':True]
['text':'
 * This implementation is designed for 16-bit Unicode strings.
 * The main assumption is that the Arabic characters and their
 * presentation forms each fit into a single UChar.
 * With UTF-8, they occupy 2 or 3 bytes, and more than the ASCII
 * characters.
 ','line_number':29,'multiline':True]
['text':'
 * ### TODO in general for letter shaping:
 * - the letter shaping code is UTF-16-unaware; needs update
 *   + especially invertBuffer()?!
 * - needs to handle the "Arabic Tail" that is used in some legacy codepages
 *   as a glyph fragment of wide-glyph letters
 *   + IBM Unicode conversion tables map it to U+200B (ZWSP)
 *   + IBM Egypt has proposed to encode the tail in Unicode among Arabic Presentation Forms
 *   + Unicode 3.2 added U+FE73 ARABIC TAIL FRAGMENT
 ','line_number':37,'multiline':True]
['text':' definitions for Arabic letter shaping ------------------------------------ ','line_number':48,'multiline':True]
['text':' FEB1 ','line_number':88,'multiline':True]
['text':' FEB2 ','line_number':89,'multiline':True]
['text':' FEB3 ','line_number':90,'multiline':True]
['text':' FEB4 ','line_number':91,'multiline':True]
['text':' FEB5 ','line_number':92,'multiline':True]
['text':' FEB6 ','line_number':93,'multiline':True]
['text':' FEB7 ','line_number':94,'multiline':True]
['text':' FEB8 ','line_number':95,'multiline':True]
['text':' FEB9 ','line_number':96,'multiline':True]
['text':' FEBA ','line_number':97,'multiline':True]
['text':' FEBB ','line_number':98,'multiline':True]
['text':' FEBC ','line_number':99,'multiline':True]
['text':' FEBD ','line_number':100,'multiline':True]
['text':' FEBE ','line_number':101,'multiline':True]
['text':' FE70 ','line_number':105,'multiline':True]
['text':' FE71 ','line_number':106,'multiline':True]
['text':' FE72 ','line_number':107,'multiline':True]
['text':' FE73 ','line_number':108,'multiline':True]
['text':' FE74 ','line_number':109,'multiline':True]
['text':' FE75 ','line_number':110,'multiline':True]
['text':' FE76 ','line_number':111,'multiline':True]
['text':' FE77 ','line_number':112,'multiline':True]
['text':' FE78 ','line_number':113,'multiline':True]
['text':' FE79 ','line_number':114,'multiline':True]
['text':' FE7A ','line_number':115,'multiline':True]
['text':' FE7B ','line_number':116,'multiline':True]
['text':' FE7C ','line_number':117,'multiline':True]
['text':' FE7D ','line_number':118,'multiline':True]
['text':' FE7E ','line_number':119,'multiline':True]
['text':' FE7F ','line_number':120,'multiline':True]
['text':' isolated','line_number':125,'multiline':True]
['text':' final   ','line_number':126,'multiline':True]
['text':'FEF5','line_number':137,'multiline':True]
['text':'FEF6','line_number':138,'multiline':True]
['text':'FEF7','line_number':139,'multiline':True]
['text':'FEF8','line_number':140,'multiline':True]
['text':'FEF9','line_number':141,'multiline':True]
['text':'FEFA','line_number':142,'multiline':True]
['text':'FEFB','line_number':143,'multiline':True]
['text':'FEFC','line_number':144,'multiline':True]
['text':'0x0622','line_number':149,'multiline':True]
['text':'0x0623','line_number':150,'multiline':True]
['text':'0x0624','line_number':151,'multiline':True]
['text':'0x0625','line_number':152,'multiline':True]
['text':'0x0626','line_number':153,'multiline':True]
['text':'0x0627','line_number':154,'multiline':True]
['text':'0x0628','line_number':155,'multiline':True]
['text':'0x0629','line_number':156,'multiline':True]
['text':'0x062A','line_number':157,'multiline':True]
['text':'0x062B','line_number':158,'multiline':True]
['text':'0x062C','line_number':159,'multiline':True]
['text':'0x062D','line_number':160,'multiline':True]
['text':'0x062E','line_number':161,'multiline':True]
['text':'0x062F','line_number':162,'multiline':True]
['text':'0x0630','line_number':163,'multiline':True]
['text':'0x0631','line_number':164,'multiline':True]
['text':'0x0632','line_number':165,'multiline':True]
['text':'0x0633','line_number':166,'multiline':True]
['text':'0x0634','line_number':167,'multiline':True]
['text':'0x0635','line_number':168,'multiline':True]
['text':'0x0636','line_number':169,'multiline':True]
['text':'0x0637','line_number':170,'multiline':True]
['text':'0x0638','line_number':171,'multiline':True]
['text':'0x0639','line_number':172,'multiline':True]
['text':'0x063A','line_number':173,'multiline':True]
['text':'0x063B-0x063F','line_number':174,'multiline':True]
['text':'0x0640','line_number':175,'multiline':True]
['text':'0x0641','line_number':176,'multiline':True]
['text':'0x0642','line_number':177,'multiline':True]
['text':'0x0643','line_number':178,'multiline':True]
['text':'0x0644','line_number':179,'multiline':True]
['text':'0x0645','line_number':180,'multiline':True]
['text':'0x0646','line_number':181,'multiline':True]
['text':'0x0647','line_number':182,'multiline':True]
['text':'0x0648','line_number':183,'multiline':True]
['text':'0x0649','line_number':184,'multiline':True]
['text':'0x064A','line_number':185,'multiline':True]
['text':'0x064B','line_number':186,'multiline':True]
['text':'0x064C','line_number':187,'multiline':True]
['text':'0x064D','line_number':188,'multiline':True]
['text':'0x064E','line_number':189,'multiline':True]
['text':'0x064F','line_number':190,'multiline':True]
['text':'0x0650','line_number':191,'multiline':True]
['text':'0x0651','line_number':192,'multiline':True]
['text':'0x0652','line_number':193,'multiline':True]
['text':'0x0653','line_number':194,'multiline':True]
['text':'0x0654','line_number':195,'multiline':True]
['text':'0x0655','line_number':196,'multiline':True]
['text':'0x0656','line_number':197,'multiline':True]
['text':'0x0657-0x065B','line_number':198,'multiline':True]
['text':'0x065C','line_number':199,'multiline':True]
['text':'0x065D','line_number':200,'multiline':True]
['text':'0x065E','line_number':201,'multiline':True]
['text':'0x065F','line_number':202,'multiline':True]
['text':'0x0660-0x0664','line_number':203,'multiline':True]
['text':'0x0665-0x0669','line_number':204,'multiline':True]
['text':'0x066A-0x066F','line_number':205,'multiline':True]
['text':'0x0670','line_number':206,'multiline':True]
['text':'0x0671','line_number':207,'multiline':True]
['text':'0x0672','line_number':208,'multiline':True]
['text':'0x0673','line_number':209,'multiline':True]
['text':'0x0674','line_number':210,'multiline':True]
['text':'0x0675','line_number':211,'multiline':True]
['text':'0x0676-0x0677','line_number':212,'multiline':True]
['text':'0x0678','line_number':213,'multiline':True]
['text':'0x0679','line_number':214,'multiline':True]
['text':'0x067A','line_number':215,'multiline':True]
['text':'0x067B','line_number':216,'multiline':True]
['text':'0x67C-0x067D','line_number':217,'multiline':True]
['text':'0x067E-0x0683','line_number':218,'multiline':True]
['text':'0x0684-0x0687','line_number':219,'multiline':True]
['text':'0x0688','line_number':220,'multiline':True]
['text':'0x0689-0x068B','line_number':221,'multiline':True]
['text':'0x068C','line_number':222,'multiline':True]
['text':'0x068D','line_number':223,'multiline':True]
['text':'0x068E','line_number':224,'multiline':True]
['text':'0x068F-0x0690','line_number':225,'multiline':True]
['text':'0x0691','line_number':226,'multiline':True]
['text':'0x0692-0x0699','line_number':227,'multiline':True]
['text':'0x069A-0x06A3','line_number':228,'multiline':True]
['text':'0x069A-0x06A3','line_number':229,'multiline':True]
['text':'0x06A4-0x06AD','line_number':230,'multiline':True]
['text':'0x06A4-0x06AD','line_number':231,'multiline':True]
['text':'0x06AE-0x06B7','line_number':232,'multiline':True]
['text':'0x06AE-0x06B7','line_number':233,'multiline':True]
['text':'0x06B8-0x06B9','line_number':234,'multiline':True]
['text':'0x06BA','line_number':235,'multiline':True]
['text':'0x06BB','line_number':236,'multiline':True]
['text':'0x06BC-0x06BD','line_number':237,'multiline':True]
['text':'0x06BE','line_number':238,'multiline':True]
['text':'0x06BF','line_number':239,'multiline':True]
['text':'0x06C0','line_number':240,'multiline':True]
['text':'0x06C1','line_number':241,'multiline':True]
['text':'0x06C2-0x06C4','line_number':242,'multiline':True]
['text':'0x06C5','line_number':243,'multiline':True]
['text':'0x06C6','line_number':244,'multiline':True]
['text':'0x06C7','line_number':245,'multiline':True]
['text':'0x06C8','line_number':246,'multiline':True]
['text':'0x06C9','line_number':247,'multiline':True]
['text':'0x06CA','line_number':248,'multiline':True]
['text':'0x06CB','line_number':249,'multiline':True]
['text':'0x06CC','line_number':250,'multiline':True]
['text':'0x06CD','line_number':251,'multiline':True]
['text':'0x06CE-0x06CF','line_number':252,'multiline':True]
['text':'0x06D0','line_number':253,'multiline':True]
['text':'0x06D1','line_number':254,'multiline':True]
['text':'0x06D2','line_number':255,'multiline':True]
['text':'0x06D3','line_number':256,'multiline':True]
['text':'**********0*****1*****2*****3*****4*****5*****6*****7*****8*****9*****A*****B*****C*****D*****E*****F','line_number':260,'multiline':True]
['text':'FB5','line_number':261,'multiline':True]
['text':'FB6','line_number':262,'multiline':True]
['text':'FB7','line_number':263,'multiline':True]
['text':'FB8','line_number':264,'multiline':True]
['text':'FB9','line_number':265,'multiline':True]
['text':'FBA','line_number':266,'multiline':True]
['text':'FBB','line_number':267,'multiline':True]
['text':'FBC','line_number':268,'multiline':True]
['text':'FBD','line_number':269,'multiline':True]
['text':'FBE','line_number':270,'multiline':True]
['text':'FBF','line_number':271,'multiline':True]
['text':'FC0','line_number':272,'multiline':True]
['text':'FC1','line_number':273,'multiline':True]
['text':'FC2','line_number':274,'multiline':True]
['text':'FC3','line_number':275,'multiline':True]
['text':'FC4','line_number':276,'multiline':True]
['text':'FC5','line_number':277,'multiline':True]
['text':'FC6','line_number':278,'multiline':True]
['text':'**********0*****1*****2*****3*****4*****5*****6*****7*****8*****9*****A*****B*****C*****D*****E*****F','line_number':283,'multiline':True]
['text':'FE7','line_number':284,'multiline':True]
['text':'FE8','line_number':285,'multiline':True]
['text':'FE9','line_number':286,'multiline':True]
['text':'FEA','line_number':287,'multiline':True]
['text':'FEB','line_number':288,'multiline':True]
['text':'FEC','line_number':289,'multiline':True]
['text':'FED','line_number':290,'multiline':True]
['text':'FEE','line_number':291,'multiline':True]
['text':'FEF','line_number':292,'multiline':True]
['text':'**********0******1******2******3******4******5******6******7******8******9******A******B******C******D******E******F**','line_number':297,'multiline':True]
['text':'FB5','line_number':298,'multiline':True]
['text':'FB6','line_number':299,'multiline':True]
['text':'FB7','line_number':300,'multiline':True]
['text':'FB8','line_number':301,'multiline':True]
['text':'FB9','line_number':302,'multiline':True]
['text':'FBA','line_number':303,'multiline':True]
['text':'FBB','line_number':304,'multiline':True]
['text':'FBC','line_number':305,'multiline':True]
['text':'FBD','line_number':306,'multiline':True]
['text':'FBE','line_number':307,'multiline':True]
['text':'FBF','line_number':308,'multiline':True]
['text':'**********0******1******2******3******4******5******6******7******8******9******A******B******C******D******E******F**','line_number':313,'multiline':True]
['text':'FE7','line_number':314,'multiline':True]
['text':'FE8','line_number':315,'multiline':True]
['text':'FE9','line_number':316,'multiline':True]
['text':'FEA','line_number':317,'multiline':True]
['text':'FEB','line_number':318,'multiline':True]
['text':'FEC','line_number':319,'multiline':True]
['text':'FED','line_number':320,'multiline':True]
['text':'FEE','line_number':321,'multiline':True]
['text':'FEF','line_number':322,'multiline':True]
['text':'
 * This function shapes European digits to Arabic-Indic digits
 * in-place, writing over the input characters.
 * Since we know that we are only looking for BMP code points,
 * we can safely just work with code units (again, at least UTF-16).
 ','line_number':333,'multiline':True]
['text':' the iteration direction depends on the type of input ','line_number':350,'multiline':True]
['text':' L ','line_number':355,'multiline':True]
['text':' R ','line_number':356,'multiline':True]
['text':' AL ','line_number':359,'multiline':True]
['text':' EN ','line_number':362,'multiline':True]
['text':' digitBase+(c-0x30) - digitBase was modified above ','line_number':364,'multiline':True]
['text':' pre-decrement in the body ','line_number':372,'multiline':True]
['text':' L ','line_number':375,'multiline':True]
['text':' R ','line_number':376,'multiline':True]
['text':' AL ','line_number':379,'multiline':True]
['text':' EN ','line_number':382,'multiline':True]
['text':' digitBase+(c-0x30) - digitBase was modified above ','line_number':384,'multiline':True]
['text':'
 *Name     : invertBuffer
 *Function : This function inverts the buffer, it's used
 *           in case the user specifies the buffer to be
 *           U_SHAPE_TEXT_DIRECTION_LOGICAL
 ','line_number':394,'multiline':True]
['text':'options','line_number':401,'multiline':True]
['text':'
 *Name     : changeLamAlef
 *Function : Converts the Alef characters into an equivalent
 *           LamAlef location in the 0x06xx Range, this is an
 *           intermediate stage in the operation of the program
 *           later it'll be converted into the 0xFExx LamAlefs
 *           in the shaping function.
 ','line_number':411,'multiline':True]
['text':'
 *Name     : getLink
 *Function : Resolves the link between the characters as
 *           Arabic characters have four forms :
 *           Isolated, Initial, Middle and Final Form
 ','line_number':434,'multiline':True]
['text':'
 *Name     : countSpaces
 *Function : Counts the number of spaces
 *           at each end of the logical buffer
 ','line_number':457,'multiline':True]
['text':'options','line_number':463,'multiline':True]
['text':' the entire buffer is not all space ','line_number':470,'multiline':True]
['text':'
 *Name     : isTashkeelChar
 *Function : Returns 1 for Tashkeel characters in 06 range else return 0
 ','line_number':480,'multiline':True]
['text':'
 *Name     : isTashkeelCharFE
 *Function : Returns 1 for Tashkeel characters in FE range else return 0
 ','line_number':489,'multiline':True]
['text':'
 *Name     : isAlefChar
 *Function : Returns 1 for Alef characters else return 0
 ','line_number':498,'multiline':True]
['text':'
 *Name     : isLamAlefChar
 *Function : Returns 1 for LamAlef characters else return 0
 ','line_number':507,'multiline':True]
['text':'BIDI
 *Name     : isTailChar
 *Function : returns 1 if the character matches one of the tail characters (0xfe73 or 0x200b) otherwise returns 0
 ','line_number':516,'multiline':True]
['text':'BIDI
 *Name     : isSeenTailFamilyChar
 *Function : returns 1 if the character is a seen family isolated character
 *           in the FE range otherwise returns 0
 ','line_number':530,'multiline':True]
['text':' Name     : isSeenFamilyChar
  * Function : returns 1 if the character is a seen family character in the Unicode
  *            06 range otherwise returns 0
 ','line_number':545,'multiline':True]
['text':'Start of BIDI','line_number':559,'multiline':True]
['text':'
 *Name     : isAlefMaksouraChar
 *Function : returns 1 if the character is a Alef Maksoura Final or isolated
 *           otherwise returns 0
 ','line_number':560,'multiline':True]
['text':'
 * Name     : isYehHamzaChar
 * Function : returns 1 if the character is a yehHamza isolated or yehhamza
 *            final is found otherwise returns 0
 ','line_number':570,'multiline':True]
['text':'
 * Name: isTashkeelOnTatweelChar
 * Function: Checks if the Tashkeel Character is on Tatweel or not,if the
 *           Tashkeel on tatweel (FE range), it returns 1 else if the
 *           Tashkeel with shadda on tatweel (FC range)return 2 otherwise
 *           returns 0
 ','line_number':584,'multiline':True]
['text':'
 * Name: isIsolatedTashkeelChar
 * Function: Checks if the Tashkeel Character is in the isolated form
 *           (i.e. Unicode FE range) returns 1 else if the Tashkeel
 *           with shadda is in the isolated form (i.e. Unicode FC range)
 *           returns 2 otherwise returns 0
 ','line_number':603,'multiline':True]
['text':'
 *Name     : calculateSize
 *Function : This function calculates the destSize to be used in preflighting
 *           when the destSize is equal to 0
 *           It is used also to calculate the new destsize in case the
 *           destination buffer will be resized.
 ','line_number':624,'multiline':True]
['text':'
 *Name     : handleTashkeelWithTatweel
 *Function : Replaces Tashkeel as following:
 *            Case 1 :if the Tashkeel on tatweel, replace it with Tatweel.
 *            Case 2 :if the Tashkeel aggregated with Shadda on Tatweel, replace
 *                   it with Shadda on Tatweel.
 *            Case 3: if the Tashkeel is isolated replace it with Space.
 *
 ','line_number':680,'multiline':True]
['text':'destSize','line_number':691,'multiline':True]
['text':'options','line_number':691,'multiline':True]
['text':'pErrorCode','line_number':692,'multiline':True]
['text':'
 *Name     : handleGeneratedSpaces
 *Function : The shapeUnicode function converts Lam + Alef into LamAlef + space,
 *           and Tashkeel to space.
 *           handleGeneratedSpaces function puts these generated spaces
 *           according to the options the user specifies. LamAlef and Tashkeel
 *           spaces can be replaced at begin, at end, at near or decrease the
 *           buffer size.
 *
 *           There is also Auto option for LamAlef and tashkeel, which will put
 *           the spaces at end of the buffer (or end of text if the user used
 *           the option U_SHAPE_SPACES_RELATIVE_TO_TEXT_BEGIN_END).
 *
 *           If the text type was visual_LTR and the option
 *           U_SHAPE_SPACES_RELATIVE_TO_TEXT_BEGIN_END was selected the END
 *           option will place the space at the beginning of the buffer and
 *           BEGIN will place the space at the end of the buffer.
 ','line_number':708,'multiline':True]
['text':' Test for NULL ','line_number':751,'multiline':True]
['text':' Lam+Alef is already shaped into LamAlef + FFFF ','line_number':793,'multiline':True]
['text':'
 *Name     :expandCompositCharAtBegin
 *Function :Expands the LamAlef character to Lam and Alef consuming the required
 *         space from beginning of the buffer. If the text type was visual_LTR
 *         and the option U_SHAPE_SPACES_RELATIVE_TO_TEXT_BEGIN_END was selected
 *         the spaces will be located at end of buffer.
 *         If there are no spaces to expand the LamAlef, an error
 *         will be set to U_NO_SPACE_AVAILABLE as defined in utypes.h
 ','line_number':892,'multiline':True]
['text':' Test for NULL ','line_number':910,'multiline':True]
['text':' to ensure the array index is within the range ','line_number':929,'multiline':True]
['text':'
 *Name     : expandCompositCharAtEnd
 *Function : Expands the LamAlef character to Lam and Alef consuming the
 *           required space from end of the buffer. If the text type was
 *           Visual LTR and the option U_SHAPE_SPACES_RELATIVE_TO_TEXT_BEGIN_END
 *           was used, the spaces will be consumed from begin of buffer. If
 *           there are no spaces to expand the LamAlef, an error
 *           will be set to U_NO_SPACE_AVAILABLE as defined in utypes.h
 ','line_number':952,'multiline':True]
['text':' Test for NULL ','line_number':972,'multiline':True]
['text':'
 *Name     : expandCompositCharAtNear
 *Function : Expands the LamAlef character into Lam + Alef, YehHamza character
 *           into Yeh + Hamza, SeenFamily character into SeenFamily character
 *           + Tail, while consuming the space next to the character.
 *           If there are no spaces next to the character, an error
 *           will be set to U_NO_SPACE_AVAILABLE as defined in utypes.h
 ','line_number':1020,'multiline':True]
['text':'
 * Name     : expandCompositChar
 * Function : LamAlef, need special handling, since it expands from one
 *            character into two characters while shaping or deshaping.
 *            In order to expand it, near or far spaces according to the
 *            options user specifies. Also buffer size can be increased.
 *
 *            For SeenFamily characters and YehHamza only the near option is
 *            supported, while for LamAlef we can take spaces from begin, end,
 *            near or even increase the buffer size.
 *            There is also the Auto option for LamAlef only, which will first
 *            search for a space at end, begin then near, respectively.
 *            If there are no spaces to expand these characters, an error will be set to
 *            U_NO_SPACE_AVAILABLE as defined in utypes.h
 ','line_number':1066,'multiline':True]
['text':' Test for NULL ','line_number':1159,'multiline':True]
['text':'
 *Name     : shapeUnicode
 *Function : Converts an Arabic Unicode buffer in 06xx Range into a shaped
 *           arabic Unicode buffer in FExx Range
 ','line_number':1190,'multiline':True]
['text':'
     * Converts the input buffer from FExx Range into 06xx Range
     * to make sure that all characters are in the 06xx range
     * even the lamalef is converted to the special region in
     * the 06xx range
     ','line_number':1210,'multiline':True]
['text':' sets the index to the end of the buffer, together with the step point to -1 ','line_number':1232,'multiline':True]
['text':'
     * This function resolves the link between the characters .
     * Arabic characters have four forms :
     * Isolated Form, Initial Form, Middle Form and Final Form
     ','line_number':1237,'multiline':True]
['text':' If high byte of currLink > 0 then more than one shape ','line_number':1248,'multiline':True]
['text':' we need to know about next char ','line_number':1251,'multiline':True]
['text':'get from 0x065C-0x065f ','line_number':1267,'multiline':True]
['text':' The default case is to drop the Alef and replace ','line_number':1269,'multiline':True]
['text':' it by LAMALEF_SPACE_SUB which is the last character in the  ','line_number':1270,'multiline':True]
['text':' unicode private use area, this is done to make   ','line_number':1271,'multiline':True]
['text':' sure that removeLamAlefSpaces() handles only the ','line_number':1272,'multiline':True]
['text':' spaces generated during lamalef generation.      ','line_number':1273,'multiline':True]
['text':' LAMALEF_SPACE_SUB is added here and is replaced by spaces   ','line_number':1274,'multiline':True]
['text':' in removeLamAlefSpaces()                         ','line_number':1275,'multiline':True]
['text':'
             * get the proper shape according to link ability of neighbors
             * and of character; depends on the order of the shapes
             * (isolated, initial, middle, final) in the compatibility area
             ','line_number':1292,'multiline':True]
['text':' to ensure the array index is within the range ','line_number':1323,'multiline':True]
['text':' move one notch forward ','line_number':1336,'multiline':True]
['text':'
 *Name     : deShapeUnicode
 *Function : Converts an Arabic Unicode buffer in FExx Range into unshaped
 *           arabic Unicode buffer in 06xx Range
 ','line_number':1362,'multiline':True]
['text':'
     *This for loop changes the buffer from the Unicode FE range to
     *the Unicode 06 range
     ','line_number':1379,'multiline':True]
['text':' FBxx Arabic range ','line_number':1386,'multiline':True]
['text':' FExx Arabic range ','line_number':1397,'multiline':True]
['text':'
 ****************************************
 * u_shapeArabic
 ****************************************
 ','line_number':1414,'multiline':True]
['text':' usual error checking ','line_number':1429,'multiline':True]
['text':' make sure that no reserved options values are used; allow dest==NULL only for preflighting ','line_number':1434,'multiline':True]
['text':' Validate  lamalef options ','line_number':1451,'multiline':True]
['text':' Validate  Tashkeel options ','line_number':1462,'multiline':True]
['text':' determine the source length ','line_number':1472,'multiline':True]
['text':' check that source and destination do not overlap ','line_number':1480,'multiline':True]
['text':' Does Options contain the new Seen Tail Unicode code point option ','line_number':1488,'multiline':True]
['text':' calculate destination size ','line_number':1537,'multiline':True]
['text':' TODO: do we ever need to do this pure preflighting? ','line_number':1538,'multiline':True]
['text':'
         * need a temporary buffer of size max(outputSize, sourceLength)
         * because at first we copy source->temp
         ','line_number':1552,'multiline':True]
['text':' Start of Arabic letter shaping part ','line_number':1560,'multiline':True]
['text':'Test for NULL','line_number':1567,'multiline':True]
['text':' Call the shaping function with tashkeel flag == 2 for removal of tashkeel ','line_number':1602,'multiline':True]
['text':' default Call the shaping function with tashkeel flag == 1 ','line_number':1605,'multiline':True]
['text':'After shaping text check if user wants to remove tashkeel and replace it with tatweel','line_number':1608,'multiline':True]
['text':' Call the shaping function with tashkeel flag == 0 ','line_number':1615,'multiline':True]
['text':' Call the deshaping function ','line_number':1620,'multiline':True]
['text':' will never occur because of validity checks above ','line_number':1624,'multiline':True]
['text':'
         * TODO: (markus 2002aug01)
         * For as long as we always preflight the outputSize above
         * we should U_ASSERT(outputSize==destLength)
         * except for the adjustment above before the tempbuffer allocation
         ','line_number':1629,'multiline':True]
['text':' End of Arabic letter shaping part ','line_number':1651,'multiline':True]
['text':'
         * No letter shaping:
         * just make sure the destination is large enough and copy the string.
         ','line_number':1653,'multiline':True]
['text':' this catches preflighting, too ','line_number':1658,'multiline':True]
['text':'
     * Perform number shaping.
     * With UTF-16 or UTF-32, the length of the string is constant.
     * The easiest way to do this is to operate on the destination and
     * "shape" the digits in-place.
     ','line_number':1666,'multiline':True]
['text':' select the requested digit group ','line_number':1676,'multiline':True]
['text':' Unicode: "Arabic-Indic digits" ','line_number':1679,'multiline':True]
['text':' Unicode: "Eastern Arabic-Indic digits (Persian and Urdu)" ','line_number':1682,'multiline':True]
['text':' will never occur because of validity checks above ','line_number':1685,'multiline':True]
['text':' perform the requested operation ','line_number':1690,'multiline':True]
['text':' add (digitBase-'0') to each European (ASCII) digit code point ','line_number':1693,'multiline':True]
['text':' subtract (digitBase-'0') from each Arabic digit code point ','line_number':1702,'multiline':True]
['text':' will never occur because of validity checks above ','line_number':1722,'multiline':True]
