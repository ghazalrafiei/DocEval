['text':' Copyright (C) 2009-2013, International Business Machines','line_number':1,'multiline':False]
['text':' Corporation and others. All Rights Reserved.','line_number':2,'multiline':False]
['text':'','line_number':3,'multiline':False]
['text':' Copyright 2001 and onwards Google Inc.','line_number':4,'multiline':False]
['text':' Author: Sanjay Ghemawat','line_number':5,'multiline':False]
['text':' This code is a contribution of Google code, and the style used here is','line_number':7,'multiline':False]
['text':' a compromise between the original Google code and the ICU coding guidelines.','line_number':8,'multiline':False]
['text':' For example, data types are ICU-ified (size_t,int->int32_t),','line_number':9,'multiline':False]
['text':' and API comments doxygen-ified, but function names and behavior are','line_number':10,'multiline':False]
['text':' as in the original, if possible.','line_number':11,'multiline':False]
['text':' Assertion-style error handling, not available in ICU, was changed to','line_number':12,'multiline':False]
['text':' parameter "pinning" similar to UnicodeString.','line_number':13,'multiline':False]
['text':'','line_number':14,'multiline':False]
['text':' In addition, this is only a partial port of the original Google code,','line_number':15,'multiline':False]
['text':' limited to what was needed so far. The (nearly) complete original code','line_number':16,'multiline':False]
['text':' is in the ICU svn repository at icuhtml/trunk/design/strings/contrib','line_number':17,'multiline':False]
['text':' (see ICU ticket 6765, r25517).','line_number':18,'multiline':False]
['text':'*
 * \file 
 * \brief C++ API: StringPiece: Read-only byte string wrapper class.
 ','line_number':23,'multiline':True]
['text':' Arghh!  I wish C++ literals were "string".','line_number':32,'multiline':False]
['text':'*
 * A string-like object that points to a sized piece of memory.
 *
 * We provide non-explicit singleton constructors so users can pass
 * in a "const char*" or a "string" wherever a "StringPiece" is
 * expected.
 *
 * Functions or methods may use const StringPiece& parameters to accept either
 * a "const char*" or a "string" value that will be implicitly converted to
 * a StringPiece.
 *
 * Systematic usage of StringPiece is encouraged as it will reduce unnecessary
 * conversions from "const char*" to "string" and back again.
 *
 * @stable ICU 4.2
 ','line_number':36,'multiline':True]
['text':'*
   * Default constructor, creates an empty StringPiece.
   * @stable ICU 4.2
   ','line_number':58,'multiline':True]
['text':'*
   * Constructs from a NUL-terminated const char * pointer.
   * @param str a NUL-terminated const char * pointer
   * @stable ICU 4.2
   ','line_number':63,'multiline':True]
['text':'*
   * Constructs from a std::string.
   * @stable ICU 4.2
   ','line_number':70,'multiline':True]
['text':'*
   * Constructs from a const char * pointer and a specified length.
   * @param offset a const char * pointer (need not be terminated)
   * @param len the length of the string; must be non-negative
   * @stable ICU 4.2
   ','line_number':77,'multiline':True]
['text':'*
   * Substring of another StringPiece.
   * @param x the other StringPiece
   * @param pos start position in x; must be non-negative and <= x.length().
   * @stable ICU 4.2
   ','line_number':84,'multiline':True]
['text':'*
   * Substring of another StringPiece.
   * @param x the other StringPiece
   * @param pos start position in x; must be non-negative and <= x.length().
   * @param len length of the substring;
   *            must be non-negative and will be pinned to at most x.length() - pos.
   * @stable ICU 4.2
   ','line_number':91,'multiline':True]
['text':'*
   * Returns the string pointer. May be NULL if it is empty.
   *
   * data() may return a pointer to a buffer with embedded NULs, and the
   * returned buffer may or may not be null terminated.  Therefore it is
   * typically a mistake to pass data() to a routine that expects a NUL
   * terminated string.
   * @return the string pointer
   * @stable ICU 4.2
   ','line_number':101,'multiline':True]
['text':'*
   * Returns the string length. Same as length().
   * @return the string length
   * @stable ICU 4.2
   ','line_number':112,'multiline':True]
['text':'*
   * Returns the string length. Same as size().
   * @return the string length
   * @stable ICU 4.2
   ','line_number':118,'multiline':True]
['text':'*
   * Returns whether the string is empty.
   * @return TRUE if the string is empty
   * @stable ICU 4.2
   ','line_number':124,'multiline':True]
['text':'*
   * Sets to an empty string.
   * @stable ICU 4.2
   ','line_number':131,'multiline':True]
['text':'*
   * Reset the stringpiece to refer to new data.
   * @param xdata pointer the new string data.  Need not be nul terminated.
   * @param len the length of the new data
   * @stable ICU 4.8
   ','line_number':137,'multiline':True]
['text':'*
   * Reset the stringpiece to refer to new data.
   * @param str a pointer to a NUL-terminated string. 
   * @stable ICU 4.8
   ','line_number':145,'multiline':True]
['text':'*
   * Removes the first n string units.
   * @param n prefix length, must be non-negative and <=length()
   * @stable ICU 4.2
   ','line_number':152,'multiline':True]
['text':'*
   * Removes the last n string units.
   * @param n suffix length, must be non-negative and <=length()
   * @stable ICU 4.2
   ','line_number':167,'multiline':True]
['text':'*
   * Maximum integer, used as a default value for substring methods.
   * @stable ICU 4.2
   ','line_number':182,'multiline':True]
['text':' = 0x7fffffff;','line_number':186,'multiline':False]
['text':'*
   * Returns a substring of this StringPiece.
   * @param pos start position; must be non-negative and <= length().
   * @param len length of the substring;
   *            must be non-negative and will be pinned to at most length() - pos.
   * @return the substring StringPiece
   * @stable ICU 4.2
   ','line_number':188,'multiline':True]
['text':'*
 * Global operator == for StringPiece
 * @param x The first StringPiece to compare.
 * @param y The second StringPiece to compare.
 * @return TRUE if the string data is equal
 * @stable ICU 4.8
 ','line_number':201,'multiline':True]
['text':'*
 * Global operator != for StringPiece
 * @param x The first StringPiece to compare.
 * @param y The second StringPiece to compare.
 * @return TRUE if the string data is not equal
 * @stable ICU 4.8
 ','line_number':211,'multiline':True]
['text':' __STRINGPIECE_H__','line_number':224,'multiline':False]
