['text':'
***************************************************************************
* Copyright (C) 2008-2015, International Business Machines Corporation
* and others. All Rights Reserved.
***************************************************************************
*   file name:  uspoof.cpp
*   encoding:   US-ASCII
*   tab size:   8 (not used)
*   indentation:4
*
*   created on: 2008Feb13
*   created by: Andy Heninger
*
*   Unicode Spoof Detection
','line_number':1,'multiline':True]
['text':'','line_number':37,'multiline':False]
['text':' Static Objects used by the spoof impl, their thread safe initialization and their cleanup.','line_number':38,'multiline':False]
['text':'','line_number':39,'multiline':False]
['text':' Will delete, assuming all user-level spoof checkers were closed.','line_number':55,'multiline':False]
['text':' Note: data from http://unicode.org/Public/security/latest/xidmodifications.txt version 8.0.0','line_number':70,'multiline':False]
['text':'       There is no tooling to generate this from the .txt file, hand extracted with editor macros.','line_number':71,'multiline':False]
['text':'       Ultimately, data will be available as character properties, eliminating this.','line_number':72,'multiline':False]
['text':' Note: concatenated string constants do not work with UNICODE_STRING_SIMPLE on all platforms.','line_number':73,'multiline':False]
['text':' copy constructor','line_number':203,'multiline':False]
['text':' Verify that the requested checks are all ones (bits) that ','line_number':227,'multiline':False]
['text':'   are acceptable, known values.','line_number':228,'multiline':False]
['text':' Aliasing constructor.','line_number':344,'multiline':False]
['text':' Aliasing constructor','line_number':379,'multiline':False]
['text':' Aliasing constructor','line_number':380,'multiline':False]
['text':' ','line_number':414,'multiline':False]
['text':' See section 4 of UAX 39 for the algorithm for checking whether two strings are confusable,','line_number':415,'multiline':False]
['text':'   and for definitions of the types (single, whole, mixed-script) of confusables.','line_number':416,'multiline':False]
['text':' We only care about a few of the check flags.  Ignore the others.','line_number':418,'multiline':False]
['text':' If no tests relavant to this function have been specified, return an error.','line_number':419,'multiline':False]
['text':' TODO:  is this really the right thing to do?  It's probably an error on the caller's part,','line_number':420,'multiline':False]
['text':'        but logically we would just return 0 (no error).','line_number':421,'multiline':False]
['text':' If the two inputs are single script confusable they cannot also be','line_number':457,'multiline':False]
['text':' mixed or whole script confusable, according to the UAX39 definitions.','line_number':458,'multiline':False]
['text':' So we can skip those tests.','line_number':459,'multiline':False]
['text':' Two identifiers are whole script confusable if each is of a single script ','line_number':463,'multiline':False]
['text':' and they are mixed script confusable.','line_number':464,'multiline':False]
['text':'','line_number':468,'multiline':False]
['text':' Mixed Script Check','line_number':469,'multiline':False]
['text':'','line_number':470,'multiline':False]
['text':' For getSkeleton(), resetting the USPOOF_SINGLE_SCRIPT_CONFUSABLE flag will get us','line_number':472,'multiline':False]
['text':' the mixed script table skeleton, which is what we want.','line_number':473,'multiline':False]
['text':' The Any Case / Lower Case bit in the skelton flags was set at the top of the function.','line_number':474,'multiline':False]
['text':' TODO: ICU4J returns the UnicodeSet of the numerics found in the identifier.','line_number':532,'multiline':False]
['text':'       We have no easy way to do the same in C.','line_number':533,'multiline':False]
['text':' if (checkResult != null) {','line_number':534,'multiline':False]
['text':'     checkResult.numerics = numerics;','line_number':535,'multiline':False]
['text':' }','line_number':536,'multiline':False]
['text':' These are the checks that need to be done on NFD input','line_number':556,'multiline':False]
['text':' scan for more than one occurence of the same non-spacing mark','line_number':563,'multiline':False]
['text':' in a sequence of non-spacing marks.','line_number':564,'multiline':False]
['text':' Set of combining marks in a single combining sequence.','line_number':569,'multiline':False]
['text':' report the error, and stop scanning.','line_number':591,'multiline':False]
['text':' No need to find more than the first failure.','line_number':592,'multiline':False]
['text':' The basic test is the same for both whole and mixed script confusables.','line_number':602,'multiline':False]
['text':' Compute the set of scripts that every input character has a confusable in.','line_number':603,'multiline':False]
['text':' For this computation an input character is always considered to be','line_number':604,'multiline':False]
['text':' confusable with itself in its own script.','line_number':605,'multiline':False]
['text':'','line_number':606,'multiline':False]
['text':' If the number of such scripts is two or more, and the input consisted of','line_number':607,'multiline':False]
['text':' characters all from a single script, we have a whole script confusable.','line_number':608,'multiline':False]
['text':' (The two scripts will be the original script and the one that is confusable)','line_number':609,'multiline':False]
['text':'','line_number':610,'multiline':False]
['text':' If the number of such scripts >= one, and the original input contained characters from','line_number':611,'multiline':False]
['text':' more than one script, we have a mixed script confusable.  (We can transform','line_number':612,'multiline':False]
['text':' some of the characters, and end up with a visually similar string all in','line_number':613,'multiline':False]
['text':' one script.)','line_number':614,'multiline':False]
['text':'printf("confusableScriptCount = %d\n", confusableScriptCount);','line_number':629,'multiline':False]
['text':' Aliasing constructor','line_number':670,'multiline':False]
['text':' Apply the skeleton mapping to the NFD normalized input string','line_number':712,'multiline':False]
['text':' Accumulate the skeleton, possibly unnormalized, in a UnicodeString.','line_number':713,'multiline':False]
['text':' !UCONFIG_NO_NORMALIZATION','line_number':799,'multiline':False]
