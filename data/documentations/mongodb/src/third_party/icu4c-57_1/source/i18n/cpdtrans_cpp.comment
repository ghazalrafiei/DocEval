['text':'
**********************************************************************
*   Copyright (C) 1999-2011, International Business Machines
*   Corporation and others.  All Rights Reserved.
**********************************************************************
*   Date        Name        Description
*   11/17/99    aliu        Creation.
**********************************************************************
','line_number':1,'multiline':True]
['text':' keep in sync with Transliterator','line_number':22,'multiline':False]
['text':'static const UChar ID_SEP   = 0x002D; /*-*/','line_number':23,'multiline':False]
['text':';','line_number':24,'multiline':True]
['text':'"::"','line_number':27,'multiline':False]
['text':' "%Pass"','line_number':31,'multiline':False]
['text':'*
 * Constructs a new compound transliterator given an array of
 * transliterators.  The array of transliterators may be of any
 * length, including zero or one, however, useful compound
 * transliterators have at least two components.
 * @param transliterators array of <code>Transliterator</code>
 * objects
 * @param transliteratorCount The number of
 * <code>Transliterator</code> objects in transliterators.
 * @param filter the filter.  Any character for which
 * <tt>filter.contains()</tt> returns <tt>false</tt> will not be
 * altered by this transliterator.  If <tt>filter</tt> is
 * <tt>null</tt> then no filtering is applied.
 ','line_number':35,'multiline':True]
['text':'*
 * Splits an ID of the form "ID;ID;..." into a compound using each
 * of the IDs. 
 * @param id of above form
 * @param forward if false, does the list in reverse order, and
 * takes the inverse of each ID.
 ','line_number':58,'multiline':True]
['text':'parseError','line_number':68,'multiline':True]
['text':' TODO add code for parseError...currently unused, but','line_number':72,'multiline':False]
['text':' later may be used by parsing code...','line_number':73,'multiline':False]
['text':'parseError','line_number':78,'multiline':True]
['text':' set filter to 0 here!','line_number':80,'multiline':False]
['text':' TODO add code for parseError...currently unused, but','line_number':82,'multiline':False]
['text':' later may be used by parsing code...','line_number':83,'multiline':False]
['text':'*
 * Private constructor for use of TransliteratorAlias
 ','line_number':88,'multiline':True]
['text':'parseError','line_number':95,'multiline':True]
['text':'*
 * Private constructor for Transliterator from a vector of
 * transliterators.  The caller is responsible for fixing up the
 * ID.
 ','line_number':103,'multiline':True]
['text':'parseError','line_number':109,'multiline':True]
['text':' TODO add code for parseError...currently unused, but','line_number':114,'multiline':False]
['text':' later may be used by parsing code...','line_number':115,'multiline':False]
['text':' assume caller will fixup ID','line_number':117,'multiline':False]
['text':'parseError','line_number':122,'multiline':True]
['text':'*
 * Finish constructing a transliterator: only to be called by
 * constructors.  Before calling init(), set trans and filter to NULL.
 * @param id the id containing ';'-separated entries
 * @param direction either FORWARD or REVERSE
 * @param idSplitPoint the index into id at which the
 * adoptedSplitTransliterator should be inserted, if there is one, or
 * -1 if there is none.
 * @param adoptedSplitTransliterator a transliterator to be inserted
 * before the entry at offset idSplitPoint in the id string.  May be
 * NULL to insert no entry.
 * @param fixReverseID if TRUE, then reconstruct the ID of reverse
 * entries by calling getID() of component entries.  Some constructors
 * do not require this because they apply a facade ID anyway.
 * @param status the error code indicating success or failure
 ','line_number':130,'multiline':True]
['text':' assert(trans == 0);','line_number':150,'multiline':False]
['text':'*
 * Finish constructing a transliterator: only to be called by
 * constructors.  Before calling init(), set trans and filter to NULL.
 * @param list a vector of transliterator objects to be adopted.  It
 * should NOT be empty.  The list should be in declared order.  That
 * is, it should be in the FORWARD order; if direction is REVERSE then
 * the list order will be reversed.
 * @param direction either FORWARD or REVERSE
 * @param fixReverseID if TRUE, then reconstruct the ID of reverse
 * entries by calling getID() of component entries.  Some constructors
 * do not require this because they apply a facade ID anyway.
 * @param status the error code indicating success or failure
 ','line_number':175,'multiline':True]
['text':' assert(trans == 0);','line_number':192,'multiline':False]
['text':' Allocate array','line_number':194,'multiline':False]
['text':' test for NULL ','line_number':198,'multiline':True]
['text':' assert(trans == 0);','line_number':206,'multiline':False]
['text':' Move the transliterators from the vector into an array.','line_number':210,'multiline':False]
['text':' Reverse the order if necessary.','line_number':211,'multiline':False]
['text':' If the direction is UTRANS_REVERSE then we may need to fix the','line_number':218,'multiline':False]
['text':' ID.','line_number':219,'multiline':False]
['text':'*
 * Return the IDs of the given list of transliterators, concatenated
 * with ID_DELIM delimiting them.  Equivalent to the perlish expression
 * join(ID_DELIM, map($_.getID(), transliterators).
 ','line_number':234,'multiline':True]
['text':' Return temporary','line_number':248,'multiline':False]
['text':'*
 * Copy constructor.
 ','line_number':251,'multiline':True]
['text':'*
 * Destructor
 ','line_number':259,'multiline':True]
['text':'*
 * Assignment operator.
 ','line_number':277,'multiline':True]
['text':' if memory allocation failed delete backwards trans array','line_number':309,'multiline':False]
['text':'*
 * Transliterator API.
 ','line_number':321,'multiline':True]
['text':'*
 * Returns the number of transliterators in this chain.
 * @return number of transliterators in this chain.
 ','line_number':328,'multiline':True]
['text':'*
 * Returns the transliterator at the given index in this chain.
 * @param index index into chain, from 0 to <code>getCount() - 1</code>
 * @return transliterator at the given index
 ','line_number':336,'multiline':True]
['text':' First free trans[] and set count to zero.  Once this is done,','line_number':373,'multiline':False]
['text':' orphan the filter.  Set up the new trans[].','line_number':374,'multiline':False]
['text':'*
 * Append c to buf, unless buf is empty or buf already ends in c.
 ','line_number':382,'multiline':True]
['text':' We do NOT call toRules() on our component transliterators, in','line_number':394,'multiline':False]
['text':' general.  If we have several rule-based transliterators, this','line_number':395,'multiline':False]
['text':' yields a concatenation of the rules -- not what we want.  We do','line_number':396,'multiline':False]
['text':' handle compound RBT transliterators specially -- those for which','line_number':397,'multiline':False]
['text':' compoundRBTIndex >= 0.  For the transliterator at compoundRBTIndex,','line_number':398,'multiline':False]
['text':' we do call toRules() recursively.','line_number':399,'multiline':False]
['text':' If we are a compound RBT and if we have a global','line_number':402,'multiline':False]
['text':' filter, then emit it at the top.','line_number':403,'multiline':False]
['text':' Anonymous RuleBasedTransliterators (inline rules and','line_number':410,'multiline':False]
['text':' ::BEGIN/::END blocks) are given IDs that begin with','line_number':411,'multiline':False]
['text':' "%Pass": use toRules() to write all the rules to the output','line_number':412,'multiline':False]
['text':' (and insert "::Null;" if we have two in a row)','line_number':413,'multiline':False]
['text':' we also use toRules() on CompoundTransliterators (which we','line_number':419,'multiline':False]
['text':' check for by looking for a semicolon in the ID)-- this gets','line_number':420,'multiline':False]
['text':' the list of their child transliterators output in the right','line_number':421,'multiline':False]
['text':' format','line_number':422,'multiline':False]
['text':' for everything else, use Transliterator::toRules()','line_number':426,'multiline':False]
['text':'*
 * Implement Transliterator framework
 ','line_number':437,'multiline':True]
['text':' Take the example of Hiragana-Latin.  This is really','line_number':445,'multiline':False]
['text':' Hiragana-Katakana; Katakana-Latin.  The source set of','line_number':446,'multiline':False]
['text':' these two is roughly [:Hiragana:] and [:Katakana:].','line_number':447,'multiline':False]
['text':' But the source set for the entire transliterator is','line_number':448,'multiline':False]
['text':' actually [:Hiragana:] ONLY -- that is, the first','line_number':449,'multiline':False]
['text':' non-empty source set.','line_number':450,'multiline':False]
['text':' This is a heuristic, and not 100% reliable.','line_number':452,'multiline':False]
['text':'*
 * Override Transliterator framework
 ','line_number':459,'multiline':True]
['text':' This is a heuristic, and not 100% reliable.','line_number':466,'multiline':False]
['text':'*
 * Implements {@link Transliterator#handleTransliterate}.
 ','line_number':472,'multiline':True]
['text':' Call each transliterator with the same contextStart and
     * start, but with the limit as modified
     * by preceding transliterators.  The start index must be
     * reset for each transliterator to give each a chance to
     * transliterate the text.  The initial contextStart index is known
     * to still point to the same place after each transliterator
     * is called because each transliterator will not change the
     * text between contextStart and the initial start index.
     *
     * IMPORTANT: After the first transliterator, each subsequent
     * transliterator only gets to transliterate text committed by
     * preceding transliterators; that is, the start (output
     * value) of transliterator i becomes the limit (input value)
     * of transliterator i+1.  Finally, the overall limit is fixed
     * up before we return.
     *
     * Assumptions we make here:
     * (1) contextStart <= start <= limit <= contextLimit <= text.length()
     * (2) start <= start' <= limit'  ;cursor doesn't move back
     * (3) start <= limit'            ;text before cursor unchanged
     * - start' is the value of start after calling handleKT
     * - limit' is the value of limit after calling handleKT
     ','line_number':477,'multiline':True]
['text':'*
     * Example: 3 transliterators.  This example illustrates the
     * mechanics we need to implement.  C, S, and L are the contextStart,
     * start, and limit.  gl is the globalLimit.  contextLimit is
     * equal to limit throughout.
     *
     * 1. h-u, changes hex to Unicode
     *
     *    4  7  a  d  0      4  7  a
     *    abc/u0061/u    =>  abca/u    
     *    C  S       L       C   S L   gl=f->a
     *
     * 2. upup, changes "x" to "XX"
     *
     *    4  7  a       4  7  a
     *    abca/u    =>  abcAA/u    
     *    C  SL         C    S   
     *                       L    gl=a->b
     * 3. u-h, changes Unicode to hex
     *
     *    4  7  a        4  7  a  d  0  3
     *    abcAA/u    =>  abc/u0041/u0041/u    
     *    C  S L         C              S
     *                                  L   gl=b->15
     * 4. return
     *
     *    4  7  a  d  0  3
     *    abc/u0041/u0041/u    
     *    C S L
     ','line_number':501,'multiline':True]
['text':' Short circuit for empty compound transliterators','line_number':534,'multiline':False]
['text':' compoundLimit is the limit value for the entire compound','line_number':537,'multiline':False]
['text':' operation.  We overwrite index.limit with the previous','line_number':538,'multiline':False]
['text':' index.start.  After each transliteration, we update','line_number':539,'multiline':False]
['text':' compoundLimit for insertions or deletions that have happened.','line_number':540,'multiline':False]
['text':' compoundStart is the start for the entire compound','line_number':543,'multiline':False]
['text':' operation.','line_number':544,'multiline':False]
['text':' delta in length','line_number':547,'multiline':False]
['text':' Give each transliterator a crack at the run of characters.','line_number':549,'multiline':False]
['text':' See comments at the top of the method for more detail.','line_number':550,'multiline':False]
['text':' Reset start','line_number':552,'multiline':False]
['text':' Short circuit for empty range','line_number':556,'multiline':False]
['text':' In a properly written transliterator, start == limit after','line_number':562,'multiline':False]
['text':' handleTransliterate() returns when incremental is false.','line_number':563,'multiline':False]
['text':' Catch cases where the subclass doesn't do this, and throw','line_number':564,'multiline':False]
['text':' an exception.  (Just pinning start to limit is a bad idea,','line_number':565,'multiline':False]
['text':' because what's probably happening is that the subclass','line_number':566,'multiline':False]
['text':' isn't transliterating all the way to the end, and it should','line_number':567,'multiline':False]
['text':' in non-incremental mode.)','line_number':568,'multiline':False]
['text':' We can't throw an exception, so just fudge things','line_number':570,'multiline':False]
['text':' Cumulative delta for insertions/deletions','line_number':574,'multiline':False]
['text':' In the incremental case, only allow subsequent','line_number':578,'multiline':False]
['text':' transliterators to modify what has already been','line_number':579,'multiline':False]
['text':' completely processed by prior transliterators.  In the','line_number':580,'multiline':False]
['text':' non-incrmental case, allow each transliterator to','line_number':581,'multiline':False]
['text':' process the entire text.','line_number':582,'multiline':False]
['text':' Start is good where it is -- where the last transliterator left','line_number':589,'multiline':False]
['text':' it.  Limit needs to be put back where it was, modulo','line_number':590,'multiline':False]
['text':' adjustments for deletions/insertions.','line_number':591,'multiline':False]
['text':'*
 * Sets the length of the longest context required by this transliterator.
 * This is <em>preceding</em> context.
 ','line_number':595,'multiline':True]
['text':' #if !UCONFIG_NO_TRANSLITERATION ','line_number':612,'multiline':True]
['text':' eof ','line_number':614,'multiline':True]
