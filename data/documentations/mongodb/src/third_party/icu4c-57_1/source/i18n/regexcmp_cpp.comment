['text':'','line_number':1,'multiline':False]
['text':'  file:  regexcmp.cpp','line_number':2,'multiline':False]
['text':'','line_number':3,'multiline':False]
['text':'  Copyright (C) 2002-2016 International Business Machines Corporation and others.','line_number':4,'multiline':False]
['text':'  All Rights Reserved.','line_number':5,'multiline':False]
['text':'','line_number':6,'multiline':False]
['text':'  This file contains the ICU regular expression compiler, which is responsible','line_number':7,'multiline':False]
['text':'  for processing a regular expression pattern into the compiled form that','line_number':8,'multiline':False]
['text':'  is used by the match finding engine.','line_number':9,'multiline':False]
['text':'','line_number':10,'multiline':False]
['text':' Contains state table for the regex pattern parser.','line_number':36,'multiline':False]
['text':'   generated by a Perl script.','line_number':37,'multiline':False]
['text':'------------------------------------------------------------------------------','line_number':47,'multiline':False]
['text':'','line_number':48,'multiline':False]
['text':'  Constructor.','line_number':49,'multiline':False]
['text':'','line_number':50,'multiline':False]
['text':'------------------------------------------------------------------------------','line_number':51,'multiline':False]
['text':' Lazy init of all shared global sets (needed for init()'s empty text)','line_number':55,'multiline':False]
['text':' '&'','line_number':81,'multiline':False]
['text':' '-'','line_number':82,'multiline':False]
['text':'------------------------------------------------------------------------------','line_number':85,'multiline':False]
['text':'','line_number':86,'multiline':False]
['text':'  Destructor','line_number':87,'multiline':False]
['text':'','line_number':88,'multiline':False]
['text':'------------------------------------------------------------------------------','line_number':89,'multiline':False]
['text':' Normally will be NULL, but can exist if pattern','line_number':91,'multiline':False]
['text':'   compilation stops with a syntax error.','line_number':92,'multiline':False]
['text':'------------------------------------------------------------------------------','line_number':99,'multiline':False]
['text':'','line_number':100,'multiline':False]
['text':'  Compile regex pattern.   The state machine for rexexp pattern parsing is here.','line_number':101,'multiline':False]
['text':'                           The state tables are hand-written in the file regexcst.txt,','line_number':102,'multiline':False]
['text':'                           and converted to the form used here by a perl','line_number':103,'multiline':False]
['text':'                           script regexcst.pl','line_number':104,'multiline':False]
['text':'','line_number':105,'multiline':False]
['text':'------------------------------------------------------------------------------','line_number':106,'multiline':False]
['text':' Source pat to be compiled.','line_number':108,'multiline':False]
['text':' Error position info','line_number':109,'multiline':False]
['text':' Error Code','line_number':110,'multiline':False]
['text':'','line_number':122,'multiline':False]
['text':'   compile, UText mode','line_number':123,'multiline':False]
['text':'     All the work is actually done here.','line_number':124,'multiline':False]
['text':'','line_number':125,'multiline':False]
['text':' Source pat to be compiled.','line_number':127,'multiline':False]
['text':' Error position info','line_number':128,'multiline':False]
['text':' Error Code','line_number':129,'multiline':False]
['text':' There should be no pattern stuff in the RegexPattern object.  They can not be reused.','line_number':140,'multiline':False]
['text':' Prepare the RegexPattern object to receive the compiled pattern.','line_number':143,'multiline':False]
['text':' Initialize the pattern scanning state machine','line_number':152,'multiline':False]
['text':' UREGEX_LITERAL force entire pattern to be treated as a literal string.','line_number':157,'multiline':False]
['text':' Fetch the first char from the pattern string.','line_number':162,'multiline':False]
['text':'','line_number':164,'multiline':False]
['text':' Main loop for the regex pattern parsing state machine.','line_number':165,'multiline':False]
['text':'   Runs once per state transition.','line_number':166,'multiline':False]
['text':'   Each time through optionally performs, depending on the state table,','line_number':167,'multiline':False]
['text':'      - an advance to the the next pattern char','line_number':168,'multiline':False]
['text':'      - an action to be performed.','line_number':169,'multiline':False]
['text':'      - pushing or popping a state to/from the local state return stack.','line_number':170,'multiline':False]
['text':'   file regexcst.txt is the source for the state table.  The logic behind','line_number':171,'multiline':False]
['text':'     recongizing the pattern syntax is there, not here.','line_number':172,'multiline':False]
['text':'','line_number':173,'multiline':False]
['text':'  Bail out if anything has gone wrong.','line_number':175,'multiline':False]
['text':'  Regex pattern parsing stops on the first error encountered.','line_number':176,'multiline':False]
['text':' Find the state table element that matches the input char from the pattern, or the','line_number':183,'multiline':False]
['text':'    class of the input character.  Start with the first table row for this','line_number':184,'multiline':False]
['text':'    state, then linearly scan forward until we find a row that matches the','line_number':185,'multiline':False]
['text':'    character.  The last row for each state always matches all characters, so','line_number':186,'multiline':False]
['text':'    the search will stop there, if not before.','line_number':187,'multiline':False]
['text':'','line_number':188,'multiline':False]
['text':' loop through table rows belonging to this state, looking for one','line_number':193,'multiline':False]
['text':'   that matches the current input char.','line_number':194,'multiline':False]
['text':' Table row specified an individual character, not a set, and','line_number':197,'multiline':False]
['text':'   the input character is not quoted, and','line_number':198,'multiline':False]
['text':'   the input character matched it.','line_number':199,'multiline':False]
['text':' Table row specified default, match anything character class.','line_number':203,'multiline':False]
['text':' Table row specified "quoted" and the char was quoted.','line_number':207,'multiline':False]
['text':' Table row specified eof and we hit eof on the input.','line_number':211,'multiline':False]
['text':' Table specs a char class &&','line_number':215,'multiline':False]
['text':'   char is not escaped &&','line_number':216,'multiline':False]
['text':'   char is not EOF','line_number':217,'multiline':False]
['text':' Table row specified a character class, or set of characters,','line_number':220,'multiline':False]
['text':'   and the current char matches it.','line_number':221,'multiline':False]
['text':' No match on this row, advance to the next  row for this state,','line_number':226,'multiline':False]
['text':'','line_number':231,'multiline':False]
['text':' We've found the row of the state table that matches the current input','line_number':232,'multiline':False]
['text':'   character from the rules string.','line_number':233,'multiline':False]
['text':' Perform any action specified  by this row in the state table.','line_number':234,'multiline':False]
['text':' Break out of the state machine loop if the','line_number':236,'multiline':False]
['text':'   the action signalled some kind of error, or','line_number':237,'multiline':False]
['text':'   the action was to exit, occurs on normal end-of-rules-input.','line_number':238,'multiline':False]
['text':'','line_number':252,'multiline':False]
['text':'  NextChar.  This is where characters are actually fetched from the pattern.','line_number':253,'multiline':False]
['text':'             Happens under control of the 'n' tag in the state table.','line_number':254,'multiline':False]
['text':'','line_number':255,'multiline':False]
['text':' Get the next state from the table entry, or from the','line_number':260,'multiline':False]
['text':'   state stack if the next state was specified as "pop".','line_number':261,'multiline':False]
['text':' state stack underflow','line_number':268,'multiline':False]
['text':' This will occur if the user pattern has mis-matched parentheses,','line_number':269,'multiline':False]
['text':'   with extra close parens.','line_number':270,'multiline':False]
['text':'','line_number':271,'multiline':False]
['text':' Bail out if the pattern had errors.','line_number':280,'multiline':False]
['text':'   Set stack cleanup:  a successful compile would have left it empty,','line_number':281,'multiline':False]
['text':'   but errors can leave temporary sets hanging around.','line_number':282,'multiline':False]
['text':'','line_number':289,'multiline':False]
['text':' The pattern has now been read and processed, and the compiled code generated.','line_number':290,'multiline':False]
['text':'','line_number':291,'multiline':False]
['text':'','line_number':293,'multiline':False]
['text':' The pattern's fFrameSize so far has accumulated the requirements for','line_number':294,'multiline':False]
['text':'   storage for capture parentheses, counters, etc. that are encountered','line_number':295,'multiline':False]
['text':'   in the pattern.  Add space for the two variables that are always','line_number':296,'multiline':False]
['text':'   present in the saved state:  the input string position (int64_t) and','line_number':297,'multiline':False]
['text':'   the position in the compiled pattern.','line_number':298,'multiline':False]
['text':'','line_number':299,'multiline':False]
['text':'','line_number':302,'multiline':False]
['text':' Optimization pass 1: NOPs, back-references, and case-folding','line_number':303,'multiline':False]
['text':'','line_number':304,'multiline':False]
['text':'','line_number':307,'multiline':False]
['text':' Get bounds for the minimum and maximum length of a string that this','line_number':308,'multiline':False]
['text':'   pattern can match.  Used to avoid looking for matches in strings that','line_number':309,'multiline':False]
['text':'   are too short.','line_number':310,'multiline':False]
['text':'','line_number':311,'multiline':False]
['text':'','line_number':314,'multiline':False]
['text':' Optimization pass 2: match start type','line_number':315,'multiline':False]
['text':'','line_number':316,'multiline':False]
['text':'','line_number':319,'multiline':False]
['text':' Set up fast latin-1 range sets','line_number':320,'multiline':False]
['text':'','line_number':321,'multiline':False]
['text':' Null pointer check.','line_number':324,'multiline':False]
['text':'------------------------------------------------------------------------------','line_number':341,'multiline':False]
['text':'','line_number':342,'multiline':False]
['text':'  doParseAction        Do some action during regex pattern parsing.','line_number':343,'multiline':False]
['text':'                       Called by the parse state machine.','line_number':344,'multiline':False]
['text':'','line_number':345,'multiline':False]
['text':'                       Generation of the match engine PCode happens here, or','line_number':346,'multiline':False]
['text':'                       in functions called from the parse actions defined here.','line_number':347,'multiline':False]
['text':'','line_number':348,'multiline':False]
['text':'','line_number':349,'multiline':False]
['text':'------------------------------------------------------------------------------','line_number':350,'multiline':False]
['text':' Start of pattern compiles to:','line_number':358,'multiline':False]
['text':'0   SAVE   2        Fall back to position of FAIL','line_number':359,'multiline':False]
['text':'1   jmp    3','line_number':360,'multiline':False]
['text':'2   FAIL            Stop if we ever reach here.','line_number':361,'multiline':False]
['text':'3   NOP             Dummy, so start of pattern looks the same as','line_number':362,'multiline':False]
['text':'                    the start of an ( grouping.','line_number':363,'multiline':False]
['text':'4   NOP             Resreved, will be replaced by a save if there are','line_number':364,'multiline':False]
['text':'                    OR | operators at the top level','line_number':365,'multiline':False]
['text':' Standard open nonCapture paren action emits the two NOPs and','line_number':370,'multiline':False]
['text':'   sets up the paren stack frame.','line_number':371,'multiline':False]
['text':' We've scanned to the end of the pattern','line_number':376,'multiline':False]
['text':'  The end of pattern compiles to:','line_number':377,'multiline':False]
['text':'        URX_END','line_number':378,'multiline':False]
['text':'    which will stop the runtime match engine.','line_number':379,'multiline':False]
['text':'  Encountering end of pattern also behaves like a close paren,','line_number':380,'multiline':False]
['text':'   and forces fixups of the State Save at the beginning of the compiled pattern','line_number':381,'multiline':False]
['text':'   and of any OR operations at the top level.','line_number':382,'multiline':False]
['text':'','line_number':383,'multiline':False]
['text':' Missing close paren in pattern.','line_number':386,'multiline':False]
['text':' add the END operation to the compiled pattern.','line_number':390,'multiline':False]
['text':' Terminate the pattern compilation state machine.','line_number':393,'multiline':False]
['text':' Scanning a '|', as in (A|B)','line_number':400,'multiline':False]
['text':' Generate code for any pending literals preceding the '|'','line_number':402,'multiline':False]
['text':' Insert a SAVE operation at the start of the pattern section preceding','line_number':405,'multiline':False]
['text':'   this OR at this level.  This SAVE will branch the match forward','line_number':406,'multiline':False]
['text':'   to the right hand side of the OR in the event that the left hand','line_number':407,'multiline':False]
['text':'   side fails to match and backtracks.  Locate the position for the','line_number':408,'multiline':False]
['text':'   save from the location on the top of the parentheses stack.','line_number':409,'multiline':False]
['text':' original contents of reserved location','line_number':412,'multiline':False]
['text':' Append an JMP operation into the compiled pattern.  The operand for','line_number':416,'multiline':False]
['text':'  the JMP will eventually be the location following the ')' for the','line_number':417,'multiline':False]
['text':'  group.  This will be patched in later, when the ')' is encountered.','line_number':418,'multiline':False]
['text':' Push the position of the newly added JMP op onto the parentheses stack.','line_number':421,'multiline':False]
['text':' This registers if for fixup when this block's close paren is encountered.','line_number':422,'multiline':False]
['text':' Append a NOP to the compiled pattern.  This is the slot reserved','line_number':425,'multiline':False]
['text':'   for a SAVE in the event that there is yet another '|' following','line_number':426,'multiline':False]
['text':'   this one.','line_number':427,'multiline':False]
['text':' Scanning (?<letter.','line_number':435,'multiline':False]
['text':'   The first letter of the name will come through again under doConinueNamedCapture.','line_number':436,'multiline':False]
['text':' Open Capturing Paren, possibly named.','line_number':452,'multiline':False]
['text':'   Compile to a','line_number':453,'multiline':False]
['text':'      - NOP, which later may be replaced by a save-state if the','line_number':454,'multiline':False]
['text':'         parenthesized group gets a * quantifier, followed by','line_number':455,'multiline':False]
['text':'      - START_CAPTURE  n    where n is stack frame offset to the capture group variables.','line_number':456,'multiline':False]
['text':'      - NOP, which may later be replaced by a save-state if there','line_number':457,'multiline':False]
['text':'             is an '|' alternation within the parens.','line_number':458,'multiline':False]
['text':'','line_number':459,'multiline':False]
['text':'    Each capture group gets three slots in the save stack frame:','line_number':460,'multiline':False]
['text':'         0: Capture Group start position (in input string being matched.)','line_number':461,'multiline':False]
['text':'         1: Capture Group end position.','line_number':462,'multiline':False]
['text':'         2: Start of Match-in-progress.','line_number':463,'multiline':False]
['text':'    The first two locations are for a completed capture group, and are','line_number':464,'multiline':False]
['text':'     referred to by back references and the like.','line_number':465,'multiline':False]
['text':'    The third location stores the capture start position when an START_CAPTURE is','line_number':466,'multiline':False]
['text':'      encountered.  This will be promoted to a completed capture when (and if) the corresponding','line_number':467,'multiline':False]
['text':'      END_CAPTURE is encountered.','line_number':468,'multiline':False]
['text':' Reserve three slots in match stack frame.','line_number':472,'multiline':False]
['text':' On the Parentheses stack, start a new frame and add the postions','line_number':476,'multiline':False]
['text':'   of the two NOPs.  Depending on what follows in the pattern, the','line_number':477,'multiline':False]
['text':'   NOPs may be changed to SAVE_STATE or JMP ops, with a target','line_number':478,'multiline':False]
['text':'   address of the end of the parenthesized group.','line_number':479,'multiline':False]
['text':' Match mode state','line_number':480,'multiline':False]
['text':' Frame type.','line_number':481,'multiline':False]
['text':' The first  NOP location','line_number':482,'multiline':False]
['text':' The second NOP loc','line_number':483,'multiline':False]
['text':' Save the mapping from group number to stack frame variable position.','line_number':485,'multiline':False]
['text':' If this is a named capture group, add the name->group number mapping.','line_number':488,'multiline':False]
['text':' hash table takes ownership of the name (key) string.','line_number':492,'multiline':False]
['text':' Open non-caputuring (grouping only) Paren.','line_number':501,'multiline':False]
['text':'   Compile to a','line_number':502,'multiline':False]
['text':'      - NOP, which later may be replaced by a save-state if the','line_number':503,'multiline':False]
['text':'         parenthesized group gets a * quantifier, followed by','line_number':504,'multiline':False]
['text':'      - NOP, which may later be replaced by a save-state if there','line_number':505,'multiline':False]
['text':'             is an '|' alternation within the parens.','line_number':506,'multiline':False]
['text':' On the Parentheses stack, start a new frame and add the postions','line_number':512,'multiline':False]
['text':'   of the two NOPs.','line_number':513,'multiline':False]
['text':' Match mode state','line_number':514,'multiline':False]
['text':' Begin a new frame.','line_number':515,'multiline':False]
['text':' The first  NOP location','line_number':516,'multiline':False]
['text':' The second NOP loc','line_number':517,'multiline':False]
['text':' Open Atomic Paren.  (?>','line_number':523,'multiline':False]
['text':'   Compile to a','line_number':524,'multiline':False]
['text':'      - NOP, which later may be replaced if the parenthesized group','line_number':525,'multiline':False]
['text':'         has a quantifier, followed by','line_number':526,'multiline':False]
['text':'      - STO_SP  save state stack position, so it can be restored at the ")"','line_number':527,'multiline':False]
['text':'      - NOP, which may later be replaced by a save-state if there','line_number':528,'multiline':False]
['text':'             is an '|' alternation within the parens.','line_number':529,'multiline':False]
['text':' Reserve a data location for saving the state stack ptr.','line_number':533,'multiline':False]
['text':' On the Parentheses stack, start a new frame and add the postions','line_number':537,'multiline':False]
['text':'   of the two NOPs.  Depending on what follows in the pattern, the','line_number':538,'multiline':False]
['text':'   NOPs may be changed to SAVE_STATE or JMP ops, with a target','line_number':539,'multiline':False]
['text':'   address of the end of the parenthesized group.','line_number':540,'multiline':False]
['text':' Match mode state','line_number':541,'multiline':False]
['text':' Frame type.','line_number':542,'multiline':False]
['text':' The first NOP','line_number':543,'multiline':False]
['text':' The second NOP','line_number':544,'multiline':False]
['text':' Positive Look-ahead   (?=  stuff  )','line_number':550,'multiline':False]
['text':'','line_number':551,'multiline':False]
['text':'   Note:   Addition of transparent input regions, with the need to','line_number':552,'multiline':False]
['text':'           restore the original regions when failing out of a lookahead','line_number':553,'multiline':False]
['text':'           block, complicated this sequence.  Some conbined opcodes','line_number':554,'multiline':False]
['text':'           might make sense - or might not, lookahead aren't that common.','line_number':555,'multiline':False]
['text':'','line_number':556,'multiline':False]
['text':'      Caution:  min match length optimization knows about this','line_number':557,'multiline':False]
['text':'               sequence; don't change without making updates there too.','line_number':558,'multiline':False]
['text':'','line_number':559,'multiline':False]
['text':' Compiles to','line_number':560,'multiline':False]
['text':'    1    START_LA     dataLoc     Saves SP, Input Pos','line_number':561,'multiline':False]
['text':'    2.   STATE_SAVE   4            on failure of lookahead, goto 4','line_number':562,'multiline':False]
['text':'    3    JMP          6           continue ...','line_number':563,'multiline':False]
['text':'','line_number':564,'multiline':False]
['text':'    4.   LA_END                   Look Ahead failed.  Restore regions.','line_number':565,'multiline':False]
['text':'    5.   BACKTRACK                and back track again.','line_number':566,'multiline':False]
['text':'','line_number':567,'multiline':False]
['text':'    6.   NOP              reserved for use by quantifiers on the block.','line_number':568,'multiline':False]
['text':'                          Look-ahead can't have quantifiers, but paren stack','line_number':569,'multiline':False]
['text':'                             compile time conventions require the slot anyhow.','line_number':570,'multiline':False]
['text':'    7.   NOP              may be replaced if there is are '|' ops in the block.','line_number':571,'multiline':False]
['text':'    8.     code for parenthesized stuff.','line_number':572,'multiline':False]
['text':'    9.   LA_END','line_number':573,'multiline':False]
['text':'','line_number':574,'multiline':False]
['text':'  Two data slots are reserved, for saving the stack ptr and the input position.','line_number':575,'multiline':False]
['text':' On the Parentheses stack, start a new frame and add the postions','line_number':587,'multiline':False]
['text':'   of the NOPs.','line_number':588,'multiline':False]
['text':' Match mode state','line_number':589,'multiline':False]
['text':' Frame type.','line_number':590,'multiline':False]
['text':' The first  NOP location','line_number':591,'multiline':False]
['text':' The second NOP location','line_number':592,'multiline':False]
['text':' Negated Lookahead.   (?! stuff )','line_number':597,'multiline':False]
['text':' Compiles to','line_number':598,'multiline':False]
['text':'    1.    START_LA    dataloc','line_number':599,'multiline':False]
['text':'    2.    SAVE_STATE  7         // Fail within look-ahead block restores to this state,','line_number':600,'multiline':False]
['text':'                                //   which continues with the match.','line_number':601,'multiline':False]
['text':'    3.    NOP                   // Std. Open Paren sequence, for possible '|'','line_number':602,'multiline':False]
['text':'    4.       code for parenthesized stuff.','line_number':603,'multiline':False]
['text':'    5.    END_LA                // Cut back stack, remove saved state from step 2.','line_number':604,'multiline':False]
['text':'    6.    BACKTRACK             // code in block succeeded, so neg. lookahead fails.','line_number':605,'multiline':False]
['text':'    7.    END_LA                // Restore match region, in case look-ahead was using','line_number':606,'multiline':False]
['text':'                                        an alternate (transparent) region.','line_number':607,'multiline':False]
['text':' dest address will be patched later.','line_number':612,'multiline':False]
['text':' On the Parentheses stack, start a new frame and add the postions','line_number':615,'multiline':False]
['text':'   of the StateSave and NOP.','line_number':616,'multiline':False]
['text':' Match mode state','line_number':617,'multiline':False]
['text':' Frame type','line_number':618,'multiline':False]
['text':' The STATE_SAVE location','line_number':619,'multiline':False]
['text':' The second NOP location','line_number':620,'multiline':False]
['text':' Instructions #5 - #7 will be added when the ')' is encountered.','line_number':622,'multiline':False]
['text':'   Compile a (?<= look-behind open paren.','line_number':628,'multiline':False]
['text':'','line_number':629,'multiline':False]
['text':'          Compiles to','line_number':630,'multiline':False]
['text':'              0       URX_LB_START     dataLoc','line_number':631,'multiline':False]
['text':'              1       URX_LB_CONT      dataLoc','line_number':632,'multiline':False]
['text':'              2                        MinMatchLen','line_number':633,'multiline':False]
['text':'              3                        MaxMatchLen','line_number':634,'multiline':False]
['text':'              4       URX_NOP          Standard '(' boilerplate.','line_number':635,'multiline':False]
['text':'              5       URX_NOP          Reserved slot for use with '|' ops within (block).','line_number':636,'multiline':False]
['text':'              6         <code for LookBehind expression>','line_number':637,'multiline':False]
['text':'              7       URX_LB_END       dataLoc    # Check match len, restore input  len','line_number':638,'multiline':False]
['text':'              8       URX_LA_END       dataLoc    # Restore stack, input pos','line_number':639,'multiline':False]
['text':'','line_number':640,'multiline':False]
['text':'          Allocate a block of matcher data, to contain (when running a match)','line_number':641,'multiline':False]
['text':'              0:    Stack ptr on entry','line_number':642,'multiline':False]
['text':'              1:    Input Index on entry','line_number':643,'multiline':False]
['text':'              2:    Start index of match current match attempt.','line_number':644,'multiline':False]
['text':'              3:    Original Input String len.','line_number':645,'multiline':False]
['text':' Generate match code for any pending literals.','line_number':647,'multiline':False]
['text':' Allocate data space','line_number':650,'multiline':False]
['text':' Emit URX_LB_START','line_number':653,'multiline':False]
['text':' Emit URX_LB_CONT','line_number':656,'multiline':False]
['text':' MinMatchLength.  To be filled later.','line_number':658,'multiline':False]
['text':' MaxMatchLength.  To be filled later.','line_number':659,'multiline':False]
['text':' Emit the NOPs','line_number':661,'multiline':False]
['text':' On the Parentheses stack, start a new frame and add the postions','line_number':665,'multiline':False]
['text':'   of the URX_LB_CONT and the NOP.','line_number':666,'multiline':False]
['text':' Match mode state','line_number':667,'multiline':False]
['text':' Frame type','line_number':668,'multiline':False]
['text':' The first NOP location','line_number':669,'multiline':False]
['text':' The 2nd   NOP location','line_number':670,'multiline':False]
['text':' The final two instructions will be added when the ')' is encountered.','line_number':672,'multiline':False]
['text':'   Compile a (?<! negated look-behind open paren.','line_number':679,'multiline':False]
['text':'','line_number':680,'multiline':False]
['text':'          Compiles to','line_number':681,'multiline':False]
['text':'              0       URX_LB_START     dataLoc    # Save entry stack, input len','line_number':682,'multiline':False]
['text':'              1       URX_LBN_CONT     dataLoc    # Iterate possible match positions','line_number':683,'multiline':False]
['text':'              2                        MinMatchLen','line_number':684,'multiline':False]
['text':'              3                        MaxMatchLen','line_number':685,'multiline':False]
['text':'              4                        continueLoc (9)','line_number':686,'multiline':False]
['text':'              5       URX_NOP          Standard '(' boilerplate.','line_number':687,'multiline':False]
['text':'              6       URX_NOP          Reserved slot for use with '|' ops within (block).','line_number':688,'multiline':False]
['text':'              7         <code for LookBehind expression>','line_number':689,'multiline':False]
['text':'              8       URX_LBN_END      dataLoc    # Check match len, cause a FAIL','line_number':690,'multiline':False]
['text':'              9       ...','line_number':691,'multiline':False]
['text':'','line_number':692,'multiline':False]
['text':'          Allocate a block of matcher data, to contain (when running a match)','line_number':693,'multiline':False]
['text':'              0:    Stack ptr on entry','line_number':694,'multiline':False]
['text':'              1:    Input Index on entry','line_number':695,'multiline':False]
['text':'              2:    Start index of match current match attempt.','line_number':696,'multiline':False]
['text':'              3:    Original Input String len.','line_number':697,'multiline':False]
['text':' Generate match code for any pending literals.','line_number':699,'multiline':False]
['text':' Allocate data space','line_number':702,'multiline':False]
['text':' Emit URX_LB_START','line_number':705,'multiline':False]
['text':' Emit URX_LBN_CONT','line_number':708,'multiline':False]
['text':' MinMatchLength.  To be filled later.','line_number':710,'multiline':False]
['text':' MaxMatchLength.  To be filled later.','line_number':711,'multiline':False]
['text':' Continue Loc.    To be filled later.','line_number':712,'multiline':False]
['text':' Emit the NOPs','line_number':714,'multiline':False]
['text':' On the Parentheses stack, start a new frame and add the postions','line_number':718,'multiline':False]
['text':'   of the URX_LB_CONT and the NOP.','line_number':719,'multiline':False]
['text':' Match mode state','line_number':720,'multiline':False]
['text':' Frame type','line_number':721,'multiline':False]
['text':' The first NOP location','line_number':722,'multiline':False]
['text':' The 2nd   NOP location','line_number':723,'multiline':False]
['text':' The final two instructions will be added when the ')' is encountered.','line_number':725,'multiline':False]
['text':' Conditionals such as (?(1)a:b)','line_number':730,'multiline':False]
['text':' Perl inline-condtionals.  (?{perl code}a|b) We're not perl, no way to do them.','line_number':732,'multiline':False]
['text':'  Extra close paren, or missing open paren.','line_number':740,'multiline':False]
['text':'  Normal '+'  compiles to','line_number':760,'multiline':False]
['text':'     1.   stuff to be repeated  (already built)','line_number':761,'multiline':False]
['text':'     2.   jmp-sav 1','line_number':762,'multiline':False]
['text':'     3.   ...','line_number':763,'multiline':False]
['text':'','line_number':764,'multiline':False]
['text':'  Or, if the item to be repeated can match a zero length string,','line_number':765,'multiline':False]
['text':'     1.   STO_INP_LOC  data-loc','line_number':766,'multiline':False]
['text':'     2.      body of stuff to be repeated','line_number':767,'multiline':False]
['text':'     3.   JMP_SAV_X    2','line_number':768,'multiline':False]
['text':'     4.   ...','line_number':769,'multiline':False]
['text':'','line_number':771,'multiline':False]
['text':'  Or, if the item to be repeated is simple','line_number':772,'multiline':False]
['text':'     1.   Item to be repeated.','line_number':773,'multiline':False]
['text':'     2.   LOOP_SR_I    set number  (assuming repeated item is a set ref)','line_number':774,'multiline':False]
['text':'     3.   LOOP_C       stack location','line_number':775,'multiline':False]
['text':' location of item #1','line_number':777,'multiline':False]
['text':' Check for simple constructs, which may get special optimized code.','line_number':780,'multiline':False]
['text':' Emit optimized code for [char set]+','line_number':785,'multiline':False]
['text':' Emit Optimized code for .+ operations.','line_number':795,'multiline':False]
['text':' URX_LOOP_DOT_I operand is a flag indicating ". matches any" mode.','line_number':798,'multiline':False]
['text':' General case.','line_number':812,'multiline':False]
['text':' Check for minimum match length of zero, which requires','line_number':814,'multiline':False]
['text':'    extra loop-breaking code.','line_number':815,'multiline':False]
['text':' Zero length match is possible.','line_number':817,'multiline':False]
['text':' Emit the code sequence that can handle it.','line_number':818,'multiline':False]
['text':' Simpler code when the repeated body must match something non-empty','line_number':827,'multiline':False]
['text':'  Non-greedy '+?'  compiles to','line_number':834,'multiline':False]
['text':'     1.   stuff to be repeated  (already built)','line_number':835,'multiline':False]
['text':'     2.   state-save  1','line_number':836,'multiline':False]
['text':'     3.   ...','line_number':837,'multiline':False]
['text':' Normal (greedy) ? quantifier.','line_number':846,'multiline':False]
['text':'  Compiles to','line_number':847,'multiline':False]
['text':'     1. state save 3','line_number':848,'multiline':False]
['text':'     2.    body of optional block','line_number':849,'multiline':False]
['text':'     3. ...','line_number':850,'multiline':False]
['text':' Insert the state save into the compiled pattern, and we're done.','line_number':851,'multiline':False]
['text':' Non-greedy ?? quantifier','line_number':860,'multiline':False]
['text':'   compiles to','line_number':861,'multiline':False]
['text':'    1.  jmp   4','line_number':862,'multiline':False]
['text':'    2.     body of optional block','line_number':863,'multiline':False]
['text':'    3   jmp   5','line_number':864,'multiline':False]
['text':'    4.  state save 2','line_number':865,'multiline':False]
['text':'    5    ...','line_number':866,'multiline':False]
['text':'  This code is less than ideal, with two jmps instead of one, because we can only','line_number':867,'multiline':False]
['text':'  insert one instruction at the top of the block being iterated.','line_number':868,'multiline':False]
['text':' Normal (greedy) * quantifier.','line_number':884,'multiline':False]
['text':' Compiles to','line_number':885,'multiline':False]
['text':'       1.   STATE_SAVE   4','line_number':886,'multiline':False]
['text':'       2.      body of stuff being iterated over','line_number':887,'multiline':False]
['text':'       3.   JMP_SAV      2','line_number':888,'multiline':False]
['text':'       4.   ...','line_number':889,'multiline':False]
['text':'','line_number':890,'multiline':False]
['text':' Or, if the body is a simple [Set],','line_number':891,'multiline':False]
['text':'       1.   LOOP_SR_I    set number','line_number':892,'multiline':False]
['text':'       2.   LOOP_C       stack location','line_number':893,'multiline':False]
['text':'       ...','line_number':894,'multiline':False]
['text':'','line_number':895,'multiline':False]
['text':' Or if this is a .*','line_number':896,'multiline':False]
['text':'       1.   LOOP_DOT_I    (. matches all mode flag)','line_number':897,'multiline':False]
['text':'       2.   LOOP_C        stack location','line_number':898,'multiline':False]
['text':'','line_number':899,'multiline':False]
['text':' Or, if the body can match a zero-length string, to inhibit infinite loops,','line_number':900,'multiline':False]
['text':'       1.   STATE_SAVE   5','line_number':901,'multiline':False]
['text':'       2.   STO_INP_LOC  data-loc','line_number':902,'multiline':False]
['text':'       3.      body of stuff','line_number':903,'multiline':False]
['text':'       4.   JMP_SAV_X    2','line_number':904,'multiline':False]
['text':'       5.   ...','line_number':905,'multiline':False]
['text':' location of item #1, the STATE_SAVE','line_number':907,'multiline':False]
['text':' Check for simple *, where the construct being repeated','line_number':911,'multiline':False]
['text':'   compiled to single opcode, and might be optimizable.','line_number':912,'multiline':False]
['text':' Emit optimized code for a [char set]*','line_number':917,'multiline':False]
['text':' Emit Optimized code for .* operations.','line_number':928,'multiline':False]
['text':' URX_LOOP_DOT_I operand is a flag indicating . matches any mode.','line_number':931,'multiline':False]
['text':' Emit general case code for this *','line_number':944,'multiline':False]
['text':' The optimizations did not apply.','line_number':945,'multiline':False]
['text':' Check for minimum match length of zero, which requires','line_number':950,'multiline':False]
['text':'    extra loop-breaking code.','line_number':951,'multiline':False]
['text':' Locate the position in the compiled pattern where the match will continue','line_number':961,'multiline':False]
['text':'   after completing the *.   (4 or 5 in the comment above)','line_number':962,'multiline':False]
['text':' Put together the save state op and store it into the compiled code.','line_number':965,'multiline':False]
['text':' Append the URX_JMP_SAV or URX_JMPX operation to the compiled pattern.','line_number':969,'multiline':False]
['text':' Non-greedy *? quantifier','line_number':975,'multiline':False]
['text':' compiles to','line_number':976,'multiline':False]
['text':'     1.   JMP    3','line_number':977,'multiline':False]
['text':'     2.      body of stuff being iterated over','line_number':978,'multiline':False]
['text':'     3.   STATE_SAVE  2','line_number':979,'multiline':False]
['text':'     4    ...','line_number':980,'multiline':False]
['text':' loc  1.','line_number':982,'multiline':False]
['text':' loc  3.','line_number':983,'multiline':False]
['text':' The '{' opening an interval quantifier was just scanned.','line_number':992,'multiline':False]
['text':' Init the counter varaiables that will accumulate the values as the digits','line_number':993,'multiline':False]
['text':'    are scanned.','line_number':994,'multiline':False]
['text':' Scanned a digit from the lower value of an {lower,upper} interval','line_number':1000,'multiline':False]
['text':' Scanned a digit from the upper value of an {lower,upper} interval','line_number':1014,'multiline':False]
['text':' Scanned a single value interval like {27}.  Upper = Lower.','line_number':1031,'multiline':False]
['text':' Finished scanning a normal {lower,upper} interval.  Generate the code for it.','line_number':1036,'multiline':False]
['text':' Finished scanning a Possessive {lower,upper}+ interval.  Generate the code for it.','line_number':1043,'multiline':False]
['text':' Remember the loc for the top of the block being looped over.','line_number':1045,'multiline':False]
['text':'   (Can not reserve a slot in the compiled pattern at this time, because','line_number':1046,'multiline':False]
['text':'    compileInterval needs to reserve also, and blockTopLoc can only reserve','line_number':1047,'multiline':False]
['text':'    once per block.)','line_number':1048,'multiline':False]
['text':' Produce normal looping code.','line_number':1051,'multiline':False]
['text':' Surround the just-emitted normal looping code with a STO_SP ... LD_SP','line_number':1054,'multiline':False]
['text':'  just as if the loop was inclosed in atomic parentheses.','line_number':1055,'multiline':False]
['text':' First the STO_SP before the start of the loop','line_number':1057,'multiline':False]
['text':' Reserve a data location for saving the','line_number':1060,'multiline':False]
['text':' point LoopOp after the just-inserted STO_SP','line_number':1066,'multiline':False]
['text':' Then the LD_SP after the end of the loop','line_number':1069,'multiline':False]
['text':' Finished scanning a non-greedy {lower,upper}? interval.  Generate the code for it.','line_number':1076,'multiline':False]
['text':' We've just scanned a "normal" character from the pattern,','line_number':1085,'multiline':False]
['text':' We've just scanned an backslashed escaped character with  no','line_number':1091,'multiline':False]
['text':'   special meaning.  It represents itself.','line_number':1092,'multiline':False]
['text':' in [A-Z]','line_number':1094,'multiline':False]
['text':' in [a-z]','line_number':1095,'multiline':False]
['text':' scanned a ".",  match any single character.','line_number':1103,'multiline':False]
['text':' Only testing true start of input.','line_number':1124,'multiline':False]
['text':' BackReference.  Somewhat unusual in that the front-end can not completely parse','line_number':1279,'multiline':False]
['text':'                 the regular expression, because the number of digits to be consumed','line_number':1280,'multiline':False]
['text':'                 depends on the number of capture groups that have been defined.  So','line_number':1281,'multiline':False]
['text':'                 we have to do it here instead.','line_number':1282,'multiline':False]
['text':' Loop once per digit, for max allowed number of digits in a back reference.','line_number':1289,'multiline':False]
['text':' Scan of the back reference in the source regexp is complete.  Now generate','line_number':1302,'multiline':False]
['text':'  the compiled code for it.','line_number':1303,'multiline':False]
['text':' Because capture groups can be forward-referenced by back-references,','line_number':1304,'multiline':False]
['text':'  we fill the operand with the capture group number.  At the end','line_number':1305,'multiline':False]
['text':'  of compilation, it will be changed to the variable's location.','line_number':1306,'multiline':False]
['text':' Shouldn't happen.  '\0' begins an octal escape sequence,','line_number':1307,'multiline':False]
['text':'    and shouldn't enter this code path at all.','line_number':1308,'multiline':False]
['text':' Group name has not been defined.','line_number':1334,'multiline':False]
['text':'   Could be a forward reference. If we choose to support them at some','line_number':1335,'multiline':False]
['text':'   future time, extra mechanism will be required at this point.','line_number':1336,'multiline':False]
['text':' Given the number, handle identically to a \n numbered back reference.','line_number':1339,'multiline':False]
['text':' See comments above, under doBackRef','line_number':1340,'multiline':False]
['text':' Possessive ++ quantifier.','line_number':1354,'multiline':False]
['text':' Compiles to','line_number':1355,'multiline':False]
['text':'       1.   STO_SP','line_number':1356,'multiline':False]
['text':'       2.      body of stuff being iterated over','line_number':1357,'multiline':False]
['text':'       3.   STATE_SAVE 5','line_number':1358,'multiline':False]
['text':'       4.   JMP        2','line_number':1359,'multiline':False]
['text':'       5.   LD_SP','line_number':1360,'multiline':False]
['text':'       6.   ...','line_number':1361,'multiline':False]
['text':'','line_number':1362,'multiline':False]
['text':'  Note:  TODO:  This is pretty inefficient.  A mass of saved state is built up','line_number':1363,'multiline':False]
['text':'                then unconditionally discarded.  Perhaps introduce a new opcode.  Ticket 6056','line_number':1364,'multiline':False]
['text':'','line_number':1365,'multiline':False]
['text':' Emit the STO_SP','line_number':1367,'multiline':False]
['text':' Reserve the data location for storing save stack ptr.','line_number':1369,'multiline':False]
['text':' Emit the STATE_SAVE','line_number':1373,'multiline':False]
['text':' Emit the JMP','line_number':1376,'multiline':False]
['text':' Emit the LD_SP','line_number':1379,'multiline':False]
['text':' Possessive *+ quantifier.','line_number':1385,'multiline':False]
['text':' Compiles to','line_number':1386,'multiline':False]
['text':'       1.   STO_SP       loc','line_number':1387,'multiline':False]
['text':'       2.   STATE_SAVE   5','line_number':1388,'multiline':False]
['text':'       3.      body of stuff being iterated over','line_number':1389,'multiline':False]
['text':'       4.   JMP          2','line_number':1390,'multiline':False]
['text':'       5.   LD_SP        loc','line_number':1391,'multiline':False]
['text':'       6    ...','line_number':1392,'multiline':False]
['text':' TODO:  do something to cut back the state stack each time through the loop.','line_number':1393,'multiline':False]
['text':' Reserve two slots at the top of the block.','line_number':1395,'multiline':False]
['text':' emit   STO_SP     loc','line_number':1399,'multiline':False]
['text':' Reserve the data location for storing save stack ptr.','line_number':1400,'multiline':False]
['text':' Emit the SAVE_STATE   5','line_number':1404,'multiline':False]
['text':' Append the JMP operation.','line_number':1409,'multiline':False]
['text':' Emit the LD_SP       loc','line_number':1412,'multiline':False]
['text':' Possessive  ?+ quantifier.','line_number':1418,'multiline':False]
['text':'  Compiles to','line_number':1419,'multiline':False]
['text':'     1. STO_SP      loc','line_number':1420,'multiline':False]
['text':'     2. SAVE_STATE  5','line_number':1421,'multiline':False]
['text':'     3.    body of optional block','line_number':1422,'multiline':False]
['text':'     4. LD_SP       loc','line_number':1423,'multiline':False]
['text':'     5. ...','line_number':1424,'multiline':False]
['text':'','line_number':1425,'multiline':False]
['text':' Reserve two slots at the top of the block.','line_number':1427,'multiline':False]
['text':' Emit the STO_SP','line_number':1431,'multiline':False]
['text':' Reserve the data location for storing save stack ptr.','line_number':1432,'multiline':False]
['text':' Emit the SAVE_STATE','line_number':1436,'multiline':False]
['text':' Emit the LD_SP','line_number':1441,'multiline':False]
['text':'  (?i)    and similar','line_number':1452,'multiline':False]
['text':' 'i' ','line_number':1456,'multiline':True]
['text':' 'd' ','line_number':1457,'multiline':True]
['text':' 'm' ','line_number':1458,'multiline':True]
['text':' 's' ','line_number':1459,'multiline':True]
['text':' 'u' ','line_number':1460,'multiline':True]
['text':' Unicode casing ','line_number':1460,'multiline':True]
['text':' 'w' ','line_number':1461,'multiline':True]
['text':' 'x' ','line_number':1462,'multiline':True]
['text':' '-' ','line_number':1463,'multiline':True]
['text':' Should never happen.  Other chars are filtered out','line_number':1465,'multiline':False]
['text':' by the scanner.','line_number':1466,'multiline':False]
['text':' Emit code to match any pending literals, using the not-yet changed match mode.','line_number':1477,'multiline':False]
['text':' We've got a (?i) or similar.  The match mode is being changed, but','line_number':1480,'multiline':False]
['text':'   the change is not scoped to a parenthesized block.','line_number':1481,'multiline':False]
['text':' We've got a (?i: or similar.  Begin a parenthesized block, save old','line_number':1489,'multiline':False]
['text':'   mode flags so they can be restored at the close of the block.','line_number':1490,'multiline':False]
['text':'','line_number':1491,'multiline':False]
['text':'   Compile to a','line_number':1492,'multiline':False]
['text':'      - NOP, which later may be replaced by a save-state if the','line_number':1493,'multiline':False]
['text':'         parenthesized group gets a * quantifier, followed by','line_number':1494,'multiline':False]
['text':'      - NOP, which may later be replaced by a save-state if there','line_number':1495,'multiline':False]
['text':'             is an '|' alternation within the parens.','line_number':1496,'multiline':False]
['text':' On the Parentheses stack, start a new frame and add the postions','line_number':1502,'multiline':False]
['text':'   of the two NOPs (a normal non-capturing () frame, except for the','line_number':1503,'multiline':False]
['text':'   saving of the orignal mode flags.)','line_number':1504,'multiline':False]
['text':' Frame Marker','line_number':1506,'multiline':False]
['text':' The first NOP','line_number':1507,'multiline':False]
['text':' The second NOP','line_number':1508,'multiline':False]
['text':' Set the current mode flags to the new values.','line_number':1510,'multiline':False]
['text':' We have just scanned a '(?'.  We now need to prevent the character scanner from','line_number':1521,'multiline':False]
['text':' treating a '#' as a to-the-end-of-line comment.','line_number':1522,'multiline':False]
['text':'   (This Perl compatibility just gets uglier and uglier to do...)','line_number':1523,'multiline':False]
['text':' TODO - make a static set, ticket 6058.','line_number':1561,'multiline':False]
['text':' TODO - make a static set, ticket 6058.','line_number':1570,'multiline':False]
['text':' Tab','line_number':1582,'multiline':False]
['text':' Tab','line_number':1592,'multiline':False]
['text':' add range','line_number':1601,'multiline':False]
['text':' add range','line_number':1611,'multiline':False]
['text':'  We have scanned something like [[abc]-[','line_number':1645,'multiline':False]
['text':'  Set up a new UnicodeSet for the set beginning with the just-scanned '['','line_number':1646,'multiline':False]
['text':'  Push a Difference operator, which will cause the new set to be subtracted from what','line_number':1647,'multiline':False]
['text':'    went before once it is created.','line_number':1648,'multiline':False]
['text':'  We have scanned something like  [[abc]&[','line_number':1657,'multiline':False]
['text':'   Need both the '&' operator and the open '[' operator.','line_number':1658,'multiline':False]
['text':'  We have scanned something like  [[abc][','line_number':1667,'multiline':False]
['text':'     Need to handle the union operation explicitly [[abc] | [','line_number':1668,'multiline':False]
['text':' We have scanned something like [abc--','line_number':1677,'multiline':False]
['text':'   Consider this to unambiguously be a set difference operator.','line_number':1678,'multiline':False]
['text':' Have encountered the ']' that closes a set.','line_number':1683,'multiline':False]
['text':'    Force the evaluation of any pending operations within this set,','line_number':1684,'multiline':False]
['text':'    leave the completed set on the top of the set stack.','line_number':1685,'multiline':False]
['text':' Finished a complete set expression, including all nested sets.','line_number':1693,'multiline':False]
['text':'   The close bracket has already triggered clearing out pending set operators,','line_number':1694,'multiline':False]
['text':'    the operator stack should be empty and the operand stack should have just','line_number':1695,'multiline':False]
['text':'    one entry, the result set.','line_number':1696,'multiline':False]
['text':' Have scanned something like [abc&&','line_number':1705,'multiline':False]
['text':' Union the just-scanned literal character into the set being built.','line_number':1710,'multiline':False]
['text':'    This operation is the highest precedence set operation, so we can always do','line_number':1711,'multiline':False]
['text':'    it immediately, without waiting to see what follows.  It is necessary to perform','line_number':1712,'multiline':False]
['text':'    any pending '-' or '&' operation first, because these have the same precedence','line_number':1713,'multiline':False]
['text':'    as union-ing in a literal'','line_number':1714,'multiline':False]
['text':' A back-slash escaped literal character was encountered.','line_number':1724,'multiline':False]
['text':' Processing is the same as with setLiteral, above, with the addition of','line_number':1725,'multiline':False]
['text':'  the optional check for errors on escaped ASCII letters.','line_number':1726,'multiline':False]
['text':' in [A-Z]','line_number':1729,'multiline':False]
['text':' in [a-z]','line_number':1730,'multiline':False]
['text':' Scanning a \N{UNICODE CHARACTER NAME}','line_number':1741,'multiline':False]
['text':'  Aside from the source of the character, the processing is identical to doSetLiteral,','line_number':1742,'multiline':False]
['text':'    above.','line_number':1743,'multiline':False]
['text':' We have scanned literal-\N{CHAR NAME}.  Add the range to the set.','line_number':1754,'multiline':False]
['text':' The left character is already in the set, and is saved in fLastSetLiteral.','line_number':1755,'multiline':False]
['text':' The right side needs to be picked up, the scan is at the 'N'.','line_number':1756,'multiline':False]
['text':' Lower Limit > Upper limit being an error matches both Java','line_number':1757,'multiline':False]
['text':'        and ICU UnicodeSet behavior.','line_number':1758,'multiline':False]
['text':' Scanned a '^' at the start of a set.','line_number':1772,'multiline':False]
['text':' Push the negation operator onto the set op stack.','line_number':1773,'multiline':False]
['text':' A twist for case-insensitive matching:','line_number':1774,'multiline':False]
['text':'   the case closure operation must happen _before_ negation.','line_number':1775,'multiline':False]
['text':'   But the case closure operation will already be on the stack if it's required.','line_number':1776,'multiline':False]
['text':'   This requires checking for case closure, and swapping the stack order','line_number':1777,'multiline':False]
['text':'    if it is present.','line_number':1778,'multiline':False]
['text':'  -- or && at the end of a set.  Illegal.','line_number':1796,'multiline':False]
['text':' else error.  scanProp() reported the error status already.','line_number':1806,'multiline':False]
['text':'  Scanned a \p \P within [brackets].','line_number':1811,'multiline':False]
['text':' else error.  scanProp() reported the error status already.','line_number':1818,'multiline':False]
['text':' We have scanned literal-literal.  Add the range to the set.','line_number':1824,'multiline':False]
['text':' The left character is already in the set, and is saved in fLastSetLiteral.','line_number':1825,'multiline':False]
['text':' The right side is the current character.','line_number':1826,'multiline':False]
['text':' Lower Limit > Upper limit being an error matches both Java','line_number':1827,'multiline':False]
['text':'        and ICU UnicodeSet behavior.','line_number':1828,'multiline':False]
['text':'------------------------------------------------------------------------------','line_number':1854,'multiline':False]
['text':'','line_number':1855,'multiline':False]
['text':'   literalChar           We've encountered a literal character from the pattern,','line_number':1856,'multiline':False]
['text':'                             or an escape sequence that reduces to a character.','line_number':1857,'multiline':False]
['text':'                         Add it to the string containing all literal chars/strings from','line_number':1858,'multiline':False]
['text':'                             the pattern.','line_number':1859,'multiline':False]
['text':'','line_number':1860,'multiline':False]
['text':'------------------------------------------------------------------------------','line_number':1861,'multiline':False]
['text':'------------------------------------------------------------------------------','line_number':1867,'multiline':False]
['text':'','line_number':1868,'multiline':False]
['text':'    fixLiterals           When compiling something that can follow a literal','line_number':1869,'multiline':False]
['text':'                          string in a pattern, emit the code to match the','line_number':1870,'multiline':False]
['text':'                          accumulated literal string.','line_number':1871,'multiline':False]
['text':'','line_number':1872,'multiline':False]
['text':'                          Optionally, split the last char of the string off into','line_number':1873,'multiline':False]
['text':'                          a single "ONE_CHAR" operation, so that quantifiers can','line_number':1874,'multiline':False]
['text':'                          apply to that char alone.  Example:   abc*','line_number':1875,'multiline':False]
['text':'                          The * must apply to the 'c' only.','line_number':1876,'multiline':False]
['text':'','line_number':1877,'multiline':False]
['text':'------------------------------------------------------------------------------','line_number':1878,'multiline':False]
['text':' If no literal characters have been scanned but not yet had code generated','line_number':1881,'multiline':False]
['text':'   for them, nothing needs to be done.','line_number':1882,'multiline':False]
['text':' Split:  We need to  ensure that the last item in the compiled pattern','line_number':1890,'multiline':False]
['text':'     refers only to the last literal scanned in the pattern, so that','line_number':1891,'multiline':False]
['text':'     quantifiers (*, +, etc.) affect only it, and not a longer string.','line_number':1892,'multiline':False]
['text':'     Split before case folding for case insensitive matches.','line_number':1893,'multiline':False]
['text':' Recursive call, emit code to match the first part of the string.','line_number':1897,'multiline':False]
['text':'  Note that the truncated literal string may be empty, in which case','line_number':1898,'multiline':False]
['text':'  nothing will be emitted.','line_number':1899,'multiline':False]
['text':' Re-add the last code point as if it were a new literal.','line_number':1901,'multiline':False]
['text':' Second recursive call, code for the final code point.','line_number':1902,'multiline':False]
['text':' If we are doing case-insensitive matching, case fold the string.  This may expand','line_number':1906,'multiline':False]
['text':'   the string, e.g. the German sharp-s turns into "ss"','line_number':1907,'multiline':False]
['text':' Single character, emit a URX_ONECHAR op to match it.','line_number':1915,'multiline':False]
['text':' Two or more chars, emit a URX_STRING to match them.','line_number':1923,'multiline':False]
['text':' TODO here:  add optimization to split case sensitive strings of length two','line_number':1930,'multiline':False]
['text':'             into two single char ops, for efficiency.','line_number':1931,'multiline':False]
['text':' Add this string into the accumulated strings of the compiled pattern.','line_number':1936,'multiline':False]
['text':'------------------------------------------------------------------------------','line_number':1975,'multiline':False]
['text':'','line_number':1976,'multiline':False]
['text':'   appendOp()             Append a new instruction onto the compiled pattern','line_number':1977,'multiline':False]
['text':'                          Includes error checking, limiting the size of the','line_number':1978,'multiline':False]
['text':'                          pattern to lengths that can be represented in the','line_number':1979,'multiline':False]
['text':'                          24 bit operand field of an instruction.','line_number':1980,'multiline':False]
['text':'','line_number':1981,'multiline':False]
['text':'------------------------------------------------------------------------------','line_number':1982,'multiline':False]
['text':'------------------------------------------------------------------------------','line_number':1998,'multiline':False]
['text':'','line_number':1999,'multiline':False]
['text':'   insertOp()             Insert a slot for a new opcode into the already','line_number':2000,'multiline':False]
['text':'                          compiled pattern code.','line_number':2001,'multiline':False]
['text':'','line_number':2002,'multiline':False]
['text':'                          Fill the slot with a NOP.  Our caller will replace it','line_number':2003,'multiline':False]
['text':'                          with what they really wanted.','line_number':2004,'multiline':False]
['text':'','line_number':2005,'multiline':False]
['text':'------------------------------------------------------------------------------','line_number':2006,'multiline':False]
['text':' Walk through the pattern, looking for any ops with targets that','line_number':2014,'multiline':False]
['text':'  were moved down by the insert.  Fix them.','line_number':2015,'multiline':False]
['text':' Target location for this opcode is after the insertion point and','line_number':2029,'multiline':False]
['text':'   needs to be incremented to adjust for the insertion.','line_number':2030,'multiline':False]
['text':' Now fix up the parentheses stack.  All positive values in it are locations in','line_number':2037,'multiline':False]
['text':'  the compiled pattern.   (Negative values are frame boundaries, and don't need fixing.)','line_number':2038,'multiline':False]
['text':'------------------------------------------------------------------------------','line_number':2057,'multiline':False]
['text':'','line_number':2058,'multiline':False]
['text':'   allocateData()        Allocate storage in the matcher's static data area.','line_number':2059,'multiline':False]
['text':'                         Return the index for the newly allocated data.','line_number':2060,'multiline':False]
['text':'                         The storage won't actually exist until we are running a match','line_number':2061,'multiline':False]
['text':'                         operation, but the storage indexes are inserted into various','line_number':2062,'multiline':False]
['text':'                         opcodes while compiling the pattern.','line_number':2063,'multiline':False]
['text':'','line_number':2064,'multiline':False]
['text':'------------------------------------------------------------------------------','line_number':2065,'multiline':False]
['text':'------------------------------------------------------------------------------','line_number':2083,'multiline':False]
['text':'','line_number':2084,'multiline':False]
['text':'   allocateStackData()   Allocate space in the back-tracking stack frame.','line_number':2085,'multiline':False]
['text':'                         Return the index for the newly allocated data.','line_number':2086,'multiline':False]
['text':'                         The frame indexes are inserted into various','line_number':2087,'multiline':False]
['text':'                         opcodes while compiling the pattern, meaning that frame','line_number':2088,'multiline':False]
['text':'                         size must be restricted to the size that will fit','line_number':2089,'multiline':False]
['text':'                         as an operand (24 bits).','line_number':2090,'multiline':False]
['text':'','line_number':2091,'multiline':False]
['text':'------------------------------------------------------------------------------','line_number':2092,'multiline':False]
['text':'------------------------------------------------------------------------------','line_number':2110,'multiline':False]
['text':'','line_number':2111,'multiline':False]
['text':'   blockTopLoc()          Find or create a location in the compiled pattern','line_number':2112,'multiline':False]
['text':'                          at the start of the operation or block that has','line_number':2113,'multiline':False]
['text':'                          just been compiled.  Needed when a quantifier (* or','line_number':2114,'multiline':False]
['text':'                          whatever) appears, and we need to add an operation','line_number':2115,'multiline':False]
['text':'                          at the start of the thing being quantified.','line_number':2116,'multiline':False]
['text':'','line_number':2117,'multiline':False]
['text':'                          (Parenthesized Blocks) have a slot with a NOP that','line_number':2118,'multiline':False]
['text':'                          is reserved for this purpose.  .* or similar don't','line_number':2119,'multiline':False]
['text':'                          and a slot needs to be added.','line_number':2120,'multiline':False]
['text':'','line_number':2121,'multiline':False]
['text':'       parameter reserveLoc   :  TRUE -  ensure that there is space to add an opcode','line_number':2122,'multiline':False]
['text':'                                         at the returned location.','line_number':2123,'multiline':False]
['text':'                                 FALSE - just return the address,','line_number':2124,'multiline':False]
['text':'                                         do not reserve a location there.','line_number':2125,'multiline':False]
['text':'','line_number':2126,'multiline':False]
['text':'------------------------------------------------------------------------------','line_number':2127,'multiline':False]
['text':' Emit code for any pending literals.','line_number':2130,'multiline':False]
['text':'   If last item was a string, emit separate op for the its last char.','line_number':2131,'multiline':False]
['text':' The item just processed is a parenthesized block.','line_number':2134,'multiline':False]
['text':' A slot is already reserved for us.','line_number':2135,'multiline':False]
['text':' Item just compiled is a single thing, a ".", or a single char, a string or a set reference.','line_number':2140,'multiline':False]
['text':' No slot for STATE_SAVE was pre-reserved in the compiled code.','line_number':2141,'multiline':False]
['text':' We need to make space now.','line_number':2142,'multiline':False]
['text':' Strings take two opcode, we want the position of the first one.','line_number':2146,'multiline':False]
['text':' We can have a string at this point if a single character case-folded to two.','line_number':2147,'multiline':False]
['text':'------------------------------------------------------------------------------','line_number':2160,'multiline':False]
['text':'','line_number':2161,'multiline':False]
['text':'    handleCloseParen      When compiling a close paren, we need to go back','line_number':2162,'multiline':False]
['text':'                          and fix up any JMP or SAVE operations within the','line_number':2163,'multiline':False]
['text':'                          parenthesized block that need to target the end','line_number':2164,'multiline':False]
['text':'                          of the block.  The locations of these are kept on','line_number':2165,'multiline':False]
['text':'                          the paretheses stack.','line_number':2166,'multiline':False]
['text':'','line_number':2167,'multiline':False]
['text':'                          This function is called both when encountering a','line_number':2168,'multiline':False]
['text':'                          real ) and at the end of the pattern.','line_number':2169,'multiline':False]
['text':'','line_number':2170,'multiline':False]
['text':'------------------------------------------------------------------------------','line_number':2171,'multiline':False]
['text':' Emit code for any pending literals.','line_number':2180,'multiline':False]
['text':' Fixup any operations within the just-closed parenthesized group','line_number':2183,'multiline':False]
['text':'    that need to reference the end of the (block).','line_number':2184,'multiline':False]
['text':'    (The first one popped from the stack is an unused slot for','line_number':2185,'multiline':False]
['text':'     alternation (OR) state save, but applying the fixup to it does no harm.)','line_number':2186,'multiline':False]
['text':' value < 0 flags the start of the frame on the paren stack.','line_number':2190,'multiline':False]
['text':' Branch target for JMP should not be set.','line_number':2195,'multiline':False]
['text':' Set it now.','line_number':2196,'multiline':False]
['text':'  At the close of any parenthesized block, restore the match mode flags  to','line_number':2201,'multiline':False]
['text':'  the value they had at the open paren.  Saved value is','line_number':2202,'multiline':False]
['text':'  at the top of the paren stack.','line_number':2203,'multiline':False]
['text':' DO any additional fixups, depending on the specific kind of','line_number':2207,'multiline':False]
['text':' parentesized grouping this is','line_number':2208,'multiline':False]
['text':' No additional fixups required.','line_number':2213,'multiline':False]
['text':'   (Grouping-only parentheses)','line_number':2214,'multiline':False]
['text':' Capturing Parentheses.','line_number':2217,'multiline':False]
['text':'   Insert a End Capture op into the pattern.','line_number':2218,'multiline':False]
['text':'   The frame offset of the variables for this cg is obtained from the','line_number':2219,'multiline':False]
['text':'       start capture op and put it into the end-capture op.','line_number':2220,'multiline':False]
['text':' Atomic Parenthesis.','line_number':2230,'multiline':False]
['text':'   Insert a LD_SP operation to restore the state stack to the position','line_number':2231,'multiline':False]
['text':'   it was when the atomic parens were entered.','line_number':2232,'multiline':False]
['text':' See comment at doOpenLookAheadNeg','line_number':2252,'multiline':False]
['text':' Patch the URX_SAVE near the top of the block.','line_number':2260,'multiline':False]
['text':' The destination of the SAVE is the final LA_END that was just added.','line_number':2261,'multiline':False]
['text':' See comment at doOpenLookBehind.','line_number':2272,'multiline':False]
['text':' Append the URX_LB_END and URX_LA_END to the compiled pattern.','line_number':2274,'multiline':False]
['text':' Determine the min and max bounds for the length of the','line_number':2281,'multiline':False]
['text':'  string that the pattern can match.','line_number':2282,'multiline':False]
['text':'  An unbounded upper limit is an error.','line_number':2283,'multiline':False]
['text':' Insert the min and max match len bounds into the URX_LB_CONT op that','line_number':2297,'multiline':False]
['text':'  appears at the top of the look-behind block, at location fMatchOpenParen+1','line_number':2298,'multiline':False]
['text':' See comment at doOpenLookBehindNeg.','line_number':2309,'multiline':False]
['text':' Append the URX_LBN_END to the compiled pattern.','line_number':2311,'multiline':False]
['text':' Determine the min and max bounds for the length of the','line_number':2317,'multiline':False]
['text':'  string that the pattern can match.','line_number':2318,'multiline':False]
['text':'  An unbounded upper limit is an error.','line_number':2319,'multiline':False]
['text':' Insert the min and max match len bounds into the URX_LB_CONT op that','line_number':2333,'multiline':False]
['text':'  appears at the top of the look-behind block, at location fMatchOpenParen+1','line_number':2334,'multiline':False]
['text':' Insert the pattern location to continue at after a successful match','line_number':2338,'multiline':False]
['text':'  as the last operand of the URX_LBN_CONT','line_number':2339,'multiline':False]
['text':' remember the next location in the compiled pattern.','line_number':2351,'multiline':False]
['text':' The compilation of Quantifiers will look at this to see whether its looping','line_number':2352,'multiline':False]
['text':'   over a parenthesized block or a single item','line_number':2353,'multiline':False]
['text':'------------------------------------------------------------------------------','line_number':2359,'multiline':False]
['text':'','line_number':2360,'multiline':False]
['text':'   compileSet       Compile the pattern operations for a reference to a','line_number':2361,'multiline':False]
['text':'                    UnicodeSet.','line_number':2362,'multiline':False]
['text':'','line_number':2363,'multiline':False]
['text':'------------------------------------------------------------------------------','line_number':2364,'multiline':False]
['text':'  Remove any strings from the set.','line_number':2370,'multiline':False]
['text':'  There shoudn't be any, but just in case.','line_number':2371,'multiline':False]
['text':'     (Case Closure can add them; if we had a simple case closure avaialble that','line_number':2372,'multiline':False]
['text':'      ignored strings, that would be better.)','line_number':2373,'multiline':False]
['text':' Set of no elements.   Always fails to match.','line_number':2380,'multiline':False]
['text':' The set contains only a single code point.  Put it into','line_number':2388,'multiline':False]
['text':'   the compiled pattern as a single char operation rather','line_number':2389,'multiline':False]
['text':'   than a set, and discard the set itself.','line_number':2390,'multiline':False]
['text':'  The set contains two or more chars.  (the normal case)','line_number':2398,'multiline':False]
['text':'  Put it into the compiled pattern as a set.','line_number':2399,'multiline':False]
['text':'------------------------------------------------------------------------------','line_number':2408,'multiline':False]
['text':'','line_number':2409,'multiline':False]
['text':'   compileInterval    Generate the code for a {min, max} style interval quantifier.','line_number':2410,'multiline':False]
['text':'                      Except for the specific opcodes used, the code is the same','line_number':2411,'multiline':False]
['text':'                      for all three types (greedy, non-greedy, possessive) of','line_number':2412,'multiline':False]
['text':'                      intervals.  The opcodes are supplied as parameters.','line_number':2413,'multiline':False]
['text':'                      (There are two sets of opcodes - greedy & possessive use the','line_number':2414,'multiline':False]
['text':'                      same ones, while non-greedy has it's own.)','line_number':2415,'multiline':False]
['text':'','line_number':2416,'multiline':False]
['text':'                      The code for interval loops has this form:','line_number':2417,'multiline':False]
['text':'                         0  CTR_INIT   counter loc (in stack frame)','line_number':2418,'multiline':False]
['text':'                         1             5  patt address of CTR_LOOP at bottom of block','line_number':2419,'multiline':False]
['text':'                         2             min count','line_number':2420,'multiline':False]
['text':'                         3             max count   (-1 for unbounded)','line_number':2421,'multiline':False]
['text':'                         4  ...        block to be iterated over','line_number':2422,'multiline':False]
['text':'                         5  CTR_LOOP','line_number':2423,'multiline':False]
['text':'','line_number':2424,'multiline':False]
['text':'                       In','line_number':2425,'multiline':False]
['text':'------------------------------------------------------------------------------','line_number':2426,'multiline':False]
['text':' The CTR_INIT op at the top of the block with the {n,m} quantifier takes','line_number':2429,'multiline':False]
['text':'   four slots in the compiled code.  Reserve them.','line_number':2430,'multiline':False]
['text':' The operands for the CTR_INIT opcode include the index in the matcher data','line_number':2436,'multiline':False]
['text':'   of the counter.  Allocate it now. There are two data items','line_number':2437,'multiline':False]
['text':'        counterLoc   -->  Loop counter','line_number':2438,'multiline':False]
['text':'               +1    -->  Input index (for breaking non-progressing loops)','line_number':2439,'multiline':False]
['text':'                          (Only present if unbounded upper limit on loop)','line_number':2440,'multiline':False]
['text':' The second operand of CTR_INIT is the location following the end of the loop.','line_number':2447,'multiline':False]
['text':'   Must put in as a URX_RELOC_OPRND so that the value will be adjusted if the','line_number':2448,'multiline':False]
['text':'   compilation of something later on causes the code to grow and the target','line_number':2449,'multiline':False]
['text':'   position to move.','line_number':2450,'multiline':False]
['text':' Followed by the min and max counts.','line_number':2455,'multiline':False]
['text':' Apend the CTR_LOOP op.  The operand is the location of the CTR_INIT op.','line_number':2459,'multiline':False]
['text':'   Goes at end of the block being looped over, so just append to the code so far.','line_number':2460,'multiline':False]
['text':' Too big to inline.  Fail, which will cause looping code to be generated.','line_number':2477,'multiline':False]
['text':'   (Upper < Lower picks up unbounded upper and errors, both.)','line_number':2478,'multiline':False]
['text':' Pathological case.  Attempt no matches, as if the block doesn't exist.','line_number':2484,'multiline':False]
['text':' Discard the generated code for the block.','line_number':2485,'multiline':False]
['text':' If the block included parens, discard the info pertaining to them as well.','line_number':2486,'multiline':False]
['text':' The thing being repeated is not a single op, but some','line_number':2498,'multiline':False]
['text':'   more complex block.  Do it as a loop, not inlines.','line_number':2499,'multiline':False]
['text':'   Note that things "repeated" a max of once are handled as inline, because','line_number':2500,'multiline':False]
['text':'     the one copy of the code already generated is just fine.','line_number':2501,'multiline':False]
['text':' Pick up the opcode that is to be repeated','line_number':2505,'multiline':False]
['text':'','line_number':2506,'multiline':False]
['text':' Compute the pattern location where the inline sequence','line_number':2509,'multiline':False]
['text':'   will end, and set up the state save op that will be needed.','line_number':2510,'multiline':False]
['text':'','line_number':2511,'multiline':False]
['text':'  Loop, emitting the op for the thing being repeated each time.','line_number':2522,'multiline':False]
['text':'    Loop starts at 1 because one instance of the op already exists in the pattern,','line_number':2523,'multiline':False]
['text':'    it was put there when it was originally encountered.','line_number':2524,'multiline':False]
['text':'------------------------------------------------------------------------------','line_number':2537,'multiline':False]
['text':'','line_number':2538,'multiline':False]
['text':'   caseInsensitiveStart  given a single code point from a pattern string, determine the ','line_number':2539,'multiline':False]
['text':'                         set of characters that could potentially begin a case-insensitive ','line_number':2540,'multiline':False]
['text':'                         match of a string beginning with that character, using full Unicode','line_number':2541,'multiline':False]
['text':'                         case insensitive matching.','line_number':2542,'multiline':False]
['text':'','line_number':2543,'multiline':False]
['text':'          This is used in optimizing find().','line_number':2544,'multiline':False]
['text':'','line_number':2545,'multiline':False]
['text':'          closeOver(USET_CASE_INSENSITIVE) does most of what is needed, but','line_number':2546,'multiline':False]
['text':'          misses cases like this:','line_number':2547,'multiline':False]
['text':'             A string from the pattern begins with 'ss' (although all we know','line_number':2548,'multiline':False]
['text':'                 in this context is that it begins with 's')','line_number':2549,'multiline':False]
['text':'             The pattern could match a string beginning with a German sharp-s','line_number':2550,'multiline':False]
['text':'','line_number':2551,'multiline':False]
['text':'           To the ordinary case closure for a character c, we add all other','line_number':2552,'multiline':False]
['text':'           characters cx where the case closure of cx incudes a string form that begins','line_number':2553,'multiline':False]
['text':'           with the original character c.','line_number':2554,'multiline':False]
['text':'','line_number':2555,'multiline':False]
['text':'           This function could be made smarter. The full pattern string is available','line_number':2556,'multiline':False]
['text':'           and it would be possible to verify that the extra characters being added','line_number':2557,'multiline':False]
['text':'           to the starting set fully match, rather than having just a first-char of the','line_number':2558,'multiline':False]
['text':'           folded form match.','line_number':2559,'multiline':False]
['text':'','line_number':2560,'multiline':False]
['text':'------------------------------------------------------------------------------','line_number':2561,'multiline':False]
['text':' Machine Generated below.','line_number':2564,'multiline':False]
['text':' It may need updating with new versions of Unicode.','line_number':2565,'multiline':False]
['text':' Intltest test RegexTest::TestCaseInsensitiveStarters will fail if an update is needed.','line_number':2566,'multiline':False]
['text':' The update tool is here: svn+ssh://source.icu-project.org/repos/icu/tools/trunk/unicode/c/genregexcasing','line_number':2567,'multiline':False]
['text':' Machine Generated Data. Do not hand edit.','line_number':2569,'multiline':False]
['text':' End of machine generated data.','line_number':2604,'multiline':False]
['text':' Simple linear search through the sorted list of interesting code points.','line_number':2612,'multiline':False]
['text':' Not a cased character. Just return it alone.','line_number':2628,'multiline':False]
['text':'------------------------------------------------------------------------------','line_number':2636,'multiline':False]
['text':'','line_number':2637,'multiline':False]
['text':'   matchStartType    Determine how a match can start.','line_number':2638,'multiline':False]
['text':'                     Used to optimize find() operations.','line_number':2639,'multiline':False]
['text':'','line_number':2640,'multiline':False]
['text':'                     Operation is very similar to minMatchLength().  Walk the compiled','line_number':2641,'multiline':False]
['text':'                     pattern, keeping an on-going minimum-match-length.  For any','line_number':2642,'multiline':False]
['text':'                     op where the min match coming in is zero, add that ops possible','line_number':2643,'multiline':False]
['text':'                     starting matches to the possible starts for the overall pattern.','line_number':2644,'multiline':False]
['text':'','line_number':2645,'multiline':False]
['text':'------------------------------------------------------------------------------','line_number':2646,'multiline':False]
['text':' Location in the pattern of the current op being processed.','line_number':2653,'multiline':False]
['text':' The op being processed','line_number':2654,'multiline':False]
['text':' The opcode type of the op','line_number':2655,'multiline':False]
['text':' Minimum length of a match to this point (loc) in the pattern','line_number':2656,'multiline':False]
['text':' Number of strings encountered that could match at start.','line_number':2657,'multiline':False]
['text':' True if no part of the pattern yet encountered','line_number':2659,'multiline':False]
['text':'   could have advanced the position in a match.','line_number':2660,'multiline':False]
['text':'   (Maximum match length so far == 0)','line_number':2661,'multiline':False]
['text':' forwardedLength is a vector holding minimum-match-length values that','line_number':2663,'multiline':False]
['text':'   are propagated forward in the pattern by JMP or STATE_SAVE operations.','line_number':2664,'multiline':False]
['text':'   It must be one longer than the pattern being checked because some  ops','line_number':2665,'multiline':False]
['text':'   will jmp to a end-of-block+1 location from within a block, and we must','line_number':2666,'multiline':False]
['text':'   count those when checking the block.','line_number':2667,'multiline':False]
['text':' The loop is advancing linearly through the pattern.','line_number':2679,'multiline':False]
['text':' If the op we are now at was the destination of a branch in the pattern,','line_number':2680,'multiline':False]
['text':' and that path has a shorter minimum length than the current accumulated value,','line_number':2681,'multiline':False]
['text':' replace the current accumulated value.','line_number':2682,'multiline':False]
['text':' Ops that don't change the total length matched','line_number':2689,'multiline':False]
['text':' BackRef.  Must assume that it might be a zero length match','line_number':2707,'multiline':False]
['text':' Setup for atomic or possessive blocks.  Doesn't change what can match.','line_number':2710,'multiline':False]
['text':' This character could appear at the start of a match.','line_number':2729,'multiline':False]
['text':'   Add it to the set of possible starting characters.','line_number':2730,'multiline':False]
['text':' [Set]*, like a SETREF, above, in what it can match,','line_number':2752,'multiline':False]
['text':'  but may not match at all, so currentLen is not incremented.','line_number':2753,'multiline':False]
['text':' .* at the start of a pattern.','line_number':2766,'multiline':False]
['text':'    Any character can begin the match.','line_number':2767,'multiline':False]
['text':' Digit Char','line_number':2806,'multiline':False]
['text':' Horiz white space','line_number':2822,'multiline':False]
['text':' Tab','line_number':2826,'multiline':False]
['text':' Any line ending sequence','line_number':2838,'multiline':False]
['text':' Any line ending code point, with optional negation','line_number':2839,'multiline':False]
['text':' add range','line_number':2842,'multiline':False]
['text':' Complement option applies to URX_BACKSLASH_V only.','line_number':2846,'multiline':False]
['text':' Case Insensitive Single Character.','line_number':2859,'multiline':False]
['text':' findCaseInsensitiveStarters(c, &starters);','line_number':2865,'multiline':False]
['text':'   For ONECHAR_I, no need to worry about text chars that expand on folding into strings.','line_number':2866,'multiline':False]
['text':'   The expanded folding can't match the pattern.','line_number':2867,'multiline':False]
['text':' Char has no case variants.  Just add it as-is to the','line_number':2870,'multiline':False]
['text':'   set of possible starting chars.','line_number':2871,'multiline':False]
['text':' Grahpeme Cluster.  Minimum is 1, max unbounded.','line_number':2881,'multiline':False]
['text':' . matches one or two.','line_number':2882,'multiline':False]
['text':' These constructs are all bad news when they appear at the start','line_number':2886,'multiline':False]
['text':'   of a match.  Any character can begin the match.','line_number':2887,'multiline':False]
['text':' Except for extra operand on URX_JMPX, same as URX_JMP.','line_number':2898,'multiline':False]
['text':' Loop of some kind.  Can safely ignore, the worst that will happen','line_number':2904,'multiline':False]
['text':'  is that we understate the true minimum length','line_number':2905,'multiline':False]
['text':' Forward jump.  Propagate the current min length to the target loc of the jump.','line_number':2909,'multiline':False]
['text':' Combo of state save to the next loc, + jmp backwards.','line_number':2921,'multiline':False]
['text':'   Net effect on min. length computation is nothing.','line_number':2922,'multiline':False]
['text':' Fails are kind of like a branch, except that the min length was','line_number':2927,'multiline':False]
['text':'   propagated already, by the state save.','line_number':2928,'multiline':False]
['text':' State Save, for forward jumps, propagate the current minimum.','line_number':2936,'multiline':False]
['text':'             of the state save.','line_number':2937,'multiline':False]
['text':' Add the starting character of this string to the set of possible starting','line_number':2959,'multiline':False]
['text':'   characters for this pattern.','line_number':2960,'multiline':False]
['text':' Remember this string.  After the entire pattern has been checked,','line_number':2965,'multiline':False]
['text':'  if nothing else is identified that can start a match, we'll use it.','line_number':2966,'multiline':False]
['text':' Case-insensitive string.  Unlike exact-match strings, we won't','line_number':2979,'multiline':False]
['text':'   attempt a string search for possible match positions.  But we','line_number':2980,'multiline':False]
['text':'   do update the set of possible starting characters.','line_number':2981,'multiline':False]
['text':' Add the starting character of this string to the set of possible starting','line_number':2988,'multiline':False]
['text':'   characters for this pattern.','line_number':2989,'multiline':False]
['text':' Matching on an initial string not possible.','line_number':2995,'multiline':False]
['text':' Loop Init Ops.  These don't change the min length, but they are 4 word ops','line_number':3005,'multiline':False]
['text':'   so location must be updated accordingly.','line_number':3006,'multiline':False]
['text':' Loop Init Ops.','line_number':3007,'multiline':False]
['text':'   If the min loop count == 0','line_number':3008,'multiline':False]
['text':'      move loc forwards to the end of the loop, skipping over the body.','line_number':3009,'multiline':False]
['text':'   If the min count is > 0,','line_number':3010,'multiline':False]
['text':'      continue normal processing of the body of the loop.','line_number':3011,'multiline':False]
['text':' Min Loop Count of 0, treat like a forward branch and','line_number':3016,'multiline':False]
['text':'   move the current minimum length up to the target','line_number':3017,'multiline':False]
['text':'   (end of loop) location.','line_number':3018,'multiline':False]
['text':' Skips over operands of CTR_INIT','line_number':3024,'multiline':False]
['text':' Loop ops.','line_number':3032,'multiline':False]
['text':'  The jump is conditional, backwards only.','line_number':3033,'multiline':False]
['text':' More loop ops.  These state-save to themselves.','line_number':3038,'multiline':False]
['text':'   don't change the minimum match','line_number':3039,'multiline':False]
['text':' Look-around.  Scan forward until the matching look-ahead end,','line_number':3047,'multiline':False]
['text':'   without processing the look-around block.  This is overly pessimistic.','line_number':3048,'multiline':False]
['text':' Keep track of the nesting depth of look-around blocks.  Boilerplate code for','line_number':3050,'multiline':False]
['text':'   lookahead contains two LA_END instructions, so count goes up by two','line_number':3051,'multiline':False]
['text':'   for each LA_START.','line_number':3052,'multiline':False]
['text':' Need this because neg lookahead blocks will FAIL to outside','line_number':3070,'multiline':False]
['text':'   of the block.','line_number':3071,'multiline':False]
['text':' Shouldn't get here.  These ops should be','line_number':3089,'multiline':False]
['text':'  consumed by the scan in URX_LA_START and LB_START','line_number':3090,'multiline':False]
['text':' We have finished walking through the ops.  Check whether some forward jump','line_number':3101,'multiline':False]
['text':'   propagated a shorter length to location end+1.','line_number':3102,'multiline':False]
['text':' Sort out what we should check for when looking for candidate match start positions.','line_number':3111,'multiline':False]
['text':' In order of preference,','line_number':3112,'multiline':False]
['text':'     1.   Start of input text buffer.','line_number':3113,'multiline':False]
['text':'     2.   A literal string.','line_number':3114,'multiline':False]
['text':'     3.   Start of line in multi-line mode.','line_number':3115,'multiline':False]
['text':'     4.   A single literal character.','line_number':3116,'multiline':False]
['text':'     5.   A character from a set of characters.','line_number':3117,'multiline':False]
['text':'','line_number':3118,'multiline':False]
['text':' Match only at the start of an input text string.','line_number':3120,'multiline':False]
['text':'    start type is already set.  We're done.','line_number':3121,'multiline':False]
['text':' Match beginning only with a literal string.','line_number':3123,'multiline':False]
['text':' Match at start of line in Multi-Line mode.','line_number':3129,'multiline':False]
['text':' Nothing to do here; everything is already set.','line_number':3130,'multiline':False]
['text':' Zero length match possible.  We could start anywhere.','line_number':3132,'multiline':False]
['text':' All matches begin with the same char.','line_number':3135,'multiline':False]
['text':' Matches start with a set of character smaller than the set of all chars.','line_number':3141,'multiline':False]
['text':' Matches can start with anything','line_number':3144,'multiline':False]
['text':'------------------------------------------------------------------------------','line_number':3153,'multiline':False]
['text':'','line_number':3154,'multiline':False]
['text':'   minMatchLength    Calculate the length of the shortest string that could','line_number':3155,'multiline':False]
['text':'                     match the specified pattern.','line_number':3156,'multiline':False]
['text':'                     Length is in 16 bit code units, not code points.','line_number':3157,'multiline':False]
['text':'','line_number':3158,'multiline':False]
['text':'                     The calculated length may not be exact.  The returned','line_number':3159,'multiline':False]
['text':'                     value may be shorter than the actual minimum; it must','line_number':3160,'multiline':False]
['text':'                     never be longer.','line_number':3161,'multiline':False]
['text':'','line_number':3162,'multiline':False]
['text':'                     start and end are the range of p-code operations to be','line_number':3163,'multiline':False]
['text':'                     examined.  The endpoints are included in the range.','line_number':3164,'multiline':False]
['text':'','line_number':3165,'multiline':False]
['text':'------------------------------------------------------------------------------','line_number':3166,'multiline':False]
['text':' forwardedLength is a vector holding minimum-match-length values that','line_number':3182,'multiline':False]
['text':'   are propagated forward in the pattern by JMP or STATE_SAVE operations.','line_number':3183,'multiline':False]
['text':'   It must be one longer than the pattern being checked because some  ops','line_number':3184,'multiline':False]
['text':'   will jmp to a end-of-block+1 location from within a block, and we must','line_number':3185,'multiline':False]
['text':'   count those when checking the block.','line_number':3186,'multiline':False]
['text':' The loop is advancing linearly through the pattern.','line_number':3197,'multiline':False]
['text':' If the op we are now at was the destination of a branch in the pattern,','line_number':3198,'multiline':False]
['text':' and that path has a shorter minimum length than the current accumulated value,','line_number':3199,'multiline':False]
['text':' replace the current accumulated value.','line_number':3200,'multiline':False]
['text':' U_ASSERT(currentLen>=0 && currentLen < INT32_MAX);  // MinLength == INT32_MAX for some','line_number':3201,'multiline':False]
['text':'   no-match-possible cases.','line_number':3202,'multiline':False]
['text':' Ops that don't change the total length matched','line_number':3209,'multiline':False]
['text':' BackRef.  Must assume that it might be a zero length match','line_number':3229,'multiline':False]
['text':' Setup for atomic or possessive blocks.  Doesn't change what can match.','line_number':3232,'multiline':False]
['text':' Ops that match a minimum of one character (one or two 16 bit code units.)','line_number':3240,'multiline':False]
['text':'','line_number':3241,'multiline':False]
['text':' Grahpeme Cluster.  Minimum is 1, max unbounded.','line_number':3251,'multiline':False]
['text':' . matches one or two.','line_number':3252,'multiline':False]
['text':' URX_JMPX has an extra operand, ignored here,','line_number':3260,'multiline':False]
['text':'   otherwise processed identically to URX_JMP.','line_number':3261,'multiline':False]
['text':' Loop of some kind.  Can safely ignore, the worst that will happen','line_number':3267,'multiline':False]
['text':'  is that we understate the true minimum length','line_number':3268,'multiline':False]
['text':' Forward jump.  Propagate the current min length to the target loc of the jump.','line_number':3271,'multiline':False]
['text':' Back-tracks are kind of like a branch, except that the min length was','line_number':3282,'multiline':False]
['text':'   propagated already, by the state save.','line_number':3283,'multiline':False]
['text':' State Save, for forward jumps, propagate the current minimum.','line_number':3291,'multiline':False]
['text':'             of the state save.','line_number':3292,'multiline':False]
['text':' TODO: with full case folding, matching input text may be shorter than','line_number':3315,'multiline':False]
['text':'       the string we have here.  More smarts could put some bounds on it.','line_number':3316,'multiline':False]
['text':'       Assume a min length of one for now.  A min length of zero causes','line_number':3317,'multiline':False]
['text':'        optimization failures for a pattern like "string"+','line_number':3318,'multiline':False]
['text':' currentLen += URX_VAL(stringLenOp);','line_number':3319,'multiline':False]
['text':' Loop Init Ops.','line_number':3327,'multiline':False]
['text':'   If the min loop count == 0','line_number':3328,'multiline':False]
['text':'      move loc forwards to the end of the loop, skipping over the body.','line_number':3329,'multiline':False]
['text':'   If the min count is > 0,','line_number':3330,'multiline':False]
['text':'      continue normal processing of the body of the loop.','line_number':3331,'multiline':False]
['text':' Skips over operands of CTR_INIT','line_number':3338,'multiline':False]
['text':' Loop ops.','line_number':3346,'multiline':False]
['text':'  The jump is conditional, backwards only.','line_number':3347,'multiline':False]
['text':' More loop ops.  These state-save to themselves.','line_number':3353,'multiline':False]
['text':'   don't change the minimum match - could match nothing at all.','line_number':3354,'multiline':False]
['text':' Look-around.  Scan forward until the matching look-ahead end,','line_number':3361,'multiline':False]
['text':'   without processing the look-around block.  This is overly pessimistic for look-ahead,','line_number':3362,'multiline':False]
['text':'   it assumes that the look-ahead match might be zero-length.','line_number':3363,'multiline':False]
['text':'   TODO:  Positive lookahead could recursively do the block, then continue','line_number':3364,'multiline':False]
['text':'          with the longer of the block or the value coming in.  Ticket 6060','line_number':3365,'multiline':False]
['text':' The boilerplate for look-ahead includes two LA_END insturctions,','line_number':3371,'multiline':False]
['text':'    Depth will be decremented by each one when it is seen.','line_number':3372,'multiline':False]
['text':' Need this because neg lookahead blocks will FAIL to outside','line_number':3391,'multiline':False]
['text':'   of the block.','line_number':3392,'multiline':False]
['text':' Only come here if the matching URX_LA_START or URX_LB_START was not in the','line_number':3410,'multiline':False]
['text':'   range being sized, which happens when measuring size of look-behind blocks.','line_number':3411,'multiline':False]
['text':' We have finished walking through the ops.  Check whether some forward jump','line_number':3420,'multiline':False]
['text':'   propagated a shorter length to location end+1.','line_number':3421,'multiline':False]
['text':' Increment with overflow check.','line_number':3430,'multiline':False]
['text':' val and delta will both be positive.','line_number':3431,'multiline':False]
['text':'------------------------------------------------------------------------------','line_number':3442,'multiline':False]
['text':'','line_number':3443,'multiline':False]
['text':'   maxMatchLength    Calculate the length of the longest string that could','line_number':3444,'multiline':False]
['text':'                     match the specified pattern.','line_number':3445,'multiline':False]
['text':'                     Length is in 16 bit code units, not code points.','line_number':3446,'multiline':False]
['text':'','line_number':3447,'multiline':False]
['text':'                     The calculated length may not be exact.  The returned','line_number':3448,'multiline':False]
['text':'                     value may be longer than the actual maximum; it must','line_number':3449,'multiline':False]
['text':'                     never be shorter.','line_number':3450,'multiline':False]
['text':'','line_number':3451,'multiline':False]
['text':'------------------------------------------------------------------------------','line_number':3452,'multiline':False]
['text':' The loop is advancing linearly through the pattern.','line_number':3476,'multiline':False]
['text':' If the op we are now at was the destination of a branch in the pattern,','line_number':3477,'multiline':False]
['text':' and that path has a longer maximum length than the current accumulated value,','line_number':3478,'multiline':False]
['text':' replace the current accumulated value.','line_number':3479,'multiline':False]
['text':' Ops that don't change the total length matched','line_number':3485,'multiline':False]
['text':' Setup for atomic or possessive blocks.  Doesn't change what can match.','line_number':3506,'multiline':False]
['text':' Ops that increase that cause an unbounded increase in the length','line_number':3516,'multiline':False]
['text':'   of a matched string, or that increase it a hard to characterize way.','line_number':3517,'multiline':False]
['text':'   Call the max length unbounded, and stop further checking.','line_number':3518,'multiline':False]
['text':' BackRef.  Must assume that it might be a zero length match','line_number':3519,'multiline':False]
['text':' Grahpeme Cluster.  Minimum is 1, max unbounded.','line_number':3521,'multiline':False]
['text':' Ops that match a max of one character (possibly two 16 bit code units.)','line_number':3526,'multiline':False]
['text':'','line_number':3527,'multiline':False]
['text':' Single literal character.  Increase current max length by one or two,','line_number':3542,'multiline':False]
['text':'       depending on whether the char is in the supplementary range.','line_number':3543,'multiline':False]
['text':' Jumps.','line_number':3551,'multiline':False]
['text':'','line_number':3552,'multiline':False]
['text':' Loop of some kind.  Max match length is unbounded.','line_number':3560,'multiline':False]
['text':' Forward jump.  Propagate the current min length to the target loc of the jump.','line_number':3563,'multiline':False]
['text':' back-tracks are kind of like a branch, except that the max length was','line_number':3573,'multiline':False]
['text':'   propagated already, by the state save.','line_number':3574,'multiline':False]
['text':' State Save, for forward jumps, propagate the current minimum.','line_number':3581,'multiline':False]
['text':'               of the state save.','line_number':3582,'multiline':False]
['text':'             For backwards jumps, they create a loop, maximum','line_number':3583,'multiline':False]
['text':'               match length is unbounded.','line_number':3584,'multiline':False]
['text':' TODO:  This code assumes that any user string that matches will be no longer','line_number':3608,'multiline':False]
['text':'        than our compiled string, with case insensitive matching.','line_number':3609,'multiline':False]
['text':'        Our compiled string has been case-folded already.','line_number':3610,'multiline':False]
['text':'','line_number':3611,'multiline':False]
['text':'        Any matching user string will have no more code points than our','line_number':3612,'multiline':False]
['text':'        compiled (folded) string.  Folding may add code points, but','line_number':3613,'multiline':False]
['text':'        not remove them.','line_number':3614,'multiline':False]
['text':'','line_number':3615,'multiline':False]
['text':'        There is a potential problem if a supplemental code point','line_number':3616,'multiline':False]
['text':'        case-folds to a BMP code point.  In this case our compiled string','line_number':3617,'multiline':False]
['text':'        could be shorter (in code units) than a matching user string.','line_number':3618,'multiline':False]
['text':'','line_number':3619,'multiline':False]
['text':'        At this time (Unicode 6.1) there are no such characters, and this case','line_number':3620,'multiline':False]
['text':'        is not being handled.  A test, intltest regex/Bug9283, will fail if','line_number':3621,'multiline':False]
['text':'        any problematic characters are added to Unicode.','line_number':3622,'multiline':False]
['text':'','line_number':3623,'multiline':False]
['text':'        If this happens, we can make a set of the BMP chars that the','line_number':3624,'multiline':False]
['text':'        troublesome supplementals fold to, scan our string, and bump the','line_number':3625,'multiline':False]
['text':'        currentLen one extra for each that is found.','line_number':3626,'multiline':False]
['text':'','line_number':3627,'multiline':False]
['text':' For Loops, recursively call this function on the pattern for the loop body,','line_number':3637,'multiline':False]
['text':'   then multiply the result by the maximum loop count.','line_number':3638,'multiline':False]
['text':' Loop has an empty body. No affect on max match length.','line_number':3642,'multiline':False]
['text':' Continue processing with code after the loop end.','line_number':3643,'multiline':False]
['text':' Unbounded Loop. No upper bound on match length.','line_number':3650,'multiline':False]
['text':' Recursive call.','line_number':3656,'multiline':False]
['text':' These opcodes will be skipped over by code for URX_CRT_INIT.','line_number':3669,'multiline':False]
['text':' We shouldn't encounter them here.','line_number':3670,'multiline':False]
['text':' For anything to do with loops, make the match length unbounded.','line_number':3677,'multiline':False]
['text':' Look-ahead.  Just ignore, treat the look-ahead block as if','line_number':3685,'multiline':False]
['text':' it were normal pattern.  Gives a too-long match length,','line_number':3686,'multiline':False]
['text':'  but good enough for now.','line_number':3687,'multiline':False]
['text':' End of look-ahead ops should always be consumed by the processing at','line_number':3690,'multiline':False]
['text':'  the URX_LA_START op.','line_number':3691,'multiline':False]
['text':' U_ASSERT(FALSE);','line_number':3692,'multiline':False]
['text':' break;','line_number':3693,'multiline':False]
['text':' Look-behind.  Scan forward until the matching look-around end,','line_number':3697,'multiline':False]
['text':'   without processing the look-behind block.','line_number':3698,'multiline':False]
['text':'  The maximum length is unbounded.','line_number':3723,'multiline':False]
['text':'  Stop further processing of the pattern.','line_number':3724,'multiline':False]
['text':'------------------------------------------------------------------------------','line_number':3734,'multiline':False]
['text':'','line_number':3735,'multiline':False]
['text':'   stripNOPs    Remove any NOP operations from the compiled pattern code.','line_number':3736,'multiline':False]
['text':'                Extra NOPs are inserted for some constructs during the initial','line_number':3737,'multiline':False]
['text':'                code generation to provide locations that may be patched later.','line_number':3738,'multiline':False]
['text':'                Many end up unneeded, and are removed by this function.','line_number':3739,'multiline':False]
['text':'','line_number':3740,'multiline':False]
['text':'                In order to minimize the number of passes through the pattern,','line_number':3741,'multiline':False]
['text':'                back-reference fixup is also performed here (adjusting','line_number':3742,'multiline':False]
['text':'                back-reference operands to point to the correct frame offsets).','line_number':3743,'multiline':False]
['text':'','line_number':3744,'multiline':False]
['text':'------------------------------------------------------------------------------','line_number':3745,'multiline':False]
['text':' Make a first pass over the code, computing the amount that things','line_number':3755,'multiline':False]
['text':'   will be offset at each location in the original code.','line_number':3756,'multiline':False]
['text':' Make a second pass over the code, removing the NOPs by moving following','line_number':3769,'multiline':False]
['text':'  code up, and patching operands that refer to code locations that','line_number':3770,'multiline':False]
['text':'  are being moved.  The array of offsets from the first step is used','line_number':3771,'multiline':False]
['text':'  to compute the new operand values.','line_number':3772,'multiline':False]
['text':' These are instructions with operands that refer to code locations.','line_number':3790,'multiline':False]
['text':' These instructions are unaltered by the relocation.','line_number':3866,'multiline':False]
['text':' Some op is unaccounted for.','line_number':3872,'multiline':False]
['text':'------------------------------------------------------------------------------','line_number':3884,'multiline':False]
['text':'','line_number':3885,'multiline':False]
['text':'  Error         Report a rule parse error.','line_number':3886,'multiline':False]
['text':'                Only report it if no previous error has been recorded.','line_number':3887,'multiline':False]
['text':'','line_number':3888,'multiline':False]
['text':'------------------------------------------------------------------------------','line_number':3889,'multiline':False]
['text':' Hmm. fParseErr (UParseError) line & offset fields are int32_t in public','line_number':3893,'multiline':False]
['text':' API (see common/unicode/parseerr.h), while fLineNum and fCharNum are','line_number':3894,'multiline':False]
['text':' int64_t. If the values of the latter are out of range for the former,','line_number':3895,'multiline':False]
['text':' set them to the appropriate "field not supported" values.','line_number':3896,'multiline':False]
['text':' throwaway status for extracting context','line_number':3908,'multiline':False]
['text':' Fill in the context.','line_number':3910,'multiline':False]
['text':'   Note: extractBetween() pins supplied indicies to the string bounds.','line_number':3911,'multiline':False]
['text':'','line_number':3920,'multiline':False]
['text':'  Assorted Unicode character constants.','line_number':3921,'multiline':False]
['text':'     Numeric because there is no portable way to enter them as literals.','line_number':3922,'multiline':False]
['text':'     (Think EBCDIC).','line_number':3923,'multiline':False]
['text':'','line_number':3924,'multiline':False]
['text':' New lines, for terminating comments.','line_number':3925,'multiline':False]
['text':' Line Feed','line_number':3926,'multiline':False]
['text':' '#', introduces a comment.','line_number':3927,'multiline':False]
['text':' '0'','line_number':3928,'multiline':False]
['text':' '9'','line_number':3929,'multiline':False]
['text':' ':'','line_number':3930,'multiline':False]
['text':' 'E'','line_number':3931,'multiline':False]
['text':' 'Q'','line_number':3932,'multiline':False]
['text':'static const UChar      chN         = 0x4E;      // 'N'','line_number':3933,'multiline':False]
['text':' 'P'','line_number':3934,'multiline':False]
['text':' '\'  introduces a char escape','line_number':3935,'multiline':False]
['text':'static const UChar      chLBracket  = 0x5b;      // '['','line_number':3936,'multiline':False]
['text':' ']'','line_number':3937,'multiline':False]
['text':' '^'','line_number':3938,'multiline':False]
['text':' '{'','line_number':3940,'multiline':False]
['text':' '}'','line_number':3941,'multiline':False]
['text':'    NEL newline variant','line_number':3942,'multiline':False]
['text':'    Unicode Line Separator','line_number':3943,'multiline':False]
['text':'------------------------------------------------------------------------------','line_number':3946,'multiline':False]
['text':'','line_number':3947,'multiline':False]
['text':'  nextCharLL    Low Level Next Char from the regex pattern.','line_number':3948,'multiline':False]
['text':'                Get a char from the string, keep track of input position','line_number':3949,'multiline':False]
['text':'                     for error reporting.','line_number':3950,'multiline':False]
['text':'','line_number':3951,'multiline':False]
['text':'------------------------------------------------------------------------------','line_number':3952,'multiline':False]
['text':' assume we're already in the right place','line_number':3962,'multiline':False]
['text':' Character is starting a new line.  Bump up the line number, and','line_number':3972,'multiline':False]
['text':'  reset the column to 0.','line_number':3973,'multiline':False]
['text':' Character is not starting a new line.  Except in the case of a','line_number':3978,'multiline':False]
['text':'   LF following a CR, increment the column position.','line_number':3979,'multiline':False]
['text':'------------------------------------------------------------------------------','line_number':3988,'multiline':False]
['text':'','line_number':3989,'multiline':False]
['text':'   peekCharLL    Low Level Character Scanning, sneak a peek at the next','line_number':3990,'multiline':False]
['text':'                 character without actually getting it.','line_number':3991,'multiline':False]
['text':'','line_number':3992,'multiline':False]
['text':'------------------------------------------------------------------------------','line_number':3993,'multiline':False]
['text':'------------------------------------------------------------------------------','line_number':4002,'multiline':False]
['text':'','line_number':4003,'multiline':False]
['text':'   nextChar     for pattern scanning.  At this level, we handle stripping','line_number':4004,'multiline':False]
['text':'                out comments and processing some backslash character escapes.','line_number':4005,'multiline':False]
['text':'                The rest of the pattern grammar is handled at the next level up.','line_number':4006,'multiline':False]
['text':'','line_number':4007,'multiline':False]
['text':'------------------------------------------------------------------------------','line_number':4008,'multiline':False]
['text':'  Exit quote mode,','line_number':4019,'multiline':False]
['text':' discard the E','line_number':4020,'multiline':False]
['text':' recurse to get the real next char','line_number':4021,'multiline':False]
['text':' The current character immediately follows a '\'','line_number':4025,'multiline':False]
['text':' Don't check for any further escapes, just return it as-is.','line_number':4026,'multiline':False]
['text':' Don't set c.fQuoted, because that would prevent the state machine from','line_number':4027,'multiline':False]
['text':'    dispatching on the character.','line_number':4028,'multiline':False]
['text':' We are not in a \Q quoted region \E of the source.','line_number':4033,'multiline':False]
['text':'','line_number':4034,'multiline':False]
['text':'','line_number':4036,'multiline':False]
['text':' We are in free-spacing and comments mode.','line_number':4037,'multiline':False]
['text':'  Scan through any white space and comments, until we','line_number':4038,'multiline':False]
['text':'  reach a significant character or the end of inut.','line_number':4039,'multiline':False]
['text':' End of Input','line_number':4042,'multiline':False]
['text':' Start of a comment.  Consume the rest of it, until EOF or a new line','line_number':4045,'multiline':False]
['text':' EOF','line_number':4048,'multiline':False]
['text':' TODO:  check what Java & Perl do with non-ASCII white spaces.  Ticket 6061.','line_number':4057,'multiline':False]
['text':'','line_number':4065,'multiline':False]
['text':'  check for backslash escaped characters.','line_number':4066,'multiline':False]
['text':'','line_number':4067,'multiline':False]
['text':'','line_number':4071,'multiline':False]
['text':' A '\' sequence that is handled by ICU's standard unescapeAt function.','line_number':4072,'multiline':False]
['text':'   Includes \uxxxx, \n, \r, many others.','line_number':4073,'multiline':False]
['text':'   Return the single equivalent character.','line_number':4074,'multiline':False]
['text':'','line_number':4075,'multiline':False]
['text':' get & discard the peeked char.','line_number':4076,'multiline':False]
['text':'  Octal Escape, using Java Regexp Conventions','line_number':4106,'multiline':False]
['text':'    which are \0 followed by 1-3 octal digits.','line_number':4107,'multiline':False]
['text':'    Different from ICU Unescape handling of Octal, which does not','line_number':4108,'multiline':False]
['text':'    require the leading 0.','line_number':4109,'multiline':False]
['text':'  Java also has the convention of only consuming 2 octal digits if','line_number':4110,'multiline':False]
['text':'    the three digit number would be > 0xff','line_number':4111,'multiline':False]
['text':'','line_number':4112,'multiline':False]
['text':' Consume the initial 0.','line_number':4114,'multiline':False]
['text':' \0 is not followed by any octal digits.','line_number':4120,'multiline':False]
['text':' The last digit made the number too big.  Forget we saw it.','line_number':4130,'multiline':False]
['text':'  "\Q"  enter quote mode, which will continue until "\E"','line_number':4137,'multiline':False]
['text':' discard the 'Q'.','line_number':4139,'multiline':False]
['text':' recurse to get the real next char.','line_number':4140,'multiline':False]
['text':' We are in a '\' escape that will be handled by the state table scanner.','line_number':4144,'multiline':False]
['text':' Just return the backslash, but remember that the following char is to','line_number':4145,'multiline':False]
['text':'  be taken literally.','line_number':4146,'multiline':False]
['text':' re-enable # to end-of-line comments, in case they were disabled.','line_number':4152,'multiline':False]
['text':' They are disabled by the parser upon seeing '(?', but this lasts for','line_number':4153,'multiline':False]
['text':'  the fetching of the next character only.','line_number':4154,'multiline':False]
['text':' putc(c.fChar, stdout);','line_number':4157,'multiline':False]
['text':'------------------------------------------------------------------------------','line_number':4162,'multiline':False]
['text':'','line_number':4163,'multiline':False]
['text':'  scanNamedChar','line_number':4164,'multiline':False]
['text':'            Get a UChar32 from a \N{UNICODE CHARACTER NAME} in the pattern.','line_number':4165,'multiline':False]
['text':'','line_number':4166,'multiline':False]
['text':'             The scan position will be at the 'N'.  On return','line_number':4167,'multiline':False]
['text':'             the scan position should be just after the '}'','line_number':4168,'multiline':False]
['text':'','line_number':4169,'multiline':False]
['text':'             Return the UChar32','line_number':4170,'multiline':False]
['text':'','line_number':4171,'multiline':False]
['text':'------------------------------------------------------------------------------','line_number':4172,'multiline':False]
['text':' All Unicode character names have only invariant characters.','line_number':4200,'multiline':False]
['text':' The API to get a character, given a name, accepts only char *, forcing us to convert,','line_number':4201,'multiline':False]
['text':'   which requires this error check','line_number':4202,'multiline':False]
['text':' Continue overall regex pattern processing with char after the '}'','line_number':4213,'multiline':False]
['text':'------------------------------------------------------------------------------','line_number':4217,'multiline':False]
['text':'','line_number':4218,'multiline':False]
['text':'  scanProp   Construct a UnicodeSet from the text at the current scan','line_number':4219,'multiline':False]
['text':'             position, which will be of the form \p{whaterver}','line_number':4220,'multiline':False]
['text':'','line_number':4221,'multiline':False]
['text':'             The scan position will be at the 'p' or 'P'.  On return','line_number':4222,'multiline':False]
['text':'             the scan position should be just after the '}'','line_number':4223,'multiline':False]
['text':'','line_number':4224,'multiline':False]
['text':'             Return a UnicodeSet, constructed from the \P pattern,','line_number':4225,'multiline':False]
['text':'             or NULL if the pattern is invalid.','line_number':4226,'multiline':False]
['text':'','line_number':4227,'multiline':False]
['text':'------------------------------------------------------------------------------','line_number':4228,'multiline':False]
['text':' Suppress compiler unused variable warning.','line_number':4235,'multiline':False]
['text':' Hit the end of the input string without finding the closing '}'','line_number':4251,'multiline':False]
['text':' Move input scan to position following the closing '}'','line_number':4258,'multiline':False]
['text':'------------------------------------------------------------------------------','line_number':4262,'multiline':False]
['text':'','line_number':4263,'multiline':False]
['text':'  scanPosixProp   Construct a UnicodeSet from the text at the current scan','line_number':4264,'multiline':False]
['text':'             position, which is expected be of the form [:property expression:]','line_number':4265,'multiline':False]
['text':'','line_number':4266,'multiline':False]
['text':'             The scan position will be at the opening ':'.  On return','line_number':4267,'multiline':False]
['text':'             the scan position must be on the closing ']'','line_number':4268,'multiline':False]
['text':'','line_number':4269,'multiline':False]
['text':'             Return a UnicodeSet constructed from the pattern,','line_number':4270,'multiline':False]
['text':'             or NULL if this is not a valid POSIX-style set expression.','line_number':4271,'multiline':False]
['text':'             If not a property expression, restore the initial scan position','line_number':4272,'multiline':False]
['text':'                (to the opening ':')','line_number':4273,'multiline':False]
['text':'','line_number':4274,'multiline':False]
['text':'               Note:  the opening '[:' is not sufficient to guarantee that','line_number':4275,'multiline':False]
['text':'                      this is a [:property:] expression.','line_number':4276,'multiline':False]
['text':'                      [:'+=,] is a perfectly good ordinary set expression that','line_number':4277,'multiline':False]
['text':'                              happens to include ':' as one of its characters.','line_number':4278,'multiline':False]
['text':'','line_number':4279,'multiline':False]
['text':'------------------------------------------------------------------------------','line_number':4280,'multiline':False]
['text':' Save the scanner state.','line_number':4290,'multiline':False]
['text':' TODO:  move this into the scanner, with the state encapsulated in some way.  Ticket 6062','line_number':4291,'multiline':False]
['text':' Scan for a closing ].   A little tricky because there are some perverse','line_number':4303,'multiline':False]
['text':'   edge cases possible.  "[:abc\Qdef:] \E]"  is a valid non-property expression,','line_number':4304,'multiline':False]
['text':'   ending on the second closing ].','line_number':4305,'multiline':False]
['text':' Check for and consume the '^' in a negated POSIX property, e.g.  [:^Letter:]','line_number':4310,'multiline':False]
['text':' Scan for the closing ":]", collecting the property name along the way.','line_number':4317,'multiline':False]
['text':' Escaped characters or end of input - either says this isn't a [:Property:]','line_number':4323,'multiline':False]
['text':' No closing ":]".','line_number':4340,'multiline':False]
['text':'  Restore the original scan position.','line_number':4341,'multiline':False]
['text':'  The main scanner will retry the input as a normal set expression,','line_number':4342,'multiline':False]
['text':'    not a [:Property:] expression.','line_number':4343,'multiline':False]
['text':'','line_number':4363,'multiline':False]
['text':'  Create a Unicode Set from a Unicode Property expression.','line_number':4364,'multiline':False]
['text':'     This is common code underlying both \p{...} ane [:...:] expressions.','line_number':4365,'multiline':False]
['text':'     Includes trying the Java "properties" that aren't supported as','line_number':4366,'multiline':False]
['text':'     normal ICU UnicodeSet properties','line_number':4367,'multiline':False]
['text':'','line_number':4368,'multiline':False]
['text':' "[\p{"','line_number':4369,'multiline':False]
['text':' "[\P{"','line_number':4370,'multiline':False]
['text':'','line_number':4380,'multiline':False]
['text':'  First try the property as we received it','line_number':4381,'multiline':False]
['text':'','line_number':4382,'multiline':False]
['text':'','line_number':4401,'multiline':False]
['text':'  The property as it was didn't work.','line_number':4402,'multiline':False]
['text':'  Do [:word:]. It is not recognized as a property by UnicodeSet.  "word" not standard POSIX','line_number':4404,'multiline':False]
['text':'     or standard Java, but many other regular expression packages do recognize it.','line_number':4405,'multiline':False]
['text':'    Do Java fixes -','line_number':4421,'multiline':False]
['text':'       InGreek -> InGreek or Coptic, that being the official Unicode name for that block.','line_number':4422,'multiline':False]
['text':'       InCombiningMarksforSymbols -> InCombiningDiacriticalMarksforSymbols.','line_number':4423,'multiline':False]
['text':'','line_number':4424,'multiline':False]
['text':'       Note on Spaces:  either "InCombiningMarksForSymbols" or "InCombining Marks for Symbols"','line_number':4425,'multiline':False]
['text':'                        is accepted by Java.  The property part of the name is compared','line_number':4426,'multiline':False]
['text':'                        case-insenstively.  The spaces must be exactly as shown, either','line_number':4427,'multiline':False]
['text':'                        all there, or all omitted, with exactly one at each position','line_number':4428,'multiline':False]
['text':'                        if they are present.  From checking against JDK 1.6','line_number':4429,'multiline':False]
['text':'','line_number':4430,'multiline':False]
['text':'       This code should be removed when ICU properties support the Java  compatibility names','line_number':4431,'multiline':False]
['text':'          (ICU 4.0?)','line_number':4432,'multiline':False]
['text':'','line_number':4433,'multiline':False]
['text':'    See if the property looks like a Java "InBlockName", which','line_number':4446,'multiline':False]
['text':'    we will recast as "Block=BlockName"','line_number':4447,'multiline':False]
['text':'','line_number':4448,'multiline':False]
['text':' "In"','line_number':4449,'multiline':False]
['text':' "Block="','line_number':4450,'multiline':False]
['text':' Leaves "[\p{", or "[\P{"','line_number':4452,'multiline':False]
['text':' Property with the leading "In" removed.','line_number':4454,'multiline':False]
['text':'setExpr.remove();','line_number':4470,'multiline':False]
['text':'','line_number':4472,'multiline':False]
['text':'  Try the various Java specific properties.','line_number':4473,'multiline':False]
['text':'   These all begin with "java"','line_number':4474,'multiline':False]
['text':'','line_number':4475,'multiline':False]
['text':'','line_number':4574,'multiline':False]
['text':'  SetEval   Part of the evaluation of [set expressions].','line_number':4575,'multiline':False]
['text':'            Perform any pending (stacked) operations with precedence','line_number':4576,'multiline':False]
['text':'            equal or greater to that of the next operator encountered','line_number':4577,'multiline':False]
['text':'            in the expression.','line_number':4578,'multiline':False]
['text':'','line_number':4579,'multiline':False]
['text':' TODO: need a simple close function.  Ticket 6065','line_number':4597,'multiline':False]
['text':' !UCONFIG_NO_REGULAR_EXPRESSIONS','line_number':4635,'multiline':False]
