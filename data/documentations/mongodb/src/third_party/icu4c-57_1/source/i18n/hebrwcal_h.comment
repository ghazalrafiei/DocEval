['text':'
******************************************************************************
* Copyright (C) 2003-2013, International Business Machines Corporation
* and others. All Rights Reserved.
******************************************************************************
*
* File HEBRWCAL.H
*
* Modification History:
*
*   Date        Name        Description
*   05/13/2003  srl          copied from gregocal.h
*   11/26/2003  srl          copied from buddhcal.h
******************************************************************************
','line_number':1,'multiline':True]
['text':'*
 * <code>HebrewCalendar</code> is a subclass of <code>Calendar</code>
 * that that implements the traditional Hebrew calendar.
 * This is the civil calendar in Israel and the liturgical calendar
 * of the Jewish faith worldwide.
 * <p>
 * The Hebrew calendar is lunisolar and thus has a number of interesting
 * properties that distinguish it from the Gregorian.  Months start
 * on the day of (an arithmetic approximation of) each new moon.  Since the
 * solar year (approximately 365.24 days) is not an even multiple of
 * the lunar month (approximately 29.53 days) an extra "leap month" is
 * inserted in 7 out of every 19 years.  To make matters even more
 * interesting, the start of a year can be delayed by up to three days
 * in order to prevent certain holidays from falling on the Sabbath and
 * to prevent certain illegal year lengths.  Finally, the lengths of certain
 * months can vary depending on the number of days in the year.
 * <p>
 * The leap month is known as "Adar 1" and is inserted between the
 * months of Shevat and Adar in leap years.  Since the leap month does
 * not come at the end of the year, calculations involving
 * month numbers are particularly complex.  Users of this class should
 * make sure to use the {@link #roll roll} and {@link #add add} methods
 * rather than attempting to perform date arithmetic by manipulating
 * the fields directly.
 * <p>
 * <b>Note:</b> In the traditional Hebrew calendar, days start at sunset.
 * However, in order to keep the time fields in this class
 * synchronized with those of the other calendars and with local clock time,
 * we treat days and months as beginning at midnight,
 * roughly 6 hours after the corresponding sunset.
 * <p>
 * If you are interested in more information on the rules behind the Hebrew
 * calendar, see one of the following references:
 * <ul>
 * <li>"<a href="http://www.amazon.com/exec/obidos/ASIN/0521564743">Calendrical Calculations</a>",
 *      by Nachum Dershowitz & Edward Reingold, Cambridge University Press, 1997, pages 85-91.
 *
 * <li>Hebrew Calendar Science and Myths,
 *      <a href="http://www.geocities.com/Athens/1584/">
 *      http://www.geocities.com/Athens/1584/</a>
 *
 * <li>The Calendar FAQ,
 *      <a href="http://www.faqs.org/faqs/calendars/faq/">
 *      http://www.faqs.org/faqs/calendars/faq/</a>
 * </ul>
 * <p>
 * @see com.ibm.icu.util.GregorianCalendar
 *
 * @author Laura Werner
 * @author Alan Liu
 * @author Steven R. Loomis
 * <p>
 * @internal
 ','line_number':29,'multiline':True]
['text':'*
   * Useful constants for HebrewCalendar.
   * @internal
   ','line_number':85,'multiline':True]
['text':'* 
     * Constant for Tishri, the 1st month of the Hebrew year. 
     ','line_number':90,'multiline':True]
['text':'*
     * Constant for Heshvan, the 2nd month of the Hebrew year. 
     ','line_number':94,'multiline':True]
['text':'*
     * Constant for Kislev, the 3rd month of the Hebrew year. 
     ','line_number':98,'multiline':True]
['text':'*
     * Constant for Tevet, the 4th month of the Hebrew year. 
     ','line_number':103,'multiline':True]
['text':'*
     * Constant for Shevat, the 5th month of the Hebrew year. 
     ','line_number':108,'multiline':True]
['text':'*
     * Constant for Adar I, the 6th month of the Hebrew year
     * (present in leap years only). In non-leap years, the calendar
     * jumps from Shevat (5th month) to Adar (7th month).
     ','line_number':113,'multiline':True]
['text':'* 
     * Constant for the Adar, the 7th month of the Hebrew year. 
     ','line_number':120,'multiline':True]
['text':'*
     * Constant for Nisan, the 8th month of the Hebrew year. 
     ','line_number':125,'multiline':True]
['text':'*
     * Constant for Iyar, the 9th month of the Hebrew year. 
     ','line_number':130,'multiline':True]
['text':'*
     * Constant for Sivan, the 10th month of the Hebrew year. 
     ','line_number':135,'multiline':True]
['text':'*
     * Constant for Tammuz, the 11th month of the Hebrew year. 
     ','line_number':140,'multiline':True]
['text':'*
     * Constant for Av, the 12th month of the Hebrew year. 
     ','line_number':145,'multiline':True]
['text':'*
     * Constant for Elul, the 13th month of the Hebrew year. 
     ','line_number':150,'multiline':True]
['text':'*
     * Constructs a HebrewCalendar based on the current time in the default time zone
     * with the given locale.
     *
     * @param aLocale  The given locale.
     * @param success  Indicates the status of HebrewCalendar object construction.
     *                 Returns U_ZERO_ERROR if constructed successfully.
     * @internal
     ','line_number':156,'multiline':True]
['text':'*
     * Destructor
     * @internal
     ','line_number':168,'multiline':True]
['text':'*
     * Copy constructor
     * @param source    the object to be copied.
     * @internal
     ','line_number':174,'multiline':True]
['text':'*
     * Default assignment operator
     * @param right    the object to be copied.
     * @internal
     ','line_number':181,'multiline':True]
['text':'*
     * Create and return a polymorphic copy of this calendar.
     * @return    return a polymorphic copy of this calendar.
     * @internal
     ','line_number':188,'multiline':True]
['text':'*
     * Override Calendar Returns a unique class ID POLYMORPHICALLY. Pure virtual
     * override. This method is to implement a simple version of RTTI, since not all C++
     * compilers support genuine RTTI. Polymorphic operator==() and clone() methods call
     * this method.
     *
     * @return   The class ID for this object. All objects of a given class have the
     *           same class ID. Objects of other classes have different class IDs.
     * @internal
     ','line_number':196,'multiline':True]
['text':'*
     * Return the class ID for this class. This is useful only for comparing to a return
     * value from getDynamicClassID(). For example:
     *
     *      Base* polymorphic_pointer = createPolymorphicObject();
     *      if (polymorphic_pointer->getDynamicClassID() ==
     *          Derived::getStaticClassID()) ...
     *
     * @return   The class ID for all objects of this class.
     * @internal
     ','line_number':208,'multiline':True]
['text':'*
     * return the calendar type, "hebrew".
     *
     * @return calendar type
     * @internal
     ','line_number':221,'multiline':True]
['text':' Calendar API','line_number':230,'multiline':False]
['text':'*
     * (Overrides Calendar) UDate Arithmetic function. Adds the specified (signed) amount
     * of time to the given time field, based on the calendar's rules.  For more
     * information, see the documentation for Calendar::add().
     *
     * @param field   The time field.
     * @param amount  The amount of date or time to be added to the field.
     * @param status  Output param set to success/failure code on exit. If any value
     *                previously set in the time field is invalid, this will be set to
     *                an error status.
     ','line_number':232,'multiline':True]
['text':'*
     * @deprecated ICU 2.6 use UCalendarDateFields instead of EDateFields
     ','line_number':244,'multiline':True]
['text':'*
     * (Overrides Calendar) Rolls up or down by the given amount in the specified field.
     * For more information, see the documentation for Calendar::roll().
     *
     * @param field   The time field.
     * @param amount  Indicates amount to roll.
     * @param status  Output param set to success/failure code on exit. If any value
     *                previously set in the time field is invalid, this will be set to
     *                an error status.
     * @internal
     ','line_number':250,'multiline':True]
['text':'*
     * (Overrides Calendar) Rolls up or down by the given amount in the specified field.
     * For more information, see the documentation for Calendar::roll().
     *
     * @param field   The time field.
     * @param amount  Indicates amount to roll.
     * @param status  Output param set to success/failure code on exit. If any value
     *                previously set in the time field is invalid, this will be set to
     *                an error status.
     * @deprecated ICU 2.6. Use roll(UCalendarDateFields field, int32_t amount, UErrorCode& status) instead.
`     ','line_number':263,'multiline':True]
['text':'*
     * @internal 
     ','line_number':276,'multiline':True]
['text':'*
     * Subclass API for defining limits of different types.
     * Subclasses must implement this method to return limits for the
     * following fields:
     *
     * <pre>UCAL_ERA
     * UCAL_YEAR
     * UCAL_MONTH
     * UCAL_WEEK_OF_YEAR
     * UCAL_WEEK_OF_MONTH
     * UCAL_DATE (DAY_OF_MONTH on Java)
     * UCAL_DAY_OF_YEAR
     * UCAL_DAY_OF_WEEK_IN_MONTH
     * UCAL_YEAR_WOY
     * UCAL_EXTENDED_YEAR</pre>
     *
     * @param field one of the above field numbers
     * @param limitType one of <code>MINIMUM</code>, <code>GREATEST_MINIMUM</code>,
     * <code>LEAST_MAXIMUM</code>, or <code>MAXIMUM</code>
     * @internal
     ','line_number':283,'multiline':True]
['text':'*
     * Return the number of days in the given month of the given extended
     * year of this calendar system.  Subclasses should override this
     * method if they can provide a more correct or more efficient
     * implementation than the default implementation in Calendar.
     * @internal
     ','line_number':306,'multiline':True]
['text':'*
     * Return the number of days in the given extended year of this
     * calendar system.  Subclasses should override this method if they can
     * provide a more correct or more efficient implementation than the
     * default implementation in Calendar.
     * @stable ICU 2.0
     ','line_number':315,'multiline':True]
['text':'*
     * Subclasses may override this method to compute several fields
     * specific to each calendar system.  These are:
     *
     * <ul><li>ERA
     * <li>YEAR
     * <li>MONTH
     * <li>DAY_OF_MONTH
     * <li>DAY_OF_YEAR
     * <li>EXTENDED_YEAR</ul>
     *
     * <p>The GregorianCalendar implementation implements
     * a calendar with the specified Julian/Gregorian cutover date.
     * @internal
     ','line_number':323,'multiline':True]
['text':'*
     * Return the extended year defined by the current fields.  This will
     * use the UCAL_EXTENDED_YEAR field or the UCAL_YEAR and supra-year fields (such
     * as UCAL_ERA) specific to the calendar system, depending on which set of
     * fields is newer.
     * @return the extended year
     * @internal
     ','line_number':339,'multiline':True]
['text':'*
     * Return the Julian day number of day before the first day of the
     * given month in the given extended year.  Subclasses should override
     * this method to implement their calendar system.
     * @param eyear the extended year
     * @param month the zero-based month, or 0 if useMonth is false
     * @param useMonth if false, compute the day before the first day of
     * the given year, otherwise, compute the day before the first day of
     * the given month
     * @param return the Julian day number of the day before the first
     * day of the given month and year
     * @internal
     ','line_number':348,'multiline':True]
['text':'*
     * Validate a single field of this calendar.
     * Overrides Calendar::validateField(int) to provide
     * special handling for month validation for Hebrew calendar.
     * @internal
     ','line_number':365,'multiline':True]
['text':'*
   * (Overrides Calendar) Return true if the current date for this Calendar is in
   * Daylight Savings Time. Recognizes DST_OFFSET, if it is set.
   *
   * @param status Fill-in parameter which receives the status of this operation.
   * @return   True if the current date for this Calendar is in Daylight Savings Time,
   *           false, otherwise.
   * @internal
   ','line_number':375,'multiline':True]
['text':'*
     * Returns TRUE because the Hebrew Calendar does have a default century
     * @internal
     ','line_number':386,'multiline':True]
['text':'*
     * Returns the date of the start of the default century
     * @return start of century - in milliseconds since epoch, 1970
     * @internal
     ','line_number':392,'multiline':True]
['text':'*
     * Returns the year in which the default century begins
     * @internal
     ','line_number':399,'multiline':True]
['text':' Calendar-specific implementation','line_number':405,'multiline':False]
['text':'*
     * Finds the day # of the first day in the given Hebrew year.
     * To do this, we want to calculate the time of the Tishri 1 new moon
     * in that year.
     * <p>
     * The algorithm here is similar to ones described in a number of
     * references, including:
     * <ul>
     * <li>"Calendrical Calculations", by Nachum Dershowitz & Edward Reingold,
     *     Cambridge University Press, 1997, pages 85-91.
     *
     * <li>Hebrew Calendar Science and Myths,
     *     <a href="http://www.geocities.com/Athens/1584/">
     *     http://www.geocities.com/Athens/1584/</a>
     *
     * <li>The Calendar FAQ,
     *      <a href="http://www.faqs.org/faqs/calendars/faq/">
     *      http://www.faqs.org/faqs/calendars/faq/</a>
     * </ul>
     * @param year extended year
     * @return day number (JD)
     * @internal
     ','line_number':406,'multiline':True]
['text':'*
     * @internal 
     ','line_number':433,'multiline':True]
['text':'*
     * @internal 
     ','line_number':438,'multiline':True]
['text':' #if !UCONFIG_NO_FORMATTING ','line_number':446,'multiline':True]
['text':'eof','line_number':449,'multiline':False]
