['text':'
*******************************************************************************
* Copyright (C) 2013-2015, International Business Machines
* Corporation and others.  All Rights Reserved.
*******************************************************************************
* collationfastlatin.cpp
*
* created on: 2013aug18
* created by: Markus W. Scherer
','line_number':1,'multiline':True]
['text':' No mini primaries are variable, set a variableTop just below the','line_number':34,'multiline':False]
['text':' lowest long mini primary.','line_number':35,'multiline':False]
['text':' variableTop >= digits, should not occur','line_number':41,'multiline':False]
['text':' The permutation affects the groups up to Latin.','line_number':62,'multiline':False]
['text':' In the future, there might be a special group between digits & Latin.','line_number':65,'multiline':False]
['text':' skip the header','line_number':85,'multiline':False]
['text':' Bail out for digits.','line_number':98,'multiline':False]
['text':' Shift the miniVarTop above other options.','line_number':102,'multiline':False]
['text':' This is a modified copy of CollationCompare::compareUpToQuaternary(),','line_number':110,'multiline':False]
['text':' optimized for common Latin text.','line_number':111,'multiline':False]
['text':' Keep them in sync!','line_number':112,'multiline':False]
['text':' Keep compareUTF16() and compareUTF8() in sync very closely!','line_number':113,'multiline':False]
['text':' skip the header','line_number':116,'multiline':False]
['text':' see getOptions()','line_number':117,'multiline':False]
['text':' needed for CollationSettings::getStrength() to work','line_number':118,'multiline':False]
['text':' Check for supported characters, fetch mini CEs, and compare primaries.','line_number':120,'multiline':False]
['text':'*
     * Single mini CE or a pair.
     * The current mini CE is in the lower 16 bits, the next one is in the upper 16 bits.
     * If there is only one, then it is in the lower bits, and the upper bits are 0.
     ','line_number':122,'multiline':True]
['text':' We fetch CEs until we get a non-ignorable primary or reach the end.','line_number':129,'multiline':False]
['text':' Return the primary difference.','line_number':200,'multiline':False]
['text':' In the following, we need to re-fetch each character because we did not buffer the CEs,','line_number':207,'multiline':False]
['text':' but we know that the string is well-formed and','line_number':208,'multiline':False]
['text':' only contains supported characters and mappings.','line_number':209,'multiline':False]
['text':' We might skip the secondary level but continue with the case level','line_number':211,'multiline':False]
['text':' which is turned on separately.','line_number':212,'multiline':False]
['text':' Full support for backwards secondary requires backwards contraction matching','line_number':276,'multiline':False]
['text':' and moving backwards between merge separators.','line_number':277,'multiline':False]
['text':' Remove the case bits from the tertiary weight when caseLevel is on or caseFirst is off.','line_number':340,'multiline':False]
['text':' Pass through EOS and MERGE_WEIGHT','line_number':381,'multiline':False]
['text':' and keep real tertiary weights larger than the MERGE_WEIGHT.','line_number':382,'multiline':False]
['text':' Tertiary CEs (secondary ignorables) are not supported in fast Latin.','line_number':383,'multiline':False]
['text':' Keep compareUTF16() and compareUTF8() in sync very closely!','line_number':449,'multiline':False]
['text':' skip the header','line_number':452,'multiline':False]
['text':' see RuleBasedCollator::getFastLatinOptions()','line_number':453,'multiline':False]
['text':' needed for CollationSettings::getStrength() to work','line_number':454,'multiline':False]
['text':' Check for supported characters, fetch mini CEs, and compare primaries.','line_number':456,'multiline':False]
['text':'*
     * Single mini CE or a pair.
     * The current mini CE is in the lower 16 bits, the next one is in the upper 16 bits.
     * If there is only one, then it is in the lower bits, and the upper bits are 0.
     ','line_number':458,'multiline':True]
['text':' Note: There is no need to assemble the code point.','line_number':464,'multiline':False]
['text':' We only need to look up the table entry for the character,','line_number':465,'multiline':False]
['text':' and nextPair() looks for whether c==0.','line_number':466,'multiline':False]
['text':' We fetch CEs until we get a non-ignorable primary or reach the end.','line_number':468,'multiline':False]
['text':' Return the primary difference.','line_number':551,'multiline':False]
['text':' In the following, we need to re-fetch each character because we did not buffer the CEs,','line_number':558,'multiline':False]
['text':' but we know that the string is well-formed and','line_number':559,'multiline':False]
['text':' only contains supported characters and mappings.','line_number':560,'multiline':False]
['text':' We might skip the secondary level but continue with the case level','line_number':562,'multiline':False]
['text':' which is turned on separately.','line_number':563,'multiline':False]
['text':' Full support for backwards secondary requires backwards contraction matching','line_number':627,'multiline':False]
['text':' and moving backwards between merge separators.','line_number':628,'multiline':False]
['text':' Remove the case bits from the tertiary weight when caseLevel is on or caseFirst is off.','line_number':691,'multiline':False]
['text':' Pass through EOS and MERGE_WEIGHT','line_number':732,'multiline':False]
['text':' and keep real tertiary weights larger than the MERGE_WEIGHT.','line_number':733,'multiline':False]
['text':' Tertiary CEs (secondary ignorables) are not supported in fast Latin.','line_number':734,'multiline':False]
['text':' The caller handled ASCII and valid/supported Latin.','line_number':813,'multiline':False]
['text':' 2000..203F -> 0180..01BF','line_number':821,'multiline':False]
['text':' U+FFFE','line_number':824,'multiline':False]
['text':' U+FFFF','line_number':826,'multiline':False]
['text':' The caller handled ASCII.','line_number':836,'multiline':False]
['text':' The string is well-formed and contains only supported characters.','line_number':837,'multiline':False]
['text':' 0080..017F','line_number':840,'multiline':False]
['text':' 2000..203F -> 0180..01BF','line_number':845,'multiline':False]
['text':' U+FFFE','line_number':847,'multiline':False]
['text':' U+FFFF','line_number':849,'multiline':False]
['text':' simple or special mini CE','line_number':857,'multiline':False]
['text':' ce >= CONTRACTION ','line_number':861,'multiline':True]
['text':' Contraction list: Default mapping followed by','line_number':866,'multiline':False]
['text':' 0 or more single-character contraction suffix mappings.','line_number':867,'multiline':False]
['text':' Read the next character.','line_number':870,'multiline':False]
['text':' 2000..203F -> 0180..01BF','line_number':877,'multiline':False]
['text':' U+FFFE & U+FFFF cannot occur in contractions.','line_number':879,'multiline':False]
['text':' 0080..017F','line_number':890,'multiline':False]
['text':' 2000..203F -> 0180..01BF','line_number':897,'multiline':False]
['text':' U+FFFE & U+FFFF cannot occur in contractions.','line_number':900,'multiline':False]
['text':' Look for the next character in the contraction suffix list,','line_number':915,'multiline':False]
['text':' which is in ascending order of single suffix characters.','line_number':916,'multiline':False]
['text':' first skip the default mapping','line_number':918,'multiline':False]
['text':' Return the CE or CEs for the default or contraction mapping.','line_number':930,'multiline':False]
['text':' one mini CE','line_number':947,'multiline':False]
['text':' variable','line_number':953,'multiline':False]
['text':' else special mini CE','line_number':955,'multiline':False]
['text':' variable','line_number':964,'multiline':False]
['text':' Primary+caseLevel: Ignore case level weights of primary ignorables.','line_number':972,'multiline':False]
['text':' Otherwise: Ignore case level weights of secondary ignorables.','line_number':973,'multiline':False]
['text':' For details see the comments in the CollationCompare class.','line_number':974,'multiline':False]
['text':' Tertiary CEs (secondary ignorables) are not supported in fast Latin.','line_number':975,'multiline':False]
['text':' one mini CE','line_number':977,'multiline':False]
['text':' A high secondary weight means we really have two CEs,','line_number':979,'multiline':False]
['text':' a primary CE and a secondary CE.','line_number':980,'multiline':False]
['text':' explicit weight of primary CE','line_number':982,'multiline':False]
['text':' implied weight of secondary CE','line_number':984,'multiline':False]
['text':' variable','line_number':989,'multiline':False]
['text':' else special mini CE','line_number':991,'multiline':False]
['text':' two mini CEs, same primary groups, neither expands like above','line_number':993,'multiline':False]
['text':' variable','line_number':1005,'multiline':False]
['text':' one mini CE','line_number':1014,'multiline':False]
['text':' A high secondary weight means we really have two CEs,','line_number':1016,'multiline':False]
['text':' a primary CE and a secondary CE.','line_number':1017,'multiline':False]
['text':' variable','line_number':1036,'multiline':False]
['text':' else special mini CE','line_number':1038,'multiline':False]
['text':' two mini CEs, same primary groups, neither expands like above','line_number':1040,'multiline':False]
['text':' variable','line_number':1056,'multiline':False]
['text':' Return the primary weight of a variable CE,','line_number':1064,'multiline':False]
['text':' or the maximum primary weight for a non-variable, not-completely-ignorable CE.','line_number':1065,'multiline':False]
['text':' one mini CE','line_number':1067,'multiline':False]
['text':' A high secondary weight means we really have two CEs,','line_number':1069,'multiline':False]
['text':' a primary CE and a secondary CE.','line_number':1070,'multiline':False]
['text':' variable','line_number':1079,'multiline':False]
['text':' else special mini CE','line_number':1081,'multiline':False]
['text':' two mini CEs, same primary groups, neither expands like above','line_number':1083,'multiline':False]
['text':' variable','line_number':1089,'multiline':False]
['text':' !UCONFIG_NO_COLLATION','line_number':1097,'multiline':False]
