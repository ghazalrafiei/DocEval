['text':'
 **********************************************************************
 * Copyright (c) 2003-2008, International Business Machines
 * Corporation and others.  All Rights Reserved.
 **********************************************************************
 * Author: Alan Liu
 * Created: September 2 2003
 * Since: ICU 2.8
 **********************************************************************
 ','line_number':1,'multiline':True]
['text':' Only designed to work for positive divisors','line_number':42,'multiline':False]
['text':' N.B. For certain large dividends, on certain platforms, there','line_number':46,'multiline':False]
['text':' is a bug such that the quotient is off by one.  If you doubt','line_number':47,'multiline':False]
['text':' this to be true, set a breakpoint below and run cintltst.','line_number':48,'multiline':False]
['text':' E.g. 6.7317038241449352e+022 / 86400000.0 is wrong on my','line_number':50,'multiline':False]
['text':' machine (too high by one).  4.1792057231752762e+024 /','line_number':51,'multiline':False]
['text':' 86400000.0 is wrong the other way (too low).','line_number':52,'multiline':False]
['text':' For quotients > ~2^53, we won't be able to add or','line_number':56,'multiline':False]
['text':' subtract one, since the LSB of the mantissa will be >','line_number':57,'multiline':False]
['text':' 2^0; that is, the exponent (base 2) will be larger than','line_number':58,'multiline':False]
['text':' the length, in bits, of the mantissa.  In that case, we','line_number':59,'multiline':False]
['text':' can't give a correct answer, so we set the remainder to','line_number':60,'multiline':False]
['text':' zero.  This has the desired effect of making extreme','line_number':61,'multiline':False]
['text':' values give back an approximate answer rather than','line_number':62,'multiline':False]
['text':' crashing.  For example, UDate values above a ~10^25','line_number':63,'multiline':False]
['text':' might all have a time of midnight.','line_number':64,'multiline':False]
['text':' January 1, 1 CE Gregorian','line_number':74,'multiline':False]
['text':' January 1, 1970 CE Gregorian','line_number':75,'multiline':False]
['text':' Julian cal','line_number':89,'multiline':False]
['text':' => Gregorian cal','line_number':90,'multiline':False]
['text':' => month/dom','line_number':91,'multiline':False]
['text':' JD => epoch day','line_number':93,'multiline':False]
['text':' Convert from 1970 CE epoch to 1 CE epoch (Gregorian calendar)','line_number':99,'multiline':False]
['text':' Convert from the day number to the multiple radix','line_number':102,'multiline':False]
['text':' representation.  We use 400-year, 100-year, and 4-year cycles.','line_number':103,'multiline':False]
['text':' For example, the 4-year cycle has 4 years + 1 leap day; giving','line_number':104,'multiline':False]
['text':' 1461 == 365*4 + 1 days.','line_number':105,'multiline':False]
['text':' 400-year cycle length','line_number':106,'multiline':False]
['text':' 100-year cycle length','line_number':107,'multiline':False]
['text':' 4-year cycle length','line_number':108,'multiline':False]
['text':' Dec 31 at end of 4- or 400-year cycle','line_number':112,'multiline':False]
['text':' Gregorian day zero is a Monday.','line_number':119,'multiline':False]
['text':' Common Julian/Gregorian calculation','line_number':123,'multiline':False]
['text':' zero-based DOY for March 1','line_number':125,'multiline':False]
['text':' zero-based month','line_number':129,'multiline':False]
['text':' one-based DOM','line_number':130,'multiline':False]
['text':' one-based doy','line_number':131,'multiline':False]
['text':' ---- CalendarData ------ ','line_number':160,'multiline':True]
['text':' CalendarData::CalendarData(const Locale& loc, UErrorCode& status) ','line_number':169,'multiline':False]
['text':'   : fFillin(NULL), fBundle(NULL), fFallback(NULL) {','line_number':170,'multiline':False]
['text':'   initData(loc.getBaseName(), (char*) "???", status);','line_number':171,'multiline':False]
['text':' }','line_number':172,'multiline':False]
['text':' retry with fallback (gregorian)','line_number':225,'multiline':False]
['text':' retry with fallback (gregorian)','line_number':251,'multiline':False]
['text':'// handling of 'default' keyword on failure: Commented out for 3.0.','line_number':260,'multiline':False]
['text':'   if((status == U_MISSING_RESOURCE_ERROR) && ','line_number':261,'multiline':False]
['text':'      uprv_strcmp(subKey,U_DEFAULT_KEY)) { // avoid recursion','line_number':262,'multiline':False]
['text':' #if defined (U_DEBUG_CALDATA)','line_number':263,'multiline':False]
['text':'     fprintf(stderr, "%p: - attempting fallback -\n", this);','line_number':264,'multiline':False]
['text':'     fflush(stderr);','line_number':265,'multiline':False]
['text':' #endif','line_number':266,'multiline':False]
['text':'     UErrorCode subStatus = U_ZERO_ERROR;','line_number':267,'multiline':False]
['text':'     int32_t len;','line_number':268,'multiline':False]
['text':'     char kwBuf[128] = "";','line_number':269,'multiline':False]
['text':'     const UChar *kw;','line_number':270,'multiline':False]
['text':'     /* fFillin = */ getByKey2(key, U_DEFAULT_KEY, subStatus);','line_number':271,'multiline':False]
['text':'     kw = ures_getString(fFillin, &len, &subStatus);','line_number':272,'multiline':False]
['text':'     if(len>126) { // too big','line_number':273,'multiline':False]
['text':'       len = 0;','line_number':274,'multiline':False]
['text':'     }','line_number':275,'multiline':False]
['text':'     if(U_SUCCESS(subStatus) && (len>0)) {','line_number':276,'multiline':False]
['text':'       u_UCharsToChars(kw, kwBuf, len+1);','line_number':277,'multiline':False]
['text':'       if(*kwBuf && uprv_strcmp(kwBuf,subKey)) {','line_number':278,'multiline':False]
['text':' #if defined (U_DEBUG_CALDATA)','line_number':279,'multiline':False]
['text':'         fprintf(stderr, "%p: trying  %s/format/default -> \"%s\"\n",this, key, kwBuf);','line_number':280,'multiline':False]
['text':' #endif','line_number':281,'multiline':False]
['text':'         // now try again with the default','line_number':282,'multiline':False]
['text':'         status = U_ZERO_ERROR;','line_number':283,'multiline':False]
['text':'         /* fFillin = */ getByKey2(key, kwBuf, status);','line_number':284,'multiline':False]
['text':'       }','line_number':285,'multiline':False]
['text':' #if defined (U_DEBUG_CALDATA)','line_number':286,'multiline':False]
['text':'     } else {','line_number':287,'multiline':False]
['text':'       fprintf(stderr, "%p: could not load  %s/format/default  - fail out (%s)\n",this, key, kwBuf, u_errorName(status));','line_number':288,'multiline':False]
['text':' #endif','line_number':289,'multiline':False]
['text':'     }','line_number':290,'multiline':False]
['text':'   }','line_number':291,'multiline':False]
['text':' retry with fallback (gregorian)','line_number':313,'multiline':False]
['text':'eof','line_number':328,'multiline':False]
