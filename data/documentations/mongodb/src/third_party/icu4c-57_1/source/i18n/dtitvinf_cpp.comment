['text':'******************************************************************************
* Copyright (C) 2008-2016, International Business Machines Corporation and
* others. All Rights Reserved.
*******************************************************************************
*
* File DTITVINF.CPP
*
*******************************************************************************
','line_number':1,'multiline':True]
['text':'TODO: define it in compiler time','line_number':16,'multiline':False]
['text':'#define DTITVINF_DEBUG 1','line_number':17,'multiline':False]
['text':' {0}','line_number':53,'multiline':False]
['text':' {1}','line_number':55,'multiline':False]
['text':' default fall-back','line_number':58,'multiline':False]
['text':'*
 * Sink for enumerating all of the date interval skeletons.
 * Contains inner sink structs, each one corresponding to a type of resource table.
 * The outer struct finds the dateInterval table or an alias.
 ','line_number':223,'multiline':True]
['text':'*
     * Sink to handle each skeleton table.
     ','line_number':230,'multiline':True]
['text':'*
     * Sink to store the date interval pattern for each skeleton pattern character.
     ','line_number':249,'multiline':True]
['text':' Process the key','line_number':259,'multiline':False]
['text':' If the calendar field has a valid value','line_number':262,'multiline':False]
['text':' Set the interval pattern','line_number':264,'multiline':False]
['text':' Check that patternLetter is just one letter','line_number':272,'multiline':False]
['text':' Check that the pattern letter is accepted','line_number':275,'multiline':False]
['text':' TODO(ticket:12190): Why icu4c doesn't accept the calendar field "s" but icu4j does?','line_number':288,'multiline':False]
['text':'*
         * Stores the interval pattern for the current skeleton in the internal data structure
         * if it's not present.
         ','line_number':293,'multiline':True]
['text':' Check if the pattern has already been stored on the data structure','line_number':299,'multiline':False]
['text':' Check if it's an alias of intervalFormats','line_number':325,'multiline':False]
['text':' Get the calendar type for the alias path.','line_number':331,'multiline':False]
['text':' Check if it's the intervalFormat table','line_number':345,'multiline':False]
['text':'*
     * Extracts the calendar type from the path.
     ','line_number':352,'multiline':True]
['text':' Output data','line_number':376,'multiline':False]
['text':' Next calendar type','line_number':379,'multiline':False]
['text':' Current skeleton table being enumerated','line_number':382,'multiline':False]
['text':' Virtual destructors must be defined out of line.','line_number':386,'multiline':False]
['text':' Get the correct calendar type','line_number':402,'multiline':False]
['text':' initial default','line_number':403,'multiline':False]
['text':' to be filled in with the type to use, if all goes well','line_number':404,'multiline':False]
['text':' obtain a locale that always has the calendar key value that should be used','line_number':406,'multiline':False]
['text':' ensure null termination','line_number':409,'multiline':False]
['text':' now get the calendar key value from that locale','line_number':410,'multiline':False]
['text':' Instantiate the resource bundles','line_number':418,'multiline':False]
['text':' Get the fallback pattern','line_number':430,'multiline':False]
['text':' Instantiate the sink','line_number':446,'multiline':False]
['text':' Already loaded calendar types','line_number':450,'multiline':False]
['text':' Set an error when a loop is detected','line_number':455,'multiline':False]
['text':' Register the calendar type to avoid loops','line_number':461,'multiline':False]
['text':' Get the calendar string','line_number':465,'multiline':False]
['text':' Reset the next calendar type to load.','line_number':471,'multiline':False]
['text':' Get all resources for this calendar type','line_number':474,'multiline':False]
['text':' Close the opened resource bundles','line_number':480,'multiline':False]
['text':' it is an ASCII char in skeleton','line_number':515,'multiline':False]
['text':'       A   B   C   D   E   F   G   H   I   J   K   L   M   N   O','line_number':552,'multiline':False]
['text':'   P   Q   R   S   T   U   V   W   X   Y   Z','line_number':554,'multiline':False]
['text':'       a   b   c   d   e   f   g   h   i   j   k   l   m   n   o','line_number':556,'multiline':False]
['text':'   p   q   r   s   t   u   v   w   x   y   z','line_number':558,'multiline':False]
['text':'       A   B   C   D   E   F   G   H   I   J   K   L   M   N   O','line_number':564,'multiline':False]
['text':'   P   Q   R   S   T   U   V   W   X   Y   Z','line_number':566,'multiline':False]
['text':'       a   b   c   d   e   f   g   h   i   j   k   l   m   n   o','line_number':568,'multiline':False]
['text':'   p   q   r   s   t   u   v   w   x   y   z','line_number':570,'multiline':False]
['text':' hack for 'v' and 'z'.','line_number':580,'multiline':False]
['text':' resource bundle only have time skeletons ending with 'v',','line_number':581,'multiline':False]
['text':' but not for time skeletons ending with 'z'.','line_number':582,'multiline':False]
['text':' 0 means exact the same skeletons;','line_number':597,'multiline':False]
['text':' 1 means having the same field, but with different length,','line_number':598,'multiline':False]
['text':' 2 means only z/v differs','line_number':599,'multiline':False]
['text':' -1 means having different field.','line_number':600,'multiline':False]
['text':' clear skeleton field width','line_number':615,'multiline':False]
['text':' calculate distance','line_number':621,'multiline':False]
['text':'case UCAL_DAY_OF_MONTH:','line_number':682,'multiline':False]
['text':'*
 * set hash table value comparator
 *
 * @param val1  one value in comparison
 * @param val2  the other value in comparison
 * @return      TRUE if 2 values are the same, FALSE otherwise
 ','line_number':725,'multiline':True]
