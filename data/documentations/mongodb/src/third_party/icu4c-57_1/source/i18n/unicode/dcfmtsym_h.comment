['text':'
********************************************************************************
*   Copyright (C) 1997-2016, International Business Machines
*   Corporation and others.  All Rights Reserved.
********************************************************************************
*
* File DCFMTSYM.H
*
* Modification History:
*
*   Date        Name        Description
*   02/19/97    aliu        Converted from java.
*   03/18/97    clhuang     Updated per C++ implementation.
*   03/27/97    helena      Updated to pass the simple test after code review.
*   08/26/97    aliu        Added currency/intl currency symbol support.
*   07/22/98    stephen     Changed to match C++ style
*                            currencySymbol -> fCurrencySymbol
*                            Constants changed from CAPS to kCaps
*   06/24/99    helena      Integrated Alan's NF enhancements and Java2 bug fixes
*   09/22/00    grhoten     Marked deprecation tags with a pointer to replacement
*                            functions.
********************************************************************************
','line_number':1,'multiline':True]
['text':'*
 * \file
 * \brief C++ API: Symbols for formatting numbers.
 ','line_number':37,'multiline':True]
['text':'*
 * This class represents the set of symbols needed by DecimalFormat
 * to format numbers. DecimalFormat creates for itself an instance of
 * DecimalFormatSymbols from its locale data.  If you need to change any
 * of these symbols, you can get the DecimalFormatSymbols object from
 * your DecimalFormat and modify it.
 * <P>
 * Here are the special characters used in the parts of the
 * subpattern, with notes on their usage.
 * <pre>
 * \code
 *        Symbol   Meaning
 *          0      a digit
 *          #      a digit, zero shows as absent
 *          .      placeholder for decimal separator
 *          ,      placeholder for grouping separator.
 *          ;      separates formats.
 *          -      default negative prefix.
 *          %      divide by 100 and show as percentage
 *          X      any other characters can be used in the prefix or suffix
 *          '      used to quote special characters in a prefix or suffix.
 * \endcode
 *  </pre>
 * [Notes]
 * <P>
 * If there is no explicit negative subpattern, - is prefixed to the
 * positive form. That is, "0.00" alone is equivalent to "0.00;-0.00".
 * <P>
 * The grouping separator is commonly used for thousands, but in some
 * countries for ten-thousands. The interval is a constant number of
 * digits between the grouping characters, such as 100,000,000 or 1,0000,0000.
 * If you supply a pattern with multiple grouping characters, the interval
 * between the last one and the end of the integer is the one that is
 * used. So "#,##,###,####" == "######,####" == "##,####,####".
 * <P>
 * This class only handles localized digits where the 10 digits are
 * contiguous in Unicode, from 0 to 9. Other digits sets (such as
 * superscripts) would need a different subclass.
 ','line_number':45,'multiline':True]
['text':'*
     * Constants for specifying a number format symbol.
     * @stable ICU 2.0
     ','line_number':86,'multiline':True]
['text':'* The decimal separator ','line_number':91,'multiline':True]
['text':'* The grouping separator ','line_number':93,'multiline':True]
['text':'* The pattern separator ','line_number':95,'multiline':True]
['text':'* The percent sign ','line_number':97,'multiline':True]
['text':'* Zero','line_number':99,'multiline':True]
['text':'* Character representing a digit in the pattern ','line_number':101,'multiline':True]
['text':'* The minus sign ','line_number':103,'multiline':True]
['text':'* The plus sign ','line_number':105,'multiline':True]
['text':'* The currency symbol ','line_number':107,'multiline':True]
['text':'* The international currency symbol ','line_number':109,'multiline':True]
['text':'* The monetary separator ','line_number':111,'multiline':True]
['text':'* The exponential symbol ','line_number':113,'multiline':True]
['text':'* Per mill symbol - replaces kPermillSymbol ','line_number':115,'multiline':True]
['text':'* Escape padding character ','line_number':117,'multiline':True]
['text':'* Infinity symbol ','line_number':119,'multiline':True]
['text':'* Nan symbol ','line_number':121,'multiline':True]
['text':'* Significant digit symbol
         * @stable ICU 3.0 ','line_number':123,'multiline':True]
['text':'* The monetary grouping separator
         * @stable ICU 3.6
         ','line_number':126,'multiline':True]
['text':'* One
         * @stable ICU 4.6
         ','line_number':130,'multiline':True]
['text':'* Two
         * @stable ICU 4.6
         ','line_number':134,'multiline':True]
['text':'* Three
         * @stable ICU 4.6
         ','line_number':138,'multiline':True]
['text':'* Four
         * @stable ICU 4.6
         ','line_number':142,'multiline':True]
['text':'* Five
         * @stable ICU 4.6
         ','line_number':146,'multiline':True]
['text':'* Six
         * @stable ICU 4.6
         ','line_number':150,'multiline':True]
['text':'* Seven
         * @stable ICU 4.6
         ','line_number':154,'multiline':True]
['text':'* Eight
         * @stable ICU 4.6
         ','line_number':158,'multiline':True]
['text':'* Nine
         * @stable ICU 4.6
         ','line_number':162,'multiline':True]
['text':'* Multiplication sign.
         * @stable ICU 54
         ','line_number':166,'multiline':True]
['text':'* count symbol constants ','line_number':170,'multiline':True]
['text':'*
     * Create a DecimalFormatSymbols object for the given locale.
     *
     * @param locale    The locale to get symbols for.
     * @param status    Input/output parameter, set to success or
     *                  failure code upon return.
     * @stable ICU 2.0
     ','line_number':174,'multiline':True]
['text':'*
     * Create a DecimalFormatSymbols object for the default locale.
     * This constructor will not fail.  If the resource file data is
     * not available, it will use hard-coded last-resort data and
     * set status to U_USING_FALLBACK_ERROR.
     *
     * @param status    Input/output parameter, set to success or
     *                  failure code upon return.
     * @stable ICU 2.0
     ','line_number':184,'multiline':True]
['text':'*
     * Creates a DecimalFormatSymbols object with last-resort data.
     * Intended for callers who cache the symbols data and
     * set all symbols on the resulting object.
     *
     * The last-resort symbols are similar to those for the root data,
     * except that the grouping separators are empty,
     * the NaN symbol is U+FFFD rather than "NaN",
     * and the CurrencySpacing patterns are empty.
     *
     * @param status    Input/output parameter, set to success or
     *                  failure code upon return.
     * @return last-resort symbols
     * @stable ICU 52
     ','line_number':196,'multiline':True]
['text':'*
     * Copy constructor.
     * @stable ICU 2.0
     ','line_number':213,'multiline':True]
['text':'*
     * Assignment operator.
     * @stable ICU 2.0
     ','line_number':219,'multiline':True]
['text':'*
     * Destructor.
     * @stable ICU 2.0
     ','line_number':225,'multiline':True]
['text':'*
     * Return true if another object is semantically equal to this one.
     *
     * @param other    the object to be compared with.
     * @return         true if another object is semantically equal to this one.
     * @stable ICU 2.0
     ','line_number':231,'multiline':True]
['text':'*
     * Return true if another object is semantically unequal to this one.
     *
     * @param other    the object to be compared with.
     * @return         true if another object is semantically unequal to this one.
     * @stable ICU 2.0
     ','line_number':240,'multiline':True]
['text':'*
     * Get one of the format symbols by its enum constant.
     * Each symbol is stored as a string so that graphemes
     * (characters with modifier letters) can be used.
     *
     * @param symbol    Constant to indicate a number format symbol.
     * @return    the format symbols by the param 'symbol'
     * @stable ICU 2.0
     ','line_number':249,'multiline':True]
['text':'*
     * Set one of the format symbols by its enum constant.
     * Each symbol is stored as a string so that graphemes
     * (characters with modifier letters) can be used.
     *
     * @param symbol    Constant to indicate a number format symbol.
     * @param value     value of the format symbol
     * @param propogateDigits If false, setting the zero digit will not automatically set 1-9.
     *     The default behavior is to automatically set 1-9 if zero is being set and the value
     *     it is being set to corresponds to a known Unicode zero digit.
     * @stable ICU 2.0
     ','line_number':260,'multiline':True]
['text':'*
     * Returns the locale for which this object was constructed.
     * @stable ICU 2.6
     ','line_number':274,'multiline':True]
['text':'*
     * Returns the locale for this object. Two flavors are available:
     * valid and actual locale.
     * @stable ICU 2.8
     ','line_number':280,'multiline':True]
['text':'*
      * Get pattern string for 'CurrencySpacing' that can be applied to
      * currency format.
      * This API gets the CurrencySpacing data from ResourceBundle. The pattern can
      * be empty if there is no data from current locale and its parent locales.
      *
      * @param type :  UNUM_CURRENCY_MATCH, UNUM_CURRENCY_SURROUNDING_MATCH or UNUM_CURRENCY_INSERT.
      * @param beforeCurrency : true if the pattern is for before currency symbol.
      *                         false if the pattern is for after currency symbol.
      * @param status: Input/output parameter, set to success or
      *                  failure code upon return.
      * @return pattern string for currencyMatch, surroundingMatch or spaceInsert.
      *     Return empty string if there is no data for this locale and its parent
      *     locales.
      * @stable ICU 4.8
      ','line_number':287,'multiline':True]
['text':'*
       * Set pattern string for 'CurrencySpacing' that can be applied to
       * currency format.
       *
       * @param type : UNUM_CURRENCY_MATCH, UNUM_CURRENCY_SURROUNDING_MATCH or UNUM_CURRENCY_INSERT.
       * @param beforeCurrency : true if the pattern is for before currency symbol.
       *                         false if the pattern is for after currency symbol.
       * @param pattern : pattern string to override current setting.
       * @stable ICU 4.8
       ','line_number':306,'multiline':True]
['text':'*
     * ICU "poor man's RTTI", returns a UClassID for the actual class.
     *
     * @stable ICU 2.2
     ','line_number':320,'multiline':True]
['text':'*
     * ICU "poor man's RTTI", returns a UClassID for this class.
     *
     * @stable ICU 2.2
     ','line_number':327,'multiline':True]
['text':'*
     * Initializes the symbols from the LocaleElements resource bundle.
     * Note: The organization of LocaleElements badly needs to be
     * cleaned up.
     *
     * @param locale               The locale to get symbols for.
     * @param success              Input/output parameter, set to success or
     *                             failure code upon return.
     * @param useLastResortData    determine if use last resort data
     ','line_number':337,'multiline':True]
['text':'*
     * Initialize the symbols with default values.
     ','line_number':349,'multiline':True]
['text':'*
     * @internal For ICU use only
     ','line_number':359,'multiline':True]
['text':'*
     * @internal For ICU use only
     ','line_number':366,'multiline':True]
['text':' U_HIDE_INTERNAL_API ','line_number':372,'multiline':True]
['text':'*
     * _Internal_ function - more efficient version of getSymbol,
     * returning a const reference to one of the symbol strings.
     * The returned reference becomes invalid when the symbol is changed
     * or when the DecimalFormatSymbols are destroyed.
     * ### TODO markus 2002oct11: Consider proposing getConstSymbol() to be really public.
     * Note: moved #ifndef U_HIDE_INTERNAL_API after this, since this is needed for inline in DecimalFormat
     *
     * @param symbol Constant to indicate a number format symbol.
     * @return the format symbol by the param 'symbol'
     * @internal
     ','line_number':374,'multiline':True]
['text':'*
     * Returns that pattern stored in currecy info. Internal API for use by NumberFormat API.
     * @internal
     ','line_number':389,'multiline':True]
['text':' U_HIDE_INTERNAL_API ','line_number':394,'multiline':True]
['text':'*
     * Private symbol strings.
     * They are either loaded from a resource bundle or otherwise owned.
     * setSymbol() clones the symbol string.
     * Readonly aliases can only come from a resource bundle, so that we can always
     * use fastCopyFrom() with them.
     *
     * If DecimalFormatSymbols becomes subclassable and the status of fSymbols changes
     * from private to protected,
     * or when fSymbols can be set any other way that allows them to be readonly aliases
     * to non-resource bundle strings,
     * then regular UnicodeString copies must be used instead of fastCopyFrom().
     *
     * @internal
     ','line_number':397,'multiline':True]
['text':'*
     * Non-symbol variable for getConstSymbol(). Always empty.
     * @internal
     ','line_number':414,'multiline':True]
['text':' -------------------------------------','line_number':432,'multiline':False]
['text':' See comments above for this function. Not hidden with #ifndef U_HIDE_INTERNAL_API','line_number':445,'multiline':False]
['text':' -------------------------------------','line_number':457,'multiline':False]
['text':' If the zero digit is being set to a known zero digit according to Unicode,','line_number':471,'multiline':False]
['text':' then we automatically set the corresponding 1-9 digits','line_number':472,'multiline':False]
['text':' -------------------------------------','line_number':484,'multiline':False]
['text':' U_HIDE_INTERNAL_API ','line_number':496,'multiline':True]
['text':' #if !UCONFIG_NO_FORMATTING ','line_number':500,'multiline':True]
['text':' _DCFMTSYM','line_number':502,'multiline':False]
['text':'eof','line_number':503,'multiline':False]
