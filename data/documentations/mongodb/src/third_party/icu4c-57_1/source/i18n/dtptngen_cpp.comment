['text':'
*******************************************************************************
* Copyright (C) 2007-2016, International Business Machines Corporation and
* others. All Rights Reserved.
*******************************************************************************
*
* File DTPTNGEN.CPP
*
*******************************************************************************
','line_number':1,'multiline':True]
['text':'*
 * If we are on EBCDIC, use an iterator which will
 * traverse the bundles in ASCII order.
 ','line_number':43,'multiline':True]
['text':' Must be C linkage to pass function pointer to the sort function ','line_number':68,'multiline':True]
['text':'CompareContext *cmp=(CompareContext *)context;','line_number':74,'multiline':False]
['text':' *****************************************************************************','line_number':131,'multiline':False]
['text':' class DateTimePatternGenerator','line_number':132,'multiline':False]
['text':' *****************************************************************************','line_number':133,'multiline':False]
['text':' GyQMwWEdDFHmsSv','line_number':135,'multiline':False]
['text':' patternChar, field, type, minLen, weight','line_number':141,'multiline':False]
['text':' LOW_E is currently not used in CLDR data, should not be canonical','line_number':175,'multiline':False]
['text':' really internal use, so we don't care','line_number':182,'multiline':False]
['text':' 24 hour','line_number':184,'multiline':False]
['text':' 24 hour','line_number':185,'multiline':False]
['text':' 12 hour','line_number':186,'multiline':False]
['text':' 12 hour','line_number':187,'multiline':False]
['text':' 12/24 hour','line_number':209,'multiline':False]
['text':' 12/24 hour no AM/PM','line_number':210,'multiline':False]
['text':' last row of dtTypes[]','line_number':211,'multiline':False]
['text':' For appendItems','line_number':228,'multiline':False]
['text':' {0} \u251C{2}: {1}\u2524','line_number':230,'multiline':False]
['text':'static const UChar repeatedPatterns[6]={CAP_G, CAP_E, LOW_Z, LOW_V, CAP_Q, 0}; // "GEzvQ"','line_number':232,'multiline':False]
['text':'static const UnicodeString repeatedPattern=UnicodeString(repeatedPatterns);','line_number':240,'multiline':False]
['text':' reflexive case','line_number':317,'multiline':False]
['text':' NUL-terminate for the C API.','line_number':328,'multiline':False]
['text':' NUL-terminate for the C API.','line_number':341,'multiline':False]
['text':' Value deleter for hashmap.','line_number':394,'multiline':False]
['text':' Close hashmap at cleanup.','line_number':399,'multiline':False]
['text':' namespace','line_number':415,'multiline':False]
['text':'const char *baseLangName = locale.getBaseName(); // unused','line_number':419,'multiline':False]
['text':' DateTimePatternGenerator::initData','line_number':433,'multiline':False]
['text':' Initialize sub-sinks.','line_number':438,'multiline':False]
['text':' Entry point.','line_number':442,'multiline':False]
['text':' namespace','line_number':527,'multiline':False]
['text':' TODO: Currently in the enumeration each table allocates a new array.','line_number':541,'multiline':False]
['text':' Try to reduce the number of memory allocations. Consider storing a','line_number':542,'multiline':False]
['text':' UVector32 with the concatenation of all of the sub-arrays, put the start index','line_number':543,'multiline':False]
['text':' into the hashmap, store 6 single-value sub-arrays right at the beginning of the','line_number':544,'multiline':False]
['text':' vector (at index enum*2) for easy data sharing, copy sub-arrays into runtime','line_number':545,'multiline':False]
['text':' object. Remember to clean up the vector, too.','line_number':546,'multiline':False]
['text':' no room for NUL','line_number':560,'multiline':False]
['text':' Lookup is successful','line_number':581,'multiline':False]
['text':' Lookup failed, twice','line_number':588,'multiline':False]
['text':'status','line_number':596,'multiline':True]
['text':'status','line_number':606,'multiline':True]
['text':'status','line_number':615,'multiline':True]
['text':'status','line_number':625,'multiline':True]
['text':' Load with ICU patterns','line_number':643,'multiline':False]
['text':' TODO Maybe we should return an error when the date format isn't simple.','line_number':651,'multiline':False]
['text':' HACK for hh:ss','line_number':660,'multiline':False]
['text':' TODO Maybe we should return an error when the date format isn't simple.','line_number':665,'multiline':False]
['text':' HhKk, the hour format characters','line_number':721,'multiline':False]
['text':' Read-only alias.','line_number':732,'multiline':False]
['text':' NUL-terminate for the C API.','line_number':746,'multiline':False]
['text':' initial default','line_number':755,'multiline':False]
['text':' to be filled in with the type to use, if all goes well','line_number':756,'multiline':False]
['text':' obtain a locale that always has the calendar key value that should be used','line_number':759,'multiline':False]
['text':' ensure null termination','line_number':762,'multiline':False]
['text':' now get the calendar key value from that locale','line_number':763,'multiline':False]
['text':' no more pattern','line_number':780,'multiline':False]
['text':' short time format','line_number':785,'multiline':False]
['text':' set fDefaultHourFormatChar to the hour format character from this pattern','line_number':786,'multiline':False]
['text':' toggle (handle quoted literals & '' for single quote)','line_number':792,'multiline':False]
['text':' no more pattern','line_number':810,'multiline':False]
['text':' add available formats','line_number':837,'multiline':False]
['text':' At the start of the loop:','line_number':843,'multiline':False]
['text':' - rb is the open resource bundle for the current locale being processed,','line_number':844,'multiline':False]
['text':'   whose actual name is in curLocaleName.','line_number':845,'multiline':False]
['text':' - if U_SUCCESS(err), then calBundle and calTypeBundle are open;','line_number':846,'multiline':False]
['text':'   process contents of calTypeBundle, then close calBundle and calTypeBundle.','line_number':847,'multiline':False]
['text':' process contents of calTypeBundle','line_number':849,'multiline':False]
['text':' Add pattern with its associated skeleton. Override any duplicate derived from std patterns,','line_number':870,'multiline':False]
['text':' but not a previous availableFormats entry:','line_number':871,'multiline':False]
['text':' close calBundle and calTypeBundle','line_number':881,'multiline':False]
['text':' we just finished handling root, nothing more to check','line_number':886,'multiline':False]
['text':' Find the name of the appropriate parent locale (from %%Parent if present, else','line_number':890,'multiline':False]
['text':' uloc_getParent on the actual locale name)','line_number':891,'multiline':False]
['text':' (It would be nice to have a ures function that did this...)','line_number':892,'multiline':False]
['text':' just fallback to root, since we are not already there','line_number':903,'multiline':False]
['text':' Close current locale bundle','line_number':908,'multiline':False]
['text':' And open its parent, which becomes the new current locale being processed','line_number':910,'multiline':False]
['text':' Get the name of the parent / new current locale','line_number':916,'multiline':False]
['text':' Open calBundle and calTypeBundle','line_number':925,'multiline':False]
['text':' Go to the top of the loop to process contents of calTypeBundle','line_number':933,'multiline':False]
['text':' NUL-terminate for the C API.','line_number':956,'multiline':False]
['text':' NUL-terminate for the C API.','line_number':968,'multiline':False]
['text':' Replace hour metacharacters 'j', 'C' and 'J', set flags as necessary','line_number':999,'multiline':False]
['text':' Get pattern for skeleton with H, then replace H or k','line_number':1031,'multiline':False]
['text':' with fDefaultHourFormatChar (if different)','line_number':1032,'multiline':False]
['text':'status','line_number':1080,'multiline':True]
['text':' NUL-terminate for the C API.','line_number':1089,'multiline':False]
['text':' NUL-terminate for the C API.','line_number':1111,'multiline':False]
['text':' NUL-terminate for the C API.','line_number':1146,'multiline':False]
['text':' For DateTimePatternGenerator::addPatternWithSkeleton -','line_number':1161,'multiline':False]
['text':' If skeletonToUse is specified, then an availableFormats entry is being added. In this case:','line_number':1162,'multiline':False]
['text':' 1. We pass that skeleton to matcher.set instead of having it derive a skeleton from the pattern.','line_number':1163,'multiline':False]
['text':' 2. If the new entry's skeleton or basePattern does match an existing entry but that entry also had a skeleton specified','line_number':1164,'multiline':False]
['text':' (i.e. it was also from availableFormats), then the new entry does not override it regardless of the value of the override','line_number':1165,'multiline':False]
['text':' parameter. This prevents later availableFormats entries from a parent locale overriding earlier ones from the actual','line_number':1166,'multiline':False]
['text':' specified locale. However, availableFormats entries *should* override entries with matching skeleton whose skeleton was','line_number':1167,'multiline':False]
['text':' derived (i.e. entries derived from the standard date/time patters for the specified locale).','line_number':1168,'multiline':False]
['text':' 3. When adding the pattern (patternMap->add), we set a new boolean to indicate that the added entry had a','line_number':1169,'multiline':False]
['text':' specified skeleton (which sets a new field in the PtnElem in the PatternMap).','line_number':1170,'multiline':False]
['text':' no longer trims skeleton fields to max len 3, per #7930','line_number':1189,'multiline':False]
['text':' or perhaps instead: basePattern = *skeletonToUse;','line_number':1190,'multiline':False]
['text':' We only care about base conflicts - and replacing the pattern associated with a base - if:','line_number':1192,'multiline':False]
['text':' 1. the conflicting previous base pattern did *not* have an explicit skeleton; in that case the previous','line_number':1193,'multiline':False]
['text':' base + pattern combination was derived from either (a) a canonical item, (b) a standard format, or','line_number':1194,'multiline':False]
['text':' (c) a pattern specified programmatically with a previous call to addPattern (which would only happen','line_number':1195,'multiline':False]
['text':' if we are getting here from a subsequent call to addPattern).','line_number':1196,'multiline':False]
['text':' 2. a skeleton is specified for the current pattern, but override=false; in that case we are checking','line_number':1197,'multiline':False]
['text':' availableFormats items from root, which should not override any previous entry with the same base.','line_number':1198,'multiline':False]
['text':' The only time we get here with override=true and skeletonToUse!=null is when adding availableFormats','line_number':1208,'multiline':False]
['text':' items from CLDR data. In that case, we don't want an item from a parent locale to replace an item with','line_number':1209,'multiline':False]
['text':' same skeleton from the specified locale, so skip the current item if skeletonWasSpecified is true for','line_number':1210,'multiline':False]
['text':' the previously-specified conflicting item.','line_number':1211,'multiline':False]
['text':' If the best raw match had a specified skeleton and that skeleton was requested by the caller,','line_number':1277,'multiline':False]
['text':' then return it too. This generally happens when the caller needs to pass that skeleton','line_number':1278,'multiline':False]
['text':' through to adjustFieldTypes so the latter can do a better job.','line_number':1279,'multiline':False]
['text':' don't adjust','line_number':1309,'multiline':False]
['text':' Handle special day periods.','line_number':1314,'multiline':False]
['text':' '0'','line_number':1316,'multiline':False]
['text':' Here:','line_number':1330,'multiline':False]
['text':' - "reqField" is the field from the originally requested skeleton, with length','line_number':1331,'multiline':False]
['text':' "reqFieldLen".','line_number':1332,'multiline':False]
['text':' - "field" is the field from the found pattern.','line_number':1333,'multiline':False]
['text':'','line_number':1334,'multiline':False]
['text':' The adjusted field should consist of characters from the originally requested','line_number':1335,'multiline':False]
['text':' skeleton, except in the case of UDATPG_HOUR_FIELD or UDATPG_MONTH_FIELD or','line_number':1336,'multiline':False]
['text':' UDATPG_WEEKDAY_FIELD or UDATPG_YEAR_FIELD, in which case it should consist','line_number':1337,'multiline':False]
['text':' of characters from the  found pattern.','line_number':1338,'multiline':False]
['text':'','line_number':1339,'multiline':False]
['text':' The length of the adjusted field (adjFieldLen) should match that in the originally','line_number':1340,'multiline':False]
['text':' requested skeleton, except that in the following cases the length of the adjusted field','line_number':1341,'multiline':False]
['text':' should match that in the found pattern (i.e. the length of this pattern field should','line_number':1342,'multiline':False]
['text':' not be adjusted):','line_number':1343,'multiline':False]
['text':' 1. typeValue is UDATPG_HOUR_FIELD/MINUTE/SECOND and the corresponding bit in options is','line_number':1344,'multiline':False]
['text':'    not set (ticket #7180). Note, we may want to implement a similar change for other','line_number':1345,'multiline':False]
['text':'    numeric fields (MM, dd, etc.) so the default behavior is to get locale preference for','line_number':1346,'multiline':False]
['text':'    field length, but options bits can be used to override this.','line_number':1347,'multiline':False]
['text':' 2. There is a specified skeleton for the found pattern and one of the following is true:','line_number':1348,'multiline':False]
['text':'    a) The length of the field in the skeleton (skelFieldLen) is equal to reqFieldLen.','line_number':1349,'multiline':False]
['text':'    b) The pattern field is numeric and the skeleton field is not, or vice versa.','line_number':1350,'multiline':False]
['text':' 1-3 for E are equivalent to 3 for c,e','line_number':1355,'multiline':False]
['text':' don't adjust the field length in the found pattern','line_number':1367,'multiline':False]
['text':' precondition: EVERY single field must work!','line_number':1401,'multiline':False]
['text':' cannot find the proper missing field','line_number':1403,'multiline':False]
['text':' walk through the hash table and create a deep clone','line_number':1475,'multiline':False]
['text':' out of memory','line_number':1577,'multiline':False]
['text':' out of memory','line_number':1585,'multiline':False]
['text':' PatternMap destructor','line_number':1626,'multiline':False]
['text':' mapped pattern value','line_number':1631,'multiline':False]
['text':' the baseChar must be A-Z or a-z','line_number':1638,'multiline':False]
['text':' out of memory','line_number':1654,'multiline':False]
['text':' add new element to the list.','line_number':1671,'multiline':False]
['text':' out of memory','line_number':1678,'multiline':False]
['text':' Pattern exists in the list already.','line_number':1687,'multiline':False]
['text':' Overwrite the value.','line_number':1691,'multiline':False]
['text':' It was a bug that we were not doing the following previously,','line_number':1693,'multiline':False]
['text':' though that bug hid other problems by making things partly work.','line_number':1694,'multiline':False]
['text':' PatternMap::add','line_number':1698,'multiline':False]
['text':' Find the pattern from the given basePattern string.','line_number':1700,'multiline':False]
['text':' key to search for','line_number':1702,'multiline':False]
['text':' no match','line_number':1706,'multiline':False]
['text':' PatternMap::getFromBasePattern','line_number':1718,'multiline':False]
['text':' Find the pattern from the given skeleton.','line_number':1721,'multiline':False]
['text':' At least when this is called from getBestRaw & addPattern (in which case specifiedSkeletonPtr is non-NULL),','line_number':1722,'multiline':False]
['text':' the comparison should be based on skeleton.original (which is unique and tied to the distance measurement in bestRaw)','line_number':1723,'multiline':False]
['text':' and not skeleton.baseOriginal (which is not unique); otherwise we may pick a different skeleton than the one with the','line_number':1724,'multiline':False]
['text':' optimum distance value in getBestRaw. When this is called from public getRedundants (specifiedSkeletonPtr is NULL),','line_number':1725,'multiline':False]
['text':' for now it will continue to compare based on baseOriginal so as not to change the behavior unnecessarily.','line_number':1726,'multiline':False]
['text':' key to search for','line_number':1728,'multiline':False]
['text':' find boot entry','line_number':1735,'multiline':False]
['text':' no match','line_number':1745,'multiline':False]
['text':' called from DateTimePatternGenerator::getBestRaw or addPattern, use original','line_number':1750,'multiline':False]
['text':' called from DateTimePatternGenerator::getRedundants, use baseOriginal','line_number':1757,'multiline':False]
['text':' find any key existing in the mapping table already.','line_number':1813,'multiline':False]
['text':' return TRUE if there is an existing key, otherwise return FALSE.','line_number':1814,'multiline':False]
['text':' end of the list','line_number':1844,'multiline':False]
['text':' PatternMap::getDuplicateElem','line_number':1847,'multiline':False]
['text':' skip 'a'','line_number':1875,'multiline':False]
['text':' #7930 removes cap at 3','line_number':1891,'multiline':False]
['text':' Reset the result first.','line_number':1906,'multiline':False]
['text':' and other is not','line_number':1936,'multiline':False]
['text':' same as clear','line_number':1965,'multiline':False]
['text':' Find the next token with the starting position and length','line_number':2013,'multiline':False]
['text':' Note: the startPos may','line_number':2014,'multiline':False]
['text':' check the current char is between A-Z or a-z','line_number':2021,'multiline':False]
['text':' not the same token','line_number':2034,'multiline':False]
['text':' Verify that all are the same character.','line_number':2069,'multiline':False]
['text':' This function aussumes the current itemIndex points to the quote literal.','line_number':2100,'multiline':False]
['text':' Please call isQuoteLiteral prior to this function.','line_number':2101,'multiline':False]
['text':' two single quotes e.g. 'o''clock'','line_number':2114,'multiline':False]
['text':'status','line_number':2368,'multiline':True]
['text':'status','line_number':2373,'multiline':True]
['text':'status','line_number':2433,'multiline':True]
['text':'status','line_number':2438,'multiline':True]
['text':' #if !UCONFIG_NO_FORMATTING ','line_number':2468,'multiline':True]
['text':'eof','line_number':2470,'multiline':False]
