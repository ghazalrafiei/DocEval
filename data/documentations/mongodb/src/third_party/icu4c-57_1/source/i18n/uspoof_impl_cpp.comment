['text':'
**********************************************************************
*   Copyright (C) 2008-2016, International Business Machines
*   Corporation and others.  All Rights Reserved.
**********************************************************************
','line_number':1,'multiline':True]
['text':' Copy Constructor, used by the user level clone() function.','line_number':61,'multiline':False]
['text':' head off application errors by preventing use of','line_number':82,'multiline':False]
['text':'    of deleted objects.','line_number':83,'multiline':False]
['text':' Will delete if refCount goes to zero.','line_number':85,'multiline':False]
['text':'','line_number':92,'multiline':False]
['text':'  Incoming parameter check on Status and the SpoofChecker object','line_number':93,'multiline':False]
['text':'    received from the C API.','line_number':94,'multiline':False]
['text':'','line_number':95,'multiline':False]
['text':'--------------------------------------------------------------------------------------','line_number':123,'multiline':False]
['text':'','line_number':124,'multiline':False]
['text':'  confusableLookup()    This is the heart of the confusable skeleton generation','line_number':125,'multiline':False]
['text':'                        implementation.','line_number':126,'multiline':False]
['text':'','line_number':127,'multiline':False]
['text':'                        Given a source character, produce the corresponding','line_number':128,'multiline':False]
['text':'                        replacement character(s), appending them to the dest string.','line_number':129,'multiline':False]
['text':'','line_number':130,'multiline':False]
['text':'---------------------------------------------------------------------------------------','line_number':131,'multiline':False]
['text':' Binary search the spoof data key table for the inChar','line_number':134,'multiline':False]
['text':' Char not found.  It maps to itself.','line_number':154,'multiline':False]
['text':' We found the right key char, but the entry doesn't pertain to the','line_number':162,'multiline':False]
['text':'  table we need.  See if there is an adjacent key that does','line_number':163,'multiline':False]
['text':' No key entry for this char & table.','line_number':181,'multiline':False]
['text':' The input char maps to itself.','line_number':182,'multiline':False]
['text':' Value is either a UChar  (for strings of length 1) or','line_number':192,'multiline':False]
['text':'                 an index into the string table (for longer strings)','line_number':193,'multiline':False]
['text':' String length of 4 from the above lookup is used for all strings of length >= 4.','line_number':200,'multiline':False]
['text':' For these, get the real length from the string lengths table,','line_number':201,'multiline':False]
['text':'   which maps string table indexes to lengths.','line_number':202,'multiline':False]
['text':'   All strings of the same length are stored contiguously in the string table.','line_number':203,'multiline':False]
['text':'   'value' from the lookup above is the starting index for the desired string.','line_number':204,'multiline':False]
['text':'---------------------------------------------------------------------------------------','line_number':225,'multiline':False]
['text':'','line_number':226,'multiline':False]
['text':'  wholeScriptCheck()','line_number':227,'multiline':False]
['text':'','line_number':228,'multiline':False]
['text':'      Input text is already normalized to NFD','line_number':229,'multiline':False]
['text':'      Return the set of scripts, each of which can represent something that is','line_number':230,'multiline':False]
['text':'             confusable with the input text.  The script of the input text','line_number':231,'multiline':False]
['text':'             is included; input consisting of characters from a single script will','line_number':232,'multiline':False]
['text':'             always produce a result consisting of a set containing that script.','line_number':233,'multiline':False]
['text':'','line_number':234,'multiline':False]
['text':'---------------------------------------------------------------------------------------','line_number':235,'multiline':False]
['text':' No confusables in another script for this char.','line_number':248,'multiline':False]
['text':' TODO:  we should change the data to have sets with just the single script','line_number':249,'multiline':False]
['text':'        bit for the script of this char.  Gets rid of this special case.','line_number':250,'multiline':False]
['text':'        Until then, grab the script from the char and intersect it with the set.','line_number':251,'multiline':False]
['text':' Script == Common or Inherited.  Nothing to do.','line_number':256,'multiline':False]
['text':' Number of locales provided by caller.','line_number':270,'multiline':False]
['text':' Loop runs once per locale from the localesList, a comma separated list of locales.','line_number':272,'multiline':False]
['text':' We have one locale from the locales list.','line_number':291,'multiline':False]
['text':' Add the script chars for this locale to the accumulating set of allowed chars.','line_number':292,'multiline':False]
['text':' If the locale is no good, we will be notified back via status.','line_number':293,'multiline':False]
['text':' If our caller provided an empty list of locales, we disable the allowed characters checking','line_number':302,'multiline':False]
['text':' Add all common and inherited characters to the set of allowed chars.','line_number':319,'multiline':False]
['text':' If anything went wrong, we bail out without changing','line_number':326,'multiline':False]
['text':' the state of the spoof checker.','line_number':327,'multiline':False]
['text':' Store the updated spoof checker state.','line_number':332,'multiline':False]
['text':'status','line_number':348,'multiline':True]
['text':' Given a locale (a language), add all the characters from all of the scripts used with that language','line_number':353,'multiline':False]
['text':' to the allowedChars UnicodeSet','line_number':354,'multiline':False]
['text':' Convert a text format hex number.  Utility function used by builder code.  Static.','line_number':376,'multiline':False]
['text':' Input: UChar *string text.  Output: a UChar32','line_number':377,'multiline':False]
['text':' Input has been pre-checked, and will have no non-hex chars.','line_number':378,'multiline':False]
['text':' The number must fall in the code point range of 0..0x10ffff','line_number':379,'multiline':False]
['text':' Static Function.','line_number':380,'multiline':False]
['text':' Upper Case 'A'','line_number':391,'multiline':False]
['text':' Lower Case 'a'','line_number':394,'multiline':False]
['text':' IdentifierInfo Cache. IdentifierInfo objects are somewhat expensive to create.','line_number':407,'multiline':False]
['text':'                       Maintain a one-element cache, which is sufficient to avoid repeatedly','line_number':408,'multiline':False]
['text':'                       creating new ones unless we get multi-thread concurrency in spoof','line_number':409,'multiline':False]
['text':'                       check operations, which should be statistically uncommon.','line_number':410,'multiline':False]
['text':' These functions are used in place of new & delete of an IdentifierInfo.','line_number':412,'multiline':False]
['text':' They will recycle the IdentifierInfo when possible.','line_number':413,'multiline':False]
['text':' They are logically const, and used within const functions that must be thread safe.','line_number':414,'multiline':False]
['text':'----------------------------------------------------------------------------------------------','line_number':457,'multiline':False]
['text':'','line_number':458,'multiline':False]
['text':'   class SpoofData Implementation','line_number':459,'multiline':False]
['text':'','line_number':460,'multiline':False]
['text':'----------------------------------------------------------------------------------------------','line_number':461,'multiline':False]
['text':' type ','line_number':478,'multiline':True]
['text':'name','line_number':478,'multiline':True]
['text':' dataFormat="Cfu "','line_number':484,'multiline':False]
['text':'','line_number':500,'multiline':False]
['text':'  SpoofData::getDefault() - return a wrapper around the spoof data that is','line_number':501,'multiline':False]
['text':'                            baked into the default ICU data.','line_number':502,'multiline':False]
['text':'','line_number':503,'multiline':False]
['text':'               Called once, from the initOnce() function in uspoof_impl.cpp; the resulting','line_number':504,'multiline':False]
['text':'               SpoofData is shared by all spoof checkers using the default data.','line_number':505,'multiline':False]
['text':'','line_number':506,'multiline':False]
['text':' context, would receive dataVersion if supplied.','line_number':510,'multiline':False]
['text':' fRawData is non-const because it may be constructed by the data builder.','line_number':533,'multiline':False]
['text':' Spoof Data constructor for use from data builder.','line_number':562,'multiline':False]
['text':'   Initializes a new, empty data area that will be populated later.','line_number':563,'multiline':False]
['text':' The spoof header should already be sized to be a multiple of 16 bytes.','line_number':571,'multiline':False]
['text':' Just in case it's not, round it up.','line_number':572,'multiline':False]
['text':' reset() - initialize all fields.','line_number':592,'multiline':False]
['text':'           Should be updated if any new fields are added.','line_number':593,'multiline':False]
['text':'           Called by constructors to put things in a known initial state.','line_number':594,'multiline':False]
['text':'  SpoofData::initPtrs()','line_number':611,'multiline':False]
['text':'            Initialize the pointers to the various sections of the raw data.','line_number':612,'multiline':False]
['text':'','line_number':613,'multiline':False]
['text':'            This function is used both during the Trie building process (multiple','line_number':614,'multiline':False]
['text':'            times, as the individual data sections are added), and','line_number':615,'multiline':False]
['text':'            during the opening of a Spoof Checker from prebuilt data.','line_number':616,'multiline':False]
['text':'','line_number':617,'multiline':False]
['text':'            The pointers for non-existent data sections (identified by an offset of 0)','line_number':618,'multiline':False]
['text':'            are set to NULL.','line_number':619,'multiline':False]
['text':'','line_number':620,'multiline':False]
['text':'            Note:  During building the data, adding each new data section','line_number':621,'multiline':False]
['text':'            reallocs the raw data area, which likely relocates it, which','line_number':622,'multiline':False]
['text':'            in turn requires reinitializing all of the pointers into it, hence','line_number':623,'multiline':False]
['text':'            multiple calls to this function during building.','line_number':624,'multiline':False]
['text':'','line_number':625,'multiline':False]
['text':' Round up to a multiple of 16','line_number':701,'multiline':False]
['text':'-----------------------------------------------------------------------------','line_number':716,'multiline':False]
['text':'','line_number':717,'multiline':False]
['text':'  uspoof_swap   -  byte swap and char encoding swap of spoof data','line_number':718,'multiline':False]
['text':'','line_number':719,'multiline':False]
['text':'-----------------------------------------------------------------------------','line_number':720,'multiline':False]
['text':'','line_number':733,'multiline':False]
['text':'  Check that the data header is for spoof data.','line_number':734,'multiline':False]
['text':'    (Header contents are defined in gencfu.cpp)','line_number':735,'multiline':False]
['text':'','line_number':736,'multiline':False]
['text':' dataFormat="Cfu " ','line_number':738,'multiline':True]
['text':'','line_number':753,'multiline':False]
['text':' Swap the data header.  (This is the generic ICU Data Header, not the uspoof Specific','line_number':754,'multiline':False]
['text':'                         header).  This swap also conveniently gets us','line_number':755,'multiline':False]
['text':'                         the size of the ICU d.h., which lets us locate the start','line_number':756,'multiline':False]
['text':'                         of the uspoof specific data.','line_number':757,'multiline':False]
['text':'','line_number':758,'multiline':False]
['text':'','line_number':762,'multiline':False]
['text':' Get the Spoof Data Header, and check that it appears to be OK.','line_number':763,'multiline':False]
['text':'','line_number':764,'multiline':False]
['text':'','line_number':765,'multiline':False]
['text':'','line_number':776,'multiline':False]
['text':' Prefight operation?  Just return the size','line_number':777,'multiline':False]
['text':'','line_number':778,'multiline':False]
['text':'','line_number':785,'multiline':False]
['text':' Check that length passed in is consistent with length from Spoof data header.','line_number':786,'multiline':False]
['text':'','line_number':787,'multiline':False]
['text':'','line_number':796,'multiline':False]
['text':' Swap the Data.  Do the data itself first, then the Spoof Data Header, because','line_number':797,'multiline':False]
['text':'                 we need to reference the header to locate the data, and an','line_number':798,'multiline':False]
['text':'                 inplace swap of the header leaves it unusable.','line_number':799,'multiline':False]
['text':'','line_number':800,'multiline':False]
['text':'','line_number':807,'multiline':False]
['text':' If not swapping in place, zero out the output buffer before starting.','line_number':808,'multiline':False]
['text':'    Gaps may exist between the individual sections, and these must be zeroed in','line_number':809,'multiline':False]
['text':'    the output buffer.  The simplest way to do that is to just zero the whole thing.','line_number':810,'multiline':False]
['text':'','line_number':811,'multiline':False]
['text':' Confusables Keys Section   (fCFUKeys)','line_number':816,'multiline':False]
['text':' String Index Section','line_number':821,'multiline':False]
['text':' String Table Section','line_number':826,'multiline':False]
['text':' String Lengths Section','line_number':831,'multiline':False]
['text':' Any Case Trie','line_number':836,'multiline':False]
['text':' Lower Case Trie','line_number':841,'multiline':False]
['text':' Script Sets.  The data is an array of int32_t','line_number':846,'multiline':False]
['text':' And, last, swap the header itself.','line_number':851,'multiline':False]
['text':'   int32_t   fMagic             // swap this','line_number':852,'multiline':False]
['text':'   uint8_t   fFormatVersion[4]  // Do not swap this, just copy','line_number':853,'multiline':False]
['text':'   int32_t   fLength and all the rest       // Swap the rest, all is 32 bit stuff.','line_number':854,'multiline':False]
['text':'','line_number':855,'multiline':False]
['text':' swap starting at fLength','line_number':862,'multiline':False]
['text':' minus magic and fFormatVersion[4] ','line_number':863,'multiline':True]
