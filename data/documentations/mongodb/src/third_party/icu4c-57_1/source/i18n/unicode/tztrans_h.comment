['text':'
*******************************************************************************
* Copyright (C) 2007-2008, International Business Machines Corporation and         *
* others. All Rights Reserved.                                                *
*******************************************************************************
','line_number':1,'multiline':True]
['text':'*
 * \file 
 * \brief C++ API: Time zone transition
 ','line_number':10,'multiline':True]
['text':' Forward declaration','line_number':23,'multiline':False]
['text':'*
 * <code>TimeZoneTransition</code> is a class representing a time zone transition.
 * An instance has a time of transition and rules for both before and after the transition.
 * @stable ICU 3.8
 ','line_number':26,'multiline':True]
['text':'*
     * Constructs a <code>TimeZoneTransition</code> with the time and the rules before/after
     * the transition.
     * 
     * @param time  The time of transition in milliseconds since the base time.
     * @param from  The time zone rule used before the transition.
     * @param to    The time zone rule used after the transition.
     * @stable ICU 3.8
     ','line_number':33,'multiline':True]
['text':'*
     * Constructs an empty <code>TimeZoneTransition</code>
     * @stable ICU 3.8
     ','line_number':44,'multiline':True]
['text':'*
     * Copy constructor.
     * @param source    The TimeZoneTransition object to be copied.
     * @stable ICU 3.8
     ','line_number':50,'multiline':True]
['text':'*
     * Destructor.
     * @stable ICU 3.8
     ','line_number':57,'multiline':True]
['text':'*
     * Clone this TimeZoneTransition object polymorphically. The caller owns the result and
     * should delete it when done.
     * @return  A copy of the object.
     * @stable ICU 3.8
     ','line_number':63,'multiline':True]
['text':'*
     * Assignment operator.
     * @param right The object to be copied.
     * @stable ICU 3.8
     ','line_number':71,'multiline':True]
['text':'*
     * Return true if the given TimeZoneTransition objects are semantically equal. Objects
     * of different subclasses are considered unequal.
     * @param that  The object to be compared with.
     * @return  true if the given TimeZoneTransition objects are semantically equal.
     * @stable ICU 3.8
     ','line_number':78,'multiline':True]
['text':'*
     * Return true if the given TimeZoneTransition objects are semantically unequal. Objects
     * of different subclasses are considered unequal.
     * @param that  The object to be compared with.
     * @return  true if the given TimeZoneTransition objects are semantically unequal.
     * @stable ICU 3.8
     ','line_number':87,'multiline':True]
['text':'*
     * Returns the time of transition in milliseconds.
     * @return The time of the transition in milliseconds since the 1970 Jan 1 epoch time.
     * @stable ICU 3.8
     ','line_number':96,'multiline':True]
['text':'*
     * Sets the time of transition in milliseconds.
     * @param time The time of the transition in milliseconds since the 1970 Jan 1 epoch time.
     * @stable ICU 3.8
     ','line_number':103,'multiline':True]
['text':'*
     * Returns the rule used before the transition.
     * @return The time zone rule used after the transition.
     * @stable ICU 3.8
     ','line_number':110,'multiline':True]
['text':'*
     * Sets the rule used before the transition.  The caller remains
     * responsible for deleting the <code>TimeZoneRule</code> object.
     * @param from The time zone rule used before the transition.
     * @stable ICU 3.8
     ','line_number':117,'multiline':True]
['text':'*
     * Adopts the rule used before the transition.  The caller must
     * not delete the <code>TimeZoneRule</code> object passed in.
     * @param from The time zone rule used before the transition.
     * @stable ICU 3.8
     ','line_number':125,'multiline':True]
['text':'*
     * Sets the rule used after the transition.  The caller remains
     * responsible for deleting the <code>TimeZoneRule</code> object.
     * @param to The time zone rule used after the transition.
     * @stable ICU 3.8
     ','line_number':133,'multiline':True]
['text':'*
     * Adopts the rule used after the transition.  The caller must
     * not delete the <code>TimeZoneRule</code> object passed in.
     * @param to The time zone rule used after the transition.
     * @stable ICU 3.8
     ','line_number':141,'multiline':True]
['text':'*
     * Returns the rule used after the transition.
     * @return The time zone rule used after the transition.
     * @stable ICU 3.8
     ','line_number':149,'multiline':True]
['text':'*
     * Return the class ID for this class. This is useful only for comparing to
     * a return value from getDynamicClassID(). For example:
     * <pre>
     * .   Base* polymorphic_pointer = createPolymorphicObject();
     * .   if (polymorphic_pointer->getDynamicClassID() ==
     * .       erived::getStaticClassID()) ...
     * </pre>
     * @return          The class ID for all objects of this class.
     * @stable ICU 3.8
     ','line_number':162,'multiline':True]
['text':'*
     * Returns a unique class ID POLYMORPHICALLY. Pure virtual override. This
     * method is to implement a simple version of RTTI, since not all C++
     * compilers support genuine RTTI. Polymorphic operator==() and clone()
     * methods call this method.
     *
     * @return          The class ID for this object. All objects of a
     *                  given class have the same class ID.  Objects of
     *                  other classes have different class IDs.
     * @stable ICU 3.8
     ','line_number':175,'multiline':True]
['text':' #if !UCONFIG_NO_FORMATTING ','line_number':191,'multiline':True]
['text':' TZTRANS_H','line_number':193,'multiline':False]
['text':'eof','line_number':195,'multiline':False]
