['text':'
**********************************************************************
* Copyright (c) 2003-2013, International Business Machines
* Corporation and others.  All Rights Reserved.
**********************************************************************
* Author: Alan Liu
* Created: July 21 2003
* Since: ICU 2.8
**********************************************************************
','line_number':1,'multiline':True]
['text':' for 'typeid' to work','line_number':12,'multiline':False]
['text':' DBL_MAX','line_number':25,'multiline':False]
['text':' struct UResourceBundle','line_number':26,'multiline':False]
['text':' for debugging','line_number':32,'multiline':False]
['text':' must use double parens, i.e.:  U_DEBUG_TZ_MSG(("four is: %d",4));','line_number':46,'multiline':False]
['text':'*
 * Default constructor.  Creates a time zone with an empty ID and
 * a fixed GMT offset of zero.
 ','line_number':84,'multiline':True]
['text':'OlsonTimeZone::OlsonTimeZone() : finalYear(INT32_MAX), finalMillis(DBL_MAX), finalZone(0), transitionRulesInitialized(FALSE) {
    clearTransitionRules();
    constructEmpty();
}','line_number':88,'multiline':True]
['text':'*
 * Construct a GMT+0 zone with no transitions.  This is done when a
 * constructor fails so the resultant object is well-behaved.
 ','line_number':93,'multiline':True]
['text':'*
 * Construct from a resource bundle
 * @param top the top-level zoneinfo resource bundle.  This is used
 * to lookup the rule that `res' may refer to, if there is one.
 * @param res the resource bundle of the zone to be constructed
 * @param ec input-output error code
 ','line_number':111,'multiline':True]
['text':' TODO -- clean up -- Doesn't work if res points to an alias','line_number':130,'multiline':False]
['text':'        // TODO remove nonconst casts below when ures_* API is fixed','line_number':131,'multiline':False]
['text':'        setID(ures_getKey((UResourceBundle*) res)); // cast away const','line_number':132,'multiline':False]
['text':' Pre-32bit second transitions','line_number':138,'multiline':False]
['text':' No pre-32bit transitions','line_number':143,'multiline':False]
['text':' len must be even ','line_number':147,'multiline':True]
['text':' 32bit second transitions','line_number':151,'multiline':False]
['text':' No 32bit transitions','line_number':156,'multiline':False]
['text':' Post-32bit second transitions','line_number':164,'multiline':False]
['text':' No pre-32bit transitions','line_number':169,'multiline':False]
['text':' len must be even ','line_number':173,'multiline':True]
['text':' Type offsets list must be of even size, with size >= 2','line_number':177,'multiline':False]
['text':' Type map data must be of the same size as the transition count','line_number':185,'multiline':False]
['text':' no type mapping data','line_number':191,'multiline':False]
['text':' Process final rule and data, if any','line_number':198,'multiline':False]
['text':' Note: Setting finalStartYear to the finalZone is problematic.  When a date is around','line_number':225,'multiline':False]
['text':' year boundary, SimpleTimeZone may return false result when DST is observed at the ','line_number':226,'multiline':False]
['text':' beginning of year.  We could apply safe margin (day or two), but when one of recurrent','line_number':227,'multiline':False]
['text':' rules falls around year boundary, it could return false result.  Without setting the','line_number':228,'multiline':False]
['text':' start year, finalZone works fine around the year boundary of the start year.','line_number':229,'multiline':False]
['text':' finalZone->setStartYear(finalStartYear);','line_number':231,'multiline':False]
['text':' Compute the millis for Jan 1, 0:00 GMT of the finalYear','line_number':234,'multiline':False]
['text':' Note: finalStartMillis is used for detecting either if','line_number':236,'multiline':False]
['text':' historic transition data or finalZone to be used.  In an','line_number':237,'multiline':False]
['text':' extreme edge case - for example, two transitions fall into','line_number':238,'multiline':False]
['text':' small windows of time around the year boundary, this may','line_number':239,'multiline':False]
['text':' result incorrect offset computation.  But I think it will','line_number':240,'multiline':False]
['text':' never happen practically.  Yoshito - Feb 20, 2010','line_number':241,'multiline':False]
['text':' No final zone','line_number':249,'multiline':False]
['text':' initialize canonical ID','line_number':254,'multiline':False]
['text':'*
 * Copy constructor
 ','line_number':263,'multiline':True]
['text':'*
 * Assignment operator
 ','line_number':271,'multiline':True]
['text':'*
 * Destructor
 ','line_number':301,'multiline':True]
['text':'*
 * Returns true if the two TimeZone objects are equal.
 ','line_number':309,'multiline':True]
['text':'*
 * TimeZone API.
 ','line_number':319,'multiline':True]
['text':'*
 * TimeZone API.
 ','line_number':326,'multiline':True]
['text':'*
 * TimeZone API.
 ','line_number':344,'multiline':True]
['text':' Compute local epoch millis from input fields','line_number':379,'multiline':False]
['text':'*
 * TimeZone API.
 ','line_number':386,'multiline':True]
['text':'*
 * TimeZone API.
 ','line_number':415,'multiline':True]
['text':'offsetMillis','line_number':418,'multiline':True]
['text':' We don't support this operation, since OlsonTimeZones are','line_number':419,'multiline':False]
['text':' immutable (except for the ID, which is in the base class).','line_number':420,'multiline':False]
['text':' Nothing to do!','line_number':422,'multiline':False]
['text':'*
 * TimeZone API.
 ','line_number':425,'multiline':True]
['text':' Maximum absolute offset in seconds (86400 seconds = 1 day)','line_number':467,'multiline':False]
['text':' getHistoricalOffset uses this constant as safety margin of','line_number':468,'multiline':False]
['text':' quick zone transition checking.','line_number':469,'multiline':False]
['text':' Before the first transition time','line_number':486,'multiline':False]
['text':' Linear search from the end is the fastest approach, since','line_number':490,'multiline':False]
['text':' most lookups will happen at/near the end.','line_number':491,'multiline':False]
['text':' Positive transition, which makes a non-existing local time range','line_number':507,'multiline':False]
['text':' Interprets the time with rule before the transition,','line_number':517,'multiline':False]
['text':' default for non-existing time range','line_number':518,'multiline':False]
['text':' Negative transition, which makes a duplicated local time range','line_number':522,'multiline':False]
['text':' Interprets the time with rule after the transition,','line_number':532,'multiline':False]
['text':' default for duplicated local time range','line_number':533,'multiline':False]
['text':' transIdx could be -1 when local=true','line_number':542,'multiline':False]
['text':' No transitions, single pair of offsets only','line_number':547,'multiline':False]
['text':'*
 * TimeZone API.
 ','line_number':555,'multiline':True]
['text':' If DST was observed in 1942 (for example) but has never been','line_number':559,'multiline':False]
['text':' observed from 1943 to the present, most clients will expect','line_number':560,'multiline':False]
['text':' this method to return FALSE.  This method determines whether','line_number':561,'multiline':False]
['text':' DST is in use in the current year (at any point in the year)','line_number':562,'multiline':False]
['text':' and returns TRUE if so.','line_number':563,'multiline':False]
['text':' Find start of this year, and start of next year','line_number':573,'multiline':False]
['text':' Return TRUE if DST is observed at any time during the current','line_number':577,'multiline':False]
['text':' year.','line_number':578,'multiline':False]
['text':'*
 * TimeZone API.
 ','line_number':598,'multiline':True]
['text':' [sic] pointer comparison: typeMapData points into','line_number':617,'multiline':False]
['text':' memory-mapped or DLL space, so if two zones have the same','line_number':618,'multiline':False]
['text':' pointer, they are equal.','line_number':619,'multiline':False]
['text':' If the pointers are not equal, the zones may still','line_number':624,'multiline':False]
['text':' be equal if their rules and transitions are equal','line_number':625,'multiline':False]
['text':'
 * Lazy transition rules initializer
 ','line_number':689,'multiline':True]
['text':' Create initial rule','line_number':717,'multiline':False]
['text':' Check to make sure initialRule was created','line_number':721,'multiline':False]
['text':' We probably no longer need to check the first "real" transition','line_number':732,'multiline':False]
['text':' here, because the new tzcode remove such transitions already.','line_number':733,'multiline':False]
['text':' For now, keeping this code for just in case. Feb 19, 2010 Yoshito','line_number':734,'multiline':False]
['text':' type 0 is the initial type','line_number':737,'multiline':False]
['text':' Actually no transitions...','line_number':743,'multiline':False]
['text':' Build historic rule array','line_number':745,'multiline':False]
['text':' large enough to store all transition times ','line_number':746,'multiline':True]
['text':' Gather all start times for each pair of offsets','line_number':753,'multiline':False]
['text':' Exclude transitions after finalMillis','line_number':759,'multiline':False]
['text':' Create a TimeArrayTimeZoneRule','line_number':765,'multiline':False]
['text':' Initialize TimeArrayTimeZoneRule pointers as NULL','line_number':778,'multiline':False]
['text':' Check for memory allocation error','line_number':784,'multiline':False]
['text':' Create initial transition','line_number':794,'multiline':False]
['text':' Check to make sure firstTZTransition was created.','line_number':798,'multiline':False]
['text':' Get the first occurence of final rule starts','line_number':807,'multiline':False]
['text':'
             * Note: When an OlsonTimeZone is constructed, we should set the final year
             * as the start year of finalZone.  However, the bounday condition used for
             * getting offset from finalZone has some problems.
             * For now, we do not set the valid start year when the construction time
             * and create a clone and set the start year when extracting rules.
             ','line_number':812,'multiline':True]
['text':' Check to make sure finalZone was actually cloned.','line_number':820,'multiline':False]
['text':' Check to make sure firstFinalRule received proper clone.','line_number':831,'multiline':False]
['text':' final rule with no transitions','line_number':839,'multiline':False]
['text':' Check to make sure finalZone was actually cloned.','line_number':841,'multiline':False]
['text':' Check firstFinalRule was properly created.','line_number':850,'multiline':False]
['text':' No historic transitions, but only finalZone available','line_number':862,'multiline':False]
['text':' Check to make sure firstFinalTZTransition was created before dereferencing','line_number':866,'multiline':False]
['text':'return finalZone->getNextTransition(base, inclusive, result);','line_number':892,'multiline':False]
['text':' No more transitions','line_number':895,'multiline':False]
['text':' Find a historical transition','line_number':901,'multiline':False]
['text':' Create a TimeZoneTransition','line_number':921,'multiline':False]
['text':' The transitions loaded from zoneinfo.res may contain non-transition data','line_number':926,'multiline':False]
['text':'return finalZone->getPreviousTransition(base, inclusive, result);','line_number':957,'multiline':False]
['text':' Find a historical transition','line_number':967,'multiline':False]
['text':' No more transitions','line_number':976,'multiline':False]
['text':' Create a TimeZoneTransition','line_number':982,'multiline':False]
['text':' The transitions loaded from zoneinfo.res may contain non-transition data','line_number':987,'multiline':False]
['text':' historicRules may contain null entries when original zoneinfo data','line_number':1016,'multiline':False]
['text':' includes non transition data.','line_number':1017,'multiline':False]
['text':' Initial rule','line_number':1047,'multiline':False]
['text':' Transition rules','line_number':1050,'multiline':False]
['text':' historicRules may contain null entries when original zoneinfo data','line_number':1053,'multiline':False]
['text':' includes non transition data.','line_number':1054,'multiline':False]
['text':' Set the result length','line_number':1073,'multiline':False]
['text':' !UCONFIG_NO_FORMATTING','line_number':1079,'multiline':False]
['text':'eof','line_number':1081,'multiline':False]
