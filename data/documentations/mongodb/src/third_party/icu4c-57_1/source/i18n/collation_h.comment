['text':'
*******************************************************************************
* Copyright (C) 2010-2015, International Business Machines
* Corporation and others.  All Rights Reserved.
*******************************************************************************
* collation.h
*
* created on: 2010oct27
* created by: Markus W. Scherer
','line_number':1,'multiline':True]
['text':'*
 * Collation v2 basic definitions and static helper functions.
 *
 * Data structures except for expansion tables store 32-bit CEs which are
 * either specials (see tags below) or are compact forms of 64-bit CEs.
 ','line_number':21,'multiline':True]
['text':' Special sort key bytes for all levels.','line_number':29,'multiline':False]
['text':'* The secondary/tertiary lower limit for tailoring before any root elements. ','line_number':33,'multiline':True]
['text':'*
     * Merge-sort-key separator.
     * Same as the unique primary and identical-level weights of U+FFFE.
     * Must not be used as primary compression low terminator.
     * Otherwise usable.
     ','line_number':36,'multiline':True]
['text':' U+FFFE','line_number':43,'multiline':False]
['text':' U+FFFE','line_number':44,'multiline':False]
['text':'*
     * Primary compression low terminator, must be greater than MERGE_SEPARATOR_BYTE.
     * Reserved value in primary second byte if the lead byte is compressible.
     * Otherwise usable in all CE weight bytes.
     ','line_number':46,'multiline':True]
['text':'*
     * Primary compression high terminator.
     * Reserved value in primary second byte if the lead byte is compressible.
     * Otherwise usable in all CE weight bytes.
     ','line_number':52,'multiline':True]
['text':'* Default secondary/tertiary weight lead byte. ','line_number':59,'multiline':True]
['text':'* Middle 16 bits of a CE with a common secondary weight. ','line_number':62,'multiline':True]
['text':'* Lower 16 bits of a CE with a common tertiary weight. ','line_number':64,'multiline':True]
['text':'* Lower 32 bits of a CE with common secondary and tertiary weights. ','line_number':66,'multiline':True]
['text':'* Only the 2*6 bits for the pure tertiary weight. ','line_number':72,'multiline':True]
['text':'* Only the secondary & tertiary bits; no case, no quaternary. ','line_number':74,'multiline':True]
['text':'* Case bits and tertiary bits. ','line_number':76,'multiline':True]
['text':'* Case bits and quaternary bits. ','line_number':79,'multiline':True]
['text':' compressible','line_number':82,'multiline':False]
['text':'*
     * First unassigned: AlphabeticIndex overflow boundary.
     * We want a 3-byte primary so that it fits into the root elements table.
     *
     * This 3-byte primary will not collide with
     * any unassigned-implicit 4-byte primaries because
     * the first few hundred Unicode code points all have real mappings.
     ','line_number':83,'multiline':True]
['text':' not compressible','line_number':93,'multiline':False]
['text':' [first trailing]','line_number':94,'multiline':False]
['text':' U+FFFF','line_number':95,'multiline':False]
['text':' U+FFFF','line_number':96,'multiline':False]
['text':' CE32 value for U+FFFD as well as illegal UTF-8 byte sequences (which behave like U+FFFD).','line_number':98,'multiline':False]
['text':' We use the third-highest primary weight for U+FFFD (as in UCA 6.3+).','line_number':99,'multiline':False]
['text':'*
     * A CE32 is special if its low byte is this or greater.
     * Impossible case bits 11 mark special CE32s.
     * This value itself is used to indicate a fallback to the base collator.
     ','line_number':103,'multiline':True]
['text':'*
     * Low byte of a long-primary special CE32.
     ','line_number':110,'multiline':True]
['text':' SPECIAL_CE32_LOW_BYTE | LONG_PRIMARY_TAG','line_number':113,'multiline':False]
['text':' Compute an unassigned-implicit CE.','line_number':115,'multiline':False]
['text':'* No CE: End of input. Only used in runtime code, not stored in data. ','line_number':119,'multiline':True]
['text':' not a left-adjusted weight','line_number':120,'multiline':False]
['text':' weight of LEVEL_SEPARATOR_BYTE','line_number':121,'multiline':False]
['text':' NO_CE_PRIMARY, NO_CE_WEIGHT16, NO_CE_WEIGHT16','line_number':122,'multiline':False]
['text':'* Sort key levels. ','line_number':124,'multiline':True]
['text':'* Unspecified level. ','line_number':126,'multiline':True]
['text':'* Beyond sort key bytes. ','line_number':134,'multiline':True]
['text':'*
     * Sort key level flags: xx_FLAG = 1 << xx_LEVEL.
     * In Java, use enum Level with flag() getters, or use EnumSet rather than hand-made bit sets.
     ','line_number':138,'multiline':True]
['text':'*
     * Special-CE32 tags, from bits 3..0 of a special 32-bit CE.
     * Bits 31..8 are available for tag-specific data.
     * Bits  5..4: Reserved. May be used in the future to indicate lccc!=0 and tccc!=0.
     ','line_number':151,'multiline':True]
['text':'*
         * Fall back to the base collator.
         * This is the tag value in SPECIAL_CE32_LOW_BYTE and FALLBACK_CE32.
         * Bits 31..8: Unused, 0.
         ','line_number':157,'multiline':True]
['text':'*
         * Long-primary CE with COMMON_SEC_AND_TER_CE.
         * Bits 31..8: Three-byte primary.
         ','line_number':163,'multiline':True]
['text':'*
         * Long-secondary CE with zero primary.
         * Bits 31..16: Secondary weight.
         * Bits 15.. 8: Tertiary weight.
         ','line_number':168,'multiline':True]
['text':'*
         * Unused.
         * May be used in the future for single-byte secondary CEs (SHORT_SECONDARY_TAG),
         * storing the secondary in bits 31..24, the ccc in bits 23..16,
         * and the tertiary in bits 15..8.
         ','line_number':174,'multiline':True]
['text':'*
         * Latin mini expansions of two simple CEs [pp, 05, tt] [00, ss, 05].
         * Bits 31..24: Single-byte primary weight pp of the first CE.
         * Bits 23..16: Tertiary weight tt of the first CE.
         * Bits 15.. 8: Secondary weight ss of the second CE.
         ','line_number':181,'multiline':True]
['text':'*
         * Points to one or more simple/long-primary/long-secondary 32-bit CE32s.
         * Bits 31..13: Index into uint32_t table.
         * Bits 12.. 8: Length=1..31.
         ','line_number':188,'multiline':True]
['text':'*
         * Points to one or more 64-bit CEs.
         * Bits 31..13: Index into CE table.
         * Bits 12.. 8: Length=1..31.
         ','line_number':194,'multiline':True]
['text':'*
         * Builder data, used only in the CollationDataBuilder, not in runtime data.
         *
         * If bit 8 is 0: Builder context, points to a list of context-sensitive mappings.
         * Bits 31..13: Index to the builder's list of ConditionalCE32 for this character.
         * Bits 12.. 9: Unused, 0.
         *
         * If bit 8 is 1 (IS_BUILDER_JAMO_CE32): Builder-only jamoCE32 value.
         * The builder fetches the Jamo CE32 from the trie.
         * Bits 31..13: Jamo code point.
         * Bits 12.. 9: Unused, 0.
         ','line_number':200,'multiline':True]
['text':'*
         * Points to prefix trie.
         * Bits 31..13: Index into prefix/contraction data.
         * Bits 12.. 8: Unused, 0.
         ','line_number':213,'multiline':True]
['text':'*
         * Points to contraction data.
         * Bits 31..13: Index into prefix/contraction data.
         * Bits 12..11: Unused, 0.
         * Bit      10: CONTRACT_TRAILING_CCC flag.
         * Bit       9: CONTRACT_NEXT_CCC flag.
         * Bit       8: CONTRACT_SINGLE_CP_NO_MATCH flag.
         ','line_number':219,'multiline':True]
['text':'*
         * Decimal digit.
         * Bits 31..13: Index into uint32_t table for non-numeric-collation CE32.
         * Bit      12: Unused, 0.
         * Bits 11.. 8: Digit value 0..9.
         ','line_number':228,'multiline':True]
['text':'*
         * Tag for U+0000, for moving the NUL-termination handling
         * from the regular fastpath into specials-handling code.
         * Bits 31..8: Unused, 0.
         ','line_number':235,'multiline':True]
['text':'*
         * Tag for a Hangul syllable.
         * Bits 31..9: Unused, 0.
         * Bit      8: HANGUL_NO_SPECIAL_JAMO flag.
         ','line_number':241,'multiline':True]
['text':'*
         * Tag for a lead surrogate code unit.
         * Optional optimization for UTF-16 string processing.
         * Bits 31..10: Unused, 0.
         *       9.. 8: =0: All associated supplementary code points are unassigned-implict.
         *              =1: All associated supplementary code points fall back to the base data.
         *              else: (Normally 2) Look up the data for the supplementary code point.
         ','line_number':247,'multiline':True]
['text':'*
         * Tag for CEs with primary weights in code point order.
         * Bits 31..13: Index into CE table, for one data "CE".
         * Bits 12.. 8: Unused, 0.
         *
         * This data "CE" has the following bit fields:
         * Bits 63..32: Three-byte primary pppppp00.
         *      31.. 8: Start/base code point of the in-order range.
         *           7: Flag isCompressible primary.
         *       6.. 0: Per-code point primary-weight increment.
         ','line_number':256,'multiline':True]
['text':'*
         * Implicit CE tag. Compute an unassigned-implicit CE.
         * All bits are set (UNASSIGNED_CE32=0xffffffff).
         ','line_number':268,'multiline':True]
['text':'*
     * We limit the number of CEs in an expansion
     * so that we can use a small number of length bits in the data structure,
     * and so that an implementation can copy CEs at runtime without growing a destination buffer.
     ','line_number':279,'multiline':True]
['text':'*
     * Set if there is no match for the single (no-suffix) character itself.
     * This is only possible if there is a prefix.
     * In this case, discontiguous contraction matching cannot add combining marks
     * starting from an empty suffix.
     * The default CE32 is used anyway if there is no suffix match.
     ','line_number':287,'multiline':True]
['text':'* Set if the first character of every contraction suffix has lccc!=0. ','line_number':295,'multiline':True]
['text':'* Set if any contraction suffix ends with lccc!=0. ','line_number':297,'multiline':True]
['text':'* For HANGUL_TAG: None of its Jamo CE32s isSpecialCE32(). ','line_number':300,'multiline':True]
['text':'* Turns the long-primary CE32 into a primary weight pppppp00. ','line_number':310,'multiline':True]
['text':'* Makes a special CE32 with tag, index and length. ','line_number':325,'multiline':True]
['text':'* Makes a special CE32 with only tag and index. ','line_number':329,'multiline':True]
['text':'*
     * @return TRUE if the ce32 yields one or more CEs without further data lookups
     ','line_number':356,'multiline':True]
['text':'*
     * Get the first of the two Latin-expansion CEs encoded in ce32.
     * @see LATIN_EXPANSION_TAG
     ','line_number':380,'multiline':True]
['text':'*
     * Get the second of the two Latin-expansion CEs encoded in ce32.
     * @see LATIN_EXPANSION_TAG
     ','line_number':388,'multiline':True]
['text':'*
     * Returns the data index from a special CE32.
     ','line_number':396,'multiline':True]
['text':'*
     * Returns the data length from a ce32.
     ','line_number':403,'multiline':True]
['text':'*
     * Returns the digit value from a DIGIT_TAG ce32.
     ','line_number':410,'multiline':True]
['text':'* Returns a 64-bit CE from a simple CE32 (not special). ','line_number':417,'multiline':True]
['text':' normal form ppppsstt -> pppp0000ss00tt00','line_number':419,'multiline':False]
['text':' assert (ce32 & 0xff) < SPECIAL_CE32_LOW_BYTE','line_number':420,'multiline':False]
['text':'* Returns a 64-bit CE from a simple/long-primary/long-secondary CE32. ','line_number':424,'multiline':True]
['text':' normal form ppppsstt -> pppp0000ss00tt00','line_number':428,'multiline':False]
['text':' long-primary form ppppppC1 -> pppppp00050000500','line_number':433,'multiline':False]
['text':' long-secondary form ssssttC2 -> 00000000sssstt00','line_number':436,'multiline':False]
['text':' assert (tertiary & 0xf) == LONG_SECONDARY_TAG','line_number':437,'multiline':False]
['text':'* Creates a CE from a primary weight. ','line_number':443,'multiline':True]
['text':'*
     * Creates a CE from a primary weight,
     * 16-bit secondary/tertiary weights, and a 2-bit quaternary.
     ','line_number':447,'multiline':True]
['text':'*
     * Increments a 2-byte primary by a code point offset.
     ','line_number':455,'multiline':True]
['text':'*
     * Increments a 3-byte primary by a code point offset.
     ','line_number':461,'multiline':True]
['text':'*
     * Decrements a 2-byte primary by one range step (1..0x7f).
     ','line_number':467,'multiline':True]
['text':'*
     * Decrements a 3-byte primary by one range step (1..0x7f).
     ','line_number':472,'multiline':True]
['text':'*
     * Computes a 3-byte primary for c's OFFSET_TAG data "CE".
     ','line_number':477,'multiline':True]
['text':'*
     * Returns the unassigned-character implicit primary weight for any valid code point c.
     ','line_number':482,'multiline':True]
['text':' No instantiation.','line_number':492,'multiline':False]
['text':' !UCONFIG_NO_COLLATION','line_number':497,'multiline':False]
['text':' __COLLATION_H__','line_number':498,'multiline':False]
