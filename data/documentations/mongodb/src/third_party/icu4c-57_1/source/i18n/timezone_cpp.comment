['text':'
*******************************************************************************
* Copyright (C) 1997-2015, International Business Machines Corporation and
* others. All Rights Reserved.
*******************************************************************************
*
* File TIMEZONE.CPP
*
* Modification History:
*
*   Date        Name        Description
*   12/05/96    clhuang     Creation.
*   04/21/97    aliu        General clean-up and bug fixing.
*   05/08/97    aliu        Fixed Hashtable code per code review.
*   07/09/97    helena      Changed createInstance to createDefault.
*   07/29/97    aliu        Updated with all-new list of 96 UNIX-derived
*                           TimeZones.  Changed mechanism to load from static
*                           array rather than resource bundle.
*   07/07/1998  srl         Bugfixes from the Java side: UTC GMT CAT NST
*                           Added getDisplayName API
*                           going to add custom parsing.
*
*                           ISSUES:
*                               - should getDisplayName cache something?
*                               - should custom time zones be cached? [probably]
*  08/10/98     stephen     Brought getDisplayName() API in-line w/ conventions
*  08/19/98     stephen     Changed createTimeZone() to never return 0
*  09/02/98     stephen     Added getOffset(monthLen) and hasSameRules()
*  09/15/98     stephen     Added getStaticClassID()
*  02/22/99     stephen     Removed character literals for EBCDIC safety
*  05/04/99     stephen     Changed initDefault() for Mutex issues
*  07/12/99     helena      HPUX 11 CC Port.
*  12/03/99     aliu        Moved data out of static table into icudata.dll.
*                           Substantial rewrite of zone lookup, default zone, and
*                           available IDs code.  Misc. cleanup.
********************************************************************************','line_number':1,'multiline':True]
['text':' for 'typeid' to work','line_number':38,'multiline':False]
['text':' for debugging','line_number':47,'multiline':False]
['text':' must use double parens, i.e.:  U_DEBUG_TZ_MSG(("four is: %d",4));','line_number':63,'multiline':False]
['text':' struct UResourceBundle','line_number':78,'multiline':False]
['text':' Static data and constants','line_number':104,'multiline':False]
['text':' "001" ','line_number':106,'multiline':True]
['text':' "GMT" ','line_number':108,'multiline':True]
['text':' "Etc/Unknown" ','line_number':109,'multiline':True]
['text':' Have we moved? ','line_number':190,'multiline':True]
['text':' We haven't moved, and it wasn't found. ','line_number':191,'multiline':True]
['text':'*
 * Fetch a specific zone by name.  Replaces the getByKey call.
 * @param top Top timezone resource
 * @param id Time zone ID
 * @param oldbundle Bundle for reuse (or NULL).   see 'ures_open()'
 * @return the zone's bundle if found, or undefined if error.  Reuses oldbundle.
 ','line_number':214,'multiline':True]
['text':' load the Rules object','line_number':222,'multiline':False]
['text':' search for the string','line_number':225,'multiline':False]
['text':' not found','line_number':229,'multiline':False]
['text':'ures_close(oldbundle);','line_number':231,'multiline':False]
['text':'oldbundle = NULL;','line_number':232,'multiline':False]
['text':' get Zones object from top','line_number':235,'multiline':False]
['text':' get nth Zone object','line_number':237,'multiline':False]
['text':'ures_close(oldbundle);','line_number':242,'multiline':False]
['text':'*
 * Given an ID, open the appropriate resource for the given time zone.
 * Dereference aliases if necessary.
 * @param id zone id
 * @param res resource, which must be ready for use (initialized but not open)
 * @param ec input-output error code
 * @return top-level resource bundle
 ','line_number':261,'multiline':True]
['text':' &res = ','line_number':279,'multiline':True]
['text':' Dereference if this is an alias.  Docs say result should be 1','line_number':280,'multiline':False]
['text':' but it is 0 in 2.8 (?).','line_number':281,'multiline':False]
['text':' dereference Zones section','line_number':286,'multiline':False]
['text':' -------------------------------------','line_number':297,'multiline':False]
['text':' Initialize _GMT independently of other static data; it should','line_number':302,'multiline':False]
['text':' be valid even if we can't load the time zone UDataMemory.','line_number':303,'multiline':False]
['text':' anonymous namespace','line_number':309,'multiline':False]
['text':' *****************************************************************************','line_number':325,'multiline':False]
['text':' class TimeZone','line_number':326,'multiline':False]
['text':' *****************************************************************************','line_number':327,'multiline':False]
['text':' -------------------------------------','line_number':336,'multiline':False]
['text':' -------------------------------------','line_number':343,'multiline':False]
['text':' -------------------------------------','line_number':349,'multiline':False]
['text':' -------------------------------------','line_number':356,'multiline':False]
['text':' -------------------------------------','line_number':365,'multiline':False]
['text':' -------------------------------------','line_number':374,'multiline':False]
['text':'*
 * Lookup the given name in our system zone table.  If found,
 * instantiate a new zone of that name and return it.  If not
 * found, return 0.
 ','line_number':404,'multiline':True]
['text':' We first try to lookup the zone ID in our system list.  If this
     * fails, we try to parse it as a custom string GMT[+-]hh:mm.  If
     * all else fails, we return GMT, which is probably not what the
     * user wants, but at least is a functioning TimeZone object.
     *
     * We cannot return NULL, because that would break compatibility
     * with the JDK.
     ','line_number':420,'multiline':True]
['text':' Cannot test (&unknown == NULL) because the','line_number':437,'multiline':False]
['text':' behavior of NULL references is undefined.','line_number':438,'multiline':False]
['text':' -------------------------------------','line_number':446,'multiline':False]
['text':' We access system timezone data through TPlatformUtilities,','line_number':451,'multiline':False]
['text':' including tzset(), timezone, and tzname[].','line_number':452,'multiline':False]
['text':' First, try to create a system timezone, based','line_number':456,'multiline':False]
['text':' on the string ID in tzname[0].','line_number':457,'multiline':False]
['text':' Initialize tz... system data','line_number':459,'multiline':False]
['text':' Get the timezone ID from the host.  This function should do','line_number':461,'multiline':False]
['text':' any required host-specific remapping; e.g., on Windows this','line_number':462,'multiline':False]
['text':' function maps the Date and Time control panel setting to an','line_number':463,'multiline':False]
['text':' ICU timezone ID.','line_number':464,'multiline':False]
['text':' Invert sign because UNIX semantics are backwards','line_number':467,'multiline':False]
['text':' Make sure that the string is NULL terminated to prevent BoundsChecker/Purify warnings. ','line_number':472,'multiline':True]
['text':' hostID points to a heap-allocated location on Windows.','line_number':479,'multiline':False]
['text':' Uh oh. This probably wasn't a good id.','line_number':487,'multiline':False]
['text':' It was probably an ambiguous abbreviation','line_number':488,'multiline':False]
['text':' Construct a fixed standard zone with the host's ID','line_number':493,'multiline':False]
['text':' and raw offset.','line_number':494,'multiline':False]
['text':' If we _still_ don't have a time zone, use GMT.','line_number':499,'multiline':False]
['text':'','line_number':500,'multiline':False]
['text':' Note: This is extremely unlikely situation. If','line_number':501,'multiline':False]
['text':' new SimpleTimeZone(...) above fails, the following','line_number':502,'multiline':False]
['text':' code may also fail.','line_number':503,'multiline':False]
['text':' If we can't use GMT, get out.','line_number':506,'multiline':False]
['text':' -------------------------------------','line_number':516,'multiline':False]
['text':'*
 * Initialize DEFAULT_ZONE from the system default time zone.  
 * Upon return, DEFAULT_ZONE will not be NULL, unless operator new()
 * returns NULL.
 ','line_number':518,'multiline':True]
['text':' If setDefault() has already been called we can skip getting the','line_number':527,'multiline':False]
['text':' default zone information from the system.','line_number':528,'multiline':False]
['text':' NOTE:  this code is safely single threaded, being only','line_number':533,'multiline':False]
['text':' run via umtx_initOnce().','line_number':534,'multiline':False]
['text':'','line_number':535,'multiline':False]
['text':' Some of the locale/timezone OS functions may not be thread safe,','line_number':536,'multiline':False]
['text':'','line_number':537,'multiline':False]
['text':' The operating system might actually use ICU to implement timezones.','line_number':538,'multiline':False]
['text':' So we may have ICU calling ICU here, like on AIX.','line_number':539,'multiline':False]
['text':' There shouldn't be a problem with this; initOnce does not hold a mutex','line_number':540,'multiline':False]
['text':' while the init function is being run.','line_number':541,'multiline':False]
['text':' The code detecting the host time zone was separated from this','line_number':543,'multiline':False]
['text':' and implemented as TimeZone::detectHostTimeZone()','line_number':544,'multiline':False]
['text':' The only way for DEFAULT_ZONE to be non-null at this point is if the user','line_number':548,'multiline':False]
['text':' made a thread-unsafe call to setDefault() or adoptDefault() in another','line_number':549,'multiline':False]
['text':' thread while this thread was doing something that required getting the default.','line_number':550,'multiline':False]
['text':' -------------------------------------','line_number':556,'multiline':False]
['text':' -------------------------------------','line_number':565,'multiline':False]
['text':' -------------------------------------','line_number':578,'multiline':False]
['text':'----------------------------------------------------------------------','line_number':586,'multiline':False]
['text':' dereference Zones section','line_number':593,'multiline':False]
['text':' exclude Etc/Unknown','line_number':607,'multiline':False]
['text':' exclude aliases','line_number':617,'multiline':False]
['text':' exclude non-location ("001")','line_number':627,'multiline':False]
['text':' realloc failed.. use the original one even it has unused','line_number':637,'multiline':False]
['text':' area at the end','line_number':638,'multiline':False]
['text':'*
 * This is the default implementation for subclasses that do not
 * override this method.  This implementation calls through to the
 * 8-argument getOffset() method after suitable computations, and
 * correctly adjusts GMT millis to local millis when necessary.
 ','line_number':666,'multiline':True]
['text':' now in local standard millis','line_number':680,'multiline':False]
['text':' When local == TRUE, date might not be in local standard','line_number':683,'multiline':False]
['text':' millis.  getOffset taking 7 parameters used here assume','line_number':684,'multiline':False]
['text':' the given time in day is local standard time.','line_number':685,'multiline':False]
['text':' At STD->DST transition, there is a range of time which','line_number':686,'multiline':False]
['text':' does not exist.  When 'date' is in this time range','line_number':687,'multiline':False]
['text':' (and local == TRUE), this method interprets the specified','line_number':688,'multiline':False]
['text':' local time as DST.  At DST->STD transition, there is a','line_number':689,'multiline':False]
['text':' range of time which occurs twice.  In this case, this','line_number':690,'multiline':False]
['text':' method interprets the specified local time as STD.','line_number':691,'multiline':False]
['text':' To support the behavior above, we need to call getOffset','line_number':692,'multiline':False]
['text':' (with 7 args) twice when local == true and DST is','line_number':693,'multiline':False]
['text':' detected in the initial call.','line_number':694,'multiline':False]
['text':' Recompute if local==TRUE, dstOffset!=0.','line_number':707,'multiline':False]
['text':' adjust to local standard millis','line_number':711,'multiline':False]
['text':' -------------------------------------','line_number':716,'multiline':False]
['text':' New available IDs API as of ICU 2.4.  Uses StringEnumeration API.','line_number':718,'multiline':False]
['text':' Map into to zones.  Our results are zone[map[i]] for','line_number':723,'multiline':False]
['text':' i=0..len-1, where zone[i] is the i-th Olson zone.  If map==NULL','line_number':724,'multiline':False]
['text':' then our results are zone[i] for i=0..len-1.  Len will be zero','line_number':725,'multiline':False]
['text':' if the zone data could not be loaded.','line_number':726,'multiline':False]
['text':' dereference Zones section','line_number':743,'multiline':False]
['text':' If any additional conditions are available,','line_number':803,'multiline':False]
['text':' create instance local map filtered by the conditions.','line_number':804,'multiline':False]
['text':' Walk through the base map','line_number':817,'multiline':False]
['text':' dereference Zones section','line_number':819,'multiline':False]
['text':' Filter by region','line_number':827,'multiline':False]
['text':' max 3 letters + null term','line_number':828,'multiline':False]
['text':' region does not match','line_number':834,'multiline':False]
['text':' Filter by raw offset','line_number':839,'multiline':False]
['text':' Note: This is VERY inefficient','line_number':840,'multiline':False]
['text':' Finally, create a new enumeration instance','line_number':877,'multiline':False]
['text':'status','line_number':936,'multiline':True]
['text':' ---------------------------------------','line_number':980,'multiline':False]
['text':' ---------------------------------------','line_number':1002,'multiline':False]
['text':' dereference Zones section','line_number':1028,'multiline':False]
['text':' ---------------------------------------','line_number':1046,'multiline':False]
['text':' These methods are used by ZoneMeta class only.','line_number':1048,'multiline':False]
['text':' resolve zone index by name','line_number':1056,'multiline':False]
['text':' resolve zone index by name','line_number':1075,'multiline':False]
['text':' open the zone bundle by index','line_number':1080,'multiline':False]
['text':' this is a link - dereference the link','line_number':1086,'multiline':False]
['text':' resolve zone index by name','line_number':1115,'multiline':False]
['text':' get region mapping','line_number':1119,'multiline':False]
['text':' ---------------------------------------','line_number':1133,'multiline':False]
['text':' "Etc/Unknown" is not a system zone ID,','line_number':1144,'multiline':False]
['text':' but in the zone data','line_number':1145,'multiline':False]
['text':' A region code is represented by invariant characters','line_number':1154,'multiline':False]
['text':' ---------------------------------------','line_number':1165,'multiline':False]
['text':'--------------------------------------','line_number':1185,'multiline':False]
['text':'---------------------------------------','line_number':1193,'multiline':False]
['text':' Generic format','line_number':1208,'multiline':False]
['text':' Generic format many use Localized GMT as the final fallback.','line_number':1222,'multiline':False]
['text':' When Localized GMT format is used, the result might not be','line_number':1223,'multiline':False]
['text':' appropriate for the requested daylight value.','line_number':1224,'multiline':False]
['text':' Fallback to localized GMT','line_number':1273,'multiline':False]
['text':'*
 * Parse a custom time zone identifier and return a corresponding zone.
 * @param id a string of the form GMT[+-]hh:mm, GMT[+-]hhmm, or
 * GMT[+-]hh.
 * @return a newly created SimpleTimeZone with the given offset and
 * no Daylight Savings Time, or null if the id cannot be parsed.
','line_number':1289,'multiline':True]
['text':''-'','line_number':1342,'multiline':True]
['text':''+'','line_number':1344,'multiline':True]
['text':'numberFormat->setLenient(TRUE); // TODO: May need to set this, depends on latest timezone parsing','line_number':1355,'multiline':False]
['text':' Look for either hh:mm, hhmm, or hh','line_number':1357,'multiline':False]
['text':' hh:mm','line_number':1373,'multiline':False]
['text':' must be 2 digits','line_number':1379,'multiline':False]
['text':' [:ss]','line_number':1389,'multiline':False]
['text':' Supported formats are below -','line_number':1402,'multiline':False]
['text':'','line_number':1403,'multiline':False]
['text':' HHmmss','line_number':1404,'multiline':False]
['text':' Hmmss','line_number':1405,'multiline':False]
['text':' HHmm','line_number':1406,'multiline':False]
['text':' Hmm','line_number':1407,'multiline':False]
['text':' HH','line_number':1408,'multiline':False]
['text':' H','line_number':1409,'multiline':False]
['text':' invalid length','line_number':1413,'multiline':False]
['text':' already set to hour','line_number':1420,'multiline':False]
['text':' Create time zone ID - GMT[+|-]hhmm[ss]','line_number':1449,'multiline':False]
['text':' Ensure that there is always space for a trailing nul in TZDATA_VERSION','line_number':1501,'multiline':False]
['text':' special case - Etc/Unknown is a canonical ID, but not system ID','line_number':1534,'multiline':False]
['text':' Not a system ID','line_number':1542,'multiline':False]
['text':' canonicalize the input ID','line_number':1557,'multiline':False]
['text':' mapping data is only applicable to tz database IDs','line_number':1563,'multiline':False]
['text':' getWindowsID() sets an empty string where','line_number':1565,'multiline':False]
['text':' getCanonicalID() sets a U_ILLEGAL_ARGUMENT_ERROR.','line_number':1566,'multiline':False]
['text':' use tmperr, because windows mapping might not','line_number':1654,'multiline':False]
['text':' be avaiable by design','line_number':1655,'multiline':False]
['text':' use tmperr, because','line_number':1665,'multiline':False]
['text':' regional mapping is optional','line_number':1666,'multiline':False]
['text':' first ID delimited by space is the defasult one','line_number':1668,'multiline':False]
['text':' using status, because "001" must be','line_number':1680,'multiline':False]
['text':' available at this point','line_number':1681,'multiline':False]
['text':' #if !UCONFIG_NO_FORMATTING ','line_number':1694,'multiline':True]
['text':'eof','line_number':1696,'multiline':False]
