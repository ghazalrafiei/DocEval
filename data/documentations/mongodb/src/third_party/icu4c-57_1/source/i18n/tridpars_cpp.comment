['text':'
**********************************************************************
*   Copyright (c) 2002-2014, International Business Machines Corporation
*   and others.  All Rights Reserved.
**********************************************************************
*   Date        Name        Description
*   01/14/2002  aliu        Creation.
**********************************************************************
','line_number':1,'multiline':True]
['text':' ;','line_number':32,'multiline':False]
['text':' -','line_number':33,'multiline':False]
['text':' /','line_number':34,'multiline':False]
['text':' (','line_number':35,'multiline':False]
['text':' )','line_number':36,'multiline':False]
['text':'static const UChar EMPTY[]     = {0}; // ""','line_number':38,'multiline':False]
['text':' "Any"','line_number':39,'multiline':False]
['text':' "Any-Null"','line_number':40,'multiline':False]
['text':'*
 * The mutex controlling access to SPECIAL_INVERSES
 ','line_number':48,'multiline':True]
['text':'*
 * Parse a single ID, that is, an ID of the general form
 * "[f1] s1-t1/v1 ([f2] s2-t3/v2)", with the parenthesized element
 * optional, the filters optional, and the variants optional.
 * @param id the id to be parsed
 * @param pos INPUT-OUTPUT parameter.  On input, the position of
 * the first character to parse.  On output, the position after
 * the last character parsed.
 * @param dir the direction.  If the direction is REVERSE then the
 * SingleID is constructed for the reverse direction.
 * @return a SingleID object or NULL
 ','line_number':97,'multiline':True]
['text':' The ID will be of the form A, A(), A(B), or (B), where','line_number':115,'multiline':False]
['text':' A and B are filter IDs.','line_number':116,'multiline':False]
['text':' On the first pass, look for (B) or ().  If this fails, then','line_number':121,'multiline':False]
['text':' on the second pass, look for A, A(B), or A().','line_number':122,'multiline':False]
['text':' Must close with a ')'','line_number':135,'multiline':False]
['text':' Assemble return results','line_number':146,'multiline':False]
['text':' Null pointers check','line_number':152,'multiline':False]
['text':' Check for null pointer.','line_number':168,'multiline':False]
['text':' assert(specsA != NULL);','line_number':183,'multiline':False]
['text':' Check for NULL pointer','line_number':192,'multiline':False]
['text':'*
 * Parse a filter ID, that is, an ID of the general form
 * "[f1] s1-t1/v1", with the filters optional, and the variants optional.
 * @param id the id to be parsed
 * @param pos INPUT-OUTPUT parameter.  On input, the position of
 * the first character to parse.  On output, the position after
 * the last character parsed.
 * @return a SingleID object or null if the parse fails
 ','line_number':206,'multiline':True]
['text':' Assemble return results','line_number':226,'multiline':False]
['text':'*
 * Parse a global filter of the form "[f]" or "([f])", depending
 * on 'withParens'.
 * @param id the pattern the parse
 * @param pos INPUT-OUTPUT parameter.  On input, the position of
 * the first character to parse.  On output, the position after
 * the last character parsed.
 * @param dir the direction.
 * @param withParens INPUT-OUTPUT parameter.  On entry, if
 * withParens is 0, then parens are disallowed.  If it is 1,
 * then parens are requires.  If it is -1, then parens are
 * optional, and the return result will be set to 0 or 1.
 * @param canonID OUTPUT parameter.  The pattern for the filter
 * added to the canonID, either at the end, if dir is FORWARD, or
 * at the start, if dir is REVERSE.  The pattern will be enclosed
 * in parentheses if appropriate, and will be suffixed with an
 * ID_DELIM character.  May be NULL.
 * @return a UnicodeSet object or NULL.  A non-NULL results
 * indicates a successful parse, regardless of whether the filter
 * applies to the given direction.  The caller should discard it
 * if withParens != (dir == REVERSE).
 ','line_number':235,'multiline':True]
['text':' test for NULL ','line_number':279,'multiline':True]
['text':' In the forward direction, append the pattern to the','line_number':299,'multiline':False]
['text':' canonID.  In the reverse, insert it at zero, and invert','line_number':300,'multiline':False]
['text':' the presence of parens ("A" <-> "(A)").','line_number':301,'multiline':False]
['text':'*
 * Parse a compound ID, consisting of an optional forward global
 * filter, a separator, one or more single IDs delimited by
 * separators, an an optional reverse global filter.  The
 * separator is a semicolon.  The global filters are UnicodeSet
 * patterns.  The reverse global filter must be enclosed in
 * parentheses.
 * @param id the pattern the parse
 * @param dir the direction.
 * @param canonID OUTPUT parameter that receives the canonical ID,
 * consisting of canonical IDs for all elements, as returned by
 * parseSingleID(), separated by semicolons.  Previous contents
 * are discarded.
 * @param list OUTPUT parameter that receives a list of SingleID
 * objects representing the parsed IDs.  Previous contents are
 * discarded.
 * @param globalFilter OUTPUT parameter that receives a pointer to
 * a newly created global filter for this ID in this direction, or
 * NULL if there is none.
 * @return TRUE if the parse succeeds, that is, if the entire
 * id is consumed without syntax error.
 ','line_number':333,'multiline':True]
['text':' Parse leading global filter, if any','line_number':368,'multiline':False]
['text':' parens disallowed','line_number':369,'multiline':False]
['text':' Not a global filter; backup and resume','line_number':373,'multiline':False]
['text':' Construct canonical ID','line_number':409,'multiline':False]
['text':' Parse trailing global filter, if any, and only if we saw','line_number':418,'multiline':False]
['text':' a trailing delimiter after the IDs.','line_number':419,'multiline':False]
['text':' parens required','line_number':421,'multiline':False]
['text':' Don't require trailing ';', but parse it if present','line_number':424,'multiline':False]
['text':' Trailing unparsed text is a syntax error','line_number':436,'multiline':False]
['text':'*
 * Convert the elements of the 'list' vector, which are SingleID
 * objects, into actual Transliterator objects.  In the course of
 * this, some (or all) entries may be removed.  If all entries
 * are removed, the NULL transliterator will be added.
 *
 * Delete entries with empty basicIDs; these are generated by
 * elements like "(A)" in the forward direction, or "A()" in
 * the reverse.  THIS MAY RESULT IN AN EMPTY VECTOR.  Convert
 * SingleID entries to actual transliterators.
 *
 * @param list vector of SingleID objects.  On exit, vector
 * of one or more Transliterators.
 * @return new value of insertIndex.  The index will shift if
 * there are empty items, like "(Lower)", with indices less than
 * insertIndex.
 ','line_number':453,'multiline':True]
['text':' [sic]: i<=list.size()','line_number':480,'multiline':False]
['text':' We run the loop too long by one, so we can','line_number':481,'multiline':False]
['text':' do an insert after the last element','line_number':482,'multiline':False]
['text':' An empty list is equivalent to a NULL transliterator.','line_number':502,'multiline':False]
['text':' Should never happen','line_number':506,'multiline':False]
['text':'*
 * Parse an ID into pieces.  Take IDs of the form T, T/V, S-T,
 * S-T/V, or S/V-T.  If the source is missing, return a source of
 * ANY.
 * @param id the id string, in any of several forms
 * @return an array of 4 strings: source, target, variant, and
 * isSourcePresent.  If the source is not present, ANY will be
 * given as the source, and isSourcePresent will be NULL.  Otherwise
 * isSourcePresent will be non-NULL.  The target may be empty if the
 * id is not well-formed.  The variant may be empty.
 ','line_number':537,'multiline':True]
['text':' Form: T/V or T (or /V)','line_number':565,'multiline':False]
['text':' Form: S-T/V or S-T (or -T/V or -T)','line_number':569,'multiline':False]
['text':' Form: (S/V-T or /V-T)','line_number':577,'multiline':False]
['text':'*
 * Given source, target, and variant strings, concatenate them into a
 * full ID.  If the source is empty, then "Any" will be used for the
 * source, so the ID will always be of the form s-t/v or s-t.
 ','line_number':591,'multiline':True]
['text':' NUL-terminate the ID string for getTerminatedBuffer.','line_number':608,'multiline':False]
['text':' This prevents valgrind and Purify warnings.','line_number':609,'multiline':False]
['text':'*
 * Register two targets as being inverses of one another.  For
 * example, calling registerSpecialInverse("NFC", "NFD", TRUE) causes
 * Transliterator to form the following inverse relationships:
 *
 * <pre>NFC => NFD
 * Any-NFC => Any-NFD
 * NFD => NFC
 * Any-NFD => Any-NFC</pre>
 *
 * (Without the special inverse registration, the inverse of NFC
 * would be NFC-Any.)  Note that NFD is shorthand for Any-NFD, but
 * that the presence or absence of "Any-" is preserved.
 *
 * <p>The relationship is symmetrical; registering (a, b) is
 * equivalent to registering (b, a).
 *
 * <p>The relevant IDs must still be registered separately as
 * factories or classes.
 *
 * <p>Only the targets are specified.  Special inverses always
 * have the form Any-Target1 <=> Any-Target2.  The target should
 * have canonical casing (the casing desired to be produced when
 * an inverse is formed) and should contain no whitespace or other
 * extraneous characters.
 *
 * @param target the target against which to register the inverse
 * @param inverseTarget the inverse of target, that is
 * Any-target.getInverse() => Any-inverseTarget
 * @param bidirectional if TRUE, register the reverse relation
 * as well, that is, Any-inverseTarget.getInverse() => Any-target
 ','line_number':614,'multiline':True]
['text':' If target == inverseTarget then force bidirectional => FALSE','line_number':655,'multiline':False]
['text':' Used for null pointer check before usage.','line_number':662,'multiline':False]
['text':'----------------------------------------------------------------','line_number':678,'multiline':False]
['text':' Private implementation','line_number':679,'multiline':False]
['text':'----------------------------------------------------------------','line_number':680,'multiline':False]
['text':'*
 * Parse an ID into component pieces.  Take IDs of the form T,
 * T/V, S-T, S-T/V, or S/V-T.  If the source is missing, return a
 * source of ANY.
 * @param id the id string, in any of several forms
 * @param pos INPUT-OUTPUT parameter.  On input, pos is the
 * offset of the first character to parse in id.  On output,
 * pos is the offset after the last parsed character.  If the
 * parse failed, pos will be unchanged.
 * @param allowFilter2 if TRUE, a UnicodeSet pattern is allowed
 * at any location between specs or delimiters, and is returned
 * as the fifth string in the array.
 * @return a Specs object, or NULL if the parse failed.  If
 * neither source nor target was seen in the parsed id, then the
 * parse fails.  If allowFilter is TRUE, then the parsed filter
 * pattern is returned in the Specs object, otherwise the returned
 * filter reference is NULL.  If the parse fails for any reason
 * NULL is returned.
 ','line_number':682,'multiline':True]
['text':' This loop parses one of the following things with each','line_number':713,'multiline':False]
['text':' pass: a filter, a delimiter character (either '-' or '/'),','line_number':714,'multiline':False]
['text':' or a spec (source, target, or variant).','line_number':715,'multiline':False]
['text':' Parse filters','line_number':722,'multiline':False]
['text':' We are about to try to parse a spec with no delimiter','line_number':748,'multiline':False]
['text':' when we can no longer do so (we can only do so at the','line_number':749,'multiline':False]
['text':' start); break.','line_number':750,'multiline':False]
['text':' Note that if there was a trailing delimiter, we','line_number':757,'multiline':False]
['text':' consume it.  So Foo-, Foo/, Foo-Bar/, and Foo/Bar-','line_number':758,'multiline':False]
['text':' are legal.','line_number':759,'multiline':False]
['text':' A spec with no prior character is either source or target,','line_number':778,'multiline':False]
['text':' depending on whether an explicit "-target" was seen.','line_number':779,'multiline':False]
['text':' Must have either source or target','line_number':788,'multiline':False]
['text':' Empty source or target defaults to ANY','line_number':794,'multiline':False]
['text':'*
 * Givens a Spec object, convert it to a SingleID object.  The
 * Spec object is a more unprocessed parse result.  The SingleID
 * object contains information about canonical and basic IDs.
 * @return a SingleID; never returns NULL.  Returned object always
 * has 'filter' field of NULL.
 ','line_number':807,'multiline':True]
['text':'*
 * Given a Specs object, return a SingleID representing the
 * special inverse of that ID.  If there is no special inverse
 * then return NULL.
 * @return a SingleID or NULL.  Returned object always has
 * 'filter' field of NULL.
 ','line_number':845,'multiline':True]
['text':' If the original ID contained "Any-" then make the','line_number':869,'multiline':False]
['text':' special inverse "Any-Foo"; otherwise make it "Foo".','line_number':870,'multiline':False]
['text':' So "Any-NFC" => "Any-NFD" but "NFC" => "NFD".','line_number':871,'multiline':False]
['text':'*
 * Glue method to get around access problems in C++.  This would
 * ideally be inline but we want to avoid a circular header
 * dependency.
 ','line_number':893,'multiline':True]
['text':'*
 * Initialize static memory. Called through umtx_initOnce only.
 ','line_number':902,'multiline':True]
['text':'*
 * Free static memory.
 ','line_number':917,'multiline':True]
['text':' #if !UCONFIG_NO_TRANSLITERATION ','line_number':930,'multiline':True]
['text':'eof','line_number':932,'multiline':False]
