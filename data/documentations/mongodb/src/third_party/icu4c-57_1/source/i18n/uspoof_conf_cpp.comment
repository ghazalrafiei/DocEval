['text':'
******************************************************************************
*
*   Copyright (C) 2008-2015, International Business Machines
*   Corporation and others.  All Rights Reserved.
*
******************************************************************************
*   file name:  uspoof_conf.cpp
*   encoding:   US-ASCII
*   tab size:   8 (not used)
*   indentation:4
*
*   created on: 2009Jan05  (refactoring earlier files)
*   created by: Andy Heninger
*
*   Internal classes for compililing confusable data into its binary (runtime) form.
','line_number':1,'multiline':True]
['text':'---------------------------------------------------------------------','line_number':38,'multiline':False]
['text':'','line_number':39,'multiline':False]
['text':'  buildConfusableData   Compile the source confusable data, as defined by','line_number':40,'multiline':False]
['text':'                        the Unicode data file confusables.txt, into the binary','line_number':41,'multiline':False]
['text':'                        structures used by the confusable detector.','line_number':42,'multiline':False]
['text':'','line_number':43,'multiline':False]
['text':'                        The binary structures are described in uspoof_impl.h','line_number':44,'multiline':False]
['text':'','line_number':45,'multiline':False]
['text':'     1.  parse the data, building 4 hash tables, one each for the SL, SA, ML and MA','line_number':46,'multiline':False]
['text':'         tables.  Each maps from a UChar32 to a String.','line_number':47,'multiline':False]
['text':'','line_number':48,'multiline':False]
['text':'     2.  Sort all of the strings encountered by length, since they will need to','line_number':49,'multiline':False]
['text':'         be stored in that order in the final string table.','line_number':50,'multiline':False]
['text':'','line_number':51,'multiline':False]
['text':'     3.  Build a list of keys (UChar32s) from the four mapping tables.  Sort the','line_number':52,'multiline':False]
['text':'         list because that will be the ordering of our runtime table.','line_number':53,'multiline':False]
['text':'','line_number':54,'multiline':False]
['text':'     4.  Generate the run time string table.  This is generated before the key & value','line_number':55,'multiline':False]
['text':'         tables because we need the string indexes when building those tables.','line_number':56,'multiline':False]
['text':'','line_number':57,'multiline':False]
['text':'     5.  Build the run-time key and value tables.  These are parallel tables, and are built','line_number':58,'multiline':False]
['text':'         at the same time','line_number':59,'multiline':False]
['text':'','line_number':60,'multiline':False]
['text':' key hash function','line_number':75,'multiline':False]
['text':' Key Comparator','line_number':76,'multiline':False]
['text':' Value Comparator','line_number':77,'multiline':False]
['text':' Comparison function for ordering strings in the string pool.','line_number':103,'multiline':False]
['text':' Compare by length first, then, within a group of the same length,','line_number':104,'multiline':False]
['text':' by code point order.','line_number':105,'multiline':False]
['text':' Conforms to the type signature for a USortComparator in uvector.h','line_number':106,'multiline':False]
['text':' Convert the user input data from UTF-8 to UChar (UTF-16)','line_number':209,'multiline':False]
['text':' Regular Expression to parse a line from Confusables.txt.  The expression will match','line_number':227,'multiline':False]
['text':' any line.  What was matched is determined by examining which capture groups have a match.','line_number':228,'multiline':False]
['text':'   Capture Group 1:  the source char','line_number':229,'multiline':False]
['text':'   Capture Group 2:  the replacement chars','line_number':230,'multiline':False]
['text':'   Capture Group 3-6  the table type, SL, SA, ML, or MA','line_number':231,'multiline':False]
['text':'   Capture Group 7:  A blank or comment only line.','line_number':232,'multiline':False]
['text':'   Capture Group 8:  A syntactically invalid line.  Anything that didn't match before.','line_number':233,'multiline':False]
['text':' Example Line from the confusables.txt source file:','line_number':234,'multiline':False]
['text':'   "1D702 ;	006E 0329 ;	SL	# MATHEMATICAL ITALIC SMALL ETA ... "','line_number':235,'multiline':False]
['text':' Match the source char','line_number':237,'multiline':False]
['text':' Match the replacement char(s)','line_number':238,'multiline':False]
['text':'     (continued)','line_number':239,'multiline':False]
['text':' Match the table type','line_number':240,'multiline':False]
['text':' Match any trailing #comment','line_number':241,'multiline':False]
['text':' OR match empty lines or lines with only a #comment','line_number':242,'multiline':False]
['text':' OR match any line, which catches illegal lines.','line_number':243,'multiline':False]
['text':' TODO: Why are we using the regex C API here? C++ would just take UnicodeString...','line_number':244,'multiline':False]
['text':' Regular expression for parsing a hex number out of a space-separated list of them.','line_number':247,'multiline':False]
['text':'   Capture group 1 gets the number, with spaces removed.','line_number':248,'multiline':False]
['text':' Zap any Byte Order Mark at the start of input.  Changing it to a space is benign','line_number':252,'multiline':False]
['text':'   given the syntax of the input.','line_number':253,'multiline':False]
['text':' Parse the input, one line per iteration of this loop.','line_number':258,'multiline':False]
['text':' this was a blank or comment line.','line_number':263,'multiline':False]
['text':' input file syntax error.','line_number':267,'multiline':False]
['text':' We have a good input line.  Extract the key character and mapping string, and','line_number':272,'multiline':False]
['text':'    put them into the appropriate mapping table.','line_number':273,'multiline':False]
['text':' Put the map (value) string into the string pool','line_number':293,'multiline':False]
['text':' This a little like a Java intern() - any duplicates will be eliminated.','line_number':294,'multiline':False]
['text':' Add the UChar32 -> string mapping to the appropriate table.','line_number':297,'multiline':False]
['text':' For Unicode 8, the SL, SA and ML tables have been discontinued.','line_number':310,'multiline':False]
['text':'                All input data from confusables.txt is tagged MA.','line_number':311,'multiline':False]
['text':'                ICU spoof check functions should ignore the specified table and always','line_number':312,'multiline':False]
['text':'                use this MA Data.','line_number':313,'multiline':False]
['text':'                For now, implement by populating the MA data into all four tables, and','line_number':314,'multiline':False]
['text':'                keep the multiple table implementation in place, in case it comes back','line_number':315,'multiline':False]
['text':'                at some time in the future.','line_number':316,'multiline':False]
['text':'                There is no run time size penalty to keeping the four table implementation -','line_number':317,'multiline':False]
['text':'                the data is shared when it's the same betweeen tables.','line_number':318,'multiline':False]
['text':'  uhash_iput(table, keyChar, smapString, &status);','line_number':323,'multiline':False]
['text':' Input data is now all parsed and collected.','line_number':334,'multiline':False]
['text':' Now create the run-time binary form of the data.','line_number':335,'multiline':False]
['text':'','line_number':336,'multiline':False]
['text':' This is done in two steps.  First the data is assembled into vectors and strings,','line_number':337,'multiline':False]
['text':'   for ease of construction, then the contents of these collections are dumped','line_number':338,'multiline':False]
['text':'   into the actual raw-bytes data storage.','line_number':339,'multiline':False]
['text':' Build up the string array, and record the index of each string therein','line_number':341,'multiline':False]
['text':'  in the (build time only) string pool.','line_number':342,'multiline':False]
['text':' Strings of length one are not entered into the strings array.','line_number':343,'multiline':False]
['text':' At the same time, build up the string lengths table, which records the','line_number':344,'multiline':False]
['text':' position in the string table of the first string of each length >= 4.','line_number':345,'multiline':False]
['text':' (Strings in the table are sorted by length)','line_number':346,'multiline':False]
['text':' strings of length one do not get an entry in the string table.','line_number':360,'multiline':False]
['text':' Keep the single string character itself here, which is the same','line_number':361,'multiline':False]
['text':'  convention that is used in the final run-time string table index.','line_number':362,'multiline':False]
['text':' Make the final entry to the string lengths table.','line_number':375,'multiline':False]
['text':'   (it holds an entry for the _last_ string of each length, so adding the','line_number':376,'multiline':False]
['text':'    final one doesn't happen in the main loop because no longer string was encountered.)','line_number':377,'multiline':False]
['text':' Construct the compile-time Key and Value tables','line_number':383,'multiline':False]
['text':'','line_number':384,'multiline':False]
['text':' For each key code point, check which mapping tables it applies to,','line_number':385,'multiline':False]
['text':'   and create the final data for the key & value structures.','line_number':386,'multiline':False]
['text':'','line_number':387,'multiline':False]
['text':'   The four logical mapping tables are conflated into one combined table.','line_number':388,'multiline':False]
['text':'   If multiple logical tables have the same mapping for some key, they','line_number':389,'multiline':False]
['text':'     share a single entry in the combined table.','line_number':390,'multiline':False]
['text':'   If more than one mapping exists for the same key code point, multiple','line_number':391,'multiline':False]
['text':'     entries will be created in the table','line_number':392,'multiline':False]
['text':' It is an oddity of the UnicodeSet API that simply enumerating the contained','line_number':395,'multiline':False]
['text':'   code points requires a nested loop.','line_number':396,'multiline':False]
['text':' Put the assembled data into the flat runtime array','line_number':406,'multiline':False]
['text':' All of the intermediate allocated data belongs to the ConfusabledataBuilder','line_number':409,'multiline':False]
['text':'  object  (this), and is deleted in the destructor.','line_number':410,'multiline':False]
['text':'','line_number':414,'multiline':False]
['text':' outputData     The confusable data has been compiled and stored in intermediate','line_number':415,'multiline':False]
['text':'                collections and strings.  Copy it from there to the final flat','line_number':416,'multiline':False]
['text':'                binary array.','line_number':417,'multiline':False]
['text':'','line_number':418,'multiline':False]
['text':'                Note that as each section is added to the output data, the','line_number':419,'multiline':False]
['text':'                expand (reserveSpace() function will likely relocate it in memory.','line_number':420,'multiline':False]
['text':'                Be careful with pointers.','line_number':421,'multiline':False]
['text':'','line_number':422,'multiline':False]
['text':'  The Key Table','line_number':427,'multiline':False]
['text':'     While copying the keys to the runtime array,','line_number':428,'multiline':False]
['text':'       also sanity check that they are sorted.','line_number':429,'multiline':False]
['text':' Suppress unused variable warning on gcc.','line_number':441,'multiline':False]
['text':' The Value Table, parallels the key table','line_number':453,'multiline':False]
['text':' The Strings Table.','line_number':471,'multiline':False]
['text':' Reserve an extra space so the string will be nul-terminated.  This is','line_number':474,'multiline':False]
['text':' only a convenience, for when debugging; it is not needed otherwise.','line_number':475,'multiline':False]
['text':' The String Lengths Table','line_number':488,'multiline':False]
['text':'    While copying into the runtime array do some sanity checks on the values','line_number':489,'multiline':False]
['text':'    Each complete entry contains two fields, an index and an offset.','line_number':490,'multiline':False]
['text':'    Lengths should increase with each entry.','line_number':491,'multiline':False]
['text':'    Offsets should be less than the size of the string table.','line_number':492,'multiline':False]
['text':' Suppress unused variable warning on gcc.','line_number':506,'multiline':False]
['text':' Note: StringLengthsSize in the raw data is the number of complete entries,','line_number':514,'multiline':False]
['text':'       each consisting of a pair of 16 bit values, hence the divide by 2.','line_number':515,'multiline':False]
['text':'  addKeyEntry   Construction of the confusable Key and Mapping Values tables.','line_number':523,'multiline':False]
['text':'                This is an intermediate point in the building process.','line_number':524,'multiline':False]
['text':'                We already have the mappings in the hash tables fSLTable, etc.','line_number':525,'multiline':False]
['text':'                This function builds corresponding run-time style table entries into','line_number':526,'multiline':False]
['text':'                  fKeyVec and fValueVec','line_number':527,'multiline':False]
['text':' The key character','line_number':530,'multiline':False]
['text':' The table, one of SATable, MATable, etc.','line_number':531,'multiline':False]
['text':' One of USPOOF_SA_TABLE_FLAG, etc.','line_number':532,'multiline':False]
['text':' No mapping for this key character.','line_number':537,'multiline':False]
['text':'   (This function is called for all four tables for each key char that','line_number':538,'multiline':False]
['text':'    is seen anywhere, so this no entry cases are very much expected.)','line_number':539,'multiline':False]
['text':' Check whether there is already an entry with the correct mapping.','line_number':543,'multiline':False]
['text':' If so, simply set the flag in the keyTable saying that the existing entry','line_number':544,'multiline':False]
['text':' applies to the table that we're doing now.','line_number':545,'multiline':False]
['text':' We have now checked all existing key entries for this key char (if any)','line_number':552,'multiline':False]
['text':'  without finding one with the same mapping.','line_number':553,'multiline':False]
['text':' The run time entry we are currently testing has the correct mapping.','line_number':558,'multiline':False]
['text':' Set the flag in it indicating that it applies to the new table also.','line_number':559,'multiline':False]
['text':' Need to add a new entry to the binary data being built for this mapping.','line_number':567,'multiline':False]
['text':' Includes adding entries to both the key table and the parallel values table.','line_number':568,'multiline':False]
['text':' If the preceding key entry is for the same key character (but with a different mapping)','line_number':585,'multiline':False]
['text':'   set the multiple-values flag on it.','line_number':586,'multiline':False]
['text':' !UCONFIG_NO_REGULAR_EXPRESSIONS','line_number':627,'multiline':False]
