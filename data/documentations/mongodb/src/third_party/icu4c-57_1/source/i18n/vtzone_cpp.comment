['text':'
*******************************************************************************
* Copyright (C) 2007-2016, International Business Machines Corporation and
* others. All Rights Reserved.
*******************************************************************************
','line_number':1,'multiline':True]
['text':' for 'typeid' to work','line_number':8,'multiline':False]
['text':' This is the deleter that will be use to remove TimeZoneRule','line_number':25,'multiline':False]
['text':' Smybol characters used by RFC2445 VTIMEZONE','line_number':33,'multiline':False]
['text':' : ','line_number':34,'multiline':True]
['text':' ; ','line_number':35,'multiline':True]
['text':' = ','line_number':36,'multiline':True]
['text':' , ','line_number':37,'multiline':True]
['text':' + ','line_number':38,'multiline':True]
['text':' - ','line_number':39,'multiline':True]
['text':' RFC2445 VTIMEZONE tokens','line_number':41,'multiline':False]
['text':' "BEGIN:VTIMEZONE" ','line_number':42,'multiline':True]
['text':' "END:VTIMEZONE" ','line_number':43,'multiline':True]
['text':' "BEGIN" ','line_number':44,'multiline':True]
['text':' "END" ','line_number':45,'multiline':True]
['text':' "VTIMEZONE" ','line_number':46,'multiline':True]
['text':' "TZID" ','line_number':47,'multiline':True]
['text':' "STANDARD" ','line_number':48,'multiline':True]
['text':' "DAYLIGHT" ','line_number':49,'multiline':True]
['text':' "DTSTART" ','line_number':50,'multiline':True]
['text':' "TZOFFSETFROM" ','line_number':51,'multiline':True]
['text':' "TZOFFSETTO" ','line_number':52,'multiline':True]
['text':' "RDATE" ','line_number':53,'multiline':True]
['text':' "RRULE" ','line_number':54,'multiline':True]
['text':' "TZNAME" ','line_number':55,'multiline':True]
['text':' "TZURL" ','line_number':56,'multiline':True]
['text':' "LAST-MODIFIED" ','line_number':57,'multiline':True]
['text':' "FREQ" ','line_number':59,'multiline':True]
['text':' "UNTIL" ','line_number':60,'multiline':True]
['text':' "YEARLY" ','line_number':61,'multiline':True]
['text':' "BYMONTH" ','line_number':62,'multiline':True]
['text':' "BYDAY" ','line_number':63,'multiline':True]
['text':' "BYMONTHDAY" ','line_number':64,'multiline':True]
['text':' CRLF ','line_number':66,'multiline':True]
['text':' "SU" ','line_number':69,'multiline':True]
['text':' "MO" ','line_number':70,'multiline':True]
['text':' "TU" ','line_number':71,'multiline':True]
['text':' "WE" ','line_number':72,'multiline':True]
['text':' "TH" ','line_number':73,'multiline':True]
['text':' "FR" ','line_number':74,'multiline':True]
['text':' "SA" ','line_number':75,'multiline':True]
['text':' Month length for non-leap year','line_number':77,'multiline':False]
['text':' ICU custom property','line_number':80,'multiline':False]
['text':' "X-TZINFO:" ','line_number':81,'multiline':True]
['text':' "/Partial@" ','line_number':82,'multiline':True]
['text':' "/Simple@" ','line_number':83,'multiline':True]
['text':'
 * Simple fixed digit ASCII number to integer converter
 ','line_number':86,'multiline':True]
['text':' max int32_t is 10 decimal digits','line_number':120,'multiline':False]
['text':' variable length','line_number':130,'multiline':False]
['text':' fixed digits','line_number':138,'multiline':False]
['text':' max int64_t is 20 decimal digits','line_number':155,'multiline':False]
['text':'
 * Convert date/time to RFC2445 Date-Time form #1 DATE WITH LOCAL TIME
 ','line_number':186,'multiline':True]
['text':''T'','line_number':197,'multiline':True]
['text':'
 * Convert date/time to RFC2445 Date-Time form #2 DATE WITH UTC TIME
 ','line_number':212,'multiline':True]
['text':''Z'','line_number':217,'multiline':True]
['text':'
 * Parse RFC2445 Date-Time form #1 DATE WITH LOCAL TIME and
 * #2 DATE WITH UTC TIME
 ','line_number':221,'multiline':True]
['text':' FORM#1 15 characters, such as "20060317T142115"','line_number':236,'multiline':False]
['text':' FORM#2 16 characters, such as "20060317T142115Z"','line_number':237,'multiline':False]
['text':' charcter "T" must be used for separating date and time','line_number':241,'multiline':False]
['text':' invalid format','line_number':246,'multiline':False]
['text':' 0-based','line_number':253,'multiline':False]
['text':' check valid range','line_number':263,'multiline':False]
['text':' Calculate the time','line_number':277,'multiline':False]
['text':'
 * Convert RFC2445 utc-offset string to milliseconds
 ','line_number':286,'multiline':True]
['text':' utf-offset must be 5 or 7 characters','line_number':300,'multiline':False]
['text':' sign','line_number':303,'multiline':False]
['text':' utf-offset must start with "+" or "-"','line_number':310,'multiline':False]
['text':'
 * Convert milliseconds to RFC2445 utc-offset string
 ','line_number':332,'multiline':True]
['text':'
 * Create a default TZNAME from TZID
 ','line_number':356,'multiline':True]
['text':'
 * Parse individual RRULE
 * 
 * On return -
 * 
 * month    calculated by BYMONTH-1, or -1 when not found
 * dow      day of week in BYDAY, or 0 when not found
 * wim      day of week ordinal number in BYDAY, or 0 when not found
 * dom      an array of day of month
 * domCount number of availble days in dom (domCount is specifying the size of dom on input)
 * until    time defined by UNTIL attribute or MIN_MILLIS if not available
 ','line_number':368,'multiline':True]
['text':'UBool parseError = FALSE;','line_number':393,'multiline':False]
['text':' only support YEARLY frequency type','line_number':418,'multiline':False]
['text':' ISO8601 UTC format, for example, "20060315T020000Z"','line_number':425,'multiline':False]
['text':' Note: BYMONTH may contain multiple months, but only single month make sense for','line_number':431,'multiline':False]
['text':' VTIMEZONE property.','line_number':432,'multiline':False]
['text':' Note: BYDAY may contain multiple day of week separated by comma.  It is unlikely used for','line_number':441,'multiline':False]
['text':' VTIMEZONE property.  We do not support the case.','line_number':442,'multiline':False]
['text':' 2-letter format is used just for representing a day of week, for example, "SU" for Sunday','line_number':444,'multiline':False]
['text':' 3 or 4-letter format is used for represeinging Nth day of week, for example, "-1SA" for last Saturday','line_number':445,'multiline':False]
['text':' Nth day of week','line_number':451,'multiline':False]
['text':' Sunday(1) - Saturday(7)','line_number':474,'multiline':False]
['text':' Note: BYMONTHDAY may contain multiple days delimitted by comma','line_number':480,'multiline':False]
['text':'','line_number':481,'multiline':False]
['text':' A value of BYMONTHDAY could be negative, for example, -1 means','line_number':482,'multiline':False]
['text':' the last day in a month','line_number':483,'multiline':False]
['text':' FREQ=YEARLY must be set','line_number':510,'multiline':False]
['text':' Set actual number of parsed DOM (ICAL_BYMONTHDAY)','line_number':513,'multiline':False]
['text':' Set error status','line_number':519,'multiline':False]
['text':' Parse the first rule','line_number':537,'multiline':False]
['text':' No more rules','line_number':550,'multiline':False]
['text':' Multiple BYMONTHDAY values','line_number':552,'multiline':False]
['text':' Only support the rule using 7 continuous days','line_number':554,'multiline':False]
['text':' BYMONTH and BYDAY must be set at the same time','line_number':555,'multiline':False]
['text':' max possible number of dates in a month','line_number':558,'multiline':False]
['text':' Resolve negative day numbers.  A negative day number should','line_number':560,'multiline':False]
['text':' not be used in February, but if we see such case, we use 28','line_number':561,'multiline':False]
['text':' as the base.','line_number':562,'multiline':False]
['text':' Make sure days are continuous','line_number':570,'multiline':False]
['text':' days are not continuous','line_number':580,'multiline':False]
['text':' Use DOW_GEQ_DOM rule with firstDay as the start date','line_number':584,'multiline':False]
['text':' Check if BYMONTH + BYMONTHDAY + BYDAY rule with multiple RRULE lines.','line_number':588,'multiline':False]
['text':' Otherwise, not supported.','line_number':589,'multiline':False]
['text':' This is not the case','line_number':591,'multiline':False]
['text':' Parse the rest of rules if number of rules is not exceeding 7.','line_number':594,'multiline':False]
['text':' We can only support 7 continuous days starting from a day of month.','line_number':595,'multiline':False]
['text':' Note: To check valid date range across multiple rule is a little','line_number':600,'multiline':False]
['text':' bit complicated.  For now, this code is not doing strict range','line_number':601,'multiline':False]
['text':' checking across month boundary','line_number':602,'multiline':False]
['text':' If UNTIL is newer than previous one, use the one','line_number':623,'multiline':False]
['text':' Check if BYMONTH + BYMONTHDAY + BYDAY rule','line_number':628,'multiline':False]
['text':' Count number of BYMONTHDAY','line_number':632,'multiline':False]
['text':' We cannot support BYMONTHDAY more than 7','line_number':634,'multiline':False]
['text':' Check if the same BYDAY is used.  Otherwise, we cannot','line_number':637,'multiline':False]
['text':' support the rule','line_number':638,'multiline':False]
['text':' Check if the month is same or right next to the primary month','line_number':642,'multiline':False]
['text':' Previous month','line_number':647,'multiline':False]
['text':' Reset earliest day','line_number':650,'multiline':False]
['text':' Next month','line_number':653,'multiline':False]
['text':' The day range cannot exceed more than 2 months','line_number':656,'multiline':False]
['text':' The day range cannot exceed more than 2 months','line_number':660,'multiline':False]
['text':' If ealier month, go through days to find the earliest day','line_number':664,'multiline':False]
['text':' Number of BYMONTHDAY entries must be 7','line_number':674,'multiline':False]
['text':' Calculate start/end year and missing fields','line_number':681,'multiline':False]
['text':' If BYMONTH is not set, use the month of DTSTART','line_number':686,'multiline':False]
['text':' If only YEARLY is set, use the day of DTSTART as BYMONTHDAY','line_number':690,'multiline':False]
['text':' Create the AnnualDateTimeRule','line_number':702,'multiline':False]
['text':' Day in month rule, for example, 15th day in the month','line_number':704,'multiline':False]
['text':' Nth day of week rule, for example, last Sunday','line_number':707,'multiline':False]
['text':' First day of week after day of month rule, for example,','line_number':710,'multiline':False]
['text':' first Sunday after 15th day in the month','line_number':711,'multiline':False]
['text':'
 * Create a TimeZoneRule by the RDATE definition
 ','line_number':724,'multiline':True]
['text':' When no RDATE line is provided, use start (DTSTART)','line_number':734,'multiline':False]
['text':' as the transition time','line_number':735,'multiline':False]
['text':' Create an array of transition times','line_number':739,'multiline':False]
['text':'
 * Check if the DOW rule specified by month, weekInMonth and dayOfWeek is equivalent
 * to the DateTimerule.
 ','line_number':761,'multiline':True]
['text':' Do not try to do more intelligent comparison for now.','line_number':770,'multiline':False]
['text':'
 * Convert the rule to its equivalent rule using WALL_TIME mode.
 * This function returns NULL when the specified DateTimeRule is already
 * using WALL_TIME mode.
 ','line_number':799,'multiline':True]
['text':' Convert to DOW_GEW_DOM or DOW_LEQ_DOM rule first','line_number':833,'multiline':False]
['text':' Shift one day before or after','line_number':843,'multiline':False]
['text':' Adjust day of week','line_number':855,'multiline':False]
['text':' Create a new rule','line_number':864,'multiline':False]
['text':'
 * Minumum implementations of stream writer/reader, writing/reading
 * UnicodeString.  For now, we do not want to introduce the dependency
 * on the ICU I/O stream in this module.  But we want to keep the code
 * equivalent to the ICU4J implementation, which utilizes java.io.Writer/
 * Reader.
 ','line_number':875,'multiline':True]
['text':'void write(const UChar* str, int32_t length);','line_number':890,'multiline':False]
['text':'
void
VTZWriter::write(const UChar* str, int32_t length) {
    out->append(str, length);
}
','line_number':917,'multiline':True]
['text':' && olsonzid = that.olsonzid ','line_number':1051,'multiline':True]
['text':' && icutzver = that.icutzver ','line_number':1052,'multiline':True]
['text':' Set ICU tzdata version','line_number':1069,'multiline':False]
['text':' Set ICU tzdata version','line_number':1101,'multiline':False]
['text':' end of file','line_number':1263,'multiline':False]
['text':' CR, must be followed by LF according to the definition in RFC2445','line_number':1274,'multiline':False]
['text':' NOT followed by TAB/SP -> new line','line_number':1279,'multiline':False]
['text':' LF','line_number':1296,'multiline':False]
['text':' parser state','line_number':1337,'multiline':False]
['text':' Initial state','line_number':1338,'multiline':False]
['text':' In VTIMEZONE','line_number':1339,'multiline':False]
['text':' In STANDARD or DAYLIGHT','line_number':1340,'multiline':False]
['text':' timezone ID','line_number':1357,'multiline':False]
['text':' current zone type','line_number':1362,'multiline':False]
['text':' current zone from offset','line_number':1363,'multiline':False]
['text':' current zone offset','line_number':1364,'multiline':False]
['text':' current zone name','line_number':1365,'multiline':False]
['text':' current zone starts','line_number':1366,'multiline':False]
['text':' true if the rule is described by RRULE','line_number':1367,'multiline':False]
['text':' initial offset','line_number':1368,'multiline':False]
['text':' initial offset','line_number':1369,'multiline':False]
['text':' the earliest rule start time','line_number':1370,'multiline':False]
['text':' RFC2445 prop name','line_number':1371,'multiline':False]
['text':' RFC2445 prop value','line_number':1372,'multiline':False]
['text':' list of RDATE or RRULE strings','line_number':1374,'multiline':False]
['text':' list of TimeZoneRule instances','line_number':1375,'multiline':False]
['text':' Set the deleter to remove TimeZoneRule vectors to avoid memory leaks due to unowned TimeZoneRules.','line_number':1384,'multiline':False]
['text':' Always in 'Z' format, so the offset argument for the parse method','line_number':1419,'multiline':False]
['text':' can be any value.','line_number':1420,'multiline':False]
['text':' tzid must be ready at this point','line_number':1428,'multiline':False]
['text':' initialize current zone properties','line_number':1432,'multiline':False]
['text':' BEGIN property other than STANDARD/DAYLIGHT','line_number':1443,'multiline':False]
['text':' must not be there.','line_number':1444,'multiline':False]
['text':' RDATE mixed with RRULE is not supported','line_number':1461,'multiline':False]
['text':' RDATE value may contain multiple date delimited','line_number':1465,'multiline':False]
['text':' by comma','line_number':1466,'multiline':False]
['text':' RRULE mixed with RDATE is not supported','line_number':1485,'multiline':False]
['text':' Mandatory properties','line_number':1495,'multiline':False]
['text':' if zonename is not available, create one from tzid','line_number':1499,'multiline':False]
['text':' create a time zone rule','line_number':1504,'multiline':False]
['text':' Parse TZOFFSETFROM/TZOFFSETTO','line_number':1512,'multiline':False]
['text':' If daylight, use the previous offset as rawoffset if positive','line_number':1520,'multiline':False]
['text':' This is rare case..  just use 1 hour DST savings','line_number':1525,'multiline':False]
['text':' start time','line_number':1534,'multiline':False]
['text':' Create the rule','line_number':1540,'multiline':False]
['text':' save from offset information for the earliest rule','line_number':1552,'multiline':False]
['text':' If this is STD, assume the time before this transtion','line_number':1554,'multiline':False]
['text':' is DST when the difference is 1 hour.  This might not be','line_number':1555,'multiline':False]
['text':' accurate, but VTIMEZONE data does not have such info.','line_number':1556,'multiline':False]
['text':' Must have at least one rule','line_number':1580,'multiline':False]
['text':' Create a initial rule','line_number':1585,'multiline':False]
['text':' Finally, create the RuleBasedTimeZone','line_number':1594,'multiline':False]
['text':' already adopted by RBTZ, no need to delete','line_number':1600,'multiline':False]
['text':' Too many final rules','line_number':1613,'multiline':False]
['text':' Only one final rule, only governs the initial rule,','line_number':1620,'multiline':False]
['text':' which is already initialized, thus, we do not need to','line_number':1621,'multiline':False]
['text':' add this transition rule','line_number':1622,'multiline':False]
['text':' Normalize the final rule','line_number':1625,'multiline':False]
['text':' Find the last non-final rule','line_number':1630,'multiline':False]
['text':' Transform this into a single transition','line_number':1653,'multiline':False]
['text':' Update the end year','line_number':1662,'multiline':False]
['text':''['','line_number':1756,'multiline':True]
['text':'']'','line_number':1758,'multiline':True]
['text':' Extract rules applicable to dates after the start time','line_number':1781,'multiline':False]
['text':' Create a RuleBasedTimeZone with the subset rule','line_number':1787,'multiline':False]
['text':''['','line_number':1809,'multiline':True]
['text':'']'','line_number':1813,'multiline':True]
['text':' Extract simple rules','line_number':1845,'multiline':False]
['text':' Create a RuleBasedTimeZone with the subset rule','line_number':1850,'multiline':False]
['text':''['','line_number':1864,'multiline':True]
['text':'']'','line_number':1868,'multiline':True]
['text':' Going through all transitions','line_number':1946,'multiline':False]
['text':' Update until time','line_number':1979,'multiline':False]
['text':' Reset this DST information','line_number':1998,'multiline':False]
['text':' Update until time','line_number':2030,'multiline':False]
['text':' Reset this STD information','line_number':2049,'multiline':False]
['text':' No transition - put a single non transition RDATE','line_number':2068,'multiline':False]
['text':'any time','line_number':2070,'multiline':True]
['text':' Use a single rule if possible','line_number':2102,'multiline':False]
['text':' Not equivalent rule - write out two different rules','line_number':2107,'multiline':False]
['text':' Use a single rule if possible','line_number':2144,'multiline':False]
['text':' Not equivalent rule - write out two different rules','line_number':2149,'multiline':False]
['text':'
 * Write the closing section of the VTIMEZONE definition block
 ','line_number':2213,'multiline':True]
['text':'
 * Write a single start time
 ','line_number':2227,'multiline':True]
['text':'
 * Write start times defined by a DOM rule using VTIMEZONE RRULE
 ','line_number':2254,'multiline':True]
['text':'
 * Write start times defined by a DOW rule using VTIMEZONE RRULE
 ','line_number':2288,'multiline':True]
['text':' -4, -3, -2, -1, 1, 2, 3, 4','line_number':2311,'multiline':False]
['text':' SU, MO, TU...','line_number':2312,'multiline':False]
['text':'
 * Write start times defined by a DOW_GEQ_DOM rule using VTIMEZONE RRULE
 ','line_number':2324,'multiline':True]
['text':' Check if this rule can be converted to DOW rule','line_number':2335,'multiline':False]
['text':' Can be represented by DOW rule','line_number':2337,'multiline':False]
['text':' Can be represented by DOW rule with negative week number','line_number':2344,'multiline':False]
['text':' Otherwise, use BYMONTHDAY to include all possible dates','line_number':2351,'multiline':False]
['text':' Check if all days are in the same month','line_number':2356,'multiline':False]
['text':' The start day is in previous month','line_number':2361,'multiline':False]
['text':' Note: When a rule is separated into two, UNTIL attribute needs to be','line_number':2367,'multiline':False]
['text':' calculated for each of them.  For now, we skip this, because we basically use this method','line_number':2368,'multiline':False]
['text':' only for final rules, which does not have the UNTIL attribute','line_number':2369,'multiline':False]
['text':' Do not use UNTIL ','line_number':2371,'multiline':True]
['text':' Start from 1 for the rest','line_number':2376,'multiline':False]
['text':' Note: This code does not actually work well in February.  For now, days in month in','line_number':2379,'multiline':False]
['text':' non-leap year.','line_number':2380,'multiline':False]
['text':' Do not use UNTIL ','line_number':2387,'multiline':True]
['text':'
 * Called from writeZonePropsByDOW_GEQ_DOM
 ','line_number':2401,'multiline':True]
['text':' Use positive number if possible','line_number':2415,'multiline':False]
['text':' SU, MO, TU...','line_number':2424,'multiline':False]
['text':'
 * Write start times defined by a DOW_LEQ_DOM rule using VTIMEZONE RRULE
 ','line_number':2448,'multiline':True]
['text':' Check if this rule can be converted to DOW rule','line_number':2459,'multiline':False]
['text':' Can be represented by DOW rule','line_number':2461,'multiline':False]
['text':' Can be represented by DOW rule with negative week number','line_number':2465,'multiline':False]
['text':' Specical case for February','line_number':2469,'multiline':False]
['text':' Otherwise, convert this to DOW_GEQ_DOM rule','line_number':2473,'multiline':False]
['text':'
 * Write the final time zone rule using RRULE, with no UNTIL attribute
 ','line_number':2479,'multiline':True]
['text':' If the rule's mills in a day is out of range, adjust start time.','line_number':2496,'multiline':False]
['text':' Olson tzdata supports 24:00 of a day, but VTIMEZONE does not.','line_number':2497,'multiline':False]
['text':' See ticket#7008/#7518','line_number':2498,'multiline':False]
['text':'
 * Write the opening section of zone properties
 ','line_number':2533,'multiline':True]
['text':' TZOFFSETTO','line_number':2553,'multiline':False]
['text':' TZOFFSETFROM','line_number':2560,'multiline':False]
['text':' TZNAME','line_number':2567,'multiline':False]
['text':' DTSTART','line_number':2573,'multiline':False]
['text':'
 * Writes the closing section of zone properties
 ','line_number':2580,'multiline':True]
['text':' END:STANDARD or END:DAYLIGHT','line_number':2588,'multiline':False]
['text':'
 * Write the beggining part of RRULE line
 ','line_number':2599,'multiline':True]
['text':'
 * Append the UNTIL attribute after RRULE line
 ','line_number':2621,'multiline':True]
['text':' #if !UCONFIG_NO_FORMATTING ','line_number':2639,'multiline':True]
['text':'eof','line_number':2641,'multiline':False]
