['text':' libunwind - a platform-independent unwind library
   Copyright (C) 2002-2004 Hewlett-Packard Co
        Contributed by David Mosberger-Tang <davidm@hpl.hp.com>

This file is part of libunwind.

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.  ','line_number':1,'multiline':True]
['text':' This file defines the runtime-support routines for dynamically
generated code.  Even though it is implemented as part of libunwind,
it is logically separate from the interface to perform the actual
unwinding.  In particular, this interface is always used in the
context of the unwind target, whereas the rest of the unwind API is
used in context of the process that is doing the unwind (which may be
a debugger running on another machine, for example).

Note that the data-structures declared here server a dual purpose:
when a program registers a dynamically generated procedure, it uses
these structures directly.  On the other hand, with remote-unwinding,
the data-structures are read from the remote process's memory and
translated into internalized versions.  To facilitate remote-access,
the following rules should be followed in declaring these structures:

 (1) Declare a member as a pointer only if the the information the
     member points to needs to be internalized as well (e.g., a
     string representing a procedure name should be declared as
     "const char *", but the instruction pointer should be declared
     as unw_word_t).

 (2) Provide sufficient padding to ensure that no implicit padding
     will be needed on any of the supported target architectures.  For
     the time being, padding data structures with the assumption that
     sizeof (unw_word_t) == 8 should be sufficient.  (Note: it's not
     impossible to internalize structures with internal padding, but
     it does make the process a bit harder).

 (3) Don't declare members that contain bitfields or floating-point
     values.

 (4) Don't declare members with enumeration types.  Declare them as
     int32_t instead.  ','line_number':26,'multiline':True]
['text':' end-of-unwind-info marker ','line_number':62,'multiline':True]
['text':' save register to another register ','line_number':63,'multiline':True]
['text':' frame-pointer-relative register spill ','line_number':64,'multiline':True]
['text':' stack-pointer-relative register spill ','line_number':65,'multiline':True]
['text':' add constant value to a register ','line_number':66,'multiline':True]
['text':' drop one or more stack frames ','line_number':67,'multiline':True]
['text':' name the current state ','line_number':68,'multiline':True]
['text':' set the region's entry-state ','line_number':69,'multiline':True]
['text':' get unwind info from an alias ','line_number':70,'multiline':True]
['text':' unw_dyn_proc_info_t ','line_number':76,'multiline':True]
['text':' unw_dyn_table_t ','line_number':77,'multiline':True]
['text':' unw_dyn_remote_table_t ','line_number':78,'multiline':True]
['text':' ARM specific unwind info ','line_number':79,'multiline':True]
['text':' Like UNW_INFO_FORMAT_REMOTE_TABLE, but
                                           table entries are considered
                                           relative to di->start_ip, rather
                                           than di->segbase ','line_number':80,'multiline':True]
['text':' what operation? ','line_number':89,'multiline':True]
['text':' qualifying predicate register ','line_number':90,'multiline':True]
['text':' what register ','line_number':91,'multiline':True]
['text':' when does it take effect? ','line_number':92,'multiline':True]
['text':' auxiliary value ','line_number':93,'multiline':True]
['text':' linked list of regions ','line_number':99,'multiline':True]
['text':' region length (# of instructions) ','line_number':100,'multiline':True]
['text':' length of op-array ','line_number':101,'multiline':True]
['text':' variable-length op-array ','line_number':102,'multiline':True]
['text':' address of human-readable procedure name ','line_number':108,'multiline':True]
['text':' address of personality routine ','line_number':109,'multiline':True]
['text':' addr. of table name (e.g., library name) ','line_number':118,'multiline':True]
['text':' segment base ','line_number':119,'multiline':True]
['text':' must be a multiple of sizeof(unw_word_t)! ','line_number':120,'multiline':True]
['text':' addr. of table name (e.g., library name) ','line_number':127,'multiline':True]
['text':' segment base ','line_number':128,'multiline':True]
['text':' must be a multiple of sizeof(unw_word_t)! ','line_number':129,'multiline':True]
['text':' doubly-linked list of dyn-info structures: ','line_number':136,'multiline':True]
['text':' first IP covered by this entry ','line_number':139,'multiline':True]
['text':' first IP NOT covered by this entry ','line_number':140,'multiline':True]
['text':' global-pointer in effect for this entry ','line_number':141,'multiline':True]
['text':' real type: unw_dyn_info_format_t ','line_number':142,'multiline':True]
['text':' ELF load offset ','line_number':144,'multiline':True]
['text':' Return the size (in bytes) of an unw_dyn_region_info_t structure that can
   hold OP_COUNT ops.  ','line_number':163,'multiline':True]
['text':' Register the unwind info for a single procedure.
   This routine is NOT signal-safe.  ','line_number':169,'multiline':True]
['text':' Cancel the unwind info for a single procedure.
   This routine is NOT signal-safe.  ','line_number':173,'multiline':True]
['text':' Convenience routines.  ','line_number':178,'multiline':True]
['text':' The target-dependent qualifying predicate which is always TRUE.  On
   IA-64, that's p0 (0), on non-predicated architectures, the value is
   ignored.  ','line_number':212,'multiline':True]
