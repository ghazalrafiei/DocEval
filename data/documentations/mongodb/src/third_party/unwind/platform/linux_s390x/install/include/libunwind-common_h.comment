['text':' libunwind - a platform-independent unwind library
   Copyright (C) 2001-2004 Hewlett-Packard Co
	Contributed by David Mosberger-Tang <davidm@hpl.hp.com>

This file is part of libunwind.

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.  ','line_number':1,'multiline':True]
['text':' On SmartOS, gcc fails with the following error:','line_number':34,'multiline':False]
['text':'','line_number':35,'multiline':False]
['text':' ../include/libunwind-common.h:43:41: error: expected identifier or '(' before numeric constant','line_number':36,'multiline':False]
['text':' # define UNW_PREFIX UNW_PASTE(UNW_PASTE(_U,UNW_TARGET),_)','line_number':37,'multiline':False]
['text':'                                         ^','line_number':38,'multiline':False]
['text':'','line_number':39,'multiline':False]
['text':' workaround is to undefine _U explicitly.','line_number':40,'multiline':False]
['text':' see https://github.com/libunwind/libunwind/issues/118 for more details.','line_number':41,'multiline':False]
['text':'','line_number':42,'multiline':False]
['text':' !UNW_LOCAL_ONLY ','line_number':53,'multiline':True]
['text':' !UNW_LOCAL_ONLY ','line_number':55,'multiline':True]
['text':' Error codes.  The unwind routines return the *negated* values of
   these error codes on error and a non-negative value on success.  ','line_number':57,'multiline':True]
['text':' no error ','line_number':61,'multiline':True]
['text':' unspecified (general) error ','line_number':62,'multiline':True]
['text':' out of memory ','line_number':63,'multiline':True]
['text':' bad register number ','line_number':64,'multiline':True]
['text':' attempt to write read-only register ','line_number':65,'multiline':True]
['text':' stop unwinding ','line_number':66,'multiline':True]
['text':' invalid IP ','line_number':67,'multiline':True]
['text':' bad frame ','line_number':68,'multiline':True]
['text':' unsupported operation or bad value ','line_number':69,'multiline':True]
['text':' unwind info has unsupported version ','line_number':70,'multiline':True]
['text':' no unwind info found ','line_number':71,'multiline':True]
['text':' The following enum defines the indices for a couple of
   (pseudo-)registers which have the same meaning across all
   platforms.  (RO) means read-only.  (RW) means read-write.  General
   registers (aka "integer registers") are expected to start with
   index 0.  The number of such registers is architecture-dependent.
   The remaining indices can be used as an architecture sees fit.  The
   last valid register index is given by UNW_REG_LAST.  ','line_number':75,'multiline':True]
['text':' (rw) instruction pointer (pc) ','line_number':84,'multiline':True]
['text':' (ro) stack pointer ','line_number':85,'multiline':True]
['text':' (rw) exception-handling reg base ','line_number':86,'multiline':True]
['text':' Number of exception-handler argument registers: ','line_number':91,'multiline':True]
['text':' no caching ','line_number':96,'multiline':True]
['text':' shared global cache ','line_number':97,'multiline':True]
['text':' per-thread caching ','line_number':98,'multiline':True]
['text':' We know this is a signal frame ','line_number':104,'multiline':True]
['text':' The unwind cursor starts at the youngest (most deeply nested) frame
   and is used to track the frame state as the unwinder steps from
   frame to frame.  It is safe to make (shallow) copies of variables
   of this type.  ','line_number':110,'multiline':True]
['text':' This type encapsulates the entire (preserved) machine-state.  ','line_number':120,'multiline':True]
['text':' unw_getcontext() fills the unw_context_t pointed to by UC with the
   machine state as it exists at the call-site.  For implementation
   reasons, this needs to be a target-dependent macro.  It's easiest
   to think of unw_getcontext() as being identical to getcontext(). ','line_number':123,'multiline':True]
['text':' Return 1 if register number R is a floating-point register, zero
   otherwise.
   This routine is signal-safe.  ','line_number':129,'multiline':True]
['text':' Each target may define it's own set of flags, but bits 0-15 are
   reserved for general libunwind-use.  ','line_number':138,'multiline':True]
['text':' The information comes from a .debug_frame section.  ','line_number':141,'multiline':True]
['text':' first IP covered by this procedure ','line_number':146,'multiline':True]
['text':' first IP NOT covered by this procedure ','line_number':147,'multiline':True]
['text':' first IP that could begin another procedure ','line_number':149,'multiline':True]
['text':' address of lang.-spec. data area (if any) ','line_number':151,'multiline':True]
['text':' optional personality routine ','line_number':152,'multiline':True]
['text':' global-pointer value for this procedure ','line_number':153,'multiline':True]
['text':' misc. flags ','line_number':154,'multiline':True]
['text':' unwind-info format (arch-specific) ','line_number':156,'multiline':True]
['text':' size of the information (if applicable) ','line_number':157,'multiline':True]
['text':' unwind-info (arch-specific) ','line_number':158,'multiline':True]
['text':' target-dependent auxiliary proc-info ','line_number':159,'multiline':True]
['text':' These are backend callback routines that provide access to the
   state of a "remote" process.  This can be used, for example, to
   unwind another process through the ptrace() interface.  ','line_number':168,'multiline':True]
['text':' Look up the unwind info associated with instruction-pointer IP.
       On success, the routine fills in the PROC_INFO structure.  ','line_number':173,'multiline':True]
['text':' Release any resources (e.g., memory) that were allocated for
       the unwind info returned in by a previous call to
       find_proc_info() with NEED_UNWIND_INFO set to 1.  ','line_number':178,'multiline':True]
['text':' Return the list-head of the dynamically registered unwind
       info.  ','line_number':183,'multiline':True]
['text':' Access aligned word at address ADDR.  The value is returned
       according to the endianness of the host (e.g., if the host is
       little-endian and the target is big-endian, access_mem() needs
       to byte-swap the value before returning it).  ','line_number':187,'multiline':True]
['text':' Access register number REG at address ADDR.  ','line_number':194,'multiline':True]
['text':' Access register number REG at address ADDR.  ','line_number':198,'multiline':True]
['text':' Optional call back to obtain the name of a (static) procedure.
       Dynamically generated procedures are handled automatically by
       libunwind.  This callback is optional and may be set to
       NULL.  ','line_number':204,'multiline':True]
['text':' register is not saved ("not an l-value") ','line_number':215,'multiline':True]
['text':' register has been saved in memory ','line_number':216,'multiline':True]
['text':' register has been saved in (another) register ','line_number':217,'multiline':True]
['text':' valid if type==UNW_SLT_MEMORY ','line_number':226,'multiline':True]
['text':' valid if type==UNW_SLT_REG ','line_number':227,'multiline':True]
['text':' target-dependent additional information ','line_number':230,'multiline':True]
['text':' These routines work both for local and remote unwinding.  ','line_number':234,'multiline':True]
