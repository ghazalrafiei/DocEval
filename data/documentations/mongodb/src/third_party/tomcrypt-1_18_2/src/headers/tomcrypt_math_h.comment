['text':' LibTomCrypt, modular cryptographic library -- Tom St Denis
 *
 * LibTomCrypt is a library that provides various cryptographic
 * algorithms in a highly modular and flexible manner.
 *
 * The library is free for all purposes without any express
 * guarantee it works.
 ','line_number':1,'multiline':True]
['text':'* math functions *','line_number':10,'multiline':True]
['text':' Number of rounds of the Miller-Rabin test
    * "Reasonable values of reps are between 15 and 50." c.f. gmp doc of mpz_probab_prime_p()
    * As of https://security.stackexchange.com/a/4546 we should use 40 rounds ','line_number':28,'multiline':True]
['text':'* math descriptor ','line_number':36,'multiline':True]
['text':'* Name of the math provider ','line_number':38,'multiline':True]
['text':'* Bits per digit, amount of bits must fit in an unsigned long ','line_number':41,'multiline':True]
['text':' ---- init/deinit functions ---- ','line_number':44,'multiline':True]
['text':'* initialize a bignum
     @param   a     The number to initialize
     @return  CRYPT_OK on success
   ','line_number':46,'multiline':True]
['text':'* init copy
     @param  dst    The number to initialize and write to
     @param  src    The number to copy from
     @return CRYPT_OK on success
   ','line_number':52,'multiline':True]
['text':'* deinit
      @param   a    The number to free
      @return CRYPT_OK on success
   ','line_number':59,'multiline':True]
['text':' ---- data movement ---- ','line_number':65,'multiline':True]
['text':'* negate
      @param   src   The number to negate
      @param   dst   The destination
      @return CRYPT_OK on success
   ','line_number':67,'multiline':True]
['text':'* copy
      @param   src   The number to copy from
      @param   dst   The number to write to
      @return CRYPT_OK on success
   ','line_number':74,'multiline':True]
['text':' ---- trivial low level functions ---- ','line_number':81,'multiline':True]
['text':'* set small constant
      @param a    Number to write to
      @param n    Source upto bits_per_digit (actually meant for very small constants)
      @return CRYPT_OK on success
   ','line_number':83,'multiline':True]
['text':'* get small constant
      @param a  Small number to read,
                only fetches up to bits_per_digit from the number
      @return   The lower bits_per_digit of the integer (unsigned)
   ','line_number':90,'multiline':True]
['text':'* get digit n
     @param a  The number to read from
     @param n  The number of the digit to fetch
     @return  The bits_per_digit  sized n'th digit of a
   ','line_number':97,'multiline':True]
['text':'* Get the number of digits that represent the number
     @param a   The number to count
     @return The number of digits used to represent the number
   ','line_number':104,'multiline':True]
['text':'* compare two integers
     @param a   The left side integer
     @param b   The right side integer
     @return LTC_MP_LT if a < b,
             LTC_MP_GT if a > b and
             LTC_MP_EQ otherwise.  (signed comparison)
   ','line_number':110,'multiline':True]
['text':'* compare against int
     @param a   The left side integer
     @param b   The right side integer (upto bits_per_digit)
     @return LTC_MP_LT if a < b,
             LTC_MP_GT if a > b and
             LTC_MP_EQ otherwise.  (signed comparison)
   ','line_number':119,'multiline':True]
['text':'* Count the number of bits used to represent the integer
     @param a   The integer to count
     @return The number of bits required to represent the integer
   ','line_number':128,'multiline':True]
['text':'* Count the number of LSB bits which are zero
     @param a   The integer to count
     @return The number of contiguous zero LSB bits
   ','line_number':134,'multiline':True]
['text':'* Compute a power of two
     @param a  The integer to store the power in
     @param n  The power of two you want to store (a = 2^n)
     @return CRYPT_OK on success
   ','line_number':140,'multiline':True]
['text':' ---- radix conversions ---- ','line_number':147,'multiline':True]
['text':'* read ascii string
     @param a     The integer to store into
     @param str   The string to read
     @param radix The radix the integer has been represented in (2-64)
     @return CRYPT_OK on success
   ','line_number':149,'multiline':True]
['text':'* write number to string
     @param a     The integer to store
     @param str   The destination for the string
     @param radix The radix the integer is to be represented in (2-64)
     @return CRYPT_OK on success
   ','line_number':157,'multiline':True]
['text':'* get size as unsigned char string
     @param a  The integer to get the size (when stored in array of octets)
     @return   The length of the integer in octets
   ','line_number':165,'multiline':True]
['text':'* store an integer as an array of octets
     @param src   The integer to store
     @param dst   The buffer to store the integer in
     @return CRYPT_OK on success
   ','line_number':171,'multiline':True]
['text':'* read an array of octets and store as integer
     @param dst   The integer to load
     @param src   The array of octets
     @param len   The number of octets
     @return CRYPT_OK on success
   ','line_number':178,'multiline':True]
['text':' ---- basic math ---- ','line_number':188,'multiline':True]
['text':'* add two integers
     @param a   The first source integer
     @param b   The second source integer
     @param c   The destination of "a + b"
     @return CRYPT_OK on success
   ','line_number':190,'multiline':True]
['text':'* add two integers
     @param a   The first source integer
     @param b   The second source integer
                (single digit of upto bits_per_digit in length)
     @param c   The destination of "a + b"
     @return CRYPT_OK on success
   ','line_number':198,'multiline':True]
['text':'* subtract two integers
     @param a   The first source integer
     @param b   The second source integer
     @param c   The destination of "a - b"
     @return CRYPT_OK on success
   ','line_number':207,'multiline':True]
['text':'* subtract two integers
     @param a   The first source integer
     @param b   The second source integer
                (single digit of upto bits_per_digit in length)
     @param c   The destination of "a - b"
     @return CRYPT_OK on success
   ','line_number':215,'multiline':True]
['text':'* multiply two integers
     @param a   The first source integer
     @param b   The second source integer
                (single digit of upto bits_per_digit in length)
     @param c   The destination of "a * b"
     @return CRYPT_OK on success
   ','line_number':224,'multiline':True]
['text':'* multiply two integers
     @param a   The first source integer
     @param b   The second source integer
                (single digit of upto bits_per_digit in length)
     @param c   The destination of "a * b"
     @return CRYPT_OK on success
   ','line_number':233,'multiline':True]
['text':'* Square an integer
     @param a    The integer to square
     @param b    The destination
     @return CRYPT_OK on success
   ','line_number':242,'multiline':True]
['text':'* Divide an integer
     @param a    The dividend
     @param b    The divisor
     @param c    The quotient (can be NULL to signify don't care)
     @param d    The remainder (can be NULL to signify don't care)
     @return CRYPT_OK on success
   ','line_number':249,'multiline':True]
['text':'* divide by two
      @param  a   The integer to divide (shift right)
      @param  b   The destination
      @return CRYPT_OK on success
   ','line_number':258,'multiline':True]
['text':'* Get remainder (small value)
      @param  a    The integer to reduce
      @param  b    The modulus (upto bits_per_digit in length)
      @param  c    The destination for the residue
      @return CRYPT_OK on success
   ','line_number':265,'multiline':True]
['text':'* gcd
      @param  a     The first integer
      @param  b     The second integer
      @param  c     The destination for (a, b)
      @return CRYPT_OK on success
   ','line_number':273,'multiline':True]
['text':'* lcm
      @param  a     The first integer
      @param  b     The second integer
      @param  c     The destination for [a, b]
      @return CRYPT_OK on success
   ','line_number':281,'multiline':True]
['text':'* Modular multiplication
      @param  a     The first source
      @param  b     The second source
      @param  c     The modulus
      @param  d     The destination (a*b mod c)
      @return CRYPT_OK on success
   ','line_number':289,'multiline':True]
['text':'* Modular squaring
      @param  a     The first source
      @param  b     The modulus
      @param  c     The destination (a*a mod b)
      @return CRYPT_OK on success
   ','line_number':298,'multiline':True]
['text':'* Modular inversion
      @param  a     The value to invert
      @param  b     The modulus
      @param  c     The destination (1/a mod b)
      @return CRYPT_OK on success
   ','line_number':306,'multiline':True]
['text':' ---- reduction ---- ','line_number':314,'multiline':True]
['text':'* setup Montgomery
       @param a  The modulus
       @param b  The destination for the reduction digit
       @return CRYPT_OK on success
   ','line_number':316,'multiline':True]
['text':'* get normalization value
       @param a   The destination for the normalization value
       @param b   The modulus
       @return  CRYPT_OK on success
   ','line_number':323,'multiline':True]
['text':'* reduce a number
       @param a   The number [and dest] to reduce
       @param b   The modulus
       @param c   The value "b" from montgomery_setup()
       @return CRYPT_OK on success
   ','line_number':330,'multiline':True]
['text':'* clean up  (frees memory)
       @param a   The value "b" from montgomery_setup()
       @return CRYPT_OK on success
   ','line_number':338,'multiline':True]
['text':' ---- exponentiation ---- ','line_number':344,'multiline':True]
['text':'* Modular exponentiation
       @param a    The base integer
       @param b    The power (can be negative) integer
       @param c    The modulus integer
       @param d    The destination
       @return CRYPT_OK on success
   ','line_number':346,'multiline':True]
['text':'* Primality testing
       @param a     The integer to test
       @param b     The number of Miller-Rabin tests that shall be executed
       @param c     The destination of the result (FP_YES if prime)
       @return CRYPT_OK on success
   ','line_number':355,'multiline':True]
['text':' ----  (optional) ecc point math ---- ','line_number':363,'multiline':True]
['text':'* ECC GF(p) point multiplication (from the NIST curves)
       @param k   The integer to multiply the point by
       @param G   The point to multiply
       @param R   The destination for kG
       @param modulus  The modulus for the field
       @param map Boolean indicated whether to map back to affine or not
                  (can be ignored if you work in affine only)
       @return CRYPT_OK on success
   ','line_number':365,'multiline':True]
['text':'* ECC GF(p) point addition
       @param P    The first point
       @param Q    The second point
       @param R    The destination of P + Q
       @param modulus  The modulus
       @param mp   The "b" value from montgomery_setup()
       @return CRYPT_OK on success
   ','line_number':380,'multiline':True]
['text':'* ECC GF(p) point double
       @param P    The first point
       @param R    The destination of 2P
       @param modulus  The modulus
       @param mp   The "b" value from montgomery_setup()
       @return CRYPT_OK on success
   ','line_number':394,'multiline':True]
['text':'* ECC mapping from projective to affine,
       currently uses (x,y,z) => (x/z^2, y/z^3, 1)
       @param P     The point to map
       @param modulus The modulus
       @param mp    The "b" value from montgomery_setup()
       @return CRYPT_OK on success
       @remark The mapping can be different but keep in mind a
               ecc_point only has three integers (x,y,z) so if
               you use a different mapping you have to make it fit.
   ','line_number':406,'multiline':True]
['text':'* Computes kA*A + kB*B = C using Shamir's Trick
       @param A        First point to multiply
       @param kA       What to multiple A by
       @param B        Second point to multiply
       @param kB       What to multiple B by
       @param C        [out] Destination point (can overlap with A or B)
       @param modulus  Modulus for curve
       @return CRYPT_OK on success
   ','line_number':418,'multiline':True]
['text':' ---- (optional) rsa optimized math (for internal CRT) ---- ','line_number':432,'multiline':True]
['text':'* RSA Key Generation
       @param prng     An active PRNG state
       @param wprng    The index of the PRNG desired
       @param size     The size of the key in octets
       @param e        The "e" value (public key).
                       e==65537 is a good choice
       @param key      [out] Destination of a newly created private key pair
       @return CRYPT_OK if successful, upon error all allocated ram is freed
    ','line_number':434,'multiline':True]
['text':'* RSA exponentiation
      @param in       The octet array representing the base
      @param inlen    The length of the input
      @param out      The destination (to be stored in an octet array format)
      @param outlen   The length of the output buffer and the resulting size
                      (zero padded to the size of the modulus)
      @param which    PK_PUBLIC for public RSA and PK_PRIVATE for private RSA
      @param key      The RSA key to use
      @return CRYPT_OK on success
   ','line_number':449,'multiline':True]
['text':' ---- basic math continued ---- ','line_number':463,'multiline':True]
['text':'* Modular addition
      @param  a     The first source
      @param  b     The second source
      @param  c     The modulus
      @param  d     The destination (a + b mod c)
      @return CRYPT_OK on success
   ','line_number':465,'multiline':True]
['text':'* Modular substraction
      @param  a     The first source
      @param  b     The second source
      @param  c     The modulus
      @param  d     The destination (a - b mod c)
      @return CRYPT_OK on success
   ','line_number':474,'multiline':True]
['text':' ---- misc stuff ---- ','line_number':483,'multiline':True]
['text':'* Make a pseudo-random mpi
      @param  a     The mpi to make random
      @param  size  The desired length
      @return CRYPT_OK on success
   ','line_number':485,'multiline':True]
['text':' some handy macros ','line_number':515,'multiline':True]
['text':' ref:         HEAD -> master, tag: v1.18.2 ','line_number':581,'multiline':True]
['text':' git commit:  7e7eb695d581782f04b24dc444cbfde86af59853 ','line_number':582,'multiline':True]
['text':' commit time: 2018-07-01 22:49:01 +0200 ','line_number':583,'multiline':True]
