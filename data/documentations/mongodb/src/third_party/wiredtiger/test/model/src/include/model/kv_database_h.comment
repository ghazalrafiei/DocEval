['text':'-
 * Public Domain 2014-present MongoDB, Inc.
 * Public Domain 2008-2014 WiredTiger, Inc.
 *
 * This is free and unencumbered software released into the public domain.
 *
 * Anyone is free to copy, modify, publish, use, compile, sell, or
 * distribute this software, either in source code form or as a compiled
 * binary, for any purpose, commercial or non-commercial, and by any
 * means.
 *
 * In jurisdictions that recognize copyright laws, the author or authors
 * of this software dedicate any and all copyright interest in the
 * software to the public domain. We make this dedication for the benefit
 * of the public at large and to the detriment of our heirs and
 * successors. We intend this dedication to be an overt act of
 * relinquishment in perpetuity of all present and future rights to this
 * software under copyright law.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 ','line_number':1,'multiline':True]
['text':'
 * kv_database --
 *     A database with key-value tables.
 ','line_number':43,'multiline':True]
['text':'
     * kv_database::kv_database --
     *     Create a new instance.
     ','line_number':50,'multiline':True]
['text':'
     * kv_database::create_checkpoint --
     *     Create a checkpoint. Throw an exception if the name is not unique.
     ','line_number':56,'multiline':True]
['text':'
     * kv_database::create_checkpoint --
     *     Create a checkpoint from custom metadata. Throw an exception if the name is not unique.
     ','line_number':62,'multiline':True]
['text':'
     * kv_database::create_table --
     *     Create and return a new table. Throw an exception if the name is not unique.
     ','line_number':69,'multiline':True]
['text':'
     * kv_database::create_table --
     *     Create and return a new table. Throw an exception if the name is not unique.
     ','line_number':79,'multiline':True]
['text':'
     * kv_database::checkpoint --
     *     Get the checkpoint. Throw an exception if it does not exist.
     ','line_number':85,'multiline':True]
['text':'
     * kv_database::checkpoint --
     *     Get the checkpoint. Throw an exception if it does not exist.
     ','line_number':99,'multiline':True]
['text':'
     * kv_transaction::set_stable_timestamp --
     *     Set the database's stable timestamp, if set.
     ','line_number':105,'multiline':True]
['text':'
     * kv_transaction::stable_timestamp --
     *     Get the database's stable timestamp, if set.
     ','line_number':116,'multiline':True]
['text':'
     * kv_database::contains_table --
     *     Check whether the database contains the given table.
     ','line_number':126,'multiline':True]
['text':'
     * kv_database::table --
     *     Get the table. Throw an exception if it does not exist.
     ','line_number':138,'multiline':True]
['text':'
     * kv_database::table --
     *     Get the table. Throw an exception if it does not exist.
     ','line_number':152,'multiline':True]
['text':'
     * kv_database::begin_transaction --
     *     Start a new transaction.
     ','line_number':163,'multiline':True]
['text':'
     * kv_database::remove_inactive_transaction --
     *     Remove a transaction from the list of active transactions. This should be only called
     *     from within the transaction's commit and rollback functions.
     ','line_number':169,'multiline':True]
['text':'
     * kv_database::txn_snapshot --
     *     Create a transaction snapshot.
     ','line_number':176,'multiline':True]
['text':'
     * kv_database::crash --
     *     Simulate crashing the database.
     ','line_number':182,'multiline':True]
['text':'
     * kv_database::restart --
     *     Simulate restarting the database - either a clean restart or crash and recovery.
     ','line_number':192,'multiline':True]
['text':'
     * kv_database::start --
     *     Simulate starting WiredTiger.
     ','line_number':198,'multiline':True]
['text':'
     * kv_database::rollback_to_stable --
     *     Roll back the database to the latest stable timestamp. This simulates the runtime flavor
     *     of rollback to stable.
     ','line_number':211,'multiline':True]
['text':'
     * kv_database::txn_snapshot --
     *     Create a transaction snapshot. Do not lock, because the caller already has a lock.
     ','line_number':223,'multiline':True]
['text':'
     * kv_database::clear_nolock --
     *     Clear the contents of the database, assuming the relevant locks are already held.
     ','line_number':229,'multiline':True]
['text':'
     * kv_database::rollback_all_nolock --
     *     Rollback all transactions, assuming the relevant locks are already held.
     ','line_number':235,'multiline':True]
['text':'
     * kv_database::rollback_to_stable --
     *     Roll back the database to the latest stable timestamp and transaction snapshot.
     ','line_number':241,'multiline':True]
['text':'
     * kv_database::rollback_to_stable_nolock --
     *     Roll back the database to the latest stable timestamp and transaction snapshot, but
     *     without locking.
     ','line_number':248,'multiline':True]
['text':'
     * kv_database::start_nolock --
     *     Simulate starting WiredTiger, assuming the locks are held.
     ','line_number':256,'multiline':True]
['text':'
     * Locking order: If you need to acquire more than one lock at a time, acquire locks in the
     * order in which they are declared in this file to avoid deadlocks. For example, the tables
     * lock must be acquired before the transactions lock.
     ','line_number':263,'multiline':True]
['text':'
     * Tables and transactions locks must be recursive, because simulating database restart needs to
     * acquire them before calling rollback to abort active transactions - and rollback also needs
     * to acquire both of these locks.
     ','line_number':269,'multiline':True]
['text':' Maps table names to their objects. ','line_number':276,'multiline':True]
['text':' Key: checkpoint name. ','line_number':283,'multiline':True]
['text':' namespace model ','line_number':289,'multiline':True]
