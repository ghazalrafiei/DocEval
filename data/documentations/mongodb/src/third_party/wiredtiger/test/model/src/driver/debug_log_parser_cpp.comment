['text':'-
 * Public Domain 2014-present MongoDB, Inc.
 * Public Domain 2008-2014 WiredTiger, Inc.
 *
 * This is free and unencumbered software released into the public domain.
 *
 * Anyone is free to copy, modify, publish, use, compile, sell, or
 * distribute this software, either in source code form or as a compiled
 * binary, for any purpose, commercial or non-commercial, and by any
 * means.
 *
 * In jurisdictions that recognize copyright laws, the author or authors
 * of this software dedicate any and all copyright interest in the
 * software to the public domain. We make this dedication for the benefit
 * of the public at large and to the detriment of our heirs and
 * successors. We intend this dedication to be an overt act of
 * relinquishment in perpetuity of all present and future rights to this
 * software under copyright law.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 ','line_number':1,'multiline':True]
['text':'
 * from_json --
 *     Parse the given log entry.
 ','line_number':44,'multiline':True]
['text':'
 * from_json --
 *     Parse the given log entry.
 ','line_number':54,'multiline':True]
['text':'
 * from_json --
 *     Parse the given log entry.
 ','line_number':69,'multiline':True]
['text':'
 * from_json --
 *     Parse the given log entry.
 ','line_number':81,'multiline':True]
['text':'
 * from_json --
 *     Parse the given log entry.
 ','line_number':92,'multiline':True]
['text':'
 * from_debug_log --
 *     Parse the given debug log entry.
 ','line_number':104,'multiline':True]
['text':'
 * from_debug_log --
 *     Parse the given debug log entry.
 ','line_number':123,'multiline':True]
['text':'
 * from_debug_log --
 *     Parse the given debug log entry.
 ','line_number':142,'multiline':True]
['text':'
 * from_debug_log --
 *     Parse the given debug log entry.
 ','line_number':164,'multiline':True]
['text':'
 * from_debug_log --
 *     Parse the given debug log entry.
 ','line_number':184,'multiline':True]
['text':'
 * debug_log_parser::table_by_fileid --
 *     Find a table by the file ID.
 ','line_number':211,'multiline':True]
['text':' Remove the WT_LOGOP_IGNORE bit from the file ID. ','line_number':218,'multiline':True]
['text':'
 * debug_log_parser::metadata_apply --
 *     Apply the given operation to the model.
 ','line_number':226,'multiline':True]
['text':' Parse the configuration string. ','line_number':238,'multiline':True]
['text':' Remember the metadata. ','line_number':242,'multiline':True]
['text':' Special handling for column groups. ','line_number':245,'multiline':True]
['text':' Establish mapping from the file ID to the table name. ','line_number':254,'multiline':True]
['text':' Create the table, if it does not exist. ','line_number':260,'multiline':True]
['text':' Establish mapping from the file ID to the table object. ','line_number':274,'multiline':True]
['text':' Special handling for files. ','line_number':278,'multiline':True]
['text':' Special handling for LSM. ','line_number':285,'multiline':True]
['text':' Special handling for tables. ','line_number':289,'multiline':True]
['text':' There is currently nothing to do. The table will get created with the colgroup. ','line_number':291,'multiline':True]
['text':' Special handling for the system prefix. ','line_number':294,'multiline':True]
['text':' Set the base write generation. ','line_number':297,'multiline':True]
['text':' Handle checkpoints. ','line_number':302,'multiline':True]
['text':'
             * WiredTiger uses the following naming conventions:
             *     - system:checkpoint, system:checkpoint_snapshot, system:oldest, etc., for
             *       nameless checkpoints
             *     - system:checkpoint.NAME, system:checkpoint_snapshot.NAME, etc., for named
             *       checkpoints
             *
             * We don't need to handle these kinds of metadata differently as the config strings
             * within them have different names, so we just build one unified configuration map from
             * all of them.
             ','line_number':304,'multiline':True]
['text':' If this is a named checkpoint, the name follows the '.' character. ','line_number':316,'multiline':True]
['text':' Accumulate checkpoint metadata for future handling. ','line_number':320,'multiline':True]
['text':' Unsupported system URI. ','line_number':329,'multiline':True]
['text':' Otherwise this is an unsupported URI type. ','line_number':334,'multiline':True]
['text':'
 * debug_log_parser::metadata_checkpoint_apply --
 *     Handle the given checkpoint metadata operation.
 ','line_number':339,'multiline':True]
['text':' Get the stable timestamp. ','line_number':347,'multiline':True]
['text':' Get the write generation number. ','line_number':352,'multiline':True]
['text':' Get the transaction snapshot. ','line_number':355,'multiline':True]
['text':' Create the checkpoint. ','line_number':374,'multiline':True]
['text':'
 * debug_log_parser::apply --
 *     Apply the given operation to the model.
 ','line_number':378,'multiline':True]
['text':' Handle metadata operations. ','line_number':385,'multiline':True]
['text':' Find the table. ','line_number':391,'multiline':True]
['text':' Parse the key and the value. ','line_number':394,'multiline':True]
['text':' Perform the operation. ','line_number':398,'multiline':True]
['text':'
 * debug_log_parser::apply --
 *     Apply the given operation to the model.
 ','line_number':402,'multiline':True]
['text':' Handle metadata operations. ','line_number':409,'multiline':True]
['text':' Find the table. ','line_number':415,'multiline':True]
['text':' Parse the key. ','line_number':418,'multiline':True]
['text':' Perform the operation. ','line_number':421,'multiline':True]
['text':'
 * debug_log_parser::apply --
 *     Apply the given operation to the model.
 ','line_number':425,'multiline':True]
['text':' Handle the prepare operation. ','line_number':432,'multiline':True]
['text':' Handle the commit of a prepared transaction. ','line_number':438,'multiline':True]
['text':' Otherwise it is just an operation to set the commit timestamp. ','line_number':446,'multiline':True]
['text':'
 * debug_log_parser::apply --
 *     Apply the given operation to the model.
 ','line_number':450,'multiline':True]
['text':' We find this record when the database starts up, either normally or after a crash. ','line_number':457,'multiline':True]
['text':'
 * debug_log_parser::begin_transaction --
 *     Begin a transaction.
 ','line_number':462,'multiline':True]
['text':'
 * debug_log_parser::commit_transaction --
 *     Commit/finalize a transaction.
 ','line_number':477,'multiline':True]
['text':' Commit the transaction if it has not yet been committed. ','line_number':489,'multiline':True]
['text':' Process the checkpoint metadata, if there are any associated with the transaction. ','line_number':493,'multiline':True]
['text':'
 * from_debug_log_helper_args --
 *     Arguments for the helper function.
 ','line_number':502,'multiline':True]
['text':'
     * from_debug_log_helper_args::from_debug_log_helper_args --
     *     Create an instance of this struct.
     ','line_number':510,'multiline':True]
['text':'
 * from_debug_log_helper --
 *     Parse the debug log into the model - a helper function.
 ','line_number':520,'multiline':True]
['text':' Get the basic record info, including the record type. ','line_number':533,'multiline':True]
['text':' Process supported record types. ','line_number':540,'multiline':True]
['text':' The commit entry, which contains the list of operations in the transaction. ','line_number':545,'multiline':True]
['text':' Start the transaction. ','line_number':550,'multiline':True]
['text':' Iterate over the list of operations. ','line_number':553,'multiline':True]
['text':' Get the operation record's type and size. ','line_number':557,'multiline':True]
['text':' Parse and apply the operation. ','line_number':562,'multiline':True]
['text':' The system entry, which contains the list of system-level operations. ','line_number':598,'multiline':True]
['text':' Get the operation record's type and size. ','line_number':602,'multiline':True]
['text':' Parse and apply the operation. ','line_number':607,'multiline':True]
['text':' Silently ignore unsupported operations. ','line_number':618,'multiline':True]
['text':' Ignored record types. ','line_number':628,'multiline':True]
['text':'
 * debug_log_parser::from_debug_log --
 *     Parse the debug log into the model. This function must be called after opening the database
 *     but before performing any writes, because otherwise the debug log may not contain records of
 *     the most recent operations.
 ','line_number':638,'multiline':True]
['text':'
     * Simulate the database starting up. As this function is called right after the database
     * started prior to verification, WiredTiger would have had run rollback to stable by now, even
     * though we would not see it in the debug log. So simulate the database startup, as it has
     * already happened.
     ','line_number':663,'multiline':True]
['text':'
 * debug_log_parser::from_json --
 *     Parse the debug log JSON file into the model. The input debug log must be printed to JSON
 *     after opening the database but before performing any writes, because it may otherwise miss
 *     most recent operations.
 ','line_number':672,'multiline':True]
['text':' Load the JSON from the provided file. ','line_number':683,'multiline':True]
['text':' The debug log JSON file is structured as an array of log entries. ','line_number':687,'multiline':True]
['text':' Now parse each individual entry. ','line_number':691,'multiline':True]
['text':' The commit entry contains full description of a transaction, including all
         * operations. ','line_number':698,'multiline':True]
['text':' Begin the transaction. ','line_number':701,'multiline':True]
['text':' Replay all operations. ','line_number':704,'multiline':True]
['text':' Row-store operations. ','line_number':708,'multiline':True]
['text':' Transaction operations. ','line_number':722,'multiline':True]
['text':' Operations that we can skip... for now. ','line_number':728,'multiline':True]
['text':' Column-store operations (unsupported). ','line_number':732,'multiline':True]
['text':' Commit/finalize the transaction. ','line_number':739,'multiline':True]
['text':' Handle the relevant system entries. ','line_number':744,'multiline':True]
['text':' Replay all supported system operations. ','line_number':747,'multiline':True]
['text':' Previous LSN. ','line_number':751,'multiline':True]
['text':' Backup IDs. ','line_number':757,'multiline':True]
['text':' Nothing to do. ','line_number':759,'multiline':True]
['text':' Silently ignore the other operation types. ','line_number':761,'multiline':True]
['text':' Ignore these fields. ','line_number':767,'multiline':True]
['text':'
     * Simulate the database starting up.
     *
     * There are two cases, both of which require us to do this:
     *     - If the database is not running while we are loading the model, it will start before the
     *       verification and run rollback to stable. So do that here in anticipation.
     *     - If the database has just started prior to loading the model, it would have had run
     *       rollback to stable by now, but we would not have seen the corresponding log record, so
     *       simulate the database startup now as it has already happened.
     ','line_number':775,'multiline':True]
['text':' namespace model ','line_number':788,'multiline':True]
