['text':'-
 * Public Domain 2014-present MongoDB, Inc.
 * Public Domain 2008-2014 WiredTiger, Inc.
 *
 * This is free and unencumbered software released into the public domain.
 *
 * Anyone is free to copy, modify, publish, use, compile, sell, or
 * distribute this software, either in source code form or as a compiled
 * binary, for any purpose, commercial or non-commercial, and by any
 * means.
 *
 * In jurisdictions that recognize copyright laws, the author or authors
 * of this software dedicate any and all copyright interest in the
 * software to the public domain. We make this dedication for the benefit
 * of the public at large and to the detriment of our heirs and
 * successors. We intend this dedication to be an overt act of
 * relinquishment in perpetuity of all present and future rights to this
 * software under copyright law.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 ','line_number':1,'multiline':True]
['text':' Get an instance of timestamp_manager class. ','line_number':42,'multiline':True]
['text':' Protect against unexpectedly long hex strings. ','line_number':74,'multiline':True]
['text':' Check that the timestamp string has valid hexadecimal characters. ','line_number':78,'multiline':True]
['text':' Remove leading and trailing spaces from a string. ','line_number':89,'multiline':True]
['text':' Parse config string to a config map. ','line_number':98,'multiline':True]
['text':'
     * Convert the config string to a map. For instance if the config string is 'read_timestamp=15'.
     * Then conversion to a map would look like {'read_timestamp' = '15'}.
     ','line_number':110,'multiline':True]
['text':' Ignore the string if it's empty. This will occur if extra commas are included. ','line_number':116,'multiline':True]
['text':' Get rid of the unsupported ops. ','line_number':125,'multiline':True]
['text':' Ensure that the elements in the config_map also exist in the supported_ops vector. ','line_number':132,'multiline':True]
['text':'
 * Validate both oldest and stable timestamps.
 * 1) Validation fails if Illegal timestamp value is passed (if less than or equal to 0).
 *    This check is performed by the validate_hex_value function in this file.
 * 2) It is a no-op to set the oldest or stable timestamps behind the global
 *    values. Hence, ignore and continue validating.
 * 3) Validation fails if oldest is greater than the stable timestamp.
 ','line_number':140,'multiline':True]
['text':' No need to validate timestamps if timestamps are not passed in the config. ','line_number':152,'multiline':True]
['text':' If config has oldest timestamp ','line_number':158,'multiline':True]
['text':' It is a no-op to set the new oldest timestamps behind the current oldest timestamp. ','line_number':160,'multiline':True]
['text':' If config has stable timestamp ','line_number':165,'multiline':True]
['text':' It is a no-op to set the new stable timestamps behind the current stable timestamp. ','line_number':167,'multiline':True]
['text':' No need to validate timestamps if stable or/and oldest were behind the global values. ','line_number':172,'multiline':True]
['text':' No need to validate timestamps if there is no new and no current oldest timestamp. ','line_number':176,'multiline':True]
['text':' No need to validate timestamps if there is no new and no current stable timestamp. ','line_number':180,'multiline':True]
['text':'
     * If the oldest timestamp was not passed in the config or was behind the current oldest
     * timestamp, modify the new_oldest_ts to the current oldest timestamp.
     ','line_number':184,'multiline':True]
['text':'
     * If the stable timestamp was not passed in the config or was behind the current stable
     * timestamp, modify the new_stable_ts to the current stable timestamp
     ','line_number':191,'multiline':True]
['text':' Validation fails if oldest is greater than the stable timestamp. ','line_number':198,'multiline':True]
['text':'
 * Validate durable timestamp.
 * 1) Validation fails if Illegal timestamp value is passed (if less than or equal to 0).
 *    This check is performed by the validate_hex_value function in this file.
 ','line_number':207,'multiline':True]
['text':' If durable timestamp was not passed in the config, no validation is needed. ','line_number':216,'multiline':True]
['text':'
 * Validate the read timestamp. The constraints on the read timestamp are:
 * 1) The read timestamp can only be set before a transaction is prepared.
 * 2) Read timestamps can only be set once.
 * 3) The read timestamp must be greater than or equal to the oldest timestamp unless rounding
 * the read timestamp is enabled.
 ','line_number':223,'multiline':True]
['text':'
     * The read timestamp can't be set after a transaction is prepared. However, prepared timestamp
     * can be set before the read timestamp.
     ','line_number':233,'multiline':True]
['text':' Read timestamps can't change once set. ','line_number':240,'multiline':True]
['text':'
     * We cannot set the read timestamp to be earlier than the oldest timestamp if we're not
     * rounding to the oldest.
     ','line_number':244,'multiline':True]
['text':'
 * Validate the commit timestamp. The constraints on the read timestamp are:
 * For a non-prepared transaction:
 * - The commit_ts cannot be less than the first_commit_timestamp.
 * - The commit_ts cannot be less than the oldest timestamp.
 * - The commit timestamp must be after the stable timestamp.
 * For a prepared transaction:
 * - The commit_ts cannot be less than the prepared_ts unless rounding
 *   the prepare timestamp is enabled.
 * Note: If a prepared timestamp was given in the transaction, then the transaction has to be
 * prepared before commit timestamp is set.
 ','line_number':258,'multiline':True]
['text':'
             * We cannot set the commit timestamp to be earlier than the first commit timestamp when
             * setting the commit timestamp multiple times within a transaction.
             ','line_number':276,'multiline':True]
['text':' The commit timestamp should not be less than the oldest timestamp. ','line_number':290,'multiline':True]
['text':' The commit timestamp must be after the stable timestamp. ','line_number':300,'multiline':True]
['text':' The commit timestamp must be greater than the latest active read timestamp. ','line_number':309,'multiline':True]
['text':'
         * For a prepared transaction, the commit timestamp should not be less than the prepare
         * timestamp. Also, the commit timestamp cannot be set before the transaction has actually
         * been prepared.
         *
         * If the commit timestamp is less than the oldest timestamp and the transaction is
         * configured to roundup timestamps of a prepared transaction, then we will roundup the
         * commit timestamp to the prepare timestamp of the transaction.
         ','line_number':318,'multiline':True]
['text':'
 * Validate the prepare timestamp. The constraints on the prepare timestamp are:
 * - Cannot set the prepared timestamp if the transaction is already prepared.
 * - Cannot set prepared timestamp more than once.
 * - Commit timestamp should not have been set before the prepare timestamp.
 * - Prepare timestamp must be greater than the latest active read timestamp.
 * - Prepare timestamp cannot be less than the stable timestamp unless rounding
 *   the prepare timestamp is enabled.
 ','line_number':343,'multiline':True]
['text':' Cannot set the prepared timestamp if the transaction is already prepared. ','line_number':355,'multiline':True]
['text':' A prepared timestamp should not have been set at this point. ','line_number':360,'multiline':True]
['text':' Commit timestamp should not have been set before the prepare timestamp. ','line_number':364,'multiline':True]
['text':' The prepare timestamp must be greater than the latest active read timestamp. ','line_number':370,'multiline':True]
['text':'
     * Prepare timestamp cannot be less than the stable timestamp unless rounding the prepare
     * timestamp is enabled.
     ','line_number':378,'multiline':True]
['text':'
 * Validate the durable timestamp. The constraints on the durable timestamp are:
 * - Durable timestamp should not be specified for non-prepared transaction.
 * - Commit timestamp is required before setting a durable timestamp.
 * - The durable timestamp should not be less than the oldest timestamp.
 * - The durable timestamp must be after the stable timestamp.
 * - The durable timestamp should not be less than the commit timestamp.
 ','line_number':393,'multiline':True]
['text':' Durable timestamp should not be specified for non-prepared transaction. ','line_number':405,'multiline':True]
['text':' Commit timestamp is required before setting a durable timestamp. ','line_number':410,'multiline':True]
['text':' The durable timestamp should not be less than the oldest timestamp. ','line_number':414,'multiline':True]
['text':' The durable timestamp must be after the stable timestamp. ','line_number':424,'multiline':True]
['text':' The durable timestamp should not be less than the commit timestamp. ','line_number':433,'multiline':True]
