['text':'!/usr/bin/env python','line_number':1,'multiline':False]
['text':'','line_number':2,'multiline':False]
['text':' Public Domain 2014-present MongoDB, Inc.','line_number':3,'multiline':False]
['text':' Public Domain 2008-2014 WiredTiger, Inc.','line_number':4,'multiline':False]
['text':'','line_number':5,'multiline':False]
['text':' This is free and unencumbered software released into the public domain.','line_number':6,'multiline':False]
['text':'','line_number':7,'multiline':False]
['text':' Anyone is free to copy, modify, publish, use, compile, sell, or','line_number':8,'multiline':False]
['text':' distribute this software, either in source code form or as a compiled','line_number':9,'multiline':False]
['text':' binary, for any purpose, commercial or non-commercial, and by any','line_number':10,'multiline':False]
['text':' means.','line_number':11,'multiline':False]
['text':'','line_number':12,'multiline':False]
['text':' In jurisdictions that recognize copyright laws, the author or authors','line_number':13,'multiline':False]
['text':' of this software dedicate any and all copyright interest in the','line_number':14,'multiline':False]
['text':' software to the public domain. We make this dedication for the benefit','line_number':15,'multiline':False]
['text':' of the public at large and to the detriment of our heirs and','line_number':16,'multiline':False]
['text':' successors. We intend this dedication to be an overt act of','line_number':17,'multiline':False]
['text':' relinquishment in perpetuity of all present and future rights to this','line_number':18,'multiline':False]
['text':' software under copyright law.','line_number':19,'multiline':False]
['text':'','line_number':20,'multiline':False]
['text':' THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,','line_number':21,'multiline':False]
['text':' EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF','line_number':22,'multiline':False]
['text':' MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.','line_number':23,'multiline':False]
['text':' IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR','line_number':24,'multiline':False]
['text':' OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,','line_number':25,'multiline':False]
['text':' ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR','line_number':26,'multiline':False]
['text':' OTHER DEALINGS IN THE SOFTWARE.','line_number':27,'multiline':False]
['text':'','line_number':28,'multiline':False]
['text':' test_tiered20.py','line_number':29,'multiline':False]
['text':'    Test to check for conflicts in writing to the cloud.','line_number':30,'multiline':False]
['text':' Return a boolean string that is acceptable for WT configuration.','line_number':36,'multiline':False]
['text':' For tiered scenarios, we are asking for a short local retention (local files are removed promptly),','line_number':48,'multiline':False]
['text':' and to not fail if we get a flush error.  A failure in this sense would result in an assertion,','line_number':49,'multiline':False]
['text':' which crashes the test suite.  Better that we continue, and we can detect that the flush','line_number':50,'multiline':False]
['text':' actually failed by other means.','line_number':51,'multiline':False]
['text':' Do a regular checkpoint first, technically shouldn't be needed?','line_number':65,'multiline':False]
['text':' We should be able to do this test for any tiered scenario, not just dir_store.','line_number':77,'multiline':False]
['text':' Remove this 'if' and comment when FIXME-WT-11004 is finished.','line_number':78,'multiline':False]
['text':' For any scenario, we should be able to fully drop and then recreate a table.','line_number':82,'multiline':False]
['text':' For tiered scenarios only, we have specific tests that deal with files that','line_number':86,'multiline':False]
['text':' have been shared to the bucket.','line_number':87,'multiline':False]
['text':' We should be able to drop locally (not removing shared), and then','line_number':91,'multiline':False]
['text':' we should get an error if we create again.  Having an error protects us','line_number':92,'multiline':False]
['text':' from clobbering objects in a bucket that might apply to a previous test','line_number':93,'multiline':False]
['text':' or run.','line_number':94,'multiline':False]
['text':' For this test, we don't clean up what's in the cloud, only clean up locally.','line_number':96,'multiline':False]
['text':' Now, we're creating the same URI.  Even though there should be no local','line_number':99,'multiline':False]
['text':' files or metadata, it should detect existing items in the cloud.','line_number':100,'multiline':False]
['text':' We expect the tiered create will return an EEXIST, with no output message.','line_number':101,'multiline':False]
['text':' Now, create another WT home directory and link the buckets together.','line_number':106,'multiline':False]
['text':' This emulates multiple systems sharing the same AWS bucket.','line_number':107,'multiline':False]
['text':' We want to make sure that there is no way to have a collision when','line_number':108,'multiline':False]
['text':' tiered tables are created, even when they are of the same name and prefix.','line_number':109,'multiline':False]
['text':'','line_number':110,'multiline':False]
['text':' In a production setup, multiple systems should never have the same prefix,','line_number':111,'multiline':False]
['text':' but we don't want to rely on that.  Once an object is written to a bucket','line_number':112,'multiline':False]
['text':' it should never be overwritten.  It can only be removed (and yes, then','line_number':113,'multiline':False]
['text':' the name would be available in the storage)','line_number':114,'multiline':False]
['text':' save the first session','line_number':116,'multiline':False]
['text':' dir_store','line_number':120,'multiline':False]
['text':' Create URIs on each connection (as if on two systems).','line_number':124,'multiline':False]
['text':' This should not conflict, as nothing has been pushed to the shared storage.','line_number':125,'multiline':False]
['text':' Make sure the file systems in the first connection.','line_number':137,'multiline':False]
['text':' The first flush from the first "system" should succeed','line_number':140,'multiline':False]
['text':' dir_store','line_number':142,'multiline':False]
['text':' The second flush from the other "system" should detect the conflict.','line_number':149,'multiline':False]
['text':' Normally such a failure would crash Python, but we've changed our','line_number':150,'multiline':False]
['text':' configuration such that we continue after the fail to write.','line_number':151,'multiline':False]
['text':' We'll check for the error message we expect in the error output.','line_number':152,'multiline':False]
['text':' At this point, in dir_store, we can verify that the original copy','line_number':156,'multiline':False]
['text':' is still in place, and that the version from the second directory','line_number':157,'multiline':False]
['text':' did not overwrite it.','line_number':158,'multiline':False]
['text':' dir_store','line_number':159,'multiline':False]
['text':' We're done with the second connection.','line_number':164,'multiline':False]
['text':' We'd like to enable the following code to make sure the local file gets removed.','line_number':168,'multiline':False]
['text':' Removing the local file guarantees that we'd go to the cloud to get the data.','line_number':169,'multiline':False]
['text':' However, this loop appears to last forever, it seems to keep the','line_number':170,'multiline':False]
['text':' file around because the file handle is in use.  Even inserting a','line_number':171,'multiline':False]
['text':' self.reopen_conn() into the loop does not fix it.  FIXME-WT-10953.','line_number':172,'multiline':False]
['text':'','line_number':173,'multiline':False]
['text':'    # Make sure the local file is removed, so we actually will go to the','line_number':174,'multiline':False]
['text':'    # cloud the next time this URI is accessed.','line_number':175,'multiline':False]
['text':'    while os.path.exists(uri_b_local_file1):','line_number':176,'multiline':False]
['text':'        self.pr('sleeping...')','line_number':177,'multiline':False]
['text':'        time.sleep(1)','line_number':178,'multiline':False]
['text':'    self.pr('{}: file is removed, continuing'.format(uri_b_local_file1))','line_number':179,'multiline':False]
['text':' Meanwhile, the first system should not have any trouble accessing','line_number':181,'multiline':False]
['text':' the data via the cloud.','line_number':182,'multiline':False]
