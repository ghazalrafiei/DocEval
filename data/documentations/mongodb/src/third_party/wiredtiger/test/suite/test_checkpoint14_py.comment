['text':'!/usr/bin/env python','line_number':1,'multiline':False]
['text':'','line_number':2,'multiline':False]
['text':' Public Domain 2014-present MongoDB, Inc.','line_number':3,'multiline':False]
['text':' Public Domain 2008-2014 WiredTiger, Inc.','line_number':4,'multiline':False]
['text':'','line_number':5,'multiline':False]
['text':' This is free and unencumbered software released into the public domain.','line_number':6,'multiline':False]
['text':'','line_number':7,'multiline':False]
['text':' Anyone is free to copy, modify, publish, use, compile, sell, or','line_number':8,'multiline':False]
['text':' distribute this software, either in source code form or as a compiled','line_number':9,'multiline':False]
['text':' binary, for any purpose, commercial or non-commercial, and by any','line_number':10,'multiline':False]
['text':' means.','line_number':11,'multiline':False]
['text':'','line_number':12,'multiline':False]
['text':' In jurisdictions that recognize copyright laws, the author or authors','line_number':13,'multiline':False]
['text':' of this software dedicate any and all copyright interest in the','line_number':14,'multiline':False]
['text':' software to the public domain. We make this dedication for the benefit','line_number':15,'multiline':False]
['text':' of the public at large and to the detriment of our heirs and','line_number':16,'multiline':False]
['text':' successors. We intend this dedication to be an overt act of','line_number':17,'multiline':False]
['text':' relinquishment in perpetuity of all present and future rights to this','line_number':18,'multiline':False]
['text':' software under copyright law.','line_number':19,'multiline':False]
['text':'','line_number':20,'multiline':False]
['text':' THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,','line_number':21,'multiline':False]
['text':' EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF','line_number':22,'multiline':False]
['text':' MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.','line_number':23,'multiline':False]
['text':' IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR','line_number':24,'multiline':False]
['text':' OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,','line_number':25,'multiline':False]
['text':' ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR','line_number':26,'multiline':False]
['text':' OTHER DEALINGS IN THE SOFTWARE.','line_number':27,'multiline':False]
['text':' test_checkpoint14.py','line_number':37,'multiline':False]
['text':'','line_number':38,'multiline':False]
['text':' Make sure each checkpoint has its own snapshot by creating two successive','line_number':39,'multiline':False]
['text':' inconsistent checkpoints and reading both of them.','line_number':40,'multiline':False]
['text':' This doesn't work because there's no way to open the first unnamed checkpoint.','line_number':56,'multiline':False]
['text':'('un', dict(first_checkpoint=None, second_checkpoint='second_checkpoint')),','line_number':57,'multiline':False]
['text':' "expected" is a list of maps from values to counts of values.','line_number':72,'multiline':False]
['text':'self.session.begin_transaction()','line_number':77,'multiline':False]
['text':'self.session.rollback_transaction()','line_number':83,'multiline':False]
['text':' Create a table.','line_number':90,'multiline':False]
['text':' Write some baseline data.','line_number':106,'multiline':False]
['text':' Write this data out now so we aren't waiting for it while trying to','line_number':108,'multiline':False]
['text':' race with the later data.','line_number':109,'multiline':False]
['text':' Write some more data, and hold the transaction open.','line_number':112,'multiline':False]
['text':' Checkpoint in the background.','line_number':119,'multiline':False]
['text':' Wait for checkpoint to start before committing.','line_number':128,'multiline':False]
['text':' Rinse and repeat.','line_number':141,'multiline':False]
['text':' Checkpoint in the background.','line_number':146,'multiline':False]
['text':' Wait for checkpoint to start before committing.','line_number':155,'multiline':False]
['text':' Other tests check for whether the visibility of a partially-written transaction','line_number':168,'multiline':False]
['text':' is handled correctly. Here we're interested in whether the visibility mechanism','line_number':169,'multiline':False]
['text':' is using the right snapshot for the checkpoint we're reading. So insist that we','line_number':170,'multiline':False]
['text':' not see the value_b transaction in the first checkpoint, or the value_c transaction','line_number':171,'multiline':False]
['text':' in the second checkpoint. If test machine lag causes either transaction to commit','line_number':172,'multiline':False]
['text':' before the checkpoint starts, we'll see value_b in the first checkpoint and/or','line_number':173,'multiline':False]
['text':' value_c in the second. But also, if we end up using the second checkpoint's snapshot','line_number':174,'multiline':False]
['text':' for the first checkpoint, we'll see value_b. So if this happens more than once in a','line_number':175,'multiline':False]
['text':' blue moon we should probably strengthen the test so we can more reliably distinguish','line_number':176,'multiline':False]
['text':' the cases, probably by doing a third transaction/checkpoint pair.','line_number':177,'multiline':False]
['text':'','line_number':178,'multiline':False]
['text':' If we end up using the first checkpoint's snapshot for reading the second checkpoint,','line_number':179,'multiline':False]
['text':' we'll most likely see no data at all; that would be a serious failure if it happened.','line_number':180,'multiline':False]
['text':' Read the checkpoints.','line_number':182,'multiline':False]
['text':' If we haven't died yet, pretend to crash, and run RTS to see if the','line_number':186,'multiline':False]
['text':' (second) checkpoint was inconsistent. Unfortunately we can't readily','line_number':187,'multiline':False]
['text':' check on both.','line_number':188,'multiline':False]
['text':' Make sure we did get an inconsistent checkpoint.','line_number':191,'multiline':False]
['text':'','line_number':192,'multiline':False]
['text':' Disable this crosscheck until we have a more reliable way to generate inconsistent','line_number':193,'multiline':False]
['text':' checkpoints (checkpoints with a torn transaction) on demand. The current method','line_number':194,'multiline':False]
['text':' waits until the checkpoint has started to begin committing, but there's still a','line_number':195,'multiline':False]
['text':' race where the checkpoint thread starts another checkpoint after the commit is','line_number':196,'multiline':False]
['text':' finished. Consequently, occasional failures occur in the testbed, which are a waste','line_number':197,'multiline':False]
['text':' of everyone's time.','line_number':198,'multiline':False]
['text':'stat_cursor = self.session.open_cursor('statistics:', None, None)','line_number':199,'multiline':False]
['text':'inconsistent_ckpt = stat_cursor[stat.conn.txn_rts_inconsistent_ckpt][2]','line_number':200,'multiline':False]
['text':'stat_cursor.close()','line_number':201,'multiline':False]
['text':'self.assertGreater(inconsistent_ckpt, 0)','line_number':202,'multiline':False]
