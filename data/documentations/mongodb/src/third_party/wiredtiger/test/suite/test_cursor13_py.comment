['text':'!/usr/bin/env python','line_number':1,'multiline':False]
['text':'','line_number':2,'multiline':False]
['text':' Public Domain 2014-present MongoDB, Inc.','line_number':3,'multiline':False]
['text':' Public Domain 2008-2014 WiredTiger, Inc.','line_number':4,'multiline':False]
['text':'','line_number':5,'multiline':False]
['text':' This is free and unencumbered software released into the public domain.','line_number':6,'multiline':False]
['text':'','line_number':7,'multiline':False]
['text':' Anyone is free to copy, modify, publish, use, compile, sell, or','line_number':8,'multiline':False]
['text':' distribute this software, either in source code form or as a compiled','line_number':9,'multiline':False]
['text':' binary, for any purpose, commercial or non-commercial, and by any','line_number':10,'multiline':False]
['text':' means.','line_number':11,'multiline':False]
['text':'','line_number':12,'multiline':False]
['text':' In jurisdictions that recognize copyright laws, the author or authors','line_number':13,'multiline':False]
['text':' of this software dedicate any and all copyright interest in the','line_number':14,'multiline':False]
['text':' software to the public domain. We make this dedication for the benefit','line_number':15,'multiline':False]
['text':' of the public at large and to the detriment of our heirs and','line_number':16,'multiline':False]
['text':' successors. We intend this dedication to be an overt act of','line_number':17,'multiline':False]
['text':' relinquishment in perpetuity of all present and future rights to this','line_number':18,'multiline':False]
['text':' software under copyright law.','line_number':19,'multiline':False]
['text':'','line_number':20,'multiline':False]
['text':' THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,','line_number':21,'multiline':False]
['text':' EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF','line_number':22,'multiline':False]
['text':' MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.','line_number':23,'multiline':False]
['text':' IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR','line_number':24,'multiline':False]
['text':' OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,','line_number':25,'multiline':False]
['text':' ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR','line_number':26,'multiline':False]
['text':' OTHER DEALINGS IN THE SOFTWARE.','line_number':27,'multiline':False]
['text':' Cursor caching tests','line_number':38,'multiline':False]
['text':'','line_number':39,'multiline':False]
['text':' This test uses only row-store (key_format='S') but the cursor-caching code has been reviewed','line_number':40,'multiline':False]
['text':' for dependence on the access method and found to be access-method independent, so rearranging','line_number':41,'multiline':False]
['text':' it to also test column-store is not necessary.','line_number':42,'multiline':False]
['text':' Returns a list: [cursor_cached, cursor_reopened]','line_number':48,'multiline':False]
['text':'','line_number':49,'multiline':False]
['text':' We want the statistics for operations triggered from our program. The challenge is that','line_number':50,'multiline':False]
['text':' eviction threads may cache history store cursors in the background. We address this by','line_number':51,'multiline':False]
['text':' subtracting out operations from the history store file. This is tricky because we can't','line_number':52,'multiline':False]
['text':' atomically check the connections stats and the history store stats.  So we look at the','line_number':53,'multiline':False]
['text':' history store stats before and after the connection stats and only accept a result where','line_number':54,'multiline':False]
['text':' the history store stats haven't changed.','line_number':55,'multiline':False]
['text':' Fail if we haven't been able to get stable history store stats after too many attempts.','line_number':78,'multiline':False]
['text':' Seems impossible, but better to check than to have an accidental infinite loop.','line_number':79,'multiline':False]
['text':' Returns a list: [cursor_sweep, cursor_sweep_buckets,','line_number':84,'multiline':False]
['text':'                  cursor_sweep_examined, cursor_sweep_closed]','line_number':85,'multiline':False]
['text':' Override other cursor tests with cursors cached.','line_number':116,'multiline':False]
['text':' The SimpleDataSet uses simple tables, that have no column groups or','line_number':163,'multiline':False]
['text':' indices. Thus, these tables will be cached. The more complex data sets','line_number':164,'multiline':False]
['text':' are not simple, so are not cached and not included in this test.','line_number':165,'multiline':False]
['text':' At this point, we've cached one cursor.','line_number':218,'multiline':False]
['text':' Reopen/close many times, with multiple cursors','line_number':220,'multiline':False]
['text':' We expect a cursor to be reopened if we did the','line_number':222,'multiline':False]
['text':' create operation above or if this is the second or later','line_number':223,'multiline':False]
['text':' time through the loop.','line_number':224,'multiline':False]
['text':' With one cursor for this URI already open, we'll only','line_number':228,'multiline':False]
['text':' get a reopened cursor if this is the second or later','line_number':229,'multiline':False]
['text':' time through the loop.','line_number':230,'multiline':False]
['text':' Return if caching was configured at the start of the session','line_number':248,'multiline':False]
['text':' default','line_number':254,'multiline':False]
['text':' Test we can reopen across a verify.','line_number':275,'multiline':False]
['text':' We need an extra cursor open to test all code paths in','line_number':282,'multiline':False]
['text':' this loop.  After the verify (the second or more time through','line_number':283,'multiline':False]
['text':' the loop), the data handle referred to by both cached','line_number':284,'multiline':False]
['text':' cursors will no longer be open.','line_number':285,'multiline':False]
['text':'','line_number':286,'multiline':False]
['text':' The first cursor open will attempt to reopen the','line_number':287,'multiline':False]
['text':' first cached cursor, will see the data handle closed,','line_number':288,'multiline':False]
['text':' thus will close that cursor and open normally.','line_number':289,'multiline':False]
['text':'','line_number':290,'multiline':False]
['text':' The second cursor open (in ds.check()) will attempt the','line_number':291,'multiline':False]
['text':' reopen the second cached cursor, see the data handle now','line_number':292,'multiline':False]
['text':' open and will succeed the reopen.','line_number':293,'multiline':False]
['text':'','line_number':294,'multiline':False]
['text':' This test checks that reopens of cursor using an already','line_number':295,'multiline':False]
['text':' reopened data handle will work.','line_number':296,'multiline':False]
['text':' The cursor cache is unaffected by the drop, and nothing','line_number':311,'multiline':False]
['text':' in the cache should prevent the drop from occurring.','line_number':312,'multiline':False]
['text':' It should still work with different sessions','line_number':323,'multiline':False]
['text':' We should also be able to detect cached cursors','line_number':331,'multiline':False]
['text':' for indices','line_number':332,'multiline':False]
['text':' The index is really open, so we cannot drop the main table.','line_number':339,'multiline':False]
['text':' Same test for indices, but with cursor held by another session.','line_number':346,'multiline':False]
['text':' TODO: try with session that DOES have cache_cursors and another','line_number':347,'multiline':False]
['text':' that does not.','line_number':348,'multiline':False]
['text':' Shared base class for some bigger tests.','line_number':402,'multiline':False]
['text':' set by child classes','line_number':408,'multiline':False]
['text':' Create a large number (self.nuris) of uris, and for each one,','line_number':413,'multiline':False]
['text':' create some number (self.deep) of cached cursors.','line_number':414,'multiline':False]
['text':' Each map entry has a list of the open cursors.','line_number':425,'multiline':False]
['text':' Since we just closed them, we start with none','line_number':426,'multiline':False]
['text':' Keep the range of open cursors between 0 and [deep],','line_number':446,'multiline':False]
['text':' with some random fluctuation','line_number':447,'multiline':False]
['text':'self.tty('stats before = ' + str(begin_stats))','line_number':476,'multiline':False]
['text':' At this point, we'll randomly open/close lots of cursors, keeping','line_number':478,'multiline':False]
['text':' track of how many of each. As long as we don't have more than [deep]','line_number':479,'multiline':False]
['text':' cursors open for each uri, we should always be taking them from','line_number':480,'multiline':False]
['text':' the set of cached cursors.','line_number':481,'multiline':False]
['text':'self.tty('opens = ' + str(self.opencount) + \','line_number':487,'multiline':False]
['text':'         ', closes = ' + str(self.closecount))','line_number':488,'multiline':False]
['text':'self.tty('stats after = ' + str(end_stats))','line_number':489,'multiline':False]
['text':' Set dhandle sweep configuration so that dhandles should be closed within','line_number':495,'multiline':False]
['text':' two seconds of all the cursors for the dhandle being closed (cached).','line_number':496,'multiline':False]
['text':'self.tty('stats before = ' + str(begin_stats))','line_number':512,'multiline':False]
['text':'self.tty('sweep stats before = ' + str(begin_sweep_stats))','line_number':513,'multiline':False]
['text':' Close cursors in half of the range, and don't','line_number':518,'multiline':False]
['text':' use them during this round, so they will be','line_number':519,'multiline':False]
['text':' closed by sweep.','line_number':520,'multiline':False]
['text':' Let the dhandle sweep run and find the closed cursors.','line_number':524,'multiline':False]
['text':' The session cursor sweep runs at most once a second and','line_number':529,'multiline':False]
['text':' traverses a fraction of the cached cursors.  We'll run for','line_number':530,'multiline':False]
['text':' ten seconds with pauses to make sure we see sweep activity.','line_number':531,'multiline':False]
['text':' over time, let sweep run','line_number':541,'multiline':False]
['text':'self.tty('opens = ' + str(self.opencount) + \','line_number':547,'multiline':False]
['text':'         ', closes = ' + str(self.closecount))','line_number':548,'multiline':False]
['text':'self.tty('stats after = ' + str(end_stats))','line_number':549,'multiline':False]
['text':'self.tty('sweep stats after = ' + str(end_sweep_stats))','line_number':550,'multiline':False]
['text':' Although this is subject to tuning parameters, we know that','line_number':554,'multiline':False]
['text':' in an active session, we'll sweep through minimum of 1% of','line_number':555,'multiline':False]
['text':' the cached cursors per second.  We've set this test to run','line_number':556,'multiline':False]
['text':' 5 rounds. In 2 of the 5 rounds (sandwiched between the others),','line_number':557,'multiline':False]
['text':' some of the uris are allowed to close. So during the 'closing rounds'','line_number':558,'multiline':False]
['text':' we'll sweep a minimum of 20% of the uri space, and in the other','line_number':559,'multiline':False]
['text':' rounds we'll be referencing the closed uris again.','line_number':560,'multiline':False]
['text':' We'll pass the test if we see at least 20% of the 'potentially','line_number':562,'multiline':False]
['text':' dead' cursors swept.  There may be more, since the 1% per second','line_number':563,'multiline':False]
['text':' is a minimum.','line_number':564,'multiline':False]
['text':' No strict equality test for the reopen stats. When we've swept','line_number':568,'multiline':False]
['text':' some closed cursors, we'll have fewer reopens. It's different','line_number':569,'multiline':False]
['text':' by approximately the number of swept cursors, but it's less','line_number':570,'multiline':False]
['text':' predictable.','line_number':571,'multiline':False]
['text':' Get a cursor and position it.','line_number':584,'multiline':False]
['text':' An unpositioned cursor cannot be duplicated.','line_number':585,'multiline':False]
['text':' cursor_cached > 100','line_number':593,'multiline':False]
['text':' cursor_reopened > 100','line_number':594,'multiline':False]
