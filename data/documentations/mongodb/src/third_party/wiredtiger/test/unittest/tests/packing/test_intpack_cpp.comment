['text':'-
 * Copyright (c) 2014-present MongoDB, Inc.
 * Copyright (c) 2008-2014 WiredTiger, Inc.
 *	All rights reserved.
 *
 * See the file LICENSE for redistribution information.
 ','line_number':1,'multiline':True]
['text':' This file unit tests the macros and functions contained in intpack_inline.h.','line_number':9,'multiline':False]
['text':'
 * wt_size_check_pack_wrapper --
 *     The WT_SIZE_CHECK_PACK() macro which will directly call return on failure. Creating a wrapper
 *     function thereby ensures that the macro's return call is restricted to this function's scope.
 ','line_number':14,'multiline':True]
['text':'
 * wt_size_check_unpack_wrapper --
 *     The WT_SIZE_CHECK_UNPACK() macro which will directly call return on failure. Creating a
 *     wrapper function thereby ensures that the macro's return call is restricted to this
 *     function's scope.
 ','line_number':26,'multiline':True]
['text':'
 * wt_leading_zeros_wrapper --
 *     This function wraps WT_LEADING_ZEROS() to create a function that returns the number of
 *     leading zeros, rather than requiring a result variable to be passed in
 ','line_number':39,'multiline':True]
['text':'
     * These macros have no type, so assign macros into variables to give them a type.
     ','line_number':92,'multiline':True]
['text':'
     * WT_LEADING_ZEROS uses sizeof(type) if the value is 0, but assumes uint64_t if non-zero, given
     * odd results
     ','line_number':154,'multiline':True]
['text':' 7 leading 0x0ff bytes, if stored as signed 64-bit ','line_number':243,'multiline':True]
['text':' -7 as a signed 8-bit number stored in one byte ','line_number':244,'multiline':True]
['text':' 7 leading 0x0ff bytes, if stored as signed 64-bit ','line_number':259,'multiline':True]
['text':' -42 as a signed 64-bit number stored in one byte ','line_number':260,'multiline':True]
['text':' 6 leading 0x0ff bytes, if stored as signed 64-bit ','line_number':275,'multiline':True]
['text':' 1st byte of -4242 as a signed 64-bit number in two bytes ','line_number':276,'multiline':True]
['text':' 2nd byte of -4242 as a signed 64-bit number in two bytes ','line_number':277,'multiline':True]
['text':'
     * While the code in each SECTION is small, keeping the code in separate SECTIONS makes it
     * easier to determine which test has failed should any fail.
     ','line_number':289,'multiline':True]
['text':'
         * Expected result is 0x80     | 0x07    = 0x87
         *                    (marker)  (value)
         ','line_number':296,'multiline':True]
['text':'
         * 42 = 0x2a
         *
         * Expected result is 0x80     | 0x2a    = 0x0aa
         *                    (marker)  (value)
         ','line_number':305,'multiline':True]
['text':'
         * 256 = 0x100
         * 256 - (POS_1BYTE_MAX + 1) = 256 - 0x40 = 0x00c0
         *
         * Expected result is 0x0c0   | 0x00                = 0x0c0, and  0x0c0
         *                    (marker)  (top bits of value)               (bottom 8 bits of value)
         ','line_number':316,'multiline':True]
['text':'
         * 257 = 0x101
         * 257 - (POS_1BYTE_MAX + 1) = 257 - 0x40 = 0x00c1
         *
         * Expected result is 0x0c0   | 0x00              = 0x0c0, and  0x0c1
         *                    (marker)  (top bits of value)             (bottom 8 bits of value)
         ','line_number':328,'multiline':True]
['text':'
         * 0x1234 - (POS_1BYTE_MAX + 1) = 0x1234 - 0x40 = 0x11f4
         *
         * Expected result is 0x0c0    | 0x11              = 0x0d1, and  0x0f4
         *                    (marker)  (top bits of value)              (bottom 8 bits of value)
         ','line_number':340,'multiline':True]
['text':' value won't fit in two bytes ','line_number':354,'multiline':True]
['text':' value should fit in 8 bytes ','line_number':356,'multiline':True]
['text':'
         * The value that is stored in this case is (0x123456789 - 0x2040) = 0x123454749. For the
         * first byte: 'e' is the marker and '5' is the length in bytes.
         ','line_number':362,'multiline':True]
['text':'
         * -7 = 0xffffffffffffffc0
         * -7 - 0xffffffffffffffc0 = 0x39
         *
         * Expected result is 0x40     | 0x39                     = 0x79
         *                    (marker)  (bottom 6 bits of value)
         ','line_number':371,'multiline':True]
['text':'
         * -42 = 0xffffffffffffffd6
         * -42 - 0xffffffffffffffc0 = 0x16
         *
         * Expected result is 0x40     | 0x16                     = 0x56
         *                    (marker)  (bottom 6 bits of value)
         ','line_number':383,'multiline':True]
['text':'
         * -256 = 0x0ffffffffffffff00
         * -256 - 0x0ffffffffffffdfc0 = 0x1f40
         *
         * Expected result is 0x20     | 0x1f                 = 0x3f, and 0x40
         *                    (marker)  (top bits of value)               (bottom 8 bits of value)
         ','line_number':395,'multiline':True]
['text':'
         * -257 = 0xfffffffffffffeff
         * -257 - 0xffffffffffffdfc0 = 0x1f3f
         *
         * Expected result is 0x20     | 0x1f                 = 0x3f, and 0x3f
         *                    (marker)  (top bits of value)               (bottom 8 bits of value)
         ','line_number':407,'multiline':True]
