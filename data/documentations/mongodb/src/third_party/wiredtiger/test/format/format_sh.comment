['text':'!/bin/bash','line_number':1,'multiline':False]
['text':' Smoke-tests.','line_number':66,'multiline':False]
['text':' Three access methods.','line_number':70,'multiline':False]
['text':' Huffman value encoding.','line_number':75,'multiline':False]
['text':' LSM','line_number':79,'multiline':False]
['text':' Temporarily disabled: FIXME LSM','line_number':80,'multiline':False]
['text':' "$smoke_base_1 file_type=row runs.source=lsm"','line_number':81,'multiline':False]
['text':' Force the statistics server.','line_number':83,'multiline':False]
['text':' Overflow testing.','line_number':86,'multiline':False]
['text':' Default to format.sh directory (assumed to be in a WiredTiger build tree).','line_number':113,'multiline':False]
['text':' Format changes directories, get absolute paths to the CONFIG files.','line_number':131,'multiline':False]
['text':'directory_list[@]}','line_number':135,'multiline':False]
['text':' Home is possibly relative to our current directory and we're about to change directories.','line_number':209,'multiline':False]
['text':' Get an absolute path for home.','line_number':210,'multiline':False]
['text':' From the Bash FAQ, shuffle an array.','line_number':215,'multiline':False]
['text':'directory_list[*]}','line_number':219,'multiline':False]
['text':' RANDOM % (i+1) is biased because of the limited range of $RANDOM','line_number':221,'multiline':False]
['text':' Compensate by using a range which is a multiple of the rand modulus.','line_number':222,'multiline':False]
['text':' If we have a directory of CONFIGs, shuffle it. The directory has to be an absolute path so there','line_number':231,'multiline':False]
['text':' is no additional path checking to do.','line_number':232,'multiline':False]
['text':' Config is possibly relative to our current directory and we're about to change directories.','line_number':239,'multiline':False]
['text':' Get an absolute path for config if it's local.','line_number':240,'multiline':False]
['text':' Move to the format.sh directory (assumed to be in a WiredTiger build tree).','line_number':246,'multiline':False]
['text':' If we haven't already found it, check for the config file (by default it's CONFIG.stress which','line_number':249,'multiline':False]
['text':' lives in the same directory of the WiredTiger build tree as format.sh. We're about to change','line_number':250,'multiline':False]
['text':' directories if we don't find the format binary here, get an absolute path for config if it's','line_number':251,'multiline':False]
['text':' local.','line_number':252,'multiline':False]
['text':' Check for the existence of the format_binary. This script is usually copied by CMake into the','line_number':258,'multiline':False]
['text':' build directory, in which case we can expect to find the binary in the same directory as','line_number':259,'multiline':False]
['text':' format.sh (being the default path value assigned to 'format_bin_dir'). If we can't detect the format','line_number':260,'multiline':False]
['text':' binary, raise an error, as we expect the user to either execute the 'format.sh' script under the','line_number':261,'multiline':False]
['text':' build directory or by passing the format build directory as an argument.','line_number':262,'multiline':False]
['text':'#* } ]] ||','line_number':263,'multiline':False]
['text':' Find the wt binary (required for abort/recovery testing).','line_number':266,'multiline':False]
['text':' We tested for the CONFIG file in the original directory, then in the WiredTiger source directory,','line_number':271,'multiline':False]
['text':' the last place to check is in the WiredTiger build directory. Fail if we don't find it.','line_number':272,'multiline':False]
['text':' skip_known_errors','line_number':287,'multiline':False]
['text':' return 0 - Error found and skip','line_number':288,'multiline':False]
['text':' return 1 - skip_errors flag not set or no (known error) match found','line_number':289,'multiline':False]
['text':' Return if "skip_errors" is not set or -E option is not passed','line_number':292,'multiline':False]
['text':' skip_error_list is a list of errors to skip. Each array entry can have multiple signatures','line_number':297,'multiline':False]
['text':' for finger-grained matching. For example:','line_number':298,'multiline':False]
['text':'','line_number':299,'multiline':False]
['text':'       err_1=("heap-buffer-overflow" "__split_parent")','line_number':300,'multiline':False]
['text':' Loop through the skip list and search in the log file.','line_number':303,'multiline':False]
['text':'skip_error_list[@]}','line_number':304,'multiline':False]
['text':' Tokenize the multi-signature error','line_number':307,'multiline':False]
['text':' Categorize the failures','line_number':319,'multiline':False]
['text':' $1 Log file','line_number':320,'multiline':False]
['text':' Add any important configs to be picked from the detailed failed configuration.','line_number':325,'multiline':False]
['text':'configs[@]}','line_number':328,'multiline':False]
['text':' now loop through the config array','line_number':332,'multiline':False]
['text':' Report a failure.','line_number':350,'multiline':False]
['text':' $1 directory name','line_number':351,'multiline':False]
['text':' Note the directory may not yet exist, only the log file.','line_number':354,'multiline':False]
['text':' DO NOT CURRENTLY SKIP ANY ERRORS.','line_number':358,'multiline':False]
['text':'skip_known_errors $log','line_number':359,'multiline':False]
['text':'skip_ret=$?','line_number':360,'multiline':False]
['text':' Forcibly quit if first-failure configured.','line_number':364,'multiline':False]
['text':' Note the directory may not yet exist, only the log file. If the directory doesn't exist,','line_number':370,'multiline':False]
['text':' quit, we don't have any way to track that we've already reported this failure and it's','line_number':371,'multiline':False]
['text':' not worth the effort to try and figure one out, in all likelihood the configuration is','line_number':372,'multiline':False]
['text':' invalid.','line_number':373,'multiline':False]
['text':' Wait for a process to die. Handle both child and non-child processes.','line_number':386,'multiline':False]
['text':' $1 pid','line_number':387,'multiline':False]
['text':' Return <exit code> of process if child or 127 if non-child','line_number':388,'multiline':False]
['text':' Can still produce "wait: pid XXXX is not a child of this shell" due to process','line_number':395,'multiline':False]
['text':' ending between the steps, can be safely ignored.','line_number':396,'multiline':False]
['text':' Resolve/cleanup completed jobs.','line_number':408,'multiline':False]
['text':' Note the directory may not yet exist, only the log file.','line_number':416,'multiline':False]
['text':' Skip failures we've already reported.','line_number':426,'multiline':False]
['text':' Leave any process waiting for a gdb attach running, but report it as a failure.','line_number':429,'multiline':False]
['text':' Get the process ID. There is a window where the PID might not yet be written, in','line_number':435,'multiline':False]
['text':' which case we ignore the log file. If the job is still running, ignore it unless','line_number':436,'multiline':False]
['text':' we're forcibly quitting. If it's not still running, wait for it and get an exit','line_number':437,'multiline':False]
['text':' status.','line_number':438,'multiline':False]
['text':' Kill the process group to catch any child processes.','line_number':447,'multiline':False]
['text':' Kill the process.','line_number':451,'multiline':False]
['text':' give the parent recording binary a chance to complete if we are using it','line_number':455,'multiline':False]
['text':' Remove jobs we killed, they count as neither success or failure.','line_number':460,'multiline':False]
['text':' give the parent recording binary a chance to complete if we are using it','line_number':467,'multiline':False]
['text':' Process group leader core dump indicates a bug, in contrast to any spurious cores','line_number':470,'multiline':False]
['text':' from killing zombified child processes. This is to guard against spuriously','line_number':471,'multiline':False]
['text':' missing memory sanitizer errors, which has occured historically even when','line_number':472,'multiline':False]
['text':' abort_on_error=1 was passed to MSan.','line_number':473,'multiline':False]
['text':' Remove successful jobs.','line_number':479,'multiline':False]
['text':' Check for Evergreen running out of disk space, and forcibly quit.','line_number':487,'multiline':False]
['text':' Test recovery on jobs configured for random abort. */','line_number':494,'multiline':False]
['text':' Check for the library abort message or an error from format.','line_number':514,'multiline':False]
['text':' There's some chance we just dropped core. We have the exit status of the process,','line_number':522,'multiline':False]
['text':' but there's no way to be sure. There are reasons the process' exit status looks','line_number':523,'multiline':False]
['text':' like a core dump was created (format deliberately causes a segfault in the case','line_number':524,'multiline':False]
['text':' of abort/recovery testing, and does work that can often segfault in the case of a','line_number':525,'multiline':False]
['text':' snapshot-isolation mismatch failure), but those cases have already been handled,','line_number':526,'multiline':False]
['text':' format is responsible for logging a failure before the core can happen. If the','line_number':527,'multiline':False]
['text':' process exited with a likely failure, call it a failure.','line_number':528,'multiline':False]
['text':' SIGKILL is the Linux out-of-memory kill signal.','line_number':542,'multiline':False]
['text':' If we don't understand why the job exited, report it as a failure and flag','line_number':566,'multiline':False]
['text':' a problem in this script.','line_number':567,'multiline':False]
['text':' Start a single job.','line_number':575,'multiline':False]
['text':' If we're using recording, append our default arguments.','line_number':604,'multiline':False]
['text':'','line_number':605,'multiline':False]
['text':' This script is typically left running until a failure is hit. To avoid filling up the','line_number':606,'multiline':False]
['text':' disk, we should avoid keeping recordings from successful runs.','line_number':607,'multiline':False]
['text':' Disassociate the command from the shell script so we can exit and let the command','line_number':619,'multiline':False]
['text':' continue to run.','line_number':620,'multiline':False]
['text':' Run format in its own session so child processes are in their own process groups','line_number':621,'multiline':False]
['text':' and we can individually terminate (and clean up) running jobs and their children.','line_number':622,'multiline':False]
['text':' Check for setsid command failed execution, and forcibly quit (setsid exits 0 if the','line_number':625,'multiline':False]
['text':' command execution fails so we can't check the exit status). The RUNDIR directory is','line_number':626,'multiline':False]
['text':' not created in this failure type, check the log file explicitly.','line_number':627,'multiline':False]
['text':' Check if our time has expired. Updates force_quit if the timer has expired.','line_number':639,'multiline':False]
['text':' If we've run out of time, terminate all running jobs.','line_number':646,'multiline':False]
['text':' Check if we're only running the smoke-tests and we're done.','line_number':657,'multiline':False]
['text':'smoke_list[@]} ]] && quit=1','line_number':658,'multiline':False]
['text':' Check if we're running CONFIGs from a directory and we're done.','line_number':660,'multiline':False]
['text':' Check if the total number of jobs has been reached.','line_number':663,'multiline':False]
['text':' Check if less than 60 seconds left on any timer. The goal is to avoid killing jobs that','line_number':666,'multiline':False]
['text':' haven't yet configured signal handlers, because we rely on handler output to determine','line_number':667,'multiline':False]
['text':' their final status.','line_number':668,'multiline':False]
['text':' Start another job if we're not quitting for any reason and the maximum number of jobs','line_number':671,'multiline':False]
['text':' in parallel has not yet been reached.','line_number':672,'multiline':False]
['text':' Clean up and update status.','line_number':678,'multiline':False]
['text':' Quit if we're done and there aren't any jobs left to wait for.','line_number':685,'multiline':False]
['text':' Wait for awhile, unless we're killing everything or there are jobs to start. Always wait','line_number':688,'multiline':False]
['text':' for a short period so we don't pound the system creating new jobs.','line_number':689,'multiline':False]
