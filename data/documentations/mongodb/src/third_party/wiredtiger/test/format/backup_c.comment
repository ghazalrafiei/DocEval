['text':'-
 * Public Domain 2014-present MongoDB, Inc.
 * Public Domain 2008-2014 WiredTiger, Inc.
 *
 * This is free and unencumbered software released into the public domain.
 *
 * Anyone is free to copy, modify, publish, use, compile, sell, or
 * distribute this software, either in source code form or as a compiled
 * binary, for any purpose, commercial or non-commercial, and by any
 * means.
 *
 * In jurisdictions that recognize copyright laws, the author or authors
 * of this software dedicate any and all copyright interest in the
 * software to the public domain. We make this dedication for the benefit
 * of the public at large and to the detriment of our heirs and
 * successors. We intend this dedication to be an overt act of
 * relinquishment in perpetuity of all present and future rights to this
 * software under copyright law.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 ','line_number':1,'multiline':True]
['text':'
 * check_copy --
 *     Confirm the backup worked.
 ','line_number':31,'multiline':True]
['text':'
     * Remove any backup info files that exist. We're about the run recovery in the backup directory
     * so we cannot use the backup directory after that restart. We must remove the files before the
     * restart to avoid a window where they could exist and the backup directory has had recovery
     * run.
     ','line_number':47,'multiline':True]
['text':' Check if unlink command failed. It is fine if the file does not exist. ','line_number':55,'multiline':True]
['text':' Check if unlink command failed. It is fine if the file does not exist. ','line_number':61,'multiline':True]
['text':' Now setup and open the path for real. ','line_number':65,'multiline':True]
['text':' Verify the objects. ','line_number':69,'multiline':True]
['text':'
 * The set of active files in a backup. This is our "memory" of files that are used in each backup,
 * so we can remove any that are not mentioned in the next backup.
 ','line_number':77,'multiline':True]
['text':'
 * active_files_init --
 *     Initialize (clear) the active file struct.
 ','line_number':86,'multiline':True]
['text':'
 * active_files_print --
 *     Print the set of active files for debugging.
 ','line_number':97,'multiline':True]
['text':'
 * active_files_add --
 *     Add a new name to the active file list.
 ','line_number':114,'multiline':True]
['text':'
 * active_files_sort_function --
 *     Sort function for qsort.
 ','line_number':130,'multiline':True]
['text':'
 * active_files_sort --
 *     Sort the list of names in the active file list.
 ','line_number':140,'multiline':True]
['text':'
 * active_files_remove_missing --
 *     Files in the previous list that are missing from the current list are removed.
 ','line_number':152,'multiline':True]
['text':'
     * Walk through the two lists looking for non-matches.
     ','line_number':171,'multiline':True]
['text':' There are extra entries at the end of the prev list ','line_number':177,'multiline':True]
['text':'
             * There is something in the prev list not in the current list. Remove it, and continue
             * - don't advance the current list.
             ','line_number':184,'multiline':True]
['text':'
             * There is something in the current list not in the prev list. Walk past it in the
             * current list and try again.
             ','line_number':198,'multiline':True]
['text':'
 * active_files_free --
 *     Free the list of active files.
 ','line_number':208,'multiline':True]
['text':'
 * copy_blocks --
 *     Perform a single block-based incremental backup of the given file.
 ','line_number':225,'multiline':True]
['text':' Open the duplicate incremental backup cursor with the file name given. ','line_number':246,'multiline':True]
['text':'
             * Since we are using system calls below instead of a WiredTiger function, we have to
             * prepend the home directory to the file names ourselves.
             ','line_number':255,'multiline':True]
['text':'
             * Don't use the system checker for lseek. The system check macro uses an int which is
             * often 4 bytes and checks for any negative value. The offset returned from lseek is 8
             * bytes and we can have a false positive error check.
             ','line_number':288,'multiline':True]
['text':' Use the read size since we may have read less than the granularity. ','line_number':301,'multiline':True]
['text':' If we get EOF, we're done. ','line_number':303,'multiline':True]
['text':'
             * These operations are using a WiredTiger function so it will prepend the home
             * directory to the name for us.
             ','line_number':318,'multiline':True]
['text':'
 * restore_backup_info --
 *     If it exists, restore the backup information. Return 0 on success.
 ','line_number':349,'multiline':True]
['text':'
     * Try to open the backup cursor. We may get ENOENT if the source ID we wrote to the program
     * file was not yet checkpointed. Sometimes it will, sometimes it won't. If we don't find it
     * then return non-zero so that we skip incremental restart testing.
     *
     * NOTE: This call to open a backup cursor to check the source id uses a made up 'this_id' that
     * tries to generate one that cannot possibly be in use. This call can/should be changed if the
     * API ever allows us to open a cursor with a source id that does not require a this id.
     ','line_number':378,'multiline':True]
['text':' We could save just an ID if the file count was 0, so return if we find that case. ','line_number':402,'multiline':True]
['text':' Set global id after error paths. ','line_number':408,'multiline':True]
['text':'
 * save_backup_info --
 *     Save backup information to a text file format can use to restore on a reopen.
 ','line_number':426,'multiline':True]
['text':'
 * copy_format_files --
 *     Copies over format-specific files to the BACKUP.copy directory. These include CONFIG and any
 *     CONFIG.keylen* files.
 ','line_number':460,'multiline':True]
['text':' The CONFIG file should always exist, copy it over. ','line_number':472,'multiline':True]
['text':' Copy over any CONFIG.keylen* files if they exist. ','line_number':475,'multiline':True]
['text':'
 * backup --
 *     Periodically do a backup and verify it.
 ','line_number':490,'multiline':True]
['text':' Open a session. ','line_number':513,'multiline':True]
['text':'
     * If we're reopening an existing database and doing incremental backup we reset the initialized
     * variables based on whatever they were at the end of the previous run. We want to make sure
     * that we can take an incremental backup and use the older id as a source identifier. We force
     * that only if the restore function was successful in restoring the backup information.
     ','line_number':523,'multiline':True]
['text':'
     * Perform a full backup at somewhere under 10 seconds (that way there's at least one), then at
     * larger intervals, optionally do incremental backups between full backups.
     ','line_number':537,'multiline':True]
['text':' Sleep for short periods so we don't make the run wait. ','line_number':543,'multiline':True]
['text':'
         * We can't drop named checkpoints while there's a backup in progress, serialize backups
         * with named checkpoints. Wait for the checkpoint to complete, otherwise backups might be
         * starved out.
         ','line_number':549,'multiline':True]
['text':'
             * If we're doing a full backup as the start of the incremental backup, only send in an
             * identifier for this one. Also set the block granularity.
             ','line_number':561,'multiline':True]
['text':' Use consolidation too. ','line_number':581,'multiline':True]
['text':' Restart a full incremental every once in a while. ','line_number':585,'multiline':True]
['text':' Free up the old active file list we're going to overwrite. ','line_number':591,'multiline':True]
['text':' Restart a full incremental every once in a while. ','line_number':602,'multiline':True]
['text':' If we're taking a full backup, create the backup directories. ','line_number':610,'multiline':True]
['text':'
             * Copy format-specific files into the backup directories so that test/format can be run
             * on the BACKUP.copy database for verification.
             ','line_number':614,'multiline':True]
['text':'
         * open_cursor can return EBUSY if concurrent with a metadata operation, retry in that case.
         ','line_number':621,'multiline':True]
['text':' After a log-based incremental backup, truncate the log files. ','line_number':656,'multiline':True]
['text':' Save the backup information to a file so we can restart on a reopen. ','line_number':669,'multiline':True]
['text':'
         * If automatic log removal isn't configured, optionally do incremental backups after each
         * full backup. If we're not doing any more incrementals, verify the backup (we can't verify
         * intermediate states, once we perform recovery on the backup database, we can't do any
         * more incremental backups).
         ','line_number':673,'multiline':True]
['text':' We ran recovery in the backup directory, so next time it must be a full backup. ','line_number':688,'multiline':True]
