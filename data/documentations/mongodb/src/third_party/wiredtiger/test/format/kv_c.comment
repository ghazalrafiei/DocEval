['text':'-
 * Public Domain 2014-present MongoDB, Inc.
 * Public Domain 2008-2014 WiredTiger, Inc.
 *
 * This is free and unencumbered software released into the public domain.
 *
 * Anyone is free to copy, modify, publish, use, compile, sell, or
 * distribute this software, either in source code form or as a compiled
 * binary, for any purpose, commercial or non-commercial, and by any
 * means.
 *
 * In jurisdictions that recognize copyright laws, the author or authors
 * of this software dedicate any and all copyright interest in the
 * software to the public domain. We make this dedication for the benefit
 * of the public at large and to the detriment of our heirs and
 * successors. We intend this dedication to be an overt act of
 * relinquishment in perpetuity of all present and future rights to this
 * software under copyright law.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 ','line_number':1,'multiline':True]
['text':'
 * key_init_random --
 *     Fill in random key lengths.
 ','line_number':31,'multiline':True]
['text':'
     * Fill in random key lengths. Focus on relatively small items, admitting the possibility of
     * larger items. Pick a size close to the minimum most of the time, only create a larger item 1
     * in 20 times.
     ','line_number':41,'multiline':True]
['text':'
 * key_init --
 *     Initialize the keys for a run.
 ','line_number':54,'multiline':True]
['text':' unused argument ','line_number':65,'multiline':True]
['text':' Key initialization is only required by row-store objects. ','line_number':68,'multiline':True]
['text':' Backward compatibility, built the correct path to the saved key-length file. ','line_number':72,'multiline':True]
['text':'
     * The key is a variable length item with a leading 10-digit value. Since we have to be able
     * re-construct it from the record number (when doing row lookups), we pre-load a set of random
     * lengths in a lookup table, and then use the record number to choose one of the pre-loaded
     * lengths.
     *
     * Read in the values during reopen.
     ','line_number':78,'multiline':True]
['text':' Write out the values for a subsequent reopen. ','line_number':99,'multiline':True]
['text':'
 * key_gen_init --
 *     Initialize the key structures for a run.
 ','line_number':107,'multiline':True]
['text':'
 * key_gen_teardown --
 *     Tear down the key structures.
 ','line_number':128,'multiline':True]
['text':'
 * key_gen_common --
 *     Row-store key generation code shared between normal and insert key generation.
 ','line_number':141,'multiline':True]
['text':'
     * The workload we're trying to mimic with a prefix is a long common prefix followed by a record
     * number, the tricks are creating a prefix that won't re-order keys, and to change the prefix
     * with some regularity to test prefix boundaries. Split the key space into power-of-2 buckets:
     * that results in tiny runs of prefix strings at the beginning of the tree, and increasingly
     * large common prefixes as the tree grows (with a testing sweet spot in the middle). After the
     * bucket value, append a string of common bytes. The standard, zero-padded key itself sorts
     * lexicographically, meaning the common key prefix will grow and shrink by a few bytes as the
     * number increments, which is a good thing for testing.
     ','line_number':156,'multiline':True]
['text':'
         * Not all tables have prefixes and prefixes may be of different lengths. If any table has a
         * prefix, check if we need to reset the leading bytes in the key to their original values.
         * It's an ugly test, but it avoids rewriting the key in a performance path. The variable is
         * the largest prefix in the run, and the hard-coded 20 gets us past the key appended to
         * that prefix.
         ','line_number':169,'multiline':True]
['text':'
     * After any common prefix, the key starts with a 10-digit string (the specified row) followed
     * by two digits (a random number between 1 and 15 if it's an insert, otherwise 00).
     ','line_number':194,'multiline':True]
['text':'
     * Because we're doing table lookup for key sizes, we can't set overflow key sizes in the table,
     * the table isn't big enough to keep our hash from selecting too many big keys and blowing out
     * the cache. Handle that here, use a really big key 1 in 2500 times.
     ','line_number':204,'multiline':True]
['text':'
 * val_len --
 *     Select and return the length for a value.
 ','line_number':217,'multiline':True]
['text':'
     * Focus on relatively small items, admitting the possibility of larger items. Pick a size close
     * to the minimum most of the time, only create a larger item 1 in 20 times, and a really big
     * item 1 in somewhere around 2500 items.
     ','line_number':224,'multiline':True]
['text':'
 * val_init --
 *     Initialize the value structures for a table.
 ','line_number':237,'multiline':True]
['text':' unused argument ','line_number':248,'multiline':True]
['text':' Discard any previous value initialization. ','line_number':251,'multiline':True]
['text':'
     * Set initial buffer contents to recognizable text.
     *
     * Add a few extra bytes in order to guarantee we can always offset into the buffer by a few
     * extra bytes, used to generate different data for column-store run-length encoded files.
     ','line_number':256,'multiline':True]
['text':'
 * val_gen_init --
 *     Initialize a single value structure.
 ','line_number':272,'multiline':True]
['text':'
 * val_gen_teardown --
 *     Discard a single value structure.
 ','line_number':288,'multiline':True]
['text':'
 * val_to_flcs --
 *     Take a RS or VLCS value, and choose an FLCS value in a reproducible way.
 ','line_number':299,'multiline':True]
['text':' Use the first random byte of the key being cautious around the length of the value. ','line_number':310,'multiline':True]
['text':'
 * val_gen --
 *     Generate a new value.
 ','line_number':347,'multiline':True]
['text':'
         * FLCS remove is the same as storing a zero value, so where there are more than a couple of
         * bits to work with, stay away from 0 values.
         ','line_number':361,'multiline':True]
['text':'
     * WiredTiger doesn't store zero-length data items in row-store files, test that by inserting a
     * zero-length data item every so often.
     ','line_number':394,'multiline':True]
['text':'
     * Data items have unique leading numbers by default and random lengths; variable-length
     * column-stores use a duplicate data value to test RLE.
     ','line_number':404,'multiline':True]
['text':' Randomize the first character, we use it for FLCS values. ','line_number':421,'multiline':True]
