['text':'!/usr/bin/env python','line_number':1,'multiline':False]
['text':'','line_number':2,'multiline':False]
['text':' Public Domain 2014-present MongoDB, Inc.','line_number':3,'multiline':False]
['text':' Public Domain 2008-2014 WiredTiger, Inc.','line_number':4,'multiline':False]
['text':'','line_number':5,'multiline':False]
['text':' This is free and unencumbered software released into the public domain.','line_number':6,'multiline':False]
['text':'','line_number':7,'multiline':False]
['text':' Anyone is free to copy, modify, publish, use, compile, sell, or','line_number':8,'multiline':False]
['text':' distribute this software, either in source code form or as a compiled','line_number':9,'multiline':False]
['text':' binary, for any purpose, commercial or non-commercial, and by any','line_number':10,'multiline':False]
['text':' means.','line_number':11,'multiline':False]
['text':'','line_number':12,'multiline':False]
['text':' In jurisdictions that recognize copyright laws, the author or authors','line_number':13,'multiline':False]
['text':' of this software dedicate any and all copyright interest in the','line_number':14,'multiline':False]
['text':' software to the public domain. We make this dedication for the benefit','line_number':15,'multiline':False]
['text':' of the public at large and to the detriment of our heirs and','line_number':16,'multiline':False]
['text':' successors. We intend this dedication to be an overt act of','line_number':17,'multiline':False]
['text':' relinquishment in perpetuity of all present and future rights to this','line_number':18,'multiline':False]
['text':' software under copyright law.','line_number':19,'multiline':False]
['text':'','line_number':20,'multiline':False]
['text':' THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,','line_number':21,'multiline':False]
['text':' EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF','line_number':22,'multiline':False]
['text':' MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.','line_number':23,'multiline':False]
['text':' IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR','line_number':24,'multiline':False]
['text':' OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,','line_number':25,'multiline':False]
['text':' ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR','line_number':26,'multiline':False]
['text':' OTHER DEALINGS IN THE SOFTWARE.','line_number':27,'multiline':False]
['text':'','line_number':28,'multiline':False]
['text':' syscall.py','line_number':29,'multiline':False]
['text':'      Command line syscall test runner','line_number':30,'multiline':False]
['text':'','line_number':31,'multiline':False]
['text':' Usage: python syscall.py [ options ]','line_number':32,'multiline':False]
['text':'','line_number':33,'multiline':False]
['text':' For each .run file below the current directory, run the corresponding','line_number':34,'multiline':False]
['text':' program and collect strace output, comparing it to the contents of','line_number':35,'multiline':False]
['text':' the .run file.','line_number':36,'multiline':False]
['text':'','line_number':37,'multiline':False]
['text':' Options:','line_number':38,'multiline':False]
['text':'    --preserve     preserve the outputs in a WT_TEST.* subdirectory','line_number':39,'multiline':False]
['text':'                   of the build directory.','line_number':40,'multiline':False]
['text':'    --verbose      verbose output to show step by step how run files are','line_number':41,'multiline':False]
['text':'                   compared to output files.','line_number':42,'multiline':False]
['text':' HOW TO DEBUG FAILURES OR CREATE A NEW TEST','line_number':44,'multiline':False]
['text':'','line_number':45,'multiline':False]
['text':' It will be helpful to look at an existing run file (ending in .run)','line_number':46,'multiline':False]
['text':' while reading this. If you are debugging a failure, also have the','line_number':47,'multiline':False]
['text':' output file (stderr.txt) available for reference.  These files are','line_number':48,'multiline':False]
['text':' generated in a WT_TEST.* subdirectory of the build directory and','line_number':49,'multiline':False]
['text':' preserved in case of a failure, or when the --preserve option is used.','line_number':50,'multiline':False]
['text':'','line_number':51,'multiline':False]
['text':' For each run file under this directory, this script runs the program','line_number':52,'multiline':False]
['text':' built for that directory under the 'strace' program and captures the','line_number':53,'multiline':False]
['text':' output from that. (On OS/X it runs 'dtruss' instead of 'strace', otherwise','line_number':54,'multiline':False]
['text':' it is largely the same). We want to compare the strace output to a known','line_number':55,'multiline':False]
['text':' reference. The program typically has some of its own output, this is','line_number':56,'multiline':False]
['text':' interleaved into the strace output and provides 'anchor points' during','line_number':57,'multiline':False]
['text':' the comparison.','line_number':58,'multiline':False]
['text':'','line_number':59,'multiline':False]
['text':' The purpose of this output comparison is to determine if there are any','line_number':60,'multiline':False]
['text':' system calls that we should be doing that are not happening. We'd also catch','line_number':61,'multiline':False]
['text':' if there are any extra syscalls that we are doing. For example, if we','line_number':62,'multiline':False]
['text':' are expecting that some operation, like WT_SESSION->create, must do an','line_number':63,'multiline':False]
['text':' fdatasync at a particular point to enforce durability guarantees,','line_number':64,'multiline':False]
['text':' it would be pretty bad if a future code change inadvertently stopped','line_number':65,'multiline':False]
['text':' doing the fdatasync. This wouldn't be picked up by normal testing. It might','line_number':66,'multiline':False]
['text':' be detected by asynchronously killing a test run and seeing if a','line_number':67,'multiline':False]
['text':' recovered database gives proper results. Or it might not. This script','line_number':68,'multiline':False]
['text':' attempts to add certainty to our guarantees.','line_number':69,'multiline':False]
['text':'','line_number':70,'multiline':False]
['text':' The run file is a template for what the resulting strace output should','line_number':71,'multiline':False]
['text':' look like. The challenge is that seemingly minor changes to WiredTiger','line_number':72,'multiline':False]
['text':' implementation or even runtime libraries may change what the overall output','line_number':73,'multiline':False]
['text':' looks like. The run file can be written to allow runs that are resilient','line_number':74,'multiline':False]
['text':' against such changes.','line_number':75,'multiline':False]
['text':'','line_number':76,'multiline':False]
['text':' This script's first action is to read the run file after it is run through','line_number':77,'multiline':False]
['text':' the 'cpp' preprocessor. That means that the run file can use #ifdefs,','line_number':78,'multiline':False]
['text':' #defines and #includes, as well as /**/ and // comments. The output','line_number':79,'multiline':False]
['text':' of the preprocessor is then parsed. We expect to see a few directives','line_number':80,'multiline':False]
['text':' first, each has a string argument as described here:','line_number':81,'multiline':False]
['text':'','line_number':82,'multiline':False]
['text':'  SYSTEM(".....");      to tell us what system the script can run on, the arg','line_number':83,'multiline':False]
['text':'                        currently is either "Linux" and "Darwin".','line_number':84,'multiline':False]
['text':'  TRACE(".....");       a comma separated list of system calls that','line_number':85,'multiline':False]
['text':'                        we are looking at. Other system calls are ignored.','line_number':86,'multiline':False]
['text':'  RUN("");              arguments to the executable.','line_number':87,'multiline':False]
['text':'','line_number':88,'multiline':False]
['text':' When the RUN directive is seen, it indicates that this header portion is','line_number':89,'multiline':False]
['text':' complete, there are no more directives. At this point, the target program','line_number':90,'multiline':False]
['text':' is executed via strace. The remaining part of the run file is used to','line_number':91,'multiline':False]
['text':' match the output of strace.','line_number':92,'multiline':False]
['text':'','line_number':93,'multiline':False]
['text':' The string '...' in the run file matches anything, and can be used to skip','line_number':94,'multiline':False]
['text':' over system dependent parts of the strace output.  If '...' appears on a line','line_number':95,'multiline':False]
['text':' by itself, it matches any number of lines. If it appears immediately after a','line_number':96,'multiline':False]
['text':' string, it matches a string that begins with the pattern. (e.g. "foo"...','line_number':97,'multiline':False]
['text':' matches any string that starts with "foo"). It can also appear as a function','line_number':98,'multiline':False]
['text':' argument where it matches any number of arguments.','line_number':99,'multiline':False]
['text':'','line_number':100,'multiline':False]
['text':' Lines of strace generally look something like:','line_number':101,'multiline':False]
['text':'  open("./WiredTiger.lock", O_RDWR|O_CREAT|O_CLOEXEC, 0666) = 3','line_number':102,'multiline':False]
['text':'','line_number':103,'multiline':False]
['text':' where the result of the syscall appears at the end.  A matching line in','line_number':104,'multiline':False]
['text':' a run file could look like this:','line_number':105,'multiline':False]
['text':'  fd = open("./WiredTiger.lock", O_RDWR|O_CREAT|O_CLOEXEC, 0666);','line_number':106,'multiline':False]
['text':'','line_number':107,'multiline':False]
['text':' or:','line_number':108,'multiline':False]
['text':'  fd = open("./WiredTiger"..., O_RDWR|O_CREAT|O_CLOEXEC, 0666);','line_number':109,'multiline':False]
['text':'','line_number':110,'multiline':False]
['text':' or:','line_number':111,'multiline':False]
['text':'  fd = open("./WiredTiger"..., ...);','line_number':112,'multiline':False]
['text':'','line_number':113,'multiline':False]
['text':' In each of these cases, the 'fd' (which can be any variable name) becomes','line_number':114,'multiline':False]
['text':' bound to the value in the strace output, in this case '3'. So if later the','line_number':115,'multiline':False]
['text':' run file contains:','line_number':116,'multiline':False]
['text':'  write(fd, ""..., 20);','line_number':117,'multiline':False]
['text':'','line_number':118,'multiline':False]
['text':' then we would expect this to match strace output for a write of 20 bytes','line_number':119,'multiline':False]
['text':' using file descriptor 3.','line_number':120,'multiline':False]
['text':'','line_number':121,'multiline':False]
['text':' Expressions are evaluated using the Python parser, so that','line_number':122,'multiline':False]
['text':' hex and octal numbers are accepted, and constant values can be or-ed.','line_number':123,'multiline':False]
['text':' Some limited number of defines are known (see 'defines_used' below),','line_number':124,'multiline':False]
['text':' so that the run file can contain 'O_RDONLY' and it will match a numeric','line_number':125,'multiline':False]
['text':' expression (as it appears in the output of dtruss on OS/X).','line_number':126,'multiline':False]
['text':' A class that represents a context in which predefined constants can be','line_number':132,'multiline':False]
['text':' set, and new variables can be assigned.','line_number':133,'multiline':False]
['text':'###############################################################','line_number':143,'multiline':False]
['text':' Changable parameters','line_number':144,'multiline':False]
['text':' We expect these values to evolve as tests are added or modified.','line_number':145,'multiline':False]
['text':' Generally, system calls must be wrapped in an ASSERT_XX() "macro".','line_number':147,'multiline':False]
['text':' Exceptions are calls in this list that return 0 on success, or','line_number':148,'multiline':False]
['text':' those that are hardcoded in Runner.call_compare()','line_number':149,'multiline':False]
['text':' Encapsulate all the defines we can use in our scripts.','line_number':152,'multiline':False]
['text':' When this program is run, we'll find out their actual values on','line_number':153,'multiline':False]
['text':' the host system.','line_number':154,'multiline':False]
['text':'###############################################################','line_number':161,'multiline':False]
['text':' Patterns that are used to match the .run file and/or the output.','line_number':163,'multiline':False]
['text':' e.g. fd = open("blah", 0, 0);','line_number':169,'multiline':False]
['text':' e.g. ASSERT_EQ(close(fd), 0);','line_number':172,'multiline':False]
['text':' e.g. close(fd);     must return 0','line_number':175,'multiline':False]
['text':' e.g. open("blah", 0x0, 0x0)   = 6 0','line_number':178,'multiline':False]
['text':' We capture the errno (e.g. "0" or "Err#60"), but don't do anything with it.','line_number':179,'multiline':False]
['text':' We don't currently test anything that is errno dependent.','line_number':180,'multiline':False]
['text':' At the top of the dtruss output is a fixed string.','line_number':182,'multiline':False]
['text':' If tracepat matches, set map['trace_syscalls'] to the 0'th group, etc.','line_number':190,'multiline':False]
['text':' To create breakpoints while debugging this script','line_number':198,'multiline':False]
['text':' If wttop appears as a prefix of pathname, strip it off.','line_number':210,'multiline':False]
['text':' A line from a file: a modified string with the file name and line number','line_number':224,'multiline':False]
['text':' associated with it.','line_number':225,'multiline':False]
['text':' Manage reading from a file, tracking line numbers.','line_number':255,'multiline':False]
['text':' 'raw' means we don't ignore any lines','line_number':257,'multiline':False]
['text':' 'is_cpp' means input lines beginning with '#' indicate file/linenumber','line_number':258,'multiline':False]
['text':' Return True if the line is to be ignored.','line_number':281,'multiline':False]
['text':' strip a line of comments','line_number':287,'multiline':False]
['text':' This isn't exactly right, it would see "; //"','line_number':305,'multiline':False]
['text':' within a string or comment.','line_number':306,'multiline':False]
['text':' make this somewhat compatible with file.readline','line_number':325,'multiline':False]
['text':' Read from a regular file.','line_number':341,'multiline':False]
['text':' Read from the C preprocessor run on a file.','line_number':347,'multiline':False]
['text':' Track options discovered in the 'head' section of the .run file.','line_number':361,'multiline':False]
['text':' Manage a run of the target program characterized by a .run file,','line_number':368,'multiline':False]
['text':' comparing output from the run and reporting differences.','line_number':369,'multiline':False]
['text':' Read up until 'RUN()', setting attributes of self.headopts','line_number':399,'multiline':False]
['text':' found RUN()?','line_number':413,'multiline':False]
['text':'print("SYSCALLS: " + self.headopts.trace_syscalls','line_number':426,'multiline':False]
['text':' make it work if line is None or is a plain string.','line_number':443,'multiline':False]
['text':' make it work if line is None or is a plain string.','line_number':451,'multiline':False]
['text':' We allow a trailing \0','line_number':471,'multiline':False]
['text':'print('  arg_match: <' + a1 + '> <' + a2 + '>')','line_number':493,'multiline':False]
['text':'print('args_match: ' + str(s1) + ', ' + str(s2))','line_number':514,'multiline':False]
['text':' match anything?','line_number':518,'multiline':False]
['text':' func(args);  is shorthand for ASSERT_EQ(func(args), xxx);','line_number':529,'multiline':False]
['text':' where xxx may be 0 or may be derived from one of the args.','line_number':530,'multiline':False]
['text':' filtering syscalls here if needed.  If it's not a match,','line_number':591,'multiline':False]
['text':' mark the errline so it is retried.','line_number':592,'multiline':False]
['text':' pattern groups using example ASSERT_EQ(close(fd), 0);','line_number':610,'multiline':False]
['text':'  0   :  comparison op ("EQ")','line_number':611,'multiline':False]
['text':'  1   :  function call name "close"','line_number':612,'multiline':False]
['text':'  2   :  function call args "(fd)"','line_number':613,'multiline':False]
['text':'  3   :  comparitor "0"','line_number':614,'multiline':False]
['text':' A call without an enclosing ASSERT is reduced to an ASSERT,','line_number':632,'multiline':False]
['text':' depending on the particular system call.','line_number':633,'multiline':False]
['text':' In OS X, dtruss is implemented using dtrace's apparently buffered','line_number':703,'multiline':False]
['text':' printf writes to stdout, but that is all redirected to stderr.','line_number':704,'multiline':False]
['text':' Because of that, the test program's writes to stderr do not','line_number':705,'multiline':False]
['text':' interleave with dtruss output as it does with Linux's strace','line_number':706,'multiline':False]
['text':' (which writes directly to stderr).  On OS X, we get the program's','line_number':707,'multiline':False]
['text':' output first, we compensate for this by moving all the','line_number':708,'multiline':False]
['text':' OUTPUT statements in the runfile to match first. This simple','line_number':709,'multiline':False]
['text':' approach will break if there is more data generated by OUTPUT','line_number':710,'multiline':False]
['text':' statements than a stdio buffer's size.','line_number':711,'multiline':False]
['text':' dtrace has no option to limit the syscalls to be traced,','line_number':743,'multiline':False]
['text':' so we'll filter the output.','line_number':744,'multiline':False]
['text':' Run the syscall program.','line_number':764,'multiline':False]
['text':' CTest runs a copy of the script in the build directory, so the src include','line_number':776,'multiline':False]
['text':' is a level above.','line_number':777,'multiline':False]
['text':' When building with autoconf, the generated includes will be at the top level','line_number':784,'multiline':False]
['text':' of the build directory.','line_number':785,'multiline':False]
['text':' When building with CMake, the generated includes will be in the config and include','line_number':789,'multiline':False]
['text':' sub-directories.','line_number':790,'multiline':False]
['text':' Linux, Windows, Darwin','line_number':810,'multiline':False]
['text':' for now, we permit Linux and Darwin','line_number':824,'multiline':False]
['text':' Create a C program to get values for all defines we need.','line_number':870,'multiline':False]
['text':' The output of the program is Python code that we'll execute','line_number':871,'multiline':False]
['text':' directly to set the values.','line_number':872,'multiline':False]
['text':' variables is a symbol table that is used to','line_number':874,'multiline':False]
['text':' evaluate expressions both in the .run file and','line_number':875,'multiline':False]
['text':' in the output file. This is needed for strace,','line_number':876,'multiline':False]
['text':' which shows system call flags in symbolic form.','line_number':877,'multiline':False]
['text':' defines is a symbol table that is used to','line_number':879,'multiline':False]
['text':' create preprocessor defines, effectively evaluating','line_number':880,'multiline':False]
['text':' all flag defines in the .run file.','line_number':881,'multiline':False]
['text':' output is Python that sets attributes of 'o'.','line_number':890,'multiline':False]
['text':' The 'o' object will be modified.','line_number':920,'multiline':False]
['text':' Run the produced Python.','line_number':921,'multiline':False]
['text':' Set these in variables too, so strace','line_number':922,'multiline':False]
['text':'  symbolic output is evaluated.','line_number':923,'multiline':False]
['text':' If there are multiple tests in this directory,','line_number':957,'multiline':False]
['text':' give each one its own execution dir.','line_number':958,'multiline':False]
['text':' Set paths, determining the top of the build.','line_number':966,'multiline':False]
['text':' Note: this code is borrowed from test/suite/run.py','line_number':970,'multiline':False]
['text':' Check for a local build that contains the wt utility. First check if the user','line_number':971,'multiline':False]
['text':' manually specified a local build through the 'WT_BUILDDIR' env variable. Otherwise','line_number':972,'multiline':False]
['text':' iterate through other possible locations. This including current working directory,','line_number':973,'multiline':False]
['text':' and in the dist directory. This isn't ideal - if a','line_number':974,'multiline':False]
['text':' user has multiple builds in a tree we could pick the wrong one.','line_number':975,'multiline':False]
