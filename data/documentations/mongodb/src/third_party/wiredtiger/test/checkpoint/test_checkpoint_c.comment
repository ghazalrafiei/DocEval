['text':'-
 * Public Domain 2014-present MongoDB, Inc.
 * Public Domain 2008-2014 WiredTiger, Inc.
 *
 * This is free and unencumbered software released into the public domain.
 *
 * Anyone is free to copy, modify, publish, use, compile, sell, or
 * distribute this software, either in source code form or as a compiled
 * binary, for any purpose, commercial or non-commercial, and by any
 * means.
 *
 * In jurisdictions that recognize copyright laws, the author or authors
 * of this software dedicate any and all copyright interest in the
 * software to the public domain. We make this dedication for the benefit
 * of the public at large and to the detriment of our heirs and
 * successors. We intend this dedication to be an overt act of
 * relinquishment in perpetuity of all present and future rights to this
 * software under copyright law.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 ','line_number':1,'multiline':True]
['text':'
 * init_thread_data --
 *     Initialize the thread data struct.
 ','line_number':46,'multiline':True]
['text':'
     * For a predictable replay have a non-overlapping key space for each thread. Also divide the
     * key range between the threads. Otherwise, share the key space among all the threads.
     ','line_number':54,'multiline':True]
['text':'
     * For a predictable replay the worker threads use a predetermined set of timestamps. They
     * publish their most recently used timestamps for the clock thread to read across the workers
     * to base their decision on.
     ','line_number':66,'multiline':True]
['text':'
 * main --
 *     TODO: Add a comment describing this function.
 ','line_number':76,'multiline':True]
['text':' wiredtiger_open config ','line_number':121,'multiline':True]
['text':' rows ','line_number':127,'multiline':True]
['text':' log ','line_number':130,'multiline':True]
['text':' operations ','line_number':139,'multiline':True]
['text':' prepare ','line_number':142,'multiline':True]
['text':' runs ','line_number':145,'multiline':True]
['text':' predictable replay ','line_number':148,'multiline':True]
['text':' run until this stable timestamp ','line_number':175,'multiline':True]
['text':' The option is either one that we're asking testutil to support, or illegal. ','line_number':223,'multiline':True]
['text':'
     * Among other things, this initializes the random number generators in the option structure.
     ','line_number':237,'multiline':True]
['text':' Clean up on signal. ','line_number':241,'multiline':True]
['text':' Start time at 1 since 0 is not a valid timestamp. ','line_number':246,'multiline':True]
['text':' Clean up previous runs ','line_number':256,'multiline':True]
['text':' Setup a fresh set of cookies in the global array. ','line_number':260,'multiline':True]
['text':' LSM is not supported with tiered storage. Just use ROW. ','line_number':270,'multiline':True]
['text':'
         * Setup thread data. There are N worker threads, a checkpoint thread and possibly a clock
         * thread. The workers have ID 0 to N-1, checkpoint thread has N, and the clock thread has N
         * + 1.
         ','line_number':279,'multiline':True]
['text':' Checkpoint thread. ','line_number':290,'multiline':True]
['text':' Clock thread. ','line_number':292,'multiline':True]
['text':' Ensure that cleanup is done on error. ','line_number':333,'multiline':True]
['text':'
 * wt_connect --
 *     Configure the WiredTiger connection.
 ','line_number':342,'multiline':True]
['text':'
     * Randomly decide on the eviction rate (fast or default).
     ','line_number':355,'multiline':True]
['text':' Set up the basic configuration string first. ','line_number':361,'multiline':True]
['text':'
     * If we want to stress sweep, we have a lot of additional configuration settings to set.
     ','line_number':383,'multiline':True]
['text':'
     * If we are using tiered add in the extension and tiered storage configuration.
     ','line_number':389,'multiline':True]
['text':' testutil_tiered_begin needs the connection. ','line_number':402,'multiline':True]
['text':' Set up a random delay for the first flush. ','line_number':405,'multiline':True]
['text':'
 * wt_shutdown --
 *     Shut down the WiredTiger connection.
 ','line_number':411,'multiline':True]
['text':'
 * cleanup --
 *     Clean up from previous runs.
 ','line_number':432,'multiline':True]
['text':'
 * handle_error --
 *     TODO: Add a comment describing this function.
 ','line_number':446,'multiline':True]
['text':'
 * handle_message --
 *     TODO: Add a comment describing this function.
 ','line_number':464,'multiline':True]
['text':'
 * onint --
 *     Interrupt signal handler.
 ','line_number':484,'multiline':True]
['text':'
 * log_print_err_worker --
 *     Report an error and return the error.
 ','line_number':499,'multiline':True]
['text':'
 * Value encoding for FLCS tables.
 *
 * The string value is a large number of digits pushed around arbitrarily with modify. This is
 * difficult to track incrementally in any useful way with just 8 bits. We try to track the offset
 * of the first digit that's a prime (2, 3, 5, or 7), and which prime it is. We encode this as
 * digit-number * 4 + [2 -> 0; 3 -> 1; 5 -> 2; 7 -> 3], plus 1 overall so as to never store zero.
 * (That allows assuming any zero read back is a deleted value.) If there is no such digit, we
 * return FLCS_NONE. If we lose track, we return FLCS_UNKNOWN. This allows remembering offsets up to
 * 62 before we lose track.
 ','line_number':517,'multiline':True]
['text':' avoid storing zero ','line_number':529,'multiline':True]
['text':' The magic values are to be tested _before_ subtracting off FLCS_OFFSET. ','line_number':531,'multiline':True]
['text':' FLCS_UNKNOWN lives in test_checkpoint.h so it can be used in compare_cursors(). ','line_number':533,'multiline':True]
['text':'
 * flcs_encode_value --
 *     Store an offset and digit in an 8-bit value.
 ','line_number':537,'multiline':True]
['text':'
 * flcs_decode_value --
 *     Unpack flcs_encode_value results.
 ','line_number':561,'multiline':True]
['text':'
 * flcs_encode --
 *     Extract the corresponding 8-bit FLCS value from a string value.
 ','line_number':576,'multiline':True]
['text':'
 * flcs_modify --
 *     Update the corresponding 8-bit FLCS value given a modify applied to its string.
 ','line_number':592,'multiline':True]
['text':' clang -Wconditional-uninitialized ','line_number':603,'multiline':True]
['text':' If we've lost track, we've lost track. ','line_number':605,'multiline':True]
['text':' If it starts after us, never mind. ','line_number':616,'multiline':True]
['text':' Find the first appropriate digit. ','line_number':619,'multiline':True]
['text':' Found a suitable digit. Remember it. ','line_number':626,'multiline':True]
['text':' If at this point we had no position before, we still don't. ','line_number':632,'multiline':True]
['text':' If this modify overwrote us, we lost track. ','line_number':636,'multiline':True]
['text':' Otherwise, it is fully in front of us, so update our offset and keep going. ','line_number':640,'multiline':True]
['text':'
 * type_to_string --
 *     Return the string name of a table type.
 ','line_number':647,'multiline':True]
['text':'
 * usage --
 *     Display usage statement and exit failure.
 ','line_number':667,'multiline':True]
