['text':'-
 * Public Domain 2014-present MongoDB, Inc.
 * Public Domain 2008-2014 WiredTiger, Inc.
 *
 * This is free and unencumbered software released into the public domain.
 *
 * Anyone is free to copy, modify, publish, use, compile, sell, or
 * distribute this software, either in source code form or as a compiled
 * binary, for any purpose, commercial or non-commercial, and by any
 * means.
 *
 * In jurisdictions that recognize copyright laws, the author or authors
 * of this software dedicate any and all copyright interest in the
 * software to the public domain. We make this dedication for the benefit
 * of the public at large and to the detriment of our heirs and
 * successors. We intend this dedication to be an overt act of
 * relinquishment in perpetuity of all present and future rights to this
 * software under copyright law.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 ','line_number':1,'multiline':True]
['text':'
 * create_table --
 *     Create a WiredTiger table of the configured type for this cookie.
 ','line_number':37,'multiline':True]
['text':'
     * If we're using timestamps, turn off logging for the table.
     ','line_number':52,'multiline':True]
['text':'
 * modify_repl_init --
 *     Initialize the replacement information.
 ','line_number':71,'multiline':True]
['text':'
 * start_workers --
 *     Setup the configuration for the tables being populated, then start the worker thread(s) and
 *     wait for them to finish.
 ','line_number':84,'multiline':True]
['text':' Create statistics and thread structures. ','line_number':102,'multiline':True]
['text':' Create tables ','line_number':111,'multiline':True]
['text':' Should probably be atomic to avoid races. ','line_number':113,'multiline':True]
['text':' Create threads. The N workers have ID 0 to N - 1. ','line_number':122,'multiline':True]
['text':' Wait for the threads. ','line_number':126,'multiline':True]
['text':'
 * modify_build --
 *     Generate a set of modify vectors.
 ','line_number':141,'multiline':True]
['text':' Deterministically generate modifies based on the seed. ','line_number':150,'multiline':True]
['text':'
 * worker_no_ts_delete --
 *     Delete a key without setting a timestamp.
 ','line_number':162,'multiline':True]
['text':'
 * cursor_fix_at_zero --
 *     Check if we're on a zero (deleted) value. FLCS only.
 ','line_number':181,'multiline':True]
['text':'
 * worker_op --
 *     Write operation.
 ','line_number':194,'multiline':True]
['text':' Roughly half inserts, then balanced inserts / range removes. ','line_number':208,'multiline':True]
['text':' Retry the result of search_near again to confirm the result. ','line_number':218,'multiline':True]
['text':' Advance to the next key that exists. ','line_number':228,'multiline':True]
['text':' To match what happens in VAR and ROW, advance to the next nonzero key. ','line_number':237,'multiline':True]
['text':' To match what happens in VAR and ROW, advance to the next nonzero key. ','line_number':264,'multiline':True]
['text':' Do modify. ','line_number':287,'multiline':True]
['text':' Deleted (including not-yet-written) values read back as 0; accommodate. ','line_number':292,'multiline':True]
['text':' If key doesn't exist, turn modify into an insert. ','line_number':313,'multiline':True]
['text':'
 * worker --
 *     Worker thread start function.
 ','line_number':329,'multiline':True]
['text':'
 * real_worker --
 *     A single worker thread that transactionally updates all tables with consistent values.
 ','line_number':350,'multiline':True]
['text':'
         * Note: For predictable replays we do not specify a read timestamp, hence reading the
         * latest committed values. This is important for a predictable outcome as reading at the
         * oldest timestamp depends on where the clock and the checkpoint threads have placed the
         * oldest at this moment.
         ','line_number':385,'multiline':True]
['text':'
         * If a stop timestamp has been provided, the workers will continue to run until the clock
         * thread reaches a stable equal to the stop timestamp. Ignore the provided operation count
         * in such a case.
         ','line_number':400,'multiline':True]
['text':' If we have specified to run with mix mode deletes we need to do it in it's own txn. ','line_number':419,'multiline':True]
['text':'
                     * For a predictable run, the timestamps for worker's operations are managed by
                     * reserving them across the threads and the iterations, such that they don't
                     * overlap. For a regular run, the timestamp thread manages the advance of the
                     * global clock. The workers synchronize with the clock using a reader - writer
                     * lock, and decide the operation timestamp based on the global clock.
                     ','line_number':456,'multiline':True]
['text':' i + 1 because we don't want a thread to start with commit-ts of 1 ','line_number':466,'multiline':True]
['text':' Commit majority of times. ','line_number':487,'multiline':True]
['text':' Occasionally reopen cursors after transaction finish. ','line_number':508,'multiline':True]
['text':' Commit majority of times. ','line_number':513,'multiline':True]
['text':' Occasionally reopen cursors during a running transaction. ','line_number':528,'multiline':True]
