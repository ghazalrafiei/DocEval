['text':'-
 * Public Domain 2014-present MongoDB, Inc.
 * Public Domain 2008-2014 WiredTiger, Inc.
 *
 * This is free and unencumbered software released into the public domain.
 *
 * Anyone is free to copy, modify, publish, use, compile, sell, or
 * distribute this software, either in source code form or as a compiled
 * binary, for any purpose, commercial or non-commercial, and by any
 * means.
 *
 * In jurisdictions that recognize copyright laws, the author or authors
 * of this software dedicate any and all copyright interest in the
 * software to the public domain. We make this dedication for the benefit
 * of the public at large and to the detriment of our heirs and
 * successors. We intend this dedication to be an overt act of
 * relinquishment in perpetuity of all present and future rights to this
 * software under copyright law.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 ','line_number':1,'multiline':True]
['text':' This test produces a workload that encourages the background compaction server to do work by:
 *      1. Performing truncations that remove 20% of keys on randomly selected tables.
 *      2. Providing a "maintenance window" which allows compact to continue running while all other
 *         operations are paused. The period of the maintenance window is set by the custom
 *         operations op_rate.
 *      3. Performing inserts to ensure the files continue to grow.
 ','line_number':37,'multiline':True]
['text':' Custom operation to simulate toggling maintenance windows in a workload. ','line_number':53,'multiline':True]
['text':' Sleep first to let threads do some work. ','line_number':62,'multiline':True]
['text':' Loop while the test is running. ','line_number':80,'multiline':True]
['text':' Make sure we're not doing any work during the maintenance window. ','line_number':82,'multiline':True]
['text':'
             * Sleep the period defined by the op_rate in the configuration. Do this at the start of
             * the loop as it could be skipped by a subsequent continue call.
             ','line_number':88,'multiline':True]
['text':' Choose a random collection to truncate. ','line_number':94,'multiline':True]
['text':' Look for an existing random cursor in our cursor cache. ','line_number':97,'multiline':True]
['text':' Open the two cursors for the chosen collection. ','line_number':101,'multiline':True]
['text':' Get the cursors associated with the collection. ','line_number':110,'multiline':True]
['text':' Get the file statistics so we know how much to truncate. ','line_number':114,'multiline':True]
['text':' Don't truncate if we already have enough free space for compact to do work. ','line_number':121,'multiline':True]
['text':'
             * Truncate a range of keys between 0 and 100 until we've truncated a total of 20% of
             * the entries in the table.
             ','line_number':132,'multiline':True]
['text':' Start a transaction if possible. ','line_number':140,'multiline':True]
['text':' Choose a random key to delete. ','line_number':143,'multiline':True]
['text':'
                     * It is possible not to find anything if the collection is empty. In that case,
                     * finish the current transaction as we might be able to see new records after
                     * starting a new one.
                     ','line_number':147,'multiline':True]
['text':'
                 * If we generate an invalid range or our truncate fails rollback the transaction.
                 ','line_number':172,'multiline':True]
['text':' Reset our cursor to avoid pinning content. ','line_number':198,'multiline':True]
['text':'
             * Take a checkpoint here so we can read the correct statistics next time we hit this
             * file.
             ','line_number':206,'multiline':True]
['text':' Make sure the last operation is rolled back now the work is finished. ','line_number':213,'multiline':True]
['text':' Helper struct which stores a pointer to a collection and a cursor associated with it. ','line_number':223,'multiline':True]
['text':' Collection cursor vector. ','line_number':233,'multiline':True]
['text':' Must have unique collections for each thread. ','line_number':238,'multiline':True]
['text':' Collection cursor. ','line_number':258,'multiline':True]
['text':' Insert a key value pair, rolling back the transaction if required. ','line_number':261,'multiline':True]
['text':'
                             * We need to inform the database model that we've added these keys as
                             * some other thread may rely on the key_count data. Only do so if we
                             * successfully committed.
                             ','line_number':272,'multiline':True]
['text':' Sleep the duration defined by the op_rate. ','line_number':283,'multiline':True]
['text':' Reset our cursor to avoid pinning content. ','line_number':286,'multiline':True]
['text':' Make sure the last transaction is rolled back now the work is finished. ','line_number':293,'multiline':True]
['text':'
             * The API supports enabling or disabling the background compact server multiple times
             * in a row. Randomly pick whether we are enabling or disabling to cover all state
             * changes.
             ','line_number':304,'multiline':True]
['text':' We never expect the background compaction to fail when being enabled/disabled. ','line_number':314,'multiline':True]
['text':' Check the background compact statistics. ','line_number':327,'multiline':True]
['text':' namespace test_harness','line_number':360,'multiline':False]
