['text':'-
 * Public Domain 2014-present MongoDB, Inc.
 * Public Domain 2008-2014 WiredTiger, Inc.
 *
 * This is free and unencumbered software released into the public domain.
 *
 * Anyone is free to copy, modify, publish, use, compile, sell, or
 * distribute this software, either in source code form or as a compiled
 * binary, for any purpose, commercial or non-commercial, and by any
 * means.
 *
 * In jurisdictions that recognize copyright laws, the author or authors
 * of this software dedicate any and all copyright interest in the
 * software to the public domain. We make this dedication for the benefit
 * of the public at large and to the detriment of our heirs and
 * successors. We intend this dedication to be an overt act of
 * relinquishment in perpetuity of all present and future rights to this
 * software under copyright law.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 ','line_number':1,'multiline':True]
['text':'
 * In this test, we want to verify search_near with bounds enabled returns the correct key.
 * During the test duration:
 *  - N threads will keep inserting new random keys
 *  - M threads will execute search_near calls with bounds enabled using random prefixes as well.
 * Each search_near call with bounds enabled is verified using the default search_near.
 ','line_number':37,'multiline':True]
['text':'
         * The populate phase only creates empty collections. The number of collections is defined
         * in the configuration.
         ','line_number':55,'multiline':True]
['text':' Each insert operation will insert new keys in the collections. ','line_number':73,'multiline':True]
['text':' Helper struct which stores a pointer to a collection and a cursor associated with it. ','line_number':77,'multiline':True]
['text':' Collection cursor vector. ','line_number':87,'multiline':True]
['text':' Must have unique collections for each thread. ','line_number':92,'multiline':True]
['text':' Generate a random key/value pair. ','line_number':113,'multiline':True]
['text':' Insert a key value pair. ','line_number':118,'multiline':True]
['text':' We are not checking the result of commit as it is not necessary. ','line_number':121,'multiline':True]
['text':' Sleep the duration defined by the configuration. ','line_number':133,'multiline':True]
['text':' Rollback any transaction that could not commit before the end of the test. ','line_number':137,'multiline':True]
['text':' Reset our cursor to avoid pinning content. ','line_number':140,'multiline':True]
['text':'
         * Each read operation performs search_near calls with and without bounds enabled on random
         * collections. Each prefix is randomly generated. The result of the search_near call with
         * bounds enabled is then validated using the search_near call without bounds enabled.
         ','line_number':151,'multiline':True]
['text':' Get a random collection to work on. ','line_number':166,'multiline':True]
['text':' Find a cached cursor or create one if none exists. ','line_number':169,'multiline':True]
['text':'
             * The oldest timestamp might move ahead and the reading timestamp might become invalid.
             * To tackle this issue, we round the timestamp to the oldest timestamp value.
             ','line_number':176,'multiline':True]
['text':'
                 * Generate a random prefix. For this, we start by generating a random size and then
                 * its value.
                 ','line_number':184,'multiline':True]
['text':' Call search near with the bounded cursor. ','line_number':193,'multiline':True]
['text':' Open a cursor with the default configuration on the selected collection. ','line_number':206,'multiline':True]
['text':' Verify the bounded search_near output using the default cursor. ','line_number':209,'multiline':True]
['text':' Roll back the last transaction if still active now the work is finished. ','line_number':220,'multiline':True]
['text':' Validate bounded search_near call outputs using a cursor without bounds key enabled. ','line_number':225,'multiline':True]
['text':' Call search near with the default cursor using the given prefix. ','line_number':230,'multiline':True]
['text':'
         * It is not possible to have a bounded search near call successful and the default search
         * near call unsuccessful.
         ','line_number':235,'multiline':True]
['text':' We only have to perform validation when the default search near call is successful. ','line_number':242,'multiline':True]
['text':' Both calls are successful. ','line_number':244,'multiline':True]
['text':' The bounded search near call failed. ','line_number':248,'multiline':True]
['text':'
     * Validate a successful bound enabled search near call using a successful default search near
     * call.
     * The exact value set by the bounded search near call has to be either 0 or 1. Indeed, it
     * cannot be -1 as the key needs to contain the prefix.
     * - If it is 0, both search near calls should return the same outputs and both cursors should
     * be positioned on the prefix we are looking for.
     * - If it is 1, it will depend on the exact value set by the default search near call which can
     * be -1 or 1. If it is -1, calling next on the default cursor should get us ti the key found by
     * the bounded search near call. If it is 1, it means both search near calls have found the same
     * key that is lexicographically greater than the prefix but still contains the prefix.
     ','line_number':254,'multiline':True]
['text':'
         * The bounded search near call cannot retrieve a key with a smaller value than the prefix
         * we searched.
         ','line_number':273,'multiline':True]
['text':' The key at the prefix cursor should contain the prefix. ','line_number':279,'multiline':True]
['text':' Retrieve the key the default cursor is pointing at. ','line_number':282,'multiline':True]
['text':' Example: ','line_number':292,'multiline':True]
['text':' keys: a, bb, bba. ','line_number':293,'multiline':True]
['text':' Only bb is not visible. ','line_number':294,'multiline':True]
['text':' Default search_near(bb) returns a, exact < 0. ','line_number':295,'multiline':True]
['text':' Bounded search_near(bb) returns bba, exact > 0. ','line_number':296,'multiline':True]
['text':' The key at the default cursor should not contain the prefix. ','line_number':298,'multiline':True]
['text':'
             * The bounded cursor should be positioned at a key lexicographically greater than the
             * prefix.
             ','line_number':301,'multiline':True]
['text':'
             * The next key of the default cursor should be equal to the key pointed by the bounded
             * cursor.
             ','line_number':307,'multiline':True]
['text':' Example: ','line_number':315,'multiline':True]
['text':' keys: a, bb, bba ','line_number':316,'multiline':True]
['text':' Case 1: all keys are visible. ','line_number':317,'multiline':True]
['text':' Default search_near(bb) returns bb, exact = 0 ','line_number':318,'multiline':True]
['text':' Bounded search_near(bb) returns bb, exact = 0 ','line_number':319,'multiline':True]
['text':' Case 2: only bb is not visible. ','line_number':320,'multiline':True]
['text':' Default search_near(bb) returns bba, exact > 0. ','line_number':321,'multiline':True]
['text':' Bounded search_near(bb) returns bba, exact > 0. ','line_number':322,'multiline':True]
['text':' Both cursors should be pointing at the same key. ','line_number':324,'multiline':True]
['text':' Both cursors should have found the exact key. ','line_number':327,'multiline':True]
['text':' Both cursors have found a key that is lexicographically greater than the prefix. ','line_number':330,'multiline':True]
['text':'
     * Validate that no keys with the prefix used for the search have been found.
     * To validate this, we can use the exact value set by the default search near. Since the
     * bounded search near failed, the exact value set by the default search near call has to be
     * either -1 or 1:
     * - If it is -1, we need to check the next key, if it exists, is lexicographically greater than
     * the prefix we looked for.
     * - If it is 1, we need to check the previous keys, if it exists, if lexicographically smaller
     * than the prefix we looked for.
     ','line_number':336,'multiline':True]
['text':'
         * The exact value from the default search near call cannot be 0, otherwise the bounded
         * search near should be successful too.
         ','line_number':354,'multiline':True]
['text':' Retrieve the key at the default cursor. ','line_number':360,'multiline':True]
['text':' The key at the default cursor should not contain the prefix. ','line_number':365,'multiline':True]
['text':' Example: ','line_number':368,'multiline':True]
['text':' keys: a, bb, bbb. ','line_number':369,'multiline':True]
['text':' All keys are visible. ','line_number':370,'multiline':True]
['text':' Default search_near(bba) returns bb, exact < 0. ','line_number':371,'multiline':True]
['text':' Bounded search_near(bba) returns WT_NOTFOUND. ','line_number':372,'multiline':True]
['text':'
             * The current key of the default cursor should be lexicographically smaller than the
             * prefix.
             ','line_number':374,'multiline':True]
['text':'
             * The next key of the default cursor should be lexicographically greater than the
             * prefix if it exists.
             ','line_number':381,'multiline':True]
['text':' End of the table. ','line_number':392,'multiline':True]
['text':' Example: ','line_number':396,'multiline':True]
['text':' keys: a, bb, bbb. ','line_number':397,'multiline':True]
['text':' All keys are visible. ','line_number':398,'multiline':True]
['text':' Default search_near(bba) returns bbb, exact > 0. ','line_number':399,'multiline':True]
['text':' Bounded search_near(bba) returns WT_NOTFOUND. ','line_number':400,'multiline':True]
['text':'
             * The current key of the default cursor should be lexicographically greater than the
             * prefix.
             ','line_number':402,'multiline':True]
['text':'
             * The next key of the default cursor should be lexicographically smaller than the
             * prefix if it exists.
             ','line_number':409,'multiline':True]
['text':' End of the table. ','line_number':420,'multiline':True]
