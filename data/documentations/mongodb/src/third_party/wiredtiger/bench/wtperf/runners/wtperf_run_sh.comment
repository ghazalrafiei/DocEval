['text':'!/bin/bash','line_number':1,'multiline':False]
['text':' wtperf_run.sh - run wtperf regression tests on the Jenkins platform.','line_number':3,'multiline':False]
['text':'','line_number':4,'multiline':False]
['text':' The Jenkins machines show variability so we run this script to run','line_number':5,'multiline':False]
['text':' each wtperf test several times.  We throw away the min and max','line_number':6,'multiline':False]
['text':' number and average the remaining values.  That is the number we','line_number':7,'multiline':False]
['text':' give to Jenkins for plotting.  We write these values to a','line_number':8,'multiline':False]
['text':' test.average file in the current directory (which is','line_number':9,'multiline':False]
['text':' build_posix/bench/wtperf).','line_number':10,'multiline':False]
['text':'','line_number':11,'multiline':False]
['text':' This script should be invoked with the pathname of the wtperf test','line_number':12,'multiline':False]
['text':' config to run and the number of runs.','line_number':13,'multiline':False]
['text':'','line_number':14,'multiline':False]
['text':' Consume this arg','line_number':20,'multiline':False]
['text':' Consume this arg','line_number':22,'multiline':False]
['text':' Jenkins removes the quotes from the passed in arg so deal with an arbitrary','line_number':23,'multiline':False]
['text':' number of arguments','line_number':24,'multiline':False]
['text':' -gt 0 ]] ; do','line_number':27,'multiline':False]
['text':' Consume this arg','line_number':33,'multiline':False]
['text':' Each of these has an entry for each op in ops below.','line_number':41,'multiline':False]
['text':' Load needs floating point and bc, handle separately.','line_number':46,'multiline':False]
['text':' getval min/max val cur','line_number':56,'multiline':False]
['text':' Returns the minimum or maximum of val and cur.','line_number':57,'multiline':False]
['text':' min == 0, max == 1.','line_number':58,'multiline':False]
['text':' Copy the artifacts from the run','line_number':102,'multiline':False]
['text':' Load is always using floating point, so handle separately','line_number':106,'multiline':False]
['text':'','line_number':126,'multiline':False]
['text':' Keep running track of min and max for each operation type.','line_number':127,'multiline':False]
['text':'','line_number':128,'multiline':False]
['text':'','line_number':149,'multiline':False]
['text':' After 3 runs see if this is a very stable test.  If so, we','line_number':150,'multiline':False]
['text':' can skip the last 2 runs and just use these values.  We','line_number':151,'multiline':False]
['text':' define "very stable" to be that the min and max are within','line_number':152,'multiline':False]
['text':' 3% of each other.','line_number':153,'multiline':False]
['text':' Only if all values are stable, we can break.','line_number':155,'multiline':False]
['text':'','line_number':183,'multiline':False]
['text':' The sum contains all runs.  Subtract out the min/max values.','line_number':184,'multiline':False]
['text':' Average the remaining and write it out to the file.','line_number':185,'multiline':False]
['text':'','line_number':186,'multiline':False]
