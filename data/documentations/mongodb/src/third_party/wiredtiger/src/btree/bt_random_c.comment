['text':'-
 * Copyright (c) 2014-present MongoDB, Inc.
 * Copyright (c) 2008-2014 WiredTiger, Inc.
 *	All rights reserved.
 *
 * See the file LICENSE for redistribution information.
 ','line_number':1,'multiline':True]
['text':'
 * __random_insert_valid --
 *     Check if the inserted key/value pair is valid.
 ','line_number':11,'multiline':True]
['text':'
 * __random_slot_valid --
 *     Check if the slot key/value pair is valid.
 ','line_number':31,'multiline':True]
['text':' Magic constant: 5000 entries in a skip list is enough to forcibly evict. ','line_number':47,'multiline':True]
['text':' Magic constant: 50 entries in a skip list is enough to predict the size. ','line_number':49,'multiline':True]
['text':'
 * __random_skip_entries --
 *     Return an estimate of how many entries are in a skip list.
 ','line_number':52,'multiline':True]
['text':' [-Wconditional-uninitialized] ','line_number':65,'multiline':True]
['text':' Find a level with enough entries on it to predict the size of the list. ','line_number':70,'multiline':True]
['text':' Use the skiplist probability to estimate the size of the list. ','line_number':79,'multiline':True]
['text':'
     * Random lookups in newly created collections can be slow if a page consists of a large
     * skiplist. Schedule the page for eviction if we encounter a large skiplist. This is worthwhile
     * because applications that take a sample often take many samples, so the overhead of
     * traversing the skip list each time accumulates to real time.
     ','line_number':84,'multiline':True]
['text':' Magic constant: check 3 records before/after the selected record. ','line_number':96,'multiline':True]
['text':' Magic constant: retry 3 times in a skip list before giving up. ','line_number':98,'multiline':True]
['text':'
 * __random_leaf_skip --
 *     Return a random key/value from a skip list.
 ','line_number':101,'multiline':True]
['text':' This is a relatively expensive test, try a few times then quit. ','line_number':114,'multiline':True]
['text':'
         * Randomly select a record in the skip list and walk to it. Remember the entry a few
         * records before our target so we can look around in case our chosen record isn't valid.
         ','line_number':116,'multiline':True]
['text':' Try and return our selected record. ','line_number':129,'multiline':True]
['text':' Check a few records before/after our selected record. ','line_number':136,'multiline':True]
['text':' Magic constant: 100 entries in any randomly chosen skip list is enough to select from it. ','line_number':151,'multiline':True]
['text':' Magic constant: 1000 entries in an initial skip list is enough to always select from it. ','line_number':153,'multiline':True]
['text':'
 * __random_leaf_insert --
 *     Look for a large insert list from which we can select a random item.
 ','line_number':156,'multiline':True]
['text':' Check for a large insert list with no items, that's common when tables are newly created. ','line_number':171,'multiline':True]
['text':'
     * Look for any reasonably large insert list. We're selecting a random insert list and won't end
     * up on the same insert list every time we search this page (unless there's only one list), so
     * decrease the required number of records required to select from the list.
     ','line_number':180,'multiline':True]
['text':' Fall back to the single insert list, if it's not tiny. ','line_number':207,'multiline':True]
['text':' Magic constant: retry 10 times in the disk-based entries before giving up. ','line_number':218,'multiline':True]
['text':'
 * __random_leaf_disk --
 *     Return a random key/value from a page's on-disk entries.
 ','line_number':221,'multiline':True]
['text':' This is a relatively cheap test, so try several times. ','line_number':239,'multiline':True]
['text':' Magic constant: cursor up to 250 next/previous records before selecting a key. ','line_number':250,'multiline':True]
['text':' Magic constant: 1000 disk-based entries in a page is enough to always select from them. ','line_number':252,'multiline':True]
['text':'
 * __random_leaf --
 *     Return a random key/value from a row-store leaf page.
 ','line_number':255,'multiline':True]
['text':'
     * If the page has a sufficiently large number of disk-based entries, randomly select from them.
     * Ignoring large insert lists could skew the results, but enough disk-based entries should span
     * a reasonable chunk of the name space.
     ','line_number':271,'multiline':True]
['text':' Look for any large insert list and select from it. ','line_number':282,'multiline':True]
['text':'
     * Try again if there are at least a few hundred disk-based entries or this is a page as we read
     * it from disk, it might be a normal leaf page with big items.
     ','line_number':287,'multiline':True]
['text':'
     * We don't have many disk-based entries, we didn't find any large insert lists. Where we get
     * into trouble is a small number of pages with large numbers of deleted items. Try and move out
     * of the problematic namespace into something we can use by cursoring forward or backward. On a
     * page with a sufficiently large group of deleted items where the randomly selected entries are
     * all deleted, simply moving to the next or previous record likely means moving to the same
     * record every time, so move the cursor a random number of items. Further, detect if we're
     * about to return the same item twice in a row and try to avoid it. (If there's only a single
     * record, or only a pair of records, we'll still end up in trouble, but at some point the tree
     * is too small to do anything better.) All of this is slow and expensive, but the alternative
     * is customer complaints.
     ','line_number':298,'multiline':True]
['text':' Forward from the beginning of the page. ','line_number':312,'multiline':True]
['text':' Reverse direction. ','line_number':316,'multiline':True]
['text':'
             * Skip the record we returned last time, once. Clear the tracking value so we don't
             * skip that record twice, it just means the tree is too small for anything reasonable.
             *
             * Testing WT_DATA_IN_ITEM requires explanation: the cursor temporary buffer is used to
             * build keys for row-store searches and can point into the row-store page (which might
             * have been freed subsequently). If a previous random call set the temporary buffer,
             * then it will be local data. If it's local data for some other reason than a previous
             * random call, we don't care: it won't match, and if it does we just retry.
             ','line_number':324,'multiline':True]
['text':'
 * __wt_random_descent --
 *     Find a random page in a tree for either sampling or eviction.
 ','line_number':348,'multiline':True]
['text':'
     * This function is called by eviction to find a random page in the cache. That case is
     * indicated by the WT_READ_CACHE flag. Ordinary lookups in a tree will read pages into cache as
     * needed.
     ','line_number':368,'multiline':True]
['text':'
         * Discard the currently held page and restart the search from the root.
         ','line_number':377,'multiline':True]
['text':' Search the internal pages of the tree. ','line_number':383,'multiline':True]
['text':' Eviction just wants any random child. ','line_number':393,'multiline':True]
['text':'
         * There may be empty pages in the tree, and they're useless to us. If we don't find a
         * non-empty page in "entries" random guesses, take the first non-empty page in the tree. If
         * the search page contains nothing other than empty pages, restart from the root some
         * number of times before giving up.
         *
         * Random sampling is looking for a key/value pair on a random leaf page, and so will accept
         * any page that contains a valid key/value pair, so on-disk is fine, but deleted is not.
         ','line_number':399,'multiline':True]
['text':'
         * Swap the current page for the child page. If the page splits while we're retrieving it,
         * restart the search at the root.
         *
         * On other error, simply return, the swap call ensures we're holding nothing on failure.
         ','line_number':428,'multiline':True]
['text':'
     * There is no point starting with the root page: the walk will exit immediately. In that case
     * we aren't holding a hazard pointer so there is nothing to release.
     ','line_number':446,'multiline':True]
['text':'
 * __wt_btcur_next_random --
 *     Move to a random record in the tree. There are two algorithms, one where we select a record
 *     at random from the whole tree on each retrieval and one where we first select a record at
 *     random from the whole tree, and then subsequently sample forward from that location. The
 *     sampling approach allows us to select reasonably uniform random points from unbalanced trees.
 ','line_number':455,'multiline':True]
['text':'
     * Only supports row-store: applications can trivially select a random value from a
     * column-store, if there were any reason to do so.
     ','line_number':481,'multiline':True]
['text':'
     * Under some conditions we end up using the underlying cursor.next to walk through the object.
     * Since there are multiple calls, we can hit the cursor-order checks, turn them off.
     ','line_number':493,'multiline':True]
['text':'
     * If we don't have a current position in the tree, or if retrieving random values without
     * sampling, pick a roughly random leaf page in the tree and return an entry from it.
     ','line_number':499,'multiline':True]
['text':'
         * Random descent may return not-found: the tree might be empty or have so many deleted
         * items we didn't find any valid pages. We can't return WT_NOTFOUND to the application
         * unless a tree is really empty, fallback to skipping through tree pages.
         ','line_number':512,'multiline':True]
['text':'
     * Cursor through the tree, skipping past the sample size of the leaf pages in the tree between
     * each random key return to compensate for unbalanced trees.
     *
     * If the random descent attempt failed, we don't have a configured sample size, use 100 for no
     * particular reason.
     ','line_number':520,'multiline':True]
['text':'
     * If the random descent attempt failed, or it's our first skip attempt,
     * we haven't yet set the pages to skip, do it now.
     *
     * Use the underlying file size divided by its block allocation size as
     * our guess of leaf pages in the file (this can be entirely wrong, as
     * it depends on how many pages are in this particular checkpoint, how
     * large the leaf and internal pages really are, and other factors).
     * Then, divide that value by the configured sample size and increment
     * the final result to make sure tiny files don't leave us with a skip
     * value of 0.
     *
     * !!!
     * Ideally, the number would be prime to avoid restart issues.
     ','line_number':530,'multiline':True]
['text':'
     * Be paranoid about loop termination: first, if the last leaf page skipped was also the last
     * leaf page in the tree, skip may be set to zero on return along with the NULL WT_REF
     * end-of-walk condition. Second, if a tree has no valid pages at all (the condition after
     * initial creation), we might make no progress at all, or finally, if a tree has only deleted
     * pages, we'll make progress, but never get a useful WT_REF. And, of course, the tree can
     * switch from one of these states to another without warning. Decrement skip regardless of what
     * is happening in the search, guarantee we eventually quit.
     *
     * Pages read for data sampling aren't "useful"; don't update the read generation of pages
     * already in memory, and if a page is read, set its generation to a low value so it is evicted
     * quickly.
     ','line_number':551,'multiline':True]
['text':'
     * We can't return WT_NOTFOUND to the application unless a tree is really empty, fallback to a
     * random entry from the first page in the tree that has anything at all.
     ','line_number':574,'multiline':True]
['text':' Select a random entry from the leaf page. ','line_number':581,'multiline':True]
