['text':'-
 * Copyright (c) 2014-present MongoDB, Inc.
 * Copyright (c) 2008-2014 WiredTiger, Inc.
 *	All rights reserved.
 *
 * See the file LICENSE for redistribution information.
 ','line_number':1,'multiline':True]
['text':'
 * There's a bunch of stuff we pass around during verification, group it together to make the code
 * prettier.
 ','line_number':11,'multiline':True]
['text':' Records seen so far ','line_number':16,'multiline':True]
['text':' Largest key ','line_number':18,'multiline':True]
['text':' Largest key page ','line_number':19,'multiline':True]
['text':' Progress counter ','line_number':22,'multiline':True]
['text':' Configuration options passed in. ','line_number':24,'multiline':True]
['text':' Stable timestamp to verify against if desired ','line_number':25,'multiline':True]
['text':' Configure: dump special ','line_number':28,'multiline':True]
['text':' Page layout information. ','line_number':35,'multiline':True]
['text':' Temporary buffers ','line_number':38,'multiline':True]
['text':'
 * __verify_config --
 *     Debugging: verification supports dumping pages in various formats.
 ','line_number':55,'multiline':True]
['text':' Ignored unless a value has been set ','line_number':93,'multiline':True]
['text':'
 * __verify_config_offsets --
 *     Debugging: optionally dump specific blocks from the file.
 ','line_number':109,'multiline':True]
['text':'
         * Quit after dumping the requested blocks. (That's hopefully what the user wanted, all of
         * this stuff is just hooked into verify because that's where we "dump blocks" for
         * debugging.)
         ','line_number':126,'multiline':True]
['text':' NOLINTNEXTLINE(cert-err34-c) ','line_number':132,'multiline':True]
['text':'
 * __dump_layout --
 *     Dump the tree shape.
 ','line_number':144,'multiline':True]
['text':'
 * __wt_verify --
 *     Verify a file.
 ','line_number':174,'multiline':True]
['text':' Check configuration strings. ','line_number':210,'multiline':True]
['text':' Optionally dump specific block offsets. ','line_number':213,'multiline':True]
['text':'
     * Get a list of the checkpoints for this file. Empty objects have no checkpoints, in which case
     * there's no work to do.
     ','line_number':218,'multiline':True]
['text':' Inform the underlying block manager we're verifying. ','line_number':228,'multiline':True]
['text':'
     * Skip the history store explicit call if we're performing a metadata verification. The
     * metadata file is verified before we verify the history store, and it makes no sense to verify
     * the history store against itself.
     ','line_number':232,'multiline':True]
['text':' Loop through the file's checkpoints, verifying each one. ','line_number':239,'multiline':True]
['text':' Fake checkpoints require no work. ','line_number':243,'multiline':True]
['text':' House-keeping between checkpoints. ','line_number':247,'multiline':True]
['text':' Load the checkpoint. ','line_number':255,'multiline':True]
['text':' Skip trees with no root page. ','line_number':259,'multiline':True]
['text':'
             * Create a fake, unpacked parent cell for the tree based on the checkpoint information.
             ','line_number':270,'multiline':True]
['text':' Verify the tree. ','line_number':279,'multiline':True]
['text':'
             * The checkpoints are in time-order, so the last one in the list is the most recent. If
             * this is the most recent checkpoint, verify the history store against it.
             ','line_number':283,'multiline':True]
['text':'
                 * We cannot error out here. If we got an error verifying the history store, we need
                 * to follow through with reacquiring the exclusive call below. We'll error out
                 * after that and unloading this checkpoint.
                 ','line_number':289,'multiline':True]
['text':'
             * If the read_corrupt mode was turned on, we may have continued traversing and
             * verifying the pages of the tree despite encountering an error. Set the error.
             ','line_number':296,'multiline':True]
['text':'
             * We have an exclusive lock on the handle, but we're swapping root pages in-and-out of
             * that handle, and there's a race with eviction entering the tree and seeing an invalid
             * root page. Eviction must work on trees being verified (else we'd have to do our own
             * eviction), lock eviction out whenever we're loading a new root page. This loop works
             * because we are called with eviction locked out, so we release the lock at the top of
             * the loop and re-acquire it here.
             ','line_number':303,'multiline':True]
['text':' Unload the checkpoint. ','line_number':315,'multiline':True]
['text':'
         * We've finished one checkpoint's verification (verification, then cache eviction and
         * checkpoint unload): if any errors occurred, quit. Done this way because otherwise we'd
         * need at least two more state variables on error, one to know if we need to discard the
         * tree from the cache and one to know if we need to unload the checkpoint.
         ','line_number':318,'multiline':True]
['text':' Display the tree shape. ','line_number':326,'multiline':True]
['text':' Inform the underlying block manager we're done. ','line_number':333,'multiline':True]
['text':' Discard the list of checkpoints. ','line_number':337,'multiline':True]
['text':' Free allocated memory. ','line_number':341,'multiline':True]
['text':'
 * __verify_checkpoint_reset --
 *     Reset anything needing to be reset for each new checkpoint verification.
 ','line_number':352,'multiline':True]
['text':'
     * Key order is per checkpoint, reset the data length that serves as a flag value.
     ','line_number':359,'multiline':True]
['text':' Record total is per checkpoint, reset the record count. ','line_number':364,'multiline':True]
['text':' Tree depth. ','line_number':367,'multiline':True]
['text':'
 * __verify_addr_string --
 *     Figure out a page's "address" and load a buffer with a printable, nul-terminated
 *     representation of that address.
 ','line_number':371,'multiline':True]
['text':'
 * __verify_addr_ts --
 *     Check an address block's timestamps.
 ','line_number':398,'multiline':True]
['text':'
 * __verify_tree --
 *     Verify a tree, recursively descending through it in depth-first fashion. The page argument
 *     was physically verified (so we know it's correctly formed), and the in-memory version built.
 *     Our job is to check logical relationships in the page and in the tree.
 ','line_number':414,'multiline':True]
['text':'
     * The verify operation does not go through the same tree walk flow as other operations
     * utilizing the regular tree walk function. Check for potential pages to pre-fetch here as
     * well.
     ','line_number':437,'multiline':True]
['text':' Optionally dump address information. ','line_number':448,'multiline':True]
['text':' Track the shape of the tree. ','line_number':453,'multiline':True]
['text':'
     * The page's physical structure was verified when it was read into memory by the read server
     * thread, and then the in-memory version of the page was built. Now we make sure the page and
     * tree are logically consistent.
     *
     * !!!
     * The problem: (1) the read server has to build the in-memory version of the page because the
     * read server is the thread that flags when any thread can access the page in the tree; (2) we
     * can't build the in-memory version of the page until the physical structure is known to be OK,
     * so the read server has to verify at least the physical structure of the page; (3) doing
     * complete page verification requires reading additional pages (for example, overflow keys
     * imply reading overflow pages in order to test the key's order in the page); (4) the read
     * server cannot read additional pages because it will hang waiting on itself. For this reason,
     * we split page verification into a physical verification, which allows the in-memory version
     * of the page to be built, and then a subsequent logical verification which happens here.
     *
     * Report progress occasionally.
     ','line_number':459,'multiline':True]
['text':' Optionally dump the blocks or page in debugging mode. ','line_number':481,'multiline':True]
['text':' Make sure the page we got belongs in this kind of tree. ','line_number':488,'multiline':True]
['text':' Column-store key order checks: check the page's record number. ','line_number':510,'multiline':True]
['text':'
         * FLCS trees can have WT_PAGE_COL_INT or WT_PAGE_COL_FIX pages, and gaps in the namespace
         * are not allowed; VLCS trees can have WT_PAGE_COL_INT or WT_PAGE_COL_VAR pages, and gaps
         * in the namespace *are* allowed. Use the tree type to pick the check logic.
         ','line_number':515,'multiline':True]
['text':'
     * Row-store leaf page key order check: it's a depth-first traversal, the first key on this page
     * should be larger than any key previously seen.
     ','line_number':533,'multiline':True]
['text':'
     * Check page content, additionally updating the column-store record count. If a tree is empty
     * (just created), it won't have a disk image; if there is no disk image, there is no page
     * content to check.
     ','line_number':543,'multiline':True]
['text':'
         * Compare the write generation number on the page to the write generation number on the
         * parent. Since a parent page's reconciliation takes place once all of its child pages have
         * been completed, the parent page's write generation number must be higher than that of its
         * children.
         ','line_number':549,'multiline':True]
['text':' Compare the address type against the page type. ','line_number':576,'multiline':True]
['text':' Check tree connections and recursively descend the tree. ','line_number':599,'multiline':True]
['text':' For each entry in an internal page, verify the subtree. ','line_number':602,'multiline':True]
['text':'
             * It's a depth-first traversal: this entry's starting record number should be 1 more
             * than the total records reviewed to this point. However, for VLCS fast-truncate can
             * introduce gaps; allow a gap but not overlapping ranges. For FLCS, gaps are not
             * permitted.
             ','line_number':605,'multiline':True]
['text':'
             * If there is no address, it should be the first entry in the page. This is the case
             * where inmem inserts a blank page to fill a namespace gap on the left-hand side of the
             * tree. If the situation is what we expect, go to the next entry; otherwise complain.
             ','line_number':629,'multiline':True]
['text':' The entry number has already been incremented above, so 1 is the first. ','line_number':635,'multiline':True]
['text':' Unpack the address block and check timestamps ','line_number':644,'multiline':True]
['text':' Verify the subtree. ','line_number':648,'multiline':True]
['text':'
             * If configured, continue traversing through the pages of the tree even after
             * encountering errors reading in the page.
             ','line_number':652,'multiline':True]
['text':' For each entry in an internal page, verify the subtree. ','line_number':672,'multiline':True]
['text':'
             * It's a depth-first traversal: this entry's starting key should be larger than the
             * largest key previously reviewed.
             *
             * The 0th key of any internal page is magic, and we can't test against it.
             ','line_number':675,'multiline':True]
['text':' Unpack the address block and check timestamps ','line_number':685,'multiline':True]
['text':' Verify the subtree. ','line_number':689,'multiline':True]
['text':'
             * If configured, continue traversing through the pages of the tree even after
             * encountering errors reading in the page.
             ','line_number':693,'multiline':True]
['text':'
 * __verify_row_int_key_order --
 *     Compare a key on an internal page to the largest key we've seen so far; update the largest
 *     key we've seen so far to that key.
 ','line_number':716,'multiline':True]
['text':'
     * The maximum key is usually set from the leaf page first. If the first leaf page is corrupted,
     * it is possible that the key is not set. In that case skip this check.
     ','line_number':731,'multiline':True]
['text':' Get the parent page's internal key. ','line_number':738,'multiline':True]
['text':' There is an edge case where the maximum key is not set due the first leaf being corrupted. ','line_number':741,'multiline':True]
['text':' Compare the key against the largest key we've seen so far. ','line_number':743,'multiline':True]
['text':' Update the largest key we've seen to the key just checked. ','line_number':758,'multiline':True]
['text':'
 * __verify_row_leaf_key_order --
 *     Compare the first key on a leaf page to the largest key we've seen so far; update the largest
 *     key we've seen so far to the last key on the page.
 ','line_number':765,'multiline':True]
['text':'
     * If a tree is empty (just created), it won't have keys; if there are no keys, we're done.
     ','line_number':780,'multiline':True]
['text':'
     * We visit our first leaf page before setting the maximum key (the 0th keys on the internal
     * pages leading to the smallest leaf in the tree are all empty entries).
     ','line_number':786,'multiline':True]
['text':'
         * Compare the key against the largest key we've seen so far.
         *
         * If we're comparing against a key taken from an internal page, we can compare equal (which
         * is an expected path, the internal page key is often a copy of the leaf page's first key).
         * But, in the case of the 0th slot on an internal page, the last key we've seen was a key
         * from a previous leaf page, and it's not OK to compare equally in that case.
         ','line_number':793,'multiline':True]
['text':' Update the largest key we've seen to the last key on this page. ','line_number':813,'multiline':True]
['text':'
 * __verify_overflow --
 *     Read in an overflow page and check it.
 ','line_number':820,'multiline':True]
['text':' Read and verify the overflow item. ','line_number':832,'multiline':True]
['text':'
     * The physical page has already been verified, but we haven't confirmed it was an overflow
     * page, only that it was a valid page. Confirm it's the type of page we expected.
     ','line_number':835,'multiline':True]
['text':'
 * __verify_ts_stable_cmp --
 *     Verify that a pair of start and stop timestamps are valid against the global stable
 *     timestamp. Takes in either a key for history store timestamps or a ref and cell number.
 ','line_number':848,'multiline':True]
['text':'
 * __verify_key_hs --
 *     Verify a key against the history store. The unpack denotes the data store's timestamp range
 *     information and is used for verifying timestamp range overlaps.
 ','line_number':892,'multiline':True]
['text':' FIXME-WT-10779 - Enable the history store validation. ','line_number':901,'multiline':True]
['text':'
     * Set the data store timestamp and transactions to initiate timestamp range verification. Since
     * transaction-ids are wiped out on start, we could possibly have a start txn-id of WT_TXN_NONE,
     * in which case we initialize our newest with the max txn-id.
     ','line_number':916,'multiline':True]
['text':'
     * Open a history store cursor positioned at the end of the data store key (the newest record)
     * and iterate backwards until we reach a different key or btree.
     ','line_number':923,'multiline':True]
['text':' Verify the newer record's start is later than the older record's stop. ','line_number':932,'multiline':True]
['text':'
         * Since we are iterating from newer to older, the current older record becomes the newer
         * for the next round of verification.
         ','line_number':947,'multiline':True]
['text':'
 * __verify_page_content_int --
 *     Verify an internal page's content.
 ','line_number':965,'multiline':True]
['text':' Walk the page, verifying overflow pages and validating timestamps. ','line_number':984,'multiline':True]
['text':'
 * __verify_page_content_fix --
 *     Verify the page's content. Like __verify_page_content_leaf but for FLCS pages.
 ','line_number':1028,'multiline':True]
['text':' Count the keys. ','line_number':1046,'multiline':True]
['text':' Examine each row; iterate the keys and time windows in parallel. ','line_number':1049,'multiline':True]
['text':' Walk the time windows, if there are any. ','line_number':1050,'multiline':True]
['text':' This row has a time window. ','line_number':1054,'multiline':True]
['text':' The printable cell number for the value is 2x the entry number (tw) plus 1. ','line_number':1056,'multiline':True]
['text':' We are supposed to see only values (not keys) and only plain values belong. ','line_number':1062,'multiline':True]
['text':' The value cell should contain only a time window. ','line_number':1069,'multiline':True]
['text':'
         * Verify key-associated history-store entries. Note that while a WT_COL_FIX_VERSION_NIL
         * page written by a build that does not support FLCS timestamps and history will have no
         * history store entries, such pages can also be written by newer builds; so we should
         * always validate the history entries.
         ','line_number':1091,'multiline':True]
['text':' The caller checks that the address cell pointing to us is no-overflow, so we needn't. ','line_number':1103,'multiline':True]
['text':'
 * __verify_page_content_leaf --
 *     Verify the page's content.
 ','line_number':1108,'multiline':True]
['text':' Walk the page, tracking timestamps and verifying overflow pages. ','line_number':1134,'multiline':True]
['text':' Verify key-associated history-store entries. ','line_number':1176,'multiline':True]
['text':'
     * Object if a leaf-no-overflow address cell references a page with overflow keys, but don't
     * object if a leaf address cell references a page without overflow keys. Reconciliation doesn't
     * guarantee every leaf page without overflow items will be a leaf-no-overflow type.
     ','line_number':1197,'multiline':True]
