['text':'-
 * Copyright (c) 2014-present MongoDB, Inc.
 * Copyright (c) 2008-2014 WiredTiger, Inc.
 *	All rights reserved.
 *
 * See the file LICENSE for redistribution information.
 ','line_number':1,'multiline':True]
['text':' Easy way to set a breakpoint when tracking corruption ','line_number':26,'multiline':True]
['text':' Easy way to set a breakpoint when tracking corruption ','line_number':41,'multiline':True]
['text':'
 * WT_CELL_FOREACH_VRFY --
 *	Iterate through each cell on a page. Verify-specific version of the
 * WT_CELL_FOREACH macro, created because the loop can't simply unpack cells,
 * verify has to do additional work to ensure that unpack is safe.
 ','line_number':49,'multiline':True]
['text':'
 * __wt_verify_dsk_image --
 *     Verify a single block as read from disk.
 ','line_number':63,'multiline':True]
['text':' Initialize the verify information. ','line_number':74,'multiline':True]
['text':' Check the page type. ','line_number':85,'multiline':True]
['text':' Check the page record number. ','line_number':100,'multiline':True]
['text':' Check the page flags. ','line_number':120,'multiline':True]
['text':' Check the unused byte. ','line_number':142,'multiline':True]
['text':' Check the page version. ','line_number':146,'multiline':True]
['text':'
     * Any bytes after the data chunk should be nul bytes; ignore if the size is 0, that allows easy
     * checking of disk images where we don't have the size.
     ','line_number':155,'multiline':True]
['text':' Check for empty pages, then verify the items on the page. ','line_number':168,'multiline':True]
['text':' NOTREACHED ','line_number':203,'multiline':True]
['text':'
 * __wt_verify_dsk --
 *     Verify a single Btree page as read from disk.
 ','line_number':206,'multiline':True]
['text':'
 * __verify_dsk_addr_validity --
 *     Verify an address cell's validity window.
 ','line_number':217,'multiline':True]
['text':'
 * __verify_dsk_value_validity --
 *     Verify a value cell's validity window.
 ','line_number':238,'multiline':True]
['text':'
 * __verify_dsk_addr_page_del --
 *     Verify a deleted-page address cell's page delete information.
 ','line_number':258,'multiline':True]
['text':' The durable timestamp in the page_delete info should not be before its commit timestamp. ','line_number':270,'multiline':True]
['text':'
     * The timestamps in the page_delete information are a global stop time for the entire page.
     * This is not reflected in the aggregate, but is supposed to be reflected in the parent's
     * aggregate. First check that the aggregate is consistent with being deleted at the given time.
     ','line_number':277,'multiline':True]
['text':'
     * Merge this information into the aggregate and verify the results, against the parent if
     * possible.
     ','line_number':313,'multiline':True]
['text':'
     * The other elements of the structure are not stored on disk and are set unconditionally by the
     * unpack code, so just assert about them. Prepared fast-truncates are not allowed to be
     * evicted.
     ','line_number':329,'multiline':True]
['text':'
 * __verify_row_key_order_check --
 *     Check key ordering for row-store pages.
 ','line_number':341,'multiline':True]
['text':'
 * __verify_dsk_row_int --
 *     Walk a WT_PAGE_ROW_INT disk page and verify it.
 ','line_number':378,'multiline':True]
['text':' Carefully unpack the cell. ','line_number':412,'multiline':True]
['text':' Check the raw and collapsed cell types. ','line_number':419,'multiline':True]
['text':' Internal row-store cells should not have prefix compression or recno/rle fields. ','line_number':424,'multiline':True]
['text':'
         * Check ordering relationships between the WT_CELL entries. For row-store internal pages,
         * check for:
         *	- two values in a row,
         *	- two keys in a row,
         *	- a value as the first cell on a page.
         ','line_number':433,'multiline':True]
['text':' Check the validity window. ','line_number':473,'multiline':True]
['text':' Check if any referenced item has an invalid address. ','line_number':483,'multiline':True]
['text':' Check that any fast-delete info is consistent with the validity window. ','line_number':496,'multiline':True]
['text':'
         * Remaining checks are for key order. If this cell isn't a key, we're done, move to the
         * next cell. If this cell is an overflow item, instantiate the key and compare it with the
         * last key.
         ','line_number':501,'multiline':True]
['text':' Get the cell's data/length and make sure we have enough buffer space. ','line_number':508,'multiline':True]
['text':' Copy the data into place. ','line_number':511,'multiline':True]
['text':' Not a key -- continue with the next cell. ','line_number':519,'multiline':True]
['text':'
         * Compare the current key against the last key.
         *
         * Be careful about the 0th key on internal pages: we only store the first byte and custom
         * collators may not be able to handle truncated keys.
         ','line_number':523,'multiline':True]
['text':' Swap the buffers. ','line_number':532,'multiline':True]
['text':'
     * On row-store internal pages, the key count should be equal to half the number of physical
     * entries.
     ','line_number':539,'multiline':True]
['text':'
 * __verify_dsk_row_leaf --
 *     Walk a WT_PAGE_ROW_LEAF disk page and verify it.
 ','line_number':558,'multiline':True]
['text':' Carefully unpack the cell. ','line_number':596,'multiline':True]
['text':' Check the raw and collapsed cell types. ','line_number':603,'multiline':True]
['text':' Leaf row-store cells should not have recno/rle fields. ','line_number':608,'multiline':True]
['text':'
         * Check ordering relationships between the WT_CELL entries. For row-store leaf pages, check
         * for:
         *	- two values in a row,
         *	- a value as the first cell on a page.
         ','line_number':614,'multiline':True]
['text':' Check the validity window. ','line_number':642,'multiline':True]
['text':' Check if any referenced item has an invalid address. ','line_number':650,'multiline':True]
['text':'
         * Remaining checks are for key order and prefix compression. If this cell isn't a key,
         * we're done, move to the next cell. If this cell is an overflow item, instantiate the key
         * and compare it with the last key. Otherwise, we have to deal with prefix compression.
         ','line_number':660,'multiline':True]
['text':' Not a key -- continue with the next cell. ','line_number':672,'multiline':True]
['text':'
         * Prefix compression checks.
         *
         * Confirm the first non-overflow key on a page has a zero prefix compression count.
         ','line_number':676,'multiline':True]
['text':' Confirm the prefix compression count is possible. ','line_number':689,'multiline':True]
['text':'
         * Get the cell's data/length and make sure we have enough buffer space.
         ','line_number':696,'multiline':True]
['text':' Copy the prefix then the data into place. ','line_number':701,'multiline':True]
['text':'
         * Compare the current key against the last key.
         ','line_number':708,'multiline':True]
['text':'
         * Swap the buffers: last always references the last key entry, last_pfx and last_ovfl
         * reference the last prefix-compressed and last overflow key entries. Current gets pointed
         * to the buffer we're not using this time around, which is where the next key goes.
         ','line_number':715,'multiline':True]
['text':'
     * On standard row-store leaf pages there's no check to make, there may be more keys than values
     * as zero-length values aren't physically stored on the page. On row-store leaf pages, where
     * the "no empty values" flag is set, the key count should be equal to half the number of
     * physical entries. On row-store leaf pages where the "all empty values" flag is set, the key
     * count should be equal to the number of physical entries.
     ','line_number':732,'multiline':True]
['text':'
 * __verify_dsk_col_int --
 *     Walk a WT_PAGE_COL_INT disk page and verify it.
 ','line_number':761,'multiline':True]
['text':' Carefully unpack the cell. ','line_number':782,'multiline':True]
['text':' Check the raw and collapsed cell types. ','line_number':787,'multiline':True]
['text':' Check the validity window. ','line_number':791,'multiline':True]
['text':' Check if any referenced item is entirely in the file. ','line_number':794,'multiline':True]
['text':'
 * __verify_dsk_col_fix --
 *     Walk a WT_PAGE_COL_FIX disk page and verify it.
 ','line_number':805,'multiline':True]
['text':' First, check that the bitmap data isn't off the end of the page. ','line_number':825,'multiline':True]
['text':' Check that any leftover bits in the bitmap are zeroed. ','line_number':831,'multiline':True]
['text':' Unpack the auxiliary header. This function is expected to be paranoid enough to use here. ','line_number':836,'multiline':True]
['text':' No time window data; nothing more to do. ','line_number':843,'multiline':True]
['text':' Validate the offsets in the auxiliary header. ','line_number':852,'multiline':True]
['text':' The empty-space offset is the also end of the auxiliary header. ','line_number':854,'multiline':True]
['text':' Check the number of entries in the auxiliary header. (Note dsk->u.entries is uint32_t.) ','line_number':868,'multiline':True]
['text':' The space between the end of the auxiliary header and the auxiliary data should be zeroed. ','line_number':875,'multiline':True]
['text':' Carefully unpack the cell. ','line_number':889,'multiline':True]
['text':' Check the raw cell type. ','line_number':894,'multiline':True]
['text':' The cells should alternate keys and values. ','line_number':897,'multiline':True]
['text':' Unpack the key and make sure it's in range. It's a recno offset. ','line_number':904,'multiline':True]
['text':' Note that unpack->size does not reach past the end of the page. ','line_number':906,'multiline':True]
['text':'
             * Empty validity windows should not result in on-disk cells. Note that because we used
             * the safe unpack, the time window won't have been cleared even if out of date, so we
             * won't get spurious failures from that situation.
             ','line_number':927,'multiline':True]
['text':' Check the validity window. ','line_number':937,'multiline':True]
['text':'
 * __verify_dsk_col_var --
 *     Walk a WT_PAGE_COL_VAR disk page and verify it.
 ','line_number':953,'multiline':True]
['text':' Carefully unpack the cell. ','line_number':989,'multiline':True]
['text':' Check the raw and collapsed cell types. ','line_number':994,'multiline':True]
['text':' Check the validity window. ','line_number':999,'multiline':True]
['text':' Check if any referenced item is entirely in the file. ','line_number':1002,'multiline':True]
['text':'
         * Compare the last two items and see if reconciliation missed a chance for RLE encoding.
         * The time windows must match and we otherwise don't have to care about data encoding, a
         * byte comparison is enough.
         ','line_number':1010,'multiline':True]
['text':'
 * __verify_dsk_memsize --
 *     Verify the last cell on the page matches the page's memory size.
 ','line_number':1050,'multiline':True]
['text':'
     * We use the fact that cells exactly fill a page to detect the case of a row-store leaf page
     * where the last cell is a key (that is, there's no subsequent value cell). Check for any page
     * type containing cells.
     ','line_number':1059,'multiline':True]
['text':'
 * __verify_dsk_chunk --
 *     Verify a Chunk O' Data on a Btree page.
 ','line_number':1072,'multiline':True]
['text':'
     * Fixed-length column-store and overflow pages are simple chunks of data-> Verify the data
     * doesn't overflow the end of the page.
     ','line_number':1087,'multiline':True]
['text':' Any bytes after the data chunk should be nul bytes. ','line_number':1095,'multiline':True]
['text':'
 * __err_cell_corrupt --
 *     Generic corrupted cell, we couldn't read it.
 ','line_number':1104,'multiline':True]
['text':'
 * __err_cell_corrupt_or_eof --
 *     Generic corrupted cell or item references non-existent file pages error.
 ','line_number':1115,'multiline':True]
['text':'
 * __wt_cell_type_check --
 *     Check the cell type against the page type.
 ','line_number':1127,'multiline':True]
['text':' FALLTHROUGH ','line_number':1149,'multiline':True]
['text':'
         * Removed overflow cells are in-memory only, it's an error to ever see one on a disk page.
         ','line_number':1162,'multiline':True]
['text':' FALLTHROUGH ','line_number':1169,'multiline':True]
['text':'
 * __err_cell_type --
 *     Generic illegal cell type for a particular page type error.
 ','line_number':1180,'multiline':True]
