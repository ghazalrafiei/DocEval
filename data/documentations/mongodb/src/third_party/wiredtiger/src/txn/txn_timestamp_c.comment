['text':'-
 * Copyright (c) 2014-present MongoDB, Inc.
 * Copyright (c) 2008-2014 WiredTiger, Inc.
 *	All rights reserved.
 *
 * See the file LICENSE for redistribution information.
 ','line_number':1,'multiline':True]
['text':'
 * __wt_txn_parse_timestamp_raw --
 *     Decodes and sets a timestamp. Don't do any checking.
 ','line_number':11,'multiline':True]
['text':' Protect against unexpectedly long hex strings. ','line_number':34,'multiline':True]
['text':'
 * __wt_txn_parse_timestamp --
 *     Decodes and sets a timestamp checking it is non-zero.
 ','line_number':54,'multiline':True]
['text':'
 * __txn_get_read_timestamp --
 *     Get the read timestamp from the transaction.
 ','line_number':70,'multiline':True]
['text':'
 * __wt_txn_get_pinned_timestamp --
 *     Calculate the current pinned timestamp.
 ','line_number':80,'multiline':True]
['text':' If including oldest and there's none set, we're done, nothing else matters. ','line_number':99,'multiline':True]
['text':' Check for a running checkpoint ','line_number':110,'multiline':True]
['text':' Walk the array of concurrent transactions. ','line_number':115,'multiline':True]
['text':'
         * A zero timestamp is possible here only when the oldest timestamp is not accounted for.
         ','line_number':119,'multiline':True]
['text':'
 * __txn_get_durable_timestamp --
 *     Get the durable timestamp from the transaction.
 ','line_number':135,'multiline':True]
['text':'
 * __txn_global_query_timestamp --
 *     Query a timestamp on the global transaction.
 ','line_number':145,'multiline':True]
['text':'
         * If there is no durable timestamp set, there is nothing to return. No need to walk the
         * concurrent transactions.
         ','line_number':165,'multiline':True]
['text':' Walk the array of concurrent transactions. ','line_number':178,'multiline':True]
['text':' Read-only value forever. Make sure we don't used a cached version. ','line_number':191,'multiline':True]
['text':' Read-only value forever. No lock needed. ','line_number':203,'multiline':True]
['text':'
 * __txn_query_timestamp --
 *     Query a timestamp within this session's transaction.
 ','line_number':215,'multiline':True]
['text':'
 * __wt_txn_query_timestamp --
 *     Query a timestamp. The caller may query the global transaction or the session's transaction.
 ','line_number':246,'multiline':True]
['text':'
 * __wt_txn_update_pinned_timestamp --
 *     Update the pinned timestamp (the oldest timestamp that has to be maintained for current or
 *     future readers).
 ','line_number':265,'multiline':True]
['text':' Skip locking and scanning when the oldest timestamp is pinned. ','line_number':278,'multiline':True]
['text':' Scan to find the global pinned timestamp. ','line_number':282,'multiline':True]
['text':'
     * Scan the global pinned timestamp again, it's possible that it got changed after the previous
     * scan.
     ','line_number':295,'multiline':True]
['text':'
 * __wt_txn_global_set_timestamp --
 *     Set a global transaction timestamp.
 ','line_number':314,'multiline':True]
['text':' If no timestamp was supplied, there's nothing to do. ','line_number':348,'multiline':True]
['text':'
     * Parsing will initialize the timestamp to zero even if it is not configured.
     ','line_number':352,'multiline':True]
['text':' It is a no-op to set the oldest or stable timestamps behind the global values. ','line_number':370,'multiline':True]
['text':'
     * First do error checking on the timestamp values. The oldest timestamp must always be less
     * than or equal to the stable timestamp. If we're only setting one then compare against the
     * system timestamp. If we're setting both then compare the passed in values.
     ','line_number':377,'multiline':True]
['text':'
     * The oldest and stable timestamps must always satisfy the condition that oldest <= stable.
     ','line_number':387,'multiline':True]
['text':' Check if we are actually updating anything. ','line_number':401,'multiline':True]
['text':'
     * This method can be called from multiple threads, check that we are moving the global
     * timestamps forwards.
     *
     * The exception is the durable timestamp, where the application can move it backwards (in fact,
     * it only really makes sense to explicitly move it backwards because it otherwise tracks the
     * largest durable_timestamp so it moves forward whenever transactions are assigned timestamps).
     ','line_number':407,'multiline':True]
['text':'
 * __txn_assert_after_reads --
 *     Assert that commit and prepare timestamps are greater than the latest active read timestamp,
 *     if any.
 ','line_number':447,'multiline':True]
['text':' Walk the array of concurrent transactions. ','line_number':469,'multiline':True]
['text':' NOTREACHED ','line_number':479,'multiline':True]
['text':'
 * __wt_txn_validate_commit_timestamp --
 *     Validate the commit timestamp of a transaction.
 ','line_number':491,'multiline':True]
['text':' Added this redundant initialization to circumvent build failure. ','line_number':508,'multiline':True]
['text':'
     * Compare against the oldest and the stable timestamp. Return an error if the given timestamp
     * is less than oldest and/or stable timestamp.
     ','line_number':511,'multiline':True]
['text':' Compare against the first commit timestamp of the current transaction. ','line_number':523,'multiline':True]
['text':'
         * For a non-prepared transactions the commit timestamp should not be less or equal to the
         * stable timestamp.
         ','line_number':534,'multiline':True]
['text':'
         * For a prepared transaction, the commit timestamp should not be less than the prepare
         * timestamp. Also, the commit timestamp cannot be set before the transaction has actually
         * been prepared.
         *
         * If the commit timestamp is less than the oldest timestamp and transaction is configured
         * to roundup timestamps of a prepared transaction, then we will roundup the commit
         * timestamp to the prepare timestamp of the transaction.
         ','line_number':550,'multiline':True]
['text':' Update the caller's value. ','line_number':566,'multiline':True]
['text':'
 * __wt_txn_set_commit_timestamp --
 *     Set the commit timestamp of a transaction.
 ','line_number':577,'multiline':True]
['text':'
     * In scenarios where the prepare timestamp is greater than the provided commit timestamp, the
     * validate function returns the new commit timestamp based on the configuration.
     ','line_number':592,'multiline':True]
['text':'
     * First time copy the commit timestamp to the first commit timestamp.
     ','line_number':599,'multiline':True]
['text':'
     * Only mirror the commit timestamp if there isn't already an explicit durable timestamp. This
     * might happen if we set a commit timestamp, set a durable timestamp and then subsequently set
     * the commit timestamp again.
     ','line_number':605,'multiline':True]
['text':'
 * __wt_txn_validate_durable_timestamp --
 *     Validate the durable timestamp of a transaction.
 ','line_number':617,'multiline':True]
['text':' Added this redundant initialization to circumvent build failure. ','line_number':633,'multiline':True]
['text':'
     * Compare against the oldest and the stable timestamp. Return an error if the given timestamp
     * is less than oldest and/or stable timestamp.
     ','line_number':636,'multiline':True]
['text':' Check if the durable timestamp is less than the commit timestamp. ','line_number':657,'multiline':True]
['text':'
 * __wt_txn_set_durable_timestamp --
 *     Set the durable timestamp of a transaction.
 ','line_number':667,'multiline':True]
['text':'
 * __wt_txn_set_prepare_timestamp --
 *     Validate and set the prepare timestamp of a transaction.
 ','line_number':693,'multiline':True]
['text':'
     * Check whether the prepare timestamp is less than the stable timestamp.
     ','line_number':719,'multiline':True]
['text':'
         * Check whether the application is using the "prepared" roundup mode. This rounds up to
         * _oldest_, not stable, and permits preparing before stable, because it is meant to be used
         * during application recovery to replay a transaction that was successfully prepared (and
         * possibly committed) before a crash but had not yet become durable. In general it is
         * important to replay such transactions at the same time they had before the crash; in a
         * distributed setting they might have already committed in the network, in which case
         * replaying them at a different time is very likely to be inconsistent. Meanwhile, once a
         * transaction prepares we allow stable to move forward past it, so replaying may require
         * preparing and even committing prior to stable.
         *
         * Such a replay is safe provided that it happens during application-level recovery before
         * resuming ordinary operations: between the time the transaction prepares and the crash,
         * operations intersecting with the prepared transaction fail with WT_PREPARE_CONFLICT, and
         * after the crash, the replay recreates this state before any ordinary operations can
         * intersect with it. Application recovery code is responsible for making sure that any
         * other operations it does before the replay that might intersect with the prepared
         * transaction are consistent with it.
         *
         * (There is a slight extra wrinkle at the moment, because it is possible for a transaction
         * to prepare and commit and be interacted with before it becomes durable. Currently such
         * transactions _must_ be replayed identically by the application to avoid inconsistency,
         * or avoided.
         *
         * Under other circumstances, that is, not during application-level recovery when ordinary
         * operations are excluded, use of "roundup=prepared" (for replaying transactions or
         * otherwise) is not safe and can cause data inconsistency. There is currently no roundup
         * mode for commit timestamps that is suitable for use during ordinary operation.
         ','line_number':724,'multiline':True]
['text':'
 * __wt_txn_set_read_timestamp --
 *     Parse a request to set a transaction's read_timestamp.
 ','line_number':774,'multiline':True]
['text':'
     * Silently ignore attempts to set the read timestamp after a transaction is prepared (if we
     * error, the system will panic because an operation on a prepared transaction cannot fail).
     ','line_number':792,'multiline':True]
['text':' Read timestamps imply / require snapshot isolation. ','line_number':802,'multiline':True]
['text':' Read timestamps can't change once set. ','line_number':809,'multiline':True]
['text':'
     * This code is not using the timestamp validate function to avoid a race between checking and
     * setting transaction timestamp.
     ','line_number':813,'multiline':True]
['text':'
         * If given read timestamp is earlier than oldest timestamp then round the read timestamp to
         * oldest timestamp.
         ','line_number':822,'multiline':True]
['text':'
             * In some cases, MongoDB sets a read timestamp older than the oldest timestamp, relying
             * on WiredTiger's concurrency to detect and fail the set. In other cases it's a bug and
             * MongoDB wants error context to make it easier to find those problems. Don't output an
             * error message because that logs a MongoDB error, use an informational message to
             * provide the context instead. Don't output this message for standalone builds, it's
             * too noisy for applications that don't track the read timestamp against the oldest
             * timestamp and simply expect the set to fail.
             ','line_number':833,'multiline':True]
['text':'
     * This message is generated here to reduce the span of critical section.
     ','line_number':855,'multiline':True]
['text':'
     * If we already have a snapshot, it may be too early to match the timestamp (including the one
     * we just read, if rounding to oldest). Get a new one.
     ','line_number':864,'multiline':True]
['text':'
 * __wt_txn_set_timestamp --
 *     Parse a request to set a timestamp in a transaction.
 ','line_number':874,'multiline':True]
['text':'
     * If no commit or durable timestamp is set here, set to any previously set values and validate
     * them, the stable timestamp might have moved forward since they were successfully set.
     ','line_number':895,'multiline':True]
['text':'
     * If the API received no configuration string, or we just have the base configuration, there
     * are no strings to parse. Additionally, take a shortcut in parsing that works because we're
     * only given a base configuration and a user configuration.
     ','line_number':905,'multiline':True]
['text':' Look for a commit timestamp. ','line_number':932,'multiline':True]
['text':'
     * Look for a durable timestamp. Durable timestamp should be set only after setting the commit
     * timestamp.
     ','line_number':936,'multiline':True]
['text':' Look for a read timestamp. ','line_number':944,'multiline':True]
['text':' Look for a prepare timestamp. ','line_number':948,'multiline':True]
['text':' Timestamps are only logged in debugging mode. ','line_number':952,'multiline':True]
['text':'
 * __wt_txn_set_timestamp_uint --
 *     Directly set the commit timestamp in a transaction, bypassing parsing logic. Prefer this to
 *     __wt_txn_set_timestamp when string parsing is a performance bottleneck.
 ','line_number':960,'multiline':True]
['text':' Timestamps are only logged in debugging mode. ','line_number':1010,'multiline':True]
['text':'
 * __wt_txn_publish_durable_timestamp --
 *     Publish a transaction's durable timestamp.
 ','line_number':1018,'multiline':True]
['text':'
         * If we know for a fact that this is a prepared transaction and we only have a commit
         * timestamp, don't add to the durable queue. If we poll all_durable after setting the
         * commit timestamp of a prepared transaction, that prepared transaction should NOT be
         * visible.
         ','line_number':1038,'multiline':True]
['text':'
 * __wt_txn_clear_durable_timestamp --
 *     Clear a transaction's published durable timestamp.
 ','line_number':1054,'multiline':True]
['text':'
 * __wt_txn_clear_read_timestamp --
 *     Clear a transaction's published read timestamp.
 ','line_number':1075,'multiline':True]
['text':' Assert the read timestamp is greater than or equal to the pinned timestamp. ','line_number':1089,'multiline':True]
