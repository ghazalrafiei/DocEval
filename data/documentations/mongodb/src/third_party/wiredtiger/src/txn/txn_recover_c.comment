['text':'-
 * Copyright (c) 2014-present MongoDB, Inc.
 * Copyright (c) 2008-2014 WiredTiger, Inc.
 *	All rights reserved.
 *
 * See the file LICENSE for redistribution information.
 ','line_number':1,'multiline':True]
['text':' Enable all recovery-related verbose messaging events. ','line_number':11,'multiline':True]
['text':' State maintained during recovery. ','line_number':16,'multiline':True]
['text':' File URI. ','line_number':18,'multiline':True]
['text':' Cursor used for recovery. ','line_number':19,'multiline':True]
['text':' File's checkpoint LSN. ','line_number':20,'multiline':True]
['text':' Files from the metadata, indexed by file ID. ','line_number':26,'multiline':True]
['text':' Allocated size of files array. ','line_number':28,'multiline':True]
['text':' Maximum file ID seen. ','line_number':29,'multiline':True]
['text':' Number of files in the metadata. ','line_number':30,'multiline':True]
['text':' Start LSN for main recovery loop. ','line_number':32,'multiline':True]
['text':' Maximum checkpoint LSN seen. ','line_number':33,'multiline':True]
['text':' Maximum recovery LSN seen. ','line_number':34,'multiline':True]
['text':' Were there missing files? ','line_number':36,'multiline':True]
['text':'
                         * Set during the first recovery pass,
                         * when only the metadata is recovered.
                         ','line_number':37,'multiline':True]
['text':'
 * __recovery_cursor --
 *     Get a cursor for a recovery operation.
 ','line_number':43,'multiline':True]
['text':'
     * File ids with the bit set to ignore this operation are skipped.
     ','line_number':57,'multiline':True]
['text':'
     * Metadata operations have an id of 0. Match operations based on the id and the current pass of
     * recovery for metadata.
     *
     * Only apply operations in the correct metadata phase, and if the LSN is more recent than the
     * last checkpoint. If there is no entry for a file, assume it was dropped or missing after a
     * hot backup.
     ','line_number':62,'multiline':True]
['text':' If a file is missing, output a verbose message once. ','line_number':74,'multiline':True]
['text':'
         * We're going to apply the operation. Get the cursor, opening one if none is cached.
         ','line_number':80,'multiline':True]
['text':'
         * In the event of a clean shutdown, there shouldn't be any other table log records other
         * than metadata.
         ','line_number':88,'multiline':True]
['text':'
 * Helper to a cursor if this operation is to be applied during recovery.
 ','line_number':104,'multiline':True]
['text':'
 * __txn_op_apply --
 *     Apply a transactional operation during recovery.
 ','line_number':119,'multiline':True]
['text':' Peek at the size and the type. ','line_number':137,'multiline':True]
['text':'
     * If it is an operation type that should be ignored, we're done. Note that file ids within
     * known operations also use the same macros to indicate that operation should be ignored.
     ','line_number':141,'multiline':True]
['text':'
             * Build/insert a complete value during recovery rather than using cursor modify to
             * create a partial update (for no particular reason than simplicity).
             ','line_number':158,'multiline':True]
['text':'
         * WT_NOTFOUND is an expected error because the checkpoint snapshot we're rolling forward
         * may race with a remove, resulting in the key not being in the tree, but recovery still
         * processing the log record of the remove.
         ','line_number':180,'multiline':True]
['text':' Set up the cursors. ','line_number':193,'multiline':True]
['text':' Set the keys. ','line_number':205,'multiline':True]
['text':'
         * If the truncate log doesn't have a recorded start and stop recno, truncate the whole file
         * using the URI. Otherwise use the positioned start or stop cursors to truncate a range of
         * the file.
         ','line_number':211,'multiline':True]
['text':' If we opened a duplicate cursor, close it now. ','line_number':222,'multiline':True]
['text':'
             * Build/insert a complete value during recovery rather than using cursor modify to
             * create a partial update (for no particular reason than simplicity).
             ','line_number':235,'multiline':True]
['text':'
         * WT_NOTFOUND is an expected error because the checkpoint snapshot we're rolling forward
         * may race with a remove, resulting in the key not being in the tree, but recovery still
         * processing the log record of the remove.
         ','line_number':257,'multiline':True]
['text':' Set up the cursors. ','line_number':269,'multiline':True]
['text':' Both cursors stay NULL. ','line_number':273,'multiline':True]
['text':' Set the keys. ','line_number':289,'multiline':True]
['text':'
         * If the truncate log doesn't have a recorded start and stop key, truncate the whole file
         * using the URI. Otherwise use the positioned start or stop cursors to truncate a range of
         * the file.
         ','line_number':295,'multiline':True]
['text':' If we opened a duplicate cursor, close it now. ','line_number':306,'multiline':True]
['text':'
         * Timestamp records are informational only. We have to unpack it to properly move forward
         * in the log record to the next operation, but otherwise ignore.
         ','line_number':312,'multiline':True]
['text':' Reset the cursor so it doesn't block eviction. ','line_number':324,'multiline':True]
['text':'
 * __txn_commit_apply --
 *     Apply a commit record during recovery.
 ','line_number':337,'multiline':True]
['text':' The logging subsystem zero-pads records. ','line_number':344,'multiline':True]
['text':'
 * __txn_log_recover --
 *     Roll the log forward to recover committed changes.
 ','line_number':351,'multiline':True]
['text':' First, peek at the log record type. ','line_number':370,'multiline':True]
['text':'
     * Record the highest LSN we process during the metadata phase. If not the metadata phase, then
     * stop at that LSN.
     ','line_number':373,'multiline':True]
['text':'
 * __recovery_set_checkpoint_timestamp --
 *     Set the checkpoint timestamp as retrieved from the metadata file.
 ','line_number':398,'multiline':True]
['text':'
     * Read the system checkpoint information from the metadata file and save the stable timestamp
     * of the last checkpoint for later query. This gets saved in the connection.
     ','line_number':413,'multiline':True]
['text':'
     * Set the recovery checkpoint timestamp and the metadata checkpoint timestamp so that the
     * checkpoint after recovery writes the correct value into the metadata.
     ','line_number':419,'multiline':True]
['text':'
 * __recovery_set_oldest_timestamp --
 *     Set the oldest timestamp as retrieved from the metadata file. Setting the oldest timestamp
 *     doesn't automatically set the pinned timestamp.
 ','line_number':431,'multiline':True]
['text':'
     * Read the system checkpoint information from the metadata file and save the oldest timestamp
     * of the last checkpoint for later query. This gets saved in the connection.
     ','line_number':446,'multiline':True]
['text':'
 * __recovery_set_checkpoint_snapshot --
 *     Set the checkpoint snapshot details as retrieved from the metadata file.
 ','line_number':460,'multiline':True]
['text':'
     * WiredTiger versions 10.0.1 onward have a valid checkpoint snapshot on-disk. There was a bug
     * in some versions of WiredTiger that are tagged with the 10.0.0 release, which saved the wrong
     * checkpoint snapshot (see WT-8395), so we ignore the snapshot when it was created with one of
     * those versions. Versions of WiredTiger prior to 10.0.0 never saved a checkpoint snapshot.
     * Additionally the turtle file doesn't always exist (for example, backup doesn't include the
     * turtle file), so there isn't always a WiredTiger version available. If there is no version
     * available, assume that the snapshot is valid, otherwise restoring from a backup won't work.
     ','line_number':471,'multiline':True]
['text':' Return an empty snapshot. ','line_number':482,'multiline':True]
['text':'
     * Read the system checkpoint information from the metadata file and save the snapshot related
     * details of the last checkpoint in the connection for later query.
     ','line_number':490,'multiline':True]
['text':'
 * __recovery_set_ckpt_base_write_gen --
 *     Set the base write gen as retrieved from the metadata file.
 ','line_number':499,'multiline':True]
['text':' Search the metadata for checkpoint base write gen information. ','line_number':514,'multiline':True]
['text':'
 * __recovery_txn_setup_initial_state --
 *     Setup the transaction initial state required by rollback to stable.
 ','line_number':529,'multiline':True]
['text':'
     * Set the checkpoint timestamp and oldest timestamp retrieved from the checkpoint metadata.
     * These are the stable timestamp and oldest timestamps of the last successful checkpoint.
     ','line_number':542,'multiline':True]
['text':'
     * Now that timestamps extracted from the checkpoint metadata have been configured, configure
     * the pinned timestamp.
     ','line_number':549,'multiline':True]
['text':' Set the stable timestamp from recovery timestamp. ','line_number':559,'multiline':True]
['text':'
 * __recovery_setup_file --
 *     Set up the recovery slot for a file, track the largest file ID, and update the base write gen
 *     based on the file's configuration.
 ','line_number':567,'multiline':True]
['text':' Track the largest file ID we have seen. ','line_number':583,'multiline':True]
['text':' If there is no checkpoint logged for the file, apply everything. ','line_number':600,'multiline':True]
['text':' NOLINTNEXTLINE(cert-err34-c) ','line_number':603,'multiline':True]
['text':' Update the base write gen and most recent checkpoint based on this file's configuration. ','line_number':620,'multiline':True]
['text':'
 * __recovery_close_cursors --
 *     Close the logging recovery cursors.
 ','line_number':626,'multiline':True]
['text':'
 * __recovery_file_scan_prefix --
 *     Scan the files matching the prefix referenced from the metadata and gather information about
 *     them for recovery.
 ','line_number':650,'multiline':True]
['text':' Scan through all entries in the metadata matching the prefix. ','line_number':663,'multiline':True]
['text':' Is the metadata empty? ','line_number':667,'multiline':True]
['text':' No matching entries? ','line_number':672,'multiline':True]
['text':'
 * __recovery_file_scan --
 *     Scan the files referenced from the metadata and gather information about them for recovery.
 ','line_number':689,'multiline':True]
['text':' Scan through all files and tiered entries in the metadata. ','line_number':696,'multiline':True]
['text':'
     * Set the connection level file id tracker, as such upon creation of a new file we'll begin
     * from the latest file id.
     ','line_number':700,'multiline':True]
['text':'
 * __hs_exists --
 *     Check whether the history store exists. This function looks for both the history store URI in
 *     the metadata file and for the history store data file itself. If we're running salvage, we'll
 *     attempt to salvage the history store here.
 ','line_number':709,'multiline':True]
['text':'
     * We should check whether the history store file exists in the metadata or not. If it does not,
     * then we should skip rollback to stable for each table. This might happen if we're upgrading
     * from an older version. If it does exist in the metadata we should check that it exists on
     * disk to confirm that it wasn't deleted between runs.
     *
     * This needs to happen after we apply the logs as they may contain the metadata changes which
     * include the history store creation. As such the on disk metadata file won't contain the
     * history store but will after log application.
     ','line_number':724,'multiline':True]
['text':' Given the history store exists in the metadata validate whether it exists on disk. ','line_number':740,'multiline':True]
['text':'
             * Attempt to configure the history store, this will detect corruption if it fails.
             ','line_number':743,'multiline':True]
['text':'
             * We're attempting to salvage the database with a missing history store, remove it from
             * the metadata and pretend it never existed. As such we won't run rollback to stable
             * later.
             ','line_number':755,'multiline':True]
['text':' The history store file has likely been deleted, we cannot recover from this. ','line_number':764,'multiline':True]
['text':' Unpin the page from cache. ','line_number':769,'multiline':True]
['text':'
 * __wt_txn_recover --
 *     Run recovery.
 ','line_number':774,'multiline':True]
['text':' We need a real session for recovery. ','line_number':806,'multiline':True]
['text':'
     * If no log was found (including if logging is disabled), or if the last checkpoint was done
     * with logging disabled, recovery should not run. Scan the metadata to figure out the largest
     * file ID.
     ','line_number':821,'multiline':True]
['text':'
         * Detect if we're going from logging disabled to enabled. We need to know this to verify
         * LSNs and start at the correct log file later. If someone ran with logging, then disabled
         * it and removed all the log files and then turned logging back on, we have to start
         * logging in the log file number that is larger than any checkpoint LSN we have from the
         * earlier time.
         ','line_number':827,'multiline':True]
['text':'
         * The array can be re-allocated in recovery_file_scan. Reset our pointer after scanning all
         * the files.
         ','line_number':835,'multiline':True]
['text':'
     * First, do a pass through the log to recover the metadata, and establish the last checkpoint
     * LSN. Skip this when opening a hot backup: we already have the correct metadata in that case.
     *
     * If we're running with salvage and we hit an error, we ignore it and continue. In salvage we
     * want to recover whatever part of the data we can from the last checkpoint up until whatever
     * problem we detect in the log file. In salvage, we ignore errors from scanning the log so
     * recovery can continue. Other errors remain errors.
     ','line_number':850,'multiline':True]
['text':'
         * If this is a read-only connection, check if the checkpoint LSN in the metadata file is up
         * to date, indicating a clean shutdown.
         ','line_number':861,'multiline':True]
['text':'
             * Start at the last checkpoint LSN referenced in the metadata. If we see the end of a
             * checkpoint while scanning, we will change the full scan to start from there.
             ','line_number':873,'multiline':True]
['text':'
         * If log scan couldn't find a file we expected to be around, this indicates a corruption of
         * some sort.
         ','line_number':883,'multiline':True]
['text':' Scan the metadata to find the live files and their IDs. ','line_number':895,'multiline':True]
['text':'
     * Check whether the history store exists.
     *
     * This will open a dhandle on the history store and initialize its write gen so we must ensure
     * that the connection-wide base write generation is stable at this point. Performing a recovery
     * file scan will involve updating the connection-wide base write generation so we MUST do this
     * before checking for the existence of a history store file.
     ','line_number':898,'multiline':True]
['text':'
     * Clear this out. We no longer need it and it could have been re-allocated when scanning the
     * files.
     ','line_number':908,'multiline':True]
['text':'
     * We no longer need the metadata cursor: close it to avoid pinning any resources that could
     * block eviction during recovery.
     ','line_number':914,'multiline':True]
['text':'
     * Now, recover all the files apart from the metadata. Pass WT_LOGSCAN_RECOVER so that old logs
     * get truncated.
     ','line_number':921,'multiline':True]
['text':'
     * Check if the database was shut down cleanly. If not return an error if the user does not want
     * automatic recovery.
     ','line_number':930,'multiline':True]
['text':'
         * Create the history store as we might need it while applying log records in recovery.
         ','line_number':950,'multiline':True]
['text':'
     * Recovery can touch more data than fits in cache, so it relies on regular eviction to manage
     * paging. Start eviction threads for recovery without history store cursors.
     ','line_number':956,'multiline':True]
['text':'
     * Always run recovery even if it was a clean shutdown only if this is not a read-only
     * connection. We can consider skipping it in the future.
     ','line_number':963,'multiline':True]
['text':' Close cached cursors, rollback-to-stable asserts exclusive access. ','line_number':979,'multiline':True]
['text':'
     * There is a known problem with upgrading from release 10.0.0 specifically. There are now fixes
     * that can properly upgrade from 10.0.0 without hitting the problem but only from a clean
     * shutdown of 10.0.0. Earlier releases are not affected by the upgrade issue.
     ','line_number':982,'multiline':True]
['text':' Time since the Log replay has started. ','line_number':992,'multiline':True]
['text':'
     * Set the history store file size as it may already exist after a restart.
     ','line_number':1000,'multiline':True]
['text':'
     * Perform rollback to stable only when the following conditions met.
     * 1. The connection is not read-only. A read-only connection expects that there shouldn't be
     *    any changes that need to be done on the database other than reading.
     * 2. The history store file was found in the metadata.
     ','line_number':1008,'multiline':True]
['text':' Start the eviction threads for rollback to stable if not already started. ','line_number':1016,'multiline':True]
['text':' Time since the rollback to stable has started. ','line_number':1031,'multiline':True]
['text':'
     * Sometimes eviction is triggered after doing a checkpoint. However, we don't want eviction to
     * make the tree dirty after checkpoint as this will interfere with WT_SESSION alter which
     * expects a clean tree.
     ','line_number':1039,'multiline':True]
['text':'
         * Forcibly log a checkpoint so the next open is fast and keep the metadata up to date with
         * the checkpoint LSN and removal.
         ','line_number':1049,'multiline':True]
['text':' Time since the recovery checkpoint has started. ','line_number':1055,'multiline':True]
['text':' Remove any backup file now that metadata has been synced. ','line_number':1062,'multiline':True]
['text':'
     * Update the open dhandles write generations and base write generation with the connection's
     * base write generation because the recovery checkpoint writes the pages to disk with new write
     * generation number which contains transaction ids that are needed to reset later. The
     * connection level base write generation number is updated at the end of the recovery
     * checkpoint.
     ','line_number':1065,'multiline':True]
['text':'
     * If we're downgrading and have newer log files, force log removal, no matter what the remove
     * setting is.
     ','line_number':1074,'multiline':True]
['text':' Time since the recovery has started. ','line_number':1082,'multiline':True]
['text':'
     * Destroy the eviction threads that were started in support of recovery. They will be restarted
     * once the history store table is created.
     ','line_number':1101,'multiline':True]
