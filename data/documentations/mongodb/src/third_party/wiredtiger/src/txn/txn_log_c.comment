['text':'-
 * Copyright (c) 2014-present MongoDB, Inc.
 * Copyright (c) 2008-2014 WiredTiger, Inc.
 *	All rights reserved.
 *
 * See the file LICENSE for redistribution information.
 ','line_number':1,'multiline':True]
['text':'
 * __txn_op_log_row_key_check --
 *     Confirm the cursor references the correct key.
 ','line_number':11,'multiline':True]
['text':'
     * We used to take the row-store logging key from the page referenced by the cursor, then
     * switched to taking it from the cursor itself. Check they are the same.
     *
     * If the cursor references a WT_INSERT item, take the key from there, else take the key from
     * the original page.
     ','line_number':30,'multiline':True]
['text':'
 * __txn_op_log --
 *     Log an operation for the current transaction.
 ','line_number':58,'multiline':True]
['text':'
     * Log the row- or column-store insert, modify, remove or update. Our caller doesn't log reserve
     * operations, we shouldn't see them here.
     ','line_number':76,'multiline':True]
['text':'
             * Write full updates to the log for size-changing modify operations: they aren't
             * idempotent and recovery cannot guarantee that they will be applied exactly once. We
             * rely on the cursor value already having the modify applied.
             ','line_number':86,'multiline':True]
['text':'
 * __txn_oplist_printlog --
 *     Print a list of operations from a log record.
 ','line_number':131,'multiline':True]
['text':' The logging subsystem zero-pads records. ','line_number':144,'multiline':True]
['text':'
 * __wt_txn_op_free --
 *     Free memory associated with a transactional operation.
 ','line_number':161,'multiline':True]
['text':'
         * The free function can be called more than once: when there's no operation, a free is
         * unnecessary or has already been done.
         ','line_number':170,'multiline':True]
['text':'
 * __txn_logrec_init --
 *     Allocate and initialize a buffer for a transaction's log records.
 ','line_number':198,'multiline':True]
['text':'
     * The only way we should ever get in here without a txn id is if we are recording diagnostic
     * information. In that case, allocate an id.
     ','line_number':221,'multiline':True]
['text':'
 * __wt_txn_log_op --
 *     Write the last logged operation into the in-memory buffer.
 ','line_number':245,'multiline':True]
['text':' We'd better have a transaction. ','line_number':262,'multiline':True]
['text':'
     * If this operation is diagnostic only, set the ignore bit on the fileid so that recovery can
     * skip it.
     ','line_number':269,'multiline':True]
['text':' Nothing to log, we're done. ','line_number':285,'multiline':True]
['text':'
 * __wt_txn_log_commit --
 *     Write the operations of a transaction to the log at commit time.
 ','line_number':303,'multiline':True]
['text':'
     * If there are no log records there is nothing to do.
     ','line_number':314,'multiline':True]
['text':' Write updates to the log. ','line_number':320,'multiline':True]
['text':'
 * __txn_log_file_sync --
 *     Write a log record for a file sync.
 ','line_number':324,'multiline':True]
['text':'
 * __wt_txn_checkpoint_logread --
 *     Read a log record for a checkpoint operation.
 ','line_number':358,'multiline':True]
['text':'
 * __wt_txn_ts_log --
 *     Write a log record recording timestamps in the transaction.
 ','line_number':382,'multiline':True]
['text':' We'd better have a transaction, but we may not have allocated an ID. ','line_number':398,'multiline':True]
['text':'
     * There is a rare usage case of a prepared transaction that has no modifications, but then
     * commits and sets timestamps. If an empty transaction has been prepared, don't bother writing
     * a timestamp operation record.
     ','line_number':401,'multiline':True]
['text':'
 * __wt_txn_checkpoint_log --
 *     Write a log record for a checkpoint operation.
 ','line_number':428,'multiline':True]
['text':'
     * If this is a file sync, log it unless there is a full checkpoint in progress.
     ','line_number':452,'multiline':True]
['text':'
             * Write the system log record containing a checkpoint start operation.
             ','line_number':469,'multiline':True]
['text':'
         * We take and immediately release the visibility lock. Acquiring the write lock guarantees
         * that any transaction that has written to the log has also made its transaction visible at
         * this time.
         ','line_number':487,'multiline':True]
['text':'
         * We need to make sure that the log records in the checkpoint LSN are on disk. In
         * particular to make sure that the current log file exists.
         ','line_number':495,'multiline':True]
['text':' Take a copy of the transaction snapshot. ','line_number':502,'multiline':True]
['text':' There many not be any snapshot entries. ','line_number':507,'multiline':True]
['text':'
         * During a clean connection close, we get here without the prepare or start steps. In that
         * case, log the current LSN as the checkpoint LSN.
         ','line_number':515,'multiline':True]
['text':' Write the checkpoint log record. ','line_number':527,'multiline':True]
['text':'
         * If this full checkpoint completed successfully and there is no hot backup in progress and
         * this is not an unclean recovery, tell the logging subsystem the checkpoint LSN so that it
         * can remove log files. Do not update the logging checkpoint LSN if this is during a clean
         * connection close, only during a full checkpoint. A clean close may not update any
         * metadata LSN and we do not want to remove log files in that case.
         ','line_number':540,'multiline':True]
['text':' FALLTHROUGH ','line_number':552,'multiline':True]
['text':' Cleanup any allocated resources ','line_number':554,'multiline':True]
['text':'
 * __wt_txn_truncate_log --
 *     Begin truncating a range of a file.
 ','line_number':569,'multiline':True]
['text':'
         * If the user provided a start cursor key (i.e. local_start is false) then use the original
         * key provided.
         ','line_number':594,'multiline':True]
['text':'
         * If the user provided cursors, unpack the original keys that were saved in the cursor's
         * lower_bound field.
         ','line_number':616,'multiline':True]
['text':' Write that operation into the in-memory log. ','line_number':638,'multiline':True]
['text':'
 * __wt_txn_truncate_end --
 *     Finish truncating a range of a file.
 ','line_number':646,'multiline':True]
['text':'
 * __txn_printlog --
 *     Print a log record in a human-readable format.
 ','line_number':656,'multiline':True]
['text':' First, peek at the log record type. ','line_number':681,'multiline':True]
['text':'
     * When printing just the message records, display the message by itself without the usual log
     * header information.
     ','line_number':684,'multiline':True]
['text':'
 * __wt_txn_printlog --
 *     Print the log in a human-readable format.
 ','line_number':749,'multiline':True]
