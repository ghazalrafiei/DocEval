['text':'-
 * Copyright (c) 2014-present MongoDB, Inc.
 * Copyright (c) 2008-2014 WiredTiger, Inc.
 *	All rights reserved.
 *
 * See the file LICENSE for redistribution information.
 ','line_number':1,'multiline':True]
['text':'
 * __curstd_config_value_for --
 *     Returns NULL if the string being searched for isn't found, or the string after the "=" sign
 *     in the config string.
 ','line_number':11,'multiline':True]
['text':'
 * __wt_cursor_noop --
 *     Cursor noop.
 ','line_number':28,'multiline':True]
['text':'
 * __wt_cursor_cached --
 *     No actions on a closed and cached cursor are allowed.
 ','line_number':40,'multiline':True]
['text':'
 * __wt_cursor_notsup --
 *     Unsupported cursor actions.
 ','line_number':53,'multiline':True]
['text':'
 * __wt_cursor_get_value_notsup --
 *     WT_CURSOR.get_value not-supported.
 ','line_number':66,'multiline':True]
['text':'
 * __wt_cursor_get_raw_key_value_notsup --
 *     WT_CURSOR.get_raw_key_value not-supported.
 ','line_number':76,'multiline':True]
['text':'
 * __wt_cursor_set_key_notsup --
 *     WT_CURSOR.set_key not-supported.
 ','line_number':88,'multiline':True]
['text':'
 * __wt_cursor_set_value_notsup --
 *     WT_CURSOR.set_value not-supported.
 ','line_number':98,'multiline':True]
['text':'
 * __wt_cursor_compare_notsup --
 *     Unsupported cursor comparison.
 ','line_number':108,'multiline':True]
['text':'
 * __wt_cursor_equals_notsup --
 *     Unsupported cursor equality.
 ','line_number':121,'multiline':True]
['text':'
 * Cursor modify operation is supported only in limited cursor types and also the modify
 * operation is supported only with 'S' and 'u' value formats of the cursors. Because of
 * the conditional support of cursor modify operation, To provide a better error description
 * to the application whenever the cursor modify is used based on the cursor types, two
 * default not supported functions are used.
 *
 * __wt_cursor_modify_notsup - Default function for cursor types where the modify operation
 * is not supported.
 *
 * __wt_cursor_modify_value_format_notsup - Default function for cursor types where the modify
 * operation is supported with specific value formats of the cursor.
 ','line_number':134,'multiline':True]
['text':'
 * __wt_cursor_modify_notsup --
 *     Unsupported cursor modify.
 ','line_number':148,'multiline':True]
['text':'
 * __wt_cursor_modify_value_format_notsup --
 *     Unsupported value format for cursor modify.
 ','line_number':161,'multiline':True]
['text':'
 * __wt_cursor_search_near_notsup --
 *     Unsupported cursor search-near.
 ','line_number':181,'multiline':True]
['text':'
 * __wt_cursor_config_notsup --
 *     Unsupported cursor API call which takes config.
 ','line_number':193,'multiline':True]
['text':'
 * __wt_cursor_reopen_notsup --
 *     Unsupported cursor reopen.
 ','line_number':205,'multiline':True]
['text':'
 * __wt_cursor_set_notsup --
 *     Reset the cursor methods to not-supported.
 ','line_number':217,'multiline':True]
['text':'
     * Set cursor methods other than close, reconfigure and reset, to fail. Close is unchanged so
     * the cursor can be discarded; reset is set to a no-op because session transactional operations
     * reset all of the cursors in a session. Reconfigure is left open in case it's possible in the
     * future to change these configurations.
     ','line_number':224,'multiline':True]
['text':'
 * __wt_cursor_kv_not_set --
 *     Standard error message for key/values not set.
 ','line_number':244,'multiline':True]
['text':'
 * __wt_cursor_copy_release_item --
 *     Release memory used by the key or value item in cursor copy debug mode.
 ','line_number':259,'multiline':True]
['text':' Bail out if the item has been cleared. ','line_number':272,'multiline':True]
['text':'
     * Whether or not we own the memory for the item, make a copy of the data and use that instead.
     * That allows us to overwrite and free memory owned by the item, potentially uncovering
     * programming errors related to retaining pointers to key/value memory beyond API boundaries.
     ','line_number':276,'multiline':True]
['text':'
 * __wt_cursor_get_key --
 *     WT_CURSOR->get_key default implementation.
 ','line_number':291,'multiline':True]
['text':'
 * __wt_cursor_set_key --
 *     WT_CURSOR->set_key default implementation.
 ','line_number':307,'multiline':True]
['text':'
 * __wt_cursor_get_raw_key --
 *     Temporarily force raw mode in a cursor to get a canonical copy of the key.
 ','line_number':323,'multiline':True]
['text':'
 * __wt_cursor_set_raw_key --
 *     Temporarily force raw mode in a cursor to set a canonical copy of the key.
 ','line_number':342,'multiline':True]
['text':'
 * __wt_cursor_get_raw_value --
 *     Temporarily force raw mode in a cursor to get a canonical copy of the value.
 ','line_number':359,'multiline':True]
['text':'
 * __wt_cursor_set_raw_value --
 *     Temporarily force raw mode in a cursor to set a canonical copy of the value.
 ','line_number':378,'multiline':True]
['text':'
 * __wt_cursor_get_keyv --
 *     WT_CURSOR->get_key worker function.
 ','line_number':395,'multiline':True]
['text':' Force an allocated copy when using cursor copy debug. ','line_number':412,'multiline':True]
['text':' Fast path some common cases. ','line_number':427,'multiline':True]
['text':'
 * __wt_cursor_set_keyv --
 *     WT_CURSOR->set_key default implementation.
 ','line_number':443,'multiline':True]
['text':' Fast path some common cases and special case WT_ITEMs. ','line_number':481,'multiline':True]
['text':'
     * If we copied the key, either put the memory back into the cursor, or if we allocated some
     * memory in the meantime, free it.
     ','line_number':513,'multiline':True]
['text':'
 * __wt_cursor_get_value --
 *     WT_CURSOR->get_value default implementation.
 ','line_number':528,'multiline':True]
['text':'
 * __wt_cursor_get_valuev --
 *     WT_CURSOR->get_value worker implementation.
 ','line_number':544,'multiline':True]
['text':' Force an allocated copy when using cursor copy debug. ','line_number':561,'multiline':True]
['text':' Fast path some common cases. ','line_number':565,'multiline':True]
['text':'
 * __wt_cursor_get_raw_key_value --
 *     WT_CURSOR->get_raw_key_value default implementation
 ','line_number':582,'multiline':True]
['text':' Force an allocated copy when using cursor copy debug. ','line_number':600,'multiline':True]
['text':'
 * __wt_cursor_set_value --
 *     WT_CURSOR->set_value default implementation.
 ','line_number':618,'multiline':True]
['text':'
 * __wt_cursor_set_valuev --
 *     WT_CURSOR->set_value worker implementation.
 ','line_number':632,'multiline':True]
['text':' Fast path some common cases. ','line_number':659,'multiline':True]
['text':'
     * If we copied the value, either put the memory back into the cursor, or if we allocated some
     * memory in the meantime, free it.
     ','line_number':688,'multiline':True]
['text':'
 * __wt_cursor_cache --
 *     Add this cursor to the cache.
 ','line_number':704,'multiline':True]
['text':'
     * Cursor reset clears bounds on cursors when called externally, we need to clear the bounds
     * manually when we cache a cursor.
     ','line_number':720,'multiline':True]
['text':' Don't keep buffers allocated for cached cursors. ','line_number':726,'multiline':True]
['text':' Discard the underlying WT_CURSOR_BTREE buffers. ','line_number':730,'multiline':True]
['text':'
     * Acquire a reference while decrementing the in-use counter. After this point, the dhandle may
     * be marked dead, but the actual handle won't be removed.
     ','line_number':733,'multiline':True]
['text':' Move the cursor from the open list to the caching hash table. ','line_number':741,'multiline':True]
['text':'
 * __wt_cursor_reopen --
 *     Reopen this cursor from the cached state.
 ','line_number':756,'multiline':True]
['text':'
 * __wt_cursor_cache_release --
 *     Put the cursor into a cached state, called during cursor close operations.
 ','line_number':784,'multiline':True]
['text':'
     * Do any sweeping first, if there are errors, it will be easier to clean up if the cursor is
     * not already cached. When sweeping, don't use the "big" option. We want only a modest sweep as
     * we're in a performance path.
     ','line_number':799,'multiline':True]
['text':'
     * Caching the cursor releases its data handle. So we have to update statistics first. If
     * caching fails, we'll decrement the statistics after reopening the cursor (and getting the
     * data handle back).
     ','line_number':810,'multiline':True]
['text':'
         * If caching fails, we must restore the state of the cursor back to open so that the close
         * works from a known state. The reopen may also fail, but that doesn't matter at this
         * point.
         ','line_number':821,'multiline':True]
['text':'
 * __wt_cursor_get_hash --
 *     Get hash value from the given uri.
 ','line_number':835,'multiline':True]
['text':'
 * __wt_cursor_cache_get --
 *     Open a matching cursor from the cache.
 ','line_number':852,'multiline':True]
['text':' If original config string is NULL or "", don't check it. ','line_number':870,'multiline':True]
['text':' Fast path overwrite configuration ','line_number':874,'multiline':True]
['text':'
         * Any cursors that have special configuration cannot be cached. There are some exceptions
         * for configurations that only differ by a cursor flag, which we can patch up if we find a
         * matching cursor.
         ','line_number':882,'multiline':True]
['text':' Checkpoints are readonly, we won't cache them. ','line_number':907,'multiline':True]
['text':'
     * Walk through all cursors, if there is a cached cursor that matches uri and configuration, use
     * it.
     ','line_number':915,'multiline':True]
['text':'
             * For these configuration values, there is no difference in the resulting cursor other
             * than flag values, so fix them up according to the given configuration.
             ','line_number':929,'multiline':True]
['text':'
             * If this is a btree cursor, clear its read_once flag.
             ','line_number':935,'multiline':True]
['text':'
                 * The append flag is only relevant to column stores.
                 ','line_number':946,'multiline':True]
['text':'
             * A side effect of a cursor open is to leave the session's data handle set. Honor that
             * for a "reopen".
             ','line_number':970,'multiline':True]
['text':'
 * __wt_cursor_close --
 *     WT_CURSOR->close default implementation.
 ','line_number':984,'multiline':True]
['text':'
 * __wt_cursor_equals --
 *     WT_CURSOR->equals default implementation.
 ','line_number':1012,'multiline':True]
['text':'
 * __cursor_modify --
 *     WT_CURSOR->modify default implementation.
 ','line_number':1032,'multiline':True]
['text':' Check for a rational modify vector count. ','line_number':1044,'multiline':True]
['text':'
     * The underlying btree code cannot support WT_CURSOR.modify within a read-committed or
     * read-uncommitted transaction, or outside of an explicit transaction. Disallow here as well,
     * for consistency.
     ','line_number':1048,'multiline':True]
['text':' Get the current value, apply the modifications. ','line_number':1061,'multiline':True]
['text':' We know both key and value are set, "overwrite" doesn't matter. ','line_number':1065,'multiline':True]
['text':'
 * __cursor_config_debug --
 *     Set configuration options for debug category.
 ','line_number':1072,'multiline':True]
['text':'
     * Debug options. Special handling for options that aren't found - since reconfigure passes in
     * just the single configuration string, not the stack.
     ','line_number':1085,'multiline':True]
['text':'
 * __wt_cursor_reconfigure --
 *     Set runtime-configurable settings.
 ','line_number':1099,'multiline':True]
['text':' Reconfiguration resets the cursor. ','line_number':1112,'multiline':True]
['text':'
     * append Only relevant to column stores.
     ','line_number':1115,'multiline':True]
['text':'
     * overwrite
     ','line_number':1128,'multiline':True]
['text':'
 * __wt_cursor_largest_key --
 *     WT_CURSOR->largest_key default implementation..
 ','line_number':1145,'multiline':True]
['text':' Reset the cursor to give up the cursor position. ','line_number':1167,'multiline':True]
['text':' Set the flag to bypass value read. ','line_number':1170,'multiline':True]
['text':' Call btree cursor prev to get the largest key. ','line_number':1173,'multiline':True]
['text':' Copy the key as we will reset the cursor after that. ','line_number':1176,'multiline':True]
['text':' Set the key as external. ','line_number':1180,'multiline':True]
['text':'
 * __wt_cursor_bound --
 *     WT_CURSOR->bound default implementation.
 ','line_number':1192,'multiline':True]
['text':'
     * Our API defines "inclusive" as true by default, it also defines "set" as the default action.
     * This means we can't expect the user to have provided those configurations via the config
     * string. Normally WiredTiger merges the user provided configuration with the default
     * configuration, for performance reasons we are skipping this step. As such we need to handle
     * the cases where the user did and didn't provide the config making up the difference for the
     * defaults.
     *
     * These two booleans provide a mechanism to handle the user not providing the configuration and
     * still being able to parse it.
     ','line_number':1211,'multiline':True]
['text':' Action is default to "set". ','line_number':1233,'multiline':True]
['text':' The cursor must have a key set to place the lower or upper bound. ','line_number':1241,'multiline':True]
['text':' Inclusive is true by default. ','line_number':1244,'multiline':True]
['text':'
             * If the lower bounds are set, make sure that the upper bound is greater than the lower
             * bound.
             ','line_number':1252,'multiline':True]
['text':'
                 * If the lower bound and upper bound are equal, both inclusive flags must be
                 * specified.
                 ','line_number':1262,'multiline':True]
['text':' Copy the key over to the upper bound item and set upper bound and inclusive flags. ','line_number':1270,'multiline':True]
['text':'
             * If the upper bounds are set, make sure that the lower bound is less than the upper
             * bound.
             ','line_number':1278,'multiline':True]
['text':'
                 * If the lower bound and upper bound are equal, both inclusive flags must be
                 * specified.
                 ','line_number':1288,'multiline':True]
['text':' Copy the key over to the lower bound item and set upper bound and inclusive flags. ','line_number':1296,'multiline':True]
['text':'
 * __wt_cursor_bounds_save --
 *     Save cursor bounds to restore the state.
 ','line_number':1319,'multiline':True]
['text':' Save the bound flags to the state. ','line_number':1327,'multiline':True]
['text':'
 * __wt_cursor_bounds_restore --
 *     Restore the cursor's bounds state. We want to change only related flags as we can't guarantee
 *     the initial flag state of the column group cursors are the same.
 ','line_number':1344,'multiline':True]
['text':' Clear all the bound flags. ','line_number':1355,'multiline':True]
['text':' Set the saved bound flags back to the cursor. ','line_number':1357,'multiline':True]
['text':'
 * __wt_cursor_dup_position --
 *     Set a cursor to another cursor's position.
 ','line_number':1373,'multiline':True]
['text':'
     * Get a copy of the cursor's raw key, and set it in the new cursor, then search for that key to
     * position the cursor.
     *
     * We don't clear the WT_ITEM structure: all that happens when getting and setting the key is
     * the data/size fields are reset to reference the original cursor's key.
     *
     * That said, we're playing games with the cursor flags: setting the key sets the key/value
     * application-set flags in the new cursor, which may or may not be correct, but there's nothing
     * simple that fixes it. We depend on the subsequent cursor search to clean things up, as search
     * is required to copy and/or reference private memory after success.
     ','line_number':1383,'multiline':True]
['text':'
     * We now have a reference to the raw key, but we don't know anything about the memory in which
     * it's stored, it could be btree/file page memory in the cache, application memory or the
     * original cursor's key/value WT_ITEMs. Memory allocated in support of another cursor could be
     * discarded when that cursor is closed, so it's a problem. However, doing a search to position
     * the cursor will fix the problem: cursors cannot reference application memory after cursor
     * operations and that requirement will save the day.
     ','line_number':1398,'multiline':True]
['text':'
 * __wt_cursor_init --
 *     Default cursor initialization.
 ','line_number':1413,'multiline':True]
['text':' Various cursor code assumes there is an internal URI, so there better be one to set. ','line_number':1429,'multiline':True]
['text':'
     * append The append flag is only relevant to column stores.
     ','line_number':1434,'multiline':True]
['text':'
     * checkpoint, readonly Checkpoint cursors are permanently read-only, avoid the extra work of
     * two configuration string checks.
     ','line_number':1443,'multiline':True]
['text':'
     * dump If an index cursor is opened with dump, then this function is called on the index files,
     * with the dump config string, and with the index cursor as an owner. We don't want to create a
     * dump cursor in that case, because we'll create the dump cursor on the index cursor itself.
     ','line_number':1466,'multiline':True]
['text':'
         * Dump cursors should not have owners: only the top-level cursor should be wrapped in a
         * dump cursor.
         ','line_number':1485,'multiline':True]
['text':' overwrite ','line_number':1495,'multiline':True]
['text':' raw ','line_number':1502,'multiline':True]
['text':'
     * WT_CURSOR.modify supported on 'S' and 'u' value formats, but may have been already
     * initialized (file cursors have a faster implementation).
     ','line_number':1507,'multiline':True]
['text':' Tiered cursors are not yet candidates for caching. ','line_number':1515,'multiline':True]
['text':'
     * Cursors that are internal to some other cursor (such as file cursors inside a table cursor)
     * should be closed after the containing cursor. Arrange for that to happen by putting internal
     * cursors after their owners on the queue.
     ','line_number':1519,'multiline':True]
