['text':'-
 * Copyright (c) 2014-present MongoDB, Inc.
 * Copyright (c) 2008-2014 WiredTiger, Inc.
 *	All rights reserved.
 *
 * See the file LICENSE for redistribution information.
 ','line_number':1,'multiline':True]
['text':' Cursor type for custom extractor callback. ','line_number':25,'multiline':True]
['text':'
 * __curextract_insert --
 *     Handle a key produced by a custom extractor.
 ','line_number':33,'multiline':True]
['text':'
     * We appended a padding byte to the key to avoid rewriting the last column. Strip that away
     * here.
     ','line_number':50,'multiline':True]
['text':'
     * We have the index key in the format we need, and all of the primary key columns are required:
     * just append them.
     ','line_number':58,'multiline':True]
['text':'
     * The index key is now set and the value is empty (it starts clear and is never set).
     ','line_number':68,'multiline':True]
['text':' Call the underlying cursor function to update the index. ','line_number':73,'multiline':True]
['text':'
 * __wt_apply_single_idx --
 *     Apply an operation to a single index of a table.
 ','line_number':80,'multiline':True]
['text':' get-key ','line_number':88,'multiline':True]
['text':' get-value ','line_number':89,'multiline':True]
['text':' get-raw-key-value ','line_number':90,'multiline':True]
['text':' set-key ','line_number':91,'multiline':True]
['text':' set-value ','line_number':92,'multiline':True]
['text':' compare ','line_number':93,'multiline':True]
['text':' equals ','line_number':94,'multiline':True]
['text':' next ','line_number':95,'multiline':True]
['text':' prev ','line_number':96,'multiline':True]
['text':' reset ','line_number':97,'multiline':True]
['text':' search ','line_number':98,'multiline':True]
['text':' search-near ','line_number':99,'multiline':True]
['text':' insert ','line_number':100,'multiline':True]
['text':' modify ','line_number':101,'multiline':True]
['text':' update ','line_number':102,'multiline':True]
['text':' remove ','line_number':103,'multiline':True]
['text':' reserve ','line_number':104,'multiline':True]
['text':' reconfigure ','line_number':105,'multiline':True]
['text':' largest_key ','line_number':106,'multiline':True]
['text':' bound ','line_number':107,'multiline':True]
['text':' cache ','line_number':108,'multiline':True]
['text':' reopen ','line_number':109,'multiline':True]
['text':' checkpoint ID ','line_number':110,'multiline':True]
['text':' close ','line_number':111,'multiline':True]
['text':'
         * The index key is now set and the value is empty (it starts clear and is never set).
         ','line_number':134,'multiline':True]
['text':'
 * __apply_idx --
 *     Apply an operation to all indices of a table.
 ','line_number':143,'multiline':True]
['text':'
 * __wt_curtable_get_key --
 *     WT_CURSOR->get_key implementation for tables.
 ','line_number':172,'multiline':True]
['text':'
 * __wt_curtable_get_value --
 *     WT_CURSOR->get_value implementation for tables.
 ','line_number':194,'multiline':True]
['text':'
 * __wt_curtable_set_key --
 *     WT_CURSOR->set_key implementation for tables.
 ','line_number':215,'multiline':True]
['text':' Copy the primary key to the other cursors. ','line_number':240,'multiline':True]
['text':'
 * __curtable_set_valuev --
 *     WT_CURSOR->set_value implementation for tables.
 ','line_number':249,'multiline':True]
['text':'
         * The user may be passing us pointers returned by get_value that point into the buffers we
         * are about to update. Move them aside first.
         ','line_number':273,'multiline':True]
['text':'
 * __wt_curtable_set_value --
 *     WT_CURSOR->set_value implementation for tables.
 ','line_number':313,'multiline':True]
['text':'
 * __curtable_compare --
 *     WT_CURSOR->compare implementation for tables.
 ','line_number':327,'multiline':True]
['text':'
     * Confirm both cursors refer to the same source and have keys, then call the underlying
     * object's comparison routine.
     ','line_number':339,'multiline':True]
['text':'
 * __curtable_next --
 *     WT_CURSOR->next method for the table cursor type.
 ','line_number':354,'multiline':True]
['text':'
 * __curtable_next_random --
 *     WT_CURSOR->next method for the table cursor type when configured with next_random.
 ','line_number':377,'multiline':True]
['text':' Split out the first next, it retrieves the random record. ','line_number':394,'multiline':True]
['text':' Fill in the rest of the columns. ','line_number':398,'multiline':True]
['text':'
 * __curtable_prev --
 *     WT_CURSOR->prev method for the table cursor type.
 ','line_number':411,'multiline':True]
['text':'
 * __curtable_reset --
 *     WT_CURSOR->reset method for the table cursor type.
 ','line_number':434,'multiline':True]
['text':'
     * The bounded cursor API clears bounds on external calls to cursor->reset. We determine this by
     * guarding the call to cursor bound reset with the API_USER_ENTRY macro. Doing so prevents
     * internal API calls from resetting cursor bounds unintentionally, e.g. cursor->remove. In the
     * case of the table cursor we walk each cursor and directly reset the bounds on them without
     * going through curfile_reset for that reason.
     ','line_number':453,'multiline':True]
['text':'
 * __curtable_search --
 *     WT_CURSOR->search method for the table cursor type.
 ','line_number':468,'multiline':True]
['text':'
 * __curtable_search_near --
 *     WT_CURSOR->search_near method for the table cursor type.
 ','line_number':491,'multiline':True]
['text':'
 * __curtable_insert --
 *     WT_CURSOR->insert method for the table cursor type.
 ','line_number':527,'multiline':True]
['text':'
     * Split out the first insert, it may be allocating a recno.
     *
     * If the table has indices, we also need to know whether this record is replacing an existing
     * record so that the existing index entries can be removed. We discover if this is an overwrite
     * by configuring the primary cursor for no-overwrite, and checking if the insert detects a
     * duplicate key. By default, when insert finds a duplicate, it returns the value it found. We
     * don't want that value to overwrite our own, override that behavior.
     ','line_number':548,'multiline':True]
['text':'
     * WT_CURSOR.insert clears the set internally/externally flags but doesn't touch the items. We
     * could make a copy each time for overwrite cursors, but for now we just reset the flags.
     ','line_number':564,'multiline':True]
['text':'
         * The cursor is no longer positioned. This isn't just cosmetic, without a reset, iteration
         * on this cursor won't start at the beginning/end of the table.
         ','line_number':574,'multiline':True]
['text':'
     * Insert is the one cursor operation that doesn't end with the cursor pointing to an on-page
     * item (except for column-store appends, where we are returning a key). That is, the
     * application's cursor continues to reference the application's memory after a successful
     * cursor call, which isn't true anywhere else. We don't want to have to explain that scoping
     * corner case, so we reset the application's cursor so it can free the referenced memory and
     * continue on without risking subsequent core dumps.
     ','line_number':590,'multiline':True]
['text':'
 * __curtable_update --
 *     WT_CURSOR->update method for the table cursor type.
 ','line_number':607,'multiline':True]
['text':'
     * If the table has indices, first delete any old index keys, then update the primary, then
     * insert the new index keys. This is complicated by the fact that we need the old value to
     * generate the old index keys, so we make a temporary copy of the new value.
     ','line_number':623,'multiline':True]
['text':'
         * Remove if search found a key. The search key existing doesn't mean the value wasn't
         * previously removed, anticipate a "does not exist" not-found error from the remove.
         ','line_number':634,'multiline':True]
['text':'
 * __curtable_remove --
 *     WT_CURSOR->remove method for the table cursor type.
 ','line_number':658,'multiline':True]
['text':' Check if the cursor was positioned. ','line_number':675,'multiline':True]
['text':' Find the old record so it can be removed from indices ','line_number':679,'multiline':True]
['text':'
     * If the cursor was positioned, it stays positioned with a key but has no value, otherwise,
     * there's no position, key or value. This isn't just cosmetic, without a reset, iteration on
     * this cursor won't start at the beginning/end of the table.
     ','line_number':689,'multiline':True]
['text':'
 * __curtable_reserve --
 *     WT_CURSOR->reserve method for the table cursor type.
 ','line_number':705,'multiline':True]
['text':'
     * We don't have to open the indices here, but it makes the code similar to other cursor
     * functions, and it's odd for a reserve call to succeed but the subsequent update fail opening
     * indices.
     *
     * Check for a transaction before index open, opening the indices will start a transaction if
     * one isn't running.
     ','line_number':719,'multiline':True]
['text':' Reserve in column groups, ignore indices. ','line_number':730,'multiline':True]
['text':'
     * The application might do a WT_CURSOR.get_value call when we return, so we need a value and
     * the underlying functions didn't set one up. For various reasons, those functions may not have
     * done a search and any previous value in the cursor might race with WT_CURSOR.reserve (and in
     * cases like LSM, the reserve never encountered the original key). For simplicity, repeat the
     * search here.
     ','line_number':736,'multiline':True]
['text':'
 * __wt_table_range_truncate --
 *     Truncate of a cursor range, table implementation.
 ','line_number':746,'multiline':True]
['text':' Open any indices. ','line_number':769,'multiline':True]
['text':'
     * Step through the cursor range, removing the index entries.
     *
     * If there are indices, copy the key we're using to step through the cursor range (so we can
     * reset the cursor to its original position), then remove all of the index records in the
     * truncated range. Copy the raw key because the memory is only valid until the cursor moves.
     ','line_number':774,'multiline':True]
['text':' Truncate the column groups. ','line_number':814,'multiline':True]
['text':'
 * __curtable_largest_key --
 *     WT_CURSOR->largest_key method for the table cursor type.
 ','line_number':824,'multiline':True]
['text':'
 * __curtable_bound --
 *     WT_CURSOR->bound method for the table cursor type.
 *
 ','line_number':849,'multiline':True]
['text':' Save the current state of the bounds in case we fail to apply the new state. ','line_number':869,'multiline':True]
['text':' Call bound function on all column groups. ','line_number':872,'multiline':True]
['text':' If applying bounds fails on one colgroup cursor, restore the previous state. ','line_number':876,'multiline':True]
['text':'
 * __curtable_close --
 *     WT_CURSOR->close method for the table cursor type.
 ','line_number':887,'multiline':True]
['text':' The URI is owned by the table. ','line_number':932,'multiline':True]
['text':'
 * __curtable_complete --
 *     Return failure if the table is not yet fully created.
 ','line_number':939,'multiline':True]
['text':' If the table is incomplete, wait on the table lock and recheck. ','line_number':951,'multiline':True]
['text':'
 * __curtable_open_colgroups --
 *     Open cursors on column groups for a table cursor.
 ','line_number':959,'multiline':True]
['text':'
     * Underlying column groups are always opened without dump or readonly, and only the primary is
     * opened with next_random.
     ','line_number':969,'multiline':True]
['text':' completeness check ','line_number':979,'multiline':True]
['text':'
 * __curtable_open_indices --
 *     Open cursors on indices for a table cursor.
 ','line_number':991,'multiline':True]
['text':' Check for bulk cursors. ','line_number':1011,'multiline':True]
['text':'
         * On failure, we can't leave a subset of the indices open, since the table cursor is
         * already open and will remain open after this call. It's all or nothing, so we need to
         * close them all, and leave things as they were before the first cursor operation.
         *
         * The column group open code does not need to do this. Unlike indices, column groups are
         * opened when the table cursor is opened, and a failure there cannot result in an open
         * table cursor.
         ','line_number':1023,'multiline':True]
['text':'
 * __wt_curtable_open --
 *     WT_SESSION->open_cursor method for table cursors.
 ','line_number':1042,'multiline':True]
['text':' get-key ','line_number':1050,'multiline':True]
['text':' get-value ','line_number':1051,'multiline':True]
['text':' get-raw-key-value ','line_number':1052,'multiline':True]
['text':' set-key ','line_number':1053,'multiline':True]
['text':' set-value ','line_number':1054,'multiline':True]
['text':' compare ','line_number':1055,'multiline':True]
['text':' equals ','line_number':1056,'multiline':True]
['text':' next ','line_number':1057,'multiline':True]
['text':' prev ','line_number':1058,'multiline':True]
['text':' reset ','line_number':1059,'multiline':True]
['text':' search ','line_number':1060,'multiline':True]
['text':' search-near ','line_number':1061,'multiline':True]
['text':' insert ','line_number':1062,'multiline':True]
['text':' modify ','line_number':1063,'multiline':True]
['text':' update ','line_number':1064,'multiline':True]
['text':' remove ','line_number':1065,'multiline':True]
['text':' reserve ','line_number':1066,'multiline':True]
['text':' reconfigure ','line_number':1067,'multiline':True]
['text':' largest_key ','line_number':1068,'multiline':True]
['text':' bound ','line_number':1069,'multiline':True]
['text':' cache ','line_number':1070,'multiline':True]
['text':' reopen ','line_number':1071,'multiline':True]
['text':' checkpoint ID ','line_number':1072,'multiline':True]
['text':' close ','line_number':1073,'multiline':True]
['text':' completeness check ','line_number':1096,'multiline':True]
['text':' Just return a cursor on the underlying data source. ','line_number':1099,'multiline':True]
['text':' Fix up the public URI to match what was passed in. ','line_number':1104,'multiline':True]
['text':' Handle projections. ','line_number':1123,'multiline':True]
['text':'
     * random_retrieval Random retrieval cursors only support next, reset and close.
     ','line_number':1134,'multiline':True]
['text':'
     * Open the colgroup cursors immediately: we're going to need them for
     * any operation.  We defer opening index cursors until we need them
     * for an update.  Note that this must come after the call to
     * __wt_cursor_init: the table cursor must already be on the list of
     * session cursors or we can't work out where to put the colgroup
     * cursor(s).
     ','line_number':1149,'multiline':True]
['text':'
     * We'll need to squirrel away a copy of the cursor configuration for if/when we open indices.
     *
     * cfg[0] is the baseline configuration for the cursor open and we can acquire another copy from
     * the configuration structures, so it would be reasonable not to copy it here: but I'd rather
     * be safe than sorry.
     *
     * cfg[1] is the application configuration.
     *
     * Underlying indices are always opened without dump or readonly; that information is appended
     * to cfg[1] so later "fast" configuration calls (checking only cfg[0] and cfg[1]) work. I don't
     * expect to see more than two configuration strings here, but it's written to compact into two
     * configuration strings, a copy of cfg[0] and the rest in cfg[1].
     ','line_number':1159,'multiline':True]
['text':'
             * When a dump cursor is opened, then *cursorp, not cursor, is the dump cursor. Close
             * the dump cursor, and the table cursor will be closed as its child.
             ','line_number':1184,'multiline':True]
