['text':'-
 * Copyright (c) 2014-present MongoDB, Inc.
 * Copyright (c) 2008-2014 WiredTiger, Inc.
 *	All rights reserved.
 *
 * See the file LICENSE for redistribution information.
 ','line_number':1,'multiline':True]
['text':' User format strings have already been validated. ','line_number':56,'multiline':True]
['text':'
 * __json_unpack_put --
 *     Calculate the size of a packed byte string as formatted for JSON.
 ','line_number':61,'multiline':True]
['text':' Account for '"' quote in front and back. ','line_number':87,'multiline':True]
['text':'
 * __json_struct_size --
 *     Calculate the size of a packed byte string as formatted for JSON.
 ','line_number':168,'multiline':True]
['text':' Be paranoid - __pack_write should never overflow. ','line_number':202,'multiline':True]
['text':'
 * __json_struct_unpackv --
 *     Unpack a byte string to JSON (va_list version).
 ','line_number':209,'multiline':True]
['text':' Unpacking a cursor marked as json implies a single arg. ','line_number':230,'multiline':True]
['text':' Be paranoid - __unpack_read should never overflow. ','line_number':253,'multiline':True]
['text':'
 * __wt_json_alloc_unpack --
 *     Allocate space for, and unpack an entry into JSON format.
 ','line_number':261,'multiline':True]
['text':'
 * __wt_json_close --
 *     Release any json related resources.
 ','line_number':289,'multiline':True]
['text':'
 * __wt_json_unpack_char --
 *     Unpack a single character into JSON escaped format. Can be called with NULL buf for sizing,
 *     and won't overwrite the buffer end in any case.
 ','line_number':307,'multiline':True]
['text':' We treat all non-ASCII characters as non-printable. ','line_number':319,'multiline':True]
['text':'
 * __wt_json_unpack_str --
 *     Unpack a string into JSON escaped format. Can be called with NULL buf for sizing and won't
 *     overwrite the buffer end in any case.
 ','line_number':363,'multiline':True]
['text':'
 * __wt_json_column_init --
 *     Set json_key_names, json_value_names to comma separated lists of column names.
 ','line_number':385,'multiline':True]
['text':' This cursor is a projection. ','line_number':426,'multiline':True]
['text':'
 * __wt_json_token --
 *     Return the type, start position and length of the next JSON token in the input. String tokens
 *     include the quotes. JSON can be entirely parsed using calls to this tokenizer, each call
 *     using a src pointer that is the previously returned tokstart + toklen. The token type
 *     returned is one of: 0 : EOF 's' : string 'i' : intnum 'f' : floatnum ':' : colon ',' : comma
 *     '{' : lbrace '}' : rbrace '[' : lbracket ']' : rbracket 'N' : null 'T' : true 'F' : false
 ','line_number':461,'multiline':True]
['text':' JSON is specified in RFC 4627. ','line_number':491,'multiline':True]
['text':' We validate Unicode on this pass. ','line_number':506,'multiline':True]
['text':' An illegal token, move past it anyway ','line_number':573,'multiline':True]
['text':' NOTREACHED ','line_number':581,'multiline':True]
['text':'
 * __wt_json_tokname --
 *     Return a descriptive name from the token type returned by __wt_json_token.
 ','line_number':590,'multiline':True]
['text':'
 * json_string_arg --
 *     Returns a first cut of the needed string in item. The result has not been stripped of
 *     escapes.
 ','line_number':629,'multiline':True]
['text':' The tokenizer includes the '"' chars ','line_number':643,'multiline':True]
['text':'
 * json_int_arg --
 *     Returns a signed integral value from the current position in the JSON string.
 ','line_number':651,'multiline':True]
['text':' JSON only allows decimal ','line_number':665,'multiline':True]
['text':'
 * json_uint_arg --
 *     Returns an unsigned integral value from the current position in the JSON string.
 ','line_number':675,'multiline':True]
['text':' JSON only allows decimal ','line_number':689,'multiline':True]
['text':'
 * __json_pack_struct --
 *     Pack a byte string from a JSON string.
 ','line_number':716,'multiline':True]
['text':' the key name was verified in __json_pack_size ','line_number':738,'multiline':True]
['text':' the key name was verified in __json_pack_size ','line_number':750,'multiline':True]
['text':' Be paranoid - __pack_write should never overflow. ','line_number':758,'multiline':True]
['text':'
 * __json_pack_size --
 *     Calculate the size of a packed byte string from a JSON string. We verify that the names and
 *     value types provided in JSON match the column names and type from the schema format,
 *     returning error if not.
 ','line_number':764,'multiline':True]
['text':' check end of string ','line_number':802,'multiline':True]
['text':'
 * __wt_json_to_item --
 *     Convert a JSON input string for either key/value to a raw WT_ITEM. Checks that the input
 *     matches the expected format.
 ','line_number':808,'multiline':True]
['text':' Initialize because GCC 4.1 is paranoid ','line_number':818,'multiline':True]
['text':'
 * __wt_json_strlen --
 *     Return the number of bytes represented by a string in JSON format, or -1 if the format is
 *     incorrect.
 ','line_number':827,'multiline':True]
['text':' JSON can include any UTF-8 expressed in 4 hex chars. ','line_number':842,'multiline':True]
['text':'
                     * For our dump representation, every Unicode character on input represents a
                     * single byte.
                     ','line_number':852,'multiline':True]
['text':' invalid input, e.g. final char is '\\' ','line_number':863,'multiline':True]
['text':'
 * __wt_json_strncpy --
 *     Copy bytes of string in JSON format to a destination, up to dstlen bytes. If dstlen is
 *     greater than the needed size, the result if zero padded.
 ','line_number':867,'multiline':True]
['text':' JSON can include any UTF-8 expressed in 4 hex chars. ','line_number':887,'multiline':True]
