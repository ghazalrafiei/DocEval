['text':'-
 * Copyright (c) 2014-present MongoDB, Inc.
 * Copyright (c) 2008-2014 WiredTiger, Inc.
 *	All rights reserved.
 *
 * See the file LICENSE for redistribution information.
 ','line_number':1,'multiline':True]
['text':'
 * __wt_backup_destroy --
 *     Destroy any backup information.
 ','line_number':21,'multiline':True]
['text':' Free any incremental backup information. ','line_number':33,'multiline':True]
['text':'
 * __wt_backup_open --
 *     Restore any incremental backup information. We use the metadata's block information as the
 *     authority on whether incremental backup was in use on last shutdown.
 ','line_number':43,'multiline':True]
['text':'
     * Walk each item in the metadata and set up our last known global incremental information.
     ','line_number':65,'multiline':True]
['text':'
         * If we get here, we have at least one valid incremental backup. We want to set up its
         * general configuration in the global table.
         ','line_number':72,'multiline':True]
['text':'
         * NOTE: For now the granularity is in the connection because it cannot change. We may be
         * able to relax that.
         ','line_number':80,'multiline':True]
['text':'
 * __wt_backup_file_remove --
 *     Remove the incremental and meta-data backup files.
 ','line_number':95,'multiline':True]
['text':'
     * Note that order matters for removing the incremental files. We must remove the backup file
     * before removing the source file so that we always know we were a source directory while
     * there's any chance of an incremental backup file existing.
     ','line_number':104,'multiline':True]
['text':'
 * __curbackup_next --
 *     WT_CURSOR->next method for the backup cursor type.
 ','line_number':116,'multiline':True]
['text':'
 * __curbackup_reset --
 *     WT_CURSOR->reset method for the backup cursor type.
 ','line_number':146,'multiline':True]
['text':'
 * __backup_free --
 *     Free list resources for a backup cursor.
 ','line_number':168,'multiline':True]
['text':'
 * __curbackup_close --
 *     WT_CURSOR->close method for the backup cursor type.
 ','line_number':188,'multiline':True]
['text':'
     * For either a force stop or a full backup starting an incremental force a checkpoint so that
     * the new information is visible in the metadata and old backup information does not reappear
     * if we crash and restart.
     ','line_number':209,'multiline':True]
['text':' Must be declared and initialized after session is set in the CURSOR_API macro. ','line_number':216,'multiline':True]
['text':' Mark the connection modified to make sure a checkpoint happens even on an idle system. ','line_number':219,'multiline':True]
['text':'
     * When starting a hot backup, we serialize hot backup cursors and set the connection's
     * hot-backup flag. Once that's done, we set the cursor's backup-locker flag, implying the
     * cursor owns all necessary cleanup (including removing temporary files), regardless of error
     * or success. The cursor's backup-locker flag is never cleared (it's just discarded when the
     * cursor is closed), because that cursor will never not be responsible for cleanup.
     ','line_number':224,'multiline':True]
['text':' Make sure the original backup cursor is still open. ','line_number':233,'multiline':True]
['text':'
 * __wt_curbackup_open --
 *     WT_SESSION->open_cursor method for the backup cursor type.
 ','line_number':246,'multiline':True]
['text':' get-key ','line_number':254,'multiline':True]
['text':' get-value ','line_number':255,'multiline':True]
['text':' get-raw-key-value ','line_number':256,'multiline':True]
['text':' set-key ','line_number':257,'multiline':True]
['text':' set-value ','line_number':258,'multiline':True]
['text':' compare ','line_number':259,'multiline':True]
['text':' equals ','line_number':260,'multiline':True]
['text':' next ','line_number':261,'multiline':True]
['text':' prev ','line_number':262,'multiline':True]
['text':' reset ','line_number':263,'multiline':True]
['text':' search ','line_number':264,'multiline':True]
['text':' search-near ','line_number':265,'multiline':True]
['text':' insert ','line_number':266,'multiline':True]
['text':' modify ','line_number':267,'multiline':True]
['text':' update ','line_number':268,'multiline':True]
['text':' remove ','line_number':269,'multiline':True]
['text':' reserve ','line_number':270,'multiline':True]
['text':' reconfigure ','line_number':271,'multiline':True]
['text':' largest_key ','line_number':272,'multiline':True]
['text':' bound ','line_number':273,'multiline':True]
['text':' cache ','line_number':274,'multiline':True]
['text':' reopen ','line_number':275,'multiline':True]
['text':' checkpoint ID ','line_number':276,'multiline':True]
['text':' close ','line_number':277,'multiline':True]
['text':' Return the file names as the key. ','line_number':288,'multiline':True]
['text':' No value, for now. ','line_number':289,'multiline':True]
['text':' Special backup cursor to query incremental IDs. ','line_number':296,'multiline':True]
['text':' Top level cursor code does not allow a URI and cursor. We don't need to check here. ','line_number':298,'multiline':True]
['text':' Special backup cursor for export operation. ','line_number':304,'multiline':True]
['text':'
     * Export cursors are for tiered storage. Do not allow backup cursors if tiered storage is in
     * use on the connection and it isn't an export cursor.
     ','line_number':307,'multiline':True]
['text':'
     * Start the backup and fill in the cursor's list. Acquire the schema lock, we need a consistent
     * view when creating a copy.
     ','line_number':314,'multiline':True]
['text':'
 * __backup_add_id --
 *     Add the identifier for block based incremental backup.
 ','line_number':334,'multiline':True]
['text':' If it isn't already in use, we can use it. ','line_number':351,'multiline':True]
['text':'
     * We didn't find an entry. This should not happen.
     ','line_number':359,'multiline':True]
['text':' Use the slot. ','line_number':365,'multiline':True]
['text':' Free anything that was there. ','line_number':369,'multiline':True]
['text':'
     * Get the most recent checkpoint name. For now just use the one that is part of the metadata.
     * We only care whether or not a checkpoint exists, so immediately free it.
     ','line_number':372,'multiline':True]
['text':'
         * If we don't find any checkpoint, backup files need to be full copy.
         ','line_number':380,'multiline':True]
['text':'
 * __backup_find_id --
 *     Find the source identifier for block based incremental backup. Error if it is not a valid id.
 ','line_number':399,'multiline':True]
['text':' If it isn't valid, skip it. ','line_number':414,'multiline':True]
['text':'
 * __backup_log_append --
 *     Append log files needed for backup.
 ','line_number':432,'multiline':True]
['text':'
 * __backup_config --
 *     Backup configuration.
 *
 * NOTE: this function handles all of the backup configuration except for the incremental use of
 *     force_stop. That is handled at the beginning of __backup_start because we want to deal with
 *     that setting without any of the other cursor setup.
 ','line_number':459,'multiline':True]
['text':'
     * Per-file offset incremental hot backup configurations take a starting checkpoint and optional
     * maximum transfer size, and the subsequent duplicate cursors take a file object.
     ','line_number':488,'multiline':True]
['text':' Granularity can only be set once at the beginning ','line_number':502,'multiline':True]
['text':'
     * Consolidation can be on a per incremental basis or a per-file duplicate cursor basis.
     ','line_number':507,'multiline':True]
['text':'
     * Specifying an incremental file means we're opening a duplicate backup cursor.
     ','line_number':520,'multiline':True]
['text':'
     * See if we have a source identifier. We must process the source identifier before processing
     * the 'this' identifier. That will mark which source is in use so that we can use any slot that
     * is not in use as a new source starting point for this identifier.
     ','line_number':532,'multiline':True]
['text':'
     * Use WT_ERR from here out because we need to clear the in use flag on error now.
     ','line_number':546,'multiline':True]
['text':'
     * Look for a new checkpoint name to retain and mark as a starting point.
     ','line_number':550,'multiline':True]
['text':'
     * If we find a non-empty target configuration string, we have a job, otherwise it's not our
     * problem.
     ','line_number':566,'multiline':True]
['text':' If it is our first time through, allocate. ','line_number':574,'multiline':True]
['text':'
         * Handle log targets. We do not need to go through the schema worker, just call the
         * function to append them. Set log_only only if it is our only URI target.
         ','line_number':585,'multiline':True]
['text':'
             * If backing up individual tables, we have to include indexes, which may involve
             * opening those indexes. Acquire the table lock in write mode for that case.
             ','line_number':599,'multiline':True]
['text':'
     * Compatibility checking.
     *
     * Log remove cannot mix with log-file based incremental backups (but if a duplicate cursor,
     * removal has been temporarily suspended).
     *
     * Duplicate backup cursors are only for log targets or block-based incremental backups. But log
     * targets don't make sense with block-based incremental backup.
     ','line_number':610,'multiline':True]
['text':' Return an error if block-based incremental backup is performed with open LSM trees. ','line_number':639,'multiline':True]
['text':'
 * __backup_query_setup --
 *     Setup the names to return with a backup query cursor.
 ','line_number':653,'multiline':True]
['text':' If it isn't valid, skip it. ','line_number':665,'multiline':True]
['text':'
 * __backup_start --
 *     Start a backup.
 ','line_number':673,'multiline':True]
['text':'
     * Single thread hot backups: we're holding the schema lock, so we know we'll serialize with
     * other attempts to start a hot backup.
     ','line_number':702,'multiline':True]
['text':'
     * We want to check for forced stopping early before we do anything else. If it is set, we just
     * set a flag and we're done. Actions will be performed on cursor close.
     ','line_number':712,'multiline':True]
['text':'
         * If we're force stopping incremental backup, set the flag. The resources involved in
         * incremental backup will be released on cursor close and that is the only expected usage
         * for this cursor.
         ','line_number':718,'multiline':True]
['text':'
         * The hot backup copy is done outside of WiredTiger, which means file blocks can't be freed
         * and re-allocated until the backup completes. The checkpoint code checks the backup flag,
         * and if a backup cursor is open checkpoints aren't discarded. We release the lock as soon
         * as we've set the flag, we don't want to block checkpoints, we just want to make sure no
         * checkpoints are deleted. The checkpoint code holds the lock until it's finished the
         * checkpoint, otherwise we could start a hot backup that would race with an already-started
         * checkpoint.
         *
         * We are holding the checkpoint and schema locks so schema operations will not see the
         * backup file list until it is complete and valid.
         ','line_number':731,'multiline':True]
['text':' We're the lock holder, we own cleanup. ','line_number':745,'multiline':True]
['text':'
         * If we are a query backup cursor there are no configuration settings and it will set up
         * its own list of strings to return. We don't have to do any of the other processing. A
         * query creates a list to return but does not create the backup file. After appending the
         * list of IDs we are done.
         ','line_number':747,'multiline':True]
['text':'
         * Create a temporary backup file. This must be opened before generating the list of targets
         * in backup_config. This file will later be renamed to the correct name depending on
         * whether or not we're doing an incremental backup. We need a temp file so that if we fail
         * or crash while filling it, the existence of a partial file doesn't confuse restarting in
         * the source database.
         ','line_number':757,'multiline':True]
['text':'
     * If targets were specified, add them to the list. Otherwise it is a full backup, add all
     * database objects and log files to the list.
     ','line_number':767,'multiline':True]
['text':'
     * For a duplicate cursor, all the work is done in backup_config.
     ','line_number':773,'multiline':True]
['text':'
         * It's important to first gather the log files to be copied (which internally starts a new
         * log file), followed by choosing a checkpoint to reference in the WiredTiger.backup file.
         *
         * Applications may have logic that takes a checkpoint, followed by performing a write that
         * should only appear in the new checkpoint. This ordering prevents choosing the prior
         * checkpoint, but including the write in the log files returned.
         *
         * It is also possible, and considered legal, to choose the new checkpoint, but not include
         * the log file that contains the log entry for taking the new checkpoint.
         ','line_number':782,'multiline':True]
['text':' Add the hot backup and standard WiredTiger files to the list. ','line_number':797,'multiline':True]
['text':'
         * If this is not a duplicate cursor, using the log target is an incremental backup. If this
         * is a duplicate cursor then using the log target on an existing backup cursor means this
         * cursor returns the current list of log files. That list was set up when parsing the URI
         * so we don't have anything to do here.
         *
         * We also open an incremental backup source file so that we can detect a crash with an
         * incremental backup existing in the source directory versus an improper destination.
         ','line_number':799,'multiline':True]
['text':' Close the hot backup file. ','line_number':825,'multiline':True]
['text':'
     * Sync and rename the temp file into place.
     ','line_number':828,'multiline':True]
['text':'
     * If the file hasn't been closed, do it now.
     ','line_number':838,'multiline':True]
['text':'
 * __backup_stop --
 *     Stop a backup.
 ','line_number':848,'multiline':True]
['text':' Release all btree names held by the backup. ','line_number':860,'multiline':True]
['text':' If it's not a dup backup cursor, make sure one isn't open. ','line_number':862,'multiline':True]
['text':' Remove any backup specific file. ','line_number':869,'multiline':True]
['text':' Remove the export file only when we close the backup cursor. ','line_number':872,'multiline':True]
['text':' Checkpoint deletion and next hot backup can proceed. ','line_number':875,'multiline':True]
['text':'
 * __backup_all --
 *     Backup all objects in the database.
 ','line_number':882,'multiline':True]
['text':' Build a list of the file objects that need to be copied. ','line_number':889,'multiline':True]
['text':'
 * __backup_list_uri_append --
 *     Append a new file name to the list, allocate space as necessary. Called via the schema_worker
 *     function.
 ','line_number':893,'multiline':True]
['text':'
     * While reading the metadata file, check there are no data sources that can't support hot
     * backup. This checks for a data source that's non-standard, which can't be backed up, but is
     * also sanity checking: if there's an entry backed by anything other than a file or lsm entry,
     * we're confused.
     ','line_number':908,'multiline':True]
['text':' Add the metadata entry to the backup file. ','line_number':921,'multiline':True]
['text':'
     * We want to retain the system information in the backup metadata file above, but there is no
     * file object to copy so return now.
     ','line_number':927,'multiline':True]
['text':' Add file type objects to the list of files to be copied. ','line_number':934,'multiline':True]
['text':'
 * __backup_list_append --
 *     Append a new file name to the list, allocate space as necessary.
 ','line_number':941,'multiline':True]
['text':' Leave a NULL at the end to mark the end of the list. ','line_number':951,'multiline':True]
['text':'
     * If it's a file in the database we need to remove the prefix.
     ','line_number':958,'multiline':True]
['text':'
     * !!!
     * Assumes metadata file entries map one-to-one to physical files.
     * To support a block manager where that's not the case, we'd need
     * to call into the block manager and get a list of physical files
     * that map to this logical "file".  I'm not going to worry about
     * that for now, that block manager might not even support physical
     * copying of files by applications.
     ','line_number':964,'multiline':True]
