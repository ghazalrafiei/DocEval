['text':'-
 * Copyright (c) 2014-present MongoDB, Inc.
 * Copyright (c) 2008-2014 WiredTiger, Inc.
 *	All rights reserved.
 *
 * See the file LICENSE for redistribution information.
 ','line_number':1,'multiline':True]
['text':'
 * __rts_btree_walk_check_btree_modified --
 *     Check that the rollback to stable btree is modified or not.
 ','line_number':11,'multiline':True]
['text':'
 * __rts_btree_walk_page_skip --
 *     Skip if rollback to stable doesn't require reading this page.
 ','line_number':25,'multiline':True]
['text':' Default to reading ','line_number':41,'multiline':True]
['text':'
     * Skip pages truncated at or before the RTS timestamp. (We could read the page, but that would
     * unnecessarily instantiate it). If the page has no fast-delete information, that means either
     * it was discarded because the delete is globally visible, or the internal page holding the
     * cell was an old format page so none was loaded. In the latter case we should skip the page as
     * there's no way to get correct behavior and skipping matches the historic behavior. Note that
     * eviction is running; we must lock the WT_REF before examining the fast-delete information.
     ','line_number':43,'multiline':True]
['text':'
             * We should never see a prepared truncate here; not at recovery time because prepared
             * truncates can't be written to disk, and not during a runtime RTS either because it
             * should not be possible to do that with an unresolved prepared transaction.
             ','line_number':57,'multiline':True]
['text':' Otherwise, if the page state is other than on disk, we want to look at it. ','line_number':92,'multiline':True]
['text':'
     * Check whether this on-disk page has any updates to be aborted. We are not holding a hazard
     * reference on the page and so we rely on there being no other threads of control in the tree,
     * that is, eviction ignores WT_REF_DISK pages and no other thread is reading pages, this page
     * cannot change state from on-disk to something else.
     ','line_number':96,'multiline':True]
['text':'
 * __rts_btree_walk --
 *     Called for each open handle - choose to either skip or wipe the commits
 ','line_number':117,'multiline':True]
['text':' Walk the tree, marking commits aborted where appropriate. ','line_number':132,'multiline':True]
['text':'
 * __wt_rts_btree_walk_btree_apply --
 *     Perform rollback to stable on a single file.
 ','line_number':147,'multiline':True]
['text':' Ignore non-btree objects as well as the metadata and history store files. ','line_number':167,'multiline':True]
['text':' Find out the max durable timestamp of the object from checkpoint. ','line_number':177,'multiline':True]
['text':'
     * Perform rollback to stable when the newest written transaction of the btree is greater than
     * or equal to the checkpoint snapshot. The snapshot comparison is valid only when the btree
     * write generation number is greater than the last checkpoint connection base write generation
     * to confirm that the btree is modified in the previous restart cycle.
     ','line_number':223,'multiline':True]
['text':' Increment the inconsistent checkpoint stats counter. ','line_number':232,'multiline':True]
['text':'
     * During recovery, a table is skipped by RTS if one of the conditions is met:
     * 1. The table is empty or newly-created.
     * 2. The table has timestamped updates without a stable timestamp.
     ','line_number':236,'multiline':True]
['text':'
     * The rollback operation should be performed on this file based on the following:
     * 1. The dhandle is present in the cache and tree is modified.
     * 2. The checkpoint durable start/stop timestamp is greater than the rollback timestamp.
     * 3. The checkpoint has prepared updates written to disk.
     * 4. The checkpoint newest txn is greater than checkpoint snapshot min txn id.
     ','line_number':250,'multiline':True]
['text':' Open a handle for processing. ','line_number':265,'multiline':True]
['text':'
     * Truncate history store entries for the non-timestamped table.
     * Exceptions:
     * 1. Modified tree - Scenarios where the tree is never checkpointed lead to zero
     * durable timestamp even they are timestamped tables. Until we have a special
     * indication of letting to know the table type other than checking checkpointed durable
     * timestamp to WT_TS_NONE, we need this exception.
     * 2. In-memory database - In this scenario, there is no history store to truncate.
     ','line_number':297,'multiline':True]
['text':'
 * __wt_rts_btree_walk_btree --
 *     Called for each object handle - choose to either skip or wipe the commits
 ','line_number':319,'multiline':True]
['text':' Files with commit-level durability (without timestamps), don't get their commits wiped. ','line_number':338,'multiline':True]
['text':' There is never anything to do for checkpoint handles. ','line_number':342,'multiline':True]
['text':' There is nothing to do on an empty tree. ','line_number':346,'multiline':True]
