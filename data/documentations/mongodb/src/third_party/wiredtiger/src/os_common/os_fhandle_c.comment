['text':'-
 * Copyright (c) 2014-present MongoDB, Inc.
 * Copyright (c) 2008-2014 WiredTiger, Inc.
 *	All rights reserved.
 *
 * See the file LICENSE for redistribution information.
 ','line_number':1,'multiline':True]
['text':'
 * __fhandle_method_finalize --
 *     Initialize any NULL WT_FH structure methods to not-supported. Doing this means that custom
 *     file systems with incomplete implementations won't dereference NULL pointers.
 ','line_number':11,'multiline':True]
['text':' not required: fh_advise ','line_number':24,'multiline':True]
['text':' not required: fh_extend ','line_number':25,'multiline':True]
['text':' not required: fh_extend_nolock ','line_number':26,'multiline':True]
['text':' not required: fh_map ','line_number':28,'multiline':True]
['text':' not required: fh_map_discard ','line_number':29,'multiline':True]
['text':' not required: fh_map_preload ','line_number':30,'multiline':True]
['text':' not required: fh_unmap ','line_number':31,'multiline':True]
['text':' not required: fh_sync_nowait ','line_number':36,'multiline':True]
['text':' not required: fh_truncate ','line_number':37,'multiline':True]
['text':'
 * __wt_handle_is_open --
 *     Return if there's an open handle matching a name.
 ','line_number':44,'multiline':True]
['text':'
 * __wt_remove_locked --
 *     While locked, if the handle is not open, remove the local file.
 ','line_number':77,'multiline':True]
['text':'
 * __handle_search --
 *     Search for a matching handle.
 ','line_number':104,'multiline':True]
['text':'
     * If we already have the file open, increment the reference count and return a pointer.
     ','line_number':126,'multiline':True]
['text':' If we don't find a match, optionally add a new entry. ','line_number':137,'multiline':True]
['text':'
 * __open_verbose_file_type_tag --
 *     Return a string describing a file type.
 ','line_number':152,'multiline':True]
['text':'
     * WT_FS_OPEN_FILE_TYPE is an enum and the switch exhaustively lists the cases, but clang, lint
     * and gcc argue over whether or not the switch is exhaustive, or if a temporary variable
     * inserted into the mix is set but never read. Break out of the switch, returning some value in
     * all cases, just to shut everybody up.
     ','line_number':160,'multiline':True]
['text':'
 * __open_verbose --
 *     Optionally output a verbose message on handle open.
 ','line_number':181,'multiline':True]
['text':'
     * It's useful to track file opens when debugging platforms, take some effort to output good
     * tracking information.
     ','line_number':196,'multiline':True]
['text':'
 * __wt_open --
 *     Open a file handle.
 ','line_number':225,'multiline':True]
['text':' A file type is required. ','line_number':240,'multiline':True]
['text':' Check if the handle is already open. ','line_number':252,'multiline':True]
['text':' Allocate and initialize the handle. ','line_number':258,'multiline':True]
['text':'
     * If this is a read-only connection, open all files read-only except the lock file.
     *
     * The only file created in read-only mode is the lock file.
     ','line_number':264,'multiline':True]
['text':' Create the path to the file. ','line_number':276,'multiline':True]
['text':' Call the underlying open function. ','line_number':280,'multiline':True]
['text':'
     * Repeat the check for a match: if there's no match, link our newly created handle onto the
     * database's list of files.
     ','line_number':287,'multiline':True]
['text':'
 * __handle_close --
 *     Final close of a handle.
 ','line_number':305,'multiline':True]
['text':' Remove from the list. ','line_number':321,'multiline':True]
['text':' Discard underlying resources. ','line_number':329,'multiline':True]
['text':'
 * __wt_close --
 *     Close a file handle.
 ','line_number':338,'multiline':True]
['text':' Track handle-close as a file operation, so open and close match. ','line_number':355,'multiline':True]
['text':'
     * If the reference count hasn't gone to 0, or if it's an in-memory object, we're done.
     *
     * Assert the reference count is correct, but don't let it wrap.
     ','line_number':358,'multiline':True]
['text':'
 * __wt_fsync_background_chk --
 *     Return if background fsync is supported.
 ','line_number':373,'multiline':True]
['text':'
     * Look for the first data file handle and see if the fsync nowait function is supported.
     ','line_number':388,'multiline':True]
['text':'
         * If we don't have a function, return false, otherwise return true. In any case, we are
         * done with the loop.
         ','line_number':395,'multiline':True]
['text':'
 * __fsync_background --
 *     Background fsync for a single dirty file handle.
 ','line_number':407,'multiline':True]
['text':' Only sync data files. ','line_number':427,'multiline':True]
['text':'
         * We set the false flag to indicate a non-blocking background fsync, but there is no
         * guarantee that it doesn't block. If we wanted to detect if it is blocking, adding a clock
         * call and checking the time would be done here.
         ','line_number':435,'multiline':True]
['text':'
 * __wt_fsync_background --
 *     Background fsync for all dirty file handles.
 ','line_number':452,'multiline':True]
['text':'
         * The worker routine will unlock the list to avoid holding it locked over an fsync.
         * Increment the count on the current and next handles to guarantee their validity.
         ','line_number':467,'multiline':True]
['text':'
         * The file handle reference may have gone to 0, in which case we're responsible for the
         * close. Configure the close routine to drop the lock, which means we must re-acquire it.
         ','line_number':477,'multiline':True]
['text':'
         * Decrement the next element's reference count. It might have gone to 0 as well, in which
         * case we'll close it in the next loop iteration.
         ','line_number':486,'multiline':True]
['text':'
 * __wt_close_connection_close --
 *     Close any open file handles at connection close.
 ','line_number':497,'multiline':True]
['text':'
 * __wt_file_zero --
 *     Zero out the file from offset for size bytes.
 ','line_number':515,'multiline':True]
['text':'
         * We benefit from aligning our writes when we can. Log files will typically want to start
         * to zero after the log header and the bufsz is a sector-aligned size. So align when we
         * can.
         ','line_number':533,'multiline':True]
['text':'
         * Check if we're writing a partial amount at the end too.
         ','line_number':543,'multiline':True]
