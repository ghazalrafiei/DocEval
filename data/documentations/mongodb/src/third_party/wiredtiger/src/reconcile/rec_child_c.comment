['text':'-
 * Copyright (c) 2014-present MongoDB, Inc.
 * Copyright (c) 2008-2014 WiredTiger, Inc.
 *	All rights reserved.
 *
 * See the file LICENSE for redistribution information.
 ','line_number':1,'multiline':True]
['text':'
 * __rec_child_deleted --
 *     Handle pages with leaf pages in the WT_REF_DELETED state.
 ','line_number':11,'multiline':True]
['text':'
     * If there's no page-delete structure, the truncate must be globally visible. Discard any
     * underlying disk blocks and don't write anything in the internal page.
     ','line_number':28,'multiline':True]
['text':'
     * Check visibility. If the truncation is visible to us, we'll also want to know if it's visible
     * to everyone. Use the special-case logic in __wt_page_del_visible to hide prepared truncations
     * as we can't write them to disk.
     *
     * We can't write out uncommitted truncations so we need to check the committed flag on the page
     * delete structure. The committed flag indicates that the truncation has finished being
     * processed by the transaction commit call and is a separate concept to the visibility, which
     * means that while the truncation may be visible it hasn't finished committing. This can occur
     * with prepared truncations, which go through two distinct phases in __wt_txn_commit:
     *   - Firstly the operations on the transaction are walked and the page delete structure has
     *     its prepare state set to resolved. At this stage the truncate can appear to be visible.
     *   - After the operations have been resolved the page delete structure is marked as being
     *     committed.
     *
     * Given the order of these operations we must perform the inverse sequence. First check the
     * committed flag and then check the visibility. There is a concurrency concern here as if the
     * write to the page delete structure is reordered we may see it be set early. However this is
     * handled by locking the ref in the commit path. Additionally this function locks the ref. Thus
     * setting the page delete structure committed flag cannot overlap with us checking the flag.
     ','line_number':35,'multiline':True]
['text':'
     * If an earlier reconciliation chose to write the fast truncate information to the page, we
     * should select it regardless of visibility unless it is globally visible. This is important as
     * it is never ok to shift the on-disk value backwards.
     ','line_number':63,'multiline':True]
['text':'
     * The truncate may not yet be visible to us. In that case, we proceed as with any change not
     * visible during reconciliation by ignoring the change for the purposes of writing the internal
     * page.
     *
     * We expect the page to be clean after reconciliation. If there are invisible updates, abort
     * eviction.
     *
     * We must have reconciliation leave the page dirty in this case, because the truncation hasn't
     * been written to disk yet; if the page gets marked clean it might be discarded and then the
     * truncation is lost.
     ','line_number':74,'multiline':True]
['text':'
         * In addition to the WT_REC_CLEAN_AFTER_REC case, fail if we're trying to evict an internal
         * page and we can't see the update to it. There's not much point continuing; unlike with a
         * leaf page, rewriting the page image and keeping the modification doesn't accomplish a
         * great deal. Also currently code elsewhere assumes that evicting (vs. checkpointing)
         * internal pages shouldn't leave them dirty.
         ','line_number':90,'multiline':True]
['text':'
     * We should never get this far with an uncommitted deletion: in a checkpoint an uncommitted
     * deletion should not be visible, and while an uncommitted deletion might be visible to an
     * application thread doing eviction, the check for whether an internal page is evictable should
     * only allow committed deletions.
     ','line_number':104,'multiline':True]
['text':'
     * A visible entry can be in a prepared state and checkpoints skip in-progress prepared changes.
     * We can't race here, the entry won't be visible to the checkpoint, or will be in a prepared
     * state, one or the other.
     *
     * We should never see an in-progress prepare in eviction: when we check to see if an internal
     * page can be evicted, we check for an unresolved fast-truncate, which includes a fast-truncate
     * in a prepared state, so it's an error to see that during eviction.
     *
     * As in the previous case, leave the page dirty. This is not strictly necessary as the prepared
     * truncation will also prevent eviction; but if we don't do it and someone adds the ability to
     * evict prepared truncates, the page apparently being clean might lead to truncations being
     * lost in hard-to-debug ways.
     ','line_number':112,'multiline':True]
['text':'
     * If there are readers that might want to see the page's state before it's deleted, or the
     * fast-delete can be undone by RTS, we can't discard the pages. Write a cell to the internal
     * page with information describing the fast-delete.
     *
     * We have the WT_REF locked, but that lock is released before returning to the function writing
     * cells to the page. Copy out the current fast-truncate information for that function.
     ','line_number':137,'multiline':True]
['text':'
             * Internal pages with deletes that aren't globally visible cannot be evicted if we
             * don't write the page_del information, we don't have sufficient information to restore
             * the page's information if subsequently read (we wouldn't know which transactions
             * should see the original page and which should see the deleted page).
             ','line_number':147,'multiline':True]
['text':'
             * It is wrong to leave the page clean after checkpoint if we cannot write the deleted
             * pages to disk in eviction. If we do so, the next eviction will discard the page
             * without reconcile it again and we lose the time point information of the non-obsolete
             * deleted pages.
             ','line_number':156,'multiline':True]
['text':'
     * Deal with underlying disk blocks.
     *
     * Globally visible truncate, discard the leaf page to the block manager and no cell needs to be
     * written. Done outside of the underlying tracking routines because this action is permanent
     * and irrevocable. (Clearing the address means we've lost track of the disk address in a
     * permanent way. This is safe because there's no path to reading the leaf page again: if there
     * is ever a read into this part of the name space again, the cache read function instantiates
     * an entirely new page.)
     ','line_number':170,'multiline':True]
['text':' Globally visible fast-truncate information is never used again, a NULL value is identical. ','line_number':182,'multiline':True]
['text':'
 * __wt_rec_child_modify --
 *     Return if the internal page's child references any modifications.
 ','line_number':188,'multiline':True]
['text':' We may acquire a hazard pointer our caller must release. ','line_number':199,'multiline':True]
['text':' Default to using the original child address. ','line_number':202,'multiline':True]
['text':'
     * This function is called when walking an internal page to decide how to handle child pages
     * referenced by the internal page.
     *
     * Internal pages are reconciled for two reasons: first, when evicting an internal page, second
     * by the checkpoint code when writing internal pages. During eviction, all pages should be in
     * the WT_REF_DISK or WT_REF_DELETED state. During checkpoint, eviction that might affect review
     * of an internal page is prohibited, however, as the subtree is not reserved for our exclusive
     * use, there are other page states that must be considered.
     ','line_number':205,'multiline':True]
['text':' On disk, not modified by definition. ','line_number':218,'multiline':True]
['text':' DISK pages do not have fast-truncate info. ','line_number':220,'multiline':True]
['text':'
             * The child is in a deleted state.
             *
             * It's possible the state could change underneath us as the page is read in, and we can
             * race between checking for a deleted state and looking at the transaction ID to see if
             * the delete is visible to us. Lock down the structure.
             ','line_number':225,'multiline':True]
['text':'
             * Locked.
             *
             * We should never be here during eviction, active child pages in an evicted page's
             * subtree fails the eviction attempt.
             ','line_number':239,'multiline':True]
['text':' If the page is being read from disk, it's not modified by definition. ','line_number':248,'multiline':True]
['text':'
             * Otherwise, the child is being considered by the eviction server or the child is a
             * deleted page being read. The eviction may have started before the checkpoint and so
             * we must wait for the eviction to be resolved. I suspect we could handle reads of
             * deleted pages, but we can't distinguish between the two and reads of deleted pages
             * aren't expected to be common.
             ','line_number':252,'multiline':True]
['text':'
             * In memory.
             *
             * We should never be here during eviction, active child pages in an evicted page's
             * subtree fails the eviction attempt.
             ','line_number':262,'multiline':True]
['text':'
             * If called during checkpoint, acquire a hazard pointer so the child isn't evicted,
             * it's an in-memory case.
             *
             * This call cannot return split/restart, we have a lock on the parent which prevents a
             * child page split.
             *
             * Set WT_READ_NO_WAIT because we're only interested in the WT_REF's final state. Pages
             * in transition might change WT_REF state during our read, and then return WT_NOTFOUND
             * to us. In that case, loop and look again.
             *
             * If we retried from below this point and already have a hazard pointer, don't do it
             * again.
             ','line_number':271,'multiline':True]
['text':'
             * The child is potentially modified if the page's modify structure has been created. If
             * the modify structure exists and the page has been reconciled, set that state.
             ','line_number':296,'multiline':True]
['text':'
             * Deleted page instantiation can happen at any time during a checkpoint. If we found
             * the instantiated page in the first checkpoint pass, it will have been reconciled and
             * dealt with normally. However, if that didn't happen, we get here with a page that has
             * been modified and never reconciled.
             *
             * Ordinarily in that situation we'd write a reference to the original child page, and
             * in the ordinary case where the modifications were applied after the checkpoint
             * started that would be fine. However, for a deleted page it's possible that the
             * deletion predates the checkpoint and is visible, and only the instantiation happened
             * after the checkpoint started. In that case we need the modifications to appear in the
             * checkpoint, but if we didn't already reconcile the page it's too late to do it now.
             * Depending on visibility, we may need to write the original page, or write a proxy
             * (deleted-address) cell with the pre-instantiation page-delete information, or we may
             * be able to ignore the page entirely. We keep the original fast-truncate information
             * in the ref after instantiation to make the visibility check possible.
             *
             * The key is the page-modify.instantiated flag, removed during page reconciliation. If
             * it's set, instantiation happened after checkpoint passed the leaf page and we treat
             * this page like a WT_REF_DELETED page, evaluating it as it was before instantiation.
             *
             * We need to lock the ref for it to be safe to examine the page_del structure, in case
             * the transaction in it is unresolved and tries to roll back (which discards the
             * structure) while we're looking at it. It should be possible to skip the locking if
             * the instantiation update list is NULL (that means the transaction is resolved) but
             * for now let's do the conservatively safe thing.
             ','line_number':306,'multiline':True]
['text':' Oops. Retry... ','line_number':335,'multiline':True]
['text':' This is a very small race window, but check just in case. ','line_number':338,'multiline':True]
['text':' Retry from the top; we may now have a rec_result. ','line_number':341,'multiline':True]
['text':'
             * Insert splits are permitted during checkpoint. Checkpoints first walk the internal
             * page's page-index and write out any dirty pages we find, then we write out the
             * internal page in post-order traversal. If we found the split page in the first step,
             * it will have an address; if we didn't find the split page in the first step, it won't
             * have an address and we ignore it, it's not part of the checkpoint.
             ','line_number':350,'multiline':True]
['text':'
             * The page was split out from under us.
             *
             * We should never be here during eviction, active child pages in an evicted page's
             * subtree fails the eviction attempt.
             *
             * We should never be here during checkpoint, dirty page eviction is shutout during
             * checkpoint, all splits in process will have completed before we walk any pages for
             * checkpoint.
             ','line_number':362,'multiline':True]
['text':' NOTREACHED ','line_number':374,'multiline':True]
