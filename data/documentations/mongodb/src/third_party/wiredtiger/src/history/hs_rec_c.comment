['text':'-
 * Copyright (c) 2014-present MongoDB, Inc.
 * Copyright (c) 2008-2014 WiredTiger, Inc.
 *	All rights reserved.
 *
 * See the file LICENSE for redistribution information.
 ','line_number':1,'multiline':True]
['text':'
 * __hs_verbose_cache_stats --
 *     Display a verbose message once per checkpoint with details about the cache state when
 *     performing a history store table write.
 ','line_number':15,'multiline':True]
['text':'
     * Print a message if verbose history store, or once per checkpoint if only reporting activity.
     * Avoid an expensive atomic operation as often as possible when the message rate is limited.
     ','line_number':39,'multiline':True]
['text':' Never skip updating the tracked generation ','line_number':58,'multiline':True]
['text':'
 * __hs_insert_record --
 *     A helper function to insert the record into the history store including stop time point.
 ','line_number':62,'multiline':True]
['text':' Verify that the timestamps are in increasing order. ','line_number':85,'multiline':True]
['text':'
     * We might be entering this code from application thread's context. We should make sure that we
     * are not using snapshot associated with application session to perform visibility checks on
     * history store records. Note that the history store cursor performs visibility checks based on
     * snapshot if none of WT_CURSTD_HS_READ_ALL or WT_CURSTD_HS_READ_COMMITTED flags are set.
     ','line_number':88,'multiline':True]
['text':'
     * Keep track if the caller had set WT_CURSTD_HS_READ_ALL flag on the history store cursor. We
     * want to preserve the flags set by the caller when we exit from this function. Also, we want
     * to explicitly set the flag WT_CURSTD_HS_READ_ALL only for the search_near operations on the
     * history store cursor and perform all other cursor operations using the flags set by the
     * caller of this function.
     ','line_number':98,'multiline':True]
['text':' Allocate buffers for the history store and search key. ','line_number':107,'multiline':True]
['text':' Sanity check that the btree is not a history store btree. ','line_number':112,'multiline':True]
['text':'
     * Only deltas or full updates should be written to the history store. More specifically, we
     * should NOT be writing tombstone records in the history store table.
     ','line_number':115,'multiline':True]
['text':'
     * Setting the flag WT_CURSTD_HS_READ_ALL before searching the history store optimizes the
     * search routine as we do not skip globally visible tombstones during the search.
     ','line_number':121,'multiline':True]
['text':'
     * Adjust counter if there exists an update in the history store with same btree id, key and
     * timestamp. Otherwise the newly inserting history store record may fall behind the existing
     * one can lead to wrong order.
     ','line_number':127,'multiline':True]
['text':' Allocate buffer for the existing history store value for the same key. ','line_number':139,'multiline':True]
['text':'
                 * The same value should not be inserted again unless:
                 * 1. The previous entry is already deleted (i.e. the stop timestamp is globally
                 * visible)
                 * 2. It came from a different transaction
                 * 3. It came from the same transaction but with a different timestamp
                 * 4. The prepared rollback left the history store entry when checkpoint is in
                 * progress.
                 ','line_number':146,'multiline':True]
['text':'
                         * If we have issues with duplicate history store records, we want to be
                         * able to distinguish between modifies and full updates. Since modifies are
                         * not idempotent, having them inserted multiple times can cause invalid
                         * values to be read.
                         ','line_number':161,'multiline':True]
['text':'
     * Look ahead for any higher timestamps. If we find updates, we should remove them and reinsert
     * them at the current timestamp. If there were no keys equal to or less than our target key, we
     * would have received WT_NOTFOUND. In that case we need to search again with a higher
     * timestamp.
     ','line_number':182,'multiline':True]
['text':' Check if the current history store update's stop timestamp is less than the update. ','line_number':189,'multiline':True]
['text':'
     * It is possible to insert a globally visible update into the history store with larger
     * timestamps ahead of it. An example would be an update without a timestamp getting moved to
     * the history store. This scenario can avoid detection earlier in reconciliation and result in
     * an EBUSY being returned as it detects updates without a timestamp. To prevent this we allow
     * globally visible updates to fix history store content even if eviction is running
     * concurrently with a checkpoint.
     *
     * This is safe because global visibility considers the checkpoint transaction id and timestamp
     * while it is running, i.e. if the update is globally visible to eviction it will be globally
     * visible to checkpoint and the modifications it makes to the history store will be the same as
     * what checkpoint would've done.
     ','line_number':199,'multiline':True]
['text':'
     * We may have fixed the timestamps. Make sure that we haven't accidentally added a duplicate of
     * the key we are about to insert.
     ','line_number':221,'multiline':True]
['text':' Insert the new record now. ','line_number':234,'multiline':True]
['text':'
 * __hs_next_upd_full_value --
 *     Get the next update and its full value.
 ','line_number':250,'multiline':True]
['text':'
 * __hs_pack_key --
 *     Pack the history store key
 ','line_number':286,'multiline':True]
['text':'
 * __wt_hs_insert_updates --
 *     Copy one set of saved updates into the database's history store table if they haven't been
 *     moved there. Whether the function fails or succeeds, if there is a successful write to
 *     history, cache_write_hs is set to true.
 ','line_number':321,'multiline':True]
['text':' Limit the number of consecutive reverse modifies. ','line_number':338,'multiline':True]
['text':' If the limit is exceeded, we will insert a full update to the history store ','line_number':340,'multiline':True]
['text':' Ensure enough room for a column-store key without checking. ','line_number':370,'multiline':True]
['text':' Enter each update in the boundary's list into the history store. ','line_number':377,'multiline':True]
['text':' If no onpage_upd is selected, we don't need to insert anything into the history store. ','line_number':379,'multiline':True]
['text':' Skip aborted updates. ','line_number':383,'multiline':True]
['text':' No update to insert to history store. ','line_number':388,'multiline':True]
['text':' Updates have already been inserted to the history store. ','line_number':392,'multiline':True]
['text':' History store table key component: source key. ','line_number':396,'multiline':True]
['text':'
         * Reverse deltas are only supported on 'S' and 'u' value formats.
         ','line_number':404,'multiline':True]
['text':'
         * If there exists an on page tombstone without a timestamp, consider it as a no timestamp
         * update to clear the timestamps of all the updates that are inserted into the history
         * store.
         ','line_number':410,'multiline':True]
['text':'
         * The algorithm assumes the oldest update on the update chain in memory is either a full
         * update or a tombstone.
         *
         * This is guaranteed by __wt_rec_upd_select appends the original onpage value at the end of
         * the chain. It also assumes the onpage_upd selected cannot be a TOMBSTONE and the update
         * newer than a TOMBSTONE must be a full update.
         *
         * The algorithm walks from the oldest update, or the most recently inserted into history
         * store update, to the newest update and builds full updates along the way. It sets the
         * stop time point of the update to the start time point of the next update, squashes the
         * updates that are from the same transaction and of the same start timestamp, checks if the
         * update can be written as reverse modification, and inserts the update to the history
         * store either as a full update or a reverse modification.
         *
         * It deals with the following scenarios:
         * 1) We only have full updates on the chain and we only insert full updates to
         * the history store.
         * 2) We have modifies on the chain, e.g., U (selected onpage value) -> M -> M ->U. We
         * reverse the modifies and insert the reversed modifies to the history store if it is not
         * the newest update written to the history store and the reverse operation is successful.
         * With regard to the example, we insert U -> RM -> U to the history store.
         * 3) We have tombstones in the middle of the chain, e.g.,
         * U (selected onpage value) -> U -> T -> M -> U.
         * We write the stop time point of M with the start time point of the tombstone and skip the
         * tombstone.
         * 4) We have a single tombstone on the chain, it is simply ignored.
         ','line_number':418,'multiline':True]
['text':' We must have deleted any update left in the history store. ','line_number':451,'multiline':True]
['text':' Detect any update without a timestamp. ','line_number':454,'multiline':True]
['text':'
                 * Fail the eviction if we detect any timestamp ordering issue and the error flag is
                 * set. We cannot modify the history store to fix the updates' timestamps as it may
                 * make the history store checkpoint inconsistent.
                 ','line_number':458,'multiline':True]
['text':'
                 * Always insert full update to the history store if we detect update without a
                 * timestamp.
                 ','line_number':469,'multiline':True]
['text':'
             * Always insert full update to the history store if we write a prepared update to the
             * data store.
             ','line_number':478,'multiline':True]
['text':' Always insert full update to the history store if we need to squash the updates. ','line_number':485,'multiline':True]
['text':'
             * Find the first update to insert to the history store. (The value that is just older
             * than the on-page value)
             ','line_number':490,'multiline':True]
['text':'
             * No need to continue if we found a first self contained value that is globally
             * visible.
             ','line_number':510,'multiline':True]
['text':'
             * If we've reached a full update and it's in the history store we don't need to
             * continue as anything beyond this point won't help with calculating deltas.
             ','line_number':517,'multiline':True]
['text':'
             * Save the first update without a timestamp in the update chain. This is used to remove
             * all the following updates' timestamps in the chain.
             ','line_number':524,'multiline':True]
['text':'
         * Fix the history store record here if the oldest update is a tombstone without a
         * timestamp. This situation is possible only when the tombstone is globally visible. Delete
         * all the updates of the key in the history store with timestamps.
         ','line_number':542,'multiline':True]
['text':' Reset the update without a timestamp if it is the last update in the chain. ','line_number':553,'multiline':True]
['text':' Skip if we have nothing to insert to the history store. ','line_number':558,'multiline':True]
['text':' The onpage value is squashed. ','line_number':560,'multiline':True]
['text':' Construct the oldest full update. ','line_number':566,'multiline':True]
['text':'
         * Flush the updates on stack. Stopping once we finish inserting the newest history store
         * value.
         ','line_number':570,'multiline':True]
['text':' We should never insert the onpage value to the history store. ','line_number':577,'multiline':True]
['text':' We should never insert prepared updates to the history store. ','line_number':580,'multiline':True]
['text':'
             * Reset the update without a timestamp pointer once all the previous updates are
             * inserted into the history store.
             ','line_number':586,'multiline':True]
['text':'
             * For any uncommitted prepared updates written to disk, the stop timestamp of the last
             * update moved into the history store should be with max visibility to protect its
             * removal by checkpoint garbage collection until the data store update is committed.
             ','line_number':602,'multiline':True]
['text':'
                 * Set the stop timestamp from durable timestamp instead of commit timestamp. The
                 * garbage collection of history store removes the history values once the stop
                 * timestamp is globally visible. i.e. durable timestamp of data store version.
                 ','line_number':614,'multiline':True]
['text':'
             * Reset the non timestamped update pointer once all the previous updates are inserted
             * into the history store.
             ','line_number':634,'multiline':True]
['text':' Squash the updates from the same transaction. ','line_number':644,'multiline':True]
['text':' Skip updates that are already in the history store. ','line_number':650,'multiline':True]
['text':'
             * Ensure all the updates inserted to the history store are committed.
             *
             * Sometimes the application and the checkpoint threads will fall behind the eviction
             * threads, and they may choose an invisible update to write to the data store if the
             * update was previously selected by a failed eviction pass. Also the eviction may run
             * without a snapshot if the checkpoint is running concurrently. In those cases, check
             * whether the history transaction is committed or not against the global transaction
             * list. We expect the transaction is committed before the check. However, though very
             * rare, it is possible that the check may race with transaction commit and in this case
             * we may fail to catch the failure.
             ','line_number':659,'multiline':True]
['text':'
             * Calculate reverse modify and clear the history store records with timestamps when
             * inserting the first update. Always write the newest update in the history store as a
             * full update. We don't want to handle the edge cases that the reverse modifies be
             * applied to the wrong on-disk base value. This also limits the number of consecutive
             * reverse modifies for standard updates. We want to ensure we do not store a large
             * chain of reverse modifies as to impact read performance.
             *
             * Due to concurrent operation of checkpoint and eviction, it is possible that history
             * store may have more recent versions of a key than the on-disk version. Without a
             * proper base value in the history store, it can lead to wrong value being restored by
             * the RTS.
             ','line_number':678,'multiline':True]
['text':' Flag the update as now in the history store. ','line_number':709,'multiline':True]
['text':' cache_write_hs is set to true as there was at least one successful write to history. ','line_number':738,'multiline':True]
['text':' modify_value is allocated in __wt_modify_pack. Free it if it is allocated. ','line_number':743,'multiline':True]
['text':' Update the statistics. ','line_number':752,'multiline':True]
['text':'
 * __wt_hs_delete_key --
 *     Delete history store content of a given key and optionally reinsert them with 0 timestamp.
 ','line_number':762,'multiline':True]
['text':'
     * Setting the flag WT_CURSTD_HS_READ_ALL before searching the history store optimizes the
     * search routine as we do not skip globally visible tombstones during the search.
     ','line_number':780,'multiline':True]
['text':' Empty history store is fine. ','line_number':786,'multiline':True]
['text':'
 * __hs_delete_reinsert_from_pos --
 *     Delete updates in the history store if the start timestamp of the update is larger or equal
 *     to the specified timestamp and optionally reinsert them with ts-1 timestamp. This function
 *     works by looking ahead of the current cursor position for entries for the same key, removing
 *     them.
 ','line_number':805,'multiline':True]
['text':'
     * If we delete all the updates of the key from the history store, we should not reinsert any
     * update except when a tombstone without a timestamp is not globally visible yet.
     ','line_number':841,'multiline':True]
['text':' Ignore records that are obsolete. ','line_number':848,'multiline':True]
['text':'
         * The below example illustrates a case that the data store and the history
         * store may contain the same value. In this case, skip inserting the same
         * value to the history store again.
         *
         * Suppose there is one table table1 and the below operations are performed.
         *
         * 1. Insert a=1 in table1 at timestamp 10
         * 2. Delete a from table1 at timestamp 20
         * 3. Set stable timestamp = 20, oldest timestamp=1
         * 4. Checkpoint table1
         * 5. Insert a=2 in table1 at timestamp 30
         * 6. Evict a=2 from table1 and move the content to history store.
         * 7. Checkpoint is still running and before it finishes checkpointing the history store the
         * above steps 5 and 6 will happen.
         *
         * After all this operations the checkpoint content will be
         * Data store --
         * table1 --> a=1 at start_ts=10, stop_ts=20
         *
         * History store --
         * table1 --> a=1 at start_ts=10, stop_ts=20
         *
         * WiredTiger takes a backup of the checkpoint and use this backup to restore.
         * Note: In table1 of both data store and history store has the same content.
         *
         * Now the backup is used to restore.
         *
         * 1. Insert a=3 in table1
         * 2. Checkpoint started, eviction started and sees the same content in data store and
         * history store while reconciling.
         *
         * The start timestamp and transaction ids are checked to ensure for the global
         * visibility because globally visible timestamps and transaction ids may be cleared to 0.
         * The time window of the inserting record and the history store record are
         * compared to make sure that the same record are not being inserted again.
         ','line_number':853,'multiline':True]
['text':' We shouldn't have crossed the btree and user key search space. ','line_number':898,'multiline':True]
['text':'
         * We have found a key with a timestamp larger than or equal to the specified timestamp.
         * Always use the start timestamp retrieved from the key instead of the start timestamp from
         * the cell. The cell's start timestamp can be cleared during reconciliation if it is
         * globally visible.
         ','line_number':905,'multiline':True]
['text':'
     * If we find a key with a timestamp larger than or equal to the specified timestamp then the
     * specified timestamp must be mixed mode.
     ','line_number':918,'multiline':True]
['text':'
     * Fail the eviction if we detect any timestamp ordering issue and the error flag is set. We
     * cannot modify the history store to fix the update's timestamps as it may make the history
     * store checkpoint inconsistent.
     ','line_number':924,'multiline':True]
['text':'
     * The goal of this function is to move no timestamp content to maintain ordering in the
     * history store. We do this by removing content with higher timestamps and reinserting it
     * without a timestamp (from search's point of view) the newly inserted update. Even though
     * these updates will all have no timestamp, they cannot be discarded since older readers
     * may need to see them after they've been moved due to their transaction id.
     *
     * For example, if we're inserting an update without a timestamp with value ddd:
     * btree key ts counter value stop_ts
     * 2     foo 5  0       aaa    6
     * 2     foo 6  0       bbb    7
     * 2     foo 7  0       ccc    8
     *
     * We want to end up with this:
     * btree key ts counter value stop_ts
     * 2     foo 0  0       aaa    0
     * 2     foo 0  1       bbb    0
     * 2     foo 0  2       ccc    0
     * 2     foo 0  3       ddd    0
     *
     * Another example, if we're inserting an update without a timestamp with value ddd:
     * btree key ts counter value stop_ts
     * 2     foo 0  0       aaa     6
     * 2     foo 6  0       bbb     7
     * 2     foo 7  0       ccc     8
     *
     * We want to end up with this:
     * btree key ts counter value stop_ts
     * 2     foo 0  1       aaa    0
     * 2     foo 0  2       bbb    0
     * 2     foo 0  3       ccc    0
     * 2     foo 0  4       ddd    0
     ','line_number':935,'multiline':True]
['text':' We shouldn't have crossed the btree and user key search space. ','line_number':969,'multiline':True]
['text':'
         * If we got here, we've got updates need to be fixed in the history store.
         *
         * Our strategy to rectify this is to remove all records for the same key with a timestamp
         * higher or equal than the specified timestamp and reinsert them at the zero timestamp,
         * which is the timestamp of the update we are about to insert to the history store.
         *
         * It is possible that the cursor next call can find an update that was reinserted when it
         * had a tombstone without a timestamp with respect to the new update. Continue the search
         * by ignoring them.
         ','line_number':976,'multiline':True]
['text':'
             * Don't incur the overhead of opening this new cursor unless we need it. In the regular
             * case, we'll never get here.
             ','line_number':992,'multiline':True]
['text':'
             * If these history store records are resolved prepared updates, their durable
             * timestamps will be clobbered by our fix-up process. Keep track of how often this is
             * happening.
             ','line_number':999,'multiline':True]
['text':'
             * Use the original start time window's timestamps if its timestamp is less than the new
             * update.
             ','line_number':1018,'multiline':True]
['text':'
             * We're going to insert something immediately after with the smaller timestamp. Either
             * another moved update OR the update itself triggered the correction. In either case,
             * we should preserve the stop transaction id.
             ','line_number':1032,'multiline':True]
['text':' Extract the underlying value for reinsertion. ','line_number':1040,'multiline':True]
['text':' Reinsert the update with corrected timestamps. ','line_number':1044,'multiline':True]
['text':' Insert the value back with different timestamps. ','line_number':1048,'multiline':True]
['text':' Delete the entry that needs to fix. ','line_number':1059,'multiline':True]
['text':'
 * __hs_delete_record --
 *     Delete an update from the history store if it is not obsolete.
 ','line_number':1077,'multiline':True]
['text':' Ensure we can see all the content in the history store. ','line_number':1093,'multiline':True]
['text':' No need to delete from the history store if it is already obsolete. ','line_number':1096,'multiline':True]
['text':' It's possible the value in the history store becomes obsolete concurrently. ','line_number':1102,'multiline':True]
['text':'
         * The history store update may not exist even if there is no tombstone associated with it
         * as this update may have already been removed by rollback to stable.
         ','line_number':1104,'multiline':True]
['text':'
         * We have found a record that is not obsolete. However, we only want to delete a record if
         * it has a stop timestamp greater than the start timestamp of the update.
         ','line_number':1111,'multiline':True]
['text':'
         * If we're deleting a record that is already in the history store this implies we're
         * rolling back a prepared transaction and need to pull the history store update back into
         * the update chain, then delete it from the history store. These checks ensure we've
         * retrieved the correct update from the history store.
         ','line_number':1119,'multiline':True]
['text':'
 * __wt_hs_delete_updates --
 *     Delete the updates from the history store.
 ','line_number':1159,'multiline':True]
['text':' Nothing to delete from the history store. ','line_number':1172,'multiline':True]
