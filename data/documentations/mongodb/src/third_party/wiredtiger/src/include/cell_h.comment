['text':'-
 * Copyright (c) 2014-present MongoDB, Inc.
 * Copyright (c) 2008-2014 WiredTiger, Inc.
 *	All rights reserved.
 *
 * See the file LICENSE for redistribution information.
 ','line_number':1,'multiline':True]
['text':'
 * WT_CELL --
 *	Variable-length cell type.
 *
 * Pages containing variable-length keys or values data (the WT_PAGE_ROW_INT,
 * WT_PAGE_ROW_LEAF, WT_PAGE_COL_INT and WT_PAGE_COL_VAR page types), have
 * cells after the page header.
 *
 * There are 4 basic cell types: keys and data (each of which has an overflow
 * form), deleted cells and off-page references.  The cell is usually followed
 * by additional data, varying by type: keys are followed by a chunk of data,
 * values are followed by an optional validity window and a chunk of data,
 * overflow and off-page cells are followed by an optional validity window and
 * an address cookie.
 *
 * Deleted cells are place-holders for column-store files, where entries cannot
 * be removed in order to preserve the record count.
 *
 * Note that deleted value cells (WT_CELL_DEL) are different from deleted-address
 * cells (WT_CELL_ADDR_DEL).
 *
 * Here's the cell use by page type:
 *
 * WT_PAGE_ROW_INT (row-store internal page):
 *	Keys and offpage-reference pairs (a WT_CELL_KEY or WT_CELL_KEY_OVFL
 * cell followed by a WT_CELL_ADDR_XXX cell).
 *
 * WT_PAGE_ROW_LEAF (row-store leaf page):
 *	Keys with optional data cells (a WT_CELL_KEY or WT_CELL_KEY_OVFL cell,
 *	normally followed by a WT_CELL_{VALUE,VALUE_COPY,VALUE_OVFL} cell).
 *
 *	WT_PAGE_ROW_LEAF pages optionally prefix-compress keys, using a single
 *	byte count immediately following the cell.
 *
 * WT_PAGE_COL_INT (Column-store internal page):
 *	Off-page references (a WT_CELL_ADDR_XXX cell).
 *
 * WT_PAGE_COL_VAR (Column-store leaf page storing variable-length cells):
 *	Data cells (a WT_CELL_{VALUE,VALUE_COPY,VALUE_OVFL} cell), or deleted
 * cells (a WT_CELL_DEL cell).
 *
 * WT_PAGE_COL_FIX (Column-store leaf page storing fixed-length data):
 *      Pairs of WT_CELL_KEY and WT_CELL_VALUE, where the key is always a recno,
 * and the value is empty but contains a non-empty time window.
 *
 * Each cell starts with a descriptor byte:
 *
 * Bits 1 and 2 are reserved for "short" key and value cells (that is, a cell
 * carrying data less than 64B, where we can store the data length in the cell
 * descriptor byte):
 *	0b00	Not a short key/data cell
 *	0b01	Short key cell
 *	0b10	Short key cell, with a following prefix-compression byte
 *	0b11	Short value cell
 * In the "short" variants, the other 6 bits of the descriptor byte are the
 * data length.
 *
 * Bit 3 marks an 8B packed, uint64_t value following the cell description byte.
 * (A run-length counter or a record number for variable-length column store.)
 *
 * Bit 4 marks a value with an additional descriptor byte. If this flag is set,
 * the next byte after the initial cell byte is an additional description byte.
 * The bottom bit in this additional byte indicates that the cell is part of a
 * prepared, and not yet committed transaction. The next 6 bits describe a validity
 * and durability window of timestamp/transaction IDs.  The top bit is currently unused.
 *
 * Bits 5-8 are cell "types".
 ','line_number':9,'multiline':True]
['text':' Short key ','line_number':77,'multiline':True]
['text':' Short key with prefix byte ','line_number':78,'multiline':True]
['text':' Short data ','line_number':79,'multiline':True]
['text':' Maximum short key/value ','line_number':82,'multiline':True]
['text':' Shift for short key/value ','line_number':83,'multiline':True]
['text':' Associated value ','line_number':85,'multiline':True]
['text':' Second descriptor byte ','line_number':86,'multiline':True]
['text':' Part of prepared transaction ','line_number':88,'multiline':True]
['text':' Start durable timestamp ','line_number':89,'multiline':True]
['text':' Stop durable timestamp ','line_number':90,'multiline':True]
['text':' Oldest-start timestamp ','line_number':91,'multiline':True]
['text':' Newest-stop timestamp ','line_number':92,'multiline':True]
['text':' Oldest-start txn ID ','line_number':93,'multiline':True]
['text':' Newest-stop txn ID ','line_number':94,'multiline':True]
['text':'
 * WT_CELL_ADDR_INT is an internal block location, WT_CELL_ADDR_LEAF is a leaf block location, and
 * WT_CELL_ADDR_LEAF_NO is a leaf block location where the page has no overflow items. (The goal is
 * to speed up truncation as we don't have to read pages without overflow items in order to delete
 * them. Note, WT_CELL_ADDR_LEAF_NO is not guaranteed to be set on every page without overflow
 * items, the only guarantee is that if set, the page has no overflow items.)
 *
 * WT_CELL_VALUE_COPY is a reference to a previous cell on the page, supporting value dictionaries:
 * if the two values are the same, we only store them once and have any second and subsequent uses
 * reference the original.
 ','line_number':96,'multiline':True]
['text':' Address: deleted ','line_number':107,'multiline':True]
['text':' Address: internal  ','line_number':108,'multiline':True]
['text':' Address: leaf ','line_number':109,'multiline':True]
['text':' Address: leaf no overflow ','line_number':110,'multiline':True]
['text':' Deleted value ','line_number':111,'multiline':True]
['text':' Key ','line_number':112,'multiline':True]
['text':' Overflow key ','line_number':113,'multiline':True]
['text':' Overflow key (removed) ','line_number':114,'multiline':True]
['text':' Key with prefix byte ','line_number':115,'multiline':True]
['text':' Value ','line_number':116,'multiline':True]
['text':' Value copy ','line_number':117,'multiline':True]
['text':' Overflow value ','line_number':118,'multiline':True]
['text':' Overflow value (removed) ','line_number':119,'multiline':True]
['text':' Maximum 16 cell types ','line_number':121,'multiline':True]
['text':'
 * When unable to create a short key or value (and where it wasn't an associated RLE or validity
 * window that prevented creating a short value), the data must be at least 64B, else we'd have used
 * a short cell. When packing/unpacking the size, decrement/increment the size, in the hopes that a
 * smaller size will pack into a single byte instead of two.
 ','line_number':124,'multiline':True]
['text':'
 * WT_CELL --
 *	Variable-length, on-page cell header.
 ','line_number':132,'multiline':True]
['text':'
     * Maximum of 98 bytes:
     *  1: cell descriptor byte
     *  1: prefix compression count
     *  1: secondary descriptor byte
     * 36: 4 timestamps		(uint64_t encoding, max 9 bytes)
     * 18: 2 transaction IDs	(uint64_t encoding, max 9 bytes)
     *  9: associated 64-bit value	(uint64_t encoding, max 9 bytes)
     * 27: fast-delete information (transaction ID, 2 timestamps)
     *  5: data length		(uint32_t encoding, max 5 bytes)
     *
     * This calculation is pessimistic: the prefix compression count and 64V value overlap, and the
     * validity window, 64V value, fast-delete information and data length are all optional in some
     * or even most cases.
     ','line_number':137,'multiline':True]
['text':' AUTOMATIC FLAG VALUE GENERATION START 0 ','line_number':155,'multiline':True]
['text':' cell is an overflow ','line_number':156,'multiline':True]
['text':' time window cleared because of restart ','line_number':157,'multiline':True]
['text':' AUTOMATIC FLAG VALUE GENERATION STOP 8 ','line_number':158,'multiline':True]
['text':'
 * We have two "unpacked cell" structures: one holding holds unpacked cells from internal nodes
 * (address pages), and one holding unpacked cells from leaf nodes (key/value pages). They share a
 * common set of initial fields: in a few places where a function has to handle both types of
 * unpacked cells, the unpacked cell structures are cast to an "unpack-common" structure that can
 * only reference shared fields.
 ','line_number':160,'multiline':True]
['text':' Cell's disk image address ','line_number':168,'multiline':True]
['text':' RLE count or recno ','line_number':170,'multiline':True]
['text':'                                                                                          \
     * The size and __len fields are reasonably type size_t; don't change the type, performance \
     * drops significantly if they're type size_t.                                              \
     ','line_number':172,'multiline':True]
['text':' Data ','line_number':176,'multiline':True]
['text':' Data size ','line_number':177,'multiline':True]
['text':' Cell + data length (usually) ','line_number':179,'multiline':True]
['text':' Cell prefix length ','line_number':181,'multiline':True]
['text':' Raw cell type (include "shorts") ','line_number':183,'multiline':True]
['text':' Cell type ','line_number':184,'multiline':True]
['text':'
 * WT_CELL_UNPACK_COMMON --
 *     Unpacked address cell, the common fields.
 ','line_number':188,'multiline':True]
['text':'
 * WT_CELL_UNPACK_ADDR --
 *     Unpacked address cell.
 ','line_number':196,'multiline':True]
['text':' Address validity window ','line_number':203,'multiline':True]
['text':' Fast-truncate information ','line_number':205,'multiline':True]
['text':'
 * WT_CELL_UNPACK_KV --
 *     Unpacked value cell.
 ','line_number':208,'multiline':True]
['text':' Value validity window ','line_number':215,'multiline':True]
