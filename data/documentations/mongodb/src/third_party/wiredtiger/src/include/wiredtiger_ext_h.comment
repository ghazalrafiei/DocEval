['text':'-
 * Copyright (c) 2014-present MongoDB, Inc.
 * Copyright (c) 2008-2014 WiredTiger, Inc.
 *	All rights reserved.
 *
 * See the file LICENSE for redistribution information.
 ','line_number':1,'multiline':True]
['text':'!
 * @addtogroup wt_ext
 * @{
 ','line_number':20,'multiline':True]
['text':'!
 * A placeholder data structure that allows for using the WiredTiger
 * spinlock implementation from within extensions.
 ','line_number':25,'multiline':True]
['text':' Represents actual WiredTiger spinlock. ','line_number':30,'multiline':True]
['text':'!
 * Table of WiredTiger extension methods.
 *
 * This structure is used to provide a set of WiredTiger methods to extension
 * modules without needing to link the modules with the WiredTiger library.
 *
 * The extension methods may be used both by modules that are linked with
 * the WiredTiger library (for example, a data source configured using the
 * WT_CONNECTION::add_data_source method), and by modules not linked with the
 * WiredTiger library (for example, a compression module configured using the
 * WT_CONNECTION::add_compressor method).
 *
 * To use these functions:
 * - include the wiredtiger_ext.h header file,
 * - declare a variable which references a WT_EXTENSION_API structure, and
 * - initialize the variable using WT_CONNECTION::get_extension_api method.
 *
 * @snippet ex_data_source.c WT_EXTENSION_API declaration
 *
 * The following code is from the sample compression module, where compression
 * extension functions are configured in the extension's entry point:
 *
 * @snippet nop_compress.c WT_COMPRESSOR initialization structure
 * @snippet nop_compress.c WT_COMPRESSOR initialization function
 ','line_number':33,'multiline':True]
['text':' !!! To maintain backwards compatibility, this structure is append-only. ','line_number':59,'multiline':True]
['text':'
     * Private fields.
     ','line_number':61,'multiline':True]
['text':' Enclosing connection ','line_number':64,'multiline':True]
['text':'!
     * Insert an error message into the WiredTiger error stream.
     *
     * @param wt_api the extension handle
     * @param session the session handle (or NULL if none available)
     * @param fmt a printf-style format specification
     * @errors
     *
     * @snippet ex_data_source.c WT_EXTENSION_API err_printf
     ','line_number':66,'multiline':True]
['text':'!
     * Insert a message into the WiredTiger message stream.
     *
     * @param wt_api the extension handle
     * @param session the session handle (or NULL if none available)
     * @param fmt a printf-style format specification
     * @errors
     *
     * @snippet ex_data_source.c WT_EXTENSION_API msg_printf
     ','line_number':78,'multiline':True]
['text':'!
     * Return information about an error as a string.
     *
     * @snippet ex_data_source.c WT_EXTENSION_API strerror
     *
     * @param wt_api the extension handle
     * @param session the session handle (or NULL if none available)
     * @param error a return value from a WiredTiger function
     * @returns a string representation of the error
     ','line_number':90,'multiline':True]
['text':'!
     * Map a Windows system error code to a POSIX 1003.1/ANSI C error.
     *
     * @param wt_api the extension handle
     * @param session the session handle (or NULL if none available)
     * @param windows_error a Windows system error code
     * @returns a Unix-style error code
     *
     * @snippet ex_data_source.c WT_EXTENSION_API map_windows_error
     ','line_number':102,'multiline':True]
['text':'!
     * Allocate short-term use scratch memory.
     *
     * @param wt_api the extension handle
     * @param session the session handle (or NULL if none available)
     * @param bytes the number of bytes of memory needed
     * @returns A valid memory reference on success or NULL on error
     *
     * @snippet ex_data_source.c WT_EXTENSION_API scr_alloc
     ','line_number':114,'multiline':True]
['text':'!
     * Free short-term use scratch memory.
     *
     * @param wt_api the extension handle
     * @param session the session handle (or NULL if none available)
     * @param ref a memory reference returned by WT_EXTENSION_API::scr_alloc
     *
     * @snippet ex_data_source.c WT_EXTENSION_API scr_free
     ','line_number':126,'multiline':True]
['text':'!
     * Configure the extension collator method.
     *
     * @param wt_api the extension handle
     * @param session the session handle (or NULL if none available)
     * @param uri the URI of the handle being configured
     * @param config the configuration information passed to an application
     * @param collatorp the selector collator, if any
     * @param ownp set if the collator terminate method should be called
     * when no longer needed
     * @errors
     *
     * @snippet ex_data_source.c WT_EXTENSION collator config
     ','line_number':137,'multiline':True]
['text':'!
     * The extension collator method.
     *
     * @param wt_api the extension handle
     * @param session the session handle (or NULL if none available)
     * @param collator the collator (or NULL if none available)
     * @param first first item
     * @param second second item
     * @param[out] cmp set less than 0 if \c first collates less than
     * \c second, set equal to 0 if \c first collates equally to \c second,
     * set greater than 0 if \c first collates greater than \c second
     * @errors
     *
     * @snippet ex_data_source.c WT_EXTENSION collate
     ','line_number':154,'multiline':True]
['text':'!
     * Return the value of a configuration key.
     *
     * @param wt_api the extension handle
     * @param session the session handle (or NULL if none available)
     * @param config the configuration information passed to an application
     * @param key configuration key string
     * @param value the returned value
     * @errors
     *
     * @snippet ex_data_source.c WT_EXTENSION config_get
     ','line_number':172,'multiline':True]
['text':'!
     * Return the value of a configuration key from a string.
     *
     * @param wt_api the extension handle
     * @param session the session handle (or NULL if none available)
     * @param config the configuration string
     * @param key configuration key string
     * @param value the returned value
     * @errors
     *
     * @snippet ex_data_source.c WT_EXTENSION config_get
     ','line_number':187,'multiline':True]
['text':'!
     * Create a handle that can be used to parse or create configuration strings
     * compatible with the WiredTiger API.
     * @param wt_api the extension handle
     * @param session the session handle to be used for error reporting
     * @param config the configuration string being parsed. The string must
     *     remain valid for the lifetime of the parser handle.
     * @param len the number of valid bytes in \c config
     * @param[out] config_parserp A pointer to the newly opened handle
     * @errors
     ','line_number':202,'multiline':True]
['text':'!
     * Create a handle that can be used to parse or create configuration strings
     * compatible with the WiredTiger API.
     * @param wt_api the extension handle
     * @param session the session handle to be used for error reporting
     * @param config the configuration argument passed to the extension
     * @param[out] config_parserp A pointer to the newly opened handle
     * @errors
     ','line_number':216,'multiline':True]
['text':'!
     * Get the file system abstraction used by WiredTiger.
     *
     * @param wt_api the extension handle
     * @param session the session handle (or NULL if none available)
     * @param file_system the returned file system handle.
     * @errors
     * If called from an extension's initialization routine, this may
     * return WT_NOTFOUND if the file system has not yet been established.
     *
     * @snippet ex_data_source.c WT_EXTENSION metadata insert
     ','line_number':228,'multiline':True]
['text':'!
     * Insert a row into the metadata if it does not already exist.
     *
     * @param wt_api the extension handle
     * @param session the session handle (or NULL if none available)
     * @param key row key
     * @param value row value
     * @errors
     *
     * @snippet ex_data_source.c WT_EXTENSION metadata insert
     ','line_number':243,'multiline':True]
['text':'!
     * Remove a row from the metadata.
     *
     * @param wt_api the extension handle
     * @param session the session handle (or NULL if none available)
     * @param key row key
     * @errors
     *
     * @snippet ex_data_source.c WT_EXTENSION metadata remove
     ','line_number':257,'multiline':True]
['text':'!
     * Return a row from the metadata.
     *
     * @param wt_api the extension handle
     * @param session the session handle (or NULL if none available)
     * @param key row key
     * @param [out] valuep the row value
     * @errors
     *
     * @snippet ex_data_source.c WT_EXTENSION metadata search
     ','line_number':269,'multiline':True]
['text':'!
     * Update a row in the metadata by either inserting a new record or
     * updating an existing record.
     *
     * @param wt_api the extension handle
     * @param session the session handle (or NULL if none available)
     * @param key row key
     * @param value row value
     * @errors
     *
     * @snippet ex_data_source.c WT_EXTENSION metadata update
     ','line_number':283,'multiline':True]
['text':'!
     * Pack a structure into a buffer. Deprecated in favor of stream
     * based pack and unpack API. See WT_EXTENSION_API::pack_start for
     * details.
     *
     * @param wt_api the extension handle
     * @param session the session handle
     * @param buffer a pointer to a packed byte array
     * @param size the number of valid bytes in the buffer
     * @param format the data format, see @ref packing
     * @errors
     ','line_number':298,'multiline':True]
['text':'!
     * Calculate the size required to pack a structure. Deprecated in
     * favor of stream based pack and unpack API.
     *
     * @param wt_api the extension handle
     * @param session the session handle
     * @param sizep a location where the number of bytes needed for the
     * matching call to WT_EXTENSION_API::struct_pack is returned
     * @param format the data format, see @ref packing
     * @errors
     ','line_number':313,'multiline':True]
['text':'!
     * Unpack a structure from a buffer. Deprecated in favor of stream
     * based pack and unpack API. See WT_EXTENSION_API::unpack_start for
     * details.
     *
     * @param wt_api the extension handle
     * @param session the session handle
     * @param buffer a pointer to a packed byte array
     * @param size the number of valid bytes in the buffer
     * @param format the data format, see @ref packing
     * @errors
     ','line_number':327,'multiline':True]
['text':'
     * Streaming pack/unpack API.
     ','line_number':342,'multiline':True]
['text':'!
     * Start a packing operation into a buffer.
     * See ::wiredtiger_pack_start for details.
     *
     * @param session the session handle
     * @param format the data format, see @ref packing
     * @param buffer a pointer to memory to hold the packed data
     * @param size the size of the buffer
     * @param[out] psp the new packing stream handle
     * @errors
     ','line_number':345,'multiline':True]
['text':'!
     * Start an unpacking operation from a buffer.
     * See ::wiredtiger_unpack_start for details.
     *
     * @param session the session handle
     * @param format the data format, see @ref packing
     * @param buffer a pointer to memory holding the packed data
     * @param size the size of the buffer
     * @param[out] psp the new packing stream handle
     * @errors
     ','line_number':359,'multiline':True]
['text':'!
     * Close a packing stream.
     *
     * @param ps the packing stream handle
     * @param[out] usedp the number of bytes in the buffer used by the
     * stream
     * @errors
     ','line_number':373,'multiline':True]
['text':'!
     * Pack an item into a packing stream.
     *
     * @param ps the packing stream handle
     * @param item an item to pack
     * @errors
     ','line_number':383,'multiline':True]
['text':'!
     * Pack a signed integer into a packing stream.
     *
     * @param ps the packing stream handle
     * @param i a signed integer to pack
     * @errors
     ','line_number':392,'multiline':True]
['text':'!
     * Pack a string into a packing stream.
     *
     * @param ps the packing stream handle
     * @param s a string to pack
     * @errors
     ','line_number':401,'multiline':True]
['text':'!
     * Pack an unsigned integer into a packing stream.
     *
     * @param ps the packing stream handle
     * @param u an unsigned integer to pack
     * @errors
     ','line_number':410,'multiline':True]
['text':'!
     * Unpack an item from a packing stream.
     *
     * @param ps the packing stream handle
     * @param item an item to unpack
     * @errors
     ','line_number':419,'multiline':True]
['text':'!
     * Unpack a signed integer from a packing stream.
     *
     * @param ps the packing stream handle
     * @param[out] ip the unpacked signed integer
     * @errors
     ','line_number':428,'multiline':True]
['text':'!
     * Unpack a string from a packing stream.
     *
     * @param ps the packing stream handle
     * @param[out] sp the unpacked string
     * @errors
     ','line_number':437,'multiline':True]
['text':'!
     * Unpack an unsigned integer from a packing stream.
     *
     * @param ps the packing stream handle
     * @param[out] up the unpacked unsigned integer
     * @errors
     ','line_number':446,'multiline':True]
['text':'!
     * @copydoc wiredtiger_version
     ','line_number':455,'multiline':True]
['text':'!
     * Initialize a spinlock
     *
     * @param wt_api the extension handle
     * @param session the session handle
     * @param spinlock the extension spinlock
     * @param name the name for the spinlock
     *
     ','line_number':460,'multiline':True]
['text':'!
     * Destroy a spinlock
     *
     * @param wt_api the extension handle
     * @param session the session handle
     * @param spinlock the extension spinlock
     *
     ','line_number':471,'multiline':True]
['text':'!
     * Spin until the lock is acquired.
     *
     * @param wt_api the extension handle
     * @param session the session handle
     * @param spinlock the extension spinlock
     *
     ','line_number':481,'multiline':True]
['text':'!
     * Release the spinlock.
     *
     * @param wt_api the extension handle
     * @param session the session handle
     * @param spinlock the extension spinlock
     *
     ','line_number':492,'multiline':True]
['text':'!
 * @typedef WT_CONFIG_ARG
 *
 * A configuration object passed to some extension interfaces.  This is an
 * opaque type: configuration values can be queried using
 * WT_EXTENSION_API::config_get.
 ','line_number':504,'multiline':True]
['text':'! @} ','line_number':512,'multiline':True]
['text':' SWIG ','line_number':513,'multiline':True]
['text':' __WIREDTIGER_EXT_H_ ','line_number':518,'multiline':True]
