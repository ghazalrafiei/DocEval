['text':'-
 * Copyright (c) 2014-present MongoDB, Inc.
 * Copyright (c) 2008-2014 WiredTiger, Inc.
 *	All rights reserved.
 *
 * See the file LICENSE for redistribution information.
 ','line_number':1,'multiline':True]
['text':'
 * Quiet compiler warnings about unused function parameters and variables, and unused function
 * return values.
 ','line_number':9,'multiline':True]
['text':' Basic constants. ','line_number':40,'multiline':True]
['text':' Seconds. ','line_number':49,'multiline':True]
['text':' Strings used for indicating failed string buffer construction. ','line_number':58,'multiline':True]
['text':' Maximum length of an encoded JSON character. ','line_number':62,'multiline':True]
['text':'
 * Sizes that cannot be larger than 2**32 are stored in uint32_t fields in common structures to save
 * space. To minimize conversions from size_t to uint32_t through the code, we use the following
 * macros.
 ','line_number':65,'multiline':True]
['text':'
 * Align an unsigned value of any type to a specified power-of-2, including the offset result of a
 * pointer subtraction; do the calculation using the largest unsigned integer type available.
 ','line_number':78,'multiline':True]
['text':' Min, max. ','line_number':86,'multiline':True]
['text':' Ceil for unsigned/positive real numbers. ','line_number':90,'multiline':True]
['text':' Elements in an array. ','line_number':93,'multiline':True]
['text':' 10 level skip lists, 1/4 have a link to the next element. ','line_number':96,'multiline':True]
['text':'
 * Encryption needs to know its original length before either the block or logging subsystems pad.
 * Constant value.
 ','line_number':100,'multiline':True]
['text':'
 * WT-specific return codes for __wt_getopt(); use __wt_optwt to enable.
 ','line_number':106,'multiline':True]
['text':'
 * __wt_calloc_def, __wt_calloc_one --
 *     Most calloc calls don't need separate count or sizeof arguments.
 ','line_number':112,'multiline':True]
['text':'
 * __wt_realloc_def --
 *     Common case allocate-and-grow function. Starts by allocating the requested number of items
 *     (at least 10), then doubles each time the list needs to grow.
 ','line_number':120,'multiline':True]
['text':'
 * Our internal free function clears the underlying address so there is a smaller chance of racing
 * threads seeing intermediate results while a structure is being free'd. (That would be a bug, of
 * course, but I'd rather not drop core, just the same.) That's a non-standard "free" API, and the
 * resulting bug is non-trivial to find -- make sure we get it right, don't make the caller remember
 * to put the & operator on the pointer.
 ','line_number':134,'multiline':True]
['text':' Overwrite whether or not this is a diagnostic build. ','line_number':148,'multiline':True]
['text':'
 * Flag set, clear and test.
 *
 * They come in 3 flavors: F_XXX (handles a field named "flags" in the structure referenced by its
 * argument), LF_XXX (handles a local variable named "flags"), and FLD_XXX (handles any variable,
 * anywhere).
 *
 * Flags can be different unsigned bit values -- we cast to keep the compiler quiet (the hex
 * constant might be a negative integer), and to ensure the hex constant is the correct size before
 * applying the bitwise not operator.
 ','line_number':172,'multiline':True]
['text':'
 * Insertion sort, for sorting small sets of values.
 *
 * The "compare_lt" argument is a function or macro that returns true when its first argument is
 * less than its second argument.
 ','line_number':198,'multiline':True]
['text':'
 * Some C compiler address sanitizers complain if qsort is passed a NULL base reference, even if
 * there are no elements to compare (note zero elements is allowed by the IEEE Std 1003.1-2017
 * standard). Avoid the complaint.
 ','line_number':225,'multiline':True]
['text':'
 * Binary search for an integer key.
 ','line_number':234,'multiline':True]
['text':'
 * Binary search for a string key. Note: For the binary search to function correctly, the array
 * should not contain NULL values.
 ','line_number':253,'multiline':True]
['text':' Check if a string matches a prefix. ','line_number':275,'multiline':True]
['text':' Check if a string matches a suffix. ','line_number':278,'multiline':True]
['text':' Check if a string matches a prefix, and move past it. ','line_number':282,'multiline':True]
['text':' Assert that a string matches a prefix, and move past it. ','line_number':285,'multiline':True]
['text':'
 * Check if a variable string equals a constant string. Inline the common case for WiredTiger of a
 * single byte string. This is required because not all compilers optimize this case in strcmp
 * (e.g., clang). While this macro works in the case of comparing two pointers (a sizeof operator on
 * a pointer won't equal 2 and the extra code will be discarded at compile time), that's not its
 * purpose.
 ','line_number':292,'multiline':True]
['text':'
 * Check if a non-empty string matches a byte sequence of len bytes. The macro expects both strings
 * to be of non-zero length in order to be a match. The bytes argument does not need to be
 * null-terminated. Similar to other string related functions, this is not expected to work on NULL
 * values.
 ','line_number':301,'multiline':True]
['text':'
 * Macro that produces a string literal that isn't wrapped in quotes, to avoid tripping up spell
 * checkers.
 ','line_number':315,'multiline':True]
['text':' Function return value and scratch buffer declaration and initialization. ','line_number':321,'multiline':True]
['text':' If a WT_ITEM data field points somewhere in its allocated memory. ','line_number':325,'multiline':True]
['text':' Copy the data and size fields of an item. ','line_number':329,'multiline':True]
['text':'
 * In diagnostic mode we track the locations from which hazard pointers and scratch buffers were
 * acquired.
 ','line_number':336,'multiline':True]
['text':' Random number generator state. ','line_number':356,'multiline':True]
['text':'
 * WT_TAILQ_SAFE_REMOVE_BEGIN/END --
 *	Macro to safely walk a TAILQ where we're expecting some underlying
 * function to remove elements from the list, but we don't want to stop on
 * error, nor do we want an error to turn into an infinite loop. Used during
 * shutdown, when we're shutting down various lists. Unlike TAILQ_FOREACH_SAFE,
 * this macro works even when the next element gets removed along with the
 * current one.
 ','line_number':364,'multiline':True]
['text':' Leak the structure. ','line_number':376,'multiline':True]
['text':'
 * WT_VA_ARGS_BUF_FORMAT --
 *	Format into a scratch buffer, extending it as necessary. This is a
 * macro because we need to repeatedly call va_start/va_end and there's no
 * way to do that inside a function call.
 ','line_number':382,'multiline':True]
['text':' __ret already used by WT_ERR ','line_number':392,'multiline':True]
['text':'                                                                      \
         * This macro is used to both initialize and concatenate into a         \
         * buffer. If not concatenating, clear the size so we don't use         \
         * any existing contents.                                               \
         ','line_number':395,'multiline':True]
['text':' Format into the buffer. ','line_number':408,'multiline':True]
['text':' Check if there was enough space. ','line_number':414,'multiline':True]
['text':'                                                                  \
             * If not, double the size of the buffer: we're dealing             \
             * with strings, we don't expect the size to get huge.              \
             ','line_number':421,'multiline':True]
