['text':'-
 * Copyright (c) 2014-present MongoDB, Inc.
 * Copyright (c) 2008-2014 WiredTiger, Inc.
 *	All rights reserved.
 *
 * See the file LICENSE for redistribution information.
 ','line_number':1,'multiline':True]
['text':'
 * __cell_check_value_validity --
 *     Check the value's validity window for sanity.
 ','line_number':9,'multiline':True]
['text':'
 * __cell_pack_value_validity --
 *     Pack the validity window for a value.
 ','line_number':31,'multiline':True]
['text':' Globally visible values have no associated validity window. ','line_number':40,'multiline':True]
['text':' Store differences if any, not absolutes. ','line_number':64,'multiline':True]
['text':' Store differences, not absolutes. ','line_number':71,'multiline':True]
['text':' Store differences, not absolutes. ','line_number':76,'multiline':True]
['text':' Store differences if any, not absolutes. ','line_number':82,'multiline':True]
['text':'
 * __wt_check_addr_validity --
 *     Check the address' validity window for sanity.
 ','line_number':95,'multiline':True]
['text':'
 * __cell_pack_addr_validity --
 *     Pack the validity window for an address.
 ','line_number':117,'multiline':True]
['text':' Globally visible values have no associated validity window. ','line_number':126,'multiline':True]
['text':' Store differences, not absolutes. ','line_number':149,'multiline':True]
['text':'
         * Unlike value cell, we store the durable start timestamp even the difference is zero
         * compared to oldest commit timestamp. The difference can only be zero when the page
         * contains all the key/value pairs with the same timestamp. But this scenario is rare and
         * having that check to find out whether it is zero or not will unnecessarily add overhead
         * than benefit.
         ','line_number':152,'multiline':True]
['text':' Store differences, not absolutes. ','line_number':163,'multiline':True]
['text':' Store differences, not absolutes. ','line_number':168,'multiline':True]
['text':'
         * Store differences, not absolutes.
         *
         * Unlike value cell, we store the durable stop timestamp even the difference is zero
         * compared to newest commit timestamp. The difference can only be zero when the page
         * contains all the key/value pairs with the same timestamp. But this scenario is rare and
         * having that check to find out whether it is zero or not will unnecessarily add overhead
         * than benefit.
         ','line_number':176,'multiline':True]
['text':'
 * __wt_cell_pack_addr --
 *     Pack an address cell.
 ','line_number':194,'multiline':True]
['text':' Start building a cell: the descriptor byte starts zero. ','line_number':204,'multiline':True]
['text':'
     * If passed fast-delete information, append the fast-delete information after the aggregated
     * timestamp information.
     ','line_number':210,'multiline':True]
['text':' Type ','line_number':223,'multiline':True]
['text':' Record number ','line_number':226,'multiline':True]
['text':' Length ','line_number':230,'multiline':True]
['text':'
 * __wt_cell_pack_value --
 *     Set a value item's WT_CELL contents.
 ','line_number':235,'multiline':True]
['text':' Start building a cell: the descriptor byte starts zero. ','line_number':247,'multiline':True]
['text':' Avoid "unused variable" warnings in non-debug builds. ','line_number':253,'multiline':True]
['text':'
     * Short data cells without a validity window or run-length encoding have 6 bits of data length
     * in the descriptor byte.
     ','line_number':255,'multiline':True]
['text':' Type + length ','line_number':261,'multiline':True]
['text':'
         * If the size was what prevented us from using a short cell, it's larger than the
         * adjustment size. Decrement/increment it when packing/unpacking so it takes up less room.
         ','line_number':264,'multiline':True]
['text':' Type ','line_number':270,'multiline':True]
['text':' RLE ','line_number':273,'multiline':True]
['text':' Length ','line_number':276,'multiline':True]
['text':'
 * __wt_cell_pack_value_match --
 *     Return if two value items would have identical WT_CELLs (except for their validity window and
 *     any RLE).
 ','line_number':282,'multiline':True]
['text':' Default to no-match ','line_number':296,'multiline':True]
['text':'
     * This is a special-purpose function used by reconciliation to support dictionary lookups.
     * We're passed an on-page cell and a created cell plus a chunk of data we're about to write on
     * the page, and we return if they would match on the page. Ignore the validity window and the
     * column-store RLE because the copied cell will have its own.
     ','line_number':298,'multiline':True]
['text':' Skip validity window ','line_number':314,'multiline':True]
['text':' Skip RLE ','line_number':330,'multiline':True]
['text':' Length ','line_number':332,'multiline':True]
['text':' Skip validity window ','line_number':343,'multiline':True]
['text':' Skip RLE ','line_number':359,'multiline':True]
['text':' Length ','line_number':361,'multiline':True]
['text':'
 * __wt_cell_pack_copy --
 *     Write a copy value cell.
 ','line_number':370,'multiline':True]
['text':' Start building a cell: the descriptor byte starts zero. ','line_number':381,'multiline':True]
['text':' Avoid "unused variable" warnings in non-debug builds. ','line_number':387,'multiline':True]
['text':' Type ','line_number':390,'multiline':True]
['text':' Type ','line_number':392,'multiline':True]
['text':' RLE ','line_number':394,'multiline':True]
['text':' Copy offset ','line_number':397,'multiline':True]
['text':'
 * __wt_cell_pack_del --
 *     Write a deleted value cell.
 ','line_number':402,'multiline':True]
['text':' Start building a cell: the descriptor byte starts zero. ','line_number':412,'multiline':True]
['text':' Avoid "unused variable" warnings in non-debug builds. ','line_number':418,'multiline':True]
['text':' Type ','line_number':421,'multiline':True]
['text':' Type ','line_number':423,'multiline':True]
['text':' RLE ','line_number':425,'multiline':True]
['text':'
 * __wt_cell_pack_int_key --
 *     Set a row-store internal page key's WT_CELL contents.
 ','line_number':431,'multiline':True]
['text':' Short keys have 6 bits of data length in the descriptor byte. ','line_number':440,'multiline':True]
['text':' Type ','line_number':447,'multiline':True]
['text':'
     * If the size prevented us from using a short cell, it's larger than the adjustment size.
     * Decrement/increment it when packing/unpacking so it takes up less room.
     ','line_number':450,'multiline':True]
['text':' Length ','line_number':454,'multiline':True]
['text':'
 * __wt_cell_pack_leaf_key --
 *     Set a row-store leaf page key's WT_CELL contents.
 ','line_number':459,'multiline':True]
['text':' Short keys have 6 bits of data length in the descriptor byte. ','line_number':468,'multiline':True]
['text':' Type + length ','line_number':471,'multiline':True]
['text':' Type + length ','line_number':475,'multiline':True]
['text':' Prefix ','line_number':477,'multiline':True]
['text':' Type ','line_number':482,'multiline':True]
['text':' Type ','line_number':485,'multiline':True]
['text':' Prefix ','line_number':486,'multiline':True]
['text':'
     * If the size prevented us from using a short cell, it's larger than the adjustment size.
     * Decrement/increment it when packing/unpacking so it takes up less room.
     ','line_number':490,'multiline':True]
['text':' Length ','line_number':494,'multiline':True]
['text':'
 * __wt_cell_pack_ovfl --
 *     Pack an overflow cell.
 ','line_number':499,'multiline':True]
['text':' Start building a cell: the descriptor byte starts zero. ','line_number':510,'multiline':True]
['text':' Avoid "unused variable" warnings in non-debug builds. ','line_number':527,'multiline':True]
['text':' Type ','line_number':530,'multiline':True]
['text':' Type ','line_number':532,'multiline':True]
['text':' RLE ','line_number':533,'multiline':True]
['text':' Length ','line_number':536,'multiline':True]
['text':'
 * __wt_cell_rle --
 *     Return the cell's RLE value.
 ','line_number':541,'multiline':True]
['text':'
     * Any item with only 1 occurrence is stored with an RLE of 0, that is, without any RLE at all.
     * This code is a single place to handle that correction, for simplicity.
     ','line_number':548,'multiline':True]
['text':'
 * __wt_cell_total_len --
 *     Return the cell's total length, including data.
 ','line_number':555,'multiline':True]
['text':'
     * The length field is specially named because it's dangerous to use it: it represents the
     * length of the current cell (normally used for the loop that walks through cells on the page),
     * but occasionally we want to copy a cell directly from the page, and what we need is the
     * cell's total length. The problem is dictionary-copy cells, because in that case, the __len
     * field is the length of the current cell, not the cell for which we're returning data. To use
     * the __len field, you must be sure you're not looking at a copy cell.
     ','line_number':566,'multiline':True]
['text':'
 * __wt_cell_type --
 *     Return the cell's type (collapsing special types).
 ','line_number':577,'multiline':True]
['text':'
 * __wt_cell_type_raw --
 *     Return the cell's type.
 ','line_number':605,'multiline':True]
['text':'
 * __wt_cell_type_reset --
 *     Reset the cell's type.
 ','line_number':616,'multiline':True]
['text':'
     * For all current callers of this function, this should happen once and only once, assert we're
     * setting what we think we're setting.
     ','line_number':623,'multiline':True]
['text':'
 * __wt_cell_leaf_value_parse --
 *     Return the cell if it's a row-store leaf page value, otherwise return NULL.
 ','line_number':633,'multiline':True]
['text':'
     * This function exists so there's a place for this comment.
     *
     * Row-store leaf pages may have a single data cell between each key, or
     * keys may be adjacent (when the data cell is empty).
     *
     * One special case: if the last key on a page is a key without a value,
     * don't walk off the end of the page: the size of the underlying disk
     * image is exact, which means the end of the last cell on the page plus
     * the length of the cell should be the byte immediately after the page
     * disk image.
     *
     * !!!
     * This line of code is really a call to __wt_off_page, but we know the
     * cell we're given will either be on the page or past the end of page,
     * so it's a simpler check.  (I wouldn't bother, but the real problem is
     * we can't call __wt_off_page directly, it's in btree_inline.h which requires
     * this file be included first.)
     ','line_number':640,'multiline':True]
['text':'
 * The verification code specifies an end argument, a pointer to 1B past the end-of-page. In which
 * case, make sure all reads are inside the page image. If an error occurs, return an error code but
 * don't output messages, our caller handles that.
 ','line_number':675,'multiline':True]
['text':'
 * __wt_cell_unpack_safe --
 *     Unpack a WT_CELL into a structure, with optional boundary checks.
 ','line_number':688,'multiline':True]
['text':' [-Wconditional-uninitialized] ','line_number':711,'multiline':True]
['text':' [-Wconditional-uninitialized] ','line_number':712,'multiline':True]
['text':'
     * NB: when unpacking a WT_CELL_VALUE_COPY cell, unpack.cell is returned as the original cell,
     * not the copied cell (in other words, data from the copied cell must be available from unpack
     * after we return, as our caller has no way to find the copied cell).
     ','line_number':728,'multiline':True]
['text':'
     * This path is performance critical for read-only trees, we're parsing on-page structures. For
     * that reason we don't clear the unpacked cell structure (although that would be simpler),
     * instead we make sure we initialize all structure elements either here or in the immediately
     * following switch. All validity windows default to durability.
     ','line_number':738,'multiline':True]
['text':'
     * Handle cells with none of RLE counts, validity window or data length: WT_CELL_KEY_SHORT_PFX,
     * WT_CELL_KEY_SHORT and WT_CELL_VALUE_SHORT. Short key/data cells have 6 bits of data length in
     * the descriptor byte and nothing else
     ','line_number':749,'multiline':True]
['text':' skip prefix ','line_number':756,'multiline':True]
['text':' Handle copy cells. ','line_number':761,'multiline':True]
['text':' Handle copy cells. ','line_number':768,'multiline':True]
['text':' skip cell ','line_number':776,'multiline':True]
['text':'
     * Check for a prefix byte that optionally follows the cell descriptor byte in keys on row-store
     * leaf pages.
     ','line_number':778,'multiline':True]
['text':' skip prefix ','line_number':783,'multiline':True]
['text':' Check for a validity window. ','line_number':787,'multiline':True]
['text':' Return an error if we're not unpacking a cell of this type. ','line_number':793,'multiline':True]
['text':' skip second descriptor byte ','line_number':799,'multiline':True]
['text':' Return an error if we're not unpacking a cell of this type. ','line_number':837,'multiline':True]
['text':' skip second descriptor byte ','line_number':843,'multiline':True]
['text':' Unpack any fast-truncate information. ','line_number':880,'multiline':True]
['text':' No prepare can have been in progress. ','line_number':888,'multiline':True]
['text':' The leaf page is on disk. ','line_number':889,'multiline':True]
['text':' There is no running transaction. ','line_number':890,'multiline':True]
['text':'
     * Check for an RLE count or record number that optionally follows the cell descriptor byte on
     * column-store variable-length pages.
     ','line_number':894,'multiline':True]
['text':' skip value ','line_number':898,'multiline':True]
['text':'
     * Handle special actions for a few different cell types and set the data length (deleted cells
     * are fixed-size without length bytes, almost everything else has data length bytes).
     ','line_number':901,'multiline':True]
['text':' Return an error if we're not unpacking a cell of this type. ','line_number':907,'multiline':True]
['text':'
         * The cell is followed by an offset to a cell written earlier in the page. Save/restore the
         * visibility window, length and RLE of this cell, we need the length to step through the
         * set of cells on the page and the RLE and timestamp information are specific to this cell.
         ','line_number':913,'multiline':True]
['text':'
         * Set overflow flag.
         ','line_number':930,'multiline':True]
['text':' FALLTHROUGH ','line_number':934,'multiline':True]
['text':'
         * The cell is followed by a 4B data length and a chunk of data.
         ','line_number':943,'multiline':True]
['text':'
         * If the size was what prevented us from using a short cell, it's larger than the
         * adjustment size. Decrement/increment it when packing/unpacking so it takes up less room.
         ','line_number':948,'multiline':True]
['text':' Unknown cell type. ','line_number':966,'multiline':True]
['text':'
     * Skip if we know we're not unpacking a cell of this type. This is all inlined code, and
     * ideally checking allows the compiler to discard big chunks of it.
     ','line_number':970,'multiline':True]
['text':'
     * Check the original cell against the full cell length (this is a diagnostic as well, we may be
     * copying the cell from the page and we need the right length).
     ','line_number':980,'multiline':True]
['text':'
 * __cell_page_del_window_cleanup --
 *     Clean up a page_del structure loaded from a previous run.
 ','line_number':988,'multiline':True]
['text':'
     * The fast-truncate times are a stop time for the whole page; this code should match the stop
     * txn and stop time logic for KV cells.
     ','line_number':995,'multiline':True]
['text':' As above, only for non-timestamped tables. ','line_number':1003,'multiline':True]
['text':'
 * __cell_addr_window_cleanup --
 *     Clean up addr cells loaded from a previous run.
 ','line_number':1012,'multiline':True]
['text':' Tell reconciliation we cleared the transaction ids and the cell needs to be rebuilt. ','line_number':1025,'multiline':True]
['text':'
             * The combination of newest stop timestamp being WT_TS_MAX while the newest stop
             * transaction not being WT_TXN_MAX is possible only for the non-timestamped tables. In
             * this scenario there shouldn't be any timestamp value as part of durable stop
             * timestamp other than the default value WT_TS_NONE.
             ','line_number':1036,'multiline':True]
['text':' Also handle any fast-truncate information. ','line_number':1049,'multiline':True]
['text':'
 * __cell_kv_window_cleanup --
 *     Clean up kv cells loaded from a previous run.
 ','line_number':1058,'multiline':True]
['text':'
             * The combination of stop timestamp being WT_TS_MAX while the stop transaction not
             * being WT_TXN_MAX is possible only for the non-timestamped tables. In this scenario
             * there shouldn't be any timestamp value as part of durable stop timestamp other than
             * the default value WT_TS_NONE.
             ','line_number':1077,'multiline':True]
['text':'
 * __cell_redo_page_del_cleanup --
 *     Redo the window cleanup logic on a page_del structure after the write generations have been
 *     bumped. Note: the name of this function is abusive (there are no cells involved) but as the
 *     logic is a copy of __cell_unpack_window_cleanup it seems worthwhile to keep the two together.
 ','line_number':1092,'multiline':True]
['text':'
 * __cell_unpack_window_cleanup --
 *     Clean up cells loaded from a previous run.
 ','line_number':1118,'multiline':True]
['text':'
     * If the page came from a previous run, reset the transaction ids to "none" and timestamps to 0
     * as appropriate. Transaction ids shouldn't persist between runs so these are always set to
     * "none". Timestamps should persist between runs however, the absence of a timestamp (in the
     * case of a non-timestamped write) should default to WT_TS_NONE rather than "max" as usual.
     *
     * Note that it is still necessary to unpack each value above even if we end up overwriting them
     * since values in a cell need to be unpacked sequentially.
     *
     * This is how the stop time point should be interpreted for each type of delete:
     * -
     *                        Current startup               Previous startup
     * Timestamp delete       txnid=x, ts=y,                txnid=0, ts=y,
     *                        durable_ts=z                  durable_ts=z
     * Non-timestamp delete   txnid=x, ts=NONE,             txnid=0, ts=NONE,
     *                        durable_ts=NONE               durable_ts=NONE
     * No delete              txnid=MAX, ts=MAX,            txnid=MAX, ts=MAX,
     *                        durable_ts=NONE               durable_ts=NONE
     ','line_number':1128,'multiline':True]
['text':'
         * When reading a checkpoint, override the tree's base write generation with the write
         * generation from the global metadata, which might be newer. This comes into play if the
         * tree checkpoint is from an older database run than the global checkpoint, which can
         * happen if checkpointing skips the tree at the right points. Bypass this logic if the
         * checkpoint write generation isn't set because the checkpoint is from an older version of
         * WiredTiger; in that case we use the tree's write generation and hope for the best.
         ','line_number':1149,'multiline':True]
['text':'
 * __wt_cell_unpack_addr --
 *     Unpack an address WT_CELL into a structure.
 ','line_number':1173,'multiline':True]
['text':' Avoid "unused variable" warnings in non-debug builds. ','line_number':1185,'multiline':True]
['text':'
 * __wt_cell_unpack_kv --
 *     Unpack a value WT_CELL into a structure.
 ','line_number':1190,'multiline':True]
['text':'
     * Row-store doesn't store zero-length values on pages, but this allows us to pretend.
     ','line_number':1200,'multiline':True]
['text':'
         * If there isn't any value validity window (which is what it will take to get to a
         * zero-length item), the value must be stable.
         ','line_number':1213,'multiline':True]
['text':' Avoid "unused variable" warnings in non-debug builds. ','line_number':1224,'multiline':True]
['text':'
 * __wt_cell_get_ta --
 *     Get the underlying time aggregate from an unpacked address cell.
 ','line_number':1229,'multiline':True]
['text':'
 * __wt_cell_get_tw --
 *     Get the underlying time window from an unpacked value cell.
 ','line_number':1239,'multiline':True]
['text':'
 * __cell_data_ref --
 *     Set a buffer to reference the data from an unpacked cell.
 ','line_number':1249,'multiline':True]
['text':' Reference the cell's data, optionally decode it. ','line_number':1264,'multiline':True]
['text':'
         * Encourage checkpoint to race with reading the onpage value. If we have an overflow item,
         * it may be removed by checkpoint concurrently.
         ','line_number':1283,'multiline':True]
['text':'
 * __wt_dsk_cell_data_ref_addr --
 *     Set a buffer to reference the data from an unpacked address cell.
 ','line_number':1302,'multiline':True]
['text':'
 * __wt_dsk_cell_data_ref_kv --
 *     Set a buffer to reference the data from an unpacked key value cell. There are two versions
 *     because of WT_CELL_VALUE_OVFL_RM type cells. When an overflow item is deleted, its backing
 *     blocks are removed; if there are still running transactions that might need to see the
 *     overflow item, we cache a copy of the item and reset the item's cell to
 *     WT_CELL_VALUE_OVFL_RM. If we find a WT_CELL_VALUE_OVFL_RM cell when reading an overflow item,
 *     we use the page reference to look aside into the cache. So, calling the "dsk" version of the
 *     function declares the cell cannot be of type WT_CELL_VALUE_OVFL_RM, and calling the "page"
 *     version means it might be.
 ','line_number':1313,'multiline':True]
['text':'
 * __wt_page_cell_data_ref_kv --
 *     Set a buffer to reference the data from an unpacked key value cell.
 ','line_number':1332,'multiline':True]
['text':'
 * WT_CELL_FOREACH --
 *	Walk the cells on a page.
 ','line_number':1343,'multiline':True]
