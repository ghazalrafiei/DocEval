['text':'-
 * Copyright (c) 2014-present MongoDB, Inc.
 * Copyright (c) 2008-2014 WiredTiger, Inc.
 *	All rights reserved.
 *
 * See the file LICENSE for redistribution information.
 ','line_number':1,'multiline':True]
['text':'
 * __wt_rdtsc --
 *     Get a timestamp from CPU registers.
 ','line_number':11,'multiline':True]
['text':'
 * __time_check_monotonic --
 *     Check and prevent time running backward. If we detect that it has, we set the time structure
 *     to the previous values, making time stand still until we see a time in the future of the
 *     highest value seen so far.
 ','line_number':44,'multiline':True]
['text':'
     * Detect time going backward. If so, use the last saved timestamp.
     ','line_number':53,'multiline':True]
['text':'
 * __wt_epoch --
 *     Return the time since the Epoch.
 ','line_number':67,'multiline':True]
['text':'
     * Read into a local variable, then check for monotonically increasing time, ensuring single
     * threads never see time move backward. We don't prevent multiple threads from seeing time move
     * backwards (even when reading time serially, the saved last-read time is per thread, not per
     * timer, so multiple threads can race the time). Nor do we prevent multiple threads
     * simultaneously reading the time from seeing random time or time moving backwards (assigning
     * the time structure to the returned memory location implies multicycle writes to memory).
     ','line_number':76,'multiline':True]
['text':'
 * __wt_clock --
 *     Obtain a timestamp via either a CPU register or via a system call on platforms where
 *     obtaining it directly from the hardware register is not supported.
 ','line_number':89,'multiline':True]
['text':'
     * In one case we return nanoseconds, in the other we return clock ticks. That looks wrong, but
     * it's not. When simply comparing before and after values, which is returned doesn't matter.
     * When trying to calculate wall-clock time (that is, comparing a starting time with an ending
     * time), we'll subtract the two values and then call a function to convert the result of the
     * subtraction into nanoseconds. In the case where we already have nanoseconds, that function
     * has a conversion constant of 1 and we'll skip the conversion, in the case where we have clock
     * ticks, the conversion constant will be real. The reason is because doing it that way avoids a
     * floating-point operation per wall-clock time calculation.
     ','line_number':99,'multiline':True]
['text':'
 * __wt_seconds --
 *     Return the seconds since the Epoch.
 ','line_number':116,'multiline':True]
['text':'
 * __wt_seconds32 --
 *     Return the seconds since the Epoch in 32 bits.
 ','line_number':130,'multiline':True]
['text':' This won't work in 2038. But for now allow it. ','line_number':139,'multiline':True]
['text':'
 * __wt_clock_to_nsec --
 *     Convert from clock ticks to nanoseconds.
 ','line_number':144,'multiline':True]
['text':'
     * If the ticks were reset, consider it an invalid check and just return zero as the time
     * difference because we cannot compute anything meaningful.
     ','line_number':153,'multiline':True]
['text':'
 * __wt_op_timer_start --
 *     Start the operations timer.
 ','line_number':163,'multiline':True]
['text':' Timer is configured per-transaction if there is a value. ','line_number':172,'multiline':True]
['text':'
 * __wt_op_timer_stop --
 *     Stop the operations timer.
 ','line_number':179,'multiline':True]
['text':'
 * __wt_op_timer_fired --
 *     Check the operations timers.
 ','line_number':189,'multiline':True]
['text':'
 * __wt_timer_start --
 *     Start the timer.
 ','line_number':207,'multiline':True]
['text':'
 * __wt_timer_evaluate_ms --
 *     Evaluate the difference between the current time and start time and output the difference in
 *     milliseconds.
 ','line_number':217,'multiline':True]
