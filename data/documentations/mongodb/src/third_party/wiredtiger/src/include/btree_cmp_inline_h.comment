['text':'-
 * Copyright (c) 2014-present MongoDB, Inc.
 * Copyright (c) 2008-2014 WiredTiger, Inc.
 *	All rights reserved.
 *
 * See the file LICENSE for redistribution information.
 ','line_number':1,'multiline':True]
['text':' 16B alignment ','line_number':18,'multiline':True]
['text':' chunk size ','line_number':20,'multiline':True]
['text':'
 * __wt_lex_compare --
 *     Lexicographic comparison routine. Returns: < 0 if user_item is lexicographically < tree_item,
 *     = 0 if user_item is lexicographically = tree_item, > 0 if user_item is lexicographically >
 *     tree_item. We use the names "user" and "tree" so it's clear in the btree code which the
 *     application is looking at when we call its comparison function.
 ','line_number':22,'multiline':True]
['text':' Use vector instructions if we'll execute at least 2 of them. ','line_number':43,'multiline':True]
['text':' Use vector instructions if we'll execute at least 1 of them. ','line_number':71,'multiline':True]
['text':'
     * Use the non-vectorized version for the remaining bytes and for the small key sizes.
     ','line_number':87,'multiline':True]
['text':' Contents are equal up to the smallest length. ','line_number':94,'multiline':True]
['text':'
 * __wt_compare --
 *     The same as __wt_lex_compare, but using the application's collator function when configured.
 ','line_number':98,'multiline':True]
['text':'
 * __wt_compare_bounds --
 *     Return if the cursor key is within the bounded range. If upper is True, this indicates a next
 *     call and the key is checked against the upper bound. If upper is False, this indicates a prev
 *     call and the key is then checked against the lower bound.
 ','line_number':113,'multiline':True]
['text':' Unpack the raw recno buffer into integer variable. ','line_number':137,'multiline':True]
['text':' Unpack the raw recno buffer into integer variable. ','line_number':153,'multiline':True]
['text':'
 * __wt_lex_compare_skip --
 *     Lexicographic comparison routine, skipping leading bytes. Returns: < 0 if user_item is
 *     lexicographically < tree_item = 0 if user_item is lexicographically = tree_item > 0 if
 *     user_item is lexicographically > tree_item We use the names "user" and "tree" so it's clear
 *     in the btree code which the application is looking at when we call its comparison function.
 ','line_number':167,'multiline':True]
['text':' Use vector instructions if we'll execute at least 2 of them. ','line_number':190,'multiline':True]
['text':' Use vector instructions if we'll execute  at least 1 of them. ','line_number':218,'multiline':True]
['text':'
     * Use the non-vectorized version for the remaining bytes and for the small key sizes.
     ','line_number':237,'multiline':True]
['text':' Contents are equal up to the smallest length. ','line_number':246,'multiline':True]
['text':'
     * There are various optimizations in the code to skip comparing prefixes that are known to be
     * the same. If configured, check that the prefixes actually match.
     ','line_number':251,'multiline':True]
['text':'
 * __wt_compare_skip --
 *     The same as __wt_lex_compare_skip, but using the application's collator function when
 *     configured.
 ','line_number':268,'multiline':True]
['text':'
 * __wt_lex_compare_short --
 *     Lexicographic comparison routine for short keys. Returns: < 0 if user_item is
 *     lexicographically < tree_item = 0 if user_item is lexicographically = tree_item > 0 if
 *     user_item is lexicographically > tree_item We use the names "user" and "tree" so it's clear
 *     in the btree code which the application is looking at when we call its comparison function.
 ','line_number':284,'multiline':True]
['text':'
 * The maximum packed uint64_t is 9B, catch row-store objects using packed record numbers as keys.
 *
 * Don't use a #define to compress this case statement: gcc7 complains about implicit fallthrough
 * and doesn't support explicit fallthrough comments in macros.
 ','line_number':304,'multiline':True]
['text':' FALLTHROUGH ','line_number':317,'multiline':True]
['text':' FALLTHROUGH ','line_number':323,'multiline':True]
['text':' FALLTHROUGH ','line_number':329,'multiline':True]
['text':' FALLTHROUGH ','line_number':335,'multiline':True]
['text':' FALLTHROUGH ','line_number':341,'multiline':True]
['text':' FALLTHROUGH ','line_number':347,'multiline':True]
['text':' FALLTHROUGH ','line_number':353,'multiline':True]
['text':' FALLTHROUGH ','line_number':359,'multiline':True]
['text':' Contents are equal up to the smallest length. ','line_number':364,'multiline':True]
