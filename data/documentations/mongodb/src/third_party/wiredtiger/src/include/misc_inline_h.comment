['text':'-
 * Copyright (c) 2014-present MongoDB, Inc.
 * Copyright (c) 2008-2014 WiredTiger, Inc.
 *	All rights reserved.
 *
 * See the file LICENSE for redistribution information.
 ','line_number':1,'multiline':True]
['text':'
 * __wt_cond_wait --
 *     Wait on a mutex, optionally timing out.
 ','line_number':9,'multiline':True]
['text':'
 * __wt_hex --
 *     Convert a byte to a hex character.
 ','line_number':22,'multiline':True]
['text':'
 * __wt_safe_sub --
 *     Subtract unsigned integers, rounding to zero if the result would be negative.
 ','line_number':32,'multiline':True]
['text':'
 * __wt_strdup --
 *     ANSI strdup function.
 ','line_number':42,'multiline':True]
['text':'
 * __wt_strnlen --
 *     Determine the length of a fixed-size string
 ','line_number':52,'multiline':True]
['text':'
 * __wt_strcat --
 *     A safe version of string concatenation, which checks the size of the destination buffer;
 *     return ERANGE on error.
 ','line_number':66,'multiline':True]
['text':' Account for the null-terminating byte. ','line_number':80,'multiline':True]
['text':'
 * __wt_snprintf --
 *     snprintf convenience function, ignoring the returned size.
 ','line_number':88,'multiline':True]
['text':' It's an error if the buffer couldn't hold everything. ','line_number':107,'multiline':True]
['text':'
 * __wt_vsnprintf --
 *     vsnprintf convenience function, ignoring the returned size.
 ','line_number':111,'multiline':True]
['text':' It's an error if the buffer couldn't hold everything. ','line_number':124,'multiline':True]
['text':'
 * __wt_snprintf_len_set --
 *     snprintf convenience function, setting the returned size.
 ','line_number':128,'multiline':True]
['text':'
 * __wt_vsnprintf_len_set --
 *     vsnprintf convenience function, setting the returned size.
 ','line_number':147,'multiline':True]
['text':'
 * __wt_snprintf_len_incr --
 *     snprintf convenience function, incrementing the returned size.
 ','line_number':159,'multiline':True]
['text':'
 * __wt_spin_backoff --
 *     Back off while spinning for a resource. This is used to avoid busy waiting loops that can
 *     consume enough CPU to block real work being done. The algorithm spins a few times, then
 *     yields for a while, then falls back to sleeping.
 ','line_number':176,'multiline':True]
['text':'
 * __wt_timing_stress --
 *     Optionally add delay to stress code paths.
 ','line_number':200,'multiline':True]
['text':' If the specified flag isn't set, we're done. ','line_number':211,'multiline':True]
['text':' Maximum stress delay is 1/10 of a second. ','line_number':226,'multiline':True]
['text':'
 * __wt_timing_stress_sleep_random --
 *     Sleep for a random time, with a bias towards shorter sleeps.
 ','line_number':229,'multiline':True]
['text':'
     * If there is a lot of cache pressure, don't let the sleep time get too large. If the cache is
     * totally full, return.
     ','line_number':239,'multiline':True]
['text':'
     * We need a fast way to choose a sleep time. We want to sleep a short period most of the time,
     * but occasionally wait longer. Divide the maximum period of time into 10 buckets (where bucket
     * 0 doesn't sleep at all), and roll dice, advancing to the next bucket 50% of the time. That
     * means we'll hit the maximum roughly every 1K calls.
     ','line_number':251,'multiline':True]
['text':' The default maximum delay is 1/10th of a second. ','line_number':264,'multiline':True]
['text':'
 * __wt_failpoint --
 *     A generic failpoint function, it will return true if the failpoint triggers. Takes an
 *     unsigned integer from 0 to 10000 representing an X in 10000 chance of occurring.
 ','line_number':268,'multiline':True]
['text':' Assert that the given probability is sane. ','line_number':283,'multiline':True]
['text':'
 * The hardware-accelerated checksum code that originally shipped on Windows did not correctly
 * handle memory that wasn't 8B aligned and a multiple of 8B. It's likely that calculations were
 * always 8B aligned, but there's some risk.
 *
 * What we do is always write the correct checksum, and if a checksum test fails, check it against
 * the alternate version have before failing.
 ','line_number':289,'multiline':True]
['text':'
 * __wt_checksum_match --
 *     Return if a checksum matches either the primary or alternate values.
 ','line_number':299,'multiline':True]
['text':'
 * __wt_checksum_match --
 *     Return if a checksum matches.
 ','line_number':311,'multiline':True]
