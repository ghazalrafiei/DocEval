['text':'-
 * Copyright (c) 2014-present MongoDB, Inc.
 * Copyright (c) 2008-2014 WiredTiger, Inc.
 *	All rights reserved.
 *
 * See the file LICENSE for redistribution information.
 ','line_number':1,'multiline':True]
['text':'
 * __wt_cond_alloc --
 *     Allocate and initialize a condition variable.
 ','line_number':11,'multiline':True]
['text':' Initialize the condition variable to permit self-blocking. ','line_number':24,'multiline':True]
['text':'
 * __wt_cond_wait_signal --
 *     Wait on a mutex, optionally timing out. If we get it before the time out period expires, let
 *     the caller know.
 ','line_number':34,'multiline':True]
['text':' Fast path if already signalled. ','line_number':50,'multiline':True]
['text':'
     * It's possible to race with threads waking us up. That's not a problem if there are multiple
     * wakeups because the next wakeup will get us, or if we're only pausing for a short period.
     * It's a problem if there's only a single wakeup, our waker is likely waiting for us to exit.
     * After acquiring the mutex (so we're guaranteed to be awakened by any future wakeup call),
     * optionally check if we're OK to keep running. This won't ensure our caller won't just loop
     * and call us again, but at least it's not our fault.
     *
     * Assert we're not waiting longer than a second if not checking the run status.
     ','line_number':61,'multiline':True]
['text':'
         * Check for 32-bit unsigned integer overflow INFINITE is max unsigned int on Windows
         ','line_number':79,'multiline':True]
['text':'
         * 0 would mean the CV sleep becomes a TryCV which we do not
         * want
         ','line_number':86,'multiline':True]
['text':'
     * SleepConditionVariableCS returns non-zero on success, 0 on timeout or failure.
     ','line_number':97,'multiline':True]
['text':'
 * __wt_cond_signal --
 *     Signal a waiting thread.
 ','line_number':123,'multiline':True]
['text':'
     * Our callers often set flags to cause a thread to exit. Add a barrier to ensure exit flags are
     * seen by the sleeping threads, otherwise we can wake up a thread, it immediately goes back to
     * sleep, and we'll hang. Use a full barrier (we may not write before waiting on thread join).
     ','line_number':134,'multiline':True]
['text':'
     * Fast path if we are in (or can enter), a state where the next waiter will return immediately
     * as already signaled.
     ','line_number':141,'multiline':True]
['text':'
 * __wt_cond_destroy --
 *     Destroy a condition variable.
 ','line_number':153,'multiline':True]
['text':' Do nothing to delete Condition Variable ','line_number':166,'multiline':True]
