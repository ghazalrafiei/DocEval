['text':'-
 * Copyright (c) 2014-present MongoDB, Inc.
 * Copyright (c) 2008-2014 WiredTiger, Inc.
 *	All rights reserved.
 *
 * See the file LICENSE for redistribution information.
 ','line_number':1,'multiline':True]
['text':'
 * __wt_block_salvage_start --
 *     Start a file salvage.
 ','line_number':11,'multiline':True]
['text':' Reset the description information in the first block. ','line_number':23,'multiline':True]
['text':'
     * Salvage creates a new checkpoint when it's finished, set up for rolling an empty file
     * forward.
     ','line_number':26,'multiline':True]
['text':'
     * Truncate the file to an allocation-size multiple of blocks (bytes trailing the last block
     * must be garbage, by definition).
     ','line_number':32,'multiline':True]
['text':'
     * The file's first allocation-sized block is description information, skip it when reading
     * through the file.
     ','line_number':41,'multiline':True]
['text':'
     * The only checkpoint extent we care about is the allocation list. Start with the entire file
     * on the allocation list, we'll "free" any blocks we don't want as we process the file.
     ','line_number':47,'multiline':True]
['text':' Salvage performs a checkpoint but doesn't start or resolve it. ','line_number':53,'multiline':True]
['text':'
 * __wt_block_salvage_end --
 *     End a file salvage.
 ','line_number':60,'multiline':True]
['text':' Salvage performs a checkpoint but doesn't start or resolve it. ','line_number':67,'multiline':True]
['text':' Discard the checkpoint. ','line_number':71,'multiline':True]
['text':'
 * __wt_block_offset_invalid --
 *     Return if the block offset is insane.
 ','line_number':75,'multiline':True]
['text':' < minimum page size ','line_number':82,'multiline':True]
['text':' not allocation-size units ','line_number':84,'multiline':True]
['text':' > maximum page size ','line_number':86,'multiline':True]
['text':' past end-of-file ','line_number':88,'multiline':True]
['text':'
 * __wt_block_salvage_next --
 *     Return the address for the next potential block from the file.
 ','line_number':94,'multiline':True]
['text':' Salvage isn't implemented (yet) for tiered trees. ','line_number':112,'multiline':True]
['text':' Read through the file, looking for pages. ','line_number':119,'multiline':True]
['text':' Check eof. ','line_number':122,'multiline':True]
['text':'
         * Read the start of a possible page (an allocation-size block), and get a page length from
         * it. Move to the next allocation sized boundary, we'll never consider this one again.
         ','line_number':127,'multiline':True]
['text':'
         * Check the block size: if it's not insane, read the block. Reading the block validates any
         * checksum; if reading the block succeeds, return its address as a possible page,
         * otherwise, move past it.
         ','line_number':137,'multiline':True]
['text':' Free the allocation-size block. ','line_number':146,'multiline':True]
['text':' Re-create the address cookie that should reference this block. ','line_number':153,'multiline':True]
['text':'
 * __wt_block_salvage_valid --
 *     Let salvage know if a block is valid.
 ','line_number':164,'multiline':True]
['text':'
     * Crack the cookie. If the upper layer took the block, move past it; if the upper layer
     * rejected the block, move past an allocation size chunk and free it.
     ','line_number':175,'multiline':True]
