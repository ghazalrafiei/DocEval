['text':'-
 * Copyright (c) 2014-present MongoDB, Inc.
 * Copyright (c) 2008-2014 WiredTiger, Inc.
 *	All rights reserved.
 *
 * See the file LICENSE for redistribution information.
 ','line_number':1,'multiline':True]
['text':' The bit list ignores the first block: convert to/from a frag/offset. ','line_number':19,'multiline':True]
['text':'
 * __wt_block_verify_start --
 *     Start file verification.
 ','line_number':23,'multiline':True]
['text':' Configuration: strict behavior on any error. ','line_number':35,'multiline':True]
['text':' Configuration: dump the file's layout. ','line_number':39,'multiline':True]
['text':'
     * Find the last checkpoint in the list: if there are none, or the only checkpoint we have is
     * fake, there's no work to do. Don't complain, that's not our problem to solve.
     ','line_number':43,'multiline':True]
['text':' Set the size of the file to the size of the last checkpoint. ','line_number':54,'multiline':True]
['text':'
     * We're done if the file has no data pages (this happens if we verify a file immediately after
     * creation or the checkpoint doesn't reflect any of the data pages).
     ','line_number':57,'multiline':True]
['text':' The file size should be a multiple of the allocation size. ','line_number':65,'multiline':True]
['text':'
     * Allocate a bit array, where each bit represents a single allocation
     * size piece of the file (this is how we track the parts of the file
     * we've verified, and check for multiply referenced or unreferenced
     * blocks).  Storing this on the heap seems reasonable, verifying a 1TB
     * file with an 512B allocation size would require a 256MB bit array:
     *
     *	(((1 * 2^40) / 512) / 8) = 256 * 2^20
     *
     * To verify larger files than we can handle in this way, we'd have to
     * write parts of the bit array into a disk file.
     *
     * Alternatively, we could switch to maintaining ranges of the file as
     * we do with the extents, but that has its own failure mode, where we
     * verify many non-contiguous blocks creating too many entries on the
     * list to fit into memory.
     ','line_number':69,'multiline':True]
['text':'
     * Set this before reading any extent lists: don't panic if we see corruption.
     ','line_number':89,'multiline':True]
['text':'
     * We maintain an allocation list that is rolled forward through the set of checkpoints.
     ','line_number':94,'multiline':True]
['text':'
     * The only checkpoint avail list we care about is the last one written; get it now and
     * initialize the list of file fragments.
     ','line_number':99,'multiline':True]
['text':'
 * __verify_last_avail --
 *     Get the last checkpoint's avail list and load it into the list of file fragments.
 ','line_number':108,'multiline':True]
['text':'
 * __verify_set_file_size --
 *     Set the file size to the last checkpoint's size.
 ','line_number':138,'multiline':True]
['text':'
     * Verify is read-only. Set the block's file size information as if we truncated the file during
     * checkpoint load, so references to blocks after last checkpoint's file size fail.
     ','line_number':161,'multiline':True]
['text':'
 * __wt_block_verify_end --
 *     End file verification.
 ','line_number':173,'multiline':True]
['text':' Confirm we verified every file block. ','line_number':182,'multiline':True]
['text':' Discard the accumulated allocation list. ','line_number':189,'multiline':True]
['text':' Discard the fragment tracking lists. ','line_number':192,'multiline':True]
['text':'
 * __wt_verify_ckpt_load --
 *     Verify work done when a checkpoint is loaded.
 ','line_number':200,'multiline':True]
['text':' Set the maximum file size for this checkpoint. ','line_number':211,'multiline':True]
['text':'
     * Add the root page and disk blocks used to store the extent lists to the list of blocks we've
     * "seen" from the file.
     ','line_number':214,'multiline':True]
['text':'
     * Checkpoint verification is similar to deleting checkpoints. As we read each new checkpoint,
     * we merge the allocation lists (accumulating all allocated pages as we move through the
     * system), and then remove any pages found in the discard list. The result should be a
     * one-to-one mapping to the pages we find in this specific checkpoint.
     ','line_number':231,'multiline':True]
['text':'
     * We don't need the blocks on a checkpoint's avail list, but we read it to ensure it wasn't
     * corrupted. We could confirm correctness of the intermediate avail lists (that is, if they're
     * logically the result of the allocations and discards to this point). We don't because the
     * only avail list ever used is the one for the last checkpoint, which is separately verified by
     * checking it against all of the blocks found in the file.
     ','line_number':252,'multiline':True]
['text':'
     * The root page of the checkpoint appears on the alloc list, but not, at least until the
     * checkpoint is deleted, on a discard list. To handle this case, remove the root page from the
     * accumulated list of checkpoint pages, so it doesn't add a new requirement for subsequent
     * checkpoints.
     ','line_number':265,'multiline':True]
['text':'
     * Allocate the per-checkpoint bit map. The per-checkpoint bit map is the opposite of the
     * per-file bit map, that is, we set all the bits that we expect to be set based on the
     * checkpoint's allocation and discard lists, then clear bits as we verify blocks. When finished
     * verifying the checkpoint, the bit list should be empty.
     ','line_number':275,'multiline':True]
['text':'
 * __wt_verify_ckpt_unload --
 *     Verify work done when a checkpoint is unloaded.
 ','line_number':292,'multiline':True]
['text':' Confirm we verified every checkpoint block. ','line_number':301,'multiline':True]
['text':' Discard the per-checkpoint fragment list. ','line_number':304,'multiline':True]
['text':'
 * __wt_block_verify_addr --
 *     Update an address in a checkpoint as verified.
 ','line_number':310,'multiline':True]
['text':' Crack the cookie. ','line_number':321,'multiline':True]
['text':' Add to the per-file list. ','line_number':325,'multiline':True]
['text':'
     * It's tempting to try and flag a page as "verified" when we read it. That doesn't work because
     * we may visit a page multiple times when verifying a single checkpoint (for example, when
     * verifying the physical image of a row-store leaf page with overflow keys, the overflow keys
     * are read when checking for key sort issues, and read again when more general overflow item
     * checking is done). This function is called by the btree verification code, once per logical
     * visit in a checkpoint, so we can detect if a page is referenced multiple times within a
     * single checkpoint. This doesn't apply to the per-file list, because it is expected for the
     * same btree blocks to appear in multiple checkpoints.
     *
     * Add the block to the per-checkpoint list.
     ','line_number':328,'multiline':True]
['text':'
 * __verify_filefrag_add --
 *     Add the fragments to the per-file fragment list, optionally complain if we've already
 *     verified this chunk of the file.
 ','line_number':345,'multiline':True]
['text':' Check each chunk against the total file size. ','line_number':361,'multiline':True]
['text':' It may be illegal to reference a particular chunk more than once. ','line_number':370,'multiline':True]
['text':' Add fragments to the file's fragment list. ','line_number':377,'multiline':True]
['text':'
 * __verify_filefrag_chk --
 *     Verify we've checked all the fragments in the file.
 ','line_number':383,'multiline':True]
['text':' If there's nothing to verify, it was a fast run. ','line_number':392,'multiline':True]
['text':'
     * It's OK if we have not verified blocks at the end of the file: that happens if the file is
     * truncated during a checkpoint or load or was extended after writing a checkpoint. We should
     * never see unverified blocks anywhere else, though.
     *
     * I'm deliberately testing for a last fragment of 0, it makes no sense there would be no
     * fragments verified, complain if the first fragment in the file wasn't verified.
     ','line_number':396,'multiline':True]
['text':'
     * Check for any other file fragments we haven't verified -- every time we find a bit that's
     * clear, complain. We re-start the search each time after setting the clear bit(s) we found:
     * it's simpler and this isn't supposed to happen a lot.
     ','line_number':410,'multiline':True]
['text':'
 * __verify_ckptfrag_add --
 *     Clear the fragments in the per-checkpoint fragment list, and complain if we've already
 *     verified this chunk of the checkpoint.
 ','line_number':438,'multiline':True]
['text':'
     * Check each chunk against the checkpoint's size, a checkpoint should never reference a block
     * outside of the checkpoint's stored size.
     ','line_number':452,'multiline':True]
['text':' It is illegal to reference a particular chunk more than once. ','line_number':464,'multiline':True]
['text':' Remove fragments from the checkpoint's allocation list. ','line_number':473,'multiline':True]
['text':'
 * __verify_ckptfrag_chk --
 *     Verify we've checked all the fragments in the checkpoint.
 ','line_number':479,'multiline':True]
['text':'
     * The checkpoint fragment memory is only allocated as a checkpoint is successfully loaded;
     * don't check if there's nothing there.
     ','line_number':488,'multiline':True]
['text':'
     * Check for checkpoint fragments we haven't verified -- every time we find a bit that's set,
     * complain. We re-start the search each time after clearing the set bit(s) we found: it's
     * simpler and this isn't supposed to happen a lot.
     ','line_number':495,'multiline':True]
