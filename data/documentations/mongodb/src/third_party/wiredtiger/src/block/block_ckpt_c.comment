['text':'-
 * Copyright (c) 2014-present MongoDB, Inc.
 * Copyright (c) 2008-2014 WiredTiger, Inc.
 *	All rights reserved.
 *
 * See the file LICENSE for redistribution information.
 ','line_number':1,'multiline':True]
['text':'
 * __block_extlist_setup --
 *     Initialize the extent lists in a checkpoint structure.
 ','line_number':14,'multiline':True]
['text':'
 * __block_extlist_reset --
 *     Discard and reinitialize the extent lists in a checkpoint structure
 ','line_number':29,'multiline':True]
['text':'
 * __wt_block_ckpt_init --
 *     Return the address cookie for the root page of a checkpoint. Also initialize extent lists if
 *     we are loading the live checkpoint in a writable file.
 ','line_number':42,'multiline':True]
['text':'
 * __wt_block_checkpoint_load --
 *     Return the address cookie for the root page of a checkpoint. Also initialize its extent lists
 *     if loading the live checkpoint from a writeable file.
 ','line_number':58,'multiline':True]
['text':'
     * Sometimes we don't find a root page (we weren't given a checkpoint, or the checkpoint was
     * empty). In that case we return an empty root address, set that up now.
     ','line_number':72,'multiline':True]
['text':'
     * There's a single checkpoint in the file that can be written, all of the others are read-only.
     * We use the same initialization calls for readonly checkpoints, but the information doesn't
     * persist.
     ','line_number':83,'multiline':True]
['text':'
         * We depend on the btree level for locking: things will go bad fast if we open the live
         * system in two handles, or salvage, truncate or verify the live/running file.
         ','line_number':92,'multiline':True]
['text':'
     * If the checkpoint has an on-disk root page, load it. Otherwise, size the file past the
     * description information.
     ','line_number':107,'multiline':True]
['text':' Crack the checkpoint cookie. ','line_number':114,'multiline':True]
['text':' Verify sets up next. ','line_number':117,'multiline':True]
['text':'
             * FIXME: We may need to change how we setup for verify when it supports tiered tables.
             * Until then, an attempt to verify a tiered table should return before getting here.
             ','line_number':119,'multiline':True]
['text':' Read any root page. ','line_number':127,'multiline':True]
['text':' A checkpoint shouldn't point to an object created after this one. ','line_number':129,'multiline':True]
['text':'
             * The checkpoint address may point to an earlier object. If so, the object backing this
             * block handle doesn't have valid data -- i.e., it must have been written after the
             * checkpoint we are opening. So we discard the incorrect extent lists and reinitialize
             * them to be empty.
             ','line_number':139,'multiline':True]
['text':'
             * Rolling a checkpoint forward requires the avail list, the blocks from which we can
             * allocate.
             ','line_number':148,'multiline':True]
['text':'
     * If the object can be written, that means anything written after the checkpoint is no longer
     * interesting, truncate the file. Don't bother checking the avail list for a block at the end
     * of the file, that was done when the checkpoint was first written (re-writing the checkpoint
     * might possibly make it relevant here, but it's unlikely enough I don't bother).
     ','line_number':156,'multiline':True]
['text':'
         * Don't call checkpoint-unload: unload does real work including file truncation. If we fail
         * early enough that the checkpoint information isn't correct, bad things would happen. The
         * only allocated memory was in the service of verify, clean that up.
         ','line_number':167,'multiline':True]
['text':' Checkpoints don't need the original information, discard it. ','line_number':176,'multiline':True]
['text':'
 * __wt_block_checkpoint_unload --
 *     Unload a checkpoint.
 ','line_number':183,'multiline':True]
['text':' Verify cleanup. ','line_number':192,'multiline':True]
['text':'
     * If it's the live system, truncate to discard any extended blocks and discard the active
     * extent lists. Hold the lock even though we're unloading the live checkpoint, there could be
     * readers active in other checkpoints.
     ','line_number':196,'multiline':True]
['text':'
 * __wt_block_ckpt_destroy --
 *     Clear a checkpoint structure. Free the extent lists, but leave the rest of the state intact
 *     in case the caller is re-using it.
 ','line_number':213,'multiline':True]
['text':'
     * We should hold the live lock here when running on the live checkpoint. But there is no easy
     * way to determine if the checkpoint is live so we cannot assert the locking here.
     ','line_number':221,'multiline':True]
['text':' Discard the extent lists. ','line_number':226,'multiline':True]
['text':'
 * __wt_block_checkpoint_start --
 *     Start a checkpoint.
 ','line_number':235,'multiline':True]
['text':'
 * __wt_block_checkpoint --
 *     Create a new checkpoint.
 ','line_number':263,'multiline':True]
['text':' Switch to first-fit allocation. ','line_number':276,'multiline':True]
['text':'
     * Write the root page: it's possible for there to be a checkpoint of
     * an empty tree, in which case, we store an illegal root offset.
     *
     * !!!
     * We happen to know that checkpoints are single-threaded above us in
     * the btree engine.  That's probably something we want to guarantee
     * for any WiredTiger block manager.
     ','line_number':279,'multiline':True]
['text':'
     * Checkpoints are potentially reading/writing/merging lots of blocks, pre-allocate structures
     * for this thread's use.
     ','line_number':297,'multiline':True]
['text':' Process the checkpoint list, deleting and updating as required. ','line_number':303,'multiline':True]
['text':' Discard any excessive memory we've allocated. ','line_number':306,'multiline':True]
['text':' Restore the original allocation plan. ','line_number':309,'multiline':True]
['text':'
 * __ckpt_extlist_read --
 *     Read a checkpoint's extent lists.
 ','line_number':316,'multiline':True]
['text':' Default to a local file. ','line_number':325,'multiline':True]
['text':'
     * Allocate a checkpoint structure, crack the cookie and read the checkpoint's extent lists.
     *
     * Ignore the avail list: checkpoint avail lists are only useful if we are rolling forward from
     * the particular checkpoint and they represent our best understanding of what blocks can be
     * allocated. If we are not operating on the live checkpoint, subsequent checkpoints might have
     * allocated those blocks, and the avail list is useless. We don't discard it, because it is
     * useful as part of verification, but we don't re-write it either.
     ','line_number':328,'multiline':True]
['text':' Extent lists from non-local objects aren't useful, we're going to skip them. ','line_number':343,'multiline':True]
['text':'
 * __ckpt_extlist_fblocks --
 *     If a checkpoint's extent list is going away, free its blocks.
 ','line_number':355,'multiline':True]
['text':'
     * Free blocks used to write checkpoint extents into the live system's checkpoint avail list
     * (they were never on any alloc list). Do not use the live system's avail list because that
     * list is used to decide if the file can be truncated, and we can't truncate any part of the
     * file that contains a previous checkpoint's extents.
     ','line_number':365,'multiline':True]
['text':'
 * __ckpt_verify --
 *     Diagnostic code, confirm we get what we expect in the checkpoint array.
 ','line_number':374,'multiline':True]
['text':'
     * Fast check that we're seeing what we expect to see: some number of checkpoints to add, delete
     * or ignore, terminated by a new checkpoint.
     ','line_number':383,'multiline':True]
['text':' FALLTHROUGH ','line_number':398,'multiline':True]
['text':'
 * __ckpt_add_blkmod_entry --
 *     Add an offset/length entry to the bitstring based on granularity.
 ','line_number':405,'multiline':True]
['text':'
     * Figure out the starting and ending locations in the bitmap based on its granularity and our
     * offset and length. The bit locations are zero-based; be careful translating to sizes.
     ','line_number':417,'multiline':True]
['text':' We want to grow the bitmap by 64 bits, or 8 bytes at a time. ','line_number':424,'multiline':True]
['text':'
     * We are doing a lot of shifting. Make sure that the number of bytes we end up with is a
     * multiple of eight. We guarantee that in the rounding up call, but also make sure that the
     * constant stays a multiple of eight.
     ','line_number':428,'multiline':True]
['text':' If we don't have enough, extend the buffer. ','line_number':435,'multiline':True]
['text':' Make sure we're not going to run past the end of the bitmap ','line_number':447,'multiline':True]
['text':' Set all the bits needed to record this offset/length pair. ','line_number':450,'multiline':True]
['text':'
 * __ckpt_add_blk_mods_alloc --
 *     Add the checkpoint's allocated blocks to all valid incremental backup source identifiers.
 ','line_number':455,'multiline':True]
['text':' If this is not the live checkpoint or we don't care about incremental blocks, we're done. ','line_number':475,'multiline':True]
['text':' If there is no information at this entry, we're done. ','line_number':480,'multiline':True]
['text':'
 * __ckpt_add_blk_mods_ext --
 *     Add a set of extent blocks to all valid incremental backup source identifiers.
 ','line_number':494,'multiline':True]
['text':' If this is not the live checkpoint or we don't care about incremental blocks, we're done. ','line_number':509,'multiline':True]
['text':' If there is no information at this entry, we're done. ','line_number':514,'multiline':True]
['text':'
 * __ckpt_process --
 *     Process the list of checkpoints.
 ','line_number':528,'multiline':True]
['text':'
     * Checkpoints are a two-step process: first, write a new checkpoint to disk (including all the
     * new extent lists for modified checkpoints and the live system). As part of this, create a
     * list of file blocks newly available for reallocation, based on checkpoints being deleted. We
     * then return the locations of the new checkpoint information to our caller. Our caller has to
     * write that information into some kind of stable storage, and once that's done, we can
     * actually allocate from that list of newly available file blocks. (We can't allocate from that
     * list immediately because the allocation might happen before our caller saves the new
     * checkpoint information, and if we crashed before the new checkpoint location was saved, we'd
     * have overwritten blocks still referenced by checkpoints in the system.) In summary, there is
     * a second step: after our caller saves the checkpoint information, we are called to add the
     * newly available blocks into the live system's available list.
     *
     * This function is the first step, the second step is in the resolve function.
     *
     * If we're called to checkpoint the same file twice (without the second resolution step), or
     * re-entered for any reason, it's an error in our caller, and our choices are all bad: leak
     * blocks or potentially crash with our caller not yet having saved previous checkpoint
     * information to stable storage.
     ','line_number':547,'multiline':True]
['text':' Salvage doesn't use the standard checkpoint APIs. ','line_number':581,'multiline':True]
['text':'
     * Extents newly available as a result of deleting previous checkpoints are added to a list of
     * extents. The list should be empty, but as described above, there is no "free the checkpoint
     * information" call into the block manager; if there was an error in an upper level that
     * resulted in some previous checkpoint never being resolved, the list may not be empty. We
     * should have caught that with the "checkpoint in progress" test, but it doesn't cost us
     * anything to be cautious.
     *
     * We free the checkpoint's allocation and discard extent lists as part of the resolution step,
     * not because they're needed at that time, but because it's potentially a lot of work, and
     * waiting allows the btree layer to continue eviction sooner. As for the checkpoint-available
     * list, make sure they get cleaned out.
     ','line_number':587,'multiline':True]
['text':'
     * To delete a checkpoint, we need checkpoint information for it and the subsequent checkpoint
     * into which it gets rolled; read them from disk before we lock things down.
     ','line_number':605,'multiline':True]
['text':'
         * Read the checkpoint and next checkpoint extent lists if we haven't already read them (we
         * may have already read these extent blocks if there is more than one deleted checkpoint).
         *
         * We can only delete checkpoints in the current file. Checkpoints of tiered storage objects
         * are checkpoints for the logical object, including files that are no longer live. Skip any
         * checkpoints that aren't local to the live object.
         ','line_number':614,'multiline':True]
['text':'
         * The "next" checkpoint may be the live tree which has no extent blocks to read.
         ','line_number':634,'multiline':True]
['text':'
     * Failures are now fatal: we can't currently back out the merge of any deleted checkpoint
     * extent lists into the live system's extent lists, so continuing after error would leave the
     * live system's extent lists corrupted for any subsequent checkpoint (and potentially, should a
     * subsequent checkpoint succeed, for recovery).
     ','line_number':644,'multiline':True]
['text':'
     * Hold a lock so the live extent lists and the file size can't change underneath us. I suspect
     * we'll tighten this if checkpoints take too much time away from real work: we read the
     * historic checkpoint information without a lock, but we could also merge and re-write the
     * deleted and merged checkpoint information without a lock, except for the final merge of
     * ranges into the live tree.
     ','line_number':652,'multiline':True]
['text':'
     * We've allocated our last page, update the checkpoint size. We need to calculate the live
     * system's checkpoint size before merging checkpoint allocation and discard information from
     * the checkpoints we're deleting, those operations change the underlying byte counts.
     ','line_number':661,'multiline':True]
['text':'
     * Record the checkpoint's allocated blocks. Do so before skipping any processing and before
     * possibly merging in blocks from any previous checkpoint.
     ','line_number':670,'multiline':True]
['text':' Skip the additional processing if we aren't deleting checkpoints. ','line_number':676,'multiline':True]
['text':'
     * Delete any no-longer-needed checkpoints: we do this first as it frees blocks to the live
     * lists, and the freed blocks will then be included when writing the live extent lists.
     ','line_number':680,'multiline':True]
['text':'
         * Set the "from" checkpoint structure. If it applies to a previous object, there's nothing
         * more to do.
         ','line_number':688,'multiline':True]
['text':'
         * Find the checkpoint into which we'll roll this checkpoint's blocks: it's the next real
         * checkpoint in the list, and it better have been read in (if it's not the add slot).
         ','line_number':699,'multiline':True]
['text':'
         * Set the "to" checkpoint structure, it may be the live tree.
         ','line_number':707,'multiline':True]
['text':'
         * Free the root page: there's nothing special about this free, the root page is allocated
         * using normal rules, that is, it may have been taken from the avail list, and was entered
         * on the live system's alloc list at that time. We free it into the checkpoint's discard
         * list, however, not the live system's list because it appears on the checkpoint's alloc
         * list and so must be paired in the checkpoint.
         ','line_number':715,'multiline':True]
['text':'
         * Free the blocks used to hold the "from" checkpoint's extent lists, including the avail
         * list.
         ','line_number':726,'multiline':True]
['text':'
         * Roll the "from" alloc and discard extent lists into the "to" checkpoint's lists.
         ','line_number':734,'multiline':True]
['text':'
         * If the "to" checkpoint is also being deleted, we're done with it, it's merged into some
         * other checkpoint in the next loop. This means the extent lists may aggregate over a
         * number of checkpoints, but that's OK, they're disjoint sets of ranges.
         ','line_number':742,'multiline':True]
['text':'
         * Find blocks for re-use: wherever the "to" checkpoint's allocate and discard lists
         * overlap, move the range to the live system's checkpoint available list.
         ','line_number':750,'multiline':True]
['text':'
         * If we're updating the live system's information, we're done.
         ','line_number':756,'multiline':True]
['text':'
         * We have to write the "to" checkpoint's extent lists out in new blocks, and update its
         * cookie.
         *
         * Free the blocks used to hold the "to" checkpoint's extent lists; don't include the avail
         * list, it's not changing.
         ','line_number':762,'multiline':True]
['text':' Update checkpoints marked for update. ','line_number':775,'multiline':True]
['text':' Truncate the file if that's possible. ','line_number':781,'multiline':True]
['text':' Update the final, added checkpoint based on the live system. ','line_number':784,'multiline':True]
['text':'
             * !!!
             * Our caller wants the final checkpoint size. Setting the size here violates layering,
             * but the alternative is a call for the btree layer to crack the checkpoint cookie into
             * its components, and that's a fair amount of work.
             ','line_number':787,'multiline':True]
['text':'
             * Set the rolling checkpoint size for the live system. The current size includes the
             * current checkpoint's root page size (root pages are on the checkpoint's block
             * allocation list as root pages are allocated with the usual block allocation
             * functions). That's correct, but we don't want to include it in the size for the next
             * checkpoint.
             ','line_number':795,'multiline':True]
['text':'
             * Additionally, we had a bug for awhile where the live checkpoint size grew without
             * bound. We can't sanity check the value, that would require walking the tree as part
             * of the checkpoint. Bound any bug at the size of the file. It isn't practical to
             * assert that the value is within bounds since databases created with older versions of
             * WiredTiger (2.8.0) would likely see an error.
             ','line_number':804,'multiline':True]
['text':'
     * Reset the live system's alloc and discard extent lists, leave the avail list alone. This
     * includes freeing a lot of extents, so do it outside of the system's lock by copying and
     * resetting the original, then doing the work later.
     ','line_number':816,'multiline':True]
['text':'
     * The first checkpoint in the system should always have an empty discard list. If we've read
     * that checkpoint and/or created it, check.
     ','line_number':827,'multiline':True]
['text':' Discard any checkpoint information we loaded. ','line_number':849,'multiline':True]
['text':'
 * __ckpt_update --
 *     Update a checkpoint.
 ','line_number':857,'multiline':True]
['text':' Check the extent list combinations for overlaps. ','line_number':875,'multiline':True]
['text':'
     * Write the checkpoint's alloc and discard extent lists. Note these blocks never appear on the
     * system's allocation list, checkpoint extent blocks don't appear on any extent lists.
     ','line_number':880,'multiline':True]
['text':'
     * If this is the final block, we append an incomplete copy of the checkpoint information to the
     * avail list for standalone retrieval.
     ','line_number':887,'multiline':True]
['text':'
         * Copy the INCOMPLETE checkpoint information into the checkpoint.
         ','line_number':892,'multiline':True]
['text':'
         * Convert the INCOMPLETE checkpoint array into its metadata representation. This must match
         * what is eventually written into the metadata file, in other words, everything must be
         * initialized before the block manager does the checkpoint.
         ','line_number':900,'multiline':True]
['text':'
     * We only write an avail list for the live system, other checkpoint's avail lists are static
     * and never change.
     *
     * Write the avail list last so it reflects changes due to allocating blocks for the alloc and
     * discard lists. Second, when we write the live system's avail list, it's two lists: the
     * current avail list plus the list of blocks to be made available when the new checkpoint
     * completes. We can't merge that second list into the real list yet, it's not truly available
     * until the new checkpoint locations have been saved to the metadata.
     ','line_number':913,'multiline':True]
['text':'
     * Record the blocks allocated to write the extent lists. We must record blocks in the live
     * system's extent lists, as those blocks are a necessary part of the checkpoint a hot backup
     * might recover. Update blocks in extent lists used to rewrite other checkpoints (for example,
     * an intermediate checkpoint rewritten because a checkpoint was rolled into it), even though
     * it's not necessary: those blocks aren't the last checkpoint in the file and so aren't
     * included in a recoverable checkpoint, they don't matter on a hot backup target until they're
     * allocated and used in the context of a live system. Regardless, they shouldn't materially
     * affect how much data we're writing, and it keeps things more consistent on the target to
     * update them. (Ignore the live system's ckpt_avail list here. The blocks on that list were
     * written into the final avail extent list which will be copied to the hot backup, and that's
     * all that matters.)
     ','line_number':930,'multiline':True]
['text':'
     * Set the file size for the live system.
     *
     * !!!
     * We do NOT set the file size when re-writing checkpoints because we want to test the
     * checkpoint's blocks against a reasonable maximum file size during verification. This is bad:
     * imagine a checkpoint appearing early in the file, re-written, and then the checkpoint
     * requires blocks at the end of the file, blocks after the listed file size. If the application
     * opens that checkpoint for writing (discarding subsequent checkpoints), we would truncate the
     * file to the early chunk, discarding the re-written checkpoint information. The alternative,
     * updating the file size has its own problems, in that case we'd work correctly, but we'd lose
     * all of the blocks between the original checkpoint and the re-written checkpoint. Currently,
     * there's no API to roll-forward intermediate checkpoints, if there ever is, this will need to
     * be fixed.
     ','line_number':945,'multiline':True]
['text':' Copy the COMPLETE checkpoint information into the checkpoint. ','line_number':963,'multiline':True]
['text':'
 * __wt_block_checkpoint_resolve --
 *     Resolve a checkpoint.
 ','line_number':975,'multiline':True]
['text':'
     * Resolve the checkpoint after our caller has written the checkpoint information to stable
     * storage.
     ','line_number':987,'multiline':True]
['text':' Something went wrong, but it's recoverable at our level. ','line_number':994,'multiline':True]
['text':' Discard the lists remaining after the checkpoint call. ','line_number':1021,'multiline':True]
