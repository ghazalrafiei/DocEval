['text':'-
 * Copyright (c) 2014-present MongoDB, Inc.
 * Copyright (c) 2008-2014 WiredTiger, Inc.
 *	All rights reserved.
 *
 * See the file LICENSE for redistribution information.
 ','line_number':1,'multiline':True]
['text':'
 * __wt_block_truncate --
 *     Truncate the file.
 ','line_number':11,'multiline':True]
['text':'
     * Truncate requires serialization, we depend on our caller for that.
     *
     * Truncation isn't a requirement of the block manager, it's only used to conserve disk space.
     * Regardless of the underlying file system call's result, the in-memory understanding of the
     * file size changes.
     ','line_number':25,'multiline':True]
['text':'
     * Backups are done by copying files outside of WiredTiger, potentially by system utilities. We
     * cannot truncate the file during the backup window, we might surprise an application.
     *
     * This affects files that aren't involved in the backup (for example, doing incremental
     * backups, which only copies log files, or targeted backups, stops all block truncation
     * unnecessarily). We may want a more targeted solution at some point.
     ','line_number':34,'multiline':True]
['text':'
     * The truncate may fail temporarily or permanently (for example, there may be a file mapping if
     * there's an open checkpoint on the file on a POSIX system, in which case the underlying
     * function returns EBUSY). It's OK, we don't have to be able to truncate files.
     ','line_number':45,'multiline':True]
['text':'
 * __wt_block_discard --
 *     Discard blocks from the system buffer cache.
 ','line_number':53,'multiline':True]
['text':' The file may not support this call. ','line_number':63,'multiline':True]
['text':' The call may not be configured. ','line_number':68,'multiline':True]
['text':'
     * We're racing on the addition, but I'm not willing to serialize on it in the standard read
     * path without evidence it's needed.
     ','line_number':72,'multiline':True]
['text':'
 * __block_extend --
 *     Extend the file.
 ','line_number':85,'multiline':True]
['text':'
     * The locking in this function is messy: by definition, the live system is locked when we're
     * called, but that lock may have been acquired by our caller or our caller's caller. If our
     * caller's lock, release_lock comes in set and this function can unlock it before returning (so
     * it isn't held while extending the file). If it is our caller's caller, then release_lock
     * comes in not set, indicating it cannot be released here.
     *
     * If we unlock here, we clear release_lock.
     ','line_number':98,'multiline':True]
['text':' If not configured to extend the file, we're done. ','line_number':108,'multiline':True]
['text':'
     * Extend the file in chunks. We want to limit the number of threads extending the file at the
     * same time, so choose the one thread that's crossing the extended boundary. We don't extend
     * newly created files, and it's theoretically possible we might wait so long our extension of
     * the file is passed by another thread writing single blocks, that's why there's a check in
     * case the extended file size becomes too small: if the file size catches up, every thread
     * tries to extend it.
     ','line_number':112,'multiline':True]
['text':'
     * File extension may require locking: some variants of the system call used to extend the file
     * initialize the extended space. If a writing thread races with the extending thread, the
     * extending thread might overwrite already written data, and that would be very, very bad.
     ','line_number':125,'multiline':True]
['text':'
     * Set the extend_size before releasing the lock, I don't want to read and manipulate multiple
     * values without holding a lock.
     *
     * There's a race between the calculation and doing the extension, but it should err on the side
     * of extend_size being smaller than the actual file size, and that's OK, we simply may do
     * another extension sooner than otherwise.
     ','line_number':134,'multiline':True]
['text':'
     * Release any locally acquired lock if not needed to extend the file, extending the file may
     * require updating on-disk file's metadata, which can be slow. (It may be a bad idea to
     * configure for file extension on systems that require locking over the extend call.)
     ','line_number':144,'multiline':True]
['text':'
     * The extend might fail (for example, the file is mapped into memory or a backup is in
     * progress), or discover file extension isn't supported; both are OK.
     ','line_number':154,'multiline':True]
['text':'
 * __wt_block_write_size --
 *     Return the buffer size required to write a block.
 ','line_number':164,'multiline':True]
['text':'
     * We write the page size, in bytes, into the block's header as a 4B unsigned value, and it's
     * possible for the engine to accept an item we can't write. For example, a huge key/value where
     * the allocation size has been set to something large will overflow 4B when it tries to align
     * the write. We could make this work (for example, writing the page size in units of allocation
     * size or something else), but it's not worth the effort, writing 4GB objects into a btree
     * makes no sense. Limit the writes to (4GB - 1KB), it gives us potential mode bits, and I'm not
     * interested in debugging corner cases anyway.
     ','line_number':173,'multiline':True]
['text':'
 * __wt_block_write --
 *     Write a buffer into a block, returning the block's address cookie.
 ','line_number':186,'multiline':True]
['text':'
 * __block_write_off --
 *     Write a buffer into a block, returning the block's offset, size and checksum.
 ','line_number':208,'multiline':True]
['text':' -Werror=maybe-uninitialized ','line_number':225,'multiline':True]
['text':' -Werror=maybe-uninitialized ','line_number':226,'multiline':True]
['text':' -Werror=maybe-uninitialized ','line_number':227,'multiline':True]
['text':' Buffers should be aligned for writing. ','line_number':231,'multiline':True]
['text':'
     * File checkpoint/recovery magic: done before sizing the buffer as it may grow the buffer.
     ','line_number':237,'multiline':True]
['text':'
     * Align the size to an allocation unit.
     *
     * The buffer must be big enough for us to zero to the next allocsize boundary, this is one of
     * the reasons the btree layer must find out from the block-manager layer the maximum size of
     * the eventual write.
     ','line_number':243,'multiline':True]
['text':' Pre-allocate some number of extension structures. ','line_number':260,'multiline':True]
['text':'
     * Acquire a lock, if we don't already hold one. Allocate space for the write, and optionally
     * extend the file (note the block-extend function may release the lock). Release any locally
     * acquired lock.
     ','line_number':263,'multiline':True]
['text':'
     * The file has finished changing size. If this is the final write in a checkpoint, update the
     * checkpoint's information inline.
     ','line_number':280,'multiline':True]
['text':' Zero out any unused bytes at the end of the buffer. ','line_number':287,'multiline':True]
['text':'
     * Clear the block header to ensure all of it is initialized, even the unused fields.
     ','line_number':290,'multiline':True]
['text':'
     * Set the disk size so we don't have to incrementally read blocks during salvage.
     ','line_number':296,'multiline':True]
['text':'
     * Update the block's checksum: checksum the complete data if our caller specifies, otherwise
     * checksum the leading WT_BLOCK_COMPRESS_SKIP bytes. Applications with a compression or
     * encryption engine that includes checksums won't need a separate checksum. However, if the
     * block was too small for compression, or compression failed to shrink the block, the block
     * wasn't compressed, in which case our caller will tell us to checksum the data. If skipping
     * checksums because of compression or encryption, we still need to checksum the first
     * WT_BLOCK_COMPRESS_SKIP bytes because they're not compressed or encrypted, both to give
     * salvage a quick test of whether a block is useful and to give us a test so we don't lose the
     * first WT_BLOCK_COMPRESS_SKIP bytes without noticing.
     *
     * Checksum a little-endian version of the header, and write everything in little-endian format.
     * The checksum is (potentially) returned in a big-endian format, swap it into place in a
     * separate step.
     ','line_number':301,'multiline':True]
['text':' Write the block. ','line_number':327,'multiline':True]
['text':'
     * Optionally schedule writes for dirty pages in the system buffer cache, but only if the
     * current session can wait.
     ','line_number':337,'multiline':True]
['text':'
             * Ignore ENOTSUP, but don't try again.
             ','line_number':345,'multiline':True]
['text':' Optionally discard blocks from the buffer cache. ','line_number':354,'multiline':True]
['text':'
 * __wt_block_write_off --
 *     Write a buffer into a block, returning the block's offset, size and checksum.
 ','line_number':373,'multiline':True]
['text':'
     * Ensure the page header is in little endian order; this doesn't belong here, but it's the best
     * place to catch all callers. After the write, swap values back to native order so callers
     * never see anything other than their original content.
     ','line_number':383,'multiline':True]
