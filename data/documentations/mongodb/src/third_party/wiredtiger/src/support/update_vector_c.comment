['text':'-
 * Copyright (c) 2014-present MongoDB, Inc.
 * Copyright (c) 2008-2014 WiredTiger, Inc.
 *	All rights reserved.
 *
 * See the file LICENSE for redistribution information.
 ','line_number':1,'multiline':True]
['text':'
 * __wt_update_vector_init --
 *     Initialize a update vector.
 ','line_number':11,'multiline':True]
['text':'
 * __wt_update_vector_push --
 *     Push a update pointer to a update vector. If we exceed the allowed stack space in the vector,
 *     we'll be doing malloc here.
 ','line_number':23,'multiline':True]
['text':'
     * This only happens when we're migrating from the stack to the heap but failed to allocate. In
     * that case, point back to the stack allocated memory and set the allocation to zero to
     * indicate that we don't have heap memory to free.
     *
     * If we're already on the heap, we have nothing to do. The realloc call above won't touch the
     * list pointer unless allocation is successful and we won't have incremented the size yet.
     ','line_number':50,'multiline':True]
['text':'
 * __wt_update_vector_pop --
 *     Pop an update pointer off a update vector.
 ','line_number':66,'multiline':True]
['text':'
 * __wt_update_vector_peek --
 *     Peek an update pointer off a update vector.
 ','line_number':78,'multiline':True]
['text':'
 * __wt_update_vector_clear --
 *     Clear a update vector.
 ','line_number':90,'multiline':True]
['text':'
 * __wt_update_vector_free --
 *     Free any resources associated with a update vector. If we exceeded the allowed stack space on
 *     the vector and had to fallback to dynamic allocations, we'll be doing a free here.
 ','line_number':100,'multiline':True]
