['text':'-
 * Copyright (c) 2014-present MongoDB, Inc.
 * Copyright (c) 2008-2014 WiredTiger, Inc.
 *	All rights reserved.
 *
 * See the file LICENSE for redistribution information.
 ','line_number':1,'multiline':True]
['text':'
 * __wt_buf_grow_worker --
 *     Grow a buffer that may be in-use, and ensure that all data is local to the buffer.
 ','line_number':11,'multiline':True]
['text':'
     * Maintain the existing data: there are 3 cases:
     *
     * 1. No existing data: allocate the required memory, and initialize the data to reference it.
     * 2. Existing data local to the buffer: set the data to the same offset in the re-allocated
     *    memory. The offset in this case is likely a read of an overflow item, the data pointer
     *    is offset in the buffer in order to skip over the leading data block page header. For
     *    the same reason, take any offset in the buffer into account when calculating the size
     *    to allocate, it saves complex calculations in our callers to decide if the buffer is large
     *    enough in the case of buffers with offset data pointers.
     * 3. Existing data not-local to the buffer: copy the data into the buffer and set the data to
     *    reference it.
     *
     * Take the offset of the data pointer in the buffer when calculating the size
     * needed, overflow items use the data pointer to skip the leading data block page header
     ','line_number':22,'multiline':True]
['text':'
     * This function is also used to ensure data is local to the buffer, check to see if we actually
     * need to grow anything.
     ','line_number':47,'multiline':True]
['text':'
             * It's easy to corrupt memory if you pass in the wrong size for the final buffer size,
             * which is harder to debug than this assert.
             ','line_number':63,'multiline':True]
['text':'
         * There's an edge case where our caller initializes the item to zero bytes, for example if
         * there's no configuration value and we're setting the item to reference it. In which case
         * we never allocated memory and buf.mem == NULL. Handle the case explicitly to avoid
         * sanitizer errors and let the caller continue. It's an error in the caller, but unless
         * caller assumes buf.data points into buf.mem, there shouldn't be a subsequent failure, the
         * item is consistent.
         ','line_number':71,'multiline':True]
['text':'
 * __wt_buf_fmt --
 *     Grow a buffer to accommodate a formatted string.
 ','line_number':85,'multiline':True]
['text':'
 * __wt_buf_catfmt --
 *     Grow a buffer to append a formatted string.
 ','line_number':101,'multiline':True]
['text':'
     * If we're appending data to an existing buffer, any data field should point into the allocated
     * memory. (It wouldn't be insane to copy any previously existing data at this point, if data
     * wasn't in the local buffer, but we don't and it would be bad if we didn't notice it.)
     ','line_number':111,'multiline':True]
['text':'
 * __wt_buf_set_printable --
 *     Set the contents of the buffer to a printable representation of a byte string.
 ','line_number':124,'multiline':True]
['text':'
 * __wt_buf_set_printable_format --
 *     Set the contents of the buffer to a printable representation of a byte string, based on a
 *     format.
 ','line_number':146,'multiline':True]
['text':'
     * The byte string may not match the format (it happens if a formatted, internal row-store key
     * is truncated, and then passed here by a page debugging routine). Our current callers aren't
     * interested in error handling in such cases, return a byte string instead.
     ','line_number':218,'multiline':True]
['text':'
 * __wt_buf_set_size --
 *     Set the contents of the buffer to a printable representation of a byte size.
 ','line_number':226,'multiline':True]
['text':'
 * __wt_scr_alloc_func --
 *     Scratch buffer allocation function.
 ','line_number':260,'multiline':True]
['text':' Don't risk the caller not catching the error. ','line_number':277,'multiline':True]
['text':'
     * Each WT_SESSION_IMPL has an array of scratch buffers available for use by any function. We
     * use WT_ITEM structures for scratch memory because we already have functions that do
     * variable-length allocation on a WT_ITEM. Scratch buffers are allocated only by a single
     * thread of control, so no locking is necessary.
     *
     * Walk the array, looking for a buffer we can use.
     ','line_number':280,'multiline':True]
['text':' If we find an empty slot, remember it. ','line_number':289,'multiline':True]
['text':'
         * If we find a buffer that's not in-use, check its size: we want the smallest buffer larger
         * than the requested size, or the largest buffer if none are large enough.
         ','line_number':299,'multiline':True]
['text':' If we find a perfect match, use it. ','line_number':307,'multiline':True]
['text':'
     * If we didn't find a free buffer, extend the array and use the first slot we allocated.
     ','line_number':312,'multiline':True]
['text':'
     * If slot is non-NULL, we found an empty slot, try to allocate a buffer.
     ','line_number':328,'multiline':True]
['text':' Scratch buffers must be aligned. ','line_number':337,'multiline':True]
['text':' Grow the buffer as necessary and return. ','line_number':341,'multiline':True]
['text':'
 * __wt_scr_discard --
 *     Free all memory associated with the scratch buffers.
 ','line_number':358,'multiline':True]
['text':'
 * __wt_ext_scr_alloc --
 *     Allocate a scratch buffer, and return the memory reference.
 ','line_number':392,'multiline':True]
['text':'
 * __wt_ext_scr_free --
 *     Free a scratch buffer based on the memory reference.
 ','line_number':408,'multiline':True]
['text':'
             * Do NOT call __wt_scr_free() here, it clears the caller's pointer, which would
             * truncate the list.
             ','line_number':424,'multiline':True]
