['text':'-
 * Copyright (c) 2014-present MongoDB, Inc.
 * Copyright (c) 2008-2014 WiredTiger, Inc.
 *	All rights reserved.
 *
 * See the file LICENSE for redistribution information.
 ','line_number':1,'multiline':True]
['text':' Define the string representation of each verbose category. ','line_number':11,'multiline':True]
['text':'
 * __handle_error_default --
 *     Default WT_EVENT_HANDLER->handle_error implementation: send to stderr.
 ','line_number':14,'multiline':True]
['text':'
 * __handle_message_default --
 *     Default WT_EVENT_HANDLER->handle_message implementation: send to stdout.
 ','line_number':34,'multiline':True]
['text':'
 * __handle_progress_default --
 *     Default WT_EVENT_HANDLER->handle_progress implementation: ignore.
 ','line_number':51,'multiline':True]
['text':'
 * __handle_close_default --
 *     Default WT_EVENT_HANDLER->handle_close implementation: ignore.
 ','line_number':67,'multiline':True]
['text':'
 * __handle_general_default --
 *     Default WT_EVENT_HANDLER->handle_general implementation: ignore.
 ','line_number':81,'multiline':True]
['text':'
 * __handler_failure --
 *     Report the failure of an application-configured event handler.
 ','line_number':101,'multiline':True]
['text':'
     * !!!
     * SECURITY:
     * Buffer placed at the end of the stack in case snprintf overflows.
     ','line_number':111,'multiline':True]
['text':'
     * Use the error handler to report the failure, unless it was the error handler that failed. If
     * it was the error handler that failed, or a call to the error handler fails, use the default
     * error handler.
     ','line_number':122,'multiline':True]
['text':'
     * In case there is a failure in the default error handler, make sure we don't recursively try
     * to report *that* error.
     ','line_number':133,'multiline':True]
['text':'
 * __wt_event_handler_set --
 *     Set an event handler, fill in any NULL methods with the defaults.
 ','line_number':142,'multiline':True]
['text':'
 * __eventv_stderr --
 *     Report a message on stderr.
 ','line_number':165,'multiline':True]
['text':'
 * __eventv_append_error --
 *     Append the error message into a buffer (non-JSON version).
 ','line_number':187,'multiline':True]
['text':'
     * When the engine calls __wt_err on error, it often outputs an error message including the
     * string associated with the error it's returning. We could change the calls to call __wt_errx,
     * but it's simpler to not append an error string if all we are doing is duplicating an existing
     * error string.
     *
     * Use strcmp to compare: both strings are nul-terminated, and we don't want to run past the end
     * of the buffer.
     ','line_number':196,'multiline':True]
['text':' Include the trailing nul string copy will copy. ','line_number':208,'multiline':True]
['text':' Don't include the trailing null string copy copied. ','line_number':212,'multiline':True]
['text':'
 * __eventv --
 *     Report a message to an event handler.
 ','line_number':227,'multiline':True]
['text':' SECURITY: Message buffer placed at the end of the stack in case snprintf overflows. ','line_number':248,'multiline':True]
['text':'
     * This function MUST handle a NULL WT_SESSION_IMPL handle.
     *
     * Without a session, we don't have event handlers or prefixes for the error message. Write the
     * error to stderr and call it a day. (It's almost impossible for that to happen given how early
     * we allocate the first session, but if the allocation of the first session fails, for example,
     * we can end up here without a session.)
     ','line_number':251,'multiline':True]
['text':'
     * Format the message into the stack buffer. If the message is too large, allocate memory and
     * try again. If that fails, fallback to stderr. Any message prefix is expected to fit in the
     * stack buffer. It's possible for it not to (imagine WT_SESSION.error_prefix pointing to a
     * 100K buffer), but we don't try to handle that, if the prefix won't fit, we immediately fall
     * back to stderr. Failure paths require a copy of the argument list.
     ','line_number':262,'multiline':True]
['text':' Timestamp and thread id. ','line_number':277,'multiline':True]
['text':' Error prefix. ','line_number':289,'multiline':True]
['text':' Session dhandle name. ','line_number':297,'multiline':True]
['text':' Session name. ','line_number':306,'multiline':True]
['text':' Category and verbosity level. ','line_number':317,'multiline':True]
['text':' Message. ','line_number':323,'multiline':True]
['text':' Format the message into a scratch buffer, growing it if necessary. ','line_number':329,'multiline':True]
['text':'
             * We're about to read the copied argument list, so we can't fall back to stderr if the
             * call fails. That shouldn't happen and handling it requires two copies of the argument
             * list, so I'm not going to do the work; don't drop core no matter what (and a static
             * analyzer might figure it out).
             ','line_number':335,'multiline':True]
['text':' Allocate a scratch buffer (known to be large enough), and JSON encode the message. ','line_number':348,'multiline':True]
['text':' Append the rest of the message to the JSON buffer (we allocated extra space for it). ','line_number':353,'multiline':True]
['text':'
         * If we can append the message and error information into the original message buffer, do
         * so. Otherwise, grow the tmp buffer and copy both the message prefix and the JSON encoded
         * message into it.
         ','line_number':366,'multiline':True]
['text':' Category and verbosity level. ','line_number':382,'multiline':True]
['text':' Format the message into the stack buffer. ','line_number':391,'multiline':True]
['text':' If there wasn't enough room, format the message into allocated memory. ','line_number':403,'multiline':True]
['text':'
             * We're about to read the copied argument list, so we can't fall back to stderr if the
             * call fails. That shouldn't happen and handling it requires two copies of the argument
             * list, so I'm not going to do the work; don't drop core no matter what (and a static
             * analyzer might figure it out).
             ','line_number':410,'multiline':True]
['text':' Shouldn't happen unless the format and arguments somehow changed. ','line_number':426,'multiline':True]
['text':'
     * If a handler fails, return the error status: if we're in the process of handling an error,
     * any return value we provide will be ignored by our caller, our caller presumably already has
     * an error value it will be returning.
     *
     * If an application-specified or default informational message handler fails, complain using
     * the application-specified or default error handler.
     *
     * If an application-specified error message handler fails, complain using the default error
     * handler. If the default error handler fails, fallback to stderr.
     ','line_number':432,'multiline':True]
['text':'
 * __wt_err_func --
 *     Report an error.
 ','line_number':467,'multiline':True]
['text':'
     * Ignore error returns from underlying event handlers, we already have an error value to
     * return.
     ','line_number':478,'multiline':True]
['text':'
 * __wt_errx_func --
 *     Report an error with no error code.
 ','line_number':489,'multiline':True]
['text':'
     * Ignore error returns from underlying event handlers, we already have an error value to
     * return.
     ','line_number':500,'multiline':True]
['text':'
 * __wt_panic_func --
 *     A standard error message when we panic.
 ','line_number':511,'multiline':True]
['text':'
     * !!!
     * This function MUST handle a NULL WT_SESSION_IMPL handle.
     *
     * We will pedantically check the session and connection handles any time we use them.
     ','line_number':523,'multiline':True]
['text':'
     * Ignore error returns from underlying event handlers, we already have an error value to
     * return.
     ','line_number':531,'multiline':True]
['text':' If the connection has already panicked, just return the error. ','line_number':541,'multiline':True]
['text':'
     * Call the error callback function before setting the connection's panic flag, so applications
     * can trace the failing thread before being flooded with panic returns from API calls. Using
     * the variable-arguments list from the current call even thought the format doesn't need it as
     * I'm not confident of underlying support for a NULL.
     ','line_number':545,'multiline':True]
['text':'
     * In the diagnostic builds, we want to drop core in case of panics that are not due to data
     * corruption. A core could be useful in debugging.
     *
     * In the case of corruption, we want to be able to test the application's capability to salvage
     * by returning an error code. But we do not want to lose the ability to drop core if required.
     * Hence in the diagnostic mode, the application can set the debug flag to choose between
     * dropping a core and returning an error.
     ','line_number':558,'multiline':True]
['text':'
 * When unit testing assertions we want to be able to fire them and continue running the test, but
 * setting the WT_PANIC flag breaks this. We skip setting this flag only when unit testing
 * assertions.
 ','line_number':573,'multiline':True]
['text':' Panic the connection. ','line_number':579,'multiline':True]
['text':'
     * !!!
     * Chaos reigns within.
     * Reflect, repent, and reboot.
     * Order shall return.
     ','line_number':583,'multiline':True]
['text':'
 * __wt_set_return_func --
 *     Conditionally log the source of an error code and return the error.
 ','line_number':592,'multiline':True]
['text':'
 * __wt_ext_err_printf --
 *     Extension API call to print to the error stream.
 ','line_number':603,'multiline':True]
['text':'
 * __wt_verbose_worker --
 *     Verbose message.
 ','line_number':626,'multiline':True]
['text':'
 * __wt_msg --
 *     Informational message.
 ','line_number':643,'multiline':True]
['text':'
 * __wt_ext_msg_printf --
 *     Extension API call to print to the message stream.
 ','line_number':669,'multiline':True]
['text':'
 * __wt_ext_strerror --
 *     Extension API call to return an error as a string.
 ','line_number':698,'multiline':True]
['text':'
 * __wt_progress --
 *     Progress message.
 ','line_number':711,'multiline':True]
['text':'
 * __wt_inmem_unsupported_op --
 *     Print a standard error message for an operation that's not supported for in-memory
 *     configurations.
 ','line_number':731,'multiline':True]
['text':'
 * __wt_object_unsupported --
 *     Print a standard error message for an object that doesn't support a particular operation.
 ','line_number':745,'multiline':True]
['text':'
 * __wt_bad_object_type --
 *     Print a standard error message when given an unknown or unsupported object type.
 ','line_number':755,'multiline':True]
['text':'
 * __wt_unexpected_object_type --
 *     Print a standard error message when given an unexpected object type.
 ','line_number':773,'multiline':True]
