['text':'-
 * Copyright (c) 2014-present MongoDB, Inc.
 * Copyright (c) 2008-2014 WiredTiger, Inc.
 *	All rights reserved.
 *
 * See the file LICENSE for redistribution information.
 ','line_number':1,'multiline':True]
['text':'
 * hazard_grow --
 *     Grow a hazard pointer array.
 ','line_number':15,'multiline':True]
['text':'
     * Allocate a new, larger hazard pointer array and copy the contents of the original into place.
     ','line_number':27,'multiline':True]
['text':'
     * Swap the new hazard pointer array into place after initialization is complete (initialization
     * must complete before eviction can see the new hazard pointer array), then schedule the
     * original to be freed.
     ','line_number':34,'multiline':True]
['text':'
     * Our larger hazard array means we can use larger indices for reading/writing hazard pointers.
     * However, if these larger indices become visible to other threads before the new hazard array
     * we can have out of bounds accesses to the old hazard array. Set a write barrier here to
     * ensure the array pointer is always visible first.
     ','line_number':42,'multiline':True]
['text':'
     * Threads using the hazard pointer array from now on will use the new one. Increment the hazard
     * pointer generation number, and schedule a future free of the old memory. Ignore any failure,
     * leak the memory.
     ','line_number':52,'multiline':True]
['text':'
 * __wt_hazard_set_func --
 *     Set a hazard pointer.
 ','line_number':63,'multiline':True]
['text':' If a file can never be evicted, hazard pointers aren't required. ','line_number':80,'multiline':True]
['text':'
     * If there isn't a valid page, we're done. This read can race with eviction and splits, we
     * re-check it after a barrier to make sure we have a valid reference.
     ','line_number':84,'multiline':True]
['text':' If we have filled the current hazard pointer array, grow it. ','line_number':94,'multiline':True]
['text':'
     * If there are no available hazard pointer slots, make another one visible.
     ','line_number':102,'multiline':True]
['text':'
         * If we've grown the hazard array the inuse counter can be incremented beyond the size of
         * the old hazard array. We need to ensure the new hazard array pointer is visible before
         * this increment of the inuse counter and do so with a write barrier in the hazard grow
         * logic.
         ','line_number':109,'multiline':True]
['text':'
         * There must be an empty slot in the array, find it. Skip most of the active slots by
         * starting after the active count slot; there may be a free slot before there, but checking
         * is expensive. If we reach the end of the array, continue the search from the beginning of
         * the array.
         ','line_number':121,'multiline':True]
['text':'
     * Do the dance:
     *
     * The memory location which makes a page "real" is the WT_REF's state of WT_REF_MEM, which can
     * be set to WT_REF_LOCKED at any time by the page eviction server.
     *
     * Add the WT_REF reference to the session's hazard list and flush the write, then see if the
     * page's state is still valid. If so, we can use the page because the page eviction server will
     * see our hazard pointer before it discards the page (the eviction server sets the state to
     * WT_REF_LOCKED, then flushes memory and checks the hazard pointers).
     ','line_number':137,'multiline':True]
['text':' Publish the hazard pointer before reading page's state. ','line_number':153,'multiline':True]
['text':'
     * Check if the page state is still valid, where valid means a state of WT_REF_MEM.
     ','line_number':156,'multiline':True]
['text':'
         * Callers require a barrier here so operations holding the hazard pointer see consistent
         * data.
         ','line_number':163,'multiline':True]
['text':'
     * The page isn't available, it's being considered for eviction (or being evicted, for all we
     * know). If the eviction server sees our hazard pointer before evicting the page, it will
     * return the page to use, no harm done, if it doesn't, it will go ahead and complete the
     * eviction.
     *
     * We don't bother publishing this update: the worst case is we prevent some random page from
     * being evicted.
     ','line_number':171,'multiline':True]
['text':'
 * __wt_hazard_clear --
 *     Clear a hazard pointer.
 ','line_number':185,'multiline':True]
['text':' If a file can never be evicted, hazard pointers aren't required. ','line_number':194,'multiline':True]
['text':'
     * Clear the caller's hazard pointer. The common pattern is LIFO, so do a reverse search.
     ','line_number':198,'multiline':True]
['text':'
             * We don't publish the hazard pointer clear in the general case. It's not required for
             * correctness; it gives an eviction thread faster access to the page were the page
             * selected for eviction.
             ','line_number':203,'multiline':True]
['text':'
             * If this was the last hazard pointer in the session, reset the size so that checks can
             * skip this session.
             *
             * A write-barrier() is necessary before the change to the in-use value, the number of
             * active references can never be less than the number of in-use slots.
             ','line_number':210,'multiline':True]
['text':'
     * A serious error, we should always find the hazard pointer. Panic, because using a page we
     * didn't have pinned down implies corruption.
     ','line_number':222,'multiline':True]
['text':'
 * __wt_hazard_close --
 *     Verify that no hazard pointers are set.
 ','line_number':230,'multiline':True]
['text':'
     * Check for a set hazard pointer and complain if we find one. We could just check the session's
     * hazard pointer count, but this is a useful diagnostic.
     ','line_number':240,'multiline':True]
['text':'
     * Clear any hazard pointers because it's not a correctness problem (any hazard pointer we find
     * can't be real because the session is being closed when we're called). We do this work because
     * session close isn't that common that it's an expensive check, and we don't want to let a
     * hazard pointer lie around, keeping a page from being evicted.
     *
     * We don't panic: this shouldn't be a correctness issue (at least, I can't think of a reason it
     * would be).
     ','line_number':260,'multiline':True]
['text':'
 * hazard_get_reference --
 *     Return a consistent reference to a hazard pointer array.
 ','line_number':280,'multiline':True]
['text':'
     * Hazard pointer arrays can be swapped out from under us if they grow. First, read the current
     * in-use value. The read must precede the read of the hazard pointer itself (so the in-use
     * value is pessimistic should the hazard array grow), and additionally ensure we only read the
     * in-use value once. Then, read the hazard pointer, also ensuring we only read it once.
     *
     * Use a barrier instead of marking the fields volatile because we don't want to slow down the
     * rest of the hazard pointer functions that don't need special treatment.
     ','line_number':287,'multiline':True]
['text':'
 * __hazard_check_callback --
 *     Check if a session holds a hazard pointer on a given ref. If it does return both the session
 *     and the hazard pointer. Callback from the session array walk.
 ','line_number':300,'multiline':True]
['text':'
     * We didn't find a hazard pointer. Clear this field so we don't accidentally report the last
     * iterated hazard pointer
     ','line_number':331,'multiline':True]
['text':'
 * __wt_hazard_check --
 *     Return if there's a hazard pointer to the page in the system.
 ','line_number':339,'multiline':True]
['text':' If a file can never be evicted, hazard pointers aren't required. ','line_number':352,'multiline':True]
['text':'
     * Hazard pointer arrays might grow and be freed underneath us; enter the current hazard
     * resource generation for the duration of the walk to ensure that doesn't happen.
     ','line_number':357,'multiline':True]
['text':'
         * We increment this stat inside the walk logic when we find a hazard pointer. Since we
         * didn't find one increment here instead.
         ','line_number':365,'multiline':True]
['text':' Leave the current resource generation. ','line_number':371,'multiline':True]
['text':'
 * __wt_hazard_count --
 *     Count how many hazard pointers this session has on the given page.
 ','line_number':377,'multiline':True]
['text':'
 * __wt_hazard_check_assert --
 *     Assert there's no hazard pointer to the page.
 ','line_number':397,'multiline':True]
['text':'
     * In diagnostic mode we also track the file and line where the hazard pointer is set. If this
     * is available report it in the error trace.
     ','line_number':417,'multiline':True]
['text':'
 * __hazard_dump --
 *     Display the list of hazard pointers.
 ','line_number':432,'multiline':True]
