['text':'-
 * Copyright (c) 2014-present MongoDB, Inc.
 * Copyright (c) 2008-2014 WiredTiger, Inc.
 *	All rights reserved.
 *
 * See the file LICENSE for redistribution information.
 ','line_number':1,'multiline':True]
['text':'
 * __find_next_col --
 *     Find the next column to use for a plan.
 ','line_number':11,'multiline':True]
['text':'
         * If there is only one column group, we just scan through all of the columns. For tables
         * with multiple column groups, we look at the key columns once, then go through the value
         * columns for each group.
         ','line_number':34,'multiline':True]
['text':'
 * __wt_schema_colcheck --
 *     Check that a list of columns matches a (key,value) format pair.
 ','line_number':78,'multiline':True]
['text':' Walk through the named columns. ','line_number':103,'multiline':True]
['text':'
 * __wt_table_check --
 *     Make sure all columns appear in a column group.
 ','line_number':122,'multiline':True]
['text':' Walk through the columns. ','line_number':138,'multiline':True]
['text':' Skip over the key columns. ','line_number':141,'multiline':True]
['text':'
         * Column groups can't store key columns in their value:
         * __wt_struct_reformat should have already detected this case.
         ','line_number':150,'multiline':True]
['text':'
 * __wt_struct_plan --
 *     Given a table cursor containing a complete table, build the "projection plan" to distribute
 *     the columns to dependent stores. A string representing the plan will be appended to the plan
 *     buffer.
 ','line_number':161,'multiline':True]
['text':' -Wuninitialized ','line_number':178,'multiline':True]
['text':' Work through the value columns by skipping over the key columns. ','line_number':180,'multiline':True]
['text':' Keep lint quiet. ','line_number':188,'multiline':True]
['text':'
             * First we move to the column. If that is in a different column group to the last
             * column we accessed, or before the last column in the same column group, or moving
             * from the key to the value, we need to switch column groups or rewind.
             ','line_number':194,'multiline':True]
['text':'
                 * Set the current column group and column within the table.
                 ','line_number':203,'multiline':True]
['text':' Now move to the column we want. ','line_number':210,'multiline':True]
['text':'
             * Now copy the value in / out. In the common case, where each value is used in one
             * column, we do a "next" operation. If the value is used again, we do a "reuse"
             * operation to avoid making another copy.
             ','line_number':216,'multiline':True]
['text':'
         * We may fail to find a column if it is a custom extractor. In that case, treat it as the
         * first value column: we only ever use such plans to extract the primary key from the
         * index.
         ','line_number':231,'multiline':True]
['text':' Special case empty plans. ','line_number':241,'multiline':True]
['text':'
 * __find_column_format --
 *     Find the format of the named column.
 ','line_number':248,'multiline':True]
['text':'
 * __wt_struct_reformat --
 *     Given a table and a list of columns (which could be values in a column group or index keys),
 *     calculate the resulting new format string. The result will be appended to the format buffer.
 ','line_number':286,'multiline':True]
['text':'
     * If an empty column list is specified, this will fail with WT_NOTFOUND, that's okay.
     ','line_number':302,'multiline':True]
['text':'
         * Check whether we're moving an unsized WT_ITEM from the end to the middle, or vice-versa.
         * This determines whether the size needs to be prepended. This is the only case where the
         * destination size can be larger than the source size.
         ','line_number':337,'multiline':True]
['text':'
 * __wt_struct_truncate --
 *     Return a packing string for the first N columns in a value.
 ','line_number':356,'multiline':True]
