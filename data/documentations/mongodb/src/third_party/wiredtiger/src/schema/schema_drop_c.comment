['text':'-
 * Copyright (c) 2014-present MongoDB, Inc.
 * Copyright (c) 2008-2014 WiredTiger, Inc.
 *	All rights reserved.
 *
 * See the file LICENSE for redistribution information.
 ','line_number':1,'multiline':True]
['text':'
 * __drop_file --
 *     Drop a file.
 ','line_number':11,'multiline':True]
['text':' Close all btree handles associated with this file. ','line_number':30,'multiline':True]
['text':' Remove the metadata entry (ignore missing items). ','line_number':35,'multiline':True]
['text':'
     * Schedule the remove of the underlying physical file when the drop completes.
     ','line_number':40,'multiline':True]
['text':'
 * __drop_colgroup --
 *     WT_SESSION::drop for a colgroup.
 ','line_number':48,'multiline':True]
['text':' If we can get the colgroup, detach it from the table. ','line_number':61,'multiline':True]
['text':'
 * __drop_index --
 *     WT_SESSION::drop for an index.
 ','line_number':72,'multiline':True]
['text':' If we can get the index, detach it from the table. ','line_number':82,'multiline':True]
['text':'
 * __drop_table --
 *     WT_SESSION::drop for a table.
 ','line_number':90,'multiline':True]
['text':'
     * Open the table so we can drop its column groups and indexes.
     *
     * Ideally we would keep the table locked exclusive across the drop, but for now we rely on the
     * global table lock to prevent the table being reopened while it is being dropped. One issue is
     * that the WT_WITHOUT_LOCKS macro can drop and reacquire the global table lock, avoiding
     * deadlocks while waiting for LSM operation to quiesce.
     *
     * Temporarily getting the table exclusively serves the purpose of ensuring that cursors on the
     * table that are already open must at least be closed before this call proceeds.
     ','line_number':113,'multiline':True]
['text':' Drop the column groups. ','line_number':128,'multiline':True]
['text':'
         * Drop the column group before updating the metadata to avoid the metadata for the table
         * becoming inconsistent if we can't get exclusive access.
         ','line_number':132,'multiline':True]
['text':' Drop the indices. ','line_number':140,'multiline':True]
['text':'
         * Drop the index before updating the metadata to avoid the metadata for the table becoming
         * inconsistent if we can't get exclusive access.
         ','line_number':145,'multiline':True]
['text':' Make sure the table data handle is closed. ','line_number':153,'multiline':True]
['text':' Remove the metadata entry (ignore missing items). ','line_number':163,'multiline':True]
['text':'
 * __drop_tiered --
 *     Drop a tiered store.
 ','line_number':172,'multiline':True]
['text':' Get the tiered data handle. ','line_number':201,'multiline':True]
['text':'
     * Save a copy because we cannot release the tiered resources until after the dhandle is
     * released and closed. We have to know if the table is busy or if the close is successful
     * before cleaning up the tiered information.
     ','line_number':205,'multiline':True]
['text':'
     * We are about to close the dhandle. If that is successful we need to remove any tiered work
     * from the queue relating to that dhandle. But if closing the dhandle has an error we don't
     * remove the work. So hold the tiered lock for the duration so that the worker thread cannot
     * race and process work for this handle.
     ','line_number':212,'multiline':True]
['text':'
     * Close all btree handles associated with this table. This must be done after we're done using
     * the tiered structure because that is from the dhandle.
     ','line_number':219,'multiline':True]
['text':'
     * If closing the URI succeeded then we can remove tiered information using the saved tiered
     * structure from above. We need the copy because the dhandle has been released.
     ','line_number':229,'multiline':True]
['text':'
     * We cannot remove the objects on shared storage as other systems may be accessing them too.
     * Remove the current local file object, the tiered entry and all bucket objects from the
     * metadata only.
     ','line_number':234,'multiline':True]
['text':' Close any dhandle and remove any tier: entry from metadata. ','line_number':256,'multiline':True]
['text':' If we don't have a shared tier we better be on the first object. ','line_number':267,'multiline':True]
['text':'
     * We remove all metadata entries for both the file and object versions of an object. The local
     * retention means we can have both versions in the metadata. Ignore WT_NOTFOUND.
     ','line_number':270,'multiline':True]
['text':'
             * If a drop operation on tiered storage is configured to force removal of shared
             * objects, we want to remove these files after the drop operation is successful.
             ','line_number':291,'multiline':True]
['text':'
     * If everything is successful, remove any tiered work associated with this tiered handle. The
     * dhandle has been released here but queued work may still refer to it. The queued work unit
     * has its own reference to it and we're holding the lock so it isn't yet stale.
     ','line_number':301,'multiline':True]
['text':'
 * __schema_drop --
 *     Process a WT_SESSION::drop operation for all supported types.
 ','line_number':320,'multiline':True]
['text':' Paranoia: clear any handle from our caller. ','line_number':337,'multiline':True]
['text':'
     * Map WT_NOTFOUND to ENOENT, based on the assumption WT_NOTFOUND means there was no metadata
     * entry. Map ENOENT to zero if force is set.
     ','line_number':358,'multiline':True]
['text':'
 * __wt_schema_drop --
 *     Process a WT_SESSION::drop operation for all supported types.
 ','line_number':373,'multiline':True]
['text':'
     * We should be calling this function with the schema lock, but we cannot verify it here because
     * we can re-enter this function with the internal session. If we get here using the internal
     * session, we cannot check whether we own the lock, as it would be locked by the outer session.
     * We can thus only check whether the lock is acquired, as opposed to, whether the lock is
     * acquired by us.
     ','line_number':383,'multiline':True]
