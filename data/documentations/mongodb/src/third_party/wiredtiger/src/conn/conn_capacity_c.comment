['text':'
 * Copyright (c) 2014-present MongoDB, Inc.
 * Copyright (c) 2008-2014 WiredTiger, Inc.
 *	All rights reserved.
 *
 * See the file LICENSE for redistribution information.
 ','line_number':1,'multiline':True]
['text':'
 * Compute the time in nanoseconds that must be reserved to represent a number of bytes in a
 * subsystem with a particular capacity per second.
 ','line_number':11,'multiline':True]
['text':'
 * The fraction of a second's worth of capacity that will be stolen at a time. The number of bytes
 * this represents may be different for different subsystems, since each subsystem has its own
 * capacity per second.
 ','line_number':17,'multiline':True]
['text':'
 * __capacity_config --
 *     Set I/O capacity configuration.
 ','line_number':24,'multiline':True]
['text':'
         * We've been given a total capacity, set the capacity of all the subsystems.
         ','line_number':70,'multiline':True]
['text':'
         * Set the threshold to the percent of our capacity to periodically asynchronously flush
         * what we've written.
         ','line_number':78,'multiline':True]
['text':'
 * __capacity_server_run_chk --
 *     Check to decide if the capacity server should continue running.
 ','line_number':95,'multiline':True]
['text':'
 * __capacity_server --
 *     The capacity server thread.
 ','line_number':105,'multiline':True]
['text':'
         * Wait until signalled but check once per second in case the signal was missed.
         ','line_number':122,'multiline':True]
['text':' Check if we're quitting or being reconfigured. ','line_number':127,'multiline':True]
['text':'
 * __capacity_server_start --
 *     Start the capacity server thread.
 ','line_number':150,'multiline':True]
['text':'
     * The capacity server gets its own session.
     ','line_number':161,'multiline':True]
['text':'
     * Start the thread.
     ','line_number':170,'multiline':True]
['text':'
 * __wt_capacity_server_create --
 *     Configure and start the capacity server.
 ','line_number':179,'multiline':True]
['text':'
     * Stop any server that is already running. This means that each time reconfigure is called
     * we'll bounce the server even if there are no configuration changes. This makes our life
     * easier as the underlying configuration routine doesn't have to worry about freeing objects in
     * the connection structure (it's guaranteed to always start with a blank slate), and we don't
     * have to worry about races where a running server is reading configuration information that
     * we're updating, and it's not expected that reconfiguration will happen a lot.
     ','line_number':190,'multiline':True]
['text':'
     * If it is a read only connection or if background fsync is not supported, then there is
     * nothing to do.
     ','line_number':202,'multiline':True]
['text':'
 * __wt_capacity_server_destroy --
 *     Destroy the capacity server thread.
 ','line_number':215,'multiline':True]
['text':' Close the server thread's session. ','line_number':235,'multiline':True]
['text':'
     * Ensure capacity settings are cleared - so that reconfigure doesn't get confused.
     ','line_number':239,'multiline':True]
['text':'
 * __capacity_signal --
 *     Signal the capacity thread if sufficient data has been written.
 ','line_number':249,'multiline':True]
['text':'
 * __capacity_reserve --
 *     Make a reservation for the given number of bytes against the capacity of the subsystem.
 ','line_number':267,'multiline':True]
['text':'
             * If the reservation clock is out of date, bring it to within a second of a current
             * time.
             ','line_number':281,'multiline':True]
['text':'
 * __throttle_chunkcache --
 *     Reserve a time to perform a chunk cache read or write, and wait until then. The chunk cache
 *     is the only subsystem with a separate IO throttle; ideally future subsystem-specific
 *     throttles could be combined into this implementation.
 ','line_number':292,'multiline':True]
['text':' If we get sizes larger than this, later calculations may overflow. ','line_number':315,'multiline':True]
['text':' Get the current time in nanoseconds since the epoch. ','line_number':319,'multiline':True]
['text':' Take a reservation for the subsystem. ','line_number':323,'multiline':True]
['text':' Sleep handles large usec values. ','line_number':330,'multiline':True]
['text':'
 * __wt_capacity_throttle --
 *     Reserve a time to perform a write operation for the subsystem, and wait until that time. The
 *     concept is that each write to a subsystem reserves a time slot to do its write, and
 *     atomically adjusts the reservation marker to point past the reserved slot. The size of the
 *     adjustment (i.e. the length of time represented by the slot in nanoseconds) is chosen to be
 *     proportional to the number of bytes to be written, and the proportion is a simple calculation
 *     so that we can fit reservations for exactly the configured capacity in a second. Reservation
 *     times are in nanoseconds since the epoch.
 ','line_number':336,'multiline':True]
['text':' NOLINTNEXTLINE(clang-analyzer-deadcode.DeadStores) ','line_number':359,'multiline':True]
['text':'
     * Right now no subsystem can be individually turned off, but it is certainly a possibility to
     * consider one subsystem may be turned off at some point in the future. If this subsystem is
     * not throttled there's nothing to do.
     ','line_number':392,'multiline':True]
['text':'
     * There may in fact be some reads done under the umbrella of log I/O, but they are mostly done
     * under recovery. And if we are recovering, we don't reach this code.
     ','line_number':400,'multiline':True]
['text':' If we get sizes larger than this, later calculations may overflow. ','line_number':409,'multiline':True]
['text':' Get the current time in nanoseconds since the epoch. ','line_number':413,'multiline':True]
['text':' Take a reservation for the subsystem, and for the total ','line_number':418,'multiline':True]
['text':'
     * If we ended up with a future reservation, and we aren't constricted by the total capacity,
     * then we may be able to reallocate some unused reservation time from another subsystem.
     ','line_number':422,'multiline':True]
['text':'
             * We have a subsystem that has enough spare capacity to steal. We'll take a small slice
             * (a fraction of a second worth) and add it to our own subsystem.
             ','line_number':450,'multiline':True]
['text':'
                 * Give up our reservations and try again. We won't try to steal the next time.
                 ','line_number':461,'multiline':True]
['text':'
             * We've stolen a fraction of a second of capacity. Figure out how many bytes that is,
             * before adding that many bytes to the acquiring subsystem's capacity.
             ','line_number':470,'multiline':True]
['text':'
                 * This section is not expected to be reached as we should have already returned
                 * earlier in case of chunk cache usage throttling.
                 ','line_number':488,'multiline':True]
['text':' Sleep handles large usec values. ','line_number':508,'multiline':True]
