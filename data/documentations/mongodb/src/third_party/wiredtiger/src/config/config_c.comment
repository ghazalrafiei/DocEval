['text':'-
 * Copyright (c) 2014-present MongoDB, Inc.
 * Copyright (c) 2008-2014 WiredTiger, Inc.
 *	All rights reserved.
 *
 * See the file LICENSE for redistribution information.
 ','line_number':1,'multiline':True]
['text':'
 * __config_err --
 *     Error message and return for config string parse failures.
 ','line_number':11,'multiline':True]
['text':'
 * __wt_config_initn --
 *     Initialize a config handle, used to iterate through a config string of specified length.
 ','line_number':22,'multiline':True]
['text':'
 * __wt_config_init --
 *     Initialize a config handle, used to iterate through a NUL-terminated config string.
 ','line_number':38,'multiline':True]
['text':'
 * __wt_config_subinit --
 *     Initialize a config handle, used to iterate through a config string extracted from another
 *     config string (used for parsing nested structures).
 ','line_number':52,'multiline':True]
['text':'
 * Some inspiration taken from https://github.com/quartzjer/js0n (public domain). These
 * comments map from constructs in js0n to the equivalent in WiredTiger.
 *
 * static void *gostruct[] = {
 *		[0 ... 255] = &&l_bad,
 *		['\t'] = &&l_loop, [' '] = &&l_loop,
 *		['\r'] = &&l_loop, ['\n'] = &&l_loop,
 *		['"'] = &&l_qup,
 *		[':'] = &&l_value, ['='] = &&l_value,
 *		[','] = &&l_next,
 *		['('] = &&l_up, [')'] = &&l_down,
 *		['['] = &&l_up, [']'] = &&l_down,
 *		['{'] = &&l_up, ['}'] = &&l_down,
 *		['-'] = &&l_numbare,
 *		['0' ... '9'] = &&l_numbare,
 *		['_'] = &&l_bare,
 *		['A' ... 'Z'] = &&l_bare, ['a' ... 'z'] = &&l_bare,
 *		['/'] = &&l_bare,
 *	};
 ','line_number':101,'multiline':True]
['text':'
 *	static void *gobare[] =
 *	{
 *		[0 ... 31] = &&l_bad,
 *		[32 ... 126] = &&l_loop,
 *		['\t'] = &&l_unbare, [' '] = &&l_unbare,
 *		['\r'] = &&l_unbare, ['\n'] = &&l_unbare,
 *		[':'] = &&l_unbare, ['='] = &&l_unbare,
 *		[','] = &&l_unbare,
 *		[')'] = &&l_unbare, [']'] = &&l_unbare, ['}'] = &&l_unbare,
 *		[127 ... 255] = &&l_bad
 *	};
 ','line_number':143,'multiline':True]
['text':'
 *	static void *gostring[] =
 *	{
 *		[0 ... 31] = &&l_bad, [127] = &&l_bad,
 *		[32 ... 126] = &&l_loop,
 *		['\\'] = &&l_esc, ['"'] = &&l_qdown,
 *		[128 ... 191] = &&l_bad,
 *		[192 ... 223] = &&l_utf8_2,
 *		[224 ... 239] = &&l_utf8_3,
 *		[240 ... 247] = &&l_utf8_4,
 *		[248 ... 255] = &&l_bad
 *	};
 ','line_number':178,'multiline':True]
['text':'
 *	static void *goutf8_continue[] =
 *	{
 *		[0 ... 127] = &&l_bad,
 *		[128 ... 191] = &&l_utf_continue,
 *		[192 ... 255] = &&l_bad
 *	};
 ','line_number':214,'multiline':True]
['text':'
 *	static void *goesc[] =
 *	{
 *		[0 ... 255] = &&l_bad,
 *		['"'] = &&l_unesc, ['\\'] = &&l_unesc,
 *		['/'] = &&l_unesc, ['b'] = &&l_unesc,
 *		['f'] = &&l_unesc, ['n'] = &&l_unesc,
 *		['r'] = &&l_unesc, ['t'] = &&l_unesc, ['u'] = &&l_unesc
 *	};
 ','line_number':248,'multiline':True]
['text':'
 * __config_next --
 *     Get the next config item in the string without processing the value.
 ','line_number':278,'multiline':True]
['text':' Keys with no value default to true. ','line_number':289,'multiline':True]
['text':'
                 * Special case: ':' is permitted in unquoted values.
                 ','line_number':323,'multiline':True]
['text':'
             * If we're at the top level and we have a complete key (and optional value), we're
             * done.
             ','line_number':333,'multiline':True]
['text':' Might have a trailing key/value without a closing brace ','line_number':400,'multiline':True]
['text':' Did we find something? ','line_number':406,'multiline':True]
['text':' We're either at the end of the string or we failed to parse. ','line_number':410,'multiline':True]
['text':'
 * Arithmetic shift of a negative number is undefined by ISO/IEC 9899, and the WiredTiger API
 * supports negative numbers. Check it's not a negative number, and then cast the shift out of
 * paranoia.
 ','line_number':417,'multiline':True]
['text':'
 * __config_process_value --
 *     Deal with special config values like true / false.
 ','line_number':431,'multiline':True]
['text':' Empty values are okay: we can't do anything interesting with them. ','line_number':440,'multiline':True]
['text':'
         * If we parsed the string but the number is out of range, treat the value as an identifier.
         * If an integer is expected, that will be caught by __wt_config_check.
         ','line_number':456,'multiline':True]
['text':' Check any leftover characters. ','line_number':463,'multiline':True]
['text':' Byte: no change. ','line_number':468,'multiline':True]
['text':'
         * We didn't get a well-formed number. That might be okay, the required type will be checked
         * by __wt_config_check.
         ','line_number':497,'multiline':True]
['text':'
 * __wt_config_next --
 *     Get the next config item in the string and process the value.
 ','line_number':505,'multiline':True]
['text':'
 * __config_getraw --
 *     Given a config parser, find the final value for a given key.
 ','line_number':517,'multiline':True]
['text':'
 * __wt_config_get --
 *     Given a NULL-terminated list of configuration strings, find the final value for a given key.
 ','line_number':555,'multiline':True]
['text':'
     * Search the strings in reverse order, that way the first hit wins and we don't search the base
     * set until there's no other choice.
     ','line_number':570,'multiline':True]
['text':'
 * __wt_config_gets --
 *     Given a NULL-terminated list of configuration strings, find the final value for a given
 *     string key.
 ','line_number':588,'multiline':True]
['text':'
 * __wt_config_gets_none --
 *     Given a NULL-terminated list of configuration strings, find the final value for a given
 *     string key. Treat "none" as empty.
 ','line_number':601,'multiline':True]
['text':'
 * __wt_config_getone --
 *     Get the value for a given key from a single config string.
 ','line_number':616,'multiline':True]
['text':'
 * __wt_config_getones --
 *     Get the value for a given string key from a single config string.
 ','line_number':630,'multiline':True]
['text':'
 * __wt_config_getones_none --
 *     Get the value for a given string key from a single config string. Treat "none" as empty.
 ','line_number':645,'multiline':True]
['text':'
 * __wt_config_gets_def --
 *     Performance hack: skip parsing config strings by hard-coding defaults. It's expensive to
 *     repeatedly parse configuration strings, so don't do it unless it's necessary in performance
 *     paths like cursor creation. Assume the second configuration string is the application's
 *     configuration string, and if it's not set (which is true most of the time), then use the
 *     supplied default value. This makes it faster to open cursors when checking for obscure open
 *     configuration strings like "next_random".
 ','line_number':659,'multiline':True]
['text':'
     * Checking the "length" of the pointer array is a little odd, but it's deliberate. The reason
     * is because we pass variable length arrays of pointers as the configuration argument, some of
     * which have only one element and the NULL termination. Static analyzers (like Coverity)
     * complain if we read from an offset past the end of the array, even if we check there's no
     * NULL slots before the offset.
     ','line_number':681,'multiline':True]
['text':' cfg[0] == NULL ','line_number':691,'multiline':True]
['text':' cfg[1] == NULL ','line_number':692,'multiline':True]
['text':' cfg[2] == NULL ','line_number':694,'multiline':True]
['text':' NOTREACHED ','line_number':700,'multiline':True]
['text':'
 * __wt_config_subgetraw --
 *     Get the value for a given key from a config string in a WT_CONFIG_ITEM. This is useful for
 *     dealing with nested structs in config strings.
 ','line_number':703,'multiline':True]
['text':'
 * __wt_config_subgets --
 *     Get the value for a given key from a config string in a WT_CONFIG_ITEM. This is useful for
 *     dealing with nested structs in config strings.
 ','line_number':718,'multiline':True]
['text':'
 * __wt_config_subget_next --
 *     Get the value for a given key from a config string and set the processed value in the given
 *     key structure. This is useful for unusual case of dealing with list in config string.
 ','line_number':732,'multiline':True]
