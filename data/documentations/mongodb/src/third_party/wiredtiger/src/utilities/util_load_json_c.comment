['text':'-
 * Copyright (c) 2014-present MongoDB, Inc.
 * Copyright (c) 2008-2014 WiredTiger, Inc.
 *	All rights reserved.
 *
 * See the file LICENSE for redistribution information.
 ','line_number':1,'multiline':True]
['text':'
 * Encapsulates the input state for parsing JSON.
 *
 * At any time, we may be peeking at an unconsumed token; this is
 * indicated by 'peeking' as true.  toktype, tokstart, toklen will be
 * set in this case.
 *
 * Generally we are collecting and processing tokens one by one.
 * In JSON, tokens never span lines so this makes processing easy.
 * The exception is that a JSON dump cursor takes the complete
 * set of keys or values during cursor->set_key/set_value calls,
 * which may contain many tokens and span lines.  E.g.
 *   cursor->set_value("\"name\" : \"John\", \"phone\" : 2348765");
 * The raw key/value string is collected in the kvraw field.
 ','line_number':13,'multiline':True]
['text':' associated session ','line_number':29,'multiline':True]
['text':' current line ','line_number':30,'multiline':True]
['text':' points to cur position in line.mem ','line_number':31,'multiline':True]
['text':' current token is EOF ','line_number':32,'multiline':True]
['text':' peeking at next token ','line_number':33,'multiline':True]
['text':' next token, defined by __wt_json_token() ','line_number':34,'multiline':True]
['text':' next token start (points into line.mem) ','line_number':35,'multiline':True]
['text':' next token length ','line_number':36,'multiline':True]
['text':' multiple line raw content collected so far ','line_number':37,'multiline':True]
['text':' pos on cur line that JSON key/value starts ','line_number':38,'multiline':True]
['text':' filename for error reporting ','line_number':39,'multiline':True]
['text':' line number for error reporting ','line_number':40,'multiline':True]
['text':'
 * json_column_group_index --
 *     Parse a column group or index entry from JSON input.
 ','line_number':64,'multiline':True]
['text':'
 * json_kvraw_append --
 *     Append to the kvraw buffer, which is used to collect all the raw key/value pairs from JSON
 *     input.
 ','line_number':136,'multiline':True]
['text':'
 * json_strdup --
 *     Return a string, with no escapes or other JSON-isms, from the JSON string at the current
 *     input position.
 ','line_number':163,'multiline':True]
['text':'strip "" from token ','line_number':178,'multiline':True]
['text':'
 * json_data --
 *     Parse the data portion of the JSON input, and insert all values.
 ','line_number':206,'multiline':True]
['text':' Reorder and check the list. ','line_number':225,'multiline':True]
['text':' Update config based on command-line configuration. ','line_number':229,'multiline':True]
['text':' Create the items collected. ','line_number':233,'multiline':True]
['text':' Verify the dump has recnos in order. ','line_number':273,'multiline':True]
['text':' skip over inserted space and comma ','line_number':302,'multiline':True]
['text':'
     * Technically, we don't have to close the cursor because the session handle will do it for us,
     * but I'd like to see the flush to disk and the close succeed, it's better to fail early when
     * loading files.
     ','line_number':321,'multiline':True]
['text':'
 * json_top_level --
 *     Parse the top level JSON input.
 ','line_number':336,'multiline':True]
['text':'
         * Allow any ordering of 'config', 'colgroups', 'indices' before 'data', which must appear
         * last. The non-'data' items build up a list of entries that created in our session before
         * the data is inserted.
         ','line_number':384,'multiline':True]
['text':' Check EOF. ','line_number':433,'multiline':True]
['text':'
 * json_peek --
 *     Set the input state to the next available token in the input and return its token type, a
 *     code defined by __wt_json_token().
 ','line_number':454,'multiline':True]
['text':'
 * json_expect --
 *     Ensure that the type of the next token in the input matches the wanted value, and advance
 *     past it. The values of the input state will be set so specific string or integer values can
 *     be pulled out after this call.
 ','line_number':500,'multiline':True]
['text':'
 * json_skip --
 *     Skip over JSON input until one of the specified strings appears. The tokenizer will be set to
 *     point to the beginning of that string.
 ','line_number':522,'multiline':True]
['text':' Set to this token. ','line_number':550,'multiline':True]
['text':'
 * util_load_json --
 *     Load from the JSON format produced by 'wt dump -j'.
 ','line_number':558,'multiline':True]
