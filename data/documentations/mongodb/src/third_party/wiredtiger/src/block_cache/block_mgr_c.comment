['text':'-
 * Copyright (c) 2014-present MongoDB, Inc.
 * Copyright (c) 2008-2014 WiredTiger, Inc.
 *	All rights reserved.
 *
 * See the file LICENSE for redistribution information.
 ','line_number':1,'multiline':True]
['text':'
 * __wt_bm_close_block --
 *     Close a block handle.
 ','line_number':13,'multiline':True]
['text':' Make the block unreachable. ','line_number':32,'multiline':True]
['text':' You can't close files during a checkpoint. ','line_number':38,'multiline':True]
['text':' If fsync fails WT panics so failure to reach __wt_block_close() is irrelevant. ','line_number':45,'multiline':True]
['text':'
 * __bm_readonly --
 *     General-purpose "writes not supported on this handle" function.
 ','line_number':49,'multiline':True]
['text':'
 * __bm_addr_invalid --
 *     Return an error code if an address cookie is invalid.
 ','line_number':60,'multiline':True]
['text':'
 * __bm_addr_string --
 *     Return a printable string representation of an address cookie.
 ','line_number':70,'multiline':True]
['text':'
 * __bm_block_header --
 *     Return the size of the block header.
 ','line_number':81,'multiline':True]
['text':'
 * __bm_checkpoint --
 *     Write a buffer into a block, creating a checkpoint.
 ','line_number':91,'multiline':True]
['text':'
     * For tiered tables, if we postponed switching to a new file, this is the right time to make
     * that happen since eviction is disabled at the moment and we are the exclusive writers.
     ','line_number':110,'multiline':True]
['text':'
     * For tiered tables, we need to fsync any previous active files to ensure the full checkpoint
     * is persisted. We wait until now because there may have been in-progress writes to old files.
     * But now we know those writes must have completed. Checkpoint ensures that all dirty pages of
     * the tree have been written and eviction is disabled at this point, so no new data is getting
     * written.
     *
     * We don't hold the handle array lock across fsync calls since those could be slow and that
     * would block a concurrent thread opening a new block handle.
     ','line_number':125,'multiline':True]
['text':'
 * __bm_checkpoint_last --
 *     Return information for the last known file checkpoint.
 ','line_number':156,'multiline':True]
['text':'
 * __bm_checkpoint_readonly --
 *     Write a buffer into a block, creating a checkpoint; readonly version.
 ','line_number':168,'multiline':True]
['text':'
 * __bm_checkpoint_load --
 *     Load a checkpoint.
 ','line_number':183,'multiline':True]
['text':' If not opening a checkpoint, we're opening the live system. ','line_number':191,'multiline':True]
['text':'
         * Read-only objects are optionally mapped into memory instead of being read into cache
         * buffers. This isn't supported for trees that use multiple files.
         ','line_number':197,'multiline':True]
['text':'
         * If this handle is for a checkpoint, that is, read-only, there isn't a lot you can do with
         * it. Although the btree layer prevents attempts to write a checkpoint reference, paranoia
         * is healthy.
         ','line_number':205,'multiline':True]
['text':'
 * __bm_checkpoint_resolve --
 *     Resolve the checkpoint.
 ','line_number':216,'multiline':True]
['text':' If we have made a switch from the older file, resolve the older one instead. ','line_number':225,'multiline':True]
['text':'
 * __bm_checkpoint_resolve_readonly --
 *     Resolve the checkpoint; readonly version.
 ','line_number':234,'multiline':True]
['text':'
 * __bm_checkpoint_start --
 *     Start the checkpoint.
 ','line_number':246,'multiline':True]
['text':'
 * __bm_checkpoint_start_readonly --
 *     Start the checkpoint; readonly version.
 ','line_number':256,'multiline':True]
['text':'
 * __bm_checkpoint_unload --
 *     Unload a checkpoint point.
 ','line_number':266,'multiline':True]
['text':' Unmap any mapped segment. ','line_number':275,'multiline':True]
['text':' Unload the checkpoint. ','line_number':279,'multiline':True]
['text':'
 * __bm_close --
 *     Close a file.
 ','line_number':285,'multiline':True]
['text':' Safety check ','line_number':295,'multiline':True]
['text':'
         * Higher-level code ensures that we can only have one call to close a block manager. So we
         * don't need to lock the block handle array here.
         *
         * We don't need to explicitly close the active handle; it is also in the handle array.
         ','line_number':301,'multiline':True]
['text':'
 * __bm_compact_end --
 *     End a block manager compaction.
 ','line_number':318,'multiline':True]
['text':'
 * __bm_compact_end_readonly --
 *     End a block manager compaction; readonly version.
 ','line_number':328,'multiline':True]
['text':'
 * __bm_compact_page_rewrite --
 *     Rewrite a page for compaction.
 ','line_number':338,'multiline':True]
['text':'
 * __bm_compact_page_rewrite_readonly --
 *     Rewrite a page for compaction; readonly version.
 ','line_number':349,'multiline':True]
['text':'
 * __bm_compact_page_skip --
 *     Return if a page is useful for compaction.
 ','line_number':364,'multiline':True]
['text':'
 * __bm_compact_page_skip_readonly --
 *     Return if a page is useful for compaction; readonly version.
 ','line_number':375,'multiline':True]
['text':'
 * __bm_compact_progress --
 *     Output compact progress message.
 ','line_number':390,'multiline':True]
['text':'
 * __bm_compact_skip --
 *     Return if a file can be compacted.
 ','line_number':400,'multiline':True]
['text':'
 * __bm_compact_skip_readonly --
 *     Return if a file can be compacted; readonly version.
 ','line_number':410,'multiline':True]
['text':'
 * __bm_compact_start --
 *     Start a block manager compaction.
 ','line_number':422,'multiline':True]
['text':'
 * __bm_compact_start_readonly --
 *     Start a block manager compaction; readonly version.
 ','line_number':432,'multiline':True]
['text':'
 * __bm_free --
 *     Free a block of space to the underlying file.
 ','line_number':442,'multiline':True]
['text':' Evict the freed block from the block cache ','line_number':453,'multiline':True]
['text':'
 * __bm_free_readonly --
 *     Free a block of space to the underlying file; readonly version.
 ','line_number':460,'multiline':True]
['text':'
 * __bm_is_mapped --
 *     Return if the file is mapped into memory.
 ','line_number':473,'multiline':True]
['text':'
 * __bm_map_discard --
 *     Discard a mapped segment.
 ','line_number':485,'multiline':True]
['text':'
 * __bm_read --
 *     Read an address cookie referenced block into a buffer.
 ','line_number':498,'multiline':True]
['text':'
 * __bm_salvage_end --
 *     End a block manager salvage.
 ','line_number':508,'multiline':True]
['text':'
 * __bm_salvage_end_readonly --
 *     End a block manager salvage; readonly version.
 ','line_number':518,'multiline':True]
['text':'
 * __bm_salvage_next_readonly --
 *     Return the next block from the file; readonly version.
 ','line_number':528,'multiline':True]
['text':'
 * __bm_salvage_next --
 *     Return the next block from the file.
 ','line_number':543,'multiline':True]
['text':'
 * __bm_salvage_start --
 *     Start a block manager salvage.
 ','line_number':554,'multiline':True]
['text':'
 * __bm_salvage_start_readonly --
 *     Start a block manager salvage; readonly version.
 ','line_number':564,'multiline':True]
['text':'
 * __bm_salvage_valid --
 *     Inform salvage a block is valid.
 ','line_number':574,'multiline':True]
['text':'
 * __bm_salvage_valid_readonly --
 *     Inform salvage a block is valid; readonly version.
 ','line_number':584,'multiline':True]
['text':'
 * __bm_stat --
 *     Block-manager statistics.
 ','line_number':599,'multiline':True]
['text':'
 * __bm_switch_object --
 *     Switch the active handle to a different object.
 ','line_number':610,'multiline':True]
['text':' The checkpoint lock protects against concurrent switches ','line_number':620,'multiline':True]
['text':' We shouldn't ask to switch objects unless we actually need to switch objects ','line_number':626,'multiline':True]
['text':' This will be the new writable object. Load its checkpoint ','line_number':634,'multiline':True]
['text':'
     * We don't do the actual switch just yet. Eviction is active and might write to the file in
     * parallel. We postpone the switch to later when the block manager writes the checkpoint.
     ','line_number':637,'multiline':True]
['text':'
 * __bm_switch_object_readonly --
 *     Switch the tiered object; readonly version.
 ','line_number':647,'multiline':True]
['text':'
 * __bm_sync --
 *     Flush a file to disk.
 ','line_number':659,'multiline':True]
['text':'
     * If a tiered switch was scheduled, it should have happened by now. If we somehow miss it, we
     * will leave a dangling switch. Tiered server might incorrectly attempt to flush an active file
     * in such a case.
     ','line_number':666,'multiline':True]
['text':' If we have made a switch from the older file, sync the older one instead. ','line_number':673,'multiline':True]
['text':'
 * __bm_sync_readonly --
 *     Flush a file to disk; readonly version.
 ','line_number':680,'multiline':True]
['text':'
 * __bm_verify_addr --
 *     Verify an address.
 ','line_number':692,'multiline':True]
['text':'
 * __bm_verify_end --
 *     End a block manager verify.
 ','line_number':702,'multiline':True]
['text':'
 * __bm_verify_start --
 *     Start a block manager verify.
 ','line_number':712,'multiline':True]
['text':'
 * __bm_write --
 *     Write a buffer into a block, returning the block's address cookie.
 ','line_number':722,'multiline':True]
['text':'
 * __bm_write_readonly --
 *     Write a buffer into a block, returning the block's address cookie; readonly version.
 ','line_number':737,'multiline':True]
['text':'
 * __bm_write_size --
 *     Return the buffer size required to write a block.
 ','line_number':754,'multiline':True]
['text':'
 * __bm_write_size_readonly --
 *     Return the buffer size required to write a block; readonly version.
 ','line_number':764,'multiline':True]
['text':'
 * __bm_method_set --
 *     Set up the legal methods.
 ','line_number':776,'multiline':True]
['text':'
 * __wt_blkcache_open --
 *     Open a file.
 ','line_number':839,'multiline':True]
['text':' Allocate space to store the handle (do first for simpler cleanup). ','line_number':866,'multiline':True]
['text':' Open the active file, and save in array ','line_number':870,'multiline':True]
['text':'
 * __wt_blkcache_set_readonly --
 *     Set the block API to read-only.
 ','line_number':884,'multiline':True]
['text':' Switch the handle into read-only mode. ','line_number':891,'multiline':True]
