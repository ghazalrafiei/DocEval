['text':'
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 * All rights reserved.
 *
 * This source code is licensed under both the BSD-style license (found in the
 * LICENSE file in the root directory of this source tree) and the GPLv2 (found
 * in the COPYING file in the root directory of this source tree).
 * You may select, at your option, one of the above-listed licenses.
 ','line_number':1,'multiline':True]
['text':' time(), for seed random initialization ','line_number':17,'multiline':True]
['text':' UTIL_clockSpanMicro, SEC_TO_MICRO, UTIL_TIME_INITIALIZER ','line_number':20,'multiline':True]
['text':' Direct access to internal compression functions is required ','line_number':27,'multiline':True]
['text':' ZSTD_resetSeqStore, ZSTD_storeSeq, *_TO_OFFBASE, HIST_countFast_wksp, HIST_isError ','line_number':28,'multiline':True]
['text':' ZSTD_decompressBlock_deprecated ','line_number':29,'multiline':True]
['text':' XXH64 ','line_number':32,'multiline':True]
['text':' C99 ','line_number':34,'multiline':True]
['text':' disable ','line_number':35,'multiline':True]
['text':'-************************************
*  DISPLAY Macros
*************************************','line_number':38,'multiline':True]
['text':'-*******************************************************
*  Random function
********************************************************','line_number':68,'multiline':True]
['text':' Write `size` bytes into `ptr`, all of which are less than or equal to `maxSymb` ','line_number':87,'multiline':True]
['text':' Write `size` random bytes into `ptr` ','line_number':98,'multiline':True]
['text':' Write `size` bytes into `ptr` following the distribution `dist` ','line_number':112,'multiline':True]
['text':' Generate a random distribution where the frequency of each symbol follows a
 * geometric distribution defined by `weight`
 * `dist` should have size at least `DISTSIZE` ','line_number':123,'multiline':True]
['text':' force it to be odd so it's relatively prime to 256 ','line_number':131,'multiline':True]
['text':' Generates a random number in the range [min, max) ','line_number':145,'multiline':True]
['text':' Generates a random number in an exponential distribution with mean `mean` ','line_number':153,'multiline':True]
['text':'-*******************************************************
*  Constants and Structs
********************************************************','line_number':160,'multiline':True]
['text':' Recommended support is 8MB, so limit to 4MB + mantissa ','line_number':168,'multiline':True]
['text':' storeSeq expects a place to copy literals to ','line_number':186,'multiline':True]
['text':' 0 means unknown (unless contentSize == windowSize == 0) ','line_number':194,'multiline':True]
['text':' contentSize >= windowSize means single segment ','line_number':195,'multiline':True]
['text':' For repeat modes ','line_number':198,'multiline':True]
['text':' the distribution used in the previous block for repeat mode ','line_number':203,'multiline':True]
['text':' Symbols that were present in the previous distribution, for use with
     * set_repeat ','line_number':212,'multiline':True]
['text':' so they can be rolled back if uncompressible ','line_number':231,'multiline':True]
['text':' generate frames ','line_number':242,'multiline':True]
['text':' generate compressed blocks without block/frame headers ','line_number':243,'multiline':True]
['text':'-*******************************************************
*  Global variables (set from command line)
********************************************************','line_number':250,'multiline':True]
['text':' <= 20 ','line_number':253,'multiline':True]
['text':' <= 128 KB ','line_number':254,'multiline':True]
['text':'-*******************************************************
*  Generator Functions
********************************************************','line_number':256,'multiline':True]
['text':' force the content size to be present ','line_number':261,'multiline':True]
['text':' advanced options on generation ','line_number':262,'multiline':True]
['text':' Generate and write a random frame header ','line_number':264,'multiline':True]
['text':' generate window size ','line_number':279,'multiline':True]
['text':' Follow window algorithm from specification ','line_number':281,'multiline':True]
['text':' Generate random content size ','line_number':290,'multiline':True]
['text':' do content of at least 128 bytes ','line_number':293,'multiline':True]
['text':' do small content ','line_number':296,'multiline':True]
['text':' 0 size frame ','line_number':299,'multiline':True]
['text':' provide size sometimes ','line_number':304,'multiline':True]
['text':' do single segment sometimes ','line_number':308,'multiline':True]
['text':' Determine how large fcs field has to be ','line_number':315,'multiline':True]
['text':' write out the header ','line_number':326,'multiline':True]
['text':'
         * fcsCode: 2-bit flag specifying how many bytes used to represent Frame_Content_Size (bits 7-6)
         * singleSegment: 1-bit flag describing if data must be regenerated within a single continuous memory segment. (bit 5)
         * contentChecksumFlag: 1-bit flag that is set if frame includes checksum at the end -- set to 1 below (bit 2)
         * dictBits: 2-bit flag describing how many bytes Dictionary_ID uses -- set to 3 (bits 1-0)
         * For more information: https://github.com/facebook/zstd/blob/dev/doc/zstd_compression_format.md#frame_header
         ','line_number':331,'multiline':True]
['text':' Impossible ','line_number':353,'multiline':True]
['text':' Write a literal block in either raw or RLE form, return the literals size ','line_number':370,'multiline':True]
['text':' Size_FormatDesc = ?0 ','line_number':380,'multiline':True]
['text':' Size_FormatDesc = 01 ','line_number':383,'multiline':True]
['text':' Size_Format = 11 ','line_number':386,'multiline':True]
['text':' no empty literals if there's nothing preceding this block ','line_number':392,'multiline':True]
['text':' no matches shorter than 3 are allowed ','line_number':395,'multiline':True]
['text':' use smallest size format that fits ','line_number':397,'multiline':True]
['text':' Raw literals ','line_number':413,'multiline':True]
['text':' RLE literals ','line_number':420,'multiline':True]
['text':' Generate a Huffman header for the given source ','line_number':435,'multiline':True]
['text':' Scan input and build symbol stats ','line_number':447,'multiline':True]
['text':' single symbol, rle ','line_number':450,'multiline':True]
['text':' Fast heuristic : not compressible enough ','line_number':451,'multiline':True]
['text':' Build Huffman Tree ','line_number':454,'multiline':True]
['text':' Max Huffman log is 11, min is highbit(maxSymbolValue)+1 ','line_number':455,'multiline':True]
['text':' Write table description header ','line_number':463,'multiline':True]
['text':' not useful to try compression ','line_number':465,'multiline':True]
['text':' Write a Huffman coded literals block and return the literals size ','line_number':472,'multiline':True]
['text':' make sure we get reasonably-sized literals for compression ','line_number':488,'multiline':True]
['text':' fall through, size is the same as case 1 ','line_number':495,'multiline':True]
['text':' impossible ','line_number':508,'multiline':True]
['text':' avoid small literal sizes ','line_number':515,'multiline':True]
['text':' no matches shorter than 3 are allowed ','line_number':517,'multiline':True]
['text':' most of the time generate a new distribution ','line_number':520,'multiline':True]
['text':' add 10 to ensure some compressibility ','line_number':524,'multiline':True]
['text':' sometimes do restricted range literals to force
                     * non-huffman headers ','line_number':532,'multiline':True]
['text':' generate the header from the distribution instead of the
                 * actual data to avoid bugs with symbols that were in the
                 * distribution but never showed up in the output ','line_number':541,'multiline':True]
['text':' repeat until a valid header is written ','line_number':548,'multiline':True]
['text':' repeat the distribution/table from last time ','line_number':555,'multiline':True]
['text':' flags ','line_number':568,'multiline':True]
['text':' flags ','line_number':571,'multiline':True]
['text':' this only occurs when it could not compress or similar ','line_number':573,'multiline':True]
['text':' if we have to try again, reset the stats so we don't accidentally
             * try to repeat a distribution we just made ','line_number':583,'multiline':True]
['text':' write header ','line_number':591,'multiline':True]
['text':' fall through, size is the same as case 1 ','line_number':593,'multiline':True]
['text':' impossible ','line_number':613,'multiline':True]
['text':' only do compressed for larger segments to avoid compressibility issues ','line_number':622,'multiline':True]
['text':' Randomly generate sequence commands ','line_number':642,'multiline':True]
['text':' The total length of all the matches ','line_number':647,'multiline':True]
['text':' each match must be at least MIN_SEQ_LEN, so this is the maximum
         * number of sequences we can have ','line_number':657,'multiline':True]
['text':' the extra match lengths we have to allocate to each sequence ','line_number':662,'multiline':True]
['text':' Generate match and literal lengths by exponential distribution to
         * ensure nice numbers ','line_number':668,'multiline':True]
['text':' actual offset, code to send, and point to copy up to when shifting
         * codes in the repeat offsets history ','line_number':679,'multiline':True]
['text':' bounds checks ','line_number':683,'multiline':True]
['text':' do a normal offset ','line_number':693,'multiline':True]
['text':' need to occasionally generate offsets that go past the start ','line_number':700,'multiline':True]
['text':' including i+1 != numSequences because the last sequences has to adhere to predetermined contentSize ','line_number':701,'multiline':True]
['text':' when offset > windowSize, matchLen bound by end of dictionary (lenPastStart) ','line_number':706,'multiline':True]
['text':' this also means that lenPastStart must be greater than MIN_SEQ_LEN ','line_number':707,'multiline':True]
['text':' make sure lenPastStart does not go past dictionary start though ','line_number':708,'multiline':True]
['text':' do a repeat offset ','line_number':720,'multiline':True]
['text':' expects values between 1 & 3 ','line_number':722,'multiline':True]
['text':' special case : literalLen == 0 ','line_number':727,'multiline':True]
['text':' copy from dictionary instead of literals ','line_number':739,'multiline':True]
['text':' expects sumtype numeric representation of ZSTD_storeSeq() ','line_number':761,'multiline':True]
['text':' use libzstd sequence handling ','line_number':764,'multiline':True]
['text':' This code is mostly copied from ZSTD_compressSequences in zstd_compress.c ','line_number':808,'multiline':True]
['text':' compressed, raw or rle ','line_number':814,'multiline':True]
['text':' literals compressing block removed so that can be done separately ','line_number':824,'multiline':True]
['text':' Sequences Header ','line_number':826,'multiline':True]
['text':'max nbSeq Size','line_number':827,'multiline':True]
['text':'seqHead ','line_number':827,'multiline':True]
['text':' seqHead : flags for FSE encoding type ','line_number':837,'multiline':True]
['text':' convert length/distances into codes ','line_number':840,'multiline':True]
['text':' CTable for Literal Lengths ','line_number':843,'multiline':True]
['text':' cannot fail ','line_number':845,'multiline':True]
['text':' maybe do repeat mode if we're allowed to ','line_number':850,'multiline':True]
['text':' do RLE if we have the chance ','line_number':853,'multiline':True]
['text':' maybe use the default distribution ','line_number':858,'multiline':True]
['text':' fall back on a full table ','line_number':862,'multiline':True]
['text':' overflow protected ','line_number':867,'multiline':True]
['text':' CTable for Offsets ','line_number':874,'multiline':True]
['text':' see Literal Lengths for descriptions of mode choices ','line_number':875,'multiline':True]
['text':' cannot fail ','line_number':877,'multiline':True]
['text':' overflow protected ','line_number':895,'multiline':True]
['text':' CTable for MatchLengths ','line_number':902,'multiline':True]
['text':' see Literal Lengths for descriptions of mode choices ','line_number':903,'multiline':True]
['text':' cannot fail ','line_number':905,'multiline':True]
['text':' sometimes do default distribution ','line_number':916,'multiline':True]
['text':' fall back on table ','line_number':920,'multiline':True]
['text':' overflow protected ','line_number':925,'multiline':True]
['text':' Encoding Sequences ','line_number':940,'multiline':True]
['text':' first symbols ','line_number':950,'multiline':True]
['text':' intentional underflow ','line_number':962,'multiline':True]
['text':' 32b','line_number':967,'multiline':True]
['text':' 64b','line_number':967,'multiline':True]
['text':' (7)','line_number':969,'multiline':True]
['text':' (7)','line_number':969,'multiline':True]
['text':' 15 ','line_number':970,'multiline':True]
['text':' 15 ','line_number':970,'multiline':True]
['text':' 24 ','line_number':971,'multiline':True]
['text':' 24 ','line_number':971,'multiline':True]
['text':' (7)','line_number':972,'multiline':True]
['text':' 16 ','line_number':973,'multiline':True]
['text':' 33 ','line_number':973,'multiline':True]
['text':' (7)','line_number':975,'multiline':True]
['text':' (7)','line_number':979,'multiline':True]
['text':' 31 ','line_number':980,'multiline':True]
['text':' (7)','line_number':981,'multiline':True]
['text':' not enough space ','line_number':989,'multiline':True]
['text':' randomly generate sequences ','line_number':1007,'multiline':True]
['text':' write them out to the frame data ','line_number':1009,'multiline':True]
['text':' Raw data frame ','line_number':1049,'multiline':True]
['text':' RLE (Don't create RLE block if frame content is 0 since block size of 1 may exceed max block size)','line_number':1058,'multiline':True]
['text':' compressed, most common ','line_number':1068,'multiline':True]
['text':' compressed block must be strictly smaller than uncompressed one ','line_number':1076,'multiline':True]
['text':' fall back on raw block if data doesn't
                                        compress ','line_number':1081,'multiline':True]
['text':' don't update the stats ','line_number':1084,'multiline':True]
['text':' 1 in 4 chance of ending frame ','line_number':1106,'multiline':True]
['text':' some variable size block ','line_number':1113,'multiline':True]
['text':' some full size block ','line_number':1116,'multiline':True]
['text':' some empty block ','line_number':1119,'multiline':True]
['text':' write checksum so implementations can verify their output ','line_number':1133,'multiline':True]
['text':' write data out to file ','line_number':1142,'multiline':True]
['text':' init repeat codes ','line_number':1181,'multiline':True]
['text':'*
 * Generated a single zstd compressed block with no block/frame header.
 * Returns the final seed.
 ','line_number':1187,'multiline':True]
['text':' generate window size ','line_number':1202,'multiline':True]
['text':' generate content size ','line_number':1209,'multiline':True]
['text':' some full size blocks ','line_number':1212,'multiline':True]
['text':' some small blocks <= 128 bytes','line_number':1215,'multiline':True]
['text':' some variable size blocks ','line_number':1218,'multiline':True]
['text':' try generating a compressed block ','line_number':1223,'multiline':True]
['text':' compressed size must be strictly smaller than decompressed size : https://github.com/facebook/zstd/blob/dev/doc/zstd_compression_format.md#blocks ','line_number':1227,'multiline':True]
['text':' data doesn't compress -- try again ','line_number':1228,'multiline':True]
['text':' don't update the stats ','line_number':1229,'multiline':True]
['text':' Return the final seed ','line_number':1240,'multiline':True]
['text':' generate a complete frame ','line_number':1243,'multiline':True]
['text':'_*******************************************************
*  Dictionary Helper Functions
********************************************************','line_number':1254,'multiline':True]
['text':' returns 0 if successful, otherwise returns 1 upon error ','line_number':1257,'multiline':True]
['text':' allocate space for samples ','line_number':1260,'multiline':True]
['text':' generate samples ','line_number':1270,'multiline':True]
['text':' init dictionary params ','line_number':1295,'multiline':True]
['text':' fill in dictionary content ','line_number':1300,'multiline':True]
['text':' finalize dictionary with random samples ','line_number':1303,'multiline':True]
['text':' allocate space statically ','line_number':1321,'multiline':True]
['text':'-*******************************************************
*  Test Mode
********************************************************','line_number':1331,'multiline':True]
['text':' test decoding the generated data with the simple API ','line_number':1339,'multiline':True]
['text':' test decoding the generated data with the streaming API ','line_number':1355,'multiline':True]
['text':' error ','line_number':1374,'multiline':True]
['text':' frame is done ','line_number':1375,'multiline':True]
['text':' force decoding to be done in chunks ','line_number':1377,'multiline':True]
['text':' create variables ','line_number':1394,'multiline':True]
['text':' generate random dictionary ','line_number':1403,'multiline':True]
['text':' return 0 on success ','line_number':1404,'multiline':True]
['text':' get dict info ','line_number':1415,'multiline':True]
['text':' manually decompress and check difference ','line_number':1422,'multiline':True]
['text':' Test frame ','line_number':1424,'multiline':True]
['text':' Test block ','line_number':1430,'multiline':True]
['text':' avoid big dictionaries ','line_number':1528,'multiline':True]
['text':'-*******************************************************
*  File I/O
********************************************************','line_number':1569,'multiline':True]
['text':' allocate space for the dictionary ','line_number':1649,'multiline':True]
['text':' randomly generate the dictionary ','line_number':1656,'multiline':True]
['text':' write out dictionary ','line_number':1664,'multiline':True]
['text':' generate random compressed/decompressed files ','line_number':1677,'multiline':True]
['text':'_*******************************************************
*  Command line
********************************************************','line_number':1726,'multiline':True]
['text':'! readU32FromChar() :
    @return : unsigned integer value read from input in `char` format
    allows and interprets K, KB, KiB, M, MB and MiB suffix.
    Will also modify `*stringPtr`, advancing it to position where it stopped reading.
    Note : function result can overflow if digit string > MAX_UINT ','line_number':1777,'multiline':True]
['text':'* longCommandWArg() :
 *  check if *stringPtr is the same as longCommand.
 *  If yes, @return 1 and advances *stringPtr to the position which immediately follows longCommand.
 *  @return 0 and doesn't modify *stringPtr otherwise.
 ','line_number':1797,'multiline':True]
['text':' 10 kB default ','line_number':1820,'multiline':True]
['text':' Check command line ','line_number':1825,'multiline':True]
['text':' Protection if argument empty ','line_number':1828,'multiline':True]
['text':' Handle commands. Aggregated commands are allowed ','line_number':1830,'multiline':True]
['text':' for (argNb=1; argNb<argc; argNb++) ','line_number':1905,'multiline':True]
['text':' should generate files with a dictionary ','line_number':1932,'multiline':True]
