['text':'
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 * All rights reserved.
 *
 * This source code is licensed under both the BSD-style license (found in the
 * LICENSE file in the root directory of this source tree) and the GPLv2 (found
 * in the COPYING file in the root directory of this source tree).
 * You may select, at your option, one of the above-listed licenses.
 ','line_number':1,'multiline':True]
['text':'-************************************
*  Dependencies
*************************************','line_number':12,'multiline':True]
['text':' Ensure platform.h is compiled first; also : compiler options, UTIL_GetFileSize ','line_number':15,'multiline':True]
['text':' malloc ','line_number':16,'multiline':True]
['text':' fprintf, fopen, ftello64 ','line_number':17,'multiline':True]
['text':' strcmp ','line_number':18,'multiline':True]
['text':' log ','line_number':19,'multiline':True]
['text':' SEC_TO_MICRO, UTIL_time_t, UTIL_clockSpanMicro, UTIL_clockSpanNano, UTIL_getTime ','line_number':22,'multiline':True]
['text':' ZSTD_parameters, ZSTD_estimateCCtxSize ','line_number':24,'multiline':True]
['text':' should not be needed ','line_number':31,'multiline':True]
['text':'-************************************
*  Constants
*************************************','line_number':34,'multiline':True]
['text':' 1 second ','line_number':41,'multiline':True]
['text':' ensured being >= ZSTD_maxCLevel() in BMK_init_level_constraints() ','line_number':42,'multiline':True]
['text':'-************************************
*  Macros
*************************************','line_number':52,'multiline':True]
['text':' can't be -1 b/c fadt uses -1 ','line_number':86,'multiline':True]
['text':'-************************************
*  Setup for Adding new params
*************************************','line_number':97,'multiline':True]
['text':' indices for each of the variables ','line_number':101,'multiline':True]
['text':' forceAttachDict ','line_number':110,'multiline':True]
['text':' minimum value of parameters ','line_number':118,'multiline':True]
['text':' maximum value of parameters ','line_number':122,'multiline':True]
['text':' # of values parameters can take on ','line_number':126,'multiline':True]
['text':' ZSTD_cctxSetParameter() index to set ','line_number':130,'multiline':True]
['text':' names of parameters ','line_number':134,'multiline':True]
['text':' shortened names of parameters ','line_number':138,'multiline':True]
['text':' maps value from { 0 to rangetable[param] - 1 } to valid paramvalues ','line_number':142,'multiline':True]
['text':' using default: triggers -Wswitch-enum ','line_number':147,'multiline':True]
['text':' 0, 1, 2 -> -1, 0, 1 ','line_number':156,'multiline':True]
['text':' inverse of rangeMap ','line_number':166,'multiline':True]
['text':' bin search ','line_number':178,'multiline':True]
['text':' display of params ','line_number':204,'multiline':True]
['text':' force attach dict ','line_number':227,'multiline':True]
['text':'-************************************
*  Benchmark Parameters/Global Variables
*************************************','line_number':243,'multiline':True]
['text':' General Utility ','line_number':247,'multiline':True]
['text':' about 27 hours ','line_number':248,'multiline':True]
['text':' to be used to compare solution finding speeds to compare to original ','line_number':249,'multiline':True]
['text':' Display ','line_number':253,'multiline':True]
['text':' can selectively silence some params when displaying them ','line_number':255,'multiline':True]
['text':' Mode Selection ','line_number':257,'multiline':True]
['text':' For cLevel Table generation ','line_number':262,'multiline':True]
['text':' For optimizer ','line_number':266,'multiline':True]
['text':' Initialized at the beginning of main w/ emptyParams() function ','line_number':267,'multiline':True]
['text':' range 1 - 100, measure of how strict  ','line_number':269,'multiline':True]
['text':' bytes / sec ','line_number':292,'multiline':True]
['text':' bytes ','line_number':294,'multiline':True]
['text':' linked list sorted ascending by cSize & cSpeed ','line_number':303,'multiline':True]
['text':'
 * Additional Global Variables (Defined Above Use)
 * g_level_constraint
 * g_alreadyTested
 * g_maxTries
 * g_clockGranularity
 ','line_number':305,'multiline':True]
['text':'-*******************************************************
*  General Util Functions
********************************************************','line_number':314,'multiline':True]
['text':' nullified useless params, to ensure count stats ','line_number':318,'multiline':True]
['text':' cleans up params for memoizing / display ','line_number':319,'multiline':True]
['text':' no forceAttachDict ','line_number':343,'multiline':True]
['text':' set all other params to their minimum value ','line_number':359,'multiline':True]
['text':' equivalent of ZSTD_adjustCParams for paramValues_t ','line_number':366,'multiline':True]
['text':' retain value of all other parameters ','line_number':374,'multiline':True]
['text':' accuracy in seconds only, span can be multiple years ','line_number':399,'multiline':True]
['text':' cParamUnsetMin() :
 * if any parameter in paramTarget is not yet set,
 * it will receive its corresponding minimal value.
 * This function never fails ','line_number':437,'multiline':True]
['text':' varies ptr by nbChanges respecting varyParams','line_number':492,'multiline':True]
['text':' Completely random parameter selection ','line_number':512,'multiline':True]
['text':'-************************************
*  Optimizer Util Functions
*************************************','line_number':545,'multiline':True]
['text':' checks results are feasible ','line_number':549,'multiline':True]
['text':' hill climbing value for part 1 ','line_number':557,'multiline':True]
['text':' Scoring here is a linear reward for all set constraints normalized between 0 and 1
 * (with 0 at 0 and 1 being fully fulfilling the constraint), summed with a logarithmic
 * bonus to exceeding the constraint value. We also give linear ratio for compression ratio.
 * The constant factors are experimental.
 ','line_number':558,'multiline':True]
['text':' calculates normalized squared euclidean distance of result1 if it is in the first quadrant relative to lvlRes ','line_number':580,'multiline':True]
['text':' return true if r2 strictly better than r1 ','line_number':592,'multiline':True]
['text':' edge case of highBit not working for 0 ','line_number':635,'multiline':True]
['text':' Uses too much memory ','line_number':683,'multiline':True]
['text':' wlog too much bigger than src size ','line_number':684,'multiline':True]
['text':' chainLog larger than windowLog','line_number':685,'multiline':True]
['text':' searchLog larger than chainLog ','line_number':686,'multiline':True]
['text':' hashLog larger than windowLog + 1 ','line_number':687,'multiline':True]
['text':'-************************************
*  Display Functions
*************************************','line_number':691,'multiline':True]
['text':' BMK_paramValues_into_commandLine() :
 * transform a set of parameters paramValues_t
 * into a command line compatible with `zstd` syntax
 * and writes it into FILE* f.
 * f must be already opened and writable ','line_number':695,'multiline':True]
['text':' comparison function: ','line_number':719,'multiline':True]
['text':' strictly better, strictly worse, equal, speed-side adv, size-side adv ','line_number':720,'multiline':True]
['text':' maybe have epsilon-eq to limit table size? ','line_number':727,'multiline':True]
['text':' r2 is smaller but not faster. ','line_number':735,'multiline':True]
['text':' r2 is faster but not smaller ','line_number':740,'multiline':True]
['text':' 0 for insertion, 1 for no insert ','line_number':744,'multiline':True]
['text':' maintain invariant speedSizeCompare(n, n->next) = SPEED_RESULT ','line_number':745,'multiline':True]
['text':' first node to insert ','line_number':751,'multiline':True]
['text':' never insert if better ','line_number':771,'multiline':True]
['text':' insert after first size result, then return ','line_number':787,'multiline':True]
['text':' never insert if better ','line_number':807,'multiline':True]
['text':' insert before first size result, then return ','line_number':825,'multiline':True]
['text':' Writes to f the results of a parameter benchmark ','line_number':866,'multiline':True]
['text':' when used with --optimize, will only print results better than previously discovered ','line_number':867,'multiline':True]
['text':' global winner used for constraints ','line_number':899,'multiline':True]
['text':' cSize, cSpeed, dSpeed, cMem ','line_number':900,'multiline':True]
['text':' the table ','line_number':933,'multiline':True]
['text':' BMK_print_cLevelEntry() :
 * Writes one cLevelTable entry, for one level.
 * f must exist, be already opened, and be seekable.
 * this function cannot error.
 ','line_number':953,'multiline':True]
['text':' print cParams.
     * assumption : all cParams are present and in order in the following range ','line_number':971,'multiline':True]
['text':' print comment ','line_number':978,'multiline':True]
['text':' BMK_print_cLevelTable() :
 * print candidate compression table into proposed FILE* f.
 * f must exist, be already opened, and be seekable.
 * winners must be a table of NB_LEVELS_TRACKED+1 elements winnerInfo_t, all entries presumed initialized
 * this function cannot error.
 ','line_number':990,'multiline':True]
['text':' BMK_saveAndPrint_cLevelTable() :
 * save candidate compression table into FILE* f,
 * and then to stdout.
 * f must exist, be already opened, and be seekable.
 * winners must be a table of NB_LEVELS_TRACKED+1 elements winnerInfo_t, all entries presumed initialized
 * this function cannot error.
 ','line_number':1011,'multiline':True]
['text':'-*******************************************************
*  Functions to Benchmark
********************************************************','line_number':1030,'multiline':True]
['text':' additional argument is just the context ','line_number':1070,'multiline':True]
['text':' specific to this version, which is only used in paramgrill ','line_number':1077,'multiline':True]
['text':' additional argument is just the context ','line_number':1081,'multiline':True]
['text':'-************************************
*  Data Initialization Functions
*************************************','line_number':1110,'multiline':True]
['text':' srcBuffer will be freed by freeBuffers now ','line_number':1160,'multiline':True]
['text':' allocates buffer's arguments. returns success / failure ','line_number':1238,'multiline':True]
['text':' buffer too small - stop after this file ','line_number':1283,'multiline':True]
['text':' check overflow ','line_number':1329,'multiline':True]
['text':'-************************************
*  Optimizer Memoization Functions
*************************************','line_number':1357,'multiline':True]
['text':' return: new length ','line_number':1361,'multiline':True]
['text':' keep old array, will need if iter over strategy. ','line_number':1362,'multiline':True]
['text':' prunes useless params ','line_number':1363,'multiline':True]
['text':' res should be NUM_PARAMS size ','line_number':1378,'multiline':True]
['text':' constructs varArray from paramValues_t style parameter ','line_number':1379,'multiline':True]
['text':' pass in using dict. ','line_number':1380,'multiline':True]
['text':' don't use fadt if no dictionary ','line_number':1386,'multiline':True]
['text':' length of memo table given free variables ','line_number':1393,'multiline':True]
['text':' strategy separated by table ','line_number':1398,'multiline':True]
['text':' returns unique index in memotable of compression parameters ','line_number':1404,'multiline':True]
['text':' exclude strategy from memotable ','line_number':1410,'multiline':True]
['text':' should never happen, stop compiler warnings ','line_number':1426,'multiline':True]
['text':' frees all allocated memotables ','line_number':1441,'multiline':True]
['text':' secret contract :
 * mtAll is a table of (ZSTD_STRATEGY_MAX+1) memoTable_t ','line_number':1442,'multiline':True]
['text':' inits memotables for all (including mallocs), all strategies ','line_number':1453,'multiline':True]
['text':' takes unsanitized varyParams ','line_number':1454,'multiline':True]
['text':' no memoization ','line_number':1472,'multiline':True]
['text':' use hash table ','line_number':1493,'multiline':True]
['text':' provide some option to only use hash tables? ','line_number':1493,'multiline':True]
['text':' Sets pc to random unmeasured set of parameters ','line_number':1510,'multiline':True]
['text':' specify strategy ','line_number':1511,'multiline':True]
['text':' only pick unpicked params. ','line_number':1525,'multiline':True]
['text':'-************************************
*  Benchmarking Functions
*************************************','line_number':1529,'multiline':True]
['text':' Replicate functionality of benchMemAdvanced, but with pre-split src / dst buffers ','line_number':1543,'multiline':True]
['text':' The purpose is so that sufficient information is returned so that a decompression call to benchMemInvertible is possible ','line_number':1544,'multiline':True]
['text':' BMK_benchMemAdvanced(srcBuffer,srcSize, dstBuffer, dstSize, fileSizes, nbFiles, 0, &cParams, dictBuffer, dictSize, ctx, dctx, 0, "File", &adv); ','line_number':1545,'multiline':True]
['text':' nbSeconds used in same way as in BMK_advancedParams_t ','line_number':1546,'multiline':True]
['text':' if in decodeOnly, then srcPtr's will be compressed blocks, and uncompressedBlocks will be written to dstPtrs ','line_number':1547,'multiline':True]
['text':' dictionary nullable, nothing else though. ','line_number':1548,'multiline':True]
['text':' note : it would be a lot better if this function was present in benchzstd.c,
 * sharing code with benchMemAdvanced(), since it's technically a part of it ','line_number':1549,'multiline':True]
['text':' init ','line_number':1572,'multiline':True]
['text':' warming up memory ','line_number':1576,'multiline':True]
['text':' Bench ','line_number':1585,'multiline':True]
['text':' init args ','line_number':1587,'multiline':True]
['text':' should rather be a function or a constant ','line_number':1638,'multiline':True]
['text':' should rather be a function or a constant ','line_number':1656,'multiline':True]
['text':' Bench ','line_number':1671,'multiline':True]
['text':' should be a function ','line_number':1676,'multiline':True]
['text':' BMK_benchParam() :
 * benchmark a set of `cParams` over sample `buf`,
 * store the result in `resultPtr`.
 * @return : 0 if success, 1 if error ','line_number':1681,'multiline':True]
['text':' Benchmarking which stops when we are sufficiently sure the solution is infeasible / worse than the winner ','line_number':1698,'multiline':True]
['text':' anything with worse ratio in feas is definitely worse, discard ','line_number':1722,'multiline':True]
['text':' calculate uncertainty in compression / decompression runs ','line_number':1727,'multiline':True]
['text':' optimistic assumption of benchres ','line_number':1738,'multiline':True]
['text':' disregard infeasible results in feas mode ','line_number':1743,'multiline':True]
['text':' disregard if resultMax < winner in infeas mode ','line_number':1744,'multiline':True]
['text':' compare by resultScore when in infeas ','line_number':1751,'multiline':True]
['text':' compare by compareResultLT when in feas ','line_number':1752,'multiline':True]
['text':' Memoized benchmarking, won't benchmark anything which has already been benchmarked before. ','line_number':1763,'multiline':True]
['text':' what happens if collisions are frequent ','line_number':1787,'multiline':True]
['text':' establish speed objectives (relative to level 1) ','line_number':1811,'multiline':True]
['text':' only --ultra levels >= 20 can use windowlog > 23 ','line_number':1816,'multiline':True]
['text':' not fast enough for this level ','line_number':1835,'multiline':True]
['text':' not fast enough for this level ','line_number':1837,'multiline':True]
['text':' too much memory for this level ','line_number':1839,'multiline':True]
['text':' forbidden strategy for this level ','line_number':1841,'multiline':True]
['text':' first solution for this cLevel ','line_number':1843,'multiline':True]
['text':' Validate solution is "good enough" ','line_number':1852,'multiline':True]
['text':' uses too much Decompression memory for too little benefit ','line_number':1874,'multiline':True]
['text':' uses too much memory for compression for too little benefit ','line_number':1882,'multiline':True]
['text':' too large compression speed difference for the compression benefit ','line_number':1891,'multiline':True]
['text':' too large decompression speed difference for the compression benefit ','line_number':1900,'multiline':True]
['text':'-************************************
*  Compression Level Table Generation Functions
*************************************','line_number':1923,'multiline':True]
['text':' init to zero ','line_number':1930,'multiline':True]
['text':' exclude faster if already played params ','line_number':1959,'multiline':True]
['text':' test ','line_number':1963,'multiline':True]
['text':' improvement found => search more ','line_number':1969,'multiline':True]
['text':' use some random entry ','line_number':1983,'multiline':True]
['text':' defaults nonCompression parameters ','line_number':1984,'multiline':True]
['text':' BMK_generate_cLevelTable() :
 * test a large number of configurations
 * and distribute them across compression levels according to speed conditions.
 * display and save all intermediate results into rfName = "grillResults.txt".
 * the function automatically stops after g_timeLimit_s.
 * this function cannot error, it directly exit() in case of problem.
 ','line_number':1993,'multiline':True]
['text':' init ','line_number':2007,'multiline':True]
['text':' baseline config for level 1 ','line_number':2015,'multiline':True]
['text':' populate initial solution ','line_number':2022,'multiline':True]
['text':' start tests ','line_number':2031,'multiline':True]
['text':' end summary ','line_number':2038,'multiline':True]
['text':' clean up','line_number':2042,'multiline':True]
['text':'-************************************
*  Single Benchmark Functions
*************************************','line_number':2047,'multiline':True]
['text':' bench ','line_number':2096,'multiline':True]
['text':' benchFiles() :
 * note: while this function takes a table of filenames,
 * in practice, only the first filename will be used ','line_number':2112,'multiline':True]
['text':'-************************************
*  Local Optimization Functions
*************************************','line_number':2152,'multiline':True]
['text':' One iteration of hill climbing. Specifically, it first tries all
 * valid parameter configurations w/ manhattan distance 1 and picks the best one
 * failing that, it progressively tries candidates further and further away (up to #dim + 2)
 * if it finds a candidate exceeding winnerInfo, it will repeat. Otherwise, it will stop the
 * current stage of hill climbing.
 * Each iteration of hill climbing proceeds in 2 'phases'. Phase 1 climbs according to
 * the resultScore function, which is effectively a linear increase in reward until it reaches
 * the constraint-satisfying value, it which point any excess results in only logarithmic reward.
 * This aims to find some constraint-satisfying point.
 * Phase 2 optimizes in accordance with what the original function sets out to maximize, with
 * all feasible solutions valued over all infeasible solutions.
 ','line_number':2156,'multiline':True]
['text':' sanitize all params here.
 * all generation after random should be sanitized. (maybe sanitize random)
 ','line_number':2169,'multiline':True]
['text':'
     * cparam - currently considered 'center'
     * candidate - params to benchmark/results
     * winner - best option found so far.
     ','line_number':2177,'multiline':True]
['text':' all dist-1 candidates ','line_number':2200,'multiline':True]
['text':' synonymous with better when called w/ infeasibleBM ','line_number':2214,'multiline':True]
['text':' for (offset = -1; offset <= 1; offset += 2) ','line_number':2222,'multiline':True]
['text':' for (i = 0; i < varLen; i++) ','line_number':2223,'multiline':True]
['text':' varLen is # dimensions ','line_number':2229,'multiline':True]
['text':' param error checking already done here ','line_number':2234,'multiline':True]
['text':' synonymous with better in this case','line_number':2242,'multiline':True]
['text':' for(dist = 2; dist < varLen + 2; dist++) ','line_number':2255,'multiline':True]
['text':' infeas -> feas -> stop ','line_number':2257,'multiline':True]
['text':' note with change, bestFeasible may not necessarily be feasible, but if one has been benchmarked, it will be. ','line_number':2261,'multiline':True]
['text':' Optimizes for a fixed strategy ','line_number':2271,'multiline':True]
['text':' flexible parameters: iterations of failed climbing (or if we do non-random, maybe this is when everything is close to visited)
   weight more on visit for bad results, less on good results/more on later results / ones with more failures.
   allocate memoTable here.
 ','line_number':2273,'multiline':True]
['text':' so climb is given the right fixed strategy ','line_number':2288,'multiline':True]
['text':' to pass ZSTD_checkCParams ','line_number':2290,'multiline':True]
['text':' goes best, best-1, best+1, best-2, ... ','line_number':2313,'multiline':True]
['text':' return 0 if nothing remaining ','line_number':2314,'multiline':True]
['text':' bestStrategy >= currentStrategy ','line_number':2329,'multiline':True]
['text':' experiment with playing with this and decay value ','line_number':2344,'multiline':True]
['text':' main fn called when using --optimize ','line_number':2346,'multiline':True]
['text':' Does strategy selection by benchmarking default compression levels
 * then optimizes by strategy, starting with the best one and moving
 * progressively moving further away by number
 * args:
 * fileNamesTable - list of files to benchmark
 * nbFiles - length of fileNamesTable
 * dictFileName - name of dictionary file if one, else NULL
 * target - performance constraints (cSpeed, dSpeed, cMem)
 * paramTarget - parameter constraints (i.e. restriction search space to where strategy = ZSTD_fast)
 * cLevel - compression level to exceed (all solutions must be > lvl in cSpeed + ratio)
 ','line_number':2347,'multiline':True]
['text':' sanitize paramTarget ','line_number':2396,'multiline':True]
['text':' default strictnesses ','line_number':2408,'multiline':True]
['text':' use level'ing mode instead of normal target mode ','line_number':2423,'multiline':True]
['text':' Don't want it to return anything worse than the best known result ','line_number':2442,'multiline':True]
['text':' bench ','line_number':2456,'multiline':True]
['text':' find best solution from default params ','line_number':2473,'multiline':True]
['text':' if pass time limit, stop ','line_number':2490,'multiline':True]
['text':' if the current params are too slow, just stop. ','line_number':2491,'multiline':True]
['text':' start 'real' optimization ','line_number':2500,'multiline':True]
['text':' one iterations of hill climbing with the level-defined parameters. ','line_number':2506,'multiline':True]
['text':' no solution found ','line_number':2536,'multiline':True]
['text':' end summary ','line_number':2543,'multiline':True]
['text':'-************************************
*  CLI parsing functions
*************************************','line_number':2559,'multiline':True]
['text':'* longCommandWArg() :
 *  check if *stringPtr is the same as longCommand.
 *  If yes, @return 1 and advances *stringPtr to the position which immediately follows longCommand.
 * @return 0 and doesn't modify *stringPtr otherwise.
 * from zstdcli.c
 ','line_number':2563,'multiline':True]
['text':'! readU32FromChar() :
 * @return : unsigned integer value read from input in `char` format.
 *  allows and interprets K, KB, KiB, M, MB and MiB suffix.
 *  Will also modify `*stringPtr`, advancing it to position where it stopped reading.
 *  Note : function will exit() program if digit sequence overflows ','line_number':2582,'multiline':True]
['text':' skip `K` or `M` ','line_number':2609,'multiline':True]
['text':' 1 if successful parse, 0 otherwise ','line_number':2675,'multiline':True]
['text':' reset and try again ','line_number':2690,'multiline':True]
['text':'-************************************
*  Main
*************************************','line_number':2696,'multiline':True]
['text':' for exename ','line_number':2718,'multiline':True]
['text':' check the end of string ','line_number':2746,'multiline':True]
['text':' Decode command (note : aggregated commands are allowed) ','line_number':2750,'multiline':True]
['text':' check the end of string ','line_number':2762,'multiline':True]
['text':' if not return, success ','line_number':2765,'multiline':True]
['text':' Decode command (note : aggregated commands are allowed) ','line_number':2768,'multiline':True]
['text':' check the end of string ','line_number':2800,'multiline':True]
['text':' Display help on usage ','line_number':2810,'multiline':True]
['text':' Pause at the end (hidden option) ','line_number':2814,'multiline':True]
['text':' Sample compressibility (when no file provided) ','line_number':2817,'multiline':True]
['text':' Run Single conf ','line_number':2825,'multiline':True]
['text':' search length ','line_number':2848,'multiline':True]
['text':' target length ','line_number':2852,'multiline':True]
['text':' strategy ','line_number':2856,'multiline':True]
['text':' forceAttachDict ','line_number':2860,'multiline':True]
['text':' target level1 speed objective, in MB/s ','line_number':2877,'multiline':True]
['text':' cut input into blocks ','line_number':2883,'multiline':True]
['text':' caps runtime (in seconds) ','line_number':2890,'multiline':True]
['text':' load dictionary file (only applicable for optimizer rn) ','line_number':2909,'multiline':True]
['text':' last argument, return error. ','line_number':2911,'multiline':True]
['text':' Unknown command ','line_number':2921,'multiline':True]
['text':' if (argument[0]=='-') ','line_number':2926,'multiline':True]
['text':' first provided filename is input ','line_number':2928,'multiline':True]
['text':' Welcome message ','line_number':2932,'multiline':True]
