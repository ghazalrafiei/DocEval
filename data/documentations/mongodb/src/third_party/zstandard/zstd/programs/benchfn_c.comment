['text':'
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 * All rights reserved.
 *
 * This source code is licensed under both the BSD-style license (found in the
 * LICENSE file in the root directory of this source tree) and the GPLv2 (found
 * in the COPYING file in the root directory of this source tree).
 * You may select, at your option, one of the above-listed licenses.
 ','line_number':1,'multiline':True]
['text':' *************************************
*  Includes
**************************************','line_number':13,'multiline':True]
['text':' malloc, free ','line_number':16,'multiline':True]
['text':' memset ','line_number':17,'multiline':True]
['text':' assert ','line_number':18,'multiline':True]
['text':' UTIL_time_t, UTIL_getTime ','line_number':20,'multiline':True]
['text':' *************************************
*  Constants
**************************************','line_number':24,'multiline':True]
['text':' 1 second ','line_number':27,'multiline':True]
['text':' 1 second ','line_number':28,'multiline':True]
['text':' *************************************
*  Debug errors
**************************************','line_number':35,'multiline':True]
['text':' fprintf ','line_number':39,'multiline':True]
['text':' error without displaying ','line_number':47,'multiline':True]
['text':' Abort execution if a condition is not met ','line_number':56,'multiline':True]
['text':' *************************************
*  Benchmarking an arbitrary function
**************************************','line_number':60,'multiline':True]
['text':' warning : this function will stop program execution if outcome is invalid !
 *           check outcome validity first, using BMK_isValid_runResult() ','line_number':69,'multiline':True]
['text':' initFn will be measured once, benchFn will be measured `nbLoops` times ','line_number':101,'multiline':True]
['text':' initFn is optional, provide NULL if none ','line_number':102,'multiline':True]
['text':' benchFn must return a size_t value that errorFn can interpret ','line_number':103,'multiline':True]
['text':' takes # of blocks and list of size & stuff for each. ','line_number':104,'multiline':True]
['text':' can report result of benchFn for each block into blockResult. ','line_number':105,'multiline':True]
['text':' blockResult is optional, provide NULL if this information is not required ','line_number':106,'multiline':True]
['text':' note : time per loop can be reported as zero if run time < timer resolution ','line_number':107,'multiline':True]
['text':' minimum nbLoops is 1 ','line_number':112,'multiline':True]
['text':' init ','line_number':114,'multiline':True]
['text':' warm up and erase result buffer ','line_number':117,'multiline':True]
['text':' benchmark ','line_number':120,'multiline':True]
['text':' for (loopNb = 0; loopNb < nbLoops; loopNb++) ','line_number':138,'multiline':True]
['text':' ====  Benchmarking any function, providing intermediate results  ==== ','line_number':149,'multiline':True]
['text':' typedef'd to BMK_timedFnState_t within bench.h ','line_number':158,'multiline':True]
['text':' malloc() error ','line_number':163,'multiline':True]
['text':' static assert : a compilation failure indicates that BMK_timedFnState_shell is not large enough ','line_number':173,'multiline':True]
['text':' force tfs to be aligned at its next best position ','line_number':174,'multiline':True]
['text':' provides the minimal alignment restriction for BMK_timedFnState_t ','line_number':175,'multiline':True]
['text':' buffer must be properly aligned ','line_number':179,'multiline':True]
['text':' hopefully large enough : must be larger than any potential measurement ','line_number':192,'multiline':True]
['text':' Tells if nb of seconds set in timedFnState for all runs is spent.
 * note : this function will return 1 if BMK_benchFunctionTimed() has actually errored. ','line_number':198,'multiline':True]
['text':' 0.5 seconds ','line_number':209,'multiline':True]
['text':' error : move out ','line_number':222,'multiline':True]
['text':' estimate nbLoops for next run to last approximately 1 second ','line_number':231,'multiline':True]
['text':' previous run was too short : blindly increase workload by x multiplier ','line_number':236,'multiline':True]
['text':' avoid overflow ','line_number':238,'multiline':True]
['text':' don't report results for which benchmark run time was too small : increased risks of rounding errors ','line_number':243,'multiline':True]
['text':' while (!completed) ','line_number':253,'multiline':True]
