['text':'
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 * All rights reserved.
 *
 * This source code is licensed under both the BSD-style license (found in the
 * LICENSE file in the root directory of this source tree) and the GPLv2 (found
 * in the COPYING file in the root directory of this source tree).
 * You may select, at your option, one of the above-listed licenses.
 ','line_number':1,'multiline':True]
['text':' benchfn :
 * benchmark any function on a set of input
 * providing result in nanoSecPerRun
 * or detecting and returning an error
 ','line_number':12,'multiline':True]
['text':' ===  Dependencies  === ','line_number':25,'multiline':True]
['text':' size_t ','line_number':26,'multiline':True]
['text':' ====  Benchmark any function, iterated on a set of blocks  ==== ','line_number':29,'multiline':True]
['text':' BMK_runTime_t: valid result return type ','line_number':31,'multiline':True]
['text':' time per iteration (over all blocks) ','line_number':34,'multiline':True]
['text':' sum of return values ','line_number':35,'multiline':True]
['text':' BMK_runOutcome_t:
 * type expressing the outcome of a benchmark run by BMK_benchFunction(),
 * which can be either valid or invalid.
 * benchmark outcome can be invalid if errorFn is provided.
 * BMK_runOutcome_t must be considered "opaque" : never access its members directly.
 * Instead, use its assigned methods :
 * BMK_isSuccessful_runOutcome, BMK_extract_runTime, BMK_extract_errorResult.
 * The structure is only described here to allow its allocation on stack. ','line_number':39,'multiline':True]
['text':' prototypes for benchmarked functions ','line_number':55,'multiline':True]
['text':' BMK_benchFunction() parameters are provided via the following structure.
 * A structure is preferable for readability,
 * as the number of parameters required is fairly large.
 * No initializer is provided, because it doesn't make sense to provide some "default" :
 * all parameters must be specified by the caller.
 * optional parameters are labelled explicitly, and accept value NULL when not used ','line_number':61,'multiline':True]
['text':' the function to benchmark, over the set of blocks ','line_number':68,'multiline':True]
['text':' pass custom parameters to benchFn  :
                               * (*benchFn)(srcBuffers[i], srcSizes[i], dstBuffers[i], dstCapacities[i], benchPayload) ','line_number':69,'multiline':True]
['text':' (*initFn)(initPayload) is run once per run, at the beginning. ','line_number':71,'multiline':True]
['text':' Both arguments can be NULL, in which case nothing is run. ','line_number':72,'multiline':True]
['text':' errorFn will check each return value of benchFn over each block, to determine if it failed or not.
                               * errorFn can be NULL, in which case no check is performed.
                               * errorFn must return 0 when benchFn was successful, and >= 1 if it detects an error.
                               * Execution is stopped as soon as an error is detected.
                               * the triggering return value can be retrieved using BMK_extract_errorResult(). ','line_number':73,'multiline':True]
['text':' number of blocks to operate benchFn on.
                               * It's also the size of all array parameters :
                               * srcBuffers, srcSizes, dstBuffers, dstCapacities, blockResults ','line_number':78,'multiline':True]
['text':' read-only array of buffers to be operated on by benchFn ','line_number':81,'multiline':True]
['text':' read-only array containing sizes of srcBuffers ','line_number':82,'multiline':True]
['text':' array of buffers to be written into by benchFn. This array is not optional, it must be provided even if unused by benchfn. ','line_number':83,'multiline':True]
['text':' read-only array containing capacities of dstBuffers. This array must be present. ','line_number':84,'multiline':True]
['text':' Optional: store the return value of benchFn for each block. Use NULL if this result is not requested. ','line_number':85,'multiline':True]
['text':' BMK_benchFunction() :
 * This function benchmarks benchFn and initFn, providing a result.
 *
 * params : see description of BMK_benchParams_t above.
 * nbLoops: defines number of times benchFn is run over the full set of blocks.
 *          Minimum value is 1. A 0 is interpreted as a 1.
 *
 * @return: can express either an error or a successful result.
 *          Use BMK_isSuccessful_runOutcome() to check if benchmark was successful.
 *          If yes, extract the result with BMK_extract_runTime(),
 *          it will contain :
 *              .sumOfReturn : the sum of all return values of benchFn through all of blocks
 *              .nanoSecPerRun : time per run of benchFn + (time for initFn / nbLoops)
 *          .sumOfReturn is generally intended for functions which return a # of bytes written into dstBuffer,
 *              in which case, this value will be the total amount of bytes written into dstBuffer.
 *
 * blockResults : when provided (!= NULL), and when benchmark is successful,
 *                params.blockResults contains all return values of `benchFn` over all blocks.
 *                when provided (!= NULL), and when benchmark failed,
 *                params.blockResults contains return values of `benchFn` over all blocks preceding and including the failed block.
 ','line_number':89,'multiline':True]
['text':' check first if the benchmark was successful or not ','line_number':114,'multiline':True]
['text':' If the benchmark was successful, extract the result.
 * note : this function will abort() program execution if benchmark failed !
 *        always check if benchmark was successful first !
 ','line_number':117,'multiline':True]
['text':' when benchmark failed, it means one invocation of `benchFn` failed.
 * The failure was detected by `errorFn`, operating on return values of `benchFn`.
 * Returns the faulty return value.
 * note : this function will abort() program execution if benchmark did not fail.
 *        always check if benchmark failed first !
 ','line_number':123,'multiline':True]
['text':' ====  Benchmark any function, returning intermediate results  ==== ','line_number':133,'multiline':True]
['text':' state information tracking benchmark session ','line_number':135,'multiline':True]
['text':' BMK_benchTimedFn() :
 * Similar to BMK_benchFunction(), most arguments being identical.
 * Automatically determines `nbLoops` so that each result is regularly produced at interval of about run_ms.
 * Note : minimum `nbLoops` is 1, therefore a run may last more than run_ms, and possibly even more than total_ms.
 * Usage - initialize timedFnState, select benchmark duration (total_ms) and each measurement duration (run_ms)
 *         call BMK_benchTimedFn() repetitively, each measurement is supposed to last about run_ms
 *         Check if total time budget is spent or exceeded, using BMK_isCompleted_TimedFn()
 ','line_number':138,'multiline':True]
['text':' Tells if duration of all benchmark runs has exceeded total_ms
 ','line_number':149,'multiline':True]
['text':' BMK_createTimedFnState() and BMK_resetTimedFnState() :
 * Create/Set BMK_timedFnState_t for next benchmark session,
 * which shall last a minimum of total_ms milliseconds,
 * producing intermediate results, paced at interval of (approximately) run_ms.
 ','line_number':153,'multiline':True]
['text':' BMK_timedFnState_shell and BMK_initStatic_timedFnState() :
 * Makes it possible to statically allocate a BMK_timedFnState_t on stack.
 * BMK_timedFnState_shell is only there to allocate space,
 * never ever access its members.
 * BMK_timedFnState_t() actually accepts any buffer.
 * It will check if provided buffer is large enough and is correctly aligned,
 * and will return NULL if conditions are not respected.
 ','line_number':163,'multiline':True]
['text':' must be aligned on 8-bytes boundaries ','line_number':174,'multiline':True]
['text':' BENCH_FN_H_23876 ','line_number':179,'multiline':True]
