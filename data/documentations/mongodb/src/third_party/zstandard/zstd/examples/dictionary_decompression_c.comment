['text':'
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 * All rights reserved.
 *
 * This source code is licensed under both the BSD-style license (found in the
 * LICENSE file in the root directory of this source tree) and the GPLv2 (found
 * in the COPYING file in the root directory of this source tree).
 * You may select, at your option, one of the above-listed licenses.
 ','line_number':1,'multiline':True]
['text':' printf','line_number':12,'multiline':False]
['text':' free','line_number':13,'multiline':False]
['text':' presumes zstd library is installed','line_number':14,'multiline':False]
['text':' Helper functions, CHECK(), and CHECK_ZSTD()','line_number':15,'multiline':False]
['text':' createDict() :
   `dictFileName` is supposed to have been created using `zstd --train` ','line_number':17,'multiline':True]
['text':' Read the content size from the frame header. For simplicity we require
     * that it is always present. By default, zstd will write the content size
     * in the header when it is known. If you can't guarantee that the frame
     * content size is always written into the header, either use streaming
     * decompression, or ZSTD_decompressBound().
     ','line_number':34,'multiline':True]
['text':' Check that the dictionary ID matches.
     * If a non-zstd dictionary is used, then both will be zero.
     * By default zstd always writes the dictionary ID into the frame.
     * Zstd will check if there is a dictionary ID mismatch as well.
     ','line_number':45,'multiline':True]
['text':' Decompress using the dictionary.
     * If you need to control the decompression parameters, then use the
     * advanced API: ZSTD_DCtx_setParameter(), ZSTD_DCtx_refDDict(), and
     * ZSTD_decompressDCtx().
     ','line_number':57,'multiline':True]
['text':' When zstd knows the content size, it will error if it doesn't match. ','line_number':66,'multiline':True]
['text':' success ','line_number':69,'multiline':True]
['text':' load dictionary only once ','line_number':89,'multiline':True]
