['text':'
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 * All rights reserved.
 *
 * This source code is licensed under both the BSD-style license (found in the
 * LICENSE file in the root directory of this source tree) and the GPLv2 (found
 * in the COPYING file in the root directory of this source tree).
 * You may select, at your option, one of the above-listed licenses.
 ','line_number':1,'multiline':True]
['text':' fprintf','line_number':12,'multiline':False]
['text':' free','line_number':13,'multiline':False]
['text':' presumes zstd library is installed','line_number':14,'multiline':False]
['text':' Helper functions, CHECK(), and CHECK_ZSTD()','line_number':15,'multiline':False]
['text':' Guarantee to successfully flush at least one complete compressed block in all circumstances. ','line_number':23,'multiline':True]
['text':' This loop assumes that the input file is one or more concatenated zstd
     * streams. This example won't work if there is trailing non-zstd data at
     * the end, but streaming decompression in general handles this case.
     * ZSTD_decompressStream() returns 0 exactly when the frame is completed,
     * and doesn't consume input after the frame.
     ','line_number':29,'multiline':True]
['text':' Given a valid frame, zstd won't consume the last byte of the frame
         * until it has flushed all of the decompressed data of the frame.
         * Therefore, instead of checking if the return code is 0, we can
         * decompress just check if input.pos < input.size.
         ','line_number':42,'multiline':True]
['text':' The return code is zero if the frame is complete, but there may
             * be multiple frames concatenated together. Zstd will automatically
             * reset the context when a frame is complete. Still, calling
             * ZSTD_DCtx_reset() can be useful to reset the context to a clean
             * state, for instance if the last decompression call returned an
             * error.
             ','line_number':49,'multiline':True]
['text':' The last return value from ZSTD_decompressStream did not end on a
         * frame, but we reached the end of the file! We assume this is an
         * error, and the input was truncated.
         ','line_number':69,'multiline':True]
