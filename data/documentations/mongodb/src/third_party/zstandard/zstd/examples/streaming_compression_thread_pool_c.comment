['text':'
 * Copyright (c) Martin Liska, SUSE, Meta Platforms, Inc. and affiliates.
 * All rights reserved.
 *
 * This source code is licensed under both the BSD-style license (found in the
 * LICENSE file in the root directory of this source tree) and the GPLv2 (found
 * in the COPYING file in the root directory of this source tree).
 * You may select, at your option, one of the above-listed licenses.
 ','line_number':1,'multiline':True]
['text':' printf','line_number':12,'multiline':False]
['text':' free','line_number':13,'multiline':False]
['text':' memset, strcat, strlen','line_number':14,'multiline':False]
['text':' presumes zstd library is installed','line_number':15,'multiline':False]
['text':' Helper functions, CHECK(), and CHECK_ZSTD()','line_number':16,'multiline':False]
['text':' Open the input and output files. ','line_number':35,'multiline':True]
['text':' Create the input and output buffers.
     * They may be any size, but we recommend using these functions to size them.
     * Performance will only suffer significantly for very tiny buffers.
     ','line_number':38,'multiline':True]
['text':' Create the context. ','line_number':47,'multiline':True]
['text':' Set any parameters you want.
     * Here we set the compression level, and enable the checksum.
     ','line_number':56,'multiline':True]
['text':' This loop reads from the input file, compresses that entire chunk,
     * and writes all output produced to the output file.
     ','line_number':63,'multiline':True]
['text':' Select the flush mode.
         * If the read may not be finished (read == toRead) we use
         * ZSTD_e_continue. If this is the last chunk, we use ZSTD_e_end.
         * Zstd optimizes the case where the first flush mode is ZSTD_e_end,
         * since it knows it is compressing the entire source in one pass.
         ','line_number':69,'multiline':True]
['text':' Set the input buffer to what we just read.
         * We compress until the input buffer is empty, each time flushing the
         * output.
         ','line_number':77,'multiline':True]
['text':' Compress into the output buffer and write all of the output to
             * the file so we can reuse the buffer next iteration.
             ','line_number':84,'multiline':True]
['text':' If we're on the last chunk we're finished when zstd returns 0,
             * which means its consumed all the input AND finished the frame.
             * Otherwise, we're finished when we've consumed all the input.
             ','line_number':91,'multiline':True]
