['text':' gzread.c contains minimal changes required to be compiled with zlibWrapper:
 * - gz_statep was converted to union to work with -Wstrict-aliasing=1      ','line_number':1,'multiline':True]
['text':' gzread.c -- zlib functions for reading gzip files
 * Copyright (C) 2004, 2005, 2010, 2011, 2012, 2013, 2016 Mark Adler
 * For conditions of distribution and use, see https://www.zlib.net/zlib_license.html
 ','line_number':4,'multiline':True]
['text':' fix for Visual Studio, which doesn't support ssize_t type.
 * see https://github.com/facebook/zstd/issues/1800#issuecomment-545945050 ','line_number':11,'multiline':True]
['text':' Local functions ','line_number':19,'multiline':True]
['text':' Use read() to load a buffer -- return -1 on error, otherwise 0.  Read from
   state.state->fd, and update state.state->eof, state.state->err, and state.state->msg as appropriate.
   This function needs to loop on read(), since read() is not guaranteed to
   read the number of bytes requested, depending on the type of descriptor. ','line_number':28,'multiline':True]
['text':' Load up input buffer and set eof flag if last data loaded -- return -1 on
   error, 0 otherwise.  Note that the eof flag is set when the end of the input
   file is reached, even though there may be unused data in the buffer.  Once
   that data has been used, no more attempts will be made to read the file.
   If strm->avail_in != 0, then the current data is moved to the beginning of
   the input buffer, and then the remainder of the buffer is loaded with the
   available data from the input file. ','line_number':60,'multiline':True]
['text':' copy what's there to the start ','line_number':76,'multiline':True]
['text':' Look for gzip header, set up for inflate or copy.  state.state->x.have must be 0.
   If this is the first time in, allocate required memory.  state.state->how will be
   left unchanged if there is no more input data available, will be set to COPY
   if there is no gzip header and direct copying will be performed, or it will
   be set to GZIP for decompression.  If direct copying, then leftover input
   data from the input buffer will be copied to the output buffer.  In that
   case, all further file reads will be directly to either the output buffer or
   a user buffer.  If decompressing, the inflate state will be initialized.
   gz_look() will return 0 on success or -1 on failure. ','line_number':93,'multiline':True]
['text':' allocate read buffers and inflate memory ','line_number':107,'multiline':True]
['text':' allocate buffers ','line_number':109,'multiline':True]
['text':' allocate inflate memory ','line_number':120,'multiline':True]
['text':' gunzip ','line_number':126,'multiline':True]
['text':' get at least the magic bytes in the input buffer ','line_number':135,'multiline':True]
['text':' look for gzip magic bytes -- if there, do gzip decoding (note: there is
       a logical dilemma here when considering the case of a partially written
       gzip file, to wit, if a single 31 byte is written, then we cannot tell
       whether this is a single-byte file, or just a partially written gzip
       file -- for here we assume that if a gzip file is being written, then
       the header will be written in a single operation, so that reading a
       single byte is sufficient indication that it is not a gzip file) ','line_number':143,'multiline':True]
['text':' gz header ','line_number':151,'multiline':True]
['text':' zstd header ','line_number':152,'multiline':True]
['text':' no gzip header -- if we were decoding gzip before, then this is trailing
       garbage.  Ignore the trailing garbage and finish. ','line_number':159,'multiline':True]
['text':' doing raw i/o, copy any leftover input to output -- this assumes that
       the output buffer is larger than the input buffer, which also assures
       space for gzungetc() ','line_number':168,'multiline':True]
['text':' Decompress from input to the provided next_out and avail_out in the state.
   On return, state.state->x.have and state.state->x.next point to the just decompressed
   data.  If the gzip stream completes, state.state->how is reset to LOOK to look for
   the next gzip stream or raw data, once state.state->x.have is depleted.  Returns 0
   on success, -1 on failure. ','line_number':182,'multiline':True]
['text':' fill output buffer up to end of deflate stream ','line_number':194,'multiline':True]
['text':' get more input for inflate() ','line_number':197,'multiline':True]
['text':' decompress and handle errors ','line_number':205,'multiline':True]
['text':' deflate stream invalid ','line_number':216,'multiline':True]
['text':' update available output ','line_number':223,'multiline':True]
['text':' if the gzip stream completed successfully, look for another ','line_number':227,'multiline':True]
['text':' good decompression ','line_number':231,'multiline':True]
['text':' Fetch data and put it in the output buffer.  Assumes state.state->x.have is 0.
   Data is either copied from the input file or decompressed from the input
   file depending on state.state->how.  If state.state->how is LOOK, then a gzip header is
   looked for to determine whether to copy or decompress.  Returns -1 on error,
   otherwise 0.  gz_fetch() will leave state.state->how as COPY or GZIP unless the
   end of the input file has been reached and all data has been processed.  ','line_number':235,'multiline':True]
['text':' -> LOOK, COPY (only if never GZIP), or GZIP ','line_number':248,'multiline':True]
['text':' -> COPY ','line_number':254,'multiline':True]
['text':' -> GZIP or LOOK (if end of gzip stream) ','line_number':260,'multiline':True]
['text':' Skip len uncompressed bytes of output.  Return -1 on error, 0 on success. ','line_number':270,'multiline':True]
['text':' skip over len bytes or reach end-of-file, whichever comes first ','line_number':277,'multiline':True]
['text':' skip over whatever is in output buffer ','line_number':279,'multiline':True]
['text':' output buffer empty -- return if we're at the end of the input ','line_number':289,'multiline':True]
['text':' need more data to skip -- load up output buffer ','line_number':293,'multiline':True]
['text':' get more output, looking for header if required ','line_number':295,'multiline':True]
['text':' Read len bytes into buf from file, or less than len up to the end of the
   input.  Return the number of bytes read.  If zero is returned, either the
   end of file was reached, or there was an error.  state.state->err must be
   consulted in that case to determine which. ','line_number':302,'multiline':True]
['text':' if len is zero, avoid unnecessary operations ','line_number':314,'multiline':True]
['text':' process a skip request ','line_number':318,'multiline':True]
['text':' get len bytes to buf, or less than len if at the end ','line_number':325,'multiline':True]
['text':' set n to the maximum amount of len that fits in an unsigned int ','line_number':328,'multiline':True]
['text':' first just try copying data from the output buffer ','line_number':333,'multiline':True]
['text':' output buffer empty -- return if we're at the end of the input ','line_number':342,'multiline':True]
['text':' tried to read past end ','line_number':344,'multiline':True]
['text':' need output data -- for small len or new stream load up our output
           buffer ','line_number':348,'multiline':True]
['text':' get more output, looking for header if required ','line_number':351,'multiline':True]
['text':' no progress yet -- go back to copy above ','line_number':354,'multiline':True]
['text':' the copy above assures that we will leave with space in the
               output buffer, allowing at least one gzungetc() to succeed ','line_number':355,'multiline':True]
['text':' large len -- read directly into user buffer ','line_number':359,'multiline':True]
['text':' read directly ','line_number':360,'multiline':True]
['text':' large len -- decompress directly into user buffer ','line_number':365,'multiline':True]
['text':' state.state->how == GZIP ','line_number':366,'multiline':True]
['text':' update progress ','line_number':375,'multiline':True]
['text':' return number of bytes read into user buffer ','line_number':382,'multiline':True]
['text':' -- see zlib.h -- ','line_number':386,'multiline':True]
['text':' get internal structure ','line_number':394,'multiline':True]
['text':' check that we're reading and that there's no (serious) error ','line_number':399,'multiline':True]
['text':' since an int is returned, make sure len fits in one, otherwise return
       with an error (this avoids a flaw in the interface) ','line_number':404,'multiline':True]
['text':' read len or fewer bytes to buf ','line_number':411,'multiline':True]
['text':' check for an error ','line_number':414,'multiline':True]
['text':' return the number of bytes read (this is assured to fit in an int) ','line_number':418,'multiline':True]
['text':' -- see zlib.h -- ','line_number':422,'multiline':True]
['text':' get internal structure ','line_number':432,'multiline':True]
['text':' check that we're reading and that there's no (serious) error ','line_number':437,'multiline':True]
['text':' compute bytes to read -- error on overflow ','line_number':442,'multiline':True]
['text':' read len or fewer bytes to buf, return the number of full items read ','line_number':449,'multiline':True]
['text':' -- see zlib.h -- ','line_number':453,'multiline':True]
['text':' get internal structure ','line_number':478,'multiline':True]
['text':' check that we're reading and that there's no (serious) error ','line_number':483,'multiline':True]
['text':' try output buffer (no need to check for skip request) ','line_number':488,'multiline':True]
['text':' nothing there -- try gz_read() ','line_number':495,'multiline':True]
['text':' -- see zlib.h -- ','line_number':506,'multiline':True]
['text':' get internal structure ','line_number':513,'multiline':True]
['text':' check that we're reading and that there's no (serious) error ','line_number':518,'multiline':True]
['text':' process a skip request ','line_number':523,'multiline':True]
['text':' can't push EOF ','line_number':530,'multiline':True]
['text':' if output buffer empty, put byte at end (allows more pushing) ','line_number':534,'multiline':True]
['text':' if no room, give up (must have already done a gzungetc()) ','line_number':544,'multiline':True]
['text':' slide output data if needed and insert byte before existing data ','line_number':550,'multiline':True]
['text':' -- see zlib.h -- ','line_number':566,'multiline':True]
['text':' check parameters and get internal structure ','line_number':577,'multiline':True]
['text':' check that we're reading and that there's no (serious) error ','line_number':582,'multiline':True]
['text':' process a skip request ','line_number':587,'multiline':True]
['text':' copy output bytes up to new line or len - 1, whichever comes first --
       append a terminating zero to the string (we don't check for a zero in
       the contents, let the user worry about that) ','line_number':594,'multiline':True]
['text':' assure that something is in the output buffer ','line_number':600,'multiline':True]
['text':' error ','line_number':602,'multiline':True]
['text':' end of file ','line_number':603,'multiline':True]
['text':' read past end ','line_number':604,'multiline':True]
['text':' return what we have ','line_number':605,'multiline':True]
['text':' look for end-of-line in current output buffer ','line_number':608,'multiline':True]
['text':' copy through end-of-line, or remainder if not found ','line_number':614,'multiline':True]
['text':' return terminated string, or if nothing, end of file ','line_number':623,'multiline':True]
['text':' -- see zlib.h -- ','line_number':630,'multiline':True]
['text':' get internal structure ','line_number':636,'multiline':True]
['text':' if the state is not known, but we can find out, then do so (this is
       mainly for right after a gzopen() or gzdopen()) ','line_number':641,'multiline':True]
['text':' return 1 if transparent, 0 if processing a gzip stream ','line_number':646,'multiline':True]
['text':' -- see zlib.h -- ','line_number':650,'multiline':True]
['text':' get internal structure ','line_number':657,'multiline':True]
['text':' check that we're reading ','line_number':662,'multiline':True]
['text':' free memory and close file ','line_number':666,'multiline':True]
