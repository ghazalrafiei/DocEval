['text':'
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 * All rights reserved.
 *
 * This source code is licensed under both the BSD-style license (found in the
 * LICENSE file in the root directory of this source tree) and the GPLv2 (found
 * in the COPYING file in the root directory of this source tree).
 ','line_number':1,'multiline':True]
['text':' Large Files support, SET_BINARY_MODE ','line_number':9,'multiline':True]
['text':' WorkQueue outlives ThreadPool so in the case of error we are certain','line_number':59,'multiline':False]
['text':' we don't accidentally try to call push() on it after it is destroyed','line_number':60,'multiline':False]
['text':' Initialize the (de)compression thread pool with numThreads','line_number':65,'multiline':False]
['text':' Run the reader thread on an extra thread','line_number':67,'multiline':False]
['text':' Add a job that reads the input and starts all the compression jobs','line_number':70,'multiline':False]
['text':' Start writing','line_number':82,'multiline':False]
['text':' Add a job that reads the input and starts all the decompression jobs','line_number':85,'multiline':False]
['text':' Start writing','line_number':89,'multiline':False]
['text':' Check if input file is a directory','line_number':117,'multiline':False]
['text':' Check if the output file exists and then open it','line_number':139,'multiline':False]
['text':' Setup the shared state','line_number':171,'multiline':False]
['text':' Open the input file','line_number':179,'multiline':False]
['text':' Open the output file','line_number':185,'multiline':False]
['text':' (de)compress the file','line_number':196,'multiline':False]
['text':' Delete the input file if necessary','line_number':201,'multiline':False]
['text':' Be sure that we are done and have written everything before we delete','line_number':203,'multiline':False]
['text':' Returns 1 if any of the files failed to (de)compress.','line_number':220,'multiline':False]
['text':'/ Construct a `ZSTD_inBuffer` that points to the data in `buffer`.','line_number':224,'multiline':False]
['text':'*
 * Advance `buffer` and `inBuffer` by the amount of data read, as indicated by
 * `inBuffer.pos`.
 ','line_number':229,'multiline':True]
['text':'/ Construct a `ZSTD_outBuffer` that points to the data in `buffer`.','line_number':241,'multiline':False]
['text':'*
 * Split `buffer` and advance `outBuffer` by the amount of data written, as
 * indicated by `outBuffer.pos`.
 ','line_number':246,'multiline':True]
['text':'*
 * Stream chunks of input from `in`, compress it, and stream it out to `out`.
 *
 * @param state        The shared state
 * @param in           Queue that we `pop()` input buffers from
 * @param out          Queue that we `push()` compressed output buffers to
 * @param maxInputSize An upper bound on the size of the input
 ','line_number':258,'multiline':True]
['text':' Initialize the CCtx','line_number':273,'multiline':False]
['text':' Allocate space for the result','line_number':285,'multiline':False]
['text':' Read a buffer in from the input queue','line_number':290,'multiline':False]
['text':' Compress the whole buffer and send it to the output queue','line_number':293,'multiline':False]
['text':' Compress','line_number':299,'multiline':False]
['text':' Split the compressed data off outBuffer and pass to the output queue','line_number':305,'multiline':False]
['text':' Forget about the data we already compressed','line_number':307,'multiline':False]
['text':' Write the epilog','line_number':312,'multiline':False]
['text':'*
 * Calculates how large each independently compressed frame should be.
 *
 * @param size       The size of the source if known, 0 otherwise
 * @param numThreads The number of threads available to run compression jobs on
 * @param params     The zstd parameters to be used for compression
 ','line_number':328,'multiline':True]
['text':' Not validated to work correctly for window logs > 23.','line_number':341,'multiline':False]
['text':' It will definitely fail if windowLog + 2 is >= 4GB because','line_number':342,'multiline':False]
['text':' the skippable frame can only store sizes up to 4GB.','line_number':343,'multiline':False]
['text':'/ Determines the status of the file descriptor `fd`.','line_number':350,'multiline':False]
['text':' anonymous namespace','line_number':359,'multiline':False]
['text':'*
 * Reads `size` data in chunks of `chunkSize` and puts it into `queue`.
 * Will read less if an error or EOF occurs.
 * Returns the status of the file after all of the reads have occurred.
 ','line_number':361,'multiline':True]
['text':' Break the input up into chunks of size `step` and compress each chunk','line_number':394,'multiline':False]
['text':' independently.','line_number':395,'multiline':False]
['text':' Make a new input queue that we will put the chunk's input data into.','line_number':400,'multiline':False]
['text':' Make a new output queue that compress will put the compressed data into.','line_number':403,'multiline':False]
['text':' Start compression in the thread pool','line_number':405,'multiline':False]
['text':' Pass the output queue to the writer thread.','line_number':410,'multiline':False]
['text':' Fill the input queue for the compression job we just started','line_number':413,'multiline':False]
['text':'*
 * Decompress a frame, whose data is streamed into `in`, and stream the output
 * to `out`.
 *
 * @param state        The shared state
 * @param in           Queue that we `pop()` input buffers from. It contains
 *                      exactly one compressed frame.
 * @param out          Queue that we `push()` decompressed output buffers to
 ','line_number':420,'multiline':True]
['text':' Initialize the DCtx','line_number':435,'multiline':False]
['text':' Read a buffer in from the input queue','line_number':450,'multiline':False]
['text':' Decompress the whole buffer and send it to the output queue','line_number':453,'multiline':False]
['text':' Allocate a buffer with at least outSize bytes.','line_number':455,'multiline':False]
['text':' Decompress','line_number':458,'multiline':False]
['text':' Pass the buffer with the decompressed data to the output queue','line_number':465,'multiline':False]
['text':' Advance past the input we already read','line_number':467,'multiline':False]
['text':' The frame is over, prepare to (maybe) start a new frame','line_number':470,'multiline':False]
['text':' We've given ZSTD_decompressStream all of our data, but there may still','line_number':478,'multiline':False]
['text':' be data to read.','line_number':479,'multiline':False]
['text':' Allocate a buffer with at least outSize bytes.','line_number':481,'multiline':False]
['text':' Pass in no input.','line_number':484,'multiline':False]
['text':' Decompress','line_number':486,'multiline':False]
['text':' Pass the buffer with the decompressed data to the output queue','line_number':493,'multiline':False]
['text':' Split the source up into its component frames.','line_number':506,'multiline':False]
['text':' If we find our recognized skippable frame we know the next frames size','line_number':507,'multiline':False]
['text':' which means that we can decompress each standard frame in independently.','line_number':508,'multiline':False]
['text':' Otherwise, we will decompress using only one decompression task.','line_number':509,'multiline':False]
['text':' Make a new input queue that we will put the frames's bytes into.','line_number':513,'multiline':False]
['text':' Make a output queue that decompress will put the decompressed data into','line_number':516,'multiline':False]
['text':' Calculate the size of the next frame.','line_number':521,'multiline':False]
['text':' frameSize is 0 if the frame info can't be decoded.','line_number':522,'multiline':False]
['text':' We hit a non SkippableFrame, so this will be the last job.','line_number':535,'multiline':False]
['text':' Make sure that we don't use too much memory','line_number':536,'multiline':False]
['text':' Start decompression in the thread pool','line_number':540,'multiline':False]
['text':' Pass the output queue to the writer thread','line_number':544,'multiline':False]
['text':' We hit a non SkippableFrame ==> not compressed by pzstd or corrupted','line_number':547,'multiline':False]
['text':' Pass the rest of the source to this decompression task','line_number':548,'multiline':False]
['text':' Fill the input queue for the decompression job we just started','line_number':557,'multiline':False]
['text':'/ Write `data` to `fd`, returns true iff success.','line_number':564,'multiline':False]
['text':' Grab the output queue for each decompression job (in order).','line_number':586,'multiline':False]
['text':' If we are compressing and want to write skippable frames we can't','line_number':592,'multiline':False]
['text':' start writing before compression is done because we need to know the','line_number':593,'multiline':False]
['text':' compressed size.','line_number':594,'multiline':False]
['text':' Wait for the compressed size to be available and write skippable frame','line_number':595,'multiline':False]
['text':' For each chunk of the frame: Pop it from the queue and write it','line_number':604,'multiline':False]
