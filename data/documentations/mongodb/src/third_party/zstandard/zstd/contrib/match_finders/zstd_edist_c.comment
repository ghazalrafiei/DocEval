['text':'
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 * All rights reserved.
 *
 * This source code is licensed under both the BSD-style license (found in the
 * LICENSE file in the root directory of this source tree) and the GPLv2 (found
 * in the COPYING file in the root directory of this source tree).
 * You may select, at your option, one of the above-listed licenses.
 ','line_number':1,'multiline':True]
['text':'-*************************************
*  Dependencies
**************************************','line_number':11,'multiline':True]
['text':' Currently relies on qsort when combining contiguous matches. This can probably 
 * be avoided but would require changes to the algorithm. The qsort is far from 
 * the bottleneck in this algorithm even for medium sized files so it's probably 
 * not worth trying to address ','line_number':15,'multiline':True]
['text':'-*************************************
*  Constants
**************************************','line_number':25,'multiline':True]
['text':' Just a sential for the entries of the diagonal matrix ','line_number':29,'multiline':True]
['text':' How large should a snake be to be considered a 'big' snake. 
 * For an explanation of what a 'snake' is with respect to the 
 * edit distance matrix, see the linked paper in zstd_edist.h ','line_number':32,'multiline':True]
['text':' After how many iterations should we start to use the heuristic
 * based on 'big' snakes ','line_number':37,'multiline':True]
['text':' After how many iterations should be just give up and take 
 * the best available edit script for this round ','line_number':41,'multiline':True]
['text':'-*************************************
*  Structures
**************************************','line_number':45,'multiline':True]
['text':' Entries of the forward diagonal stored here ','line_number':60,'multiline':True]
['text':' Entries of the backward diagonal stored here.
                                  *   Note: this buffer and the 'forwardDiag' buffer 
                                  *   are contiguous. See the ZSTD_eDist_genSequences ','line_number':61,'multiline':True]
['text':' Accumulate matches of length 1 in this buffer. 
                                  *   In a subsequence post-processing step, we combine 
                                  *   contiguous matches. ','line_number':64,'multiline':True]
['text':' The mid diagonal for the dictionary ','line_number':71,'multiline':True]
['text':' The mid diagonal for the source ','line_number':72,'multiline':True]
['text':' Should we use heuristics for the low part ','line_number':73,'multiline':True]
['text':' Should we use heuristics for the high part ','line_number':74,'multiline':True]
['text':'-*************************************
*  Internal
**************************************','line_number':77,'multiline':True]
['text':' Main loop for updating diag entries. Unless useHeuristics is 
     * set to false, this loop will run until it finds the minimal 
     * edit script ','line_number':106,'multiline':True]
['text':' Everything under this point is a heuristic. Using these will 
         * substantially speed up the match finding. In some cases, taking 
         * the total match finding time from several minutes to seconds.
         * Of course, the caveat is that the edit script found may no longer 
         * be optimal ','line_number':195,'multiline':True]
['text':' Big snake heuristic ','line_number':201,'multiline':True]
['text':' More general 'too expensive' heuristic ','line_number':270,'multiline':True]
['text':' Found matches while traversing from the low end ','line_number':341,'multiline':True]
['text':' Found matches while traversing from the high end ','line_number':348,'multiline':True]
['text':' If the low and high end end up touching. If we wanted to make 
     * note of the differences like most diffing algorithms do, we would 
     * do so here. In our case, we're only concerned with matches 
     * Note: if you wanted to find the edit distance of the algorithm, 
     *   you could just accumulate the cost for an insertion/deletion 
     *   below. ','line_number':355,'multiline':True]
['text':' Reaching this point means inserting src[srcLow] into 
             * the current position of dict ','line_number':363,'multiline':True]
['text':' Reaching this point means deleting dict[dictLow] from 
             * the current position of dict ','line_number':369,'multiline':True]
['text':' The matches from the approach above will all be of the form 
 * (dictIdx, srcIdx, 1). This method combines contiguous matches 
 * of length MINMATCH or greater. Matches less than MINMATCH 
 * are discarded ','line_number':397,'multiline':True]
['text':' Create a new buffer to put the combined matches into 
     * and memcpy to state->matches after ','line_number':403,'multiline':True]
['text':' Make sure that the srcIdx and dictIdx are in sorted order.
     * The combination step won't work otherwise ','line_number':412,'multiline':True]
['text':' Discard matches that are less than MINMATCH ','line_number':425,'multiline':True]
['text':'-*************************************
*  Internal utils
**************************************','line_number':462,'multiline':True]
['text':' This is a pretty naive recursive implementation that should only
 * be used for quick tests obviously. Don't try and run this on a 
 * GB file or something. There are faster implementations. Use those
 * if you need to run it for large files. ','line_number':476,'multiline':True]
['text':'-*************************************
*  API
**************************************','line_number':525,'multiline':True]
