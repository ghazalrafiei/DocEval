['text':'','line_number':1,'multiline':False]
['text':' buffered_stream.hpp','line_number':2,'multiline':False]
['text':' ~~~~~~~~~~~~~~~~~~~','line_number':3,'multiline':False]
['text':'','line_number':4,'multiline':False]
['text':' Copyright (c) 2003-2018 Christopher M. Kohlhoff (chris at kohlhoff dot com)','line_number':5,'multiline':False]
['text':'','line_number':6,'multiline':False]
['text':' Distributed under the Boost Software License, Version 1.0. (See accompanying','line_number':7,'multiline':False]
['text':' file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':8,'multiline':False]
['text':'','line_number':9,'multiline':False]
['text':' defined(_MSC_VER) && (_MSC_VER >= 1200)','line_number':16,'multiline':False]
['text':'/ Adds buffering to the read- and write-related operations of a stream.','line_number':32,'multiline':False]
['text':'*
 * The buffered_stream class template can be used to add buffering to the
 * synchronous and asynchronous read and write operations of a stream.
 *
 * @par Thread Safety
 * @e Distinct @e objects: Safe.@n
 * @e Shared @e objects: Unsafe.
 *
 * @par Concepts:
 * AsyncReadStream, AsyncWriteStream, Stream, SyncReadStream, SyncWriteStream.
 ','line_number':33,'multiline':True]
['text':'/ The type of the next layer.','line_number':49,'multiline':False]
['text':'/ The type of the lowest layer.','line_number':52,'multiline':False]
['text':'/ The type of the executor associated with the object.','line_number':55,'multiline':False]
['text':'/ Construct, passing the specified argument to initialise the next layer.','line_number':58,'multiline':False]
['text':'/ Construct, passing the specified argument to initialise the next layer.','line_number':66,'multiline':False]
['text':'/ Get a reference to the next layer.','line_number':75,'multiline':False]
['text':'/ Get a reference to the lowest layer.','line_number':81,'multiline':False]
['text':'/ Get a const reference to the lowest layer.','line_number':87,'multiline':False]
['text':'/ Get the executor associated with the object.','line_number':93,'multiline':False]
['text':'/ (Deprecated: Use get_executor().) Get the io_context associated with the','line_number':100,'multiline':False]
['text':'/ object.','line_number':101,'multiline':False]
['text':'/ (Deprecated: Use get_executor().) Get the io_context associated with the','line_number':107,'multiline':False]
['text':'/ object.','line_number':108,'multiline':False]
['text':' !defined(ASIO_NO_DEPRECATED)','line_number':113,'multiline':False]
['text':'/ Close the stream.','line_number':115,'multiline':False]
['text':'/ Close the stream.','line_number':121,'multiline':False]
['text':'/ Flush all data from the buffer to the next layer. Returns the number of','line_number':128,'multiline':False]
['text':'/ bytes written to the next layer on the last write operation. Throws an','line_number':129,'multiline':False]
['text':'/ exception on failure.','line_number':130,'multiline':False]
['text':'/ Flush all data from the buffer to the next layer. Returns the number of','line_number':136,'multiline':False]
['text':'/ bytes written to the next layer on the last write operation, or 0 if an','line_number':137,'multiline':False]
['text':'/ error occurred.','line_number':138,'multiline':False]
['text':'/ Start an asynchronous flush.','line_number':144,'multiline':False]
['text':'/ Write the given data to the stream. Returns the number of bytes written.','line_number':154,'multiline':False]
['text':'/ Throws an exception on failure.','line_number':155,'multiline':False]
['text':'/ Write the given data to the stream. Returns the number of bytes written,','line_number':162,'multiline':False]
['text':'/ or 0 if an error occurred.','line_number':163,'multiline':False]
['text':'/ Start an asynchronous write. The data being written must be valid for the','line_number':171,'multiline':False]
['text':'/ lifetime of the asynchronous operation.','line_number':172,'multiline':False]
['text':'/ Fill the buffer with some data. Returns the number of bytes placed in the','line_number':183,'multiline':False]
['text':'/ buffer as a result of the operation. Throws an exception on failure.','line_number':184,'multiline':False]
['text':'/ Fill the buffer with some data. Returns the number of bytes placed in the','line_number':190,'multiline':False]
['text':'/ buffer as a result of the operation, or 0 if an error occurred.','line_number':191,'multiline':False]
['text':'/ Start an asynchronous fill.','line_number':197,'multiline':False]
['text':'/ Read some data from the stream. Returns the number of bytes read. Throws','line_number':206,'multiline':False]
['text':'/ an exception on failure.','line_number':207,'multiline':False]
['text':'/ Read some data from the stream. Returns the number of bytes read or 0 if','line_number':214,'multiline':False]
['text':'/ an error occurred.','line_number':215,'multiline':False]
['text':'/ Start an asynchronous read. The buffer into which the data will be read','line_number':223,'multiline':False]
['text':'/ must be valid for the lifetime of the asynchronous operation.','line_number':224,'multiline':False]
['text':'/ Peek at the incoming data on the stream. Returns the number of bytes read.','line_number':235,'multiline':False]
['text':'/ Throws an exception on failure.','line_number':236,'multiline':False]
['text':'/ Peek at the incoming data on the stream. Returns the number of bytes read,','line_number':243,'multiline':False]
['text':'/ or 0 if an error occurred.','line_number':244,'multiline':False]
['text':'/ Determine the amount of data that may be read without blocking.','line_number':252,'multiline':False]
['text':'/ Determine the amount of data that may be read without blocking.','line_number':258,'multiline':False]
['text':' The buffered write stream.','line_number':265,'multiline':False]
['text':' The buffered read stream.','line_number':269,'multiline':False]
['text':' namespace asio','line_number':274,'multiline':False]
['text':' ASIO_BUFFERED_STREAM_HPP','line_number':278,'multiline':False]
