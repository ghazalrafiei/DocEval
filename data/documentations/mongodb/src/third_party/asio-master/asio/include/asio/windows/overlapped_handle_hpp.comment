['text':'','line_number':1,'multiline':False]
['text':' windows/overlapped_handle.hpp','line_number':2,'multiline':False]
['text':' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~','line_number':3,'multiline':False]
['text':'','line_number':4,'multiline':False]
['text':' Copyright (c) 2003-2018 Christopher M. Kohlhoff (chris at kohlhoff dot com)','line_number':5,'multiline':False]
['text':'','line_number':6,'multiline':False]
['text':' Distributed under the Boost Software License, Version 1.0. (See accompanying','line_number':7,'multiline':False]
['text':' file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':8,'multiline':False]
['text':'','line_number':9,'multiline':False]
['text':' defined(_MSC_VER) && (_MSC_VER >= 1200)','line_number':16,'multiline':False]
['text':' defined(ASIO_HAS_MOVE)','line_number':36,'multiline':False]
['text':'/ Provides Windows handle functionality for objects that support','line_number':45,'multiline':False]
['text':'/ overlapped I/O.','line_number':46,'multiline':False]
['text':'*
 * The windows::overlapped_handle class provides the ability to wrap a Windows
 * handle. The underlying object referred to by the handle must support
 * overlapped I/O.
 *
 * @par Thread Safety
 * @e Distinct @e objects: Safe.@n
 * @e Shared @e objects: Unsafe.
 ','line_number':47,'multiline':True]
['text':'/ The type of the executor associated with the object.','line_number':60,'multiline':False]
['text':'/ The native representation of a handle.','line_number':63,'multiline':False]
['text':'/ An overlapped_handle is always the lowest layer.','line_number':70,'multiline':False]
['text':'/ Construct an overlapped_handle without opening it.','line_number':73,'multiline':False]
['text':'*
   * This constructor creates a handle without opening it.
   *
   * @param io_context The io_context object that the handle will use to
   * dispatch handlers for any asynchronous operations performed on the handle.
   ','line_number':74,'multiline':True]
['text':'/ Construct an overlapped_handle on an existing native handle.','line_number':85,'multiline':False]
['text':'*
   * This constructor creates a handle object to hold an existing native handle.
   *
   * @param io_context The io_context object that the handle will use to
   * dispatch handlers for any asynchronous operations performed on the handle.
   *
   * @param handle A native handle.
   *
   * @throws asio::system_error Thrown on failure.
   ','line_number':86,'multiline':True]
['text':'/ Move-construct an overlapped_handle from another.','line_number':106,'multiline':False]
['text':'*
   * This constructor moves a handle from one object to another.
   *
   * @param other The other overlapped_handle object from which the move will
   * occur.
   *
   * @note Following the move, the moved-from object is in the same state as if
   * constructed using the @c overlapped_handle(io_context&) constructor.
   ','line_number':107,'multiline':True]
['text':'/ Move-assign an overlapped_handle from another.','line_number':121,'multiline':False]
['text':'*
   * This assignment operator moves a handle from one object to another.
   *
   * @param other The other overlapped_handle object from which the move will
   * occur.
   *
   * @note Following the move, the moved-from object is in the same state as if
   * constructed using the @c overlapped_handle(io_context&) constructor.
   ','line_number':122,'multiline':True]
['text':' defined(ASIO_HAS_MOVE) || defined(GENERATING_DOCUMENTATION)','line_number':136,'multiline':False]
['text':'/ (Deprecated: Use get_executor().) Get the io_context associated with the','line_number':139,'multiline':False]
['text':'/ object.','line_number':140,'multiline':False]
['text':'*
   * This function may be used to obtain the io_context object that the I/O
   * object uses to dispatch handlers for asynchronous operations.
   *
   * @return A reference to the io_context object that the I/O object will use
   * to dispatch handlers. Ownership is not transferred to the caller.
   ','line_number':141,'multiline':True]
['text':'/ (Deprecated: Use get_executor().) Get the io_context associated with the','line_number':153,'multiline':False]
['text':'/ object.','line_number':154,'multiline':False]
['text':'*
   * This function may be used to obtain the io_context object that the I/O
   * object uses to dispatch handlers for asynchronous operations.
   *
   * @return A reference to the io_context object that the I/O object will use
   * to dispatch handlers. Ownership is not transferred to the caller.
   ','line_number':155,'multiline':True]
['text':' !defined(ASIO_NO_DEPRECATED)','line_number':166,'multiline':False]
['text':'/ Get the executor associated with the object.','line_number':168,'multiline':False]
['text':'/ Get a reference to the lowest layer.','line_number':174,'multiline':False]
['text':'*
   * This function returns a reference to the lowest layer in a stack of
   * layers. Since an overlapped_handle cannot contain any further layers, it
   * simply returns a reference to itself.
   *
   * @return A reference to the lowest layer in the stack of layers. Ownership
   * is not transferred to the caller.
   ','line_number':175,'multiline':True]
['text':'/ Get a const reference to the lowest layer.','line_number':188,'multiline':False]
['text':'*
   * This function returns a const reference to the lowest layer in a stack of
   * layers. Since an overlapped_handle cannot contain any further layers, it
   * simply returns a reference to itself.
   *
   * @return A const reference to the lowest layer in the stack of layers.
   * Ownership is not transferred to the caller.
   ','line_number':189,'multiline':True]
['text':'/ Assign an existing native handle to the handle.','line_number':202,'multiline':False]
['text':'
   * This function opens the handle to hold an existing native handle.
   *
   * @param handle A native handle.
   *
   * @throws asio::system_error Thrown on failure.
   ','line_number':203,'multiline':True]
['text':'/ Assign an existing native handle to the handle.','line_number':217,'multiline':False]
['text':'
   * This function opens the handle to hold an existing native handle.
   *
   * @param handle A native handle.
   *
   * @param ec Set to indicate what error occurred, if any.
   ','line_number':218,'multiline':True]
['text':'/ Determine whether the handle is open.','line_number':232,'multiline':False]
['text':'/ Close the handle.','line_number':238,'multiline':False]
['text':'*
   * This function is used to close the handle. Any asynchronous read or write
   * operations will be cancelled immediately, and will complete with the
   * asio::error::operation_aborted error.
   *
   * @throws asio::system_error Thrown on failure.
   ','line_number':239,'multiline':True]
['text':'/ Close the handle.','line_number':253,'multiline':False]
['text':'*
   * This function is used to close the handle. Any asynchronous read or write
   * operations will be cancelled immediately, and will complete with the
   * asio::error::operation_aborted error.
   *
   * @param ec Set to indicate what error occurred, if any.
   ','line_number':254,'multiline':True]
['text':'/ Get the native handle representation.','line_number':267,'multiline':False]
['text':'*
   * This function may be used to obtain the underlying representation of the
   * handle. This is intended to allow access to native handle functionality
   * that is not otherwise provided.
   ','line_number':268,'multiline':True]
['text':'/ Cancel all asynchronous operations associated with the handle.','line_number':278,'multiline':False]
['text':'*
   * This function causes all outstanding asynchronous read or write operations
   * to finish immediately, and the handlers for cancelled operations will be
   * passed the asio::error::operation_aborted error.
   *
   * @throws asio::system_error Thrown on failure.
   ','line_number':279,'multiline':True]
['text':'/ Cancel all asynchronous operations associated with the handle.','line_number':293,'multiline':False]
['text':'*
   * This function causes all outstanding asynchronous read or write operations
   * to finish immediately, and the handlers for cancelled operations will be
   * passed the asio::error::operation_aborted error.
   *
   * @param ec Set to indicate what error occurred, if any.
   ','line_number':294,'multiline':True]
['text':'/ Protected destructor to prevent deletion through this type.','line_number':308,'multiline':False]
['text':'*
   * This function destroys the handle, cancelling any outstanding asynchronous
   * wait operations associated with the handle as if by calling @c cancel.
   ','line_number':309,'multiline':True]
['text':' namespace windows','line_number':318,'multiline':False]
['text':' namespace asio','line_number':319,'multiline':False]
['text':' defined(ASIO_HAS_WINDOWS_RANDOM_ACCESS_HANDLE)','line_number':325,'multiline':False]
['text':'   || defined(ASIO_HAS_WINDOWS_STREAM_HANDLE)','line_number':326,'multiline':False]
['text':'   || defined(GENERATING_DOCUMENTATION)','line_number':327,'multiline':False]
['text':' !defined(ASIO_ENABLE_OLD_SERVICES)','line_number':329,'multiline':False]
['text':' ASIO_WINDOWS_OVERLAPPED_HANDLE_HPP','line_number':331,'multiline':False]
