['text':'','line_number':1,'multiline':False]
['text':' basic_socket_iostream.hpp','line_number':2,'multiline':False]
['text':' ~~~~~~~~~~~~~~~~~~~~~~~~~','line_number':3,'multiline':False]
['text':'','line_number':4,'multiline':False]
['text':' Copyright (c) 2003-2018 Christopher M. Kohlhoff (chris at kohlhoff dot com)','line_number':5,'multiline':False]
['text':'','line_number':6,'multiline':False]
['text':' Distributed under the Boost Software License, Version 1.0. (See accompanying','line_number':7,'multiline':False]
['text':' file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':8,'multiline':False]
['text':'','line_number':9,'multiline':False]
['text':' defined(_MSC_VER) && (_MSC_VER >= 1200)','line_number':16,'multiline':False]
['text':' defined(ASIO_ENABLE_OLD_SERVICES)','line_number':28,'multiline':False]
['text':' A macro that should expand to:','line_number':34,'multiline':False]
['text':'   template <typename T1, ..., typename Tn>','line_number':35,'multiline':False]
['text':'   explicit basic_socket_iostream(T1 x1, ..., Tn xn)','line_number':36,'multiline':False]
['text':'     : std::basic_iostream<char>(','line_number':37,'multiline':False]
['text':'         &this->detail::socket_iostream_base<','line_number':38,'multiline':False]
['text':'           Protocol ASIO_SVC_TARG, Clock,','line_number':39,'multiline':False]
['text':'           WaitTraits ASIO_SVC_TARG1>::streambuf_)','line_number':40,'multiline':False]
['text':'   {','line_number':41,'multiline':False]
['text':'     if (rdbuf()->connect(x1, ..., xn) == 0)','line_number':42,'multiline':False]
['text':'       this->setstate(std::ios_base::failbit);','line_number':43,'multiline':False]
['text':'   }','line_number':44,'multiline':False]
['text':' This macro should only persist within this file.','line_number':45,'multiline':False]
['text':'','line_number':59,'multiline':True]
['text':' A macro that should expand to:','line_number':61,'multiline':False]
['text':'   template <typename T1, ..., typename Tn>','line_number':62,'multiline':False]
['text':'   void connect(T1 x1, ..., Tn xn)','line_number':63,'multiline':False]
['text':'   {','line_number':64,'multiline':False]
['text':'     if (rdbuf()->connect(x1, ..., xn) == 0)','line_number':65,'multiline':False]
['text':'       this->setstate(std::ios_base::failbit);','line_number':66,'multiline':False]
['text':'   }','line_number':67,'multiline':False]
['text':' This macro should only persist within this file.','line_number':68,'multiline':False]
['text':'','line_number':77,'multiline':True]
['text':' !defined(ASIO_HAS_VARIADIC_TEMPLATES)','line_number':79,'multiline':False]
['text':' A separate base class is used to ensure that the streambuf is initialised','line_number':86,'multiline':False]
['text':' prior to the basic_socket_iostream's basic_iostream base class.','line_number':87,'multiline':False]
['text':' defined(ASIO_HAS_MOVE)','line_number':113,'multiline':False]
['text':' namespace detail','line_number':119,'multiline':False]
['text':' Forward declaration with defaulted arguments.','line_number':124,'multiline':False]
['text':' defined(ASIO_HAS_BOOST_DATE_TIME)','line_number':132,'multiline':False]
['text':' && defined(ASIO_USE_BOOST_DATE_TIME_FOR_SOCKET_IOSTREAM)','line_number':133,'multiline':False]
['text':' defined(ASIO_HAS_BOOST_DATE_TIME)','line_number':137,'multiline':False]
['text':' && defined(ASIO_USE_BOOST_DATE_TIME_FOR_SOCKET_IOSTREAM)','line_number':138,'multiline':False]
['text':' !defined(ASIO_BASIC_SOCKET_IOSTREAM_FWD_DECL)','line_number':141,'multiline':False]
['text':'/ Iostream interface for a socket.','line_number':143,'multiline':False]
['text':' defined(GENERATING_DOCUMENTATION)','line_number':148,'multiline':False]
['text':' defined(GENERATING_DOCUMENTATION)','line_number':151,'multiline':False]
['text':' These typedefs are intended keep this class's implementation independent','line_number':158,'multiline':False]
['text':' of whether it's using Boost.DateClock, Boost.Chrono or std::chrono.','line_number':159,'multiline':False]
['text':' defined(ASIO_HAS_BOOST_DATE_TIME)','line_number':163,'multiline':False]
['text':' && defined(ASIO_USE_BOOST_DATE_TIME_FOR_SOCKET_IOSTREAM)','line_number':164,'multiline':False]
['text':' defined(ASIO_HAS_BOOST_DATE_TIME)','line_number':166,'multiline':False]
['text':' && defined(ASIO_USE_BOOST_DATE_TIME_FOR_SOCKET_IOSTREAM)','line_number':167,'multiline':False]
['text':'/ The protocol type.','line_number':170,'multiline':False]
['text':'/ The endpoint type.','line_number':173,'multiline':False]
['text':'/ The clock type.','line_number':176,'multiline':False]
['text':'/ (Deprecated: Use time_point.) The time type.','line_number':180,'multiline':False]
['text':'/ The time type.','line_number':183,'multiline':False]
['text':'/ (Deprecated: Use duration.) The duration type.','line_number':186,'multiline':False]
['text':'/ The duration type.','line_number':189,'multiline':False]
['text':' !defined(ASIO_NO_DEPRECATED)','line_number':195,'multiline':False]
['text':'/ Construct a basic_socket_iostream without establishing a connection.','line_number':200,'multiline':False]
['text':'/ Construct a basic_socket_iostream from the supplied socket.','line_number':211,'multiline':False]
['text':'/ Move-construct a basic_socket_iostream from another.','line_number':226,'multiline':False]
['text':'/ Move-assign a basic_socket_iostream from another.','line_number':238,'multiline':False]
['text':' defined(ASIO_HAS_STD_IOSTREAM_MOVE)','line_number':247,'multiline':False]
['text':'   || defined(GENERATING_DOCUMENTATION)','line_number':248,'multiline':False]
['text':' defined(ASIO_HAS_MOVE) || defined(GENERATING_DOCUMENTATION)','line_number':249,'multiline':False]
['text':'/ Establish a connection to an endpoint corresponding to a resolver query.','line_number':252,'multiline':False]
['text':'*
   * This constructor automatically establishes a connection based on the
   * supplied resolver query parameters. The arguments are used to construct
   * a resolver query object.
   ','line_number':253,'multiline':True]
['text':'/ Establish a connection to an endpoint corresponding to a resolver query.','line_number':277,'multiline':False]
['text':'*
   * This function automatically establishes a connection based on the supplied
   * resolver query parameters. The arguments are used to construct a resolver
   * query object.
   ','line_number':278,'multiline':True]
['text':'/ Close the connection.','line_number':296,'multiline':False]
['text':'/ Return a pointer to the underlying streambuf.','line_number':303,'multiline':False]
['text':'/ Get a reference to the underlying socket.','line_number':314,'multiline':False]
['text':'/ Get the last error associated with the stream.','line_number':320,'multiline':False]
['text':'*
   * @return An \c error_code corresponding to the last error from the stream.
   *
   * @par Example
   * To print the error associated with a failure to establish a connection:
   * @code tcp::iostream s("www.boost.org", "http");
   * if (!s)
   * {
   *   std::cout << "Error: " << s.error().message() << std::endl;
   * } @endcode
   ','line_number':321,'multiline':True]
['text':'/ (Deprecated: Use expiry().) Get the stream's expiry time as an absolute','line_number':338,'multiline':False]
['text':'/ time.','line_number':339,'multiline':False]
['text':'*
   * @return An absolute time value representing the stream's expiry time.
   ','line_number':340,'multiline':True]
['text':' !defined(ASIO_NO_DEPRECATED)','line_number':347,'multiline':False]
['text':'/ Get the stream's expiry time as an absolute time.','line_number':349,'multiline':False]
['text':'*
   * @return An absolute time value representing the stream's expiry time.
   ','line_number':350,'multiline':True]
['text':'/ Set the stream's expiry time as an absolute time.','line_number':358,'multiline':False]
['text':'*
   * This function sets the expiry time associated with the stream. Stream
   * operations performed after this time (where the operations cannot be
   * completed using the internal buffers) will fail with the error
   * asio::error::operation_aborted.
   *
   * @param expiry_time The expiry time to be used for the stream.
   ','line_number':359,'multiline':True]
['text':'/ Set the stream's expiry time relative to now.','line_number':372,'multiline':False]
['text':'*
   * This function sets the expiry time associated with the stream. Stream
   * operations performed after this time (where the operations cannot be
   * completed using the internal buffers) will fail with the error
   * asio::error::operation_aborted.
   *
   * @param expiry_time The expiry time to be used for the timer.
   ','line_number':373,'multiline':True]
['text':'/ (Deprecated: Use expiry().) Get the stream's expiry time relative to now.','line_number':387,'multiline':False]
['text':'*
   * @return A relative time value representing the stream's expiry time.
   ','line_number':388,'multiline':True]
['text':'/ (Deprecated: Use expires_after().) Set the stream's expiry time relative','line_number':396,'multiline':False]
['text':'/ to now.','line_number':397,'multiline':False]
['text':'*
   * This function sets the expiry time associated with the stream. Stream
   * operations performed after this time (where the operations cannot be
   * completed using the internal buffers) will fail with the error
   * asio::error::operation_aborted.
   *
   * @param expiry_time The expiry time to be used for the timer.
   ','line_number':398,'multiline':True]
['text':' !defined(ASIO_NO_DEPRECATED)','line_number':410,'multiline':False]
['text':' Disallow copying and assignment.','line_number':413,'multiline':False]
['text':' namespace asio','line_number':419,'multiline':False]
['text':' !defined(ASIO_HAS_VARIADIC_TEMPLATES)','line_number':426,'multiline':False]
['text':' !defined(ASIO_NO_IOSTREAM)','line_number':428,'multiline':False]
['text':' ASIO_BASIC_SOCKET_IOSTREAM_HPP','line_number':430,'multiline':False]
