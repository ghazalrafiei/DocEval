['text':'','line_number':1,'multiline':False]
['text':' strand.hpp','line_number':2,'multiline':False]
['text':' ~~~~~~~~~~','line_number':3,'multiline':False]
['text':'','line_number':4,'multiline':False]
['text':' Copyright (c) 2003-2018 Christopher M. Kohlhoff (chris at kohlhoff dot com)','line_number':5,'multiline':False]
['text':'','line_number':6,'multiline':False]
['text':' Distributed under the Boost Software License, Version 1.0. (See accompanying','line_number':7,'multiline':False]
['text':' file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':8,'multiline':False]
['text':'','line_number':9,'multiline':False]
['text':' defined(_MSC_VER) && (_MSC_VER >= 1200)','line_number':16,'multiline':False]
['text':'/ Provides serialised function invocation for any executor type.','line_number':26,'multiline':False]
['text':'/ The type of the underlying executor.','line_number':31,'multiline':False]
['text':'/ Default constructor.','line_number':34,'multiline':False]
['text':'*
   * This constructor is only valid if the underlying executor type is default
   * constructible.
   ','line_number':35,'multiline':True]
['text':'/ Construct a strand for the specified executor.','line_number':46,'multiline':False]
['text':'/ Copy constructor.','line_number':54,'multiline':False]
['text':'/ Converting constructor.','line_number':61,'multiline':False]
['text':'*
   * This constructor is only valid if the @c OtherExecutor type is convertible
   * to @c Executor.
   ','line_number':62,'multiline':True]
['text':'/ Assignment operator.','line_number':74,'multiline':False]
['text':'/ Converting assignment operator.','line_number':82,'multiline':False]
['text':'*
   * This assignment operator is only valid if the @c OtherExecutor type is
   * convertible to @c Executor.
   ','line_number':83,'multiline':True]
['text':'/ Move constructor.','line_number':97,'multiline':False]
['text':'/ Converting move constructor.','line_number':104,'multiline':False]
['text':'*
   * This constructor is only valid if the @c OtherExecutor type is convertible
   * to @c Executor.
   ','line_number':105,'multiline':True]
['text':'/ Move assignment operator.','line_number':116,'multiline':False]
['text':'/ Converting move assignment operator.','line_number':124,'multiline':False]
['text':'*
   * This assignment operator is only valid if the @c OtherExecutor type is
   * convertible to @c Executor.
   ','line_number':125,'multiline':True]
['text':' defined(ASIO_HAS_MOVE) || defined(GENERATING_DOCUMENTATION)','line_number':137,'multiline':False]
['text':'/ Destructor.','line_number':139,'multiline':False]
['text':'/ Obtain the underlying executor.','line_number':144,'multiline':False]
['text':'/ Obtain the underlying execution context.','line_number':150,'multiline':False]
['text':'/ Inform the strand that it has some outstanding work to do.','line_number':156,'multiline':False]
['text':'*
   * The strand delegates this call to its underlying executor.
   ','line_number':157,'multiline':True]
['text':'/ Inform the strand that some work is no longer outstanding.','line_number':165,'multiline':False]
['text':'*
   * The strand delegates this call to its underlying executor.
   ','line_number':166,'multiline':True]
['text':'/ Request the strand to invoke the given function object.','line_number':174,'multiline':False]
['text':'*
   * This function is used to ask the strand to execute the given function
   * object on its underlying executor. The function object will be executed
   * inside this function if the strand is not otherwise busy and if the
   * underlying executor's @c dispatch() function is also able to execute the
   * function before returning.
   *
   * @param f The function object to be called. The executor will make
   * a copy of the handler object as required. The function signature of the
   * function object must be: @code void function(); @endcode
   *
   * @param a An allocator that may be used by the executor to allocate the
   * internal storage needed for function invocation.
   ','line_number':175,'multiline':True]
['text':'/ Request the strand to invoke the given function object.','line_number':196,'multiline':False]
['text':'*
   * This function is used to ask the executor to execute the given function
   * object. The function object will never be executed inside this function.
   * Instead, it will be scheduled by the underlying executor's defer function.
   *
   * @param f The function object to be called. The executor will make
   * a copy of the handler object as required. The function signature of the
   * function object must be: @code void function(); @endcode
   *
   * @param a An allocator that may be used by the executor to allocate the
   * internal storage needed for function invocation.
   ','line_number':197,'multiline':True]
['text':'/ Request the strand to invoke the given function object.','line_number':216,'multiline':False]
['text':'*
   * This function is used to ask the executor to execute the given function
   * object. The function object will never be executed inside this function.
   * Instead, it will be scheduled by the underlying executor's defer function.
   *
   * @param f The function object to be called. The executor will make
   * a copy of the handler object as required. The function signature of the
   * function object must be: @code void function(); @endcode
   *
   * @param a An allocator that may be used by the executor to allocate the
   * internal storage needed for function invocation.
   ','line_number':217,'multiline':True]
['text':'/ Determine whether the strand is running in the current thread.','line_number':236,'multiline':False]
['text':'*
   * @return @c true if the current thread is executing a function that was
   * submitted to the strand using post(), dispatch() or defer(). Otherwise
   * returns @c false.
   ','line_number':237,'multiline':True]
['text':'/ Compare two strands for equality.','line_number':247,'multiline':False]
['text':'*
   * Two strands are equal if they refer to the same ordered, non-concurrent
   * state.
   ','line_number':248,'multiline':True]
['text':'/ Compare two strands for inequality.','line_number':257,'multiline':False]
['text':'*
   * Two strands are equal if they refer to the same ordered, non-concurrent
   * state.
   ','line_number':258,'multiline':True]
['text':' namespace asio','line_number':274,'multiline':False]
['text':' If both io_context.hpp and strand.hpp have been included, automatically','line_number':278,'multiline':False]
['text':' include the header file needed for the io_context::strand class.','line_number':279,'multiline':False]
['text':' defined(ASIO_IO_CONTEXT_HPP)','line_number':283,'multiline':False]
['text':' !defined(ASIO_NO_EXTENSIONS)','line_number':284,'multiline':False]
['text':' ASIO_STRAND_HPP','line_number':286,'multiline':False]
