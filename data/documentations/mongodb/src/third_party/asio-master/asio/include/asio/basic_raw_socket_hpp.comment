['text':'','line_number':1,'multiline':False]
['text':' basic_raw_socket.hpp','line_number':2,'multiline':False]
['text':' ~~~~~~~~~~~~~~~~~~~~','line_number':3,'multiline':False]
['text':'','line_number':4,'multiline':False]
['text':' Copyright (c) 2003-2018 Christopher M. Kohlhoff (chris at kohlhoff dot com)','line_number':5,'multiline':False]
['text':'','line_number':6,'multiline':False]
['text':' Distributed under the Boost Software License, Version 1.0. (See accompanying','line_number':7,'multiline':False]
['text':' file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':8,'multiline':False]
['text':'','line_number':9,'multiline':False]
['text':' defined(_MSC_VER) && (_MSC_VER >= 1200)','line_number':16,'multiline':False]
['text':' defined(ASIO_ENABLE_OLD_SERVICES)','line_number':28,'multiline':False]
['text':'/ Provides raw-oriented socket functionality.','line_number':34,'multiline':False]
['text':'*
 * The basic_raw_socket class template provides asynchronous and blocking
 * raw-oriented socket functionality.
 *
 * @par Thread Safety
 * @e Distinct @e objects: Safe.@n
 * @e Shared @e objects: Unsafe.
 ','line_number':35,'multiline':True]
['text':'/ The native representation of a socket.','line_number':49,'multiline':False]
['text':'/ The protocol type.','line_number':57,'multiline':False]
['text':'/ The endpoint type.','line_number':60,'multiline':False]
['text':'/ Construct a basic_raw_socket without opening it.','line_number':63,'multiline':False]
['text':'*
   * This constructor creates a raw socket without opening it. The open()
   * function must be called before data can be sent or received on the socket.
   *
   * @param io_context The io_context object that the raw socket will use
   * to dispatch handlers for any asynchronous operations performed on the
   * socket.
   ','line_number':64,'multiline':True]
['text':'/ Construct and open a basic_raw_socket.','line_number':77,'multiline':False]
['text':'*
   * This constructor creates and opens a raw socket.
   *
   * @param io_context The io_context object that the raw socket will use
   * to dispatch handlers for any asynchronous operations performed on the
   * socket.
   *
   * @param protocol An object specifying protocol parameters to be used.
   *
   * @throws asio::system_error Thrown on failure.
   ','line_number':78,'multiline':True]
['text':'/ Construct a basic_raw_socket, opening it and binding it to the given','line_number':95,'multiline':False]
['text':'/ local endpoint.','line_number':96,'multiline':False]
['text':'*
   * This constructor creates a raw socket and automatically opens it bound
   * to the specified endpoint on the local machine. The protocol used is the
   * protocol associated with the given endpoint.
   *
   * @param io_context The io_context object that the raw socket will use
   * to dispatch handlers for any asynchronous operations performed on the
   * socket.
   *
   * @param endpoint An endpoint on the local machine to which the raw
   * socket will be bound.
   *
   * @throws asio::system_error Thrown on failure.
   ','line_number':97,'multiline':True]
['text':'/ Construct a basic_raw_socket on an existing native socket.','line_number':117,'multiline':False]
['text':'*
   * This constructor creates a raw socket object to hold an existing
   * native socket.
   *
   * @param io_context The io_context object that the raw socket will use
   * to dispatch handlers for any asynchronous operations performed on the
   * socket.
   *
   * @param protocol An object specifying protocol parameters to be used.
   *
   * @param native_socket The new underlying socket implementation.
   *
   * @throws asio::system_error Thrown on failure.
   ','line_number':118,'multiline':True]
['text':'/ Move-construct a basic_raw_socket from another.','line_number':140,'multiline':False]
['text':'*
   * This constructor moves a raw socket from one object to another.
   *
   * @param other The other basic_raw_socket object from which the move
   * will occur.
   *
   * @note Following the move, the moved-from object is in the same state as if
   * constructed using the @c basic_raw_socket(io_context&) constructor.
   ','line_number':141,'multiline':True]
['text':'/ Move-assign a basic_raw_socket from another.','line_number':155,'multiline':False]
['text':'*
   * This assignment operator moves a raw socket from one object to another.
   *
   * @param other The other basic_raw_socket object from which the move
   * will occur.
   *
   * @note Following the move, the moved-from object is in the same state as if
   * constructed using the @c basic_raw_socket(io_context&) constructor.
   ','line_number':156,'multiline':True]
['text':'/ Move-construct a basic_raw_socket from a socket of another protocol type.','line_number':171,'multiline':False]
['text':'*
   * This constructor moves a raw socket from one object to another.
   *
   * @param other The other basic_raw_socket object from which the move will
   * occur.
   *
   * @note Following the move, the moved-from object is in the same state as if
   * constructed using the @c basic_raw_socket(io_context&) constructor.
   ','line_number':172,'multiline':True]
['text':'/ Move-assign a basic_raw_socket from a socket of another protocol type.','line_number':188,'multiline':False]
['text':'*
   * This assignment operator moves a raw socket from one object to another.
   *
   * @param other The other basic_raw_socket object from which the move
   * will occur.
   *
   * @note Following the move, the moved-from object is in the same state as if
   * constructed using the @c basic_raw_socket(io_context&) constructor.
   ','line_number':189,'multiline':True]
['text':' defined(ASIO_HAS_MOVE) || defined(GENERATING_DOCUMENTATION)','line_number':206,'multiline':False]
['text':'/ Destroys the socket.','line_number':208,'multiline':False]
['text':'*
   * This function destroys the socket, cancelling any outstanding asynchronous
   * operations associated with the socket as if by calling @c cancel.
   ','line_number':209,'multiline':True]
['text':'/ Send some data on a connected socket.','line_number':217,'multiline':False]
['text':'*
   * This function is used to send data on the raw socket. The function call
   * will block until the data has been sent successfully or an error occurs.
   *
   * @param buffers One ore more data buffers to be sent on the socket.
   *
   * @returns The number of bytes sent.
   *
   * @throws asio::system_error Thrown on failure.
   *
   * @note The send operation can only be used with a connected socket. Use
   * the send_to function to send data on an unconnected raw socket.
   *
   * @par Example
   * To send a single data buffer use the @ref buffer function as follows:
   * @code socket.send(asio::buffer(data, size)); @endcode
   * See the @ref buffer documentation for information on sending multiple
   * buffers in one go, and how to use it with arrays, boost::array or
   * std::vector.
   ','line_number':218,'multiline':True]
['text':'/ Send some data on a connected socket.','line_number':248,'multiline':False]
['text':'*
   * This function is used to send data on the raw socket. The function call
   * will block until the data has been sent successfully or an error occurs.
   *
   * @param buffers One ore more data buffers to be sent on the socket.
   *
   * @param flags Flags specifying how the send call is to be made.
   *
   * @returns The number of bytes sent.
   *
   * @throws asio::system_error Thrown on failure.
   *
   * @note The send operation can only be used with a connected socket. Use
   * the send_to function to send data on an unconnected raw socket.
   ','line_number':249,'multiline':True]
['text':'/ Send some data on a connected socket.','line_number':275,'multiline':False]
['text':'*
   * This function is used to send data on the raw socket. The function call
   * will block until the data has been sent successfully or an error occurs.
   *
   * @param buffers One or more data buffers to be sent on the socket.
   *
   * @param flags Flags specifying how the send call is to be made.
   *
   * @param ec Set to indicate what error occurred, if any.
   *
   * @returns The number of bytes sent.
   *
   * @note The send operation can only be used with a connected socket. Use
   * the send_to function to send data on an unconnected raw socket.
   ','line_number':276,'multiline':True]
['text':'/ Start an asynchronous send on a connected socket.','line_number':299,'multiline':False]
['text':'*
   * This function is used to send data on the raw socket. The function call
   * will block until the data has been sent successfully or an error occurs.
   *
   * @param buffers One or more data buffers to be sent on the socket. Although
   * the buffers object may be copied as necessary, ownership of the underlying
   * memory blocks is retained by the caller, which must guarantee that they
   * remain valid until the handler is called.
   *
   * @param handler The handler to be called when the send operation completes.
   * Copies will be made of the handler as required. The function signature of
   * the handler must be:
   * @code void handler(
   *   const asio::error_code& error, // Result of operation.
   *   std::size_t bytes_transferred           // Number of bytes sent.
   * ); @endcode
   * Regardless of whether the asynchronous operation completes immediately or
   * not, the handler will not be invoked from within this function. Invocation
   * of the handler will be performed in a manner equivalent to using
   * asio::io_context::post().
   *
   * @note The async_send operation can only be used with a connected socket.
   * Use the async_send_to function to send data on an unconnected raw
   * socket.
   *
   * @par Example
   * To send a single data buffer use the @ref buffer function as follows:
   * @code
   * socket.async_send(asio::buffer(data, size), handler);
   * @endcode
   * See the @ref buffer documentation for information on sending multiple
   * buffers in one go, and how to use it with arrays, boost::array or
   * std::vector.
   ','line_number':300,'multiline':True]
['text':' If you get an error on the following line it means that your handler does','line_number':340,'multiline':False]
['text':' not meet the documented type requirements for a WriteHandler.','line_number':341,'multiline':False]
['text':' defined(ASIO_ENABLE_OLD_SERVICES)','line_number':347,'multiline':False]
['text':' defined(ASIO_ENABLE_OLD_SERVICES)','line_number':355,'multiline':False]
['text':'/ Start an asynchronous send on a connected socket.','line_number':358,'multiline':False]
['text':'*
   * This function is used to send data on the raw socket. The function call
   * will block until the data has been sent successfully or an error occurs.
   *
   * @param buffers One or more data buffers to be sent on the socket. Although
   * the buffers object may be copied as necessary, ownership of the underlying
   * memory blocks is retained by the caller, which must guarantee that they
   * remain valid until the handler is called.
   *
   * @param flags Flags specifying how the send call is to be made.
   *
   * @param handler The handler to be called when the send operation completes.
   * Copies will be made of the handler as required. The function signature of
   * the handler must be:
   * @code void handler(
   *   const asio::error_code& error, // Result of operation.
   *   std::size_t bytes_transferred           // Number of bytes sent.
   * ); @endcode
   * Regardless of whether the asynchronous operation completes immediately or
   * not, the handler will not be invoked from within this function. Invocation
   * of the handler will be performed in a manner equivalent to using
   * asio::io_context::post().
   *
   * @note The async_send operation can only be used with a connected socket.
   * Use the async_send_to function to send data on an unconnected raw
   * socket.
   ','line_number':359,'multiline':True]
['text':' If you get an error on the following line it means that your handler does','line_number':393,'multiline':False]
['text':' not meet the documented type requirements for a WriteHandler.','line_number':394,'multiline':False]
['text':' defined(ASIO_ENABLE_OLD_SERVICES)','line_number':400,'multiline':False]
['text':' defined(ASIO_ENABLE_OLD_SERVICES)','line_number':408,'multiline':False]
['text':'/ Send raw data to the specified endpoint.','line_number':411,'multiline':False]
['text':'*
   * This function is used to send raw data to the specified remote endpoint.
   * The function call will block until the data has been sent successfully or
   * an error occurs.
   *
   * @param buffers One or more data buffers to be sent to the remote endpoint.
   *
   * @param destination The remote endpoint to which the data will be sent.
   *
   * @returns The number of bytes sent.
   *
   * @throws asio::system_error Thrown on failure.
   *
   * @par Example
   * To send a single data buffer use the @ref buffer function as follows:
   * @code
   * asio::ip::udp::endpoint destination(
   *     asio::ip::address::from_string("1.2.3.4"), 12345);
   * socket.send_to(asio::buffer(data, size), destination);
   * @endcode
   * See the @ref buffer documentation for information on sending multiple
   * buffers in one go, and how to use it with arrays, boost::array or
   * std::vector.
   ','line_number':412,'multiline':True]
['text':'/ Send raw data to the specified endpoint.','line_number':447,'multiline':False]
['text':'*
   * This function is used to send raw data to the specified remote endpoint.
   * The function call will block until the data has been sent successfully or
   * an error occurs.
   *
   * @param buffers One or more data buffers to be sent to the remote endpoint.
   *
   * @param destination The remote endpoint to which the data will be sent.
   *
   * @param flags Flags specifying how the send call is to be made.
   *
   * @returns The number of bytes sent.
   *
   * @throws asio::system_error Thrown on failure.
   ','line_number':448,'multiline':True]
['text':'/ Send raw data to the specified endpoint.','line_number':474,'multiline':False]
['text':'*
   * This function is used to send raw data to the specified remote endpoint.
   * The function call will block until the data has been sent successfully or
   * an error occurs.
   *
   * @param buffers One or more data buffers to be sent to the remote endpoint.
   *
   * @param destination The remote endpoint to which the data will be sent.
   *
   * @param flags Flags specifying how the send call is to be made.
   *
   * @param ec Set to indicate what error occurred, if any.
   *
   * @returns The number of bytes sent.
   ','line_number':475,'multiline':True]
['text':'/ Start an asynchronous send.','line_number':499,'multiline':False]
['text':'*
   * This function is used to asynchronously send raw data to the specified
   * remote endpoint. The function call always returns immediately.
   *
   * @param buffers One or more data buffers to be sent to the remote endpoint.
   * Although the buffers object may be copied as necessary, ownership of the
   * underlying memory blocks is retained by the caller, which must guarantee
   * that they remain valid until the handler is called.
   *
   * @param destination The remote endpoint to which the data will be sent.
   * Copies will be made of the endpoint as required.
   *
   * @param handler The handler to be called when the send operation completes.
   * Copies will be made of the handler as required. The function signature of
   * the handler must be:
   * @code void handler(
   *   const asio::error_code& error, // Result of operation.
   *   std::size_t bytes_transferred           // Number of bytes sent.
   * ); @endcode
   * Regardless of whether the asynchronous operation completes immediately or
   * not, the handler will not be invoked from within this function. Invocation
   * of the handler will be performed in a manner equivalent to using
   * asio::io_context::post().
   *
   * @par Example
   * To send a single data buffer use the @ref buffer function as follows:
   * @code
   * asio::ip::udp::endpoint destination(
   *     asio::ip::address::from_string("1.2.3.4"), 12345);
   * socket.async_send_to(
   *     asio::buffer(data, size), destination, handler);
   * @endcode
   * See the @ref buffer documentation for information on sending multiple
   * buffers in one go, and how to use it with arrays, boost::array or
   * std::vector.
   ','line_number':500,'multiline':True]
['text':' If you get an error on the following line it means that your handler does','line_number':543,'multiline':False]
['text':' not meet the documented type requirements for a WriteHandler.','line_number':544,'multiline':False]
['text':' defined(ASIO_ENABLE_OLD_SERVICES)','line_number':550,'multiline':False]
['text':' defined(ASIO_ENABLE_OLD_SERVICES)','line_number':558,'multiline':False]
['text':'/ Start an asynchronous send.','line_number':561,'multiline':False]
['text':'*
   * This function is used to asynchronously send raw data to the specified
   * remote endpoint. The function call always returns immediately.
   *
   * @param buffers One or more data buffers to be sent to the remote endpoint.
   * Although the buffers object may be copied as necessary, ownership of the
   * underlying memory blocks is retained by the caller, which must guarantee
   * that they remain valid until the handler is called.
   *
   * @param flags Flags specifying how the send call is to be made.
   *
   * @param destination The remote endpoint to which the data will be sent.
   * Copies will be made of the endpoint as required.
   *
   * @param handler The handler to be called when the send operation completes.
   * Copies will be made of the handler as required. The function signature of
   * the handler must be:
   * @code void handler(
   *   const asio::error_code& error, // Result of operation.
   *   std::size_t bytes_transferred           // Number of bytes sent.
   * ); @endcode
   * Regardless of whether the asynchronous operation completes immediately or
   * not, the handler will not be invoked from within this function. Invocation
   * of the handler will be performed in a manner equivalent to using
   * asio::io_context::post().
   ','line_number':562,'multiline':True]
['text':' If you get an error on the following line it means that your handler does','line_number':595,'multiline':False]
['text':' not meet the documented type requirements for a WriteHandler.','line_number':596,'multiline':False]
['text':' defined(ASIO_ENABLE_OLD_SERVICES)','line_number':603,'multiline':False]
['text':' defined(ASIO_ENABLE_OLD_SERVICES)','line_number':612,'multiline':False]
['text':'/ Receive some data on a connected socket.','line_number':615,'multiline':False]
['text':'*
   * This function is used to receive data on the raw socket. The function
   * call will block until data has been received successfully or an error
   * occurs.
   *
   * @param buffers One or more buffers into which the data will be received.
   *
   * @returns The number of bytes received.
   *
   * @throws asio::system_error Thrown on failure.
   *
   * @note The receive operation can only be used with a connected socket. Use
   * the receive_from function to receive data on an unconnected raw
   * socket.
   *
   * @par Example
   * To receive into a single data buffer use the @ref buffer function as
   * follows:
   * @code socket.receive(asio::buffer(data, size)); @endcode
   * See the @ref buffer documentation for information on receiving into
   * multiple buffers in one go, and how to use it with arrays, boost::array or
   * std::vector.
   ','line_number':616,'multiline':True]
['text':'/ Receive some data on a connected socket.','line_number':649,'multiline':False]
['text':'*
   * This function is used to receive data on the raw socket. The function
   * call will block until data has been received successfully or an error
   * occurs.
   *
   * @param buffers One or more buffers into which the data will be received.
   *
   * @param flags Flags specifying how the receive call is to be made.
   *
   * @returns The number of bytes received.
   *
   * @throws asio::system_error Thrown on failure.
   *
   * @note The receive operation can only be used with a connected socket. Use
   * the receive_from function to receive data on an unconnected raw
   * socket.
   ','line_number':650,'multiline':True]
['text':'/ Receive some data on a connected socket.','line_number':678,'multiline':False]
['text':'*
   * This function is used to receive data on the raw socket. The function
   * call will block until data has been received successfully or an error
   * occurs.
   *
   * @param buffers One or more buffers into which the data will be received.
   *
   * @param flags Flags specifying how the receive call is to be made.
   *
   * @param ec Set to indicate what error occurred, if any.
   *
   * @returns The number of bytes received.
   *
   * @note The receive operation can only be used with a connected socket. Use
   * the receive_from function to receive data on an unconnected raw
   * socket.
   ','line_number':679,'multiline':True]
['text':'/ Start an asynchronous receive on a connected socket.','line_number':704,'multiline':False]
['text':'*
   * This function is used to asynchronously receive data from the raw
   * socket. The function call always returns immediately.
   *
   * @param buffers One or more buffers into which the data will be received.
   * Although the buffers object may be copied as necessary, ownership of the
   * underlying memory blocks is retained by the caller, which must guarantee
   * that they remain valid until the handler is called.
   *
   * @param handler The handler to be called when the receive operation
   * completes. Copies will be made of the handler as required. The function
   * signature of the handler must be:
   * @code void handler(
   *   const asio::error_code& error, // Result of operation.
   *   std::size_t bytes_transferred           // Number of bytes received.
   * ); @endcode
   * Regardless of whether the asynchronous operation completes immediately or
   * not, the handler will not be invoked from within this function. Invocation
   * of the handler will be performed in a manner equivalent to using
   * asio::io_context::post().
   *
   * @note The async_receive operation can only be used with a connected socket.
   * Use the async_receive_from function to receive data on an unconnected
   * raw socket.
   *
   * @par Example
   * To receive into a single data buffer use the @ref buffer function as
   * follows:
   * @code
   * socket.async_receive(asio::buffer(data, size), handler);
   * @endcode
   * See the @ref buffer documentation for information on receiving into
   * multiple buffers in one go, and how to use it with arrays, boost::array or
   * std::vector.
   ','line_number':705,'multiline':True]
['text':' If you get an error on the following line it means that your handler does','line_number':746,'multiline':False]
['text':' not meet the documented type requirements for a ReadHandler.','line_number':747,'multiline':False]
['text':' defined(ASIO_ENABLE_OLD_SERVICES)','line_number':753,'multiline':False]
['text':' defined(ASIO_ENABLE_OLD_SERVICES)','line_number':761,'multiline':False]
['text':'/ Start an asynchronous receive on a connected socket.','line_number':764,'multiline':False]
['text':'*
   * This function is used to asynchronously receive data from the raw
   * socket. The function call always returns immediately.
   *
   * @param buffers One or more buffers into which the data will be received.
   * Although the buffers object may be copied as necessary, ownership of the
   * underlying memory blocks is retained by the caller, which must guarantee
   * that they remain valid until the handler is called.
   *
   * @param flags Flags specifying how the receive call is to be made.
   *
   * @param handler The handler to be called when the receive operation
   * completes. Copies will be made of the handler as required. The function
   * signature of the handler must be:
   * @code void handler(
   *   const asio::error_code& error, // Result of operation.
   *   std::size_t bytes_transferred           // Number of bytes received.
   * ); @endcode
   * Regardless of whether the asynchronous operation completes immediately or
   * not, the handler will not be invoked from within this function. Invocation
   * of the handler will be performed in a manner equivalent to using
   * asio::io_context::post().
   *
   * @note The async_receive operation can only be used with a connected socket.
   * Use the async_receive_from function to receive data on an unconnected
   * raw socket.
   ','line_number':765,'multiline':True]
['text':' If you get an error on the following line it means that your handler does','line_number':799,'multiline':False]
['text':' not meet the documented type requirements for a ReadHandler.','line_number':800,'multiline':False]
['text':' defined(ASIO_ENABLE_OLD_SERVICES)','line_number':806,'multiline':False]
['text':' defined(ASIO_ENABLE_OLD_SERVICES)','line_number':814,'multiline':False]
['text':'/ Receive raw data with the endpoint of the sender.','line_number':817,'multiline':False]
['text':'*
   * This function is used to receive raw data. The function call will block
   * until data has been received successfully or an error occurs.
   *
   * @param buffers One or more buffers into which the data will be received.
   *
   * @param sender_endpoint An endpoint object that receives the endpoint of
   * the remote sender of the data.
   *
   * @returns The number of bytes received.
   *
   * @throws asio::system_error Thrown on failure.
   *
   * @par Example
   * To receive into a single data buffer use the @ref buffer function as
   * follows:
   * @code
   * asio::ip::udp::endpoint sender_endpoint;
   * socket.receive_from(
   *     asio::buffer(data, size), sender_endpoint);
   * @endcode
   * See the @ref buffer documentation for information on receiving into
   * multiple buffers in one go, and how to use it with arrays, boost::array or
   * std::vector.
   ','line_number':818,'multiline':True]
['text':'/ Receive raw data with the endpoint of the sender.','line_number':854,'multiline':False]
['text':'*
   * This function is used to receive raw data. The function call will block
   * until data has been received successfully or an error occurs.
   *
   * @param buffers One or more buffers into which the data will be received.
   *
   * @param sender_endpoint An endpoint object that receives the endpoint of
   * the remote sender of the data.
   *
   * @param flags Flags specifying how the receive call is to be made.
   *
   * @returns The number of bytes received.
   *
   * @throws asio::system_error Thrown on failure.
   ','line_number':855,'multiline':True]
['text':'/ Receive raw data with the endpoint of the sender.','line_number':881,'multiline':False]
['text':'*
   * This function is used to receive raw data. The function call will block
   * until data has been received successfully or an error occurs.
   *
   * @param buffers One or more buffers into which the data will be received.
   *
   * @param sender_endpoint An endpoint object that receives the endpoint of
   * the remote sender of the data.
   *
   * @param flags Flags specifying how the receive call is to be made.
   *
   * @param ec Set to indicate what error occurred, if any.
   *
   * @returns The number of bytes received.
   ','line_number':882,'multiline':True]
['text':'/ Start an asynchronous receive.','line_number':906,'multiline':False]
['text':'*
   * This function is used to asynchronously receive raw data. The function
   * call always returns immediately.
   *
   * @param buffers One or more buffers into which the data will be received.
   * Although the buffers object may be copied as necessary, ownership of the
   * underlying memory blocks is retained by the caller, which must guarantee
   * that they remain valid until the handler is called.
   *
   * @param sender_endpoint An endpoint object that receives the endpoint of
   * the remote sender of the data. Ownership of the sender_endpoint object
   * is retained by the caller, which must guarantee that it is valid until the
   * handler is called.
   *
   * @param handler The handler to be called when the receive operation
   * completes. Copies will be made of the handler as required. The function
   * signature of the handler must be:
   * @code void handler(
   *   const asio::error_code& error, // Result of operation.
   *   std::size_t bytes_transferred           // Number of bytes received.
   * ); @endcode
   * Regardless of whether the asynchronous operation completes immediately or
   * not, the handler will not be invoked from within this function. Invocation
   * of the handler will be performed in a manner equivalent to using
   * asio::io_context::post().
   *
   * @par Example
   * To receive into a single data buffer use the @ref buffer function as
   * follows:
   * @code socket.async_receive_from(
   *     asio::buffer(data, size), 0, sender_endpoint, handler); @endcode
   * See the @ref buffer documentation for information on receiving into
   * multiple buffers in one go, and how to use it with arrays, boost::array or
   * std::vector.
   ','line_number':907,'multiline':True]
['text':' If you get an error on the following line it means that your handler does','line_number':949,'multiline':False]
['text':' not meet the documented type requirements for a ReadHandler.','line_number':950,'multiline':False]
['text':' defined(ASIO_ENABLE_OLD_SERVICES)','line_number':957,'multiline':False]
['text':' defined(ASIO_ENABLE_OLD_SERVICES)','line_number':966,'multiline':False]
['text':'/ Start an asynchronous receive.','line_number':969,'multiline':False]
['text':'*
   * This function is used to asynchronously receive raw data. The function
   * call always returns immediately.
   *
   * @param buffers One or more buffers into which the data will be received.
   * Although the buffers object may be copied as necessary, ownership of the
   * underlying memory blocks is retained by the caller, which must guarantee
   * that they remain valid until the handler is called.
   *
   * @param sender_endpoint An endpoint object that receives the endpoint of
   * the remote sender of the data. Ownership of the sender_endpoint object
   * is retained by the caller, which must guarantee that it is valid until the
   * handler is called.
   *
   * @param flags Flags specifying how the receive call is to be made.
   *
   * @param handler The handler to be called when the receive operation
   * completes. Copies will be made of the handler as required. The function
   * signature of the handler must be:
   * @code void handler(
   *   const asio::error_code& error, // Result of operation.
   *   std::size_t bytes_transferred           // Number of bytes received.
   * ); @endcode
   * Regardless of whether the asynchronous operation completes immediately or
   * not, the handler will not be invoked from within this function. Invocation
   * of the handler will be performed in a manner equivalent to using
   * asio::io_context::post().
   ','line_number':970,'multiline':True]
['text':' If you get an error on the following line it means that your handler does','line_number':1005,'multiline':False]
['text':' not meet the documented type requirements for a ReadHandler.','line_number':1006,'multiline':False]
['text':' defined(ASIO_ENABLE_OLD_SERVICES)','line_number':1013,'multiline':False]
['text':' defined(ASIO_ENABLE_OLD_SERVICES)','line_number':1022,'multiline':False]
['text':' namespace asio','line_number':1026,'multiline':False]
['text':' ASIO_BASIC_RAW_SOCKET_HPP','line_number':1030,'multiline':False]
