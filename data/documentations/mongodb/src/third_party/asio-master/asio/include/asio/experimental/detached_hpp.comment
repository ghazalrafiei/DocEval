['text':'','line_number':1,'multiline':False]
['text':' experimental/detached.hpp','line_number':2,'multiline':False]
['text':' ~~~~~~~~~~~~~~~~~~~~~~~~~','line_number':3,'multiline':False]
['text':'','line_number':4,'multiline':False]
['text':' Copyright (c) 2003-2018 Christopher M. Kohlhoff (chris at kohlhoff dot com)','line_number':5,'multiline':False]
['text':'','line_number':6,'multiline':False]
['text':' Distributed under the Boost Software License, Version 1.0. (See accompanying','line_number':7,'multiline':False]
['text':' file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':8,'multiline':False]
['text':'','line_number':9,'multiline':False]
['text':' defined(_MSC_VER) && (_MSC_VER >= 1200)','line_number':16,'multiline':False]
['text':'/ Class used to specify that an asynchronous operation is detached.','line_number':26,'multiline':False]
['text':'*

 * The detached_t class is used to indicate that an asynchronous operation is
 * detached. That is, there is no completion handler waiting for the
 * operation's result. A detached_t object may be passed as a handler to an
 * asynchronous operation, typically using the special value
 * @c asio::experimental::detached. For example:

 * @code my_socket.async_send(my_buffer, asio::experimental::detached);
 * @endcode
 ','line_number':27,'multiline':True]
['text':'/ Constructor. ','line_number':41,'multiline':False]
['text':'/ A special value, similar to std::nothrow.','line_number':47,'multiline':False]
['text':'*
 * See the documentation for asio::experimental::detached_t for a usage
 * example.
 ','line_number':48,'multiline':True]
['text':' namespace experimental','line_number':58,'multiline':False]
['text':' namespace asio','line_number':59,'multiline':False]
['text':' ASIO_EXPERIMENTAL_DETACHED_HPP','line_number':65,'multiline':False]
