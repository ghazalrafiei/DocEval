['text':'','line_number':1,'multiline':False]
['text':' detail/impl/dev_poll_reactor.ipp','line_number':2,'multiline':False]
['text':' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~','line_number':3,'multiline':False]
['text':'','line_number':4,'multiline':False]
['text':' Copyright (c) 2003-2018 Christopher M. Kohlhoff (chris at kohlhoff dot com)','line_number':5,'multiline':False]
['text':'','line_number':6,'multiline':False]
['text':' Distributed under the Boost Software License, Version 1.0. (See accompanying','line_number':7,'multiline':False]
['text':' file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':8,'multiline':False]
['text':'','line_number':9,'multiline':False]
['text':' defined(_MSC_VER) && (_MSC_VER >= 1200)','line_number':16,'multiline':False]
['text':' Add the interrupter's descriptor to /dev/poll.','line_number':40,'multiline':False]
['text':' Add the interrupter's descriptor to /dev/poll.','line_number':84,'multiline':False]
['text':' Re-register all descriptors with /dev/poll. The changes will be written','line_number':91,'multiline':False]
['text':' to the /dev/poll descriptor the next time the reactor is run.','line_number':92,'multiline':False]
['text':' Remove the descriptor from /dev/poll.','line_number':209,'multiline':False]
['text':' Cancel any outstanding operations associated with the descriptor.','line_number':214,'multiline':False]
['text':' Remove the descriptor from /dev/poll. Since this function is only called','line_number':223,'multiline':False]
['text':' during a fork, we can apply the change immediately.','line_number':224,'multiline':False]
['text':' Destroy all operations associated with the descriptor.','line_number':231,'multiline':False]
['text':' We can return immediately if there's no work to do and the reactor is','line_number':247,'multiline':False]
['text':' not supposed to block.','line_number':248,'multiline':False]
['text':' Write the pending event registration changes to the /dev/poll descriptor.','line_number':253,'multiline':False]
['text':' Calculate timeout.','line_number':275,'multiline':False]
['text':' Block on the /dev/poll descriptor.','line_number':286,'multiline':False]
['text':' Dispatch the waiting events.','line_number':296,'multiline':False]
['text':' Exception operations must be processed first to ensure that any','line_number':310,'multiline':False]
['text':' out-of-band data is read before normal data.','line_number':311,'multiline':False]
['text':' If we have an event and no operations associated with the','line_number':331,'multiline':False]
['text':' descriptor then we need to delete the descriptor from /dev/poll.','line_number':332,'multiline':False]
['text':' The poll operation can produce POLLHUP or POLLERR events when there','line_number':333,'multiline':False]
['text':' is no operation pending, so if we do not remove the descriptor we','line_number':334,'multiline':False]
['text':' can end up in a tight polling loop.','line_number':335,'multiline':False]
['text':' By default we will wait no longer than 5 minutes. This will ensure that','line_number':399,'multiline':False]
['text':' any changes to the system clock are detected after no longer than this.','line_number':400,'multiline':False]
['text':' namespace detail','line_number':439,'multiline':False]
['text':' namespace asio','line_number':440,'multiline':False]
['text':' defined(ASIO_HAS_DEV_POLL)','line_number':444,'multiline':False]
['text':' ASIO_DETAIL_IMPL_DEV_POLL_REACTOR_IPP','line_number':446,'multiline':False]
