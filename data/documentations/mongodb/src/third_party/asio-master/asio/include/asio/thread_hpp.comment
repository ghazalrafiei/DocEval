['text':'','line_number':1,'multiline':False]
['text':' thread.hpp','line_number':2,'multiline':False]
['text':' ~~~~~~~~~~','line_number':3,'multiline':False]
['text':'','line_number':4,'multiline':False]
['text':' Copyright (c) 2003-2018 Christopher M. Kohlhoff (chris at kohlhoff dot com)','line_number':5,'multiline':False]
['text':'','line_number':6,'multiline':False]
['text':' Distributed under the Boost Software License, Version 1.0. (See accompanying','line_number':7,'multiline':False]
['text':' file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':8,'multiline':False]
['text':'','line_number':9,'multiline':False]
['text':' defined(_MSC_VER) && (_MSC_VER >= 1200)','line_number':16,'multiline':False]
['text':'/ A simple abstraction for starting threads.','line_number':26,'multiline':False]
['text':'*
 * The asio::thread class implements the smallest possible subset of the
 * functionality of boost::thread. It is intended to be used only for starting
 * a thread and waiting for it to exit. If more extensive threading
 * capabilities are required, you are strongly advised to use something else.
 *
 * @par Thread Safety
 * @e Distinct @e objects: Safe.@n
 * @e Shared @e objects: Unsafe.
 *
 * @par Example
 * A typical use of asio::thread would be to launch a thread to run an
 * io_context's event processing loop:
 *
 * @par
 * @code asio::io_context io_context;
 * // ...
 * asio::thread t(boost::bind(&asio::io_context::run, &io_context));
 * // ...
 * t.join(); @endcode
 ','line_number':27,'multiline':True]
['text':'/ Start a new thread that executes the supplied function.','line_number':52,'multiline':False]
['text':'*
   * This constructor creates a new thread that will execute the given function
   * or function object.
   *
   * @param f The function or function object to be run in the thread. The
   * function signature must be: @code void f(); @endcode
   ','line_number':53,'multiline':True]
['text':'/ Destructor.','line_number':66,'multiline':False]
['text':'/ Wait for the thread to exit.','line_number':71,'multiline':False]
['text':'*
   * This function will block until the thread has exited.
   *
   * If this function is not called before the thread object is destroyed, the
   * thread itself will continue to run until completion. You will, however,
   * no longer have the ability to wait for it to exit.
   ','line_number':72,'multiline':True]
['text':' namespace asio','line_number':88,'multiline':False]
['text':' ASIO_THREAD_HPP','line_number':92,'multiline':False]
