['text':'','line_number':1,'multiline':False]
['text':' posix/descriptor.hpp','line_number':2,'multiline':False]
['text':' ~~~~~~~~~~~~~~~~~~~~','line_number':3,'multiline':False]
['text':'','line_number':4,'multiline':False]
['text':' Copyright (c) 2003-2018 Christopher M. Kohlhoff (chris at kohlhoff dot com)','line_number':5,'multiline':False]
['text':'','line_number':6,'multiline':False]
['text':' Distributed under the Boost Software License, Version 1.0. (See accompanying','line_number':7,'multiline':False]
['text':' file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':8,'multiline':False]
['text':'','line_number':9,'multiline':False]
['text':' defined(_MSC_VER) && (_MSC_VER >= 1200)','line_number':16,'multiline':False]
['text':' defined(ASIO_HAS_MOVE)','line_number':36,'multiline':False]
['text':'/ Provides POSIX descriptor functionality.','line_number':45,'multiline':False]
['text':'*
 * The posix::descriptor class template provides the ability to wrap a
 * POSIX descriptor.
 *
 * @par Thread Safety
 * @e Distinct @e objects: Safe.@n
 * @e Shared @e objects: Unsafe.
 ','line_number':46,'multiline':True]
['text':'/ The type of the executor associated with the object.','line_number':59,'multiline':False]
['text':'/ The native representation of a descriptor.','line_number':62,'multiline':False]
['text':'/ A descriptor is always the lowest layer.','line_number':69,'multiline':False]
['text':'/ Construct a descriptor without opening it.','line_number':72,'multiline':False]
['text':'*
   * This constructor creates a descriptor without opening it.
   *
   * @param io_context The io_context object that the descriptor will use to
   * dispatch handlers for any asynchronous operations performed on the
   * descriptor.
   ','line_number':73,'multiline':True]
['text':'/ Construct a descriptor on an existing native descriptor.','line_number':85,'multiline':False]
['text':'*
   * This constructor creates a descriptor object to hold an existing native
   * descriptor.
   *
   * @param io_context The io_context object that the descriptor will use to
   * dispatch handlers for any asynchronous operations performed on the
   * descriptor.
   *
   * @param native_descriptor A native descriptor.
   *
   * @throws asio::system_error Thrown on failure.
   ','line_number':86,'multiline':True]
['text':'/ Move-construct a descriptor from another.','line_number':109,'multiline':False]
['text':'*
   * This constructor moves a descriptor from one object to another.
   *
   * @param other The other descriptor object from which the move will
   * occur.
   *
   * @note Following the move, the moved-from object is in the same state as if
   * constructed using the @c descriptor(io_context&) constructor.
   ','line_number':110,'multiline':True]
['text':'/ Move-assign a descriptor from another.','line_number':124,'multiline':False]
['text':'*
   * This assignment operator moves a descriptor from one object to another.
   *
   * @param other The other descriptor object from which the move will
   * occur.
   *
   * @note Following the move, the moved-from object is in the same state as if
   * constructed using the @c descriptor(io_context&) constructor.
   ','line_number':125,'multiline':True]
['text':' defined(ASIO_HAS_MOVE) || defined(GENERATING_DOCUMENTATION)','line_number':139,'multiline':False]
['text':'/ (Deprecated: Use get_executor().) Get the io_context associated with the','line_number':142,'multiline':False]
['text':'/ object.','line_number':143,'multiline':False]
['text':'*
   * This function may be used to obtain the io_context object that the I/O
   * object uses to dispatch handlers for asynchronous operations.
   *
   * @return A reference to the io_context object that the I/O object will use
   * to dispatch handlers. Ownership is not transferred to the caller.
   ','line_number':144,'multiline':True]
['text':'/ (Deprecated: Use get_executor().) Get the io_context associated with the','line_number':156,'multiline':False]
['text':'/ object.','line_number':157,'multiline':False]
['text':'*
   * This function may be used to obtain the io_context object that the I/O
   * object uses to dispatch handlers for asynchronous operations.
   *
   * @return A reference to the io_context object that the I/O object will use
   * to dispatch handlers. Ownership is not transferred to the caller.
   ','line_number':158,'multiline':True]
['text':' !defined(ASIO_NO_DEPRECATED)','line_number':169,'multiline':False]
['text':'/ Get the executor associated with the object.','line_number':171,'multiline':False]
['text':'/ Get a reference to the lowest layer.','line_number':177,'multiline':False]
['text':'*
   * This function returns a reference to the lowest layer in a stack of
   * layers. Since a descriptor cannot contain any further layers, it
   * simply returns a reference to itself.
   *
   * @return A reference to the lowest layer in the stack of layers. Ownership
   * is not transferred to the caller.
   ','line_number':178,'multiline':True]
['text':'/ Get a const reference to the lowest layer.','line_number':191,'multiline':False]
['text':'*
   * This function returns a const reference to the lowest layer in a stack of
   * layers. Since a descriptor cannot contain any further layers, it
   * simply returns a reference to itself.
   *
   * @return A const reference to the lowest layer in the stack of layers.
   * Ownership is not transferred to the caller.
   ','line_number':192,'multiline':True]
['text':'/ Assign an existing native descriptor to the descriptor.','line_number':205,'multiline':False]
['text':'
   * This function opens the descriptor to hold an existing native descriptor.
   *
   * @param native_descriptor A native descriptor.
   *
   * @throws asio::system_error Thrown on failure.
   ','line_number':206,'multiline':True]
['text':'/ Assign an existing native descriptor to the descriptor.','line_number':221,'multiline':False]
['text':'
   * This function opens the descriptor to hold an existing native descriptor.
   *
   * @param native_descriptor A native descriptor.
   *
   * @param ec Set to indicate what error occurred, if any.
   ','line_number':222,'multiline':True]
['text':'/ Determine whether the descriptor is open.','line_number':237,'multiline':False]
['text':'/ Close the descriptor.','line_number':243,'multiline':False]
['text':'*
   * This function is used to close the descriptor. Any asynchronous read or
   * write operations will be cancelled immediately, and will complete with the
   * asio::error::operation_aborted error.
   *
   * @throws asio::system_error Thrown on failure. Note that, even if
   * the function indicates an error, the underlying descriptor is closed.
   ','line_number':244,'multiline':True]
['text':'/ Close the descriptor.','line_number':259,'multiline':False]
['text':'*
   * This function is used to close the descriptor. Any asynchronous read or
   * write operations will be cancelled immediately, and will complete with the
   * asio::error::operation_aborted error.
   *
   * @param ec Set to indicate what error occurred, if any. Note that, even if
   * the function indicates an error, the underlying descriptor is closed.
   ','line_number':260,'multiline':True]
['text':'/ Get the native descriptor representation.','line_number':274,'multiline':False]
['text':'*
   * This function may be used to obtain the underlying representation of the
   * descriptor. This is intended to allow access to native descriptor
   * functionality that is not otherwise provided.
   ','line_number':275,'multiline':True]
['text':'/ Release ownership of the native descriptor implementation.','line_number':285,'multiline':False]
['text':'*
   * This function may be used to obtain the underlying representation of the
   * descriptor. After calling this function, @c is_open() returns false. The
   * caller is responsible for closing the descriptor.
   *
   * All outstanding asynchronous read or write operations will finish
   * immediately, and the handlers for cancelled operations will be passed the
   * asio::error::operation_aborted error.
   ','line_number':286,'multiline':True]
['text':'/ Cancel all asynchronous operations associated with the descriptor.','line_number':300,'multiline':False]
['text':'*
   * This function causes all outstanding asynchronous read or write operations
   * to finish immediately, and the handlers for cancelled operations will be
   * passed the asio::error::operation_aborted error.
   *
   * @throws asio::system_error Thrown on failure.
   ','line_number':301,'multiline':True]
['text':'/ Cancel all asynchronous operations associated with the descriptor.','line_number':315,'multiline':False]
['text':'*
   * This function causes all outstanding asynchronous read or write operations
   * to finish immediately, and the handlers for cancelled operations will be
   * passed the asio::error::operation_aborted error.
   *
   * @param ec Set to indicate what error occurred, if any.
   ','line_number':316,'multiline':True]
['text':'/ Perform an IO control command on the descriptor.','line_number':329,'multiline':False]
['text':'*
   * This function is used to execute an IO control command on the descriptor.
   *
   * @param command The IO control command to be performed on the descriptor.
   *
   * @throws asio::system_error Thrown on failure.
   *
   * @sa IoControlCommand @n
   * asio::posix::descriptor_base::bytes_readable @n
   * asio::posix::descriptor_base::non_blocking_io
   *
   * @par Example
   * Getting the number of bytes ready to read:
   * @code
   * asio::posix::stream_descriptor descriptor(io_context);
   * ...
   * asio::posix::stream_descriptor::bytes_readable command;
   * descriptor.io_control(command);
   * std::size_t bytes_readable = command.get();
   * @endcode
   ','line_number':330,'multiline':True]
['text':'/ Perform an IO control command on the descriptor.','line_number':359,'multiline':False]
['text':'*
   * This function is used to execute an IO control command on the descriptor.
   *
   * @param command The IO control command to be performed on the descriptor.
   *
   * @param ec Set to indicate what error occurred, if any.
   *
   * @sa IoControlCommand @n
   * asio::posix::descriptor_base::bytes_readable @n
   * asio::posix::descriptor_base::non_blocking_io
   *
   * @par Example
   * Getting the number of bytes ready to read:
   * @code
   * asio::posix::stream_descriptor descriptor(io_context);
   * ...
   * asio::posix::stream_descriptor::bytes_readable command;
   * asio::error_code ec;
   * descriptor.io_control(command, ec);
   * if (ec)
   * {
   *   // An error occurred.
   * }
   * std::size_t bytes_readable = command.get();
   * @endcode
   ','line_number':360,'multiline':True]
['text':'/ Gets the non-blocking mode of the descriptor.','line_number':394,'multiline':False]
['text':'*
   * @returns @c true if the descriptor's synchronous operations will fail with
   * asio::error::would_block if they are unable to perform the requested
   * operation immediately. If @c false, synchronous operations will block
   * until complete.
   *
   * @note The non-blocking mode has no effect on the behaviour of asynchronous
   * operations. Asynchronous operations will never fail with the error
   * asio::error::would_block.
   ','line_number':395,'multiline':True]
['text':'/ Sets the non-blocking mode of the descriptor.','line_number':410,'multiline':False]
['text':'*
   * @param mode If @c true, the descriptor's synchronous operations will fail
   * with asio::error::would_block if they are unable to perform the
   * requested operation immediately. If @c false, synchronous operations will
   * block until complete.
   *
   * @throws asio::system_error Thrown on failure.
   *
   * @note The non-blocking mode has no effect on the behaviour of asynchronous
   * operations. Asynchronous operations will never fail with the error
   * asio::error::would_block.
   ','line_number':411,'multiline':True]
['text':'/ Sets the non-blocking mode of the descriptor.','line_number':430,'multiline':False]
['text':'*
   * @param mode If @c true, the descriptor's synchronous operations will fail
   * with asio::error::would_block if they are unable to perform the
   * requested operation immediately. If @c false, synchronous operations will
   * block until complete.
   *
   * @param ec Set to indicate what error occurred, if any.
   *
   * @note The non-blocking mode has no effect on the behaviour of asynchronous
   * operations. Asynchronous operations will never fail with the error
   * asio::error::would_block.
   ','line_number':431,'multiline':True]
['text':'/ Gets the non-blocking mode of the native descriptor implementation.','line_number':450,'multiline':False]
['text':'*
   * This function is used to retrieve the non-blocking mode of the underlying
   * native descriptor. This mode has no effect on the behaviour of the
   * descriptor object's synchronous operations.
   *
   * @returns @c true if the underlying descriptor is in non-blocking mode and
   * direct system calls may fail with asio::error::would_block (or the
   * equivalent system error).
   *
   * @note The current non-blocking mode is cached by the descriptor object.
   * Consequently, the return value may be incorrect if the non-blocking mode
   * was set directly on the native descriptor.
   ','line_number':451,'multiline':True]
['text':'/ Sets the non-blocking mode of the native descriptor implementation.','line_number':470,'multiline':False]
['text':'*
   * This function is used to modify the non-blocking mode of the underlying
   * native descriptor. It has no effect on the behaviour of the descriptor
   * object's synchronous operations.
   *
   * @param mode If @c true, the underlying descriptor is put into non-blocking
   * mode and direct system calls may fail with asio::error::would_block
   * (or the equivalent system error).
   *
   * @throws asio::system_error Thrown on failure. If the @c mode is
   * @c false, but the current value of @c non_blocking() is @c true, this
   * function fails with asio::error::invalid_argument, as the
   * combination does not make sense.
   ','line_number':471,'multiline':True]
['text':'/ Sets the non-blocking mode of the native descriptor implementation.','line_number':493,'multiline':False]
['text':'*
   * This function is used to modify the non-blocking mode of the underlying
   * native descriptor. It has no effect on the behaviour of the descriptor
   * object's synchronous operations.
   *
   * @param mode If @c true, the underlying descriptor is put into non-blocking
   * mode and direct system calls may fail with asio::error::would_block
   * (or the equivalent system error).
   *
   * @param ec Set to indicate what error occurred, if any. If the @c mode is
   * @c false, but the current value of @c non_blocking() is @c true, this
   * function fails with asio::error::invalid_argument, as the
   * combination does not make sense.
   ','line_number':494,'multiline':True]
['text':'/ Wait for the descriptor to become ready to read, ready to write, or to','line_number':516,'multiline':False]
['text':'/ have pending error conditions.','line_number':517,'multiline':False]
['text':'*
   * This function is used to perform a blocking wait for a descriptor to enter
   * a ready to read, write or error condition state.
   *
   * @param w Specifies the desired descriptor state.
   *
   * @par Example
   * Waiting for a descriptor to become readable.
   * @code
   * asio::posix::stream_descriptor descriptor(io_context);
   * ...
   * descriptor.wait(asio::posix::stream_descriptor::wait_read);
   * @endcode
   ','line_number':518,'multiline':True]
['text':'/ Wait for the descriptor to become ready to read, ready to write, or to','line_number':539,'multiline':False]
['text':'/ have pending error conditions.','line_number':540,'multiline':False]
['text':'*
   * This function is used to perform a blocking wait for a descriptor to enter
   * a ready to read, write or error condition state.
   *
   * @param w Specifies the desired descriptor state.
   *
   * @param ec Set to indicate what error occurred, if any.
   *
   * @par Example
   * Waiting for a descriptor to become readable.
   * @code
   * asio::posix::stream_descriptor descriptor(io_context);
   * ...
   * asio::error_code ec;
   * descriptor.wait(asio::posix::stream_descriptor::wait_read, ec);
   * @endcode
   ','line_number':541,'multiline':True]
['text':'/ Asynchronously wait for the descriptor to become ready to read, ready to','line_number':564,'multiline':False]
['text':'/ write, or to have pending error conditions.','line_number':565,'multiline':False]
['text':'*
   * This function is used to perform an asynchronous wait for a descriptor to
   * enter a ready to read, write or error condition state.
   *
   * @param w Specifies the desired descriptor state.
   *
   * @param handler The handler to be called when the wait operation completes.
   * Copies will be made of the handler as required. The function signature of
   * the handler must be:
   * @code void handler(
   *   const asio::error_code& error // Result of operation
   * ); @endcode
   * Regardless of whether the asynchronous operation completes immediately or
   * not, the handler will not be invoked from within this function. Invocation
   * of the handler will be performed in a manner equivalent to using
   * asio::io_context::post().
   *
   * @par Example
   * @code
   * void wait_handler(const asio::error_code& error)
   * {
   *   if (!error)
   *   {
   *     // Wait succeeded.
   *   }
   * }
   *
   * ...
   *
   * asio::posix::stream_descriptor descriptor(io_context);
   * ...
   * descriptor.async_wait(
   *     asio::posix::stream_descriptor::wait_read,
   *     wait_handler);
   * @endcode
   ','line_number':566,'multiline':True]
['text':' If you get an error on the following line it means that your handler does','line_number':607,'multiline':False]
['text':' not meet the documented type requirements for a WaitHandler.','line_number':608,'multiline':False]
['text':'/ Protected destructor to prevent deletion through this type.','line_number':621,'multiline':False]
['text':'*
   * This function destroys the descriptor, cancelling any outstanding
   * asynchronous wait operations associated with the descriptor as if by
   * calling @c cancel.
   ','line_number':622,'multiline':True]
['text':' namespace posix','line_number':632,'multiline':False]
['text':' namespace asio','line_number':633,'multiline':False]
['text':' defined(ASIO_HAS_POSIX_STREAM_DESCRIPTOR)','line_number':639,'multiline':False]
['text':'   || defined(GENERATING_DOCUMENTATION)','line_number':640,'multiline':False]
['text':' !defined(ASIO_ENABLE_OLD_SERVICES)','line_number':642,'multiline':False]
['text':' ASIO_POSIX_DESCRIPTOR_HPP','line_number':644,'multiline':False]
