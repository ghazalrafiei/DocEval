['text':'','line_number':1,'multiline':False]
['text':' socket_base.hpp','line_number':2,'multiline':False]
['text':' ~~~~~~~~~~~~~~~','line_number':3,'multiline':False]
['text':'','line_number':4,'multiline':False]
['text':' Copyright (c) 2003-2018 Christopher M. Kohlhoff (chris at kohlhoff dot com)','line_number':5,'multiline':False]
['text':'','line_number':6,'multiline':False]
['text':' Distributed under the Boost Software License, Version 1.0. (See accompanying','line_number':7,'multiline':False]
['text':' file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':8,'multiline':False]
['text':'','line_number':9,'multiline':False]
['text':' defined(_MSC_VER) && (_MSC_VER >= 1200)','line_number':16,'multiline':False]
['text':'/ The socket_base class is used as a base for the basic_stream_socket and','line_number':27,'multiline':False]
['text':'/ basic_datagram_socket class templates so that we have a common place to','line_number':28,'multiline':False]
['text':'/ define the shutdown_type and enum.','line_number':29,'multiline':False]
['text':'/ Different ways a socket may be shutdown.','line_number':33,'multiline':False]
['text':'/ Shutdown the receive side of the socket.','line_number':37,'multiline':False]
['text':'/ Shutdown the send side of the socket.','line_number':40,'multiline':False]
['text':'/ Shutdown both send and receive on the socket.','line_number':43,'multiline':False]
['text':'/ Bitmask type for flags that can be passed to send and receive operations.','line_number':52,'multiline':False]
['text':'/ Peek at incoming data without removing it from the input queue.','line_number':56,'multiline':False]
['text':'/ Process out-of-band data.','line_number':59,'multiline':False]
['text':'/ Specify that the data should not be subject to routing.','line_number':62,'multiline':False]
['text':'/ Specifies that the data marks the end of a record.','line_number':65,'multiline':False]
['text':'/ Wait types.','line_number':78,'multiline':False]
['text':'*
   * For use with basic_socket::wait() and basic_socket::async_wait().
   ','line_number':79,'multiline':True]
['text':'/ Wait for a socket to become ready to read.','line_number':84,'multiline':False]
['text':'/ Wait for a socket to become ready to write.','line_number':87,'multiline':False]
['text':'/ Wait for a socket to have error conditions pending.','line_number':90,'multiline':False]
['text':'/ Socket option to permit sending of broadcast messages.','line_number':94,'multiline':False]
['text':'*
   * Implements the SOL_SOCKET/SO_BROADCAST socket option.
   *
   * @par Examples
   * Setting the option:
   * @code
   * asio::ip::udp::socket socket(io_context); 
   * ...
   * asio::socket_base::broadcast option(true);
   * socket.set_option(option);
   * @endcode
   *
   * @par
   * Getting the current option value:
   * @code
   * asio::ip::udp::socket socket(io_context); 
   * ...
   * asio::socket_base::broadcast option;
   * socket.get_option(option);
   * bool is_set = option.value();
   * @endcode
   *
   * @par Concepts:
   * Socket_Option, Boolean_Socket_Option.
   ','line_number':95,'multiline':True]
['text':'/ Socket option to enable socket-level debugging.','line_number':128,'multiline':False]
['text':'*
   * Implements the SOL_SOCKET/SO_DEBUG socket option.
   *
   * @par Examples
   * Setting the option:
   * @code
   * asio::ip::tcp::socket socket(io_context); 
   * ...
   * asio::socket_base::debug option(true);
   * socket.set_option(option);
   * @endcode
   *
   * @par
   * Getting the current option value:
   * @code
   * asio::ip::tcp::socket socket(io_context); 
   * ...
   * asio::socket_base::debug option;
   * socket.get_option(option);
   * bool is_set = option.value();
   * @endcode
   *
   * @par Concepts:
   * Socket_Option, Boolean_Socket_Option.
   ','line_number':129,'multiline':True]
['text':'/ Socket option to prevent routing, use local interfaces only.','line_number':161,'multiline':False]
['text':'*
   * Implements the SOL_SOCKET/SO_DONTROUTE socket option.
   *
   * @par Examples
   * Setting the option:
   * @code
   * asio::ip::udp::socket socket(io_context); 
   * ...
   * asio::socket_base::do_not_route option(true);
   * socket.set_option(option);
   * @endcode
   *
   * @par
   * Getting the current option value:
   * @code
   * asio::ip::udp::socket socket(io_context); 
   * ...
   * asio::socket_base::do_not_route option;
   * socket.get_option(option);
   * bool is_set = option.value();
   * @endcode
   *
   * @par Concepts:
   * Socket_Option, Boolean_Socket_Option.
   ','line_number':162,'multiline':True]
['text':'/ Socket option to send keep-alives.','line_number':195,'multiline':False]
['text':'*
   * Implements the SOL_SOCKET/SO_KEEPALIVE socket option.
   *
   * @par Examples
   * Setting the option:
   * @code
   * asio::ip::tcp::socket socket(io_context); 
   * ...
   * asio::socket_base::keep_alive option(true);
   * socket.set_option(option);
   * @endcode
   *
   * @par
   * Getting the current option value:
   * @code
   * asio::ip::tcp::socket socket(io_context); 
   * ...
   * asio::socket_base::keep_alive option;
   * socket.get_option(option);
   * bool is_set = option.value();
   * @endcode
   *
   * @par Concepts:
   * Socket_Option, Boolean_Socket_Option.
   ','line_number':196,'multiline':True]
['text':'/ Socket option for the send buffer size of a socket.','line_number':228,'multiline':False]
['text':'*
   * Implements the SOL_SOCKET/SO_SNDBUF socket option.
   *
   * @par Examples
   * Setting the option:
   * @code
   * asio::ip::tcp::socket socket(io_context); 
   * ...
   * asio::socket_base::send_buffer_size option(8192);
   * socket.set_option(option);
   * @endcode
   *
   * @par
   * Getting the current option value:
   * @code
   * asio::ip::tcp::socket socket(io_context); 
   * ...
   * asio::socket_base::send_buffer_size option;
   * socket.get_option(option);
   * int size = option.value();
   * @endcode
   *
   * @par Concepts:
   * Socket_Option, Integer_Socket_Option.
   ','line_number':229,'multiline':True]
['text':'/ Socket option for the send low watermark.','line_number':262,'multiline':False]
['text':'*
   * Implements the SOL_SOCKET/SO_SNDLOWAT socket option.
   *
   * @par Examples
   * Setting the option:
   * @code
   * asio::ip::tcp::socket socket(io_context); 
   * ...
   * asio::socket_base::send_low_watermark option(1024);
   * socket.set_option(option);
   * @endcode
   *
   * @par
   * Getting the current option value:
   * @code
   * asio::ip::tcp::socket socket(io_context); 
   * ...
   * asio::socket_base::send_low_watermark option;
   * socket.get_option(option);
   * int size = option.value();
   * @endcode
   *
   * @par Concepts:
   * Socket_Option, Integer_Socket_Option.
   ','line_number':263,'multiline':True]
['text':'/ Socket option for the receive buffer size of a socket.','line_number':296,'multiline':False]
['text':'*
   * Implements the SOL_SOCKET/SO_RCVBUF socket option.
   *
   * @par Examples
   * Setting the option:
   * @code
   * asio::ip::tcp::socket socket(io_context); 
   * ...
   * asio::socket_base::receive_buffer_size option(8192);
   * socket.set_option(option);
   * @endcode
   *
   * @par
   * Getting the current option value:
   * @code
   * asio::ip::tcp::socket socket(io_context); 
   * ...
   * asio::socket_base::receive_buffer_size option;
   * socket.get_option(option);
   * int size = option.value();
   * @endcode
   *
   * @par Concepts:
   * Socket_Option, Integer_Socket_Option.
   ','line_number':297,'multiline':True]
['text':'/ Socket option for the receive low watermark.','line_number':330,'multiline':False]
['text':'*
   * Implements the SOL_SOCKET/SO_RCVLOWAT socket option.
   *
   * @par Examples
   * Setting the option:
   * @code
   * asio::ip::tcp::socket socket(io_context); 
   * ...
   * asio::socket_base::receive_low_watermark option(1024);
   * socket.set_option(option);
   * @endcode
   *
   * @par
   * Getting the current option value:
   * @code
   * asio::ip::tcp::socket socket(io_context); 
   * ...
   * asio::socket_base::receive_low_watermark option;
   * socket.get_option(option);
   * int size = option.value();
   * @endcode
   *
   * @par Concepts:
   * Socket_Option, Integer_Socket_Option.
   ','line_number':331,'multiline':True]
['text':'/ Socket option to allow the socket to be bound to an address that is','line_number':364,'multiline':False]
['text':'/ already in use.','line_number':365,'multiline':False]
['text':'*
   * Implements the SOL_SOCKET/SO_REUSEADDR socket option.
   *
   * @par Examples
   * Setting the option:
   * @code
   * asio::ip::tcp::acceptor acceptor(io_context); 
   * ...
   * asio::socket_base::reuse_address option(true);
   * acceptor.set_option(option);
   * @endcode
   *
   * @par
   * Getting the current option value:
   * @code
   * asio::ip::tcp::acceptor acceptor(io_context); 
   * ...
   * asio::socket_base::reuse_address option;
   * acceptor.get_option(option);
   * bool is_set = option.value();
   * @endcode
   *
   * @par Concepts:
   * Socket_Option, Boolean_Socket_Option.
   ','line_number':366,'multiline':True]
['text':'/ Socket option to specify whether the socket lingers on close if unsent','line_number':399,'multiline':False]
['text':'/ data is present.','line_number':400,'multiline':False]
['text':'*
   * Implements the SOL_SOCKET/SO_LINGER socket option.
   *
   * @par Examples
   * Setting the option:
   * @code
   * asio::ip::tcp::socket socket(io_context); 
   * ...
   * asio::socket_base::linger option(true, 30);
   * socket.set_option(option);
   * @endcode
   *
   * @par
   * Getting the current option value:
   * @code
   * asio::ip::tcp::socket socket(io_context); 
   * ...
   * asio::socket_base::linger option;
   * socket.get_option(option);
   * bool is_set = option.enabled();
   * unsigned short timeout = option.timeout();
   * @endcode
   *
   * @par Concepts:
   * Socket_Option, Linger_Socket_Option.
   ','line_number':401,'multiline':True]
['text':'/ Socket option for putting received out-of-band data inline.','line_number':435,'multiline':False]
['text':'*
   * Implements the SOL_SOCKET/SO_OOBINLINE socket option.
   *
   * @par Examples
   * Setting the option:
   * @code
   * asio::ip::tcp::socket socket(io_context);
   * ...
   * asio::socket_base::out_of_band_inline option(true);
   * socket.set_option(option);
   * @endcode
   *
   * @par
   * Getting the current option value:
   * @code
   * asio::ip::tcp::socket socket(io_context);
   * ...
   * asio::socket_base::out_of_band_inline option;
   * socket.get_option(option);
   * bool value = option.value();
   * @endcode
   *
   * @par Concepts:
   * Socket_Option, Boolean_Socket_Option.
   ','line_number':436,'multiline':True]
['text':'/ Socket option to report aborted connections on accept.','line_number':469,'multiline':False]
['text':'*
   * Implements a custom socket option that determines whether or not an accept
   * operation is permitted to fail with asio::error::connection_aborted.
   * By default the option is false.
   *
   * @par Examples
   * Setting the option:
   * @code
   * asio::ip::tcp::acceptor acceptor(io_context); 
   * ...
   * asio::socket_base::enable_connection_aborted option(true);
   * acceptor.set_option(option);
   * @endcode
   *
   * @par
   * Getting the current option value:
   * @code
   * asio::ip::tcp::acceptor acceptor(io_context); 
   * ...
   * asio::socket_base::enable_connection_aborted option;
   * acceptor.get_option(option);
   * bool is_set = option.value();
   * @endcode
   *
   * @par Concepts:
   * Socket_Option, Boolean_Socket_Option.
   ','line_number':470,'multiline':True]
['text':'/ IO control command to get the amount of data that can be read without','line_number':506,'multiline':False]
['text':'/ blocking.','line_number':507,'multiline':False]
['text':'*
   * Implements the FIONREAD IO control command.
   *
   * @par Example
   * @code
   * asio::ip::tcp::socket socket(io_context); 
   * ...
   * asio::socket_base::bytes_readable command(true);
   * socket.io_control(command);
   * std::size_t bytes_readable = command.get();
   * @endcode
   *
   * @par Concepts:
   * IO_Control_Command, Size_IO_Control_Command.
   ','line_number':508,'multiline':True]
['text':'/ The maximum length of the queue of pending incoming connections.','line_number':529,'multiline':False]
['text':'/ (Deprecated: Use max_listen_connections.) The maximum length of the queue','line_number':538,'multiline':False]
['text':'/ of pending incoming connections.','line_number':539,'multiline':False]
['text':' !defined(ASIO_NO_DEPRECATED)','line_number':546,'multiline':False]
['text':'/ Protected destructor to prevent deletion through this type.','line_number':549,'multiline':False]
['text':' namespace asio','line_number':555,'multiline':False]
['text':' ASIO_SOCKET_BASE_HPP','line_number':559,'multiline':False]
