['text':'','line_number':1,'multiline':False]
['text':' executor.hpp','line_number':2,'multiline':False]
['text':' ~~~~~~~~~~~~','line_number':3,'multiline':False]
['text':'','line_number':4,'multiline':False]
['text':' Copyright (c) 2003-2018 Christopher M. Kohlhoff (chris at kohlhoff dot com)','line_number':5,'multiline':False]
['text':'','line_number':6,'multiline':False]
['text':' Distributed under the Boost Software License, Version 1.0. (See accompanying','line_number':7,'multiline':False]
['text':' file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':8,'multiline':False]
['text':'','line_number':9,'multiline':False]
['text':' defined(_MSC_VER) && (_MSC_VER >= 1200)','line_number':16,'multiline':False]
['text':'/ Exception thrown when trying to access an empty polymorphic executor.','line_number':29,'multiline':False]
['text':'/ Constructor.','line_number':34,'multiline':False]
['text':'/ Obtain message associated with exception.','line_number':37,'multiline':False]
['text':'/ Polymorphic wrapper for executors.','line_number':42,'multiline':False]
['text':'/ Default constructor.','line_number':46,'multiline':False]
['text':'/ Construct from nullptr.','line_number':52,'multiline':False]
['text':'/ Copy constructor.','line_number':58,'multiline':False]
['text':'/ Move constructor.','line_number':65,'multiline':False]
['text':' defined(ASIO_HAS_MOVE) || defined(GENERATING_DOCUMENTATION)','line_number':71,'multiline':False]
['text':'/ Construct a polymorphic wrapper for the specified executor.','line_number':73,'multiline':False]
['text':'/ Allocator-aware constructor to create a polymorphic wrapper for the','line_number':77,'multiline':False]
['text':'/ specified executor.','line_number':78,'multiline':False]
['text':'/ Destructor.','line_number':82,'multiline':False]
['text':'/ Assignment operator.','line_number':88,'multiline':False]
['text':' Move assignment operator.','line_number':97,'multiline':False]
['text':' defined(ASIO_HAS_MOVE) || defined(GENERATING_DOCUMENTATION)','line_number':105,'multiline':False]
['text':'/ Assignment operator for nullptr_t.','line_number':107,'multiline':False]
['text':'/ Assignment operator to create a polymorphic wrapper for the specified','line_number':115,'multiline':False]
['text':'/ executor.','line_number':116,'multiline':False]
['text':'/ Obtain the underlying execution context.','line_number':127,'multiline':False]
['text':'/ Inform the executor that it has some outstanding work to do.','line_number':133,'multiline':False]
['text':'/ Inform the executor that some work is no longer outstanding.','line_number':139,'multiline':False]
['text':'/ Request the executor to invoke the given function object.','line_number':145,'multiline':False]
['text':'*
   * This function is used to ask the executor to execute the given function
   * object. The function object is executed according to the rules of the
   * target executor object.
   *
   * @param f The function object to be called. The executor will make a copy
   * of the handler object as required. The function signature of the function
   * object must be: @code void function(); @endcode
   *
   * @param a An allocator that may be used by the executor to allocate the
   * internal storage needed for function invocation.
   ','line_number':146,'multiline':True]
['text':'/ Request the executor to invoke the given function object.','line_number':161,'multiline':False]
['text':'*
   * This function is used to ask the executor to execute the given function
   * object. The function object is executed according to the rules of the
   * target executor object.
   *
   * @param f The function object to be called. The executor will make
   * a copy of the handler object as required. The function signature of the
   * function object must be: @code void function(); @endcode
   *
   * @param a An allocator that may be used by the executor to allocate the
   * internal storage needed for function invocation.
   ','line_number':162,'multiline':True]
['text':'/ Request the executor to invoke the given function object.','line_number':177,'multiline':False]
['text':'*
   * This function is used to ask the executor to execute the given function
   * object. The function object is executed according to the rules of the
   * target executor object.
   *
   * @param f The function object to be called. The executor will make
   * a copy of the handler object as required. The function signature of the
   * function object must be: @code void function(); @endcode
   *
   * @param a An allocator that may be used by the executor to allocate the
   * internal storage needed for function invocation.
   ','line_number':178,'multiline':True]
['text':'/ Operator to test if the executor contains a valid target.','line_number':197,'multiline':False]
['text':'/ Obtain type information for the target executor object.','line_number':203,'multiline':False]
['text':'*
   * @returns If @c *this has a target type of type @c T, <tt>typeid(T)</tt>;
   * otherwise, <tt>typeid(void)</tt>.
   ','line_number':204,'multiline':True]
['text':' !defined(ASIO_NO_TYPEID) || defined(GENERATING_DOCUMENTATION)','line_number':213,'multiline':False]
['text':' !defined(ASIO_NO_TYPEID) || defined(GENERATING_DOCUMENTATION)','line_number':218,'multiline':False]
['text':'/ Obtain a pointer to the target executor object.','line_number':220,'multiline':False]
['text':'*
   * @returns If <tt>target_type() == typeid(T)</tt>, a pointer to the stored
   * executor target; otherwise, a null pointer.
   ','line_number':221,'multiline':True]
['text':'/ Obtain a pointer to the target executor object.','line_number':228,'multiline':False]
['text':'*
   * @returns If <tt>target_type() == typeid(T)</tt>, a pointer to the stored
   * executor target; otherwise, a null pointer.
   ','line_number':229,'multiline':True]
['text':'/ Compare two executors for equality.','line_number':236,'multiline':False]
['text':'/ Compare two executors for inequality.','line_number':247,'multiline':False]
['text':' !defined(ASIO_NO_TYPEID)','line_number':261,'multiline':False]
['text':' !defined(ASIO_NO_TYPEID)','line_number':263,'multiline':False]
['text':' !defined(ASIO_NO_TYPEID)','line_number':270,'multiline':False]
['text':' !defined(ASIO_NO_TYPEID)','line_number':273,'multiline':False]
['text':' Base class for all polymorphic executor implementations.','line_number':276,'multiline':False]
['text':' Helper function to check and return the implementation pointer.','line_number':302,'multiline':False]
['text':' Helper function to clone another implementation.','line_number':313,'multiline':False]
['text':' Helper function to destroy an implementation.','line_number':319,'multiline':False]
['text':' !defined(GENERATING_DOCUMENTATION)','line_number':327,'multiline':False]
['text':' namespace asio','line_number':330,'multiline':False]
['text':' defined(ASIO_HEADER_ONLY)','line_number':339,'multiline':False]
['text':' ASIO_EXECUTOR_HPP','line_number':341,'multiline':False]
