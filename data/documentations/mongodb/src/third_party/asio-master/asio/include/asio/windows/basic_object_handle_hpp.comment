['text':'','line_number':1,'multiline':False]
['text':' windows/basic_object_handle.hpp','line_number':2,'multiline':False]
['text':' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~','line_number':3,'multiline':False]
['text':'','line_number':4,'multiline':False]
['text':' Copyright (c) 2003-2018 Christopher M. Kohlhoff (chris at kohlhoff dot com)','line_number':5,'multiline':False]
['text':' Copyright (c) 2011 Boris Schaeling (boris@highscore.de)','line_number':6,'multiline':False]
['text':'','line_number':7,'multiline':False]
['text':' Distributed under the Boost Software License, Version 1.0. (See accompanying','line_number':8,'multiline':False]
['text':' file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':9,'multiline':False]
['text':'','line_number':10,'multiline':False]
['text':' defined(_MSC_VER) && (_MSC_VER >= 1200)','line_number':17,'multiline':False]
['text':'/ Provides object-oriented handle functionality.','line_number':36,'multiline':False]
['text':'*
 * The windows::basic_object_handle class template provides asynchronous and
 * blocking object-oriented handle functionality.
 *
 * @par Thread Safety
 * @e Distinct @e objects: Safe.@n
 * @e Shared @e objects: Unsafe.
 ','line_number':37,'multiline':True]
['text':'/ The native representation of a handle.','line_number':50,'multiline':False]
['text':'/ Construct a basic_object_handle without opening it.','line_number':53,'multiline':False]
['text':'*
   * This constructor creates an object handle without opening it.
   *
   * @param io_context The io_context object that the object handle will use to
   * dispatch handlers for any asynchronous operations performed on the handle.
   ','line_number':54,'multiline':True]
['text':'/ Construct a basic_object_handle on an existing native handle.','line_number':65,'multiline':False]
['text':'*
   * This constructor creates an object handle object to hold an existing native
   * handle.
   *
   * @param io_context The io_context object that the object handle will use to
   * dispatch handlers for any asynchronous operations performed on the handle.
   *
   * @param native_handle The new underlying handle implementation.
   *
   * @throws asio::system_error Thrown on failure.
   ','line_number':66,'multiline':True]
['text':'/ Move-construct a basic_object_handle from another.','line_number':84,'multiline':False]
['text':'*
   * This constructor moves an object handle from one object to another.
   *
   * @param other The other basic_object_handle object from which the move will
   * occur.
   *
   * @note Following the move, the moved-from object is in the same state as if
   * constructed using the @c basic_object_handle(io_context&) constructor.
   ','line_number':85,'multiline':True]
['text':'/ Move-assign a basic_object_handle from another.','line_number':100,'multiline':False]
['text':'*
   * This assignment operator moves an object handle from one object to another.
   *
   * @param other The other basic_object_handle object from which the move will
   * occur.
   *
   * @note Following the move, the moved-from object is in the same state as if
   * constructed using the @c basic_object_handle(io_context&) constructor.
   ','line_number':101,'multiline':True]
['text':' defined(ASIO_HAS_MOVE) || defined(GENERATING_DOCUMENTATION)','line_number':116,'multiline':False]
['text':'/ Perform a blocking wait on the object handle.','line_number':118,'multiline':False]
['text':'*
   * This function is used to wait for the object handle to be set to the
   * signalled state. This function blocks and does not return until the object
   * handle has been set to the signalled state.
   *
   * @throws asio::system_error Thrown on failure.
   ','line_number':119,'multiline':True]
['text':'/ Perform a blocking wait on the object handle.','line_number':133,'multiline':False]
['text':'*
   * This function is used to wait for the object handle to be set to the
   * signalled state. This function blocks and does not return until the object
   * handle has been set to the signalled state.
   *
   * @param ec Set to indicate what error occurred, if any.
   ','line_number':134,'multiline':True]
['text':'/ Start an asynchronous wait on the object handle.','line_number':146,'multiline':False]
['text':'*
   * This function is be used to initiate an asynchronous wait against the
   * object handle. It always returns immediately.
   *
   * @param handler The handler to be called when the object handle is set to
   * the signalled state. Copies will be made of the handler as required. The
   * function signature of the handler must be:
   * @code void handler(
   *   const asio::error_code& error // Result of operation.
   * ); @endcode
   * Regardless of whether the asynchronous operation completes immediately or
   * not, the handler will not be invoked from within this function. Invocation
   * of the handler will be performed in a manner equivalent to using
   * asio::io_context::post().
   ','line_number':147,'multiline':True]
['text':' namespace windows','line_number':172,'multiline':False]
['text':' namespace asio','line_number':173,'multiline':False]
['text':' defined(ASIO_HAS_WINDOWS_OBJECT_HANDLE)','line_number':177,'multiline':False]
['text':'   || defined(GENERATING_DOCUMENTATION)','line_number':178,'multiline':False]
['text':' defined(ASIO_ENABLE_OLD_SERVICES)','line_number':180,'multiline':False]
['text':' ASIO_WINDOWS_BASIC_OBJECT_HANDLE_HPP','line_number':182,'multiline':False]
