['text':'','line_number':1,'multiline':False]
['text':' thread_pool.hpp','line_number':2,'multiline':False]
['text':' ~~~~~~~~~~~~~~~','line_number':3,'multiline':False]
['text':'','line_number':4,'multiline':False]
['text':' Copyright (c) 2003-2018 Christopher M. Kohlhoff (chris at kohlhoff dot com)','line_number':5,'multiline':False]
['text':'','line_number':6,'multiline':False]
['text':' Distributed under the Boost Software License, Version 1.0. (See accompanying','line_number':7,'multiline':False]
['text':' file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':8,'multiline':False]
['text':'','line_number':9,'multiline':False]
['text':' defined(_MSC_VER) && (_MSC_VER >= 1200)','line_number':16,'multiline':False]
['text':'/ A simple fixed-size thread pool.','line_number':28,'multiline':False]
['text':'*
 * The thread pool class is an execution context where functions are permitted
 * to run on one of a fixed number of threads.
 *
 * @par Submitting tasks to the pool
 *
 * To submit functions to the thread_pool, use the @ref asio::dispatch,
 * @ref asio::post or @ref asio::defer free functions.
 *
 * For example:
 *
 * @code void my_task()
 * {
 *   ...
 * }
 *
 * ...
 *
 * // Launch the pool with four threads.
 * asio::thread_pool pool(4);
 *
 * // Submit a function to the pool.
 * asio::post(pool, my_task);
 *
 * // Submit a lambda object to the pool.
 * asio::post(pool,
 *     []()
 *     {
 *       ...
 *     });
 *
 * // Wait for all tasks in the pool to complete.
 * pool.join(); @endcode
 ','line_number':29,'multiline':True]
['text':'/ Constructs a pool with an automatically determined number of threads.','line_number':69,'multiline':False]
['text':'/ Constructs a pool with a specified number of threads.','line_number':72,'multiline':False]
['text':'/ Destructor.','line_number':75,'multiline':False]
['text':'*
   * Automatically stops and joins the pool, if not explicitly done beforehand.
   ','line_number':76,'multiline':True]
['text':'/ Obtains the executor associated with the pool.','line_number':81,'multiline':False]
['text':'/ Stops the threads.','line_number':84,'multiline':False]
['text':'*
   * This function stops the threads as soon as possible. As a result of calling
   * @c stop(), pending function objects may be never be invoked.
   ','line_number':85,'multiline':True]
['text':'/ Joins the threads.','line_number':91,'multiline':False]
['text':'*
   * This function blocks until the threads in the pool have completed. If @c
   * stop() is not called prior to @c join(), the @c join() call will wait
   * until the pool has no more outstanding work.
   ','line_number':92,'multiline':True]
['text':' The underlying scheduler.','line_number':103,'multiline':False]
['text':' The threads in the pool.','line_number':106,'multiline':False]
['text':'/ Executor used to submit functions to a thread pool.','line_number':110,'multiline':False]
['text':'/ Obtain the underlying execution context.','line_number':114,'multiline':False]
['text':'/ Inform the thread pool that it has some outstanding work to do.','line_number':117,'multiline':False]
['text':'*
   * This function is used to inform the thread pool that some work has begun.
   * This ensures that the thread pool's join() function will not return while
   * the work is underway.
   ','line_number':118,'multiline':True]
['text':'/ Inform the thread pool that some work is no longer outstanding.','line_number':125,'multiline':False]
['text':'*
   * This function is used to inform the thread pool that some work has
   * finished. Once the count of unfinished work reaches zero, the thread
   * pool's join() function is permitted to exit.
   ','line_number':126,'multiline':True]
['text':'/ Request the thread pool to invoke the given function object.','line_number':133,'multiline':False]
['text':'*
   * This function is used to ask the thread pool to execute the given function
   * object. If the current thread belongs to the pool, @c dispatch() executes
   * the function before returning. Otherwise, the function will be scheduled
   * to run on the thread pool.
   *
   * @param f The function object to be called. The executor will make
   * a copy of the handler object as required. The function signature of the
   * function object must be: @code void function(); @endcode
   *
   * @param a An allocator that may be used by the executor to allocate the
   * internal storage needed for function invocation.
   ','line_number':134,'multiline':True]
['text':'/ Request the thread pool to invoke the given function object.','line_number':150,'multiline':False]
['text':'*
   * This function is used to ask the thread pool to execute the given function
   * object. The function object will never be executed inside @c post().
   * Instead, it will be scheduled to run on the thread pool.
   *
   * @param f The function object to be called. The executor will make
   * a copy of the handler object as required. The function signature of the
   * function object must be: @code void function(); @endcode
   *
   * @param a An allocator that may be used by the executor to allocate the
   * internal storage needed for function invocation.
   ','line_number':151,'multiline':True]
['text':'/ Request the thread pool to invoke the given function object.','line_number':166,'multiline':False]
['text':'*
   * This function is used to ask the thread pool to execute the given function
   * object. The function object will never be executed inside @c defer().
   * Instead, it will be scheduled to run on the thread pool.
   *
   * If the current thread belongs to the thread pool, @c defer() will delay
   * scheduling the function object until the current thread returns control to
   * the pool.
   *
   * @param f The function object to be called. The executor will make
   * a copy of the handler object as required. The function signature of the
   * function object must be: @code void function(); @endcode
   *
   * @param a An allocator that may be used by the executor to allocate the
   * internal storage needed for function invocation.
   ','line_number':167,'multiline':True]
['text':'/ Determine whether the thread pool is running in the current thread.','line_number':186,'multiline':False]
['text':'*
   * @return @c true if the current thread belongs to the pool. Otherwise
   * returns @c false.
   ','line_number':187,'multiline':True]
['text':'/ Compare two executors for equality.','line_number':193,'multiline':False]
['text':'*
   * Two executors are equal if they refer to the same underlying thread pool.
   ','line_number':194,'multiline':True]
['text':'/ Compare two executors for inequality.','line_number':203,'multiline':False]
['text':'*
   * Two executors are equal if they refer to the same underlying thread pool.
   ','line_number':204,'multiline':True]
['text':' Constructor.','line_number':216,'multiline':False]
['text':' The underlying thread pool.','line_number':219,'multiline':False]
['text':' namespace asio','line_number':223,'multiline':False]
['text':' defined(ASIO_HEADER_ONLY)','line_number':230,'multiline':False]
['text':' ASIO_THREAD_POOL_HPP','line_number':232,'multiline':False]
