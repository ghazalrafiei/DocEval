['text':'','line_number':1,'multiline':False]
['text':' basic_serial_port.hpp','line_number':2,'multiline':False]
['text':' ~~~~~~~~~~~~~~~~~~~~~','line_number':3,'multiline':False]
['text':'','line_number':4,'multiline':False]
['text':' Copyright (c) 2003-2018 Christopher M. Kohlhoff (chris at kohlhoff dot com)','line_number':5,'multiline':False]
['text':' Copyright (c) 2008 Rep Invariant Systems, Inc. (info@repinvariant.com)','line_number':6,'multiline':False]
['text':'','line_number':7,'multiline':False]
['text':' Distributed under the Boost Software License, Version 1.0. (See accompanying','line_number':8,'multiline':False]
['text':' file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':9,'multiline':False]
['text':'','line_number':10,'multiline':False]
['text':' defined(_MSC_VER) && (_MSC_VER >= 1200)','line_number':17,'multiline':False]
['text':'/ Provides serial port functionality.','line_number':38,'multiline':False]
['text':'*
 * The basic_serial_port class template provides functionality that is common
 * to all serial ports.
 *
 * @par Thread Safety
 * @e Distinct @e objects: Safe.@n
 * @e Shared @e objects: Unsafe.
 ','line_number':39,'multiline':True]
['text':'/ The native representation of a serial port.','line_number':53,'multiline':False]
['text':'/ A basic_serial_port is always the lowest layer.','line_number':56,'multiline':False]
['text':'/ Construct a basic_serial_port without opening it.','line_number':59,'multiline':False]
['text':'*
   * This constructor creates a serial port without opening it.
   *
   * @param io_context The io_context object that the serial port will use to
   * dispatch handlers for any asynchronous operations performed on the port.
   ','line_number':60,'multiline':True]
['text':'/ Construct and open a basic_serial_port.','line_number':71,'multiline':False]
['text':'*
   * This constructor creates and opens a serial port for the specified device
   * name.
   *
   * @param io_context The io_context object that the serial port will use to
   * dispatch handlers for any asynchronous operations performed on the port.
   *
   * @param device The platform-specific device name for this serial
   * port.
   ','line_number':72,'multiline':True]
['text':'/ Construct and open a basic_serial_port.','line_number':91,'multiline':False]
['text':'*
   * This constructor creates and opens a serial port for the specified device
   * name.
   *
   * @param io_context The io_context object that the serial port will use to
   * dispatch handlers for any asynchronous operations performed on the port.
   *
   * @param device The platform-specific device name for this serial
   * port.
   ','line_number':92,'multiline':True]
['text':'/ Construct a basic_serial_port on an existing native serial port.','line_number':111,'multiline':False]
['text':'*
   * This constructor creates a serial port object to hold an existing native
   * serial port.
   *
   * @param io_context The io_context object that the serial port will use to
   * dispatch handlers for any asynchronous operations performed on the port.
   *
   * @param native_serial_port A native serial port.
   *
   * @throws asio::system_error Thrown on failure.
   ','line_number':112,'multiline':True]
['text':'/ Move-construct a basic_serial_port from another.','line_number':134,'multiline':False]
['text':'*
   * This constructor moves a serial port from one object to another.
   *
   * @param other The other basic_serial_port object from which the move will
   * occur.
   *
   * @note Following the move, the moved-from object is in the same state as if
   * constructed using the @c basic_serial_port(io_context&) constructor.
   ','line_number':135,'multiline':True]
['text':'/ Move-assign a basic_serial_port from another.','line_number':150,'multiline':False]
['text':'*
   * This assignment operator moves a serial port from one object to another.
   *
   * @param other The other basic_serial_port object from which the move will
   * occur.
   *
   * @note Following the move, the moved-from object is in the same state as if
   * constructed using the @c basic_serial_port(io_context&) constructor.
   ','line_number':151,'multiline':True]
['text':' defined(ASIO_HAS_MOVE) || defined(GENERATING_DOCUMENTATION)','line_number':166,'multiline':False]
['text':'/ Get a reference to the lowest layer.','line_number':168,'multiline':False]
['text':'*
   * This function returns a reference to the lowest layer in a stack of
   * layers. Since a basic_serial_port cannot contain any further layers, it
   * simply returns a reference to itself.
   *
   * @return A reference to the lowest layer in the stack of layers. Ownership
   * is not transferred to the caller.
   ','line_number':169,'multiline':True]
['text':'/ Get a const reference to the lowest layer.','line_number':182,'multiline':False]
['text':'*
   * This function returns a const reference to the lowest layer in a stack of
   * layers. Since a basic_serial_port cannot contain any further layers, it
   * simply returns a reference to itself.
   *
   * @return A const reference to the lowest layer in the stack of layers.
   * Ownership is not transferred to the caller.
   ','line_number':183,'multiline':True]
['text':'/ Open the serial port using the specified device name.','line_number':196,'multiline':False]
['text':'*
   * This function opens the serial port for the specified device name.
   *
   * @param device The platform-specific device name.
   *
   * @throws asio::system_error Thrown on failure.
   ','line_number':197,'multiline':True]
['text':'/ Open the serial port using the specified device name.','line_number':211,'multiline':False]
['text':'*
   * This function opens the serial port using the given platform-specific
   * device name.
   *
   * @param device The platform-specific device name.
   *
   * @param ec Set the indicate what error occurred, if any.
   ','line_number':212,'multiline':True]
['text':'/ Assign an existing native serial port to the serial port.','line_number':227,'multiline':False]
['text':'
   * This function opens the serial port to hold an existing native serial port.
   *
   * @param native_serial_port A native serial port.
   *
   * @throws asio::system_error Thrown on failure.
   ','line_number':228,'multiline':True]
['text':'/ Assign an existing native serial port to the serial port.','line_number':243,'multiline':False]
['text':'
   * This function opens the serial port to hold an existing native serial port.
   *
   * @param native_serial_port A native serial port.
   *
   * @param ec Set to indicate what error occurred, if any.
   ','line_number':244,'multiline':True]
['text':'/ Determine whether the serial port is open.','line_number':259,'multiline':False]
['text':'/ Close the serial port.','line_number':265,'multiline':False]
['text':'*
   * This function is used to close the serial port. Any asynchronous read or
   * write operations will be cancelled immediately, and will complete with the
   * asio::error::operation_aborted error.
   *
   * @throws asio::system_error Thrown on failure.
   ','line_number':266,'multiline':True]
['text':'/ Close the serial port.','line_number':280,'multiline':False]
['text':'*
   * This function is used to close the serial port. Any asynchronous read or
   * write operations will be cancelled immediately, and will complete with the
   * asio::error::operation_aborted error.
   *
   * @param ec Set to indicate what error occurred, if any.
   ','line_number':281,'multiline':True]
['text':'/ Get the native serial port representation.','line_number':294,'multiline':False]
['text':'*
   * This function may be used to obtain the underlying representation of the
   * serial port. This is intended to allow access to native serial port
   * functionality that is not otherwise provided.
   ','line_number':295,'multiline':True]
['text':'/ Cancel all asynchronous operations associated with the serial port.','line_number':305,'multiline':False]
['text':'*
   * This function causes all outstanding asynchronous read or write operations
   * to finish immediately, and the handlers for cancelled operations will be
   * passed the asio::error::operation_aborted error.
   *
   * @throws asio::system_error Thrown on failure.
   ','line_number':306,'multiline':True]
['text':'/ Cancel all asynchronous operations associated with the serial port.','line_number':320,'multiline':False]
['text':'*
   * This function causes all outstanding asynchronous read or write operations
   * to finish immediately, and the handlers for cancelled operations will be
   * passed the asio::error::operation_aborted error.
   *
   * @param ec Set to indicate what error occurred, if any.
   ','line_number':321,'multiline':True]
['text':'/ Send a break sequence to the serial port.','line_number':334,'multiline':False]
['text':'*
   * This function causes a break sequence of platform-specific duration to be
   * sent out the serial port.
   *
   * @throws asio::system_error Thrown on failure.
   ','line_number':335,'multiline':True]
['text':'/ Send a break sequence to the serial port.','line_number':348,'multiline':False]
['text':'*
   * This function causes a break sequence of platform-specific duration to be
   * sent out the serial port.
   *
   * @param ec Set to indicate what error occurred, if any.
   ','line_number':349,'multiline':True]
['text':'/ Set an option on the serial port.','line_number':361,'multiline':False]
['text':'*
   * This function is used to set an option on the serial port.
   *
   * @param option The option value to be set on the serial port.
   *
   * @throws asio::system_error Thrown on failure.
   *
   * @sa SettableSerialPortOption @n
   * asio::serial_port_base::baud_rate @n
   * asio::serial_port_base::flow_control @n
   * asio::serial_port_base::parity @n
   * asio::serial_port_base::stop_bits @n
   * asio::serial_port_base::character_size
   ','line_number':362,'multiline':True]
['text':'/ Set an option on the serial port.','line_number':384,'multiline':False]
['text':'*
   * This function is used to set an option on the serial port.
   *
   * @param option The option value to be set on the serial port.
   *
   * @param ec Set to indicate what error occurred, if any.
   *
   * @sa SettableSerialPortOption @n
   * asio::serial_port_base::baud_rate @n
   * asio::serial_port_base::flow_control @n
   * asio::serial_port_base::parity @n
   * asio::serial_port_base::stop_bits @n
   * asio::serial_port_base::character_size
   ','line_number':385,'multiline':True]
['text':'/ Get an option from the serial port.','line_number':407,'multiline':False]
['text':'*
   * This function is used to get the current value of an option on the serial
   * port.
   *
   * @param option The option value to be obtained from the serial port.
   *
   * @throws asio::system_error Thrown on failure.
   *
   * @sa GettableSerialPortOption @n
   * asio::serial_port_base::baud_rate @n
   * asio::serial_port_base::flow_control @n
   * asio::serial_port_base::parity @n
   * asio::serial_port_base::stop_bits @n
   * asio::serial_port_base::character_size
   ','line_number':408,'multiline':True]
['text':'/ Get an option from the serial port.','line_number':431,'multiline':False]
['text':'*
   * This function is used to get the current value of an option on the serial
   * port.
   *
   * @param option The option value to be obtained from the serial port.
   *
   * @param ec Set to indicate what error occurred, if any.
   *
   * @sa GettableSerialPortOption @n
   * asio::serial_port_base::baud_rate @n
   * asio::serial_port_base::flow_control @n
   * asio::serial_port_base::parity @n
   * asio::serial_port_base::stop_bits @n
   * asio::serial_port_base::character_size
   ','line_number':432,'multiline':True]
['text':'/ Write some data to the serial port.','line_number':455,'multiline':False]
['text':'*
   * This function is used to write data to the serial port. The function call
   * will block until one or more bytes of the data has been written
   * successfully, or until an error occurs.
   *
   * @param buffers One or more data buffers to be written to the serial port.
   *
   * @returns The number of bytes written.
   *
   * @throws asio::system_error Thrown on failure. An error code of
   * asio::error::eof indicates that the connection was closed by the
   * peer.
   *
   * @note The write_some operation may not transmit all of the data to the
   * peer. Consider using the @ref write function if you need to ensure that
   * all data is written before the blocking operation completes.
   *
   * @par Example
   * To write a single data buffer use the @ref buffer function as follows:
   * @code
   * serial_port.write_some(asio::buffer(data, size));
   * @endcode
   * See the @ref buffer documentation for information on writing multiple
   * buffers in one go, and how to use it with arrays, boost::array or
   * std::vector.
   ','line_number':456,'multiline':True]
['text':'/ Write some data to the serial port.','line_number':492,'multiline':False]
['text':'*
   * This function is used to write data to the serial port. The function call
   * will block until one or more bytes of the data has been written
   * successfully, or until an error occurs.
   *
   * @param buffers One or more data buffers to be written to the serial port.
   *
   * @param ec Set to indicate what error occurred, if any.
   *
   * @returns The number of bytes written. Returns 0 if an error occurred.
   *
   * @note The write_some operation may not transmit all of the data to the
   * peer. Consider using the @ref write function if you need to ensure that
   * all data is written before the blocking operation completes.
   ','line_number':493,'multiline':True]
['text':'/ Start an asynchronous write.','line_number':516,'multiline':False]
['text':'*
   * This function is used to asynchronously write data to the serial port.
   * The function call always returns immediately.
   *
   * @param buffers One or more data buffers to be written to the serial port.
   * Although the buffers object may be copied as necessary, ownership of the
   * underlying memory blocks is retained by the caller, which must guarantee
   * that they remain valid until the handler is called.
   *
   * @param handler The handler to be called when the write operation completes.
   * Copies will be made of the handler as required. The function signature of
   * the handler must be:
   * @code void handler(
   *   const asio::error_code& error, // Result of operation.
   *   std::size_t bytes_transferred           // Number of bytes written.
   * ); @endcode
   * Regardless of whether the asynchronous operation completes immediately or
   * not, the handler will not be invoked from within this function. Invocation
   * of the handler will be performed in a manner equivalent to using
   * asio::io_context::post().
   *
   * @note The write operation may not transmit all of the data to the peer.
   * Consider using the @ref async_write function if you need to ensure that all
   * data is written before the asynchronous operation completes.
   *
   * @par Example
   * To write a single data buffer use the @ref buffer function as follows:
   * @code
   * serial_port.async_write_some(asio::buffer(data, size), handler);
   * @endcode
   * See the @ref buffer documentation for information on writing multiple
   * buffers in one go, and how to use it with arrays, boost::array or
   * std::vector.
   ','line_number':517,'multiline':True]
['text':' If you get an error on the following line it means that your handler does','line_number':557,'multiline':False]
['text':' not meet the documented type requirements for a WriteHandler.','line_number':558,'multiline':False]
['text':'/ Read some data from the serial port.','line_number':565,'multiline':False]
['text':'*
   * This function is used to read data from the serial port. The function
   * call will block until one or more bytes of data has been read successfully,
   * or until an error occurs.
   *
   * @param buffers One or more buffers into which the data will be read.
   *
   * @returns The number of bytes read.
   *
   * @throws asio::system_error Thrown on failure. An error code of
   * asio::error::eof indicates that the connection was closed by the
   * peer.
   *
   * @note The read_some operation may not read all of the requested number of
   * bytes. Consider using the @ref read function if you need to ensure that
   * the requested amount of data is read before the blocking operation
   * completes.
   *
   * @par Example
   * To read into a single data buffer use the @ref buffer function as follows:
   * @code
   * serial_port.read_some(asio::buffer(data, size));
   * @endcode
   * See the @ref buffer documentation for information on reading into multiple
   * buffers in one go, and how to use it with arrays, boost::array or
   * std::vector.
   ','line_number':566,'multiline':True]
['text':'/ Read some data from the serial port.','line_number':603,'multiline':False]
['text':'*
   * This function is used to read data from the serial port. The function
   * call will block until one or more bytes of data has been read successfully,
   * or until an error occurs.
   *
   * @param buffers One or more buffers into which the data will be read.
   *
   * @param ec Set to indicate what error occurred, if any.
   *
   * @returns The number of bytes read. Returns 0 if an error occurred.
   *
   * @note The read_some operation may not read all of the requested number of
   * bytes. Consider using the @ref read function if you need to ensure that
   * the requested amount of data is read before the blocking operation
   * completes.
   ','line_number':604,'multiline':True]
['text':'/ Start an asynchronous read.','line_number':628,'multiline':False]
['text':'*
   * This function is used to asynchronously read data from the serial port.
   * The function call always returns immediately.
   *
   * @param buffers One or more buffers into which the data will be read.
   * Although the buffers object may be copied as necessary, ownership of the
   * underlying memory blocks is retained by the caller, which must guarantee
   * that they remain valid until the handler is called.
   *
   * @param handler The handler to be called when the read operation completes.
   * Copies will be made of the handler as required. The function signature of
   * the handler must be:
   * @code void handler(
   *   const asio::error_code& error, // Result of operation.
   *   std::size_t bytes_transferred           // Number of bytes read.
   * ); @endcode
   * Regardless of whether the asynchronous operation completes immediately or
   * not, the handler will not be invoked from within this function. Invocation
   * of the handler will be performed in a manner equivalent to using
   * asio::io_context::post().
   *
   * @note The read operation may not read all of the requested number of bytes.
   * Consider using the @ref async_read function if you need to ensure that the
   * requested amount of data is read before the asynchronous operation
   * completes.
   *
   * @par Example
   * To read into a single data buffer use the @ref buffer function as follows:
   * @code
   * serial_port.async_read_some(asio::buffer(data, size), handler);
   * @endcode
   * See the @ref buffer documentation for information on reading into multiple
   * buffers in one go, and how to use it with arrays, boost::array or
   * std::vector.
   ','line_number':629,'multiline':True]
['text':' If you get an error on the following line it means that your handler does','line_number':670,'multiline':False]
['text':' not meet the documented type requirements for a ReadHandler.','line_number':671,'multiline':False]
['text':' namespace asio','line_number':679,'multiline':False]
['text':' defined(ASIO_HAS_SERIAL_PORT)','line_number':683,'multiline':False]
['text':'   || defined(GENERATING_DOCUMENTATION)','line_number':684,'multiline':False]
['text':' defined(ASIO_ENABLE_OLD_SERVICES)','line_number':686,'multiline':False]
['text':' ASIO_BASIC_SERIAL_PORT_HPP','line_number':688,'multiline':False]
