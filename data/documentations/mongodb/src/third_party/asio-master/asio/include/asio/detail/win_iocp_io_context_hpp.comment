['text':'','line_number':1,'multiline':False]
['text':' detail/win_iocp_io_context.hpp','line_number':2,'multiline':False]
['text':' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~','line_number':3,'multiline':False]
['text':'','line_number':4,'multiline':False]
['text':' Copyright (c) 2003-2018 Christopher M. Kohlhoff (chris at kohlhoff dot com)','line_number':5,'multiline':False]
['text':'','line_number':6,'multiline':False]
['text':' Distributed under the Boost Software License, Version 1.0. (See accompanying','line_number':7,'multiline':False]
['text':' file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':8,'multiline':False]
['text':'','line_number':9,'multiline':False]
['text':' defined(_MSC_VER) && (_MSC_VER >= 1200)','line_number':16,'multiline':False]
['text':' Constructor. Specifies a concurrency hint that is passed through to the','line_number':48,'multiline':False]
['text':' underlying I/O completion port.','line_number':49,'multiline':False]
['text':' Destroy all user-defined handler objects owned by the service.','line_number':53,'multiline':False]
['text':' Initialise the task. Nothing to do here.','line_number':56,'multiline':False]
['text':' Register a handle with the IO completion port.','line_number':61,'multiline':False]
['text':' Run the event loop until stopped or no more work.','line_number':65,'multiline':False]
['text':' Run until stopped or one operation is performed.','line_number':68,'multiline':False]
['text':' Run until timeout, interrupted, or one operation is performed.','line_number':71,'multiline':False]
['text':' Poll for operations without blocking.','line_number':74,'multiline':False]
['text':' Poll for one operation without blocking.','line_number':77,'multiline':False]
['text':' Stop the event processing loop.','line_number':80,'multiline':False]
['text':' Determine whether the io_context is stopped.','line_number':83,'multiline':False]
['text':' Restart in preparation for a subsequent run invocation.','line_number':89,'multiline':False]
['text':' Notify that some work has started.','line_number':95,'multiline':False]
['text':' Notify that some work has finished.','line_number':101,'multiline':False]
['text':' Return whether a handler can be dispatched immediately.','line_number':108,'multiline':False]
['text':' Request invocation of the given operation and return immediately. Assumes','line_number':114,'multiline':False]
['text':' that work_started() has not yet been called for the operation.','line_number':115,'multiline':False]
['text':' Request invocation of the given operation and return immediately. Assumes','line_number':122,'multiline':False]
['text':' that work_started() was previously called for the operation.','line_number':123,'multiline':False]
['text':' Request invocation of the given operation and return immediately. Assumes','line_number':126,'multiline':False]
['text':' that work_started() was previously called for the operations.','line_number':127,'multiline':False]
['text':' Request invocation of the given operation using the thread-private queue','line_number':131,'multiline':False]
['text':' and return immediately. Assumes that work_started() has not yet been','line_number':132,'multiline':False]
['text':' called for the operation.','line_number':133,'multiline':False]
['text':' Request invocation of the given operation using the thread-private queue','line_number':139,'multiline':False]
['text':' and return immediately. Assumes that work_started() was previously called','line_number':140,'multiline':False]
['text':' for the operation.','line_number':141,'multiline':False]
['text':' Enqueue the given operation following a failed attempt to dispatch the','line_number':147,'multiline':False]
['text':' operation for immediate invocation.','line_number':148,'multiline':False]
['text':' Process unfinished operations as part of a shutdown operation. Assumes','line_number':154,'multiline':False]
['text':' that work_started() was previously called for the operations.','line_number':155,'multiline':False]
['text':' Called after starting an overlapped I/O operation that did not complete','line_number':158,'multiline':False]
['text':' immediately. The caller must have already called work_started() prior to','line_number':159,'multiline':False]
['text':' starting the operation.','line_number':160,'multiline':False]
['text':' Called after starting an overlapped I/O operation that completed','line_number':163,'multiline':False]
['text':' immediately. The caller must have already called work_started() prior to','line_number':164,'multiline':False]
['text':' starting the operation.','line_number':165,'multiline':False]
['text':' Called after starting an overlapped I/O operation that completed','line_number':169,'multiline':False]
['text':' immediately. The caller must have already called work_started() prior to','line_number':170,'multiline':False]
['text':' starting the operation.','line_number':171,'multiline':False]
['text':' Add a new timer queue to the service.','line_number':175,'multiline':False]
['text':' Remove a timer queue from the service.','line_number':179,'multiline':False]
['text':' Schedule a new operation in the given timer queue to expire at the','line_number':183,'multiline':False]
['text':' specified absolute time.','line_number':184,'multiline':False]
['text':' Cancel the timer associated with the given token. Returns the number of','line_number':190,'multiline':False]
['text':' handlers that have been posted or dispatched.','line_number':191,'multiline':False]
['text':' Move the timer operations associated with the given timer.','line_number':197,'multiline':False]
['text':' Get the concurrency hint that was used to initialise the io_context.','line_number':203,'multiline':False]
['text':' defined(WINVER) && (WINVER < 0x0500)','line_number':213,'multiline':False]
['text':' defined(WINVER) && (WINVER < 0x0500)','line_number':216,'multiline':False]
['text':' Dequeues at most one operation from the I/O completion port, and then','line_number':218,'multiline':False]
['text':' executes it. Returns the number of operations that were dequeued (i.e.','line_number':219,'multiline':False]
['text':' either 0 or 1).','line_number':220,'multiline':False]
['text':' Helper to calculate the GetQueuedCompletionStatus timeout.','line_number':223,'multiline':False]
['text':' Helper function to add a new timer queue.','line_number':226,'multiline':False]
['text':' Helper function to remove a timer queue.','line_number':229,'multiline':False]
['text':' Called to recalculate and update the timeout.','line_number':232,'multiline':False]
['text':' Helper class to call work_finished() on block exit.','line_number':235,'multiline':False]
['text':' Helper class for managing a HANDLE.','line_number':238,'multiline':False]
['text':' The IO completion port used for queueing operations.','line_number':246,'multiline':False]
['text':' The count of unfinished work.','line_number':249,'multiline':False]
['text':' Flag to indicate whether the event loop has been stopped.','line_number':252,'multiline':False]
['text':' Flag to indicate whether there is an in-flight stop event. Every event','line_number':255,'multiline':False]
['text':' posted using PostQueuedCompletionStatus consumes non-paged pool, so to','line_number':256,'multiline':False]
['text':' avoid exhausting this resouce we limit the number of outstanding events.','line_number':257,'multiline':False]
['text':' Flag to indicate whether the service has been shut down.','line_number':260,'multiline':False]
['text':' Timeout to use with GetQueuedCompletionStatus on older versions of','line_number':265,'multiline':False]
['text':' Windows. Some versions of windows have a "bug" where a call to','line_number':266,'multiline':False]
['text':' GetQueuedCompletionStatus can appear stuck even though there are events','line_number':267,'multiline':False]
['text':' waiting on the queue. Using a timeout helps to work around the issue.','line_number':268,'multiline':False]
['text':' Maximum waitable timer timeout, in milliseconds.','line_number':271,'multiline':False]
['text':' Maximum waitable timer timeout, in microseconds.','line_number':274,'multiline':False]
['text':' Completion key value used to wake up a thread to dispatch timers or','line_number':277,'multiline':False]
['text':' completed operations.','line_number':278,'multiline':False]
['text':' Completion key value to indicate that an operation has posted with the','line_number':281,'multiline':False]
['text':' original last_error and bytes_transferred values stored in the fields of','line_number':282,'multiline':False]
['text':' the OVERLAPPED structure.','line_number':283,'multiline':False]
['text':' Timeout to use with GetQueuedCompletionStatus.','line_number':287,'multiline':False]
['text':' Function object for processing timeouts in a background thread.','line_number':290,'multiline':False]
['text':' Background thread used for processing timeouts.','line_number':294,'multiline':False]
['text':' A waitable timer object used for waiting for timeouts.','line_number':297,'multiline':False]
['text':' Non-zero if timers or completed operations need to be dispatched.','line_number':300,'multiline':False]
['text':' Mutex for protecting access to the timer queues and completed operations.','line_number':303,'multiline':False]
['text':' The timer queues.','line_number':306,'multiline':False]
['text':' The operations that are ready to dispatch.','line_number':309,'multiline':False]
['text':' The concurrency hint used to initialise the io_context.','line_number':312,'multiline':False]
['text':' namespace detail','line_number':316,'multiline':False]
['text':' namespace asio','line_number':317,'multiline':False]
['text':' defined(ASIO_HEADER_ONLY)','line_number':324,'multiline':False]
['text':' defined(ASIO_HAS_IOCP)','line_number':326,'multiline':False]
['text':' ASIO_DETAIL_WIN_IOCP_IO_CONTEXT_HPP','line_number':328,'multiline':False]
