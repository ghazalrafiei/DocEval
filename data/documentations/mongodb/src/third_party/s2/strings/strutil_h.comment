['text':'','line_number':1,'multiline':False]
['text':' Copyright 1999-2006 and onwards Google, Inc.','line_number':2,'multiline':False]
['text':'','line_number':3,'multiline':False]
['text':' Useful string functions and so forth.  This is a grab-bag file.','line_number':4,'multiline':False]
['text':'','line_number':5,'multiline':False]
['text':' You might also want to look at memutil.h, which holds mem*()','line_number':6,'multiline':False]
['text':' equivalents of a lot of the str*() functions in string.h,','line_number':7,'multiline':False]
['text':' eg memstr, mempbrk, etc.','line_number':8,'multiline':False]
['text':'','line_number':9,'multiline':False]
['text':' If you need to process UTF8 strings, take a look at files in i18n/utf8.','line_number':10,'multiline':False]
['text':' for strcasecmp (check SuSv3 -- this is the only header it's in!)','line_number':37,'multiline':False]
['text':' MSVC doesn't have <strings.h>. Luckily, it defines equivalent','line_number':38,'multiline':False]
['text':' functions (see port.h)','line_number':39,'multiline':False]
['text':' not needed, but removing it will break the build','line_number':43,'multiline':False]
['text':' A buffer size which is large enough for all the FastToBuffer functions, as','line_number':47,'multiline':False]
['text':' well as DoubleToBuffer and FloatToBuffer.  We define this here in case other','line_number':48,'multiline':False]
['text':' string headers depend on it.','line_number':49,'multiline':False]
['text':' for CHECK','line_number':53,'multiline':False]
['text':'#include "charset.h"','line_number':57,'multiline':False]
['text':'#include "escaping.h"','line_number':58,'multiline':False]
['text':'#include "host_port.h"','line_number':59,'multiline':False]
['text':' ----------------------------------------------------------------------','line_number':64,'multiline':False]
['text':' FpToString()','line_number':65,'multiline':False]
['text':' FloatToString()','line_number':66,'multiline':False]
['text':' IntToString()','line_number':67,'multiline':False]
['text':' Int64ToString()','line_number':68,'multiline':False]
['text':' UInt64ToString()','line_number':69,'multiline':False]
['text':'    Convert various types to their string representation, possibly padded','line_number':70,'multiline':False]
['text':'    with spaces, using snprintf format specifiers.','line_number':71,'multiline':False]
['text':'    "Fp" here stands for fingerprint: a 64-bit entity','line_number':72,'multiline':False]
['text':'    represented in 16 hex digits.','line_number':73,'multiline':False]
['text':' ----------------------------------------------------------------------','line_number':74,'multiline':False]
['text':' The default formats are %7f, %7d, and %7u respectively','line_number':82,'multiline':False]
['text':' ----------------------------------------------------------------------','line_number':88,'multiline':False]
['text':' FastIntToBuffer()','line_number':89,'multiline':False]
['text':' FastHexToBuffer()','line_number':90,'multiline':False]
['text':' FastHex64ToBuffer()','line_number':91,'multiline':False]
['text':' FastHex32ToBuffer()','line_number':92,'multiline':False]
['text':' FastTimeToBuffer()','line_number':93,'multiline':False]
['text':'    These are intended for speed.  FastIntToBuffer() assumes the','line_number':94,'multiline':False]
['text':'    integer is non-negative.  FastHexToBuffer() puts output in','line_number':95,'multiline':False]
['text':'    hex rather than decimal.  FastTimeToBuffer() puts the output','line_number':96,'multiline':False]
['text':'    into RFC822 format.','line_number':97,'multiline':False]
['text':'','line_number':98,'multiline':False]
['text':'    FastHex64ToBuffer() puts a 64-bit unsigned value in hex-format,','line_number':99,'multiline':False]
['text':'    padded to exactly 16 bytes (plus one byte for '\0')','line_number':100,'multiline':False]
['text':'','line_number':101,'multiline':False]
['text':'    FastHex32ToBuffer() puts a 32-bit unsigned value in hex-format,','line_number':102,'multiline':False]
['text':'    padded to exactly 8 bytes (plus one byte for '\0')','line_number':103,'multiline':False]
['text':'','line_number':104,'multiline':False]
['text':'       All functions take the output buffer as an arg.  FastInt()','line_number':105,'multiline':False]
['text':'    uses at most 22 bytes, FastTime() uses exactly 30 bytes.','line_number':106,'multiline':False]
['text':'    They all return a pointer to the beginning of the output,','line_number':107,'multiline':False]
['text':'    which may not be the beginning of the input buffer.  (Though','line_number':108,'multiline':False]
['text':'    for FastTimeToBuffer(), we guarantee that it is.)','line_number':109,'multiline':False]
['text':'','line_number':110,'multiline':False]
['text':'    NOTE: In 64-bit land, sizeof(time_t) is 8, so it is possible','line_number':111,'multiline':False]
['text':'    to pass to FastTimeToBuffer() a time whose year cannot be','line_number':112,'multiline':False]
['text':'    represented in 4 digits. In this case, the output buffer','line_number':113,'multiline':False]
['text':'    will contain the string "Invalid:<value>"','line_number':114,'multiline':False]
['text':' ----------------------------------------------------------------------','line_number':115,'multiline':False]
['text':' Previously documented minimums -- the buffers provided must be at least this','line_number':117,'multiline':False]
['text':' long, though these numbers are subject to change:','line_number':118,'multiline':False]
['text':'     Int32, UInt32:        12 bytes','line_number':119,'multiline':False]
['text':'     Int64, UInt64, Hex:   22 bytes','line_number':120,'multiline':False]
['text':'     Time:                 30 bytes','line_number':121,'multiline':False]
['text':'     Hex32:                 9 bytes','line_number':122,'multiline':False]
['text':'     Hex64:                17 bytes','line_number':123,'multiline':False]
['text':' Use kFastToBufferSize rather than hardcoding constants.','line_number':124,'multiline':False]
['text':' at least 22 bytes long','line_number':135,'multiline':False]
['text':' A generic "number type" to buffer template and specializations.','line_number':153,'multiline':False]
['text':'','line_number':154,'multiline':False]
['text':' The specialization of FastNumToBuffer<>() should always be made explicit:','line_number':155,'multiline':False]
['text':'    FastNumToBuffer<int32>(mynums);  // yes','line_number':156,'multiline':False]
['text':'    FastNumToBuffer(mynums);         // no','line_number':157,'multiline':False]
['text':' ----------------------------------------------------------------------','line_number':172,'multiline':False]
['text':' FastInt32ToBufferLeft()','line_number':173,'multiline':False]
['text':' FastUInt32ToBufferLeft()','line_number':174,'multiline':False]
['text':' FastInt64ToBufferLeft()','line_number':175,'multiline':False]
['text':' FastUInt64ToBufferLeft()','line_number':176,'multiline':False]
['text':'','line_number':177,'multiline':False]
['text':' Like the Fast*ToBuffer() functions above, these are intended for speed.','line_number':178,'multiline':False]
['text':' Unlike the Fast*ToBuffer() functions, however, these functions write','line_number':179,'multiline':False]
['text':' their output to the beginning of the buffer (hence the name, as the','line_number':180,'multiline':False]
['text':' output is left-aligned).  The caller is responsible for ensuring that','line_number':181,'multiline':False]
['text':' the buffer has enough space to hold the output.','line_number':182,'multiline':False]
['text':'','line_number':183,'multiline':False]
['text':' Returns a pointer to the end of the string (i.e. the null character','line_number':184,'multiline':False]
['text':' terminating the string).','line_number':185,'multiline':False]
['text':' ----------------------------------------------------------------------','line_number':186,'multiline':False]
['text':' at least 12 bytes','line_number':188,'multiline':False]
['text':' at least 12 bytes','line_number':189,'multiline':False]
['text':' at least 22 bytes','line_number':190,'multiline':False]
['text':' at least 22 bytes','line_number':191,'multiline':False]
['text':' Just define these in terms of the above.','line_number':193,'multiline':False]
['text':' ----------------------------------------------------------------------','line_number':203,'multiline':False]
['text':' ConsumeStrayLeadingZeroes','line_number':204,'multiline':False]
['text':'    Eliminates all leading zeroes (unless the string itself is composed','line_number':205,'multiline':False]
['text':'    of nothing but zeroes, in which case one is kept: 0...0 becomes 0).','line_number':206,'multiline':False]
['text':' ----------------------------------------------------------------------','line_number':209,'multiline':False]
['text':' ParseLeadingInt32Value','line_number':210,'multiline':False]
['text':'    A simple parser for int32 values. Returns the parsed value','line_number':211,'multiline':False]
['text':'    if a valid integer is found; else returns deflt. It does not','line_number':212,'multiline':False]
['text':'    check if str is entirely consumed.','line_number':213,'multiline':False]
['text':'    This cannot handle decimal numbers with leading 0s, since they will be','line_number':214,'multiline':False]
['text':'    treated as octal.  If you know it's decimal, use ParseLeadingDec32Value.','line_number':215,'multiline':False]
['text':' --------------------------------------------------------------------','line_number':216,'multiline':False]
['text':' ParseLeadingUInt32Value','line_number':222,'multiline':False]
['text':'    A simple parser for uint32 values. Returns the parsed value','line_number':223,'multiline':False]
['text':'    if a valid integer is found; else returns deflt. It does not','line_number':224,'multiline':False]
['text':'    check if str is entirely consumed.','line_number':225,'multiline':False]
['text':'    This cannot handle decimal numbers with leading 0s, since they will be','line_number':226,'multiline':False]
['text':'    treated as octal.  If you know it's decimal, use ParseLeadingUDec32Value.','line_number':227,'multiline':False]
['text':' --------------------------------------------------------------------','line_number':228,'multiline':False]
['text':' ----------------------------------------------------------------------','line_number':234,'multiline':False]
['text':' ParseLeadingDec32Value','line_number':235,'multiline':False]
['text':'    A simple parser for decimal int32 values. Returns the parsed value','line_number':236,'multiline':False]
['text':'    if a valid integer is found; else returns deflt. It does not','line_number':237,'multiline':False]
['text':'    check if str is entirely consumed.','line_number':238,'multiline':False]
['text':'    The string passed in is treated as *10 based*.','line_number':239,'multiline':False]
['text':'    This can handle strings with leading 0s.','line_number':240,'multiline':False]
['text':'    See also: ParseLeadingDec64Value','line_number':241,'multiline':False]
['text':' --------------------------------------------------------------------','line_number':242,'multiline':False]
['text':' ParseLeadingUDec32Value','line_number':248,'multiline':False]
['text':'    A simple parser for decimal uint32 values. Returns the parsed value','line_number':249,'multiline':False]
['text':'    if a valid integer is found; else returns deflt. It does not','line_number':250,'multiline':False]
['text':'    check if str is entirely consumed.','line_number':251,'multiline':False]
['text':'    The string passed in is treated as *10 based*.','line_number':252,'multiline':False]
['text':'    This can handle strings with leading 0s.','line_number':253,'multiline':False]
['text':'    See also: ParseLeadingUDec64Value','line_number':254,'multiline':False]
['text':' --------------------------------------------------------------------','line_number':255,'multiline':False]
['text':' ----------------------------------------------------------------------','line_number':261,'multiline':False]
['text':' ParseLeadingUInt64Value','line_number':262,'multiline':False]
['text':' ParseLeadingInt64Value','line_number':263,'multiline':False]
['text':' ParseLeadingHex64Value','line_number':264,'multiline':False]
['text':' ParseLeadingDec64Value','line_number':265,'multiline':False]
['text':' ParseLeadingUDec64Value','line_number':266,'multiline':False]
['text':'    A simple parser for long long values.','line_number':267,'multiline':False]
['text':'    Returns the parsed value if a','line_number':268,'multiline':False]
['text':'    valid integer is found; else returns deflt','line_number':269,'multiline':False]
['text':' --------------------------------------------------------------------','line_number':270,'multiline':False]
['text':' -------------------------------------------------------------------------','line_number':292,'multiline':False]
['text':' DictionaryParse','line_number':293,'multiline':False]
['text':'   This routine parses a common dictionary format (key and value separated','line_number':294,'multiline':False]
['text':'   by ':', entries separated by commas). This format is used for many','line_number':295,'multiline':False]
['text':'   complex commandline flags. It is also used to encode dictionaries for','line_number':296,'multiline':False]
['text':'   exporting them or writing them to a checkpoint. Returns a vector of','line_number':297,'multiline':False]
['text':'   <key, value> pairs. Returns true if there if no error in parsing, false','line_number':298,'multiline':False]
['text':'    otherwise.','line_number':299,'multiline':False]
['text':' -------------------------------------------------------------------------','line_number':300,'multiline':False]
['text':' #ifndef STRINGS_STRUTIL_H_ ','line_number':304,'multiline':True]
