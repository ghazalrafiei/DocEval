['text':' Copyright 2005 Google Inc. All Rights Reserved.','line_number':1,'multiline':False]
['text':' To avoid conflicts with our own 'int8'','line_number':31,'multiline':False]
['text':' Check ordering of children relative to parents.','line_number':78,'multiline':False]
['text':' Check that cells are represented by the position of their center','line_number':85,'multiline':False]
['text':' along the Hilbert curve.','line_number':86,'multiline':False]
['text':' Check wrapping from beginning of Hilbert curve to end and vice versa.','line_number':91,'multiline':False]
['text':' Check basic properties of advance().','line_number':115,'multiline':False]
['text':' Check basic properties of advance_wrap().','line_number':129,'multiline':False]
['text':' Check the conversion of random leaf cells to S2LatLngs and back.','line_number':146,'multiline':False]
['text':' Test random cell ids at all levels.','line_number':157,'multiline':False]
['text':' Check that invalid cell ids can be encoded.','line_number':164,'multiline':False]
['text':' Do some basic checks on the children','line_number':182,'multiline':False]
['text':' Test contains() and intersects().','line_number':196,'multiline':False]
['text':' Make sure that sequentially increasing cell ids form a continuous','line_number':223,'multiline':False]
['text':' path over the surface of the sphere, i.e. there are no','line_number':224,'multiline':False]
['text':' discontinuous jumps from one region to another.','line_number':225,'multiline':False]
['text':' Check that the ToPointRaw() returns the center of each cell','line_number':235,'multiline':False]
['text':' in (s,t) coordinates.','line_number':236,'multiline':False]
['text':' Make sure that random points on the sphere can be represented to the','line_number':246,'multiline':False]
['text':' expected level of accuracy, which in the worst case is sqrt(2/3) times','line_number':247,'multiline':False]
['text':' the maximum arc length between the points on the sphere associated with','line_number':248,'multiline':False]
['text':' adjacent values of "i" or "j".  (It is sqrt(2/3) rather than 1/2 because','line_number':249,'multiline':False]
['text':' the cells at the corners of each face are stretched -- they have 60 and','line_number':250,'multiline':False]
['text':' 120 degree angles.)','line_number':251,'multiline':False]
['text':' We compute AppendAllNeighbors, and then add in all the children of "id"','line_number':265,'multiline':False]
['text':' at the given level.  We then compare this against the result of finding','line_number':266,'multiline':False]
['text':' all the vertex neighbors of all the vertices of children of "id" at the','line_number':267,'multiline':False]
['text':' given level.  These should give the same result.','line_number':268,'multiline':False]
['text':' Sort the results and eliminate duplicates.','line_number':276,'multiline':False]
['text':' Check the edge neighbors of face 1.','line_number':285,'multiline':False]
['text':' Check the vertex neighbors of the center of face 2 at level 5.','line_number':294,'multiline':False]
['text':' Check the vertex neighbors of the corner of faces 0, 4, and 5.','line_number':305,'multiline':False]
['text':' Check that AppendAllNeighbors produces results that are consistent','line_number':314,'multiline':False]
['text':' with AppendVertexNeighbors for a bunch of random cells.','line_number':315,'multiline':False]
['text':' TestAllNeighbors computes approximately 2**(2*(diff+1)) cell ids,','line_number':320,'multiline':False]
['text':' so it's not reasonable to use large values of "diff".','line_number':321,'multiline':False]
['text':' This "test" is really a benchmark, so skip it unless we're optimized.','line_number':336,'multiline':False]
['text':' Test speed of conversions from points to leaf cells.','line_number':339,'multiline':False]
['text':' Make sure all ids are leaf cells.','line_number':344,'multiline':False]
['text':' Don't let the loop get optimized away.','line_number':354,'multiline':False]
['text':' Don't let the loop get optimized away.','line_number':365,'multiline':False]
['text':' Don't let the loop get optimized away.','line_number':376,'multiline':False]
['text':' This "test" is really a benchmark, so skip it unless we're optimized.','line_number':380,'multiline':False]
['text':' The sample points follow a spiral curve that completes one revolution','line_number':383,'multiline':False]
['text':' around the z-axis every 1/dt samples.  The z-coordinate increases','line_number':384,'multiline':False]
['text':' from -4 to +4 over FLAGS_iters samples.','line_number':385,'multiline':False]
['text':' Test speed of conversions from leaf cells to points.','line_number':391,'multiline':False]
['text':' Cheap rotation around the z-axis (spirals inward slightly','line_number':396,'multiline':False]
['text':' each revolution).','line_number':397,'multiline':False]
['text':' Don't let the loop get optimized away.','line_number':403,'multiline':False]
['text':' Don't let the loop get optimized away.','line_number':414,'multiline':False]
['text':' This "test" is really a benchmark, so skip it unless we're optimized.','line_number':418,'multiline':False]
['text':' The HTM methods are about 100 times slower than the S2CellId methods,','line_number':421,'multiline':False]
['text':' so we adjust the number of iterations accordingly.','line_number':422,'multiline':False]
['text':' Don't let the loop get optimized away.','line_number':450,'multiline':False]
['text':' Keeping the returned ids in a vector adds a negligible amount of time','line_number':452,'multiline':False]
['text':' to the idByPoint test and makes it much easier to test pointById.','line_number':453,'multiline':False]
['text':' Don't let the loop get optimized away.','line_number':476,'multiline':False]
