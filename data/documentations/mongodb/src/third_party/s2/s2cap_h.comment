['text':' Copyright 2005 Google Inc. All Rights Reserved.','line_number':1,'multiline':False]
['text':' This class represents a spherical cap, i.e. a portion of a sphere cut off','line_number':11,'multiline':False]
['text':' by a plane.  The cap is defined by its axis and height.  This','line_number':12,'multiline':False]
['text':' representation has good numerical accuracy for very small caps (unlike the','line_number':13,'multiline':False]
['text':' (axis, min-distance-from-origin) representation), and is also efficient for','line_number':14,'multiline':False]
['text':' containment tests (unlike the (axis, angle) representation).','line_number':15,'multiline':False]
['text':'','line_number':16,'multiline':False]
['text':' Here are some useful relationships between the cap height (h), the cap','line_number':17,'multiline':False]
['text':' opening angle (theta), the maximum chord length from the cap's center (d),','line_number':18,'multiline':False]
['text':' and the radius of cap's base (a).  All formulas assume a unit radius.','line_number':19,'multiline':False]
['text':'','line_number':20,'multiline':False]
['text':'     h = 1 - cos(theta)','line_number':21,'multiline':False]
['text':'       = 2 sin^2(theta/2)','line_number':22,'multiline':False]
['text':'   d^2 = 2 h','line_number':23,'multiline':False]
['text':'       = a^2 + h^2','line_number':24,'multiline':False]
['text':'','line_number':25,'multiline':False]
['text':' Caps may be constructed from either an axis and a height, or an axis and','line_number':26,'multiline':False]
['text':' an angle.  To avoid ambiguity, there are no public constructors except','line_number':27,'multiline':False]
['text':' the default constructor.','line_number':28,'multiline':False]
['text':'','line_number':29,'multiline':False]
['text':' This class is intended to be copied by value as desired.  It uses','line_number':30,'multiline':False]
['text':' the default copy constructor and assignment operator, however it is','line_number':31,'multiline':False]
['text':' not a "plain old datatype" (POD) because it has virtual functions.','line_number':32,'multiline':False]
['text':' The default constructor returns an empty S2Cap.','line_number':35,'multiline':False]
['text':' Create a cap given its axis and the cap height, i.e. the maximum','line_number':38,'multiline':False]
['text':' projected distance along the cap axis from the cap center.','line_number':39,'multiline':False]
['text':' 'axis' should be a unit-length vector.','line_number':40,'multiline':False]
['text':' Create a cap given its axis and the cap opening angle, i.e. maximum','line_number':43,'multiline':False]
['text':' angle between the axis and a point on the cap.  'axis' should be a','line_number':44,'multiline':False]
['text':' unit-length vector, and 'angle' should be non-negative.  If 'angle' is','line_number':45,'multiline':False]
['text':' 180 degrees or larger, the cap will contain the entire unit sphere.','line_number':46,'multiline':False]
['text':' Create a cap given its axis and its area in steradians.  'axis' should be','line_number':49,'multiline':False]
['text':' a unit-length vector, and 'area' should be between 0 and 4 * M_PI.','line_number':50,'multiline':False]
['text':' Return an empty cap, i.e. a cap that contains no points.','line_number':53,'multiline':False]
['text':' Return a full cap, i.e. a cap that contains all points.','line_number':56,'multiline':False]
['text':' Accessor methods.','line_number':61,'multiline':False]
['text':' Return the cap opening angle in radians, or a negative number for','line_number':66,'multiline':False]
['text':' empty caps.','line_number':67,'multiline':False]
['text':' We allow negative heights (to represent empty caps) but not heights','line_number':70,'multiline':False]
['text':' greater than 2.','line_number':71,'multiline':False]
['text':' Return true if the cap is empty, i.e. it contains no points.','line_number':74,'multiline':False]
['text':' Return true if the cap is full, i.e. it contains all points.','line_number':77,'multiline':False]
['text':' Return the complement of the interior of the cap.  A cap and its','line_number':80,'multiline':False]
['text':' complement have the same boundary but do not share any interior points.','line_number':81,'multiline':False]
['text':' The complement operator is not a bijection, since the complement of a','line_number':82,'multiline':False]
['text':' singleton cap (containing a single point) is the same as the complement','line_number':83,'multiline':False]
['text':' of an empty cap.','line_number':84,'multiline':False]
['text':' Return true if and only if this cap contains the given other cap','line_number':87,'multiline':False]
['text':' (in a set containment sense, e.g. every cap contains the empty cap).','line_number':88,'multiline':False]
['text':' Return true if and only if this cap intersects the given other cap,','line_number':91,'multiline':False]
['text':' i.e. whether they have any points in common.','line_number':92,'multiline':False]
['text':' Return true if and only if the interior of this cap intersects the','line_number':95,'multiline':False]
['text':' given other cap.  (This relationship is not symmetric, since only','line_number':96,'multiline':False]
['text':' the interior of this cap is used.)','line_number':97,'multiline':False]
['text':' Return true if and only if the given point is contained in the interior','line_number':100,'multiline':False]
['text':' of the region (i.e. the region excluding its boundary).  'p' should be','line_number':101,'multiline':False]
['text':' be a unit-length vector.','line_number':102,'multiline':False]
['text':' Increase the cap height if necessary to include the given point.','line_number':105,'multiline':False]
['text':' If the cap is empty the axis is set to the given point, but otherwise','line_number':106,'multiline':False]
['text':' it is left unchanged.  'p' should be a unit-length vector.','line_number':107,'multiline':False]
['text':' Increase the cap height if necessary to include "other".  If the current','line_number':110,'multiline':False]
['text':' cap is empty it is set to the given other cap.','line_number':111,'multiline':False]
['text':' Return a cap that contains all points within a given distance of this','line_number':114,'multiline':False]
['text':' cap.  Note that any expansion of the empty cap is still empty.','line_number':115,'multiline':False]
['text':'//////////////////////////////////////////////////////////////////////','line_number':118,'multiline':False]
['text':' S2Region interface (see s2region.h for details):','line_number':119,'multiline':False]
['text':' The same as Contains() below, just virtual.','line_number':127,'multiline':False]
['text':' The point 'p' should be a unit-length vector.','line_number':130,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////','line_number':138,'multiline':False]
['text':' The following static methods are convenience functions for assertions','line_number':139,'multiline':False]
['text':' and testing purposes only.','line_number':140,'multiline':False]
['text':' Return true if two caps are identical.','line_number':142,'multiline':False]
['text':' Return true if the cap axis and height differ by at most "max_error"','line_number':145,'multiline':False]
['text':' from the given cap "other".','line_number':146,'multiline':False]
['text':' Return true if the cap intersects 'cell', given that the cap','line_number':155,'multiline':False]
['text':' vertices have alrady been checked.','line_number':156,'multiline':False]
['text':' UTIL_GEOMETRY_S2CAP_H_','line_number':175,'multiline':False]
