['text':' Copyright 2005 Google Inc. All Rights Reserved.','line_number':1,'multiline':False]
['text':' Some standard loops to use in the tests (see descriptions below).  The','line_number':41,'multiline':False]
['text':' heap-checker ignores memory that is reachable from static variables, so','line_number':42,'multiline':False]
['text':' it is not necessary to free these loops.','line_number':43,'multiline':False]
['text':' The northern hemisphere, defined using two pairs of antipodal points.','line_number':68,'multiline':False]
['text':' The northern hemisphere, defined using three points 120 degrees apart.','line_number':71,'multiline':False]
['text':' The southern hemisphere, defined using two pairs of antipodal points.','line_number':74,'multiline':False]
['text':' The western hemisphere, defined using two pairs of antipodal points.','line_number':77,'multiline':False]
['text':' The eastern hemisphere, defined using two pairs of antipodal points.','line_number':80,'multiline':False]
['text':' The "near" hemisphere, defined using two pairs of antipodal points.','line_number':83,'multiline':False]
['text':' The "far" hemisphere, defined using two pairs of antipodal points.','line_number':86,'multiline':False]
['text':' A spiral stripe that slightly over-wraps the equator.','line_number':89,'multiline':False]
['text':' A small clockwise loop in the northern & eastern hemisperes.','line_number':93,'multiline':False]
['text':' Loop around the north pole at 80 degrees.','line_number':96,'multiline':False]
['text':' Loop around the south pole at 80 degrees.','line_number':99,'multiline':False]
['text':' A completely degenerate triangle along the equator that RobustCCW()','line_number':102,'multiline':False]
['text':' considers to be CCW.','line_number':103,'multiline':False]
['text':' A nearly-degenerate CCW chevron near the equator with very long sides','line_number':106,'multiline':False]
['text':' (about 80 degrees).  Its area is less than 1e-640, which is too small','line_number':107,'multiline':False]
['text':' to represent in double precision.','line_number':108,'multiline':False]
['text':' A diamond-shaped loop around the point 0:180.','line_number':111,'multiline':False]
['text':' Another diamond-shaped loop around the point 0:180.','line_number':114,'multiline':False]
['text':' The intersection of A and B.','line_number':117,'multiline':False]
['text':' The union of A and B.','line_number':120,'multiline':False]
['text':' A minus B (concave).','line_number':123,'multiline':False]
['text':' B minus A (concave).','line_number':126,'multiline':False]
['text':' A shape gotten from a by adding one triangle to one edge, and','line_number':129,'multiline':False]
['text':' subtracting another triangle on an opposite edge.','line_number':130,'multiline':False]
['text':' A shape gotten from a by adding one triangle to one edge, and','line_number':134,'multiline':False]
['text':' adding another triangle on an opposite edge.','line_number':135,'multiline':False]
['text':' Create a loop that contains the complement of the "arctic_80" loop.','line_number':178,'multiline':False]
['text':' The highest latitude of each edge is attained at its midpoint.','line_number':181,'multiline':False]
['text':' Construct spherical caps of random height, and approximate their boundary','line_number':195,'multiline':False]
['text':' with closely spaces vertices.  Then check that the area and centroid are','line_number':196,'multiline':False]
['text':' correct.','line_number':197,'multiline':False]
['text':' Choose a coordinate frame for the spherical cap.','line_number':200,'multiline':False]
['text':' Given two points at latitude phi and whose longitudes differ by dtheta,','line_number':204,'multiline':False]
['text':' the geodesic between the two points has a maximum latitude of','line_number':205,'multiline':False]
['text':' atan(tan(phi) / cos(dtheta/2)).  This can be derived by positioning','line_number':206,'multiline':False]
['text':' the two points at (-dtheta/2, phi) and (dtheta/2, phi).','line_number':207,'multiline':False]
['text':'','line_number':208,'multiline':False]
['text':' We want to position the vertices close enough together so that their','line_number':209,'multiline':False]
['text':' maximum distance from the boundary of the spherical cap is kMaxDist.','line_number':210,'multiline':False]
['text':' Thus we want fabs(atan(tan(phi) / cos(dtheta/2)) - phi) <= kMaxDist.','line_number':211,'multiline':False]
['text':' At least 3 vertices.','line_number':216,'multiline':False]
['text':' high probability','line_number':230,'multiline':False]
['text':' Check that the turning angle is *identical* when the vertex order is','line_number':245,'multiline':False]
['text':' rotated, and that the sign is inverted when the vertices are reversed.','line_number':246,'multiline':False]
['text':' We don't have an easy way to estimate the turning angle of this loop, but','line_number':266,'multiline':False]
['text':' we can still check that the expected invariants hold.','line_number':267,'multiline':False]
['text':' Checks that if a loop is normalized, it doesn't contain a','line_number':277,'multiline':False]
['text':' point outside of it, and vice versa.','line_number':278,'multiline':False]
['text':' Create copies of these loops so that we can change the vertex order.','line_number':305,'multiline':False]
['text':' This code checks each cell vertex is contained by exactly one of','line_number':325,'multiline':False]
['text':' the adjacent cells.','line_number':326,'multiline':False]
['text':' Contains and VirtualContainsPoint should have identical','line_number':347,'multiline':False]
['text':' implementation.','line_number':348,'multiline':False]
['text':' We can't compare north_hemi3 vs. north_hemi or south_hemi.','line_number':383,'multiline':False]
['text':' Added in 2010/08: Make sure the relations are correct if the loop','line_number':452,'multiline':False]
['text':' crossing happens on two ends of a shared boundary segment.','line_number':453,'multiline':False]
['text':' Construct a CCW polygon whose boundary is the union of the cell ids','line_number':461,'multiline':False]
['text':' in the range [begin, end).  We add the edges one by one, removing','line_number':462,'multiline':False]
['text':' any edges that are already present in the opposite direction.','line_number':463,'multiline':False]
['text':' The remaining edges form a single loop.  We simply follow it starting','line_number':479,'multiline':False]
['text':' at an arbitrary vertex and build up a list of vertices.','line_number':480,'multiline':False]
['text':' Construct polygons consisting of a sequence of adjacent cell ids','line_number':496,'multiline':False]
['text':' at some fixed level.  Comparing two polygons at the same level','line_number':497,'multiline':False]
['text':' ensures that there are no T-vertices.','line_number':498,'multiline':False]
['text':' This function is useful for debugging.','line_number':527,'multiline':False]
['text':' All vertices close to some edge, but not equivalent.','line_number':593,'multiline':False]
['text':' Two triangles that backtrack a bit on different edges.  A simple','line_number':598,'multiline':False]
['text':' greedy matching algorithm would fail on this example.','line_number':599,'multiline':False]
['text':' Initialize the loop using DecodeWithinScope and check that it is the','line_number':631,'multiline':False]
['text':' same as the original loop.','line_number':632,'multiline':False]
['text':' Initialize the same loop using Init with a vector of vertices, and','line_number':639,'multiline':False]
['text':' check that it doesn't deallocate the original memory.','line_number':640,'multiline':False]
['text':' Initialize loop2 using Decode with a decoder on different data.','line_number':653,'multiline':False]
['text':' Check that the original memory is not deallocated or overwritten.','line_number':654,'multiline':False]
['text':' This test checks that S2Loops created directly from S2Cells behave','line_number':668,'multiline':False]
['text':' identically to S2Loops created from the vertices of those cells; this','line_number':669,'multiline':False]
['text':' previously was not the case, because S2Cells calculate their bounding','line_number':670,'multiline':False]
['text':' rectangles slightly differently, and S2Loops created from them just copied','line_number':671,'multiline':False]
['text':' the S2Cell bounds.','line_number':672,'multiline':False]
['text':' Demonstrates the reason for this test; the cell bounds are more','line_number':686,'multiline':False]
['text':' conservative than the resulting loop bounds.','line_number':687,'multiline':False]
['text':' Only two vertices','line_number':692,'multiline':False]
['text':' Even if you disable s2debug, non-unit-length vertices break RobustCCW,','line_number':697,'multiline':False]
['text':' so there is no point in testing it here.','line_number':698,'multiline':False]
['text':' TODO(user): Check if the unit length test in IsValid is redundant','line_number':699,'multiline':False]
['text':' and remove it if so.','line_number':700,'multiline':False]
['text':' There is a duplicate vertex','line_number':702,'multiline':False]
['text':' Some edges intersect','line_number':707,'multiline':False]
['text':' = 5km/6400km','line_number':758,'multiline':False]
