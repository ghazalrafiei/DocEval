['text':' Copyright 2005 Google Inc. All Rights Reserved.','line_number':1,'multiline':False]
['text':'','line_number':2,'multiline':False]
['text':' Most of the S2LatLngRect methods have trivial implementations that','line_number':3,'multiline':False]
['text':' use the R1Interval and S1Interval classes, so most of the testing','line_number':4,'multiline':False]
['text':' is done in those unit tests.','line_number':5,'multiline':False]
['text':' Convenience method to construct a rectangle.  This method is','line_number':17,'multiline':False]
['text':' intentionally *not* in the S2LatLngRect interface because the','line_number':18,'multiline':False]
['text':' argument order is ambiguous, but hopefully it's not too confusing','line_number':19,'multiline':False]
['text':' within the context of this unit test.','line_number':20,'multiline':False]
['text':' Test basic properties of empty and full rectangles.','line_number':27,'multiline':False]
['text':' Check that the default S2LatLngRect is identical to Empty().','line_number':36,'multiline':False]
['text':' Check various accessor methods.','line_number':45,'multiline':False]
['text':' Make sure that GetVertex() returns vertices in CCW order.','line_number':97,'multiline':False]
['text':' Contains(S2LatLng), InteriorContains(S2LatLng), VirtualContainsPoint()','line_number':112,'multiline':False]
['text':' Test all of the interval operations on the given pair of intervals.','line_number':135,'multiline':False]
['text':' "expected_relation" is a sequence of "T" and "F" characters corresponding','line_number':136,'multiline':False]
['text':' to the expected results of Contains(), InteriorContains(), Intersects(),','line_number':137,'multiline':False]
['text':' and InteriorIntersects() respectively.','line_number':138,'multiline':False]
['text':' Contains(S2LatLngRect), InteriorContains(S2LatLngRect),','line_number':159,'multiline':False]
['text':' Intersects(), InteriorIntersects(), Union(), Intersection().','line_number':160,'multiline':False]
['text':'','line_number':161,'multiline':False]
['text':' Much more testing of these methods is done in s1interval_unittest','line_number':162,'multiline':False]
['text':' and r1interval_unittest.','line_number':163,'multiline':False]
['text':' Rectangle "r1" covers one-quarter of the sphere.','line_number':165,'multiline':False]
['text':' Test operations where one rectangle consists of a single point.','line_number':168,'multiline':False]
['text':' Check that the intersection of two rectangles that overlap in latitude','line_number':197,'multiline':False]
['text':' but not longitude is valid, and vice versa.','line_number':198,'multiline':False]
['text':' Bounding cap at center is smaller:','line_number':241,'multiline':False]
['text':' Bounding cap at north pole is smaller:','line_number':245,'multiline':False]
['text':' Longitude span > 180 degrees:','line_number':250,'multiline':False]
['text':' Test the relationship between the given rectangle and cell:','line_number':258,'multiline':False]
['text':' 0 == no intersection, 1 == MayIntersect, 2 == Intersects,','line_number':259,'multiline':False]
['text':' 3 == Vertex Containment, 4 == Contains','line_number':260,'multiline':False]
['text':' Contains(S2Cell), MayIntersect(S2Cell), Intersects(S2Cell)','line_number':275,'multiline':False]
['text':' Special cases.','line_number':277,'multiline':False]
['text':' This rectangle includes the first quadrant of face 0.  It's expanded','line_number':282,'multiline':False]
['text':' slightly because cell bounding rectangles are slightly conservative.','line_number':283,'multiline':False]
['text':' This rectangle intersects the first quadrant of face 0.','line_number':289,'multiline':False]
['text':' Rectangle consisting of a single point.','line_number':295,'multiline':False]
['text':' Rectangles that intersect the bounding rectangle of a face','line_number':299,'multiline':False]
['text':' but not the face itself.','line_number':300,'multiline':False]
['text':' This is the leaf cell at the top right hand corner of face 0.','line_number':306,'multiline':False]
['text':' It has two angles of 60 degrees and two of 120 degrees.','line_number':307,'multiline':False]
['text':' Rectangles that intersect a face but where no vertex of one region','line_number':317,'multiline':False]
['text':' is contained by the other region.  The first one passes through','line_number':318,'multiline':False]
['text':' a corner of one of the face cells.','line_number':319,'multiline':False]
['text':' These two intersect like a diamond and a square.','line_number':323,'multiline':False]
['text':' Returns the minimum distance from X to the latitude line segment defined by','line_number':349,'multiline':False]
['text':' the given latitude and longitude interval.','line_number':350,'multiline':False]
['text':' Is X inside the longitude interval?','line_number':357,'multiline':False]
['text':' Return the distance to the closer endpoint.','line_number':361,'multiline':False]
['text':' Compare every point in 'a' against every latitude edge and longitude edge','line_number':371,'multiline':False]
['text':' in 'b', and vice-versa, for a total of 16 point-vs-latitude-edge tests and','line_number':372,'multiline':False]
['text':' 16 point-vs-longitude-edge tests.','line_number':373,'multiline':False]
['text':' Make arrays containing the lo/hi latitudes and the lo/hi longitude edges.','line_number':384,'multiline':False]
['text':' For each point in a and b.','line_number':394,'multiline':False]
['text':' Get distances to latitude and longitude edges.','line_number':399,'multiline':False]
['text':' This method verifies a.GetDistance(b) by comparing its result against a','line_number':433,'multiline':False]
['text':' brute-force implementation. The correctness of the brute-force version is','line_number':434,'multiline':False]
['text':' much easier to verify by inspection.','line_number':435,'multiline':False]
['text':' This method verifies a.GetDistance(b), where b is a S2LatLng, by comparing','line_number':448,'multiline':False]
['text':' its result against a.GetDistance(c), c being the point rectangle created','line_number':449,'multiline':False]
['text':' from b.','line_number':450,'multiline':False]
['text':' Check pairs of rectangles that overlap: (should all return 0):','line_number':460,'multiline':False]
['text':' Rect that spans 180.','line_number':476,'multiline':False]
['text':' Tests near the north pole.','line_number':487,'multiline':False]
['text':' Rect that touches the north pole.','line_number':513,'multiline':False]
['text':' Rect that spans 180.','line_number':524,'multiline':False]
['text':' Tests near the south pole.','line_number':529,'multiline':False]
['text':' Test random pairs.','line_number':540,'multiline':False]
['text':' This function assumes that GetDirectedHausdorffDistance() always returns','line_number':557,'multiline':False]
['text':' a distance from some point in a to b. So the function mainly tests whether','line_number':558,'multiline':False]
['text':' the returned distance is large enough, and only does a weak test on whether','line_number':559,'multiline':False]
['text':' it is small enough.','line_number':560,'multiline':False]
['text':' Record the max sample distance as well as the sample point realizing the','line_number':566,'multiline':False]
['text':' max for easier debugging.','line_number':567,'multiline':False]
['text':' Test random pairs.','line_number':601,'multiline':False]
['text':' a and b are *minimum* bounding rectangles of two random points, in','line_number':609,'multiline':False]
['text':' particular, their Voronoi diagrams are always of the same topology. We','line_number':610,'multiline':False]
['text':' take the "complements" of a and b for more thorough testing.','line_number':611,'multiline':False]
['text':' Caller rect is contained in callee rect. Should return 0.','line_number':630,'multiline':False]
['text':' The Hausdorff distance from a point to a rect should be the same as its','line_number':643,'multiline':False]
['text':' distance to the rect.','line_number':644,'multiline':False]
['text':' north pole','line_number':646,'multiline':False]
['text':' south pole','line_number':671,'multiline':False]
['text':' north pole','line_number':673,'multiline':False]
['text':' Tests near south pole.','line_number':678,'multiline':False]
['text':' Rectangles that contain poles.','line_number':689,'multiline':False]
['text':' Two rectangles share same or complement longitudinal intervals.','line_number':695,'multiline':False]
['text':' rectangle a touches b_opposite_lng.','line_number':702,'multiline':False]
['text':' rectangle b's Voronoi diagram is degenerate (lng interval spans 180','line_number':708,'multiline':False]
['text':' degrees), and a touches the degenerate Voronoi vertex.','line_number':709,'multiline':False]
['text':' rectangle a touches a voronoi vertex of rectangle b.','line_number':715,'multiline':False]
