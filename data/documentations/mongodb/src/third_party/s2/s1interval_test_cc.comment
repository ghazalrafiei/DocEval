['text':' Copyright 2005 Google Inc. All Rights Reserved.','line_number':1,'multiline':False]
['text':' Create some standard intervals to use in the tests.  These include the','line_number':8,'multiline':False]
['text':' empty and full intervals, intervals containing a single point, and','line_number':9,'multiline':False]
['text':' intervals spanning one or more "quadrants" which are numbered as follows:','line_number':10,'multiline':False]
['text':'    quad1 == [0, Pi/2]','line_number':11,'multiline':False]
['text':'    quad2 == [Pi/2, Pi]','line_number':12,'multiline':False]
['text':'    quad3 == [-Pi, -Pi/2]','line_number':13,'multiline':False]
['text':'    quad4 == [-Pi/2, 0]','line_number':14,'multiline':False]
['text':' Single-point intervals:','line_number':18,'multiline':False]
['text':' Same as "pi" after normalization.','line_number':22,'multiline':False]
['text':' Single quadrants:','line_number':24,'multiline':False]
['text':' Quadrant pairs:','line_number':29,'multiline':False]
['text':' Quadrant triples:','line_number':34,'multiline':False]
['text':' Small intervals around the midpoints between quadrants, such that','line_number':39,'multiline':False]
['text':' the center of each interval is offset slightly CCW from the midpoint.','line_number':40,'multiline':False]
['text':' Spot-check the constructors and accessors.','line_number':57,'multiline':False]
['text':' Check that [-Pi, -Pi] is normalized to [Pi, Pi].','line_number':65,'multiline':False]
['text':' Check that the default S1Interval is identical to Empty().','line_number':71,'multiline':False]
['text':' Check that intervals can be modified.','line_number':78,'multiline':False]
['text':' is_valid(), is_empty(), is_full(), is_inverted()','line_number':85,'multiline':False]
['text':' Contains(double), InteriorContains(double)','line_number':129,'multiline':False]
['text':' Test all of the interval operations on the given pair of intervals.','line_number':158,'multiline':False]
['text':' "expected_relation" is a sequence of "T" and "F" characters corresponding','line_number':159,'multiline':False]
['text':' to the expected results of Contains(), InteriorContains(), Intersects(),','line_number':160,'multiline':False]
['text':' and InteriorIntersects() respectively.','line_number':161,'multiline':False]
['text':' bounds() returns a const reference to a member variable, so we need to','line_number':168,'multiline':False]
['text':' make a copy when invoking it on a temporary object.','line_number':169,'multiline':False]
['text':' Contains(S1Interval), InteriorContains(S1Interval),','line_number':185,'multiline':False]
['text':' Intersects(), InteriorIntersects(), Union(), Intersection()','line_number':186,'multiline':False]
['text':' This test checks that the union of two disjoint intervals is the smallest','line_number':275,'multiline':False]
['text':' interval that contains both of them.  Note that the center of "mid34"','line_number':276,'multiline':False]
['text':' slightly CCW of -Pi/2 so that there is no ambiguity about the result.','line_number':277,'multiline':False]
['text':' an interval whose complement center is 0.','line_number':364,'multiline':False]
