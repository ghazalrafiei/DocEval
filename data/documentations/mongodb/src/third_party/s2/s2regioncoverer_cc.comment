['text':' Copyright 2005 Google Inc. All Rights Reserved.','line_number':1,'multiline':False]
['text':' Define storage for header file constants (the values are not needed here).','line_number':32,'multiline':False]
['text':' We define our own own comparison function on QueueEntries in order to','line_number':35,'multiline':False]
['text':' make the results deterministic.  Using the default less<QueueEntry>,','line_number':36,'multiline':False]
['text':' entries of equal priority would be sorted according to the memory address','line_number':37,'multiline':False]
['text':' of the candidate.','line_number':38,'multiline':False]
['text':' Need to declare explicitly because of scoped pointers.','line_number':68,'multiline':False]
['text':' Expand one level at a time until we hit min_level_ to ensure that','line_number':164,'multiline':False]
['text':' we don't skip over it.','line_number':165,'multiline':False]
['text':' Optimization: add the parent cell rather than all of its children.','line_number':175,'multiline':False]
['text':' We can't do this for interior coverings, since the children just','line_number':176,'multiline':False]
['text':' intersect the region, but may not be contained by it - we need to','line_number':177,'multiline':False]
['text':' subdivide them further.','line_number':178,'multiline':False]
['text':' We negate the priority so that smaller absolute priorities are returned','line_number':183,'multiline':False]
['text':' first.  The heuristic is designed to refine the largest cells first,','line_number':184,'multiline':False]
['text':' since those are where we have the largest potential gain.  Among cells','line_number':185,'multiline':False]
['text':' at the same level, we prefer the cells with the smallest number of','line_number':186,'multiline':False]
['text':' intersecting children.  Finally, we prefer cells that have the smallest','line_number':187,'multiline':False]
['text':' number of children that cannot be refined any further.','line_number':188,'multiline':False]
['text':' Optimization: if at least 4 cells are desired (the normal case),','line_number':198,'multiline':False]
['text':' start with a 4-cell covering of the region's bounding cap.  This','line_number':199,'multiline':False]
['text':' lets us skip quite a few levels of refinement when the region to','line_number':200,'multiline':False]
['text':' be covered is relatively small.','line_number':201,'multiline':False]
['text':' Find the maximum level such that the bounding cap contains at most one','line_number':203,'multiline':False]
['text':' cell vertex at that level.','line_number':204,'multiline':False]
['text':' We don't bother trying to optimize the level == 0 case, since more than','line_number':211,'multiline':False]
['text':' four face cells may be required.','line_number':212,'multiline':False]
['text':' Find the leaf cell containing the cap axis, and determine which','line_number':214,'multiline':False]
['text':' subcell of the parent cell contains it.','line_number':215,'multiline':False]
['text':' Default: start with all six cube faces.','line_number':226,'multiline':False]
['text':' Strategy: Start with the 6 faces of the cube.  Discard any','line_number':234,'multiline':False]
['text':' that do not intersect the shape.  Then repeatedly choose the','line_number':235,'multiline':False]
['text':' largest cell that intersects the shape and subdivide it.','line_number':236,'multiline':False]
['text':'','line_number':237,'multiline':False]
['text':' result_ contains the cells that will be part of the output, while pq_','line_number':238,'multiline':False]
['text':' contains cells that we may still subdivide further.  Cells that are','line_number':239,'multiline':False]
['text':' entirely contained within the region are immediately added to the output,','line_number':240,'multiline':False]
['text':' while cells that do not intersect the region are immediately discarded.','line_number':241,'multiline':False]
['text':' Therefore pq_ only contains cells that partially intersect the region.','line_number':242,'multiline':False]
['text':' Candidates are prioritized first according to cell size (larger cells','line_number':243,'multiline':False]
['text':' first), then by the number of intersecting children they have (fewest','line_number':244,'multiline':False]
['text':' children first), and then by the number of fully contained children','line_number':245,'multiline':False]
['text':' (fewest children first).','line_number':246,'multiline':False]
['text':' Expand this candidate into its children.','line_number':263,'multiline':False]
['text':' Rather than just returning the raw list of cell ids generated by','line_number':288,'multiline':False]
['text':' GetCoveringInternal(), we construct a cell union and then denormalize it.','line_number':289,'multiline':False]
['text':' This has the effect of replacing four child cells with their parent','line_number':290,'multiline':False]
['text':' whenever this does not violate the covering parameters specified','line_number':291,'multiline':False]
['text':' (min_level, level_mod, etc).  This strategy significantly reduces the','line_number':292,'multiline':False]
['text':' number of cells returned in many cases, and it is cheap compared to','line_number':293,'multiline':False]
['text':' computing the covering in the first place.','line_number':294,'multiline':False]
