['text':'','line_number':1,'multiline':False]
['text':' Copyright 2000 - 2003 Google Inc.','line_number':2,'multiline':False]
['text':'','line_number':3,'multiline':False]
['text':'','line_number':4,'multiline':False]
['text':' This holds the encoding/decoding routines that used to live in netutil','line_number':5,'multiline':False]
['text':' for min','line_number':15,'multiline':False]
['text':' Class for encoding data into a memory buffer ','line_number':21,'multiline':True]
['text':' Creates an empty Encoder with no room that is enlarged','line_number':24,'multiline':False]
['text':' (if necessary) when "Encoder::Ensure(N)" is called.','line_number':25,'multiline':False]
['text':' Initialize encoder to encode into "buf"','line_number':29,'multiline':False]
['text':' Encoding routines.  Note that these do not check bounds','line_number':34,'multiline':False]
['text':' put no more than n bytes, stopping when c is put','line_number':42,'multiline':False]
['text':' put a c-string including \0','line_number':45,'multiline':False]
['text':' put a c-string without \0','line_number':46,'multiline':False]
['text':' Support for variable length encoding with 7 bits per byte','line_number':50,'multiline':False]
['text':' (these are just simple wrappers around the Varint module)','line_number':51,'multiline':False]
['text':' = Varint::kMax32;','line_number':52,'multiline':False]
['text':' = Varint::kMax64;','line_number':53,'multiline':False]
['text':' Length of var encoding of "v"','line_number':57,'multiline':False]
['text':' Length of var encoding of "v"','line_number':58,'multiline':False]
['text':' DEPRECATED','line_number':60,'multiline':False]
['text':'','line_number':61,'multiline':False]
['text':' For new code use put_varint32(ZigZagEncode(signed_value));','line_number':62,'multiline':False]
['text':' ZigZag coding is defined in utils/coding/transforms.h','line_number':63,'multiline':False]
['text':' Return number of bytes encoded so far','line_number':66,'multiline':False]
['text':' Return number of bytes of space remaining in buffer','line_number':69,'multiline':False]
['text':' REQUIRES: Encoder was created with the 0-argument constructor interface.','line_number':72,'multiline':False]
['text':'','line_number':73,'multiline':False]
['text':' This interface ensures that at least "N" more bytes are available','line_number':74,'multiline':False]
['text':' in the underlying buffer by resizing the buffer (if necessary).','line_number':75,'multiline':False]
['text':'','line_number':76,'multiline':False]
['text':' Note that no bounds checking is done on any of the put routines,','line_number':77,'multiline':False]
['text':' so it is the client's responsibility to call Ensure() at','line_number':78,'multiline':False]
['text':' appropriate intervals to ensure that enough space is available','line_number':79,'multiline':False]
['text':' for the data being added.','line_number':80,'multiline':False]
['text':' Returns true if Ensure is allowed to be called on "this"','line_number':83,'multiline':False]
['text':' Return ptr to start of encoded data.  This pointer remains valid','line_number':86,'multiline':False]
['text':' until reset or Ensure is called.','line_number':87,'multiline':False]
['text':' Advances the write pointer by "N" bytes.','line_number':90,'multiline':False]
['text':' REQUIRES: length() >= N','line_number':93,'multiline':False]
['text':' Removes the last N bytes out of the encoded buffer','line_number':94,'multiline':False]
['text':' REQUIRES: length() >= N','line_number':97,'multiline':False]
['text':' Removes the last length()-N bytes to make the encoded buffer have length N','line_number':98,'multiline':False]
['text':' If constructed with the zero-argument constructor, we're allowed','line_number':108,'multiline':False]
['text':' to use Ensure; otherwise we're not.  If Ensure is allowed,','line_number':109,'multiline':False]
['text':' underlying_buffer_ is non-NULL; otherwise it is set to NULL.','line_number':110,'multiline':False]
['text':' Class for decoding data from a memory buffer ','line_number':118,'multiline':True]
['text':' Empty constructor to create uninitialized decoder','line_number':121,'multiline':False]
['text':' NOTE: for efficiency reasons, this is not virtual.  so don't add','line_number':124,'multiline':False]
['text':' any members that really need to be destructed, and be careful about','line_number':125,'multiline':False]
['text':' inheritance.','line_number':126,'multiline':False]
['text':' Initialize decoder to decode from "buf"','line_number':129,'multiline':False]
['text':' Decoding routines.  Note that these do not check bounds','line_number':133,'multiline':False]
['text':' get no more than n bytes,','line_number':142,'multiline':False]
['text':' stopping after c is got','line_number':143,'multiline':False]
['text':' get a c-string no more than','line_number':144,'multiline':False]
['text':' n bytes. always appends '\0'','line_number':145,'multiline':False]
['text':' Return ptr to current position in buffer','line_number':147,'multiline':False]
['text':' "get_varint" actually checks bounds','line_number':149,'multiline':False]
['text':' DEPRECATED','line_number':153,'multiline':False]
['text':'','line_number':154,'multiline':False]
['text':' For new code use','line_number':155,'multiline':False]
['text':'   get_varint32(&unsigned_temp);','line_number':156,'multiline':False]
['text':'   signed_value = ZigZagDecode(unsigned_temp);','line_number':157,'multiline':False]
['text':' ZigZag coding is defined in utils/coding/transforms.h','line_number':158,'multiline':False]
['text':' Return number of bytes decoded so far','line_number':162,'multiline':False]
['text':' Return number of available bytes to read','line_number':165,'multiline':False]
['text':' so then we might as well be a POD','line_number':173,'multiline':False]
['text':'**** Implementation details.  Clients should ignore them. ****','line_number':175,'multiline':True]
['text':' Can't use the underlying buffer anymore','line_number':186,'multiline':False]
['text':' DEPRECATED','line_number':244,'multiline':False]
['text':'','line_number':245,'multiline':False]
['text':' For new code use put_varint32(ZigZagEncode(signed_value));','line_number':246,'multiline':False]
['text':' ZigZag coding is defined in utils/coding/transforms.h','line_number':247,'multiline':False]
['text':' Encode sign in low-bit','line_number':249,'multiline':False]
['text':' DEPRECATED','line_number':303,'multiline':False]
['text':'','line_number':304,'multiline':False]
['text':' For new code use','line_number':305,'multiline':False]
['text':'   get_varint32(&unsigned_temp);','line_number':306,'multiline':False]
['text':'   signed_value = ZigZagDecode(unsigned_temp);','line_number':307,'multiline':False]
['text':' ZigZag coding is defined in utils/coding/transforms.h','line_number':308,'multiline':False]
['text':' Special handling for encoding of kint32min','line_number':315,'multiline':False]
['text':' _LP64 ','line_number':355,'multiline':True]
['text':' _LP64 ','line_number':402,'multiline':True]
['text':' UTIL_CODING_CODER_H__','line_number':424,'multiline':False]
