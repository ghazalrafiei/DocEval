['text':' Copyright 2009 Google Inc. All Rights Reserved.','line_number':1,'multiline':False]
['text':'','line_number':2,'multiline':False]
['text':' ExactFloat is a multiple-precision floating point type based on the OpenSSL','line_number':3,'multiline':False]
['text':' Bignum library.  It has the same interface as the built-in "float" and','line_number':4,'multiline':False]
['text':' "double" types, but only supports the subset of operators and intrinsics','line_number':5,'multiline':False]
['text':' where it is possible to compute the result exactly.  So for example,','line_number':6,'multiline':False]
['text':' ExactFloat supports addition and multiplication but not division (since in','line_number':7,'multiline':False]
['text':' general, the quotient of two floating-point numbers cannot be represented','line_number':8,'multiline':False]
['text':' exactly).  Exact arithmetic is useful for geometric algorithms, especially','line_number':9,'multiline':False]
['text':' for disambiguating cases where ordinary double-precision arithmetic yields','line_number':10,'multiline':False]
['text':' an uncertain result.','line_number':11,'multiline':False]
['text':'','line_number':12,'multiline':False]
['text':' ExactFloat is a subset of the faster and more capable MPFloat class (which','line_number':13,'multiline':False]
['text':' is based on the GNU MPFR library).  The main reason to use this class','line_number':14,'multiline':False]
['text':' rather than MPFloat is that it is subject to a BSD-style license rather','line_number':15,'multiline':False]
['text':' than the much restrictive LGPL license.','line_number':16,'multiline':False]
['text':'','line_number':17,'multiline':False]
['text':' It has the following features:','line_number':18,'multiline':False]
['text':'','line_number':19,'multiline':False]
['text':'  - ExactFloat uses the same syntax as the built-in "float" and "double"','line_number':20,'multiline':False]
['text':'    types, for example: x += 4 + fabs(2*y*y - z*z).  There are a few','line_number':21,'multiline':False]
['text':'    differences (see below), but the syntax is compatible enough so that','line_number':22,'multiline':False]
['text':'    ExactFloat can be used as a template argument to templatized classes','line_number':23,'multiline':False]
['text':'    such as Vector2, VectorN, Matrix3x3, etc.','line_number':24,'multiline':False]
['text':'','line_number':25,'multiline':False]
['text':'  - Results are not rounded; instead, precision is increased so that the','line_number':26,'multiline':False]
['text':'    result can be represented exactly.  An inexact result is returned only','line_number':27,'multiline':False]
['text':'    in the case of underflow or overflow (yielding signed zero or infinity','line_number':28,'multiline':False]
['text':'    respectively), or if the maximum allowed precision is exceeded (yielding','line_number':29,'multiline':False]
['text':'    NaN).  ExactFloat uses IEEE 754-2008 rules for handling infinities, NaN,','line_number':30,'multiline':False]
['text':'    rounding to integers, etc.','line_number':31,'multiline':False]
['text':'','line_number':32,'multiline':False]
['text':'  - ExactFloat only supports calculations where the result can be','line_number':33,'multiline':False]
['text':'    represented exactly.  Therefore it supports intrinsics such as fabs()','line_number':34,'multiline':False]
['text':'    but not transcendentals such as sin(), sqrt(), etc.','line_number':35,'multiline':False]
['text':'','line_number':36,'multiline':False]
['text':' Syntax Compatibility with "float" and "double"','line_number':37,'multiline':False]
['text':' ----------------------------------------------','line_number':38,'multiline':False]
['text':'','line_number':39,'multiline':False]
['text':' ExactFloat supports a subset of the operators and intrinsics for the','line_number':40,'multiline':False]
['text':' built-in "double" type.  (Thus it supports fabs() but not fabsf(), for','line_number':41,'multiline':False]
['text':' example.)  The syntax is different only in the following cases:','line_number':42,'multiline':False]
['text':'','line_number':43,'multiline':False]
['text':'  - Casts and implicit conversions to built-in types (including "bool") are','line_number':44,'multiline':False]
['text':'    not supported.  So for example, the following will not compile:','line_number':45,'multiline':False]
['text':'','line_number':46,'multiline':False]
['text':'      ExactFloat x = 7.5;','line_number':47,'multiline':False]
['text':'      double y = x;            // ERROR: use x.ToDouble() instead','line_number':48,'multiline':False]
['text':'      long z = x;              // ERROR: use x.ToDouble() or lround(trunc(x))','line_number':49,'multiline':False]
['text':'      q = static_cast<int>(x); // ERROR: use x.ToDouble() or lround(trunc(x))','line_number':50,'multiline':False]
['text':'      if (x) { ... }           // ERROR: use (x != 0) instead','line_number':51,'multiline':False]
['text':'','line_number':52,'multiline':False]
['text':'  - The glibc floating-point classification macros (fpclassify, isfinite,','line_number':53,'multiline':False]
['text':'    isnormal, isnan, isinf) are not supported.  Instead there are','line_number':54,'multiline':False]
['text':'    zero-argument methods:','line_number':55,'multiline':False]
['text':'','line_number':56,'multiline':False]
['text':'      ExactFloat x;','line_number':57,'multiline':False]
['text':'      if (isnan(x)) { ... }  // ERROR: use (x.is_nan()) instead','line_number':58,'multiline':False]
['text':'      if (isinf(x)) { ... }  // ERROR: use (x.is_inf()) instead','line_number':59,'multiline':False]
['text':'','line_number':60,'multiline':False]
['text':' Using ExactFloat with Vector3, etc.','line_number':61,'multiline':False]
['text':' -----------------------------------','line_number':62,'multiline':False]
['text':'','line_number':63,'multiline':False]
['text':' ExactFloat can be used with templatized classes such as Vector2 and Vector3','line_number':64,'multiline':False]
['text':' (see "util/math/vector3-inl.h"), with the following limitations:','line_number':65,'multiline':False]
['text':'','line_number':66,'multiline':False]
['text':'  - Cast() can be used to convert other vector types to an ExactFloat vector','line_number':67,'multiline':False]
['text':'    type, but not the other way around.  This is because there are no','line_number':68,'multiline':False]
['text':'    implicit conversions from ExactFloat to built-in types.  You can work','line_number':69,'multiline':False]
['text':'    around this by calling an explicit conversion method such as','line_number':70,'multiline':False]
['text':'    ToDouble().  For example:','line_number':71,'multiline':False]
['text':'','line_number':72,'multiline':False]
['text':'      typedef Vector3<ExactFloat> Vector3_xf;','line_number':73,'multiline':False]
['text':'      Vector3_xf x;','line_number':74,'multiline':False]
['text':'      Vector3_d y;','line_number':75,'multiline':False]
['text':'      x = Vector3_xf::Cast(y);   // This works.','line_number':76,'multiline':False]
['text':'      y = Vector3_d::Cast(x);    // This doesn't.','line_number':77,'multiline':False]
['text':'      y = Vector3_d(x[0].ToDouble(), x[1].ToDouble(), x[2].ToDouble()); // OK','line_number':78,'multiline':False]
['text':'','line_number':79,'multiline':False]
['text':'  - IsNaN() is not supported because it calls isnan(), which is defined as a','line_number':80,'multiline':False]
['text':'    macro in <math.h> and therefore can't easily be overrided.','line_number':81,'multiline':False]
['text':'','line_number':82,'multiline':False]
['text':' Precision Semantics','line_number':83,'multiline':False]
['text':' -------------------','line_number':84,'multiline':False]
['text':'','line_number':85,'multiline':False]
['text':' Unlike MPFloat, ExactFloat does not allow a maximum precision to be','line_number':86,'multiline':False]
['text':' specified (it is always unbounded).  Therefore it does not have any of the','line_number':87,'multiline':False]
['text':' corresponding constructors.','line_number':88,'multiline':False]
['text':'','line_number':89,'multiline':False]
['text':' The current precision of an ExactFloat (i.e., the number of bits in its','line_number':90,'multiline':False]
['text':' mantissa) is returned by prec().  The precision is increased as necessary','line_number':91,'multiline':False]
['text':' so that the result of every operation can be represented exactly.','line_number':92,'multiline':False]
['text':' The following limits are imposed by OpenSSL.','line_number':113,'multiline':False]
['text':' The maximum exponent supported.  If a value has an exponent larger than','line_number':115,'multiline':False]
['text':' this, it is replaced by infinity (with the appropriate sign).','line_number':116,'multiline':False]
['text':' About 10**(60 million)','line_number':117,'multiline':False]
['text':' The minimum exponent supported.  If a value has an exponent less than','line_number':119,'multiline':False]
['text':' this, it is replaced by zero (with the appropriate sign).','line_number':120,'multiline':False]
['text':' About 10**(-60 million)','line_number':121,'multiline':False]
['text':' The maximum number of mantissa bits supported.  If a value has more','line_number':123,'multiline':False]
['text':' mantissa bits than this, it is replaced with NaN.  (It is expected that','line_number':124,'multiline':False]
['text':' users of this class will never want this much precision.)','line_number':125,'multiline':False]
['text':' About 20 million digits','line_number':126,'multiline':False]
['text':' Rounding modes.  kRoundTiesToEven and kRoundTiesAwayFromZero both round','line_number':128,'multiline':False]
['text':' to the nearest representable value unless two values are equally close.','line_number':129,'multiline':False]
['text':' In that case kRoundTiesToEven rounds to the nearest even value, while','line_number':130,'multiline':False]
['text':' kRoundTiesAwayFromZero always rounds away from zero.','line_number':131,'multiline':False]
['text':'///////////////////////////////////////////////////////////////////////////','line_number':141,'multiline':False]
['text':' Constructors','line_number':142,'multiline':False]
['text':' The default constructor initializes the value to zero.  (The initial','line_number':144,'multiline':False]
['text':' value must be zero rather than NaN for compatibility with the built-in','line_number':145,'multiline':False]
['text':' float types.)','line_number':146,'multiline':False]
['text':' Construct an ExactFloat from a "double".  The constructor is implicit so','line_number':149,'multiline':False]
['text':' that this class can be used as a replacement for "float" or "double" in','line_number':150,'multiline':False]
['text':' templatized libraries.  (With an explicit constructor, code such as','line_number':151,'multiline':False]
['text':' "ExactFloat f = 2.5;" would not compile.)  All double-precision values are','line_number':152,'multiline':False]
['text':' supported, including denormalized numbers, infinities, and NaNs.','line_number':153,'multiline':False]
['text':' Construct an ExactFloat from an "int".  Note that in general, ints are','line_number':156,'multiline':False]
['text':' automatically converted to doubles and so would be handled by the','line_number':157,'multiline':False]
['text':' constructor above.  However, the particular argument (0) is ambiguous; the','line_number':158,'multiline':False]
['text':' compiler doesn't know whether to treat it as a "double" or "NULL"','line_number':159,'multiline':False]
['text':' (invoking the const char* constructor below).','line_number':160,'multiline':False]
['text':'','line_number':161,'multiline':False]
['text':' We do not provide constructors for "unsigned", "long", "unsigned long",','line_number':162,'multiline':False]
['text':' "long long", or "unsigned long long", since these types are not typically','line_number':163,'multiline':False]
['text':' used in floating-point calculations and it is safer to require them to be','line_number':164,'multiline':False]
['text':' explicitly cast.','line_number':165,'multiline':False]
['text':' Construct an ExactFloat from a string (such as "1.2e50").  Requires that','line_number':168,'multiline':False]
['text':' the value is exactly representable as a floating-point number (so for','line_number':169,'multiline':False]
['text':' example, "0.125" is allowed but "0.1" is not).','line_number':170,'multiline':False]
['text':' Copy constructor.','line_number':173,'multiline':False]
['text':' The destructor is not virtual for efficiency reasons.  Therefore no','line_number':176,'multiline':False]
['text':' subclass should declare additional fields that require destruction.','line_number':177,'multiline':False]
['text':'///////////////////////////////////////////////////////////////////','line_number':180,'multiline':False]
['text':' Constants','line_number':181,'multiline':False]
['text':'','line_number':182,'multiline':False]
['text':' As an alternative to the constants below, you can also just use the','line_number':183,'multiline':False]
['text':' constants defined in <math.h>, for example:','line_number':184,'multiline':False]
['text':'','line_number':185,'multiline':False]
['text':'   ExactFloat x = NAN, y = -INFINITY;','line_number':186,'multiline':False]
['text':' Return an ExactFloat equal to positive zero (if sign >= 0) or','line_number':188,'multiline':False]
['text':' negative zero (if sign < 0).','line_number':189,'multiline':False]
['text':' Return an ExactFloat equal to positive infinity (if sign >= 0) or','line_number':192,'multiline':False]
['text':' negative infinity (if sign < 0).','line_number':193,'multiline':False]
['text':' Return an ExactFloat that is NaN (Not-a-Number).','line_number':196,'multiline':False]
['text':'///////////////////////////////////////////////////////////////////////////','line_number':199,'multiline':False]
['text':' Accessor Methods','line_number':200,'multiline':False]
['text':' Return the maximum precision of the ExactFloat.  This method exists only','line_number':202,'multiline':False]
['text':' for compatibility with MPFloat.','line_number':203,'multiline':False]
['text':' Return the actual precision of this ExactFloat (the current number of','line_number':206,'multiline':False]
['text':' bits in its mantissa).  Returns 0 for non-normal numbers such as NaN.','line_number':207,'multiline':False]
['text':' Return the exponent of this ExactFloat given that the mantissa is in the','line_number':210,'multiline':False]
['text':' range [0.5, 1).  It is an error to call this method if the value is zero,','line_number':211,'multiline':False]
['text':' infinity, or NaN.','line_number':212,'multiline':False]
['text':' Set the value of the ExactFloat to +0 (if sign >= 0) or -0 (if sign < 0).','line_number':215,'multiline':False]
['text':' Set the value of the ExactFloat to positive infinity (if sign >= 0) or','line_number':218,'multiline':False]
['text':' negative infinity (if sign < 0).','line_number':219,'multiline':False]
['text':' Set the value of the ExactFloat to NaN (Not-a-Number).','line_number':222,'multiline':False]
['text':' Unfortunately, isinf(x), isnan(x), isnormal(x), and isfinite(x) are','line_number':225,'multiline':False]
['text':' defined as macros in <math.h>.  Therefore we can't easily extend them','line_number':226,'multiline':False]
['text':' here.  Instead we provide methods with underscores in their names that do','line_number':227,'multiline':False]
['text':' the same thing: x.is_inf(), etc.','line_number':228,'multiline':False]
['text':'','line_number':229,'multiline':False]
['text':' These macros are not implemented: signbit(x), fpclassify(x).','line_number':230,'multiline':False]
['text':' Return true if this value is zero (including negative zero).','line_number':232,'multiline':False]
['text':' Return true if this value is infinity (positive or negative).','line_number':235,'multiline':False]
['text':' Return true if this value is NaN (Not-a-Number).','line_number':238,'multiline':False]
['text':' Return true if this value is a normal floating-point number.  Non-normal','line_number':241,'multiline':False]
['text':' values (zero, infinity, and NaN) often need to be handled separately','line_number':242,'multiline':False]
['text':' because they are represented using special exponent values and their','line_number':243,'multiline':False]
['text':' mantissa is not defined.','line_number':244,'multiline':False]
['text':' Return true if this value is a normal floating-point number or zero,','line_number':247,'multiline':False]
['text':' i.e. it is not infinity or NaN.','line_number':248,'multiline':False]
['text':' Return true if the sign bit is set (this includes negative zero).','line_number':251,'multiline':False]
['text':' Return +1 if this ExactFloat is positive, -1 if it is negative, and 0','line_number':254,'multiline':False]
['text':' if it is zero or NaN.  Note that unlike sign_bit(), sgn() returns 0 for','line_number':255,'multiline':False]
['text':' both positive and negative zero.','line_number':256,'multiline':False]
['text':'///////////////////////////////////////////////////////////////////////////','line_number':259,'multiline':False]
['text':' Conversion Methods','line_number':260,'multiline':False]
['text':'','line_number':261,'multiline':False]
['text':' Note that some conversions are defined as functions further below,','line_number':262,'multiline':False]
['text':' e.g. to convert to an integer you can use lround(), llrint(), etc.','line_number':263,'multiline':False]
['text':' Round to double precision.  Note that since doubles have a much smaller','line_number':265,'multiline':False]
['text':' exponent range than ExactFloats, very small values may be rounded to','line_number':266,'multiline':False]
['text':' (positive or negative) zero, and very large values may be rounded to','line_number':267,'multiline':False]
['text':' infinity.','line_number':268,'multiline':False]
['text':'','line_number':269,'multiline':False]
['text':' It is very important to make this a named method rather than an implicit','line_number':270,'multiline':False]
['text':' conversion, because otherwise there would be a silent loss of precision','line_number':271,'multiline':False]
['text':' whenever some desired operator or function happens not to be implemented.','line_number':272,'multiline':False]
['text':' For example, if fabs() were not implemented and "x" and "y" were','line_number':273,'multiline':False]
['text':' ExactFloats, then x = fabs(y) would silently convert "y" to a "double",','line_number':274,'multiline':False]
['text':' take its absolute value, and convert it back to an ExactFloat.','line_number':275,'multiline':False]
['text':' Return a human-readable string such that if two values with the same','line_number':278,'multiline':False]
['text':' precision are different, then their string representations are different.','line_number':279,'multiline':False]
['text':' The format is similar to printf("%g"), except that the number of','line_number':280,'multiline':False]
['text':' significant digits depends on the precision (with a minimum of 10).','line_number':281,'multiline':False]
['text':' Trailing zeros are stripped (just like "%g").','line_number':282,'multiline':False]
['text':'','line_number':283,'multiline':False]
['text':' Note that if two values have different precisions, they may have the same','line_number':284,'multiline':False]
['text':' ToString() value even though their values are slightly different.  If you','line_number':285,'multiline':False]
['text':' need to distinguish such values, use ToUniqueString() intead.','line_number':286,'multiline':False]
['text':' Return a string formatted according to printf("%Ng") where N is the given','line_number':289,'multiline':False]
['text':' maximum number of significant digits.','line_number':290,'multiline':False]
['text':' Return a human-readable string such that if two ExactFloats have different','line_number':293,'multiline':False]
['text':' values, then their string representations are always different.  This','line_number':294,'multiline':False]
['text':' method is useful for debugging.  The string has the form "value<prec>",','line_number':295,'multiline':False]
['text':' where "prec" is the actual precision of the ExactFloat (e.g., "0.215<50>").','line_number':296,'multiline':False]
['text':' Return an upper bound on the number of significant digits required to','line_number':299,'multiline':False]
['text':' distinguish any two floating-point numbers with the given precision when','line_number':300,'multiline':False]
['text':' they are formatted as decimal strings in exponential format.','line_number':301,'multiline':False]
['text':' Output the ExactFloat in human-readable format, e.g. for logging.','line_number':304,'multiline':False]
['text':'///////////////////////////////////////////////////////////////////////////','line_number':309,'multiline':False]
['text':' Other Methods','line_number':310,'multiline':False]
['text':' Round the ExactFloat so that its mantissa has at most "max_prec" bits','line_number':312,'multiline':False]
['text':' using the given rounding mode.  Requires "max_prec" to be at least 2','line_number':313,'multiline':False]
['text':' (since kRoundTiesToEven doesn't make sense with fewer bits than this).','line_number':314,'multiline':False]
['text':'///////////////////////////////////////////////////////////////////////////','line_number':317,'multiline':False]
['text':' Operators','line_number':318,'multiline':False]
['text':' Assignment operator.','line_number':320,'multiline':False]
['text':' Unary plus.','line_number':323,'multiline':False]
['text':' Unary minus.','line_number':326,'multiline':False]
['text':' Addition.','line_number':329,'multiline':False]
['text':' Subtraction.','line_number':332,'multiline':False]
['text':' Multiplication.','line_number':335,'multiline':False]
['text':' Division is not implemented because the result cannot be represented','line_number':338,'multiline':False]
['text':' exactly in general.  Doing this properly would require extending all the','line_number':339,'multiline':False]
['text':' operations to support rounding to a specified precision.','line_number':340,'multiline':False]
['text':' Arithmetic assignment operators (+=, -=, *=).','line_number':342,'multiline':False]
['text':' Comparison operators (==, !=, <, <=, >, >=).','line_number':347,'multiline':False]
['text':' These don't need to be friends but are declared here for completeness.','line_number':350,'multiline':False]
['text':'///////////////////////////////////////////////////////////////////','line_number':356,'multiline':False]
['text':' Math Intrinsics','line_number':357,'multiline':False]
['text':'','line_number':358,'multiline':False]
['text':' The math intrinsics currently supported by ExactFloat are listed below.','line_number':359,'multiline':False]
['text':' Except as noted, they behave identically to the usual glibc intrinsics','line_number':360,'multiline':False]
['text':' except that they have greater precision.  See the man pages for more','line_number':361,'multiline':False]
['text':' information.','line_number':362,'multiline':False]
['text':'////// Miscellaneous simple arithmetic functions.','line_number':364,'multiline':False]
['text':' Absolute value.','line_number':366,'multiline':False]
['text':' Maximum of two values.','line_number':369,'multiline':False]
['text':' Minimum of two values.','line_number':372,'multiline':False]
['text':' Positive difference: max(a - b, 0).','line_number':375,'multiline':False]
['text':'////// Integer rounding functions that return ExactFloat values.','line_number':378,'multiline':False]
['text':' Round up to the nearest integer.','line_number':380,'multiline':False]
['text':' Round down to the nearest integer.','line_number':383,'multiline':False]
['text':' Round to the nearest integer not larger in absolute value.','line_number':386,'multiline':False]
['text':' For example: f(-1.9) = -1, f(2.9) = 2.','line_number':387,'multiline':False]
['text':' Round to the nearest integer, rounding halfway cases away from zero.','line_number':390,'multiline':False]
['text':' For example: f(-0.5) = -1, f(0.5) = 1, f(1.5) = 2, f(2.5) = 3.','line_number':391,'multiline':False]
['text':' Round to the nearest integer, rounding halfway cases to an even integer.','line_number':394,'multiline':False]
['text':' For example: f(-0.5) = 0, f(0.5) = 0, f(1.5) = 2, f(2.5) = 2.','line_number':395,'multiline':False]
['text':' A synonym for rint().','line_number':398,'multiline':False]
['text':'////// Integer rounding functions that return C++ integer types.','line_number':401,'multiline':False]
['text':' Like rint(), but rounds to the nearest "long" value.  Returns the','line_number':403,'multiline':False]
['text':' minimum/maximum possible integer if the value is out of range.','line_number':404,'multiline':False]
['text':' Like rint(), but rounds to the nearest "long long" value.  Returns the','line_number':407,'multiline':False]
['text':' minimum/maximum possible integer if the value is out of range.','line_number':408,'multiline':False]
['text':' Like round(), but rounds to the nearest "long" value.  Returns the','line_number':411,'multiline':False]
['text':' minimum/maximum possible integer if the value is out of range.','line_number':412,'multiline':False]
['text':' Like round(), but rounds to the nearest "long long" value.  Returns the','line_number':415,'multiline':False]
['text':' minimum/maximum possible integer if the value is out of range.','line_number':416,'multiline':False]
['text':'////// Remainder functions.','line_number':419,'multiline':False]
['text':' The remainder of dividing "a" by "b", where the quotient is rounded toward','line_number':421,'multiline':False]
['text':' zero to the nearest integer.  Similar to (a - trunc(a / b) * b).','line_number':422,'multiline':False]
['text':' Note that it is possible to implement this operation exactly, it just','line_number':424,'multiline':False]
['text':' hasn't been done.','line_number':425,'multiline':False]
['text':' The remainder of dividing "a" by "b", where the quotient is rounded to the','line_number':429,'multiline':False]
['text':' nearest integer, rounding halfway cases to an even integer.  Similar to','line_number':430,'multiline':False]
['text':' (a - rint(a / b) * b).','line_number':431,'multiline':False]
['text':' Note that it is possible to implement this operation exactly, it just','line_number':433,'multiline':False]
['text':' hasn't been done.','line_number':434,'multiline':False]
['text':' A synonym for remainder().','line_number':438,'multiline':False]
['text':' Break the argument "a" into integer and fractional parts, each of which','line_number':443,'multiline':False]
['text':' has the same sign as "a".  The fractional part is returned, and the','line_number':444,'multiline':False]
['text':' integer part is stored in the output parameter "i_ptr".  Both output','line_number':445,'multiline':False]
['text':' values are set to have the same maximum precision as "a".','line_number':446,'multiline':False]
['text':' Note that it is possible to implement this operation exactly, it just','line_number':448,'multiline':False]
['text':' hasn't been done.','line_number':449,'multiline':False]
['text':'////// Floating-point manipulation functions.','line_number':453,'multiline':False]
['text':' Return an ExactFloat with the magnitude of "a" and the sign bit of "b".','line_number':455,'multiline':False]
['text':' (Note that an IEEE zero can be either positive or negative.)','line_number':456,'multiline':False]
['text':' Convert "a" to a normalized fraction in the range [0.5, 1) times a power','line_number':459,'multiline':False]
['text':' of two.  Return the fraction and set "exp" to the exponent.  If "a" is','line_number':460,'multiline':False]
['text':' zero, infinity, or NaN then return "a" and set "exp" to zero.','line_number':461,'multiline':False]
['text':' Return "a" multiplied by 2 raised to the power "exp".','line_number':464,'multiline':False]
['text':' A synonym for ldexp().','line_number':467,'multiline':False]
['text':' A version of ldexp() where "exp" is a long integer.','line_number':472,'multiline':False]
['text':' Convert "a" to a normalized fraction in the range [1,2) times a power of','line_number':477,'multiline':False]
['text':' two, and return the exponent value as an integer.  This is equivalent to','line_number':478,'multiline':False]
['text':' lrint(floor(log2(fabs(a)))) but it is computed more efficiently.  Returns','line_number':479,'multiline':False]
['text':' the constants documented in the man page for zero, infinity, or NaN.','line_number':480,'multiline':False]
['text':' Convert "a" to a normalized fraction in the range [1,2) times a power of','line_number':483,'multiline':False]
['text':' two, and return the exponent value as an ExactFloat.  This is equivalent to','line_number':484,'multiline':False]
['text':' floor(log2(fabs(a))) but it is computed more efficiently.','line_number':485,'multiline':False]
['text':' Non-normal numbers are represented using special exponent values and a','line_number':489,'multiline':False]
['text':' mantissa of zero.  Do not change these values; methods such as','line_number':490,'multiline':False]
['text':' is_normal() make assumptions about their ordering.  Non-normal numbers','line_number':491,'multiline':False]
['text':' can have either a positive or negative sign (including zero and NaN).','line_number':492,'multiline':False]
['text':' Normal numbers are represented as (sign_ * bn_ * (2 ** bn_exp_)), where:','line_number':497,'multiline':False]
['text':'  - sign_ is either +1 or -1','line_number':498,'multiline':False]
['text':'  - bn_ is a BIGNUM with a positive value','line_number':499,'multiline':False]
['text':'  - bn_exp_ is the base-2 exponent applied to bn_.','line_number':500,'multiline':False]
['text':' A standard IEEE "double" has a 53-bit mantissa consisting of a 52-bit','line_number':505,'multiline':False]
['text':' fraction plus an implicit leading "1" bit.','line_number':506,'multiline':False]
['text':' Convert an ExactFloat with no more than 53 bits in its mantissa to a','line_number':509,'multiline':False]
['text':' "double".  This method handles non-normal values (NaN, etc).','line_number':510,'multiline':False]
['text':' Round an ExactFloat so that it is a multiple of (2 ** bit_exp), using the','line_number':513,'multiline':False]
['text':' given rounding mode.','line_number':514,'multiline':False]
['text':' Convert the ExactFloat to a decimal value of the form 0.ddd * (10 ** x),','line_number':517,'multiline':False]
['text':' with at most "max_digits" significant digits (trailing zeros are removed).','line_number':518,'multiline':False]
['text':' Set (*digits) to the ASCII digits and return the decimal exponent "x".','line_number':519,'multiline':False]
['text':' Return a_sign * fabs(a) + b_sign * fabs(b).  Used to implement addition','line_number':522,'multiline':False]
['text':' and subtraction.','line_number':523,'multiline':False]
['text':' Convert an ExactFloat to its canonical form.  Underflow results in signed','line_number':527,'multiline':False]
['text':' zero, overflow results in signed infinity, and precision overflow results','line_number':528,'multiline':False]
['text':' in NaN.  A zero mantissa is converted to the canonical zero value with','line_number':529,'multiline':False]
['text':' the given sign; otherwise the mantissa is normalized so that its low bit','line_number':530,'multiline':False]
['text':' is 1.  Non-normal numbers are left unchanged.','line_number':531,'multiline':False]
['text':' Scale the mantissa of this ExactFloat so that it has the same bn_exp_ as','line_number':534,'multiline':False]
['text':' "b", then return -1, 0, or 1 according to whether the scaled mantissa is','line_number':535,'multiline':False]
['text':' less, equal, or greater than the mantissa of "b".  Requires that both','line_number':536,'multiline':False]
['text':' values are normal.','line_number':537,'multiline':False]
['text':' Return true if the magnitude of this ExactFloat is less than the','line_number':540,'multiline':False]
['text':' magnitude of "b".  Requires that neither value is NaN.','line_number':541,'multiline':False]
['text':' Return an ExactFloat with the magnitude of this ExactFloat and the given','line_number':544,'multiline':False]
['text':' sign.  (Similar to copysign, except that the sign is given explicitly','line_number':545,'multiline':False]
['text':' rather than being copied from another ExactFloat.)','line_number':546,'multiline':False]
['text':' Convert an ExactFloat to an integer of type "T" using the given rounding','line_number':549,'multiline':False]
['text':' mode.  The type "T" must be signed.  Returns the largest possible integer','line_number':550,'multiline':False]
['text':' for NaN, and clamps out of range values to the largest or smallest','line_number':551,'multiline':False]
['text':' possible values.','line_number':552,'multiline':False]
['text':' Log a fatal error message (used for unimplemented methods).','line_number':555,'multiline':False]
['text':'///////////////////////////////////////////////////////////////////////','line_number':559,'multiline':False]
['text':' Implementation details follow:','line_number':560,'multiline':False]
['text':' NaN is unordered compared to everything, including itself.','line_number':586,'multiline':False]
['text':' UTIL_MATH_EXACTFLOAT_EXACTFLOAT_H_','line_number':605,'multiline':False]
