['text':' Copyright 2003 Google, Inc.','line_number':1,'multiline':False]
['text':' All Rights Reserved.','line_number':2,'multiline':False]
['text':'','line_number':3,'multiline':False]
['text':'','line_number':4,'multiline':False]
['text':' A simple class to handle vectors in 4D','line_number':5,'multiline':False]
['text':' See the vector4-inl.h file for more details','line_number':6,'multiline':False]
['text':' NOLINT(readability/streams)','line_number':16,'multiline':False]
['text':' TODO(user): Look into creating conversion operators to remove the','line_number':20,'multiline':False]
['text':' need to forward-declare Vector2 and Vector3.','line_number':21,'multiline':False]
['text':' Template class for 4D vectors','line_number':25,'multiline':False]
['text':' FloatType is the type returned by Norm().  This method is special because','line_number':31,'multiline':False]
['text':' it returns floating-point values even when VType is an integer.','line_number':32,'multiline':False]
['text':' Create a new vector (0,0)','line_number':39,'multiline':False]
['text':' Create a new vector (x,y,z,w)','line_number':41,'multiline':False]
['text':' Create a new copy of the vector vb','line_number':43,'multiline':False]
['text':' Create a new 4D vector from 2D vector and two scalars','line_number':45,'multiline':False]
['text':' (vb.x,vb.y,z,w)','line_number':46,'multiline':False]
['text':' Create a 4D vector from two 2D vectors (vb1.x,vb1.y,vb2.x,vb2.y)','line_number':48,'multiline':False]
['text':' Create a new 4D vector from 3D vector and scalar','line_number':50,'multiline':False]
['text':' (vb.x,vb.y,vb.z,w)','line_number':51,'multiline':False]
['text':' Convert from another vector type','line_number':53,'multiline':False]
['text':' Compare two vectors, return true if all their components are equal','line_number':56,'multiline':False]
['text':' Compare two vectors, return true if all their components are within','line_number':59,'multiline':False]
['text':' a difference of margin.','line_number':60,'multiline':False]
['text':' Compare two vectors, these comparisons are mostly for interaction','line_number':62,'multiline':False]
['text':' with STL.','line_number':63,'multiline':False]
['text':' Return the size of the vector','line_number':69,'multiline':False]
['text':' Modify the coordinates of the current vector','line_number':71,'multiline':False]
['text':' add two vectors, component by component','line_number':74,'multiline':False]
['text':' subtract two vectors, component by component','line_number':76,'multiline':False]
['text':' multiply a vector by a scalar','line_number':78,'multiline':False]
['text':' divide a vector by a scalar : implemented that way for integer vectors','line_number':80,'multiline':False]
['text':' multiply two vectors component by component','line_number':82,'multiline':False]
['text':' divide two vectors component by component','line_number':84,'multiline':False]
['text':' add two vectors, component by component','line_number':86,'multiline':False]
['text':' subtract two vectors, component by component','line_number':88,'multiline':False]
['text':' Dot product.  Be aware that if VType is an integer type, the high bits of','line_number':90,'multiline':False]
['text':' the result are silently discarded.','line_number':91,'multiline':False]
['text':' Multiplication by a scalar','line_number':93,'multiline':False]
['text':' Division by a scalar','line_number':95,'multiline':False]
['text':' Access component #b for read/write operations','line_number':97,'multiline':False]
['text':' Access component #b for read only operations','line_number':99,'multiline':False]
['text':' Labeled Accessor methods.','line_number':101,'multiline':False]
['text':' return a pointer to the data array for interface with other libraries','line_number':110,'multiline':False]
['text':' like opencv','line_number':111,'multiline':False]
['text':' Return the squared Euclidean norm of the vector.  Be aware that if VType','line_number':114,'multiline':False]
['text':' is an integer type, the high bits of the result are silently discarded.','line_number':115,'multiline':False]
['text':' Return the Euclidean norm of the vector.  Note that if VType is an','line_number':117,'multiline':False]
['text':' integer type, the return value is correct only if the *squared* norm does','line_number':118,'multiline':False]
['text':' not overflow VType.','line_number':119,'multiline':False]
['text':' Return a normalized version of the vector if the norm of the','line_number':121,'multiline':False]
['text':' vector is not 0.  Not to be used with integer types.','line_number':122,'multiline':False]
['text':' take the sqrt of each component and return a vector containing those values','line_number':124,'multiline':False]
['text':' take the fabs of each component and return a vector containing those values','line_number':126,'multiline':False]
['text':' Take the absolute value of each component and return a vector containing','line_number':128,'multiline':False]
['text':' those values.  This method should only be used when VType is a signed','line_number':129,'multiline':False]
['text':' integer type that is not wider than "int".','line_number':130,'multiline':False]
['text':' take the floor of each component and return a vector containing','line_number':132,'multiline':False]
['text':' those values','line_number':133,'multiline':False]
['text':' take the ceil of each component and return a vector containing those values','line_number':135,'multiline':False]
['text':' take the round of each component and return a vector containing those','line_number':137,'multiline':False]
['text':' values','line_number':138,'multiline':False]
['text':' take the round of each component and return an integer vector containing','line_number':140,'multiline':False]
['text':' those values','line_number':141,'multiline':False]
['text':' Reset all the coordinates of the vector to 0','line_number':143,'multiline':False]
['text':' return true if one of the components is not a number','line_number':146,'multiline':False]
['text':' return an invalid floating point vector','line_number':149,'multiline':False]
['text':' change the sign of the components of a vector','line_number':153,'multiline':False]
['text':' multiply by a scalar','line_number':156,'multiline':False]
['text':' perform k /','line_number':159,'multiline':False]
['text':' return a vector containing the max of v1 and v2 component by component','line_number':162,'multiline':False]
['text':' return a vector containing the min of v1 and v2 component by component','line_number':165,'multiline':False]
['text':' debug printing','line_number':168,'multiline':False]
['text':' NOLINT','line_number':170,'multiline':False]
['text':' UTIL_MATH_VECTOR4_H__','line_number':178,'multiline':False]
