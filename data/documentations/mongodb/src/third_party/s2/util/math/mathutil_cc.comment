['text':' Copyright 2008 Google Inc. All Rights Reserved.','line_number':1,'multiline':False]
['text':' Deal with degenerate cases where leading coefficients vanish.','line_number':24,'multiline':False]
['text':' General case: the quadratic formula, rearranged for greater numerical','line_number':29,'multiline':False]
['text':' stability.','line_number':30,'multiline':False]
['text':' If the discriminant is zero to numerical precision, regardless of','line_number':32,'multiline':False]
['text':' sign, treat it as zero and return kAmbiguous.  We use the double','line_number':33,'multiline':False]
['text':' rather than long double value for epsilon because in practice inputs','line_number':34,'multiline':False]
['text':' are generally calculated in double precision.','line_number':35,'multiline':False]
['text':' The quadratic is (2*a*x + b)^2 = 0.','line_number':39,'multiline':False]
['text':' The discriminant is definitely negative so there are no real roots.','line_number':44,'multiline':False]
['text':' This degenerate quadratic is really a linear equation b * x = -c.','line_number':57,'multiline':False]
['text':' The equation is constant, c == 0.','line_number':59,'multiline':False]
['text':' Quadratic equation is 0==0; treat as ambiguous, as if a==epsilon.','line_number':61,'multiline':False]
['text':' The linear equation has a single root at x = -c / b, not a double','line_number':67,'multiline':False]
['text':' one.  Respond as if a==epsilon: The other root is at "infinity",','line_number':68,'multiline':False]
['text':' which we signal with HUGE_VAL so that the behavior stays consistent','line_number':69,'multiline':False]
['text':' as a->0.','line_number':70,'multiline':False]
['text':' According to Numerical Recipes (pp. 184-5), what','line_number':82,'multiline':False]
['text':' follows is an arrangement of computations to','line_number':83,'multiline':False]
['text':' compute the roots of a cubic that minimizes','line_number':84,'multiline':False]
['text':' roundoff error (as pointed out by A.J. Glassman).','line_number':85,'multiline':False]
['text':' Disable error about fabs causing truncation of value because','line_number':107,'multiline':False]
['text':' it takes a double instead of a long double (Clang 3.5+)','line_number':108,'multiline':False]
['text':' See SERVER-15183','line_number':109,'multiline':False]
['text':' in which case, B from NR is zero','line_number':118,'multiline':False]
['text':' Returns the greatest common divisor of two unsigned integers x and y,','line_number':127,'multiline':False]
['text':' and assigns a, and b such that a*x + b*y = gcd(x, y).','line_number':128,'multiline':False]
['text':' before and after each loop:','line_number':135,'multiline':False]
['text':' current_x == a * original_x + b * original_y','line_number':136,'multiline':False]
['text':' current_y == c * original_x + d * original_y','line_number':137,'multiline':False]
['text':' div() takes int parameters; there is no version that takes unsigned int','line_number':139,'multiline':False]
['text':' Input shard n of N can contribute to output shard m of M if there','line_number':162,'multiline':False]
['text':' exists a record with sharding hash x s.t. n = x % N and m = x % M.','line_number':163,'multiline':False]
['text':' Equivalently, there must exist s and t s.t. x = tN + n = sM + m,','line_number':164,'multiline':False]
['text':' i.e., tN - sM = m - n.  Since G = gcd(N, M) evenly divides tN - sM,','line_number':165,'multiline':False]
['text':' G must also evenly divide m - n.  Proof in the other direction is','line_number':166,'multiline':False]
['text':' left as an exercise.','line_number':167,'multiline':False]
['text':' Given output shard m, we should, therefore, read input shards n','line_number':168,'multiline':False]
['text':' that satisfy (n - m) = kG, i.e., n = m + kG.  Let 0 <= n < N.','line_number':169,'multiline':False]
['text':' Then, 0 <= m + kG < N and, finally, -m / G <= k < (N - m) / G.','line_number':170,'multiline':False]
['text':'   Hn ~ ln(n) + 0.5772156649 +','line_number':187,'multiline':False]
['text':'        + 1/(2n) - 1/(12n^2) + 1/(120n^4) - error,','line_number':188,'multiline':False]
['text':'   with 0 < error < 1/(256*n^4).','line_number':189,'multiline':False]
['text':' ln + Gamma constant','line_number':196,'multiline':False]
['text':' The formula is extracted from the following page','line_number':201,'multiline':False]
['text':' http://en.wikipedia.org/w/index.php?title=Stirling%27s_approximation','line_number':202,'multiline':False]
['text':' 0.5 * log(2 * M_PI * n)','line_number':208,'multiline':False]
['text':' use symmetry to pick the shorter calculation','line_number':218,'multiline':False]
['text':' If we have more than 30 logarithms to calculate, we'll use','line_number':223,'multiline':False]
['text':' Stirling's approximation for log(n!).','line_number':224,'multiline':False]
