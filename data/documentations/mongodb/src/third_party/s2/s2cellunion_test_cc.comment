['text':' Copyright 2005 Google Inc. All Rights Reserved.','line_number':1,'multiline':False]
['text':' Decides whether to add "id" and/or some of its descendants to the','line_number':55,'multiline':False]
['text':' test case.  If "selected" is true, then the region covered by "id"','line_number':56,'multiline':False]
['text':' *must* be added to the test case (either by adding "id" itself, or','line_number':57,'multiline':False]
['text':' some combination of its descendants, or both).  If cell ids are to','line_number':58,'multiline':False]
['text':' the test case "input", then the corresponding expected result after','line_number':59,'multiline':False]
['text':' simplification is added to "expected".','line_number':60,'multiline':False]
['text':' Initial call: decide whether to add cell(s) from each face.','line_number':63,'multiline':False]
['text':' The rnd.OneIn() call below ensures that the parent of a leaf cell','line_number':70,'multiline':False]
['text':' will always be selected (if we make it that far down the hierarchy).','line_number':71,'multiline':False]
['text':' The following code ensures that the probability of selecting a cell','line_number':76,'multiline':False]
['text':' at each level is approximately the same, i.e. we test normalization','line_number':77,'multiline':False]
['text':' of cells at all levels.','line_number':78,'multiline':False]
['text':' Once a cell has been selected, the expected output is predetermined.','line_number':80,'multiline':False]
['text':' We then make sure that cells are selected that will normalize to','line_number':81,'multiline':False]
['text':' the desired output.','line_number':82,'multiline':False]
['text':' With the rnd.OneIn() constants below, this function adds an average','line_number':87,'multiline':False]
['text':' of 5/6 * (kMaxLevel - level) cells to "input" where "level" is the','line_number':88,'multiline':False]
['text':' level at which the cell was first selected (level 15 on average).','line_number':89,'multiline':False]
['text':' Therefore the average number of input cells in a test case is about','line_number':90,'multiline':False]
['text':' (5/6 * 15 * 6) = 75.  The average number of output cells is about 6.','line_number':91,'multiline':False]
['text':' If a cell is selected, we add it to "input" with probability 5/6.','line_number':93,'multiline':False]
['text':' If the cell is selected, on average we recurse on 4/12 = 1/3 child.','line_number':102,'multiline':False]
['text':' This intentionally may result in a cell and some of its children','line_number':103,'multiline':False]
['text':' being included in the test case.','line_number':104,'multiline':False]
['text':'','line_number':105,'multiline':False]
['text':' If the cell is not selected, on average we recurse on one child.','line_number':106,'multiline':False]
['text':' We also make sure that we do not recurse on all 4 children, since','line_number':107,'multiline':False]
['text':' then we might include all 4 children in the input case by accident','line_number':108,'multiline':False]
['text':' (in which case the expected output would not be correct).','line_number':109,'multiline':False]
['text':' If this cell was selected but the cell itself was not added, we','line_number':114,'multiline':False]
['text':' must ensure that all 4 children (or some combination of their','line_number':115,'multiline':False]
['text':' descendants) are added.','line_number':116,'multiline':False]
['text':' Try a bunch of random test cases, and keep track of average','line_number':122,'multiline':False]
['text':' statistics for normalization (to see if they agree with the','line_number':123,'multiline':False]
['text':' analysis above).','line_number':124,'multiline':False]
['text':' Test GetCapBound().','line_number':139,'multiline':False]
['text':' Test Contains(S2CellId) and Intersects(S2CellId).','line_number':145,'multiline':False]
['text':' Test Contains(S2CellUnion*), Intersects(S2CellUnion*),','line_number':176,'multiline':False]
['text':' GetUnion(), GetIntersection(), and GetDifference().','line_number':177,'multiline':False]
['text':' Compute the intersection of "x" with each cell of "y",','line_number':195,'multiline':False]
['text':' check that this intersection is correct, and append the','line_number':196,'multiline':False]
['text':' results to x_and_y_expected.','line_number':197,'multiline':False]
['text':' This test generates coverings for caps of random sizes, and expands','line_number':264,'multiline':False]
['text':' the coverings by a random radius, and then make sure that the new','line_number':265,'multiline':False]
['text':' covering covers the expanded cap.  It also makes sure that the','line_number':266,'multiline':False]
['text':' new covering is not too much larger than expected.','line_number':267,'multiline':False]
['text':' Expand the cap by a random factor whose log is uniformly distributed','line_number':274,'multiline':False]
['text':' between 0 and log(1e2).','line_number':275,'multiline':False]
['text':' If the covering includes a tiny cell along the boundary, in theory the','line_number':299,'multiline':False]
['text':' maximum angle of the covering from the cap axis can increase by up to','line_number':300,'multiline':False]
['text':' twice the maximum length of a cell diagonal.  We allow for an increase','line_number':301,'multiline':False]
['text':' of slightly more than this because cell bounding caps are not exact.','line_number':302,'multiline':False]
['text':' TODO(user): This fails for some random seeds,','line_number':305,'multiline':False]
['text':' e.g. initialize the random seed to 3 in s2testing.cc.  This','line_number':306,'multiline':False]
['text':' means the assumption above is incorrect and needs to be','line_number':307,'multiline':False]
['text':' revisited.','line_number':308,'multiline':False]
['text':' Check the very first leaf cell and face cell.','line_number':328,'multiline':False]
['text':' Check the very last leaf cell and face cell.','line_number':333,'multiline':False]
['text':' Check random ranges of leaf cells.','line_number':338,'multiline':False]
['text':' Normalize()','line_number':351,'multiline':False]
['text':' Denormalize(...)','line_number':355,'multiline':False]
['text':' Pack(...)','line_number':360,'multiline':False]
['text':' Contains(...)','line_number':363,'multiline':False]
['text':' Intersects(...)','line_number':367,'multiline':False]
['text':' GetUnion(...)','line_number':371,'multiline':False]
['text':' GetIntersection(...)','line_number':376,'multiline':False]
['text':' GetDifference(...)','line_number':383,'multiline':False]
['text':' Expand(...)','line_number':388,'multiline':False]
['text':' empty union','line_number':415,'multiline':False]
['text':' One leaf on face 0.','line_number':422,'multiline':False]
['text':' Face 0.','line_number':426,'multiline':False]
['text':' Five faces.','line_number':430,'multiline':False]
['text':' Whole world.','line_number':433,'multiline':False]
['text':' Add some disjoint cells.','line_number':437,'multiline':False]
