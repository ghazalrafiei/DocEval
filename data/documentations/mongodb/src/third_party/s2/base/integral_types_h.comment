['text':' Copyright 2008 Google Inc. All Rights Reserved.','line_number':1,'multiline':False]
['text':'','line_number':2,'multiline':False]
['text':' Basic integer type definitions for various platforms','line_number':3,'multiline':False]
['text':'','line_number':4,'multiline':False]
['text':' This code is compiled directly on many platforms, including client','line_number':5,'multiline':False]
['text':' platforms like Windows, Mac, and embedded systems.  Before making','line_number':6,'multiline':False]
['text':' any changes here, make sure that you're not breaking any platforms.','line_number':7,'multiline':False]
['text':'','line_number':8,'multiline':False]
['text':' These typedefs are also defined in base/google.swig. In the','line_number':13,'multiline':False]
['text':' SWIG environment, we use those definitions and avoid duplicate','line_number':14,'multiline':False]
['text':' definitions here with an ifdef. The definitions should be the','line_number':15,'multiline':False]
['text':' same in both files, and ideally be only defined in this file.','line_number':16,'multiline':False]
['text':' Standard typedefs','line_number':18,'multiline':False]
['text':' All Google2 code is compiled with -funsigned-char to make "char"','line_number':19,'multiline':False]
['text':' unsigned.  Google2 code therefore doesn't need a "uchar" type.','line_number':20,'multiline':False]
['text':' COMPILER_MSVC ','line_number':29,'multiline':True]
['text':' NOTE: unsigned types are DANGEROUS in loops and other arithmetical','line_number':31,'multiline':False]
['text':' places.  Use the signed types unless your variable represents a bit','line_number':32,'multiline':False]
['text':' pattern (eg a hash value) or you really need the extra bit.  Do NOT','line_number':33,'multiline':False]
['text':' use 'unsigned' to express "this value should always be positive";','line_number':34,'multiline':False]
['text':' use assertions for this.','line_number':35,'multiline':False]
['text':' COMPILER_MSVC ','line_number':44,'multiline':True]
['text':' A type to represent a Unicode code-point value. As of Unicode 4.0,','line_number':46,'multiline':False]
['text':' such values require up to 21 bits.','line_number':47,'multiline':False]
['text':' (For type-checking on pointers, make this explicitly signed,','line_number':48,'multiline':False]
['text':' and it should always be the signed version of whatever int32 is.)','line_number':49,'multiline':False]
['text':'  A type to represent a natural machine word (for e.g. efficiently','line_number':52,'multiline':False]
['text':' scanning through memory for checksums or index searching). Don't use','line_number':53,'multiline':False]
['text':' this for storing normal integers. Ideally this would be just','line_number':54,'multiline':False]
['text':' unsigned int, but our 64-bit architectures use the LP64 model','line_number':55,'multiline':False]
['text':' (http://www.opengroup.org/public/tech/aspen/lp64_wp.htm), hence','line_number':56,'multiline':False]
['text':' their ints are only 32 bits. We want to use the same fundamental','line_number':57,'multiline':False]
['text':' type on all archs if possible to preserve *printf() compatability.','line_number':58,'multiline':False]
['text':' A signed natural machine word. In general you want to use "int"','line_number':61,'multiline':False]
['text':' rather than "sword_t"','line_number':62,'multiline':False]
['text':' SWIG ','line_number':65,'multiline':True]
['text':' long long macros to be used because gcc and vc++ use different suffixes,','line_number':67,'multiline':False]
['text':' and different size specifiers in format strings','line_number':68,'multiline':False]
['text':' if Visual C++ ','line_number':73,'multiline':True]
['text':' VC++ long long suffixes','line_number':75,'multiline':False]
['text':' Length modifier in printf format string for int64's (e.g. within %d)','line_number':79,'multiline':False]
['text':' As in printf("%I64d", ...)','line_number':80,'multiline':False]
['text':' not Visual C++ ','line_number':83,'multiline':True]
['text':' As in "%lld". Note that "q" is poor form also.','line_number':87,'multiline':False]
['text':' COMPILER_MSVC','line_number':90,'multiline':False]
['text':' BASE_INT_TYPES_H_','line_number':107,'multiline':False]
