['text':' Copyright 2004 Google Inc.','line_number':1,'multiline':False]
['text':' All Rights Reserved.','line_number':2,'multiline':False]
['text':'','line_number':3,'multiline':False]
['text':' An unsigned 128-bit integer type. Thread-compatible.','line_number':16,'multiline':False]
['text':' Sets to 0, but don't trust on this behavior.','line_number':19,'multiline':False]
['text':' Top 96 bits = 0','line_number':23,'multiline':False]
['text':' hi_ = 0','line_number':25,'multiline':False]
['text':' Logical operators.','line_number':39,'multiline':False]
['text':' Shift operators.','line_number':45,'multiline':False]
['text':' Arithmetic operators.','line_number':49,'multiline':False]
['text':' TODO: multiplication, division, etc.','line_number':50,'multiline':False]
['text':' Little-endian memory order optimizations can benefit from','line_number':66,'multiline':False]
['text':' having lo_ first, hi_ last.','line_number':67,'multiline':False]
['text':' See util/endian/endian.h and Load128/Store128 for storing a uint128.','line_number':68,'multiline':False]
['text':' Not implemented, just declared for catching automatic type conversions.','line_number':72,'multiline':False]
['text':' allow uint128 to be logged','line_number':81,'multiline':False]
['text':' Methods to access low and high pieces of 128-bit value.','line_number':84,'multiline':False]
['text':' Defined externally from uint128 to facilitate conversion','line_number':85,'multiline':False]
['text':' to native 128-bit types when compilers support them.','line_number':86,'multiline':False]
['text':' TODO: perhaps it would be nice to have int128, a signed 128-bit type?','line_number':90,'multiline':False]
['text':' --------------------------------------------------------------------------','line_number':92,'multiline':False]
['text':'                      Implementation details follow','line_number':93,'multiline':False]
['text':' --------------------------------------------------------------------------','line_number':94,'multiline':False]
['text':' Comparison operators.','line_number':124,'multiline':False]
['text':' Logical operators.','line_number':138,'multiline':False]
['text':' Shift operators.','line_number':155,'multiline':False]
['text':' uint64 shifts of >= 64 are undefined, so we will need some special-casing.','line_number':160,'multiline':False]
['text':' uint64 shifts of >= 64 are undefined, so we will need some special-casing.','line_number':178,'multiline':False]
['text':' BASE_INT128_H_','line_number':239,'multiline':False]
