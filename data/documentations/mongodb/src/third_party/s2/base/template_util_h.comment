['text':' Copyright 2005 Google Inc. All Rights Reserved.','line_number':1,'multiline':False]
['text':'','line_number':2,'multiline':False]
['text':' Template metaprogramming utility functions.','line_number':3,'multiline':False]
['text':'','line_number':4,'multiline':False]
['text':' This code is compiled directly on many platforms, including client','line_number':5,'multiline':False]
['text':' platforms like Windows, Mac, and embedded systems.  Before making','line_number':6,'multiline':False]
['text':' any changes here, make sure that you're not breaking any platforms.','line_number':7,'multiline':False]
['text':'','line_number':8,'multiline':False]
['text':'','line_number':9,'multiline':False]
['text':' The names choosen here reflect those used in tr1 and the boost::mpl','line_number':10,'multiline':False]
['text':' library, there are similar operations used in the Loki library as','line_number':11,'multiline':False]
['text':' well.  I prefer the boost names for 2 reasons:','line_number':12,'multiline':False]
['text':' 1.  I think that portions of the Boost libraries are more likely to','line_number':13,'multiline':False]
['text':' be included in the c++ standard.','line_number':14,'multiline':False]
['text':' 2.  It is not impossible that some of the boost libraries will be','line_number':15,'multiline':False]
['text':' included in our own build in the future.','line_number':16,'multiline':False]
['text':' Both of these outcomes means that we may be able to directly replace','line_number':17,'multiline':False]
['text':' some of these with boost equivalents.','line_number':18,'multiline':False]
['text':'','line_number':19,'multiline':False]
['text':' Types small_ and big_ are guaranteed such that sizeof(small_) <','line_number':25,'multiline':False]
['text':' sizeof(big_)','line_number':26,'multiline':False]
['text':' integral_constant, defined in tr1, is a wrapper for an integer','line_number':33,'multiline':False]
['text':' value. We don't really need this generality; we could get away','line_number':34,'multiline':False]
['text':' with hardcoding the integer type to bool. We use the fully','line_number':35,'multiline':False]
['text':' general integer_constant for compatibility with tr1.','line_number':36,'multiline':False]
['text':' Abbreviations: true_type and false_type are structs that represent boolean','line_number':48,'multiline':False]
['text':' true and false values. Also define the boost::mpl versions of those names,','line_number':49,'multiline':False]
['text':' true_ and false_.','line_number':50,'multiline':False]
['text':' if_ is a templatized conditional statement.','line_number':56,'multiline':False]
['text':' if_<cond, A, B> is a compile time evaluation of cond.','line_number':57,'multiline':False]
['text':' if_<>::type contains A if cond is true, B otherwise.','line_number':58,'multiline':False]
['text':' type_equals_ is a template type comparator, similar to Loki IsSameType.','line_number':70,'multiline':False]
['text':' type_equals_<A, B>::value is true iff "A" is the same type as "B".','line_number':71,'multiline':False]
['text':'','line_number':72,'multiline':False]
['text':' New code should prefer base::is_same, defined in base/type_traits.h.','line_number':73,'multiline':False]
['text':' It is functionally identical, but is_same is the standard spelling.','line_number':74,'multiline':False]
['text':' and_ is a template && operator.','line_number':83,'multiline':False]
['text':' and_<A, B>::value evaluates "A::value && B::value".','line_number':84,'multiline':False]
['text':' or_ is a template || operator.','line_number':89,'multiline':False]
['text':' or_<A, B>::value evaluates "A::value || B::value".','line_number':90,'multiline':False]
['text':' Close namespace base','line_number':96,'multiline':False]
['text':' BASE_TEMPLATE_UTIL_H_','line_number':98,'multiline':False]
