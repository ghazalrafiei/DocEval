['text':'','line_number':1,'multiline':False]
['text':' Copyright (C) 1999 and onwards Google, Inc.','line_number':2,'multiline':False]
['text':'','line_number':3,'multiline':False]
['text':'','line_number':4,'multiline':False]
['text':' These are weird things we need to do to get this compiling on','line_number':5,'multiline':False]
['text':' random systems (and on SWIG).','line_number':6,'multiline':False]
['text':' So we can set the bounds of our types','line_number':13,'multiline':False]
['text':' for memcpy()','line_number':14,'multiline':False]
['text':' for free()','line_number':15,'multiline':False]
['text':' for getpagesize() on mac','line_number':18,'multiline':False]
['text':' for memalign()','line_number':20,'multiline':False]
['text':' Must happens before inttypes.h inclusion */','line_number':25,'multiline':False]
['text':' From MacOSX's inttypes.h:
 * "C++ implementations should define these macros only when
 *  __STDC_FORMAT_MACROS is defined before <inttypes.h> is included." ','line_number':27,'multiline':True]
['text':' __STDC_FORMAT_MACROS ','line_number':32,'multiline':True]
['text':' OS_MACOSX ','line_number':33,'multiline':True]
['text':' Default for most OSes ','line_number':35,'multiline':True]
['text':' We use SIGPWR since that seems unlikely to be used for other reasons. ','line_number':36,'multiline':True]
['text':' _BIG_ENDIAN','line_number':41,'multiline':False]
['text':' The uint mess:','line_number':44,'multiline':False]
['text':' mysql.h sets _GNU_SOURCE which sets __USE_MISC in <features.h>','line_number':45,'multiline':False]
['text':' sys/types.h typedefs uint if __USE_MISC','line_number':46,'multiline':False]
['text':' mysql typedefs uint if HAVE_UINT not set','line_number':47,'multiline':False]
['text':' The following typedef is carefully considered, and should not cause','line_number':48,'multiline':False]
['text':'  any clashes','line_number':49,'multiline':False]
['text':' For _GLIBCXX macros','line_number':66,'multiline':False]
['text':' _BIG_ENDIAN','line_number':75,'multiline':False]
['text':' _BIG_ENDIAN','line_number':80,'multiline':False]
['text':' Solaris doesn't define sig_t (function taking an int, returning void)','line_number':83,'multiline':False]
['text':' Solaris only defines strtoll, not strtoq','line_number':86,'multiline':False]
['text':' It doesn't define the posix-standard(?) u_int_16','line_number':90,'multiline':False]
['text':' BIG_ENDIAN','line_number':96,'multiline':False]
['text':' Let's try and follow the Linux convention ','line_number':98,'multiline':True]
['text':' The following guarenty declaration of the byte swap functions, and','line_number':113,'multiline':False]
['text':' define __BYTE_ORDER for MSVC','line_number':114,'multiline':False]
['text':' Mac OS X / Darwin features','line_number':122,'multiline':False]
['text':' define the macros IS_LITTLE_ENDIAN or IS_BIG_ENDIAN','line_number':147,'multiline':False]
['text':' using the above endian defintions from endian.h if','line_number':148,'multiline':False]
['text':' endian.h was included','line_number':149,'multiline':False]
['text':' there is also PDP endian ...','line_number':167,'multiline':False]
['text':' __BYTE_ORDER','line_number':169,'multiline':False]
['text':' Define the OS's path separator','line_number':171,'multiline':False]
['text':' C won't merge duplicate const variables at link time','line_number':172,'multiline':False]
['text':' Some headers provide a macro for this (GCC's system.h), remove it so that we','line_number':173,'multiline':False]
['text':' can use our own.','line_number':174,'multiline':False]
['text':' Windows has O_BINARY as a flag to open() (like "b" for fopen).','line_number':183,'multiline':False]
['text':' Linux doesn't need make this distinction.','line_number':184,'multiline':False]
['text':' va_copy portability definitions','line_number':189,'multiline':False]
['text':' MSVC doesn't have va_copy yet.','line_number':191,'multiline':False]
['text':' This is believed to work for 32-bit msvc.  This may not work at all for','line_number':192,'multiline':False]
['text':' other platforms.','line_number':193,'multiline':False]
['text':' If va_list uses the single-element-array trick, you will probably get','line_number':194,'multiline':False]
['text':' a compiler error here.','line_number':195,'multiline':False]
['text':'','line_number':196,'multiline':False]
['text':' Nor does it have uid_t','line_number':202,'multiline':False]
['text':' Mac OS X / Darwin features','line_number':207,'multiline':False]
['text':' For mmap, Linux defines both MAP_ANONYMOUS and MAP_ANON and says MAP_ANON is','line_number':211,'multiline':False]
['text':' deprecated. In Darwin, MAP_ANON is all there is.','line_number':212,'multiline':False]
['text':' Linux has this in <sys/cdefs.h>','line_number':217,'multiline':False]
['text':' Linux has this in <linux/errno.h>','line_number':220,'multiline':False]
['text':' not really that great a translation...','line_number':221,'multiline':False]
['text':' Mach-O supports sections (albeit with small names), but doesn't have','line_number':223,'multiline':False]
['text':' vars at the beginning and end.  Instead you should call the function','line_number':224,'multiline':False]
['text':' getsectdata("__DATA", name, &size).','line_number':225,'multiline':False]
['text':' Any function with ATTRIBUTE_SECTION must not be inlined, or it will','line_number':228,'multiline':False]
['text':' be placed into whatever section its caller is placed into.','line_number':229,'multiline':False]
['text':' so that we don't pollute the global namespace','line_number':233,'multiline':False]
['text':' Find out what dynamic library name is defined in','line_number':241,'multiline':False]
['text':' NULL if not defined in this dynamic library','line_number':246,'multiline':False]
['text':' correct for reloc','line_number':247,'multiline':False]
['text':' If we get here, not defined in a dll at all.  See if defined statically.','line_number':252,'multiline':False]
['text':' don't ask me why this type isn't uint32_t too...','line_number':253,'multiline':False]
['text':' 1) DEFINE_ATTRIBUTE_SECTION_VARS: must be called once per unique','line_number':259,'multiline':False]
['text':'    name.  You want to make sure this is executed before any','line_number':260,'multiline':False]
['text':'    DECLARE_ATTRIBUTE_SECTION_VARS; the easiest way is to put them','line_number':261,'multiline':False]
['text':'    in the same .cc file.  Put this call at the global level.','line_number':262,'multiline':False]
['text':' 2) INIT_ATTRIBUTE_SECTION_VARS: you can scatter calls to this in','line_number':263,'multiline':False]
['text':'    multiple places to help ensure execution before any','line_number':264,'multiline':False]
['text':'    DECLARE_ATTRIBUTE_SECTION_VARS.  You must have at least one','line_number':265,'multiline':False]
['text':'    DEFINE, but you can have many INITs.  Put each in its own scope.','line_number':266,'multiline':False]
['text':' 3) DECLARE_ATTRIBUTE_SECTION_VARS: must be called before using','line_number':267,'multiline':False]
['text':'    ATTRIBUTE_SECTION_START or ATTRIBUTE_SECTION_STOP on a name.','line_number':268,'multiline':False]
['text':'    Put this call at the global level.','line_number':269,'multiline':False]
['text':' Darwin doesn't have strnlen. No comment.','line_number':283,'multiline':False]
['text':' just like VC++, we need a using here','line_number':291,'multiline':False]
['text':' No SIGPWR on MacOSX.  SIGINFO seems suitably obscure.','line_number':293,'multiline':False]
['text':' Cygwin-specific behavior.','line_number':297,'multiline':False]
['text':' It's probably possible to support 64-bit, but the #defines will need checked.','line_number':302,'multiline':False]
['text':' No signalling on Windows.','line_number':306,'multiline':False]
['text':' Not provided by cygwin','line_number':317,'multiline':False]
['text':' Scans memory for a character.','line_number':319,'multiline':False]
['text':' memrchr is used in a few places, but it's linux-specific.','line_number':320,'multiline':False]
['text':' Klocwork static analysis tool's C/C++ complier kwcc','line_number':335,'multiline':False]
['text':' __KLOCWORK__','line_number':338,'multiline':False]
['text':' GCC-specific features','line_number':340,'multiline':False]
['text':'','line_number':344,'multiline':False]
['text':' Tell the compiler to do printf format string checking if the','line_number':345,'multiline':False]
['text':' compiler supports it; see the 'format' attribute in','line_number':346,'multiline':False]
['text':' <http://gcc.gnu.org/onlinedocs/gcc-4.3.0/gcc/Function-Attributes.html>.','line_number':347,'multiline':False]
['text':'','line_number':348,'multiline':False]
['text':' N.B.: As the GCC manual states, "[s]ince non-static C++ methods','line_number':349,'multiline':False]
['text':' have an implicit 'this' argument, the arguments of such methods','line_number':350,'multiline':False]
['text':' should be counted from two, not one."','line_number':351,'multiline':False]
['text':'','line_number':352,'multiline':False]
['text':'','line_number':358,'multiline':False]
['text':' Prevent the compiler from padding a structure to natural alignment','line_number':359,'multiline':False]
['text':'','line_number':360,'multiline':False]
['text':' Cache line alignment','line_number':363,'multiline':False]
['text':'','line_number':374,'multiline':False]
['text':' Prevent the compiler from complaining about or optimizing away variables','line_number':375,'multiline':False]
['text':' that appear unused','line_number':376,'multiline':False]
['text':' (careful, others e.g. third_party/libxml/xmlversion.h also define this)','line_number':377,'multiline':False]
['text':'','line_number':381,'multiline':False]
['text':' For functions we want to force inline or not inline.','line_number':382,'multiline':False]
['text':' Introduced in gcc 3.1.','line_number':383,'multiline':False]
['text':' For weak functions','line_number':389,'multiline':False]
['text':' Tell the compiler to use "initial-exec" mode for a thread-local variable.','line_number':394,'multiline':False]
['text':' See http://people.redhat.com/drepper/tls.pdf for the gory details.','line_number':395,'multiline':False]
['text':'','line_number':398,'multiline':False]
['text':' Tell the compiler that a given function never returns','line_number':399,'multiline':False]
['text':'','line_number':400,'multiline':False]
['text':' For deprecated functions, variables, and types.','line_number':403,'multiline':False]
['text':' gcc 3.1.1 and later provide this attribute.','line_number':404,'multiline':False]
['text':' gcc 3.1.1 and later provide -Wdeprecated-declarations, on by default,','line_number':405,'multiline':False]
['text':'   and then -Werror converts such warning to an error','line_number':406,'multiline':False]
['text':' gcc 4.2.1 and later provide -Wno-error=deprecated-declarations,','line_number':407,'multiline':False]
['text':'   so that use of a deprecated entity is a warning but not an error','line_number':408,'multiline':False]
['text':'','line_number':409,'multiline':False]
['text':' gcc 4.2.1 and gcc 4.2.2 ignore ATTRIBUTE_DEPRECATED on virtual functions.','line_number':410,'multiline':False]
['text':' this is fixed in gcc 4.3.1 (crosstool v12).  -- mec, 2008-10-21','line_number':411,'multiline':False]
['text':'','line_number':412,'multiline':False]
['text':' 2010-05-19(mec): Failed.','line_number':413,'multiline':False]
['text':' Too many people started deprecations and then stopped working on them.','line_number':414,'multiline':False]
['text':' The deprecation messages just became build noise.','line_number':415,'multiline':False]
['text':' The two-part deletion plan:','line_number':416,'multiline':False]
['text':'   change definition of ATTRIBUTE_DEPRECATED to an empty macro','line_number':417,'multiline':False]
['text':'   then global change: ATTRIBUTE_DEPRECATED -> /* deprecated */','line_number':418,'multiline':False]
['text':' We may introduce a new facility like this in the future,','line_number':419,'multiline':False]
['text':' probably with a different name.  See message from iant to c-style:','line_number':420,'multiline':False]
['text':' may have been pre-set to 0, e.g. for Darwin','line_number':423,'multiline':False]
['text':' define section support for the case of GCC','line_number':427,'multiline':False]
['text':'','line_number':429,'multiline':False]
['text':' Tell the compiler/linker to put a given function into a section and define','line_number':430,'multiline':False]
['text':' "__start_ ## name" and "__stop_ ## name" symbols to bracket the section.','line_number':431,'multiline':False]
['text':' Sections can not span more than none compilation unit.','line_number':432,'multiline':False]
['text':' This functionality is supported by GNU linker.','line_number':433,'multiline':False]
['text':' Any function with ATTRIBUTE_SECTION must not be inlined, or it will','line_number':434,'multiline':False]
['text':' be placed into whatever section its caller is placed into.','line_number':435,'multiline':False]
['text':'','line_number':436,'multiline':False]
['text':'','line_number':442,'multiline':False]
['text':' Weak section declaration to be used as a global declaration','line_number':443,'multiline':False]
['text':' for ATTRIBUTE_SECTION_START|STOP(name) to compile and link','line_number':444,'multiline':False]
['text':' even without functions with ATTRIBUTE_SECTION(name).','line_number':445,'multiline':False]
['text':' DEFINE_ATTRIBUTE_SECTION should be in the exactly one file; it's','line_number':446,'multiline':False]
['text':' a no-op on ELF but not on Mach-O.','line_number':447,'multiline':False]
['text':'','line_number':448,'multiline':False]
['text':'','line_number':459,'multiline':False]
['text':' Return void* pointers to start/end of a section of code with','line_number':460,'multiline':False]
['text':' functions having ATTRIBUTE_SECTION(name).','line_number':461,'multiline':False]
['text':' Returns 0 if no such functions exits.','line_number':462,'multiline':False]
['text':' One must DECLARE_ATTRIBUTE_SECTION_VARS(name) for this to compile and link.','line_number':463,'multiline':False]
['text':'','line_number':464,'multiline':False]
['text':' HAVE_ATTRIBUTE_SECTION','line_number':468,'multiline':False]
['text':'','line_number':470,'multiline':False]
['text':' The legacy prod71 libc does not provide the stack alignment required for use','line_number':471,'multiline':False]
['text':' of SSE intrinsics.  In order to properly use the intrinsics you need to use','line_number':472,'multiline':False]
['text':' a trampoline function which aligns the stack prior to calling your code,','line_number':473,'multiline':False]
['text':' or as of crosstool v10 with gcc 4.2.0 there is an attribute which asks','line_number':474,'multiline':False]
['text':' gcc to do this for you.','line_number':475,'multiline':False]
['text':'','line_number':476,'multiline':False]
['text':' It has also been discovered that crosstool up to and including v10 does not','line_number':477,'multiline':False]
['text':' provide proper alignment for pthread_once() functions in x86-64 code either.','line_number':478,'multiline':False]
['text':' Unfortunately gcc does not provide force_align_arg_pointer as an option in','line_number':479,'multiline':False]
['text':' x86-64 code, so this requires us to always have a trampoline.','line_number':480,'multiline':False]
['text':'','line_number':481,'multiline':False]
['text':' For an example of using this see util/hash/adler32*','line_number':482,'multiline':False]
['text':'','line_number':496,'multiline':False]
['text':' Tell the compiler to warn about unused return values for functions declared','line_number':497,'multiline':False]
['text':' with this macro.  The macro should be used on function declarations','line_number':498,'multiline':False]
['text':' following the argument list:','line_number':499,'multiline':False]
['text':'','line_number':500,'multiline':False]
['text':'   Sprocket* AllocateSprocket() MUST_USE_RESULT;','line_number':501,'multiline':False]
['text':'','line_number':502,'multiline':False]
['text':' Defined behavior on some of the uarchs:','line_number':513,'multiline':False]
['text':' PREFETCH_HINT_T0:','line_number':514,'multiline':False]
['text':'   prefetch to all levels of the hierarchy (except on p4: prefetch to L2)','line_number':515,'multiline':False]
['text':' PREFETCH_HINT_NTA:','line_number':516,'multiline':False]
['text':'   p4: fetch to L2, but limit to 1 way (out of the 8 ways)','line_number':517,'multiline':False]
['text':'   core: skip L2, go directly to L1','line_number':518,'multiline':False]
['text':'   k8 rev E and later: skip L2, can go to either of the 2-ways in L1','line_number':519,'multiline':False]
['text':' More temporal locality','line_number':521,'multiline':False]
['text':' Less temporal locality','line_number':523,'multiline':False]
['text':' No temporal locality','line_number':524,'multiline':False]
['text':' prefetch is a no-op for this target. Feel free to add more sections above.','line_number':527,'multiline':False]
['text':' In the gcc version of prefetch(), hint is only a constant _after_ inlining','line_number':532,'multiline':False]
['text':' (assumed to have been successful).  icc views things differently, and','line_number':533,'multiline':False]
['text':' checks constant-ness _before_ inlining.  This leads to compilation errors','line_number':534,'multiline':False]
['text':' with the gcc version in icc.','line_number':535,'multiline':False]
['text':'','line_number':536,'multiline':False]
['text':' One way round this is to use a switch statement to explicitly match','line_number':537,'multiline':False]
['text':' prefetch hint enumerations, and invoke __builtin_prefetch for each valid','line_number':538,'multiline':False]
['text':' value.  icc's optimization removes the switch and unused case statements','line_number':539,'multiline':False]
['text':' after inlining, so that this boils down in the end to the same as for gcc;','line_number':540,'multiline':False]
['text':' that is, a single inlined prefetchX instruction.  Demonstrate by compiling','line_number':541,'multiline':False]
['text':' with icc options -xK -O2 and viewing assembly language output.','line_number':542,'multiline':False]
['text':'','line_number':543,'multiline':False]
['text':' Note that this version of prefetch() cannot verify constant-ness of hint.','line_number':544,'multiline':False]
['text':' If client code calls prefetch() with a variable value for hint, it will','line_number':545,'multiline':False]
['text':' receive the full expansion of the switch below, perhaps also not inlined.','line_number':546,'multiline':False]
['text':' This should however not be a problem in the general case of well behaved','line_number':547,'multiline':False]
['text':' caller code that uses the supplied prefetch hint enumerations.','line_number':548,'multiline':False]
['text':' Defaults to PREFETCH_HINT_T0','line_number':571,'multiline':False]
['text':' We want a __builtin_prefetch, but we build with the default -march=i386','line_number':575,'multiline':False]
['text':' where __builtin_prefetch quietly turns into nothing.','line_number':576,'multiline':False]
['text':' Once we crank up to -march=pentium3 or higher the __SSE__','line_number':577,'multiline':False]
['text':' clause above will kick in with the builtin.','line_number':578,'multiline':False]
['text':' -- mec 2006-06-06','line_number':579,'multiline':False]
['text':' You get no effect.  Feel free to add more sections above.','line_number':584,'multiline':False]
['text':' prefetch intrinsic (bring data to L1 without polluting L2 cache)','line_number':589,'multiline':False]
['text':' ifdef __cplusplus','line_number':593,'multiline':False]
['text':'','line_number':595,'multiline':False]
['text':' GCC can be told that a certain branch is not likely to be taken (for','line_number':596,'multiline':False]
['text':' instance, a CHECK failure), and use that information in static analysis.','line_number':597,'multiline':False]
['text':' Giving it this information can help it optimize for the common case in','line_number':598,'multiline':False]
['text':' the absence of better information (ie. -fprofile-arcs).','line_number':599,'multiline':False]
['text':'','line_number':600,'multiline':False]
['text':' stdlib.h only declares this in C++, not in C, so we declare it here.','line_number':613,'multiline':False]
['text':' Also make sure to avoid declaring it on platforms which don't support it.','line_number':614,'multiline':False]
['text':' mac lacks memalign(), posix_memalign(), however, according to','line_number':620,'multiline':False]
['text':' http://stackoverflow.com/questions/196329/osx-lacks-memalign','line_number':621,'multiline':False]
['text':' mac allocs are already 16-byte aligned.','line_number':622,'multiline':False]
['text':' next, try to return page-aligned memory. perhaps overkill','line_number':625,'multiline':False]
['text':' give up','line_number':628,'multiline':False]
['text':' !OS_MACOSX && !OS_CYGWIN','line_number':632,'multiline':False]
['text':' not GCC','line_number':645,'multiline':False]
['text':' These should be redefined appropriately if better alternatives to','line_number':667,'multiline':False]
['text':' ftell/fseek exist in the compiler','line_number':668,'multiline':False]
['text':' GCC','line_number':672,'multiline':False]
['text':' provide dummy definitions','line_number':674,'multiline':False]
['text':' !HAVE_ATTRIBUTE_SECTION','line_number':683,'multiline':False]
['text':' MongoDB modification: All of our target platforms define the C99 remainder function.','line_number':685,'multiline':False]
['text':' If quot is slightly less than 0.5, we round down explicitly.  We have to','line_number':690,'multiline':False]
['text':' do this explicitly because (0.5 + quot) when quot=(0.5-epsilon) gives you 1','line_number':691,'multiline':False]
['text':' and that's rounding the wrong way.  Oh, floating point!','line_number':692,'multiline':False]
['text':' HK's fun windows fixer-upper defines go here!  Woo.','line_number':705,'multiline':False]
['text':' if Visual C++ ','line_number':716,'multiline':True]
['text':' This compiler flag can be easily overlooked on MSVC.','line_number':718,'multiline':False]
['text':' _CHAR_UNSIGNED gets set with the /J flag.','line_number':719,'multiline':False]
['text':' MSVC is a little hyper-active in it's warnings','line_number':724,'multiline':False]
['text':' Signed vs. unsigned comparison is ok.','line_number':725,'multiline':False]
['text':' We know casting from a long to a char may lose data','line_number':727,'multiline':False]
['text':' Don't need performance warnings about converting ints to bools','line_number':729,'multiline':False]
['text':' Integral constant overflow is apparently ok too','line_number':731,'multiline':False]
['text':' for example:','line_number':732,'multiline':False]
['text':'  short k;  int n;','line_number':733,'multiline':False]
['text':'  k = k + n;','line_number':734,'multiline':False]
['text':' It's ok to use this* in constructor','line_number':736,'multiline':False]
['text':' Example:','line_number':737,'multiline':False]
['text':'  class C {','line_number':738,'multiline':False]
['text':'   Container cont_;','line_number':739,'multiline':False]
['text':'   C() : cont_(this) { ...','line_number':740,'multiline':False]
['text':' Truncating from double to float is ok','line_number':742,'multiline':False]
['text':' for nextafter functionality on windows','line_number':750,'multiline':False]
['text':' for HUGE_VAL','line_number':751,'multiline':False]
['text':' VC++ doesn't understand "uint"','line_number':759,'multiline':False]
['text':' VC++ 6 and before ship without an ostream << operator for 64-bit ints','line_number':772,'multiline':False]
['text':' Fake operator; doesn't actually do anything.','line_number':778,'multiline':False]
['text':' You say tomato, I say atotom','line_number':784,'multiline':False]
['text':' You say tomato, I say _tomato','line_number':787,'multiline':False]
['text':' You say tomato, I say toma','line_number':805,'multiline':False]
['text':' You say juxtapose, I say transpose','line_number':809,'multiline':False]
['text':' ----- BEGIN VC++ STUBS & FAKE DEFINITIONS ---------------------------------','line_number':820,'multiline':False]
['text':' See http://en.wikipedia.org/wiki/IEEE_754 for details of','line_number':822,'multiline':False]
['text':' floating point format.','line_number':823,'multiline':False]
['text':'  is "Not a Number"','line_number':826,'multiline':False]
['text':'  is either plus or minus infinity.','line_number':827,'multiline':False]
['text':' is too small to be represented in normalized format.','line_number':829,'multiline':False]
['text':' if nothing of the above is correct that it must be a','line_number':830,'multiline':False]
['text':' normal floating-point number.','line_number':831,'multiline':False]
['text':' Signaling NaN','line_number':838,'multiline':False]
['text':' Quiet NaN','line_number':839,'multiline':False]
['text':' Negative zero ( -0)','line_number':842,'multiline':False]
['text':' Positive 0 (+0)','line_number':843,'multiline':False]
['text':' Negative infinity ( -INF)','line_number':846,'multiline':False]
['text':' Positive infinity (+INF)','line_number':847,'multiline':False]
['text':' Negative denormalized','line_number':850,'multiline':False]
['text':' Positive denormalized','line_number':851,'multiline':False]
['text':' Negative normalized non-zero','line_number':854,'multiline':False]
['text':' Positive normalized non-zero','line_number':855,'multiline':False]
['text':' Should never happen','line_number':859,'multiline':False]
['text':' This function handle the special subnormal case for float; it will','line_number':865,'multiline':False]
['text':' become a normal number while casting to double.','line_number':866,'multiline':False]
['text':' bit_cast is avoided to simplify dependency and to create a code that is','line_number':867,'multiline':False]
['text':' easy to deploy in C code','line_number':868,'multiline':False]
['text':'','line_number':877,'multiline':False]
['text':' This define takes care of the denormalized float; the casting to','line_number':878,'multiline':False]
['text':' double make it a normal number','line_number':879,'multiline':False]
['text':' #include "conflict-signal.h"','line_number':891,'multiline':False]
['text':' These actually belong in errno.h but there's a name confilict in errno','line_number':894,'multiline':False]
['text':' on WinNT. They (and a ton more) are also found in Winsock2.h, but','line_number':895,'multiline':False]
['text':' if'd out under NT. We need this subset at minimum.','line_number':896,'multiline':False]
['text':' not really that great a translation...','line_number':897,'multiline':False]
['text':'#define EWOULDBLOCK WSAEWOULDBLOCK','line_number':898,'multiline':False]
['text':'#ifndef PTHREADS_REDHAT_WIN32','line_number':899,'multiline':False]
['text':'#define ETIMEDOUT   WSAETIMEDOUT','line_number':900,'multiline':False]
['text':'#endif','line_number':901,'multiline':False]
['text':'#define ENOTSOCK    WSAENOTSOCK','line_number':902,'multiline':False]
['text':'#define EINPROGRESS WSAEINPROGRESS','line_number':903,'multiline':False]
['text':'#define ECONNRESET  WSAECONNRESET','line_number':904,'multiline':False]
['text':'','line_number':917,'multiline':False]
['text':' Really from <string.h>','line_number':918,'multiline':False]
['text':'','line_number':919,'multiline':False]
['text':' From glob.h','line_number':925,'multiline':False]
['text':' Defined all over the place.','line_number':928,'multiline':False]
['text':' From stat.h','line_number':931,'multiline':False]
['text':' u_int16_t, int16_t don't exist in MSVC','line_number':934,'multiline':False]
['text':' ----- END VC++ STUBS & FAKE DEFINITIONS ----------------------------------','line_number':938,'multiline':False]
['text':' COMPILER_MSVC','line_number':940,'multiline':False]
['text':' not always the same as COMPILER_MSVC','line_number':942,'multiline':False]
['text':' The SWIGged version of an abstract class must be concrete if any methods','line_number':948,'multiline':False]
['text':' return objects of the abstract type.','line_number':949,'multiline':False]
['text':'','line_number':950,'multiline':False]
['text':' This location is deprecated, the new preferred location is in base/macros.h.','line_number':951,'multiline':False]
['text':' gethostbyname() *is* thread-safe for Windows native threads. It is also','line_number':958,'multiline':False]
['text':' safe on Mac OS X, where it uses thread-local storage, even though the','line_number':959,'multiline':False]
['text':' manpages claim otherwise. For details, see','line_number':960,'multiline':False]
['text':' http://lists.apple.com/archives/Darwin-dev/2006/May/msg00008.html','line_number':961,'multiline':False]
['text':' gethostbyname() is not thread-safe.  So disallow its use.  People','line_number':963,'multiline':False]
['text':' should either use the HostLookup::Lookup*() methods, or gethostbyname_r()','line_number':964,'multiline':False]
['text':' create macros in which the programmer should enclose all specializations','line_number':968,'multiline':False]
['text':' for hash_maps and hash_sets. This is necessary since these classes are not','line_number':969,'multiline':False]
['text':' STL standardized. Depending on the STL implementation they are in different','line_number':970,'multiline':False]
['text':' namespaces. Right now the right namespace is passed by the Makefile','line_number':971,'multiline':False]
['text':' Examples: gcc3: -DHASH_NAMESPACE=__gnu_cxx','line_number':972,'multiline':False]
['text':'           icc:  -DHASH_NAMESPACE=std','line_number':973,'multiline':False]
['text':'           gcc2: empty','line_number':974,'multiline':False]
['text':' Our STL-like classes use __STD.','line_number':984,'multiline':False]
['text':' Portable handling of unaligned loads and stores','line_number':997,'multiline':False]
['text':' x86 and x86-64 can perform unaligned loads/stores directly;','line_number':1001,'multiline':False]
['text':' modern PowerPC hardware can also do unaligned integer loads and stores;','line_number':1002,'multiline':False]
['text':' but note: the FPU still sends unaligned loads and stores to a trap handler!','line_number':1003,'multiline':False]
['text':' These functions are provided for architectures that don't support','line_number':1017,'multiline':False]
['text':' unaligned loads and stores.','line_number':1018,'multiline':False]
['text':' printf macros for size_t, in the style of inttypes.h','line_number':1060,'multiline':False]
['text':' Use these macros after a % in a printf format string','line_number':1067,'multiline':False]
['text':' to get correct 32/64 bit behavior, like this:','line_number':1068,'multiline':False]
['text':' size_t size = records.size();','line_number':1069,'multiline':False]
['text':' printf("%"PRIuS"\n", size);','line_number':1070,'multiline':False]
['text':' pthread_t is not a simple integer or pointer on Win32','line_number':1098,'multiline':False]
['text':' BASE_PORT_H_','line_number':1102,'multiline':False]
