['text':' Copyright 2006 Google Inc. All Rights Reserved.','line_number':1,'multiline':False]
['text':'','line_number':2,'multiline':False]
['text':' This code is compiled directly on many platforms, including client','line_number':3,'multiline':False]
['text':' platforms like Windows, Mac, and embedded systems.  Before making','line_number':4,'multiline':False]
['text':' any changes here, make sure that you're not breaking any platforms.','line_number':5,'multiline':False]
['text':'','line_number':6,'multiline':False]
['text':'','line_number':7,'multiline':False]
['text':' Define a small subset of tr1 type traits. The traits we define are:','line_number':8,'multiline':False]
['text':'   is_integral','line_number':9,'multiline':False]
['text':'   is_floating_point','line_number':10,'multiline':False]
['text':'   is_pointer','line_number':11,'multiline':False]
['text':'   is_enum','line_number':12,'multiline':False]
['text':'   is_reference','line_number':13,'multiline':False]
['text':'   is_pod','line_number':14,'multiline':False]
['text':'   has_trivial_constructor','line_number':15,'multiline':False]
['text':'   has_trivial_copy','line_number':16,'multiline':False]
['text':'   has_trivial_assign','line_number':17,'multiline':False]
['text':'   has_trivial_destructor','line_number':18,'multiline':False]
['text':'   remove_const','line_number':19,'multiline':False]
['text':'   remove_volatile','line_number':20,'multiline':False]
['text':'   remove_cv','line_number':21,'multiline':False]
['text':'   remove_reference','line_number':22,'multiline':False]
['text':'   add_reference','line_number':23,'multiline':False]
['text':'   remove_pointer','line_number':24,'multiline':False]
['text':'   is_same','line_number':25,'multiline':False]
['text':'   is_convertible','line_number':26,'multiline':False]
['text':' We can add more type traits as required.','line_number':27,'multiline':False]
['text':' For true_type and false_type','line_number':32,'multiline':False]
['text':' For pair','line_number':36,'multiline':False]
['text':' MSVC can't compile this correctly, and neither can gcc 3.3.5 (at least)','line_number':43,'multiline':False]
['text':' is_enum uses is_convertible, which is not available on MSVC.','line_number':45,'multiline':False]
['text':' is_integral is false except for the built-in integer types.','line_number':65,'multiline':False]
['text':' wchar_t is not by default a distinct type from unsigned short in','line_number':72,'multiline':False]
['text':' Microsoft C.','line_number':73,'multiline':False]
['text':' See http://msdn2.microsoft.com/en-us/library/dh8che7s(VS.80).aspx','line_number':74,'multiline':False]
['text':' is_floating_point is false except for the built-in floating-point types.','line_number':89,'multiline':False]
['text':' is_pointer is false except for pointer types.','line_number':96,'multiline':False]
['text':' is_convertible chokes if the first argument is an array. That's why','line_number':110,'multiline':False]
['text':' we use add_reference here.','line_number':111,'multiline':False]
['text':' namespace internal','line_number':117,'multiline':False]
['text':' Specified by TR1 [4.5.1] primary type categories.','line_number':119,'multiline':False]
['text':' Implementation note:','line_number':121,'multiline':False]
['text':'','line_number':122,'multiline':False]
['text':' Each type is either void, integral, floating point, array, pointer,','line_number':123,'multiline':False]
['text':' reference, member object pointer, member function pointer, enum,','line_number':124,'multiline':False]
['text':' union or class. Out of these, only integral, floating point, reference,','line_number':125,'multiline':False]
['text':' class and enum types are potentially convertible to int. Therefore,','line_number':126,'multiline':False]
['text':' if a type is not a reference, integral, floating point or class and','line_number':127,'multiline':False]
['text':' is convertible to int, it's a enum.','line_number':128,'multiline':False]
['text':'','line_number':129,'multiline':False]
['text':' Is-convertible-to-int check is done only if all other checks pass,','line_number':130,'multiline':False]
['text':' because it can't be used with some types (e.g. void or classes with','line_number':131,'multiline':False]
['text':' inaccessible conversion operators).','line_number':132,'multiline':False]
['text':' is_reference is false except for reference types.','line_number':148,'multiline':False]
['text':' We can't get is_pod right without compiler help, so fail conservatively.','line_number':153,'multiline':False]
['text':' We will assume it's false except for arithmetic types, enumerations,','line_number':154,'multiline':False]
['text':' pointers and const versions thereof. Note that std::pair is not a POD.','line_number':155,'multiline':False]
['text':' is_enum is not available on MSVC.','line_number':160,'multiline':False]
['text':' We can't get has_trivial_constructor right without compiler help, so','line_number':167,'multiline':False]
['text':' fail conservatively. We will assume it's false except for: (1) types','line_number':168,'multiline':False]
['text':' for which is_pod is true. (2) std::pair of types with trivial','line_number':169,'multiline':False]
['text':' constructors. (3) array of a type with a trivial constructor.','line_number':170,'multiline':False]
['text':' (4) const versions thereof.','line_number':171,'multiline':False]
['text':' We can't get has_trivial_copy right without compiler help, so fail','line_number':182,'multiline':False]
['text':' conservatively. We will assume it's false except for: (1) types','line_number':183,'multiline':False]
['text':' for which is_pod is true. (2) std::pair of types with trivial copy','line_number':184,'multiline':False]
['text':' constructors. (3) array of a type with a trivial copy constructor.','line_number':185,'multiline':False]
['text':' (4) const versions thereof.','line_number':186,'multiline':False]
['text':' We can't get has_trivial_assign right without compiler help, so fail','line_number':196,'multiline':False]
['text':' conservatively. We will assume it's false except for: (1) types','line_number':197,'multiline':False]
['text':' for which is_pod is true. (2) std::pair of types with trivial copy','line_number':198,'multiline':False]
['text':' constructors. (3) array of a type with a trivial assign constructor.','line_number':199,'multiline':False]
['text':' We can't get has_trivial_destructor right without compiler help, so','line_number':208,'multiline':False]
['text':' fail conservatively. We will assume it's false except for: (1) types','line_number':209,'multiline':False]
['text':' for which is_pod is true. (2) std::pair of types with trivial','line_number':210,'multiline':False]
['text':' destructors. (3) array of a type with a trivial destructor.','line_number':211,'multiline':False]
['text':' (4) const versions thereof.','line_number':212,'multiline':False]
['text':' Specified by TR1 [4.7.1]','line_number':223,'multiline':False]
['text':' Specified by TR1 [4.7.2] Reference modifications.','line_number':233,'multiline':False]
['text':' Specified by TR1 [4.7.4] Pointer modifications.','line_number':240,'multiline':False]
['text':' Specified by TR1 [4.6] Relationships between types','line_number':248,'multiline':False]
['text':' Specified by TR1 [4.6] Relationships between types','line_number':252,'multiline':False]
['text':' This class is an implementation detail for is_convertible, and you','line_number':256,'multiline':False]
['text':' don't need to know how it works to use is_convertible. For those','line_number':257,'multiline':False]
['text':' who care: we declare two different functions, one whose argument is','line_number':258,'multiline':False]
['text':' of type To and one with a variadic argument list. We give them','line_number':259,'multiline':False]
['text':' return types of different size, so we can use sizeof to trick the','line_number':260,'multiline':False]
['text':' compiler into telling us which function it would have chosen if we','line_number':261,'multiline':False]
['text':' had called it with an argument of type From.  See Alexandrescu's','line_number':262,'multiline':False]
['text':' _Modern C++ Design_ for more details on this sort of trick.','line_number':263,'multiline':False]
['text':' namespace internal','line_number':271,'multiline':False]
['text':' Inherits from true_type if From is convertible to To, false_type otherwise.','line_number':273,'multiline':False]
['text':' Close namespace base','line_number':283,'multiline':False]
['text':' BASE_TYPE_TRAITS_H_','line_number':285,'multiline':False]
