['text':' Copyright 2008 Google Inc. All Rights Reserved.','line_number':1,'multiline':False]
['text':'','line_number':2,'multiline':False]
['text':' Architecture-neutral plug compatible replacements for strtol() friends.','line_number':3,'multiline':False]
['text':'','line_number':4,'multiline':False]
['text':' Long's have different lengths on ILP-32 and LP-64 platforms, and so overflow','line_number':5,'multiline':False]
['text':' behavior across the two varies when strtol() and similar are used to parse','line_number':6,'multiline':False]
['text':' 32-bit integers.  Similar problems exist with atoi(), because although it','line_number':7,'multiline':False]
['text':' has an all-integer interface, it uses strtol() internally, and so suffers','line_number':8,'multiline':False]
['text':' from the same narrowing problems on assignments to int.','line_number':9,'multiline':False]
['text':'','line_number':10,'multiline':False]
['text':' Examples:','line_number':11,'multiline':False]
['text':'   errno = 0;','line_number':12,'multiline':False]
['text':'   i = strtol("3147483647", NULL, 10);','line_number':13,'multiline':False]
['text':'   printf("%d, errno %d\n", i, errno);','line_number':14,'multiline':False]
['text':'   //   32-bit platform: 2147483647, errno 34','line_number':15,'multiline':False]
['text':'   //   64-bit platform: -1147483649, errno 0','line_number':16,'multiline':False]
['text':'','line_number':17,'multiline':False]
['text':'   printf("%d\n", atoi("3147483647"));','line_number':18,'multiline':False]
['text':'   //   32-bit platform: 2147483647','line_number':19,'multiline':False]
['text':'   //   64-bit platform: -1147483649','line_number':20,'multiline':False]
['text':'','line_number':21,'multiline':False]
['text':' A way round this is to define local replacements for these, and use them','line_number':22,'multiline':False]
['text':' instead of the standard libc functions.','line_number':23,'multiline':False]
['text':'','line_number':24,'multiline':False]
['text':' In most 32-bit cases the replacements can be inlined away to a call to the','line_number':25,'multiline':False]
['text':' libc function.  In a couple of 64-bit cases, however, adapters are required,','line_number':26,'multiline':False]
['text':' to provide the right overflow and errno behavior.','line_number':27,'multiline':False]
['text':'','line_number':28,'multiline':False]
['text':' For strtol* functions.','line_number':33,'multiline':False]
['text':' Adapter functions for handling overflow and errno.','line_number':40,'multiline':False]
['text':' Conversions to a 32-bit integer can pass the call to strto[u]l on 32-bit','line_number':44,'multiline':False]
['text':' platforms, but need a little extra work on 64-bit platforms.','line_number':45,'multiline':False]
['text':' For now, long long is 64-bit on all the platforms we care about, so these','line_number':60,'multiline':False]
['text':' functions can simply pass the call to strto[u]ll.','line_number':61,'multiline':False]
['text':' Although it returns an int, atoi() is implemented in terms of strtol, and','line_number':74,'multiline':False]
['text':' so has differing overflow and underflow behavior.  atol is the same.','line_number':75,'multiline':False]
['text':' Convenience versions of the above that take a string argument.','line_number':84,'multiline':False]
['text':' BASE_STRTOINT_H_','line_number':93,'multiline':False]
