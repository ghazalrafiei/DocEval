['text':'*****************************************************************************
  Copyright (c) 2007-2011, Intel Corp.
  All rights reserved.

  Redistribution and use in source and binary forms, with or without 
  modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice, 
      this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright 
      notice, this list of conditions and the following disclaimer in the 
      documentation and/or other materials provided with the distribution.
    * Neither the name of Intel Corporation nor the names of its contributors 
      may be used to endorse or promote products derived from this software 
      without specific prior written permission.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
  THE POSSIBILITY OF SUCH DAMAGE.
*****************************************************************************','line_number':1,'multiline':True]
['text':'****************************************************************************
 *  BID128_nearbyintd
 ***************************************************************************','line_number':34,'multiline':True]
['text':' unbiased exponent','line_number':44,'multiline':False]
['text':' Note: C1.w[1], C1.w[0] represent x_signif_hi, x_signif_lo (all are BID_UINT64)','line_number':45,'multiline':False]
['text':' check for NaN or Infinity','line_number':54,'multiline':False]
['text':' x is special','line_number':56,'multiline':False]
['text':' x is NAN','line_number':57,'multiline':False]
['text':' if x = NaN, then res = Q (x)','line_number':58,'multiline':False]
['text':' check first for non-canonical NaN payload','line_number':59,'multiline':False]
['text':' x is SNAN','line_number':65,'multiline':False]
['text':' set invalid flag','line_number':66,'multiline':False]
['text':' return quiet (x)','line_number':68,'multiline':False]
['text':' clear out also G[6]-G[16]','line_number':69,'multiline':False]
['text':' x is QNaN','line_number':71,'multiline':False]
['text':' return x','line_number':72,'multiline':False]
['text':' clear out G[6]-G[16]','line_number':73,'multiline':False]
['text':' x is not a NaN, so it must be infinity','line_number':77,'multiline':False]
['text':' x is +inf','line_number':78,'multiline':False]
['text':' return +inf','line_number':79,'multiline':False]
['text':' x is -inf ','line_number':82,'multiline':False]
['text':' return -inf','line_number':83,'multiline':False]
['text':' unpack x','line_number':90,'multiline':False]
['text':' 0 for positive, MASK_SIGN for negative','line_number':91,'multiline':False]
['text':' check for non-canonical values (treated as zero)','line_number':95,'multiline':False]
['text':' G0_G1=11','line_number':96,'multiline':False]
['text':' non-canonical','line_number':97,'multiline':False]
['text':' biased and shifted left 49 bits','line_number':98,'multiline':False]
['text':' significand high','line_number':99,'multiline':False]
['text':' significand low','line_number':100,'multiline':False]
['text':' G0_G1 != 11','line_number':101,'multiline':False]
['text':' biased and shifted left 49 bits','line_number':102,'multiline':False]
['text':' x is non-canonical if coefficient is larger than 10^34 -1','line_number':104,'multiline':False]
['text':' canonical','line_number':107,'multiline':False]
['text':' test for input equal to zero','line_number':112,'multiline':False]
['text':' x is 0','line_number':114,'multiline':False]
['text':' return 0 preserving the sign bit and the preferred exponent','line_number':115,'multiline':False]
['text':' of MAX(Q(x), 0)','line_number':116,'multiline':False]
['text':' x is not special and is not zero','line_number':125,'multiline':False]
['text':' if (exp <= -(p+1)) return 0.0','line_number':130,'multiline':False]
['text':' 0x2ffa000000000000ull == -35','line_number':131,'multiline':False]
['text':' if (exp <= -p) return -1.0 or +0.0','line_number':138,'multiline':False]
['text':' 0x2ffa000000000000ull == -34','line_number':139,'multiline':False]
['text':' if negative, return negative 1, because we know coefficient','line_number':141,'multiline':False]
['text':' is non-zero (would have been caught above)','line_number':142,'multiline':False]
['text':' if positive, return positive 0, because we know coefficient is','line_number':146,'multiline':False]
['text':' non-zero (would have been caught above)','line_number':147,'multiline':False]
['text':' if (exp <= -p) return -0.0 or +1.0','line_number':155,'multiline':False]
['text':' 0x2ffc000000000000ull == -34','line_number':156,'multiline':False]
['text':' if negative, return negative 0, because we know the coefficient','line_number':158,'multiline':False]
['text':' is non-zero (would have been caught above)','line_number':159,'multiline':False]
['text':' if positive, return positive 1, because we know coefficient is','line_number':163,'multiline':False]
['text':' non-zero (would have been caught above)','line_number':164,'multiline':False]
['text':' if (exp <= -p) return -0.0 or +0.0','line_number':172,'multiline':False]
['text':' 0x2ffc000000000000ull == -34','line_number':173,'multiline':False]
['text':' q = nr. of decimal digits in x','line_number':181,'multiline':False]
['text':'  determine first the nr. of bits in x','line_number':182,'multiline':False]
['text':' x >= 2^53','line_number':184,'multiline':False]
['text':' split the 64-bit value in two 32-bit halves to avoid rounding errors','line_number':185,'multiline':False]
['text':' exact conversion','line_number':186,'multiline':False]
['text':' if x < 2^53','line_number':188,'multiline':False]
['text':' exact conversion','line_number':189,'multiline':False]
['text':' C1.w[1] != 0 => nr. bits = 64 + nr_bits (C1.w[1])','line_number':192,'multiline':False]
['text':' exact conversion','line_number':193,'multiline':False]
['text':' -exp <= 0','line_number':205,'multiline':False]
['text':' the argument is an integer already','line_number':206,'multiline':False]
['text':' exp < 0','line_number':211,'multiline':False]
['text':' exp < 0 and 1 <= -exp <= q','line_number':214,'multiline':False]
['text':' need to shift right -exp digits from the coefficient; exp will be 0','line_number':215,'multiline':False]
['text':' 1 <= ind <= 34; ind is a synonym for 'x'','line_number':216,'multiline':False]
['text':' chop off ind digits from the lower part of C1 ','line_number':217,'multiline':False]
['text':' C1 = C1 + 1/2 * 10^x where the result C1 fits in 127 bits','line_number':218,'multiline':False]
['text':' calculate C* and f*','line_number':228,'multiline':False]
['text':' C* is actually floor(C*) in this case','line_number':229,'multiline':False]
['text':' C* and f* need shifting and masking, as shown by','line_number':230,'multiline':False]
['text':' bid_shiftright128[] and bid_maskhigh128[]','line_number':231,'multiline':False]
['text':' 1 <= x <= 34','line_number':232,'multiline':False]
['text':' kx = 10^(-x) = bid_ten2mk128[ind - 1]','line_number':233,'multiline':False]
['text':' C* = (C1 + 1/2 * 10^x) * 10^(-x)','line_number':234,'multiline':False]
['text':' the approximation of 10^(-x) was rounded up to 118 bits','line_number':235,'multiline':False]
['text':' determine the value of res and fstar','line_number':237,'multiline':False]
['text':' 0 <= ind - 1 <= 2 => shift = 0','line_number':239,'multiline':False]
['text':' redundant shift = bid_shiftright128[ind - 1]; // shift = 0','line_number':240,'multiline':False]
['text':' redundant fstar.w[3] = 0;','line_number':243,'multiline':False]
['text':' redundant fstar.w[2] = 0;','line_number':244,'multiline':False]
['text':' fraction f* < 10^(-x) <=> midpoint','line_number':247,'multiline':False]
['text':' f* is in the right position to be compared with','line_number':248,'multiline':False]
['text':' 10^(-x) from bid_ten2mk128[]','line_number':249,'multiline':False]
['text':' if 0 < fstar < 10^(-x), subtract 1 if odd (for rounding to even)','line_number':250,'multiline':False]
['text':' is result odd and from a midpoint?','line_number':251,'multiline':False]
['text':' subtract 1 to make even','line_number':255,'multiline':False]
['text':' 3 <= ind - 1 <= 21 => 3 <= shift <= 63','line_number':258,'multiline':False]
['text':' 3 <= shift <= 63','line_number':259,'multiline':False]
['text':' redundant fstar.w[3] = 0;','line_number':262,'multiline':False]
['text':' fraction f* < 10^(-x) <=> midpoint','line_number':266,'multiline':False]
['text':' f* is in the right position to be compared with','line_number':267,'multiline':False]
['text':' 10^(-x) from bid_ten2mk128[]','line_number':268,'multiline':False]
['text':' is result odd and from a midpoint?','line_number':269,'multiline':False]
['text':' subtract 1 to make even','line_number':272,'multiline':False]
['text':' 22 <= ind - 1 <= 33','line_number':275,'multiline':False]
['text':' 2 <= shift <= 38','line_number':276,'multiline':False]
['text':' fraction f* < 10^(-x) <=> midpoint','line_number':283,'multiline':False]
['text':' f* is in the right position to be compared with','line_number':284,'multiline':False]
['text':' 10^(-x) from bid_ten2mk128[]','line_number':285,'multiline':False]
['text':' is result odd and from a midpoint?','line_number':286,'multiline':False]
['text':' subtract 1 to make even','line_number':290,'multiline':False]
['text':' if ((q + exp) < 0) <=> q < -exp','line_number':296,'multiline':False]
['text':' the result is +0 or -0','line_number':297,'multiline':False]
['text':' exp < 0 and 1 <= -exp <= q','line_number':304,'multiline':False]
['text':' need to shift right -exp digits from the coefficient; exp will be 0','line_number':305,'multiline':False]
['text':' 1 <= ind <= 34; ind is a synonym for 'x'','line_number':306,'multiline':False]
['text':' chop off ind digits from the lower part of C1 ','line_number':307,'multiline':False]
['text':' C1 = C1 + 1/2 * 10^x where the result C1 fits in 127 bits','line_number':308,'multiline':False]
['text':' calculate C* and f*','line_number':318,'multiline':False]
['text':' C* is actually floor(C*) in this case','line_number':319,'multiline':False]
['text':' C* and f* need shifting and masking, as shown by','line_number':320,'multiline':False]
['text':' bid_shiftright128[] and bid_maskhigh128[]','line_number':321,'multiline':False]
['text':' 1 <= x <= 34','line_number':322,'multiline':False]
['text':' kx = 10^(-x) = bid_ten2mk128[ind - 1]','line_number':323,'multiline':False]
['text':' C* = (C1 + 1/2 * 10^x) * 10^(-x)','line_number':324,'multiline':False]
['text':' the approximation of 10^(-x) was rounded up to 118 bits','line_number':325,'multiline':False]
['text':' the top Ex bits of 10^(-x) are T* = bid_ten2mk128trunc[ind], e.g.','line_number':327,'multiline':False]
['text':' if x=1, T*=bid_ten2mk128trunc[0]=0x19999999999999999999999999999999','line_number':328,'multiline':False]
['text':' if (0 < f* < 10^(-x)) then the result is a midpoint','line_number':329,'multiline':False]
['text':'   if floor(C*) is even then C* = floor(C*) - logical right','line_number':330,'multiline':False]
['text':'       shift; C* has p decimal digits, correct by Prop. 1)','line_number':331,'multiline':False]
['text':'   else if floor(C*) is odd C* = floor(C*)-1 (logical right','line_number':332,'multiline':False]
['text':'       shift; C* has p decimal digits, correct by Pr. 1)','line_number':333,'multiline':False]
['text':' else','line_number':334,'multiline':False]
['text':'   C* = floor(C*) (logical right shift; C has p decimal digits,','line_number':335,'multiline':False]
['text':'       correct by Property 1)','line_number':336,'multiline':False]
['text':' n = C* * 10^(e+x)','line_number':337,'multiline':False]
['text':' 0 <= ind - 1 <= 2 => shift = 0','line_number':339,'multiline':False]
['text':' redundant shift = bid_shiftright128[ind - 1]; // shift = 0','line_number':340,'multiline':False]
['text':' redundant fstar.w[3] = 0;','line_number':343,'multiline':False]
['text':' redundant fstar.w[2] = 0;','line_number':344,'multiline':False]
['text':' 3 <= ind - 1 <= 21 => 3 <= shift <= 63','line_number':345,'multiline':False]
['text':' 3 <= shift <= 63','line_number':346,'multiline':False]
['text':' redundant fstar.w[3] = 0;','line_number':349,'multiline':False]
['text':' 22 <= ind - 1 <= 33','line_number':350,'multiline':False]
['text':' 2 <= shift <= 38','line_number':351,'multiline':False]
['text':' if the result was a midpoint, it was already rounded away from zero','line_number':355,'multiline':False]
['text':' if ((q + exp) < 0) <=> q < -exp','line_number':358,'multiline':False]
['text':' the result is +0 or -0','line_number':359,'multiline':False]
['text':' exp < 0 and 1 <= -exp < q','line_number':366,'multiline':False]
['text':' need to shift right -exp digits from the coefficient; exp will be 0','line_number':367,'multiline':False]
['text':' 1 <= ind <= 34; ind is a synonym for 'x' ','line_number':368,'multiline':False]
['text':' (number of digits to be chopped off)','line_number':369,'multiline':False]
['text':' chop off ind digits from the lower part of C1 ','line_number':370,'multiline':False]
['text':' FOR ROUND_TO_NEAREST, WE ADD 1/2 ULP(y) then truncate','line_number':371,'multiline':False]
['text':' FOR ROUND_TO_ZERO, WE DON'T NEED TO ADD 1/2 ULP','line_number':372,'multiline':False]
['text':' FOR ROUND_TO_POSITIVE_INFINITY, WE TRUNCATE, THEN ADD 1 IF POSITIVE','line_number':373,'multiline':False]
['text':' FOR ROUND_TO_NEGATIVE_INFINITY, WE TRUNCATE, THEN ADD 1 IF NEGATIVE','line_number':374,'multiline':False]
['text':' tmp64 = C1.w[0];','line_number':375,'multiline':False]
['text':' if (ind <= 19) {','line_number':376,'multiline':False]
['text':'   C1.w[0] = C1.w[0] + bid_midpoint64[ind - 1];','line_number':377,'multiline':False]
['text':' } else {','line_number':378,'multiline':False]
['text':'   C1.w[0] = C1.w[0] + bid_midpoint128[ind - 20].w[0];','line_number':379,'multiline':False]
['text':'   C1.w[1] = C1.w[1] + bid_midpoint128[ind - 20].w[1];','line_number':380,'multiline':False]
['text':' }','line_number':381,'multiline':False]
['text':' if (C1.w[0] < tmp64) C1.w[1]++;','line_number':382,'multiline':False]
['text':' if carry-out from C1.w[0], increment C1.w[1]','line_number':383,'multiline':False]
['text':' calculate C* and f*','line_number':384,'multiline':False]
['text':' C* is actually floor(C*) in this case','line_number':385,'multiline':False]
['text':' C* and f* need shifting and masking, as shown by','line_number':386,'multiline':False]
['text':' bid_shiftright128[] and bid_maskhigh128[]','line_number':387,'multiline':False]
['text':' 1 <= x <= 34','line_number':388,'multiline':False]
['text':' kx = 10^(-x) = bid_ten2mk128[ind - 1]','line_number':389,'multiline':False]
['text':' C* = (C1 + 1/2 * 10^x) * 10^(-x)','line_number':390,'multiline':False]
['text':' the approximation of 10^(-x) was rounded up to 118 bits','line_number':391,'multiline':False]
['text':' 0 <= ind - 1 <= 2 => shift = 0','line_number':393,'multiline':False]
['text':' redundant fstar.w[3] = 0;','line_number':396,'multiline':False]
['text':' redundant fstar.w[2] = 0;','line_number':397,'multiline':False]
['text':' redundant fstar.w[1] = P256.w[1];','line_number':398,'multiline':False]
['text':' redundant fstar.w[0] = P256.w[0];','line_number':399,'multiline':False]
['text':' f* is in the right position to be compared with','line_number':400,'multiline':False]
['text':' 10^(-x) from bid_ten2mk128[]','line_number':401,'multiline':False]
['text':' if positive, the truncated value is already the correct result','line_number':405,'multiline':False]
['text':' if negative','line_number':406,'multiline':False]
['text':' 3 <= ind - 1 <= 21 => 3 <= shift <= 63','line_number':412,'multiline':False]
['text':' 0 <= shift <= 102','line_number':413,'multiline':False]
['text':' redundant fstar.w[3] = 0;','line_number':416,'multiline':False]
['text':' f* is in the right position to be compared with','line_number':420,'multiline':False]
['text':' 10^(-x) from bid_ten2mk128[]','line_number':421,'multiline':False]
['text':' if positive, the truncated value is already the correct result','line_number':424,'multiline':False]
['text':' if negative','line_number':425,'multiline':False]
['text':' 22 <= ind - 1 <= 33','line_number':431,'multiline':False]
['text':' 2 <= shift <= 38','line_number':432,'multiline':False]
['text':' f* is in the right position to be compared with','line_number':439,'multiline':False]
['text':' 10^(-x) from bid_ten2mk128[]','line_number':440,'multiline':False]
['text':' if positive, the truncated value is already the correct result','line_number':445,'multiline':False]
['text':' if negative','line_number':446,'multiline':False]
['text':' if exp < 0 and q + exp <= 0','line_number':455,'multiline':False]
['text':' negative rounds down to -1.0','line_number':456,'multiline':False]
['text':' positive rpunds down to +0.0','line_number':459,'multiline':False]
['text':' exp < 0 and 1 <= -exp < q','line_number':467,'multiline':False]
['text':' need to shift right -exp digits from the coefficient; exp will be 0','line_number':468,'multiline':False]
['text':' 1 <= ind <= 34; ind is a synonym for 'x' ','line_number':469,'multiline':False]
['text':' (number of digits to be chopped off)','line_number':470,'multiline':False]
['text':' chop off ind digits from the lower part of C1 ','line_number':471,'multiline':False]
['text':' FOR ROUND_TO_NEAREST, WE ADD 1/2 ULP(y) then truncate','line_number':472,'multiline':False]
['text':' FOR ROUND_TO_ZERO, WE DON'T NEED TO ADD 1/2 ULP','line_number':473,'multiline':False]
['text':' FOR ROUND_TO_POSITIVE_INFINITY, WE TRUNCATE, THEN ADD 1 IF POSITIVE','line_number':474,'multiline':False]
['text':' FOR ROUND_TO_NEGATIVE_INFINITY, WE TRUNCATE, THEN ADD 1 IF NEGATIVE','line_number':475,'multiline':False]
['text':' tmp64 = C1.w[0];','line_number':476,'multiline':False]
['text':' if (ind <= 19) {','line_number':477,'multiline':False]
['text':'   C1.w[0] = C1.w[0] + bid_midpoint64[ind - 1];','line_number':478,'multiline':False]
['text':' } else {','line_number':479,'multiline':False]
['text':'   C1.w[0] = C1.w[0] + bid_midpoint128[ind - 20].w[0];','line_number':480,'multiline':False]
['text':'   C1.w[1] = C1.w[1] + bid_midpoint128[ind - 20].w[1];','line_number':481,'multiline':False]
['text':' }','line_number':482,'multiline':False]
['text':' if (C1.w[0] < tmp64) C1.w[1]++;  ','line_number':483,'multiline':False]
['text':' if carry-out from C1.w[0], increment C1.w[1]','line_number':484,'multiline':False]
['text':' calculate C* and f*','line_number':485,'multiline':False]
['text':' C* is actually floor(C*) in this case','line_number':486,'multiline':False]
['text':' C* and f* need shifting and masking, as shown by','line_number':487,'multiline':False]
['text':' bid_shiftright128[] and bid_maskhigh128[]','line_number':488,'multiline':False]
['text':' 1 <= x <= 34','line_number':489,'multiline':False]
['text':' kx = 10^(-x) = bid_ten2mk128[ind - 1]','line_number':490,'multiline':False]
['text':' C* = C1 * 10^(-x)','line_number':491,'multiline':False]
['text':' the approximation of 10^(-x) was rounded up to 118 bits','line_number':492,'multiline':False]
['text':' 0 <= ind - 1 <= 2 => shift = 0','line_number':494,'multiline':False]
['text':' redundant fstar.w[3] = 0;','line_number':497,'multiline':False]
['text':' redundant fstar.w[2] = 0;','line_number':498,'multiline':False]
['text':' redundant fstar.w[1] = P256.w[1]; ','line_number':499,'multiline':False]
['text':' redundant fstar.w[0] = P256.w[0];','line_number':500,'multiline':False]
['text':' f* is in the right position to be compared with ','line_number':501,'multiline':False]
['text':' 10^(-x) from bid_ten2mk128[]','line_number':502,'multiline':False]
['text':' if negative, the truncated value is already the correct result','line_number':506,'multiline':False]
['text':' if positive','line_number':507,'multiline':False]
['text':' 3 <= ind - 1 <= 21 => 3 <= shift <= 63','line_number':513,'multiline':False]
['text':' 3 <= shift <= 63','line_number':514,'multiline':False]
['text':' redundant fstar.w[3] = 0;','line_number':517,'multiline':False]
['text':' f* is in the right position to be compared with ','line_number':521,'multiline':False]
['text':' 10^(-x) from bid_ten2mk128[]','line_number':522,'multiline':False]
['text':' if negative, the truncated value is already the correct result','line_number':525,'multiline':False]
['text':' if positive','line_number':526,'multiline':False]
['text':' 22 <= ind - 1 <= 33','line_number':532,'multiline':False]
['text':' 2 <= shift <= 38','line_number':533,'multiline':False]
['text':' f* is in the right position to be compared with ','line_number':540,'multiline':False]
['text':' 10^(-x) from bid_ten2mk128[]','line_number':541,'multiline':False]
['text':' if negative, the truncated value is already the correct result','line_number':546,'multiline':False]
['text':' if positive','line_number':547,'multiline':False]
['text':' if exp < 0 and q + exp <= 0','line_number':556,'multiline':False]
['text':' negative rounds up to -0.0','line_number':557,'multiline':False]
['text':' positive rpunds up to +1.0','line_number':560,'multiline':False]
['text':' exp < 0 and 1 <= -exp < q','line_number':568,'multiline':False]
['text':' need to shift right -exp digits from the coefficient; exp will be 0','line_number':569,'multiline':False]
['text':' 1 <= ind <= 34; ind is a synonym for 'x'','line_number':570,'multiline':False]
['text':' (number of digits to be chopped off)','line_number':571,'multiline':False]
['text':' chop off ind digits from the lower part of C1 ','line_number':572,'multiline':False]
['text':' FOR ROUND_TO_NEAREST, WE ADD 1/2 ULP(y) then truncate','line_number':573,'multiline':False]
['text':' FOR ROUND_TO_ZERO, WE DON'T NEED TO ADD 1/2 ULP','line_number':574,'multiline':False]
['text':' FOR ROUND_TO_POSITIVE_INFINITY, WE TRUNCATE, THEN ADD 1 IF POSITIVE','line_number':575,'multiline':False]
['text':' FOR ROUND_TO_NEGATIVE_INFINITY, WE TRUNCATE, THEN ADD 1 IF NEGATIVE','line_number':576,'multiline':False]
['text':'tmp64 = C1.w[0];','line_number':577,'multiline':False]
['text':' if (ind <= 19) {','line_number':578,'multiline':False]
['text':'   C1.w[0] = C1.w[0] + bid_midpoint64[ind - 1];','line_number':579,'multiline':False]
['text':' } else {','line_number':580,'multiline':False]
['text':'   C1.w[0] = C1.w[0] + bid_midpoint128[ind - 20].w[0];','line_number':581,'multiline':False]
['text':'   C1.w[1] = C1.w[1] + bid_midpoint128[ind - 20].w[1];','line_number':582,'multiline':False]
['text':' }','line_number':583,'multiline':False]
['text':' if (C1.w[0] < tmp64) C1.w[1]++;  ','line_number':584,'multiline':False]
['text':' if carry-out from C1.w[0], increment C1.w[1]','line_number':585,'multiline':False]
['text':' calculate C* and f*','line_number':586,'multiline':False]
['text':' C* is actually floor(C*) in this case','line_number':587,'multiline':False]
['text':' C* and f* need shifting and masking, as shown by','line_number':588,'multiline':False]
['text':' bid_shiftright128[] and bid_maskhigh128[]','line_number':589,'multiline':False]
['text':' 1 <= x <= 34','line_number':590,'multiline':False]
['text':' kx = 10^(-x) = bid_ten2mk128[ind - 1]','line_number':591,'multiline':False]
['text':' C* = (C1 + 1/2 * 10^x) * 10^(-x)','line_number':592,'multiline':False]
['text':' the approximation of 10^(-x) was rounded up to 118 bits','line_number':593,'multiline':False]
['text':' 0 <= ind - 1 <= 2 => shift = 0','line_number':595,'multiline':False]
['text':' redundant fstar.w[3] = 0;','line_number':598,'multiline':False]
['text':' redundant fstar.w[2] = 0;','line_number':599,'multiline':False]
['text':' redundant fstar.w[1] = P256.w[1]; ','line_number':600,'multiline':False]
['text':' redundant fstar.w[0] = P256.w[0];','line_number':601,'multiline':False]
['text':' 3 <= ind - 1 <= 21 => 3 <= shift <= 63','line_number':602,'multiline':False]
['text':' 3 <= shift <= 63','line_number':603,'multiline':False]
['text':' redundant fstar.w[3] = 0;','line_number':606,'multiline':False]
['text':' 22 <= ind - 1 <= 33','line_number':607,'multiline':False]
['text':' 2 <= shift <= 38','line_number':608,'multiline':False]
['text':' if exp < 0 and q + exp <= 0 the result is +0 or -0','line_number':614,'multiline':False]
