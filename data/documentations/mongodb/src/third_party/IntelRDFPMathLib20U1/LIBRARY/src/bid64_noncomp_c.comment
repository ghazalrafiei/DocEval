['text':'*****************************************************************************
  Copyright (c) 2007-2011, Intel Corp.
  All rights reserved.

  Redistribution and use in source and binary forms, with or without 
  modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice, 
      this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright 
      notice, this list of conditions and the following disclaimer in the 
      documentation and/or other materials provided with the distribution.
    * Neither the name of Intel Corporation nor the names of its contributors 
      may be used to endorse or promote products derived from this software 
      without specific prior written permission.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
  THE POSSIBILITY OF SUCH DAMAGE.
*****************************************************************************','line_number':1,'multiline':True]
['text':'****************************************************************************
 *    BID64 non-computational functions:
 *         - bid64_isSigned
 *         - bid64_isNormal
 *         - bid64_isSubnormal
 *         - bid64_isFinite
 *         - bid64_isZero
 *         - bid64_isInf
 *         - bid64_isSignaling
 *         - bid64_isCanonical
 *         - bid64_isNaN
 *         - bid64_copy
 *         - bid64_negate
 *         - bid64_abs
 *         - bid64_copySign
 *         - bid64_class
 *         - bid64_sameQuantum
 *         - bid64_totalOrder
 *         - bid64_totalOrderMag
 *         - bid64_radix
 ***************************************************************************','line_number':40,'multiline':True]
['text':' return 1 iff x is not zero, nor NaN nor subnormal nor infinity','line_number':77,'multiline':False]
['text':' x is either INF or NaN','line_number':92,'multiline':False]
['text':' decode number into exponent and significand','line_number':95,'multiline':False]
['text':' check for zero or non-canonical','line_number':98,'multiline':False]
['text':' zero or non-canonical','line_number':100,'multiline':False]
['text':' zero','line_number':107,'multiline':False]
['text':' if exponent is less than -383, the number may be subnormal','line_number':112,'multiline':False]
['text':' if (exp_x - 398 = -383) the number may be subnormal','line_number':113,'multiline':False]
['text':' subnormal','line_number':118,'multiline':False]
['text':' normal','line_number':120,'multiline':False]
['text':' normal','line_number':123,'multiline':False]
['text':' return 1 iff x is not zero, nor NaN nor normal nor infinity','line_number':129,'multiline':False]
['text':' x is either INF or NaN','line_number':145,'multiline':False]
['text':' decode number into exponent and significand','line_number':148,'multiline':False]
['text':' check for zero or non-canonical','line_number':151,'multiline':False]
['text':' zero or non-canonical','line_number':153,'multiline':False]
['text':' zero','line_number':160,'multiline':False]
['text':' if exponent is less than -383, the number may be subnormal','line_number':165,'multiline':False]
['text':' if (exp_x - 398 = -383) the number may be subnormal','line_number':166,'multiline':False]
['text':' subnormal','line_number':171,'multiline':False]
['text':' normal','line_number':173,'multiline':False]
['text':' normal','line_number':176,'multiline':False]
['text':'iff x is zero, subnormal or normal (not infinity or NaN)','line_number':182,'multiline':False]
['text':' if infinity or nan, return 0','line_number':209,'multiline':False]
['text':' if steering bits are 11 (condition will be 0), then exponent is G[0:w+1]','line_number':213,'multiline':False]
['text':' => sig_x = (x & MASK_BINARY_SIG2) | MASK_BINARY_OR2;','line_number':214,'multiline':False]
['text':' if(sig_x > 9999999999999999ull) {return 1;}','line_number':215,'multiline':False]
['text':' NaN','line_number':268,'multiline':False]
['text':' payload','line_number':271,'multiline':False]
['text':' 54-bit coeff.','line_number':282,'multiline':False]
['text':' 53-bit coeff.','line_number':286,'multiline':False]
['text':' copies a floating-point operand x to destination y, with no change','line_number':307,'multiline':False]
['text':' copies a floating-point operand x to destination y, reversing the sign','line_number':323,'multiline':False]
['text':' copies a floating-point operand x to destination y, changing the sign to positive','line_number':340,'multiline':False]
['text':' copies operand x to destination in the same format as x, but ','line_number':356,'multiline':False]
['text':' with the sign of y','line_number':357,'multiline':False]
['text':' is the NaN signaling?','line_number':390,'multiline':False]
['text':' if NaN and not signaling, must be quietNaN','line_number':395,'multiline':False]
['text':' is the Infinity negative?','line_number':399,'multiline':False]
['text':' otherwise, must be positive infinity','line_number':403,'multiline':False]
['text':' decode number into exponent and significand','line_number':408,'multiline':False]
['text':' check for zero or non-canonical','line_number':410,'multiline':False]
['text':' if exponent is less than -383, number may be subnormal','line_number':429,'multiline':False]
['text':'  if (exp_x - 398 < -383)','line_number':430,'multiline':False]
['text':' sig_x *10^exp_x','line_number':431,'multiline':False]
['text':' otherwise, normal number, determine the sign','line_number':441,'multiline':False]
['text':' true if the exponents of x and y are the same, false otherwise.','line_number':447,'multiline':False]
['text':' The special cases of sameQuantum (NaN, NaN) and sameQuantum (Inf, Inf) are ','line_number':448,'multiline':False]
['text':' true.','line_number':449,'multiline':False]
['text':' If exactly one operand is infinite or exactly one operand is NaN, then false','line_number':450,'multiline':False]
['text':' if both operands are NaN, return true; if just one is NaN, return false','line_number':465,'multiline':False]
['text':' if both operands are INF, return true; if just one is INF, return false','line_number':470,'multiline':False]
['text':' decode exponents for both numbers, and return true if they match','line_number':475,'multiline':False]
['text':' NaN (CASE1)','line_number':507,'multiline':False]
['text':' if x and y are unordered numerically because either operand is NaN','line_number':508,'multiline':False]
['text':'    (1) totalOrder(-NaN, number) is true','line_number':509,'multiline':False]
['text':'    (2) totalOrder(number, +NaN) is true','line_number':510,'multiline':False]
['text':'    (3) if x and y are both NaN:','line_number':511,'multiline':False]
['text':'           i) negative sign bit < positive sign bit','line_number':512,'multiline':False]
['text':'           ii) signaling < quiet for +NaN, reverse for -NaN','line_number':513,'multiline':False]
['text':'           iii) lesser payload < greater payload for +NaN (reverse for -NaN)','line_number':514,'multiline':False]
['text':'           iv) else if bitwise identical (in canonical form), return 1','line_number':515,'multiline':False]
['text':' if x is -NaN','line_number':517,'multiline':False]
['text':' return true, unless y is -NaN also','line_number':519,'multiline':False]
['text':' y is a number, return 1','line_number':521,'multiline':False]
['text':' if y and x are both -NaN','line_number':523,'multiline':False]
['text':' if x and y are both -sNaN or both -qNaN, we have to compare payloads','line_number':524,'multiline':False]
['text':' this xnor statement evaluates to true if both are sNaN or qNaN','line_number':525,'multiline':False]
['text':' it comes down to the payload.  we want to return true if x has a','line_number':529,'multiline':False]
['text':' larger payload, or if the payloads are equal (canonical forms','line_number':530,'multiline':False]
['text':' are bitwise identical)','line_number':531,'multiline':False]
['text':' if y is zero, x must be less than or numerically equal','line_number':535,'multiline':False]
['text':' y's payload is 0','line_number':536,'multiline':False]
['text':' if x is zero and y isn't, x has the smaller payload','line_number':540,'multiline':False]
['text':' definitely (since we know y isn't 0 at this point)','line_number':541,'multiline':False]
['text':' x's payload is 0','line_number':543,'multiline':False]
['text':' either x = -sNaN and y = -qNaN or x = -qNaN and y = -sNaN','line_number':550,'multiline':False]
['text':' totalOrder(-qNaN, -sNaN) == 1','line_number':551,'multiline':False]
['text':' x is +NaN','line_number':555,'multiline':False]
['text':' return false, unless y is +NaN also','line_number':556,'multiline':False]
['text':' y is a number, return 1','line_number':558,'multiline':False]
['text':' x and y are both +NaN; ','line_number':561,'multiline':False]
['text':' must investigate payload if both quiet or both signaling','line_number':562,'multiline':False]
['text':' this xnor statement will be true if both x and y are +qNaN or +sNaN','line_number':563,'multiline':False]
['text':' it comes down to the payload.  we want to return true if x has a','line_number':567,'multiline':False]
['text':' smaller payload, or if the payloads are equal (canonical forms','line_number':568,'multiline':False]
['text':' are bitwise identical)','line_number':569,'multiline':False]
['text':' if x is zero and y isn't, x has the smaller ','line_number':572,'multiline':False]
['text':' payload definitely (since we know y isn't 0 at this point)','line_number':573,'multiline':False]
['text':' if y is zero, x must be less than or numerically equal','line_number':579,'multiline':False]
['text':' return true if y is +qNaN and x is +sNaN ','line_number':586,'multiline':False]
['text':' (we know they're different bc of xor if_stmt above)','line_number':587,'multiline':False]
['text':' x is certainly not NAN in this case.','line_number':594,'multiline':False]
['text':' return true if y is positive','line_number':595,'multiline':False]
['text':' SIMPLE (CASE2)','line_number':599,'multiline':False]
['text':' if all the bits are the same, these numbers are equal.','line_number':600,'multiline':False]
['text':' OPPOSITE SIGNS (CASE 3)','line_number':605,'multiline':False]
['text':' if signs are opposite, return 1 if x is negative ','line_number':606,'multiline':False]
['text':' (if x<y, totalOrder is true)','line_number':607,'multiline':False]
['text':' INFINITY (CASE4)','line_number':612,'multiline':False]
['text':' if x==neg_inf, return (y == neg_inf)?1:0;','line_number':614,'multiline':False]
['text':' x is positive infinity, only return1 if y ','line_number':619,'multiline':False]
['text':' is positive infinity as well','line_number':620,'multiline':False]
['text':' (we know y has same sign as x)','line_number':621,'multiline':False]
['text':' x is finite, so:','line_number':626,'multiline':False]
['text':'    if y is +inf, x<y','line_number':627,'multiline':False]
['text':'    if y is -inf, x>y','line_number':628,'multiline':False]
['text':' if steering bits are 11 (condition will be 0), then exponent is G[0:w+1] =>','line_number':632,'multiline':False]
['text':' if steering bits are 11 (condition will be 0), then exponent is G[0:w+1] =>','line_number':647,'multiline':False]
['text':' ZERO (CASE 5)','line_number':662,'multiline':False]
['text':' if x and y represent the same entities, and ','line_number':663,'multiline':False]
['text':' both are negative , return true iff exp_x <= exp_y','line_number':664,'multiline':False]
['text':' if signs are the same:','line_number':668,'multiline':False]
['text':' totalOrder(x,y) iff exp_x >= exp_y for negative numbers','line_number':669,'multiline':False]
['text':' totalOrder(x,y) iff exp_x <= exp_y for positive numbers','line_number':670,'multiline':False]
['text':' signs are different.','line_number':678,'multiline':False]
['text':' totalOrder(-0, +0) is true','line_number':679,'multiline':False]
['text':' totalOrder(+0, -0) is false','line_number':680,'multiline':False]
['text':' if x is zero and y isn't, clearly x has the smaller payload.','line_number':685,'multiline':False]
['text':' if y is zero, and x isn't, clearly y has the smaller payload.','line_number':690,'multiline':False]
['text':' REDUNDANT REPRESENTATIONS (CASE6)','line_number':695,'multiline':False]
['text':' if both components are either bigger or smaller, ','line_number':696,'multiline':False]
['text':' it is clear what needs to be done','line_number':697,'multiline':False]
['text':' if exp_x is 15 greater than exp_y, it is ','line_number':706,'multiline':False]
['text':' definitely larger, so no need for compensation','line_number':707,'multiline':False]
['text':' difference cannot be greater than 10^15','line_number':709,'multiline':False]
['text':' if exp_x is 15 less than exp_y, it is ','line_number':713,'multiline':False]
['text':' definitely smaller, no need for compensation','line_number':714,'multiline':False]
['text':' if |exp_x - exp_y| < 15, it comes down ','line_number':719,'multiline':False]
['text':' to the compensated significand','line_number':720,'multiline':False]
['text':' otherwise adjust the x significand upwards','line_number':722,'multiline':False]
['text':' if x and y represent the same entities, ','line_number':725,'multiline':False]
['text':' and both are negative, return true iff exp_x <= exp_y','line_number':726,'multiline':False]
['text':' case cannot occure, because all bits must ','line_number':728,'multiline':False]
['text':' be the same - would have been caught if (x==y)','line_number':729,'multiline':False]
['text':' if positive, return 1 if adjusted x is smaller than y','line_number':733,'multiline':False]
['text':' adjust the y significand upwards','line_number':739,'multiline':False]
['text':' if x and y represent the same entities, ','line_number':743,'multiline':False]
['text':' and both are negative, return true iff exp_x <= exp_y','line_number':744,'multiline':False]
['text':' Cannot occur, because all bits must be the same. ','line_number':746,'multiline':False]
['text':' Case would have been caught if (x==y)','line_number':747,'multiline':False]
['text':' values are not equal, for positive numbers return 1 ','line_number':751,'multiline':False]
['text':' if x is less than y.  0 otherwise','line_number':752,'multiline':False]
['text':' totalOrderMag is TotalOrder(abs(x), abs(y))','line_number':759,'multiline':False]
['text':' NaN (CASE 1)','line_number':778,'multiline':False]
['text':' if x and y are unordered numerically because either operand is NaN','line_number':779,'multiline':False]
['text':'    (1) totalOrder(number, +NaN) is true','line_number':780,'multiline':False]
['text':'    (2) if x and y are both NaN:','line_number':781,'multiline':False]
['text':'       i) signaling < quiet for +NaN','line_number':782,'multiline':False]
['text':'       ii) lesser payload < greater payload for +NaN','line_number':783,'multiline':False]
['text':'       iii) else if bitwise identical (in canonical form), return 1','line_number':784,'multiline':False]
['text':' x is +NaN','line_number':786,'multiline':False]
['text':' return false, unless y is +NaN also','line_number':788,'multiline':False]
['text':' y is a number, return 1','line_number':790,'multiline':False]
['text':' x and y are both +NaN; ','line_number':795,'multiline':False]
['text':' must investigate payload if both quiet or both signaling','line_number':796,'multiline':False]
['text':' this xnor statement will be true if both x and y are +qNaN or +sNaN','line_number':797,'multiline':False]
['text':' it comes down to the payload.  we want to return true if x has a','line_number':801,'multiline':False]
['text':' smaller payload, or if the payloads are equal (canonical forms','line_number':802,'multiline':False]
['text':' are bitwise identical)','line_number':803,'multiline':False]
['text':' if x is zero and y isn't, x has the smaller ','line_number':806,'multiline':False]
['text':' payload definitely (since we know y isn't 0 at this point)','line_number':807,'multiline':False]
['text':' if y is zero, x must be less than or numerically equal','line_number':814,'multiline':False]
['text':' return true if y is +qNaN and x is +sNaN ','line_number':822,'multiline':False]
['text':' (we know they're different bc of xor if_stmt above)','line_number':823,'multiline':False]
['text':' x is certainly not NAN in this case.','line_number':830,'multiline':False]
['text':' return true if y is positive','line_number':831,'multiline':False]
['text':' SIMPLE (CASE2)','line_number':835,'multiline':False]
['text':' if all the bits (except sign bit) are the same, ','line_number':836,'multiline':False]
['text':' these numbers are equal.','line_number':837,'multiline':False]
['text':' INFINITY (CASE3)','line_number':842,'multiline':False]
['text':' x is positive infinity, only return1 ','line_number':844,'multiline':False]
['text':' if y is positive infinity as well','line_number':845,'multiline':False]
['text':' x is finite, so:','line_number':849,'multiline':False]
['text':'    if y is +inf, x<y','line_number':850,'multiline':False]
['text':' if steering bits are 11 (condition will be 0), ','line_number':854,'multiline':False]
['text':' then exponent is G[0:w+1] =>','line_number':855,'multiline':False]
['text':' if steering bits are 11 (condition will be 0), ','line_number':870,'multiline':False]
['text':' then exponent is G[0:w+1] =>','line_number':871,'multiline':False]
['text':' ZERO (CASE 5)','line_number':886,'multiline':False]
['text':' if x and y represent the same entities, ','line_number':887,'multiline':False]
['text':' and both are negative , return true iff exp_x <= exp_y','line_number':888,'multiline':False]
['text':' totalOrder(x,y) iff exp_x <= exp_y for positive numbers','line_number':890,'multiline':False]
['text':' if x is zero and y isn't, clearly x has the smaller payload.','line_number':894,'multiline':False]
['text':' if y is zero, and x isn't, clearly y has the smaller payload.','line_number':899,'multiline':False]
['text':' REDUNDANT REPRESENTATIONS (CASE6)','line_number':904,'multiline':False]
['text':' if both components are either bigger or smaller','line_number':905,'multiline':False]
['text':' if exp_x is 15 greater than exp_y, it is definitely ','line_number':914,'multiline':False]
['text':' larger, so no need for compensation','line_number':915,'multiline':False]
['text':' difference cannot be greater than 10^15','line_number':917,'multiline':False]
['text':' if exp_x is 15 less than exp_y, it is definitely ','line_number':920,'multiline':False]
['text':' smaller, no need for compensation','line_number':921,'multiline':False]
['text':' if |exp_x - exp_y| <= 15, it comes down ','line_number':926,'multiline':False]
['text':' to the compensated significand','line_number':927,'multiline':False]
['text':' otherwise adjust the x significand upwards','line_number':930,'multiline':False]
['text':' if x and y represent the same entities, ','line_number':934,'multiline':False]
['text':' and both are negative, return true iff exp_x <= exp_y','line_number':935,'multiline':False]
['text':' case cannot occur, because all bits ','line_number':937,'multiline':False]
['text':' must be the same - would have been caught if (x==y)','line_number':938,'multiline':False]
['text':' res = (exp_x <= exp_y); but exp_x > exp_y','line_number':939,'multiline':False]
['text':' if positive, return 1 if adjusted x is smaller than y','line_number':942,'multiline':False]
['text':' from this point on -15 <= exp_x - exp_y <= 0','line_number':945,'multiline':False]
['text':' adjust the y significand upwards','line_number':946,'multiline':False]
['text':' if x and y represent the same entities, ','line_number':950,'multiline':False]
['text':' and both are negative, return true iff exp_x <= exp_y','line_number':951,'multiline':False]
['text':' res = (exp_x <= exp_y); but -15 <= exp_x - exp_y <= 0','line_number':953,'multiline':False]
['text':' values are not equal, for positive numbers ','line_number':956,'multiline':False]
['text':' return 1 if x is less than y.  0 otherwise','line_number':957,'multiline':False]
['text':' dummy test','line_number':973,'multiline':False]
['text':' +inf','line_number':987,'multiline':False]
['text':' +QNaN','line_number':1007,'multiline':False]
['text':' valid values fit in 50 bits','line_number':1015,'multiline':False]
