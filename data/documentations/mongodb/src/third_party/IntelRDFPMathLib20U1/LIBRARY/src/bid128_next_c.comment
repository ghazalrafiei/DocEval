['text':'*****************************************************************************
  Copyright (c) 2007-2011, Intel Corp.
  All rights reserved.

  Redistribution and use in source and binary forms, with or without 
  modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice, 
      this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright 
      notice, this list of conditions and the following disclaimer in the 
      documentation and/or other materials provided with the distribution.
    * Neither the name of Intel Corporation nor the names of its contributors 
      may be used to endorse or promote products derived from this software 
      without specific prior written permission.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
  THE POSSIBILITY OF SUCH DAMAGE.
*****************************************************************************','line_number':1,'multiline':True]
['text':'****************************************************************************
 *  BID128 nextup
 ***************************************************************************','line_number':33,'multiline':True]
['text':' C1.w[1], C1.w[0] represent x_signif_hi, x_signif_lo (BID_UINT64)','line_number':46,'multiline':False]
['text':'BID_SWAP128 (x);','line_number':48,'multiline':False]
['text':' unpack the argument','line_number':49,'multiline':False]
['text':' 0 for positive, MASK_SIGN for negative','line_number':50,'multiline':False]
['text':' check for NaN or Infinity','line_number':54,'multiline':False]
['text':' x is special','line_number':56,'multiline':False]
['text':' x is NAN','line_number':57,'multiline':False]
['text':' if x = NaN, then res = Q (x)','line_number':58,'multiline':False]
['text':' check first for non-canonical NaN payload','line_number':59,'multiline':False]
['text':' x is SNAN','line_number':66,'multiline':False]
['text':' set invalid flag','line_number':67,'multiline':False]
['text':' return quiet (x)','line_number':69,'multiline':False]
['text':' clear out also G[6]-G[16]','line_number':70,'multiline':False]
['text':' x is QNaN','line_number':72,'multiline':False]
['text':' return x','line_number':73,'multiline':False]
['text':' clear out G[6]-G[16]','line_number':74,'multiline':False]
['text':' x is not NaN, so it must be infinity','line_number':77,'multiline':False]
['text':' x is +inf','line_number':78,'multiline':False]
['text':' +inf','line_number':79,'multiline':False]
['text':' x is -inf','line_number':81,'multiline':False]
['text':' -MAXFP = -999...99 * 10^emax','line_number':82,'multiline':False]
['text':' check for non-canonical values (treated as zero)','line_number':88,'multiline':False]
['text':' G0_G1=11','line_number':89,'multiline':False]
['text':' non-canonical','line_number':90,'multiline':False]
['text':' biased and shifted left 49 bits','line_number':91,'multiline':False]
['text':' significand high','line_number':92,'multiline':False]
['text':' significand low','line_number':93,'multiline':False]
['text':' G0_G1 != 11','line_number':94,'multiline':False]
['text':' biased and shifted left 49 bits','line_number':95,'multiline':False]
['text':' x is non-canonical if coefficient is larger than 10^34 -1','line_number':99,'multiline':False]
['text':' canonical','line_number':102,'multiline':False]
['text':' x is +/-0','line_number':108,'multiline':False]
['text':' +1 * 10^emin','line_number':109,'multiline':False]
['text':' x is not special and is not zero','line_number':111,'multiline':False]
['text':' x = +MAXFP = 999...99 * 10^emax','line_number':114,'multiline':False]
['text':' +inf','line_number':115,'multiline':False]
['text':' x = -MINFP = 1...99 * 10^emin','line_number':119,'multiline':False]
['text':' -0','line_number':120,'multiline':False]
['text':' -MAXFP <= x <= -MINFP - 1 ulp OR MINFP <= x <= MAXFP - 1 ulp','line_number':122,'multiline':False]
['text':' can add/subtract 1 ulp to the significand','line_number':123,'multiline':False]
['text':' Note: we could check here if x >= 10^34 to speed up the case q1 = 34','line_number':125,'multiline':False]
['text':' q1 = nr. of decimal digits in x','line_number':126,'multiline':False]
['text':' determine first the nr. of bits in x','line_number':127,'multiline':False]
['text':' x >= 2^53','line_number':129,'multiline':False]
['text':' split the 64-bit value in two 32-bit halves to avoid rnd errors','line_number':130,'multiline':False]
['text':' x >= 2^32','line_number':131,'multiline':False]
['text':' exact conversion','line_number':132,'multiline':False]
['text':' x < 2^32','line_number':136,'multiline':False]
['text':' exact conversion','line_number':137,'multiline':False]
['text':' if x < 2^53','line_number':142,'multiline':False]
['text':' exact conversion','line_number':143,'multiline':False]
['text':' C1.w[1] != 0 => nr. bits = 64 + nr_bits (C1.w[1])','line_number':147,'multiline':False]
['text':' exact conversion','line_number':148,'multiline':False]
['text':' if q1 < P34 then pad the significand with zeros','line_number':160,'multiline':False]
['text':' 1 <= ind <= P34 - 1','line_number':164,'multiline':False]
['text':' pad with P34 - q1 zeros, until exponent = emin','line_number':165,'multiline':False]
['text':' C1 = C1 * 10^ind','line_number':166,'multiline':False]
['text':' 64-bit C1','line_number':167,'multiline':False]
['text':' 64-bit 10^ind and 64-bit C1','line_number':168,'multiline':False]
['text':' 128-bit 10^ind and 64-bit C1','line_number':170,'multiline':False]
['text':' C1 is (most likely) 128-bit','line_number':173,'multiline':False]
['text':' 64-bit 10^ind and 128-bit C1 (most likely)','line_number':174,'multiline':False]
['text':' 64-bit 10^ind and 64-bit C1 (q1 <= 19)','line_number':176,'multiline':False]
['text':' 128-bit 10^ind and 64-bit C1 (C1 must be 64-bit)','line_number':178,'multiline':False]
['text':' pad with zeros until the exponent reaches emin','line_number':183,'multiline':False]
['text':' C1 = C1 * 10^ind','line_number':185,'multiline':False]
['text':' 1 <= P34 - q1 <= 19 <=> 15 <= q1 <= 33','line_number':186,'multiline':False]
['text':' 64-bit C1, 64-bit 10^ind ','line_number':187,'multiline':False]
['text':' 20 <= q1 <= 33 => 128-bit C1, 64-bit 10^ind','line_number':189,'multiline':False]
['text':' if 20 <= P34 - q1 <= 33 <=> 1 <= q1 <= 14 =>','line_number':192,'multiline':False]
['text':' 64-bit C1, 128-bit 10^ind','line_number':193,'multiline':False]
['text':' x > 0','line_number':199,'multiline':False]
['text':' add 1 ulp (add 1 to the significand)','line_number':200,'multiline':False]
['text':' if  C1 = 10^34','line_number':204,'multiline':False]
['text':' C1 = 10^33','line_number':205,'multiline':False]
['text':' x < 0','line_number':209,'multiline':False]
['text':' subtract 1 ulp (subtract 1 from the significand)','line_number':210,'multiline':False]
['text':' if  C1 = 10^33 - 1','line_number':214,'multiline':False]
['text':' C1 = 10^34 - 1','line_number':215,'multiline':False]
['text':' assemble the result','line_number':220,'multiline':False]
['text':' end -MAXFP <= x <= -MINFP - 1 ulp OR MINFP <= x <= MAXFP - 1 ulp','line_number':223,'multiline':False]
['text':' end x is not special and is not zero','line_number':224,'multiline':False]
['text':'****************************************************************************
 *  BID128 nextdown
 ***************************************************************************','line_number':228,'multiline':True]
['text':' C1.w[1], C1.w[0] represent x_signif_hi, x_signif_lo (BID_UINT64)','line_number':241,'multiline':False]
['text':'BID_SWAP128 (x);','line_number':243,'multiline':False]
['text':' unpack the argument','line_number':244,'multiline':False]
['text':' 0 for positive, MASK_SIGN for negative','line_number':245,'multiline':False]
['text':' check for NaN or Infinity','line_number':249,'multiline':False]
['text':' x is special','line_number':251,'multiline':False]
['text':' x is NAN','line_number':252,'multiline':False]
['text':' if x = NaN, then res = Q (x)','line_number':253,'multiline':False]
['text':' check first for non-canonical NaN payload','line_number':254,'multiline':False]
['text':' x is SNAN','line_number':261,'multiline':False]
['text':' set invalid flag','line_number':262,'multiline':False]
['text':' return quiet (x)','line_number':264,'multiline':False]
['text':' clear out also G[6]-G[16]','line_number':265,'multiline':False]
['text':' x is QNaN','line_number':267,'multiline':False]
['text':' return x','line_number':268,'multiline':False]
['text':' clear out G[6]-G[16]','line_number':269,'multiline':False]
['text':' x is not NaN, so it must be infinity','line_number':272,'multiline':False]
['text':' x is +inf','line_number':273,'multiline':False]
['text':' +MAXFP = +999...99 * 10^emax','line_number':274,'multiline':False]
['text':' x is -inf','line_number':276,'multiline':False]
['text':' -inf','line_number':277,'multiline':False]
['text':' check for non-canonical values (treated as zero)','line_number':283,'multiline':False]
['text':' G0_G1=11','line_number':284,'multiline':False]
['text':' non-canonical','line_number':285,'multiline':False]
['text':' biased and shifted left 49 bits','line_number':286,'multiline':False]
['text':' significand high','line_number':287,'multiline':False]
['text':' significand low','line_number':288,'multiline':False]
['text':' G0_G1 != 11','line_number':289,'multiline':False]
['text':' biased and shifted left 49 bits','line_number':290,'multiline':False]
['text':' x is non-canonical if coefficient is larger than 10^34 -1','line_number':294,'multiline':False]
['text':' canonical','line_number':297,'multiline':False]
['text':' x is +/-0','line_number':303,'multiline':False]
['text':' -1 * 10^emin','line_number':304,'multiline':False]
['text':' x is not special and is not zero','line_number':306,'multiline':False]
['text':' x = -MAXFP = -999...99 * 10^emax','line_number':309,'multiline':False]
['text':' -inf','line_number':310,'multiline':False]
['text':' +MINFP','line_number':312,'multiline':False]
['text':' +0','line_number':313,'multiline':False]
['text':' -MAXFP <= x <= -MINFP - 1 ulp OR MINFP <= x <= MAXFP - 1 ulp','line_number':315,'multiline':False]
['text':' can add/subtract 1 ulp to the significand','line_number':316,'multiline':False]
['text':' Note: we could check here if x >= 10^34 to speed up the case q1 = 34','line_number':318,'multiline':False]
['text':' q1 = nr. of decimal digits in x','line_number':319,'multiline':False]
['text':' determine first the nr. of bits in x','line_number':320,'multiline':False]
['text':' x >= 2^53','line_number':322,'multiline':False]
['text':' split the 64-bit value in two 32-bit halves to avoid rnd errors','line_number':323,'multiline':False]
['text':' x >= 2^32','line_number':324,'multiline':False]
['text':' exact conversion','line_number':325,'multiline':False]
['text':' x < 2^32','line_number':329,'multiline':False]
['text':' exact conversion','line_number':330,'multiline':False]
['text':' if x < 2^53','line_number':335,'multiline':False]
['text':' exact conversion','line_number':336,'multiline':False]
['text':' C1.w[1] != 0 => nr. bits = 64 + nr_bits (C1.w[1])','line_number':340,'multiline':False]
['text':' exact conversion','line_number':341,'multiline':False]
['text':' if q1 < P then pad the significand with zeros','line_number':353,'multiline':False]
['text':' 1 <= ind <= P34 - 1','line_number':357,'multiline':False]
['text':' pad with P34 - q1 zeros, until exponent = emin','line_number':358,'multiline':False]
['text':' C1 = C1 * 10^ind','line_number':359,'multiline':False]
['text':' 64-bit C1','line_number':360,'multiline':False]
['text':' 64-bit 10^ind and 64-bit C1','line_number':361,'multiline':False]
['text':' 128-bit 10^ind and 64-bit C1','line_number':363,'multiline':False]
['text':' C1 is (most likely) 128-bit','line_number':366,'multiline':False]
['text':' 64-bit 10^ind and 128-bit C1 (most likely)','line_number':367,'multiline':False]
['text':' 64-bit 10^ind and 64-bit C1 (q1 <= 19)','line_number':369,'multiline':False]
['text':' 128-bit 10^ind and 64-bit C1 (C1 must be 64-bit)','line_number':371,'multiline':False]
['text':' pad with zeros until the exponent reaches emin','line_number':376,'multiline':False]
['text':' C1 = C1 * 10^ind','line_number':378,'multiline':False]
['text':' 1 <= P34 - q1 <= 19 <=> 15 <= q1 <= 33','line_number':379,'multiline':False]
['text':' 64-bit C1, 64-bit 10^ind ','line_number':380,'multiline':False]
['text':' 20 <= q1 <= 33 => 128-bit C1, 64-bit 10^ind','line_number':382,'multiline':False]
['text':' if 20 <= P34 - q1 <= 33 <=> 1 <= q1 <= 14 =>','line_number':385,'multiline':False]
['text':' 64-bit C1, 128-bit 10^ind','line_number':386,'multiline':False]
['text':' x < 0','line_number':392,'multiline':False]
['text':' add 1 ulp (add 1 to the significand)','line_number':393,'multiline':False]
['text':' if  C1 = 10^34','line_number':397,'multiline':False]
['text':' C1 = 10^33','line_number':398,'multiline':False]
['text':' x > 0','line_number':402,'multiline':False]
['text':' subtract 1 ulp (subtract 1 from the significand)','line_number':403,'multiline':False]
['text':' if  C1 = 10^33 - 1','line_number':407,'multiline':False]
['text':' C1 = 10^34 - 1','line_number':408,'multiline':False]
['text':' assemble the result','line_number':413,'multiline':False]
['text':' end -MAXFP <= x <= -MINFP - 1 ulp OR MINFP <= x <= MAXFP - 1 ulp','line_number':416,'multiline':False]
['text':' end x is not special and is not zero','line_number':417,'multiline':False]
['text':'****************************************************************************
 *  BID128 nextafter
 ***************************************************************************','line_number':421,'multiline':True]
['text':' dummy fpsf for calls to comparison functions','line_number':431,'multiline':False]
['text':' check for NaNs','line_number':438,'multiline':False]
['text':' x is special or y is special','line_number':441,'multiline':False]
['text':' x is NAN','line_number':442,'multiline':False]
['text':' if x = NaN, then res = Q (x)','line_number':443,'multiline':False]
['text':' check first for non-canonical NaN payload','line_number':444,'multiline':False]
['text':' x is SNAN','line_number':451,'multiline':False]
['text':' set invalid flag','line_number':452,'multiline':False]
['text':' return quiet (x)','line_number':454,'multiline':False]
['text':' clear out also G[6]-G[16]','line_number':455,'multiline':False]
['text':' x is QNaN','line_number':457,'multiline':False]
['text':' return x','line_number':458,'multiline':False]
['text':' clear out G[6]-G[16]','line_number':459,'multiline':False]
['text':' y is SNAN','line_number':461,'multiline':False]
['text':' set invalid flag','line_number':462,'multiline':False]
['text':' y is NAN','line_number':467,'multiline':False]
['text':' if x = NaN, then res = Q (x)','line_number':468,'multiline':False]
['text':' check first for non-canonical NaN payload','line_number':469,'multiline':False]
['text':' y is SNAN','line_number':476,'multiline':False]
['text':' set invalid flag','line_number':477,'multiline':False]
['text':' return quiet (x)','line_number':479,'multiline':False]
['text':' clear out also G[6]-G[16]','line_number':480,'multiline':False]
['text':' x is QNaN','line_number':482,'multiline':False]
['text':' return x','line_number':483,'multiline':False]
['text':' clear out G[6]-G[16]','line_number':484,'multiline':False]
['text':' at least one is infinity','line_number':488,'multiline':False]
['text':' x = inf','line_number':489,'multiline':False]
['text':' y = inf','line_number':493,'multiline':False]
['text':' neither x nor y is NaN','line_number':499,'multiline':False]
['text':' if not infinity, check for non-canonical values x (treated as zero)','line_number':501,'multiline':False]
['text':' x != inf','line_number':502,'multiline':False]
['text':' G0_G1=11','line_number':503,'multiline':False]
['text':' non-canonical','line_number':504,'multiline':False]
['text':' biased and shifted left 49 bits','line_number':505,'multiline':False]
['text':' G0_G1 != 11','line_number':508,'multiline':False]
['text':' biased and shifted left 49 bits','line_number':509,'multiline':False]
['text':' x is non-canonical if coefficient is larger than 10^34 -1','line_number':513,'multiline':False]
['text':' canonical','line_number':516,'multiline':False]
['text':' no need to check for non-canonical y','line_number':521,'multiline':False]
['text':' neither x nor y is NaN','line_number':523,'multiline':False]
['text':' save fpsf','line_number':524,'multiline':False]
['text':' restore fpsf','line_number':542,'multiline':False]
['text':' x = y','line_number':544,'multiline':False]
['text':' return x with the sign of y','line_number':545,'multiline':False]
['text':' x > y','line_number':550,'multiline':False]
['text':' x < y','line_number':561,'multiline':False]
['text':' if the operand x is finite but the result is infinite, signal ','line_number':571,'multiline':False]
['text':' overflow and inexact','line_number':572,'multiline':False]
['text':' set the inexact flag','line_number':575,'multiline':False]
['text':' set the overflow flag','line_number':577,'multiline':False]
['text':' if the result is in (-10^emin, 10^emin), and is different from the','line_number':580,'multiline':False]
['text':' operand x, signal underflow and inexact','line_number':581,'multiline':False]
['text':' +100...0[34] * 10^emin','line_number':583,'multiline':False]
['text':' save fpsf','line_number':588,'multiline':False]
['text':' restore fpsf','line_number':606,'multiline':False]
['text':' set the inexact flag ','line_number':608,'multiline':False]
['text':' set the underflow flag ','line_number':610,'multiline':False]
