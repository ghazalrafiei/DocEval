['text':'*****************************************************************************
  Copyright (c) 2007-2011, Intel Corp.
  All rights reserved.

  Redistribution and use in source and binary forms, with or without 
  modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice, 
      this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright 
      notice, this list of conditions and the following disclaimer in the 
      documentation and/or other materials provided with the distribution.
    * Neither the name of Intel Corporation nor the names of its contributors 
      may be used to endorse or promote products derived from this software 
      without specific prior written permission.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
  THE POSSIBILITY OF SUCH DAMAGE.
*****************************************************************************','line_number':1,'multiline':True]
['text':'****************************************************************************
 *  BID64_to_uint32_rnint
 ***************************************************************************','line_number':32,'multiline':True]
['text':' unbiased exponent','line_number':52,'multiline':False]
['text':' Note: C1 represents x_significand (BID_UINT64)','line_number':53,'multiline':False]
['text':' C* represents up to 16 decimal digits ~ 54 bits','line_number':59,'multiline':False]
['text':' check for NaN or Infinity','line_number':63,'multiline':False]
['text':' set invalid flag','line_number':65,'multiline':False]
['text':' return Integer Indefinite','line_number':67,'multiline':False]
['text':' unpack x','line_number':71,'multiline':False]
['text':' 0 for positive, MASK_SIGN for negative','line_number':72,'multiline':False]
['text':' if steering bits are 11 (condition will be 0), then exponent is G[0:w+1] =>','line_number':73,'multiline':False]
['text':' biased','line_number':75,'multiline':False]
['text':' non-canonical','line_number':77,'multiline':False]
['text':' biased','line_number':82,'multiline':False]
['text':' check for zeros (possibly from non-canonical values)','line_number':86,'multiline':False]
['text':' x is 0','line_number':88,'multiline':False]
['text':' x is not special and is not zero','line_number':92,'multiline':False]
['text':' q = nr. of decimal digits in x (1 <= q <= 54)','line_number':94,'multiline':False]
['text':'  determine first the nr. of bits in x','line_number':95,'multiline':False]
['text':' x >= 2^53','line_number':96,'multiline':False]
['text':' split the 64-bit value in two 32-bit halves to avoid rounding errors','line_number':97,'multiline':False]
['text':' exact conversion','line_number':98,'multiline':False]
['text':' if x < 2^53','line_number':100,'multiline':False]
['text':' exact conversion','line_number':101,'multiline':False]
['text':' unbiased exponent','line_number':111,'multiline':False]
['text':' x >= 10^10 ~= 2^33.2... (cannot fit in 32 bits)','line_number':113,'multiline':False]
['text':' set invalid flag','line_number':114,'multiline':False]
['text':' return Integer Indefinite','line_number':116,'multiline':False]
['text':' x = c(0)c(1)...c(9).c(10)...c(q-1)','line_number':119,'multiline':False]
['text':' in this case 2^29.89... ~= 10^9 <= x < 10^10 ~= 2^33.2...','line_number':120,'multiline':False]
['text':' so x rounded to an integer may or may not fit in an unsigned 32-bit int','line_number':121,'multiline':False]
['text':' the cases that do not fit are identified here; the ones that fit','line_number':122,'multiline':False]
['text':' fall through and will be handled with other cases further,','line_number':123,'multiline':False]
['text':' under '1 <= q + exp <= 10'','line_number':124,'multiline':False]
['text':' if n < 0 and q + exp = 10 then x is much less than -1/2','line_number':125,'multiline':False]
['text':' => set invalid flag','line_number':126,'multiline':False]
['text':' return Integer Indefinite','line_number':128,'multiline':False]
['text':' if n > 0 and q + exp = 10','line_number':131,'multiline':False]
['text':' if n >= 2^32 - 1/2 then n is too large','line_number':132,'multiline':False]
['text':' too large if c(0)c(1)...c(9).c(10)...c(q-1) >= 2^32-1/2','line_number':133,'multiline':False]
['text':' <=> 0.c(0)c(1)...c(q-1) * 10^11 >= 0x9fffffffb, 1<=q<=16','line_number':134,'multiline':False]
['text':' <=> C * 10^(11-q) >= 0x9fffffffb, 1<=q<=16','line_number':135,'multiline':False]
['text':' Note: C * 10^(11-q) has 10 or 11 digits; 0x9fffffffb has 11 digits','line_number':137,'multiline':False]
['text':' C scaled up to 11-digit int','line_number':138,'multiline':False]
['text':' c(0)c(1)...c(9)c(10) or c(0)c(1)...c(q-1)0...0 (11 digits)','line_number':139,'multiline':False]
['text':' set invalid flag','line_number':141,'multiline':False]
['text':' return Integer Indefinite','line_number':143,'multiline':False]
['text':' else cases that can be rounded to a 32-bit unsigned int fall through','line_number':147,'multiline':False]
['text':' to '1 <= q + exp <= 10'','line_number':148,'multiline':False]
['text':' if (q > 11), i.e. 12 <= q <= 16 and so -15 <= exp <= -2','line_number':149,'multiline':False]
['text':' C * 10^(11-q) >= 0x9fffffffb <=>','line_number':150,'multiline':False]
['text':' C >= 0x9fffffffb * 10^(q-11) where 1 <= q - 11 <= 5','line_number':151,'multiline':False]
['text':' (scale 2^32-1/2 up)','line_number':152,'multiline':False]
['text':' Note: 0x9fffffffb*10^(q-11) has q-1 or q digits, where q <= 16','line_number':153,'multiline':False]
['text':' set invalid flag ','line_number':156,'multiline':False]
['text':' return Integer Indefinite ','line_number':158,'multiline':False]
['text':' else cases that can be rounded to a 32-bit int fall through','line_number':162,'multiline':False]
['text':' to '1 <= q + exp <= 10'','line_number':163,'multiline':False]
['text':' n is not too large to be converted to int32 if -1/2 <= n < 2^32 - 1/2','line_number':167,'multiline':False]
['text':' Note: some of the cases tested for above fall through to this point','line_number':168,'multiline':False]
['text':' n = +/-0.0...c(0)c(1)...c(q-1)','line_number':169,'multiline':False]
['text':' return 0','line_number':170,'multiline':False]
['text':' n = +/-0.c(0)c(1)...c(q-1)','line_number':173,'multiline':False]
['text':' if 0.c(0)c(1)...c(q-1) <= 0.5 <=> c(0)c(1)...c(q-1) <= 5 * 10^(q-1)','line_number':174,'multiline':False]
['text':'   res = 0','line_number':175,'multiline':False]
['text':' else if x > 0','line_number':176,'multiline':False]
['text':'   res = +1','line_number':177,'multiline':False]
['text':' else // if x < 0','line_number':178,'multiline':False]
['text':'   invalid exc','line_number':179,'multiline':False]
['text':' return 0','line_number':182,'multiline':False]
['text':' n < 0','line_number':183,'multiline':False]
['text':' set invalid flag','line_number':184,'multiline':False]
['text':' return Integer Indefinite','line_number':186,'multiline':False]
['text':' n > 0','line_number':189,'multiline':False]
['text':' return +1','line_number':190,'multiline':False]
['text':' if (1 <= q + exp <= 10, 1 <= q <= 16, -15 <= exp <= 9)','line_number':192,'multiline':False]
['text':' -2^32-1/2 <= x <= -1 or 1 <= x < 2^32-1/2 so if positive, x can be ','line_number':193,'multiline':False]
['text':' rounded to nearest to a 32-bit unsigned integer','line_number':194,'multiline':False]
['text':' x <= -1','line_number':195,'multiline':False]
['text':' set invalid flag','line_number':196,'multiline':False]
['text':' return Integer Indefinite','line_number':198,'multiline':False]
['text':' 1 <= x < 2^32-1/2 so x can be rounded','line_number':202,'multiline':False]
['text':' to nearest to a 32-bit unsigned integer','line_number':203,'multiline':False]
['text':' 2 <= q <= 16, -15 <= exp <= -1, 1 <= q + exp <= 10','line_number':204,'multiline':False]
['text':' 1 <= ind <= 15; ind is a synonym for 'x'','line_number':205,'multiline':False]
['text':' chop off ind digits from the lower part of C1','line_number':206,'multiline':False]
['text':' C1 = C1 + 1/2 * 10^ind where the result C1 fits in 64 bits','line_number':207,'multiline':False]
['text':' calculate C* and f*','line_number':209,'multiline':False]
['text':' C* is actually floor(C*) in this case','line_number':210,'multiline':False]
['text':' C* and f* need shifting and masking, as shown by','line_number':211,'multiline':False]
['text':' bid_shiftright128[] and bid_maskhigh128[]','line_number':212,'multiline':False]
['text':' 1 <= x <= 15 ','line_number':213,'multiline':False]
['text':' kx = 10^(-x) = bid_ten2mk64[ind - 1]','line_number':214,'multiline':False]
['text':' C* = (C1 + 1/2 * 10^x) * 10^(-x)','line_number':215,'multiline':False]
['text':' the approximation of 10^(-x) was rounded up to 54 bits','line_number':216,'multiline':False]
['text':' the top Ex bits of 10^(-x) are T* = bid_ten2mk128trunc[ind].w[0], e.g.','line_number':221,'multiline':False]
['text':' if x=1, T*=bid_ten2mk128trunc[0].w[0]=0x1999999999999999','line_number':222,'multiline':False]
['text':' if (0 < f* < 10^(-x)) then the result is a midpoint','line_number':223,'multiline':False]
['text':'   if floor(C*) is even then C* = floor(C*) - logical right','line_number':224,'multiline':False]
['text':'       shift; C* has p decimal digits, correct by Prop. 1)','line_number':225,'multiline':False]
['text':'   else if floor(C*) is odd C* = floor(C*)-1 (logical right','line_number':226,'multiline':False]
['text':'       shift; C* has p decimal digits, correct by Pr. 1)','line_number':227,'multiline':False]
['text':' else','line_number':228,'multiline':False]
['text':'   C* = floor(C*) (logical right shift; C has p decimal digits,','line_number':229,'multiline':False]
['text':'       correct by Property 1)','line_number':230,'multiline':False]
['text':' n = C* * 10^(e+x)','line_number':231,'multiline':False]
['text':' shift right C* by Ex-64 = bid_shiftright128[ind]','line_number':233,'multiline':False]
['text':' 0 <= shift <= 39','line_number':234,'multiline':False]
['text':' if the result was a midpoint it was rounded away from zero, so','line_number':237,'multiline':False]
['text':' it will need a correction','line_number':238,'multiline':False]
['text':' check for midpoints','line_number':239,'multiline':False]
['text':' bid_ten2mk128trunc[ind -1].w[1] is identical to ','line_number':242,'multiline':False]
['text':' bid_ten2mk128[ind -1].w[1]','line_number':243,'multiline':False]
['text':' the result is a midpoint; round to nearest','line_number':244,'multiline':False]
['text':' Cstar is odd; MP in [EVEN, ODD]','line_number':245,'multiline':False]
['text':' if floor(C*) is odd C = floor(C*) - 1; the result >= 1','line_number':246,'multiline':False]
['text':' Cstar is now even','line_number':247,'multiline':False]
['text':' else MP in [ODD, EVEN]','line_number':248,'multiline':False]
['text':' the result is positive','line_number':250,'multiline':False]
['text':' 1 <= q <= 10','line_number':252,'multiline':False]
['text':' res = +C (exact)','line_number':253,'multiline':False]
['text':' the result is positive','line_number':254,'multiline':False]
['text':' if (exp > 0) => 1 <= exp <= 9, 1 <= q < 9, 2 <= q + exp <= 10','line_number':255,'multiline':False]
['text':' res = +C * 10^exp (exact)','line_number':256,'multiline':False]
['text':' the result is positive','line_number':257,'multiline':False]
['text':'****************************************************************************
 *  BID64_to_uint32_xrnint
 ***************************************************************************','line_number':263,'multiline':True]
['text':' unbiased exponent','line_number':283,'multiline':False]
['text':' Note: C1 represents x_significand (BID_UINT64)','line_number':284,'multiline':False]
['text':' C* represents up to 16 decimal digits ~ 54 bits','line_number':290,'multiline':False]
['text':' check for NaN or Infinity','line_number':294,'multiline':False]
['text':' set invalid flag','line_number':296,'multiline':False]
['text':' return Integer Indefinite','line_number':298,'multiline':False]
['text':' unpack x','line_number':302,'multiline':False]
['text':' 0 for positive, MASK_SIGN for negative','line_number':303,'multiline':False]
['text':' if steering bits are 11 (condition will be 0), then exponent is G[0:w+1] =>','line_number':304,'multiline':False]
['text':' biased','line_number':306,'multiline':False]
['text':' non-canonical','line_number':308,'multiline':False]
['text':' biased','line_number':313,'multiline':False]
['text':' check for zeros (possibly from non-canonical values)','line_number':317,'multiline':False]
['text':' x is 0','line_number':319,'multiline':False]
['text':' x is not special and is not zero','line_number':323,'multiline':False]
['text':' q = nr. of decimal digits in x (1 <= q <= 54)','line_number':325,'multiline':False]
['text':'  determine first the nr. of bits in x','line_number':326,'multiline':False]
['text':' x >= 2^53','line_number':327,'multiline':False]
['text':' split the 64-bit value in two 32-bit halves to avoid rounding errors','line_number':328,'multiline':False]
['text':' exact conversion','line_number':329,'multiline':False]
['text':' if x < 2^53','line_number':331,'multiline':False]
['text':' exact conversion','line_number':332,'multiline':False]
['text':' unbiased exponent','line_number':342,'multiline':False]
['text':' x >= 10^10 ~= 2^33.2... (cannot fit in 32 bits)','line_number':344,'multiline':False]
['text':' set invalid flag','line_number':345,'multiline':False]
['text':' return Integer Indefinite','line_number':347,'multiline':False]
['text':' x = c(0)c(1)...c(9).c(10)...c(q-1)','line_number':350,'multiline':False]
['text':' in this case 2^29.89... ~= 10^9 <= x < 10^10 ~= 2^33.2...','line_number':351,'multiline':False]
['text':' so x rounded to an integer may or may not fit in an unsigned 32-bit int','line_number':352,'multiline':False]
['text':' the cases that do not fit are identified here; the ones that fit','line_number':353,'multiline':False]
['text':' fall through and will be handled with other cases further,','line_number':354,'multiline':False]
['text':' under '1 <= q + exp <= 10'','line_number':355,'multiline':False]
['text':' if n < 0 and q + exp = 10 then x is much less than -1/2','line_number':356,'multiline':False]
['text':' => set invalid flag','line_number':357,'multiline':False]
['text':' return Integer Indefinite','line_number':359,'multiline':False]
['text':' if n > 0 and q + exp = 10','line_number':362,'multiline':False]
['text':' if n >= 2^32 - 1/2 then n is too large','line_number':363,'multiline':False]
['text':' too large if c(0)c(1)...c(9).c(10)...c(q-1) >= 2^32-1/2','line_number':364,'multiline':False]
['text':' <=> 0.c(0)c(1)...c(q-1) * 10^11 >= 0x9fffffffb, 1<=q<=16','line_number':365,'multiline':False]
['text':' <=> C * 10^(11-q) >= 0x9fffffffb, 1<=q<=16','line_number':366,'multiline':False]
['text':' Note: C * 10^(11-q) has 10 or 11 digits; 0x9fffffffb has 11 digits','line_number':368,'multiline':False]
['text':' C scaled up to 11-digit int','line_number':369,'multiline':False]
['text':' c(0)c(1)...c(9)c(10) or c(0)c(1)...c(q-1)0...0 (11 digits)','line_number':370,'multiline':False]
['text':' set invalid flag','line_number':372,'multiline':False]
['text':' return Integer Indefinite','line_number':374,'multiline':False]
['text':' else cases that can be rounded to a 32-bit unsigned int fall through','line_number':378,'multiline':False]
['text':' to '1 <= q + exp <= 10'','line_number':379,'multiline':False]
['text':' if (q > 11), i.e. 12 <= q <= 16 and so -15 <= exp <= -2','line_number':380,'multiline':False]
['text':' C * 10^(11-q) >= 0x9fffffffb <=>','line_number':381,'multiline':False]
['text':' C >= 0x9fffffffb * 10^(q-11) where 1 <= q - 11 <= 5','line_number':382,'multiline':False]
['text':' (scale 2^32-1/2 up)','line_number':383,'multiline':False]
['text':' Note: 0x9fffffffb*10^(q-11) has q-1 or q digits, where q <= 16','line_number':384,'multiline':False]
['text':' set invalid flag ','line_number':387,'multiline':False]
['text':' return Integer Indefinite ','line_number':389,'multiline':False]
['text':' else cases that can be rounded to a 32-bit int fall through','line_number':393,'multiline':False]
['text':' to '1 <= q + exp <= 10'','line_number':394,'multiline':False]
['text':' n is not too large to be converted to int32 if -1/2 <= n < 2^32 - 1/2','line_number':398,'multiline':False]
['text':' Note: some of the cases tested for above fall through to this point','line_number':399,'multiline':False]
['text':' n = +/-0.0...c(0)c(1)...c(q-1)','line_number':400,'multiline':False]
['text':' set inexact flag','line_number':401,'multiline':False]
['text':' return 0','line_number':403,'multiline':False]
['text':' n = +/-0.c(0)c(1)...c(q-1)','line_number':406,'multiline':False]
['text':' if 0.c(0)c(1)...c(q-1) <= 0.5 <=> c(0)c(1)...c(q-1) <= 5 * 10^(q-1)','line_number':407,'multiline':False]
['text':'   res = 0','line_number':408,'multiline':False]
['text':' else if x > 0','line_number':409,'multiline':False]
['text':'   res = +1','line_number':410,'multiline':False]
['text':' else // if x < 0','line_number':411,'multiline':False]
['text':'   invalid exc','line_number':412,'multiline':False]
['text':' return 0','line_number':415,'multiline':False]
['text':' n < 0','line_number':416,'multiline':False]
['text':' set invalid flag','line_number':417,'multiline':False]
['text':' return Integer Indefinite','line_number':419,'multiline':False]
['text':' n > 0','line_number':422,'multiline':False]
['text':' return +1','line_number':423,'multiline':False]
['text':' set inexact flag','line_number':425,'multiline':False]
['text':' if (1 <= q + exp <= 10, 1 <= q <= 16, -15 <= exp <= 9)','line_number':427,'multiline':False]
['text':' -2^32-1/2 <= x <= -1 or 1 <= x < 2^32-1/2 so if positive, x can be ','line_number':428,'multiline':False]
['text':' rounded to nearest to a 32-bit unsigned integer','line_number':429,'multiline':False]
['text':' x <= -1','line_number':430,'multiline':False]
['text':' set invalid flag','line_number':431,'multiline':False]
['text':' return Integer Indefinite','line_number':433,'multiline':False]
['text':' 1 <= x < 2^32-1/2 so x can be rounded','line_number':437,'multiline':False]
['text':' to nearest to a 32-bit unsigned integer','line_number':438,'multiline':False]
['text':' 2 <= q <= 16, -15 <= exp <= -1, 1 <= q + exp <= 10','line_number':439,'multiline':False]
['text':' 1 <= ind <= 15; ind is a synonym for 'x'','line_number':440,'multiline':False]
['text':' chop off ind digits from the lower part of C1','line_number':441,'multiline':False]
['text':' C1 = C1 + 1/2 * 10^ind where the result C1 fits in 64 bits','line_number':442,'multiline':False]
['text':' calculate C* and f*','line_number':444,'multiline':False]
['text':' C* is actually floor(C*) in this case','line_number':445,'multiline':False]
['text':' C* and f* need shifting and masking, as shown by','line_number':446,'multiline':False]
['text':' bid_shiftright128[] and bid_maskhigh128[]','line_number':447,'multiline':False]
['text':' 1 <= x <= 15 ','line_number':448,'multiline':False]
['text':' kx = 10^(-x) = bid_ten2mk64[ind - 1]','line_number':449,'multiline':False]
['text':' C* = (C1 + 1/2 * 10^x) * 10^(-x)','line_number':450,'multiline':False]
['text':' the approximation of 10^(-x) was rounded up to 54 bits','line_number':451,'multiline':False]
['text':' the top Ex bits of 10^(-x) are T* = bid_ten2mk128trunc[ind].w[0], e.g.','line_number':456,'multiline':False]
['text':' if x=1, T*=bid_ten2mk128trunc[0].w[0]=0x1999999999999999','line_number':457,'multiline':False]
['text':' if (0 < f* < 10^(-x)) then the result is a midpoint','line_number':458,'multiline':False]
['text':'   if floor(C*) is even then C* = floor(C*) - logical right','line_number':459,'multiline':False]
['text':'       shift; C* has p decimal digits, correct by Prop. 1)','line_number':460,'multiline':False]
['text':'   else if floor(C*) is odd C* = floor(C*)-1 (logical right','line_number':461,'multiline':False]
['text':'       shift; C* has p decimal digits, correct by Pr. 1)','line_number':462,'multiline':False]
['text':' else','line_number':463,'multiline':False]
['text':'   C* = floor(C*) (logical right shift; C has p decimal digits,','line_number':464,'multiline':False]
['text':'       correct by Property 1)','line_number':465,'multiline':False]
['text':' n = C* * 10^(e+x)','line_number':466,'multiline':False]
['text':' shift right C* by Ex-64 = bid_shiftright128[ind]','line_number':468,'multiline':False]
['text':' 0 <= shift <= 39','line_number':469,'multiline':False]
['text':' determine inexactness of the rounding of C*','line_number':471,'multiline':False]
['text':' if (0 < f* - 1/2 < 10^(-x)) then','line_number':472,'multiline':False]
['text':'   the result is exact','line_number':473,'multiline':False]
['text':' else // if (f* - 1/2 > T*) then','line_number':474,'multiline':False]
['text':'   the result is inexact','line_number':475,'multiline':False]
['text':' fstar.w[1] is 0','line_number':476,'multiline':False]
['text':' f* > 1/2 and the result may be exact','line_number':478,'multiline':False]
['text':' f* - 1/2','line_number':479,'multiline':False]
['text':' bid_ten2mk128trunc[ind -1].w[1] is identical to ','line_number':481,'multiline':False]
['text':' bid_ten2mk128[ind -1].w[1]','line_number':482,'multiline':False]
['text':' set the inexact flag','line_number':483,'multiline':False]
['text':' else the result is exact','line_number':485,'multiline':False]
['text':' the result is inexact; f2* <= 1/2','line_number':486,'multiline':False]
['text':' set the inexact flag','line_number':487,'multiline':False]
['text':' if 3 <= ind - 1 <= 14','line_number':490,'multiline':False]
['text':' f2* > 1/2 and the result may be exact','line_number':493,'multiline':False]
['text':' Calculate f2* - 1/2','line_number':494,'multiline':False]
['text':' bid_ten2mk128trunc[ind -1].w[1] is identical to ','line_number':497,'multiline':False]
['text':' bid_ten2mk128[ind -1].w[1]','line_number':498,'multiline':False]
['text':' set the inexact flag','line_number':499,'multiline':False]
['text':' else the result is exact','line_number':501,'multiline':False]
['text':' the result is inexact; f2* <= 1/2','line_number':502,'multiline':False]
['text':' set the inexact flag','line_number':503,'multiline':False]
['text':' if the result was a midpoint it was rounded away from zero, so','line_number':508,'multiline':False]
['text':' it will need a correction','line_number':509,'multiline':False]
['text':' check for midpoints','line_number':510,'multiline':False]
['text':' bid_ten2mk128trunc[ind -1].w[1] is identical to ','line_number':513,'multiline':False]
['text':' bid_ten2mk128[ind -1].w[1]','line_number':514,'multiline':False]
['text':' the result is a midpoint; round to nearest','line_number':515,'multiline':False]
['text':' Cstar is odd; MP in [EVEN, ODD]','line_number':516,'multiline':False]
['text':' if floor(C*) is odd C = floor(C*) - 1; the result >= 1','line_number':517,'multiline':False]
['text':' Cstar is now even','line_number':518,'multiline':False]
['text':' else MP in [ODD, EVEN]','line_number':519,'multiline':False]
['text':' the result is positive','line_number':521,'multiline':False]
['text':' 1 <= q <= 10','line_number':523,'multiline':False]
['text':' res = +C (exact)','line_number':524,'multiline':False]
['text':' the result is positive','line_number':525,'multiline':False]
['text':' if (exp > 0) => 1 <= exp <= 9, 1 <= q < 9, 2 <= q + exp <= 10','line_number':526,'multiline':False]
['text':' res = +C * 10^exp (exact)','line_number':527,'multiline':False]
['text':' the result is positive','line_number':528,'multiline':False]
['text':'****************************************************************************
 *  BID64_to_uint32_floor
 ***************************************************************************','line_number':534,'multiline':True]
['text':' unbiased exponent','line_number':554,'multiline':False]
['text':' Note: C1 represents x_significand (BID_UINT64)','line_number':555,'multiline':False]
['text':' C* represents up to 16 decimal digits ~ 54 bits','line_number':561,'multiline':False]
['text':' check for NaN or Infinity','line_number':564,'multiline':False]
['text':' set invalid flag','line_number':566,'multiline':False]
['text':' return Integer Indefinite','line_number':568,'multiline':False]
['text':' unpack x','line_number':572,'multiline':False]
['text':' 0 for positive, MASK_SIGN for negative','line_number':573,'multiline':False]
['text':' if steering bits are 11 (condition will be 0), then exponent is G[0:w+1] =>','line_number':574,'multiline':False]
['text':' biased','line_number':576,'multiline':False]
['text':' non-canonical','line_number':578,'multiline':False]
['text':' biased','line_number':583,'multiline':False]
['text':' check for zeros (possibly from non-canonical values)','line_number':587,'multiline':False]
['text':' x is 0','line_number':589,'multiline':False]
['text':' x is not special and is not zero','line_number':593,'multiline':False]
['text':' if n < 0 the conversion is invalid','line_number':595,'multiline':False]
['text':' set invalid flag','line_number':596,'multiline':False]
['text':' return Integer Indefinite','line_number':598,'multiline':False]
['text':' q = nr. of decimal digits in x (1 <= q <= 54)','line_number':602,'multiline':False]
['text':'  determine first the nr. of bits in x','line_number':603,'multiline':False]
['text':' x >= 2^53','line_number':604,'multiline':False]
['text':' split the 64-bit value in two 32-bit halves to avoid rounding errors','line_number':605,'multiline':False]
['text':' exact conversion','line_number':606,'multiline':False]
['text':' if x < 2^53','line_number':608,'multiline':False]
['text':' exact conversion','line_number':609,'multiline':False]
['text':' unbiased exponent','line_number':619,'multiline':False]
['text':' x >= 10^10 ~= 2^33.2... (cannot fit in 32 bits)','line_number':621,'multiline':False]
['text':' set invalid flag','line_number':622,'multiline':False]
['text':' return Integer Indefinite','line_number':624,'multiline':False]
['text':' x = c(0)c(1)...c(9).c(10)...c(q-1)','line_number':627,'multiline':False]
['text':' in this case 2^29.89... ~= 10^9 <= x < 10^10 ~= 2^33.2...','line_number':628,'multiline':False]
['text':' so x rounded to an integer may or may not fit in an unsigned 32-bit int','line_number':629,'multiline':False]
['text':' the cases that do not fit are identified here; the ones that fit','line_number':630,'multiline':False]
['text':' fall through and will be handled with other cases further,','line_number':631,'multiline':False]
['text':' under '1 <= q + exp <= 10'','line_number':632,'multiline':False]
['text':' n > 0 and q + exp = 10','line_number':633,'multiline':False]
['text':' if n >= 2^32 then n is too large','line_number':634,'multiline':False]
['text':' too large if c(0)c(1)...c(9).c(10)...c(q-1) >= 2^32','line_number':635,'multiline':False]
['text':' <=> 0.c(0)c(1)...c(q-1) * 10^11 >= 0xa00000000, 1<=q<=16','line_number':636,'multiline':False]
['text':' <=> C * 10^(11-q) >= 0xa00000000, 1<=q<=16','line_number':637,'multiline':False]
['text':' Note: C * 10^(11-q) has 10 or 11 digits; 0xa00000000 has 11 digits','line_number':639,'multiline':False]
['text':' C scaled up to 11-digit int','line_number':640,'multiline':False]
['text':' c(0)c(1)...c(9)c(10) or c(0)c(1)...c(q-1)0...0 (11 digits)','line_number':641,'multiline':False]
['text':' set invalid flag','line_number':643,'multiline':False]
['text':' return Integer Indefinite','line_number':645,'multiline':False]
['text':' else cases that can be rounded to a 32-bit unsigned int fall through','line_number':649,'multiline':False]
['text':' to '1 <= q + exp <= 10'','line_number':650,'multiline':False]
['text':' if (q > 11), i.e. 12 <= q <= 16 and so -15 <= exp <= -2','line_number':651,'multiline':False]
['text':' C * 10^(11-q) >= 0xa00000000 <=>','line_number':652,'multiline':False]
['text':' C >= 0xa00000000 * 10^(q-11) where 1 <= q - 11 <= 5','line_number':653,'multiline':False]
['text':' (scale 2^32-1/2 up)','line_number':654,'multiline':False]
['text':' Note: 0xa00000000*10^(q-11) has q-1 or q digits, where q <= 16','line_number':655,'multiline':False]
['text':' set invalid flag ','line_number':658,'multiline':False]
['text':' return Integer Indefinite ','line_number':660,'multiline':False]
['text':' else cases that can be rounded to a 32-bit int fall through','line_number':664,'multiline':False]
['text':' to '1 <= q + exp <= 10'','line_number':665,'multiline':False]
['text':' n is not too large to be converted to int32 if -1 < n < 2^32','line_number':668,'multiline':False]
['text':' Note: some of the cases tested for above fall through to this point','line_number':669,'multiline':False]
['text':' n = +0.[0...0]c(0)c(1)...c(q-1)','line_number':670,'multiline':False]
['text':' return 0','line_number':671,'multiline':False]
['text':' if (1 <= q + exp <= 10, 1 <= q <= 16, -15 <= exp <= 9)','line_number':674,'multiline':False]
['text':' 1 <= x < 2^32 so x can be rounded','line_number':675,'multiline':False]
['text':' to nearest to a 32-bit unsigned integer','line_number':676,'multiline':False]
['text':' 2 <= q <= 16, -15 <= exp <= -1, 1 <= q + exp <= 10','line_number':677,'multiline':False]
['text':' 1 <= ind <= 15; ind is a synonym for 'x'','line_number':678,'multiline':False]
['text':' chop off ind digits from the lower part of C1','line_number':679,'multiline':False]
['text':' C1 fits in 64 bits','line_number':680,'multiline':False]
['text':' calculate C* and f*','line_number':681,'multiline':False]
['text':' C* is actually floor(C*) in this case','line_number':682,'multiline':False]
['text':' C* and f* need shifting and masking, as shown by','line_number':683,'multiline':False]
['text':' bid_shiftright128[] and bid_maskhigh128[]','line_number':684,'multiline':False]
['text':' 1 <= x <= 15 ','line_number':685,'multiline':False]
['text':' kx = 10^(-x) = bid_ten2mk64[ind - 1]','line_number':686,'multiline':False]
['text':' C* = C1 * 10^(-x)','line_number':687,'multiline':False]
['text':' the approximation of 10^(-x) was rounded up to 54 bits','line_number':688,'multiline':False]
['text':' the top Ex bits of 10^(-x) are T* = bid_ten2mk128trunc[ind].w[0], e.g.','line_number':691,'multiline':False]
['text':' if x=1, T*=bid_ten2mk128trunc[0].w[0]=0x1999999999999999','line_number':692,'multiline':False]
['text':' C* = floor(C*) (logical right shift; C has p decimal digits,','line_number':693,'multiline':False]
['text':'     correct by Property 1)','line_number':694,'multiline':False]
['text':' n = C* * 10^(e+x)','line_number':695,'multiline':False]
['text':' shift right C* by Ex-64 = bid_shiftright128[ind]','line_number':697,'multiline':False]
['text':' 0 <= shift <= 39','line_number':698,'multiline':False]
['text':' the result is positive','line_number':701,'multiline':False]
['text':' 1 <= q <= 10','line_number':703,'multiline':False]
['text':' res = +C (exact)','line_number':704,'multiline':False]
['text':' the result is positive','line_number':705,'multiline':False]
['text':' if (exp > 0) => 1 <= exp <= 9, 1 <= q < 9, 2 <= q + exp <= 10','line_number':706,'multiline':False]
['text':' res = +C * 10^exp (exact)','line_number':707,'multiline':False]
['text':' the result is positive','line_number':708,'multiline':False]
['text':'****************************************************************************
 *  BID64_to_uint32_xfloor
 ***************************************************************************','line_number':714,'multiline':True]
['text':' unbiased exponent','line_number':734,'multiline':False]
['text':' Note: C1 represents x_significand (BID_UINT64)','line_number':735,'multiline':False]
['text':' C* represents up to 16 decimal digits ~ 54 bits','line_number':741,'multiline':False]
['text':' check for NaN or Infinity','line_number':745,'multiline':False]
['text':' set invalid flag','line_number':747,'multiline':False]
['text':' return Integer Indefinite','line_number':749,'multiline':False]
['text':' unpack x','line_number':753,'multiline':False]
['text':' 0 for positive, MASK_SIGN for negative','line_number':754,'multiline':False]
['text':' if steering bits are 11 (condition will be 0), then exponent is G[0:w+1] =>','line_number':755,'multiline':False]
['text':' biased','line_number':757,'multiline':False]
['text':' non-canonical','line_number':759,'multiline':False]
['text':' biased','line_number':764,'multiline':False]
['text':' check for zeros (possibly from non-canonical values)','line_number':768,'multiline':False]
['text':' x is 0','line_number':770,'multiline':False]
['text':' x is not special and is not zero','line_number':774,'multiline':False]
['text':' if n < 0 the conversion is invalid','line_number':776,'multiline':False]
['text':' set invalid flag','line_number':777,'multiline':False]
['text':' return Integer Indefinite','line_number':779,'multiline':False]
['text':' q = nr. of decimal digits in x (1 <= q <= 54)','line_number':783,'multiline':False]
['text':'  determine first the nr. of bits in x','line_number':784,'multiline':False]
['text':' x >= 2^53','line_number':785,'multiline':False]
['text':' split the 64-bit value in two 32-bit halves to avoid rounding errors','line_number':786,'multiline':False]
['text':' exact conversion','line_number':787,'multiline':False]
['text':' if x < 2^53','line_number':789,'multiline':False]
['text':' exact conversion','line_number':790,'multiline':False]
['text':' unbiased exponent','line_number':800,'multiline':False]
['text':' x >= 10^10 ~= 2^33.2... (cannot fit in 32 bits)','line_number':802,'multiline':False]
['text':' set invalid flag','line_number':803,'multiline':False]
['text':' return Integer Indefinite','line_number':805,'multiline':False]
['text':' x = c(0)c(1)...c(9).c(10)...c(q-1)','line_number':808,'multiline':False]
['text':' in this case 2^29.89... ~= 10^9 <= x < 10^10 ~= 2^33.2...','line_number':809,'multiline':False]
['text':' so x rounded to an integer may or may not fit in an unsigned 32-bit int','line_number':810,'multiline':False]
['text':' the cases that do not fit are identified here; the ones that fit','line_number':811,'multiline':False]
['text':' fall through and will be handled with other cases further,','line_number':812,'multiline':False]
['text':' under '1 <= q + exp <= 10'','line_number':813,'multiline':False]
['text':' if n > 0 and q + exp = 10','line_number':814,'multiline':False]
['text':' if n >= 2^32 then n is too large','line_number':815,'multiline':False]
['text':' too large if c(0)c(1)...c(9).c(10)...c(q-1) >= 2^32','line_number':816,'multiline':False]
['text':' <=> 0.c(0)c(1)...c(q-1) * 10^11 >= 0xa00000000, 1<=q<=16','line_number':817,'multiline':False]
['text':' <=> C * 10^(11-q) >= 0xa00000000, 1<=q<=16','line_number':818,'multiline':False]
['text':' Note: C * 10^(11-q) has 10 or 11 digits; 0xa00000000 has 11 digits','line_number':820,'multiline':False]
['text':' C scaled up to 11-digit int','line_number':821,'multiline':False]
['text':' c(0)c(1)...c(9)c(10) or c(0)c(1)...c(q-1)0...0 (11 digits)','line_number':822,'multiline':False]
['text':' set invalid flag','line_number':824,'multiline':False]
['text':' return Integer Indefinite','line_number':826,'multiline':False]
['text':' else cases that can be rounded to a 32-bit unsigned int fall through','line_number':830,'multiline':False]
['text':' to '1 <= q + exp <= 10'','line_number':831,'multiline':False]
['text':' if (q > 11), i.e. 12 <= q <= 16 and so -15 <= exp <= -2','line_number':832,'multiline':False]
['text':' C * 10^(11-q) >= 0xa00000000 <=>','line_number':833,'multiline':False]
['text':' C >= 0xa00000000 * 10^(q-11) where 1 <= q - 11 <= 5','line_number':834,'multiline':False]
['text':' (scale 2^32-1/2 up)','line_number':835,'multiline':False]
['text':' Note: 0xa00000000*10^(q-11) has q-1 or q digits, where q <= 16','line_number':836,'multiline':False]
['text':' set invalid flag ','line_number':839,'multiline':False]
['text':' return Integer Indefinite ','line_number':841,'multiline':False]
['text':' else cases that can be rounded to a 32-bit int fall through','line_number':845,'multiline':False]
['text':' to '1 <= q + exp <= 10'','line_number':846,'multiline':False]
['text':' n is not too large to be converted to int32 if -1 < n < 2^32','line_number':849,'multiline':False]
['text':' Note: some of the cases tested for above fall through to this point','line_number':850,'multiline':False]
['text':' n = +/-0.[0...0]c(0)c(1)...c(q-1)','line_number':851,'multiline':False]
['text':' set inexact flag','line_number':852,'multiline':False]
['text':' return 0','line_number':854,'multiline':False]
['text':' if (1 <= q + exp <= 10, 1 <= q <= 16, -15 <= exp <= 9)','line_number':857,'multiline':False]
['text':' 1 <= x < 2^32 so x can be rounded','line_number':858,'multiline':False]
['text':' to nearest to a 32-bit unsigned integer','line_number':859,'multiline':False]
['text':' 2 <= q <= 16, -15 <= exp <= -1, 1 <= q + exp <= 10','line_number':860,'multiline':False]
['text':' 1 <= ind <= 15; ind is a synonym for 'x'','line_number':861,'multiline':False]
['text':' chop off ind digits from the lower part of C1','line_number':862,'multiline':False]
['text':' C1 fits in 64 bits','line_number':863,'multiline':False]
['text':' calculate C* and f*','line_number':864,'multiline':False]
['text':' C* is actually floor(C*) in this case','line_number':865,'multiline':False]
['text':' C* and f* need shifting and masking, as shown by','line_number':866,'multiline':False]
['text':' bid_shiftright128[] and bid_maskhigh128[]','line_number':867,'multiline':False]
['text':' 1 <= x <= 15 ','line_number':868,'multiline':False]
['text':' kx = 10^(-x) = bid_ten2mk64[ind - 1]','line_number':869,'multiline':False]
['text':' C* = C1 * 10^(-x)','line_number':870,'multiline':False]
['text':' the approximation of 10^(-x) was rounded up to 54 bits','line_number':871,'multiline':False]
['text':' the top Ex bits of 10^(-x) are T* = bid_ten2mk128trunc[ind].w[0], e.g.','line_number':876,'multiline':False]
['text':' if x=1, T*=bid_ten2mk128trunc[0].w[0]=0x1999999999999999','line_number':877,'multiline':False]
['text':' C* = floor(C*) (logical right shift; C has p decimal digits,','line_number':878,'multiline':False]
['text':'     correct by Property 1)','line_number':879,'multiline':False]
['text':' n = C* * 10^(e+x)','line_number':880,'multiline':False]
['text':' shift right C* by Ex-64 = bid_shiftright128[ind]','line_number':882,'multiline':False]
['text':' 0 <= shift <= 39','line_number':883,'multiline':False]
['text':' determine inexactness of the rounding of C*','line_number':885,'multiline':False]
['text':' if (0 < f* < 10^(-x)) then','line_number':886,'multiline':False]
['text':'   the result is exact','line_number':887,'multiline':False]
['text':' else // if (f* > T*) then','line_number':888,'multiline':False]
['text':'   the result is inexact','line_number':889,'multiline':False]
['text':' bid_ten2mk128trunc[ind -1].w[1] is identical to','line_number':892,'multiline':False]
['text':' bid_ten2mk128[ind -1].w[1]','line_number':893,'multiline':False]
['text':' set the inexact flag','line_number':894,'multiline':False]
['text':' else the result is exact','line_number':896,'multiline':False]
['text':' if 3 <= ind - 1 <= 14','line_number':897,'multiline':False]
['text':' bid_ten2mk128trunc[ind -1].w[1] is identical to','line_number':899,'multiline':False]
['text':' bid_ten2mk128[ind -1].w[1]','line_number':900,'multiline':False]
['text':' set the inexact flag','line_number':901,'multiline':False]
['text':' else the result is exact','line_number':903,'multiline':False]
['text':' the result is positive','line_number':906,'multiline':False]
['text':' 1 <= q <= 10','line_number':908,'multiline':False]
['text':' res = +C (exact)','line_number':909,'multiline':False]
['text':' the result is positive','line_number':910,'multiline':False]
['text':' if (exp > 0) => 1 <= exp <= 9, 1 <= q < 9, 2 <= q + exp <= 10','line_number':911,'multiline':False]
['text':' res = +C * 10^exp (exact)','line_number':912,'multiline':False]
['text':' the result is positive','line_number':913,'multiline':False]
['text':'****************************************************************************
 *  BID64_to_uint32_ceil
 ***************************************************************************','line_number':919,'multiline':True]
['text':' unbiased exponent','line_number':939,'multiline':False]
['text':' Note: C1 represents x_significand (BID_UINT64)','line_number':940,'multiline':False]
['text':' C* represents up to 16 decimal digits ~ 54 bits','line_number':946,'multiline':False]
['text':' check for NaN or Infinity','line_number':950,'multiline':False]
['text':' set invalid flag','line_number':952,'multiline':False]
['text':' return Integer Indefinite','line_number':954,'multiline':False]
['text':' unpack x','line_number':958,'multiline':False]
['text':' 0 for positive, MASK_SIGN for negative','line_number':959,'multiline':False]
['text':' if steering bits are 11 (condition will be 0), then exponent is G[0:w+1] =>','line_number':960,'multiline':False]
['text':' biased','line_number':962,'multiline':False]
['text':' non-canonical','line_number':964,'multiline':False]
['text':' biased','line_number':969,'multiline':False]
['text':' check for zeros (possibly from non-canonical values)','line_number':973,'multiline':False]
['text':' x is 0','line_number':975,'multiline':False]
['text':' x is not special and is not zero','line_number':979,'multiline':False]
['text':' q = nr. of decimal digits in x (1 <= q <= 54)','line_number':981,'multiline':False]
['text':'  determine first the nr. of bits in x','line_number':982,'multiline':False]
['text':' x >= 2^53','line_number':983,'multiline':False]
['text':' split the 64-bit value in two 32-bit halves to avoid rounding errors','line_number':984,'multiline':False]
['text':' exact conversion','line_number':985,'multiline':False]
['text':' if x < 2^53','line_number':987,'multiline':False]
['text':' exact conversion','line_number':988,'multiline':False]
['text':' unbiased exponent','line_number':998,'multiline':False]
['text':' x >= 10^10 ~= 2^33.2... (cannot fit in 32 bits)','line_number':1000,'multiline':False]
['text':' set invalid flag','line_number':1001,'multiline':False]
['text':' return Integer Indefinite','line_number':1003,'multiline':False]
['text':' x = c(0)c(1)...c(9).c(10)...c(q-1)','line_number':1006,'multiline':False]
['text':' in this case 2^29.89... ~= 10^9 <= x < 10^10 ~= 2^33.2...','line_number':1007,'multiline':False]
['text':' so x rounded to an integer may or may not fit in an unsigned 32-bit int','line_number':1008,'multiline':False]
['text':' the cases that do not fit are identified here; the ones that fit','line_number':1009,'multiline':False]
['text':' fall through and will be handled with other cases further,','line_number':1010,'multiline':False]
['text':' under '1 <= q + exp <= 10'','line_number':1011,'multiline':False]
['text':' if n < 0 and q + exp = 10 then x is much less than -1','line_number':1012,'multiline':False]
['text':' => set invalid flag','line_number':1013,'multiline':False]
['text':' return Integer Indefinite','line_number':1015,'multiline':False]
['text':' if n > 0 and q + exp = 10','line_number':1018,'multiline':False]
['text':' if n > 2^32 - 1 then n is too large','line_number':1019,'multiline':False]
['text':' too large if c(0)c(1)...c(9).c(10)...c(q-1) > 2^32 - 1','line_number':1020,'multiline':False]
['text':' <=> 0.c(0)c(1)...c(q-1) * 10^11 > 0x9fffffff6, 1<=q<=16','line_number':1021,'multiline':False]
['text':' <=> C * 10^(11-q) > 0x9fffffff6, 1<=q<=16','line_number':1022,'multiline':False]
['text':' Note: C * 10^(11-q) has 10 or 11 digits; 0x9fffffff6 has 11 digits','line_number':1024,'multiline':False]
['text':' C scaled up to 11-digit int','line_number':1025,'multiline':False]
['text':' c(0)c(1)...c(9)c(10) or c(0)c(1)...c(q-1)0...0 (11 digits)','line_number':1026,'multiline':False]
['text':' set invalid flag','line_number':1028,'multiline':False]
['text':' return Integer Indefinite','line_number':1030,'multiline':False]
['text':' else cases that can be rounded to a 32-bit unsigned int fall through','line_number':1034,'multiline':False]
['text':' to '1 <= q + exp <= 10'','line_number':1035,'multiline':False]
['text':' if (q > 11), i.e. 12 <= q <= 16 and so -15 <= exp <= -2','line_number':1036,'multiline':False]
['text':' C * 10^(11-q) > 0x9fffffff6 <=>','line_number':1037,'multiline':False]
['text':' C > 0x9fffffff6 * 10^(q-11) where 1 <= q - 11 <= 5','line_number':1038,'multiline':False]
['text':' (scale 2^32-1 up)','line_number':1039,'multiline':False]
['text':' Note: 0x9fffffff6*10^(q-11) has q-1 or q digits, where q <= 16','line_number':1040,'multiline':False]
['text':' set invalid flag ','line_number':1043,'multiline':False]
['text':' return Integer Indefinite ','line_number':1045,'multiline':False]
['text':' else cases that can be rounded to a 32-bit int fall through','line_number':1049,'multiline':False]
['text':' to '1 <= q + exp <= 10'','line_number':1050,'multiline':False]
['text':' n is not too large to be converted to int32 if -1 < n < 2^32','line_number':1054,'multiline':False]
['text':' Note: some of the cases tested for above fall through to this point','line_number':1055,'multiline':False]
['text':' n = +/-0.[0...0]c(0)c(1)...c(q-1)','line_number':1056,'multiline':False]
['text':' return 0 or 1','line_number':1057,'multiline':False]
['text':' if (1 <= q + exp <= 10, 1 <= q <= 16, -15 <= exp <= 9)','line_number':1063,'multiline':False]
['text':' x <= -1 or 1 <= x <= 2^32 - 1 so if positive, x can be ','line_number':1064,'multiline':False]
['text':' rounded to nearest to a 32-bit unsigned integer','line_number':1065,'multiline':False]
['text':' x <= -1','line_number':1066,'multiline':False]
['text':' set invalid flag','line_number':1067,'multiline':False]
['text':' return Integer Indefinite','line_number':1069,'multiline':False]
['text':' 1 <= x <= 2^32 - 1 so x can be rounded','line_number':1073,'multiline':False]
['text':' to nearest to a 32-bit unsigned integer','line_number':1074,'multiline':False]
['text':' 2 <= q <= 16, -15 <= exp <= -1, 1 <= q + exp <= 10','line_number':1075,'multiline':False]
['text':' 1 <= ind <= 15; ind is a synonym for 'x'','line_number':1076,'multiline':False]
['text':' chop off ind digits from the lower part of C1','line_number':1077,'multiline':False]
['text':' C1 fits in 64 bits','line_number':1078,'multiline':False]
['text':' calculate C* and f*','line_number':1079,'multiline':False]
['text':' C* is actually floor(C*) in this case','line_number':1080,'multiline':False]
['text':' C* and f* need shifting and masking, as shown by','line_number':1081,'multiline':False]
['text':' bid_shiftright128[] and bid_maskhigh128[]','line_number':1082,'multiline':False]
['text':' 1 <= x <= 15 ','line_number':1083,'multiline':False]
['text':' kx = 10^(-x) = bid_ten2mk64[ind - 1]','line_number':1084,'multiline':False]
['text':' C* = C1 * 10^(-x)','line_number':1085,'multiline':False]
['text':' the approximation of 10^(-x) was rounded up to 54 bits','line_number':1086,'multiline':False]
['text':' the top Ex bits of 10^(-x) are T* = bid_ten2mk128trunc[ind].w[0], e.g.','line_number':1091,'multiline':False]
['text':' if x=1, T*=bid_ten2mk128trunc[0].w[0]=0x1999999999999999','line_number':1092,'multiline':False]
['text':' C* = floor(C*) (logical right shift; C has p decimal digits,','line_number':1093,'multiline':False]
['text':'     correct by Property 1)','line_number':1094,'multiline':False]
['text':' n = C* * 10^(e+x)','line_number':1095,'multiline':False]
['text':' shift right C* by Ex-64 = bid_shiftright128[ind]','line_number':1097,'multiline':False]
['text':' 0 <= shift <= 39','line_number':1098,'multiline':False]
['text':' determine inexactness of the rounding of C*','line_number':1100,'multiline':False]
['text':' if (0 < f* < 10^(-x)) then','line_number':1101,'multiline':False]
['text':'   the result is exact','line_number':1102,'multiline':False]
['text':' else // if (f* > T*) then','line_number':1103,'multiline':False]
['text':'   the result is inexact','line_number':1104,'multiline':False]
['text':' fstar.w[1] is 0','line_number':1105,'multiline':False]
['text':' bid_ten2mk128trunc[ind -1].w[1] is identical to','line_number':1107,'multiline':False]
['text':' bid_ten2mk128[ind -1].w[1]','line_number':1108,'multiline':False]
['text':' else the result is exact','line_number':1110,'multiline':False]
['text':' if 3 <= ind - 1 <= 14','line_number':1111,'multiline':False]
['text':' bid_ten2mk128trunc[ind -1].w[1] is identical to','line_number':1113,'multiline':False]
['text':' bid_ten2mk128[ind -1].w[1]','line_number':1114,'multiline':False]
['text':' else the result is exact','line_number':1116,'multiline':False]
['text':' the result is positive','line_number':1119,'multiline':False]
['text':' 1 <= q <= 10','line_number':1121,'multiline':False]
['text':' res = +C (exact)','line_number':1122,'multiline':False]
['text':' the result is positive','line_number':1123,'multiline':False]
['text':' if (exp > 0) => 1 <= exp <= 9, 1 <= q < 9, 2 <= q + exp <= 10','line_number':1124,'multiline':False]
['text':' res = +C * 10^exp (exact)','line_number':1125,'multiline':False]
['text':' the result is positive','line_number':1126,'multiline':False]
['text':'****************************************************************************
 *  BID64_to_uint32_xceil
 ***************************************************************************','line_number':1132,'multiline':True]
['text':' unbiased exponent','line_number':1152,'multiline':False]
['text':' Note: C1 represents x_significand (BID_UINT64)','line_number':1153,'multiline':False]
['text':' C* represents up to 16 decimal digits ~ 54 bits','line_number':1159,'multiline':False]
['text':' check for NaN or Infinity','line_number':1163,'multiline':False]
['text':' set invalid flag','line_number':1165,'multiline':False]
['text':' return Integer Indefinite','line_number':1167,'multiline':False]
['text':' unpack x','line_number':1171,'multiline':False]
['text':' 0 for positive, MASK_SIGN for negative','line_number':1172,'multiline':False]
['text':' if steering bits are 11 (condition will be 0), then exponent is G[0:w+1] =>','line_number':1173,'multiline':False]
['text':' biased','line_number':1175,'multiline':False]
['text':' non-canonical','line_number':1177,'multiline':False]
['text':' biased','line_number':1182,'multiline':False]
['text':' check for zeros (possibly from non-canonical values)','line_number':1186,'multiline':False]
['text':' x is 0','line_number':1188,'multiline':False]
['text':' x is not special and is not zero','line_number':1192,'multiline':False]
['text':' q = nr. of decimal digits in x (1 <= q <= 54)','line_number':1194,'multiline':False]
['text':'  determine first the nr. of bits in x','line_number':1195,'multiline':False]
['text':' x >= 2^53','line_number':1196,'multiline':False]
['text':' split the 64-bit value in two 32-bit halves to avoid rounding errors','line_number':1197,'multiline':False]
['text':' exact conversion','line_number':1198,'multiline':False]
['text':' if x < 2^53','line_number':1200,'multiline':False]
['text':' exact conversion','line_number':1201,'multiline':False]
['text':' unbiased exponent','line_number':1211,'multiline':False]
['text':' x >= 10^10 ~= 2^33.2... (cannot fit in 32 bits)','line_number':1213,'multiline':False]
['text':' set invalid flag','line_number':1214,'multiline':False]
['text':' return Integer Indefinite','line_number':1216,'multiline':False]
['text':' x = c(0)c(1)...c(9).c(10)...c(q-1)','line_number':1219,'multiline':False]
['text':' in this case 2^29.89... ~= 10^9 <= x < 10^10 ~= 2^33.2...','line_number':1220,'multiline':False]
['text':' so x rounded to an integer may or may not fit in an unsigned 32-bit int','line_number':1221,'multiline':False]
['text':' the cases that do not fit are identified here; the ones that fit','line_number':1222,'multiline':False]
['text':' fall through and will be handled with other cases further,','line_number':1223,'multiline':False]
['text':' under '1 <= q + exp <= 10'','line_number':1224,'multiline':False]
['text':' if n < 0 and q + exp = 10 then x is much less than -1','line_number':1225,'multiline':False]
['text':' => set invalid flag','line_number':1226,'multiline':False]
['text':' return Integer Indefinite','line_number':1228,'multiline':False]
['text':' if n > 0 and q + exp = 10','line_number':1231,'multiline':False]
['text':' if n > 2^32 - 1 then n is too large','line_number':1232,'multiline':False]
['text':' too large if c(0)c(1)...c(9).c(10)...c(q-1) > 2^32 - 1','line_number':1233,'multiline':False]
['text':' <=> 0.c(0)c(1)...c(q-1) * 10^11 > 0x9fffffff6, 1<=q<=16','line_number':1234,'multiline':False]
['text':' <=> C * 10^(11-q) > 0x9fffffff6, 1<=q<=16','line_number':1235,'multiline':False]
['text':' Note: C * 10^(11-q) has 10 or 11 digits; 0x9fffffff6 has 11 digits','line_number':1237,'multiline':False]
['text':' C scaled up to 11-digit int','line_number':1238,'multiline':False]
['text':' c(0)c(1)...c(9)c(10) or c(0)c(1)...c(q-1)0...0 (11 digits)','line_number':1239,'multiline':False]
['text':' set invalid flag','line_number':1241,'multiline':False]
['text':' return Integer Indefinite','line_number':1243,'multiline':False]
['text':' else cases that can be rounded to a 32-bit unsigned int fall through','line_number':1247,'multiline':False]
['text':' to '1 <= q + exp <= 10'','line_number':1248,'multiline':False]
['text':' if (q > 11), i.e. 12 <= q <= 16 and so -15 <= exp <= -2','line_number':1249,'multiline':False]
['text':' C * 10^(11-q) > 0x9fffffff6 <=>','line_number':1250,'multiline':False]
['text':' C > 0x9fffffff6 * 10^(q-11) where 1 <= q - 11 <= 5','line_number':1251,'multiline':False]
['text':' (scale 2^32-1 up)','line_number':1252,'multiline':False]
['text':' Note: 0x9fffffff6*10^(q-11) has q-1 or q digits, where q <= 16','line_number':1253,'multiline':False]
['text':' set invalid flag ','line_number':1256,'multiline':False]
['text':' return Integer Indefinite ','line_number':1258,'multiline':False]
['text':' else cases that can be rounded to a 32-bit int fall through','line_number':1262,'multiline':False]
['text':' to '1 <= q + exp <= 10'','line_number':1263,'multiline':False]
['text':' n is not too large to be converted to int32 if -1 < n < 2^32','line_number':1267,'multiline':False]
['text':' Note: some of the cases tested for above fall through to this point','line_number':1268,'multiline':False]
['text':' n = +/-0.[0...0]c(0)c(1)...c(q-1)','line_number':1269,'multiline':False]
['text':' set inexact flag','line_number':1270,'multiline':False]
['text':' return 0 or 1','line_number':1272,'multiline':False]
['text':' if (1 <= q + exp <= 10, 1 <= q <= 16, -15 <= exp <= 9)','line_number':1278,'multiline':False]
['text':' x <= -1 or 1 <= x < 2^32 so if positive, x can be ','line_number':1279,'multiline':False]
['text':' rounded to nearest to a 32-bit unsigned integer','line_number':1280,'multiline':False]
['text':' x <= -1','line_number':1281,'multiline':False]
['text':' set invalid flag','line_number':1282,'multiline':False]
['text':' return Integer Indefinite','line_number':1284,'multiline':False]
['text':' 1 <= x < 2^32 so x can be rounded','line_number':1288,'multiline':False]
['text':' to nearest to a 32-bit unsigned integer','line_number':1289,'multiline':False]
['text':' 2 <= q <= 16, -15 <= exp <= -1, 1 <= q + exp <= 10','line_number':1290,'multiline':False]
['text':' 1 <= ind <= 15; ind is a synonym for 'x'','line_number':1291,'multiline':False]
['text':' chop off ind digits from the lower part of C1','line_number':1292,'multiline':False]
['text':' C1 fits in 64 bits','line_number':1293,'multiline':False]
['text':' calculate C* and f*','line_number':1294,'multiline':False]
['text':' C* is actually floor(C*) in this case','line_number':1295,'multiline':False]
['text':' C* and f* need shifting and masking, as shown by','line_number':1296,'multiline':False]
['text':' bid_shiftright128[] and bid_maskhigh128[]','line_number':1297,'multiline':False]
['text':' 1 <= x <= 15 ','line_number':1298,'multiline':False]
['text':' kx = 10^(-x) = bid_ten2mk64[ind - 1]','line_number':1299,'multiline':False]
['text':' C* = C1 * 10^(-x)','line_number':1300,'multiline':False]
['text':' the approximation of 10^(-x) was rounded up to 54 bits','line_number':1301,'multiline':False]
['text':' the top Ex bits of 10^(-x) are T* = bid_ten2mk128trunc[ind].w[0], e.g.','line_number':1306,'multiline':False]
['text':' if x=1, T*=bid_ten2mk128trunc[0].w[0]=0x1999999999999999','line_number':1307,'multiline':False]
['text':' C* = floor(C*) (logical right shift; C has p decimal digits,','line_number':1308,'multiline':False]
['text':'     correct by Property 1)','line_number':1309,'multiline':False]
['text':' n = C* * 10^(e+x)','line_number':1310,'multiline':False]
['text':' shift right C* by Ex-64 = bid_shiftright128[ind]','line_number':1312,'multiline':False]
['text':' 0 <= shift <= 39','line_number':1313,'multiline':False]
['text':' determine inexactness of the rounding of C*','line_number':1315,'multiline':False]
['text':' if (0 < f* < 10^(-x)) then','line_number':1316,'multiline':False]
['text':'   the result is exact','line_number':1317,'multiline':False]
['text':' else // if (f* > T*) then','line_number':1318,'multiline':False]
['text':'   the result is inexact','line_number':1319,'multiline':False]
['text':' fstar.w[1] is 0','line_number':1320,'multiline':False]
['text':' bid_ten2mk128trunc[ind -1].w[1] is identical to','line_number':1322,'multiline':False]
['text':' bid_ten2mk128[ind -1].w[1]','line_number':1323,'multiline':False]
['text':' set the inexact flag','line_number':1325,'multiline':False]
['text':' else the result is exact','line_number':1327,'multiline':False]
['text':' if 3 <= ind - 1 <= 14','line_number':1328,'multiline':False]
['text':' bid_ten2mk128trunc[ind -1].w[1] is identical to','line_number':1330,'multiline':False]
['text':' bid_ten2mk128[ind -1].w[1]','line_number':1331,'multiline':False]
['text':' set the inexact flag','line_number':1333,'multiline':False]
['text':' else the result is exact','line_number':1335,'multiline':False]
['text':' the result is positive','line_number':1338,'multiline':False]
['text':' 1 <= q <= 10','line_number':1340,'multiline':False]
['text':' res = +C (exact)','line_number':1341,'multiline':False]
['text':' the result is positive','line_number':1342,'multiline':False]
['text':' if (exp > 0) => 1 <= exp <= 9, 1 <= q < 9, 2 <= q + exp <= 10','line_number':1343,'multiline':False]
['text':' res = +C * 10^exp (exact)','line_number':1344,'multiline':False]
['text':' the result is positive','line_number':1345,'multiline':False]
['text':'****************************************************************************
 *  BID64_to_uint32_int
 ***************************************************************************','line_number':1351,'multiline':True]
['text':' unbiased exponent','line_number':1371,'multiline':False]
['text':' Note: C1 represents x_significand (BID_UINT64)','line_number':1372,'multiline':False]
['text':' C* represents up to 16 decimal digits ~ 54 bits','line_number':1378,'multiline':False]
['text':' check for NaN or Infinity','line_number':1381,'multiline':False]
['text':' set invalid flag','line_number':1383,'multiline':False]
['text':' return Integer Indefinite','line_number':1385,'multiline':False]
['text':' unpack x','line_number':1389,'multiline':False]
['text':' 0 for positive, MASK_SIGN for negative','line_number':1390,'multiline':False]
['text':' if steering bits are 11 (condition will be 0), then exponent is G[0:w+1] =>','line_number':1391,'multiline':False]
['text':' biased','line_number':1393,'multiline':False]
['text':' non-canonical','line_number':1395,'multiline':False]
['text':' biased','line_number':1400,'multiline':False]
['text':' check for zeros (possibly from non-canonical values)','line_number':1404,'multiline':False]
['text':' x is 0','line_number':1406,'multiline':False]
['text':' x is not special and is not zero','line_number':1410,'multiline':False]
['text':' q = nr. of decimal digits in x (1 <= q <= 54)','line_number':1412,'multiline':False]
['text':'  determine first the nr. of bits in x','line_number':1413,'multiline':False]
['text':' x >= 2^53','line_number':1414,'multiline':False]
['text':' split the 64-bit value in two 32-bit halves to avoid rounding errors','line_number':1415,'multiline':False]
['text':' exact conversion','line_number':1416,'multiline':False]
['text':' if x < 2^53','line_number':1418,'multiline':False]
['text':' exact conversion','line_number':1419,'multiline':False]
['text':' unbiased exponent','line_number':1429,'multiline':False]
['text':' x >= 10^10 ~= 2^33.2... (cannot fit in 32 bits)','line_number':1431,'multiline':False]
['text':' set invalid flag','line_number':1432,'multiline':False]
['text':' return Integer Indefinite','line_number':1434,'multiline':False]
['text':' x = c(0)c(1)...c(9).c(10)...c(q-1)','line_number':1437,'multiline':False]
['text':' in this case 2^29.89... ~= 10^9 <= x < 10^10 ~= 2^33.2...','line_number':1438,'multiline':False]
['text':' so x rounded to an integer may or may not fit in an unsigned 32-bit int','line_number':1439,'multiline':False]
['text':' the cases that do not fit are identified here; the ones that fit','line_number':1440,'multiline':False]
['text':' fall through and will be handled with other cases further,','line_number':1441,'multiline':False]
['text':' under '1 <= q + exp <= 10'','line_number':1442,'multiline':False]
['text':' if n < 0 and q + exp = 10 then x is much less than -1','line_number':1443,'multiline':False]
['text':' => set invalid flag','line_number':1444,'multiline':False]
['text':' return Integer Indefinite','line_number':1446,'multiline':False]
['text':' if n > 0 and q + exp = 10','line_number':1449,'multiline':False]
['text':' if n >= 2^32 then n is too large','line_number':1450,'multiline':False]
['text':' too large if c(0)c(1)...c(9).c(10)...c(q-1) >= 2^32','line_number':1451,'multiline':False]
['text':' <=> 0.c(0)c(1)...c(q-1) * 10^11 >= 0xa00000000, 1<=q<=16','line_number':1452,'multiline':False]
['text':' <=> C * 10^(11-q) >= 0xa00000000, 1<=q<=16','line_number':1453,'multiline':False]
['text':' Note: C * 10^(11-q) has 10 or 11 digits; 0xa00000000 has 11 digits','line_number':1455,'multiline':False]
['text':' C scaled up to 11-digit int','line_number':1456,'multiline':False]
['text':' c(0)c(1)...c(9)c(10) or c(0)c(1)...c(q-1)0...0 (11 digits)','line_number':1457,'multiline':False]
['text':' set invalid flag','line_number':1459,'multiline':False]
['text':' return Integer Indefinite','line_number':1461,'multiline':False]
['text':' else cases that can be rounded to a 32-bit unsigned int fall through','line_number':1465,'multiline':False]
['text':' to '1 <= q + exp <= 10'','line_number':1466,'multiline':False]
['text':' if (q > 11), i.e. 12 <= q <= 16 and so -15 <= exp <= -2','line_number':1467,'multiline':False]
['text':' C * 10^(11-q) >= 0xa00000000 <=>','line_number':1468,'multiline':False]
['text':' C >= 0xa00000000 * 10^(q-11) where 1 <= q - 11 <= 5','line_number':1469,'multiline':False]
['text':' (scale 2^32-1/2 up)','line_number':1470,'multiline':False]
['text':' Note: 0xa00000000*10^(q-11) has q-1 or q digits, where q <= 16','line_number':1471,'multiline':False]
['text':' set invalid flag ','line_number':1474,'multiline':False]
['text':' return Integer Indefinite ','line_number':1476,'multiline':False]
['text':' else cases that can be rounded to a 32-bit int fall through','line_number':1480,'multiline':False]
['text':' to '1 <= q + exp <= 10'','line_number':1481,'multiline':False]
['text':' n is not too large to be converted to int32 if -1 < n < 2^32','line_number':1485,'multiline':False]
['text':' Note: some of the cases tested for above fall through to this point','line_number':1486,'multiline':False]
['text':' n = +/-0.[0...0]c(0)c(1)...c(q-1)','line_number':1487,'multiline':False]
['text':' return 0','line_number':1488,'multiline':False]
['text':' if (1 <= q + exp <= 10, 1 <= q <= 16, -15 <= exp <= 9)','line_number':1491,'multiline':False]
['text':' x <= -1 or 1 <= x < 2^32 so if positive, x can be ','line_number':1492,'multiline':False]
['text':' rounded to nearest to a 32-bit unsigned integer','line_number':1493,'multiline':False]
['text':' x <= -1','line_number':1494,'multiline':False]
['text':' set invalid flag','line_number':1495,'multiline':False]
['text':' return Integer Indefinite','line_number':1497,'multiline':False]
['text':' 1 <= x < 2^32 so x can be rounded','line_number':1501,'multiline':False]
['text':' to nearest to a 32-bit unsigned integer','line_number':1502,'multiline':False]
['text':' 2 <= q <= 16, -15 <= exp <= -1, 1 <= q + exp <= 10','line_number':1503,'multiline':False]
['text':' 1 <= ind <= 15; ind is a synonym for 'x'','line_number':1504,'multiline':False]
['text':' chop off ind digits from the lower part of C1','line_number':1505,'multiline':False]
['text':' C1 fits in 64 bits','line_number':1506,'multiline':False]
['text':' calculate C* and f*','line_number':1507,'multiline':False]
['text':' C* is actually floor(C*) in this case','line_number':1508,'multiline':False]
['text':' C* and f* need shifting and masking, as shown by','line_number':1509,'multiline':False]
['text':' bid_shiftright128[] and bid_maskhigh128[]','line_number':1510,'multiline':False]
['text':' 1 <= x <= 15 ','line_number':1511,'multiline':False]
['text':' kx = 10^(-x) = bid_ten2mk64[ind - 1]','line_number':1512,'multiline':False]
['text':' C* = C1 * 10^(-x)','line_number':1513,'multiline':False]
['text':' the approximation of 10^(-x) was rounded up to 54 bits','line_number':1514,'multiline':False]
['text':' the top Ex bits of 10^(-x) are T* = bid_ten2mk128trunc[ind].w[0], e.g.','line_number':1517,'multiline':False]
['text':' if x=1, T*=bid_ten2mk128trunc[0].w[0]=0x1999999999999999','line_number':1518,'multiline':False]
['text':' C* = floor(C*) (logical right shift; C has p decimal digits,','line_number':1519,'multiline':False]
['text':'     correct by Property 1)','line_number':1520,'multiline':False]
['text':' n = C* * 10^(e+x)','line_number':1521,'multiline':False]
['text':' shift right C* by Ex-64 = bid_shiftright128[ind]','line_number':1523,'multiline':False]
['text':' 0 <= shift <= 39','line_number':1524,'multiline':False]
['text':' the result is positive','line_number':1527,'multiline':False]
['text':' 1 <= q <= 10','line_number':1529,'multiline':False]
['text':' res = +C (exact)','line_number':1530,'multiline':False]
['text':' the result is positive','line_number':1531,'multiline':False]
['text':' if (exp > 0) => 1 <= exp <= 9, 1 <= q < 9, 2 <= q + exp <= 10','line_number':1532,'multiline':False]
['text':' res = +C * 10^exp (exact)','line_number':1533,'multiline':False]
['text':' the result is positive','line_number':1534,'multiline':False]
['text':'****************************************************************************
 *  BID64_to_uint32_xint
 ***************************************************************************','line_number':1540,'multiline':True]
['text':' unbiased exponent','line_number':1560,'multiline':False]
['text':' Note: C1 represents x_significand (BID_UINT64)','line_number':1561,'multiline':False]
['text':' C* represents up to 16 decimal digits ~ 54 bits','line_number':1567,'multiline':False]
['text':' check for NaN or Infinity','line_number':1571,'multiline':False]
['text':' set invalid flag','line_number':1573,'multiline':False]
['text':' return Integer Indefinite','line_number':1575,'multiline':False]
['text':' unpack x','line_number':1579,'multiline':False]
['text':' 0 for positive, MASK_SIGN for negative','line_number':1580,'multiline':False]
['text':' if steering bits are 11 (condition will be 0), then exponent is G[0:w+1] =>','line_number':1581,'multiline':False]
['text':' biased','line_number':1583,'multiline':False]
['text':' non-canonical','line_number':1585,'multiline':False]
['text':' biased','line_number':1590,'multiline':False]
['text':' check for zeros (possibly from non-canonical values)','line_number':1594,'multiline':False]
['text':' x is 0','line_number':1596,'multiline':False]
['text':' x is not special and is not zero','line_number':1600,'multiline':False]
['text':' q = nr. of decimal digits in x (1 <= q <= 54)','line_number':1602,'multiline':False]
['text':'  determine first the nr. of bits in x','line_number':1603,'multiline':False]
['text':' x >= 2^53','line_number':1604,'multiline':False]
['text':' split the 64-bit value in two 32-bit halves to avoid rounding errors','line_number':1605,'multiline':False]
['text':' exact conversion','line_number':1606,'multiline':False]
['text':' if x < 2^53','line_number':1608,'multiline':False]
['text':' exact conversion','line_number':1609,'multiline':False]
['text':' unbiased exponent','line_number':1619,'multiline':False]
['text':' x >= 10^10 ~= 2^33.2... (cannot fit in 32 bits)','line_number':1621,'multiline':False]
['text':' set invalid flag','line_number':1622,'multiline':False]
['text':' return Integer Indefinite','line_number':1624,'multiline':False]
['text':' x = c(0)c(1)...c(9).c(10)...c(q-1)','line_number':1627,'multiline':False]
['text':' in this case 2^29.89... ~= 10^9 <= x < 10^10 ~= 2^33.2...','line_number':1628,'multiline':False]
['text':' so x rounded to an integer may or may not fit in an unsigned 32-bit int','line_number':1629,'multiline':False]
['text':' the cases that do not fit are identified here; the ones that fit','line_number':1630,'multiline':False]
['text':' fall through and will be handled with other cases further,','line_number':1631,'multiline':False]
['text':' under '1 <= q + exp <= 10'','line_number':1632,'multiline':False]
['text':' if n < 0 and q + exp = 10 then x is much less than -1','line_number':1633,'multiline':False]
['text':' => set invalid flag','line_number':1634,'multiline':False]
['text':' return Integer Indefinite','line_number':1636,'multiline':False]
['text':' if n > 0 and q + exp = 10','line_number':1639,'multiline':False]
['text':' if n >= 2^32 then n is too large','line_number':1640,'multiline':False]
['text':' too large if c(0)c(1)...c(9).c(10)...c(q-1) >= 2^32','line_number':1641,'multiline':False]
['text':' <=> 0.c(0)c(1)...c(q-1) * 10^11 >= 0xa00000000, 1<=q<=16','line_number':1642,'multiline':False]
['text':' <=> C * 10^(11-q) >= 0xa00000000, 1<=q<=16','line_number':1643,'multiline':False]
['text':' Note: C * 10^(11-q) has 10 or 11 digits; 0xa00000000 has 11 digits','line_number':1645,'multiline':False]
['text':' C scaled up to 11-digit int','line_number':1646,'multiline':False]
['text':' c(0)c(1)...c(9)c(10) or c(0)c(1)...c(q-1)0...0 (11 digits)','line_number':1647,'multiline':False]
['text':' set invalid flag','line_number':1649,'multiline':False]
['text':' return Integer Indefinite','line_number':1651,'multiline':False]
['text':' else cases that can be rounded to a 32-bit unsigned int fall through','line_number':1655,'multiline':False]
['text':' to '1 <= q + exp <= 10'','line_number':1656,'multiline':False]
['text':' if (q > 11), i.e. 12 <= q <= 16 and so -15 <= exp <= -2','line_number':1657,'multiline':False]
['text':' C * 10^(11-q) >= 0xa00000000 <=>','line_number':1658,'multiline':False]
['text':' C >= 0xa00000000 * 10^(q-11) where 1 <= q - 11 <= 5','line_number':1659,'multiline':False]
['text':' (scale 2^32-1/2 up)','line_number':1660,'multiline':False]
['text':' Note: 0xa00000000*10^(q-11) has q-1 or q digits, where q <= 16','line_number':1661,'multiline':False]
['text':' set invalid flag ','line_number':1664,'multiline':False]
['text':' return Integer Indefinite ','line_number':1666,'multiline':False]
['text':' else cases that can be rounded to a 32-bit int fall through','line_number':1670,'multiline':False]
['text':' to '1 <= q + exp <= 10'','line_number':1671,'multiline':False]
['text':' n is not too large to be converted to int32 if -1 < n < 2^32','line_number':1675,'multiline':False]
['text':' Note: some of the cases tested for above fall through to this point','line_number':1676,'multiline':False]
['text':' n = +/-0.[0...0]c(0)c(1)...c(q-1)','line_number':1677,'multiline':False]
['text':' set inexact flag','line_number':1678,'multiline':False]
['text':' return 0','line_number':1680,'multiline':False]
['text':' if (1 <= q + exp <= 10, 1 <= q <= 16, -15 <= exp <= 9)','line_number':1683,'multiline':False]
['text':' x <= -1 or 1 <= x < 2^32 so if positive, x can be ','line_number':1684,'multiline':False]
['text':' rounded to nearest to a 32-bit unsigned integer','line_number':1685,'multiline':False]
['text':' x <= -1','line_number':1686,'multiline':False]
['text':' set invalid flag','line_number':1687,'multiline':False]
['text':' return Integer Indefinite','line_number':1689,'multiline':False]
['text':' 1 <= x < 2^32 so x can be rounded','line_number':1693,'multiline':False]
['text':' to nearest to a 32-bit unsigned integer','line_number':1694,'multiline':False]
['text':' 2 <= q <= 16, -15 <= exp <= -1, 1 <= q + exp <= 10','line_number':1695,'multiline':False]
['text':' 1 <= ind <= 15; ind is a synonym for 'x'','line_number':1696,'multiline':False]
['text':' chop off ind digits from the lower part of C1','line_number':1697,'multiline':False]
['text':' C1 fits in 64 bits','line_number':1698,'multiline':False]
['text':' calculate C* and f*','line_number':1699,'multiline':False]
['text':' C* is actually floor(C*) in this case','line_number':1700,'multiline':False]
['text':' C* and f* need shifting and masking, as shown by','line_number':1701,'multiline':False]
['text':' bid_shiftright128[] and bid_maskhigh128[]','line_number':1702,'multiline':False]
['text':' 1 <= x <= 15 ','line_number':1703,'multiline':False]
['text':' kx = 10^(-x) = bid_ten2mk64[ind - 1]','line_number':1704,'multiline':False]
['text':' C* = C1 * 10^(-x)','line_number':1705,'multiline':False]
['text':' the approximation of 10^(-x) was rounded up to 54 bits','line_number':1706,'multiline':False]
['text':' the top Ex bits of 10^(-x) are T* = bid_ten2mk128trunc[ind].w[0], e.g.','line_number':1711,'multiline':False]
['text':' if x=1, T*=bid_ten2mk128trunc[0].w[0]=0x1999999999999999','line_number':1712,'multiline':False]
['text':' C* = floor(C*) (logical right shift; C has p decimal digits,','line_number':1713,'multiline':False]
['text':'     correct by Property 1)','line_number':1714,'multiline':False]
['text':' n = C* * 10^(e+x)','line_number':1715,'multiline':False]
['text':' shift right C* by Ex-64 = bid_shiftright128[ind]','line_number':1717,'multiline':False]
['text':' 0 <= shift <= 39','line_number':1718,'multiline':False]
['text':' determine inexactness of the rounding of C*','line_number':1720,'multiline':False]
['text':' if (0 < f* < 10^(-x)) then','line_number':1721,'multiline':False]
['text':'   the result is exact','line_number':1722,'multiline':False]
['text':' else // if (f* > T*) then','line_number':1723,'multiline':False]
['text':'   the result is inexact','line_number':1724,'multiline':False]
['text':' fstar.w[1] is 0','line_number':1725,'multiline':False]
['text':' bid_ten2mk128trunc[ind -1].w[1] is identical to','line_number':1727,'multiline':False]
['text':' bid_ten2mk128[ind -1].w[1]','line_number':1728,'multiline':False]
['text':' set the inexact flag','line_number':1729,'multiline':False]
['text':' else the result is exact','line_number':1731,'multiline':False]
['text':' if 3 <= ind - 1 <= 14','line_number':1732,'multiline':False]
['text':' bid_ten2mk128trunc[ind -1].w[1] is identical to','line_number':1734,'multiline':False]
['text':' bid_ten2mk128[ind -1].w[1]','line_number':1735,'multiline':False]
['text':' set the inexact flag','line_number':1736,'multiline':False]
['text':' else the result is exact','line_number':1738,'multiline':False]
['text':' the result is positive','line_number':1741,'multiline':False]
['text':' 1 <= q <= 10','line_number':1743,'multiline':False]
['text':' res = +C (exact)','line_number':1744,'multiline':False]
['text':' the result is positive','line_number':1745,'multiline':False]
['text':' if (exp > 0) => 1 <= exp <= 9, 1 <= q < 9, 2 <= q + exp <= 10','line_number':1746,'multiline':False]
['text':' res = +C * 10^exp (exact)','line_number':1747,'multiline':False]
['text':' the result is positive','line_number':1748,'multiline':False]
['text':'****************************************************************************
 *  BID64_to_uint32_rninta
 ***************************************************************************','line_number':1754,'multiline':True]
['text':' unbiased exponent','line_number':1774,'multiline':False]
['text':' Note: C1 represents x_significand (BID_UINT64)','line_number':1775,'multiline':False]
['text':' C* represents up to 16 decimal digits ~ 54 bits','line_number':1781,'multiline':False]
['text':' check for NaN or Infinity','line_number':1784,'multiline':False]
['text':' set invalid flag','line_number':1786,'multiline':False]
['text':' return Integer Indefinite','line_number':1788,'multiline':False]
['text':' unpack x','line_number':1792,'multiline':False]
['text':' 0 for positive, MASK_SIGN for negative','line_number':1793,'multiline':False]
['text':' if steering bits are 11 (condition will be 0), then exponent is G[0:w+1] =>','line_number':1794,'multiline':False]
['text':' biased','line_number':1796,'multiline':False]
['text':' non-canonical','line_number':1798,'multiline':False]
['text':' biased','line_number':1803,'multiline':False]
['text':' check for zeros (possibly from non-canonical values)','line_number':1807,'multiline':False]
['text':' x is 0','line_number':1809,'multiline':False]
['text':' x is not special and is not zero','line_number':1813,'multiline':False]
['text':' q = nr. of decimal digits in x (1 <= q <= 54)','line_number':1815,'multiline':False]
['text':'  determine first the nr. of bits in x','line_number':1816,'multiline':False]
['text':' x >= 2^53','line_number':1817,'multiline':False]
['text':' split the 64-bit value in two 32-bit halves to avoid rounding errors','line_number':1818,'multiline':False]
['text':' exact conversion','line_number':1819,'multiline':False]
['text':' if x < 2^53','line_number':1821,'multiline':False]
['text':' exact conversion','line_number':1822,'multiline':False]
['text':' unbiased exponent','line_number':1832,'multiline':False]
['text':' x >= 10^10 ~= 2^33.2... (cannot fit in 32 bits)','line_number':1834,'multiline':False]
['text':' set invalid flag','line_number':1835,'multiline':False]
['text':' return Integer Indefinite','line_number':1837,'multiline':False]
['text':' x = c(0)c(1)...c(9).c(10)...c(q-1)','line_number':1840,'multiline':False]
['text':' in this case 2^29.89... ~= 10^9 <= x < 10^10 ~= 2^33.2...','line_number':1841,'multiline':False]
['text':' so x rounded to an integer may or may not fit in an unsigned 32-bit int','line_number':1842,'multiline':False]
['text':' the cases that do not fit are identified here; the ones that fit','line_number':1843,'multiline':False]
['text':' fall through and will be handled with other cases further,','line_number':1844,'multiline':False]
['text':' under '1 <= q + exp <= 10'','line_number':1845,'multiline':False]
['text':' if n < 0 and q + exp = 10 then x is much less than -1/2','line_number':1846,'multiline':False]
['text':' => set invalid flag','line_number':1847,'multiline':False]
['text':' return Integer Indefinite','line_number':1849,'multiline':False]
['text':' if n > 0 and q + exp = 10','line_number':1852,'multiline':False]
['text':' if n >= 2^32 - 1/2 then n is too large','line_number':1853,'multiline':False]
['text':' too large if c(0)c(1)...c(9).c(10)...c(q-1) >= 2^32-1/2','line_number':1854,'multiline':False]
['text':' <=> 0.c(0)c(1)...c(q-1) * 10^11 >= 0x9fffffffb, 1<=q<=16','line_number':1855,'multiline':False]
['text':' <=> C * 10^(11-q) >= 0x9fffffffb, 1<=q<=16','line_number':1856,'multiline':False]
['text':' Note: C * 10^(11-q) has 10 or 11 digits; 0x9fffffffb has 11 digits','line_number':1858,'multiline':False]
['text':' C scaled up to 11-digit int','line_number':1859,'multiline':False]
['text':' c(0)c(1)...c(9)c(10) or c(0)c(1)...c(q-1)0...0 (11 digits)','line_number':1860,'multiline':False]
['text':' set invalid flag','line_number':1862,'multiline':False]
['text':' return Integer Indefinite','line_number':1864,'multiline':False]
['text':' else cases that can be rounded to a 32-bit unsigned int fall through','line_number':1868,'multiline':False]
['text':' to '1 <= q + exp <= 10'','line_number':1869,'multiline':False]
['text':' if (q > 11), i.e. 12 <= q <= 16 and so -15 <= exp <= -2','line_number':1870,'multiline':False]
['text':' C * 10^(11-q) >= 0x9fffffffb <=>','line_number':1871,'multiline':False]
['text':' C >= 0x9fffffffb * 10^(q-11) where 1 <= q - 11 <= 5','line_number':1872,'multiline':False]
['text':' (scale 2^32-1/2 up)','line_number':1873,'multiline':False]
['text':' Note: 0x9fffffffb*10^(q-11) has q-1 or q digits, where q <= 16','line_number':1874,'multiline':False]
['text':' set invalid flag ','line_number':1877,'multiline':False]
['text':' return Integer Indefinite ','line_number':1879,'multiline':False]
['text':' else cases that can be rounded to a 32-bit int fall through','line_number':1883,'multiline':False]
['text':' to '1 <= q + exp <= 10'','line_number':1884,'multiline':False]
['text':' n is not too large to be converted to int32 if -1/2 < n < 2^32 - 1/2','line_number':1888,'multiline':False]
['text':' Note: some of the cases tested for above fall through to this point','line_number':1889,'multiline':False]
['text':' n = +/-0.0...c(0)c(1)...c(q-1)','line_number':1890,'multiline':False]
['text':' return 0','line_number':1891,'multiline':False]
['text':' n = +/-0.c(0)c(1)...c(q-1)','line_number':1894,'multiline':False]
['text':' if 0.c(0)c(1)...c(q-1) < 0.5 <=> c(0)c(1)...c(q-1) < 5 * 10^(q-1)','line_number':1895,'multiline':False]
['text':'   res = 0','line_number':1896,'multiline':False]
['text':' else if x > 0','line_number':1897,'multiline':False]
['text':'   res = +1','line_number':1898,'multiline':False]
['text':' else // if x < 0','line_number':1899,'multiline':False]
['text':'   invalid exc','line_number':1900,'multiline':False]
['text':' return 0','line_number':1903,'multiline':False]
['text':' n < 0','line_number':1904,'multiline':False]
['text':' set invalid flag','line_number':1905,'multiline':False]
['text':' return Integer Indefinite','line_number':1907,'multiline':False]
['text':' n > 0','line_number':1910,'multiline':False]
['text':' return +1','line_number':1911,'multiline':False]
['text':' if (1 <= q + exp <= 10, 1 <= q <= 16, -15 <= exp <= 9)','line_number':1913,'multiline':False]
['text':' -2^32-1/2 <= x <= -1 or 1 <= x < 2^32-1/2 so if positive, x can be ','line_number':1914,'multiline':False]
['text':' rounded to nearest to a 32-bit unsigned integer','line_number':1915,'multiline':False]
['text':' x <= -1','line_number':1916,'multiline':False]
['text':' set invalid flag','line_number':1917,'multiline':False]
['text':' return Integer Indefinite','line_number':1919,'multiline':False]
['text':' 1 <= x < 2^32-1/2 so x can be rounded','line_number':1923,'multiline':False]
['text':' to nearest to a 32-bit unsigned integer','line_number':1924,'multiline':False]
['text':' 2 <= q <= 16, -15 <= exp <= -1, 1 <= q + exp <= 10','line_number':1925,'multiline':False]
['text':' 1 <= ind <= 15; ind is a synonym for 'x'','line_number':1926,'multiline':False]
['text':' chop off ind digits from the lower part of C1','line_number':1927,'multiline':False]
['text':' C1 = C1 + 1/2 * 10^ind where the result C1 fits in 64 bits','line_number':1928,'multiline':False]
['text':' calculate C* and f*','line_number':1930,'multiline':False]
['text':' C* is actually floor(C*) in this case','line_number':1931,'multiline':False]
['text':' C* and f* need shifting and masking, as shown by','line_number':1932,'multiline':False]
['text':' bid_shiftright128[] and bid_maskhigh128[]','line_number':1933,'multiline':False]
['text':' 1 <= x <= 15 ','line_number':1934,'multiline':False]
['text':' kx = 10^(-x) = bid_ten2mk64[ind - 1]','line_number':1935,'multiline':False]
['text':' C* = (C1 + 1/2 * 10^x) * 10^(-x)','line_number':1936,'multiline':False]
['text':' the approximation of 10^(-x) was rounded up to 54 bits','line_number':1937,'multiline':False]
['text':' the top Ex bits of 10^(-x) are T* = bid_ten2mk128trunc[ind].w[0], e.g.','line_number':1940,'multiline':False]
['text':' if x=1, T*=bid_ten2mk128trunc[0].w[0]=0x1999999999999999','line_number':1941,'multiline':False]
['text':' C* = floor(C*) (logical right shift; C has p decimal digits,','line_number':1942,'multiline':False]
['text':'     correct by Property 1)','line_number':1943,'multiline':False]
['text':' n = C* * 10^(e+x)','line_number':1944,'multiline':False]
['text':' shift right C* by Ex-64 = bid_shiftright128[ind]','line_number':1946,'multiline':False]
['text':' 0 <= shift <= 39','line_number':1947,'multiline':False]
['text':' if the result was a midpoint it was rounded away from zero','line_number':1950,'multiline':False]
['text':' the result is positive','line_number':1951,'multiline':False]
['text':' 1 <= q <= 10','line_number':1953,'multiline':False]
['text':' res = +C (exact)','line_number':1954,'multiline':False]
['text':' the result is positive','line_number':1955,'multiline':False]
['text':' if (exp > 0) => 1 <= exp <= 9, 1 <= q < 9, 2 <= q + exp <= 10','line_number':1956,'multiline':False]
['text':' res = +C * 10^exp (exact)','line_number':1957,'multiline':False]
['text':' the result is positive','line_number':1958,'multiline':False]
['text':'****************************************************************************
 *  BID64_to_uint32_xrninta
 ***************************************************************************','line_number':1964,'multiline':True]
['text':' unbiased exponent','line_number':1984,'multiline':False]
['text':' Note: C1 represents x_significand (BID_UINT64)','line_number':1985,'multiline':False]
['text':' C* represents up to 16 decimal digits ~ 54 bits','line_number':1991,'multiline':False]
['text':' check for NaN or Infinity','line_number':1995,'multiline':False]
['text':' set invalid flag','line_number':1997,'multiline':False]
['text':' return Integer Indefinite','line_number':1999,'multiline':False]
['text':' unpack x','line_number':2003,'multiline':False]
['text':' 0 for positive, MASK_SIGN for negative','line_number':2004,'multiline':False]
['text':' if steering bits are 11 (condition will be 0), then exponent is G[0:w+1] =>','line_number':2005,'multiline':False]
['text':' biased','line_number':2007,'multiline':False]
['text':' non-canonical','line_number':2009,'multiline':False]
['text':' biased','line_number':2014,'multiline':False]
['text':' check for zeros (possibly from non-canonical values)','line_number':2018,'multiline':False]
['text':' x is 0','line_number':2020,'multiline':False]
['text':' x is not special and is not zero','line_number':2024,'multiline':False]
['text':' q = nr. of decimal digits in x (1 <= q <= 54)','line_number':2026,'multiline':False]
['text':'  determine first the nr. of bits in x','line_number':2027,'multiline':False]
['text':' x >= 2^53','line_number':2028,'multiline':False]
['text':' split the 64-bit value in two 32-bit halves to avoid rounding errors','line_number':2029,'multiline':False]
['text':' exact conversion','line_number':2030,'multiline':False]
['text':' if x < 2^53','line_number':2032,'multiline':False]
['text':' exact conversion','line_number':2033,'multiline':False]
['text':' unbiased exponent','line_number':2043,'multiline':False]
['text':' x >= 10^10 ~= 2^33.2... (cannot fit in 32 bits)','line_number':2045,'multiline':False]
['text':' set invalid flag','line_number':2046,'multiline':False]
['text':' return Integer Indefinite','line_number':2048,'multiline':False]
['text':' x = c(0)c(1)...c(9).c(10)...c(q-1)','line_number':2051,'multiline':False]
['text':' in this case 2^29.89... ~= 10^9 <= x < 10^10 ~= 2^33.2...','line_number':2052,'multiline':False]
['text':' so x rounded to an integer may or may not fit in an unsigned 32-bit int','line_number':2053,'multiline':False]
['text':' the cases that do not fit are identified here; the ones that fit','line_number':2054,'multiline':False]
['text':' fall through and will be handled with other cases further,','line_number':2055,'multiline':False]
['text':' under '1 <= q + exp <= 10'','line_number':2056,'multiline':False]
['text':' if n < 0 and q + exp = 10 then x is much less than -1/2','line_number':2057,'multiline':False]
['text':' => set invalid flag','line_number':2058,'multiline':False]
['text':' return Integer Indefinite','line_number':2060,'multiline':False]
['text':' if n > 0 and q + exp = 10','line_number':2063,'multiline':False]
['text':' if n >= 2^32 - 1/2 then n is too large','line_number':2064,'multiline':False]
['text':' too large if c(0)c(1)...c(9).c(10)...c(q-1) >= 2^32-1/2','line_number':2065,'multiline':False]
['text':' <=> 0.c(0)c(1)...c(q-1) * 10^11 >= 0x9fffffffb, 1<=q<=16','line_number':2066,'multiline':False]
['text':' <=> C * 10^(11-q) >= 0x9fffffffb, 1<=q<=16','line_number':2067,'multiline':False]
['text':' Note: C * 10^(11-q) has 10 or 11 digits; 0x9fffffffb has 11 digits','line_number':2069,'multiline':False]
['text':' C scaled up to 11-digit int','line_number':2070,'multiline':False]
['text':' c(0)c(1)...c(9)c(10) or c(0)c(1)...c(q-1)0...0 (11 digits)','line_number':2071,'multiline':False]
['text':' set invalid flag','line_number':2073,'multiline':False]
['text':' return Integer Indefinite','line_number':2075,'multiline':False]
['text':' else cases that can be rounded to a 32-bit unsigned int fall through','line_number':2079,'multiline':False]
['text':' to '1 <= q + exp <= 10'','line_number':2080,'multiline':False]
['text':' if (q > 11), i.e. 12 <= q <= 16 and so -15 <= exp <= -2','line_number':2081,'multiline':False]
['text':' C * 10^(11-q) >= 0x9fffffffb <=>','line_number':2082,'multiline':False]
['text':' C >= 0x9fffffffb * 10^(q-11) where 1 <= q - 11 <= 5','line_number':2083,'multiline':False]
['text':' (scale 2^32-1/2 up)','line_number':2084,'multiline':False]
['text':' Note: 0x9fffffffb*10^(q-11) has q-1 or q digits, where q <= 16','line_number':2085,'multiline':False]
['text':' set invalid flag ','line_number':2088,'multiline':False]
['text':' return Integer Indefinite ','line_number':2090,'multiline':False]
['text':' else cases that can be rounded to a 32-bit int fall through','line_number':2094,'multiline':False]
['text':' to '1 <= q + exp <= 10'','line_number':2095,'multiline':False]
['text':' n is not too large to be converted to int32 if -1/2 < n < 2^32 - 1/2','line_number':2099,'multiline':False]
['text':' Note: some of the cases tested for above fall through to this point','line_number':2100,'multiline':False]
['text':' n = +/-0.0...c(0)c(1)...c(q-1)','line_number':2101,'multiline':False]
['text':' set inexact flag','line_number':2102,'multiline':False]
['text':' return 0','line_number':2104,'multiline':False]
['text':' n = +/-0.c(0)c(1)...c(q-1)','line_number':2107,'multiline':False]
['text':' if 0.c(0)c(1)...c(q-1) < 0.5 <=> c(0)c(1)...c(q-1) < 5 * 10^(q-1)','line_number':2108,'multiline':False]
['text':'   res = 0','line_number':2109,'multiline':False]
['text':' else if x > 0','line_number':2110,'multiline':False]
['text':'   res = +1','line_number':2111,'multiline':False]
['text':' else // if x < 0','line_number':2112,'multiline':False]
['text':'   invalid exc','line_number':2113,'multiline':False]
['text':' return 0','line_number':2116,'multiline':False]
['text':' n < 0','line_number':2117,'multiline':False]
['text':' set invalid flag','line_number':2118,'multiline':False]
['text':' return Integer Indefinite','line_number':2120,'multiline':False]
['text':' n > 0','line_number':2123,'multiline':False]
['text':' return +1','line_number':2124,'multiline':False]
['text':' set inexact flag','line_number':2126,'multiline':False]
['text':' if (1 <= q + exp <= 10, 1 <= q <= 16, -15 <= exp <= 9)','line_number':2128,'multiline':False]
['text':' -2^32-1/2 <= x <= -1 or 1 <= x < 2^32-1/2 so if positive, x can be ','line_number':2129,'multiline':False]
['text':' rounded to nearest to a 32-bit unsigned integer','line_number':2130,'multiline':False]
['text':' x <= -1','line_number':2131,'multiline':False]
['text':' set invalid flag','line_number':2132,'multiline':False]
['text':' return Integer Indefinite','line_number':2134,'multiline':False]
['text':' 1 <= x < 2^32-1/2 so x can be rounded','line_number':2138,'multiline':False]
['text':' to nearest to a 32-bit unsigned integer','line_number':2139,'multiline':False]
['text':' 2 <= q <= 16, -15 <= exp <= -1, 1 <= q + exp <= 10','line_number':2140,'multiline':False]
['text':' 1 <= ind <= 15; ind is a synonym for 'x'','line_number':2141,'multiline':False]
['text':' chop off ind digits from the lower part of C1','line_number':2142,'multiline':False]
['text':' C1 = C1 + 1/2 * 10^ind where the result C1 fits in 64 bits','line_number':2143,'multiline':False]
['text':' calculate C* and f*','line_number':2145,'multiline':False]
['text':' C* is actually floor(C*) in this case','line_number':2146,'multiline':False]
['text':' C* and f* need shifting and masking, as shown by','line_number':2147,'multiline':False]
['text':' bid_shiftright128[] and bid_maskhigh128[]','line_number':2148,'multiline':False]
['text':' 1 <= x <= 15 ','line_number':2149,'multiline':False]
['text':' kx = 10^(-x) = bid_ten2mk64[ind - 1]','line_number':2150,'multiline':False]
['text':' C* = (C1 + 1/2 * 10^x) * 10^(-x)','line_number':2151,'multiline':False]
['text':' the approximation of 10^(-x) was rounded up to 54 bits','line_number':2152,'multiline':False]
['text':' the top Ex bits of 10^(-x) are T* = bid_ten2mk128trunc[ind].w[0], e.g.','line_number':2157,'multiline':False]
['text':' if x=1, T*=bid_ten2mk128trunc[0].w[0]=0x1999999999999999','line_number':2158,'multiline':False]
['text':' C* = floor(C*) (logical right shift; C has p decimal digits,','line_number':2159,'multiline':False]
['text':'     correct by Property 1)','line_number':2160,'multiline':False]
['text':' n = C* * 10^(e+x)','line_number':2161,'multiline':False]
['text':' shift right C* by Ex-64 = bid_shiftright128[ind]','line_number':2163,'multiline':False]
['text':' 0 <= shift <= 39','line_number':2164,'multiline':False]
['text':' determine inexactness of the rounding of C*','line_number':2167,'multiline':False]
['text':' if (0 < f* - 1/2 < 10^(-x)) then','line_number':2168,'multiline':False]
['text':'   the result is exact','line_number':2169,'multiline':False]
['text':' else // if (f* - 1/2 > T*) then','line_number':2170,'multiline':False]
['text':'   the result is inexact','line_number':2171,'multiline':False]
['text':' fstar.w[1] is 0','line_number':2172,'multiline':False]
['text':' f* > 1/2 and the result may be exact','line_number':2174,'multiline':False]
['text':' f* - 1/2','line_number':2175,'multiline':False]
['text':' bid_ten2mk128trunc[ind -1].w[1] is identical to','line_number':2177,'multiline':False]
['text':' bid_ten2mk128[ind -1].w[1]','line_number':2178,'multiline':False]
['text':' set the inexact flag','line_number':2179,'multiline':False]
['text':' else the result is exact','line_number':2181,'multiline':False]
['text':' the result is inexact; f2* <= 1/2','line_number':2182,'multiline':False]
['text':' set the inexact flag','line_number':2183,'multiline':False]
['text':' if 3 <= ind - 1 <= 14','line_number':2186,'multiline':False]
['text':' f2* > 1/2 and the result may be exact','line_number':2189,'multiline':False]
['text':' Calculate f2* - 1/2','line_number':2190,'multiline':False]
['text':' bid_ten2mk128trunc[ind -1].w[1] is identical to','line_number':2193,'multiline':False]
['text':' bid_ten2mk128[ind -1].w[1]','line_number':2194,'multiline':False]
['text':' set the inexact flag','line_number':2195,'multiline':False]
['text':' else the result is exact','line_number':2197,'multiline':False]
['text':' the result is inexact; f2* <= 1/2','line_number':2198,'multiline':False]
['text':' set the inexact flag','line_number':2199,'multiline':False]
['text':' if the result was a midpoint it was rounded away from zero','line_number':2204,'multiline':False]
['text':' the result is positive','line_number':2205,'multiline':False]
['text':' 1 <= q <= 10','line_number':2207,'multiline':False]
['text':' res = +C (exact)','line_number':2208,'multiline':False]
['text':' the result is positive','line_number':2209,'multiline':False]
['text':' if (exp > 0) => 1 <= exp <= 9, 1 <= q < 9, 2 <= q + exp <= 10','line_number':2210,'multiline':False]
['text':' res = +C * 10^exp (exact)','line_number':2211,'multiline':False]
['text':' the result is positive','line_number':2212,'multiline':False]
