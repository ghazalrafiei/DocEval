['text':'*****************************************************************************
  Copyright (c) 2007-2011, Intel Corp.
  All rights reserved.

  Redistribution and use in source and binary forms, with or without 
  modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice, 
      this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright 
      notice, this list of conditions and the following disclaimer in the 
      documentation and/or other materials provided with the distribution.
    * Neither the name of Intel Corporation nor the names of its contributors 
      may be used to endorse or promote products derived from this software 
      without specific prior written permission.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
  THE POSSIBILITY OF SUCH DAMAGE.
*****************************************************************************','line_number':1,'multiline':True]
['text':'****************************************************************************
 *    BID64 fma
 *****************************************************************************
 *
 *  Algorithm description:
 *
 *  if multiplication is guranteed exact (short coefficients)
 *     call the unpacked arg. equivalent of bid64_add(x*y, z)
 *  else 
 *     get full coefficient_x*coefficient_y product
 *     call subroutine to perform addition of 64-bit argument 
 *                                         to 128-bit product
 *
 ***************************************************************************','line_number':30,'multiline':True]
['text':' unpack arguments, check for NaN, Infinity, or 0','line_number':87,'multiline':False]
['text':' y is NAN','line_number':90,'multiline':False]
['text':' if x = {0, f, inf, NaN}, y = NaN, z = {0, f, inf, NaN} then res = Q (y)','line_number':91,'multiline':False]
['text':' check first for non-canonical NaN payload','line_number':92,'multiline':False]
['text':' clear G6-G12','line_number':93,'multiline':False]
['text':' clear G6-G12 and the payload bits','line_number':95,'multiline':False]
['text':' y is SNAN','line_number':97,'multiline':False]
['text':' set invalid flag','line_number':98,'multiline':False]
['text':' return quiet (y)','line_number':100,'multiline':False]
['text':' y is QNaN','line_number':102,'multiline':False]
['text':' return y','line_number':103,'multiline':False]
['text':' if z = SNaN or x = SNaN signal invalid exception','line_number':105,'multiline':False]
['text':' set invalid flag','line_number':108,'multiline':False]
['text':' z is NAN','line_number':113,'multiline':False]
['text':' if x = {0, f, inf, NaN}, y = {0, f, inf}, z = NaN then res = Q (z)','line_number':114,'multiline':False]
['text':' check first for non-canonical NaN payload','line_number':115,'multiline':False]
['text':' clear G6-G12','line_number':116,'multiline':False]
['text':' clear G6-G12 and the payload bits','line_number':118,'multiline':False]
['text':' z is SNAN','line_number':120,'multiline':False]
['text':' set invalid flag','line_number':121,'multiline':False]
['text':' return quiet (z)','line_number':123,'multiline':False]
['text':' z is QNaN','line_number':125,'multiline':False]
['text':' return z','line_number':126,'multiline':False]
['text':' if x = SNaN signal invalid exception','line_number':128,'multiline':False]
['text':' set invalid flag','line_number':130,'multiline':False]
['text':' x is NAN','line_number':135,'multiline':False]
['text':' if x = NaN, y = {0, f, inf}, z = {0, f, inf} then res = Q (x)','line_number':136,'multiline':False]
['text':' check first for non-canonical NaN payload','line_number':137,'multiline':False]
['text':' clear G6-G12','line_number':138,'multiline':False]
['text':' clear G6-G12 and the payload bits','line_number':140,'multiline':False]
['text':' x is SNAN','line_number':142,'multiline':False]
['text':' set invalid flag','line_number':143,'multiline':False]
['text':' return quiet (x)','line_number':145,'multiline':False]
['text':' x is QNaN','line_number':147,'multiline':False]
['text':' return x','line_number':148,'multiline':False]
['text':' clear out G[6]-G[16]','line_number':149,'multiline':False]
['text':' x is Inf. or 0','line_number':155,'multiline':False]
['text':' x is Infinity?','line_number':157,'multiline':False]
['text':' check if y is 0','line_number':159,'multiline':False]
['text':' y==0, return NaN','line_number':161,'multiline':False]
['text':' test if z is Inf of oposite sign','line_number':168,'multiline':False]
['text':' return NaN ','line_number':171,'multiline':False]
['text':' otherwise return +/-Inf','line_number':177,'multiline':False]
['text':' x is 0','line_number':181,'multiline':False]
['text':' y is Inf. or 0','line_number':200,'multiline':False]
['text':' y is Infinity?','line_number':202,'multiline':False]
['text':' check if x is 0','line_number':204,'multiline':False]
['text':' y==0, return NaN','line_number':206,'multiline':False]
['text':' test if z is Inf of oposite sign','line_number':212,'multiline':False]
['text':' return NaN','line_number':218,'multiline':False]
['text':' otherwise return +/-Inf','line_number':221,'multiline':False]
['text':' y is 0 ','line_number':225,'multiline':False]
['text':' y is Inf. or 0','line_number':244,'multiline':False]
['text':' test if y is NaN/Inf','line_number':246,'multiline':False]
['text':' z is 0, return x*y','line_number':250,'multiline':False]
['text':'0+/-0','line_number':252,'multiline':False]
['text':' get binary coefficients of x and y ','line_number':275,'multiline':True]
['text':'--- get number of bits in the coefficients of x and y ---','line_number':277,'multiline':False]
['text':' version 2 (original)','line_number':278,'multiline':False]
['text':' magnitude estimate for coefficient_x*coefficient_y is ','line_number':285,'multiline':False]
['text':'        2^(unbiased_bin_expon_cx + unbiased_bin_expon_cx)','line_number':286,'multiline':False]
['text':' check if coefficient_x*coefficient_y<2^(10*k+3)','line_number':289,'multiline':False]
['text':' equivalent to unbiased_bin_expon_cx + unbiased_bin_expon_cx < 10*k+1','line_number':290,'multiline':False]
['text':'  easy multiply','line_number':292,'multiline':False]
['text':' get 128-bit product: coefficient_x*coefficient_y','line_number':319,'multiline':False]
['text':' tighten binary range of P:  leading bit is 2^bp','line_number':322,'multiline':False]
['text':' unbiased_bin_expon_product <= bp <= unbiased_bin_expon_product+1','line_number':323,'multiline':False]
['text':' get number of decimal digits in the product','line_number':327,'multiline':False]
['text':' if bid_power10_table_128[digits_p] <= P','line_number':330,'multiline':False]
['text':' determine number of decimal digits to be rounded out','line_number':332,'multiline':False]
['text':'--- get number of bits in the coefficients of z  ---','line_number':340,'multiline':False]
['text':' get number of decimal digits in the coeff_x','line_number':343,'multiline':False]
['text':' underflow','line_number':347,'multiline':False]
['text':' get remainder','line_number':366,'multiline':False]
['text':' align coeff_x, CYh','line_number':377,'multiline':False]
['text':' RN or RN_away','line_number':439,'multiline':False]
['text':'__set_status_flags (pfpsf, uf_status);','line_number':453,'multiline':False]
['text':' DECIMAL_TINY_DETECTION_AFTER_ROUNDING ','line_number':455,'multiline':False]
['text':' go to convert_format and exit','line_number':485,'multiline':False]
