['text':'*****************************************************************************
  Copyright (c) 2007-2011, Intel Corp.
  All rights reserved.

  Redistribution and use in source and binary forms, with or without 
  modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice, 
      this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright 
      notice, this list of conditions and the following disclaimer in the 
      documentation and/or other materials provided with the distribution.
    * Neither the name of Intel Corporation nor the names of its contributors 
      may be used to endorse or promote products derived from this software 
      without specific prior written permission.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
  THE POSSIBILITY OF SUCH DAMAGE.
*****************************************************************************','line_number':1,'multiline':True]
['text':'****************************************************************************
 *
 *    BID128 non-computational functions:
 *         - bid128_isSigned
 *         - bid128_isNormal
 *         - bid128_isSubnormal
 *         - bid128_isFinite
 *         - bid128_isZero
 *         - bid128_isInf
 *         - bid128_isSignaling
 *         - bid128_isCanonical
 *         - bid128_isNaN
 *         - bid128_copy
 *         - bid128_negate
 *         - bid128_abs
 *         - bid128_copySign
 *         - bid128_class
 *         - bid128_totalOrder
 *         - bid128_totalOrderMag
 *         - bid128_sameQuantum
 *         - bid128_radix
 ***************************************************************************','line_number':32,'multiline':True]
['text':' return 1 iff x is not zero, nor NaN nor subnormal nor infinity','line_number':71,'multiline':False]
['text':' test for special values - infinity or NaN','line_number':88,'multiline':False]
['text':' x is special','line_number':90,'multiline':False]
['text':' unpack x ','line_number':94,'multiline':False]
['text':' biased and shifted left 49 bit positions','line_number':95,'multiline':False]
['text':' test for zero','line_number':98,'multiline':False]
['text':' test for non-canonical values of the argument x','line_number':103,'multiline':False]
['text':' x is subnormal or normal','line_number':112,'multiline':False]
['text':' determine the number of digits q in the significand','line_number':113,'multiline':False]
['text':' q = nr. of decimal digits in x','line_number':114,'multiline':False]
['text':' determine first the nr. of bits in x','line_number':115,'multiline':False]
['text':' x >= 2^53','line_number':117,'multiline':False]
['text':' split the 64-bit value in two 32-bit halves to avoid rounding errors','line_number':118,'multiline':False]
['text':' exact conversion','line_number':119,'multiline':False]
['text':' if x < 2^53','line_number':122,'multiline':False]
['text':' exact conversion','line_number':123,'multiline':False]
['text':' C1_hi != 0 => nr. bits = 64 + nr_bits (C1_hi)','line_number':127,'multiline':False]
['text':' exact conversion','line_number':128,'multiline':False]
['text':' test for subnormal values of x','line_number':141,'multiline':False]
['text':' return 1 iff x is not zero, nor NaN nor normal nor infinity','line_number':151,'multiline':False]
['text':' test for special values - infinity or NaN','line_number':168,'multiline':False]
['text':' x is special','line_number':170,'multiline':False]
['text':' unpack x ','line_number':174,'multiline':False]
['text':' biased and shifted left 49 bit positions','line_number':175,'multiline':False]
['text':' test for zero','line_number':178,'multiline':False]
['text':' test for non-canonical values of the argument x','line_number':183,'multiline':False]
['text':' x is subnormal or normal','line_number':192,'multiline':False]
['text':' determine the number of digits q in the significand','line_number':193,'multiline':False]
['text':' q = nr. of decimal digits in x','line_number':194,'multiline':False]
['text':' determine first the nr. of bits in x','line_number':195,'multiline':False]
['text':' x >= 2^53','line_number':197,'multiline':False]
['text':' split the 64-bit value in two 32-bit halves to avoid rounding errors','line_number':198,'multiline':False]
['text':' exact conversion','line_number':199,'multiline':False]
['text':' if x < 2^53','line_number':202,'multiline':False]
['text':' exact conversion','line_number':203,'multiline':False]
['text':' C1_hi != 0 => nr. bits = 64 + nr_bits (C1_hi)','line_number':207,'multiline':False]
['text':' exact conversion','line_number':208,'multiline':False]
['text':' test for subnormal values of x','line_number':221,'multiline':False]
['text':' significand is non-canonical','line_number':264,'multiline':False]
['text':' significand is non-canonical','line_number':265,'multiline':False]
['text':' significand is non-canonical','line_number':267,'multiline':False]
['text':' significand is 0','line_number':268,'multiline':False]
['text':' return 1 iff x is a canonical number ,infinity, or NaN.','line_number':307,'multiline':False]
['text':' NaN','line_number':322,'multiline':False]
['text':' 46 bits','line_number':327,'multiline':False]
['text':' 64 bits','line_number':328,'multiline':False]
['text':' payload must be < 10^33 = 0x0000314dc6448d93_38c15b0a00000000','line_number':329,'multiline':False]
['text':' infinity','line_number':338,'multiline':False]
['text':' not NaN or infinity; extract significand to ensure it is canonical','line_number':346,'multiline':False]
['text':' a canonical number has a coefficient < 10^34 ','line_number':349,'multiline':False]
['text':'    (0x0001ed09_bead87c0_378d8e64_00000000)','line_number':350,'multiline':False]
['text':' significand is non-canonical','line_number':351,'multiline':False]
['text':' significand is non-canonical','line_number':352,'multiline':False]
['text':' copies a floating-point operand x to destination y, with no change','line_number':376,'multiline':False]
['text':' copies a floating-point operand x to destination y, reversing the sign','line_number':393,'multiline':False]
['text':' copies a floating-point operand x to destination y, changing the sign to positive','line_number':411,'multiline':False]
['text':' copies operand x to destination in the same format as x, but with the sign of y','line_number':429,'multiline':False]
['text':' decode number into exponent and significand','line_number':481,'multiline':False]
['text':' check for zero or non-canonical','line_number':484,'multiline':False]
['text':' if exponent is less than -6176, the number may be subnormal ','line_number':498,'multiline':False]
['text':' (less than the smallest normal value)','line_number':499,'multiline':False]
['text':'  the smallest normal value is 1 x 10^-6143 = 10^33 x 10^-6176','line_number':500,'multiline':False]
['text':'  if (exp_x - 6176 < -6143)','line_number':501,'multiline':False]
['text':' sig_x * 10^exp_x','line_number':502,'multiline':False]
['text':' 10^33 = 0x0000314dc6448d93_38c15b0a00000000','line_number':506,'multiline':False]
['text':' 10^33 = 0x0000314dc6448d93_38c15b0a00000000','line_number':517,'multiline':False]
['text':' otherwise, normal number, determine the sign','line_number':528,'multiline':False]
['text':' true if the exponents of x and y are the same, false otherwise.','line_number':535,'multiline':False]
['text':' The special cases of sameQuantum(NaN, NaN) and sameQuantum(Inf, Inf) are true','line_number':536,'multiline':False]
['text':' If exactly one operand is infinite or exactly one operand is NaN, then false','line_number':537,'multiline':False]
['text':' if both operands are NaN, return true','line_number':555,'multiline':False]
['text':' if both operands are INF, return true','line_number':562,'multiline':False]
['text':' decode exponents for both numbers, and return true if they match','line_number':569,'multiline':False]
['text':' G0_G1=11','line_number':570,'multiline':False]
['text':' biased and shifted left 49 bits','line_number':571,'multiline':False]
['text':' G0_G1 != 11','line_number':572,'multiline':False]
['text':' biased and shifted left 49 bits','line_number':573,'multiline':False]
['text':' G0_G1=11','line_number':575,'multiline':False]
['text':' biased and shifted left 49 bits','line_number':576,'multiline':False]
['text':' G0_G1 != 11','line_number':577,'multiline':False]
['text':' biased and shifted left 49 bits','line_number':578,'multiline':False]
['text':' NaN (CASE 1)','line_number':605,'multiline':False]
['text':' if x and y are unordered numerically because either operand is NaN','line_number':606,'multiline':False]
['text':'    (1) totalOrder(-NaN, number) is true','line_number':607,'multiline':False]
['text':'    (2) totalOrder(number, +NaN) is true','line_number':608,'multiline':False]
['text':'    (3) if x and y are both NaN:','line_number':609,'multiline':False]
['text':'       i) negative sign bit < positive sign bit','line_number':610,'multiline':False]
['text':'       ii) signaling < quiet for +NaN, reverse for -NaN','line_number':611,'multiline':False]
['text':'       iii) lesser payload < greater payload for +NaN (reverse for -NaN)','line_number':612,'multiline':False]
['text':'       iv) else if bitwise identical (in canonical form), return 1','line_number':613,'multiline':False]
['text':' if x is -NaN','line_number':615,'multiline':False]
['text':' return true, unless y is -NaN also','line_number':617,'multiline':False]
['text':' y is a number, return 1','line_number':620,'multiline':False]
['text':' if y and x are both -NaN','line_number':622,'multiline':False]
['text':' if x and y are both -SNaN or both -QNaN, we have to compare payloads','line_number':639,'multiline':False]
['text':' this statement evaluates to true if both are SNaN or QNaN','line_number':640,'multiline':False]
['text':' it comes down to the payload.  we want to return true if x has a','line_number':644,'multiline':False]
['text':' larger payload, or if the payloads are equal (canonical forms','line_number':645,'multiline':False]
['text':' are bitwise identical)','line_number':646,'multiline':False]
['text':' either x = -SNaN and y = -QNaN or x = -QNaN and y = -SNaN','line_number':655,'multiline':False]
['text':' totalOrder (-QNaN, -SNaN) == 1','line_number':657,'multiline':False]
['text':' x is +NaN','line_number':661,'multiline':False]
['text':' return false, unless y is +NaN also','line_number':662,'multiline':False]
['text':' y is a number, return 1','line_number':665,'multiline':False]
['text':' x and y are both +NaN; ','line_number':668,'multiline':False]
['text':' if x and y are both +SNaN or both +QNaN, we have to compare payloads','line_number':685,'multiline':False]
['text':' this statement evaluates to true if both are SNaN or QNaN','line_number':686,'multiline':False]
['text':' it comes down to the payload.  we want to return true if x has a','line_number':690,'multiline':False]
['text':' smaller payload, or if the payloads are equal (canonical forms','line_number':691,'multiline':False]
['text':' are bitwise identical)','line_number':692,'multiline':False]
['text':' either x = SNaN and y = QNaN or x = QNaN and y = SNaN','line_number':701,'multiline':False]
['text':' totalOrder (-QNaN, -SNaN) == 1','line_number':703,'multiline':False]
['text':' x is certainly not NAN in this case.','line_number':709,'multiline':False]
['text':' return true if y is positive','line_number':710,'multiline':False]
['text':' SIMPLE (CASE 2)','line_number':714,'multiline':False]
['text':' if all the bits are the same, the numbers are equal.','line_number':715,'multiline':False]
['text':' OPPOSITE SIGNS (CASE 3)','line_number':720,'multiline':False]
['text':' if signs are opposite, return 1 if x is negative ','line_number':721,'multiline':False]
['text':' (if x < y, totalOrder is true)','line_number':722,'multiline':False]
['text':' INFINITY (CASE 4)','line_number':728,'multiline':False]
['text':' if x == neg_inf, return (y == neg_inf);','line_number':730,'multiline':False]
['text':' x is positive infinity, only return1 if y is positive infinity as well','line_number':735,'multiline':False]
['text':' && (y & MASK_SIGN) != MASK_SIGN); (we know y has same sign as x)','line_number':738,'multiline':False]
['text':' x is finite, so:','line_number':741,'multiline':False]
['text':'    if y is +inf, x<y','line_number':742,'multiline':False]
['text':'    if y is -inf, x>y','line_number':743,'multiline':False]
['text':' CONVERT x','line_number':747,'multiline':False]
['text':' CHECK IF x IS CANONICAL','line_number':752,'multiline':False]
['text':' 9999999999999999999999999999999999 (decimal) = ','line_number':753,'multiline':False]
['text':'     1ed09_bead87c0_378d8e63_ffffffff(hexadecimal)','line_number':754,'multiline':False]
['text':' [0, 10^34) is the 754 supported canonical range.  ','line_number':755,'multiline':False]
['text':' If the value exceeds that, it is interpreted as 0.','line_number':756,'multiline':False]
['text':' check for the case where the exponent is shifted right by 2 bits!','line_number':764,'multiline':False]
['text':' CONVERT y','line_number':769,'multiline':False]
['text':' CHECK IF y IS CANONICAL','line_number':774,'multiline':False]
['text':' 9999999999999999999999999999999999(decimal) = ','line_number':775,'multiline':False]
['text':'     1ed09_bead87c0_378d8e63_ffffffff(hexadecimal)','line_number':776,'multiline':False]
['text':' [0, 10^34) is the 754 supported canonical range.  ','line_number':777,'multiline':False]
['text':' If the value exceeds that, it is interpreted as 0.','line_number':778,'multiline':False]
['text':' check for the case where the exponent is shifted right by 2 bits!','line_number':786,'multiline':False]
['text':' ZERO (CASE 5)','line_number':791,'multiline':False]
['text':' if x and y represent the same entities, and both are negative ','line_number':792,'multiline':False]
['text':' return true iff exp_x <= exp_y','line_number':793,'multiline':False]
['text':' we know that signs must be the same because we would have caught it ','line_number':795,'multiline':False]
['text':' in case3 if signs were different','line_number':796,'multiline':False]
['text':' totalOrder(x,y) iff exp_x >= exp_y for negative numbers','line_number':797,'multiline':False]
['text':' totalOrder(x,y) iff exp_x <= exp_y for positive numbers','line_number':798,'multiline':False]
['text':' if x is zero and y isn't, clearly x has the smaller payload','line_number':806,'multiline':False]
['text':' if y is zero, and x isn't, clearly y has the smaller payload','line_number':811,'multiline':False]
['text':' REDUNDANT REPRESENTATIONS (CASE 6)','line_number':816,'multiline':False]
['text':' if both components are either bigger or smaller','line_number':817,'multiline':False]
['text':' if |exp_x - exp_y| < 33, it comes down to the compensated significand','line_number':830,'multiline':False]
['text':' if exp_x is 33 greater than exp_y, it is definitely larger, ','line_number':832,'multiline':False]
['text':' so no need for compensation','line_number':833,'multiline':False]
['text':' difference cannot be greater than 10^33','line_number':837,'multiline':False]
['text':' otherwise adjust the x significand upwards','line_number':839,'multiline':False]
['text':' the compensated significands are equal (ie "x and y represent the same','line_number':843,'multiline':False]
['text':' entities") return 1 if (negative && expx > expy) || ','line_number':844,'multiline':False]
['text':' (positive && expx < expy)','line_number':845,'multiline':False]
['text':' the case exp_x == exp_y  cannot occur, because all bits must be ','line_number':849,'multiline':False]
['text':' the same - would have been caught if (x == y)','line_number':850,'multiline':False]
['text':' if positive, return 1 if adjusted x is smaller than y','line_number':854,'multiline':False]
['text':' if positive, return whichever significand is larger ','line_number':864,'multiline':False]
['text':' (converse if negative)','line_number':865,'multiline':False]
['text':' if exp_x is 33 less than exp_y, it is definitely smaller, ','line_number':879,'multiline':False]
['text':' no need for compensation','line_number':880,'multiline':False]
['text':' adjust the y significand upwards','line_number':886,'multiline':False]
['text':' if x and y represent the same entities and both are negative','line_number':889,'multiline':False]
['text':' return true iff exp_x <= exp_y','line_number':890,'multiline':False]
['text':' values are not equal, for positive numbers return 1 if x is less than y','line_number':897,'multiline':False]
['text':' and 0 otherwise','line_number':898,'multiline':False]
['text':' if upper128 bits of compensated y are non-zero, y is bigger','line_number':900,'multiline':False]
['text':' if upper128 bits of compensated y are non-zero, y is bigger','line_number':902,'multiline':False]
['text':' if compensated y is bigger, y is bigger','line_number':904,'multiline':False]
['text':' if upper128 bits of compensated y are non-zero, y is bigger','line_number':917,'multiline':False]
['text':' if compensated y is bigger, y is bigger','line_number':919,'multiline':False]
['text':' NaN (CASE 1)','line_number':950,'multiline':False]
['text':' if x and y are unordered numerically because either operand is NaN','line_number':951,'multiline':False]
['text':'    (1) totalOrder(number, +NaN) is true','line_number':952,'multiline':False]
['text':'    (2) if x and y are both NaN:','line_number':953,'multiline':False]
['text':'       i) signaling < quiet for +NaN','line_number':954,'multiline':False]
['text':'       ii) lesser payload < greater payload for +NaN','line_number':955,'multiline':False]
['text':'       iii) else if bitwise identical (in canonical form), return 1','line_number':956,'multiline':False]
['text':' x is +NaN','line_number':958,'multiline':False]
['text':' return false, unless y is +NaN also','line_number':959,'multiline':False]
['text':' y is a number, return 0','line_number':961,'multiline':False]
['text':' x and y are both +NaN; ','line_number':964,'multiline':False]
['text':' if x and y are both +SNaN or both +QNaN, we have to compare payloads','line_number':981,'multiline':False]
['text':' this statement evaluates to true if both are SNaN or QNaN','line_number':982,'multiline':False]
['text':' it comes down to the payload.  we want to return true if x has a','line_number':986,'multiline':False]
['text':' smaller payload, or if the payloads are equal (canonical forms','line_number':987,'multiline':False]
['text':' are bitwise identical)','line_number':988,'multiline':False]
['text':' either x = SNaN and y = QNaN or x = QNaN and y = SNaN','line_number':998,'multiline':False]
['text':' totalOrder (-QNaN, -SNaN) == 1','line_number':1000,'multiline':False]
['text':' x is certainly not NAN in this case.','line_number':1005,'multiline':False]
['text':' return true because y is positive','line_number':1006,'multiline':False]
['text':' SIMPLE (CASE 2)','line_number':1010,'multiline':False]
['text':' if all the bits are the same, the numbers are equal.','line_number':1011,'multiline':False]
['text':' INFINITY (CASE 3)','line_number':1016,'multiline':False]
['text':' x is positive infinity, only return 1 if y is positive infinity as well','line_number':1018,'multiline':False]
['text':' (we know y has same sign as x)','line_number':1021,'multiline':False]
['text':' x is finite, so:','line_number':1023,'multiline':False]
['text':'    since y is +inf, x<y','line_number':1024,'multiline':False]
['text':' continue','line_number':1028,'multiline':False]
['text':' CONVERT x','line_number':1031,'multiline':False]
['text':' CHECK IF x IS CANONICAL','line_number':1036,'multiline':False]
['text':' 9999999999999999999999999999999999 (decimal) = ','line_number':1037,'multiline':False]
['text':'     1ed09_bead87c0_378d8e63_ffffffff(hexadecimal)','line_number':1038,'multiline':False]
['text':' [0, 10^34) is the 754 supported canonical range.  ','line_number':1039,'multiline':False]
['text':' If the value exceeds that, it is interpreted as 0.','line_number':1040,'multiline':False]
['text':' check for the case where the exponent is shifted right by 2 bits!','line_number':1048,'multiline':False]
['text':' CONVERT y','line_number':1053,'multiline':False]
['text':' CHECK IF y IS CANONICAL','line_number':1058,'multiline':False]
['text':' 9999999999999999999999999999999999(decimal) = ','line_number':1059,'multiline':False]
['text':'     1ed09_bead87c0_378d8e63_ffffffff(hexadecimal)','line_number':1060,'multiline':False]
['text':' [0, 10^34) is the 754 supported canonical range.  ','line_number':1061,'multiline':False]
['text':' If the value exceeds that, it is interpreted as 0.','line_number':1062,'multiline':False]
['text':' check for the case where the exponent is shifted right by 2 bits!','line_number':1070,'multiline':False]
['text':' ZERO (CASE 4)','line_number':1075,'multiline':False]
['text':' we know that signs must be the same because we would have caught it ','line_number':1077,'multiline':False]
['text':' in case3 if signs were different','line_number':1078,'multiline':False]
['text':' totalOrder(x,y) iff exp_x <= exp_y for positive numbers','line_number':1079,'multiline':False]
['text':' if x is zero and y isn't, clearly x has the smaller payload','line_number':1087,'multiline':False]
['text':' if y is zero, and x isn't, clearly y has the smaller payload','line_number':1092,'multiline':False]
['text':' REDUNDANT REPRESENTATIONS (CASE 5)','line_number':1097,'multiline':False]
['text':' if both components are either bigger or smaller','line_number':1098,'multiline':False]
['text':' if |exp_x - exp_y| < 33, it comes down to the compensated significand','line_number':1111,'multiline':False]
['text':' if exp_x is 33 greater than exp_y, it is definitely larger, ','line_number':1113,'multiline':False]
['text':' so no need for compensation','line_number':1114,'multiline':False]
['text':' difference cannot be greater than 10^33','line_number':1116,'multiline':False]
['text':' otherwise adjust the x significand upwards','line_number':1119,'multiline':False]
['text':' the compensated significands are equal (ie "x and y represent the same','line_number':1123,'multiline':False]
['text':' entities") return 1 if (negative && expx > expy) || ','line_number':1124,'multiline':False]
['text':' (positive && expx < expy)','line_number':1125,'multiline':False]
['text':' the case (exp_x == exp_y) cannot occur, because all bits must be ','line_number':1129,'multiline':False]
['text':' the same - would have been caught if (x == y)','line_number':1130,'multiline':False]
['text':' res = (exp_x <= exp_y); but exp_x > exp_y in this case','line_number':1131,'multiline':False]
['text':' since positive, return 1 if adjusted x is smaller than y','line_number':1134,'multiline':False]
['text':' if positive, return whichever significand is larger ','line_number':1142,'multiline':False]
['text':' (converse if negative)','line_number':1143,'multiline':False]
['text':' res = (exp_x <= exp_y); but exp_x > exp_y in this case','line_number':1146,'multiline':False]
['text':' if exp_x is 33 less than exp_y, it is definitely smaller, ','line_number':1155,'multiline':False]
['text':' no need for compensation','line_number':1156,'multiline':False]
['text':' from this point on 0 <= exp_y - exp_x <= 32','line_number':1160,'multiline':False]
['text':' adjust the y significand upwards','line_number':1162,'multiline':False]
['text':' res = (exp_x <= exp_y); but 0 <= exp_y - exp_x <= 32 in this case','line_number':1168,'multiline':False]
['text':' values are not equal, for positive numbers return 1 if x is less than y','line_number':1171,'multiline':False]
['text':' and 0 otherwise','line_number':1172,'multiline':False]
['text':' if upper128 bits of compensated y are non-zero, y is bigger','line_number':1174,'multiline':False]
['text':' if upper128 bits of compensated y are non-zero, y is bigger','line_number':1176,'multiline':False]
['text':' if compensated y is bigger, y is bigger','line_number':1178,'multiline':False]
['text':' from this point on 0 <= exp_y - exp_x <= 19','line_number':1182,'multiline':False]
['text':' res = (exp_x <= exp_y); but 0 <= exp_y - exp_x <= 19 in this case','line_number':1186,'multiline':False]
['text':' if upper128 bits of compensated y are non-zero, y is bigger','line_number':1190,'multiline':False]
['text':' if compensated y is bigger, y is bigger','line_number':1192,'multiline':False]
['text':' dummy test','line_number':1208,'multiline':False]
['text':' +inf','line_number':1222,'multiline':False]
['text':' +QNaN','line_number':1243,'multiline':False]
['text':' valid values fit in 110 bits=46+64','line_number':1252,'multiline':False]
