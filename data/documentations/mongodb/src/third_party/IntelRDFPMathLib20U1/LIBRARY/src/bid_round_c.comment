['text':'*****************************************************************************
  Copyright (c) 2007-2011, Intel Corp.
  All rights reserved.

  Redistribution and use in source and binary forms, with or without 
  modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice, 
      this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright 
      notice, this list of conditions and the following disclaimer in the 
      documentation and/or other materials provided with the distribution.
    * Neither the name of Intel Corporation nor the names of its contributors 
      may be used to endorse or promote products derived from this software 
      without specific prior written permission.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
  THE POSSIBILITY OF SUCH DAMAGE.
*****************************************************************************','line_number':1,'multiline':True]
['text':'****************************************************************************
 *
 *  BID64 encoding:
 * ****************************************
 *  63  62              53 52           0
 * |---|------------------|--------------|
 * | S |  Biased Exp (E)  |  Coeff (c)   |
 * |---|------------------|--------------|
 *
 * bias = 398
 * number = (-1)^s * 10^(E-398) * c
 * coefficient range - 0 to (2^53)-1
 * COEFF_MAX = 2^53-1 = 9007199254740991
 *
 *****************************************************************************
 *
 * BID128 encoding:
 *   1-bit sign
 *   14-bit biased exponent in [0x21, 0x3020] = [33, 12320]
 *         unbiased exponent in [-6176, 6111]; exponent bias = 6176
 *   113-bit unsigned binary integer coefficient (49-bit high + 64-bit low)
 *   Note: 10^34-1 ~ 2^112.945555... < 2^113 => coefficient fits in 113 bits
 *
 *   Note: assume invalid encodings are not passed to this function
 *
 * Round a number C with q decimal digits, represented as a binary integer
 * to q - x digits. Six different routines are provided for different values 
 * of q. The maximum value of q used in the library is q = 3 * P - 1 where 
 * P = 16 or P = 34 (so q <= 111 decimal digits). 
 * The partitioning is based on the following, where Kx is the scaled
 * integer representing the value of 10^(-x) rounded up to a number of bits
 * sufficient to ensure correct rounding:
 *
 * --------------------------------------------------------------------------
 * q    x           max. value of  a            max number      min. number 
 *                                              of bits in C    of bits in Kx
 * --------------------------------------------------------------------------
 *
 *                          GROUP 1: 64 bits
 *                          bid_round64_2_18 ()
 *
 * 2    [1,1]       10^1 - 1 < 2^3.33            4              4
 * ...  ...         ...                         ...             ...
 * 18   [1,17]      10^18 - 1 < 2^59.80         60              61
 *
 *                        GROUP 2: 128 bits
 *                        bid_round128_19_38 ()
 *
 * 19   [1,18]      10^19 - 1 < 2^63.11         64              65
 * 20   [1,19]      10^20 - 1 < 2^66.44         67              68
 * ...  ...         ...                         ...             ...
 * 38   [1,37]      10^38 - 1 < 2^126.24        127             128
 *
 *                        GROUP 3: 192 bits
 *                        bid_round192_39_57 ()
 *
 * 39   [1,38]      10^39 - 1 < 2^129.56        130             131
 * ...  ...         ...                         ...             ...
 * 57   [1,56]      10^57 - 1 < 2^189.35        190             191
 *
 *                        GROUP 4: 256 bits
 *                        bid_round256_58_76 ()
 *
 * 58   [1,57]      10^58 - 1 < 2^192.68        193             194
 * ...  ...         ...                         ...             ...
 * 76   [1,75]      10^76 - 1 < 2^252.47        253             254
 *
 *                        GROUP 5: 320 bits
 *                        round320_77_96 ()
 *
 * 77   [1,76]      10^77 - 1 < 2^255.79        256             257
 * 78   [1,77]      10^78 - 1 < 2^259.12        260             261
 * ...  ...         ...                         ...             ...
 * 96   [1,95]      10^96 - 1 < 2^318.91        319             320
 *
 *                        GROUP 6: 384 bits
 *                        round384_97_115 ()
 *
 * 97   [1,96]      10^97 - 1 < 2^322.23        323             324 
 * ...  ...         ...                         ...             ...
 * 115  [1,114]     10^115 - 1 < 2^382.03       383             384
 *
 ***************************************************************************','line_number':30,'multiline':True]
['text':' Note:','line_number':133,'multiline':False]
['text':'    In round128_2_18() positive numbers with 2 <= q <= 18 will be ','line_number':134,'multiline':False]
['text':'    rounded to nearest only for 1 <= x <= 3:','line_number':135,'multiline':False]
['text':'     x = 1 or x = 2 when q = 17','line_number':136,'multiline':False]
['text':'     x = 2 or x = 3 when q = 18','line_number':137,'multiline':False]
['text':' However, for generality and possible uses outside the frame of IEEE 754','line_number':138,'multiline':False]
['text':' this implementation works for 1 <= x <= q - 1','line_number':139,'multiline':False]
['text':' assume *ptr_is_midpoint_lt_even, *ptr_is_midpoint_gt_even,','line_number':141,'multiline':False]
['text':' *ptr_is_inexact_lt_midpoint, and *ptr_is_inexact_gt_midpoint are','line_number':142,'multiline':False]
['text':' initialized to 0 by the caller','line_number':143,'multiline':False]
['text':' round a number C with q decimal digits, 2 <= q <= 18','line_number':145,'multiline':False]
['text':' to q - x digits, 1 <= x <= 17','line_number':146,'multiline':False]
['text':' C = C + 1/2 * 10^x where the result C fits in 64 bits','line_number':147,'multiline':False]
['text':' (because the largest value is 999999999999999999 + 50000000000000000 =','line_number':148,'multiline':False]
['text':' 0x0e92596fd628ffff, which fits in 60 bits)','line_number':149,'multiline':False]
['text':' 0 <= ind <= 16','line_number':150,'multiline':False]
['text':' kx ~= 10^(-x), kx = bid_Kx64[ind] * 2^(-Ex), 0 <= ind <= 16','line_number':152,'multiline':False]
['text':' P128 = (C + 1/2 * 10^x) * kx * 2^Ex = (C + 1/2 * 10^x) * Kx','line_number':153,'multiline':False]
['text':' the approximation kx of 10^(-x) was rounded up to 64 bits','line_number':154,'multiline':False]
['text':' calculate C* = floor (P128) and f*','line_number':156,'multiline':False]
['text':' Cstar = P128 >> Ex','line_number':157,'multiline':False]
['text':' fstar = low Ex bits of P128','line_number':158,'multiline':False]
['text':' in [3, 56]','line_number':159,'multiline':False]
['text':' the top Ex bits of 10^(-x) are T* = bid_ten2mxtrunc64[ind], e.g.','line_number':163,'multiline':False]
['text':' if x=1, T*=bid_ten2mxtrunc64[0]=0xcccccccccccccccc','line_number':164,'multiline':False]
['text':' if (0 < f* < 10^(-x)) then the result is a midpoint','line_number':165,'multiline':False]
['text':'   if floor(C*) is even then C* = floor(C*) - logical right','line_number':166,'multiline':False]
['text':'       shift; C* has q - x decimal digits, correct by Prop. 1)','line_number':167,'multiline':False]
['text':'   else if floor(C*) is odd C* = floor(C*)-1 (logical right','line_number':168,'multiline':False]
['text':'       shift; C* has q - x decimal digits, correct by Pr. 1)','line_number':169,'multiline':False]
['text':' else','line_number':170,'multiline':False]
['text':'   C* = floor(C*) (logical right shift; C has q - x decimal digits,','line_number':171,'multiline':False]
['text':'       correct by Property 1)','line_number':172,'multiline':False]
['text':' in the caling function n = C* * 10^(e+x)','line_number':173,'multiline':False]
['text':' determine inexactness of the rounding of C*','line_number':175,'multiline':False]
['text':' if (0 < f* - 1/2 < 10^(-x)) then','line_number':176,'multiline':False]
['text':'   the result is exact','line_number':177,'multiline':False]
['text':' else // if (f* - 1/2 > T*) then','line_number':178,'multiline':False]
['text':'   the result is inexact','line_number':179,'multiline':False]
['text':' f* > 1/2 and the result may be exact','line_number':182,'multiline':False]
['text':' Calculate f* - 1/2','line_number':183,'multiline':False]
['text':' f* - 1/2 > 10^(-x)','line_number':185,'multiline':False]
['text':' else the result is exact','line_number':187,'multiline':False]
['text':' the result is inexact; f2* <= 1/2','line_number':188,'multiline':False]
['text':' check for midpoints (could do this before determining inexactness)','line_number':191,'multiline':False]
['text':' the result is a midpoint','line_number':193,'multiline':False]
['text':' Cstar is odd; MP in [EVEN, ODD]','line_number':194,'multiline':False]
['text':' if floor(C*) is odd C = floor(C*) - 1; the result may be 0','line_number':195,'multiline':False]
['text':' Cstar is now even','line_number':196,'multiline':False]
['text':' else MP in [ODD, EVEN]','line_number':200,'multiline':False]
['text':' check for rounding overflow, which occurs if Cstar = 10^(q-x)','line_number':206,'multiline':False]
['text':' 1 <= ind <= q - 1','line_number':207,'multiline':False]
['text':' if  Cstar = 10^(q-x)','line_number':208,'multiline':False]
['text':' Cstar = 10^(q-x-1)','line_number':209,'multiline':False]
['text':' 10^33 <= Cstar <= 10^34 - 1','line_number':211,'multiline':False]
['text':' Note:','line_number':235,'multiline':False]
['text':'    In bid_round128_19_38() positive numbers with 19 <= q <= 38 will be ','line_number':236,'multiline':False]
['text':'    rounded to nearest only for 1 <= x <= 23:','line_number':237,'multiline':False]
['text':'     x = 3 or x = 4 when q = 19','line_number':238,'multiline':False]
['text':'     x = 4 or x = 5 when q = 20','line_number':239,'multiline':False]
['text':'     ...','line_number':240,'multiline':False]
['text':'     x = 18 or x = 19 when q = 34','line_number':241,'multiline':False]
['text':'     x = 1 or x = 2 or x = 19 or x = 20 when q = 35','line_number':242,'multiline':False]
['text':'     x = 2 or x = 3 or x = 20 or x = 21 when q = 36','line_number':243,'multiline':False]
['text':'     x = 3 or x = 4 or x = 21 or x = 22 when q = 37','line_number':244,'multiline':False]
['text':'     x = 4 or x = 5 or x = 22 or x = 23 when q = 38','line_number':245,'multiline':False]
['text':' However, for generality and possible uses outside the frame of IEEE 754','line_number':246,'multiline':False]
['text':' this implementation works for 1 <= x <= q - 1','line_number':247,'multiline':False]
['text':' assume *ptr_is_midpoint_lt_even, *ptr_is_midpoint_gt_even,','line_number':249,'multiline':False]
['text':' *ptr_is_inexact_lt_midpoint, and *ptr_is_inexact_gt_midpoint are','line_number':250,'multiline':False]
['text':' initialized to 0 by the caller','line_number':251,'multiline':False]
['text':' round a number C with q decimal digits, 19 <= q <= 38','line_number':253,'multiline':False]
['text':' to q - x digits, 1 <= x <= 37','line_number':254,'multiline':False]
['text':' C = C + 1/2 * 10^x where the result C fits in 128 bits','line_number':255,'multiline':False]
['text':' (because the largest value is 99999999999999999999999999999999999999 + ','line_number':256,'multiline':False]
['text':' 5000000000000000000000000000000000000 =','line_number':257,'multiline':False]
['text':' 0x4efe43b0c573e7e68a043d8fffffffff, which fits is 127 bits)','line_number':258,'multiline':False]
['text':' 0 <= ind <= 36 ','line_number':260,'multiline':False]
['text':' if 0 <= ind <= 18','line_number':261,'multiline':False]
['text':' if 19 <= ind <= 37','line_number':266,'multiline':False]
['text':' kx ~= 10^(-x), kx = bid_Kx128[ind] * 2^(-Ex), 0 <= ind <= 36','line_number':274,'multiline':False]
['text':' P256 = (C + 1/2 * 10^x) * kx * 2^Ex = (C + 1/2 * 10^x) * Kx','line_number':275,'multiline':False]
['text':' the approximation kx of 10^(-x) was rounded up to 128 bits','line_number':276,'multiline':False]
['text':' calculate C* = floor (P256) and f*','line_number':278,'multiline':False]
['text':' Cstar = P256 >> Ex','line_number':279,'multiline':False]
['text':' fstar = low Ex bits of P256','line_number':280,'multiline':False]
['text':' in [2, 63] but have to consider two cases','line_number':281,'multiline':False]
['text':' if 0 <= ind <= 18 ','line_number':282,'multiline':False]
['text':' if 19 <= ind <= 37','line_number':289,'multiline':False]
['text':' the top Ex bits of 10^(-x) are T* = bid_ten2mxtrunc64[ind], e.g.','line_number':297,'multiline':False]
['text':' if x=1, T*=bid_ten2mxtrunc128[0]=0xcccccccccccccccccccccccccccccccc','line_number':298,'multiline':False]
['text':' if (0 < f* < 10^(-x)) then the result is a midpoint','line_number':299,'multiline':False]
['text':'   if floor(C*) is even then C* = floor(C*) - logical right','line_number':300,'multiline':False]
['text':'       shift; C* has q - x decimal digits, correct by Prop. 1)','line_number':301,'multiline':False]
['text':'   else if floor(C*) is odd C* = floor(C*)-1 (logical right','line_number':302,'multiline':False]
['text':'       shift; C* has q - x decimal digits, correct by Pr. 1)','line_number':303,'multiline':False]
['text':' else','line_number':304,'multiline':False]
['text':'   C* = floor(C*) (logical right shift; C has q - x decimal digits,','line_number':305,'multiline':False]
['text':'       correct by Property 1)','line_number':306,'multiline':False]
['text':' in the caling function n = C* * 10^(e+x)','line_number':307,'multiline':False]
['text':' determine inexactness of the rounding of C*','line_number':309,'multiline':False]
['text':' if (0 < f* - 1/2 < 10^(-x)) then','line_number':310,'multiline':False]
['text':'   the result is exact','line_number':311,'multiline':False]
['text':' else // if (f* - 1/2 > T*) then','line_number':312,'multiline':False]
['text':'   the result is inexact','line_number':313,'multiline':False]
['text':' if 0 <= ind <= 18','line_number':314,'multiline':False]
['text':' f* > 1/2 and the result may be exact','line_number':317,'multiline':False]
['text':' Calculate f* - 1/2','line_number':318,'multiline':False]
['text':' f* - 1/2 > 10^(-x)','line_number':320,'multiline':False]
['text':' else the result is exact','line_number':322,'multiline':False]
['text':' the result is inexact; f2* <= 1/2','line_number':323,'multiline':False]
['text':' if 19 <= ind <= 37','line_number':326,'multiline':False]
['text':' f* > 1/2 and the result may be exact','line_number':330,'multiline':False]
['text':' Calculate f* - 1/2','line_number':331,'multiline':False]
['text':' f* - 1/2 > 10^(-x)','line_number':333,'multiline':False]
['text':' else the result is exact','line_number':335,'multiline':False]
['text':' the result is inexact; f2* <= 1/2','line_number':336,'multiline':False]
['text':' check for midpoints (could do this before determining inexactness)','line_number':340,'multiline':False]
['text':' the result is a midpoint','line_number':345,'multiline':False]
['text':' Cstar is odd; MP in [EVEN, ODD]','line_number':346,'multiline':False]
['text':' if floor(C*) is odd C = floor(C*) - 1; the result may be 0','line_number':347,'multiline':False]
['text':' Cstar is now even','line_number':348,'multiline':False]
['text':' else MP in [ODD, EVEN]','line_number':355,'multiline':False]
['text':' check for rounding overflow, which occurs if Cstar = 10^(q-x)','line_number':361,'multiline':False]
['text':' 1 <= ind <= q - 1','line_number':362,'multiline':False]
['text':' if  Cstar = 10^(q-x)','line_number':365,'multiline':False]
['text':' Cstar = 10^(q-x-1)','line_number':366,'multiline':False]
['text':' if ind = 20','line_number':372,'multiline':False]
['text':' if  Cstar = 10^(q-x)','line_number':375,'multiline':False]
['text':' Cstar = 10^(q-x-1)','line_number':376,'multiline':False]
['text':' if 21 <= ind <= 37','line_number':382,'multiline':False]
['text':' if  Cstar = 10^(q-x)','line_number':385,'multiline':False]
['text':' Cstar = 10^(q-x-1)','line_number':386,'multiline':False]
['text':' Note:','line_number':415,'multiline':False]
['text':'    In bid_round192_39_57() positive numbers with 39 <= q <= 57 will be ','line_number':416,'multiline':False]
['text':'    rounded to nearest only for 5 <= x <= 42:','line_number':417,'multiline':False]
['text':'     x = 23 or x = 24 or x = 5 or x = 6 when q = 39','line_number':418,'multiline':False]
['text':'     x = 24 or x = 25 or x = 6 or x = 7 when q = 40','line_number':419,'multiline':False]
['text':'     ...','line_number':420,'multiline':False]
['text':'     x = 41 or x = 42 or x = 23 or x = 24 when q = 57','line_number':421,'multiline':False]
['text':' However, for generality and possible uses outside the frame of IEEE 754','line_number':422,'multiline':False]
['text':' this implementation works for 1 <= x <= q - 1','line_number':423,'multiline':False]
['text':' assume *ptr_is_midpoint_lt_even, *ptr_is_midpoint_gt_even,','line_number':425,'multiline':False]
['text':' *ptr_is_inexact_lt_midpoint, and *ptr_is_inexact_gt_midpoint are','line_number':426,'multiline':False]
['text':' initialized to 0 by the caller','line_number':427,'multiline':False]
['text':' round a number C with q decimal digits, 39 <= q <= 57','line_number':429,'multiline':False]
['text':' to q - x digits, 1 <= x <= 56','line_number':430,'multiline':False]
['text':' C = C + 1/2 * 10^x where the result C fits in 192 bits','line_number':431,'multiline':False]
['text':' (because the largest value is','line_number':432,'multiline':False]
['text':' 999999999999999999999999999999999999999999999999999999999 +','line_number':433,'multiline':False]
['text':'  50000000000000000000000000000000000000000000000000000000 =','line_number':434,'multiline':False]
['text':' 0x2ad282f212a1da846afdaf18c034ff09da7fffffffffffff, which fits in 190 bits)','line_number':435,'multiline':False]
['text':' 0 <= ind <= 55','line_number':436,'multiline':False]
['text':' if 0 <= ind <= 18','line_number':437,'multiline':False]
['text':' if 19 <= ind <= 37','line_number':446,'multiline':False]
['text':' if 38 <= ind <= 57 (actually ind <= 55)','line_number':460,'multiline':False]
['text':' kx ~= 10^(-x), kx = bid_Kx192[ind] * 2^(-Ex), 0 <= ind <= 55','line_number':476,'multiline':False]
['text':' P384 = (C + 1/2 * 10^x) * kx * 2^Ex = (C + 1/2 * 10^x) * Kx','line_number':477,'multiline':False]
['text':' the approximation kx of 10^(-x) was rounded up to 192 bits','line_number':478,'multiline':False]
['text':' calculate C* = floor (P384) and f*','line_number':480,'multiline':False]
['text':' Cstar = P384 >> Ex','line_number':481,'multiline':False]
['text':' fstar = low Ex bits of P384','line_number':482,'multiline':False]
['text':' in [1, 63] but have to consider three cases','line_number':483,'multiline':False]
['text':' if 0 <= ind <= 18 ','line_number':484,'multiline':False]
['text':' if 19 <= ind <= 37','line_number':494,'multiline':False]
['text':' if 38 <= ind <= 57','line_number':504,'multiline':False]
['text':' the top Ex bits of 10^(-x) are T* = bid_ten2mxtrunc192[ind], e.g. if x=1,','line_number':516,'multiline':False]
['text':' T*=bid_ten2mxtrunc192[0]=0xcccccccccccccccccccccccccccccccccccccccccccccccc','line_number':517,'multiline':False]
['text':' if (0 < f* < 10^(-x)) then the result is a midpoint','line_number':518,'multiline':False]
['text':'   if floor(C*) is even then C* = floor(C*) - logical right','line_number':519,'multiline':False]
['text':'       shift; C* has q - x decimal digits, correct by Prop. 1)','line_number':520,'multiline':False]
['text':'   else if floor(C*) is odd C* = floor(C*)-1 (logical right','line_number':521,'multiline':False]
['text':'       shift; C* has q - x decimal digits, correct by Pr. 1)','line_number':522,'multiline':False]
['text':' else','line_number':523,'multiline':False]
['text':'   C* = floor(C*) (logical right shift; C has q - x decimal digits,','line_number':524,'multiline':False]
['text':'       correct by Property 1)','line_number':525,'multiline':False]
['text':' in the caling function n = C* * 10^(e+x)','line_number':526,'multiline':False]
['text':' determine inexactness of the rounding of C*','line_number':528,'multiline':False]
['text':' if (0 < f* - 1/2 < 10^(-x)) then','line_number':529,'multiline':False]
['text':'   the result is exact','line_number':530,'multiline':False]
['text':' else // if (f* - 1/2 > T*) then','line_number':531,'multiline':False]
['text':'   the result is inexact','line_number':532,'multiline':False]
['text':' if 0 <= ind <= 18','line_number':533,'multiline':False]
['text':' f* > 1/2 and the result may be exact','line_number':537,'multiline':False]
['text':' Calculate f* - 1/2','line_number':538,'multiline':False]
['text':' f* - 1/2 > 10^(-x)','line_number':540,'multiline':False]
['text':' else the result is exact','line_number':542,'multiline':False]
['text':' the result is inexact; f2* <= 1/2','line_number':543,'multiline':False]
['text':' if 19 <= ind <= 37','line_number':546,'multiline':False]
['text':' f* > 1/2 and the result may be exact','line_number':550,'multiline':False]
['text':' Calculate f* - 1/2','line_number':551,'multiline':False]
['text':' f* - 1/2 > 10^(-x)','line_number':553,'multiline':False]
['text':' else the result is exact','line_number':555,'multiline':False]
['text':' the result is inexact; f2* <= 1/2','line_number':556,'multiline':False]
['text':' if 38 <= ind <= 55','line_number':559,'multiline':False]
['text':' f* > 1/2 and the result may be exact','line_number':564,'multiline':False]
['text':' Calculate f* - 1/2','line_number':565,'multiline':False]
['text':' f* - 1/2 > 10^(-x)','line_number':567,'multiline':False]
['text':' else the result is exact','line_number':569,'multiline':False]
['text':' the result is inexact; f2* <= 1/2','line_number':570,'multiline':False]
['text':' check for midpoints (could do this before determining inexactness)','line_number':574,'multiline':False]
['text':' the result is a midpoint','line_number':582,'multiline':False]
['text':' Cstar is odd; MP in [EVEN, ODD]','line_number':583,'multiline':False]
['text':' if floor(C*) is odd C = floor(C*) - 1; the result may be 0','line_number':584,'multiline':False]
['text':' Cstar is now even','line_number':585,'multiline':False]
['text':' else MP in [ODD, EVEN]','line_number':595,'multiline':False]
['text':' check for rounding overflow, which occurs if Cstar = 10^(q-x)','line_number':601,'multiline':False]
['text':' 1 <= ind <= q - 1','line_number':602,'multiline':False]
['text':' if  Cstar = 10^(q-x)','line_number':606,'multiline':False]
['text':' Cstar = 10^(q-x-1)','line_number':607,'multiline':False]
['text':' if ind = 20','line_number':613,'multiline':False]
['text':' if  Cstar = 10^(q-x)','line_number':616,'multiline':False]
['text':' Cstar = 10^(q-x-1)','line_number':617,'multiline':False]
['text':' if 21 <= ind <= 38','line_number':623,'multiline':False]
['text':' if  Cstar = 10^(q-x)','line_number':626,'multiline':False]
['text':' Cstar = 10^(q-x-1)','line_number':627,'multiline':False]
['text':' if  Cstar = 10^(q-x)','line_number':636,'multiline':False]
['text':' Cstar = 10^(q-x-1)','line_number':637,'multiline':False]
['text':' if 40 <= ind <= 56','line_number':644,'multiline':False]
['text':' if  Cstar = 10^(q-x)','line_number':648,'multiline':False]
['text':' Cstar = 10^(q-x-1)','line_number':649,'multiline':False]
['text':' Note:','line_number':680,'multiline':False]
['text':'    In bid_round256_58_76() positive numbers with 58 <= q <= 76 will be ','line_number':681,'multiline':False]
['text':'    rounded to nearest only for 24 <= x <= 61:','line_number':682,'multiline':False]
['text':'     x = 42 or x = 43 or x = 24 or x = 25 when q = 58','line_number':683,'multiline':False]
['text':'     x = 43 or x = 44 or x = 25 or x = 26 when q = 59','line_number':684,'multiline':False]
['text':'     ...','line_number':685,'multiline':False]
['text':'     x = 60 or x = 61 or x = 42 or x = 43 when q = 76','line_number':686,'multiline':False]
['text':' However, for generality and possible uses outside the frame of IEEE 754','line_number':687,'multiline':False]
['text':' this implementation works for 1 <= x <= q - 1','line_number':688,'multiline':False]
['text':' assume *ptr_is_midpoint_lt_even, *ptr_is_midpoint_gt_even,','line_number':690,'multiline':False]
['text':' *ptr_is_inexact_lt_midpoint, and *ptr_is_inexact_gt_midpoint are','line_number':691,'multiline':False]
['text':' initialized to 0 by the caller','line_number':692,'multiline':False]
['text':' round a number C with q decimal digits, 58 <= q <= 76','line_number':694,'multiline':False]
['text':' to q - x digits, 1 <= x <= 75','line_number':695,'multiline':False]
['text':' C = C + 1/2 * 10^x where the result C fits in 256 bits','line_number':696,'multiline':False]
['text':' (because the largest value is 9999999999999999999999999999999999999999','line_number':697,'multiline':False]
['text':'     999999999999999999999999999999999999 + 500000000000000000000000000','line_number':698,'multiline':False]
['text':'     000000000000000000000000000000000000000000000000 =','line_number':699,'multiline':False]
['text':'     0x1736ca15d27a56cae15cf0e7b403d1f2bd6ebb0a50dc83ffffffffffffffffff, ','line_number':700,'multiline':False]
['text':' which fits in 253 bits)','line_number':701,'multiline':False]
['text':' 0 <= ind <= 74','line_number':702,'multiline':False]
['text':' if 0 <= ind <= 18','line_number':703,'multiline':False]
['text':' if 19 <= ind <= 37','line_number':715,'multiline':False]
['text':' if 38 <= ind <= 57','line_number':735,'multiline':False]
['text':' if 58 <= ind <= 76 (actually 58 <= ind <= 74)','line_number':760,'multiline':False]
['text':' kx ~= 10^(-x), kx = bid_Kx256[ind] * 2^(-Ex), 0 <= ind <= 74','line_number':787,'multiline':False]
['text':' P512 = (C + 1/2 * 10^x) * kx * 2^Ex = (C + 1/2 * 10^x) * Kx','line_number':788,'multiline':False]
['text':' the approximation kx of 10^(-x) was rounded up to 192 bits','line_number':789,'multiline':False]
['text':' calculate C* = floor (P512) and f*','line_number':791,'multiline':False]
['text':' Cstar = P512 >> Ex','line_number':792,'multiline':False]
['text':' fstar = low Ex bits of P512','line_number':793,'multiline':False]
['text':' in [0, 63] but have to consider four cases','line_number':794,'multiline':False]
['text':' if 0 <= ind <= 18 ','line_number':795,'multiline':False]
['text':' if 19 <= ind <= 37','line_number':808,'multiline':False]
['text':' if 38 <= ind <= 56','line_number':821,'multiline':False]
['text':' if 58 <= ind <= 74','line_number':847,'multiline':False]
['text':' the top Ex bits of 10^(-x) are T* = bid_ten2mxtrunc256[ind], e.g. if x=1,','line_number':862,'multiline':False]
['text':' T*=bid_ten2mxtrunc256[0]=','line_number':863,'multiline':False]
['text':'     0xcccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc','line_number':864,'multiline':False]
['text':' if (0 < f* < 10^(-x)) then the result is a midpoint','line_number':865,'multiline':False]
['text':'   if floor(C*) is even then C* = floor(C*) - logical right','line_number':866,'multiline':False]
['text':'       shift; C* has q - x decimal digits, correct by Prop. 1)','line_number':867,'multiline':False]
['text':'   else if floor(C*) is odd C* = floor(C*)-1 (logical right','line_number':868,'multiline':False]
['text':'       shift; C* has q - x decimal digits, correct by Pr. 1)','line_number':869,'multiline':False]
['text':' else','line_number':870,'multiline':False]
['text':'   C* = floor(C*) (logical right shift; C has q - x decimal digits,','line_number':871,'multiline':False]
['text':'       correct by Property 1)','line_number':872,'multiline':False]
['text':' in the caling function n = C* * 10^(e+x)','line_number':873,'multiline':False]
['text':' determine inexactness of the rounding of C*','line_number':875,'multiline':False]
['text':' if (0 < f* - 1/2 < 10^(-x)) then','line_number':876,'multiline':False]
['text':'   the result is exact','line_number':877,'multiline':False]
['text':' else // if (f* - 1/2 > T*) then','line_number':878,'multiline':False]
['text':'   the result is inexact','line_number':879,'multiline':False]
['text':' if 0 <= ind <= 18','line_number':880,'multiline':False]
['text':' f* > 1/2 and the result may be exact','line_number':884,'multiline':False]
['text':' Calculate f* - 1/2','line_number':885,'multiline':False]
['text':' f* - 1/2 > 10^(-x)','line_number':887,'multiline':False]
['text':' else the result is exact','line_number':889,'multiline':False]
['text':' the result is inexact; f2* <= 1/2','line_number':890,'multiline':False]
['text':' if 19 <= ind <= 37','line_number':893,'multiline':False]
['text':' f* > 1/2 and the result may be exact','line_number':898,'multiline':False]
['text':' Calculate f* - 1/2','line_number':899,'multiline':False]
['text':' f* - 1/2 > 10^(-x)','line_number':901,'multiline':False]
['text':' else the result is exact','line_number':903,'multiline':False]
['text':' the result is inexact; f2* <= 1/2','line_number':904,'multiline':False]
['text':' if 38 <= ind <= 57','line_number':907,'multiline':False]
['text':' f* > 1/2 and the result may be exact','line_number':912,'multiline':False]
['text':' Calculate f* - 1/2','line_number':913,'multiline':False]
['text':' f* - 1/2 > 10^(-x)','line_number':915,'multiline':False]
['text':' else the result is exact','line_number':917,'multiline':False]
['text':' the result is inexact; f2* <= 1/2','line_number':918,'multiline':False]
['text':' if 58 <= ind <= 74','line_number':921,'multiline':False]
['text':' f* > 1/2 and the result may be exact','line_number':927,'multiline':False]
['text':' Calculate f* - 1/2','line_number':928,'multiline':False]
['text':' f* - 1/2 > 10^(-x)','line_number':930,'multiline':False]
['text':' else the result is exact','line_number':932,'multiline':False]
['text':' the result is inexact; f2* <= 1/2','line_number':933,'multiline':False]
['text':' check for midpoints (could do this before determining inexactness)','line_number':937,'multiline':False]
['text':' the result is a midpoint','line_number':950,'multiline':False]
['text':' Cstar is odd; MP in [EVEN, ODD]','line_number':951,'multiline':False]
['text':' if floor(C*) is odd C = floor(C*) - 1; the result may be 0','line_number':952,'multiline':False]
['text':' Cstar is now even','line_number':953,'multiline':False]
['text':' else MP in [ODD, EVEN]','line_number':966,'multiline':False]
['text':' check for rounding overflow, which occurs if Cstar = 10^(q-x)','line_number':972,'multiline':False]
['text':' 1 <= ind <= q - 1','line_number':973,'multiline':False]
['text':' if  Cstar = 10^(q-x)','line_number':977,'multiline':False]
['text':' Cstar = 10^(q-x-1)','line_number':978,'multiline':False]
['text':' if ind = 20','line_number':984,'multiline':False]
['text':' if  Cstar = 10^(q-x)','line_number':988,'multiline':False]
['text':' Cstar = 10^(q-x-1)','line_number':989,'multiline':False]
['text':' if 21 <= ind <= 38','line_number':995,'multiline':False]
['text':' if  Cstar = 10^(q-x)','line_number':999,'multiline':False]
['text':' Cstar = 10^(q-x-1)','line_number':1000,'multiline':False]
['text':' if  Cstar = 10^(q-x)','line_number':1010,'multiline':False]
['text':' Cstar = 10^(q-x-1)','line_number':1011,'multiline':False]
['text':' if 40 <= ind <= 57','line_number':1018,'multiline':False]
['text':' if  Cstar = 10^(q-x)','line_number':1022,'multiline':False]
['text':' Cstar = 10^(q-x-1)','line_number':1023,'multiline':False]
['text':' else if (ind == 58) is not needed becauae we do not have ten2k192[] yet','line_number':1030,'multiline':False]
['text':' if 58 <= ind <= 77 (actually 58 <= ind <= 74)','line_number':1031,'multiline':False]
['text':' if  Cstar = 10^(q-x)','line_number':1036,'multiline':False]
['text':' Cstar = 10^(q-x-1)','line_number':1037,'multiline':False]
