['text':'*****************************************************************************
  Copyright (c) 2007-2011, Intel Corp.
  All rights reserved.

  Redistribution and use in source and binary forms, with or without 
  modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice, 
      this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright 
      notice, this list of conditions and the following disclaimer in the 
      documentation and/or other materials provided with the distribution.
    * Neither the name of Intel Corporation nor the names of its contributors 
      may be used to endorse or promote products derived from this software 
      without specific prior written permission.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
  THE POSSIBILITY OF SUCH DAMAGE.
*****************************************************************************','line_number':1,'multiline':True]
['text':' NaN (CASE1)','line_number':42,'multiline':False]
['text':' if either number is NAN, the comparison is unordered, ','line_number':43,'multiline':False]
['text':' rather than equal : return 0','line_number':44,'multiline':False]
['text':' SIMPLE (CASE2)','line_number':56,'multiline':False]
['text':' if all the bits are the same, these numbers are equivalent.','line_number':57,'multiline':False]
['text':' INFINITY (CASE3)','line_number':62,'multiline':False]
['text':' CONVERT X','line_number':76,'multiline':False]
['text':' CHECK IF X IS CANONICAL','line_number':81,'multiline':False]
['text':' 9999999999999999999999999999999999(decimal) = ','line_number':82,'multiline':False]
['text':'   1ed09_bead87c0_378d8e63_ffffffff(hexadecimal)','line_number':83,'multiline':False]
['text':' [0, 10^34) is the 754 supported canonical range.  ','line_number':84,'multiline':False]
['text':'   If the value exceeds that, it is interpreted as 0.','line_number':85,'multiline':False]
['text':' CONVERT Y','line_number':94,'multiline':False]
['text':' CHECK IF Y IS CANONICAL','line_number':99,'multiline':False]
['text':' 9999999999999999999999999999999999(decimal) = ','line_number':100,'multiline':False]
['text':'   1ed09_bead87c0_378d8e63_ffffffff(hexadecimal)','line_number':101,'multiline':False]
['text':' [0, 10^34) is the 754 supported canonical range.  ','line_number':102,'multiline':False]
['text':' If the value exceeds that, it is interpreted as 0.','line_number':103,'multiline':False]
['text':' some properties:','line_number':112,'multiline':False]
['text':'    (+ZERO == -ZERO) => therefore ignore the sign','line_number':113,'multiline':False]
['text':'    (ZERO x 10^A == ZERO x 10^B) for any valid A, B => therefore ','line_number':114,'multiline':False]
['text':'    ignore the exponent field','line_number':115,'multiline':False]
['text':'    (Any non-canonical # is considered 0)','line_number':116,'multiline':False]
['text':' OPPOSITE SIGN (CASE5)','line_number':131,'multiline':False]
['text':' now, if the sign bits differ => not equal : return 0','line_number':132,'multiline':False]
['text':' REDUNDANT REPRESENTATIONS (CASE6)','line_number':137,'multiline':False]
['text':' to simplify the loop below,','line_number':138,'multiline':False]
['text':' put the larger exp in y,','line_number':139,'multiline':False]
['text':' and the smaller exp in x','line_number':140,'multiline':False]
['text':' and the smaller exp in x','line_number':141,'multiline':False]
['text':' difference cannot be greater than 10^33','line_number':148,'multiline':False]
['text':' recalculate y's significand upwards','line_number':151,'multiline':False]
['text':'else{','line_number':162,'multiline':False]
['text':' recalculate y's significand upwards','line_number':163,'multiline':False]
['text':' NaN (CASE1)','line_number':184,'multiline':False]
['text':' if either number is NAN, the comparison is unordered, rather than ','line_number':185,'multiline':False]
['text':' equal : return 0','line_number':186,'multiline':False]
['text':' SIMPLE (CASE2)','line_number':198,'multiline':False]
['text':' if all the bits are the same, these numbers are equal (not Greater).','line_number':199,'multiline':False]
['text':' INFINITY (CASE3)','line_number':204,'multiline':False]
['text':' if x is neg infinity, there is no way it is greater than y, return 0','line_number':206,'multiline':False]
['text':' x is pos infinity, it is greater, unless y is positive infinity => ','line_number':211,'multiline':False]
['text':' return y!=pos_infinity','line_number':212,'multiline':False]
['text':' x is finite, so if y is positive infinity, then x is less, return 0','line_number':219,'multiline':False]
['text':'                 if y is negative infinity, then x is greater, return 1','line_number':220,'multiline':False]
['text':' CONVERT X','line_number':226,'multiline':False]
['text':' CHECK IF X IS CANONICAL','line_number':231,'multiline':False]
['text':' 9999999999999999999999999999999999(decimal) = ','line_number':232,'multiline':False]
['text':'   1ed09_bead87c0_378d8e63_ffffffff(hexadecimal)','line_number':233,'multiline':False]
['text':' [0, 10^34) is the 754 supported canonical range.  ','line_number':234,'multiline':False]
['text':'    If the value exceeds that, it is interpreted as 0.','line_number':235,'multiline':False]
['text':' CONVERT Y','line_number':244,'multiline':False]
['text':' CHECK IF Y IS CANONICAL','line_number':249,'multiline':False]
['text':' 9999999999999999999999999999999999(decimal) = ','line_number':250,'multiline':False]
['text':'   1ed09_bead87c0_378d8e63_ffffffff(hexadecimal)','line_number':251,'multiline':False]
['text':' [0, 10^34) is the 754 supported canonical range.  ','line_number':252,'multiline':False]
['text':'    If the value exceeds that, it is interpreted as 0.','line_number':253,'multiline':False]
['text':' ZERO (CASE4)','line_number':262,'multiline':False]
['text':' some properties:','line_number':263,'multiline':False]
['text':'    (+ZERO == -ZERO) => therefore ignore the sign','line_number':264,'multiline':False]
['text':'    (ZERO x 10^A == ZERO x 10^B) for any valid A, B => therefore ','line_number':265,'multiline':False]
['text':'    ignore the exponent field','line_number':266,'multiline':False]
['text':'    (Any non-canonical # is considered 0)','line_number':267,'multiline':False]
['text':' if both numbers are zero, neither is greater => return NOTGREATERTHAN','line_number':274,'multiline':False]
['text':' is x is zero, it is greater if Y is negative','line_number':279,'multiline':False]
['text':' is y is zero, X is greater if it is positive','line_number':284,'multiline':False]
['text':' OPPOSITE SIGN (CASE5)','line_number':289,'multiline':False]
['text':' now, if the sign bits differ, x is greater if y is negative','line_number':290,'multiline':False]
['text':' REDUNDANT REPRESENTATIONS (CASE6)','line_number':295,'multiline':False]
['text':' if exponents are the same, then we have a simple comparison ','line_number':296,'multiline':False]
['text':' of the significands','line_number':297,'multiline':False]
['text':' if both components are either bigger or smaller, ','line_number':305,'multiline':False]
['text':' it is clear what needs to be done','line_number':306,'multiline':False]
['text':' if |exp_x - exp_y| < 33, it comes down to the compensated significand','line_number':326,'multiline':False]
['text':' to simplify the loop below,','line_number':327,'multiline':False]
['text':' if exp_x is 33 greater than exp_y, no need for compensation','line_number':329,'multiline':False]
['text':' difference cannot be greater than 10^33','line_number':333,'multiline':False]
['text':'128 by 128 bit multiply -> 256 bits','line_number':335,'multiline':False]
['text':' if postitive, return whichever significand is larger ','line_number':338,'multiline':False]
['text':' (converse if negative)','line_number':339,'multiline':False]
['text':' if equal, return 0','line_number':345,'multiline':False]
['text':'else { //128 by 64 bit multiply -> 192 bits','line_number':355,'multiline':False]
['text':' if postitive, return whichever significand is larger ','line_number':358,'multiline':False]
['text':' (converse if negative)','line_number':359,'multiline':False]
['text':' if equal, return 0','line_number':364,'multiline':False]
['text':' if exp_x is 33 less than exp_y, no need for compensation','line_number':377,'multiline':False]
['text':'128 by 128 bit multiply -> 256 bits','line_number':383,'multiline':False]
['text':' adjust the y significand upwards','line_number':384,'multiline':False]
['text':' if postitive, return whichever significand is larger ','line_number':387,'multiline':False]
['text':' (converse if negative)','line_number':388,'multiline':False]
['text':' if equal, return 0','line_number':394,'multiline':False]
['text':'else { //128 by 64 bit multiply -> 192 bits','line_number':404,'multiline':False]
['text':' adjust the y significand upwards','line_number':405,'multiline':False]
['text':' if postitive, return whichever significand is larger ','line_number':408,'multiline':False]
['text':' (converse if negative)','line_number':409,'multiline':False]
['text':' if equal, return 0','line_number':414,'multiline':False]
['text':' NaN (CASE1)','line_number':437,'multiline':False]
['text':' if either number is NAN, the comparison is unordered, ','line_number':438,'multiline':False]
['text':' rather than equal : return 1','line_number':439,'multiline':False]
['text':' SIMPLE (CASE2)','line_number':451,'multiline':False]
['text':' if all the bits are the same, these numbers are equal (not Greater).','line_number':452,'multiline':False]
['text':' INFINITY (CASE3)','line_number':457,'multiline':False]
['text':' if x==neg_inf, { res = (y == neg_inf)?1:0; BID_RETURN_VAL (res) }','line_number':459,'multiline':False]
['text':' x is -inf, so it is less than y unless y is -inf','line_number':461,'multiline':False]
['text':' x is pos_inf, no way for it to be less than y','line_number':467,'multiline':False]
['text':' x is finite, so if y is positive infinity, then x is less, return 0','line_number':473,'multiline':False]
['text':'                 if y is negative infinity, then x is greater, return 1','line_number':474,'multiline':False]
['text':' CONVERT X','line_number':480,'multiline':False]
['text':' CHECK IF X IS CANONICAL','line_number':485,'multiline':False]
['text':' 9999999999999999999999999999999999(decimal) = ','line_number':486,'multiline':False]
['text':'   1ed09_bead87c0_378d8e63_ffffffff(hexadecimal)','line_number':487,'multiline':False]
['text':' [0, 10^34) is the 754 supported canonical range.  ','line_number':488,'multiline':False]
['text':'    If the value exceeds that, it is interpreted as 0.','line_number':489,'multiline':False]
['text':' CONVERT Y','line_number':498,'multiline':False]
['text':' CHECK IF Y IS CANONICAL','line_number':503,'multiline':False]
['text':' 9999999999999999999999999999999999(decimal) = ','line_number':504,'multiline':False]
['text':'   1ed09_bead87c0_378d8e63_ffffffff(hexadecimal)','line_number':505,'multiline':False]
['text':' [0, 10^34) is the 754 supported canonical range.  ','line_number':506,'multiline':False]
['text':'    If the value exceeds that, it is interpreted as 0.','line_number':507,'multiline':False]
['text':' ZERO (CASE4)','line_number':516,'multiline':False]
['text':' some properties:','line_number':517,'multiline':False]
['text':'    (+ZERO == -ZERO) => therefore ignore the sign','line_number':518,'multiline':False]
['text':'    (ZERO x 10^A == ZERO x 10^B) for any valid A, B => therefore ','line_number':519,'multiline':False]
['text':'    ignore the exponent field','line_number':520,'multiline':False]
['text':'    (Any non-canonical # is considered 0)','line_number':521,'multiline':False]
['text':' if both numbers are zero, neither is greater => return NOTGREATERTHAN','line_number':528,'multiline':False]
['text':' is x is zero, it is greater if Y is negative','line_number':533,'multiline':False]
['text':' is y is zero, X is greater if it is positive','line_number':538,'multiline':False]
['text':' OPPOSITE SIGN (CASE5)','line_number':543,'multiline':False]
['text':' now, if the sign bits differ, x is greater if y is negative','line_number':544,'multiline':False]
['text':' REDUNDANT REPRESENTATIONS (CASE6)','line_number':549,'multiline':False]
['text':' if exponents are the same, then we have a simple comparison of the ','line_number':550,'multiline':False]
['text':' significands','line_number':551,'multiline':False]
['text':' if both components are either bigger or smaller, ','line_number':559,'multiline':False]
['text':' it is clear what needs to be done','line_number':560,'multiline':False]
['text':' if |exp_x - exp_y| < 33, it comes down to the compensated significand','line_number':574,'multiline':False]
['text':' to simplify the loop below,','line_number':575,'multiline':False]
['text':' if exp_x is 33 greater than exp_y, no need for compensation','line_number':577,'multiline':False]
['text':' difference cannot be greater than 10^33','line_number':581,'multiline':False]
['text':'128 by 128 bit multiply -> 256 bits','line_number':583,'multiline':False]
['text':' if postitive, return whichever significand is larger ','line_number':587,'multiline':False]
['text':' (converse if negative)','line_number':588,'multiline':False]
['text':' if equal, return 1','line_number':594,'multiline':False]
['text':'else { //128 by 64 bit multiply -> 192 bits','line_number':604,'multiline':False]
['text':' if postitive, return whichever significand is larger ','line_number':607,'multiline':False]
['text':' (converse if negative)','line_number':608,'multiline':False]
['text':' if equal, return 1','line_number':613,'multiline':False]
['text':' if exp_x is 33 less than exp_y, no need for compensation','line_number':626,'multiline':False]
['text':'128 by 128 bit multiply -> 256 bits','line_number':632,'multiline':False]
['text':' adjust the y significand upwards','line_number':633,'multiline':False]
['text':' if postitive, return whichever significand is larger ','line_number':637,'multiline':False]
['text':' (converse if negative)','line_number':638,'multiline':False]
['text':' if equal, return 1','line_number':644,'multiline':False]
['text':'else { //128 by 64 bit multiply -> 192 bits','line_number':655,'multiline':False]
['text':' adjust the y significand upwards','line_number':656,'multiline':False]
['text':' if postitive, return whichever significand is larger ','line_number':659,'multiline':False]
['text':' (converse if negative)','line_number':660,'multiline':False]
['text':' if equal, return 1','line_number':665,'multiline':False]
['text':' NaN (CASE1)','line_number':688,'multiline':False]
['text':' if either number is NAN, the comparison is unordered, ','line_number':689,'multiline':False]
['text':' rather than ','line_number':690,'multiline':False]
['text':' equal : return 1','line_number':691,'multiline':False]
['text':' SIMPLE (CASE2)','line_number':703,'multiline':False]
['text':' if all the bits are the same, these numbers are equal (not Greater).','line_number':704,'multiline':False]
['text':' INFINITY (CASE3)','line_number':709,'multiline':False]
['text':' if x is neg infinity, there is no way it is greater than y, return 0','line_number':711,'multiline':False]
['text':' x is pos infinity, it is greater, unless y is positive infinity => ','line_number':716,'multiline':False]
['text':' return y!=pos_infinity','line_number':717,'multiline':False]
['text':' x is finite, so if y is positive infinity, then x is less, return 0','line_number':724,'multiline':False]
['text':'                 if y is negative infinity, then x is greater, return 1','line_number':725,'multiline':False]
['text':' CONVERT X','line_number':731,'multiline':False]
['text':' CHECK IF X IS CANONICAL','line_number':736,'multiline':False]
['text':' 9999999999999999999999999999999999(decimal) = ','line_number':737,'multiline':False]
['text':'   1ed09_bead87c0_378d8e63_ffffffff(hexadecimal)','line_number':738,'multiline':False]
['text':' [0, 10^34) is the 754 supported canonical range.  ','line_number':739,'multiline':False]
['text':'    If the value exceeds that, it is interpreted as 0.','line_number':740,'multiline':False]
['text':' CONVERT Y','line_number':749,'multiline':False]
['text':' CHECK IF Y IS CANONICAL','line_number':754,'multiline':False]
['text':' 9999999999999999999999999999999999(decimal) = ','line_number':755,'multiline':False]
['text':'   1ed09_bead87c0_378d8e63_ffffffff(hexadecimal)','line_number':756,'multiline':False]
['text':' [0, 10^34) is the 754 supported canonical range.  ','line_number':757,'multiline':False]
['text':'    If the value exceeds that, it is interpreted as 0.','line_number':758,'multiline':False]
['text':' ZERO (CASE4)','line_number':767,'multiline':False]
['text':' some properties:','line_number':768,'multiline':False]
['text':'    (+ZERO == -ZERO) => therefore ignore the sign','line_number':769,'multiline':False]
['text':'    (ZERO x 10^A == ZERO x 10^B) for any valid A, B => therefore ','line_number':770,'multiline':False]
['text':'    ignore the exponent field','line_number':771,'multiline':False]
['text':'    (Any non-canonical # is considered 0)','line_number':772,'multiline':False]
['text':' if both numbers are zero, neither is greater => return NOTGREATERTHAN','line_number':779,'multiline':False]
['text':' is x is zero, it is greater if Y is negative','line_number':784,'multiline':False]
['text':' is y is zero, X is greater if it is positive','line_number':789,'multiline':False]
['text':' OPPOSITE SIGN (CASE5)','line_number':794,'multiline':False]
['text':' now, if the sign bits differ, x is greater if y is negative','line_number':795,'multiline':False]
['text':' REDUNDANT REPRESENTATIONS (CASE6)','line_number':800,'multiline':False]
['text':' if exponents are the same, then we have a simple comparison of the ','line_number':801,'multiline':False]
['text':' significands','line_number':802,'multiline':False]
['text':' if both components are either bigger or smaller, ','line_number':810,'multiline':False]
['text':' it is clear what needs to be done','line_number':811,'multiline':False]
['text':' if |exp_x - exp_y| < 33, it comes down to the compensated significand','line_number':825,'multiline':False]
['text':' to simplify the loop below,','line_number':826,'multiline':False]
['text':' if exp_x is 33 greater than exp_y, no need for compensation','line_number':828,'multiline':False]
['text':' difference cannot be greater than 10^33','line_number':832,'multiline':False]
['text':'128 by 128 bit multiply -> 256 bits','line_number':834,'multiline':False]
['text':' if postitive, return whichever significand is larger ','line_number':838,'multiline':False]
['text':' (converse if negative)','line_number':839,'multiline':False]
['text':' if equal, return 0','line_number':845,'multiline':False]
['text':'else { //128 by 64 bit multiply -> 192 bits','line_number':855,'multiline':False]
['text':' if postitive, return whichever significand is larger ','line_number':858,'multiline':False]
['text':' (converse if negative)','line_number':859,'multiline':False]
['text':' if equal, return 0','line_number':864,'multiline':False]
['text':' if exp_x is 33 less than exp_y, no need for compensation','line_number':877,'multiline':False]
['text':'128 by 128 bit multiply -> 256 bits','line_number':883,'multiline':False]
['text':' adjust the y significand upwards','line_number':884,'multiline':False]
['text':' if postitive, return whichever significand is larger ','line_number':888,'multiline':False]
['text':' (converse if negative)','line_number':889,'multiline':False]
['text':' if equal, return 0','line_number':895,'multiline':False]
['text':'else { //128 by 64 bit multiply -> 192 bits','line_number':906,'multiline':False]
['text':' adjust the y significand upwards','line_number':907,'multiline':False]
['text':' if postitive, return whichever significand is larger ','line_number':910,'multiline':False]
['text':' (converse if negative)','line_number':911,'multiline':False]
['text':' if equal, return 0','line_number':916,'multiline':False]
['text':' NaN (CASE1)','line_number':937,'multiline':False]
['text':' if either number is NAN, the comparison is unordered, ','line_number':938,'multiline':False]
['text':' rather than equal : return 0','line_number':939,'multiline':False]
['text':' SIMPLE (CASE2)','line_number':951,'multiline':False]
['text':' if all the bits are the same, these numbers are equal.','line_number':952,'multiline':False]
['text':' INFINITY (CASE3)','line_number':957,'multiline':False]
['text':' if x==neg_inf, { res = (y == neg_inf)?1:0; BID_RETURN_VAL (res) }','line_number':959,'multiline':False]
['text':' x is -inf, so it is less than y unless y is -inf','line_number':961,'multiline':False]
['text':' x is pos_inf, no way for it to be less than y','line_number':967,'multiline':False]
['text':' x is finite, so if y is positive infinity, then x is less, return 0','line_number':973,'multiline':False]
['text':'                 if y is negative infinity, then x is greater, return 1','line_number':974,'multiline':False]
['text':' CONVERT X','line_number':980,'multiline':False]
['text':' CHECK IF X IS CANONICAL','line_number':985,'multiline':False]
['text':' 9999999999999999999999999999999999(decimal) = ','line_number':986,'multiline':False]
['text':'   1ed09_bead87c0_378d8e63_ffffffff(hexadecimal)','line_number':987,'multiline':False]
['text':' [0, 10^34) is the 754 supported canonical range.  ','line_number':988,'multiline':False]
['text':'    If the value exceeds that, it is interpreted as 0.','line_number':989,'multiline':False]
['text':' CONVERT Y','line_number':998,'multiline':False]
['text':' CHECK IF Y IS CANONICAL','line_number':1003,'multiline':False]
['text':' 9999999999999999999999999999999999(decimal) = ','line_number':1004,'multiline':False]
['text':'   1ed09_bead87c0_378d8e63_ffffffff(hexadecimal)','line_number':1005,'multiline':False]
['text':' [0, 10^34) is the 754 supported canonical range.  ','line_number':1006,'multiline':False]
['text':'    If the value exceeds that, it is interpreted as 0.','line_number':1007,'multiline':False]
['text':' ZERO (CASE4)','line_number':1016,'multiline':False]
['text':' some properties:','line_number':1017,'multiline':False]
['text':'    (+ZERO == -ZERO) => therefore ignore the sign','line_number':1018,'multiline':False]
['text':'    (ZERO x 10^A == ZERO x 10^B) for any valid A, B => therefore ','line_number':1019,'multiline':False]
['text':'    ignore the exponent field','line_number':1020,'multiline':False]
['text':'    (Any non-canonical # is considered 0)','line_number':1021,'multiline':False]
['text':' if both numbers are zero, neither is greater => return NOTGREATERTHAN','line_number':1028,'multiline':False]
['text':' is x is zero, it is greater if Y is negative','line_number':1033,'multiline':False]
['text':' is y is zero, X is greater if it is positive','line_number':1038,'multiline':False]
['text':' OPPOSITE SIGN (CASE5)','line_number':1043,'multiline':False]
['text':' now, if the sign bits differ, x is greater if y is negative','line_number':1044,'multiline':False]
['text':' REDUNDANT REPRESENTATIONS (CASE6)','line_number':1049,'multiline':False]
['text':' if exponents are the same, then we have a simple comparison of the ','line_number':1050,'multiline':False]
['text':' significands','line_number':1051,'multiline':False]
['text':' if both components are either bigger or smaller, ','line_number':1059,'multiline':False]
['text':' it is clear what needs to be done','line_number':1060,'multiline':False]
['text':' if |exp_x - exp_y| < 33, it comes down to the compensated significand','line_number':1076,'multiline':False]
['text':' to simplify the loop below,','line_number':1077,'multiline':False]
['text':' if exp_x is 33 greater than exp_y, no need for compensation','line_number':1079,'multiline':False]
['text':' difference cannot be greater than 10^33','line_number':1083,'multiline':False]
['text':'128 by 128 bit multiply -> 256 bits','line_number':1085,'multiline':False]
['text':' if postitive, return whichever significand is larger ','line_number':1089,'multiline':False]
['text':' (converse if negative)','line_number':1090,'multiline':False]
['text':' if equal, return 0','line_number':1096,'multiline':False]
['text':'else { //128 by 64 bit multiply -> 192 bits','line_number':1106,'multiline':False]
['text':' if postitive, return whichever significand is larger ','line_number':1109,'multiline':False]
['text':' (converse if negative)','line_number':1110,'multiline':False]
['text':' if equal, return 0','line_number':1115,'multiline':False]
['text':' if exp_x is 33 less than exp_y, no need for compensation','line_number':1128,'multiline':False]
['text':'128 by 128 bit multiply -> 256 bits','line_number':1134,'multiline':False]
['text':' adjust the y significand upwards','line_number':1135,'multiline':False]
['text':' if postitive, return whichever significand is larger ','line_number':1138,'multiline':False]
['text':' (converse if negative)','line_number':1139,'multiline':False]
['text':' if equal, return 1','line_number':1145,'multiline':False]
['text':'else { //128 by 64 bit multiply -> 192 bits','line_number':1156,'multiline':False]
['text':' adjust the y significand upwards','line_number':1157,'multiline':False]
['text':' if postitive, return whichever significand is larger ','line_number':1160,'multiline':False]
['text':' (converse if negative)','line_number':1161,'multiline':False]
['text':' if equal, return 0','line_number':1166,'multiline':False]
['text':' NaN (CASE1)','line_number':1188,'multiline':False]
['text':' if either number is NAN, the comparison is unordered, ','line_number':1189,'multiline':False]
['text':' rather than equal : return 0','line_number':1190,'multiline':False]
['text':' SIMPLE (CASE2)','line_number':1202,'multiline':False]
['text':' if all the bits are the same, these numbers are equal (not Greater).','line_number':1203,'multiline':False]
['text':' INFINITY (CASE3)','line_number':1208,'multiline':False]
['text':' if x is neg infinity, there is no way it is greater than y, return 1','line_number':1210,'multiline':False]
['text':' x is pos infinity, it is greater, unless y is positive infinity => ','line_number':1215,'multiline':False]
['text':' return y!=pos_infinity','line_number':1216,'multiline':False]
['text':' x is finite, so if y is positive infinity, then x is less, return 0','line_number':1223,'multiline':False]
['text':'                 if y is negative infinity, then x is greater, return 1','line_number':1224,'multiline':False]
['text':' CONVERT X','line_number':1230,'multiline':False]
['text':' CHECK IF X IS CANONICAL','line_number':1235,'multiline':False]
['text':' 9999999999999999999999999999999999(decimal) = ','line_number':1236,'multiline':False]
['text':'   1ed09_bead87c0_378d8e63_ffffffff(hexadecimal)','line_number':1237,'multiline':False]
['text':' [0, 10^34) is the 754 supported canonical range.  ','line_number':1238,'multiline':False]
['text':'    If the value exceeds that, it is interpreted as 0.','line_number':1239,'multiline':False]
['text':' CONVERT Y','line_number':1248,'multiline':False]
['text':' CHECK IF Y IS CANONICAL','line_number':1253,'multiline':False]
['text':' 9999999999999999999999999999999999(decimal) = ','line_number':1254,'multiline':False]
['text':'   1ed09_bead87c0_378d8e63_ffffffff(hexadecimal)','line_number':1255,'multiline':False]
['text':' [0, 10^34) is the 754 supported canonical range.  ','line_number':1256,'multiline':False]
['text':'    If the value exceeds that, it is interpreted as 0.','line_number':1257,'multiline':False]
['text':' ZERO (CASE4)','line_number':1266,'multiline':False]
['text':' some properties:','line_number':1267,'multiline':False]
['text':'    (+ZERO == -ZERO) => therefore ignore the sign','line_number':1268,'multiline':False]
['text':'    (ZERO x 10^A == ZERO x 10^B) for any valid A, B => therefore ','line_number':1269,'multiline':False]
['text':'    ignore the exponent field','line_number':1270,'multiline':False]
['text':'    (Any non-canonical # is considered 0)','line_number':1271,'multiline':False]
['text':' if both numbers are zero, neither is greater => return NOTGREATERTHAN','line_number':1278,'multiline':False]
['text':' is x is zero, it is greater if Y is negative','line_number':1283,'multiline':False]
['text':' is y is zero, X is greater if it is positive','line_number':1288,'multiline':False]
['text':' OPPOSITE SIGN (CASE5)','line_number':1293,'multiline':False]
['text':' now, if the sign bits differ, x is greater if y is negative','line_number':1294,'multiline':False]
['text':' REDUNDANT REPRESENTATIONS (CASE6)','line_number':1299,'multiline':False]
['text':' if exponents are the same, then we have a simple comparison of the ','line_number':1300,'multiline':False]
['text':' significands','line_number':1301,'multiline':False]
['text':' if both components are either bigger or smaller, ','line_number':1311,'multiline':False]
['text':' it is clear what needs to be done','line_number':1312,'multiline':False]
['text':' if |exp_x - exp_y| < 33, it comes down to the compensated significand','line_number':1328,'multiline':False]
['text':' to simplify the loop below,','line_number':1329,'multiline':False]
['text':' if exp_x is 33 greater than exp_y, no need for compensation','line_number':1331,'multiline':False]
['text':' difference cannot be greater than 10^33','line_number':1335,'multiline':False]
['text':'128 by 128 bit multiply -> 256 bits','line_number':1337,'multiline':False]
['text':' if postitive, return whichever significand is larger ','line_number':1341,'multiline':False]
['text':' (converse if negative)','line_number':1342,'multiline':False]
['text':' if equal, return 0','line_number':1348,'multiline':False]
['text':'else { //128 by 64 bit multiply -> 192 bits','line_number':1358,'multiline':False]
['text':' if postitive, return whichever significand is larger ','line_number':1361,'multiline':False]
['text':' (converse if negative)','line_number':1362,'multiline':False]
['text':' if equal, return 0','line_number':1367,'multiline':False]
['text':' if exp_x is 33 less than exp_y, no need for compensation','line_number':1380,'multiline':False]
['text':'128 by 128 bit multiply -> 256 bits','line_number':1386,'multiline':False]
['text':' adjust the y significand upwards','line_number':1387,'multiline':False]
['text':' if postitive, return whichever significand is larger ','line_number':1391,'multiline':False]
['text':' (converse if negative)','line_number':1392,'multiline':False]
['text':' if equal, return 0','line_number':1398,'multiline':False]
['text':'else { //128 by 64 bit multiply -> 192 bits','line_number':1409,'multiline':False]
['text':' adjust the y significand upwards','line_number':1410,'multiline':False]
['text':' if postitive, return whichever significand is larger ','line_number':1413,'multiline':False]
['text':' (converse if negative)','line_number':1414,'multiline':False]
['text':' if equal, return 0','line_number':1419,'multiline':False]
['text':' NaN (CASE1)','line_number':1442,'multiline':False]
['text':' if either number is NAN, the comparison is unordered','line_number':1443,'multiline':False]
['text':' SIMPLE (CASE2)','line_number':1455,'multiline':False]
['text':' if all the bits are the same, these numbers are equal.','line_number':1456,'multiline':False]
['text':' INFINITY (CASE3)','line_number':1461,'multiline':False]
['text':' if x==neg_inf, { res = (y == neg_inf)?1:0; BID_RETURN_VAL (res) }','line_number':1463,'multiline':False]
['text':' x is -inf, so it is less than y unless y is -inf','line_number':1465,'multiline':False]
['text':' x is pos_inf, no way for it to be less than y','line_number':1471,'multiline':False]
['text':' x is finite, so if y is positive infinity, then x is less, return 0','line_number':1477,'multiline':False]
['text':'                 if y is negative infinity, then x is greater, return 1','line_number':1478,'multiline':False]
['text':' CONVERT X','line_number':1484,'multiline':False]
['text':' CHECK IF X IS CANONICAL','line_number':1489,'multiline':False]
['text':' 9999999999999999999999999999999999(decimal) = ','line_number':1490,'multiline':False]
['text':'   1ed09_bead87c0_378d8e63_ffffffff(hexadecimal)','line_number':1491,'multiline':False]
['text':' [0, 10^34) is the 754 supported canonical range.  ','line_number':1492,'multiline':False]
['text':'    If the value exceeds that, it is interpreted as 0.','line_number':1493,'multiline':False]
['text':' CONVERT Y','line_number':1502,'multiline':False]
['text':' CHECK IF Y IS CANONICAL','line_number':1507,'multiline':False]
['text':' 9999999999999999999999999999999999(decimal) = ','line_number':1508,'multiline':False]
['text':'   1ed09_bead87c0_378d8e63_ffffffff(hexadecimal)','line_number':1509,'multiline':False]
['text':' [0, 10^34) is the 754 supported canonical range.  ','line_number':1510,'multiline':False]
['text':'    If the value exceeds that, it is interpreted as 0.','line_number':1511,'multiline':False]
['text':' ZERO (CASE4)','line_number':1520,'multiline':False]
['text':' some properties:','line_number':1521,'multiline':False]
['text':'    (+ZERO == -ZERO) => therefore ignore the sign','line_number':1522,'multiline':False]
['text':'    (ZERO x 10^A == ZERO x 10^B) for any valid A, B => therefore ','line_number':1523,'multiline':False]
['text':'    ignore the exponent field','line_number':1524,'multiline':False]
['text':'    (Any non-canonical # is considered 0)','line_number':1525,'multiline':False]
['text':' if both numbers are zero, neither is greater => return NOTGREATERTHAN','line_number':1532,'multiline':False]
['text':' is x is zero, it is greater if Y is negative','line_number':1537,'multiline':False]
['text':' is y is zero, X is greater if it is positive','line_number':1542,'multiline':False]
['text':' OPPOSITE SIGN (CASE5)','line_number':1547,'multiline':False]
['text':' now, if the sign bits differ, x is greater if y is negative','line_number':1548,'multiline':False]
['text':' REDUNDANT REPRESENTATIONS (CASE6)','line_number':1553,'multiline':False]
['text':' if exponents are the same, then we have a simple comparison ','line_number':1554,'multiline':False]
['text':' of the significands','line_number':1555,'multiline':False]
['text':' if both components are either bigger or smaller, ','line_number':1563,'multiline':False]
['text':' it is clear what needs to be done','line_number':1564,'multiline':False]
['text':' if |exp_x - exp_y| < 33, it comes down to the compensated significand','line_number':1580,'multiline':False]
['text':' to simplify the loop below,','line_number':1581,'multiline':False]
['text':' if exp_x is 33 greater than exp_y, no need for compensation','line_number':1583,'multiline':False]
['text':' difference cannot be greater than 10^33','line_number':1587,'multiline':False]
['text':'128 by 128 bit multiply -> 256 bits','line_number':1589,'multiline':False]
['text':' if postitive, return whichever significand is larger ','line_number':1593,'multiline':False]
['text':' (converse if negative)','line_number':1594,'multiline':False]
['text':' if equal, return 0','line_number':1600,'multiline':False]
['text':'else { //128 by 64 bit multiply -> 192 bits','line_number':1610,'multiline':False]
['text':' if postitive, return whichever significand is larger ','line_number':1613,'multiline':False]
['text':' (converse if negative)','line_number':1614,'multiline':False]
['text':' if equal, return 0','line_number':1619,'multiline':False]
['text':' if exp_x is 33 less than exp_y, no need for compensation','line_number':1632,'multiline':False]
['text':'128 by 128 bit multiply -> 256 bits','line_number':1638,'multiline':False]
['text':' adjust the y significand upwards','line_number':1639,'multiline':False]
['text':' if postitive, return whichever significand is larger ','line_number':1643,'multiline':False]
['text':' (converse if negative)','line_number':1644,'multiline':False]
['text':' if equal, return 1','line_number':1650,'multiline':False]
['text':'else { //128 by 64 bit multiply -> 192 bits','line_number':1661,'multiline':False]
['text':' adjust the y significand upwards','line_number':1662,'multiline':False]
['text':' if postitive, return whichever significand is larger ','line_number':1665,'multiline':False]
['text':' (converse if negative)','line_number':1666,'multiline':False]
['text':' if equal, return 0','line_number':1671,'multiline':False]
['text':' NaN (CASE1)','line_number':1692,'multiline':False]
['text':' if either number is NAN, the comparison is unordered, ','line_number':1693,'multiline':False]
['text':' rather than equal : return 0','line_number':1694,'multiline':False]
['text':' SIMPLE (CASE2)','line_number':1706,'multiline':False]
['text':' if all the bits are the same, these numbers are equivalent.','line_number':1707,'multiline':False]
['text':' INFINITY (CASE3)','line_number':1712,'multiline':False]
['text':' CONVERT X','line_number':1726,'multiline':False]
['text':' CHECK IF X IS CANONICAL','line_number':1731,'multiline':False]
['text':' 9999999999999999999999999999999999(decimal) = ','line_number':1732,'multiline':False]
['text':'   1ed09_bead87c0_378d8e63_ffffffff(hexadecimal)','line_number':1733,'multiline':False]
['text':' [0, 10^34) is the 754 supported canonical range.  ','line_number':1734,'multiline':False]
['text':'    If the value exceeds that, it is interpreted as 0.','line_number':1735,'multiline':False]
['text':' CONVERT Y','line_number':1744,'multiline':False]
['text':' CHECK IF Y IS CANONICAL','line_number':1749,'multiline':False]
['text':' 9999999999999999999999999999999999(decimal) = ','line_number':1750,'multiline':False]
['text':'   1ed09_bead87c0_378d8e63_ffffffff(hexadecimal)','line_number':1751,'multiline':False]
['text':' [0, 10^34) is the 754 supported canonical range.  ','line_number':1752,'multiline':False]
['text':'    If the value exceeds that, it is interpreted as 0.','line_number':1753,'multiline':False]
['text':' some properties:','line_number':1762,'multiline':False]
['text':'    (+ZERO == -ZERO) => therefore ignore the sign','line_number':1763,'multiline':False]
['text':'    (ZERO x 10^A == ZERO x 10^B) for any valid A, B => therefore ','line_number':1764,'multiline':False]
['text':'    ignore the exponent field','line_number':1765,'multiline':False]
['text':'    (Any non-canonical # is considered 0)','line_number':1766,'multiline':False]
['text':' OPPOSITE SIGN (CASE5)','line_number':1781,'multiline':False]
['text':' now, if the sign bits differ => not equal : return 0','line_number':1782,'multiline':False]
['text':' REDUNDANT REPRESENTATIONS (CASE6)','line_number':1787,'multiline':False]
['text':' to simplify the loop below,','line_number':1788,'multiline':False]
['text':' put the larger exp in y,','line_number':1789,'multiline':False]
['text':' and the smaller exp in x','line_number':1790,'multiline':False]
['text':' and the smaller exp in x','line_number':1791,'multiline':False]
['text':' difference cannot be greater than 10^33','line_number':1798,'multiline':False]
['text':' recalculate y's significand upwards','line_number':1801,'multiline':False]
['text':'else{','line_number':1812,'multiline':False]
['text':' recalculate y's significand upwards','line_number':1813,'multiline':False]
['text':' NaN (CASE1)','line_number':1834,'multiline':False]
['text':' if either number is NAN, the comparison is unordered, ','line_number':1835,'multiline':False]
['text':' rather than equal : return 0','line_number':1836,'multiline':False]
['text':' SIMPLE (CASE2)','line_number':1848,'multiline':False]
['text':' if all the bits are the same, these numbers are equal (not Greater).','line_number':1849,'multiline':False]
['text':' INFINITY (CASE3)','line_number':1854,'multiline':False]
['text':' if x is neg infinity, there is no way it is greater than y, return 1','line_number':1856,'multiline':False]
['text':' x is pos infinity, it is greater, unless y is positive infinity => return y!=pos_infinity','line_number':1861,'multiline':False]
['text':' x is finite, so if y is positive infinity, then x is less, return 0','line_number':1868,'multiline':False]
['text':'                 if y is negative infinity, then x is greater, return 1','line_number':1869,'multiline':False]
['text':' CONVERT X','line_number':1875,'multiline':False]
['text':' CHECK IF X IS CANONICAL','line_number':1880,'multiline':False]
['text':' 9999999999999999999999999999999999(decimal) = ','line_number':1881,'multiline':False]
['text':'   1ed09_bead87c0_378d8e63_ffffffff(hexadecimal)','line_number':1882,'multiline':False]
['text':' [0, 10^34) is the 754 supported canonical range.  ','line_number':1883,'multiline':False]
['text':'    If the value exceeds that, it is interpreted as 0.','line_number':1884,'multiline':False]
['text':' CONVERT Y','line_number':1893,'multiline':False]
['text':' CHECK IF Y IS CANONICAL','line_number':1898,'multiline':False]
['text':' 9999999999999999999999999999999999(decimal) = ','line_number':1899,'multiline':False]
['text':'   1ed09_bead87c0_378d8e63_ffffffff(hexadecimal)','line_number':1900,'multiline':False]
['text':' [0, 10^34) is the 754 supported canonical range.  ','line_number':1901,'multiline':False]
['text':'    If the value exceeds that, it is interpreted as 0.','line_number':1902,'multiline':False]
['text':' ZERO (CASE4)','line_number':1911,'multiline':False]
['text':' some properties:','line_number':1912,'multiline':False]
['text':'    (+ZERO == -ZERO) => therefore ignore the sign','line_number':1913,'multiline':False]
['text':'    (ZERO x 10^A == ZERO x 10^B) for any valid A, B => therefore ','line_number':1914,'multiline':False]
['text':'    ignore the exponent field','line_number':1915,'multiline':False]
['text':'    (Any non-canonical # is considered 0)','line_number':1916,'multiline':False]
['text':' if both numbers are zero, neither is greater => return NOTGREATERTHAN','line_number':1923,'multiline':False]
['text':' is x is zero, it is greater if Y is negative','line_number':1928,'multiline':False]
['text':' is y is zero, X is greater if it is positive','line_number':1933,'multiline':False]
['text':' OPPOSITE SIGN (CASE5)','line_number':1938,'multiline':False]
['text':' now, if the sign bits differ, x is greater if y is negative','line_number':1939,'multiline':False]
['text':' REDUNDANT REPRESENTATIONS (CASE6)','line_number':1944,'multiline':False]
['text':' if exponents are the same, then we have a simple comparison ','line_number':1945,'multiline':False]
['text':' of the significands','line_number':1946,'multiline':False]
['text':' if both components are either bigger or smaller, ','line_number':1954,'multiline':False]
['text':' it is clear what needs to be done','line_number':1955,'multiline':False]
['text':' if |exp_x - exp_y| < 33, it comes down to the compensated significand','line_number':1971,'multiline':False]
['text':' to simplify the loop below,','line_number':1972,'multiline':False]
['text':' if exp_x is 33 greater than exp_y, no need for compensation','line_number':1974,'multiline':False]
['text':' difference cannot be greater than 10^33','line_number':1978,'multiline':False]
['text':'128 by 128 bit multiply -> 256 bits','line_number':1980,'multiline':False]
['text':' if postitive, return whichever significand is larger ','line_number':1984,'multiline':False]
['text':' (converse if negative)','line_number':1985,'multiline':False]
['text':' if equal, return 0','line_number':1991,'multiline':False]
['text':'else { //128 by 64 bit multiply -> 192 bits','line_number':2001,'multiline':False]
['text':' if postitive, return whichever significand is larger ','line_number':2004,'multiline':False]
['text':' (converse if negative)','line_number':2005,'multiline':False]
['text':' if equal, return 0','line_number':2010,'multiline':False]
['text':' if exp_x is 33 less than exp_y, no need for compensation','line_number':2023,'multiline':False]
['text':'128 by 128 bit multiply -> 256 bits','line_number':2029,'multiline':False]
['text':' adjust the y significand upwards','line_number':2030,'multiline':False]
['text':' if postitive, return whichever significand is larger ','line_number':2034,'multiline':False]
['text':' (converse if negative)','line_number':2035,'multiline':False]
['text':' if equal, return 0','line_number':2041,'multiline':False]
['text':'else { //128 by 64 bit multiply -> 192 bits','line_number':2052,'multiline':False]
['text':' adjust the y significand upwards','line_number':2053,'multiline':False]
['text':' if postitive, return whichever significand is larger ','line_number':2056,'multiline':False]
['text':' (converse if negative)','line_number':2057,'multiline':False]
['text':' if equal, return 0','line_number':2062,'multiline':False]
['text':' NaN (CASE1)','line_number':2084,'multiline':False]
['text':' if either number is NAN, the comparison is unordered, ','line_number':2085,'multiline':False]
['text':' rather than equal : return 1','line_number':2086,'multiline':False]
['text':' SIMPLE (CASE2)','line_number':2098,'multiline':False]
['text':' if all the bits are the same, these numbers are equal (not Greater).','line_number':2099,'multiline':False]
['text':' INFINITY (CASE3)','line_number':2104,'multiline':False]
['text':' if x==neg_inf, { res = (y == neg_inf)?1:0; BID_RETURN_VAL (res) }','line_number':2106,'multiline':False]
['text':' x is -inf, so it is less than y unless y is -inf','line_number':2108,'multiline':False]
['text':' x is pos_inf, no way for it to be less than y','line_number':2114,'multiline':False]
['text':' x is finite, so if y is positive infinity, then x is less, return 0','line_number':2120,'multiline':False]
['text':'                 if y is negative infinity, then x is greater, return 1','line_number':2121,'multiline':False]
['text':' CONVERT X','line_number':2127,'multiline':False]
['text':' CHECK IF X IS CANONICAL','line_number':2132,'multiline':False]
['text':' 9999999999999999999999999999999999(decimal) = ','line_number':2133,'multiline':False]
['text':'   1ed09_bead87c0_378d8e63_ffffffff(hexadecimal)','line_number':2134,'multiline':False]
['text':' [0, 10^34) is the 754 supported canonical range.  ','line_number':2135,'multiline':False]
['text':'     If the value exceeds that, it is interpreted as 0.','line_number':2136,'multiline':False]
['text':' CONVERT Y','line_number':2145,'multiline':False]
['text':' CHECK IF Y IS CANONICAL','line_number':2150,'multiline':False]
['text':' 9999999999999999999999999999999999(decimal) = ','line_number':2151,'multiline':False]
['text':'   1ed09_bead87c0_378d8e63_ffffffff(hexadecimal)','line_number':2152,'multiline':False]
['text':' [0, 10^34) is the 754 supported canonical range.  ','line_number':2153,'multiline':False]
['text':'     If the value exceeds that, it is interpreted as 0.','line_number':2154,'multiline':False]
['text':' ZERO (CASE4)','line_number':2163,'multiline':False]
['text':' some properties:','line_number':2164,'multiline':False]
['text':'    (+ZERO == -ZERO) => therefore ignore the sign','line_number':2165,'multiline':False]
['text':'    (ZERO x 10^A == ZERO x 10^B) for any valid A, B => therefore ','line_number':2166,'multiline':False]
['text':'    ignore the exponent field','line_number':2167,'multiline':False]
['text':'    (Any non-canonical # is considered 0)','line_number':2168,'multiline':False]
['text':' if both numbers are zero, neither is greater => return NOTGREATERTHAN','line_number':2175,'multiline':False]
['text':' is x is zero, it is greater if Y is negative','line_number':2180,'multiline':False]
['text':' is y is zero, X is greater if it is positive','line_number':2185,'multiline':False]
['text':' OPPOSITE SIGN (CASE5)','line_number':2190,'multiline':False]
['text':' now, if the sign bits differ, x is greater if y is negative','line_number':2191,'multiline':False]
['text':' REDUNDANT REPRESENTATIONS (CASE6)','line_number':2196,'multiline':False]
['text':' if exponents are the same, then we have a simple comparison ','line_number':2198,'multiline':False]
['text':' of the significands','line_number':2199,'multiline':False]
['text':' if both components are either bigger or smaller, ','line_number':2207,'multiline':False]
['text':' it is clear what needs to be done','line_number':2208,'multiline':False]
['text':' if |exp_x - exp_y| < 33, it comes down to the compensated significand','line_number':2222,'multiline':False]
['text':' to simplify the loop below,','line_number':2223,'multiline':False]
['text':' if exp_x is 33 greater than exp_y, no need for compensation','line_number':2225,'multiline':False]
['text':' difference cannot be greater than 10^33','line_number':2229,'multiline':False]
['text':'128 by 128 bit multiply -> 256 bits','line_number':2231,'multiline':False]
['text':' if postitive, return whichever significand is larger ','line_number':2235,'multiline':False]
['text':' (converse if negative)','line_number':2236,'multiline':False]
['text':' if equal, return 1','line_number':2242,'multiline':False]
['text':'else { //128 by 64 bit multiply -> 192 bits','line_number':2252,'multiline':False]
['text':' if postitive, return whichever significand is larger ','line_number':2255,'multiline':False]
['text':' (converse if negative)','line_number':2256,'multiline':False]
['text':' if equal, return 1','line_number':2261,'multiline':False]
['text':' if exp_x is 33 less than exp_y, no need for compensation','line_number':2274,'multiline':False]
['text':'128 by 128 bit multiply -> 256 bits','line_number':2280,'multiline':False]
['text':' adjust the y significand upwards','line_number':2281,'multiline':False]
['text':' if postitive, return whichever significand is larger ','line_number':2285,'multiline':False]
['text':' (converse if negative)','line_number':2286,'multiline':False]
['text':' if equal, return 1','line_number':2292,'multiline':False]
['text':'else { //128 by 64 bit multiply -> 192 bits','line_number':2303,'multiline':False]
['text':' adjust the y significand upwards','line_number':2304,'multiline':False]
['text':' if postitive, return whichever significand is larger ','line_number':2307,'multiline':False]
['text':' (converse if negative)','line_number':2308,'multiline':False]
['text':' if equal, return 1','line_number':2313,'multiline':False]
['text':' NaN (CASE1)','line_number':2329,'multiline':False]
['text':' if either number is NAN, the comparison is ordered : return 1','line_number':2330,'multiline':False]
['text':' NaN (CASE1)','line_number':2353,'multiline':False]
['text':' if either number is NAN, the comparison is unordered : return 1','line_number':2354,'multiline':False]
['text':' NaN (CASE1)','line_number':2383,'multiline':False]
['text':' if either number is NAN, the comparison is unordered, ','line_number':2384,'multiline':False]
['text':' rather than equal : return 0','line_number':2385,'multiline':False]
['text':' SIMPLE (CASE2)','line_number':2394,'multiline':False]
['text':' if all the bits are the same, these numbers are equal (not Greater).','line_number':2395,'multiline':False]
['text':' INFINITY (CASE3)','line_number':2400,'multiline':False]
['text':' if x is neg infinity, there is no way it is greater than y, return 0','line_number':2402,'multiline':False]
['text':' x is pos infinity, it is greater, unless y is positive infinity => return y!=pos_infinity','line_number':2407,'multiline':False]
['text':' x is finite, so if y is positive infinity, then x is less, return 0','line_number':2414,'multiline':False]
['text':'                 if y is negative infinity, then x is greater, return 1','line_number':2415,'multiline':False]
['text':' CONVERT X','line_number':2421,'multiline':False]
['text':' CHECK IF X IS CANONICAL','line_number':2426,'multiline':False]
['text':' 9999999999999999999999999999999999(decimal) = ','line_number':2427,'multiline':False]
['text':'   1ed09_bead87c0_378d8e63_ffffffff(hexadecimal)','line_number':2428,'multiline':False]
['text':' [0, 10^34) is the 754 supported canonical range.  ','line_number':2429,'multiline':False]
['text':'     If the value exceeds that, it is interpreted as 0.','line_number':2430,'multiline':False]
['text':' CONVERT Y','line_number':2439,'multiline':False]
['text':' CHECK IF Y IS CANONICAL','line_number':2444,'multiline':False]
['text':' 9999999999999999999999999999999999(decimal) = ','line_number':2445,'multiline':False]
['text':'   1ed09_bead87c0_378d8e63_ffffffff(hexadecimal)','line_number':2446,'multiline':False]
['text':' [0, 10^34) is the 754 supported canonical range.  ','line_number':2447,'multiline':False]
['text':'     If the value exceeds that, it is interpreted as 0.','line_number':2448,'multiline':False]
['text':' ZERO (CASE4)','line_number':2457,'multiline':False]
['text':' some properties:','line_number':2458,'multiline':False]
['text':'    (+ZERO == -ZERO) => therefore ignore the sign','line_number':2459,'multiline':False]
['text':'    (ZERO x 10^A == ZERO x 10^B) for any valid A, B => therefore ','line_number':2460,'multiline':False]
['text':'    ignore the exponent field','line_number':2461,'multiline':False]
['text':'    (Any non-canonical # is considered 0)','line_number':2462,'multiline':False]
['text':' if both numbers are zero, neither is greater => return NOTGREATERTHAN','line_number':2469,'multiline':False]
['text':' is x is zero, it is greater if Y is negative','line_number':2474,'multiline':False]
['text':' is y is zero, X is greater if it is positive','line_number':2479,'multiline':False]
['text':' OPPOSITE SIGN (CASE5)','line_number':2484,'multiline':False]
['text':' now, if the sign bits differ, x is greater if y is negative','line_number':2485,'multiline':False]
['text':' REDUNDANT REPRESENTATIONS (CASE6)','line_number':2490,'multiline':False]
['text':' if exponents are the same, then we have a simple comparison ','line_number':2491,'multiline':False]
['text':' of the significands','line_number':2492,'multiline':False]
['text':' if both components are either bigger or smaller, ','line_number':2500,'multiline':False]
['text':' it is clear what needs to be done','line_number':2501,'multiline':False]
['text':' if |exp_x - exp_y| < 33, it comes down to the compensated significand','line_number':2521,'multiline':False]
['text':' to simplify the loop below,','line_number':2522,'multiline':False]
['text':' if exp_x is 33 greater than exp_y, no need for compensation','line_number':2524,'multiline':False]
['text':' difference cannot be greater than 10^33','line_number':2528,'multiline':False]
['text':'128 by 128 bit multiply -> 256 bits','line_number':2530,'multiline':False]
['text':' if postitive, return whichever significand is larger ','line_number':2533,'multiline':False]
['text':' (converse if negative)','line_number':2534,'multiline':False]
['text':' if equal, return 0','line_number':2540,'multiline':False]
['text':'else { //128 by 64 bit multiply -> 192 bits','line_number':2550,'multiline':False]
['text':' if postitive, return whichever significand is larger ','line_number':2553,'multiline':False]
['text':' (converse if negative)','line_number':2554,'multiline':False]
['text':' if equal, return 0','line_number':2559,'multiline':False]
['text':' if exp_x is 33 less than exp_y, no need for compensation','line_number':2572,'multiline':False]
['text':'128 by 128 bit multiply -> 256 bits','line_number':2578,'multiline':False]
['text':' adjust the y significand upwards','line_number':2579,'multiline':False]
['text':' if postitive, return whichever significand is larger ','line_number':2582,'multiline':False]
['text':' (converse if negative)','line_number':2583,'multiline':False]
['text':' if equal, return 0','line_number':2589,'multiline':False]
['text':'else { //128 by 64 bit multiply -> 192 bits','line_number':2600,'multiline':False]
['text':' adjust the y significand upwards','line_number':2601,'multiline':False]
['text':' if postitive, return whichever significand is larger ','line_number':2604,'multiline':False]
['text':' (converse if negative)','line_number':2605,'multiline':False]
['text':' if equal, return 0','line_number':2610,'multiline':False]
['text':' NaN (CASE1)','line_number':2633,'multiline':False]
['text':' if either number is NAN, the comparison is unordered, ','line_number':2634,'multiline':False]
['text':' rather than equal : return 1','line_number':2635,'multiline':False]
['text':' SIMPLE (CASE2)','line_number':2644,'multiline':False]
['text':' if all the bits are the same, these numbers are equal (not Greater).','line_number':2645,'multiline':False]
['text':' INFINITY (CASE3)','line_number':2650,'multiline':False]
['text':' if x==neg_inf, { res = (y == neg_inf)?1:0; BID_RETURN_VAL (res) }','line_number':2652,'multiline':False]
['text':' x is -inf, so it is less than y unless y is -inf','line_number':2654,'multiline':False]
['text':' x is pos_inf, no way for it to be less than y','line_number':2660,'multiline':False]
['text':' x is finite, so if y is positive infinity, then x is less, return 0','line_number':2666,'multiline':False]
['text':'                 if y is negative infinity, then x is greater, return 1','line_number':2667,'multiline':False]
['text':' CONVERT X','line_number':2673,'multiline':False]
['text':' CHECK IF X IS CANONICAL','line_number':2678,'multiline':False]
['text':' 9999999999999999999999999999999999(decimal) = ','line_number':2679,'multiline':False]
['text':'   1ed09_bead87c0_378d8e63_ffffffff(hexadecimal)','line_number':2680,'multiline':False]
['text':' [0, 10^34) is the 754 supported canonical range.  ','line_number':2681,'multiline':False]
['text':'     If the value exceeds that, it is interpreted as 0.','line_number':2682,'multiline':False]
['text':' CONVERT Y','line_number':2691,'multiline':False]
['text':' CHECK IF Y IS CANONICAL','line_number':2696,'multiline':False]
['text':' 9999999999999999999999999999999999(decimal) = ','line_number':2697,'multiline':False]
['text':'   1ed09_bead87c0_378d8e63_ffffffff(hexadecimal)','line_number':2698,'multiline':False]
['text':' [0, 10^34) is the 754 supported canonical range.  ','line_number':2699,'multiline':False]
['text':'     If the value exceeds that, it is interpreted as 0.','line_number':2700,'multiline':False]
['text':' ZERO (CASE4)','line_number':2709,'multiline':False]
['text':' some properties:','line_number':2710,'multiline':False]
['text':'    (+ZERO == -ZERO) => therefore ignore the sign','line_number':2711,'multiline':False]
['text':'    (ZERO x 10^A == ZERO x 10^B) for any valid A, B => therefore ','line_number':2712,'multiline':False]
['text':'    ignore the exponent field','line_number':2713,'multiline':False]
['text':'    (Any non-canonical # is considered 0)','line_number':2714,'multiline':False]
['text':' if both numbers are zero, neither is greater => return NOTGREATERTHAN','line_number':2721,'multiline':False]
['text':' is x is zero, it is greater if Y is negative','line_number':2726,'multiline':False]
['text':' is y is zero, X is greater if it is positive','line_number':2731,'multiline':False]
['text':' OPPOSITE SIGN (CASE5)','line_number':2736,'multiline':False]
['text':' now, if the sign bits differ, x is greater if y is negative','line_number':2737,'multiline':False]
['text':' REDUNDANT REPRESENTATIONS (CASE6)','line_number':2742,'multiline':False]
['text':' if exponents are the same, then we have a simple comparison ','line_number':2743,'multiline':False]
['text':' of the significands','line_number':2744,'multiline':False]
['text':' if both components are either bigger or smaller, ','line_number':2752,'multiline':False]
['text':' it is clear what needs to be done','line_number':2753,'multiline':False]
['text':' if |exp_x - exp_y| < 33, it comes down to the compensated significand','line_number':2767,'multiline':False]
['text':' to simplify the loop below,','line_number':2768,'multiline':False]
['text':' if exp_x is 33 greater than exp_y, no need for compensation','line_number':2770,'multiline':False]
['text':' difference cannot be greater than 10^33','line_number':2774,'multiline':False]
['text':'128 by 128 bit multiply -> 256 bits','line_number':2776,'multiline':False]
['text':' if postitive, return whichever significand is larger ','line_number':2780,'multiline':False]
['text':' (converse if negative)','line_number':2781,'multiline':False]
['text':' if equal, return 1','line_number':2787,'multiline':False]
['text':'else { //128 by 64 bit multiply -> 192 bits','line_number':2797,'multiline':False]
['text':' if postitive, return whichever significand is larger ','line_number':2800,'multiline':False]
['text':' (converse if negative)','line_number':2801,'multiline':False]
['text':' if equal, return 1','line_number':2806,'multiline':False]
['text':' if exp_x is 33 less than exp_y, no need for compensation','line_number':2819,'multiline':False]
['text':'128 by 128 bit multiply -> 256 bits','line_number':2825,'multiline':False]
['text':' adjust the y significand upwards','line_number':2826,'multiline':False]
['text':' if postitive, return whichever significand is larger ','line_number':2830,'multiline':False]
['text':' (converse if negative)','line_number':2831,'multiline':False]
['text':' if equal, return 1','line_number':2837,'multiline':False]
['text':'else { //128 by 64 bit multiply -> 192 bits','line_number':2848,'multiline':False]
['text':' adjust the y significand upwards','line_number':2849,'multiline':False]
['text':' if postitive, return whichever significand is larger ','line_number':2852,'multiline':False]
['text':' (converse if negative)','line_number':2853,'multiline':False]
['text':' if equal, return 1','line_number':2858,'multiline':False]
['text':' NaN (CASE1)','line_number':2881,'multiline':False]
['text':' if either number is NAN, the comparison is unordered, ','line_number':2882,'multiline':False]
['text':' rather than equal : return 1','line_number':2883,'multiline':False]
['text':' SIMPLE (CASE2)','line_number':2892,'multiline':False]
['text':' if all the bits are the same, these numbers are equal (not Greater).','line_number':2893,'multiline':False]
['text':' INFINITY (CASE3)','line_number':2898,'multiline':False]
['text':' if x is neg infinity, there is no way it is greater than y, return 0','line_number':2900,'multiline':False]
['text':' x is pos infinity, it is greater, unless y is positive infinity => return y!=pos_infinity','line_number':2905,'multiline':False]
['text':' x is finite, so if y is positive infinity, then x is less, return 0','line_number':2912,'multiline':False]
['text':'                 if y is negative infinity, then x is greater, return 1','line_number':2913,'multiline':False]
['text':' CONVERT X','line_number':2919,'multiline':False]
['text':' CHECK IF X IS CANONICAL','line_number':2924,'multiline':False]
['text':' 9999999999999999999999999999999999(decimal) = ','line_number':2925,'multiline':False]
['text':'   1ed09_bead87c0_378d8e63_ffffffff(hexadecimal)','line_number':2926,'multiline':False]
['text':' [0, 10^34) is the 754 supported canonical range.  ','line_number':2927,'multiline':False]
['text':'     If the value exceeds that, it is interpreted as 0.','line_number':2928,'multiline':False]
['text':' CONVERT Y','line_number':2937,'multiline':False]
['text':' CHECK IF Y IS CANONICAL','line_number':2942,'multiline':False]
['text':' 9999999999999999999999999999999999(decimal) = ','line_number':2943,'multiline':False]
['text':'   1ed09_bead87c0_378d8e63_ffffffff(hexadecimal)','line_number':2944,'multiline':False]
['text':' [0, 10^34) is the 754 supported canonical range.  ','line_number':2945,'multiline':False]
['text':'     If the value exceeds that, it is interpreted as 0.','line_number':2946,'multiline':False]
['text':' ZERO (CASE4)','line_number':2955,'multiline':False]
['text':' some properties:','line_number':2956,'multiline':False]
['text':'    (+ZERO == -ZERO) => therefore ignore the sign','line_number':2957,'multiline':False]
['text':'    (ZERO x 10^A == ZERO x 10^B) for any valid A, B => therefore ','line_number':2958,'multiline':False]
['text':'    ignore the exponent field','line_number':2959,'multiline':False]
['text':'    (Any non-canonical # is considered 0)','line_number':2960,'multiline':False]
['text':' if both numbers are zero, neither is greater => return NOTGREATERTHAN','line_number':2967,'multiline':False]
['text':' is x is zero, it is greater if Y is negative','line_number':2972,'multiline':False]
['text':' is y is zero, X is greater if it is positive','line_number':2977,'multiline':False]
['text':' OPPOSITE SIGN (CASE5)','line_number':2982,'multiline':False]
['text':' now, if the sign bits differ, x is greater if y is negative','line_number':2983,'multiline':False]
['text':' REDUNDANT REPRESENTATIONS (CASE6)','line_number':2988,'multiline':False]
['text':' if exponents are the same, then we have a simple comparison ','line_number':2989,'multiline':False]
['text':' of the significands','line_number':2990,'multiline':False]
['text':' if both components are either bigger or smaller, ','line_number':2998,'multiline':False]
['text':' it is clear what needs to be done','line_number':2999,'multiline':False]
['text':' if |exp_x - exp_y| < 33, it comes down to the compensated significand','line_number':3013,'multiline':False]
['text':' to simplify the loop below,','line_number':3014,'multiline':False]
['text':' if exp_x is 33 greater than exp_y, no need for compensation','line_number':3016,'multiline':False]
['text':' difference cannot be greater than 10^33','line_number':3020,'multiline':False]
['text':'128 by 128 bit multiply -> 256 bits','line_number':3022,'multiline':False]
['text':' if postitive, return whichever significand is larger ','line_number':3026,'multiline':False]
['text':' (converse if negative)','line_number':3027,'multiline':False]
['text':' if equal, return 0','line_number':3033,'multiline':False]
['text':'else { //128 by 64 bit multiply -> 192 bits','line_number':3043,'multiline':False]
['text':' if postitive, return whichever significand is larger ','line_number':3046,'multiline':False]
['text':' (converse if negative)','line_number':3047,'multiline':False]
['text':' if equal, return 0','line_number':3052,'multiline':False]
['text':' if exp_x is 33 less than exp_y, no need for compensation','line_number':3065,'multiline':False]
['text':'128 by 128 bit multiply -> 256 bits','line_number':3071,'multiline':False]
['text':' adjust the y significand upwards','line_number':3072,'multiline':False]
['text':' if postitive, return whichever significand is larger ','line_number':3076,'multiline':False]
['text':' (converse if negative)','line_number':3077,'multiline':False]
['text':' if equal, return 0','line_number':3083,'multiline':False]
['text':'else { //128 by 64 bit multiply -> 192 bits','line_number':3094,'multiline':False]
['text':' adjust the y significand upwards','line_number':3095,'multiline':False]
['text':' if postitive, return whichever significand is larger ','line_number':3098,'multiline':False]
['text':' (converse if negative)','line_number':3099,'multiline':False]
['text':' if equal, return 0','line_number':3104,'multiline':False]
['text':' NaN (CASE1)','line_number':3126,'multiline':False]
['text':' if either number is NAN, the comparison is unordered, ','line_number':3127,'multiline':False]
['text':' rather than equal : return 0','line_number':3128,'multiline':False]
['text':' SIMPLE (CASE2)','line_number':3137,'multiline':False]
['text':' if all the bits are the same, these numbers are equal.','line_number':3138,'multiline':False]
['text':' INFINITY (CASE3)','line_number':3143,'multiline':False]
['text':' if x==neg_inf, { res = (y == neg_inf)?1:0; BID_RETURN_VAL (res) }','line_number':3145,'multiline':False]
['text':' x is -inf, so it is less than y unless y is -inf','line_number':3147,'multiline':False]
['text':' x is pos_inf, no way for it to be less than y','line_number':3153,'multiline':False]
['text':' x is finite, so if y is positive infinity, then x is less, return 0','line_number':3159,'multiline':False]
['text':'                 if y is negative infinity, then x is greater, return 1','line_number':3160,'multiline':False]
['text':' CONVERT X','line_number':3166,'multiline':False]
['text':' CHECK IF X IS CANONICAL','line_number':3171,'multiline':False]
['text':' 9999999999999999999999999999999999(decimal) = ','line_number':3172,'multiline':False]
['text':'   1ed09_bead87c0_378d8e63_ffffffff(hexadecimal)','line_number':3173,'multiline':False]
['text':' [0, 10^34) is the 754 supported canonical range.  ','line_number':3174,'multiline':False]
['text':'     If the value exceeds that, it is interpreted as 0.','line_number':3175,'multiline':False]
['text':' CONVERT Y','line_number':3184,'multiline':False]
['text':' CHECK IF Y IS CANONICAL','line_number':3189,'multiline':False]
['text':' 9999999999999999999999999999999999(decimal) = ','line_number':3190,'multiline':False]
['text':'   1ed09_bead87c0_378d8e63_ffffffff(hexadecimal)','line_number':3191,'multiline':False]
['text':' [0, 10^34) is the 754 supported canonical range.  ','line_number':3192,'multiline':False]
['text':'     If the value exceeds that, it is interpreted as 0.','line_number':3193,'multiline':False]
['text':' ZERO (CASE4)','line_number':3202,'multiline':False]
['text':' some properties:','line_number':3203,'multiline':False]
['text':'    (+ZERO == -ZERO) => therefore ignore the sign','line_number':3204,'multiline':False]
['text':'    (ZERO x 10^A == ZERO x 10^B) for any valid A, B => therefore ','line_number':3205,'multiline':False]
['text':'    ignore the exponent field','line_number':3206,'multiline':False]
['text':'    (Any non-canonical # is considered 0)','line_number':3207,'multiline':False]
['text':' if both numbers are zero, neither is greater => return NOTGREATERTHAN','line_number':3214,'multiline':False]
['text':' is x is zero, it is greater if Y is negative','line_number':3219,'multiline':False]
['text':' is y is zero, X is greater if it is positive','line_number':3224,'multiline':False]
['text':' OPPOSITE SIGN (CASE5)','line_number':3229,'multiline':False]
['text':' now, if the sign bits differ, x is greater if y is negative','line_number':3230,'multiline':False]
['text':' REDUNDANT REPRESENTATIONS (CASE6)','line_number':3235,'multiline':False]
['text':' if exponents are the same, then we have a simple comparison ','line_number':3236,'multiline':False]
['text':' of the significands','line_number':3237,'multiline':False]
['text':' if both components are either bigger or smaller, ','line_number':3245,'multiline':False]
['text':' it is clear what needs to be done','line_number':3246,'multiline':False]
['text':' if |exp_x - exp_y| < 33, it comes down to the compensated significand','line_number':3262,'multiline':False]
['text':' to simplify the loop below,','line_number':3263,'multiline':False]
['text':' if exp_x is 33 greater than exp_y, no need for compensation','line_number':3265,'multiline':False]
['text':' difference cannot be greater than 10^33','line_number':3269,'multiline':False]
['text':'128 by 128 bit multiply -> 256 bits','line_number':3271,'multiline':False]
['text':' if postitive, return whichever significand is larger ','line_number':3275,'multiline':False]
['text':' (converse if negative)','line_number':3276,'multiline':False]
['text':' if equal, return 0','line_number':3282,'multiline':False]
['text':'else { //128 by 64 bit multiply -> 192 bits','line_number':3292,'multiline':False]
['text':' if postitive, return whichever significand is larger ','line_number':3295,'multiline':False]
['text':' (converse if negative)','line_number':3296,'multiline':False]
['text':' if equal, return 0','line_number':3301,'multiline':False]
['text':' if exp_x is 33 less than exp_y, |x| < |y|, return 1 if positive','line_number':3314,'multiline':False]
['text':'128 by 128 bit multiply -> 256 bits','line_number':3320,'multiline':False]
['text':' adjust the y significand upwards','line_number':3321,'multiline':False]
['text':' if postitive, return whichever significand is larger ','line_number':3325,'multiline':False]
['text':' (converse if negative)','line_number':3326,'multiline':False]
['text':' if equal, return 1','line_number':3332,'multiline':False]
['text':'else { //128 by 64 bit multiply -> 192 bits','line_number':3343,'multiline':False]
['text':' adjust the y significand upwards','line_number':3344,'multiline':False]
['text':' if postitive, return whichever significand is larger ','line_number':3347,'multiline':False]
['text':' (converse if negative)','line_number':3348,'multiline':False]
['text':' if equal, return 0','line_number':3353,'multiline':False]
['text':' NaN (CASE1)','line_number':3376,'multiline':False]
['text':' if either number is NAN, the comparison is unordered, ','line_number':3377,'multiline':False]
['text':' rather than equal : return 0','line_number':3378,'multiline':False]
['text':' SIMPLE (CASE2)','line_number':3387,'multiline':False]
['text':' if all the bits are the same, these numbers are equal (not Greater).','line_number':3388,'multiline':False]
['text':' INFINITY (CASE3)','line_number':3393,'multiline':False]
['text':' if x is neg infinity, there is no way it is greater than y, return 1','line_number':3395,'multiline':False]
['text':' x is pos infinity, it is greater, unless y is positive infinity => return y!=pos_infinity','line_number':3400,'multiline':False]
['text':' x is finite, so if y is positive infinity, then x is less, return 0','line_number':3407,'multiline':False]
['text':'                 if y is negative infinity, then x is greater, return 1','line_number':3408,'multiline':False]
['text':' CONVERT X','line_number':3414,'multiline':False]
['text':' CHECK IF X IS CANONICAL','line_number':3419,'multiline':False]
['text':' 9999999999999999999999999999999999(decimal) = ','line_number':3420,'multiline':False]
['text':'   1ed09_bead87c0_378d8e63_ffffffff(hexadecimal)','line_number':3421,'multiline':False]
['text':' [0, 10^34) is the 754 supported canonical range.  ','line_number':3422,'multiline':False]
['text':'     If the value exceeds that, it is interpreted as 0.','line_number':3423,'multiline':False]
['text':' CONVERT Y','line_number':3432,'multiline':False]
['text':' CHECK IF Y IS CANONICAL','line_number':3437,'multiline':False]
['text':' 9999999999999999999999999999999999(decimal) = ','line_number':3438,'multiline':False]
['text':'   1ed09_bead87c0_378d8e63_ffffffff(hexadecimal)','line_number':3439,'multiline':False]
['text':' [0, 10^34) is the 754 supported canonical range.  ','line_number':3440,'multiline':False]
['text':'     If the value exceeds that, it is interpreted as 0.','line_number':3441,'multiline':False]
['text':' ZERO (CASE4)','line_number':3450,'multiline':False]
['text':' some properties:','line_number':3451,'multiline':False]
['text':'    (+ZERO == -ZERO) => therefore ignore the sign','line_number':3452,'multiline':False]
['text':'    (ZERO x 10^A == ZERO x 10^B) for any valid A, B => therefore ','line_number':3453,'multiline':False]
['text':'    ignore the exponent field','line_number':3454,'multiline':False]
['text':'    (Any non-canonical # is considered 0)','line_number':3455,'multiline':False]
['text':' if both numbers are zero, neither is greater => return NOTGREATERTHAN','line_number':3462,'multiline':False]
['text':' is x is zero, it is greater if Y is negative','line_number':3467,'multiline':False]
['text':' is y is zero, X is greater if it is positive','line_number':3472,'multiline':False]
['text':' OPPOSITE SIGN (CASE5)','line_number':3477,'multiline':False]
['text':' now, if the sign bits differ, x is greater if y is negative','line_number':3478,'multiline':False]
['text':' REDUNDANT REPRESENTATIONS (CASE6)','line_number':3483,'multiline':False]
['text':' if exponents are the same, then we have a simple comparison ','line_number':3484,'multiline':False]
['text':' of the significands','line_number':3485,'multiline':False]
['text':' if both components are either bigger or smaller, ','line_number':3493,'multiline':False]
['text':' it is clear what needs to be done','line_number':3494,'multiline':False]
['text':' if |exp_x - exp_y| < 33, it comes down to the compensated significand','line_number':3510,'multiline':False]
['text':' to simplify the loop below,','line_number':3511,'multiline':False]
['text':' if exp_x is 33 greater than exp_y, no need for compensation','line_number':3513,'multiline':False]
['text':' difference cannot be greater than 10^33','line_number':3517,'multiline':False]
['text':'128 by 128 bit multiply -> 256 bits','line_number':3519,'multiline':False]
['text':' if postitive, return whichever significand is larger ','line_number':3523,'multiline':False]
['text':' (converse if negative)','line_number':3524,'multiline':False]
['text':' if equal, return 0','line_number':3530,'multiline':False]
['text':'else { //128 by 64 bit multiply -> 192 bits','line_number':3540,'multiline':False]
['text':' if postitive, return whichever significand is larger ','line_number':3543,'multiline':False]
['text':' (converse if negative)','line_number':3544,'multiline':False]
['text':' if equal, return 0','line_number':3549,'multiline':False]
['text':' if exp_x is 33 less than exp_y, no need for compensation','line_number':3562,'multiline':False]
['text':'128 by 128 bit multiply -> 256 bits','line_number':3568,'multiline':False]
['text':' adjust the y significand upwards','line_number':3569,'multiline':False]
['text':' if postitive, return whichever significand is larger ','line_number':3573,'multiline':False]
['text':' (converse if negative)','line_number':3574,'multiline':False]
['text':' if equal, return 0','line_number':3580,'multiline':False]
['text':'else { //128 by 64 bit multiply -> 192 bits','line_number':3591,'multiline':False]
['text':' adjust the y significand upwards','line_number':3592,'multiline':False]
['text':' if postitive, return whichever significand is larger ','line_number':3595,'multiline':False]
['text':' (converse if negative)','line_number':3596,'multiline':False]
['text':' if equal, return 0','line_number':3601,'multiline':False]
['text':' NaN (CASE1)','line_number':3624,'multiline':False]
['text':' if either number is NAN, the comparison is unordered','line_number':3625,'multiline':False]
['text':' SIMPLE (CASE2)','line_number':3634,'multiline':False]
['text':' if all the bits are the same, these numbers are equal.','line_number':3635,'multiline':False]
['text':' INFINITY (CASE3)','line_number':3640,'multiline':False]
['text':' if x==neg_inf, { res = (y == neg_inf)?1:0; BID_RETURN_VAL (res) }','line_number':3642,'multiline':False]
['text':' x is -inf, so it is less than y unless y is -inf','line_number':3644,'multiline':False]
['text':' x is pos_inf, no way for it to be less than y','line_number':3650,'multiline':False]
['text':' x is finite, so if y is positive infinity, then x is less, return 0','line_number':3656,'multiline':False]
['text':'                 if y is negative infinity, then x is greater, return 1','line_number':3657,'multiline':False]
['text':' CONVERT X','line_number':3663,'multiline':False]
['text':' CHECK IF X IS CANONICAL','line_number':3668,'multiline':False]
['text':' 9999999999999999999999999999999999(decimal) = ','line_number':3669,'multiline':False]
['text':'   1ed09_bead87c0_378d8e63_ffffffff(hexadecimal)','line_number':3670,'multiline':False]
['text':' [0, 10^34) is the 754 supported canonical range.  ','line_number':3671,'multiline':False]
['text':'     If the value exceeds that, it is interpreted as 0.','line_number':3672,'multiline':False]
['text':' CONVERT Y','line_number':3681,'multiline':False]
['text':' CHECK IF Y IS CANONICAL','line_number':3686,'multiline':False]
['text':' 9999999999999999999999999999999999(decimal) = ','line_number':3687,'multiline':False]
['text':'   1ed09_bead87c0_378d8e63_ffffffff(hexadecimal)','line_number':3688,'multiline':False]
['text':' [0, 10^34) is the 754 supported canonical range.  ','line_number':3689,'multiline':False]
['text':'     If the value exceeds that, it is interpreted as 0.','line_number':3690,'multiline':False]
['text':' ZERO (CASE4)','line_number':3699,'multiline':False]
['text':' some properties:','line_number':3700,'multiline':False]
['text':'    (+ZERO == -ZERO) => therefore ignore the sign','line_number':3701,'multiline':False]
['text':'    (ZERO x 10^A == ZERO x 10^B) for any valid A, B => therefore ','line_number':3702,'multiline':False]
['text':'    ignore the exponent field','line_number':3703,'multiline':False]
['text':'    (Any non-canonical # is considered 0)','line_number':3704,'multiline':False]
['text':' if both numbers are zero, neither is greater => return NOTGREATERTHAN','line_number':3711,'multiline':False]
['text':' is x is zero, it is greater if Y is negative','line_number':3716,'multiline':False]
['text':' is y is zero, X is greater if it is positive','line_number':3721,'multiline':False]
['text':' OPPOSITE SIGN (CASE5)','line_number':3726,'multiline':False]
['text':' now, if the sign bits differ, x is greater if y is negative','line_number':3727,'multiline':False]
['text':' REDUNDANT REPRESENTATIONS (CASE6)','line_number':3732,'multiline':False]
['text':' if exponents are the same, then we have a simple comparison ','line_number':3733,'multiline':False]
['text':' of the significands','line_number':3734,'multiline':False]
['text':' if both components are either bigger or smaller, ','line_number':3742,'multiline':False]
['text':' it is clear what needs to be done','line_number':3743,'multiline':False]
['text':' if |exp_x - exp_y| < 33, it comes down to the compensated significand','line_number':3759,'multiline':False]
['text':' to simplify the loop below,','line_number':3760,'multiline':False]
['text':' if exp_x is 33 greater than exp_y, no need for compensation','line_number':3762,'multiline':False]
['text':' difference cannot be greater than 10^33','line_number':3766,'multiline':False]
['text':'128 by 128 bit multiply -> 256 bits','line_number':3768,'multiline':False]
['text':' if postitive, return whichever significand is larger ','line_number':3772,'multiline':False]
['text':' (converse if negative)','line_number':3773,'multiline':False]
['text':' if equal, return 0','line_number':3779,'multiline':False]
['text':'else { //128 by 64 bit multiply -> 192 bits','line_number':3789,'multiline':False]
['text':' if postitive, return whichever significand is larger ','line_number':3792,'multiline':False]
['text':' (converse if negative)','line_number':3793,'multiline':False]
['text':' if equal, return 0','line_number':3798,'multiline':False]
['text':' if exp_x is 33 less than exp_y, no need for compensation','line_number':3811,'multiline':False]
['text':'128 by 128 bit multiply -> 256 bits','line_number':3817,'multiline':False]
['text':' adjust the y significand upwards','line_number':3818,'multiline':False]
['text':' if postitive, return whichever significand is larger ','line_number':3822,'multiline':False]
['text':' (converse if negative)','line_number':3823,'multiline':False]
['text':' if equal, return 1','line_number':3829,'multiline':False]
['text':'else { //128 by 64 bit multiply -> 192 bits','line_number':3840,'multiline':False]
['text':' adjust the y significand upwards','line_number':3841,'multiline':False]
['text':' if postitive, return whichever significand is larger (converse if negative)','line_number':3844,'multiline':False]
['text':' if equal, return 0','line_number':3849,'multiline':False]
['text':' NaN (CASE1)','line_number':3872,'multiline':False]
['text':' if either number is NAN, the comparison is unordered, ','line_number':3873,'multiline':False]
['text':' rather than equal : return 0','line_number':3874,'multiline':False]
['text':' SIMPLE (CASE2)','line_number':3883,'multiline':False]
['text':' if all the bits are the same, these numbers are equal (not Greater).','line_number':3884,'multiline':False]
['text':' INFINITY (CASE3)','line_number':3889,'multiline':False]
['text':' if x is neg infinity, there is no way it is greater than y, return 1','line_number':3891,'multiline':False]
['text':' x is pos infinity, it is greater, unless y is positive infinity => return y!=pos_infinity','line_number':3896,'multiline':False]
['text':' x is finite, so if y is positive infinity, then x is less, return 0','line_number':3903,'multiline':False]
['text':'                 if y is negative infinity, then x is greater, return 1','line_number':3904,'multiline':False]
['text':' CONVERT X','line_number':3910,'multiline':False]
['text':' CHECK IF X IS CANONICAL','line_number':3915,'multiline':False]
['text':' 9999999999999999999999999999999999(decimal) = ','line_number':3916,'multiline':False]
['text':'   1ed09_bead87c0_378d8e63_ffffffff(hexadecimal)','line_number':3917,'multiline':False]
['text':' [0, 10^34) is the 754 supported canonical range.  ','line_number':3918,'multiline':False]
['text':'     If the value exceeds that, it is interpreted as 0.','line_number':3919,'multiline':False]
['text':' CONVERT Y','line_number':3928,'multiline':False]
['text':' CHECK IF Y IS CANONICAL','line_number':3933,'multiline':False]
['text':' 9999999999999999999999999999999999(decimal) = ','line_number':3934,'multiline':False]
['text':'   1ed09_bead87c0_378d8e63_ffffffff(hexadecimal)','line_number':3935,'multiline':False]
['text':' [0, 10^34) is the 754 supported canonical range.  ','line_number':3936,'multiline':False]
['text':'     If the value exceeds that, it is interpreted as 0.','line_number':3937,'multiline':False]
['text':' ZERO (CASE4)','line_number':3946,'multiline':False]
['text':' some properties:','line_number':3947,'multiline':False]
['text':'    (+ZERO == -ZERO) => therefore ignore the sign','line_number':3948,'multiline':False]
['text':'    (ZERO x 10^A == ZERO x 10^B) for any valid A, B => therefore ','line_number':3949,'multiline':False]
['text':'    ignore the exponent field','line_number':3950,'multiline':False]
['text':'    (Any non-canonical # is considered 0)','line_number':3951,'multiline':False]
['text':' if both numbers are zero, neither is greater => return NOTGREATERTHAN','line_number':3958,'multiline':False]
['text':' is x is zero, it is greater if Y is negative','line_number':3963,'multiline':False]
['text':' is y is zero, X is greater if it is positive','line_number':3968,'multiline':False]
['text':' OPPOSITE SIGN (CASE5)','line_number':3973,'multiline':False]
['text':' now, if the sign bits differ, x is greater if y is negative','line_number':3974,'multiline':False]
['text':' REDUNDANT REPRESENTATIONS (CASE6)','line_number':3979,'multiline':False]
['text':' if exponents are the same, then we have a simple comparison ','line_number':3980,'multiline':False]
['text':' of the significands','line_number':3981,'multiline':False]
['text':' if both components are either bigger or smaller, ','line_number':3989,'multiline':False]
['text':' it is clear what needs to be done','line_number':3990,'multiline':False]
['text':' if |exp_x - exp_y| < 33, it comes down to the compensated significand','line_number':4006,'multiline':False]
['text':' to simplify the loop below,','line_number':4007,'multiline':False]
['text':' if exp_x is 33 greater than exp_y, no need for compensation','line_number':4009,'multiline':False]
['text':' difference cannot be greater than 10^33','line_number':4013,'multiline':False]
['text':'128 by 128 bit multiply -> 256 bits','line_number':4015,'multiline':False]
['text':' if postitive, return whichever significand is larger ','line_number':4019,'multiline':False]
['text':' (converse if negative)','line_number':4020,'multiline':False]
['text':' if equal, return 0','line_number':4026,'multiline':False]
['text':'else { //128 by 64 bit multiply -> 192 bits','line_number':4036,'multiline':False]
['text':' if postitive, return whichever significand is larger ','line_number':4039,'multiline':False]
['text':' (converse if negative)','line_number':4040,'multiline':False]
['text':' if equal, return 0','line_number':4045,'multiline':False]
['text':' if exp_x is 33 less than exp_y, no need for compensation','line_number':4058,'multiline':False]
['text':'128 by 128 bit multiply -> 256 bits','line_number':4064,'multiline':False]
['text':' adjust the y significand upwards','line_number':4065,'multiline':False]
['text':' if postitive, return whichever significand is larger ','line_number':4068,'multiline':False]
['text':' (converse if negative)','line_number':4069,'multiline':False]
['text':' if equal, return 0','line_number':4075,'multiline':False]
['text':'else { //128 by 64 bit multiply -> 192 bits','line_number':4086,'multiline':False]
['text':' adjust the y significand upwards','line_number':4087,'multiline':False]
['text':' if postitive, return whichever significand is larger ','line_number':4090,'multiline':False]
['text':' (converse if negative)','line_number':4091,'multiline':False]
['text':' if equal, return 0','line_number':4096,'multiline':False]
['text':' NaN (CASE1)','line_number':4119,'multiline':False]
['text':' if either number is NAN, the comparison is unordered, ','line_number':4120,'multiline':False]
['text':' rather than equal : return 1','line_number':4121,'multiline':False]
['text':' SIMPLE (CASE2)','line_number':4130,'multiline':False]
['text':' if all the bits are the same, these numbers are equal (not Greater).','line_number':4131,'multiline':False]
['text':' INFINITY (CASE3)','line_number':4136,'multiline':False]
['text':' if x==neg_inf, { res = (y == neg_inf)?1:0; BID_RETURN_VAL (res) }','line_number':4138,'multiline':False]
['text':' x is -inf, so it is less than y unless y is -inf','line_number':4140,'multiline':False]
['text':' x is pos_inf, no way for it to be less than y','line_number':4146,'multiline':False]
['text':' x is finite, so if y is positive infinity, then x is less, return 0','line_number':4152,'multiline':False]
['text':'                 if y is negative infinity, then x is greater, return 1','line_number':4153,'multiline':False]
['text':' CONVERT X','line_number':4159,'multiline':False]
['text':' CHECK IF X IS CANONICAL','line_number':4164,'multiline':False]
['text':' 9999999999999999999999999999999999(decimal) = ','line_number':4165,'multiline':False]
['text':'   1ed09_bead87c0_378d8e63_ffffffff(hexadecimal)','line_number':4166,'multiline':False]
['text':' [0, 10^34) is the 754 supported canonical range.  ','line_number':4167,'multiline':False]
['text':'     If the value exceeds that, it is interpreted as 0.','line_number':4168,'multiline':False]
['text':' CONVERT Y','line_number':4177,'multiline':False]
['text':' CHECK IF Y IS CANONICAL','line_number':4182,'multiline':False]
['text':' 9999999999999999999999999999999999(decimal) = ','line_number':4183,'multiline':False]
['text':'   1ed09_bead87c0_378d8e63_ffffffff(hexadecimal)','line_number':4184,'multiline':False]
['text':' [0, 10^34) is the 754 supported canonical range.  ','line_number':4185,'multiline':False]
['text':'     If the value exceeds that, it is interpreted as 0.','line_number':4186,'multiline':False]
['text':' ZERO (CASE4)','line_number':4195,'multiline':False]
['text':' some properties:','line_number':4196,'multiline':False]
['text':'    (+ZERO == -ZERO) => therefore ignore the sign','line_number':4197,'multiline':False]
['text':'    (ZERO x 10^A == ZERO x 10^B) for any valid A, B => therefore ','line_number':4198,'multiline':False]
['text':'    ignore the exponent field','line_number':4199,'multiline':False]
['text':'    (Any non-canonical # is considered 0)','line_number':4200,'multiline':False]
['text':' if both numbers are zero, neither is greater => return NOTGREATERTHAN','line_number':4207,'multiline':False]
['text':' is x is zero, it is greater if Y is negative','line_number':4212,'multiline':False]
['text':' is y is zero, X is greater if it is positive','line_number':4217,'multiline':False]
['text':' OPPOSITE SIGN (CASE5)','line_number':4222,'multiline':False]
['text':' now, if the sign bits differ, x is greater if y is negative','line_number':4223,'multiline':False]
['text':' REDUNDANT REPRESENTATIONS (CASE6)','line_number':4228,'multiline':False]
['text':' if exponents are the same, then we have a simple comparison ','line_number':4230,'multiline':False]
['text':' of the significands','line_number':4231,'multiline':False]
['text':' if both components are either bigger or smaller, ','line_number':4239,'multiline':False]
['text':' it is clear what needs to be done','line_number':4240,'multiline':False]
['text':' if |exp_x - exp_y| < 33, it comes down to the compensated significand','line_number':4254,'multiline':False]
['text':' to simplify the loop below,','line_number':4255,'multiline':False]
['text':' if exp_x is 33 greater than exp_y, no need for compensation','line_number':4257,'multiline':False]
['text':' difference cannot be greater than 10^33','line_number':4261,'multiline':False]
['text':'128 by 128 bit multiply -> 256 bits','line_number':4263,'multiline':False]
['text':' if postitive, return whichever significand is larger ','line_number':4267,'multiline':False]
['text':' (converse if negative)','line_number':4268,'multiline':False]
['text':' if equal, return 1','line_number':4274,'multiline':False]
['text':'else { //128 by 64 bit multiply -> 192 bits','line_number':4284,'multiline':False]
['text':' if postitive, return whichever significand is larger ','line_number':4287,'multiline':False]
['text':' (converse if negative)','line_number':4288,'multiline':False]
['text':' if equal, return 1','line_number':4293,'multiline':False]
['text':' if exp_x is 33 less than exp_y, no need for compensation','line_number':4306,'multiline':False]
['text':'128 by 128 bit multiply -> 256 bits','line_number':4312,'multiline':False]
['text':' adjust the y significand upwards','line_number':4313,'multiline':False]
['text':' if postitive, return whichever significand is larger ','line_number':4317,'multiline':False]
['text':' (converse if negative)','line_number':4318,'multiline':False]
['text':' if equal, return 1','line_number':4324,'multiline':False]
['text':'else { //128 by 64 bit multiply -> 192 bits','line_number':4335,'multiline':False]
['text':' adjust the y significand upwards','line_number':4336,'multiline':False]
['text':' if postitive, return whichever significand is larger (converse if negative)','line_number':4339,'multiline':False]
['text':' if equal, return 1','line_number':4344,'multiline':False]
