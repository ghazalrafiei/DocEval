['text':'*****************************************************************************
  Copyright (c) 2011, Intel Corp.
  All rights reserved.

  Redistribution and use in source and binary forms, with or without 
  modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice, 
      this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright 
      notice, this list of conditions and the following disclaimer in the 
      documentation and/or other materials provided with the distribution.
    * Neither the name of Intel Corporation nor the names of its contributors 
      may be used to endorse or promote products derived from this software 
      without specific prior written permission.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
  THE POSSIBILITY OF SUCH DAMAGE.
*****************************************************************************','line_number':1,'multiline':True]
['text':'****************************************************************************
 *  BID32 nexttowardd
 ***************************************************************************','line_number':32,'multiline':True]
['text':' dummy fpsf for calls to comparison functions','line_number':41,'multiline':False]
['text':' dummy; used to convert 128-bit NaN result to 32-bit','line_number':45,'multiline':False]
['text':' check for NaNs or infinities','line_number':48,'multiline':False]
['text':' x is NaN or infinity or y is NaN or infinity','line_number':52,'multiline':False]
['text':' x is NAN','line_number':54,'multiline':False]
['text':' clear G6-G10 and the payload bits','line_number':56,'multiline':False]
['text':' clear G6-G10','line_number':58,'multiline':False]
['text':' x is SNAN','line_number':59,'multiline':False]
['text':' set invalid flag','line_number':60,'multiline':False]
['text':' return quiet (x)','line_number':62,'multiline':False]
['text':' x is QNaN','line_number':64,'multiline':False]
['text':' y is SNAN','line_number':65,'multiline':False]
['text':' set invalid flag','line_number':66,'multiline':False]
['text':' return x','line_number':69,'multiline':False]
['text':' y is NAN then res = Q (y)','line_number':73,'multiline':False]
['text':' check first for non-canonical NaN payload ','line_number':74,'multiline':False]
['text':' y is SNAN','line_number':81,'multiline':False]
['text':' set invalid flag ','line_number':82,'multiline':False]
['text':' return quiet (y)','line_number':84,'multiline':False]
['text':' clear out also G[6]-G[16]','line_number':86,'multiline':False]
['text':' y is QNaN  ','line_number':88,'multiline':False]
['text':' return y','line_number':89,'multiline':False]
['text':' clear out G[6]-G[16]','line_number':90,'multiline':False]
['text':' at least one is infinity','line_number':95,'multiline':False]
['text':' x = inf','line_number':96,'multiline':False]
['text':' y = inf','line_number':99,'multiline':False]
['text':' neither x nor y is NaN','line_number':105,'multiline':False]
['text':' if not infinity, check for non-canonical values x (treated as zero)','line_number':107,'multiline':False]
['text':' x != inf','line_number':108,'multiline':False]
['text':' unpack x','line_number':109,'multiline':False]
['text':' if the steering bits are 11 (condition will be 0), then','line_number':111,'multiline':False]
['text':' the exponent is G[0:7]','line_number':112,'multiline':False]
['text':' non-canonical','line_number':114,'multiline':False]
['text':' if ((x & MASK_STEERING_BITS32) != MASK_STEERING_BITS32) x is unchanged','line_number':118,'multiline':False]
['text':' canonical','line_number':119,'multiline':False]
['text':' no need to check for non-canonical y','line_number':122,'multiline':False]
['text':' neither x nor y is NaN','line_number':124,'multiline':False]
['text':' save fpsf','line_number':125,'multiline':False]
['text':' convert x to 128-bit format','line_number':126,'multiline':False]
['text':' restore fpsf','line_number':130,'multiline':False]
['text':' x = y','line_number':131,'multiline':False]
['text':' return x with the sign of y','line_number':132,'multiline':False]
['text':' x > y','line_number':134,'multiline':False]
['text':' x < y','line_number':136,'multiline':False]
['text':' if the operand x is finite but the result is infinite, signal','line_number':139,'multiline':False]
['text':' overflow and inexact','line_number':140,'multiline':False]
['text':' set the inexact flag','line_number':142,'multiline':False]
['text':' set the overflow flag','line_number':144,'multiline':False]
['text':' if the result is in (-10^emin, 10^emin), and is different from the','line_number':147,'multiline':False]
['text':' operand x, signal underflow and inexact ','line_number':148,'multiline':False]
['text':' +1000000 * 10^emin','line_number':149,'multiline':False]
['text':' save fpsf','line_number':151,'multiline':False]
['text':' restore fpsf','line_number':154,'multiline':False]
['text':' if (bid32_quiet_greater (tmp1, tmp2, &tmp_fpsf) &&','line_number':156,'multiline':False]
['text':' bid32_quiet_not_equal (x, res, &tmp_fpsf)) {','line_number':157,'multiline':False]
['text':' set the inexact flag','line_number':158,'multiline':False]
['text':' set the underflow flag','line_number':160,'multiline':False]
