['text':'*****************************************************************************
  Copyright (c) 2007-2011, Intel Corp.
  All rights reserved.

  Redistribution and use in source and binary forms, with or without 
  modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice, 
      this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright 
      notice, this list of conditions and the following disclaimer in the 
      documentation and/or other materials provided with the distribution.
    * Neither the name of Intel Corporation nor the names of its contributors 
      may be used to endorse or promote products derived from this software 
      without specific prior written permission.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
  THE POSSIBILITY OF SUCH DAMAGE.
*****************************************************************************','line_number':1,'multiline':True]
['text':'****************************************************************************
 *    BID128_to_string
 ***************************************************************************','line_number':30,'multiline':True]
['text':' unbiased exponent','line_number':60,'multiline':False]
['text':' Note: C1.w[1], C1.w[0] represent x_signif_hi, x_signif_lo (all are BID_UINT64)','line_number':61,'multiline':False]
['text':' pointer in the string','line_number':64,'multiline':False]
['text':' dummy','line_number':76,'multiline':False]
['text':' check for NaN or Infinity','line_number':79,'multiline':False]
['text':' x is special','line_number':81,'multiline':False]
['text':' x is NAN','line_number':82,'multiline':False]
['text':' x is SNAN','line_number':83,'multiline':False]
['text':' set invalid flag','line_number':84,'multiline':False]
['text':' x is QNaN','line_number':91,'multiline':False]
['text':' x is not a NaN, so it must be infinity','line_number':98,'multiline':False]
['text':' x is +inf','line_number':99,'multiline':False]
['text':' x is -inf ','line_number':105,'multiline':False]
['text':' x is 0','line_number':115,'multiline':False]
['text':'determine if +/-','line_number':118,'multiline':False]
['text':' extract the exponent and print','line_number':126,'multiline':False]
['text':' should not use sprintf (should ','line_number':133,'multiline':False]
['text':' use sophisticated algorithm, since we know range of exp is limited)','line_number':134,'multiline':False]
['text':' should not use sprintf (should ','line_number':137,'multiline':False]
['text':' use sophisticated algorithm, since we know range of exp is limited)','line_number':138,'multiline':False]
['text':' x is not special and is not zero','line_number':142,'multiline':False]
['text':' unpack x','line_number':143,'multiline':False]
['text':' 0 for positive, MASK_SIGN for negative','line_number':144,'multiline':False]
['text':' biased and shifted left 49 bit positions','line_number':145,'multiline':False]
['text':' biased and shifted left 49 bit positions','line_number':147,'multiline':False]
['text':' determine sign's representation as a char','line_number':152,'multiline':False]
['text':' negative number','line_number':154,'multiline':False]
['text':' positive number','line_number':156,'multiline':False]
['text':' determine coefficient's representation as a decimal string','line_number':158,'multiline':False]
['text':' if zero or non-canonical, set coefficient to '0'','line_number':160,'multiline':False]
['text':' ****************************************************
         This takes a bid coefficient in C1.w[1],C1.w[0] 
         and put the converted character sequence at location 
         starting at &(str[k]). The function returns the number
         of MiDi returned. Note that the character sequence 
         does not have leading zeros EXCEPT when the input is of
         zero value. It will then output 1 character '0'
         The algorithm essentailly tries first to get a sequence of
         Millenial Digits "MiDi" and then uses table lookup to get the
         character strings of these MiDis.
         **************************************************** ','line_number':168,'multiline':True]
['text':' Algorithm first decompose possibly 34 digits in hi and lo
         18 digits. (The high can have at most 16 digits). It then
         uses macro that handle 18 digit portions.
         The first step is to get hi and lo such that
         2^(64) C1.w[1] + C1.w[0] = hi * 10^18  + lo,   0 <= lo < 10^18.
         We use a table lookup method to obtain the hi and lo 18 digits.
         [C1.w[1],C1.w[0]] = c_8 2^(107) + c_7 2^(101) + ... + c_0 2^(59) + d
         where 0 <= d < 2^59 and each c_j has 6 bits. Because d fits in
         18 digits,  we set hi = 0, and lo = d to begin with.
         We then retrieve from a table, for j = 0, 1, ..., 8
         that gives us A and B where c_j 2^(59+6j) = A * 10^18 + B.
         hi += A ; lo += B; After each accumulation into lo, we normalize 
         immediately. So at the end, we have the decomposition as we need. ','line_number':179,'multiline':True]
['text':' Tmp = {C1.w[1]{49:0}, C1.w[0]{63:59}}','line_number':198,'multiline':False]
['text':' Lo_18Dig = {C1.w[0]{58:0}}','line_number':199,'multiline':False]
['text':' now convert the MiDi into character strings ','line_number':220,'multiline':True]
['text':' print E and sign of exponent','line_number':228,'multiline':False]
['text':' determine exponent's representation as a decimal string','line_number':237,'multiline':False]
['text':' d0 = exp / 1000;','line_number':238,'multiline':False]
['text':' Use Property 1','line_number':239,'multiline':False]
['text':' 0x418a * 2^-24 = (10^(-3))RP,15','line_number':240,'multiline':False]
['text':' 1000 <= exp <= 6144 => 4 digits to return','line_number':243,'multiline':False]
['text':' ASCII for decimal digit d0','line_number':244,'multiline':False]
['text':' 0 <= exp <= 999 => d0 = 0','line_number':249,'multiline':False]
['text':' 0 <= exp <= 9 => 1 digit to return','line_number':250,'multiline':False]
['text':' ASCII','line_number':251,'multiline':False]
['text':' 10 <= exp <= 99 => 2 digits to return','line_number':252,'multiline':False]
['text':' 100 <= exp <= 999 => 3 digits to return','line_number':256,'multiline':False]
['text':' dummy','line_number':305,'multiline':False]
['text':' dummy','line_number':306,'multiline':False]
['text':' if null string, return NaN','line_number':310,'multiline':False]
['text':' eliminate leading white space','line_number':316,'multiline':False]
['text':' c gets first character','line_number':320,'multiline':False]
['text':' if c is null or not equal to a (radix point, negative sign, ','line_number':324,'multiline':False]
['text':' positive sign, or number) it might be SNaN, sNaN, Infinity','line_number':325,'multiline':False]
['text':' Infinity?','line_number':330,'multiline':False]
['text':' return sNaN','line_number':343,'multiline':False]
['text':' case insensitive check for snan','line_number':346,'multiline':False]
['text':' return qNaN','line_number':350,'multiline':False]
['text':' if +Inf, -Inf, +Infinity, or -Infinity (case insensitive check for inf)   ','line_number':355,'multiline':False]
['text':' ci check for infinity','line_number':360,'multiline':False]
['text':' if +sNaN, +SNaN, -sNaN, or -SNaN','line_number':372,'multiline':False]
['text':' set up sign_x to be OR'ed with the upper word later','line_number':382,'multiline':False]
['text':' go to next character if leading sign','line_number':388,'multiline':False]
['text':' if c isn't a decimal point or a decimal digit, return NaN','line_number':394,'multiline':False]
['text':' detect zero (and eliminate/ignore leading zeros)','line_number':405,'multiline':False]
['text':' if all numbers are zeros (with possibly 1 radix point, the number is zero','line_number':408,'multiline':False]
['text':' should catch cases such as: 000.0','line_number':409,'multiline':False]
['text':' for numbers such as 0.0000000000000000000000000000000000001001, ','line_number':414,'multiline':False]
['text':' we want to count the leading zeros','line_number':415,'multiline':False]
['text':' if this character is a radix point, make sure we haven't already ','line_number':419,'multiline':False]
['text':' encountered one','line_number':420,'multiline':False]
['text':' if this is the first radix point, and the next character is NULL, ','line_number':424,'multiline':False]
['text':' we have a zero','line_number':425,'multiline':False]
['text':' if 2 radix points, return NaN','line_number':435,'multiline':False]
['text':' initialize local variables','line_number':453,'multiline':False]
['text':' pstart_coefficient = ps;','line_number':456,'multiline':False]
['text':' investigate string (before radix point)','line_number':459,'multiline':False]
['text':'&& ndigits_before < MAX_STRING_DIGITS_128','line_number':461,'multiline':True]
['text':' investigate string (after radix point)','line_number':475,'multiline':False]
['text':'&& ndigits_total < MAX_STRING_DIGITS_128','line_number':477,'multiline':True]
['text':' we encountered a radix point while detecting zeros','line_number':489,'multiline':False]
['text':'if (c = *ps){','line_number':490,'multiline':False]
['text':' investigate string (after radix point)','line_number':494,'multiline':False]
['text':'&& ndigits_total < MAX_STRING_DIGITS_128','line_number':496,'multiline':True]
['text':' get exponent','line_number':507,'multiline':False]
['text':'if (ndigits_total < MAX_STRING_DIGITS_128)','line_number':509,'multiline':True]
['text':' return NaN','line_number':512,'multiline':False]
['text':' return NaN','line_number':522,'multiline':False]
['text':' now form the coefficient as coeff_high*10^19+coeff_low+carry','line_number':590,'multiline':False]
['text':' simply round using the digits that were read','line_number':601,'multiline':False]
['text':' now form the coefficient as coeff_high*10^17+coeff_low+carry','line_number':675,'multiline':False]
