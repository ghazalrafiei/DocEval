['text':'*****************************************************************************
  Copyright (c) 2007-2011, Intel Corp.
  All rights reserved.
 
  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are met:
 
    * Redistributions of source code must retain the above copyright notice,
      this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of Intel Corporation nor the names of its contributors
      may be used to endorse or promote products derived from this software
      without specific prior written permission.
 
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
  THE POSSIBILITY OF SUCH DAMAGE.
*****************************************************************************','line_number':1,'multiline':True]
['text':'****************************************************************************
 *  BID128_to_int32_rnint 
 ***************************************************************************','line_number':33,'multiline':True]
['text':' unbiased exponent','line_number':42,'multiline':False]
['text':' Note: C1.w[1], C1.w[0] represent x_signif_hi, x_signif_lo (all are BID_UINT64)','line_number':43,'multiline':False]
['text':' C* represents up to 34 decimal digits ~ 113 bits','line_number':49,'multiline':False]
['text':' unpack x','line_number':53,'multiline':False]
['text':' 0 for positive, MASK_SIGN for negative','line_number':54,'multiline':False]
['text':' biased and shifted left 49 bit positions','line_number':55,'multiline':False]
['text':' check for NaN or Infinity','line_number':59,'multiline':False]
['text':' x is special','line_number':61,'multiline':False]
['text':' x is NAN','line_number':62,'multiline':False]
['text':' x is SNAN','line_number':63,'multiline':False]
['text':' set invalid flag','line_number':64,'multiline':False]
['text':' return Integer Indefinite','line_number':66,'multiline':False]
['text':' x is QNaN','line_number':68,'multiline':False]
['text':' set invalid flag','line_number':69,'multiline':False]
['text':' return Integer Indefinite','line_number':71,'multiline':False]
['text':' x is not a NaN, so it must be infinity','line_number':75,'multiline':False]
['text':' x is +inf','line_number':76,'multiline':False]
['text':' set invalid flag','line_number':77,'multiline':False]
['text':' return Integer Indefinite','line_number':79,'multiline':False]
['text':' x is -inf','line_number':81,'multiline':False]
['text':' set invalid flag','line_number':82,'multiline':False]
['text':' return Integer Indefinite','line_number':84,'multiline':False]
['text':' check for non-canonical values (after the check for special values)','line_number':90,'multiline':False]
['text':' x is 0','line_number':98,'multiline':False]
['text':' x is not special and is not zero','line_number':101,'multiline':False]
['text':' q = nr. of decimal digits in x','line_number':103,'multiline':False]
['text':'  determine first the nr. of bits in x','line_number':104,'multiline':False]
['text':' x >= 2^53','line_number':106,'multiline':False]
['text':' split the 64-bit value in two 32-bit halves to avoid rounding errors','line_number':107,'multiline':False]
['text':' exact conversion','line_number':108,'multiline':False]
['text':' if x < 2^53','line_number':111,'multiline':False]
['text':' exact conversion','line_number':112,'multiline':False]
['text':' C1.w[1] != 0 => nr. bits = 64 + nr_bits (C1.w[1])','line_number':116,'multiline':False]
['text':' exact conversion','line_number':117,'multiline':False]
['text':' x >= 10^10 ~= 2^33.2... (cannot fit in 32 bits)','line_number':130,'multiline':False]
['text':' set invalid flag','line_number':131,'multiline':False]
['text':' return Integer Indefinite','line_number':133,'multiline':False]
['text':' x = c(0)c(1)...c(9).c(10)...c(q-1)','line_number':136,'multiline':False]
['text':' in this case 2^29.89... ~= 10^9 <= x < 10^10 ~= 2^33.2...','line_number':137,'multiline':False]
['text':' so x rounded to an integer may or may not fit in a signed 32-bit int','line_number':138,'multiline':False]
['text':' the cases that do not fit are identified here; the ones that fit','line_number':139,'multiline':False]
['text':' fall through and will be handled with other cases further,','line_number':140,'multiline':False]
['text':' under '1 <= q + exp <= 10'','line_number':141,'multiline':False]
['text':' if n < 0 and q + exp = 10','line_number':142,'multiline':False]
['text':' if n < -2^31 - 1/2 then n is too large','line_number':143,'multiline':False]
['text':' too large if c(0)c(1)...c(9).c(10)...c(q-1) > 2^31+1/2','line_number':144,'multiline':False]
['text':' <=> 0.c(0)c(1)...c(q-1) * 10^11 > 0x500000005, 1<=q<=34','line_number':145,'multiline':False]
['text':' C scaled up to 11-digit int','line_number':147,'multiline':False]
['text':' c(0)c(1)...c(9)c(10) or c(0)c(1)...c(q-1)0...0 (11 digits)','line_number':148,'multiline':False]
['text':' set invalid flag','line_number':150,'multiline':False]
['text':' return Integer Indefinite','line_number':152,'multiline':False]
['text':' else cases that can be rounded to a 32-bit int fall through','line_number':156,'multiline':False]
['text':' to '1 <= q + exp <= 10'','line_number':157,'multiline':False]
['text':' if (q > 11), i.e. 12 <= q <= 34 and so -24 <= exp <= -2','line_number':158,'multiline':False]
['text':' 0.c(0)c(1)...c(q-1) * 10^11 > 0x500000005 <=>','line_number':159,'multiline':False]
['text':' C > 0x500000005 * 10^(q-11) where 1 <= q - 11 <= 23','line_number':160,'multiline':False]
['text':' (scale 2^31+1/2 up)','line_number':161,'multiline':False]
['text':' 1 <= q - 11 <= 19; 10^(q-11) requires 64 bits','line_number':163,'multiline':False]
['text':' 20 <= q - 11 <= 23, and 10^(q-11) requires 128 bits','line_number':165,'multiline':False]
['text':' set invalid flag','line_number':169,'multiline':False]
['text':' return Integer Indefinite','line_number':171,'multiline':False]
['text':' else cases that can be rounded to a 32-bit int fall through','line_number':175,'multiline':False]
['text':' to '1 <= q + exp <= 10'','line_number':176,'multiline':False]
['text':' if n > 0 and q + exp = 10','line_number':178,'multiline':False]
['text':' if n >= 2^31 - 1/2 then n is too large','line_number':179,'multiline':False]
['text':' too large if c(0)c(1)...c(9).c(10)...c(q-1) >= 2^31-1/2','line_number':180,'multiline':False]
['text':' too large if 0.c(0)c(1)...c(q-1) * 10^11 >= 0x4fffffffb, 1<=q<=34','line_number':181,'multiline':False]
['text':' C scaled up to 11-digit int','line_number':183,'multiline':False]
['text':' c(0)c(1)...c(9)c(10) or c(0)c(1)...c(q-1)0...0 (11 digits)','line_number':184,'multiline':False]
['text':' set invalid flag','line_number':186,'multiline':False]
['text':' return Integer Indefinite','line_number':188,'multiline':False]
['text':' else cases that can be rounded to a 32-bit int fall through','line_number':192,'multiline':False]
['text':' to '1 <= q + exp <= 10'','line_number':193,'multiline':False]
['text':' if (q > 11), i.e. 12 <= q <= 34 and so -24 <= exp <= -2','line_number':194,'multiline':False]
['text':' 0.c(0)c(1)...c(q-1) * 10^11 >= 0x4fffffffb <=>','line_number':195,'multiline':False]
['text':' C >= 0x4fffffffb * 10^(q-11) where 1 <= q - 11 <= 23','line_number':196,'multiline':False]
['text':' (scale 2^31-1/2 up)','line_number':197,'multiline':False]
['text':' 1 <= q - 11 <= 19; 10^(q-11) requires 64 bits','line_number':199,'multiline':False]
['text':' 20 <= q - 11 <= 23, and 10^(q-11) requires 128 bits','line_number':201,'multiline':False]
['text':' set invalid flag','line_number':206,'multiline':False]
['text':' return Integer Indefinite','line_number':208,'multiline':False]
['text':' else cases that can be rounded to a 32-bit int fall through','line_number':212,'multiline':False]
['text':' to '1 <= q + exp <= 10'','line_number':213,'multiline':False]
['text':' n is not too large to be converted to int32: -2^31 - 1/2 < n < 2^31 - 1/2','line_number':217,'multiline':False]
['text':' Note: some of the cases tested for above fall through to this point','line_number':218,'multiline':False]
['text':' n = +/-0.0...c(0)c(1)...c(q-1)','line_number':219,'multiline':False]
['text':' return 0','line_number':220,'multiline':False]
['text':' n = +/-0.c(0)c(1)...c(q-1)','line_number':223,'multiline':False]
['text':' if 0.c(0)c(1)...c(q-1) <= 0.5 <=> c(0)c(1)...c(q-1) <= 5 * 10^(q-1)','line_number':224,'multiline':False]
['text':'   res = 0','line_number':225,'multiline':False]
['text':' else','line_number':226,'multiline':False]
['text':'   res = +/-1','line_number':227,'multiline':False]
['text':' 0 <= ind <= 18','line_number':229,'multiline':False]
['text':' return 0','line_number':231,'multiline':False]
['text':' n < 0','line_number':232,'multiline':False]
['text':' return -1','line_number':233,'multiline':False]
['text':' n > 0','line_number':234,'multiline':False]
['text':' return +1','line_number':235,'multiline':False]
['text':' 19 <= ind <= 33','line_number':237,'multiline':False]
['text':' return 0','line_number':241,'multiline':False]
['text':' n < 0','line_number':242,'multiline':False]
['text':' return -1','line_number':243,'multiline':False]
['text':' n > 0','line_number':244,'multiline':False]
['text':' return +1','line_number':245,'multiline':False]
['text':' if (1 <= q + exp <= 10, 1 <= q <= 34, -33 <= exp <= 9)','line_number':248,'multiline':False]
['text':' -2^31-1/2 <= x <= -1 or 1 <= x < 2^31-1/2 so x can be rounded','line_number':249,'multiline':False]
['text':' to nearest to a 32-bit signed integer','line_number':250,'multiline':False]
['text':' 2 <= q <= 34, -33 <= exp <= -1, 1 <= q + exp <= 10','line_number':251,'multiline':False]
['text':' 1 <= ind <= 33; ind is a synonym for 'x'','line_number':252,'multiline':False]
['text':' chop off ind digits from the lower part of C1','line_number':253,'multiline':False]
['text':' C1 = C1 + 1/2 * 10^ind where the result C1 fits in 127 bits','line_number':254,'multiline':False]
['text':' calculate C* and f*','line_number':264,'multiline':False]
['text':' C* is actually floor(C*) in this case','line_number':265,'multiline':False]
['text':' C* and f* need shifting and masking, as shown by','line_number':266,'multiline':False]
['text':' bid_shiftright128[] and bid_maskhigh128[]','line_number':267,'multiline':False]
['text':' 1 <= x <= 33','line_number':268,'multiline':False]
['text':' kx = 10^(-x) = bid_ten2mk128[ind - 1]','line_number':269,'multiline':False]
['text':' C* = (C1 + 1/2 * 10^x) * 10^(-x)','line_number':270,'multiline':False]
['text':' the approximation of 10^(-x) was rounded up to 118 bits','line_number':271,'multiline':False]
['text':' 0 <= ind - 1 <= 21','line_number':273,'multiline':False]
['text':' 22 <= ind - 1 <= 33','line_number':280,'multiline':False]
['text':' the top Ex bits of 10^(-x) are T* = bid_ten2mk128trunc[ind], e.g.','line_number':288,'multiline':False]
['text':' if x=1, T*=bid_ten2mk128trunc[0]=0x19999999999999999999999999999999','line_number':289,'multiline':False]
['text':' if (0 < f* < 10^(-x)) then the result is a midpoint','line_number':290,'multiline':False]
['text':'   if floor(C*) is even then C* = floor(C*) - logical right','line_number':291,'multiline':False]
['text':'       shift; C* has p decimal digits, correct by Prop. 1)','line_number':292,'multiline':False]
['text':'   else if floor(C*) is odd C* = floor(C*)-1 (logical right','line_number':293,'multiline':False]
['text':'       shift; C* has p decimal digits, correct by Pr. 1)','line_number':294,'multiline':False]
['text':' else','line_number':295,'multiline':False]
['text':'   C* = floor(C*) (logical right shift; C has p decimal digits,','line_number':296,'multiline':False]
['text':'       correct by Property 1)','line_number':297,'multiline':False]
['text':' n = C* * 10^(e+x)','line_number':298,'multiline':False]
['text':' shift right C* by Ex-128 = bid_shiftright128[ind]','line_number':300,'multiline':False]
['text':' 0 <= shift <= 102','line_number':301,'multiline':False]
['text':' 0 <= ind - 1 <= 21','line_number':302,'multiline':False]
['text':' redundant, it will be 0! Cstar.w[1] = (Cstar.w[1] >> shift);','line_number':305,'multiline':False]
['text':' 22 <= ind - 1 <= 33','line_number':306,'multiline':False]
['text':' 2 <= shift - 64 <= 38','line_number':307,'multiline':False]
['text':' if the result was a midpoint it was rounded away from zero, so','line_number':309,'multiline':False]
['text':' it will need a correction','line_number':310,'multiline':False]
['text':' check for midpoints','line_number':311,'multiline':False]
['text':' the result is a midpoint; round to nearest','line_number':317,'multiline':False]
['text':' Cstar.w[0] is odd; MP in [EVEN, ODD]','line_number':318,'multiline':False]
['text':' if floor(C*) is odd C = floor(C*) - 1; the result >= 1','line_number':319,'multiline':False]
['text':' Cstar.w[0] is now even','line_number':320,'multiline':False]
['text':' else MP in [ODD, EVEN]','line_number':321,'multiline':False]
['text':' 1 <= q <= 10','line_number':328,'multiline':False]
['text':' res = +/-C (exact)','line_number':329,'multiline':False]
['text':' if (exp > 0) => 1 <= exp <= 9, 1 <= q < 9, 2 <= q + exp <= 10','line_number':334,'multiline':False]
['text':' res = +/-C * 10^exp (exact)','line_number':335,'multiline':False]
['text':'****************************************************************************
 *  BID128_to_int32_xrnint
 ***************************************************************************','line_number':347,'multiline':True]
['text':' unbiased exponent','line_number':357,'multiline':False]
['text':' Note: C1.w[1], C1.w[0] represent x_signif_hi, x_signif_lo (all are BID_UINT64)','line_number':358,'multiline':False]
['text':' C* represents up to 34 decimal digits ~ 113 bits','line_number':364,'multiline':False]
['text':' unpack x','line_number':368,'multiline':False]
['text':' 0 for positive, MASK_SIGN for negative','line_number':369,'multiline':False]
['text':' biased and shifted left 49 bit positions','line_number':370,'multiline':False]
['text':' check for NaN or Infinity','line_number':374,'multiline':False]
['text':' x is special','line_number':376,'multiline':False]
['text':' x is NAN','line_number':377,'multiline':False]
['text':' x is SNAN','line_number':378,'multiline':False]
['text':' set invalid flag','line_number':379,'multiline':False]
['text':' return Integer Indefinite','line_number':381,'multiline':False]
['text':' x is QNaN','line_number':383,'multiline':False]
['text':' set invalid flag','line_number':384,'multiline':False]
['text':' return Integer Indefinite','line_number':386,'multiline':False]
['text':' x is not a NaN, so it must be infinity','line_number':390,'multiline':False]
['text':' x is +inf','line_number':391,'multiline':False]
['text':' set invalid flag','line_number':392,'multiline':False]
['text':' return Integer Indefinite','line_number':394,'multiline':False]
['text':' x is -inf','line_number':396,'multiline':False]
['text':' set invalid flag','line_number':397,'multiline':False]
['text':' return Integer Indefinite','line_number':399,'multiline':False]
['text':' check for non-canonical values (after the check for special values)','line_number':405,'multiline':False]
['text':' x is 0','line_number':413,'multiline':False]
['text':' x is not special and is not zero','line_number':416,'multiline':False]
['text':' q = nr. of decimal digits in x','line_number':418,'multiline':False]
['text':'  determine first the nr. of bits in x','line_number':419,'multiline':False]
['text':' x >= 2^53','line_number':421,'multiline':False]
['text':' split the 64-bit value in two 32-bit halves to avoid rounding errors','line_number':422,'multiline':False]
['text':' exact conversion','line_number':423,'multiline':False]
['text':' if x < 2^53','line_number':426,'multiline':False]
['text':' exact conversion','line_number':427,'multiline':False]
['text':' C1.w[1] != 0 => nr. bits = 64 + nr_bits (C1.w[1])','line_number':431,'multiline':False]
['text':' exact conversion','line_number':432,'multiline':False]
['text':' x >= 10^10 ~= 2^33.2... (cannot fit in 32 bits)','line_number':445,'multiline':False]
['text':' set invalid flag','line_number':446,'multiline':False]
['text':' return Integer Indefinite','line_number':448,'multiline':False]
['text':' x = c(0)c(1)...c(9).c(10)...c(q-1)','line_number':451,'multiline':False]
['text':' in this case 2^29.89... ~= 10^9 <= x < 10^10 ~= 2^33.2...','line_number':452,'multiline':False]
['text':' so x rounded to an integer may or may not fit in a signed 32-bit int','line_number':453,'multiline':False]
['text':' the cases that do not fit are identified here; the ones that fit','line_number':454,'multiline':False]
['text':' fall through and will be handled with other cases further,','line_number':455,'multiline':False]
['text':' under '1 <= q + exp <= 10'','line_number':456,'multiline':False]
['text':' if n < 0 and q + exp = 10','line_number':457,'multiline':False]
['text':' if n < -2^31 - 1/2 then n is too large','line_number':458,'multiline':False]
['text':' too large if c(0)c(1)...c(9).c(10)...c(q-1) > 2^31+1/2','line_number':459,'multiline':False]
['text':' <=> 0.c(0)c(1)...c(q-1) * 10^11 > 0x500000005, 1<=q<=34','line_number':460,'multiline':False]
['text':' C scaled up to 11-digit int','line_number':462,'multiline':False]
['text':' c(0)c(1)...c(9)c(10) or c(0)c(1)...c(q-1)0...0 (11 digits)','line_number':463,'multiline':False]
['text':' set invalid flag','line_number':465,'multiline':False]
['text':' return Integer Indefinite','line_number':467,'multiline':False]
['text':' else cases that can be rounded to a 32-bit int fall through','line_number':471,'multiline':False]
['text':' to '1 <= q + exp <= 10'','line_number':472,'multiline':False]
['text':' if (q > 11), i.e. 12 <= q <= 34 and so -24 <= exp <= -2','line_number':473,'multiline':False]
['text':' 0.c(0)c(1)...c(q-1) * 10^11 > 0x500000005 <=>','line_number':474,'multiline':False]
['text':' C > 0x500000005 * 10^(q-11) where 1 <= q - 11 <= 23','line_number':475,'multiline':False]
['text':' (scale 2^31+1/2 up)','line_number':476,'multiline':False]
['text':' 1 <= q - 11 <= 19; 10^(q-11) requires 64 bits','line_number':478,'multiline':False]
['text':' 20 <= q - 11 <= 23, and 10^(q-11) requires 128 bits','line_number':480,'multiline':False]
['text':' set invalid flag','line_number':484,'multiline':False]
['text':' return Integer Indefinite','line_number':486,'multiline':False]
['text':' else cases that can be rounded to a 32-bit int fall through','line_number':490,'multiline':False]
['text':' to '1 <= q + exp <= 10'','line_number':491,'multiline':False]
['text':' if n > 0 and q + exp = 10','line_number':493,'multiline':False]
['text':' if n >= 2^31 - 1/2 then n is too large','line_number':494,'multiline':False]
['text':' too large if c(0)c(1)...c(9).c(10)...c(q-1) >= 2^31-1/2','line_number':495,'multiline':False]
['text':' too large if 0.c(0)c(1)...c(q-1) * 10^11 >= 0x4fffffffb, 1<=q<=34','line_number':496,'multiline':False]
['text':' C scaled up to 11-digit int','line_number':498,'multiline':False]
['text':' c(0)c(1)...c(9)c(10) or c(0)c(1)...c(q-1)0...0 (11 digits)','line_number':499,'multiline':False]
['text':' set invalid flag','line_number':501,'multiline':False]
['text':' return Integer Indefinite','line_number':503,'multiline':False]
['text':' else cases that can be rounded to a 32-bit int fall through','line_number':507,'multiline':False]
['text':' to '1 <= q + exp <= 10'','line_number':508,'multiline':False]
['text':' if (q > 11), i.e. 12 <= q <= 34 and so -24 <= exp <= -2','line_number':509,'multiline':False]
['text':' 0.c(0)c(1)...c(q-1) * 10^11 >= 0x4fffffffb <=>','line_number':510,'multiline':False]
['text':' C >= 0x4fffffffb * 10^(q-11) where 1 <= q - 11 <= 23','line_number':511,'multiline':False]
['text':' (scale 2^31-1/2 up)','line_number':512,'multiline':False]
['text':' 1 <= q - 11 <= 19; 10^(q-11) requires 64 bits','line_number':514,'multiline':False]
['text':' 20 <= q - 11 <= 23, and 10^(q-11) requires 128 bits','line_number':516,'multiline':False]
['text':' set invalid flag','line_number':521,'multiline':False]
['text':' return Integer Indefinite','line_number':523,'multiline':False]
['text':' else cases that can be rounded to a 32-bit int fall through','line_number':527,'multiline':False]
['text':' to '1 <= q + exp <= 10'','line_number':528,'multiline':False]
['text':' n is not too large to be converted to int32: -2^31 - 1/2 < n < 2^31 - 1/2','line_number':532,'multiline':False]
['text':' Note: some of the cases tested for above fall through to this point','line_number':533,'multiline':False]
['text':' n = +/-0.0...c(0)c(1)...c(q-1)','line_number':534,'multiline':False]
['text':' set inexact flag','line_number':535,'multiline':False]
['text':' return 0','line_number':537,'multiline':False]
['text':' n = +/-0.c(0)c(1)...c(q-1)','line_number':540,'multiline':False]
['text':' if 0.c(0)c(1)...c(q-1) <= 0.5 <=> c(0)c(1)...c(q-1) <= 5 * 10^(q-1)','line_number':541,'multiline':False]
['text':'   res = 0','line_number':542,'multiline':False]
['text':' else','line_number':543,'multiline':False]
['text':'   res = +/-1','line_number':544,'multiline':False]
['text':' 0 <= ind <= 18','line_number':546,'multiline':False]
['text':' return 0','line_number':548,'multiline':False]
['text':' n < 0','line_number':549,'multiline':False]
['text':' return -1','line_number':550,'multiline':False]
['text':' n > 0','line_number':551,'multiline':False]
['text':' return +1','line_number':552,'multiline':False]
['text':' 19 <= ind <= 33','line_number':554,'multiline':False]
['text':' return 0','line_number':558,'multiline':False]
['text':' n < 0','line_number':559,'multiline':False]
['text':' return -1','line_number':560,'multiline':False]
['text':' n > 0','line_number':561,'multiline':False]
['text':' return +1','line_number':562,'multiline':False]
['text':' set inexact flag','line_number':565,'multiline':False]
['text':' if (1 <= q + exp <= 10, 1 <= q <= 34, -33 <= exp <= 9)','line_number':567,'multiline':False]
['text':' -2^31-1/2 <= x <= -1 or 1 <= x < 2^31-1/2 so x can be rounded','line_number':568,'multiline':False]
['text':' to nearest to a 32-bit signed integer','line_number':569,'multiline':False]
['text':' 2 <= q <= 34, -33 <= exp <= -1, 1 <= q + exp <= 10','line_number':570,'multiline':False]
['text':' 1 <= ind <= 33; ind is a synonym for 'x'','line_number':571,'multiline':False]
['text':' chop off ind digits from the lower part of C1','line_number':572,'multiline':False]
['text':' C1 = C1 + 1/2 * 10^ind where the result C1 fits in 127 bits','line_number':573,'multiline':False]
['text':' calculate C* and f*','line_number':583,'multiline':False]
['text':' C* is actually floor(C*) in this case','line_number':584,'multiline':False]
['text':' C* and f* need shifting and masking, as shown by','line_number':585,'multiline':False]
['text':' bid_shiftright128[] and bid_maskhigh128[]','line_number':586,'multiline':False]
['text':' 1 <= x <= 33','line_number':587,'multiline':False]
['text':' kx = 10^(-x) = bid_ten2mk128[ind - 1]','line_number':588,'multiline':False]
['text':' C* = (C1 + 1/2 * 10^x) * 10^(-x)','line_number':589,'multiline':False]
['text':' the approximation of 10^(-x) was rounded up to 118 bits','line_number':590,'multiline':False]
['text':' 0 <= ind - 1 <= 21','line_number':592,'multiline':False]
['text':' 22 <= ind - 1 <= 33','line_number':599,'multiline':False]
['text':' the top Ex bits of 10^(-x) are T* = bid_ten2mk128trunc[ind], e.g.','line_number':607,'multiline':False]
['text':' if x=1, T*=bid_ten2mk128trunc[0]=0x19999999999999999999999999999999','line_number':608,'multiline':False]
['text':' if (0 < f* < 10^(-x)) then the result is a midpoint','line_number':609,'multiline':False]
['text':'   if floor(C*) is even then C* = floor(C*) - logical right','line_number':610,'multiline':False]
['text':'       shift; C* has p decimal digits, correct by Prop. 1)','line_number':611,'multiline':False]
['text':'   else if floor(C*) is odd C* = floor(C*)-1 (logical right','line_number':612,'multiline':False]
['text':'       shift; C* has p decimal digits, correct by Pr. 1)','line_number':613,'multiline':False]
['text':' else','line_number':614,'multiline':False]
['text':'   C* = floor(C*) (logical right shift; C has p decimal digits,','line_number':615,'multiline':False]
['text':'       correct by Property 1)','line_number':616,'multiline':False]
['text':' n = C* * 10^(e+x)','line_number':617,'multiline':False]
['text':' shift right C* by Ex-128 = bid_shiftright128[ind]','line_number':619,'multiline':False]
['text':' 0 <= shift <= 102','line_number':620,'multiline':False]
['text':' 0 <= ind - 1 <= 21','line_number':621,'multiline':False]
['text':' redundant, it will be 0! Cstar.w[1] = (Cstar.w[1] >> shift);','line_number':624,'multiline':False]
['text':' 22 <= ind - 1 <= 33','line_number':625,'multiline':False]
['text':' 2 <= shift - 64 <= 38','line_number':626,'multiline':False]
['text':' determine inexactness of the rounding of C*','line_number':628,'multiline':False]
['text':' if (0 < f* - 1/2 < 10^(-x)) then','line_number':629,'multiline':False]
['text':'   the result is exact','line_number':630,'multiline':False]
['text':' else // if (f* - 1/2 > T*) then','line_number':631,'multiline':False]
['text':'   the result is inexact','line_number':632,'multiline':False]
['text':' f* > 1/2 and the result may be exact','line_number':634,'multiline':False]
['text':' f* - 1/2','line_number':635,'multiline':False]
['text':' set the inexact flag','line_number':639,'multiline':False]
['text':' else the result is exact','line_number':641,'multiline':False]
['text':' the result is inexact; f2* <= 1/2','line_number':642,'multiline':False]
['text':' set the inexact flag','line_number':643,'multiline':False]
['text':' if 3 <= ind <= 21','line_number':646,'multiline':False]
['text':' f2* > 1/2 and the result may be exact','line_number':651,'multiline':False]
['text':' Calculate f2* - 1/2','line_number':652,'multiline':False]
['text':' set the inexact flag','line_number':661,'multiline':False]
['text':' else the result is exact','line_number':663,'multiline':False]
['text':' the result is inexact; f2* <= 1/2','line_number':664,'multiline':False]
['text':' set the inexact flag','line_number':665,'multiline':False]
['text':' if 22 <= ind <= 33','line_number':668,'multiline':False]
['text':' f2* > 1/2 and the result may be exact','line_number':672,'multiline':False]
['text':' Calculate f2* - 1/2','line_number':673,'multiline':False]
['text':' set the inexact flag','line_number':679,'multiline':False]
['text':' else the result is exact','line_number':681,'multiline':False]
['text':' the result is inexact; f2* <= 1/2','line_number':682,'multiline':False]
['text':' set the inexact flag','line_number':683,'multiline':False]
['text':' if the result was a midpoint it was rounded away from zero, so','line_number':687,'multiline':False]
['text':' it will need a correction','line_number':688,'multiline':False]
['text':' check for midpoints','line_number':689,'multiline':False]
['text':' the result is a midpoint; round to nearest','line_number':695,'multiline':False]
['text':' Cstar.w[0] is odd; MP in [EVEN, ODD]','line_number':696,'multiline':False]
['text':' if floor(C*) is odd C = floor(C*) - 1; the result >= 1','line_number':697,'multiline':False]
['text':' Cstar.w[0] is now even','line_number':698,'multiline':False]
['text':' else MP in [ODD, EVEN]','line_number':699,'multiline':False]
['text':' 1 <= q <= 10','line_number':706,'multiline':False]
['text':' res = +/-C (exact)','line_number':707,'multiline':False]
['text':' if (exp > 0) => 1 <= exp <= 9, 1 <= q < 9, 2 <= q + exp <= 10','line_number':712,'multiline':False]
['text':' res = +/-C * 10^exp (exact)','line_number':713,'multiline':False]
['text':'****************************************************************************
 *  BID128_to_int32_floor
 ***************************************************************************','line_number':725,'multiline':True]
['text':' unbiased exponent','line_number':734,'multiline':False]
['text':' Note: C1.w[1], C1.w[0] represent x_signif_hi, x_signif_lo (all are BID_UINT64)','line_number':735,'multiline':False]
['text':' C* represents up to 34 decimal digits ~ 113 bits','line_number':741,'multiline':False]
['text':' unpack x','line_number':749,'multiline':False]
['text':' 0 for positive, MASK_SIGN for negative','line_number':750,'multiline':False]
['text':' biased and shifted left 49 bit positions','line_number':751,'multiline':False]
['text':' check for NaN or Infinity','line_number':755,'multiline':False]
['text':' x is special','line_number':757,'multiline':False]
['text':' x is NAN','line_number':758,'multiline':False]
['text':' x is SNAN','line_number':759,'multiline':False]
['text':' set invalid flag','line_number':760,'multiline':False]
['text':' return Integer Indefinite','line_number':762,'multiline':False]
['text':' x is QNaN','line_number':764,'multiline':False]
['text':' set invalid flag','line_number':765,'multiline':False]
['text':' return Integer Indefinite','line_number':767,'multiline':False]
['text':' x is not a NaN, so it must be infinity','line_number':771,'multiline':False]
['text':' x is +inf','line_number':772,'multiline':False]
['text':' set invalid flag','line_number':773,'multiline':False]
['text':' return Integer Indefinite','line_number':775,'multiline':False]
['text':' x is -inf','line_number':777,'multiline':False]
['text':' set invalid flag','line_number':778,'multiline':False]
['text':' return Integer Indefinite','line_number':780,'multiline':False]
['text':' check for non-canonical values (after the check for special values)','line_number':786,'multiline':False]
['text':' x is 0','line_number':794,'multiline':False]
['text':' x is not special and is not zero','line_number':797,'multiline':False]
['text':' q = nr. of decimal digits in x','line_number':799,'multiline':False]
['text':'  determine first the nr. of bits in x','line_number':800,'multiline':False]
['text':' x >= 2^53','line_number':802,'multiline':False]
['text':' split the 64-bit value in two 32-bit halves to avoid rounding errors','line_number':803,'multiline':False]
['text':' exact conversion','line_number':804,'multiline':False]
['text':' if x < 2^53','line_number':807,'multiline':False]
['text':' exact conversion','line_number':808,'multiline':False]
['text':' C1.w[1] != 0 => nr. bits = 64 + nr_bits (C1.w[1])','line_number':812,'multiline':False]
['text':' exact conversion','line_number':813,'multiline':False]
['text':' x >= 10^10 ~= 2^33.2... (cannot fit in 32 bits)','line_number':826,'multiline':False]
['text':' set invalid flag','line_number':827,'multiline':False]
['text':' return Integer Indefinite','line_number':829,'multiline':False]
['text':' x = c(0)c(1)...c(9).c(10)...c(q-1)','line_number':832,'multiline':False]
['text':' in this case 2^29.89... ~= 10^9 <= x < 10^10 ~= 2^33.2...','line_number':833,'multiline':False]
['text':' so x rounded to an integer may or may not fit in a signed 32-bit int','line_number':834,'multiline':False]
['text':' the cases that do not fit are identified here; the ones that fit','line_number':835,'multiline':False]
['text':' fall through and will be handled with other cases further,','line_number':836,'multiline':False]
['text':' under '1 <= q + exp <= 10'','line_number':837,'multiline':False]
['text':' if n < 0 and q + exp = 10','line_number':838,'multiline':False]
['text':' if n < -2^31 then n is too large','line_number':839,'multiline':False]
['text':' too large if c(0)c(1)...c(9).c(10)...c(q-1) > 2^31','line_number':840,'multiline':False]
['text':' <=> 0.c(0)c(1)...c(q-1) * 10^11 > 0x500000000, 1<=q<=34','line_number':841,'multiline':False]
['text':' C scaled up to 11-digit int','line_number':843,'multiline':False]
['text':' c(0)c(1)...c(9)c(10) or c(0)c(1)...c(q-1)0...0 (11 digits)','line_number':844,'multiline':False]
['text':' set invalid flag','line_number':846,'multiline':False]
['text':' return Integer Indefinite','line_number':848,'multiline':False]
['text':' else cases that can be rounded to a 32-bit int fall through','line_number':852,'multiline':False]
['text':' to '1 <= q + exp <= 10'','line_number':853,'multiline':False]
['text':' if (q > 11), i.e. 12 <= q <= 34 and so -24 <= exp <= -2','line_number':854,'multiline':False]
['text':' 0.c(0)c(1)...c(q-1) * 10^11 > 0x500000000 <=>','line_number':855,'multiline':False]
['text':' C > 0x500000000 * 10^(q-11) where 1 <= q - 11 <= 23','line_number':856,'multiline':False]
['text':' (scale 2^31 up)','line_number':857,'multiline':False]
['text':' 1 <= q - 11 <= 19; 10^(q-11) requires 64 bits','line_number':859,'multiline':False]
['text':' 20 <= q - 11 <= 23, and 10^(q-11) requires 128 bits','line_number':861,'multiline':False]
['text':' set invalid flag','line_number':865,'multiline':False]
['text':' return Integer Indefinite','line_number':867,'multiline':False]
['text':' else cases that can be rounded to a 32-bit int fall through','line_number':871,'multiline':False]
['text':' to '1 <= q + exp <= 10'','line_number':872,'multiline':False]
['text':' if n > 0 and q + exp = 10','line_number':874,'multiline':False]
['text':' if n >= 2^31 then n is too large','line_number':875,'multiline':False]
['text':' too large if c(0)c(1)...c(9).c(10)...c(q-1) >= 2^31','line_number':876,'multiline':False]
['text':' too large if 0.c(0)c(1)...c(q-1) * 10^11 >= 0x500000000, 1<=q<=34','line_number':877,'multiline':False]
['text':' C scaled up to 11-digit int','line_number':879,'multiline':False]
['text':' c(0)c(1)...c(9)c(10) or c(0)c(1)...c(q-1)0...0 (11 digits)','line_number':880,'multiline':False]
['text':' set invalid flag','line_number':882,'multiline':False]
['text':' return Integer Indefinite','line_number':884,'multiline':False]
['text':' else cases that can be rounded to a 32-bit int fall through','line_number':888,'multiline':False]
['text':' to '1 <= q + exp <= 10'','line_number':889,'multiline':False]
['text':' if (q > 11), i.e. 12 <= q <= 34 and so -24 <= exp <= -2','line_number':890,'multiline':False]
['text':' 0.c(0)c(1)...c(q-1) * 10^11 >= 0x500000000 <=>','line_number':891,'multiline':False]
['text':' C >= 0x500000000 * 10^(q-11) where 1 <= q - 11 <= 23','line_number':892,'multiline':False]
['text':' (scale 2^31 up)','line_number':893,'multiline':False]
['text':' 1 <= q - 11 <= 19; 10^(q-11) requires 64 bits','line_number':895,'multiline':False]
['text':' 20 <= q - 11 <= 23, and 10^(q-11) requires 128 bits','line_number':897,'multiline':False]
['text':' set invalid flag','line_number':902,'multiline':False]
['text':' return Integer Indefinite','line_number':904,'multiline':False]
['text':' else cases that can be rounded to a 32-bit int fall through','line_number':908,'multiline':False]
['text':' to '1 <= q + exp <= 10'','line_number':909,'multiline':False]
['text':' n is not too large to be converted to int32: -2^31 <= n < 2^31','line_number':913,'multiline':False]
['text':' Note: some of the cases tested for above fall through to this point','line_number':914,'multiline':False]
['text':' n = +/-0.0...c(0)c(1)...c(q-1) or n = +/-0.c(0)c(1)...c(q-1)','line_number':916,'multiline':False]
['text':' return 0','line_number':917,'multiline':False]
['text':' if (1 <= q + exp <= 10, 1 <= q <= 34, -33 <= exp <= 9)','line_number':923,'multiline':False]
['text':' -2^31 <= x <= -1 or 1 <= x < 2^31 so x can be rounded','line_number':924,'multiline':False]
['text':' toward negative infinity to a 32-bit signed integer','line_number':925,'multiline':False]
['text':' 2 <= q <= 34, -33 <= exp <= -1, 1 <= q + exp <= 10','line_number':926,'multiline':False]
['text':' 1 <= ind <= 33; ind is a synonym for 'x'','line_number':927,'multiline':False]
['text':' chop off ind digits from the lower part of C1','line_number':928,'multiline':False]
['text':' C1 = C1 + 1/2 * 10^ind where the result C1 fits in 127 bits','line_number':929,'multiline':False]
['text':' calculate C* and f*','line_number':939,'multiline':False]
['text':' C* is actually floor(C*) in this case','line_number':940,'multiline':False]
['text':' C* and f* need shifting and masking, as shown by','line_number':941,'multiline':False]
['text':' bid_shiftright128[] and bid_maskhigh128[]','line_number':942,'multiline':False]
['text':' 1 <= x <= 33','line_number':943,'multiline':False]
['text':' kx = 10^(-x) = bid_ten2mk128[ind - 1]','line_number':944,'multiline':False]
['text':' C* = (C1 + 1/2 * 10^x) * 10^(-x)','line_number':945,'multiline':False]
['text':' the approximation of 10^(-x) was rounded up to 118 bits','line_number':946,'multiline':False]
['text':' 0 <= ind - 1 <= 21','line_number':948,'multiline':False]
['text':' 22 <= ind - 1 <= 33','line_number':955,'multiline':False]
['text':' the top Ex bits of 10^(-x) are T* = bid_ten2mk128trunc[ind], e.g.','line_number':963,'multiline':False]
['text':' if x=1, T*=bid_ten2mk128trunc[0]=0x19999999999999999999999999999999','line_number':964,'multiline':False]
['text':' if (0 < f* < 10^(-x)) then the result is a midpoint','line_number':965,'multiline':False]
['text':'   if floor(C*) is even then C* = floor(C*) - logical right','line_number':966,'multiline':False]
['text':'       shift; C* has p decimal digits, correct by Prop. 1)','line_number':967,'multiline':False]
['text':'   else if floor(C*) is odd C* = floor(C*)-1 (logical right','line_number':968,'multiline':False]
['text':'       shift; C* has p decimal digits, correct by Pr. 1)','line_number':969,'multiline':False]
['text':' else','line_number':970,'multiline':False]
['text':'   C* = floor(C*) (logical right shift; C has p decimal digits,','line_number':971,'multiline':False]
['text':'       correct by Property 1)','line_number':972,'multiline':False]
['text':' n = C* * 10^(e+x)','line_number':973,'multiline':False]
['text':' shift right C* by Ex-128 = bid_shiftright128[ind]','line_number':975,'multiline':False]
['text':' 0 <= shift <= 102','line_number':976,'multiline':False]
['text':' 0 <= ind - 1 <= 21','line_number':977,'multiline':False]
['text':' redundant, it will be 0! Cstar.w[1] = (Cstar.w[1] >> shift);','line_number':980,'multiline':False]
['text':' 22 <= ind - 1 <= 33','line_number':981,'multiline':False]
['text':' 2 <= shift - 64 <= 38','line_number':982,'multiline':False]
['text':' determine inexactness of the rounding of C*','line_number':984,'multiline':False]
['text':' if (0 < f* - 1/2 < 10^(-x)) then','line_number':985,'multiline':False]
['text':'   the result is exact','line_number':986,'multiline':False]
['text':' else // if (f* - 1/2 > T*) then','line_number':987,'multiline':False]
['text':'   the result is inexact','line_number':988,'multiline':False]
['text':' f* > 1/2 and the result may be exact','line_number':990,'multiline':False]
['text':' f* - 1/2','line_number':991,'multiline':False]
['text':' else the result is exact','line_number':996,'multiline':False]
['text':' the result is inexact; f2* <= 1/2','line_number':997,'multiline':False]
['text':' if 3 <= ind <= 21','line_number':1000,'multiline':False]
['text':' f2* > 1/2 and the result may be exact','line_number':1005,'multiline':False]
['text':' Calculate f2* - 1/2','line_number':1006,'multiline':False]
['text':' else the result is exact','line_number':1016,'multiline':False]
['text':' the result is inexact; f2* <= 1/2','line_number':1017,'multiline':False]
['text':' if 22 <= ind <= 33','line_number':1020,'multiline':False]
['text':' f2* > 1/2 and the result may be exact','line_number':1024,'multiline':False]
['text':' Calculate f2* - 1/2','line_number':1025,'multiline':False]
['text':' else the result is exact','line_number':1032,'multiline':False]
['text':' the result is inexact; f2* <= 1/2','line_number':1033,'multiline':False]
['text':' if the result was a midpoint it was rounded away from zero, so','line_number':1038,'multiline':False]
['text':' it will need a correction','line_number':1039,'multiline':False]
['text':' check for midpoints','line_number':1040,'multiline':False]
['text':' the result is a midpoint; round to nearest','line_number':1046,'multiline':False]
['text':' Cstar.w[0] is odd; MP in [EVEN, ODD]','line_number':1047,'multiline':False]
['text':' if floor(C*) is odd C = floor(C*) - 1; the result >= 1','line_number':1048,'multiline':False]
['text':' Cstar.w[0] is now even','line_number':1049,'multiline':False]
['text':' else MP in [ODD, EVEN]','line_number':1053,'multiline':False]
['text':' general correction for RM','line_number':1059,'multiline':False]
['text':' the result is already correct','line_number':1066,'multiline':False]
['text':' 1 <= q <= 10','line_number':1073,'multiline':False]
['text':' res = +/-C (exact)','line_number':1074,'multiline':False]
['text':' if (exp > 0) => 1 <= exp <= 9, 1 <= q < 9, 2 <= q + exp <= 10','line_number':1079,'multiline':False]
['text':' res = +/-C * 10^exp (exact)','line_number':1080,'multiline':False]
['text':'****************************************************************************
 *  BID128_to_int32_xfloor
 ***************************************************************************','line_number':1093,'multiline':True]
['text':' unbiased exponent','line_number':1103,'multiline':False]
['text':' Note: C1.w[1], C1.w[0] represent x_signif_hi, x_signif_lo (all are BID_UINT64)','line_number':1104,'multiline':False]
['text':' C* represents up to 34 decimal digits ~ 113 bits','line_number':1110,'multiline':False]
['text':' unpack x','line_number':1118,'multiline':False]
['text':' 0 for positive, MASK_SIGN for negative','line_number':1119,'multiline':False]
['text':' biased and shifted left 49 bit positions','line_number':1120,'multiline':False]
['text':' check for NaN or Infinity','line_number':1124,'multiline':False]
['text':' x is special','line_number':1126,'multiline':False]
['text':' x is NAN','line_number':1127,'multiline':False]
['text':' x is SNAN','line_number':1128,'multiline':False]
['text':' set invalid flag','line_number':1129,'multiline':False]
['text':' return Integer Indefinite','line_number':1131,'multiline':False]
['text':' x is QNaN','line_number':1133,'multiline':False]
['text':' set invalid flag','line_number':1134,'multiline':False]
['text':' return Integer Indefinite','line_number':1136,'multiline':False]
['text':' x is not a NaN, so it must be infinity','line_number':1140,'multiline':False]
['text':' x is +inf','line_number':1141,'multiline':False]
['text':' set invalid flag','line_number':1142,'multiline':False]
['text':' return Integer Indefinite','line_number':1144,'multiline':False]
['text':' x is -inf','line_number':1146,'multiline':False]
['text':' set invalid flag','line_number':1147,'multiline':False]
['text':' return Integer Indefinite','line_number':1149,'multiline':False]
['text':' check for non-canonical values (after the check for special values)','line_number':1155,'multiline':False]
['text':' x is 0','line_number':1163,'multiline':False]
['text':' x is not special and is not zero','line_number':1166,'multiline':False]
['text':' q = nr. of decimal digits in x','line_number':1168,'multiline':False]
['text':'  determine first the nr. of bits in x','line_number':1169,'multiline':False]
['text':' x >= 2^53','line_number':1171,'multiline':False]
['text':' split the 64-bit value in two 32-bit halves to avoid rounding errors','line_number':1172,'multiline':False]
['text':' exact conversion','line_number':1173,'multiline':False]
['text':' if x < 2^53','line_number':1176,'multiline':False]
['text':' exact conversion','line_number':1177,'multiline':False]
['text':' C1.w[1] != 0 => nr. bits = 64 + nr_bits (C1.w[1])','line_number':1181,'multiline':False]
['text':' exact conversion','line_number':1182,'multiline':False]
['text':' x >= 10^10 ~= 2^33.2... (cannot fit in 32 bits)','line_number':1195,'multiline':False]
['text':' set invalid flag','line_number':1196,'multiline':False]
['text':' return Integer Indefinite','line_number':1198,'multiline':False]
['text':' x = c(0)c(1)...c(9).c(10)...c(q-1)','line_number':1201,'multiline':False]
['text':' in this case 2^29.89... ~= 10^9 <= x < 10^10 ~= 2^33.2...','line_number':1202,'multiline':False]
['text':' so x rounded to an integer may or may not fit in a signed 32-bit int','line_number':1203,'multiline':False]
['text':' the cases that do not fit are identified here; the ones that fit','line_number':1204,'multiline':False]
['text':' fall through and will be handled with other cases further,','line_number':1205,'multiline':False]
['text':' under '1 <= q + exp <= 10'','line_number':1206,'multiline':False]
['text':' if n < 0 and q + exp = 10','line_number':1207,'multiline':False]
['text':' if n < -2^31 then n is too large','line_number':1208,'multiline':False]
['text':' too large if c(0)c(1)...c(9).c(10)...c(q-1) > 2^31','line_number':1209,'multiline':False]
['text':' <=> 0.c(0)c(1)...c(q-1) * 10^11 > 0x500000000, 1<=q<=34','line_number':1210,'multiline':False]
['text':' C scaled up to 11-digit int','line_number':1212,'multiline':False]
['text':' c(0)c(1)...c(9)c(10) or c(0)c(1)...c(q-1)0...0 (11 digits)','line_number':1213,'multiline':False]
['text':' set invalid flag','line_number':1215,'multiline':False]
['text':' return Integer Indefinite','line_number':1217,'multiline':False]
['text':' else cases that can be rounded to a 32-bit int fall through','line_number':1221,'multiline':False]
['text':' to '1 <= q + exp <= 10'','line_number':1222,'multiline':False]
['text':' if (q > 11), i.e. 12 <= q <= 34 and so -24 <= exp <= -2','line_number':1223,'multiline':False]
['text':' 0.c(0)c(1)...c(q-1) * 10^11 > 0x500000000 <=>','line_number':1224,'multiline':False]
['text':' C > 0x500000000 * 10^(q-11) where 1 <= q - 11 <= 23','line_number':1225,'multiline':False]
['text':' (scale 2^31 up)','line_number':1226,'multiline':False]
['text':' 1 <= q - 11 <= 19; 10^(q-11) requires 64 bits','line_number':1228,'multiline':False]
['text':' 20 <= q - 11 <= 23, and 10^(q-11) requires 128 bits','line_number':1230,'multiline':False]
['text':' set invalid flag','line_number':1234,'multiline':False]
['text':' return Integer Indefinite','line_number':1236,'multiline':False]
['text':' else cases that can be rounded to a 32-bit int fall through','line_number':1240,'multiline':False]
['text':' to '1 <= q + exp <= 10'','line_number':1241,'multiline':False]
['text':' if n > 0 and q + exp = 10','line_number':1243,'multiline':False]
['text':' if n >= 2^31 then n is too large','line_number':1244,'multiline':False]
['text':' too large if c(0)c(1)...c(9).c(10)...c(q-1) >= 2^31','line_number':1245,'multiline':False]
['text':' too large if 0.c(0)c(1)...c(q-1) * 10^11 >= 0x500000000, 1<=q<=34','line_number':1246,'multiline':False]
['text':' C scaled up to 11-digit int','line_number':1248,'multiline':False]
['text':' c(0)c(1)...c(9)c(10) or c(0)c(1)...c(q-1)0...0 (11 digits)','line_number':1249,'multiline':False]
['text':' set invalid flag','line_number':1251,'multiline':False]
['text':' return Integer Indefinite','line_number':1253,'multiline':False]
['text':' else cases that can be rounded to a 32-bit int fall through','line_number':1257,'multiline':False]
['text':' to '1 <= q + exp <= 10'','line_number':1258,'multiline':False]
['text':' if (q > 11), i.e. 12 <= q <= 34 and so -24 <= exp <= -2','line_number':1259,'multiline':False]
['text':' 0.c(0)c(1)...c(q-1) * 10^11 >= 0x500000000 <=>','line_number':1260,'multiline':False]
['text':' C >= 0x500000000 * 10^(q-11) where 1 <= q - 11 <= 23','line_number':1261,'multiline':False]
['text':' (scale 2^31 up)','line_number':1262,'multiline':False]
['text':' 1 <= q - 11 <= 19; 10^(q-11) requires 64 bits','line_number':1264,'multiline':False]
['text':' 20 <= q - 11 <= 23, and 10^(q-11) requires 128 bits','line_number':1266,'multiline':False]
['text':' set invalid flag','line_number':1271,'multiline':False]
['text':' return Integer Indefinite','line_number':1273,'multiline':False]
['text':' else cases that can be rounded to a 32-bit int fall through','line_number':1277,'multiline':False]
['text':' to '1 <= q + exp <= 10'','line_number':1278,'multiline':False]
['text':' n is not too large to be converted to int32: -2^31 <= n < 2^31','line_number':1282,'multiline':False]
['text':' Note: some of the cases tested for above fall through to this point','line_number':1283,'multiline':False]
['text':' n = +/-0.0...c(0)c(1)...c(q-1) or n = +/-0.c(0)c(1)...c(q-1)','line_number':1285,'multiline':False]
['text':' set inexact flag','line_number':1286,'multiline':False]
['text':' return 0','line_number':1288,'multiline':False]
['text':' if (1 <= q + exp <= 10, 1 <= q <= 34, -33 <= exp <= 9)','line_number':1294,'multiline':False]
['text':' -2^31 <= x <= -1 or 1 <= x < 2^31 so x can be rounded','line_number':1295,'multiline':False]
['text':' toward negative infinity to a 32-bit signed integer','line_number':1296,'multiline':False]
['text':' 2 <= q <= 34, -33 <= exp <= -1, 1 <= q + exp <= 10','line_number':1297,'multiline':False]
['text':' 1 <= ind <= 33; ind is a synonym for 'x'','line_number':1298,'multiline':False]
['text':' chop off ind digits from the lower part of C1','line_number':1299,'multiline':False]
['text':' C1 = C1 + 1/2 * 10^ind where the result C1 fits in 127 bits','line_number':1300,'multiline':False]
['text':' calculate C* and f*','line_number':1310,'multiline':False]
['text':' C* is actually floor(C*) in this case','line_number':1311,'multiline':False]
['text':' C* and f* need shifting and masking, as shown by','line_number':1312,'multiline':False]
['text':' bid_shiftright128[] and bid_maskhigh128[]','line_number':1313,'multiline':False]
['text':' 1 <= x <= 33','line_number':1314,'multiline':False]
['text':' kx = 10^(-x) = bid_ten2mk128[ind - 1]','line_number':1315,'multiline':False]
['text':' C* = (C1 + 1/2 * 10^x) * 10^(-x)','line_number':1316,'multiline':False]
['text':' the approximation of 10^(-x) was rounded up to 118 bits','line_number':1317,'multiline':False]
['text':' 0 <= ind - 1 <= 21','line_number':1319,'multiline':False]
['text':' 22 <= ind - 1 <= 33','line_number':1326,'multiline':False]
['text':' the top Ex bits of 10^(-x) are T* = bid_ten2mk128trunc[ind], e.g.','line_number':1334,'multiline':False]
['text':' if x=1, T*=bid_ten2mk128trunc[0]=0x19999999999999999999999999999999','line_number':1335,'multiline':False]
['text':' if (0 < f* < 10^(-x)) then the result is a midpoint','line_number':1336,'multiline':False]
['text':'   if floor(C*) is even then C* = floor(C*) - logical right','line_number':1337,'multiline':False]
['text':'       shift; C* has p decimal digits, correct by Prop. 1)','line_number':1338,'multiline':False]
['text':'   else if floor(C*) is odd C* = floor(C*)-1 (logical right','line_number':1339,'multiline':False]
['text':'       shift; C* has p decimal digits, correct by Pr. 1)','line_number':1340,'multiline':False]
['text':' else','line_number':1341,'multiline':False]
['text':'   C* = floor(C*) (logical right shift; C has p decimal digits,','line_number':1342,'multiline':False]
['text':'       correct by Property 1)','line_number':1343,'multiline':False]
['text':' n = C* * 10^(e+x)','line_number':1344,'multiline':False]
['text':' shift right C* by Ex-128 = bid_shiftright128[ind]','line_number':1346,'multiline':False]
['text':' 0 <= shift <= 102','line_number':1347,'multiline':False]
['text':' 0 <= ind - 1 <= 21','line_number':1348,'multiline':False]
['text':' redundant, it will be 0! Cstar.w[1] = (Cstar.w[1] >> shift);','line_number':1351,'multiline':False]
['text':' 22 <= ind - 1 <= 33','line_number':1352,'multiline':False]
['text':' 2 <= shift - 64 <= 38','line_number':1353,'multiline':False]
['text':' determine inexactness of the rounding of C*','line_number':1355,'multiline':False]
['text':' if (0 < f* - 1/2 < 10^(-x)) then','line_number':1356,'multiline':False]
['text':'   the result is exact','line_number':1357,'multiline':False]
['text':' else // if (f* - 1/2 > T*) then','line_number':1358,'multiline':False]
['text':'   the result is inexact','line_number':1359,'multiline':False]
['text':' f* > 1/2 and the result may be exact','line_number':1361,'multiline':False]
['text':' f* - 1/2','line_number':1362,'multiline':False]
['text':' set the inexact flag','line_number':1366,'multiline':False]
['text':' else the result is exact','line_number':1369,'multiline':False]
['text':' the result is inexact; f2* <= 1/2','line_number':1370,'multiline':False]
['text':' set the inexact flag','line_number':1371,'multiline':False]
['text':' if 3 <= ind <= 21','line_number':1375,'multiline':False]
['text':' f2* > 1/2 and the result may be exact','line_number':1380,'multiline':False]
['text':' Calculate f2* - 1/2','line_number':1381,'multiline':False]
['text':' set the inexact flag','line_number':1390,'multiline':False]
['text':' else the result is exact','line_number':1393,'multiline':False]
['text':' the result is inexact; f2* <= 1/2','line_number':1394,'multiline':False]
['text':' set the inexact flag','line_number':1395,'multiline':False]
['text':' if 22 <= ind <= 33','line_number':1399,'multiline':False]
['text':' f2* > 1/2 and the result may be exact','line_number':1403,'multiline':False]
['text':' Calculate f2* - 1/2','line_number':1404,'multiline':False]
['text':' set the inexact flag','line_number':1410,'multiline':False]
['text':' else the result is exact','line_number':1413,'multiline':False]
['text':' the result is inexact; f2* <= 1/2','line_number':1414,'multiline':False]
['text':' set the inexact flag','line_number':1415,'multiline':False]
['text':' if the result was a midpoint it was rounded away from zero, so','line_number':1421,'multiline':False]
['text':' it will need a correction','line_number':1422,'multiline':False]
['text':' check for midpoints','line_number':1423,'multiline':False]
['text':' the result is a midpoint; round to nearest','line_number':1429,'multiline':False]
['text':' Cstar.w[0] is odd; MP in [EVEN, ODD]','line_number':1430,'multiline':False]
['text':' if floor(C*) is odd C = floor(C*) - 1; the result >= 1','line_number':1431,'multiline':False]
['text':' Cstar.w[0] is now even','line_number':1432,'multiline':False]
['text':' else MP in [ODD, EVEN]','line_number':1436,'multiline':False]
['text':' general correction for RM','line_number':1442,'multiline':False]
['text':' the result is already correct','line_number':1449,'multiline':False]
['text':' 1 <= q <= 10','line_number':1456,'multiline':False]
['text':' res = +/-C (exact)','line_number':1457,'multiline':False]
['text':' if (exp > 0) => 1 <= exp <= 9, 1 <= q < 9, 2 <= q + exp <= 10','line_number':1462,'multiline':False]
['text':' res = +/-C * 10^exp (exact)','line_number':1463,'multiline':False]
['text':'****************************************************************************
 *  BID128_to_int32_ceil
 ***************************************************************************','line_number':1475,'multiline':True]
['text':' unbiased exponent','line_number':1484,'multiline':False]
['text':' Note: C1.w[1], C1.w[0] represent x_signif_hi, x_signif_lo (all are BID_UINT64)','line_number':1485,'multiline':False]
['text':' C* represents up to 34 decimal digits ~ 113 bits','line_number':1491,'multiline':False]
['text':' unpack x','line_number':1499,'multiline':False]
['text':' 0 for positive, MASK_SIGN for negative','line_number':1500,'multiline':False]
['text':' biased and shifted left 49 bit positions','line_number':1501,'multiline':False]
['text':' check for NaN or Infinity','line_number':1505,'multiline':False]
['text':' x is special','line_number':1507,'multiline':False]
['text':' x is NAN','line_number':1508,'multiline':False]
['text':' x is SNAN','line_number':1509,'multiline':False]
['text':' set invalid flag','line_number':1510,'multiline':False]
['text':' return Integer Indefinite','line_number':1512,'multiline':False]
['text':' x is QNaN','line_number':1514,'multiline':False]
['text':' set invalid flag','line_number':1515,'multiline':False]
['text':' return Integer Indefinite','line_number':1517,'multiline':False]
['text':' x is not a NaN, so it must be infinity','line_number':1521,'multiline':False]
['text':' x is +inf','line_number':1522,'multiline':False]
['text':' set invalid flag','line_number':1523,'multiline':False]
['text':' return Integer Indefinite','line_number':1525,'multiline':False]
['text':' x is -inf','line_number':1527,'multiline':False]
['text':' set invalid flag','line_number':1528,'multiline':False]
['text':' return Integer Indefinite','line_number':1530,'multiline':False]
['text':' check for non-canonical values (after the check for special values)','line_number':1536,'multiline':False]
['text':' x is 0','line_number':1544,'multiline':False]
['text':' x is not special and is not zero','line_number':1547,'multiline':False]
['text':' q = nr. of decimal digits in x','line_number':1549,'multiline':False]
['text':'  determine first the nr. of bits in x','line_number':1550,'multiline':False]
['text':' x >= 2^53','line_number':1552,'multiline':False]
['text':' split the 64-bit value in two 32-bit halves to avoid rounding errors','line_number':1553,'multiline':False]
['text':' exact conversion','line_number':1554,'multiline':False]
['text':' if x < 2^53','line_number':1557,'multiline':False]
['text':' exact conversion','line_number':1558,'multiline':False]
['text':' C1.w[1] != 0 => nr. bits = 64 + nr_bits (C1.w[1])','line_number':1562,'multiline':False]
['text':' exact conversion','line_number':1563,'multiline':False]
['text':' x >= 10^10 ~= 2^33.2... (cannot fit in 32 bits)','line_number':1576,'multiline':False]
['text':' set invalid flag','line_number':1577,'multiline':False]
['text':' return Integer Indefinite','line_number':1579,'multiline':False]
['text':' x = c(0)c(1)...c(9).c(10)...c(q-1)','line_number':1582,'multiline':False]
['text':' in this case 2^29.89... ~= 10^9 <= x < 10^10 ~= 2^33.2...','line_number':1583,'multiline':False]
['text':' so x rounded to an integer may or may not fit in a signed 32-bit int','line_number':1584,'multiline':False]
['text':' the cases that do not fit are identified here; the ones that fit','line_number':1585,'multiline':False]
['text':' fall through and will be handled with other cases further,','line_number':1586,'multiline':False]
['text':' under '1 <= q + exp <= 10'','line_number':1587,'multiline':False]
['text':' if n < 0 and q + exp = 10','line_number':1588,'multiline':False]
['text':' if n <= -2^31-1 then n is too large','line_number':1589,'multiline':False]
['text':' too large if c(0)c(1)...c(9).c(10)...c(q-1) >= 2^31+1','line_number':1590,'multiline':False]
['text':' <=> 0.c(0)c(1)...c(q-1) * 10^11 >= 0x50000000a, 1<=q<=34','line_number':1591,'multiline':False]
['text':' C scaled up to 11-digit int','line_number':1593,'multiline':False]
['text':' c(0)c(1)...c(9)c(10) or c(0)c(1)...c(q-1)0...0 (11 digits)','line_number':1594,'multiline':False]
['text':' set invalid flag','line_number':1596,'multiline':False]
['text':' return Integer Indefinite','line_number':1598,'multiline':False]
['text':' else cases that can be rounded to a 32-bit int fall through','line_number':1602,'multiline':False]
['text':' to '1 <= q + exp <= 10'','line_number':1603,'multiline':False]
['text':' if (q > 11), i.e. 12 <= q <= 34 and so -24 <= exp <= -2','line_number':1604,'multiline':False]
['text':' 0.c(0)c(1)...c(q-1) * 10^11 >= 0x50000000a <=>','line_number':1605,'multiline':False]
['text':' C >= 0x50000000a * 10^(q-11) where 1 <= q - 11 <= 23','line_number':1606,'multiline':False]
['text':' (scale 2^31+1 up)','line_number':1607,'multiline':False]
['text':' 1 <= q - 11 <= 19; 10^(q-11) requires 64 bits','line_number':1609,'multiline':False]
['text':' 20 <= q - 11 <= 23, and 10^(q-11) requires 128 bits','line_number':1611,'multiline':False]
['text':' set invalid flag','line_number':1616,'multiline':False]
['text':' return Integer Indefinite','line_number':1618,'multiline':False]
['text':' else cases that can be rounded to a 32-bit int fall through','line_number':1622,'multiline':False]
['text':' to '1 <= q + exp <= 10'','line_number':1623,'multiline':False]
['text':' if n > 0 and q + exp = 10','line_number':1625,'multiline':False]
['text':' if n > 2^31 - 1 then n is too large','line_number':1626,'multiline':False]
['text':' too large if c(0)c(1)...c(9).c(10)...c(q-1) > 2^31 - 1','line_number':1627,'multiline':False]
['text':' too large if 0.c(0)c(1)...c(q-1) * 10^11 > 0x4fffffff6, 1<=q<=34','line_number':1628,'multiline':False]
['text':' C scaled up to 11-digit int','line_number':1630,'multiline':False]
['text':' c(0)c(1)...c(9)c(10) or c(0)c(1)...c(q-1)0...0 (11 digits)','line_number':1631,'multiline':False]
['text':' set invalid flag','line_number':1633,'multiline':False]
['text':' return Integer Indefinite','line_number':1635,'multiline':False]
['text':' else cases that can be rounded to a 32-bit int fall through','line_number':1639,'multiline':False]
['text':' to '1 <= q + exp <= 10'','line_number':1640,'multiline':False]
['text':' if (q > 11), i.e. 12 <= q <= 34 and so -24 <= exp <= -2','line_number':1641,'multiline':False]
['text':' 0.c(0)c(1)...c(q-1) * 10^11 > 0x4fffffff6 <=>','line_number':1642,'multiline':False]
['text':' C > 0x4fffffff6 * 10^(q-11) where 1 <= q - 11 <= 23','line_number':1643,'multiline':False]
['text':' (scale 2^31 up)','line_number':1644,'multiline':False]
['text':' 1 <= q - 11 <= 19; 10^(q-11) requires 64 bits','line_number':1646,'multiline':False]
['text':' 20 <= q - 11 <= 23, and 10^(q-11) requires 128 bits','line_number':1648,'multiline':False]
['text':' set invalid flag','line_number':1652,'multiline':False]
['text':' return Integer Indefinite','line_number':1654,'multiline':False]
['text':' else cases that can be rounded to a 32-bit int fall through','line_number':1658,'multiline':False]
['text':' to '1 <= q + exp <= 10'','line_number':1659,'multiline':False]
['text':' n is not too large to be converted to int32: -2^31-1 < n <= 2^31-1','line_number':1663,'multiline':False]
['text':' Note: some of the cases tested for above fall through to this point','line_number':1664,'multiline':False]
['text':' n = +/-0.0...c(0)c(1)...c(q-1) or n = +/-0.c(0)c(1)...c(q-1)','line_number':1666,'multiline':False]
['text':' return 0','line_number':1667,'multiline':False]
['text':' if (1 <= q + exp <= 10, 1 <= q <= 34, -33 <= exp <= 9)','line_number':1673,'multiline':False]
['text':' -2^31-1 < x <= -1 or 1 <= x <= 2^31-1 so x can be rounded','line_number':1674,'multiline':False]
['text':' toward positive infinity to a 32-bit signed integer','line_number':1675,'multiline':False]
['text':' 2 <= q <= 34, -33 <= exp <= -1, 1 <= q + exp <= 10','line_number':1676,'multiline':False]
['text':' 1 <= ind <= 33; ind is a synonym for 'x'','line_number':1677,'multiline':False]
['text':' chop off ind digits from the lower part of C1','line_number':1678,'multiline':False]
['text':' C1 = C1 + 1/2 * 10^ind where the result C1 fits in 127 bits','line_number':1679,'multiline':False]
['text':' calculate C* and f*','line_number':1689,'multiline':False]
['text':' C* is actually floor(C*) in this case','line_number':1690,'multiline':False]
['text':' C* and f* need shifting and masking, as shown by','line_number':1691,'multiline':False]
['text':' bid_shiftright128[] and bid_maskhigh128[]','line_number':1692,'multiline':False]
['text':' 1 <= x <= 33','line_number':1693,'multiline':False]
['text':' kx = 10^(-x) = bid_ten2mk128[ind - 1]','line_number':1694,'multiline':False]
['text':' C* = (C1 + 1/2 * 10^x) * 10^(-x)','line_number':1695,'multiline':False]
['text':' the approximation of 10^(-x) was rounded up to 118 bits','line_number':1696,'multiline':False]
['text':' 0 <= ind - 1 <= 21','line_number':1698,'multiline':False]
['text':' 22 <= ind - 1 <= 33','line_number':1705,'multiline':False]
['text':' the top Ex bits of 10^(-x) are T* = bid_ten2mk128trunc[ind], e.g.','line_number':1713,'multiline':False]
['text':' if x=1, T*=bid_ten2mk128trunc[0]=0x19999999999999999999999999999999','line_number':1714,'multiline':False]
['text':' if (0 < f* < 10^(-x)) then the result is a midpoint','line_number':1715,'multiline':False]
['text':'   if floor(C*) is even then C* = floor(C*) - logical right','line_number':1716,'multiline':False]
['text':'       shift; C* has p decimal digits, correct by Prop. 1)','line_number':1717,'multiline':False]
['text':'   else if floor(C*) is odd C* = floor(C*)-1 (logical right','line_number':1718,'multiline':False]
['text':'       shift; C* has p decimal digits, correct by Pr. 1)','line_number':1719,'multiline':False]
['text':' else','line_number':1720,'multiline':False]
['text':'   C* = floor(C*) (logical right shift; C has p decimal digits,','line_number':1721,'multiline':False]
['text':'       correct by Property 1)','line_number':1722,'multiline':False]
['text':' n = C* * 10^(e+x)','line_number':1723,'multiline':False]
['text':' shift right C* by Ex-128 = bid_shiftright128[ind]','line_number':1725,'multiline':False]
['text':' 0 <= shift <= 102','line_number':1726,'multiline':False]
['text':' 0 <= ind - 1 <= 21','line_number':1727,'multiline':False]
['text':' redundant, it will be 0! Cstar.w[1] = (Cstar.w[1] >> shift);','line_number':1730,'multiline':False]
['text':' 22 <= ind - 1 <= 33','line_number':1731,'multiline':False]
['text':' 2 <= shift - 64 <= 38','line_number':1732,'multiline':False]
['text':' determine inexactness of the rounding of C*','line_number':1734,'multiline':False]
['text':' if (0 < f* - 1/2 < 10^(-x)) then','line_number':1735,'multiline':False]
['text':'   the result is exact','line_number':1736,'multiline':False]
['text':' else // if (f* - 1/2 > T*) then','line_number':1737,'multiline':False]
['text':'   the result is inexact','line_number':1738,'multiline':False]
['text':' f* > 1/2 and the result may be exact','line_number':1740,'multiline':False]
['text':' f* - 1/2','line_number':1741,'multiline':False]
['text':' else the result is exact','line_number':1746,'multiline':False]
['text':' the result is inexact; f2* <= 1/2','line_number':1747,'multiline':False]
['text':' if 3 <= ind <= 21','line_number':1750,'multiline':False]
['text':' f2* > 1/2 and the result may be exact','line_number':1755,'multiline':False]
['text':' Calculate f2* - 1/2','line_number':1756,'multiline':False]
['text':' else the result is exact','line_number':1766,'multiline':False]
['text':' the result is inexact; f2* <= 1/2','line_number':1767,'multiline':False]
['text':' if 22 <= ind <= 33','line_number':1770,'multiline':False]
['text':' f2* > 1/2 and the result may be exact','line_number':1774,'multiline':False]
['text':' Calculate f2* - 1/2','line_number':1775,'multiline':False]
['text':' else the result is exact','line_number':1782,'multiline':False]
['text':' the result is inexact; f2* <= 1/2','line_number':1783,'multiline':False]
['text':' if the result was a midpoint it was rounded away from zero, so','line_number':1788,'multiline':False]
['text':' it will need a correction','line_number':1789,'multiline':False]
['text':' check for midpoints','line_number':1790,'multiline':False]
['text':' the result is a midpoint; round to nearest','line_number':1796,'multiline':False]
['text':' Cstar.w[0] is odd; MP in [EVEN, ODD]','line_number':1797,'multiline':False]
['text':' if floor(C*) is odd C = floor(C*) - 1; the result >= 1','line_number':1798,'multiline':False]
['text':' Cstar.w[0] is now even','line_number':1799,'multiline':False]
['text':' else MP in [ODD, EVEN]','line_number':1803,'multiline':False]
['text':' general correction for RM','line_number':1809,'multiline':False]
['text':' the result is already correct','line_number':1816,'multiline':False]
['text':' 1 <= q <= 10','line_number':1823,'multiline':False]
['text':' res = +/-C (exact)','line_number':1824,'multiline':False]
['text':' if (exp > 0) => 1 <= exp <= 9, 1 <= q < 9, 2 <= q + exp <= 10','line_number':1829,'multiline':False]
['text':' res = +/-C * 10^exp (exact)','line_number':1830,'multiline':False]
['text':'****************************************************************************
 *  BID128_to_int32_xceil
 ***************************************************************************','line_number':1842,'multiline':True]
['text':' unbiased exponent','line_number':1851,'multiline':False]
['text':' Note: C1.w[1], C1.w[0] represent x_signif_hi, x_signif_lo (all are BID_UINT64)','line_number':1852,'multiline':False]
['text':' C* represents up to 34 decimal digits ~ 113 bits','line_number':1858,'multiline':False]
['text':' unpack x','line_number':1866,'multiline':False]
['text':' 0 for positive, MASK_SIGN for negative','line_number':1867,'multiline':False]
['text':' biased and shifted left 49 bit positions','line_number':1868,'multiline':False]
['text':' check for NaN or Infinity','line_number':1872,'multiline':False]
['text':' x is special','line_number':1874,'multiline':False]
['text':' x is NAN','line_number':1875,'multiline':False]
['text':' x is SNAN','line_number':1876,'multiline':False]
['text':' set invalid flag','line_number':1877,'multiline':False]
['text':' return Integer Indefinite','line_number':1879,'multiline':False]
['text':' x is QNaN','line_number':1881,'multiline':False]
['text':' set invalid flag','line_number':1882,'multiline':False]
['text':' return Integer Indefinite','line_number':1884,'multiline':False]
['text':' x is not a NaN, so it must be infinity','line_number':1888,'multiline':False]
['text':' x is +inf','line_number':1889,'multiline':False]
['text':' set invalid flag','line_number':1890,'multiline':False]
['text':' return Integer Indefinite','line_number':1892,'multiline':False]
['text':' x is -inf','line_number':1894,'multiline':False]
['text':' set invalid flag','line_number':1895,'multiline':False]
['text':' return Integer Indefinite','line_number':1897,'multiline':False]
['text':' check for non-canonical values (after the check for special values)','line_number':1903,'multiline':False]
['text':' x is 0','line_number':1911,'multiline':False]
['text':' x is not special and is not zero','line_number':1914,'multiline':False]
['text':' q = nr. of decimal digits in x','line_number':1916,'multiline':False]
['text':'  determine first the nr. of bits in x','line_number':1917,'multiline':False]
['text':' x >= 2^53','line_number':1919,'multiline':False]
['text':' split the 64-bit value in two 32-bit halves to avoid rounding errors','line_number':1920,'multiline':False]
['text':' exact conversion','line_number':1921,'multiline':False]
['text':' if x < 2^53','line_number':1924,'multiline':False]
['text':' exact conversion','line_number':1925,'multiline':False]
['text':' C1.w[1] != 0 => nr. bits = 64 + nr_bits (C1.w[1])','line_number':1929,'multiline':False]
['text':' exact conversion','line_number':1930,'multiline':False]
['text':' x >= 10^10 ~= 2^33.2... (cannot fit in 32 bits)','line_number':1943,'multiline':False]
['text':' set invalid flag','line_number':1944,'multiline':False]
['text':' return Integer Indefinite','line_number':1946,'multiline':False]
['text':' x = c(0)c(1)...c(9).c(10)...c(q-1)','line_number':1949,'multiline':False]
['text':' in this case 2^29.89... ~= 10^9 <= x < 10^10 ~= 2^33.2...','line_number':1950,'multiline':False]
['text':' so x rounded to an integer may or may not fit in a signed 32-bit int','line_number':1951,'multiline':False]
['text':' the cases that do not fit are identified here; the ones that fit','line_number':1952,'multiline':False]
['text':' fall through and will be handled with other cases further,','line_number':1953,'multiline':False]
['text':' under '1 <= q + exp <= 10'','line_number':1954,'multiline':False]
['text':' if n < 0 and q + exp = 10','line_number':1955,'multiline':False]
['text':' if n <= -2^31-1 then n is too large','line_number':1956,'multiline':False]
['text':' too large if c(0)c(1)...c(9).c(10)...c(q-1) >= 2^31+1','line_number':1957,'multiline':False]
['text':' <=> 0.c(0)c(1)...c(q-1) * 10^11 >= 0x50000000a, 1<=q<=34','line_number':1958,'multiline':False]
['text':' C scaled up to 11-digit int','line_number':1960,'multiline':False]
['text':' c(0)c(1)...c(9)c(10) or c(0)c(1)...c(q-1)0...0 (11 digits)','line_number':1961,'multiline':False]
['text':' set invalid flag','line_number':1963,'multiline':False]
['text':' return Integer Indefinite','line_number':1965,'multiline':False]
['text':' else cases that can be rounded to a 32-bit int fall through','line_number':1969,'multiline':False]
['text':' to '1 <= q + exp <= 10'','line_number':1970,'multiline':False]
['text':' if (q > 11), i.e. 12 <= q <= 34 and so -24 <= exp <= -2','line_number':1971,'multiline':False]
['text':' 0.c(0)c(1)...c(q-1) * 10^11 >= 0x50000000a <=>','line_number':1972,'multiline':False]
['text':' C >= 0x50000000a * 10^(q-11) where 1 <= q - 11 <= 23','line_number':1973,'multiline':False]
['text':' (scale 2^31+1 up)','line_number':1974,'multiline':False]
['text':' 1 <= q - 11 <= 19; 10^(q-11) requires 64 bits','line_number':1976,'multiline':False]
['text':' 20 <= q - 11 <= 23, and 10^(q-11) requires 128 bits','line_number':1978,'multiline':False]
['text':' set invalid flag','line_number':1983,'multiline':False]
['text':' return Integer Indefinite','line_number':1985,'multiline':False]
['text':' else cases that can be rounded to a 32-bit int fall through','line_number':1989,'multiline':False]
['text':' to '1 <= q + exp <= 10'','line_number':1990,'multiline':False]
['text':' if n > 0 and q + exp = 10','line_number':1992,'multiline':False]
['text':' if n > 2^31 - 1 then n is too large','line_number':1993,'multiline':False]
['text':' too large if c(0)c(1)...c(9).c(10)...c(q-1) > 2^31 - 1','line_number':1994,'multiline':False]
['text':' too large if 0.c(0)c(1)...c(q-1) * 10^11 > 0x4fffffff6, 1<=q<=34','line_number':1995,'multiline':False]
['text':' C scaled up to 11-digit int','line_number':1997,'multiline':False]
['text':' c(0)c(1)...c(9)c(10) or c(0)c(1)...c(q-1)0...0 (11 digits)','line_number':1998,'multiline':False]
['text':' set invalid flag','line_number':2000,'multiline':False]
['text':' return Integer Indefinite','line_number':2002,'multiline':False]
['text':' else cases that can be rounded to a 32-bit int fall through','line_number':2006,'multiline':False]
['text':' to '1 <= q + exp <= 10'','line_number':2007,'multiline':False]
['text':' if (q > 11), i.e. 12 <= q <= 34 and so -24 <= exp <= -2','line_number':2008,'multiline':False]
['text':' 0.c(0)c(1)...c(q-1) * 10^11 > 0x4fffffff6 <=>','line_number':2009,'multiline':False]
['text':' C > 0x4fffffff6 * 10^(q-11) where 1 <= q - 11 <= 23','line_number':2010,'multiline':False]
['text':' (scale 2^31 up)','line_number':2011,'multiline':False]
['text':' 1 <= q - 11 <= 19; 10^(q-11) requires 64 bits','line_number':2013,'multiline':False]
['text':' 20 <= q - 11 <= 23, and 10^(q-11) requires 128 bits','line_number':2015,'multiline':False]
['text':' set invalid flag','line_number':2019,'multiline':False]
['text':' return Integer Indefinite','line_number':2021,'multiline':False]
['text':' else cases that can be rounded to a 32-bit int fall through','line_number':2025,'multiline':False]
['text':' to '1 <= q + exp <= 10'','line_number':2026,'multiline':False]
['text':' n is not too large to be converted to int32: -2^31-1 < n <= 2^31-1','line_number':2030,'multiline':False]
['text':' Note: some of the cases tested for above fall through to this point','line_number':2031,'multiline':False]
['text':' n = +/-0.0...c(0)c(1)...c(q-1) or n = +/-0.c(0)c(1)...c(q-1)','line_number':2033,'multiline':False]
['text':' set inexact flag','line_number':2034,'multiline':False]
['text':' return 0','line_number':2036,'multiline':False]
['text':' if (1 <= q + exp <= 10, 1 <= q <= 34, -33 <= exp <= 9)','line_number':2042,'multiline':False]
['text':' -2^31-1 < x <= -1 or 1 <= x <= 2^31-1 so x can be rounded','line_number':2043,'multiline':False]
['text':' toward positive infinity to a 32-bit signed integer','line_number':2044,'multiline':False]
['text':' 2 <= q <= 34, -33 <= exp <= -1, 1 <= q + exp <= 10','line_number':2045,'multiline':False]
['text':' 1 <= ind <= 33; ind is a synonym for 'x'','line_number':2046,'multiline':False]
['text':' chop off ind digits from the lower part of C1','line_number':2047,'multiline':False]
['text':' C1 = C1 + 1/2 * 10^ind where the result C1 fits in 127 bits','line_number':2048,'multiline':False]
['text':' calculate C* and f*','line_number':2058,'multiline':False]
['text':' C* is actually floor(C*) in this case','line_number':2059,'multiline':False]
['text':' C* and f* need shifting and masking, as shown by','line_number':2060,'multiline':False]
['text':' bid_shiftright128[] and bid_maskhigh128[]','line_number':2061,'multiline':False]
['text':' 1 <= x <= 33','line_number':2062,'multiline':False]
['text':' kx = 10^(-x) = bid_ten2mk128[ind - 1]','line_number':2063,'multiline':False]
['text':' C* = (C1 + 1/2 * 10^x) * 10^(-x)','line_number':2064,'multiline':False]
['text':' the approximation of 10^(-x) was rounded up to 118 bits','line_number':2065,'multiline':False]
['text':' 0 <= ind - 1 <= 21','line_number':2067,'multiline':False]
['text':' 22 <= ind - 1 <= 33','line_number':2074,'multiline':False]
['text':' the top Ex bits of 10^(-x) are T* = bid_ten2mk128trunc[ind], e.g.','line_number':2082,'multiline':False]
['text':' if x=1, T*=bid_ten2mk128trunc[0]=0x19999999999999999999999999999999','line_number':2083,'multiline':False]
['text':' if (0 < f* < 10^(-x)) then the result is a midpoint','line_number':2084,'multiline':False]
['text':'   if floor(C*) is even then C* = floor(C*) - logical right','line_number':2085,'multiline':False]
['text':'       shift; C* has p decimal digits, correct by Prop. 1)','line_number':2086,'multiline':False]
['text':'   else if floor(C*) is odd C* = floor(C*)-1 (logical right','line_number':2087,'multiline':False]
['text':'       shift; C* has p decimal digits, correct by Pr. 1)','line_number':2088,'multiline':False]
['text':' else','line_number':2089,'multiline':False]
['text':'   C* = floor(C*) (logical right shift; C has p decimal digits,','line_number':2090,'multiline':False]
['text':'       correct by Property 1)','line_number':2091,'multiline':False]
['text':' n = C* * 10^(e+x)','line_number':2092,'multiline':False]
['text':' shift right C* by Ex-128 = bid_shiftright128[ind]','line_number':2094,'multiline':False]
['text':' 0 <= shift <= 102','line_number':2095,'multiline':False]
['text':' 0 <= ind - 1 <= 21','line_number':2096,'multiline':False]
['text':' redundant, it will be 0! Cstar.w[1] = (Cstar.w[1] >> shift);','line_number':2099,'multiline':False]
['text':' 22 <= ind - 1 <= 33','line_number':2100,'multiline':False]
['text':' 2 <= shift - 64 <= 38','line_number':2101,'multiline':False]
['text':' determine inexactness of the rounding of C*','line_number':2103,'multiline':False]
['text':' if (0 < f* - 1/2 < 10^(-x)) then','line_number':2104,'multiline':False]
['text':'   the result is exact','line_number':2105,'multiline':False]
['text':' else // if (f* - 1/2 > T*) then','line_number':2106,'multiline':False]
['text':'   the result is inexact','line_number':2107,'multiline':False]
['text':' f* > 1/2 and the result may be exact','line_number':2109,'multiline':False]
['text':' f* - 1/2','line_number':2110,'multiline':False]
['text':' set the inexact flag','line_number':2114,'multiline':False]
['text':' else the result is exact','line_number':2117,'multiline':False]
['text':' the result is inexact; f2* <= 1/2','line_number':2118,'multiline':False]
['text':' set the inexact flag','line_number':2119,'multiline':False]
['text':' if 3 <= ind <= 21','line_number':2123,'multiline':False]
['text':' f2* > 1/2 and the result may be exact','line_number':2128,'multiline':False]
['text':' Calculate f2* - 1/2','line_number':2129,'multiline':False]
['text':' set the inexact flag','line_number':2138,'multiline':False]
['text':' else the result is exact','line_number':2141,'multiline':False]
['text':' the result is inexact; f2* <= 1/2','line_number':2142,'multiline':False]
['text':' set the inexact flag','line_number':2143,'multiline':False]
['text':' if 22 <= ind <= 33','line_number':2147,'multiline':False]
['text':' f2* > 1/2 and the result may be exact','line_number':2151,'multiline':False]
['text':' Calculate f2* - 1/2','line_number':2152,'multiline':False]
['text':' set the inexact flag','line_number':2158,'multiline':False]
['text':' else the result is exact','line_number':2161,'multiline':False]
['text':' the result is inexact; f2* <= 1/2','line_number':2162,'multiline':False]
['text':' set the inexact flag','line_number':2163,'multiline':False]
['text':' if the result was a midpoint it was rounded away from zero, so','line_number':2169,'multiline':False]
['text':' it will need a correction','line_number':2170,'multiline':False]
['text':' check for midpoints','line_number':2171,'multiline':False]
['text':' the result is a midpoint; round to nearest','line_number':2177,'multiline':False]
['text':' Cstar.w[0] is odd; MP in [EVEN, ODD]','line_number':2178,'multiline':False]
['text':' if floor(C*) is odd C = floor(C*) - 1; the result >= 1','line_number':2179,'multiline':False]
['text':' Cstar.w[0] is now even','line_number':2180,'multiline':False]
['text':' else MP in [ODD, EVEN]','line_number':2184,'multiline':False]
['text':' general correction for RM','line_number':2190,'multiline':False]
['text':' the result is already correct','line_number':2197,'multiline':False]
['text':' 1 <= q <= 10','line_number':2204,'multiline':False]
['text':' res = +/-C (exact)','line_number':2205,'multiline':False]
['text':' if (exp > 0) => 1 <= exp <= 9, 1 <= q < 9, 2 <= q + exp <= 10','line_number':2210,'multiline':False]
['text':' res = +/-C * 10^exp (exact)','line_number':2211,'multiline':False]
['text':'****************************************************************************
 *  BID128_to_int32_int
 ***************************************************************************','line_number':2223,'multiline':True]
['text':' unbiased exponent','line_number':2232,'multiline':False]
['text':' Note: C1.w[1], C1.w[0] represent x_signif_hi, x_signif_lo (all are BID_UINT64)','line_number':2233,'multiline':False]
['text':' C* represents up to 34 decimal digits ~ 113 bits','line_number':2239,'multiline':False]
['text':' unpack x','line_number':2245,'multiline':False]
['text':' 0 for positive, MASK_SIGN for negative','line_number':2246,'multiline':False]
['text':' biased and shifted left 49 bit positions','line_number':2247,'multiline':False]
['text':' check for NaN or Infinity','line_number':2251,'multiline':False]
['text':' x is special','line_number':2253,'multiline':False]
['text':' x is NAN','line_number':2254,'multiline':False]
['text':' x is SNAN','line_number':2255,'multiline':False]
['text':' set invalid flag','line_number':2256,'multiline':False]
['text':' return Integer Indefinite','line_number':2258,'multiline':False]
['text':' x is QNaN','line_number':2260,'multiline':False]
['text':' set invalid flag','line_number':2261,'multiline':False]
['text':' return Integer Indefinite','line_number':2263,'multiline':False]
['text':' x is not a NaN, so it must be infinity','line_number':2267,'multiline':False]
['text':' x is +inf','line_number':2268,'multiline':False]
['text':' set invalid flag','line_number':2269,'multiline':False]
['text':' return Integer Indefinite','line_number':2271,'multiline':False]
['text':' x is -inf','line_number':2273,'multiline':False]
['text':' set invalid flag','line_number':2274,'multiline':False]
['text':' return Integer Indefinite','line_number':2276,'multiline':False]
['text':' check for non-canonical values (after the check for special values)','line_number':2282,'multiline':False]
['text':' x is 0','line_number':2290,'multiline':False]
['text':' x is not special and is not zero','line_number':2293,'multiline':False]
['text':' q = nr. of decimal digits in x','line_number':2295,'multiline':False]
['text':'  determine first the nr. of bits in x','line_number':2296,'multiline':False]
['text':' x >= 2^53','line_number':2298,'multiline':False]
['text':' split the 64-bit value in two 32-bit halves to avoid rounding errors','line_number':2299,'multiline':False]
['text':' exact conversion','line_number':2300,'multiline':False]
['text':' if x < 2^53','line_number':2303,'multiline':False]
['text':' exact conversion','line_number':2304,'multiline':False]
['text':' C1.w[1] != 0 => nr. bits = 64 + nr_bits (C1.w[1])','line_number':2308,'multiline':False]
['text':' exact conversion','line_number':2309,'multiline':False]
['text':' x >= 10^10 ~= 2^33.2... (cannot fit in 32 bits)','line_number':2322,'multiline':False]
['text':' set invalid flag','line_number':2323,'multiline':False]
['text':' return Integer Indefinite','line_number':2325,'multiline':False]
['text':' x = c(0)c(1)...c(9).c(10)...c(q-1)','line_number':2328,'multiline':False]
['text':' in this case 2^29.89... ~= 10^9 <= x < 10^10 ~= 2^33.2...','line_number':2329,'multiline':False]
['text':' so x rounded to an integer may or may not fit in a signed 32-bit int','line_number':2330,'multiline':False]
['text':' the cases that do not fit are identified here; the ones that fit','line_number':2331,'multiline':False]
['text':' fall through and will be handled with other cases further,','line_number':2332,'multiline':False]
['text':' under '1 <= q + exp <= 10'','line_number':2333,'multiline':False]
['text':' if n < 0 and q + exp = 10','line_number':2334,'multiline':False]
['text':' if n <= -2^31 - 1 then n is too large','line_number':2335,'multiline':False]
['text':' too large if c(0)c(1)...c(9).c(10)...c(q-1) >= 2^31+1','line_number':2336,'multiline':False]
['text':' <=> 0.c(0)c(1)...c(q-1) * 10^11 >= 0x50000000a, 1<=q<=34','line_number':2337,'multiline':False]
['text':' C scaled up to 11-digit int','line_number':2339,'multiline':False]
['text':' c(0)c(1)...c(9)c(10) or c(0)c(1)...c(q-1)0...0 (11 digits)','line_number':2340,'multiline':False]
['text':' set invalid flag','line_number':2342,'multiline':False]
['text':' return Integer Indefinite','line_number':2344,'multiline':False]
['text':' else cases that can be rounded to a 32-bit int fall through','line_number':2348,'multiline':False]
['text':' to '1 <= q + exp <= 10'','line_number':2349,'multiline':False]
['text':' if (q > 11), i.e. 12 <= q <= 34 and so -24 <= exp <= -2','line_number':2350,'multiline':False]
['text':' 0.c(0)c(1)...c(q-1) * 10^11 >= 0x50000000a <=>','line_number':2351,'multiline':False]
['text':' C >= 0x50000000a * 10^(q-11) where 1 <= q - 11 <= 23','line_number':2352,'multiline':False]
['text':' (scale 2^31+1 up)','line_number':2353,'multiline':False]
['text':' 1 <= q - 11 <= 19; 10^(q-11) requires 64 bits','line_number':2355,'multiline':False]
['text':' 20 <= q - 11 <= 23, and 10^(q-11) requires 128 bits','line_number':2357,'multiline':False]
['text':' set invalid flag','line_number':2362,'multiline':False]
['text':' return Integer Indefinite','line_number':2364,'multiline':False]
['text':' else cases that can be rounded to a 32-bit int fall through','line_number':2368,'multiline':False]
['text':' to '1 <= q + exp <= 10'','line_number':2369,'multiline':False]
['text':' if n > 0 and q + exp = 10','line_number':2371,'multiline':False]
['text':' if n >= 2^31 then n is too large','line_number':2372,'multiline':False]
['text':' too large if c(0)c(1)...c(9).c(10)...c(q-1) >= 2^31','line_number':2373,'multiline':False]
['text':' too large if 0.c(0)c(1)...c(q-1) * 10^11 >= 0x500000000, 1<=q<=34','line_number':2374,'multiline':False]
['text':' C scaled up to 11-digit int','line_number':2376,'multiline':False]
['text':' c(0)c(1)...c(9)c(10) or c(0)c(1)...c(q-1)0...0 (11 digits)','line_number':2377,'multiline':False]
['text':' set invalid flag','line_number':2379,'multiline':False]
['text':' return Integer Indefinite','line_number':2381,'multiline':False]
['text':' else cases that can be rounded to a 32-bit int fall through','line_number':2385,'multiline':False]
['text':' to '1 <= q + exp <= 10'','line_number':2386,'multiline':False]
['text':' if (q > 11), i.e. 12 <= q <= 34 and so -24 <= exp <= -2','line_number':2387,'multiline':False]
['text':' 0.c(0)c(1)...c(q-1) * 10^11 >= 0x500000000 <=>','line_number':2388,'multiline':False]
['text':' C >= 0x500000000 * 10^(q-11) where 1 <= q - 11 <= 23','line_number':2389,'multiline':False]
['text':' (scale 2^31-1/2 up)','line_number':2390,'multiline':False]
['text':' 1 <= q - 11 <= 19; 10^(q-11) requires 64 bits','line_number':2392,'multiline':False]
['text':' 20 <= q - 11 <= 23, and 10^(q-11) requires 128 bits','line_number':2394,'multiline':False]
['text':' set invalid flag','line_number':2399,'multiline':False]
['text':' return Integer Indefinite','line_number':2401,'multiline':False]
['text':' else cases that can be rounded to a 32-bit int fall through','line_number':2405,'multiline':False]
['text':' to '1 <= q + exp <= 10'','line_number':2406,'multiline':False]
['text':' n is not too large to be converted to int32: -2^31 - 1 < n < 2^31','line_number':2410,'multiline':False]
['text':' Note: some of the cases tested for above fall through to this point','line_number':2411,'multiline':False]
['text':' n = +/-0.0...c(0)c(1)...c(q-1) or n = +/-0.c(0)c(1)...c(q-1)','line_number':2413,'multiline':False]
['text':' return 0','line_number':2414,'multiline':False]
['text':' if (1 <= q + exp <= 10, 1 <= q <= 34, -33 <= exp <= 9)','line_number':2417,'multiline':False]
['text':' -2^31-1 < x <= -1 or 1 <= x < 2^31 so x can be rounded','line_number':2418,'multiline':False]
['text':' toward zero to a 32-bit signed integer','line_number':2419,'multiline':False]
['text':' 2 <= q <= 34, -33 <= exp <= -1, 1 <= q + exp <= 10','line_number':2420,'multiline':False]
['text':' 1 <= ind <= 33; ind is a synonym for 'x'','line_number':2421,'multiline':False]
['text':' chop off ind digits from the lower part of C1','line_number':2422,'multiline':False]
['text':' C1 = C1 + 1/2 * 10^ind where the result C1 fits in 127 bits','line_number':2423,'multiline':False]
['text':' calculate C* and f*','line_number':2433,'multiline':False]
['text':' C* is actually floor(C*) in this case','line_number':2434,'multiline':False]
['text':' C* and f* need shifting and masking, as shown by','line_number':2435,'multiline':False]
['text':' bid_shiftright128[] and bid_maskhigh128[]','line_number':2436,'multiline':False]
['text':' 1 <= x <= 33','line_number':2437,'multiline':False]
['text':' kx = 10^(-x) = bid_ten2mk128[ind - 1]','line_number':2438,'multiline':False]
['text':' C* = (C1 + 1/2 * 10^x) * 10^(-x)','line_number':2439,'multiline':False]
['text':' the approximation of 10^(-x) was rounded up to 118 bits','line_number':2440,'multiline':False]
['text':' 0 <= ind - 1 <= 21','line_number':2442,'multiline':False]
['text':' 22 <= ind - 1 <= 33','line_number':2449,'multiline':False]
['text':' the top Ex bits of 10^(-x) are T* = bid_ten2mk128trunc[ind], e.g.','line_number':2457,'multiline':False]
['text':' if x=1, T*=bid_ten2mk128trunc[0]=0x19999999999999999999999999999999','line_number':2458,'multiline':False]
['text':' if (0 < f* < 10^(-x)) then the result is a midpoint','line_number':2459,'multiline':False]
['text':'   if floor(C*) is even then C* = floor(C*) - logical right','line_number':2460,'multiline':False]
['text':'       shift; C* has p decimal digits, correct by Prop. 1)','line_number':2461,'multiline':False]
['text':'   else if floor(C*) is odd C* = floor(C*)-1 (logical right','line_number':2462,'multiline':False]
['text':'       shift; C* has p decimal digits, correct by Pr. 1)','line_number':2463,'multiline':False]
['text':' else','line_number':2464,'multiline':False]
['text':'   C* = floor(C*) (logical right shift; C has p decimal digits,','line_number':2465,'multiline':False]
['text':'       correct by Property 1)','line_number':2466,'multiline':False]
['text':' n = C* * 10^(e+x)','line_number':2467,'multiline':False]
['text':' shift right C* by Ex-128 = bid_shiftright128[ind]','line_number':2469,'multiline':False]
['text':' 0 <= shift <= 102','line_number':2470,'multiline':False]
['text':' 0 <= ind - 1 <= 21','line_number':2471,'multiline':False]
['text':' redundant, it will be 0! Cstar.w[1] = (Cstar.w[1] >> shift);','line_number':2474,'multiline':False]
['text':' 22 <= ind - 1 <= 33','line_number':2475,'multiline':False]
['text':' 2 <= shift - 64 <= 38','line_number':2476,'multiline':False]
['text':' determine inexactness of the rounding of C*','line_number':2478,'multiline':False]
['text':' if (0 < f* - 1/2 < 10^(-x)) then','line_number':2479,'multiline':False]
['text':'   the result is exact','line_number':2480,'multiline':False]
['text':' else // if (f* - 1/2 > T*) then','line_number':2481,'multiline':False]
['text':'   the result is inexact','line_number':2482,'multiline':False]
['text':' f* > 1/2 and the result may be exact','line_number':2484,'multiline':False]
['text':' f* - 1/2','line_number':2485,'multiline':False]
['text':' else the result is exact','line_number':2489,'multiline':False]
['text':' the result is inexact; f2* <= 1/2','line_number':2490,'multiline':False]
['text':' if 3 <= ind <= 21','line_number':2493,'multiline':False]
['text':' f2* > 1/2 and the result may be exact','line_number':2498,'multiline':False]
['text':' Calculate f2* - 1/2','line_number':2499,'multiline':False]
['text':' else the result is exact','line_number':2508,'multiline':False]
['text':' the result is inexact; f2* <= 1/2','line_number':2509,'multiline':False]
['text':' if 22 <= ind <= 33','line_number':2512,'multiline':False]
['text':' f2* > 1/2 and the result may be exact','line_number':2516,'multiline':False]
['text':' Calculate f2* - 1/2','line_number':2517,'multiline':False]
['text':' else the result is exact','line_number':2523,'multiline':False]
['text':' the result is inexact; f2* <= 1/2','line_number':2524,'multiline':False]
['text':' if the result was a midpoint it was rounded away from zero, so','line_number':2529,'multiline':False]
['text':' it will need a correction','line_number':2530,'multiline':False]
['text':' check for midpoints','line_number':2531,'multiline':False]
['text':' the result is a midpoint; round to nearest','line_number':2537,'multiline':False]
['text':' Cstar.w[0] is odd; MP in [EVEN, ODD]','line_number':2538,'multiline':False]
['text':' if floor(C*) is odd C = floor(C*) - 1; the result >= 1','line_number':2539,'multiline':False]
['text':' Cstar.w[0] is now even','line_number':2540,'multiline':False]
['text':' else MP in [ODD, EVEN]','line_number':2542,'multiline':False]
['text':' general correction for RZ','line_number':2547,'multiline':False]
['text':' exact, the result is already correct','line_number':2551,'multiline':False]
['text':' 1 <= q <= 10','line_number':2558,'multiline':False]
['text':' res = +/-C (exact)','line_number':2559,'multiline':False]
['text':' if (exp > 0) => 1 <= exp <= 9, 1 <= q < 9, 2 <= q + exp <= 10','line_number':2564,'multiline':False]
['text':' res = +/-C * 10^exp (exact)','line_number':2565,'multiline':False]
['text':'****************************************************************************
 *  BID128_to_int32_xint
 ***************************************************************************','line_number':2577,'multiline':True]
['text':' unbiased exponent','line_number':2586,'multiline':False]
['text':' Note: C1.w[1], C1.w[0] represent x_signif_hi, x_signif_lo (all are BID_UINT64)','line_number':2587,'multiline':False]
['text':' C* represents up to 34 decimal digits ~ 113 bits','line_number':2593,'multiline':False]
['text':' unpack x','line_number':2599,'multiline':False]
['text':' 0 for positive, MASK_SIGN for negative','line_number':2600,'multiline':False]
['text':' biased and shifted left 49 bit positions','line_number':2601,'multiline':False]
['text':' check for NaN or Infinity','line_number':2605,'multiline':False]
['text':' x is special','line_number':2607,'multiline':False]
['text':' x is NAN','line_number':2608,'multiline':False]
['text':' x is SNAN','line_number':2609,'multiline':False]
['text':' set invalid flag','line_number':2610,'multiline':False]
['text':' return Integer Indefinite','line_number':2612,'multiline':False]
['text':' x is QNaN','line_number':2614,'multiline':False]
['text':' set invalid flag','line_number':2615,'multiline':False]
['text':' return Integer Indefinite','line_number':2617,'multiline':False]
['text':' x is not a NaN, so it must be infinity','line_number':2621,'multiline':False]
['text':' x is +inf','line_number':2622,'multiline':False]
['text':' set invalid flag','line_number':2623,'multiline':False]
['text':' return Integer Indefinite','line_number':2625,'multiline':False]
['text':' x is -inf','line_number':2627,'multiline':False]
['text':' set invalid flag','line_number':2628,'multiline':False]
['text':' return Integer Indefinite','line_number':2630,'multiline':False]
['text':' check for non-canonical values (after the check for special values)','line_number':2636,'multiline':False]
['text':' x is 0','line_number':2644,'multiline':False]
['text':' x is not special and is not zero','line_number':2647,'multiline':False]
['text':' q = nr. of decimal digits in x','line_number':2649,'multiline':False]
['text':'  determine first the nr. of bits in x','line_number':2650,'multiline':False]
['text':' x >= 2^53','line_number':2652,'multiline':False]
['text':' split the 64-bit value in two 32-bit halves to avoid rounding errors','line_number':2653,'multiline':False]
['text':' exact conversion','line_number':2654,'multiline':False]
['text':' if x < 2^53','line_number':2657,'multiline':False]
['text':' exact conversion','line_number':2658,'multiline':False]
['text':' C1.w[1] != 0 => nr. bits = 64 + nr_bits (C1.w[1])','line_number':2662,'multiline':False]
['text':' exact conversion','line_number':2663,'multiline':False]
['text':' x >= 10^10 ~= 2^33.2... (cannot fit in 32 bits)','line_number':2676,'multiline':False]
['text':' set invalid flag','line_number':2677,'multiline':False]
['text':' return Integer Indefinite','line_number':2679,'multiline':False]
['text':' x = c(0)c(1)...c(9).c(10)...c(q-1)','line_number':2682,'multiline':False]
['text':' in this case 2^29.89... ~= 10^9 <= x < 10^10 ~= 2^33.2...','line_number':2683,'multiline':False]
['text':' so x rounded to an integer may or may not fit in a signed 32-bit int','line_number':2684,'multiline':False]
['text':' the cases that do not fit are identified here; the ones that fit','line_number':2685,'multiline':False]
['text':' fall through and will be handled with other cases further,','line_number':2686,'multiline':False]
['text':' under '1 <= q + exp <= 10'','line_number':2687,'multiline':False]
['text':' if n < 0 and q + exp = 10','line_number':2688,'multiline':False]
['text':' if n <= -2^31 - 1 then n is too large','line_number':2689,'multiline':False]
['text':' too large if c(0)c(1)...c(9).c(10)...c(q-1) >= 2^31+1','line_number':2690,'multiline':False]
['text':' <=> 0.c(0)c(1)...c(q-1) * 10^11 >= 0x50000000a, 1<=q<=34','line_number':2691,'multiline':False]
['text':' C scaled up to 11-digit int','line_number':2693,'multiline':False]
['text':' c(0)c(1)...c(9)c(10) or c(0)c(1)...c(q-1)0...0 (11 digits)','line_number':2694,'multiline':False]
['text':' set invalid flag','line_number':2696,'multiline':False]
['text':' return Integer Indefinite','line_number':2698,'multiline':False]
['text':' else cases that can be rounded to a 32-bit int fall through','line_number':2702,'multiline':False]
['text':' to '1 <= q + exp <= 10'','line_number':2703,'multiline':False]
['text':' if (q > 11), i.e. 12 <= q <= 34 and so -24 <= exp <= -2','line_number':2704,'multiline':False]
['text':' 0.c(0)c(1)...c(q-1) * 10^11 >= 0x50000000a <=>','line_number':2705,'multiline':False]
['text':' C >= 0x50000000a * 10^(q-11) where 1 <= q - 11 <= 23','line_number':2706,'multiline':False]
['text':' (scale 2^31+1 up)','line_number':2707,'multiline':False]
['text':' 1 <= q - 11 <= 19; 10^(q-11) requires 64 bits','line_number':2709,'multiline':False]
['text':' 20 <= q - 11 <= 23, and 10^(q-11) requires 128 bits','line_number':2711,'multiline':False]
['text':' set invalid flag','line_number':2716,'multiline':False]
['text':' return Integer Indefinite','line_number':2718,'multiline':False]
['text':' else cases that can be rounded to a 32-bit int fall through','line_number':2722,'multiline':False]
['text':' to '1 <= q + exp <= 10'','line_number':2723,'multiline':False]
['text':' if n > 0 and q + exp = 10','line_number':2725,'multiline':False]
['text':' if n >= 2^31 then n is too large','line_number':2726,'multiline':False]
['text':' too large if c(0)c(1)...c(9).c(10)...c(q-1) >= 2^31','line_number':2727,'multiline':False]
['text':' too large if 0.c(0)c(1)...c(q-1) * 10^11 >= 0x500000000, 1<=q<=34','line_number':2728,'multiline':False]
['text':' C scaled up to 11-digit int','line_number':2730,'multiline':False]
['text':' c(0)c(1)...c(9)c(10) or c(0)c(1)...c(q-1)0...0 (11 digits)','line_number':2731,'multiline':False]
['text':' set invalid flag','line_number':2733,'multiline':False]
['text':' return Integer Indefinite','line_number':2735,'multiline':False]
['text':' else cases that can be rounded to a 32-bit int fall through','line_number':2739,'multiline':False]
['text':' to '1 <= q + exp <= 10'','line_number':2740,'multiline':False]
['text':' if (q > 11), i.e. 12 <= q <= 34 and so -24 <= exp <= -2','line_number':2741,'multiline':False]
['text':' 0.c(0)c(1)...c(q-1) * 10^11 >= 0x500000000 <=>','line_number':2742,'multiline':False]
['text':' C >= 0x500000000 * 10^(q-11) where 1 <= q - 11 <= 23','line_number':2743,'multiline':False]
['text':' (scale 2^31-1/2 up)','line_number':2744,'multiline':False]
['text':' 1 <= q - 11 <= 19; 10^(q-11) requires 64 bits','line_number':2746,'multiline':False]
['text':' 20 <= q - 11 <= 23, and 10^(q-11) requires 128 bits','line_number':2748,'multiline':False]
['text':' set invalid flag','line_number':2753,'multiline':False]
['text':' return Integer Indefinite','line_number':2755,'multiline':False]
['text':' else cases that can be rounded to a 32-bit int fall through','line_number':2759,'multiline':False]
['text':' to '1 <= q + exp <= 10'','line_number':2760,'multiline':False]
['text':' n is not too large to be converted to int32: -2^31 - 1 < n < 2^31','line_number':2764,'multiline':False]
['text':' Note: some of the cases tested for above fall through to this point','line_number':2765,'multiline':False]
['text':' n = +/-0.0...c(0)c(1)...c(q-1) or n = +/-0.c(0)c(1)...c(q-1)','line_number':2767,'multiline':False]
['text':' set inexact flag','line_number':2768,'multiline':False]
['text':' return 0','line_number':2770,'multiline':False]
['text':' if (1 <= q + exp <= 10, 1 <= q <= 34, -33 <= exp <= 9)','line_number':2773,'multiline':False]
['text':' -2^31-1 < x <= -1 or 1 <= x < 2^31 so x can be rounded','line_number':2774,'multiline':False]
['text':' toward zero to a 32-bit signed integer','line_number':2775,'multiline':False]
['text':' 2 <= q <= 34, -33 <= exp <= -1, 1 <= q + exp <= 10','line_number':2776,'multiline':False]
['text':' 1 <= ind <= 33; ind is a synonym for 'x'','line_number':2777,'multiline':False]
['text':' chop off ind digits from the lower part of C1','line_number':2778,'multiline':False]
['text':' C1 = C1 + 1/2 * 10^ind where the result C1 fits in 127 bits','line_number':2779,'multiline':False]
['text':' calculate C* and f*','line_number':2789,'multiline':False]
['text':' C* is actually floor(C*) in this case','line_number':2790,'multiline':False]
['text':' C* and f* need shifting and masking, as shown by','line_number':2791,'multiline':False]
['text':' bid_shiftright128[] and bid_maskhigh128[]','line_number':2792,'multiline':False]
['text':' 1 <= x <= 33','line_number':2793,'multiline':False]
['text':' kx = 10^(-x) = bid_ten2mk128[ind - 1]','line_number':2794,'multiline':False]
['text':' C* = (C1 + 1/2 * 10^x) * 10^(-x)','line_number':2795,'multiline':False]
['text':' the approximation of 10^(-x) was rounded up to 118 bits','line_number':2796,'multiline':False]
['text':' 0 <= ind - 1 <= 21','line_number':2798,'multiline':False]
['text':' 22 <= ind - 1 <= 33','line_number':2805,'multiline':False]
['text':' the top Ex bits of 10^(-x) are T* = bid_ten2mk128trunc[ind], e.g.','line_number':2813,'multiline':False]
['text':' if x=1, T*=bid_ten2mk128trunc[0]=0x19999999999999999999999999999999','line_number':2814,'multiline':False]
['text':' if (0 < f* < 10^(-x)) then the result is a midpoint','line_number':2815,'multiline':False]
['text':'   if floor(C*) is even then C* = floor(C*) - logical right','line_number':2816,'multiline':False]
['text':'       shift; C* has p decimal digits, correct by Prop. 1)','line_number':2817,'multiline':False]
['text':'   else if floor(C*) is odd C* = floor(C*)-1 (logical right','line_number':2818,'multiline':False]
['text':'       shift; C* has p decimal digits, correct by Pr. 1)','line_number':2819,'multiline':False]
['text':' else','line_number':2820,'multiline':False]
['text':'   C* = floor(C*) (logical right shift; C has p decimal digits,','line_number':2821,'multiline':False]
['text':'       correct by Property 1)','line_number':2822,'multiline':False]
['text':' n = C* * 10^(e+x)','line_number':2823,'multiline':False]
['text':' shift right C* by Ex-128 = bid_shiftright128[ind]','line_number':2825,'multiline':False]
['text':' 0 <= shift <= 102','line_number':2826,'multiline':False]
['text':' 0 <= ind - 1 <= 21','line_number':2827,'multiline':False]
['text':' redundant, it will be 0! Cstar.w[1] = (Cstar.w[1] >> shift);','line_number':2830,'multiline':False]
['text':' 22 <= ind - 1 <= 33','line_number':2831,'multiline':False]
['text':' 2 <= shift - 64 <= 38','line_number':2832,'multiline':False]
['text':' determine inexactness of the rounding of C*','line_number':2834,'multiline':False]
['text':' if (0 < f* - 1/2 < 10^(-x)) then','line_number':2835,'multiline':False]
['text':'   the result is exact','line_number':2836,'multiline':False]
['text':' else // if (f* - 1/2 > T*) then','line_number':2837,'multiline':False]
['text':'   the result is inexact','line_number':2838,'multiline':False]
['text':' f* > 1/2 and the result may be exact','line_number':2840,'multiline':False]
['text':' f* - 1/2','line_number':2841,'multiline':False]
['text':' set the inexact flag','line_number':2845,'multiline':False]
['text':' else the result is exact','line_number':2847,'multiline':False]
['text':' the result is inexact; f2* <= 1/2','line_number':2848,'multiline':False]
['text':' set the inexact flag','line_number':2849,'multiline':False]
['text':' if 3 <= ind <= 21','line_number':2853,'multiline':False]
['text':' f2* > 1/2 and the result may be exact','line_number':2858,'multiline':False]
['text':' Calculate f2* - 1/2','line_number':2859,'multiline':False]
['text':' set the inexact flag','line_number':2868,'multiline':False]
['text':' else the result is exact','line_number':2870,'multiline':False]
['text':' the result is inexact; f2* <= 1/2','line_number':2871,'multiline':False]
['text':' set the inexact flag','line_number':2872,'multiline':False]
['text':' if 22 <= ind <= 33','line_number':2876,'multiline':False]
['text':' f2* > 1/2 and the result may be exact','line_number':2881,'multiline':False]
['text':' Calculate f2* - 1/2','line_number':2882,'multiline':False]
['text':' set the inexact flag','line_number':2888,'multiline':False]
['text':' else the result is exact','line_number':2890,'multiline':False]
['text':' the result is inexact; f2* <= 1/2','line_number':2891,'multiline':False]
['text':' set the inexact flag','line_number':2892,'multiline':False]
['text':' if the result was a midpoint it was rounded away from zero, so','line_number':2898,'multiline':False]
['text':' it will need a correction','line_number':2899,'multiline':False]
['text':' check for midpoints','line_number':2900,'multiline':False]
['text':' the result is a midpoint; round to nearest','line_number':2906,'multiline':False]
['text':' Cstar.w[0] is odd; MP in [EVEN, ODD]','line_number':2907,'multiline':False]
['text':' if floor(C*) is odd C = floor(C*) - 1; the result >= 1','line_number':2908,'multiline':False]
['text':' Cstar.w[0] is now even','line_number':2909,'multiline':False]
['text':' else MP in [ODD, EVEN]','line_number':2911,'multiline':False]
['text':' general correction for RZ','line_number':2916,'multiline':False]
['text':' exact, the result is already correct','line_number':2920,'multiline':False]
['text':' 1 <= q <= 10','line_number':2927,'multiline':False]
['text':' res = +/-C (exact)','line_number':2928,'multiline':False]
['text':' if (exp > 0) => 1 <= exp <= 9, 1 <= q < 9, 2 <= q + exp <= 10','line_number':2933,'multiline':False]
['text':' res = +/-C * 10^exp (exact)','line_number':2934,'multiline':False]
['text':'****************************************************************************
 *  BID128_to_int32_rninta
 ***************************************************************************','line_number':2946,'multiline':True]
['text':' unbiased exponent','line_number':2956,'multiline':False]
['text':' Note: C1.w[1], C1.w[0] represent x_signif_hi, x_signif_lo (all are BID_UINT64)','line_number':2957,'multiline':False]
['text':' C* represents up to 34 decimal digits ~ 113 bits','line_number':2963,'multiline':False]
['text':' unpack x','line_number':2966,'multiline':False]
['text':' 0 for positive, MASK_SIGN for negative','line_number':2967,'multiline':False]
['text':' biased and shifted left 49 bit positions','line_number':2968,'multiline':False]
['text':' check for NaN or Infinity','line_number':2972,'multiline':False]
['text':' x is special','line_number':2974,'multiline':False]
['text':' x is NAN','line_number':2975,'multiline':False]
['text':' x is SNAN','line_number':2976,'multiline':False]
['text':' set invalid flag','line_number':2977,'multiline':False]
['text':' return Integer Indefinite','line_number':2979,'multiline':False]
['text':' x is QNaN','line_number':2981,'multiline':False]
['text':' set invalid flag','line_number':2982,'multiline':False]
['text':' return Integer Indefinite','line_number':2984,'multiline':False]
['text':' x is not a NaN, so it must be infinity','line_number':2988,'multiline':False]
['text':' x is +inf','line_number':2989,'multiline':False]
['text':' set invalid flag','line_number':2990,'multiline':False]
['text':' return Integer Indefinite','line_number':2992,'multiline':False]
['text':' x is -inf','line_number':2994,'multiline':False]
['text':' set invalid flag','line_number':2995,'multiline':False]
['text':' return Integer Indefinite','line_number':2997,'multiline':False]
['text':' check for non-canonical values (after the check for special values)','line_number':3003,'multiline':False]
['text':' x is 0','line_number':3011,'multiline':False]
['text':' x is not special and is not zero','line_number':3014,'multiline':False]
['text':' q = nr. of decimal digits in x','line_number':3016,'multiline':False]
['text':'  determine first the nr. of bits in x','line_number':3017,'multiline':False]
['text':' x >= 2^53','line_number':3019,'multiline':False]
['text':' split the 64-bit value in two 32-bit halves to avoid rounding errors','line_number':3020,'multiline':False]
['text':' exact conversion','line_number':3021,'multiline':False]
['text':' if x < 2^53','line_number':3024,'multiline':False]
['text':' exact conversion','line_number':3025,'multiline':False]
['text':' C1.w[1] != 0 => nr. bits = 64 + nr_bits (C1.w[1])','line_number':3029,'multiline':False]
['text':' exact conversion','line_number':3030,'multiline':False]
['text':' x >= 10^10 ~= 2^33.2... (cannot fit in 32 bits)','line_number':3043,'multiline':False]
['text':' set invalid flag','line_number':3044,'multiline':False]
['text':' return Integer Indefinite','line_number':3046,'multiline':False]
['text':' x = c(0)c(1)...c(9).c(10)...c(q-1)','line_number':3049,'multiline':False]
['text':' in this case 2^29.89... ~= 10^9 <= x < 10^10 ~= 2^33.2...','line_number':3050,'multiline':False]
['text':' so x rounded to an integer may or may not fit in a signed 32-bit int','line_number':3051,'multiline':False]
['text':' the cases that do not fit are identified here; the ones that fit','line_number':3052,'multiline':False]
['text':' fall through and will be handled with other cases further,','line_number':3053,'multiline':False]
['text':' under '1 <= q + exp <= 10'','line_number':3054,'multiline':False]
['text':' if n < 0 and q + exp = 10','line_number':3055,'multiline':False]
['text':' if n <= -2^31 - 1/2 then n is too large','line_number':3056,'multiline':False]
['text':' too large if c(0)c(1)...c(9).c(10)...c(q-1) >= 2^31+1/2','line_number':3057,'multiline':False]
['text':' <=> 0.c(0)c(1)...c(q-1) * 10^11 >= 0x500000005, 1<=q<=34','line_number':3058,'multiline':False]
['text':' C scaled up to 11-digit int','line_number':3060,'multiline':False]
['text':' c(0)c(1)...c(9)c(10) or c(0)c(1)...c(q-1)0...0 (11 digits)','line_number':3061,'multiline':False]
['text':' set invalid flag','line_number':3063,'multiline':False]
['text':' return Integer Indefinite','line_number':3065,'multiline':False]
['text':' else cases that can be rounded to a 32-bit int fall through','line_number':3069,'multiline':False]
['text':' to '1 <= q + exp <= 10'','line_number':3070,'multiline':False]
['text':' if (q > 11), i.e. 12 <= q <= 34 and so -24 <= exp <= -2','line_number':3071,'multiline':False]
['text':' 0.c(0)c(1)...c(q-1) * 10^11 >= 0x500000005 <=>','line_number':3072,'multiline':False]
['text':' C >= 0x500000005 * 10^(q-11) where 1 <= q - 11 <= 23','line_number':3073,'multiline':False]
['text':' (scale 2^31+1/2 up)','line_number':3074,'multiline':False]
['text':' 1 <= q - 11 <= 19; 10^(q-11) requires 64 bits','line_number':3076,'multiline':False]
['text':' 20 <= q - 11 <= 23, and 10^(q-11) requires 128 bits','line_number':3078,'multiline':False]
['text':' set invalid flag','line_number':3083,'multiline':False]
['text':' return Integer Indefinite','line_number':3085,'multiline':False]
['text':' else cases that can be rounded to a 32-bit int fall through','line_number':3089,'multiline':False]
['text':' to '1 <= q + exp <= 10'','line_number':3090,'multiline':False]
['text':' if n > 0 and q + exp = 10','line_number':3092,'multiline':False]
['text':' if n >= 2^31 - 1/2 then n is too large','line_number':3093,'multiline':False]
['text':' too large if c(0)c(1)...c(9).c(10)...c(q-1) >= 2^31-1/2','line_number':3094,'multiline':False]
['text':' too large if 0.c(0)c(1)...c(q-1) * 10^11 >= 0x4fffffffb, 1<=q<=34','line_number':3095,'multiline':False]
['text':' C scaled up to 11-digit int','line_number':3097,'multiline':False]
['text':' c(0)c(1)...c(9)c(10) or c(0)c(1)...c(q-1)0...0 (11 digits)','line_number':3098,'multiline':False]
['text':' set invalid flag','line_number':3100,'multiline':False]
['text':' return Integer Indefinite','line_number':3102,'multiline':False]
['text':' else cases that can be rounded to a 32-bit int fall through','line_number':3106,'multiline':False]
['text':' to '1 <= q + exp <= 10'','line_number':3107,'multiline':False]
['text':' if (q > 11), i.e. 12 <= q <= 34 and so -24 <= exp <= -2','line_number':3108,'multiline':False]
['text':' 0.c(0)c(1)...c(q-1) * 10^11 >= 0x4fffffffb <=>','line_number':3109,'multiline':False]
['text':' C >= 0x4fffffffb * 10^(q-11) where 1 <= q - 11 <= 23','line_number':3110,'multiline':False]
['text':' (scale 2^31-1/2 up)','line_number':3111,'multiline':False]
['text':' 1 <= q - 11 <= 19; 10^(q-11) requires 64 bits','line_number':3113,'multiline':False]
['text':' 20 <= q - 11 <= 23, and 10^(q-11) requires 128 bits','line_number':3115,'multiline':False]
['text':' set invalid flag','line_number':3120,'multiline':False]
['text':' return Integer Indefinite','line_number':3122,'multiline':False]
['text':' else cases that can be rounded to a 32-bit int fall through','line_number':3126,'multiline':False]
['text':' to '1 <= q + exp <= 10'','line_number':3127,'multiline':False]
['text':' n is not too large to be converted to int32: -2^31 - 1/2 < n < 2^31 - 1/2','line_number':3131,'multiline':False]
['text':' Note: some of the cases tested for above fall through to this point','line_number':3132,'multiline':False]
['text':' n = +/-0.0...c(0)c(1)...c(q-1)','line_number':3133,'multiline':False]
['text':' return 0','line_number':3134,'multiline':False]
['text':' n = +/-0.c(0)c(1)...c(q-1)','line_number':3137,'multiline':False]
['text':' if 0.c(0)c(1)...c(q-1) < 0.5 <=> c(0)c(1)...c(q-1) < 5 * 10^(q-1)','line_number':3138,'multiline':False]
['text':'   res = 0','line_number':3139,'multiline':False]
['text':' else','line_number':3140,'multiline':False]
['text':'   res = +/-1','line_number':3141,'multiline':False]
['text':' 0 <= ind <= 18','line_number':3143,'multiline':False]
['text':' return 0','line_number':3145,'multiline':False]
['text':' n < 0','line_number':3146,'multiline':False]
['text':' return -1','line_number':3147,'multiline':False]
['text':' n > 0','line_number':3148,'multiline':False]
['text':' return +1','line_number':3149,'multiline':False]
['text':' 19 <= ind <= 33','line_number':3151,'multiline':False]
['text':' return 0','line_number':3155,'multiline':False]
['text':' n < 0','line_number':3156,'multiline':False]
['text':' return -1','line_number':3157,'multiline':False]
['text':' n > 0','line_number':3158,'multiline':False]
['text':' return +1','line_number':3159,'multiline':False]
['text':' if (1 <= q + exp <= 10, 1 <= q <= 34, -33 <= exp <= 9)','line_number':3162,'multiline':False]
['text':' -2^31-1/2 < x <= -1 or 1 <= x < 2^31-1/2 so x can be rounded','line_number':3163,'multiline':False]
['text':' to nearest-away to a 32-bit signed integer','line_number':3164,'multiline':False]
['text':' 2 <= q <= 34, -33 <= exp <= -1, 1 <= q + exp <= 10','line_number':3165,'multiline':False]
['text':' 1 <= ind <= 33; ind is a synonym for 'x'','line_number':3166,'multiline':False]
['text':' chop off ind digits from the lower part of C1','line_number':3167,'multiline':False]
['text':' C1 = C1 + 1/2 * 10^ind where the result C1 fits in 127 bits','line_number':3168,'multiline':False]
['text':' calculate C* and f*','line_number':3178,'multiline':False]
['text':' C* is actually floor(C*) in this case','line_number':3179,'multiline':False]
['text':' C* and f* need shifting and masking, as shown by','line_number':3180,'multiline':False]
['text':' bid_shiftright128[] and bid_maskhigh128[]','line_number':3181,'multiline':False]
['text':' 1 <= x <= 33','line_number':3182,'multiline':False]
['text':' kx = 10^(-x) = bid_ten2mk128[ind - 1]','line_number':3183,'multiline':False]
['text':' C* = (C1 + 1/2 * 10^x) * 10^(-x)','line_number':3184,'multiline':False]
['text':' the approximation of 10^(-x) was rounded up to 118 bits','line_number':3185,'multiline':False]
['text':' 0 <= ind - 1 <= 21','line_number':3187,'multiline':False]
['text':' 22 <= ind - 1 <= 33','line_number':3190,'multiline':False]
['text':' the top Ex bits of 10^(-x) are T* = bid_ten2mk128trunc[ind], e.g.','line_number':3194,'multiline':False]
['text':' if x=1, T*=bid_ten2mk128trunc[0]=0x19999999999999999999999999999999','line_number':3195,'multiline':False]
['text':' if (0 < f* < 10^(-x)) then the result is a midpoint','line_number':3196,'multiline':False]
['text':'   if floor(C*) is even then C* = floor(C*) - logical right','line_number':3197,'multiline':False]
['text':'       shift; C* has p decimal digits, correct by Prop. 1)','line_number':3198,'multiline':False]
['text':'   else if floor(C*) is odd C* = floor(C*)-1 (logical right','line_number':3199,'multiline':False]
['text':'       shift; C* has p decimal digits, correct by Pr. 1)','line_number':3200,'multiline':False]
['text':' else','line_number':3201,'multiline':False]
['text':'   C* = floor(C*) (logical right shift; C has p decimal digits,','line_number':3202,'multiline':False]
['text':'       correct by Property 1)','line_number':3203,'multiline':False]
['text':' n = C* * 10^(e+x)','line_number':3204,'multiline':False]
['text':' shift right C* by Ex-128 = bid_shiftright128[ind]','line_number':3206,'multiline':False]
['text':' 0 <= shift <= 102','line_number':3207,'multiline':False]
['text':' 0 <= ind - 1 <= 21','line_number':3208,'multiline':False]
['text':' redundant, it will be 0! Cstar.w[1] = (Cstar.w[1] >> shift);','line_number':3211,'multiline':False]
['text':' 22 <= ind - 1 <= 33','line_number':3212,'multiline':False]
['text':' 2 <= shift - 64 <= 38','line_number':3213,'multiline':False]
['text':' if the result was a midpoint, it was already rounded away from zero','line_number':3215,'multiline':False]
['text':' no need to check for midpoints - already rounded away from zero!','line_number':3220,'multiline':False]
['text':' 1 <= q <= 10','line_number':3222,'multiline':False]
['text':' res = +/-C (exact)','line_number':3223,'multiline':False]
['text':' if (exp > 0) => 1 <= exp <= 9, 1 <= q < 9, 2 <= q + exp <= 10','line_number':3228,'multiline':False]
['text':' res = +/-C * 10^exp (exact)','line_number':3229,'multiline':False]
['text':'****************************************************************************
 *  BID128_to_int32_xrninta
 ***************************************************************************','line_number':3241,'multiline':True]
['text':' unbiased exponent','line_number':3251,'multiline':False]
['text':' Note: C1.w[1], C1.w[0] represent x_signif_hi, x_signif_lo (all are BID_UINT64)','line_number':3252,'multiline':False]
['text':' C* represents up to 34 decimal digits ~ 113 bits','line_number':3258,'multiline':False]
['text':' unpack x','line_number':3262,'multiline':False]
['text':' 0 for positive, MASK_SIGN for negative','line_number':3263,'multiline':False]
['text':' biased and shifted left 49 bit positions','line_number':3264,'multiline':False]
['text':' check for NaN or Infinity','line_number':3268,'multiline':False]
['text':' x is special','line_number':3270,'multiline':False]
['text':' x is NAN','line_number':3271,'multiline':False]
['text':' x is SNAN','line_number':3272,'multiline':False]
['text':' set invalid flag','line_number':3273,'multiline':False]
['text':' return Integer Indefinite','line_number':3275,'multiline':False]
['text':' x is QNaN','line_number':3277,'multiline':False]
['text':' set invalid flag','line_number':3278,'multiline':False]
['text':' return Integer Indefinite','line_number':3280,'multiline':False]
['text':' x is not a NaN, so it must be infinity','line_number':3284,'multiline':False]
['text':' x is +inf','line_number':3285,'multiline':False]
['text':' set invalid flag','line_number':3286,'multiline':False]
['text':' return Integer Indefinite','line_number':3288,'multiline':False]
['text':' x is -inf','line_number':3290,'multiline':False]
['text':' set invalid flag','line_number':3291,'multiline':False]
['text':' return Integer Indefinite','line_number':3293,'multiline':False]
['text':' check for non-canonical values (after the check for special values)','line_number':3299,'multiline':False]
['text':' x is 0','line_number':3307,'multiline':False]
['text':' x is not special and is not zero','line_number':3310,'multiline':False]
['text':' q = nr. of decimal digits in x','line_number':3312,'multiline':False]
['text':'  determine first the nr. of bits in x','line_number':3313,'multiline':False]
['text':' x >= 2^53','line_number':3315,'multiline':False]
['text':' split the 64-bit value in two 32-bit halves to avoid rounding errors','line_number':3316,'multiline':False]
['text':' exact conversion','line_number':3317,'multiline':False]
['text':' if x < 2^53','line_number':3320,'multiline':False]
['text':' exact conversion','line_number':3321,'multiline':False]
['text':' C1.w[1] != 0 => nr. bits = 64 + nr_bits (C1.w[1])','line_number':3325,'multiline':False]
['text':' exact conversion','line_number':3326,'multiline':False]
['text':' x >= 10^10 ~= 2^33.2... (cannot fit in 32 bits)','line_number':3339,'multiline':False]
['text':' set invalid flag','line_number':3340,'multiline':False]
['text':' return Integer Indefinite','line_number':3342,'multiline':False]
['text':' x = c(0)c(1)...c(9).c(10)...c(q-1)','line_number':3345,'multiline':False]
['text':' in this case 2^29.89... ~= 10^9 <= x < 10^10 ~= 2^33.2...','line_number':3346,'multiline':False]
['text':' so x rounded to an integer may or may not fit in a signed 32-bit int','line_number':3347,'multiline':False]
['text':' the cases that do not fit are identified here; the ones that fit','line_number':3348,'multiline':False]
['text':' fall through and will be handled with other cases further,','line_number':3349,'multiline':False]
['text':' under '1 <= q + exp <= 10'','line_number':3350,'multiline':False]
['text':' if n < 0 and q + exp = 10','line_number':3351,'multiline':False]
['text':' if n <= -2^31 - 1/2 then n is too large','line_number':3352,'multiline':False]
['text':' too large if c(0)c(1)...c(9).c(10)...c(q-1) >= 2^31+1/2','line_number':3353,'multiline':False]
['text':' <=> 0.c(0)c(1)...c(q-1) * 10^11 >= 0x500000005, 1<=q<=34','line_number':3354,'multiline':False]
['text':' C scaled up to 11-digit int','line_number':3356,'multiline':False]
['text':' c(0)c(1)...c(9)c(10) or c(0)c(1)...c(q-1)0...0 (11 digits)','line_number':3357,'multiline':False]
['text':' set invalid flag','line_number':3359,'multiline':False]
['text':' return Integer Indefinite','line_number':3361,'multiline':False]
['text':' else cases that can be rounded to a 32-bit int fall through','line_number':3365,'multiline':False]
['text':' to '1 <= q + exp <= 10'','line_number':3366,'multiline':False]
['text':' if (q > 11), i.e. 12 <= q <= 34 and so -24 <= exp <= -2','line_number':3367,'multiline':False]
['text':' 0.c(0)c(1)...c(q-1) * 10^11 >= 0x500000005 <=>','line_number':3368,'multiline':False]
['text':' C >= 0x500000005 * 10^(q-11) where 1 <= q - 11 <= 23','line_number':3369,'multiline':False]
['text':' (scale 2^31+1/2 up)','line_number':3370,'multiline':False]
['text':' 1 <= q - 11 <= 19; 10^(q-11) requires 64 bits','line_number':3372,'multiline':False]
['text':' 20 <= q - 11 <= 23, and 10^(q-11) requires 128 bits','line_number':3374,'multiline':False]
['text':' set invalid flag','line_number':3379,'multiline':False]
['text':' return Integer Indefinite','line_number':3381,'multiline':False]
['text':' else cases that can be rounded to a 32-bit int fall through','line_number':3385,'multiline':False]
['text':' to '1 <= q + exp <= 10'','line_number':3386,'multiline':False]
['text':' if n > 0 and q + exp = 10','line_number':3388,'multiline':False]
['text':' if n >= 2^31 - 1/2 then n is too large','line_number':3389,'multiline':False]
['text':' too large if c(0)c(1)...c(9).c(10)...c(q-1) >= 2^31-1/2','line_number':3390,'multiline':False]
['text':' too large if 0.c(0)c(1)...c(q-1) * 10^11 >= 0x4fffffffb, 1<=q<=34','line_number':3391,'multiline':False]
['text':' C scaled up to 11-digit int','line_number':3393,'multiline':False]
['text':' c(0)c(1)...c(9)c(10) or c(0)c(1)...c(q-1)0...0 (11 digits)','line_number':3394,'multiline':False]
['text':' set invalid flag','line_number':3396,'multiline':False]
['text':' return Integer Indefinite','line_number':3398,'multiline':False]
['text':' else cases that can be rounded to a 32-bit int fall through','line_number':3402,'multiline':False]
['text':' to '1 <= q + exp <= 10'','line_number':3403,'multiline':False]
['text':' if (q > 11), i.e. 12 <= q <= 34 and so -24 <= exp <= -2','line_number':3404,'multiline':False]
['text':' 0.c(0)c(1)...c(q-1) * 10^11 >= 0x4fffffffb <=>','line_number':3405,'multiline':False]
['text':' C >= 0x4fffffffb * 10^(q-11) where 1 <= q - 11 <= 23','line_number':3406,'multiline':False]
['text':' (scale 2^31-1/2 up)','line_number':3407,'multiline':False]
['text':' 1 <= q - 11 <= 19; 10^(q-11) requires 64 bits','line_number':3409,'multiline':False]
['text':' 20 <= q - 11 <= 23, and 10^(q-11) requires 128 bits','line_number':3411,'multiline':False]
['text':' set invalid flag','line_number':3416,'multiline':False]
['text':' return Integer Indefinite','line_number':3418,'multiline':False]
['text':' else cases that can be rounded to a 32-bit int fall through','line_number':3422,'multiline':False]
['text':' to '1 <= q + exp <= 10'','line_number':3423,'multiline':False]
['text':' n is not too large to be converted to int32: -2^31 - 1/2 < n < 2^31 - 1/2','line_number':3427,'multiline':False]
['text':' Note: some of the cases tested for above fall through to this point','line_number':3428,'multiline':False]
['text':' n = +/-0.0...c(0)c(1)...c(q-1)','line_number':3429,'multiline':False]
['text':' set inexact flag','line_number':3430,'multiline':False]
['text':' return 0','line_number':3432,'multiline':False]
['text':' n = +/-0.c(0)c(1)...c(q-1)','line_number':3435,'multiline':False]
['text':' if 0.c(0)c(1)...c(q-1) < 0.5 <=> c(0)c(1)...c(q-1) < 5 * 10^(q-1)','line_number':3436,'multiline':False]
['text':'   res = 0','line_number':3437,'multiline':False]
['text':' else','line_number':3438,'multiline':False]
['text':'   res = +/-1','line_number':3439,'multiline':False]
['text':' 0 <= ind <= 18','line_number':3441,'multiline':False]
['text':' return 0','line_number':3443,'multiline':False]
['text':' n < 0','line_number':3444,'multiline':False]
['text':' return -1','line_number':3445,'multiline':False]
['text':' n > 0','line_number':3446,'multiline':False]
['text':' return +1','line_number':3447,'multiline':False]
['text':' 19 <= ind <= 33','line_number':3449,'multiline':False]
['text':' return 0','line_number':3453,'multiline':False]
['text':' n < 0','line_number':3454,'multiline':False]
['text':' return -1','line_number':3455,'multiline':False]
['text':' n > 0','line_number':3456,'multiline':False]
['text':' return +1','line_number':3457,'multiline':False]
['text':' set inexact flag','line_number':3460,'multiline':False]
['text':' if (1 <= q + exp <= 10, 1 <= q <= 34, -33 <= exp <= 9)','line_number':3462,'multiline':False]
['text':' -2^31-1/2 < x <= -1 or 1 <= x < 2^31-1/2 so x can be rounded','line_number':3463,'multiline':False]
['text':' to nearest-away to a 32-bit signed integer','line_number':3464,'multiline':False]
['text':' 2 <= q <= 34, -33 <= exp <= -1, 1 <= q + exp <= 10','line_number':3465,'multiline':False]
['text':' 1 <= ind <= 33; ind is a synonym for 'x'','line_number':3466,'multiline':False]
['text':' chop off ind digits from the lower part of C1','line_number':3467,'multiline':False]
['text':' C1 = C1 + 1/2 * 10^ind where the result C1 fits in 127 bits','line_number':3468,'multiline':False]
['text':' calculate C* and f*','line_number':3478,'multiline':False]
['text':' C* is actually floor(C*) in this case','line_number':3479,'multiline':False]
['text':' C* and f* need shifting and masking, as shown by','line_number':3480,'multiline':False]
['text':' bid_shiftright128[] and bid_maskhigh128[]','line_number':3481,'multiline':False]
['text':' 1 <= x <= 33','line_number':3482,'multiline':False]
['text':' kx = 10^(-x) = bid_ten2mk128[ind - 1]','line_number':3483,'multiline':False]
['text':' C* = (C1 + 1/2 * 10^x) * 10^(-x)','line_number':3484,'multiline':False]
['text':' the approximation of 10^(-x) was rounded up to 118 bits','line_number':3485,'multiline':False]
['text':' 0 <= ind - 1 <= 21','line_number':3487,'multiline':False]
['text':' 22 <= ind - 1 <= 33','line_number':3494,'multiline':False]
['text':' the top Ex bits of 10^(-x) are T* = bid_ten2mk128trunc[ind], e.g.','line_number':3502,'multiline':False]
['text':' if x=1, T*=bid_ten2mk128trunc[0]=0x19999999999999999999999999999999','line_number':3503,'multiline':False]
['text':' if (0 < f* < 10^(-x)) then the result is a midpoint','line_number':3504,'multiline':False]
['text':'   if floor(C*) is even then C* = floor(C*) - logical right','line_number':3505,'multiline':False]
['text':'       shift; C* has p decimal digits, correct by Prop. 1)','line_number':3506,'multiline':False]
['text':'   else if floor(C*) is odd C* = floor(C*)-1 (logical right','line_number':3507,'multiline':False]
['text':'       shift; C* has p decimal digits, correct by Pr. 1)','line_number':3508,'multiline':False]
['text':' else','line_number':3509,'multiline':False]
['text':'   C* = floor(C*) (logical right shift; C has p decimal digits,','line_number':3510,'multiline':False]
['text':'       correct by Property 1)','line_number':3511,'multiline':False]
['text':' n = C* * 10^(e+x)','line_number':3512,'multiline':False]
['text':' shift right C* by Ex-128 = bid_shiftright128[ind]','line_number':3514,'multiline':False]
['text':' 0 <= shift <= 102','line_number':3515,'multiline':False]
['text':' 0 <= ind - 1 <= 21','line_number':3516,'multiline':False]
['text':' redundant, it will be 0! Cstar.w[1] = (Cstar.w[1] >> shift);','line_number':3519,'multiline':False]
['text':' 22 <= ind - 1 <= 33','line_number':3520,'multiline':False]
['text':' 2 <= shift - 64 <= 38','line_number':3521,'multiline':False]
['text':' if the result was a midpoint, it was already rounded away from zero','line_number':3523,'multiline':False]
['text':' determine inexactness of the rounding of C*','line_number':3528,'multiline':False]
['text':' if (0 < f* - 1/2 < 10^(-x)) then','line_number':3529,'multiline':False]
['text':'   the result is exact','line_number':3530,'multiline':False]
['text':' else // if (f* - 1/2 > T*) then','line_number':3531,'multiline':False]
['text':'   the result is inexact','line_number':3532,'multiline':False]
['text':' f* > 1/2 and the result may be exact','line_number':3534,'multiline':False]
['text':' f* - 1/2','line_number':3535,'multiline':False]
['text':' set the inexact flag','line_number':3539,'multiline':False]
['text':' else the result is exact','line_number':3541,'multiline':False]
['text':' the result is inexact; f2* <= 1/2','line_number':3542,'multiline':False]
['text':' set the inexact flag','line_number':3543,'multiline':False]
['text':' if 3 <= ind <= 21','line_number':3546,'multiline':False]
['text':' f2* > 1/2 and the result may be exact','line_number':3551,'multiline':False]
['text':' Calculate f2* - 1/2','line_number':3552,'multiline':False]
['text':' set the inexact flag','line_number':3561,'multiline':False]
['text':' else the result is exact','line_number':3563,'multiline':False]
['text':' the result is inexact; f2* <= 1/2','line_number':3564,'multiline':False]
['text':' set the inexact flag','line_number':3565,'multiline':False]
['text':' if 22 <= ind <= 33','line_number':3568,'multiline':False]
['text':' f2* > 1/2 and the result may be exact','line_number':3572,'multiline':False]
['text':' Calculate f2* - 1/2','line_number':3573,'multiline':False]
['text':' set the inexact flag','line_number':3579,'multiline':False]
['text':' else the result is exact','line_number':3581,'multiline':False]
['text':' the result is inexact; f2* <= 1/2','line_number':3582,'multiline':False]
['text':' set the inexact flag','line_number':3583,'multiline':False]
['text':' no need to check for midpoints - already rounded away from zero!','line_number':3587,'multiline':False]
['text':' 1 <= q <= 10','line_number':3589,'multiline':False]
['text':' res = +/-C (exact)','line_number':3590,'multiline':False]
['text':' if (exp > 0) => 1 <= exp <= 9, 1 <= q < 9, 2 <= q + exp <= 10','line_number':3595,'multiline':False]
['text':' res = +/-C * 10^exp (exact)','line_number':3596,'multiline':False]
