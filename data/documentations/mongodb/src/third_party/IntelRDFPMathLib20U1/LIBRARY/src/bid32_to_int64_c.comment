['text':'*****************************************************************************
  Copyright (c) 2007-2011, Intel Corp.
  All rights reserved.

  Redistribution and use in source and binary forms, with or without 
  modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice, 
      this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright 
      notice, this list of conditions and the following disclaimer in the 
      documentation and/or other materials provided with the distribution.
    * Neither the name of Intel Corporation nor the names of its contributors 
      may be used to endorse or promote products derived from this software 
      without specific prior written permission.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
  THE POSSIBILITY OF SUCH DAMAGE.
*****************************************************************************','line_number':1,'multiline':True]
['text':'****************************************************************************
 *  BID32_to_int64_rnint
 ***************************************************************************','line_number':32,'multiline':True]
['text':' unbiased exponent','line_number':52,'multiline':False]
['text':' Note: C1 represents x_significand (BID_UINT32)','line_number':53,'multiline':False]
['text':' C* represents up to 16 decimal digits ~ 54 bits','line_number':59,'multiline':False]
['text':' check for NaN or Infinity','line_number':63,'multiline':False]
['text':' set invalid flag','line_number':65,'multiline':False]
['text':' return Integer Indefinite','line_number':67,'multiline':False]
['text':' unpack x','line_number':71,'multiline':False]
['text':' 0 for positive, MASK_SIGN32 for negative','line_number':72,'multiline':False]
['text':' if steering bits are 11 (condition will be 0), then exponent is G[0:w+1] =>','line_number':73,'multiline':False]
['text':' biased','line_number':75,'multiline':False]
['text':' non-canonical','line_number':77,'multiline':False]
['text':' biased','line_number':82,'multiline':False]
['text':' check for zeros (possibly from non-canonical values)','line_number':86,'multiline':False]
['text':' x is 0','line_number':88,'multiline':False]
['text':' x is not special and is not zero','line_number':92,'multiline':False]
['text':' q = nr. of decimal digits in x (1 <= q <= 7)','line_number':94,'multiline':False]
['text':'  determine first the nr. of bits in x','line_number':95,'multiline':False]
['text':' exact conversion','line_number':96,'multiline':False]
['text':' unbiased exponent','line_number':104,'multiline':False]
['text':' x >= 10^19 ~= 2^63.11... (cannot fit in BID_SINT64)','line_number':106,'multiline':False]
['text':' set invalid flag','line_number':107,'multiline':False]
['text':' return Integer Indefinite','line_number':109,'multiline':False]
['text':' x = c(0)c(1)...c(q-1)00...0 (19 dec. digits)','line_number':112,'multiline':False]
['text':' in this case 2^63.11... ~= 10^19 <= x < 10^20 ~= 2^66.43...','line_number':113,'multiline':False]
['text':' so x rounded to an integer may or may not fit in a signed 64-bit int','line_number':114,'multiline':False]
['text':' the cases that do not fit are identified here; the ones that fit','line_number':115,'multiline':False]
['text':' fall through and will be handled with other cases further,','line_number':116,'multiline':False]
['text':' under '1 <= q + exp <= 19'','line_number':117,'multiline':False]
['text':' if n < 0 and q + exp = 19','line_number':118,'multiline':False]
['text':' if n < -2^63 - 1/2 then n is too large','line_number':119,'multiline':False]
['text':' <=> c(0)c(1)...c(q-1)00...0[19 dec. digits] > 2^63+1/2','line_number':120,'multiline':False]
['text':' <=> 0.c(0)c(1)...c(q-1) * 10^20 > 0x50000000000000005, 1<=q<=7','line_number':121,'multiline':False]
['text':' <=> C * 10^(20-q) > 0x50000000000000005, 1<=q<=7','line_number':122,'multiline':False]
['text':' 1 <= q <= 7 => 13 <= 20-q <= 19 => 10^(20-q) is 64-bit, and so is C1','line_number':123,'multiline':False]
['text':' Note: C1 * 10^(11-q) has 19 or 20 digits; 0x50000000000000005, has 20','line_number':125,'multiline':False]
['text':' set invalid flag','line_number':127,'multiline':False]
['text':' return Integer Indefinite','line_number':129,'multiline':False]
['text':' else cases that can be rounded to a 64-bit int fall through','line_number':133,'multiline':False]
['text':' to '1 <= q + exp <= 19'','line_number':134,'multiline':False]
['text':' if n > 0 and q + exp = 19','line_number':135,'multiline':False]
['text':' if n >= 2^63 - 1/2 then n is too large','line_number':136,'multiline':False]
['text':' <=> c(0)c(1)...c(q-1)00...0[19 dec. digits] >= 2^63-1/2','line_number':137,'multiline':False]
['text':' <=> if 0.c(0)c(1)...c(q-1) * 10^20 >= 0x4fffffffffffffffb, 1<=q<=7','line_number':138,'multiline':False]
['text':' <=> if C * 10^(20-q) >= 0x4fffffffffffffffb, 1<=q<=7','line_number':139,'multiline':False]
['text':' 1 <= q <= 7 => 13 <= 20-q <= 19 => 10^(20-q) is 64-bit, and so is C1','line_number':142,'multiline':False]
['text':' set invalid flag','line_number':146,'multiline':False]
['text':' return Integer Indefinite','line_number':148,'multiline':False]
['text':' else cases that can be rounded to a 64-bit int fall through','line_number':152,'multiline':False]
['text':' to '1 <= q + exp <= 19'','line_number':153,'multiline':False]
['text':' end else if n > 0 and q + exp = 19','line_number':154,'multiline':False]
['text':' end else if ((q + exp) == 19)','line_number':155,'multiline':False]
['text':' n is not too large to be converted to int64: -2^63-1/2 <= n < 2^63-1/2','line_number':157,'multiline':False]
['text':' Note: some of the cases tested for above fall through to this point','line_number':158,'multiline':False]
['text':' n = +/-0.0...c(0)c(1)...c(q-1)','line_number':159,'multiline':False]
['text':' return 0','line_number':160,'multiline':False]
['text':' n = +/-0.c(0)c(1)...c(q-1)','line_number':163,'multiline':False]
['text':' if 0.c(0)c(1)...c(q-1) <= 0.5 <=> c(0)c(1)...c(q-1) <= 5 * 10^(q-1)','line_number':164,'multiline':False]
['text':'   res = 0','line_number':165,'multiline':False]
['text':' else','line_number':166,'multiline':False]
['text':'   res = +/-1','line_number':167,'multiline':False]
['text':' 0 <= ind <= 6','line_number':168,'multiline':False]
['text':' return 0','line_number':170,'multiline':False]
['text':' n < 0','line_number':171,'multiline':False]
['text':' return -1','line_number':172,'multiline':False]
['text':' n > 0','line_number':173,'multiline':False]
['text':' return +1','line_number':174,'multiline':False]
['text':' if (1 <= q + exp <= 19, 1 <= q <= 7, -6 <= exp <= 18)','line_number':176,'multiline':False]
['text':' -2^63-1/2 <= x <= -1 or 1 <= x < 2^63-1/2 so x can be rounded','line_number':177,'multiline':False]
['text':' to nearest to a 64-bit signed integer','line_number':178,'multiline':False]
['text':' 2 <= q <= 7, -6 <= exp <= -1, 1 <= q + exp <= 19','line_number':179,'multiline':False]
['text':' 1 <= ind <= 6; ind is a synonym for 'x'','line_number':180,'multiline':False]
['text':' chop off ind digits from the lower part of C1','line_number':181,'multiline':False]
['text':' C1 = C1 + 1/2 * 10^ind where the result C1 fits in 64 bits','line_number':182,'multiline':False]
['text':' calculate C* and f*','line_number':184,'multiline':False]
['text':' C* is actually floor(C*) in this case','line_number':185,'multiline':False]
['text':' C* and f* need shifting and masking, as shown by','line_number':186,'multiline':False]
['text':' bid_shiftright128[] and bid_maskhigh128[]','line_number':187,'multiline':False]
['text':' 1 <= x <= 6 ','line_number':188,'multiline':False]
['text':' kx = 10^(-x) = bid_ten2mk64[ind - 1]','line_number':189,'multiline':False]
['text':' C* = (C1 + 1/2 * 10^x) * 10^(-x)','line_number':190,'multiline':False]
['text':' the approximation of 10^(-x) was rounded up to 54 bits','line_number':191,'multiline':False]
['text':' the top Ex bits of 10^(-x) are T* = bid_ten2mk128trunc[ind].w[0], e.g.','line_number':196,'multiline':False]
['text':' if x=1, T*=bid_ten2mk128trunc[0].w[0]=0x1999999999999999','line_number':197,'multiline':False]
['text':' if (0 < f* < 10^(-x)) then the result is a midpoint','line_number':198,'multiline':False]
['text':'   if floor(C*) is even then C* = floor(C*) - logical right','line_number':199,'multiline':False]
['text':'       shift; C* has p decimal digits, correct by Prop. 1)','line_number':200,'multiline':False]
['text':'   else if floor(C*) is odd C* = floor(C*)-1 (logical right','line_number':201,'multiline':False]
['text':'       shift; C* has p decimal digits, correct by Pr. 1)','line_number':202,'multiline':False]
['text':' else','line_number':203,'multiline':False]
['text':'   C* = floor(C*) (logical right shift; C has p decimal digits,','line_number':204,'multiline':False]
['text':'       correct by Property 1)','line_number':205,'multiline':False]
['text':' n = C* * 10^(e+x)','line_number':206,'multiline':False]
['text':' shift right C* by Ex-64 = bid_shiftright128[ind]','line_number':208,'multiline':False]
['text':' 0 <= shift <= 39','line_number':209,'multiline':False]
['text':' if the result was a midpoint it was rounded away from zero, so','line_number':212,'multiline':False]
['text':' it will need a correction','line_number':213,'multiline':False]
['text':' check for midpoints','line_number':214,'multiline':False]
['text':' bid_ten2mk128trunc[ind -1].w[1] is identical to ','line_number':217,'multiline':False]
['text':' bid_ten2mk128[ind -1].w[1]','line_number':218,'multiline':False]
['text':' the result is a midpoint; round to nearest','line_number':219,'multiline':False]
['text':' Cstar is odd; MP in [EVEN, ODD]','line_number':220,'multiline':False]
['text':' if floor(C*) is odd C = floor(C*) - 1; the result >= 1','line_number':221,'multiline':False]
['text':' Cstar is now even','line_number':222,'multiline':False]
['text':' else MP in [ODD, EVEN]','line_number':223,'multiline':False]
['text':' 1 <= q <= 7','line_number':230,'multiline':False]
['text':' res = +/-C (exact)','line_number':231,'multiline':False]
['text':' if (exp > 0) => 1 <= exp <= 18, 1 <= q <= 7, 2 <= q + exp <= 20','line_number':236,'multiline':False]
['text':' (the upper limit of 20 on q + exp is due to the fact that ','line_number':237,'multiline':False]
['text':' +/-C * 10^exp is guaranteed to fit in 64 bits) ','line_number':238,'multiline':False]
['text':' res = +/-C * 10^exp (exact)','line_number':239,'multiline':False]
['text':'****************************************************************************
 *  BID32_to_int64_xrnint
 ***************************************************************************','line_number':249,'multiline':True]
['text':' unbiased exponent','line_number':269,'multiline':False]
['text':' Note: C1 represents x_significand (BID_UINT32)','line_number':270,'multiline':False]
['text':' C* represents up to 16 decimal digits ~ 54 bits','line_number':277,'multiline':False]
['text':' check for NaN or Infinity','line_number':281,'multiline':False]
['text':' set invalid flag','line_number':283,'multiline':False]
['text':' return Integer Indefinite','line_number':285,'multiline':False]
['text':' unpack x','line_number':289,'multiline':False]
['text':' 0 for positive, MASK_SIGN32 for negative','line_number':290,'multiline':False]
['text':' if steering bits are 11 (condition will be 0), then exponent is G[0:w+1] =>','line_number':291,'multiline':False]
['text':' biased','line_number':293,'multiline':False]
['text':' non-canonical','line_number':295,'multiline':False]
['text':' biased','line_number':300,'multiline':False]
['text':' check for zeros (possibly from non-canonical values)','line_number':304,'multiline':False]
['text':' x is 0','line_number':306,'multiline':False]
['text':' x is not special and is not zero','line_number':310,'multiline':False]
['text':' q = nr. of decimal digits in x (1 <= q <= 7)','line_number':312,'multiline':False]
['text':'  determine first the nr. of bits in x','line_number':313,'multiline':False]
['text':' exact conversion','line_number':314,'multiline':False]
['text':' unbiased exponent','line_number':322,'multiline':False]
['text':' x >= 10^19 ~= 2^63.11... (cannot fit in BID_SINT64)','line_number':324,'multiline':False]
['text':' set invalid flag','line_number':325,'multiline':False]
['text':' return Integer Indefinite','line_number':327,'multiline':False]
['text':' x = c(0)c(1)...c(q-1)00...0 (19 dec. digits)','line_number':330,'multiline':False]
['text':' in this case 2^63.11... ~= 10^19 <= x < 10^20 ~= 2^66.43...','line_number':331,'multiline':False]
['text':' so x rounded to an integer may or may not fit in a signed 64-bit int','line_number':332,'multiline':False]
['text':' the cases that do not fit are identified here; the ones that fit','line_number':333,'multiline':False]
['text':' fall through and will be handled with other cases further,','line_number':334,'multiline':False]
['text':' under '1 <= q + exp <= 19'','line_number':335,'multiline':False]
['text':' if n < 0 and q + exp = 19','line_number':336,'multiline':False]
['text':' if n < -2^63 - 1/2 then n is too large','line_number':337,'multiline':False]
['text':' <=> c(0)c(1)...c(q-1)00...0[19 dec. digits] > 2^63+1/2','line_number':338,'multiline':False]
['text':' <=> 0.c(0)c(1)...c(q-1) * 10^20 > 0x50000000000000005, 1<=q<=7','line_number':339,'multiline':False]
['text':' <=> C * 10^(20-q) > 0x50000000000000005, 1<=q<=7','line_number':340,'multiline':False]
['text':' 1 <= q <= 7 => 13 <= 20-q <= 19 => 10^(20-q) is 64-bit, and so is C1','line_number':341,'multiline':False]
['text':' Note: C1 * 10^(11-q) has 19 or 20 digits; 0x50000000000000005, has 20','line_number':343,'multiline':False]
['text':' set invalid flag','line_number':345,'multiline':False]
['text':' return Integer Indefinite','line_number':347,'multiline':False]
['text':' else cases that can be rounded to a 64-bit int fall through','line_number':351,'multiline':False]
['text':' to '1 <= q + exp <= 19'','line_number':352,'multiline':False]
['text':' if n > 0 and q + exp = 19','line_number':353,'multiline':False]
['text':' if n >= 2^63 - 1/2 then n is too large','line_number':354,'multiline':False]
['text':' <=> c(0)c(1)...c(q-1)00...0[19 dec. digits] >= 2^63-1/2','line_number':355,'multiline':False]
['text':' <=> if 0.c(0)c(1)...c(q-1) * 10^20 >= 0x4fffffffffffffffb, 1<=q<=7','line_number':356,'multiline':False]
['text':' <=> if C * 10^(20-q) >= 0x4fffffffffffffffb, 1<=q<=7','line_number':357,'multiline':False]
['text':' 1 <= q <= 7 => 13 <= 20-q <= 19 => 10^(20-q) is 64-bit, and so is C1','line_number':360,'multiline':False]
['text':' set invalid flag','line_number':364,'multiline':False]
['text':' return Integer Indefinite','line_number':366,'multiline':False]
['text':' else cases that can be rounded to a 64-bit int fall through','line_number':370,'multiline':False]
['text':' to '1 <= q + exp <= 19'','line_number':371,'multiline':False]
['text':' end else if n > 0 and q + exp = 19','line_number':372,'multiline':False]
['text':' end else if ((q + exp) == 19)','line_number':373,'multiline':False]
['text':' n is not too large to be converted to int64: -2^63-1/2 <= n < 2^63-1/2','line_number':375,'multiline':False]
['text':' Note: some of the cases tested for above fall through to this point','line_number':376,'multiline':False]
['text':' n = +/-0.0...c(0)c(1)...c(q-1)','line_number':377,'multiline':False]
['text':' set inexact flag','line_number':378,'multiline':False]
['text':' return 0','line_number':380,'multiline':False]
['text':' n = +/-0.c(0)c(1)...c(q-1)','line_number':383,'multiline':False]
['text':' if 0.c(0)c(1)...c(q-1) <= 0.5 <=> c(0)c(1)...c(q-1) <= 5 * 10^(q-1)','line_number':384,'multiline':False]
['text':'   res = 0','line_number':385,'multiline':False]
['text':' else','line_number':386,'multiline':False]
['text':'   res = +/-1','line_number':387,'multiline':False]
['text':' 0 <= ind <= 6','line_number':388,'multiline':False]
['text':' return 0','line_number':390,'multiline':False]
['text':' n < 0','line_number':391,'multiline':False]
['text':' return -1','line_number':392,'multiline':False]
['text':' n > 0','line_number':393,'multiline':False]
['text':' return +1','line_number':394,'multiline':False]
['text':' set inexact flag','line_number':396,'multiline':False]
['text':' if (1 <= q + exp <= 19, 1 <= q <= 7, -6 <= exp <= 18)','line_number':398,'multiline':False]
['text':' -2^63-1/2 <= x <= -1 or 1 <= x < 2^63-1/2 so x can be rounded','line_number':399,'multiline':False]
['text':' to nearest to a 64-bit signed integer','line_number':400,'multiline':False]
['text':' 2 <= q <= 7, -6 <= exp <= -1, 1 <= q + exp <= 19','line_number':401,'multiline':False]
['text':' 1 <= ind <= 6; ind is a synonym for 'x'','line_number':402,'multiline':False]
['text':' chop off ind digits from the lower part of C1','line_number':403,'multiline':False]
['text':' C1 = C1 + 1/2 * 10^ind where the result C1 fits in 64 bits','line_number':404,'multiline':False]
['text':' calculate C* and f*','line_number':406,'multiline':False]
['text':' C* is actually floor(C*) in this case','line_number':407,'multiline':False]
['text':' C* and f* need shifting and masking, as shown by','line_number':408,'multiline':False]
['text':' bid_shiftright128[] and bid_maskhigh128[]','line_number':409,'multiline':False]
['text':' 1 <= x <= 6 ','line_number':410,'multiline':False]
['text':' kx = 10^(-x) = bid_ten2mk64[ind - 1]','line_number':411,'multiline':False]
['text':' C* = (C1 + 1/2 * 10^x) * 10^(-x)','line_number':412,'multiline':False]
['text':' the approximation of 10^(-x) was rounded up to 54 bits','line_number':413,'multiline':False]
['text':' the top Ex bits of 10^(-x) are T* = bid_ten2mk128trunc[ind].w[0], e.g.','line_number':418,'multiline':False]
['text':' if x=1, T*=bid_ten2mk128trunc[0].w[0]=0x1999999999999999','line_number':419,'multiline':False]
['text':' if (0 < f* < 10^(-x)) then the result is a midpoint','line_number':420,'multiline':False]
['text':'   if floor(C*) is even then C* = floor(C*) - logical right','line_number':421,'multiline':False]
['text':'       shift; C* has p decimal digits, correct by Prop. 1)','line_number':422,'multiline':False]
['text':'   else if floor(C*) is odd C* = floor(C*)-1 (logical right','line_number':423,'multiline':False]
['text':'       shift; C* has p decimal digits, correct by Pr. 1)','line_number':424,'multiline':False]
['text':' else','line_number':425,'multiline':False]
['text':'   C* = floor(C*) (logical right shift; C has p decimal digits,','line_number':426,'multiline':False]
['text':'       correct by Property 1)','line_number':427,'multiline':False]
['text':' n = C* * 10^(e+x)','line_number':428,'multiline':False]
['text':' shift right C* by Ex-64 = bid_shiftright128[ind]','line_number':430,'multiline':False]
['text':' 0 <= shift <= 39','line_number':431,'multiline':False]
['text':' determine inexactness of the rounding of C*','line_number':433,'multiline':False]
['text':' if (0 < f* - 1/2 < 10^(-x)) then','line_number':434,'multiline':False]
['text':'   the result is exact','line_number':435,'multiline':False]
['text':' else // if (f* - 1/2 > T*) then','line_number':436,'multiline':False]
['text':'   the result is inexact','line_number':437,'multiline':False]
['text':' f* > 1/2 and the result may be exact','line_number':440,'multiline':False]
['text':' f* - 1/2','line_number':441,'multiline':False]
['text':' bid_ten2mk128trunc[ind -1].w[1] is identical to ','line_number':443,'multiline':False]
['text':' bid_ten2mk128[ind -1].w[1]','line_number':444,'multiline':False]
['text':' set the inexact flag','line_number':445,'multiline':False]
['text':' else the result is exact','line_number':447,'multiline':False]
['text':' the result is inexact; f2* <= 1/2','line_number':448,'multiline':False]
['text':' set the inexact flag','line_number':449,'multiline':False]
['text':' if 3 <= ind - 1 <= 14','line_number':452,'multiline':False]
['text':' f2* > 1/2 and the result may be exact','line_number':455,'multiline':False]
['text':' Calculate f2* - 1/2','line_number':456,'multiline':False]
['text':' bid_ten2mk128trunc[ind -1].w[1] is identical to ','line_number':459,'multiline':False]
['text':' bid_ten2mk128[ind -1].w[1]','line_number':460,'multiline':False]
['text':' set the inexact flag','line_number':461,'multiline':False]
['text':' else the result is exact','line_number':463,'multiline':False]
['text':' the result is inexact; f2* <= 1/2','line_number':464,'multiline':False]
['text':' set the inexact flag','line_number':465,'multiline':False]
['text':' if the result was a midpoint it was rounded away from zero, so','line_number':470,'multiline':False]
['text':' it will need a correction','line_number':471,'multiline':False]
['text':' check for midpoints','line_number':472,'multiline':False]
['text':' bid_ten2mk128trunc[ind -1].w[1] is identical to ','line_number':475,'multiline':False]
['text':' bid_ten2mk128[ind -1].w[1]','line_number':476,'multiline':False]
['text':' the result is a midpoint; round to nearest','line_number':477,'multiline':False]
['text':' Cstar is odd; MP in [EVEN, ODD]','line_number':478,'multiline':False]
['text':' if floor(C*) is odd C = floor(C*) - 1; the result >= 1','line_number':479,'multiline':False]
['text':' Cstar is now even','line_number':480,'multiline':False]
['text':' else MP in [ODD, EVEN]','line_number':481,'multiline':False]
['text':' 1 <= q <= 7','line_number':488,'multiline':False]
['text':' res = +/-C (exact)','line_number':489,'multiline':False]
['text':' if (exp > 0) => 1 <= exp <= 18, 1 <= q <= 7, 2 <= q + exp <= 20','line_number':494,'multiline':False]
['text':' (the upper limit of 20 on q + exp is due to the fact that ','line_number':495,'multiline':False]
['text':' +/-C * 10^exp is guaranteed to fit in 64 bits) ','line_number':496,'multiline':False]
['text':' res = +/-C * 10^exp (exact)','line_number':497,'multiline':False]
['text':'****************************************************************************
 *  BID32_to_int64_floor
 ***************************************************************************','line_number':507,'multiline':True]
['text':' unbiased exponent','line_number':527,'multiline':False]
['text':' Note: C1 represents x_significand (BID_UINT32)','line_number':528,'multiline':False]
['text':' C* represents up to 16 decimal digits ~ 54 bits','line_number':534,'multiline':False]
['text':' check for NaN or Infinity','line_number':538,'multiline':False]
['text':' set invalid flag','line_number':540,'multiline':False]
['text':' return Integer Indefinite','line_number':542,'multiline':False]
['text':' unpack x','line_number':546,'multiline':False]
['text':' 0 for positive, MASK_SIGN32 for negative','line_number':547,'multiline':False]
['text':' if steering bits are 11 (condition will be 0), then exponent is G[0:w+1] =>','line_number':548,'multiline':False]
['text':' biased','line_number':550,'multiline':False]
['text':' non-canonical','line_number':552,'multiline':False]
['text':' biased','line_number':557,'multiline':False]
['text':' check for zeros (possibly from non-canonical values)','line_number':561,'multiline':False]
['text':' x is 0','line_number':563,'multiline':False]
['text':' x is not special and is not zero','line_number':567,'multiline':False]
['text':' q = nr. of decimal digits in x (1 <= q <= 7)','line_number':569,'multiline':False]
['text':'  determine first the nr. of bits in x','line_number':570,'multiline':False]
['text':' exact conversion','line_number':571,'multiline':False]
['text':' unbiased exponent','line_number':579,'multiline':False]
['text':' x >= 10^19 ~= 2^63.11... (cannot fit in BID_SINT64)','line_number':581,'multiline':False]
['text':' set invalid flag','line_number':582,'multiline':False]
['text':' return Integer Indefinite','line_number':584,'multiline':False]
['text':' x = c(0)c(1)...c(q-1)00...0 (19 dec. digits)','line_number':587,'multiline':False]
['text':' in this case 2^63.11... ~= 10^19 <= x < 10^20 ~= 2^66.43...','line_number':588,'multiline':False]
['text':' so x rounded to an integer may or may not fit in a signed 64-bit int','line_number':589,'multiline':False]
['text':' the cases that do not fit are identified here; the ones that fit','line_number':590,'multiline':False]
['text':' fall through and will be handled with other cases further,','line_number':591,'multiline':False]
['text':' under '1 <= q + exp <= 19'','line_number':592,'multiline':False]
['text':' if n < 0 and q + exp = 19','line_number':593,'multiline':False]
['text':' if n < -2^63 then n is too large','line_number':594,'multiline':False]
['text':' <=> c(0)c(1)...c(q-1)00...0[19 dec. digits] > 2^63','line_number':595,'multiline':False]
['text':' <=> 0.c(0)c(1)...c(q-1) * 10^20 > 0x50000000000000000, 1<=q<=7','line_number':596,'multiline':False]
['text':' <=> C * 10^(20-q) > 0x50000000000000000, 1<=q<=7','line_number':597,'multiline':False]
['text':' 1 <= q <= 7 => 13 <= 20-q <= 19 => 10^(20-q) is 64-bit, and so is C1','line_number':598,'multiline':False]
['text':' Note: C1 * 10^(11-q) has 19 or 20 digits; 0x5000000000000000a, has 20','line_number':600,'multiline':False]
['text':' set invalid flag','line_number':602,'multiline':False]
['text':' return Integer Indefinite','line_number':604,'multiline':False]
['text':' else cases that can be rounded to a 64-bit int fall through','line_number':608,'multiline':False]
['text':' to '1 <= q + exp <= 19'','line_number':609,'multiline':False]
['text':' if n > 0 and q + exp = 19','line_number':610,'multiline':False]
['text':' if n >= 2^63 then n is too large','line_number':611,'multiline':False]
['text':' <=> c(0)c(1)...c(q-1)00...0[19 dec. digits] >= 2^63','line_number':612,'multiline':False]
['text':' <=> if 0.c(0)c(1)...c(q-1) * 10^20 >= 0x50000000000000000, 1<=q<=7','line_number':613,'multiline':False]
['text':' <=> if C * 10^(20-q) >= 0x50000000000000000, 1<=q<=7','line_number':614,'multiline':False]
['text':' 1 <= q <= 7 => 13 <= 20-q <= 19 => 10^(20-q) is 64-bit, and so is C1','line_number':617,'multiline':False]
['text':' actually C.w[1] == 0x05ull && C.w[0] >= 0x0000000000000000ull) {','line_number':620,'multiline':False]
['text':' set invalid flag','line_number':621,'multiline':False]
['text':' return Integer Indefinite','line_number':623,'multiline':False]
['text':' else cases that can be rounded to a 64-bit int fall through','line_number':627,'multiline':False]
['text':' to '1 <= q + exp <= 19'','line_number':628,'multiline':False]
['text':' end else if n > 0 and q + exp = 19','line_number':629,'multiline':False]
['text':' end else if ((q + exp) == 19)','line_number':630,'multiline':False]
['text':' n is not too large to be converted to int64: -2^63 <= n < 2^63','line_number':632,'multiline':False]
['text':' Note: some of the cases tested for above fall through to this point','line_number':633,'multiline':False]
['text':' n = +/-0.0...c(0)c(1)...c(q-1)','line_number':634,'multiline':False]
['text':' return -1 or 0','line_number':635,'multiline':False]
['text':' if (1 <= q + exp <= 19, 1 <= q <= 7, -6 <= exp <= 18)','line_number':641,'multiline':False]
['text':' -2^63 <= x <= -1 or 1 <= x < 2^63 so x can be rounded','line_number':642,'multiline':False]
['text':' to nearest to a 64-bit signed integer','line_number':643,'multiline':False]
['text':' 2 <= q <= 7, -6 <= exp <= -1, 1 <= q + exp <= 19','line_number':644,'multiline':False]
['text':' 1 <= ind <= 6; ind is a synonym for 'x'','line_number':645,'multiline':False]
['text':' chop off ind digits from the lower part of C1','line_number':646,'multiline':False]
['text':' C1 fits in 64 bits','line_number':647,'multiline':False]
['text':' calculate C* and f*','line_number':648,'multiline':False]
['text':' C* is actually floor(C*) in this case','line_number':649,'multiline':False]
['text':' C* and f* need shifting and masking, as shown by','line_number':650,'multiline':False]
['text':' bid_shiftright128[] and bid_maskhigh128[]','line_number':651,'multiline':False]
['text':' 1 <= x <= 6 ','line_number':652,'multiline':False]
['text':' kx = 10^(-x) = bid_ten2mk64[ind - 1]','line_number':653,'multiline':False]
['text':' C* = C1 * 10^(-x)','line_number':654,'multiline':False]
['text':' the approximation of 10^(-x) was rounded up to 54 bits','line_number':655,'multiline':False]
['text':' the top Ex bits of 10^(-x) are T* = bid_ten2mk128trunc[ind].w[0], e.g.','line_number':660,'multiline':False]
['text':' if x=1, T*=bid_ten2mk128trunc[0].w[0]=0x1999999999999999','line_number':661,'multiline':False]
['text':' C* = floor(C*) (logical right shift; C has p decimal digits,','line_number':662,'multiline':False]
['text':'     correct by Property 1)','line_number':663,'multiline':False]
['text':' n = C* * 10^(e+x)','line_number':664,'multiline':False]
['text':' shift right C* by Ex-64 = bid_shiftright128[ind]','line_number':666,'multiline':False]
['text':' 0 <= shift <= 39','line_number':667,'multiline':False]
['text':' determine inexactness of the rounding of C*','line_number':669,'multiline':False]
['text':' if (0 < f* < 10^(-x)) then','line_number':670,'multiline':False]
['text':'   the result is exact','line_number':671,'multiline':False]
['text':' else // if (f* > T*) then','line_number':672,'multiline':False]
['text':'   the result is inexact','line_number':673,'multiline':False]
['text':' fstar.w[1] is 0','line_number':674,'multiline':False]
['text':' bid_ten2mk128trunc[ind -1].w[1] is identical to','line_number':676,'multiline':False]
['text':' bid_ten2mk128[ind -1].w[1]','line_number':677,'multiline':False]
['text':' negative and inexact','line_number':678,'multiline':False]
['text':' else the result is exact','line_number':681,'multiline':False]
['text':' if 3 <= ind - 1 <= 14','line_number':682,'multiline':False]
['text':' bid_ten2mk128trunc[ind -1].w[1] is identical to','line_number':684,'multiline':False]
['text':' bid_ten2mk128[ind -1].w[1]','line_number':685,'multiline':False]
['text':' negative and inexact','line_number':686,'multiline':False]
['text':' else the result is exact','line_number':689,'multiline':False]
['text':' 1 <= q <= 7','line_number':697,'multiline':False]
['text':' res = +/-C (exact)','line_number':698,'multiline':False]
['text':' if (exp > 0) => 1 <= exp <= 18, 1 <= q <= 7, 2 <= q + exp <= 20','line_number':703,'multiline':False]
['text':' (the upper limit of 20 on q + exp is due to the fact that ','line_number':704,'multiline':False]
['text':' +/-C * 10^exp is guaranteed to fit in 64 bits) ','line_number':705,'multiline':False]
['text':' res = +/-C * 10^exp (exact)','line_number':706,'multiline':False]
['text':'****************************************************************************
 *  BID32_to_int64_xfloor
 ***************************************************************************','line_number':716,'multiline':True]
['text':' unbiased exponent','line_number':736,'multiline':False]
['text':' Note: C1 represents x_significand (BID_UINT32)','line_number':737,'multiline':False]
['text':' C* represents up to 16 decimal digits ~ 54 bits','line_number':743,'multiline':False]
['text':' check for NaN or Infinity','line_number':747,'multiline':False]
['text':' set invalid flag','line_number':749,'multiline':False]
['text':' return Integer Indefinite','line_number':751,'multiline':False]
['text':' unpack x','line_number':755,'multiline':False]
['text':' 0 for positive, MASK_SIGN32 for negative','line_number':756,'multiline':False]
['text':' if steering bits are 11 (condition will be 0), then exponent is G[0:w+1] =>','line_number':757,'multiline':False]
['text':' biased','line_number':759,'multiline':False]
['text':' non-canonical','line_number':761,'multiline':False]
['text':' biased','line_number':766,'multiline':False]
['text':' check for zeros (possibly from non-canonical values)','line_number':770,'multiline':False]
['text':' x is 0','line_number':772,'multiline':False]
['text':' x is not special and is not zero','line_number':776,'multiline':False]
['text':' q = nr. of decimal digits in x (1 <= q <= 7)','line_number':778,'multiline':False]
['text':'  determine first the nr. of bits in x','line_number':779,'multiline':False]
['text':' exact conversion','line_number':780,'multiline':False]
['text':' unbiased exponent','line_number':788,'multiline':False]
['text':' x >= 10^19 ~= 2^63.11... (cannot fit in BID_SINT64)','line_number':790,'multiline':False]
['text':' set invalid flag','line_number':791,'multiline':False]
['text':' return Integer Indefinite','line_number':793,'multiline':False]
['text':' x = c(0)c(1)...c(q-1)00...0 (19 dec. digits)','line_number':796,'multiline':False]
['text':' in this case 2^63.11... ~= 10^19 <= x < 10^20 ~= 2^66.43...','line_number':797,'multiline':False]
['text':' so x rounded to an integer may or may not fit in a signed 64-bit int','line_number':798,'multiline':False]
['text':' the cases that do not fit are identified here; the ones that fit','line_number':799,'multiline':False]
['text':' fall through and will be handled with other cases further,','line_number':800,'multiline':False]
['text':' under '1 <= q + exp <= 19'','line_number':801,'multiline':False]
['text':' if n < 0 and q + exp = 19','line_number':802,'multiline':False]
['text':' if n < -2^63 then n is too large','line_number':803,'multiline':False]
['text':' <=> c(0)c(1)...c(q-1)00...0[19 dec. digits] > 2^63','line_number':804,'multiline':False]
['text':' <=> 0.c(0)c(1)...c(q-1) * 10^20 > 0x50000000000000000, 1<=q<=7','line_number':805,'multiline':False]
['text':' <=> C * 10^(20-q) > 0x50000000000000000, 1<=q<=7','line_number':806,'multiline':False]
['text':' 1 <= q <= 7 => 13 <= 20-q <= 19 => 10^(20-q) is 64-bit, and so is C1','line_number':807,'multiline':False]
['text':' Note: C1 * 10^(11-q) has 19 or 20 digits; 0x5000000000000000a, has 20','line_number':809,'multiline':False]
['text':' set invalid flag','line_number':811,'multiline':False]
['text':' return Integer Indefinite','line_number':813,'multiline':False]
['text':' else cases that can be rounded to a 64-bit int fall through','line_number':817,'multiline':False]
['text':' to '1 <= q + exp <= 19'','line_number':818,'multiline':False]
['text':' if n > 0 and q + exp = 19','line_number':819,'multiline':False]
['text':' if n >= 2^63 then n is too large','line_number':820,'multiline':False]
['text':' <=> c(0)c(1)...c(q-1)00...0[19 dec. digits] >= 2^63','line_number':821,'multiline':False]
['text':' <=> if 0.c(0)c(1)...c(q-1) * 10^20 >= 0x50000000000000000, 1<=q<=7','line_number':822,'multiline':False]
['text':' <=> if C * 10^(20-q) >= 0x50000000000000000, 1<=q<=7','line_number':823,'multiline':False]
['text':' 1 <= q <= 7 => 13 <= 20-q <= 19 => 10^(20-q) is 64-bit, and so is C1','line_number':826,'multiline':False]
['text':' actually C.w[1] == 0x05ull && C.w[0] >= 0x0000000000000000ull) {','line_number':829,'multiline':False]
['text':' set invalid flag','line_number':830,'multiline':False]
['text':' return Integer Indefinite','line_number':832,'multiline':False]
['text':' else cases that can be rounded to a 64-bit int fall through','line_number':836,'multiline':False]
['text':' to '1 <= q + exp <= 19'','line_number':837,'multiline':False]
['text':' end else if n > 0 and q + exp = 19','line_number':838,'multiline':False]
['text':' end else if ((q + exp) == 19)','line_number':839,'multiline':False]
['text':' n is not too large to be converted to int64: -2^63 <= n < 2^63','line_number':841,'multiline':False]
['text':' Note: some of the cases tested for above fall through to this point','line_number':842,'multiline':False]
['text':' n = +/-0.0...c(0)c(1)...c(q-1)','line_number':843,'multiline':False]
['text':' set inexact flag','line_number':844,'multiline':False]
['text':' return -1 or 0','line_number':846,'multiline':False]
['text':' if (1 <= q + exp <= 19, 1 <= q <= 7, -6 <= exp <= 18)','line_number':852,'multiline':False]
['text':' -2^63 <= x <= -1 or 1 <= x < 2^63 so x can be rounded','line_number':853,'multiline':False]
['text':' to nearest to a 64-bit signed integer','line_number':854,'multiline':False]
['text':' 2 <= q <= 7, -6 <= exp <= -1, 1 <= q + exp <= 19','line_number':855,'multiline':False]
['text':' 1 <= ind <= 6; ind is a synonym for 'x'','line_number':856,'multiline':False]
['text':' chop off ind digits from the lower part of C1','line_number':857,'multiline':False]
['text':' C1 fits in 64 bits','line_number':858,'multiline':False]
['text':' calculate C* and f*','line_number':859,'multiline':False]
['text':' C* is actually floor(C*) in this case','line_number':860,'multiline':False]
['text':' C* and f* need shifting and masking, as shown by','line_number':861,'multiline':False]
['text':' bid_shiftright128[] and bid_maskhigh128[]','line_number':862,'multiline':False]
['text':' 1 <= x <= 6 ','line_number':863,'multiline':False]
['text':' kx = 10^(-x) = bid_ten2mk64[ind - 1]','line_number':864,'multiline':False]
['text':' C* = C1 * 10^(-x)','line_number':865,'multiline':False]
['text':' the approximation of 10^(-x) was rounded up to 54 bits','line_number':866,'multiline':False]
['text':' the top Ex bits of 10^(-x) are T* = bid_ten2mk128trunc[ind].w[0], e.g.','line_number':871,'multiline':False]
['text':' if x=1, T*=bid_ten2mk128trunc[0].w[0]=0x1999999999999999','line_number':872,'multiline':False]
['text':' C* = floor(C*) (logical right shift; C has p decimal digits,','line_number':873,'multiline':False]
['text':'     correct by Property 1)','line_number':874,'multiline':False]
['text':' n = C* * 10^(e+x)','line_number':875,'multiline':False]
['text':' shift right C* by Ex-64 = bid_shiftright128[ind]','line_number':877,'multiline':False]
['text':' 0 <= shift <= 39','line_number':878,'multiline':False]
['text':' determine inexactness of the rounding of C*','line_number':880,'multiline':False]
['text':' if (0 < f* < 10^(-x)) then','line_number':881,'multiline':False]
['text':'   the result is exact','line_number':882,'multiline':False]
['text':' else // if (f* > T*) then','line_number':883,'multiline':False]
['text':'   the result is inexact','line_number':884,'multiline':False]
['text':' fstar.w[1] is 0','line_number':885,'multiline':False]
['text':' bid_ten2mk128trunc[ind -1].w[1] is identical to','line_number':887,'multiline':False]
['text':' bid_ten2mk128[ind -1].w[1]','line_number':888,'multiline':False]
['text':' negative and inexact','line_number':889,'multiline':False]
['text':' set the inexact flag','line_number':892,'multiline':False]
['text':' else the result is exact','line_number':894,'multiline':False]
['text':' if 3 <= ind - 1 <= 14','line_number':895,'multiline':False]
['text':' bid_ten2mk128trunc[ind -1].w[1] is identical to','line_number':897,'multiline':False]
['text':' bid_ten2mk128[ind -1].w[1]','line_number':898,'multiline':False]
['text':' negative and inexact','line_number':899,'multiline':False]
['text':' set the inexact flag','line_number':902,'multiline':False]
['text':' else the result is exact','line_number':904,'multiline':False]
['text':' 1 <= q <= 7','line_number':912,'multiline':False]
['text':' res = +/-C (exact)','line_number':913,'multiline':False]
['text':' if (exp > 0) => 1 <= exp <= 18, 1 <= q <= 7, 2 <= q + exp <= 20','line_number':918,'multiline':False]
['text':' (the upper limit of 20 on q + exp is due to the fact that ','line_number':919,'multiline':False]
['text':' +/-C * 10^exp is guaranteed to fit in 64 bits) ','line_number':920,'multiline':False]
['text':' res = +/-C * 10^exp (exact)','line_number':921,'multiline':False]
['text':'****************************************************************************
 *  BID32_to_int64_ceil
 ***************************************************************************','line_number':931,'multiline':True]
['text':' unbiased exponent','line_number':951,'multiline':False]
['text':' Note: C1 represents x_significand (BID_UINT32)','line_number':952,'multiline':False]
['text':' C* represents up to 16 decimal digits ~ 54 bits','line_number':958,'multiline':False]
['text':' check for NaN or Infinity','line_number':962,'multiline':False]
['text':' set invalid flag','line_number':964,'multiline':False]
['text':' return Integer Indefinite','line_number':966,'multiline':False]
['text':' unpack x','line_number':970,'multiline':False]
['text':' 0 for positive, MASK_SIGN32 for negative','line_number':971,'multiline':False]
['text':' if steering bits are 11 (condition will be 0), then exponent is G[0:w+1] =>','line_number':972,'multiline':False]
['text':' biased','line_number':974,'multiline':False]
['text':' non-canonical','line_number':976,'multiline':False]
['text':' biased','line_number':981,'multiline':False]
['text':' check for zeros (possibly from non-canonical values)','line_number':985,'multiline':False]
['text':' x is 0','line_number':987,'multiline':False]
['text':' x is not special and is not zero','line_number':991,'multiline':False]
['text':' q = nr. of decimal digits in x (1 <= q <= 7)','line_number':993,'multiline':False]
['text':'  determine first the nr. of bits in x','line_number':994,'multiline':False]
['text':' exact conversion','line_number':995,'multiline':False]
['text':' unbiased exponent','line_number':1003,'multiline':False]
['text':' x >= 10^19 ~= 2^63.11... (cannot fit in BID_SINT64)','line_number':1005,'multiline':False]
['text':' set invalid flag','line_number':1006,'multiline':False]
['text':' return Integer Indefinite','line_number':1008,'multiline':False]
['text':' x = c(0)c(1)...c(q-1)00...0 (19 dec. digits)','line_number':1011,'multiline':False]
['text':' in this case 2^63.11... ~= 10^19 <= x < 10^20 ~= 2^66.43...','line_number':1012,'multiline':False]
['text':' so x rounded to an integer may or may not fit in a signed 64-bit int','line_number':1013,'multiline':False]
['text':' the cases that do not fit are identified here; the ones that fit','line_number':1014,'multiline':False]
['text':' fall through and will be handled with other cases further,','line_number':1015,'multiline':False]
['text':' under '1 <= q + exp <= 19'','line_number':1016,'multiline':False]
['text':' if n < 0 and q + exp = 19','line_number':1017,'multiline':False]
['text':' if n <= -2^63 - 1 then n is too large','line_number':1018,'multiline':False]
['text':' <=> c(0)c(1)...c(q-1)00...0[19 dec. digits] >= 2^63+1','line_number':1019,'multiline':False]
['text':' <=> 0.c(0)c(1)...c(q-1) * 10^20 >= 0x5000000000000000a, 1<=q<=7','line_number':1020,'multiline':False]
['text':' <=> C * 10^(20-q) >= 0x5000000000000000a, 1<=q<=7','line_number':1021,'multiline':False]
['text':' 1 <= q <= 7 => 13 <= 20-q <= 19 => 10^(20-q) is 64-bit, and so is C1','line_number':1022,'multiline':False]
['text':' Note: C1 * 10^(11-q) has 19 or 20 digits; 0x5000000000000000a, has 20','line_number':1024,'multiline':False]
['text':' set invalid flag','line_number':1026,'multiline':False]
['text':' return Integer Indefinite','line_number':1028,'multiline':False]
['text':' else cases that can be rounded to a 64-bit int fall through','line_number':1032,'multiline':False]
['text':' to '1 <= q + exp <= 19'','line_number':1033,'multiline':False]
['text':' if n > 0 and q + exp = 19','line_number':1034,'multiline':False]
['text':' if n > 2^63 - 1 then n is too large','line_number':1035,'multiline':False]
['text':' <=> c(0)c(1)...c(q-1)00...0[19 dec. digits] > 2^63 - 1','line_number':1036,'multiline':False]
['text':' <=> if 0.c(0)c(1)...c(q-1) * 10^20 > 0x4fffffffffffffff6, 1<=q<=7','line_number':1037,'multiline':False]
['text':' <=> if C * 10^(20-q) > 0x4fffffffffffffff6, 1<=q<=7','line_number':1038,'multiline':False]
['text':' 1 <= q <= 7 => 13 <= 20-q <= 19 => 10^(20-q) is 64-bit, and so is C1','line_number':1041,'multiline':False]
['text':' set invalid flag','line_number':1045,'multiline':False]
['text':' return Integer Indefinite','line_number':1047,'multiline':False]
['text':' else cases that can be rounded to a 64-bit int fall through','line_number':1051,'multiline':False]
['text':' to '1 <= q + exp <= 19'','line_number':1052,'multiline':False]
['text':' end else if n > 0 and q + exp = 19','line_number':1053,'multiline':False]
['text':' end else if ((q + exp) == 19)','line_number':1054,'multiline':False]
['text':' n is not too large to be converted to int64: -2^63-1 < n < 2^63','line_number':1056,'multiline':False]
['text':' Note: some of the cases tested for above fall through to this point','line_number':1057,'multiline':False]
['text':' n = +/-0.0...c(0)c(1)...c(q-1)','line_number':1058,'multiline':False]
['text':' return 0 or 1','line_number':1059,'multiline':False]
['text':' if (1 <= q + exp <= 19, 1 <= q <= 7, -6 <= exp <= 18)','line_number':1065,'multiline':False]
['text':' -2^63-1 < x <= -1 or 1 <= x <= 2^63 - 1 so x can be rounded','line_number':1066,'multiline':False]
['text':' to nearest to a 64-bit signed integer','line_number':1067,'multiline':False]
['text':' 2 <= q <= 7, -6 <= exp <= -1, 1 <= q + exp <= 19','line_number':1068,'multiline':False]
['text':' 1 <= ind <= 6; ind is a synonym for 'x'','line_number':1069,'multiline':False]
['text':' chop off ind digits from the lower part of C1','line_number':1070,'multiline':False]
['text':' C1 fits in 64 bits','line_number':1071,'multiline':False]
['text':' calculate C* and f*','line_number':1072,'multiline':False]
['text':' C* is actually floor(C*) in this case','line_number':1073,'multiline':False]
['text':' C* and f* need shifting and masking, as shown by','line_number':1074,'multiline':False]
['text':' bid_shiftright128[] and bid_maskhigh128[]','line_number':1075,'multiline':False]
['text':' 1 <= x <= 6 ','line_number':1076,'multiline':False]
['text':' kx = 10^(-x) = bid_ten2mk64[ind - 1]','line_number':1077,'multiline':False]
['text':' C* = C1 * 10^(-x)','line_number':1078,'multiline':False]
['text':' the approximation of 10^(-x) was rounded up to 54 bits','line_number':1079,'multiline':False]
['text':' the top Ex bits of 10^(-x) are T* = bid_ten2mk128trunc[ind].w[0], e.g.','line_number':1084,'multiline':False]
['text':' if x=1, T*=bid_ten2mk128trunc[0].w[0]=0x1999999999999999','line_number':1085,'multiline':False]
['text':' C* = floor(C*) (logical right shift; C has p decimal digits,','line_number':1086,'multiline':False]
['text':'     correct by Property 1)','line_number':1087,'multiline':False]
['text':' n = C* * 10^(e+x)','line_number':1088,'multiline':False]
['text':' shift right C* by Ex-64 = bid_shiftright128[ind]','line_number':1090,'multiline':False]
['text':' 0 <= shift <= 39','line_number':1091,'multiline':False]
['text':' determine inexactness of the rounding of C*','line_number':1093,'multiline':False]
['text':' if (0 < f* < 10^(-x)) then','line_number':1094,'multiline':False]
['text':'   the result is exact','line_number':1095,'multiline':False]
['text':' else // if (f* > T*) then','line_number':1096,'multiline':False]
['text':'   the result is inexact','line_number':1097,'multiline':False]
['text':' fstar.w[1] is 0','line_number':1098,'multiline':False]
['text':' bid_ten2mk128trunc[ind -1].w[1] is identical to','line_number':1100,'multiline':False]
['text':' bid_ten2mk128[ind -1].w[1]','line_number':1101,'multiline':False]
['text':' positive and inexact','line_number':1102,'multiline':False]
['text':' else the result is exact','line_number':1105,'multiline':False]
['text':' if 3 <= ind - 1 <= 14','line_number':1106,'multiline':False]
['text':' bid_ten2mk128trunc[ind -1].w[1] is identical to','line_number':1108,'multiline':False]
['text':' bid_ten2mk128[ind -1].w[1]','line_number':1109,'multiline':False]
['text':' positive and inexact','line_number':1110,'multiline':False]
['text':' else the result is exact','line_number':1113,'multiline':False]
['text':' 1 <= q <= 7','line_number':1121,'multiline':False]
['text':' res = +/-C (exact)','line_number':1122,'multiline':False]
['text':' if (exp > 0) => 1 <= exp <= 18, 1 <= q <= 7, 2 <= q + exp <= 20','line_number':1127,'multiline':False]
['text':' (the upper limit of 20 on q + exp is due to the fact that ','line_number':1128,'multiline':False]
['text':' +/-C * 10^exp is guaranteed to fit in 64 bits) ','line_number':1129,'multiline':False]
['text':' res = +/-C * 10^exp (exact)','line_number':1130,'multiline':False]
['text':'****************************************************************************
 *  BID32_to_int64_xceil
 ***************************************************************************','line_number':1140,'multiline':True]
['text':' unbiased exponent','line_number':1160,'multiline':False]
['text':' Note: C1 represents x_significand (BID_UINT32)','line_number':1161,'multiline':False]
['text':' C* represents up to 16 decimal digits ~ 54 bits','line_number':1167,'multiline':False]
['text':' check for NaN or Infinity','line_number':1171,'multiline':False]
['text':' set invalid flag','line_number':1173,'multiline':False]
['text':' return Integer Indefinite','line_number':1175,'multiline':False]
['text':' unpack x','line_number':1179,'multiline':False]
['text':' 0 for positive, MASK_SIGN32 for negative','line_number':1180,'multiline':False]
['text':' if steering bits are 11 (condition will be 0), then exponent is G[0:w+1] =>','line_number':1181,'multiline':False]
['text':' biased','line_number':1183,'multiline':False]
['text':' non-canonical','line_number':1185,'multiline':False]
['text':' biased','line_number':1190,'multiline':False]
['text':' check for zeros (possibly from non-canonical values)','line_number':1194,'multiline':False]
['text':' x is 0','line_number':1196,'multiline':False]
['text':' x is not special and is not zero','line_number':1200,'multiline':False]
['text':' q = nr. of decimal digits in x (1 <= q <= 7)','line_number':1202,'multiline':False]
['text':'  determine first the nr. of bits in x','line_number':1203,'multiline':False]
['text':' exact conversion','line_number':1204,'multiline':False]
['text':' unbiased exponent','line_number':1212,'multiline':False]
['text':' x >= 10^19 ~= 2^63.11... (cannot fit in BID_SINT64)','line_number':1214,'multiline':False]
['text':' set invalid flag','line_number':1215,'multiline':False]
['text':' return Integer Indefinite','line_number':1217,'multiline':False]
['text':' x = c(0)c(1)...c(q-1)00...0 (19 dec. digits)','line_number':1220,'multiline':False]
['text':' in this case 2^63.11... ~= 10^19 <= x < 10^20 ~= 2^66.43...','line_number':1221,'multiline':False]
['text':' so x rounded to an integer may or may not fit in a signed 64-bit int','line_number':1222,'multiline':False]
['text':' the cases that do not fit are identified here; the ones that fit','line_number':1223,'multiline':False]
['text':' fall through and will be handled with other cases further,','line_number':1224,'multiline':False]
['text':' under '1 <= q + exp <= 19'','line_number':1225,'multiline':False]
['text':' if n < 0 and q + exp = 19','line_number':1226,'multiline':False]
['text':' if n <= -2^63 - 1 then n is too large','line_number':1227,'multiline':False]
['text':' <=> c(0)c(1)...c(q-1)00...0[19 dec. digits] >= 2^63+1','line_number':1228,'multiline':False]
['text':' <=> 0.c(0)c(1)...c(q-1) * 10^20 >= 0x5000000000000000a, 1<=q<=7','line_number':1229,'multiline':False]
['text':' <=> C * 10^(20-q) >= 0x5000000000000000a, 1<=q<=7','line_number':1230,'multiline':False]
['text':' 1 <= q <= 7 => 13 <= 20-q <= 19 => 10^(20-q) is 64-bit, and so is C1','line_number':1231,'multiline':False]
['text':' Note: C1 * 10^(11-q) has 19 or 20 digits; 0x5000000000000000a, has 20','line_number':1233,'multiline':False]
['text':' set invalid flag','line_number':1235,'multiline':False]
['text':' return Integer Indefinite','line_number':1237,'multiline':False]
['text':' else cases that can be rounded to a 64-bit int fall through','line_number':1241,'multiline':False]
['text':' to '1 <= q + exp <= 19'','line_number':1242,'multiline':False]
['text':' if n > 0 and q + exp = 19','line_number':1243,'multiline':False]
['text':' if n > 2^63 - 1 then n is too large','line_number':1244,'multiline':False]
['text':' <=> c(0)c(1)...c(q-1)00...0[19 dec. digits] > 2^63 - 1','line_number':1245,'multiline':False]
['text':' <=> if 0.c(0)c(1)...c(q-1) * 10^20 > 0x4fffffffffffffff6, 1<=q<=7','line_number':1246,'multiline':False]
['text':' <=> if C * 10^(20-q) > 0x4fffffffffffffff6, 1<=q<=7','line_number':1247,'multiline':False]
['text':' 1 <= q <= 7 => 13 <= 20-q <= 19 => 10^(20-q) is 64-bit, and so is C1','line_number':1250,'multiline':False]
['text':' set invalid flag','line_number':1254,'multiline':False]
['text':' return Integer Indefinite','line_number':1256,'multiline':False]
['text':' else cases that can be rounded to a 64-bit int fall through','line_number':1260,'multiline':False]
['text':' to '1 <= q + exp <= 19'','line_number':1261,'multiline':False]
['text':' end else if n > 0 and q + exp = 19','line_number':1262,'multiline':False]
['text':' end else if ((q + exp) == 19)','line_number':1263,'multiline':False]
['text':' n is not too large to be converted to int64: -2^63-1 < n < 2^63','line_number':1265,'multiline':False]
['text':' Note: some of the cases tested for above fall through to this point','line_number':1266,'multiline':False]
['text':' n = +/-0.0...c(0)c(1)...c(q-1)','line_number':1267,'multiline':False]
['text':' set inexact flag','line_number':1268,'multiline':False]
['text':' return 0 or 1','line_number':1270,'multiline':False]
['text':' if (1 <= q + exp <= 19, 1 <= q <= 7, -6 <= exp <= 18)','line_number':1276,'multiline':False]
['text':' -2^63-1 < x <= -1 or 1 <= x <= 2^63 - 1 so x can be rounded','line_number':1277,'multiline':False]
['text':' to nearest to a 64-bit signed integer','line_number':1278,'multiline':False]
['text':' 2 <= q <= 7, -6 <= exp <= -1, 1 <= q + exp <= 19','line_number':1279,'multiline':False]
['text':' 1 <= ind <= 6; ind is a synonym for 'x'','line_number':1280,'multiline':False]
['text':' chop off ind digits from the lower part of C1','line_number':1281,'multiline':False]
['text':' C1 fits in 64 bits','line_number':1282,'multiline':False]
['text':' calculate C* and f*','line_number':1283,'multiline':False]
['text':' C* is actually floor(C*) in this case','line_number':1284,'multiline':False]
['text':' C* and f* need shifting and masking, as shown by','line_number':1285,'multiline':False]
['text':' bid_shiftright128[] and bid_maskhigh128[]','line_number':1286,'multiline':False]
['text':' 1 <= x <= 6 ','line_number':1287,'multiline':False]
['text':' kx = 10^(-x) = bid_ten2mk64[ind - 1]','line_number':1288,'multiline':False]
['text':' C* = C1 * 10^(-x)','line_number':1289,'multiline':False]
['text':' the approximation of 10^(-x) was rounded up to 54 bits','line_number':1290,'multiline':False]
['text':' the top Ex bits of 10^(-x) are T* = bid_ten2mk128trunc[ind].w[0], e.g.','line_number':1295,'multiline':False]
['text':' if x=1, T*=bid_ten2mk128trunc[0].w[0]=0x1999999999999999','line_number':1296,'multiline':False]
['text':' C* = floor(C*) (logical right shift; C has p decimal digits,','line_number':1297,'multiline':False]
['text':'     correct by Property 1)','line_number':1298,'multiline':False]
['text':' n = C* * 10^(e+x)','line_number':1299,'multiline':False]
['text':' shift right C* by Ex-64 = bid_shiftright128[ind]','line_number':1301,'multiline':False]
['text':' 0 <= shift <= 39','line_number':1302,'multiline':False]
['text':' determine inexactness of the rounding of C*','line_number':1304,'multiline':False]
['text':' if (0 < f* < 10^(-x)) then','line_number':1305,'multiline':False]
['text':'   the result is exact','line_number':1306,'multiline':False]
['text':' else // if (f* > T*) then','line_number':1307,'multiline':False]
['text':'   the result is inexact','line_number':1308,'multiline':False]
['text':' fstar.w[1] is 0','line_number':1309,'multiline':False]
['text':' bid_ten2mk128trunc[ind -1].w[1] is identical to','line_number':1311,'multiline':False]
['text':' bid_ten2mk128[ind -1].w[1]','line_number':1312,'multiline':False]
['text':' positive and inexact','line_number':1313,'multiline':False]
['text':' set the inexact flag','line_number':1316,'multiline':False]
['text':' else the result is exact','line_number':1318,'multiline':False]
['text':' if 3 <= ind - 1 <= 14','line_number':1319,'multiline':False]
['text':' bid_ten2mk128trunc[ind -1].w[1] is identical to','line_number':1321,'multiline':False]
['text':' bid_ten2mk128[ind -1].w[1]','line_number':1322,'multiline':False]
['text':' positive and inexact','line_number':1323,'multiline':False]
['text':' set the inexact flag','line_number':1326,'multiline':False]
['text':' else the result is exact','line_number':1328,'multiline':False]
['text':' 1 <= q <= 7','line_number':1336,'multiline':False]
['text':' res = +/-C (exact)','line_number':1337,'multiline':False]
['text':' if (exp > 0) => 1 <= exp <= 18, 1 <= q <= 7, 2 <= q + exp <= 20','line_number':1342,'multiline':False]
['text':' (the upper limit of 20 on q + exp is due to the fact that ','line_number':1343,'multiline':False]
['text':' +/-C * 10^exp is guaranteed to fit in 64 bits) ','line_number':1344,'multiline':False]
['text':' res = +/-C * 10^exp (exact)','line_number':1345,'multiline':False]
['text':'****************************************************************************
 *  BID32_to_int64_int
 ***************************************************************************','line_number':1355,'multiline':True]
['text':' unbiased exponent','line_number':1373,'multiline':False]
['text':' Note: C1 represents x_significand (BID_UINT32)','line_number':1374,'multiline':False]
['text':' C* represents up to 16 decimal digits ~ 54 bits','line_number':1380,'multiline':False]
['text':' check for NaN or Infinity','line_number':1383,'multiline':False]
['text':' set invalid flag','line_number':1385,'multiline':False]
['text':' return Integer Indefinite','line_number':1387,'multiline':False]
['text':' unpack x','line_number':1391,'multiline':False]
['text':' 0 for positive, MASK_SIGN32 for negative','line_number':1392,'multiline':False]
['text':' if steering bits are 11 (condition will be 0), then exponent is G[0:w+1] =>','line_number':1393,'multiline':False]
['text':' biased','line_number':1395,'multiline':False]
['text':' non-canonical','line_number':1397,'multiline':False]
['text':' biased','line_number':1402,'multiline':False]
['text':' check for zeros (possibly from non-canonical values)','line_number':1406,'multiline':False]
['text':' x is 0','line_number':1408,'multiline':False]
['text':' x is not special and is not zero','line_number':1412,'multiline':False]
['text':' q = nr. of decimal digits in x (1 <= q <= 7)','line_number':1414,'multiline':False]
['text':'  determine first the nr. of bits in x','line_number':1415,'multiline':False]
['text':' exact conversion','line_number':1416,'multiline':False]
['text':' unbiased exponent','line_number':1424,'multiline':False]
['text':' x >= 10^19 ~= 2^63.11... (cannot fit in BID_SINT64)','line_number':1426,'multiline':False]
['text':' set invalid flag','line_number':1427,'multiline':False]
['text':' return Integer Indefinite','line_number':1429,'multiline':False]
['text':' x = c(0)c(1)...c(q-1)00...0 (19 dec. digits)','line_number':1432,'multiline':False]
['text':' in this case 2^63.11... ~= 10^19 <= x < 10^20 ~= 2^66.43...','line_number':1433,'multiline':False]
['text':' so x rounded to an integer may or may not fit in a signed 64-bit int','line_number':1434,'multiline':False]
['text':' the cases that do not fit are identified here; the ones that fit','line_number':1435,'multiline':False]
['text':' fall through and will be handled with other cases further,','line_number':1436,'multiline':False]
['text':' under '1 <= q + exp <= 19'','line_number':1437,'multiline':False]
['text':' if n < 0 and q + exp = 19','line_number':1438,'multiline':False]
['text':' if n <= -2^63 - 1 then n is too large','line_number':1439,'multiline':False]
['text':' <=> c(0)c(1)...c(q-1)00...0[19 dec. digits] >= 2^63+1','line_number':1440,'multiline':False]
['text':' <=> 0.c(0)c(1)...c(q-1) * 10^20 >= 0x5000000000000000a, 1<=q<=7','line_number':1441,'multiline':False]
['text':' <=> C * 10^(20-q) >= 0x5000000000000000a, 1<=q<=7','line_number':1442,'multiline':False]
['text':' 1 <= q <= 7 => 13 <= 20-q <= 19 => 10^(20-q) is 64-bit, and so is C1','line_number':1443,'multiline':False]
['text':' Note: C1 * 10^(11-q) has 19 or 20 digits; 0x5000000000000000a, has 20','line_number':1445,'multiline':False]
['text':' set invalid flag','line_number':1447,'multiline':False]
['text':' return Integer Indefinite','line_number':1449,'multiline':False]
['text':' else cases that can be rounded to a 64-bit int fall through','line_number':1453,'multiline':False]
['text':' to '1 <= q + exp <= 19'','line_number':1454,'multiline':False]
['text':' if n > 0 and q + exp = 19','line_number':1455,'multiline':False]
['text':' if n >= 2^63 then n is too large','line_number':1456,'multiline':False]
['text':' <=> c(0)c(1)...c(q-1)00...0[19 dec. digits] >= 2^63','line_number':1457,'multiline':False]
['text':' <=> if 0.c(0)c(1)...c(q-1) * 10^20 >= 0x50000000000000000, 1<=q<=7','line_number':1458,'multiline':False]
['text':' <=> if C * 10^(20-q) >= 0x50000000000000000, 1<=q<=7','line_number':1459,'multiline':False]
['text':' 1 <= q <= 7 => 13 <= 20-q <= 19 => 10^(20-q) is 64-bit, and so is C1','line_number':1462,'multiline':False]
['text':' actually C.w[1] == 0x05ull && C.w[0] >= 0x0000000000000000ull) {','line_number':1465,'multiline':False]
['text':' set invalid flag','line_number':1466,'multiline':False]
['text':' return Integer Indefinite','line_number':1468,'multiline':False]
['text':' else cases that can be rounded to a 64-bit int fall through','line_number':1472,'multiline':False]
['text':' to '1 <= q + exp <= 19'','line_number':1473,'multiline':False]
['text':' end else if n > 0 and q + exp = 19','line_number':1474,'multiline':False]
['text':' end else if ((q + exp) == 19)','line_number':1475,'multiline':False]
['text':' n is not too large to be converted to int64: -2^63-1 < n < 2^63','line_number':1477,'multiline':False]
['text':' Note: some of the cases tested for above fall through to this point','line_number':1478,'multiline':False]
['text':' n = +/-0.0...c(0)c(1)...c(q-1)','line_number':1479,'multiline':False]
['text':' return 0','line_number':1480,'multiline':False]
['text':' if (1 <= q + exp <= 19, 1 <= q <= 7, -6 <= exp <= 18)','line_number':1483,'multiline':False]
['text':' -2^63-1 < x <= -1 or 1 <= x < 2^63 so x can be rounded','line_number':1484,'multiline':False]
['text':' to nearest to a 64-bit signed integer','line_number':1485,'multiline':False]
['text':' 2 <= q <= 7, -6 <= exp <= -1, 1 <= q + exp <= 19','line_number':1486,'multiline':False]
['text':' 1 <= ind <= 6; ind is a synonym for 'x'','line_number':1487,'multiline':False]
['text':' chop off ind digits from the lower part of C1','line_number':1488,'multiline':False]
['text':' C1 fits in 64 bits','line_number':1489,'multiline':False]
['text':' calculate C* and f*','line_number':1490,'multiline':False]
['text':' C* is actually floor(C*) in this case','line_number':1491,'multiline':False]
['text':' C* and f* need shifting and masking, as shown by','line_number':1492,'multiline':False]
['text':' bid_shiftright128[] and bid_maskhigh128[]','line_number':1493,'multiline':False]
['text':' 1 <= x <= 6 ','line_number':1494,'multiline':False]
['text':' kx = 10^(-x) = bid_ten2mk64[ind - 1]','line_number':1495,'multiline':False]
['text':' C* = C1 * 10^(-x)','line_number':1496,'multiline':False]
['text':' the approximation of 10^(-x) was rounded up to 54 bits','line_number':1497,'multiline':False]
['text':' the top Ex bits of 10^(-x) are T* = bid_ten2mk128trunc[ind].w[0], e.g.','line_number':1500,'multiline':False]
['text':' if x=1, T*=bid_ten2mk128trunc[0].w[0]=0x1999999999999999','line_number':1501,'multiline':False]
['text':' C* = floor(C*) (logical right shift; C has p decimal digits,','line_number':1502,'multiline':False]
['text':'     correct by Property 1)','line_number':1503,'multiline':False]
['text':' n = C* * 10^(e+x)','line_number':1504,'multiline':False]
['text':' shift right C* by Ex-64 = bid_shiftright128[ind]','line_number':1506,'multiline':False]
['text':' 0 <= shift <= 39','line_number':1507,'multiline':False]
['text':' 1 <= q <= 7','line_number':1515,'multiline':False]
['text':' res = +/-C (exact)','line_number':1516,'multiline':False]
['text':' if (exp > 0) => 1 <= exp <= 18, 1 <= q <= 7, 2 <= q + exp <= 20','line_number':1521,'multiline':False]
['text':' (the upper limit of 20 on q + exp is due to the fact that ','line_number':1522,'multiline':False]
['text':' +/-C * 10^exp is guaranteed to fit in 64 bits) ','line_number':1523,'multiline':False]
['text':' res = +/-C * 10^exp (exact)','line_number':1524,'multiline':False]
['text':'****************************************************************************
 *  BID32_to_int64_xint
 ***************************************************************************','line_number':1534,'multiline':True]
['text':' unbiased exponent','line_number':1554,'multiline':False]
['text':' Note: C1 represents x_significand (BID_UINT32)','line_number':1555,'multiline':False]
['text':' C* represents up to 16 decimal digits ~ 54 bits','line_number':1561,'multiline':False]
['text':' check for NaN or Infinity','line_number':1565,'multiline':False]
['text':' set invalid flag','line_number':1567,'multiline':False]
['text':' return Integer Indefinite','line_number':1569,'multiline':False]
['text':' unpack x','line_number':1573,'multiline':False]
['text':' 0 for positive, MASK_SIGN32 for negative','line_number':1574,'multiline':False]
['text':' if steering bits are 11 (condition will be 0), then exponent is G[0:w+1] =>','line_number':1575,'multiline':False]
['text':' biased','line_number':1577,'multiline':False]
['text':' non-canonical','line_number':1579,'multiline':False]
['text':' biased','line_number':1584,'multiline':False]
['text':' check for zeros (possibly from non-canonical values)','line_number':1588,'multiline':False]
['text':' x is 0','line_number':1590,'multiline':False]
['text':' x is not special and is not zero','line_number':1594,'multiline':False]
['text':' q = nr. of decimal digits in x (1 <= q <= 7)','line_number':1596,'multiline':False]
['text':'  determine first the nr. of bits in x','line_number':1597,'multiline':False]
['text':' exact conversion','line_number':1598,'multiline':False]
['text':' unbiased exponent','line_number':1606,'multiline':False]
['text':' x >= 10^19 ~= 2^63.11... (cannot fit in BID_SINT64)','line_number':1608,'multiline':False]
['text':' set invalid flag','line_number':1609,'multiline':False]
['text':' return Integer Indefinite','line_number':1611,'multiline':False]
['text':' x = c(0)c(1)...c(q-1)00...0 (19 dec. digits)','line_number':1614,'multiline':False]
['text':' in this case 2^63.11... ~= 10^19 <= x < 10^20 ~= 2^66.43...','line_number':1615,'multiline':False]
['text':' so x rounded to an integer may or may not fit in a signed 64-bit int','line_number':1616,'multiline':False]
['text':' the cases that do not fit are identified here; the ones that fit','line_number':1617,'multiline':False]
['text':' fall through and will be handled with other cases further,','line_number':1618,'multiline':False]
['text':' under '1 <= q + exp <= 19'','line_number':1619,'multiline':False]
['text':' if n < 0 and q + exp = 19','line_number':1620,'multiline':False]
['text':' if n <= -2^63 - 1 then n is too large','line_number':1621,'multiline':False]
['text':' <=> c(0)c(1)...c(q-1)00...0[19 dec. digits] >= 2^63+1','line_number':1622,'multiline':False]
['text':' <=> 0.c(0)c(1)...c(q-1) * 10^20 >= 0x5000000000000000a, 1<=q<=7','line_number':1623,'multiline':False]
['text':' <=> C * 10^(20-q) >= 0x5000000000000000a, 1<=q<=7','line_number':1624,'multiline':False]
['text':' 1 <= q <= 7 => 13 <= 20-q <= 19 => 10^(20-q) is 64-bit, and so is C1','line_number':1625,'multiline':False]
['text':' Note: C1 * 10^(11-q) has 19 or 20 digits; 0x5000000000000000a, has 20','line_number':1627,'multiline':False]
['text':' set invalid flag','line_number':1629,'multiline':False]
['text':' return Integer Indefinite','line_number':1631,'multiline':False]
['text':' else cases that can be rounded to a 64-bit int fall through','line_number':1635,'multiline':False]
['text':' to '1 <= q + exp <= 19'','line_number':1636,'multiline':False]
['text':' if n > 0 and q + exp = 19','line_number':1637,'multiline':False]
['text':' if n >= 2^63 then n is too large','line_number':1638,'multiline':False]
['text':' <=> c(0)c(1)...c(q-1)00...0[19 dec. digits] >= 2^63','line_number':1639,'multiline':False]
['text':' <=> if 0.c(0)c(1)...c(q-1) * 10^20 >= 0x50000000000000000, 1<=q<=7','line_number':1640,'multiline':False]
['text':' <=> if C * 10^(20-q) >= 0x50000000000000000, 1<=q<=7','line_number':1641,'multiline':False]
['text':' 1 <= q <= 7 => 13 <= 20-q <= 19 => 10^(20-q) is 64-bit, and so is C1','line_number':1644,'multiline':False]
['text':' actually C.w[1] == 0x05ull && C.w[0] >= 0x0000000000000000ull) {','line_number':1647,'multiline':False]
['text':' set invalid flag','line_number':1648,'multiline':False]
['text':' return Integer Indefinite','line_number':1650,'multiline':False]
['text':' else cases that can be rounded to a 64-bit int fall through','line_number':1654,'multiline':False]
['text':' to '1 <= q + exp <= 19'','line_number':1655,'multiline':False]
['text':' end else if n > 0 and q + exp = 19','line_number':1656,'multiline':False]
['text':' end else if ((q + exp) == 19)','line_number':1657,'multiline':False]
['text':' n is not too large to be converted to int64: -2^63-1 < n < 2^63','line_number':1659,'multiline':False]
['text':' Note: some of the cases tested for above fall through to this point','line_number':1660,'multiline':False]
['text':' n = +/-0.0...c(0)c(1)...c(q-1)','line_number':1661,'multiline':False]
['text':' set inexact flag','line_number':1662,'multiline':False]
['text':' return 0','line_number':1664,'multiline':False]
['text':' if (1 <= q + exp <= 19, 1 <= q <= 7, -6 <= exp <= 18)','line_number':1667,'multiline':False]
['text':' -2^63-1 < x <= -1 or 1 <= x < 2^63 so x can be rounded','line_number':1668,'multiline':False]
['text':' to nearest to a 64-bit signed integer','line_number':1669,'multiline':False]
['text':' 2 <= q <= 7, -6 <= exp <= -1, 1 <= q + exp <= 19','line_number':1670,'multiline':False]
['text':' 1 <= ind <= 6; ind is a synonym for 'x'','line_number':1671,'multiline':False]
['text':' chop off ind digits from the lower part of C1','line_number':1672,'multiline':False]
['text':' C1 fits in 64 bits','line_number':1673,'multiline':False]
['text':' calculate C* and f*','line_number':1674,'multiline':False]
['text':' C* is actually floor(C*) in this case','line_number':1675,'multiline':False]
['text':' C* and f* need shifting and masking, as shown by','line_number':1676,'multiline':False]
['text':' bid_shiftright128[] and bid_maskhigh128[]','line_number':1677,'multiline':False]
['text':' 1 <= x <= 6 ','line_number':1678,'multiline':False]
['text':' kx = 10^(-x) = bid_ten2mk64[ind - 1]','line_number':1679,'multiline':False]
['text':' C* = C1 * 10^(-x)','line_number':1680,'multiline':False]
['text':' the approximation of 10^(-x) was rounded up to 54 bits','line_number':1681,'multiline':False]
['text':' the top Ex bits of 10^(-x) are T* = bid_ten2mk128trunc[ind].w[0], e.g.','line_number':1686,'multiline':False]
['text':' if x=1, T*=bid_ten2mk128trunc[0].w[0]=0x1999999999999999','line_number':1687,'multiline':False]
['text':' C* = floor(C*) (logical right shift; C has p decimal digits,','line_number':1688,'multiline':False]
['text':'     correct by Property 1)','line_number':1689,'multiline':False]
['text':' n = C* * 10^(e+x)','line_number':1690,'multiline':False]
['text':' shift right C* by Ex-64 = bid_shiftright128[ind]','line_number':1692,'multiline':False]
['text':' 0 <= shift <= 39','line_number':1693,'multiline':False]
['text':' determine inexactness of the rounding of C*','line_number':1695,'multiline':False]
['text':' if (0 < f* < 10^(-x)) then','line_number':1696,'multiline':False]
['text':'   the result is exact','line_number':1697,'multiline':False]
['text':' else // if (f* > T*) then','line_number':1698,'multiline':False]
['text':'   the result is inexact','line_number':1699,'multiline':False]
['text':' fstar.w[1] is 0','line_number':1700,'multiline':False]
['text':' bid_ten2mk128trunc[ind -1].w[1] is identical to','line_number':1702,'multiline':False]
['text':' bid_ten2mk128[ind -1].w[1]','line_number':1703,'multiline':False]
['text':' set the inexact flag','line_number':1704,'multiline':False]
['text':' else the result is exact','line_number':1706,'multiline':False]
['text':' if 3 <= ind - 1 <= 14','line_number':1707,'multiline':False]
['text':' bid_ten2mk128trunc[ind -1].w[1] is identical to','line_number':1709,'multiline':False]
['text':' bid_ten2mk128[ind -1].w[1]','line_number':1710,'multiline':False]
['text':' set the inexact flag','line_number':1711,'multiline':False]
['text':' else the result is exact','line_number':1713,'multiline':False]
['text':' 1 <= q <= 7','line_number':1720,'multiline':False]
['text':' res = +/-C (exact)','line_number':1721,'multiline':False]
['text':' if (exp > 0) => 1 <= exp <= 18, 1 <= q <= 7, 2 <= q + exp <= 20','line_number':1726,'multiline':False]
['text':' (the upper limit of 20 on q + exp is due to the fact that ','line_number':1727,'multiline':False]
['text':' +/-C * 10^exp is guaranteed to fit in 64 bits) ','line_number':1728,'multiline':False]
['text':' res = +/-C * 10^exp (exact)','line_number':1729,'multiline':False]
['text':'****************************************************************************
 *  BID32_to_int64_rninta
 ***************************************************************************','line_number':1739,'multiline':True]
['text':' unbiased exponent','line_number':1759,'multiline':False]
['text':' Note: C1 represents x_significand (BID_UINT32)','line_number':1760,'multiline':False]
['text':' C* represents up to 16 decimal digits ~ 54 bits','line_number':1766,'multiline':False]
['text':' check for NaN or Infinity','line_number':1769,'multiline':False]
['text':' set invalid flag','line_number':1771,'multiline':False]
['text':' return Integer Indefinite','line_number':1773,'multiline':False]
['text':' unpack x','line_number':1777,'multiline':False]
['text':' 0 for positive, MASK_SIGN32 for negative','line_number':1778,'multiline':False]
['text':' if steering bits are 11 (condition will be 0), then exponent is G[0:w+1] =>','line_number':1779,'multiline':False]
['text':' biased','line_number':1781,'multiline':False]
['text':' non-canonical','line_number':1783,'multiline':False]
['text':' biased','line_number':1788,'multiline':False]
['text':' check for zeros (possibly from non-canonical values)','line_number':1792,'multiline':False]
['text':' x is 0','line_number':1794,'multiline':False]
['text':' x is not special and is not zero','line_number':1798,'multiline':False]
['text':' q = nr. of decimal digits in x (1 <= q <= 7)','line_number':1800,'multiline':False]
['text':'  determine first the nr. of bits in x','line_number':1801,'multiline':False]
['text':' exact conversion','line_number':1802,'multiline':False]
['text':' unbiased exponent','line_number':1810,'multiline':False]
['text':' x >= 10^19 ~= 2^63.11... (cannot fit in BID_SINT64)','line_number':1812,'multiline':False]
['text':' set invalid flag','line_number':1813,'multiline':False]
['text':' return Integer Indefinite','line_number':1815,'multiline':False]
['text':' x = c(0)c(1)...c(q-1)00...0 (19 dec. digits)','line_number':1818,'multiline':False]
['text':' in this case 2^63.11... ~= 10^19 <= x < 10^20 ~= 2^66.43...','line_number':1819,'multiline':False]
['text':' so x rounded to an integer may or may not fit in a signed 64-bit int','line_number':1820,'multiline':False]
['text':' the cases that do not fit are identified here; the ones that fit','line_number':1821,'multiline':False]
['text':' fall through and will be handled with other cases further,','line_number':1822,'multiline':False]
['text':' under '1 <= q + exp <= 19'','line_number':1823,'multiline':False]
['text':' if n < 0 and q + exp = 19','line_number':1824,'multiline':False]
['text':' if n <= -2^63 - 1/2 then n is too large','line_number':1825,'multiline':False]
['text':' <=> c(0)c(1)...c(q-1)00...0[19 dec. digits] >= 2^63+1/2','line_number':1826,'multiline':False]
['text':' <=> 0.c(0)c(1)...c(q-1) * 10^20 >= 0x50000000000000005, 1<=q<=7','line_number':1827,'multiline':False]
['text':' <=> C * 10^(20-q) >= 0x50000000000000005, 1<=q<=7','line_number':1828,'multiline':False]
['text':' 1 <= q <= 7 => 13 <= 20-q <= 19 => 10^(20-q) is 64-bit, and so is C1','line_number':1829,'multiline':False]
['text':' Note: C1 * 10^(11-q) has 19 or 20 digits; 0x50000000000000005, has 20','line_number':1831,'multiline':False]
['text':' set invalid flag','line_number':1833,'multiline':False]
['text':' return Integer Indefinite','line_number':1835,'multiline':False]
['text':' else cases that can be rounded to a 64-bit int fall through','line_number':1839,'multiline':False]
['text':' to '1 <= q + exp <= 19'','line_number':1840,'multiline':False]
['text':' if n > 0 and q + exp = 19','line_number':1841,'multiline':False]
['text':' if n >= 2^63 - 1/2 then n is too large','line_number':1842,'multiline':False]
['text':' <=> c(0)c(1)...c(q-1)00...0[19 dec. digits] >= 2^63-1/2','line_number':1843,'multiline':False]
['text':' <=> if 0.c(0)c(1)...c(q-1) * 10^20 >= 0x4fffffffffffffffb, 1<=q<=7','line_number':1844,'multiline':False]
['text':' <=> if C * 10^(20-q) >= 0x4fffffffffffffffb, 1<=q<=7','line_number':1845,'multiline':False]
['text':' 1 <= q <= 7 => 13 <= 20-q <= 19 => 10^(20-q) is 64-bit, and so is C1','line_number':1848,'multiline':False]
['text':' set invalid flag','line_number':1852,'multiline':False]
['text':' return Integer Indefinite','line_number':1854,'multiline':False]
['text':' else cases that can be rounded to a 64-bit int fall through','line_number':1858,'multiline':False]
['text':' to '1 <= q + exp <= 19'','line_number':1859,'multiline':False]
['text':' end else if n > 0 and q + exp = 19','line_number':1860,'multiline':False]
['text':' end else if ((q + exp) == 19)','line_number':1861,'multiline':False]
['text':' n is not too large to be converted to int64: -2^63-1/2 < n < 2^63-1/2','line_number':1863,'multiline':False]
['text':' Note: some of the cases tested for above fall through to this point','line_number':1864,'multiline':False]
['text':' n = +/-0.0...c(0)c(1)...c(q-1)','line_number':1865,'multiline':False]
['text':' return 0','line_number':1866,'multiline':False]
['text':' n = +/-0.c(0)c(1)...c(q-1)','line_number':1869,'multiline':False]
['text':' if 0.c(0)c(1)...c(q-1) <= 0.5 <=> c(0)c(1)...c(q-1) <= 5 * 10^(q-1)','line_number':1870,'multiline':False]
['text':'   res = 0','line_number':1871,'multiline':False]
['text':' else','line_number':1872,'multiline':False]
['text':'   res = +/-1','line_number':1873,'multiline':False]
['text':' 0 <= ind <= 6','line_number':1874,'multiline':False]
['text':' return 0','line_number':1876,'multiline':False]
['text':' n < 0','line_number':1877,'multiline':False]
['text':' return -1','line_number':1878,'multiline':False]
['text':' n > 0','line_number':1879,'multiline':False]
['text':' return +1','line_number':1880,'multiline':False]
['text':' if (1 <= q + exp <= 19, 1 <= q <= 7, -6 <= exp <= 18)','line_number':1882,'multiline':False]
['text':' -2^63-1/2 < x <= -1 or 1 <= x < 2^63-1/2 so x can be rounded','line_number':1883,'multiline':False]
['text':' to nearest to a 64-bit signed integer','line_number':1884,'multiline':False]
['text':' 2 <= q <= 7, -6 <= exp <= -1, 1 <= q + exp <= 19','line_number':1885,'multiline':False]
['text':' 1 <= ind <= 6; ind is a synonym for 'x'','line_number':1886,'multiline':False]
['text':' chop off ind digits from the lower part of C1','line_number':1887,'multiline':False]
['text':' C1 = C1 + 1/2 * 10^ind where the result C1 fits in 64 bits','line_number':1888,'multiline':False]
['text':' calculate C* and f*','line_number':1890,'multiline':False]
['text':' C* is actually floor(C*) in this case','line_number':1891,'multiline':False]
['text':' C* and f* need shifting and masking, as shown by','line_number':1892,'multiline':False]
['text':' bid_shiftright128[] and bid_maskhigh128[]','line_number':1893,'multiline':False]
['text':' 1 <= x <= 6 ','line_number':1894,'multiline':False]
['text':' kx = 10^(-x) = bid_ten2mk64[ind - 1]','line_number':1895,'multiline':False]
['text':' C* = (C1 + 1/2 * 10^x) * 10^(-x)','line_number':1896,'multiline':False]
['text':' the approximation of 10^(-x) was rounded up to 54 bits','line_number':1897,'multiline':False]
['text':' the top Ex bits of 10^(-x) are T* = bid_ten2mk128trunc[ind].w[0], e.g.','line_number':1900,'multiline':False]
['text':' if x=1, T*=bid_ten2mk128trunc[0].w[0]=0x1999999999999999','line_number':1901,'multiline':False]
['text':' if (0 < f* < 10^(-x)) then the result is a midpoint','line_number':1902,'multiline':False]
['text':'   if floor(C*) is even then C* = floor(C*) - logical right','line_number':1903,'multiline':False]
['text':'       shift; C* has p decimal digits, correct by Prop. 1)','line_number':1904,'multiline':False]
['text':'   else if floor(C*) is odd C* = floor(C*)-1 (logical right','line_number':1905,'multiline':False]
['text':'       shift; C* has p decimal digits, correct by Pr. 1)','line_number':1906,'multiline':False]
['text':' else','line_number':1907,'multiline':False]
['text':'   C* = floor(C*) (logical right shift; C has p decimal digits,','line_number':1908,'multiline':False]
['text':'       correct by Property 1)','line_number':1909,'multiline':False]
['text':' n = C* * 10^(e+x)','line_number':1910,'multiline':False]
['text':' shift right C* by Ex-64 = bid_shiftright128[ind]','line_number':1912,'multiline':False]
['text':' 0 <= shift <= 39','line_number':1913,'multiline':False]
['text':' if the result was a midpoint it was rounded away from zero','line_number':1916,'multiline':False]
['text':' 1 <= q <= 7','line_number':1922,'multiline':False]
['text':' res = +/-C (exact)','line_number':1923,'multiline':False]
['text':' if (exp > 0) => 1 <= exp <= 18, 1 <= q <= 7, 2 <= q + exp <= 20','line_number':1928,'multiline':False]
['text':' (the upper limit of 20 on q + exp is due to the fact that ','line_number':1929,'multiline':False]
['text':' +/-C * 10^exp is guaranteed to fit in 64 bits) ','line_number':1930,'multiline':False]
['text':' res = +/-C * 10^exp (exact)','line_number':1931,'multiline':False]
['text':'****************************************************************************
 *  BID32_to_int64_xrninta
 ***************************************************************************','line_number':1941,'multiline':True]
['text':' unbiased exponent','line_number':1961,'multiline':False]
['text':' Note: C1 represents x_significand (BID_UINT32)','line_number':1962,'multiline':False]
['text':' C* represents up to 16 decimal digits ~ 54 bits','line_number':1969,'multiline':False]
['text':' check for NaN or Infinity','line_number':1973,'multiline':False]
['text':' set invalid flag','line_number':1975,'multiline':False]
['text':' return Integer Indefinite','line_number':1977,'multiline':False]
['text':' unpack x','line_number':1981,'multiline':False]
['text':' 0 for positive, MASK_SIGN32 for negative','line_number':1982,'multiline':False]
['text':' if steering bits are 11 (condition will be 0), then exponent is G[0:w+1] =>','line_number':1983,'multiline':False]
['text':' biased','line_number':1985,'multiline':False]
['text':' non-canonical','line_number':1987,'multiline':False]
['text':' biased','line_number':1992,'multiline':False]
['text':' check for zeros (possibly from non-canonical values)','line_number':1996,'multiline':False]
['text':' x is 0','line_number':1998,'multiline':False]
['text':' x is not special and is not zero','line_number':2002,'multiline':False]
['text':' q = nr. of decimal digits in x (1 <= q <= 7)','line_number':2004,'multiline':False]
['text':'  determine first the nr. of bits in x','line_number':2005,'multiline':False]
['text':' exact conversion','line_number':2006,'multiline':False]
['text':' unbiased exponent','line_number':2014,'multiline':False]
['text':' x >= 10^19 ~= 2^63.11... (cannot fit in BID_SINT64)','line_number':2016,'multiline':False]
['text':' set invalid flag','line_number':2017,'multiline':False]
['text':' return Integer Indefinite','line_number':2019,'multiline':False]
['text':' x = c(0)c(1)...c(q-1)00...0 (19 dec. digits)','line_number':2022,'multiline':False]
['text':' in this case 2^63.11... ~= 10^19 <= x < 10^20 ~= 2^66.43...','line_number':2023,'multiline':False]
['text':' so x rounded to an integer may or may not fit in a signed 64-bit int','line_number':2024,'multiline':False]
['text':' the cases that do not fit are identified here; the ones that fit','line_number':2025,'multiline':False]
['text':' fall through and will be handled with other cases further,','line_number':2026,'multiline':False]
['text':' under '1 <= q + exp <= 19'','line_number':2027,'multiline':False]
['text':' if n < 0 and q + exp = 19','line_number':2028,'multiline':False]
['text':' if n <= -2^63 - 1/2 then n is too large','line_number':2029,'multiline':False]
['text':' <=> c(0)c(1)...c(q-1)00...0[19 dec. digits] >= 2^63+1/2','line_number':2030,'multiline':False]
['text':' <=> 0.c(0)c(1)...c(q-1) * 10^20 >= 0x50000000000000005, 1<=q<=7','line_number':2031,'multiline':False]
['text':' <=> C * 10^(20-q) >= 0x50000000000000005, 1<=q<=7','line_number':2032,'multiline':False]
['text':' 1 <= q <= 7 => 13 <= 20-q <= 19 => 10^(20-q) is 64-bit, and so is C1','line_number':2033,'multiline':False]
['text':' Note: C1 * 10^(11-q) has 19 or 20 digits; 0x50000000000000005, has 20','line_number':2035,'multiline':False]
['text':' set invalid flag','line_number':2037,'multiline':False]
['text':' return Integer Indefinite','line_number':2039,'multiline':False]
['text':' else cases that can be rounded to a 64-bit int fall through','line_number':2043,'multiline':False]
['text':' to '1 <= q + exp <= 19'','line_number':2044,'multiline':False]
['text':' if n > 0 and q + exp = 19','line_number':2045,'multiline':False]
['text':' if n >= 2^63 - 1/2 then n is too large','line_number':2046,'multiline':False]
['text':' <=> c(0)c(1)...c(q-1)00...0[19 dec. digits] >= 2^63-1/2','line_number':2047,'multiline':False]
['text':' <=> if 0.c(0)c(1)...c(q-1) * 10^20 >= 0x4fffffffffffffffb, 1<=q<=7','line_number':2048,'multiline':False]
['text':' <=> if C * 10^(20-q) >= 0x4fffffffffffffffb, 1<=q<=7','line_number':2049,'multiline':False]
['text':' 1 <= q <= 7 => 13 <= 20-q <= 19 => 10^(20-q) is 64-bit, and so is C1','line_number':2052,'multiline':False]
['text':' set invalid flag','line_number':2056,'multiline':False]
['text':' return Integer Indefinite','line_number':2058,'multiline':False]
['text':' else cases that can be rounded to a 64-bit int fall through','line_number':2062,'multiline':False]
['text':' to '1 <= q + exp <= 19'','line_number':2063,'multiline':False]
['text':' end else if n > 0 and q + exp = 19','line_number':2064,'multiline':False]
['text':' end else if ((q + exp) == 19)','line_number':2065,'multiline':False]
['text':' n is not too large to be converted to int64: -2^63-1/2 < n < 2^63-1/2','line_number':2067,'multiline':False]
['text':' Note: some of the cases tested for above fall through to this point','line_number':2068,'multiline':False]
['text':' n = +/-0.0...c(0)c(1)...c(q-1)','line_number':2069,'multiline':False]
['text':' set inexact flag','line_number':2070,'multiline':False]
['text':' return 0','line_number':2072,'multiline':False]
['text':' n = +/-0.c(0)c(1)...c(q-1)','line_number':2075,'multiline':False]
['text':' if 0.c(0)c(1)...c(q-1) <= 0.5 <=> c(0)c(1)...c(q-1) <= 5 * 10^(q-1)','line_number':2076,'multiline':False]
['text':'   res = 0','line_number':2077,'multiline':False]
['text':' else','line_number':2078,'multiline':False]
['text':'   res = +/-1','line_number':2079,'multiline':False]
['text':' 0 <= ind <= 6','line_number':2080,'multiline':False]
['text':' return 0','line_number':2082,'multiline':False]
['text':' n < 0','line_number':2083,'multiline':False]
['text':' return -1','line_number':2084,'multiline':False]
['text':' n > 0','line_number':2085,'multiline':False]
['text':' return +1','line_number':2086,'multiline':False]
['text':' set inexact flag','line_number':2088,'multiline':False]
['text':' if (1 <= q + exp <= 19, 1 <= q <= 7, -6 <= exp <= 18)','line_number':2090,'multiline':False]
['text':' -2^63-1/2 < x <= -1 or 1 <= x < 2^63-1/2 so x can be rounded','line_number':2091,'multiline':False]
['text':' to nearest to a 64-bit signed integer','line_number':2092,'multiline':False]
['text':' 2 <= q <= 7, -6 <= exp <= -1, 1 <= q + exp <= 19','line_number':2093,'multiline':False]
['text':' 1 <= ind <= 6; ind is a synonym for 'x'','line_number':2094,'multiline':False]
['text':' chop off ind digits from the lower part of C1','line_number':2095,'multiline':False]
['text':' C1 = C1 + 1/2 * 10^ind where the result C1 fits in 64 bits','line_number':2096,'multiline':False]
['text':' calculate C* and f*','line_number':2098,'multiline':False]
['text':' C* is actually floor(C*) in this case','line_number':2099,'multiline':False]
['text':' C* and f* need shifting and masking, as shown by','line_number':2100,'multiline':False]
['text':' bid_shiftright128[] and bid_maskhigh128[]','line_number':2101,'multiline':False]
['text':' 1 <= x <= 6 ','line_number':2102,'multiline':False]
['text':' kx = 10^(-x) = bid_ten2mk64[ind - 1]','line_number':2103,'multiline':False]
['text':' C* = (C1 + 1/2 * 10^x) * 10^(-x)','line_number':2104,'multiline':False]
['text':' the approximation of 10^(-x) was rounded up to 54 bits','line_number':2105,'multiline':False]
['text':' the top Ex bits of 10^(-x) are T* = bid_ten2mk128trunc[ind].w[0], e.g.','line_number':2110,'multiline':False]
['text':' if x=1, T*=bid_ten2mk128trunc[0].w[0]=0x1999999999999999','line_number':2111,'multiline':False]
['text':' if (0 < f* < 10^(-x)) then the result is a midpoint','line_number':2112,'multiline':False]
['text':'   if floor(C*) is even then C* = floor(C*) - logical right','line_number':2113,'multiline':False]
['text':'       shift; C* has p decimal digits, correct by Prop. 1)','line_number':2114,'multiline':False]
['text':'   else if floor(C*) is odd C* = floor(C*)-1 (logical right','line_number':2115,'multiline':False]
['text':'       shift; C* has p decimal digits, correct by Pr. 1)','line_number':2116,'multiline':False]
['text':' else','line_number':2117,'multiline':False]
['text':'   C* = floor(C*) (logical right shift; C has p decimal digits,','line_number':2118,'multiline':False]
['text':'       correct by Property 1)','line_number':2119,'multiline':False]
['text':' n = C* * 10^(e+x)','line_number':2120,'multiline':False]
['text':' shift right C* by Ex-64 = bid_shiftright128[ind]','line_number':2122,'multiline':False]
['text':' 0 <= shift <= 39','line_number':2123,'multiline':False]
['text':' determine inexactness of the rounding of C*','line_number':2125,'multiline':False]
['text':' if (0 < f* - 1/2 < 10^(-x)) then','line_number':2126,'multiline':False]
['text':'   the result is exact','line_number':2127,'multiline':False]
['text':' else // if (f* - 1/2 > T*) then','line_number':2128,'multiline':False]
['text':'   the result is inexact','line_number':2129,'multiline':False]
['text':' f* > 1/2 and the result may be exact','line_number':2132,'multiline':False]
['text':' f* - 1/2','line_number':2133,'multiline':False]
['text':' bid_ten2mk128trunc[ind -1].w[1] is identical to ','line_number':2135,'multiline':False]
['text':' bid_ten2mk128[ind -1].w[1]','line_number':2136,'multiline':False]
['text':' set the inexact flag','line_number':2137,'multiline':False]
['text':' else the result is exact','line_number':2139,'multiline':False]
['text':' the result is inexact; f2* <= 1/2','line_number':2140,'multiline':False]
['text':' set the inexact flag','line_number':2141,'multiline':False]
['text':' if 3 <= ind - 1 <= 14','line_number':2144,'multiline':False]
['text':' f2* > 1/2 and the result may be exact','line_number':2147,'multiline':False]
['text':' Calculate f2* - 1/2','line_number':2148,'multiline':False]
['text':' bid_ten2mk128trunc[ind -1].w[1] is identical to ','line_number':2151,'multiline':False]
['text':' bid_ten2mk128[ind -1].w[1]','line_number':2152,'multiline':False]
['text':' set the inexact flag','line_number':2153,'multiline':False]
['text':' else the result is exact','line_number':2155,'multiline':False]
['text':' the result is inexact; f2* <= 1/2','line_number':2156,'multiline':False]
['text':' set the inexact flag','line_number':2157,'multiline':False]
['text':' if the result was a midpoint it was rounded away from zero','line_number':2162,'multiline':False]
['text':' 1 <= q <= 7','line_number':2168,'multiline':False]
['text':' res = +/-C (exact)','line_number':2169,'multiline':False]
['text':' if (exp > 0) => 1 <= exp <= 18, 1 <= q <= 7, 2 <= q + exp <= 20','line_number':2174,'multiline':False]
['text':' (the upper limit of 20 on q + exp is due to the fact that ','line_number':2175,'multiline':False]
['text':' +/-C * 10^exp is guaranteed to fit in 64 bits) ','line_number':2176,'multiline':False]
['text':' res = +/-C * 10^exp (exact)','line_number':2177,'multiline':False]
