['text':'*****************************************************************************
  Copyright (c) 2007-2011, Intel Corp.
  All rights reserved.

  Redistribution and use in source and binary forms, with or without 
  modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice, 
      this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright 
      notice, this list of conditions and the following disclaimer in the 
      documentation and/or other materials provided with the distribution.
    * Neither the name of Intel Corporation nor the names of its contributors 
      may be used to endorse or promote products derived from this software 
      without specific prior written permission.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
  THE POSSIBILITY OF SUCH DAMAGE.
*****************************************************************************','line_number':1,'multiline':True]
['text':'****************************************************************************
 *    BID64 add
 *****************************************************************************
 *
 *  Algorithm description:
 *
 *   if(exponent_a < exponent_b)
 *       switch a, b
 *   diff_expon = exponent_a - exponent_b
 *   if(diff_expon > 16)
 *      return normalize(a)
 *   if(coefficient_a*10^diff_expon guaranteed below 2^62)
 *       S = sign_a*coefficient_a*10^diff_expon + sign_b*coefficient_b
 *       if(|S|<10^16)
 *           return get_BID64(sign(S),exponent_b,|S|)
 *       else
 *          determine number of extra digits in S (1, 2, or 3)
 *            return rounded result
 *   else // large exponent difference
 *       if(number_digits(coefficient_a*10^diff_expon) +/- 10^16)
 *          guaranteed the same as
 *          number_digits(coefficient_a*10^diff_expon) )
 *           S = normalize(coefficient_a + (sign_a^sign_b)*10^(16-diff_expon))
 *           corr = 10^16 + (sign_a^sign_b)*coefficient_b
 *           corr*10^exponent_b is rounded so it aligns with S*10^exponent_S
 *           return get_BID64(sign_a,exponent(S),S+rounded(corr))
 *       else
 *         add sign_a*coefficient_a*10^diff_expon, sign_b*coefficient_b
 *             in 128-bit integer arithmetic, then round to 16 decimal digits
 *           
 *
 ***************************************************************************','line_number':30,'multiline':True]
['text':' check if y is not NaN','line_number':89,'multiline':False]
['text':' check if y is not NaN','line_number':102,'multiline':False]
['text':' unpack arguments, check for NaN or Infinity','line_number':133,'multiline':False]
['text':' x is Inf. or NaN','line_number':135,'multiline':False]
['text':' test if x is NaN','line_number':137,'multiline':False]
['text':' sNaN','line_number':140,'multiline':False]
['text':' x is Infinity?','line_number':147,'multiline':False]
['text':' check if y is Inf','line_number':149,'multiline':False]
['text':' return NaN','line_number':155,'multiline':False]
['text':' check if y is NaN','line_number':164,'multiline':False]
['text':' otherwise return +/-Inf','line_number':173,'multiline':False]
['text':' x is 0','line_number':179,'multiline':False]
['text':' y is Inf. or NaN?','line_number':191,'multiline':False]
['text':' sNaN','line_number':194,'multiline':False]
['text':' y is 0','line_number':200,'multiline':False]
['text':' x==0','line_number':201,'multiline':False]
['text':' sort arguments by exponent','line_number':220,'multiline':False]
['text':' exponent difference','line_number':237,'multiline':False]
['text':' get binary coefficients of x and y ','line_number':240,'multiline':True]
['text':'--- get number of bits in the coefficients of x and y ---','line_number':242,'multiline':False]
['text':' version 2 (original)','line_number':244,'multiline':False]
['text':' normalize a to a 16-digit coefficient','line_number':249,'multiline':False]
['text':' get binary coefficients of x and y ','line_number':262,'multiline':True]
['text':'--- get number of bits in the coefficients of x and y ---','line_number':264,'multiline':False]
['text':' not BID_ROUNDING_TO_NEAREST','line_number':277,'multiline':False]
['text':' RZ','line_number':304,'multiline':False]
['text':' check special case here','line_number':317,'multiline':False]
['text':' test whether coefficient_a*10^(exponent_a-exponent_b)  may exceed 2^62','line_number':332,'multiline':False]
['text':' coefficient_a*10^(exponent_a-exponent_b)<2^63','line_number':334,'multiline':False]
['text':' multiply by 10^(exponent_a-exponent_b)','line_number':336,'multiline':False]
['text':' sign mask','line_number':339,'multiline':False]
['text':' apply sign to coeff. of b','line_number':341,'multiline':False]
['text':' apply sign to coefficient a','line_number':344,'multiline':False]
['text':' get sign','line_number':349,'multiline':False]
['text':' coefficient_a < 10^16 ?','line_number':354,'multiline':False]
['text':' otherwise rounding is necessary','line_number':366,'multiline':False]
['text':' already know coefficient_a<10^19','line_number':368,'multiline':False]
['text':' coefficient_a < 10^17 ?','line_number':369,'multiline':False]
['text':' get P*(2^M[extra_digits])/10^extra_digits','line_number':390,'multiline':False]
['text':' now get P/10^extra_digits: shift C64 right by M[extra_digits]-128','line_number':394,'multiline':False]
['text':' coefficient_a*10^(exponent_a-exponent_b) is large','line_number':399,'multiline':False]
['text':' check whether we can take faster path','line_number':414,'multiline':False]
['text':' T1 = 10^(16-diff_dec_expon)','line_number':420,'multiline':False]
['text':' get number of digits in coefficient_a','line_number':423,'multiline':False]
['text':' addition','line_number':430,'multiline':False]
['text':' apply sign','line_number':436,'multiline':False]
['text':' add 10^16 and rounding constant','line_number':438,'multiline':False]
['text':' get P*(2^M[extra_digits])/10^extra_digits','line_number':443,'multiline':False]
['text':' now get P/10^extra_digits: shift C64 right by M[extra_digits]-128','line_number':447,'multiline':False]
['text':' result coefficient ','line_number':451,'multiline':False]
['text':' filter out difficult (corner) cases','line_number':453,'multiline':False]
['text':' this test ensures the number of digits in coefficient_a does not change ','line_number':454,'multiline':False]
['text':' after adding (the appropriately scaled and rounded) coefficient_b','line_number':455,'multiline':False]
['text':' result has more than 16 digits','line_number':459,'multiline':False]
['text':' must divide coeff_a by 10','line_number':461,'multiline':False]
['text':'reciprocals10_64[1]);','line_number':464,'multiline':False]
['text':' get P*(2^M[extra_digits])/10^extra_digits','line_number':482,'multiline':False]
['text':' now get P/10^extra_digits: shift C64 right by M[extra_digits]-128','line_number':486,'multiline':False]
['text':' result coefficient ','line_number':490,'multiline':False]
['text':' less than 16 digits in result','line_number':493,'multiline':False]
['text':'extra_digits --;','line_number':497,'multiline':False]
['text':' get P*(2^M[extra_digits])/10^extra_digits','line_number':503,'multiline':False]
['text':' now get P/10^extra_digits: shift C64 right by M[extra_digits]-128','line_number':507,'multiline':False]
['text':' result coefficient ','line_number':511,'multiline':False]
['text':'BID_ROUNDING_TO_NEAREST','line_number':528,'multiline':False]
['text':' check whether fractional part of initial_P/10^extra_digits is ','line_number':531,'multiline':False]
['text':' exactly .5','line_number':532,'multiline':False]
['text':' this is the same as fractional part of ','line_number':533,'multiline':False]
['text':'      (initial_P + 0.5*10^extra_digits)/10^extra_digits is exactly zero','line_number':534,'multiline':False]
['text':' get remainder','line_number':536,'multiline':False]
['text':' test whether fractional part is 0','line_number':539,'multiline':False]
['text':' get remainder','line_number':549,'multiline':False]
['text':' test whether fractional part is 0','line_number':555,'multiline':False]
['text':'if(!C64 && rmode==BID_ROUNDING_DOWN) sign_s=sign_y;','line_number':564,'multiline':False]
['text':' round up','line_number':567,'multiline':False]
