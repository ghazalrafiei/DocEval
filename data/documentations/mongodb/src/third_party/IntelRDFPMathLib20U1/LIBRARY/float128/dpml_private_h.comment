['text':'*****************************************************************************
  Copyright (c) 2007-2011, Intel Corp.
  All rights reserved.

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice,
      this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of Intel Corporation nor the names of its contributors
      may be used to endorse or promote products derived from this software
      without specific prior written permission.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
  THE POSSIBILITY OF SUCH DAMAGE.
*****************************************************************************','line_number':1,'multiline':True]
['text':'
 * For values that are small powers of two, the follow macros are useful for
 * generating the base two log of that values.  For example,
 * LOG2(BITS_PER_F_TYPE) will evaluate to 5, 6 or 7 for floating point
 * types s/f, t/g or x.
 ','line_number':63,'multiline':True]
['text':' The F_C_* defs must be in the current order, enumerated from 0 to 9 ','line_number':171,'multiline':True]
['text':' 0 ','line_number':173,'multiline':True]
['text':' 1 ','line_number':174,'multiline':True]
['text':' 2 ','line_number':175,'multiline':True]
['text':' 3 ','line_number':176,'multiline':True]
['text':' 4 ','line_number':177,'multiline':True]
['text':' 5 ','line_number':178,'multiline':True]
['text':' 6 ','line_number':179,'multiline':True]
['text':' 7 ','line_number':180,'multiline':True]
['text':' 8 ','line_number':181,'multiline':True]
['text':' 9 ','line_number':182,'multiline':True]
['text':' Environment specific macro definitions that pre-empt the generic
(and perhaps slow) definitions below are in include files per
ARCHITECTURE.  The macros defined in these files should be a subset of
the macros defined below (i.e. if there is a specific version, there
should also be a generic version that will work with any ANSI C
compiler).  [ In practice, we may not get around to writing the generic
versions until we need them. ] ','line_number':200,'multiline':True]
['text':'  Disallow use of intrinsic math functions on Windows NT on Intel  ','line_number':258,'multiline':True]
['text':'  defined( _WIN32 ) && defined( _M_IX86 ) ','line_number':295,'multiline':True]
['text':' General macros and generic (though perhaps slow) versions of the
specific macro definitions included above.  ','line_number':343,'multiline':True]
['text':' It is assumed that ROP detection has already been done ','line_number':401,'multiline':True]
['text':' floating type ','line_number':626,'multiline':True]
['text':' Rounding modes are done in an architecture specific way.  If no
specific macros were defined, assume there are no rounding modes. ','line_number':673,'multiline':True]
['text':'  Constants in bytes, for table indexing ','line_number':706,'multiline':True]
['text':' Make_float primitives ','line_number':716,'multiline':True]
['text':' The following several macros are intended to be used as a set.  It
is the combination of F_SAVE_SIGN_AND_GET_ABS and F_RESTORE_SIGN (or
F_NEGATE_IF_SIGN_NEG) that should be efficient (i.e. if slowing one of
them down will make the combination faster, go ahead and do it. ','line_number':759,'multiline':True]
['text':' Note that these copy_sign macros do not work correctly with -0.0 ','line_number':872,'multiline':True]
['text':' F_COPY_NEG_SIGN assumes the input value is non-negative.  If the
input value is negative, the sign of the result is undefined.  If the
input value is non-negative and sign is negative, the result will be
-(value).  If value is non-negative and sign is non-negative, the
result will = value. ','line_number':991,'multiline':True]
['text':' scale by float ','line_number':1911,'multiline':True]
['text':' SCALE_METHOD ','line_number':1920,'multiline':True]
['text':' no PRECISION_BACKUP_AVAILABLE ','line_number':1990,'multiline':True]
['text':' PRECISION_BACKUP_AVAILABLE ','line_number':2010,'multiline':True]
['text':'
 * The following macros are use to scale denormalized values to normalized
 * results.  All scaling is done by an implicit multiplication by a power
 * of two.  The power of two used to scale the denormalized values is 
 * defined by the macro __LOG2_DENORM_SCALE, which defaults to F_PRECISION.
 * Based on __LOG2_DENORM_SCALE, three other constants are specified for 
 * convienence:
 *
 *	__DENORM_SCALE			   2^__LOG2_DENORM_SCALE
 *	__DENORM_SCALE_BIASED_EXP	   the aligned, biased and unbiased 
 *	__DENORM_SCALE_UNBIASED_EXP	     exponent field of __DENORM_SCALE
 *	__LOG2_DENORM_SCALE_ALIGNED_W_EXP  __LOG2_DENORM_SCALE aligned with
 *					     exponent field
 *
 * The technique used for scaling involves minipulataing the exponent field
 * of the value to be scaled.  Specifically, if x is denormalized value with
 * bit pattern:
 *
 *		+-+-----------+------------------------+
 *	x:	|s|000 ... 000|          F             |
 *		+-+-----------+------------------------+
 *
 * Then x = (-1)^s*2^F_MIN_BIN_EXP*2^F_NORM*[F/2^(P_PRECISION - 1)].  Define u
 * and v, to be a floating point numbers with the following bits patterns:
 *
 *		+-+-----------+------------------------+
 *	u:	|s|     E     |          F             |
 *		+-+-----------+------------------------+
 *
 *		+-+-----------+------------------------+
 *	v:	|s|     E     |          0             |
 *		+-+-----------+------------------------+
 *
 * I.e. u has the bit pattern of x, with the exponent field set to E and v
 * is u with the fraction field cleared.  It follows that u and v have values:
 *
 * 	u = (-1)^s*2^(E-F_EXP_BIAS)*2^F_NORM*[1 + F/2^(P_PRECISION - 1)]
 * 	v = (-1)^s*2^(E-F_EXP_BIAS)*2^F_NORM
 *
 * If z is defined as u - v, then
 *
 *	z = (-1)^s*2^(E-F_EXP_BIAS)*2^F_NORM*[F/2^(P_PRECISION - 1)]
 *	  = 2^*(E-F_EXP_BIAS-F_MIN_BIN_EXP)*
 *             (-1)^s*2^F_MIN_BIN_EXP*2^F_NORM*[F/2^(P_PRECISION - 1)]
 *	  = 2^*(E-F_EXP_BIAS-F_MIN_BIN_EXP)*x
 *
 * I.e. z is x scaled up by 2^e, where e = E - F_EXP_BIAS - F_MIN_BIN_EXP.  In
 * the macros below, specifying __LOG2_DENORM_SCALE is equivalent to specifying
 * e in the above discussion.
 ','line_number':2103,'multiline':True]
['text':'
 * The following macros support extended precision multiplication of a sequence
 * of unsigned HALF_WORDs.  The basic operation is an extended integer multiply
 * and add.  It has four inputs and three results.  The inputs are an addend
 * in hi and lo parts (w_hi, w_lo), the carry in from the previous operation,
 * c_in, and the multiplier and multiplicand F and g.  The three outputs are
 * the carry out, c_out, and the hi and lo digits of the sum, z_hi and z_lo.
 * Letting B = 2^BITS_PER_WORD, the basic operation is
 *
 *	c_out*B^2 + z_hi*B + z_lo <== (w_hi*B + w_lo) + c_in*B + F*g
 *
 * The are 6 different macros, one for the basic operation and 5 special
 * cases.  E.g. ignore the carry out or carry is zero.
 *
 * They macros are defined as a group in order to be consistent.  If
 * BITS_PER_DIGIT is defined, it is assumed that the arithmetic macros have
 * been in one of the architecture specific include files.
 ','line_number':2228,'multiline':True]
['text':' no carry out possible ','line_number':2261,'multiline':True]
['text':' no carry out possible ','line_number':2275,'multiline':True]
['text':' !defined(BITS_PER_DIGIT) ','line_number':2325,'multiline':True]
['text':'
** It is occasionally useful to access the high or low 32 bits of a double
** precison as a 32 bit integer.  Unfortunately, for some architectures,
** (notably, alpha ev6) this can result in a memory access trap cause by
** writing 32 bits and then trying to read 64 bits from the same location.
** To work around this problem, we define the "load/store" integer type and
** appropriate macros.
','line_number':2327,'multiline':True]
['text':'
**  For platforms that have hardware SQRT instructions available (e.g., EV6),
**  the performance of some DPML functions may be improved by replacing a call
**  to (or the inlining of) the SQRT function with the equivalent hardware
**  instruction.
','line_number':2348,'multiline':True]
['text':' F_HW_OR_SW_PRECISE_SQRT is defined for hypot to use
** F_PRECISE_SQRT which is defined in sqrt_macros.h.
** Both F_PRECISE_SQRT and F_HW_OR_SW_PRECISE_SQRT are 
** used only in dpml_hypot.c
','line_number':2395,'multiline':True]
['text':' DPML_PRIVATE_H ','line_number':2415,'multiline':True]
