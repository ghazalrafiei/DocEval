['text':'*****************************************************************************
  Copyright (c) 2007-2011, Intel Corp.
  All rights reserved.

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice,
      this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of Intel Corporation nor the names of its contributors
      may be used to endorse or promote products derived from this software
      without specific prior written permission.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
  THE POSSIBILITY OF SUCH DAMAGE.
*****************************************************************************','line_number':1,'multiline':True]
['text':' The following several macros are intended to be used as a set.  It is
the combination of F_SAVE_SIGN_AND_GET_ABS and F_RESTORE_SIGN (or
F_NEGATE_IF_SIGN_NEG) that should be efficient (i.e. if slowing one of them
down will make the combination faster, go ahead and do it.  ','line_number':151,'multiline':True]
['text':' F_FORMAT ','line_number':233,'multiline':True]
['text':' The following several macros are intended to be used as a set.  It is
the combination of F_SAVE_SIGN_AND_GET_ABS and F_RESTORE_SIGN (or
F_NEGATE_IF_SIGN_NEG) that should be efficient (i.e. if slowing one of them
down will make the combination faster, go ahead and do it.  ','line_number':259,'multiline':True]
['text':' COMPILER ','line_number':286,'multiline':True]
['text':'  The macro X_SQR_TO_HI_LO is used to produce high and low parts of x^2;  ','line_number':346,'multiline':True]
['text':'  see the comments in DPML_ERF.C for details.  The macros are defined	    ','line_number':347,'multiline':True]
['text':'  here specifically for the Intel platform to avoid a problem with the    ','line_number':348,'multiline':True]
['text':'  CL386 compiler.  Given the sequence					    ','line_number':349,'multiline':True]
['text':'									    ','line_number':350,'multiline':True]
['text':'		a = ( B_TYPE ) ( ( F_TYPE ) b )				    ','line_number':351,'multiline':True]
['text':'									    ','line_number':352,'multiline':True]
['text':'  where a and b are of type B_TYPE, the compiler simple moves b into a    ','line_number':353,'multiline':True]
['text':'  rather than first shortening it and then lengthening it.  These macros  ','line_number':354,'multiline':True]
['text':'  have been hand-crafted to work around this problem.			    ','line_number':355,'multiline':True]
['text':'  The following macros support extended precision multiplication of a	    ','line_number':387,'multiline':True]
['text':'  sequence of unsigned WORDs.  The basic operation is an extended integer ','line_number':388,'multiline':True]
['text':'  multiply and add with four inputs and three results.  The inputs are an ','line_number':389,'multiline':True]
['text':'  addend, in high and low parts (w_hi, w_lo), the carry in from a	    ','line_number':390,'multiline':True]
['text':'  previous operation, c_in, and the multiplier and multiplicand F and g.  ','line_number':391,'multiline':True]
['text':'  The three outputs are the carry out, c_out, and the high and low digits ','line_number':392,'multiline':True]
['text':'  of the sum, z_hi and z_lo.  The basic operation is			    ','line_number':393,'multiline':True]
['text':'									    ','line_number':394,'multiline':True]
['text':'	F * g + w_lo + w_hi * BITS_PER_WORD + c_in ->			    ','line_number':395,'multiline':True]
['text':'		    z_lo + z_hi * BITS_PER_WORD + c_out * BITS_PER_WORD^2   ','line_number':396,'multiline':True]
['text':'									    ','line_number':397,'multiline':True]
['text':'  There are six different macros:  one for the basic operation and five   ','line_number':398,'multiline':True]
['text':'  special cases (e.g. to ignore the carry out or when the carry in is	    ','line_number':399,'multiline':True]
['text':'  zero).								    ','line_number':400,'multiline':True]
['text':'									    ','line_number':401,'multiline':True]
['text':'  a * b + add_low -> low						    ','line_number':420,'multiline':True]
['text':'  a * b -> low + high * 2^BITS_PER_WORD				    ','line_number':425,'multiline':True]
['text':'  a * b + add_low + add_high * 2^BITS_PER_WORD -> low +		    ','line_number':439,'multiline':True]
['text':'						    high * 2^BITS_PER_WORD  ','line_number':440,'multiline':True]
['text':'  a * b + add_low + add_high * 2^BITS_PER_WORD -> low +		    ','line_number':456,'multiline':True]
['text':'						    high * 2^BITS_PER_WORD  ','line_number':457,'multiline':True]
['text':'  a * b + add_low + add_high * 2^BITS_PER_WORD ->			    ','line_number':473,'multiline':True]
['text':'					low +				    ','line_number':474,'multiline':True]
['text':'					high * 2^BITS_PER_WORD +	    ','line_number':475,'multiline':True]
['text':'					carry_out * 2^(2 * BITS_PER_WORD)   ','line_number':476,'multiline':True]
['text':'  a * b + add_low + add_high * 2^BITS_PER_WORD + carry_in ->		    ','line_number':497,'multiline':True]
['text':'						    low +		    ','line_number':498,'multiline':True]
['text':'						    high * 2^BITS_PER_WORD  ','line_number':499,'multiline':True]
['text':'  a * b + add_low + add_high * 2^BITS_PER_WORD + carry_in ->		    ','line_number':516,'multiline':True]
['text':'					low +				    ','line_number':517,'multiline':True]
['text':'					high * 2^BITS_PER_WORD +	    ','line_number':518,'multiline':True]
['text':'					carry_out * 2^(2 * BITS_PER_WORD)   ','line_number':519,'multiline':True]
