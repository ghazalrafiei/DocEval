['text':'*****************************************************************************
  Copyright (c) 2007-2011, Intel Corp.
  All rights reserved.

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice,
      this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of Intel Corporation nor the names of its contributors
      may be used to endorse or promote products derived from this software
      without specific prior written permission.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
  THE POSSIBILITY OF SUCH DAMAGE.
*****************************************************************************','line_number':1,'multiline':True]
['text':'
 * Include platform specific headers.  Anything not defined in them will
 * be defaulted below.
 ','line_number':46,'multiline':True]
['text':'
 * The follow macros and code are used to to define the default exception
 * model.  If no exception definitions were made in the above files then
 * the default behavior will be determined by whether or not IEEE floating
 * point is defined.
 *
 * If IEEE floating point is defined, the exception handler assumes the
 * existance of a control register and a set of routines to read and write
 * it.  Otherwise the default behavior is defined to signal all exceptions
 * except underflow which is flushed to zero.  The default exception behaviors
 * do not allow for the mixing of IEEE behavior and non-IEEE.  I.e. by default
 * you get one or the other.
 *
 *
 *
 * If IEEE exception behavior make sure things that are supposed to be
 * defined, are defined
 ','line_number':55,'multiline':True]
['text':'
     * The data type of the FPCSR needs to be known.  If not specified,
     * assume it has the same type as the basic integer type on the platform.
     ','line_number':82,'multiline':True]
['text':'
     * We need to be able to map the five basic DPML exceptions onto the bit
     * positions of the sticky bits in the FPCSR.  If no mapping function is
     * provided assume that the DPML exception enumerations match the bit
     * positions of the sticky bits in the FPCSR
     ','line_number':91,'multiline':True]
['text':'
 * If no user exception environment is defined, read the enviornment from
 * the exception enable in the FPCSR for the IEEE case and just set to
 * signal everything except underflow otherwise.
 ','line_number':105,'multiline':True]
['text':'
 * If no user supplied signal mechanism, use the ANSI C raise() to generate
 * signal
 ','line_number':126,'multiline':True]
['text':'
 * If no side effects are specified then set errno, signal if the envirnment
 * indicates a signal and for the IEEE case update the sticky bits
 ','line_number':145,'multiline':True]
['text':' set ieee sticky bit before signaling exception ','line_number':183,'multiline':True]
['text':' !defined(DPML_DO_SIDE_EFFECTS) ','line_number':192,'multiline':True]
['text':'
	 * NOTE: This should be fixed.  The response table should
	 * have only one set of (err,value) pairs if only one
	 * behavior is supportted.
	 ','line_number':199,'multiline':True]
['text':' Split input error code into type, and base error ','line_number':245,'multiline':True]
['text':' Just a request for info ','line_number':251,'multiline':True]
