['text':'*****************************************************************************
  Copyright (c) 2007-2011, Intel Corp.
  All rights reserved.

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice,
      this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of Intel Corporation nor the names of its contributors
      may be used to endorse or promote products derived from this software
      without specific prior written permission.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
  THE POSSIBILITY OF SUCH DAMAGE.
*****************************************************************************','line_number':1,'multiline':True]
['text':' File: dpml_ux_ops.c ','line_number':31,'multiline':True]
['text':'
**  Facility:
**
**	DPML
**
**  Abstract:
**
** 	This file contains source code for the basic operations used in the
**	unpacked x-float library that are independent of word size: pack,
**	unpack, addsub and normalize
**
**  Modification History:
**
**	1-001   Version 1.  RNH 01-Sep-95
**	1-002   Made PACK and UNPACK take error information.  RNH 17-Sep-95
**	1-003   Adding missing return value in UNPACK2.  RNH 09-May-98
**	1-004	Modified FFS_AND_SHIFT and PACK to respect signed zeros;
**		Changed the representation of the default connonical NaN
**		RNH 29-Jun-07
**
','line_number':32,'multiline':True]
['text':' Pick up packed constant table ','line_number':56,'multiline':True]
['text':'
** The FFS_AND_SHIFT routine finds the most significant non-zero bit in an
** UX_FLOAT value and aligns it with the MSB of a normalized UX_FLOAT value.
** The flags argument controls the interpretation of the input argument.
** If flags is one of FFS_CVT_WORD or FFS_CVT_U_WORD, then the high fraction
** digit is assumed to be signed of unsigned word and all other fields are
** assumed to be undefined.
','line_number':65,'multiline':True]
['text':' Do a quick check for a normalized argument ','line_number':86,'multiline':True]
['text':' 
    ** If we get here, we had a zero fraction.  Set the exponent field
    ** accordingly, force the sign to positive and return.
    ','line_number':119,'multiline':True]
['text':' Quick check to see if its already normalized ','line_number':130,'multiline':True]
['text':' The high bit is not set, see if any of the next four are set ','line_number':133,'multiline':True]
['text':' Figure out which bit is set by "table look-up" ','line_number':137,'multiline':True]
['text':'
            ** Get shift by converting to floating point and extracting the
            ** then exponent field.  In the 64 bit case, make sure there is
            ** rounding on the convert.
            ','line_number':146,'multiline':True]
['text':'
** The ADDSUB routine add and/or subtracts two unpacked x-float values.
** The logic to determine the larger value is driven by the exponent fields
** only, so that it may be necessary to explicitly normalize the operands
** prior to calling ADDSUB.  The flags argument allow for producing the
** sum, difference or both for signed or unsigned values
','line_number':177,'multiline':True]
['text':'
    ** See if we are doing an implicit addition or subtraction.  This logic
    ** depends upon ADD = 0 and SUB = 1
    ','line_number':196,'multiline':True]
['text':'
    ** Determine larger value, call it x and the smaller y.  In the process
    ** keep track of whether or not a swap takes place so that we can get
    ** the correct sign of the second result on a combined operation
    ','line_number':214,'multiline':True]
['text':' Now align digits of the smaller value ','line_number':234,'multiline':True]
['text':'
    ** If we get here, there was a *VERY* big alignment shift, so we
    ** copy the answer to the result
    ','line_number':249,'multiline':True]
['text':'
    ** Save shifted value in case we are dealing with an ADD_SUB op
    ','line_number':271,'multiline':True]
['text':'
    ** Now do the operation.  The purpose of the do-loop is to ease processing
    ** of the ADD_SUB and SUB_ADD cases.
    ','line_number':279,'multiline':True]
['text':'
            ** Addition code.  Turn off normalization
            ','line_number':291,'multiline':True]
['text':' If carry is set, we need to normalizes fraction field ','line_number':322,'multiline':True]
['text':'
            ** Subtraction code.  Set normalization flag
            ','line_number':336,'multiline':True]
['text':'
            ** If carry is set, we guessed wrong about which was larger so
            ** negate the result
            ','line_number':367,'multiline':True]
['text':' Single op.  Quit now ','line_number':405,'multiline':True]
['text':' This is a dual op.  Do the second part ','line_number':408,'multiline':True]
['text':'
** UNPACK_X_OR_Y unpacks one of two x-float arguments and handles any
** special FP classes based on the class_to_action_map.  If the second
** argument, y, is non-zero, it is unpacked, otherwise the first argument is
** unpacked.
','line_number':424,'multiline':True]
['text':'
** The following macro changes/definitions are required to get the standard
** exception dispatcher interface macros to work
','line_number':434,'multiline':True]
['text':'
    ** Start unpacking the argument by fetching the exponent word and
    ** decomposing it into its sign, exponent and high fraction bit components
    ','line_number':471,'multiline':True]
['text':'
    ** Now get the remaining fraction bits, align them, and put them into
    ** the unpacked argument.  While we're fetching the fraction bits, generate
    ** the logical 'or' of all of them to be used for the classification
    ** logic later on.
    ','line_number':491,'multiline':True]
['text':'
    ** We've unpacked the argument, now start the classification process
    ','line_number':523,'multiline':True]
['text':' Input argument is +/-0, +/-denorm, +/- Infinity, [SQ]NaN ','line_number':533,'multiline':True]
['text':' argument was +/- zero or +/- denorm ','line_number':535,'multiline':True]
['text':' denorm, undo hidden bit, adjust exponent and normalize ','line_number':539,'multiline':True]
['text':' argument was +/- Inf or [SQ]NaN ','line_number':548,'multiline':True]
['text':' NaN ','line_number':552,'multiline':True]
['text':' Now get the class to action mapping index and action ','line_number':562,'multiline':True]
['text':' Leave now if all we have to do is unpack the argument ','line_number':589,'multiline':True]
['text':'printf("UNPACK %llx, %llx\n", (long long)fp_class, index);','line_number':593,'multiline':False]
['text':'
    ** If index is not 0 or 1, then the base return value is in the class to
    ** action mapping table.  Otherwise, the base value is the input argument
    ** or the auxiliary argument.
    ','line_number':595,'multiline':True]
['text':'printf("UNPACK 3 %llx, %llx d= %llx, %llx\n", (long long)fp_class, index, digit_ptr[0],digit_ptr[1]);','line_number':612,'multiline':False]
['text':'
    ** If this is an error action, process the exception and get the final
    ** return value from the exception handler.  Otherwise, manipulate
    ** the base value to get the final return value.
    ','line_number':615,'multiline':True]
['text':' exponent_digit &= (~SET_BIT(F_EXP_POS - 1));','line_number':632,'multiline':False]
['text':' Copy the final result to the packed result and return ','line_number':654,'multiline':True]
['text':'
** UNPACK2 is an interface layer that deals with processing the input
** arguments for 2 argument functions.  Basicly, this routine call 
** UNPACK_X_OR_Y twice and processes the more complicated class_to_action
** mappings associated with two argument functions.
','line_number':670,'multiline':True]
['text':'
    ** Check for NULL second argument.  This allows for UNPACK2 to
    ** process single arguments if it has to
    ','line_number':701,'multiline':True]
['text':'
** The PACK routine converts unpacked x-float arguments to packed and deals
** with any overflow, underflow or denorm conditions that might result.
','line_number':741,'multiline':True]
['text':'
    ** Start by "normalizing" any denormal results.  Also screen out any
    ** (encoded) zeros, since they screw up the rest of the logic
    ','line_number':762,'multiline':True]
['text':'packed_result->digit[1] = 0;','line_number':785,'multiline':False]
['text':' packed_result->digit[0] = 0;','line_number':786,'multiline':False]
['text':'
        ** We need to distinguish between zero, denoms and underflow here.
        ** In all cases, the fraction field will be correct.  However, we
        ** need to adjust the exponent value to get the right exponent field.
        ','line_number':801,'multiline':True]
['text':' Force underflow ','line_number':810,'multiline':True]
['text':' Now round result and shift right ','line_number':814,'multiline':True]
['text':'
    ** At this point, all of the fraction bits except the most significant
    ** have been written to the destination.  Current_digit holds the most
    ** significant fraction (correctly aligned) and incr = 1 iff the rounded
    ** fraction is 1.
    ','line_number':849,'multiline':True]
['text':' Finish packing and check for overflow and underflow ','line_number':862,'multiline':True]
['text':'
    ** Pack sign and exponent.  Be careful to convert to UX_FRACTION_DIGIT_TYPE
    ** first.  Adjust exponent to reflect hidden bit in fraction field
    ','line_number':863,'multiline':True]
['text':' If no overflow or underflow, we're done ','line_number':874,'multiline':True]
['text':' OK, no overflow or underflow.  ','line_number':877,'multiline':True]
['text':' Check for denorm and overflow/underflow processing ','line_number':880,'multiline':True]
['text':'
** For very ill behaved polynomial evaluations, we introduce a "packed" form
** of the coefficients to be used by a less efficient evaluation routine
** that unpacks the coefficients and evaluates the polynomial via Horner's
** scheme by calling the add/sub and multiply routines.  
**
** The special format used looks like:
**
**	|<----------------------- 128 bits -------------------->|
**	+---------------------------------------------------+---+-+
**	|          Normalized Fraction                      | K |s|
**	+---------------------------------------------------+---+-+
**	                                                 -->| w |<--
**
** where K is a biased scale field of w-bits and s is the sign bit.  The
** width of the biased scale factor, w, and the actual bias depends on the
** coefficients.  In general it is 4 bits or less.
**
** In a Horner's scheme evaluation of degree n, involving the coefficients
** c(k) and an argument x, the basic iteration (ignoring the signs) is of
** the form:
**
**		T(n) <-- c(n)
**		T(k) <-- c(k) + x*T(k+1)	for k = n-1, n-2, ..., 1, 0
**
** If we consider the binary exponent and fraction fields of the c(k)'s
** separately we can write c[k] = 2^e(k)*f(k), where 1/2 <= f(k) < 1.  We
** now define the k-th scale factor s(k) as
**
**			s(0) = e(0)
**			s(k) = e(k-1) - e(k)	for k = 1, 2, ..., n
**
** Then consider the recursion:
**
**	t(n) <-- 2^s(n)*f(n)
**	t(k) <-- 2^s(k)*[f(k) + x*t(k+1)]	for k = n-1, n-2, ..., 1, 0
**
** It can be shown by induction that t(k) = T(k)/2^e(k) for k >= 1 and that
** t(0) = T(0).
','line_number':908,'multiline':True]
