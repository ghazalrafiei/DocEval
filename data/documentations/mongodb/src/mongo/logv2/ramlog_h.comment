['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 * Variable-capacity circular log of line-oriented messages.
 *
 * Holds up to RamLog::kMaxLines lines and caps total space to RamLog::kMaxSizeBytes [1]. There is
 * no limit on the length of the line. RamLog expects the caller to truncate lines to a reasonable
 * length.
 *
 * RamLogs are stored in a global registry, accessed via RamLog::get() and
 * RamLog::getIfExists().
 *
 * RamLogs and their registry are self-synchronizing.  See documentary comments.
 * To read a RamLog, instantiate a RamLog::LineIterator, documented below.
 *
 * Note:
 * 1. In the degenerate case of a single log line being above RamLog::kMaxSizeBytes, it may
 *    keep up to two log lines and exceed the size cap.
 ','line_number':45,'multiline':True]
['text':'*
     * Returns a pointer to the ramlog named "name", creating one if it did not already exist.
     *
     * Synchronizes on the RamLog catalog lock, _namedLock.
     ','line_number':70,'multiline':True]
['text':'*
     * Returns a pointer to the ramlog named "name", or NULL if no such ramlog exists.
     *
     * Synchronizes on the RamLog catalog lock, _namedLock.
     ','line_number':77,'multiline':True]
['text':'*
     * Writes the names of all existing ramlogs into "names".
     *
     * Synchronizes on the RamLog catalog lock, _namedLock.
     ','line_number':84,'multiline':True]
['text':'*
     * Writes "str" as a line into the RamLog.  If "str" is longer than the maximum
     * line size of the log, it keeps two lines.
     *
     * Synchronized on the instance's own mutex, _mutex.
     ','line_number':91,'multiline':True]
['text':'*
     * Empties out the RamLog.
     ','line_number':99,'multiline':True]
['text':' want this private as we want to leak so we can use them till the very end','line_number':106,'multiline':False]
['text':' Maximum number of lines','line_number':115,'multiline':False]
['text':' Maximum capacity of RamLog of string data','line_number':118,'multiline':False]
['text':' Guards all non-static data.','line_number':121,'multiline':False]
['text':' stdx::recursive_mutex // NOLINT is intentional, mongo::Mutex can not be used here','line_number':122,'multiline':False]
['text':' NOLINT','line_number':123,'multiline':False]
['text':' Array of lines','line_number':125,'multiline':False]
['text':' First line of ram log','line_number':128,'multiline':False]
['text':' Last line of ram log','line_number':131,'multiline':False]
['text':' Total size of bytes written','line_number':134,'multiline':False]
['text':' Name of Ram Log','line_number':137,'multiline':False]
['text':' Total lines written since last clear, can be > kMaxLines','line_number':140,'multiline':False]
['text':'*
 * Iterator over the lines of a RamLog.
 *
 * Also acts as a means of inspecting other properites of a ramlog consistently.
 *
 * Instances of LineIterator hold the lock for the underlying RamLog for their whole lifetime,
 * and so should not be kept around.
 ','line_number':144,'multiline':True]
['text':'*
     * Returns true if there are more lines available to return by calls to next().
     ','line_number':159,'multiline':True]
['text':'*
     * Returns the next line and advances the iterator.
     ','line_number':166,'multiline':True]
['text':' Postfix increment.','line_number':170,'multiline':False]
['text':'*
     * Returns the total number of lines ever written to the ramlog.
     ','line_number':173,'multiline':True]
['text':' Holds RamLog's mutex','line_number':181,'multiline':False]
['text':' namespace mongo::logv2','line_number':187,'multiline':False]
