['text':'*
 *    Copyright (C) 2019-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' Custom type, storage for how to call its formatters','line_number':50,'multiline':False]
['text':' Have both serialize and toString available, using toString() with a serialize interface is','line_number':56,'multiline':False]
['text':' inefficient.','line_number':57,'multiline':False]
['text':' Helper traits to figure out capabilities on custom types','line_number':83,'multiline':False]
['text':' Trait to detect container, common interface for both std::array and std::forward_list','line_number':95,'multiline':False]
['text':' Requires any of these BSON serialization calls:','line_number':166,'multiline':False]
['text':'   x.toBSON()','line_number':167,'multiline':False]
['text':'   toBSON(x)','line_number':168,'multiline':False]
['text':'   x.toBSONArray()','line_number':169,'multiline':False]
['text':'   x.serialize(&bob)','line_number':170,'multiline':False]
['text':'   bob.append(key, x)','line_number':171,'multiline':False]
['text':' or any of these String serialization calls:','line_number':172,'multiline':False]
['text':'   std::string toStringForLogging(x)','line_number':173,'multiline':False]
['text':'   x.serialize(fmt::memory_buffer&)','line_number':174,'multiline':False]
['text':'   std::string x.toString()','line_number':175,'multiline':False]
['text':'   StringData x.toString()','line_number':176,'multiline':False]
['text':'   std::string toString(x)','line_number':177,'multiline':False]
['text':'   StringData toString(x)','line_number':178,'multiline':False]
['text':' BSON serialization','line_number':184,'multiline':False]
['text':' string serialization','line_number':190,'multiline':False]
['text':' Mapping functions on how to map a logged value to how it is stored in variant (reused by','line_number':197,'multiline':False]
['text':' container support)','line_number':198,'multiline':False]
['text':' Use BSONAppend instead of toBSON because we just want the null value and not a whole','line_number':261,'multiline':False]
['text':' object with a field name','line_number':262,'multiline':False]
['text':' JSON Format: [elem1, elem2, ..., elemN]','line_number':394,'multiline':False]
['text':' Text Format: (elem1, elem2, ..., elemN)','line_number':442,'multiline':False]
['text':' JSON Format: {"elem1": val1, "elem2": val2, ..., "elemN": valN}','line_number':511,'multiline':False]
['text':' Text Format: (elem1: val1, elem2: val2, ..., elemN: valN)','line_number':555,'multiline':False]
['text':' Named attribute, storage for a name-value attribute.','line_number':622,'multiline':False]
['text':' Attribute Storage stores an array of Named Attributes.','line_number':661,'multiline':False]
['text':' Arrays need a size of at least 1, add dummy element if needed (kNumArgs above is still 0)','line_number':671,'multiline':False]
['text':' This class is meant to be wrapped by TypeErasedAttributeStorage below that provides public','line_number':674,'multiline':False]
['text':' accessors. Let it access all our internals.','line_number':675,'multiline':False]
['text':' namespace detail','line_number':679,'multiline':False]
['text':'*
     * This constructor allows users to construct DynamicAttributes in the same style as normal
     * LOGV2 calls. Example:
     *
     * DynamicAttributes(
     *    DynamicAttributes{}, // Something that can be returned by a function
     *    "attr1"_attr = val1,
     *    "attr2"_attr = val2
     * )
     *
     * This can be useful for classes that want to provide a set of basic attributes for sub-classes
     * to extend with their own attributes.
     ','line_number':685,'multiline':True]
['text':' Do not allow rvalue references and temporary objects to avoid lifetime problem issues','line_number':706,'multiline':False]
['text':' Deep copies the string instead of taking it by reference','line_number':745,'multiline':False]
['text':' Does not have the protections of add() above. Be careful about lifetime of value!','line_number':752,'multiline':False]
['text':' This class is meant to be wrapped by TypeErasedAttributeStorage below that provides public','line_number':764,'multiline':False]
['text':' accessors. Let it access all our internals.','line_number':765,'multiline':False]
['text':' Linked list of deep copies to std::string that we can take address-of.','line_number':770,'multiline':False]
['text':' Wrapper around internal pointer of AttributeStorage so it does not need any template parameters','line_number':774,'multiline':False]
['text':' Applies a function to every stored named attribute in order they are captured','line_number':803,'multiline':False]
['text':' Helpers for logging containers, optional to use. Allowes logging of ranges.','line_number':816,'multiline':False]
['text':' namespace mongo::logv2','line_number':841,'multiline':False]
