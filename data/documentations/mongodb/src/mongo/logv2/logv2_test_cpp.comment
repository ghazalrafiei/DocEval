['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' IWYU pragma: keep','line_number':42,'multiline':False]
['text':' IWYU pragma: no_include "boost/log/detail/attachable_sstream_buf.hpp"','line_number':65,'multiline':False]
['text':' IWYU pragma: no_include "boost/log/detail/locking_ptr.hpp"','line_number':66,'multiline':False]
['text':' IWYU pragma: no_include "boost/multi_index/detail/bidir_node_iterator.hpp"','line_number':75,'multiline':False]
['text':' IWYU pragma: no_include "boost/property_tree/detail/exception_implementation.hpp"','line_number':80,'multiline':False]
['text':' IWYU pragma: no_include "boost/property_tree/detail/ptree_implementation.hpp"','line_number':81,'multiline':False]
['text':' We have to leave this sink installed as it is not allowed to install sinks during','line_number':292,'multiline':False]
['text':' shutdown. Add a filter so it is only used during this test.','line_number':293,'multiline':False]
['text':'*
     * Take some `boost::shared_ptr<T>...` backends, and make a
     * `boost::shared_ptr<CompositeBackend<T...>>` from them.
     ','line_number':366,'multiline':True]
['text':' Serialize should be preferred when both are available','line_number':445,'multiline':False]
['text':' Sink backend which will grab a mutex, then immediately segfault.','line_number':470,'multiline':False]
['text':' Reentrance of consume(), which could cause deadlock. Exit normally, causing the death','line_number':484,'multiline':False]
['text':' test to fail.','line_number':485,'multiline':False]
['text':' Test that signals thrown during logging will not hang process death. Uses the','line_number':494,'multiline':False]
['text':' ConsumeSegfaultsBackend so that upon the initial log call, ConsumeSegfaultsBackend::consume will','line_number':495,'multiline':False]
['text':' be called, sending SIGSEGV. If the signal handler incorrectly invokes the logging subsystem, the','line_number':496,'multiline':False]
['text':' ConsumeSegfaultsBackend::consume function will be again invoked, failing the test since this','line_number':497,'multiline':False]
['text':' could result in deadlock.','line_number':498,'multiline':False]
['text':' If we get here, we didn't segfault, and the test will fail.','line_number':503,'multiline':False]
['text':' The JSON formatter should make the types round-trippable without data loss','line_number':537,'multiline':False]
['text':' TODO: We should have been able to use std::make_signed here but it is broken on','line_number':570,'multiline':False]
['text':' Visual Studio 2017 and 2019','line_number':571,'multiline':False]
['text':' Floats are formatted as double','line_number':600,'multiline':False]
['text':' cast to prevent property_tree ASCII parse.','line_number':627,'multiline':False]
['text':' long double is prohibited, we don't use this type and favors Decimal128 instead.','line_number':645,'multiline':False]
['text':' enums','line_number':649,'multiline':False]
['text':' Throw an exception in a BSON serialization method','line_number':912,'multiline':False]
['text':' Throw an exception in a BSON Array serialization method','line_number':923,'multiline':False]
['text':' Runs the same validator on the json and bson versions of the logs to ensure consistency','line_number':985,'multiline':False]
['text':' between them.','line_number':986,'multiline':False]
['text':' Check that one of them actually has the value too.','line_number':1182,'multiline':False]
['text':' Helper to create a comma separated list of a container, stringify is function on how to','line_number':1317,'multiline':False]
['text':' transform element into a string.','line_number':1318,'multiline':False]
['text':'* Ensure json and bson modes both pass. ','line_number':1340,'multiline':True]
['text':' All standard sequential containers are supported','line_number':1348,'multiline':False]
['text':' Test that containers can contain uint32_t, even as this type is not BSON appendable','line_number':1362,'multiline':False]
['text':' Elements can require custom formatting','line_number':1383,'multiline':False]
['text':' Optionals are also allowed as elements','line_number':1400,'multiline':False]
['text':' Containers can be nested','line_number':1427,'multiline':False]
['text':' Associative containers are also supported','line_number':1454,'multiline':False]
['text':' Associative containers with optional sequential container is ok too','line_number':1469,'multiline':False]
['text':' Test that maps can contain uint32_t, even as this type is not BSON appendable','line_number':1529,'multiline':False]
['text':' JSON requires strings to be valid UTF-8 and control characters escaped.','line_number':1558,'multiline':False]
['text':' JSON parsers decode escape sequences so control characters should be round-trippable.','line_number':1559,'multiline':False]
['text':' Invalid UTF-8 encoded data is replaced by the Unicode Replacement Character (U+FFFD).','line_number':1560,'multiline':False]
['text':' There is no way to preserve the data without introducing special semantics in how to parse.','line_number':1561,'multiline':False]
['text':' Single byte characters that needs to be escaped','line_number':1563,'multiline':False]
['text':' multi byte characters that needs to be escaped (unicode control characters)','line_number':1565,'multiline':False]
['text':' Valid 2 Octet sequence, LATIN SMALL LETTER N WITH TILDE','line_number':1567,'multiline':False]
['text':' Invalid 2 Octet Sequence, result is escaped','line_number':1569,'multiline':False]
['text':' Invalid Sequence Identifier, result is escaped','line_number':1571,'multiline':False]
['text':' Valid 3 Octet sequence, RUNIC LETTER TIWAZ TIR TYR T','line_number':1573,'multiline':False]
['text':' Invalid 3 Octet Sequence (in 2nd Octet), result is escaped','line_number':1575,'multiline':False]
['text':' Invalid 3 Octet Sequence (in 3rd Octet), result is escaped','line_number':1577,'multiline':False]
['text':' Valid 4 Octet sequence, GOTHIC LETTER MANNA','line_number':1579,'multiline':False]
['text':' Invalid 4 Octet Sequence (in 2nd Octet), result is escaped','line_number':1581,'multiline':False]
['text':' Invalid 4 Octet Sequence (in 3rd Octet), result is escaped','line_number':1583,'multiline':False]
['text':' Invalid 4 Octet Sequence (in 4th Octet), result is escaped','line_number':1585,'multiline':False]
['text':' Valid 5 Octet Sequence (but not Unicode!), result is escaped','line_number':1587,'multiline':False]
['text':' Valid 6 Octet Sequence (but not Unicode!), result is escaped','line_number':1589,'multiline':False]
['text':' Invalid 3 Octet sequence, buffer ends prematurely, result is escaped','line_number':1591,'multiline':False]
['text':' Verify with both our parser and boost::property_tree','line_number':1615,'multiline':False]
['text':' Represents a segment of the truncation path','line_number':1628,'multiline':False]
['text':' name of the field where the truncation occurs','line_number':1630,'multiline':False]
['text':' number of omitted fields after fieldName','line_number':1633,'multiline':False]
['text':' Truncation path is a sequence of segments for each level of the truncated BSON object,','line_number':1638,'multiline':False]
['text':' where the index in the sequence is the same as the depth of that segment in the object.','line_number':1639,'multiline':False]
['text':' The last segment in the path is the "leaf" from which the truncation started,','line_number':1640,'multiline':False]
['text':' and unlike the segments before it, it is NOT expected to appear in the truncated object,','line_number':1641,'multiline':False]
['text':' and must therefore be counted in the expected "omitted" value.','line_number':1642,'multiline':False]
['text':' BSON type of the leaf element from which the truncation started','line_number':1645,'multiline':False]
['text':' Attr object before truncation','line_number':1650,'multiline':False]
['text':' Describes the expected truncation of the attr object','line_number':1653,'multiline':False]
['text':' Name for this test case','line_number':1656,'multiline':False]
['text':' ["1_a",','line_number':1715,'multiline':False]
['text':' ["1_a", [','line_number':1717,'multiline':False]
['text':' ["1_a", [[','line_number':1719,'multiline':False]
['text':' ["1_a", [["3_a", "3_b", "3_c", largeString, "3_d"]], "1_b"]','line_number':1728,'multiline':False]
['text':' Validates the truncation report in the log line for attrName has the correct structure','line_number':1744,'multiline':False]
['text':' that matches the expected truncation path.','line_number':1745,'multiline':False]
['text':' For reference, an example truncation report (for largeStringInSubobj test case) looks like:','line_number':1746,'multiline':False]
['text':'  {','line_number':1747,'multiline':False]
['text':'     "truncated":{','line_number':1748,'multiline':False]
['text':'         "sub1":{','line_number':1749,'multiline':False]
['text':'             "truncated":{','line_number':1750,'multiline':False]
['text':'                 "sub2":{','line_number':1751,'multiline':False]
['text':'                     "truncated":{','line_number':1752,'multiline':False]
['text':'                         "large":{','line_number':1753,'multiline':False]
['text':'                             "type":"string",','line_number':1754,'multiline':False]
['text':'                             "size":{"$numberInt":"20485"}','line_number':1755,'multiline':False]
['text':'                         }','line_number':1756,'multiline':False]
['text':'                     },','line_number':1757,'multiline':False]
['text':'                     "omitted":{"$numberInt":"2"}','line_number':1758,'multiline':False]
['text':'                 }','line_number':1759,'multiline':False]
['text':'             },','line_number':1760,'multiline':False]
['text':'             "omitted":{"$numberInt":"2"}','line_number':1761,'multiline':False]
['text':'         }','line_number':1762,'multiline':False]
['text':'     }','line_number':1763,'multiline':False]
['text':'  }','line_number':1764,'multiline':False]
['text':' validate nested "truncated" elements except for the last (leaf) truncated element.','line_number':1779,'multiline':False]
['text':' leaf reached','line_number':1807,'multiline':False]
['text':' Validates the reported size of the truncated attr in the log line matches the size of the','line_number':1827,'multiline':False]
['text':' original BSON object.','line_number':1828,'multiline':False]
['text':' At every level of the modified document, validates that only the fields before & including','line_number':1840,'multiline':False]
['text':' the truncation path are present.','line_number':1841,'multiline':False]
['text':' if truncatedFieldName is present in the truncated object, but the test expects','line_number':1875,'multiline':False]
['text':' it to be a leaf, then it should have been omitted.','line_number':1876,'multiline':False]
['text':' if the original object has more fields than the modified object, but the truncated','line_number':1899,'multiline':False]
['text':' field name is not in the modified object, then it MUST have been an omitted leaf','line_number':1900,'multiline':False]
['text':' element.','line_number':1901,'multiline':False]
['text':' The next element in the original object must be the truncated field name','line_number':1904,'multiline':False]
['text':' Check that all fields up until the large one is written','line_number':1930,'multiline':False]
['text':' Attributes coming after the truncated one should be written','line_number':1939,'multiline':False]
['text':' "\n\"NOPQ" expands to "\\n\\\"NOPQ" after escape, and the limit','line_number':1974,'multiline':False]
['text':' is reached at the 2nd '\\' octet, but since it splits the "\\\""','line_number':1975,'multiline':False]
['text':' sequence, the actual truncation happens after the 'n' octet.','line_number':1976,'multiline':False]
['text':' "L\vNOPQ" expands to "L\\u000bNOPQ" after escape, and the limit','line_number':1978,'multiline':False]
['text':' is reached at the 'u' octet, so the entire sequence is truncated.','line_number':1979,'multiline':False]
['text':' The invalid UTF-8 codepoint 0xC3 is replaced with "\\ufffd", and truncated entirely','line_number':1985,'multiline':False]
['text':' Positive: Test that the ram log is properly circular','line_number':2072,'multiline':False]
['text':' Write enough lines to trigger wrapping','line_number':2081,'multiline':False]
['text':' Verify we circled correctly through the buffer','line_number':2090,'multiline':False]
['text':' Positive: Test that the ram log has a max size cap','line_number':2102,'multiline':False]
['text':' Write enough lines to trigger wrapping and trimming','line_number':2113,'multiline':False]
['text':' Verify we keep just enough lines that fit','line_number':2124,'multiline':False]
['text':' Positive: Test that the ram log handles really large lines','line_number':2136,'multiline':False]
['text':' Write enough lines to trigger wrapping','line_number':2144,'multiline':False]
['text':' Verify we keep 2 lines','line_number':2157,'multiline':False]
['text':' Example how a second domain can be created.','line_number':2170,'multiline':False]
['text':' Examples of some capabilities for file logging. Rotation, header/footer support.','line_number':2198,'multiline':False]
['text':' Depending on verbosity set the assertion code may emit additional log messages after ours,','line_number':2251,'multiline':False]
['text':' disregard them when verifying by clearing lines after every test','line_number':2252,'multiline':False]
['text':' NOLINT','line_number':2288,'multiline':False]
['text':' NOLINT','line_number':2296,'multiline':False]
['text':' Ensure the plain formatter does not process the formatted string','line_number':2303,'multiline':False]
['text':' NOLINT','line_number':2307,'multiline':False]
['text':' NOLINT','line_number':2316,'multiline':False]
['text':' NOLINT','line_number':2325,'multiline':False]
['text':' NOLINT','line_number':2338,'multiline':False]
['text':' NOLINT','line_number':2346,'multiline':False]
['text':' NOLINT','line_number':2357,'multiline':False]
['text':' NOLINT','line_number':2371,'multiline':False]
['text':' namespace','line_number':2378,'multiline':False]
['text':' namespace mongo::logv2','line_number':2379,'multiline':False]
