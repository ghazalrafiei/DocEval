['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' IWYU pragma: keep','line_number':32,'multiline':False]
['text':' IWYU pragma: keep','line_number':34,'multiline':False]
['text':'*
 * Very basic implementation of a stream buffer backed by
 * a fixed sized internal buffer that flushes
 * to the console using WriteConsoleW().
 *
 * Implementation notes:
 * WriteConsoleW() vs std::wcout
 *     std::wcout produces garbage output for messages containing 2-byte sequences
 *     under all the terminal environments tested (Command Prompt, Power Shell, Cygwin).
 *     3-byte sequences will cause std::wcout to go into a bad state (failbit=true).
 *     Also tried calling _setmode( _fileno(stdout), ...) with various modes (_O_U16TEXT,
 *     ...), all of which produces garbage results on the console.
 ','line_number':45,'multiline':True]
['text':' leave room at end of buffer for overflow character','line_number':62,'multiline':False]
['text':' push to end of buffer','line_number':71,'multiline':False]
['text':' If the overflow byte is part of a UTF-8 multi-byte sequence,','line_number':75,'multiline':False]
['text':' locate the beginning of the byte sequence and determine if','line_number':76,'multiline':False]
['text':' the byte sequence represents a complete unicode code point.','line_number':77,'multiline':False]
['text':' If the sequence is complete, proceed to flush the buffer.','line_number':78,'multiline':False]
['text':' If the sequence is incomplete, flush the buffer up to but','line_number':79,'multiline':False]
['text':' not including incomplete code point before re-inserting the','line_number':80,'multiline':False]
['text':' bytes back into the internal buffer.','line_number':81,'multiline':False]
['text':' length of unicode byte sequence can be at most 4 in length. See RFC 3629','line_number':84,'multiline':False]
['text':' do not look back beyond 4 characters (maximum length for UTF-8 sequences)','line_number':87,'multiline':False]
['text':' p will point to first byte of unicode code point upon exit from loop','line_number':88,'multiline':False]
['text':' check for beginning of code point','line_number':93,'multiline':False]
['text':' check for invalid byte. all bytes in multi-byte sequence','line_number':97,'multiline':False]
['text':' should have left most bit set','line_number':98,'multiline':False]
['text':' get expected length of code point','line_number':104,'multiline':False]
['text':' cast to unsigned type to avoid sign extension','line_number':105,'multiline':False]
['text':' if beginning of sequence was not found, expectedLength will be zero and','line_number':108,'multiline':False]
['text':' we will consider the multi-byte sequence to be garbage and flush the','line_number':109,'multiline':False]
['text':' entire buffer','line_number':110,'multiline':False]
['text':' if code point is incomplete, rewind and flush buffer before','line_number':112,'multiline':False]
['text':' refilling with incomplete byte sequence','line_number':113,'multiline':False]
['text':' rewind internal buffer to end before unfinished byte sequence','line_number':115,'multiline':False]
['text':' store result. should eventually return','line_number':118,'multiline':False]
['text':' original overflow character on success','line_number':119,'multiline':False]
['text':' after flushing pptr() will point to beginning of buffer','line_number':122,'multiline':False]
['text':' copy bytes starting from p to beginning of internal buffer','line_number':123,'multiline':False]
['text':' keep this value reasonable. this class is used primarily','line_number':142,'multiline':False]
['text':' to buffer log messages','line_number':143,'multiline':False]
['text':' mapping of leftmost 4 bits of first byte of code point','line_number':146,'multiline':False]
['text':' to number of expected bytes in complete code point','line_number':147,'multiline':False]
['text':' 110x -> 2','line_number':148,'multiline':False]
['text':' 1110 -> 3','line_number':149,'multiline':False]
['text':' 1111 -> 4','line_number':150,'multiline':False]
['text':' In the event that WriteConsoleW fails, return false','line_number':153,'multiline':False]
['text':' to allow stream to update error state flags (most likely badbit)','line_number':154,'multiline':False]
['text':' convert multi-byte buffer to wide characters and output using WriteConsoleW','line_number':160,'multiline':False]
['text':' m holds number of unwritten wide characters in buffer','line_number':165,'multiline':False]
['text':' 0x0 - 0xb - invalid start of multi-byte sequence`','line_number':192,'multiline':False]
['text':' Create a output stream to redirect console writes','line_number':197,'multiline':False]
['text':' to WriteConsoleW() if there is a real console available (FILE_TYPE_CHAR)','line_number':198,'multiline':False]
['text':' Otherwise, return std::cout','line_number':199,'multiline':False]
['text':'','line_number':200,'multiline':False]
['text':' Command Prompt and Power Shell (GetFileType() == FILE_TYPE_CHAR):','line_number':201,'multiline':False]
['text':'     Set the font to either Lucida Console or Consolas to see 2 and 3-byte sequences.','line_number':202,'multiline':False]
['text':'     The fonts provided by the existing Windows console programs do not','line_number':203,'multiline':False]
['text':'     render complex 4-byte sequences propertly.','line_number':204,'multiline':False]
['text':' File redirection (GetFileType() == FILE_TYPE_DISK):','line_number':205,'multiline':False]
['text':'     When the output is redirected from the console, WriteConsoleW will fail and we','line_number':206,'multiline':False]
['text':'     will fall back on using _write().','line_number':207,'multiline':False]
['text':' Cygwin (GetFileType() == FILE_TYPE_PIPE):','line_number':208,'multiline':False]
['text':'     An "invalid handle" error message will be displayed on first log message and','line_number':209,'multiline':False]
['text':'     flushToConsole() will fall back on using _write().','line_number':210,'multiline':False]
['text':' defined(_WIN32)','line_number':224,'multiline':False]
['text':' This initializer causes a Console object to be constructed, which,','line_number':226,'multiline':False]
['text':' in turn, causes std::ios_base::Init::Init to be called from a','line_number':227,'multiline':False]
['text':' single threaded context, ensuring that std::cout is prepared in a','line_number':228,'multiline':False]
['text':' single threaded context and available for all TUs. This is safe','line_number':229,'multiline':False]
['text':' even for TUs that do not include <iostream>, since either the call','line_number':230,'multiline':False]
['text':' to Console() here is the first call to that constructor, or the','line_number':231,'multiline':False]
['text':' first logging call writing via the Console will happen elsewhere in','line_number':232,'multiline':False]
['text':' the initalizer chain.','line_number':233,'multiline':False]
['text':' namespace','line_number':238,'multiline':False]
['text':' Don't get clever and make this non-static. At least when using','line_number':241,'multiline':False]
['text':' libc++, ios::base::Init::Init is not thread safe (see','line_number':242,'multiline':False]
['text':' SERVER-22974). Instead, rely on C++11 magic statics to ensure','line_number':243,'multiline':False]
['text':' that we create this at the right time. Some systems (like','line_number':244,'multiline':False]
['text':' VS2013 and older), don't actually implement magic statics','line_number':245,'multiline':False]
['text':' yet. But that is OK! We ensure that this is called from','line_number':246,'multiline':False]
['text':' single-threaded context via a mongo initializer above.','line_number':247,'multiline':False]
['text':' check value of ostream in case','line_number':253,'multiline':False]
['text':' static initializer has not been invoked','line_number':254,'multiline':False]
['text':' defined(_WIN32)','line_number':258,'multiline':False]
['text':' namespace mongo::logv2','line_number':262,'multiline':False]
