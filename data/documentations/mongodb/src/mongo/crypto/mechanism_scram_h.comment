['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' The precursors necessary to perform the computation which produces SCRAMSecrets.
 * These are the original password, its salt, and the number of times it must be
 * hashed to produce the SaltedPassword used to generate the rest of the SCRAMSecrets.
 ','line_number':69,'multiline':True]
['text':' saltedPassword = Hi(hashedPassword, salt)','line_number':83,'multiline':False]
['text':' Reserve a HashBlock::kHashLength block for the initial key.','line_number':85,'multiline':False]
['text':' We use saltLength() salts, and reserve the extra for a suffix mandated by RFC5802.','line_number':86,'multiline':False]
['text':' U1 = HMAC(input, salt + 0001)','line_number':94,'multiline':False]
['text':' intermediateDigest contains Ui and output contains the accumulated XOR:ed result','line_number':102,'multiline':False]
['text':' clang-tidy flags this return type as readability-const-return-type','line_number':130,'multiline':False]
['text':' NOLINTNEXTLINE(readability-const-return-type)','line_number':131,'multiline':False]
['text':' Stores all of the keys, generated from a password, needed for a client or server to perform a
 * SCRAM handshake.
 * These keys are reference counted, and allocated using the SecureAllocator.
 * May be unpopulated. SCRAMSecrets created via the default constructor are unpopulated.
 * The behavior is undefined if the accessors are called when unpopulated.
 ','line_number':191,'multiline':True]
['text':' ClientKey := HMAC(saltedPassword, "Client Key")','line_number':215,'multiline':False]
['text':' StoredKey := H(clientKey)','line_number':221,'multiline':False]
['text':' ServerKey := HMAC(SaltedPassword, "Server Key")','line_number':224,'multiline':False]
['text':' ClientProof := HMAC(StoredKey, AuthMessage) ^ ClientKey','line_number':235,'multiline':False]
['text':' ClientKey := HMAC(StoredKey, AuthMessage) ^ ClientProof','line_number':245,'multiline':False]
['text':' StoredKey := H(ClientKey)','line_number':254,'multiline':False]
['text':' ServerSignature := HMAC(ServerKey, AuthMessage)','line_number':267,'multiline':False]
['text':' ServerSignature := HMAC(ServerKey, AuthMessage)','line_number':275,'multiline':False]
['text':' namespace scram','line_number':335,'multiline':False]
['text':' namespace mongo','line_number':336,'multiline':False]
