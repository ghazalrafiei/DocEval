['text':'*
 *    Copyright (C) 2019-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' AssociatedData can be 2^24 bytes but since there needs to be room for the ciphertext in the','line_number':56,'multiline':False]
['text':' object, a value of 1<<16 was decided to cap the maximum size of AssociatedData.','line_number':57,'multiline':False]
['text':' Some cipher modes, such as GCM, will know in advance exactly how large their ciphertexts will','line_number':103,'multiline':False]
['text':' be. Others, like CBC, will have an upper bound. When this is true, we must allocate enough','line_number':104,'multiline':False]
['text':' memory to store the worst case. We must then set the actual size of the ciphertext so that','line_number':105,'multiline':False]
['text':' the buffer it has been written to may be serialized.','line_number':106,'multiline':False]
['text':' Check the returned length, including block size padding','line_number':118,'multiline':False]
['text':' Check the plaintext buffer can fit the product of decryption','line_number':134,'multiline':False]
['text':' Check the returned length, excluding headers block padding','line_number':167,'multiline':False]
['text':' Check that padding was removed.
         *
         * PKCS7 padding guarantees that the encrypted payload has
         * between 1 and blocksize bytes of padding which should be
         * removed during the decrypt process.
         *
         * If resultLen is the same as the payload len,
         * that means no padding was removed.
         *
         * macOS CommonCrypto will return such payloads when either the
         * key or ciphertext are corrupted and its unable to find any
         * expected padding.  It fails open by returning whatever it can.
         ','line_number':176,'multiline':True]
['text':' namespace','line_number':201,'multiline':False]
['text':' To calculate the size of the byte, we divide by the byte size and add 2 for padding','line_number':204,'multiline':False]
['text':' (1 for the attached IV, and 1 for the extra padding). The algorithm will add padding even','line_number':205,'multiline':False]
['text':' if the len is a multiple of the byte size, so if the len divides cleanly it will be','line_number':206,'multiline':False]
['text':' 32 bytes longer than the original, which is 16 bytes as padding and 16 bytes for the','line_number':207,'multiline':False]
['text':' IV. For things that don't divide cleanly, the cast takes care of floor dividing so it will','line_number':208,'multiline':False]
['text':' be 0 < x < 16 bytes added for padding and 16 bytes added for the IV.','line_number':209,'multiline':False]
['text':' According to the rfc on AES encryption, the associatedDataLength is defined as the','line_number':236,'multiline':False]
['text':' number of bits in associatedData in BigEndian format. This is what the code segment','line_number':237,'multiline':False]
['text':' below describes.','line_number':238,'multiline':False]
['text':' RFC: (https://tools.ietf.org/html/draft-mcgrew-aead-aes-cbc-hmac-sha2-01#section-2.1)','line_number':239,'multiline':False]
['text':' According to the rfc on AES encryption, the associatedDataLength is defined as the','line_number':259,'multiline':False]
['text':' number of bits in associatedData in BigEndian format. This is what the code segment','line_number':260,'multiline':False]
['text':' below describes.','line_number':261,'multiline':False]
['text':' RFC: (https://tools.ietf.org/html/draft-mcgrew-aead-aes-cbc-hmac-sha2-01#section-2.1)','line_number':262,'multiline':False]
['text':' Split `out` into two separate ranges.','line_number':347,'multiline':False]
['text':' One for the just written ciphertext,','line_number':348,'multiline':False]
['text':' and another for the HMAC signature on the end.','line_number':349,'multiline':False]
['text':' We intentionally only write the first 256 bits of the digest produced by SHA512.','line_number':356,'multiline':False]
['text':' Split `out` into two separate ranges.','line_number':414,'multiline':False]
['text':' One for the just written ciphertext,','line_number':415,'multiline':False]
['text':' and another for the HMAC signature on the end.','line_number':416,'multiline':False]
['text':' Split input into actual ciphertext, and the HMAC bit at the end.','line_number':495,'multiline':False]
['text':' According to the rfc on AES encryption, the associatedDataLength is defined as the','line_number':498,'multiline':False]
['text':' number of bits in associatedData in BigEndian format. This is what the code segment','line_number':499,'multiline':False]
['text':' below describes.','line_number':500,'multiline':False]
['text':' Note that while we produce a 512bit digest with SHA512,','line_number':508,'multiline':False]
['text':' we only store and validate the first 256 bits (32 bytes).','line_number':509,'multiline':False]
['text':' namespace crypto','line_number':610,'multiline':False]
['text':' namespace mongo','line_number':611,'multiline':False]
