['text':'*
 *    Copyright (C) 2021-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' Test that a Packer with no input has no leftover bytes','line_number':102,'multiline':False]
['text':' Test that all writes that fill up to a single block','line_number':109,'multiline':False]
['text':' produce no callback invokations','line_number':110,'multiline':False]
['text':' Test a single write which overflows a block','line_number':123,'multiline':False]
['text':' Test a single write which perfectly fills multiple blocks','line_number':135,'multiline':False]
['text':' Test a single write which fills multiple blocks, and then overflows the last','line_number':147,'multiline':False]
['text':' Given an initial partially filled block...','line_number':159,'multiline':False]
['text':' ... Try writing insufficient data to fill the block','line_number':160,'multiline':False]
['text':' ... Try writing just enough data to fill the block','line_number':172,'multiline':False]
['text':' .. Try writing more data than is needed to fill the block','line_number':184,'multiline':False]
['text':' ... Try writing enough data to fill the block, and the next block.','line_number':197,'multiline':False]
['text':' ... Try writing enough data to fill the block, the next block, and then partial fill the next.','line_number':210,'multiline':False]
['text':' ... Try writing enough data to fill the block, then several more.','line_number':223,'multiline':False]
['text':' Given an initial write which overflows a block...','line_number':236,'multiline':False]
['text':' ... Try writing insufficient data to align the next block','line_number':238,'multiline':False]
['text':' ... Try writing enough data to align the next block','line_number':251,'multiline':False]
['text':' ... Try writing enough data to overflow the next block','line_number':264,'multiline':False]
['text':' Given an initial write of one block...','line_number':278,'multiline':False]
['text':' ... Try writing insufficient data to align the next block','line_number':280,'multiline':False]
['text':' ... Try writing enough data to align the next block','line_number':293,'multiline':False]
['text':' ... Try writing enough data to overfill the next block','line_number':306,'multiline':False]
['text':' (Only for OpenSSL, i.e. on Linux)','line_number':320,'multiline':False]
['text':' ... Try using insufficiently large output buffers for encryption and decryption','line_number':321,'multiline':False]
['text':' Validate that encryption with insufficient output buffer does not succeed','line_number':335,'multiline':False]
['text':' Validate that encryption with zero output buffer does not succeed','line_number':339,'multiline':False]
['text':' finalize is guaranteed to output at least 16 bytes for the CBC blockmode','line_number':351,'multiline':False]
['text':' Validate beginning of decryption process','line_number':355,'multiline':False]
['text':' Validate that decryption with insufficient output buffer does not succeed','line_number':360,'multiline':False]
['text':' Validate that decryption with zero output buffer does not succeed','line_number':366,'multiline':False]
['text':' Validate that decryption update/finalize with sufficient output buffer succeeds','line_number':371,'multiline':False]
['text':' Validate that the decrypted ciphertext matches the original plaintext','line_number':381,'multiline':False]
['text':' The following tests validate that SymmetricEncryptors function when called with inputs with','line_number':386,'multiline':False]
['text':' varying block alignments.','line_number':387,'multiline':False]
['text':' This array defines a series of different test cases. Each sub-array defines a series of calls','line_number':393,'multiline':False]
['text':' to encryptor->update(). Each number represents the number of bytes to pass to update in a','line_number':394,'multiline':False]
['text':' single call','line_number':395,'multiline':False]
['text':' Pre-condition: blockBuffer is empty','line_number':397,'multiline':False]
['text':' We will loop through all of the test cases, ensuring no fatal errors,','line_number':415,'multiline':False]
['text':' and ensuring correct encryption and decryption.','line_number':416,'multiline':False]
['text':' Make subsequent calls to encryptor->update() as defined by the test data','line_number':422,'multiline':False]
['text':' finalize is guaranteed to output at least 16 bytes for the CBC blockmode','line_number':434,'multiline':False]
['text':' Validate the length of the ciphertext is plausible for the plaintext','line_number':438,'multiline':False]
['text':' Validate that the ciphertext can be decrypted','line_number':443,'multiline':False]
['text':' Validate that the decrypted ciphertext matches the original plaintext','line_number':458,'multiline':False]
['text':' Convenience wrappers to avoid line-wraps later.','line_number':474,'multiline':False]
['text':' Positive/Negative test for additional authenticated data GCM encryption.','line_number':479,'multiline':False]
['text':' Setup encryptor/decryptor with fixed key/iv/aad in order to produce predictable results.','line_number':480,'multiline':False]
['text':' Check roundtrip and that tag violation triggers failure.','line_number':481,'multiline':False]
['text':' Corrupt the authenticated tag, which should cause a failure below.','line_number':530,'multiline':False]
['text':' Validate encryption','line_number':604,'multiline':False]
['text':' Validate encryption','line_number':611,'multiline':False]
['text':' The symmetric crypto framework uses 12 byte GCM tags. The tags used in NIST test','line_number':622,'multiline':False]
['text':' vectors can be larger than 12 bytes, but may be truncated.','line_number':623,'multiline':False]
['text':' Validate decryption','line_number':633,'multiline':False]
['text':' Validate that decryption with incorrect tag does not succeed','line_number':651,'multiline':False]
['text':' Validate encryption','line_number':677,'multiline':False]
['text':' Validate encryption','line_number':682,'multiline':False]
['text':' Validate decryption','line_number':694,'multiline':False]
['text':'* Test vectors drawn from
 *  https://csrc.nist.rip/groups/ST/toolkit/BCM/documents/proposedmodes/gcm/gcm-spec.pdf
 ','line_number':712,'multiline':True]
['text':' AES-CTR test vectors are obtained here:','line_number':772,'multiline':False]
['text':' https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-38a.pdf','line_number':773,'multiline':False]
['text':' namespace crypto','line_number':833,'multiline':False]
['text':' namespace mongo','line_number':834,'multiline':False]
