['text':'*
 *    Copyright (C) 2022-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'
 * ASSERTion macros for the C++ unit testing framework.
 ','line_number':30,'multiline':True]
['text':'*
 * Fail unconditionally, reporting the given message.
 ','line_number':58,'multiline':True]
['text':'*
 * Fails unless "EXPRESSION" is true.
 ','line_number':63,'multiline':True]
['text':'*
 * Fails if "EXPRESSION" is true.
 ','line_number':73,'multiline':True]
['text':'*
 * Asserts that a Status code is OK.
 ','line_number':78,'multiline':True]
['text':'*
 * Asserts that a status code is anything but OK.
 ','line_number':83,'multiline':True]
['text':'
 * Binary comparison assertions.
 ','line_number':88,'multiline':True]
['text':'*
 * Binary comparison utility macro. Do not use directly.
 ','line_number':107,'multiline':True]
['text':'*
 * Approximate equality assertion. Useful for comparisons on limited precision floating point
 * values.
 ','line_number':120,'multiline':True]
['text':'*
 * Assert a function call returns its input unchanged.
 ','line_number':126,'multiline':True]
['text':'*
 * Verify that the evaluation of "EXPRESSION" throws an exception of type EXCEPTION_TYPE.
 *
 * If "EXPRESSION" throws no exception, or one that is neither of type "EXCEPTION_TYPE" nor
 * of a subtype of "EXCEPTION_TYPE", the test is considered a failure and further evaluation
 * halts.
 ','line_number':144,'multiline':True]
['text':'*
 * Verify that the evaluation of "EXPRESSION" does not throw any exceptions.
 *
 * If "EXPRESSION" throws an exception the test is considered a failure and further evaluation
 * halts.
 ','line_number':154,'multiline':True]
['text':'*
 * Behaves like ASSERT_THROWS, above, but also fails if calling what() on the thrown exception
 * does not return a string equal to EXPECTED_WHAT.
 ','line_number':169,'multiline':True]
['text':'*
 * Behaves like ASSERT_THROWS, above, but also fails if calling getCode() on the thrown exception
 * does not return an error code equal to EXPECTED_CODE.
 ','line_number':179,'multiline':True]
['text':'*
 * Behaves like ASSERT_THROWS, above, but also fails if calling getCode() on the thrown exception
 * does not return an error code equal to EXPECTED_CODE or if calling what() on the thrown exception
 * does not return a string equal to EXPECTED_WHAT.
 ','line_number':188,'multiline':True]
['text':'*
 * Compiles if expr doesn't compile.
 *
 * This only works for compile errors in the "immediate context" of the expression, which matches
 * the rules for SFINAE. The first argument is a defaulted template parameter that is used in the
 * expression to make it dependent. This only works with expressions, not statements, although you
 * can separate multiple expressions with a comma.
 *
 * This should be used at namespace scope, not inside a TEST function.
 *
 * Examples that pass:
 *     ASSERT_DOES_NOT_COMPILE(MyTest1, typename Char = char, *std::declval<Char>());
 *     ASSERT_DOES_NOT_COMPILE(MyTest2, bool B = false, std::enable_if_t<B, int>{});
 *
 * Examples that fail:
 *     ASSERT_DOES_NOT_COMPILE(MyTest3, typename Char = char, *std::declval<Char*>());
 *     ASSERT_DOES_NOT_COMPILE(MyTest4, bool B = true, std::enable_if_t<B, int>{});
 *
 ','line_number':201,'multiline':True]
['text':'*
 * This internal helper is used to ignore warnings about unused results.  Some unit tests which test
 * `ASSERT_THROWS` and its variations are used on functions which both throw and return `Status` or
 * `StatusWith` objects.  Although such function designs are undesirable, they do exist, presently.
 * Therefore this internal helper macro is used by `ASSERT_THROWS` and its variations to silence
 * such warnings without forcing the caller to invoke `.ignore()` on the called function.
 *
 * NOTE: This macro should NOT be used inside regular unit test code to ignore unchecked `Status` or
 * `StatusWith` instances -- if a `Status` or `StatusWith` result is to be ignored, please use the
 * normal `.ignore()` code.  This macro exists only to make using `ASSERT_THROWS` less inconvenient
 * on functions which both throw and return `Status` or `StatusWith`.
 ','line_number':233,'multiline':True]
['text':'*
 * Behaves like ASSERT_THROWS, above, but also calls CHECK(caughtException) which may contain
 * additional assertions.
 ','line_number':250,'multiline':True]
['text':' Fail outside of the try/catch, this way the code in the `FAIL` macro ','line_number':265,'multiline':True]
['text':' doesn't have the potential to throw an exception which we might also ','line_number':266,'multiline':True]
['text':' be checking for. ','line_number':267,'multiline':True]
['text':'*
 * Exception thrown when a test assertion fails.
 *
 * Typically thrown by helpers in the TestAssertion class and its ilk, below.
 *
 * NOTE(schwerin): This intentionally does _not_ extend std::exception, so that code under
 * test that (foolishly?) catches std::exception won't swallow test failures.  Doesn't
 * protect you from code that foolishly catches ..., but you do what you can.
 ','line_number':316,'multiline':True]
['text':' Use a single implementation (identical to the templated one) for all string-like types.','line_number':434,'multiline':False]
['text':' This is particularly important to avoid making unique instantiations for each length of','line_number':435,'multiline':False]
['text':' string literal.','line_number':436,'multiline':False]
['text':' Use a single implementation (identical to the templated one) for all pointer and array types.','line_number':444,'multiline':False]
['text':' Note: this is selected instead of the StringData overload for char* and string literals','line_number':445,'multiline':False]
['text':' because they are supposed to compare pointers, not contents.','line_number':446,'multiline':False]
['text':'','line_number':455,'multiline':False]
['text':'','line_number':456,'multiline':False]
['text':'','line_number':457,'multiline':False]
['text':'','line_number':458,'multiline':False]
['text':' Explicit instantiation of ComparisonAssertion ctor and factory, for "A OP B".','line_number':479,'multiline':False]
['text':' Explicit instantiation of ComparisonAssertion ctor and factory for a pair of types.','line_number':487,'multiline':False]
['text':' Explicit instantiation of ComparisonAssertion ctor and factory for a single type.','line_number':492,'multiline':False]
['text':' Call with `extern` to declace extern instantiations, and with no args to explicitly instantiate.','line_number':496,'multiline':False]
['text':' These are the only types that are often used with ASSERT_NE','line_number':527,'multiline':True]
['text':' Declare that these definitions will be provided in unittest.cpp.','line_number':531,'multiline':False]
['text':'*
 * Get the value out of a StatusWith<T>, or throw an exception if it is not OK.
 ','line_number':534,'multiline':True]
['text':' namespace mongo::unittest','line_number':549,'multiline':False]
