['text':'*
 *    Copyright (C) 2020-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' IWYU pragma: no_include "cxxabi.h"','line_number':32,'multiline':False]
['text':'*
 * Worker threads cannot use ASSERT exceptions, because they'll normally crash the
 * process. We provide a way for a worker to transfer ASSERT failures to the
 * main thread to be rethrown from there.
 *
 * The main thread has to be structured such that it's waiting
 * on this monitor while all other work happens in workers.
 ','line_number':47,'multiline':True]
['text':' Monitor will `wait()` on destruction, blocking until a `notifyDone()` call has occurred.','line_number':58,'multiline':False]
['text':'* Spawn and return a `stdx::thread` that invokes `f` as if by `exec(f)`. ','line_number':63,'multiline':True]
['text':'* Spawn a thread that will invoke monitor.notifyDone()` when it finishes. ','line_number':71,'multiline':True]
['text':'* Invokes `f` inside a try/catch that routes any ASSERT failures to the monitor. ','line_number':80,'multiline':True]
['text':' Transport ASSERT failures to the monitor.','line_number':86,'multiline':False]
['text':' NOLINT','line_number':89,'multiline':False]
['text':' Blocks until `notifyDone` is called.','line_number':108,'multiline':False]
['text':' Throws if an ASSERT exception was reported by any exec invocation.','line_number':109,'multiline':False]
['text':' NOLINT','line_number':122,'multiline':False]
['text':'*
 * Covers probably most cases of multithreaded tests.
 * The body of a test can be passed in as an `f` that
 * accepts a `unittest::ThreadAssertionMonitor&`.
 * `f(monitor)` will to become the body of a "controller" thread.
 *
 * Any `stdx::thread(...)` constructors in the test must then be
 * converted to `monitor.spawn(...)` calls. Then the ASSERT
 * calls in the test will be managed by the monitor and propagate
 * to be rethrown from the main thread, cleanly failing the unit test.
 *
 * The controller thread is joined inside this function,
 * but user code is still responsible for joining the spawned
 * worker threads as usual.
 ','line_number':128,'multiline':True]
['text':' namespace mongo::unittest','line_number':149,'multiline':False]
