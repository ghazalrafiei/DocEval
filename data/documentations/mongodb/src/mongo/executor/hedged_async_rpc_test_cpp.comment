['text':'*
 *    Copyright (C) 2022-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
     * Retrieves authoritative and hedged NOIs, then performs specified behavior callback.
     ','line_number':111,'multiline':True]
['text':'*
     * Testing wrapper to perform common set up, then call sendHedgedCommand. Only safe to call once
     * per test fixture as to not create multiple OpCtx.
     ','line_number':130,'multiline':True]
['text':' Use a readPreference that's elgible for hedging.','line_number':141,'multiline':False]
['text':' This OpCtx is used by sendHedgedCommandWithHosts and is destroyed during fixture destruction.','line_number':198,'multiline':False]
['text':'*
 * When we send a find command to the sendHedgedCommand function, it sends out two requests and
 * cancels the second one once the first has responsed.
 ','line_number':202,'multiline':True]
['text':' Only check maxTimeMSOpOnly on hedged requests','line_number':210,'multiline':False]
['text':'*
 * When we send a hello command to the sendHedgedCommand function, it does not hedge and only sends
 * one request.
 ','line_number':236,'multiline':True]
['text':'*
 * Test that generic args are passed in.
 ','line_number':262,'multiline':True]
['text':' Populate structs for generic arguments to be passed along when the command is converted','line_number':270,'multiline':False]
['text':' to BSON.','line_number':271,'multiline':False]
['text':' Confirm that the generic arguments are present in the BSON command object.','line_number':285,'multiline':False]
['text':'
 * Test that remote errors with generic reply fields are properly parsed.
 ','line_number':300,'multiline':True]
['text':' Send "ignorable" error responses for both requests.','line_number':319,'multiline':False]
['text':' Check generic reply fields.','line_number':345,'multiline':False]
['text':' Define a retry policy that simply decides to always retry a command three additional times.','line_number':356,'multiline':False]
['text':' Schedule 1 request as the initial attempt, and then three following retries to satisfy the','line_number':371,'multiline':False]
['text':' condition for the runner to stop retrying.','line_number':372,'multiline':False]
['text':' counting both `hello` and `killOperations`','line_number':379,'multiline':False]
['text':'*
 * When the targeter returns an error, ensure we rewrite it correctly.
 ','line_number':388,'multiline':True]
['text':' Test metrics where error occurs before hedged command dispatch','line_number':413,'multiline':False]
['text':' Ensure that the sendHedgedCommand correctly returns RemoteCommandExecutionError when the executor','line_number':419,'multiline':False]
['text':' is shutdown mid-remote-invocation, and that the executor shutdown error is contained','line_number':420,'multiline':False]
['text':' in the error's ExtraInfo.','line_number':421,'multiline':False]
['text':' The error returned by our API should always be RemoteCommandExecutionError','line_number':426,'multiline':False]
['text':' Make sure we can extract the extra error info','line_number':428,'multiline':False]
['text':' Make sure the extra info indicates the error was local, and that the','line_number':431,'multiline':False]
['text':' local error (which is just a Status) has the correct code.','line_number':432,'multiline':False]
['text':'*
 * Check that hedged commands return expiration errors if timeout is exceeded.
 * A lot of the deadline behavior is test only, but we only want to check that the timeout is
 * set correctly and respected here.
 ','line_number':437,'multiline':True]
['text':' Send hedged requests to exceed max time, which would fail the operation with','line_number':449,'multiline':False]
['text':' NetworkInterfaceMock's fatal error. In production, "MaxTimeMSExpired" would be returned,','line_number':450,'multiline':False]
['text':' and these would be considered "success" by the network interface. But because there is','line_number':451,'multiline':False]
['text':' no deadline set by service entry point, we rely on NetworkInterfaceMock's timeout checks.','line_number':452,'multiline':False]
['text':' Fails NetworkInterfaceMock's timeout check.','line_number':476,'multiline':False]
['text':'*
 * Check that hedged commands send maxTimeMSOpOnly with opCtx deadline given that the deadline is
 * smaller than the global maxTimeMSForHedgedReads default.
 ','line_number':482,'multiline':True]
['text':' Only check deadline from opCtx here, success/fail doesn't matter. In a real system,','line_number':492,'multiline':False]
['text':' this deadline would have real timeout effects on the target host.','line_number':493,'multiline':False]
['text':'*
 * When a hedged command is sent and one request resolves with a non-ignorable error, we propagate
 * that error upwards and cancel the other requests.
 ','line_number':512,'multiline':True]
['text':'*
 * When a hedged command is sent and all requests fail with an "ignorable" error, that error
 * propagates upwards.
 ','line_number':544,'multiline':True]
['text':' Send "ignorable" error responses for both requests.','line_number':555,'multiline':False]
['text':' Send "ignorable" responses for both requests.','line_number':591,'multiline':False]
['text':'*
 * When a hedged command is sent and the first request, which is hedged, fails with an
 * ignorable error and the second request, which is authoritative, succeeds, we get
 * the success result.
 ','line_number':620,'multiline':True]
['text':' If the request is the authoritative one, send a delayed success response','line_number':632,'multiline':False]
['text':' otherwise send an "ignorable" error.','line_number':633,'multiline':False]
['text':' Test metrics where hedged fails with ignorable error','line_number':655,'multiline':False]
['text':'*
 * When a hedged command is sent and the first request, which is authoritative, fails
 * with an ignorable error and the second request, which is hedged, cancels, we get
 * the ignorable error.
 ','line_number':661,'multiline':True]
['text':' If the request is the authoritative one, send an "ignorable" error response,','line_number':673,'multiline':False]
['text':' otherwise send a delayed success response.','line_number':674,'multiline':False]
['text':'*
 * When a hedged command is sent and the first request, which is authoritative, fails
 * with a fatal error and the second request, which is hedged, cancels, we get
 * the fatal error.
 ','line_number':703,'multiline':True]
['text':' If the request is the authoritative one, send a "fatal" error response,','line_number':715,'multiline':False]
['text':' otherwise send a delayed success response.','line_number':716,'multiline':False]
['text':'*
 * When a hedged command is sent and the first request, which is authoritative, succeeds
 * and the second request, which is hedged, cancels, we get the success result.
 ','line_number':745,'multiline':True]
['text':' If the request is the authoritative one, send a success response,','line_number':756,'multiline':False]
['text':' otherwise send a delayed "fatal" error response.','line_number':757,'multiline':False]
['text':'*
 * When a hedged command is sent and the first request, which is hedged, succeeds
 * and the second request, which is authoritative, cancels, we get the success result.
 ','line_number':780,'multiline':True]
['text':' If the request is the authoritative one, send a delayed "fatal" error response,','line_number':791,'multiline':False]
['text':' otherwise send a success response.','line_number':792,'multiline':False]
['text':' Test metrics where hedged succeeds','line_number':814,'multiline':False]
['text':'*
 * When a hedged command is sent and the first request, which is hedged, fails with an ignorable
 * error and the second request, which is authoritative, also fails with an ignorable error, we get
 * the ignorable error from the authoritative.
 ','line_number':820,'multiline':True]
['text':' Send an "ignorable" error response for both requests, but delay the response if the request','line_number':832,'multiline':False]
['text':' is the authoritative one. Different "ignorable" responses are used in order to verify that','line_number':833,'multiline':False]
['text':' the returned response corresponds to the authoritative request.','line_number':834,'multiline':False]
['text':' Any response received from a "remote" node, whether it contains the result of a successful','line_number':849,'multiline':False]
['text':' operation or otherwise resulting error, is considered a "success" by the network interface.','line_number':850,'multiline':False]
['text':'*
 * When a hedged command is sent and the first request, which is hedged, fails with an ignorable
 * error and the second request, which is authoritative, fails with a fatal error, we get the fatal
 * error.
 ','line_number':865,'multiline':True]
['text':' Schedules an ignorable error response for the hedged request, and then a delayed fatal error','line_number':877,'multiline':False]
['text':' response for the authoritative request.','line_number':878,'multiline':False]
['text':' Any response received from a "remote" node, whether it contains the result of a successful','line_number':893,'multiline':False]
['text':' operation or otherwise resulting error, is considered a "success" by the network interface.','line_number':894,'multiline':False]
['text':'*
 * When a hedged command is sent and the first request, which is hedged, fails with an ignorable
 * error and the second request, which is authoritative, succeeds, we get the success response.
 ','line_number':909,'multiline':True]
['text':' Schedules an ignorable error response for the hedged request, and then a delayed success','line_number':920,'multiline':False]
['text':' response for the authoritative request.','line_number':921,'multiline':False]
['text':' Any response received from a "remote" node, whether it contains the result of a successful','line_number':935,'multiline':False]
['text':' operation or otherwise resulting error, is considered a "success" by the network interface.','line_number':936,'multiline':False]
['text':'*
 * When a hedged command is sent and the first request, which is hedged, fails with a fatal
 * error and the second request, which is authoritative, cancels, we get the fatal error.
 ','line_number':945,'multiline':True]
['text':' Schedules a fatal error response for the hedged request, and then a delayed success response','line_number':956,'multiline':False]
['text':' for the authoritative request.','line_number':957,'multiline':False]
['text':' Any response received from a "remote" node, whether it contains the result of a successful','line_number':971,'multiline':False]
['text':' operation or otherwise resulting error, is considered a "success" by the network interface.','line_number':972,'multiline':False]
['text':' Test metrics where hedged fails with fatal error','line_number':986,'multiline':False]
['text':'
 * Tests that 'sendHedgedCommand' will appropriately retry multiple times under the conditions
 * defined by the retry policy, with a dynmically changing wait-time between retries.
 ','line_number':992,'multiline':True]
['text':' Define a retry policy that simply decides to always retry a command three additional times,','line_number':1001,'multiline':False]
['text':' with a different delay between each retry.','line_number':1002,'multiline':False]
['text':' Schedule 1 response to the initial attempt, and then two for the following retries.','line_number':1019,'multiline':False]
['text':' Advance the clock appropriately based on each retry delay.','line_number':1020,'multiline':False]
['text':' Schedule a response to the final retry. No need to advance clock since no more','line_number':1025,'multiline':False]
['text':' retries should be attemped after this third one.','line_number':1026,'multiline':False]
['text':' Wait until the RPC attempt is done, including all retries. Ignore the result.','line_number':1029,'multiline':False]
['text':' Respond to one of the RPCs composing the hedged command with a fatal local error.','line_number':1039,'multiline':False]
['text':' Ensure that both of the hosts are recorded as attempted targets.','line_number':1045,'multiline':False]
['text':' Schedules a fatal error response for the hedged request, and then a delayed success response','line_number':1084,'multiline':False]
['text':' for the authoritative request.','line_number':1085,'multiline':False]
['text':' Ensure that both of the hosts are recorded as attempted targets.','line_number':1098,'multiline':False]
['text':' Ensure that the actual host from the remote error is one of the attempted ones.','line_number':1110,'multiline':False]
['text':' This thread will respond to the requests we sent via sendHedgedCommandWithHosts above.','line_number':1120,'multiline':False]
['text':' Wait on the opCtx until networkResponder has observed the network requests.','line_number':1136,'multiline':False]
['text':' While we block on the opCtx, the current thread should run jobs scheduled','line_number':1137,'multiline':False]
['text':' on the baton, including enqueuing the network requests via `sendHedgedCommand` above.','line_number':1138,'multiline':False]
['text':' Wait on the opCtx again to allow the current thread, via the baton, to propogate','line_number':1142,'multiline':False]
['text':' the network responses up into the resultFuture.','line_number':1143,'multiline':False]
['text':' Set OperationKey via GenericArgs','line_number':1214,'multiline':False]
['text':' We expect all targets to receive a `killOperations`, except for the one used to fulfill the','line_number':1245,'multiline':False]
['text':' hedged operation.','line_number':1246,'multiline':False]
['text':' Host that successfully responded to the hedged request.','line_number':1250,'multiline':False]
['text':' Host that receives a `killOperations`.','line_number':1262,'multiline':False]
['text':' We expect only one `killOperations` to be sent, which should be targeted to the host that did','line_number':1270,'multiline':False]
['text':' not fulfill the hedged operation.','line_number':1271,'multiline':False]
['text':' We expect all targets to receive a `killOperations`.','line_number':1281,'multiline':False]
['text':' Arbitrary duration','line_number':1291,'multiline':False]
['text':' Fail both operations with an ignorable error response.','line_number':1296,'multiline':False]
['text':' Verify that all targets receive a `killOperations`.','line_number':1308,'multiline':False]
['text':' namespace','line_number':1323,'multiline':False]
['text':' namespace async_rpc','line_number':1324,'multiline':False]
['text':' namespace mongo','line_number':1325,'multiline':False]
