['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
     * NetworkInterfaceTL's implementation of a leased network-stream
     * provided for manual use outside of the NITL's usual RPC API.
     * When this type is destroyed, the destructor of the ConnectionHandle
     * member will return the connection to this NetworkInterface's ConnectionPool.
     ','line_number':139,'multiline':True]
['text':' These pass-through indications of the health of the leased','line_number':151,'multiline':False]
['text':' stream to the underlying ConnectionHandle','line_number':152,'multiline':False]
['text':'*
     * For each logical RPC, an instance of `CommandState` is created to capture the state of the
     * remote command. As part of running a remote command, `NITL` sends out one or more requests
     * to the specified targets, and `RequestState` represents the state of each request.
     * `CommandState` owns a `RequestManager` that tracks individual requests. For each request sent
     * over the wire, `RequestManager` creates a `Context` that holds a weak pointer to the
     * `Request`, as well as the index of the target.
     ','line_number':170,'multiline':True]
['text':'*
         * Use the current RequestState to send out a command request.
         ','line_number':185,'multiline':True]
['text':'*
         * Set a timer to fulfill the promise with a timeout error.
         ','line_number':191,'multiline':True]
['text':'*
         * Fulfill the promise with the response.
         ','line_number':196,'multiline':True]
['text':'*
         * Fulfill the promise for the Command.
         *
         * This will throw/invariant if called multiple times. In an ideal world, this would do the
         * swap on CommandState::done for you and return early if it was already true. It does not
         * do so currently.
         ','line_number':201,'multiline':True]
['text':'*
         * Run the NetworkInterface's MetadataHook on a given request if this Command isn't already
         * finished.
         ','line_number':210,'multiline':True]
['text':'*
         * Return the maximum amount of requests that can come from this command.
         ','line_number':216,'multiline':True]
['text':'*
         * Return the most connections we expect to be able to acquire.
         ','line_number':227,'multiline':True]
['text':' TODO replace the finishLine with an atomic bool. It is no longer tracking allowed','line_number':247,'multiline':False]
['text':' failures accurately.','line_number':248,'multiline':False]
['text':' Total time spent waiting for connections that eventually time out.','line_number':253,'multiline':False]
['text':' Create a new CommandState in a shared_ptr','line_number':263,'multiline':False]
['text':' Prefer this over raw construction','line_number':264,'multiline':False]
['text':' Create a new ExhaustCommandState in a shared_ptr','line_number':286,'multiline':False]
['text':' Prefer this over raw construction','line_number':287,'multiline':False]
['text':' Protects against race between reactor thread restarting stopwatch during exhaust','line_number':302,'multiline':False]
['text':' request and main thread reading stopwatch elapsed time during shutdown.','line_number':303,'multiline':False]
['text':'*
         * Holds context for individual requests, and is only valid if initialized.
         * `idx` maps the request to its target in the corresponding `cmdState`.
         ','line_number':320,'multiline':True]
['text':' Number of connections we've resolved.','line_number':333,'multiline':False]
['text':' Number of sent requests.','line_number':336,'multiline':False]
['text':' Set to true when the command finishes or is canceled to block remaining requests.','line_number':339,'multiline':False]
['text':'*
         * Return the client for a given connection
         ','line_number':351,'multiline':True]
['text':'*
         * Cancel the current client operation or do nothing if there is no client.
         ','line_number':356,'multiline':True]
['text':'*
         * Return the current connection to the pool and unset it locally.
         *
         * This must be called from the networking thread (i.e. the reactor).
         ','line_number':361,'multiline':True]
['text':'*
         * Resolve an eventual response
         ','line_number':368,'multiline':True]
['text':' True if this request is an additional request sent to hedge the operation.','line_number':388,'multiline':False]
['text':' Set to true if the response to the request is used to fulfill the command's','line_number':391,'multiline':False]
['text':' promise (i.e. arrives before the responses to all other requests and is not','line_number':392,'multiline':False]
['text':' a MaxTimeMSExpired error response if this is a hedged request).','line_number':393,'multiline':False]
['text':' Will be created if ServiceContext is null, or if no TransportLayer was configured at startup','line_number':425,'multiline':False]
['text':' We start in kDefault, transition to kStarted after a call to startup completes.','line_number':438,'multiline':False]
['text':' Enter kStopping at the first call to shutdown and transition to kStopped','line_number':439,'multiline':False]
['text':' when the call completes.','line_number':440,'multiline':False]
['text':' This condition variable is dedicated to block a thread calling this class','line_number':458,'multiline':False]
['text':' destructor, strictly when another thread is performing the network','line_number':459,'multiline':False]
['text':' interface shutdown which depends on the _ioThread termination and may','line_number':460,'multiline':False]
['text':' take an undeterministic amount of time to return.','line_number':461,'multiline':False]
['text':' NOLINT','line_number':462,'multiline':False]
['text':' namespace executor','line_number':479,'multiline':False]
['text':' namespace mongo','line_number':480,'multiline':False]
