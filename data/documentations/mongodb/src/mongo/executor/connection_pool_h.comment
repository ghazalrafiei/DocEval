['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' IWYU pragma: keep','line_number':49,'multiline':False]
['text':'*
 * The actual user visible connection pool.
 *
 * This pool is constructed with a DependentTypeFactoryInterface which provides the tools it
 * needs to generate connections and manage them over time.
 *
 * The overall workflow here is to manage separate pools for each unique
 * HostAndPort. See comments on the various Options for how the pool operates.
 ','line_number':75,'multiline':True]
['text':'*
     * Make a vanilla LimitController as a decent default option
     ','line_number':114,'multiline':True]
['text':'*
         * The minimum number of connections to keep alive while the pool is in
         * operation
         ','line_number':122,'multiline':True]
['text':'*
         * The maximum number of connections to spawn for a host. This includes
         * pending connections in setup and connections checked out of the pool
         * as well as the obvious live connections in the pool.
         ','line_number':128,'multiline':True]
['text':'*
         * The maximum number of processing connections for a host.  This includes pending
         * connections in setup/refresh. It's designed to rate limit connection storms rather than
         * steady state processing (as maxConnections does).
         ','line_number':135,'multiline':True]
['text':'*
         * Amount of time to wait before timing out a refresh attempt
         ','line_number':142,'multiline':True]
['text':'*
         * Amount of time a connection may be idle before it cannot be returned
         * for a user request and must instead be checked out and refreshed
         * before handing to a user.
         ','line_number':147,'multiline':True]
['text':'*
         * Amount of time to keep a specific pool around without any checked
         * out connections or new requests
         ','line_number':154,'multiline':True]
['text':'*
         * An egress tag closer manager which will provide global access to this connection pool.
         * The manager set's tags and potentially drops connections that don't match those tags.
         *
         * The manager will hold this pool for the lifetime of the pool.
         ','line_number':160,'multiline':True]
['text':'*
         * Connections created through this connection pool will not attempt to authenticate.
         ','line_number':168,'multiline':True]
['text':'*
         * Provides SSL params if the egress cluster connection requires custom SSL certificates
         * different from the global (default) certificates.
         ','line_number':174,'multiline':True]
['text':'*
     * A set of flags describing the health of a host pool
     ','line_number':185,'multiline':True]
['text':'*
         * The pool is expired and can be shutdown by updateController
         *
         * This flag is set to true when there have been no connection requests or in use
         * connections for ControllerInterface::hostTimeout().
         *
         * This flag is set to false whenever a connection is requested.
         ','line_number':189,'multiline':True]
['text':'*
         *  The pool has processed a failure and will not spawn new connections until requested
         *
         *  This flag is set to true by processFailure(), and thus also triggerShutdown().
         *
         *  This flag is set to false whenever a connection is requested.
         *
         *  As a further note, this prevents us from spamming a failed host with connection
         *  attempts. If an external user believes a host should be available, they can request
         *  again.
         ','line_number':199,'multiline':True]
['text':'*
         * The pool is shutdown and will never be called by the ConnectionPool again.
         *
         * This flag is set to true by triggerShutdown() or updateController(). It is never unset.
         ','line_number':212,'multiline':True]
['text':'*
     * The state of connection pooling for a single host
     *
     * This should only be constructed by the SpecificPool.
     ','line_number':220,'multiline':True]
['text':'*
     * A simple set of controls to direct a single host
     *
     * This should only be constructed by a ControllerInterface
     ','line_number':236,'multiline':True]
['text':'*
     * A set of hosts and a flag canShutdown for if the group can shutdown
     *
     * This should only be constructed by a ControllerInterface
     ','line_number':248,'multiline':True]
['text':'*
     * Drops all connections, but if a certain SpecificPool (and therefore HostAndPort) is
     * marked as keep open, that connection will not be dropped.
     ','line_number':268,'multiline':True]
['text':'*
     * Marks SpecificPool to be kept open for dropConnections(), must acquire connection pool
     * mutex.
     ','line_number':274,'multiline':True]
['text':'lease','line_number':285,'multiline':True]
['text':'*
     * "Lease" a connection from the pool.
     *
     * Connections retrieved via this method are not assumed to be in active use for the duration of
     * their lease and are reported separately in metrics. Otherwise, this method behaves similarly
     * to `ConnectionPool::get`.
     ','line_number':293,'multiline':True]
['text':'lease','line_number':305,'multiline':True]
['text':' The global mutex for specific pool access and the generation counter','line_number':340,'multiline':False]
['text':'*
 * Interface for a basic timer
 *
 * Minimal interface sets a timer with a callback and cancels the timer.
 ','line_number':352,'multiline':True]
['text':'*
     * Sets the timeout for the timer. Setting an already set timer should
     * override the previous timer.
     ','line_number':368,'multiline':True]
['text':'*
     * It should be safe to cancel a previously canceled, or never set, timer.
     ','line_number':374,'multiline':True]
['text':'*
     * Returns the current time for the clock used by the timer
     ','line_number':379,'multiline':True]
['text':'*
 * Interface for connection pool connections
 *
 * Provides a minimal interface to manipulate connections within the pool,
 * specifically callbacks to set them up (connect + auth + whatever else),
 * refresh them (issue some kind of ping) and manage a timer.
 ','line_number':385,'multiline':True]
['text':'*
     * Indicates that the user is now done with this connection. Users MUST call either
     * this method or indicateFailure() before returning the connection to its pool.
     ','line_number':403,'multiline':True]
['text':'*
     * Indicates that a connection has failed. This will prevent the connection
     * from re-entering the connection pool. Users MUST call either this method or
     * indicateSuccess() before returning connections to the pool.
     ','line_number':409,'multiline':True]
['text':'*
     * This method updates a 'liveness' timestamp to avoid unnecessarily refreshing
     * the connection.
     *
     * This method should be invoked whenever we perform an operation on the connection that must
     * have done work.  I.e. actual networking was performed.  If a connection was checked out, then
     * back in without use, one would expect an indicateSuccess without an indicateUsed.  Only if we
     * checked it out and did work would we call indicateUsed.
     ','line_number':416,'multiline':True]
['text':'*
     * The HostAndPort for the connection. This should be the same as the
     * HostAndPort passed to DependentTypeFactoryInterface::makeConnection.
     ','line_number':427,'multiline':True]
['text':'*
     * Check if the connection is healthy using some implementation defined condition.
     ','line_number':434,'multiline':True]
['text':'*
     * The implementation may choose to override this method to provide a quick check for
     * connection health (e.g., by periodically caching the return value of the last invocation).
     * Callers should be aware that a "true" return value does not always indicate a healthy
     * connection.
     ','line_number':439,'multiline':True]
['text':'*
     * Returns the last used time point for the connection
     ','line_number':449,'multiline':True]
['text':'*
     * Returns the number of times the connection was used by operations.
     ','line_number':454,'multiline':True]
['text':'*
     * Returns the status associated with the connection. If the status is not
     * OK, the connection will not be returned to the pool.
     ','line_number':459,'multiline':True]
['text':'*
     * Get the generation of the connection. This is used to track whether to
     * continue using a connection after a call to dropConnections() by noting
     * if the generation on the specific pool is the same as the generation on
     * a connection (if not the connection is from a previous era and should
     * not be re-used).
     ','line_number':465,'multiline':True]
['text':'*
     * Making these protected makes the definitions available to override in
     * children.
     ','line_number':475,'multiline':True]
['text':'*
     * Sets up the connection. This should include connection + auth + any
     * other associated hooks.
     ','line_number':482,'multiline':True]
['text':'*
     * Resets the connection's state to kConnectionStateUnknown for the next user.
     ','line_number':488,'multiline':True]
['text':'*
     * Refreshes the connection. This should involve a network round trip and
     * should strongly imply an active connection
     ','line_number':493,'multiline':True]
['text':'*
 * An implementation of ControllerInterface directs the behavior of a SpecificPool
 *
 * Generally speaking, a Controller will be given HostState via updateState and then return Controls
 * via getControls. A Controller is expected to not directly mutate its SpecificPool, including via
 * its ConnectionPool pointer. A Controller is expected to be given to only one ConnectionPool.
 ','line_number':506,'multiline':True]
['text':'*
     * Initialize this ControllerInterface using the given ConnectionPool
     *
     * ConnectionPools provide access to Executors and other DTF-provided objects.
     ','line_number':523,'multiline':True]
['text':'*
     * Inform this Controller that a pool should be tracked
     ','line_number':530,'multiline':True]
['text':'*
     * Inform this Controller of a new State for a pool
     *
     * This function returns the state of the group of hosts to which this host belongs.
     ','line_number':535,'multiline':True]
['text':'*
     * Inform this Controller that a pool is no longer tracked
     ','line_number':542,'multiline':True]
['text':'*
     * Get controls for the given pool
     ','line_number':547,'multiline':True]
['text':'*
     * Get the various timeouts that this controller suggests
     ','line_number':552,'multiline':True]
['text':'*
     * Get the name for this controller
     *
     * This function is intended to provide increased visibility into which controller is in use
     ','line_number':559,'multiline':True]
['text':'*
 * Implementation interface for the connection pool
 *
 * This factory provides generators for connections, timers and a clock for the
 * connection pool.
 ','line_number':580,'multiline':True]
['text':'*
     * Makes a new connection given a host and port
     ','line_number':595,'multiline':True]
['text':'*
     *  Return the executor for use with this factory
     ','line_number':602,'multiline':True]
['text':'*
     * Makes a new timer
     ','line_number':607,'multiline':True]
['text':'*
     * Returns the current time point
     ','line_number':612,'multiline':True]
['text':'*
     * Returns the fast clock source.
     * The default implementation gets it from the global service context.
     ','line_number':617,'multiline':True]
['text':'*
     * shutdown
     ','line_number':623,'multiline':True]
['text':' namespace executor','line_number':637,'multiline':False]
['text':' namespace mongo','line_number':638,'multiline':False]
