['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' One interesting implementation note herein concerns how setup() and','line_number':72,'multiline':False]
['text':' refresh() are invoked outside of the global lock, but setTimeout is not.','line_number':73,'multiline':False]
['text':' This implementation detail simplifies mocks, allowing them to return','line_number':74,'multiline':False]
['text':' synchronously sometimes, whereas having timeouts fire instantly adds little','line_number':75,'multiline':False]
['text':' value. In practice, dumping the locks is always safe (because we restrict','line_number':76,'multiline':False]
['text':' ourselves to operations over the connection).','line_number':77,'multiline':False]
['text':' namespace','line_number':110,'multiline':False]
['text':' It is illegal to attempt to use a connection after calling indicateFailure().','line_number':115,'multiline':False]
['text':'*
 * Standard controller for the ConnectionPool
 *
 * This class uses the Options struct in the ConnectionPool to determine its controls.
 ','line_number':169,'multiline':True]
['text':'*
 * A pool for a specific HostAndPort
 *
 * Pools come into existance the first time a connection is requested and
 * go out of existence after hostTimeout passes without any of their
 * connections being used.
 ','line_number':245,'multiline':True]
['text':'*
     * Whenever a function enters a specific pool, the function needs to be guarded by the lock.
     *
     * This callback also (perhaps overly aggressively) binds a shared pointer to the guard.
     * It is *always* safe to reference the original specific pool in the guarded function object.
     *
     * For a function object of signature:
     * void riskyBusiness(ArgTypes...);
     *
     * It returns a function object of signature:
     * void safeCallback(ArgTypes...);
     ','line_number':257,'multiline':True]
['text':'*
     * Create and initialize a SpecificPool
     ','line_number':284,'multiline':True]
['text':'*
     * Triggers a controller update, potentially changes the request timer,
     * and maybe delists from pool
     *
     * This should only be called by the ConnectionPool or StateLock
     ','line_number':291,'multiline':True]
['text':'*
     * Gets a connection from the specific pool. Sinks a unique_lock from the
     * parent to preserve the lock on _mutex
     ','line_number':299,'multiline':True]
['text':'*
     * Triggers the shutdown procedure. This function sets isShutdown to true
     * and calls processFailure below with the status provided. This immediately removes this pool
     * from the ConnectionPool. The actual destruction will happen eventually as ConnectionHandles
     * are deleted.
     ','line_number':307,'multiline':True]
['text':'*
     * Cascades a failure across existing connections and requests. Invoking
     * this function drops all current connections and fails all current
     * requests with the passed status.
     ','line_number':315,'multiline':True]
['text':'*
     * Returns the number of connections currently checked out of the pool.
     ','line_number':322,'multiline':True]
['text':'*
     * Returns the number of leased connections from the pool.
     ','line_number':327,'multiline':True]
['text':'*
     * Returns the number of available connections in the pool.
     ','line_number':332,'multiline':True]
['text':'*
     * Returns the number of in progress connections in the pool.
     ','line_number':337,'multiline':True]
['text':'*
     * Returns the number of all refreshed connections in the pool.
     ','line_number':342,'multiline':True]
['text':'*
     * Returns the total number of connections ever created in this pool.
     ','line_number':347,'multiline':True]
['text':'*
     * Returns the number of connections that expire and are destroyed before they are ever used.
     ','line_number':352,'multiline':True]
['text':'*
     * Returns the number of connections that were used only once before being destroyed.
     ','line_number':357,'multiline':True]
['text':'*
     * Returns the cumulative amount of time connections were in use by operations.
     ','line_number':362,'multiline':True]
['text':'*
     * Returns the total number of connections currently open that belong to
     * this pool. This is the sum of refreshingConnections, availableConnections,
     * inUseConnections, and leasedConnections.
     ','line_number':367,'multiline':True]
['text':'*
     * Returns the number of unfulfilled requests pending.
     ','line_number':374,'multiline':True]
['text':'*
     * Records the time it took to return the connection since it was requested, so that it can be
     * reported in the connection pool stats.
     ','line_number':379,'multiline':True]
['text':'*
     * Returns connection acquisition wait time statistics to be included in the connection pool
     * stats.
     ','line_number':387,'multiline':True]
['text':'*
     * Returns the HostAndPort for this pool.
     ','line_number':395,'multiline':True]
['text':'*
     * Return true if the specific pool should be kept open.
     ','line_number':402,'multiline':True]
['text':' Whether or not the requested connection should be "leased".','line_number':426,'multiline':False]
['text':'*
     * Given a uniquely-owned OwnedConnection, returns an OwnedConnection
     * pointing to the same object, but which gathers stats just before destruction.
     ','line_number':439,'multiline':True]
['text':'*
     * Establishes connections until the ControllerInterface's target is met.
     ','line_number':464,'multiline':True]
['text':' This internal helper is used both by get and by _fulfillRequests and differs in that it','line_number':477,'multiline':False]
['text':' skips some bookkeeping that the other callers do on their own','line_number':478,'multiline':False]
['text':' Update the health struct and related variables','line_number':487,'multiline':False]
['text':' Update the event timer for this host pool','line_number':490,'multiline':False]
['text':' Update the controller and potentially change the controls','line_number':493,'multiline':False]
['text':' The _generation is the set of connection objects we believe are healthy.','line_number':517,'multiline':False]
['text':' It increases when we process a failure. If a connection is from a previous generation,','line_number':518,'multiline':False]
['text':' it will be discarded on return/refresh.','line_number':519,'multiline':False]
['text':' When the pool needs to potentially die or spawn connections, updateController() is scheduled','line_number':522,'multiline':False]
['text':' onto the executor and this flag is set. When updateController() finishes running, this flag','line_number':523,'multiline':False]
['text':' is unset. This allows the pool to amortize the expensive spawning and hopefully do work once','line_number':524,'multiline':False]
['text':' it is closer to steady state.','line_number':525,'multiline':False]
['text':' Indicates connections associated with this HostAndPort should be kept open.','line_number':540,'multiline':False]
['text':' Inform the controller that we exist','line_number':553,'multiline':False]
['text':' Set our timers and health','line_number':556,'multiline':False]
['text':' If we're currently destroying the service context the _manager is already deleted and this','line_number':582,'multiline':False]
['text':' pointer dangles. No need for cleanup in that case.','line_number':583,'multiline':False]
['text':' Grab all current pools (under the lock)','line_number':594,'multiline':False]
['text':' SpecificPool::triggerShutdown can cause iterator invalidation (e.g. `pool` removing itself','line_number':623,'multiline':False]
['text':' from `_pools`), so we increment `it` early after grabbing a reference to the `pool` it points','line_number':624,'multiline':False]
['text':' to.','line_number':625,'multiline':False]
['text':' We kick ourselves onto the executor queue to prevent us from deadlocking with our own thread','line_number':651,'multiline':False]
['text':' Only count connections being checked-out for ordinary use, not lease, towards cumulative wait','line_number':700,'multiline':False]
['text':' time.','line_number':701,'multiline':False]
['text':' Reset our activity timestamp','line_number':817,'multiline':False]
['text':' If controller's pending timeout is closest, timeoutCode is rewritten to the internal time','line_number':824,'multiline':False]
['text':' limit error','line_number':825,'multiline':False]
['text':' If we do not have requests, then we can fulfill immediately','line_number':847,'multiline':False]
['text':' Leased connections don't count towards the pool's total connection usage time.','line_number':882,'multiline':False]
['text':' _readyPool is an LRUCache, so its begin() object is the MRU item.','line_number':896,'multiline':False]
['text':' Grab the connection and cancel its timeout','line_number':899,'multiline':False]
['text':' Drop the bad connection via scoped destruction and retry','line_number':909,'multiline':False]
['text':' pass it to the user','line_number':921,'multiline':False]
['text':' We increment the total number of refreshed connections right upfront to track all completed','line_number':933,'multiline':False]
['text':' refreshes.','line_number':934,'multiline':False]
['text':' If we're in shutdown, we don't need refreshed connections','line_number':937,'multiline':False]
['text':' If we've exceeded the time limit, start a new connect,','line_number':942,'multiline':False]
['text':' rather than failing all operations.  We do this because the','line_number':943,'multiline':False]
['text':' various callers have their own time limit which is unrelated','line_number':944,'multiline':False]
['text':' to our internal one.','line_number':945,'multiline':False]
['text':' If the error can be contained to one connection, drop the one connection.','line_number':956,'multiline':False]
['text':' If the host and port were dropped, let this lapse and spawn new connections','line_number':967,'multiline':False]
['text':' Pass a failure on through','line_number':976,'multiline':False]
['text':' If the connection refreshed successfully, throw it back in the ready pool','line_number':992,'multiline':False]
['text':' If we're in shutdown, then we don't care','line_number':1005,'multiline':False]
['text':' If the connection is from an older generation, just return.','line_number':1010,'multiline':False]
['text':' Our error handling here is determined by the MongoDB SDAM specification for handling','line_number':1015,'multiline':False]
['text':' application errors on established connections. In particular, if a network error occurs,','line_number':1016,'multiline':False]
['text':' we must close all idle sockets in the connection pool for the server: "if one socket is','line_number':1017,'multiline':False]
['text':' bad, it is likely that all are." However, if the error is just a network _timeout_ error,','line_number':1018,'multiline':False]
['text':' we don't drop the connections because the timeout may indicate a slow operation rather','line_number':1019,'multiline':False]
['text':' than an unavailable server. Additionally, if we can isolate the error to a single','line_number':1020,'multiline':False]
['text':' socket/connection based on it's type, we won't drop other connections/sockets.','line_number':1021,'multiline':False]
['text':'','line_number':1022,'multiline':False]
['text':' See the spec for additional details:','line_number':1023,'multiline':False]
['text':' https://github.com/mongodb/specifications/blob/master/source/server-discovery-and-monitoring/server-discovery-and-monitoring.rst#application-errors','line_number':1024,'multiline':False]
['text':' Otherwise, drop the one connection.','line_number':1036,'multiline':False]
['text':' If we need to refresh this connection','line_number':1045,'multiline':False]
['text':' If we already have minConnections, just let the connection lapse','line_number':1056,'multiline':False]
['text':' If it's fine as it is, just put it in the ready queue','line_number':1076,'multiline':False]
['text':' Adds a live connection to the ready pool','line_number':1086,'multiline':False]
['text':' This makes the connection the new most-recently-used connection.','line_number':1090,'multiline':False]
['text':' Our strategy for refreshing connections is to check them out and','line_number':1093,'multiline':False]
['text':' immediately check them back in (which kicks off the refresh logic in','line_number':1094,'multiline':False]
['text':' returnConnection','line_number':1095,'multiline':False]
['text':' We've already been checked out. We don't need to refresh ourselves.','line_number':1103,'multiline':False]
['text':' If we're in shutdown, we don't need to refresh connections','line_number':1107,'multiline':False]
['text':' Sets state to shutdown and kicks off the failure protocol to tank existing connections','line_number':1120,'multiline':False]
['text':' Make sure the pool lifetime lasts until the end of this function,','line_number':1129,'multiline':False]
['text':' it could be only in the map of pools','line_number':1130,'multiline':False]
['text':' Drop connections and fail all requests','line_number':1141,'multiline':False]
['text':' Bump the generation so we don't reuse any pending or checked out connections','line_number':1143,'multiline':False]
['text':' When a connection enters the ready pool, its timer is set to eventually refresh the','line_number':1155,'multiline':False]
['text':' connection. This requires a lifetime extension of the specific pool because the connection','line_number':1156,'multiline':False]
['text':' timer is tied to the lifetime of the connection, not the pool. That said, we can destruct','line_number':1157,'multiline':False]
['text':' all of the connections and thus timers of which we have ownership.','line_number':1158,'multiline':False]
['text':' In short, clearing the ready pool helps the SpecificPool drain.','line_number':1159,'multiline':False]
['text':' Migrate processing connections to the dropped pool','line_number':1162,'multiline':False]
['text':' If we're just dropping the pool, we can reuse them later','line_number':1164,'multiline':False]
['text':' Mark ourselves as failed so we don't immediately respawn','line_number':1169,'multiline':False]
['text':' fulfills as many outstanding requests as possible','line_number':1184,'multiline':False]
['text':' Marking this as our newest active time','line_number':1187,'multiline':False]
['text':' Caution: If this returns with a value, it's important that we not throw until we've','line_number':1190,'multiline':False]
['text':' emplaced the promise (as returning a connection would attempt to take the lock and would','line_number':1191,'multiline':False]
['text':' deadlock).','line_number':1192,'multiline':False]
['text':'','line_number':1193,'multiline':False]
['text':' None of the heap manipulation code throws, but it's something to keep in mind.','line_number':1194,'multiline':False]
['text':' Grab the request and callback','line_number':1201,'multiline':False]
['text':' spawn enough connections to satisfy open requests and minpool, while honoring maxpool','line_number':1210,'multiline':False]
['text':' Dead pools spawn no conns','line_number':1213,'multiline':False]
['text':' make a new connection and put it in processing','line_number':1259,'multiline':False]
['text':' Run the setup callback','line_number':1271,'multiline':False]
['text':' We're expired if we have no sign of connection use and are past our expiry','line_number':1305,'multiline':False]
['text':' We're failed until we get new requests or our timer triggers','line_number':1309,'multiline':False]
['text':' If our pending event has triggered, then schedule a retry as the next event','line_number':1318,'multiline':False]
['text':' If our expiration comes before our next event, then it is the next event','line_number':1324,'multiline':False]
['text':' If a request would timeout before the next event, then it is the next event','line_number':1332,'multiline':False]
['text':' Clamp next event time to be either now or in the future. Next event time','line_number':1337,'multiline':False]
['text':' can be in the past anytime we wait a long time between invocations of','line_number':1338,'multiline':False]
['text':' updateState; in these cases, we want to set our event timer to expire','line_number':1339,'multiline':False]
['text':' immediately.','line_number':1340,'multiline':False]
['text':' If our timer is already set to the next event, then we're done','line_number':1345,'multiline':False]
['text':' TODO Our timeout can be a Date_t after SERVER-41459','line_number':1351,'multiline':False]
['text':' Set our event timer to timeout requests, refresh the state, and potentially expire this pool','line_number':1356,'multiline':False]
['text':' Since we've failed a request, we've interacted with external users','line_number':1370,'multiline':False]
['text':' Update our own state','line_number':1384,'multiline':False]
['text':' If we can shutdown, then do so','line_number':1400,'multiline':False]
['text':' Just because a HostGroup "canShutdown" doesn't mean that a SpecificPool should','line_number':1410,'multiline':False]
['text':' shutdown. For example, it is always inappropriate to shutdown a SpecificPool with','line_number':1411,'multiline':False]
['text':' connections in use or requests outstanding unless its parent ConnectionPool is','line_number':1412,'multiline':False]
['text':' also shutting down.','line_number':1413,'multiline':False]
['text':' At the moment, controllers will never mark for shutdown a pool with active','line_number':1421,'multiline':False]
['text':' connections or pending requests. isExpired is never true if these invariants are','line_number':1422,'multiline':False]
['text':' false. That's not to say that it's a terrible idea, but if this happens then we','line_number':1423,'multiline':False]
['text':' should review what it means to be expired.','line_number':1424,'multiline':False]
['text':' Make sure all related hosts exist','line_number':1439,'multiline':False]
['text':' Updates our state and manages the request timer','line_number':1449,'multiline':False]
['text':' If we're in shutdown, there is nothing to update. Our clients are all gone.','line_number':1452,'multiline':False]
['text':'','line_number':1464,'multiline':False]
['text':' namespace executor','line_number':1478,'multiline':False]
['text':' namespace mongo','line_number':1479,'multiline':False]
