['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 * Implementation of a TaskExecutor that uses a pool of threads to execute work items.
 ','line_number':63,'multiline':True]
['text':'*
     * Constructs an instance of ThreadPoolTaskExecutor that runs tasks in "pool" and uses "net"
     * for network operations.
     ','line_number':71,'multiline':True]
['text':'*
     * Destroys a ThreadPoolTaskExecutor.
     ','line_number':78,'multiline':True]
['text':'*
     * Returns true if there are any tasks in any of _poolInProgressQueue, _networkInProgressQueue,
     * or _sleepersQueue.
     ','line_number':117,'multiline':True]
['text':'*
     * Representation of the stage of life of a thread pool.
     *
     * A pool starts out in the preStart state, and ends life in the shutdownComplete state.  Work
     * may only be scheduled in the preStart and running states. Threads may only be started in the
     * running state. In shutdownComplete, there are no remaining threads or pending tasks to
     * execute.
     *
     * Diagram of legal transitions:
     *
     * preStart -> running -> joinRequired -> joining -> shutdownComplete
     *        \               ^
     *         \_____________/
     *
     * NOTE: The enumeration values below are compared using operator<, etc, with the expectation
     * that a -> b in the diagram above implies that a < b in the enum below.
     ','line_number':129,'multiline':True]
['text':'*
     * Returns an EventList containing one unsignaled EventState. This is a helper function for
     * performing allocations outside of _mutex, and should only be called by makeSingletonWork and
     * makeEvent().
     ','line_number':148,'multiline':True]
['text':'*
     * Returns an object suitable for passing to enqueueCallbackState_inlock that represents
     * executing "work" no sooner than "when" (defaults to ASAP). This function may and should be
     * called outside of _mutex.
     ','line_number':155,'multiline':True]
['text':'*
     * Moves the single callback in "wq" to the end of "queue". It is required that "wq" was
     * produced via a call to makeSingletonWorkQueue().
     ','line_number':164,'multiline':True]
['text':'*
     * Signals the given event.
     ','line_number':170,'multiline':True]
['text':'*
     * Schedules all items from "fromQueue" into the thread pool and moves them into
     * _poolInProgressQueue.
     ','line_number':175,'multiline':True]
['text':'*
     * Schedules the given item from "fromQueue" into the thread pool and moves it into
     * _poolInProgressQueue.
     ','line_number':181,'multiline':True]
['text':'*
     * Schedules entries from "begin" through "end" in "fromQueue" into the thread pool
     * and moves them into _poolInProgressQueue.
     ','line_number':189,'multiline':True]
['text':'*
     * Schedules cbState into the thread pool and places it into _poolInProgressQueue. Does not
     * remove the entry from the original queue.
     ','line_number':198,'multiline':True]
['text':'*
     * Executes the callback specified by "cbState".
     ','line_number':204,'multiline':True]
['text':'*
     * Executes the callback specified by "cbState". Will not mark cbState as finished.
     ','line_number':209,'multiline':True]
['text':' The network interface used for remote command execution and waiting.','line_number':219,'multiline':False]
['text':' The thread pool that executes scheduled work items.','line_number':222,'multiline':False]
['text':' Mutex guarding all remaining fields.','line_number':225,'multiline':False]
['text':' This is sadly held for a subset of task execution HierarchicalAcquisitionLevel(1),','line_number':227,'multiline':False]
['text':' Queue containing all items currently scheduled into the thread pool but not yet completed.','line_number':230,'multiline':False]
['text':' Queue containing all items currently scheduled into the network interface.','line_number':233,'multiline':False]
['text':' Queue containing all items waiting for a particular point in time to execute.','line_number':236,'multiline':False]
['text':' List of all events that have yet to be signaled.','line_number':239,'multiline':False]
['text':' Lifecycle state of this executor.','line_number':242,'multiline':False]
['text':' namespace executor','line_number':250,'multiline':False]
['text':' namespace mongo','line_number':251,'multiline':False]
