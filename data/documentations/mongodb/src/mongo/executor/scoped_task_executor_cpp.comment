['text':'*
 *    Copyright (C) 2019-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 * Implements the wrapping indirection needed to satisfy the ScopedTaskExecutor contract.  Note
 * that at least shutdown() must be called on this type before destruction.
 ','line_number':73,'multiline':True]
['text':' The ScopedTaskExecutor dtor calls shutdown, so this is guaranteed.','line_number':83,'multiline':False]
['text':' We are guaranteed that no more callbacks can be added to _cbHandles after','line_number':95,'multiline':False]
['text':' _inShutdown is set to true. If there aren't any callbacks outstanding, then it is','line_number':96,'multiline':False]
['text':' shutdown()'s responsibility to make the futures returned by joinAll() ready.','line_number':97,'multiline':False]
['text':' If we don't have a handle yet, it means there's a scheduling thread that's','line_number':106,'multiline':False]
['text':' dropped the lock but hasn't yet stashed it (or failed to schedule it on the','line_number':107,'multiline':False]
['text':' underlying executor).','line_number':108,'multiline':False]
['text':'','line_number':109,'multiline':False]
['text':' See _wrapCallback for how the scheduling thread handles those cases.','line_number':110,'multiline':False]
['text':'*
     * Helper function to get a shared_ptr<ScopedTaskExecutor::Impl> to this object, akin to
     * shared_from_this(). TaskExecutor (the parent class of ScopedTaskExecutor::Impl) inherits from
     * std::enable_shared_from_this, so shared_from_this() returns a std::shared_ptr<TaskExecutor>,
     * which means we need to cast it to use it as a pointer to the subclass
     * ScopedTaskExecutor::Impl.
     ','line_number':224,'multiline':True]
['text':'*
     * Wraps a scheduling call, along with its callback, so that:
     *
     * 1. If the callback is run, it is invoked with a not-okay argument if this task executor or
     *    the underlying one has been shutdown.
     * 2. The callback handle that is returned from the call to schedule is collected and
     *    canceled, if this object is shutdown before the callback is invoked.
     *
     * Theory of operation for shutdown/join
     *
     * All callbacks that are wrapped by this method are in 1 of 5 states:
     *
     * 1. Haven't yet acquired the first lock, no recorded state.
     *
     * 2. Have stashed an entry in the _cbHandles table, but with an unset callback handle.
     * 2.a. We successfully schedule and record the callback handle after the fact.
     * 2.b. We fail to schedule, requiring us to erase recorded state directly from
     *      _wrapCallback.
     *
     * 3. Acquired the lock after calling schedule before the callback ran.  Callback handle is
     *    in the _cbHandles table and the task is cancellable.
     *
     * 4. Ran the callback before stashing the callback handle.  No entry in the table and we
     *    won't stash the handle on exit.
     *
     * What happens in shutdown (I.e. when _inShutdown is set):
     *
     * 1. Nothing.  We never record any values and return immediately with a not-ok status
     *    without running the task
     *
     * 2. We have an entry in the table, but no callback handle.
     * 2.a. The scheduling thread will notice _inShutdown after calling schedule and will cancel
     *      it on the way out.  The execution of the task will remove the entry and notify.
     * 2.b. The scheduling thread will see that the underlying executor failed and
     *      remove/notify.
     *
     * 3. We'll call cancel in shutdown.  The task will remote/notify.
     *
     * 4. The task has already completed and removed itself from the table.
     ','line_number':235,'multiline':True]
['text':' State 1 - No Data','line_number':279,'multiline':False]
['text':' No clean up needed because we never ran or recorded anything','line_number':283,'multiline':False]
['text':' State 2 - Indeterminate state.  We don't know yet if the task will get scheduled.','line_number':300,'multiline':False]
['text':' After we've run the task, we erase and notify.  Sometimes that happens','line_number':312,'multiline':False]
['text':' before we stash the cbHandle.','line_number':313,'multiline':False]
['text':' Have to copy args because we get the arguments by const& and need to','line_number':322,'multiline':False]
['text':' modify the status field.','line_number':323,'multiline':False]
['text':' State 2.b - Failed to schedule','line_number':343,'multiline':False]
['text':' State 2.a - Scheduled, but haven't stashed the cbHandle','line_number':348,'multiline':False]
['text':' If we're in shutdown, the caller of shutdown has cancelled all the handles it had','line_number':351,'multiline':False]
['text':' available (which doesn't include this one).  So we're responsible for calling','line_number':352,'multiline':False]
['text':' cancel().','line_number':353,'multiline':False]
['text':'','line_number':354,'multiline':False]
['text':' Note that the task will handle remove/notify','line_number':355,'multiline':False]
['text':' State 3 - Handle stashed','line_number':363,'multiline':False]
['text':' State 4 - Callback ran before we got here.','line_number':366,'multiline':False]
['text':' We are guaranteed that no more callbacks can be added to _cbHandles after _inShutdown','line_number':376,'multiline':False]
['text':' is set to true. If there are no more callbacks outstanding, then it is the last','line_number':377,'multiline':False]
['text':' callback's responsibility to make the futures returned by joinAll() ready.','line_number':378,'multiline':False]
['text':' Promise that is set when the executor has been shut down and there aren't any outstanding','line_number':390,'multiline':False]
['text':' callbacks. Callers of joinAsync() extract futures from this promise.','line_number':391,'multiline':False]
['text':' namespace executor','line_number':408,'multiline':False]
['text':' namespace mongo','line_number':409,'multiline':False]
