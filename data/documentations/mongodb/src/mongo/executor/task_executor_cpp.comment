['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 * Provides exclusive access to an underlying Promise at set-time, guaranteeing that the Promise
 * will be set at most one time globally. This prevents races between completion and cancellation,
 * which normally would result in Promise throwing an invariant.
 ','line_number':44,'multiline':True]
['text':'*
     * Sets an error on the Promise if no result has been set; otherwise, does nothing.
     ','line_number':54,'multiline':True]
['text':'*
     * Sets a valid result on the Promise if no result has been set; otherwise, does nothing.
     ','line_number':64,'multiline':True]
['text':'*
 * Takes a schedule(Exhaust)RemoteCommand(OnAny)-style function and wraps it to return a future and
 * be cancelable with CancellationTokens.
 ','line_number':98,'multiline':True]
['text':' This has to be made shared because otherwise we'd have to move the access into this','line_number':116,'multiline':False]
['text':' callback, and would be unable to use it in the case where scheduling the request fails below.','line_number':117,'multiline':False]
['text':' Upon completion, unconditionally run our callback.','line_number':122,'multiline':False]
['text':' Only mark the future as complete when the moreToCome flag is false, even if an error has','line_number':126,'multiline':False]
['text':' occured.','line_number':127,'multiline':False]
['text':' Only set an error on failures to send the request (including if the request was','line_number':132,'multiline':False]
['text':' canceled). Errors from the remote host will be contained in the response.','line_number':133,'multiline':False]
['text':' If scheduleStatus is not okay, then the callback signalPromiseOnCompletion should never','line_number':145,'multiline':False]
['text':' run, meaning that it will be okay to set the promise here.','line_number':146,'multiline':False]
['text':' namespace','line_number':152,'multiline':False]
['text':' The callback was not scheduled or moved from, it is still valid. Run it inline to inform','line_number':161,'multiline':False]
['text':' it of the error. Construct a CallbackArgs for it, only CallbackArgs::status matters here.','line_number':162,'multiline':False]
['text':' NOLINT(bugprone-use-after-move)','line_number':164,'multiline':False]
['text':' NOLINT(bugprone-use-after-move)','line_number':165,'multiline':False]
['text':'*
     * Encapsulates the promise associated with the result future.
     ','line_number':178,'multiline':True]
['text':' This has to be shared because Promises (and therefore AlarmState) are move-only and we need','line_number':194,'multiline':False]
['text':' to maintain two copies: One to capture in the scheduleWorkAt callback, and one locally in','line_number':195,'multiline':False]
['text':' case scheduling the request fails.','line_number':196,'multiline':False]
['text':' Schedule a task to signal the alarm when the deadline is reached.','line_number':201,'multiline':False]
['text':' Handle cancellation via the input CancellationToken.','line_number':205,'multiline':False]
['text':' If scheduleStatus is not okay, then the callback passed to scheduleWorkAt should never','line_number':210,'multiline':False]
['text':' run, meaning that it will be okay to set the promise here.','line_number':211,'multiline':False]
['text':' namespace executor','line_number':347,'multiline':False]
['text':' namespace mongo','line_number':348,'multiline':False]
