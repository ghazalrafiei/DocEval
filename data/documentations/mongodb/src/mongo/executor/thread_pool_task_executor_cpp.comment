['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' IWYU pragma: no_include "cxxabi.h"','line_number':34,'multiline':False]
['text':' IWYU pragma: no_include "ext/alloc_traits.h"','line_number':35,'multiline':False]
['text':'*
     * Do not call directly. Use make.
     ','line_number':85,'multiline':True]
['text':' All fields except for "canceled" are guarded by the owning task executor's _mutex. The','line_number':105,'multiline':False]
['text':' "canceled" field may be observed without holding _mutex only if we are checking if the value','line_number':106,'multiline':False]
['text':' is true. This is because once "canceled" stores true, we never set it back to false. The','line_number':107,'multiline':False]
['text':' "canceled" field may only be set while holding _mutex.','line_number':108,'multiline':False]
['text':' Used only in the exhaust path','line_number':113,'multiline':False]
['text':' Used only in the exhaust path. Used to indicate that a cbState associated with','line_number':121,'multiline':False]
['text':' an exhaust request has been removed from the '_networkInProgressQueue'.','line_number':122,'multiline':False]
['text':' All fields guarded by the owning task executor's _mutex.','line_number':146,'multiline':False]
['text':' All non-exhaust tasks are spliced into the _poolInProgressQueue immediately after we','line_number':205,'multiline':False]
['text':' accept them. This occurs in scheduleIntoPool_inlock.','line_number':206,'multiline':False]
['text':'','line_number':207,'multiline':False]
['text':' On the other side, all tasks are spliced out of the _poolInProgressQueue in runCallback,','line_number':208,'multiline':False]
['text':' which removes them from this list after executing the users callback.','line_number':209,'multiline':False]
['text':'','line_number':210,'multiline':False]
['text':' This check ensures that all work managed to enter after shutdown successfully flushes','line_number':211,'multiline':False]
['text':' after shutdown','line_number':212,'multiline':False]
['text':' ThreadPool details','line_number':268,'multiline':False]
['text':' TODO: fill in','line_number':269,'multiline':False]
['text':' Queues','line_number':275,'multiline':False]
['text':' Unsure if we'll succeed yet, so pass an empty CallbackFn.','line_number':313,'multiline':False]
['text':' Success, invalidate "work" by moving it into the queue.','line_number':321,'multiline':False]
['text':' Unsure if we'll succeed yet, so pass an empty CallbackFn.','line_number':362,'multiline':False]
['text':' Success, invalidate "work" by moving it into the queue.','line_number':370,'multiline':False]
['text':' If the request received a connection from the pool but failed in its execution,','line_number':417,'multiline':False]
['text':' convert the raw Status in cbData to a RemoteCommandResponse so that the callback,','line_number':418,'multiline':False]
['text':' which expects a RemoteCommandResponse as part of RemoteCommandCallbackArgs,','line_number':419,'multiline':False]
['text':' can be run despite a RemoteCommandResponse never having been created.','line_number':420,'multiline':False]
['text':' If the request failed to receive a connection from the pool,','line_number':428,'multiline':False]
['text':' convert the raw Status in cbData to a RemoteCommandResponse so that the callback,','line_number':429,'multiline':False]
['text':' which expects a RemoteCommandResponse as part of RemoteCommandCallbackArgs,','line_number':430,'multiline':False]
['text':' can be run despite a RemoteCommandResponse never having been created.','line_number':431,'multiline':False]
['text':' namespace','line_number':439,'multiline':False]
['text':' In case the request fails to even get a connection from the pool,','line_number':449,'multiline':False]
['text':' we wrap the callback in a method that prepares its input parameters.','line_number':450,'multiline':False]
['text':' This callback might still be in the sleeper queue; if it is, schedule it now','line_number':515,'multiline':False]
['text':' rather than when the alarm fires.','line_number':516,'multiline':False]
['text':' Destroy the iterators while holding the lock to accommodate for a possible data race in the','line_number':614,'multiline':False]
['text':' debug implementation of `std::list`. See SERVER-83453 for more context on why we need to','line_number':615,'multiline':False]
['text':' destroy the iterators while holding the lock.','line_number':616,'multiline':False]
['text':' After running callback function, clear 'cbStateArg->callback' to release any resources','line_number':673,'multiline':False]
['text':' that might be held by this function object.','line_number':674,'multiline':False]
['text':' Swap 'cbStateArg->callback' with temporary copy before running callback for exception','line_number':675,'multiline':False]
['text':' safety.','line_number':676,'multiline':False]
['text':' In case the request fails to even get a connection from the pool,','line_number':702,'multiline':False]
['text':' we wrap the callback in a method that prepares its input parameters.','line_number':703,'multiline':False]
['text':' The cbState remains in the '_networkInProgressQueue' for the entirety of the','line_number':733,'multiline':False]
['text':' request's lifetime and is added to and removed from the '_poolInProgressQueue' each','line_number':734,'multiline':False]
['text':' time a response is received and its callback run respectively. It must be erased from','line_number':735,'multiline':False]
['text':' the '_networkInProgressQueue' when either the request is cancelled or a response is','line_number':736,'multiline':False]
['text':' received that has moreToCome == false to avoid shutting down with a task still in the','line_number':737,'multiline':False]
['text':' '_networkInProgressQueue'. It is also possible that we receive both of these','line_number':738,'multiline':False]
['text':' responses around the same time, so the 'exhaustErased' bool protects against','line_number':739,'multiline':False]
['text':' attempting to erase the same cbState twice.','line_number':740,'multiline':False]
['text':' Swap the callback function with the new one','line_number':751,'multiline':False]
['text':' If this is the last response, or command was cancelled, invoke the non-exhaust path.','line_number':757,'multiline':False]
['text':' This will mark cbState as finished and remove the task from _networkInProgressQueue.','line_number':758,'multiline':False]
['text':' Leave the empty callback function if the request has been marked canceled or finished','line_number':846,'multiline':False]
['text':' while running the callback to avoid leaking resources.','line_number':847,'multiline':False]
['text':' Do not mark cbState as finished. It will be marked as finished on the last reply which is','line_number':853,'multiline':False]
['text':' handled in 'runCallback'.','line_number':854,'multiline':False]
['text':' It is possible that we receive multiple responses in quick succession. If this happens, the','line_number':857,'multiline':False]
['text':' later responses can overwrite the 'exhaustIter' value on the cbState when adding the cbState','line_number':858,'multiline':False]
['text':' to the '_poolInProgressQueue' if the previous responses have not been run yet. We take in the','line_number':859,'multiline':False]
['text':' 'expectedExhaustIter' so that we can still remove this task from the 'poolInProgressQueue' if','line_number':860,'multiline':False]
['text':' this happens, but we do not want to reset the 'exhaustIter' value in this case.','line_number':861,'multiline':False]
['text':' namespace executor','line_number':900,'multiline':False]
['text':' namespace mongo','line_number':901,'multiline':False]
