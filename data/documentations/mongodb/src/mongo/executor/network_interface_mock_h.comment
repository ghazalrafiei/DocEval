['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 * Mock network implementation for use in unit tests.
 *
 * To use, construct a new instance on the heap, and keep a pointer to it.  Pass
 * the pointer to the instance into the TaskExecutor constructor, transferring
 * ownership.  Start the executor's run() method in a separate thread, schedule the
 * work you want to test into the executor, then while the test is still going, iterate
 * through the ready network requests, servicing them and advancing time as needed.
 *
 * The mock has a fully virtualized notion of time and the the network.  When the
 * executor under test schedules a network operation, the startCommand
 * method of this class adds an entry to the _unscheduled queue for immediate consideration.
 * The test driver loop, when it examines the request, may schedule a response, ask the
 * interface to redeliver the request at a later virtual time, or to swallow the virtual
 * request until the end of the simulation.  The test driver loop can also instruct the
 * interface to run forward through virtual time until there are operations ready to
 * consider, via runUntil.
 *
 * The thread acting as the "network" and the executor run thread are highly synchronized
 * by this code, allowing for deterministic control of operation interleaving.
 ','line_number':77,'multiline':True]
['text':'*
     * This struct encapsulates the original Request as well as response data and metadata.
     ','line_number':104,'multiline':True]
['text':'//////////////////////////////////////////////////////////////////////////////','line_number':117,'multiline':False]
['text':'','line_number':118,'multiline':False]
['text':' NetworkInterface methods','line_number':119,'multiline':False]
['text':'','line_number':120,'multiline':False]
['text':'//////////////////////////////////////////////////////////////////////////////','line_number':121,'multiline':False]
['text':'*
     * If the network operation is in the _unscheduled or _processing queues, moves the operation
     * into the _scheduled queue with ErrorCodes::CallbackCanceled. If the operation is already in
     * the _scheduled queue, does nothing. The latter simulates the case where cancelCommand() is
     * called after the task has already completed, but its callback has not yet been run.
     ','line_number':149,'multiline':True]
['text':'//////////////////////////////////////////////////////////////////////////////','line_number':185,'multiline':False]
['text':'','line_number':186,'multiline':False]
['text':' Methods for simulating network operations and the passage of time.','line_number':187,'multiline':False]
['text':'','line_number':188,'multiline':False]
['text':' Methods in this section are to be called by the thread currently simulating','line_number':189,'multiline':False]
['text':' the network.','line_number':190,'multiline':False]
['text':'','line_number':191,'multiline':False]
['text':'//////////////////////////////////////////////////////////////////////////////','line_number':192,'multiline':False]
['text':'*
     * RAII-style class for entering and exiting network.
     ','line_number':194,'multiline':True]
['text':'*
     * Causes the currently running (non-executor) thread to assume the mantle of the network
     * simulation thread.
     *
     * Call this before calling any of the other methods in this section.
     ','line_number':203,'multiline':True]
['text':'*
     * Causes the currently running thread to drop the mantle of "network simulation thread".
     *
     * Call this before calling any methods that might block waiting for the
     * executor thread.
     *
     * It is safe to call exitNetwork() even if enterNetwork() has not been called - it will just
     * be a no-op.
     ','line_number':211,'multiline':True]
['text':'*
     * Returns true if there are unscheduled network requests to be processed.
     *
     * This will not notice exhaust operations that have not yet finished but have processed all of
     * their available responses.
     ','line_number':222,'multiline':True]
['text':'*
     * Returns true if the given iterator points to the end of the network operation list.
     ','line_number':230,'multiline':True]
['text':'*
     * Gets the next unscheduled request to process, blocking until one is available.
     *
     * Will not return until the executor thread is blocked in waitForWorkUntil or waitForWork.
     ','line_number':235,'multiline':True]
['text':'*
     * Gets the first unscheduled request. There must be at least one unscheduled request in the
     * queue. Equivalent to getNthUnscheduledRequest(0).
     ','line_number':242,'multiline':True]
['text':'*
     * Get the nth (starting at 0) unscheduled request. Assumes there are at least n+1 unscheduled
     * requests in the queue.
     ','line_number':248,'multiline':True]
['text':'*
     * Schedules "response" in response to "noi" at virtual time "when".
     ','line_number':254,'multiline':True]
['text':'*
     * Schedules a successful "response" to "noi" at virtual time "when".
     * "noi" defaults to next ready request.
     * "when" defaults to now().
     * Returns the "request" that the response was scheduled for.
     ','line_number':261,'multiline':True]
['text':'*
     * Schedules an error "response" to "noi" at virtual time "when".
     * "noi" defaults to next ready request.
     * "when" defaults to now().
     ','line_number':275,'multiline':True]
['text':'*
     * Swallows "noi", causing the network interface to not respond to it until
     * shutdown() is called.
     ','line_number':288,'multiline':True]
['text':'*
     * Runs the simulator forward until now() == until or hasReadyRequests() is true.
     * Returns now().
     *
     * Will not return until the executor thread is blocked in waitForWorkUntil or waitForWork.
     ','line_number':294,'multiline':True]
['text':'*
     * Runs the simulator forward until now() == until.
     ','line_number':302,'multiline':True]
['text':'*
     * Processes all ready, scheduled network operations.
     *
     * Will not return until the executor thread is blocked in waitForWorkUntil or waitForWork.
     ','line_number':307,'multiline':True]
['text':'*
     * Sets the reply of the 'hello' handshake for a specific host. This reply will only
     * be given to the 'validateHost' method of the ConnectionHook set on this object - NOT
     * to the completion handlers of any 'hello' commands scheduled with 'startCommand'.
     *
     * This reply will persist until it is changed again using this method.
     *
     * If the NetworkInterfaceMock conducts a handshake with a simulated host which has not
     * had a handshake reply set, a default constructed RemoteCommandResponse will be passed
     * to validateHost if a hook is set.
     ','line_number':314,'multiline':True]
['text':'*
     * Deliver the response to the callback handle if the handle is present.
     * This represents interrupting the regular flow with, for example, a NetworkTimeout or
     * CallbackCanceled error.
     ','line_number':327,'multiline':True]
['text':'*
     * Returns true if there is no scheduled work (i.e. alarms and scheduled responses) for the
     * network thread to process.
     ','line_number':335,'multiline':True]
['text':'*
     * Information describing a scheduled alarm.
     ','line_number':342,'multiline':True]
['text':'*
     * Type used to identify which thread (network mock or executor) is currently executing.
     *
     * Values are used in a bitmask, as well.
     ','line_number':358,'multiline':True]
['text':'*
     * Implementation of startup behavior.
     ','line_number':365,'multiline':True]
['text':'*
     * Returns the current virtualized time.
     ','line_number':370,'multiline':True]
['text':'*
     * Implementation of waitForWork*.
     ','line_number':377,'multiline':True]
['text':'*
     * Returns true if there are ready requests for the network thread to service.
     ','line_number':382,'multiline':True]
['text':'*
     * Returns true if the network thread could run right now.
     ','line_number':387,'multiline':True]
['text':'*
     * Returns true if the executor thread could run right now.
     ','line_number':392,'multiline':True]
['text':'*
     * Enqueues a network operation to run in order of 'consideration date'.
     ','line_number':397,'multiline':True]
['text':'*
     * "Connects" to a remote host, and then enqueues the provided operation.
     ','line_number':402,'multiline':True]
['text':'*
     * Enqueues a response to be processed the next time we runReadyNetworkOperations.
     *
     * Note that interruption and timeout also invoke this function.
     ','line_number':407,'multiline':True]
['text':'*
     * Runs all ready network operations, called while holding "lk".  May drop and
     * reaquire "lk" several times, but will not return until the executor has blocked
     * in waitFor*.
     ','line_number':416,'multiline':True]
['text':' Mutex that synchronizes access to mutable data in this class and its subclasses.','line_number':429,'multiline':False]
['text':' Fields guarded by the mutex are labled (M), below, and those that are read-only','line_number':430,'multiline':False]
['text':' in multi-threaded execution, and so unsynchronized, are labeled (R).','line_number':431,'multiline':False]
['text':' NOLINT','line_number':432,'multiline':False]
['text':' A mocked clock source.','line_number':434,'multiline':False]
['text':' (M)','line_number':435,'multiline':False]
['text':' Condition signaled to indicate that the network processing thread should wake up.','line_number':437,'multiline':False]
['text':' (M)','line_number':438,'multiline':False]
['text':' Condition signaled to indicate that the executor run thread should wake up.','line_number':440,'multiline':False]
['text':' (M)','line_number':441,'multiline':False]
['text':' Bitmask indicating which threads are runnable.','line_number':443,'multiline':False]
['text':' (M)','line_number':444,'multiline':False]
['text':' Indicator of which thread, if any, is currently running.','line_number':446,'multiline':False]
['text':' (M)','line_number':447,'multiline':False]
['text':' Set to true by "startUp()"','line_number':449,'multiline':False]
['text':' (M)','line_number':450,'multiline':False]
['text':' Set to true by "shutDown()".','line_number':452,'multiline':False]
['text':' (M)','line_number':453,'multiline':False]
['text':' Next date that the executor expects to wake up at (due to a scheduleWorkAt() call).','line_number':455,'multiline':False]
['text':' (M)','line_number':456,'multiline':False]
['text':' The list of operations that have been submitted via startCommand. Operations are never','line_number':458,'multiline':False]
['text':' deleted from this list, thus NetworkOperationIterators are valid for the lifetime of the','line_number':459,'multiline':False]
['text':' NetworkInterfaceMock.','line_number':460,'multiline':False]
['text':' (M)','line_number':461,'multiline':False]
['text':' The list of responses that have been enqueued from scheduleResponse(), cancellation, or','line_number':463,'multiline':False]
['text':' timeout. This list is ordered by NetworkResponse::when and is drained front to back by','line_number':464,'multiline':False]
['text':' runReadyNetworkOperations().','line_number':465,'multiline':False]
['text':' (M)','line_number':466,'multiline':False]
['text':' Heap of alarms, with the next alarm always on top.','line_number':468,'multiline':False]
['text':' (M)','line_number':469,'multiline':False]
['text':' A set of CallbackHandles for canceled alarms','line_number':471,'multiline':False]
['text':' (M^:)','line_number':472,'multiline':False]
['text':' The connection hook.','line_number':474,'multiline':False]
['text':' (R)','line_number':475,'multiline':False]
['text':' The metadata hook.','line_number':477,'multiline':False]
['text':' (R)','line_number':478,'multiline':False]
['text':' The set of hosts we have seen so far. If we see a new host, we will execute the','line_number':480,'multiline':False]
['text':' ConnectionHook's validation and post-connection logic.','line_number':481,'multiline':False]
['text':'','line_number':482,'multiline':False]
['text':' TODO: provide a way to simulate disconnections.','line_number':483,'multiline':False]
['text':' (M)','line_number':484,'multiline':False]
['text':' The handshake replies set for each host.','line_number':486,'multiline':False]
['text':' (M)','line_number':487,'multiline':False]
['text':' Track statistics about processed responses. Right now, the mock tracks the total responses','line_number':489,'multiline':False]
['text':' processed with sent, the number of OK responses with succeeded, non-OK responses with failed,','line_number':490,'multiline':False]
['text':' and cancellation errors with canceled. It does not track the timedOut or failedRemotely','line_number':491,'multiline':False]
['text':' statistics.','line_number':492,'multiline':False]
['text':'*
 * Representation of an in-progress network operation.
 ','line_number':498,'multiline':True]
['text':'*
     * Mark the operation as observed by the networking thread. This is equivalent to a remote node
     * processing the operation.
     ','line_number':511,'multiline':True]
['text':'*
     * Mark the operation as blackholed by the networking thread.
     ','line_number':519,'multiline':True]
['text':'*
     * Process a response to an ongoing operation.
     *
     * This invokes the _onResponse callback and may throw.
     ','line_number':527,'multiline':True]
['text':'*
     * Predicate that returns true if cbHandle equals the executor's handle for this network
     * operation.  Used for searching lists of NetworkOperations.
     ','line_number':534,'multiline':True]
['text':'*
     * Gets the request that initiated this operation.
     ','line_number':546,'multiline':True]
['text':'*
     * Gets the request that initiated this operation.
     ','line_number':553,'multiline':True]
['text':'*
     * Returns true if this operation has not been observed via getNextReadyRequest(), been
     * canceled, or timed out.
     ','line_number':560,'multiline':True]
['text':'*
     * Assert that this operation has not been blackholed.
     ','line_number':572,'multiline':True]
['text':'*
     * Gets the virtual time at which the operation was started.
     ','line_number':579,'multiline':True]
['text':'*
     * Returns a printable diagnostic string.
     ','line_number':586,'multiline':True]
['text':'*
 * RAII type to enter and exit network on construction/destruction.
 *
 * Calls enterNetwork on construction, and exitNetwork during destruction,
 * unless dismissed.
 *
 * Not thread-safe.
 ','line_number':604,'multiline':True]
['text':'*
     * Calls enterNetwork.
     ','line_number':617,'multiline':True]
['text':'*
     * Calls exitNetwork, and disables the destructor from calling.
     ','line_number':621,'multiline':True]
['text':'*
     * Calls exitNetwork, unless dismiss has been called.
     ','line_number':625,'multiline':True]
['text':'*
     * Returns network interface mock pointer.
     ','line_number':630,'multiline':True]
['text':' namespace executor','line_number':640,'multiline':False]
['text':' namespace mongo','line_number':641,'multiline':False]
