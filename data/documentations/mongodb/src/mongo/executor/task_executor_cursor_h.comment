['text':'*
 *    Copyright (C) 2019-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 * A synchronous cursor API for managing a remote cursor that uses an async task executor to run all
 * stages of the command cursor protocol (initial command, getMore, killCursors)
 *
 * The main differentiator for this type over DBClientCursor is the use of a task executor (which
 * provides access to a different connection pool, as well as interruptibility) and the ability to
 * overlap getMores.  This starts fetching the next batch as soon as the previous one is received
 * (rather than on a call to 'getNext()').
 ','line_number':67,'multiline':True]
['text':' Cursor id has 1 of 3 states.','line_number':78,'multiline':False]
['text':' <0 - We haven't yet received a response for our initial request','line_number':79,'multiline':False]
['text':' 0  - Cursor is done (errored or consumed)','line_number':80,'multiline':False]
['text':' >=1 - Cursor is live on the remote','line_number':81,'multiline':False]
['text':' If true, we will fetch the next batch as soon as the current one is recieved.','line_number':89,'multiline':False]
['text':' If false, we will fetch the next batch when the current batch is exhausted and','line_number':90,'multiline':False]
['text':' 'getNext()' is invoked.','line_number':91,'multiline':False]
['text':' This function, if specified, may modify a getMore request to include additional','line_number':94,'multiline':False]
['text':' information.','line_number':95,'multiline':False]
['text':' Optional yield policy allows us to yield(release storage resources) during remote call.','line_number':98,'multiline':False]
['text':' Using shared_ptr to allow tries on network failure, don't share the pointer on other','line_number':99,'multiline':False]
['text':' purpose.','line_number':100,'multiline':False]
['text':'*
     * Construct the cursor with a RemoteCommandRequest wrapping the initial command.
     *
     * Doesn't retry the command if we fail to establish the cursor. To create a TaskExecutorCursor
     * with the option to retry the initial command, see `makeTaskExecutorCursor`below.
     *
     * One value is carried over in successive calls to getMore/killCursor:
     *
     * opCtx - The Logical Session Id from the initial command is carried over in all later stages.
     *         NOTE - the actual command must not include the lsid
     ','line_number':106,'multiline':True]
['text':'*
     * Construct the cursor from a cursor response from a previously executed RemoteCommandRequest.
     * The executor is used for subsequent getMore calls. Uses the original RemoteCommandRequest
     * to build subsequent commands. Takes ownership of the CursorResponse and gives it to the new
     * cursor.
     * If the cursor should reuse the original transport connection that opened the original
     * cursor, make sure the pinning executor that was used to open that cursor is provided.
     ','line_number':121,'multiline':True]
['text':'*
     * Move constructor to enable storing cursors in vectors.
     ','line_number':135,'multiline':True]
['text':'*
     * Asynchronously kills async ops and kills the underlying cursor on destruction.
     ','line_number':140,'multiline':True]
['text':'*
     * Returns the next document from this cursor until the cursor is exhausted (in which case we
     * return an unset optional).  This method can throw if there is an error running any commands,
     * if the remote server returns a not ok command result, or if the passed in opCtx is
     * interrupted (by killOp or maxTimeMS).
     *
     * The opCtx may also be used as the source of client metadata if this call to getNext()
     * triggers a new getMore to fetch the next batch.
     ','line_number':145,'multiline':True]
['text':'*
     * Read the response from the remote command issued by this cursor and parse it into this
     * object. Performs the same work as getNext() above does on the first call to it, and so this
     * can throw any error that getNext can throw.
     *
     * Should not be called once getNext() has been called or the cursor has been otherwise
     * initialized.
     ','line_number':156,'multiline':True]
['text':'*
     * Returns the vector of cursors that were returned alongside this one. Calling this claims
     * ownership of the cursors and will return an empty vector on subsequent calls.
     ','line_number':188,'multiline':True]
['text':'*
     * Runs a remote command and pipes the output back to this object
     ','line_number':219,'multiline':True]
['text':'*
     * Gets the next batch with interruptibility via the opCtx.
     ','line_number':224,'multiline':True]
['text':'*
     * Helper for '_getNextBatch' that handles the reading of the 'CursorResponse' object and
     * storing of relevant values.
     ','line_number':229,'multiline':True]
['text':'*
     * Create a new request, annotating with lsid and current opCtx
     ','line_number':235,'multiline':True]
['text':'*
     * Schedules a 'GetMore' request to run asyncronously.
     * This function can only be invoked when:
     * - There is no in-flight request ('_cmdState' is null).
     * - We have an open '_cursorId'.
     ','line_number':240,'multiline':True]
['text':' If we are pinning connections, we need to keep a separate reference to the','line_number':249,'multiline':False]
['text':' non-pinning, normal executor, so that we can shut down the pinned executor','line_number':250,'multiline':False]
['text':' out-of-line.','line_number':251,'multiline':False]
['text':' Used as a scratch pad for the successive scheduleRemoteCommand calls','line_number':254,'multiline':False]
['text':' If the opCtx is in our initial request, re-use it for all subsequent operations','line_number':259,'multiline':False]
['text':'*
     * Maintains the state for the in progress command (if there is any):
     * - Handle for the task scheduled on `_executor`.
     * - A promise that will be emplaced by the result of running the command.
     *
     * The state may outlive `TaskExecutorCursor` and is shared with the callback that runs on
     * `_executor` upon completion of the remote command.
     ','line_number':267,'multiline':True]
['text':' Variables sent alongside the results in the cursor.','line_number':279,'multiline':False]
['text':' For commands that return multiple cursors, the type of the cursor.','line_number':282,'multiline':False]
['text':' This is a sum of the time spent waiting on remote calls.','line_number':285,'multiline':False]
['text':' Namespace after we resolved the initial request','line_number':288,'multiline':False]
['text':' Storage for the last batch we fetched','line_number':291,'multiline':False]
['text':' Cursors built from the responses returned alongside the results for this cursor.','line_number':296,'multiline':False]
['text':' Make a new TaskExecutorCursor using the provided executor, RCR, and options. If we fail to create','line_number':300,'multiline':False]
['text':' the cursor, the retryPolicy can inspect the error and make a decision as to whether we should','line_number':301,'multiline':False]
['text':' retry. If we do retry, the error is swallowed and another attempt is made. If we don't retry,','line_number':302,'multiline':False]
['text':' this function throws the error we failed with.','line_number':303,'multiline':False]
['text':' namespace executor','line_number':324,'multiline':False]
['text':' namespace mongo','line_number':325,'multiline':False]
