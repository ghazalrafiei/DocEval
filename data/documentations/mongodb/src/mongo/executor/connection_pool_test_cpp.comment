['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
     * Get from a pool with out-of-line execution and return the future for a connection
     *
     * Since the InlineOutOfLineExecutor starts running on the same thread once schedule is called,
     * this function allows us to avoid deadlocks with get(), which is the only public function that
     * calls schedule while holding a lock. In normal operation, the OutOfLineExecutor is actually
     * out of line, and this contrivance isn't necessary.
     ','line_number':82,'multiline':True]
['text':'*
     * Helper for asserting the various connection pool time-out behaviours.
     *
     * Gets a connection from a new pool with a different timeout duration and code,
     * asserting the connection times out with the appropriate code.
     *
     * The controller's refresh timeout is set to 250ms.
     ','line_number':123,'multiline':True]
['text':'*
 * Verify that we get the same connection if we grab one, return it and grab
 * another.
 ','line_number':160,'multiline':True]
['text':' Grab and stash an id for the first request','line_number':167,'multiline':False]
['text':' Grab and stash an id for the second request','line_number':178,'multiline':False]
['text':' Verify that we hit them, and that they're the same','line_number':189,'multiline':False]
['text':'*
 * Verify that connections are obtained in MRU order.
 ','line_number':195,'multiline':True]
['text':' Obtain a set of connections','line_number':203,'multiline':False]
['text':' Ensure that no matter how we leave the test, we mark any','line_number':208,'multiline':False]
['text':' checked out connections as OK before implicity returning them','line_number':209,'multiline':False]
['text':' to the pool by destroying the 'connections' vector. Otherwise,','line_number':210,'multiline':False]
['text':' this test would cause an invariant failure instead of a normal','line_number':211,'multiline':False]
['text':' test failure if it fails, which would be confusing.','line_number':212,'multiline':False]
['text':' Randomly lease or check out connection.','line_number':237,'multiline':False]
['text':' Shuffle them into a random order','line_number':251,'multiline':False]
['text':' Return them to the pool in that random order, recording IDs in a stack','line_number':254,'multiline':False]
['text':' Replace the thread monitors with fresh ones.','line_number':264,'multiline':False]
['text':' Re-obtain the connections. They should come back in the same order','line_number':267,'multiline':False]
['text':' as the IDs in the stack, since the pool returns them in MRU order.','line_number':268,'multiline':False]
['text':' Randomly lease or check out connection.','line_number':284,'multiline':False]
['text':'*
 * Verify that recently used connections are not purged.
 ','line_number':299,'multiline':True]
['text':' Obtain a set of connections','line_number':312,'multiline':False]
['text':' Ensure that no matter how we leave the test, we mark any','line_number':317,'multiline':False]
['text':' checked out connections as OK before implicity returning them','line_number':318,'multiline':False]
['text':' to the pool by destroying the 'connections' vector. Otherwise,','line_number':319,'multiline':False]
['text':' this test would cause an invariant failure instead of a normal','line_number':320,'multiline':False]
['text':' test failure if it fails, which would be confusing.','line_number':321,'multiline':False]
['text':' Check out kSize connections from the pool, and record their IDs in a set.','line_number':336,'multiline':False]
['text':' Shuffle them into a random order','line_number':360,'multiline':False]
['text':' Return them to the pool in that random order.','line_number':365,'multiline':False]
['text':' Advance the time, but not enough to age out connections. We should still have them all.','line_number':372,'multiline':False]
['text':' Re-obtain a quarter of the connections, and record their IDs in a set.','line_number':376,'multiline':False]
['text':' Put them right back in.','line_number':403,'multiline':False]
['text':' We should still have all of them in the pool','line_number':410,'multiline':False]
['text':' Advance across the host timeout for the 75 connections we','line_number':413,'multiline':False]
['text':' didn't use. Afterwards, the pool should contain only those','line_number':414,'multiline':False]
['text':' kSize/4 connections we used above.','line_number':415,'multiline':False]
['text':'*
 * Verify that a failed connection isn't returned to the pool
 ','line_number':420,'multiline':True]
['text':' Grab the first connection and indicate that it failed','line_number':426,'multiline':False]
['text':' Grab the second id','line_number':437,'multiline':False]
['text':' Verify that we hit them, and that they're different','line_number':448,'multiline':False]
['text':'*
 * Verify that a connection returned with an error indicating the remote
 * is unavailable drops current generation connections to that remote.
 ','line_number':454,'multiline':True]
['text':' Ensure that no matter how we leave the test, we mark any','line_number':467,'multiline':False]
['text':' checked out connections as OK before implicity returning them','line_number':468,'multiline':False]
['text':' to the pool by destroying the 'connections' vector. Otherwise,','line_number':469,'multiline':False]
['text':' this test would cause an invariant failure instead of a normal','line_number':470,'multiline':False]
['text':' test failure if it fails, which would be confusing.','line_number':471,'multiline':False]
['text':' Check out kSize connections from the pool.','line_number':487,'multiline':False]
['text':' Return one connection with a network error.','line_number':509,'multiline':False]
['text':' We should still have all of the connections open, minus the one we just returned with an','line_number':514,'multiline':False]
['text':' error.','line_number':515,'multiline':False]
['text':' Put the remaining connections back.','line_number':518,'multiline':False]
['text':' They should all be discarded since the host should be marked as down','line_number':521,'multiline':False]
['text':' due to the connection returned with a network error.','line_number':522,'multiline':False]
['text':'*
 * Verify that a connection returned with an error that does _not_ indicate
 * the remote is unavailable does _not_ drop current generation connections to that remote.
 ','line_number':526,'multiline':True]
['text':' Ensure that no matter how we leave the test, we mark any','line_number':538,'multiline':False]
['text':' checked out connections as OK before implicity returning them','line_number':539,'multiline':False]
['text':' to the pool by destroying the 'connections' vector. Otherwise,','line_number':540,'multiline':False]
['text':' this test would cause an invariant failure instead of a normal','line_number':541,'multiline':False]
['text':' test failure if it fails, which would be confusing.','line_number':542,'multiline':False]
['text':' All three types of error that shouldn't result in us dropping connections - a non-network','line_number':582,'multiline':False]
['text':' error; a network timeout error, and a network error that we can isolate to a specific','line_number':583,'multiline':False]
['text':' connection.','line_number':584,'multiline':False]
['text':' Check out kSize connections from the pool.','line_number':588,'multiline':False]
['text':' Return one connection with a non-network error.','line_number':590,'multiline':False]
['text':' We should still have all of the connections open, minus the one we just returned with an','line_number':595,'multiline':False]
['text':' error.','line_number':596,'multiline':False]
['text':' Put the remaining connections back.','line_number':599,'multiline':False]
['text':' They should all still be open.','line_number':602,'multiline':False]
['text':'*
 * Verify that providing different host and ports gives you different
 * connections.
 ','line_number':607,'multiline':True]
['text':' Conn 1 from port 30000','line_number':614,'multiline':False]
['text':' Conn 2 from port 30001','line_number':625,'multiline':False]
['text':' Hit them and not the same','line_number':636,'multiline':False]
['text':'*
 * Verify that not returning handle's to the pool spins up new connections.
 ','line_number':642,'multiline':True]
['text':' Get the first connection, move it out rather than letting it return','line_number':648,'multiline':False]
['text':' Get the second connection, move it out rather than letting it return','line_number':663,'multiline':False]
['text':' Verify that the two connections are different','line_number':679,'multiline':False]
['text':'*
 * When the timeout duration comes from the parameter, and no timeout code is specified the
 * connection timeout status should always be `NetworkInterfaceExceededTimeLimit`
 ','line_number':686,'multiline':True]
['text':' timeout duration ','line_number':692,'multiline':True]
['text':' expected timeout code ','line_number':693,'multiline':True]
['text':' user-defined timeout code ','line_number':694,'multiline':True]
['text':'*
 * When the timeout duration and timeout code come from the parameters, the connection timeout
 * status should be the same as specified.
 ','line_number':697,'multiline':True]
['text':' timeout duration ','line_number':703,'multiline':True]
['text':' expected timeout code ','line_number':704,'multiline':True]
['text':' user-defined timeout code ','line_number':705,'multiline':True]
['text':'*
 * When the timeout duration comes from controller, the connection timeout status should always
 * be `NetworkInterfaceExceededTimeLimit`.
 *
 * This test verifies that for a duration longer than what is specified in the connection pool
 * controller, the controller timeout duration takes precendence over what was requested and
 * the returned status is always `NetworkInterfaceExceededTimeLimit`
 ','line_number':708,'multiline':True]
['text':' timeout duration ','line_number':718,'multiline':True]
['text':' expected timeout code ','line_number':719,'multiline':True]
['text':' user-defined timeout code ','line_number':720,'multiline':True]
['text':'*
 * Verify that refresh callbacks happen at the appropriate moments.
 ','line_number':723,'multiline':True]
['text':' Get a connection','line_number':747,'multiline':False]
['text':' After 1 second, one refresh has occurred','line_number':761,'multiline':False]
['text':' After 1.5 seconds, the second refresh still hasn't triggered','line_number':766,'multiline':False]
['text':' At 2 seconds, the second refresh has triggered','line_number':770,'multiline':False]
['text':'*
 * Verify that refresh can timeout.
 ','line_number':775,'multiline':True]
['text':' Grab a connection and verify it's good','line_number':790,'multiline':False]
['text':' Make sure we still get the first one','line_number':808,'multiline':False]
['text':' This should trigger a refresh, but not time it out. So now we have one','line_number':821,'multiline':False]
['text':' connection sitting in refresh.','line_number':822,'multiline':False]
['text':' This will wait because we have a refreshing connection, so it'll wait to','line_number':826,'multiline':False]
['text':' see if that pans out. In this case, we'll get a failure on timeout.','line_number':827,'multiline':False]
['text':' Let the refresh timeout','line_number':843,'multiline':False]
['text':' Make sure we can get a new connection','line_number':848,'multiline':False]
['text':'*
 * Verify that requests are served in expiration order, not insertion order
 ','line_number':866,'multiline':True]
['text':' Note thate we hit the 1 second request, but not the 2 second','line_number':906,'multiline':False]
['text':' Now that we've returned the connection, we see the second has been','line_number':913,'multiline':False]
['text':' called','line_number':914,'multiline':False]
['text':'*
 * Verify that we respect maxConnections
 ','line_number':919,'multiline':True]
['text':' Make 3 requests, each which keep their connection (don't return it to','line_number':932,'multiline':False]
['text':' the pool)','line_number':933,'multiline':False]
['text':' Note that only two have run','line_number':977,'multiline':False]
['text':' Return 1','line_number':982,'multiline':False]
['text':' Verify that it's the one that pops out for request 3','line_number':986,'multiline':False]
['text':'*
 * Verify that we respect maxConnecting
 ','line_number':994,'multiline':True]
['text':' Make 3 requests, each which keep their connection (don't return it to','line_number':1007,'multiline':False]
['text':' the pool)','line_number':1008,'multiline':False]
['text':'*
 * Verify that refresh callbacks block new connections, then trigger new connection spawns after
 * they return
 ','line_number':1070,'multiline':True]
['text':' Get a connection','line_number':1084,'multiline':False]
['text':' After 1 second, one refresh has queued','line_number':1100,'multiline':False]
['text':' Try to get another connection','line_number':1106,'multiline':False]
['text':'*
 * Verify that refreshes block new connects, but don't themselves respect maxConnecting
 ','line_number':1129,'multiline':True]
['text':' Get us spun up to 3 connections in the pool','line_number':1143,'multiline':False]
['text':' Force more than two connections into refresh','line_number':1162,'multiline':False]
['text':' Start 5 new requests','line_number':1169,'multiline':False]
['text':' None have started connecting','line_number':1192,'multiline':False]
['text':' After one refresh, one refreshed connection gets handed out','line_number':1197,'multiline':False]
['text':' After two refresh, one enters the setup queue, one refreshed connection gets handed out','line_number':1204,'multiline':False]
['text':' After three refresh, we're done refreshing. Two queued in setup','line_number':1211,'multiline':False]
['text':' now pushing setup gets us a new connection','line_number':1218,'multiline':False]
['text':' and we're done','line_number':1224,'multiline':False]
['text':'*
 * Verify that minConnections is respected
 ','line_number':1235,'multiline':True]
['text':' Grab one connection without returning it','line_number':1258,'multiline':False]
['text':' Verify that two setups were invoked, even without two requests (the','line_number':1285,'multiline':False]
['text':' minConnections == 2)','line_number':1286,'multiline':False]
['text':' Two more get's without returns','line_number':1291,'multiline':False]
['text':' Return each connection over 1, 2 and 3 ms','line_number':1336,'multiline':False]
['text':' Jump 5 seconds and verify that refreshes only two refreshes occurred','line_number':1346,'multiline':False]
['text':'*
 * Verify that the hostTimeout is respected. This implies that an idle
 * hostAndPort drops it's connections.
 ','line_number':1355,'multiline':True]
['text':' Grab 1 connection and return it','line_number':1373,'multiline':False]
['text':' Jump pass the hostTimeout','line_number':1389,'multiline':False]
['text':' Verify that a new connection was spawned','line_number':1394,'multiline':False]
['text':'*
 * Verify that the hostTimeout happens, but that continued gets delay
 * activation.
 ','line_number':1412,'multiline':True]
['text':' Grab and return','line_number':1431,'multiline':False]
['text':' Jump almost up to the hostTimeout','line_number':1447,'multiline':False]
['text':' Same connection','line_number':1451,'multiline':False]
['text':' Now our timeout should be 1999 ms from 'now' instead of 1000 ms','line_number':1466,'multiline':False]
['text':' if we do another 'get' we should still get the original connection','line_number':1467,'multiline':False]
['text':' We should time out when we get to 'now' + 2500 ms','line_number':1484,'multiline':False]
['text':' Different id','line_number':1488,'multiline':False]
['text':'*
 * Verify that the hostTimeout happens and that having a connection checked out
 * delays things
 ','line_number':1506,'multiline':True]
['text':' save 1 connection','line_number':1525,'multiline':False]
['text':' return the second','line_number':1540,'multiline':False]
['text':' hostTimeout has passed','line_number':1555,'multiline':False]
['text':' conn 2 is still there','line_number':1560,'multiline':False]
['text':' return conn 1','line_number':1575,'multiline':False]
['text':' expire the pool','line_number':1578,'multiline':False]
['text':' make sure that this is a new id','line_number':1583,'multiline':False]
['text':'*
 * Verify that drop connections works
 ','line_number':1601,'multiline':True]
['text':' ensure that only 1 connection is floating around','line_number':1607,'multiline':False]
['text':' Grab the first connection id','line_number':1616,'multiline':False]
['text':' Grab it and this time keep it out of the pool','line_number':1632,'multiline':False]
['text':' Queue up a request. This won't fire until we drop connections, then it','line_number':1649,'multiline':False]
['text':' will fail.','line_number':1650,'multiline':False]
['text':' fails the previous get','line_number':1663,'multiline':False]
['text':' return the connection','line_number':1668,'multiline':False]
['text':' Make sure that a new connection request properly disposed of the gen1','line_number':1671,'multiline':False]
['text':' connection','line_number':1672,'multiline':False]
['text':' Push conn2 into refresh','line_number':1689,'multiline':False]
['text':' drop the connections','line_number':1692,'multiline':False]
['text':' refresh still pending','line_number':1695,'multiline':False]
['text':' Verify that a new connection came out, despite the gen2 connection still','line_number':1698,'multiline':False]
['text':' being pending','line_number':1699,'multiline':False]
['text':'*
 * Verify that timeouts during setup don't prematurely time out unrelated requests
 ','line_number':1717,'multiline':True]
['text':' initially we haven't called our callback','line_number':1737,'multiline':False]
['text':' Still haven't fired on conn1','line_number':1742,'multiline':False]
['text':' Get conn2 (which should have an extra second before the timeout)','line_number':1745,'multiline':False]
['text':'*
 * Verify that timeouts during refresh don't prematurely time out unrelated requests
 ','line_number':1760,'multiline':True]
['text':' Successfully get a new connection','line_number':1774,'multiline':False]
['text':' Force it into refresh','line_number':1786,'multiline':False]
['text':' initially we haven't called our callback','line_number':1796,'multiline':False]
['text':' 1 second later we've triggered a refresh and still haven't called the callback','line_number':1799,'multiline':False]
['text':' Get conn2 (which should have an extra second before the timeout)','line_number':1803,'multiline':False]
['text':' Successfully get connections to two hosts','line_number':1828,'multiline':False]
['text':' drop connections by hostAndPort','line_number':1879,'multiline':False]
['text':' Make our initial connection, use and return it','line_number':1914,'multiline':False]
['text':' no connections in the pool, our future is not satisfied','line_number':1918,'multiline':False]
['text':' Successfully get a new connection','line_number':1922,'multiline':False]
['text':' Future should be ready now','line_number':1925,'multiline':False]
['text':' There is one connection in the pool:','line_number':1933,'multiline':False]
['text':' * The first get should resolve immediately','line_number':1934,'multiline':False]
['text':' * The second get should should be queued','line_number':1935,'multiline':False]
['text':' * The eventual third should be queued before the second','line_number':1936,'multiline':False]
['text':' The first future should be immediately ready. The second should be in the queue.','line_number':1945,'multiline':False]
['text':' Resolve the first future to return the connection and continue on to the second.','line_number':1949,'multiline':False]
['text':' Grab our third future while our first one is being fulfilled','line_number':1953,'multiline':False]
['text':' Since the third future has a smaller timeout than the second,','line_number':1960,'multiline':False]
['text':' it should take priority over the second','line_number':1961,'multiline':False]
['text':' Resolve the third future. This should trigger the second future','line_number':1965,'multiline':False]
['text':' We've run before the second future','line_number':1968,'multiline':False]
['text':' The second future is now finally ready','line_number':1974,'multiline':False]
['text':' Advance our timer past the request timeout, so that the resultant internal','line_number':2000,'multiline':False]
['text':' timeout in updateEventTimer is negative, and make sure we don't trip any','line_number':2001,'multiline':False]
['text':' assertions.','line_number':2002,'multiline':False]
['text':' Grab a connection and hold it to end of scope','line_number':2012,'multiline':False]
['text':' Check out multiple connections.','line_number':2059,'multiline':False]
['text':' Ensure that no matter how we leave the test, we mark any','line_number':2062,'multiline':False]
['text':' checked out connections as OK before implicity returning them','line_number':2063,'multiline':False]
['text':' to the pool by destroying the 'connections' vector. Otherwise,','line_number':2064,'multiline':False]
['text':' this test would cause an invariant failure instead of a normal','line_number':2065,'multiline':False]
['text':' test failure if it fails, which would be confusing.','line_number':2066,'multiline':False]
['text':' Advance the time and return the connections.','line_number':2089,'multiline':False]
['text':' Since each connection was used for checkOutLength, the total usage time should be >= the','line_number':2106,'multiline':False]
['text':' product.','line_number':2107,'multiline':False]
['text':' Checkout one connection and lease one connection.','line_number':2151,'multiline':False]
['text':' Advance the time and return the connections.','line_number':2167,'multiline':False]
['text':' Should only include usage time from the checkout, not the lease','line_number':2176,'multiline':False]
['text':' namespace connection_pool_test_details','line_number':2181,'multiline':False]
['text':' namespace executor','line_number':2182,'multiline':False]
['text':' namespace mongo','line_number':2183,'multiline':False]
