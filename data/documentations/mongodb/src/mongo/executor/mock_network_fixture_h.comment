['text':'*
 *    Copyright (C) 2020-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 * MockNetwork wraps the NetworkInterfaceMock to provide a declarative approach to specify
 * expected behaviors on the network and to hide the interaction with NetworkInterfaceMock.
 * We refer to the behaviors we are testing as "expectations".
 *
 * Expectations:
 * All expectations are unordered by default, unless otherwise specified (see Sequences below).
 * There are two types of expectations: default expectations and user expectations.
 * The purpose of default expectations is to cover uninteresting calls that are typically
 * repeated throughout a set of tests, so that individual tests can focus on the specific
 * behaviors they are meant to evaluate. Default expectations may be matched any number of times
 * (including zero).
 * User expectations represent the concrete requirements of a test. They must all be matched
 * the exact number of times required. For example:
 *
 *      // Earlier in the test fixture
 *      mock.defaultExpect(...); // A
 *      mock.defaultExpect(...); // B
 *
 *      ...
 *
 *      // In individual tests
 *      mock.expect(...).times(...); // C
 *      mock.expect(...).times(...); // D
 *
 *      ...
 *
 *      // Later in those tests
 *      mock.runUntilExpectationsSatisfied();
 *
 * We have no requirements here on matching A or B, but C and D must be satisfied in full.
 * You may omit the times() call if you would like to use the default of 1 "times".
 *
 * To run expectations, use runUntilExpectationsSatisfied(), which will block until all
 * expectations have been fully satisfied. You may also use runUntil() if you only want to
 * advance to a particular time. If you would like to still check that your expectations have
 * been satisfied (or explicitly demonstrate that they haven't), call verifyExpectations().
 *
 * Sequences:
 * The Sequence class provides a way to specify order of expectations. A test may have all
 * expectations in a sequence, or a subset, or none at all. It may also include any number of
 * sequences. Note that sequences only specify partial ordering, which means it is acceptable to
 * interleave other expectations in between sequence members (including expectations belonging to
 * other sequences) so long as all sequences are run in their required order. We enforce ordering
 * by refusing to match an expectation if it has unsatisfied prerequisites.
 *
 * To specify a sequence, use the InSequence RAII type, which will add all Expectations in its
 * scope to an anonymous sequence. For example:
 *
 *
 *      {
 *          MockNetwork::InSequence seq(mock);
 *
 *          mock.expect(...); // A
 *          mock.expect(...); // B
 *      }
 *
 *      mock.expect(...); // C
 *
 *
 * In this example, we only require that A comes before B. We have no requirements for when C
 * is executed. Therefore, all of {ABC, ACB, CAB} are valid, but {BAC, BCA, CBA} are not valid.
 ','line_number':59,'multiline':True]
['text':' We should only try to match an expectation if all its prerequisites in the sequence are','line_number':178,'multiline':False]
['text':' satisfied (or if it is not part of a sequence in the first place).','line_number':179,'multiline':False]
['text':' Default expectations should always match, as they cannot form sequences, and because we','line_number':180,'multiline':False]
['text':' generally have no restrictions on when and how many times they match.','line_number':181,'multiline':False]
['text':' May throw.','line_number':205,'multiline':False]
['text':' Default value, may be overriden by calling times().','line_number':219,'multiline':False]
['text':' We forbid matching if we have unsatisfied prerequisites and allow it otherwise.','line_number':223,'multiline':False]
['text':' No prerequisites at all - okay to match.','line_number':225,'multiline':False]
['text':' If this expectation's immediate prerequisite is satisfied, that implies the','line_number':229,'multiline':False]
['text':' previous ones in the chain have also been satisfied.','line_number':230,'multiline':False]
['text':' The expectation that comes before this on in the sequence, if applicable.','line_number':247,'multiline':False]
['text':' RAII construct to handle expectations declared as part of a sequence.','line_number':271,'multiline':False]
['text':' Accept anything that Matcher's and Action's constructors allow.','line_number':288,'multiline':False]
['text':' Use expect() to mandate the exact calls each test expects. They must all be satisfied','line_number':289,'multiline':False]
['text':' or the test fails.','line_number':290,'multiline':False]
['text':' Accept anything that Matcher's and Action's constructors allow.','line_number':305,'multiline':False]
['text':' Use defaultExpect() to specify shared behavior in test fixtures. This is best for','line_number':306,'multiline':False]
['text':' uninteresting calls common to a class of tests.','line_number':307,'multiline':False]
['text':' For these reasons, you are not allowed to declare further default expecations after','line_number':308,'multiline':False]
['text':' having already enqueued user expectations.','line_number':309,'multiline':False]
['text':' This expectation will throw if it has not been met.','line_number':327,'multiline':False]
['text':' Removes user expectations only.','line_number':332,'multiline':False]
['text':' Carries over default expectations but clears user expectations. Checks that the latter','line_number':340,'multiline':False]
['text':' have all been satisfied in the process.','line_number':341,'multiline':False]
['text':' May throw.','line_number':343,'multiline':False]
['text':' Advance time to the target. Run network operations and process requests along the way.','line_number':349,'multiline':False]
['text':' Run until both the executor and the network are idle. Otherwise, it hangs forever.','line_number':352,'multiline':False]
['text':' Run until both the executor and the network are idle and all expectations are satisfied.','line_number':355,'multiline':False]
['text':' Otherwise, it hangs forever.','line_number':356,'multiline':False]
['text':' namespace mock','line_number':367,'multiline':False]
['text':' namespace test','line_number':368,'multiline':False]
['text':' namespace mongo','line_number':369,'multiline':False]
