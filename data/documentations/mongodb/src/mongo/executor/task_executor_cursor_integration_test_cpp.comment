['text':'*
 *    Copyright (C) 2019-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' Test that we can actually use a TaskExecutorCursor to read multiple batches from a remote host.','line_number':147,'multiline':False]
['text':' Test that we can actually use a TaskExecutorCursor that pins it's connection to read multiple','line_number':174,'multiline':False]
['text':' batches from a remote host.','line_number':175,'multiline':False]
['text':' Test that when a TaskExecutorCursor is used in pinning-mode, the pinned executor's destruction','line_number':203,'multiline':False]
['text':' is scheduled on the underlying executor.','line_number':204,'multiline':False]
['text':' Fetch a documents to make sure the TEC was initialized properly.','line_number':224,'multiline':False]
['text':' Enable the failpoint in the integration test process.','line_number':226,'multiline':False]
['text':' Destroy the TEC and ensure we reach the code block that will destroy the pinned executor.','line_number':230,'multiline':False]
['text':' Allow the pinned executor's destruction to proceed.','line_number':235,'multiline':False]
['text':'*
 * Verifies that the underlying connection used to run `getMore` commands remains open, even after
 * the instance of `TaskExecutorCursor` is destroyed.
 *
 * The test goes through the following steps:
 * - Load test data into "test.test".
 * - Make sure there are enough connections to run the test.
 * - Configure a fail-point to block the initial `getMore` that populates the cursor.
 * - Create an instance of `TaskExecutorCursor`. The executor will send out an asynchronous
 *   `getMore` to populate the cursor, but the command does not return so long as the fail-point
 *   is enabled.
 * - Count the total number of connections available before destroying `TaskExecutorCursor`.
 * - Destroy the instance of `TaskExecutorCursor`, disable the fail-point, and wait for all
 *   connections to become idle.
 * - Recount the number of connections and verify that no connection is closed.
 *
 * See SERVER-65317 for more context.
 ','line_number':238,'multiline':True]
['text':' We only need at most four connections to run this test, which will run the following','line_number':269,'multiline':False]
['text':' commands: `find`, `getMore`, `killCursor`, and `configureFailPoint`. Thus, the rest of this','line_number':270,'multiline':False]
['text':' test won't need to create new connections and the number of open connections should remain','line_number':271,'multiline':False]
['text':' unchanged.','line_number':272,'multiline':False]
['text':' At least one of the connections is busy running the initial `getMore` command to populate','line_number':321,'multiline':False]
['text':' the cursor. The command is blocked on the remote host and does not return until after the','line_number':322,'multiline':False]
['text':' destructor for `tec` returns.','line_number':323,'multiline':False]
['text':' Wait for all connections to become idle -- this ensures all tasks scheduled as part of','line_number':328,'multiline':False]
['text':' cleaning up `tec` have finished running.','line_number':329,'multiline':False]
['text':' Verify that no connection is created or closed.','line_number':340,'multiline':False]
['text':' namespace','line_number':345,'multiline':False]
['text':' namespace executor','line_number':346,'multiline':False]
['text':' namespace mongo','line_number':347,'multiline':False]
