['text':'*
 *    Copyright (C) 2022-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 * This header provides an API of `sendCommand(...)` functions that can be used to asynchronously
 * invoke well-typed commands on a remote node. Each takes an IDL-defined or similarly specified
 * command type as argument, and invokes it on a remote node, internally handling targeting
 * the remote node, cancellation, and performing retries as needed according to rules provided by
 * arguments. Each function returns a future containing the response to the command, parsed into the
 * response-type provided. See the function comments below for details.
 ','line_number':78,'multiline':True]
['text':'*
 * Contains generic argument fields that can be part of any command request, separated based on
 * whether fields are part of the stable API. The generic arguments are generated from
 * '../idl/generic_args_with_types.idl'.
 ','line_number':89,'multiline':True]
['text':'*
 * The response type used by `sendCommand(...)`  functions, containing the typed response to the
 * command as well as the host it was run on
 ','line_number':102,'multiline':True]
['text':'*
 * 'void'.
 * The response type used by `sendCommand(...)` functions if the return type of the command is
 ','line_number':114,'multiline':True]
['text':'*
 * Details used internally by the API. Users of the API can skip the code in this namespace
 * and proceed to the `sendCommand(...)` functions below.
 ','line_number':158,'multiline':True]
['text':'*
 * The AsyncRPCRunner class stores the implementation details used by the free function
 * async_rpc::sendCommand defined below. It takes a command and runs it on the provided
 * HostAndPort/database name asynchronously, using the given executor. It keeps the executor alive
 * for the duration of the command's execution; to cancel the command's execution, use the provided
 * cancellation token.
 *
 * This is *not* part of the public API, and is deliberately in the detail namespace. Use the
 * async_rpc::sendCommand free-function/public API below instead, which contains
 * additional functionality and type checking.
 ','line_number':169,'multiline':True]
['text':'*
 * Returns a RemoteCommandExecutionError with ErrorExtraInfo populated to contain
 * details about any error, local or remote, contained in `r`.
 ','line_number':213,'multiline':True]
['text':'*
 * Adaptor that allows a RetryPolicy to be used with AsyncTry::withBackoffBetweenIterations.
 ','line_number':227,'multiline':True]
['text':' Execute the command after extracting the db name and bson from the CommandType.','line_number':273,'multiline':False]
['text':' Wrapping this function allows us to separate the CommandType parsing logic from the','line_number':274,'multiline':False]
['text':' implementation details of executing the remote command asynchronously.','line_number':275,'multiline':False]
['text':' We go inline here to intercept executor-shutdown errors and re-write them','line_number':309,'multiline':False]
['text':' so that the API always returns RemoteCommandExecutionError.','line_number':310,'multiline':False]
['text':' Failing here indicates that an IDL struct type may be incorrectly defined','line_number':317,'multiline':False]
['text':' and we were unable to parse a generic reply field from the response.','line_number':318,'multiline':False]
['text':' The API implementation guarantees that all errors are provided as','line_number':323,'multiline':False]
['text':' RemoteCommandExecutionError, so if we've reached this code, it means that the API','line_number':324,'multiline':False]
['text':' internals were unable to run due to executor shutdown. Today, the only guarantee','line_number':325,'multiline':False]
['text':' we can make about an executor-shutdown error is that it is in the cancellation','line_number':326,'multiline':False]
['text':' category. We dassert that this is the case to make it easy to find errors in the','line_number':327,'multiline':False]
['text':' API implementation's error-handling while still ensuring that we always return','line_number':328,'multiline':False]
['text':' the correct error code in production.','line_number':329,'multiline':False]
['text':' namespace detail','line_number':336,'multiline':False]
['text':' namespace','line_number':344,'multiline':False]
['text':'*
 * Execute the command asynchronously on the given target with the provided executor.
 *
 * The command type specified must have a `toBSON(BSONObj)` member function that transforms the
 * command into BSON suitable for sending over-the-wire. It also must have a nested `Reply` type
 * with a static `Reply parseSharingOwnership(BSONObj)` member function that parses BSON recieved in
 * response to the command into the `Reply` type. Note all IDL-defined command types meet these
 * requirements. Returns an ExecutorFuture with the reply from the IDL command.
 *
 * If there is any error, local or remote, while executing the command, the future is set with
 * ErrorCodes::RemoteCommandExecutionError. This is the only error returned by the API. Additional
 * information about the error, such as its provenance, code, whether it was a command-error or
 * write{concern}error, etc, is available in the ExtraInfo object attached to the error. See
 * async_rpc_error_info.h for details.
 *
 * Cancelling the source associated with the provided token will cancel any outstanding RPC work.
 * The `targeter` and optional `retryPolicy` arguments allow you to specify how to target the
 * command and when to retry it; see the class comments for those arguments for details. The default
 * retry policy is to not do any retries.
 *
 * The `opCtx` argument is used by NetworkEgressMetadataHooks to append operation-specific metadata
 * (i.e. potential cluster-time ticking). (TODO: SERVER-70191) Additionally, if the `opCtx` has an
 * attached baton, the baton may be used to run portions of the commands targeting logic and/or
 * retry logic, as well as process the network response.
 ','line_number':346,'multiline':True]
['text':'*
 * This function operates the same to `sendCommand` above, but without taking an operation context.
 * It therefore does not append operation/client specific metadata via NetworkEgressMetadataHooks,
 * and all work runs on the provided executor.
 ','line_number':384,'multiline':True]
['text':' Execute the command after extracting the db name and bson from the CommandType.','line_number':394,'multiline':False]
['text':' Wrapping this function allows us to separate the CommandType parsing logic from the','line_number':395,'multiline':False]
['text':' implementation details of executing the remote command asynchronously.','line_number':396,'multiline':False]
['text':'*
 * This overloaded version of 'sendCommand' uses ShardId instead of Targeter.
 ','line_number':405,'multiline':True]
['text':'*
 * This overloaded version of 'sendCommand' uses ConnectionString instead of Targeter.
 ','line_number':424,'multiline':True]
['text':'*
 * This overloaded version of 'sendCommand' uses MongoURI instead of Targeter.
 ','line_number':448,'multiline':True]
['text':' namespace mongo::async_rpc','line_number':458,'multiline':False]
