['text':'*
 *    Copyright (C) 2023-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 * Tests the getAllResponsesOrFirstErrorWithCancellation function returns the responses
 * of each sendCommand.
 ','line_number':68,'multiline':True]
['text':'*
 * Tests that when the getAllResponsesOrFirstErrorWithCancellation function cancels early due
 * to an error, the rest of the sendCommand functions are able to run to completion.
 ','line_number':112,'multiline':True]
['text':' Make an immediately ready future filled with an error status, intended to cancel other','line_number':127,'multiline':False]
['text':' futures.','line_number':128,'multiline':False]
['text':' runReadyNetworkOperations blocks until waitForWork is called, therefore ensuring','line_number':138,'multiline':False]
['text':' sendCommand schedules the request.','line_number':139,'multiline':False]
['text':' A ready future with an error status already exists, so the util function will','line_number':144,'multiline':False]
['text':' be able to cancel the token before the network steps below.','line_number':145,'multiline':False]
['text':' Make sure that despite cancellation, responseFut is not ready because there is still','line_number':157,'multiline':False]
['text':' a future that has not finished.','line_number':158,'multiline':False]
['text':' Process the cancellation, which should result in the second future returning','line_number':161,'multiline':False]
['text':' CallbackCancelled.','line_number':162,'multiline':False]
['text':'*
 * Test that responses from getAllResponsesOrFirstErrorWithCancellation are still processed, and
 * the appropriate cancellation actions are still taken, if the executor rejects the work of
 * processing the response. ','line_number':177,'multiline':True]
['text':' Set up a find command to schedule.','line_number':186,'multiline':False]
['text':' Set up an executor that rejects work that is scheduled.','line_number':193,'multiline':False]
['text':' Try and send a find command and store the result future.','line_number':200,'multiline':False]
['text':' We expect to the promise to get resolved even if the executor is rejecteding work.','line_number':212,'multiline':False]
['text':' We also expect that the helper utility has canceled all other work, now that the executor','line_number':218,'multiline':False]
['text':' has rejected work.','line_number':219,'multiline':False]
['text':' namespace','line_number':223,'multiline':False]
['text':' namespace async_rpc','line_number':224,'multiline':False]
['text':' namespace mongo','line_number':225,'multiline':False]
