['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' IWYU pragma: keep','line_number':41,'multiline':False]
['text':'*
 * The TransportLayer moves Messages between transport::Endpoints and the database.
 * This class owns an Acceptor that generates new endpoints from which it can
 * source Messages.
 *
 * The TransportLayer creates Session objects and maps them internally to
 * endpoints. New Sessions are passed to the database (via a ServiceEntryPoint)
 * to be run. The database must then call additional methods on the TransportLayer
 * to manage the Session in a get-Message, handle-Message, return-Message cycle.
 * It must do this on its own thread(s).
 *
 * References to the TransportLayer should be stored on service context objects.
 ','line_number':72,'multiline':True]
['text':'*
     * Start the TransportLayer. After this point, the TransportLayer will begin accepting active
     * sessions from new transport::Endpoints.
     ','line_number':114,'multiline':True]
['text':'*
     * Shut the TransportLayer down. After this point, the TransportLayer will
     * end all active sessions and won't accept new transport::Endpoints. Any
     * future calls to wait() or asyncWait() will fail. This method is synchronous and
     * will not return until all sessions have ended and any network connections have been
     * closed.
     ','line_number':120,'multiline':True]
['text':'*
     * Stop accepting new sessions.
     ','line_number':129,'multiline':True]
['text':'*
     * Optional method for subclasses to setup their state before being ready to accept
     * connections.
     ','line_number':134,'multiline':True]
['text':'* Allows a `TransportLayer` to contribute to a serverStatus readout. ','line_number':140,'multiline':True]
['text':'* Allows a `TransportLayer` to contribute to a FTDC readout. ','line_number':143,'multiline':True]
['text':'*
     * Return the session manager, if any, associated with this TransportLayer.
     ','line_number':155,'multiline':True]
['text':'* Rotate the in-use certificates for new connections. ','line_number':161,'multiline':True]
['text':'*
     * Creates a transient SSL context using targeted (non default) SSL params.
     * @param transientSSLParams overrides any value in stored SSLConnectionContext.
     * @param optionalManager provides an optional SSL manager, otherwise the default one will be
     * used.
     ','line_number':165,'multiline':True]
['text':'
     * The destructor calls cancel() to ensure outstanding Futures are filled.
     ','line_number':183,'multiline':True]
['text':'
     * Cancel any outstanding future from waitFor/waitUntil. The future will be filled with an
     * ErrorCodes::CallbackCancelled status.
     *
     * If no future is outstanding, then this is a noop.
     ','line_number':192,'multiline':True]
['text':'
     * Returns a future that will be filled with Status::OK after the deadline has passed.
     *
     * Calling this implicitly calls cancel().
     ','line_number':200,'multiline':True]
['text':'
     * Run the event loop of the reactor until stop() is called.
     ','line_number':218,'multiline':True]
['text':'
     * Makes a timer tied to this reactor's event loop. Timeout callbacks will be
     * executed in a thread calling run() or runFor().
     ','line_number':231,'multiline':True]
['text':' namespace transport','line_number':245,'multiline':False]
['text':' namespace mongo','line_number':246,'multiline':False]
