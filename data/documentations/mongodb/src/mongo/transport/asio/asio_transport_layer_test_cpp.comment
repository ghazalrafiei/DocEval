['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' Appears after the members _run uses.','line_number':177,'multiline':False]
['text':'*
 * Properly setting up and tearing down the MockSessionManager and AsioTransportLayer is
 * tricky. Most tests can delegate the details to this TestFixture.
 ','line_number':233,'multiline':True]
['text':' Linger timeout = 0 causes a RST packet on close.','line_number':307,'multiline':False]
['text':'*
 * Test that the server appropriately handles a client-side socket disconnection, and that the
 * client sends an RST packet when the socket is forcibly closed.
 ','line_number':319,'multiline':True]
['text':' Test case thread does not close socket until client thread has set options to ensure that an','line_number':334,'multiline':False]
['text':' RST packet will be set on close.','line_number':335,'multiline':False]
['text':'*
 * Test that the server successfully captures the TCP socket queue depth, and places the value both
 * into the AsioTransportLayer class and FTDC output.
 ','line_number':346,'multiline':True]
['text':' Set the listenBacklog to a parameter greater than the number of connection threads we intend','line_number':351,'multiline':False]
['text':' to create (temporarily).','line_number':352,'multiline':False]
['text':' We set the timeout to ensure that the setsockopt calls are actually made in ensureSync()','line_number':408,'multiline':False]
['text':' Synchronize with the connection thread to ensure the connection is closed only after the','line_number':412,'multiline':False]
['text':' connection thread returns from calling `setsockopt`.','line_number':413,'multiline':False]
['text':' On Mac, setsockopt will immediately throw a SocketException since the socket is closed.','line_number':417,'multiline':False]
['text':' On Linux, we will throw HostUnreachable once we try to actually read the socket.','line_number':418,'multiline':False]
['text':' We allow for either exception here.','line_number':419,'multiline':False]
['text':' check that timeouts actually time out ','line_number':426,'multiline':True]
['text':' check that timeouts don't time out unless there's an actual timeout ','line_number':438,'multiline':True]
['text':' This time we send a message','line_number':447,'multiline':False]
['text':'* Switching from timeouts to no timeouts must reset the timeout to unlimited. ','line_number':451,'multiline':True]
['text':'*
 * Create a connection and configure it with transport::tfo routines.
 ','line_number':538,'multiline':True]
['text':' Simulate a TFO system for which the initialization had produced the','line_number':576,'multiline':False]
['text':' specified configuration:','line_number':577,'multiline':False]
['text':' The TFO options were explicitly given','line_number':578,'multiline':False]
['text':' Initialization succeeded','line_number':579,'multiline':False]
['text':' Queue depth','line_number':580,'multiline':False]
['text':' Minimal test service. Consumes one `Message` from an incoming connection,','line_number':600,'multiline':False]
['text':' pushing it to the `received` queue.','line_number':601,'multiline':False]
['text':' Make one throwaway connection just to allow establishment of a TFO cookie.','line_number':606,'multiline':False]
['text':' Only really asserting that we do not unexpectedly get TFO.','line_number':622,'multiline':False]
['text':'*
 * Have `AsioTransportLayer` make a egress connection and observe behavior when
 * that connection is immediately reset by the peer. Test that if this happens
 * during the `AsioSession` constructor, that the thrown `asio::system_error`
 * is handled safely (translated to a Status holding a SocketException).
 ','line_number':643,'multiline':True]
['text':' Under TFO, no SYN is sent until the client has data to send.  For this','line_number':650,'multiline':False]
['text':' test, we need the server to respond when the client hits the failpoint','line_number':651,'multiline':False]
['text':' in the AsioSession ctor. So we have to disable TFO.','line_number':652,'multiline':False]
['text':' The `server` accepts connections, only to immediately reset them.','line_number':655,'multiline':False]
['text':' `fp` pauses the `AsioSession` constructor immediately prior to its','line_number':659,'multiline':False]
['text':' `setsockopt` sequence, to allow time for the peer reset to propagate.','line_number':660,'multiline':False]
['text':' On MacOS, calling `setsockopt` on a peer-reset connection yields an','line_number':682,'multiline':False]
['text':' `EINVAL`. On Linux and Windows, the `setsockopt` completes successfully.','line_number':683,'multiline':False]
['text':' Either is okay, but the `AsioSession` ctor caller is expected to handle','line_number':684,'multiline':False]
['text':' `asio::system_error` and convert it to `SocketException`.','line_number':685,'multiline':False]
['text':'*
 * With no regard to mongo code, just check what the ASIO socket
 * implementation does in the reset connection scenario.
 ','line_number':693,'multiline':True]
['text':' onAccept callbacks can run before the client-side connect() call returns,','line_number':704,'multiline':False]
['text':' which means there's a race between this socket closing and connect()','line_number':705,'multiline':False]
['text':' returning. We use the connected flag to prevent the race.','line_number':706,'multiline':False]
['text':' Just set any option and see what happens.','line_number':724,'multiline':False]
['text':' NOLINT','line_number':778,'multiline':False]
['text':' Verifying that it is safe to have multiple calls to `stop()`.','line_number':834,'multiline':False]
['text':' TODO SERVER-62035: enable the following on Windows.','line_number':855,'multiline':False]
['text':'*
     * Creates a server and a client thread:
     * - The server listens for incoming connections, but doesn't participate in SSL handshake.
     * - The client connects to the server, and is configured to perform SSL handshake.
     * The server never writes on the socket in response to the handshake request, thus the client
     * should block until it is timed out.
     * The goal is to simulate a server crash, and verify the behavior of the client, during the
     * handshake process.
     ','line_number':857,'multiline':True]
['text':' 1 second timeout','line_number':869,'multiline':False]
['text':' _WIN32','line_number':879,'multiline':False]
['text':' MONGO_CONFIG_SSL','line_number':880,'multiline':False]
['text':' We opted to use static ports for simplicity. If this results in test failures due to busy','line_number':884,'multiline':False]
['text':' ports, we may change the fixture, as well as the underlying transport layer, to dynamically','line_number':885,'multiline':False]
['text':' choose the listening ports.','line_number':886,'multiline':False]
['text':'*
 * Creates a connection between a client and a server, then runs tests against the
 * `AsioNetworkingBaton` associated with the server-side of the connection (i.e., `Client`). The
 * client-side of this connection is associated with `_connThread`, and the server-side is wrapped
 * inside `_client`.
 ','line_number':951,'multiline':True]
['text':'*
     * Emplaces a Promise with the first ingress session. Can optionally accept
     * further sessions, of which it takes co-ownership.
     ','line_number':959,'multiline':True]
['text':' Used for setting and canceling timers on the networking baton. Does not offer any timer','line_number':1021,'multiline':False]
['text':' functionality, and is only used for its unique id.','line_number':1022,'multiline':False]
['text':' A `JoinThread` that waits for a ready signal from its underlying worker thread before returning','line_number':1084,'multiline':False]
['text':' from its constructor.','line_number':1085,'multiline':False]
['text':' ensures the baton outlives its opCtx.','line_number':1104,'multiline':False]
['text':' detaches the baton, so it's no longer associated with an opCtx.','line_number':1110,'multiline':False]
['text':' Once the connection is closed, `sleepFor` is expected to throw this exception.','line_number':1121,'multiline':False]
['text':' Note that the baton runs all scheduled jobs on the main test thread, so it's safe to use','line_number':1127,'multiline':False]
['text':' assertions inside tasks scheduled on the baton.','line_number':1128,'multiline':False]
['text':' Schedules a task on the baton, runs `func`, and expects the baton to run the scheduled task','line_number':1132,'multiline':False]
['text':' and provide it with the `expected` status.','line_number':1133,'multiline':False]
['text':' 1) Baton runs the scheduled task when current thread blocks on `opCtx`.','line_number':1145,'multiline':False]
['text':' 2) Baton must run pending tasks on detach.','line_number':1148,'multiline':False]
['text':' 3) A detached baton immediately runs scheduled tasks.','line_number':1152,'multiline':False]
['text':' Canceling the same session again should not succeed','line_number':1170,'multiline':False]
['text':' Attempts to add and remove a session while the baton is polling. This, for example, could','line_number':1183,'multiline':False]
['text':' happen on `mongos` while an operation is blocked, waiting for `AsyncDBClient` to create an','line_number':1184,'multiline':False]
['text':' egress connection, and then the connection has to be ended for some reason before the baton','line_number':1185,'multiline':False]
['text':' returns from polling.','line_number':1186,'multiline':False]
['text':' This thread is an external observer to the baton, so the expected behavior is for','line_number':1199,'multiline':False]
['text':' `cancelSession` to happen after `addSession`, and thus it must return `true`.','line_number':1200,'multiline':False]
['text':' A second cancel should return false','line_number':1203,'multiline':False]
['text':' Exercises the case where we cancel the same session twice while blocked polling,','line_number':1212,'multiline':False]
['text':' specifically in the case where we can't run any scheduled tasks in between the two','line_number':1213,'multiline':False]
['text':' cancellations.','line_number':1214,'multiline':False]
['text':' We should be able to cancel the session, but the second attempt should return false.','line_number':1235,'multiline':False]
['text':' Try to cancel again after re-adding the timer.','line_number':1239,'multiline':False]
['text':' Let the polling thread finish polling','line_number':1245,'multiline':False]
['text':' Cancel should still return false.','line_number':1250,'multiline':False]
['text':' Check the futures all resolved to cancellation errors','line_number':1253,'multiline':False]
['text':' Exercises the underlying `wait` and `notify` functionality through `AsioNetworkingBaton::run`','line_number':1261,'multiline':False]
['text':' and `AsioNetworkingBaton::schedule`, respectively. Here is how this is done: 1) The main','line_number':1262,'multiline':False]
['text':' thread starts polling (from inside `run`) when waiting on the notification. 2) Once the main','line_number':1263,'multiline':False]
['text':' thread is ready to poll, `thread` notifies it through `baton->schedule`. 3) `schedule` calls','line_number':1264,'multiline':False]
['text':' into `notify` internally, which should interrupt the polling. 4) Once polling is interrupted,','line_number':1265,'multiline':False]
['text':' `baton` runs the scheduled job and sets the notification.','line_number':1266,'multiline':False]
['text':' Exercises the interaction between `notify()` and polling, specifically in the case where the','line_number':1282,'multiline':False]
['text':' notification occurs during polling. `thread` waits until polling has begun and then sends','line_number':1283,'multiline':False]
['text':' a notification, while the main thread verifies that `run_until()` is interrupted.','line_number':1284,'multiline':False]
['text':' Exercises the interaction between `notify()` and polling in the case where the notification','line_number':1301,'multiline':False]
['text':' occurs outside of polling.','line_number':1302,'multiline':False]
['text':' Notification prevents timeout','line_number':1307,'multiline':False]
['text':' No pre-existing notification yields a timeout','line_number':1312,'multiline':False]
['text':' This will internally call into `AsioNetworkingBaton::run()`, which will block forever (since','line_number':1326,'multiline':False]
['text':' the failpoint is enabled) if the baton starts polling.','line_number':1327,'multiline':False]
['text':' Use the ReactorTimer-accepting overload of waitUntil','line_number':1341,'multiline':False]
['text':' Batons use the precise clock source internally. We use the current time (i.e., `now()`)','line_number':1343,'multiline':False]
['text':' as the deadline to schedule an expired timer on the baton.','line_number':1344,'multiline':False]
['text':' Do the same but with the CancellationToken-accepting overload of waitUntil','line_number':1349,'multiline':False]
['text':' We expect this assertion to be evaluated before the deadline is reached.','line_number':1362,'multiline':False]
['text':' Now wait until we reach the deadline. Since we wait on the baton's associated','line_number':1364,'multiline':False]
['text':' opCtx, the baton's run() function should be invoked, and the','line_number':1365,'multiline':False]
['text':' baton should be woken up to fire the timer and ready `fut` at the deadline.','line_number':1366,'multiline':False]
['text':' Canceling the same timer again should not succeed','line_number':1413,'multiline':False]
['text':' This thread is an external observer to the baton, so the expected behavior is for','line_number':1436,'multiline':False]
['text':' `cancelTimer` to happen after `waitUntil`, thus canceling the timer must return `true`.','line_number':1437,'multiline':False]
['text':' Exercises the case where we cancel the same timer twice while blocked polling,','line_number':1447,'multiline':False]
['text':' specifically in the case where we can't run any scheduled tasks in between the two','line_number':1448,'multiline':False]
['text':' cancellations.','line_number':1449,'multiline':False]
['text':' We should be able to cancel the timer. A second attempt should return false','line_number':1470,'multiline':False]
['text':' Try to cancel again after re-adding the timer','line_number':1474,'multiline':False]
['text':' Let the polling thread finish polling','line_number':1480,'multiline':False]
['text':' We should still get false from cancel','line_number':1485,'multiline':False]
['text':' Check the futures resolved to cancellation errors','line_number':1488,'multiline':False]
['text':' This could be considered a test for either `AsioSession` or `AsioNetworkingBaton`, as it's','line_number':1546,'multiline':False]
['text':' testing the interaction between the two when `AsioSession` calls `addSession` and','line_number':1547,'multiline':False]
['text':' `cancelAsyncOperations` on the networking baton. This is currently added to the','line_number':1548,'multiline':False]
['text':' `EgressAsioNetworkingBatonTest` fixture to utilize the existing infrastructure.','line_number':1549,'multiline':False]
['text':' Blocks the main thread as it schedules an opportunistic read, but before it starts','line_number':1554,'multiline':False]
['text':' polling on the networking baton. Then it cancels the operation before unblocking the main','line_number':1555,'multiline':False]
['text':' thread.','line_number':1556,'multiline':False]
['text':' Capturing `session` is necessary as parts of this continuation run at fixture','line_number':1580,'multiline':False]
['text':' destruction.','line_number':1581,'multiline':False]
['text':' Destroying the `opCtx` results in detaching the baton. At this point, the thread running','line_number':1589,'multiline':False]
['text':' `asyncSourceMessage` has acquired the mutex that orders asynchronous operations (i.e.,','line_number':1590,'multiline':False]
['text':' `asyncOpMutex`) and is blocked by `fp`. Once we return from this function, that thread is','line_number':1591,'multiline':False]
['text':' unblocked and will run `Baton::addSession` on a detached baton.','line_number':1592,'multiline':False]
['text':' __linux__','line_number':1596,'multiline':False]
['text':' namespace','line_number':1598,'multiline':False]
['text':' namespace mongo::transport','line_number':1599,'multiline':False]
