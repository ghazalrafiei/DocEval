['text':'*
 *    Copyright (C) 2023-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 * Placeholder wire version constant corresponding to the first wire version that supports using
 * gRPC.
 * TODO SERVER-78614: Move this to the WireVersion enum closer to the initial release containing
 * gRPC support.
 ','line_number':43,'multiline':True]
['text':' Server-provided metadata keys.','line_number':56,'multiline':False]
['text':' This is defined as a std::string instead of StringData to avoid having to copy it when passing to','line_number':57,'multiline':False]
['text':' gRPC APIs that expect a const std::string&.','line_number':58,'multiline':False]
['text':' Client-provided metadata keys.','line_number':61,'multiline':False]
['text':' namespace constants','line_number':66,'multiline':False]
['text':'*
 * Parse a PEM-encoded file that contains a single certificate and its associated private key
 * into a PemKeyCertPair.
 ','line_number':68,'multiline':True]
['text':'*
 * Converts a Mongo URI into a gRPC formatted string.
 ','line_number':74,'multiline':True]
['text':' See: https://grpc.github.io/grpc/cpp/md_doc_naming.html','line_number':79,'multiline':False]
['text':'*
 * Parses a gRPC-formatted URI to a HostAndPort, throwing an exception on failure.
 * See: https://grpc.github.io/grpc/cpp/md_doc_naming.html
 ','line_number':84,'multiline':True]
['text':'*
 * Converts a gRPC status code into its corresponding MongoDB error code.
 ','line_number':90,'multiline':True]
['text':'*
 * Converts a MongoDB error code into its corresponding gRPC status code.
 * Note that the mapping between gRPC status codes and MongoDB errors codes is not 1 to 1, so the
 * following does not have to evaluate to true:
 * `errorToStatusCode(statusToErrorCode(sc)) == sc`
 ','line_number':95,'multiline':True]
['text':'*
 * Converts a MongoDB status to its gRPC counterpart, and vice versa.
 * Prefer using this over direct invocations of `errorToStatusCode` and `statusToErrorCode`.
 ','line_number':103,'multiline':True]
['text':' namespace mongo::transport::grpc::util','line_number':117,'multiline':False]
