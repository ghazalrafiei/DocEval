['text':'*
 *    Copyright (C) 2023-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
     * Close the stream and send the final return status of the RPC to the client. This is the
     * mocked equivalent of returning a status from an RPC handler.
     *
     * The RPC's stream must not be used after calling this method.
     * This method must only be called once.
     ','line_number':49,'multiline':True]
['text':'*
     * Cancel the RPC with the provided status. This is used for mocking situations in which an RPC
     * handler was never able to return a final status to the client (e.g. network interruption).
     *
     * For mocking an explicit server-side cancellation, use serverCtx->tryCancel().
     * This method has no effect if the RPC has already been terminated, either by returning a
     * status or prior cancellation.
     ','line_number':60,'multiline':True]
['text':'*
     * Starts up a thread that listens for incoming RPCs and then returns immediately.
     * The listener thread will spawn a new thread for each RPC it receives and pass it to the
     * provided handler.
     *
     * The provided handler is expected to throw assertion exceptions, hence the use of
     * ThreadAssertionMonitor to spawn threads here.
     *
     * The provided WireVersionProvider will be used to determine the cluster's maxWireVersion
     * server-side. To test functionality related to the wire version gossiping, a
     * MockWireVersionProvider can be used instead of the regular WireVersionProvider.
     ','line_number':97,'multiline':True]
['text':'*
     * Close the mocked channel and then block until all RPC handler threads (if any) have exited.
     ','line_number':144,'multiline':True]
['text':' namespace mongo::transport::grpc','line_number':236,'multiline':False]
