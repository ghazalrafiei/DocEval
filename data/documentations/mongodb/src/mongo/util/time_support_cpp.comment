['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' IWYU pragma: no_include "bits/types/struct_tm.h"','line_number':35,'multiline':False]
['text':' IWYU pragma: keep','line_number':41,'multiline':False]
['text':' Some versions of Solaris do not have timegm defined, so fall back to our implementation when','line_number':69,'multiline':False]
['text':' building on Solaris.  See SERVER-13446.','line_number':70,'multiline':False]
['text':' If curTime is different than old last now, unconditionally try to cas it to the new value.','line_number':82,'multiline':False]
['text':' This is an optimization to avoid performing stores for multiple clock reads in the same','line_number':83,'multiline':False]
['text':' millisecond.','line_number':84,'multiline':False]
['text':'','line_number':85,'multiline':False]
['text':' It's important that this is a non-equality (rather than a >), so that we avoid stalling time','line_number':86,'multiline':False]
['text':' if someone moves the system clock backwards.','line_number':87,'multiline':False]
['text':' If we fail to comp exchange, it means someone else concurrently called Date_t::now(), in','line_number':89,'multiline':False]
['text':' which case it's likely their time is also recent.  It's important that we don't loop so','line_number':90,'multiline':False]
['text':' that we avoid forcing time backwards if we have multiple callers at a millisecond','line_number':91,'multiline':False]
['text':' boundary.','line_number':92,'multiline':False]
['text':' "2038-01-19T03:14:07Z"','line_number':111,'multiline':False]
['text':' "3000-12-31T23:59:59Z"','line_number':113,'multiline':False]
['text':' jsTime_virtual_skew is just for testing. a test command manipulates it.','line_number':118,'multiline':False]
['text':' Windows docs say it doesn't support these, but empirically it seems to work','line_number':138,'multiline':False]
['text':' Windows docs say it doesn't support these, but empirically it seems to work','line_number':157,'multiline':False]
['text':' skip day of week','line_number':166,'multiline':False]
['text':' Produces a UTC datetime string suitable for use in filenames.','line_number':173,'multiline':False]
['text':' NOTE(schwerin): The value stored by _get_timezone is the value one adds to local time','line_number':212,'multiline':False]
['text':' to get UTC.  This is opposite of the ISO-8601 meaning of the timezone offset.','line_number':213,'multiline':False]
['text':' NOTE(schwerin): Microsoft's timezone code always assumes US rules for daylight','line_number':214,'multiline':False]
['text':' savings time.  We can do no better without completely reimplementing localtime_s and','line_number':215,'multiline':False]
['text':' related time library functions.','line_number':216,'multiline':False]
['text':' "+hh:mm"','line_number':229,'multiline':False]
['text':' ISO 8601 requires the timezone to be in hh:mm format which strftime can't produce','line_number':238,'multiline':False]
['text':' See https://tools.ietf.org/html/rfc3339#section-5.6','line_number':239,'multiline':False]
['text':' cur will be written as +hhmm:, transform to +hh:mm','line_number':241,'multiline':False]
['text':' "Wed Jun 30 21:49:08 1993\n" // full asctime/ctime format','line_number':256,'multiline':False]
['text':' "Wed Jun 30 21:49:08"        // clip after position 19.','line_number':257,'multiline':False]
['text':' "Wed Jun 30 21:49:08.996"    // append millis','line_number':258,'multiline':False]
['text':'  12345678901234567890123456','line_number':259,'multiline':False]
['text':' Windows docs say it doesn't support these, but empirically it seems to work','line_number':270,'multiline':False]
['text':' Microseconds between 1601-01-01 00:00:00 UTC and 1970-01-01 00:00:00 UTC','line_number':293,'multiline':False]
['text':' Construct a 64 bit value that is the number of nanoseconds from the','line_number':296,'multiline':False]
['text':' Windows epoch which is 1601-01-01 00:00:00 UTC','line_number':297,'multiline':False]
['text':' FILETIME is 100's of nanoseconds since Windows epoch','line_number':301,'multiline':False]
['text':' Move it from micros since the Windows epoch to micros since the Unix epoch','line_number':304,'multiline':False]
['text':' substr just returns the rest of the string if the length passed in is greater than the','line_number':329,'multiline':False]
['text':' number of characters remaining, and since std::string::npos is the length of the largest','line_number':330,'multiline':False]
['text':' possible string we know (std::string::npos - startIndex) is at least as long as the rest','line_number':331,'multiline':False]
['text':' of the string.  That means this handles both the case where we hit a terminating','line_number':332,'multiline':False]
['text':' character and we want a substring, and the case where didn't and just want the rest of','line_number':333,'multiline':False]
['text':' the string.','line_number':334,'multiline':False]
['text':' Check to make sure that the string only consists of digits','line_number':339,'multiline':False]
['text':' See https://tools.ietf.org/html/rfc3339#section-5.6','line_number':362,'multiline':False]
['text':' Parse the hours component of the time zone offset.  Note that','line_number':372,'multiline':False]
['text':' NumberParser correctly handles the sign bit, so leave that in.','line_number':373,'multiline':False]
['text':' Use the sign that NumberParser::parse found to determine if we need to','line_number':401,'multiline':False]
['text':' flip the sign of our minutes component.  Also, we need to flip the sign of our','line_number':402,'multiline':False]
['text':' final result, because the offset passed in by the user represents how far off the','line_number':403,'multiline':False]
['text':' time they are giving us is from UTC, which means that we have to go the opposite','line_number':404,'multiline':False]
['text':' way to compensate and get the UTC time','line_number':405,'multiline':False]
['text':' Disallow adjustiment of 24 hours or more in either direction (should be checked','line_number':409,'multiline':False]
['text':' above as the separate components of minutes and hours)','line_number':410,'multiline':False]
['text':' Treat the digits differently depending on how many there are.  1 digit = hundreds of','line_number':441,'multiline':False]
['text':' milliseconds, 2 digits = tens of milliseconds, 3 digits = milliseconds.','line_number':442,'multiline':False]
['text':' Parse year','line_number':471,'multiline':False]
['text':' Parse month','line_number':491,'multiline':False]
['text':' Parse day','line_number':511,'multiline':False]
['text':' Parse hour','line_number':529,'multiline':False]
['text':' Parse minute','line_number':547,'multiline':False]
['text':' Parse second if it exists','line_number':565,'multiline':False]
['text':' Only look for seconds if the character we matched for the end of the minutes token is a','line_number':607,'multiline':False]
['text':' colon','line_number':608,'multiline':False]
['text':' Make sure the string doesn't end with ":"','line_number':610,'multiline':False]
['text':' Make sure we actually got something for seconds, since here we know they are expected','line_number':620,'multiline':False]
['text':' Only look for milliseconds if the character we matched for the end of the seconds token','line_number':628,'multiline':False]
['text':' is a period','line_number':629,'multiline':False]
['text':' Make sure the string doesn't end with "."','line_number':631,'multiline':False]
['text':' Make sure we actually got something for millis, since here we know they are expected','line_number':641,'multiline':False]
['text':' Now look for the time zone specifier depending on which prefix of the time we provided','line_number':649,'multiline':False]
['text':' namespace','line_number':676,'multiline':False]
['text':' ignored ','line_number':696,'multiline':True]
['text':' Output parameter for SystemTimeToFileTime','line_number':700,'multiline':False]
['text':' the wDayOfWeek member of SYSTEMTIME is ignored by this function','line_number':703,'multiline':False]
['text':' The Windows FILETIME structure contains two parts of a 64-bit value representing the','line_number':711,'multiline':False]
['text':' number of 100-nanosecond intervals since January 1, 1601','line_number':712,'multiline':False]
['text':' There are 11644473600 seconds between the unix epoch and the windows epoch','line_number':716,'multiline':False]
['text':' 100-nanoseconds = milliseconds * 10000','line_number':717,'multiline':False]
['text':' removes the diff between 1970 and 1601','line_number':720,'multiline':False]
['text':' 1 milliseconds = 1000000 nanoseconds = 10000 100-nanosecond intervals','line_number':723,'multiline':False]
['text':' Get the current time','line_number':779,'multiline':False]
['text':' VM bugs exist ','line_number':784,'multiline':True]
['text':' Store the last slept time','line_number':792,'multiline':False]
['text':' Backoff logic','line_number':800,'multiline':False]
['text':' Get the time since the last error','line_number':802,'multiline':False]
['text':' If we haven't seen another error recently (3x the max wait time), reset our wait counter','line_number':805,'multiline':False]
['text':' Wait a power of two millis','line_number':809,'multiline':False]
['text':' DO NOT TOUCH except for testing','line_number':818,'multiline':False]
['text':'* Date_t is milliseconds since epoch ','line_number':834,'multiline':True]
['text':' no gettimeofday on windows','line_number':840,'multiline':False]
['text':' Windows 8/2012 & later support a <1us time function','line_number':848,'multiline':False]
['text':' Find minimum timer resolution of OS','line_number':888,'multiline':False]
['text':' see https://msdn.microsoft.com/en-us/library/windows/desktop/dd743626(v=vs.85).aspx','line_number':899,'multiline':False]
['text':' see "Mac OSX Internals: a Systems Approach" for functions and types','line_number':906,'multiline':False]
['text':' namespace mongo','line_number':948,'multiline':False]
