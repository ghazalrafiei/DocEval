['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' IWYU pragma: no_include "cxxabi.h"','line_number':35,'multiline':False]
['text':' Helper to release a lock, call a callable, and then reacquire the lock.','line_number':58,'multiline':False]
['text':' namespace interruptible_detail','line_number':65,'multiline':False]
['text':'*
 * A type which can be used to wait on condition variables with a level triggered one-way interrupt.
 * I.e. after the interrupt is triggered (via some non-public api call) subsequent calls to
 * waitForConditionXXX will fail.  Interrupts must unblock all callers of waitForConditionXXX.
 *
 * This class should never be derived from directly. Instead, please derive from Interruptible.
 ','line_number':67,'multiline':True]
['text':'*
     * Returns the deadline for this InterruptibleBase, or Date_t::max() if there is no deadline.
     ','line_number':78,'multiline':True]
['text':'*
     * Returns Status::OK() unless this operation is in a killed state.
     ','line_number':83,'multiline':True]
['text':'*
     * Same as Interruptible::waitForConditionOrInterruptUntil(), except returns
     * StatusWith<stdx::cv_status> and a non-ok status indicates the error instead of a DBException.
     ','line_number':89,'multiline':True]
['text':'*
     * Pushes a subsidiary deadline into the InterruptibleBase. Until an associated
     * popArtificialDeadline() is invoked, the InterruptibleBase will fail checkForInterrupt() and
     * waitForConditionOrInterrupt() calls with the passed error code if the deadline has passed.
     *
     * Note that deadline's higher than the current value are constrained (such that the passed
     * error code will be returned/thrown, but after the min(oldDeadline, newDeadline) has passed).
     *
     * Returns state needed to pop the deadline.
     ','line_number':102,'multiline':True]
['text':'*
     * Pops the subsidiary deadline introduced by push.
     ','line_number':114,'multiline':True]
['text':'*
     * Returns the equivalent of Date_t::now() + waitFor for the InterruptibleBase's clock
     ','line_number':119,'multiline':True]
['text':'*
 * An derived class of InterruptibleBase which provides a variety of helper functions
 *
 * Please derive from this class instead of InterruptibleBase.
 ','line_number':125,'multiline':True]
['text':'*
     * Helper class to properly set _isWaiting for Interruptible instances.
     * Every call sequence that waits on a condition/interrupt must hold an instance of WaitContext.
     ','line_number':132,'multiline':True]
['text':'*
     * A deadline guard provides a subsidiary deadline to the parent.
     ','line_number':150,'multiline':True]
['text':'*
     * Returns true if currently waiting for a condition/interrupt.
     * This function relies on instances of WaitContext to properly set _isWaiting.
     * Note that _isWaiting remains true until waitForConditionOrInterruptUntil() returns.
     ','line_number':193,'multiline':True]
['text':'*
     * Enum to convey why an Interruptible woke up
     ','line_number':202,'multiline':True]
['text':'*
     * Enum to convey if an Interruptible woke up before or after kFastWakeTimeout
     ','line_number':213,'multiline':True]
['text':'*
     * This function adds a WaitListener subclass to the triggers for certain actions.
     *
     * WaitListeners can only be added and not removed. If you wish to deactivate a WaitListeners
     * subclass, please provide the switch on that subclass to noop its functions. It is only safe
     * to add a WaitListener during a MONGO_INITIALIZER.
     ','line_number':221,'multiline':True]
['text':'*
     * Returns a statically allocated instance that cannot be interrupted.  Useful as a default
     * argument to Interruptible-taking methods.
     ','line_number':231,'multiline':True]
['text':'*
     * Invokes the passed callback with a deadline guard active initialized with the passed
     * deadline.  Additionally handles the dance of try/catching the invocation and checking
     * checkForInterrupt with the guard inactive (to allow a higher level timeout to override a
     * lower level one)
     ','line_number':237,'multiline':True]
['text':' May throw replacement exception','line_number':251,'multiline':False]
['text':'*
     * Raises a AssertionException if this operation is in a killed state.
     ','line_number':261,'multiline':True]
['text':'*
     * Get the name for a Latch
     ','line_number':268,'multiline':True]
['text':'*
     * Get a placeholder name for an arbitrary type
     ','line_number':277,'multiline':True]
['text':'*
     * Waits on condition "cv" for "pred" until "pred" returns true, or the given "deadline"
     * expires, or this operation is interrupted, or this operation's own deadline expires.
     *
     * If the operation deadline expires or the operation is interrupted, throws a DBException.  If
     * the given "deadline" expires, returns cv_status::timeout. Otherwise, returns
     * cv_status::no_timeout indicating that "pred" finally returned true.
     ','line_number':285,'multiline':True]
['text':' We drop the lock before checking for interrupt since checkForInterruptNoAssert can','line_number':307,'multiline':False]
['text':' sometimes try to reacquire the same lock.','line_number':308,'multiline':False]
['text':' If the result of waitForConditionOrInterruptNoAssertUntil() is non-spurious, return','line_number':317,'multiline':False]
['text':' a WakeReason. Otherwise, return boost::none','line_number':318,'multiline':False]
['text':' Check if an interrupt occurred while waiting.','line_number':325,'multiline':False]
['text':' Check the predicate after re-acquiring the lock.','line_number':328,'multiline':False]
['text':' Check for interrupt before waiting.','line_number':343,'multiline':False]
['text':' Check the predicate after re-acquiring the lock and before waiting.','line_number':346,'multiline':False]
['text':' Check waitUntil() in a loop until it says it has a genuine WakeReason','line_number':352,'multiline':False]
['text':' Wait for the first deadline','line_number':364,'multiline':False]
['text':' If our first wait fulfilled our predicate then return true','line_number':367,'multiline':False]
['text':' If we didn't fulfill our predicate but finalDeadline was less than traceDeadline,','line_number':370,'multiline':False]
['text':' then the wait should return false','line_number':371,'multiline':False]
['text':' Wait for the final deadline','line_number':377,'multiline':False]
['text':'*
     * Waits on condition "cv" for "pred" until "pred" returns true, or this operation
     * is interrupted or its deadline expires. Throws a DBException for interruption and
     * deadline expiration.
     ','line_number':386,'multiline':True]
['text':'*
     * Same as the predicate form of waitForConditionOrInterruptUntil, but takes a relative
     * amount of time to wait instead of an absolute time point.
     ','line_number':396,'multiline':True]
['text':'*
     * Sleeps until "deadline"; throws an exception if the Interruptible is interrupted before then.
     ','line_number':409,'multiline':True]
['text':'*
     * Sleeps for "duration" ms; throws an exception if the Interruptible is interrupted before
     * then.
     ','line_number':419,'multiline':True]
['text':' Note that state should no longer be mutated after init-time (ala MONGO_INITIALIZERS). If','line_number':441,'multiline':False]
['text':' this changes, than this state needs to be synchronized.','line_number':442,'multiline':False]
['text':'*
 * A set of event handles for an Interruptible type
 ','line_number':451,'multiline':True]
['text':'*
     * Action to do when a wait does not resolve quickly
     *
     * Any implementation of this function must be safe to invoke when an Interruptible-associated
     * latch is held. As this is hard to reason about, avoid external latches whenever possible.
     ','line_number':456,'multiline':True]
['text':'*
     * Action to do when a wait resolves after a sleep
     *
     * Any implementation of this function must be safe to invoke when an Interruptible-associated
     * latch is held. As this is hard to reason about, avoid external latches whenever possible.
     ','line_number':464,'multiline':True]
['text':' Intentionally leaked!','line_number':477,'multiline':False]
['text':'*
 * A non-interruptible type which can be used as a lightweight default arg for Interruptible-taking
 * functions.
 ','line_number':497,'multiline':True]
['text':' If the system clock's time_point's compiler-dependent resolution is higher than','line_number':511,'multiline':False]
['text':' Date_t's milliseconds, it's possible for the conversion from Date_t to time_point','line_number':512,'multiline':False]
['text':' to overflow and trigger an exception. We catch that here to maintain the noexcept','line_number':513,'multiline':False]
['text':' contract.','line_number':514,'multiline':False]
['text':' namespace mongo','line_number':548,'multiline':False]
