['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 * An OptionType is an enum of all the types we support in the OptionsParser
 *
 * NOTE(sverch): The semantics of "Switch" options are completely identical to "Bool" options,
 * except that on the command line they do not take a value.
 ','line_number':45,'multiline':True]
['text':' po::value< std::vector<std::string> >','line_number':52,'multiline':False]
['text':' po::value< std::vector<std::string> > (but in "key=value" format)','line_number':53,'multiline':False]
['text':' po::value<bool>','line_number':54,'multiline':False]
['text':' po::value<double>','line_number':55,'multiline':False]
['text':' po::value<int>','line_number':56,'multiline':False]
['text':' po::value<long>','line_number':57,'multiline':False]
['text':' po::value<std::string>','line_number':58,'multiline':False]
['text':' po::value<unsigned long long>','line_number':59,'multiline':False]
['text':' po::value<unsigned>','line_number':60,'multiline':False]
['text':' po::bool_switch','line_number':61,'multiline':False]
['text':'*
 * An OptionSources is an enum representing where an option can come from
 ','line_number':64,'multiline':True]
['text':'*
 * The OptionDescription class is a container for information about the options we are expecting
 * either on the command line or in config files.  These should be registered in an
 * OptionSection instance and passed to an OptionsParser.
 ','line_number':77,'multiline':True]
['text':'
     * The following functions are part of the chaining interface for option registration.  See
     * comments below for what each of these attributes mean, and the OptionSection class for
     * more details on the chaining interface.
     ','line_number':95,'multiline':True]
['text':'*
     * Parsing Attributes.
     *
     * The functions below specify various attributes of our option that are relevant for
     * parsing.
     ','line_number':101,'multiline':True]
['text':'
     * Make this option hidden so it does not appear in command line help
     ','line_number':108,'multiline':True]
['text':'
     * Mark this option as sensitive so that attempts by a client to read this setting
     * will only return a placeholder value rather than the real setting.
     ','line_number':113,'multiline':True]
['text':'
     * Add a default value for this option if it is not specified
     *
     * throws DBException on errors, such as trying to set a default that does not have the same
     * type as the option, or trying to set a default for a composing option.
     ','line_number':119,'multiline':True]
['text':'
     * Add an implicit value for this option if it is specified with no argument
     *
     * throws DBException on errors, such as trying to set an implicit value that does not have
     * the same type as the option, or trying to set an implicit value for a composing option.
     ','line_number':127,'multiline':True]
['text':'
     * Make this option composing so that the different sources add their values instead of
     * overriding (eg. setParameter values in the config file and on the command line all get
     * aggregated together)
     *
     * throws DBException on errors, such as trying to make an option that is not a vector type
     * composing, or or trying to set an implicit or default value for a composing option.
     ','line_number':135,'multiline':True]
['text':'
     * Specify the allowed sources for this option, such as CommandLine, JSONConfig, or
     * INIConfig.  The default is SourceAll which means the option can be present in any source
     ','line_number':145,'multiline':True]
['text':'
     * Specify that this is a positional option.  "start" should be the first position the
     * option can be found in, and "end" is the last position, inclusive.  The positions start
     * at index 1 (after the executable name).  If "start" is greater than "end", then the
     * option must be able to support multiple values.  Specifying -1 for the "end" means that
     * the option can repeat forever.  Any "holes" in the positional ranges will result in an
     * error during parsing.
     *
     * Examples:
     *
     * .positional(1,1) // Single positional argument at position 1
     * ...
     * .positional(2,3) // More positional arguments at position 2 and 3 (multivalued option)
     * ...
     * .positional(4,-1) // Can repeat this positional option forever after position 4
     *
     *
     * (sverch) TODO: When we can support it (i.e. when we can get rid of boost) add a
     * "positionalOnly" attribute that specifies that it is not also a command line flag.  In
     * boost program options, the only way to have a positional argument is to register a flag
     * and mark it as also being positional.
     ','line_number':151,'multiline':True]
['text':'*
     * Validation Constraints.
     *
     * The functions below specify constraints that must be met in order for this option to be
     * valid.  These do not get checked during parsing, but will be added to the result
     * Environment so that they will get checked when the Environment is validated.
     ','line_number':175,'multiline':True]
['text':'*
     * Specifies that this option is incompatible with another option.  The std::string provided
     * must be the dottedName, which is the name used to access the option in the result
     * Environment.
     *
     * TODO: Find a way to check that that option actually exists in our section somewhere.
     ','line_number':183,'multiline':True]
['text':'*
     * Specifies that this option is requires another option to be specified.  The string
     * provided must be the dottedName, which is the name used to access the option in the
     * result Environment.
     ','line_number':192,'multiline':True]
['text':'*
     * Specifies that this option should be canonicalized immediately after initial parse.
     * Callback may alter the contents of the setting, rename the key its stored to, etc...
     ','line_number':199,'multiline':True]
['text':'*
     * Adds a constraint for this option.  During parsing, this Constraint will be added to the
     * result Environment, ensuring that it will get checked when the environment is validated.
     * See the documentation on the Constraint and Environment classes for more details.
     *
     * WARNING: This function takes ownership of the Constraint pointer that is passed in.
     ','line_number':206,'multiline':True]
['text':' Used for JSON config and in Environment','line_number':215,'multiline':False]
['text':' Used for boost command line and INI','line_number':216,'multiline':False]
['text':' Storage type of the argument value, or switch type (bool)','line_number':217,'multiline':False]
['text':' (required by boost)','line_number':218,'multiline':False]
['text':' Description of option printed in help output','line_number':219,'multiline':False]
['text':' Visible in help output','line_number':220,'multiline':False]
['text':' Value should not be exposed to inquiry','line_number':221,'multiline':False]
['text':' Value if option is not specified','line_number':222,'multiline':False]
['text':' Value if option is specified with no argument','line_number':223,'multiline':False]
['text':' Aggregate values from different sources instead of overriding','line_number':224,'multiline':False]
['text':' Places where an option can be specified (current sources are','line_number':225,'multiline':False]
['text':' command line, json config, and ini config)','line_number':226,'multiline':False]
['text':' The starting position if this is a positional option. -1 otherwise.','line_number':227,'multiline':False]
['text':' The ending position if this is a positional option.  -1 if unlimited.','line_number':228,'multiline':False]
['text':' TODO(sverch): We have to use pointers to keep track of the Constrants because we rely on','line_number':230,'multiline':False]
['text':' inheritance to make Constraints work.  We have to use shared_ptrs because the','line_number':231,'multiline':False]
['text':' OptionDescription is sometimes copied and because it is stored in a std::list in the','line_number':232,'multiline':False]
['text':' OptionSection.  We should think about a better solution for the ownership semantics of','line_number':233,'multiline':False]
['text':' these classes.  Note that the Environment (the storage for results of option parsing) has','line_number':234,'multiline':False]
['text':' to know about the constraints for all the options, which is another factor to consider','line_number':235,'multiline':False]
['text':' when thinking about ownership.','line_number':236,'multiline':False]
['text':' Constraints that must be met','line_number':237,'multiline':False]
['text':' for this option to be valid','line_number':238,'multiline':False]
['text':' Deprecated dotted names - aliases for '_dottedName'.','line_number':240,'multiline':False]
['text':' Deprecated single names - aliases for '_singleName'.','line_number':242,'multiline':False]
['text':' Canonicalizer method.','line_number':245,'multiline':False]
['text':' namespace optionenvironment','line_number':293,'multiline':False]
['text':' namespace mongo','line_number':294,'multiline':False]
