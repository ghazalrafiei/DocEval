['text':'
  Copyright (C) 1999, 2000, 2002 Aladdin Enterprises.  All rights reserved.

  This software is provided 'as-is', without any express or implied
  warranty.  In no event will the authors be held liable for any damages
  arising from the use of this software.

  Permission is granted to anyone to use this software for any purpose,
  including commercial applications, and to alter it and redistribute it
  freely, subject to the following restrictions:

  1. The origin of this software must not be misrepresented; you must not
     claim that you wrote the original software. If you use this software
     in a product, an acknowledgment in the product documentation would be
     appreciated but is not required.
  2. Altered source versions must be plainly marked as such, and must not be
     misrepresented as being the original software.
  3. This notice may not be removed or altered from any source distribution.

  L. Peter Deutsch
  ghost@aladdin.com

 ','line_number':1,'multiline':True]
['text':' $Id: md5.c,v 1.6 2002/04/13 19:20:28 lpd Exp $ ','line_number':24,'multiline':True]
['text':'
  Independent implementation of MD5 (RFC 1321).

  This code implements the MD5 Algorithm defined in RFC 1321, whose
  text is available at
    http://www.ietf.org/rfc/rfc1321.txt
  The code is derived from the text of the RFC, including the test suite
  (section A.5) but excluding the rest of Appendix A.  It does not include
  any code or documentation that is identified in the RFC as being
  copyrighted.

  The original and principal author of md5.c is L. Peter Deutsch
  <ghost@aladdin.com>.  Other authors are noted in the change history
  that follows (in reverse chronological order):

  2002-04-13 lpd Clarified derivation from RFC 1321; now handles byte order
    either statically or dynamically; added missing #include <string.h>
    in library.
  2002-03-11 lpd Corrected argument list for main(), and added int return
    type, in test program and T value program.
  2002-02-21 lpd Added missing #include <stdio.h> in test program.
  2000-07-03 lpd Patched to eliminate warnings about "constant is
    unsigned in ANSI C, signed in traditional"; made test program
    self-checking.
  1999-11-04 lpd Edited comments slightly for automatic TOC extraction.
  1999-10-18 lpd Fixed typo in header comment (ansi2knr rather than md5).
  1999-05-03 lpd Original version.
 ','line_number':25,'multiline':True]
['text':' 1 = big-endian, -1 = little-endian, 0 = unknown ','line_number':60,'multiline':True]
['text':' 0xd76aa478 ','line_number':68,'multiline':True]
['text':' 0xe8c7b756 ','line_number':69,'multiline':True]
['text':' 0xc1bdceee ','line_number':71,'multiline':True]
['text':' 0xf57c0faf ','line_number':72,'multiline':True]
['text':' 0xa8304613 ','line_number':74,'multiline':True]
['text':' 0xfd469501 ','line_number':75,'multiline':True]
['text':' 0x8b44f7af ','line_number':77,'multiline':True]
['text':' 0xffff5bb1 ','line_number':78,'multiline':True]
['text':' 0x895cd7be ','line_number':79,'multiline':True]
['text':' 0xfd987193 ','line_number':81,'multiline':True]
['text':' 0xa679438e ','line_number':82,'multiline':True]
['text':' 0xf61e2562 ','line_number':84,'multiline':True]
['text':' 0xc040b340 ','line_number':85,'multiline':True]
['text':' 0xe9b6c7aa ','line_number':87,'multiline':True]
['text':' 0xd62f105d ','line_number':88,'multiline':True]
['text':' 0xd8a1e681 ','line_number':90,'multiline':True]
['text':' 0xe7d3fbc8 ','line_number':91,'multiline':True]
['text':' 0xc33707d6 ','line_number':93,'multiline':True]
['text':' 0xf4d50d87 ','line_number':94,'multiline':True]
['text':' 0xa9e3e905 ','line_number':96,'multiline':True]
['text':' 0xfcefa3f8 ','line_number':97,'multiline':True]
['text':' 0x8d2a4c8a ','line_number':99,'multiline':True]
['text':' 0xfffa3942 ','line_number':100,'multiline':True]
['text':' 0x8771f681 ','line_number':101,'multiline':True]
['text':' 0xfde5380c ','line_number':103,'multiline':True]
['text':' 0xa4beea44 ','line_number':104,'multiline':True]
['text':' 0xf6bb4b60 ','line_number':106,'multiline':True]
['text':' 0xbebfbc70 ','line_number':107,'multiline':True]
['text':' 0xeaa127fa ','line_number':109,'multiline':True]
['text':' 0xd4ef3085 ','line_number':110,'multiline':True]
['text':' 0xd9d4d039 ','line_number':112,'multiline':True]
['text':' 0xe6db99e5 ','line_number':113,'multiline':True]
['text':' 0xc4ac5665 ','line_number':115,'multiline':True]
['text':' 0xf4292244 ','line_number':116,'multiline':True]
['text':' 0xab9423a7 ','line_number':118,'multiline':True]
['text':' 0xfc93a039 ','line_number':119,'multiline':True]
['text':' 0x8f0ccc92 ','line_number':121,'multiline':True]
['text':' 0xffeff47d ','line_number':122,'multiline':True]
['text':' 0x85845dd1 ','line_number':123,'multiline':True]
['text':' 0xfe2ce6e0 ','line_number':125,'multiline':True]
['text':' 0xa3014314 ','line_number':126,'multiline':True]
['text':' 0xf7537e82 ','line_number':128,'multiline':True]
['text':' 0xbd3af235 ','line_number':129,'multiline':True]
['text':' 0xeb86d391 ','line_number':131,'multiline':True]
['text':'[64]','line_number':134,'multiline':True]
['text':' Define storage only for big-endian CPUs. ','line_number':138,'multiline':True]
['text':' Define storage for little-endian or both types of CPUs. ','line_number':141,'multiline':True]
['text':'
         * Determine dynamically whether this is a big-endian or
         * little-endian machine, since we can use a more efficient
         * algorithm on the latter.
         ','line_number':148,'multiline':True]
['text':' dynamic little-endian ','line_number':155,'multiline':True]
['text':' little-endian ','line_number':157,'multiline':True]
['text':'
             * On little-endian machines, we can process properly aligned
             * data without copying it.
             ','line_number':159,'multiline':True]
['text':' data are properly aligned ','line_number':164,'multiline':True]
['text':' not aligned ','line_number':167,'multiline':True]
['text':' dynamic big-endian ','line_number':174,'multiline':True]
['text':' big-endian ','line_number':176,'multiline':True]
['text':'
             * On big-endian machines, we must arrange the bytes in the
             * right order.
             ','line_number':178,'multiline':True]
['text':' (dynamic only) ','line_number':186,'multiline':True]
['text':' (static only) ','line_number':188,'multiline':True]
['text':' Round 1. ','line_number':198,'multiline':True]
['text':' Let [abcd k s i] denote the operation
   a = b + ((a + F(b,c,d) + X[k] + T[i]) <<< s). ','line_number':199,'multiline':True]
['text':' Do the following 16 operations. ','line_number':205,'multiline':True]
['text':' Round 2. ','line_number':224,'multiline':True]
['text':' Let [abcd k s i] denote the operation
     a = b + ((a + G(b,c,d) + X[k] + T[i]) <<< s). ','line_number':225,'multiline':True]
['text':' Do the following 16 operations. ','line_number':231,'multiline':True]
['text':' Round 3. ','line_number':250,'multiline':True]
['text':' Let [abcd k s t] denote the operation
     a = b + ((a + H(b,c,d) + X[k] + T[i]) <<< s). ','line_number':251,'multiline':True]
['text':' Do the following 16 operations. ','line_number':257,'multiline':True]
['text':' Round 4. ','line_number':276,'multiline':True]
['text':' Let [abcd k s t] denote the operation
     a = b + ((a + I(b,c,d) + X[k] + T[i]) <<< s). ','line_number':277,'multiline':True]
['text':' Do the following 16 operations. ','line_number':283,'multiline':True]
['text':' Then perform the following additions. (That is increment each
       of the four registers by the value it had before this block
       was started.) ','line_number':302,'multiline':True]
['text':'0xefcdab89','line_number':314,'multiline':True]
['text':'0x98badcfe','line_number':315,'multiline':True]
['text':' Update the message length. ','line_number':328,'multiline':True]
['text':' Process an initial partial block. ','line_number':334,'multiline':True]
['text':' Process full blocks. ','line_number':346,'multiline':True]
['text':' Process a final partial block. ','line_number':350,'multiline':True]
['text':' Save the length before padding. ','line_number':363,'multiline':True]
['text':' Pad to 56 bytes mod 64. ','line_number':366,'multiline':True]
['text':' Append the length. ','line_number':368,'multiline':True]
['text':' extern "C"','line_number':374,'multiline':False]
