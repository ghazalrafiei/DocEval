['text':'*
 *    Copyright (C) 2020-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 * Immutable view of a fragment of a ref-counted buffer.
 * Shares reference count with the underlying buffer.
 ','line_number':39,'multiline':True]
['text':'*
     * Returns true if this object has exclusive access to the underlying buffer.
     * (That is, reference count == 1).
     ','line_number':69,'multiline':True]
['text':'*
     * Returns the allocation size of the underlying buffer.
     ','line_number':77,'multiline':True]
['text':'*
 * Builder of SharedBufferFragment where multiple fragments are using different parts of the same
 * underlying buffer or multiple buffers. Can only build one fragment at a time.
 *
 * Warning: This builder will hold references to all allocated buffers and will not release them
 * until freeUnused() is called. Memory is not reused. This means that failing to call this function
 * will result in an unbounded amount of memory usage for the lifetime of the builder. Even after
 * this builder is destructed, SharedBufferFragments can prevent memory from being freed.
 ','line_number':90,'multiline':True]
['text':' 1MB','line_number':101,'multiline':False]
['text':' Starts building a memory fragment with at least 'initialSize' capacity.','line_number':126,'multiline':False]
['text':' May only be called if we are not currently building a fragment','line_number':127,'multiline':False]
['text':' Since there are no fragments sharing with this buffer, we can reset the offset to 0','line_number':131,'multiline':False]
['text':' to reuse unused space.','line_number':132,'multiline':False]
['text':' If the capacity is 0, this is our initial allocation and we should not use the grow','line_number':137,'multiline':False]
['text':' strategy.','line_number':138,'multiline':False]
['text':' Grows the currently building memory fragment so it will fit at least 'size' bytes.','line_number':150,'multiline':False]
['text':' May only be called when building a fragment','line_number':151,'multiline':False]
['text':' If the capacity is 0, this is our initial allocation and we should not use the grow','line_number':156,'multiline':False]
['text':' strategy.','line_number':157,'multiline':False]
['text':' Finishes building a memory fragment. 'totalSize' should indicate total of bytes used.','line_number':172,'multiline':False]
['text':' Returns a reference counted memory fragment','line_number':173,'multiline':False]
['text':' May only be called when building a fragment and will put the builder back into a 'not','line_number':174,'multiline':False]
['text':' building' state.','line_number':175,'multiline':False]
['text':' Discards the memory fragment currently building and puts the builder back into a 'not','line_number':185,'multiline':False]
['text':' building' state. May only be called when building a fragment','line_number':186,'multiline':False]
['text':' Returns the available capacity that may be used for building a memory fragment.','line_number':192,'multiline':False]
['text':' If more capacity is needed the user needs to call grow()','line_number':193,'multiline':False]
['text':' Returns the beginning of the memory fragment we are currently building','line_number':198,'multiline':False]
['text':' May only be called when building a fragment','line_number':199,'multiline':False]
['text':' Returns whether or not a memory fragment is currently being built.','line_number':205,'multiline':False]
['text':' Returns the memory used by all allocated buffers that are being tracked. This returns','line_number':210,'multiline':False]
['text':' instantaneous memory usage of all memory currently allocated, including any memory that is','line_number':211,'multiline':False]
['text':' not being used due to fragmentation in the SharedBufferFragmentBuilder.','line_number':212,'multiline':False]
['text':' Returns the cumulative memory used by all buffer memory fragments. Does not reset. This','line_number':217,'multiline':False]
['text':' excludes any unused memory due to fragmentation in the SharedBufferFragmentBuilder.','line_number':218,'multiline':False]
['text':' Frees all unreferenced buffers except for the most recently allocated one. The caller must','line_number':223,'multiline':False]
['text':' ensure that no references to any shared buffers remain to maintain useful memory usage','line_number':224,'multiline':False]
['text':' information.','line_number':225,'multiline':False]
['text':' Normally all buffers are expected to no longer be shared and can be freed immediately,','line_number':231,'multiline':False]
['text':' however, the last buffer may still be shared with the owning SharedBufferFragmentBuilder.','line_number':232,'multiline':False]
['text':' If nothing else is using the internal buffer it would be safe to use realloc. But as','line_number':251,'multiline':False]
['text':' this potentially is a large buffer realloc would need copy all of it as it doesn't','line_number':252,'multiline':False]
['text':' know how much is actually used. So we create a new buffer in all cases','line_number':253,'multiline':False]
['text':' When existingSize is 0 we may be in an initial alloc().','line_number':257,'multiline':False]
['text':' If this buffer is actively used somewhere, we'll need to keep a reference to it for','line_number':262,'multiline':False]
['text':' tracking memory usage since there may be other fragments that are also holding onto a','line_number':263,'multiline':False]
['text':' reference. Otherwise, we let it get freed. Callers will have to take care to clean up','line_number':264,'multiline':False]
['text':' these shared references regularly using freeUnused().','line_number':265,'multiline':False]
['text':' The current working buffer of this builder.','line_number':274,'multiline':False]
['text':' This is a list of old buffers that may still be in use by other fragments. Counts towards','line_number':281,'multiline':False]
['text':' total memory usage and buffers must be freed by calling using freeUnused() when buffers are','line_number':282,'multiline':False]
['text':' no longer needed.','line_number':283,'multiline':False]
['text':' namespace mongo','line_number':289,'multiline':False]
