['text':'*
 *    Copyright (C) 2020-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 * Holds the main state shared between CancellationSource/CancellationToken.
 *
 * CancellationState objects are held by intrusive_ptr, and the ownership of a CancellationState
 * object is shared between all CancellationSource objects and CancellationToken objects which point
 * to it.
 *
 * When the last CancellationSource that points to a CancellationState object is destroyed,
 * CancellationState::dismiss() is called, which sets an error on its cancellation promise if
 * CancellationState::cancel() has not already been called. This serves to clean up the memory for
 * all callbacks associated with that promise once it is no longer possible for cancel() to be
 * called on the source.
 ','line_number':58,'multiline':True]
['text':'*
     * Returns true if neither cancel() nor dismiss() has been called.
     ','line_number':111,'multiline':True]
['text':'*
     * Tracks whether dismiss/cancel has been called.
     ','line_number':119,'multiline':True]
['text':'*
     * A promise that will be signaled with success when cancel() is called and with an error when
     * dismiss() is called.
     ','line_number':124,'multiline':True]
['text':'*
 * Wrapper around an intrusive_ptr<CancellationState> which, when destroyed, dismisses the
 * CancellationState. These used to track how many CancellationSource objects point to the same
 * CancellationState and call dismiss() on the CancellationState when the last CancellationSource
 * pointing to it is destroyed.
 ','line_number':131,'multiline':True]
['text':' namespace detail','line_number':159,'multiline':False]
['text':'*
 * Type used to check for cancellation of a task. Tokens are normally obtained through an associated
 * CancellationSource by calling CancellationSource::token(), but an uncancelable token can also be
 * constructed by using the CancellationToken::uncancelable() static factory function.
 ','line_number':161,'multiline':True]
['text':' Constructs an uncancelable token, i.e. a token without an associated source.','line_number':168,'multiline':False]
['text':' Make the state uncancelable.','line_number':171,'multiline':False]
['text':'*
     * Returns whether or not cancel() has been called on the CancellationSource object from which
     * this token was constructed.
     ','line_number':187,'multiline':True]
['text':'*
     * Returns a future that will be resolved with success when cancel() has been called on the
     * CancellationSource object from which this token was constructed, or with an error containing
     * CallbackCanceled if that CancellationSource object is destroyed without having cancel()
     * called on it.
     ','line_number':195,'multiline':True]
['text':'*
     * Returns false if this token was constructed using the uncancelable() factory function or if
     * its associated source was destroyed without being canceled.
     ','line_number':205,'multiline':True]
['text':'*
     * Points to the object containing the status of cancellation.
     ','line_number':214,'multiline':True]
['text':'*
 * Type used to manage the cancellation of a task. CancellationSource is used to cancel a task, and
 * CancellationTokens obtained via CancellationSource::token() are used to check for and handle
 * cancellation.
 ','line_number':220,'multiline':True]
['text':'*
     * Creates a CancellationSource that will be canceled when the input token is canceled. This
     * allows the construction of cancellation hierarchies.
     *
     * For example, if we have:
     *
     * CancellationSource first;
     * CancellationSource second(first.token());
     * CancellationSource third(second.token());
     *
     * Calling third.cancel() will only cancel tokens obtained from third.
     * Calling second.cancel() will cancel tokens obtained from second, and call third.cancel().
     * Calling first.cancel() will thus cancel the whole hierarchy.
     ','line_number':228,'multiline':True]
['text':' Cancel the source when the input token is canceled.','line_number':243,'multiline':False]
['text':'','line_number':244,'multiline':False]
['text':' Note that because this captures the CancellationState object directly, and not the','line_number':245,'multiline':False]
['text':' CancellationStateHolder, this will still allow callback state attached to this','line_number':246,'multiline':False]
['text':' source's tokens to be cleaned up as soon as the last source is destroyed, even if the','line_number':247,'multiline':False]
['text':' parent token still exists.. This means that long-lived tokens can have many sub-sources','line_number':248,'multiline':False]
['text':' for tasks which start and complete without worrying about too much memory build-up.','line_number':249,'multiline':False]
['text':'*
     * Destroys shared state associated with any tokens obtained from this source, and does not run
     * cancellation callbacks.
     ','line_number':256,'multiline':True]
['text':'*
     * Cancel the token. If no call to cancel has previously been made, this will cause all
     * callbacks chained to this token via the onCancel future to be run. Otherwise, does nothing.
     ','line_number':268,'multiline':True]
['text':'*
     * Returns a CancellationToken which will be canceled when this source is
     * canceled.
     ','line_number':276,'multiline':True]
['text':' namespace mongo','line_number':289,'multiline':False]
