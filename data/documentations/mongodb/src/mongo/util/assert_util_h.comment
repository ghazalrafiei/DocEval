['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' IWYU pragma: export','line_number':53,'multiline':False]
['text':'* Most mongo exceptions inherit from this; this is commonly caught in most threads ','line_number':79,'multiline':True]
['text':'*
     * Returns true if this DBException's code is a member of the given category.
     ','line_number':117,'multiline':True]
['text':'*
     * Returns the generic ErrorExtraInfo if present.
     ','line_number':125,'multiline':True]
['text':'*
     * Returns a specific subclass of ErrorExtraInfo if the error code matches that type.
     ','line_number':132,'multiline':True]
['text':'*
     * Allows handling `ErrorCodes::WriteConflict` as a special case and if true, will call
     * `printStackTrace` on every `WriteConflict` error. Can be set via the
     * `traceWriteConflictExceptions` server parameter.
     ','line_number':142,'multiline':True]
['text':'*
     * This method exists only to make all non-final types in this hierarchy abstract to prevent
     * accidental slicing.
     ','line_number':158,'multiline':True]
['text':'*
 * Encompasses a class of exceptions due to lack of resources or conflicting resources. Can be used
 * to conveniently catch all derived exceptions instead of enumerating each of them individually.
 ','line_number':172,'multiline':True]
['text':'*
 * Use `throwWriteConflictException()` instead of throwing `WriteConflictException` directly.
 ','line_number':181,'multiline':True]
['text':'*
 * Use `throwTemporarilyUnavailableException()` instead of throwing
 * `TemporarilyUnavailableException` directly.
 ','line_number':192,'multiline':True]
['text':'*
 * Use `throwTransactionTooLargeForCache()` instead of throwing
 * `TransactionTooLargeForCache` directly.
 ','line_number':204,'multiline':True]
['text':'*
 * The base class of all DBExceptions for codes of the given ErrorCategory to allow catching by
 * category.
 ','line_number':218,'multiline':True]
['text':' This will only be called by subclasses, and they are required to instantiate','line_number':225,'multiline':False]
['text':' AssertionException themselves since it is a virtual base. Therefore, the AssertionException','line_number':226,'multiline':False]
['text':' construction here should never actually execute, but it is required to be present to allow','line_number':227,'multiline':False]
['text':' subclasses to construct us.','line_number':228,'multiline':False]
['text':'*
 * This namespace contains implementation details for our error handling code and should not be used
 * directly in general code.
 ','line_number':234,'multiline':True]
['text':' This is only a template to enable SFINAE. It will only be instantiated with the default','line_number':249,'multiline':False]
['text':' value.','line_number':250,'multiline':False]
['text':' namespace error_details','line_number':286,'multiline':False]
['text':'*
 * Resolves to the concrete exception type for the given error code.
 *
 * It will be a subclass of both AssertionException, along with ExceptionForCat<> of every category
 * that the code belongs to.
 *
 * TODO in C++17 we can combine this with ExceptionForCat by doing something like:
 * template <auto codeOrCategory> using ExceptionFor = typename
 *      error_details::ExceptionForDispatcher<decltype(codeOrCategory)>::type;
 ','line_number':289,'multiline':True]
['text':' convert various types of exceptions to strings ','line_number':342,'multiline':True]
['text':'* aborts on condition failure ','line_number':354,'multiline':True]
['text':' This function exists so that uassert/massert can take plain int literals rather than requiring','line_number':412,'multiline':False]
['text':' ErrorCodes::Error wrapping.','line_number':413,'multiline':False]
['text':' namespace error_details','line_number':427,'multiline':False]
['text':'*
 * Common implementation for assert and assertFailed macros. Not for direct use.
 *
 * Using an immediately invoked lambda to give the compiler an easy way to inline the check (expr)
 * and out-of-line the error path. This is most helpful when the error path involves building a
 * complex error message in the expansion of msg. The call to the lambda is followed by
 * MONGO_COMPILER_UNREACHABLE as it is impossible to mark a lambda noreturn.
 ','line_number':429,'multiline':True]
['text':'*
 * "user assert".  if asserts, user did something wrong, not our code.
 * On failure, throws an exception.
 ','line_number':452,'multiline':True]
['text':'*
 * Like uassertStatusOK(status), but also takes an expression that evaluates to  something
 * convertible to std::string to add more context to error messages. This contextExpr is only
 * evaluated if the status is not OK.
 ','line_number':477,'multiline':True]
['text':'*
 * massert is like uassert but it logs the message before throwing.
 ','line_number':506,'multiline':True]
['text':'*< MSVC workaround ','line_number':547,'multiline':True]
['text':'*
 * `iassert` is provided as an alternative for `uassert` variants (e.g., `uassertStatusOK`)
 * to support cases where we expect a failure, the failure is recoverable, or accounting for the
 * failure, updating assertion counters, isn't desired. `iassert` logs at D3 instead of D1,
 * which helps with reducing the noise of assertions in production. The goal is to keep one
 * interface (i.e., `iassert(...)`) for all possible assertion variants, and use function
 * overloading to expand type support as needed.
 ','line_number':556,'multiline':True]
['text':'*
 * "tripwire/test assert". Like uassert, but with a deferred-fatality tripwire that gets
 * checked prior to normal shutdown. Used to ensure that this assertion will both fail the
 * operation and also cause a test suite failure.
 ','line_number':568,'multiline':True]
['text':'*
 * Return true if tripwire conditions have occurred.
 ','line_number':577,'multiline':True]
['text':'*
 * If tripwire conditions have occurred, warn via the log.
 ','line_number':582,'multiline':True]
['text':'*
 * MONGO_verify is deprecated. It is like invariant() in debug builds and massert() in release
 * builds.
 ','line_number':587,'multiline':True]
['text':'*
 * Like uassertStatusOK(status), but for checking if an invariant holds on a status.
 ','line_number':646,'multiline':True]
['text':'*
 * Similar to invariantStatusOK(status), but also takes an expression that evaluates to something
 * convertible to std::string to add more context to error messages. This contextExpr is only
 * evaluated if the status is not OK.
 ','line_number':663,'multiline':True]
['text':' some special ids that we want to duplicate','line_number':692,'multiline':False]
['text':' > 10000 asserts','line_number':694,'multiline':False]
['text':' < 10000 AssertionException','line_number':695,'multiline':False]
['text':'*
 * A utility function that converts an exception to a Status.
 * Only call this function when there is an active exception
 * (e.g. in a catch block).
 *
 * Note: this technique was created by Lisa Lippincott.
 *
 * Example usage:
 *
 *   Status myFunc() {
 *       try {
 *           funcThatThrows();
 *           return Status::OK();
 *       } catch (...) {
 *           return exceptionToStatus();
 *       }
 *   }
 ','line_number':701,'multiline':True]
['text':' namespace mongo','line_number':721,'multiline':False]
['text':'*
 * Produces an invariant failure if executed. Use when reaching this statement indicates a
 * programming error. Example:
 *     // code above checks that expr can only be FOO or BAR
 *     switch (expr) {
 *     case FOO: { ... }
 *     case BAR: { ... }
 *     default:
 *         MONGO_UNREACHABLE;
 ','line_number':745,'multiline':True]
['text':'*
 * Like `MONGO_UNREACHABLE`, but triggers a `tassert` instead of an `invariant`
 ','line_number':757,'multiline':True]
['text':'*
 * Produces an invariant failure if executed. Subset of MONGO_UNREACHABLE, but specifically
 * to indicate that the program has reached a function that is unimplemented and should be
 * unreachable from production.
 * Example:
 *
 *   void myFuncToDo() {
 *       MONGO_UNIMPLEMENTED;
 *   }
 ','line_number':762,'multiline':True]
['text':'*
 * Like `MONGO_UNIMPLEMENTED`, but triggers a `tassert` instead of an `invariant`
 ','line_number':775,'multiline':True]
['text':'*
 * A stack of auxilliary information to be dumped on invariant failure.
 * These are intended to carry only very lightweight objects like short strings
 * and numbers, to give some basic clue as to what was going on when a thread
 * suffered an invariant failure.
 ','line_number':782,'multiline':True]
['text':'* Each thread has its own stack of scoped debug info. ','line_number':815,'multiline':True]
['text':'*
 * An RAII type that attaches a datum to a ScopedDebugInfoStack, intended as a
 * broad hint as to what the thread is doing. Pops that datum at scope
 * exit. By default, attaches to the thread_local ScopedDebugInfoStack.
 * If the thread encounters a fatal error, the thread's ScopedDebugInfoStack
 * is logged.
 *
 * Example:
 *
 *     void doSomethingAsUser(const User& currentUser) {
 *         ScopedDebugInfo userNameDbg("userName", currentUser.nameStringData());
 *         ScopedDebugInfo userIdDbg("userId", currentUser.id());
 *         somethingThatMightCrash(currentUser);
 *     }
 ','line_number':821,'multiline':True]
['text':' namespace mongo','line_number':865,'multiline':False]
