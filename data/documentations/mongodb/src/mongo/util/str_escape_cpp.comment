['text':'*
 *    Copyright (C) 2019-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' Appends the bytes in the range [begin, end) to the output buffer,','line_number':53,'multiline':False]
['text':' which can either be a fmt::memory_buffer, or a std::string.','line_number':54,'multiline':False]
['text':' 'singleHandler' Function to write a valid single byte UTF-8 sequence with desired escaping.','line_number':60,'multiline':False]
['text':' 'invalidByteHandler' Function to write a byte of invalid UTF-8 encoding','line_number':61,'multiline':False]
['text':' 'twoEscaper' Function to write a valid two byte UTF-8 sequence with desired escaping, for C1','line_number':62,'multiline':False]
['text':' control codes.','line_number':63,'multiline':False]
['text':' 'maxLength' Max length to write into output buffer; A value of std::string::npos means unbounded.','line_number':64,'multiline':False]
['text':' An escape sequence will not be written if appending the entire sequence will exceed this limit.','line_number':65,'multiline':False]
['text':' 'wouldWrite' Output to contain the total bytes that would have been written to the buffer if no','line_number':66,'multiline':False]
['text':' size limit is in place.','line_number':67,'multiline':False]
['text':'','line_number':68,'multiline':False]
['text':' All these functions take a function object as their first parameter to perform the','line_number':69,'multiline':False]
['text':' writing of any escaped data. This function expects the number of handled bytes as its first','line_number':70,'multiline':False]
['text':' parameter and the corresponding escaped string as the second. They are templates to they can be','line_number':71,'multiline':False]
['text':' inlined.','line_number':72,'multiline':False]
['text':' The range [inFirst, it) contains input that does not need to be escaped and that has not been','line_number':84,'multiline':False]
['text':' written to output yet.','line_number':85,'multiline':False]
['text':' The range [it, inLast) contains remaining input to scan. 'inFirst' is pointing to the','line_number':86,'multiline':False]
['text':' beginning of the input that has not yet been written to 'escaped'. 'it' is pointing to the','line_number':87,'multiline':False]
['text':' beginning of the unicode code point we're currently processing in the while-loop below.','line_number':88,'multiline':False]
['text':' 'inLast' is the end of the input sequence.','line_number':89,'multiline':False]
['text':' Writes an escaped sequence to output after flushing pending input that does not need to be','line_number':96,'multiline':False]
['text':' escaped. 'it' is assumed to be at the beginning of the input sequence represented by the','line_number':97,'multiline':False]
['text':' escaped data.','line_number':98,'multiline':False]
['text':' 'numHandled' the number of bytes of unescaped data being written escaped in 'escapeSequence'','line_number':99,'multiline':False]
['text':' Appends the range [wFirst, wLast) to the output if the result is within the max length.','line_number':101,'multiline':False]
['text':' 'canTruncate' controls the behavior if appending the entire range would exceed the limit.','line_number':102,'multiline':False]
['text':' If true, this appends input up to the length limit. Otherwise, none is appended.','line_number':103,'multiline':False]
['text':' Flush range of unmodified input','line_number':119,'multiline':False]
['text':' Write escaped data','line_number':123,'multiline':False]
['text':' Helper function to write a valid one byte UTF-8 sequence from the input stream','line_number':132,'multiline':False]
['text':' Helper function to write a valid two byte UTF-8 sequence from the input stream','line_number':137,'multiline':False]
['text':' Helper function to write an invalid UTF-8 sequence from the input stream','line_number':147,'multiline':False]
['text':' Will try and write up to num bytes but bail if we reach the end of the input.','line_number':148,'multiline':False]
['text':' Updates the position of 'it'.','line_number':149,'multiline':False]
['text':' 2 byte sequence','line_number':173,'multiline':False]
['text':' 3 byte sequence','line_number':187,'multiline':False]
['text':' 4 byte sequence','line_number':204,'multiline':False]
['text':' Write last block','line_number':212,'multiline':False]
['text':' namespace','line_number':218,'multiline':False]
['text':' Write Unicode Replacement Character when the encoding is bad','line_number':481,'multiline':False]
['text':' Decode the UTF-8 and write the codepoint with \u','line_number':485,'multiline':False]
['text':' No-op buffer and handlers, defined to re-use escape method logic.','line_number':518,'multiline':False]
['text':' Throws an exception when an invalid UTF8 character is detected.','line_number':525,'multiline':False]
['text':' namespace mongo::str','line_number':543,'multiline':False]
