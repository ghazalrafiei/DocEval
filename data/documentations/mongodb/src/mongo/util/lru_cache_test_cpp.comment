['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 * This class provides an ostream operator to allow us to use the ASSERT_*
 * unittest macros.
 ','line_number':60,'multiline':True]
['text':' All of the template magic below this point is to allow us to use the assert','line_number':85,'multiline':False]
['text':' unittest macros, which require ostream operators, with the LRUCache's iterators','line_number':86,'multiline':False]
['text':' SFINAE on the property of whether a type has an ostream operator available.','line_number':88,'multiline':False]
['text':' sanity check','line_number':97,'multiline':False]
['text':' This utility allows us to wrap things that don't have ostream operators so we','line_number':102,'multiline':False]
['text':' can provide them with a dummy ostream operator.','line_number':103,'multiline':False]
['text':' To forward to the assert macros properly, we can define specializations of this type','line_number':109,'multiline':False]
['text':' that either call ASSERT_* directly or wrap, and then call ASSERT_*','line_number':110,'multiline':False]
['text':' Types that have an ostream operator will flow through this struct.','line_number':114,'multiline':False]
['text':' Types that lack an ostream operator will flow through this struct.','line_number':126,'multiline':False]
['text':' Test that using cfind() returns the element without promoting it.','line_number':167,'multiline':False]
['text':' Fill up the cache','line_number':172,'multiline':False]
['text':' Call cfind on each key, ensure that list order does not change.','line_number':178,'multiline':False]
['text':' Test that we can add an entry and get it back out.','line_number':188,'multiline':False]
['text':' A cache with a max size of 0 is permanently empty.','line_number':203,'multiline':False]
['text':' When elements are added to a zero-size cache, instant eviction.','line_number':208,'multiline':False]
['text':' Promote should be a no-op','line_number':214,'multiline':False]
['text':' Erase should be a no-op','line_number':219,'multiline':False]
['text':' Find should be a no-op','line_number':224,'multiline':False]
['text':' Test a very large cache size','line_number':230,'multiline':False]
['text':' If iterator debugging is on the LRU Cache destructor may be O(n^2). Reduce the max iteration size','line_number':232,'multiline':False]
['text':' to handle this.','line_number':233,'multiline':False]
['text':' Fill up the cache','line_number':244,'multiline':False]
['text':' Perform some basic functions on the cache','line_number':252,'multiline':False]
['text':' Try causing an eviction','line_number':268,'multiline':False]
['text':' Make sure eviction and promotion work properly with a cache of size 1.','line_number':276,'multiline':False]
['text':' Second entry should immediately evict the first.','line_number':285,'multiline':False]
['text':' Test cache eviction when the cache is full and new elements are added.','line_number':292,'multiline':False]
['text':' Test eviction for any permutation of the original cache','line_number':295,'multiline':False]
['text':' Fill up the cache','line_number':299,'multiline':False]
['text':' Find all but one key, moving that to the back','line_number':305,'multiline':False]
['text':' Adding another entry will evict the least-recently used one','line_number':312,'multiline':False]
['text':' Test that using promote() makes the promoted element the most-recently used,','line_number':322,'multiline':False]
['text':' from any original position in the cache.','line_number':323,'multiline':False]
['text':' Test promotion for any position in the original cache','line_number':326,'multiline':False]
['text':' i <= maxSize here, so we test promotion of cache.end(),','line_number':327,'multiline':False]
['text':' and of a non-existent key.','line_number':328,'multiline':False]
['text':' Fill up the cache','line_number':332,'multiline':False]
['text':' Promote a key, check that it is now at the front','line_number':338,'multiline':False]
['text':' if key did not exist, no change to the list','line_number':343,'multiline':False]
['text':' Promote the iterator at position i, check that it happens properly','line_number':347,'multiline':False]
['text':' If we are at this case, no elements should have been promoted this round.','line_number':356,'multiline':False]
['text':' Otherwise, check that promotion happened as expected.','line_number':359,'multiline':False]
['text':' Test that calling add() with a key that already exists in the cache deletes','line_number':366,'multiline':False]
['text':' the existing entry and gets promoted properly','line_number':367,'multiline':False]
['text':' Test replacement for any position in the original cache','line_number':370,'multiline':False]
['text':' Fill up the cache','line_number':374,'multiline':False]
['text':' Replace a key, check for promotion with new value','line_number':380,'multiline':False]
['text':' Test that calling add() with a key that already exists in the cache deletes','line_number':389,'multiline':False]
['text':' the existing entry and gets promoted properly','line_number':390,'multiline':False]
['text':' Test replacement for any position in the original cache','line_number':393,'multiline':False]
['text':' i <= maxSize so we erase a non-existent element','line_number':394,'multiline':False]
['text':' Fill up the cache','line_number':398,'multiline':False]
['text':' Erase an element','line_number':406,'multiline':False]
['text':' Check that all expected elements are still in the list','line_number':415,'multiline':False]
['text':' Test removal of elements by iterator from the cache','line_number':427,'multiline':False]
['text':' Test replacement for any position in the original cache','line_number':430,'multiline':False]
['text':' Fill up the cache','line_number':434,'multiline':False]
['text':' Check that all expected elements are still in the cache','line_number':458,'multiline':False]
['text':' Test iteration over the cache.','line_number':470,'multiline':False]
['text':' iterate over empty cache','line_number':475,'multiline':False]
['text':' iterate over partially full cache','line_number':480,'multiline':False]
['text':' iterate over full cache (and iteration doesn't change LRU order)','line_number':489,'multiline':False]
['text':' iterate while promoting','line_number':501,'multiline':False]
['text':' Promote element j while we are paused iterating over i','line_number':505,'multiline':False]
['text':' Test if we should now be pointing to beginning of cache','line_number':513,'multiline':False]
['text':' two iterators compare equal when on the same element','line_number':522,'multiline':False]
['text':' Check for bidirectionality of iterators','line_number':530,'multiline':False]
['text':' Check for equal transformations','line_number':534,'multiline':False]
['text':' eviction while iterating doesn't affect iterators','line_number':547,'multiline':False]
['text':' A helper class that has a custom hasher and equality operator','line_number':554,'multiline':False]
['text':' Test that we can properly use this cache with types with custom hash functors','line_number':574,'multiline':False]
['text':' and equality operators.','line_number':575,'multiline':False]
['text':' Round trip an element into and out of the cache','line_number':579,'multiline':False]
['text':' Attempt to insert a key that is equal by our comparison operator,','line_number':588,'multiline':False]
['text':' this should replace the original value of 20 with 0.','line_number':589,'multiline':False]
['text':' namespace','line_number':620,'multiline':False]
['text':' namespace mongo','line_number':621,'multiline':False]
