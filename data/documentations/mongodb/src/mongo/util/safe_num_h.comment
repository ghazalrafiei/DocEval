['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' namespace mutablebson','line_number':48,'multiline':False]
['text':'*
 * SafeNum holds and does arithmetic on a number in a safe way, handling overflow
 * and casting for the user. 32-bit integers will overflow into 64-bit integers. But
 * 64-bit integers will NOT overflow to doubles. Also, this class does NOT
 * downcast. Doubles will NOT overflow to decimal, but mixed type arithmetic with a decimal
 * will. This class should be as conservative as possible about upcasting, but
 * should never lose precision.
 *
 * This class does not throw any exceptions, so the user should call type() before
 * using a SafeNum to ensure that it is valid.  A SafeNum could be invalid
 * from creation (if, for example, a non-numeric BSONElement was passed to the
 * constructor) or due to overflow.  NAN is a valid value.
 *
 * Usage example:
 *
 *      SafeNum counter(doc["count"]);
 *
 *      SafeNum newValue = counter + 10;
 *      // check if valid
 *      if (newValue.type() == EOO) {
 *          return;
 *      }
 *      // append SafeNum to a BSONObj
 *      newValue.toBSON(fieldName, &bsonObjBuilder);
 *
 ','line_number':51,'multiline':True]
['text':'','line_number':82,'multiline':False]
['text':' construction support','line_number':83,'multiline':False]
['text':'','line_number':84,'multiline':False]
['text':' Copy ctor and assignment are allowed.','line_number':86,'multiline':False]
['text':' These implicit conversions are allowed.','line_number':90,'multiline':False]
['text':' TODO: add Paul's mutablebson::Element ctor','line_number':97,'multiline':False]
['text':'','line_number':99,'multiline':False]
['text':' comparison support','line_number':100,'multiline':False]
['text':'','line_number':101,'multiline':False]
['text':'*
     * Returns true if the numeric quantity of 'rhs' and 'this' are the same. That is,
     * an int32(10), an int64(10), a double(10), and a decimal(10) are equivalent. An
     * EOO-typed safe num is equivalent only to another EOO-typed instance. Otherwise,
     * returns false.
     ','line_number':103,'multiline':True]
['text':'*
     * Returns true if 'rsh' is equivalent to 'this' (see isEquivalent) _and_ both
     * types are exactly the same. An EOO-typed safe num is never identical to
     * anything else, even another EOO-typed instance. Otherwise, returns false.
     ','line_number':113,'multiline':True]
['text':'','line_number':120,'multiline':False]
['text':' arithmetic support','line_number':121,'multiline':False]
['text':'','line_number':122,'multiline':False]
['text':'*
     * Sums the 'rhs' -- right-hand side -- safe num with this, taking care of
     * upconversions and overflow (see class header).
     ','line_number':124,'multiline':True]
['text':'*
     * Multiplies the 'rhs' -- right-hand side -- safe num with this, taking care of
     * upconversions and overflow (see class header).
     ','line_number':131,'multiline':True]
['text':'','line_number':138,'multiline':False]
['text':' logical operation support. Note that these operations are only supported for','line_number':139,'multiline':False]
['text':' integral types. Attempts to apply with either side holding a double or decimal','line_number':140,'multiline':False]
['text':' value will result in an EOO typed safenum.','line_number':141,'multiline':False]
['text':'','line_number':142,'multiline':False]
['text':' Bitwise 'and' support','line_number':144,'multiline':False]
['text':' Bitwise 'or' support','line_number':149,'multiline':False]
['text':' Bitwise 'xor' support','line_number':154,'multiline':False]
['text':'','line_number':159,'multiline':False]
['text':' output support','line_number':160,'multiline':False]
['text':'','line_number':161,'multiline':False]
['text':'*
     * Appends contents to given BSONObjBuilder.
     ','line_number':167,'multiline':True]
['text':'','line_number':172,'multiline':False]
['text':' accessors','line_number':173,'multiline':False]
['text':'','line_number':174,'multiline':False]
['text':'','line_number':179,'multiline':False]
['text':' Below exposed for testing purposes. Treat as private.','line_number':180,'multiline':False]
['text':'','line_number':181,'multiline':False]
['text':' Maximum integer that can be converted accuratelly into a double, assuming a','line_number':183,'multiline':False]
['text':' double precission IEEE 754 representation.','line_number':184,'multiline':False]
['text':' TODO use numeric_limits to make this portable','line_number':185,'multiline':False]
['text':' 2^53','line_number':186,'multiline':False]
['text':' One of the following: NumberInt, NumberLong, NumberDouble, NumberDecimal, or EOO.','line_number':189,'multiline':False]
['text':' Value of the safe num. Indeterminate if _type is EOO.','line_number':192,'multiline':False]
['text':'*
     * Returns the sum of 'lhs' and 'rhs', taking into consideration their types. The
     * type of the result would upcast, if necessary and permitted. Otherwise, returns
     * an EOO-type instance.
     ','line_number':200,'multiline':True]
['text':'*
     * Returns the product of 'lhs' and 'rhs', taking into consideration their types. The
     * type of the result would upcast, if necessary and permitted. Otherwise, returns an
     * EOO-type instance.
     ','line_number':207,'multiline':True]
['text':'* Returns the bitwise 'and' of lhs and rhs, taking into consideration their types. If
     *  the operation is invalid for the underlying types, returns an EOO instance.
     ','line_number':214,'multiline':True]
['text':'* Returns the bitwise 'or' of lhs and rhs, taking into consideration their types. If
     *  the operation is invalid for the underlying types, returns an EOO instance.
     ','line_number':219,'multiline':True]
['text':'* Returns the bitwise 'xor' of lhs and rhs, taking into consideration their types. If
     *  the operation is invalid for the underlying types, returns an EOO instance.
     ','line_number':224,'multiline':True]
['text':'*
     * Extracts the value of 'snum' in a int64_t format. It assumes 'snum' is an NumberInt
     * or a NumberLong.
     ','line_number':229,'multiline':True]
['text':'*
     * Extracts the value of 'snum' in a double format. It assumes 'snum' is a valid
     * SafeNum, i.e., that _type is not EOO.
     ','line_number':235,'multiline':True]
['text':'*
     * Extracts the value of 'snum' in a Decimal128 format.  It assumes 'snum' is an
     * NumberInt, NumberDouble, or NumberLong.  Integral values are converted exactly.
     * NumberDouble is converted to 15 digits of precision, as defined in Decimal128.
     ','line_number':241,'multiline':True]
['text':' Convenience method for unittest code. Please use accessors otherwise.','line_number':249,'multiline':False]
['text':' namespace mongo','line_number':348,'multiline':False]
