['text':'','line_number':1,'multiline':False]
['text':' ssl/stream.hpp','line_number':2,'multiline':False]
['text':' ~~~~~~~~~~~~~~','line_number':3,'multiline':False]
['text':'','line_number':4,'multiline':False]
['text':' Copyright (c) 2003-2017 Christopher M. Kohlhoff (chris at kohlhoff dot com)','line_number':5,'multiline':False]
['text':'','line_number':6,'multiline':False]
['text':' Distributed under the Boost Software License, Version 1.0. (See accompanying','line_number':7,'multiline':False]
['text':' file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':8,'multiline':False]
['text':'','line_number':9,'multiline':False]
['text':' defined(_MSC_VER) && (_MSC_VER >= 1200)','line_number':16,'multiline':False]
['text':'/ Provides stream-oriented functionality using SSL.','line_number':41,'multiline':False]
['text':'*
 * The stream class template provides asynchronous and blocking stream-oriented
 * functionality using SSL.
 *
 * @par Thread Safety
 * @e Distinct @e objects: Safe.@n
 * @e Shared @e objects: Unsafe. The application must also ensure that all
 * asynchronous operations are performed within the same implicit or explicit
 * strand.
 *
 * @par Example
 * To use the SSL stream template with an ip::tcp::socket, you would write:
 * @code
 * asio::io_context io_context;
 * asio::ssl::context ctx(asio::ssl::context::sslv23);
 * asio::ssl::stream<asio:ip::tcp::socket> sock(io_context, ctx);
 * @endcode
 *
 * @par Concepts:
 * AsyncReadStream, AsyncWriteStream, Stream, SyncReadStream, SyncWriteStream.
 ','line_number':42,'multiline':True]
['text':'/ The native handle type of the SSL stream.','line_number':66,'multiline':False]
['text':'/ The type of the next layer.','line_number':77,'multiline':False]
['text':'/ The type of the lowest layer.','line_number':80,'multiline':False]
['text':'/ The type of the executor associated with the object.','line_number':83,'multiline':False]
['text':'/ Construct a stream.','line_number':87,'multiline':False]
['text':'*
     * This constructor creates a stream and initialises the underlying stream
     * object.
     *
     * @param arg The argument to be passed to initialise the underlying stream.
     *
     * @param ctx The SSL context to be used for the stream.
     ','line_number':88,'multiline':True]
['text':' defined(ASIO_HAS_MOVE) || defined(GENERATING_DOCUMENTATION)','line_number':102,'multiline':False]
['text':' defined(ASIO_HAS_MOVE) || defined(GENERATING_DOCUMENTATION)','line_number':107,'multiline':False]
['text':'/ Destructor.','line_number':109,'multiline':False]
['text':'*
     * @note A @c stream object must not be destroyed while there are pending
     * asynchronous operations associated with it.
     ','line_number':110,'multiline':True]
['text':'/ Get the executor associated with the object.','line_number':116,'multiline':False]
['text':'*
     * This function may be used to obtain the executor object that the stream
     * uses to dispatch handlers for asynchronous operations.
     *
     * @return A copy of the executor that stream will use to dispatch handlers.
     ','line_number':117,'multiline':True]
['text':'/ (Deprecated: Use get_executor().) Get the io_context associated with the','line_number':128,'multiline':False]
['text':'/ object.','line_number':129,'multiline':False]
['text':'/ (Deprecated: Use get_executor().) Get the io_context associated with the','line_number':134,'multiline':False]
['text':'/ object.','line_number':135,'multiline':False]
['text':' !defined(ASIO_NO_DEPRECATED)','line_number':139,'multiline':False]
['text':'/ Get the underlying implementation in the native type.','line_number':141,'multiline':False]
['text':'*
     * This function may be used to obtain the underlying implementation of the
     * context. This is intended to allow access to context functionality that is
     * not otherwise provided.
     *
     * @par Example
     * The native_handle() function returns a pointer of type @c SSL* that is
     * suitable for passing to functions such as @c SSL_get_verify_result and
     * @c SSL_get_peer_certificate:
     * @code
     * asio::ssl::stream<asio:ip::tcp::socket> sock(io_context, ctx);
     *
     * // ... establish connection and perform handshake ...
     *
     * if (X509* cert = SSL_get_peer_certificate(sock.native_handle()))
     * {
     *   if (SSL_get_verify_result(sock.native_handle()) == X509_V_OK)
     *   {
     *     // ...
     *   }
     * }
     * @endcode
     ','line_number':142,'multiline':True]
['text':'/ Gets the sni from the client hello.','line_number':169,'multiline':False]
['text':'/ Get a reference to the next layer.','line_number':174,'multiline':False]
['text':'*
     * This function returns a reference to the next layer in a stack of stream
     * layers.
     *
     * @return A reference to the next layer in the stack of stream layers.
     * Ownership is not transferred to the caller.
     ','line_number':175,'multiline':True]
['text':'/ Get a reference to the next layer.','line_number':186,'multiline':False]
['text':'*
     * This function returns a reference to the next layer in a stack of stream
     * layers.
     *
     * @return A reference to the next layer in the stack of stream layers.
     * Ownership is not transferred to the caller.
     ','line_number':187,'multiline':True]
['text':'/ Get a reference to the lowest layer.','line_number':198,'multiline':False]
['text':'*
     * This function returns a reference to the lowest layer in a stack of
     * stream layers.
     *
     * @return A reference to the lowest layer in the stack of stream layers.
     * Ownership is not transferred to the caller.
     ','line_number':199,'multiline':True]
['text':'/ Get a reference to the lowest layer.','line_number':210,'multiline':False]
['text':'*
     * This function returns a reference to the lowest layer in a stack of
     * stream layers.
     *
     * @return A reference to the lowest layer in the stack of stream layers.
     * Ownership is not transferred to the caller.
     ','line_number':211,'multiline':True]
['text':'/ Perform SSL handshaking.','line_number':222,'multiline':False]
['text':'*
     * This function is used to perform SSL handshaking on the stream. The
     * function call will block until handshaking is complete or an error occurs.
     *
     * @param type The type of handshaking to be performed, i.e. as a client or as
     * a server.
     *
     * @throws asio::system_error Thrown on failure.
     ','line_number':223,'multiline':True]
['text':'/ Perform SSL handshaking.','line_number':238,'multiline':False]
['text':'*
     * This function is used to perform SSL handshaking on the stream. The
     * function call will block until handshaking is complete or an error occurs.
     *
     * @param type The type of handshaking to be performed, i.e. as a client or as
     * a server.
     *
     * @param ec Set to indicate what error occurred, if any.
     ','line_number':239,'multiline':True]
['text':'/ Perform SSL handshaking.','line_number':253,'multiline':False]
['text':'*
     * This function is used to perform SSL handshaking on the stream. The
     * function call will block until handshaking is complete or an error occurs.
     *
     * @param type The type of handshaking to be performed, i.e. as a client or as
     * a server.
     *
     * @param buffers The buffered data to be reused for the handshake.
     *
     * @throws asio::system_error Thrown on failure.
     ','line_number':254,'multiline':True]
['text':'/ Perform SSL handshaking.','line_number':272,'multiline':False]
['text':'*
     * This function is used to perform SSL handshaking on the stream. The
     * function call will block until handshaking is complete or an error occurs.
     *
     * @param type The type of handshaking to be performed, i.e. as a client or as
     * a server.
     *
     * @param buffers The buffered data to be reused for the handshake.
     *
     * @param ec Set to indicate what error occurred, if any.
     ','line_number':273,'multiline':True]
['text':'/ Start an asynchronous SSL handshake.','line_number':295,'multiline':False]
['text':'*
     * This function is used to asynchronously perform an SSL handshake on the
     * stream. This function call always returns immediately.
     *
     * @param type The type of handshaking to be performed, i.e. as a client or as
     * a server.
     *
     * @param handler The handler to be called when the handshake operation
     * completes. Copies will be made of the handler as required. The equivalent
     * function signature of the handler must be:
     * @code void handler(
     *   const asio::error_code& error // Result of operation.
     * ); @endcode
     ','line_number':296,'multiline':True]
['text':' If you get an error on the following line it means that your handler does','line_number':313,'multiline':False]
['text':' not meet the documented type requirements for a HandshakeHandler.','line_number':314,'multiline':False]
['text':'/ Start an asynchronous SSL handshake.','line_number':324,'multiline':False]
['text':'*
     * This function is used to asynchronously perform an SSL handshake on the
     * stream. This function call always returns immediately.
     *
     * @param type The type of handshaking to be performed, i.e. as a client or as
     * a server.
     *
     * @param buffers The buffered data to be reused for the handshake. Although
     * the buffers object may be copied as necessary, ownership of the underlying
     * buffers is retained by the caller, which must guarantee that they remain
     * valid until the handler is called.
     *
     * @param handler The handler to be called when the handshake operation
     * completes. Copies will be made of the handler as required. The equivalent
     * function signature of the handler must be:
     * @code void handler(
     *   const asio::error_code& error, // Result of operation.
     *   std::size_t bytes_transferred // Amount of buffers used in handshake.
     * ); @endcode
     ','line_number':325,'multiline':True]
['text':' If you get an error on the following line it means that your handler does','line_number':350,'multiline':False]
['text':' not meet the documented type requirements for a BufferedHandshakeHandler.','line_number':351,'multiline':False]
['text':'/ Shut down SSL on the stream.','line_number':365,'multiline':False]
['text':'*
     * This function is used to shut down SSL on the stream. The function call
     * will block until SSL has been shut down or an error occurs.
     *
     * @throws asio::system_error Thrown on failure.
     ','line_number':366,'multiline':True]
['text':'/ Shut down SSL on the stream.','line_number':378,'multiline':False]
['text':'*
     * This function is used to shut down SSL on the stream. The function call
     * will block until SSL has been shut down or an error occurs.
     *
     * @param ec Set to indicate what error occurred, if any.
     ','line_number':379,'multiline':True]
['text':'/ Asynchronously shut down SSL on the stream.','line_number':390,'multiline':False]
['text':'*
     * This function is used to asynchronously shut down SSL on the stream. This
     * function call always returns immediately.
     *
     * @param handler The handler to be called when the handshake operation
     * completes. Copies will be made of the handler as required. The equivalent
     * function signature of the handler must be:
     * @code void handler(
     *   const asio::error_code& error // Result of operation.
     * ); @endcode
     ','line_number':391,'multiline':True]
['text':' If you get an error on the following line it means that your handler does','line_number':405,'multiline':False]
['text':' not meet the documented type requirements for a ShutdownHandler.','line_number':406,'multiline':False]
['text':'/ Write some data to the stream.','line_number':416,'multiline':False]
['text':'*
     * This function is used to write data on the stream. The function call will
     * block until one or more bytes of data has been written successfully, or
     * until an error occurs.
     *
     * @param buffers The data to be written.
     *
     * @returns The number of bytes written.
     *
     * @throws asio::system_error Thrown on failure.
     *
     * @note The write_some operation may not transmit all of the data to the
     * peer. Consider using the @ref write function if you need to ensure that all
     * data is written before the blocking operation completes.
     ','line_number':417,'multiline':True]
['text':'/ Write some data to the stream.','line_number':440,'multiline':False]
['text':'*
     * This function is used to write data on the stream. The function call will
     * block until one or more bytes of data has been written successfully, or
     * until an error occurs.
     *
     * @param buffers The data to be written to the stream.
     *
     * @param ec Set to indicate what error occurred, if any.
     *
     * @returns The number of bytes written. Returns 0 if an error occurred.
     *
     * @note The write_some operation may not transmit all of the data to the
     * peer. Consider using the @ref write function if you need to ensure that all
     * data is written before the blocking operation completes.
     ','line_number':441,'multiline':True]
['text':'/ Start an asynchronous write.','line_number':461,'multiline':False]
['text':'*
     * This function is used to asynchronously write one or more bytes of data to
     * the stream. The function call always returns immediately.
     *
     * @param buffers The data to be written to the stream. Although the buffers
     * object may be copied as necessary, ownership of the underlying buffers is
     * retained by the caller, which must guarantee that they remain valid until
     * the handler is called.
     *
     * @param handler The handler to be called when the write operation completes.
     * Copies will be made of the handler as required. The equivalent function
     * signature of the handler must be:
     * @code void handler(
     *   const asio::error_code& error, // Result of operation.
     *   std::size_t bytes_transferred           // Number of bytes written.
     * ); @endcode
     *
     * @note The async_write_some operation may not transmit all of the data to
     * the peer. Consider using the @ref async_write function if you need to
     * ensure that all data is written before the blocking operation completes.
     ','line_number':462,'multiline':True]
['text':' If you get an error on the following line it means that your handler does','line_number':486,'multiline':False]
['text':' not meet the documented type requirements for a WriteHandler.','line_number':487,'multiline':False]
['text':'/ Read some data from the stream.','line_number':500,'multiline':False]
['text':'*
     * This function is used to read data from the stream. The function call will
     * block until one or more bytes of data has been read successfully, or until
     * an error occurs.
     *
     * @param buffers The buffers into which the data will be read.
     *
     * @returns The number of bytes read.
     *
     * @throws asio::system_error Thrown on failure.
     *
     * @note The read_some operation may not read all of the requested number of
     * bytes. Consider using the @ref read function if you need to ensure that the
     * requested amount of data is read before the blocking operation completes.
     ','line_number':501,'multiline':True]
['text':'/ Read some data from the stream.','line_number':524,'multiline':False]
['text':'*
     * This function is used to read data from the stream. The function call will
     * block until one or more bytes of data has been read successfully, or until
     * an error occurs.
     *
     * @param buffers The buffers into which the data will be read.
     *
     * @param ec Set to indicate what error occurred, if any.
     *
     * @returns The number of bytes read. Returns 0 if an error occurred.
     *
     * @note The read_some operation may not read all of the requested number of
     * bytes. Consider using the @ref read function if you need to ensure that the
     * requested amount of data is read before the blocking operation completes.
     ','line_number':525,'multiline':True]
['text':'/ Start an asynchronous read.','line_number':545,'multiline':False]
['text':'*
     * This function is used to asynchronously read one or more bytes of data from
     * the stream. The function call always returns immediately.
     *
     * @param buffers The buffers into which the data will be read. Although the
     * buffers object may be copied as necessary, ownership of the underlying
     * buffers is retained by the caller, which must guarantee that they remain
     * valid until the handler is called.
     *
     * @param handler The handler to be called when the read operation completes.
     * Copies will be made of the handler as required. The equivalent function
     * signature of the handler must be:
     * @code void handler(
     *   const asio::error_code& error, // Result of operation.
     *   std::size_t bytes_transferred           // Number of bytes read.
     * ); @endcode
     *
     * @note The async_read_some operation may not read all of the requested
     * number of bytes. Consider using the @ref async_read function if you need to
     * ensure that the requested amount of data is read before the asynchronous
     * operation completes.
     ','line_number':546,'multiline':True]
['text':' If you get an error on the following line it means that your handler does','line_number':571,'multiline':False]
['text':' not meet the documented type requirements for a ReadHandler.','line_number':572,'multiline':False]
['text':' namespace ssl','line_number':594,'multiline':False]
['text':' namespace asio','line_number':595,'multiline':False]
['text':' ASIO_SSL_STREAM_HPP','line_number':599,'multiline':False]
