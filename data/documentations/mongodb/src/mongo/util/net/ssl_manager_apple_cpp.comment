['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' This API appears in the Security framework even though
 * the SecIdentity.h header doesn't reference it.
 *
 * Use it explicitly for turning Cert/Key pairs into Identities
 * because it's way cheaper than going via keychain and has the
 * handy property of not causing difficult to diagnose heisenbugs.
 ','line_number':66,'multiline':True]
['text':' This failpoint is a no-op on OSX.','line_number':81,'multiline':False]
['text':' CFAbsoluteTime and X.509 is relative to Jan 1 2001 00:00:00 GMT','line_number':89,'multiline':False]
['text':' Unix Epoch (and thereby Date_t) is relative to Jan 1, 1970 00:00:00 GMT','line_number':90,'multiline':False]
['text':' Never actually errors, but use StatusWith to be','line_number':111,'multiline':False]
['text':' consistent with other toString() signatures.','line_number':112,'multiline':False]
['text':' Ideally we'd use an operator<< overload,','line_number':128,'multiline':False]
['text':' but OSStatus is just a uint32_t.','line_number':129,'multiline':False]
['text':' Be explicit about conversion to provide meaningful','line_number':130,'multiline':False]
['text':' output in error streams.','line_number':131,'multiline':False]
['text':' CFTypeRef is actually just `void*`.','line_number':142,'multiline':False]
['text':' So while we could be polymorphic with the other toString() methods,','line_number':143,'multiline':False]
['text':' it's basically asking for a hard to diagnose type error.','line_number':144,'multiline':False]
['text':' namespace detail','line_number':290,'multiline':False]
['text':' Secure Transport doesn't give us access to the specific string type,','line_number':332,'multiline':False]
['text':' so regard all strings as ASN1_PRINTABLESTRING on this platform.','line_number':333,'multiline':False]
['text':' Extract a name value from the dictionary for the given property key.','line_number':338,'multiline':False]
['text':' Multi-value RDN.','line_number':367,'multiline':False]
['text':' Single Value RDN.','line_number':392,'multiline':False]
['text':' Translate a raw DER subject sequence into a structured subject name.','line_number':409,'multiline':False]
['text':' Non data, ignore.','line_number':467,'multiline':False]
['text':' Incase there is an IP Address in the DNS field of a certificate's SAN, we want','line_number':536,'multiline':False]
['text':' to round trip the value through CIDR.','line_number':537,'multiline':False]
['text':'*
 * Attempt to merge a security item bundle into an
 * identity and optional cert chain.
 *
 * The file must have exactly one key which will be paired with
 * the first available certificate, or exactly one identity.
 ','line_number':586,'multiline':True]
['text':' Ideal case, exactly one identity.','line_number':599,'multiline':False]
['text':' Optimistic case, exactly one cert-key pair.','line_number':607,'multiline':False]
['text':' Complex case, multiple certs.','line_number':625,'multiline':False]
['text':' Find the key, pair it with the first cert, and bundle the remaining certs in.','line_number':626,'multiline':False]
['text':' Ignore other types.','line_number':655,'multiline':False]
['text':'*
 * Strip a security item bundle down to just Certificates.
 * This means ignoring SecKeyRef and splitting SecIdentityRef
 * into just their SecCertificateRef potions.
 ','line_number':698,'multiline':True]
['text':' Strip unpaired keys and identities.','line_number':710,'multiline':False]
['text':' Preserve Certificates.','line_number':720,'multiline':False]
['text':' Extract public certificate from Identity.','line_number':728,'multiline':False]
['text':'*
 * Load a PEM encoded file from disk.
 * This file may contain multiple PEM blocks (e.g. a private key and one or more certificates).
 * Because SecItemImport loads all items as-is, we must manually attempt to pair up
 * corresponding Certificates and Keys.
 * This is done using a temporary Keychain and looping through the results.
 *
 * Depending on the value passed for <mode> any SecKey instances present will be
 * either discarded, or combined with matching SecCertificates to make SecIdentities.
 * Unbound certificates will remain in the CFArray as-is.
 ','line_number':747,'multiline':True]
['text':' Encrypted PKCS#1 and PKCS#8 is not supported on macOS.','line_number':776,'multiline':False]
['text':' Attempt to detect early and give a useful error message.','line_number':777,'multiline':False]
['text':' We'll use the key marker as a tombstone to determine that we're','line_number':778,'multiline':False]
['text':' not actually looking at a PKCS#12.','line_number':779,'multiline':False]
['text':' The Security framework in OSX doesn't support PKCS#8 encrypted keys','line_number':817,'multiline':False]
['text':' using modern encryption algorithms. Give the user a hint about that.','line_number':818,'multiline':False]
['text':' Rewrap the return to be the non-mutable type.','line_number':848,'multiline':False]
['text':' Fetch expiry range and property name.','line_number':855,'multiline':False]
['text':' Marshal expiration.','line_number':882,'multiline':False]
['text':' Get the root certificate from an array of certs.','line_number':901,'multiline':False]
['text':' In practice, this should never occur, thanks to the selector.empty()','line_number':945,'multiline':False]
['text':' checks at the callsites of this function.','line_number':946,'multiline':False]
['text':' This can only happen if the parsing logic in ssl_options.cpp changes.','line_number':950,'multiline':False]
['text':' Guard against it to play it safe.','line_number':951,'multiline':False]
['text':' Note: These search terms don't ACTUALLY work.','line_number':965,'multiline':False]
['text':' We should be able to specify kSecMatchLimitOne, but instead we have to get','line_number':966,'multiline':False]
['text':' extra (sometimes duplicate) results, and manually filter them below.','line_number':967,'multiline':False]
['text':' Don't be fooled by the name.','line_number':988,'multiline':False]
['text':' "Public Key Hash" is actually referring to the digest of the entire Certificate.','line_number':989,'multiline':False]
['text':' We should be able to return the results at this point,','line_number':1006,'multiline':False]
['text':' but the search criteria above will return non-matching results in OSX 10.12 and later.','line_number':1007,'multiline':False]
['text':' Try matching subject name to short (common name) portion of subject.','line_number':1025,'multiline':False]
['text':' Try matching full subject name instead.','line_number':1041,'multiline':False]
['text':' Attempt to match SHA1 digest.','line_number':1058,'multiline':False]
['text':' Attempt to match SHA256 digest.','line_number':1067,'multiline':False]
['text':' namespace','line_number':1136,'multiline':False]
['text':'///////////////////////////////////////////////////////////////////////////','line_number':1138,'multiline':False]
['text':' SSLConnection','line_number':1139,'multiline':False]
['text':' SSLHandshake will return errSSLServerAuthCompleted and let us do our own verify.','line_number':1169,'multiline':False]
['text':' We'll pretend to have done that, and let our caller invoke verifyPeer later.','line_number':1170,'multiline':False]
['text':' Consume any initial bytes first.','line_number':1215,'multiline':False]
['text':' Then go to the network.','line_number':1225,'multiline':False]
['text':' When in server mode, _init contains any bytes read prior to','line_number':1239,'multiline':False]
['text':' starting the SSL handshake process.','line_number':1240,'multiline':False]
['text':' Once exhausted, this is never refilled.','line_number':1241,'multiline':False]
['text':' Basic X509 policy.','line_number':1252,'multiline':False]
['text':' Set Revocation policy.','line_number':1256,'multiline':False]
['text':' namespace','line_number':1267,'multiline':False]
['text':'///////////////////////////////////////////////////////////////////////////','line_number':1269,'multiline':False]
['text':' SSLManager','line_number':1270,'multiline':False]
['text':' _clientCA represents the CA to use when acting as a client
     * and validating remotes during outbound connections.
     * This comes from, in order, --tlsCAFile, or the system CA.
     ','line_number':1319,'multiline':True]
['text':' _serverCA represents the CA to use when acting as a server
     * and validating remotes during inbound connections.
     * This comes from --tlsClusterCAFile, if available,
     * otherwise it inherits from _clientCA.
     ','line_number':1325,'multiline':True]
['text':' Weak pointer to verify that this manager is still owned by this context.','line_number':1334,'multiline':False]
['text':' Will be used if stapling is implemented.','line_number':1335,'multiline':False]
['text':' No explicit CA was specified, use the Keychain CA explicitly on client connects,','line_number':1378,'multiline':False]
['text':' even though we're going to pretend it doesn't exist on server.','line_number':1379,'multiline':False]
['text':' No inbound CA specified, share a reference with outbound CA.','line_number':1389,'multiline':False]
['text':' Map disabled protocols to range.','line_number':1397,'multiline':False]
['text':' By ignoring this value, we are disabling support until we have access to the','line_number':1407,'multiline':False]
['text':' modern library.','line_number':1408,'multiline':False]
['text':' Throw out the invalid cases.','line_number':1413,'multiline':False]
['text':' Protocol Version.','line_number':1431,'multiline':False]
['text':' Certificate.','line_number':1440,'multiline':False]
['text':' Fallthrough...','line_number':1474,'multiline':False]
['text':' We can't use uassertStatusOK here because we need to throw a NetworkException.','line_number':1507,'multiline':False]
['text':' Some system headers may define additional protocols, so suppress warnings.','line_number':1526,'multiline':False]
['text':' Record TLS version stats','line_number':1546,'multiline':False]
['text':' When remoteHost is empty, it means we're handling an Inbound connection.','line_number':1585,'multiline':False]
['text':' In that case, we in a server role, so use the _serverCA,','line_number':1586,'multiline':False]
['text':' otherwise we're in a client role, so use that.','line_number':1587,'multiline':False]
['text':' We want run the hostname through CIDR to standardize the','line_number':1603,'multiline':False]
['text':' IP Address notation, making direct comparison possible.','line_number':1604,'multiline':False]
['text':' ipv6 addresses ignore the results of this check because we','line_number':1616,'multiline':False]
['text':' cant guarantee the format of the address apple will return from','line_number':1617,'multiline':False]
['text':' comparison between the remote host and the certificate, but','line_number':1618,'multiline':False]
['text':' we anyways check the addresses again after they are canonicalized.','line_number':1619,'multiline':False]
['text':' Extract SubjectName into a human readable string.','line_number':1646,'multiline':False]
['text':' The cipher will be presented as a number.','line_number':1652,'multiline':False]
['text':' Server side.','line_number':1662,'multiline':False]
['text':' If client and server certificate are the same, log a warning.','line_number':1681,'multiline':False]
['text':' If this is an SSL server context (on a mongod/mongos)','line_number':1686,'multiline':False]
['text':' parse any client roles out of the client certificate.','line_number':1687,'multiline':False]
['text':' If this is an SSL client context (on a MongoDB server or client)','line_number':1696,'multiline':False]
['text':' perform hostname validation of the remote server','line_number':1697,'multiline':False]
['text':' Attempt to retreive "Subject Alternative Name"','line_number':1704,'multiline':False]
['text':' SANs override CN for matching purposes.','line_number':1743,'multiline':False]
['text':' Get validity dates via SecCertificateCopyValues','line_number':1799,'multiline':False]
['text':' Compute certificate thumbprint','line_number':1820,'multiline':False]
['text':' Comupte hash from bytes of certificate','line_number':1825,'multiline':False]
['text':' server CA should definitely exist, client CA is optional','line_number':1834,'multiline':False]
['text':' namespace','line_number':1846,'multiline':False]
['text':'///////////////////////////////////////////////////////////////////////////','line_number':1848,'multiline':False]
['text':' Global variable indicating if this is a server or a client instance','line_number':1850,'multiline':False]
['text':' Rethrow if a different error or we fail on final iteration','line_number':1882,'multiline':False]
['text':' namespace mongo','line_number':1894,'multiline':False]
