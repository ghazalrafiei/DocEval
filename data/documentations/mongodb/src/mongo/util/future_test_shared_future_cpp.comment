['text':'*
 *    Copyright (C) 2019-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' Tests of SharedFuture based on "core" tests.','line_number':60,'multiline':False]
['text':'Future<int>','line_number':65,'multiline':True]
['text':'Future<int>','line_number':71,'multiline':True]
['text':'Future<int>','line_number':76,'multiline':True]
['text':'Future<int>','line_number':80,'multiline':True]
['text':'(void)*const_cast<volatile bool*>(&done);  // Data Race! Uncomment to make sure TSAN works.','line_number':91,'multiline':False]
['text':'Future<void>','line_number':100,'multiline':True]
['text':'Future<void>','line_number':105,'multiline':True]
['text':'Future<void>','line_number':111,'multiline':True]
['text':'Future<void>','line_number':117,'multiline':True]
['text':'(void)*const_cast<volatile bool*>(&done);  // Data Race! Uncomment to make sure TSAN works.','line_number':125,'multiline':False]
['text':' Test of SharedSemiFuture specific details.','line_number':133,'multiline':False]
['text':'Future<int>','line_number':137,'multiline':True]
['text':' Try mixing continuations before and after completion.','line_number':153,'multiline':False]
['text':' Try to force the compiler to allocate 100K of stack.','line_number':162,'multiline':False]
['text':' NOLINT','line_number':163,'multiline':False]
['text':'Future<void>','line_number':171,'multiline':True]
['text':' Add 100 children that each use 100K of stack space.','line_number':177,'multiline':False]
['text':'Future<void>','line_number':191,'multiline':True]
['text':' Add 100 children that each use 100K of stack space on destruction.','line_number':203,'multiline':False]
['text':'Future<void>','line_number':218,'multiline':True]
['text':'Future<void>','line_number':235,'multiline':True]
['text':'Future<void>','line_number':251,'multiline':True]
['text':'Future<void>','line_number':263,'multiline':True]
['text':'Future<void>','line_number':274,'multiline':True]
['text':'Future<void>','line_number':284,'multiline':True]
['text':'* Punt until we have `std::jthread`. Joins itself in destructor. Move-only. ','line_number':301,'multiline':True]
['text':'* Try a simple single-worker shared get. Exercise JoinThread. ','line_number':315,'multiline':True]
['text':' Slightly increase the chance of racing.','line_number':322,'multiline':False]
['text':' just wait directly on shared.','line_number':329,'multiline':False]
['text':' interrupted wait, then blocking wait.','line_number':332,'multiline':False]
['text':' add a child.','line_number':340,'multiline':False]
['text':' add a grand child.','line_number':343,'multiline':False]
['text':'*
 * Define a common structure between `ConcurrentTest_OneSharedFuture` and
 * `ConcurrentTest_ManySharedFutures`. They can vary only in the ways specified
 * by the `policy` hooks. The `policy` object defines per-try state (returned by
 * `onTryBegin`), and then per-thread state within each worker thread of each
 * try (returned by `onThreadBegin`). We want to ensure that the SharedPromise
 * API works the same whether you make multiple calls to getFuture() or just
 * one and copy it around.
 ','line_number':348,'multiline':True]
['text':' Slightly increase the chance of racing.','line_number':375,'multiline':False]
['text':'*
 * Make a SharedSemiFuture from the SharedPromise at the beginning of each try.
 * Use that same object in all of the worker threads.
 ','line_number':381,'multiline':True]
['text':'*
 * Retain a SharedPromise through all the tries.
 * Peel multiple SharedSemiFuture from it, one per worker thread.
 ','line_number':399,'multiline':True]
['text':' namespace','line_number':417,'multiline':False]
['text':' namespace mongo','line_number':418,'multiline':False]
