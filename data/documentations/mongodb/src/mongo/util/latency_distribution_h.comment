['text':'*
 *    Copyright (C) 2022-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 * A class containing the latency distribution of operations performed. To avoid memory explosion
 * the distribution is computed using buckets of a user-provided resolution.
 ','line_number':40,'multiline':True]
['text':' Adds the provided duration entry into the distribution','line_number':48,'multiline':False]
['text':' As the entries are stored in each bucket we need to acquire the correct key for the','line_number':50,'multiline':False]
['text':' provided duration. In this case we want to bucket rounding up to the resolution','line_number':51,'multiline':False]
['text':' desired. This can be accomplished by performing integer division that might round down','line_number':52,'multiline':False]
['text':' and checking if it needs to be rounded up instead. That is to say if remainder of the','line_number':53,'multiline':False]
['text':' division was larger than 0.','line_number':54,'multiline':False]
['text':' Merges this distribution with another one, giving the combined result of the two.','line_number':60,'multiline':False]
['text':'','line_number':61,'multiline':False]
['text':' This is useful in multithreaded scenarios as each thread can update a local copy and then','line_number':62,'multiline':False]
['text':' merge all of them at the end, avoiding all concurrency synchronisation to the bare minimum.','line_number':63,'multiline':False]
['text':' Obtain the provided percentile of latency. The returned value will be an approximation at','line_number':76,'multiline':False]
['text':' most off by one resolution unit.','line_number':77,'multiline':False]
['text':' The buckets are sorted so we iteratively add the percentile values until we surpass the','line_number':81,'multiline':False]
['text':' target.','line_number':82,'multiline':False]
['text':' We need to perform the inverse operation on the key for the actual value. As we','line_number':89,'multiline':False]
['text':' divide by resolution we now multiply by it in order to get the original value','line_number':90,'multiline':False]
['text':' back.','line_number':91,'multiline':False]
['text':' We use a std::map as it guarantees preserving the ordering based on the key provided.','line_number':119,'multiline':False]
['text':' namespace mongo','line_number':123,'multiline':False]
