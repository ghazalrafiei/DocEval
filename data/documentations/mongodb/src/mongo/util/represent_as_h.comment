['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 * The following three methods are conversion helpers that allow us to promote
 * all numerical input to three top-level types: int64_t, uint64_t, and double.
 ','line_number':49,'multiline':True]
['text':' Floating point numbers -> double','line_number':54,'multiline':False]
['text':' Signed integral types -> int64_t','line_number':61,'multiline':False]
['text':' Unsigned integral types -> uint64_t','line_number':69,'multiline':False]
['text':'*
 * Compare two values of the same type. Return -1 if a < b, 0 if they are equal, and
 * 1 if a > b.
 ','line_number':77,'multiline':True]
['text':'*
 * Compare unsigned and signed integers.
 ','line_number':101,'multiline':True]
['text':'*
 * Compare doubles and signed integers.
 ','line_number':117,'multiline':True]
['text':' Casting int64_ts to doubles will round them','line_number':121,'multiline':False]
['text':' and give the wrong result, so convert doubles to','line_number':122,'multiline':False]
['text':' int64_ts if we can, then do the comparison.','line_number':123,'multiline':False]
['text':'*
 * Compare doubles and unsigned integers.
 ','line_number':138,'multiline':True]
['text':' Casting uint64_ts to doubles will round them','line_number':146,'multiline':False]
['text':' and give the wrong result, so convert doubles to','line_number':147,'multiline':False]
['text':' uint64_ts if we can, then do the comparison.','line_number':148,'multiline':False]
['text':'*
 * For any t and u of types T and U, promote t and u to one of the
 * top-level numerical types (int64_t, uint64_t, and double) and
 * compare them.
 *
 * Return -1 if t < u, 0 if they are equal, 1 if t > u.
 ','line_number':161,'multiline':True]
['text':'*
 * Return true if number can be converted to Output type without underflow or overflow.
 ','line_number':173,'multiline':True]
['text':' namespace detail','line_number':184,'multiline':False]
['text':'*
 * Given a number of some type Input and a desired numerical type Output,
 * this method represents the input number in the output type if possible.
 * If the given number cannot be exactly represented in the output type,
 * this method returns a disengaged optional.
 *
 * ex:
 *     auto v1 = representAs<int>(2147483647); // v1 holds 2147483647
 *     auto v2 = representAs<int>(2147483648); // v2 is disengaged
 *     auto v3 = representAs<int>(10.3);       // v3 is disengaged
 ','line_number':186,'multiline':True]
['text':' Use Decimal128's ctor taking (u)int64_t or double, if it's safe to cast to one of those.','line_number':202,'multiline':False]
['text':' If number is NaN and Output can also represent NaN, return NaN','line_number':218,'multiline':False]
['text':' Note: We need to specifically handle NaN here because of the way','line_number':219,'multiline':False]
['text':' detail::compare is implemented.','line_number':220,'multiline':False]
['text':' If Output is integral and number is a non-integral floating point value,','line_number':227,'multiline':False]
['text':' return a disengaged optional.','line_number':228,'multiline':False]
['text':' Some integers cannot be exactly represented as floating point numbers.','line_number':241,'multiline':False]
['text':' To check, we cast back to the input type if we can, and compare.','line_number':242,'multiline':False]
['text':' Overload for converting from Decimal128.','line_number':255,'multiline':False]
['text':' Unsupported type.','line_number':272,'multiline':False]
['text':' Decimal128::toDouble/toLongExact failed.','line_number':276,'multiline':False]
['text':' namespace mongo','line_number':290,'multiline':False]
