['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 * An interface for objects that run work items at specified intervals. Each individually scheduled
 * job will be called in series.
 *
 * Implementations may use whatever internal threading and eventing
 * model they wish. Implementations may choose when to stop running
 * scheduled jobs (for example, some implementations may stop running
 * when the server is in global shutdown).
 *
 * The runner will create client objects that it passes to jobs to use.
 ','line_number':47,'multiline':True]
['text':'*
         * name of the job
         ','line_number':70,'multiline':True]
['text':'*
         * A task to be run at regular intervals by the runner.
         ','line_number':75,'multiline':True]
['text':'*
         * An interval at which the job should be run.
         ','line_number':80,'multiline':True]
['text':'*
         * Whether this job is killable during stepdown.
         ','line_number':85,'multiline':True]
['text':'*
     * A ControllableJob allows a user to reschedule the execution of a Job
     ','line_number':91,'multiline':True]
['text':'*
         * Starts running the job
         ','line_number':98,'multiline':True]
['text':'*
         * Pauses the job temporarily so that it does not execute until
         * unpaused
         ','line_number':103,'multiline':True]
['text':'*
         * Resumes a paused job so that it continues executing each interval
         ','line_number':109,'multiline':True]
['text':'*
         * Stops the job, this function blocks until the job is stopped
         * Safe to invalidate the job callable after calling this.
         ','line_number':114,'multiline':True]
['text':'*
         * Returns the current period for the job
         ','line_number':120,'multiline':True]
['text':'*
         * Updates the period of the job.  This takes effect immediately by altering the current
         * scheduling of the task.  I.e. if more than ms have passed since the last execution of the
         * job, it is run immediately.  Otherwise the scheduling is adjusted forward or back by
         * abs(new - old).
         ','line_number':125,'multiline':True]
['text':'*
     * Creates a new job and adds it to the runner, but does not schedule it.
     * The caller is responsible for calling 'start' on the resulting handle in
     * order to begin the job running. This API should be used when the caller
     * is interested in observing and controlling the job execution state.
     ','line_number':136,'multiline':True]
['text':'*
 * A PeriodicJobAnchor allows the holder to control the scheduling of a job for the lifetime of the
 * anchor. When an anchor is destructed, it stops its underlying job.
 *
 * The underlying weak_ptr for this class is not synchronized. In essence, treat use of this class
 * as if it were a raw pointer to a ControllableJob.
 *
 * Each wrapped PeriodicRunner::ControllableJob function on this object throws
 * if the underlying job is gone (e.g. in shutdown).
 ','line_number':145,'multiline':True]
['text':' Note that this constructor is only intended for use with PeriodicRunner::makeJob()','line_number':160,'multiline':False]
['text':'*
     * Abandon responsibility for scheduling the execution of this job
     *
     * This effectively invalidates the anchor.
     ','line_number':179,'multiline':True]
['text':'*
     * Returns if this PeriodicJobAnchor is associated with a PeriodicRunner::ControllableJob
     *
     * This function is useful to see if a PeriodicJobAnchor is initialized. It does not necessarily
     * inform whether a PeriodicJobAnchor will throw from a control function above.
     ','line_number':186,'multiline':True]
['text':' namespace mongo','line_number':202,'multiline':False]
