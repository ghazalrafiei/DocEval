['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 * Waitable is a lightweight type that can be used with stdx::condition_variable and can do other
 * work while the condvar 'waits'.
 *
 * It handles this dance by using a special hook that condvar provides to register itself (as a
 * notifyable, which it inherits from) during calls to wait.  Then, rather than actually waiting on
 * the condvar, it invokes its run/run_until methods.
 *
 * The current implementer of Waitable is the transport layer baton type, which performs delayed IO
 * when it would otherwise block.
 *
 * Note that every Waitable should be level-triggered like its base class, Notifyable. See
 * mongo/stdx/condition_variable.h for more details.
 ','line_number':39,'multiline':True]
['text':'*
     * Run some amount of work.  The intention is that this function perform work until it's
     * possible that the surrounding condvar clause could have finished.
     *
     * Note that like regular condvar.wait, this allows implementers the flexibility to possibly
     * return early.
     *
     * We take a clock source here to allow for synthetic timeouts.
     ','line_number':127,'multiline':True]
['text':'*
     * Like run, but only until the passed deadline has passed.
     ','line_number':138,'multiline':True]
['text':' namespace mongo','line_number':147,'multiline':False]
