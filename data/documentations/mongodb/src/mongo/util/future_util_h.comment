['text':'*
 *    Copyright (C) 2019-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 * Returns a future which will be fulfilled at the given date.
 ','line_number':58,'multiline':True]
['text':'*
 * Returns a future which will be fulfilled after the given duration.
 ','line_number':63,'multiline':True]
['text':'*
 * Error status to use if any AsyncTry loop has been canceled.
 ','line_number':71,'multiline':True]
['text':'*
 * Creates an ExecutorFuture from the result of the input callable.
 ','line_number':79,'multiline':True]
['text':'*
 * Wraps a `Promise` and allows replacing the default `BrokenPromise` error with a custom status.
 *
 * Consider the following before using or making changes to this class:
 * * This type is marked non-movable for simplicity, but that can be done using `std::unique_ptr`.
 * * This is wrapping and not extending `Promise` to avoid any (performance) impact on `Promise`.
 * * There is no requirement for `_broken` to be thread-safe when this type is used appropriately.
 ','line_number':97,'multiline':True]
['text':'*
 * Represents an intermediate state which holds the body, condition, and delay between iterations of
 * a try-until loop.  See comments for AsyncTry for usage.
 *
 * Note: This is a helper class and is not intended for standalone usage.
 ','line_number':140,'multiline':True]
['text':'*
     * Launches the loop and returns an ExecutorFuture that will be resolved when the loop is
     * complete. If the executor is already shut down or the cancelToken has already been canceled
     * before the loop is launched, the loop body will never run and the resulting ExecutorFuture
     * will be set with either a ShutdownInProgress or CallbackCanceled error.
     *
     * The returned ExecutorFuture contains the last result returned by the loop body. If the last
     * iteration of the loop body threw an exception or otherwise returned an error status, the
     * returned ExecutorFuture will contain that error.
     *
     * SleepableExecutor must be a shared_ptr to an OutOfLineExecutor that also provides a function:
     * `ExecutorFuture<void> sleepFor(Milliseconds duration, const CancellationToken& token)`
     * that readies the returned future when the given duration has elapsed or token cancelled.
     ','line_number':152,'multiline':True]
['text':' Launch the recursive chain using the helper class.','line_number':174,'multiline':False]
['text':'*
     * Helper class to perform the actual looping logic with a recursive member function run().
     * Mostly needed to clean up lambda captures and make the looping logic more readable.
     ','line_number':179,'multiline':True]
['text':'*
         * Performs actual looping through recursion.
         ','line_number':198,'multiline':True]
['text':' If the request is already canceled, don't run anything.','line_number':204,'multiline':False]
['text':' Kick off the asynchronous loop.','line_number':214,'multiline':False]
['text':'*
         * Helper function that schedules an asynchronous task. This task executes the loop body and
         * either terminates the loop by emplacing the resultPromise, or makes a recursive call to
         * reschedule another iteration of the loop.
         ','line_number':221,'multiline':True]
['text':' Convert the result of the loop body into an ExecutorFuture, even if the','line_number':238,'multiline':False]
['text':' loop body is not future-returning. This isn't strictly necessary but it','line_number':239,'multiline':False]
['text':' makes implementation easier.','line_number':240,'multiline':False]
['text':' Retry after a delay.','line_number':261,'multiline':False]
['text':' Prevent another loop iteration when cancellation happens','line_number':265,'multiline':False]
['text':' after loop body','line_number':266,'multiline':False]
['text':'*
 * Represents an intermediate state which holds the body and condition of a try-until loop.  See
 * comments for AsyncTry for usage.
 *
 * Note: This is a helper class and is not intended for standalone usage.
 ','line_number':290,'multiline':True]
['text':'*
     * Creates a delay which takes place after evaluating the condition and before executing the
     * loop body.
     ','line_number':302,'multiline':True]
['text':'*
     * Creates an exponential delay which takes place after evaluating the condition and before
     * executing the loop body.
     ','line_number':312,'multiline':True]
['text':'*
     * Launches the loop and returns an ExecutorFuture that will be resolved when the loop is
     * complete. If the executor is already shut down or the cancelToken has already been canceled
     * before the loop is launched, the loop body will never run and the resulting ExecutorFuture
     * will be set with either a ShutdownInProgress or CallbackCanceled error.
     *
     * The returned ExecutorFuture contains the last result returned by the loop body. If the last
     * iteration of the loop body threw an exception or otherwise returned an error status, the
     * returned ExecutorFuture will contain that error.
     ','line_number':322,'multiline':True]
['text':' Launch the recursive chain using the helper class.','line_number':335,'multiline':False]
['text':'*
     * Helper class to perform the actual looping logic with a recursive member function run().
     * Mostly needed to clean up lambda captures and make the looping logic more readable.
     ','line_number':366,'multiline':True]
['text':'*
         * Performs actual looping through recursion.
         ','line_number':381,'multiline':True]
['text':' If the request is already canceled, don't run anything.','line_number':387,'multiline':False]
['text':' Kick off the asynchronous loop.','line_number':397,'multiline':False]
['text':'*
         * Helper function that schedules an asynchronous task. This task executes the loop body and
         * either terminates the loop by emplacing the resultPromise, or makes a recursive call to
         * reschedule another iteration of the loop.
         ','line_number':404,'multiline':True]
['text':' Convert the result of the loop body into an ExecutorFuture, even if the','line_number':419,'multiline':False]
['text':' loop body is not Future-returning. This isn't strictly necessary but it','line_number':420,'multiline':False]
['text':' makes implementation easier.','line_number':421,'multiline':False]
['text':' Helpers for functions which only take Future or ExecutorFutures, but not SemiFutures or','line_number':458,'multiline':False]
['text':' SharedSemiFutures.','line_number':459,'multiline':False]
['text':'*
 * Turns a variadic parameter pack into a vector without invoking copies if possible via static
 * casts.
 ','line_number':470,'multiline':True]
['text':' namespace future_util_details','line_number':481,'multiline':False]
['text':'*
 * A fluent-style API for executing asynchronous, future-returning try-until loops.
 *
 * Example usage to send a request until a successful status is returned:
 *    ExecutorFuture<Response> response =
 *           AsyncTry([] { return sendRequest(); })
 *          .until([](const StatusWith<Response>& swResponse) { return swResponse.isOK(); })
 *          .withDelayBetweenIterations(Milliseconds(100)) // This call is optional.
 *          .on(executor);
 *
 * The constructor for `AsyncTry` accepts a callable that is invoked as part of running every loop
 * iteration. The `until` predicate peeks at the result of running this callable to decide if the
 * loop can be terminated. The predicate must accept a `StatusWith<T>`, where `T` is the return
 * type for the callable, and should accept this argument as a const reference. This allows
 * avoiding unnecessary copies and supporting move-only types. Optionally, a delay can be added
 * after each iteration of the loop through invoking `withDelayBetweenIterations`.
 ','line_number':483,'multiline':True]
['text':'*
 * For an input vector of Future<T> or ExecutorFuture<T> elements, returns a
 * SemiFuture<std::vector<T>> that will be resolved when all input futures succeed or set with an
 * error as soon as any input future is set with an error. The resulting vector contains the results
 * of all of the input futures in the same order in which they were provided.
 ','line_number':513,'multiline':True]
['text':' A structure used to share state between the input futures.','line_number':526,'multiline':False]
['text':' Total number of input futures.','line_number':532,'multiline':False]
['text':' Tracks the number of input futures which have resolved with success so far.','line_number':534,'multiline':False]
['text':' Tracks whether or not the resultPromise has been set. Only used for the error case.','line_number':536,'multiline':False]
['text':' The promise corresponding to the resulting SemiFuture returned by this function.','line_number':538,'multiline':False]
['text':' A vector containing the results of each input future.','line_number':540,'multiline':False]
['text':' Best effort check that no error has returned, not required for correctness.','line_number':551,'multiline':False]
['text':' Put this result in its proper slot in the output vector.','line_number':553,'multiline':False]
['text':' If this is the last result to return, set the promise. Note that this','line_number':557,'multiline':False]
['text':' will never be true if one of the input futures resolves with an error,','line_number':558,'multiline':False]
['text':' since the future with an error will not cause the','line_number':559,'multiline':False]
['text':' numResultsReturnedWithSuccess count to be incremented.','line_number':560,'multiline':False]
['text':' All results are ready.','line_number':562,'multiline':False]
['text':' Make sure no other error has already been set before setting the promise.','line_number':568,'multiline':False]
['text':'*
 * Variant of whenAllSucceed for void input futures. The only behavior difference is that it returns
 * SemiFuture<void> instead of SemiFuture<std::vector<T>>.
 ','line_number':579,'multiline':True]
['text':' A structure used to share state between the input futures.','line_number':588,'multiline':False]
['text':' Total number of input futures.','line_number':592,'multiline':False]
['text':' Tracks the number of input futures which have resolved with success so far.','line_number':594,'multiline':False]
['text':' Tracks whether or not the resultPromise has been set. Only used for the error case.','line_number':596,'multiline':False]
['text':' The promise corresponding to the resulting SemiFuture returned by this function.','line_number':598,'multiline':False]
['text':' Best effort check that no error has returned, not required for correctness','line_number':609,'multiline':False]
['text':' If this is the last result to return, set the promise. Note that this will','line_number':613,'multiline':False]
['text':' never be true if one of the input futures resolves with an error, since the','line_number':614,'multiline':False]
['text':' future with an error will not cause the numResultsReturnedWithSuccess count','line_number':615,'multiline':False]
['text':' to be incremented.','line_number':616,'multiline':False]
['text':' All results are ready.','line_number':618,'multiline':False]
['text':' Make sure no other error has already been set before setting the promise.','line_number':623,'multiline':False]
['text':'*
 * Given a vector of input Futures or ExecutorFutures, returns a SemiFuture that contains the
 * results of each input future wrapped in a StatusWith to indicate whether it resolved with success
 * or failure and will be resolved when all of the input futures have resolved.
 ','line_number':634,'multiline':True]
['text':'*
     * A structure used to share state between the input futures.
     ','line_number':645,'multiline':True]
['text':' Total number of input futures.','line_number':653,'multiline':False]
['text':' Tracks the number of input futures which have resolved so far.','line_number':655,'multiline':False]
['text':' A vector containing the results of each input future.','line_number':657,'multiline':False]
['text':' The promise corresponding to the resulting SemiFuture returned by this function.','line_number':659,'multiline':False]
['text':' All results are ready.','line_number':675,'multiline':False]
['text':'*
 * Result type for the whenAny function.
 ','line_number':684,'multiline':True]
['text':' The result of the future that resolved first.','line_number':689,'multiline':False]
['text':' The index of the future that resolved first.','line_number':691,'multiline':False]
['text':'*
 * Given a vector of input Futures or ExecutorFutures, returns a SemiFuture which will contain a
 * struct containing the first of those futures to resolve along with its index in the input array.
 ','line_number':695,'multiline':True]
['text':'*
     * A structure used to share state between the input futures.
     ','line_number':705,'multiline':True]
['text':' Tracks whether or not the resultPromise has been set.','line_number':710,'multiline':False]
['text':' The promise corresponding to the resulting SemiFuture returned by this function.','line_number':712,'multiline':False]
['text':' If this is the first input future to complete, change done to true and set the','line_number':722,'multiline':False]
['text':' value on the promise.','line_number':723,'multiline':False]
['text':'*
 * Variadic template overloads for the above helper functions. Though not strictly necessary,
 * we peel off the first element of each input list in order to assist the compiler in type
 * inference and to prevent 0 length lists from compiling.
 ','line_number':733,'multiline':True]
['text':'*
 * Takes an input Future, ExecutorFuture, SemiFuture, or SharedSemiFuture and a CancellationToken,
 * and returns a new SemiFuture that will be resolved when either the input future is resolved or
 * when the input CancellationToken is canceled. If the token is canceled before the input future is
 * resolved, the resulting SemiFuture will be resolved with a CallbackCanceled error. Otherwise, the
 * resulting SemiFuture will be resolved with the same result as the input future.
 ','line_number':765,'multiline':True]
['text':'*
     * A structure used to share state between the continuation we attach to the input future and
     * the continuation we attach to the token's onCancel() future.
     ','line_number':774,'multiline':True]
['text':' Tracks whether or not the resultPromise has been set.','line_number':780,'multiline':False]
['text':' The promise corresponding to the resulting SemiFuture returned by this function.','line_number':782,'multiline':False]
['text':' If the input future completes first, change done to true and set the','line_number':793,'multiline':False]
['text':' value on the promise.','line_number':794,'multiline':False]
['text':' If the cancellation token is canceled first, change done to true and set the value on','line_number':802,'multiline':False]
['text':' the promise.','line_number':803,'multiline':False]
['text':'*
 * This class is a helper for ensuring RAII-like behavior in async code.
 *
 * This class constructs a heap allocated State object in make(), and then uses that State object
 * with a Launcher functor to create a future. The State object is persisted until the future
 * created by the Launcher completes. If the Launcher emits an exception, the state is destructed.
 * If the State ctor throws, then the error Status is returned as a ready future instead of invoking
 * the Launcher. The simplest example would be a guard that is destroyed once an async function
 * finishes:
 * ```
 * auto myFuture = future_util::AsyncState::make<MyGuard>({})
 *     .thenWithState([](MyGuard*) { return myAsyncFunc(); });
 * ```
 *
 * Note that this class is not usable for ExecutorFutures because there is no tapAll() function to
 * invoke. If you want similar behavior, simply bind your state to the final callback in the async
 * chain, but do be mindful of TODO(SERVER-66126).
 ','line_number':815,'multiline':True]
['text':'*
     * Consume the AsyncState and bind the underlying state to the tail of the future returned from
     * the launcher functor.
     *
     * If the AsyncState was constructed with a Status, then return the captured status instead of
     * running the launcher.
     ','line_number':839,'multiline':True]
['text':' The factory threw, we have no state to run the launcher with.','line_number':852,'multiline':False]
['text':' Finally, release our state.','line_number':860,'multiline':False]
['text':'*
     * This function is a helper for making an AsyncState given ala make_unique.
     *
     * If an exception would be emitted, it is instead stored in the AsyncState.
     ','line_number':866,'multiline':True]
['text':'*
     * This ctor allows make to capture exceptions and defer them until someone invokes
     * thenWithState(). It is private simply because it is difficult to justify a good use case for
     * it by an external user.
     ','line_number':882,'multiline':True]
['text':' This function is syntactic sugar for AsyncState<T>::make().','line_number':893,'multiline':False]
['text':' namespace future_util','line_number':898,'multiline':False]
['text':' namespace mongo','line_number':899,'multiline':False]
