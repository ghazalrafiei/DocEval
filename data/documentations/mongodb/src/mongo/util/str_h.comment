['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 * String utilities.
 *
 * TODO: De-inline.
 ','line_number':32,'multiline':True]
['text':'* the idea here is to make one liners easy.  e.g.:

       return str::stream() << 1 << ' ' << 2;

    since the following doesn't work:

       (std::stringstream() << 1).str();

    TODO: To avoid implicit conversions in relational operation expressions, this stream
    class should provide a full symmetric set of relational operators vs itself, vs
    std::string, vs mongo::StringData, and vs const char*, but that's a lot of functions.
','line_number':64,'multiline':True]
['text':'*
     * Fail to compile if passed an unevaluated function, rather than allow it to decay and invoke
     * the bool overload. This catches both passing std::hex (which isn't supported by this type)
     * and forgetting to add () when doing `stream << someFuntion`.
     ','line_number':94,'multiline':True]
['text':' while these are trivial today use in case we do different wide char things later','line_number':118,'multiline':False]
['text':'* find char x, and return rest of the string thereafter, or an empty string if not found ','line_number':145,'multiline':True]
['text':'* find string x, and return rest of the string thereafter, or an empty string if not found ','line_number':155,'multiline':True]
['text':'* @return true if s contains x ','line_number':165,'multiline':True]
['text':'* @return true if s contains x ','line_number':170,'multiline':True]
['text':'* @return everything before the character x, else entire string ','line_number':175,'multiline':True]
['text':' loop instead of strchr, so if we fail to find we don't have to iterate again.','line_number':178,'multiline':False]
['text':'* @return everything before the character x, else entire string ','line_number':184,'multiline':True]
['text':'* @return everything before the string x, else entire string ','line_number':190,'multiline':True]
['text':'* check if if strings share a common starting prefix
    @return offset of divergence (or length if equal).  0=nothing in common. ','line_number':196,'multiline':True]
['text':'* std::string to unsigned. zero if not a number. can end with non-num chars ','line_number':215,'multiline':True]
['text':'* split a string on a specific char.  We don't split N times, just once on the first occurrence.
   If char not present, 'before' contains entire input string and 'after' is empty.
   @return true if char found
','line_number':228,'multiline':True]
['text':'* split scanning reverse direction. Splits ONCE ONLY. ','line_number':246,'multiline':True]
['text':'* @return number of occurrences of c in s ','line_number':262,'multiline':True]
['text':'* trim leading spaces. spaces only, not tabs etc. ','line_number':271,'multiline':True]
['text':'*
 * UTF-8 multi-byte code points consist of one leading byte of the form 11xxxxxx, and potentially
 * many continuation bytes of the form 10xxxxxx. This method checks whether 'charByte' is a leading
 * byte.
 ','line_number':280,'multiline':True]
['text':'*
 * UTF-8 single-byte code points are of the form 0xxxxxxx. This method checks whether 'charByte' is
 * a single-byte code point.
 ','line_number':289,'multiline':True]
['text':' In UTF-8, the number of leading ones is the number of bytes the code point takes up.','line_number':304,'multiline':False]
['text':'*
 * UTF-8 multi-byte code points consist of one leading byte of the form 11xxxxxx, and potentially
 * many continuation bytes of the form 10xxxxxx. This method checks whether 'charByte' is a
 * continuation byte.
 ','line_number':308,'multiline':True]
['text':'*
 * Assuming 'str' stores a UTF-8 string, returns the number of UTF codepoints. The return value is
 * undefined if the input is not a well formed UTF-8 string.
 ','line_number':317,'multiline':True]
['text':' Performs truncation at closest UTF-8 codepoint boundary to guarantee the end result to be valid','line_number':330,'multiline':False]
['text':' UTF-8 Input encoding has to be valid UTF-8. Random-access iterator required','line_number':331,'multiline':False]
['text':' If we are requesting more bytes than exists in the range, then there's nothing to do','line_number':334,'multiline':False]
['text':' Look back until we find the beginning of a unicode codepoint, extract its expected number of','line_number':342,'multiline':False]
['text':' bytes','line_number':343,'multiline':False]
['text':' Check we had the expected number of continuation bytes. If not skip this codepoint.','line_number':358,'multiline':False]
['text':' This was a broken codepoint, go back one extra step to skip it','line_number':361,'multiline':False]
['text':'* Functor for combining lexical and numeric comparisons. ','line_number':390,'multiline':True]
['text':'* @param lexOnly - compare all characters lexically, including digits. ','line_number':393,'multiline':True]
['text':'*
     * Non numeric characters are compared lexicographically; numeric substrings
     * are compared numerically; dots separate ordered comparable subunits.
     * For convenience, character 255 is greater than anything else.
     * @param lexOnly - compare all characters lexically, including digits.
     ','line_number':395,'multiline':True]
['text':' TODO: Sane-ify core std::string functionality','line_number':409,'multiline':False]
['text':' For now, this needs to be near the LexNumCmp or else','line_number':410,'multiline':False]
['text':'*
 * A method to escape whitespace and control characters in strings. For example, the string "\t"
 * goes to "\\t". If `escape_slash` is true, then "/" goes to "\\/".
 ','line_number':413,'multiline':True]
['text':'*
 * Converts 'integer' from a base-10 string to a size_t value or returns boost::none if 'integer'
 * is not a valid base-10 string. A valid string is not allowed to have anything but decimal
 * numerals, not even a +/- prefix or leading/trailing whitespace.
 ','line_number':419,'multiline':True]
['text':'*
 * Converts a double to a string with specified precision. If unspecified, default to 17, which is
 * the maximum decimal precision possible from a standard double.
 ','line_number':426,'multiline':True]
['text':' namespace str','line_number':432,'multiline':False]
['text':'*
 * In C++20, the "u8" prefix yields a new type, char8_t. However, many of our
 * interfaces really want to deal in plain char*. Since the u8 is about the encoding
 * not the type, provide a widget that converts the type back to a const char*. So when
 * you say:
 *
 *     const auto testString = u8"..."_as_char_ptr;
 *
 * You get back a vanilla const char* but to something with a known
 * encoding. In C++17 mode, there is nothing to do.
 ','line_number':435,'multiline':True]
['text':' namespace literals','line_number':455,'multiline':False]
['text':' namespace mongo','line_number':457,'multiline':False]
