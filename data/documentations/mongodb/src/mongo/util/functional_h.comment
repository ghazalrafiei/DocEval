['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 * A function_ref is a type-erased callable similar to std::function, however it does not own the
 * underlying object, similar to StringData vs std::string. It should generally only be used as a
 * parameter to functions that invoke their callback while running. It should generally not be put
 * in a variable or stashed for calling later.
 *
 * In the specific case of a function_ref constructed from a function or function pointer it will
 * store the function pointer directly rather than a pointer to the function pointer, so you do not
 * need to keep function pointers alive.
 *
 * function_refs are intended to be passed by value.
 *
 * Like a reference, this type has no "null" state. It is not default constructable, and moves are
 * (trivial) copies.
 *
 * This API is based on the proposed std::function_ref from https://wg21.link/P0792. It was at R8 at
 * the time this class was initially written.
 ','line_number':46,'multiline':True]
['text':'* Implicitly convertible from any `f` callable with signature `RetType f(Args...)`. ','line_number':67,'multiline':True]
['text':' removing then re-adding pointer ensures that (language-level) function references and','line_number':72,'multiline':False]
['text':' function pointer are treated the same.','line_number':73,'multiline':False]
['text':' Using reinterpret_cast rather than static cast to map to and from void* in order to','line_number':76,'multiline':False]
['text':' support function pointers. For object pointers, reinterpret_cast is defined by doing as','line_number':77,'multiline':False]
['text':' static_cast through a void* anyway, so this isn't actually doing anything different in','line_number':78,'multiline':False]
['text':' that case.','line_number':79,'multiline':False]
['text':' allow function references to decay to function pointer.','line_number':82,'multiline':False]
['text':' store the pointer directly in _target.','line_number':83,'multiline':False]
['text':' Make sure we didn't lose any important qualifications.','line_number':85,'multiline':False]
['text':' The reinterpret_cast will add-back the const qualification removed by the const_cast','line_number':91,'multiline':False]
['text':' if F is const-qualified. This means that func will have the same const-qualifications','line_number':92,'multiline':False]
['text':' as the object passed into the constructor. The const_cast is needed in order to','line_number':93,'multiline':False]
['text':' support non-const callable objects correctly. An alternative would be to make _target','line_number':94,'multiline':False]
['text':' a non-const void*, but then we would need to remove const in the constructor and this','line_number':95,'multiline':False]
['text':' seemed cleaner.','line_number':96,'multiline':False]
['text':' Implicitly ignore the return. This avoids issues if func() returns a value,','line_number':99,'multiline':False]
['text':' while ensuring we still get a warning if the value is [[nodiscard]].','line_number':100,'multiline':False]
['text':'*
     * function_ref<Sig> may only be assigned from a function_ref<Sig> (with an identical Sig), or a
     * function pointer/reference.
     *
     * Other cases are likely to dangle because they may capture a reference to a temporary that is
     * about to be destoyed, and unlike in the case we are implicitly constructing an argument, we
     * can't usefully use the function_ref before that happens (ignoring comma shenanigans). If
     * somebody really needs it, we could try to allow T& but not T&&, since T& is less likely to
     * dangle, but I don't think there is an actual use case for this, so not doing it at this time.
     ','line_number':111,'multiline':True]
['text':' Optimization note: An argument could be made for putting the arguments first and the data','line_number':129,'multiline':False]
['text':' last. That would mean that each argument is in the same slot it will need to be so that we','line_number':130,'multiline':False]
['text':' don't need to waste instructions sliding them around in registers. However, a very common','line_number':131,'multiline':False]
['text':' case is lambdas, and in particular lambdas like this:','line_number':132,'multiline':False]
['text':'    [&](SomeArgs args) { return this->method(args); }','line_number':133,'multiline':False]
['text':' Since that lambda is likely to be directly inlined into the type-erasure lambda, and','line_number':134,'multiline':False]
['text':' function_ref::operator() is likely to be inlined into its caller, the current argument order','line_number':135,'multiline':False]
['text':' will result in the arguments being in the correct slots, with the only fixup being to replace','line_number':136,'multiline':False]
['text':' the data pointer with the stored this pointer, since in most ABIs the implicit argument','line_number':137,'multiline':False]
['text':' parameter is treated as if it were the first argument.','line_number':138,'multiline':False]
['text':' There is also a trade-off of Args vs Args&&. The former is more efficient for trivially','line_number':139,'multiline':False]
['text':' copiable types like int and StringData, but the latter is better for expensive-to-move types','line_number':140,'multiline':False]
['text':' like std::string. I opted for the former so that this is cheap when doing cheap things and','line_number':141,'multiline':False]
['text':' because you can always pass expensive-to-move types by reference if you want to, but if we','line_number':142,'multiline':False]
['text':' added a reference here, you couldn't remove it.','line_number':143,'multiline':False]
['text':'*
 * A `unique_function` is a move-only, type-erased functor object similar to `std::function`.
 * It is useful in situations where a functor cannot be wrapped in `std::function` objects because
 * it is incapable of being copied.  Often this happens with C++14 or later lambdas which capture a
 * `std::unique_ptr` by move.  The interface of `unique_function` is nearly identical to
 * `std::function`, except that it is not copyable.
 ','line_number':153,'multiline':True]
['text':' `TagTypeBase` is used as a base for the `TagType` type, to prevent it from being an','line_number':163,'multiline':False]
['text':' aggregate.','line_number':164,'multiline':False]
['text':' `TagType` is used as a placeholder type in parameter lists for `enable_if` clauses.  They','line_number':169,'multiline':False]
['text':' have to be real parameters, not template parameters, due to MSVC limitations.','line_number':170,'multiline':False]
['text':' TODO: Look into creating a mechanism based upon a unique_ptr to `void *`-like state, and a','line_number':197,'multiline':False]
['text':' `void *` accepting function object.  This will permit reusing the core impl object when','line_number':198,'multiline':False]
['text':' converting between related function types, such as','line_number':199,'multiline':False]
['text':' `int (std::string)` -> `void (const char *)`','line_number':200,'multiline':False]
['text':' implicit ','line_number':202,'multiline':True]
['text':' The remaining arguments here are only for SFINAE purposes to enable this ctor when our','line_number':205,'multiline':False]
['text':' requirements are met.  They must be concrete parameters not template parameters to work','line_number':206,'multiline':False]
['text':' around bugs in some compilers that we presently use.  We may be able to revisit this','line_number':207,'multiline':False]
['text':' design after toolchain upgrades for C++17.','line_number':208,'multiline':False]
['text':' Needed to make `std::is_convertible<mongo::unique_function<...>, std::function<...>>` be','line_number':227,'multiline':False]
['text':' `std::false_type`.  `mongo::unique_function` objects are not convertible to any kind of','line_number':228,'multiline':False]
['text':' `std::function` object, since the latter requires a copy constructor, which the former does','line_number':229,'multiline':False]
['text':' not provide.  If you see a compiler error which references this line, you have tried to','line_number':230,'multiline':False]
['text':' assign a `unique_function` object to a `std::function` object which is impossible -- please','line_number':231,'multiline':False]
['text':' check your variables and function signatures.','line_number':232,'multiline':False]
['text':'','line_number':233,'multiline':False]
['text':' NOTE: This is not quite able to disable all `std::function` conversions on MSVC, at this','line_number':234,'multiline':False]
['text':' time.','line_number':235,'multiline':False]
['text':' The `TagType` type cannot be constructed as a default function-parameter in Clang.  So we use','line_number':242,'multiline':False]
['text':' a static member function that initializes that default parameter.','line_number':243,'multiline':False]
['text':' Implicitly ignore the return. This avoids issues if func() returns a value,','line_number':260,'multiline':False]
['text':' while ensuring we still get a warning if the value is [[nodiscard]].','line_number':261,'multiline':False]
['text':'*
 * Helper to pattern-match the signatures for all combinations of const and l-value-qualifed member
 * function pointers. We don't currently support r-value-qualified call operators.
 ','line_number':277,'multiline':True]
['text':'*
 * Deduction guides for unique_function<Sig> that pluck the signature off of function pointers and
 * non-overloaded, non-generic function objects such as lambdas that don't use `auto` arguments.
 ','line_number':292,'multiline':True]
['text':' namespace mongo','line_number':320,'multiline':False]
