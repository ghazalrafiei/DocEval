['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' IWYU pragma: no_include "cxxabi.h"','line_number':33,'multiline':False]
['text':' IWYU pragma: no_include "libunwind-x86_64.h"','line_number':44,'multiline':False]
['text':' IWYU pragma: keep','line_number':46,'multiline':False]
['text':' IWYU pragma: keep','line_number':52,'multiline':False]
['text':' TODO: SERVER-48622 (and see also https://github.com/google/sanitizers/issues/943)','line_number':63,'multiline':False]
['text':' IWYU pragma: keep','line_number':76,'multiline':False]
['text':' Answer might be negative, but that should be a peculiar case.','line_number':91,'multiline':False]
['text':' Add the processInfo block','line_number':97,'multiline':False]
['text':' only include the somap entries relevant to the backtrace','line_number':100,'multiline':False]
['text':' include "a" field with raw addr (use for fatal traces only)','line_number':103,'multiline':False]
['text':' E.g., for "/foo/bar/my.txt", returns "my.txt".','line_number':108,'multiline':False]
['text':'*
 * Iterates through the stacktrace to extract the base for each address in the
 * stacktrace. Returns a sorted, unique sequence of these bases.
 ','line_number':125,'multiline':True]
['text':' Add the soFile base into bases, keeping it sorted and unique.','line_number':135,'multiline':False]
['text':' skip duplicate base','line_number':139,'multiline':False]
['text':'*
 * Most elements of `bsonProcInfo` are copied verbatim into the `jsonProcInfo` Json
 * object. But the "somap" BSON Array is filtered to only include elements corresponding
 * to the addresses contained by `bases`.
 ','line_number':170,'multiline':True]
['text':' Not even shared object information, just punt with unknown filename (SERVER-43551)','line_number':232,'multiline':False]
['text':' `man dladdr`:','line_number':240,'multiline':False]
['text':'   On success, these functions return a nonzero value.  If the address','line_number':241,'multiline':False]
['text':'   specified in addr could be matched to a shared object, but not to a','line_number':242,'multiline':False]
['text':'   symbol in the shared object, then the info->dli_sname and','line_number':243,'multiline':False]
['text':'   info->dli_saddr fields are set to NULL.','line_number':244,'multiline':False]
['text':' f.address doesn't map to a shared object','line_number':246,'multiline':False]
['text':' libunwind assumes that register/state capture (unw_getcontext) and stack unwinding','line_number':261,'multiline':False]
['text':' (unw_step) happen in the same or child frames.','line_number':262,'multiline':False]
['text':' `unw_get_proc_name`, with its access to a cursor, and to libunwind's','line_number':308,'multiline':False]
['text':' dwarf reader, can generate better metadata than mergeDlInfo, so prefer it.','line_number':309,'multiline':False]
['text':' MONGO_STACKTRACE_BACKEND','line_number':347,'multiline':False]
['text':'*
 * Prints a stack backtrace for the current thread to the specified sink.
 * @param sink sink to print to, or print to LOGV2 if sink is nullptr.
 *
 * The format of the backtrace is:
 *
 *     {
 *      backtrace: [...],
 *      processInfo: {...}
 *     }
 *
 * The backtrace will be a JSON object with a "backtrace" field, and optionally others.
 * The "backtrace" field is an array of frame objects. A frame object has a
 * "b" field, which is the base-address of the library or executable containing the symbol, and
 * an "o" field, which is the offset into said library or executable of the symbol.
 *
 * The backtrace may optionally contain additional information useful to a backtrace
 * analysis tool. For example, on Linux it contains a subobject named "somap", describing
 * the objects referenced in the "b" fields of the "backtrace" list.
 ','line_number':394,'multiline':True]
['text':' namespace','line_number':434,'multiline':False]
['text':' namespace stack_trace_detail','line_number':435,'multiline':False]
['text':' namespace mongo','line_number':482,'multiline':False]
