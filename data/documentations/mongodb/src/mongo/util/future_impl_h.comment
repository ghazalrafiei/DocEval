['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 * Transitional tags for specifying destruction order semantics for continuations.
 * The long-term goal is to eliminate `destroyWeak` via manual review of existing
 * continuations.
 * A continuation can be switched to `destroyStrong` when it has been determined
 * that subsequent continuations do not depend on the lifetime of its captures.
 * The plan is to remove these transitional tags altogether after _all_ continuations
 * have been thus converted to the strong semantics specification.
 ','line_number':60,'multiline':True]
['text':'*
 * The passed-in continuation function may or may not be cleared
 * immediately after the function runs. In some contexts the entire
 * continuation chain will run and callbacks are destroyed as the stack
 * unwinds. In other contexts, each stage of the continuation will destroy its
 * callback immediately following execution.
 ','line_number':76,'multiline':True]
['text':'*
 * The passed-in continuation function will always be cleared
 * immediately after the function runs, and before the subsequent continuation runs.
 ','line_number':85,'multiline':True]
['text':'*
 * Used by Future implementation details to apply a consistent default FuturePolicy.
 ','line_number':91,'multiline':True]
['text':' std::is_copy_constructible incorrectly returns true for containers of move-only types, so we use','line_number':132,'multiline':False]
['text':' our own modified version instead. Note this version is brittle at the moment, since it determines','line_number':133,'multiline':False]
['text':' whether or not the type is a container by the presense of a value_type field. After we switch to','line_number':134,'multiline':False]
['text':' C++20 we can use the Container concept for this instread.','line_number':135,'multiline':False]
['text':' Weird but right. ExecutorFuture needs to know the executor prior to running the continuation,','line_number':211,'multiline':False]
['text':' and in this case it doesn't.','line_number':212,'multiline':False]
['text':' It will generate a child continuation.','line_number':217,'multiline':False]
['text':' This is used to "normalize" void since it can't be used as an argument and it becomes Status','line_number':237,'multiline':False]
['text':' rather than StatusWith<void>.','line_number':238,'multiline':False]
['text':' Nothing actually returns this.','line_number':246,'multiline':False]
['text':' Like is_invocable_v<Func, Args>, but handles Args == void correctly.','line_number':270,'multiline':False]
['text':' Like is_invocable_r_v<Func, Args>, but handles Args == void correctly and unwraps the return.','line_number':275,'multiline':False]
['text':' Like isCallableR, but doesn't unwrap the result type.','line_number':280,'multiline':False]
['text':'*
 * call() normalizes arguments to hide the FakeVoid shenanigans from users of Futures.
 * In the future it may also expand tuples to argument lists.
 ','line_number':285,'multiline':True]
['text':'*
 * statusCall() normalizes return values so everything returns StatusWith<T>. Exceptions are
 * converted to !OK statuses. void and Status returns are converted to StatusWith<FakeVoid>
 ','line_number':304,'multiline':True]
['text':'*
 * throwingCall() normalizes return values so everything returns T or FakeVoid. !OK Statuses are
 * converted exceptions. void and Status returns are converted to FakeVoid.
 *
 * This is equivalent to uassertStatusOK(statusCall(func, args...)), but avoids catching just to
 * rethrow.
 ','line_number':330,'multiline':True]
['text':'*
 * SSB is SharedStateBase, and this is its current state.
 *
 * Legal transitions on future side:
 *      kInit -> kWaitingOrHaveChildren
 *      kInit -> kHaveCallback
 *      kWaitingOrHaveChildren -> kHaveCallback
 *
 * Legal transitions on promise side:
 *      kInit -> kFinished
 *      kWaitingOrHaveChildren -> kFinished
 *      kHaveCallback -> kFinished
 *
 * Note that all and only downward transitions are legal.
 *
 * Each thread must change the state *after* it is set up all data that it is releasing to the other
 * side. This must be done with an exchange() or compareExchange() so that you know what to do if
 * the other side finished its transition before you.
 ','line_number':363,'multiline':True]
['text':' Initial state: Promise hasn't been completed and has nothing to do when it is.','line_number':383,'multiline':False]
['text':' Promise hasn't been completed. Either someone has constructed the condvar and may be waiting','line_number':386,'multiline':False]
['text':' on it, or children is non-empty. Either way, the completer of the promise must acquire the','line_number':387,'multiline':False]
['text':' mutex inside transitionToFinished() to determine what needs to be done. We do not transition','line_number':388,'multiline':False]
['text':' back to kInit if they give up on waiting. There is also no callback directly registered in','line_number':389,'multiline':False]
['text':' this state, although callbacks may be registered on children.','line_number':390,'multiline':False]
['text':' Promise hasn't been completed. Someone has registered a callback to be run when it is.','line_number':393,'multiline':False]
['text':' There is no-one currently waiting on the condvar, and there are no children. Once a future is','line_number':394,'multiline':False]
['text':' shared, its state can never transition to this.','line_number':395,'multiline':False]
['text':' The promise has been completed with a value or error. This is the terminal state. This should','line_number':398,'multiline':False]
['text':' stay last since we have code like assert(state < kFinished).','line_number':399,'multiline':False]
['text':' Only called by future side, but may be called multiple times if waiting times out and is','line_number':414,'multiline':False]
['text':' retried.','line_number':415,'multiline':False]
['text':' We don't need release (or acq_rel) here because the cv construction will be released','line_number':425,'multiline':False]
['text':' and acquired via the mutex.','line_number':426,'multiline':False]
['text':' transitionToFinished() transitioned after we did our initial check.','line_number':430,'multiline':False]
['text':' Someone else did this transition.','line_number':433,'multiline':False]
['text':' Someone has already created the cv and put us in the waiting state. The promise may','line_number':437,'multiline':False]
['text':' also have completed after we checked above, so we can't assume we aren't at','line_number':438,'multiline':False]
['text':' kFinished.','line_number':439,'multiline':False]
['text':' The mx locking above is insufficient to establish an acquire if state transitions to','line_number':444,'multiline':False]
['text':' kFinished before we get here, but we aquire mx before the producer does.','line_number':445,'multiline':False]
['text':' Remaining methods only called from promise side.','line_number':450,'multiline':False]
['text':' If you hit this limit one of two things has probably happened','line_number':460,'multiline':False]
['text':'','line_number':461,'multiline':False]
['text':' 1. The justForContinuation optimization isn't working.','line_number':462,'multiline':False]
['text':' 2. You may be creating a variable length chain.','line_number':463,'multiline':False]
['text':'','line_number':464,'multiline':False]
['text':' If those statements don't mean anything to you, please ask an editor of this file.','line_number':465,'multiline':False]
['text':' If they don't work here anymore, I'm sorry.','line_number':466,'multiline':False]
['text':' This must be done inside the lock to correctly synchronize with wait().','line_number':491,'multiline':False]
['text':'','line_number':511,'multiline':False]
['text':' Concurrency Rules for members: Each non-atomic member is initially owned by either the','line_number':512,'multiline':False]
['text':' Promise side or the Future side, indicated by a P/F comment. The general rule is that members','line_number':513,'multiline':False]
['text':' representing the propagating data are owned by Promise, while members representing what','line_number':514,'multiline':False]
['text':' to do with the data are owned by Future. The owner may freely modify the members it owns','line_number':515,'multiline':False]
['text':' until it releases them by doing a release-store to state of kFinished from Promise or','line_number':516,'multiline':False]
['text':' kWaitingOrHaveChildren from Future. Promise can acquire access to all members by doing an','line_number':517,'multiline':False]
['text':' acquire-load of state and seeing kWaitingOrHaveChildren (or Future with kFinished).','line_number':518,'multiline':False]
['text':' Transitions should be done via acquire-release exchanges to combine both actions.','line_number':519,'multiline':False]
['text':'','line_number':520,'multiline':False]
['text':' Future::propagateResults uses an alternative mechanism to transfer ownership of the','line_number':521,'multiline':False]
['text':' continuation member. The logical Future-side does a release-store of true to','line_number':522,'multiline':False]
['text':' isJustForContinuation, and the Promise-side can do an acquire-load seeing true to get access.','line_number':523,'multiline':False]
['text':'','line_number':524,'multiline':False]
['text':' NOLINT','line_number':527,'multiline':False]
['text':' This is used to prevent infinite chains of SharedStates that just propagate results.','line_number':529,'multiline':False]
['text':' NOLINT','line_number':530,'multiline':False]
['text':' This is likely to be a different derived type from this, since it is the logical output of','line_number':532,'multiline':False]
['text':' callback.','line_number':533,'multiline':False]
['text':' F','line_number':534,'multiline':False]
['text':' Takes this as argument and usually writes to continuation.','line_number':536,'multiline':False]
['text':' F','line_number':537,'multiline':False]
['text':' These are only used to signal completion to blocking waiters. Benchmarks showed that it was','line_number':539,'multiline':False]
['text':' worth deferring the construction of cv, so it can be avoided when it isn't necessary.','line_number':540,'multiline':False]
['text':' NOLINT F','line_number':542,'multiline':False]
['text':' F (but guarded by mutex)','line_number':543,'multiline':False]
['text':' This holds the children created from a SharedSemiFuture. When this SharedState is completed,','line_number':545,'multiline':False]
['text':' the result will be copied in to each of the children. This allows their continuations to have','line_number':546,'multiline':False]
['text':' their own mutable copy, rather than tracking mutability for each callback.','line_number':547,'multiline':False]
['text':' F (but guarded by mutex)','line_number':548,'multiline':False]
['text':' P','line_number':550,'multiline':False]
['text':' Initial methods only called from future side.','line_number':559,'multiline':False]
['text':' T has been through VoidToFakeVoid.','line_number':562,'multiline':False]
['text':' On the success path, our reads and writes to children are protected by the mutex','line_number':575,'multiline':False]
['text':'','line_number':576,'multiline':False]
['text':' On the failure path, we raced with transitionToFinished() and lost, so we need to','line_number':577,'multiline':False]
['text':' synchronize with it via acquire before accessing the results since it wouldn't have','line_number':578,'multiline':False]
['text':' taken the mutex.','line_number':579,'multiline':False]
['text':' If oldState became kFinished after we checked (or successfully stored','line_number':592,'multiline':False]
['text':' kWaitingOrHaveChildren), the returned continuation will be completed by the promise side','line_number':593,'multiline':False]
['text':' once it acquires the lock since we are adding ourself to the chain here.','line_number':594,'multiline':False]
['text':'add ref','line_number':596,'multiline':True]
['text':' Remaining methods only called by promise side.','line_number':601,'multiline':False]
['text':' fillFromConst and fillFromMove are identical other than using as_const() vs move().','line_number':603,'multiline':False]
['text':' T has been through VoidToFakeVoid.','line_number':655,'multiline':False]
['text':' P','line_number':664,'multiline':False]
['text':'implicit','line_number':799,'multiline':True]
['text':'implicit','line_number':800,'multiline':True]
['text':' TODO emplace?','line_number':875,'multiline':False]
['text':'*
     * Returns whether the Future has or can eventually have access to a deferred value or status.
     *
     * NOTE: this does not return whether that deferred value is itself valid. It could have been
     * moved from.
     ','line_number':897,'multiline':True]
['text':' on ready success:','line_number':953,'multiline':False]
['text':' on ready failure:','line_number':955,'multiline':False]
['text':' on not ready yet:','line_number':957,'multiline':False]
['text':' on ready success:','line_number':977,'multiline':False]
['text':' on ready failure:','line_number':981,'multiline':False]
['text':' on not ready yet:','line_number':983,'multiline':False]
['text':' on ready success:','line_number':997,'multiline':False]
['text':' on ready failure:','line_number':1005,'multiline':False]
['text':' on not ready yet:','line_number':1009,'multiline':False]
['text':' on ready success:','line_number':1036,'multiline':False]
['text':' on ready failure:','line_number':1041,'multiline':False]
['text':' on not ready yet:','line_number':1046,'multiline':False]
['text':' on ready success:','line_number':1061,'multiline':False]
['text':' on ready failure:','line_number':1070,'multiline':False]
['text':' on not ready yet:','line_number':1079,'multiline':False]
['text':' on ready success:','line_number':1117,'multiline':False]
['text':' on ready failure:','line_number':1119,'multiline':False]
['text':' on not ready yet:','line_number':1123,'multiline':False]
['text':' on ready success:','line_number':1136,'multiline':False]
['text':' on ready failure:','line_number':1138,'multiline':False]
['text':' on not ready yet:','line_number':1146,'multiline':False]
['text':' Avoid copy/moving func if we know we won't call it.','line_number':1173,'multiline':False]
['text':' TODO in C++17 with constexpr if this can be done cleaner and more efficiently by not','line_number':1175,'multiline':False]
['text':' throwing.','line_number':1176,'multiline':False]
['text':' on ready success:','line_number':1248,'multiline':False]
['text':' on ready failure:','line_number':1250,'multiline':False]
['text':' on not ready yet:','line_number':1252,'multiline':False]
['text':' If the output is just for continuation, bypass it and just directly fill in the','line_number':1254,'multiline':False]
['text':' SharedState that it would write to. The concurrency situation is a bit subtle','line_number':1255,'multiline':False]
['text':' here since we are the Future-side of shared, but the Promise-side of output.','line_number':1256,'multiline':False]
['text':' The rule is that p->isJustForContinuation must be acquire-read as true before','line_number':1257,'multiline':False]
['text':' examining p->continuation, and p->continuation must be written before doing the','line_number':1258,'multiline':False]
['text':' release-store of true to p->isJustForContinuation.','line_number':1259,'multiline':False]
['text':' All callbacks are called immediately so they are allowed to capture everything by reference.','line_number':1282,'multiline':False]
['text':' All callbacks should return the same return type.','line_number':1283,'multiline':False]
['text':' This is always done after notReady, which never throws. It is in an ON_BLOCK_EXIT to','line_number':1301,'multiline':False]
['text':' support both void- and value-returning notReady implementations since we can't assign','line_number':1302,'multiline':False]
['text':' void to a variable.','line_number':1303,'multiline':False]
['text':' The setting of a callback by `notReady` must explicitly make this Future non-valid().','line_number':1305,'multiline':False]
['text':' oldState could be either kInit or kWaitingOrHaveChildren, depending on whether we've','line_number':1309,'multiline':False]
['text':' failed a call to wait().','line_number':1310,'multiline':False]
['text':' success and fail may be called from a continuation so they shouldn't capture anything.','line_number':1321,'multiline':False]
['text':' Make sure they don't capture anything.','line_number':1326,'multiline':False]
['text':'add ref','line_number':1360,'multiline':True]
['text':'*
     * Ensures clearing of the moved-from optional in the move assignment operator and move
     * constructor. Regular boost::optional doesn't enforce such strict semantics. This behaviour
     * enables `has_value`, `operator!`, `operator bool` to be a source of truth after a move.
     ','line_number':1370,'multiline':True]
['text':' At most one of these will be active.','line_number':1407,'multiline':False]
['text':'implicit','line_number':1422,'multiline':True]
['text':' Only replacing a few methods to use void/Status in place of FakeVoid. The callback method','line_number':1424,'multiline':False]
['text':' fixups are handled by call().','line_number':1425,'multiline':False]
['text':' namespace future_details','line_number':1473,'multiline':False]
['text':' namespace mongo','line_number':1474,'multiline':False]
