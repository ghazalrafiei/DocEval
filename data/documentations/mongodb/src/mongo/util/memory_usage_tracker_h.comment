['text':'*
 *    Copyright (C) 2021-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 * This is a utility class for tracking memory usage across multiple arbitrary operators or
 * functions, which are identified by their string names. Tracks both current and highest
 * encountered memory consumption,
 *
 * It can be used directly by calling MemoryUsageTracker::add(int64_t diff), or by creating a
 * dependent tracker via MemoryUsageTracker::operator[].
 *
 * Dependent tracker will update both it's own memory and the total. It is used to tracker the
 * consumption of individual parts, such as different accumulators in $group, while simulaniously
 * keeping track of the total.
 *
 * TODO SERVER-80007: move implementation to .cpp to save on compilation time.
 ','line_number':49,'multiline':True]
['text':'*
     * The class that does the tracking. Instances should be created via
     * MemoryUsageTracker::operator[].
     ','line_number':65,'multiline':True]
['text':' Maximum memory consumption thus far observed for this function.','line_number':111,'multiline':False]
['text':' Tracks the current memory footprint.','line_number':113,'multiline':False]
['text':'*
     * Sets the new total for 'name', and updates the current total memory usage.
     ','line_number':122,'multiline':True]
['text':'*
     * Resets both the total memory usage as well as the per-function memory usage, but retains the
     * current value for maximum total memory usage.
     ','line_number':129,'multiline':True]
['text':'*
     * Provides read-only access to the function memory tracker for 'name'.
     ','line_number':140,'multiline':True]
['text':'*
     * Non-const version, creates a new element if one doesn't exist and returns a reference to it.
     ','line_number':152,'multiline':True]
['text':'*
     * Updates the memory usage for 'name' by adding 'diff' to the current memory usage for
     * that function. Also updates the total memory usage.
     ','line_number':161,'multiline':True]
['text':'*
     * Updates total memory usage.
     ','line_number':169,'multiline':True]
['text':' Tracks current memory used.','line_number':205,'multiline':False]
['text':' Tracks memory consumption per function using the output field name as a key.','line_number':207,'multiline':False]
['text':' Lightweight version of memory usage tracker for use cases where we don't need historical maximum','line_number':211,'multiline':False]
['text':' and per-function memory tracking.','line_number':212,'multiline':False]
['text':'*
 * An RAII utility class which can make it easy to account for some new allocation in a given
 * 'MemoryUsageTracker' for the entire lifetime of the object. This is meant to be a static
 * allocation that is released when it goes out of scope, for a dynamic instance use
 * `MemoryUsageHandle`
 ','line_number':247,'multiline':True]
['text':' Default constructor is only present to support ease of use for some containers.','line_number':256,'multiline':False]
['text':'*
 * Template to easy couple MemoryTokens with stored data.
 ','line_number':311,'multiline':True]
['text':' Updatable version of `MemoryUsageTokenImpl`.','line_number':348,'multiline':False]
['text':' class MemoryUsageHandleImpl','line_number':364,'multiline':False]
['text':' namespace mongo','line_number':368,'multiline':False]
