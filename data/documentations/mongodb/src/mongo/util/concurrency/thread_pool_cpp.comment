['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' IWYU pragma: no_include "cxxabi.h"','line_number':34,'multiline':False]
['text':' Counter used to assign unique names to otherwise-unnamed thread pools.','line_number':71,'multiline':False]
['text':'*
 * Sets defaults and checks bounds limits on "options", and returns it.
 *
 * This method is just a helper for the ThreadPool constructor.
 ','line_number':80,'multiline':True]
['text':' namespace','line_number':109,'multiline':False]
['text':' Public functions forwarded from ThreadPool.','line_number':112,'multiline':False]
['text':'*
     * Representation of the stage of life of a thread pool.
     *
     * A pool starts out in the preStart state, and ends life in the shutdownComplete state.  Work
     * may only be scheduled in the preStart and running states. Threads may only be started in the
     * running state. In shutdownComplete, there are no remaining threads or pending tasks to
     * execute.
     *
     * Diagram of legal transitions:
     *
     * preStart -> running -> joinRequired -> joining -> shutdownComplete
     *        \               ^
     *         \_____________/
     ','line_number':125,'multiline':True]
['text':'* The thread body for worker threads. ','line_number':141,'multiline':True]
['text':'*
     * Starts a worker thread, unless _options.maxThreads threads are already running or
     * _state is not running.
     ','line_number':144,'multiline':True]
['text':'*
     * This is the run loop of a worker thread, invoked by _workerThreadBody.
     ','line_number':150,'multiline':True]
['text':'*
     * Implementation of shutdown once _mutex is locked.
     ','line_number':155,'multiline':True]
['text':'*
     * Implementation of join once _mutex is owned by "lk".
     ','line_number':160,'multiline':True]
['text':'*
     * Runs the remaining tasks on a new thread as part of the join process, blocking until
     * complete. Caller must not hold the mutex!
     ','line_number':165,'multiline':True]
['text':'*
     * Executes one task from _pendingTasks. "lk" must own _mutex, and _pendingTasks must have at
     * least one entry.
     ','line_number':171,'multiline':True]
['text':'*
     * Changes the lifecycle state (_state) of the pool and wakes up any threads waiting for a state
     * change. Has no effect if _state == newState.
     ','line_number':177,'multiline':True]
['text':'*
     * Waits for all remaining retired threads to join.
     * If a thread's _workerThreadBody() were ever to attempt to reacquire
     * ThreadPool::_mutex after that thread had been added to _retiredThreads,
     * it could cause a deadlock.
     ','line_number':183,'multiline':True]
['text':' These are the options with which the pool was configured at construction time.','line_number':191,'multiline':False]
['text':' Mutex guarding all non-const member variables.','line_number':194,'multiline':False]
['text':' This variable represents the lifecycle state of the pool.','line_number':197,'multiline':False]
['text':'','line_number':198,'multiline':False]
['text':' Work may only be scheduled in states preStart and running, and only executes in states','line_number':199,'multiline':False]
['text':' running and shuttingDown.','line_number':200,'multiline':False]
['text':' Condition signaled to indicate that there is work in the _pendingTasks queue, or','line_number':203,'multiline':False]
['text':' that the system is shutting down.','line_number':204,'multiline':False]
['text':' Condition signaled to indicate that there is no work in the _pendingTasks queue.','line_number':207,'multiline':False]
['text':' Condition variable signaled whenever _state changes.','line_number':210,'multiline':False]
['text':' Queue of yet-to-be-executed tasks.','line_number':213,'multiline':False]
['text':' List of threads serving as the worker pool.','line_number':216,'multiline':False]
['text':' List of threads that are retired and pending join','line_number':219,'multiline':False]
['text':' Count of idle threads.','line_number':222,'multiline':False]
['text':' Id counter for assigning thread names','line_number':225,'multiline':False]
['text':' The last time that _pendingTasks.size() grew to be at least _threads.size().','line_number':228,'multiline':False]
['text':' Tasks cannot be run inline because they can create OperationContexts and the join() caller','line_number':325,'multiline':False]
['text':' may already have one associated with the thread.','line_number':326,'multiline':False]
['text':' True when there are no `_pendingTasks` and all `_threads` are idle, or when the ThreadPool','line_number':377,'multiline':False]
['text':' has been shutdown but not yet joined. As mentioned in the header, if waitForIdle() is called','line_number':378,'multiline':False]
['text':' before shutdown(), there is no guarantee that there will still be no pending tasks when the','line_number':379,'multiline':False]
['text':' function returns.','line_number':380,'multiline':False]
['text':' Help with garbage collecting retired threads to reduce the','line_number':424,'multiline':False]
['text':' memory overhead of _retiredThreads and expedite the shutdown','line_number':425,'multiline':False]
['text':' process.','line_number':426,'multiline':False]
['text':' Since there are more than minThreads threads, this thread may be eligible for','line_number':432,'multiline':False]
['text':' retirement. If it isn't now, it may be later, so it must put a time limit on how','line_number':433,'multiline':False]
['text':' long it waits on _workAvailable.','line_number':434,'multiline':False]
['text':' Since the number of threads is not more than minThreads, this thread is not','line_number':453,'multiline':False]
['text':' eligible for retirement. It is OK to sleep until _workAvailable is signaled,','line_number':454,'multiline':False]
['text':' because any new threads that put the number of total threads above minThreads','line_number':455,'multiline':False]
['text':' would be eligible for retirement once they had no work left to do.','line_number':456,'multiline':False]
['text':' We still hold the lock, but this thread is retiring. If the whole pool is shutting down, this','line_number':475,'multiline':False]
['text':' thread lends a hand in draining the work pool and returns so it can be joined. Otherwise, it','line_number':476,'multiline':False]
['text':' falls through to the thread retirement code, below.','line_number':477,'multiline':False]
['text':' Drain the leftover pending tasks.','line_number':480,'multiline':False]
['text':' This thread is ending because it was idle for too long.','line_number':497,'multiline':False]
['text':' Move self from _threads to _retiredThreads.','line_number':498,'multiline':False]
['text':' Run the task outside of the lock. Note that if the task throws, the task destructor will run','line_number':520,'multiline':False]
['text':' outside of the lock before the exception hits the noexcept boundary.','line_number':521,'multiline':False]
['text':' Reset the task and run the dtor before we reacquire the lock.','line_number':524,'multiline':False]
['text':' ========================================','line_number':587,'multiline':False]
['text':' ThreadPool public functions that simply forward to the `_impl`.','line_number':588,'multiline':False]
['text':' namespace mongo','line_number':618,'multiline':False]
