['text':'*
 *    Copyright (C) 2019-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' IWYU pragma: no_include "bits/types/siginfo_t.h"','line_number':31,'multiline':False]
['text':' IWYU pragma: no_include "bits/types/stack_t.h"','line_number':32,'multiline':False]
['text':' IWYU pragma: keep','line_number':47,'multiline':False]
['text':' MONGO_HAS_SIGALTSTACK','line_number':66,'multiline':False]
['text':'* Make sure sig is unblocked. ','line_number':71,'multiline':True]
['text':'* Install action for signal sig. Be careful to specify SA_ONSTACK. ','line_number':84,'multiline':True]
['text':' Disable sigaltstack to see what happens. Process should die.','line_number':97,'multiline':False]
['text':' Use sigaltstack's `old_ss` parameter to query the installed sigaltstack.','line_number':130,'multiline':False]
['text':' `raise` waits for signal handler to complete.','line_number':137,'multiline':False]
['text':' https://pubs.opengroup.org/onlinepubs/009695399/functions/raise.html','line_number':138,'multiline':False]
['text':'*
 * Start a child thread which overflows its stack, causing it to receive a SIGSEGV.  If
 * !useSigAltStack, disable that child thread's sigaltstack.
 *
 * We install a signal handler for SIGSEGV that gives the child thread a way out of the
 * SIGSEGV: it can siglongjmp to a sigsetjmp point before the recursion started. This
 * allows the child thread to recover and exit normally.
 *
 * This can only happen if the signal handler can be activated safely while the thread
 * is in the stack overflow condition. The sigaltstack is what makes it possible to do
 * so. Without sigaltstack, there's no stack space for the signal handler to run, so the
 * SIGSEGV is process-fatal.
 ','line_number':170,'multiline':True]
['text':' Recurse to run out of stack on purpose. There can be no','line_number':195,'multiline':False]
['text':' destructors or AS-unsafe code here, as this function','line_number':196,'multiline':False]
['text':' terminates via `siglongjmp`. Hide the recursion via the','line_number':197,'multiline':False]
['text':' `recur` callback to frustrate ambitious optimizers.','line_number':198,'multiline':False]
['text':' Avoid the undefined behavior of truly infinite recursion.','line_number':201,'multiline':False]
['text':' When the signal handler fires, it will return to this sigsetjmp call, causing','line_number':214,'multiline':False]
['text':' it to return a nonzero value. This makes the child thread viable again, and','line_number':215,'multiline':False]
['text':' it prints a few diagnostics before exiting gracefully.','line_number':216,'multiline':False]
['text':' There are special rules about the kinds of expressions in which `setjmp` can appear.','line_number':217,'multiline':False]
['text':' Nonzero: a fake return from the signal handler's `siglongjmp`.','line_number':219,'multiline':False]
['text':' Does not return, but recovers via signal handler's `siglongjmp`.','line_number':227,'multiline':False]
['text':'*
 * Cause an infinite recursion to check that the sigaltstack recovery mechanism
 * built into `stdx::thread` works.
 ','line_number':235,'multiline':True]
['text':'*
 * Check that stack overflow will crash the process and signal delivery can't happen.
 * Verifies that the sigaltstack is necessary.
 ','line_number':243,'multiline':True]
['text':' Child process: run the recursion test with no sigaltstack protection.','line_number':252,'multiline':False]
['text':' Parent process: expect child to die from a SIGSEGV.','line_number':255,'multiline':False]
['text':' These tests violate the memory space deliberately, so they generate false','line_number':284,'multiline':False]
['text':' positives from ASAN. TSAN also fails because we rescue a thread from a','line_number':285,'multiline':False]
['text':' SIGSEGV due to intentional thread exhaustion with creative use of a longjmp.','line_number':286,'multiline':False]
['text':' TSAN is more clever than we want here and intercepts the SIGSEGV before we','line_number':287,'multiline':False]
['text':' can do the thread necromancy that lets us verify it died for the right reasons','line_number':288,'multiline':False]
['text':' without killing the test harness.','line_number':289,'multiline':False]
['text':' namespace','line_number':306,'multiline':False]
['text':' namespace mongo::stdx','line_number':307,'multiline':False]
['text':' MONGO_HAS_SIGALTSTACK','line_number':313,'multiline':False]
