['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 * Notifyable is a slim type meant to allow integration of special kinds of waiters for
 * stdx::condition_variable.  Specifially, the notify() on this type will be called directly from
 * stdx::condition_varibale::notify_(one|all).
 *
 * See Waitable for the stdx::condition_variable integration.
 ','line_number':46,'multiline':True]
['text':' !!! PAY ATTENTION, THERE IS DANGER HERE !!!','line_number':59,'multiline':False]
['text':'','line_number':60,'multiline':False]
['text':' Implementers of the notifyable api must be level triggered by notify, rather than edge','line_number':61,'multiline':False]
['text':' triggered.','line_number':62,'multiline':False]
['text':'','line_number':63,'multiline':False]
['text':' I.e. a call to notify() must either unblock the notifyable immediately, if it is currently','line_number':64,'multiline':False]
['text':' blocked, or unblock it the next time it would wait, if it is not currently blocked.','line_number':65,'multiline':False]
['text':'','line_number':66,'multiline':False]
['text':' In addition to unblocking, the notifyable should also atomically consume that notification','line_number':67,'multiline':False]
['text':' state as a result of waking.  I.e. any number of calls to notify before or during a wait must','line_number':68,'multiline':False]
['text':' unblock exactly one wait.','line_number':69,'multiline':False]
['text':'','line_number':70,'multiline':False]
['text':' Notifyable::notify is not like condition_variable::notify_X()','line_number':71,'multiline':False]
['text':' Notifyable's own a list node which they splice into a stdx::condition_variable's wait list','line_number':78,'multiline':False]
['text':' when waiting on one.  It's important that we pre-allocate this entry on construction.','line_number':79,'multiline':False]
['text':'','line_number':80,'multiline':False]
['text':' Note that the notifyable** in this list is only used and meaningful while the notifyable','line_number':81,'multiline':False]
['text':' waits on a condition variable (so the ownership of a self pointer doesn't really have','line_number':82,'multiline':False]
['text':' implications for copy/move, as the objects shouldn't be moved/copied while waiting)','line_number':83,'multiline':False]
['text':' NOLINT','line_number':91,'multiline':False]
['text':' NOLINT','line_number':92,'multiline':False]
['text':'*
 * We wrap std::condition_variable_any to allow us to register Notifyables which can "wait" on the
 * condvar without actually waiting on the std::condition_variable_any. This allows us to possibly
 * do productive work in those types, rather than sleeping in the os.
 ','line_number':94,'multiline':True]
['text':' NOLINT','line_number':99,'multiline':False]
['text':' NOLINT','line_number':101,'multiline':False]
['text':' NOLINT','line_number':112,'multiline':False]
['text':' NOLINT','line_number':123,'multiline':False]
['text':' NOLINT','line_number':126,'multiline':False]
['text':' NOLINT','line_number':127,'multiline':False]
['text':' NOLINT','line_number':128,'multiline':False]
['text':'*
     * Runs the callback with the Notifyable registered on the condvar.  This ensures that for the
     * duration of the callback execution, a notification on the condvar will trigger a notify() to
     * the Notifyable.
     *
     * The scheme here is that list entries are spliced back to their Notifyable from the
     * notification list when notified (so that they don't eat multiple notify_one's).  We detect
     * that condition by noting that our list isn't empty (in which case we should avoid a double
     * splice back).
     *
     * The method is private, and accessed via friendship in Waitable.
     ','line_number':133,'multiline':True]
['text':' The supplied callback should do the equivalent of waiting on this condition_variable','line_number':159,'multiline':False]
['text':' (i.e. return on notify), as well as any other work the waiter would like to do while','line_number':160,'multiline':False]
['text':' waiting.','line_number':161,'multiline':False]
['text':' If our list isn't empty, we were notified, and spliced back in _notifyNextNotifyable.','line_number':166,'multiline':False]
['text':' If it is empty, we need to stash our wait queue iterator ourselves.','line_number':167,'multiline':False]
['text':'*
     * Notifies the next notifyable.
     *
     * Returns true if there was a notifyable to be notified.
     *
     * Note that as part of notifying, we splice back iterators to _runWithNotifyable callers.  This
     * is safe because we hold _mutex while we do so, and our splicing communicates that those
     * waiters need not clear themselves from the notification list on wakeup.
     ','line_number':174,'multiline':True]
['text':'*
     * Splice the notifyable iterator back into the notifyable (out from this condvar's wait list)
     ','line_number':198,'multiline':True]
['text':' NOLINT','line_number':209,'multiline':False]
['text':' namespace stdx','line_number':214,'multiline':False]
['text':' namespace mongo','line_number':215,'multiline':False]
