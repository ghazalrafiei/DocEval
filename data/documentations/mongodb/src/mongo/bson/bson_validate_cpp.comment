['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' The values of the kSkipXX styles are used to compute the size, the remaining ones are arbitrary.','line_number':70,'multiline':False]
['text':' NOTE: The kSkipXX values directly encode the amount of 4-byte words to skip: don't change them!','line_number':71,'multiline':False]
['text':' The element only consists of the type byte and field name.','line_number':73,'multiline':False]
['text':' There are 4 additional bytes of data, see note above.','line_number':74,'multiline':False]
['text':' There are 8 additional bytes of data, see note above.','line_number':75,'multiline':False]
['text':' There are 12 additional bytes of data, see note above.','line_number':76,'multiline':False]
['text':' There are 16 additional bytes of data, see note above.','line_number':77,'multiline':False]
['text':' An int32 with the string length (including NUL) follows the field name.','line_number':78,'multiline':False]
['text':' The type starts a new nested object or array.','line_number':79,'multiline':False]
['text':' Handled specially: any cases that don't fall into the above.','line_number':80,'multiline':False]
['text':' This table is padded and aligned to 32 bytes for more efficient lookup.','line_number':83,'multiline':False]
['text':' \x00 EOO','line_number':85,'multiline':False]
['text':' \x01 NumberDouble','line_number':86,'multiline':False]
['text':' \x02 String','line_number':87,'multiline':False]
['text':' \x03 Object','line_number':88,'multiline':False]
['text':' \x04 Array','line_number':89,'multiline':False]
['text':' \x05 BinData','line_number':90,'multiline':False]
['text':' \x06 Undefined','line_number':91,'multiline':False]
['text':' \x07 OID','line_number':92,'multiline':False]
['text':' \x08 Bool (requires 0/1 false/true validation)','line_number':93,'multiline':False]
['text':' \x09 Date','line_number':94,'multiline':False]
['text':' \x0a Null','line_number':95,'multiline':False]
['text':' \x0b Regex (two nul-terminated strings)','line_number':96,'multiline':False]
['text':' \x0c DBRef','line_number':97,'multiline':False]
['text':' \x0d Code','line_number':98,'multiline':False]
['text':' \x0e Symbol','line_number':99,'multiline':False]
['text':' \x0f CodeWScope','line_number':100,'multiline':False]
['text':' \x10 Int','line_number':101,'multiline':False]
['text':' \x11 Timestamp','line_number':102,'multiline':False]
['text':' \x12 Long','line_number':103,'multiline':False]
['text':' \x13 Decimal','line_number':104,'multiline':False]
['text':' Checks the field name before the element, if inside array.','line_number':127,'multiline':False]
['text':' Increments the pointer to the actual element value.','line_number':129,'multiline':False]
['text':' isArr ','line_number':139,'multiline':True]
['text':' isArr ','line_number':142,'multiline':True]
['text':' Counter used to check whether indexes are sequential.','line_number':209,'multiline':False]
['text':' Indicates whether level is an array or other (object).','line_number':210,'multiline':False]
['text':' isArr ','line_number':215,'multiline':True]
['text':' isArr ','line_number':217,'multiline':True]
['text':' Checks the actual index, skipping the type byte.','line_number':229,'multiline':False]
['text':' Checks that the options are in ascending alphabetical order and that they're all valid.','line_number':240,'multiline':False]
['text':' Make sure we can read the subtype byte of the Encrypted BSON Value.','line_number':262,'multiline':False]
['text':' Skip the size bytes and BinData subtype byte to the actual encrypted data.','line_number':267,'multiline':False]
['text':' Only subtype 1, 2, 6, 7, and 9 can exist in MongoDB collections.','line_number':271,'multiline':False]
['text':' Behaves like a stack, used to validate array index count.','line_number':309,'multiline':False]
['text':' fieldName ','line_number':316,'multiline':True]
['text':' length ','line_number':316,'multiline':True]
['text':' Increments the pointer to the actual element value.','line_number':318,'multiline':False]
['text':' Check for exceptions when decompressing.','line_number':333,'multiline':False]
['text':' Calling size() decompresses the entire column.','line_number':334,'multiline':False]
['text':' Increment pointer to actual value and then four more to skip size.','line_number':352,'multiline':False]
['text':' If curr is not an object frame, it will always be empty, so no need to check.','line_number':361,'multiline':False]
['text':' A given frame is an object if and only if frame.second == true.','line_number':385,'multiline':False]
['text':' Check the field name is UTF-8 encoded.','line_number':390,'multiline':False]
['text':' Read the length as signed integer, to ensure we limit it to < 2GB.','line_number':419,'multiline':False]
['text':' All other lengths are read as unsigned, which makes for easier bounds checking.','line_number':420,'multiline':False]
['text':' Assumes the root level is a single literal element (which may contain nested objects).
     * Only validates up to the termination of that first literal, more data is permitted to
       remain in the buffer after that and is not validated. Throws exception on invalid data','line_number':437,'multiline':True]
['text':' must at least have a 0-terminator after control','line_number':444,'multiline':False]
['text':' skip type ','line_number':445,'multiline':True]
['text':' Handle one element without using iterative loop, and without expecting','line_number':447,'multiline':False]
['text':' multiple instances or an EOO.  Only resume with the iterative loop if','line_number':448,'multiline':False]
['text':' the frame stack has been incremented, meaning we have nested objects','line_number':449,'multiline':False]
['text':' Save pointer to currFrame->end so we can fill it in once we know the size','line_number':451,'multiline':False]
['text':' We know that type was kObject or kArray, so size is fieldname, type,','line_number':458,'multiline':False]
['text':' and a stored int','line_number':459,'multiline':False]
['text':' A flat BSON has one frame.','line_number':485,'multiline':False]
['text':'*
     * Extra information for each nesting level in the precise validation mode.
     ','line_number':489,'multiline':True]
['text':' _id for top frame, unchecked Object, Array or CodeWScope otherwise.','line_number':493,'multiline':False]
['text':' Used for checking encoded object/array sizes, not bounds checking.','line_number':497,'multiline':False]
['text':' Also requires remaining buf after the skip (both BSONColumn and BSONObj guarantee this
           by having at minimum a trailing EOO) ','line_number':504,'multiline':True]
['text':' This is actually by far the hottest code in all of BSON validation.','line_number':524,'multiline':False]
['text':' do not pass down cursor; we want to reset the nesting depth ','line_number':568,'multiline':True]
['text':' If not 0, must be 1.','line_number':576,'multiline':False]
['text':' Force validation of the ptr after skipping past the field name.','line_number':580,'multiline':False]
['text':' Skip regular expression cstring.','line_number':581,'multiline':False]
['text':' Skip options cstring.','line_number':582,'multiline':False]
['text':' Like String, but...','line_number':585,'multiline':False]
['text':' ...also skip the 12-byte ObjectId.','line_number':586,'multiline':False]
['text':' Need to cast, as MinKey is negative.','line_number':588,'multiline':False]
['text':' Force validation of the ptr after skipping past the field name.','line_number':590,'multiline':False]
['text':' Push a dummy frame to check the CodeWScope size.','line_number':599,'multiline':False]
['text':' Now skip the BSON UTF8 string containing the code.','line_number':600,'multiline':False]
['text':' Use the terminating NUL as a dummy scope element.','line_number':601,'multiline':False]
['text':' When ending the scope of a CodeWScope, pop the extra dummy frame and check its size.','line_number':607,'multiline':False]
['text':' Use the fact that the EOO byte is 0, just like the end of string, so checking for EOO','line_number':636,'multiline':False]
['text':' is same as finding len == 0. The cursor cannot point past EOO, so the strlen is safe.','line_number':637,'multiline':False]
['text':' In case _currElem is moved (for instance when the type is CodeWScope).','line_number':642,'multiline':False]
['text':' Check if the data is compliant to other BSON specifications if the element is','line_number':647,'multiline':False]
['text':' structurally correct.','line_number':648,'multiline':False]
['text':' See if the _id field was just validated. If so, set the global scope element.','line_number':652,'multiline':False]
['text':' This is fully validated now.','line_number':654,'multiline':False]
['text':' Got the EOO byte: skip it and compare its location with the expected frame end.','line_number':659,'multiline':False]
['text':' Finished when there are no frames left.','line_number':662,'multiline':False]
['text':' Check the top level field names.','line_number':664,'multiline':False]
['text':'*
     * Returns a string qualifying the context in which an exception occurred. Example return is
     * "in element with field name 'foo.bar' in object with _id: 1".
     ','line_number':668,'multiline':True]
['text':' The data buffer to check.','line_number':689,'multiline':False]
['text':' The size of the data buffer. The BSON object may be smaller.','line_number':690,'multiline':False]
['text':' Element to validate: only the name is known to be good.','line_number':691,'multiline':False]
['text':' Frame currently being validated.','line_number':692,'multiline':False]
['text':' Has end pointers to check and the containing element for precise mode.','line_number':693,'multiline':False]
['text':' First try validating using the fast but less precise version. That version will return','line_number':699,'multiline':False]
['text':' a not-OK status for objects with CodeWScope or nesting exceeding 32 levels. These cases and','line_number':700,'multiline':False]
['text':' actual failures will rerun the precise version that gives a detailed error context.','line_number':701,'multiline':False]
['text':' run control pointer through to end of buffer','line_number':715,'multiline':False]
['text':' run over literal data as directed by lengths from control','line_number':716,'multiline':False]
['text':' check formatting of Simple8B blocks','line_number':717,'multiline':False]
['text':' scan reference objects of interleaved mode starts','line_number':718,'multiline':False]
['text':' confirm EOO terminations of interleaved modes','line_number':719,'multiline':False]
['text':' content of interleaved objects does not need to be checked differently from','line_number':720,'multiline':False]
['text':'      standard Simple8B block and literal decodings','line_number':721,'multiline':False]
['text':' confirm we end at end of buffer','line_number':722,'multiline':False]
['text':' Check this beforehand to ensure we cannot overflow the buffer with any strlen','line_number':728,'multiline':False]
['text':' should be the last control of the sequence','line_number':738,'multiline':False]
['text':' interleaved objects begin with a reference object, and then a series','line_number':762,'multiline':False]
['text':' of diff blocks for followup objects, ending with an EOO','line_number':763,'multiline':False]
['text':' we now know due to validateBSON that it is safe to interpret *ptr','line_number':768,'multiline':False]
['text':' Simple8b block sequence, just check for memory overflow of block count','line_number':773,'multiline':False]
['text':' We should not get here for a valid object, the final EOO should have returned OK','line_number':786,'multiline':False]
['text':' namespace','line_number':806,'multiline':False]
['text':' namespace mongo','line_number':832,'multiline':False]
