['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' For objects, sort the children by field name, then compare in that order.','line_number':85,'multiline':False]
['text':' NOTE: if you have repeated field names, this is not necessarily going to','line_number':94,'multiline':False]
['text':' work. This is unlikely to be a problem in practice, but we could write a','line_number':95,'multiline':False]
['text':' more sophisticated comparator if we need to: perhaps one that ordered first','line_number':96,'multiline':False]
['text':' by field name, then by type, then by woCompare. Performance isn't important','line_number':97,'multiline':False]
['text':' here.','line_number':98,'multiline':False]
['text':' For arrays, since they are ordered, we don't need the sorting step.','line_number':121,'multiline':False]
['text':' This is some leaf type. We've already checked or ignored field names, so','line_number':145,'multiline':False]
['text':' don't recheck it here.','line_number':146,'multiline':False]
['text':' namespace','line_number':151,'multiline':False]
['text':' TODO: We should really update this to be an ASSERT_ something, so that we can print out','line_number':153,'multiline':False]
['text':' the expected and actual documents.','line_number':154,'multiline':False]
['text':' Get the fundamental result via BSONObj's woCompare path. This is the best starting','line_number':156,'multiline':False]
['text':' point, because we think that Document::getObject and the serialization mechanism is','line_number':157,'multiline':False]
['text':' pretty well sorted.','line_number':158,'multiline':False]
['text':' Validate primary result via other comparison paths.','line_number':162,'multiline':False]
['text':' Check that mutables serialized result matches against its origin.','line_number':167,'multiline':False]
['text':' namespace mutablebson','line_number':219,'multiline':False]
['text':' namespace mongo','line_number':220,'multiline':False]
