['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'* For an overview of mutable BSON, please see the file document.h in this directory.
 *
 *  This file defines, in analogy with <algorithm>, a collection of useful algorithms for
 *  use with mutable BSON classes. In particular, algorithms for searching, sorting,
 *  indexed access, and counting are included.
 ','line_number':44,'multiline':True]
['text':'* 'findElement' searches rightward among the sibiling Elements of 'first', returning an
 *  Element representing the first item matching the predicate 'predicate'. If no Element
 *  matches, then the 'ok' method on the returned Element will return false.
 ','line_number':51,'multiline':True]
['text':'* A predicate for findElement that matches on the field name of Elements. ','line_number':62,'multiline':True]
['text':' The lifetime of this object must be a subset of the lifetime of 'fieldName'.','line_number':64,'multiline':False]
['text':'* An overload of findElement that delegates to the special implementation
 *  Element::findElementNamed to reduce traffic across the Element API.
 ','line_number':74,'multiline':True]
['text':'* A convenience wrapper around findElement<ElementType, FieldNameEquals>. ','line_number':82,'multiline':True]
['text':'* Finds the first child under 'parent' that matches the given predicate. If no such child
 *  Element is found, the returned Element's 'ok' method will return false.
 ','line_number':88,'multiline':True]
['text':'* An overload of findFirstChild that delegates to the special implementation
 *  Element::findFirstChildNamed to reduce traffic across the Element API.
 ','line_number':96,'multiline':True]
['text':'* Finds the first child under 'parent' that matches the given field name. If no such child
 *  Element is found, the returned Element's 'ok' method will return false.
 ','line_number':104,'multiline':True]
['text':'* A less-than ordering for Elements that compares based on the Element field names. ','line_number':112,'multiline':True]
['text':' TODO: This should possibly derive from std::binary_function.','line_number':114,'multiline':False]
['text':'* Sort any children of Element 'parent' by way of Comparator 'comp', which should provide
 *  an operator() that takes two const Element&'s and implements a strict weak ordering.
 ','line_number':121,'multiline':True]
['text':' TODO: The following works, but obviously is not ideal.','line_number':126,'multiline':False]
['text':' First, build a vector of the children.','line_number':128,'multiline':False]
['text':' Then, sort the child vector with our comparator.','line_number':136,'multiline':False]
['text':' Finally, reorder the children of parent according to the ordering established in','line_number':139,'multiline':False]
['text':' 'children'.','line_number':140,'multiline':False]
['text':' Detach from its current location.','line_number':144,'multiline':False]
['text':' Make it the new rightmost element.','line_number':146,'multiline':False]
['text':'* Remove any consecutive children that compare as identical according to 'comp'. The
 *  children must be sorted (see sortChildren, above), and the equality comparator here
 *  must be compatible with the comparator used for the sort.
 ','line_number':151,'multiline':True]
['text':'* A less-than ordering for Elements that compares based on woCompare ','line_number':168,'multiline':True]
['text':' TODO: This should possibly derive from std::binary_function.','line_number':170,'multiline':False]
['text':'* A greater-than ordering for Elements that compares based on woCompare ','line_number':184,'multiline':True]
['text':' TODO: This should possibly derive from std::binary_function.','line_number':186,'multiline':False]
['text':'* An equality predicate for elements that compares based on woCompare ','line_number':200,'multiline':True]
['text':' TODO: This should possibly derive from std::binary_function.','line_number':202,'multiline':False]
['text':'* An equality predicate for elements that compares based on woCompare ','line_number':216,'multiline':True]
['text':' TODO: This should possibly derive from std::binary_function.','line_number':218,'multiline':False]
['text':' NOTE: Originally, these truly were algorithms, in that they executed the loop over a','line_number':235,'multiline':False]
['text':' generic ElementType. However, these operations were later made intrinsic to','line_number':236,'multiline':False]
['text':' Element/Document for performance reasons. These functions hare here for backward','line_number':237,'multiline':False]
['text':' compatibility, and just delegate to the appropriate Element or ConstElement method of','line_number':238,'multiline':False]
['text':' the same name.','line_number':239,'multiline':False]
['text':'* Return the element that is 'n' Elements to the left in the sibling chain of 'element'. ','line_number':241,'multiline':True]
['text':'* Return the element that is 'n' Elements to the right in the sibling chain of 'element'. ','line_number':247,'multiline':True]
['text':'* Move 'n' Elements left or right in the sibling chain of 'element' ','line_number':253,'multiline':True]
['text':'* Get the child that is 'n' Elements to the right of 'element's left child. ','line_number':259,'multiline':True]
['text':'* Returns the number of valid siblings to the left of 'element'. ','line_number':265,'multiline':True]
['text':'* Returns the number of valid siblings to the right of 'element'. ','line_number':271,'multiline':True]
['text':'* Return the number of children of 'element'. ','line_number':277,'multiline':True]
['text':'* Return the full (path) name of this element separating each name with the delim string. ','line_number':283,'multiline':True]
['text':' namespace mutablebson','line_number':303,'multiline':False]
['text':' namespace mongo','line_number':304,'multiline':False]
