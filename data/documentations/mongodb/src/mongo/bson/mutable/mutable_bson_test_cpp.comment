['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'
                   [ e0 ]
                    /   \
                   /     \
               [ e1 ]..[ e2 ]
                        /
                       /
                   [ e3 ]
                    /   \
                   /     \
               [ e4 ]..[ e5 ]
    ','line_number':68,'multiline':True]
['text':'
                   [ e0 ]
                    /   \
                   /     \
               [ e1 ]..[ e2 ]
                        /  \
                       /    \
                   [ e3 ]..[ e4 ]
    ','line_number':116,'multiline':True]
['text':'
                       [ e2 ]
                        /  \
                       /    \
                   [ e3 ]..[ e4 ]
                  /  |   \
                /    |     \
           [ e7 ]..[ e5 ]..[ e6 ]
    ','line_number':147,'multiline':True]
['text':'
                   [ e3 ]
                  /  |   \
                /    |     \
           [ e4 ]..[ e5 ]..[ e6 ]
                     |
                     |
                   [ e8 ]
                    /  \
                   /    \
               [ e9 ]..[ e10]
    ','line_number':185,'multiline':True]
['text':'
                   [ e0 ]                [ e0 ]
                    /   \       =>          \
                   /     \                   \
               [ e1 ]   [ e2 ]              [ e2 ]
    ','line_number':226,'multiline':True]
['text':'
                   [ e3 ]                               [ e3 ]
                  /  |   \                               /  \
                /    |     \                            /    \
           [ e4 ]..[ e5 ]..[ e6 ]                   [ e4 ]  [ e6 ]
                     |                  =>
                     |
                   [ e8 ]
                    /  \
                   /    \
               [ e9 ]..[ e10]
    ','line_number':247,'multiline':True]
['text':'

                   [ e0 ]                  [ f0 ]
                    /  \          =>        /  \
                   /    \                  /    \
               [ e1 ]..[ e2 ]          [ e1 ]..[ e2 ]
    ','line_number':285,'multiline':True]
['text':'
                   [ e0 ]                       [ e0 ]
                    /   \                      /  |   \
                   /     \                   /    |     \
               [ e1 ]..[ e2 ]           [ e1 ]..[ e2 ]..[ e3 ]
                        /         =>                     /  \
                       /                                /    \
                   [ e3 ]                           [ e4 ]..[ e5 ]
                    /   \
                   /     \
               [ e4 ]..[ e5 ]
    ','line_number':306,'multiline':True]
['text':'
            { a : [] }                  create
            { a : [10] }                 pushBack
            { a : [10, 20] }              pushBack
            { a : [10, 20, 30] }           pushBack
            { a : [10, 20, 30, 40] }        pushBack
            { a : [5, 10, 20, 30, 40] }      pushFront
            { a : [0, 5, 10, 20, 30, 40] }    pushFront
            { a : [0, 5, 10, 20, 30] }       popBack
            { a : [5, 10, 20, 30] }         popFront
            { a : [10, 20, 30] }           popFront
            { a : [10, 20] }              popBack
            { a : [20] }                 popFront
            { a : [100] }                set
            { a : [] }                  popFront
    ','line_number':468,'multiline':True]
['text':' Deserialize the 'c' but keep its value the same.','line_number':625,'multiline':False]
['text':' 'a'','line_number':631,'multiline':False]
['text':' 'b'','line_number':637,'multiline':False]
['text':' 'c'','line_number':643,'multiline':False]
['text':' eoo','line_number':649,'multiline':False]
['text':' Try setting to other types and back to Timestamp','line_number':703,'multiline':False]
['text':' Try getting SafeNums from different types.','line_number':734,'multiline':False]
['text':' Try setting to other types and back to SafeNum','line_number':766,'multiline':False]
['text':' Create a new document','line_number':857,'multiline':False]
['text':' Get the root of the document.','line_number':861,'multiline':False]
['text':' Create a new mongo::NumberInt typed Element to represent life, the universe, and','line_number':864,'multiline':False]
['text':' everything, then push that Element into the root object, making it a child of root.','line_number':865,'multiline':False]
['text':' Create a new empty mongo::Object-typed Element named 'magic', and push it back as a','line_number':870,'multiline':False]
['text':' child of the root, making it a sibling of e0.','line_number':871,'multiline':False]
['text':' Create a new mongo::NumberDouble typed Element to represent Pi, and insert it as child','line_number':876,'multiline':False]
['text':' of the new object we just created.','line_number':877,'multiline':False]
['text':' Create a new mongo::NumberDouble to represent Plancks constant in electrovolt','line_number':882,'multiline':False]
['text':' micrometers, and add it as a child of the 'magic' object.','line_number':883,'multiline':False]
['text':' Rename the parent element of 'hbar' to be 'constants'.','line_number':889,'multiline':False]
['text':' Rename 'ltuae' to 'answer' by accessing it as the root objects left child.','line_number':894,'multiline':False]
['text':' Sort the constants by name.','line_number':899,'multiline':False]
['text':' Create a new document representing BSONObj with the above contents.','line_number':913,'multiline':False]
['text':' The whale hits the planet and dies.','line_number':916,'multiline':False]
['text':' Find the 'dv' field in the whale.','line_number':919,'multiline':False]
['text':' Set the dv field to zero.','line_number':922,'multiline':False]
['text':' Find the 'height' field in the whale.','line_number':924,'multiline':False]
['text':' Set the height field to zero.','line_number':927,'multiline':False]
['text':' Find the 'alive' field, and set it to false.','line_number':929,'multiline':False]
['text':' The petunias survive, update its fields much like we did above.','line_number':934,'multiline':False]
['text':' Replace the whale by its wreckage, saving only its attributes:','line_number':944,'multiline':False]
['text':' Construct a new mongo::Object element for the ex-whale.','line_number':945,'multiline':False]
['text':' Find the attributes of the old 'whale' element.','line_number':948,'multiline':False]
['text':' Remove the attributes from the whale (they remain valid, but detached).','line_number':950,'multiline':False]
['text':' Insert the attributes into the ex-whale.','line_number':952,'multiline':False]
['text':' Remove the whale object.','line_number':954,'multiline':False]
['text':' namespace','line_number':977,'multiline':False]
['text':' Make the object, and make a copy for reference.','line_number':986,'multiline':False]
['text':' Create a new document representing BSONObj with the above contents.','line_number':991,'multiline':False]
['text':' Enable in-place mutation for this document','line_number':996,'multiline':False]
['text':' The whale hits the planet and dies.','line_number':999,'multiline':False]
['text':' Find the 'dv' field in the whale.','line_number':1002,'multiline':False]
['text':' Set the dv field to zero.','line_number':1005,'multiline':False]
['text':' Find the 'height' field in the whale.','line_number':1007,'multiline':False]
['text':' Set the height field to zero.','line_number':1010,'multiline':False]
['text':' Find the 'alive' field, and set it to false.','line_number':1012,'multiline':False]
['text':' The petunias survive, update its fields much like we did above.','line_number':1017,'multiline':False]
['text':' Demonstrate that while the document has changed, the underlying BSONObj has not yet','line_number':1027,'multiline':False]
['text':' changed.','line_number':1028,'multiline':False]
['text':' Ensure that in-place updates are still enabled.','line_number':1032,'multiline':False]
['text':' Extract the damage events','line_number':1035,'multiline':False]
['text':' Verify the state of a newly created empty Document.','line_number':1091,'multiline':False]
['text':' Verify the state of a newly created empty Document where the construction argument','line_number':1105,'multiline':False]
['text':' is an empty BSONObj.','line_number':1106,'multiline':False]
['text':' Verify the state of a newly created Document where the construction argument is a','line_number':1121,'multiline':False]
['text':' simple (flat) BSONObj.','line_number':1122,'multiline':False]
['text':' Check the state of the root.','line_number':1126,'multiline':False]
['text':' Check the connectivity of 'e1'.','line_number':1136,'multiline':False]
['text':' Check the type, name, and value of 'e1'.','line_number':1144,'multiline':False]
['text':' Check the connectivity of 'e2'.','line_number':1151,'multiline':False]
['text':' Check the type, name and value of 'e2'.','line_number':1160,'multiline':False]
['text':' Check the connectivity of 'e3'.','line_number':1167,'multiline':False]
['text':' Check the type, name and value of 'e3'.','line_number':1176,'multiline':False]
['text':' Regression test for a bug where certain rename operations failed to deserialize up','line_number':1184,'multiline':False]
['text':' the tree correctly, resulting in a lost rename','line_number':1185,'multiline':False]
['text':' Regression test for a bug where removing an element with an opaque right sibling','line_number':1214,'multiline':False]
['text':' would access an invalidated rep. Note that this test may or may not fail depending','line_number':1215,'multiline':False]
['text':' on the details of memory allocation: failures would be clearly visible with','line_number':1216,'multiline':False]
['text':' valgrind, however.','line_number':1217,'multiline':False]
['text':' Regression test for a bug where adding a right sibling to a node with an opaque','line_number':1239,'multiline':False]
['text':' right sibling would potentially access an invalidated rep. Like the 'remove' test','line_number':1240,'multiline':False]
['text':' above, this may or may not crash, but would be visible under a memory checking tool.','line_number':1241,'multiline':False]
['text':' Doc containing the 'setFrom' element should be unchanged.','line_number':1503,'multiline':False]
['text':' Doc containing the 'setFrom' element should be unchanged.','line_number':1552,'multiline':False]
['text':' Doc containing the 'setFrom' element should be unchanged.','line_number':1571,'multiline':False]
['text':' Dirty the 'd' node and parents.','line_number':1707,'multiline':False]
['text':' Dirty the 'd' node and parents.','line_number':1741,'multiline':False]
['text':' Dirty the 'd' node and parents.','line_number':1786,'multiline':False]
['text':' Dirty the 'd' node and parents.','line_number':1807,'multiline':False]
['text':' NOTE: You really shouldn't rely on this behavior; this test is mostly for coverage.','line_number':1831,'multiline':False]
['text':' NOTE: You really shouldn't rely on this behavior; this test is mostly for coverage.','line_number':1846,'multiline':False]
['text':' Once an Element is removed, you can't remove it again until you re-attach it','line_number':1851,'multiline':False]
['text':' somewhere. However, its children are still manipulable.','line_number':1852,'multiline':False]
['text':' Checks that two BSONElements are byte-for-byte identical.','line_number':1866,'multiline':False]
['text':' namespace','line_number':1872,'multiline':False]
['text':' Construct via direct call to append/make','line_number':1885,'multiline':False]
['text':' Construct via call passing BSON element','line_number':1893,'multiline':False]
['text':' Construct via setValue call.','line_number':1900,'multiline':False]
['text':' Ensure identity:','line_number':1908,'multiline':False]
['text':' Construct via direct call to append/make','line_number':1925,'multiline':False]
['text':' Construct via call passing BSON element','line_number':1933,'multiline':False]
['text':' Construct via setValue call.','line_number':1940,'multiline':False]
['text':' Ensure identity:','line_number':1948,'multiline':False]
['text':' Construct via direct call to append/make','line_number':1965,'multiline':False]
['text':' Construct via call passing BSON element','line_number':1973,'multiline':False]
['text':' Construct via setValue call.','line_number':1980,'multiline':False]
['text':' Ensure identity:','line_number':1988,'multiline':False]
['text':' Construct via direct call to append/make','line_number':2006,'multiline':False]
['text':' Construct via call passing BSON element','line_number':2014,'multiline':False]
['text':' Construct via setValue call.','line_number':2021,'multiline':False]
['text':' Ensure identity:','line_number':2029,'multiline':False]
['text':' Construct via direct call to append/make','line_number':2062,'multiline':False]
['text':' Construct via call passing BSON element','line_number':2069,'multiline':False]
['text':' Construct via setValue call.','line_number':2076,'multiline':False]
['text':' Ensure identity:','line_number':2084,'multiline':False]
['text':' Construct via direct call to append/make','line_number':2100,'multiline':False]
['text':' Construct via call passing BSON element','line_number':2108,'multiline':False]
['text':' Construct via setValue call.','line_number':2115,'multiline':False]
['text':' Ensure identity:','line_number':2123,'multiline':False]
['text':' Construct via direct call to append/make','line_number':2140,'multiline':False]
['text':' Construct via call passing BSON element','line_number':2148,'multiline':False]
['text':' Construct via setValue call.','line_number':2155,'multiline':False]
['text':' Ensure identity:','line_number':2163,'multiline':False]
['text':' Construct via direct call to append/make','line_number':2180,'multiline':False]
['text':' Construct via call passing BSON element','line_number':2188,'multiline':False]
['text':' Construct via setValue call.','line_number':2195,'multiline':False]
['text':' Ensure identity:','line_number':2203,'multiline':False]
['text':' Construct via direct call to append/make','line_number':2220,'multiline':False]
['text':' Construct via call passing BSON element','line_number':2228,'multiline':False]
['text':' Construct via setValue call.','line_number':2235,'multiline':False]
['text':' Ensure identity:','line_number':2243,'multiline':False]
['text':' Construct via direct call to append/make','line_number':2259,'multiline':False]
['text':' Construct via call passing BSON element','line_number':2267,'multiline':False]
['text':' Construct via setValue call.','line_number':2274,'multiline':False]
['text':' Ensure identity:','line_number':2282,'multiline':False]
['text':' Construct via direct call to append/make','line_number':2300,'multiline':False]
['text':' Construct via call passing BSON element','line_number':2307,'multiline':False]
['text':' Construct via setValue call.','line_number':2314,'multiline':False]
['text':' Ensure identity:','line_number':2322,'multiline':False]
['text':' Construct via direct call to append/make','line_number':2340,'multiline':False]
['text':' Construct via call passing BSON element','line_number':2347,'multiline':False]
['text':' Construct via setValue call.','line_number':2354,'multiline':False]
['text':' Ensure identity:','line_number':2362,'multiline':False]
['text':' Construct via direct call to append/make','line_number':2379,'multiline':False]
['text':' Construct via call passing BSON element','line_number':2386,'multiline':False]
['text':' Construct via setValue call.','line_number':2393,'multiline':False]
['text':' Ensure identity:','line_number':2401,'multiline':False]
['text':' Construct via direct call to append/make','line_number':2418,'multiline':False]
['text':' Construct via call passing BSON element','line_number':2426,'multiline':False]
['text':' Construct via setValue call.','line_number':2433,'multiline':False]
['text':' Ensure identity:','line_number':2441,'multiline':False]
['text':' Construct via direct call to append/make','line_number':2459,'multiline':False]
['text':' Construct via call passing BSON element','line_number':2466,'multiline':False]
['text':' Construct via setValue call.','line_number':2473,'multiline':False]
['text':' Ensure identity:','line_number':2481,'multiline':False]
['text':' Construct via direct call to append/make','line_number':2498,'multiline':False]
['text':' Construct via call passing BSON element','line_number':2506,'multiline':False]
['text':' Construct via setValue call.','line_number':2513,'multiline':False]
['text':' Ensure identity:','line_number':2521,'multiline':False]
['text':' Construct via direct call to append/make','line_number':2538,'multiline':False]
['text':' Construct via call passing BSON element','line_number':2546,'multiline':False]
['text':' Construct via setValue call.','line_number':2553,'multiline':False]
['text':' Ensure identity:','line_number':2561,'multiline':False]
['text':' Construct via direct call to append/make','line_number':2578,'multiline':False]
['text':' Construct via call passing BSON element','line_number':2586,'multiline':False]
['text':' Construct via setValue call.','line_number':2593,'multiline':False]
['text':' Ensure identity:','line_number':2601,'multiline':False]
['text':' Construct via direct call to append/make','line_number':2618,'multiline':False]
['text':' Construct via call passong BSON element','line_number':2626,'multiline':False]
['text':' Construct via setValue call','line_number':2633,'multiline':False]
['text':' Ensure identity:','line_number':2641,'multiline':False]
['text':' Construct via direct call to append/make','line_number':2657,'multiline':False]
['text':' Construct via call passing BSON element','line_number':2665,'multiline':False]
['text':' Construct via setValue call.','line_number':2672,'multiline':False]
['text':' Ensure identity:','line_number':2680,'multiline':False]
['text':' Construct via direct call to append/make','line_number':2696,'multiline':False]
['text':' Construct via call passing BSON element','line_number':2704,'multiline':False]
['text':' Construct via setValue call.','line_number':2711,'multiline':False]
['text':' Ensure identity:','line_number':2719,'multiline':False]
['text':' Test that an object with complex substructure that lives in the leaf builder can be','line_number':2726,'multiline':False]
['text':' manipulated in the same way as an object with complex substructure that lives','line_number':2727,'multiline':False]
['text':' freely.','line_number':2728,'multiline':False]
['text':' NOTE: Someday, we may do in-place renames, but renaming 'foo' to 'foobar' will never','line_number':2829,'multiline':False]
['text':' work because the sizes don't match. Validate that this disables in-place updates.','line_number':2830,'multiline':False]
['text':' This isn't a great test since we aren't testing all possible combinations of compatible','line_number':2907,'multiline':False]
['text':' and incompatible sets, but since all setValueX calls decay to the internal setValue, we','line_number':2908,'multiline':False]
['text':' can be pretty sure that this will at least check the logic somewhat.','line_number':2909,'multiline':False]
['text':' TODO: When in-place updates for leaf elements is implemented, add tests here.','line_number':2959,'multiline':False]
['text':' TODO: When in-place updates for leaf elements is implemented, add tests here.','line_number':2991,'multiline':False]
['text':' TODO: When in-place updates for leaf elements is implemented, add tests here.','line_number':3015,'multiline':False]
['text':' TODO: Re-enable when in-place updates to leaf elements is supported','line_number':3035,'multiline':False]
['text':' x.setValueBool(true);','line_number':3036,'multiline':False]
['text':' ASSERT_TRUE(doc.getInPlaceUpdates(&damages, &source));','line_number':3037,'multiline':False]
['text':' apply(&obj, damages, source);','line_number':3038,'multiline':False]
['text':' ASSERT_TRUE(x.hasValue());','line_number':3039,'multiline':False]
['text':' ASSERT_TRUE(x.isType(mongo::Bool));','line_number':3040,'multiline':False]
['text':' ASSERT_EQUALS(true, x.getValueBool());','line_number':3041,'multiline':False]
['text':' TODO: When in-place updates for leaf elements is implemented, add tests here.','line_number':3061,'multiline':False]
['text':' TODO: Re-enable when in-place updates to leaf elements is supported','line_number':3083,'multiline':False]
['text':' x.setValueInt(value1);','line_number':3084,'multiline':False]
['text':' ASSERT_TRUE(doc.getInPlaceUpdates(&damages, &source));','line_number':3085,'multiline':False]
['text':' apply(&obj, damages, source);','line_number':3086,'multiline':False]
['text':' ASSERT_TRUE(x.hasValue());','line_number':3087,'multiline':False]
['text':' ASSERT_TRUE(x.isType(mongo::NumberInt));','line_number':3088,'multiline':False]
['text':' ASSERT_EQUALS(value1, x.getValueInt());','line_number':3089,'multiline':False]
['text':' TODO: When in-place updates for leaf elements is implemented, add tests here.','line_number':3110,'multiline':False]
['text':' TODO: Re-enable when in-place updates to leaf elements is supported','line_number':3133,'multiline':False]
['text':' x.setValueLong(value1);','line_number':3134,'multiline':False]
['text':' ASSERT_TRUE(doc.getInPlaceUpdates(&damages, &source));','line_number':3135,'multiline':False]
['text':' apply(&obj, damages, source);','line_number':3136,'multiline':False]
['text':' ASSERT_TRUE(x.hasValue());','line_number':3137,'multiline':False]
['text':' ASSERT_TRUE(x.isType(mongo::NumberLong));','line_number':3138,'multiline':False]
['text':' ASSERT_EQUALS(value1, x.getValueLong());','line_number':3139,'multiline':False]
['text':' TODO: Re-enable when in-place updates to leaf elements is supported','line_number':3162,'multiline':False]
['text':' x.setValueDouble(value1);','line_number':3163,'multiline':False]
['text':' ASSERT_TRUE(doc.getInPlaceUpdates(&damages, &source));','line_number':3164,'multiline':False]
['text':' apply(&obj, damages, source);','line_number':3165,'multiline':False]
['text':' ASSERT_TRUE(x.hasValue());','line_number':3166,'multiline':False]
['text':' ASSERT_TRUE(x.isType(mongo::NumberDouble));','line_number':3167,'multiline':False]
['text':' ASSERT_EQUALS(value1, x.getValueDouble());','line_number':3168,'multiline':False]
['text':' TODO: Re-enable when in-place updates to leaf elements is supported','line_number':3191,'multiline':False]
['text':' x.setValueDecimal(value1);','line_number':3192,'multiline':False]
['text':' ASSERT_TRUE(doc.getInPlaceUpdates(&damages, &source));','line_number':3193,'multiline':False]
['text':' apply(&obj, damages, source);','line_number':3194,'multiline':False]
['text':' ASSERT_TRUE(x.hasValue());','line_number':3195,'multiline':False]
['text':' ASSERT_TRUE(x.isType(mongo::NumberDecimal));','line_number':3196,'multiline':False]
['text':' ASSERT_TRUE(value1.isEqual(x.getValueDecimal()));','line_number':3197,'multiline':False]
['text':' Doubles and longs are the same size, 8 bytes, so we should be able to do in-place','line_number':3200,'multiline':False]
['text':' updates between them.','line_number':3201,'multiline':False]
['text':' We changed the type, so we get an extra damage event.','line_number':3216,'multiline':False]
['text':' TODO: Re-enable when in-place updates to leaf elements is supported','line_number':3223,'multiline':False]
['text':' x.setValueDouble(value1);','line_number':3224,'multiline':False]
['text':' ASSERT_TRUE(doc.getInPlaceUpdates(&damages, &source));','line_number':3225,'multiline':False]
['text':' apply(&obj, damages, source);','line_number':3226,'multiline':False]
['text':' ASSERT_TRUE(x.hasValue());','line_number':3227,'multiline':False]
['text':' ASSERT_TRUE(x.isType(mongo::NumberDouble));','line_number':3228,'multiline':False]
['text':' ASSERT_EQUALS(value1, x.getValueDouble());','line_number':3229,'multiline':False]
['text':' Perform an operation on 'b' that doesn't change the serialized value, but','line_number':3247,'multiline':False]
['text':' deserializes the node.','line_number':3248,'multiline':False]
['text':' Ensure that it compares correctly against the source object.','line_number':3257,'multiline':False]
['text':' Ensure that it compares correctly against a pristine document.','line_number':3259,'multiline':False]
['text':' Perform an operation on 'c' that doesn't change the serialized value, but','line_number':3263,'multiline':False]
['text':' deserializes the node.','line_number':3264,'multiline':False]
['text':' Ensure that it compares correctly against the source object','line_number':3273,'multiline':False]
['text':' Ensure that it compares correctly against a pristine document.','line_number':3275,'multiline':False]
['text':' Ensure that the two deserialized documents compare with each other correctly.','line_number':3279,'multiline':False]
['text':' Pass true to indicate that we should compare field names. The two documents should be unequal','line_number':3288,'multiline':False]
['text':' without the collator, but equal when using the "always equal" collator.','line_number':3289,'multiline':False]
['text':' Pass true to indicate that we should compare field names. The two documents should be unequal','line_number':3298,'multiline':False]
['text':' without the collator, but equal when using the "always equal" collator.','line_number':3299,'multiline':False]
['text':' Pass true to indicate that we should compare field names. The two documents should be unequal','line_number':3310,'multiline':False]
['text':' without the collator, but equal when using the "always equal" collator.','line_number':3311,'multiline':False]
['text':' Pass true to indicate that we should compare field names. The two documents should be unequal','line_number':3322,'multiline':False]
['text':' without the collator, but equal when using the "always equal" collator.','line_number':3323,'multiline':False]
['text':' Pass true to indicate that we should compare field names. The two documents should be unequal','line_number':3333,'multiline':False]
['text':' without the collator, but equal when using the "always equal" collator.','line_number':3334,'multiline':False]
['text':' Pass true to indicate that we should compare field names. The two documents should be unequal','line_number':3343,'multiline':False]
['text':' without the collator, but equal when using the "always equal" collator.','line_number':3344,'multiline':False]
['text':' With the always equal collator, the documents should start out comparing equal.','line_number':3354,'multiline':False]
['text':' They should still be equal after causing deserialization of one of the leaf elements of','line_number':3358,'multiline':False]
['text':' 'doc1'.','line_number':3359,'multiline':False]
['text':' And they should remain equal after doing the same to 'doc2'.','line_number':3371,'multiline':False]
['text':' namespace','line_number':3469,'multiline':False]
