['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' namespace','line_number':113,'multiline':False]
['text':' BSONObj ------------------------------------------------------------','line_number':115,'multiline':True]
['text':' The undefined behavior checks in this function are best-effort and attempt to detect','line_number':133,'multiline':False]
['text':' undefined behavior as early as possible. We cannot make any guarantees about detection','line_number':134,'multiline':False]
['text':' because we are observing undefined state, and we assume the compiler does not make either','line_number':135,'multiline':False]
['text':' of the following optimizations: a) optimizing away the call to objsize() on freed memory, and','line_number':136,'multiline':False]
['text':' b) optimizing away the two sequential calls to objsize() as one.','line_number':137,'multiline':False]
['text':' The behavior of this function must degrade as gracefully as possible under violation of','line_number':138,'multiline':False]
['text':' those assumptions, and preserving any currently observed behavior does not form an argument','line_number':139,'multiline':False]
['text':' against the later application of such optimizations.','line_number':140,'multiline':False]
['text':' If the call to objsize() changes between this call and the previous one, this indicates that','line_number':145,'multiline':False]
['text':' that the memory we are reading has changed, and we must exit immediately to avoid further','line_number':146,'multiline':False]
['text':' undefined behavior.','line_number':147,'multiline':False]
['text':' Helper to get an "internal function" to be able to do recursion','line_number':179,'multiline':False]
['text':' Temporarily allocated string that must live long enough to be copied by builder.','line_number':198,'multiline':False]
['text':' SERVER-79068 Templatizing this could be a good opportunity for performance','line_number':215,'multiline':False]
['text':' improvements.','line_number':216,'multiline':False]
['text':'appendMask=','line_number':248,'multiline':True]
['text':' For some BSONObj with lots of small fields, replacing each element's value with the default','line_number':253,'multiline':False]
['text':' redaction mask "###" may cause us to exceed the maximum allowed BSON size. In this case,','line_number':254,'multiline':False]
['text':' we use BSONType::jstNull, which ensures the redacted object will not be larger than the','line_number':255,'multiline':False]
['text':' original.','line_number':256,'multiline':False]
['text':'appendMask=','line_number':258,'multiline':True]
['text':' Only for unowned objects, the size is validated in the constructor, so it is an error for','line_number':263,'multiline':False]
['text':' the size to ever be invalid. This means that the unowned memory we are reading has','line_number':264,'multiline':False]
['text':' changed, and we must exit immediately to avoid further undefined behavior.','line_number':265,'multiline':False]
['text':' element is a leaf and will be omitted','line_number':304,'multiline':False]
['text':' subsequent elements are omitted','line_number':307,'multiline':False]
['text':' so far, equal...','line_number':403,'multiline':False]
['text':' well ordered compare ','line_number':425,'multiline':True]
['text':' TODO:  If actually important, may be able to do int->char* much faster','line_number':533,'multiline':False]
['text':' The first field is special in the case of a DBRef where the first field must be $ref','line_number':609,'multiline':False]
['text':' Cannot start with "$", unless dbref which must start with ($ref, $id)','line_number':615,'multiline':False]
['text':' $ref is a collection name and must be a String','line_number':618,'multiline':False]
['text':' keep inspecting fields for optional "$db"','line_number':622,'multiline':False]
['text':' "" if eoo()','line_number':624,'multiline':False]
['text':' optional $db field must be a String','line_number':626,'multiline':False]
['text':' this element is fine, so continue on to siblings (if any more)','line_number':628,'multiline':False]
['text':' Can't start with a "$", all other checks are done below (outside if blocks)','line_number':631,'multiline':False]
['text':' not an okay, $ prefixed field name.','line_number':637,'multiline':False]
['text':' TODO: combine field names for better error messages','line_number':648,'multiline':False]
['text':' TODO: combine field names for better error messages','line_number':654,'multiline':False]
['text':' After we have processed one field, we are no longer on the first field','line_number':663,'multiline':False]
['text':' We know that e has a cached field length since BSONObjIterator::next internally','line_number':687,'multiline':False]
['text':' called BSONElement::size on the BSONElement that it returned, so it is more','line_number':688,'multiline':False]
['text':' efficient to re-use that information by obtaining the field name as a','line_number':689,'multiline':False]
['text':' StringData, which will be pre-populated with the cached length.','line_number':690,'multiline':False]
['text':' If there is a common field, add the value from 'from' object.','line_number':746,'multiline':False]
['text':' Ignore the common fields as they are already added earlier.','line_number':755,'multiline':False]
['text':'* Compare two bson elements, provided as const char *'s, by field name. ','line_number':917,'multiline':True]
['text':' Just compare field names.','line_number':930,'multiline':False]
['text':'*
 * Types used to represent BSONObj and BSONArray memory in the Visual Studio debugger
 ','line_number':953,'multiline':True]
['text':' defined(_MSC_VER) && defined(_DEBUG)','line_number':964,'multiline':False]
['text':' namespace mongo','line_number':966,'multiline':False]
