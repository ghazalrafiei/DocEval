['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' IWYU pragma: keep','line_number':44,'multiline':False]
['text':' empty subclass of BSONObj useful for overloading','line_number':58,'multiline':False]
['text':'*
    the complete list of valid BSON types
    see also bsonspec.org
','line_number':63,'multiline':True]
['text':'* smaller than all other types ','line_number':68,'multiline':True]
['text':'* end of object ','line_number':70,'multiline':True]
['text':'* double precision floating point value ','line_number':72,'multiline':True]
['text':'* character string, stored in utf8 ','line_number':74,'multiline':True]
['text':'* an embedded object ','line_number':76,'multiline':True]
['text':'* an embedded array ','line_number':78,'multiline':True]
['text':'* binary data ','line_number':80,'multiline':True]
['text':'* (Deprecated) Undefined type ','line_number':82,'multiline':True]
['text':'* ObjectId ','line_number':84,'multiline':True]
['text':'* boolean type ','line_number':86,'multiline':True]
['text':'* date type ','line_number':88,'multiline':True]
['text':'* null type ','line_number':90,'multiline':True]
['text':'* regular expression, a pattern with options ','line_number':92,'multiline':True]
['text':'* (Deprecated) ','line_number':94,'multiline':True]
['text':'* code type ','line_number':96,'multiline':True]
['text':'* (Deprecated) a programming language (e.g., Python) symbol ','line_number':98,'multiline':True]
['text':'* (Deprecated) javascript code that can execute on the database server, with SavedContext ','line_number':100,'multiline':True]
['text':'* 32 bit signed integer ','line_number':102,'multiline':True]
['text':'* Two 32 bit signed integers ','line_number':104,'multiline':True]
['text':'* 64 bit integer ','line_number':106,'multiline':True]
['text':'* 128 bit decimal ','line_number':108,'multiline':True]
['text':'* max type that is not MaxKey ','line_number':110,'multiline':True]
['text':'* larger than all other types ','line_number':112,'multiline':True]
['text':'*
 * Maps from the set of type aliases accepted by the $type query operator to the corresponding BSON
 * types. Excludes "number", since this alias maps to a set of BSON types.
 ','line_number':116,'multiline':True]
['text':'*
 * returns the name of the argument's type
 ','line_number':122,'multiline':True]
['text':'*
 * Reverse mapping of typeName(). Throws an exception with error code BadValue when passed in
 * invalid type name.
 ','line_number':127,'multiline':True]
['text':'*
 * Prints the name of the argument's type to the given stream.
 ','line_number':133,'multiline':True]
['text':'*
 * Returns whether or not 'type' can be converted to a valid BSONType.
 ','line_number':138,'multiline':True]
['text':'*
 * IDL callback validator
 ','line_number':143,'multiline':True]
['text':'*
 * Given a type, returns whether or not that type has a variable width.
 *','line_number':161,'multiline':True]
['text':' subtypes of BinData.
   bdtCustom and above are ones that the JS compiler understands, but are
   opaque to the database.
','line_number':195,'multiline':True]
['text':' use BinGeneral instead ','line_number':202,'multiline':True]
['text':' deprecated ','line_number':203,'multiline':True]
['text':' language-independent UUID format across all drivers ','line_number':204,'multiline':True]
['text':' encryption placeholder or encrypted data ','line_number':206,'multiline':True]
['text':' compressed column ','line_number':207,'multiline':True]
['text':' data that should be redacted and protected from unnecessary exposure ','line_number':208,'multiline':True]
['text':'*
 * Return the name of the BinData Type.
 ','line_number':212,'multiline':True]
['text':'*
 * Returns whether or not 'type' can be converted to a valid BinDataType.
 ','line_number':217,'multiline':True]
['text':'* Returns a number for where a given type falls in the sort order.
 *  Elements with the same return value should be compared for value equality.
 *  The return value is not a BSONType and should not be treated as one.
 *  Note: if the order changes, indexes have to be re-built or there can be corruption
 ','line_number':222,'multiline':True]
['text':' This switch statement gets compiled down to a lookup table in GCC >= 8.5','line_number':228,'multiline':False]
['text':' To achieve this there must be NO exceptions thrown nor functions called as','line_number':229,'multiline':False]
['text':' otherwise it would break the optimization.','line_number':230,'multiline':False]
['text':' Additionally, it must also contain a default case in order to fully build','line_number':231,'multiline':False]
['text':' out the lookup table as it won't generate it as such without it.','line_number':232,'multiline':False]
['text':' As all possible values are mapped in the BSONType enum, we'll return a signal value','line_number':274,'multiline':False]
['text':' to be checked (if desired) by callers of the method if something completely','line_number':275,'multiline':False]
['text':' unexpected comes in. This codepath would only be reached if the given BSONType is not','line_number':276,'multiline':False]
['text':' a valid BSONType. One way this could occur is if the given value was constructed by','line_number':277,'multiline':False]
['text':' forcibly casting something into a BSONType without checking if it's valid.','line_number':278,'multiline':False]
['text':' To explicitly make it different than all BSONTypes','line_number':280,'multiline':False]
['text':'* Returns a number for where a given type falls in the sort order.
 *  Elements with the same return value should be compared for value equality.
 *  The return value is not a BSONType and should not be treated as one.
 *  Note: if the order changes, indexes have to be re-built or there can be corruption
 ','line_number':285,'multiline':True]
['text':'*
 * Returns whether conversion to JSON should format the Date type as local timezone.
 * This is a global setting set by the systemLog.timeStampFormat server option.
 ','line_number':305,'multiline':True]
['text':' BSONObjFallbackFormat is the trait that BSONObjAppendFormat falls back to in case there is
   no explicit specialization for a type. It has a second templated parameter so it can be enabled
   for groups of types, e.g. enums. ','line_number':314,'multiline':True]
['text':'* This is a special case because long long and int64_t are the same on some platforms but
 * different on others. If they are the same, the long long partial specialization of
 * BSONObjAppendFormat is accepted, otherwise the int64_t partial specialization of
 * BSONObjFallbackFormat is chosen. ','line_number':323,'multiline':True]
['text':'* Determine if T is appendable based on whether or not BSONOBjAppendFormat<T> has a value. ','line_number':330,'multiline':True]
['text':' namespace bsontype_detail','line_number':338,'multiline':False]
['text':' For platforms where long long and int64_t are the same, this partial specialization will be
   used for both. Otherwise, int64_t will use the specialization above. ','line_number':364,'multiline':True]
['text':' namespace mongo','line_number':381,'multiline':False]
