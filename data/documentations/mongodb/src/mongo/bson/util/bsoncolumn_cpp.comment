['text':'*
 *    Copyright (C) 2021-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' IWYU pragma: keep','line_number':53,'multiline':False]
['text':' Start capacity for memory blocks allocated by ElementStorage','line_number':60,'multiline':False]
['text':' Max capacity for memory blocks allocated by ElementStorage. We need to allow blocks to grow to at','line_number':63,'multiline':False]
['text':' least BSONObjMaxUserSize so we can construct user objects efficiently.','line_number':64,'multiline':False]
['text':' Memory offset to get to BSONElement value when field name is an empty string.','line_number':67,'multiline':False]
['text':' Lookup table to go from Control byte (high 4 bits) to scale index.','line_number':70,'multiline':False]
['text':' 0b1000','line_number':81,'multiline':False]
['text':' 0b1001','line_number':82,'multiline':False]
['text':' 0b1010','line_number':83,'multiline':False]
['text':' 0b1011','line_number':84,'multiline':False]
['text':' 0b1100','line_number':85,'multiline':False]
['text':' 0b1101','line_number':86,'multiline':False]
['text':'*
 * Helper class to perform recursion over a BSONObj. Two functions are provided:
 *
 * EnterSubObjFunc is called before recursing deeper, it may output an RAII object to perform logic
 * when entering/exiting a subobject.
 *
 * ElementFunc is called for every non-object element encountered during the recursion.
 ','line_number':91,'multiline':True]
['text':' namespace','line_number':146,'multiline':False]
['text':' Skip over type byte and null terminator for field name','line_number':152,'multiline':False]
['text':' If current block doesn't have enough capacity we need to allocate a new one.','line_number':185,'multiline':False]
['text':' Keep track of current block if it exists.','line_number':187,'multiline':False]
['text':' If contiguous mode is enabled we need to copy data from the previous block','line_number':192,'multiline':False]
['text':' Double block size while keeping it within [kStartCapacity, kMaxCapacity] range, unless a','line_number':198,'multiline':False]
['text':' size larger than kMaxCapacity is requested.','line_number':199,'multiline':False]
['text':' Copy data from the previous block if contiguous mode is enabled.','line_number':204,'multiline':False]
['text':' Increment the used size and return','line_number':212,'multiline':False]
['text':' Size needed for this BSONElement','line_number':239,'multiline':False]
['text':' Write type and null terminator in the first two bytes','line_number':245,'multiline':False]
['text':' Construct the Element, current block will have enough size at this point','line_number':252,'multiline':False]
['text':' Remember size of field name for this subobject in case it ends up being an empty','line_number':263,'multiline':False]
['text':' subobject and we need to 'deallocate' it.','line_number':264,'multiline':False]
['text':' We can allow an empty subobject if it existed in the reference object','line_number':266,'multiline':False]
['text':' Start the subobject, allocate space for the field in the parent which is BSON type byte +','line_number':269,'multiline':False]
['text':' field name + null terminator','line_number':270,'multiline':False]
['text':' BSON Object type begins with a 4 byte count of number of bytes in the object. Reserve','line_number':278,'multiline':False]
['text':' space for this count and remember the offset so we can set it later when the size is','line_number':279,'multiline':False]
['text':' known. Storing offset over pointer is needed in case we reallocate to a new memory block.','line_number':280,'multiline':False]
['text':' Check if we wrote no subfields in which case we are an empty subobject that needs to be','line_number':286,'multiline':False]
['text':' omitted','line_number':287,'multiline':False]
['text':' Write the EOO byte to end the object and fill out the first 4 bytes for the size that we','line_number':293,'multiline':False]
['text':' reserved in the constructor.','line_number':294,'multiline':False]
['text':' Initialize the iterator state to the first element','line_number':312,'multiline':False]
['text':' Traverse current Simple8b block for 64bit values if it exists','line_number':355,'multiline':False]
['text':' Traverse current Simple8b block for 128bit values if it exists','line_number':361,'multiline':False]
['text':' We don't have any more delta values in current block so we need to load next control byte.','line_number':368,'multiline':False]
['text':' Validate that we are not reading out of bounds','line_number':369,'multiline':False]
['text':' Decoders are exhausted, load next control byte. If we are at EOO then decoding is done.','line_number':372,'multiline':False]
['text':' Load new control byte','line_number':378,'multiline':False]
['text':' Notify the internal allocator to keep all allocations in contigous memory. That way we can','line_number':388,'multiline':False]
['text':' produce the full BSONObj that we need to return.','line_number':389,'multiline':False]
['text':' Iterate over the reference interleaved object. We match scalar subfields with our interleaved','line_number':392,'multiline':False]
['text':' states in order. Internally the necessary recursion is performed and the second lambda below','line_number':393,'multiline':False]
['text':' is called for scalar fields. Every element writes its data to the allocator so a full BSONObj','line_number':394,'multiline':False]
['text':' is produced, this usually happens within _loadDelta() but must explicitly be done in the','line_number':395,'multiline':False]
['text':' cases where re-materialization of the Element wasn't required (same as previous for example).','line_number':396,'multiline':False]
['text':' The first lambda outputs an RAII object that is instantiated every time we recurse deeper.','line_number':397,'multiline':False]
['text':' This handles writing the BSONObj size and EOO bytes for subobjects.','line_number':398,'multiline':False]
['text':' Called every time we recurse into a subobject. It makes sure we write the size and','line_number':406,'multiline':False]
['text':' EOO bytes.','line_number':407,'multiline':False]
['text':' Called for every scalar field in the reference interleaved BSONObj. We have as many','line_number':411,'multiline':False]
['text':' decoding states as scalars.','line_number':412,'multiline':False]
['text':' Remember the iterator position before writing anything. This is to detect that','line_number':416,'multiline':False]
['text':' nothing was written and we need to copy the element into the allocator position.','line_number':417,'multiline':False]
['text':' Load deltas if decoders are setup. nullptr is always used for "current". So even if','line_number':420,'multiline':False]
['text':' we are iterating the second time we are going to allocate new memory. This is a','line_number':421,'multiline':False]
['text':' tradeoff to avoid a decoded list of literals for every state that will only be used','line_number':422,'multiline':False]
['text':' if we iterate multiple times.','line_number':423,'multiline':False]
['text':' Decoders are exhausted and the next control byte was EOO then we should exit','line_number':431,'multiline':False]
['text':' interleaved mode. Return false to end the recursion early.','line_number':432,'multiline':False]
['text':' Decoders are exhausted so we need to load the next control byte that by','line_number':436,'multiline':False]
['text':' definition belong to this decoder state as we iterate in the same known order.','line_number':437,'multiline':False]
['text':' If the loaded control byte was a literal it is stored without field name. We need','line_number':442,'multiline':False]
['text':' to create a new BSONElement with the field name added as this is a sub-field in','line_number':443,'multiline':False]
['text':' an object.','line_number':444,'multiline':False]
['text':' If the encoded element wasn't stored in the allocator above we need to copy it here','line_number':455,'multiline':False]
['text':' as we're building a full BSONObj.','line_number':456,'multiline':False]
['text':' Remember last known value, needed for further decompression.','line_number':463,'multiline':False]
['text':' Traverse interleaved reference object, we will match interleaved states with literals.','line_number':471,'multiline':False]
['text':' Exit interleaved mode and load as regular. Re-instantiate the state and set last known','line_number':474,'multiline':False]
['text':' value.','line_number':475,'multiline':False]
['text':' This invalidates 'interleaved' reference, may no longer be dereferenced.','line_number':477,'multiline':False]
['text':' There should have been as many interleaved states as scalar fields.','line_number':485,'multiline':False]
['text':' Store built BSONObj in the decompressed list','line_number':488,'multiline':False]
['text':' If no data was added, use a EOO literal. As buffer size is 0 we cannot interpret it as BSON.','line_number':491,'multiline':False]
['text':' Root objects always have an empty field name and we already know the total object size.','line_number':497,'multiline':False]
['text':' Load current control byte, it can be either a literal or Simple-8b deltas','line_number':584,'multiline':False]
['text':' Load BSONElement from the literal and set last encoded in case we need to calculate','line_number':587,'multiline':False]
['text':' deltas from this literal','line_number':588,'multiline':False]
['text':' Setup decoder for this range of Simple-8b blocks','line_number':594,'multiline':False]
['text':' Instantiate decoder and load first value, every Simple-8b block should have at least one','line_number':599,'multiline':False]
['text':' value','line_number':600,'multiline':False]
['text':' Simple-8b delta block, load its scale factor and validate for sanity','line_number':604,'multiline':False]
['text':' If Double, scale last value according to this scale factor','line_number':610,'multiline':False]
['text':' We can read the last known value from the decoder iterator even as it has','line_number':619,'multiline':False]
['text':' reached end.','line_number':620,'multiline':False]
['text':' We can read the last known value from the decoder iterator even as it has','line_number':626,'multiline':False]
['text':' reached end.','line_number':627,'multiline':False]
['text':' boost::none represent skip, just append EOO BSONElement.','line_number':641,'multiline':False]
['text':' If we have a zero delta no need to allocate a new Element, we can just use previous.','line_number':646,'multiline':False]
['text':' Expand delta or delta-of-delta as last encoded.','line_number':651,'multiline':False]
['text':' Decoder state is now setup, materialize new value. We allocate a new BSONElement that fits','line_number':658,'multiline':False]
['text':' same value size as previous','line_number':659,'multiline':False]
['text':' Write value depending on type','line_number':664,'multiline':False]
['text':' EOO indicates the end of an interleaved object.','line_number':696,'multiline':False]
['text':' No other types use int64 and need to allocate value storage','line_number':699,'multiline':False]
['text':' boost::none represent skip, just append EOO BSONElement.','line_number':710,'multiline':False]
['text':' If we have a zero delta no need to allocate a new Element, we can just use previous.','line_number':715,'multiline':False]
['text':' Expand delta as last encoded.','line_number':720,'multiline':False]
['text':' Decoder state is now setup, write value depending on type','line_number':724,'multiline':False]
['text':' Add 5 bytes to size, strings begin with a 4 byte count and ends with a null','line_number':732,'multiline':False]
['text':' terminator','line_number':733,'multiline':False]
['text':' Write count, size includes null terminator','line_number':735,'multiline':False]
['text':' Write string value','line_number':737,'multiline':False]
['text':' Write null terminator','line_number':739,'multiline':False]
['text':' The first 5 bytes in binData is a count and subType, copy them from previous','line_number':746,'multiline':False]
['text':' No other types should use int128','line_number':763,'multiline':False]
['text':' Traverse until we reach desired index or end','line_number':810,'multiline':False]
['text':' Return none if out of bounds','line_number':816,'multiline':False]
['text':' TODO: check for valid encoding','line_number':840,'multiline':False]
['text':' reached end of column','line_number':841,'multiline':False]
['text':' TODO SERVER-74926 add interleaved support','line_number':848,'multiline':False]
['text':' Simple-8b Delta Block ','line_number':851,'multiline':True]
['text':' skip simple8b control blocks','line_number':857,'multiline':False]
['text':'*
 * Create a BSONElement with memory from allocator. Both String and Code are treated similarly and
 * use this helper.
 ','line_number':965,'multiline':True]
['text':' Add 5 bytes to size, strings begin with a 4 byte count and ends with a null terminator','line_number':972,'multiline':False]
['text':' Write count, size includes null terminator','line_number':974,'multiline':False]
['text':' Write string value','line_number':976,'multiline':False]
['text':' Write null terminator','line_number':978,'multiline':False]
['text':' Layout of a binary element:','line_number':989,'multiline':False]
['text':' - 4-byte length of binary data','line_number':990,'multiline':False]
['text':' - 1-byte binary subtype','line_number':991,'multiline':False]
['text':' - The binary data','line_number':992,'multiline':False]
['text':' namespace bsoncolumn','line_number':1011,'multiline':False]
['text':' namespace mongo','line_number':1012,'multiline':False]
