['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' Note the limit here is rather arbitrary and is simply a standard. generally the code works
   with any object that fits in ram.

   Also note that the server has some basic checks to enforce this limit but those checks are not
   exhaustive for example need to check for size too big after
     update $push (append) operation
','line_number':67,'multiline':True]
['text':'
   Sometimes we need objects slightly larger - an object in the replication local.oplog
   is slightly larger than a user object for example.
','line_number':76,'multiline':True]
['text':'*
 * This is the maximum size size of a buffer needed for storing a BSON object in a response message.
 ','line_number':84,'multiline':True]
['text':' Allow moving but not copying. It would be an error for two SharedBufferAllocators to use the','line_number':103,'multiline':False]
['text':' same underlying buffer.','line_number':104,'multiline':False]
['text':' The buffer holder size for 'SharedBufferAllocator' comes from 'SharedBuffer'','line_number':132,'multiline':False]
['text':' Discard if the build was not finished at the time of destruction.','line_number':147,'multiline':False]
['text':' Allow moving but not copying. It would be an error for two SharedBufferFragmentAllocator to','line_number':153,'multiline':False]
['text':' use the same underlying builder at the same time.','line_number':154,'multiline':False]
['text':' SharedBufferFragmentAllocator does not allocate any extra amount of memory for the buffer','line_number':188,'multiline':False]
['text':' holder.','line_number':189,'multiline':False]
['text':' Allow moving but not copying. It would be an error for two UniqueBufferAllocators to use the','line_number':207,'multiline':False]
['text':' same underlying buffer.','line_number':208,'multiline':False]
['text':' The buffer holder size for 'UniqueBufferAllocator' comes from 'UniqueBuffer'','line_number':236,'multiline':False]
['text':' StackAllocator does not allocate any extra amount of memory for the buffer holder.','line_number':293,'multiline':False]
['text':'* leave room for some stuff later
        @return point to region that was skipped.  pointer may change later (on realloc), so for
        immediate use only
    ','line_number':328,'multiline':True]
['text':' note this may be deallocated (realloced) if you keep writing. ','line_number':336,'multiline':True]
['text':' Bool does not have a well defined encoding.','line_number':366,'multiline':False]
['text':'* Returns the length of data in the current buffer ','line_number':414,'multiline':True]
['text':'* Returns the capacity of the buffer ','line_number':424,'multiline':True]
['text':' returns the pre-grow write position ','line_number':429,'multiline':True]
['text':'*
     * Reserve room for some number of bytes to be claimed at a later time via claimReservedBytes.
     ','line_number':439,'multiline':True]
['text':' _growOutOfLineSlowPath adds to _nextByte to speed up the','line_number':451,'multiline':False]
['text':' common case of grow(). Now remove those bytes, and put them','line_number':452,'multiline':False]
['text':' after _end.','line_number':453,'multiline':False]
['text':'*
     * Claim an earlier reservation of some number of bytes. These bytes must already have been
     * reserved. Appends of up to this many bytes immediately following a claim are
     * guaranteed to succeed without a need to reallocate.
     ','line_number':458,'multiline':True]
['text':'*
     * Replaces the buffer backing this BufBuilder with the passed in SharedBuffer.
     * Only legal to call when this builder is empty and when the SharedBuffer isn't shared.
     ','line_number':468,'multiline':True]
['text':' Can only do this while empty.','line_number':475,'multiline':False]
['text':'*
     * Returns the reservedBytes in this buffer
     ','line_number':482,'multiline':True]
['text':' NOTE: For now, we assume that all things written','line_number':494,'multiline':False]
['text':' by a BufBuilder are intended for external use: either written to disk','line_number':495,'multiline':False]
['text':' or to the wire. Since all of our encoding formats are little endian,','line_number':496,'multiline':False]
['text':' we bake that assumption in here. This decision should be revisited soon.','line_number':497,'multiline':False]
['text':'*
     * The "slow" portion of 'grow()', for when we actually need to go
     * to the underlying allocator for more memory. This function must
     * not be inlined.
     ','line_number':501,'multiline':True]
['text':' Going beyond the maximum buffer size is not likely.','line_number':511,'multiline':False]
['text':' We add 'BufferAllocator::kBuffHolderSize' to the requested reallocation size, as it will','line_number':518,'multiline':False]
['text':' be required later in '_buf.realloc'.','line_number':519,'multiline':False]
['text':' We find the next power of two greater than the requested size, as it's','line_number':522,'multiline':False]
['text':' commonly more friendly with the underlying (system) memory allocators.','line_number':523,'multiline':False]
['text':' Even though allocating some memory between BSONObjMaxUserSize and','line_number':526,'multiline':False]
['text':' kOpMsgReplyBSONBufferMaxSize is common, but compared to very many small','line_number':527,'multiline':False]
['text':' allocation done during the execution, it counts as an unlikely scenario. Still,','line_number':528,'multiline':False]
['text':' it has a significant implact on the memory efficiency of the system.','line_number':529,'multiline':False]
['text':' BSONObjMaxUserSize and kOpMsgReplyBSONBufferMaxSize are two common sizes that we','line_number':533,'multiline':False]
['text':' might allocate memory for. If the requested size is anywhere between','line_number':534,'multiline':False]
['text':' BSONObjMaxUserSize and kOpMsgReplyBSONBufferMaxSize, we allocate','line_number':535,'multiline':False]
['text':' kOpMsgReplyBSONBufferMaxSize bytes to avoid potential reallocation due to the','line_number':536,'multiline':False]
['text':' additional header objects that wrap the maximum size of a BSON.','line_number':537,'multiline':False]
['text':' The minimum allocation is 64 bytes.','line_number':540,'multiline':False]
['text':' If adding 'kBuffHolderSize' to 'minSize' pushes it beyond 'BufferMaxSize', then we'll','line_number':543,'multiline':False]
['text':' allocate enough memory according to the 'BufferMaxSize'.','line_number':544,'multiline':False]
['text':' As we've added 'BufferAllocator::kBuffHolderSize' to 'minSize' in the beginning, we','line_number':548,'multiline':False]
['text':' subtract it here from 'reallocSize' to account for the same amount that will be added','line_number':549,'multiline':False]
['text':' later in '_buf.realloc'. Without this, we will end up allocating an amount of memory,','line_number':550,'multiline':False]
['text':' which is not a power of two and defeats the purpose of the above logic to find the','line_number':551,'multiline':False]
['text':' next power of two for being friendly to the system memory allocators and avoid memory','line_number':552,'multiline':False]
['text':' fragmentation.','line_number':553,'multiline':False]
['text':' The following extern template declaration must follow','line_number':573,'multiline':False]
['text':' BasicBufBuilder and come before its instantiation as a base class','line_number':574,'multiline':False]
['text':' for BufBuilder. Do not remove or re-order these lines w.r.t those','line_number':575,'multiline':False]
['text':' types without being sure that you are not undoing the advantages of','line_number':576,'multiline':False]
['text':' the extern template declaration.','line_number':577,'multiline':False]
['text':'*
     * Assume ownership of the buffer.
     * Note: There should not be any other method calls on this object after a call to 'release'.
     ','line_number':585,'multiline':True]
['text':' The following extern template declaration must follow','line_number':594,'multiline':False]
['text':' BasicBufBuilder and come before its instantiation as a base class','line_number':595,'multiline':False]
['text':' for PooledFragmentBuilder. Do not remove or re-order these lines','line_number':596,'multiline':False]
['text':' w.r.t those types without being sure that you are not undoing the','line_number':597,'multiline':False]
['text':' advantages of the extern template declaration.','line_number':598,'multiline':False]
['text':' The following extern template declaration must follow','line_number':612,'multiline':False]
['text':' BasicBufBuilder and come before its instantiation as a base class','line_number':613,'multiline':False]
['text':' for UniqueBufBuilder. Do not remove or re-order these lines w.r.t','line_number':614,'multiline':False]
['text':' those types without being sure that you are not undoing the','line_number':615,'multiline':False]
['text':' advantages of the extern template declaration.','line_number':616,'multiline':False]
['text':'*
     * Assume ownership of the buffer.
     * Note: There should not be any other method calls on this object after a call to 'release'.
     ','line_number':624,'multiline':True]
['text':'* The StackBufBuilder builds smaller datasets on the stack instead of using malloc.
      this can be significantly faster for small bufs.  However, you can not release() the
      buffer with StackBufBuilder.
    While designed to be a variable on the stack, if you were to dynamically allocate one,
      nothing bad would happen.  In fact in some circumstances this might make sense, say,
      embedded in some other object.
','line_number':633,'multiline':True]
['text':' This extern template declaration must follow the declaration of','line_number':649,'multiline':False]
['text':' StackBufBuilderBase, and must come before the extern template','line_number':650,'multiline':False]
['text':' declarations of StringBuilder below. Do not remove or re-order','line_number':651,'multiline':False]
['text':' these lines w.r.t those StackBufBuilderBase or the other extern','line_number':652,'multiline':False]
['text':' template declarations without being sure that you are not undoing','line_number':653,'multiline':False]
['text':' the advantages of the extern template declaration.','line_number':654,'multiline':False]
['text':'* std::stringstream deals with locale so this is a lot faster than std::stringstream for UTF8 ','line_number':657,'multiline':True]
['text':' Sizes are determined based on the number of characters in 64-bit + the trailing '\0'','line_number':661,'multiline':False]
['text':' Accounts for the 0x prefix','line_number':668,'multiline':False]
['text':'*
     * Fail to compile if passed an unevaluated function, rather than allow it to decay and invoke
     * the bool overload. This catches both passing std::hex (which isn't supported by this type)
     * and forgetting to add () when doing `stream << someFuntion`.
     ','line_number':732,'multiline':True]
['text':'*
     * stringView() returns a view of this string without copying.
     *
     * WARNING: The view is invalidated when this StringBuilder is modified or destroyed.
     ','line_number':770,'multiline':True]
['text':'*
     * stringData() returns a view of this string without copying.
     *
     * WARNING: The view is invalidated when this StringBuilder is modified or destroyed.
     ','line_number':779,'multiline':True]
['text':'* size of current std::string ','line_number':788,'multiline':True]
['text':' char shouldn't append as number.','line_number':796,'multiline':False]
['text':' Send the magnitude to ItoA.','line_number':801,'multiline':False]
['text':' The following extern template declaration must follow the','line_number':823,'multiline':False]
['text':' declaration of StringBuilderImpl and StackBufBuilderBase along with','line_number':824,'multiline':False]
['text':' the extern template delarations for that type. Do not remove or','line_number':825,'multiline':False]
['text':' re-order these lines w.r.t those types without being sure that you','line_number':826,'multiline':False]
['text':' are not undoing the advantages of the extern template declaration.','line_number':827,'multiline':False]
['text':' namespace mongo','line_number':831,'multiline':False]
