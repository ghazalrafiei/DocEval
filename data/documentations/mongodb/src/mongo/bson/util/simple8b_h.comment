['text':'*
 *    Copyright (C) 2021-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 * Simple8b provides an interface to read Simple8b encoded data built by Simple8bBuilder
 ','line_number':48,'multiline':True]
['text':' typedefs expected in iterators','line_number':60,'multiline':False]
['text':'*
         * Returns the number of values in the current Simple8b block that the iterator is
         * positioned on.
         ','line_number':67,'multiline':True]
['text':'*
         * Returns the value in at the current iterator position.
         ','line_number':73,'multiline':True]
['text':'*
         * Advance the iterator one step.
         ','line_number':83,'multiline':True]
['text':'*
         * Advance the iterator to the next Simple8b block.
         ','line_number':88,'multiline':True]
['text':'*
         * Returns true if iterator can be incremented. Equivalent to comparing not equal with the
         * end iterator.
         ','line_number':96,'multiline':True]
['text':'*
         * Returns true if iterator was instantiated with a valid memory block.
         ','line_number':102,'multiline':True]
['text':'*
         * Loads the current Simple8b block into the iterator
         ','line_number':111,'multiline':True]
['text':'*
         * RLE count, may only be called if iterator is positioned on an RLE block
         ','line_number':117,'multiline':True]
['text':' Current Simple8b block in native endian','line_number':125,'multiline':False]
['text':' Mask for getting a single Simple-8b slot','line_number':130,'multiline':False]
['text':' Remaining RLE count for repeating previous value','line_number':133,'multiline':False]
['text':' Number of positions to shift the mask to get slot for current iterator position','line_number':136,'multiline':False]
['text':' Number of bits in single Simple-8b slot, used to increment _shift when updating iterator','line_number':139,'multiline':False]
['text':' position','line_number':140,'multiline':False]
['text':' Variables for the extended Selectors 7 and 8 with embedded count in Simple-8b slot','line_number':143,'multiline':False]
['text':' Mask to extract count','line_number':144,'multiline':False]
['text':' Number of bits for the count','line_number':147,'multiline':False]
['text':' Multiplier of the value in count to get number of zeros','line_number':150,'multiline':False]
['text':' Holds the current simple8b block's selector','line_number':153,'multiline':False]
['text':' Holds the current simple8b blocks's extension type','line_number':156,'multiline':False]
['text':'*
     * Does not take ownership of buffer, must remain valid during the lifetime of this class.
     ','line_number':160,'multiline':True]
['text':'*
     * Forward iterators to read decompressed values
     ','line_number':166,'multiline':True]
['text':' Previous value to be used in case the first block in the buffer is RLE.','line_number':175,'multiline':False]
['text':' If RLE selector, just load remaining count. Keep value from previous.','line_number':200,'multiline':False]
['text':' Set shift to something larger than 64bit to force a new block to be loaded when','line_number':202,'multiline':False]
['text':' we've extinguished RLE count.','line_number':203,'multiline':False]
['text':' If Selectors 7 or 8 check if we are using extended selectors','line_number':212,'multiline':False]
['text':' Use the extended selector if extension is != 0','line_number':215,'multiline':False]
['text':' Make shift the size of 2 selectors to handle extensions','line_number':218,'multiline':False]
['text':' Initialize all variables needed to advance the iterator for this block','line_number':223,'multiline':False]
['text':' Finally load the first value in the block.','line_number':232,'multiline':False]
['text':' Mask out the value of current slot','line_number':238,'multiline':False]
['text':' Check if this a skip','line_number':242,'multiline':False]
['text':' Shift in any trailing zeros that are stored in the count for extended selectors 7 and 8.','line_number':248,'multiline':False]
['text':' SelectorExtension holds the rle count in this case','line_number':267,'multiline':False]
['text':' Constant for a simple8b block containing a single 'missing' value.','line_number':338,'multiline':False]
['text':'*
 * Calculates the sum for multiple simple8b blocks in a buffer. 'prevNonRLE' should be initialized
 * to 'kSingleSkip' when calculating sum for the first buffer. If the caller needs sum from multiple
 * buffers the value should be passed along between the calls.
 ','line_number':341,'multiline':True]
['text':'*
 * Calculates the prefix sum (or cumulative sum) for multiple simple8b blocks in a buffer. 'prefix'
 * should contain the initial prefix and will be updated to the new prefix after calculating prefix
 * sum for this block. 'prevNonRLE' should be initialized to 'kSingleSkip' when calculating prefix
 * sum for the first buffer. If the caller needs prefix sum from multiple buffers the values of
 * 'prefix' and 'prevNonRLE' should be passed along between the calls.
 ','line_number':349,'multiline':True]
['text':' namespace simple8b','line_number':358,'multiline':False]
['text':' namespace mongo','line_number':360,'multiline':False]
