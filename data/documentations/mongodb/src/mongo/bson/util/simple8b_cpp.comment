['text':'*
 *    Copyright (C) 2023-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' Sentinel to represent missing, this value is not encodable in simple8b','line_number':38,'multiline':False]
['text':' Performs addition as unsigned and cast back to signed to get overflow defined to wrapped around','line_number':41,'multiline':False]
['text':' instead of undefined behavior.','line_number':42,'multiline':False]
['text':' Simple Simple8b decoder for decoding any basic simple8b block where all bits are used for the','line_number':51,'multiline':False]
['text':' value, decodes signed integer at runtime. Suitable for selectors with many bits per slot. Encoded','line_number':52,'multiline':False]
['text':' should be be machine endian and first slot should start at least significant bit.','line_number':53,'multiline':False]
['text':' Number of values in this block.','line_number':56,'multiline':False]
['text':' Bit mask to extract a single slot and to check for the missing bit pattern.','line_number':59,'multiline':False]
['text':' Calculate the sum of all slots.','line_number':62,'multiline':False]
['text':' Calculate the prefix sum of all slots.','line_number':76,'multiline':False]
['text':' Returns value of last slot. Treats missing as 0.','line_number':91,'multiline':False]
['text':' Returns value of last slot. 'kMissing' is returned for missing.','line_number':99,'multiline':False]
['text':' Table-based decoder that uses a lookup table for decoding unsigned integers into signed. Suitable','line_number':108,'multiline':False]
['text':' for selectors with few bits per slot as the internal lookup table grows with bits per slot.','line_number':109,'multiline':False]
['text':' Encoded should be be machine endian and first slot should start at least significant bit.','line_number':110,'multiline':False]
['text':' Type to store in lookup table, depends on bit width per slot.','line_number':113,'multiline':False]
['text':' Constant to constrain table size.','line_number':116,'multiline':False]
['text':' Number of values in this block','line_number':121,'multiline':False]
['text':' Number of entries in lookup table','line_number':123,'multiline':False]
['text':' Bit mask to extract a single slot and to check for the missing bit pattern.','line_number':125,'multiline':False]
['text':' Largest possible value that can be stored in this slot','line_number':128,'multiline':False]
['text':' Smallest possible value that can be stored in this slot','line_number':130,'multiline':False]
['text':' Verify that lookup table is within size limit and that it can store our possible range of','line_number':133,'multiline':False]
['text':' values','line_number':134,'multiline':False]
['text':' Decoded signed value for this slot.','line_number':142,'multiline':False]
['text':' Number of non-missing entries. Can be 0 or 1.','line_number':144,'multiline':False]
['text':' Initialize lookup table','line_number':149,'multiline':False]
['text':' Calculate the sum of all slots','line_number':161,'multiline':False]
['text':' Calculate the prefix sum of all slots.','line_number':172,'multiline':False]
['text':' Returns value of last slot. Treats missing as 0','line_number':185,'multiline':False]
['text':' Returns value of last slot. 'kMissing' is returned for missing.','line_number':191,'multiline':False]
['text':' Table-based decoder that uses a lookup table for decoding multiple unsigned integers into signed','line_number':202,'multiline':False]
['text':' at once. Suitable for selectors with few bits per slot as the internal lookup table grows with','line_number':203,'multiline':False]
['text':' bits per slot. Encoded should be be machine endian and first slot should start at least','line_number':204,'multiline':False]
['text':' significant bit.','line_number':205,'multiline':False]
['text':' Constant to constrain table size, 2^X.','line_number':208,'multiline':False]
['text':' Number of slots that we can decode together','line_number':212,'multiline':False]
['text':' Number of shift to get to the next decoding iteration.','line_number':215,'multiline':False]
['text':' Number of decoding iterations in this block','line_number':217,'multiline':False]
['text':' Number of entries in lookup table','line_number':219,'multiline':False]
['text':' Bit mask to extract a single slot and to check for the missing bit pattern.','line_number':221,'multiline':False]
['text':' Largest possible value that can be stored in this slot','line_number':224,'multiline':False]
['text':' Smallest possible value that can be stored in this slot','line_number':226,'multiline':False]
['text':' Calculate number of values that needs to be stored for prefix sum','line_number':229,'multiline':False]
['text':' Verify that lookup table is within size limit and that it can store our possible range of','line_number':238,'multiline':False]
['text':' values','line_number':239,'multiline':False]
['text':' Initialize lookup table','line_number':262,'multiline':False]
['text':' Calculate the sum of all slots','line_number':283,'multiline':False]
['text':' Calculate the prefix sum of all slots.','line_number':294,'multiline':False]
['text':' Special table-based decoder for the special 1 bit per slot case. The only two representable','line_number':311,'multiline':False]
['text':' values is '0' or 'missing'. We can use this to take some shortcuts.','line_number':312,'multiline':False]
['text':' Constant to constrain table size, 2^X.','line_number':314,'multiline':False]
['text':' Number of slots that we can decode together','line_number':320,'multiline':False]
['text':' Number of shift to get to the next decoding iteration.','line_number':323,'multiline':False]
['text':' Number of decoding iterations in this block','line_number':325,'multiline':False]
['text':' Number of entries in lookup table','line_number':327,'multiline':False]
['text':' Bit mask to extract a single slot and to check for the missing bit pattern.','line_number':329,'multiline':False]
['text':' Table contains number of non-skipped entries','line_number':332,'multiline':False]
['text':' Initialize lookup table','line_number':335,'multiline':False]
['text':' Calculate the prefix sum of all slots.','line_number':347,'multiline':False]
['text':' Returns value of last slot. 'kMissing' is returned for missing.','line_number':361,'multiline':False]
['text':' Special Simple8b decoder for decoding the extended selectors where the slot bits are split up in','line_number':371,'multiline':False]
['text':' a value and count for a left shift. Encoded should be be machine endian and first slot should','line_number':372,'multiline':False]
['text':' start at least significant bit.','line_number':373,'multiline':False]
['text':' Calculate the sum of all slots','line_number':382,'multiline':False]
['text':' Calculate the prefix sum of all slots.','line_number':399,'multiline':False]
['text':' Returns value of last slot. Treats missing as 0','line_number':417,'multiline':False]
['text':' Returns value of last slot. 'kMissing' is returned for missing.','line_number':430,'multiline':False]
['text':' Storage for all decoders that we need for our various selector types','line_number':444,'multiline':False]
['text':' Decodes last slot for simple8b block. Treats missing as 0.','line_number':487,'multiline':False]
['text':' Only 0 or missing deltas','line_number':493,'multiline':False]
['text':' invalid encoding','line_number':531,'multiline':False]
['text':' invalid encoding','line_number':569,'multiline':False]
['text':' invalid encoding','line_number':637,'multiline':False]
['text':' invalid encoding','line_number':675,'multiline':False]
['text':' Decodes and sums all slots in simple8b block, writes last encountered non-rle block in','line_number':700,'multiline':False]
['text':' 'prevNonRLE'.','line_number':701,'multiline':False]
['text':' Only 0 or missing deltas','line_number':710,'multiline':False]
['text':' Decodes and sums all slots in simple8b block, writes last encountered non-rle block in','line_number':810,'multiline':False]
['text':' 'prevNonRLE'.','line_number':811,'multiline':False]
['text':' Number of repeated values','line_number':915,'multiline':False]
['text':' We can calculate prefix sum like this because num is always even and value is always','line_number':917,'multiline':False]
['text':' the same for RLE.','line_number':918,'multiline':False]
['text':' namespace','line_number':930,'multiline':False]
['text':' Explicit template instantiations for our supported types','line_number':958,'multiline':False]
['text':' namespace mongo::simple8b','line_number':964,'multiline':False]
