['text':'*
 *    Copyright (C) 2021-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' namespace','line_number':53,'multiline':False]
['text':' Copy counter and timestamp bytes so that they match the specs in the header.','line_number':61,'multiline':False]
['text':' Counter index 2.','line_number':62,'multiline':False]
['text':' Timestamp index 3.','line_number':63,'multiline':False]
['text':' Counter index 1.','line_number':64,'multiline':False]
['text':' Timestamp index 2.','line_number':65,'multiline':False]
['text':' Counter index 0.','line_number':66,'multiline':False]
['text':' Timestamp index 1.','line_number':67,'multiline':False]
['text':' Timestamp index 0.','line_number':68,'multiline':False]
['text':' Set Timestamp and Counter variables together.','line_number':79,'multiline':False]
['text':' Timestamp index 0.','line_number':80,'multiline':False]
['text':' Timestamp index 1.','line_number':81,'multiline':False]
['text':' Timestamp index 2.','line_number':82,'multiline':False]
['text':' Timestamp index 3.','line_number':83,'multiline':False]
['text':' Counter index 0;','line_number':84,'multiline':False]
['text':' Counter index 1.','line_number':85,'multiline':False]
['text':' Counter index 2.','line_number':86,'multiline':False]
['text':' Finally set Process Unique.','line_number':88,'multiline':False]
['text':' Don't store isnan and isinf and end calculation early','line_number':102,'multiline':False]
['text':' Try multiplying by selected powers of 10 until we do not have any decimal digits. If we','line_number':106,'multiline':False]
['text':' always have leftover digits, return none.','line_number':107,'multiline':False]
['text':' Checks for both overflows','line_number':111,'multiline':False]
['text':' We use 2^53 because this is the max integer that we can guarentee can be','line_number':112,'multiline':False]
['text':' exactly represented by a floating point decimal since there are 53 value bits','line_number':113,'multiline':False]
['text':' in a IEEE754 Floating 64 representation','line_number':114,'multiline':False]
['text':' -2^53','line_number':115,'multiline':False]
['text':' 2^53','line_number':116,'multiline':False]
['text':' Checks for both overflow and handles NaNs','line_number':138,'multiline':False]
['text':' We use 2^53 because this is the max integer that we can guarentee can be','line_number':139,'multiline':False]
['text':' exactly represented by a floating point decimal since there are 53 value bits','line_number':140,'multiline':False]
['text':' in a IEEE754 Floating 64 representation','line_number':141,'multiline':False]
['text':' -2^53','line_number':144,'multiline':False]
['text':' 2^53','line_number':145,'multiline':False]
['text':' Check to make sure our exact encoded value can be exactly converted back into a decimal.','line_number':150,'multiline':False]
['text':' We use encodeInt64 to handle negative floats by taking the signed bit and placing it at the','line_number':151,'multiline':False]
['text':' lsb position','line_number':152,'multiline':False]
['text':' We need to check that we can get the exact bit pattern back. 0.0 and -0.0 compares as equal','line_number':155,'multiline':False]
['text':' when comparing as doubles but they have different bit patterns.','line_number':156,'multiline':False]
['text':' Delta encoding. Gap should never induce overflow','line_number':160,'multiline':False]
['text':' Strings are reversed as it is deemed likely that entopy is located at the end of the string.','line_number':212,'multiline':False]
['text':' This will put the entropy in the least significant byte creating a smaller delta. We can't','line_number':213,'multiline':False]
['text':' have leading zero bytes as that would create a decoding ambiguity. Empty strings are fine','line_number':214,'multiline':False]
['text':' however, they are just encoded as 0.','line_number':215,'multiline':False]
['text':' String may be up to 16 characters, provide that decode and then we need to scan the result to','line_number':224,'multiline':False]
['text':' find actual size','line_number':225,'multiline':False]
['text':' Find first non null character from the end of the string to determine actual size','line_number':229,'multiline':False]
['text':' Reverse and return string','line_number':234,'multiline':False]
['text':' namespace mongo','line_number':241,'multiline':False]
