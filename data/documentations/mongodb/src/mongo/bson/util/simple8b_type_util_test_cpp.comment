['text':'*
 *    Copyright (C) 2021-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' We should never reach this','line_number':53,'multiline':False]
['text':' Initialize to something non zero so we can verify that we did not write out of bounds','line_number':70,'multiline':False]
['text':' Represented as 1234 = 0...010011010010','line_number':130,'multiline':False]
['text':'  Left Shifted 0..0100110100100','line_number':131,'multiline':False]
['text':'  Right shifted 0..000000000000','line_number':132,'multiline':False]
['text':'  xor = 0..0100110100100 = 0x9A4','line_number':133,'multiline':False]
['text':' Represented as 1234 = 1...010011010010','line_number':142,'multiline':False]
['text':'  Left Shifted 0..0100110100100','line_number':143,'multiline':False]
['text':'  Right shifted 0..000000000001','line_number':144,'multiline':False]
['text':'  xor = 0..0100110100101 = 0x9A3','line_number':145,'multiline':False]
['text':' Some of the special values above does not compare equal with themselves (signaling NaN).','line_number':300,'multiline':False]
['text':' Verify that we end up with the same memory after decoding','line_number':301,'multiline':False]
['text':' max int that can be stored as a double without losing precision','line_number':309,'multiline':False]
['text':' Handle negative case','line_number':316,'multiline':False]
['text':' Handle negative case','line_number':329,'multiline':False]
['text':' Handle negative case by subtracting 1','line_number':342,'multiline':False]
['text':' min int that can be stored as a double without losing precision','line_number':349,'multiline':False]
['text':' Handle negative case','line_number':356,'multiline':False]
['text':' Array contents are ignored because we are passing zero for 'size'.','line_number':428,'multiline':False]
['text':' a = 97 = 01100001','line_number':439,'multiline':False]
['text':' b = 98 = 01100010','line_number':440,'multiline':False]
['text':' c = 99 = 01100011','line_number':441,'multiline':False]
['text':' abc = 011000110110001001100001 = 6513249','line_number':442,'multiline':False]
['text':' a = 97 = 01100001','line_number':449,'multiline':False]
['text':' 1 = 00000001','line_number':450,'multiline':False]
['text':' \n = 00001010','line_number':451,'multiline':False]
['text':' a1\n = 000010100000000101100001 = 655713','line_number':452,'multiline':False]
['text':' 0 = 48 = 0011000','line_number':469,'multiline':False]
['text':' Our reuslt should be','line_number':470,'multiline':False]
['text':' 00110000 0011000 00110000 1100001 00110000 00110000 00110000','line_number':471,'multiline':False]
['text':' a = 97 = 01100001','line_number':480,'multiline':False]
['text':' b = 98 = 01100010','line_number':481,'multiline':False]
['text':' reversed in little endian = 0110000101100010','line_number':482,'multiline':False]
['text':' a = 97 = 01100001','line_number':487,'multiline':False]
['text':' b = 98','line_number':488,'multiline':False]
['text':' c = 99','line_number':489,'multiline':False]
['text':' d = 100','line_number':490,'multiline':False]
['text':' reversed in little endian = 1100001 01100001 01100001 01100001 01100010 01100010 01100010','line_number':491,'multiline':False]
['text':' 01100010 01100011 01100011 01100011 01100011 01100100 01100100 01100100 01100100','line_number':492,'multiline':False]
['text':' a = 97 = 01100001','line_number':502,'multiline':False]
['text':' b = 98','line_number':503,'multiline':False]
['text':' \n = 10 = 1010','line_number':504,'multiline':False]
['text':' reversed in little endian = 1100001 00001010 01100010','line_number':505,'multiline':False]
