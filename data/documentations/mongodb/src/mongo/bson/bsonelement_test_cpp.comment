['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' IWYU pragma: no_include "ext/type_traits.h"','line_number':31,'multiline':False]
['text':' Random BinData shorter than UUID','line_number':54,'multiline':False]
['text':' Valid RFC4122v4 UUID, but with extra byte added.','line_number':74,'multiline':False]
['text':' Not truly zero because Windows doesn't support that.','line_number':75,'multiline':False]
['text':' No terminating zero','line_number':76,'multiline':False]
['text':' ByteArrayDeprecated has a nonsense 4-byte redundant length field','line_number':111,'multiline':False]
['text':' that _binDataVector should ignore.','line_number':112,'multiline':False]
['text':' Insert a 4-byte prefix for the ignored ByteArrayDeprecated "length"','line_number':116,'multiline':False]
['text':' Testing default BSONObj Timestamp method, which constructs an empty Timestamp','line_number':140,'multiline':False]
['text':' Testing max allowable integer values','line_number':149,'multiline':False]
['text':' Testing for correct format when printing BSONObj Timestamps','line_number':152,'multiline':False]
['text':' using .toString(includeFieldName = false, full = false)','line_number':153,'multiline':False]
['text':' kLongLongMaxPlusOneAsDouble is the least double value that will overflow a 64-bit signed','line_number':188,'multiline':False]
['text':' two's-complement integer. Historically, converting this value with safeNumberLong() would','line_number':189,'multiline':False]
['text':' return the result of casting to double with a C-style cast. That operation is undefined','line_number':190,'multiline':False]
['text':' because of the overflow, but on most platforms we support, it returned the min 64-bit value','line_number':191,'multiline':False]
['text':' (-2^63). The safeNumberLongForHash() function should preserve that behavior indefinitely for','line_number':192,'multiline':False]
['text':' compatibility with on-disk data.','line_number':193,'multiline':False]
['text':' The safeNumberLong() function clamps kLongLongMaxPlusOneAsDouble to the max 64-bit value','line_number':197,'multiline':False]
['text':' (2^63 - 1).','line_number':198,'multiline':False]
['text':' One quantum below kLongLongMaxPlusOneAsDouble is the largest double that safely converts to a','line_number':202,'multiline':False]
['text':' 64-bit signed two-s complement integer. Both safeNumberLong() and safeNumberLongForHash()','line_number':203,'multiline':False]
['text':' convert this using a C or C-style cast, an operation with defined behavior. This conversion','line_number':204,'multiline':False]
['text':' is exact.','line_number':205,'multiline':False]
['text':' One quantum above kLongLongMaxPlusOneAsDouble is another number that that is too large to','line_number':209,'multiline':False]
['text':' convert. The safeNumberLong() function has always clamped this value to the max 64-bit value','line_number':210,'multiline':False]
['text':' (2^63 - 1), and that should continue to be the behavior for both safeNumberLong() and','line_number':211,'multiline':False]
['text':' safeNumberLongForHash().','line_number':212,'multiline':False]
['text':' Both safeNumberLong() and safeNumberLongForHash() also clamp positive infinity to the max','line_number':217,'multiline':False]
['text':' 64-bit value (2^63 - 1).','line_number':218,'multiline':False]
['text':' Unlike the max long long value, the least long long value (-2^63) converts exactly to a','line_number':225,'multiline':False]
['text':' double value and can safely be used as a bound to check which double values are in the range','line_number':226,'multiline':False]
['text':' of long long.','line_number':227,'multiline':False]
['text':' This comment forces clang-format to break here.','line_number':231,'multiline':False]
['text':' Representable integer in double.','line_number':418,'multiline':False]
['text':' namespace','line_number':453,'multiline':False]
['text':' namespace mongo','line_number':454,'multiline':False]
