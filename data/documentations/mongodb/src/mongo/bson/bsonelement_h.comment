['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' strlen','line_number':36,'multiline':False]
['text':' IWYU pragma: keep','line_number':58,'multiline':False]
['text':'*
    BSONElement represents an "element" in a BSONObj.  So for the object { a : 3, b : "abc" },
    'a : 3' is the first element (key+value).

    The BSONElement object points into the BSONObj's data.  Thus the BSONObj must stay in scope
    for the life of the BSONElement.

    internals:
    <type><fieldName    ><value>
    -------- size() ------------
    -fieldNameSize-
    value()
    type()
','line_number':81,'multiline':True]
['text':' Declared in bsonobj_comparator_interface.h.','line_number':97,'multiline':False]
['text':'*
     * Operator overloads for relops return a DeferredComparison which can subsequently be evaluated
     * by a BSONObj::ComparatorInterface.
     ','line_number':100,'multiline':True]
['text':'*
     * Set of rules that dictate the behavior of the comparison APIs.
     ','line_number':106,'multiline':True]
['text':'*
     * Compares two BSON elements of the same canonical type.
     *
     * Returns <0 if 'l' is less than the element 'r'.
     *         >0 if 'l' is greater than the element 'r'.
     *          0 if 'l' is equal to the element 'r'.
     ','line_number':112,'multiline':True]
['text':'*
     * These functions, which start with a capital letter, throw if the
     * element is not of the required type. Example:
     *
     * std::string foo = obj["foo"].String(); // std::exception if not a std::string type or DNE
     ','line_number':125,'multiline':True]
['text':'*
     * Transform a BSON array into a vector of BSONElements.
     * If the array keys are not in sequential order or are otherwise invalid, an exception is
     * thrown.
     ','line_number':163,'multiline':True]
['text':'*
     * @return the embedded object associated with this field.
     * Note the returned object is a reference to within the parent bson object. If that
     * object is out of scope, this pointer will no longer be valid. Call getOwned() on the
     * returned BSONObj if you need your own copy.
     * throws AssertionException if the element is not of type object.
     ','line_number':174,'multiline':True]
['text':'*
     * populate v with the value of the element.  If type does not match, throw exception.
     * useful in templates -- see also BSONObj::Vals().
     ','line_number':183,'multiline':True]
['text':'*
     * Use ok() to check if a value is assigned:
     * if( myObj["foo"].ok() ) ...
     ','line_number':213,'multiline':True]
['text':'*
     * True if this element has a value (ie not EOO).
     *
     * Makes it easier to check for a field's existence and use it:
     * if (auto elem = myObj["foo"]) {
     *     // Use elem
     * }
     * else {
     *     // default behavior
     * }
     ','line_number':221,'multiline':True]
['text':'*
     * Returns the type of the element
     ','line_number':280,'multiline':True]
['text':'*
     * retrieve a field within this element
     * throws exception if *this is not an embedded object
     ','line_number':288,'multiline':True]
['text':'*
     * See canonicalizeBSONType in bsontypes.h
     ','line_number':294,'multiline':True]
['text':'*
     * Indicates if it is the end-of-object element, which is present at the end of
     * every BSON object.
     ','line_number':301,'multiline':True]
['text':'*
     * Size of the element.
     ','line_number':309,'multiline':True]
['text':'*
     * Wrap this element up as a singleton object.
     ','line_number':316,'multiline':True]
['text':'*
     * Wrap this element up as a singleton object with a new name.
     ','line_number':321,'multiline':True]
['text':'*
     * field name of the element.  e.g., for
     * name : "Joe"
     * "name" is the fieldname
     ','line_number':326,'multiline':True]
['text':' no fieldname for it.','line_number':333,'multiline':False]
['text':'*
     * NOTE: size includes the NULL terminator.
     ','line_number':337,'multiline':True]
['text':'*
     * raw data of the element's value (so be careful).
     ','line_number':348,'multiline':True]
['text':'*
     * size in bytes of the element's value (when applicable).
     ','line_number':354,'multiline':True]
['text':'*
     * @return value of a boolean element.
     * You must assure element is a boolean before
     * calling.
     ','line_number':365,'multiline':True]
['text':'*
     * Retrieve a java style date value from the element.
     * Ensure element is of type Date before calling.
     * @see Bool(), trueValue()
     ','line_number':378,'multiline':True]
['text':'*
     * Convert the value to boolean, regardless of its type, in a javascript-like fashion
     * (i.e., treats zero and null and eoo as false).
     ','line_number':387,'multiline':True]
['text':'*
     * True if element is of a numeric type.
     ','line_number':393,'multiline':True]
['text':'*
     * True if element is a NaN double or decimal.
     ','line_number':398,'multiline':True]
['text':'*
     * Return double value for this field. MUST be NumberDouble type.
     ','line_number':403,'multiline':True]
['text':'*
     * Return int value for this field. MUST be NumberInt type.
     ','line_number':410,'multiline':True]
['text':'*
     * Return decimal128 value for this field. MUST be NumberDecimal type.
     ','line_number':417,'multiline':True]
['text':'*
     * Return long long value for this field. MUST be NumberLong type.
     ','line_number':426,'multiline':True]
['text':'*
     * Retrieves the value of this element as a 32 bit integer. If the BSON type is non-numeric,
     * returns zero. If the element holds a double, truncates the fractional part.
     *
     * Results in undefined behavior if called on a double that is NaN, +/-infinity, or too
     * large/small to be represented as an int.  Use 'safeNumberLong()' to safely convert an
     * arbitrary BSON element to an integer without risk of UB.
     ','line_number':433,'multiline':True]
['text':'*
     * Like numberInt() but with well-defined behavior for doubles that
     * are NaNs, or too large/small to be represented as int.
     * NaNs -> 0
     * very large doubles -> INT_MAX
     * very small doubles -> INT_MIN
     ','line_number':443,'multiline':True]
['text':'*
     * Retrieves the value of this element as a 64 bit integer. If the BSON type is non-numeric,
     * returns zero. If the element holds a double, truncates the fractional part.
     *
     * Results in undefined behavior if called on a double that is NaN, +/-infinity, or too
     * large/small to be repsented as a long. Use 'safeNumberLong()' to safely convert an arbitrary
     * BSON element to an integer without risk of UB.
     ','line_number':452,'multiline':True]
['text':'*
     * Like numberLong() but with well-defined behavior for doubles that
     * are NaNs, or too large/small to be represented as long longs.
     * NaNs -> 0
     * very large doubles -> LLONG_MAX
     * very small doubles -> LLONG_MIN
     ','line_number':462,'multiline':True]
['text':'*
     * This safeNumberLongForHash() function does the same thing as safeNumberLong, but it
     * preserves edge-case behavior from older versions.
     ','line_number':471,'multiline':True]
['text':'*
     * Convert a numeric field to long long, and uassert the conversion is exact.
     ','line_number':477,'multiline':True]
['text':'*
     * Parses a BSONElement of any numeric type into a non-negative long long, failing if the value
     * is any of the following:
     *
     * - NaN.
     * - Negative.
     * - A floating point number which is not integral.
     * - Too large to fit within a 64-bit signed integer.
     ','line_number':482,'multiline':True]
['text':'*
     * Parses a BSONElement of any numeric type into a long long, failing if the value
     * is any of the following:
     *
     * - NaN.
     * - A floating point number which is not integral.
     * - Too large in the positive or negative direction to fit within a 64-bit signed integer.
     ','line_number':493,'multiline':True]
['text':'*
     * Parses a BSONElement of any numeric type into a non-negative int, failing if the value
     * is any of the following:
     *
     * - NaN
     * - Negative
     * - a non-integral number
     * - too large in the positive or negative direction to fit in an int
     ','line_number':503,'multiline':True]
['text':'*
     * Parses a BSONElement of any numeric type into an integer, failing if the value is:
     *
     * - NaN
     * - a non-integral number
     * - too large in the positive or negative direction to fit in an int
     ','line_number':514,'multiline':True]
['text':'*
     * Retrieve decimal value for the element safely.
     ','line_number':523,'multiline':True]
['text':'*
     * Retrieve the numeric value of the element.  If not of a numeric type, returns 0.
     * Note: casts to double, data loss may occur with large (>52 bit) NumberLong values.
     ','line_number':528,'multiline':True]
['text':'*
     * Retrieve the numeric value of the element.  If not of a numeric type, returns 0.
     * Note: casts to double, data loss may occur with large (>52 bit) NumberLong values.
     ','line_number':533,'multiline':True]
['text':'*
     * Like numberDouble() but with well-defined behavior for doubles that
     * are NaNs, or too large/small to be represented as doubles.
     * NaNs -> 0
     * very large decimals -> DOUBLE_MAX
     * very small decimals -> DOUBLE_MIN
     ','line_number':541,'multiline':True]
['text':'*
     * Retrieve the object ID stored in the object.
     * You must ensure the element is of type jstOID first.
     ','line_number':550,'multiline':True]
['text':'*
     * True if element is null.
     ','line_number':558,'multiline':True]
['text':'*
     * Size of a BSON String element.
     * Requires that type() == mongo::String.
     * @return String size including its null-termination.
     ','line_number':565,'multiline':True]
['text':'*
     * for objects the size *includes* the size of the size field
     ','line_number':574,'multiline':True]
['text':'*
     * Get a string's value. Returns a valid empty string if
     * `type() != mongo::String`.
     ','line_number':581,'multiline':True]
['text':'*
     * Like valueStringDataSafe, but returns std::string.
     ','line_number':589,'multiline':True]
['text':'*
     * Returns a StringData pointing into this element's data.  Does not validate that the
     * element is actually of type String.
     ','line_number':596,'multiline':True]
['text':'*
     * Get javascript code of a CodeWScope data element.
     ','line_number':604,'multiline':True]
['text':' two ints precede code (see BSON spec)','line_number':609,'multiline':False]
['text':'*
     * Get length of the code part of the CodeWScope object
     * This INCLUDES the null char at the end
     ','line_number':612,'multiline':True]
['text':'*
     * Get the scope SavedContext of a CodeWScope data element.
     ','line_number':621,'multiline':True]
['text':'*
     * Get the embedded object this element holds.
     ','line_number':628,'multiline':True]
['text':'*
     * uasserts if not an object
     ','line_number':633,'multiline':True]
['text':'*
     * Get raw binary data.  Element must be of type BinData. Doesn't handle type 2 specially
     ','line_number':640,'multiline':True]
['text':' BinData: <int len> <byte subtype> <byte[len] data>','line_number':644,'multiline':False]
['text':'*
     * Get binary data.  Element must be of type BinData. Handles type 2
     ','line_number':649,'multiline':True]
['text':' BinData: <int len> <byte subtype> <byte[len] data>','line_number':653,'multiline':False]
['text':' Skip extra size','line_number':657,'multiline':False]
['text':' BinData: <int len> <byte subtype> <byte[len] data>','line_number':664,'multiline':False]
['text':' BinData: <int len> <byte subtype> <byte[len] data>','line_number':671,'multiline':False]
['text':' skip extra int32 size.','line_number':681,'multiline':False]
['text':'*
     * Retrieve the regex std::string for a Regex element
     ','line_number':685,'multiline':True]
['text':'*
     * Retrieve the regex flags (options) for a Regex element
     ','line_number':693,'multiline':True]
['text':'','line_number':701,'multiline':False]
['text':' Comparison API.','line_number':702,'multiline':False]
['text':'','line_number':703,'multiline':False]
['text':' BSONElement instances can be compared via a raw bytewise comparison or a logical comparison.','line_number':704,'multiline':False]
['text':'','line_number':705,'multiline':False]
['text':' Logical comparison can be done either using woCompare() or with operator overloads. Most','line_number':706,'multiline':False]
['text':' callers should prefer operator overloads. Note that the operator overloads return a','line_number':707,'multiline':False]
['text':' DeferredComparison, which must subsequently be evaluated by a','line_number':708,'multiline':False]
['text':' BSONElement::ComparatorInterface. See bsonelement_comparator_interface.h for details.','line_number':709,'multiline':False]
['text':'','line_number':710,'multiline':False]
['text':'*
     * Compares the raw bytes of the two BSONElements, including the field names. This will treat
     * different types (e.g. integers and doubles) as distinct values, even if they have the same
     * field name and bit pattern in the value portion of the BSON element.
     ','line_number':712,'multiline':True]
['text':'*
     * Compares the raw bytes of the two BSONElements, excluding the field names. This will treat
     * different types (e.g integers and doubles) as distinct values, even if they have the same bit
     * pattern in the value portion of the BSON element.
     ','line_number':719,'multiline':True]
['text':'*
     * Compares two BSON Elements using the rules specified by 'rules' and the 'comparator' for
     * string comparisons.
     *
     * Returns <0 if 'this' is less than 'elem'.
     *         >0 if 'this' is greater than 'elem'.
     *          0 if 'this' is equal to 'elem'.
     ','line_number':726,'multiline':True]
['text':'*
     * Constructs an empty element
     ','line_number':766,'multiline':True]
['text':'*
     * True if this element may contain subobjects.
     ','line_number':771,'multiline':True]
['text':'*
     * True if this element can be a BSONObj
     ','line_number':785,'multiline':True]
['text':' While we should skip the type, and add 1 for the terminating null byte, just include','line_number':861,'multiline':False]
['text':' the type byte in the strlen call: the extra byte cancels out. As an extra bonus, this','line_number':862,'multiline':False]
['text':' also handles the EOO case, where the type byte is 0.','line_number':863,'multiline':False]
['text':'*
     * Construct a BSONElement where you already know the length of the name and/or the total size
     * of the element. fieldNameSize includes the null terminator. You may pass -1 for either or
     * both sizes to indicate that they are unknown and should be computed.
     ','line_number':869,'multiline':True]
['text':'skip type','line_number':880,'multiline':True]
['text':'include NUL byte','line_number':880,'multiline':True]
['text':'*
     * Construct a BSONElement where you already know the length of the name and the total size
     * of the element. fieldNameSize includes the null terminator.
     ','line_number':892,'multiline':True]
['text':'*
     * Coerces the value to an int. If the value type is NumberDouble, the value is rounded to
     * a closest integer towards zero. If the value type is NumberDecimal, the value is rounded to a
     * closest integer, but ties are rounded to an even integer. Returns false, if the value cannot
     * be coerced.
     ','line_number':904,'multiline':True]
['text':'*
     * Coerces the value to a long long. If the value type is NumberDouble, the value is rounded to
     * a closest integer towards zero. If the value type is NumberDecimal, the value is rounded to a
     * closest integer, but ties are rounded to an even integer. Returns false, if the value cannot
     * be coerced.
     ','line_number':912,'multiline':True]
['text':'*
     * Constant double representation of 2^63, the smallest value that will overflow a long long.
     *
     * It is not safe to obtain this value by casting std::numeric_limits<long long>::max() to
     * double, because the conversion loses precision, and the C++ standard leaves it up to the
     * implementation to decide whether to round up to 2^63 or round down to the next representable
     * value (2^63 - 2^10).
     ','line_number':927,'multiline':True]
['text':'*
     * Constant 'long long' representation of 2^53 (and -2^53). This is the largest (and smallest)
     * 'long long' such that all 'long long's between the two can be safely represented as a double
     * without losing precision.
     ','line_number':937,'multiline':True]
['text':'*
     * Compute the size of the encoding of the BSON object.  If bufSize is provided, it will do
     * so in an overflow-safe manner.
     ','line_number':945,'multiline':True]
['text':'*
     * This is to enable structured bindings for BSONElement, it should not be used explicitly.
     * When used in a structed binding, BSONElement behaves as-if it is a
     * std::pair<StringData, BSONElement>.
     *
     * Example:
     *   for (auto [name, elem] : someBsonObj) {...}
     ','line_number':952,'multiline':True]
['text':'*
     * Get a string's value. Also gives you start of the real data for an embedded object.
     * You must assure data is of an appropriate type first, like the type check in
     * valueStringDataSafe(). You should use the string's size when performing any operations
     * on the data to disambiguate between potential embedded null's and the terminating null.
     * This function is only used in limited forms internally. Not to be exposed publicly.
     * If a char* is desired use valueStringDataSafe().rawData().
     ','line_number':970,'multiline':True]
['text':' internal size includes null terminator','line_number':991,'multiline':False]
['text':' NOTE Behavior changes must be replicated in Value::coerceToBool().','line_number':1011,'multiline':False]
['text':'*
 * @return true if element is of a numeric type.
 ','line_number':1032,'multiline':True]
['text':'*
 * Like numberLong() but with well-defined behavior for doubles and decimals that
 * are NaNs, or too large/small to be represented as long longs.
 * NaNs -> 0
 * very large values -> LLONG_MAX
 * very small values -> LLONG_MIN
 ','line_number':1167,'multiline':True]
['text':'*
 * Attempt to coerce the BSONElement to a primitive type. For integral targets, we do additional
 * checking that the source number is a finite real number and fits within the target type after
 * rounding to the closest integer towards zero. Note that for NumberDecimal types the real number
 * rounding behavior of this method is different from one employed by 'coerce'.
 ','line_number':1207,'multiline':True]
['text':'*
 * This safeNumberLongForHash() function does the same thing as safeNumberLong, but it preserves
 * edge-case behavior from older versions. It's provided for use by hash functions that need to
 * maintain compatibility with older versions. Don't make any changes to safeNumberLong() without
 * ensuring that this function (which is implemented in terms of safeNumberLong()) has exactly the
 * same behavior.
 *
 * Historically, safeNumberLong() used a check that would consider 2^63 to be safe to cast to
 * int64_t, but that cast actually overflows. On most platforms, the undefined cast of 2^63 to
 * int64_t would roll over to -2^63, and that's the behavior we preserve here explicitly.
 *
 * The new safeNumberLong() function uses a tight bound, allowing it to correctly clamp double 2^63
 * to the max 64-bit int (2^63 - 1).
 ','line_number':1271,'multiline':True]
['text':' Rather than relying on the undefined overflow conversion, we maintain compatibility by','line_number':1286,'multiline':False]
['text':' explicitly checking for a 2^63 double value and returning -2^63.','line_number':1287,'multiline':False]
['text':' This needs to be 2 elements because we check the strlen of data + 1 and GCC sees that as','line_number':1300,'multiline':False]
['text':' accessing beyond the end of a constant string, even though we always check whether the','line_number':1301,'multiline':False]
['text':' element is an eoo.','line_number':1302,'multiline':False]
['text':' namespace mongo','line_number':1308,'multiline':False]
['text':' These template specializations in namespace std are required in order to support structured','line_number':1310,'multiline':False]
['text':' bindings using the "tuple protocol".','line_number':1311,'multiline':False]
['text':' namespace std','line_number':1318,'multiline':False]
