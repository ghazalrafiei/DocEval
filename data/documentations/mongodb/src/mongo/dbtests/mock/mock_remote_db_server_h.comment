['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' namespace projection_executor','line_number':56,'multiline':False]
['text':'*
 * A very simple mock that acts like a database server. Every object keeps track of its own
 * InstanceID, which initially starts at zero and increments every time it is restarted.
 * This is primarily used for simulating the state of which old connections won't be able
 * to talk to the sockets that has already been closed on this server.
 *
 * Note: All operations on this server are protected by a lock.
 ','line_number':61,'multiline':True]
['text':'*
     * Creates a new mock server. This can also be setup to work with the
     * ConnectionString class by using mongo::MockConnRegistry as follows:
     *
     * ConnectionString::setConnectionHook(MockConnRegistry::get()->getConnStrHook());
     * MockRemoteDBServer server("$a:27017");
     * MockConnRegistry::get()->addServer(&server);
     *
     * This allows clients using the ConnectionString::connect interface to create
     * connections to this server. The requirements to make this hook fully functional are:
     *
     * 1. hostAndPort of this server should start with $.
     * 2. No other instance has the same hostAndPort as this.
     *
     * This server will also contain the hostAndPort inside the IdentityNS
     * collection. This is convenient for testing query routing.
     *
     * @param hostAndPort the host name with port for this server.
     *
     * @see MockConnRegistry
     ','line_number':73,'multiline':True]
['text':'','line_number':97,'multiline':False]
['text':' Connectivity methods','line_number':98,'multiline':False]
['text':'','line_number':99,'multiline':False]
['text':'*
     * Set a delay for calls to query and runCommand
     ','line_number':101,'multiline':True]
['text':'*
     * Shuts down this server. Any operations on this server with an InstanceID
     * less than or equal to the current one will throw a mongo::SocketException.
     * To bring the server up again, use the reboot method.
     ','line_number':106,'multiline':True]
['text':'*
     * Increments the instanceID of this server.
     ','line_number':113,'multiline':True]
['text':'*
     * @return true if this server is running
     ','line_number':118,'multiline':True]
['text':'','line_number':123,'multiline':False]
['text':' Mocking methods','line_number':124,'multiline':False]
['text':'','line_number':125,'multiline':False]
['text':'*
     * Sets the reply for a command.
     *
     * @param cmdName the name of the command
     * @param replyObj the exact reply for the command
     ','line_number':127,'multiline':True]
['text':'*
     * Sets the reply for a command.
     *
     * @param cmdName the name of the command.
     * @param replySequence the sequence of replies to cycle through every time
     *     the given command is requested. This is useful for setting up a
     *     sequence of response when the command can be called more than once
     *     that requires different results when calling a method.
     ','line_number':135,'multiline':True]
['text':'*
     * Inserts a single document to this server.
     *
     * @param nss the namespace to insert the document to.
     * @param obj the document to insert.
     ','line_number':147,'multiline':True]
['text':'*
     * Removes documents from this server.
     *
     * @param nss the namespace to remove documents from.
     * @param filter ignored.
     ','line_number':155,'multiline':True]
['text':'*
     * Assign a UUID to a collection
     *
     * @param ns the namespace to be associated with the uuid.
     * @param uuid the uuid to associate with the namespace.
     ','line_number':163,'multiline':True]
['text':'','line_number':171,'multiline':False]
['text':' DBClientBase methods','line_number':172,'multiline':False]
['text':'','line_number':173,'multiline':False]
['text':'*
     * Finds documents from this mock server according to 'findRequest'.
     ','line_number':176,'multiline':True]
['text':'','line_number':181,'multiline':False]
['text':' Getters','line_number':182,'multiline':False]
['text':'','line_number':183,'multiline':False]
['text':'*
     * @returns the value passed to hostAndPort parameter of the
     *     constructor. In other words, doesn't automatically append a
     *     'default' port if none is specified.
     ','line_number':189,'multiline':True]
['text':'','line_number':198,'multiline':False]
['text':' Call counters','line_number':199,'multiline':False]
['text':'','line_number':200,'multiline':False]
['text':'*
     * A very simple class for cycling through a set of BSONObj
     ','line_number':207,'multiline':True]
['text':'*
         * Creates a new iterator with a deep copy of the vector.
         ','line_number':212,'multiline':True]
['text':'*
     * Checks whether the instance of the server is still up.
     *
     * @throws mongo::SocketException if this server is down
     ','line_number':223,'multiline':True]
['text':'*
     * Creates a ProjectionExecutor to handle fieldsToReturn.
     ','line_number':230,'multiline':True]
['text':'*
     * Projects the object, unless the projectionExecutor is null, in which case returns a
     * copy of the object.
     ','line_number':236,'multiline':True]
['text':'*
     * Logic shared between 'find()' and 'query()'. This can go away when the legacy 'query()' API
     * is removed.
     ','line_number':242,'multiline':True]
['text':'','line_number':259,'multiline':False]
['text':' Mock replies','line_number':260,'multiline':False]
['text':'','line_number':261,'multiline':False]
['text':'','line_number':266,'multiline':False]
['text':' Op Counters','line_number':267,'multiline':False]
['text':'','line_number':268,'multiline':False]
['text':' Unique id for every restart of this server used for rejecting requests from','line_number':272,'multiline':False]
['text':' connections that are still "connected" to the old instance','line_number':273,'multiline':False]
['text':' protects this entire instance','line_number':276,'multiline':False]
['text':' namespace mongo','line_number':280,'multiline':False]
