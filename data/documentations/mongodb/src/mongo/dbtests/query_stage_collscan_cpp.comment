['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 * This file tests db/exec/collection_scan.cpp.
 ','line_number':30,'multiline':True]
['text':' IWYU pragma: keep','line_number':40,'multiline':False]
['text':' IWYU pragma: keep','line_number':93,'multiline':False]
['text':'','line_number':112,'multiline':False]
['text':' Stage-specific tests.','line_number':113,'multiline':False]
['text':'','line_number':114,'multiline':False]
['text':' Configure the scan.','line_number':140,'multiline':False]
['text':' Make the filter.','line_number':145,'multiline':False]
['text':' Make a scan and have the runner own it.','line_number':151,'multiline':False]
['text':' Use the runner to count the number of objects scanned.','line_number':166,'multiline':False]
['text':' Returns the recordId generated by doc, assuming doc takes the shape of {<cluster key> :','line_number':256,'multiline':False]
['text':' <value>};','line_number':257,'multiline':False]
['text':' Performs a bounded collection scan from 'minRecord' to 'maxRecord' in the specified','line_number':262,'multiline':False]
['text':' 'direction'. Asserts that the collection scan retrieves 'expectedNumMatches' documents.','line_number':263,'multiline':False]
['text':' Configure the scan.','line_number':274,'multiline':False]
['text':' Like runClusteredCollScan, but takes a CollectionScanParams:ScanBoundInclusion and','line_number':303,'multiline':False]
['text':' a vector with the expectedResults in order.','line_number':304,'multiline':False]
['text':' When the scan is EOF, we expect the index to move past the last element of the','line_number':343,'multiline':False]
['text':' expectedResults.','line_number':344,'multiline':False]
['text':' Go forwards, get everything.','line_number':364,'multiline':False]
['text':' Go backwards, get everything.','line_number':369,'multiline':False]
['text':' Go forwards and match half the docs.','line_number':374,'multiline':False]
['text':' Go backwards and match half the docs.','line_number':380,'multiline':False]
['text':' prePopulate ','line_number':389,'multiline':True]
['text':' Configure the threshold and the expected number of scanned documents.','line_number':398,'multiline':False]
['text':' Configure the scan.','line_number':402,'multiline':False]
['text':' Scan all matching documents.','line_number':409,'multiline':False]
['text':' Get objects in the order we inserted them.','line_number':418,'multiline':False]
['text':' Configure the scan.','line_number':422,'multiline':False]
['text':' Make a scan and have the runner own it.','line_number':427,'multiline':False]
['text':' Make sure we get the objects in the order we want','line_number':445,'multiline':False]
['text':' Get objects in the reverse order we inserted them when we go backwards.','line_number':453,'multiline':False]
['text':' Scan through half the objects, delete the one we're about to fetch, then expect to get the "next"','line_number':485,'multiline':False]
['text':' object we would have gotten after that.','line_number':486,'multiline':False]
['text':' Get the RecordIds that would be returned by an in-order scan.','line_number':492,'multiline':False]
['text':' Configure the scan.','line_number':496,'multiline':False]
['text':' Remove recordIds[count].','line_number':516,'multiline':False]
['text':' Skip over recordIds[count].','line_number':521,'multiline':False]
['text':' Expect the rest.','line_number':524,'multiline':False]
['text':' Scan through half the objects, delete the one we're about to fetch, then expect to get the "next"','line_number':539,'multiline':False]
['text':' object we would have gotten after that.  But, do it in reverse!','line_number':540,'multiline':False]
['text':' Get the RecordIds that would be returned by an in-order scan.','line_number':545,'multiline':False]
['text':' Configure the scan.','line_number':549,'multiline':False]
['text':' Remove recordIds[count].','line_number':569,'multiline':False]
['text':' Skip over recordIds[count].','line_number':574,'multiline':False]
['text':' Expect the rest.','line_number':577,'multiline':False]
['text':' Verify that successfully seeking to the resumeAfterRecordId returns PlanStage::NEED_TIME and','line_number':592,'multiline':False]
['text':' that we can complete the collection scan afterwards.','line_number':593,'multiline':False]
['text':' Get the RecordIds that would be returned by an in-order scan.','line_number':597,'multiline':False]
['text':' We will resume the collection scan this many results in.','line_number':601,'multiline':False]
['text':' Configure the scan.','line_number':604,'multiline':False]
['text':' Pick a recordId that is known to be in the collection.','line_number':608,'multiline':False]
['text':' Create plan stage.','line_number':611,'multiline':False]
['text':' Run the rest of the scan and verify the results.','line_number':616,'multiline':False]
['text':' Make sure we get the objects in the order we want.','line_number':630,'multiline':False]
['text':' Verify that if we fail to seek to the resumeAfterRecordId, the plan stage fails.','line_number':638,'multiline':False]
['text':' Get the RecordIds that would be returned by an in-order scan.','line_number':643,'multiline':False]
['text':' We will resume the collection scan this many results in.','line_number':647,'multiline':False]
['text':' Configure the scan.','line_number':650,'multiline':False]
['text':' Pick a recordId that is known to be in the collection and then delete it, so that we can','line_number':654,'multiline':False]
['text':' guarantee it does not exist.','line_number':655,'multiline':False]
['text':' Create plan stage.','line_number':660,'multiline':False]
['text':' Check that failed seek causes the entire resume to fail.','line_number':667,'multiline':False]
['text':' Get the RecordIds that would be returned by an in-order scan.','line_number':679,'multiline':False]
['text':' Configure the scan.','line_number':684,'multiline':False]
['text':' Expect to see all RecordIds.','line_number':694,'multiline':False]
['text':' Tests a collection scan with bounds generated from type 'date', on a collection with all entries','line_number':713,'multiline':False]
['text':' generated from type 'objectId', exludes all entries.','line_number':714,'multiline':False]
['text':' Create a clustered collection pre-populated with RecordIds generated from type','line_number':727,'multiline':False]
['text':' 'objectId'.','line_number':728,'multiline':False]
['text':' Use bounds that restrict the scan to RecordIds generated from type 'date'.','line_number':731,'multiline':False]
['text':' The collection has no records generated with type 'date'. There should be 0 matches.','line_number':735,'multiline':False]
['text':' Tests that if the bounds are generated from type 'date', only RecordIds generated with type','line_number':740,'multiline':False]
['text':' 'date' are included in the results.','line_number':741,'multiline':False]
['text':' Create a clustered collection pre-populated with RecordIds generated from type','line_number':754,'multiline':False]
['text':' 'objectId'.','line_number':755,'multiline':False]
['text':' Insert documents that generate a RecordId with type 'date'.','line_number':760,'multiline':False]
['text':' Generate bounds from type 'date'.','line_number':766,'multiline':False]
['text':' The collection contains RecordIds generated from both type 'objectId' and 'date'. Only','line_number':770,'multiline':False]
['text':' RecordIds that match the bound type should be included in the scan.','line_number':771,'multiline':False]
['text':' prePopulate ','line_number':786,'multiline':True]
['text':' Insert documents with default '_id' values of type 'objectId' used to generate their','line_number':789,'multiline':False]
['text':' RecordIds.','line_number':790,'multiline':False]
['text':' Insert documents that generate 'numeric' typed RecordIds.','line_number':795,'multiline':False]
['text':' Use bounds that will include every 'objectId' typed record.','line_number':801,'multiline':False]
['text':' Only records generated from type 'objectId' should result from the scan.','line_number':805,'multiline':False]
['text':' Test exclusive filters work for date typed collection scan bounds.','line_number':810,'multiline':False]
['text':' prePopulate ','line_number':823,'multiline':True]
['text':' Exclude all but the record with _id 'middleDate' from the scan.','line_number':844,'multiline':False]
['text':' Verify the min and max bounds are excluded.','line_number':870,'multiline':False]
['text':' Get the RecordIds that would be returned by a backwards scan.','line_number':883,'multiline':False]
['text':' Configure the scan.','line_number':888,'multiline':False]
['text':' The last entry in recordIds is the lowest record in the collection and the first entry is the','line_number':892,'multiline':False]
['text':' highest.','line_number':893,'multiline':False]
['text':' Expect to see all RecordIds.','line_number':900,'multiline':False]
['text':' Get the RecordIds that would be returned by an in-order scan.','line_number':927,'multiline':False]
['text':' Configure the scan.','line_number':932,'multiline':False]
['text':' Expect to see all records.','line_number':937,'multiline':False]
['text':' Expect to see all RecordIds.','line_number':944,'multiline':False]
['text':' Get the RecordIds that would be returned by an in-order scan.','line_number':971,'multiline':False]
['text':' Configure the scan.','line_number':976,'multiline':False]
['text':' There are 11 records between 10 and 20 inclusive','line_number':1008,'multiline':False]
['text':' Get the RecordIds that would be returned by an in-order scan.','line_number':1020,'multiline':False]
['text':' Configure the scan.','line_number':1025,'multiline':False]
['text':' Provide RecordId bounds with exclusive filters.','line_number':1038,'multiline':False]
['text':' The expected range should not include the first or last records.','line_number':1056,'multiline':False]
['text':' Get the RecordIds that would be returned by a reverse scan.','line_number':1085,'multiline':False]
['text':' Configure the scan.','line_number':1090,'multiline':False]
['text':' The last entry in recordIds is the lowest record in the collection and the first entry is the','line_number':1100,'multiline':False]
['text':' highest.','line_number':1101,'multiline':False]
['text':' Provide RecordId bounds with exclusive filters.','line_number':1105,'multiline':False]
['text':' The expected range should not include the first or last records.','line_number':1123,'multiline':False]
['text':' Test clustered collection scan with','line_number':1144,'multiline':False]
['text':' CollectionScanParams::ScanBoundInclusion::kIncludeStartRecordOnly.','line_number':1145,'multiline':False]
['text':' prePopulate ','line_number':1157,'multiline':True]
['text':'* ordered *','line_number':1164,'multiline':True]
['text':' Recall kIncludeStartRecordOnly means the last document in the scan range should be','line_number':1174,'multiline':False]
['text':' excluded from the results.','line_number':1175,'multiline':False]
['text':' Test clustered collection scan with','line_number':1188,'multiline':False]
['text':' CollectionScanParams::ScanBoundInclusion::kIncludeEndRecordOnly.','line_number':1189,'multiline':False]
['text':' prePopulate ','line_number':1200,'multiline':True]
['text':'* ordered *','line_number':1207,'multiline':True]
['text':' Recall kIncludeEndRecordOnly means the start document in the scan range should be','line_number':1217,'multiline':False]
['text':' excluded from the results.','line_number':1218,'multiline':False]
['text':' Test clustered collection scan with','line_number':1231,'multiline':False]
['text':' CollectionScanParams::ScanBoundInclusion::kExcludeBothStartAndEndRecords.','line_number':1232,'multiline':False]
['text':' prePopulate ','line_number':1244,'multiline':True]
['text':'* ordered *','line_number':1251,'multiline':True]
['text':' Exclude the records at both ends of the collection scan range.','line_number':1261,'multiline':False]
['text':' Test clustered collection scan with CollectionScanParams::ScanInclusionBound such that no results','line_number':1275,'multiline':False]
['text':' match.','line_number':1276,'multiline':False]
['text':' prePopulate ','line_number':1287,'multiline':True]
['text':'* ordered *','line_number':1294,'multiline':True]
['text':'* expected results *','line_number':1305,'multiline':True]
['text':' CollectionScanParams::ScanInclusionBound exclusions should take precedence over inclusive','line_number':1309,'multiline':False]
['text':' filtering.','line_number':1310,'multiline':False]
['text':' prePopulate ','line_number':1323,'multiline':True]
['text':'* ordered *','line_number':1329,'multiline':True]
['text':' Exclude the records at both ends of the collection scan range.','line_number':1339,'multiline':False]
['text':' Filtering includes the min and max records. However the ScanBoundInclusion should enforce','line_number':1344,'multiline':False]
['text':' the bounds are not included in the results.','line_number':1345,'multiline':False]
['text':' Since the minRecord and maxRecord of a bounded collection scan are optional, a ScanBoundInclusion','line_number':1363,'multiline':False]
['text':' excluding a bound not defined should result in regular, inclusive behavior by default.','line_number':1364,'multiline':False]
['text':' prePopulate ','line_number':1377,'multiline':True]
['text':'* ordered *','line_number':1383,'multiline':True]
['text':' Tests behavior of getLatestOplogTimestamp() method when the scanned collection is the change','line_number':1403,'multiline':False]
['text':' collection.','line_number':1404,'multiline':False]
['text':' This test is disabled for the reasons outlined in SERVER-76288.','line_number':1406,'multiline':False]
['text':' TODO SERVER-76309 reenable this test.','line_number':1407,'multiline':False]
['text':' Setup the change collection.','line_number':1409,'multiline':False]
['text':' prePopulate ','line_number':1412,'multiline':True]
['text':' Set the read timestamp.','line_number':1415,'multiline':False]
['text':' Build the collection scan stage.','line_number':1419,'multiline':False]
['text':' Verify that the latest oplog timestamp is equal to the 'ts' field of the retrieved document.','line_number':1436,'multiline':False]
['text':' Verify that the latest oplog timestamp is equal to the read timestamp on EOF.','line_number':1441,'multiline':False]
['text':' Tests behavior of getLatestOplogTimestamp() method when the scanned collection is the change','line_number':1447,'multiline':False]
['text':' collection.','line_number':1448,'multiline':False]
['text':' This test exercises the temporary behaviour introduced in SERVER-76288.','line_number':1450,'multiline':False]
['text':' TODO SERVER-76309 remove this test.','line_number':1451,'multiline':False]
['text':' Setup the change collection.','line_number':1452,'multiline':False]
['text':' prePopulate ','line_number':1455,'multiline':True]
['text':' Set the read timestamp.','line_number':1458,'multiline':False]
['text':' Build the collection scan stage.','line_number':1462,'multiline':False]
['text':' Verify that the latest oplog timestamp is equal to the 'ts' field of the retrieved document.','line_number':1479,'multiline':False]
['text':' Verify that on EOF, the latest oplog timestamp is still equal to the ts of the last document','line_number':1484,'multiline':False]
['text':' retrieved, and has NOT advanced to the read timestamp.','line_number':1485,'multiline':False]
['text':' namespace query_stage_collection_scan','line_number':1490,'multiline':False]
['text':' namespace mongo','line_number':1491,'multiline':False]
