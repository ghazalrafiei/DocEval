['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' IWYU pragma: keep','line_number':83,'multiline':False]
['text':'*
 * This file tests db/exec/sort.cpp
 ','line_number':90,'multiline':True]
['text':'*
     * We feed a mix of (key, unowned, owned) data to the sort stage.
     ','line_number':126,'multiline':True]
['text':' Insert some owned obj data.','line_number':138,'multiline':False]
['text':'
     * Wraps a sort stage with a QueuedDataStage in a plan executor. Returns the plan executor,
     * which is owned by the caller.
     ','line_number':149,'multiline':True]
['text':' Build the mock scan stage which feeds the data.','line_number':155,'multiline':False]
['text':' addSortKeyMetadata','line_number':170,'multiline':False]
['text':' The PlanExecutor will be automatically registered on construction due to the auto','line_number':173,'multiline':False]
['text':' yield policy, so it can receive invalidations when we remove documents later.','line_number':174,'multiline':False]
['text':' Return a value in the set {-1, 0, 1} to represent the sign of parameter i.  Used to','line_number':186,'multiline':False]
['text':' normalize woCompare calls.','line_number':187,'multiline':False]
['text':'*
     * A template used by many tests below.
     * Fill out numObj objects, sort them in the order provided by 'direction'.
     * If extAllowed is true, sorting will use use external sorting if available.
     * If limit is not zero, we limit the output of the sort stage to 'limit' results.
     ','line_number':194,'multiline':True]
['text':' Insert a mix of the various types of data.','line_number':204,'multiline':False]
['text':' addSortKeyMetadata','line_number':216,'multiline':False]
['text':' Must fetch so we can look at the doc as a BSONObj.','line_number':222,'multiline':False]
['text':' Look at pairs of objects to make sure that the sort order is pairwise (and therefore','line_number':233,'multiline':False]
['text':' totally) correct.','line_number':234,'multiline':False]
['text':' Count 'last'.','line_number':239,'multiline':False]
['text':' The next object should be equal to the previous or oriented according to the sort','line_number':246,'multiline':False]
['text':' pattern.','line_number':247,'multiline':False]
['text':'*
     * Check number of results returned from sort.
     ','line_number':256,'multiline':True]
['text':' No limit, should get all objects back.','line_number':260,'multiline':False]
['text':' Otherwise, result set should be smaller of limit and input data size.','line_number':261,'multiline':False]
['text':' Returns sort limit','line_number':271,'multiline':False]
['text':' Leave as 0 to disable limit.','line_number':272,'multiline':False]
['text':' Sort some small # of results in increasing order.','line_number':298,'multiline':False]
['text':' Sort some small # of results in decreasing order.','line_number':321,'multiline':False]
['text':' Sort in descreasing order with limit applied','line_number':344,'multiline':False]
['text':' Sort a big bunch of objects.','line_number':353,'multiline':False]
['text':' Mutation invalidation of docs fed to sort.','line_number':376,'multiline':False]
['text':' The data we're going to later invalidate.','line_number':400,'multiline':False]
['text':' This test is specifically for the classic PlanStage execution engine, so assert that we','line_number':406,'multiline':False]
['text':' have the right kind of PlanExecutor.','line_number':407,'multiline':False]
['text':' Have sort read in data from the queued data stage.','line_number':417,'multiline':False]
['text':' We should have read in the first 'firstRead' recordIds.  Invalidate the first one.','line_number':425,'multiline':False]
['text':' Since it's in the WorkingSet, the updates should not be reflected in the output.','line_number':426,'multiline':False]
['text':' We purposefully update the document to have a 'foo' value greater than limit().','line_number':433,'multiline':False]
['text':' This allows us to check that we don't return the new copy of a doc by asserting','line_number':434,'multiline':False]
['text':' foo < limit().','line_number':435,'multiline':False]
['text':' indexesAffected ','line_number':448,'multiline':True]
['text':' opDebug ','line_number':449,'multiline':True]
['text':' Read the rest of the data from the queued data stage.','line_number':455,'multiline':False]
['text':' Let's just invalidate everything now. Already read into ss, so original values','line_number':461,'multiline':False]
['text':' should be fetched.','line_number':462,'multiline':False]
['text':' indexesAffected ','line_number':474,'multiline':True]
['text':' opDebug ','line_number':475,'multiline':True]
['text':' Verify that it's sorted, the right number of documents are returned, and they're all','line_number':482,'multiline':False]
['text':' in the expected range.','line_number':483,'multiline':False]
['text':' Expect docs in range [0, limit)','line_number':500,'multiline':False]
['text':' Returns all docs.','line_number':506,'multiline':False]
['text':' Deletion invalidation of everything fed to sort.','line_number':511,'multiline':False]
['text':' The data we're going to later invalidate.','line_number':532,'multiline':False]
['text':' This test is specifically for the classic PlanStage execution engine, so assert that we','line_number':538,'multiline':False]
['text':' have the right kind of PlanExecutor.','line_number':539,'multiline':False]
['text':' Have sort read in data from the queued data stage.','line_number':550,'multiline':False]
['text':' We should have read in the first 'firstRead' recordIds.  Invalidate the first.','line_number':557,'multiline':False]
['text':' Read the rest of the data from the queued data stage.','line_number':569,'multiline':False]
['text':' Let's just invalidate everything now.','line_number':575,'multiline':False]
['text':' Regardless of storage engine, all the documents should come back with their objects','line_number':587,'multiline':False]
['text':' Returns all docs.','line_number':600,'multiline':False]
['text':' Deletion invalidation of everything fed to sort with limit enabled.','line_number':605,'multiline':False]
['text':' Limit size of working set within sort stage to a small number','line_number':606,'multiline':False]
['text':' Sort stage implementation should not try to invalidate RecordIds that','line_number':607,'multiline':False]
['text':' are no longer in the working set.','line_number':608,'multiline':False]
['text':' Should error out if we sort with parallel arrays.','line_number':618,'multiline':False]
['text':' addSortKeyMetadata','line_number':669,'multiline':False]
['text':' We don't get results back since we're sorting some parallel arrays.','line_number':675,'multiline':False]
['text':' Sort with limit has a general limiting strategy for limit > 1','line_number':698,'multiline':False]
['text':' and a special case for limit == 1','line_number':700,'multiline':False]
['text':' namespace QueryStageSortTests','line_number':713,'multiline':False]
