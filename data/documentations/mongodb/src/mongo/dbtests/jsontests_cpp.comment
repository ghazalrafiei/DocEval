['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 * Tests for json.{h,cpp} code and BSONObj::jsonString()
 ','line_number':30,'multiline':True]
['text':' IWYU pragma: keep','line_number':42,'multiline':False]
['text':' IWYU pragma: no_include "boost/multi_index/detail/bidir_node_iterator.hpp"','line_number':54,'multiline':False]
['text':' IWYU pragma: no_include "boost/property_tree/detail/exception_implementation.hpp"','line_number':56,'multiline':False]
['text':' IWYU pragma: no_include "boost/property_tree/detail/ptree_implementation.hpp"','line_number':57,'multiline':False]
['text':' IWYU pragma: keep','line_number':72,'multiline':False]
['text':' Tests of the BSONObj::jsonString member function.','line_number':107,'multiline':False]
['text':' Use ASSERT_EQUALS instead of ASSERT_JSON_EQUALS for LegacyStrict.','line_number':115,'multiline':False]
['text':' LegacyStrict that not produce valid JSON in all cases (which makes boost::property_tree','line_number':116,'multiline':False]
['text':' throw) and we have other tests elsewhere that checks for exact strings.','line_number':117,'multiline':False]
['text':' Empty','line_number':124,'multiline':False]
['text':' SingleStringMember','line_number':125,'multiline':False]
['text':' EscapedCharacters','line_number':127,'multiline':False]
['text':' per http://www.ietf.org/rfc/rfc4627.txt, control characters are','line_number':128,'multiline':False]
['text':' (U+0000 through U+001F).  U+007F is not mentioned as a control character.','line_number':129,'multiline':False]
['text':' AdditionalControlCharacters','line_number':131,'multiline':False]
['text':' EscapeFieldName','line_number':132,'multiline':False]
['text':'*
 * JavaScript's JSON.stringify(x,null,4) is the goal with our pretty==true formatting.
 * Expected string captured from node.js interpreter.
 * E.g.:
 * node -e 'console.log(JSON.stringify([123,[],{},{"a":1},{"a":1,"b":2,"c":[1,2,3]}],null,4))'
 ','line_number':136,'multiline':True]
['text':' Extended Canonical/Relaxed replaces invalid UTF-8 with Unicode Replacement Character while','line_number':194,'multiline':False]
['text':' LegacyStricts treats it as Extended Ascii','line_number':195,'multiline':False]
['text':' Can't use ASSERT_JSON_EQUALS because property_tree does not allow invalid unicode','line_number':200,'multiline':False]
['text':' Note there is no NaN in the JSON RFC but what would be the alternative?','line_number':208,'multiline':False]
['text':' Test a NumberLong that is too big to fit into a 32 bit integer','line_number':249,'multiline':False]
['text':' Test dates above our maximum formattable date.  See SERVER-13760.','line_number':502,'multiline':False]
['text':' These raw string literal breaks the Visual Studio preprocessor','line_number':534,'multiline':False]
['text':' namespace JsonStringTests','line_number':639,'multiline':False]
['text':' OkDollarFieldName','line_number':696,'multiline':False]
['text':' SingleNumber','line_number':697,'multiline':False]
['text':' RealNumber','line_number':698,'multiline':False]
['text':' FancyNumber','line_number':699,'multiline':False]
['text':' 2Elem','line_number':700,'multiline':False]
['text':' Sub','line_number':701,'multiline':False]
['text':' ArrayEmpty','line_number':726,'multiline':False]
['text':' TopLevelArrayEmpty','line_number':727,'multiline':False]
['text':' TopLevelArray','line_number':728,'multiline':False]
['text':' EscapedCharacters','line_number':749,'multiline':False]
['text':' NonEscapedCharacters','line_number':751,'multiline':False]
['text':' AllowedControlCharacter','line_number':752,'multiline':False]
['text':' InvalidControlCharacter','line_number':755,'multiline':False]
['text':' NumbersInFieldName','line_number':761,'multiline':False]
['text':' EscapeFieldName','line_number':762,'multiline':False]
['text':' EscapedUnicodeToUtf8','line_number':773,'multiline':False]
['text':' Utf8AllOnes','line_number':776,'multiline':False]
['text':' Utf8FirstByteOnes','line_number':780,'multiline':False]
['text':' Utf8Invalid','line_number':785,'multiline':False]
['text':' Utf8TooShort','line_number':786,'multiline':False]
['text':' Constructor','line_number':792,'multiline':False]
['text':' ConstructorCapitals','line_number':796,'multiline':False]
['text':' ConstructorDbName','line_number':800,'multiline':False]
['text':' ConstructorNumber','line_number':808,'multiline':False]
['text':' ConstructorObject','line_number':811,'multiline':False]
['text':' NumberId','line_number':815,'multiline':False]
['text':' ObjectAsId','line_number':818,'multiline':False]
['text':' StringId','line_number':822,'multiline':False]
['text':' ObjectIDObject','line_number':826,'multiline':False]
['text':' ObjectIDConstructor','line_number':829,'multiline':False]
['text':' DbName','line_number':832,'multiline':False]
['text':' StringId','line_number':847,'multiline':False]
['text':'','line_number':848,'multiline':False]
['text':' Oid','line_number':849,'multiline':False]
['text':'','line_number':850,'multiline':False]
['text':' Oid2','line_number':851,'multiline':False]
['text':' too long','line_number':854,'multiline':False]
['text':'  "','line_number':855,'multiline':False]
['text':' too short','line_number':856,'multiline':False]
['text':'  "','line_number':857,'multiline':False]
['text':' invalid char','line_number':858,'multiline':False]
['text':'  "','line_number':859,'multiline':False]
['text':' padded','line_number':903,'multiline':False]
['text':' padded double','line_number':905,'multiline':False]
['text':' std::string literal for embedded '\0'','line_number':918,'multiline':False]
['text':' A few with bad length.','line_number':928,'multiline':False]
['text':' BadChars','line_number':939,'multiline':False]
['text':' TypeTooShort','line_number':940,'multiline':False]
['text':' TypeTooLong','line_number':941,'multiline':False]
['text':' TypeBadChars','line_number':942,'multiline':False]
['text':' EmptyType','line_number':943,'multiline':False]
['text':' NoType','line_number':944,'multiline':False]
['text':' InvalidType','line_number':945,'multiline':False]
['text':' DateZero','line_number':953,'multiline':False]
['text':' DOCS-2539:  We cannot parse dates generated with a Unix timestamp of zero in local','line_number':954,'multiline':False]
['text':' time, since the body of the date may be before the Unix Epoch.  This causes parsing','line_number':955,'multiline':False]
['text':' to fail even if the offset would properly adjust the time.  For example,','line_number':956,'multiline':False]
['text':' "1969-12-31T19:00:00-05:00" actually represents the Unix timestamp of zero, but we','line_number':957,'multiline':False]
['text':' cannot parse it because the body of the date is before 1970.','line_number':958,'multiline':False]
['text':' {R"({ "a" : { "$date" : 0 } })", B().appendDate("a", Date_t()).obj()},','line_number':959,'multiline':False]
['text':' DateNonzero','line_number':961,'multiline':False]
['text':' DateStrictMaxUnsigned','line_number':965,'multiline':False]
['text':' Need to handle this because jsonString outputs the value of Date_t as unsigned.','line_number':966,'multiline':False]
['text':' See SERVER-8330 and SERVER-8573.','line_number':967,'multiline':False]
['text':' DateMaxUnsigned','line_number':970,'multiline':False]
['text':' DateStrictNegative','line_number':971,'multiline':False]
['text':' DateNegative','line_number':972,'multiline':False]
['text':' DateStrictTooLong','line_number':975,'multiline':False]
['text':' DateTooLong','line_number':976,'multiline':False]
['text':' DateIsString','line_number':977,'multiline':False]
['text':' DateIsString1','line_number':978,'multiline':False]
['text':' DateIsString2','line_number':979,'multiline':False]
['text':' DateIsFloat','line_number':980,'multiline':False]
['text':' DateIsFloat1','line_number':981,'multiline':False]
['text':' DateIsFloat2','line_number':982,'multiline':False]
['text':' DateIsExponent','line_number':983,'multiline':False]
['text':' DateIsExponent1','line_number':984,'multiline':False]
['text':' DateIsExponent2','line_number':985,'multiline':False]
['text':' NumberLong','line_number':991,'multiline':False]
['text':' NumberLongMin','line_number':993,'multiline':False]
['text':' NumberInt','line_number':995,'multiline':False]
['text':' NumberLongNeg','line_number':996,'multiline':False]
['text':' NumberIntNeg','line_number':997,'multiline':False]
['text':' NoIncrement','line_number':1011,'multiline':False]
['text':' NoArgs','line_number':1012,'multiline':False]
['text':' FloatSeconds','line_number':1013,'multiline':False]
['text':' FloatIncrement','line_number':1014,'multiline':False]
['text':' NegativeSeconds','line_number':1015,'multiline':False]
['text':' NegativeIncrement','line_number':1016,'multiline':False]
['text':' InvalidSeconds','line_number':1017,'multiline':False]
['text':' InvalidFieldName','line_number':1028,'multiline':False]
['text':' NoIncrement','line_number':1030,'multiline':False]
['text':' NegativeSeconds','line_number':1031,'multiline':False]
['text':' NegativeIncrement','line_number':1032,'multiline':False]
['text':' InvalidSeconds','line_number':1033,'multiline':False]
['text':' NoArgs','line_number':1034,'multiline':False]
['text':' FloatSeconds','line_number':1035,'multiline':False]
['text':' FloatIncrement','line_number':1036,'multiline':False]
['text':' Not a string','line_number':1047,'multiline':False]
['text':' NoArgs','line_number':1048,'multiline':False]
['text':' Wrong input size','line_number':1049,'multiline':False]
['text':' Right size, but wrong','line_number':1050,'multiline':False]
['text':' character set','line_number':1051,'multiline':False]
['text':' Not a string','line_number':1062,'multiline':False]
['text':' Wrong input size','line_number':1063,'multiline':False]
['text':' Right size, but wrong','line_number':1064,'multiline':False]
['text':' character set','line_number':1065,'multiline':False]
['text':'','line_number':1126,'multiline':False]
['text':'','line_number':1127,'multiline':False]
['text':' "\u0700\uff00"','line_number':1148,'multiline':False]
['text':' ObjectId','line_number':1171,'multiline':False]
['text':' ObjectId2','line_number':1173,'multiline':False]
['text':' NumericIntMin','line_number':1210,'multiline':False]
['text':' NumericLongMin','line_number':1213,'multiline':False]
['text':' NumericLimits','line_number':1216,'multiline':False]
['text':' Overflows double by giving it an exponent that is too large','line_number':1232,'multiline':False]
['text':' NullFieldUnquoted','line_number':1267,'multiline':False]
['text':' MinKey','line_number':1272,'multiline':False]
['text':' MaxKey','line_number':1273,'multiline':False]
['text':' MinKeyAlone','line_number':1276,'multiline':False]
['text':' MaxKeyAlone','line_number':1277,'multiline':False]
['text':'*
 * Asserts 'inputjson' fails to parse, and that each of the 'expectedContextChars' are shown in a
 * little snippet of the area we encountered the first parsing error.
 ','line_number':1281,'multiline':True]
['text':' We expect to see this in each error message - showing the character position of the parse','line_number':1304,'multiline':False]
['text':' error, like clang error messages:','line_number':1305,'multiline':False]
['text':' "{a: 4"','line_number':1306,'multiline':False]
['text':'       ^','line_number':1307,'multiline':False]
['text':' Missing close brace after 4. This is the easy case, the error is solidly in the middle of the','line_number':1316,'multiline':False]
['text':' string:','line_number':1317,'multiline':False]
['text':' Error right at the beginning:','line_number':1319,'multiline':False]
['text':' Error right at the end:','line_number':1321,'multiline':False]
['text':' Error in the middle of a short string:','line_number':1323,'multiline':False]
['text':' Error at the beginning of a short string:','line_number':1325,'multiline':False]
['text':' Error at the end of a short string:','line_number':1327,'multiline':False]
['text':' Very large input string','line_number':1329,'multiline':False]
['text':' Error is missing comma after 6, before 'z'','line_number':1342,'multiline':False]
['text':' namespace FromJsonTests','line_number':1346,'multiline':False]
['text':' namespace','line_number':1347,'multiline':False]
['text':' namespace mongo','line_number':1348,'multiline':False]
