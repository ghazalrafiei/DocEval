['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' IWYU pragma: keep','line_number':60,'multiline':False]
['text':' Run any tests included with the scripting engine','line_number':84,'multiline':False]
['text':' Currently reset does not clear data in v8 or spidermonkey scopes.  See SECURITY-10
       std::unique_ptr<Scope> s;
        s.reset( (getGlobalScriptEngine()->*scopeFactory)() );

        s->setBoolean( "x" , true );
        ASSERT( s->getBoolean( "x" ) );

        s->reset();
        ASSERT( !s->getBoolean( "x" ) );
        ','line_number':117,'multiline':True]
['text':' Test falsy javascript values','line_number':134,'multiline':False]
['text':' read-only object itself can be overwritten','line_number':343,'multiline':False]
['text':' test array - can't implement this in v8','line_number':348,'multiline':False]
['text':'            o = fromjson( "{a:[1,2,3]}" );','line_number':349,'multiline':False]
['text':'            s->setObject( "blah", o, true );','line_number':350,'multiline':False]
['text':'            out = s->getObject( "blah" );','line_number':351,'multiline':False]
['text':'            s->invoke( "blah.a[ 0 ] = 4;", BSONObj() );','line_number':352,'multiline':False]
['text':'            s->invoke( "delete blah['a'][ 2 ];", BSONObj() );','line_number':353,'multiline':False]
['text':'            out = s->getObject( "blah" );','line_number':354,'multiline':False]
['text':'            ASSERT_EQUALS( 1.0, out[ "a" ].embeddedObject()[ 0 ].number() );','line_number':355,'multiline':False]
['text':'            ASSERT_EQUALS( 3.0, out[ "a" ].embeddedObject()[ 2 ].number() );','line_number':356,'multiline':False]
['text':' date','line_number':367,'multiline':False]
['text':' regex','line_number':388,'multiline':False]
['text':' This regex used to cause a segfault because x isn't a valid flag for a js RegExp.','line_number':412,'multiline':False]
['text':' Now it throws a JS exception.','line_number':413,'multiline':False]
['text':' should throw','line_number':419,'multiline':False]
['text':' NOLINT','line_number':423,'multiline':False]
['text':' array','line_number':428,'multiline':False]
['text':' symbol','line_number':440,'multiline':False]
['text':' test mutable object with symbol type','line_number':442,'multiline':False]
['text':' readonly','line_number':450,'multiline':False]
['text':'  --  A  --','line_number':499,'multiline':False]
['text':'  --  B  --','line_number':520,'multiline':False]
['text':'  -- C --','line_number':539,'multiline':False]
['text':' Commenting so that v8 tests will work','line_number':567,'multiline':False]
['text':' TODO: this is technically bad, but here to make sure that i understand the behavior','line_number':568,'multiline':False]
['text':' ASSERT_EQUALS( NumberDouble , out["a"].embeddedObjectUserCheck()["1"].type() );','line_number':569,'multiline':False]
['text':' Eliot says I don't have to worry about this case','line_number':572,'multiline':False]
['text':'            // -- D --','line_number':574,'multiline':False]
['text':'','line_number':575,'multiline':False]
['text':'            o = fromjson( "{a:3.0,b:4.5}" );','line_number':576,'multiline':False]
['text':'            ASSERT_EQUALS( NumberDouble , o["a"].type() );','line_number':577,'multiline':False]
['text':'            ASSERT_EQUALS( NumberDouble , o["b"].type() );','line_number':578,'multiline':False]
['text':'','line_number':579,'multiline':False]
['text':'            s->setObject( "z" , o , false );','line_number':580,'multiline':False]
['text':'            s->invoke( "return z" , BSONObj() );','line_number':581,'multiline':False]
['text':'            out = s->getObject( "__returnValue" );','line_number':582,'multiline':False]
['text':'            ASSERT_EQUALS( 3 , out["a"].number() );','line_number':583,'multiline':False]
['text':'            ASSERT_EQUALS( 4.5 , out["b"].number() );','line_number':584,'multiline':False]
['text':'','line_number':585,'multiline':False]
['text':'            ASSERT_EQUALS( NumberDouble , out["b"].type() );','line_number':586,'multiline':False]
['text':'            ASSERT_EQUALS( NumberDouble , out["a"].type() );','line_number':587,'multiline':False]
['text':'','line_number':588,'multiline':False]
['text':' limit is 2^53','line_number':687,'multiline':False]
['text':' Test the scope object','line_number':738,'multiline':False]
['text':' Test that the appropriatestd::string output is generated','line_number':748,'multiline':False]
['text':' Timestamp 't' component can exceed max for int32_t.','line_number':801,'multiline':False]
['text':'*
 * Test exec() timeout value terminates execution (SERVER-8053)
 ','line_number':841,'multiline':True]
['text':' assert timeout occurred','line_number':850,'multiline':False]
['text':'*
 * Test exec() timeout value terminates execution (SERVER-8053)
 ','line_number':855,'multiline':True]
['text':' assert no timeout occurred','line_number':864,'multiline':False]
['text':'*
 * Test invoke() timeout value terminates execution (SERVER-8053)
 ','line_number':874,'multiline':True]
['text':' scope timeout after 500ms','line_number':883,'multiline':False]
['text':' Spawn a thread which attempts to sleep indefinitely.','line_number':908,'multiline':False]
['text':' The parent thread uses the 'scope' pointer to send the "kill" signal, making it','line_number':927,'multiline':False]
['text':' unsafe to destroy 'scope' until we have confirmation that the parent no longer needs','line_number':928,'multiline':False]
['text':' it. This wait protects against a use-after-free error that can occur if Scope::exec()','line_number':929,'multiline':False]
['text':' fails instead of executing its long sleep.','line_number':930,'multiline':False]
['text':' Wait until just before the sleep begins.','line_number':934,'multiline':False]
['text':' Attempt to wait until Javascript enters the sleep.','line_number':937,'multiline':False]
['text':' It's OK if we kill the function prematurely, before it begins sleeping. Either cause of','line_number':938,'multiline':False]
['text':' death will emit an error with the Interrupted code.','line_number':939,'multiline':False]
['text':' Send the operation a kill signal.','line_number':942,'multiline':False]
['text':' Wait for the error.','line_number':946,'multiline':False]
['text':'*
 * Test invoke() timeout value does not terminate execution (SERVER-8053)
 ','line_number':954,'multiline':True]
['text':' invoke completes before timeout','line_number':963,'multiline':False]
['text':'            pp( "in " , in["b"] );','line_number':1048,'multiline':False]
['text':'            pp( "out" , out["c"] );','line_number':1049,'multiline':False]
['text':' check that BinData js class is utilized','line_number':1052,'multiline':False]
['text':'            pp( "out" , out["c"] );','line_number':1064,'multiline':False]
['text':' std::cout << "speed1: " << ( n / t.millis() ) << " ops/ms" << std::endl;','line_number':1108,'multiline':False]
['text':'*
 * This tests a bug discovered in SERVER-24054, where certain interesting nan patterns crash
 * spidermonkey by looking like non-double type puns.  This verifies that we put that particular
 * interesting nan in and that we still get a nan out.
 ','line_number':1160,'multiline':True]
['text':' Ensure that by default we can bind owned and unowned','line_number':1334,'multiline':False]
['text':' After we set the flag, we should only be able to set owned','line_number':1341,'multiline':False]
['text':' after resetting, we can set unowned's again','line_number':1360,'multiline':False]
['text':' Wrapping to form a proper element','line_number':1375,'multiline':False]
['text':' Check a few elementary objects','line_number':1397,'multiline':False]
['text':'*
 * A basic async test to make sure that async works and doesn't break
 ','line_number':1415,'multiline':True]
['text':' The async code will get run after the return, so
         * 0 should be returned. Immediately after the return is
         * evaluated the function within the then() will be executed,
         * setting x to 28. ','line_number':1425,'multiline':True]
['text':' When we return x the second time the value has been updated
         * by the async function ','line_number':1436,'multiline':True]
['text':' namespace JSTests','line_number':1505,'multiline':False]
['text':' namespace mongo','line_number':1506,'multiline':False]
