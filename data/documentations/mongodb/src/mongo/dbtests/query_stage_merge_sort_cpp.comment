['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' IWYU pragma: no_include "boost/intrusive/detail/iterator.hpp"','line_number':31,'multiline':False]
['text':' IWYU pragma: keep','line_number':75,'multiline':False]
['text':'*
 * This file tests db/exec/merge_sort.cpp
 ','line_number':80,'multiline':True]
['text':' SERVER-1205:','line_number':175,'multiline':False]
['text':' find($or[{a:1}, {b:1}]).sort({c:1}) with indices {a:1, c:1} and {b:1, c:1}.','line_number':176,'multiline':False]
['text':' Sort by c:1','line_number':203,'multiline':False]
['text':' a:1','line_number':208,'multiline':False]
['text':' b:1','line_number':212,'multiline':False]
['text':' Must fetch if we want to easily pull out an obj.','line_number':218,'multiline':False]
['text':' Should be done now.','line_number':240,'multiline':False]
['text':' Each inserted document appears in both indices but is deduped and returned properly/sorted.','line_number':246,'multiline':False]
['text':' Sort by c:1','line_number':272,'multiline':False]
['text':' a:1','line_number':277,'multiline':False]
['text':' b:1','line_number':281,'multiline':False]
['text':' Should be done now.','line_number':308,'multiline':False]
['text':' Each inserted document appears in both indices, no deduping, get each result twice.','line_number':314,'multiline':False]
['text':' Sort by c:1','line_number':339,'multiline':False]
['text':' a:1','line_number':345,'multiline':False]
['text':' b:1','line_number':349,'multiline':False]
['text':' We inserted N objects but we get 2 * N from the runner because of dups.','line_number':367,'multiline':False]
['text':' Should be done now.','line_number':377,'multiline':False]
['text':' Decreasing indices merged ok.  Basically the test above but decreasing.','line_number':383,'multiline':False]
['text':' We insert a:1 c:i for i=0..49 but in reverse order for the heck of it.','line_number':397,'multiline':False]
['text':' Sort by c:-1','line_number':410,'multiline':False]
['text':' a:1','line_number':415,'multiline':False]
['text':' b:1','line_number':421,'multiline':False]
['text':' Should be done now.','line_number':450,'multiline':False]
['text':' One stage EOF immediately','line_number':456,'multiline':False]
['text':' Sort by c:1','line_number':482,'multiline':False]
['text':' a:1','line_number':487,'multiline':False]
['text':' b:51 (EOF)','line_number':491,'multiline':False]
['text':' Only getting results from the a:1 index scan.','line_number':509,'multiline':False]
['text':' Should be done now.','line_number':517,'multiline':False]
['text':' N stages each have 1 result','line_number':523,'multiline':False]
['text':' Sort by foo:1','line_number':535,'multiline':False]
['text':' 'a', 'b', ...','line_number':544,'multiline':False]
['text':' Should be done now.','line_number':578,'multiline':False]
['text':' Document is deleted mid-run.','line_number':584,'multiline':False]
['text':' Sort by foo:1','line_number':596,'multiline':False]
['text':' Index 'a'+i has foo equal to 'i'.','line_number':601,'multiline':False]
['text':' 'a', 'b', ...','line_number':606,'multiline':False]
['text':' Get 10 results.  Should be getting results in order of 'recordIds'.','line_number':625,'multiline':False]
['text':' Delete recordIds[11]. The deleted document should be buffered inside the SORT_MERGE','line_number':646,'multiline':False]
['text':' stage, and therefore should still be returned.','line_number':647,'multiline':False]
['text':' Make sure recordIds[11] is returned as expected. We expect the corresponding working set','line_number':652,'multiline':False]
['text':' member to remain in RID_AND_IDX state. It should have been marked as "suspicious", since','line_number':653,'multiline':False]
['text':' this is an index key WSM that survived a yield.','line_number':654,'multiline':False]
['text':' An attempt to fetch the WSM should show that the key is no longer present in the','line_number':673,'multiline':False]
['text':' index.','line_number':674,'multiline':False]
['text':' And get the rest.','line_number':683,'multiline':False]
['text':' Test that if a WSM buffered inside the merge sort stage gets updated, we return the document and','line_number':705,'multiline':False]
['text':' then correctly dedup if we see the same RecordId again.','line_number':706,'multiline':False]
['text':' Insert data.','line_number':717,'multiline':False]
['text':' First child scans [5, 10].','line_number':735,'multiline':False]
['text':' Second child scans [4, 10].','line_number':749,'multiline':False]
['text':' First doc should be {a: 4}.','line_number':763,'multiline':False]
['text':' Update doc {a: 5} such that the postimage will no longer match the query.','line_number':770,'multiline':False]
['text':' Invalidated doc {a: 5} should still get returned. We expect an RID_AND_OBJ working set','line_number':775,'multiline':False]
['text':' member with an owned BSONObj.','line_number':776,'multiline':False]
['text':' ASSERT(member->obj.value().isOwned());','line_number':780,'multiline':False]
['text':' We correctly dedup the invalidated doc and return {a: 6} next.','line_number':784,'multiline':False]
['text':' Sort by c:1, d:1','line_number':835,'multiline':False]
['text':' a:1','line_number':841,'multiline':False]
['text':' b:1','line_number':845,'multiline':False]
['text':' Must fetch if we want to easily pull out an obj.','line_number':851,'multiline':False]
['text':' {a: 1, c: i, d: "abc"} should precede {b: 1, c: i, d: "bca"}.','line_number':869,'multiline':False]
['text':' Should be done now.','line_number':873,'multiline':False]
['text':' Sort by c:1, d:1','line_number':906,'multiline':False]
['text':' a:1','line_number':913,'multiline':False]
['text':' Wrap 'idxScan' with a FETCH stage so a document is fetched and MERGE_SORT is forced to','line_number':917,'multiline':False]
['text':' use the provided collator 'collator'. Also, this permits easier retrieval of result','line_number':918,'multiline':False]
['text':' objects in the result verification code.','line_number':919,'multiline':False]
['text':' b:1','line_number':923,'multiline':False]
['text':' {b: 1, c: i, d: "cba"} should precede {a: 1, c: i, d: "abc"}.','line_number':946,'multiline':False]
['text':' Should be done now.','line_number':950,'multiline':False]
['text':' namespace QueryStageMergeSortTests','line_number':976,'multiline':False]
