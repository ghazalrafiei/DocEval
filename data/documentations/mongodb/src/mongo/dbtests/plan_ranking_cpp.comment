['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 * This file tests db/query/plan_ranker.cpp and db/query/multi_plan_runner.cpp.
 ','line_number':30,'multiline':True]
['text':' IWYU pragma: keep','line_number':77,'multiline':False]
['text':' How we access the external setParameter testing bool.','line_number':86,'multiline':False]
['text':' Run all tests with hash-based intersection enabled.','line_number':106,'multiline':False]
['text':' Ensure N is significantly larger then internalQueryPlanEvaluationWorks.','line_number':109,'multiline':False]
['text':' Restore external setParameter testing bools.','line_number':117,'multiline':False]
['text':'*
     * Use the MultiPlanRunner to pick the best plan for the query 'cq'.  Goes through
     * normal planning to generate solutions and feeds them to the MPR.
     *
     * Does NOT take ownership of 'cq'.  Caller DOES NOT own the returned QuerySolution*.
     ','line_number':131,'multiline':True]
['text':' Plan.','line_number':143,'multiline':False]
['text':' Fill out the MPR.','line_number':150,'multiline':False]
['text':' Put each solution from the planner into the MPR.','line_number':153,'multiline':False]
['text':' This is what sets a backup plan, should we test for it.','line_number':159,'multiline':False]
['text':' And return a pointer to the best solution.','line_number':168,'multiline':False]
['text':'*
     * Was a backup plan picked during the ranking process?
     ','line_number':172,'multiline':True]
['text':' A large number, which must be larger than the number of times','line_number':185,'multiline':False]
['text':' candidate plans are worked by the multi plan runner. Used for','line_number':186,'multiline':False]
['text':' determining the number of documents in the tests below.','line_number':187,'multiline':False]
['text':' Holds the value of global "internalQueryForceIntersectionPlans" setParameter flag.','line_number':197,'multiline':False]
['text':' Restored at end of test invocation regardless of test result.','line_number':198,'multiline':False]
['text':' Holds the value of the global set parameter so it can be restored at the end','line_number':201,'multiline':False]
['text':' of the test.','line_number':202,'multiline':False]
['text':'*
 * Ensures that if a plan fails, but scores higher than a succeeding plan, then the plan which
 * doesn't fail is chosen.
 ','line_number':210,'multiline':True]
['text':' We set the max results to decrease the amount of work that is done during the trial','line_number':220,'multiline':False]
['text':' period. We want it to do less work than there are docs to ensure that no plan reaches','line_number':221,'multiline':False]
['text':' EOF.','line_number':222,'multiline':False]
['text':' Insert 'numDocs' documents. A number of documents given by 'smallNumber' should have','line_number':238,'multiline':False]
['text':' a==1, while all other docs have a==0.','line_number':239,'multiline':False]
['text':' The index {a: 1} is what we expect to be used. The index {d: 1} is just to produce a','line_number':245,'multiline':False]
['text':' competing plan.','line_number':246,'multiline':False]
['text':' Run a query where we expect the most efficient plan to fail due to exhausting the','line_number':250,'multiline':False]
['text':' blocking sort memory limit during multi-planning. We expect this error to be swallowed','line_number':251,'multiline':False]
['text':' and the less efficient plan using index {d: 1} to be chosen instead.','line_number':252,'multiline':False]
['text':'','line_number':253,'multiline':False]
['text':' Query: find({a: 1}).sort({d: 1})','line_number':254,'multiline':False]
['text':' We assert that there was only one plan scored, implying that there was only one','line_number':279,'multiline':False]
['text':' non-failing plan.','line_number':280,'multiline':False]
['text':' We assert that there was one failing plan.','line_number':282,'multiline':False]
['text':' Holds the value of global "internalQueryMaxBlockingSortMemoryUsageBytes" setParameter flag.','line_number':287,'multiline':False]
['text':' Restored at end of test invocation regardless of test result.','line_number':288,'multiline':False]
['text':'*
 * Test that the "prefer ixisect" parameter works.
 ','line_number':293,'multiline':True]
['text':' 'a' is very selective, 'b' is not.','line_number':299,'multiline':False]
['text':' Add indices on 'a' and 'b'.','line_number':304,'multiline':False]
['text':' Run the query {a:4, b:1}.','line_number':308,'multiline':False]
['text':' {a:100} is super selective so choose that.','line_number':315,'multiline':False]
['text':' Turn on the "force intersect" option.','line_number':321,'multiline':False]
['text':' This will be reverted by PlanRankingTestBase's destructor when the test completes.','line_number':322,'multiline':False]
['text':' And run the same query again.','line_number':325,'multiline':False]
['text':' With the "ranking picks ixisect always" option we pick an intersection plan that uses','line_number':332,'multiline':False]
['text':' both the {a:1} and {b:1} indices even though it performs poorly.','line_number':333,'multiline':False]
['text':'*
 * Test that a hashed AND solution plan is picked along with a non-blocking backup solution.
 ','line_number':344,'multiline':True]
['text':' 'a' is very selective, 'b' is not.','line_number':350,'multiline':False]
['text':' Add indices on 'a' and 'b'.','line_number':355,'multiline':False]
['text':' Run the query {a:1, b:{$gt:1}.','line_number':359,'multiline':False]
['text':' Turn on the "force intersect" option.','line_number':366,'multiline':False]
['text':' This will be reverted by PlanRankingTestBase's destructor when the test completes.','line_number':367,'multiline':False]
['text':' Confirm that a backup plan is available.','line_number':377,'multiline':False]
['text':'*
 * Two plans hit EOF at the same time, but one is covered. Make sure that we prefer the covered
 * plan.
 ','line_number':382,'multiline':True]
['text':' Insert data {a:i, b:i}.  Index {a:1} and {a:1, b:1}, query on 'a', projection on 'a'','line_number':389,'multiline':False]
['text':' and 'b'.  Should prefer the second index as we can pull the 'b' data out.','line_number':390,'multiline':False]
['text':' Query for a==27 with projection that wants 'a' and 'b'.','line_number':398,'multiline':False]
['text':' Prefer the fully covered plan.','line_number':407,'multiline':False]
['text':'*
 * No plan produces any results or hits EOF. In this case we should never choose an index
 * intersection solution.
 ','line_number':415,'multiline':True]
['text':' We insert lots of copies of {a:1, b:1, c: 20}.  We have the indices {a:1} and {b:1},','line_number':422,'multiline':False]
['text':' and the query is {a:1, b:1, c: 999}.  No data that matches the query but we won't','line_number':423,'multiline':False]
['text':' know that during plan ranking.  We don't want to choose an intersection plan here.','line_number':424,'multiline':False]
['text':' There is no data that matches this query but we don't know that until EOF.','line_number':432,'multiline':False]
['text':' Anti-prefer the intersection plan.','line_number':440,'multiline':False]
['text':'*
 * No plan produces any results or hits EOF. In this case we should prefer covered solutions to
 * non-covered solutions.
 ','line_number':449,'multiline':True]
['text':' We insert lots of copies of {a:1, b:1}.  We have the indices {a:1} and {a:1, b:1},','line_number':456,'multiline':False]
['text':' the query is for a doc that doesn't exist, but there is a projection over 'a' and','line_number':457,'multiline':False]
['text':' 'b'.  We should prefer the index that provides a covered query.','line_number':458,'multiline':False]
['text':' There is no data that matches this query ({a:2}).  Both scans will hit EOF before','line_number':466,'multiline':False]
['text':' returning any data.','line_number':467,'multiline':False]
['text':' Prefer the fully covered plan.','line_number':476,'multiline':False]
['text':'*
 * We have an index on "a" which is somewhat selective and an index on "b" which is highly
 * selective (will cause an immediate EOF). Make sure that a query with predicates on both "a"
 * and "b" will use the index on "b".
 ','line_number':484,'multiline':True]
['text':' 'a' is very selective, 'b' is not.','line_number':492,'multiline':False]
['text':' Add indices on 'a' and 'b'.','line_number':497,'multiline':False]
['text':' Run the query {a:N+1, b:1}.  (No such document.)','line_number':501,'multiline':False]
['text':' {a: 100} is super selective so choose that.','line_number':508,'multiline':False]
['text':'*
 * Same as PlanRankingPreferImmediateEOF, but substitute a range predicate on "a" for the
 * equality predicate on "a".  The presence of the range predicate has an impact on the
 * intersection plan that is raced against the single-index plans: since "a" no longer generates
 * point interval bounds, the results of the index scan aren't guaranteed to be returned in
 * RecordId order, and so the intersection plan uses the AND_HASHED stage instead of the
 * AND_SORTED stage.  It is still the case that the query should pick the plan that uses index
 * "b", instead of the plan that uses index "a" or the (hashed) intersection plan.
 ','line_number':516,'multiline':True]
['text':' 'a' is very selective, 'b' is not.','line_number':528,'multiline':False]
['text':' Add indices on 'a' and 'b'.','line_number':533,'multiline':False]
['text':' Run the query {a:N+1, b:1}.  (No such document.)','line_number':537,'multiline':False]
['text':' {a: 100} is super selective so choose that.','line_number':544,'multiline':False]
['text':'*
 * We have an index on _id and a query over _id with a sort.  Ensure that we don't pick a
 * collscan as the best plan even though the _id-scanning solution doesn't produce any results.
 ','line_number':552,'multiline':True]
['text':' Run a query with a sort.  The blocking sort won't produce any data during the','line_number':565,'multiline':False]
['text':' evaluation period.','line_number':566,'multiline':False]
['text':' The best must not be a collscan.','line_number':575,'multiline':False]
['text':'*
 * No indices are available, output a collscan.
 ','line_number':585,'multiline':True]
['text':' Insert data for which we have no index.','line_number':591,'multiline':False]
['text':' Look for A Space Odyssey.','line_number':596,'multiline':False]
['text':' The best must be a collscan.','line_number':604,'multiline':False]
['text':'*
 * When no other information is available, prefer solutions without
 * a blocking sort stage.
 ','line_number':611,'multiline':True]
['text':' The index {d: 1, e: 1} provides the desired sort order,','line_number':622,'multiline':False]
['text':' while index {a: 1, b: 1} can be used to answer the','line_number':623,'multiline':False]
['text':' query predicate, but does not provide the sort.','line_number':624,'multiline':False]
['text':' Query: find({a: 1}).sort({d: 1})','line_number':628,'multiline':False]
['text':' No results will be returned during the trial period,','line_number':636,'multiline':False]
['text':' so we expect to choose {d: 1, e: 1}, as it allows us','line_number':637,'multiline':False]
['text':' to avoid the sort stage.','line_number':638,'multiline':False]
['text':'*
 * Make sure we run candidate plans for long enough when none of the
 * plans are producing results.
 ','line_number':648,'multiline':True]
['text':' Indices on 'a' and 'b'.','line_number':660,'multiline':False]
['text':' Solutions using either 'a' or 'b' will take a long time to start producing','line_number':664,'multiline':False]
['text':' results. However, an index scan on 'b' will start producing results sooner','line_number':665,'multiline':False]
['text':' than an index scan on 'a'.','line_number':666,'multiline':False]
['text':' Use index on 'b'.','line_number':673,'multiline':False]
['text':'*
 * Suppose we have two plans which are roughly equivalent, other than that
 * one uses an index which involves doing a lot more skipping of index keys.
 * Prefer the plan which does not have to do this index key skipping.
 ','line_number':681,'multiline':True]
['text':' These indices look equivalent to the ranker for the query below unless we account','line_number':693,'multiline':False]
['text':' for key skipping. We should pick index {a: 1} if we account for key skipping','line_number':694,'multiline':False]
['text':' properly.','line_number':695,'multiline':False]
['text':' Expect to use index {a: 1, b: 1}.','line_number':705,'multiline':False]
['text':' namespace PlanRankingTests','line_number':736,'multiline':False]
['text':' namespace mongo','line_number':737,'multiline':False]
