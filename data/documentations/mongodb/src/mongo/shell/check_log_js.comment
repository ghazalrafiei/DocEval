['text':'
 * Helper functions which connect to a server, and check its logs for particular strings.
 ','line_number':1,'multiline':True]
['text':' Protect against this file being double-loaded.','line_number':10,'multiline':False]
['text':' Retry with network errors.','line_number':20,'multiline':False]
['text':'
     * Calls the 'getLog' function on the provided connection 'conn' to see if the provided msg
     * is found in the logs. Note: this function does not throw an exception, so the return
     * value should not be ignored.
     ','line_number':28,'multiline':True]
['text':'
     * Calls the 'getLog' function on the provided connection 'conn' to see if the provided msg
     * is found in the logs. Note: this function does not throw an exception, so the return
     * value should not be ignored.
     ','line_number':54,'multiline':True]
['text':'
     * Acts just like checkContainsOnceJson but introduces the `expectedCount`, `isRelaxed`,
     * `comparator`, and `context` params. `isRelaxed` is used to determine how object attributes
     * are handled for matching purposes. If `isRelaxed` is true, then only the fields included in
     * the object in attrsDict will be checked for in the corresponding object in the log.
     * Otherwise, the objects will be checked for complete equality. After counting the total number
     * of logs that match `id` and `attrsDict` based on `isRelaxed`, the `comparator` function is
     * applied to appropriately compare the count with `expectedCount`. `context` allows to check
     * the `ctx` field of the logs.
     ','line_number':104,'multiline':True]
['text':'
     * Similar to checkContainsWithCountJson, but checks whether there are at least 'expectedCount'
     * instances of 'id' in the logs.
     ','line_number':132,'multiline':True]
['text':'
     * Calls the 'getLog' function on the provided connection 'conn' to see if a log with the
     * provided id is found in the logs. If the id is found it looks up the specified attrribute by
     * attrName and checks if the msg is found in its value. Note: this function does not throw an
     * exception, so the return value should not be ignored.
     ','line_number':144,'multiline':True]
