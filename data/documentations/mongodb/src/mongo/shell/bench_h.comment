['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 * Object representing one operation passed to benchRun
 ','line_number':95,'multiline':True]
['text':' Transaction state','line_number':109,'multiline':False]
['text':' Only used for find cmds when set greater than 0. A find operation will retrieve the latest','line_number':152,'multiline':False]
['text':' cluster time from the oplog and randomly chooses a time between that timestamp and','line_number':153,'multiline':False]
['text':' 'useClusterTimeWithinSeconds' seconds in the past at which to read.','line_number':154,'multiline':False]
['text':'','line_number':155,'multiline':False]
['text':' Must be used with 'useSnapshotReads=true' BenchRunConfig because atClusterTime is only','line_number':156,'multiline':False]
['text':' allowed within a transaction.','line_number':157,'multiline':False]
['text':' Delays getMore commands following a find cmd. A uniformly distributed random value between 0','line_number':160,'multiline':False]
['text':' and maxRandomMillisecondDelayBeforeGetMore will be generated for each getMore call. Useful','line_number':161,'multiline':False]
['text':' for keeping a snapshot read open for a longer time duration, say to simulate the basic','line_number':162,'multiline':False]
['text':' resources that a snapshot transaction would hold for a time.','line_number':163,'multiline':False]
['text':' Format: {$readPreference: {mode: modeStr}}.  Only mode field is allowed.','line_number':166,'multiline':False]
['text':' This is an owned copy of the raw operation. All unowned members point into this.','line_number':169,'multiline':False]
['text':'*
 * Configuration object describing a bench run activity.
 ','line_number':173,'multiline':True]
['text':'*
     * Create a new BenchRunConfig object, and initialize it from the BSON
     * document, "args".
     *
     * Caller owns the returned object, and is responsible for its deletion.
     ','line_number':181,'multiline':True]
['text':' Create a new connection to the mongo instance specified by this configuration.','line_number':195,'multiline':False]
['text':'*
     * Connection std::string describing the host to which to connect.
     ','line_number':198,'multiline':True]
['text':'*
     * Name of the database on which to operate.
     ','line_number':203,'multiline':True]
['text':'*
     * Optional username for authenticating to the database.
     ','line_number':208,'multiline':True]
['text':'*
     * Optional password for authenticating to the database.
     *
     * Only useful if username is non-empty.
     ','line_number':213,'multiline':True]
['text':'*
     * Number of parallel threads to perform the bench run activity.
     ','line_number':220,'multiline':True]
['text':'*
     * Desired duration of the bench run activity, in seconds.
     *
     * NOTE: Only used by the javascript benchRun() and benchRunSync() functions.
     ','line_number':225,'multiline':True]
['text':'*
     * Whether the individual benchRun thread connections should be creating and using sessions.
     ','line_number':232,'multiline':True]
['text':'*
     * Whether write commands should be sent with a txnNumber to ensure they are idempotent. This
     * setting doesn't actually cause the workload generator to perform any retries.
     ','line_number':237,'multiline':True]
['text':'*
     * Whether read commands should be sent with a txnNumber and read concern level snapshot.
     ','line_number':243,'multiline':True]
['text':'*
     * How many milliseconds to sleep for if an operation fails, before continuing to the next op.
     ','line_number':248,'multiline':True]
['text':'/ Base random seed for threads','line_number':253,'multiline':False]
['text':'*
     * Operation description. A list of BenchRunOps, each describing a single
     * operation.
     *
     * Every thread in a benchRun job will perform these operations in sequence, restarting at
     * the beginning when the end is reached, until the job is stopped.
     *
     * TODO: Introduce support for performing each operation exactly N times.
     ','line_number':264,'multiline':True]
['text':' is this a call of benchRunOnce() instead of benchRunSync(), etc.?','line_number':277,'multiline':False]
['text':'/ Initialize a config object to its default values.','line_number':282,'multiline':False]
['text':'*
 * An event counter for events that have an associated duration.
 *
 * Not thread safe. Expected use is one instance per thread during parallel execution.
 ','line_number':286,'multiline':True]
['text':'*
     * Conceptually the equivalent of "+=". Adds "other" into this.
     ','line_number':295,'multiline':True]
['text':'*
     * Count one instance of the event, which took "timeMicros" microseconds.
     ','line_number':300,'multiline':True]
['text':'*
     * Get the total number of microseconds ellapsed during all observed events.
     ','line_number':312,'multiline':True]
['text':'*
     * Get the number of observed events.
     ','line_number':319,'multiline':True]
['text':'*
 * RAII object for tracing an event.
 *
 * Construct an instance of this at the beginning of an event, and have it go out of scope at
 * the end, to facilitate tracking events.
 *
 * This type can be used to separately count failures and successes by passing two event
 * counters to the BenchRunEventCounter constructor, and calling "succeed()" on the object at
 * the end of a successful event. If an exception is thrown, the fail counter will receive the
 * event, and otherwise, the succes counter will.
 *
 * In all cases, the counter objects must outlive the trace object.
 ','line_number':331,'multiline':True]
['text':'*
 * Statistics object representing the result of a bench run activity.
 ','line_number':385,'multiline':True]
['text':'*
 * State of a BenchRun activity.
 *
 * Logically, the states are "starting up", "running" and "finished."
 ','line_number':407,'multiline':True]
['text':'','line_number':422,'multiline':False]
['text':' Functions called by the job-controlling thread, through an instance of BenchRunner.','line_number':423,'multiline':False]
['text':'','line_number':424,'multiline':False]
['text':'*
     * Block until the current state is "awaitedState."
     *
     * massert() (uassert()?) if "awaitedState" is unreachable from
     * the current state.
     ','line_number':426,'multiline':True]
['text':'*
     * Notify the worker threads to wrap up. Does not block.
     ','line_number':434,'multiline':True]
['text':'*
     * Notify the worker threads to collect statistics. Does not block.
     ','line_number':439,'multiline':True]
['text':'*
     * Check that the current state is BRS_FINISHED.
     ','line_number':444,'multiline':True]
['text':'','line_number':449,'multiline':False]
['text':' Functions called by the worker threads, through instances of BenchRunWorker.','line_number':450,'multiline':False]
['text':'','line_number':451,'multiline':False]
['text':'*
     * Predicate that workers call to see if they should finish (as a result of a call
     * to tellWorkersToFinish()).
     ','line_number':453,'multiline':True]
['text':'*
     * Predicate that workers call to see if they should start collecting stats (as a result
     * of a call to tellWorkersToCollectStats()).
     ','line_number':459,'multiline':True]
['text':'*
     * Called by each BenchRunWorker from within its thread context, immediately before it
     * starts sending requests to the configured mongo instance.
     ','line_number':465,'multiline':True]
['text':'*
     * Called by each BenchRunWorker from within its thread context, shortly after it finishes
     * sending requests to the configured mongo instance.
     ','line_number':471,'multiline':True]
['text':'*
 * A single worker in the bench run activity.
 *
 * Represents the behavior of one thread working in a bench run activity.
 ','line_number':489,'multiline':True]
['text':'*
     * Create a new worker, performing one thread's worth of the activity described in
     * "config", and part of the larger activity with state "brState". Both "config"
     * and "brState" must exist for the life of this object.
     *
     * "id" is a positive integer which should uniquely identify the worker.
     ','line_number':499,'multiline':True]
['text':'*
     * Start performing the "work" behavior in a new thread.
     ','line_number':512,'multiline':True]
['text':'*
     * Get the run statistics for a worker.
     *
     * Should only be observed _after_ the worker has signaled its completion by calling
     * onWorkerFinished() on the BenchRunState passed into its constructor.
     ','line_number':517,'multiline':True]
['text':'/ The main method of the worker, executed inside the thread launched by start().','line_number':528,'multiline':False]
['text':'/ The function that actually sets about generating the load described in "_config".','line_number':531,'multiline':False]
['text':'/ Predicate, used to decide whether or not it's time to terminate the worker.','line_number':534,'multiline':False]
['text':'/ Predicate, used to decide whether or not it's time to collect statistics','line_number':536,'multiline':False]
['text':' 0-based ID of this worker instance','line_number':541,'multiline':False]
['text':' Dummy stats to use before observation period.','line_number':549,'multiline':False]
['text':' Actual stats collected during the run','line_number':552,'multiline':False]
['text':'*
 * Object representing a "bench run" activity.
 ','line_number':556,'multiline':True]
['text':'*
     * Utility method to create a new bench runner from a BSONObj representation
     * of a configuration.
     *
     * TODO: This is only really for the use of the javascript benchRun() methods,
     * and should probably move out of the BenchRunner class.
     ','line_number':564,'multiline':True]
['text':'*
     * Look up a bench runner object by OID.
     *
     * TODO: Same todo as for "createWithConfig".
     ','line_number':573,'multiline':True]
['text':'*
     * Stop a running "runner", and return a BSON representation of its resultant
     * BenchRunStats.
     *
     * TODO: Same as for "createWithConfig".
     ','line_number':580,'multiline':True]
['text':'*
     * Create a new bench runner, to perform the activity described by "*config."
     *
     * Takes ownership of "config", and will delete it.
     ','line_number':588,'multiline':True]
['text':'*
     * Start the activity. Only call once per instance of BenchRunner.
     ','line_number':596,'multiline':True]
['text':'*
     * Stop the activity. Block until the activitiy has stopped.
     ','line_number':601,'multiline':True]
['text':'*
     * Store the collected event data from a completed bench run activity into "stats."
     *
     * Illegal to call until after stop() returns.
     ','line_number':606,'multiline':True]
['text':' TODO: Remove this function.','line_number':619,'multiline':False]
['text':' JS bindings','line_number':621,'multiline':False]
['text':' TODO: Same as for createWithConfig.','line_number':628,'multiline':False]
['text':' namespace mongo','line_number':642,'multiline':False]
