['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' IWYU pragma: keep','line_number':71,'multiline':False]
['text':' IWYU pragma: keep','line_number':93,'multiline':False]
['text':' The storage for these variables has to live until the value is captured into a std::string at','line_number':118,'multiline':False]
['text':' the end of this function.  This is because getpwuid_r(3) doesn't use static storage, but','line_number':119,'multiline':False]
['text':' storage provided by the caller.  As a fallback, reserve enough space to store 8 paths, on the','line_number':120,'multiline':False]
['text':' theory that the pwent buffer probably needs about that many paths, to fully describe a user','line_number':121,'multiline':False]
['text':' -- shell paths, home directory paths, etc.','line_number':122,'multiline':False]
['text':' namespace','line_number':144,'multiline':False]
['text':' namespace mongo::shell_utils','line_number':145,'multiline':False]
['text':' namespace JSFiles','line_number':163,'multiline':False]
['text':' helper functions for isBalanced','line_number':178,'multiline':False]
['text':'*
 * Skip over a quoted string, including quotes escaped with backslash
 *
 * @param code      String
 * @param start     Starting position within string, always > 0
 * @param quote     Quote character (single or double quote)
 * @return          Position of ending quote, or code.size() if no quote found
 ','line_number':186,'multiline':True]
['text':' We want to break if the quote we found is not escaped, but we need to make sure','line_number':201,'multiline':False]
['text':' that the escaping backslash is not itself escaped.  Comparisons of start and pos','line_number':202,'multiline':False]
['text':' are to keep us from reading beyond the beginning of the quoted string.','line_number':203,'multiline':False]
['text':'','line_number':204,'multiline':False]
['text':' previous char was backslash','line_number':205,'multiline':False]
['text':' char before backslash was not another','line_number':206,'multiline':False]
['text':' The quote we found was not preceded by an unescaped backslash; it is real','line_number':208,'multiline':False]
['text':' The quote we found was escaped with backslash, so it doesn't count','line_number':210,'multiline':False]
['text':' namespace','line_number':224,'multiline':False]
['text':' don't balance "use <dbname>" in case dbname contains special chars','line_number':231,'multiline':False]
['text':' Do not let unterminated strings enter multi-line mode','line_number':273,'multiline':False]
['text':' postfix op (++/--) can't be a dangling op','line_number':284,'multiline':False]
['text':' helpers','line_number':311,'multiline':False]
['text':' real methods','line_number':325,'multiline':False]
['text':' Grab the least significant bits of either the supplied argument or a random number from','line_number':347,'multiline':False]
['text':' SecureRandom.','line_number':348,'multiline':False]
['text':' Use secure random number generator to get the seed value that can be safely','line_number':354,'multiline':False]
['text':' represented as double.','line_number':355,'multiline':False]
['text':' The seed is representable as both an int64_t and a double, so that the value we return (as a','line_number':362,'multiline':False]
['text':' double) can be fed back in to JSSrand() to initialize the prng (as an int64_t).','line_number':363,'multiline':False]
['text':'*
 * This function computes a hash value for a document.
 * Specifically, this is the same hash function that is used to form a hashed index,
 * and thus used to generate shard keys for a collection.
 *
 * e.g.
 * > // For a given collection prepared like so:
 * > use mydb
 * > db.mycollection.createIndex({ x: "hashed" })
 * > sh.shardCollection("mydb.mycollection", { x: "hashed" })
 * > // And a sample object like so:
 * > var obj = { x: "Whatever key", y: 2, z: 10.0 }
 * > // The hashed value of the shard key can be acquired by passing in the shard key value:
 * > convertShardKeyToHashed("Whatever key")
 ','line_number':434,'multiline':True]
['text':'*
 * Generate a security token suitable for passing in an OpMsg payload token field.
 *
 * @param user object - { user: 'name', db: 'dbname', tenant: OID }
 * @param secret string - Secret to use for test signing
 * @return string - Compact serialized JWS on an OIDC token.
 ','line_number':457,'multiline':True]
['text':'*
 * Generate an unsigned security token which contains a tenant component.
 * @param object - { tenant: OID, expectPrefix: bool }
 * @return string - Unsigned compact serialized JWS on an OIDC token.
 ','line_number':480,'multiline':True]
['text':' Stats are like {replSetName: {hosts: [{ ... }, { ... }]}}.','line_number':517,'multiline':False]
['text':' Type-check arguments before performing any calculations.','line_number':574,'multiline':False]
['text':' 10.0 is used frequently in the rest of the function, so save it to a variable.','line_number':583,'multiline':False]
['text':' Early exit for zero, infinity and NaN cases.','line_number':587,'multiline':False]
['text':' isErrorAcceptable ','line_number':590,'multiline':True]
['text':' Return early if arguments are not the same order of magnitude.','line_number':592,'multiline':False]
['text':' Put the whole number behind the decimal point.','line_number':597,'multiline':False]
['text':' Disable move/copy because onError captures 'this' address.','line_number':623,'multiline':False]
['text':' Ignore return code: 'diff' returns non-zero when files differ, which we expect.','line_number':647,'multiline':False]
['text':'validateOnClose','line_number':682,'multiline':True]
['text':'*
 * This function is a light-weight BSON builder to support building an arbitrary BSON in shell.
 * This function is particularly useful for testing invalid BSON object which is impossible to be
 * constructed from JS shell environment.
 *
 * The field names and values in the `args` are in the order like: name1, value1, name2, value...
 *
 * args:
 *   "0": string; field name for the first field
 *   "1": any; value for the first field
 *   "2": string; field name for the second field
 *   "3": any; value for the second field
 *   "4": ...
 *
 * e.g.
 * > let bsonObj = _buildBsonObj("_id", 1, "a", 2, "foo", "bar");
 * > printjson(bsonObj)
 * { "_id" : 1, "a" : 2, "foo" : "bar" }
 ','line_number':716,'multiline':True]
['text':' next field name in numeric form','line_number':737,'multiline':False]
['text':' next pipe relative path','line_number':738,'multiline':False]
['text':' next pipe relative path','line_number':739,'multiline':False]
['text':'
 * The following code has been updated to remove unnecessary content and better comply
 * with MongoDB coding standards.  The original source code can be found at:
 * FNV 1a 64 bit: http://www.isthe.com/chongo/src/fnv/hash_64a.c
 ','line_number':758,'multiline':True]
['text':' start of buffer ','line_number':765,'multiline':True]
['text':' beyond end of buffer ','line_number':766,'multiline':True]
['text':' Need to define this method before JSFiles::utils is executed.','line_number':823,'multiline':False]
['text':' alias','line_number':839,'multiline':False]
['text':' The printf and scanf functions provide thread safe i/o.','line_number':857,'multiline':False]
['text':' If apiStrict is set override it, whatsmyuri is not in the Stable API.','line_number':873,'multiline':False]
['text':' We don't have permissions (or the call didn't succeed) - go to the next connection.','line_number':903,'multiline':False]
['text':' For sharded clusters, `client_s` is used instead and `client` is not present.','line_number':908,'multiline':False]
['text':' mongod currentOp client','line_number':911,'multiline':False]
['text':' mongos currentOp client','line_number':921,'multiline':False]
['text':' Internal operation, like TTL index.','line_number':931,'multiline':False]
['text':' namespace shell_utils','line_number':970,'multiline':False]
['text':' namespace mongo','line_number':971,'multiline':False]
