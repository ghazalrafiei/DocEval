['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' IWYU pragma: no_include "cxxabi.h"','line_number':36,'multiline':False]
['text':' IWYU pragma: no_include "ext/alloc_traits.h"','line_number':37,'multiline':False]
['text':' When specified to the connection's 'runCommand' call indicates that the command should be','line_number':92,'multiline':False]
['text':' executed with no query options. This is only meaningful if a command is run via OP_QUERY against','line_number':93,'multiline':False]
['text':' '$cmd'.','line_number':94,'multiline':False]
['text':' Transaction could be aborted already','line_number':213,'multiline':False]
['text':'*
 * Issues the query 'findCommand' against 'conn' using read commands. Returns the size of the result
 * set returned by the query.
 *
 * If 'findCommand' has the 'wantMore' flag set to false and the 'limit' option set to 1LL, then the
 * caller may optionally specify a pointer to an object in 'objOut', which will be filled in with
 * the single object in the query result set (or the empty object, if the result set is empty). If
 * 'findCommand' doesn't have these options set, then nullptr must be passed for 'objOut'.
 *
 * On error, throws a AssertionException.
 ','line_number':219,'multiline':True]
['text':' read command with txnNumber implies performing reads in a','line_number':247,'multiline':False]
['text':' multi-statement transaction','line_number':248,'multiline':False]
['text':' Since this is a "single batch" query, we can simply grab the first item in the result set','line_number':261,'multiline':False]
['text':' and return here.','line_number':262,'multiline':False]
['text':' read command with txnNumber implies performing reads in a','line_number':281,'multiline':False]
['text':' multi-statement transaction','line_number':282,'multiline':False]
['text':'*
 * Queries the oplog for the latest cluster time / timestamp and returns it.
 ','line_number':297,'multiline':True]
['text':' Sort by descending 'ts' in the query to the oplog collection. The first entry will have the','line_number':301,'multiline':False]
['text':' latest cluster time.','line_number':302,'multiline':False]
['text':'*
 * Gets the latest timestamp/clusterTime T from the oplog collection, then returns a cluster time
 * 'numSecondsInThePast' earlier than that time T.
 *
 * 'numSecondsInThePast' must be greater than or equal to 0.
 ','line_number':328,'multiline':True]
['text':' namespace','line_number':340,'multiline':False]
['text':' save an owned copy of the BSON obj','line_number':401,'multiline':False]
['text':' type needs to be command','line_number':416,'multiline':False]
['text':' the name should be switched to projection','line_number':467,'multiline':False]
['text':' also, but that will break things','line_number':468,'multiline':False]
['text':' Mongo-perf wants to pass the write concern into all calls. It is only used for','line_number':607,'multiline':False]
['text':' update, insert, delete','line_number':608,'multiline':False]
['text':' did args include the "parallel" field?','line_number':695,'multiline':False]
['text':' did args include the "seconds" field?','line_number':696,'multiline':False]
['text':' iterate through the objects in ops','line_number':792,'multiline':False]
['text':' create an BenchRunOp per','line_number':793,'multiline':False]
['text':' put in ops vector.','line_number':794,'multiline':False]
['text':' actual parallism of benchRunOnce(); needed to pass assert checks','line_number':808,'multiline':False]
['text':' namespace','line_number':910,'multiline':False]
['text':' We explicitly call join() on the started thread to ensure','line_number':920,'multiline':False]
['text':' that any thread-local variables have been destructed','line_number':921,'multiline':False]
['text':' before returning from BenchRunWorker's destructor.','line_number':922,'multiline':False]
['text':' benchRunOnce stops after one execution instead of based on _isShuttingDown flag, so this','line_number':936,'multiline':False]
['text':' always returns true in the benchRunOne case.','line_number':937,'multiline':False]
['text':'*
 * Executes the workload on a worker thread. This is the main routine for benchRunXXX() benchmarks.
 ','line_number':945,'multiline':True]
['text':' Executing the transaction with a new txnNumber would end the previous transaction','line_number':973,'multiline':False]
['text':' automatically, but we have to end the last transaction manually with an abort command.','line_number':974,'multiline':False]
['text':' index of next operation to run','line_number':981,'multiline':False]
['text':' in the benchRunOnce case each worker runs its own op (just once)','line_number':983,'multiline':False]
['text':' op to run on this iteration','line_number':986,'multiline':False]
['text':' Index of op to run on the next iteration. benchRun() workers round-robin through all','line_number':988,'multiline':False]
['text':' the ops until the 'seconds' timer checked by the shouldStop() loop condition expires.','line_number':989,'multiline':False]
['text':' In constrast, benchRunOnce() only runs one op and will never iterate the containing','line_number':990,'multiline':False]
['text':' do loop, because shouldStop() always returns true for that variant, so the update to','line_number':991,'multiline':False]
['text':' 'opIdx' here has no impact on benchRunOnce().','line_number':992,'multiline':False]
['text':' If we're just ignoring things','line_number':1012,'multiline':False]
['text':' If we're just watching things','line_number':1014,'multiline':False]
['text':' perform a tight multiplication loop. The','line_number':1071,'multiline':False]
['text':' performance of this loop should be','line_number':1072,'multiline':False]
['text':' predictable, and this operation can be used','line_number':1073,'multiline':False]
['text':' to test underlying system variability.','line_number':1074,'multiline':False]
['text':' volatile used to ensure that loop is not optimized away','line_number':1076,'multiline':False]
['text':' NOLINT','line_number':1077,'multiline':False]
['text':' The command returned a cursor, so iterate all results.','line_number':1143,'multiline':False]
['text':' Just give the count to the check function.','line_number':1164,'multiline':False]
['text':' Get a random cluster time between the latest time and','line_number':1199,'multiline':False]
['text':' 'useAClusterTimeWithinPastSeconds' in the past.','line_number':1200,'multiline':False]
['text':' It is not possible to run a delta update directly from a client.','line_number':1275,'multiline':False]
['text':' Delta updates are only executed on secondaries as part of oplog','line_number':1276,'multiline':False]
['text':' application.','line_number':1277,'multiline':False]
['text':' It is not possible to run a transform update directly from a client.','line_number':1280,'multiline':False]
['text':' writeConcernObj ','line_number':1381,'multiline':True]
['text':' writeConcernObj ','line_number':1387,'multiline':True]
['text':' Count 1 for total ops. Successfully got through the try phrase','line_number':1399,'multiline':False]
['text':' Must authenticate to admin db in order to run serverStatus command','line_number':1436,'multiline':False]
['text':' Start the worker threads.','line_number':1441,'multiline':False]
['text':' Make a unique random seed for the worker.','line_number':1449,'multiline':False]
['text':' initial stats','line_number':1460,'multiline':False]
['text':' this can only fail if admin access was revoked since start of run','line_number':1475,'multiline':False]
['text':'*
 * benchRun( { ops : [] , host : XXX , db : XXXX , parallel : 5 , seconds : 5 }
 ','line_number':1568,'multiline':True]
['text':'*
 * This is a variant of BenchRunner::benchRunSync() that changes the following behaviors:
 *   1. It runs all the entries in 'ops[]' exactly once, whereas benchRunSync() runs them round-
 *      robin until the 'seconds' timer expires.
 *   2. It does these runs in parallel, whereas benchRunSync() runs them serially.
 *   3. It does not support the 'parallel' input because its parallelism is determined by the number
 *      of entries in 'ops[]', whereas benchRunSync() launches 'parallel' number of concurrent
 *      workers.
 *   4. It does not support the 'seconds' input because its workers stop after a single execution
 *      instead of a time limit.
 *
 * Thus this method will launch a concurrent worker per entry in 'ops[]' and give each worker only
 * one entry to execute once, whereas benchRunSync will launch 'parallel' concurrent workers and
 * give each worker all the entries to be executed round-robin until the 'seconds' timer expires.
 ','line_number':1582,'multiline':True]
['text':' Add a config field to indicate this variant.','line_number':1601,'multiline':False]
['text':'*
 * benchRun( { ops : [] , host : XXX , db : XXXX , parallel : 5 , seconds : 5 }
 ','line_number':1610,'multiline':True]
['text':' Get new BenchRunner object','line_number':1617,'multiline':False]
['text':'*
 * benchRun( { ops : [] , host : XXX , db : XXXX , parallel : 5 , seconds : 5 }
 ','line_number':1624,'multiline':True]
['text':' Get old BenchRunner object','line_number':1630,'multiline':False]
['text':' namespace mongo','line_number':1638,'multiline':False]
