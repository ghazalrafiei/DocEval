['text':'*
 *    Copyright (C) 2019-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' IWYU pragma: keep','line_number':56,'multiline':False]
['text':' IWYU pragma: keep','line_number':65,'multiline':False]
['text':' IWYU pragma: keep','line_number':77,'multiline':False]
['text':' namespace','line_number':114,'multiline':False]
['text':' The encryptDecryptCommand frameStack requires a guard because  if encryptMarking or','line_number':159,'multiline':False]
['text':' decrypt payload throw an exception, the stack's destructor will fire. Because a stack's','line_number':160,'multiline':False]
['text':' variables are not guaranteed to be destroyed in any order, we need to add a guard','line_number':161,'multiline':False]
['text':' to ensure the stack is destroyed in order.','line_number':162,'multiline':False]
['text':' Append '$db' which shouldn't contain tenantid.','line_number':207,'multiline':False]
['text':' If encrypt request, append '$tenant' which contains tenantid.','line_number':209,'multiline':False]
['text':' extract type byte','line_number':231,'multiline':False]
['text':'*
 *
 * This function reads the data from the CDR and returns a copy
 * constructed and owned BSONObject.
 *
 ','line_number':312,'multiline':True]
['text':' The size here is to construct a new BSON document and validate the','line_number':328,'multiline':False]
['text':' total size of the object. The first four bytes is for the size of an','line_number':329,'multiline':False]
['text':' int32_t, then a space for the type of the first element, then the space','line_number':330,'multiline':False]
['text':' for the value string and the the 0x00 terminated field name, then the','line_number':331,'multiline':False]
['text':' size of the actual data, then the last byte for the end document character,','line_number':332,'multiline':False]
['text':' also 0x00.','line_number':333,'multiline':False]
['text':' Input Validation','line_number':418,'multiline':False]
['text':' Extract the UUID from the callArgs','line_number':440,'multiline':False]
['text':' If it is a JS Object, then we can extract all the information by simply calling','line_number':455,'multiline':False]
['text':' ValueWriter.toBSON and setting the type bit, which is what is happening below.','line_number':456,'multiline':False]
['text':' If it is one of our Mongo defined types, then we have to use the ValueWriter','line_number':489,'multiline':False]
['text':' writeThis function, which takes in a set of WriteFieldRecursionFrames (setting','line_number':490,'multiline':False]
['text':' a limit on how many times we can recursively dig into an object's nested','line_number':491,'multiline':False]
['text':' structure) and writes the value out to a BSONObjBuilder. We can then extract','line_number':492,'multiline':False]
['text':' that information from the object by building it and pulling out the first','line_number':493,'multiline':False]
['text':' element, which is the object we are trying to get.','line_number':494,'multiline':False]
['text':' Prepare the return value','line_number':546,'multiline':False]
['text':'*
 * Constructs a collection object from a namespace, passed in to the nsString parameter.
 * The client is the connection to a database in which you want to create the collection.
 * The collection parameter gets set to a javascript collection object.
 ','line_number':870,'multiline':True]
['text':' The collection object requires a database object to be constructed as well.','line_number':888,'multiline':False]
['text':' The parameters required to start FLE on the shell. The current connection is passed in as a','line_number':908,'multiline':False]
['text':' parameter to create the keyvault collection object if one is not provided.','line_number':909,'multiline':False]
['text':' IDL does not perform a deep copy of BSONObjs when parsing, so we must get an','line_number':936,'multiline':False]
['text':' owned copy of the schemaMap.','line_number':937,'multiline':False]
['text':' This logic tries to extract the client from the args. If the connection object is defined','line_number':942,'multiline':False]
['text':' in the ClientSideFLEOptions struct, then the client will extract it and set itself to be','line_number':943,'multiline':False]
['text':' that. Else, the client will default to the implicit connection.','line_number':944,'multiline':False]
['text':' namespace','line_number':990,'multiline':False]
['text':' namespace mongo','line_number':991,'multiline':False]
