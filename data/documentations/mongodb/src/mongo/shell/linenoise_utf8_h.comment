['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' UTF-8 octet','line_number':36,'multiline':False]
['text':' Unicode code point','line_number':37,'multiline':False]
['text':' Error bits (or-ed together) returned from utf8toUChar32string','line_number':39,'multiline':False]
['text':'','line_number':40,'multiline':False]
['text':'*
 * Convert a null terminated UTF-8 std::string from UTF-8 and store it in a UChar32 destination
 * buffer Always null terminates the destination std::string if at least one character position is
 * available Errors in the UTF-8 encoding will be handled in two ways: the erroneous characters will
 * be converted to the Unicode error character U+FFFD and flag bits will be set in the
 * conversionErrorCode int.
 *
 * @param uchar32output                 Destination UChar32 buffer
 * @param utf8input                     Source UTF-8 string
 * @param outputBufferSizeInCharacters  Destination buffer size in characters
 * @param outputUnicodeCharacterCount   Number of UChar32 characters placed in output buffer
 * @param conversionErrorCode           Flag bits from enum BadUTF8, or zero if no error
 ','line_number':43,'multiline':True]
['text':'*
 * Copy a null terminated UChar32 std::string to a UChar32 destination buffer
 * Always null terminates the destination std::string if at least one character position is
 * available
 *
 * @param dest32                    Destination UChar32 buffer
 * @param source32                  Source UChar32 string
 * @param destLengthInCharacters    Destination buffer length in characters
 ','line_number':62,'multiline':True]
['text':'*
 * Convert a specified number of UChar32 characters from a possibly null terminated UChar32
 * std::string to UTF-8 and store it in a UChar8 destination buffer
 * Always null terminates the destination std::string if at least one character position is
 * available
 *
 * @param dest8                     Destination UChar8 buffer
 * @param source32                  Source UChar32 string
 * @param outputBufferSizeInBytes   Destination buffer size in bytes
 * @param charCount                 Maximum number of UChar32 characters to process
 * @return                          Count of bytes written to output buffer, not including null
 *                                  terminator
 ','line_number':73,'multiline':True]
['text':'*
 * Convert a null terminated UChar32 std::string to UTF-8 and store it in a UChar8 destination
 * buffer
 * Always null terminates the destination std::string if at least one character position is
 * available
 *
 * @param dest8                     Destination UChar8 buffer
 * @param source32                  Source UChar32 string
 * @param outputBufferSizeInBytes   Destination buffer size in bytes
 * @return                          Count of bytes written to output buffer, not including null
 *                                  terminator
 ','line_number':91,'multiline':True]
['text':'*
 * Count characters (i.e. Unicode code points, array elements) in a null terminated UChar32 string
 *
 * @param str32     Source UChar32 string
 * @return          std::string length in characters
 ','line_number':105,'multiline':True]
['text':'*
 * Compare two UChar32 null-terminated strings with length parameter
 *
 * @param first32   First std::string to compare
 * @param second32  Second std::string to compare
 * @param length    Maximum number of characters to compare
 * @return          Negative if first < second, positive if first > second, zero if equal
 ','line_number':113,'multiline':True]
['text':'*
 * Internally convert an array of UChar32 characters of specified length to UTF-8 and write it to
 * fileHandle
 *
 * @param fileHandle                File handle to write to
 * @param string32                  Source UChar32 character array, may not be null terminated
 * @param sourceLengthInCharacters  Number of source characters to convert and write
 * @return                          Number of bytes written, -1 on error
 ','line_number':123,'multiline':True]
['text':'*
 * Template and classes for UChar8 and UChar32 strings
 ','line_number':134,'multiline':True]
['text':' inherited','line_number':139,'multiline':False]
['text':' copies like std::string','line_number':143,'multiline':False]
['text':' in units of char_t without nul','line_number':181,'multiline':False]
['text':' size of _str buffer including nul','line_number':182,'multiline':False]
['text':' number of codepoints','line_number':183,'multiline':False]
['text':' defined after utf32String','line_number':198,'multiline':False]
['text':' worst case ASCII','line_number':245,'multiline':False]
['text':' namespace linenoise_utf8','line_number':261,'multiline':False]
