['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 * DataBuilder provides a reallocing buffer underneath the DataRangeCursor API.
 * This allows consumers to write() or writeAndAdvance() without first ensuring
 * they have the correct amount of space pre-allocated.
 *
 * The underlying strategy is optimistic, specifically it blindly tries all
 * writes once. For any failure, we then call the store api with a null output
 * ptr, which returns what space would have been used. That amount is used to
 * guide growth in the buffer, after which we attempt the write again.
 ','line_number':48,'multiline':True]
['text':'*
     * The dtor type used in the unique_ptr which holds the buffer
     ','line_number':59,'multiline':True]
['text':'*
     * Construct a DataBuilder with a specified initial capacity
     ','line_number':73,'multiline':True]
['text':'*
     * Write a value at an offset into the buffer.
     ','line_number':99,'multiline':True]
['text':'*
     * Write a value and advance to the byte past the last byte written.
     ','line_number':116,'multiline':True]
['text':' TODO: We should offer:','line_number':123,'multiline':False]
['text':'','line_number':124,'multiline':False]
['text':' 1. A way to check if the type has a constant size','line_number':125,'multiline':False]
['text':' 2. A way to perform a runtime write which can fail with "too little','line_number':126,'multiline':False]
['text':'    size" without status generation','line_number':127,'multiline':False]
['text':'*
     * Get a writable cursor that covers the range of the currently written
     * bytes
     ','line_number':138,'multiline':True]
['text':'*
     * Get a read-only cursor that covers the range of the currently written
     * bytes
     ','line_number':146,'multiline':True]
['text':'*
     * The size of the currently written region
     ','line_number':154,'multiline':True]
['text':'*
     * The total size of the buffer, including reserved but not written bytes.
     ','line_number':165,'multiline':True]
['text':'*
     * Resize the buffer to exactly newSize bytes. This can shrink the range or
     * grow it.
     ','line_number':172,'multiline':True]
['text':' If we downsized, truncate. If we upsized keep the old size','line_number':193,'multiline':False]
['text':'*
     * Reserve needed bytes. If there are already enough bytes in the buffer,
     * it will not be changed. If there aren't enough bytes, we'll grow the
     * buffer to meet the requirement by expanding along a 1.5^n curve.
     ','line_number':197,'multiline':True]
['text':' growth factor of about 1.5','line_number':208,'multiline':False]
['text':'*
     * Clear the buffer. This retains the existing buffer, merely resetting the
     * internal data pointers.
     ','line_number':218,'multiline':True]
['text':'*
     * Release the buffer. After this the builder is left in the default
     * constructed state.
     ','line_number':226,'multiline':True]
['text':'*
     * Returns the serialized size of a T. We verify this by using the
     * DataType::store invocation without an output pointer, which asks for the
     * number of bytes that would have been written.
     ','line_number':239,'multiline':True]
['text':'*
     * If any writing methods are called on a default constructed or moved from
     * DataBuilder, we use this method to initialize the buffer.
     ','line_number':253,'multiline':True]
['text':' namespace mongo','line_number':268,'multiline':False]
