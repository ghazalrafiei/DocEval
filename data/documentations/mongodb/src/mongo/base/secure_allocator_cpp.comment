['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' IWYU pragma: keep','line_number':51,'multiline':False]
['text':' IWYU pragma: keep','line_number':58,'multiline':False]
['text':'*
 * NOTE(jcarey): Why not new/delete?
 *
 * As a general rule, mlock/virtuallock lack any kind of recursive semantics
 * (they free any locks on the underlying page if called once). While some
 * platforms do offer those semantics, they're not available globally, so we
 * have to flow all allocations through page based allocations.
 ','line_number':72,'multiline':True]
['text':'*
 * Enable a privilege in the current process.
 ','line_number':82,'multiline':True]
['text':' Get the access token for the current process.','line_number':93,'multiline':False]
['text':'*
 * Lock to ensure calls to grow our working set size are serialized.
 *
 * The lock is needed since we are doing a two step process of querying the currently working set
 * size, and then raising the working set. This is the same reason that "i++" has race conditions
 * across multiple threads.
 ','line_number':122,'multiline':True]
['text':' NOLINT','line_number':129,'multiline':False]
['text':'*
 * There is a minimum gap between the minimum working set size and maximum working set size.
 * On Windows 2008 R2, it is 0x9000 bytes. On Windows 10, 0x7000 bytes.
 ','line_number':131,'multiline':True]
['text':'*
 * Grow the minimum working set size of the process to the specified size.
 ','line_number':137,'multiline':True]
['text':' Since allocation request is aligned to page size, we can just add it to the current working','line_number':151,'multiline':False]
['text':' set size.','line_number':152,'multiline':False]
['text':' Note: The default dwMaximumWorkingSetSize for a process is 345 pages on a system with 4k','line_number':153,'multiline':False]
['text':' pages (i.e x64). This is not the same as the current working set of the process. It usually','line_number':154,'multiline':False]
['text':' far lower. The min value is ignored by Windows until the machine is starved for memory or','line_number':155,'multiline':False]
['text':' MongoDB wants to lock pages. The max value is treated as a target working set goal for a','line_number':156,'multiline':False]
['text':' process that Windows should meet. This means that if MongoDB sets the number too low, Windows','line_number':157,'multiline':False]
['text':' will flush the process out to the page file which will cause the process to freeze while this','line_number':158,'multiline':False]
['text':' occurs. MongoDB will set the dwMaximumWorkingSetSize to 90% of physical RAM. On high memory','line_number':159,'multiline':False]
['text':' systems (> 128GB0), this may be too conservative so use 5GB as a threshold.','line_number':160,'multiline':False]
['text':' 5 GB ','line_number':165,'multiline':True]
['text':' Increase the working set size minimum to the new lower bound.','line_number':167,'multiline':False]
['text':' Flags:','line_number':179,'multiline':False]
['text':'','line_number':180,'multiline':False]
['text':' MEM_COMMIT - allocates the memory charges and zeros the underlying','line_number':181,'multiline':False]
['text':'              memory','line_number':182,'multiline':False]
['text':' MEM_RESERVE - Reserves space in the process's virtual address space','line_number':183,'multiline':False]
['text':'','line_number':184,'multiline':False]
['text':' The two flags together give us bytes that are attached to the process','line_number':185,'multiline':False]
['text':' that we can actually write to.','line_number':186,'multiline':False]
['text':'','line_number':187,'multiline':False]
['text':' PAGE_READWRITE - allows read/write access to the page','line_number':188,'multiline':False]
['text':' Try to grow the working set if we have hit our quota.','line_number':199,'multiline':False]
['text':' VirtualFree needs to take 0 as the size parameter for MEM_RELEASE','line_number':221,'multiline':False]
['text':' (that's how the api works).','line_number':222,'multiline':False]
['text':' See https://github.com/libressl-portable/portable/issues/24 for the table','line_number':231,'multiline':False]
['text':' that suggests this approach. This assumes that MAP_ANONYMOUS and MAP_ANON are','line_number':232,'multiline':False]
['text':' macro definitions, but that seems plausible on all platforms we care about.','line_number':233,'multiline':False]
['text':' Flags:','line_number':248,'multiline':False]
['text':'','line_number':249,'multiline':False]
['text':' PROT_READ | PROT_WRITE - allows read write access to the page','line_number':250,'multiline':False]
['text':'','line_number':251,'multiline':False]
['text':' MAP_PRIVATE - Ensure that the mapping is copy-on-write. Otherwise writes','line_number':252,'multiline':False]
['text':'               made in this process can be seen in children.','line_number':253,'multiline':False]
['text':'','line_number':254,'multiline':False]
['text':' MAP_ANONYMOUS - The mapping is not backed by a file. fd must be -1 on','line_number':255,'multiline':False]
['text':'                 some platforms, offset is ignored (so 0).','line_number':256,'multiline':False]
['text':'','line_number':257,'multiline':False]
['text':' skipping flags like MAP_LOCKED and MAP_POPULATE as linux-isms','line_number':258,'multiline':False]
['text':' We deliberately ignore the return value since if the Linux version is < 3.4, madvise','line_number':278,'multiline':False]
['text':' will fail since MADV_DONTDUMP is not supported.','line_number':279,'multiline':False]
['text':' See comment above madvise in systemAllocate().','line_number':288,'multiline':False]
['text':'*
 * Each page represent one call to mmap+mlock / VirtualAlloc+VirtualLock on construction and will
 * match with an equivalent unlock and unmap on destruction.  Pages are rounded up to the nearest
 * page size and allocate returns aligned pointers.
 ','line_number':309,'multiline':True]
['text':'*
     * Allocates an aligned pointer of given size from the locked page we have a pointer to.
     *
     * Returns null if the request can't be satisifed.
     ','line_number':332,'multiline':True]
['text':' We'll make a new allocation if this one doesn't have enough room','line_number':346,'multiline':False]
['text':' Start of the allocation','line_number':351,'multiline':False]
['text':' Start of unallocated bytes','line_number':352,'multiline':False]
['text':' Total size','line_number':353,'multiline':False]
['text':' Remaining bytes','line_number':354,'multiline':False]
['text':'*
 * To save on allocations, we try to serve multiple requests out of the same
 * mlocked page where possible. We do this by invoking the system allocator in
 * multiples of a full page, and keep the last page around, giving out pointers
 * from that page if its possible to do so.  We also keep an unordered_map of
 * all the allocations we've handed out, which hold shared_ptrs that get rid of
 * pages when we're not using them anymore.
 ','line_number':358,'multiline':True]
['text':'*
     * Deallocates a secure allocation.
     * We zero memory before derefing the associated allocation.
     ','line_number':370,'multiline':True]
['text':' NOLINT','line_number':377,'multiline':False]
['text':' Enable the increase working set size privilege in our access token.','line_number':385,'multiline':False]
['text':' namespace','line_number':421,'multiline':False]
['text':' namespace mongo::secure_allocator_details','line_number':431,'multiline':False]
