['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' NOLINT','line_number':39,'multiline':False]
['text':' Set to 1 if XCode supports `std::string_view` c++20 features.','line_number':50,'multiline':False]
['text':'*
 * A StringData object refers to an array of `char` without owning it.
 * The most common usage is as a function argument.
 *
 * Implements the API of `std::string_view`, and is implemented
 * by forwarding member functions to the internal `string_view` member.
 * Ultimately this class will be removed and we'll just use `std::string_view`
 * directly, so we must restrict it to the feature set of `std::string_view`
 * supported by all supported platforms. They are not all the same.
 *
 * The iterator is not always a raw pointer. On Windows, it is a class,
 * which enables useful integrity checks in debug builds.
 *
 * XCode is basically implementing at the C++17 level. There's no `operator<=>`,
 * no range constructors, and no `contains` member.
 *
 * The string data to which StringData refers must outlive it.
 *
 * StringData is not null-terminated.
 *
 * See https://en.cppreference.com/w/cpp/string/basic_string_view.
 ','line_number':53,'multiline':True]
['text':' C++23, but harmless','line_number':93,'multiline':False]
['text':'*
     * Used where string length is not known in advance.
     * 'c' must be null or point to a null-terminated string.
     ','line_number':95,'multiline':True]
['text':'*
     * Constructs a StringData with an explicit length. 'c' must
     * either be nullptr (in which case len must be zero), or be a
     * pointer into a character array. The StringData will refer to
     * the first 'len' characters starting at 'c'. The range of
     * characters in the half-open interval `[c, c + len)` must be valid.
     ','line_number':104,'multiline':True]
['text':'*
     * Constructs a StringData with iterator range [first, last). `first` points to the beginning of
     * the string. `last` points to the position past the end of the string.
     *
     * We template the second parameter to ensure if StringData is called with literal 0 in the
     * second parameter, the (const char*, size_t) constructor is chosen instead.
     *
     * `std::string_view` already does advanced concepts checks on these arguments, so we
     * use `std::is_constructible` to just accept whatever `std::string_view` accepts.
     ','line_number':117,'multiline':True]
['text':' MONGO_STRING_DATA_CXX20','line_number':133,'multiline':False]
['text':'','line_number':143,'multiline':False]
['text':' iterators','line_number':144,'multiline':False]
['text':'','line_number':145,'multiline':False]
['text':'','line_number':173,'multiline':False]
['text':' accessors','line_number':174,'multiline':False]
['text':'','line_number':175,'multiline':False]
['text':'','line_number':195,'multiline':False]
['text':' Capacity','line_number':196,'multiline':False]
['text':'','line_number':197,'multiline':False]
['text':'','line_number':212,'multiline':False]
['text':' Modifiers','line_number':213,'multiline':False]
['text':'','line_number':214,'multiline':False]
['text':'* Moves the front of the view forward by n characters. Requires n < size. ','line_number':216,'multiline':True]
['text':'* Moves the end of the view back by n characters. Requires n < size. ','line_number':221,'multiline':True]
['text':'','line_number':230,'multiline':False]
['text':' Operations','line_number':231,'multiline':False]
['text':'','line_number':232,'multiline':False]
['text':'*
     * Returns <0, 0, or >0 if 'this' is less, equal, or greater than 'v' in
     * lexicographical order.
     ','line_number':242,'multiline':True]
['text':'* True if 'prefix' is a substring anchored at begin. ','line_number':266,'multiline':True]
['text':'* True if 'suffix' is a substring anchored at end. ','line_number':277,'multiline':True]
['text':' MONGO_STRING_DATA_CXX20','line_number':298,'multiline':False]
['text':'* The "find" family of functions have identical overload sets. ','line_number':300,'multiline':True]
['text':'','line_number':322,'multiline':False]
['text':' MongoDB extras','line_number':323,'multiline':False]
['text':'','line_number':324,'multiline':False]
['text':'* Uses tolower, and therefore does not handle some languages correctly. ','line_number':342,'multiline':True]
['text':' !MONGO_STRING_DATA_CXX20','line_number':367,'multiline':False]
['text':' !MONGO_STRING_DATA_CXX20','line_number':386,'multiline':False]
['text':'* Not supported by `std::string_view`. ','line_number':394,'multiline':True]
['text':'* Not supported by `std::string_view`. ','line_number':398,'multiline':True]
['text':'*
 * Makes a constexpr StringData from a user defined literal (e.g. "hello"_sd).
 * This allows for constexpr creation of `StringData` that are known at compile time.
 ','line_number':405,'multiline':True]
['text':' namespace literals','line_number':412,'multiline':False]
['text':' namespace mongo','line_number':414,'multiline':False]
['text':' namespace fmt','line_number':428,'multiline':False]
