['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' These testing helper classes model various kinds of class which should be compatible with','line_number':50,'multiline':False]
['text':' `mongo::clonable_ptr`.  The basic use cases satisfied by each class are described in each class's','line_number':51,'multiline':False]
['text':' documentation.','line_number':52,'multiline':False]
['text':' This class models the `Clonable` concept, and is used to test the simple case of `clonable_ptr`.','line_number':54,'multiline':False]
['text':' This class provides a member structure which models `CloneFactory<AltClonableTest>`.  The member','line_number':67,'multiline':False]
['text':' structure is available under the expected member name of `clone_factory_type`.  The','line_number':68,'multiline':False]
['text':' `CloneFactory` is stateless.','line_number':69,'multiline':False]
['text':' This class requires a companion cloning function models `CloneFactory<Alt2ClonableTest>`.  There','line_number':84,'multiline':False]
['text':' is an attendant specialization of the `mongo::clonable_traits` metafunction to provide the clone','line_number':85,'multiline':False]
['text':' factory for this type.  That `CloneFactory` is stateless.','line_number':86,'multiline':False]
['text':' namespace','line_number':93,'multiline':False]
['text':' This specialization of the `mongo::clonable_traits` metafunction provides a model of a stateless','line_number':96,'multiline':False]
['text':' `CloneFactory<Alt2ClonableTest>`','line_number':97,'multiline':False]
['text':' namespace mongo','line_number':106,'multiline':False]
['text':' This class uses a stateful cloning function provided by the `getCloningFunction` static member.','line_number':109,'multiline':False]
['text':' This stateful `CloneFactory<FunctorClonable>` must be passed to constructors of the','line_number':110,'multiline':False]
['text':' `cloning_ptr`.','line_number':111,'multiline':False]
['text':' This class uses a stateful cloning function provided by the `getCloningFunction` static member.','line_number':130,'multiline':False]
['text':' This stateful `CloneFactory<FunctorWithDynamicStateClonable>` must be passed to constructors of','line_number':131,'multiline':False]
['text':' the `cloning_ptr`.  The `CloneFactory` for this type dynamically updates its internal state.','line_number':132,'multiline':False]
['text':' This is used to test cloning of objects that have dynamically changing clone factories.','line_number':133,'multiline':False]
['text':' This class models `Clonable`, with a return from clone which is','line_number':157,'multiline':False]
['text':' `Constructible<std::unique_ptr<RawPointerClonable>>` but isn't','line_number':158,'multiline':False]
['text':' `std::unique_ptr<RawPointerClonable>`.  This is used to test that the `clonable_ptr` class does','line_number':159,'multiline':False]
['text':' not expect `RawPointerClonable::clone() const` to return a model of','line_number':160,'multiline':False]
['text':' `UniquePtr<RawPointerClonable>`','line_number':161,'multiline':False]
['text':' This class models `Clonable`, with a return from clone which is','line_number':169,'multiline':False]
['text':' `Constructible<std::unique_ptr<UniquePtrClonable>>` because it is','line_number':170,'multiline':False]
['text':' `std::unique_ptr<UniquePtrClonable>`.  This is used to test that the `clonable_ptr` class can','line_number':171,'multiline':False]
['text':' use a `UniquePtrClonable::clone() const` that returns a model of','line_number':172,'multiline':False]
['text':' `UniquePtr<UniquePtrClonable>`','line_number':173,'multiline':False]
['text':' TODO: Either add a compressed pair type for optimization, or wait for MSVC to get this feature by','line_number':182,'multiline':False]
['text':'       default.  MSVC doesn't make its tuple compressed, which causes this test to fail on MSVC.','line_number':183,'multiline':False]
['text':' These tests check that all expected valid syntactic forms of use for the','line_number':242,'multiline':False]
['text':' `mongo::clonable_ptr<Clonable>` are valid.  These tests assert nothing but provide a single','line_number':243,'multiline':False]
['text':' unified place to check the syntax of this component.  Build failures in these parts indicate that','line_number':244,'multiline':False]
['text':' a change to the component has broken an expected valid syntactic usage.  Any expected valid usage','line_number':245,'multiline':False]
['text':' which is not in this list should be added.','line_number':246,'multiline':False]
['text':' Test default construction','line_number':250,'multiline':False]
['text':' Test construction from a nullptr','line_number':253,'multiline':False]
['text':' Test construction from a Clonable pointer.','line_number':256,'multiline':False]
['text':' Test move construction.','line_number':262,'multiline':False]
['text':' Test copy construction.','line_number':265,'multiline':False]
['text':' Test move assignment.','line_number':271,'multiline':False]
['text':' Test copy assignment.','line_number':277,'multiline':False]
['text':' Test unique pointer construction','line_number':284,'multiline':False]
['text':' Test unique pointer construction (conversion)','line_number':287,'multiline':False]
['text':' Test non-conversion pointer construction','line_number':294,'multiline':False]
['text':' Test conversion unique pointer construction','line_number':297,'multiline':False]
['text':' Tests that syntactic forms that require augmented construction are proper','line_number':304,'multiline':False]
['text':' Test default construction','line_number':307,'multiline':False]
['text':' Test Clone Factory construction','line_number':313,'multiline':False]
['text':' TODO: Revist this when MSVC's enable-if and deletion on ctors works.','line_number':316,'multiline':False]
['text':' Test non-construction from a nullptr','line_number':318,'multiline':False]
['text':' Test construction from a nullptr with factory','line_number':325,'multiline':False]
['text':' TODO: Revist this when MSVC's enable-if and deletion on ctors works.','line_number':328,'multiline':False]
['text':' Test construction from a raw Clonable pointer.','line_number':330,'multiline':False]
['text':' Test initialization of a raw Clonable pointer with factory, using reset.','line_number':338,'multiline':False]
['text':' Test move construction.','line_number':345,'multiline':False]
['text':' Test copy construction.','line_number':351,'multiline':False]
['text':' Test augmented copy construction.','line_number':357,'multiline':False]
['text':' Test move assignment.','line_number':364,'multiline':False]
['text':' Test copy assignment.','line_number':370,'multiline':False]
['text':' Test unique pointer construction','line_number':377,'multiline':False]
['text':' Test augmented unique pointer construction','line_number':383,'multiline':False]
['text':' Test non-conversion pointer construction','line_number':389,'multiline':False]
['text':' Test non-conversion from factory','line_number':395,'multiline':False]
['text':' Test conversion unique pointer construction','line_number':401,'multiline':False]
['text':' Test `.get()` functionality:','line_number':412,'multiline':False]
['text':' Test `->` functionality','line_number':418,'multiline':False]
['text':' We don't actually want to call the dtor, but we want the compiler to check that we','line_number':420,'multiline':False]
['text':' have.','line_number':421,'multiline':False]
['text':' Test `*` functionality','line_number':427,'multiline':False]
['text':' Test reset functionality','line_number':431,'multiline':False]
['text':' Test equality expressions','line_number':446,'multiline':False]
['text':' Test inequality expressions','line_number':459,'multiline':False]
['text':' namespace SyntaxTests','line_number':472,'multiline':False]
['text':' Do not default construct the object','line_number':553,'multiline':False]
['text':' Do not make unnecessary copies of the object from ptr','line_number':560,'multiline':False]
['text':' Do not make unnecessary copies of the object from unique_ptr','line_number':567,'multiline':False]
['text':' Two separate constructions are unlinked','line_number':579,'multiline':False]
['text':' Two separate constructions can have opposite order and be unlinked','line_number':593,'multiline':False]
['text':' TODO: Bring in an "equivalence class for equality predicate testing" framework.','line_number':613,'multiline':False]
['text':' Equals and Not Equals need to be tested independently -- It is not valid to assume that equals','line_number':614,'multiline':False]
['text':' and not equals are correctly implemented as complimentary predicates.  Equality must be','line_number':615,'multiline':False]
['text':' reflexive, symmetric and transitive.  This requres several instances that all have the same','line_number':616,'multiline':False]
['text':' value.  Simply testing "2 == 2" and "3 != 2" is insufficient.  Every combination of position and','line_number':617,'multiline':False]
['text':' equality must be tested to come out as expected.','line_number':618,'multiline':False]
['text':'','line_number':619,'multiline':False]
['text':' Consider that with equality it is important to make sure that `a == b` has the same meaning as `b','line_number':620,'multiline':False]
['text':' == a`.  It is also necessary to check that `a == b` and `b == c` and `a == c` is true, when all','line_number':621,'multiline':False]
['text':' three are equal, and to do so in reverse: `b == a` and `c == b` and `c == a`.  Further, the','line_number':622,'multiline':False]
['text':' relationships above have to hold for multiple cases.  Similar cases need to be tested for','line_number':623,'multiline':False]
['text':' inequality.','line_number':624,'multiline':False]
['text':'','line_number':625,'multiline':False]
['text':' Further, equality is an incredibly important operation to test completely and thoroughly --','line_number':626,'multiline':False]
['text':' besides being a critical element in code using any value modeling type, it also is the keystone','line_number':627,'multiline':False]
['text':' in any testing schedule for a copyable and movable value type.  Almost all testing of behavior','line_number':628,'multiline':False]
['text':' relies upon being able to detect fundamental differences in value.  In order to provide this','line_number':629,'multiline':False]
['text':' correctly, we provide a full battery of tests for equality in all mathematically relevant','line_number':630,'multiline':False]
['text':' situations.  For this equality testing schedule to be correct, we require a mechanism to','line_number':631,'multiline':False]
['text':' initialize objects (and references to those objects) which have predictable value.  These','line_number':632,'multiline':False]
['text':' predictable values are then used to test known equality expressions for the correct evaluation.','line_number':633,'multiline':False]
['text':'','line_number':634,'multiline':False]
['text':' All other tests can then just use equality to verify that an object is in the desired state.','line_number':635,'multiline':False]
['text':' This greatly simplifies testing and also makes tests more precise.','line_number':636,'multiline':False]
['text':' Equals operator','line_number':655,'multiline':False]
['text':' Identity checks','line_number':657,'multiline':False]
['text':' Same value checks.  (Because unique pointers should never be the same value, we have to use','line_number':667,'multiline':False]
['text':' references.)','line_number':668,'multiline':False]
['text':' Different value checks:','line_number':700,'multiline':False]
['text':' Not Equals operator','line_number':725,'multiline':False]
['text':' Identity checks','line_number':727,'multiline':False]
['text':' Same value checks.  (Because unique pointers should never be the same value, we have to use','line_number':737,'multiline':False]
['text':' references.)','line_number':738,'multiline':False]
['text':' Different value checks:','line_number':770,'multiline':False]
['text':' TODO: all other forms of equality with other types (`std::nullptr_t` and `std::unique_ptr< T >`)','line_number':796,'multiline':False]
['text':' need testing still.','line_number':797,'multiline':False]
['text':' ClonableObject( const ClonableObject & ) { abort(); }','line_number':850,'multiline':False]
['text':' namespace BehaviorTests','line_number':976,'multiline':False]
['text':' namespace','line_number':977,'multiline':False]
