['text':'*
 *    Copyright (C) 2020-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' IWYU pragma: keep','line_number':35,'multiline':False]
['text':' collision','line_number':60,'multiline':False]
['text':' In the case of a cycle, copy the cycle node names into `*cycle`.','line_number':82,'multiline':False]
['text':' namespace','line_number':94,'multiline':False]
['text':' Topological sort via repeated depth-first traversal.','line_number':97,'multiline':False]
['text':' All nodes must have an initFn before running topSort, or we return BadValue.','line_number':98,'multiline':False]
['text':' Position of this in `elements`.','line_number':105,'multiline':False]
['text':' Swap the pointers in the `elements` vector that point to `a` and `b`.','line_number':111,'multiline':False]
['text':' Update their 'membership' data members to reflect the change.','line_number':112,'multiline':False]
['text':' Wire up all the child relationships by pointer rather than by string names.','line_number':130,'multiline':False]
['text':' Shuffle the inputs to improve test coverage of undeclared dependencies.','line_number':157,'multiline':False]
['text':' Initialize all the `membership` iterators. Must only happen after shuffle.','line_number':166,'multiline':False]
['text':' The `elements` sequence is divided into 3 regions:','line_number':170,'multiline':False]
['text':' elements:        [ sorted | unsorted | stack ]','line_number':171,'multiline':False]
['text':'          unsortedBegin => [          )  <= unsortedEnd','line_number':172,'multiline':False]
['text':' Each element of the stack region is a prerequisite of its neighbor to the right. Through','line_number':173,'multiline':False]
['text':' 'swapPositions' calls and boundary increments, elements will transition from unsorted to','line_number':174,'multiline':False]
['text':' stack to sorted. The unsorted region shinks to ultimately become an empty region on the','line_number':175,'multiline':False]
['text':' right. No other moves are permitted.','line_number':176,'multiline':False]
['text':' The stack is empty but there's more work to do. Grow the stack region to enclose','line_number':182,'multiline':False]
['text':' the rightmost unsorted element. Equivalent to pushing it.','line_number':183,'multiline':False]
['text':' O(1) cycle detection','line_number':193,'multiline':False]
['text':' unsorted push to stack','line_number':196,'multiline':False]
['text':' pop from stack to sorted','line_number':199,'multiline':False]
['text':' namespace mongo','line_number':215,'multiline':False]
