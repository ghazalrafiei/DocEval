['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' IWYU pragma: keep','line_number':40,'multiline':False]
['text':' Tests for Decimal128 constructors','line_number':47,'multiline':False]
['text':' High bits of a positive Decimal128 with exponent 1.','line_number':57,'multiline':False]
['text':' High bits of a negative Decimal128 with exponent 1.','line_number':59,'multiline':False]
['text':' Veriy that constructor does the same thing whether N is constexpr or not.','line_number':70,'multiline':False]
['text':' Undefined behavior in the constructor could cause divergence.','line_number':71,'multiline':False]
['text':' NOLINT','line_number':80,'multiline':False]
['text':' NOLINT','line_number':81,'multiline':False]
['text':' NOLINT','line_number':82,'multiline':False]
['text':' NOLINT','line_number':83,'multiline':False]
['text':' NOLINT','line_number':85,'multiline':False]
['text':' NOLINT','line_number':86,'multiline':False]
['text':' NOLINT','line_number':87,'multiline':False]
['text':' NOLINT','line_number':89,'multiline':False]
['text':' NOLINT','line_number':90,'multiline':False]
['text':' NOLINT','line_number':91,'multiline':False]
['text':' NOLINT','line_number':92,'multiline':False]
['text':' NOLINT','line_number':94,'multiline':False]
['text':' NOLINT','line_number':95,'multiline':False]
['text':' NOLINT','line_number':96,'multiline':False]
['text':' NOLINT','line_number':98,'multiline':False]
['text':' NOLINT','line_number':99,'multiline':False]
['text':' NOLINT','line_number':100,'multiline':False]
['text':' NOLINT','line_number':101,'multiline':False]
['text':' NOLINT','line_number':103,'multiline':False]
['text':' NOLINT','line_number':104,'multiline':False]
['text':' NOLINT','line_number':105,'multiline':False]
['text':' NOLINT','line_number':107,'multiline':False]
['text':' NOLINT','line_number':108,'multiline':False]
['text':' NOLINT','line_number':109,'multiline':False]
['text':' NOLINT','line_number':110,'multiline':False]
['text':' NOLINT','line_number':112,'multiline':False]
['text':' NOLINT','line_number':113,'multiline':False]
['text':' NOLINT','line_number':114,'multiline':False]
['text':' 15 nines','line_number':220,'multiline':False]
['text':' 15 nines','line_number':223,'multiline':False]
['text':' 0x303a000000000000 00000000000007da = +2.010','line_number':260,'multiline':False]
['text':' 0x7800000000000000 0000000000000000 = +Inf','line_number':271,'multiline':False]
['text':' 0xf800000000000000 0000000000000000 = -Inf','line_number':282,'multiline':False]
['text':' 0x7c00000000000000 0000000000000000 = NaN','line_number':293,'multiline':False]
['text':' 30 digits (100 bits)','line_number':319,'multiline':False]
['text':' It is possible to encode a significand with more than 34 decimal digits.','line_number':327,'multiline':False]
['text':' Conforming implementations should not generate these, but they must be treated as zero','line_number':328,'multiline':False]
['text':' when encountered. However, the exponent and sign still matter.','line_number':329,'multiline':False]
['text':' 0x6c10000000000000 0000000000000000 = non-canonical 0, all ignored bits clear','line_number':331,'multiline':False]
['text':' 0xec100000deadbeef 0123456789abcdef = non-canonical -0, random stuff in ignored bits','line_number':336,'multiline':False]
['text':' 0x6c11fffffffffffff ffffffffffffffff = non-canonical 0.000, all ignored bits set','line_number':342,'multiline':False]
['text':' Check extraction functions, they should treat this as the corresponding zero as well.','line_number':348,'multiline':False]
['text':' Check doing some arithmetic opations and number conversions','line_number':353,'multiline':False]
['text':' Tests for absolute value function','line_number':361,'multiline':False]
['text':' Tests for Decimal128 conversions','line_number':375,'multiline':False]
['text':' General test cases taken from http://speleotrove.com/decimal/daconvs.html#reftostr','line_number':845,'multiline':False]
['text':' Testing a NaN with a payload','line_number':896,'multiline':False]
['text':'payload','line_number':897,'multiline':True]
['text':' Tests for Decimal128 operations that use a signaling flag','line_number':917,'multiline':False]
['text':' TODO: The supported library does not set the kInexact flag even though','line_number':939,'multiline':False]
['text':' the documentation claims to for exact integer conversions.','line_number':940,'multiline':False]
['text':' ASSERT_TRUE(Decimal128::hasFlag(sigFlags, Decimal128::SignalingFlag::kInexact));','line_number':941,'multiline':False]
['text':' TODO: The supported library does not set the kInexact flag even though','line_number':950,'multiline':False]
['text':' the documentation claims to for exact integer conversions.','line_number':951,'multiline':False]
['text':' ASSERT_TRUE(Decimal128::hasFlag(sigFlags, Decimal128::SignalingFlag::kInexact));','line_number':952,'multiline':False]
['text':' Test Decimal128 special comparisons','line_number':994,'multiline':False]
['text':' Tests for Decimal128 math operations','line_number':1034,'multiline':False]
['text':' 'pBig' is the largest positive integer value where Decimal128 can represent pBig + 0.1','line_number':1247,'multiline':False]
['text':' without losing precision.','line_number':1248,'multiline':False]
['text':' 'epsilon' is the smallest positive value where Decimal128 can represent 1.0 + epsilon','line_number':1255,'multiline':False]
['text':' without losing precision.','line_number':1256,'multiline':False]
['text':' Tests for Decimal128 comparison operations','line_number':1383,'multiline':False]
['text':'*
 * Test data was generated using 64 bit versions of these functions, so we must test
 * approximate results.
 ','line_number':1582,'multiline':True]
['text':'*
 * A few tests need exact comparisons to test boundary conditions
 ','line_number':1591,'multiline':True]
['text':' The intel decimal library has a bug at -1 where it returns 0.','line_number':1649,'multiline':False]
['text':'','line_number':1650,'multiline':False]
['text':' uncomment this test when we update to the new intel decimal library.','line_number':1651,'multiline':False]
['text':' assertDecimal128ExactlyEqual(Decimal128("-1").acos(), Decimal128::kPi);','line_number':1652,'multiline':False]
['text':' Back to normal tests.','line_number':1655,'multiline':False]
['text':' namespace mongo','line_number':1869,'multiline':False]
