['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' The purpose of this class is to take in specially crafted types and generate','line_number':43,'multiline':False]
['text':' a wrapper which installs the type, along with any useful life cycle methods','line_number':44,'multiline':False]
['text':' and free functions that might be associated with it. The template magic in','line_number':45,'multiline':False]
['text':' here, along with some useful macros, hides a lot of the implementation','line_number':46,'multiline':False]
['text':' complexity of exposing C++ code into javascript. Most prominently, we have','line_number':47,'multiline':False]
['text':' to wrap every function that can be called from javascript to prevent any C++','line_number':48,'multiline':False]
['text':' exceptions from leaking out. We do this, with template and macro based','line_number':49,'multiline':False]
['text':' codegen, and turn mongo exceptions into instances of Status, then convert','line_number':50,'multiline':False]
['text':' those into javascript exceptions before returning. That allows all consumers','line_number':51,'multiline':False]
['text':' of this library to throw exceptions freely, with the understanding that','line_number':52,'multiline':False]
['text':' they'll be visible in javascript. Javascript exceptions are trapped at the','line_number':53,'multiline':False]
['text':' top level and converted back to mongo exceptions by an error handler on','line_number':54,'multiline':False]
['text':' ImplScope.','line_number':55,'multiline':False]
['text':' MONGO_*_JS_FUNCTION_* macros are public and allow wrapped types to install','line_number':57,'multiline':False]
['text':' their own functions on types and into the global scope','line_number':58,'multiline':False]
['text':' Now all the spidermonkey type methods','line_number':105,'multiline':False]
['text':' Just default to the SpiderMonkey's standard implementations for Symbol methods','line_number':171,'multiline':False]
['text':' Just default to the SpiderMonkey's standard implementations for Symbol methods','line_number':215,'multiline':False]
['text':' namespace smUtils','line_number':238,'multiline':False]
['text':' enumerate','line_number':255,'multiline':False]
['text':' newEnumerate','line_number':257,'multiline':False]
['text':' lookupProperty','line_number':266,'multiline':False]
['text':' defineProperty','line_number':267,'multiline':False]
['text':' hasProperty','line_number':268,'multiline':False]
['text':' getProperty','line_number':270,'multiline':False]
['text':' setProperty','line_number':272,'multiline':False]
['text':' getOwnPropertyDescriptor','line_number':273,'multiline':False]
['text':' deleteProperty','line_number':274,'multiline':False]
['text':' getElements','line_number':275,'multiline':False]
['text':' funToString','line_number':276,'multiline':False]
['text':' The global object is different.  We need it for basic setup','line_number':279,'multiline':False]
['text':' before the other types are installed.  Might as well just do it','line_number':280,'multiline':False]
['text':' in the constructor.','line_number':281,'multiline':False]
['text':' Persistent globals don't RAII, you have to reset() them manually','line_number':298,'multiline':False]
['text':'*
     * newObject methods don't invoke the constructor.  So they're good for
     * types without a constructor or inside the constructor
     ','line_number':317,'multiline':True]
['text':'*
     * newInstance calls the constructor, a la new Type() in js
     ','line_number':343,'multiline':True]
['text':' instanceOf doesn't go up the prototype tree.  It's a lower level more specific match','line_number':397,'multiline':False]
['text':'*
     * Use this if you want your types installed visibly in the global scope
     ','line_number':424,'multiline':True]
['text':' Use this if you want your types installed, but not visible in the','line_number':449,'multiline':False]
['text':' global scope','line_number':450,'multiline':False]
['text':' See newObject() for why we have to do this dance with the explicit','line_number':457,'multiline':False]
['text':' SetPrototype','line_number':458,'multiline':False]
['text':' Use this to attach things to types that we don't provide like','line_number':473,'multiline':False]
['text':' Object, or Array','line_number':474,'multiline':False]
['text':' This is for inheriting from something other than Object','line_number':537,'multiline':False]
['text':' namespace mozjs','line_number':598,'multiline':False]
['text':' namespace mongo','line_number':599,'multiline':False]
