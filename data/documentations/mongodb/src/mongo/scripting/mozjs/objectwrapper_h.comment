['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 * Wraps JSObject's with helpers for accessing their properties
 *
 * This wraps a RootedObject, so should only be allocated on the stack and is
 * not movable or copyable
 ','line_number':73,'multiline':True]
['text':'*
     * Helper subclass that provides some easy boilerplate for accessing
     * properties by string, index or id.
     ','line_number':83,'multiline':True]
['text':' Note: The resulting BSONBinData is only valid within the scope of the 'withBinData' callback.','line_number':137,'multiline':False]
['text':'*
     * See JS_DefineProperty for what sort of attributes might be useful
     ','line_number':152,'multiline':True]
['text':'*
     * Returns the bson type of the property
     ','line_number':160,'multiline':True]
['text':' has field walks the prototype heirarchy','line_number':167,'multiline':False]
['text':' has own field checks for the field directly on the object','line_number':170,'multiline':False]
['text':' already how own field checks for the field directly on the object, ignoring C++ hooks','line_number':173,'multiline':False]
['text':'*
     * Safely enumerates fields in the object, invoking a callback for each id
     ','line_number':183,'multiline':True]
['text':'*
     * Writes a bson object reflecting the contents of the object
     ','line_number':202,'multiline':True]
['text':'*
     * The maximum depth of recursion for writeField
     ','line_number':213,'multiline':True]
['text':'*
     * The state needed to write a single level of a nested javascript object as a
     * bson object.
     *
     * We use this between ObjectWrapper and ValueWriter to avoid recursion in
     * translating js to bson.
     ','line_number':218,'multiline':True]
['text':' ids for the keys of thisv','line_number':237,'multiline':False]
['text':' Current index of the current key we're working on','line_number':240,'multiline':False]
['text':'*
     * Synthetic stack of variables for writeThis
     *
     * We use a LifetimeStack here because we have SpiderMonkey Rooting types which
     * are non-copyable and non-movable and have to be on the stack.
     ','line_number':248,'multiline':True]
['text':'*
     * writes the field "key" into the associated builder
     *
     * optional originalBSON is used to track updates to types (NumberInt
     * overwritten by a float, but coercible to the original type, etc.)
     ','line_number':257,'multiline':True]
['text':' namespace mozjs','line_number':272,'multiline':False]
['text':' namespace mongo','line_number':273,'multiline':False]
