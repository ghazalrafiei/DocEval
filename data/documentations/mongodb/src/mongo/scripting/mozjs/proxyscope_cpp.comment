['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' IWYU pragma: no_include "cxxabi.h"','line_number':31,'multiline':False]
['text':' Test the child on startup to make sure it's awake and that the','line_number':59,'multiline':False]
['text':' implementation scope sucessfully constructed.','line_number':60,'multiline':False]
['text':'*
 * Invokes a function on the implementation thread
 *
 * It does this by serializing the invocation through a unique_function and
 * capturing any exceptions through _status.
 *
 * We transition:
 *
 * Idle -> ProxyRequest -> ImplResponse -> Idle
 ','line_number':269,'multiline':True]
['text':' We can end up calling functions on the proxy scope from the impl thread','line_number':281,'multiline':False]
['text':' when callbacks from javascript have a handle to the proxy scope and call','line_number':282,'multiline':False]
['text':' methods on it from there. If we're on the same thread, it's safe to','line_number':283,'multiline':False]
['text':' simply call back in, so let's do that.','line_number':284,'multiline':False]
['text':' update _status after the wait, otherwise it would get overwritten in implThread','line_number':329,'multiline':False]
['text':' Clear the _status state and throw it if necessary','line_number':335,'multiline':False]
['text':' Can validate the status outside the lock','line_number':338,'multiline':False]
['text':'*
 * The main loop for the implementation thread
 *
 * This owns the actual implementation scope (which needs to be created on this
 * child thread) and has essentially two transition paths:
 *
 * Standard: ProxyRequest -> ImplResponse
 *   Invoke _function. Serialize exceptions to _status.
 *
 * Shutdown: Shutdown -> _
 *   break out of the loop and return.
 ','line_number':358,'multiline':True]
['text':' This will leave _status set for the first noop runOnImplThread(), which','line_number':377,'multiline':False]
['text':' captures the startup exception that way','line_number':378,'multiline':False]
['text':' Don't override global jsHeapLimitMB ','line_number':381,'multiline':True]
['text':' This is mostly to silence coverity, so that it sees that the','line_number':387,'multiline':False]
['text':' ProxyScope doesn't hold a reference to the ImplScope after it','line_number':388,'multiline':False]
['text':' is deleted by the unique_ptr.','line_number':389,'multiline':False]
['text':' namespace mozjs','line_number':419,'multiline':False]
['text':' namespace mongo','line_number':420,'multiline':False]
