['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 * Writes C++ values out of JS Values
 *
 * originalBSON is a hack to keep integer types in their original type when
 * they're read out, manipulated in js and saved back.
 ','line_number':53,'multiline':True]
['text':'*
     * These coercions flow through JS::To_X. I.e. they can call toString() or
     * toNumber()
     ','line_number':65,'multiline':True]
['text':' Note: The resulting BSONBinData is only valid within the scope of the 'withBinData' callback.','line_number':78,'multiline':False]
['text':'*
     * Provides the type of the value. For objects, it fetches the class name if possible.
     ','line_number':83,'multiline':True]
['text':'*
     * Writes the value into a bsonobjbuilder under the name in sd.
     *
     * We take WriteFieldRecursionFrames so we can push a new object on if the underlying
     * value is an object. This allows us to recurse without C++ stack frames.
     *
     * Look in toBSON on ObjectWrapper for the top of that loop.
     ','line_number':88,'multiline':True]
['text':'*
     * Writes the object into a bsonobjbuilder under the name in sd.
     ','line_number':103,'multiline':True]
['text':' namespace mozjs','line_number':115,'multiline':False]
['text':' namespace mongo','line_number':116,'multiline':False]
