['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' IWYU pragma: keep','line_number':37,'multiline':False]
['text':'*
 * This shim interface (which controls dynamic allocation within SpiderMonkey),
 * consciously uses std::malloc and friends over mongoMalloc. It does this
 * because SpiderMonkey has some plausible options in the event of OOM,
 * specifically it can begin aggressive garbage collection. It would also be
 * reasonable to go the other route and fail, but for the moment I erred on the
 * side of maintaining the contract that SpiderMonkey expects.
 *
 * The overall strategy here is to keep track of allocations in a thread local,
 * offering us the chance to enforce soft limits on memory use rather than
 * waiting for the OS to OOM us.
 ','line_number':52,'multiline':True]
['text':'*
 * These two variables track the total number of bytes handed out, and the
 * maximum number of bytes we will consider handing out. They are set by
 * MozJSImplScope on start up.
 ','line_number':69,'multiline':True]
['text':'*
 * When we don't have malloc_usable_size, we manage by adjusting our pointer by
 * kMaxAlign bytes and storing the size of the allocation kMaxAlign bytes
 * behind the pointer we hand back. That let's us get to the value at runtime.
 * We know kMaxAlign is enough (generally 8 or 16 bytes), because that's
 * literally the contract between malloc and std::max_align_t.
 *
 * This is commented out right now because std::max_align_t didn't seem to be
 * available on our solaris builder. TODO: revisit in the future to see if that
 * still holds.
 ','line_number':77,'multiline':True]
['text':' const size_t kMaxAlign = std::alignment_of<std::max_align_t>::value;','line_number':88,'multiline':False]
['text':' namespace','line_number':90,'multiline':False]
['text':'*
 * Wraps std::Xalloc functions
 *
 * The idea here is to abstract soft limits on allocations, as well as possibly
 * necessary pointer adjustment (if we don't have a malloc_usable_size
 * replacement).
 *
 ','line_number':105,'multiline':True]
['text':' We fall through here because we want to let spidermonkey continue','line_number':123,'multiline':False]
['text':' with whatever it was doing.  Calling setOOM will fail the top level','line_number':124,'multiline':False]
['text':' operation as soon as possible.','line_number':125,'multiline':False]
['text':' realloc','line_number':145,'multiline':False]
['text':' actually moved the allocation','line_number':147,'multiline':False]
['text':' else we didn't need to realloc, don't have to register','line_number':151,'multiline':False]
['text':' malloc/calloc','line_number':153,'multiline':False]
['text':' free','line_number':157,'multiline':False]
['text':' namespace sm','line_number':195,'multiline':False]
['text':' namespace mongo','line_number':196,'multiline':False]
['text':' realloc() with zero size is not portable, as some implementations may','line_number':271,'multiline':False]
['text':' return nullptr on success and free |p| for this.  We assume nullptr','line_number':272,'multiline':False]
['text':' indicates failure and that |p| is still valid.','line_number':273,'multiline':False]
