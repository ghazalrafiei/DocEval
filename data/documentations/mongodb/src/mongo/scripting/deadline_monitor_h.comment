['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' IWYU pragma: no_include "cxxabi.h"','line_number':31,'multiline':False]
['text':' Returns the current interrupt interval from the setParameter value','line_number':49,'multiline':False]
['text':'*
 * DeadlineMonitor
 *
 * Monitors tasks which are required to complete before a deadline.  When
 * a deadline is started on a _Task*, either the deadline must be stopped,
 * or _Task::kill() will be called when the deadline arrives.
 *
 * Each instance of a DeadlineMonitor spawns a thread which waits for one of the
 * following conditions:
 *    - a task is added to the monitor
 *    - a task is removed from the monitor
 *    - the nearest deadline has arrived
 *
 * Ownership:
 * The _Task* must not be freed until the deadline has elapsed or stopDeadline()
 * has been called.
 *
 * NOTE: Each instance of this class spawns a new thread.  It is intended to be a stop-gap
 *       solution for simple deadline monitoring until a more robust solution can be
 *       implemented.
 *
 * NOTE: timing is based on wallclock time, which may not be precise.
 ','line_number':52,'multiline':True]
['text':' NOTE(schwerin): Because _monitorThread takes a pointer to "this", all of the fields','line_number':82,'multiline':False]
['text':' of this instance must be initialized before the thread is created.  As a result, we','line_number':83,'multiline':False]
['text':' should not create the thread in the initializer list.  Creating it there leaves us','line_number':84,'multiline':False]
['text':' vulnerable to errors introduced by rearranging the order of fields in the class.','line_number':85,'multiline':False]
['text':' ensure the monitor thread has been stopped before destruction','line_number':91,'multiline':False]
['text':'*
     * Start monitoring a task for deadline lapse.  User must call stopDeadline() before
     * deleting the task.  Note that stopDeadline() cannot be called from within the
     * kill() method.
     * @param   task        the task to kill()
     * @param   timeoutMs   number of milliseconds before the deadline expires
     ','line_number':99,'multiline':True]
['text':'*
     * Stop monitoring a task.  Can be called multiple times, before or after a
     * deadline has expired (as long as the task remains allocated).
     * @return true  if the task was found and erased
     ','line_number':125,'multiline':True]
['text':'*
     * Main deadline monitor loop.  Waits on a condition variable until a task
     * is started, stopped, or the nearest deadline arrives.  If a deadline arrives,
     * _Task::kill() is invoked.
     ','line_number':136,'multiline':True]
['text':' get the next interval to wait','line_number':146,'multiline':False]
['text':' wait for a task to be added or a deadline to expire','line_number':158,'multiline':False]
['text':' set the next interval to wait for deadline completion','line_number':175,'multiline':False]
['text':' deadline expired','line_number':180,'multiline':False]
['text':' nearest deadline seen so far','line_number':185,'multiline':False]
['text':' map of running tasks with deadlines','line_number':195,'multiline':False]
['text':' protects all non-const members, except _monitorThread','line_number':196,'multiline':False]
['text':' Signaled for timeout, start and stop','line_number':198,'multiline':False]
['text':' the deadline monitor thread','line_number':199,'multiline':False]
['text':' absolute time of the nearest deadline','line_number':200,'multiline':False]
['text':' namespace mongo','line_number':204,'multiline':False]
