['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 * Flatten an OpMsgRequest into a BSONObj.
 ','line_number':140,'multiline':True]
['text':'*
 * Validate two OpMsgRequests are the same regardless of whether they both use DocumentSequences.
 ','line_number':154,'multiline':True]
['text':'*
 * Validate two OpMsgRequests are the same including their DocumentSequences.
 ','line_number':164,'multiline':True]
['text':' Use a separate function to get better error messages when types do not match.','line_number':203,'multiline':False]
['text':' We need to use a different unittest macro for comparing obj/array.','line_number':218,'multiline':False]
['text':' Positive: Test we can roundtrip from the just parsed document','line_number':227,'multiline':False]
['text':' Positive: Test we can roundtrip from the just parsed document','line_number':236,'multiline':False]
['text':' Positive: Test we can serialize from nothing the same document','line_number':243,'multiline':False]
['text':' Validate the operator == works','line_number':253,'multiline':False]
['text':' Use ASSERT instead of ASSERT_EQ to avoid operator<<','line_number':254,'multiline':False]
['text':' BSONArray comparison not currently implemented.','line_number':256,'multiline':False]
['text':' Only One_plain_object implements comparison ops','line_number':261,'multiline':False]
['text':'/ Type tests:','line_number':267,'multiline':False]
['text':' Positive: Test we can serialize the type out and back again','line_number':268,'multiline':False]
['text':' Test we compare an object with optional BSONObjs correctly','line_number':284,'multiline':False]
['text':' Make sure we match the operator semantics for std::optional','line_number':303,'multiline':False]
['text':' Test if a given value for a given bson document parses successfully or fails if the bson types','line_number':318,'multiline':False]
['text':' mismatch.','line_number':319,'multiline':False]
['text':' Test each of types either fail or succeeded based on the parser's bson type','line_number':336,'multiline':False]
['text':' Negative: document with wrong types for required field','line_number':349,'multiline':False]
['text':' Negative: document with wrong types for required field','line_number':361,'multiline':False]
['text':' Negative: document with wrong types for required field','line_number':373,'multiline':False]
['text':' Mixed: test a type that accepts multiple bson types','line_number':386,'multiline':False]
['text':' Mixed: test a type that accepts NamespaceString','line_number':398,'multiline':False]
['text':' Positive: Test we can roundtrip from the just parsed document','line_number':412,'multiline':False]
['text':' Positive: Test we can serialize from nothing the same document','line_number':421,'multiline':False]
['text':' Negative: invalid namespace','line_number':432,'multiline':False]
['text':' Positive: Test base64 encoded strings.','line_number':440,'multiline':False]
['text':' Negative: Test base64 encoded strings.','line_number':455,'multiline':False]
['text':' No terminator on basic.','line_number':458,'multiline':False]
['text':' Invalid chars in basic.','line_number':470,'multiline':False]
['text':' Invalid chars in url','line_number':482,'multiline':False]
['text':' BSONElement::exactNumberLong() provides different errors on windows','line_number':495,'multiline':False]
['text':' Postive: Test any type','line_number':611,'multiline':False]
['text':' Positive: string field','line_number':615,'multiline':False]
['text':' Positive: int field','line_number':628,'multiline':False]
['text':' Postive: Test object type','line_number':641,'multiline':False]
['text':' Positive: object','line_number':645,'multiline':False]
['text':' Negative: Test object type','line_number':660,'multiline':False]
['text':' Negative: string field','line_number':664,'multiline':False]
['text':' Negative: int field','line_number':671,'multiline':False]
['text':' Trait check used in TestLoopbackVariant.','line_number':678,'multiline':False]
['text':' We don't generate comparison operators like "==" for variants, so test only for BSON equality.','line_number':686,'multiline':False]
['text':' TestT might be an IDL struct type like One_string.','line_number':693,'multiline':False]
['text':' Use ASSERT instead of ASSERT_EQ to avoid operator<<','line_number':720,'multiline':False]
['text':' Test setValue.','line_number':725,'multiline':False]
['text':' Test the constructor.','line_number':730,'multiline':False]
['text':' safeInt accepts all numbers, but always deserializes and serializes as int32.','line_number':769,'multiline':False]
['text':' Use ASSERT instead of ASSERT_EQ to avoid operator<<','line_number':788,'multiline':False]
['text':' This variant can be array<int> or array<string>. It assumes an empty array is array<int>','line_number':822,'multiline':False]
['text':' because that type is declared first in the IDL.','line_number':823,'multiline':False]
['text':' Corrupt array: its first key isn't "0".','line_number':829,'multiline':False]
['text':' The optional key is absent.','line_number':857,'multiline':False]
['text':' Combinations of value0 (int or string) and value1 (object or array<string>). For each, test','line_number':864,'multiline':False]
['text':' parse(), toBSON(), getValue0(), getValue1(), and the constructor.','line_number':865,'multiline':False]
['text':' Test the constructor.','line_number':931,'multiline':False]
['text':' Test the constructor.','line_number':954,'multiline':False]
['text':' Test the constructor.','line_number':976,'multiline':False]
['text':' Test the constructor.','line_number':1003,'multiline':False]
['text':' Test the constructor.','line_number':1026,'multiline':False]
['text':' Test the constructor.','line_number':1048,'multiline':False]
['text':' Test the constructor.','line_number':1072,'multiline':False]
['text':' Test the constructor.','line_number':1094,'multiline':False]
['text':' Test the constructor.','line_number':1118,'multiline':False]
['text':' Test the constructor.','line_number':1140,'multiline':False]
['text':'/ Struct tests:','line_number':1149,'multiline':False]
['text':' Positive: strict, 3 required fields','line_number':1150,'multiline':False]
['text':' Negative: strict, ensure extra fields fail','line_number':1151,'multiline':False]
['text':' Negative: strict, duplicate fields','line_number':1152,'multiline':False]
['text':' Positive: Just 3 required fields','line_number':1156,'multiline':False]
['text':' Negative: Missing 1 required field','line_number':1162,'multiline':False]
['text':' Negative: Extra field','line_number':1176,'multiline':False]
['text':' Negative: Duplicate field','line_number':1183,'multiline':False]
['text':' Positive: non-strict, ensure extra fields work','line_number':1190,'multiline':False]
['text':' Negative: non-strict, duplicate fields','line_number':1191,'multiline':False]
['text':' Positive: Just 3 required fields','line_number':1195,'multiline':False]
['text':' Negative: Missing 1 required field','line_number':1206,'multiline':False]
['text':' Positive: Extra field','line_number':1220,'multiline':False]
['text':' Negative: Duplicate field','line_number':1226,'multiline':False]
['text':' Negative: Duplicate extra field','line_number':1232,'multiline':False]
['text':' Negative: null required field','line_number':1239,'multiline':False]
['text':' Numeric w value','line_number':1249,'multiline':False]
['text':' String w value','line_number':1257,'multiline':False]
['text':' Ignore options wElectionId, wOpTime, getLastError','line_number':1267,'multiline':False]
['text':' Parser should assert that the values are equal.','line_number':1284,'multiline':False]
['text':'/ Struct default comparison tests','line_number':1294,'multiline':False]
['text':' Positive: equality works','line_number':1298,'multiline':False]
['text':' Avoid ASSET_<RelOp> to avoid operator <<','line_number':1308,'multiline':False]
['text':' Positive: not equality works in field 3','line_number':1315,'multiline':False]
['text':' Avoid ASSET_<RelOp> to avoid operator <<','line_number':1325,'multiline':False]
['text':'/ Struct partial comparison tests','line_number':1334,'multiline':False]
['text':' Positive: partial equality works when field 2 is different','line_number':1338,'multiline':False]
['text':' Avoid ASSET_<RelOp> to avoid operator <<','line_number':1348,'multiline':False]
['text':' Positive: partial equality works when field 3 is different','line_number':1355,'multiline':False]
['text':' Avoid ASSET_<RelOp> to avoid operator <<','line_number':1365,'multiline':False]
['text':' Positive: partial equality works when field 1 is different','line_number':1372,'multiline':False]
['text':' Avoid ASSET_<RelOp> to avoid operator <<','line_number':1382,'multiline':False]
['text':'/ Field tests','line_number':1390,'multiline':False]
['text':' Positive: check ignored field is ignored','line_number':1391,'multiline':False]
['text':' Positive: Test ignored field is ignored','line_number':1395,'multiline':False]
['text':' Positive: Test ignored field is not required','line_number':1401,'multiline':False]
['text':' Negative: check duplicate ignored fields fail','line_number':1408,'multiline':False]
['text':' Negative: Test duplicate ignored fields fail','line_number':1412,'multiline':False]
['text':' First test: test an empty document and the default value','line_number':1421,'multiline':False]
['text':' Second test: test a non-empty document and that we do not get the default value','line_number':1422,'multiline':False]
['text':' Mixed: struct strict, and ignored field works','line_number':1449,'multiline':False]
['text':' Positive: struct strict, and optional field works','line_number':1462,'multiline':False]
['text':' Positive: Test document with only string field','line_number':1466,'multiline':False]
['text':' Positive: Serialize struct with only string field','line_number':1482,'multiline':False]
['text':' Positive: Test document with only int field','line_number':1496,'multiline':False]
['text':' Positive: Serialize struct with only int field','line_number':1504,'multiline':False]
['text':' Positive: struct strict, and optional field works','line_number':1561,'multiline':False]
['text':' Positive: Test a nested struct','line_number':1569,'multiline':False]
['text':' Positive: Test document','line_number':1574,'multiline':False]
['text':' Positive: Test we can roundtrip from the just parsed document','line_number':1597,'multiline':False]
['text':' Positive: Test we can serialize from nothing the same document','line_number':1606,'multiline':False]
['text':' This should invariant because the required field3 is uninitialized.','line_number':1638,'multiline':False]
['text':' #ifdef MONGO_CONFIG_DEBUG_BUILD','line_number':1641,'multiline':False]
['text':' Uninitialized fields are only tracked in debug builds.','line_number':1643,'multiline':False]
['text':' #ifdef MONGO_CONFIG_DEBUG_BUILD','line_number':1646,'multiline':False]
['text':' Positive: Arrays of simple types','line_number':1648,'multiline':False]
['text':' Positive: Test document','line_number':1652,'multiline':False]
['text':' Positive: Test we can roundtrip from the just parsed document','line_number':1693,'multiline':False]
['text':' Positive: Test we can serialize from nothing the same document','line_number':1702,'multiline':False]
['text':' Positive: Array of variant','line_number':1718,'multiline':False]
['text':' Positive: Test we can roundtrip from the just parsed document','line_number':1729,'multiline':False]
['text':' Positive: Optional Arrays','line_number':1738,'multiline':False]
['text':' Positive: Test document','line_number':1742,'multiline':False]
['text':' Positive: Test we can roundtrip from the just parsed document','line_number':1769,'multiline':False]
['text':' Positive: Test we can serialize from nothing the same document','line_number':1778,'multiline':False]
['text':' Negative: Test mixed type arrays','line_number':1792,'multiline':False]
['text':' Negative: Test not an array','line_number':1796,'multiline':False]
['text':' Negative: Test array with mixed types','line_number':1803,'multiline':False]
['text':' Negative: Test arrays with good field names but made with BSONObjBuilder::subobjStart','line_number':1811,'multiline':False]
['text':' Positive: Test arrays with good field names but made with BSONObjBuilder::subarrayStart','line_number':1828,'multiline':False]
['text':' Negative: Test arrays with bad field names','line_number':1846,'multiline':False]
['text':' Negative: string fields','line_number':1850,'multiline':False]
['text':' Negative: bad start','line_number':1863,'multiline':False]
['text':' Negative: non-sequentially increasing','line_number':1876,'multiline':False]
['text':' Postitive: Test arrays with complex types','line_number':1890,'multiline':False]
['text':' Positive: Test document','line_number':1894,'multiline':False]
['text':' Positive: Test document with only a generic bindata field','line_number':1958,'multiline':False]
['text':' Positive: Test we can roundtrip from the just parsed document','line_number':1969,'multiline':False]
['text':' Positive: Test we can serialize from nothing the same document','line_number':1978,'multiline':False]
['text':' Validate the operator == works','line_number':1988,'multiline':False]
['text':' Use ASSERT instead of ASSERT_EQ to avoid operator<<','line_number':1989,'multiline':False]
['text':' Positive: Test document with only a generic bindata field','line_number':2006,'multiline':False]
['text':' Positive: Test we can roundtrip from the just parsed document','line_number':2017,'multiline':False]
['text':' Positive: Test we can serialize from nothing the same document','line_number':2026,'multiline':False]
['text':' Negative: Test document with a incorrectly size md5 field','line_number':2045,'multiline':False]
['text':' Test if a given value for a given bson document parses successfully or fails if the bson types','line_number':2055,'multiline':False]
['text':' mismatch.','line_number':2056,'multiline':False]
['text':' Mixed: test a type that accepts a custom bindata type','line_number':2091,'multiline':False]
['text':' Positive: Test we can roundtrip from the just parsed document','line_number':2106,'multiline':False]
['text':' Positive: Test we can serialize from nothing the same document','line_number':2115,'multiline':False]
['text':' Positive: test a type that accepts a custom UUID type','line_number':2127,'multiline':False]
['text':' Positive: Test we can roundtrip from the just parsed document','line_number':2141,'multiline':False]
['text':' Positive: Test we can serialize from nothing the same document','line_number':2150,'multiline':False]
['text':'*
 * A simple class that derives from an IDL generated class
 ','line_number':2162,'multiline':True]
['text':' Positive: demonstrate a class derived from an IDL parser.','line_number':2187,'multiline':False]
['text':' Positive: Test we can roundtrip from the just parsed document','line_number':2199,'multiline':False]
['text':' Positive: Test we can serialize from nothing the same document','line_number':2208,'multiline':False]
['text':' Chained type testing','line_number':2221,'multiline':False]
['text':' Check each of types','line_number':2222,'multiline':False]
['text':' Check for round-tripping of fields and documents','line_number':2223,'multiline':False]
['text':' Positive: demonstrate a class struct chained types','line_number':2225,'multiline':False]
['text':' Positive: Test we can roundtrip from the just parsed document','line_number':2242,'multiline':False]
['text':' Positive: Test we can serialize from nothing the same document','line_number':2251,'multiline':False]
['text':' Positive: demonstrate a struct with chained types ignoring extra fields','line_number':2268,'multiline':False]
['text':' Negative: demonstrate a struct with chained types with duplicate fields','line_number':2282,'multiline':False]
['text':' Positive: demonstrate a struct with chained structs','line_number':2294,'multiline':False]
['text':' Positive: Test we can roundtrip from the just parsed document','line_number':2312,'multiline':False]
['text':' Serializer should include fields with default values.','line_number':2318,'multiline':False]
['text':' Should be ahead of 'field3'.','line_number':2322,'multiline':False]
['text':' Negative: demonstrate a struct with chained structs and extra fields','line_number':2330,'multiline':False]
['text':' Extra field','line_number':2334,'multiline':False]
['text':' Duplicate any','line_number':2346,'multiline':False]
['text':' Duplicate object','line_number':2357,'multiline':False]
['text':' Duplicate field3','line_number':2369,'multiline':False]
['text':' Positive: demonstrate a struct with chained structs and types','line_number':2383,'multiline':False]
['text':' Positive: Test we can roundtrip from the just parsed document','line_number':2404,'multiline':False]
['text':' Positive: Test we can serialize from nothing the same document','line_number':2413,'multiline':False]
['text':' Positive: demonstrate a class derived from an IDL parser.','line_number':2433,'multiline':False]
['text':' Positive: Test we can roundtrip from the just parsed document','line_number':2457,'multiline':False]
['text':' Positive: Test we can serialize from nothing the same document','line_number':2466,'multiline':False]
['text':' Negative: test bad values','line_number':2480,'multiline':False]
['text':'  Test string','line_number':2484,'multiline':False]
['text':' Test a value out of range','line_number':2491,'multiline':False]
['text':' Test a negative number','line_number':2497,'multiline':False]
['text':'  Test int','line_number':2507,'multiline':False]
['text':' Test a value out of range','line_number':2513,'multiline':False]
['text':' Positive: demonstrate a command with concatenate with db','line_number':2555,'multiline':False]
['text':' Positive: Test we can roundtrip from the just parsed document','line_number':2573,'multiline':False]
['text':' Positive: Test we can serialize from nothing the same document except for $db','line_number':2576,'multiline':False]
['text':' Positive: Test we can serialize from nothing the same document','line_number':2594,'multiline':False]
['text':' Positive: Test we can roundtrip from the just parsed document','line_number':2634,'multiline':False]
['text':' Postive - symbol???','line_number':2651,'multiline':False]
['text':' Negative - duplicate namespace field','line_number':2668,'multiline':False]
['text':' Negative -  namespace field wrong order','line_number':2678,'multiline':False]
['text':' Negative -  namespace missing','line_number':2686,'multiline':False]
['text':' Negative - wrong type','line_number':2694,'multiline':False]
['text':' Negative - bad ns with embedded null','line_number':2702,'multiline':False]
['text':' Positive: demonstrate a command with concatenate with db or uuid - test NSS','line_number':2712,'multiline':False]
['text':' Positive: Test we can roundtrip from the just parsed document','line_number':2731,'multiline':False]
['text':' Positive: Test we can serialize from nothing the same document except for $db','line_number':2734,'multiline':False]
['text':' Positive: Test we can serialize from nothing the same document','line_number':2752,'multiline':False]
['text':' Positive: Test we can roundtrip from the just parsed document','line_number':2792,'multiline':False]
['text':' Positive: demonstrate a command with concatenate with db or uuid - test UUID','line_number':2796,'multiline':False]
['text':' Positive: Test we can roundtrip from the just parsed document','line_number':2815,'multiline':False]
['text':' Positive: Test we can serialize from nothing the same document except for $db','line_number':2818,'multiline':False]
['text':' Positive: Test we can serialize from nothing the same document','line_number':2835,'multiline':False]
['text':' Positive: Test we can roundtrip from the just parsed document','line_number':2878,'multiline':False]
['text':' Negative - duplicate namespace field','line_number':2902,'multiline':False]
['text':' Negative -  namespace field wrong order','line_number':2912,'multiline':False]
['text':' Negative -  namespace missing','line_number':2920,'multiline':False]
['text':' Negative - wrong type','line_number':2928,'multiline':False]
['text':' Negative - bad ns with embedded null','line_number':2936,'multiline':False]
['text':' Positive: demonstrate a command with concatenate with db','line_number':2948,'multiline':False]
['text':' Positive: Test we can roundtrip from the just parsed document','line_number':2961,'multiline':False]
['text':' Positive: Test we can serialize from nothing the same document','line_number':2970,'multiline':False]
['text':' Negative - duplicate namespace field','line_number':2984,'multiline':False]
['text':' Negative -  namespace field wrong order','line_number':2992,'multiline':False]
['text':' Negative -  namespace missing','line_number':2999,'multiline':False]
['text':' We don't generate comparison operators like "==" for variants, so test only for BSON equality.','line_number':3007,'multiline':False]
['text':' TestT might be an IDL struct type like One_string.','line_number':3014,'multiline':False]
['text':' Use ASSERT instead of ASSERT_EQ to avoid operator<<','line_number':3032,'multiline':False]
['text':' Test the constructor.','line_number':3037,'multiline':False]
['text':' Positive: Test we can round trip to a document sequence from the just parsed document','line_number':3093,'multiline':False]
['text':' Positive: Test we can roundtrip just the body from the just parsed document','line_number':3101,'multiline':False]
['text':' Positive: Test we can serialize from nothing the same document','line_number':3111,'multiline':False]
['text':' Negative: Test a OpMsgRequest read without $db','line_number':3137,'multiline':False]
['text':' Positive: Test a command read and written to OpMsgRequest with content in DocumentSequence works','line_number':3156,'multiline':False]
['text':' Positive: Test a command read and written to OpMsgRequest with content in DocumentSequence works','line_number':3191,'multiline':False]
['text':' Negative: Bad Doc Sequences','line_number':3197,'multiline':False]
['text':' Negative: Duplicate fields in doc sequence','line_number':3206,'multiline':False]
['text':' Negative: Extra field in document sequence','line_number':3220,'multiline':False]
['text':'void','line_number':3235,'multiline':True]
['text':' Negative: Missing field in both document sequence and body','line_number':3239,'multiline':False]
['text':' Negative: Missing field in both document sequence and body','line_number':3248,'multiline':False]
['text':' Negative: Bad Doc Sequences','line_number':3262,'multiline':False]
['text':' Negative: Duplicate field across body and document sequence','line_number':3268,'multiline':False]
['text':' Negative: Duplicate fields in doc sequence and body','line_number':3273,'multiline':False]
['text':' Negative: Duplicate fields in doc sequence and body','line_number':3296,'multiline':False]
['text':' Negative: Duplicate field across body and document sequence','line_number':3316,'multiline':False]
['text':' Positive: Test empty document sequence','line_number':3322,'multiline':False]
['text':' Negative: Duplicate fields in doc sequence and body','line_number':3326,'multiline':False]
['text':' Positive: Empty document sequence','line_number':3346,'multiline':False]
['text':' Positive: Test all the OpMsg well known fields are ignored','line_number':3364,'multiline':False]
['text':' Validate it can be parsed as a OpMsgRequest.','line_number':3398,'multiline':False]
['text':' Validate it can be parsed as just a BSON document.','line_number':3404,'multiline':False]
['text':' Positive: Test all the OpMsg well known fields are passed through except $db.','line_number':3412,'multiline':False]
['text':' Postive: Extra Fields in non-strict parser','line_number':3454,'multiline':False]
['text':' Positive: Extra field in document sequence','line_number':3458,'multiline':False]
['text':' Positive: Extra field in body','line_number':3479,'multiline':False]
['text':' Positive: Test we can round trip to a document sequence from the just parsed document','line_number':3523,'multiline':False]
['text':' just "structs"','line_number':3528,'multiline':False]
['text':' Verify doc sequence part of DocSequenceCommandArrayVariant::parseProtected too.','line_number':3532,'multiline':False]
['text':' Postive: Test a Command known field does not propagate from passthrough to the final BSON if it','line_number':3540,'multiline':False]
['text':' is included as a field in the command.','line_number':3541,'multiline':False]
['text':' OpMsg request serializes original '$db' out because it is part of the OP_MSG request','line_number':3560,'multiline':False]
['text':' BSON serialize does not round-trip '$db' because it can passed in passthrough data','line_number':3572,'multiline':False]
['text':' Positive: Test an inline nested chain struct works','line_number':3586,'multiline':False]
['text':' Positive: Test we can round trip to a document from the just parsed document','line_number':3603,'multiline':False]
['text':' Positive: Test we can serialize from nothing the same document','line_number':3610,'multiline':False]
['text':' Explicitly call setters.','line_number':3627,'multiline':False]
['text':' IDL ints *are* int32_t, so no number we can pass to the func will actually fail.','line_number':3652,'multiline':False]
['text':' Positive case parsing.','line_number':3659,'multiline':False]
['text':' Negative case parsing.','line_number':3679,'multiline':False]
['text':' Explicitly call setters.','line_number':3705,'multiline':False]
['text':' Positive case parsing.','line_number':3733,'multiline':False]
['text':' Negative case parsing.','line_number':3748,'multiline':False]
['text':' Explicitly call setters.','line_number':3768,'multiline':False]
['text':' Positive case parsing.','line_number':3787,'multiline':False]
['text':' Negative case parsing.','line_number':3799,'multiline':False]
['text':' Test validation of integer array','line_number':3822,'multiline':False]
['text':' Test validation of string array','line_number':3852,'multiline':False]
['text':' Positive: verify a command a string arg','line_number':3883,'multiline':False]
['text':' Positive: Test we can roundtrip from the just parsed document','line_number':3897,'multiline':False]
['text':' Positive: Test we can serialize from nothing the same document except for $db','line_number':3900,'multiline':False]
['text':' Positive: Test we can serialize from nothing the same document','line_number':3915,'multiline':False]
['text':' Positive: verify a command can take an array of object','line_number':3925,'multiline':False]
['text':' Positive: Test we can roundtrip from the just parsed document','line_number':3940,'multiline':False]
['text':' Positive: Test we can serialize from nothing the same document','line_number':3943,'multiline':False]
['text':' Positive: verify a command can take a struct','line_number':3954,'multiline':False]
['text':' Negative: Command with struct parameter should disallow 'undefined' input.','line_number':3969,'multiline':False]
['text':' Positive: Test we can roundtrip from the just parsed document','line_number':3977,'multiline':False]
['text':' Positive: Test we can serialize from nothing the same document','line_number':3980,'multiline':False]
['text':' Positive: verify a command can take an array of structs','line_number':3990,'multiline':False]
['text':' Positive: Test we can roundtrip from the just parsed document','line_number':4005,'multiline':False]
['text':' Positive: Test we can serialize from nothing the same document','line_number':4008,'multiline':False]
['text':' Positive: verify a command a string arg and alternate C++ name','line_number':4020,'multiline':False]
['text':' Positive: Test we can roundtrip from the just parsed document','line_number':4034,'multiline':False]
['text':' Positive: Test we can serialize from nothing the same document except for $db','line_number':4037,'multiline':False]
['text':' Positive: Test we can serialize from nothing the same document','line_number':4052,'multiline':False]
['text':' Correctly parse all required fields.','line_number':4062,'multiline':False]
['text':' Non-strictness: ensure we parse even if input has extra fields.','line_number':4076,'multiline':False]
['text':' Ensure that we fail to parse if any required fields are missing.','line_number':4093,'multiline':False]
['text':' Verify that both const and non-const getters are generated.','line_number':4160,'multiline':False]
['text':' Test we can roundtrip from the just parsed document.','line_number':4168,'multiline':False]
['text':' $clusterTime is not a field of Rely_type_struct, but is','line_number':4238,'multiline':False]
['text':' a field that could be part of any reply.','line_number':4239,'multiline':False]
['text':' This field is not part of Reply_type_struct and is also','line_number':4241,'multiline':False]
['text':' not a generic field.','line_number':4242,'multiline':False]
['text':' This contains only fields part of Reply_type_struct and generic fields','line_number':4245,'multiline':False]
['text':' This contains a field not part of Reply_type struct, so shouldn't parse','line_number':4251,'multiline':False]
['text':' Positive: Test we can roundtrip from the just parsed document','line_number':4275,'multiline':False]
['text':' Deserialize called from parse correctly sets the tenantId field.','line_number':4297,'multiline':False]
['text':' Positive: Test we can roundtrip from the just parsed document','line_number':4301,'multiline':False]
['text':' Positive: Test we can roundtrip from the just parsed document','line_number':4334,'multiline':False]
['text':' Positive: Test we can round trip to a document sequence from the just parsed document','line_number':4373,'multiline':False]
['text':' Negative: Test the child IDLParserContext cannot has different tenant id from its','line_number':4385,'multiline':False]
['text':' predecessor.','line_number':4386,'multiline':False]
['text':' the vector container is empty, which means that the SerializationContext obj's will','line_number':4627,'multiline':False]
['text':' reflect whatever flags are passed into the array's construction at runtime rather','line_number':4628,'multiline':False]
['text':' than being passed in from the enclosing class','line_number':4629,'multiline':False]
['text':' the vector container is empty, which means that the SerializationContext obj's will','line_number':4659,'multiline':False]
['text':' reflect whatever flags are passed into the array's construction at runtime rather','line_number':4660,'multiline':False]
['text':' than being passed in from the enclosing class','line_number':4661,'multiline':False]
['text':' the vector container is empty, which means that the SerializationContext obj's will','line_number':4691,'multiline':False]
['text':' reflect whatever flags are passed into the array's construction at runtime rather','line_number':4692,'multiline':False]
['text':' than being passed in from the enclosing class','line_number':4693,'multiline':False]
['text':' by passing structures in as args, we are overriding any SerializationContext state','line_number':4717,'multiline':False]
['text':' because the structs being passed in are std::move'd into the enclosing object','line_number':4718,'multiline':False]
['text':' bypassArg was NOT passed in any SerializationContext flags so its flags are the','line_number':4727,'multiline':False]
['text':' default','line_number':4728,'multiline':False]
['text':' nsArg was NOT passed in any SerializationContext flags so its flags are the default','line_number':4736,'multiline':False]
['text':' bypassArg was NOT passed in any SerializationContext flags so its flags are the','line_number':4781,'multiline':False]
['text':' default','line_number':4782,'multiline':False]
['text':' ...but we can still get the correct SerializationContext state if the state is','line_number':4790,'multiline':False]
['text':' manually passed into nested structs','line_number':4791,'multiline':False]
['text':' Now that tmp is out of scope, if idlStruct didn't retain ownership, it would be accessing','line_number':5076,'multiline':False]
['text':' free'd memory which should error on ASAN and debug builds.','line_number':5077,'multiline':False]
['text':' Now that tmp is out of scope, if idlStruct didn't particpate in ownership, it would be','line_number':5089,'multiline':False]
['text':' accessing free'd memory which should error on ASAN and debug builds.','line_number':5090,'multiline':False]
['text':' Now that idlStruct is out of scope, if bson didn't particpate in ownership, it would be','line_number':5099,'multiline':False]
['text':' accessing free'd memory which should error on ASAN and debug builds.','line_number':5100,'multiline':False]
['text':' Positive: non-strict','line_number':5108,'multiline':False]
['text':' Positive: duplicate extra','line_number':5118,'multiline':False]
['text':' Negative: duplicate required field','line_number':5128,'multiline':False]
['text':' namespace','line_number':5155,'multiline':False]
['text':' namespace mongo','line_number':5156,'multiline':False]
