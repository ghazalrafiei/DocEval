['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 * Encode a string for embedding in a URI.
 * Replaces reserved bytes with %xx sequences.
 *
 * Optionally allows passthrough characters to remain unescaped.
 ','line_number':58,'multiline':True]
['text':'*
 * Decode a URI encoded string.
 * Replaces + and %xx sequences with their original byte.
 ','line_number':72,'multiline':True]
['text':'*
 * MongoURI handles parsing of URIs for mongodb, and falls back to old-style
 * ConnectionString parsing. It's used primarily by the shell.
 * It parses URIs with the following formats:
 *
 *    mongodb://[usr:pwd@]host1[:port1]...[,hostN[:portN]]][/[db][?options]]
 *    mongodb+srv://[usr:pwd@]host[/[db][?options]]
 *
 * `mongodb+srv://` URIs will perform DNS SRV and TXT lookups and expand per the DNS Seedlist
 * specification.
 *
 * While this format is generally RFC 3986 compliant, some exceptions do exist:
 *   1. The 'host' field, as defined by section 3.2.2 is expanded in the following ways:
 *     a. Multiple hosts may be specified as a comma separated list.
 *     b. Hosts may take the form of absolute paths for unix domain sockets.
 *       i. Sockets must end in the suffix '.sock'
 *   2. The 'fragment' field, as defined by section 3.5 is not permitted.
 *
 * For a complete list of URI string options, see
 * https://docs.mongodb.com/manual/reference/connection-string/#connection-string-options
 *
 * Examples:
 *
 *    A replica set with three members (one running on default port 27017):
 *      string uri = mongodb://localhost,localhost:27018,localhost:27019
 *
 *    Authenticated connection to db 'bedrock' with user 'barney' and pwd 'rubble':
 *      string url = mongodb://barney:rubble@localhost/bedrock
 *
 *    Use parse() to parse the url, then validate and connect:
 *      string errmsg;
 *      ConnectionString cs = ConnectionString::parse( url, errmsg );
 *      if ( ! cs.isValid() ) throw "bad connection string: " + errmsg;
 *      DBClientBase * conn = cs.connect( errmsg );
 ','line_number':78,'multiline':True]
['text':' Note that, because this map is used for DNS TXT record injection on options, there is a','line_number':141,'multiline':False]
['text':' requirement on its behavior for `insert`: insert must not replace or update existing values','line_number':142,'multiline':False]
['text':' -- this gives the desired behavior that user-specified values override TXT record specified','line_number':143,'multiline':False]
['text':' values.  `std::map` and `std::unordered_map` satisfy this requirement.  Make sure that','line_number':144,'multiline':False]
['text':' whichever map type is used provides that guarantee.','line_number':145,'multiline':False]
['text':'
     * Returns true if str starts with one of the uri schemes (e.g. mongodb:// or mongodb+srv://)
     ','line_number':150,'multiline':True]
['text':'
     * Returns a copy of the input url as a string with the password and connection options
     * removed. This may uassert or return a mal-formed string if the input is not a valid URI
     ','line_number':155,'multiline':True]
['text':' TODO: SERVER-80343 Remove this ifdef once gRPC is compiled on all variants','line_number':267,'multiline':False]
['text':' If you are trying to clone a URI (including its options/auth information) for a single','line_number':274,'multiline':False]
['text':' server (say a member of a replica-set), you can pass in its HostAndPort information to','line_number':275,'multiline':False]
['text':' get a new URI with the same info, except type() will be kStandalone and getServers() will','line_number':276,'multiline':False]
['text':' be the single host you pass in.','line_number':277,'multiline':False]
['text':' TODO: SERVER-80343 Remove this ifdef once gRPC is compiled on all variants','line_number':322,'multiline':False]
['text':' TODO: SERVER-80343 Remove this ifdef once gRPC is compiled on all variants','line_number':353,'multiline':False]
['text':' namespace mongo','line_number':367,'multiline':False]
