['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 * This module implements the client side of SASL authentication in MongoDB, in terms of the Cyrus
 * SASL library.  See <sasl/sasl.h> and http://cyrusimap.web.cmu.edu/ for relevant documentation.
 *
 * The primary entry point at runtime is saslClientAuthenticateImpl().
 ','line_number':30,'multiline':True]
['text':' IWYU pragma: keep','line_number':48,'multiline':False]
['text':'*
 * Gets the password data from "saslParameters" and stores it to "outPassword".
 *
 * If "digestPassword" indicates that the password needs to be "digested" via
 * mongo::createPasswordDigest(), this method takes care of that.
 * On success, the value of "*outPassword" is always the correct value to set
 * as the password on the SaslClientSession.
 *
 * Returns Status::OK() on success, and ErrorCodes::NoSuchKey if the password data is not
 * present in "saslParameters".  Other ErrorCodes returned indicate other errors.
 ','line_number':105,'multiline':True]
['text':' namespace','line_number':137,'multiline':False]
['text':' SERVER-59876 Ensure hostname is never empty. If it is empty, the client-side SCRAM cache will','line_number':143,'multiline':False]
['text':' not be used which creates performance problems.','line_number':144,'multiline':False]
['text':' $external users do not have passwords, hence NoSuchKey is expected','line_number':189,'multiline':False]
['text':' Extract payload from previous step','line_number':212,'multiline':False]
['text':' Create new payload for our response','line_number':221,'multiline':False]
['text':' Handle a done from the server which comes before the client is complete.','line_number':232,'multiline':False]
['text':' Build command using our new payload and conversationId','line_number':238,'multiline':False]
['text':' Asynchronously continue the conversation','line_number':249,'multiline':False]
['text':' Exit if we have finished','line_number':260,'multiline':False]
['text':'*
 * Driver for the client side of a sasl authentication session, conducted synchronously over
 * "client".
 ','line_number':280,'multiline':True]
['text':' NOTE: this must be a shared_ptr so that we can capture it in a lambda later on.','line_number':305,'multiline':False]
['text':' Come C++14, we should be able to do this in a nicer way.','line_number':306,'multiline':False]
['text':' namespace','line_number':327,'multiline':False]
['text':' namespace mongo','line_number':328,'multiline':False]
