['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
     * Container for BSON documents extracted from cursor results.
     ','line_number':71,'multiline':True]
['text':'*
     * Documents in current query response with cursor ID and associated namespace name.
     * If cursor ID is zero, there are no additional batches.
     ','line_number':76,'multiline':True]
['text':'*
     * Represents next steps of fetcher.
     ','line_number':94,'multiline':True]
['text':'*
     * Type of a fetcher callback function.
     ','line_number':104,'multiline':True]
['text':'*
     * Creates Fetcher task but does not schedule it to be run by the executor.
     *
     * First remote command to be run by the executor will be 'cmdObj'. The results
     * of 'cmdObj' must contain a cursor response object.
     * See Commands::appendCursorResponseObject.
     *
     * Callback function 'work' will be called 1 or more times after a successful
     * schedule() call depending on the results of the remote command.
     *
     * Depending on the cursor ID in the initial cursor response object, the fetcher may run
     * subsequent getMore commands on the remote server in order to obtain a complete
     * set of results.
     *
     * Failed remote commands will also cause 'work' to be invoked with the
     * error details provided by the remote server. On failure, the fetcher will stop
     * sending getMore requests to the remote server.
     *
     * If the fetcher is canceled (either by calling cancel() or shutting down the executor),
     * 'work' will not be invoked.
     *
     * Fetcher uses the NextAction and BSONObjBuilder arguments to inform client via callback
     * if a follow-up (like getMore) command will be scheduled to be run by the executor to
     * retrieve additional results. The BSONObjBuilder pointer will be valid only if NextAction
     * is kGetMore.
     * Otherwise, the BSONObjBuilder pointer will be null.
     * Also, note that the NextAction is both an input and output argument to allow
     * the client to suggest a different action for the fetcher to take post-callback.
     *
     * The callback function 'work' is not allowed to call into the Fetcher instance. This
     * behavior is undefined and may result in a deadlock.
     *
     * An optional retry policy may be provided for the first remote command request so that
     * the remote command scheduler will re-send the command in case of transient network errors.
     ','line_number':110,'multiline':True]
['text':'*
     * Returns host where remote commands will be sent to.
     ','line_number':159,'multiline':True]
['text':'*
     * Returns command object sent in first remote command.
     ','line_number':164,'multiline':True]
['text':'*
     * Returns metadata object sent in remote commands.
     ','line_number':169,'multiline':True]
['text':'*
     * Returns diagnostic information.
     ','line_number':174,'multiline':True]
['text':'*
     * Returns an informational string.
     ','line_number':179,'multiline':True]
['text':'*
     * Returns true if a remote command has been scheduled (but not completed)
     * with the executor.
     ','line_number':184,'multiline':True]
['text':'*
     * Schedules 'cmdObj' to be run on the remote server.
     ','line_number':190,'multiline':True]
['text':'*
     * Cancels remote command request.
     * Returns immediately if fetcher is not active.
     ','line_number':195,'multiline':True]
['text':'*
     * Waits for remote command requests to complete subject to the Interruptible being interrupted.
     * Returns immediately if fetcher is not active.
     *
     * Returns an OK Status if the wait completed successfully without interruption.
     * Returns a non-OK Status if the Interruptible had been interrupted.
     ','line_number':201,'multiline':True]
['text':' State transitions:','line_number':210,'multiline':False]
['text':' PreStart --> Running --> ShuttingDown --> Complete','line_number':211,'multiline':False]
['text':' It is possible to skip intermediate states. For example,','line_number':212,'multiline':False]
['text':' Calling shutdown() when the cloner has not started will transition from PreStart directly','line_number':213,'multiline':False]
['text':' to Complete.','line_number':214,'multiline':False]
['text':' This enum class is made public for testing.','line_number':215,'multiline':False]
['text':'*
     * Returns current fetcher state.
     * For testing only.
     ','line_number':218,'multiline':True]
['text':'*
     * Returns a Future that will be resolved when the fetcher completes its work.
     ','line_number':224,'multiline':True]
['text':'*
     * Schedules getMore command to be run by the executor
     ','line_number':234,'multiline':True]
['text':'*
     * Callback for remote command.
     ','line_number':239,'multiline':True]
['text':'*
     * Sets fetcher state to inactive and notifies waiters.
     ','line_number':245,'multiline':True]
['text':'*
     * Sends a kill cursor for the specified id and collection (namespace)
     *
     * Note: Errors are ignored and no retry is done
     ','line_number':250,'multiline':True]
['text':'*
     * Returns whether the fetcher is in shutdown.
     ','line_number':257,'multiline':True]
['text':'*
     * Waits for remote command requests to complete.
     * Returns immediately if fetcher is not active.
     ','line_number':263,'multiline':True]
['text':' Not owned by us.','line_number':269,'multiline':False]
['text':' Protects member data of this Fetcher.','line_number':278,'multiline':False]
['text':' Current fetcher state. See comments for State enum class for details.','line_number':283,'multiline':False]
['text':' _first is true for first query response and false for subsequent responses.','line_number':286,'multiline':False]
['text':' Using boolean instead of a counter to avoid issues with wrap around.','line_number':287,'multiline':False]
['text':' Callback handle to the scheduled getMore command.','line_number':290,'multiline':False]
['text':' Socket timeout','line_number':293,'multiline':False]
['text':' First remote command scheduler.','line_number':297,'multiline':False]
['text':' Promise that is resolved when a fetcher completes or shuts down.','line_number':302,'multiline':False]
['text':'*
 * Insertion operator for Fetcher::State. Formats fetcher state for output stream.
 * For testing only.
 ','line_number':306,'multiline':True]
['text':' namespace mongo','line_number':312,'multiline':False]
