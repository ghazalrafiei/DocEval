['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 * An abstract class, defines the external interface for static ReplicaSetMonitor methods and
 * provides a means to refresh the local view.
 * A ReplicaSetMonitor holds a state about the replica set and provides a means to refresh the local
 * view. All methods perform the required synchronization to allow callers from multiple threads.
 ','line_number':48,'multiline':True]
['text':'*
     * Creates a new ReplicaSetMonitor, if it doesn't already exist.
     ','line_number':58,'multiline':True]
['text':'*
     * gets a cached Monitor per name. The getter method returns nullptr if there is no monitor
     * registered for the particular replica set.
     ','line_number':66,'multiline':True]
['text':'*
     * Removes the ReplicaSetMonitor for the given set name from ReplicaSetMonitorManager.
     * Drop and remove the ReplicaSetMonitor for the given set name if it exists.
     * Then all connections for this host are deleted from the connection pool DBConnectionPool.
     * Those two steps are not performed atomically together, but the possible (unlikely) race:
     *  1. RSM is dropped and removed
     *  2. Another RSM is created for the same name
     *  3. Pooled connections are cleared
     * is not creating any incorrectness, it is only inefficient.
     ','line_number':72,'multiline':True]
['text':'*
     * Returns the change notifier for the underlying ReplicaMonitorManager
     ','line_number':84,'multiline':True]
['text':'*
     * Permanently stops all monitoring on replica sets and clears all cached information
     * as well. As a consequence, NEVER call this if you have other threads that have a
     * DBClientReplicaSet instance. This method should be used for unit test only.
     ','line_number':89,'multiline':True]
['text':'*
     * Permanently stops all monitoring on replica sets.
     ','line_number':96,'multiline':True]
['text':'*
     * @return callback helper to safely cleanup 'ReplicaSetMonitor' and 'globalConnPool' when the
     * instance of ReplicaSetMonitor for the 'name' is being destroyed.
     ','line_number':105,'multiline':True]
['text':' namespace mongo','line_number':114,'multiline':False]
