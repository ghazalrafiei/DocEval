['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 * This DBClientConnection mock allows us to intercept outgoing client requests and to simulate a
 * remote server's responses to these requests. We use this to test DBClientCursor, since a
 * DBClientConnection is how a DBClientCursor interacts with the rest of the world. By mocking the
 * behavior of the DBClientConnection (i.e. the network) we can make sure that DBClientCursor
 * behaves correctly, assuming correct behavior of DBClientConnection.
 ','line_number':66,'multiline':True]
['text':' dummy server address.','line_number':76,'multiline':False]
['text':' No-op.','line_number':83,'multiline':False]
['text':' Intercept request.','line_number':107,'multiline':False]
['text':' Mock response.','line_number':114,'multiline':False]
['text':'*
     * An OP_MSG response to a 'find' command.
     ','line_number':130,'multiline':True]
['text':'*
     * An OP_MSG response to a 'getMore' command.
     ','line_number':140,'multiline':True]
['text':'*
     * A generic non-ok OP_MSG command response.
     ','line_number':150,'multiline':True]
['text':' Set up the DBClientCursor and a mock client connection.','line_number':168,'multiline':False]
['text':' Set up mock 'find' response.','line_number':175,'multiline':False]
['text':' Trigger a find command.','line_number':187,'multiline':False]
['text':' First batch from the initial find command.','line_number':190,'multiline':False]
['text':' Test that the metadata reader callback is called once.','line_number':194,'multiline':False]
['text':' Set a terminal getMore response with cursorId 0.','line_number':197,'multiline':False]
['text':' Trigger a subsequent getMore command.','line_number':201,'multiline':False]
['text':' Second batch from the getMore command.','line_number':204,'multiline':False]
['text':' Test that the metadata reader callback is called twice.','line_number':209,'multiline':False]
['text':' Set up the DBClientCursor and a mock client connection.','line_number':214,'multiline':False]
['text':' Set up mock 'find' response.','line_number':231,'multiline':False]
['text':' Trigger a find command.','line_number':236,'multiline':False]
['text':' First batch from the initial find command.','line_number':239,'multiline':False]
['text':' Set a terminal getMore response with cursorId 0.','line_number':244,'multiline':False]
['text':' Trigger a subsequent getMore command.','line_number':248,'multiline':False]
['text':' Second batch from the getMore command.','line_number':251,'multiline':False]
['text':' Set up the DBClientCursor and a mock client connection.','line_number':261,'multiline':False]
['text':'isExhaust','line_number':265,'multiline':True]
['text':' Set up mock 'find' response.','line_number':268,'multiline':False]
['text':' Verify that the initial 'find' request was sent.','line_number':275,'multiline':False]
['text':' Create a 'getMore' response and set it as the mock response. The 'moreToCome' flag is set on','line_number':283,'multiline':False]
['text':' the response to indicate this is an exhaust message.','line_number':284,'multiline':False]
['text':' Request more results. This call should trigger the first 'getMore' request with exhaust','line_number':291,'multiline':False]
['text':' flag set.','line_number':292,'multiline':False]
['text':' Create and set a terminal 'getMore' response. The 'moreToCome' flag is not set, since this is','line_number':306,'multiline':False]
['text':' the last message of the stream.','line_number':307,'multiline':False]
['text':' Request more results. This call to 'more' should not trigger a new 'getMore' request, since','line_number':313,'multiline':False]
['text':' the remote server should already be streaming results to us. After getting the final batch,','line_number':314,'multiline':False]
['text':' the cursor should be exhausted i.e. "dead".','line_number':315,'multiline':False]
['text':' Set up the DBClientCursor and a mock client connection.','line_number':325,'multiline':False]
['text':'isExhaust','line_number':329,'multiline':True]
['text':' Set up mock 'find' response.','line_number':332,'multiline':False]
['text':' Verify that the initial 'find' request was sent.','line_number':339,'multiline':False]
['text':' Create and set a mock 'getMore' response. The 'moreToCome' flag is NOT set on the response,','line_number':346,'multiline':False]
['text':' even though exhaust mode was requested by the client. It is legal for a server to do this,','line_number':347,'multiline':False]
['text':' even if the cursor is not exhausted. In response, the client should resend a 'getMore' to','line_number':348,'multiline':False]
['text':' restart the stream.','line_number':349,'multiline':False]
['text':' Request more results. This call should trigger the first 'getMore' request with exhaust','line_number':355,'multiline':False]
['text':' flag set.','line_number':356,'multiline':False]
['text':' Create another mock 'getMore' response. This one has the 'moreToCome' flag set.','line_number':370,'multiline':False]
['text':' Request more results again. This call should trigger another 'getMore' request, since the','line_number':377,'multiline':False]
['text':' previous response had no 'moreToCome' flag set. This time the mock server will respond with','line_number':378,'multiline':False]
['text':' the 'moreToCome' flag set.','line_number':379,'multiline':False]
['text':' Exhaust the cursor with a terminal 'getMore' response.','line_number':392,'multiline':False]
['text':' Get the last returned document.','line_number':398,'multiline':False]
['text':' The cursor should now be exhausted.','line_number':403,'multiline':False]
['text':' Set up the DBClientCursor and a mock client connection.','line_number':409,'multiline':False]
['text':'isExhaust','line_number':413,'multiline':True]
['text':' Set up mock 'find' response.','line_number':416,'multiline':False]
['text':' Verify that the initial 'find' request was sent.','line_number':423,'multiline':False]
['text':' Create and set a mock error response.','line_number':429,'multiline':False]
['text':' Try to request more results, and expect an error.','line_number':434,'multiline':False]
['text':' Set up the DBClientCursor and a mock client connection.','line_number':440,'multiline':False]
['text':'isExhaust','line_number':444,'multiline':True]
['text':' Set up mock 'find' response.','line_number':447,'multiline':False]
['text':' Verify that the initial 'find' request was sent.','line_number':454,'multiline':False]
['text':' Create and set a getMore response that has the 'moreToCome' flag but also a cursor id of','line_number':460,'multiline':False]
['text':' zero.','line_number':461,'multiline':False]
['text':' Try to request more results, and expect an error.','line_number':467,'multiline':False]
['text':' Set up the DBClientCursor and a mock client connection.','line_number':473,'multiline':False]
['text':' Set up mock 'find' response.','line_number':481,'multiline':False]
['text':' Verify that the 'find' request was sent with readOnce.','line_number':488,'multiline':False]
['text':' "Resume fields" refers to $_requestResumeToken and $_resumeAfter.','line_number':498,'multiline':False]
['text':' Set up the DBClientCursor and a mock client connection.','line_number':500,'multiline':False]
['text':' Set up mock 'find' response.','line_number':509,'multiline':False]
['text':' Verify that the 'find' request was sent with $_requestResumeToken and $_resumeAfter.','line_number':516,'multiline':False]
['text':' This tests DBClientCursor in tailable mode. Cases to test are:','line_number':530,'multiline':False]
['text':' 1. Initial find command has {tailable: true} set.','line_number':531,'multiline':False]
['text':' 2. A getMore can handle a normal batch correctly.','line_number':532,'multiline':False]
['text':' 3. A getMore can handle an empty batch correctly.','line_number':533,'multiline':False]
['text':' 4. The tailable cursor is not dead until the cursorId is 0 in the response.','line_number':534,'multiline':False]
['text':' Set up the DBClientCursor and a mock client connection.','line_number':536,'multiline':False]
['text':' Set up mock 'find' response.','line_number':544,'multiline':False]
['text':' --- Test 1 ---','line_number':551,'multiline':False]
['text':' Verify that the initial 'find' request was sent.','line_number':552,'multiline':False]
['text':' --- Test 2 ---','line_number':561,'multiline':False]
['text':' Create a 'getMore' response with two documents and set it as the mock response.','line_number':562,'multiline':False]
['text':' Request more results. This call should trigger the first 'getMore' request.','line_number':567,'multiline':False]
['text':' --- Test 3 ---','line_number':581,'multiline':False]
['text':' Create a 'getMore' response with an empty batch and set it as the mock response.','line_number':582,'multiline':False]
['text':' Request more results. This call should trigger the second 'getMore' request.','line_number':586,'multiline':False]
['text':' more() should return false on an empty batch.','line_number':587,'multiline':False]
['text':' But the cursor should be still valid.','line_number':597,'multiline':False]
['text':' --- Test 4 ---','line_number':600,'multiline':False]
['text':' Create a 'getMore' response with cursorId = 0 and set it as the mock response.','line_number':601,'multiline':False]
['text':' Request more results. This call should trigger the third 'getMore' request.','line_number':605,'multiline':False]
['text':' Cursor is dead if the cursorId is 0.','line_number':616,'multiline':False]
['text':' Request more results. This should not trigger a new 'getMore' request as the cursor is dead.','line_number':619,'multiline':False]
['text':' This tests DBClientCursor in tailable awaitData mode. Cases to test are:','line_number':626,'multiline':False]
['text':' 1. Initial find command has {tailable: true} and {awaitData: true} set.','line_number':627,'multiline':False]
['text':' 2. A subsequent getMore command sets awaitData timeout correctly.','line_number':628,'multiline':False]
['text':' Set up the DBClientCursor and a mock client connection.','line_number':630,'multiline':False]
['text':' Set up mock 'find' response.','line_number':639,'multiline':False]
['text':' --- Test 1 ---','line_number':646,'multiline':False]
['text':' Verify that the initial 'find' request was sent.','line_number':647,'multiline':False]
['text':' --- Test 2 ---','line_number':660,'multiline':False]
['text':' Create a 'getMore' response with two documents and set it as the mock response.','line_number':661,'multiline':False]
['text':' Request more results. This call should trigger the first 'getMore' request.','line_number':666,'multiline':False]
['text':' Make sure the correct awaitData timeout is sent.','line_number':675,'multiline':False]
['text':' This tests DBClientCursor in tailable awaitData exhaust mode. Cases to test are:','line_number':684,'multiline':False]
['text':' 1. Initial find command has {tailable: true} and {awaitData: true} set.','line_number':685,'multiline':False]
['text':' 2. The first getMore command sets awaitData timeout correctly and has kExhaustSupported flag.','line_number':686,'multiline':False]
['text':' 3. Exhaust receive can handle a normal batch correctly.','line_number':687,'multiline':False]
['text':' 4. Exhaust receive can handle an empty batch correctly.','line_number':688,'multiline':False]
['text':' 5. Cursor resends a new 'getMore' command if the previous response had no 'moreToCome' flag.','line_number':689,'multiline':False]
['text':' 6. The tailable cursor is not dead until the cursorId is 0 in the response.','line_number':690,'multiline':False]
['text':' Set up the DBClientCursor and a mock client connection.','line_number':692,'multiline':False]
['text':'isExhaust','line_number':698,'multiline':True]
['text':' Set up mock 'find' response.','line_number':701,'multiline':False]
['text':' --- Test 1 ---','line_number':708,'multiline':False]
['text':' Verify that the initial 'find' request was sent.','line_number':709,'multiline':False]
['text':' --- Test 2 ---','line_number':722,'multiline':False]
['text':' Create a 'getMore' response and set it as the mock response. The 'moreToCome' flag is set on','line_number':726,'multiline':False]
['text':' the response to indicate this is an exhaust message.','line_number':727,'multiline':False]
['text':' Request more results. This call should trigger the first 'getMore' request with exhaust','line_number':734,'multiline':False]
['text':' flag set.','line_number':735,'multiline':False]
['text':' --- Test 3 ---','line_number':752,'multiline':False]
['text':' Create a 'getMore' response with the 'moreToCome' flag set and set it as the mock response.','line_number':753,'multiline':False]
['text':' Request more results. But this should not trigger a new 'getMore' request because the','line_number':758,'multiline':False]
['text':' previous response had the 'moreToCome' flag set.','line_number':759,'multiline':False]
['text':' --- Test 4 ---','line_number':768,'multiline':False]
['text':' Create a 'getMore' response with an empty batch and the 'moreToCome' flag set and set it as','line_number':769,'multiline':False]
['text':' the mock response.','line_number':770,'multiline':False]
['text':' Request more results. But this should not trigger a new 'getMore' request because the','line_number':775,'multiline':False]
['text':' previous response had the 'moreToCome' flag set.','line_number':776,'multiline':False]
['text':' more() should return false on an empty batch.','line_number':778,'multiline':False]
['text':' But the cursor should be still valid.','line_number':782,'multiline':False]
['text':' --- Test 5 ---','line_number':786,'multiline':False]
['text':' Create a 'getMore' response without the 'moreToCome' flag and set it as the mock response.','line_number':787,'multiline':False]
['text':' Request more results. But this should not trigger a new 'getMore' request because the','line_number':791,'multiline':False]
['text':' previous response had the 'moreToCome' flag set.','line_number':792,'multiline':False]
['text':' --- Test 6 ---','line_number':801,'multiline':False]
['text':' Create a 'getMore' response with cursorId 0 and set it as the mock response.','line_number':802,'multiline':False]
['text':' Request more results. This should trigger a new 'getMore' request because the previous','line_number':806,'multiline':False]
['text':' response had no 'moreToCome' flag.','line_number':807,'multiline':False]
['text':' Cursor is dead if the cursorId is 0.','line_number':819,'multiline':False]
['text':' Request more results. This should not trigger a new 'getMore' request as the cursor is dead.','line_number':823,'multiline':False]
['text':' This tests DBClientCursor supports oplog query with special fields in the command request.','line_number':830,'multiline':False]
['text':' 1. Initial find command has "filter", "tailable", "awaitData", "maxTimeMS", "batchSize",','line_number':831,'multiline':False]
['text':'    "term" and "readConcern" fields set.','line_number':832,'multiline':False]
['text':' 2. A subsequent getMore command sets awaitData timeout and lastKnownCommittedOpTime','line_number':833,'multiline':False]
['text':'    correctly.','line_number':834,'multiline':False]
['text':' Set up the DBClientCursor and a mock client connection.','line_number':836,'multiline':False]
['text':' Set up mock 'find' response.','line_number':855,'multiline':False]
['text':' --- Test 1 ---','line_number':862,'multiline':False]
['text':' Verify that the initial 'find' request was sent.','line_number':863,'multiline':False]
['text':' --- Test 2 ---','line_number':882,'multiline':False]
['text':' Create a 'getMore' response with two documents and set it as the mock response.','line_number':883,'multiline':False]
['text':' Request more results. This call should trigger the first 'getMore' request.','line_number':888,'multiline':False]
['text':' Make sure the correct awaitData timeout is sent.','line_number':897,'multiline':False]
['text':' Make sure the correct term is sent.','line_number':899,'multiline':False]
['text':' Make sure the correct lastKnownCommittedOpTime is sent.','line_number':901,'multiline':False]
['text':' namespace','line_number':911,'multiline':False]
['text':' namespace mongo','line_number':912,'multiline':False]
