['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 * Schedules a remote command request. On receiving a response from task executor (or remote
 * server), decides if the response should be forwarded to the "_callback" provided in the
 * constructor based on the retry policy.
 *
 * If the command is successful or has been canceled (either by calling cancel() or canceled by
 * the task executor on shutdown), the response is forwarded immediately to "_callback" and the
 * scheduler becomes inactive.
 *
 * Otherwise, the retry policy (specified at construction) is used to decide if we should
 * resubmit the remote command request. The retry policy is defined by:
 *     - maximum number of times to run the remote command;
 *     - maximum elapsed time of all failed remote command responses (requires SERVER-24067);
 *     - list of error codes, if present in the response, should stop the scheduler.
 ','line_number':52,'multiline':True]
['text':'*
     * Generates a retry policy that will send the remote command request to the source at most
     * once.
     ','line_number':74,'multiline':True]
['text':'*
     * Creates a retry policy that will send the remote command request at most "maxAttempts".
     * (Requires SERVER-24067) The scheduler will also stop retrying if the total elapsed time
     * of all failed requests exceeds "maxResponseElapsedTotal".
     ','line_number':80,'multiline':True]
['text':'*
     * Creates scheduler but does not schedule any remote command request.
     ','line_number':89,'multiline':True]
['text':'*
     * Returns true if we have scheduled a remote command and are waiting for the response.
     ','line_number':99,'multiline':True]
['text':'*
     * Schedules remote command request.
     ','line_number':105,'multiline':True]
['text':'*
     * Cancels scheduled remote command requests.
     * Returns immediately if the scheduler is not active.
     * It is fine to call this multiple times.
     ','line_number':110,'multiline':True]
['text':'*
     * Waits until the scheduler is inactive.
     * It is fine to call this multiple times.
     ','line_number':117,'multiline':True]
['text':'*
     * Schedules remote command to be run by the executor.
     * "requestCount" is number of requests scheduled before calling this function.
     * When this function is called for the first time by startup(), "requestCount" will be 0.
     * The executor will invoke _remoteCommandCallback() with the remote command response and
     * ("requestCount" + 1).
     ','line_number':130,'multiline':True]
['text':'*
     * Callback for remote command.
     ','line_number':139,'multiline':True]
['text':'*
     * Notifies caller that the scheduler has completed processing responses.
     ','line_number':144,'multiline':True]
['text':' Not owned by us.','line_number':149,'multiline':False]
['text':' Protects member data of this scheduler declared after mutex.','line_number':158,'multiline':False]
['text':' State transitions:','line_number':164,'multiline':False]
['text':' PreStart --> Running --> ShuttingDown --> Complete','line_number':165,'multiline':False]
['text':' It is possible to skip intermediate states. For example,','line_number':166,'multiline':False]
['text':' Calling shutdown() when the scheduler has not started will transition from PreStart directly','line_number':167,'multiline':False]
['text':' to Complete.','line_number':168,'multiline':False]
['text':' (M)','line_number':170,'multiline':False]
['text':' Callback handle to the scheduled remote command.','line_number':172,'multiline':False]
['text':'*
 * Policy used by RemoteCommandRetryScheduler to determine if it is necessary to schedule another
 * remote command request.
 ','line_number':176,'multiline':True]
['text':'*
     * Retry scheduler should not send remote command request more than this limit.
     ','line_number':184,'multiline':True]
['text':'*
     * Retry scheduler should not re-send remote command request if total response elapsed times of
     * prior responses exceed this limit.
     * Assumes that re-sending the command will not exceed the limit returned by
     * "getMaximumAttempts()".
     * Returns executor::RemoteCommandRequest::kNoTimeout if this limit should be ignored.
     ','line_number':189,'multiline':True]
['text':'*
     * Checks the error code in the most recent remote command response and returns true if
     * scheduler should retry the remote command request.
     * Assumes that re-sending the command will not exceed the limit returned by
     * "getMaximumAttempts()" and total response elapsed time has not been exceeded (see
     * "getMaximumResponseElapsedTotal()").
     ','line_number':198,'multiline':True]
['text':' namespace mongo','line_number':277,'multiline':False]
