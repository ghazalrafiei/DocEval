['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 * A stage used only internally to merge results that are being gathered from remote hosts, possibly
 * including this host.
 *
 * Does not assume ownership of cursors until the first call to getNext(). This is to allow this
 * stage to be used on mongos without actually iterating the cursors. For example, when this stage
 * is parsed on mongos it may later be decided that the merging should happen on one of the shards.
 * Then this stage is forwarded to the merging shard, and it should not kill the cursors when it
 * goes out of scope on mongos.
 ','line_number':65,'multiline':True]
['text':'*
     * Parses a serialized version of this stage.
     ','line_number':79,'multiline':True]
['text':'*
     * Creates a new DocumentSourceMergeCursors from the given parameters.
     ','line_number':85,'multiline':True]
['text':'*
     * Extracts the remote cursors and converts the execution machinery from a DocumentSource to a
     * RouterStage interface. Can only be called at planning time before any call to getNext().
     ','line_number':91,'multiline':True]
['text':'*
     * Serializes this stage to be sent to perform the merging on a different host.
     ','line_number':104,'multiline':True]
['text':'*
     * Returns the set of shard ids whose cursor has already been established.
     ','line_number':129,'multiline':True]
['text':'*
     * Returns the high water mark sort key for the given cursor, if it exists; otherwise, returns
     * an empty BSONObj. Calling this method causes the underlying BlockingResultsMerger to be
     * populated and assumes ownership of the remote cursors.
     ','line_number':136,'multiline':True]
['text':' In cases where a cursor was established with a batchSize of 0, the first getMore','line_number':147,'multiline':False]
['text':' might specify a custom maxTimeMS (AKA await data timeout). In these cases we will not','line_number':148,'multiline':False]
['text':' have iterated the cursor yet so will not have populated the merger, but need to','line_number':149,'multiline':False]
['text':' remember/track the custom await data timeout. We will soon iterate the cursor, so we','line_number':150,'multiline':False]
['text':' just populate the merger now and let it track the await data timeout itself.','line_number':151,'multiline':False]
['text':'*
     * Adds the specified shard cursors to the set of cursors to be merged. The results from the
     * new cursors will be returned as normal through getNext().
     ','line_number':157,'multiline':True]
['text':'*
     * Marks the remote cursors as unowned, meaning that they won't be killed upon disposing of this
     * DocumentSource.
     ','line_number':167,'multiline':True]
['text':'*
     * Converts '_armParams' into the execution machinery to merge the cursors. See below for why
     * this is done lazily. Clears '_armParams' and populates '_blockingResultsMerger'.
     ','line_number':188,'multiline':True]
['text':'*
     * Adds the shard Ids of the given remote cursors into the _shardsWithCursors set.
     ','line_number':194,'multiline':True]
['text':'*
     * Get the Async Results Merger Params or return boost:none if it is not set. This is used by
     * DocumentSourceMergeCursorsMultiTenancyTest for unit test purpose.
     ','line_number':199,'multiline':True]
['text':' When we have parsed the params out of a BSONObj, the object needs to stay around while the','line_number':210,'multiline':False]
['text':' params are in use. We store them here.','line_number':211,'multiline':False]
['text':' '_blockingResultsMerger' is lazily populated. Until we need to use it, '_armParams' will be','line_number':214,'multiline':False]
['text':' populated with the parameters. Once we start using '_blockingResultsMerger', '_armParams'','line_number':215,'multiline':False]
['text':' will become boost::none. We do this to prevent populating '_blockingResultsMerger' on mongos','line_number':216,'multiline':False]
['text':' before serializing this stage and sending it to a shard to perform the merge. If we always','line_number':217,'multiline':False]
['text':' populated '_blockingResultsMerger', then the destruction of this stage would cause the','line_number':218,'multiline':False]
['text':' cursors within '_blockingResultsMerger' to be killed prematurely. For example, if this stage','line_number':219,'multiline':False]
['text':' is parsed on mongos then forwarded to the shards, it should not kill the cursors when it goes','line_number':220,'multiline':False]
['text':' out of scope on mongos.','line_number':221,'multiline':False]
['text':' Indicates whether the cursors stored in _armParams are "owned", meaning the cursors should be','line_number':225,'multiline':False]
['text':' killed upon disposal of this DocumentSource.','line_number':226,'multiline':False]
['text':' Set containing shard ids with valid cursors.','line_number':229,'multiline':False]
['text':' namespace mongo','line_number':233,'multiline':False]
