['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' IWYU pragma: no_include "cxxabi.h"','line_number':34,'multiline':False]
['text':' For this test pretend 'kTestTargetNss' is not sharded so that we can use $out.','line_number':112,'multiline':False]
['text':' Mock out a response as if the database doesn't exist.','line_number':143,'multiline':False]
['text':' If the output collection doesn't exist, we don't know how to distribute the output documents so','line_number':154,'multiline':False]
['text':' cannot insert an $exchange. The $merge stage should later create a new, unsharded collection.','line_number':155,'multiline':False]
['text':' Pretend there are no collections in this database.','line_number':176,'multiline':False]
['text':' A $limit stage requires a single merger.','line_number':190,'multiline':False]
['text':' Sharded by {_id: 1}, [MinKey, 0) on shard "0", [0, MaxKey) on shard "1".','line_number':192,'multiline':False]
['text':' Sharded by {_id: 1}, [MinKey, 0) on shard "0", [0, MaxKey) on shard "1".','line_number':217,'multiline':False]
['text':' One for each shard.','line_number':239,'multiline':False]
['text':' Sharded by {_id: 1}, [MinKey, 0) on shard "0", [0, MaxKey) on shard "1".','line_number':252,'multiline':False]
['text':' One for each shard.','line_number':276,'multiline':False]
['text':' Sharded by {_id: 1}, [MinKey, 0) on shard "0", [0, MaxKey) on shard "1".','line_number':293,'multiline':False]
['text':' One for each shard.','line_number':316,'multiline':False]
['text':' Sharded by {_id: 1}, [MinKey, 0) on shard "0", [0, MaxKey) on shard "1".','line_number':333,'multiline':False]
['text':' This would be the merging half of the pipeline if the original pipeline was','line_number':337,'multiline':False]
['text':' [{$sort: {x: 1}},','line_number':338,'multiline':False]
['text':'  {$group: {_id: "$x"}},','line_number':339,'multiline':False]
['text':'  {$out: {to: "sharded_by_id", mode: "replaceDocuments"}}].','line_number':340,'multiline':False]
['text':' No $sort stage appears in the merging half since we'd expect that to be absorbed by the','line_number':341,'multiline':False]
['text':' $mergeCursors and AsyncResultsMerger.','line_number':342,'multiline':False]
['text':' One for each shard.','line_number':361,'multiline':False]
['text':' Sharded by {_id: "hashed"}, [MinKey, 0) on shard "0", [0, MaxKey) on shard "1".','line_number':378,'multiline':False]
['text':' This would be the merging half of the pipeline if the original pipeline was','line_number':382,'multiline':False]
['text':' [{$sort: {x: 1}},','line_number':383,'multiline':False]
['text':'  {$group: {_id: "$x"}},','line_number':384,'multiline':False]
['text':'  {$merge: {into: "sharded_by_id",  whenMatched: "fail", whenNotMatched: "insert"}}].','line_number':385,'multiline':False]
['text':' No $sort stage appears in the merging half since we'd expect that to be absorbed by the','line_number':386,'multiline':False]
['text':' $mergeCursors and AsyncResultsMerger.','line_number':387,'multiline':False]
['text':' One for each shard.','line_number':408,'multiline':False]
['text':' Sharded by {_id: 1}, [MinKey, 0) on shard "0", [0, MaxKey) on shard "1".','line_number':425,'multiline':False]
['text':' Because '_id' is populated from '$_id.country', we cannot prove that '_id' is a simple','line_number':450,'multiline':False]
['text':' rename. We cannot prove that '_id' is not an array, and thus the $project could do more','line_number':451,'multiline':False]
['text':' than a rename.','line_number':452,'multiline':False]
['text':' Sharded by {_id: 1}, [MinKey, 0) on shard "0", [0, MaxKey) on shard "1".','line_number':460,'multiline':False]
['text':' As an example of a pipeline that might replace a map reduce, imagine that we are performing a','line_number':464,'multiline':False]
['text':' word count, and the shards part of the pipeline tokenized some text field of each document','line_number':465,'multiline':False]
['text':' into {word: <token>, count: 1}. Then this is the merging half of the pipeline:','line_number':466,'multiline':False]
['text':' One for each shard.','line_number':489,'multiline':False]
['text':' As an example of a pipeline that might replace a map reduce, imagine that we are performing a','line_number':531,'multiline':False]
['text':' word count, and the shards part of the pipeline tokenized some text field of each document','line_number':532,'multiline':False]
['text':' into {word: <token>, count: 1}. Then this is the merging half of the pipeline:','line_number':533,'multiline':False]
['text':' One for each shard.','line_number':557,'multiline':False]
['text':' We'd like to test that a compound shard key pattern can be used. Strangely, the only case we can','line_number':580,'multiline':False]
['text':' actually perform an exchange today on a compound shard key is when the shard key contains fields','line_number':581,'multiline':False]
['text':' which are all duplicates. This is due to the limitations of tracking renames through dots, see','line_number':582,'multiline':False]
['text':' SERVER-36787 for an example.','line_number':583,'multiline':False]
['text':' One for each shard.','line_number':642,'multiline':False]
['text':' Make sure each shard has the same chunks that it started with, just with the names of the','line_number':650,'multiline':False]
['text':' boundary fields translated. For each chunk that we created to begin with, make sure its','line_number':651,'multiline':False]
['text':' corresponding/translated chunk is present on the same shard in the same order.','line_number':652,'multiline':False]
['text':' namespace','line_number':676,'multiline':False]
['text':' namespace mongo','line_number':677,'multiline':False]
