['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 * ClusterCursorManager is a container for ClusterClientCursor objects.  It manages the lifetime of
 * its registered cursors and tracks basic information about them.
 *
 * Each registered cursor is either in a 'pinned' or an 'idle' state.  Registered cursors must be
 * pinned in order to iterate results, and cursors may only be pinned by one client at a time (this
 * ensures that the result stream is only directed to a single client at a time).  Pinning a cursor
 * transfers ownership of the cursor to a PinnedCursor object (although the manager maintains
 * information about registered cursors even when they're pinned).  Ownership is transferred back to
 * the manager by calling PinnedCursor::returnCursor().
 *
 * The manager supports killing of registered cursors, either through the PinnedCursor object or
 * with the kill*() suite of methods.
 *
 * No public methods throw exceptions, and all public methods are thread-safe.
 ','line_number':78,'multiline':True]
['text':'','line_number':99,'multiline':False]
['text':' Enum/struct declarations, for use with public methods below.','line_number':100,'multiline':False]
['text':'','line_number':101,'multiline':False]
['text':' Represents a cursor retrieving data from a single remote source.','line_number':104,'multiline':False]
['text':' Represents a cursor retrieving data from multiple remote sources.','line_number':107,'multiline':False]
['text':' Represents a cursor retrieving data queued in memory on the router.','line_number':110,'multiline':False]
['text':' Represents a cursor that should be killed automatically after a period of inactivity.','line_number':115,'multiline':False]
['text':' Represents a "no timeout" cursor.','line_number':118,'multiline':False]
['text':' Represents a non-exhausted cursor.','line_number':123,'multiline':False]
['text':' Represents an exhausted cursor.','line_number':126,'multiline':False]
['text':' Count of open cursors registered with CursorType::MultiTarget.','line_number':131,'multiline':False]
['text':' Count of open cursors registered with CursorType::SingleTarget.','line_number':134,'multiline':False]
['text':' Count of open cursors registered with CursorType::QueuedData.','line_number':137,'multiline':False]
['text':' Count of pinned cursors.','line_number':140,'multiline':False]
['text':' Represents a function that may be passed into a ClusterCursorManager method which checks','line_number':144,'multiline':False]
['text':' whether the current client is authorized to perform the operation in question. The function','line_number':145,'multiline':False]
['text':' will be passed the list of users authorized to use the cursor.','line_number':146,'multiline':False]
['text':'*
     * PinnedCursor is a moveable, non-copyable class representing ownership of a cursor that has
     * been leased from a ClusterCursorManager.
     *
     * A PinnedCursor can either be in a state where it owns a cursor, or can be in a null state
     * where it owns no cursor.  If a cursor is owned, the underlying cursor can be iterated with
     * next(), and the underlying cursor can be returned to the manager with the returnCursor()
     * method (and after it is returned, no cursor will be owned). When a PinnedCursor is created,
     * the underlying cursor is attached to the current OperationContext.
     *
     * Invoking the PinnedCursor's destructor while it owns a cursor will kill, detach from the
     * current OperationContext, and return the cursor.
     ','line_number':149,'multiline':True]
['text':'*
         * Creates a PinnedCursor owning no cursor.
         ','line_number':167,'multiline':True]
['text':'*
         * If a cursor is not owned, performs no action.  Otherwise, informs the manager that the
         * cursor should be killed, and transfers ownership of the cursor back to the manager.
         ','line_number':172,'multiline':True]
['text':'*
         * Creates a PinnedCursor by moving from 'other'.
         ','line_number':178,'multiline':True]
['text':'*
         * Moves 'other' into '*this'.  If '*this' was owning a cursor, informs the manager that the
         * cursor should be killed, and transfers ownership of the cursor back to the manager.
         ','line_number':183,'multiline':True]
['text':'*
         * Returns a pointer to the ClusterClientCursor that this PinnedCursor owns. A cursor must
         * be owned.
         ','line_number':189,'multiline':True]
['text':'*
         * Transfers ownership of the underlying cursor back to the manager, and detaches it from
         * the current OperationContext. A cursor must be owned, and a cursor will no longer be
         * owned after this method completes.
         *
         * If 'Exhausted' is passed, the manager will de-register and destroy the cursor after it
         * is returned.
         ','line_number':198,'multiline':True]
['text':'*
         * Returns the cursor id for the underlying cursor, or zero if no cursor is owned.
         ','line_number':208,'multiline':True]
['text':'*
         * Returns a GenericCursor version of the pinned cursor.
         ','line_number':213,'multiline':True]
['text':' ClusterCursorManager is a friend so that its methods can call the PinnedCursor','line_number':219,'multiline':False]
['text':' constructor declared below, which is private to prevent clients from calling it directly.','line_number':220,'multiline':False]
['text':'*
         * Creates a PinnedCursor owning the given cursor, which must be checked out from the given
         * manager.  Does not take ownership of 'manager'.  'manager' and 'cursor' must be non-null,
         * and 'cursorId' must be non-zero.
         ','line_number':223,'multiline':True]
['text':'*
         * Informs the manager that the cursor should be killed, and transfers ownership of the
         * cursor back to the manager.  A cursor must be owned.
         ','line_number':233,'multiline':True]
['text':'*
     * CursorEntry is a movable, non-copyable container for a single cursor.
     ','line_number':245,'multiline':True]
['text':' A cursor is kill pending if it's checked out by an OperationContext that was','line_number':279,'multiline':False]
['text':' interrupted.','line_number':280,'multiline':False]
['text':' Must hold the Client lock when calling isKillPending().','line_number':285,'multiline':False]
['text':'*
         * Returns a cursor guard holding the cursor owned by this CursorEntry for an operation to
         * use. Only one operation may use the cursor at a time, so callers should check that
         * getOperationUsingCursor() returns null before using this function. Callers may not pass
         * nullptr for opCtx. Ownership of the cursor is given to the returned
         * ClusterClientCursorGuard; callers that want to assume ownership over the cursor directly
         * must unpack the cursor from the returned guard.
         ','line_number':314,'multiline':True]
['text':'*
         * Creates a generic cursor from the cursor inside this entry. Should only be called on
         * idle cursors. The caller must supply the cursorId and namespace because the CursorEntry
         * does not have access to them.  Cannot be called if this CursorEntry does not own an
         * underlying ClusterClientCursor.
         ','line_number':330,'multiline':True]
['text':'*
         * Indicate that the cursor is no longer in use by an operation. Once this is called,
         * another operation may check the cursor out.
         ','line_number':342,'multiline':True]
['text':'*
         * The client OperationKey from the OperationContext at the time of registering a cursor.
         ','line_number':374,'multiline':True]
['text':'*
         * Current operation using the cursor. Non-null if the cursor is checked out.
         ','line_number':381,'multiline':True]
['text':'*
         * The UUID of the Client that opened the cursor.
         ','line_number':386,'multiline':True]
['text':'*
         * The set of users authorized to use this cursor.
         ','line_number':391,'multiline':True]
['text':'*
     * Constructs an empty manager.
     *
     * Does not take ownership of 'clockSource'.  'clockSource' must refer to a non-null clock
     * source that is valid for the lifetime of the constructed ClusterCursorManager.
     ','line_number':397,'multiline':True]
['text':'*
     * Can only be called if the manager no longer owns any cursors.
     ','line_number':405,'multiline':True]
['text':'*
     * Kills and reaps all cursors currently owned by this cursor manager, and puts the manager
     * into the shutting down state where it will not accept any new cursors for registration.
     ','line_number':410,'multiline':True]
['text':'*
     * Registers the given cursor with this manager, and returns the registered cursor's id, or
     * a non-OK status if something went wrong.
     *
     * 'cursor' must be non-null.  'cursorType' should reflect whether or not the cursor is
     * operating on a sharded namespace (this will be used for reporting purposes).
     * 'cursorLifetime' should reflect whether or not this cursor should be immune from the idle
     * cursor destruction procedure.
     *
     * If the OperationContext has a deadline set (from a maxTimeMS), stashes the remaining time
     * limit on 'cursor' for use in subsequent getMores.
     *
     * On an error return, kills 'cursor'.
     *
     * Does not block.
     ','line_number':416,'multiline':True]
['text':'*
     * Moves the given cursor to the 'pinned' state, and transfers ownership of the cursor to the
     * PinnedCursor object returned.  Cursors that are pinned must later be returned with
     * PinnedCursor::returnCursor().
     *
     * Only one client may pin a given cursor at a time.  If the given cursor is already pinned,
     * returns an error Status with code CursorInUse.  If the given cursor is not registered or has
     * a pending kill, returns an error Status with code CursorNotFound.
     *
     * Checking out a cursor will attach it to the given operation context.
     *
     * 'authChecker' is function that will be called with the list of users authorized to use this
     * cursor. This function should check whether the current client is also authorized to use this
     * cursor, and if not, return an error status, which will cause checkOutCursor to fail.
     *
     * If 'checkSessionAuth' is 'kCheckSession' or left unspecified, this function also checks if
     * the current session in the specified 'opCtx' has privilege to access the cursor specified by
     * 'id.' In this case, this function returns a 'mongo::Status' with information regarding the
     * nature of the inaccessability when the cursor is not accessible. If 'kNoCheckSession' is
     * passed for 'checkSessionAuth,' this function does not check if the current session is
     * authorized to access the cursor with the given id.
     *
     * This method updates the 'last active' time associated with the cursor to the current time.
     *
     * Does not block.
     ','line_number':439,'multiline':True]
['text':'*
     * This method will find the given cursor, and if it exists, call 'authChecker', passing the
     * list of users authorized to use the cursor. Will propagate the return value of authChecker.
     ','line_number':471,'multiline':True]
['text':'*
     * Informs the manager that the given cursor should be killed.  The cursor need not necessarily
     * be in the 'idle' state, and the lifetime type of the cursor is ignored.
     *
     * If the given cursor is not registered, returns an error Status with code CursorNotFound.
     * Otherwise, marks the cursor as 'kill pending' and returns Status::OK().
     *
     * A thread which is currently using a cursor may not call killCursor() on it, but rather
     * should kill the cursor by checking it back into the manager in the exhausted state.
     *
     * May block waiting for other threads to finish, but does not block on the network.
     ','line_number':480,'multiline':True]
['text':'*
     * Kill the cursors satisfying the given predicate. Returns the number of cursors killed.
     ','line_number':494,'multiline':True]
['text':'*
     * Informs the manager that all mortal cursors with a 'last active' time equal to or earlier
     * than 'cutoff' should be killed.  The cursors need not necessarily be in the 'idle' state.
     * The number of killed cursors is added to '_cursorsTimedOut' counter.
     *
     * May block waiting for other threads to finish, but does not block on the network.
     *
     * Returns the number of cursors that were killed due to inactivity.
     ','line_number':500,'multiline':True]
['text':'*
     * Kills all cursors which are registered at the time of the call. If a cursor is registered
     * while this function is running, it may not be killed. If the caller wants to guarantee that
     * all cursors are killed, shutdown() should be used instead.
     *
     * May block waiting for other threads to finish, but does not block on the network.
     ','line_number':511,'multiline':True]
['text':'*
     * Returns the number of open cursors on a ClusterCursorManager, broken down by type.
     *
     * Does not block.
     ','line_number':520,'multiline':True]
['text':'*
     * Appends sessions that have open cursors in this cursor manager to the given set of lsids.
     ','line_number':527,'multiline':True]
['text':'*
     * Returns a list of GenericCursors for all idle (non-pinned) cursors in the cursor manager.
     ','line_number':532,'multiline':True]
['text':'*
     * Returns a list of all open cursors for the given session.
     ','line_number':541,'multiline':True]
['text':'*
     * Transfers ownership of the given pinned cursor back to the manager, and moves the cursor to
     * the 'idle' state.
     *
     * If 'cursorState' is 'Exhausted', the cursor will be destroyed.
     *
     * Thread-safe.
     *
     * Intentionally private.  Clients should use public methods on PinnedCursor to check a cursor
     * back in.
     ','line_number':551,'multiline':True]
['text':'*
     * Will detach a cursor, release the lock and then call kill() on it.
     ','line_number':566,'multiline':True]
['text':'*
     * Returns a pointer to the CursorEntry for the given cursor.  If the given cursor is not
     * registered, returns null.
     *
     * Not thread-safe.
     ','line_number':573,'multiline':True]
['text':'*
     * Allocates a new cursor id (a positive 64 bit number) that is not already in use.
     ','line_number':581,'multiline':True]
['text':'*
     * De-registers the given cursor, and returns an owned pointer to the underlying
     * ClusterClientCursor object.
     *
     * If the given cursor is pinned, returns an error Status with code CursorInUse.  If the given
     * cursor is not registered, returns an error Status with code CursorNotFound.
     *
     * Not thread-safe.
     ','line_number':586,'multiline':True]
['text':'*
     * Flags the OperationContext that's using the given cursor as interrupted.
     ','line_number':599,'multiline':True]
['text':' Clock source.  Used when the 'last active' time for a cursor needs to be set/updated.  May be','line_number':604,'multiline':False]
['text':' concurrently accessed by multiple threads.','line_number':605,'multiline':False]
['text':' Synchronizes access to all private state variables below.','line_number':608,'multiline':False]
['text':' Randomness source.  Used for cursor id generation.','line_number':613,'multiline':False]
['text':' Map from CursorId to CursorEntry.','line_number':617,'multiline':False]
['text':'*
 * Record metrics for the current operation on opDebug and aggregates those metrics for queryStats
 * use. If a cursor is provided (via ClusterClientCursorGuard or
 * ClusterCursorManager::PinnedCursor), metrics are aggregated on the cursor; otherwise, metrics are
 * written directly to the queryStats store.
 * NOTE: Metrics are taken from opDebug.additiveMetrics, so CurOp::setEndOfOpMetrics must be called
 * *prior* to calling these.
 *
 * Currently, queryStats is only collected for find and aggregate requests (and their subsequent
 * getMore requests), so these should only be called from those request paths.
 ','line_number':623,'multiline':True]
['text':' namespace mongo','line_number':638,'multiline':False]
