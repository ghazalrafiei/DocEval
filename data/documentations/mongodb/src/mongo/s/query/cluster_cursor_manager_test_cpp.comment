['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
     * Returns an unowned pointer to the manager owned by this test fixture.
     ','line_number':87,'multiline':True]
['text':'*
     * Returns an unowned pointer to the mock clock source owned by this test fixture.
     ','line_number':94,'multiline':True]
['text':'*
     * Returns an unowned pointer to the OperationContext owned by this test fixture.
     ','line_number':101,'multiline':True]
['text':'*
     * Allocates a mock cursor, which can be used with the 'isMockCursorKilled' method below.
     ','line_number':108,'multiline':True]
['text':' Allocate a new boolean to our list to track when this cursor is killed.','line_number':114,'multiline':False]
['text':' Allocate and return a cursor with a kill callback that sets the cursor's killed flag in','line_number':117,'multiline':False]
['text':' our list.  Note that it is safe to capture the kill flag in our list by reference','line_number':118,'multiline':False]
['text':' (std::list<>::push_back() does not invalidate references, and our list outlives the','line_number':119,'multiline':False]
['text':' manager).','line_number':120,'multiline':False]
['text':'*
     * Returns whether or not the i-th allocated cursor been killed.  'i' should be zero-indexed,
     * i.e. the initial allocated cursor can be checked for a kill with 'isMockCursorKilled(0)'.
     ','line_number':126,'multiline':True]
['text':' Set up another client to kill the cursor.','line_number':136,'multiline':False]
['text':' List of flags representing whether our allocated cursors have been killed yet.  The value of','line_number':145,'multiline':False]
['text':' the flag is true iff the cursor has been killed.','line_number':146,'multiline':False]
['text':'','line_number':147,'multiline':False]
['text':' We use std::list<> for this member (instead of std::vector<>, for example) so that we can','line_number':148,'multiline':False]
['text':' keep references that don't get invalidated as the list grows.','line_number':149,'multiline':False]
['text':' Test that registering a cursor and checking it out returns a pin to the same cursor.','line_number':156,'multiline':False]
['text':' Test that registering a cursor returns a non-zero cursor id.','line_number':179,'multiline':False]
['text':' Test that checking out a cursor returns a pin to the correct cursor.','line_number':191,'multiline':False]
['text':' Test that checking out a cursor returns a pin to the correct cursor, when multiple cursors are','line_number':215,'multiline':False]
['text':' registered.','line_number':216,'multiline':False]
['text':' Test that checking out a pinned cursor returns an error with code ErrorCodes::CursorInUse.','line_number':245,'multiline':False]
['text':' Test that checking out a killed cursor returns an error with code ErrorCodes::CursorNotFound.','line_number':263,'multiline':False]
['text':' Test that checking out an unknown cursor returns an error with code ErrorCodes::CursorNotFound.','line_number':279,'multiline':False]
['text':' Test that checking out a unknown cursor returns an error with code ErrorCodes::CursorNotFound,','line_number':285,'multiline':False]
['text':' even if there is an existing cursor with the same namespace but a different cursor id.','line_number':286,'multiline':False]
['text':' Test that checking out a cursor updates the 'last active' time associated with the cursor to the','line_number':301,'multiline':False]
['text':' current time.','line_number':302,'multiline':False]
['text':' Test that checking in a cursor updates the 'last active' time associated with the cursor to the','line_number':335,'multiline':False]
['text':' current time.','line_number':336,'multiline':False]
['text':' Test that killing a pinned cursor by id successfully kills the cursor.','line_number':355,'multiline':False]
['text':' Test that killing a pinned cursor by id successfully kills the cursor.','line_number':368,'multiline':False]
['text':' When the cursor is pinned the operation which checked out the cursor should be interrupted.','line_number':382,'multiline':False]
['text':' Test that killing a cursor by id successfully kills the correct cursor, when multiple cursors are','line_number':390,'multiline':False]
['text':' registered.','line_number':391,'multiline':False]
['text':' Register cursors and populate 'cursorIds' with the returned cursor ids.','line_number':395,'multiline':False]
['text':' Kill each cursor and verify that it was successfully killed.','line_number':405,'multiline':False]
['text':' Test that killing an unknown cursor returns an error with code ErrorCodes::CursorNotFound.','line_number':412,'multiline':False]
['text':' Test that killing an unknown cursor returns an error with code ErrorCodes::CursorNotFound,','line_number':418,'multiline':False]
['text':' even if there is an existing cursor with the same namespace but a different cursor id.','line_number':419,'multiline':False]
['text':' Test that killing all mortal expired cursors correctly kills a mortal expired cursor.','line_number':432,'multiline':False]
['text':' Test that killing all mortal expired cursors does not kill a cursor that is unexpired.','line_number':444,'multiline':False]
['text':' Test that killing all mortal expired cursors does not kill a cursor that is immortal.','line_number':458,'multiline':False]
['text':' Test that killing all mortal expired cursors does not kill a mortal expired cursor that is','line_number':470,'multiline':False]
['text':' pinned.','line_number':471,'multiline':False]
['text':' Test that killing all mortal expired cursors kills the correct cursors when multiple cursors are','line_number':489,'multiline':False]
['text':' registered.','line_number':490,'multiline':False]
['text':' Test that killMortalCursorsInactiveSince() increases cursorsTimeOut().','line_number':517,'multiline':False]
['text':' Test that killing all cursors successfully kills all cursors.','line_number':532,'multiline':False]
['text':' Tests that we can kill cusors based on their opkey.','line_number':620,'multiline':False]
['text':' Test that the Client that registered a cursor is correctly recorded.','line_number':641,'multiline':False]
['text':' Now insert some cursors under a different client.','line_number':649,'multiline':False]
['text':' Ensure we only matched the initial client, not the alternate one.','line_number':669,'multiline':False]
['text':' Test that a new ClusterCursorManager's stats() is initially zero for the cursor counts.','line_number':678,'multiline':False]
['text':' Test that registering a sharded cursor updates the corresponding counter in stats().','line_number':685,'multiline':False]
['text':' Test that registering a not-sharded cursor updates the corresponding counter in stats().','line_number':696,'multiline':False]
['text':' Test that checking out a cursor updates the pinned counter in stats().','line_number':707,'multiline':False]
['text':' Test that registering multiple sharded and not-sharded cursors updates the corresponding','line_number':721,'multiline':False]
['text':' counters in stats().','line_number':722,'multiline':False]
['text':' Test that killing a sharded cursor decrements the corresponding counter in stats().','line_number':748,'multiline':False]
['text':' Test that killing a not-sharded cursor decrements the corresponding counter in stats().','line_number':762,'multiline':False]
['text':' Test that killing a pinned cursor decrements the corresponding counter in stats().','line_number':776,'multiline':False]
['text':' Test that exhausting a sharded cursor decrements the corresponding counter in stats().','line_number':795,'multiline':False]
['text':' Test that exhausting a not-sharded cursor decrements the corresponding counter in stats().','line_number':813,'multiline':False]
['text':' Test that checking a pinned cursor in as exhausted decrements the corresponding counter in','line_number':831,'multiline':False]
['text':' stats().','line_number':832,'multiline':False]
['text':' Test that checking a pinned cursor in as *not* exhausted decrements the corresponding counter in','line_number':850,'multiline':False]
['text':' stats().','line_number':851,'multiline':False]
['text':' Test that the PinnedCursor default constructor creates a pin that owns no cursor.','line_number':869,'multiline':False]
['text':' Test that returning a pinned cursor correctly unpins the cursor, and leaves the pin owning no','line_number':875,'multiline':False]
['text':' cursor.','line_number':876,'multiline':False]
['text':' Test that returning a pinned cursor with 'Exhausted' correctly de-registers and destroys the','line_number':897,'multiline':False]
['text':' cursor, and leaves the pin owning no cursor.','line_number':898,'multiline':False]
['text':' Cursor should have been killed and destroyed.','line_number':916,'multiline':False]
['text':' Test that when a cursor is returned as exhausted but is still managing non-exhausted remote','line_number':923,'multiline':False]
['text':' cursors, the cursor is destroyed immediately.','line_number':924,'multiline':False]
['text':' Cursor should be killed as soon as it's checked in.','line_number':944,'multiline':False]
['text':' Test that the PinnedCursor move assignment operator correctly kills the cursor if it has not yet','line_number':951,'multiline':False]
['text':' been returned.','line_number':952,'multiline':False]
['text':' Test that the PinnedCursor destructor correctly kills the cursor if it has not yet been returned.','line_number':967,'multiline':False]
['text':' Test that PinnedCursor::remotesExhausted() correctly forwards to the underlying mock cursor.','line_number':983,'multiline':False]
['text':' Test that killed cursors which are still pinned are not destroyed immediately.','line_number':1001,'multiline':False]
['text':' The cursor cleanup system should not destroy the cursor either.','line_number':1020,'multiline':False]
['text':' The cursor's operation context should be marked as interrupted, but the cursor itself should','line_number':1023,'multiline':False]
['text':' not have been destroyed.','line_number':1024,'multiline':False]
['text':' The cursor can be destroyed once it is returned to the manager.','line_number':1027,'multiline':False]
['text':' Test that a cursor correctly stores API parameters.','line_number':1032,'multiline':False]
['text':' Even if it's checked back in as not exhausted, it should have been marked as killed when','line_number':1096,'multiline':False]
['text':' shutdown() was called.','line_number':1097,'multiline':False]
['text':'*
 * Test that a manager whose cursors do not have sessions does not return them.
 ','line_number':1122,'multiline':True]
['text':' Add a cursor with no session to the cursor manager.','line_number':1126,'multiline':False]
['text':' Manager should have no active sessions.','line_number':1134,'multiline':False]
['text':'*
 * Test a manager that has one cursor running inside of a session.
 ','line_number':1140,'multiline':True]
['text':' Add a cursor with a session to the cursor manager.','line_number':1144,'multiline':False]
['text':' Retrieve all sessions active in manager - set should contain just lsid.','line_number':1154,'multiline':False]
['text':' Retrieve all cursors for this lsid - should be just ours.','line_number':1160,'multiline':False]
['text':' Remove the cursor from the manager.','line_number':1165,'multiline':False]
['text':' There should be no more cursor entries by session id.','line_number':1168,'multiline':False]
['text':'*
 * Test getting the lsid of a cursor while it is checked out of the manager.
 ','line_number':1175,'multiline':True]
['text':' Add a cursor with a session to the cursor manager.','line_number':1179,'multiline':False]
['text':' Check the cursor out, then try to append cursors, see that we get one.','line_number':1189,'multiline':False]
['text':'*
 * Test a manager with multiple cursors running inside of the same session.
 ','line_number':1197,'multiline':True]
['text':' Add two cursors on the same session to the cursor manager.','line_number':1201,'multiline':False]
['text':' Retrieve all sessions - set should contain just lsid.','line_number':1218,'multiline':False]
['text':' Retrieve all cursors for session - should be both cursors.','line_number':1224,'multiline':False]
['text':' Remove one cursor from the manager.','line_number':1230,'multiline':False]
['text':' Should still be able to retrieve the session.','line_number':1233,'multiline':False]
['text':' Should still be able to retrieve remaining cursor by session.','line_number':1239,'multiline':False]
['text':'*
 * Test a manager with multiple cursors running inside of different sessions.
 ','line_number':1245,'multiline':True]
['text':' Register two cursors with different lsids, and one without.','line_number':1252,'multiline':False]
['text':' Retrieve all sessions - should be both lsids.','line_number':1276,'multiline':False]
['text':' Retrieve cursors for each session - should be just one.','line_number':1283,'multiline':False]
['text':'*
 * Test a manager with many cursors running inside of different sessions.
 ','line_number':1293,'multiline':True]
['text':' Retrieve all sessions.','line_number':1308,'multiline':False]
['text':' The underlying cursor's txnNumber should be returned.','line_number':1347,'multiline':False]
['text':' namespace','line_number':1352,'multiline':False]
['text':' namespace mongo','line_number':1354,'multiline':False]
