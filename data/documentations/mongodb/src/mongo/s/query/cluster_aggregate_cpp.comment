['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' "Resolve" involved namespaces into a map. We won't try to execute anything on a mongos, but we','line_number':113,'multiline':False]
['text':' still have to populate this map so that any $lookups, etc. will be able to have a resolved view','line_number':114,'multiline':False]
['text':' definition. It's okay that this is incorrect, we will repopulate the real namespace map on the','line_number':115,'multiline':False]
['text':' mongod. Note that this function must be called before forwarding an aggregation command on an','line_number':116,'multiline':False]
['text':' unsharded collection, in order to verify that the involved namespaces are allowed to be sharded.','line_number':117,'multiline':False]
['text':' Build an appropriate ExpressionContext for the pipeline. This helper instantiates an appropriate','line_number':126,'multiline':False]
['text':' collator, creates a MongoProcessInterface for use by the pipeline's stages, and sets the','line_number':127,'multiline':False]
['text':' collection UUID if provided.','line_number':128,'multiline':False]
['text':' This will be null if attempting to build an interface for the simple collator.','line_number':140,'multiline':False]
['text':' Create the expression context, and set 'inMongos' to true. We explicitly do *not* set','line_number':145,'multiline':False]
['text':' mergeCtx->tempDir.','line_number':146,'multiline':False]
['text':' Serialize the 'AggregateCommandRequest' and save it so that the original command can be','line_number':162,'multiline':False]
['text':' reconstructed for dispatch to a new shard, which is sometimes necessary for change streams','line_number':163,'multiline':False]
['text':' pipelines.','line_number':164,'multiline':False]
['text':' Rewrite ShardNotFound as NamespaceNotFound so that appendEmptyResultSet swallows it.','line_number':177,'multiline':False]
['text':' Create a set of ShardIds that own a chunk belonging to any of the collections involved in','line_number':191,'multiline':False]
['text':' this pipeline. This will be used to determine whether the pipeline targeted all of the shards','line_number':192,'multiline':False]
['text':' that own chunks for any collection involved or not.','line_number':193,'multiline':False]
['text':'*
 * Performs validations related to API versioning, time-series stages, and general command
 * validation.
 * Throws UserAssertion if any of the validations fails
 *     - validation of API versioning on each stage on the pipeline
 *     - validation of API versioning on 'AggregateCommandRequest' request
 *     - validation of time-series related stages
 *     - validation of command parameters
 ','line_number':232,'multiline':True]
['text':'*
 * Rebuilds the pipeline and uses a different granularity value for the 'bucketMaxSpanSeconds' field
 * in the $_internalUnpackBucket stage.
 ','line_number':249,'multiline':True]
['text':'*
 * Builds an expCtx with which to parse the request's pipeline, then parses the pipeline and
 * registers the pre-optimized pipeline with query stats collection.
 ','line_number':291,'multiline':True]
['text':' Populate the collation. If this is a change stream, take the user-defined collation if one','line_number':304,'multiline':False]
['text':' exists, or an empty BSONObj otherwise. Change streams never inherit the collection's default','line_number':305,'multiline':False]
['text':' collation, and since collectionless aggregations generally run on the 'admin'','line_number':306,'multiline':False]
['text':' database, the standard logic would attempt to resolve its non-existent UUID and','line_number':307,'multiline':False]
['text':' collation by sending a specious 'listCollections' command to the config servers.','line_number':308,'multiline':False]
['text':' Build an ExpressionContext for the pipeline. This instantiates an appropriate collator,','line_number':317,'multiline':False]
['text':' includes all involved namespaces, and creates a shared MongoProcessInterface for use by','line_number':318,'multiline':False]
['text':' the pipeline's stages.','line_number':319,'multiline':False]
['text':' uuid ','line_number':325,'multiline':True]
['text':' Skip query stats recording for queryable encryption queries.','line_number':330,'multiline':False]
['text':' Perform the query settings lookup and attach it to the ExpressionContext.','line_number':338,'multiline':False]
['text':' namespace','line_number':350,'multiline':False]
['text':' Perform some validations on the LiteParsedPipeline and request before continuing with the','line_number':377,'multiline':False]
['text':' aggregation command.','line_number':378,'multiline':False]
['text':' If the routing table is not already taken by the higher level, fill it now.','line_number':413,'multiline':False]
['text':' If the routing table is valid, we obtain a reference to it. If the table is not valid,','line_number':415,'multiline':False]
['text':' then either the database does not exist, or there are no shards in the cluster. In the','line_number':416,'multiline':False]
['text':' latter case, we always return an empty cursor. In the former case, if the requested','line_number':417,'multiline':False]
['text':' aggregation is a $changeStream, we allow the operation to continue so that stream cursors','line_number':418,'multiline':False]
['text':' can be established on the given namespace before the database or collection is actually','line_number':419,'multiline':False]
['text':' created. If the database does not exist and this is not a $changeStream, then we return','line_number':420,'multiline':False]
['text':' an empty cursor.','line_number':421,'multiline':False]
['text':' To achieve parity with mongod-style responses, parse and validate the query','line_number':444,'multiline':False]
['text':' even though the namespace is not found.','line_number':445,'multiline':False]
['text':' ignore redundant NamespaceNotFound errors.','line_number':458,'multiline':False]
['text':' if validation is ok, just return empty result','line_number':461,'multiline':False]
['text':' If the aggregate command supports encrypted collections, do rewrites of the pipeline to','line_number':481,'multiline':False]
['text':' support querying against encrypted fields.','line_number':482,'multiline':False]
['text':' Optimize the pipeline if:','line_number':495,'multiline':False]
['text':' - We have a valid routing table.','line_number':496,'multiline':False]
['text':' - We know the collection's collation.','line_number':497,'multiline':False]
['text':' - We have a change stream or need to do a FLE rewrite.','line_number':498,'multiline':False]
['text':' This is because the results of optimization may depend on knowing the collation.','line_number':499,'multiline':False]
['text':' TODO SERVER-81991: Determine whether this is necessary once all unsharded collections are','line_number':500,'multiline':False]
['text':' tracked as unsplittable collections in the sharding catalog.','line_number':501,'multiline':False]
['text':' Validate the pipeline post-optimization.','line_number':506,'multiline':False]
['text':' When the AggregationTargeter chooses a "specific shard only" policy, it does not call','line_number':529,'multiline':False]
['text':' the 'pipelineBuilder' function, so we've yet to construct an expression context or','line_number':530,'multiline':False]
['text':' register query stats. Because this is a passthrough, we only need a bare minimum','line_number':531,'multiline':False]
['text':' expression context on mongos.','line_number':532,'multiline':False]
['text':' This will be null if attempting to build an interface for the simple collator.','line_number':540,'multiline':False]
['text':' runtimeConstants ','line_number':548,'multiline':True]
['text':' Skip query stats recording for queryable encryption queries.','line_number':552,'multiline':False]
['text':' We want to hold off parsing the pipeline until it's clear we must. Because of that,','line_number':554,'multiline':False]
['text':' we wait to parse the pipeline until this callback is invoked within','line_number':555,'multiline':False]
['text':' query_stats::registerRequest.','line_number':556,'multiline':False]
['text':' If this is an explain write the explain output and return.','line_number':574,'multiline':False]
['text':' Mark expCtx as tailable and await data so CCC behaves accordingly.','line_number':610,'multiline':False]
['text':' This is an aggregation pipeline started internally, so it is not eligible for','line_number':619,'multiline':False]
['text':' sampling.','line_number':620,'multiline':False]
['text':' Report usage statistics for each stage in the pipeline.','line_number':644,'multiline':False]
['text':' Add 'command' object to explain output.','line_number':646,'multiline':False]
['text':' We pass both the underlying collection namespace and the view namespace here. The','line_number':675,'multiline':False]
['text':' underlying collection namespace is used to execute the aggregation on mongoD. Any cursor','line_number':676,'multiline':False]
['text':' returned will be registered under the view namespace so that subsequent getMore and','line_number':677,'multiline':False]
['text':' killCursors calls against the view have access.','line_number':678,'multiline':False]
['text':' For a sharded time-series collection, the routing is based on both routing table and the','line_number':683,'multiline':False]
['text':' bucketMaxSpanSeconds value. We need to make sure we use the bucketMaxSpanSeconds of the same','line_number':684,'multiline':False]
['text':' version as the routing table, instead of the one attached in the view error. This way the','line_number':685,'multiline':False]
['text':' shard versioning check can correctly catch stale routing information.','line_number':686,'multiline':False]
['text':' If the underlying namespace was changed to a view during retry, then re-run the aggregation','line_number':707,'multiline':False]
['text':' on the new resolved namespace.','line_number':708,'multiline':False]
['text':' namespace mongo','line_number':722,'multiline':False]
