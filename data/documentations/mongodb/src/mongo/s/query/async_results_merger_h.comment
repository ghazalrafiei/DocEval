['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 * Given a set of cursorIds across one or more shards, the AsyncResultsMerger calls getMore on the
 * cursors to present a single sorted or unsorted stream of documents.
 *
 * (A cursor-generating command (e.g. the find command) is one that establishes a ClientCursor and a
 * matching cursorId on the remote host. In order to retrieve all document results, getMores must be
 * issued against each of the remote cursors until they are exhausted).
 *
 * The ARM offers a non-blocking interface: if no results are immediately available on this host for
 * retrieval, calling nextEvent() schedules work on the remote hosts in order to generate further
 * results. The event is signaled when further results are available.
 *
 * Work on remote nodes is accomplished by scheduling remote work in TaskExecutor's event loop.
 *
 * Task-scheduling behavior differs depending on whether there is a sort. If the result documents
 * must be sorted, we pass the sort through to the remote nodes and then merge the sorted streams.
 * This requires waiting until we have a response from every remote before returning results.
 * Without a sort, we are ready to return results as soon as we have *any* response from a remote.
 *
 * On any error, the caller is responsible for shutting down the ARM using the kill() method.
 *
 * Does not throw exceptions.
 ','line_number':67,'multiline':True]
['text':' When mongos has to do a merge in order to return results to the client in the correct sort','line_number':95,'multiline':False]
['text':' order, it requests a sortKey meta-projection using this field name.','line_number':96,'multiline':False]
['text':' The expected sort key pattern when 'compareWholeSortKey' is true.','line_number':99,'multiline':False]
['text':'*
     * Takes ownership of the cursors from ClusterClientCursorParams by storing their cursorIds and
     * the hosts on which they exist in _remotes.
     *
     * Additionally copies each remote's first batch of results, if one exists, into that remote's
     * docBuffer. If a sort is specified in the ClusterClientCursorParams, places the remotes with
     * buffered results onto _mergeQueue.
     *
     * The TaskExecutor* must remain valid for the lifetime of the ARM.
     *
     * If 'opCtx' may be deleted before this AsyncResultsMerger, the caller must call
     * detachFromOperationContext() before deleting 'opCtx', and call reattachToOperationContext()
     * with a new, valid OperationContext before the next use.
     ','line_number':102,'multiline':True]
['text':'*
     * In order to be destroyed, either the ARM must have been kill()'ed or all cursors must have
     * been exhausted. This is so that any unexhausted cursors are cleaned up by the ARM.
     ','line_number':120,'multiline':True]
['text':'*
     * Returns true if all of the remote cursors are exhausted.
     ','line_number':126,'multiline':True]
['text':'*
     * Sets the maxTimeMS value that the ARM should forward with any internally issued getMore
     * requests.
     *
     * Returns a non-OK status if this cursor type does not support maxTimeMS on getMore (i.e. if
     * the cursor is not tailable + awaitData).
     ','line_number':131,'multiline':True]
['text':'*
     * Signals to the AsyncResultsMerger that the caller is finished using it in the current
     * context.
     ','line_number':140,'multiline':True]
['text':'*
     * Provides a new OperationContext to be used by the AsyncResultsMerger - the caller must call
     * detachFromOperationContext() before 'opCtx' is deleted.
     ','line_number':146,'multiline':True]
['text':'*
     * Returns true if there is no need to schedule remote work in order to take the next action.
     * This means that either
     *   --there is a buffered result which we can return,
     *   --or all of the remote cursors have been closed and we are done,
     *   --or an error was received and the next call to nextReady() will return an error status,
     *   --or the ARM has been killed and is in the process of shutting down. In this case,
     *   nextReady() will report an error when called.
     *
     * A return value of true indicates that it is safe to call nextReady().
     ','line_number':152,'multiline':True]
['text':'*
     * If there is a result available that has already been retrieved from a remote node and
     * buffered, then return it along with an ok status.
     *
     * If we have reached the end of the stream of results, returns boost::none along with an ok
     * status.
     *
     * If this AsyncResultsMerger is fetching results from a remote cursor tailing a capped
     * collection, may return an empty ClusterQueryResult before end-of-stream. (Tailable cursors
     * remain open even when there are no further results, and may subsequently return more results
     * when they become available.) The calling code is responsible for handling multiple empty,
     * ClusterQueryResult return values, keeping the cursor open in the tailable case.
     *
     * If there has been an error received from one of the shards, or there is an error in
     * processing results from a shard, then a non-ok status is returned.
     *
     * Invalid to call unless ready() has returned true (i.e., invalid to call if getting the next
     * result requires scheduling remote work).
     ','line_number':165,'multiline':True]
['text':'*
     * Schedules remote work as required in order to make further results available. If there is an
     * error in scheduling this work, returns a non-ok status. On success, returns an event handle.
     * The caller can pass this event handle to 'executor' in order to be blocked until further
     * results are available.
     *
     * Invalid to call unless ready() has returned false (i.e. invalid to call if the next result is
     * available without scheduling remote work).
     *
     * Also invalid to call if there is an outstanding event, created by a previous call to this
     * function, that has not yet been signaled. If there is an outstanding unsignaled event,
     * returns an error.
     *
     * If there is a sort, the event is signaled when there are buffered results for all
     * non-exhausted remotes.
     * If there is no sort, the event is signaled when some remote has a buffered result.
     ','line_number':186,'multiline':True]
['text':'*
     * Schedules a getMore on any remote hosts which:
     *  - Do not have an error status set already.
     *  - Don't already have a request outstanding.
     *  - We don't currently have any results buffered.
     *  - Are not exhausted (have a non-zero cursor id).
     * Returns an error if any of the remotes responded with an error, or if we encounter an error
     * while scheduling the getMore requests..
     *
     * In most cases users should call nextEvent() instead of this method, but this can be necessary
     * if the caller of nextEvent() calls detachFromOperationContext() before the event is signaled.
     * In such cases, the ARM cannot schedule getMores itself, and will need to be manually prompted
     * after calling reattachToOperationContext().
     *
     * It is illegal to call this method if the ARM is not attached to an OperationContext.
     ','line_number':205,'multiline':True]
['text':'*
     * Adds the specified shard cursors to the set of cursors to be merged.  The results from the
     * new cursors will be returned as normal through nextReady().
     ','line_number':223,'multiline':True]
['text':'*
     * Returns true if the cursor was opened with 'allowPartialResults:true' and results are not
     * available from one or more shards.
     ','line_number':229,'multiline':True]
['text':'*
     * Returns the number of remotes involved in this operation.
     ','line_number':235,'multiline':True]
['text':'*
     * For sorted tailable cursors, returns the most recent available sort key. This guarantees that
     * we will never return any future results which precede this key. If no results are ready to be
     * returned, this method may cause the high water mark to advance to the lowest promised sortkey
     * received from the shards. Returns an empty BSONObj if no such sort key is available.
     ','line_number':240,'multiline':True]
['text':'*
     * Starts shutting down this ARM by canceling all pending requests and scheduling killCursors
     * on all of the unexhausted remotes. Returns a 'future' that is signaled when this ARM is safe
     * to destroy.
     *
     * If there are no pending requests, schedules killCursors and signals the future immediately.
     * Otherwise, the last callback that runs after kill() is called signals the event.
     *
     * May be called multiple times (idempotent).
     *
     * Note that 'opCtx' may or may not be the same as the operation context to which this cursor is
     * currently attached. This is so that a killing thread may call this method with its own
     * operation context.
     ','line_number':248,'multiline':True]
['text':'*
     * We instantiate one of these per remote host. It contains the buffer of results we've
     * retrieved from the host but not yet returned, as well as the cursor id, and any error
     * reported from the remote.
     ','line_number':265,'multiline':True]
['text':'*
         * Returns the resolved host and port on which the remote cursor resides.
         ','line_number':276,'multiline':True]
['text':'*
         * Returns whether there is another buffered result available for this remote node.
         ','line_number':281,'multiline':True]
['text':'*
         * Returns whether the remote has given us all of its results (i.e. whether it has closed
         * its cursor).
         ','line_number':286,'multiline':True]
['text':' Used when merging tailable awaitData cursors in sorted order. In order to return any','line_number':292,'multiline':False]
['text':' result to the client we have to know that no shard will ever return anything that sorts','line_number':293,'multiline':False]
['text':' before it. This object represents a promise from the remote that it will never return a','line_number':294,'multiline':False]
['text':' result with a sort key lower than this.','line_number':295,'multiline':False]
['text':' True if this remote is eligible to provide a high water mark sort key; false otherwise.','line_number':298,'multiline':False]
['text':' The cursor id for the remote cursor. If a remote cursor is not yet exhausted, this member','line_number':301,'multiline':False]
['text':' will be set to a valid non-zero cursor id. If a remote cursor is now exhausted, this','line_number':302,'multiline':False]
['text':' member will be set to zero.','line_number':303,'multiline':False]
['text':' The namespace this cursor belongs to - note this may be different than the namespace of','line_number':306,'multiline':False]
['text':' the operation if there is a view.','line_number':307,'multiline':False]
['text':' The exact host in the shard on which the cursor resides. Can be empty if this merger has','line_number':310,'multiline':False]
['text':' 'allowPartialResults' set to true and initial cursor establishment failed on this shard.','line_number':311,'multiline':False]
['text':' The identity of the shard which the cursor belongs to.','line_number':314,'multiline':False]
['text':' This flag is set if the connection to the remote shard was lost or never established in','line_number':317,'multiline':False]
['text':' the first place or the connection is interrupted due to MaxTimeMSExpired.','line_number':318,'multiline':False]
['text':' Only applicable if the 'allowPartialResults' option is enabled.','line_number':319,'multiline':False]
['text':' The buffer of results that have been retrieved but not yet returned to the caller.','line_number':322,'multiline':False]
['text':' Is valid if there is currently a pending request to this remote.','line_number':325,'multiline':False]
['text':' Set to an error status if there is an error retrieving a response from this remote or if','line_number':328,'multiline':False]
['text':' the command result contained an error.','line_number':329,'multiline':False]
['text':' Count of fetched docs during ARM processing of the current batch. Used to reduce the','line_number':332,'multiline':False]
['text':' batchSize in getMore when mongod returned less docs than the requested batchSize.','line_number':333,'multiline':False]
['text':' If set to 'true', the cursor on this shard has been invalidated.','line_number':336,'multiline':False]
['text':' When '_compareWholeSortKey' is true, $sortKey is a scalar value, rather than an object.','line_number':354,'multiline':False]
['text':' We extract the sort key {$sortKey: <value>}. The sort key pattern '_sort' is verified to','line_number':355,'multiline':False]
['text':' be {$sortKey: 1}.','line_number':356,'multiline':False]
['text':'*
     * Parses the find or getMore command response object to a CursorResponse.
     *
     * Returns a non-OK response if the response fails to parse or if there is a cursor id mismatch.
     ','line_number':374,'multiline':True]
['text':'*
     * Helper to schedule a command asking the remote node for another batch of results.
     *
     * The 'remoteIndex' gives the position of the remote node from which we are retrieving the
     * batch in '_remotes'.
     *
     * Returns success if the command to retrieve the next batch was scheduled successfully.
     ','line_number':382,'multiline':True]
['text':'*
     * Checks whether or not the remote cursors are all exhausted.
     ','line_number':392,'multiline':True]
['text':'','line_number':397,'multiline':False]
['text':' Helpers for ready().','line_number':398,'multiline':False]
['text':'','line_number':399,'multiline':False]
['text':'','line_number':406,'multiline':False]
['text':' Helpers for nextReady().','line_number':407,'multiline':False]
['text':'','line_number':408,'multiline':False]
['text':'*
     * When nextEvent() schedules remote work, the callback uses this function to process results.
     *
     * 'remoteIndex' is the position of the relevant remote node in '_remotes', and therefore
     * indicates which node the response came from and where the new result documents should be
     * buffered.
     ','line_number':416,'multiline':True]
['text':'*
     * Cleans up if the remote cursor was killed while waiting for a response.
     ','line_number':425,'multiline':True]
['text':'*
     * Cleans up after remote query failure.
     ','line_number':430,'multiline':True]
['text':'*
     * Processes results from a remote query.
     ','line_number':435,'multiline':True]
['text':'*
     * Adds the batch of results to the RemoteCursorData. Returns false if there was an error
     * parsing the batch.
     ','line_number':440,'multiline':True]
['text':'*
     * If there is a valid unsignaled event that has been requested via nextEvent() and there are
     * buffered results that are ready to return, signals that event.
     *
     * Invalidates the current event, as we must signal the event exactly once and we only keep a
     * handle to a valid event if it is unsignaled.
     ','line_number':446,'multiline':True]
['text':'*
     * Returns true if this async cursor is waiting to receive another batch from a remote.
     ','line_number':455,'multiline':True]
['text':'*
     * Called internally when attempting to get a new event for the caller to wait on. Throws if
     * the shard cursor from which the next result is due has already been invalidated.
     ','line_number':460,'multiline':True]
['text':'*
     * If a promisedMinSortKey has been received from all remotes, returns the lowest such key.
     * Otherwise, returns boost::none.
     ','line_number':466,'multiline':True]
['text':'*
     * Schedules a getMore on any remote hosts which we need another batch from.
     ','line_number':472,'multiline':True]
['text':'*
     * Schedules a killCursors command to be run on all remote hosts that have open cursors.
     ','line_number':477,'multiline':True]
['text':'*
     * Checks if we need to schedule a killCursor command for this remote
     ','line_number':482,'multiline':True]
['text':'*
     * Updates the given remote's metadata (e.g. the cursor id) based on information in 'response'.
     ','line_number':487,'multiline':True]
['text':'*
     * Returns true if the given batch is eligible to provide a high water mark resume token for the
     * stream, false otherwise.
     ','line_number':492,'multiline':True]
['text':'*
     * Sets the initial value of the high water mark sort key, if applicable.
     ','line_number':501,'multiline':True]
['text':' Must be acquired before accessing any data members (other than _params, which is read-only).','line_number':511,'multiline':False]
['text':' Data tracking the state of our communication with each of the remote nodes.','line_number':514,'multiline':False]
['text':' The top of this priority queue is the index into '_remotes' for the remote host that has the','line_number':517,'multiline':False]
['text':' next document to return, according to the sort order. Used only if there is a sort.','line_number':518,'multiline':False]
['text':' The index into '_remotes' for the remote from which we are currently retrieving results.','line_number':521,'multiline':False]
['text':' Used only if there is *not* a sort.','line_number':522,'multiline':False]
['text':' For tailable cursors, set to true if the next result returned from nextReady() should be','line_number':529,'multiline':False]
['text':' boost::none.','line_number':530,'multiline':False]
['text':' An ordered set of (promisedMinSortKey, remoteIndex) pairs received from the shards. The first','line_number':535,'multiline':False]
['text':' element in the set will be the lowest sort key across all shards.','line_number':536,'multiline':False]
['text':' For sorted tailable cursors, records the current high-water-mark sort key. Empty otherwise.','line_number':539,'multiline':False]
['text':'','line_number':542,'multiline':False]
['text':' Killing','line_number':543,'multiline':False]
['text':'','line_number':544,'multiline':False]
['text':' Handles the promise/future mechanism used to cleanly shut down the ARM. This avoids race','line_number':548,'multiline':False]
['text':' conditions in cases where the underlying TaskExecutor is simultaneously being torn down.','line_number':549,'multiline':False]
['text':' Multiple calls to kill() can be made and each must return a future that will be notified','line_number':553,'multiline':False]
['text':' when the ARM has been cleaned up.','line_number':554,'multiline':False]
['text':' Called by the ARM when all outstanding requests have run. Notifies all threads waiting on','line_number':559,'multiline':False]
['text':' shared futures that the ARM has been cleaned up.','line_number':560,'multiline':False]
['text':' namespace mongo','line_number':572,'multiline':False]
