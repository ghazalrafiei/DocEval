['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 * This class wrap a DatabaseVersion object augmenting it with:
 *  - a sequence number to allow for forced catalog cache refreshes
 *  - a sequence number to disambiguate scenarios in which the DatabaseVersion isn't valid
 ','line_number':85,'multiline':True]
['text':'*
     * Creates a ComparableDatabaseVersion that wraps the given DatabaseVersion.
     *
     * If version is boost::none it creates a ComparableDatabaseVersion that doesn't have a valid
     * version. This is useful in some scenarios in which the DatabaseVersion is provided later
     * through ComparableDatabaseVersion::setVersion or to represent that a Database doesn't exist
     ','line_number':92,'multiline':True]
['text':'*
     * Creates a new instance which will artificially be greater than any
     * previously created ComparableDatabaseVersion and smaller than any instance
     * created afterwards. Used as means to cause the collections cache to
     * attempt a refresh in situations where causal consistency cannot be
     * inferred.
     ','line_number':102,'multiline':True]
['text':'*
     * Empty constructor needed by the ReadThroughCache.
     *
     * Instances created through this constructor will be always less than the ones created through
     * the static constructor.
     ','line_number':111,'multiline':True]
['text':'*
 * This is the root of the "read-only" hierarchy of cached catalog metadata. It is read only
 * in the sense that it only reads from the persistent store, but never writes to it. Instead
 * writes happen through the ShardingCatalogManager and the cache hierarchy needs to be invalidated.
 ','line_number':162,'multiline':True]
['text':'*
     * Shuts down and joins the executor used by all the caches to run their blocking work.
     ','line_number':175,'multiline':True]
['text':'*
     * Blocking method that ensures the specified database is in the cache, loading it if necessary,
     * and returns it. If the database was not in cache, all the sharded collections will be in the
     * 'needsRefresh' state.
     ','line_number':180,'multiline':True]
['text':'*
     * Blocking method to get both the placement information and the index information for a
     * collection.
     *
     * If the collection is sharded, returns placement info initialized with a ChunkManager and a
     * list of global indexes that may be empty if no global indexes exist. If the collection is not
     * sharded, returns placement info initialized with the primary shard for the specified database
     * and an empty list representing no global indexes. If an error occurs while loading the
     * metadata, returns a failed status.
     *
     * If the given atClusterTime is so far in the past that it is not possible to construct
     * placement info, returns a StaleClusterTime error.
     ','line_number':188,'multiline':True]
['text':'*
     * Same as the getCollectionRoutingInfoAt call above, but returns the latest known routing
     * information for the specified namespace.
     *
     * While this method may fail under the same circumstances as getCollectionRoutingInfoAt, it is
     * guaranteed to never throw StaleClusterTime, because the latest routing information should
     * always be available.
     ','line_number':205,'multiline':True]
['text':'*
     * Same as getDatbase above, but in addition forces the database entry to be refreshed.
     ','line_number':217,'multiline':True]
['text':'*
     * Same as getCollectionRoutingInfo above, but in addition causes the namespace to be refreshed.
     ','line_number':223,'multiline':True]
['text':'*
     * Same as getCollectionRoutingInfo above, but in addition, causes the placement information for
     * the namespace to be refreshed. Will only refresh the index information if the collection
     * uuid from the placement information does not match the collection uuid from the cached index
     * information.
     ','line_number':229,'multiline':True]
['text':'*
     * Same as getCollectionRoutingInfo above, but in addition, causes the index information for the
     * namespace to be refreshed. Will only refresh the placement information if the collection uuid
     * from the index information does not match the collection uuid from the cached placement
     * information.
     ','line_number':238,'multiline':True]
['text':'*
     * Same as getCollectionRoutingInfo above, but throws NamespaceNotSharded error if the namespace
     * is not sharded.
     ','line_number':247,'multiline':True]
['text':'*
     * Same as getCollectionRoutingInfoWithRefresh above, but in addition returns a
     * NamespaceNotSharded error if the collection is not sharded.
     ','line_number':254,'multiline':True]
['text':'*
     * Same as getCollectionRoutingInfoWithPlacementRefresh above, but in addition returns a
     * NamespaceNotSharded error if the collection is not sharded.
     ','line_number':261,'multiline':True]
['text':'*
     * Same as getCollectionRoutingInfo above, but throws NamespaceNotFound error if the namespace
     * is not tracked.
     ','line_number':269,'multiline':True]
['text':'*
     * Same as getCollectionRoutingInfoWithRefresh above, but in addition returns a
     * NamespaceNotFound error if the collection is not tracked.
     ','line_number':276,'multiline':True]
['text':'*
     * Same as getCollectionRoutingInfoWithPlacementRefresh above, but in addition returns a
     * NamespaceNotFound error if the collection is not tracked.
     ','line_number':283,'multiline':True]
['text':'*
     * Advances the version in the cache for the given database.
     *
     * To be called with the wantedVersion returned by a targeted node in case of a
     * StaleDatabaseVersion response.
     *
     * In the case the passed version is boost::none, invalidates the cache for the given database.
     ','line_number':290,'multiline':True]
['text':'*
     * Sets whether this operation should block behind a catalog cache refresh.
     ','line_number':301,'multiline':True]
['text':'*
     * Invalidates a single shard for the current collection if the epochs given in the chunk
     * versions match. Otherwise, invalidates the entire collection, causing any future targetting
     * requests to block on an upcoming catalog cache refresh.
     ','line_number':307,'multiline':True]
['text':'*
     * Non-blocking method, which invalidates all namespaces which contain data on the specified
     * shard and all databases which have the shard listed as their primary shard.
     ','line_number':317,'multiline':True]
['text':'*
     * Non-blocking method, which removes the entire specified database (including its collections)
     * from the cache.
     ','line_number':323,'multiline':True]
['text':'*
     * Non-blocking method, which removes all databases (including their collections) from the
     * cache.
     ','line_number':329,'multiline':True]
['text':'*
     * Reports statistics about the catalog cache to be used by serverStatus
     ','line_number':335,'multiline':True]
['text':'*
     * Non-blocking method that marks the current database entry for the dbName as needing
     * refresh. Will cause all further targetting attempts to block on a catalog cache refresh,
     * even if they do not require causal consistency.
     ','line_number':340,'multiline':True]
['text':'*
     * Non-blocking method that marks the current collection entry for the namespace as needing
     * refresh. Will cause all further targetting attempts to block on a catalog cache refresh,
     * even if they do not require causal consistency.
     ','line_number':347,'multiline':True]
['text':' Tracks how many incremental refreshes are waiting to complete currently','line_number':391,'multiline':False]
['text':' Cumulative, always-increasing counter of how many incremental refreshes have been','line_number':394,'multiline':False]
['text':' kicked off','line_number':395,'multiline':False]
['text':' Tracks how many full refreshes are waiting to complete currently','line_number':398,'multiline':False]
['text':' Cumulative, always-increasing counter of how many full refreshes have been kicked off','line_number':401,'multiline':False]
['text':' Cumulative, always-increasing counter of how many full or incremental refreshes','line_number':404,'multiline':False]
['text':' failed for whatever reason','line_number':405,'multiline':False]
['text':'*
             * Reports the accumulated statistics for serverStatus.
             ','line_number':408,'multiline':True]
['text':' Callers of this internal function that are passing allowLocks must handle allowLocks failures','line_number':430,'multiline':False]
['text':' by checking for ErrorCodes::ShardCannotRefreshDueToLocksHeld and addint the full namespace to','line_number':431,'multiline':False]
['text':' the exception.','line_number':432,'multiline':False]
['text':' Same as getCollectionRoutingInfo but will fetch the index information from the cache even if','line_number':449,'multiline':False]
['text':' the placement information is not sharded. Used internally when the a refresh is requested for','line_number':450,'multiline':False]
['text':' the index component.','line_number':451,'multiline':False]
['text':' Interface from which chunks will be retrieved','line_number':455,'multiline':False]
['text':' Executor on which the caches below will execute their blocking work','line_number':458,'multiline':False]
['text':'*
     * Encapsulates runtime statistics across all databases and collections in this catalog cache
     ','line_number':467,'multiline':True]
['text':' Counts how many times threads hit stale config exception (which is what triggers metadata','line_number':471,'multiline':False]
['text':' refreshes)','line_number':472,'multiline':False]
['text':' Cumulative, always-increasing counter of how much time threads waiting for refresh','line_number':475,'multiline':False]
['text':' combined','line_number':476,'multiline':False]
['text':'*
         * Reports the accumulated statistics for serverStatus.
         ','line_number':479,'multiline':True]
['text':' namespace mongo','line_number':487,'multiline':False]
