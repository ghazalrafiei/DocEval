['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 * Keeps track of the transaction state. A session is in use when it is being used by a request.
 ','line_number':68,'multiline':True]
['text':' The type of commit initiated for this transaction.','line_number':83,'multiline':False]
['text':' The reason why TransactionRouter::Router::stash() is called.','line_number':94,'multiline':False]
['text':' The default value to use as the statement id of the first command in the transaction if none','line_number':97,'multiline':False]
['text':' was sent.','line_number':98,'multiline':False]
['text':'*
     * Represents the options for a transaction that are shared across all participants. These
     * cannot be changed without restarting the transactions that may have already been begun on
     * every participant, i.e. clearing the current participant list.
     ','line_number':101,'multiline':True]
['text':' Set for all distributed transactions.','line_number':107,'multiline':False]
['text':' Only set for transactions with snapshot level read concern.','line_number':112,'multiline':False]
['text':'*
     * Represents a shard participant in a distributed transaction. Lives only for the duration of
     * the transaction that created it.
     ','line_number':120,'multiline':True]
['text':'*
         * Attaches necessary fields if this is participating in a multi statement transaction.
         ','line_number':132,'multiline':True]
['text':' True if the participant has been chosen as the coordinator for its transaction','line_number':139,'multiline':False]
['text':' Is updated to kReadOnly or kNotReadOnly based on the readOnly field in the participant's','line_number':142,'multiline':False]
['text':' responses to statements.','line_number':143,'multiline':False]
['text':' Returns the shared transaction options this participant was created with','line_number':146,'multiline':False]
['text':' The highest statement id of the request during which this participant was created.','line_number':149,'multiline':False]
['text':' Container for timing stats for the current transaction. Includes helpers for calculating some','line_number':153,'multiline':False]
['text':' metrics like transaction duration.','line_number':154,'multiline':False]
['text':'*
         * Returns the duration of the transaction. The transaction start time must have been set
         * before this can be called.
         ','line_number':156,'multiline':True]
['text':'*
         * Returns the duration of commit. The commit start time must have been set before this can
         * be called.
         ','line_number':162,'multiline':True]
['text':'*
         * Returns the total active time of the transaction, given the current time value. A
         * transaction is active when there is a running operation that is part of the transaction.
         ','line_number':168,'multiline':True]
['text':'*
         * Returns the total inactive time of the transaction, given the current time value. A
         * transaction is inactive when it is idly waiting for a new operation to occur.
         ','line_number':174,'multiline':True]
['text':' The start time of the transaction in millisecond resolution. Used only for diagnostics','line_number':180,'multiline':False]
['text':' reporting.','line_number':181,'multiline':False]
['text':' The start time of the transaction. Note that tick values should only ever be used to','line_number':184,'multiline':False]
['text':' measure distance from other tick values, not for reporting absolute wall clock time. A','line_number':185,'multiline':False]
['text':' value of zero means the transaction hasn't started yet.','line_number':186,'multiline':False]
['text':' The start time of the transaction commit in millisecond resolution. Used only for','line_number':189,'multiline':False]
['text':' diagnostics reporting.','line_number':190,'multiline':False]
['text':' When commit was started. A value of zero means the commit hasn't started yet.','line_number':193,'multiline':False]
['text':' The end time of the transaction. A value of zero means the transaction hasn't ended yet.','line_number':196,'multiline':False]
['text':' The total amount of active time spent by the transaction.','line_number':199,'multiline':False]
['text':' The time at which the transaction was last marked as active. The transaction is','line_number':202,'multiline':False]
['text':' considered active if this value is not equal to 0.','line_number':203,'multiline':False]
['text':' Reason a transaction terminated.','line_number':209,'multiline':False]
['text':'*
     * Helper class responsible for updating per transaction and router wide transaction metrics on
     * certain transaction events.
     ','line_number':215,'multiline':True]
['text':'*
         * Marks the transaction as active and sets the start of the transaction's active time and
         * overall start time the first time it is called.
         *
         * This method is a no-op if the transaction is not currently inactive or has already ended.
         ','line_number':248,'multiline':True]
['text':'*
         * Marks the transaction as inactive, sets the total active time of the transaction, and
         * updates relevant server status counters.
         *
         * This method is a no-op if the transaction is not currently active or has already ended.
         ','line_number':256,'multiline':True]
['text':'*
         * Marks the transaction as having begun commit, updating relevent stats. Assumes the
         * transaction is currently active.
         ','line_number':264,'multiline':True]
['text':'*
         * Marks the transaction as over, updating stats based on the termination cause, which is
         * either commit or abort.
         ','line_number':273,'multiline':True]
['text':' Pointer to the service context used to get the tick source and router wide transaction','line_number':284,'multiline':False]
['text':' metrics decorations.','line_number':285,'multiline':False]
['text':' Stats used for calculating durations for the active transaction.','line_number':288,'multiline':False]
['text':'*
     * Encapsulates the logic around selecting a global read timestamp for a sharded transaction at
     * snapshot level read concern.
     *
     * The first command in a transaction to target at least one shard must select a cluster time
     * timestamp before targeting, but may change the timestamp before contacting any shards to
     * allow optimizing the timestamp based on the targeted shards. If the first command encounters
     * a retryable error, e.g. "retargeting needed" or SnapshotTooOld, the retry may also select a
     * new timestamp. Once the first command has successfully completed, the timestamp cannot be
     * changed.
     ','line_number':292,'multiline':True]
['text':'*
         * Cannot be called until a timestamp has been set.
         ','line_number':305,'multiline':True]
['text':'*
         * Returns true if the _atClusterTime has been changed from the default uninitialized value.
         ','line_number':310,'multiline':True]
['text':'*
         * Sets the timestamp and remembers the statement id of the command that set it.
         ','line_number':315,'multiline':True]
['text':'*
         * True if the timestamp can be changed by a command running at the given statement id.
         ','line_number':320,'multiline':True]
['text':'*
     * Class used by observers to examine the state of a TransactionRouter.
     ','line_number':330,'multiline':True]
['text':'*
         * Report the current state of an session. The sessionIsActive boolean indicates whether
         * the session and transaction are currently active.
         *
         * The Client lock for the given OperationContext must be held when calling this method in
         * the case where sessionIsActive is true.
         ','line_number':337,'multiline':True]
['text':'*
         * Returns if the router has received at least one request for a transaction.
         ','line_number':349,'multiline':True]
['text':'*
         * Returns if this TransactionRouter instance can be reaped. Always true unless an operation
         * has yielded the router and has not unyielded yet. We cannot reap the instance in that
         * case or the unyield would check out a different TransactionRouter than it yielded.
         ','line_number':356,'multiline':True]
['text':' Reports the current state of the session using the provided builder.','line_number':372,'multiline':False]
['text':' Reports the 'transaction' state of this transaction for currentOp using the provided','line_number':377,'multiline':False]
['text':' builder.','line_number':378,'multiline':False]
['text':' Returns true if the atClusterTime has been changed from the default uninitialized value.','line_number':381,'multiline':False]
['text':' Shortcut to obtain the id of the session under which this transaction router runs','line_number':384,'multiline':False]
['text':' class Observer','line_number':388,'multiline':False]
['text':'*
     * Class used by a thread that has checked out the TransactionRouter's session to observe
     * and modify the transaction router.
     ','line_number':390,'multiline':True]
['text':'*
         * Starts a fresh transaction in this session or continue an existing one. Also cleans up
         * the previous transaction state.
         ','line_number':402,'multiline':True]
['text':'*
         * Updates transaction diagnostics and, if necessary, the number of active yielders when the
         * transaction's session is checked in.
         ','line_number':410,'multiline':True]
['text':'*
         * Validates transaction state is still compatible after a yield.
         ','line_number':416,'multiline':True]
['text':'*
         * Attaches the required transaction related fields for a request to be sent to the given
         * shard.
         *
         * Calling this method has the following side effects:
         * 1. Potentially selecting a coordinator.
         * 2. Adding the shard to the list of participants.
         * 3. Also append fields for first statements (ex. startTransaction, readConcern)
         *    if the shard was newly added to the list of participants.
         ','line_number':421,'multiline':True]
['text':'*
         * Processes the transaction metadata in the response from the participant if the response
         * indicates the operation succeeded.
         ','line_number':435,'multiline':True]
['text':'*
         * Returns true if the current transaction can retry on a stale version error from a
         * contacted shard. This is always true except for an error received by a write that is not
         * the first overall statement in the sharded transaction. This is because the entire
         * command will be retried, and shards that were not stale and are targeted again may
         * incorrectly execute the command a second time.
         *
         * Note: Even if this method returns true, the retry attempt may still fail, e.g. if one of
         * the shards that returned a stale version error was involved in a previously completed a
         * statement for this transaction.
         *
         * TODO SERVER-37207: Change batch writes to retry only the failed writes in a batch, to
         * allow retrying writes beyond the first overall statement.
         ','line_number':443,'multiline':True]
['text':'*
         * Updates the transaction state to allow for a retry of the current command on a stale
         * version error. This includes sending abortTransaction to all cleared participants. Will
         * throw if the transaction cannot be continued.
         ','line_number':459,'multiline':True]
['text':'*
         * Returns true if the current transaction can retry on a snapshot error. This is only true
         * on the first command recevied for a transaction.
         ','line_number':468,'multiline':True]
['text':'*
         * Resets the transaction state to allow for a retry attempt. This includes clearing all
         * participants, clearing the coordinator, resetting the global read timestamp, and sending
         * abortTransaction to all cleared participants. Will throw if the transaction cannot be
         * continued.
         ','line_number':474,'multiline':True]
['text':'*
         * Updates the transaction tracking state to allow for a retry attempt on a view resolution
         * error. This includes sending abortTransaction to all cleared participants.
         ','line_number':482,'multiline':True]
['text':'*
         * If the transaction is not running at a read concern snapshot, returns boost::none.
         * Otherwise returns the timestamps that has been selected for the transaction.
         ','line_number':488,'multiline':True]
['text':'*
         * Sets the atClusterTime for the current transaction to the latest time in the router's
         * logical clock. Does nothing if the transaction does not have snapshot read concern or an
         * atClusterTime has already been selected and cannot be changed.
         ','line_number':494,'multiline':True]
['text':'*
         * If a coordinator has been selected for the current transaction, returns its id.
         ','line_number':501,'multiline':True]
['text':'*
         * If a recovery shard has been selected for the current transaction, returns its id.
         ','line_number':506,'multiline':True]
['text':'*
         * Commits the transaction.
         *
         * For transactions that only did reads or only wrote to one shard, sends commit directly to
         * the participants and returns the first error response or the last (success) response.
         *
         * For transactions that performed writes to multiple shards, hands off the participant list
         * to the coordinator to do two-phase commit, and returns the coordinator's response.
         ','line_number':511,'multiline':True]
['text':'*
         * Sends abort to all participants.
         *
         * Returns the first error response or the last (success) response.
         ','line_number':523,'multiline':True]
['text':'*
         * Sends abort to all shards in the current participant list. Will retry on retryable
         * errors, but ignores the responses from each shard.
         ','line_number':530,'multiline':True]
['text':'*
         * If a coordinator has been selected for this transaction already, constructs a recovery
         * token, which can be used to resume commit or abort of the transaction from a different
         * router.
         ','line_number':536,'multiline':True]
['text':'*
         * Returns a string with the active transaction's transaction number and logical session id
         * (i.e. the transaction id).
         ','line_number':543,'multiline':True]
['text':'*
         * Returns the participant for this transaction or nullptr if the specified shard is not
         * participant of this transaction.
         ','line_number':549,'multiline':True]
['text':'*
         * Returns the statement id of the latest received command for this transaction.
         ','line_number':555,'multiline':True]
['text':'*
         * Returns a copy of the timing stats of the transaction router's active transaction.
         ','line_number':562,'multiline':True]
['text':'*
         * Returns if the router is not currently tracking an active transaction.
         ','line_number':570,'multiline':True]
['text':'*
         * Resets the router's state. Used when the router sees a new transaction for the first
         * time. This is required because we don't create a new router object for each transaction,
         * but instead reuse the same object across different transactions.
         ','line_number':580,'multiline':True]
['text':'*
         * Calls _resetRouterState and then resets the read concern and the cluster time of the
         * timestamp that all participant shards in the current transaction with snapshot level read
         * concern must read from.
         ','line_number':588,'multiline':True]
['text':'*
         * Continues or restarts the currently active transaction.
         ','line_number':596,'multiline':True]
['text':'*
         * Starts a new transaction or continues a transaction started by a different router to
         * recover the commit decision.
         ','line_number':603,'multiline':True]
['text':'*
         * Internal method for committing a transaction. Should only throw on failure to send
         * commit.
         ','line_number':611,'multiline':True]
['text':'*
         * Retrieves the transaction's outcome from the shard specified in the recovery token.
         ','line_number':619,'multiline':True]
['text':'*
         * Hands off coordinating a two-phase commit across all participants to the coordinator
         * shard.
         ','line_number':625,'multiline':True]
['text':'*
         * Throws NoSuchTransaction if the response from abortTransaction failed with a code other
         * than NoSuchTransaction. Does not check for write concern errors.
         ','line_number':631,'multiline':True]
['text':'*
         * Removes all participants created during the current statement from the participant list
         * and sends abortTransaction to each if there is more than one participant and the status
         * is not stale . Waits for all responses before returning.
         ','line_number':638,'multiline':True]
['text':'*
         * Creates a new participant for the shard.
         ','line_number':645,'multiline':True]
['text':'*
         * Sets the new readOnly value for the current participant on the shard.
         ','line_number':651,'multiline':True]
['text':'*
         * Updates relevant metrics when the router receives an explicit abort from the client.
         ','line_number':658,'multiline':True]
['text':'*
         * Updates relevant metrics when the router begins an implicit abort after an error.
         ','line_number':663,'multiline':True]
['text':'*
         * Updates relevant metrics when a transaction is about to begin commit.
         ','line_number':668,'multiline':True]
['text':'*
         * Updates relevant metrics when a transaction receives a successful response for commit.
         ','line_number':673,'multiline':True]
['text':'*
         * Updates relevant metrics when commit receives a response with a non-retryable command
         * error per the retryable writes specification.
         ','line_number':678,'multiline':True]
['text':'*
         * Updates relevent metrics when a transaction is continued.
         ','line_number':684,'multiline':True]
['text':'*
         * The first time this method is called it marks the transaction as over in the router's
         * diagnostics and will log transaction information if its duration is over the global
         * slowMS threshold or the transaction log componenet verbosity >= 1. Only meant to be
         * called when the router definitively knows the transaction's outcome, e.g. it should not
         * be invoked after a network error on commit.
         ','line_number':689,'multiline':True]
['text':'*
         * Returns all participants created during the current statement.
         ','line_number':699,'multiline':True]
['text':'*
         * Prints slow transaction information to the log.
         ','line_number':704,'multiline':True]
['text':'*
         * Returns the LastClientInfo object.
         ','line_number':709,'multiline':True]
['text':'*
         * Updates the LastClientInfo object with the given Client's information.
         ','line_number':714,'multiline':True]
['text':'*
         * Returns true if a status contains a stale shard or db routing error and the transaction
         * is retryable
         ','line_number':719,'multiline':True]
['text':' class Router','line_number':736,'multiline':False]
['text':'*
     * Takes a cmdObj which could have come from one of the two paths:
     *  1. Verbatim taken from the user's request (and therefore *may contain* read concern
     *     arguments) or
     *  2. Newly generated by the feature based on a user's request (and *doesn't contain* read
     *     concern arguments)
     *
     * AND outputs a new request that contains the original fields of the request along with the
     * respective readConcernArgs augmented with atClusterTimeForSnapshotReadConcern if the request
     * asks for a snapshot level.
     *
     * The 'atClusterTimeForSnapshotReadConcern' will be boost::none in all cases except when the
     * read concern level is 'snapshot' or the caller provided `atClusterTime`.
     *
     * TODO (SERVER-80526): This code re-checks that the input cmdObj is in sync with the parsed
     * readConcernArgs (i.e., that we didn't swap majority for local or snapshot somewhere along the
     * command execution path). This is very error prone and wasteful and a better architecture
     * would be if cmdObj was not allowed to contain any read concern arguments so that we can just
     * append the ones passed to the function.
     ','line_number':746,'multiline':True]
['text':'*
     * Appends the needed fields when continuing a transaction on a participant.
     ','line_number':773,'multiline':True]
['text':'*
     * Returns a new read concern settings object by combining the input settings.
     ','line_number':780,'multiline':True]
['text':'*
     * State in this struct may be read by methods of Observer or Router, and may be written by
     * methods of Router when they acquire the lock on the opCtx's Client. Access this inside
     * Observer and Router using the private o() method for reading and (Router only) the
     * o(WithLock) method for writing.
     ','line_number':790,'multiline':True]
['text':' Struct with fields txnNumber and txnRetryCounter.','line_number':798,'multiline':False]
['text':' If beginOrContinueTxn has been called, txnNumber and txnRetryCounter reflect','line_number':799,'multiline':False]
['text':' the router's currently active transaction. Otherwise, they are set to','line_number':800,'multiline':False]
['text':' kUninitializedTxnNumber and kUninitializedTxnRetryCounter by default.','line_number':801,'multiline':False]
['text':' Is updated at commit time to reflect which commit path was taken.','line_number':805,'multiline':False]
['text':' Map of current participants of the current transaction.','line_number':808,'multiline':False]
['text':' The id of participant chosen as the two-phase commit coordinator. If, at commit time,','line_number':811,'multiline':False]
['text':' two-phase commit is required, the participant list is handed off to this shard. Is unset','line_number':812,'multiline':False]
['text':' until the transaction has targeted a participant, and is set to the first participant','line_number':813,'multiline':False]
['text':' targeted. Is reset if the first participant targeted returns a "needs retargeting" error.','line_number':814,'multiline':False]
['text':' The API parameters the current transaction was started with.','line_number':817,'multiline':False]
['text':' The read concern the current transaction was started with.','line_number':820,'multiline':False]
['text':' The cluster time of the timestamp all participant shards in the current transaction with','line_number':823,'multiline':False]
['text':' snapshot level read concern must read from. Only set for transactions running with','line_number':824,'multiline':False]
['text':' snapshot level read concern.','line_number':825,'multiline':False]
['text':' String representing the reason a transaction aborted. Either the string name of the error','line_number':829,'multiline':False]
['text':' code that led to an implicit abort or "abort" if the client sent abortTransaction.','line_number':830,'multiline':False]
['text':' Information about the last client to run a transaction operation on this transaction','line_number':833,'multiline':False]
['text':' router.','line_number':834,'multiline':False]
['text':' Class responsible for updating per transaction and router wide transaction metrics on','line_number':837,'multiline':False]
['text':' certain transaction events. Unset until the transaction router has processed at least one','line_number':838,'multiline':False]
['text':' transaction command.','line_number':839,'multiline':False]
['text':' How many operations that checked out the router's session have currently yielded it. The','line_number':842,'multiline':False]
['text':' transaction number cannot be changed until this returns to 0, otherwise we cannot','line_number':843,'multiline':False]
['text':' guarantee that unyielding the session cannot fail.','line_number':844,'multiline':False]
['text':'*
     * State in this struct may be read and written by methods of the Router, only. It may
     * access the struct via the private p() accessor. No further locking is required in methods of
     * the Router.
     ','line_number':848,'multiline':True]
['text':' Indicates whether this is trying to recover a commitTransaction on the current','line_number':854,'multiline':False]
['text':' transaction.','line_number':855,'multiline':False]
['text':' The id of the recovery participant. Passed in the recoveryToken that is included on','line_number':858,'multiline':False]
['text':' responses to the client. Is unset until the transaction has done a write, and is set to','line_number':859,'multiline':False]
['text':' the first participant that reports having done a write. Is reset if that participant is','line_number':860,'multiline':False]
['text':' removed from the participant list because another participant targeted in the same','line_number':861,'multiline':False]
['text':' statement returned a "needs retargeting" error.','line_number':862,'multiline':False]
['text':' The statement id of the latest received command for this transaction. For batch writes,','line_number':865,'multiline':False]
['text':' this will be the highest stmtId contained in the batch. Incremented by one if new','line_number':866,'multiline':False]
['text':' commands do not contain statement ids.','line_number':867,'multiline':False]
['text':' The statement id of the command that began this transaction. Defaults to zero if no','line_number':870,'multiline':False]
['text':' statement id was included in the first command.','line_number':871,'multiline':False]
['text':' Track whether commit or abort have been initiated.','line_number':874,'multiline':False]
['text':' namespace mongo','line_number':879,'multiline':False]
