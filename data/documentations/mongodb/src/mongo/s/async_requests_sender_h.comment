['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 * The AsyncRequestsSender allows for sending requests to a set of remote shards in parallel.
 * Work on remote nodes is accomplished by scheduling remote work in a TaskExecutor's event loop.
 *
 * Typical usage is:
 *
 * // Add some requests
 * std::vector<AsyncRequestSender::Request> requests;
 *
 * // Creating the ARS schedules the requests immediately
 * AsyncRequestsSender ars(opCtx, executor, db, requests, readPrefSetting);
 *
 * while (!ars.done()) {
 *     // Schedule a round of retries if needed and wait for next response or error.
 *     auto response = ars.next();
 *
 *     if (!response.swResponse.isOK()) {
 *         // If partial results are tolerable, process the error as needed and continue.
 *         continue;
 *
 *         // If partial results are not tolerable but you need to retrieve responses for all
 *         // dispatched requests, use stopRetrying() and continue.
 *         ars.stopRetrying();
 *         continue;
 *
 *         // If partial results are not tolerable and you don't care about dispatched requests,
 *         // safe to destroy the ARS. It will automatically cancel pending I/O.
 *     }
 * }
 *
 * Does not throw exceptions.
 ','line_number':62,'multiline':True]
['text':'*
     * Defines a request to a remote shard that can be run by the ARS.
     ','line_number':99,'multiline':True]
['text':' ShardId of the shard to which the command will be sent.','line_number':105,'multiline':False]
['text':' The command object to send to the remote host.','line_number':108,'multiline':False]
['text':'*
     * Defines a response for a request to a remote shard.
     ','line_number':112,'multiline':True]
['text':' The shard to which the request was sent.','line_number':116,'multiline':False]
['text':' The response or error from the remote.','line_number':119,'multiline':False]
['text':'','line_number':120,'multiline':False]
['text':' The mapping between the RemoteCommandResponse returned by the task executor and this','line_number':121,'multiline':False]
['text':' field is fairly specific:','line_number':122,'multiline':False]
['text':'','line_number':123,'multiline':False]
['text':' Status is set when:','line_number':124,'multiline':False]
['text':'   * An error is returned when scheduling the task','line_number':125,'multiline':False]
['text':'   * A status is returned in the response.status field','line_number':126,'multiline':False]
['text':'','line_number':127,'multiline':False]
['text':' The value is set when:','line_number':128,'multiline':False]
['text':'   * There are no errors','line_number':129,'multiline':False]
['text':'   * Errors exist only remotely (I.e. by reading response.data for ok:0 or write errors','line_number':130,'multiline':False]
['text':'','line_number':131,'multiline':False]
['text':' I.e. if a value is set, swResponse.getValue().status.isOK()','line_number':132,'multiline':False]
['text':' The exact host on which the remote command was run. Is unset if the shard could not be','line_number':135,'multiline':False]
['text':' found or no shard hosts matching the readPreference could be found.','line_number':136,'multiline':False]
['text':'*
         * Returns the effective status of the response sent by the server.
         ','line_number':139,'multiline':True]
['text':'*
     * Constructs a new AsyncRequestsSender. The OperationContext* and TaskExecutor* must remain
     * valid for the lifetime of the ARS.
     *
     * The designatedHostsMap overrides the read preference for the shards specified, and requires
     * those shards target only the host in the map.
     ','line_number':147,'multiline':True]
['text':'*
     * Returns true if responses for all requests have been returned via next().
     ','line_number':163,'multiline':True]
['text':'*
     * Returns the next available response or error.
     *
     * If the operation is interrupted, the status of some responses may be CallbackCanceled.
     *
     * If stopRetrying() has not been called, schedules retries for any remotes that have had a
     * retriable error and have not exhausted their retries.
     *
     * Note: Must only be called from one thread at a time, and invalid to call if done() is true.
     ','line_number':168,'multiline':True]
['text':'*
     * Stops the ARS from retrying requests.
     *
     * Use this if you no longer care about getting success responses, but need to do cleanup based
     * on responses for requests that have already been dispatched.
     ','line_number':180,'multiline':True]
['text':'*
     * We instantiate one of these per remote host.
     ','line_number':189,'multiline':True]
['text':'*
         * Creates a new uninitialized remote state with a command to send.
         ','line_number':197,'multiline':True]
['text':'*
         * Returns a SemiFuture containing a shard object associated with this remote.
         *
         * This will return a SemiFuture with a ShardNotFound error status in case the shard is not
         * found.
         *
         * Additionally this call can trigger a refresh of the ShardRegistry so it could possibly
         * return other network error status related to the refresh.
         ','line_number':205,'multiline':True]
['text':'*
         * Returns true if we've already queued a response from the remote.
         ','line_number':216,'multiline':True]
['text':'*
         * Extracts a failed response from the remote, given an interruption status.
         ','line_number':223,'multiline':True]
['text':'*
         * Executes the request for the given shard, this includes any necessary retries and ends
         * with a Response getting written to the response queue.
         *
         * This is implemented by calling scheduleRequest, which handles retries internally in its
         * future chain.
         ','line_number':230,'multiline':True]
['text':'*
         * Executes a single attempt to:
         *
         * 1. resolveShardIdToHostAndPort
         * 2. scheduleRemoteCommand
         * 3. handlResponse
         *
         * for the given shard.
         ','line_number':239,'multiline':True]
['text':'*
         * Given a read preference, selects a lists of hosts on which the command can run.
         ','line_number':250,'multiline':True]
['text':'*
         * Schedules the remote command on the ARS's TaskExecutor
         ','line_number':256,'multiline':True]
['text':'*
         * Handles the remote response
         ','line_number':262,'multiline':True]
['text':' ShardId of the shard to which the command will be sent.','line_number':273,'multiline':False]
['text':' The command object to send to the remote host.','line_number':276,'multiline':False]
['text':' The designated host and port to send the command to, if provided.  Otherwise is empty().','line_number':279,'multiline':False]
['text':' The exact host on which the remote command was run. Is unset until a request has been','line_number':282,'multiline':False]
['text':' sent.','line_number':283,'multiline':False]
['text':' The number of times we've retried sending the command to this remote.','line_number':286,'multiline':False]
['text':' The metadata obj to pass along with the command remote. Used to indicate that the command is','line_number':292,'multiline':False]
['text':' ok to run on secondaries.','line_number':293,'multiline':False]
['text':' The database against which the commands are run.','line_number':296,'multiline':False]
['text':' The readPreference to use for all requests.','line_number':299,'multiline':False]
['text':' The policy to use when deciding whether to retry on an error.','line_number':302,'multiline':False]
['text':' Data tracking the state of our communication with each of the remote nodes.','line_number':305,'multiline':False]
['text':' Number of remotes we haven't returned final results from.','line_number':308,'multiline':False]
['text':' Queue of responses.  We don't actually take advantage of the thread safety of the queue, but','line_number':311,'multiline':False]
['text':' instead use it to collect results while waiting on a condvar (which allows us to use our','line_number':312,'multiline':False]
['text':' underlying baton).','line_number':313,'multiline':False]
['text':' Used to determine if the ARS should attempt to retry any requests. Is set to true when','line_number':316,'multiline':False]
['text':' stopRetrying() is called.','line_number':317,'multiline':False]
['text':' NOTE: it's important that these two members go last in this class.  That ensures that we:','line_number':322,'multiline':False]
['text':' 1. cancel/ensure no more callbacks run which touch the ARS','line_number':323,'multiline':False]
['text':' 2. cancel any outstanding work in the task executor','line_number':324,'multiline':False]
['text':' Scoped task executor which handles clean up of any handles after the ARS goes out of scope','line_number':326,'multiline':False]
['text':' Scoped baton holder which ensures any callbacks which touch this ARS are called with a','line_number':329,'multiline':False]
['text':' not-okay status (or not run, in the case of ExecutorFuture continuations).','line_number':330,'multiline':False]
['text':' Interface for yielding and unyielding resources while waiting on results from the network.','line_number':333,'multiline':False]
['text':' Null if yielding isn't necessary.','line_number':334,'multiline':False]
['text':' namespace mongo','line_number':338,'multiline':False]
