['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 * Test the chunk manager index bounds for query functionality.
 ','line_number':73,'multiline':True]
['text':' Utility function to create a CanonicalQuery','line_number':78,'multiline':False]
['text':' Assume shard key is { a: 1 }','line_number':119,'multiline':False]
['text':' { a: 2 } -> a: [2, 2]','line_number':145,'multiline':False]
['text':' { b: 2 } -> a: [MinKey, MaxKey]','line_number':152,'multiline':False]
['text':' { 'a' : { '$not' : { '$gt' : 1 } } } -> a: [MinKey, 1.0], (inf.0, MaxKey]','line_number':162,'multiline':False]
['text':' {$or: [{a: 20}, {$and: [{a:1}, {b:7}]}]} -> a: [1.0, 1.0], [20.0, 20.0]','line_number':180,'multiline':False]
['text':' {a:20, $or: [{b:1}, {c:7}]} -> a: [20.0, 20.0]','line_number':188,'multiline':False]
['text':' Logic rewrite could give a tree with root OR.','line_number':190,'multiline':False]
['text':' {$or: [{a:{$gt:2,$lt:10}}, {a:{$gt:0,$lt:5}}]} -> a: (0.0, 10.0)','line_number':196,'multiline':False]
['text':' {$or: [{a:{$gt:2,$lt:10}}, {a:{$gt:0,$lt:15}}, {a:{$gt:20}}]}','line_number':203,'multiline':False]
['text':'   -> a: (0.0, 15.0), (20.0, inf.0]','line_number':204,'multiline':False]
['text':' "{$or: [{a:{$gt:1,$lt:5},b:6}, {a:3,b:{$gt:0,$lt:10}}]}" -> a: (1.0, 5.0)','line_number':212,'multiline':False]
['text':'','line_number':219,'multiline':False]
['text':'  Compound shard key','line_number':220,'multiline':False]
['text':'','line_number':221,'multiline':False]
['text':' "{$or: [{a:{$gt:1,$lt:5}, b:{$gt:0,$lt:3}, c:6}, "','line_number':223,'multiline':False]
['text':'        "{a:3, b:{$gt:1,$lt:2}, c:{$gt:0,$lt:10}}]}",','line_number':224,'multiline':False]
['text':' -> a: (1.0, 5.0), b: (0.0, 3.0)','line_number':225,'multiline':False]
['text':' shard key','line_number':236,'multiline':False]
['text':' "{$or: [{a:{$gt:1,$lt:5}, c:6}, "','line_number':242,'multiline':False]
['text':'        "{a:3, b:{$gt:1,$lt:2}, c:{$gt:0,$lt:10}}]}"));','line_number':243,'multiline':False]
['text':' ->','line_number':244,'multiline':False]
['text':' shard key','line_number':257,'multiline':False]
['text':' {$or: [{a:{$in:[1]},b:{$in:[1]}}, {a:{$in:[1,5]},b:{$in:[1,5]}}]}','line_number':263,'multiline':False]
['text':' -> a: [1], [5]; b: [1], [5]','line_number':264,'multiline':False]
['text':' a: [1], [5]','line_number':270,'multiline':False]
['text':' b: [1], [5]','line_number':276,'multiline':False]
['text':' shard key','line_number':282,'multiline':False]
['text':'','line_number':287,'multiline':False]
['text':' Array operators','line_number':288,'multiline':False]
['text':'','line_number':289,'multiline':False]
['text':' {a : {$elemMatch: {b:1}}} -> a.b: [MinKey, MaxKey]','line_number':291,'multiline':False]
['text':' Shard key doesn't allow multikey, but query on array should succeed without error.','line_number':292,'multiline':False]
['text':' {foo: {$all: [ {$elemMatch: {a:1, b:1}}, {$elemMatch: {a:2, b:2}}]}}','line_number':301,'multiline':False]
['text':'    -> foo.a: [1, 1]','line_number':302,'multiline':False]
['text':' Or -> foo.a: [2, 2]','line_number':303,'multiline':False]
['text':' Choose one of the two possible solutions.','line_number':319,'multiline':False]
['text':' Two solutions differ only by assignment of index tags.','line_number':320,'multiline':False]
['text':' {a : [1, 2, 3]} -> a: [1, 1], [[1, 2, 3], [1, 2, 3]]','line_number':324,'multiline':False]
['text':'','line_number':336,'multiline':False]
['text':'  Features: Regex, $where, $text, hashed key','line_number':337,'multiline':False]
['text':'','line_number':338,'multiline':False]
['text':' { a: /abc/ } -> a: ["", {}), [/abc/, /abc/]','line_number':340,'multiline':False]
['text':' {$where: 'this.credits == this.debits' }','line_number':355,'multiline':False]
['text':' { $text: { $search: "coffee -cake" } }','line_number':365,'multiline':False]
['text':' { a: 2, $text: { $search: "leche", $language: "es" } }','line_number':375,'multiline':False]
['text':'  { a: 0 } -> hashed a: [hash(0), hash(0)]','line_number':385,'multiline':False]
['text':' { a: { $lt: 2, $gt: 1} } -> hashed a: [Minkey, Maxkey]','line_number':395,'multiline':False]
['text':' { a: /abc/ } -> hashed a: [Minkey, Maxkey]','line_number':407,'multiline':False]
['text':' a: [[hash(5), hash(5)], [hash(1), hash(1)]]. Note, hash(5) is less than hash(1), hence it','line_number':430,'multiline':False]
['text':' appears before hash(1).','line_number':431,'multiline':False]
['text':' b: (0,3)','line_number':437,'multiline':False]
['text':' a: (0,3]','line_number':453,'multiline':False]
['text':' b: [hash(4), hash(4)]','line_number':455,'multiline':False]
['text':' c: [MinKey, MaxKey]','line_number':458,'multiline':False]
['text':'*
 * Tests the KeyPattern key bounds generation logic.
 ','line_number':467,'multiline':True]
['text':' Key { a: 1 }, Bounds a: [0]','line_number':481,'multiline':False]
['text':'  => { a: 0 } -> { a: 0 }','line_number':482,'multiline':False]
['text':' Key { a: 1 }, Bounds a: [2, 3)','line_number':496,'multiline':False]
['text':'  => { a: 2 } -> { a: 3 }  // bound inclusion is ignored.','line_number':497,'multiline':False]
['text':' Key { a: 1, b: 1, c: 1 }, Bounds a: [2, 3), b: [2, 3), c: [2: 3)','line_number':511,'multiline':False]
['text':'  => { a: 2, b: 2, c: 2 } -> { a: 3, b: 3, c: 3 }','line_number':512,'multiline':False]
['text':' Key { a: 1, b: 1, c: 1 }, Bounds a: [0, 0], b: { $in: [4, 5, 6] }, c: [2: 3)','line_number':530,'multiline':False]
['text':'  => { a: 0, b: 4, c: 2 } -> { a: 0, b: 4, c: 3 }','line_number':531,'multiline':False]
['text':'     { a: 0, b: 5, c: 2 } -> { a: 0, b: 5, c: 3 }','line_number':532,'multiline':False]
['text':'     { a: 0, b: 6, c: 2 } -> { a: 0, b: 6, c: 3 }','line_number':533,'multiline':False]
['text':' Key { a: 1, b: 1, c: 1 }, Bounds a: [0, 1], b: { $in: [4, 5, 6] }, c: [2: 3)','line_number':558,'multiline':False]
['text':'  => { a: 0, b: 4, c: 2 } -> { a: 1, b: 6, c: 3 }','line_number':559,'multiline':False]
['text':' Since field "a" is not a point, expasion after "a" is not allowed.','line_number':560,'multiline':False]
['text':'*
 * Tests the index bounds generation in the presence of a GEO_NEAR predicate.
 ','line_number':583,'multiline':True]
['text':' {a: 2, b: {$near: ...}} -> a: [2, 2]','line_number':587,'multiline':False]
['text':' With compound index {a: 1, c: 1}','line_number':597,'multiline':False]
['text':' {a: 2, b: {$near: ...}, c: {$gt: 2}} -> a: [2, 2], c: (2, inf.0]','line_number':598,'multiline':False]
['text':' shard key','line_number':612,'multiline':False]
['text':' With compound index {a: 1, b: 1, c: 1}','line_number':618,'multiline':False]
['text':' {a: 2, b: {$near: ...}, c: {$gt: 2}} -> a: [2, 2], b: [MinKey, MaxKey], c: (2, inf.0]','line_number':619,'multiline':False]
['text':' shard key','line_number':639,'multiline':False]
['text':'*
 * The implementation of the above optimization assumes that there are some limitations on GEO_NEAR
 * predicates. If these limitations are removed in the future, we should refactor the optimization.
 ','line_number':647,'multiline':True]
['text':' There can be at most one GEO_NEAR predicate.','line_number':652,'multiline':False]
['text':' GEO_NEAR must be a top-level expression in the CanonicalQuery.','line_number':672,'multiline':False]
['text':' namespace','line_number':692,'multiline':False]
['text':' namespace mongo','line_number':693,'multiline':False]
