['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 * This function appends the provided WriteConcernErrorDetail to the sharded response.
 ','line_number':73,'multiline':True]
['text':'*
 * This function appends the provided writeConcernError BSONElement to the sharded response.
 ','line_number':80,'multiline':True]
['text':'*
 * Creates and returns a WriteConcernErrorDetail object from a BSONObj.
 ','line_number':87,'multiline':True]
['text':'*
 * Makes an expression context suitable for canonicalization of queries that contain let parameters
 * and runtimeConstants on mongos.
 ','line_number':92,'multiline':True]
['text':'*
 * Builds requests for each given shard.
 *
 * Consults the routing info to build requests for specified list of shards:
 *  - If it has a routing table, shards that own chunks for the namespace, or
 *  - If it doesn't have a routing table, the primary shard for the database.
 *
 * If the command is eligible for sampling, attaches a unique sample id to one of the requests if
 * the collection has query sampling enabled and the rate-limited sampler successfully generates a
 * sample id for it.
 ','line_number':105,'multiline':True]
['text':'*
 * Dispatches all the specified requests in parallel and waits until all complete, returning a
 * vector of the same size and positions as that of 'requests'.
 *
 * Throws StaleConfig if any of the remotes returns that error, regardless of what the other errors
 * are.
 ','line_number':124,'multiline':True]
['text':'*
 * Dispatches all the specified requests in parallel and waits until all complete, returning a
 * vector of the same size and positions as that of 'requests'.
 ','line_number':138,'multiline':True]
['text':'*
 * Returns a copy of 'cmdObj' with dbVersion appended if it exists in 'dbInfo'
 ','line_number':149,'multiline':True]
['text':'*
 * Returns a copy of 'cmdObj' with 'databaseVersion' appended.
 ','line_number':154,'multiline':True]
['text':'*
 * Returns a copy of 'cmdObj' with 'version' appended.
 ','line_number':159,'multiline':True]
['text':'*
 * Returns a copy of 'cmdObj' with the read/writeConcern from the OpCtx appended, unless the
 * cmdObj explicitly specifies read/writeConcern.
 ','line_number':164,'multiline':True]
['text':'*
 * Convenience versions of applyReadWriteConcern() for calling from within
 * CommandInvocation, BasicCommand or BasicCommandWithRequestParser.
 ','line_number':173,'multiline':True]
['text':'*
 * Utility for dispatching unversioned commands to all shards in a cluster.
 *
 * Returns a non-OK status if a failure occurs on *this* node during execution. Otherwise, returns
 * success and a list of responses from shards (including errors from the shards or errors reaching
 * the shards).
 *
 * Note, if this mongos has not refreshed its shard list since
 * 1) a shard has been *added* through a different mongos, a request will not be sent to the added
 *    shard
 * 2) a shard has been *removed* through a different mongos, this function will return a
 *    ShardNotFound error status.
 ','line_number':185,'multiline':True]
['text':'*
 * Utility for dispatching unversioned commands to a dedicated config server if it exists and all
 * shards in a cluster.
 *
 * Returns a non-OK status if a failure occurs on *this* node during execution. Otherwise, returns
 * success and a list of responses from the config server and shards (including errors from the
 * config server or shards or errors reaching the config server or shards).
 *
 * Note, if this mongos has not refreshed its shard list since
 * 1) a shard has been *added* through a different mongos, a request will not be sent to the added
 *    shard
 * 2) a shard has been *removed* through a different mongos, this function will return a
 *    ShardNotFound error status.
 ','line_number':205,'multiline':True]
['text':'*
 * Utility for dispatching versioned commands on a namespace, deciding which shards to
 * target by applying the passed-in query and collation to the local routing table cache.
 *
 * If the command is eligible for sampling, attaches a unique sample id to one of the requests if
 * the collection has query sampling enabled and the rate-limited sampler successfully generates a
 * sample id for it.
 *
 * Does not retry on StaleConfig errors.
 ','line_number':226,'multiline':True]
['text':'*
 * This overload is for callers which already have a fully initialized 'ExpressionContext' (e.g.
 * callers from the aggregation framework). Most callers should prefer the overload above.
 ','line_number':250,'multiline':True]
['text':'*
 * Utility for dispatching versioned commands on a namespace, deciding which shards to
 * target by applying the passed-in query and collation to the local routing table cache.
 *
 * Callers can specify shards to skip, even if these shards would be otherwise targeted.
 *
 * Allows StaleConfig errors to append to the response list.
 ','line_number':266,'multiline':True]
['text':'*
 * Utility for dispatching commands against the primary of a database and attaching the appropriate
 * database version. Also attaches UNSHARDED to the command. Does not retry on stale version.
 ','line_number':289,'multiline':True]
['text':'*
 * Utility for dispatching commands against the shard with the MinKey chunk for the namespace and
 * attaching the appropriate shard version.
 *
 * Does not retry on StaleConfig errors.
 ','line_number':301,'multiline':True]
['text':'*
 * Attaches each shard's response or error status by the shard's connection string in a top-level
 * field called 'raw' in 'output'.
 *
 * If all shards that errored had the same error, writes the common error code to 'output'. Writes a
 * string representation of all errors to 'errmsg.'
 *
 * ShardNotFound responses are not treated as errors if any shard returned success. We allow
 * ShardNotFound errors to be ignored as errors since this node may not have realized that a
 * shard has been removed.
 *
 * Returns:
 * 1. A boolean indicating whether any shards reported success and only ShardNotFound errors occur.
 * 2. A set containing the list of shards that reported success or a ShardNotFound error. For shard
 *    tracking purposes, a shard with a writeConcernError is not considered to be successful.
 * 3. The list of AsyncRequestsSender::Responses that were successful.
 * 4. The first stale config error received, if such an error exists.
 ','line_number':315,'multiline':True]
['text':'*
 * Utility function to return an empty result set from a command.
 ','line_number':340,'multiline':True]
['text':'*
 * Returns the shards that would be targeted for the given query according to the given routing
 * info.
 ','line_number':348,'multiline':True]
['text':'*
 * Determines the shard(s) to which the given query will be targeted, and builds a separate
 * versioned copy of the command object for each such shard.
 ','line_number':357,'multiline':True]
['text':'*
 * If the command is running in a transaction, returns the proper routing table to use for targeting
 * shards. If there is no active transaction or the transaction is not running with snapshot level
 * read concern, the latest routing table is returned, otherwise a historical routing table is
 * returned at the global read timestamp, which must have been selected by this point.
 *
 * Should be used by all router commands that can be run in a transaction when targeting shards.
 ','line_number':371,'multiline':True]
['text':'*
 * Loads all of the indexes for the given namespace from the appropriate shard. For unsharded
 * collections will read from the primary shard and for sharded collections will read from the shard
 * that owns the chunk containing the minimum key for the collection's shard key.
 *
 * Will not retry on StaleConfig or StaleDbVersion errors.
 ','line_number':382,'multiline':True]
['text':' namespace mongo','line_number':392,'multiline':False]
