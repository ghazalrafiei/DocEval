['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' IWYU pragma: no_include "ext/alloc_traits.h"','line_number':37,'multiline':False]
['text':'*
 * Helper to determine whether a number of targeted writes require a new targeted batch.
 ','line_number':81,'multiline':True]
['text':'*
 * Helper to determine whether a shard is already targeted with a different shardVersion, which
 * necessitates a new batch. This happens when a batch write includes a multi target write and
 * a single target write.
 ','line_number':95,'multiline':True]
['text':' We haven't targeted this namespace yet.','line_number':107,'multiline':False]
['text':' This is a new endpoint for this namespace.','line_number':113,'multiline':False]
['text':' And because we have targeted this shardId for this namespace before, this implies','line_number':118,'multiline':False]
['text':' a shard is already targeted under a different endpoint/shardVersion, necessitates','line_number':119,'multiline':False]
['text':' a new batch.','line_number':120,'multiline':False]
['text':'*
 * Helper to determine whether a number of targeted writes require a new targeted batch.
 ','line_number':128,'multiline':True]
['text':' If this is the first item in the batch, it can't be too big','line_number':137,'multiline':False]
['text':' Too many items in batch','line_number':142,'multiline':False]
['text':' Batch would be too big','line_number':147,'multiline':False]
['text':'*
 * Given *either* a batch error or an array of per-item errors, copies errors we're interested in
 * into a TrackedErrorMap
 ','line_number':155,'multiline':True]
['text':'*
 * Attempts to populate the actualCollection field of a CollectionUUIDMismatch error if it is not
 * populated already, contacting the primary shard if necessary.
 ','line_number':169,'multiline':True]
['text':' namespace','line_number':216,'multiline':False]
['text':' 'baseCommandSizeBytes' specifies the base size of a batch command request prior to adding any','line_number':244,'multiline':False]
['text':' individual operations to it. This function will ensure that 'baseCommandSizeBytes' plus the','line_number':245,'multiline':False]
['text':' result of calling 'getWriteSizeFn' on each write added to a batch will not result in a command','line_number':246,'multiline':False]
['text':' over BSONObjMaxUserSize.','line_number':247,'multiline':False]
['text':'','line_number':256,'multiline':False]
['text':' Targeting of unordered batches is fairly simple - each remaining write op is targeted,','line_number':257,'multiline':False]
['text':' and each of those targeted writes are grouped into a batch for a particular shard','line_number':258,'multiline':False]
['text':' endpoint.','line_number':259,'multiline':False]
['text':'','line_number':260,'multiline':False]
['text':' Targeting of ordered batches is a bit more complex - to respect the ordering of the','line_number':261,'multiline':False]
['text':' batch, we can only send:','line_number':262,'multiline':False]
['text':' A) a single targeted batch to one shard endpoint','line_number':263,'multiline':False]
['text':' B) multiple targeted batches, but only containing targeted writes for a single write op','line_number':264,'multiline':False]
['text':'','line_number':265,'multiline':False]
['text':' This means that any multi-shard write operation must be targeted and sent one-by-one.','line_number':266,'multiline':False]
['text':' Subsequent single-shard write operations can be batched together if they go to the same','line_number':267,'multiline':False]
['text':' place.','line_number':268,'multiline':False]
['text':'','line_number':269,'multiline':False]
['text':' Ex: ShardA : { skey : a->k }, ShardB : { skey : k->z }','line_number':270,'multiline':False]
['text':'','line_number':271,'multiline':False]
['text':' Ordered insert batch of: [{ skey : a }, { skey : b }, { skey : x }]','line_number':272,'multiline':False]
['text':' broken into:','line_number':273,'multiline':False]
['text':'  [{ skey : a }, { skey : b }],','line_number':274,'multiline':False]
['text':'  [{ skey : x }]','line_number':275,'multiline':False]
['text':'','line_number':276,'multiline':False]
['text':' Ordered update Batch of :','line_number':277,'multiline':False]
['text':'  [{ skey : a }{ $push },','line_number':278,'multiline':False]
['text':'   { skey : b }{ $push },','line_number':279,'multiline':False]
['text':'   { skey : [c, x] }{ $push },','line_number':280,'multiline':False]
['text':'   { skey : y }{ $push },','line_number':281,'multiline':False]
['text':'   { skey : z }{ $push }]','line_number':282,'multiline':False]
['text':' broken into:','line_number':283,'multiline':False]
['text':'  [{ skey : a }, { skey : b }],','line_number':284,'multiline':False]
['text':'  [{ skey : [c,x] }],','line_number':285,'multiline':False]
['text':'  [{ skey : y }, { skey : z }]','line_number':286,'multiline':False]
['text':'','line_number':287,'multiline':False]
['text':' For retryable timeseries updates and writes without shard key, they are always batched in its','line_number':288,'multiline':False]
['text':' own batch for both the ordered and unordered cases. This means that when we encounter a','line_number':289,'multiline':False]
['text':' retryable timeseries update or a write without shard key, we would either send out what we','line_number':290,'multiline':False]
['text':' previously have batched first (e.g. when !batchMap.empty()) or send out that single write in','line_number':291,'multiline':False]
['text':' its own batch.','line_number':292,'multiline':False]
['text':' Only target Ready op.','line_number':302,'multiline':False]
['text':' If we got a non Ordinary write in the previous iteration, it should be sent in its own','line_number':306,'multiline':False]
['text':' batch.','line_number':307,'multiline':False]
['text':' NOTE: We may repeatedly cancel a write op here, but that's fast and we','line_number':333,'multiline':False]
['text':' want to cancel before erasing the TargetedWrite* (which owns the','line_number':334,'multiline':False]
['text':' cancelled targeting info) for reporting reasons.','line_number':335,'multiline':False]
['text':' Cleanup all the writes we have targetted in this call so far since we are going','line_number':347,'multiline':False]
['text':' to abort the entire transaction.','line_number':348,'multiline':False]
['text':' Cancel current batch state with an error','line_number':353,'multiline':False]
['text':' Record an error for this batch','line_number':357,'multiline':False]
['text':' Send out what we have, but don't record an error yet, since there may be an error','line_number':368,'multiline':False]
['text':' in the writes before this point.','line_number':369,'multiline':False]
['text':' If writes are ordered and we have a targeted endpoint, make sure we don't need to send','line_number':375,'multiline':False]
['text':' these targeted writes to any other endpoints.','line_number':376,'multiline':False]
['text':' If writes are unordered and we already have targeted endpoints, make sure we don't target','line_number':393,'multiline':False]
['text':' the same shard with a different shardVersion.','line_number':394,'multiline':False]
['text':' Check if an updateOne or deleteOne necessitates using the two phase write in the case','line_number':414,'multiline':False]
['text':' where the query does not contain a shard key or _id to target by.','line_number':415,'multiline':False]
['text':' Handle time-series retryable updates using the two phase write protocol only when','line_number':431,'multiline':False]
['text':' there is more than one shard that owns chunks.','line_number':432,'multiline':False]
['text':' Writes without shard key should be in their own batch.','line_number':437,'multiline':False]
['text':' Targeting went ok, add to appropriate TargetedBatch','line_number':454,'multiline':False]
['text':' Relinquish ownership of TargetedWrites, now the TargetedBatches own them','line_number':469,'multiline':False]
['text':' Break if we're ordered and we have more than one endpoint - later writes cannot be','line_number':472,'multiline':False]
['text':' enforced as ordered across multiple shard endpoints.','line_number':473,'multiline':False]
['text':' getTargeterFn:','line_number':521,'multiline':False]
['text':' getWriteSizeFn:','line_number':523,'multiline':False]
['text':' If retryable writes are used, MongoS needs to send an additional array of stmtId(s)','line_number':525,'multiline':False]
['text':' corresponding to the statements that got routed to each individual shard, so they','line_number':526,'multiline':False]
['text':' need to be accounted in the potential request size so it does not exceed the max BSON','line_number':527,'multiline':False]
['text':' size.','line_number':528,'multiline':False]
['text':' For unordered writes, the router must return an entry for each failed write. This','line_number':536,'multiline':False]
['text':' constant is a pessimistic attempt to ensure that if a request to a shard hits','line_number':537,'multiline':False]
['text':' "retargeting needed" error and has to return number of errors equivalent to the','line_number':538,'multiline':False]
['text':' number of writes in the batch, the response size will not exceed the max BSON size.','line_number':539,'multiline':False]
['text':'','line_number':540,'multiline':False]
['text':' The constant of 272 is chosen as an approximation of the size of the BSON','line_number':541,'multiline':False]
['text':' representation of the StaleConfigInfo (which contains the shard id) and the adjacent','line_number':542,'multiline':False]
['text':' error message.','line_number':543,'multiline':False]
['text':' TODO SERVER-77653: Account for the size of top-level command fields here.','line_number':548,'multiline':False]
['text':' baseCommandSizeBytes ','line_number':549,'multiline':True]
['text':' If we are using the two phase write protocol introduced in PM-1632, we allow','line_number':593,'multiline':False]
['text':' shard key updates without specifying the full shard key in the query if we','line_number':594,'multiline':False]
['text':' execute the update in a retryable write/transaction.','line_number':595,'multiline':False]
['text':' Each child batch inherits its let params/runtime constants from the parent','line_number':634,'multiline':False]
['text':' batch.','line_number':635,'multiline':False]
['text':' Each child batch inherits its let params from the parent batch.','line_number':645,'multiline':False]
['text':' For BatchWriteOp, all writes in the batch should share the same endpoint since they target','line_number':677,'multiline':False]
['text':' the same shard and namespace. So we just use the endpoint from the first write.','line_number':678,'multiline':False]
['text':' Append the write concern from the opCtx extracted during command setup.','line_number':690,'multiline':False]
['text':' Mongos needs to send to the shard with w > 0 so it will be able to see the','line_number':695,'multiline':False]
['text':' writeErrors','line_number':696,'multiline':False]
['text':' Treat command errors exactly like other failures of the batch.','line_number':710,'multiline':False]
['text':'','line_number':711,'multiline':False]
['text':' Note that no errors will be tracked from these failures - as-designed.','line_number':712,'multiline':False]
['text':' Increment stats for this batch','line_number':717,'multiline':False]
['text':'','line_number':720,'multiline':False]
['text':' Assign errors to particular items.','line_number':721,'multiline':False]
['text':' Write Concern errors are stored and handled later.','line_number':722,'multiline':False]
['text':'','line_number':723,'multiline':False]
['text':' Special handling for write concern errors, save for later','line_number':725,'multiline':False]
['text':' For BatchWriteOp, all writes in the batch should share the same endpoint since they','line_number':727,'multiline':False]
['text':' target the same shard and namespace. So we just use the endpoint from the first write.','line_number':728,'multiline':False]
['text':' Handle batch and per-item errors','line_number':735,'multiline':False]
['text':' Per-item errors were set','line_number':737,'multiline':False]
['text':' Sort per-item errors by index','line_number':741,'multiline':False]
['text':'','line_number':745,'multiline':False]
['text':' Go through all pending responses of the op and sorted remote responses, populate errors','line_number':746,'multiline':False]
['text':' This will either set all errors to the batch error or apply per-item errors as-needed','line_number':747,'multiline':False]
['text':'','line_number':748,'multiline':False]
['text':' If the batch is ordered, cancel all writes after the first error for retargeting.','line_number':749,'multiline':False]
['text':'','line_number':750,'multiline':False]
['text':' See if we have an error for the write','line_number':761,'multiline':False]
['text':' We have an per-item error for this write op's index','line_number':765,'multiline':False]
['text':' Finish the response (with error, if needed)','line_number':770,'multiline':False]
['text':' We didn't actually apply this write - cancel so we can retarget','line_number':779,'multiline':False]
['text':' Track errors we care about, whether batch or individual errors','line_number':790,'multiline':False]
['text':' For BatchWriteOp, all writes in the batch should share the same endpoint since they','line_number':792,'multiline':False]
['text':' target the same shard and namespace. So we just use the endpoint from the first write.','line_number':793,'multiline':False]
['text':' Track upserted ids if we need to','line_number':797,'multiline':False]
['text':' The child upserted details don't have the correct index for the full batch','line_number':803,'multiline':False]
['text':' Work backward from the child batch item index to the batch item index','line_number':806,'multiline':False]
['text':' Push the upserted id with the correct index into the batch upserted ids','line_number':810,'multiline':False]
['text':' Treat errors to get a batch response as failures of the contained writes','line_number':825,'multiline':False]
['text':' Can only be called with no outstanding batches','line_number':851,'multiline':False]
['text':' Only one error if we're ordered','line_number':857,'multiline':False]
['text':' Note: we aggressively abandon the batch when encountering errors during transactions, so','line_number':881,'multiline':False]
['text':' it can be in a state that is not "finished" even for unordered batches.','line_number':882,'multiline':False]
['text':' Result is OK','line_number':885,'multiline':False]
['text':' For non-verbose, it's all we need.','line_number':888,'multiline':False]
['text':'','line_number':893,'multiline':False]
['text':' Find all the errors in the batch','line_number':894,'multiline':False]
['text':'','line_number':895,'multiline':False]
['text':'','line_number':908,'multiline':False]
['text':' Build the per-item errors.','line_number':909,'multiline':False]
['text':'','line_number':910,'multiline':False]
['text':' For CollectionUUIDMismatch error, check if there is a response from a shard that','line_number':920,'multiline':False]
['text':' aleady has the actualCollection information. If there is none, make an additional','line_number':921,'multiline':False]
['text':' call to the primary shard to fetch this info in case the collection is unsharded or','line_number':922,'multiline':False]
['text':' the targeted shard does not own any chunk of the collection with the requested uuid.','line_number':923,'multiline':False]
['text':'','line_number':944,'multiline':False]
['text':' Append the upserted ids, if required','line_number':945,'multiline':False]
['text':'','line_number':946,'multiline':False]
['text':' Stats','line_number':952,'multiline':False]
['text':' TODO: This could be faster, if we tracked this info explicitly','line_number':965,'multiline':False]
['text':' sentinel used to indicate we omit the field downstream','line_number':992,'multiline':False]
['text':' namespace mongo','line_number':1026,'multiline':False]
