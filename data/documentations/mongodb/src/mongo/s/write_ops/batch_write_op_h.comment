['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' Conservative overhead per element contained in the write batch. This value was calculated as 1','line_number':61,'multiline':False]
['text':' byte (element type) + 5 bytes (max string encoding of the array index encoded as string and the','line_number':62,'multiline':False]
['text':' maximum key is 99999) + 1 byte (zero terminator) = 7 bytes','line_number':63,'multiline':False]
['text':'*
 * Simple struct for storing an error with an endpoint.
 *
 * Certain types of errors are not stored in WriteOps or must be returned to a caller.
 ','line_number':66,'multiline':True]
['text':'*
 * Simple struct for storing a write concern error with an endpoint.
 *
 * Certain types of errors are not stored in WriteOps or must be returned to a caller.
 ','line_number':79,'multiline':True]
['text':'*
 * The BatchWriteOp class manages the lifecycle of a batched write received by mongos.  Each
 * item in a batch is tracked via a WriteOp, and the function of the BatchWriteOp is to
 * aggregate the dispatched requests and responses for the underlying WriteOps.
 *
 * Overall, the BatchWriteOp lifecycle is similar to the WriteOp lifecycle, with the following
 * stages:
 *
 * 0) Client request comes in, batch write op is initialized
 *
 * 1a) One or more ops in the batch are targeted using targetBatch, resulting in
 *     TargetedWriteBatches for these ops.
 * 1b) There are targeting errors, and the batch must be retargeted after refreshing the
 *     NSTargeter.
 *
 * 2) (Child BatchCommandRequests are be built for each TargetedWriteBatch before sending)
 *
 * 3) Responses for sent TargetedWriteBatches are noted, errors are stored and aggregated per-
 *    write-op.  Errors the caller is interested in are returned.
 *
 * 4) If the batch write is not finished, goto 0
 *
 * 5) When all responses come back for all write ops, errors are aggregated and returned in
 *    a client response
 *
 ','line_number':96,'multiline':True]
['text':'*
     * Targets one or more of the next write ops in this batch op using a NSTargeter.  The
     * resulting TargetedWrites are aggregated together in the returned TargetedWriteBatches.
     *
     * If 'recordTargetErrors' is false, any targeting error will abort all current batches and
     * the method will return the targeting error.  No targetedBatches will be returned on
     * error.
     *
     * Otherwise, if 'recordTargetErrors' is true, targeting errors will be recorded for each
     * write op that fails to target, and the method will return OK.
     *
     * (The idea here is that if we are sure our NSTargeter is up-to-date we should record
     * targeting errors, but if not we should refresh once first.)
     *
     * Returned TargetedWriteBatches are owned by the caller.
     * If a write without a shard key or a time-series retryable update is detected, return an OK
     * StatusWith that has the corresponding WriteType as the value.
     ','line_number':130,'multiline':True]
['text':'*
     * Fills a BatchCommandRequest from a TargetedWriteBatch for this BatchWriteOp.
     ','line_number':152,'multiline':True]
['text':'*
     * Stores a response from one of the outstanding TargetedWriteBatches for this BatchWriteOp.
     * The response may be in any form, error or not.
     *
     * There is an additional optional 'trackedErrors' parameter, which can be used to return
     * copies of any write errors in the response that the caller is interested in (specified by
     * errCode).  (This avoids external callers needing to know much about the response format.)
     ','line_number':160,'multiline':True]
['text':'*
     * Stores an error that occurred trying to send/recv a TargetedWriteBatch for this
     * BatchWriteOp.
     ','line_number':172,'multiline':True]
['text':'*
     * Aborts any further writes in the batch with the provided error.  There must be no pending
     * ops awaiting results when a batch is aborted.
     *
     * Batch is finished immediately after aborting.
     ','line_number':179,'multiline':True]
['text':'*
     * Returns false if the batch write op needs more processing.
     ','line_number':187,'multiline':True]
['text':'*
     * Fills a batch response to send back to the client.
     ','line_number':192,'multiline':True]
['text':'*
     * Returns the number of write operations which are in the specified state. Runs in O(number of
     * write operations).
     ','line_number':197,'multiline':True]
['text':'*
     * Returns the WriteOp with index referencing the write item in the batch.
     ','line_number':205,'multiline':True]
['text':'*
     * Maintains the batch execution statistics when a response is received.
     ','line_number':211,'multiline':True]
['text':' The incoming client request','line_number':218,'multiline':False]
['text':' Cached transaction number (if one is present on the operation contex)','line_number':221,'multiline':False]
['text':' Array of ops being processed from the client request','line_number':224,'multiline':False]
['text':' Write concern responses from all write batches so far','line_number':227,'multiline':False]
['text':' Upserted ids for the whole write batch','line_number':230,'multiline':False]
['text':' Statement ids for the ops that had already been executed, thus were not executed in this','line_number':233,'multiline':False]
['text':' batch write.','line_number':234,'multiline':False]
['text':' Stats for the entire batch op','line_number':237,'multiline':False]
['text':' Set to true if this write is part of a transaction.','line_number':244,'multiline':False]
['text':'*
 * Helper class for tracking certain errors from batch operations
 ','line_number':251,'multiline':True]
['text':' Utility function to merge write concern errors received from various shards.','line_number':274,'multiline':False]
['text':' Helper function to target ready writeOps. See BatchWriteOp::targetBatch for details.','line_number':278,'multiline':False]
['text':'*
 * Returns a new write concern that has the copy of every field from the original
 * document but with a w set to 1. This is intended for upgrading { w: 0 } write
 * concern to { w: 1 }.
 ','line_number':288,'multiline':True]
['text':' namespace mongo','line_number':295,'multiline':False]
