['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
     * Constructs a placement information for a collection with the specified generation, starting
     * at placementVersion {0, 0} and maxValidAfter of Timestamp{0, 0}. The expectation is that the
     * incremental refresh algorithm will increment these values as it processes the incoming
     * chunks.
     ','line_number':74,'multiline':True]
['text':' Max chunk version for the shard, effectively this is the shard placement version.','line_number':84,'multiline':False]
['text':' Max validAfter for the shard, effectively this is the timestamp of the latest placement','line_number':86,'multiline':False]
['text':' change that occurred on a particular shard.','line_number':87,'multiline':False]
['text':' Indicates whether the shard is stale and thus needs a catalog cache refresh','line_number':90,'multiline':False]
['text':' Map from a shard to a struct indicating both the max chunk version on that shard and whether the','line_number':94,'multiline':False]
['text':' shard is currently marked as needing a catalog cache refresh (stale).','line_number':95,'multiline':False]
['text':'*
 * This class serves as a Facade around how the mapping of ranges to chunks is represented. It also
 * provides a simpler, high-level interface for domain specific operations without exposing the
 * underlying implementation.
 ','line_number':99,'multiline':True]
['text':' Vector of chunks ordered by max key in ascending order.','line_number':106,'multiline':False]
['text':' Max version across all chunks','line_number':116,'multiline':False]
['text':'
     * Invoke the given handler for each std::shared_ptr<ChunkInfo> contained in this chunk map
     * until either all matching chunks have been processed or @handler returns false.
     *
     * Chunks are yielded in ascending order of shardkey (e.g. minKey to maxKey);
     *
     * When shardKey is provided the function will start yileding from the chunk that contains the
     * given shard key.
     ','line_number':134,'multiline':True]
['text':'isMaxInclusive','line_number':164,'multiline':True]
['text':'
     * Invoke the given @handler for each std::shared_ptr<ChunkInfo> that overlaps with range [@min,
     * @max] until either all matching chunks have been processed or @handler returns false.
     *
     * Chunks are yielded in ascending order of shardkey (e.g. minKey to maxKey);
     *
     * When @isMaxInclusive is true also the chunk whose minKey is equal to @max will be yielded.
     ','line_number':174,'multiline':True]
['text':' On first vector we need to start from chunk that contain the given minKey','line_number':197,'multiline':False]
['text':' isMaxInclusive ','line_number':201,'multiline':True]
['text':' On last vector we need to skip all chunks that are greater than the give','line_number':208,'multiline':False]
['text':' maxKey','line_number':209,'multiline':False]
['text':' Max version across all chunks','line_number':258,'multiline':False]
['text':' The representation of shard versions and staleness indicators for this namespace. If a','line_number':261,'multiline':False]
['text':' shard does not exist, it will not have an entry in the map.','line_number':262,'multiline':False]
['text':' Note: this declaration must not be moved before _chunkMap since it is initialized by using','line_number':263,'multiline':False]
['text':' the _chunkVectorMap instance.','line_number':264,'multiline':False]
['text':' Maximum size of chunk vectors stored in the chunk vector map.','line_number':267,'multiline':False]
['text':' Bigger vectors will imply slower incremental refreshes (more chunks to copy) but','line_number':268,'multiline':False]
['text':' faster map copy (less chunk vector pointers to copy).','line_number':269,'multiline':False]
['text':'*
 * In-memory representation of the routing table for a single sharded collection at various points
 * in time.
 ','line_number':273,'multiline':True]
['text':'*
     * Makes an instance with a routing table for collection "nss", sharded on
     * "shardKeyPattern".
     *
     * "defaultCollator" is the default collation for the collection, "unique" indicates whether
     * or not the shard key for each document will be globally unique, and "epoch" is the globally
     * unique identifier for this version of the collection.
     *
     * The "chunks" vector must contain the chunk routing information sorted in ascending order by
     * chunk version, and adhere to the requirements of the routing table update algorithm.
     *
     * The existence of "reshardingFields" inside the optional implies that this field was present
     * inside the config.collections entry when refreshing.
     ','line_number':285,'multiline':True]
['text':'*
     * Constructs a new instance with a routing table updated according to the changes described
     * in "changedChunks".
     *
     * The changes in "changedChunks" must be sorted in ascending order by chunk version, and adhere
     * to the requirements of the routing table update algorithm.
     *
     * The existence of timeseriesFields/reshardingFields inside the optional implies that this
     * field was present inside the config.collections entry when refreshing. An uninitialized
     * timeseriesFields/reshardingFields parameter implies that the field was not present, and will
     * clear any currently held timeseries/resharding fields inside the resulting
     * RoutingTableHistory.
     ','line_number':313,'multiline':True]
['text':'*
     * Mark the given shard as stale, indicating that requests targetted to this shard (for this
     * namespace) need to block on a catalog cache refresh.
     ','line_number':349,'multiline':True]
['text':'*
     * Mark all shards as not stale, indicating that a refresh has happened and requests targeted
     * to all shards (for this namespace) do not currently need to block on a catalog cache refresh.
     ','line_number':355,'multiline':True]
['text':'*
     * Returns the maximum version across all shards (also known as the "collection placement
     * version").
     ','line_number':361,'multiline':True]
['text':'*
     * Retrieves the placement version for the given shard. Will throw a
     * ShardInvalidatedForTargeting exception if the shard is marked as stale.
     ','line_number':369,'multiline':True]
['text':'*
     * Retrieves the placement version for the given shard. Will not throw if the shard is marked as
     * stale. Only use when logging the given chunk version -- if the caller must execute logic
     * based on the returned version, use getVersion() instead.
     ','line_number':377,'multiline':True]
['text':'*
     * Retrieves the maximum validAfter timestamp for the given shard. Will throw a
     * ShardInvalidatedForTargeting exception if the shard is marked as stale.
     ','line_number':386,'multiline':True]
['text':'*
     * Returns the ids of all shards on which the collection has any chunks.
     ','line_number':416,'multiline':True]
['text':'*
     * Returns all chunk ranges for the collection.
     ','line_number':421,'multiline':True]
['text':'*
     * Returns the number of shards on which the collection has any chunks
     ','line_number':426,'multiline':True]
['text':' Namespace to which this routing information corresponds','line_number':471,'multiline':False]
['text':' The UUID of the collection','line_number':474,'multiline':False]
['text':' The key pattern used to shard the collection','line_number':477,'multiline':False]
['text':' True for tracked unsharded collections','line_number':480,'multiline':False]
['text':' Default collation to use for routing data queries for this collection','line_number':483,'multiline':False]
['text':' Whether the sharding key is unique','line_number':486,'multiline':False]
['text':' This information will be valid if the collection is a time-series buckets collection.','line_number':489,'multiline':False]
['text':' The set of fields related to an ongoing resharding operation involving this collection. The','line_number':492,'multiline':False]
['text':' presence of the type inside the optional indicates that the collection is involved in a','line_number':493,'multiline':False]
['text':' resharding operation, and that these fields were present in the config.collections entry','line_number':494,'multiline':False]
['text':' for this collection.','line_number':495,'multiline':False]
['text':' Map from the max for each chunk to an entry describing the chunk. The union of all chunks'','line_number':500,'multiline':False]
['text':' ranges must cover the complete space from [MinKey, MaxKey).','line_number':501,'multiline':False]
['text':' The representation of shards' placement versions and staleness indicators for this namespace.','line_number':504,'multiline':False]
['text':' If a shard does not exist, it will not have an entry in the map. Note: this declaration must','line_number':505,'multiline':False]
['text':' not be moved before _chunkMap since it is initialized by using the _chunkMap instance.','line_number':506,'multiline':False]
['text':'*
 * Constructed to be used exclusively by the CatalogCache as a vector clock (Time) to drive
 * CollectionCache's lookups.
 *
 * The ChunkVersion class contains a timestamp for the collection generation which resets to 0 after
 * the collection is dropped or all chunks are moved off of a shard, in which case the versions
 * cannot be compared.
 *
 * This class wraps a ChunkVersion object with a node-local sequence number
 * (_epochDisambiguatingSequenceNum) that allows the comparision.
 *
 * This class should go away once a cluster-wide comparable ChunkVersion is implemented.
 ','line_number':510,'multiline':True]
['text':'*
     * Creates a ComparableChunkVersion that wraps the given ChunkVersion.
     * Each object created through this method will have a local sequence number greater than the
     * previously created ones.
     ','line_number':525,'multiline':True]
['text':'*
     * Creates a new instance which will artificially be greater than any
     * previously created ComparableChunkVersion and smaller than any instance
     * created afterwards. Used as means to cause the collections cache to
     * attempt a refresh in situations where causal consistency cannot be
     * inferred.
     ','line_number':532,'multiline':True]
['text':'*
     * Empty constructor needed by the ReadThroughCache.
     *
     * Instances created through this constructor will be always less then the ones created through
     * the two static constructors, but they do not carry any meaningful value and can only be used
     * for comparison purposes.
     ','line_number':541,'multiline':True]
['text':'*
     * In case the two compared instances have different epochs, the most recently created one will
     * be greater, otherwise the comparision will be driven by the major/minor versions of the
     * underlying ChunkVersion.
     ','line_number':558,'multiline':True]
['text':' Locally incremented sequence number that allows to compare two colection versions with','line_number':596,'multiline':False]
['text':' different epochs. Each new comparableChunkVersion will have a greater sequence number than','line_number':597,'multiline':False]
['text':' the ones created before.','line_number':598,'multiline':False]
['text':'*
 * This intermediate structure is necessary to be able to store UNSHARDED collections in the routing
 * table history cache below. The reason is that currently the RoutingTableHistory class only
 * supports sharded collections (i.e., collections which have entries in config.collections and
 * config.chunks).
 ','line_number':602,'multiline':True]
['text':' UNSHARDED collection constructor','line_number':609,'multiline':False]
['text':' SHARDED collection constructor','line_number':612,'multiline':False]
['text':' If nullptr, the collection is UNSHARDED, otherwise it is SHARDED','line_number':615,'multiline':False]
['text':'*
 * Combines a shard, the shard version, and database version that the shard should be using
 ','line_number':623,'multiline':True]
['text':'*
 * Compares shard endpoints in a map.
 ','line_number':637,'multiline':True]
['text':'*
 * Wrapper around a RoutingTableHistory, which pins it to a particular point in time.
 ','line_number':644,'multiline':True]
['text':' Methods supported on both sharded and unsharded collections','line_number':658,'multiline':False]
['text':'
     * Returns true if this chunk manager has a routing table.
     *
     * True for:
     *   - sharded collections.
     *   - unsharded collections tracked by the configsvr.
     * False for:
     *   - unsharded collections not tracked by the configsvr.
     *   - non-existent collections.
     ','line_number':660,'multiline':True]
['text':'
     * Returns true if routing table is present and unsplittable flag is not set
     ','line_number':674,'multiline':True]
['text':'
     * Returns true if routing table is present and unsplittable flag is set
     ','line_number':681,'multiline':True]
['text':'*
     * Indicates that this collection must not honour any moveChunk requests, because it is required
     * to provide a stable view of its constituent shards.
     ','line_number':692,'multiline':True]
['text':' Methods only supported on collections registered in the sharding catalog (caller must check','line_number':712,'multiline':False]
['text':' hasRoutingTable())','line_number':713,'multiline':False]
['text':'*
     * Retrieves the placement version for the given shard. Will throw a
     * ShardInvalidatedForTargeting exception if the shard is marked as stale.
     ','line_number':735,'multiline':True]
['text':'*
     * Retrieves the maximum validAfter timestamp for the given shard. Will throw a
     * ShardInvalidatedForTargeting exception if the shard is marked as stale.
     ','line_number':744,'multiline':True]
['text':'*
     * Retrieves the placement version for the given shard. Will not throw if the shard is marked as
     * stale. Only use when logging the given chunk version -- if the caller must execute logic
     * based on the returned version, use getVersion() instead.
     ','line_number':753,'multiline':True]
['text':'*
     * Returns true if a document with the given "shardKey" is owned by the shard with the given
     * "shardId" in this routing table. If "shardKey" is empty returns false. If "shardKey" is not a
     * valid shard key, the behaviour is undefined.
     ','line_number':776,'multiline':True]
['text':'*
     * Returns true if any chunk owned by the shard with the given "shardId" overlaps "range".
     ','line_number':783,'multiline':True]
['text':'*
     * Given a shardKey, returns the first chunk which is owned by shardId and overlaps or sorts
     * after that shardKey. If the return value is empty, this means no such chunk exists.
     ','line_number':788,'multiline':True]
['text':'*
     * Given a shard key (or a prefix) that has been extracted from a document, returns the chunk
     * that contains that key.
     *
     * Example: findIntersectingChunk({a : hash('foo')}) locates the chunk for document
     *          {a: 'foo', b: 'bar'} if the shard key is {a : 'hashed'}.
     *
     * If 'collation' is empty, we use the collection default collation for targeting.
     *
     * Throws a DBException with the ShardKeyNotFound code if unable to target a single shard due to
     * collation or due to the key not matching the shard key pattern.
     ','line_number':795,'multiline':True]
['text':'*
     * Same as findIntersectingChunk, but assumes the simple collation.
     ','line_number':811,'multiline':True]
['text':'*
     * Finds the shard id of the shard that owns the chunk minKey belongs to, assuming the simple
     * collation because shard keys do not support non-simple collations.
     ','line_number':819,'multiline':True]
['text':'*
     * Returns all shard ids which contain chunks overlapping the range [min, max]. Please note the
     * inclusive bounds on both sides (SERVER-20768).
     * If 'chunkRanges' is not null, populates it with ChunkRanges that would be targeted by the
     * query.
     ','line_number':825,'multiline':True]
['text':'*
     * Returns the ids of all shards on which the collection has any chunks.
     ','line_number':836,'multiline':True]
['text':'*
     * Returns the chunk ranges of all shards on which the collection has any chunks.
     ','line_number':844,'multiline':True]
['text':'*
     * Returns the number of shards on which the collection has any chunks
     ','line_number':852,'multiline':True]
['text':'*
     * Constructs a new ChunkManager, which is a view of the underlying routing table at a different
     * `clusterTime`.
     ','line_number':860,'multiline':True]
['text':' namespace mongo','line_number':905,'multiline':False]
