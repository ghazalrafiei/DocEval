['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' IWYU pragma: no_include "ext/alloc_traits.h"','line_number':35,'multiline':False]
['text':'*
 * Contains the minimum representation of a chunk - its bounds in the format [min, max) along with
 * utilities for parsing and persistence.
 ','line_number':68,'multiline':True]
['text':'*
     * Parses a chunk range using the format { min: <min bound>, max: <max bound> }.
     ','line_number':79,'multiline':True]
['text':'*
     * A throwing version of 'fromBSON'.
     ','line_number':84,'multiline':True]
['text':'*
     * Checks whether the specified key is within the bounds of this chunk range.
     ','line_number':101,'multiline':True]
['text':'*
     * Writes the contents of this chunk range as { min: <min bound>, max: <max bound> }.
     ','line_number':106,'multiline':True]
['text':'*
     * Returns true if two chunk ranges match exactly in terms of the min and max keys (including
     * element order within the keys).
     ','line_number':115,'multiline':True]
['text':'*
     * Returns true if either min is less than rhs min, or in the case that min == rhs min, true if
     * max is less than rhs max. Otherwise returns false.
     ','line_number':122,'multiline':True]
['text':'*
     * Returns true iff the union of *this and the argument range is the same as *this.
     ','line_number':128,'multiline':True]
['text':'*
     * Returns the range of overlap between *this and other, if any.
     ','line_number':133,'multiline':True]
['text':'*
     * Returns true if there is any overlap between the two ranges.
     ','line_number':138,'multiline':True]
['text':'*
     * Returns a range that includes *this and other. If the ranges do not overlap, it includes
     * all the space between, as well.
     ','line_number':143,'multiline':True]
['text':'* Does not enforce the non-empty range invariant. ','line_number':150,'multiline':True]
['text':'*
 * This class represents the layouts and contents of documents contained in the config server's
 * config.chunks and shard server's config.chunks.uuid collections. All manipulation of documents
 * coming from these collections should be done with this class. The shard's config.chunks.uuid
 * collections use the epoch field as the uuid value, and epochs match 1:1 to collection instances
 * (mmapped in config.collections). Therefore, the shard collections do not need to include epoch or
 * namespace fields, as these will be known in order to access the collections.
 *
 * Expected config server config.chunks collection format:
 *   {
 *      _id : "test.foo-a_MinKey",
 *      uuid : Bindata(UUID),
 *      min : {
 *              "a" : { "$minKey" : 1 }
 *      },
 *      max : {
 *              "a" : { "$maxKey" : 1 }
 *      },
 *      shard : "test-rs1",
 *      lastmod : Timestamp(1, 0),
 *      jumbo : false              // optional field
 *   }
 *
 * Expected shard server config.chunks.<epoch> collection format:
 *   {
 *      _id: {
 *             "a" : { "$minKey" : 1 }
 *      }
 *      max : {
 *              "a" : { "$maxKey" : 1 }
 *      }
 *      shard : "test-rs1",
 *      lastmod : Timestamp(1, 0),
 *   }
 *
 * Note: it is intended to change the config server's collection schema to mirror the new shard
 * server's collection schema, but that will be future work when the new schema is stable and there
 * is time to do the extra work, as well as handle the backwards compatibility issues it poses.
 ','line_number':177,'multiline':True]
['text':' Name of the chunks collection in the config server.','line_number':218,'multiline':False]
['text':' The shard chunks collections' common namespace prefix.','line_number':221,'multiline':False]
['text':' Field names and types in the chunks collections.','line_number':224,'multiline':False]
['text':'*
     * Constructs a new ChunkType object from BSON with the following format:
     * {min: <>, max: <>, shard: <>, uuid: <>, history: <>, jumbo: <>, lastmod: <>,
     * lastmodEpoch: <>, lastmodTimestamp: <>, onCurrentShardSince: <>}
     ','line_number':241,'multiline':True]
['text':'*
     * Constructs a new ChunkType object from BSON with the following format:
     * {_id: <>, min: <>, max: <>, shard: <>, uuid: <>, history: <>, jumbo: <>, lastmod: <>,
     * estimatedSizeByte: <>, onCurrentShardSince: <>}
     *
     * Returns ErrorCodes::NoSuchKey if the '_id' field is missing
     ','line_number':248,'multiline':True]
['text':'*
     * Constructs a new ChunkType object from BSON with the following format:
     * {_id: <>, max: <>, shard: <>, history: <>, lastmod: <>, onCurrentShardSince: <>}
     * Also does validation of the contents.
     ','line_number':259,'multiline':True]
['text':'*
     * Returns the BSON representation of the entry for the config server's config.chunks
     * collection.
     ','line_number':268,'multiline':True]
['text':'*
     * Returns the BSON representation of the entry for a shard server's config.chunks.<epoch>
     * collection.
     ','line_number':274,'multiline':True]
['text':'*
     * Getters and setters.
     ','line_number':283,'multiline':True]
['text':'*
     * Returns OK if all the mandatory fields have been set. Otherwise returns NoSuchKey and
     * information about the first field that is missing.
     ','line_number':347,'multiline':True]
['text':'*
     * Returns a std::string representation of the current internal state.
     ','line_number':353,'multiline':True]
['text':'*
     * Parses the base chunk data on all usages:
     * {history: <>, shard: <>, onCurrentShardSince: <>}
     ','line_number':359,'multiline':True]
['text':' Convention: (M)andatory, (O)ptional, (S)pecial; (C)onfig, (S)hard.','line_number':366,'multiline':False]
['text':' (M)(C)     auto-generated object id','line_number':368,'multiline':False]
['text':' (O)(C)     uuid of the collection in the CollectionCatalog','line_number':370,'multiline':False]
['text':' (M)(C)(S)  first key of the range, inclusive','line_number':372,'multiline':False]
['text':' (M)(C)(S)  last key of the range, non-inclusive','line_number':374,'multiline':False]
['text':' (M)(C)(S)  version of this chunk','line_number':376,'multiline':False]
['text':' (M)(C)(S)  shard this chunk lives in','line_number':378,'multiline':False]
['text':' (O)(C)     chunk size used for chunk merging operation','line_number':380,'multiline':False]
['text':' (O)(C)     too big to move?','line_number':382,'multiline':False]
['text':' (M)(C)(S)  timestamp since this chunk belongs to the current shard','line_number':384,'multiline':False]
['text':' history of the chunk','line_number':386,'multiline':False]
['text':' namespace mongo','line_number':390,'multiline':False]
