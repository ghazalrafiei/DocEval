['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' IWYU pragma: keep','line_number':45,'multiline':False]
['text':'*
 * Invoking `shouldGossipLogicalTime()` is expected to always return "true" during normal execution.
 * SERVER-48013 uses this property to avoid the cost of calling this function during normal
 * execution. However, it might be desired to do the validation for test purposes (e.g.,
 * unit-tests). This fail-point allows going through a code path that does the check and quick
 * returns from `appendRequiredFieldsToResponse()` if `shouldGossipLogicalTime()` returns "false".
 * TODO SERVER-48142 should remove the following fail-point.
 ','line_number':137,'multiline':True]
['text':'*
 * Append required fields to command response.
 ','line_number':154,'multiline':True]
['text':' TODO SERVER-48142 should remove the following block.','line_number':158,'multiline':False]
['text':' The appended operationTime must always be <= the appended $clusterTime, so in case we need to','line_number':167,'multiline':False]
['text':' use $clusterTime as the operationTime below, take a $clusterTime value which is guaranteed to','line_number':168,'multiline':False]
['text':' be <= the value output by gossipOut().','line_number':169,'multiline':False]
['text':' Ensure that either both operationTime and $clusterTime are output, or neither.','line_number':175,'multiline':False]
['text':' If we don't know the actual operation time, use the cluster time instead. This is','line_number':185,'multiline':False]
['text':' safe but not optimal because we can always return a later operation time than','line_number':186,'multiline':False]
['text':' actual.','line_number':187,'multiline':False]
['text':'*
 * Invokes the given command and aborts the transaction on any non-retryable errors.
 ','line_number':197,'multiline':True]
['text':' Don't abort on possibly retryable errors.','line_number':214,'multiline':False]
['text':' Abort if the router wasn't yielded, which may happen at global shutdown.','line_number':220,'multiline':False]
['text':'*
 * Adds info from the active transaction and the given reason as context to the active exception.
 ','line_number':227,'multiline':True]
['text':' Factory class to construct a future-chain that executes the invocation against the database.','line_number':238,'multiline':False]
['text':' Prepare the environment for running the invocation (e.g., checking authorization).','line_number':251,'multiline':False]
['text':' Returns a future that runs the command invocation.','line_number':254,'multiline':False]
['text':' Any logic that must be done post command execution, unless an exception is thrown.','line_number':257,'multiline':False]
['text':' Runs at the end of the future-chain returned by `run()` unless an exception, other than','line_number':260,'multiline':False]
['text':' `ErrorCodes::SkipCommandExecution`, is thrown earlier.','line_number':261,'multiline':False]
['text':' attach tracking','line_number':307,'multiline':False]
['text':' We were run by a background worker.','line_number':365,'multiline':False]
['text':' If the last command wasn't safe for a borrowed thread,','line_number':370,'multiline':False]
['text':' then let's move off of it.','line_number':371,'multiline':False]
['text':' Execution was interrupted due to an error.','line_number':384,'multiline':False]
['text':'*
 * Produces a future-chain that parses the command, runs the parsed command, and captures the result
 * in replyBuilder.
 ','line_number':393,'multiline':True]
['text':' Prepares the environment for running the command (e.g., parsing the command to produce the','line_number':415,'multiline':False]
['text':' invocation and extracting read/write concerns).','line_number':416,'multiline':False]
['text':' updates statistics and applies labels if an error occurs.','line_number':419,'multiline':False]
['text':'
 * Produces a future-chain to run the invocation and capture the result in replyBuilder.
 ','line_number':434,'multiline':True]
['text':'
 * Produces a future-chain that runs the invocation and retries if necessary.
 ','line_number':454,'multiline':True]
['text':' Sets up the environment for running the invocation, and clears the state from the last try.','line_number':471,'multiline':False]
['text':' Exception handler for error codes that may trigger a retry. All methods will throw `status`','line_number':476,'multiline':False]
['text':' unless an attempt to retry is possible.','line_number':477,'multiline':False]
['text':' WriteConcern error (wcCode) is set to boost::none because:','line_number':502,'multiline':False]
['text':' 1. TransientTransaction error label handling for commitTransaction command in mongos is','line_number':503,'multiline':False]
['text':'    delegated to the shards. Mongos simply propagates the shard's response up to the client.','line_number':504,'multiline':False]
['text':' 2. For other commands in a transaction, they shouldn't get a writeConcern error so this','line_number':505,'multiline':False]
['text':'    setting doesn't apply.','line_number':506,'multiline':False]
['text':' isInternalClient ','line_number':512,'multiline':True]
['text':' isMongos ','line_number':513,'multiline':True]
['text':' Parse the 'maxTimeMS' command option, and use it to set a deadline for the operation on','line_number':550,'multiline':False]
['text':' the OperationContext. Be sure to do this as soon as possible so that further processing by','line_number':551,'multiline':False]
['text':' subsequent code has the deadline available. The 'maxTimeMS' option unfortunately has a','line_number':552,'multiline':False]
['text':' different meaning for a getMore command, where it is used to communicate the maximum time to','line_number':553,'multiline':False]
['text':' wait for new inserts on tailable cursors, not as a deadline for the operation.','line_number':554,'multiline':False]
['text':' TODO SERVER-34277 Remove the special handling for maxTimeMS for getMores. This will','line_number':555,'multiline':False]
['text':' require introducing a new 'max await time' parameter for getMore, and eventually banning','line_number':556,'multiline':False]
['text':' maxTimeMS altogether on a getMore command.','line_number':557,'multiline':False]
['text':' If the command includes a 'comment' field, set it on the current OpCtx.','line_number':562,'multiline':False]
['text':' We must obtain the client lock to set APIParameters on the operation context, as it may','line_number':571,'multiline':False]
['text':' be concurrently read by CurrentOp.','line_number':572,'multiline':False]
['text':' Set the logical optype, command object and namespace as soon as we identify the command. If','line_number':582,'multiline':False]
['text':' the command does not define a fully-qualified namespace, set CurOp to the generic command','line_number':583,'multiline':False]
['text':' namespace db.$cmd.','line_number':584,'multiline':False]
['text':' Fill out all currentOp details.','line_number':590,'multiline':False]
['text':' If there are multiple namespaces this command operates on we need to validate them all','line_number':600,'multiline':False]
['text':' explicitly. Otherwise we can use the nss defined above which may be the generic command','line_number':601,'multiline':False]
['text':' namespace.','line_number':602,'multiline':False]
['text':' We must obtain the client lock to set ReadConcernArgs on the operation context, as it may','line_number':618,'multiline':False]
['text':' be concurrently read by CurrentOp.','line_number':619,'multiline':False]
['text':' May trigger maxTimeAlwaysTimeOut fail point.','line_number':662,'multiline':False]
['text':' Preload generic ClientMetadata ahead of our first hello request. After the first','line_number':671,'multiline':False]
['text':' request, metaElement should always be empty.','line_number':672,'multiline':False]
['text':' This command doesn't do writes so it should not be passed a writeConcern.','line_number':718,'multiline':False]
['text':' This is the WC extracted from the command object, so the CWWC or implicit default hasn't been','line_number':723,'multiline':False]
['text':' applied yet, which is why "usedDefaultConstructedWC" flag can be used an indicator of whether','line_number':724,'multiline':False]
['text':' the client supplied a WC or not.','line_number':725,'multiline':False]
['text':' This command is not from a DBDirectClient or internal client, and supports WC,','line_number':753,'multiline':False]
['text':' but wasn't given one - so apply the default, if there is one.','line_number':754,'multiline':False]
['text':' Default WC can be 'boost::none' if the implicit default is used and set to 'w:1'.','line_number':756,'multiline':False]
['text':' Client supplied a write concern object without 'w' field.','line_number':767,'multiline':False]
['text':' Default WC can be 'boost::none' if the implicit default is used and set to 'w:1'.','line_number':770,'multiline':False]
['text':' ClientSupplied is the only provenance that clients are allowed to pass to mongos.','line_number':788,'multiline':False]
['text':' If the client didn't provide a provenance, then an appropriate value needs to be','line_number':796,'multiline':False]
['text':' determined.','line_number':797,'multiline':False]
['text':' Ensure that the WC being set on the opCtx has provenance.','line_number':810,'multiline':False]
['text':' We must obtain the client lock to set ReadConcernArgs, because it's an','line_number':826,'multiline':False]
['text':' in-place reference to the object on the operation context, which may be','line_number':827,'multiline':False]
['text':' concurrently used elsewhere (eg. read by currentOp).','line_number':828,'multiline':False]
['text':' Update the readConcernSupport, since the default RC was applied.','line_number':836,'multiline':False]
['text':' Apply the implicit default read concern even if the command does not support a cluster wide','line_number':858,'multiline':False]
['text':' read concern.','line_number':859,'multiline':False]
['text':' ClientSupplied is the only provenance that clients are allowed to pass to mongos.','line_number':870,'multiline':False]
['text':' If the client didn't provide a provenance, then an appropriate value needs to be determined.','line_number':877,'multiline':False]
['text':' We must obtain the client lock to set the provenance of the opCtx's ReadConcernArgs as it','line_number':879,'multiline':False]
['text':' may be concurrently read by CurrentOp.','line_number':880,'multiline':False]
['text':' Ensure that the RC on the opCtx has provenance.','line_number':891,'multiline':False]
['text':' If we are starting a transaction, we only need to check whether the read concern is','line_number':896,'multiline':False]
['text':' appropriate for running a transaction. There is no need to check whether the specific command','line_number':897,'multiline':False]
['text':' supports the read concern, because all commands that are allowed to run in a transaction must','line_number':898,'multiline':False]
['text':' support all applicable read concerns.','line_number':899,'multiline':False]
['text':' Otherwise, if there is a read concern present - either user-specified or the default - then','line_number':917,'multiline':False]
['text':' check whether the command supports it. If there is no explicit read concern level, then it is','line_number':918,'multiline':False]
['text':' implicitly "local". There is no need to check whether this is supported, because all commands','line_number':919,'multiline':False]
['text':' either support "local" or upconvert the absent readConcern to a stronger level that they do','line_number':920,'multiline':False]
['text':' support; e.g. $changeStream upconverts to RC "majority".','line_number':921,'multiline':False]
['text':'','line_number':922,'multiline':False]
['text':' Individual transaction statements are checked later on, after we've unstashed the transaction','line_number':923,'multiline':False]
['text':' resources.','line_number':924,'multiline':False]
['text':' Remember whether or not this operation is starting a transaction, in case something later in','line_number':934,'multiline':False]
['text':' the execution needs to adjust its behavior based on this.','line_number':935,'multiline':False]
['text':' Re-parse before retrying in case the process of run()-ning the invocation could','line_number':961,'multiline':False]
['text':' affect the parsed result.','line_number':962,'multiline':False]
['text':' On each try, select the latest known clusterTime as the atClusterTime for snapshot reads','line_number':968,'multiline':False]
['text':' outside of transactions.','line_number':969,'multiline':False]
['text':' Choose a time after the user-supplied afterClusterTime.','line_number':975,'multiline':False]
['text':' Retry logic specific to transactions. Throws and aborts the transaction if the error','line_number':1001,'multiline':False]
['text':' cannot be retried on.','line_number':1002,'multiline':False]
['text':' This command must have failed while its session was yielded. We cannot retry in','line_number':1007,'multiline':False]
['text':' this case, whatever the session was yielded to is responsible for that, so','line_number':1008,'multiline':False]
['text':' rethrow the error.','line_number':1009,'multiline':False]
['text':' TODO SERVER-39704 Allow mongos to retry on stale shard, stale db, snapshot, or shard','line_number':1024,'multiline':False]
['text':' invalidated for targeting errors.','line_number':1025,'multiline':False]
['text':' The error is retryable, so update transaction state before retrying.','line_number':1035,'multiline':False]
['text':' The error is retryable, so update transaction state before retrying.','line_number':1057,'multiline':False]
['text':' Mark database entry in cache as stale.','line_number':1102,'multiline':False]
['text':' Simple retry on any type of snapshot error.','line_number':1115,'multiline':False]
['text':' Non-transaction snapshot read. The client sent readConcern: {level: "snapshot",','line_number':1123,'multiline':False]
['text':' atClusterTime: T}, where T is older than minSnapshotHistoryWindowInSeconds, retrying','line_number':1124,'multiline':False]
['text':' won't succeed.','line_number':1125,'multiline':False]
['text':' Try kMaxNumStaleVersionRetries times. On the last try, exceptions are','line_number':1162,'multiline':False]
['text':' rethrown.','line_number':1163,'multiline':False]
['text':' Retry','line_number':1171,'multiline':False]
['text':' Retry','line_number':1175,'multiline':False]
['text':' Retry','line_number':1179,'multiline':False]
['text':' Retry','line_number':1183,'multiline':False]
['text':' Retry','line_number':1187,'multiline':False]
['text':' Retry','line_number':1191,'multiline':False]
['text':' Retry','line_number':1195,'multiline':False]
['text':' We've already skipped execution, so no other action is required.','line_number':1215,'multiline':False]
['text':' Maintains the state required to execute client commands, and provides the interface to construct','line_number':1220,'multiline':False]
['text':' a future-chain that runs the command against the database.','line_number':1221,'multiline':False]
['text':' `getDatabase` throws if the request doesn't have a '$db' field.','line_number':1234,'multiline':False]
['text':' Handler for exceptions thrown during parsing and executing the command.','line_number':1244,'multiline':False]
['text':' Extracts the command response from the replyBuilder.','line_number':1247,'multiline':False]
['text':' If this error needs to fail the connection, propagate it out.','line_number':1266,'multiline':False]
['text':' Record the exception in CurOp.','line_number':1298,'multiline':False]
['text':' Only attach the topology version to the response if mongos is in quiesce mode. If mongos','line_number':1316,'multiline':False]
['text':' is in quiesce mode, this shutdown error is due to mongos rather than a shard.','line_number':1317,'multiline':False]
['text':' Append the topology version to the response.','line_number':1321,'multiline':False]
['text':' Don't reply.','line_number':1337,'multiline':False]
['text':' namespace','line_number':1369,'multiline':False]
['text':' namespace mongo','line_number':1377,'multiline':False]
