['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' Some read commands can safely ignore prepare conflicts by default because they do not','line_number':101,'multiline':False]
['text':' require snapshot isolation and do not conflict with concurrent writes. We also give these','line_number':102,'multiline':False]
['text':' operations permission to write, as this may be required for queries that spill using the','line_number':103,'multiline':False]
['text':' storage engine. The kIgnoreConflictsAllowWrites setting suppresses an assertion in the','line_number':104,'multiline':False]
['text':' storage engine that prevents operations that ignore prepare conflicts from also writing.','line_number':105,'multiline':False]
['text':' Prevent waiting for writeConcern if the command is changing only unreplicated namespaces.','line_number':153,'multiline':False]
['text':' Do not increase consumption metrics during wait for write concern, as in serverless this','line_number':166,'multiline':False]
['text':' might cause a tenant to be billed for reading the oplog entry (which might be of','line_number':167,'multiline':False]
['text':' considerable size) of another tenant.','line_number':168,'multiline':False]
['text':' If lastOp has changed, then a write has been done by this client. This timestamp is','line_number':181,'multiline':False]
['text':' sufficient for waiting for write concern.','line_number':182,'multiline':False]
['text':' If an error occurs after performing a write but before waiting for write concern and','line_number':189,'multiline':False]
['text':' returning to the client, the driver may retry an operation that has already been','line_number':190,'multiline':False]
['text':' completed, resulting in a no-op. The no-op has to wait for the write concern nonetheless,','line_number':191,'multiline':False]
['text':' because acknowledgement from secondaries might still be pending. Given that the timestamp','line_number':192,'multiline':False]
['text':' of the original operation that performed the write is not available, the best','line_number':193,'multiline':False]
['text':' approximation is to use the systemâ€™s last op time, which is guaranteed to be >= than the','line_number':194,'multiline':False]
['text':' original op time.','line_number':195,'multiline':False]
['text':' Ensures that if we tried to do a write, we wait for write concern, even if that write was','line_number':197,'multiline':False]
['text':' a noop. We do not need to update this for multi-document transactions as read-only/noop','line_number':198,'multiline':False]
['text':' transactions will do a noop write at commit time, which should have incremented the','line_number':199,'multiline':False]
['text':' lastOp. And speculative majority semantics dictate that "abortTransaction" should not','line_number':200,'multiline':False]
['text':' wait for write concern on operations the transaction observed.','line_number':201,'multiline':False]
['text':' Waits for write concern if we tried to explicitly set the lastOp forward but lastOp was','line_number':210,'multiline':False]
['text':' already up to date. We still want to wait for write concern on the lastOp. This is','line_number':211,'multiline':False]
['text':' primarily to make sure back to back retryable write retries still wait for write concern.','line_number':212,'multiline':False]
['text':'','line_number':213,'multiline':False]
['text':' WARNING: Retryable writes that expect to wait for write concern on retries must ensure','line_number':214,'multiline':False]
['text':' this is entered by calling setLastOp() or setLastOpToSystemLastOpTime().','line_number':215,'multiline':False]
['text':' If no write was attempted and the client's lastOp was not changed by the current network','line_number':222,'multiline':False]
['text':' operation then we skip waiting for writeConcern.','line_number':223,'multiline':False]
['text':' When a linearizable read command is passed in, check to make sure we're reading from the','line_number':227,'multiline':False]
['text':' primary.','line_number':228,'multiline':False]
['text':' Attach our own last opTime.','line_number':252,'multiline':False]
['text':' The refreshDatabase, refreshCollection, and refreshCatalogCache methods may have modified the','line_number':285,'multiline':False]
['text':' locker state, in particular the flags which say if the operation took a write lock or shared','line_number':286,'multiline':False]
['text':' lock.  This will cause mongod to perhaps erroneously check for write concern when no writes','line_number':287,'multiline':False]
['text':' were done, or unnecessarily kill a read operation.  If we re-use the opCtx to retry command','line_number':288,'multiline':False]
['text':' execution, we must reset the locker state.','line_number':289,'multiline':False]
['text':' It is necessary to lock the client to change the Locker on the OperationContext.','line_number':291,'multiline':False]
['text':' TODO (SERVER-81551): Move the OpMsgRequest parsing above ServiceEntryPoint::handleRequest().','line_number':306,'multiline':False]
['text':' Try to generate a response based on the status. If encounter another error (e.g.','line_number':326,'multiline':False]
['text':' UnsupportedFormat) while trying to generate the response, just return the status.','line_number':327,'multiline':False]
['text':' TODO (SERVER-77921): Support for different ServiceEntryPoints based on role.','line_number':341,'multiline':False]
['text':' namespace mongo','line_number':348,'multiline':False]
