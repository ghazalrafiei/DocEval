['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' IWYU pragma: keep','line_number':46,'multiline':False]
['text':' namespace transport','line_number':78,'multiline':False]
['text':'*
 * Classes that implement this interface can receive notification on killOp.
 *
 * See registerKillOpListener() for more information,
 * including limitations on the lifetime of registered listeners.
 ','line_number':80,'multiline':True]
['text':'*
     * Will be called *after* ops have been told they should die.
     * Callback must not fail.
     ','line_number':91,'multiline':True]
['text':' Should not delete through a pointer of this type','line_number':101,'multiline':False]
['text':'*
 * A simple container type to pass around a client and a lock on said client
 ','line_number':105,'multiline':True]
['text':' Technically speaking, _lk holds a Client* and _client is a superfluous variable. That said,','line_number':130,'multiline':False]
['text':' LockedClients will likely be optimized away and the extra variable is a cheap price to pay','line_number':131,'multiline':False]
['text':' for better developer comprehension.','line_number':132,'multiline':False]
['text':'*
 * Users may provide an OperationKey when sending a command request as a stable token by which to
 * refer to an operation (and thus an OperationContext). An OperationContext is not required to have
 * an OperationKey. The presence of an OperationKey implies that the client is either closely
 * tracking or speculative executing its command.
 ','line_number':137,'multiline':True]
['text':'*
 * A synchronized owning pointer to avoid setters racing with getters.
 * This only guarantees that getters receive a coherent value, and
 * not that the pointer is still valid.
 *
 * The kernel of operations is `set` and and `get`, others ops are sugar.
 ','line_number':147,'multiline':True]
['text':' namespace service_context_detail','line_number':194,'multiline':False]
['text':'*
 * Class representing the context of a service, such as a MongoD database service or
 * a MongoS routing service.
 *
 * A ServiceContext is the root of a hierarchy of contexts.  A ServiceContext owns
 * zero or more Clients, which in turn each own OperationContexts.
 ','line_number':196,'multiline':True]
['text':'*
     * Observer interface implemented to hook client and operation context creation and
     * destruction.
     ','line_number':210,'multiline':True]
['text':'*
         * Hook called after a new client "client" is created on a service
         * managed by this ServiceContext.
         *
         * For a given client and registered instance of ClientObserver, if onCreateClient
         * returns without throwing an exception, onDestroyClient will be called when "client"
         * is deleted.
         ','line_number':218,'multiline':True]
['text':'*
         * Hook called on a "client" created by a service before deleting "client".
         *
         * Like a destructor, must not throw exceptions.
         ','line_number':228,'multiline':True]
['text':'*
         * Hook called after a new operation context is created on a client by
         * service->makeOperationContext(client)  or client->makeOperationContext().
         *
         * For a given operation context and registered instance of ClientObserver, if
         * onCreateOperationContext returns without throwing an exception,
         * onDestroyOperationContext will be called when "opCtx" is deleted.
         ','line_number':235,'multiline':True]
['text':'*
         * Hook called on a "opCtx" created by a service before deleting "opCtx".
         * Note that this hook is called before any other work is done in the
         * OperationContext destructor, meaning the OperationContext is still
         * valid and registered with the ServiceContext when this hook is
         * executed.
         *
         * Like a destructor, must not throw exceptions.
         ','line_number':245,'multiline':True]
['text':'*
     * Cursor for enumerating the live Client objects belonging to a ServiceContext.
     *
     * Lifetimes of this type are synchronized with client creation and destruction.
     ','line_number':259,'multiline':True]
['text':'*
         * Constructs a cursor for enumerating the clients of "service", blocking "service" from
         * creating or destroying Client objects until this instance is destroyed.
         ','line_number':266,'multiline':True]
['text':'*
         * Returns the next client in the enumeration, or nullptr if there are no more clients.
         ','line_number':272,'multiline':True]
['text':'*
     * Special deleter used for cleaning up ServiceContext objects.
     * See UniqueServiceContext, below.
     ','line_number':283,'multiline':True]
['text':'*
     * Special deleter used for cleaning up Client objects owned by a ServiceContext.
     * See UniqueClient, below.
     ','line_number':294,'multiline':True]
['text':'*
     * This is the unique handle type for Clients created by a ServiceContext.
     ','line_number':303,'multiline':True]
['text':'*
     * Special deleter used for cleaning up OperationContext objects owned by a ServiceContext.
     * See UniqueOperationContext, below.
     ','line_number':308,'multiline':True]
['text':'*
     * This is the unique handle type for OperationContexts created by a ServiceContext.
     ','line_number':317,'multiline':True]
['text':'*
     * Register a function of this type using  an instance of ConstructorActionRegisterer,
     * below, to cause the function to be executed on new ServiceContext instances.
     ','line_number':322,'multiline':True]
['text':'*
     * Register a function of this type using an instance of ConstructorActionRegisterer,
     * below, to cause the function to be executed on ServiceContext instances before they
     * are destroyed.
     ','line_number':328,'multiline':True]
['text':'*
     * Representation of a paired ConstructorAction and DestructorAction.
     ','line_number':335,'multiline':True]
['text':'*
     * Registers a function to execute on new service contexts when they are created, and optionally
     * also register a function to execute before those contexts are destroyed.
     *
     * Construct instances of this type during static initialization only, as they register
     * MONGO_INITIALIZERS.
     ','line_number':355,'multiline':True]
['text':'*
         * This constructor registers a constructor and optional destructor with the given
         * "name" and no prerequisite constructors or mongo initializers.
         ','line_number':364,'multiline':True]
['text':'*
         * This constructor registers a constructor and optional destructor with the given
         * "name", and a list of names of prerequisites, "prereqs".
         *
         * The named constructor will run after all of its prereqs successfully complete,
         * and the corresponding destructor, if provided, will run before any of its
         * prerequisites execute.
         ','line_number':372,'multiline':True]
['text':'*
         * This constructor registers a constructor and optional destructor with the given
         * "name", a list of names of prerequisites, "prereqs", and a list of names of dependents,
         * "dependents".
         *
         * The named constructor will run after all of its prereqs successfully complete,
         * and the corresponding destructor, if provided, will run before any of its
         * prerequisites execute. The dependents will run after this constructor and
         * the corresponding destructor, if provided, will run after any of its
         * dependents execute.
         ','line_number':385,'multiline':True]
['text':'*
     * Factory function for making instances of ServiceContext. It is the only means by which they
     * should be created.
     ','line_number':408,'multiline':True]
['text':'*
     * Registers an observer of lifecycle events on Clients created by this ServiceContext.
     *
     * See the ClientObserver type, above, for details.
     *
     * All calls to registerClientObserver must complete before ServiceContext
     * is used in multi-threaded operation, or is used to create clients via calls
     * to makeClient on Service instances managed by this ServiceContext.
     ','line_number':417,'multiline':True]
['text':'* Internal: Called by Service->makeClient. ','line_number':428,'multiline':True]
['text':'*
     * Creates a new OperationContext on "client".
     *
     * "client" must not have an active operation context.
     *
     ','line_number':433,'multiline':True]
['text':'','line_number':441,'multiline':False]
['text':' Storage','line_number':442,'multiline':False]
['text':'','line_number':443,'multiline':False]
['text':'*
     * Sets the storage engine for this instance. May be called up to once per instance, unless
     * clearStorageEngine() is called in which it may be called once after each call to
     * clearStorageEngine().
     ','line_number':445,'multiline':True]
['text':'*
     * Return the storage engine instance we're using.
     ','line_number':452,'multiline':True]
['text':'*
     * Clear the current storage engine so we can set a new one.  This is safe to call only if
     * the caller has arranged for no opCtxs to be accessing the existing storage engine,
     * and that no new opCtxs can be created which will access storage until this call returns.
     *
     * See StorageEngineChangeContext for one way this may be done.
     ','line_number':459,'multiline':True]
['text':'*
     * Return the storage change lock.
     ','line_number':470,'multiline':True]
['text':'','line_number':477,'multiline':False]
['text':' Global operation management.  This may not belong here and there may be too many methods','line_number':478,'multiline':False]
['text':' here.','line_number':479,'multiline':False]
['text':'','line_number':480,'multiline':False]
['text':'*
     * Signal all OperationContext(s) that they have been killed except the ones belonging to the
     * excluded clients.
     ','line_number':482,'multiline':True]
['text':'*
     * Reset the operation kill state after a killAllOperations.
     * Used for testing.
     ','line_number':488,'multiline':True]
['text':'*
     * Get the state for killing all operations.
     ','line_number':494,'multiline':True]
['text':'*
     * Kills the operation "opCtx" with the code "killCode", if opCtx has not already been killed.
     * Caller must own the lock on opCtx->getClient, and opCtx->getServiceContext() must be the same
     * as this service context. WithLock expects that the client lock be passed in.
     *','line_number':501,'multiline':True]
['text':'*
     * Delists the operation by removing it from its client. Both
     * "opCtx->getClient()->getServiceContext()" and "this" must point to the same instance of
     * ServiceContext. Also, "opCtx" should never be deleted before this method returns. Finally,
     * the thread invoking this method must not hold the client and the service context locks.
     ','line_number':510,'multiline':True]
['text':'*
     * Kills the operation "opCtx" with the code "killCode", if opCtx has not already been killed,
     * and delists the operation by removing it from its client. Both
     * "opCtx->getClient()->getServiceContext()" and "this" must point to the same instance of
     * service context. Also, "opCtx" should never be deleted before this method returns. Finally,
     * the thread invoking this method must not hold (own) the client and the service context locks.
     * It is highly recommended to use "ErrorCodes::OperationIsKilledAndDelisted" as the error code
     * to facilitate debugging.
     ','line_number':518,'multiline':True]
['text':'*
     * Registers a listener to be notified each time an op is killed.
     *
     * listener does not become owned by the environment. As there is currently no way to
     * unregister, the listener object must outlive this ServiceContext object.
     ','line_number':531,'multiline':True]
['text':'','line_number':539,'multiline':False]
['text':' Background tasks.','line_number':540,'multiline':False]
['text':'','line_number':541,'multiline':False]
['text':'*
     * Set a periodic runner on the service context. The runner should already be
     * started when it is moved onto the service context. The service context merely
     * takes ownership of this object to allow it to continue running for the life of
     * the process
     ','line_number':543,'multiline':True]
['text':'*
     * Returns a pointer to the global periodic runner owned by this service context.
     ','line_number':551,'multiline':True]
['text':'','line_number':556,'multiline':False]
['text':' Transport.','line_number':557,'multiline':False]
['text':'','line_number':558,'multiline':False]
['text':'*
     * Get the master TransportLayerManager. Routes to all other TransportLayers that
     * may be in use within this service.
     *
     * See TransportLayerManager for more details.
     ','line_number':560,'multiline':True]
['text':'*
     * Waits for the ServiceContext to be fully initialized and for all TransportLayers to have been
     * added/started.
     *
     * If startup is already complete this returns immediately.
     ','line_number':568,'multiline':True]
['text':'
     * Marks initialization as complete and all transport layers as started.
     ','line_number':576,'multiline':True]
['text':'
     * Returns the number of active client operations
     ','line_number':581,'multiline':True]
['text':'*
     * Set the OpObserver.
     ','line_number':586,'multiline':True]
['text':'*
     * Return the OpObserver instance we're using. This may be an OpObserverRegistry that in fact
     * contains multiple observers.
     ','line_number':591,'multiline':True]
['text':'*
     * Returns the tick/clock source set in this context.
     ','line_number':599,'multiline':True]
['text':'*
     * Get a ClockSource implementation that may be less precise than the _preciseClockSource but
     * may be cheaper to call.
     ','line_number':606,'multiline':True]
['text':'*
     * Get a ClockSource implementation that is very precise but may be expensive to call.
     ','line_number':614,'multiline':True]
['text':'*
     * Replaces the current tick/clock source with a new one. In other words, the old source will be
     * destroyed. So make sure that no one is using the old source when calling this.
     ','line_number':621,'multiline':True]
['text':'*
     * Replaces the current tick/clock source with a new one. In other words, the old source will be
     * destroyed. So make sure that no one is using the old source when calling this.
     ','line_number':627,'multiline':True]
['text':'*
     * Call this method with a ClockSource implementation that may be less precise than
     * the _preciseClockSource but may be cheaper to call.
     ','line_number':633,'multiline':True]
['text':'*
     * Call this method with a ClockSource implementation that is very precise but
     * may be expensive to call.
     ','line_number':639,'multiline':True]
['text':'*
     * Binds the TransportLayerManager to the service context. The TransportLayerManager should have
     * already had setup() called successfully, but not startup().
     *
     * This should be a TransportLayerManager created with the global server configuration.
     ','line_number':645,'multiline':True]
['text':'*
     * Creates a delayed execution baton with basic functionality
     ','line_number':653,'multiline':True]
['text':'*
     * Returns true if user writes are allowed.
     *
     * User writes are disallowed when starting with queryableBackupMode or
     * recoverFromOplogAsStandalone to prevent users from writing to replicated collections in
     * standalone mode.
     *
     * To determine whether an operation must run in read-only mode, use
     * OperationContext::readOnly().
     ','line_number':670,'multiline':True]
['text':'* The `role` must be ShardServer or RouterServer exactly. ','line_number':686,'multiline':True]
['text':'*
     * Returns the shard service if it exists.
     * Otherwise, returns the router service.
     *
     * Gets the "main service" of this ServiceContext. Used when a caller needs
     * some Service, but it doesn't matter which
     * Service they get.
     ','line_number':689,'multiline':True]
['text':'*
     * Removes the operation from its client. It will acquire both client and service context locks,
     * and should only be used internally by other ServiceContext methods. To ensure delisted
     * operations are shortly deleted, this method should only be called after killing an operation
     * or in its destructor.
     ','line_number':723,'multiline':True]
['text':'HierarchicalAcquisitionLevel(2), ','line_number':731,'multiline':True]
['text':'*
     * The periodic runner.
     ','line_number':733,'multiline':True]
['text':'*
     * The TransportLayer.
     ','line_number':738,'multiline':True]
['text':'*
     * The storage engine, if any.
     ','line_number':743,'multiline':True]
['text':'*
     * The lock that protects changing out the storage engine.
     ','line_number':748,'multiline':True]
['text':'*
     * Vector of registered observers.
     ','line_number':753,'multiline':True]
['text':'*
     * The registered OpObserver.
     ','line_number':759,'multiline':True]
['text':'*
     * A ClockSource implementation that may be less precise than the _preciseClockSource but
     * may be cheaper to call.
     ','line_number':766,'multiline':True]
['text':'*
     * A ClockSource implementation that is very precise but may be expensive to call.
     ','line_number':773,'multiline':True]
['text':' Flag set to indicate that all operations are to be interrupted ASAP.','line_number':778,'multiline':False]
['text':' protected by _mutex','line_number':781,'multiline':False]
['text':' When the catalog is restarted, the generation goes up by one each time.','line_number':784,'multiline':False]
['text':' Server-wide flag indicating whether users' writes are allowed.','line_number':787,'multiline':False]
['text':'*
 * A Service is a grouping of Clients, and is a creator of Client objects.
 * It determines the ClusterRole of the Clients and the CommandRegistry
 * available to them. Each service tracks some metrics separately.
 *
 * A Service is logically on a level below the ServiceContext, which holds state
 * for the whole process, and above Client, which holds state for each
 * connection. A ServiceContext owns one or more Service objects.
 *
 * A Service will be the handler for either the "shard" or "router" service, as
 * both services can now exist in the same server process (ServiceContext).
 ','line_number':796,'multiline':True]
['text':'*
     * Creates a new Client object representing a client session associated with this
     * Service.
     *
     * The "desc" string is used to set a descriptive name for the client, used in logging.
     *
     * If supplied, "session" is the transport::Session used for communicating with the client.
     ','line_number':816,'multiline':True]
['text':'*
 * Returns true if there is a global ServiceContext.
 ','line_number':849,'multiline':True]
['text':'*
 * Returns the singleton ServiceContext for this server process.
 *
 * Fatal if there is currently no global ServiceContext.
 *
 * Caller does not own pointer.
 ','line_number':854,'multiline':True]
['text':'*
 * Returns the ServiceContext associated with the current Client.
 *
 * Returns a nullptr if there is not a current Client
 *
 * Caller does not own pointer.
 ','line_number':863,'multiline':True]
['text':'*
 * Sets the global ServiceContext.  If 'serviceContext' is NULL, un-sets and deletes
 * the current global ServiceContext.
 *
 * Takes ownership of 'serviceContext'.
 ','line_number':872,'multiline':True]
['text':'*
 * Maps `service`'s ClusterRole (or ClusterRole::None if `service` is nullptr) to a LogService.
 ','line_number':880,'multiline':True]
['text':' namespace mongo','line_number':885,'multiline':False]
