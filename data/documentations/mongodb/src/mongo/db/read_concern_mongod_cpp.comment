['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 *  Synchronize writeRequests
 ','line_number':105,'multiline':True]
['text':'*
     * Returns a tuple <false, existingWriteRequest> if it can  find the one that happened after or
     * at clusterTime.
     * Returns a tuple <true, newWriteRequest> otherwise.
     ','line_number':117,'multiline':True]
['text':'*
     * Erases writeRequest that happened at clusterTime
     ','line_number':135,'multiline':True]
['text':'*
 *  Schedule a write via appendOplogNote command to the primary of this replica set.
 ','line_number':152,'multiline':True]
['text':' secondaries may lag primary so wait first to avoid unnecessary noop writes.','line_number':165,'multiline':False]
['text':' this loop addresses the case when two or more threads need to advance the opLog time but the','line_number':185,'multiline':False]
['text':' one that waits for the notification gets the later clusterTime, so when the request finishes','line_number':186,'multiline':False]
['text':' it needs to be repeated with the later time.','line_number':187,'multiline':False]
['text':' Standalone replica set, so there is no need to advance the OpLog on the primary. The only','line_number':189,'multiline':False]
['text':' exception is after a tenant migration because the target time may be from the other','line_number':190,'multiline':False]
['text':' replica set and is not guaranteed to be in the oplog of this node's set.','line_number':191,'multiline':False]
['text':' Its a new request','line_number':206,'multiline':False]
['text':' signal the writeRequest to unblock waiters','line_number':235,'multiline':False]
['text':' If the write status is ok need to wait for the oplog to replicate.','line_number':252,'multiline':False]
['text':' If the write failed with StaleClusterTime it means that the noop write to the primary was','line_number':257,'multiline':False]
['text':' not necessary to bump the clusterTime. It could be a race where the secondary decides to','line_number':258,'multiline':False]
['text':' issue the noop write while some writes have already happened on the primary that have','line_number':259,'multiline':False]
['text':' bumped the clusterTime beyond the 'clusterTime' the noop write requested.','line_number':260,'multiline':False]
['text':' This is when the noop write failed but the opLog caught up to clusterTime by replicating.','line_number':272,'multiline':False]
['text':'*
 * Evaluates if it's safe for the command to ignore prepare conflicts.
 ','line_number':283,'multiline':True]
['text':' Only these read concern levels are eligible for ignoring prepare conflicts.','line_number':294,'multiline':False]
['text':' DBDirectClient should inherit whether or not to ignore prepare conflicts from its parent.','line_number':314,'multiline':False]
['text':' Enforce prepare conflict behavior if the command is not eligible to ignore prepare conflicts.','line_number':319,'multiline':False]
['text':' If we are in a direct client that's holding a global lock, then this means it is illegal to','line_number':332,'multiline':False]
['text':' wait for read concern. This is fine, since the outer operation should have handled waiting','line_number':333,'multiline':False]
['text':' for read concern. We don't want to ignore prepare conflicts because reads in transactions','line_number':334,'multiline':False]
['text':' should block on prepared transactions.','line_number':335,'multiline':False]
['text':' For standalone nodes, Linearizable Read is not supported.','line_number':346,'multiline':False]
['text':' We must read the member state before obtaining the cluster time. Otherwise, we can','line_number':396,'multiline':False]
['text':' run into a race where the cluster time is read as uninitialized, but the member state','line_number':397,'multiline':False]
['text':' is set to RECOVERING by another thread before we invariant that the node is in','line_number':398,'multiline':False]
['text':' STARTUP or STARTUP2.','line_number':399,'multiline':False]
['text':' currentTime should only be uninitialized if we are in startup recovery or initial','line_number':405,'multiline':False]
['text':' sync.','line_number':406,'multiline':False]
['text':' This block is not used for kSnapshotReadConcern because snapshots are always speculative;','line_number':454,'multiline':False]
['text':' we wait for majority when the transaction commits.','line_number':455,'multiline':False]
['text':' It is not used for atClusterTime because waitUntilOpTimeForRead handles waiting for','line_number':456,'multiline':False]
['text':' the majority snapshot in that case.','line_number':457,'multiline':False]
['text':' Handle speculative majority reads.','line_number':459,'multiline':False]
['text':' For speculative majority reads, we utilize the "no overlap" read source as a means of','line_number':462,'multiline':False]
['text':' always reading at the minimum of the all-committed and lastApplied timestamps. This','line_number':463,'multiline':False]
['text':' allows for safe behavior on both primaries and secondaries, where the behavior of the','line_number':464,'multiline':False]
['text':' all-committed and lastApplied timestamps differ significantly.','line_number':465,'multiline':False]
['text':' Wait until a snapshot is available.','line_number':484,'multiline':False]
['text':' If the lastStableRecoveryTimestamp hasn't passed atClusterTime, we invoke','line_number':520,'multiline':False]
['text':' flushAllFiles explicitly here to push it. By default, fsync will run every minute to','line_number':521,'multiline':False]
['text':' call flushAllFiles. The lastStableRecoveryTimestamp should already be updated after','line_number':522,'multiline':False]
['text':' flushAllFiles return but we add a retry to make sure we wait until the timestamp gets','line_number':523,'multiline':False]
['text':' advanced.','line_number':524,'multiline':False]
['text':'callerHoldsReadLock','line_number':525,'multiline':True]
['text':' If we are in a direct client that's holding a global lock, then this means this is a','line_number':542,'multiline':False]
['text':' sub-operation of the parent. In this case we delegate the wait to the parent.','line_number':543,'multiline':False]
['text':' With linearizable readConcern, read commands may write to the oplog, which is an','line_number':565,'multiline':False]
['text':' exception to the rule that writes are not allowed while ignoring prepare conflicts. If we','line_number':566,'multiline':False]
['text':' are ignoring prepare conflicts (during a read command), force the prepare conflict','line_number':567,'multiline':False]
['text':' behavior to permit writes.','line_number':568,'multiline':False]
['text':' If we are in a direct client that's holding a global lock, then this means this is a','line_number':601,'multiline':False]
['text':' sub-operation of the parent. In this case we delegate the wait to the parent.','line_number':602,'multiline':False]
['text':' Select the timestamp to wait on. A command may have selected a specific timestamp to wait on.','line_number':608,'multiline':False]
['text':' If not, then we use the timestamp selected by the read source.','line_number':609,'multiline':False]
['text':' Speculative majority reads are required to use the 'kNoOverlap' read source.','line_number':616,'multiline':False]
['text':' Storage engine operations require at least Global IS.','line_number':620,'multiline':False]
['text':' Block to make sure returned data is majority committed.','line_number':628,'multiline':False]
['text':' This hard-coded value represents the maximum time we are willing to wait for a timestamp','line_number':637,'multiline':False]
['text':' to majority commit when doing a speculative majority read if no maxTimeMS value has been','line_number':638,'multiline':False]
['text':' set for the command. We make this value rather conservative. This exists primarily to','line_number':639,'multiline':False]
['text':' address the fact that getMore commands do not respect maxTimeMS properly. In this case,','line_number':640,'multiline':False]
['text':' we still want speculative majority reads to time out after some period if a timestamp','line_number':641,'multiline':False]
['text':' cannot majority commit.','line_number':642,'multiline':False]
['text':' namespace','line_number':667,'multiline':False]
['text':' namespace mongo','line_number':669,'multiline':False]
