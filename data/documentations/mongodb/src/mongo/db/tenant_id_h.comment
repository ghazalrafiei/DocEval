['text':'*
 *    Copyright (C) 2022-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 *  Representation of a tenant identifier.
 ','line_number':49,'multiline':True]
['text':'*
     * Parse a tenantId from a StringData. This method asserts if the tenantId is empty or not in an
     * OID format.
     * Returns a TenantId object from the parsed string.
     ','line_number':59,'multiline':True]
['text':'*
     * Returns -1, 0, or 1 if 'this' is less, equal, or greater than 'other' in
     * lexicographical order.
     ','line_number':74,'multiline':True]
['text':'*
     * Functor compatible with std::hash for std::unordered_{map,set}
     ','line_number':86,'multiline':True]
['text':'*
     * Hash function compatible with absl::Hash for absl::unordered_{map,set}
     ','line_number':95,'multiline':True]
['text':'*
     * Hash function compatible with absl::Hash with an absl::unordered_{map,set} keyed with
     * boost::optional<TenantId>.
     ','line_number':103,'multiline':True]
['text':'*
     * Parse tenant id from BSON. The function is used by IDL parsers.
     ','line_number':114,'multiline':True]
['text':'*
     * Serialize tenant id to BSON. These functions are used by IDL parsers.
     ','line_number':119,'multiline':True]
['text':'*
 * Supports use of TenantId with the BSON macro:
 *     BSON("tenant" << tenantId)
 ','line_number':166,'multiline':True]
['text':' namespace mongo','line_number':173,'multiline':False]
