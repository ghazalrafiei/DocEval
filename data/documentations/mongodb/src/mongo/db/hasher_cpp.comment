['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 * Defines a simple hash function class.
 ','line_number':30,'multiline':True]
['text':' pointer to next part of input key, length in bytes to read','line_number':62,'multiline':False]
['text':' All numerical values should be converted to an int64_t before being added to the hash input.','line_number':69,'multiline':False]
['text':' finish computing the hash, put the result in the digest','line_number':74,'multiline':False]
['text':' only call this once per Hasher','line_number':75,'multiline':False]
['text':' Convert 'number' to little endian and then append it to the digest input. The number of bytes','line_number':79,'multiline':False]
['text':' appended is determined by the input type, so ensure that type T has a well defined size that','line_number':80,'multiline':False]
['text':' is the same on all platforms.','line_number':81,'multiline':False]
['text':' if there are no embedded objects (subobjects or arrays),','line_number':117,'multiline':False]
['text':' compute the hash, squashing numeric types to 64-bit ints','line_number':118,'multiline':False]
['text':' Use safeNumberLongForHash, because it is well-defined for troublesome doubles.','line_number':120,'multiline':False]
['text':' else identify the subobject.','line_number':126,'multiline':False]
['text':' hash any preceding stuff (in the case of codeWscope)','line_number':127,'multiline':False]
['text':' then each sub-element','line_number':128,'multiline':False]
['text':' then finish with the EOO element.','line_number':129,'multiline':False]
['text':' namespace','line_number':145,'multiline':False]
['text':' HashDigest is actually 16 bytes, but we just read 8 bytes','line_number':152,'multiline':False]
['text':' namespace mongo','line_number':157,'multiline':False]
