['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 * A sequence of bytes that can be manipulated using vectorized instructions.
 *
 * This is specific to the use case in mongo::unicode::String and not intended as a general purpose
 * vector class.
 *
 * This specialization offers acceleration for ppc64le
 ','line_number':44,'multiline':True]
['text':' Logically 16 bits, but this is the actual output type of vec_vbpermq','line_number':56,'multiline':False]
['text':'*
     * Sets all bytes to 0.
     ','line_number':62,'multiline':True]
['text':'*
     * Sets all bytes to val.
     ','line_number':69,'multiline':True]
['text':'*
     * Load a vector from a potentially unaligned location.
     ','line_number':76,'multiline':True]
['text':' This function is documented as taking an unaligned pointer.','line_number':80,'multiline':False]
['text':'*
     * Store this vector to a potentially unaligned location.
     ','line_number':84,'multiline':True]
['text':' This function is documented as taking an unaligned pointer.','line_number':88,'multiline':False]
['text':'*
     * Returns a bitmask with the high bit from each byte.
     ','line_number':92,'multiline':True]
['text':' The bits array represents the api indexes of the left to right high bits.','line_number':96,'multiline':False]
['text':'','line_number':97,'multiline':False]
['text':' This seems really wrong, but the indexes you hand to vec_vbpermq are actually mirrored on','line_number':98,'multiline':False]
['text':' little endian (the interface seems more designed for big endian).  You'd do 7, 15, etc on','line_number':99,'multiline':False]
['text':' big endian by comparison.','line_number':100,'multiline':False]
['text':'*
     * Returns a bitmask with any bit from each byte.
     *
     * This operation only makes sense if all bytes are either 0x00 or 0xff, such as the result from
     * comparison operations.
     ','line_number':106,'multiline':True]
['text':' Other archs may be more efficient here.','line_number':113,'multiline':False]
['text':'*
     * Counts zero bits in mask from whichever side corresponds to the lowest memory address.
     ','line_number':116,'multiline':True]
['text':'*
     * Sets each byte to 0xff if it is ==(EQ), <(LT), or >(GT), otherwise 0x00.
     *
     * May use either signed or unsigned comparisons since this use case doesn't care about bytes
     * with high bit set.
     ','line_number':123,'multiline':True]
['text':' namespace unicode','line_number':161,'multiline':False]
['text':' namespace mongo','line_number':162,'multiline':False]
