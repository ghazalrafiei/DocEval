['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' max 1-byte codepoint ','line_number':50,'multiline':True]
['text':' max 2-byte codepoint','line_number':52,'multiline':True]
['text':' 2 leading 1s.','line_number':53,'multiline':False]
['text':' max 3-byte codepoint','line_number':55,'multiline':True]
['text':' 3 leading 1s.','line_number':56,'multiline':False]
['text':' 4 leading 1s.','line_number':61,'multiline':False]
['text':' namespace','line_number':67,'multiline':False]
['text':' Convert UTF-8 input to UTF-32 data.','line_number':75,'multiline':False]
['text':' Convert UTF-8 input to UTF-32 data.','line_number':80,'multiline':False]
['text':' _data is the target, resize it so that it's guaranteed to fit all of the input characters,','line_number':85,'multiline':False]
['text':' plus a null character if there isn't one.','line_number':86,'multiline':False]
['text':' Although utf8_src.rawData() is not guaranteed to be null-terminated, copyString8to32 won't','line_number':92,'multiline':False]
['text':' access bad memory because it is limited by the size of its output buffer, which is set to the','line_number':93,'multiline':False]
['text':' size of utf8_src.','line_number':94,'multiline':False]
['text':' Resize _data so it is only as big as what it contains.','line_number':103,'multiline':False]
['text':' _outputBuf is the target, resize it so that it's guaranteed to fit all of the input','line_number':109,'multiline':False]
['text':' characters, plus a null character if there isn't one.','line_number':110,'multiline':False]
['text':' Resize output so it is only as large as what it contains.','line_number':116,'multiline':False]
['text':' Reserve room for worst-case expansion.','line_number':132,'multiline':False]
['text':' This fires if your input buffer the same as your output buffer.','line_number':163,'multiline':False]
['text':' No transformation needed. Just return the input data unmodified.','line_number':167,'multiline':False]
['text':' Allocate space for up to 2x growth which is the worst possible case for stripping diacritics','line_number':171,'multiline':False]
['text':' and casefolding. Proof: the only case where 1 byte goes to >1 is 'I' in Turkish going to 2','line_number':172,'multiline':False]
['text':' bytes. The biggest codepoint is 4 bytes which is also 2x 2 bytes. This holds as long as we','line_number':173,'multiline':False]
['text':' don't map a single code point to more than one.','line_number':174,'multiline':False]
['text':' Try the fast path for 16 contiguous bytes of ASCII.','line_number':181,'multiline':False]
['text':' Count the bytes of ASCII.','line_number':184,'multiline':False]
['text':' 0xFF for each byte in word that is uppercase, 0x00 for all others.','line_number':195,'multiline':False]
['text':' Set the ascii lowercase bit.','line_number':197,'multiline':False]
['text':' If we get here, inputIt is positioned on a byte that we know needs special handling.','line_number':215,'multiline':False]
['text':' Either it isn't ASCII or it is a diacritic that needs to be stripped.','line_number':216,'multiline':False]
['text':' ASCII special case. Can use faster operations.','line_number':222,'multiline':False]
['text':' In Turkish, I -> Ä± (i with no dot).','line_number':225,'multiline':False]
['text':' Set the ascii lowercase bit on the character.','line_number':226,'multiline':False]
['text':' ASCII has two pure diacritics that should be skipped and no characters that','line_number':228,'multiline':False]
['text':' change when removing diacritics.','line_number':229,'multiline':False]
['text':' firstByte indicates that it is not an ASCII char.','line_number':236,'multiline':False]
['text':' Only checking enough to ensure that this code doesn't crash in the face of malformed','line_number':239,'multiline':False]
['text':' utf-8. We make no guarantees about what results will be returned in this case.','line_number':240,'multiline':False]
['text':' mask off the size indicator.','line_number':245,'multiline':False]
['text':' mask off continuation bits.','line_number':249,'multiline':False]
['text':' codepoint is a pure diacritic.','line_number':259,'multiline':False]
['text':' Turkish comparisons are always case insensitive due to their handling of I/i.','line_number':275,'multiline':False]
['text':' Case sensitive and diacritic sensitive.','line_number':284,'multiline':False]
['text':' namespace unicode','line_number':295,'multiline':False]
['text':' namespace mongo','line_number':296,'multiline':False]
