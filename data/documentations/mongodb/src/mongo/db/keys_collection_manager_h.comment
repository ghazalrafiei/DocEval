['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 * Returns the amount of time to wait until the monitoring thread should attempt to refresh again.
 ','line_number':62,'multiline':True]
['text':' namespace keys_collection_manager_util','line_number':69,'multiline':False]
['text':'*
 * The KeysCollectionManager queries the config servers for keys that can be used for
 * HMAC computation. It maintains an internal background thread that is used to periodically
 * refresh the local key cache against the keys collection stored on the config servers.
 ','line_number':71,'multiline':True]
['text':'*
     * Returns the validation keys that are valid for the given time and also match the keyId. Does
     * a blocking refresh if there is no matching internal key. If there is a matching internal key,
     * includes it as first key in the resulting vector.
     *
     * Throws ExceededTimeLimit if the refresh times out, and KeyNotFound if there are no such keys.
     ','line_number':84,'multiline':True]
['text':'*
     * Returns the signing key that is valid for the given time. Note that unlike
     * getKeysForValidation, this will never do a refresh.
     ','line_number':94,'multiline':True]
['text':'*
     * Request this manager to perform a refresh.
     ','line_number':101,'multiline':True]
['text':'*
     * Starts a background thread that will constantly update the internal cache of keys.
     *
     * Cannot call this after stopMonitoring was called at least once.
     ','line_number':106,'multiline':True]
['text':'*
     * Stops the background thread updating the cache.
     ','line_number':113,'multiline':True]
['text':'*
     * Enable writing new keys to the config server primary. Should only be called if current node
     * is the config primary.
     ','line_number':118,'multiline':True]
['text':'*
     * Returns true if the refresher has ever successfully returned keys from the config server.
     ','line_number':124,'multiline':True]
['text':'*
     * Clears the in memory cache of the keys.
     ','line_number':129,'multiline':True]
['text':'*
     * Loads the given external key into the keys collection cache.
     ','line_number':134,'multiline':True]
['text':'*
     * This is responsible for periodically performing refresh in the background.
     ','line_number':140,'multiline':True]
['text':'*
         * Preemptively inform the monitoring thread it needs to perform a refresh. Returns an
         * object
         * that gets notified after the current round of refresh is over. Note that being notified
         * can
         * mean either of these things:
         *
         * 1. An error occurred and refresh was not performed.
         * 2. No error occurred but no new key was found.
         * 3. No error occurred and new keys were found.
         ','line_number':147,'multiline':True]
['text':'*
         * Sets the refresh function to use.
         * Should only be used to bootstrap this refresher with initial strategy.
         ','line_number':160,'multiline':True]
['text':'*
         * Switches the current strategy with a new one. This also waits to make sure that the old
         * strategy is not being used and will no longer be used after this call.
         ','line_number':166,'multiline':True]
['text':'*
         * Starts the refresh thread.
         ','line_number':172,'multiline':True]
['text':'*
         * Stops the refresh thread.
         ','line_number':179,'multiline':True]
['text':'*
         * Returns true if keys have ever successfully been returned from the config server.
         ','line_number':184,'multiline':True]
['text':'*
         * Returns if the periodic runner has entered shutdown.
         ','line_number':189,'multiline':True]
['text':' protects all the member variables below.','line_number':201,'multiline':False]
['text':' No mutex needed since the members below have their own mutexes.','line_number':216,'multiline':False]
['text':' namespace mongo','line_number':221,'multiline':False]
