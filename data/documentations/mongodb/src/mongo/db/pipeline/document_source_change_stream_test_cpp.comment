['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' IWYU pragma: no_include "ext/alloc_traits.h"','line_number':37,'multiline':False]
['text':' Deterministic values used for testing','line_number':124,'multiline':False]
['text':' Used by operations which need to obtain the oplog's UUID.','line_number':136,'multiline':False]
['text':' This mock iterator simulates a traversal of transaction history in the oplog by returning','line_number':142,'multiline':False]
['text':' mock oplog entries from a list.','line_number':143,'multiline':False]
['text':' For tests of transactions that involve multiple oplog entries.','line_number':168,'multiline':False]
['text':' Simulate a lookup on the oplog timestamp by manually advancing the iterator until we','line_number':173,'multiline':False]
['text':' reach the desired timestamp.','line_number':174,'multiline':False]
['text':' Called by DocumentSourceAddPreImage to obtain the UUID of the oplog. Since that's the only','line_number':186,'multiline':False]
['text':' piece of collection info we need for now, just return a BSONObj with the mock oplog UUID.','line_number':187,'multiline':False]
['text':' Stores oplog entries associated with a commit operation, including the oplog entries that a','line_number':207,'multiline':False]
['text':' real DocumentSourceChangeStream would not see, because they are marked with a "prepare" or','line_number':208,'multiline':False]
['text':' "partialTxn" flag. When the DocumentSourceChangeStream sees the commit for the transaction,','line_number':209,'multiline':False]
['text':' either an explicit "commitCommand" or an implicit commit represented by an "applyOps" that is','line_number':210,'multiline':False]
['text':' not marked with the "prepare" or "partialTxn" flag, it uses a TransactionHistoryIterator to','line_number':211,'multiline':False]
['text':' go back and look up these entries.','line_number':212,'multiline':False]
['text':'','line_number':213,'multiline':False]
['text':' These entries are stored in the order they would be returned by the','line_number':214,'multiline':False]
['text':' TransactionHistoryIterator, which is the _reverse_ of the order they appear in the oplog.','line_number':215,'multiline':False]
['text':' These documents are used to feed the 'lookupSingleDocument' method.','line_number':218,'multiline':False]
['text':' Initialize the UUID on the ExpressionContext, to allow tests with a resumeToken.','line_number':225,'multiline':False]
['text':' Match stage should pass the doc down if expectedDoc is given.','line_number':257,'multiline':False]
['text':' Then throw an exception on the next call of getNext().','line_number':268,'multiline':False]
['text':'*
     * Returns a list of stages expanded from a $changStream specification, starting with a
     * DocumentSourceMock which contains a single document representing 'entry'.
     *
     * Stages such as DSEnsureResumeTokenPresent which can swallow results are removed from the
     * returned list.
     ','line_number':273,'multiline':True]
['text':' removeEnsureResumeTokenStage ','line_number':281,'multiline':True]
['text':'*
     * Returns a list of the stages expanded from a $changStream specification, starting with a
     * DocumentSourceMock which contains a list of document representing 'entries'.
     ','line_number':284,'multiline':True]
['text':' This match stage is a DocumentSourceChangeStreamOplogMatch, which we explicitly disallow','line_number':297,'multiline':False]
['text':' from executing as a safety mechanism, since it needs to use the collection-default','line_number':298,'multiline':False]
['text':' collation, even if the rest of the pipeline is using some other collation. To avoid ever','line_number':299,'multiline':False]
['text':' executing that stage here, we'll up-convert it from the non-executable','line_number':300,'multiline':False]
['text':' DocumentSourceChangeStreamOplogMatch to a fully-executable DocumentSourceMatch. This is','line_number':301,'multiline':False]
['text':' safe because all of the unit tests will use the 'simple' collation.','line_number':302,'multiline':False]
['text':' Replace the original match with the executable one.','line_number':306,'multiline':False]
['text':' Check the oplog entry is transformed correctly.','line_number':309,'multiline':False]
['text':' Create mock stage and insert at the front of the stages.','line_number':314,'multiline':False]
['text':' Wire up the stages by setting the source stage.','line_number':326,'multiline':False]
['text':' op type','line_number':345,'multiline':False]
['text':' namespace','line_number':346,'multiline':False]
['text':' o','line_number':347,'multiline':False]
['text':' uuid','line_number':348,'multiline':False]
['text':' fromMigrate','line_number':349,'multiline':False]
['text':' o2','line_number':350,'multiline':False]
['text':' opTime','line_number':351,'multiline':False]
['text':'*
     * Helper for running an applyOps through the pipeline, and getting all of the results.
     ','line_number':355,'multiline':True]
['text':' Create an oplog entry and then glue on an lsid and optionally a txnNumber','line_number':364,'multiline':False]
['text':' fromMigrate','line_number':369,'multiline':False]
['text':' Create the stages and check that the documents produced matched those in the applyOps.','line_number':378,'multiline':False]
['text':'*
     * Helper function to do a $v:2 delta oplog test.
     ','line_number':410,'multiline':True]
['text':' op type','line_number':415,'multiline':False]
['text':' namespace','line_number':416,'multiline':False]
['text':' o','line_number':417,'multiline':False]
['text':' uuid','line_number':418,'multiline':False]
['text':' fromMigrate','line_number':419,'multiline':False]
['text':' o2','line_number':420,'multiline':False]
['text':'*
     * Helper to create change stream pipeline for testing.
     ','line_number':427,'multiline':True]
['text':'*
     * Helper to verify if the change stream pipeline contains expected stages.
     ','line_number':442,'multiline':True]
['text':' In older versions this option was accepted.','line_number':483,'multiline':False]
['text':' Need to put the collection in the collection catalog so the resume token is valid.','line_number':519,'multiline':False]
['text':'ts=','line_number':524,'multiline':True]
['text':' Need to put the collection in the collection catalog so the resume token is validcollection','line_number':545,'multiline':False]
['text':'ts=','line_number':550,'multiline':True]
['text':' Need to put the collection in the collection catalog so the resume token is valid.','line_number':576,'multiline':False]
['text':'ts=','line_number':581,'multiline':True]
['text':' Need to put the collection in the collection catalog so the resume token is valid.','line_number':602,'multiline':False]
['text':'ts=','line_number':607,'multiline':True]
['text':' op type','line_number':676,'multiline':False]
['text':' namespace','line_number':677,'multiline':False]
['text':' o','line_number':678,'multiline':False]
['text':' uuid','line_number':679,'multiline':False]
['text':' fromMigrate','line_number':680,'multiline':False]
['text':' o2','line_number':681,'multiline':False]
['text':' Note _id <-> x reversal.','line_number':692,'multiline':False]
['text':' also check actual "fromMigrate: false" not filtered','line_number':695,'multiline':False]
['text':' op type','line_number':696,'multiline':False]
['text':' namespace','line_number':697,'multiline':False]
['text':' o','line_number':698,'multiline':False]
['text':' uuid','line_number':699,'multiline':False]
['text':' fromMigrate','line_number':700,'multiline':False]
['text':' o2','line_number':701,'multiline':False]
['text':' op type','line_number':706,'multiline':False]
['text':' namespace','line_number':707,'multiline':False]
['text':' o','line_number':708,'multiline':False]
['text':' uuid','line_number':709,'multiline':False]
['text':' fromMigrate','line_number':710,'multiline':False]
['text':' o2','line_number':711,'multiline':False]
['text':' _id first','line_number':722,'multiline':False]
['text':' op type','line_number':728,'multiline':False]
['text':' namespace','line_number':729,'multiline':False]
['text':' o','line_number':730,'multiline':False]
['text':' uuid','line_number':731,'multiline':False]
['text':' fromMigrate','line_number':732,'multiline':False]
['text':' o2','line_number':733,'multiline':False]
['text':' op type','line_number':750,'multiline':False]
['text':' namespace','line_number':751,'multiline':False]
['text':' o','line_number':752,'multiline':False]
['text':' uuid','line_number':753,'multiline':False]
['text':' fromMigrate','line_number':754,'multiline':False]
['text':' o2','line_number':755,'multiline':False]
['text':' op type','line_number':762,'multiline':False]
['text':' namespace','line_number':763,'multiline':False]
['text':' o','line_number':764,'multiline':False]
['text':' uuid','line_number':765,'multiline':False]
['text':' fromMigrate','line_number':766,'multiline':False]
['text':' o2','line_number':767,'multiline':False]
['text':' _id first','line_number':779,'multiline':False]
['text':' op type','line_number':788,'multiline':False]
['text':' namespace','line_number':789,'multiline':False]
['text':' o','line_number':790,'multiline':False]
['text':' uuid','line_number':791,'multiline':False]
['text':' fromMigrate','line_number':792,'multiline':False]
['text':' o2','line_number':793,'multiline':False]
['text':' op type','line_number':809,'multiline':False]
['text':' namespace','line_number':810,'multiline':False]
['text':' o','line_number':811,'multiline':False]
['text':' uuid','line_number':812,'multiline':False]
['text':' fromMigrate','line_number':813,'multiline':False]
['text':' o2','line_number':814,'multiline':False]
['text':' expanded events ','line_number':823,'multiline':True]
['text':' "arrField.2.a" should be updated.','line_number':928,'multiline':False]
['text':' Test updating non-contiguous fields.','line_number':929,'multiline':False]
['text':' "subObj.b" should be removed.','line_number':932,'multiline':False]
['text':' "subObj.a" should be updated.','line_number':933,'multiline':False]
['text':' Legacy documents might not have an _id field; then the document key is the full (post-update)','line_number':953,'multiline':False]
['text':' document.','line_number':954,'multiline':False]
['text':' op type','line_number':959,'multiline':False]
['text':' namespace','line_number':960,'multiline':False]
['text':' o','line_number':961,'multiline':False]
['text':' uuid','line_number':962,'multiline':False]
['text':' fromMigrate','line_number':963,'multiline':False]
['text':' o2','line_number':964,'multiline':False]
['text':' op type','line_number':979,'multiline':False]
['text':' namespace','line_number':980,'multiline':False]
['text':' o','line_number':981,'multiline':False]
['text':' uuid','line_number':982,'multiline':False]
['text':' fromMigrate','line_number':983,'multiline':False]
['text':' o2','line_number':984,'multiline':False]
['text':' namespace','line_number':992,'multiline':False]
['text':' op type','line_number':997,'multiline':False]
['text':' namespace','line_number':998,'multiline':False]
['text':' o','line_number':999,'multiline':False]
['text':' uuid','line_number':1000,'multiline':False]
['text':' fromMigrate','line_number':1001,'multiline':False]
['text':' o2','line_number':1002,'multiline':False]
['text':' Replace','line_number':1004,'multiline':False]
['text':' op type','line_number':1021,'multiline':False]
['text':' namespace','line_number':1022,'multiline':False]
['text':' o','line_number':1023,'multiline':False]
['text':' uuid','line_number':1024,'multiline':False]
['text':' fromMigrate','line_number':1025,'multiline':False]
['text':' o2','line_number':1026,'multiline':False]
['text':' Replace','line_number':1028,'multiline':False]
['text':' op type','line_number':1045,'multiline':False]
['text':' namespace','line_number':1046,'multiline':False]
['text':' o','line_number':1047,'multiline':False]
['text':' uuid','line_number':1048,'multiline':False]
['text':' fromMigrate','line_number':1049,'multiline':False]
['text':' o2','line_number':1050,'multiline':False]
['text':' Delete','line_number':1052,'multiline':False]
['text':' also check actual "fromMigrate: false" not filtered','line_number':1064,'multiline':False]
['text':' op type','line_number':1065,'multiline':False]
['text':' namespace','line_number':1066,'multiline':False]
['text':' o','line_number':1067,'multiline':False]
['text':' uuid','line_number':1068,'multiline':False]
['text':' fromMigrate','line_number':1069,'multiline':False]
['text':' o2','line_number':1070,'multiline':False]
['text':' op type','line_number':1077,'multiline':False]
['text':' namespace','line_number':1078,'multiline':False]
['text':' o','line_number':1079,'multiline':False]
['text':' uuid','line_number':1080,'multiline':False]
['text':' fromMigrate','line_number':1081,'multiline':False]
['text':' o2','line_number':1082,'multiline':False]
['text':' Delete','line_number':1084,'multiline':False]
['text':' also check actual "fromMigrate: false" not filtered','line_number':1097,'multiline':False]
['text':' op type','line_number':1098,'multiline':False]
['text':' namespace','line_number':1099,'multiline':False]
['text':' o','line_number':1100,'multiline':False]
['text':' uuid','line_number':1101,'multiline':False]
['text':' fromMigrate','line_number':1102,'multiline':False]
['text':' o2','line_number':1103,'multiline':False]
['text':' op type','line_number':1110,'multiline':False]
['text':' namespace','line_number':1111,'multiline':False]
['text':' o','line_number':1112,'multiline':False]
['text':' uuid','line_number':1113,'multiline':False]
['text':' fromMigrate','line_number':1114,'multiline':False]
['text':' o2','line_number':1115,'multiline':False]
['text':' op type','line_number':1123,'multiline':False]
['text':' namespace','line_number':1124,'multiline':False]
['text':' o','line_number':1125,'multiline':False]
['text':' uuid','line_number':1126,'multiline':False]
['text':' fromMigrate','line_number':1127,'multiline':False]
['text':' o2','line_number':1128,'multiline':False]
['text':' fromMigrate','line_number':1355,'multiline':False]
['text':' fromMigrate','line_number':1384,'multiline':False]
['text':' fromMigrate','line_number':1414,'multiline':False]
['text':' Should not return anything.','line_number':1447,'multiline':False]
['text':' Should crash.','line_number':1460,'multiline':False]
['text':' Should crash.','line_number':1473,'multiline':False]
['text':' Should crash.','line_number':1487,'multiline':False]
['text':' hasTxnNumber ','line_number':1501,'multiline':True]
['text':' hasTxnNumber ','line_number':1535,'multiline':True]
['text':' Doesn't use the checkTransformation() pattern that other tests use since we expect multiple','line_number':1550,'multiline':False]
['text':' documents to be returned from one applyOps.','line_number':1551,'multiline':False]
['text':' All documents should be skipped.','line_number':1571,'multiline':False]
['text':' applyOps entries that are part of a prepared transaction are ignored. These entries will be','line_number':1587,'multiline':False]
['text':' fetched for changeStreams delivery as part of transaction commit.','line_number':1588,'multiline':False]
['text':' Create an oplog entry representing a prepared transaction.','line_number':1593,'multiline':False]
['text':' fromMigrate','line_number':1611,'multiline':False]
['text':' o2 field','line_number':1612,'multiline':False]
['text':' Create an oplog entry representing the commit for the prepared transaction. The commit has a','line_number':1615,'multiline':False]
['text':' 'prevWriteOpTimeInTransaction' value that matches the 'preparedApplyOps' entry, which the','line_number':1616,'multiline':False]
['text':' MockMongoInterface will pretend is in the oplog.','line_number':1617,'multiline':False]
['text':' optime','line_number':1622,'multiline':False]
['text':' opType','line_number':1623,'multiline':False]
['text':' namespace','line_number':1624,'multiline':False]
['text':' uuid','line_number':1625,'multiline':False]
['text':' fromMigrate','line_number':1626,'multiline':False]
['text':' checkExistenceForDiffInsert','line_number':1627,'multiline':False]
['text':' version','line_number':1628,'multiline':False]
['text':' o','line_number':1629,'multiline':False]
['text':' o2','line_number':1630,'multiline':False]
['text':' sessionInfo','line_number':1631,'multiline':False]
['text':' upsert','line_number':1632,'multiline':False]
['text':' wall clock time','line_number':1633,'multiline':False]
['text':' statement ids','line_number':1634,'multiline':False]
['text':' optime of previous write within same transaction','line_number':1635,'multiline':False]
['text':' pre-image optime','line_number':1636,'multiline':False]
['text':' post-image optime','line_number':1637,'multiline':False]
['text':' ShardId of resharding recipient','line_number':1638,'multiline':False]
['text':' _id','line_number':1639,'multiline':False]
['text':' needsRetryImage','line_number':1640,'multiline':False]
['text':' When the DocumentSourceChangeStreamTransform sees the "commitTransaction" oplog entry, we','line_number':1642,'multiline':False]
['text':' expect it to return the insert op within our 'preparedApplyOps' oplog entry.','line_number':1643,'multiline':False]
['text':' Create two applyOps entries that together represent a whole transaction.','line_number':1665,'multiline':False]
['text':' fromMigrate','line_number':1688,'multiline':False]
['text':' o2 field','line_number':1689,'multiline':False]
['text':' The absence of the "partialTxn" and "prepare" fields indicates that this command commits
           the transaction. ','line_number':1704,'multiline':True]
['text':' fromMigrate','line_number':1712,'multiline':False]
['text':' o2 field','line_number':1713,'multiline':False]
['text':' We do not use the checkTransformation() pattern that other tests use since we expect multiple','line_number':1718,'multiline':False]
['text':' documents to be returned from one applyOps.','line_number':1719,'multiline':False]
['text':' Populate the MockTransactionHistoryEditor in reverse chronological order.','line_number':1724,'multiline':False]
['text':' We should get three documents from the change stream, based on the documents in the two','line_number':1728,'multiline':False]
['text':' applyOps entries.','line_number':1729,'multiline':False]
['text':' Create a transaction that is chained across 5 applyOps oplog entries. The first, third, and','line_number':1790,'multiline':False]
['text':' final oplog entries in the transaction chain contain empty applyOps arrays. The test verifies','line_number':1791,'multiline':False]
['text':' that change streams (1) correctly detect the transaction chain despite the fact that the','line_number':1792,'multiline':False]
['text':' final applyOps, which implicitly commits the transaction, is empty; and (2) behaves correctly','line_number':1793,'multiline':False]
['text':' upon encountering empty applyOps at other stages of the transaction chain.','line_number':1794,'multiline':False]
['text':' fromMigrate','line_number':1805,'multiline':False]
['text':' o2 field','line_number':1806,'multiline':False]
['text':' fromMigrate','line_number':1828,'multiline':False]
['text':' o2 field','line_number':1829,'multiline':False]
['text':' fromMigrate','line_number':1844,'multiline':False]
['text':' o2 field','line_number':1845,'multiline':False]
['text':' fromMigrate','line_number':1865,'multiline':False]
['text':' o2 field','line_number':1866,'multiline':False]
['text':' The absence of the "partialTxn" and "prepare" fields indicates that this command commits
           the transaction. ','line_number':1874,'multiline':True]
['text':' fromMigrate','line_number':1882,'multiline':False]
['text':' o2 field','line_number':1883,'multiline':False]
['text':' We do not use the checkTransformation() pattern that other tests use since we expect multiple','line_number':1888,'multiline':False]
['text':' documents to be returned from one applyOps.','line_number':1889,'multiline':False]
['text':' Populate the MockTransactionHistoryEditor in reverse chronological order.','line_number':1894,'multiline':False]
['text':' We should get three documents from the change stream, based on the documents in the two','line_number':1902,'multiline':False]
['text':' applyOps entries.','line_number':1903,'multiline':False]
['text':' Create a transaction that is chained across 2 applyOps oplog entries. This test verifies that','line_number':1946,'multiline':False]
['text':' a change stream correctly reads an empty transaction and does not observe any events from it.','line_number':1947,'multiline':False]
['text':' fromMigrate','line_number':1958,'multiline':False]
['text':' o2 field','line_number':1959,'multiline':False]
['text':' The absence of the "partialTxn" and "prepare" fields indicates that this command commits
           the transaction. ','line_number':1967,'multiline':True]
['text':' fromMigrate','line_number':1975,'multiline':False]
['text':' o2 field','line_number':1976,'multiline':False]
['text':' We do not use the checkTransformation() pattern that other tests use since we expect multiple','line_number':1981,'multiline':False]
['text':' documents to be returned from one applyOps.','line_number':1982,'multiline':False]
['text':' Populate the MockTransactionHistoryEditor in reverse chronological order.','line_number':1987,'multiline':False]
['text':' We should get three documents from the change stream, based on the documents in the two','line_number':1991,'multiline':False]
['text':' applyOps entries.','line_number':1992,'multiline':False]
['text':' Create two applyOps entries that together represent a whole transaction.','line_number':2002,'multiline':False]
['text':' fromMigrate','line_number':2025,'multiline':False]
['text':' o2 field','line_number':2026,'multiline':False]
['text':' fromMigrate','line_number':2048,'multiline':False]
['text':' o2 field','line_number':2049,'multiline':False]
['text':' Create an oplog entry representing the commit for the prepared transaction.','line_number':2054,'multiline':False]
['text':' optime','line_number':2056,'multiline':False]
['text':' opType','line_number':2057,'multiline':False]
['text':' namespace','line_number':2058,'multiline':False]
['text':' uuid','line_number':2059,'multiline':False]
['text':' fromMigrate','line_number':2060,'multiline':False]
['text':' checkExistenceForDiffInsert','line_number':2061,'multiline':False]
['text':' version','line_number':2062,'multiline':False]
['text':' o','line_number':2063,'multiline':False]
['text':' o2','line_number':2064,'multiline':False]
['text':' sessionInfo','line_number':2065,'multiline':False]
['text':' upsert','line_number':2066,'multiline':False]
['text':' wall clock time','line_number':2067,'multiline':False]
['text':' statement ids','line_number':2068,'multiline':False]
['text':' optime of previous write within same transaction','line_number':2069,'multiline':False]
['text':' pre-image optime','line_number':2070,'multiline':False]
['text':' post-image optime','line_number':2071,'multiline':False]
['text':' ShardId of resharding recipient','line_number':2072,'multiline':False]
['text':' _id','line_number':2073,'multiline':False]
['text':' needsRetryImage','line_number':2074,'multiline':False]
['text':' We do not use the checkTransformation() pattern that other tests use since we expect multiple','line_number':2076,'multiline':False]
['text':' documents to be returned from one applyOps.','line_number':2077,'multiline':False]
['text':' Populate the MockTransactionHistoryEditor in reverse chronological order.','line_number':2082,'multiline':False]
['text':' We should get three documents from the change stream, based on the documents in the two','line_number':2086,'multiline':False]
['text':' applyOps entries.','line_number':2087,'multiline':False]
['text':' Timestamp of the commitCommand.','line_number':2100,'multiline':False]
['text':' Timestamp of the commitCommand.','line_number':2119,'multiline':False]
['text':' Timestamp of the commitCommand.','line_number':2138,'multiline':False]
['text':' Create two applyOps entries that together represent a whole transaction.','line_number':2154,'multiline':False]
['text':' fromMigrate','line_number':2177,'multiline':False]
['text':' o2 field','line_number':2178,'multiline':False]
['text':' The second applyOps is empty.','line_number':2189,'multiline':False]
['text':' fromMigrate','line_number':2194,'multiline':False]
['text':' o2 field','line_number':2195,'multiline':False]
['text':' Create an oplog entry representing the commit for the prepared transaction.','line_number':2200,'multiline':False]
['text':' optime','line_number':2202,'multiline':False]
['text':' opType','line_number':2203,'multiline':False]
['text':' namespace','line_number':2204,'multiline':False]
['text':' uuid','line_number':2205,'multiline':False]
['text':' fromMigrate','line_number':2206,'multiline':False]
['text':' checkExistenceForDiffInsert','line_number':2207,'multiline':False]
['text':' version','line_number':2208,'multiline':False]
['text':' o','line_number':2209,'multiline':False]
['text':' o2','line_number':2210,'multiline':False]
['text':' sessionInfo','line_number':2211,'multiline':False]
['text':' upsert','line_number':2212,'multiline':False]
['text':' wall clock time','line_number':2213,'multiline':False]
['text':' statement ids','line_number':2214,'multiline':False]
['text':' optime of previous write within same transaction','line_number':2215,'multiline':False]
['text':' pre-image optime','line_number':2216,'multiline':False]
['text':' post-image optime','line_number':2217,'multiline':False]
['text':' ShardId of resharding recipient','line_number':2218,'multiline':False]
['text':' _id','line_number':2219,'multiline':False]
['text':' needsRetryImage','line_number':2220,'multiline':False]
['text':' We do not use the checkTransformation() pattern that other tests use since we expect multiple','line_number':2222,'multiline':False]
['text':' documents to be returned from one applyOps.','line_number':2223,'multiline':False]
['text':' Populate the MockTransactionHistoryEditor in reverse chronological order.','line_number':2228,'multiline':False]
['text':' We should get two documents from the change stream, based on the documents in the non-empty','line_number':2232,'multiline':False]
['text':' applyOps entry.','line_number':2233,'multiline':False]
['text':' Timestamp of the commitCommand.','line_number':2246,'multiline':False]
['text':' Timestamp of the commitCommand.','line_number':2265,'multiline':False]
['text':' Doesn't use the checkTransformation() pattern that other tests use since we expect multiple','line_number':2277,'multiline':False]
['text':' documents to be returned from one applyOps.','line_number':2278,'multiline':False]
['text':' Operation on another namespace which should be skipped.','line_number':2294,'multiline':False]
['text':' The third document should be skipped.','line_number':2304,'multiline':False]
['text':' Check that the first document is correct.','line_number':2307,'multiline':False]
['text':' Check the second document.','line_number':2316,'multiline':False]
['text':' The third document is skipped.','line_number':2326,'multiline':False]
['text':' Enable the endOfTransaction feature flag so this test produces an EOT change event.','line_number':2330,'multiline':False]
['text':' Doesn't use the checkTransformation() pattern that other tests use since we expect multiple','line_number':2332,'multiline':False]
['text':' documents to be returned from one applyOps.','line_number':2333,'multiline':False]
['text':' Operation on another collection which should be skipped.','line_number':2351,'multiline':False]
['text':' The create operation should be skipped.','line_number':2360,'multiline':False]
['text':' Check that the first document is correct.','line_number':2363,'multiline':False]
['text':' Check the second document.','line_number':2373,'multiline':False]
['text':' The third document in applyOps is skipped, so the third document of the result is','line_number':2383,'multiline':False]
['text':' endOfTransaction.','line_number':2384,'multiline':False]
['text':' Third document (with txnOpIndex == 2) is skipped, so EOT should have txnOpIndex == 3.','line_number':2393,'multiline':False]
['text':' Test the 'clusterTime' field is copied from the oplog entry for an update.','line_number':2402,'multiline':False]
['text':' op type','line_number':2406,'multiline':False]
['text':' namespace','line_number':2407,'multiline':False]
['text':' o','line_number':2408,'multiline':False]
['text':' uuid','line_number':2409,'multiline':False]
['text':' fromMigrate','line_number':2410,'multiline':False]
['text':' o2','line_number':2411,'multiline':False]
['text':' opTime','line_number':2412,'multiline':False]
['text':' Test the 'clusterTime' field is copied from the oplog entry for a collection drop.','line_number':2422,'multiline':False]
['text':' Test the 'clusterTime' field is copied from the oplog entry for a collection rename.','line_number':2436,'multiline':False]
['text':' op type','line_number':2467,'multiline':False]
['text':' namespace','line_number':2468,'multiline':False]
['text':' o','line_number':2470,'multiline':False]
['text':'','line_number':2491,'multiline':False]
['text':' Serialize the stage and confirm contents.','line_number':2492,'multiline':False]
['text':'','line_number':2493,'multiline':False]
['text':'','line_number':2503,'multiline':False]
['text':' Create a new stage from the serialization. Serialize the new stage and confirm that it is','line_number':2504,'multiline':False]
['text':' equivalent to the original serialization.','line_number':2505,'multiline':False]
['text':'','line_number':2506,'multiline':False]
['text':' DSCSTransform stage should be the third stage after DSCSOplogMatch and','line_number':2514,'multiline':False]
['text':' DSCSUnwindTransactions stages.','line_number':2515,'multiline':False]
['text':' Verify that the 'initialPostBatchResumeToken' is populated while parsing.','line_number':2523,'multiline':False]
['text':' Reset for the next run.','line_number':2526,'multiline':False]
['text':' Verify that an additional start point field is populated while serializing.','line_number':2539,'multiline':False]
['text':' Verify that the 'initialPostBatchResumeToken' is populated while parsing.','line_number':2558,'multiline':False]
['text':' Reset for the next run.','line_number':2561,'multiline':False]
['text':' Transform into drop entry.','line_number':2691,'multiline':False]
['text':' Transform into invalidate entry.','line_number':2694,'multiline':False]
['text':' Then throw an exception on the next call of getNext().','line_number':2697,'multiline':False]
['text':' Add a match stage after change stream to filter out the invalidate entries.','line_number':2705,'multiline':False]
['text':' Throw an exception on the call of getNext().','line_number':2709,'multiline':False]
['text':'ts=','line_number':2724,'multiline':True]
['text':' op type','line_number':2733,'multiline':False]
['text':' namespace','line_number':2734,'multiline':False]
['text':' o','line_number':2735,'multiline':False]
['text':' uuid','line_number':2736,'multiline':False]
['text':' fromMigrate','line_number':2737,'multiline':False]
['text':' o2','line_number':2738,'multiline':False]
['text':' opTime','line_number':2739,'multiline':False]
['text':' The documentKey should have just an _id in this case.','line_number':2741,'multiline':False]
['text':' Verify the same behavior with resuming using 'startAfter'.','line_number':2755,'multiline':False]
['text':'ts=','line_number':2771,'multiline':True]
['text':' op type','line_number':2781,'multiline':False]
['text':' namespace','line_number':2782,'multiline':False]
['text':' o','line_number':2783,'multiline':False]
['text':' uuid','line_number':2784,'multiline':False]
['text':' fromMigrate','line_number':2785,'multiline':False]
['text':' o2','line_number':2786,'multiline':False]
['text':' opTime','line_number':2787,'multiline':False]
['text':' When o2 is present in the oplog entry, we should use its value for the document key, even if','line_number':2799,'multiline':False]
['text':' the resume token doesn't contain shard key.','line_number':2800,'multiline':False]
['text':' Verify the same behavior with resuming using 'startAfter'.','line_number':2804,'multiline':False]
['text':'ts=','line_number':2817,'multiline':True]
['text':' Create a resume token from only the timestamp.','line_number':2821,'multiline':False]
['text':' Renaming to a non-system collection will include a notification in the stream.','line_number':2833,'multiline':False]
['text':' Note that the collection rename does *not* have the queued invalidated field.','line_number':2840,'multiline':False]
['text':' Renaming to a system collection will include a notification in the stream.','line_number':2856,'multiline':False]
['text':' Note that the collection rename does *not* have the queued invalidated field.','line_number':2863,'multiline':False]
['text':' Need to put the collection in the collection catalog so the resume token is valid.','line_number':2882,'multiline':False]
['text':'ts=','line_number':2888,'multiline':True]
['text':' op type','line_number':2909,'multiline':False]
['text':' namespace','line_number':2910,'multiline':False]
['text':' o','line_number':2911,'multiline':False]
['text':' uuid','line_number':2912,'multiline':False]
['text':' fromMigrate','line_number':2913,'multiline':False]
['text':' o2','line_number':2914,'multiline':False]
['text':'','line_number':2931,'multiline':False]
['text':' Test class for change stream of a single database.','line_number':2932,'multiline':False]
['text':'','line_number':2933,'multiline':False]
['text':' Note _id <-> x reversal.','line_number':2957,'multiline':False]
['text':' Note _id <-> x reversal.','line_number':2980,'multiline':False]
['text':' Insert on another collection in the same database.','line_number':2995,'multiline':False]
['text':' Note _id <-> x reversal.','line_number':3006,'multiline':False]
['text':' Namespace starts with the db name, but is longer.','line_number':3013,'multiline':False]
['text':' Namespace contains the db name, but not at the front.','line_number':3015,'multiline':False]
['text':' Namespace contains the db name + dot.','line_number':3017,'multiline':False]
['text':' Namespace contains the db name + dot but is followed by $.','line_number':3019,'multiline':False]
['text':' Insert into another database.','line_number':3023,'multiline':False]
['text':' A missing $v field in the update oplog entry implies $v:1, which is no longer supported.','line_number':3074,'multiline':False]
['text':' op type','line_number':3108,'multiline':False]
['text':' namespace','line_number':3109,'multiline':False]
['text':' o','line_number':3110,'multiline':False]
['text':' uuid','line_number':3111,'multiline':False]
['text':' fromMigrate','line_number':3112,'multiline':False]
['text':' o2','line_number':3113,'multiline':False]
['text':' op type','line_number':3126,'multiline':False]
['text':' namespace','line_number':3127,'multiline':False]
['text':' o','line_number':3128,'multiline':False]
['text':' uuid','line_number':3129,'multiline':False]
['text':' fromMigrate','line_number':3130,'multiline':False]
['text':' o2','line_number':3131,'multiline':False]
['text':' Replace','line_number':3133,'multiline':False]
['text':' op type','line_number':3149,'multiline':False]
['text':' namespace','line_number':3150,'multiline':False]
['text':' o','line_number':3151,'multiline':False]
['text':' uuid','line_number':3152,'multiline':False]
['text':' fromMigrate','line_number':3153,'multiline':False]
['text':' o2','line_number':3154,'multiline':False]
['text':' Delete','line_number':3156,'multiline':False]
['text':' also check actual "fromMigrate: false" not filtered','line_number':3168,'multiline':False]
['text':' op type','line_number':3169,'multiline':False]
['text':' namespace','line_number':3170,'multiline':False]
['text':' o','line_number':3171,'multiline':False]
['text':' uuid','line_number':3172,'multiline':False]
['text':' fromMigrate','line_number':3173,'multiline':False]
['text':' o2','line_number':3174,'multiline':False]
['text':' op type','line_number':3181,'multiline':False]
['text':' namespace','line_number':3182,'multiline':False]
['text':' o','line_number':3183,'multiline':False]
['text':' uuid','line_number':3184,'multiline':False]
['text':' fromMigrate','line_number':3185,'multiline':False]
['text':' o2','line_number':3186,'multiline':False]
['text':' op type','line_number':3194,'multiline':False]
['text':' namespace','line_number':3195,'multiline':False]
['text':' o','line_number':3196,'multiline':False]
['text':' uuid','line_number':3197,'multiline':False]
['text':' fromMigrate','line_number':3198,'multiline':False]
['text':' o2','line_number':3199,'multiline':False]
['text':' Delete','line_number':3201,'multiline':False]
['text':' Drop database entry doesn't have a UUID.','line_number':3252,'multiline':False]
['text':' Drop database entry doesn't have a UUID.','line_number':3279,'multiline':False]
['text':' Rename from a 'system' collection to another 'system' collection should not include a','line_number':3312,'multiline':False]
['text':' notification.','line_number':3313,'multiline':False]
['text':' Renaming to a non-system collection will include a notification in the stream.','line_number':3322,'multiline':False]
['text':' Note that the collection rename does *not* have the queued invalidated field.','line_number':3331,'multiline':False]
['text':' Renaming to a system collection will include a notification in the stream.','line_number':3349,'multiline':False]
['text':' Note that the collection rename does *not* have the queued invalidated field.','line_number':3356,'multiline':False]
['text':'ts=','line_number':3391,'multiline':True]
['text':' op type','line_number':3399,'multiline':False]
['text':' namespace','line_number':3400,'multiline':False]
['text':' o','line_number':3401,'multiline':False]
['text':' uuid','line_number':3402,'multiline':False]
['text':' fromMigrate','line_number':3403,'multiline':False]
['text':' o2','line_number':3404,'multiline':False]
['text':' opTime','line_number':3405,'multiline':False]
['text':' The documentKey should just have an _id in this case.','line_number':3407,'multiline':False]
['text':'ts=','line_number':3433,'multiline':True]
['text':' op type','line_number':3442,'multiline':False]
['text':' namespace','line_number':3443,'multiline':False]
['text':' o','line_number':3444,'multiline':False]
['text':' uuid','line_number':3445,'multiline':False]
['text':' fromMigrate','line_number':3446,'multiline':False]
['text':' o2','line_number':3447,'multiline':False]
['text':' opTime','line_number':3448,'multiline':False]
['text':' When o2 is present in the oplog entry, we should use its value for the document key, even if','line_number':3460,'multiline':False]
['text':' the resume token doesn't contain shard key.','line_number':3461,'multiline':False]
['text':' Need to put the collection in the collection catalog so the resume token is valid.','line_number':3469,'multiline':False]
['text':'ts=','line_number':3475,'multiline':True]
['text':'ts=','line_number':3503,'multiline':True]
['text':' Create a resume token from only the timestamp, similar to a 'dropDatabase' entry.','line_number':3507,'multiline':False]
['text':'ts=','line_number':3541,'multiline':True]
['text':' Create a resume token from only the timestamp, similar to a 'dropDatabase' entry.','line_number':3545,'multiline':False]
['text':'','line_number':3567,'multiline':False]
['text':' Tests that the single '$match' gets promoted before the','line_number':3568,'multiline':False]
['text':' '$_internalChangeStreamHandleTopologyChange'.','line_number':3569,'multiline':False]
['text':'','line_number':3570,'multiline':False]
['text':' We enable the 'showExpandedEvents' flag to avoid injecting an additional $match stage which','line_number':3572,'multiline':False]
['text':' filters out newly added events.','line_number':3573,'multiline':False]
['text':'','line_number':3592,'multiline':False]
['text':' Tests that multiple '$match' gets merged and promoted before the','line_number':3593,'multiline':False]
['text':' '$_internalChangeStreamHandleTopologyChange'.','line_number':3594,'multiline':False]
['text':'','line_number':3595,'multiline':False]
['text':' We enable the 'showExpandedEvents' flag to avoid injecting an additional $match stage which','line_number':3597,'multiline':False]
['text':' filters out newly added events.','line_number':3598,'multiline':False]
['text':'','line_number':3616,'multiline':False]
['text':' Tests that multiple '$match' gets merged and promoted before the','line_number':3617,'multiline':False]
['text':' '$_internalChangeStreamCheckTopologyChange' when resume token is present.','line_number':3618,'multiline':False]
['text':'','line_number':3619,'multiline':False]
['text':' We enable the 'showExpandedEvents' flag to avoid injecting an additional $match stage which','line_number':3621,'multiline':False]
['text':' filters out newly added events.','line_number':3622,'multiline':False]
['text':'','line_number':3648,'multiline':False]
['text':' Tests that the single '$project' gets promoted before the','line_number':3649,'multiline':False]
['text':' '$_internalChangeStreamHandleTopologyChange'.','line_number':3650,'multiline':False]
['text':'','line_number':3651,'multiline':False]
['text':' We enable the 'showExpandedEvents' flag to avoid injecting an additional $match stage which','line_number':3653,'multiline':False]
['text':' filters out newly added events.','line_number':3654,'multiline':False]
['text':'','line_number':3671,'multiline':False]
['text':' Tests that multiple '$project' gets promoted before the','line_number':3672,'multiline':False]
['text':' '$_internalChangeStreamHandleTopologyChange'.','line_number':3673,'multiline':False]
['text':'','line_number':3674,'multiline':False]
['text':' We enable the 'showExpandedEvents' flag to avoid injecting an additional $match stage which','line_number':3676,'multiline':False]
['text':' filters out newly added events.','line_number':3677,'multiline':False]
['text':'','line_number':3696,'multiline':False]
['text':' Tests that multiple '$project' gets promoted before the','line_number':3697,'multiline':False]
['text':' '$_internalChangeStreamHandleTopologyChange' if resume token is present.','line_number':3698,'multiline':False]
['text':'','line_number':3699,'multiline':False]
['text':' We enable the 'showExpandedEvents' flag to avoid injecting an additional $match stage which','line_number':3701,'multiline':False]
['text':' filters out newly added events.','line_number':3702,'multiline':False]
['text':'','line_number':3727,'multiline':False]
['text':' Tests that a '$project' followed by a '$match' gets optimized and they get promoted before','line_number':3728,'multiline':False]
['text':' the '$_internalChangeStreamHandleTopologyChange'.','line_number':3729,'multiline':False]
['text':'','line_number':3730,'multiline':False]
['text':' We enable the 'showExpandedEvents' flag to avoid injecting an additional $match stage which','line_number':3732,'multiline':False]
['text':' filters out newly added events.','line_number':3733,'multiline':False]
['text':'','line_number':3759,'multiline':False]
['text':' Tests that the single '$unset' gets promoted before the','line_number':3760,'multiline':False]
['text':' '$_internalChangeStreamCheckTopologyChange' as','line_number':3761,'multiline':False]
['text':' '$project'.','line_number':3762,'multiline':False]
['text':'','line_number':3763,'multiline':False]
['text':' We enable the 'showExpandedEvents' flag to avoid injecting an additional $match stage which','line_number':3765,'multiline':False]
['text':' filters out newly added events.','line_number':3766,'multiline':False]
['text':'','line_number':3783,'multiline':False]
['text':' Tests that multiple '$unset' gets promoted before the '$_internalChangeStreamCheckTopologyChange'','line_number':3784,'multiline':False]
['text':' as '$project'.','line_number':3785,'multiline':False]
['text':'','line_number':3786,'multiline':False]
['text':' We enable the 'showExpandedEvents' flag to avoid injecting an additional $match stage which','line_number':3788,'multiline':False]
['text':' filters out newly added events.','line_number':3789,'multiline':False]
['text':'','line_number':3808,'multiline':False]
['text':' Tests that the '$unset' gets promoted before the '$_internalChangeStreamCheckTopologyChange' as','line_number':3809,'multiline':False]
['text':' '$project' even if resume token is present.','line_number':3810,'multiline':False]
['text':'','line_number':3811,'multiline':False]
['text':' We enable the 'showExpandedEvents' flag to avoid injecting an additional $match stage which','line_number':3813,'multiline':False]
['text':' filters out newly added events.','line_number':3814,'multiline':False]
['text':'','line_number':3838,'multiline':False]
['text':' Tests that the single'$addFields' gets promoted before the','line_number':3839,'multiline':False]
['text':' '$_internalChangeStreamHandleTopologyChange'.','line_number':3840,'multiline':False]
['text':'','line_number':3841,'multiline':False]
['text':' We enable the 'showExpandedEvents' flag to avoid injecting an additional $match stage which','line_number':3843,'multiline':False]
['text':' filters out newly added events.','line_number':3844,'multiline':False]
['text':'','line_number':3861,'multiline':False]
['text':' Tests that multiple '$addFields' gets promoted before the','line_number':3862,'multiline':False]
['text':' '$_internalChangeStreamHandleTopologyChange'.','line_number':3863,'multiline':False]
['text':'','line_number':3864,'multiline':False]
['text':' We enable the 'showExpandedEvents' flag to avoid injecting an additional $match stage which','line_number':3866,'multiline':False]
['text':' filters out newly added events.','line_number':3867,'multiline':False]
['text':'','line_number':3886,'multiline':False]
['text':' Tests that the '$addFields' gets promoted before the '$_internalChangeStreamCheckTopologyChange'','line_number':3887,'multiline':False]
['text':' if resume token is present.','line_number':3888,'multiline':False]
['text':'','line_number':3889,'multiline':False]
['text':' We enable the 'showExpandedEvents' flag to avoid injecting an additional $match stage which','line_number':3891,'multiline':False]
['text':' filters out newly added events.','line_number':3892,'multiline':False]
['text':'','line_number':3915,'multiline':False]
['text':' Tests that the single '$set' gets promoted before the','line_number':3916,'multiline':False]
['text':' '$_internalChangeStreamHandleTopologyChange'.','line_number':3917,'multiline':False]
['text':'','line_number':3918,'multiline':False]
['text':' We enable the 'showExpandedEvents' flag to avoid injecting an additional $match stage which','line_number':3920,'multiline':False]
['text':' filters out newly added events.','line_number':3921,'multiline':False]
['text':'','line_number':3938,'multiline':False]
['text':' Tests that multiple '$set' gets promoted before the '$_internalChangeStreamHandleTopologyChange'.','line_number':3939,'multiline':False]
['text':'','line_number':3940,'multiline':False]
['text':' We enable the 'showExpandedEvents' flag to avoid injecting an additional $match stage which','line_number':3942,'multiline':False]
['text':' filters out newly added events.','line_number':3943,'multiline':False]
['text':'','line_number':3962,'multiline':False]
['text':' Tests that the '$set' gets promoted before the '$_internalChangeStreamCheckTopologyChange' if','line_number':3963,'multiline':False]
['text':' resume token is present.','line_number':3964,'multiline':False]
['text':'','line_number':3965,'multiline':False]
['text':' We enable the 'showExpandedEvents' flag to avoid injecting an additional $match stage which','line_number':3967,'multiline':False]
['text':' filters out newly added events.','line_number':3968,'multiline':False]
['text':'','line_number':3991,'multiline':False]
['text':' Tests that the single '$replaceRoot' gets promoted before the','line_number':3992,'multiline':False]
['text':' '$_internalChangeStreamHandleTopologyChange'.','line_number':3993,'multiline':False]
['text':'','line_number':3994,'multiline':False]
['text':' We enable the 'showExpandedEvents' flag to avoid injecting an additional $match stage which','line_number':3996,'multiline':False]
['text':' filters out newly added events.','line_number':3997,'multiline':False]
['text':'','line_number':4014,'multiline':False]
['text':' Tests that the '$replaceRoot' gets promoted before the','line_number':4015,'multiline':False]
['text':' '$_internalChangeStreamCheckTopologyChange' if resume token is present.','line_number':4016,'multiline':False]
['text':'','line_number':4017,'multiline':False]
['text':' We enable the 'showExpandedEvents' flag to avoid injecting an additional $match stage which','line_number':4019,'multiline':False]
['text':' filters out newly added events.','line_number':4020,'multiline':False]
['text':'','line_number':4044,'multiline':False]
['text':' Tests that the single '$replaceWith' gets promoted before the','line_number':4045,'multiline':False]
['text':' '$_internalChangeStreamCheckTopologyChange' as','line_number':4046,'multiline':False]
['text':' '$replaceRoot'.','line_number':4047,'multiline':False]
['text':'','line_number':4048,'multiline':False]
['text':' We enable the 'showExpandedEvents' flag to avoid injecting an additional $match stage which','line_number':4050,'multiline':False]
['text':' filters out newly added events.','line_number':4051,'multiline':False]
['text':'','line_number':4068,'multiline':False]
['text':' Tests that the '$replaceWith' gets promoted before the','line_number':4069,'multiline':False]
['text':' '$_internalChangeStreamCheckTopologyChange' if resume token is present as '$replaceRoot'.','line_number':4070,'multiline':False]
['text':'','line_number':4071,'multiline':False]
['text':' We enable the 'showExpandedEvents' flag to avoid injecting an additional $match stage which','line_number':4073,'multiline':False]
['text':' filters out newly added events.','line_number':4074,'multiline':False]
['text':'','line_number':4098,'multiline':False]
['text':'  Tests that when 'showExpandedEvents' is true, we do not inject any additional stages.','line_number':4099,'multiline':False]
['text':'','line_number':4100,'multiline':False]
['text':'','line_number':4116,'multiline':False]
['text':' Tests that when 'showExpandedEvents' is unset, we inject an additional $match stage and promote','line_number':4117,'multiline':False]
['text':' it before the '$_internalChangeStreamHandleTopologyChange'.','line_number':4118,'multiline':False]
['text':'','line_number':4119,'multiline':False]
['text':'','line_number':4136,'multiline':False]
['text':' Tests that when 'showExpandedEvents' is false, the injected match stage gets merged with the user','line_number':4137,'multiline':False]
['text':' match stage and gets promoted before the '$_internalChangeStreamHandleTopologyChange'.','line_number':4138,'multiline':False]
['text':'','line_number':4139,'multiline':False]
['text':'','line_number':4159,'multiline':False]
['text':' Tests that when 'showExpandedEvents' is false, the injected match stage can be merged with the','line_number':4160,'multiline':False]
['text':' user match stage and can be promoted before the user '$project' and','line_number':4161,'multiline':False]
['text':' '$_internalChangeStreamHandleTopologyChange'.','line_number':4162,'multiline':False]
['text':'','line_number':4163,'multiline':False]
['text':'','line_number':4186,'multiline':False]
['text':' Tests that when all allowed stages are included along with the resume token, the final','line_number':4187,'multiline':False]
['text':' pipeline gets optimized.','line_number':4188,'multiline':False]
['text':'','line_number':4189,'multiline':False]
['text':' We enable the 'showExpandedEvents' flag to avoid injecting an additional $match stage which','line_number':4191,'multiline':False]
['text':' filters out newly added events.','line_number':4192,'multiline':False]
['text':' op type','line_number':4235,'multiline':False]
['text':' namespace','line_number':4236,'multiline':False]
['text':' o','line_number':4237,'multiline':False]
['text':' uuid','line_number':4238,'multiline':False]
['text':' fromMigrate','line_number':4239,'multiline':False]
['text':' o2','line_number':4240,'multiline':False]
['text':' opTime','line_number':4241,'multiline':False]
['text':' Create a resume token matching the 'oplogResumeTime' above.','line_number':4263,'multiline':False]
['text':' version ','line_number':4265,'multiline':True]
['text':' Create a change stream spec that resumes after 'resumeToken'.','line_number':4267,'multiline':False]
['text':' Make a pipeline from this spec and seed it with the oplog entries in order.','line_number':4271,'multiline':False]
['text':' The stream will swallow everything up to and including the resume token. The first event we','line_number':4280,'multiline':False]
['text':' get back has the same clusterTime as the resume token, and should therefore use the client','line_number':4281,'multiline':False]
['text':' token's version, which is 2. Similarly, the eventIdentifier should use the v2 token format.','line_number':4282,'multiline':False]
['text':' The next event has a clusterTime later than the resume point, and should therefore start','line_number':4293,'multiline':False]
['text':' using the default token version, which is 2.','line_number':4294,'multiline':False]
['text':' Verify that no other events are returned.','line_number':4305,'multiline':False]
['text':' Create a resume token matching the 'oplogResumeTime' above.','line_number':4326,'multiline':False]
['text':' version ','line_number':4328,'multiline':True]
['text':' Create a change stream spec that resumes after 'resumeToken'.','line_number':4330,'multiline':False]
['text':' Make a pipeline from this spec and seed it with the oplog entries in order.','line_number':4334,'multiline':False]
['text':' The stream will swallow everything up to and including the resume token. The first event we','line_number':4343,'multiline':False]
['text':' get back has the same clusterTime as the resume token, and should therefore use the client','line_number':4344,'multiline':False]
['text':' token's version, which is 1. Similarly, the eventIdentifier should use the v1 token format.','line_number':4345,'multiline':False]
['text':' The next event has a clusterTime later than the resume point, and should therefore start','line_number':4354,'multiline':False]
['text':' using the default token version.','line_number':4355,'multiline':False]
['text':' Verify that no other events are returned.','line_number':4366,'multiline':False]
['text':' Create a v2 high water mark token which sorts immediately before 'firstOplogAtResumeTime'.','line_number':4384,'multiline':False]
['text':' Create a change stream spec that resumes after 'resumeToken'.','line_number':4391,'multiline':False]
['text':' Make a pipeline from this spec and seed it with the oplog entries in order.','line_number':4395,'multiline':False]
['text':' The high water mark token should be order ahead of every other entry with the same','line_number':4402,'multiline':False]
['text':' clusterTime. So we should see both entries that match the resumeToken's clusterTime.','line_number':4403,'multiline':False]
['text':' Even though the high watermark token has version 1, the resulting events should have','line_number':4404,'multiline':False]
['text':' the default resume token version.','line_number':4405,'multiline':False]
['text':' The resumeToken after the current clusterTime should start using the default version, and','line_number':4426,'multiline':False]
['text':' corresponding 'eventIdentifier' format.','line_number':4427,'multiline':False]
['text':' Verify that no other events are returned.','line_number':4437,'multiline':False]
['text':' NOLINT','line_number':4448,'multiline':False]
['text':' NOLINT','line_number':4451,'multiline':False]
['text':' NOLINT','line_number':4460,'multiline':False]
['text':' NOLINT','line_number':4467,'multiline':False]
['text':' NOLINT','line_number':4483,'multiline':False]
['text':' NOLINT','line_number':4492,'multiline':False]
['text':' NOLINT','line_number':4498,'multiline':False]
['text':' NOLINT','line_number':4519,'multiline':False]
['text':' NOLINT','line_number':4528,'multiline':False]
['text':' NOLINT','line_number':4536,'multiline':False]
['text':' NOLINT','line_number':4552,'multiline':False]
['text':' NOLINT','line_number':4555,'multiline':False]
['text':' NOLINT','line_number':4570,'multiline':False]
['text':' NOLINT','line_number':4579,'multiline':False]
['text':' NOLINT','line_number':4593,'multiline':False]
['text':' NOLINT','line_number':4596,'multiline':False]
['text':' NOLINT','line_number':4611,'multiline':False]
['text':' NOLINT','line_number':4614,'multiline':False]
['text':' NOLINT','line_number':4629,'multiline':False]
['text':' NOLINT','line_number':4640,'multiline':False]
['text':' NOLINT','line_number':4652,'multiline':False]
['text':' For DocumentSource types which contain an arbitrarily internal','line_number':4669,'multiline':False]
['text':' MatchExpression, we don't want match the entire structure. This','line_number':4670,'multiline':False]
['text':' assertion allows us to check some basic structure.','line_number':4671,'multiline':False]
['text':' Walk the redacted BSON and assert that we have some ops and','line_number':4673,'multiline':False]
['text':' redacted field paths.','line_number':4674,'multiline':False]
['text':' Field name should be an operator or a redacted field path.','line_number':4691,'multiline':False]
['text':' Skip $regularExpression.','line_number':4696,'multiline':False]
['text':' First, check the outermost structure.','line_number':4717,'multiline':False]
['text':' First, check the outermost structure.','line_number':4738,'multiline':False]
['text':' namespace','line_number':4748,'multiline':False]
['text':' namespace mongo','line_number':4749,'multiline':False]
