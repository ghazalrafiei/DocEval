['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 * InclusiveBoundType defines the necessary configuration for inclusively bounded trig functions.
 ','line_number':49,'multiline':True]
['text':' We use a static method rather than a field because the value, as an std::string, would need','line_number':53,'multiline':False]
['text':' to be initialized out of line. This method will be inlined, and result in no overhead.','line_number':54,'multiline':False]
['text':'*
 * ExclusiveBoundType defines the necessary configuration for exclusively bounded trig functions.
 ','line_number':80,'multiline':True]
['text':' We use a static method rather than a field because the value, as an std::string, would need','line_number':84,'multiline':False]
['text':' to be initialized out of line. This method will be inlined, and result in no overhead.','line_number':85,'multiline':False]
['text':'*
 * ExpressionBoundedTrigonometric is the type of all trigonometric functions that take one argument
 * and have lower and upper bounds, either inclusive or exclusive, as defined by the BoundType
 * template argument.
 ','line_number':111,'multiline':True]
['text':'*
     * assertBounds uasserts if checkBounds returns false, meaning that the input is out of bounds.
     ','line_number':147,'multiline':True]
['text':'*
     * evaluateNumericArg  evaluates the implented trig function on one numericArg.
     ','line_number':160,'multiline':True]
['text':'*
     * Since bounds are always either +/-Infinity or integral values, double has enough precision.
     ','line_number':192,'multiline':True]
['text':'*
     * doubleFunc performs the double version of the implemented trig function, e.g. std::sin()
     ','line_number':197,'multiline':True]
['text':'*
     * decimalFunc performs the decimal128 version of the implemented trig function, e.g. d.sin()
     ','line_number':201,'multiline':True]
['text':'*
     * getOpName returns the name of the operation, e.g., $sin
     ','line_number':205,'multiline':True]
['text':'*
 * ExpressionUnboundedTrigonometric is the type for all trigonometric functions that do not have
 * upper or lower bounds.
 ','line_number':211,'multiline':True]
['text':'*
     * evaluateNumericArg evaluates the implented trig function on one numericArg.
     ','line_number':224,'multiline':True]
['text':'*
     * doubleFunc performs the double version of the implemented trig function, e.g. std::sinh()
     ','line_number':240,'multiline':True]
['text':'*
     * decimalFunc performs the decimal128 version of the implemented trig function, e.g. d.sinh()
     ','line_number':244,'multiline':True]
['text':'*
     * getOpName returns the name of the operation, e.g., $sinh
     ','line_number':248,'multiline':True]
['text':' If the type of either argument is NumberDecimal, we promote to Decimal128.','line_number':264,'multiline':False]
['text':' ----------------------- Inclusive Bounded Trigonometric Functions ---------------------------- ','line_number':297,'multiline':True]
['text':'*
 * Inclusive Bounds
 ','line_number':338,'multiline':True]
['text':'*
 * Exclusive Bounds
 ','line_number':350,'multiline':True]
['text':' ----------------------- Unbounded Trigonometric Functions ---------------------------- ','line_number':373,'multiline':True]
['text':' ----------------------- ExpressionDegreesToRadians and ExpressionRadiansToDegrees ---- ','line_number':415,'multiline':True]
['text':' namespace mongo','line_number':485,'multiline':False]
