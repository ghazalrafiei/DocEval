['text':'*
 *    Copyright (C) 2020-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' IWYU pragma: no_include "boost/intrusive/detail/iterator.hpp"','line_number':33,'multiline':False]
['text':' IWYU pragma: keep','line_number':69,'multiline':False]
['text':'*
 * Does a sort pattern contain a path that has been modified?
 ','line_number':83,'multiline':True]
['text':' namespace','line_number':104,'multiline':False]
['text':' Verify that the computed fields are valid and do not conflict with each other.','line_number':138,'multiline':False]
['text':' Starting with an input like this:','line_number':170,'multiline':False]
['text':'     {$setWindowFields: {partitionBy: {$foo: "$x"}, sortBy: {y: 1}, output: {...}}}','line_number':171,'multiline':False]
['text':' We move the partitionBy expression out into its own $set stage:','line_number':173,'multiline':False]
['text':'     {$set: {__tmp: {$foo: "$x"}}}','line_number':174,'multiline':False]
['text':'     {$setWindowFields: {partitionBy: "$__tmp", sortBy: {y: 1}, output: {...}}}','line_number':175,'multiline':False]
['text':'     {$unset: '__tmp'}','line_number':176,'multiline':False]
['text':' This lets us insert a $sort in between:','line_number':178,'multiline':False]
['text':'     {$set: {__tmp: {$foo: "$x"}}}','line_number':179,'multiline':False]
['text':'     {$sort: {__tmp: 1, y: 1}}','line_number':180,'multiline':False]
['text':'     {$setWindowFields: {partitionBy: "$__tmp", sortBy: {y: 1}, output: {...}}}','line_number':181,'multiline':False]
['text':'     {$unset: '__tmp'}','line_number':182,'multiline':False]
['text':' Which lets us replace $setWindowFields with $_internalSetWindowFields:','line_number':184,'multiline':False]
['text':'     {$set: {__tmp: {$foo: "$x"}}}','line_number':185,'multiline':False]
['text':'     {$sort: {__tmp: 1, y: 1}}','line_number':186,'multiline':False]
['text':'     {$_internalSetWindowFields: {partitionBy: "$__tmp", sortBy: {y: 1}, output: {...}}}','line_number':187,'multiline':False]
['text':'     {$unset: '__tmp'}','line_number':188,'multiline':False]
['text':' If partitionBy is a field path, we can $sort by that field directly and avoid creating a','line_number':190,'multiline':False]
['text':' $set stage. This is important for pushing down the $sort. This is only valid because we','line_number':191,'multiline':False]
['text':' assert (in getNextInput()) that partitionBy is never an array.','line_number':192,'multiline':False]
['text':' If there is no partitionBy at all then we just $sort by the sortBy spec.','line_number':194,'multiline':False]
['text':' If there is no sortBy and no partitionBy then we can omit the $sort stage completely.','line_number':196,'multiline':False]
['text':' complexPartitionBy is an expression to evaluate.','line_number':200,'multiline':False]
['text':' simplePartitionBy is a field path, which can be evaluated or sorted.','line_number':201,'multiline':False]
['text':' If partitionBy is a constant or there is no partitionBy, both are empty.','line_number':205,'multiline':False]
['text':' If partitionBy is already a field path, we only fill in simplePartitionBy.','line_number':206,'multiline':False]
['text':' If partitionBy is a more complex expression, we will need to generate a $set stage,','line_number':207,'multiline':False]
['text':' which will bind the value of the expression to the name in simplePartitionBy.','line_number':208,'multiline':False]
['text':' Catch any failures that may surface during optimizing the partitionBy expression and add','line_number':210,'multiline':False]
['text':' context. This allows for the testing infrastructure to detect when parsing fails due to','line_number':211,'multiline':False]
['text':' a new optimization, which passed on an earlier version without the optimization.','line_number':212,'multiline':False]
['text':' Partitioning by a constant, non-array expression is equivalent to not partitioning','line_number':223,'multiline':False]
['text':' (putting everything in the same partition).','line_number':224,'multiline':False]
['text':' ExpressionFieldPath has "CURRENT" as an explicit first component,','line_number':227,'multiline':False]
['text':' but for $sort we don't want that.','line_number':228,'multiline':False]
['text':' In DocumentSource we don't have a mechanism for generating non-colliding field names,','line_number':232,'multiline':False]
['text':' so we have to choose the tmp name carefully to make a collision unlikely in practice.','line_number':233,'multiline':False]
['text':' We encode as a base64 string for a shorter, more performant field name (length 22).','line_number':235,'multiline':False]
['text':' $set','line_number':244,'multiline':False]
['text':' $sort','line_number':250,'multiline':False]
['text':' Generate a combined SortPattern for the partition key and sortBy.','line_number':251,'multiline':False]
['text':' Check and filter out the partition by field within the sort field. The partition','line_number':261,'multiline':False]
['text':' field is already added to the combined sort field variable. As the partition only','line_number':262,'multiline':False]
['text':' contains documents that have the same value in the partition key an additional sort','line_number':263,'multiline':False]
['text':' over that field does not change the order or the documents within the partition.','line_number':264,'multiline':False]
['text':' Hence a sort by $partion does not change the sort order.','line_number':265,'multiline':False]
['text':' This is for our testing framework. If this knob is set we append an _id to the translated','line_number':272,'multiline':False]
['text':' sortBy in order to ensure deterministic output.','line_number':273,'multiline':False]
['text':' $_internalSetWindowFields','line_number':284,'multiline':False]
['text':' $unset','line_number':293,'multiline':False]
['text':' The _partitionBy is already optimized in create(), along with _iterator which initializes','line_number':302,'multiline':False]
['text':' with it. The _executableOutputs will be constructed using the expressions from the','line_number':303,'multiline':False]
['text':' '_outputFields' on the first call to doGetNext(). As a result, only expressions in the','line_number':304,'multiline':False]
['text':' '_outputFields' are optimized here.','line_number':305,'multiline':False]
['text':' Calculate the new expression SBE compatibility after optimization without overwriting','line_number':307,'multiline':False]
['text':' the previous SBE compatibility value. See the optimize() function for $group for a more','line_number':308,'multiline':False]
['text':' detailed explanation.','line_number':309,'multiline':False]
['text':' Sort is redundant if prefix of _internalSetWindowFields' sort pattern.','line_number':433,'multiline':False]
['text':'','line_number':434,'multiline':False]
['text':' Ex.','line_number':435,'multiline':False]
['text':'','line_number':436,'multiline':False]
['text':' {$sort: {a: 1, b: 1}},','line_number':437,'multiline':False]
['text':' {$_internalSetWindowFields: _},','line_number':438,'multiline':False]
['text':' {$sort: {a: 1}}','line_number':439,'multiline':False]
['text':'','line_number':440,'multiline':False]
['text':' is equivalent to','line_number':441,'multiline':False]
['text':'','line_number':442,'multiline':False]
['text':' {$sort: {a: 1, b: 1}},','line_number':443,'multiline':False]
['text':' {$_internalSetWindowFields: _}','line_number':444,'multiline':False]
['text':'','line_number':445,'multiline':False]
['text':' Push down if sort pattern contains _internalSetWindowFields' sort pattern.','line_number':456,'multiline':False]
['text':'','line_number':457,'multiline':False]
['text':' Ex.','line_number':458,'multiline':False]
['text':'','line_number':459,'multiline':False]
['text':'  {$sort: {a: 1, b: 1}},','line_number':460,'multiline':False]
['text':'  {$_internalSetWindowFields: _},','line_number':461,'multiline':False]
['text':'  {$sort: {a: 1, b: 1, c: 1}}','line_number':462,'multiline':False]
['text':'','line_number':463,'multiline':False]
['text':' is equivalent to','line_number':464,'multiline':False]
['text':'','line_number':465,'multiline':False]
['text':'  {$sort: {a: 1, b: 1}},','line_number':466,'multiline':False]
['text':'  {$sort: {a: 1, b: 1, c: 1}},','line_number':467,'multiline':False]
['text':'  {$_internalSetWindowFields: _}','line_number':468,'multiline':False]
['text':'','line_number':469,'multiline':False]
['text':' Swap the $_internalSetWindowFields with the following $sort.','line_number':476,'multiline':False]
['text':' Now 'itr' is still valid but points to the $sort we pushed down.','line_number':478,'multiline':False]
['text':' We want to give other optimizations a chance to take advantage of the change:','line_number':480,'multiline':False]
['text':' 1. The previous sort can remove itself.','line_number':481,'multiline':False]
['text':' 2. Other stages may interact with the newly pushed down sort.','line_number':482,'multiline':False]
['text':' So we want to look at the stage *before* the previous sort, if any.','line_number':483,'multiline':False]
['text':' Now 'itr' points to the previous sort.','line_number':485,'multiline':False]
['text':' The only way we hit this case is if there are no documents, since otherwise _eof will be','line_number':505,'multiline':False]
['text':' set.','line_number':506,'multiline':False]
['text':' Populate the output document with the result from each window function.','line_number':511,'multiline':False]
['text':' If we hit a uassert while evaluating expressions on user data, delete the temporary','line_number':516,'multiline':False]
['text':' table before aborting the operation.','line_number':517,'multiline':False]
['text':' Attempt to spill where possible.','line_number':535,'multiline':False]
['text':' Advance the iterator and handle partition/EOF edge cases.','line_number':548,'multiline':False]
['text':' We've advanced to a new partition, reset the state of every function.','line_number':553,'multiline':False]
['text':' Avoid using the factory 'create' on the executor since we don't want to re-parse.','line_number':564,'multiline':False]
['text':' namespace mongo','line_number':571,'multiline':False]
