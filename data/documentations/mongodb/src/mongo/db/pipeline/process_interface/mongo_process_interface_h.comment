['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 * Any functionality needed by an aggregation stage that is either context specific to a mongod or
 * mongos process, or is only compiled in to one of those two binaries must be accessed via this
 * interface. This allows all DocumentSources to be parsed on either mongos or mongod, but only
 * executable where it makes sense.
 ','line_number':102,'multiline':True]
['text':'*
     * Storage for a batch of BSON Objects to be updated in the write namespace. For each element
     * in the batch we store a tuple of the following elements:
     *   1. BSONObj - specifies the query that identifies a document in the to collection to be
     *      updated.
     *   2. write_ops::UpdateModification - either the new document we want to upsert or insert into
     *      the collection (i.e. a 'classic' replacement update), or the pipeline to run to compute
     *      the new document.
     *   3. boost::optional<BSONObj> - for pipeline-style updates, specifies variables that can be
     *      referred to in the pipeline performing the custom update.
     ','line_number':110,'multiline':True]
['text':' This operation is not an upsert.','line_number':126,'multiline':False]
['text':' If no documents match, generate a new document using the update spec.','line_number':127,'multiline':False]
['text':' If no documents match, insert the document supplied in 'c.new' as-is.','line_number':128,'multiline':False]
['text':'*
     * Interface which estimates the size of a given write operation.
     ','line_number':139,'multiline':True]
['text':'*
         * Set of functions which estimate the entire size of a write command except for the array
         * of write statements themselves.
         ','line_number':146,'multiline':True]
['text':'*
         * Set of functions which estimate the size of a single write statement.
         ','line_number':155,'multiline':True]
['text':'*
     * Factory function to create MongoProcessInterface of the right type. The implementation will
     * be installed by a lib higher up in the link graph depending on the application type.
     ','line_number':163,'multiline':True]
['text':'*
     * This structure holds the result of a batched update operation, such as the number of
     * documents that matched the query predicate, and the number of documents modified by the
     * update operation.
     ','line_number':169,'multiline':True]
['text':'*
     * Returns an instance of a 'WriteSizeEstimator' interface.
     ','line_number':184,'multiline':True]
['text':'*
     * Creates a new TransactionHistoryIterator object. Only applicable in processes which support
     * locally traversing the oplog.
     ','line_number':190,'multiline':True]
['text':'*
     * Note that in some rare cases this could return a false negative but will never return a false
     * positive. This method will be fixed in the future once it becomes possible to avoid false
     * negatives. Caller should always attach shardVersion when sending request against nss based
     * on this information.
     ','line_number':197,'multiline':True]
['text':'*
     * TODO SERVER-79508 validate callers of this function remain correct.
     *
     * Returns false if the current request only handles parsing and validating queries. In other
     * words, we are not executing queries. Examples include query analysis for queryable
     * encryption, executing pipeline-style operations in the Update system, and creating a Query
     * Shape. This function only returns false when the process interface is of type
     * 'StubMongoProcessInterface'.
     *
     ','line_number':205,'multiline':True]
['text':'*
     * Utility which determines which shard we should merge on. More precisely, if 'nss' is
     * unsplittable or untracked, we should route to the shard which owns 'nss'. Note that this
     * decision is inherently racy and subject to become stale. This is okay because either choice
     * will work correctly, we are simply applying a heuristic optimization.
     ','line_number':219,'multiline':True]
['text':'*
     * Advances the proxied write time associated with the client in ReplClientInfo to
     * be at least as high as the one tracked by the OperationTimeTracker associated with the
     * given operation context.
     ','line_number':228,'multiline':True]
['text':'*
     * Executes 'insertCommand' against 'ns' and returns an error Status if the insert fails. If
     * 'targetEpoch' is set, throws ErrorCodes::StaleEpoch if the targeted collection does not have
     * the same epoch or the epoch changes during the course of the insert.
     ','line_number':235,'multiline':True]
['text':'*
     * Executes the updates described by 'updateCommand'. Returns an error Status if any of the
     * updates fail, otherwise returns an 'UpdateResult' objects with the details of the update
     * operation.  If 'targetEpoch' is set, throws ErrorCodes::StaleEpoch if the targeted collection
     * does not have the same epoch, or if the epoch changes during the update.
     ','line_number':251,'multiline':True]
['text':'*
     * Returns index usage statistics for each index on collection 'ns' along with additional
     * information including the index specification and whether the index is currently being built.
     *
     * By passing true for 'addShardName', the caller can request that each document in the
     * resulting vector includes a 'shard' field which denotes this node's shard name. It is illegal
     * to set this option unless this node is a shardsvr.
     ','line_number':266,'multiline':True]
['text':'*
     * Returns all documents in `_mdb_catalog`.
     ','line_number':283,'multiline':True]
['text':'*
     * Returns the catalog entry for the given namespace, if it exists.
     ','line_number':288,'multiline':True]
['text':'*
     * Appends operation latency statistics for collection "nss" to "builder"
     ','line_number':296,'multiline':True]
['text':'*
     * Appends storage statistics for collection "nss" to "builder".
     *
     * By passing a BSONObj as the parameter 'filterObj' in this function, the caller can request
     * specific stats to be appended to parameter 'builder'. By passing 'boost::none' to
     * 'filterObj', the caller is requesting to append all possible storage stats.
     ','line_number':304,'multiline':True]
['text':'*
     * Appends the record count for collection "nss" to "builder".
     ','line_number':317,'multiline':True]
['text':'*
     * Appends the exec stats for the collection 'nss' to 'builder'.
     ','line_number':324,'multiline':True]
['text':'*
     * Gets the collection options for the collection given by 'nss'. Throws
     * ErrorCodes::CommandNotSupportedOnView if 'nss' describes a view. Future callers may want to
     * parameterize this behavior.
     ','line_number':331,'multiline':True]
['text':'*
     * Performs the given rename command if the collection given by 'targetNs' has the same options
     * as specified in 'originalCollectionOptions', and has the same indexes as 'originalIndexes'.
     *
     * Throws an exception if the collection options and/or indexes are different.
     ','line_number':338,'multiline':True]
['text':'*
     * Creates a collection on the given database by running the given command. On shardsvr targets
     * the primary shard of 'dbName'.
     ','line_number':353,'multiline':True]
['text':'*
     * Creates a temporary collection 'nss', with the given 'collectionOptions'.
     *
     * On non-shard servers, temporary collections are collections with the 'temp' property set to
     * true. On shard servers, temporary collections don't set the 'temp' property to true; instead,
     * they are annotated on the 'kAggTempCollections' collection on this shard. In both cases,
     * temporary collections are dropped (garbage-collected) on stepup (or startup in the case of
     * standalone nodes).
     ','line_number':361,'multiline':True]
['text':'*
     * Creates the view backing a time-series collection.
     ','line_number':373,'multiline':True]
['text':'*
     * Runs createIndexes on the given database for the given index specs. If running on a shardsvr
     * this targets the primary shard of the database part of 'ns'.
     ','line_number':381,'multiline':True]
['text':'*
     * Drops a temporary collection that was previously created using 'createTempCollection'.
     ','line_number':391,'multiline':True]
['text':'*
     * Accepts a pipeline and returns a new one which will draw input from the underlying
     * collection. Performs no further optimization of the pipeline. NamespaceNotFound will be
     * thrown if ExpressionContext has a UUID and that UUID doesn't exist anymore. That should be
     * the only case where NamespaceNotFound is returned.
     *
     * This function takes ownership of the 'pipeline' argument as if it were a unique_ptr.
     * Changing it to a unique_ptr introduces a circular dependency on certain platforms where the
     * compiler expects to find an implementation of PipelineDeleter.
     *
     * If `shardTargetingPolicy` is kNotAllowed, the cursor will only be for local reads regardless
     * of whether or not this function is called in a sharded environment.
     ','line_number':396,'multiline':True]
['text':'*
     * Same as above but takes in an aggRequest and pipeline. This preserves any
     * aggregation options set on the AggregateCommandRequest.
     ','line_number':414,'multiline':True]
['text':'*
     * Accepts a pipeline and attaches a cursor source to it. Returns a BSONObj of the form
     * {"pipeline": <explainOutput>}. Note that <explainOutput> can be an object (shardsvr) or an
     * array (non_shardsvr).
     ','line_number':426,'multiline':True]
['text':'*
     * Accepts a pipeline and returns a new one which will draw input from the underlying
     * collection _locally_. Trying to run this method on mongos is a programming error. Running
     * this method on a shard server will only return results which match the pipeline on that
     * shard.

     * Performs no further optimization of the pipeline. NamespaceNotFound will be
     * thrown if ExpressionContext has a UUID and that UUID doesn't match the ExpressionContext's
     * ns. That should be the only case where NamespaceNotFound is returned.
     *
     * This function takes ownership of the 'pipeline' argument as if it were a unique_ptr.
     * Changing it to a unique_ptr introduces a circular dependency on certain platforms where the
     * compiler expects to find an implementation of PipelineDeleter.
     ','line_number':434,'multiline':True]
['text':'*
     * Returns a vector of owned BSONObjs, each of which contains details of an in-progress
     * operation or, optionally, an idle connection. If userMode is kIncludeAllUsers, report
     * operations for all authenticated users; otherwise, report only the current user's operations.
     ','line_number':452,'multiline':True]
['text':'*
     * Returns the name of the local shard if sharding is enabled, or an empty string.
     ','line_number':466,'multiline':True]
['text':'*
     * Returns the the local shard if this process is a shardsvr, else boost::none.
     ','line_number':471,'multiline':True]
['text':'*
     * Returns whether or not this process is running as part of a sharded cluster.
     ','line_number':476,'multiline':True]
['text':'*
     * Returns the "host:port" string for this node.
     ','line_number':481,'multiline':True]
['text':'*
     * Returns the fields of the document key (in order) for the collection 'nss', according to the
     * CatalogCache. The document key fields are the shard key (if sharded) and the _id (if not
     * already in the shard key). If _id is not in the shard key, it is added last. If the
     * collection is not sharded or is not known to exist, returns only _id. Does not refresh the
     * CatalogCache.
     ','line_number':486,'multiline':True]
['text':'*
     * Returns zero or one documents with the document key 'documentKey'. 'documentKey' is treated
     * as a unique identifier of a document, and may include an _id or all fields from the shard key
     * and an _id. Throws if more than one match was found. Returns boost::none if no matching
     * documents were found, including cases where the given namespace does not exist.
     *
     * If this interface needs to send requests (possibly to other nodes) in order to look up the
     * document, 'readConcern' will be attached to these requests. Otherwise 'readConcern' will be
     * ignored.
     ','line_number':496,'multiline':True]
['text':'*
     * Returns zero or one document with the document _id being equal to 'documentKey'. The document
     * is looked up only on the current node. Returns boost::none if no matching documents were
     * found, including cases where the given namespace does not exist. It is illegal to call this
     * method on nodes other than mongod.
     ','line_number':513,'multiline':True]
['text':'*
     * Returns a vector of all idle (non-pinned) local cursors.
     ','line_number':524,'multiline':True]
['text':'*
     * The following methods forward to the BackupCursorHooks decorating the ServiceContext.
     ','line_number':531,'multiline':True]
['text':'*
     * Returns a vector of BSON objects, where each entry in the vector describes a plan cache entry
     * inside the cache for the given namespace. Only those entries which match the supplied
     * MatchExpression are returned.
     ','line_number':543,'multiline':True]
['text':'*
     * Returns true if there is an index on 'nss' with properties that will guarantee that a
     * document with non-array values for each of 'fieldPaths' will have at most one matching
     * document in 'nss'.
     *
     * Specifically, such an index must include all the fields, be unique, not be a partial index,
     * and match the operation's collation as given by 'expCtx'.
     ','line_number':552,'multiline':True]
['text':'*
     * Refreshes the CatalogCache entry for the namespace 'nss', and returns the epoch associated
     * with that namespace, if any. Note that this refresh will not necessarily force a new
     * request to be sent to the config servers. If another thread has already requested a refresh,
     * it will instead wait for that response.
     ','line_number':565,'multiline':True]
['text':'*
     * Consults the CatalogCache to determine if this node has routing information for the
     * collection given by 'nss' which reports the same epoch as given by
     * 'targetCollectionPlacementVersion'. Major and minor versions in
     * 'targetCollectionPlacementVersion' are ignored.
     ','line_number':575,'multiline':True]
['text':'*
     * Used to enforce the constraint that the foreign collection must be unsharded.
     ','line_number':586,'multiline':True]
['text':'*
     * If the user did not provide the 'fieldPaths' set, a default unique key will be picked,
     * which can be either the "_id" field, or a shard key, depending on the 'outputNs' collection
     * type and the server type (mongod or mongos). Also returns an optional ChunkVersion,
     * populated with the version stored in the sharding catalog when we asked for the shard key
     * (on mongos only). On mongod, this is the value of the 'targetCollectionPlacementVersion'
     * parameter, which is the target placement version of the collection, as sent by mongos.
     ','line_number':600,'multiline':True]
['text':'*
     * Create a temporary record store.
     ','line_number':617,'multiline':True]
['text':'*
     * Write the records in 'records' to the record store. Record store must already exist. Asserts
     * that the writes succeeded.
     ','line_number':623,'multiline':True]
['text':'*
     * Search for the RecordId 'rID' in 'rs'. RecordStore must already exist and be populated.
     * Asserts that a document was found.
     ','line_number':632,'multiline':True]
['text':'*
     * Deletes the record with RecordId `rID` from `rs`. RecordStore must already exist.
     ','line_number':641,'multiline':True]
['text':'*
     * Deletes all Records from `rs`. RecordStore must already exist.
     ','line_number':648,'multiline':True]
['text':' namespace mongo','line_number':655,'multiline':False]
