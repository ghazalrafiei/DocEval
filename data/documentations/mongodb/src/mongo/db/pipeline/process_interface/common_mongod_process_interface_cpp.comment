['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' Returns true if the field names of 'keyPattern' are exactly those in 'uniqueKeyPaths', and each','line_number':125,'multiline':False]
['text':' of the elements of 'keyPattern' is numeric, i.e. not "text", "$**", or any other special type of','line_number':126,'multiline':False]
['text':' index.','line_number':127,'multiline':False]
['text':' Proactively assert that this operation can safely write before hitting an assertion in the','line_number':151,'multiline':False]
['text':' storage engine. We can safely write if we are enforcing prepare conflicts by blocking or if we','line_number':152,'multiline':False]
['text':' are ignoring prepare conflicts and explicitly allowing writes. Ignoring prepare conflicts','line_number':153,'multiline':False]
['text':' without allowing writes will cause this operation to fail in the storage engine.','line_number':154,'multiline':False]
['text':'*
 * Returns all documents from _mdb_catalog along with a sorted list of all
 * <db>.system.views namespaces found.
 ','line_number':163,'multiline':True]
['text':' For backwards compatibility where older version have a written feature document.','line_number':181,'multiline':False]
['text':' See SERVER-57125.','line_number':182,'multiline':False]
['text':' namespace','line_number':206,'multiline':False]
['text':' Retrieve the relevant index entry.','line_number':244,'multiline':False]
['text':' Clear 'docs' because we will read _mdb_catalog again using a consistent snapshot for all','line_number':278,'multiline':False]
['text':' the system.views collections.','line_number':279,'multiline':False]
['text':' We want to read all the system.views as well as _mdb_catalog (again) using a consistent','line_number':282,'multiline':False]
['text':' snapshot.','line_number':283,'multiline':False]
['text':' If the primary collection is not available, it means the information from parsing','line_number':291,'multiline':False]
['text':' _mdb_catalog is no longer valid. Therefore, we restart this process from the top.','line_number':292,'multiline':False]
['text':' Read _mdb_catalog again using the same snapshot set up by our collection(s) lock helper.','line_number':297,'multiline':False]
['text':' If _mdb_catalog contains a different set of system.views namespaces from the first time','line_number':298,'multiline':False]
['text':' we read it, we should discard this set of results and retry from the top (with the','line_number':299,'multiline':False]
['text':' global read lock) of this loop.','line_number':300,'multiline':False]
['text':' Hold reference to the catalog for collection lookup without locks to be safe.','line_number':312,'multiline':False]
['text':' Perform an aquisition. This will verify that the collection still exists at the given','line_number':358,'multiline':False]
['text':' read concern. If it doesn't and the aggregation has specified a UUID then this acquisition','line_number':359,'multiline':False]
['text':' will fail.','line_number':360,'multiline':False]
['text':' There's no need to attach a cursor here.','line_number':487,'multiline':False]
['text':' Reparse 'pipeline' to discover whether there are secondary namespaces that we need to lock','line_number':508,'multiline':False]
['text':' when constructing our query executor.','line_number':509,'multiline':False]
['text':' Be sure to do the lookup using the collection default collation','line_number':570,'multiline':False]
['text':' If we are here, we are either executing the pipeline normally or running in one of the','line_number':576,'multiline':False]
['text':' execution stat explain verbosities. In either case, we disable explain on the foreign','line_number':577,'multiline':False]
['text':' context so that we actually retrieve the document.','line_number':578,'multiline':False]
['text':' cacheKeyFilterFunc ','line_number':655,'multiline':True]
['text':' Retrieve plan cache entries from the SBE plan cache.','line_number':657,'multiline':False]
['text':' Only fetch plan cache entries with keys matching given UUID and collectionVersion.','line_number':661,'multiline':False]
['text':' We purposefully avoid a helper like AutoGetCollection here because we don't want to check the','line_number':682,'multiline':False]
['text':' db version or do anything else. We simply want to protect against concurrent modifications to','line_number':683,'multiline':False]
['text':' the catalog.','line_number':684,'multiline':False]
['text':' Append lock stats before returning.','line_number':730,'multiline':False]
['text':' If the user is listing only their own ops, we use makeSessionFilterForAuthenticatedUsers to','line_number':770,'multiline':False]
['text':' create a pattern that will match against all authenticated usernames for the current client.','line_number':771,'multiline':False]
['text':' If the user is listing ops for all users, we create an empty pattern; constructing an','line_number':772,'multiline':False]
['text':' instance of SessionKiller::Matcher with this empty pattern will return all sessions.','line_number':773,'multiline':False]
['text':' This collection doesn't exist, so assume a nullptr default collation','line_number':800,'multiline':False]
['text':' Clone the collator so that we can safely use the pointer if the collection','line_number':804,'multiline':False]
['text':' disappears right after we release the lock.','line_number':805,'multiline':False]
['text':' Make sure the 'fields' array has a supporting index. Skip this check if the command is sent','line_number':838,'multiline':False]
['text':' from mongos since the 'fields' check would've happened already.','line_number':839,'multiline':False]
['text':' If we receive a NamespaceExists error for a time-series view that has the same','line_number':874,'multiline':False]
['text':' specification as the time-series view we wanted to create, we should not throw an','line_number':875,'multiline':False]
['text':' error. The user is allowed to overwrite an existing time-series collection when','line_number':876,'multiline':False]
['text':' entering this function.','line_number':877,'multiline':False]
['text':' Confirming the error is NamespaceExists','line_number':879,'multiline':False]
['text':' Confirming there is a time-series view in that namespace and the time-series options of the','line_number':884,'multiline':False]
['text':' existing view are the same as expected.','line_number':885,'multiline':False]
['text':'convertToBucketsNamespace','line_number':897,'multiline':True]
['text':' namespace mongo','line_number':969,'multiline':False]
