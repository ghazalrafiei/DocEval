['text':'*
 *    Copyright (C) 2021-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 * Produce the MatchExpression representing the filter for the $match stage to filter oplog entries
 * to only those relevant for this $changeStream stage.
 *
 * If there is a 'userMatch' $match stage that will apply to documents generated by the
 * $changeStream, this filter can incorporate portions of the predicate, so as to filter out oplog
 * entries that would definitely be filtered out by the 'userMatch' filter.
 *
 * NB: When passing a non-NULL 'userMatch' expression, the resulting expression is built using a
 * "shallow clone" of the 'userMatch' (i.e., the result of 'MatchExpression::clone()') and
 * can contain references to strings in the BSONObj that 'userMatch' originated from. Callers that
 * keep the new filter long-term should serialize and re-parse it to guard against the possibility
 * of stale string references.
 ','line_number':64,'multiline':True]
['text':' Start building the oplog filter by adding predicates that apply to every entry.','line_number':86,'multiline':False]
['text':' Create an $or filter which only captures relevant events in the oplog.','line_number':93,'multiline':False]
['text':' We currently do not support opening a change stream on a view namespace. So we only need to','line_number':100,'multiline':False]
['text':' add this filter when the change stream type is whole-db or whole cluster.','line_number':101,'multiline':False]
['text':' Build the final $match filter to be applied to the oplog.','line_number':107,'multiline':False]
['text':' Perform a final optimization pass on the complete filter before returning.','line_number':110,'multiline':False]
['text':' TODO SERVER-81846: Enable the Boolean Expression Simplifier in change streams.','line_number':111,'multiline':False]
['text':' enableSimplification ','line_number':112,'multiline':True]
['text':' namespace change_stream_filter','line_number':114,'multiline':False]
['text':' Note: raw new used here to access private constructor.','line_number':139,'multiline':False]
['text':' This is used in error reporting, particularly if we find this stage in a position other','line_number':144,'multiline':False]
['text':' than first, so report the name as $changeStream.','line_number':145,'multiline':False]
['text':' It is not safe to combine any parts of a user $match with this stage when the $user match has','line_number':171,'multiline':False]
['text':' a non-simple collation, because this stage's MatchExpression always executes wtih the simple','line_number':172,'multiline':False]
['text':' collation.','line_number':173,'multiline':False]
['text':' Seek to the stage that immediately follows the change streams stages.','line_number':178,'multiline':False]
['text':' Optimize the pipeline after this stage to merge $match stages and push them forward. Note, if','line_number':183,'multiline':False]
['text':' we have already performed the '_optimizedEndOfPipeline' step, we assume that we have also','line_number':184,'multiline':False]
['text':' applied any $match rewrites that would be available to this function and that no further','line_number':185,'multiline':False]
['text':' optimization is necessary. The optimizations in this function are not designed to be','line_number':186,'multiline':False]
['text':' attempted multiple times.','line_number':187,'multiline':False]
['text':' This pipeline is just the change stream.','line_number':196,'multiline':False]
['text':' This function only attempts to optimize a $match that immediately follows expanded','line_number':202,'multiline':False]
['text':' $changeStream stages. That does not apply here, and we resume optimization at the last','line_number':203,'multiline':False]
['text':' change stream stage, in case a "swap" optimization can apply between it and the stage','line_number':204,'multiline':False]
['text':' that follows it. For example, $project stages can swap in front of the last change stream','line_number':205,'multiline':False]
['text':' stages.','line_number':206,'multiline':False]
['text':' Recreate the change stream filter with additional predicates from the user's $match.','line_number':212,'multiline':False]
['text':' Set the internal DocumentSourceMatch state to the new filter.','line_number':216,'multiline':False]
['text':' Continue optimization at the next change stream stage.','line_number':219,'multiline':False]
['text':' namespace mongo','line_number':245,'multiline':False]
