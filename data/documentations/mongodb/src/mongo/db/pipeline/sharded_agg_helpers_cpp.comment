['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' IWYU pragma: keep','line_number':132,'multiline':False]
['text':'*
 * Given a document representing an aggregation command such as
 * {aggregate: "myCollection", pipeline: [], ...},
 *
 * produces the corresponding explain command:
 * {explain: {aggregate: "myCollection", pipline: [], ...}, $queryOptions: {...}, verbosity: ...}
 ','line_number':156,'multiline':True]
['text':' Downstream host targeting code expects queryOptions at the top level of the command object.','line_number':166,'multiline':False]
['text':' readConcern needs to be promoted to the top-level of the request.','line_number':170,'multiline':False]
['text':' Add explain command options.','line_number':174,'multiline':False]
['text':'*
 * Open a $changeStream cursor on the 'config.shards' collection to watch for new shards.
 ','line_number':182,'multiline':True]
['text':' Pipeline: {$changeStream: {startAtOperationTime: [now], allowToRunOnConfigDB: true}}','line_number':188,'multiline':False]
['text':' appendRC ','line_number':203,'multiline':True]
['text':' appendWC ','line_number':204,'multiline':True]
['text':' Pass query settings of the original request to the shards.','line_number':230,'multiline':False]
['text':' If this is a request for an aggregation explain, then we must wrap the aggregate inside an','line_number':237,'multiline':False]
['text':' explain command.','line_number':238,'multiline':False]
['text':' If we are running on all shard servers we should never designate a particular server.','line_number':285,'multiline':False]
['text':' do not allow partial results ','line_number':305,'multiline':True]
['text':' providedOpKeys ','line_number':307,'multiline':True]
['text':' The pipeline begins with a stage which must be run on all shards.','line_number':320,'multiline':False]
['text':'*
 * Helpers to check and move stages from a DistributedPlanLogic.
 ','line_number':331,'multiline':True]
['text':' This stage must be split, split it normally.','line_number':355,'multiline':False]
['text':' Add in reverse order since we add each to the front and this would flip the order otherwise.','line_number':356,'multiline':False]
['text':'*
 * Helper for find split point that handles the split after a stage that must be on
 * the merging half of the pipeline defers being added to the merging pipeline.
 ','line_number':368,'multiline':True]
['text':' If this stage also would like to split, split here. Don't defer multiple stages.','line_number':389,'multiline':False]
['text':' The sort that was earlier in the pipeline takes precedence.','line_number':393,'multiline':False]
['text':' Move the source from the merger _sources to the shard _sources.','line_number':400,'multiline':False]
['text':' We got to the end of the pipeline or found a split point.','line_number':404,'multiline':False]
['text':'*
 * Moves everything before a splittable stage to the shards. If there are no splittable stages,
 * moves everything to the shards.
 *
 * It is not safe to call this optimization multiple times.
 *
 * Returns {shardPipe, sortSpec}. The original passed in pipeline retains all stages after the split
 * point and becomes the merge pipeline.
 ','line_number':409,'multiline':True]
['text':' Check if this source is splittable.','line_number':426,'multiline':False]
['text':' Move the source from the merger _sources to the shard _sources.','line_number':428,'multiline':False]
['text':' If we got a plan logic which doesn't require a split, save it and keep going.','line_number':433,'multiline':False]
['text':' We know these are all currently null/none, as if we had deferred something and','line_number':443,'multiline':False]
['text':' 'current' did not need split we would have returned above.','line_number':444,'multiline':False]
['text':'*
 * If the final stage on shards is to unwind an array, move that stage to the merger. This cuts down
 * on network traffic and allows us to take advantage of reduced copying in unwind.
 ','line_number':460,'multiline':True]
['text':'*
 * When the last stage of shard pipeline is $sort, move stages that can run on shards and don't
 * rename or modify the fields in $sort from merge pipeline. The function starts from the beginning
 * of the merge pipeline and finds the first consecutive eligible stages.
 ','line_number':471,'multiline':True]
['text':' Expected last stage on the shards to be a $sort.','line_number':483,'multiline':False]
['text':'*
 * Returns true if the final stage of the pipeline limits the number of documents it could output
 * (such as a $limit stage).
 *
 * This function is not meant to exhaustively catch every single case where a pipeline might have
 * some kind of limit. It's only here so that propagateDocLimitsToShards() can avoid adding an
 * obviously unnecessary $limit to a shard's pipeline.
 ','line_number':503,'multiline':True]
['text':' If this stage is one that can swap with a $limit stage, then we can look at the previous','line_number':532,'multiline':False]
['text':' stage to see if it includes a limit. Otherwise, we give up trying to find a limit on this','line_number':533,'multiline':False]
['text':' stage's output.','line_number':534,'multiline':False]
['text':'*
 * If the merging pipeline includes a $limit stage that creates an upper bound on how many input
 * documents it needs to compute the aggregation, we can use that as an upper bound on how many
 * documents each of the shards needs to produce. Propagating that upper bound to the shards (using
 * a $limit in the shard pipeline) can reduce the number of documents the shards need to process and
 * transfer over the network (see SERVER-36881).
 *
 * If there are $skip stages before the $limit, the skipped documents also contribute to the upper
 * bound.
 ','line_number':543,'multiline':True]
['text':' The sharding pipeline already has a limit that is no greater than the limit we','line_number':569,'multiline':False]
['text':' were going to add, so no changes are necessary.','line_number':570,'multiline':False]
['text':' We have successfully applied a limit to the number of documents we need from each','line_number':578,'multiline':False]
['text':' shard.','line_number':579,'multiline':False]
['text':' If there are any stages in the merge pipeline before the $skip and $limit stages, then we','line_number':583,'multiline':False]
['text':' cannot use the $limit to determine an upper bound, unless those stages could be swapped','line_number':584,'multiline':False]
['text':' with the $limit.','line_number':585,'multiline':False]
['text':' We did not find any limit in the merge pipeline that would allow us to set an upper bound on','line_number':591,'multiline':False]
['text':' the number of documents we need from each shard.','line_number':592,'multiline':False]
['text':'*
 * Adds a stage to the end of 'shardPipe' explicitly requesting all fields that 'mergePipe' needs.
 * This is only done if it heuristically determines that it is needed. This optimization can reduce
 * the amount of network traffic and can also enable the shards to convert less source BSON into
 * Documents.
 ','line_number':596,'multiline':True]
['text':' the merge needs all fields, so nothing we can do.','line_number':605,'multiline':False]
['text':' Empty project is "special" so if no fields are needed, we just ask for _id instead.','line_number':607,'multiline':False]
['text':' HEURISTIC: only apply optimization if none of the shard stages have an exhaustive list of','line_number':611,'multiline':False]
['text':' field dependencies. While this may not be 100% ideal in all cases, it is simple and','line_number':612,'multiline':False]
['text':' avoids the worst cases by ensuring that:','line_number':613,'multiline':False]
['text':' 1) Optimization IS applied when the shards wouldn't have known their exhaustive list of','line_number':614,'multiline':False]
['text':'    dependencies. This situation can happen when a $sort is before the first $project or','line_number':615,'multiline':False]
['text':'    $group. Without the optimization, the shards would have to reify and transmit full','line_number':616,'multiline':False]
['text':'    objects even though only a subset of fields are needed.','line_number':617,'multiline':False]
['text':' 2) Optimization IS NOT applied immediately following a $project or $group since it would','line_number':618,'multiline':False]
['text':'    add an unnecessary project (and therefore a deep-copy).','line_number':619,'multiline':False]
['text':' if we get here, add the project.','line_number':625,'multiline':False]
['text':' This stage is fine to execute in parallel on each stream. For example, a $match can be','line_number':637,'multiline':False]
['text':' applied to each stream in parallel.','line_number':638,'multiline':False]
['text':' A leading $group stage will not report to preserve any fields, since it blows away the','line_number':676,'multiline':False]
['text':' _id and replaces it with something new. It possibly renames some fields, but when','line_number':677,'multiline':False]
['text':' computing the new shard key we are interested in the name of the shard key *in the middle','line_number':678,'multiline':False]
['text':' of the $group*. The $exchange will be inserted between the shard-local groups and the','line_number':679,'multiline':False]
['text':' global groups. Thus we want to exclude this stage from our rename tracking.','line_number':680,'multiline':False]
['text':'*
 * Returns true if any stage in the pipeline would modify any of the fields in 'shardKeyPaths', or
 * if there is any stage in the pipeline requires a unified stream to do its computation like a
 * $limit would.
 *
 * Purposefully takes 'shardKeyPaths' by value so that it can be modified throughout.
 ','line_number':691,'multiline':True]
['text':' In order for this stage to work it needs a single input stream which it wouldn't get','line_number':713,'multiline':False]
['text':' if we inserted an exchange before it.','line_number':714,'multiline':False]
['text':' All the fields of the shard key are preserved by the pipeline, but they might be renamed. To','line_number':733,'multiline':False]
['text':' set up the $exchange, we need to build a fake shard key pattern which uses the names of the','line_number':734,'multiline':False]
['text':' shard key fields as they are at the split point of the pipeline.','line_number':735,'multiline':False]
['text':' Append the boundaries with the new names from the new shard key.','line_number':739,'multiline':False]
['text':' Given the new shard key fields, build the distribution map.','line_number':748,'multiline':False]
['text':' The chunk manager enumerates the chunks in the ascending order from MinKey to MaxKey. Every','line_number':756,'multiline':False]
['text':' chunk has an associated range [from, to); i.e. inclusive lower bound and exclusive upper','line_number':757,'multiline':False]
['text':' bound. The chunk ranges must cover all domain without any holes. For the exchange we coalesce','line_number':758,'multiline':False]
['text':' ranges into a single vector of points. E.g. chunks [min,5], [5,10], [10,max] will produce','line_number':759,'multiline':False]
['text':' [min,5,10,max] vector. Number of points in the vector is always one greater than number of','line_number':760,'multiline':False]
['text':' chunks.','line_number':761,'multiline':False]
['text':' We also compute consumer indices for every chunk. From the example above (3 chunks) we may','line_number':762,'multiline':False]
['text':' get the vector [0,1,2]; i.e. the first chunk goes to the consumer 0 and so on. Note that','line_number':763,'multiline':False]
['text':' the consumer id may be repeated if the consumer hosts more than 1 chunk.','line_number':764,'multiline':False]
['text':'*
 * Non-correlated pipeline caching is only supported locally. When the
 * DocumentSourceSequentialDocumentCache stage has been moved to the shards pipeline, abandon the
 * associated local cache.
 ','line_number':788,'multiline':True]
['text':' If this is a $changeStream or the desugared pipeline starts with $queue, we swallow','line_number':806,'multiline':False]
['text':' NamespaceNotFound exceptions and continue. Otherwise, uassert on all exceptions here.','line_number':807,'multiline':False]
['text':'* Check if the first stage of `pipeline` can execute without an attached cursor source. ','line_number':818,'multiline':True]
['text':' In this helper, we expect that we are viewing the first stage of a pipeline that does','line_number':828,'multiline':False]
['text':' not yet have a mergeCursors prepended to it.','line_number':829,'multiline':False]
['text':' Here we check the hostRequirment because there is at least one stage ($indexStats) which','line_number':838,'multiline':False]
['text':' does not require input data, but is still expected to fan out and contact remote shards','line_number':839,'multiline':False]
['text':' nonetheless.','line_number':840,'multiline':False]
['text':'*
 * Given a pipeline's ShardTargetingPolicy and the NamespaceString of its expression context,
 * returns true if the pipeline is required to have a cursor source that does a local read from the
 * current process.
 ','line_number':845,'multiline':True]
['text':' Certain namespaces are shard-local; that is, they exist independently on every shard. For','line_number':852,'multiline':False]
['text':' these namespaces, a local cursor should always be used.','line_number':853,'multiline':False]
['text':' TODO SERVER-59957: use NamespaceString::isPerShardNamespace instead.','line_number':854,'multiline':False]
['text':'*
 * Given a pipeline's TargetingResults and this process' ShardId, return true if we can use a local
 * read as the cursor source for the pipeline. Also considers the readConcern of the pipeline
 * (passed as argument), vs. the readConcern of the operation the pipeline is running under
 * (obtained from the provided opCtx).
 ','line_number':866,'multiline':True]
['text':' If there is no targetingCri, we can't enter the shard role correctly, so we need to','line_number':876,'multiline':False]
['text':' fallback to remote read.','line_number':877,'multiline':False]
['text':' If subpipeline has a different read concern, we need to perform remote read to','line_number':881,'multiline':False]
['text':' satisfy it.','line_number':882,'multiline':False]
['text':' ordering ','line_number':886,'multiline':True]
['text':'*
 * Attempts to attach a cursor source to the passed in pipeline via a local read.
 * Possibly mutates pipelineToTarget by releasing ownership to the cursor source.
 * Returns a pipeline with a cursor source attach on success. On failure, returns nullptr.
 *
 * Failure may occur before or after the pipelineToTarget is released; callers must check
 * if the pointer was released before using it again.
 ','line_number':892,'multiline':True]
['text':' TODO SERVER-77402 Wrap this in a shardRoleRetry loop instead of','line_number':915,'multiline':False]
['text':' catching exceptions. attachCursorSourceToPipelineForLocalRead enters the','line_number':916,'multiline':False]
['text':' shard role but does not refresh the shard if the shard has stale metadata.','line_number':917,'multiline':False]
['text':' Proceeding to do normal shard targeting, which will go through the','line_number':918,'multiline':False]
['text':' service_entry_point and refresh the shard if needed.','line_number':919,'multiline':False]
['text':' The current node has stale information about this collection, proceed with','line_number':933,'multiline':False]
['text':' shard targeting, which has logic to handle refreshing that may be needed.','line_number':934,'multiline':False]
['text':' The current node has stale information about this collection, proceed with','line_number':936,'multiline':False]
['text':' shard targeting, which has logic to handle refreshing that may be needed.','line_number':937,'multiline':False]
['text':' The current node may be trying to run a pipeline on a namespace which is an','line_number':939,'multiline':False]
['text':' unresolved view, proceed with shard targeting,','line_number':940,'multiline':False]
['text':' The current node's shard or database version of target namespace was updated','line_number':943,'multiline':False]
['text':' mid-operation. Proceed with remote request to re-initialize operation','line_number':944,'multiline':False]
['text':' context.','line_number':945,'multiline':False]
['text':' namespace','line_number':949,'multiline':False]
['text':' allowPartialResults ','line_number':976,'multiline':True]
['text':' Convert remote cursors into a vector of "owned" cursors.','line_number':980,'multiline':False]
['text':' We have not split the pipeline, and will execute entirely on the remote shard. Set up an','line_number':987,'multiline':False]
['text':' empty local pipeline which we will attach the merge cursors stage to.','line_number':988,'multiline':False]
['text':' If there's no $merge stage we won't try to do an $exchange. For the $out stage there's no','line_number':1007,'multiline':False]
['text':' point doing an $exchange because all the writes will go to a single node, so we should','line_number':1008,'multiline':False]
['text':' just perform the merge on that host.','line_number':1009,'multiline':False]
['text':' The collection is sharded and we have a $merge stage! Here we assume the $merge stage has','line_number':1019,'multiline':False]
['text':' already verified that the shard key pattern is compatible with the unique key being used.','line_number':1020,'multiline':False]
['text':' Assuming this, we just have to make sure the shard key is preserved (though possibly renamed)','line_number':1021,'multiline':False]
['text':' all the way to the front of the merge pipeline. If this is the case then for any document','line_number':1022,'multiline':False]
['text':' entering the merging pipeline we can predict which shard it will need to end up being','line_number':1023,'multiline':False]
['text':' inserted on. With this ability we can insert an exchange on the shards to partition the','line_number':1024,'multiline':False]
['text':' documents based on which shard will end up owning them. Then each shard can perform a merge','line_number':1025,'multiline':False]
['text':' of only those documents which belong to it (optimistically, barring chunk migrations).','line_number':1026,'multiline':False]
['text':' Re-brand 'pipeline' as the merging pipeline. We will move stages one by one from the merging','line_number':1031,'multiline':False]
['text':' half to the shards, as possible.','line_number':1032,'multiline':False]
['text':' The order in which optimizations are applied can have significant impact on the efficiency of','line_number':1037,'multiline':False]
['text':' the final pipeline. Be Careful!','line_number':1038,'multiline':False]
['text':' Create the command for the shards.','line_number':1061,'multiline':False]
['text':' Apply filter and RW concern to the final shard command.','line_number':1080,'multiline':False]
['text':' appendRC ','line_number':1083,'multiline':True]
['text':' appendWC ','line_number':1084,'multiline':True]
['text':' Create the command for the shards.','line_number':1095,'multiline':False]
['text':' If we've parsed a pipeline on mongos, always override the pipeline, in case parsing it','line_number':1097,'multiline':False]
['text':' has defaulted any arguments or otherwise changed the spec. For example, $listSessions may','line_number':1098,'multiline':False]
['text':' have detected a logged in user and appended that user name to the $listSessions spec to','line_number':1099,'multiline':False]
['text':' send to the shards.','line_number':1100,'multiline':False]
['text':' When running on many shards with the exchange we may not need merging.','line_number':1104,'multiline':False]
['text':' If there aren't any stages like $out in the pipeline being sent to the shards, remove the','line_number':1108,'multiline':False]
['text':' write concern. The write concern should only be applied when there are writes performed','line_number':1109,'multiline':False]
['text':' to avoid mistakenly waiting for writes which didn't happen.','line_number':1110,'multiline':False]
['text':' Apply RW concern to the final shard command.','line_number':1128,'multiline':False]
['text':' appendRC ','line_number':1130,'multiline':True]
['text':' appendWC ','line_number':1131,'multiline':True]
['text':' A $changeStream update lookup attempts to retrieve a single document by documentKey. In this','line_number':1147,'multiline':False]
['text':' case, we wish to target a single shard using the simple collation, but we also want to ensure','line_number':1148,'multiline':False]
['text':' that we use the collection-default collation on the shard so that the lookup can use the _id','line_number':1149,'multiline':False]
['text':' index. We therefore ignore the collation on the expCtx.','line_number':1150,'multiline':False]
['text':' Determine whether we can run the entire aggregation on a single shard.','line_number':1156,'multiline':False]
['text':' Don't need to split the pipeline if we are only targeting a single shard, unless:','line_number':1168,'multiline':False]
['text':' - There is a stage that needs to be run on the primary shard and the single target shard','line_number':1169,'multiline':False]
['text':'   is not the primary.','line_number':1170,'multiline':False]
['text':' - The pipeline contains one or more stages which must always merge on mongoS.','line_number':1171,'multiline':False]
['text':' - The pipeline requires the merge to be performed on a specific shard that is not targeted.','line_number':1172,'multiline':False]
['text':' TODO SERVER-79583: This reference to dbPrimary can be removed once','line_number':1173,'multiline':False]
['text':' HostTypeRequirement::kPrimaryShard is no longer used.','line_number':1174,'multiline':False]
['text':' A $changeStream pipeline must run on all shards, and will also open an extra cursor on the','line_number':1180,'multiline':False]
['text':' config server in order to monitor for new shards. To guarantee that we do not miss any','line_number':1181,'multiline':False]
['text':' shards, we must ensure that the list of shards to which we initially dispatch the pipeline is','line_number':1182,'multiline':False]
['text':' at least as current as the logical time at which the stream begins scanning for new shards.','line_number':1183,'multiline':False]
['text':' We therefore set 'shardRegistryReloadTime' to the current clusterTime and then hard-reload','line_number':1184,'multiline':False]
['text':' the shard registry. We don't refresh for other pipelines that must run on all shards (e.g.','line_number':1185,'multiline':False]
['text':' $currentOp) because, unlike $changeStream, those pipelines may not have been forced to split','line_number':1186,'multiline':False]
['text':' if there was only one shard in the cluster when the command began execution. If a shard was','line_number':1187,'multiline':False]
['text':' added since the earlier targeting logic ran, then refreshing here may cause us to illegally','line_number':1188,'multiline':False]
['text':' target an unsplit pipeline to more than one shard.','line_number':1189,'multiline':False]
['text':' Rebuild the set of shards as the shard registry might have changed.','line_number':1194,'multiline':False]
['text':' The pipeline contains a stage which must be run on all shards and/or on all targeted','line_number':1232,'multiline':False]
['text':' shard hosts. Skip versioning and enqueue the raw command objects.','line_number':1233,'multiline':False]
['text':' Resume tokens are particular to a host, so it will never make sense to use them when','line_number':1254,'multiline':False]
['text':' running on all shard servers.','line_number':1255,'multiline':False]
['text':' The process is as follows:','line_number':1299,'multiline':False]
['text':' - First, determine whether we need to target more than one shard. If so, we split the','line_number':1300,'multiline':False]
['text':' pipeline; if not, we retain the existing pipeline.','line_number':1301,'multiline':False]
['text':' - Call establishShardCursors to dispatch the aggregation to the targeted shards.','line_number':1302,'multiline':False]
['text':' - Stale shard version errors are thrown up to the top-level handler, causing a retry on the','line_number':1303,'multiline':False]
['text':' entire aggregation command.','line_number':1304,'multiline':False]
['text':' If the first stage of the pipeline is a $search stage, exchange optimization isn't','line_number':1324,'multiline':False]
['text':' possible.','line_number':1325,'multiline':False]
['text':' TODO SERVER-65349 Investigate relaxing this restriction.','line_number':1326,'multiline':False]
['text':' Generate the command object for the targeted shards.','line_number':1335,'multiline':False]
['text':' needsMerge ','line_number':1341,'multiline':True]
['text':' If there were no shards when we began execution, we wouldn't have run this aggregation in the','line_number':1350,'multiline':False]
['text':' first place. Here, we double-check that the shards have not been removed mid-operation.','line_number':1351,'multiline':False]
['text':' Check to see if the command failed because of a stale shard version or something','line_number':1380,'multiline':False]
['text':' else.','line_number':1381,'multiline':False]
['text':' For $changeStream, we must open an extra cursor on the 'config.shards' collection, so','line_number':1397,'multiline':False]
['text':' that we can monitor for the addition of new shards inline with real events.','line_number':1398,'multiline':False]
['text':' Convert remote cursors into a vector of "owned" cursors.','line_number':1404,'multiline':False]
['text':' Record the number of shards involved in the aggregation. If we are required to merge on','line_number':1411,'multiline':False]
['text':' the primary shard, but the primary shard was not in the set of targeted shards, then we','line_number':1412,'multiline':False]
['text':' must increment the number of involved shards.','line_number':1413,'multiline':False]
['text':' TODO SERVER-79583: Revisit this computation. In particular, even when we are no longer','line_number':1414,'multiline':False]
['text':' merging on the primary shard specifically, we may need to account for the chase where the','line_number':1415,'multiline':False]
['text':' merging shard is not in 'shardIds'.','line_number':1416,'multiline':False]
['text':' Only acquire CollectionRoutingInfo if we do not already have one.','line_number':1444,'multiline':False]
['text':' Return if we don't need to establish any cursors.','line_number':1455,'multiline':False]
['text':'*
 * Build the AsyncResultsMergerParams from the cursor set and sort spec.
 ','line_number':1472,'multiline':True]
['text':' Convert owned cursors into a vector of remote cursors to be transferred to the merge','line_number':1493,'multiline':False]
['text':' pipeline.','line_number':1494,'multiline':False]
['text':' Transfer ownership of the remote cursor to the $mergeCursors stage.','line_number':1498,'multiline':False]
['text':' Anonnymous namespace for helpers of partitionCursorsAndAddMergeCursors.','line_number':1506,'multiline':False]
['text':'*
 * Given the owned cursors vector, partitions the cursors into either one or two vectors. If
 * untyped cursors are present, returned pair will be {results, boost::none}. If results or meta are
 * present, the returned pair will be {results, meta}.
 ','line_number':1508,'multiline':True]
['text':' Partition cursor set based on type/label.','line_number':1516,'multiline':False]
['text':' Verify we don't have illegal mix of types and untyped cursors from the shards.','line_number':1538,'multiline':False]
['text':'*
 * Adds a merge cursors stage to the pipeline for metadata cursors. Should not be called if
 * the query did not generate metadata cursors.
 ','line_number':1553,'multiline':True]
['text':' Provide the "meta" cursors to the $setVariableFromSubPipeline stage.','line_number':1558,'multiline':False]
['text':' If $setVar is present, we must have a non-empty set of "meta" cursors.','line_number':1563,'multiline':False]
['text':'*
 * Adds a mergeCursors stage to the front of the pipeline to handle merging cursors from each
 * shard.
 ','line_number':1576,'multiline':True]
['text':' namespace','line_number':1591,'multiline':False]
['text':' Whether or not cursors are typed/untyped, the first is always the results cursor.','line_number':1597,'multiline':False]
['text':' We specify "queryPlanner" verbosity when building the output for "shardsPart" because','line_number':1633,'multiline':False]
['text':' execution stats are reported by each shard individually.','line_number':1634,'multiline':False]
['text':' We specify "queryPlanner" verbosity because execution stats are not currently','line_number':1646,'multiline':False]
['text':' supported when building the output for "mergerPart".','line_number':1647,'multiline':False]
['text':' No cursors to remote shards are established for an explain, and the $mergeCursors','line_number':1650,'multiline':False]
['text':' aggregation stage which is normally built in addMergeCursorsSource() requires vectors of','line_number':1651,'multiline':False]
['text':' cursors and ShardIDs. For explain output, we construct the armParams that would normally','line_number':1652,'multiline':False]
['text':' be used in the serialization of the $mergeCursors stage and add it to the serialization','line_number':1653,'multiline':False]
['text':' of the pipeline.','line_number':1654,'multiline':False]
['text':' Since no cursors are actually established for an explain, construct ARM params with','line_number':1656,'multiline':False]
['text':' an empty vector and then remove it from the explain BSON.','line_number':1657,'multiline':False]
['text':' See DocumentSourceMergeCursors::serialize().','line_number':1664,'multiline':False]
['text':' The pipeline is going to be explained on the shards, and we don't want to send a','line_number':1706,'multiline':False]
['text':' mergeCursors stage.','line_number':1707,'multiline':False]
['text':' Generate the command object for the targeted shards.','line_number':1711,'multiline':False]
['text':' First, verify that there are shards present in the cluster. If not, then we return the','line_number':1747,'multiline':False]
['text':' stronger 'ShardNotFound' error rather than 'NamespaceNotFound'. We must do this because','line_number':1748,'multiline':False]
['text':' $changeStream aggregations ignore NamespaceNotFound in order to allow streams to be opened on','line_number':1749,'multiline':False]
['text':' a collection before its enclosing database is created. However, if there are no shards','line_number':1750,'multiline':False]
['text':' present, then $changeStream should immediately return an empty cursor just as other','line_number':1751,'multiline':False]
['text':' aggregations do when the database does not exist.','line_number':1752,'multiline':False]
['text':' This call to getCollectionRoutingInfoForTxnCmd will return !OK if the database does not exist','line_number':1758,'multiline':False]
['text':' The idempotent retry policy will retry even for writeConcern failures, so only set it if the','line_number':1763,'multiline':False]
['text':' pipeline does not support writeConcern.','line_number':1764,'multiline':False]
['text':' The following aggregations must be routed to all shards:','line_number':1772,'multiline':False]
['text':' - Any collectionless aggregation, such as non-localOps $currentOp.','line_number':1773,'multiline':False]
['text':' - Any aggregation which begins with a $changeStream stage.','line_number':1774,'multiline':False]
['text':' The default value for 'allowDiskUse' and 'maxTimeMS' in the AggregateCommandRequest may not','line_number':1789,'multiline':False]
['text':' match what was set on the originating command, so copy it from the ExpressionContext.','line_number':1790,'multiline':False]
['text':' explain ','line_number':1804,'multiline':True]
['text':' designatedHostsMap ','line_number':1806,'multiline':True]
['text':' resumeTokenMap ','line_number':1807,'multiline':True]
['text':' We have not split the pipeline, and will execute entirely on the remote shards. Set up an','line_number':1823,'multiline':False]
['text':' empty local pipeline which we will attach the merge cursors stage to.','line_number':1824,'multiline':False]
['text':' There's no need to attach a cursor here - the first stage provides its own data and','line_number':1892,'multiline':False]
['text':' is meant to be run locally (e.g. $documents).','line_number':1893,'multiline':False]
['text':' We're not required to read locally, and we need a cursor source. We need to perform routing','line_number':1907,'multiline':False]
['text':' to see what shard(s) the pipeline targets.','line_number':1908,'multiline':False]
['text':' CRI, provided by CollectionRouter, contains the latest data. We call','line_number':1923,'multiline':False]
['text':' getCollectionRoutingInfoForTxnCmd to get CRI with historical data for transactions','line_number':1924,'multiline':False]
['text':' with snapshot isolations. We wrap the result into boost::optional, as the next','line_number':1925,'multiline':False]
['text':' function accept only boost::optional.','line_number':1926,'multiline':False]
['text':' The local read failed. Recreate 'pipelineToTarget' if it was released above.','line_number':1939,'multiline':False]
['text':'shardCursorsSortSpec','line_number':1951,'multiline':True]
['text':' namespace sharded_agg_helpers','line_number':1956,'multiline':False]
['text':' namespace mongo','line_number':1957,'multiline':False]
