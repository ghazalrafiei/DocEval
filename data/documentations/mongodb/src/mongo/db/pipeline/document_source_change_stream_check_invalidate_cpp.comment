['text':'*
 *    Copyright (C) 2021-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' Returns true if the given 'operationType' should invalidate the change stream based on the','line_number':65,'multiline':False]
['text':' namespace in 'pExpCtx'.','line_number':66,'multiline':False]
['text':' namespace','line_number':80,'multiline':False]
['text':' If resuming from an "invalidate" using "startAfter", pass along the resume token data to','line_number':86,'multiline':False]
['text':' DSCSCheckInvalidate to signify that another invalidate should not be generated.','line_number':87,'multiline':False]
['text':' To declare a change stream as invalidated, this stage first emits an invalidate event and','line_number':109,'multiline':False]
['text':' then throws a 'ChangeStreamInvalidated' exception on the next call to this method.','line_number':110,'multiline':False]
['text':' If this command should invalidate the stream, generate an invalidate entry and queue it up','line_number':132,'multiline':False]
['text':' to be returned after the notification of this command. The new entry will have a nearly','line_number':133,'multiline':False]
['text':' identical resume token to the notification for the command, except with an extra flag','line_number':134,'multiline':False]
['text':' indicating that the token is from an invalidate. This flag is necessary to disambiguate','line_number':135,'multiline':False]
['text':' the two tokens, and thus preserve a total ordering on the stream.','line_number':136,'multiline':False]
['text':' Regardless of whether we generate an invalidation event or, in the case of startAfter,','line_number':138,'multiline':False]
['text':' swallow it, we should clear the _startAfterInvalidate field once this block completes.','line_number':139,'multiline':False]
['text':' Extract the resume token from the invalidating command and set the 'fromInvalidate' bit.','line_number':142,'multiline':False]
['text':' If a client receives an invalidate and wants to start a new stream after the invalidate,','line_number':146,'multiline':False]
['text':' they can use the 'startAfter' option. In this case, '_startAfterInvalidate' will be set','line_number':147,'multiline':False]
['text':' to the resume token with which the client restarted the stream. We must be sure to avoid','line_number':148,'multiline':False]
['text':' re-invalidating the new stream, and so we will swallow the first invalidate we see on','line_number':149,'multiline':False]
['text':' each shard. The one exception is the invalidate which matches the 'startAfter' resume','line_number':150,'multiline':False]
['text':' token. We must re-generate this invalidate, since DSEnsureResumeTokenPresent needs to see','line_number':151,'multiline':False]
['text':' (and will take care of swallowing) the event which exactly matches the client's token.','line_number':152,'multiline':False]
['text':' Note: if 'showExpandedEvents' is false, 'wallTime' will be missing in the input document.','line_number':159,'multiline':False]
['text':' We set the resume token as the document's sort key in both the sharded and non-sharded','line_number':166,'multiline':False]
['text':' cases, since we will later rely upon it to generate a correct postBatchResumeToken. We','line_number':167,'multiline':False]
['text':' must therefore update the sort key to match the new resume token that we generated above.','line_number':168,'multiline':False]
['text':' If we are here and '_startAfterInvalidate' is present, then the current event matches the','line_number':172,'multiline':False]
['text':' resume token. We throw the event up to DSCSEnsureResumeTokenPresent, to ensure that it is','line_number':173,'multiline':False]
['text':' always delivered regardless of any intervening $match stages.','line_number':174,'multiline':False]
['text':' Otherwise, we are in a normal invalidation scenario. Queue up an invalidation event to be','line_number':179,'multiline':False]
['text':' returned on the following call to getNext, and an invalidation exception to be thrown on','line_number':180,'multiline':False]
['text':' the call after that.','line_number':181,'multiline':False]
['text':' Regardless of whether the first document we see is an invalidating command, we only skip the','line_number':187,'multiline':False]
['text':' first invalidate for streams with the 'startAfter' option, so we should not skip any','line_number':188,'multiline':False]
['text':' invalidates that come after the first one.','line_number':189,'multiline':False]
['text':' namespace mongo','line_number':210,'multiline':False]
