['text':'*
 *    Copyright (C) 2021-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' Register macros for the various accumulators/expressions in this file.','line_number':60,'multiline':False]
['text':' Obtain the value for 'n' and error if it's not a positive integral.','line_number':80,'multiline':False]
['text':' TODO SERVER-59327 consider overriding this method in AccumulatorTopBottomN so that','line_number':94,'multiline':False]
['text':' sortPattern doesn't need to get passed through the constructor and we can make sure','line_number':95,'multiline':False]
['text':' n == 1 for the single variants','line_number':96,'multiline':False]
['text':' Ignore nullish values.','line_number':218,'multiline':False]
['text':' Only compare if we have 'n' elements.','line_number':223,'multiline':False]
['text':' Get an iterator to the element we want to compare against.','line_number':225,'multiline':False]
['text':' Return the values in ascending order for 'kMin' and descending order for 'kMax'.','line_number':246,'multiline':False]
['text':' TODO SERVER-59327 Deduplicate with the block in 'AccumulatorMinMaxN::parseMinMaxN'','line_number':279,'multiline':False]
['text':' Convert missing values to null.','line_number':311,'multiline':False]
['text':' Only insert in the lastN case if we have 'n' elements.','line_number':314,'multiline':False]
['text':' If our deque has 'n' elements and this is $firstN, we don't need to call process','line_number':319,'multiline':False]
['text':' anymore.','line_number':320,'multiline':False]
['text':' TODO SERVER-59327 Refactor other operators to use this parse function.','line_number':385,'multiline':False]
['text':' Extract fields from specification object. sortBy and output are not immediately parsed into','line_number':398,'multiline':False]
['text':' Expressions so that they can easily still be manipulated and processed in the special case of','line_number':399,'multiline':False]
['text':' AccumulatorTopBottomN.','line_number':400,'multiline':False]
['text':' Make sure needed arguments were found.','line_number':422,'multiline':False]
['text':' Make a copy of _sortPattern to sort based on fields where they are in the evaluated argument','line_number':447,'multiline':False]
['text':' instead of where they would be in the raw document received by $group and friends.','line_number':448,'multiline':False]
['text':' $meta based sorting is handled earlier in the sortFields expression. See comment in','line_number':458,'multiline':False]
['text':' parseAccumulatorTopBottomNSortBy().','line_number':459,'multiline':False]
['text':' STL expects a less-than function not a 3-way compare function so this lambda wraps','line_number':472,'multiline':False]
['text':' SortKeyComparator.','line_number':473,'multiline':False]
['text':' If 'argument' is either an ExpressionObject or an ExpressionConstant of object type, then','line_number':495,'multiline':False]
['text':' we are serializing the original expression under the 'output' field of the object. Otherwise,','line_number':496,'multiline':False]
['text':' we're serializing a custom expression for merging group.','line_number':497,'multiline':False]
['text':' In a scenario where we are sorting by metadata (for example if sortBy is','line_number':535,'multiline':False]
['text':' {text: {$meta: "textScore"}}) we cant use ["$text"] as the sortFields expression','line_number':536,'multiline':False]
['text':' since the evaluated argument wouldn't have the same metadata as the original','line_number':537,'multiline':False]
['text':' document. Instead we use [{$meta: "textScore"}] as the sortFields expression so the','line_number':538,'multiline':False]
['text':' sortFields array contains the data we need for sorting.','line_number':539,'multiline':False]
['text':' Construct argument expression. If given sortBy: {field1: 1, field2: 1} it will be shaped like','line_number':563,'multiline':False]
['text':' {output: <output expression>, sortFields0: "$field1", sortFields1: "$field2"}. This projects','line_number':564,'multiline':False]
['text':' out only the fields we need for sorting so we can use SortKeyComparator without copying the','line_number':565,'multiline':False]
['text':' entire document. This argument expression will be evaluated and become the input to','line_number':566,'multiline':False]
['text':' _processValue.','line_number':567,'multiline':False]
['text':' isRemovable ','line_number':580,'multiline':True]
['text':' isRemovable ','line_number':597,'multiline':True]
['text':' Upconvert to 'null' if the output field is missing.','line_number':609,'multiline':False]
['text':' In the case that _processValue() is getting called in the context of merging, a previous','line_number':615,'multiline':False]
['text':' _processValue has already generated the sortKey for us, so we don't need to regenerate it.','line_number':616,'multiline':False]
['text':' Only compare if we have 'n' elements.','line_number':630,'multiline':False]
['text':' Get an iterator to the element we want to compare against. In particular, $top will','line_number':632,'multiline':False]
['text':' insert items less than the max, and $bottom will insert greater than the min.','line_number':633,'multiline':False]
['text':' When the sort key produces a tie we keep the first value seen.','line_number':646,'multiline':False]
['text':' std::multimap::insert is guaranteed to put the element after any equal elements','line_number':670,'multiline':False]
['text':' already in the container. So lower_bound() / erase() will remove the oldest equal element,','line_number':671,'multiline':False]
['text':' which is what we want, to satisfy "remove() undoes add() when called in FIFO order".','line_number':672,'multiline':False]
['text':' In the simplest case, we are merging arrays. This happens when we are merging','line_number':681,'multiline':False]
['text':' results that were spilled to disk or on mongos.','line_number':682,'multiline':False]
['text':' In the more complicated case, we are merging objects of the form {output: <output','line_number':687,'multiline':False]
['text':' array>, sortFields: <...>}, where <output array> contains already generated <output','line_number':688,'multiline':False]
['text':' value, sort pattern part array> pairs. This happens when we have to merge on a','line_number':689,'multiline':False]
['text':' shard because we may need to spill to disk.','line_number':690,'multiline':False]
['text':' If this accumulator is removable there may be more than n elements in the map, so we must','line_number':713,'multiline':False]
['text':' skip elements that shouldn't be in the result.','line_number':714,'multiline':False]
['text':' Insert at most _n values into result.','line_number':720,'multiline':False]
['text':' This only occurs in a window function scenario, an accumulator will always have','line_number':740,'multiline':False]
['text':' at least one value processed.','line_number':741,'multiline':False]
['text':' Explicitly specify the following classes should generated and should live in this compilation','line_number':754,'multiline':False]
['text':' unit.','line_number':755,'multiline':False]
['text':' namespace mongo','line_number':761,'multiline':False]
