['text':'*
 *    Copyright (C) 2021-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' If this is parsed on mongos it should stay on mongos. If we're','line_number':74,'multiline':False]
['text':' not in a sharded cluster then it's okay to run on mongod.','line_number':75,'multiline':False]
['text':' The '$match' and 'DocumentSourceSingleDocumentTransformation' stages can swap with this','line_number':84,'multiline':False]
['text':' stage, allowing filtering and reshaping to occur earlier in the pipeline. For sharded cluster','line_number':85,'multiline':False]
['text':' pipelines, swaps can allow $match and 'DocumentSourceSingleDocumentTransformation' stages to','line_number':86,'multiline':False]
['text':' execute on the shards, providing inter-node parallelism and potentially reducing the amount','line_number':87,'multiline':False]
['text':' of data sent form each shard to the mongoS.','line_number':88,'multiline':False]
['text':' If we have already verified the resume token is present, return the next doc immediately.','line_number':96,'multiline':False]
['text':' If we are starting after an 'invalidate' and the invalidating command (e.g. collection drop)','line_number':103,'multiline':False]
['text':' occurred at the same clusterTime on more than one shard, then we may see multiple identical','line_number':104,'multiline':False]
['text':' resume tokens here. We swallow all of them until the resume status becomes kSurpassedToken.','line_number':105,'multiline':False]
['text':' Delegate to DocumentSourceChangeStreamCheckResumability to consume all events up to the','line_number':107,'multiline':False]
['text':' token. This will also set '_resumeStatus' to indicate whether we have seen or surpassed','line_number':108,'multiline':False]
['text':' the token.','line_number':109,'multiline':False]
['text':' If there are no more results, return EOF. We will continue checking for the resume token','line_number':112,'multiline':False]
['text':' the next time the getNext method is called. If we hit EOF, then we cannot have surpassed','line_number':113,'multiline':False]
['text':' the resume token on this iteration.','line_number':114,'multiline':False]
['text':' When we reach here, we have either found the resume token or surpassed it.','line_number':120,'multiline':False]
['text':' If the resume status is kFoundToken, record the fact that we have seen the token. When we','line_number':123,'multiline':False]
['text':' have surpassed the resume token, we will assert that we saw the token before doing so. We','line_number':124,'multiline':False]
['text':' cannot simply assert once and then assume we have surpassed the token, because in certain','line_number':125,'multiline':False]
['text':' cases we may see 1..N identical tokens and must swallow them all before proceeding.','line_number':126,'multiline':False]
['text':' Assert that before surpassing the resume token, we observed the token itself in the stream.','line_number':130,'multiline':False]
['text':' At this point, we have seen the token and swallowed it. Return the next event to the client.','line_number':136,'multiline':False]
['text':' This exception should always contain the client-provided resume token.','line_number':155,'multiline':False]
['text':' namespace mongo','line_number':180,'multiline':False]
