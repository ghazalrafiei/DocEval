['text':'*
 *    Copyright (C) 2019-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 * If 'pathOfInterest' or some path prefix of 'pathOfInterest' is renamed, returns the rename for
 * 'pathOfInterest', otherwise returns boost::none.  For example, if 'renamedPaths' is {"a", "b"},
 * and 'pathOfInterest' is "a.c", returns "b.c". Note that 'renamedPaths' must map names as they
 * exist at one fixed point in an aggregation pipeline to names as they exist at another fixed point
 * in the same pipeline (i.e. from path names as they exist before some particular aggregation
 * stage, to names as they appear after that stage).
 ','line_number':58,'multiline':True]
['text':' Found a rename - but it might be a rename of the prefix of the path, so we have to','line_number':83,'multiline':False]
['text':' add back on the suffix that was unchanged.','line_number':84,'multiline':False]
['text':'*
 * Computes and returns a map that contains a mapping from each path in 'pathsOfInterest' to its
 * rename, as determined by 'renamedPaths.' If a path was not renamed, assumes it is unmodified and
 * maps the path to itself.
 ','line_number':92,'multiline':True]
['text':' This path was not renamed, assume it was unchanged and map it to itself.','line_number':104,'multiline':False]
['text':' We have to use getSourceName() since DocumentSourceReplaceRoot is never materialized - it','line_number':120,'multiline':False]
['text':' uses DocumentSourceSingleDocumentTransformation.','line_number':121,'multiline':False]
['text':'*
 * Detects if 'replaceRootTransform' represents the nesting of a field path. If it does, returns
 * the name of that field path. For example, if 'replaceRootTransform' represents the transformation
 * associated with {$replaceWith: {nested: "$$ROOT"}} or {$replaceRoot: {newRoot: {nested:
 * "$$ROOT"}}}, returns "nested".
 ','line_number':130,'multiline':True]
['text':'*
 * Detects if 'replaceRootTransform' represents the unnesting of a field path. If it does, returns
 * the name of that field path. For example, if 'replaceRootTransform' represents the transformation
 * associated with {$replaceWith: "$x"} or {$replaceRoot: {newRoot: "$x"}}, returns "x".
 ','line_number':155,'multiline':True]
['text':'*
 * Looks for a pattern where the user temporarily nests the whole object, does some computation,
 * then unnests the object. Like so:
 * [{$replaceWith: {nested: "$$ROOT"}}, ..., {$replaceWith: "$nested"}].
 *
 * If this pattern is detected, returns an iterator to the 'second' replace root, whichever is later
 * according to the traversal order.
 ','line_number':170,'multiline':True]
['text':' Bail out early on dotted paths - we don't intend to deal with that complexity here,','line_number':194,'multiline':False]
['text':' though we could in the future.','line_number':195,'multiline':False]
['text':' Advance one to go past the first $replaceRoot we just looked at.','line_number':201,'multiline':False]
['text':' There was an additional condition which failed - bail out.','line_number':207,'multiline':False]
['text':' This stage is not a $replaceRoot - and it modifies our nested path','line_number':215,'multiline':False]
['text':' ('targetName') somehow.','line_number':216,'multiline':False]
['text':' This is not a $replaceRoot - but it doesn't impact the nested path, so we continue','line_number':219,'multiline':False]
['text':' searching for the unnester.','line_number':220,'multiline':False]
['text':' There was an additional condition which failed - bail out.','line_number':227,'multiline':False]
['text':' If we have a replaceRoot which is not the one we're looking for - then it modifies','line_number':232,'multiline':False]
['text':' the path we're trying to preserve. As a future enhancement, we maybe could recurse','line_number':233,'multiline':False]
['text':' here.','line_number':234,'multiline':False]
['text':'*
 * Computes and returns a rename mapping for 'pathsOfInterest' over multiple aggregation
 * pipeline stages. The range of pipeline stages we consider renames over is represented by the
 * iterators 'start' and 'end'.
 *
 * If both 'start' and 'end' are reverse iterators, then 'start' should come after 'end' in the
 * pipeline, and 'traversalDir' should be "kBackward," 'pathsOfInterest' should be valid path names
 * after stage 'start.'
 *
 * If both 'start' and 'end' are forwards iterators, then 'start' should come before 'end' in the
 * pipeline, 'traversalDir' should be "kForward," and 'pathsOfInterest' should be valid path names
 * before stage 'start.'
 *
 * This function will compute an iterator pointing to the "last" stage (farthest in the given
 * direction, not included) which preserves 'pathsOfInterest' allowing renames, and returns that
 * iterator and a mapping from the given names of 'pathsOfInterest' to their names as they were
 * directly "before" (just previous to, according to the direction) the result iterator. If all
 * stages preserve the paths of interest, returns 'end.'
 *
 * An optional 'additionalStageValidatorCallback' function can be provided to short-circuit this
 * process and return an iterator to the first stage which either (a) does not preserve
 * 'pathsOfInterest,' as before, or (b) does not meet this callback function's criteria.
 *
 * This should only be used internally; callers who need to track path renames through an
 * aggregation pipeline should use one of the publically exposed options available in the header.
 ','line_number':241,'multiline':True]
['text':' The keys to this map will always be the original names of 'pathsOfInterest'. The values','line_number':275,'multiline':False]
['text':' will be updated as we loop through the pipeline's stages to always be the most up-to-date','line_number':276,'multiline':False]
['text':' name we know of for that path.','line_number':277,'multiline':False]
['text':' There was an additional condition which failed - bail out.','line_number':285,'multiline':False]
['text':' We've just detected a pattern where the user temporarily nests the whole','line_number':293,'multiline':False]
['text':' object, does some computation, then unnests the object. Like so:','line_number':294,'multiline':False]
['text':' [{$replaceWith: {nested: "$$ROOT"}}, ..., {$replaceWith: "$nested"}].','line_number':295,'multiline':False]
['text':' This analysis makes sure that the middle stages don't modify 'nested' or','line_number':296,'multiline':False]
['text':' whatever the nesting field path is and the additional callback function's','line_number':297,'multiline':False]
['text':' criteria is met. In this case, we can safely skip over all intervening stages and','line_number':298,'multiline':False]
['text':' continue on our way.','line_number':299,'multiline':False]
['text':''pathsOfInterest' always holds the current names of the paths we're interested in, so','line_number':305,'multiline':False]
['text':' it needs to be updated after each stage.','line_number':306,'multiline':False]
['text':' The paths were not preserved to the very end.','line_number':325,'multiline':False]
['text':' namespace','line_number':330,'multiline':False]
['text':' The modified dependencies is *almost* the set difference 'dependencies' - 'preservedPaths',','line_number':336,'multiline':False]
['text':' except that if p in 'preservedPaths' is a "path prefix" of d in 'dependencies', then 'd'','line_number':337,'multiline':False]
['text':' should not be included in the modified dependencies.','line_number':338,'multiline':False]
['text':' Because a path is preserved if the object it points to is preserved, if a prefix to a','line_number':342,'multiline':False]
['text':' path is preserved, then the path itself must be preserved. So we search for any prefixes','line_number':343,'multiline':False]
['text':' of 'dependency' as well. 'preservedPaths' is an *ordered* set, so we only have to search','line_number':344,'multiline':False]
['text':' the range ['firstField', 'dependency'] to find any prefixes of 'dependency'.','line_number':345,'multiline':False]
['text':' Any overlap of the path means the path of interest is not preserved. For','line_number':370,'multiline':False]
['text':' example, if the path of interest is "a.b", then a modified path of "a",','line_number':371,'multiline':False]
['text':' "a.b", or "a.b.c" would all signal that "a.b" is not preserved.','line_number':372,'multiline':False]
['text':' None of the paths of interest were modified, construct the result map, mapping','line_number':377,'multiline':False]
['text':' the names after this stage to the names before this stage.','line_number':378,'multiline':False]
['text':' For the purposes of checking which paths are modified, consider renames to','line_number':387,'multiline':False]
['text':' preserve the path. We'll circle back later to figure out the new name if','line_number':388,'multiline':False]
['text':' appropriate. If we are going forward, we want to consider the name of the path','line_number':389,'multiline':False]
['text':' before 'stage'; otherwise, we want to consider the name as it exists after','line_number':390,'multiline':False]
['text':' 'stage'.','line_number':391,'multiline':False]
['text':' namespace mongo::semantic_analysis','line_number':436,'multiline':False]
