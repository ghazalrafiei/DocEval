['text':'*
 *    Copyright (C) 2021-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 * A template type which resolves to 'const T*' if 'IsConst' argument is 'true', and to 'T*'
 * otherwise.
 ','line_number':40,'multiline':True]
['text':' The following types and constexpr values are used to determine if a Walker has a given member','line_number':47,'multiline':False]
['text':' function at compile-time.','line_number':48,'multiline':False]
['text':'*
 * PreVisit provides the compiler with a type for a preVisit member function.
 ','line_number':50,'multiline':True]
['text':'*
 * hasVoidPreVisit is a template variable indicating whether such a void-returning member function
 * exists for a given Walker type when called on a pointer to our Node type.
 ','line_number':55,'multiline':True]
['text':'*
 * hasPtrPreVisit is a template variable indicating whether such a pointer-returning member
 * function exists for a given Walker type when called on a pointer to our Node type.
 ','line_number':62,'multiline':True]
['text':'*
 * InVisit provides the compiler with a type for an inVisit member function.
 ','line_number':70,'multiline':True]
['text':'*
 * hasBasicInVisit is a template variable indicating whether such a member function exists for a
 * given Walker type when called on a pointer to our Node type.
 ','line_number':75,'multiline':True]
['text':'*
 * hasCountingInVisit is a template variable indicating whether such a member function exists for a
 * given Walker type when called on a pointer to our Node type.
 ','line_number':82,'multiline':True]
['text':'*
 * PostVisit provides the compiler with a type for a postVisit member function.
 ','line_number':90,'multiline':True]
['text':'*
 * hasVoidPostVisit is a template variable indicating whether such a void-returning member function
 * exists for a given Walker type when called on a pointer to our Node type.
 ','line_number':95,'multiline':True]
['text':'*
 * hasVoidPostVisit is a template variable indicating whether such a pointer-returning member
 * function exists for a given Walker type when called on a pointer to our Node type.
 ','line_number':102,'multiline':True]
['text':'*
 * hasReturningVisit is a template variable indicating whether there is a pointer-returning member
 * function (pre or post) that exists for a given Walker type when called on a pointer to our
 * Node type.
 ','line_number':110,'multiline':True]
['text':'*
 * Provided with a Walker and a Node, walk() calls each of the following if they exist:
 * * walker.preVisit() once before walking to each child.
 * * walker.inVisit() between walking to each child. It is called multiple times, once between each
 *   pair of children. walker.inVisit() is skipped if the Node has fewer than two children.
 * * walker.postVisit() once after walking to each child.
 * Each of the Node's child Nodes is recursively walked and the same three methods are called for
 * it. Although each of the methods are individually optional, at least one of them must exist.
 *
 * If the caller doesn't intend to modify the tree, then the type of Node should be 'const'.
 *
 * If Node is not const, preVisit() and postVisit() may return a pointer to a Node. If either does,
 * walk() will replace the current Node with the return value. If no change is needed during a
 * particular call, preVisit() and postVisit() may return null. walk() returns a unique_ptr
 * containing a new root node, if it is modified by a value returning preVisit() or postVisit(),
 * nullptr if it is not modified, or void if modification is impossible for the given Walker.
 ','line_number':119,'multiline':True]
['text':' Calls walk on a child node. Then replaces that node if walk returns a non-null value.','line_number':156,'multiline':False]
['text':' InVisit needs to be called between every two nodes which requires more complicated','line_number':175,'multiline':False]
['text':' branching logic. InVisit is forbidden from replacing its node through the return value','line_number':176,'multiline':False]
['text':' and must return void since it would break our iteration and be confusing to replace a','line_number':177,'multiline':False]
['text':' node while only a portion of its children have been walked.','line_number':178,'multiline':False]
['text':' If the signature of InVisit includes a count, maintaing it while walking and pass it to','line_number':193,'multiline':False]
['text':' the function.','line_number':194,'multiline':False]
['text':' namespace mongo::expression_walker','line_number':222,'multiline':False]
