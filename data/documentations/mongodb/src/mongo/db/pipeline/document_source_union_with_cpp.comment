['text':'*
 *    Copyright (C) 2019-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' Only call optimize() here if we actually have a pipeline to resolve in the view definition.','line_number':90,'multiline':False]
['text':' namespace','line_number':101,'multiline':False]
['text':' If this pipeline is being run as part of explain, then cache a copy to use later during','line_number':112,'multiline':False]
['text':' serialization.','line_number':113,'multiline':False]
['text':' TODO SERVER-59628 replace with constraints check','line_number':152,'multiline':False]
['text':' At this point the ExpressionContext already has info about any resolved namespaces, so there','line_number':161,'multiline':False]
['text':' is no need to resolve them again when creating the clone.','line_number':162,'multiline':False]
['text':' If no collection specified, it must have $documents as first field in pipeline.','line_number':184,'multiline':False]
['text':' Recursively lite parse the nested pipeline, if one exists.','line_number':189,'multiline':False]
['text':' If no pipeline is specified, then assume that we're reading directly from the collection.','line_number':205,'multiline':False]
['text':' Otherwise check whether the pipeline starts with an "initial source" indicating that we don't','line_number':206,'multiline':False]
['text':' require the "find" privilege.','line_number':207,'multiline':False]
['text':' Add the sub-pipeline privileges, if one was specified.','line_number':214,'multiline':False]
['text':' if no collection specified, it must have $documents as first field in pipeline','line_number':242,'multiline':False]
['text':' We must have already been disposed, so we're finished.','line_number':254,'multiline':False]
['text':' All documents from the base collection have been returned, switch to iterating the sub-','line_number':264,'multiline':False]
['text':' pipeline by falling through below.','line_number':265,'multiline':False]
['text':' The $unionWith stage takes responsibility for disposing of its Pipeline. When the outer','line_number':285,'multiline':False]
['text':' Pipeline that contains the $unionWith is disposed of, it will propagate dispose() to its','line_number':286,'multiline':False]
['text':' subpipeline.','line_number':287,'multiline':False]
['text':' Record the plan summary stats after $unionWith operation is done.','line_number':294,'multiline':False]
['text':' The use of these logging macros is done in separate NOINLINE functions to reduce the stack space','line_number':301,'multiline':False]
['text':' used on the hot getNext() path. This is done to avoid stack overflows.','line_number':302,'multiline':False]
['text':' Apply the same rewrite to the cached pipeline if available.','line_number':326,'multiline':False]
['text':' There are several different possible states depending on the explain verbosity as well as','line_number':373,'multiline':False]
['text':' the other stages in the pipeline:','line_number':374,'multiline':False]
['text':'  * If verbosity is queryPlanner, then the sub-pipeline should be untouched and we can','line_number':375,'multiline':False]
['text':'  explain it directly.','line_number':376,'multiline':False]
['text':'  * If verbosity is execStats or allPlansExecution, then whether or not to explain the','line_number':377,'multiline':False]
['text':'  sub-pipeline depends on if we've started reading from it. For instance, there could be a','line_number':378,'multiline':False]
['text':'  $limit stage after the $unionWith which results in only reading from the base collection','line_number':379,'multiline':False]
['text':'  branch and not the sub-pipeline.','line_number':380,'multiline':False]
['text':' We've either exhausted the sub-pipeline or at least started iterating it. Use the','line_number':386,'multiline':False]
['text':' cached pipeline to get the explain output since the '_pipeline' may have been','line_number':387,'multiline':False]
['text':' modified for any optimizations or pushdowns into the initial $cursor stage.','line_number':388,'multiline':False]
['text':' The plan does not require reading from the sub-pipeline, so just include the','line_number':391,'multiline':False]
['text':' serialization in the explain output.','line_number':392,'multiline':False]
['text':' We expect this to be an explanation of a pipeline -- there should only be one field.','line_number':407,'multiline':False]
['text':' Query shapes must reflect the original, unresolved and unoptimized pipeline, so we need a','line_number':416,'multiline':False]
['text':' special case here if we are serializing the stage for that purpose. Otherwise, we should','line_number':417,'multiline':False]
['text':' return the current (optimized) pipeline for introspection with explain, etc.','line_number':418,'multiline':False]
['text':' Extracting dependencies for the outer collection. Although, this method walks the inner pipeline,','line_number':435,'multiline':False]
['text':' the field dependencies are not collected - only variable dependencies are.','line_number':436,'multiline':False]
['text':' We only need to know what variable dependencies exist in the subpipeline. So without','line_number':442,'multiline':False]
['text':' knowledge of what metadata is in fact unavailable, we "lie" and say that all metadata','line_number':443,'multiline':False]
['text':' is available to avoid tripping any assertions.','line_number':444,'multiline':False]
['text':' Get the subpipeline dependencies.','line_number':446,'multiline':False]
['text':' Add sub-pipeline variable dependencies. Do not add SEARCH_META as a dependency, since it is','line_number':455,'multiline':False]
['text':' scoped to one pipeline.','line_number':456,'multiline':False]
['text':' We have a pipeline we're going to be executing across multiple calls to getNext(), so we','line_number':466,'multiline':False]
['text':' use Pipeline::detachFromOperationContext() to take care of updating the Pipeline's','line_number':467,'multiline':False]
['text':' ExpressionContext.','line_number':468,'multiline':False]
['text':' We have a pipeline we're going to be executing across multiple calls to getNext(), so we','line_number':475,'multiline':False]
['text':' use Pipeline::reattachToOperationContext() to take care of updating the Pipeline's','line_number':476,'multiline':False]
['text':' ExpressionContext.','line_number':477,'multiline':False]
['text':' namespace mongo','line_number':494,'multiline':False]
