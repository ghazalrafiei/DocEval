['text':'*
 *    Copyright (C) 2023-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 * This class represents a name expression in the aggregation pipeline. It can be either a string
 * literal or a pipeline expression that evaluates to a string in the context of input document. For
 * example,
 *
 * {db: "test"} is a string literal.
 * {db: "$customer"} is a pipeline expression.
 * {coll: {$concat: ["$customer.department", "_", "$customer.name"]}} is a pipeline expression.
 *
 * The name expression is considered a string literal only when the value is a string and does not
 * start with '$' sign which is a path expression.
 *
 * This class can be used to represent the name of a collection or a database in the aggregation
 * pipeline when the name is not known until runtime but it can also be used to represent any entity
 * name in the pipeline that may be known at runtime.
 ','line_number':43,'multiline':True]
['text':'*
     * Serializes into BSON object.
     ','line_number':80,'multiline':True]
['text':'
     * These methods support IDL parsing of name expressions.
     ','line_number':85,'multiline':True]
['text':'*
     * Returns true if the name expression is a string literal.
     ','line_number':91,'multiline':True]
['text':'*
     * Returns the string literal if the name expression is a string literal.
     ','line_number':98,'multiline':True]
['text':'*
     * Evaluates the name expression in the context of the input document and returns the name as a
     * string.
     *
     * If the evaluation result is a non-string value, an exception is thrown. If the expression is
     * invalid, an exception is thrown.
     ','line_number':107,'multiline':True]
['text':' To serialize back to BSON.','line_number':119,'multiline':False]
['text':' To make the IDL compiler happy. Sometimes, it cannot find the serializeToBSON() method.','line_number':127,'multiline':False]
['text':' namespace mongo','line_number':131,'multiline':False]
