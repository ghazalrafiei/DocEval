['text':'*
 *    Copyright (C) 2019-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 * Manipulates the state of the OperationContext so that while this object is in scope, reads and
 * writes will use a local read concern and see the latest version of the data. It will also reset
 * ignore_prepared on the recovery unit so that any reads or writes will block on a conflict with a
 * prepared transaction. Resets the OperationContext back to its original state upon destruction.
 ','line_number':47,'multiline':True]
['text':' Storage engine operations require at least Global IS.','line_number':66,'multiline':False]
['text':'*
 * This is a base abstract class for all stages performing a write operation into an output
 * collection. The writes are organized in batches in which elements are objects of the templated
 * type 'B'. A subclass must override the following methods to be able to write into the output
 * collection:
 *
 *    - 'makeBatchObject()' - creates an object of type 'B' from the given 'Document', which is,
 *       essentially, a result of the input source's 'getNext()' .
 *    - 'flush()' - writes the batch into the output collection.
 *    - 'makeBatchedWriteRequest()' - initializes the request object for writing a batch to
 *       the output collection.
 *
 * Two other virtual methods exist which a subclass may override: 'initialize()' and 'finalize()',
 * which are called before the first element is read from the input source, and after the last one
 * has been read, respectively.
 ','line_number':85,'multiline':True]
['text':' For purposes of tracking which fields come from where, the writer stage does not modify','line_number':120,'multiline':False]
['text':' any fields by default.','line_number':121,'multiline':False]
['text':'*
     * Prepares the stage to be able to write incoming batches.
     ','line_number':138,'multiline':True]
['text':'*
     * Finalize the output collection, called when there are no more documents to write.
     ','line_number':143,'multiline':True]
['text':'*
     * Writes the documents in 'batch' to the output namespace via 'bcr'.
     ','line_number':148,'multiline':True]
['text':'*
     * Estimates the size of the header of a batch write (that is, the size of the write command
     * minus the size of write statements themselves).
     ','line_number':153,'multiline':True]
['text':'*
     * Constructs and configures a BatchedCommandRequest for performing a batch write.
     ','line_number':170,'multiline':True]
['text':'*
     * Creates a batch object from the given document and returns it to the caller along with the
     * object size.
     ','line_number':175,'multiline':True]
['text':'*
     * A subclass may override this method to enable a fail point right after a next input element
     * has been retrieved, but not processed yet.
     ','line_number':181,'multiline':True]
['text':' An interface that is used to estimate the size of each write operation.','line_number':187,'multiline':False]
['text':' Ignore writes and exhaust input if we are in explain mode.','line_number':202,'multiline':False]
['text':' Ensure that the client's operationTime reflects the latest write even if the command','line_number':210,'multiline':False]
['text':' fails.','line_number':211,'multiline':False]
['text':' While most metadata attached to a command is limited to less than a KB, Impersonation','line_number':220,'multiline':False]
['text':' metadata may grow to an arbitrary size.','line_number':221,'multiline':False]
['text':'','line_number':222,'multiline':False]
['text':' Ask the active Client how much impersonation metadata we'll use for it, add in our own','line_number':223,'multiline':False]
['text':' estimate of write header size, and assume that the rest can fit in the space reserved by','line_number':224,'multiline':False]
['text':' BSONObjMaxUserSize's overhead plus the value from the server parameter:','line_number':225,'multiline':False]
['text':' internalQueryDocumentSourceWriterBatchExtraReservedBytes.','line_number':226,'multiline':False]
['text':' We consumed all advances above.','line_number':269,'multiline':False]
['text':' Propagate the pause.','line_number':272,'multiline':False]
['text':' namespace mongo','line_number':284,'multiline':False]
