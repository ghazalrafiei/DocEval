['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' IWYU pragma: no_include "boost/container/detail/std_fwd.hpp"','line_number':32,'multiline':False]
['text':' IWYU pragma: keep','line_number':44,'multiline':False]
['text':' IWYU pragma: keep','line_number':57,'multiline':False]
['text':'*
 * Creates an expression given by 'expressionName' and evaluates it using
 * 'operands' as inputs, returning the result.
 ','line_number':82,'multiline':True]
['text':'*
 * Takes the name of an expression as its first argument and a list of pairs of arguments and
 * expected results as its second argument, and asserts that for the given expression the arguments
 * evaluate to the expected results.
 ','line_number':96,'multiline':True]
['text':'* Convert BSONObj to a BSONObj with our $const wrappings. ','line_number':116,'multiline':True]
['text':' arrays within arrays are treated as constant values by the real','line_number':124,'multiline':False]
['text':' parser','line_number':125,'multiline':False]
['text':'* Convert Value to a wrapped BSONObj with an empty string field name. ','line_number':137,'multiline':True]
['text':'* Convert Expression to BSON. ','line_number':144,'multiline':True]
['text':'* Convert Document to BSON. ','line_number':152,'multiline':True]
['text':'* Create a Document from a BSONObj. ','line_number':157,'multiline':True]
['text':'* Create a Value from a BSONObj. ','line_number':166,'multiline':True]
['text':'* Asserts that the Expression parsed from 'spec' returns a BSONArray and is equal to 'expected'.
 ','line_number':172,'multiline':True]
['text':'*
 * Given 'parseFn', parses and evaluates 'spec' and verifies that the result is equal to
 * 'expected'. Useful when the parser for an expression is unavailable in certain contexts (for
 * instance, when evaluating an expression that's guarded by a feature flag that's off by default).
 ','line_number':183,'multiline':True]
['text':'*
 * Generates a random double with a variable number of decimal places between 1 and 15.
 ','line_number':199,'multiline':True]
['text':' Create a random number generator engine.','line_number':203,'multiline':False]
['text':' Create a distribution and generate a double between -1 and 1.','line_number':207,'multiline':False]
['text':' Multiply the random number by the factor to set the decimal places','line_number':215,'multiline':False]
['text':'*
 * Verifies that a double can correctly convert to a string and round-trip back to the original
 * double.
 ','line_number':220,'multiline':True]
['text':' Verify the conversion round-trips correctly.','line_number':231,'multiline':False]
['text':' ------------------------- ExpressionArrayToObject -------------------------- ','line_number':235,'multiline':True]
['text':' ------------------------ ExpressionRange --------------------------- ','line_number':271,'multiline':True]
['text':' ------------------------ ExpressionReverseArray -------------------- ','line_number':306,'multiline':True]
['text':' ------------------------ ExpressionSortArray -------------------- ','line_number':328,'multiline':True]
['text':' ------------------------- Old-style tests -------------------------- ','line_number':401,'multiline':True]
['text':'* $add with a NULL Document pointer, as called by ExpressionNary::optimize().
 ','line_number':420,'multiline':True]
['text':'* $add without operands. ','line_number':432,'multiline':True]
['text':'* String type unsupported. ','line_number':440,'multiline':True]
['text':'* Bool type unsupported. ','line_number':451,'multiline':True]
['text':'* Single int argument. ','line_number':475,'multiline':True]
['text':'* Single long argument. ','line_number':482,'multiline':True]
['text':'* Single double argument. ','line_number':489,'multiline':True]
['text':'* Single Date argument. ','line_number':496,'multiline':True]
['text':'* Single null argument. ','line_number':503,'multiline':True]
['text':'* Single undefined argument. ','line_number':513,'multiline':True]
['text':' Now add the operands in the reverse direction.','line_number':528,'multiline':False]
['text':'* Add two ints. ','line_number':548,'multiline':True]
['text':'* Adding two large ints produces a long, not an overflowed int. ','line_number':561,'multiline':True]
['text':'* Adding an int and a long produces a long. ','line_number':574,'multiline':True]
['text':'* Adding an int and a long produces a double. ','line_number':587,'multiline':True]
['text':' When the result cannot be represented in a NumberLong, a NumberDouble is returned.','line_number':596,'multiline':False]
['text':'* Adding an int and a double produces a double. ','line_number':604,'multiline':True]
['text':'* Adding an int and a Date produces a Date. ','line_number':617,'multiline':True]
['text':'* Adding a long and a double produces a double. ','line_number':630,'multiline':True]
['text':'* Adding a long and a double does not overflow. ','line_number':643,'multiline':True]
['text':'* Adding an int and null. ','line_number':657,'multiline':True]
['text':'* Adding a long and undefined. ','line_number':670,'multiline':True]
['text':' namespace Add','line_number':683,'multiline':False]
['text':'* Nested expression coerced to true. ','line_number':687,'multiline':True]
['text':'* Nested expression coerced to false. ','line_number':698,'multiline':True]
['text':'* Dependencies forwarded from nested expression. ','line_number':709,'multiline':True]
['text':'* Output to BSONObj. ','line_number':725,'multiline':True]
['text':' serialized as $and because CoerceToBool isn't an ExpressionNary','line_number':733,'multiline':False]
['text':'* Output to BSONArray. ','line_number':743,'multiline':True]
['text':' serialized as $and because CoerceToBool isn't an ExpressionNary','line_number':751,'multiline':False]
['text':' TODO Test optimize(), difficult because a CoerceToBool cannot be output as','line_number':763,'multiline':False]
['text':' BSON.','line_number':764,'multiline':False]
['text':' namespace CoerceToBool','line_number':766,'multiline':False]
['text':'* Create an ExpressionConstant from a Value. ','line_number':770,'multiline':True]
['text':'* Create an ExpressionConstant from a BsonElement. ','line_number':781,'multiline':True]
['text':'* No optimization is performed. ','line_number':797,'multiline':True]
['text':' An attempt to optimize returns the Expression itself.','line_number':803,'multiline':False]
['text':'* No dependencies. ','line_number':808,'multiline':True]
['text':'* Output to BSONObj. ','line_number':822,'multiline':True]
['text':' The constant is replaced with a $ expression.','line_number':828,'multiline':False]
['text':'* Output to BSONArray. ','line_number':838,'multiline':True]
['text':' The constant is copied out as is.','line_number':844,'multiline':False]
['text':' Test that a constant is replaced.','line_number':876,'multiline':False]
['text':' NOLINT','line_number':879,'multiline':False]
['text':' NOLINT','line_number':886,'multiline':False]
['text':' namespace Constant','line_number':891,'multiline':False]
['text':' $avg ignores non-numeric inputs.','line_number':895,'multiline':False]
['text':' $avg always returns a double.','line_number':897,'multiline':False]
['text':' $avg returns null when no arguments are provided.','line_number':899,'multiline':False]
['text':' $firstN','line_number':906,'multiline':False]
['text':' $lastN','line_number':922,'multiline':False]
['text':' $max treats non-numeric inputs as valid arguments.','line_number':940,'multiline':False]
['text':' $max always preserves the type of the result.','line_number':943,'multiline':False]
['text':' $max returns null when no arguments are provided.','line_number':945,'multiline':False]
['text':' $min treats non-numeric inputs as valid arguments.','line_number':951,'multiline':False]
['text':' $min always preserves the type of the result.','line_number':955,'multiline':False]
['text':' $min returns null when no arguments are provided.','line_number':957,'multiline':False]
['text':' $maxN','line_number':968,'multiline':False]
['text':' $minN','line_number':983,'multiline':False]
['text':' $sum ignores non-numeric inputs.','line_number':996,'multiline':False]
['text':' If any argument is a double, $sum returns a double','line_number':998,'multiline':False]
['text':' If no arguments are doubles and an argument is a long, $sum returns a long','line_number':1000,'multiline':False]
['text':' $sum returns 0 when no arguments are provided.','line_number':1002,'multiline':False]
['text':' $stdDevPop ignores non-numeric inputs.','line_number':1008,'multiline':False]
['text':' $stdDevPop always returns a double.','line_number':1010,'multiline':False]
['text':' $stdDevPop returns null when no arguments are provided.','line_number':1012,'multiline':False]
['text':' $stdDevSamp ignores non-numeric inputs.','line_number':1019,'multiline':False]
['text':' $stdDevSamp always returns a double.','line_number':1021,'multiline':False]
['text':' $stdDevSamp returns null when no arguments are provided.','line_number':1023,'multiline':False]
['text':'merging','line_number':1033,'multiline':True]
['text':'toBeMerged','line_number':1034,'multiline':True]
['text':'merging','line_number':1035,'multiline':True]
['text':'toBeMerged','line_number':1038,'multiline':True]
['text':' $pow may sometimes use a loop to compute a^b, so it's important to check','line_number':1055,'multiline':False]
['text':' that the loop doesn't hang if a large exponent is provided.','line_number':1056,'multiline':False]
['text':' $pow may sometimes use a loop to compute a^b, so it's important to check','line_number':1092,'multiline':False]
['text':' that the loop doesn't hang if a large exponent is provided.','line_number':1093,'multiline':False]
['text':' Use a value large enough that will make the test hang for a','line_number':1122,'multiline':False]
['text':' considerable amount of time if a loop is used to compute the','line_number':1123,'multiline':False]
['text':' answer.','line_number':1124,'multiline':False]
['text':' ExpressionArray of constant values should optimize to ExpressionConsant.','line_number':1145,'multiline':False]
['text':' ExpressionArray with not all constant values should not optimize to ExpressionConstant.','line_number':1153,'multiline':False]
['text':' This test was designed to provide coverage for SERVER-70190, a bug in which optimizing a $switch','line_number':1325,'multiline':False]
['text':' expression could leave its children vector in a bad state. By walking the tree after optimizing','line_number':1326,'multiline':False]
['text':' we make sure that the expected children are found.','line_number':1327,'multiline':False]
['text':' Make sure that the expression tree appears as expected when the children are traversed using','line_number':1361,'multiline':False]
['text':' a for-each loop.','line_number':1362,'multiline':False]
['text':' Children 0 and 2 are field path expressions, whereas 1, 3, and 4 are constants.','line_number':1366,'multiline':False]
['text':' We should have seen 5 children total, 3 of which are constants.','line_number':1376,'multiline':False]
['text':' ExpressionArray with constant values and sub expression that evaluates to constant should','line_number':1386,'multiline':False]
['text':' optimize to Expression constant.','line_number':1387,'multiline':False]
['text':' 2, 1, 1','line_number':1403,'multiline':False]
['text':' Value we are searching for = 2.','line_number':1406,'multiline':False]
['text':' Start index = 1.','line_number':1408,'multiline':False]
['text':' End index = 4.','line_number':1410,'multiline':False]
['text':' Nullish input array should become a Value(BSONNULL).','line_number':1434,'multiline':False]
['text':' Search for $x.','line_number':1445,'multiline':False]
['text':' Should evaluate to -1 if not found.','line_number':1466,'multiline':False]
['text':' Search for 4 between 3 and 5.','line_number':1486,'multiline':False]
['text':' Should evaluate to -1 if not found in range.','line_number':1493,'multiline':False]
['text':' Search for 4 between 3 and 5.','line_number':1504,'multiline':False]
['text':' Duplicate Values in a range.','line_number':1511,'multiline':False]
['text':' Search for 2 between 4 and 6.','line_number':1514,'multiline':False]
['text':' Should evaluate to 4.','line_number':1518,'multiline':False]
['text':'*
 * Parses the object given by 'specification', with the options given by 'parseContextOptions'.
 ','line_number':1592,'multiline':True]
['text':' Should return an empty ExpressionObject.','line_number':1605,'multiline':False]
['text':' Should return an ExpressionAnd.','line_number':1615,'multiline':False]
['text':' namespace Object','line_number':1620,'multiline':False]
['text':'*
 * Parses an expression from the given BSON specification.
 ','line_number':1626,'multiline':True]
['text':' namespace Expression','line_number':1731,'multiline':False]
['text':'*
 * Parses an operand from the given BSON specification. The field name is ignored, since it is
 * assumed to have come from an array, or to have been the only argument to an expression, in which
 * case the field name would be the name of the expression.
 ','line_number':1737,'multiline':True]
['text':' namespace Operand','line_number':1793,'multiline':False]
['text':' namespace Parse','line_number':1795,'multiline':False]
['text':' TODO test optimize here','line_number':1837,'multiline':False]
['text':' NOTE: parse and evaluatation failures are treated the','line_number':1848,'multiline':False]
['text':' same','line_number':1849,'multiline':False]
['text':' namespace Set','line_number':2086,'multiline':False]
['text':' namespace Strcasecmp','line_number':2182,'multiline':False]
['text':' namespace StrLenBytes','line_number':2202,'multiline':False]
['text':' namespace StrLenCP','line_number':2230,'multiline':False]
['text':'* Retrieve a full string containing a null character. ','line_number':2260,'multiline':True]
['text':'* Retrieve a substring beginning with a null character. ','line_number':2276,'multiline':True]
['text':'* Retrieve a substring ending with a null character. ','line_number':2292,'multiline':True]
['text':'* Drop a beginning null character. ','line_number':2308,'multiline':True]
['text':'* Drop an ending null character. ','line_number':2324,'multiline':True]
['text':'* When length is negative, the remainder of the string should be returned. ','line_number':2340,'multiline':True]
['text':' namespace SubstrBytes','line_number':2370,'multiline':False]
['text':' namespace SubstrCP','line_number':2448,'multiline':False]
['text':' namespace Type','line_number':2541,'multiline':False]
['text':' namespace IsNumber','line_number':2637,'multiline':False]
['text':' namespace BuiltinRemoveVariable','line_number':2679,'multiline':False]
['text':' ------------------------- ExpressionMergeObjects -------------------------- ','line_number':2681,'multiline':True]
['text':' namespace ExpressionMergeObjects','line_number':2754,'multiline':False]
['text':'* String beginning with a null character. ','line_number':2783,'multiline':True]
['text':'* String containing a null character. ','line_number':2793,'multiline':True]
['text':'* String ending with a null character. ','line_number':2803,'multiline':True]
['text':' namespace ToLower','line_number':2813,'multiline':False]
['text':'* String beginning with a null character. ','line_number':2841,'multiline':True]
['text':'* String containing a null character. ','line_number':2851,'multiline':True]
['text':'* String ending with a null character. ','line_number':2861,'multiline':True]
['text':' namespace ToUpper','line_number':2871,'multiline':False]
['text':' TODO test optimize here','line_number':2900,'multiline':False]
['text':' NOTE: parse and evaluatation failures are treated the','line_number':2911,'multiline':False]
['text':' same','line_number':2912,'multiline':False]
['text':' namespace AllAnyElements','line_number':2976,'multiline':False]
['text':' namespace GetComputedPathsTest','line_number':3149,'multiline':False]
['text':' isSingleElementSortKey = ','line_number':3277,'multiline':True]
['text':' namespace expression_meta_test','line_number':3329,'multiline':False]
['text':' For $regexFindAll.','line_number':3350,'multiline':False]
['text':' For $regexFind.','line_number':3358,'multiline':False]
['text':' For $regexMatch.','line_number':3367,'multiline':False]
['text':' Append an invalid UTF-8 character.','line_number':3445,'multiline':False]
['text':' Verify that PCRE will error during execution if input is not a valid UTF-8.','line_number':3450,'multiline':False]
['text':' Append an invalid UTF-8 character.','line_number':3457,'multiline':False]
['text':' Verify that PCRE will error if REGEX is not a valid UTF-8.','line_number':3460,'multiline':False]
['text':' namespace ExpressionRegexTest','line_number':3465,'multiline':False]
['text':' $$NOW is the Date type.','line_number':3563,'multiline':False]
['text':' $$CLUSTER_TIME is the timestamp type.','line_number':3569,'multiline':False]
['text':' Multiple references to $$NOW must return the same value.','line_number':3577,'multiline':False]
['text':' Same is true for the $$CLUSTER_TIME.','line_number':3585,'multiline':False]
['text':' namespace NowAndClusterTime','line_number':3596,'multiline':False]
['text':' For continuous uniform distribution [0.0, 1.0] the variance is 1/12.','line_number':3610,'multiline':False]
['text':' Test certainty within 10 standard deviations.','line_number':3611,'multiline':False]
['text':' We generate a new random value on every call to evaluate().','line_number':3621,'multiline':False]
['text':' namespace ExpressionToHashedIndexKeyTest','line_number':3722,'multiline':False]
['text':' The following subtractions should not fit into a long long data type.','line_number':3729,'multiline':False]
['text':' minLong = -1 - maxLong. The below subtraction should fit into long long data type.','line_number':3742,'multiline':False]
['text':' The minLong's negation does not fit into long long, hence it should be converted to double','line_number':3749,'multiline':False]
['text':' data type.','line_number':3750,'multiline':False]
['text':' NOLINT','line_number':3763,'multiline':False]
['text':' NOLINT','line_number':3783,'multiline':False]
['text':' NOLINT','line_number':3803,'multiline':False]
['text':' NOLINT','line_number':3820,'multiline':False]
['text':' NOLINT','line_number':3836,'multiline':False]
['text':' NOLINT','line_number':3857,'multiline':False]
['text':' NOLINT','line_number':3879,'multiline':False]
['text':' NOLINT','line_number':3902,'multiline':False]
['text':' NOLINT','line_number':3922,'multiline':False]
['text':' NOLINT','line_number':3944,'multiline':False]
['text':' NOLINT','line_number':3965,'multiline':False]
['text':' NOLINT','line_number':3987,'multiline':False]
['text':' NOLINT','line_number':4009,'multiline':False]
['text':' NOLINT','line_number':4030,'multiline':False]
['text':' NOLINT','line_number':4053,'multiline':False]
['text':' NOLINT','line_number':4082,'multiline':False]
['text':' NOLINT','line_number':4112,'multiline':False]
['text':' NOLINT','line_number':4134,'multiline':False]
['text':' NOLINT','line_number':4149,'multiline':False]
['text':' NOLINT','line_number':4163,'multiline':False]
['text':' NOLINT','line_number':4187,'multiline':False]
['text':' Test the shorthand syntax.','line_number':4191,'multiline':False]
['text':' NOLINT','line_number':4196,'multiline':False]
['text':' Test a field with '.' characters.','line_number':4200,'multiline':False]
['text':' NOLINT','line_number':4205,'multiline':False]
['text':' Test a field with a '$' character.','line_number':4216,'multiline':False]
['text':' NOLINT','line_number':4221,'multiline':False]
['text':' Test a field with a trailing '.' character (invalid FieldPath).','line_number':4232,'multiline':False]
['text':' NOLINT','line_number':4237,'multiline':False]
['text':' Test that a set field redacts properly.','line_number':4254,'multiline':False]
['text':' NOLINT','line_number':4262,'multiline':False]
['text':' Object as input.','line_number':4274,'multiline':False]
['text':' NOLINT','line_number':4279,'multiline':False]
['text':' Nested object as input.','line_number':4291,'multiline':False]
['text':' NOLINT','line_number':4297,'multiline':False]
['text':' Object with field path in input.','line_number':4309,'multiline':False]
['text':' NOLINT','line_number':4317,'multiline':False]
['text':' Object with field path in value.','line_number':4331,'multiline':False]
['text':' NOLINT','line_number':4341,'multiline':False]
['text':' Array as input.','line_number':4355,'multiline':False]
['text':' NOLINT','line_number':4361,'multiline':False]
['text':' Empty case.','line_number':4535,'multiline':False]
['text':' Singleton case.','line_number':4537,'multiline':False]
['text':' Integer addition.','line_number':4539,'multiline':False]
['text':' Adding negative numbers','line_number':4541,'multiline':False]
['text':' Getting a negative result','line_number':4543,'multiline':False]
['text':' Min/max ints are not promoted to longs.','line_number':4545,'multiline':False]
['text':' Integer overflow is promoted to a long.','line_number':4550,'multiline':False]
['text':' Singleton case.','line_number':4561,'multiline':False]
['text':' Long addition.','line_number':4563,'multiline':False]
['text':' Adding negative numbers','line_number':4565,'multiline':False]
['text':' Getting a negative result','line_number':4567,'multiline':False]
['text':' Confirm that NumberLong is wider than NumberInt, and the output','line_number':4569,'multiline':False]
['text':' will be a long if any operand is a long.','line_number':4570,'multiline':False]
['text':' Min/max longs are not promoted to double.','line_number':4577,'multiline':False]
['text':' Long overflow is promoted to a double.','line_number':4582,'multiline':False]
['text':' The result is "incorrect" here due to floating-point rounding errors.','line_number':4584,'multiline':False]
['text':' Singleton case.','line_number':4592,'multiline':False]
['text':' Double addition.','line_number':4594,'multiline':False]
['text':' Adding negative numbers','line_number':4596,'multiline':False]
['text':' Getting a negative result','line_number':4598,'multiline':False]
['text':' Confirm that doubles are wider than ints and longs, and the output','line_number':4600,'multiline':False]
['text':' will be a double if any operand is a double.','line_number':4601,'multiline':False]
['text':' Confirm floating point arithmetic has rounding errors.','line_number':4609,'multiline':False]
['text':' Singleton case.','line_number':4618,'multiline':False]
['text':' Decimal addition.','line_number':4620,'multiline':False]
['text':' Confirm that decimals are wider than all other types, and the output','line_number':4623,'multiline':False]
['text':' will be a double if any operand is a double.','line_number':4624,'multiline':False]
['text':' Date addition must fit in a NumberLong from a double.','line_number':4688,'multiline':False]
['text':' Only one date allowed in an $add expression.','line_number':4694,'multiline':False]
['text':' Only numeric types are allowed in a $add.','line_number':4701,'multiline':False]
['text':' Confirm that we're not using DoubleDoubleSummation for $add expression with a set of double','line_number':4709,'multiline':False]
['text':' values from mongo/util/summation_test.cpp.','line_number':4710,'multiline':False]
['text':' Test we return true if it matches','line_number':4753,'multiline':False]
['text':'*
 * Expressions registered with REGISTER_EXPRESSION_WITH_FEATURE_FLAG with feature flags that are not
 * active by default are not available for parsing in unit tests, since at MONGO_INITIALIZER-time,
 * the feature flag is false, so the expression isn't registered. This function calls the parse
 * function on an expression class directly to bypass the global parser map.
 ','line_number':4888,'multiline':True]
['text':'*
 * Version of assertExpectedResults() that bypasses the global parser map and always parses
 * expressions of the templated type.
 ','line_number':4903,'multiline':True]
['text':' Explicit correctness cases.','line_number':4924,'multiline':False]
['text':' Empty operand list should evaluate to the identity for the operation.','line_number':4944,'multiline':False]
['text':' Singleton cases.','line_number':4946,'multiline':False]
['text':' Binary cases','line_number':4949,'multiline':False]
['text':' Ternary cases','line_number':4952,'multiline':False]
['text':' Singleton cases.','line_number':4959,'multiline':False]
['text':' Binary cases.','line_number':4963,'multiline':False]
['text':' Ternary cases.','line_number':4966,'multiline':False]
['text':' Any NumberLong widens the resulting type to NumberLong.','line_number':4972,'multiline':False]
['text':' Binary cases','line_number':4974,'multiline':False]
['text':' Singleton cases.','line_number':4985,'multiline':False]
['text':' Binary cases','line_number':4988,'multiline':False]
['text':' Ternary cases','line_number':4991,'multiline':False]
['text':' Singleton cases.','line_number':4998,'multiline':False]
['text':' Binary cases.','line_number':5001,'multiline':False]
['text':' Ternary cases.','line_number':5004,'multiline':False]
['text':' Any NumberLong widens the resulting type to NumberLong.','line_number':5010,'multiline':False]
['text':' Binary cases','line_number':5012,'multiline':False]
['text':' Singleton cases.','line_number':5023,'multiline':False]
['text':' Binary cases','line_number':5026,'multiline':False]
['text':' Ternary cases','line_number':5029,'multiline':False]
['text':' Singleton cases.','line_number':5036,'multiline':False]
['text':' Binary cases.','line_number':5039,'multiline':False]
['text':' Ternary cases.','line_number':5042,'multiline':False]
['text':' Any NumberLong widens the resulting type to NumberLong.','line_number':5048,'multiline':False]
['text':' Binary cases','line_number':5050,'multiline':False]
['text':'*
 * Test case for round-trip conversion of random double using $convert.
 *
 * Generates 1000 random doubles and verifies they can be correctly converted to string values and
 * back to double.
 ','line_number':5148,'multiline':True]
['text':' Test that $mod with args of type double/double returns a value with type double,','line_number':5221,'multiline':False]
['text':' _even_ if the values happen to be an integral number (could be converted to an int with no','line_number':5222,'multiline':False]
['text':' rounding error).','line_number':5223,'multiline':False]
['text':' As above, for double/long.','line_number':5230,'multiline':False]
['text':' As above, for double/int.','line_number':5239,'multiline':False]
['text':' namespace ExpressionTests','line_number':5247,'multiline':False]
['text':' namespace mongo','line_number':5248,'multiline':False]
