['text':'*
 *    Copyright (C) 2021-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 * This stage keeps track of applyOps oplog entries that represent transactions and "unwinds" them
 * whenever an oplog entry commits a transaction. When the stage observes an applyOps or commit
 * command that commits a transaction, it emits one document for each operation in the transaction
 * that matches the namespace filter. The applyOps entries themselves are removed from the stage's
 * output, but all other entries pass through unmodified. Note that the namespace filter applies
 * only to unwound transaction operations, not to any other entries.
 ','line_number':67,'multiline':True]
['text':'*
     * Resets the transaction entry filter saved in the '_filter' and '_expression' fields.
     ','line_number':113,'multiline':True]
['text':'*
     * Validates if the supplied document contains transaction details.
     ','line_number':118,'multiline':True]
['text':'*
     * Represents the DocumentSource's state if it's currently reading from a transaction.
     * Transaction operations are packed into 'applyOps' entries in the oplog.
     *
     * This iterator returns operations from a transaction that are relevant to the change stream in
     * the same order they appear on the oplog (chronological order). Note that the
     * TransactionHistoryIterator, which this class uses to query the oplog, returns the oplog
     * entries in _reverse_ order. We internally reverse the output of the
     * TransactionHistoryIterator in order to get the desired order.
     *
     * Note that our view of a transaction in the oplog is like an array of arrays with an "outer"
     * array of applyOps entries represented by the 'txnOplogEntries' field and "inner" arrays of
     * applyOps entries. Each applyOps entry gets loaded on demand, with only a single applyOps
     * loaded into '_applyOpsValue' and '_currentApplyOps' at any time.
     *
     * Likewise, there are "outer" and "inner" iterators, 'txnOplogEntriesIt' and
     * '_currentApplyOpsIt' respectively, that together reference the current transaction operation.
     ','line_number':123,'multiline':True]
['text':'*
         * Returns the index for the last operation returned by getNextTransactionOp(). It is
         * illegal to call this before calling getNextTransactionOp() at least once.
         ','line_number':150,'multiline':True]
['text':' 'txnOpIndex' points to the _next_ transaction index, so we must subtract one to get','line_number':155,'multiline':False]
['text':' the index of the entry being examined right now.','line_number':156,'multiline':False]
['text':' 'currentApplyOpsIndex' points to the _next_ 'applyOps' index, so we must subtract one','line_number':162,'multiline':False]
['text':' to get the index of the entry being examined right now.','line_number':163,'multiline':False]
['text':'*
         * Returns the timestamp of the "applyOps" entry containing the last operation returned by
         * 'getNextTransactionOp()'. If 'getNextTransactionOp()' has not been called, returns the
         * timestamp of the first "applyOps" entry in the transaction.
         ','line_number':168,'multiline':True]
['text':'*
         * Extract one Document from the transaction and advance the iterator. Returns boost::none
         * to indicate that there are no operations left.
         ','line_number':189,'multiline':True]
['text':' Perform a find on the oplog to find an OplogEntry by its OpTime.','line_number':196,'multiline':False]
['text':' Helper for getNextTransactionOp(). Performs assertions on the document inside','line_number':200,'multiline':False]
['text':' applyOps.','line_number':201,'multiline':False]
['text':' Traverse backwards through the oplog by starting at the entry at 'firstOpTime' and','line_number':204,'multiline':False]
['text':' following "prevOpTime" links until reaching the terminal "prevOpTime" value, and push the','line_number':205,'multiline':False]
['text':' OpTime value to '_txnOplogEntries' for each entry traversed, including the 'firstOpTime'','line_number':206,'multiline':False]
['text':' entry. Note that we follow the oplog links _backwards_ through the oplog (i.e., in','line_number':207,'multiline':False]
['text':' reverse chronological order) but because this is a stack, the iterator will process them','line_number':208,'multiline':False]
['text':' in the opposite order, allowing iteration to proceed fowards and return operations in','line_number':209,'multiline':False]
['text':' chronological order.','line_number':210,'multiline':False]
['text':' Adds more transaction related information to the document containing unwinded','line_number':213,'multiline':False]
['text':' transaction.','line_number':214,'multiline':False]
['text':' For unprepared transactions, generates an artificial endOfTransaction oplog entry once','line_number':217,'multiline':False]
['text':' all events in the transaction have been exhausted.','line_number':218,'multiline':False]
['text':' Records all namespaces affected by the transaction. Used in generating an artificial','line_number':221,'multiline':False]
['text':' endOfTransaction oplog entry.','line_number':222,'multiline':False]
['text':' This stack contains the timestamps for all oplog entries in this transaction that have','line_number':225,'multiline':False]
['text':' yet to be processed by the iterator. Each time the TransactionOpIterator finishes','line_number':226,'multiline':False]
['text':' iterating the contents of the '_currentApplyOps' array, it pops an entry off the stack','line_number':227,'multiline':False]
['text':' and uses it to load the next applyOps entry in the '_currentApplyOps' array, meaning that','line_number':228,'multiline':False]
['text':' the top entry is always the next entry to be processed. From top-to-bottom, the stack is','line_number':229,'multiline':False]
['text':' ordered chronologically, in the same order as entries appear in the oplog.','line_number':230,'multiline':False]
['text':' The '_currentapplyOps' stores the applyOps array that the TransactionOpIterator is','line_number':233,'multiline':False]
['text':' currently iterating.','line_number':234,'multiline':False]
['text':' This iterator references the next operation within the '_currentApplyOps' array that the','line_number':237,'multiline':False]
['text':' the getNextTransactionOp() method will return. When there are no more operations to','line_number':238,'multiline':False]
['text':' iterate, this iterator will point to the array's "end" sentinel, and '_txnOplogEntries'','line_number':239,'multiline':False]
['text':' will be empty.','line_number':240,'multiline':False]
['text':' The index of the next entry within the current 'applyOps' array.','line_number':243,'multiline':False]
['text':' The timestamp of the current 'applyOps' entry.','line_number':246,'multiline':False]
['text':' Our current place within the entire transaction, which may consist of multiple 'applyOps'','line_number':249,'multiline':False]
['text':' arrays.','line_number':250,'multiline':False]
['text':' Cluster time and wall-clock time of the oplog entry which committed the transaction.','line_number':253,'multiline':False]
['text':' Fields that were taken from the '_applyOps' oplog entry. They are optional because','line_number':257,'multiline':False]
['text':' they may not be present on applyOps generated by the BatchedWriteContext.','line_number':258,'multiline':False]
['text':' Used for traversing the oplog with TransactionHistoryInterface.','line_number':262,'multiline':False]
['text':' Only return entries matching this expression.','line_number':265,'multiline':False]
['text':' If lsid and txnNumber are present and the transaction is not prepared, we need to create','line_number':269,'multiline':False]
['text':' fake endOfTransaction oplog entry','line_number':270,'multiline':False]
['text':' Set of affected namespaces. Only needed if we need endOfTransaction.','line_number':273,'multiline':False]
['text':' Set to true after iterator have returned endOfTransaction','line_number':276,'multiline':False]
['text':' All transaction entries are filtered through this expression. This extra filtering step is','line_number':280,'multiline':False]
['text':' necessary because a transaction can contain a mix of operations from different namespaces. A','line_number':281,'multiline':False]
['text':' change stream needs to filter by namespace to ensure it does not return operations outside','line_number':282,'multiline':False]
['text':' the namespace it watches. As an optimization, this filter can also have predicates from','line_number':283,'multiline':False]
['text':' user-specified $match stages, allowing for early filtering of events that we know would be','line_number':284,'multiline':False]
['text':' filtered later in the pipeline.','line_number':285,'multiline':False]
['text':' Represents the current transaction we're unwinding, if any.','line_number':289,'multiline':False]
['text':' namespace mongo','line_number':293,'multiline':False]
