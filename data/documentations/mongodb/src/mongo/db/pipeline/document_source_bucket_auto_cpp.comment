['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' IWYU pragma: no_include "ext/alloc_traits.h"','line_number':30,'multiline':False]
['text':' IWYU pragma: no_include "boost/container/detail/std_fwd.hpp"','line_number':32,'multiline':False]
['text':'*
 * Generates a new file name on each call using a static, atomic and monotonically increasing
 * number.
 *
 * Each user of the Sorter must implement this function to ensure that all temporary files that the
 * Sorter instances produce are uniquely identified using a unique file name extension with separate
 * atomic variable. This is necessary because the sorter.cpp code is separately included in multiple
 * places, rather than compiled in one place and linked, and so cannot provide a globally unique ID.
 ','line_number':89,'multiline':True]
['text':' namespace','line_number':104,'multiline':False]
['text':' We have been disposed. Return EOF.','line_number':123,'multiline':False]
['text':' Anything the per-doc expression depends on, the whole stage depends on.','line_number':149,'multiline':False]
['text':' The initializer should be an ExpressionConstant, or something that optimizes to one.','line_number':151,'multiline':False]
['text':' ExpressionConstant doesn't have dependencies.','line_number':152,'multiline':False]
['text':' We know exactly which fields will be present in the output document. Future stages cannot','line_number':155,'multiline':False]
['text':' depend on any further fields. The grouping process will remove any metadata from the','line_number':156,'multiline':False]
['text':' documents, so there can be no further dependencies on metadata.','line_number':157,'multiline':False]
['text':' The initializer should be an ExpressionConstant, or something that optimizes to one.','line_number':166,'multiline':False]
['text':' ExpressionConstant doesn't have dependencies.','line_number':167,'multiline':False]
['text':' To be consistent with the $group stage, we consider "missing" to be equivalent to null when','line_number':222,'multiline':False]
['text':' grouping values into buckets.','line_number':223,'multiline':False]
['text':' Initialize the iterator on '_sorter'.','line_number':243,'multiline':False]
['text':' If there are no buckets, then we don't need to populate anything.','line_number':253,'multiline':False]
['text':' Calculate the approximate bucket size. We attempt to fill each bucket with this many','line_number':258,'multiline':False]
['text':' documents.','line_number':259,'multiline':False]
['text':' If the number of buckets is larger than the number of documents, then we try to make','line_number':263,'multiline':False]
['text':' as many buckets as possible by placing each document in its own bucket.','line_number':264,'multiline':False]
['text':' If there are any values that now fall into this bucket after we round the','line_number':280,'multiline':False]
['text':' boundary, absorb them into this bucket too.','line_number':281,'multiline':False]
['text':' Handle the special case where the largest value in the first bucket is zero. In this','line_number':288,'multiline':False]
['text':' case, we take the minimum boundary of the next bucket and round it down. We then set the','line_number':289,'multiline':False]
['text':' maximum boundary of the current bucket to be the rounded down value. This maintains that','line_number':290,'multiline':False]
['text':' the maximum boundary of the current bucket is exclusive and the minimum boundary of the','line_number':291,'multiline':False]
['text':' next bucket is inclusive.','line_number':292,'multiline':False]
['text':' If there are any more values that are equal to the boundary value, then absorb','line_number':300,'multiline':False]
['text':' them into the current bucket too.','line_number':301,'multiline':False]
['text':' If there is a bucket that comes after the current bucket, then the current bucket's max','line_number':308,'multiline':False]
['text':' boundary is updated to the next bucket's min. This makes it so that buckets' min','line_number':309,'multiline':False]
['text':' boundaries are inclusive and max boundaries are exclusive (except for the last bucket,','line_number':310,'multiline':False]
['text':' which has an inclusive max).','line_number':311,'multiline':False]
['text':' If there was a bucket before this, the 'currentMin' should be populated, or there are no more','line_number':320,'multiline':False]
['text':' documents.','line_number':321,'multiline':False]
['text':' If we have a granularity specified and if there is a bucket that came before the current','line_number':331,'multiline':False]
['text':' bucket being added, then the current bucket's min boundary is updated to be the previous','line_number':332,'multiline':False]
['text':' bucket's max boundary. This makes it so that bucket boundaries follow the granularity, have','line_number':333,'multiline':False]
['text':' inclusive minimums, and have exclusive maximums.','line_number':334,'multiline':False]
['text':' Evaluate each initializer against an empty document. Normally the initializer can refer to','line_number':340,'multiline':False]
['text':' the group key, but in $bucketAuto there is no single group key per bucket.','line_number':341,'multiline':False]
['text':' Add 'approxBucketSize' number of documents to the current bucket. If this is the last bucket,','line_number':350,'multiline':False]
['text':' add all the remaining documents.','line_number':351,'multiline':False]
['text':' Modify the bucket details for next bucket.','line_number':360,'multiline':False]
['text':' To be consistent with the $group stage, we consider "missing" to be equivalent to null','line_number':388,'multiline':False]
['text':' when evaluating accumulators.','line_number':389,'multiline':False]
['text':'"granularity" only supports some strings, so a specific representative value is used if','line_number':407,'multiline':False]
['text':' necessary.','line_number':408,'multiline':False]
['text':' If there is no output field specified, then add the default one.','line_number':436,'multiline':False]
['text':' namespace mongo','line_number':570,'multiline':False]
['text':' Explicit instantiation unneeded since we aren't exposing Sorter outside of this file.','line_number':573,'multiline':False]
