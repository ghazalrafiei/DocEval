['text':'*
 *    Copyright (C) 2019-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' Avoid too many lookups into the Document cache.','line_number':118,'multiline':False]
['text':' This optimization existed in the old Pre-4.4 MapReduce implementation. If the flag is','line_number':141,'multiline':False]
['text':' set, then we should replicate the optimization. See SERVER-68766 for more details.','line_number':142,'multiline':False]
['text':' Keep reducing until we have exactly one value.','line_number':147,'multiline':False]
['text':' Do not insert if doing so would exceed the the maximum allowed BSONObj size.','line_number':154,'multiline':False]
['text':' If we have reached the threshold for maximum allowed BSONObj size and only','line_number':156,'multiline':False]
['text':' have a single value then no progress will be made on reduce. We must fail','line_number':157,'multiline':False]
['text':' when this scenario is encountered.','line_number':158,'multiline':False]
['text':' Function signature: reduce(key, values).','line_number':169,'multiline':False]
['text':' For reduce, the key and values are both passed as 'params' so there's no need to set','line_number':171,'multiline':False]
['text':' 'this'.','line_number':172,'multiline':False]
['text':' Remove all values which have been reduced.','line_number':180,'multiline':False]
['text':' Include most recent result in the set of values to be reduced.','line_number':182,'multiline':False]
['text':' If we're merging after this, wrap the value in the same format it was inserted in.','line_number':188,'multiline':False]
['text':' Returns this accumulator serialized as a Value along with the reduce function.','line_number':211,'multiline':False]
['text':' Parses a constant expression of type String or Code.','line_number':232,'multiline':False]
['text':' namespace','line_number':249,'multiline':False]
['text':'
     * {$accumulator: {
     *   init: <code>,
     *   accumulate: <code>,
     *   merge: <code>,
     *   finalize: <code>,
     *
     *   accumulateArgs: <expr>,  // evaluated once per document
     *
     *   initArgs: <expr>,  // evaluated once per group
     *
     *   lang: 'js',
     * }}
     ','line_number':272,'multiline':True]
['text':' unexpected field','line_number':320,'multiline':False]
['text':' initArgs is optional because most custom accumulators don't need the state to depend on','line_number':329,'multiline':False]
['text':' the group key.','line_number':330,'multiline':False]
['text':' accumulateArgs is required because it's the only way to communicate a value from the input','line_number':333,'multiline':False]
['text':' stream into the accumulator state.','line_number':334,'multiline':False]
['text':' _state is initialized when we encounter the first document in each group. We never create','line_number':349,'multiline':False]
['text':' empty groups: even in a {$group: {_id: 1, ...}}, we will return zero groups rather than one','line_number':350,'multiline':False]
['text':' empty group.','line_number':351,'multiline':False]
['text':' Ensure we've actually called accumulate/merge for every input document.','line_number':354,'multiline':False]
['text':' If toBeMerged then we return the current state, to be fed back in to accumulate / merge /','line_number':358,'multiline':False]
['text':' finalize later. If not toBeMerged then we return the final value, by calling finalize.','line_number':359,'multiline':False]
['text':' Get the final value given the current accumulator state.','line_number':364,'multiline':False]
['text':' Between groups the _state should be empty: we initialize it to be empty it in the','line_number':386,'multiline':False]
['text':' constructor, and we clear it at the end of each group (in .reset()).','line_number':387,'multiline':False]
['text':' input is a value produced by our AccumulationExpression::initializer.','line_number':394,'multiline':False]
['text':' getApproximateSize includes sizeof(Value), but we already counted that in resetMemUsageBytes','line_number':408,'multiline':False]
['text':' as part of sizeof(*this).','line_number':409,'multiline':False]
['text':' _state should be nonempty because we populate it in startNewGroup.','line_number':421,'multiline':False]
['text':' getApproximateSize includes sizeof(Value), but we already counted that in resetMemUsageBytes','line_number':435,'multiline':False]
['text':' as part of sizeof(*this).','line_number':436,'multiline':False]
['text':' _state should be nonempty because we populate it in startNewGroup.','line_number':442,'multiline':False]
['text':' Expose user functions.','line_number':452,'multiline':False]
['text':' Use a wrapper function that calls accumulate and merge in a JS loop, to cut down on the','line_number':459,'multiline':False]
['text':' number of calls into the JS engine.','line_number':460,'multiline':False]
['text':' Try to avoid doing an expensive argument spread by handling a few common arities as','line_number':478,'multiline':False]
['text':' special cases.','line_number':479,'multiline':False]
['text':' Take as many values as will fit in one BSON array.','line_number':492,'multiline':False]
['text':' The JS call will fail if the arguments object is larger than BSONObjMaxInternalSize,','line_number':498,'multiline':False]
['text':' which is a much greater limit than BSONObjMaxUserSize. So it should be safe to go','line_number':499,'multiline':False]
['text':' slightly over the BSONObjMaxUserSize.','line_number':500,'multiline':False]
['text':' For the outer loop to make progress, the inner loop needs to append at least one element','line_number':507,'multiline':False]
['text':' of _pendingCalls to pendingCalls. Otherwise we would call `state = accumulate(state, [])`','line_number':508,'multiline':False]
['text':' forever.','line_number':509,'multiline':False]
['text':' namespace mongo','line_number':523,'multiline':False]
