['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' IWYU pragma: keep','line_number':51,'multiline':False]
['text':'*
 * Registers a DocumentSource to have the name 'key'.
 *
 * 'liteParser' takes an AggregateCommandRequest and a BSONElement and returns a
 * LiteParsedDocumentSource. This is used for checks that need to happen before a full parse,
 * such as checks about which namespaces are referenced by this aggregation.
 *
 * 'fullParser' is either a DocumentSource::SimpleParser or a DocumentSource::Parser.
 * In both cases, it takes a BSONElement and an ExpressionContext and returns fully-executable
 * DocumentSource(s), for optimization and execution. In the common case it's a SimpleParser,
 * which returns a single DocumentSource; in the general case it's a Parser, which returns a whole
 * std::list to support "multi-stage aliases" like $bucket.
 *
 * Stages that do not require any special pre-parse checks can use
 * LiteParsedDocumentSourceDefault::parse as their 'liteParser'.
 *
 * As an example, if your stage DocumentSourceFoo looks like {$foo: <args>} and does *not* require
 * any special pre-parse checks, you should implement a static parser like
 * DocumentSourceFoo::createFromBson(), and register it like so:
 * REGISTER_DOCUMENT_SOURCE(foo,
 *                          LiteParsedDocumentSourceDefault::parse,
 *                          DocumentSourceFoo::createFromBson);
 ','line_number':93,'multiline':True]
['text':'*
 * Like REGISTER_DOCUMENT_SOURCE, except the parser will only be registered when featureFlag is
 * enabled. We store featureFlag in the parserMap, so that it can be checked at runtime
 * to correctly enable/disable the parser.
 ','line_number':125,'multiline':True]
['text':'*
 * Registers a DocumentSource which cannot be exposed to the users.
 ','line_number':140,'multiline':True]
['text':'*
 * You can specify a condition, evaluated during startup,
 * that decides whether to register the parser.
 *
 * For example, you could check a feature flag, and register the parser only when it's enabled.
 *
 * Note that the condition is evaluated only once, during a MONGO_INITIALIZER. Don't specify
 * a condition that can change at runtime, such as FCV. (Feature flags are ok, because they
 * cannot be toggled at runtime.)
 *
 * This is the most general REGISTER_DOCUMENT_SOURCE* macro, which all others should delegate to.
 ','line_number':152,'multiline':True]
['text':'*
 * Like REGISTER_DOCUMENT_SOURCE, except the parser is only enabled when test-commands are enabled.
 ','line_number':187,'multiline':True]
['text':' In general a parser returns a list of DocumentSources, to accomodate "multi-stage aliases"','line_number':201,'multiline':False]
['text':' like $bucket.','line_number':202,'multiline':False]
['text':' But in the common case a parser returns only one DocumentSource.','line_number':205,'multiline':False]
['text':'*
     * This is what is returned from the main DocumentSource API: getNext(). It is essentially a
     * (ReturnStatus, Document) pair, with the first entry being used to communicate information
     * about the execution of the DocumentSource, such as whether or not it has been exhausted.
     ','line_number':219,'multiline':True]
['text':' There is a result to be processed.','line_number':227,'multiline':False]
['text':' There will be no further results.','line_number':229,'multiline':False]
['text':' There is not a result to be processed yet, but there may be more results in the','line_number':231,'multiline':False]
['text':' future. If a DocumentSource retrieves this status from its child, it must propagate','line_number':232,'multiline':False]
['text':' it without doing any further work.','line_number':233,'multiline':False]
['text':'*
         * Shortcut constructor for the common case of creating an 'advanced' GetNextResult from the
         * given 'result'. Accepts only an rvalue reference as an argument, since DocumentSources
         * will want to move 'result' into this GetNextResult, and should have to opt in to making a
         * copy.
         ','line_number':245,'multiline':True]
['text':' implicit ','line_number':251,'multiline':True]
['text':'*
         * Gets the result document. It is an error to call this if isAdvanced() returns false.
         ','line_number':254,'multiline':True]
['text':'*
         * Releases the result document, transferring ownership to the caller. It is an error to
         * call this if isAdvanced() returns false.
         ','line_number':262,'multiline':True]
['text':'*
     * A struct representing the information needed to execute this stage on a distributed
     * collection. Describes how a pipeline should be split for sharded execution.
     ','line_number':294,'multiline':True]
['text':'*
         * Convenience constructor for the common case where there is at most one merging stage. Can
         * pass nullptr for the merging stage which means "no merging required."
         ','line_number':301,'multiline':True]
['text':' A stage which executes on each shard in parallel, or nullptr if nothing can be done in','line_number':316,'multiline':False]
['text':' parallel. For example, a partial $group before a subsequent global $group.','line_number':317,'multiline':False]
['text':' A stage or stages which function to merge all the results together, or an empty list if','line_number':320,'multiline':False]
['text':' nothing is necessary after merging. For example, a $limit stage.','line_number':321,'multiline':False]
['text':' If set, each document is expected to have sort key metadata which will be serialized in','line_number':324,'multiline':False]
['text':' the '$sortKey' field. 'mergeSortPattern' will then be used to describe which fields are','line_number':325,'multiline':False]
['text':' ascending and which fields are descending when merging the streams together.','line_number':326,'multiline':False]
['text':' If mergeSortPattern is specified and needsSplit is false, the split point will be','line_number':329,'multiline':False]
['text':' deferred to the next stage that would split the pipeline. The sortPattern will be taken','line_number':330,'multiline':False]
['text':' into account at that split point. Should be true if a stage specifies 'shardsStage' or','line_number':331,'multiline':False]
['text':' 'mergingStage'. Does not mean anything if the sort pattern is not set.','line_number':332,'multiline':False]
['text':' If needsSplit is false and this plan has anything that must run on the merging half of','line_number':335,'multiline':False]
['text':' the pipeline, it will be deferred until the next stage that sets any non-default value on','line_number':336,'multiline':False]
['text':' 'DistributedPlanLogic' or until a following stage causes the given validation','line_number':337,'multiline':False]
['text':' function to return false. By default this will not allow swapping with any','line_number':338,'multiline':False]
['text':' following stages.','line_number':339,'multiline':False]
['text':'*
     * Makes a deep clone of the DocumentSource by serializing and re-parsing it. DocumentSources
     * that cannot be safely cloned this way should override this method. Callers can optionally
     * specify 'newExpCtx' to construct the deep clone with it instead of defaulting to the
     * original's 'ExpressionContext'.
     ','line_number':347,'multiline':True]
['text':' Cloning should only happen once the pipeline has been fully built, after desugaring from','line_number':364,'multiline':False]
['text':' one stage to multiple stages has occurred. When cloning desugared stages we expect each','line_number':365,'multiline':False]
['text':' stage to re-parse to one stage.','line_number':366,'multiline':False]
['text':'*
     * The main execution API of a DocumentSource. Returns an intermediate query result generated by
     * this DocumentSource.
     *
     * For performance reasons, a streaming stage must not keep references to documents across calls
     * to getNext(). Such stages must retrieve a result from their child and then release it (or
     * return it) before asking for another result. Failing to do so can result in extra work, since
     * the Document/Value library must copy data on write when that data has a refcount above one.
     ','line_number':375,'multiline':True]
['text':'*
     * Returns a struct containing information about any special constraints imposed on using this
     * stage. Input parameter Pipeline::SplitState is used by stages whose requirements change
     * depending on whether they are in a split or unsplit pipeline.
     ','line_number':405,'multiline':True]
['text':'*
     * If a stage's StageConstraints::PositionRequirement is kCustom, then it should also override
     * this method, which will be called by the validation process.
     ','line_number':413,'multiline':True]
['text':'*
     * Informs the stage that it is no longer needed and can release its resources. After dispose()
     * is called the stage must still be able to handle calls to getNext(), but can return kEOF.
     *
     * This is a non-virtual public interface to ensure dispose() is threaded through the entire
     * pipeline. Subclasses should override doDispose() to implement their disposal.
     ','line_number':423,'multiline':True]
['text':'*
     * Get the CommonStats for this DocumentSource.
     ','line_number':437,'multiline':True]
['text':'*
     * Get the stats specific to the DocumentSource. It is legal for the DocumentSource to return
     * nullptr to indicate that no specific stats are available.
     ','line_number':444,'multiline':True]
['text':'*
     * Get the stage's name.
     ','line_number':452,'multiline':True]
['text':'*
     * Set the underlying source this source should use to get Documents from. Must not throw
     * exceptions.
     ','line_number':457,'multiline':True]
['text':'*
     * In the default case, serializes the DocumentSource and adds it to the std::vector<Value>.
     *
     * A subclass may choose to overwrite this, rather than serialize, if it should output multiple
     * stages (eg, $sort sometimes also outputs a $limit).
     ','line_number':465,'multiline':True]
['text':'*
     * Shortcut method to get a BSONObj for debugging. Often useful in log messages, but is not
     * cheap so avoid doing so on a hot path at a low verbosity.
     ','line_number':474,'multiline':True]
['text':'*
     * If this stage uses additional namespaces, adds them to 'collectionNames'. These namespaces
     * should all be names of collections, not views.
     ','line_number':480,'multiline':True]
['text':'*
     * Validate that all operation contexts associated with this document source, including any
     * subpipelines, match the argument.
     ','line_number':491,'multiline':True]
['text':'*
     * Create a DocumentSource pipeline stage from 'stageObj'.
     ','line_number':503,'multiline':True]
['text':'*
     * Function that will be used as an alternate parser for a document source that has been
     * disabled.
     ','line_number':509,'multiline':True]
['text':'*
     * Registers a DocumentSource with a parsing function, so that when a stage with the given name
     * is encountered, it will call 'parser' to construct that stage.
     *
     * DO NOT call this method directly. Instead, use the REGISTER_DOCUMENT_SOURCE macro defined in
     * this file.
     ','line_number':521,'multiline':True]
['text':'*
     * Convenience wrapper for the common case, when DocumentSource::Parser returns a list of one
     * DocumentSource.
     *
     * DO NOT call this method directly. Instead, use the REGISTER_DOCUMENT_SOURCE macro defined in
     * this file.
     ','line_number':531,'multiline':True]
['text':'*
     * Returns true if the DocumentSource has a query.
     ','line_number':542,'multiline':True]
['text':'*
     * Returns the DocumentSource query if it exists.
     ','line_number':547,'multiline':True]
['text':'*
     * Attempt to push a match stage from directly ahead of the current stage given by itr to before
     * the current stage. Returns whether the optimization was performed.
     ','line_number':553,'multiline':True]
['text':'*
     * Attempt to push a sample stage from directly ahead of the current stage given by itr to
     * before the current stage. Returns whether the optimization was performed.
     ','line_number':560,'multiline':True]
['text':'*
     * Attempts to push any kind of 'DocumentSourceSingleDocumentTransformation' stage directly
     * ahead of the stage present at the 'itr' position if matches the constraints. Returns true if
     * optimization was performed, false otherwise.
     *
     * Note that this optimization is oblivious to the transform function. The only stages that are
     * eligible to swap are those that can safely swap with any transform.
     ','line_number':567,'multiline':True]
['text':'*
     * Wraps various optimization methods and returns the call immediately if any one of them
     * returns true.
     ','line_number':578,'multiline':True]
['text':'*
     * The non-virtual public interface for optimization. Attempts to do some generic optimizations
     * such as pushing $matches as early in the pipeline as possible, then calls out to
     * doOptimizeAt() for stage-specific optimizations.
     *
     * Subclasses should override doOptimizeAt() if they can apply some optimization(s) based on
     * subsequent stages in the pipeline.
     ','line_number':593,'multiline':True]
['text':'*
     * Returns an optimized DocumentSource that is semantically equivalent to this one, or
     * nullptr if this stage is a no-op. Implementations are allowed to modify themselves
     * in-place and return a pointer to themselves. For best results, first optimize the pipeline
     * with the optimizePipeline() method defined in pipeline.cpp.
     *
     * This is intended for any operations that include expressions, and provides a hook for
     * those to optimize those operations.
     *
     * The default implementation is to do nothing and return yourself.
     ','line_number':604,'multiline':True]
['text':'','line_number':617,'multiline':False]
['text':' Property Analysis - These methods allow a DocumentSource to expose information about','line_number':618,'multiline':False]
['text':' properties of themselves, such as which fields they need to apply their transformations, and','line_number':619,'multiline':False]
['text':' whether or not they produce or preserve a sort order.','line_number':620,'multiline':False]
['text':'','line_number':621,'multiline':False]
['text':' Property analysis can be useful during optimization (e.g. analysis of sort orders determines','line_number':622,'multiline':False]
['text':' whether or not a blocking group can be upgraded to a streaming group).','line_number':623,'multiline':False]
['text':'','line_number':624,'multiline':False]
['text':' No information is available about which paths are modified.','line_number':628,'multiline':False]
['text':' All fields will be modified. This should be used by stages like $replaceRoot which','line_number':631,'multiline':False]
['text':' modify the entire document.','line_number':632,'multiline':False]
['text':' A finite set of paths will be modified by this stage. This is true for something like','line_number':635,'multiline':False]
['text':' {$project: {a: 0, b: 0}}, which will only modify 'a' and 'b', and leave all other','line_number':636,'multiline':False]
['text':' paths unmodified.','line_number':637,'multiline':False]
['text':' This stage will modify an infinite set of paths, but we know which paths it will not','line_number':640,'multiline':False]
['text':' modify. For example, the stage {$project: {_id: 1, a: 1}} will leave only the fields','line_number':641,'multiline':False]
['text':' '_id' and 'a' unmodified, but all other fields will be projected out.','line_number':642,'multiline':False]
['text':' If there's a subpath that is modified this path may be modified.','line_number':673,'multiline':False]
['text':' If there's a superpath that is modified this path may be modified.','line_number':680,'multiline':False]
['text':' If one of the subpaths is unmodified return false.','line_number':688,'multiline':False]
['text':' Otherwise return true;','line_number':694,'multiline':False]
['text':' Cannot hit.','line_number':697,'multiline':False]
['text':' Stages may fill out 'renames' to contain information about path renames. Each entry in','line_number':704,'multiline':False]
['text':' 'renames' maps from the new name of the path (valid in documents flowing *out* of this','line_number':705,'multiline':False]
['text':' stage) to the old name of the path (valid in documents flowing *into* this stage).','line_number':706,'multiline':False]
['text':'','line_number':707,'multiline':False]
['text':' For example, consider the stage','line_number':708,'multiline':False]
['text':'','line_number':709,'multiline':False]
['text':'   {$project: {_id: 0, a: 1, b: "$c"}}','line_number':710,'multiline':False]
['text':'','line_number':711,'multiline':False]
['text':' This stage should return kAllExcept, since it modifies all paths other than "a". It can','line_number':712,'multiline':False]
['text':' also fill out 'renames' with the mapping "b" => "c".','line_number':713,'multiline':False]
['text':' Including space for returning renames which include dotted paths.','line_number':716,'multiline':False]
['text':' i.e., "a.b" => c','line_number':717,'multiline':False]
['text':'','line_number':718,'multiline':False]
['text':'*
     * Returns information about which paths are added, removed, or updated by this stage. The
     * default implementation uses kNotSupported to indicate that the set of modified paths for this
     * stage is not known.
     *
     * See GetModPathsReturn above for the possible return values and what they mean.
     ','line_number':722,'multiline':True]
['text':'*
     * Returns the expression context from the stage's context.
     ','line_number':733,'multiline':True]
['text':'*
     * Get the dependencies this operation needs to do its job. If overridden, subclasses must add
     * all paths needed to apply their transformation to 'deps->fields', and call
     * 'deps->setNeedsMetadata()' to indicate what metadata (e.g. text score), if any, is required.
     *
     * See DepsTracker::State for the possible return values and what they mean.
     ','line_number':740,'multiline':True]
['text':'*
     * Populate 'refs' with the variables referred to by this stage, including user and system
     * variables but excluding $$ROOT. Note that field path references are not considered variables.
     ','line_number':751,'multiline':True]
['text':'*
     * If this stage can be run in parallel across a distributed collection, returns boost::none.
     * Otherwise, returns a struct representing what needs to be done to merge each shard's pipeline
     * into a single stream of results. Must not mutate the existing source object; if different
     * behaviour is required, a new source should be created and configured appropriately. It is an
     * error for the returned DistributedPlanLogic to have identical pointers for 'shardsStage' and
     * 'mergingStage'.
     ','line_number':757,'multiline':True]
['text':'*
     * Returns true if it would be correct to execute this stage in parallel across the shards in
     * cases where the final stage is a stage which can perform a write operation, such as $merge.
     * For example, a $group stage which is just merging the groups from the shards can be run in
     * parallel since it will preserve the shard key.
     ','line_number':767,'multiline':True]
['text':'*
     * For stages that have sub-pipelines returns the source container holding the stages of that
     * pipeline. Otherwise returns a nullptr.
     ','line_number':778,'multiline':True]
['text':'*
     * The main execution API of a DocumentSource. Returns an intermediate query result generated by
     * this DocumentSource. See comment at getNext().
     ','line_number':789,'multiline':True]
['text':'*
     * Attempt to perform an optimization with the following source in the pipeline. 'container'
     * refers to the entire pipeline, and 'itr' points to this stage within the pipeline.
     *
     * The return value is an iterator over the same container which points to the first location
     * in the container at which an optimization may be possible, or the end of the container().
     *
     * For example, if a swap takes place, the returned iterator should just be the position
     * directly preceding 'itr', if such a position exists, since the stage at that position may be
     * able to perform further optimizations with its new neighbor.
     ','line_number':795,'multiline':True]
['text':'*
     * Release any resources held by this stage. After doDispose() is called the stage must still be
     * able to handle calls to getNext(), but can return kEOF.
     ','line_number':811,'multiline':True]
['text':'
      Most DocumentSources have an underlying source they get their data
      from.  This is a convenience for them.

      The default implementation of setSource() sets this; if you don't
      need a source, override that to verify().  The default is to
      verify() if this has already been set.
    ','line_number':817,'multiline':True]
['text':'*
     * Create a Value that represents the document source.
     *
     * This is used by the default implementation of serializeToArray() to add this object
     * to a pipeline being serialized. Returning a missing() Value results in no entry
     * being added to the array for this stage (DocumentSource).
     ','line_number':832,'multiline':True]
['text':'*
 * Method to accumulate the plan summary stats from all stages of the pipeline into the given
 * `planSummaryStats` object.
 ','line_number':842,'multiline':True]
['text':' namespace mongo','line_number':849,'multiline':False]
