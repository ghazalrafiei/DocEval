['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' This provides access to an ExpressionContext that has a valid ServiceContext with a','line_number':66,'multiline':False]
['text':' TimeZoneDatabase via getExpCtx(), but we'll use a different name for this test suite.','line_number':67,'multiline':False]
['text':' Test that it serializes to the full format if given an object specification.','line_number':73,'multiline':False]
['text':' Test that it becomes a constant if both year, month and day are provided, and are both','line_number':103,'multiline':False]
['text':' constants.','line_number':104,'multiline':False]
['text':' Test that it becomes a constant if both year, hour and minute are provided, and are both','line_number':109,'multiline':False]
['text':' expressions which evaluate to constants.','line_number':110,'multiline':False]
['text':' Test that it becomes a constant if both year and milliseconds are provided, and year is an','line_number':117,'multiline':False]
['text':' expressions which evaluate to a constant, with milliseconds a constant','line_number':118,'multiline':False]
['text':' Test that it becomes a constant if both isoWeekYear, and isoWeek are provided, and are both','line_number':124,'multiline':False]
['text':' constants.','line_number':125,'multiline':False]
['text':' Test that it becomes a constant if both isoWeekYear, isoWeek and isoDayOfWeek are provided,','line_number':130,'multiline':False]
['text':' and are both expressions which evaluate to constants.','line_number':131,'multiline':False]
['text':' Test that it does *not* become a constant if both year and month are provided, but','line_number':139,'multiline':False]
['text':' year is not a constant.','line_number':140,'multiline':False]
['text':' Test that it does *not* become a constant if both year and day are provided, but','line_number':147,'multiline':False]
['text':' day is not a constant.','line_number':148,'multiline':False]
['text':' Test that it does *not* become a constant if both isoWeekYear and isoDayOfWeek are provided,','line_number':154,'multiline':False]
['text':' but isoDayOfWeek is not a constant.','line_number':155,'multiline':False]
['text':' 11/1/2016 in ms.','line_number':167,'multiline':False]
['text':' 12/30/2016','line_number':172,'multiline':False]
['text':' 1/2/2017 01:00:00','line_number':177,'multiline':False]
['text':' 1/1/2017 01:01:00','line_number':182,'multiline':False]
['text':' 1/1/2017 00:01:01','line_number':187,'multiline':False]
['text':' namespace ExpressionDateFromPartsTest','line_number':191,'multiline':False]
['text':' This provides access to an ExpressionContext that has a valid ServiceContext with a','line_number':195,'multiline':False]
['text':' TimeZoneDatabase via getExpCtx(), but we'll use a different name for this test suite.','line_number':196,'multiline':False]
['text':' Test that it serializes to the full format if given an object specification.','line_number':202,'multiline':False]
['text':' Test that it becomes a constant if both date and timezone are provided, and are both','line_number':225,'multiline':False]
['text':' constants.','line_number':226,'multiline':False]
['text':' Test that it becomes a constant if both date and timezone are provided, and are both','line_number':232,'multiline':False]
['text':' expressions which evaluate to constants.','line_number':233,'multiline':False]
['text':' Test that it becomes a constant if both date and iso8601 are provided, and are both','line_number':242,'multiline':False]
['text':' constants.','line_number':243,'multiline':False]
['text':' Test that it becomes a constant if both date and iso8601 are provided, and are both','line_number':248,'multiline':False]
['text':' expressions which evaluate to constants.','line_number':249,'multiline':False]
['text':' Test that it does *not* become a constant if both date and timezone are provided, but','line_number':255,'multiline':False]
['text':' date is not a constant.','line_number':256,'multiline':False]
['text':' Test that it does *not* become a constant if both date and timezone are provided, but','line_number':264,'multiline':False]
['text':' timezone is not a constant.','line_number':265,'multiline':False]
['text':' Test that it does *not* become a constant if both date and iso8601 are provided, but','line_number':271,'multiline':False]
['text':' iso8601 is not a constant.','line_number':272,'multiline':False]
['text':' namespace ExpressionDateToPartsTest','line_number':279,'multiline':False]
['text':' This provides access to an ExpressionContext that has a valid ServiceContext with a','line_number':295,'multiline':False]
['text':' TimeZoneDatabase via getExpCtx(), but we'll use a different name for this test suite.','line_number':296,'multiline':False]
['text':' Single argument.','line_number':303,'multiline':False]
['text':' Single argument wrapped in an array.','line_number':307,'multiline':False]
['text':' Object literal syntax.','line_number':311,'multiline':False]
['text':' It will parse as an ExpressionArray, and fail at runtime.','line_number':354,'multiline':False]
['text':' It will parse as an ExpressionArray, and fail at runtime.','line_number':367,'multiline':False]
['text':' It will parse as an ExpressionArray, and fail at runtime.','line_number':380,'multiline':False]
['text':' Test that it rejects an array for the timezone option.','line_number':386,'multiline':False]
['text':' Should not throw.','line_number':413,'multiline':False]
['text':' Should not throw.','line_number':423,'multiline':False]
['text':' Test that it serializes to the full format if given an object specification.','line_number':454,'multiline':False]
['text':' Test that it serializes to the full format if given a date.','line_number':468,'multiline':False]
['text':' Test that it serializes to the full format if given a date within an array.','line_number':479,'multiline':False]
['text':' Test that it becomes a constant if only date is provided, and it is constant.','line_number':493,'multiline':False]
['text':' Test that it becomes a constant if both date and timezone are provided, and are both','line_number':498,'multiline':False]
['text':' constants.','line_number':499,'multiline':False]
['text':' Test that it becomes a constant if both date and timezone are provided, and are both','line_number':505,'multiline':False]
['text':' expressions which evaluate to constants.','line_number':506,'multiline':False]
['text':' Test that it does *not* become a constant if both date and timezone are provided, but','line_number':515,'multiline':False]
['text':' date is not a constant.','line_number':516,'multiline':False]
['text':' Test that it does *not* become a constant if both date and timezone are provided, but','line_number':524,'multiline':False]
['text':' timezone is not a constant.','line_number':525,'multiline':False]
['text':' Make sure they each successfully evaluate with a different TimeZone.','line_number':534,'multiline':False]
['text':' Should not throw.','line_number':541,'multiline':False]
['text':' Make sure the time zone is used during evaluation.','line_number':544,'multiline':False]
['text':' 2017-06-06T19:38:43:234Z.','line_number':545,'multiline':False]
['text':' Make sure they each successfully evaluate with a different TimeZone.','line_number':561,'multiline':False]
['text':' Test that the expression results in null if the date is nullish and the timezone is not','line_number':566,'multiline':False]
['text':' specified.','line_number':567,'multiline':False]
['text':' Test that the expression results in null if the date is present but the timezone is','line_number':581,'multiline':False]
['text':' nullish.','line_number':582,'multiline':False]
['text':' Test that the expression results in null if the date and timezone both nullish.','line_number':596,'multiline':False]
['text':' Test that the expression results in null if the date is nullish and timezone is present.','line_number':603,'multiline':False]
['text':' namespace DateExpressionsTest','line_number':613,'multiline':False]
['text':' This provides access to an ExpressionContext that has a valid ServiceContext with a','line_number':617,'multiline':False]
['text':' TimeZoneDatabase via getExpCtx(), but we'll use a different name for this test suite.','line_number':618,'multiline':False]
['text':' Test that it serializes to the full format if given an object specification.','line_number':624,'multiline':False]
['text':' Test that it becomes a constant if date is constant, and both format and timezone are','line_number':649,'multiline':False]
['text':' missing.','line_number':650,'multiline':False]
['text':' Test that it becomes a constant if both format and date are constant, and timezone is','line_number':655,'multiline':False]
['text':' missing.','line_number':656,'multiline':False]
['text':' Test that it becomes a constant if format, date and timezone are provided, and all are','line_number':663,'multiline':False]
['text':' constants.','line_number':664,'multiline':False]
['text':' Test that it becomes a constant if format, date and timezone are provided, and all','line_number':672,'multiline':False]
['text':' expressions which evaluate to constants.','line_number':673,'multiline':False]
['text':' Test that it becomes a constant if all parameters are constant, including the optional','line_number':684,'multiline':False]
['text':' 'onNull'.','line_number':685,'multiline':False]
['text':' Test that it does *not* become a constant if both format, date and timezone are provided, but','line_number':695,'multiline':False]
['text':' date is not a constant.','line_number':696,'multiline':False]
['text':' Test that it does *not* become a constant if both format, date and timezone are provided, but','line_number':706,'multiline':False]
['text':' timezone is not a constant.','line_number':707,'multiline':False]
['text':' Test that it does *not* become a constant if 'onNull' does not evaluate to a constant.','line_number':715,'multiline':False]
['text':' Test that it does *not* become a constant if 'format' does not evaluate to a constant.','line_number':723,'multiline':False]
['text':' namespace ExpressionDateToStringTest','line_number':849,'multiline':False]
['text':' This provides access to an ExpressionContext that has a valid ServiceContext with a','line_number':853,'multiline':False]
['text':' TimeZoneDatabase via getExpCtx(), but we'll use a different name for this test suite.','line_number':854,'multiline':False]
['text':' Test that it serializes to the full format if given an object specification.','line_number':860,'multiline':False]
['text':' Test that it serializes to the full format if given an object specification.','line_number':874,'multiline':False]
['text':' Test that it becomes a constant if all parameters evaluate to a constant value.','line_number':939,'multiline':False]
['text':' Test that it becomes a constant with the dateString, timezone, and format being a constant.','line_number':955,'multiline':False]
['text':' Test that it does *not* become a constant if dateString is not a constant.','line_number':991,'multiline':False]
['text':' Test that it does *not* become a constant if timezone is not a constant.','line_number':997,'multiline':False]
['text':' Test that it does *not* become a constant if format is not a constant.','line_number':1005,'multiline':False]
['text':' Test that it does *not* become a constant if onNull is not a constant.','line_number':1015,'multiline':False]
['text':' Test that it does *not* become a constant if onError is not a constant.','line_number':1023,'multiline':False]
['text':' Test with "Z" and timezone','line_number':1064,'multiline':False]
['text':' Test with timezone abbreviation and timezone','line_number':1074,'multiline':False]
['text':' Test with GMT offset and timezone','line_number':1084,'multiline':False]
['text':' Test with GMT offset and GMT timezone','line_number':1094,'multiline':False]
['text':' Week and day of week default to '1' if not specified.','line_number':1249,'multiline':False]
['text':' namespace ExpressionDateFromStringTest','line_number':1458,'multiline':False]
['text':'*
 * Parses expression 'expressionSpec' which is expected to parse successfully and then serializes
 * expression instance to compare with 'expectedSerializedExpressionSpec'.
 ','line_number':1462,'multiline':True]
['text':' Verify that parsed and then serialized expression is the same.','line_number':1478,'multiline':False]
['text':'*
 * Asserts that 'optimize()' for 'expression' returns the same expression when not all parameters
 * evaluate to constants.
 ','line_number':1485,'multiline':True]
['text':' namespace','line_number':1493,'multiline':False]
['text':'*
     * Parses expression 'expression' and asserts that the expression fails to parse with error
     * 'expectedErrorCode' and exception message 'expectedErrorMessage'.
     ','line_number':1498,'multiline':True]
['text':'*
     * Builds a $dateDiff expression with given values of parameters.
     ','line_number':1513,'multiline':True]
['text':' Verify that invalid fields are rejected.','line_number':1568,'multiline':False]
['text':' Verify that field 'startDate' is required.','line_number':1580,'multiline':False]
['text':' Verify that field 'endDate' is required.','line_number':1588,'multiline':False]
['text':' Verify that field 'unit' is required.','line_number':1596,'multiline':False]
['text':' Verify that only $dateDiff: {..} is accepted.','line_number':1604,'multiline':False]
['text':' Sunny day case.','line_number':1629,'multiline':False]
['text':' 2020-11-01T18:23:36 UTC+00:00 ','line_number':1630,'multiline':True]
['text':' 2020-11-01T20:00:00 UTC+00:00 ','line_number':1631,'multiline':True]
['text':' 'startDate' is null.','line_number':1635,'multiline':False]
['text':' 'endDate' is null.','line_number':1641,'multiline':False]
['text':' 'unit' is null.','line_number':1647,'multiline':False]
['text':' Invalid 'startDate' type.','line_number':1653,'multiline':False]
['text':' Error code.','line_number':1659,'multiline':False]
['text':' Invalid 'endDate' type.','line_number':1661,'multiline':False]
['text':' Error code.','line_number':1667,'multiline':False]
['text':' Invalid 'unit' type.','line_number':1669,'multiline':False]
['text':' Error code.','line_number':1675,'multiline':False]
['text':' Invalid 'unit' value.','line_number':1677,'multiline':False]
['text':' Error code.','line_number':1683,'multiline':False]
['text':' Invalid 'timezone' value.','line_number':1686,'multiline':False]
['text':' Error code.','line_number':1692,'multiline':False]
['text':' Accepts OID.','line_number':1695,'multiline':False]
['text':' Accepts timestamp.','line_number':1701,'multiline':False]
['text':' 2020-11-01T18:23:36 UTC+00:00 ','line_number':1702,'multiline':True]
['text':' 2020-11-01T20:00:00 UTC+00:00 ','line_number':1703,'multiline':True]
['text':' 'timezone' not specified','line_number':1705,'multiline':True]
['text':' Ignores 'startOfWeek' parameter value when unit is not week.','line_number':1708,'multiline':False]
['text':''timezone' is not specified','line_number':1712,'multiline':False]
['text':' expectedResult','line_number':1713,'multiline':False]
['text':' expectedErrorCode','line_number':1714,'multiline':False]
['text':' expectedErrorMessage','line_number':1715,'multiline':False]
['text':' startOfWeek','line_number':1716,'multiline':False]
['text':' 'startOfWeek' is null.','line_number':1719,'multiline':False]
['text':' unit','line_number':1722,'multiline':False]
['text':''timezone' is not specified','line_number':1723,'multiline':False]
['text':' expectedResult','line_number':1724,'multiline':False]
['text':' expectedErrorCode','line_number':1725,'multiline':False]
['text':' expectedErrorMessage','line_number':1726,'multiline':False]
['text':' startOfWeek','line_number':1727,'multiline':False]
['text':' Invalid 'startOfWeek' value type.','line_number':1730,'multiline':False]
['text':' unit','line_number':1733,'multiline':False]
['text':''timezone' is not specified','line_number':1734,'multiline':False]
['text':' expectedResult','line_number':1735,'multiline':False]
['text':' expectedErrorCode','line_number':1736,'multiline':False]
['text':' expectedErrorMessage','line_number':1737,'multiline':False]
['text':' startOfWeek','line_number':1738,'multiline':False]
['text':' Invalid 'startOfWeek' value.','line_number':1741,'multiline':False]
['text':' unit','line_number':1744,'multiline':False]
['text':''timezone' is not specified','line_number':1745,'multiline':False]
['text':' expectedResult','line_number':1746,'multiline':False]
['text':' expectedErrorCode','line_number':1747,'multiline':False]
['text':' expectedErrorMessage','line_number':1749,'multiline':False]
['text':' startOfWeek','line_number':1750,'multiline':False]
['text':' Sunny day case for 'startOfWeek'.','line_number':1753,'multiline':False]
['text':' 2021-01-24T00:00:00 UTC+00:00 Sunday','line_number':1755,'multiline':True]
['text':' 2021-01-25T00:00:00 UTC+00:00 Monday','line_number':1757,'multiline':True]
['text':' unit','line_number':1758,'multiline':False]
['text':''timezone' is not specified','line_number':1759,'multiline':False]
['text':' expectedResult','line_number':1760,'multiline':False]
['text':' expectedErrorCode','line_number':1761,'multiline':False]
['text':' expectedErrorMessage','line_number':1762,'multiline':False]
['text':' startOfWeek','line_number':1763,'multiline':False]
['text':' 'startOfWeek' not specified, defaults to "Sunday".','line_number':1766,'multiline':False]
['text':' 2021-01-23T00:00:00 UTC+00:00 Saturday','line_number':1768,'multiline':True]
['text':' 2021-01-24T00:00:00 UTC+00:00 Sunday','line_number':1770,'multiline':True]
['text':' unit','line_number':1771,'multiline':False]
['text':''timezone' is not specified','line_number':1772,'multiline':False]
['text':' expectedResult','line_number':1773,'multiline':False]
['text':' Week time unit and 'startOfWeek' specific test cases.','line_number':1777,'multiline':False]
['text':'1971-mm-dd','line_number':1799,'multiline':True]
['text':' Verify that 'optimize()' returns a constant expression when all parameters evaluate to','line_number':1804,'multiline':False]
['text':' constants.','line_number':1805,'multiline':False]
['text':' Time zone not specified','line_number':1816,'multiline':True]
['text':' Verify that dependencies for $dateDiff expression are determined correctly.','line_number':1827,'multiline':False]
['text':' namespace ExpressionDateDiffTest','line_number':1834,'multiline':False]
['text':'*
     * Builds a $dateTrunc expression with given values of parameters.
     ','line_number':1839,'multiline':True]
['text':'2021-02-01','line_number':1886,'multiline':True]
['text':' Verify that 'optimize()' returns a constant expression when all parameters evaluate to','line_number':1892,'multiline':False]
['text':' constants.','line_number':1893,'multiline':False]
['text':'2021-01-01','line_number':1898,'multiline':True]
['text':' Verify that dependencies for $dateTrunc expression are determined correctly.','line_number':1925,'multiline':False]
['text':' namespace','line_number':1932,'multiline':False]
['text':' with timezone','line_number':1959,'multiline':False]
['text':' 2020-10-31T10:10:05','line_number':2097,'multiline':False]
['text':' Subtracts additional 60 minutes due to crossing DST change in Ams zone.','line_number':2122,'multiline':False]
['text':' 2020-10-31T10:10:05','line_number':2148,'multiline':False]
['text':' Adds 30 days for day adjustment to 2020-11-30.','line_number':2158,'multiline':False]
['text':' Subtracts additional 60 minutes due to crossing DST change in Ams zone.','line_number':2172,'multiline':False]
['text':' Test that $$NOW will not be optimized as constant.','line_number':2201,'multiline':False]
['text':' Test that expression does not optimize to constant if some of the parameters is not a','line_number':2211,'multiline':False]
['text':' constant','line_number':2212,'multiline':False]
['text':' namespace ExpressionDateArithmeticsTest','line_number':2251,'multiline':False]
['text':' namespace mongo','line_number':2253,'multiline':False]
