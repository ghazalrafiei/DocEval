['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' For v1 classic change events, the eventIdentifier is always the documentKey, even if missing.','line_number':69,'multiline':False]
['text':' If we are here, then this is either a v2 classic event or an expanded event. In both cases,','line_number':75,'multiline':False]
['text':' the resume token is the operationType plus the documentKey or operationDescription.','line_number':76,'multiline':False]
['text':' We encode the resume token as a KeyString with the sequence:','line_number':127,'multiline':False]
['text':' clusterTime, version, txnOpIndex, fromInvalidate, uuid, eventIdentifier Only the clusterTime,','line_number':128,'multiline':False]
['text':' version, txnOpIndex, and fromInvalidate are required.','line_number':129,'multiline':False]
['text':' High water mark tokens only populate the clusterTime, version, and tokenType fields.','line_number':142,'multiline':False]
['text':' From v2 onwards, tokens may have an eventIdentifier but no UUID.','line_number':149,'multiline':False]
['text':' From v2 onwards, all non-high-water-mark tokens must have an eventIdentifier.','line_number':154,'multiline':False]
['text':' From v2 onwards, a missing UUID is encoded as explicitly null.','line_number':160,'multiline':False]
['text':' '_hexKeyString' is enough to determine equality. The type bits are used to unambiguously','line_number':186,'multiline':False]
['text':' re-construct the original data, but we do not expect any two resume tokens to have the same','line_number':187,'multiline':False]
['text':' data and different type bits, since that would imply they have (1) the same timestamp and (2)','line_number':188,'multiline':False]
['text':' the same eventIdentifier fields and values, but with different types. Change events with the','line_number':189,'multiline':False]
['text':' same eventIdentifier are either (1) on the same shard in the case of CRUD events, which','line_number':190,'multiline':False]
['text':' implies that they must have different timestamps; or (2) refer to the same logical event on','line_number':191,'multiline':False]
['text':' different shards, in the case of non-CRUD events.','line_number':192,'multiline':False]
['text':' Keep this in scope until we've decoded the bytes.','line_number':208,'multiline':False]
['text':' Next comes the resume token version.','line_number':221,'multiline':False]
['text':' The 'tokenType' field was added in version 1 and is not present in v0 tokens.','line_number':233,'multiline':False]
['text':' Next comes the txnOpIndex value.','line_number':247,'multiline':False]
['text':' The 'fromInvalidate' bool was added in version 1 resume tokens. We don't expect to see it','line_number':258,'multiline':False]
['text':' on version 0 tokens. After this bool, the remaining fields should be the same.','line_number':259,'multiline':False]
['text':' The UUID and eventIdentifier are not required for token versions <= 1.','line_number':268,'multiline':False]
['text':' The UUID comes first, then eventIdentifier. From v2 onwards, UUID may be explicitly null.','line_number':274,'multiline':False]
['text':' High water mark tokens never have an eventIdentifier.','line_number':279,'multiline':False]
['text':' From v2 onwards, all non-high-water-mark tokens must have an eventIdentifier.','line_number':284,'multiline':False]
['text':'
     * This is our default resume token for the representative query shape.
     * We use a high water mark token, otherwise a resume event is expected when reparsing.
     * When serializing the "_typeBits", we purposely avoid serializing with SerializationOptions,
     * as this will result in mistakenly add '?undefined' to the Document.
     * The serialization of the Document will typically exclude the "_typeBits" if they
     * were unset, which is the case for "kDefaultToken".
     ','line_number':311,'multiline':True]
['text':' namespace mongo','line_number':352,'multiline':False]
