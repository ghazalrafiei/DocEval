['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 * Tests that two values 'actual' and 'expected' are equal. If one of the values is a double, then
 * we check to see if the values are approximately equal with tolerance 'delta'.
 ','line_number':65,'multiline':True]
['text':'*
 * Gets the preferred number series from a GranularityRounder and converts all of the numbers to
 * Decimal128. This helps with testing that the GranularityRounders work with the Decimal128
 * datatype.
 ','line_number':85,'multiline':True]
['text':'*
 * Tests that a number in a preferred number series rounds up to the next number in the
 * series. For example, 1 is in the R5 series, so we test that it should round up to 1.6.
 ','line_number':105,'multiline':True]
['text':' Make sure that each element in the series at position i - 1 rounds up to the number','line_number':114,'multiline':False]
['text':' at position i.','line_number':115,'multiline':False]
['text':'*
 * Tests that a number in a preferred number series rounds up to the next number in the
 * series when the numbers are Decimal128 values.
 ','line_number':133,'multiline':True]
['text':' Make sure that each element in the series at position i - 1 rounds up to the number','line_number':143,'multiline':False]
['text':' at position i.','line_number':144,'multiline':False]
['text':'*
 * Tests that a number in between two values in a preferred number series rounds up to the
 * appropriate value. For example, the values 1 and 1.6 are in the R5 series. We test that the value
 * 1.3 rounds up to 1.6.
 ','line_number':165,'multiline':True]
['text':' Make sure a number in between two numbers in the series rounds up correctly.','line_number':179,'multiline':False]
['text':'*
 * Tests that a number in between two values in a preferred number series rounds up to the
 * appropriate value when the values are Decimal128 values.
 ','line_number':196,'multiline':True]
['text':' Make sure a number in between two numbers in the series rounds up correctly.','line_number':209,'multiline':False]
['text':'*
 * Tests that a number in a preferred number series rounds down to the previous number in the
 * series. For example, 1.6 is in the R5 series, so we test that it should round down to 1.
 ','line_number':228,'multiline':True]
['text':' Make sure that each element in the series at position i rounds down to the number at','line_number':236,'multiline':False]
['text':' position i - 1.','line_number':237,'multiline':False]
['text':'*
 * Tests that a number in a preferred number series rounds down to the previous number in the
 * series when the values are Decimal128 values.
 ','line_number':256,'multiline':True]
['text':' Make sure that each element in the series at position i rounds down to the number at','line_number':264,'multiline':False]
['text':' position i - 1.','line_number':265,'multiline':False]
['text':'*
 * Tests that a number in between two values in a preferred number series rounds down to the
 * appropriate value. For example, the values 1 and 1.6 are in the R5 series. We test that the value
 * 1.3 rounds down to 1.
 ','line_number':287,'multiline':True]
['text':' Make sure a number in between two numbers in the series rounds down correctly.','line_number':301,'multiline':False]
['text':'*
 * Tests that a number in between two values in a preferred number series rounds down to the
 * appropriate value when the values are Decimal128 values.
 ','line_number':318,'multiline':True]
['text':' Make sure a number in between two numbers in the series rounds down correctly.','line_number':331,'multiline':False]
['text':'*
 * Internally we represent preferred number series with a finite list of numbers. If we are rounding
 * a value outside the range of this list, we scale the values in the list by a power of 10. We
 * keep scaling until the number we are rounding falls into the range spanned by the preferred
 * numbers list. This method tests that the last value in the preferred numbers list rounds up to
 * the first value in the preferred numbers list multiplied by 10. This method also tests that the
 * first value in the preferred numbers list rounds down to the last value in the preferred numbers
 * list divided by 10.
 ','line_number':350,'multiline':True]
['text':'*
 * Tests that rounding wraps around when we are rounding Decimal128 values.
 ','line_number':392,'multiline':True]
['text':' Make sure that each GranularityRounder rounds zero to zero.','line_number':490,'multiline':False]
['text':' Make sure that each GranularityRounder fails when rounding a non-numeric value.','line_number':504,'multiline':False]
['text':' Make sure that each GranularityRounder fails when rounding NaN.','line_number':516,'multiline':False]
['text':' Make sure that each GranularityRounder fails when rounding a negative number.','line_number':535,'multiline':False]
['text':' namespace','line_number':559,'multiline':False]
['text':' namespace mongo','line_number':560,'multiline':False]
