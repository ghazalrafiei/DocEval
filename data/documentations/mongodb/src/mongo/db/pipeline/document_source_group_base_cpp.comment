['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' IWYU pragma: no_include "boost/container/detail/std_fwd.hpp"','line_number':33,'multiline':False]
['text':' IWYU pragma: no_include "ext/alloc_traits.h"','line_number':38,'multiline':False]
['text':'*
 * Helper to check if all accumulated fields need the same document.
 ','line_number':72,'multiline':True]
['text':' namespace','line_number':83,'multiline':False]
['text':' Add the _id.','line_number':96,'multiline':False]
['text':' Decomposed document case.','line_number':101,'multiline':False]
['text':' Add the remaining fields.','line_number':111,'multiline':False]
['text':' Optimizing a 'DocumentSourceGroupBase' might modify its expressions to become incompatible','line_number':162,'multiline':False]
['text':' with SBE. We temporarily highjack the context's 'sbeCompatible' flag to communicate the','line_number':163,'multiline':False]
['text':' situation back to the 'DocumentSourceGroupBase'. Notice, that while a particular','line_number':164,'multiline':False]
['text':' 'DocumentSourceGroupBase' might become incompatible with SBE, other groups in the pipeline','line_number':165,'multiline':False]
['text':' and the collection access could be still eligible for lowering to SBE, thus we must reset the','line_number':166,'multiline':False]
['text':' context's 'sbeCompatible' flag back to its original value at the end of the 'optimize()'','line_number':167,'multiline':False]
['text':' call.','line_number':168,'multiline':False]
['text':'','line_number':169,'multiline':False]
['text':' TODO SERVER-XXXXX: replace this hack with a proper per-stage tracking of SBE compatibility.','line_number':170,'multiline':False]
['text':' TODO: If all idExpressions are ExpressionConstants after optimization, then we know','line_number':176,'multiline':False]
['text':' there will be only one group. We should take advantage of that to avoid going through the','line_number':177,'multiline':False]
['text':' hash table.','line_number':178,'multiline':False]
['text':' add the _id','line_number':196,'multiline':False]
['text':' add the rest','line_number':202,'multiline':False]
['text':' Don't add initializer, because it doesn't refer to docs from the input stream.','line_number':206,'multiline':False]
['text':' We preserve none of the fields, but any fields referenced as part of the group key are','line_number':225,'multiline':False]
['text':' logically just renamed.','line_number':226,'multiline':False]
['text':' No fields are preserved.','line_number':240,'multiline':False]
['text':' {_id: {}} is treated as grouping on a constant, not an expression','line_number':290,'multiline':False]
['text':' grouping on a $op expression','line_number':297,'multiline':False]
['text':' namespace','line_number':312,'multiline':False]
['text':' No-op: field is used by the derived class.','line_number':338,'multiline':False]
['text':' Any other field will be treated as an accumulator specification.','line_number':340,'multiline':False]
['text':' This is fine.','line_number':365,'multiline':False]
['text':' Certain $group stages are allowed to execute on each exchange consumer. In order to','line_number':368,'multiline':False]
['text':' guarantee each consumer will only group together data from its own shard, the $group must','line_number':369,'multiline':False]
['text':' group on a superset of the shard key.','line_number':370,'multiline':False]
['text':' This requires an exact path match, but as a future optimization certain path','line_number':373,'multiline':False]
['text':' prefixes should be okay. For example, if the shard key path is "a.b", and we're','line_number':374,'multiline':False]
['text':' grouping by "a", then each group of "a" is strictly more specific than "a.b", so','line_number':375,'multiline':False]
['text':' we can deduce that grouping by "a" will not need to group together documents','line_number':376,'multiline':False]
['text':' across different values of the shard key field "a.b", and thus as long as any','line_number':377,'multiline':False]
['text':' other shard key fields are similarly preserved will not need to consume a merged','line_number':378,'multiline':False]
['text':' stream to perform the group.','line_number':379,'multiline':False]
['text':' This transformation is only intended for $group stages that group on a single field.','line_number':390,'multiline':False]
['text':' The path is $$CURRENT or $$ROOT. This isn't really a sensible value to group by (since','line_number':401,'multiline':False]
['text':' each document has a unique _id, it will just return the entire collection). We only','line_number':402,'multiline':False]
['text':' apply the rewrite when grouping by a single field, so we cannot apply it in this case,','line_number':403,'multiline':False]
['text':' where we are grouping by the entire document.','line_number':404,'multiline':False]
['text':' We do this transformation only if there are all $first, all $last, or no accumulators.','line_number':413,'multiline':False]
['text':' The _id field can be specified either as a fieldpath (ex. _id: "$a") or as a singleton','line_number':428,'multiline':False]
['text':' object (ex. _id: {v: "$a"}).','line_number':429,'multiline':False]
['text':' Since we don't attempt this transformation for non-$first/$last accumulators,','line_number':442,'multiline':False]
['text':' the initializer should always be trivial.','line_number':443,'multiline':False]
['text':' the merger will use the same grouping key ','line_number':453,'multiline':True]
['text':' The merger's output field names will be the same, as will the accumulator factories.','line_number':460,'multiline':False]
['text':' However, for some accumulators, the expression to be accumulated will be different. The','line_number':461,'multiline':False]
['text':' original accumulator may be collecting an expression based on a field expression or','line_number':462,'multiline':False]
['text':' constant.  Here, we accumulate the output of the same name from the prior group.','line_number':463,'multiline':False]
['text':' When merging, we always use generic hash based algorithm.','line_number':470,'multiline':False]
['text':' {shardsStage, mergingStage, sortPattern}','line_number':474,'multiline':False]
['text':' namespace mongo','line_number':478,'multiline':False]
