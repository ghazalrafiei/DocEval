['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' namespace repl','line_number':81,'multiline':False]
['text':' Enabling the maxTimeAlwaysTimeOut fail point will cause any query or command run with a','line_number':83,'multiline':False]
['text':' valid non-zero max time to fail immediately.  Any getmore operation on a cursor already','line_number':84,'multiline':False]
['text':' created with a valid non-zero max time will also fail immediately.','line_number':85,'multiline':False]
['text':'','line_number':86,'multiline':False]
['text':' This fail point cannot be used with the maxTimeNeverTimeOut fail point.','line_number':87,'multiline':False]
['text':' Enabling the maxTimeNeverTimeOut fail point will cause the server to never time out any','line_number':90,'multiline':False]
['text':' query, command, or getmore operation, regardless of whether a max time is set.','line_number':91,'multiline':False]
['text':'','line_number':92,'multiline':False]
['text':' This fail point cannot be used with the maxTimeAlwaysTimeOut fail point.','line_number':93,'multiline':False]
['text':'*
 * This class encompasses the state required by an operation and lives from the time a network
 * operation is dispatched until its execution is finished. Note that each "getmore" on a cursor
 * is a separate operation. On construction, an OperationContext associates itself with the
 * current client, and only on destruction it deassociates itself. At any time a client can be
 * associated with at most one OperationContext. Each OperationContext has a RecoveryUnit
 * associated with it, though the lifetime is not necesarily the same, see releaseRecoveryUnit
 * and setRecoveryUnit. The operation context also keeps track of some transaction state
 * (RecoveryUnitState) to reduce complexity and duplication in the storage-engine specific
 * RecoveryUnit and to allow better invariant checking.
 ','line_number':96,'multiline':True]
['text':'*
     * Creates an op context with no unique operation ID tracking - prefer using the OperationIdSlot
     * CTOR if possible to avoid OperationId collisions.
     ','line_number':114,'multiline':True]
['text':'*
     * Interface for durability.  Caller DOES NOT own pointer.
     ','line_number':121,'multiline':True]
['text':'*
     * Returns the RecoveryUnit (same return value as recoveryUnit()) but the caller takes
     * ownership of the returned RecoveryUnit, and the OperationContext instance relinquishes
     * ownership. Sets the RecoveryUnit to NULL.
     ','line_number':128,'multiline':True]
['text':'
     * Sets up a new, inactive RecoveryUnit in the OperationContext. Destroys any previous recovery
     * unit and executes its rollback handlers.
     ','line_number':135,'multiline':True]
['text':'
     * Similar to replaceRecoveryUnit(), but returns the previous recovery unit like
     * releaseRecoveryUnit().
     ','line_number':141,'multiline':True]
['text':'*
     * Associates the OperatingContext with a different RecoveryUnit for getMore or
     * subtransactions, see RecoveryUnitSwap. The new state is passed and the old state is
     * returned separately even though the state logically belongs to the RecoveryUnit,
     * as it is managed by the OperationContext.
     ','line_number':148,'multiline':True]
['text':' TODO (SERVER-77213): The locker ownership is being moved to the TransactionResources. Do not','line_number':157,'multiline':False]
['text':' add any new usages to these methods as they will go away and will be folded as an','line_number':158,'multiline':False]
['text':' implementation detail of the Shard Role API.','line_number':159,'multiline':False]
['text':'','line_number':160,'multiline':False]
['text':' The way to access the locker associated with a given OperationContext is through the','line_number':161,'multiline':False]
['text':' shard_role_details::getLocker methods.','line_number':162,'multiline':False]
['text':'*
     * Returns Status::OK() unless this operation is in a killed state.
     ','line_number':170,'multiline':True]
['text':'*
     * Returns the service context under which this operation context runs, or nullptr if there is
     * no such service context.
     ','line_number':175,'multiline':True]
['text':'* Returns the Service under which this operation operates. ','line_number':187,'multiline':True]
['text':'*
     * Returns the client under which this context runs.
     ','line_number':192,'multiline':True]
['text':'*
     * Returns the operation ID associated with this operation.
     ','line_number':199,'multiline':True]
['text':'*
     * Returns the operation UUID associated with this operation or boost::none.
     ','line_number':206,'multiline':True]
['text':'*
     * Sets the operation UUID associated with this operation.
     *
     * This function may only be called once per OperationContext.
     ','line_number':213,'multiline':True]
['text':'*
     * Removes the operation UUID associated with this operation.
     * DO NOT call this function outside `~OperationContext()` and `killAndDelistOperation()`.
     ','line_number':220,'multiline':True]
['text':' TODO (SERVER-80523): BEGIN Expose OperationSessionInfoFromClient as a decoration instead of','line_number':226,'multiline':False]
['text':' projecting all its fields as properties','line_number':227,'multiline':False]
['text':'*
     * Returns the session ID associated with this operation, if there is one.
     ','line_number':229,'multiline':True]
['text':'*
     * Associates a logical session id with this operation context. May only be called once for the
     * lifetime of the operation.
     ','line_number':236,'multiline':True]
['text':'*
     * Returns the transaction number associated with thes operation. The combination of logical
     * session id + transaction number is what constitutes the operation transaction id.
     ','line_number':242,'multiline':True]
['text':'*
     * Associates a transaction number with this operation context. May only be called once for the
     * lifetime of the operation and the operation must have a logical session id assigned.
     ','line_number':250,'multiline':True]
['text':'*
     * Returns the txnRetryCounter associated with this operation.
     ','line_number':256,'multiline':True]
['text':'*
     * Associates a txnRetryCounter with this operation context. May only be called once for the
     * lifetime of the operation and the operation must have a logical session id and a transaction
     * number assigned.
     ','line_number':263,'multiline':True]
['text':'*
     * Returns whether this operation is part of a multi-document transaction. Specifically, it
     * indicates whether the user asked for a multi-document transaction.
     ','line_number':270,'multiline':True]
['text':'*
     * Sets that this operation is part of a multi-document transaction. Once this is set, it cannot
     * be unset.
     ','line_number':278,'multiline':True]
['text':' TODO (SERVER-80523): END Expose OperationSessionInfoFromClient as a decoration instead of','line_number':295,'multiline':False]
['text':' projecting all its fields as properties','line_number':296,'multiline':False]
['text':'*
     * Returns a CancellationToken that will be canceled when the OperationContext is killed via
     * markKilled (including for internal reasons, like the OperationContext deadline being
     * reached).
     ','line_number':298,'multiline':True]
['text':'*
     * Sets a transport Baton on the operation.  This will trigger the Baton on markKilled.
     ','line_number':307,'multiline':True]
['text':'*
     * Retrieves the baton associated with the operation.
     ','line_number':314,'multiline':True]
['text':'*
     * Returns the top-level WriteUnitOfWork associated with this operation context, if any.
     ','line_number':321,'multiline':True]
['text':'*
     * Sets a top-level WriteUnitOfWork for this operation context, to be held for the duration
     * of the given network operation.
     ','line_number':328,'multiline':True]
['text':'*
     * Returns WriteConcernOptions of the current operation
     ','line_number':339,'multiline':True]
['text':'*
     * Returns true if operations should generate oplog entries.
     ','line_number':350,'multiline':True]
['text':'*
     * Returns true if the operation is running lock-free.
     ','line_number':357,'multiline':True]
['text':'*
     * Returns true if operations' durations should be added to serverStatus latency metrics.
     ','line_number':364,'multiline':True]
['text':'*
     * Sets the shouldIncrementLatencyStats flag.
     ','line_number':371,'multiline':True]
['text':'*
     * Identifies the opCtx as an operation which is executing global shutdown.  This has the effect
     * of masking any existing time limits, removing markKill-ability and is slightly stronger than
     * code run under runWithoutInterruptionExceptAtGlobalShutdown, because it is also immune to
     * global shutdown.
     *
     * This should only be called from the registered task of global shutdown and is not
     * recoverable. May only be called by the thread executing on behalf of this OperationContext,
     * and only while it has the Client that owns this OperationContext locked.
     ','line_number':380,'multiline':True]
['text':'*
     * Marks this operation as killed so that subsequent calls to checkForInterrupt and
     * checkForInterruptNoAssert by the thread executing the operation will start returning the
     * specified error code.
     *
     * If multiple threads kill the same operation with different codes, only the first code
     * will be preserved.
     *
     * May be called by any thread that has locked the Client owning this operation context, or
     * by the thread executing this on behalf of this OperationContext.
     ','line_number':392,'multiline':True]
['text':'*
     * Returns the code passed to markKilled if this operation context has been killed previously
     * or ErrorCodes::OK otherwise.
     *
     * May be called by any thread that has locked the Client owning this operation context, or
     * without lock by the thread executing on behalf of this operation context.
     ','line_number':405,'multiline':True]
['text':'*
     * Shortcut method, which checks whether getKillStatus returns a non-OK value. Has the same
     * concurrency rules as getKillStatus.
     ','line_number':419,'multiline':True]
['text':'*
     * Returns the amount of time since the operation was constructed. Uses the system's most
     * precise tick source, and may not be cheap to call in a tight loop.
     ','line_number':427,'multiline':True]
['text':'*
     * Sets the deadline for this operation to the given point in time.
     *
     * To remove a deadline, pass in Date_t::max().
     ','line_number':435,'multiline':True]
['text':'*
     * Sets the deadline for this operation to the maxTime plus the current time reported
     * by the ServiceContext's fast clock source.
     ','line_number':442,'multiline':True]
['text':'*
     * Returns the deadline for this operation, or Date_t::max() if there is no deadline.
     ','line_number':459,'multiline':True]
['text':'*
     * Returns the error code used when this operation's time limit is reached.
     ','line_number':466,'multiline':True]
['text':'*
     * Returns the number of milliseconds remaining for this operation's time limit or
     * Milliseconds::max() if the operation has no time limit.
     ','line_number':471,'multiline':True]
['text':'*
     * NOTE: This is a legacy "max time" method for controlling operation deadlines and it should
     * not be used in new code. Use getRemainingMaxTimeMillis instead.
     *
     * Returns the number of microseconds remaining for this operation's time limit, or the special
     * value Microseconds::max() if the operation has no time limit.
     ','line_number':477,'multiline':True]
['text':'*
     * Some operations coming into the system must be validated to ensure they meet constraints,
     * such as collection namespace length limits or unique index key constraints. However,
     * operations being performed from a source of truth such as during initial sync and oplog
     * application often must ignore constraint violations.
     *
     * Initial sync and oplog application opt in to relaxed constraint checking by setting this
     * value to false.
     ','line_number':488,'multiline':True]
['text':'*
     * This method can be used to tell if an operation requires validation of constraints. This
     * should be preferred to alternatives such as checking if a node is primary or if a client is
     * from a user connection as those have nuances (e.g: primary catch up and client disassociation
     * due to task executors).
     ','line_number':501,'multiline':True]
['text':'*
     * Sets that this operation should always get killed during stepDown and stepUp, regardless of
     * whether or not it's taken a write lock.
     *
     * Note: This function is NOT synchronized with the ReplicationStateTransitionLock!  This means
     * that the node's view of it's replication state can change concurrently with this function
     * running - in which case your operation may _not_ be interrupted by that concurrent
     * replication state change. If you need to ensure that your node does not change
     * replication-state while calling this function, take the RSTL. See SERVER-66353 for more info.
     ','line_number':511,'multiline':True]
['text':'*
     * Indicates that this operation should always get killed during stepDown and stepUp, regardless
     * of whether or not it's taken a write lock.
     ','line_number':525,'multiline':True]
['text':'*
     * Clears metadata associated with a multi-document transaction.
     ','line_number':533,'multiline':True]
['text':'*
     * Returns whether this operation is starting a multi-document transaction.
     ','line_number':548,'multiline':True]
['text':'*
     * Returns whether this operation is continuing (not starting) a multi-document transaction.
     ','line_number':555,'multiline':True]
['text':'*
     * Sets whether this operation is starting a multi-document transaction.
     ','line_number':562,'multiline':True]
['text':'*
     * Sets '_comment'. The client lock must be acquired before calling this method.
     ','line_number':569,'multiline':True]
['text':'*
     * Gets '_comment'. The client lock must be acquired when calling from any thread that does
     * not own the client associated with the operation.
     ','line_number':576,'multiline':True]
['text':' The '_comment' object, if present, will only ever have one field.','line_number':581,'multiline':False]
['text':'*
     * Sets whether this operation is an exhaust command.
     ','line_number':589,'multiline':True]
['text':'*
     * Returns whether this operation is an exhaust command.
     ','line_number':596,'multiline':True]
['text':'*
     * Restore deadline to match the value stored in _storedMaxTime.
     ','line_number':607,'multiline':True]
['text':'*
     * Returns whether this operation must run in read-only mode.
     *
     * If the read-only flag is set on the ServiceContext then:
     * - Internal operations are allowed to perform writes.
     * - User originating operations are not allowed to perform writes.
     ','line_number':612,'multiline':True]
['text':'*
     * Sets whether this operation was started by a compressed command.
     ','line_number':625,'multiline':True]
['text':'*
     * Returns whether this operation was started by a compressed command.
     ','line_number':632,'multiline':True]
['text':'*
     * Returns whether or not a local killOps may kill this opCtx.
     ','line_number':639,'multiline':True]
['text':'*
     * Set to prevent killOps from killing this opCtx even when an LSID is set.
     * You may only call this method prior to setting an LSID on this opCtx.
     * Calls to resetMultiDocumentTransactionState will reset _killOpsExempt to false.
     ','line_number':646,'multiline':True]
['text':' The query sampling options for operations on this opCtx. 'optIn' makes the operations','line_number':656,'multiline':False]
['text':' eligible for query sampling regardless of whether the client is considered as internal by','line_number':657,'multiline':False]
['text':' the sampler. 'optOut' does the opposite.','line_number':658,'multiline':False]
['text':'*
     * Invokes the passed callback while ignoring interrupts. Note that this causes the deadline to
     * be reset to Date_t::max(), but that it can also subsequently be reduced in size after the
     * fact. Additionally handles the dance of try/catching the invocation and checking
     * checkForInterrupt with the guard inactive (to allow a higher level timeout to override a
     * lower level one, or for top level interruption to propagate).
     *
     * This should only be called from the thread executing on behalf of this OperationContext.
     * The Client for this OperationContext should not be locked by the thread calling this
     * function, as this function will acquire the lock internally to modify the OperationContext's
     * interrupt state.
     ','line_number':669,'multiline':True]
['text':' Restore the original interruption and deadline state.','line_number':687,'multiline':False]
['text':' Ignore interrupts until the callback completes.','line_number':694,'multiline':False]
['text':' May throw replacement exception','line_number':703,'multiline':False]
['text':'*
     * Returns true if this operation has a deadline and it has passed according to the fast clock
     * on ServiceContext.
     ','line_number':736,'multiline':True]
['text':'*
     * Sets the deadline and maxTime as described. It is up to the caller to ensure that
     * these correctly correspond.
     ','line_number':742,'multiline':True]
['text':'*
     * Compute maxTime based on the given deadline.
     ','line_number':748,'multiline':True]
['text':'*
     * Returns the timepoint that is "waitFor" ms after now according to the
     * ServiceContext's precise clock.
     ','line_number':753,'multiline':True]
['text':'*
     * Set whether or not operations should generate oplog entries.
     ','line_number':759,'multiline':True]
['text':'*
     * Increment a count to indicate that the operation is running lock-free.
     ','line_number':766,'multiline':True]
['text':'*
     * Schedule the client to be checked every second. If the client has disconnected, the operation
     * will be killed. Periodic checks are not needed if the client's session is compatible with the
     * networking baton associated with this opCtx.
     *
     * If there is no associated baton or it is not a networking baton, this method has no effect.
     ','line_number':776,'multiline':True]
['text':'*
     * If the client is networked, check that its underlying session is still connected. If the
     * session is not connected, kill the operation. The status used to kill the operation will be
     * returned.
     *
     * This will only actually check the underlying session every 500ms regardless of how often this
     * is called, since doing so may be expensive.
     ','line_number':785,'multiline':True]
['text':' Operations run within a transaction will hold a WriteUnitOfWork for the duration in order','line_number':814,'multiline':False]
['text':' to maintain two-phase locking.','line_number':815,'multiline':False]
['text':' Follows the values of ErrorCodes::Error. The default value is 0 (OK), which means the','line_number':818,'multiline':False]
['text':' operation is not killed. If killed, it will contain a specific code. This value changes only','line_number':819,'multiline':False]
['text':' once from OK to some kill code.','line_number':820,'multiline':False]
['text':' Used to cancel all tokens obtained via getCancellationToken() when this OperationContext is','line_number':823,'multiline':False]
['text':' killed.','line_number':824,'multiline':False]
['text':' The timepoint at which this operation exceeds its time limit.','line_number':831,'multiline':False]
['text':' Max operation time requested by the user or by the cursor in the case of a getMore with no','line_number':841,'multiline':False]
['text':' user-specified maxTimeMS. This is tracked with microsecond granularity for the purpose of','line_number':842,'multiline':False]
['text':' assigning unused execution time back to a cursor at the end of an operation, only. The','line_number':843,'multiline':False]
['text':' _deadline and the service context's fast clock are the only values consulted for determining','line_number':844,'multiline':False]
['text':' if the operation's timelimit has been exceeded.','line_number':845,'multiline':False]
['text':' The value of the maxTimeMS requested by user in the case it was overwritten.','line_number':848,'multiline':False]
['text':' Timer counting the elapsed time since the construction of this OperationContext.','line_number':851,'multiline':False]
['text':' Commands from user applications must run validations and enforce constraints. Operations from','line_number':858,'multiline':False]
['text':' a trusted source, such as initial sync or consuming an oplog entry generated by a primary','line_number':859,'multiline':False]
['text':' typically desire to ignore constraints.','line_number':860,'multiline':False]
['text':' Counts how many lock-free read operations are running nested.','line_number':863,'multiline':False]
['text':' Necessary to use a counter rather than a boolean because there is existing code that','line_number':864,'multiline':False]
['text':' destructs lock helpers out of order.','line_number':865,'multiline':False]
['text':' If true, this OpCtx will get interrupted during replica set stepUp and stepDown, regardless','line_number':868,'multiline':False]
['text':' of what locks it's taken.','line_number':869,'multiline':False]
['text':' If populated, this is an owned singleton BSONObj whose only field, 'comment', is a copy of','line_number':874,'multiline':False]
['text':' the 'comment' field from the input command object.','line_number':875,'multiline':False]
['text':' Whether this operation is an exhaust command.','line_number':878,'multiline':False]
['text':' Whether this operation was started by a compressed command.','line_number':881,'multiline':False]
['text':' Prevent this opCtx from being killed by killSessionsLocalKillOps if an LSID is attached.','line_number':884,'multiline':False]
['text':' Normally, the presence of an LSID implies kill-eligibility as it uniquely identifies a','line_number':885,'multiline':False]
['text':' session and can thus be passed into a killSessions command to target that session and its','line_number':886,'multiline':False]
['text':' operations. However, there are some cases where we want the opCtx to have both an LSID and','line_number':887,'multiline':False]
['text':' kill-immunity. Current examples include checking out sessions on replica set step up in order','line_number':888,'multiline':False]
['text':' to refresh locks for prepared tranasctions or abort in-progress transactions.','line_number':889,'multiline':False]
['text':' The query sampling options for operations on this opCtx.','line_number':892,'multiline':False]
['text':' Gets a TimeZoneDatabase pointer from the ServiceContext.','line_number':896,'multiline':False]
['text':'*
 * RAII-style class to turn off replicated writes. Writes do not create oplog entries while the
 * object is in scope.
 ','line_number':903,'multiline':True]
['text':' namespace repl','line_number':925,'multiline':False]
['text':'*
 * RAII-style class to indicate the operation is lock-free and code should behave accordingly.
 ','line_number':927,'multiline':True]
['text':' Allow move operators.','line_number':935,'multiline':False]
['text':' namespace mongo','line_number':959,'multiline':False]
