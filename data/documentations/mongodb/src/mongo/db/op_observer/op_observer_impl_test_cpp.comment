['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' IWYU pragma: no_include "ext/alloc_traits.h"','line_number':30,'multiline':False]
['text':' autocommit ','line_number':151,'multiline':True]
['text':' startTransaction ','line_number':152,'multiline':True]
['text':' autocommit ','line_number':167,'multiline':True]
['text':' startTransaction ','line_number':167,'multiline':True]
['text':' autocommit ','line_number':182,'multiline':True]
['text':' startTransaction ','line_number':182,'multiline':True]
['text':' OpObserverImpl no longer reserves optimes when committing unprepared transactions.','line_number':192,'multiline':False]
['text':' This is now done in TransactionParticipant::Participant::commitUnpreparedTransaction()','line_number':193,'multiline':False]
['text':' prior to notifying the OpObserver. For test coverage specific to empty unprepared','line_number':194,'multiline':False]
['text':' multi-document transactions, see TxnParticipantTest::EmptyUnpreparedTransactionCommit.','line_number':195,'multiline':False]
['text':'prepare=','line_number':206,'multiline':True]
['text':' Set up mongod.','line_number':233,'multiline':False]
['text':' onStepUp() relies on the storage interface to create the config.transactions table.','line_number':238,'multiline':False]
['text':' Set up ReplicationCoordinator and create oplog.','line_number':241,'multiline':False]
['text':' Ensure that we are primary.','line_number':247,'multiline':False]
['text':' Assert that the oplog has the expected number of entries, and return them','line_number':303,'multiline':False]
['text':' The oplogIterator returns the entries in reverse order.','line_number':329,'multiline':False]
['text':' Some unittests reuse the same OperationContext to read the oplog and end up acquiring the','line_number':333,'multiline':False]
['text':' RSTL lock after using the OplogInterfaceLocal. This is a hack to make sure we do not hold','line_number':334,'multiline':False]
['text':' RSTL lock for prepared transactions.','line_number':335,'multiline':False]
['text':' Assert that oplog only has a single entry and return that oplog entry.','line_number':343,'multiline':False]
['text':'invariantOnError=','line_number':359,'multiline':True]
['text':'invariantOnError=','line_number':370,'multiline':True]
['text':'invariantOnError=','line_number':380,'multiline':True]
['text':'invariantOnError=','line_number':394,'multiline':True]
['text':'*
     * The caller must pass a BSONObj container to own the preImage BSONObj part of a
     * `ChangeStreamPreImage`. The `ChangeStreamPreImage` idl declares the preImage BSONObj to not
     * be owned. Thus the BSONObject returned from the collection must outlive any accesses to
     * `ChangeStreamPreImage.getPreImage`.
     ','line_number':402,'multiline':True]
['text':'invariantOnError=','line_number':416,'multiline':True]
['text':' Creates a reasonable set of ReplSettings for most tests.  We need to be able to','line_number':445,'multiline':False]
['text':' override this to create a larger oplog.','line_number':446,'multiline':False]
['text':' Write to the oplog.','line_number':470,'multiline':False]
['text':'fromMigrate','line_number':475,'multiline':True]
['text':' Create expected startIndexBuild command.','line_number':479,'multiline':False]
['text':' Ensure the startIndexBuild fields were correctly set.','line_number':489,'multiline':False]
['text':' Write to the oplog.','line_number':510,'multiline':False]
['text':'fromMigrate','line_number':515,'multiline':True]
['text':' Create expected commitIndexBuild command.','line_number':519,'multiline':False]
['text':' Ensure the commitIndexBuild fields were correctly set.','line_number':529,'multiline':False]
['text':' Write to the oplog.','line_number':550,'multiline':False]
['text':' Create expected abortIndexBuild command.','line_number':561,'multiline':False]
['text':' Ensure the abortIndexBuild fields were correctly set.','line_number':575,'multiline':False]
['text':' Should be able to extract a Status from the 'cause' field.','line_number':580,'multiline':False]
['text':' Create 'collMod' command.','line_number':589,'multiline':False]
['text':' We verify that 'onCollMod' ignores this field.','line_number':595,'multiline':False]
['text':' Write to the oplog.','line_number':608,'multiline':False]
['text':' Ensure that collMod fields were properly added to the oplog entry.','line_number':618,'multiline':False]
['text':' Ensure that the old collection metadata was saved.','line_number':630,'multiline':False]
['text':' Create 'collMod' command.','line_number':649,'multiline':False]
['text':' Write to the oplog.','line_number':660,'multiline':False]
['text':' Ensure that collMod fields were properly added to oplog entry.','line_number':670,'multiline':False]
['text':' Ensure that the old collection metadata was saved and that TTL info is not present.','line_number':675,'multiline':False]
['text':' Create a fake preImageDoc; the tested code path does not care about this value.','line_number':688,'multiline':False]
['text':' Create 'drop' command.','line_number':721,'multiline':False]
['text':' Write to the oplog.','line_number':725,'multiline':False]
['text':'markFromMigrate=','line_number':735,'multiline':True]
['text':' Ensure that drop fields were properly added to oplog entry.','line_number':742,'multiline':False]
['text':' Ensure that the drop optime returned is the same as the last optime in the ReplClientInfo.','line_number':747,'multiline':False]
['text':' Create 'drop' command.','line_number':758,'multiline':False]
['text':' Write to the oplog.','line_number':763,'multiline':False]
['text':'markFromMigrate=','line_number':772,'multiline':True]
['text':' Write to the oplog.','line_number':793,'multiline':False]
['text':'markFromMigrate=','line_number':805,'multiline':True]
['text':' Ensure that renameCollection fields were properly added to oplog entry.','line_number':812,'multiline':False]
['text':' Ensure that the rename optime returned is the same as the last optime in the ReplClientInfo.','line_number':820,'multiline':False]
['text':' rename should not occur across tenants','line_number':833,'multiline':False]
['text':' Write to the oplog.','line_number':837,'multiline':False]
['text':'markFromMigrate=','line_number':848,'multiline':True]
['text':' Ensure that renameCollection fields were properly added to oplog entry.','line_number':855,'multiline':False]
['text':' rename should not occur across tenants','line_number':876,'multiline':False]
['text':' Write to the oplog.','line_number':880,'multiline':False]
['text':'markFromMigrate=','line_number':891,'multiline':True]
['text':' Ensure that renameCollection fields were properly added to oplog entry.','line_number':898,'multiline':False]
['text':' Write to the oplog.','line_number':920,'multiline':False]
['text':'markFromMigrate=','line_number':925,'multiline':True]
['text':' Ensure that renameCollection fields were properly added to oplog entry.','line_number':931,'multiline':False]
['text':' No-op writes should be prohibited.','line_number':949,'multiline':False]
['text':' A dummy invalid catalog entry. We do not need a valid catalog entry for this test.','line_number':962,'multiline':False]
['text':' Write to the oplog.','line_number':969,'multiline':False]
['text':' A dummy invalid catalog entry. We do not need a valid catalog entry for this test.','line_number':1005,'multiline':False]
['text':' Write to the oplog.','line_number':1012,'multiline':False]
['text':'fromMigrate=','line_number':1058,'multiline':True]
['text':'defaultFromMigrate=','line_number':1059,'multiline':True]
['text':' Create a fake preImageDoc; the tested code path does not care about this value.','line_number':1077,'multiline':False]
['text':' This test does not call `OpObserver::aboutToDelete`. That method has the side-effect','line_number':1118,'multiline':False]
['text':' of setting of `documentKey` on the delete for sharding purposes.','line_number':1119,'multiline':False]
['text':' `OpObserverImpl::onDelete` asserts its existence.','line_number':1120,'multiline':False]
['text':'*
 * Test fixture for testing OpObserver behavior specific to the SessionCatalog.
 ','line_number':1136,'multiline':True]
['text':'*
     * Simulate a new write occurring on given session with the given transaction number and
     * statement id.
     ','line_number':1147,'multiline':True]
['text':' autocommit ','line_number':1157,'multiline':True]
['text':' startTransaction ','line_number':1157,'multiline':True]
['text':' Dummy timestamp.','line_number':1162,'multiline':False]
['text':' Simulate a write occurring on that session','line_number':1192,'multiline':False]
['text':' Check that the statement executed','line_number':1195,'multiline':False]
['text':' Because there are no sessions to rollback, the OpObserver should not invalidate the in-memory','line_number':1199,'multiline':False]
['text':' session state, so the check after this should still succeed.','line_number':1200,'multiline':False]
['text':'doc=','line_number':1249,'multiline':True]
['text':'prepare=','line_number':1324,'multiline':True]
['text':' Don't write oplog entry on secondaries.','line_number':1328,'multiline':False]
['text':'*
 * Test fixture for testing OpObserver behavior specific to multi-document transactions.
 ','line_number':1365,'multiline':True]
['text':'fromMigrate=','line_number':1465,'multiline':True]
['text':'defaultFromMigrate=','line_number':1466,'multiline':True]
['text':' Create a fake preImageDoc; the tested code path does not care about this value.','line_number':1469,'multiline':False]
['text':' One reserved slot for each statement, plus the prepare.','line_number':1487,'multiline':False]
['text':'fromMigrate=','line_number':1550,'multiline':True]
['text':'defaultFromMigrate=','line_number':1551,'multiline':True]
['text':' Mimic committing the transaction.','line_number':1561,'multiline':False]
['text':'fromMigrate=','line_number':1622,'multiline':True]
['text':'defaultFromMigrate=','line_number':1623,'multiline':True]
['text':' Mimic aborting the transaction.','line_number':1631,'multiline':False]
['text':'fromMigrate=','line_number':1686,'multiline':True]
['text':'defaultFromMigrate=','line_number':1687,'multiline':True]
['text':' Assert no oplog entries were written.','line_number':1693,'multiline':False]
['text':' Abort the storage-transaction without calling the OpObserver.','line_number':1757,'multiline':False]
['text':' Mimic aborting the transaction.','line_number':1777,'multiline':False]
['text':' Abort the storage-transaction without calling the OpObserver.','line_number':1787,'multiline':False]
['text':'fromMigrate=','line_number':1808,'multiline':True]
['text':'defaultFromMigrate=','line_number':1809,'multiline':True]
['text':' Abort the storage-transaction without calling the OpObserver.','line_number':1833,'multiline':False]
['text':' Mimic committing the transaction.','line_number':1857,'multiline':False]
['text':'fromMigrate=','line_number':1898,'multiline':True]
['text':'defaultFromMigrate=','line_number':1899,'multiline':True]
['text':'fromMigrate=','line_number':1904,'multiline':True]
['text':'defaultFromMigrate=','line_number':1905,'multiline':True]
['text':'fromMigrate=','line_number':1972,'multiline':True]
['text':'defaultFromMigrate=','line_number':1973,'multiline':True]
['text':'fromMigrate=','line_number':1978,'multiline':True]
['text':'defaultFromMigrate=','line_number':1979,'multiline':True]
['text':' This test assumes that the top level tenantId matches the tenantId in the first entry','line_number':2021,'multiline':False]
['text':' This test assumes that the top level tenantId matches the tenantId in the first entry','line_number':2145,'multiline':False]
['text':' This test assumes that the top level tenantId matches the tenantId in the first entry','line_number':2233,'multiline':False]
['text':' Needs to override to set serverless mode.','line_number':2241,'multiline':False]
['text':' Add a tenant migration access blocker on donor for blocking writes.','line_number':2249,'multiline':False]
['text':'fromMigrate=','line_number':2267,'multiline':True]
['text':'defaultFromMigrate=','line_number':2268,'multiline':True]
['text':'*
 * Test fixture for testing OpObserver behavior specific to retryable findAndModify.
 ','line_number':2282,'multiline':True]
['text':' tenantId ','line_number':2300,'multiline':True]
['text':' Asserts that only a single oplog entry was created. In essence, we did not create any','line_number':2319,'multiline':False]
['text':' no-op image entries in the oplog.','line_number':2320,'multiline':False]
['text':' Asserts that only a single oplog entry was created. In essence, we did not create any','line_number':2351,'multiline':False]
['text':' no-op image entries in the oplog.','line_number':2352,'multiline':False]
['text':' Asserts that only a single oplog entry was created. In essence, we did not create any','line_number':2376,'multiline':False]
['text':' no-op image entries in the oplog.','line_number':2377,'multiline':False]
['text':' namespace','line_number':2545,'multiline':False]
['text':' 'getNextOpTimes' requires us to be inside a WUOW when reserving oplog slots.','line_number':2612,'multiline':False]
['text':' If 'updateOplogEntry' has opTime T, opTime T-1 must be reserved for potential','line_number':2651,'multiline':False]
['text':' forged noop oplog entry for the pre/postImage written to the side collection.','line_number':2652,'multiline':False]
['text':' Session id is missing only for non-retryable option.','line_number':2661,'multiline':False]
['text':' Regular updates.','line_number':2689,'multiline':False]
['text':' FindAndModify asking for a preImage.','line_number':2693,'multiline':False]
['text':' FindAndModify asking for a postImage.','line_number':2698,'multiline':False]
['text':' Create a registry that registers the OpObserverImpl, FindAndModifyImagesOpObserver, and','line_number':2716,'multiline':False]
['text':' ChangeStreamPreImagesOpObserver.','line_number':2717,'multiline':False]
['text':' These OpObservers work together to ensure that images for retryable findAndModify and','line_number':2718,'multiline':False]
['text':' change streams are written correctly to the respective side collections.','line_number':2719,'multiline':False]
['text':' It falls into cases where `ReservedTimes` is expected to be instantiated. Due to strong','line_number':2720,'multiline':False]
['text':' encapsulation, we use the registry that managers the `ReservedTimes` on our behalf.','line_number':2721,'multiline':False]
['text':' Phase 1: Clearing any state and setting up fixtures/the update call.','line_number':2735,'multiline':False]
['text':' Phase 2: Call the code we're testing.','line_number':2743,'multiline':False]
['text':' Phase 3: Analyze the results:','line_number':2754,'multiline':False]
['text':' This `getNOplogEntries` also asserts that all oplogs are retrieved.','line_number':2755,'multiline':False]
['text':' Entries are returned in ascending timestamp order.','line_number':2757,'multiline':False]
['text':' Create a registry that registers the OpObserverImpl, FindAndModifyImagesOpObserver, and','line_number':2765,'multiline':False]
['text':' ChangeStreamPreImagesOpObserver.','line_number':2766,'multiline':False]
['text':' These OpObservers work together to ensure that images for retryable findAndModify and','line_number':2767,'multiline':False]
['text':' change streams are written correctly to the respective side collections.','line_number':2768,'multiline':False]
['text':' It falls into cases where `ReservedTimes` is expected to be instantiated. Due to strong','line_number':2769,'multiline':False]
['text':' encapsulation, we use the registry that managers the `ReservedTimes` on our behalf.','line_number':2770,'multiline':False]
['text':' Phase 1: Clearing any state and setting up fixtures/the update call.','line_number':2784,'multiline':False]
['text':' Phase 2: Call the code we're testing.','line_number':2794,'multiline':False]
['text':' Phase 3: Analyze the results:','line_number':2806,'multiline':False]
['text':' This `getNOplogEntries` also asserts that all oplogs are retrieved.','line_number':2807,'multiline':False]
['text':' Entries are returned in ascending timestamp order.','line_number':2809,'multiline':False]
['text':' Create a registry that only registers the Impl. It can be challenging to call methods on','line_number':2823,'multiline':False]
['text':' the Impl directly. It falls into cases where `ReservedTimes` is expected to be instantiated.','line_number':2824,'multiline':False]
['text':' Due to strong encapsulation, we use the registry that managers the `ReservedTimes` on our','line_number':2825,'multiline':False]
['text':' behalf.','line_number':2826,'multiline':False]
['text':' Phase 1: Clearing any state and setting up fixtures/the update call.','line_number':2850,'multiline':False]
['text':' Phase 2: Call the code we're testing.','line_number':2864,'multiline':False]
['text':'fromMigrate=','line_number':2871,'multiline':True]
['text':'defaultFromMigrate=','line_number':2872,'multiline':True]
['text':' Phase 3: Analyze the results:','line_number':2875,'multiline':False]
['text':' ----','line_number':2876,'multiline':False]
['text':' This `getNOplogEntries` also asserts that all oplogs are retrieved.','line_number':2877,'multiline':False]
['text':' Entries are returned in ascending timestamp order.','line_number':2879,'multiline':False]
['text':' Only for retryable writes:','line_number':2891,'multiline':False]
['text':' When we insert multiple documents in retryable writes, each insert will "link"','line_number':2896,'multiline':False]
['text':' back to the previous insert. This code verifies that C["prevOpTime"] -> B and','line_number':2897,'multiline':False]
['text':' B["prevOpTime"] -> A.','line_number':2898,'multiline':False]
['text':' Also assert for retryable writes that the `config.transactions` entry's','line_number':2909,'multiline':False]
['text':' `lastWriteOpTime` and `txnNum` reflects the latest oplog entry.','line_number':2910,'multiline':False]
['text':' The maximum numbers of documents that can be deleted in a batch. Assumes _id of integer type.','line_number':2953,'multiline':False]
['text':' This limit should be chosen such that the total size of delete operations stays under the','line_number':2954,'multiline':False]
['text':' BSON 16 MB limit.','line_number':2955,'multiline':False]
['text':' In practice, the number of delete operations is controlled by the server parameters','line_number':2956,'multiline':False]
['text':' batchedDeletesTargetStagedDocBytes and batchedDeletesTargetBatchDocs, which have much','line_number':2957,'multiline':False]
['text':' lower defaults.','line_number':2958,'multiline':False]
['text':' See maxNumberOfBatchedOperationsInSingleOplogEntry and','line_number':2959,'multiline':False]
['text':' maxSizeOfBatchedOperationsInSingleOplogEntryBytes.','line_number':2960,'multiline':False]
['text':' Verifies that a WriteUnitOfWork with groupOplogEntries=true replicates its writes as a single','line_number':2968,'multiline':False]
['text':' applyOps. Tests WUOWs batching a range of 1 to 5 deletes (inclusive).','line_number':2969,'multiline':False]
['text':' Setup.','line_number':2980,'multiline':False]
['text':' Run the test with WUOW's grouping 1 to 5 deletions.','line_number':2986,'multiline':False]
['text':' Start a WUOW with groupOplogEntries=true. Verify that initialises the','line_number':2989,'multiline':False]
['text':' BatchedWriteContext.','line_number':2990,'multiline':False]
['text':' groupOplogEntries ','line_number':2993,'multiline':True]
['text':' This test does not call `OpObserver::aboutToDelete`. That method has the','line_number':2999,'multiline':False]
['text':' side-effect of setting of `documentKey` on the delete for sharding purposes.','line_number':3000,'multiline':False]
['text':' `OpObserverImpl::onDelete` asserts its existence.','line_number':3001,'multiline':False]
['text':' Retrieve the oplog entries. We expect 'docsToBeBatched' oplog entries because of','line_number':3010,'multiline':False]
['text':' previous iteration of this loop that exercised previous batch sizes.','line_number':3011,'multiline':False]
['text':' Entries in ascending timestamp order, so fetch the last one at the back of the','line_number':3013,'multiline':False]
['text':' vector.','line_number':3014,'multiline':False]
['text':' The batch consists of an applyOps, whose array contains all deletes issued within the','line_number':3018,'multiline':False]
['text':' WUOW.','line_number':3019,'multiline':False]
['text':' Verifies that a WriteUnitOfWork with groupOplogEntries=true constisting of an insert, an','line_number':3036,'multiline':False]
['text':' update and a delete replicates as a single applyOps.','line_number':3037,'multiline':False]
['text':' Setup.','line_number':3039,'multiline':False]
['text':' Start a WUOW with groupOplogEntries=true. Verify that initialises the','line_number':3045,'multiline':False]
['text':' BatchedWriteContext.','line_number':3046,'multiline':False]
['text':' groupOplogEntries ','line_number':3049,'multiline':True]
['text':' (0) Insert','line_number':3054,'multiline':False]
['text':'fromMigrate=','line_number':3064,'multiline':True]
['text':'defaultFromMigrate=','line_number':3065,'multiline':True]
['text':' (1) Delete','line_number':3067,'multiline':False]
['text':' (2) Update','line_number':3075,'multiline':False]
['text':' And commit the WUOW','line_number':3087,'multiline':False]
['text':' Retrieve the oplog entries. Implicitly asserts that there's one and only one oplog entry.','line_number':3090,'multiline':False]
['text':' The batch consists of an applyOps, whose array contains the three writes issued within','line_number':3095,'multiline':False]
['text':' the WUOW.','line_number':3096,'multiline':False]
['text':' Repeat the same test as above, but assert tenantId is included when available','line_number':3130,'multiline':False]
['text':' Setup.','line_number':3134,'multiline':False]
['text':' Start a WUOW with groupOplogEntries=true. Verify that initialises the','line_number':3140,'multiline':False]
['text':' BatchedWriteContext.','line_number':3141,'multiline':False]
['text':' groupOplogEntries ','line_number':3144,'multiline':True]
['text':' (0) Insert','line_number':3149,'multiline':False]
['text':'fromMigrate=','line_number':3159,'multiline':True]
['text':'defaultFromMigrate=','line_number':3160,'multiline':True]
['text':' (1) Delete','line_number':3162,'multiline':False]
['text':' (2) Update','line_number':3170,'multiline':False]
['text':' And commit the WUOW','line_number':3182,'multiline':False]
['text':' Retrieve the oplog entries. Implicitly asserts that there's one and only one oplog entry.','line_number':3185,'multiline':False]
['text':' The batch consists of an applyOps, whose array contains the three writes issued within','line_number':3190,'multiline':False]
['text':' the WUOW.','line_number':3191,'multiline':False]
['text':' Verifies an empty WUOW doesn't generate an oplog entry.','line_number':3239,'multiline':False]
['text':' Setup.','line_number':3241,'multiline':False]
['text':' Start and commit an empty WUOW.','line_number':3246,'multiline':False]
['text':' groupOplogEntries ','line_number':3247,'multiline':True]
['text':' The getNOplogEntries call below asserts that the oplog is empty.','line_number':3250,'multiline':False]
['text':' Verifies a large WUOW that is within 16MB of oplog entry succeeds.','line_number':3254,'multiline':False]
['text':' Setup.','line_number':3256,'multiline':False]
['text':' groupOplogEntries ','line_number':3263,'multiline':True]
['text':' Delete BatchedWriteOutputsTest::maxDeleteOpsInBatch documents in a single batch, which is the','line_number':3265,'multiline':False]
['text':' maximum number of docs that can be batched while staying within 16MB of applyOps.','line_number':3266,'multiline':False]
['text':' This test does not call `OpObserver::aboutToDelete`. That method has the side-effect','line_number':3268,'multiline':False]
['text':' of setting of `documentKey` on the delete for sharding purposes.','line_number':3269,'multiline':False]
['text':' `OpObserverImpl::onDelete` asserts its existence.','line_number':3270,'multiline':False]
['text':' Retrieve the oplog entries, implicitly asserting that there's exactly one entry in the','line_number':3279,'multiline':False]
['text':' whole oplog.','line_number':3280,'multiline':False]
['text':' The batch consists of an applyOps, whose array contains all deletes issued within the','line_number':3285,'multiline':False]
['text':' WUOW.','line_number':3286,'multiline':False]
['text':' Verifies a WUOW that would result in a an oplog entry >16MB fails with TransactionTooLarge.','line_number':3302,'multiline':False]
['text':' Setup.','line_number':3307,'multiline':False]
['text':' groupOplogEntries ','line_number':3314,'multiline':True]
['text':' Attempt to delete more documents than allowed in a single applyOps batch because it','line_number':3316,'multiline':False]
['text':' the generated entry exceeds the limit of 16MB for an applyOps entry.','line_number':3317,'multiline':False]
['text':' This test does not call `OpObserver::aboutToDelete`. That method has the side-effect','line_number':3322,'multiline':False]
['text':' of setting of `documentKey` on the delete for sharding purposes.','line_number':3323,'multiline':False]
['text':' `OpObserverImpl::onDelete` asserts its existence.','line_number':3324,'multiline':False]
['text':' This test used to rely on the BSONObjBuilder in packTransactionStatementsForApplyOps()','line_number':3332,'multiline':False]
['text':' to throw a TransactionTooLarge exception when it is unable to build a BSONObj with the','line_number':3333,'multiline':False]
['text':' delete operations. Now, we check the limit earlier in OpObserver::onBatchedWriteCommit()','line_number':3334,'multiline':False]
['text':' using the results from TransactionOperations::getApplyOpsInfo().','line_number':3335,'multiline':False]
['text':' The getNOplogEntries call below asserts that the oplog is empty.','line_number':3338,'multiline':False]
['text':' If 'deleteOplogEntry' has opTime T, opTime T-1 must be reserved for potential','line_number':3395,'multiline':False]
['text':' forged noop oplog entry for the preImage written to the side collection.','line_number':3396,'multiline':False]
['text':' Session id is missing only for non-retryable option.','line_number':3405,'multiline':False]
['text':' Create a registry that registers the OpObserverImpl, FindAndModifyImagesOpObserver, and','line_number':3440,'multiline':False]
['text':' ChangeStreamPreImagesOpObserver.','line_number':3441,'multiline':False]
['text':' These OpObservers work together to ensure that images for retryable findAndModify and','line_number':3442,'multiline':False]
['text':' change streams are written correctly to the respective side collections.','line_number':3443,'multiline':False]
['text':' It falls into cases where `ReservedTimes` is expected to be instantiated. Due to strong','line_number':3444,'multiline':False]
['text':' encapsulation, we use the registry that managers the `ReservedTimes` on our behalf.','line_number':3445,'multiline':False]
['text':' Phase 1: Clearing any state and setting up fixtures/the delete call.','line_number':3459,'multiline':False]
['text':' Phase 2: Call the code we're testing.','line_number':3467,'multiline':False]
['text':' This test does not call `OpObserver::aboutToDelete`. That method has the side-effect','line_number':3473,'multiline':False]
['text':' of setting of `documentKey` on the delete for sharding purposes.','line_number':3474,'multiline':False]
['text':' `OpObserverImpl::onDelete` asserts its existence.','line_number':3475,'multiline':False]
['text':' Phase 3: Analyze the results:','line_number':3484,'multiline':False]
['text':' This `getNOplogEntries` also asserts that all oplogs are retrieved.','line_number':3485,'multiline':False]
['text':' Entries are returned in ascending timestamp order.','line_number':3487,'multiline':False]
['text':' Create a registry that registers the OpObserverImpl, FindAndModifyImagesOpObserver, and','line_number':3495,'multiline':False]
['text':' ChangeStreamPreImagesOpObserver.','line_number':3496,'multiline':False]
['text':' These OpObservers work together to ensure that images for retryable findAndModify and','line_number':3497,'multiline':False]
['text':' change streams are written correctly to the respective side collections.','line_number':3498,'multiline':False]
['text':' It falls into cases where `ReservedTimes` is expected to be instantiated. Due to strong','line_number':3499,'multiline':False]
['text':' encapsulation, we use the registry that managers the `ReservedTimes` on our behalf.','line_number':3500,'multiline':False]
['text':' Phase 1: Clearing any state and setting up fixtures/the delete call.','line_number':3514,'multiline':False]
['text':' Phase 2: Call the code we're testing.','line_number':3524,'multiline':False]
['text':' This test does not call `OpObserver::aboutToDelete`. That method has the side-effect','line_number':3531,'multiline':False]
['text':' of setting of `documentKey` on the delete for sharding purposes.','line_number':3532,'multiline':False]
['text':' `OpObserverImpl::onDelete` asserts its existence.','line_number':3533,'multiline':False]
['text':' Phase 3: Analyze the results:','line_number':3539,'multiline':False]
['text':' This `getNOplogEntries` also asserts that all oplogs are retrieved.','line_number':3540,'multiline':False]
['text':' Entries are returned in ascending timestamp order.','line_number':3542,'multiline':False]
['text':'fromMigrate=','line_number':3579,'multiline':True]
['text':'defaultFromMigrate=','line_number':3580,'multiline':True]
['text':' The implicit commit oplog entry.','line_number':3591,'multiline':False]
['text':'fromMigrate=','line_number':3617,'multiline':True]
['text':'defaultFromMigrate=','line_number':3618,'multiline':True]
['text':'fromMigrate=','line_number':3623,'multiline':True]
['text':'defaultFromMigrate=','line_number':3624,'multiline':True]
['text':' This should be the implicit commit oplog entry, indicated by the absence of the','line_number':3665,'multiline':False]
['text':' 'partialTxn' field.','line_number':3666,'multiline':False]
['text':' This should be the implicit commit oplog entry, indicated by the absence of the','line_number':3735,'multiline':False]
['text':' 'partialTxn' field.','line_number':3736,'multiline':False]
['text':' This should be the implicit commit oplog entry, indicated by the absence of the','line_number':3790,'multiline':False]
['text':' 'partialTxn' field.','line_number':3791,'multiline':False]
['text':'fromMigrate=','line_number':3819,'multiline':True]
['text':'defaultFromMigrate=','line_number':3820,'multiline':True]
['text':'fromMigrate=','line_number':3825,'multiline':True]
['text':'defaultFromMigrate=','line_number':3826,'multiline':True]
['text':'fromMigrate=','line_number':4040,'multiline':True]
['text':'defaultFromMigrate=','line_number':4041,'multiline':True]
['text':' This should be the implicit prepare entry.','line_number':4055,'multiline':False]
['text':' Reserve oplog entry for the commit oplog entry.','line_number':4067,'multiline':False]
['text':' Mimic committing the transaction.','line_number':4076,'multiline':False]
['text':' commitTimestamp must be greater than the prepareTimestamp.','line_number':4080,'multiline':False]
['text':' startTimestamp should no longer be set once the transaction has been committed.','line_number':4103,'multiline':False]
['text':'fromMigrate=','line_number':4122,'multiline':True]
['text':'defaultFromMigrate=','line_number':4123,'multiline':True]
['text':' Reserve oplog entry for the abort oplog entry.','line_number':4143,'multiline':False]
['text':' Mimic aborting the transaction by resetting the WUOW.','line_number':4152,'multiline':False]
['text':' startOpTime should no longer be set once a transaction has been aborted.','line_number':4173,'multiline':False]
['text':'fromMigrate=','line_number':4195,'multiline':True]
['text':'defaultFromMigrate=','line_number':4196,'multiline':True]
['text':'fromMigrate=','line_number':4201,'multiline':True]
['text':'defaultFromMigrate=','line_number':4202,'multiline':True]
['text':'fromMigrate=','line_number':4257,'multiline':True]
['text':'defaultFromMigrate=','line_number':4258,'multiline':True]
['text':'fromMigrate=','line_number':4263,'multiline':True]
['text':'defaultFromMigrate=','line_number':4264,'multiline':True]
['text':'fromMigrate=','line_number':4325,'multiline':True]
['text':'defaultFromMigrate=','line_number':4326,'multiline':True]
['text':' This should be the implicit prepare oplog entry.','line_number':4336,'multiline':False]
['text':' If we are only going to write a single prepare oplog entry, but we have reserved multiple','line_number':4342,'multiline':False]
['text':' oplog slots, at T=1 and T=2, for example, then the 'prepare' oplog entry should be','line_number':4343,'multiline':False]
['text':' written at T=2 i.e. the last reserved slot.  In this case, the 'startOpTime' of the','line_number':4344,'multiline':False]
['text':' transaction should also be set to T=2, not T=1. We verify that below.','line_number':4345,'multiline':False]
['text':' Reserve oplog entry for the commit oplog entry.','line_number':4350,'multiline':False]
['text':' Mimic committing the transaction.','line_number':4358,'multiline':False]
['text':' commitTimestamp must be greater than the prepareTimestamp.','line_number':4362,'multiline':False]
['text':' startTimestamp should no longer be set once the transaction has been committed.','line_number':4383,'multiline':False]
['text':'*
 * Test fixture with sessions and an extra-large oplog for testing large transactions.
 ','line_number':4387,'multiline':True]
['text':' We need an oplog comfortably large enough to hold an oplog entry that exceeds the','line_number':4394,'multiline':False]
['text':' BSON size limit.  Otherwise we will get the wrong error code when trying to write','line_number':4395,'multiline':False]
['text':' one.','line_number':4396,'multiline':False]
['text':' Tests that a large transaction may be committed.  This test creates a transaction with two','line_number':4403,'multiline':False]
['text':' operations that together are just big enough to exceed the size limit, which should result in','line_number':4404,'multiline':False]
['text':' a two oplog entry transaction.','line_number':4405,'multiline':False]
['text':' This size is crafted such that two operations of this size are not too big to fit in a','line_number':4410,'multiline':False]
['text':' single oplog entry, but two operations plus oplog overhead are too big to fit in a single','line_number':4411,'multiline':False]
['text':' oplog entry.','line_number':4412,'multiline':False]
['text':' Put initial defaults in the cache.','line_number':4457,'multiline':False]
['text':' Change the mock's defaults, but don't invalidate the cache yet. The cache should still','line_number':4468,'multiline':False]
['text':' return the original defaults.','line_number':4469,'multiline':False]
['text':' Rollback to a timestamp should invalidate the cache and getting the defaults should now','line_number':4481,'multiline':False]
['text':' return the latest value.','line_number':4482,'multiline':False]
['text':' Need to set serverless.','line_number':4495,'multiline':False]
['text':' Add a tenant migration access blocker on donor for blocking writes.','line_number':4504,'multiline':False]
['text':'fromMigrate=','line_number':4521,'multiline':True]
['text':'defaultFromMigrate=','line_number':4522,'multiline':True]
['text':' namespace','line_number':4530,'multiline':False]
['text':' namespace mongo','line_number':4531,'multiline':False]
