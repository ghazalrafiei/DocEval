['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' IWYU pragma: no_include "ext/alloc_traits.h"','line_number':34,'multiline':False]
['text':'*
 * Generic function that logs an operation.
 * Intended to reduce branching at call-sites by accepting the least common denominator
 * type: a MutableOplogEntry.
 *
 * 'fromMigrate' is generally hard-coded to false, but is supplied by a few
 * scenarios from mongos related behavior.
 *
 * If in a transaction, returns a null OpTime. Otherwise, returns the OpTime the operation
 * was logged with.
 ','line_number':143,'multiline':True]
['text':'assignWallClockTime=','line_number':170,'multiline':True]
['text':'*
 * Updates the session state with the last write timestamp and transaction for that session.
 *
 * In the case of writes with transaction/statement id, this method will be recursively entered a
 * second time for the actual write to the transactions table. Since this write does not generate an
 * oplog entry, the recursion will stop at this point.
 ','line_number':174,'multiline':True]
['text':' If the first statement written in uninitialized, then all the statements are assumed to','line_number':190,'multiline':False]
['text':' be uninitialized.','line_number':191,'multiline':False]
['text':' We add these here since they may not exist if we return early.','line_number':194,'multiline':False]
['text':'*
 * Given the collection count from Collection::numRecords(), create and return the object for the
 * 'o2' field of a drop or rename oplog entry. If the collection count exceeds the upper limit of a
 * BSON NumberLong (long long), we will add a count of -1 and append a message with the original
 * collection count.
 *
 * Replication rollback uses this field to correct correction counts on drop-pending collections.
 ','line_number':204,'multiline':True]
['text':'*
 * Write oplog entry(ies) for the update operation.
 ','line_number':227,'multiline':True]
['text':'assignWallClockTime','line_number':254,'multiline':True]
['text':'*
 * Write oplog entry(ies) for the delete operation.
 ','line_number':259,'multiline':True]
['text':'assignWallClockTime','line_number':284,'multiline':True]
['text':' This function returns whether a timestamp for a catalog write when beginning an index build,','line_number':290,'multiline':False]
['text':' or aborting an index build is necessary. There are four scenarios:','line_number':291,'multiline':False]
['text':' 1. A timestamp is already set -- replication application sets a timestamp ahead of time.','line_number':293,'multiline':False]
['text':' This could include the phase of initial sync where it applies oplog entries.  Also,','line_number':294,'multiline':False]
['text':' primaries performing an index build via `applyOps` may have a wrapping commit timestamp.','line_number':295,'multiline':False]
['text':' 2. If the node is initial syncing, we do not set a timestamp.','line_number':299,'multiline':False]
['text':' 3. If the index build is on the local database, do not timestamp.','line_number':304,'multiline':False]
['text':' 4. All other cases, we generate a timestamp by writing a no-op oplog entry.  This is','line_number':308,'multiline':False]
['text':' better than using a ghost timestamp.  Writing an oplog entry ensures this node is','line_number':309,'multiline':False]
['text':' primary.','line_number':310,'multiline':False]
['text':' The rollback implementation requires the collection name to list affected namespaces.','line_number':323,'multiline':False]
['text':' On global index drops, persist the number of records into the 'o2' field similar to a','line_number':330,'multiline':False]
['text':' collection drop. This allows for efficiently restoring the index keys count after rollback','line_number':331,'multiline':False]
['text':' without forcing a collection scan.','line_number':332,'multiline':False]
['text':' The 'ns' field is technically redundant as it can be derived from the uuid, however it's a','line_number':339,'multiline':False]
['text':' required oplog entry field.','line_number':340,'multiline':False]
['text':' This is a retryable write: populate the lsid, txnNumber and stmtId fields.','line_number':346,'multiline':False]
['text':' The oplog link to previous statement is empty and the stmtId is zero because this is a','line_number':347,'multiline':False]
['text':' single-statement command replicating as a single createGlobalIndex/dropGlobalIndex oplog','line_number':348,'multiline':False]
['text':' entry.','line_number':349,'multiline':False]
['text':'assignWallClockTime','line_number':355,'multiline':True]
['text':' Register the retryable write to in-memory transactions table.','line_number':357,'multiline':False]
['text':' namespace','line_number':364,'multiline':False]
['text':' numKeys ','line_number':377,'multiline':True]
['text':'assignWallClockTime','line_number':453,'multiline':True]
['text':'assignWallClockTime','line_number':522,'multiline':True]
['text':' Some functions that extract a Status from a BSONObj, such as getStatusFromCommandResult(),','line_number':544,'multiline':False]
['text':' expect the 'ok' field.','line_number':545,'multiline':False]
['text':'assignWallClockTime','line_number':558,'multiline':True]
['text':' The number of entries in 'fromMigrate' should be consistent with the number of insert','line_number':574,'multiline':False]
['text':' operations in [begin, end). Also, 'fromMigrate' is a sharding concept, so there is no','line_number':575,'multiline':False]
['text':' need to check 'fromMigrate' for inserts that are not replicated. See SERVER-75829.','line_number':576,'multiline':False]
['text':' If this oplog entry is from a tenant migration, include the tenant migration','line_number':580,'multiline':False]
['text':' UUID and optional donor timeline metadata.','line_number':581,'multiline':False]
['text':' Use OplogAccessMode::kLogOp to avoid recursive locking.','line_number':596,'multiline':False]
['text':' Make a copy from the template for each insert oplog entry.','line_number':606,'multiline':False]
['text':' Make a mutable copy.','line_number':608,'multiline':False]
['text':' Fetch optime now, if not already fetched.','line_number':610,'multiline':False]
['text':' The storage engine will assign the RecordId based on the "ts" field of the oplog entry,','line_number':637,'multiline':False]
['text':' see record_id_helpers::extractKey.','line_number':638,'multiline':False]
['text':'isAbortIndexBuild=','line_number':665,'multiline':True]
['text':' Return early, possibly uassert for retryable writes if isOplogDisabledFor is true','line_number':675,'multiline':False]
['text':' namespace','line_number':691,'multiline':False]
['text':' Do not add writes to the profile collection to the list of transaction operations, since','line_number':737,'multiline':False]
['text':' these are done outside the transaction. There is no top-level WriteUnitOfWork when we are','line_number':738,'multiline':False]
['text':' in a SideTransactionBlock.','line_number':739,'multiline':False]
['text':' Ensure well-formed embedded ReplOperation for logging.','line_number':762,'multiline':False]
['text':' This means setting optype, nss, and object at the minimum.','line_number':763,'multiline':False]
['text':' _shardsvrInsertGlobalIndexKey must run inside a multi-doc transaction.','line_number':819,'multiline':False]
['text':' _shardsvrDeleteGlobalIndexKey must run inside a multi-doc transaction.','line_number':839,'multiline':False]
['text':' If the failpoint specifies no collection or matches the existing one, fail.','line_number':860,'multiline':False]
['text':' Do not log a no-op operation; see SERVER-21738','line_number':865,'multiline':False]
['text':' ShardingWriteRouter only has boost::none scopedCollectionDescription when not in a','line_number':948,'multiline':False]
['text':' sharded cluster.','line_number':949,'multiline':False]
['text':' If we've stored a preImage:','line_number':970,'multiline':False]
['text':' Or if we're storing a postImage.','line_number':975,'multiline':False]
['text':' If the oplog entry has `needsRetryImage` (retryable findAndModify), gather the','line_number':985,'multiline':False]
['text':' pre/post image information to be stored in the the image collection.','line_number':986,'multiline':False]
['text':'imageDoc=','line_number':991,'multiline':True]
['text':' no need to create ShardingWriteRouter if isOplogDisabledFor is true','line_number':1019,'multiline':False]
['text':' If the oplog entry has `needsRetryImage` (retryable findAndModify), gather the','line_number':1121,'multiline':False]
['text':' pre/post image information to be stored in the the image collection.','line_number':1122,'multiline':False]
['text':'assignWallClockTime','line_number':1161,'multiline':True]
['text':' do not replicate system.profile modifications','line_number':1171,'multiline':False]
['text':' do not replicate system.profile modifications','line_number':1215,'multiline':False]
['text':' Create the 'o2' field object. We save the old collection metadata and TTL expiration.','line_number':1217,'multiline':False]
['text':'assignWallClockTime','line_number':1247,'multiline':True]
['text':' Make sure the UUID values in the Collection metadata, the Collection object, and the UUID','line_number':1258,'multiline':False]
['text':' catalog are all present and equal.','line_number':1259,'multiline':False]
['text':' Some unit tests call the op observer on an unregistered Database.','line_number':1263,'multiline':False]
['text':'assignWallClockTime','line_number':1280,'multiline':True]
['text':' Do not replicate system.profile modifications.','line_number':1299,'multiline':False]
['text':'assignWallClockTime','line_number':1310,'multiline':True]
['text':'assignWallClockTime','line_number':1342,'multiline':True]
['text':'assignWallClockTime','line_number':1384,'multiline':True]
['text':'assignWallClockTime','line_number':1444,'multiline':True]
['text':' Do not replicate system.profile modifications','line_number':1452,'multiline':False]
['text':'assignWallClockTime','line_number':1460,'multiline':True]
['text':'*
 * Returns maximum number of operations to pack into a single oplog entry,
 * when multi-oplog format for batched writes is in use.
 ','line_number':1467,'multiline':True]
['text':' IDL validation defined for this startup parameter ensures that we have a positive number.','line_number':1472,'multiline':False]
['text':'*
 * Returns maximum size (bytes) of operations to pack into a single oplog entry,
 * when multi-oplog format for batched writes is in use.
 ','line_number':1476,'multiline':True]
['text':' IDL validation defined for this startup parameter ensures that we have a positive number.','line_number':1481,'multiline':False]
['text':' Logs one applyOps entry on a prepared transaction, or an unprepared transaction's commit, or on','line_number':1485,'multiline':False]
['text':' committing a WUOW that is not necessarily tied to a multi-document transaction. It may update the','line_number':1486,'multiline':False]
['text':' transactions table on multi-document transactions. Assumes that the given BSON builder object','line_number':1487,'multiline':False]
['text':' already has  an 'applyOps' field appended pointing to the desired array of ops i.e. { "applyOps"','line_number':1488,'multiline':False]
['text':' : [op1, op2, ...] }','line_number':1489,'multiline':False]
['text':'','line_number':1490,'multiline':False]
['text':' @param txnState the 'state' field of the transaction table entry update.  @param startOpTime the','line_number':1491,'multiline':False]
['text':' optime of the 'startOpTime' field of the transaction table entry update. If boost::none, no','line_number':1492,'multiline':False]
['text':' 'startOpTime' field will be included in the new transaction table entry. Only meaningful if','line_number':1493,'multiline':False]
['text':' 'updateTxnTable' is true.  @param updateTxnTable determines whether the transactions table will','line_number':1494,'multiline':False]
['text':' updated after the oplog entry is written.','line_number':1495,'multiline':False]
['text':'','line_number':1496,'multiline':False]
['text':' Returns the optime of the written oplog entry.','line_number':1497,'multiline':False]
['text':' Batched writes (that is, WUOWs with 'groupOplogEntries') are not associated with a txnNumber,','line_number':1513,'multiline':False]
['text':' so do not emit an lsid either.','line_number':1514,'multiline':False]
['text':'assignWallClockTime','line_number':1523,'multiline':True]
['text':' Change the error code to TransactionTooLarge if it is BSONObjectTooLarge.','line_number':1537,'multiline':False]
['text':' There should not be a parent WUOW outside of this one. This guarantees the safety of the','line_number':1562,'multiline':False]
['text':' write conflict retry loop.','line_number':1563,'multiline':False]
['text':' We must not have a maximum lock timeout, since writing the commit or abort oplog entry for a','line_number':1566,'multiline':False]
['text':' prepared transaction must always succeed.','line_number':1567,'multiline':False]
['text':' Writes to the oplog only require a Global intent lock. Guaranteed by','line_number':1572,'multiline':False]
['text':' OplogSlotReserver.','line_number':1573,'multiline':False]
['text':'assignWallClockTime','line_number':1578,'multiline':True]
['text':' namespace','line_number':1593,'multiline':False]
['text':' It is possible that the transaction resulted in no changes.  In that case, we should','line_number':1611,'multiline':False]
['text':' not write an empty applyOps entry.','line_number':1612,'multiline':False]
['text':' Throw TenantMigrationConflict error if the database for the transaction statements is being','line_number':1619,'multiline':False]
['text':' migrated. We only need check the namespace of the first statement since a transaction's','line_number':1620,'multiline':False]
['text':' statements must all be for the same tenant.','line_number':1621,'multiline':False]
['text':' Storage transaction commit is the last place inside a transaction that can throw an','line_number':1633,'multiline':False]
['text':' exception. In order to safely allow exceptions to be thrown at that point, this function must','line_number':1634,'multiline':False]
['text':' be called from an outer WriteUnitOfWork in order to be rolled back upon reaching the','line_number':1635,'multiline':False]
['text':' exception.','line_number':1636,'multiline':False]
['text':' Writes to the oplog only require a Global intent lock. Guaranteed by','line_number':1639,'multiline':False]
['text':' OplogSlotReserver.','line_number':1640,'multiline':False]
['text':' partial transaction','line_number':1644,'multiline':False]
['text':' pre/post image to store in image collection','line_number':1645,'multiline':False]
['text':' Partial transactions and unprepared transactions with pre or post image stored in the','line_number':1646,'multiline':False]
['text':' image collection create/reserve multiple oplog entries in the same WriteUnitOfWork.','line_number':1647,'multiline':False]
['text':' Because of this, such transactions will set multiple timestamps, violating the','line_number':1648,'multiline':False]
['text':' multi timestamp constraint. It's safe to ignore the multi timestamp constraints here','line_number':1649,'multiline':False]
['text':' as additional rollback logic is in place for this case. See SERVER-48771.','line_number':1650,'multiline':False]
['text':'txnState=','line_number':1663,'multiline':True]
['text':'startOpTime=','line_number':1665,'multiline':True]
['text':'updateTxnTable=','line_number':1667,'multiline':True]
['text':' Log in-progress entries for the transaction along with the implicit commit.','line_number':1671,'multiline':False]
['text':' Reserve all the optimes in advance, so we only need to get the optime mutex once.  We','line_number':1708,'multiline':False]
['text':' reserve enough entries for all statements in the transaction.','line_number':1709,'multiline':False]
['text':' Throw TenantMigrationConflict error if the database for the transaction statements is being','line_number':1712,'multiline':False]
['text':' migrated. We only need check the namespace of the first statement since a transaction's','line_number':1713,'multiline':False]
['text':' statements must all be for the same tenant.','line_number':1714,'multiline':False]
['text':' Serialize batched statements to BSON and determine their assignment to "applyOps"','line_number':1722,'multiline':False]
['text':' entries.','line_number':1723,'multiline':False]
['text':' By providing limits on operation count and size, this makes the processing of batched writes','line_number':1724,'multiline':False]
['text':' more consistent with our treatment of multi-doc transactions.','line_number':1725,'multiline':False]
['text':'prepare=','line_number':1730,'multiline':True]
['text':' Before SERVER-70765, we relied on packTransactionStatementsForApplyOps() to check if the','line_number':1734,'multiline':False]
['text':' batch of operations could fit in a single applyOps entry. Now, we pass the size limit to','line_number':1735,'multiline':False]
['text':' TransactionOperations::getApplyOpsInfo() and are now able to return an error earlier.','line_number':1736,'multiline':False]
['text':' Previously, this used to be a tripwire assertion (tassert). This is now a uassert to be','line_number':1737,'multiline':False]
['text':' consistent with packTransactionStatementsForApplyOps().','line_number':1738,'multiline':False]
['text':' Batched writes spanning multiple oplog entries create/reserve multiple oplog entries in','line_number':1743,'multiline':False]
['text':' the same WriteUnitOfWork. Because of this, such batched writes will set multiple','line_number':1744,'multiline':False]
['text':' timestamps, violating the multi timestamp constraint. It's safe to ignore the multi','line_number':1745,'multiline':False]
['text':' timestamp constraints here.','line_number':1746,'multiline':False]
['text':' Storage transaction commit is the last place inside a transaction that can throw an','line_number':1750,'multiline':False]
['text':' exception. In order to safely allow exceptions to be thrown at that point, this function must','line_number':1751,'multiline':False]
['text':' be called from an outer WriteUnitOfWork in order to be rolled back upon reaching the','line_number':1752,'multiline':False]
['text':' exception.','line_number':1753,'multiline':False]
['text':' Writes to the oplog only require a Global intent lock. Guaranteed by','line_number':1756,'multiline':False]
['text':' OplogSlotReserver.','line_number':1757,'multiline':False]
['text':' Batched writes do not violate the multiple timestamp constraint because they do not','line_number':1760,'multiline':False]
['text':' replicate over multiple applyOps oplog entries or write pre/post images to the','line_number':1761,'multiline':False]
['text':' image collection. However, multi-doc transactions may be replicated as a chain of','line_number':1762,'multiline':False]
['text':' applyOps oplog entries in addition to potentially writing to the image collection.','line_number':1763,'multiline':False]
['text':' Therefore, there are cases where the multiple timestamp constraint has to be relaxed','line_number':1764,'multiline':False]
['text':' in order to replicate multi-doc transactions.','line_number':1765,'multiline':False]
['text':' See onTransactionPrepare() and onUnpreparedTransactionCommit().','line_number':1766,'multiline':False]
['text':' Remove 'prevOpTime' when replicating as a single applyOps oplog entry.','line_number':1775,'multiline':False]
['text':' This preserves backwards compatibility with the legacy atomic applyOps oplog','line_number':1776,'multiline':False]
['text':' entry format that we use to replicate batched writes.','line_number':1777,'multiline':False]
['text':' OplogApplierImpl::_deriveOpsAndFillWriterVectors() enforces this restriction','line_number':1778,'multiline':False]
['text':' using an invariant added in SERVER-43651.','line_number':1779,'multiline':False]
['text':' For batched writes that replicate over a chain of applyOps oplog entries, we include','line_number':1780,'multiline':False]
['text':' 'prevOpTime' so that oplog application is able to consume all the linked operations,','line_number':1781,'multiline':False]
['text':' similar to large multi-document transactions. See SERVER-70572.','line_number':1782,'multiline':False]
['text':'txnState=','line_number':1788,'multiline':True]
['text':' unused','line_number':1788,'multiline':False]
['text':'startOpTime=','line_number':1789,'multiline':True]
['text':'updateTxnTable=','line_number':1791,'multiline':True]
['text':' Don't write oplog entry on secondaries.','line_number':1850,'multiline':False]
['text':' We should have reserved enough slots.','line_number':1853,'multiline':False]
['text':' Writes to the oplog only require a Global intent lock. Guaranteed by','line_number':1856,'multiline':False]
['text':' OplogSlotReserver.','line_number':1857,'multiline':False]
['text':' It is possible that the transaction resulted in no changes, In that case, we','line_number':1860,'multiline':False]
['text':' should not write any operations other than the prepare oplog entry.','line_number':1861,'multiline':False]
['text':' Storage transaction commit is the last place inside a transaction that can','line_number':1863,'multiline':False]
['text':' throw an exception. In order to safely allow exceptions to be thrown at that','line_number':1864,'multiline':False]
['text':' point, this function must be called from an outer WriteUnitOfWork in order to','line_number':1865,'multiline':False]
['text':' be rolled back upon reaching the exception.','line_number':1866,'multiline':False]
['text':' Writes to the oplog only require a Global intent lock. Guaranteed by','line_number':1869,'multiline':False]
['text':' OplogSlotReserver.','line_number':1870,'multiline':False]
['text':' Partial transactions create/reserve multiple oplog entries in the same','line_number':1874,'multiline':False]
['text':' WriteUnitOfWork. Because of this, such transactions will set multiple','line_number':1875,'multiline':False]
['text':' timestamps, violating the multi timestamp constraint. It's safe to ignore','line_number':1876,'multiline':False]
['text':' the multi timestamp constraints here as additional rollback logic is in','line_number':1877,'multiline':False]
['text':' place for this case. See SERVER-48771.','line_number':1878,'multiline':False]
['text':' This is set for every oplog entry, except for the last one, in the applyOps','line_number':1882,'multiline':False]
['text':' chain of an unprepared multi-doc transaction.','line_number':1883,'multiline':False]
['text':' For a single prepare oplog entry, choose the last oplog slot for the first','line_number':1884,'multiline':False]
['text':' optime of the transaction. The first optime corresponds to the 'startOpTime'','line_number':1885,'multiline':False]
['text':' field in SessionTxnRecord that is persisted in config.transactions.','line_number':1886,'multiline':False]
['text':' See SERVER-40678.','line_number':1887,'multiline':False]
['text':'txnState=','line_number':1901,'multiline':True]
['text':'updateTxnTable=','line_number':1905,'multiline':True]
['text':' We had reserved enough oplog slots for the worst case where each operation','line_number':1909,'multiline':False]
['text':' produced one oplog entry.  When operations are smaller and can be packed, we','line_number':1910,'multiline':False]
['text':' will waste the extra slots.  The implicit prepare oplog entry will still use','line_number':1911,'multiline':False]
['text':' the last reserved slot, because the transaction participant has already used','line_number':1912,'multiline':False]
['text':' that as the prepare time.','line_number':1913,'multiline':False]
['text':' Log an empty 'prepare' oplog entry.','line_number':1925,'multiline':False]
['text':' We need to have at least one reserved slot.','line_number':1926,'multiline':False]
['text':' TODO SERVER-69286: set the top-level tenantId here','line_number':1942,'multiline':False]
['text':'startOpTime=','line_number':1947,'multiline':True]
['text':'stmtIdsWritten=','line_number':1948,'multiline':True]
['text':'updateTxnTable=','line_number':1949,'multiline':True]
['text':' Reset the key manager cache.','line_number':2003,'multiline':False]
['text':' Check if the shard identity document rolled back.','line_number':2009,'multiline':False]
['text':' Force the default read/write concern cache to reload on next access in case the defaults','line_number':2014,'multiline':False]
['text':' document was rolled back.','line_number':2015,'multiline':False]
['text':' namespace mongo','line_number':2019,'multiline':False]
