['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 * Keeps track of the transaction runtime state for every active transaction session on this
 * instance.
 ','line_number':64,'multiline':True]
['text':'*
     * Represents which role the SessionCatalog was accessed in. The participant role for actions
     * from a data bearing node (e.g. mongod servicing a local command) and router for a routing
     * node (e.g. a mongos command, or mongod running a mongos command).
     ','line_number':76,'multiline':True]
['text':'*
     * Retrieves the session transaction table associated with the service or operation context.
     ','line_number':105,'multiline':True]
['text':'*
     * Resets the transaction table to an uninitialized state.
     * Meant only for testing.
     ','line_number':111,'multiline':True]
['text':'*
     * See the description of 'ObservableSession::kill' for more information on the session kill
     * usage pattern.
     ','line_number':117,'multiline':True]
['text':'*
     * Iterates through the SessionCatalog under the SessionCatalog mutex and applies 'workerFn' to
     * each Session which matches the specified 'lsid' or 'matcher'. Does not support reaping.
     *
     * NOTE: Since this method runs with the session catalog mutex, the work done by 'workerFn' is
     * not allowed to block, perform I/O or acquire any lock manager locks.
     * Iterates through the SessionCatalog and applies 'workerFn' to each Session. This locks the
     * SessionCatalog.
     ','line_number':123,'multiline':True]
['text':'*
     * Same as the above but only applies 'workerFn' to parent Sessions.
     ','line_number':139,'multiline':True]
['text':'*
     * Same as the above but applies 'parentSessionWorkerFn' to the Session whose session id is
     * equal to 'parentLsid' and then applies 'childSessionWorkerFn' to the Sessions whose parent
     * session id is equal to 'parentLsid'. To be used with 'markForReap' for reaping sessions
     * from the SessionCatalog. It enables transaction sessions that corresponds to the same
     * logical session to be reaped atomically. Returns the session ids for the matching Sessions
     * that were not reaped after the scan.
     ','line_number':144,'multiline':True]
['text':'*
     * Shortcut to invoke 'kill' on the specified session under the SessionCatalog mutex. Throws a
     * NoSuchSession exception if the session doesn't exist.
     ','line_number':156,'multiline':True]
['text':'*
     * Returns the total number of entries currently cached on the session catalog.
     ','line_number':162,'multiline':True]
['text':'*
     * Registers two callbacks: one to run when sessions are "eagerly" reaped from the catalog, ie
     * without waiting for a logical session cache refresh, and another to override the logic that
     * determines when to eagerly reap a session.
     ','line_number':167,'multiline':True]
['text':'*
     * Tracks the runtime info for transaction sessions that corresponds to the same logical
     * session. Designed such that only one transaction session can be checked out at any given
     * time.
     ','line_number':180,'multiline':True]
['text':' Can only create a SessionRuntimeInfo with a parent transaction session id.','line_number':187,'multiline':False]
['text':' Must only be accessed by the OperationContext which currently has this logical session','line_number':193,'multiline':False]
['text':' checked out.','line_number':194,'multiline':False]
['text':' The latest client txnNumber that has successfully started running on this logical','line_number':198,'multiline':False]
['text':' session. This is set to kUninitializedTxnNumber initially, and is updated every time an','line_number':199,'multiline':False]
['text':' opCtx that starts a new client txnNumber checks this logical session back in.','line_number':200,'multiline':False]
['text':' Signaled when the state becomes available. Uses the transaction table's mutex to protect','line_number':203,'multiline':False]
['text':' the state transitions.','line_number':204,'multiline':False]
['text':' Pointer to the OperationContext for the operation running on this logical session, or','line_number':207,'multiline':False]
['text':' nullptr if there is no operation currently running on the session.','line_number':208,'multiline':False]
['text':' Last check-out time for this logical session. Updated every time any of the transaction','line_number':211,'multiline':False]
['text':' sessions gets checked out.','line_number':212,'multiline':False]
['text':' Counter indicating the number of times ObservableSession::kill has been called on this','line_number':215,'multiline':False]
['text':' SessionRuntimeInfo, which have not yet had a corresponding call to','line_number':216,'multiline':False]
['text':' checkOutSessionForKill.','line_number':217,'multiline':False]
['text':'*
     * Returns a callback with the default logic used to decide if a session may be reaped early.
     ','line_number':222,'multiline':True]
['text':'*
     * Blocking method, which checks-out the session with the given 'lsid'. Called inside
     * '_checkOutSession' and 'checkOutSessionForKill'.
     ','line_number':228,'multiline':True]
['text':'*
     * Blocking method, which checks-out the session set on 'opCtx'.
     ','line_number':236,'multiline':True]
['text':'*
     * Returns the session runtime info for 'lsid' from the '_sessions' map. The returned pointer
     * is guaranteed to be linked on the map for as long as the mutex is held.
     ','line_number':241,'multiline':True]
['text':'*
     * Creates or returns the session runtime info for 'lsid' from the '_sessions' map. The
     * returned pointer is guaranteed to be linked on the map for as long as the mutex is held.
     ','line_number':247,'multiline':True]
['text':'*
     * Makes a session, previously checked out through 'checkoutSession', available again. Will free
     * any retryable sessions with txnNumbers before clientTxnNumberStarted if it is set.
     ','line_number':253,'multiline':True]
['text':' Called when sessions are reaped from memory "eagerly" ie directly by the SessionCatalog','line_number':262,'multiline':False]
['text':' without waiting for a logical session cache refresh. Note this is set at process startup','line_number':263,'multiline':False]
['text':' before multi-threading is enabled, so no synchronization is necessary.','line_number':264,'multiline':False]
['text':' Returns a callback used to decide if a session may be "eagerly" reaped from the session','line_number':267,'multiline':False]
['text':' catalog without waiting for typical logical session expiration. May be overwritten, but only','line_number':268,'multiline':False]
['text':' at process startup before multi-threading is enabled, so no synchronization is necessary.','line_number':269,'multiline':False]
['text':' Protects the state below','line_number':273,'multiline':False]
['text':' Owns the Session objects for all current Sessions.','line_number':277,'multiline':False]
['text':'*
 * Scoped object representing a checked-out transaction session. This type is an implementation
 * detail of the SessionCatalog.
 ','line_number':281,'multiline':True]
['text':' The owning session catalog into which the session should be checked back','line_number':344,'multiline':False]
['text':' If this session began a retryable write or transaction while checked out, this is set to the','line_number':347,'multiline':False]
['text':' "client txnNumber" of that transaction, which is the top-level txnNumber for a retryable','line_number':348,'multiline':False]
['text':' write or transaction sent by a client or the txnNumber in the sessionId for a retryable','line_number':349,'multiline':False]
['text':' child transaction, and the "provenance" of the number, ie whether the number came from the','line_number':350,'multiline':False]
['text':' router or participant role.','line_number':351,'multiline':False]
['text':'*
 * RAII type returned by SessionCatalog::checkOutSessionForKill.
 *
 * After calling kill() on an ObservableSession, let that ObservableSession go out
 * of scope and in a context outside of SessionCatalog::scanSessions, call checkOutSessionForKill
 * to get an instance of this type. Then, while holding that instance, perform any cleanup
 * you need to perform on a session as part of killing it. More details in the description of
 * ObservableSession::kill, below.
 ','line_number':361,'multiline':True]
['text':'*
 * This type represents access to a transaction session inside of a scanSessions loop.
 * If you have one of these, you're in a scanSessions callback context, and so
 * have locked the whole catalog and, if the observed session is bound to an operation context,
 * you hold that operation context's client's mutex, as well.
 ','line_number':393,'multiline':True]
['text':'*
     * The session id for this transaction session.
     ','line_number':406,'multiline':True]
['text':'*
     * The latest client txnNumber that has successfully started running on the logical session that
     * this transaction session corresponds to.
     ','line_number':413,'multiline':True]
['text':'*
     * Returns true if there is an operation currently running on the logical session that this
     * transaction session corresponds to.
     ','line_number':421,'multiline':True]
['text':'*
     * Returns the last check-out time for the logical session that this transaction session
     * corresponds to. Used for reaping purposes.
     ','line_number':429,'multiline':True]
['text':'*
     * Increments the number of "killers" for the logical session that this transaction session
     * corresponds to and returns a 'kill token' to to be passed later on to
     * 'checkOutSessionForKill' method of the SessionCatalog in order to permit the caller to
     * execute any kill cleanup tasks. This token is later used to decrement the number of
     * "killers".
     *
     * Marking session as killed is an internal property only that will cause any further calls to
     * 'checkOutSession' to block until 'checkOutSessionForKill' is called the same number of times
     * as 'kill' was called and the returned scoped object destroyed.
     *
     * If the first killer finds the session checked-out, this method will also interrupt the
     * operation context which has it checked-out.
     ','line_number':437,'multiline':True]
['text':'*
     * To be used with 'scanSessionsForReap' to indicate to the SessionCatalog that, from the user
     * perspective, this transaction session is safe to be reaped. That is, the reaper has checked
     * that the session has expired and all the decorations they are using are prepared to be
     * destroyed. There are two reap modes:
     * - kExclusive indicates that the session is safe to be reaped independently of the other
     *   sessions matched by 'scanSessionsForReap'.
     * - kNonExclusive indicates that the session is only safe to reaped if all the other sessions
     *   are also safe to be reaped.
     *
     * Calling this method does not guarantee that the session will in fact be reaped. The
     * SessionCatalog performs additional checks to protect sessions that are still in use from
     * being reaped. However, reaping will still obey the specified reap mode. See the comment for
     * '_shouldBeReaped' for more info.
     ','line_number':453,'multiline':True]
['text':'*
     * Returns a pointer to the Session itself.
     ','line_number':471,'multiline':True]
['text':'*
     * Returns whether 'kill' has been called on this session.
     ','line_number':492,'multiline':True]
['text':'*
     * Returns true if this Session can be checked out.
     ','line_number':497,'multiline':True]
['text':'*
     * Returns true if this transaction session should be be reaped from the SessionCatalog.
     * That is, the session has been marked for reap and both of the following are true:
     * - It is not checked out by any thread, and there are no threads waiting for it to be
     *   checked out.
     * - It is not marked for kill (i.e. expected to be checked out for kill).
     ','line_number':504,'multiline':True]
['text':'*
 * Scoped object, which checks out the session specified in the passed operation context and stores
 * it for later access by the command. The session is installed at construction time and is removed
 * at destruction.
 ','line_number':521,'multiline':True]
['text':'*
     * Acquires the session with id opCtx->getLogicalSessionId().  Because a session can only be
     * checked out by one user at a time, construction of OperationContextSession can block waiting
     * for the desired session to be checked in by another user.
     ','line_number':531,'multiline':True]
['text':'*
     * Same as constructor above, but takes the session id from the killToken and uses
     * checkoutSessionForKill instead, placing the checked-out session on the operation context.
     * Must not be called if the operation context contains a session.
     ','line_number':538,'multiline':True]
['text':'*
     * Returns the session currently checked out by "opCtx", or nullptr if the opCtx has no
     * checked out session.
     ','line_number':546,'multiline':True]
['text':'*
     * These methods take an operation context with a checked-out session and allow it to be
     * temporarily or permanently checked back in, in order to allow other operations to use it.
     *
     * Check-in may only be called if the session has actually been checked out previously and
     * similarly check-out may only be called if the session is not checked out already.
     ','line_number':552,'multiline':True]
['text':'*
     * Notifies the session catalog when a new transaction/retryable write is begun on the operation
     * context's checked out session.
     ','line_number':563,'multiline':True]
['text':' namespace mongo','line_number':576,'multiline':False]
