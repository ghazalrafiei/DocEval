['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 * Non-blocking call, which schedules asynchronously the work to finish cleaning up the specified
 * set of kill tokens.
 ','line_number':133,'multiline':True]
['text':' TODO(SERVER-74658): Please revisit if this thread could be made killable.','line_number':151,'multiline':False]
['text':'*
 * Removes the transaction sessions that are expired and not in use from the in-memory catalog
 * (i.e. SessionCatalog). Returns the session ids for the expired transaction sessions that were
 * not removed because they were in use.
 ','line_number':181,'multiline':True]
['text':' Find the possibly expired logical session ids in the in-memory catalog.','line_number':193,'multiline':False]
['text':' Skip child transaction sessions since they correspond to the same logical session as their','line_number':195,'multiline':False]
['text':' parent transaction session so they have the same last check-out time as the parent's.','line_number':196,'multiline':False]
['text':' From the possibly expired logical session ids, find the ones that have been removed from','line_number':204,'multiline':False]
['text':' from the config.system.sessions collection.','line_number':205,'multiline':False]
['text':' For each removed logical session id, removes all of its transaction session ids that are no','line_number':209,'multiline':False]
['text':' longer in use from the in-memory catalog.','line_number':210,'multiline':False]
['text':' Scan all the transaction sessions for this logical session at once so reaping can be done','line_number':215,'multiline':False]
['text':' atomically.','line_number':216,'multiline':False]
['text':' Remove the config.image_collection entries for the expired transaction session ids. We first','line_number':245,'multiline':False]
['text':' delete any images belonging to sessions about to be reaped, followed by the sessions. This','line_number':246,'multiline':False]
['text':' way if there's a failure, we'll only be left with sessions that have a dangling reference','line_number':247,'multiline':False]
['text':' to an image. Session reaping will rediscover the sessions to delete and try again.','line_number':248,'multiline':False]
['text':'','line_number':249,'multiline':False]
['text':' We opt for this rather than performing the two sets of deletes in a single transaction simply','line_number':250,'multiline':False]
['text':' to reduce code complexity.','line_number':251,'multiline':False]
['text':' multi = false ','line_number':265,'multiline':True]
['text':' Remove the config.transaction entries for the expired transaction session ids.','line_number':272,'multiline':False]
['text':' multi = false ','line_number':286,'multiline':True]
['text':'*
 * Removes the config.transactions and the config.image_collection entries for the transaction
 * sessions in 'expiredTransactionSessionIdsNotInUse' whose logical sessions have expired. Returns
 * the number of transaction sessions whose entries were removed.
 ','line_number':296,'multiline':True]
['text':' From the expired transaction session ids that are no longer in use, find the ones whose','line_number':309,'multiline':False]
['text':' logical sessions have been removed from from the config.system.sessions collection.','line_number':310,'multiline':False]
['text':'*
 * Removes the transaction sessions that are expired and not in use from the on-disk catalog (i.e.
 * the config.transactions collection and the config.image_collection collection). Returns the
 * number of transaction sessions whose entries were removed.
 ','line_number':336,'multiline':True]
['text':' Scan for records older than the minimum lifetime and uses a sort to walk the '_id' index.','line_number':346,'multiline':False]
['text':' Index already exists, so there's nothing to do.','line_number':395,'multiline':False]
['text':' Unless explicitly enabled, don't create the index to avoid delaying step up.','line_number':403,'multiline':False]
['text':' (Ignore FCV check): This is used to fix a bug in Atlas where the index is not created','line_number':404,'multiline':False]
['text':' in a cluster. This feature flag may no longer be used.','line_number':405,'multiline':False]
['text':' fromMigration ','line_number':415,'multiline':True]
['text':' The index does not exist and the collection is empty, so fall through to create it on the','line_number':421,'multiline':False]
['text':' empty collection. This can happen after a failover because the collection and index','line_number':422,'multiline':False]
['text':' creation are recorded as separate oplog entries.','line_number':423,'multiline':False]
['text':' Synchronize with killOps to make this unkillable.','line_number':477,'multiline':False]
['text':' namespace','line_number':503,'multiline':False]
['text':' Set mongod specific behaviors on the SessionCatalog.','line_number':521,'multiline':False]
['text':' Invalidate sessions that could have a retryable write on it, so that we can refresh from disk','line_number':550,'multiline':False]
['text':' in case the in-memory state was out of sync.','line_number':551,'multiline':False]
['text':' Scan all sessions and reacquire locks for prepared transactions.','line_number':556,'multiline':False]
['text':' There may be sessions that are checked out during this scan, but none of them','line_number':557,'multiline':False]
['text':' can be prepared transactions, since only oplog application can make transactions','line_number':558,'multiline':False]
['text':' prepared on secondaries and oplog application has been stopped at this moment.','line_number':559,'multiline':False]
['text':' Create a new opCtx because we need an empty locker to refresh the locks.','line_number':570,'multiline':False]
['text':' Avoid ticket acquisition during step up.','line_number':584,'multiline':False]
['text':' Synchronize with killOps to make this unkillable.','line_number':588,'multiline':False]
['text':' Use MongoDOperationContextSessionWithoutRefresh to check out the session because:','line_number':600,'multiline':False]
['text':' - The in-memory state for this session has been kept in sync with the on-disk state','line_number':601,'multiline':False]
['text':'   by secondary oplog application for prepared transactions so no refresh will be','line_number':602,'multiline':False]
['text':'   done anyway.','line_number':603,'multiline':False]
['text':' - The in-memory state for any external and/or internal sessions associated with this','line_number':604,'multiline':False]
['text':'   session may be out-of-date with the on-disk state but no refresh is necessary since','line_number':605,'multiline':False]
['text':'   the transaction is already in the prepared state so it no longer needs to go','line_number':606,'multiline':False]
['text':'   through conflict and write history check. In addition, a refresh of any session is','line_number':607,'multiline':False]
['text':'   expected to cause a deadlock since this 'newOpCtx' will need to acquire the global','line_number':608,'multiline':False]
['text':'   lock in the IS mode prior to reading the config.transactions collection but it','line_number':609,'multiline':False]
['text':'   cannot do that while the RSTL lock is being held by 'opCtx'.','line_number':610,'multiline':False]
['text':' Internal sessions for an old retryable write are marked as reapable as soon as a','line_number':667,'multiline':False]
['text':' retryable write or transaction with a newer txnNumber starts. Therefore, when deleting','line_number':668,'multiline':False]
['text':' the config.transactions doc for such internal sessions, the corresponding transaction','line_number':669,'multiline':False]
['text':' sessions should not be interrupted since they are guaranteed to be performing a','line_number':670,'multiline':False]
['text':' transaction or retryable write for newer txnNumber.','line_number':671,'multiline':False]
['text':' The "unsafe" check for primary below is a best-effort attempt to ensure that the on-disk','line_number':704,'multiline':False]
['text':' state reaping code doesn't run if the node is secondary and cause log spam. It is a work','line_number':705,'multiline':False]
['text':' around the fact that the logical sessions cache is not registered to listen for replication','line_number':706,'multiline':False]
['text':' state changes.','line_number':707,'multiline':False]
['text':' A session on secondaries should never be checked back in with a TransactionParticipant that','line_number':791,'multiline':False]
['text':' isn't prepared, aborted, or committed.','line_number':792,'multiline':False]
['text':' namespace mongo','line_number':807,'multiline':False]
