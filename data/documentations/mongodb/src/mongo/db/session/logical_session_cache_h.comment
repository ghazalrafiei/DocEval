['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 * The interface for the logical session cache
 ','line_number':52,'multiline':True]
['text':'*
     * Decorate the ServiceContext with a LogicalSessionCache instance.
     ','line_number':57,'multiline':True]
['text':'*
     * Invoked on service shutdown time in order to join the cache's refresher and reaper tasks.
     ','line_number':66,'multiline':True]
['text':'*
     * Inserts a new authoritative session record into the cache.
     *
     * This method will insert the authoritative record into the sessions collection and should only
     * be used when starting new sessions. It should not be used to insert records for existing
     * sessions.
     ','line_number':71,'multiline':True]
['text':'*
     * Vivifies the session in the cache. I.e. creates it if it isn't there, updates last use if it
     * is.
     ','line_number':80,'multiline':True]
['text':'*
     * enqueues LogicalSessionIds for removal during the next _refresh()
     ','line_number':86,'multiline':True]
['text':'*
     * Refreshes the cache synchronously. This flushes all pending refreshes and inserts to the
     * sessions collection.
     ','line_number':91,'multiline':True]
['text':'*
     * Reaps transaction records synchronously.
     ','line_number':97,'multiline':True]
['text':'*
     * Returns the number of session records currently in the cache.
     ','line_number':102,'multiline':True]
['text':'*
     * Ennumerate all LogicalSessionId keys currently in the cache.
     ','line_number':107,'multiline':True]
['text':'*
     * Ennumerate all LogicalSessionId keys in the cache for the given UserDigests.
     ','line_number':112,'multiline':True]
['text':'*
     * Retrieve a LogicalSessionRecord by LogicalSessionId, if it exists in the cache.
     ','line_number':118,'multiline':True]
['text':'*
     * Returns stats about the logical session cache and its recent operations.
     ','line_number':123,'multiline':True]
['text':'*
 * WARNING: This class should only be used for rare operations because it generates a new logical
 * session ID that isn't reaped until the next refresh, which could overwhelm memory if called in a
 * loop.
 ','line_number':129,'multiline':True]
['text':' namespace mongo','line_number':161,'multiline':False]
