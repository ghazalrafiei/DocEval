['text':'*
 *    Copyright (C) 2020-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' Local and available are the only ReadConcern levels that allow their ReadSource to be','line_number':58,'multiline':False]
['text':' overridden to read at lastApplied. They read without a timestamp by default, but this check','line_number':59,'multiline':False]
['text':' allows secondary reads to read at a consistent point in time. However if an operation is not','line_number':60,'multiline':False]
['text':' enforcing constraints, then it is choosing to see the most up-to-date data.','line_number':61,'multiline':False]
['text':' Non-replicated collections do not need to read at lastApplied, as those collections are not','line_number':71,'multiline':False]
['text':' written by the replication system. However, the oplog is special, as it *is* written by the','line_number':72,'multiline':False]
['text':' replication system.','line_number':73,'multiline':False]
['text':' If this node can accept writes (i.e. primary), then no conflicting replication batches are','line_number':81,'multiline':False]
['text':' being applied and we can read from the default snapshot. If we are in a replication state','line_number':82,'multiline':False]
['text':' (like secondary or primary catch-up) where we are not accepting writes, we should read at','line_number':83,'multiline':False]
['text':' lastApplied.','line_number':84,'multiline':False]
['text':' If we are not secondary, then we should not attempt to read at lastApplied because it may not','line_number':93,'multiline':False]
['text':' be available or valid. Any operations reading outside of the primary or secondary states must','line_number':94,'multiline':False]
['text':' be internal. We give these operations the benefit of the doubt rather than attempting to read','line_number':95,'multiline':False]
['text':' at a lastApplied timestamp that is not valid.','line_number':96,'multiline':False]
['text':' Linearizable read concern should never be read at lastApplied, they must always read from','line_number':104,'multiline':False]
['text':' latest and are only allowed on primaries. We are either a primary not accepting writes or','line_number':105,'multiline':False]
['text':' secondary at this point, neither which can satisfy the noop write after the read. However, if','line_number':106,'multiline':False]
['text':' we manage to transition to a writable primary when we do the noop write we may have read data','line_number':107,'multiline':False]
['text':' during oplog application with kNoTimestamp which should be an error. In both cases it is OK','line_number':108,'multiline':False]
['text':' to error with NotWritablePrimary here and we do not need to do any further checks after','line_number':109,'multiline':False]
['text':' acquiring the snapshot because state transitions causes the repl term to increment and we','line_number':110,'multiline':False]
['text':' can't transition directly from primary to primary catchup without a repl term increase','line_number':111,'multiline':False]
['text':' happening.','line_number':112,'multiline':False]
['text':' namespace','line_number':122,'multiline':False]
['text':' Write to the reason string if debug logging is enabled. This avoids writing this string every','line_number':129,'multiline':False]
['text':' time we check if we should read at last applied. This string itself is only used in logging','line_number':130,'multiline':False]
['text':' with the same debug level as this check.','line_number':131,'multiline':False]
['text':' We may only change to kLastApplied if we were reading without a timestamp (or if kLastApplied','line_number':153,'multiline':False]
['text':' is already set)','line_number':154,'multiline':False]
['text':' Helper to set read source to the recovery unit and remember our current setting','line_number':160,'multiline':False]
['text':' Set read source based on current setting and readAtLastApplied decision.','line_number':167,'multiline':False]
['text':' Shifting from reading without a timestamp to reading with a timestamp can be','line_number':171,'multiline':False]
['text':' dangerous because writes will appear to vanish.','line_number':172,'multiline':False]
['text':'','line_number':173,'multiline':False]
['text':' If a query recovers from a yield and the node is no longer primary, it must start','line_number':174,'multiline':False]
['text':' reading at the lastApplied point because reading without a timestamp is not safe.','line_number':175,'multiline':False]
['text':'','line_number':176,'multiline':False]
['text':' An operation that yields a timestamped snapshot must restore a snapshot with at least','line_number':177,'multiline':False]
['text':' as large of a timestamp, or with proper consideration of rollback scenarios, no','line_number':178,'multiline':False]
['text':' timestamp. Given readers do not survive rollbacks, it's okay to go from reading with','line_number':179,'multiline':False]
['text':' a timestamp to reading without one. More writes will become visible.','line_number':180,'multiline':False]
['text':'','line_number':181,'multiline':False]
['text':' If we already had kLastApplied as our read source then this call will refresh the','line_number':182,'multiline':False]
['text':' timestamp.','line_number':183,'multiline':False]
['text':' We need to make sure the decision if we need to read at last applied is not changing','line_number':186,'multiline':False]
['text':' concurrently with setting the read source with its read timestamp to the recovery unit.','line_number':187,'multiline':False]
['text':'','line_number':188,'multiline':False]
['text':' When the timestamp is being selected we might have transitioned into PRIMARY that is','line_number':189,'multiline':False]
['text':' accepting writes. The lastApplied timestamp can have oplog holes behind it, in PRIMARY','line_number':190,'multiline':False]
['text':' mode, making it unsafe as a read timestamp as concurrent writes could commit at earlier','line_number':191,'multiline':False]
['text':' timestamps.','line_number':192,'multiline':False]
['text':'','line_number':193,'multiline':False]
['text':' This is handled by re-verifying the conditions if we need to read at last applied after','line_number':194,'multiline':False]
['text':' determining the timestamp but before opening the storage snapshot. If the conditions do','line_number':195,'multiline':False]
['text':' not match what we recorded at the beginning of the operation, we set the read source back','line_number':196,'multiline':False]
['text':' to kNoTimestamp and read without a timestamp.','line_number':197,'multiline':False]
['text':'','line_number':198,'multiline':False]
['text':' The above mainly applies for Lock-free reads that is not holding the RSTL which protects','line_number':199,'multiline':False]
['text':' against state changes.','line_number':200,'multiline':False]
['text':' State changed concurrently with setting the read source and we should no longer read','line_number':203,'multiline':False]
['text':' at lastApplied.','line_number':204,'multiline':False]
['text':' All done, log if we made a change to the read source','line_number':210,'multiline':False]
['text':' Return if we need to read at last applied to the caller in case further checks need to be','line_number':234,'multiline':False]
['text':' performed.','line_number':235,'multiline':False]
['text':' If we do not have a point in time to conflict with collectionMin, return.','line_number':245,'multiline':False]
['text':' If the last change to the collection was before or at the read timestamp, then the storage','line_number':250,'multiline':False]
['text':' snapshot will match the collection in-memory state. Return true only if there would be an','line_number':251,'multiline':False]
['text':' inconsistency: a collection with a newer min timestamp would not match an older storage','line_number':252,'multiline':False]
['text':' snapshot.','line_number':253,'multiline':False]
['text':' namespace SnapshotHelper','line_number':256,'multiline':False]
['text':' namespace mongo','line_number':257,'multiline':False]
