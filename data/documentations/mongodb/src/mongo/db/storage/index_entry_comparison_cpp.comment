['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' IWYU pragma: keep','line_number':45,'multiline':False]
['text':' Due to the limitations of various APIs, we need to use the same type (IndexKeyEntry)','line_number':53,'multiline':False]
['text':' for both the stored data and the "query". We cheat and encode extra information in the','line_number':54,'multiline':False]
['text':' first byte of the field names in the query. This works because all stored objects should','line_number':55,'multiline':False]
['text':' have all field names empty, so their first bytes are '\0'.','line_number':56,'multiline':False]
['text':' implementing in memcmp style to ease reuse of this code.','line_number':64,'multiline':False]
['text':' This should behave the same as customBSONCmp from btree_logic.cpp.','line_number':68,'multiline':False]
['text':'','line_number':69,'multiline':False]
['text':' Reading the comment in the .h file is highly recommended if you need to understand what this','line_number':70,'multiline':False]
['text':' function is doing','line_number':71,'multiline':False]
['text':' Iterate through both BSONObjects, comparing individual elements one by one','line_number':76,'multiline':False]
['text':'compareFieldNames=','line_number':84,'multiline':True]
['text':' can't be negated','line_number':86,'multiline':False]
['text':' Here is where the weirdness begins. We sometimes want to fudge the comparison','line_number':93,'multiline':False]
['text':' when a key == the query to implement exclusive ranges.','line_number':94,'multiline':False]
['text':' lhs is the query, rhs is the stored data','line_number':99,'multiline':False]
['text':' rhs is the query, lhs is the stored data, so reverse the returns','line_number':105,'multiline':False]
['text':' This means just look at the key, not the loc.','line_number':114,'multiline':False]
['text':' is supposed to ignore ordering','line_number':118,'multiline':False]
['text':' Appends keyPrefix elements to the builder.','line_number':129,'multiline':False]
['text':' Handles the suffix. Note that the useful parts of the suffix start at index prefixLen rather','line_number':139,'multiline':False]
['text':' than at 0.','line_number':140,'multiline':False]
['text':' This helper may be used for clustered collections when there is no index for the cluster','line_number':186,'multiline':False]
['text':' key.','line_number':187,'multiline':False]
['text':' For the purpose of producing a useful error message, generate a representation of the key','line_number':195,'multiline':False]
['text':' with field names hydrated and with invalid UTF-8 hex-encoded.','line_number':196,'multiline':False]
['text':' Used to build a version of the key after hydrating with field names but without hex encoding','line_number':199,'multiline':False]
['text':' invalid UTF-8. This key is attached to the extra error info and consumed by callers who may','line_number':200,'multiline':False]
['text':' wish to retry on duplicate key errors. The field names are rehydrated so that we don't return','line_number':201,'multiline':False]
['text':' BSON with duplicate key names to clients.','line_number':202,'multiline':False]
['text':' key is a document with forms like: '{ : 123}', '{ : {num: 123} }', '{ : 123, : "str" }'','line_number':205,'multiline':False]
['text':' keyPattern is a document with only one level. e.g. '{a : 1, b : -1}', '{a.b : 1}'','line_number':207,'multiline':False]
['text':' Combine key and keyPattern into one document which represents a mapping from indexFieldName','line_number':209,'multiline':False]
['text':' to indexKey.','line_number':210,'multiline':False]
['text':' If the duplicate key value contains a string, then it's possible that the string contains','line_number':219,'multiline':False]
['text':' binary data which is not valid UTF-8. This is true for all indexes with a collation,','line_number':220,'multiline':False]
['text':' since the index stores collation keys rather than raw user strings. But it's also','line_number':221,'multiline':False]
['text':' possible that the application has stored binary data inside a string, which the system','line_number':222,'multiline':False]
['text':' has never rejected.','line_number':223,'multiline':False]
['text':'','line_number':224,'multiline':False]
['text':' If the string in the key is invalid UTF-8, then we hex encode it before adding it to the','line_number':225,'multiline':False]
['text':' error message so that the driver can assume valid UTF-8 when reading the reply.','line_number':226,'multiline':False]
['text':' In testing this may be nullptr, and being a bit more lenient during error handling is OK.','line_number':288,'multiline':False]
['text':' namespace mongo','line_number':294,'multiline':False]
