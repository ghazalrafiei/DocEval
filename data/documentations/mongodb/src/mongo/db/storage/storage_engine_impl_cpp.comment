['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' namespace','line_number':110,'multiline':False]
['text':' We take the global lock so there can be no concurrent','line_number':126,'multiline':False]
['text':' BatchedCollectionCatalogWriter and we are thus safe to perform writes.','line_number':127,'multiline':False]
['text':'','line_number':128,'multiline':False]
['text':' No need to hold the RSTL lock nor acquire a flow control ticket. This doesn't care','line_number':129,'multiline':False]
['text':' about the replica state of the node and the operations aren't replicated.','line_number':130,'multiline':False]
['text':' Replace the noop recovery unit for the startup operation context now that the storage engine','line_number':149,'multiline':False]
['text':' has been initialized. This is needed because at the time of startup, when the operation','line_number':150,'multiline':False]
['text':' context gets created, the storage engine initialization has not yet begun and so it gets','line_number':151,'multiline':False]
['text':' assigned a noop recovery unit. See the StorageClientObserver class.','line_number':152,'multiline':False]
['text':' If we are loading the catalog after an unclean shutdown, it's possible that there are','line_number':157,'multiline':False]
['text':' collections in the catalog that are unknown to the storage engine. We should attempt to','line_number':158,'multiline':False]
['text':' recover these orphaned idents.','line_number':159,'multiline':False]
['text':' Allowing locking in write mode as reinitializeStorageEngine will be called while holding the','line_number':160,'multiline':False]
['text':' global lock in exclusive mode.','line_number':161,'multiline':False]
['text':' BadValue is usually caused by invalid configuration string.','line_number':197,'multiline':False]
['text':' We still fassert() but without a stack trace.','line_number':198,'multiline':False]
['text':' Perform a read on the catalog at the `oldestTimestamp` and record the record stores (via','line_number':223,'multiline':False]
['text':' their catalogId) that existed.','line_number':224,'multiline':False]
['text':' It's possible that there are collection files on disk that are unknown to the catalog. In','line_number':246,'multiline':False]
['text':' a repair context, if we can't find an ident in the catalog, we generate a catalog entry','line_number':247,'multiline':False]
['text':' 'local.orphan.xxxxx' for it. However, in a nonrepair context, the orphaned idents','line_number':248,'multiline':False]
['text':' will be dropped in reconcileCatalogAndIdents().','line_number':249,'multiline':False]
['text':' If the catalog does not have information about this','line_number':258,'multiline':False]
['text':' collection, we create an new entry for it.','line_number':259,'multiline':False]
['text':' The _id index is already implicitly created on collections clustered','line_number':284,'multiline':False]
['text':' by _id.','line_number':285,'multiline':False]
['text':' Log an error message if we cannot create the entry.','line_number':296,'multiline':False]
['text':' reconcileCatalogAndIdents() will later drop this ident.','line_number':297,'multiline':False]
['text':' Use the stable timestamp as minValid. We know for a fact that the collection exist at','line_number':313,'multiline':False]
['text':' this point and is in sync. If we use an earlier timestamp than replication rollback we','line_number':314,'multiline':False]
['text':' may be out-of-order for the collection catalog managing this namespace.','line_number':315,'multiline':False]
['text':' Let the CollectionCatalog know that we are maintaining timestamps from minValidTs','line_number':318,'multiline':False]
['text':' When restoring a subset of user collections from a backup, the collections not','line_number':323,'multiline':False]
['text':' restored are in the catalog but are unknown to the storage engine. The catalog','line_number':324,'multiline':False]
['text':' entries for these collections will be removed.','line_number':325,'multiline':False]
['text':' A collection being restored needs to also restore all of its indexes.','line_number':344,'multiline':False]
['text':' If we are loading the catalog after an unclean shutdown or during repair, it's','line_number':349,'multiline':False]
['text':' possible that there are collections in the catalog that are unknown to the storage','line_number':350,'multiline':False]
['text':' engine. If we can't find a table in the list of storage engine idents, either','line_number':351,'multiline':False]
['text':' attempt to recover the ident or drop it.','line_number':352,'multiline':False]
['text':' If the storage engine is missing a collection and is unable to create a new record','line_number':357,'multiline':False]
['text':' store, drop it from the catalog and skip initializing it by continuing past the','line_number':358,'multiline':False]
['text':' following logic.','line_number':359,'multiline':False]
['text':' All collection drops are non-transactional and unreplicated collections are dropped','line_number':387,'multiline':False]
['text':' immediately as they do not use two-phase drops. It's possible to run into a situation','line_number':388,'multiline':False]
['text':' where there are collections in the catalog that are unknown to the storage engine','line_number':389,'multiline':False]
['text':' after restoring from backed up data files. See SERVER-55552.','line_number':390,'multiline':False]
['text':' If there's no recovery timestamp, every collection is available.','line_number':404,'multiline':False]
['text':' Otherwise choose a minimum visible timestamp that's at least as large as the true','line_number':406,'multiline':False]
['text':' value. For every collection we will choose either the `oldestTimestamp` or the','line_number':407,'multiline':False]
['text':' `recoveryTimestamp`. Choose the `oldestTimestamp` for collections that existed at the','line_number':408,'multiline':False]
['text':' `oldestTimestamp` and conservatively choose the `recoveryTimestamp` for everything','line_number':409,'multiline':False]
['text':' else.','line_number':410,'multiline':False]
['text':' Collections found at the `oldestTimestamp` on startup can have their minimum','line_number':413,'multiline':False]
['text':' visible timestamp pulled back to that value.','line_number':414,'multiline':False]
['text':' This failpoint is useful for tests which want to exercise atClusterTime reads across','line_number':418,'multiline':False]
['text':' server starts (e.g. resharding). It is likely only safe for tests which don't run','line_number':419,'multiline':False]
['text':' operations that bump the minimum visible timestamp and can guarantee the collection','line_number':420,'multiline':False]
['text':' always exists for the atClusterTime value(s).','line_number':421,'multiline':False]
['text':' Using a NULL rs since we don't want to open this record store before it has been','line_number':456,'multiline':False]
['text':' repaired. This also ensures that if we try to use it, it will blow up.','line_number':457,'multiline':False]
['text':'commitTime','line_number':468,'multiline':True]
['text':' When starting up after an unclean shutdown, we do not attempt to recover any state from the','line_number':553,'multiline':False]
['text':' internal idents. Thus, we drop them in this case.','line_number':554,'multiline':False]
['text':' When starting up after a clean shutdown and resumable index builds are supported, find the','line_number':564,'multiline':False]
['text':' internal idents that contain the relevant information to resume each index build and recover','line_number':565,'multiline':False]
['text':' the state.','line_number':566,'multiline':False]
['text':' Parse the documents here so that we can restart the build if the document doesn't','line_number':574,'multiline':False]
['text':' contain all the necessary information to be able to resume building the index.','line_number':575,'multiline':False]
['text':' Ignore the error so that we can restart the index build instead of resume it. We','line_number':587,'multiline':False]
['text':' should drop the internal ident if we failed to parse.','line_number':588,'multiline':False]
['text':' Once we have parsed the resume info, we can safely drop the internal ident.','line_number':595,'multiline':False]
['text':'*
 * This method reconciles differences between idents the KVEngine is aware of and the
 * DurableCatalog. There are three differences to consider:
 *
 * First, a KVEngine may know of an ident that the DurableCatalog does not. This method will drop
 * the ident from the KVEngine.
 *
 * Second, a DurableCatalog may have a collection ident that the KVEngine does not. This is an
 * illegal state and this method fasserts.
 *
 * Third, a DurableCatalog may have an index ident that the KVEngine does not. This method will
 * rebuild the index.
 ','line_number':610,'multiline':True]
['text':' Gather all tables known to the storage engine and drop those that aren't cross-referenced','line_number':625,'multiline':False]
['text':' in the _mdb_catalog. This can happen for two reasons.','line_number':626,'multiline':False]
['text':'','line_number':627,'multiline':False]
['text':' First, collection creation and deletion happen in two steps. First the storage engine','line_number':628,'multiline':False]
['text':' creates/deletes the table, followed by the change to the _mdb_catalog. It's not assumed a','line_number':629,'multiline':False]
['text':' storage engine can make these steps atomic.','line_number':630,'multiline':False]
['text':'','line_number':631,'multiline':False]
['text':' Second, a replica set node in 3.6+ on supported storage engines will only persist "stable"','line_number':632,'multiline':False]
['text':' data to disk. That is data which replication guarantees won't be rolled back. The','line_number':633,'multiline':False]
['text':' _mdb_catalog will reflect the "stable" set of collections/indexes. However, it's not','line_number':634,'multiline':False]
['text':' expected for a storage engine's ability to persist stable data to extend to "stable','line_number':635,'multiline':False]
['text':' tables".','line_number':636,'multiline':False]
['text':' Drop all idents in the storage engine that are not known to the catalog. This can happen in','line_number':655,'multiline':False]
['text':' the case of a collection or index creation being rolled back.','line_number':656,'multiline':False]
['text':' In repair context, any orphaned collection idents from the engine should already be','line_number':676,'multiline':False]
['text':' recovered in the catalog in loadCatalog().','line_number':677,'multiline':False]
['text':' Leave drop-pending idents alone.','line_number':680,'multiline':False]
['text':' These idents have to be retained as long as the corresponding drops are not part of a','line_number':681,'multiline':False]
['text':' checkpoint.','line_number':682,'multiline':False]
['text':'onDrop=','line_number':694,'multiline':True]
['text':' A concurrent operation, such as a checkpoint could be holding an open data handle','line_number':699,'multiline':False]
['text':' on the ident. Handoff the ident drop to the ident reaper to retry later.','line_number':700,'multiline':False]
['text':'onDrop=','line_number':702,'multiline':True]
['text':' Scan all collections in the catalog and make sure their ident is known to the storage','line_number':708,'multiline':False]
['text':' engine. An omission here is fatal. A missing ident could mean a collection drop was rolled','line_number':709,'multiline':False]
['text':' back. Note that startup already attempts to open tables; this should only catch errors in','line_number':710,'multiline':False]
['text':' other contexts such as `recoverToStableTimestamp`.','line_number':711,'multiline':False]
['text':' Scan all indexes and return those in the catalog where the storage engine does not have the','line_number':725,'multiline':False]
['text':' corresponding ident. The caller is expected to rebuild these indexes.','line_number':726,'multiline':False]
['text':'','line_number':727,'multiline':False]
['text':' Also, remove unfinished builds except those that were background index builds started on a','line_number':728,'multiline':False]
['text':' secondary.','line_number':729,'multiline':False]
['text':' Batch up the indexes to remove them from `metaData` outside of the iterator.','line_number':734,'multiline':False]
['text':' Warn in case of incorrect "multikeyPath" information in catalog documents. This is','line_number':740,'multiline':False]
['text':' the result of a concurrency bug which has since been fixed, but may persist in','line_number':741,'multiline':False]
['text':' certain catalog documents. See https://jira.mongodb.org/browse/SERVER-43074','line_number':742,'multiline':False]
['text':' There are cetain cases where the catalog entry may reference an index ident which','line_number':759,'multiline':False]
['text':' is no longer present. One example of this is when an unclean shutdown occurs','line_number':760,'multiline':False]
['text':' before a checkpoint is taken during startup recovery. Since we drop the index','line_number':761,'multiline':False]
['text':' ident without a timestamp when restarting the index build for startup recovery,','line_number':762,'multiline':False]
['text':' the subsequent startup recovery can see the now-dropped ident referenced by the','line_number':763,'multiline':False]
['text':' old index catalog entry.','line_number':764,'multiline':False]
['text':' Any index build with a UUID is an unfinished two-phase build and must be restarted.','line_number':772,'multiline':False]
['text':' There are no special cases to handle on primaries or secondaries. An index build may','line_number':773,'multiline':False]
['text':' be associated with multiple indexes. We should only restart an index build if we','line_number':774,'multiline':False]
['text':' aren't going to resume it.','line_number':775,'multiline':False]
['text':' Insert in the map if a build has not already been registered.','line_number':790,'multiline':False]
['text':' If the index was kicked off as a background secondary index build, replication','line_number':802,'multiline':False]
['text':' recovery will not run into the oplog entry to recreate the index. If the index build','line_number':803,'multiline':False]
['text':' did not successfully complete, this code will return the index to be rebuilt.','line_number':804,'multiline':False]
['text':' The last anomaly is when the index build did not complete. This implies the index','line_number':816,'multiline':False]
['text':' build was on:','line_number':817,'multiline':False]
['text':' (1) a standalone and the `createIndexes` command never successfully returned, or','line_number':818,'multiline':False]
['text':' (2) an initial syncing node bulk building indexes during a collection clone.','line_number':819,'multiline':False]
['text':' In both cases the index entry in the catalog should be dropped.','line_number':820,'multiline':False]
['text':' Ensure the `ident` is dropped while we have the `indexIdent` value.','line_number':828,'multiline':False]
['text':' A concurrent operation, such as a checkpoint could be holding an open data','line_number':831,'multiline':False]
['text':' handle on the ident. Handoff the ident drop to the ident reaper to retry','line_number':832,'multiline':False]
['text':' later.','line_number':833,'multiline':False]
['text':'onDrop=','line_number':835,'multiline':True]
['text':' If there are no index builds to resume, we should drop all internal idents.','line_number':858,'multiline':False]
['text':' A concurrent operation, such as a checkpoint could be holding an open data handle on','line_number':868,'multiline':False]
['text':' the ident. Handoff the ident drop to the ident reaper to retry later.','line_number':869,'multiline':False]
['text':'onDrop=','line_number':871,'multiline':True]
['text':' intentionally not deleting _engine','line_number':895,'multiline':False]
['text':' Unless explicitly disabled, all storage engines should create a TimestampMonitor for','line_number':901,'multiline':False]
['text':' drop-pending internal idents, even if they do not support pending drops for collections','line_number':902,'multiline':False]
['text':' and indexes.','line_number':903,'multiline':False]
['text':' shutdown','line_number':917,'multiline':False]
['text':'*
 * Returns the first `dropCollection` error that this method encounters. This method will attempt
 * to drop all collections, regardless of the error status.
 ','line_number':944,'multiline':True]
['text':' Drop all indexes in the collection.','line_number':956,'multiline':False]
['text':'includingIdIndex=','line_number':958,'multiline':True]
['text':'onDropFn=','line_number':958,'multiline':True]
['text':' We should not proceed if we are already in backup mode','line_number':983,'multiline':False]
['text':' We should never reach here if we aren't already in backup mode','line_number':993,'multiline':False]
['text':' After repairing, re-initialize the collection with a valid RecordStore.','line_number':1047,'multiline':False]
['text':'isDropPending=','line_number':1051,'multiline':True]
['text':'commitTime','line_number':1051,'multiline':True]
['text':' When repairing a record store, keep the existing behavior of not installing a minimum visible','line_number':1054,'multiline':False]
['text':' timestamp.','line_number':1055,'multiline':False]
['text':' SERVER-58311: Reset the recovery unit to unposition storage engine cursors. This allows WT to','line_number':1138,'multiline':False]
['text':' assert it has sole access when performing rollback_to_stable().','line_number':1139,'multiline':False]
['text':' This should only be called by a parent that's done an appropriate `shouldLog` check. Do','line_number':1203,'multiline':False]
['text':' not duplicate the log level policy.','line_number':1204,'multiline':False]
['text':' The TimestampMonitor is an important background cleanup task for the storage','line_number':1299,'multiline':False]
['text':' engine and needs to be able to make progress to free up resources.','line_number':1300,'multiline':False]
['text':' Take a global lock in MODE_IS while fetching timestamps to guarantee that','line_number':1310,'multiline':False]
['text':' rollback-to-stable isn't running concurrently.','line_number':1311,'multiline':False]
['text':' The checkpoint timestamp is not cached in mongod and needs to be fetched with','line_number':1314,'multiline':False]
['text':' a call into WiredTiger, all the other timestamps are cached in mongod.','line_number':1315,'multiline':False]
['text':' Special case notification of all listeners when writes do not have','line_number':1336,'multiline':False]
['text':' timestamps. This handles standalone mode and storage engines that','line_number':1337,'multiline':False]
['text':' don't support timestamps.','line_number':1338,'multiline':False]
['text':' Logs and rethrows the exceptions of other types.','line_number':1356,'multiline':False]
['text':' TODO(SERVER-74657): Please revisit if this periodic job could be made killable.','line_number':1362,'multiline':False]
['text':'isKillableByStepdown','line_number':1363,'multiline':True]
['text':' namespace mongo','line_number':1458,'multiline':False]
