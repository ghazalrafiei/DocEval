['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
     * A TimestampMonitor is used to listen for any changes in the timestamps implemented by the
     * storage engine and to notify any registered listeners upon changes to these timestamps.
     *
     * The monitor follows the same lifecycle as the storage engine, started when the storage
     * engine starts and stopped when the storage engine stops.
     *
     * The PeriodicRunner must be started before the Storage Engine is started, and the Storage
     * Engine must be shutdown after the PeriodicRunner is shutdown.
     ','line_number':190,'multiline':True]
['text':'*
         * Timestamps that can be listened to for changes.
         ','line_number':202,'multiline':True]
['text':'*
         * A TimestampListener is used to listen for changes in a given timestamp and to execute the
         * user-provided callback to the change with a custom user-provided callback.
         *
         * The TimestampListener must be registered in the TimestampMonitor in order to be notified
         * of timestamp changes and react to changes for the duration it's part of the monitor.
         *
         * Listeners expected to run in standalone mode should handle Timestamp::min() notifications
         * appropriately.
         ','line_number':207,'multiline':True]
['text':' Caller must ensure that the lifetime of the variables used in the callback are valid.','line_number':219,'multiline':False]
['text':'*
             * A TimestampListener saves a 'callback' that will be executed whenever the specified
             * 'type' timestamp changes. The 'callback' function will be passed the new 'type'
             * timestamp.
             ','line_number':222,'multiline':True]
['text':'*
             * Executes the appropriate function with the callback of the listener with the new
             * timestamp.
             ','line_number':230,'multiline':True]
['text':' Timestamp type this listener monitors.','line_number':267,'multiline':False]
['text':' Function to execute when the timestamp changes.','line_number':270,'multiline':False]
['text':'*
         * Starts monitoring timestamp changes in the background with an initial listener.
         ','line_number':274,'multiline':True]
['text':'*
         * Removes registered listeners from the monitor.
         ','line_number':281,'multiline':True]
['text':'*
         * Adds a new listener to the monitor if it isn't already registered. A listener can only be
         * bound to one type of timestamp at a time.
         ','line_number':286,'multiline':True]
['text':'*
         * Remove a listener.
         ','line_number':292,'multiline':True]
['text':'*
         * Monitor changes in timestamps and to notify the listeners on change. Notifies all
         * listeners on Timestamp::min() in order to support standalone mode that is untimestamped.
         ','line_number':302,'multiline':True]
['text':' Periodic runner that the timestamp monitor schedules its job on.','line_number':312,'multiline':False]
['text':' Protects access to _listeners below.','line_number':315,'multiline':False]
['text':' This should remain as the last member variable so that its destructor gets executed first','line_number':319,'multiline':False]
['text':' when the class instance is being deconstructed. This causes the PeriodicJobAnchor to stop','line_number':320,'multiline':False]
['text':' the PeriodicJob, preventing us from accessing any destructed variables if this were to','line_number':321,'multiline':False]
['text':' run during the destruction of this class instance.','line_number':322,'multiline':False]
['text':'*
     * When loading after an unclean shutdown, this performs cleanup on the DurableCatalog.
     ','line_number':365,'multiline':True]
['text':'*
     * When called in a repair context (_options.forRepair=true), attempts to recover a collection
     * whose entry is present in the DurableCatalog, but missing from the KVEngine. Returns an
     * error Status if called outside of a repair context or the implementation of
     * KVEngine::recoverOrphanedIdent returns an error other than DataModifiedByRepair.
     *
     * Returns Status::OK if the collection was recovered in the KVEngine and a new record store was
     * created. Recovery does not make any guarantees about the integrity of the data in the
     * collection.
     ','line_number':424,'multiline':True]
['text':'*
     * Throws a fatal assertion if there are any missing index idents from the storage engine for
     * the given catalog entry.
     ','line_number':439,'multiline':True]
['text':'*
     * Called when the min of checkpoint timestamp (if exists) and oldest timestamp advances in the
     * KVEngine.
     ','line_number':449,'multiline':True]
['text':'*
     * Returns whether the given ident is an internal ident and if it should be dropped or used to
     * resume an index build.
     ','line_number':456,'multiline':True]
['text':' This must be the first member so it is destroyed last.','line_number':469,'multiline':False]
['text':' Manages drop-pending idents. Requires access to '_engine'.','line_number':474,'multiline':False]
['text':' Listener for min of checkpoint and oldest timestamp changes.','line_number':477,'multiline':False]
['text':' Listener for cleanup of CollectionCatalog when oldest timestamp advances.','line_number':480,'multiline':False]
['text':' Flag variable that states if the storage engine is in backup mode.','line_number':488,'multiline':False]
['text':' namespace mongo','line_number':493,'multiline':False]
