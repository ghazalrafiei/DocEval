['text':'*
 *    Copyright (C) 2022-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' IWYU pragma: no_include "cxxabi.h"','line_number':34,'multiline':False]
['text':' Gets a random string of 'count' length consisting of printable ASCII chars (32-126).','line_number':94,'multiline':False]
['text':' buffer amply big enough to fit any BSONObj used in this test','line_number':111,'multiline':False]
['text':' Creates a named pipe of BSON objects.','line_number':120,'multiline':False]
['text':'   pipeWaiter - synchronization for pipe creation','line_number':121,'multiline':False]
['text':'   pipePath - file path for the named pipe','line_number':122,'multiline':False]
['text':'   numToWrite - number of bsons to write to the pipe','line_number':123,'multiline':False]
['text':'   bsonObjs - vector of bsons to write round-robin to the pipe','line_number':124,'multiline':False]
['text':' Gives some time to the producer so that it can initialize a named pipe.','line_number':161,'multiline':False]
['text':' Gives some time to the producer so that it can initialize a named pipe.','line_number':187,'multiline':False]
['text':' Requests more data than the pipe contains. Should only get the bytes it does contain.','line_number':191,'multiline':False]
['text':' Gives some time to the producer so that it can initialize a named pipe.','line_number':217,'multiline':False]
['text':' Test reading multiple pipes with a MultiBsonStreamCursor. In this test each pipe contains many','line_number':247,'multiline':False]
['text':' copies of a pipe-specific BSONObj, and everything in each pipe fits into a single read buffer.','line_number':248,'multiline':False]
['text':' Create two pipes. The first has only "a" objects and the second has only "zed" objects.','line_number':255,'multiline':False]
['text':' Gives some time to the producers so they can initialize the named pipes.','line_number':270,'multiline':False]
['text':' Create metadata describing the pipes and a MultiBsonStreamCursor to read them.','line_number':275,'multiline':False]
['text':' Use MultiBsonStreamCursor to read the pipes.','line_number':286,'multiline':False]
['text':' Test reading multiple pipes with a MultiBsonStreamCursor that uses large enough pipes to exercise','line_number':318,'multiline':False]
['text':' the cases of partial objects at the end of a single block read inside MultiStreamBsonCursor,','line_number':319,'multiline':False]
['text':' which must then be completed by the subsequent call to next(). This test writes and reads back a','line_number':320,'multiline':False]
['text':' few million bsons to and from each pipe.','line_number':321,'multiline':False]
['text':' Create pipes with different numbers of varying-sized bsons. For stress testing, these are','line_number':349,'multiline':False]
['text':' substantially larger than 32 MB (the largest size MultiBsonStreamCursor's buffer can reach),','line_number':350,'multiline':False]
['text':' so they will cause several wraps. The largish size of the objects makes it highly likely that','line_number':351,'multiline':False]
['text':' some reads will leave a partial object that must be completed on a later next() call.','line_number':352,'multiline':False]
['text':' Gives some time to the producers so they can initialize the named pipes.','line_number':371,'multiline':False]
['text':' Create metadata describing the pipes and a MultiBsonStreamCursor to read them.','line_number':376,'multiline':False]
['text':' Use MultiBsonStreamCursor to read the pipes.','line_number':387,'multiline':False]
['text':' Test reading multiple pipes with a MultiBsonStreamCursor with large BSON objects, much larger','line_number':416,'multiline':False]
['text':' than the starting buffer size of 8K. This exercises the dynamic buffer expansion.','line_number':417,'multiline':False]
['text':' BSON object with 15 1MB string fields','line_number':427,'multiline':False]
['text':' Create pipes with large bsons.','line_number':438,'multiline':False]
['text':' Gives some time to the producers so they can initialize the named pipes.','line_number':457,'multiline':False]
['text':' Create metadata describing the pipes and a MultiBsonStreamCursor to read them.','line_number':462,'multiline':False]
['text':' Use MultiBsonStreamCursor to read the pipes.','line_number':473,'multiline':False]
['text':' Tests MultiBsonStreamCursor reading a large number of pipes with random-sized BSON objects and','line_number':498,'multiline':False]
['text':' randomized data. This test creates 20 threads that each write a pipe containing a randomized','line_number':499,'multiline':False]
['text':' average of 1K BSON objects, each object holding a string value of randomized average 1K in size','line_number':500,'multiline':False]
['text':' of random printable ASCII characters, plus field name and overhead. Thus it will scan an expected','line_number':501,'multiline':False]
['text':' ~20+ MB of data (~1+ MB per pipe).','line_number':502,'multiline':False]
['text':' set a fixed random seed','line_number':504,'multiline':False]
['text':' shadows the global','line_number':505,'multiline':False]
['text':' pipe producer threads','line_number':507,'multiline':False]
['text':' pipe waiters','line_number':508,'multiline':False]
['text':' vector of BSON objects for each pipe','line_number':509,'multiline':False]
['text':' number of objects written to all pipes','line_number':510,'multiline':False]
['text':' Create the BSON objects, averaging 1K objects per pipe with average 1K random data in each.','line_number':512,'multiline':False]
['text':' Create the pipes.','line_number':523,'multiline':False]
['text':' Gives some time to the producers so they can initialize the named pipes.','line_number':538,'multiline':False]
['text':' Create metadata describing the pipes and a MultiBsonStreamCursor to read them.','line_number':543,'multiline':False]
['text':' Use MultiBsonStreamCursor to read the pipes.','line_number':554,'multiline':False]
['text':' number of objects read from all pipes','line_number':555,'multiline':False]
['text':' current pipe index','line_number':556,'multiline':False]
['text':' number of objects read from current pipe','line_number':557,'multiline':False]
['text':' loop in case 0 objs in a pipe','line_number':565,'multiline':False]
['text':' namespace mongo','line_number':588,'multiline':False]
