['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' Insert multiple records and iterate through them in the forward direction.','line_number':56,'multiline':False]
['text':' When curr() or getNext() is called on an iterator positioned at EOF,','line_number':57,'multiline':False]
['text':' the iterator returns RecordId() and stays at EOF.','line_number':58,'multiline':False]
['text':' Insert multiple records and iterate through them in the reverse direction.','line_number':106,'multiline':False]
['text':' When curr() or getNext() is called on an iterator positioned at EOF,','line_number':107,'multiline':False]
['text':' the iterator returns RecordId() and stays at EOF.','line_number':108,'multiline':False]
['text':' Insert multiple records and try to create a forward iterator','line_number':157,'multiline':False]
['text':' starting at an interior position.','line_number':158,'multiline':False]
['text':' Insert multiple records and try to create a reverse iterator','line_number':208,'multiline':False]
['text':' starting at an interior position.','line_number':209,'multiline':False]
['text':' Insert several records, and iterate to the end. Ensure that the record iterator','line_number':259,'multiline':False]
['text':' is EOF. Add an additional record, saving and restoring the iterator state, and check','line_number':260,'multiline':False]
['text':' that the iterator remains EOF.','line_number':261,'multiline':False]
['text':' Get a forward iterator starting at the beginning of the record store.','line_number':299,'multiline':False]
['text':' Iterate, checking EOF along the way.','line_number':302,'multiline':False]
['text':' Add a record and ensure we're still EOF.','line_number':311,'multiline':False]
['text':' Iterator should still be EOF.','line_number':326,'multiline':False]
['text':' Test calling save and restore after each call to next','line_number':332,'multiline':False]
['text':' Get a forward iterator starting at the beginning of the record store.','line_number':370,'multiline':False]
['text':' Iterate, checking EOF along the way.','line_number':373,'multiline':False]
['text':' It is legal to save twice in a row.','line_number':376,'multiline':False]
['text':' It is legal to save twice in a row.','line_number':386,'multiline':False]
['text':' Insert two records, and iterate a cursor to EOF. Seek the same cursor to the first and ensure','line_number':393,'multiline':False]
['text':' that next() returns the second record.','line_number':394,'multiline':False]
['text':' Get a forward iterator starting at the beginning of the record store.','line_number':419,'multiline':False]
['text':' Iterate, checking EOF along the way.','line_number':422,'multiline':False]
['text':' seekExact() must return boost::none if the RecordId does not exist.','line_number':448,'multiline':False]
['text':' Insert three records and remember their record ids.','line_number':455,'multiline':False]
['text':' Delete the second record.','line_number':471,'multiline':False]
['text':' Seeking to the second record should now return boost::none, for both forward and reverse','line_number':478,'multiline':False]
['text':' cursors.','line_number':479,'multiline':False]
['text':' Similarly, findRecord() should not find the deleted record.','line_number':485,'multiline':False]
['text':' namespace','line_number':490,'multiline':False]
['text':' namespace mongo','line_number':491,'multiline':False]
