['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' Encode the size of a RecordId binary string using up to 4 bytes, 7 bits per byte.','line_number':83,'multiline':False]
['text':' This supports encoding sizes that fit into 28 bits, which largely covers the','line_number':84,'multiline':False]
['text':' maximum BSON size.','line_number':85,'multiline':False]
['text':'*
 * Encodes info needed to restore the original BSONTypes from a KeyString. They cannot be
 * stored in place since we don't want them to affect the ordering (1 and 1.0 compare as
 * equal).
 ','line_number':89,'multiline':True]
['text':' See comments in getBuffer() about short/long encoding schemes.','line_number':96,'multiline':False]
['text':'*
     * If there are no bytes remaining, assumes AllZeros. Otherwise, reads bytes out of the
     * BufReader in the format described on the getBuffer() method.
     ','line_number':116,'multiline':True]
['text':'*
     * If true, no bits have been set to one. This is true if no bits have been set at all.
     ','line_number':127,'multiline':True]
['text':'*
     * These methods return a buffer and size which encodes all of the type bits in this
     * instance.
     *
     * Encoded format:
     * Case 1 (first byte is 0x0):
     *     This encodes the "AllZeros" state which represents an infinite stream of bits set
     *     to 0. Callers may optionally encode this case as an empty buffer if they have
     *     another way to mark the end of the buffer. There are no follow-up bytes.
     *
     * Case 2 (first byte isn't 0x0 but has high bit set to 0):
     *     The first byte is the only data byte. This can represent any 7-bit sequence or an
     *     8-bit sequence if the 8th bit is 0, since the 8th bit is the same as the bit that
     *     is 1 if the first byte is the size byte. There are no follow-up bytes.
     *
     * Case 3 (first byte has high bit set to 1 but it's not 0x80):
     *     Remaining bits of first byte encode number of follow-up bytes that are data
     *     bytes.
     *
     * Case 4 (first byte is 0x80)
     *     The first byte is the signal byte indicating that this TypeBits is encoded with long
     *     encoding scheme: the next four bytes (in little endian order) represent the number of
     *     data bytes.
     *
     * Within data bytes (ie everything excluding the size byte if there is one), bits are
     * packed in from low to high.
     ','line_number':134,'multiline':True]
['text':' Case 1: pointer to a zero byte.','line_number':163,'multiline':False]
['text':' Case 2: all bits in one byte; no size byte.','line_number':166,'multiline':False]
['text':' Case 3 & 4: size byte(s) + data bytes.','line_number':168,'multiline':False]
['text':' Case 1','line_number':172,'multiline':False]
['text':' 0 should be handled as isAllZeros.','line_number':178,'multiline':False]
['text':' Case 4','line_number':179,'multiline':False]
['text':' Case 2','line_number':182,'multiline':False]
['text':' Case 3','line_number':186,'multiline':False]
['text':' TypeBits with all zeros is in short encoding regardless of the data buffer length.','line_number':190,'multiline':False]
['text':'','line_number':194,'multiline':False]
['text':' Everything below is only for use by key_string::Builder.','line_number':195,'multiline':False]
['text':'','line_number':196,'multiline':False]
['text':' Note: No space is used if all bits are 0 so the most common cases should be 0x0.','line_number':198,'multiline':False]
['text':' indicates 6 more bits of typeinfo follow.','line_number':205,'multiline':False]
['text':' kNumericZero case, 3 more bits follow.','line_number':206,'multiline':False]
['text':' normalized -0.0 double, either V0 or V1.','line_number':207,'multiline':False]
['text':' legacy encoding for V0','line_number':208,'multiline':False]
['text':' The following describe the initial 5 type bits for kNegativeOrDecimalZero. These bits','line_number':210,'multiline':False]
['text':' encode double -0 or a 3-bit prefix (range 0 to 5) of the 15-bit decimal zero type.','line_number':211,'multiline':False]
['text':' 0b11000','line_number':212,'multiline':False]
['text':' 0b11001','line_number':214,'multiline':False]
['text':' There are 6 * (1<<12) == 2 * (kMaxBiasedExponent + 1) == 24576 decimal zeros.','line_number':216,'multiline':False]
['text':' 0b11010 12 more exponent bits follow','line_number':217,'multiline':False]
['text':' 0b11011','line_number':218,'multiline':False]
['text':' 0b11100','line_number':219,'multiline':False]
['text':' 0b11101','line_number':220,'multiline':False]
['text':' 0b11110','line_number':221,'multiline':False]
['text':' 0b11111','line_number':222,'multiline':False]
['text':' Given a decimal zero type between kDecimalZero0xxx and kDecimal5xxx, read the','line_number':265,'multiline':False]
['text':' remaining 12 bits and return which of the 24576 decimal zeros to produce.','line_number':266,'multiline':False]
['text':' Reads the stored exponent bits of a non-zero decimal number.','line_number':269,'multiline':False]
['text':'*
         * Passed in TypeBits must outlive this Reader instance.
         ','line_number':279,'multiline':True]
['text':'*
     * An ExplainReader wraps a TypeBits::Reader and stores a human-readable description an about
     * the TypeBits that have been retrieved. The explanation may be retrieved with getExplain().

     * Note that this class is only designed to generate an explanation for a single field. To
     * generate explanations for multiple fields, use multiple ExplainReaders.
     *
     * For diagnostic purposes only.
     ','line_number':299,'multiline':True]
['text':'*
     * See getBuffer()/getSize() documentation for a description of how data is encoded. When
     * the TypeBits size is in short encoding range(<=127), the bytes starting from the fifth
     * byte are the complete TypeBits in short encoding scheme (1 size byte + data bytes).  When
     * the TypeBits size is in long encoding range(>127), all the bytes are used for the long
     * encoding format (first byte + 4 size bytes + data bytes).
     ','line_number':355,'multiline':True]
['text':' TypeBits buffers are often small and at least 5 bytes. Only pre-allocate a small amount of','line_number':363,'multiline':False]
['text':' memory despite using a StackBufBuilder, which can use cheap stack space. Because TypeBits is','line_number':364,'multiline':False]
['text':' allowed to be allocated dynamically on the heap, so is the owned StackBufBuilder. Lower the','line_number':365,'multiline':False]
['text':' initial buffer size so that we do not pre-allocate excessively large buffers on the heap when','line_number':366,'multiline':False]
['text':' TypeBits is not a stack variable.','line_number':367,'multiline':False]
['text':'*
 * Value owns a buffer that corresponds to a completely generated key_string::Builder with the
 * TypeBits appended.
 *
 * To optimize copy performance and space requirements of this structure, the buffer will contain
 * the full KeyString with the TypeBits appended at the end.
 ','line_number':373,'multiline':True]
['text':' Use a copy-and-swap, which prevents unnecessary allocation and deallocations.','line_number':394,'multiline':False]
['text':'*
     * Compare with another key_string::Value or Builder.
     ','line_number':402,'multiline':True]
['text':'*
     * Compare with another key_string::Value or Builder, ignoring the RecordId part of both.
     ','line_number':410,'multiline':True]
['text':' Returns the size of the stored KeyString.','line_number':418,'multiline':False]
['text':' Returns whether the size of the stored KeyString is 0.','line_number':423,'multiline':False]
['text':' Returns the stored TypeBits.','line_number':432,'multiline':False]
['text':' Compute hash over key','line_number':439,'multiline':False]
['text':'*
     * Returns a hex encoding of this key.
     ','line_number':444,'multiline':True]
['text':' Serializes this Value into a storable format with TypeBits information. The serialized','line_number':449,'multiline':False]
['text':' format takes the following form:','line_number':450,'multiline':False]
['text':'   [keystring size][keystring encoding][typebits encoding]','line_number':451,'multiline':False]
['text':' Serialize size of Keystring','line_number':453,'multiline':False]
['text':' Serialize Keystring + Typebits','line_number':454,'multiline':False]
['text':'*
     * Serializes this Value, excluding the RecordId, into a storable format with TypeBits
     * information. The serialized format takes the following form:
     *   [keystring size][keystring encoding][typebits encoding]
     ','line_number':457,'multiline':True]
['text':' Deserialize the Value from a serialized format.','line_number':465,'multiline':False]
['text':' advances the buf','line_number':473,'multiline':False]
['text':' Note: this variable is needed to make sure that no method is called on 'newBuf'','line_number':479,'multiline':False]
['text':' after a call on its 'release' method.','line_number':480,'multiline':False]
['text':'/ Members for Sorter','line_number':485,'multiline':False]
['text':' It is illegal to call this function on a value that is backed by a buffer that is shared','line_number':499,'multiline':False]
['text':' elsewhere. The SharedBufferFragment cannot accurately report memory usage per individual','line_number':500,'multiline':False]
['text':' Value, so we require the sorter to look at the SharedBufferFragmentBuilder's memory usage in','line_number':501,'multiline':False]
['text':' aggregate and free unused memory periodically.','line_number':502,'multiline':False]
['text':' _ksSize is the total length that the KeyString takes up in the buffer.','line_number':522,'multiline':False]
['text':' Anything to be stored in an index must use this.','line_number':528,'multiline':False]
['text':' Buffer is empty.','line_number':534,'multiline':False]
['text':' In the process of appending BSON Elements','line_number':535,'multiline':False]
['text':' Finished appedning BSON Elements.','line_number':536,'multiline':False]
['text':' Finished appending a RecordID.','line_number':537,'multiline':False]
['text':' Finished appending a TypeBits.','line_number':538,'multiline':False]
['text':' Released the buffer and so the buffer is no longer valid.','line_number':539,'multiline':False]
['text':'*
 * Encodes the kind of NumberDecimal that is stored.
 ','line_number':542,'multiline':True]
['text':'*
     * Constructs a builder given an object and ordering, stripping out top-level field names.
     * Appends the given record id to the end.
     ','line_number':570,'multiline':True]
['text':'*
     * Constructs a builder given an object and ordering, stripping out top-level field names.
     ','line_number':579,'multiline':True]
['text':'*
     * Copies the data held in this buffer into a Value type that holds and owns a copy of the
     * buffer.
     ','line_number':604,'multiline':True]
['text':' Create a new buffer that is a concatenation of the KeyString and its TypeBits.','line_number':611,'multiline':False]
['text':' Note: this variable is needed to make sure that no method is called on 'newBuf'','line_number':619,'multiline':False]
['text':' after a call on its 'release' method.','line_number':620,'multiline':False]
['text':'*
     * Appends the given element, discarding the field name. The transformation function will be
     * applied to all string values contained in the given element.
     ','line_number':628,'multiline':True]
['text':'*
     * Appends a Discriminator byte and kEnd byte to a key string.
     ','line_number':656,'multiline':True]
['text':'*
     * Resets to an empty state.
     * Equivalent to but faster than *this = Builder(ord, discriminator)
     ','line_number':661,'multiline':True]
['text':'*
     * Resets the state to the given object and ordering, stripping out top-level field names.
     * Appends the given record id to the end.
     ','line_number':677,'multiline':True]
['text':'*
     * Resets the state to the given object and ordering, stripping out top-level field names.
     ','line_number':683,'multiline':True]
['text':'*
     * Compare with another key_string::Value or Builder.
     ','line_number':720,'multiline':True]
['text':'*
     * Compare with another key_string::Value or Builder, ignoring the RecordId part of both.
     ','line_number':726,'multiline':True]
['text':'*
     * @return a hex encoding of this key
     ','line_number':734,'multiline':True]
['text':'*
     * Version to use for conversion to/from KeyString. V1 has different encodings for numeric
     * values.
     ','line_number':739,'multiline':True]
['text':'*
     * Appends all elements in the given object, stripping out top-level field names.
     ','line_number':746,'multiline':True]
['text':'*
     * @param name - optional, can be NULL
     *              if NULL, not included in encoding
     *              if not NULL, put in after type, before value
     ','line_number':773,'multiline':True]
['text':' We can empty at any point since it just means that we are clearing the buffer.','line_number':817,'multiline':False]
['text':' Appends the TypeBits buffer to the main buffer and returns the offset of where the TypeBits','line_number':854,'multiline':False]
['text':' begin','line_number':855,'multiline':False]
['text':' append the TypeBits.','line_number':859,'multiline':False]
['text':' Helper class to hold a buffer builder. This class needs to be before BuilderBase when inheriting','line_number':888,'multiline':False]
['text':' to ensure the buffer is constructed first','line_number':889,'multiline':False]
['text':' Forwarding constructor to BuilderBase','line_number':920,'multiline':False]
['text':' When copying don't allocate memory by default. Copy-constructor will request the right amount','line_number':925,'multiline':False]
['text':' of memory','line_number':926,'multiline':False]
['text':'*
     * Releases the data held in this buffer into a Value type, releasing and transfering ownership
     * of the buffer _buffer and TypeBits _typeBits to the returned Value object from the current
     * Builder.
     ','line_number':929,'multiline':True]
['text':' Note: this variable is needed to make sure that no method is called on '_bufferBuilder'','line_number':938,'multiline':False]
['text':' after a call on its 'release' method.','line_number':939,'multiline':False]
['text':' Underlying SharedBufferFragmentBuilder can only build one buffer at the time, so copy does','line_number':967,'multiline':False]
['text':' not work for the PooledBuilder.','line_number':968,'multiline':False]
['text':'
 * The isKeyString struct allows the operators below to only be enabled if the types being operated
 * on are KeyStrings.
 ','line_number':990,'multiline':True]
['text':'*
 * Given a KeyString which may or may not have a RecordId, returns the length of the section without
 * the RecordId. More expensive than sizeWithoutRecordId(Long|Str)AtEnd
 ','line_number':1049,'multiline':True]
['text':'*
 * Decodes the given KeyString buffer into it's BSONObj representation. This is marked as
 * noexcept since the assumption is that 'buffer' is a valid KeyString buffer and this method
 * is not expected to throw.
 *
 * If the buffer provided may not be valid, use the 'safe' version instead.
 ','line_number':1055,'multiline':True]
['text':'*
 * Decodes a RecordId long from the end of a buffer.
 ','line_number':1077,'multiline':True]
['text':'*
 * Decodes a RecordId string from the end of a buffer.
 * The RecordId string length cannot be determined by looking at the start of the string.
 ','line_number':1082,'multiline':True]
['text':'*
 * Given a KeyString with a RecordId in the long format, returns the length of the section without
 * the RecordId.
 ','line_number':1088,'multiline':True]
['text':'*
 * Given a KeyString with a RecordId in the string format, returns the length of the section without
 * the RecordId.
 ','line_number':1094,'multiline':True]
['text':'*
 * Decodes a RecordId, consuming all bytes needed from reader.
 ','line_number':1100,'multiline':True]
['text':'*
 * Read one KeyString component from the given 'reader' and 'typeBits' inputs and stream it to the
 * 'valueBuilder' object, which converts it to a "Slot-Based Execution" (SBE) representation. When
 * no components remain in the KeyString, this function returns false and leaves 'valueBuilder'
 * unmodified.
 ','line_number':1107,'multiline':True]
['text':'
 * Appends the first field of a key string to a BSON object.
 * This does not accept TypeBits because callers of this function discard TypeBits.
 ','line_number':1119,'multiline':True]
['text':'*
 * Takes key string and key pattern information and uses it to present human-readable information
 * about an index or collection entry.
 *
 * 'logPrefix' addes a logging prefix. Useful for differentiating callers.
 ','line_number':1178,'multiline':True]
['text':'*
 * Returns a human-readable output that explains each byte within the key string. For diagnostic
 * purposes only.
 *
 * If 'keyPattern' is empty or does not have as many fields as there are in the key string, fields
 * will be assumed to be ascending and will be assigned field names as empty string.
 * 'keyFormat' may be provided if the caller knows the RecordId format of this key string, if
 * any.
 ','line_number':1192,'multiline':True]
['text':' namespace key_string','line_number':1207,'multiline':False]
['text':' namespace mongo','line_number':1211,'multiline':False]
