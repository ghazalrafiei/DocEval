['text':'*
 *    Copyright (C) 2023-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' Keep "markers" against a collection to efficiently remove ranges of old records when the','line_number':67,'multiline':False]
['text':' collection grows. This class is meant to be used only with collections that have the following','line_number':68,'multiline':False]
['text':' requirements:','line_number':69,'multiline':False]
['text':' * The collection is an insert-only collection','line_number':70,'multiline':False]
['text':' * The collection has no indexes','line_number':71,'multiline':False]
['text':' * If a record with RecordId=Max has to be deleted then all previous records with RecordId D such','line_number':72,'multiline':False]
['text':' that Min < D <= Max should be deleted. With RecordID=Min defining a lower boundary.','line_number':73,'multiline':False]
['text':'','line_number':74,'multiline':False]
['text':' If these requirements hold then this class can be used to compute and maintain up-to-date markers','line_number':75,'multiline':False]
['text':' for ranges of deletions. These markers will be expired and returned to the deleter whenever the','line_number':76,'multiline':False]
['text':' implementation defined '_hasExcessMarkers' returns true.','line_number':77,'multiline':False]
['text':'* Markers represent "waypoints" of the collection that contain information between the current
     * marker and the previous one.
     *
     * Markers are created by the class automatically whenever there are more than X number of bytes
     * between the previous marker and the latest insertion.
     *
     *                                                               'partial marker'
     *            |___________________|......|____________________|______
     *               Oldest Marker               Newest Marker
     *  Min rid  <-------------------------------------------------<------- Max rid
     *
     * A 'Marker' is not created until it is full or its creation is requested by a caller. A
     * 'partial marker' is not of type 'Marker', but rather metadata counting incoming records and
     * bytes until it can be used to construct a 'Marker'.
     *
     *                    Marker
     *             |__________________|
     *                          lastRecord
     ','line_number':80,'multiline':True]
['text':' Approximate number of records between the current marker and the','line_number':100,'multiline':False]
['text':' previous marker.','line_number':101,'multiline':False]
['text':' Approximate size of records between the current marker and the','line_number':102,'multiline':False]
['text':' previous marker.','line_number':103,'multiline':False]
['text':' RecordId of the record that created this marker.','line_number':104,'multiline':False]
['text':' Walltime of the record that created this marker.','line_number':105,'multiline':False]
['text':' Updates the current marker with the inserted value if the operation commits the WUOW.','line_number':130,'multiline':False]
['text':' The method used for creating the initial set of markers.','line_number':137,'multiline':False]
['text':' The initial set of markers to use when constructing the CollectionMarkers object.','line_number':142,'multiline':False]
['text':' Given the estimated collection 'dataSize' and 'numRecords', along with a target','line_number':158,'multiline':False]
['text':' 'minBytesPerMarker' and the desired 'numRandomSamplesPerMarker' (if sampling is the chosen','line_number':159,'multiline':False]
['text':' creation method), computes the initial creation method to try for the initialization.','line_number':160,'multiline':False]
['text':'','line_number':161,'multiline':False]
['text':' It's possible the initial creation method is not the actual creation method. However, it will','line_number':162,'multiline':False]
['text':' be the first creation method tried. For example, if estimates of 'dataSize' and 'numRecords'','line_number':163,'multiline':False]
['text':' are really far off, sampling may default back to scanning later on.','line_number':164,'multiline':False]
['text':'','line_number':165,'multiline':False]
['text':' 'numberOfMarkersToKeepForOplog' exists solely to maintain legacy behavior of','line_number':166,'multiline':False]
['text':' 'OplogTruncateMarkers'. It serves as the maximum number of truncate markers to keep before','line_number':167,'multiline':False]
['text':' reclaiming the oldest truncate markers.','line_number':168,'multiline':False]
['text':'*
     * A collection iterator class meant to encapsulate how the collection is scanned/sampled. As
     * the initialisation step is only concerned about getting either the next element of the
     * collection or a random one, this allows the user to specify how to perform these steps. This
     * allows one for example to avoid yielding and use raw cursors or to use the query framework so
     * that yielding is performed and we don't affect server stability.
     *
     * If we were to use query framework scans here we would incur on a layering violation as the
     * storage layer shouldn't have to interact with the query (higher) layer in here.
     ','line_number':175,'multiline':True]
['text':' Returns the next element in the collection. Behaviour is the same as performing a normal','line_number':187,'multiline':False]
['text':' collection scan.','line_number':188,'multiline':False]
['text':' Returns a random document from the collection.','line_number':191,'multiline':False]
['text':' Reset the iterator. This will recreate any internal cursors used by the class so that','line_number':196,'multiline':False]
['text':' calling getNext* will start from the beginning again.','line_number':197,'multiline':False]
['text':' Creates the initial set of markers. This will decide whether to perform a collection scan or','line_number':209,'multiline':False]
['text':' sampling based on the size of the collection.','line_number':210,'multiline':False]
['text':'','line_number':211,'multiline':False]
['text':' 'numberOfMarkersToKeepForOplog' exists solely to maintain legacy behavior of','line_number':212,'multiline':False]
['text':' 'OplogTruncateMarkers'. It serves as the maximum number of truncate markers to keep before','line_number':213,'multiline':False]
['text':' reclaiming the oldest truncate markers.','line_number':214,'multiline':False]
['text':' Creates the initial set of markers by fully scanning the collection. The set of markers','line_number':223,'multiline':False]
['text':' returned will have correct metrics.','line_number':224,'multiline':False]
['text':' Creates the initial set of markers by sampling the collection. The set of markers','line_number':232,'multiline':False]
['text':' returned will have approximate metrics. The metrics of each marker will be equal and contain','line_number':233,'multiline':False]
['text':' the collection's size and record count divided by the number of markers.','line_number':234,'multiline':False]
['text':'','line_number':247,'multiline':False]
['text':' The following methods are public only for use in tests.','line_number':248,'multiline':False]
['text':'','line_number':249,'multiline':False]
['text':' Return a copy of the vector.','line_number':265,'multiline':False]
['text':' Used to decide whether the oldest marker has expired. Implementations are free to use','line_number':272,'multiline':False]
['text':' whichever process they want to discern if there are expired markers.','line_number':273,'multiline':False]
['text':' This method will get called holding the _markersMutex.','line_number':274,'multiline':False]
['text':' Method used to notify the implementation of a new marker being created. Implementations are','line_number':277,'multiline':False]
['text':' free to implement this however they see fit by overriding it. By default this is a no-op.','line_number':278,'multiline':False]
['text':' Minimum number of bytes the marker being filled should contain before it gets added to the','line_number':281,'multiline':False]
['text':' deque of collection markers.','line_number':282,'multiline':False]
['text':' Number of records in the marker being filled.','line_number':285,'multiline':False]
['text':' Number of bytes in the marker being filled.','line_number':286,'multiline':False]
['text':' Protects against concurrent access to the deque of collection markers.','line_number':288,'multiline':False]
['text':' front = oldest, back = newest.','line_number':290,'multiline':False]
['text':'*
     * Returns whether the truncate markers instace has no markers, whether partial or whole. Note
     * that this method can provide a stale result unless the caller can guarantee that no more
     * markers will be created.
     ','line_number':318,'multiline':True]
['text':'*
 * An extension of CollectionTruncateMarkers that provides support for creating "partial markers".
 *
 * Partial markers are normal markers that can be requested by the user calling
 * CollectionTruncateMarkersWithPartialExpiration::createPartialMarkerIfNecessary. The
 * implementation will then consider whether the current data awaiting a marker should be deleted
 * according to some internal logic. This is useful in time-based expiration systems as there could
 * be low activity collections containing data that should be expired but won't because there is no
 * marker.
 ','line_number':339,'multiline':True]
['text':' Creates a partially filled marker if necessary. The criteria used is whether there is data in','line_number':358,'multiline':False]
['text':' the partial marker and whether the implementation's '_hasPartialMarkerExpired' returns true.','line_number':359,'multiline':False]
['text':' Highest marker seen during the lifetime of the class. Modifications must happen','line_number':373,'multiline':False]
['text':' while holding '_lastHighestRecordMutex'.','line_number':374,'multiline':False]
['text':' Used to decide if the current partially built marker has expired.','line_number':380,'multiline':False]
['text':' Updates the highest seen RecordId and wall time if they are above the current ones.','line_number':387,'multiline':False]
['text':'*
 * A Collection iterator meant to work with raw RecordStores. This iterator will not yield between
 * calls to getNext()/getNextRandom().
 *
 * It is only safe to use when the user is not accepting any user operation. Some examples of when
 * this class can be used are during oplog initialisation, repair, recovery, etc.
 ','line_number':405,'multiline':True]
['text':'*
 * A collection iterator that can yield between calls to getNext()/getNextRandom()
 ','line_number':449,'multiline':True]
['text':' namespace mongo','line_number':497,'multiline':False]
