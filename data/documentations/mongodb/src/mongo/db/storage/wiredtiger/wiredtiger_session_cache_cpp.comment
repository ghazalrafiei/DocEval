['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' This may happen when there is an ongoing full validation, with a call to WT::verify.','line_number':101,'multiline':False]
['text':' Other operations which may trigger this include salvage, rollback_to_stable, upgrade,','line_number':102,'multiline':False]
['text':' alter, or if there is a bulk cursor open. Mongo (currently) does not run any of','line_number':103,'multiline':False]
['text':' these operations concurrently with this code path, except for validation.','line_number':104,'multiline':False]
['text':' namespace','line_number':120,'multiline':False]
['text':' static','line_number':140,'multiline':False]
['text':' -----------------------','line_number':145,'multiline':False]
['text':' Try to atomically set _shuttingDown flag, but just return if another thread was first.','line_number':166,'multiline':False]
['text':' Spin as long as there are threads blocking shutdown.','line_number':170,'multiline':False]
['text':' For inMemory storage engines, the data is "as durable as it's going to get".','line_number':185,'multiline':False]
['text':' That is, a restart is equivalent to a complete node failure.','line_number':186,'multiline':False]
['text':' Stable checkpoints are only meaningful in a replica set. Replication sets the "stable','line_number':201,'multiline':False]
['text':' timestamp". If the stable timestamp is unset, WiredTiger takes a full checkpoint, which is','line_number':202,'multiline':False]
['text':' incidentally what we want. A "true" stable checkpoint (a stable timestamp was set on the','line_number':203,'multiline':False]
['text':' WT_CONNECTION, i.e: replication is on) requires `forceCheckpoint` to be true and journaling','line_number':204,'multiline':False]
['text':' to be enabled.','line_number':205,'multiline':False]
['text':' When forcing a checkpoint with journaling enabled, don't synchronize with other','line_number':210,'multiline':False]
['text':' waiters, as a log flush is much cheaper than a full checkpoint.','line_number':211,'multiline':False]
['text':' Do the remainder in a critical section that ensures only a single thread at a time','line_number':229,'multiline':False]
['text':' will attempt to synchronize.','line_number':230,'multiline':False]
['text':' synchronized with writes through mutex','line_number':232,'multiline':False]
['text':' Someone else synced already since we read lastSyncTime, so we're done!','line_number':234,'multiline':False]
['text':' Unconditionally unlock mutex here to run operations that do not require synchronization.','line_number':236,'multiline':False]
['text':' The JournalListener is the only operation that meets this criteria currently.','line_number':237,'multiline':False]
['text':' Nobody has synched yet, so we have to sync ourselves.','line_number':247,'multiline':False]
['text':' Initialize on first use.','line_number':249,'multiline':False]
['text':' Flush the journal.','line_number':256,'multiline':False]
['text':' The session is reset periodically so that WT doesn't consider it a rogue session and log','line_number':261,'multiline':False]
['text':' about it. The session doesn't actually pin any resources that need to be released.','line_number':262,'multiline':False]
['text':' 5 minutes ','line_number':263,'multiline':True]
['text':' Unconditionally unlock mutex here to run operations that do not require synchronization.','line_number':268,'multiline':False]
['text':' The JournalListener is the only operation that meets this criteria currently.','line_number':269,'multiline':False]
['text':' It is possible for a prepared transaction to block on bonus eviction inside WiredTiger after','line_number':278,'multiline':False]
['text':' it commits or rolls-back, but this delays it from signalling us to wake up. In the very','line_number':279,'multiline':False]
['text':' worst case that the only evictable page is the one pinned by our cursor, AND there are no','line_number':280,'multiline':False]
['text':' other prepared transactions committing or aborting, we could reach a deadlock. Since the','line_number':281,'multiline':False]
['text':' caller is already expecting spurious wakeups, we impose a large timeout to periodically force','line_number':282,'multiline':False]
['text':' the caller to retry its operation.','line_number':283,'multiline':False]
['text':' Do nothing if session close idle time is set to 0 or less','line_number':306,'multiline':False]
['text':' Discard all sessions that became idle before the cutoff time','line_number':316,'multiline':False]
['text':' Closing expired idle sessions is expensive, so do it outside of the cache mutex. This helps','line_number':329,'multiline':False]
['text':' to avoid periodic operation latency spikes as seen in SERVER-52879.','line_number':330,'multiline':False]
['text':' Increment the epoch as we are now closing all sessions with this epoch.','line_number':337,'multiline':False]
['text':' We should never be able to get here after _shuttingDown is set, because no new','line_number':356,'multiline':False]
['text':' operations should be allowed to start.','line_number':357,'multiline':False]
['text':' Get the most recently used session so that if we discard sessions, we're','line_number':363,'multiline':False]
['text':' discarding older ones','line_number':364,'multiline':False]
['text':' Reset the idle time','line_number':367,'multiline':False]
['text':' Outside of the cache partition lock, but on release will be put back on the cache','line_number':373,'multiline':False]
['text':' We might have skipped releasing some cursors during the shutdown.','line_number':379,'multiline':False]
['text':' There is a race condition with clean shutdown, where the storage engine is ripped from','line_number':385,'multiline':False]
['text':' underneath OperationContexts, which are not "active" (i.e., do not have any locks), but','line_number':386,'multiline':False]
['text':' are just about to delete the recovery unit. See SERVER-16031 for more information. Since','line_number':387,'multiline':False]
['text':' shutting down the WT_CONNECTION will close all WT_SESSIONS, we shouldn't also try to','line_number':388,'multiline':False]
['text':' directly close this session.','line_number':389,'multiline':False]
['text':' Prevents calling _session->close() in destructor.','line_number':390,'multiline':False]
['text':' This checks that we are only caching idle sessions and not something which might hold','line_number':398,'multiline':False]
['text':' locks or otherwise prevent truncation.','line_number':399,'multiline':False]
['text':' Set the time this session got idle at.','line_number':409,'multiline':False]
['text':' check outside of lock to reduce contention','line_number':412,'multiline':False]
['text':' recheck inside the lock for correctness','line_number':414,'multiline':False]
['text':' A JournalListener can only be set once. Otherwise, accessing a copy of the _journalListener','line_number':433,'multiline':False]
['text':' pointer without a mutex would be unsafe.','line_number':434,'multiline':False]
['text':' The JournalListener may not be set immediately, so we must check under a mutex so','line_number':449,'multiline':False]
['text':' as not to access the variable while setting a JournalListener. A JournalListener','line_number':450,'multiline':False]
['text':' is only allowed to be set once, so using the pointer outside of a mutex is safe.','line_number':451,'multiline':False]
['text':' Update a persisted value with the latest write timestamp that is safe across','line_number':457,'multiline':False]
['text':' startup recovery in the repl layer. Then report that timestamp as durable to the','line_number':458,'multiline':False]
['text':' repl layer below after we have flushed in-memory data to disk.','line_number':459,'multiline':False]
['text':' Note: only does a write if primary, otherwise just fetches the timestamp.','line_number':460,'multiline':False]
['text':' namespace mongo','line_number':466,'multiline':False]
