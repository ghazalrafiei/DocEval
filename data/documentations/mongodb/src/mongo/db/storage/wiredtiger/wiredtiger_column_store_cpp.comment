['text':'*
 *    Copyright (C) 2022-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' Separate out a prefix and suffix in the default string. User configuration will override','line_number':79,'multiline':False]
['text':' values in the prefix, but not values in the suffix.','line_number':80,'multiline':False]
['text':' Ignoring wiredTigerGlobalOptions.useIndexPrefixCompression because we *always* want prefix','line_number':84,'multiline':False]
['text':' compression for column indexes.','line_number':85,'multiline':False]
['text':' WARNING: No user-specified config can appear below this line. These options are required','line_number':95,'multiline':False]
['text':' for correct behavior of the server.','line_number':96,'multiline':False]
['text':' Indexes need to store the metadata for collation to work as expected.','line_number':98,'multiline':False]
['text':' Don't use the session from the recovery unit: create should not be used in a transaction','line_number':115,'multiline':False]
['text':'NUL byte','line_number':137,'multiline':True]
['text':' If we end up reserving more values, as we've done with kRowIdPath, this check should be','line_number':139,'multiline':False]
['text':' changed to include the newly reserved values.','line_number':140,'multiline':False]
['text':' allow overwrite ','line_number':155,'multiline':True]
['text':' Lock invariant relaxed because index builds apply side writes while holding collection MODE_S','line_number':184,'multiline':False]
['text':' (global MODE_IS).','line_number':185,'multiline':False]
['text':' Lock invariant relaxed because index builds apply side writes while holding collection MODE_S','line_number':208,'multiline':False]
['text':' (global MODE_IS).','line_number':209,'multiline':False]
['text':' Lock invariant relaxed because index builds apply side writes while holding collection MODE_S','line_number':231,'multiline':False]
['text':' (global MODE_IS).','line_number':232,'multiline':False]
['text':' forward ','line_number':287,'multiline':True]
['text':'*
     * Seeks the cursor to the column key specified by the given 'path' and 'rid'. If the key is not
     * found, then the next key in the same path will be returned; or the first entry in the
     * following column; or boost::none if there are no further entries.
     ','line_number':302,'multiline':True]
['text':' Initialize the _buffer with the column's key (path/rid).','line_number':308,'multiline':False]
['text':'exactOnly','line_number':316,'multiline':True]
['text':' Ensure an active session exists, so any restored cursors will bind to it','line_number':343,'multiline':False]
['text':' Check if the exact search key stashed in _buffer was not found.','line_number':347,'multiline':False]
['text':'*
     *  Returns the checkpoint ID for checkpoint cursors, otherwise 0.
     ','line_number':362,'multiline':True]
['text':'*
     * Helper function to iterate the cursor to the given 'searchKey', or the closest key
     * immediately after the 'searchKey' if 'searchKey' does not exist and 'exactOnly' is false.
     * Returns true if an exact match is found.
     ','line_number':374,'multiline':True]
['text':' Ensure an active transaction is open.','line_number':380,'multiline':False]
['text':' Make sure we land on a key matching the search key or a key immediately after.','line_number':405,'multiline':False]
['text':'','line_number':406,'multiline':False]
['text':' If this operation is ignoring prepared updates and WT::search_near() lands on a key that','line_number':407,'multiline':False]
['text':' compares lower than the search key, calling next() is not guaranteed to return a key that','line_number':408,'multiline':False]
['text':' compares greater than the search key. This is because ignoring prepare conflicts does not','line_number':409,'multiline':False]
['text':' provide snapshot isolation and the call to next() may land on a newly-committed prepared','line_number':410,'multiline':False]
['text':' entry. We must advance our cursor until we find a key that compares greater than the','line_number':411,'multiline':False]
['text':' search key. See SERVER-56839.','line_number':412,'multiline':False]
['text':'','line_number':413,'multiline':False]
['text':' Note: the problem described above is currently not possible for column indexes because','line_number':414,'multiline':False]
['text':' (a) There is a special path in the column index present with the "path" value 0xFF, which','line_number':415,'multiline':False]
['text':' is greater than all other paths and (b) there is incidental behavior in the','line_number':416,'multiline':False]
['text':' WT::search_near() function. To elaborate on (b), if WT::search_near() doesn't find an','line_number':417,'multiline':False]
['text':' exact match, it will 'prefer' to return the following key/value, which is guaranteed to','line_number':418,'multiline':False]
['text':' exist because of (a). However, the contract of search_near is that it may return either','line_number':419,'multiline':False]
['text':' the previous or the next value.','line_number':420,'multiline':False]
['text':'','line_number':421,'multiline':False]
['text':' (a) is unlikely to change, but (b) is incidental behavior. To avoid relying on this, we','line_number':422,'multiline':False]
['text':' iterate the cursor until we find a value that is greater than or equal to the search key.','line_number':423,'multiline':False]
['text':' If we are enforcing prepare conflicts, calling next() must always give us a key','line_number':449,'multiline':False]
['text':' that compares greater than than our search key. An exact match is also possible','line_number':450,'multiline':False]
['text':' in the case of _id indexes, because the recordid is not a part of the key.','line_number':451,'multiline':False]
['text':' If we end up reserving more values, like kRowIdPath, this check should be changed to','line_number':473,'multiline':False]
['text':' include the newly reserved values.','line_number':474,'multiline':False]
['text':' kRowIdPath ','line_number':475,'multiline':True]
['text':' Used by next to decide to return current position rather than moving. Should be reset to','line_number':493,'multiline':False]
['text':' false by any operation that moves the cursor, other than subsequent save/restore pairs.','line_number':494,'multiline':False]
['text':' not owned','line_number':497,'multiline':False]
['text':' namespace mongo','line_number':572,'multiline':False]
