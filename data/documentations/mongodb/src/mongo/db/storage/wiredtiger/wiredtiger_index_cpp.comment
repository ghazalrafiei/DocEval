['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 * Add a data corruption entry to the health log.
 ','line_number':77,'multiline':True]
['text':'*
 * Returns the logv2::LogOptions controlling the behaviour after logging a data corruption error.
 * When the TestingProctor is enabled we will fatally assert. When the testing proctor is disabled
 * or when 'forceUassert' is specified (for instance because a failpoint is enabled), we should log
 * and throw DataCorruptionDetected.
 ','line_number':105,'multiline':True]
['text':' namespace','line_number':119,'multiline':False]
['text':' static','line_number':132,'multiline':False]
['text':' Return error on first unrecognized field.','line_number':143,'multiline':False]
['text':' static','line_number':152,'multiline':False]
['text':' Index metadata','line_number':168,'multiline':False]
['text':' static','line_number':175,'multiline':False]
['text':' Separate out a prefix and suffix in the default string. User configuration will override','line_number':185,'multiline':False]
['text':' values in the prefix, but not values in the suffix.  Page sizes are chosen so that index','line_number':186,'multiline':False]
['text':' keys (up to 1024 bytes) will not overflow.','line_number':187,'multiline':False]
['text':' Validate configuration object.','line_number':199,'multiline':False]
['text':' Raise an error about unrecognized fields that may be introduced in newer versions of','line_number':200,'multiline':False]
['text':' this storage engine.','line_number':201,'multiline':False]
['text':' Ensure that 'configString' field is a string. Raise an error if this is not the case.','line_number':202,'multiline':False]
['text':' WARNING: No user-specified config can appear below this line. These options are required','line_number':216,'multiline':False]
['text':' for correct behavior of the server.','line_number':217,'multiline':False]
['text':' Indexes need to store the metadata for collation to work as expected.','line_number':219,'multiline':False]
['text':' Index metadata','line_number':223,'multiline':False]
['text':' Don't use the session from the recovery unit: create should not be used in a transaction','line_number':238,'multiline':False]
['text':' TODO SERVER-73111: Remove CollectionCatalog usage.','line_number':273,'multiline':False]
['text':' In testing this may be boost::none.','line_number':276,'multiline':False]
['text':' namespace','line_number':296,'multiline':False]
['text':' Lock invariant relaxed because index builds apply side writes while holding collection MODE_S','line_number':302,'multiline':False]
['text':' (global MODE_IS).','line_number':303,'multiline':False]
['text':' Lock invariant relaxed because index builds apply side writes while holding collection MODE_S','line_number':319,'multiline':False]
['text':' (global MODE_IS).','line_number':320,'multiline':False]
['text':' forward ','line_number':370,'multiline':True]
['text':' inclusive ','line_number':371,'multiline':True]
['text':' Printing the index entry metadata requires a new session. We cannot open other cursors when','line_number':409,'multiline':False]
['text':' there are open history store cursors in the session. We also need to make sure that the','line_number':410,'multiline':False]
['text':' existing session has not written data to avoid potential deadlocks.','line_number':411,'multiline':False]
['text':' Per the version cursor API:','line_number':415,'multiline':False]
['text':' - A version cursor can only be called with the read timestamp as the oldest timestamp.','line_number':416,'multiline':False]
['text':' - If there is no oldest timestamp, the version cursor can only be called with a read','line_number':417,'multiline':False]
['text':'   timestamp of 1.','line_number':418,'multiline':False]
['text':' - If there is an oldest timestamp, reading at timestamp 1 will get rounded up.','line_number':419,'multiline':False]
['text':' Open a version cursor. This is a debug cursor that enables iteration through the history of','line_number':423,'multiline':False]
['text':' values for a given index entry.','line_number':424,'multiline':False]
['text':' No-op','line_number':495,'multiline':False]
['text':' An index entry key is KeyString of the prefix key + RecordId. To prevent duplicate prefix','line_number':512,'multiline':False]
['text':' key, search a record matching the prefix key.','line_number':513,'multiline':False]
['text':' The prefix key is in the index without a RecordId appended to the key, which means that','line_number':525,'multiline':False]
['text':' the RecordId is instead stored in the value.','line_number':526,'multiline':False]
['text':' Obtain the key from the record returned by search near.','line_number':535,'multiline':False]
['text':' If the prefix does not match, look at the logically adjacent key.','line_number':541,'multiline':False]
['text':' We got the smaller key adjacent to prefix key, check the next key too.','line_number':543,'multiline':False]
['text':' We got the larger key adjacent to prefix key, check the previous key too.','line_number':546,'multiline':False]
['text':' Given a KeyString KS with RecordId RID appended to the end, set the:','line_number':565,'multiline':False]
['text':' 1. Lower bound (inclusive) to be KS without RID','line_number':566,'multiline':False]
['text':' 2. Upper bound (inclusive) to be','line_number':567,'multiline':False]
['text':'   a. KS with RecordId::maxLong() for KeyFormat::Long','line_number':568,'multiline':False]
['text':'   b. KS with RecordId(FF00) for KeyFormat::String','line_number':569,'multiline':False]
['text':'','line_number':570,'multiline':False]
['text':' For example, KS = "key" and RID = "ABC123". The lower bound is "key" and the upper bound is','line_number':571,'multiline':False]
['text':' "keyFF00".','line_number':572,'multiline':False]
['text':' The cursor is bounded to a prefix. Doing a next on the un-positioned cursor will position on','line_number':579,'multiline':False]
['text':' the first key that is equal to or more than the prefix.','line_number':580,'multiline':False]
['text':' The prefix key is in the index without a RecordId appended to the key, which means that','line_number':595,'multiline':False]
['text':' the RecordId is instead stored in the value.','line_number':596,'multiline':False]
['text':' A prefix key is KeyString of index key. It is the component of the index entry that','line_number':624,'multiline':False]
['text':' should be unique.','line_number':625,'multiline':False]
['text':' First phase inserts the prefix key to prohibit concurrent insertions of same key','line_number':631,'multiline':False]
['text':' An entry with prefix key already exists. This can happen only during rolling upgrade when','line_number':636,'multiline':False]
['text':' both timestamp unsafe and timestamp safe index format keys could be present.','line_number':637,'multiline':False]
['text':' Remove the prefix key, our entry will continue to conflict with any concurrent','line_number':648,'multiline':False]
['text':' transactions, but will not conflict with any transaction that begins after this','line_number':649,'multiline':False]
['text':' operation commits.','line_number':650,'multiline':False]
['text':' The second phase looks for the key to avoid insertion of a duplicate key. The range bounded','line_number':657,'multiline':False]
['text':' cursor API restricts the key range we search within. This makes the search significantly','line_number':658,'multiline':False]
['text':' faster.','line_number':659,'multiline':False]
['text':' Only fixes the index data format when it could be from an edge case when converting the','line_number':694,'multiline':False]
['text':' uniqueness of the index. Specifically:','line_number':695,'multiline':False]
['text':' * The index is a secondary unique index, but the data format version is 6 (v1) or 8 (v2).','line_number':696,'multiline':False]
['text':' * The index is a non-unique index, but the data format version is 13 (v1) or 14 (v2).','line_number':697,'multiline':False]
['text':' isForceUpdateMetadata ','line_number':704,'multiline':True]
['text':' The updated data format is guaranteed to be within the supported version range.','line_number':706,'multiline':False]
['text':'
     * Index data format 6, 11, and 13 correspond to KeyString version V0 and data format 8, 12, and
     * 14 correspond to KeyString version V1.
     ','line_number':758,'multiline':True]
['text':'*
 * Base class for WiredTigerIndex bulk builders.
 *
 * Manages the bulk cursor used by bulk builders.
 ','line_number':779,'multiline':True]
['text':'*
 * Bulk builds a non-unique index.
 ','line_number':802,'multiline':True]
['text':' Can't use WiredTigerCursor since we aren't using the cache.','line_number':813,'multiline':False]
['text':'*
 * Bulk builds a unique index.
 *
 * In order to support unique indexes in dupsAllowed mode this class only does an actual insert
 * after it sees a key after the one we are trying to insert. This allows us to gather up all
 * duplicate ids and insert them all together. This is necessary since bulk cursors can only
 * append data.
 ','line_number':837,'multiline':True]
['text':' Do a duplicate check, but only if dups aren't allowed.','line_number':858,'multiline':False]
['text':' Duplicate found!','line_number':864,'multiline':False]
['text':'
                 * _previousKeyString.isEmpty() is only true on the first call to addKey().
                 * newKeyString must be greater than previous key.
                 ','line_number':872,'multiline':True]
['text':' Can't use WiredTigerCursor since we aren't using the cache.','line_number':880,'multiline':False]
['text':' Don't copy the key again if dups are allowed.','line_number':897,'multiline':False]
['text':' _previousKeyString.isEmpty() is only true on the first call to addKey().','line_number':921,'multiline':False]
['text':' When there is only one record, we can omit AllZeros TypeBits. Otherwise they need','line_number':930,'multiline':False]
['text':' to be included.','line_number':931,'multiline':False]
['text':' Duplicates are not actually allowed on the _id index, however we accept the parameter','line_number':961,'multiline':False]
['text':' regardless.','line_number':962,'multiline':False]
['text':'*
 * Implements the basic WT_CURSOR functionality used by both unique and standard indexes.
 ','line_number':967,'multiline':True]
['text':' This means scan to end of index.','line_number':1005,'multiline':False]
['text':' NOTE: this uses the opposite rules as a normal seek because a forward scan should','line_number':1010,'multiline':False]
['text':' end after the key if inclusive and before if exclusive.','line_number':1011,'multiline':False]
['text':' Our saved position is wherever we were when we last called updatePosition().','line_number':1053,'multiline':False]
['text':' Any partially completed repositions should not effect our saved position.','line_number':1054,'multiline':False]
['text':' Ensure an active session exists, so any restored cursors will bind to it','line_number':1067,'multiline':False]
['text':' When using search_near, WiredTiger will traverse over deleted keys until it finds its','line_number':1071,'multiline':False]
['text':' first non-deleted key. This can make it costly to search for a key that we just','line_number':1072,'multiline':False]
['text':' deleted if there are many deleted values (e.g. TTL deletes). We never want to see a','line_number':1073,'multiline':False]
['text':' key that comes logically before the last key we returned. Thus, we improve','line_number':1074,'multiline':False]
['text':' performance by setting a bound to indicate to WiredTiger to only consider returning','line_number':1075,'multiline':False]
['text':' keys that are relevant to us. The cursor bound is by default inclusive of the key','line_number':1076,'multiline':False]
['text':' being searched for so search_near is able to return that key if it exists and avoid','line_number':1077,'multiline':False]
['text':' looking logically before the last key we returned.','line_number':1078,'multiline':False]
['text':' Standard (non-unique) indices *do* include the record id in their KeyStrings. This','line_number':1088,'multiline':False]
['text':' means that restoring to the same key with a new record id will return false, and we','line_number':1089,'multiline':False]
['text':' will *not* skip the key with the new record id.','line_number':1090,'multiline':False]
['text':'','line_number':1091,'multiline':False]
['text':' Unique indexes can have both kinds of KeyStrings, ie with or without the record id.','line_number':1092,'multiline':False]
['text':' Restore for unique indexes gets handled separately in it's own implementation.','line_number':1093,'multiline':False]
['text':'bounded','line_number':1094,'multiline':True]
['text':'*
     *  Returns the checkpoint ID for checkpoint cursors, otherwise 0.
     ','line_number':1116,'multiline':True]
['text':' Called after _key has been filled in, ie a new key to be processed has been fetched.','line_number':1124,'multiline':False]
['text':' Must not throw WriteConflictException, throwing a WriteConflictException will retry the','line_number':1125,'multiline':False]
['text':' operation effectively skipping over this key.','line_number':1126,'multiline':False]
['text':' We set up _endPosition to be in between the last in-range value and the first','line_number':1174,'multiline':False]
['text':' out-of-range value. In particular, it is constructed to never equal any legal index','line_number':1175,'multiline':False]
['text':' key.','line_number':1176,'multiline':False]
['text':' We may have landed after the end point.','line_number':1180,'multiline':False]
['text':' We may have landed before the end point.','line_number':1183,'multiline':False]
['text':' Seeks to query. Returns true on exact match.','line_number':1189,'multiline':False]
['text':' Ensure an active transaction is open.','line_number':1191,'multiline':False]
['text':'bounded','line_number':1198,'multiline':True]
['text':' Found it!','line_number':1230,'multiline':False]
['text':' Make sure we land on a matching key (after/before for forward/reverse).','line_number':1236,'multiline':False]
['text':' If this operation is ignoring prepared updates and search_near() lands on a key that','line_number':1237,'multiline':False]
['text':' compares lower than the search key (for a forward cursor), calling next() is not','line_number':1238,'multiline':False]
['text':' guaranteed to return a key that compares greater than the search key. This is because','line_number':1239,'multiline':False]
['text':' ignoring prepare conflicts does not provide snapshot isolation and the call to next()','line_number':1240,'multiline':False]
['text':' may land on a newly-committed prepared entry. We must advance our cursor until we','line_number':1241,'multiline':False]
['text':' find a key that compares greater than the search key. The same principle applies to','line_number':1242,'multiline':False]
['text':' reverse cursors. See SERVER-56839.','line_number':1243,'multiline':False]
['text':' If we are enforcing prepare conflicts, calling next() or prev() must always','line_number':1264,'multiline':False]
['text':' give us a key that compares, respectively, greater than or less than our','line_number':1265,'multiline':False]
['text':' search key. An exact match is also possible in the case of _id indexes,','line_number':1266,'multiline':False]
['text':' because the recordid is not a part of the key.','line_number':1267,'multiline':False]
['text':'*
     * This must be called after moving the cursor to update our cached position. It should not
     * be called after a restore that did not restore to original state since that does not
     * logically move the cursor until the following call to next().
     ','line_number':1275,'multiline':True]
['text':' Store (a copy of) the new item data as the current key for this cursor.','line_number':1284,'multiline':False]
['text':' In debug mode, let's ensure that our index keys are actually in order. We've had','line_number':1297,'multiline':False]
['text':' issues in the past with our underlying cursors (WT-2307), but also with cursor','line_number':1298,'multiline':False]
['text':' mis-use (SERVER-55658). This check can help us catch such things earlier rather than','line_number':1299,'multiline':False]
['text':' later.','line_number':1300,'multiline':False]
['text':' Advance on a cursor at the end is a no-op.','line_number':1340,'multiline':False]
['text':' Ensure an active transaction is open.','line_number':1344,'multiline':False]
['text':' In the normal case, _id will be updated in updatePosition. Making this reset','line_number':1354,'multiline':False]
['text':' unconditional affects performance noticeably.','line_number':1355,'multiline':False]
['text':' Most keys will have a RecordId appended to the end, with the exception of the _id index','line_number':1377,'multiline':False]
['text':' and timestamp unsafe unique indexes. The contract of this function is to always return a','line_number':1378,'multiline':False]
['text':' KeyString with a RecordId, so append one if it does not exists already.','line_number':1379,'multiline':False]
['text':' Create a copy of _key with a RecordId. Because _key is used during cursor restore(),','line_number':1384,'multiline':False]
['text':' appending the RecordId would cause the cursor to be repositioned incorrectly.','line_number':1385,'multiline':False]
['text':' TODO SERVER-73111: Remove CollectionCatalog usage.','line_number':1404,'multiline':False]
['text':' These are where this cursor instance is. They are not changed in the face of a failing','line_number':1422,'multiline':False]
['text':' next().','line_number':1423,'multiline':False]
['text':' This differs from _eof in that it always reflects the result of the most recent call to','line_number':1430,'multiline':False]
['text':' reposition _cursor.','line_number':1431,'multiline':False]
['text':' Used by next to decide to return current position rather than moving. Should be reset to','line_number':1434,'multiline':False]
['text':' false by any operation that moves the cursor, other than subsequent save/restore pairs.','line_number':1435,'multiline':False]
['text':' namespace','line_number':1440,'multiline':False]
['text':' The Standard Cursor doesn't need anything more than the base has.','line_number':1442,'multiline':False]
['text':' Called after _key has been filled in, ie a new key to be processed has been fetched.','line_number':1450,'multiline':False]
['text':' Must not throw WriteConflictException, throwing a WriteConflictException will retry the','line_number':1451,'multiline':False]
['text':' operation effectively skipping over this key.','line_number':1452,'multiline':False]
['text':' After a rolling upgrade an index can have keys from both timestamp unsafe (old) and','line_number':1457,'multiline':False]
['text':' timestamp safe (new) unique indexes. Detect correct index key format by checking key's','line_number':1458,'multiline':False]
['text':' size. Old format keys just had the index key while new format key has index key + Record','line_number':1459,'multiline':False]
['text':' id. _id indexes remain at the old format. When KeyString contains just the key, the','line_number':1460,'multiline':False]
['text':' RecordId is in value.','line_number':1461,'multiline':False]
['text':' The RecordId is in the key at the end. This implementation is provided by the','line_number':1468,'multiline':False]
['text':' base class, let us just invoke that functionality here.','line_number':1469,'multiline':False]
['text':' Lets begin by calling the base implementation','line_number':1475,'multiline':False]
['text':' We did not get an exact match for the saved key. We need to determine if we','line_number':1479,'multiline':False]
['text':' skipped a record while trying to position the cursor.','line_number':1480,'multiline':False]
['text':' After a rolling upgrade an index can have keys from both timestamp unsafe (old)','line_number':1481,'multiline':False]
['text':' and timestamp safe (new) unique indexes. An older styled index entry key is','line_number':1482,'multiline':False]
['text':' KeyString of the prefix key only, whereas a newer styled index entry key is','line_number':1483,'multiline':False]
['text':' KeyString of the prefix key + RecordId.','line_number':1484,'multiline':False]
['text':' In either case we compare the prefix key portion of the saved index entry','line_number':1485,'multiline':False]
['text':' key against the current key that we are positioned on, if there is a match we','line_number':1486,'multiline':False]
['text':' know we are positioned correctly and have not skipped a record.','line_number':1487,'multiline':False]
['text':' Get the size of the prefix key','line_number':1492,'multiline':False]
['text':' This check is only to avoid returning the same key again after a restore. Keys','line_number':1496,'multiline':False]
['text':' shorter than _key cannot have "prefix key" same as _key. Therefore we care only about','line_number':1497,'multiline':False]
['text':' the keys with size greater than or equal to that of the _key.','line_number':1498,'multiline':False]
['text':' Called after _key has been filled in, ie a new key to be processed has been fetched.','line_number':1512,'multiline':False]
['text':' Must not throw WriteConflictException, throwing a WriteConflictException will retry the','line_number':1513,'multiline':False]
['text':' operation effectively skipping over this key.','line_number':1514,'multiline':False]
['text':' Old-format unique index keys always use the Long format.','line_number':1516,'multiline':False]
['text':' We perform different comparisons depending on whether this is an old-format or new-format','line_number':1546,'multiline':False]
['text':' key. New-format keys have record IDs at the end.','line_number':1547,'multiline':False]
['text':' Called after _key has been filled in, i.e. a new key to be processed has been fetched.','line_number':1568,'multiline':False]
['text':' Must not throw WriteConflictException, throwing a WriteConflictException will retry the','line_number':1569,'multiline':False]
['text':' operation effectively skipping over this key.','line_number':1570,'multiline':False]
['text':' _id index keys always use the Long format.','line_number':1572,'multiline':False]
['text':'}  // namespace','line_number':1610,'multiline':False]
['text':' _id indexes must use WiredTigerIdIndex','line_number':1621,'multiline':False]
['text':' All unique indexes should be in the timestamp-safe format version as of version 4.2.','line_number':1623,'multiline':False]
['text':' This procedure to determine duplicates is exclusive for timestamp safe unique indexes.','line_number':1648,'multiline':False]
['text':' Check if a prefix key already exists in the index. When keyExists() returns true, the cursor','line_number':1649,'multiline':False]
['text':' will be positioned on the first occurrence of the 'prefixKey'.','line_number':1650,'multiline':False]
['text':' If the next key also matches, this is a duplicate.','line_number':1655,'multiline':False]
['text':' Make sure that next call did not fail due to any other error but not found. In case of','line_number':1665,'multiline':False]
['text':' another error, we are not good to move forward.','line_number':1666,'multiline':False]
['text':' Now create the table key/value, the actual data record.','line_number':1682,'multiline':False]
['text':' Pre-checks before inserting on a primary.','line_number':1782,'multiline':False]
['text':' Now create the table key/value, the actual data record.','line_number':1792,'multiline':False]
['text':' Account for the actual key insertion, but do not attempt account for the complexity of any','line_number':1803,'multiline':False]
['text':' previous duplicate key detection, which may perform writes.','line_number':1804,'multiline':False]
['text':' It is possible that this key is already present during a concurrent background index build.','line_number':1808,'multiline':False]
['text':' On the _id index, the RecordId is stored in the value of the index entry. If the dupsAllowed','line_number':1836,'multiline':False]
['text':' flag is not set, we blindly delete using only the key without checking the RecordId.','line_number':1837,'multiline':False]
['text':' Duplicates are never actually allowed on _id indexes, however the 'dupsAllowed' convention','line_number':1850,'multiline':False]
['text':' requires that we check the value of the RecordId in the keyString instead of blindly deleting','line_number':1851,'multiline':False]
['text':' based on just the first part of the key.','line_number':1852,'multiline':False]
['text':' The RecordId matches, so remove the entry.','line_number':1891,'multiline':False]
['text':' Note that the dupsAllowed flag asks us to check that the RecordId in the KeyString matches','line_number':1912,'multiline':False]
['text':' before deleting any keys. Unique indexes store RecordIds in the keyString, so we get this','line_number':1913,'multiline':False]
['text':' behavior by default.','line_number':1914,'multiline':False]
['text':' Account for the first removal attempt, but do not attempt to account for the complexity of','line_number':1919,'multiline':False]
['text':' any subsequent removals and insertions when the index's keys are not fully-upgraded.','line_number':1920,'multiline':False]
['text':' This is a unique index on a clustered collection. These indexes will only have keys','line_number':1930,'multiline':False]
['text':' in the timestamp safe format where the RecordId is appended at the end of the key.','line_number':1931,'multiline':False]
['text':' WT_NOTFOUND is possible if index key is in old (v4.0) format. Retry removal of key using old','line_number':1935,'multiline':False]
['text':' format.','line_number':1936,'multiline':False]
['text':' The old unique index format had a key-value of indexKey-RecordId. This means that the','line_number':1944,'multiline':False]
['text':' RecordId in an index entry might not match the indexKey+RecordId keyString passed into this','line_number':1945,'multiline':False]
['text':' function: an index on a field where multiple collection documents have the same field value','line_number':1946,'multiline':False]
['text':' but only one passes the partial index filter.','line_number':1947,'multiline':False]
['text':'','line_number':1948,'multiline':False]
['text':' The dupsAllowed flag is no longer relevant for the old unique index format. No new index','line_number':1949,'multiline':False]
['text':' entries are written in the old format, let alone during temporary phases of the server when','line_number':1950,'multiline':False]
['text':' duplicates are allowed.','line_number':1951,'multiline':False]
['text':' Check that the record id matches. We may be called to unindex records that are not','line_number':1974,'multiline':False]
['text':' present in the index due to the partial filter expression.','line_number':1975,'multiline':False]
['text':' Ensure the index entry value is not a list of RecordIds, which should only be possible','line_number':1983,'multiline':False]
['text':' temporarily in v4.0 when dupsAllowed is true, not ever across upgrades or in upgraded','line_number':1984,'multiline':False]
['text':' versions.','line_number':1985,'multiline':False]
['text':' ------------------------------','line_number':2007,'multiline':False]
['text':' We aren't unique so dups better be allowed.','line_number':2025,'multiline':False]
['text':' Pre-checks before inserting on a primary.','line_number':2037,'multiline':False]
['text':' If the record was already in the index, we return OK. This can happen, for example, when','line_number':2061,'multiline':False]
['text':' building a background index while documents are being written and reindexed.','line_number':2062,'multiline':False]
['text':' namespace mongo','line_number':2091,'multiline':False]
