['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' IWYU pragma: keep','line_number':42,'multiline':False]
['text':' .canonicalName','line_number':85,'multiline':False]
['text':' .path','line_number':86,'multiline':False]
['text':' .cs','line_number':87,'multiline':False]
['text':' .extraOpenOptions','line_number':88,'multiline':False]
['text':' .cacheSizeMB','line_number':89,'multiline':False]
['text':' .maxCacheOverflowFileSizeMB','line_number':90,'multiline':False]
['text':' .ephemeral','line_number':91,'multiline':False]
['text':' .repair','line_number':92,'multiline':False]
['text':' Use a replica set so that writes to replicated collections are not journaled and thus','line_number':94,'multiline':False]
['text':' retain their timestamps.','line_number':95,'multiline':False]
['text':' Storage engine operations require at least Global IS.','line_number':217,'multiline':False]
['text':' Hold the global locks throughout the test to avoid having the global lock destructor','line_number':228,'multiline':False]
['text':' prematurely abandon snapshots.','line_number':229,'multiline':False]
['text':' Read without a timestamp. The write should be visible.','line_number':250,'multiline':False]
['text':' Read with kNoOverlap. The write should be visible.','line_number':256,'multiline':False]
['text':' Start, but do not commit a transaction with opCtx2. This sets a timestamp at ts2, which','line_number':263,'multiline':False]
['text':' creates a hole. kNoOverlap, which is a function of all_durable, will only be able to read','line_number':264,'multiline':False]
['text':' at the time immediately before.','line_number':265,'multiline':False]
['text':' While holding open a transaction with opCtx2, perform an insert at ts3 with opCtx1. This','line_number':273,'multiline':False]
['text':' creates a "hole".','line_number':274,'multiline':False]
['text':' Read without a timestamp, and we should see the first and third records.','line_number':284,'multiline':False]
['text':' Now read at kNoOverlap. Since the transaction at ts2 has not committed, all_durable is','line_number':291,'multiline':False]
['text':' held back to ts1. LastApplied has advanced to ts3, but because kNoOverlap is the minimum,','line_number':292,'multiline':False]
['text':' we should only see one record.','line_number':293,'multiline':False]
['text':' Now that the hole has been closed, kNoOverlap should see all 3 records.','line_number':303,'multiline':False]
['text':' Prepare but don't commit a transaction','line_number':313,'multiline':False]
['text':' The transaction read default enforces prepare conflicts and triggers a WT_PREPARE_CONFLICT.','line_number':325,'multiline':False]
['text':' Prepare but don't commit a transaction','line_number':338,'multiline':False]
['text':' A transaction that chooses to ignore prepare conflicts does not see the record instead of','line_number':350,'multiline':False]
['text':' returning a prepare conflict.','line_number':351,'multiline':False]
['text':' Prepare but don't commit a transaction','line_number':364,'multiline':False]
['text':' A transaction that chooses to ignore prepare conflicts with kIgnoreConflictsAllowWrites does','line_number':376,'multiline':False]
['text':' not see the record','line_number':377,'multiline':False]
['text':' The prepared write is not visible.','line_number':381,'multiline':False]
['text':' The write is allowed.','line_number':390,'multiline':False]
['text':' Prepare but don't commit a transaction','line_number':400,'multiline':False]
['text':' Another transaction with write triggers WT_ROLLBACK','line_number':412,'multiline':False]
['text':' Hold the global lock throughout the test to avoid having the global lock destructor','line_number':707,'multiline':False]
['text':' prematurely abandon snapshots.','line_number':708,'multiline':False]
['text':' Insert a record.','line_number':719,'multiline':False]
['text':' Force a checkpoint.','line_number':729,'multiline':False]
['text':'callerHoldsReadLock','line_number':730,'multiline':True]
['text':' Test 1: Open a checkpoint cursor and ensure it has the first record.','line_number':732,'multiline':False]
['text':' Insert a new record.','line_number':737,'multiline':False]
['text':' Test 2: New record does not appear in original checkpoint cursor.','line_number':748,'multiline':False]
['text':' Test 3: New record does not appear in new checkpoint cursor since no new checkpoint was','line_number':752,'multiline':False]
['text':' created.','line_number':753,'multiline':False]
['text':' Force a checkpoint.','line_number':758,'multiline':False]
['text':'callerHoldsReadLock','line_number':759,'multiline':True]
['text':' Test 4: Old and new record should appear in new checkpoint cursor. Only old record','line_number':761,'multiline':False]
['text':' should appear in the original checkpoint cursor','line_number':762,'multiline':False]
['text':' Hold the global lock throughout the test to avoid having the global lock destructor','line_number':775,'multiline':False]
['text':' prematurely abandon snapshots.','line_number':776,'multiline':False]
['text':' Force a checkpoint.','line_number':786,'multiline':False]
['text':'callerHoldsReadLock','line_number':787,'multiline':True]
['text':' Open a checkpoint cursor and check its id.','line_number':789,'multiline':False]
['text':' Insert a record and force a checkpoint.','line_number':795,'multiline':False]
['text':'callerHoldsReadLock','line_number':805,'multiline':True]
['text':' Open another checkpoint cursor and check its new id.','line_number':807,'multiline':False]
['text':' Perform an non timestamped write.','line_number':847,'multiline':False]
['text':' Perform a write at ts1.','line_number':855,'multiline':False]
['text':' Setting the timestamp again to the same value should not fail.','line_number':862,'multiline':False]
['text':' Committing the unit of work should reset the internal state for the multi timestamp','line_number':865,'multiline':False]
['text':' constraint checks.','line_number':866,'multiline':False]
['text':' Perform a write at ts2.','line_number':870,'multiline':False]
['text':' Create a cursor. We will check that once positioned, the cursor is reset by a call to','line_number':899,'multiline':False]
['text':' abandonSnapshot() on the associated RecoveryUnit.','line_number':900,'multiline':False]
['text':' The WT transaction should have been aborted and the cursor reset.','line_number':908,'multiline':False]
['text':' Advancing to the "next" record now that the cursor has been reset should give us the first','line_number':910,'multiline':False]
['text':' record again.','line_number':911,'multiline':False]
['text':' A snapshot is closed, reconstructing our decoration.','line_number':944,'multiline':False]
['text':'readOnly=','line_number':949,'multiline':True]
['text':' A snapshot is closed, reconstructing our decoration.','line_number':960,'multiline':False]
['text':' A snapshot is already open from when the RU was constructed.','line_number':965,'multiline':False]
['text':'readOnly=','line_number':970,'multiline':True]
['text':' A snapshot is closed, reconstructing our decoration.','line_number':975,'multiline':False]
['text':' Perform an non timestamped write.','line_number':989,'multiline':False]
['text':' Perform a write at ts1.','line_number':997,'multiline':False]
['text':' Setting the timestamp again to a different value should detect that we're trying to set','line_number':1004,'multiline':False]
['text':' multiple timestamps with the first write being non timestamped.','line_number':1005,'multiline':False]
['text':' It's expected to get a WCE the first time we try this, due to the multi-timestamp','line_number':1013,'multiline':False]
['text':' constraint. We'll try again and it will fassert and print out extra debug info.','line_number':1014,'multiline':False]
['text':' Storage engine operations require at least Global IS.','line_number':1046,'multiline':False]
['text':' namespace','line_number':1052,'multiline':False]
['text':' namespace mongo','line_number':1053,'multiline':False]
