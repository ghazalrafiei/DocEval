['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' MongoDB 4.4+ will not open on datafiles left behind by 4.2.5 and earlier. MongoDB 4.4','line_number':98,'multiline':False]
['text':' shutting down in FCV 4.2 will leave data files that 4.2.6+ will understand','line_number':99,'multiline':False]
['text':' (IS_44_FCV_42). MongoDB 4.2.x always writes out IS_42.','line_number':100,'multiline':False]
['text':' 'wtBackupCursorMutex' provides concurrency control between beginNonBlockingBackup(),','line_number':118,'multiline':False]
['text':' endNonBlockingBackup(), and getNextBatch() because we stream the output of the backup cursor.','line_number':119,'multiline':False]
['text':' 'wtBackupDupCursorMutex' provides concurrency control between getNextBatch() and','line_number':122,'multiline':False]
['text':' extendBackupCursor() because WiredTiger only allows one duplicate cursor to be open at a','line_number':123,'multiline':False]
['text':' time. extendBackupCursor() blocks on condition variable 'wtBackupDupCursorCV' if a duplicate','line_number':124,'multiline':False]
['text':' cursor is already open.','line_number':125,'multiline':False]
['text':' This file flags there was an ongoing backup when an unclean shutdown happened.','line_number':129,'multiline':False]
['text':'*
     * WiredTiger supports checkpoints when it isn't running in memory.
     ','line_number':156,'multiline':True]
['text':' Force a WT checkpoint, this will not update internal timestamps.','line_number':165,'multiline':False]
['text':'*
     * Creates a new column store for the provided ident.
     ','line_number':217,'multiline':True]
['text':'*
     * Creates a ColumnStore object representing an existing column store for the provided ident.
     ','line_number':225,'multiline':True]
['text':'*
     * Drops the specified ident for resumable index builds.
     ','line_number':244,'multiline':True]
['text':'*
     * Sets the oldest timestamp for which the storage engine must maintain snapshot history
     * through. If force is true, oldest will be set to the given input value, unmodified, even if
     * it is backwards in time from the last oldest timestamp (accomodating initial sync).
     ','line_number':309,'multiline':True]
['text':'*
     * Returns a stable timestamp value that is guaranteed to exist on recoverToStableTimestamp.
     * Replication recovery will not need to replay documents with an earlier time.
     *
     * Only returns a stable timestamp when it has advanced to >= the initial data timestamp.
     * Replication recoverable rollback is unsafe when stable < initial during repl initial sync due
     * to initial sync's cloning phase without timestamps.
     *
     * For the persisted mode of this engine, further guarantees a stable timestamp value that is at
     * or before the last checkpoint. Everything before this value is guaranteed to be persisted on
     * disk. This supports replication recovery on restart.
     ','line_number':324,'multiline':True]
['text':' wiredtiger specific','line_number':346,'multiline':False]
['text':' Calls WT_CONNECTION::reconfigure on the underlying WT_CONNECTION','line_number':347,'multiline':False]
['text':' held by this class','line_number':348,'multiline':False]
['text':'
     * The oplog manager is always accessible, but this method will start the background thread to
     * control oplog entry visibility for reads.
     *
     * On mongod, the background thread will be started when the oplog record store is created, and
     * stopped when the oplog record store is destroyed. For unit tests, the background thread may
     * be started and stopped multiple times as tests create and destroy the oplog record store.
     ','line_number':357,'multiline':True]
['text':'
     * Always returns a non-nil pointer. However, the WiredTigerOplogManager may not have been
     * initialized and its background refreshing thread may not be running.
     *
     * A caller that wants to get the oplog read timestamp, or call
     * `waitForAllEarlierOplogWritesToBeVisible`, is advised to first see if the oplog manager is
     * running with a call to `isRunning`.
     *
     * A caller that simply wants to call `triggerOplogVisibilityUpdate` may do so without concern.
     ','line_number':368,'multiline':True]
['text':'*
     * Returns the data file path associated with an ident on disk. Returns boost::none if the data
     * file can not be found. This will attempt to locate a file even if the storage engine's own
     * metadata is not aware of the ident. This is intented for database repair purposes only.
     ','line_number':388,'multiline':True]
['text':'*
     * Returns the minimum possible Timestamp value in the oplog that replication may need for
     * recovery in the event of a rollback. This value depends on the timestamp passed to
     * `setStableTimestamp` and on the set of active MongoDB transactions. Returns an error if it
     * times out querying the active transactions.
     ','line_number':395,'multiline':True]
['text':'*
     * Returns the minimum possible Timestamp value in the oplog that replication may need for
     * recovery in the event of a crash. This value gets updated every time a checkpoint is
     * completed. This value is typically a lagged version of what's needed for rollback.
     *
     * Returns boost::none when called on an ephemeral database.
     ','line_number':403,'multiline':True]
['text':'*
     * Returns oplog that may not be truncated. This method is a function of oplog needed for
     * rollback and oplog needed for crash recovery. This method considers different states the
     * storage engine can be running in, such as running in in-memory mode.
     *
     * This method returning Timestamp::min() implies no oplog should be truncated and
     * Timestamp::max() means oplog can be truncated freely based on user oplog size
     * configuration.
     ','line_number':412,'multiline':True]
['text':' TODO SERVER-81069: Remove this since it's intrinsically tied to encryption options only.','line_number':458,'multiline':False]
['text':'*
     * Flushes any WiredTigerSizeStorer updates to the storage engine if enough time has elapsed, as
     * dictated by the _sizeStorerSyncTracker.
     ','line_number':462,'multiline':True]
['text':'*
     * Opens a connection on the WiredTiger database 'path' with the configuration 'wtOpenConfig'.
     * Only returns when successful. Intializes both '_conn' and '_fileVersion'.
     *
     * If corruption is detected and _inRepairMode is 'true', attempts to salvage the WiredTiger
     * metadata.
     ','line_number':480,'multiline':True]
['text':'*
     * Recreates a WiredTiger ident from the provided URI by dropping and recreating the ident.
     * This moves aside the existing data file, if one exists, with an added ".corrupt" suffix.
     *
     * Returns DataModifiedByRepair if the rebuild was successful, and any other error on failure.
     * This will never return Status::OK().
     ','line_number':492,'multiline':True]
['text':'*
     * Uses the 'stableTimestamp', the 'minSnapshotHistoryWindowInSeconds' setting and the
     * current _oldestTimestamp to calculate what the new oldest_timestamp should be, in order to
     * maintain a window of available snapshots on the storage engine from oldest to stable
     * timestamp.
     *
     * If the returned Timestamp isNull(), oldest_timestamp should not be moved forward.
     ','line_number':505,'multiline':True]
['text':'*
     * Checks whether rollback to a timestamp can occur, enforcing a contract of use between the
     * storage engine and replication.
     *
     * It is required that setInitialDataTimestamp has been called with a valid value other than
     * kAllowUnstableCheckpointsSentinel by the time a node is fully set up -- initial sync
     * complete, replica set initialized, etc. Else, this fasserts.
     * Furthermore, rollback cannot go back farther in the past than the initial data timestamp, so
     * the stable timestamp must be greater than initial data timestamp for a valid rollback. This
     * function will return false if that is not true.
     ','line_number':515,'multiline':True]
['text':' Mutex to protect use of _oplogRecordStore by this instance of KV engine.','line_number':541,'multiline':False]
['text':' whether we are using the in-memory mode of the WT engine','line_number':556,'multiline':False]
['text':' Tracks the stable and oldest timestamps we've set on the storage engine.','line_number':572,'multiline':False]
['text':' Timestamp of data at startup. Used internally to advise checkpointing and recovery to a','line_number':576,'multiline':False]
['text':' timestamp. Provided by replication layer because WT does not persist timestamps.','line_number':577,'multiline':False]
['text':' Pins the oplog so that OplogTruncateMarkers will not truncate oplog history equal or newer to','line_number':588,'multiline':False]
['text':' this timestamp.','line_number':589,'multiline':False]
['text':' The amount of memory alloted for the WiredTiger cache.','line_number':594,'multiline':False]
['text':' Counters used for computing whether a checkpointIteration has lapsed or not.','line_number':597,'multiline':False]
['text':'','line_number':598,'multiline':False]
['text':' We use two counters because one isn't sufficient to prove correctness. With two counters we','line_number':599,'multiline':False]
['text':' first increase the first one in order to inform later operations that they will be part of','line_number':600,'multiline':False]
['text':' the next checkpoint. The second one is there to inform waiters on whether they've','line_number':601,'multiline':False]
['text':' successfully been checkpointed or not.','line_number':602,'multiline':False]
['text':'','line_number':603,'multiline':False]
['text':' This is valid because durability is a state all operations will converge to eventually.','line_number':604,'multiline':False]
['text':' namespace mongo','line_number':608,'multiline':False]
