['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 * NOT THREADSAFE
 ','line_number':55,'multiline':True]
['text':'*
     * Creates a new WT session on the specified connection.
     *
     * @param conn WT connection
     * @param epoch In which session cache cleanup epoch was this session instantiated.
     ','line_number':60,'multiline':True]
['text':'*
     * Creates a new WT session on the specified connection.
     *
     * @param conn WT connection
     * @param cache The WiredTigerSessionCache that owns this session.
     * @param epoch In which session cache cleanup epoch was this session instantiated..
     ','line_number':68,'multiline':True]
['text':'*
     * Create a new cursor.
     *
     * The config string specifies optional arguments for the cursor. For example, when
     * the config contains 'read_once=true', this is intended for operations that will be
     * sequentially scanning large amounts of data.
     ','line_number':84,'multiline':True]
['text':'*
     * Wrapper for getNewCursor() without a config string.
     ','line_number':93,'multiline':True]
['text':'*
     * Close a cursor.
     ','line_number':100,'multiline':True]
['text':'*
     * For special cursors. Guaranteed never to collide with genTableId() ids.
     ','line_number':111,'multiline':True]
['text':' For "metadata:" cursors ','line_number':115,'multiline':True]
['text':' For "metadata:create" cursors ','line_number':117,'multiline':True]
['text':' The start of non-special table ids for genTableId() ','line_number':119,'multiline':True]
['text':' Used internally by WiredTigerSessionCache','line_number':135,'multiline':False]
['text':' not owned','line_number':141,'multiline':False]
['text':' owned','line_number':142,'multiline':False]
['text':'*
 *  This cache implements a shared pool of WiredTiger sessions with the goal to amortize the
 *  cost of session creation and destruction over multiple uses.
 ','line_number':148,'multiline':True]
['text':'*
     * This deleter automatically releases WiredTigerSession objects when no longer needed.
     ','line_number':158,'multiline':True]
['text':'*
     * Specifies what data will get flushed to disk in a WiredTigerSessionCache::waitUntilDurable()
     * call.
     ','line_number':166,'multiline':True]
['text':' Flushes only the journal (oplog) to disk.','line_number':171,'multiline':False]
['text':' If journaling is disabled, checkpoints all of the data.','line_number':172,'multiline':False]
['text':' Checkpoints data up to the stable timestamp.','line_number':174,'multiline':False]
['text':' If journaling is disabled, checkpoints all of the data.','line_number':175,'multiline':False]
['text':' Checkpoints all of the data.','line_number':177,'multiline':False]
['text':'*
     * Controls whether or not WiredTigerSessionCache::waitUntilDurable() updates the
     * JournalListener.
     ','line_number':181,'multiline':True]
['text':' RAII type to block and unblock the WiredTigerSessionCache to shut down.','line_number':187,'multiline':False]
['text':'*
     * Returns a smart pointer to a previously released session for reuse, or creates a new session.
     * This method must only be called while holding the global lock to avoid races with
     * shuttingDown, but otherwise is thread safe.
     ','line_number':202,'multiline':True]
['text':'*
     * Get a count of idle sessions in the session cache.
     ','line_number':209,'multiline':True]
['text':'*
     * Closes all cached sessions whose idle expiration time has been reached.
     ','line_number':214,'multiline':True]
['text':'*
     * Free all cached sessions and ensures that previously acquired sessions will be freed on
     * release.
     ','line_number':219,'multiline':True]
['text':'*
     * Transitions the cache to shutting down mode. Any already released sessions are freed and
     * any sessions released subsequently are leaked. Must be called while holding the global
     * lock in exclusive mode to avoid races with getSession.
     ','line_number':225,'multiline':True]
['text':'*
     * True when in the process of shutting down.
     ','line_number':232,'multiline':True]
['text':'*
     * Waits until all commits that happened before this call are made durable.
     *
     * Specifying Fsync::kJournal will flush only the (oplog) journal to disk. Callers are
     * serialized by a mutex and will return early if it is discovered that another thread started
     * and completed a flush while they slept.
     *
     * Specifying Fsync::kCheckpointStableTimestamp will take a checkpoint up to and including the
     * stable timestamp.
     *
     * Specifying Fsync::kCheckpointAll, or if journaling is disabled with kJournal or
     * kCheckpointStableTimestamp, causes a checkpoint to be taken of all of the data.
     *
     * Taking a checkpoint has the benefit of persisting unjournaled writes.
     *
     * 'useListener' controls whether or not the JournalListener is updated with the last durable
     * value of the timestamp that it tracks. The JournalListener's token is fetched before writing
     * out to disk and set afterwards to update the repl layer durable timestamp. The
     * JournalListener operations can throw write interruption errors.
     *
     * Uses a temporary session. Safe to call without any locks, even during shutdown.
     ','line_number':239,'multiline':True]
['text':'*
     * Waits until a prepared unit of work has ended (either been commited or aborted). This
     * should be used when encountering WT_PREPARE_CONFLICT errors. The caller is required to retry
     * the conflicting WiredTiger API operation. A return from this function does not guarantee that
     * the conflicting transaction has ended, only that one prepared unit of work in the process has
     * signaled that it has ended.
     * Accepts an Interruptible that will throw an AssertionException when interrupted.
     *
     * This method is provided in WiredTigerSessionCache and not RecoveryUnit because all recovery
     * units share the same session cache, and we want a recovery unit on one thread to signal all
     * recovery units waiting for prepare conflicts across all other threads.
     ','line_number':263,'multiline':True]
['text':'*
     * Notifies waiters that the caller's perpared unit of work has ended (either committed or
     * aborted).
     ','line_number':278,'multiline':True]
['text':'*
     * Looks up the journal listener under a mutex along.
     * Returns JournalListener along with an optional token if requested
     * by the UseJournalListener value.
     ','line_number':306,'multiline':True]
['text':' not owned, might be NULL','line_number':314,'multiline':False]
['text':' not owned','line_number':315,'multiline':False]
['text':' not owned','line_number':316,'multiline':False]
['text':' Used as follows:','line_number':319,'multiline':False]
['text':'   The low 31 bits are a count of active calls that need to block shutdown.','line_number':320,'multiline':False]
['text':'   The high bit is a flag that is set if and only if we're shutting down.','line_number':321,'multiline':False]
['text':' Bumped when all open sessions need to be closed','line_number':329,'multiline':False]
['text':' atomic so we can check it outside of the lock','line_number':330,'multiline':False]
['text':' Counter and critical section mutex for waitUntilDurable','line_number':332,'multiline':False]
['text':' Mutex and cond var for waiting on prepare commit or abort.','line_number':336,'multiline':False]
['text':' Protects getting and setting the _journalListener below.','line_number':342,'multiline':False]
['text':' Notified when we commit to the journal.','line_number':345,'multiline':False]
['text':'','line_number':346,'multiline':False]
['text':' This variable should be accessed under the _journalListenerMutex above and saved in a local','line_number':347,'multiline':False]
['text':' variable before use. That way, we can avoid holding a mutex across calls on the object. It is','line_number':348,'multiline':False]
['text':' only allowed to be set once, in order to ensure the memory to which a copy of the pointer','line_number':349,'multiline':False]
['text':' points is always valid.','line_number':350,'multiline':False]
['text':' owned, and never explicitly closed','line_number':353,'multiline':False]
['text':' (uses connection close to clean up)','line_number':354,'multiline':False]
['text':' Tracks the time since the last _waitUntilDurableSession reset().','line_number':355,'multiline':False]
['text':'*
     * Returns a session to the cache for later reuse. If closeAll was called between getting this
     * session and releasing it, the session is directly released. This method is thread safe.
     ','line_number':358,'multiline':True]
['text':'*
 * A unique handle type for WiredTigerSession pointers obtained from a WiredTigerSessionCache.
 ','line_number':365,'multiline':True]
['text':' namespace mongo','line_number':375,'multiline':False]
