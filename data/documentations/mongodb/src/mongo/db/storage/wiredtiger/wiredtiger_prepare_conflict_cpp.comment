['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' This transaction is holding a resource in the form of an oplog slot. Committed','line_number':94,'multiline':False]
['text':' transactions that get a later oplog slot will be unable to replicate until this resource','line_number':95,'multiline':False]
['text':' is released (in the form of this transaction committing or aborting). For this case, we','line_number':96,'multiline':False]
['text':' choose to abort our transaction and retry instead of blocking. It's possible that we can','line_number':97,'multiline':False]
['text':' be blocking on a prepared update that requires replication to make progress, creating a','line_number':98,'multiline':False]
['text':' stall in the MDB cluster.','line_number':99,'multiline':False]
['text':' If we return from this function, we have either returned successfully or we've returned an','line_number':106,'multiline':False]
['text':' error other than WT_PREPARE_CONFLICT. Reset PrepareConflictTracker accordingly.','line_number':107,'multiline':False]
['text':' System (internal) connections that hit a prepare conflict should be killable to prevent','line_number':113,'multiline':False]
['text':' deadlocks with prepared transactions on replica set step up and step down.','line_number':114,'multiline':False]
['text':' It is contradictory to be running into a prepare conflict when we are ignoring interruptions,','line_number':119,'multiline':False]
['text':' particularly when running code inside an','line_number':120,'multiline':False]
['text':' OperationContext::runWithoutInterruptionExceptAtGlobalShutdown block. Operations executed in','line_number':121,'multiline':False]
['text':' this way are expected to be set to ignore prepare conflicts.','line_number':122,'multiline':False]
['text':' If a user operation on secondaries acquires a lock in MODE_S and then blocks on a prepare','line_number':136,'multiline':False]
['text':' conflict with a prepared transaction, deadlock will occur at the commit time of the','line_number':137,'multiline':False]
['text':' prepared transaction when it attempts to reacquire (since locks were yielded on','line_number':138,'multiline':False]
['text':' secondaries) an IX lock that conflicts with the MODE_S lock held by the user operation.','line_number':139,'multiline':False]
['text':' User operations that acquire MODE_X locks and block on prepare conflicts could lead to','line_number':140,'multiline':False]
['text':' the same problem. However, user operations on secondaries should never hold MODE_X locks.','line_number':141,'multiline':False]
['text':' Since prepared transactions will not reacquire RESOURCE_MUTEX / RESOURCE_METADATA /','line_number':142,'multiline':False]
['text':' RESOURCE_DDL_* locks at commit time, these lock types are safe. Therefore, invariant here','line_number':143,'multiline':False]
['text':' that we do not get a prepare conflict while holding a global, database, or collection','line_number':144,'multiline':False]
['text':' MODE_S lock (or MODE_X lock for completeness).','line_number':145,'multiline':False]
['text':' Callers of wiredTigerPrepareConflictRetry() should eventually call wtRCToStatus() via','line_number':152,'multiline':False]
['text':' invariantWTOK() and have the WT_ROLLBACK error bubble up as a WriteConflictException.','line_number':153,'multiline':False]
['text':' Enabling the "skipWriteConflictRetries" failpoint in conjunction with the','line_number':154,'multiline':False]
['text':' "WTSkipPrepareConflictRetries" failpoint prevents the higher layers from retrying the','line_number':155,'multiline':False]
['text':' entire operation.','line_number':156,'multiline':False]
['text':' Wait on the session cache to signal that a unit of work has been committed or aborted.','line_number':171,'multiline':False]
['text':' namespace mongo','line_number':178,'multiline':False]
