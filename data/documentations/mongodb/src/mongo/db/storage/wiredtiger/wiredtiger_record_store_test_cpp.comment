['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' IWYU pragma: keep','line_number':42,'multiline':False]
['text':' "," would also be valid.','line_number':82,'multiline':False]
['text':' "" would also be valid.','line_number':105,'multiline':False]
['text':' this should fail','line_number':164,'multiline':False]
['text':' this should succeed','line_number':173,'multiline':False]
['text':' ensure we start transactions','line_number':211,'multiline':False]
['text':' this should fail as our version of id1 is too old','line_number':225,'multiline':False]
['text':'*
 * Test that even when the oplog durability loop is paused, we can still advance the commit point as
 * long as the commit for each insert comes before the next insert starts.
 ','line_number':262,'multiline':True]
['text':'*
 * Test that Oplog entries inserted while there are hidden entries do not become visible until the
 * op and all earlier ops are durable.
 ','line_number':295,'multiline':True]
['text':' Wait a bit and check again to make sure they don't become visible automatically.','line_number':335,'multiline':False]
['text':'*
 * Insert records into an oplog and verify the number of truncate markers that are created.
 ','line_number':428,'multiline':True]
['text':' Inserting a record smaller than 'minBytesPerTruncateMarker' shouldn't create a new oplog','line_number':446,'multiline':False]
['text':' truncate marker.','line_number':447,'multiline':False]
['text':' Inserting another record such that their combined size exceeds','line_number':453,'multiline':False]
['text':' 'minBytesPerTruncateMarker' should cause a new truncate marker to be created.','line_number':454,'multiline':False]
['text':' Inserting a record such that the combined size of this record and the previously inserted','line_number':460,'multiline':False]
['text':' one exceed 'minBytesPerTruncateMarker' shouldn't cause a new truncate marker to be','line_number':461,'multiline':False]
['text':' created because we've started filling a new truncate marker.','line_number':462,'multiline':False]
['text':' Inserting a record such that the combined size of this record and the previously inserted','line_number':468,'multiline':False]
['text':' one is exactly equal to 'minBytesPerTruncateMarker' should cause a new truncate marker to','line_number':469,'multiline':False]
['text':' be created.','line_number':470,'multiline':False]
['text':' Inserting a single record that exceeds 'minBytesPerTruncateMarker' should cause a new','line_number':476,'multiline':False]
['text':' truncate marker to','line_number':477,'multiline':False]
['text':' be created.','line_number':478,'multiline':False]
['text':'*
 * Insert records into an oplog and try to update them. The updates shouldn't succeed if the size of
 * record is changed.
 ','line_number':486,'multiline':True]
['text':' Insert two records such that one makes up a full truncate marker and the other is a part of','line_number':499,'multiline':False]
['text':' the truncate marker currently being filled.','line_number':500,'multiline':False]
['text':' Attempts to grow the records should fail.','line_number':513,'multiline':False]
['text':' Attempts to shrink the records should also fail.','line_number':527,'multiline':False]
['text':' Changing the contents of the records without changing their size should succeed.','line_number':541,'multiline':False]
['text':' Explicitly sets the timestamp to ensure ordered writes.','line_number':549,'multiline':False]
['text':'*
 * Insert multiple records and truncate the oplog using RecordStore::truncate(). The operation
 * should leave no truncate markers, including the partially filled one.
 ','line_number':563,'multiline':True]
['text':'*
 * Insert multiple records, truncate the oplog using RecordStore::cappedTruncateAfter(), and verify
 * that the metadata for each truncate marker is updated. If a full truncate marker is partially
 * truncated, then it should become the truncate marker currently being filled.
 ','line_number':608,'multiline':True]
['text':' Make sure all are visible.','line_number':645,'multiline':False]
['text':' Truncate data using an inclusive RecordId that exists inside the truncate marker currently','line_number':651,'multiline':False]
['text':' being filled.','line_number':652,'multiline':False]
['text':' inclusive ','line_number':659,'multiline':True]
['text':' aboutToDelete callback ','line_number':660,'multiline':True]
['text':' Truncate data using an inclusive RecordId that refers to the 'lastRecord' of a full truncate','line_number':669,'multiline':False]
['text':' marker.','line_number':670,'multiline':False]
['text':' The truncate marker should become the one currently being filled.','line_number':671,'multiline':False]
['text':' inclusive ','line_number':678,'multiline':True]
['text':' aboutToDelete callback ','line_number':679,'multiline':True]
['text':' Truncate data using a non-inclusive RecordId that exists inside the truncate marker currently','line_number':688,'multiline':False]
['text':' being filled.','line_number':689,'multiline':False]
['text':' inclusive ','line_number':696,'multiline':True]
['text':' aboutToDelete callback ','line_number':697,'multiline':True]
['text':' Truncate data using a non-inclusive RecordId that refers to the 'lastRecord' of a full','line_number':706,'multiline':False]
['text':' truncate marker.','line_number':707,'multiline':False]
['text':' The truncate marker should remain intact.','line_number':708,'multiline':False]
['text':' inclusive ','line_number':715,'multiline':True]
['text':' aboutToDelete callback ','line_number':716,'multiline':True]
['text':' Truncate data using a non-inclusive RecordId that exists inside a full truncate marker. The','line_number':725,'multiline':False]
['text':' truncate marker should become the one currently being filled.','line_number':726,'multiline':False]
['text':' inclusive ','line_number':733,'multiline':True]
['text':' aboutToDelete callback ','line_number':734,'multiline':True]
['text':'*
 * Verify that oplog truncate markers are reclaimed when cappedMaxSize is exceeded.
 ','line_number':744,'multiline':True]
['text':' Fail to truncate the truncate marker when cappedMaxSize is exceeded, but the persisted','line_number':776,'multiline':False]
['text':' timestamp is before the truncation point (i.e: leaves a gap that replication recovery would','line_number':777,'multiline':False]
['text':' rely on).','line_number':778,'multiline':False]
['text':' Truncate a truncate marker when cappedMaxSize is exceeded.','line_number':793,'multiline':False]
['text':' Truncate multiple truncate markers if necessary.','line_number':823,'multiline':False]
['text':' No-op if dataSize <= cappedMaxSize.','line_number':838,'multiline':False]
['text':' Don't truncate the last truncate marker before the truncate point, even if the truncate point','line_number':853,'multiline':False]
['text':' is ahead of it.','line_number':854,'multiline':False]
['text':' Don't truncate entire oplog.','line_number':882,'multiline':False]
['text':' OK to truncate all truncate markers if there are records in the oplog that are before or at','line_number':911,'multiline':False]
['text':' the truncate-up-to point, that have not yet created a truncate marker.','line_number':912,'multiline':False]
['text':' Use timestamp (1, 13) as we can't commit at the stable timestamp (1, 12).','line_number':917,'multiline':False]
['text':'*
 * Verify that an oplog truncate marker isn't created if it would cause the logical representation
 * of the records to not be in increasing order.
 ','line_number':942,'multiline':True]
['text':' Inserting a record that has a smaller RecordId than the previously inserted record should','line_number':965,'multiline':False]
['text':' be able to create a new truncate marker when no truncate markers already exist.','line_number':966,'multiline':False]
['text':' However, inserting a record that has a smaller RecordId than most recently created','line_number':972,'multiline':False]
['text':' truncate marker's last record shouldn't cause a new truncate marker to be created, even','line_number':973,'multiline':False]
['text':' if the size of the inserted record exceeds 'minBytesPerTruncateMarker'.','line_number':974,'multiline':False]
['text':' Inserting a record that has a larger RecordId than the most recently created truncate','line_number':980,'multiline':False]
['text':' marker's last record should then cause a new truncate marker to be created.','line_number':981,'multiline':False]
['text':' When the oplog collection is non-empty, but no OplogTruncateMarkers are','line_number':989,'multiline':False]
['text':' generated because the estimated 'dataSize' is smaller than the minimum size for a truncate','line_number':990,'multiline':False]
['text':' marker, tets that','line_number':991,'multiline':False]
['text':'  (1) The oplog is scanned','line_number':992,'multiline':False]
['text':'  (2) OplogTruncateMarkers::currentBytes_forTest() reflects the actual size of the oplog instead','line_number':993,'multiline':False]
['text':'  of the estimated size.','line_number':994,'multiline':False]
['text':' Force the oplog visibility timestamp to be up-to-date to the last record.','line_number':1014,'multiline':False]
['text':' Force the estimates of 'dataSize' and 'numRecords' to be lower than the real values.','line_number':1018,'multiline':False]
['text':' Initialize the truncate markers.','line_number':1022,'multiline':False]
['text':' A forced scan over the RecordStore should force the 'currentBytes' to be accurate in the','line_number':1034,'multiline':False]
['text':' truncate markers as well as the RecordStore's 'numRecords' and 'dataSize'.','line_number':1035,'multiline':False]
['text':' Ensure that if we sample and create duplicate oplog truncate markers, perform truncation','line_number':1041,'multiline':False]
['text':' correctly, and with no crashing behavior. This scenario may be possible if the same record is','line_number':1042,'multiline':False]
['text':' sampled multiple times during startup, which can be very likely if the size storer is very','line_number':1043,'multiline':False]
['text':' inaccurate.','line_number':1044,'multiline':False]
['text':' Before initializing the RecordStore, which also starts the oplog sampling process,','line_number':1053,'multiline':False]
['text':' populate with a few records.','line_number':1054,'multiline':False]
['text':' Force the oplog visibility timestamp to be up-to-date to the last record.','line_number':1064,'multiline':False]
['text':' Force initialize the oplog truncate markers to use sampling by providing very large,','line_number':1069,'multiline':False]
['text':' inaccurate sizes. This should cause us to oversample the records in the oplog.','line_number':1070,'multiline':False]
['text':' Confirm that sampling occurred and that some truncate markers were generated.','line_number':1079,'multiline':False]
['text':' Reclaiming should do nothing because the data size is still under the maximum.','line_number':1086,'multiline':False]
['text':' Reduce the oplog size to ensure we create a truncate marker and truncate on the next','line_number':1094,'multiline':False]
['text':' insert.','line_number':1095,'multiline':False]
['text':' Inserting these records should meet the requirements for truncation. That is: there is a','line_number':1098,'multiline':False]
['text':' record, 5, after the last truncate marker, 4, and before the truncation point, 6.','line_number':1099,'multiline':False]
['text':' Ensure every truncate marker has been cleaned up except for the last one ending in 6.','line_number':1103,'multiline':False]
['text':' The original oplog should have rolled over and the size and count should be accurate.','line_number':1108,'multiline':False]
['text':' 1) Initialize the top of oplog to "1".','line_number':1186,'multiline':False]
['text':' Asserting on a recovery unit without a snapshot.','line_number':1197,'multiline':False]
['text':' 2) Open a hole at time "2".','line_number':1200,'multiline':False]
['text':' Don't save the return value because the compiler complains about unused variables.','line_number':1202,'multiline':False]
['text':' Store the client with an uncommitted transaction. Create a new, concurrent client.','line_number':1205,'multiline':False]
['text':' Should not see uncommited write from op1.','line_number':1212,'multiline':False]
['text':' After committing, three is the top of oplog.','line_number':1222,'multiline':False]
['text':' Switch to client 1.','line_number':1225,'multiline':False]
['text':' Committing the write at timestamp "2" does not change the top of oplog result. A new query','line_number':1232,'multiline':False]
['text':' with client 1 will see timestamp "3".','line_number':1233,'multiline':False]
['text':' Cursors should always ensure they are in an active transaction when next() is called.','line_number':1257,'multiline':False]
['text':' Committing a WriteUnitOfWork will end the current transaction.','line_number':1268,'multiline':False]
['text':' If a cursor is used after a WUOW commits, it should implicitly start a new transaction.','line_number':1274,'multiline':False]
['text':' Cursors should always ensure they are in an active transaction when seekExact() is called.','line_number':1300,'multiline':False]
['text':' Committing a WriteUnitOfWork will end the current transaction.','line_number':1311,'multiline':False]
['text':' If a cursor is used after a WUOW commits, it should implicitly start a new transaction.','line_number':1317,'multiline':False]
['text':' Verify clustered record stores.','line_number':1323,'multiline':False]
['text':' This test case complements StorageEngineTest:TemporaryRecordStoreClustered which verifies','line_number':1324,'multiline':False]
['text':' clustered temporary record stores.','line_number':1325,'multiline':False]
['text':' Read the record back.','line_number':1383,'multiline':False]
['text':' Update the record.','line_number':1387,'multiline':False]
['text':' Make sure numRecords and dataSize are accurate after a delete rolls back and some other','line_number':1399,'multiline':False]
['text':' transaction deletes the same rows before we have a chance of patching up the metadata.','line_number':1400,'multiline':False]
['text':' This record will be deleted by two transactions.','line_number':1405,'multiline':False]
['text':' This thread will delete the record and then rollback. We'll block the roll back process after','line_number':1424,'multiline':False]
['text':' rolling back the WT transaction and before running the rest of the registered changes,','line_number':1425,'multiline':False]
['text':' allowing the main thread to delete the same rows again.','line_number':1426,'multiline':False]
['text':' Registered changes are executed in reverse order.','line_number':1432,'multiline':False]
['text':' Wait for the other thread to abort.','line_number':1440,'multiline':False]
['text':' Notify the other thread we have deleted, let it complete the rollback.','line_number':1445,'multiline':False]
['text':' namespace','line_number':1455,'multiline':False]
['text':' namespace mongo','line_number':1456,'multiline':False]
