['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' IWYU pragma: no_include "cxxabi.h"','line_number':34,'multiline':False]
['text':' Enabling the checkForInterruptFail fail point will start a game of random chance on the','line_number':72,'multiline':False]
['text':' connection specified in the fail point data, generating an interrupt with a given fixed','line_number':73,'multiline':False]
['text':' probability.  Example invocation:','line_number':74,'multiline':False]
['text':'','line_number':75,'multiline':False]
['text':' {configureFailPoint: "checkForInterruptFail",','line_number':76,'multiline':False]
['text':'  mode: "alwaysOn",','line_number':77,'multiline':False]
['text':'  data: {threadName: "threadName", chance: .01}}','line_number':78,'multiline':False]
['text':'','line_number':79,'multiline':False]
['text':' Both data fields must be specified. In the above example, all interrupt points on the thread with','line_number':80,'multiline':False]
['text':' name 'threadName' will generate a kill on the current operation with probability p(.01),','line_number':81,'multiline':False]
['text':' including interrupt points of nested operations. "chance" must be a double between 0 and 1,','line_number':82,'multiline':False]
['text':' inclusive.','line_number':83,'multiline':False]
['text':' namespace','line_number':87,'multiline':False]
['text':' Helper function for checkForInterrupt fail point.  Decides whether the operation currently','line_number':207,'multiline':False]
['text':' being run by the given Client meet the (probabilistic) conditions for interruption as','line_number':208,'multiline':False]
['text':' specified in the fail point info.','line_number':209,'multiline':False]
['text':' Only target the client with the specified connection number.','line_number':211,'multiline':False]
['text':' Return true with (approx) probability p = "chance".  Recall: 0 <= chance <= 1.','line_number':216,'multiline':False]
['text':' namespace','line_number':224,'multiline':False]
['text':' waitForConditionOrInterruptNoAssertUntil returns when:','line_number':307,'multiline':False]
['text':'','line_number':308,'multiline':False]
['text':' Normal condvar wait criteria:','line_number':309,'multiline':False]
['text':' - cv is notified','line_number':310,'multiline':False]
['text':' - deadline is passed','line_number':311,'multiline':False]
['text':'','line_number':312,'multiline':False]
['text':' OperationContext kill criteria:','line_number':313,'multiline':False]
['text':' - _deadline is passed (artificial deadline or maxTimeMS)','line_number':314,'multiline':False]
['text':' - markKilled is called (killOp)','line_number':315,'multiline':False]
['text':'','line_number':316,'multiline':False]
['text':' Baton criteria:','line_number':317,'multiline':False]
['text':' - _baton is notified (someone's queuing work for the baton)','line_number':318,'multiline':False]
['text':' - _baton::run returns (timeout fired / networking is ready / socket disconnected)','line_number':319,'multiline':False]
['text':'','line_number':320,'multiline':False]
['text':' We release the lock held by m whenever we call markKilled, since it may trigger','line_number':321,'multiline':False]
['text':' CancellationSource cancellation which can in turn emplace a SharedPromise which then may acquire','line_number':322,'multiline':False]
['text':' a mutex.','line_number':323,'multiline':False]
['text':' If the maxTimeNeverTimeOut failpoint is set, behave as though the operation's deadline does','line_number':328,'multiline':False]
['text':' not exist. Under normal circumstances, if the op has an existing deadline which is sooner','line_number':329,'multiline':False]
['text':' than the deadline passed into this method, we replace our deadline with the op's. This means','line_number':330,'multiline':False]
['text':' that we expect to time out at the same time as the existing deadline expires. If, when we','line_number':331,'multiline':False]
['text':' time out, we find that the op's deadline has not expired (as will always be the case if','line_number':332,'multiline':False]
['text':' maxTimeNeverTimeOut is set) then we assume that the incongruity is due to a clock mismatch','line_number':333,'multiline':False]
['text':' and return _timeoutError regardless. To prevent this behaviour, only consider the op's','line_number':334,'multiline':False]
['text':' deadline in the event that the maxTimeNeverTimeOut failpoint is not set.','line_number':335,'multiline':False]
['text':' It's possible that the system clock used in stdx::condition_variable::wait_until','line_number':353,'multiline':False]
['text':' is slightly ahead of the FastClock used in checkForInterrupt. In this case,','line_number':354,'multiline':False]
['text':' we treat the operation as though it has exceeded its time limit, just as if the','line_number':355,'multiline':False]
['text':' FastClock and system clock had agreed.','line_number':356,'multiline':False]
['text':' Inside waitForConditionUntil() is a conversion from deadline's Date_t type to the system','line_number':365,'multiline':False]
['text':' clock's time_point type. If the time_point's compiler-dependent resolution is higher','line_number':366,'multiline':False]
['text':' than Date_t's milliseconds, it's possible for the conversion from Date_t to time_point','line_number':367,'multiline':False]
['text':' to overflow and trigger an exception. We catch that here to maintain the noexcept','line_number':368,'multiline':False]
['text':' contract.','line_number':369,'multiline':False]
['text':' Record that a kill was requested on this operationContext due to replication state change','line_number':384,'multiline':False]
['text':' since it is possible to call markKilled() multiple times but only the first killCode will','line_number':385,'multiline':False]
['text':' be preserved.','line_number':386,'multiline':False]
['text':' The OperationContext executing shutdown is immune from interruption.','line_number':433,'multiline':False]
['text':' Only set the opKey once','line_number':444,'multiline':False]
['text':' namespace mongo','line_number':526,'multiline':False]
