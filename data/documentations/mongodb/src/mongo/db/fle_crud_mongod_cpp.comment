['text':'*
 *    Copyright (C) 2022-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' SEPTransactionClient::runCommand manages the client itself so do not create one via','line_number':107,'multiline':False]
['text':' onCreateThread','line_number':108,'multiline':False]
['text':' Update the OpTime for the reply to current OpTime','line_number':113,'multiline':False]
['text':'','line_number':114,'multiline':False]
['text':' The OpTime in the reply reflects the OpTime of when the request was run, not when it was','line_number':115,'multiline':False]
['text':' committed. The Transaction API propagates the OpTime from the commit transaction onto the','line_number':116,'multiline':False]
['text':' current thread so grab it from TLS and change the OpTime on the reply.','line_number':117,'multiline':False]
['text':'','line_number':118,'multiline':False]
['text':' We're about to block. Check back in the session so that it's available to other','line_number':130,'multiline':False]
['text':' threads. Note that we may block on a request to _ourselves_, meaning that we may have to','line_number':131,'multiline':False]
['text':' wait for another thread which will use the same session. This step is necessary','line_number':132,'multiline':False]
['text':' to prevent deadlocks.','line_number':133,'multiline':False]
['text':' This may block on a sub-operation on this node finishing. It's possible that while','line_number':150,'multiline':False]
['text':' blocked on the network layer, another shard could have responded, theoretically','line_number':151,'multiline':False]
['text':' unblocking this thread of execution. However, we must wait until the child operation','line_number':152,'multiline':False]
['text':' on this shard finishes so we can get the session back. This may limit the throughput','line_number':153,'multiline':False]
['text':' of the operation, but it's correct.','line_number':154,'multiline':False]
['text':' Assumes this is only called from the 'aggregate' or 'getMore' commands.  The code','line_number':159,'multiline':False]
['text':' which relies on this parameter does not distinguish/care about the difference so','line_number':160,'multiline':False]
['text':' we simply always pass 'aggregate'.','line_number':161,'multiline':False]
['text':'','line_number':162,'multiline':False]
['text':' Catch NoSuchTransaction which happens when the transaction is aborted by an','line_number':163,'multiline':False]
['text':' unrelated error If this error is not caught, then a user error like DuplicateKey','line_number':164,'multiline':False]
['text':' gets ignored for NoSuchTransaction','line_number':165,'multiline':False]
['text':'*
 * If the collection is missing (which should not happen in practice), we create a mock reader that
 * just returns nothing rather then special case the algorithm for a missing collection.
 ','line_number':183,'multiline':True]
['text':'*
 * Lookup a ESC document by _id by clustered index id.
 *
 * Clustered indexes mean we only have to hit one table in WT so this will be very quick.
 ','line_number':204,'multiline':True]
['text':' Check for interruption so we can be killed','line_number':245,'multiline':False]
['text':'*
 * Lookup a ESC document by _id in non-clustered collection.
 *
 * We have to lookup first by _id in the _id index and then get the document from the base
 * collection via its record id.
 ','line_number':264,'multiline':True]
['text':' Check for interruption so we can be killed','line_number':313,'multiline':False]
['text':' Get the document from the base collection','line_number':330,'multiline':False]
['text':' namespace','line_number':345,'multiline':False]
['text':' FLE crud is only supported on replica sets so no reason to start thread pool on standalones','line_number':360,'multiline':False]
['text':' Check if it was started','line_number':373,'multiline':False]
['text':' If there is no collection, run through the algorithm with a special reader that only','line_number':516,'multiline':False]
['text':' returns empty documents. This simplifies the implementation of other readers.','line_number':517,'multiline':False]
['text':' numRecords is signed so guard against negative numbers','line_number':523,'multiline':False]
['text':' If clustered collection, we have simpler searches','line_number':529,'multiline':False]
['text':' Non-clustered case, we need to look a index entry in _id index and then the','line_number':543,'multiline':False]
['text':' collection','line_number':544,'multiline':False]
['text':' namespace mongo','line_number':578,'multiline':False]
