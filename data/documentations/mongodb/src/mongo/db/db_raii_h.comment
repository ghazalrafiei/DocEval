['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' IWYU pragma: keep','line_number':55,'multiline':False]
['text':'*
 * RAII-style class which can update the diagnostic state on the operation's CurOp object and record
 * the operation via Top upon destruction. Can be configured to only update the Top counters if
 * desired.
 ','line_number':61,'multiline':True]
['text':'*
     * Describes which diagnostics to update during the lifetime of this object.
     ','line_number':71,'multiline':True]
['text':' Increments the Top counter for this operation type and this namespace','line_number':75,'multiline':False]
['text':' upon destruction.','line_number':76,'multiline':False]
['text':' Adjusts the state on the CurOp object associated with the','line_number':77,'multiline':False]
['text':' OperationContext. Updates the namespace to be 'nss', starts a timer','line_number':78,'multiline':False]
['text':' for the operation (if it hasn't already started), and figures out and','line_number':79,'multiline':False]
['text':' records the profiling level of the operation.','line_number':80,'multiline':False]
['text':' Performs the operations of both the LogModes specified above.','line_number':81,'multiline':False]
['text':'*
     * If 'logMode' is 'kUpdateCurOp' or 'kUpdateTopAndCurOp', sets up and records state on the
     * CurOp object attached to 'opCtx', as described above.
     ','line_number':84,'multiline':True]
['text':'*
     * Records stats about the current operation via Top, if 'logMode' is 'kUpdateTop' or
     * 'kUpdateTopAndCurOp'.
     ','line_number':99,'multiline':True]
['text':'*
 * Locked version of AutoGetCollectionForRead for setting up an operation for read that ensured that
 * the read will be performed against an appropriately committed snapshot if the operation is using
 * a readConcern of 'majority'.
 *
 * Use this when you want to read the contents of a collection, but you are not at the top-level of
 * some command. This will ensure your reads obey any requested readConcern, but will not update the
 * status of CurrentOp, or add a Top entry.
 *
 * Additional collection and/or database locks will be acquired for 'secondaryNssOrUUIDs'
 * namespaces.
 ','line_number':112,'multiline':True]
['text':' Ordering matters, the _collLocks should destruct before the _autoGetDb releases the','line_number':151,'multiline':False]
['text':' rstl/global/database locks.','line_number':152,'multiline':False]
['text':' If the object was instantiated with a UUID, contains the resolved namespace, otherwise it is','line_number':159,'multiline':False]
['text':' the same as the input namespace string','line_number':160,'multiline':False]
['text':' Tracks whether any secondary collection namespaces is a view or sharded.','line_number':163,'multiline':False]
['text':'*
 * Same as AutoGetCollectionForRead above except does not take collection, database or rstl locks.
 * Takes the global lock, same as AutoGetCollectionForRead. Ensures a consistent in-memory and
 * on-disk view of the storage catalog.
 *
 * This implementation uses the point-in-time (PIT) catalog.
 ','line_number':167,'multiline':True]
['text':' Used so that we can reset the read source back to the original read source when this instance','line_number':199,'multiline':False]
['text':' of AutoGetCollectionForReadLockFree is destroyed.','line_number':200,'multiline':False]
['text':' Whether or not this AutoGetCollectionForReadLockFree is being constructed while','line_number':203,'multiline':False]
['text':' there's already a lock-free read in progress.','line_number':204,'multiline':False]
['text':' Increments a counter on the OperationContext for the number of lock-free reads when','line_number':207,'multiline':False]
['text':' constructed, and decrements on destruction.','line_number':208,'multiline':False]
['text':'','line_number':209,'multiline':False]
['text':' Doesn't change after construction, but only set if it's a collection and not a view.','line_number':210,'multiline':False]
['text':' This must be constructed after LockFreeReadsBlock since LockFreeReadsBlock sets a flag that','line_number':213,'multiline':False]
['text':' GlobalLock uses in its constructor.','line_number':214,'multiline':False]
['text':' Holds the collection that was acquired from the catalog and logic for refetching the','line_number':217,'multiline':False]
['text':' collection state from the catalog when restoring from yield.','line_number':218,'multiline':False]
['text':'','line_number':219,'multiline':False]
['text':' Doesn't change after construction.','line_number':220,'multiline':False]
['text':' Tracks whether any secondary collection namespace is a view or is sharded.','line_number':223,'multiline':False]
['text':'','line_number':224,'multiline':False]
['text':' Doesn't change after construction, see comment in "EmplaceHelper".  Should NOT invariant that','line_number':225,'multiline':False]
['text':' this is true when restoring from yield, because changing to be sharded is allowed, but','line_number':226,'multiline':False]
['text':' changing to a view is not.','line_number':227,'multiline':False]
['text':' If the object was instantiated with a UUID, contains the resolved namespace, otherwise it is','line_number':230,'multiline':False]
['text':' the same as the input namespace string.','line_number':231,'multiline':False]
['text':'','line_number':232,'multiline':False]
['text':' May change after construction, when restoring from yield.','line_number':233,'multiline':False]
['text':' Holds a copy of '_resolvedNss.dbName()'. Unlike '_resolvedNss', this field does _not_ change','line_number':236,'multiline':False]
['text':' after construction.','line_number':237,'multiline':False]
['text':' Only set if _collectionPtr does not contain a nullptr and if the requested namespace is a','line_number':240,'multiline':False]
['text':' view.','line_number':241,'multiline':False]
['text':'','line_number':242,'multiline':False]
['text':' May change after construction, when restoring from yield.','line_number':243,'multiline':False]
['text':'*
 * Creates either an AutoGetCollectionForRead or AutoGetCollectionForReadLockFree depending on
 * whether a lock-free read is supported.
 ','line_number':249,'multiline':True]
['text':'*
     * Passthrough functions to either _autoGet or _autoGetLockFree.
     ','line_number':259,'multiline':True]
['text':'*
 * Logic common to both AutoGetCollectionForReadCommand and AutoGetCollectionForReadCommandLockFree.
 * Not intended for direct use.
 ','line_number':281,'multiline':True]
['text':'*
 * Same as AutoGetCollectionForRead, but in addition will add a Top entry upon destruction and
 * ensure the CurrentOp object has the right namespace and has started its timer.
 ','line_number':331,'multiline':True]
['text':'*
 * Same as AutoGetCollectionForReadCommand except no collection, database or RSTL lock is taken.
 ','line_number':346,'multiline':True]
['text':'*
 * Creates either an AutoGetCollectionForReadCommand or AutoGetCollectionForReadCommandLockFree
 * depending on whether a lock-free read is supported in the situation per the results of
 * supportsLockFreeRead().
 ','line_number':372,'multiline':True]
['text':'*
     * Passthrough function to either _autoGet or _autoGetLockFree.
     ','line_number':385,'multiline':True]
['text':'*
 * Acquires the global MODE_IS lock and establishes a consistent CollectionCatalog and storage
 * snapshot.
 ','line_number':408,'multiline':True]
['text':' Sets a flag on the opCtx to inform subsequent code that the operation is running lock-free.','line_number':417,'multiline':False]
['text':'*
 * Establishes a consistent CollectionCatalog with a storage snapshot. Also verifies Database
 * sharding state for the provided Db. Takes MODE_IS global lock.
 *
 * Similar to AutoGetCollectionForReadLockFree but does not take readConcern into account. Any
 * Collection returned by the stashed catalog will not refresh the storage snapshot on yield.
 *
 * Should only be used to read catalog metadata for a particular Db and not for reading from
 * Collection(s).
 ','line_number':423,'multiline':True]
['text':' Sets a flag on the opCtx to inform subsequent code that the operation is running lock-free.','line_number':440,'multiline':False]
['text':'*
 * Creates either an AutoGetDb or AutoGetDbForReadLockFree depending on whether a lock-free read is
 * supported in the situation per the results of supportsLockFreeRead().
 ','line_number':446,'multiline':True]
['text':'*
 * Opens the database that we want to use and sets the appropriate namespace on the
 * current operation.
 ','line_number':461,'multiline':True]
['text':'* @return if the db was created by this OldClientContext ','line_number':477,'multiline':True]
['text':'*
 * Returns a MODE_IX LockMode if a read is performed under readConcern level snapshot, or a MODE_IS
 * lock otherwise. MODE_IX acquisition will allow a read to participate in two-phase locking.
 * Throws an exception if 'system.views' is being queried within a transaction.
 ','line_number':493,'multiline':True]
['text':'*
 * When in scope, enforces prepare conflicts in the storage engine. Reads and writes in this scope
 * will block on accessing an already updated document which is in prepared state. And they will
 * unblock after the prepared transaction that performed the update commits/aborts.
 ','line_number':500,'multiline':True]
['text':' It is illegal to call setPrepareConflictBehavior() while any storage transaction is','line_number':509,'multiline':False]
['text':' active. setPrepareConflictBehavior() invariants that there is no active storage','line_number':510,'multiline':False]
['text':' transaction.','line_number':511,'multiline':False]
['text':' If we are still holding locks, we might still have open storage transactions. However, we','line_number':516,'multiline':False]
['text':' did not start with any active transactions when we first entered the scope. And','line_number':517,'multiline':False]
['text':' transactions started within this scope cannot be reused outside of the scope. So we need','line_number':518,'multiline':False]
['text':' to call abandonSnapshot() to close any open transactions on destruction. Any reads or','line_number':519,'multiline':False]
['text':' writes should have already completed as we are exiting the scope. Therefore, this call is','line_number':520,'multiline':False]
['text':' safe.','line_number':521,'multiline':False]
['text':' It is illegal to call setPrepareConflictBehavior() while any storage transaction is','line_number':525,'multiline':False]
['text':' active. There should not be any active transaction if we are not holding locks. If locks','line_number':526,'multiline':False]
['text':' are still being held, the above abandonSnapshot() call should have already closed all','line_number':527,'multiline':False]
['text':' storage transactions.','line_number':528,'multiline':False]
['text':' Asserts whether the read concern is supported for the given collection with the specified read','line_number':537,'multiline':False]
['text':' source.','line_number':538,'multiline':False]
['text':' namespace mongo','line_number':542,'multiline':False]
