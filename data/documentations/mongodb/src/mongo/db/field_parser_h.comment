['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
     * Returns true and fills in 'out' with the contents of the field described by 'field'
     * or with the value in 'def', depending on whether the field is present and has the
     * correct type in 'doc' or not, respectively. Otherwise, if the field exists but has
     * the wrong type, returns false.
     *
     * NOTE ON BSON OWNERSHIP:
     *
     *   The caller must assume that this class will point to data inside 'doc' without
     *   copying it. In practice this means that 'doc' MUST EXIST for as long as 'out'
     *   stays in scope.
     ','line_number':69,'multiline':True]
['text':' The field is present but has the wrong type','line_number':83,'multiline':False]
['text':' The field is present and has the correct type','line_number':86,'multiline':False]
['text':' The field is absent in the BSON object but set from default','line_number':89,'multiline':False]
['text':' The field is absent and no default was specified','line_number':92,'multiline':False]
['text':'*
     * The following extractNumber methods do implicit conversion between any numeric type and
     * the BSONField type.  This can be useful when an exact numeric type is not needed, for
     * example if the field is sometimes modified from the shell which can change the type.
     ','line_number':196,'multiline':True]
['text':'*
     * Extracts a document id from a particular field name, which may be of any type but Array.
     * Wraps the extracted id value in a BSONObj with one element and empty field name.
     ','line_number':231,'multiline':True]
['text':' TODO: BSONElement extraction of types below','line_number':245,'multiline':False]
['text':'*
     * Extracts a mandatory 'field' from the object 'doc'. Writes the extracted contents to '*out'
     * if successful or fills '*errMsg', if exising, otherwise. This variant relies on T having a
     * parseBSON method.
     ','line_number':247,'multiline':True]
['text':'*
     * Similar to the mandatory 'extract' but on a optional field. The '*out' value would only be
     * allocated if the field is present. The ownership of '*out' would be transferred to the
     * caller, in that case.
     ','line_number':258,'multiline':True]
['text':' alloc variation','line_number':272,'multiline':False]
['text':'*
     * Extracts a mandatory repetition of 'field', from the object 'doc'. Writes the extracted
     * contents to '*out' if successful or fills '*errMsg', if exising, otherwise.  This variant
     * relies on T having a parseBSON method.
     *
     * The vector owns the instances of T.
     ','line_number':275,'multiline':True]
['text':'*
     * Extracts a mandatory repetition of 'field', from the field 'elem'. Writes the extracted
     * contents to '*out' if successful or fills '*errMsg', if exising, otherwise.  This variant
     * relies on T having a parseBSON method.
     *
     * The vector owns the instances of T.
     ','line_number':288,'multiline':True]
['text':'*
     * Similar to the mandatory repetition' extract but on an optional field. The '*out' value would
     * only be allocated if the field is present. The ownership of '*out' would be transferred to
     * the caller, in that case.
     *
     * The vector owns the instances of T.
     ','line_number':301,'multiline':True]
['text':'','line_number':314,'multiline':False]
['text':' ==================== Below DEPRECATED; use types instead ====================','line_number':315,'multiline':False]
['text':'','line_number':316,'multiline':False]
['text':'*
     * The following extract methods are templatized to handle extraction of vectors and
     * maps of sub-objects.  Keys in the map should be StringData compatible.
     *
     * It's possible to nest extraction of vectors and maps to any depth, i.e:
     *
     * std::vector<map<std::string,vector<std::string> > > val;
     * FieldParser::extract(doc, field, val, &val);
     ','line_number':318,'multiline':True]
['text':' Extracts an array into a vector','line_number':441,'multiline':False]
['text':' Append all the new elements to the end of the vector','line_number':469,'multiline':False]
['text':' Extracts an object into a map','line_number':594,'multiline':False]
['text':' namespace mongo','line_number':644,'multiline':False]
