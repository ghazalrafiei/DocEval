['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
     * The NamespaceString reserved constants are actually this `ConstantProxy`
     * type, which can be `constexpr` and can be used directly in place of
     * `NamespaceString`, except in very rare cases. To work around those, use a
     * `static_cast<const NamespaceString&>`. The first time it's used, a
     * `ConstantProxy` produces a memoized `const NamespaceString*` and retains
     * it for future uses.
     ','line_number':67,'multiline':True]
['text':'*
         * `ConstantProxy` objects can be copied, so that they behave more like
         * `NamespaceString`. All copies will point to the same `SharedState`.
         * The `SharedState` is meant to be defined constexpr, but has mutable
         * data members to implement the on-demand memoization of the
         * `NamespaceString`.
         ','line_number':77,'multiline':True]
['text':' The maximum namespace length of sharded collections is less than that of unsharded ones since','line_number':138,'multiline':False]
['text':' the namespace of the cached chunks metadata, local to each shard, is composed by the','line_number':139,'multiline':False]
['text':' namespace of the related sharded collection (i.e., config.cache.chunks.<ns>).','line_number':140,'multiline':False]
['text':' 255 - len(ChunkType::ShardNSPrefix)','line_number':141,'multiline':False]
['text':' Reserved system namespaces','line_number':143,'multiline':False]
['text':' Name for the system views collection','line_number':145,'multiline':False]
['text':' Name for the system.js collection','line_number':148,'multiline':False]
['text':' Name of the pre-images collection.','line_number':151,'multiline':False]
['text':' Prefix for the collection storing collection statistics.','line_number':154,'multiline':False]
['text':' Name for the change stream change collection.','line_number':157,'multiline':False]
['text':' Name for the profile collection','line_number':160,'multiline':False]
['text':' Names of privilege document collections','line_number':163,'multiline':False]
['text':' Prefix for orphan collections','line_number':167,'multiline':False]
['text':' Prefix for collections that store the local resharding oplog buffer.','line_number':170,'multiline':False]
['text':' Prefix for resharding conflict stash collections.','line_number':174,'multiline':False]
['text':' Prefix for temporary resharding collection.','line_number':177,'multiline':False]
['text':' Prefix for time-series buckets collection.','line_number':180,'multiline':False]
['text':' Prefix for global index container collections. These collections belong to the system','line_number':183,'multiline':False]
['text':' database.','line_number':184,'multiline':False]
['text':' Prefix for the temporary collection used by the $out stage.','line_number':188,'multiline':False]
['text':' Maintainers Note: The large set of `NamespaceString`-typed static data','line_number':191,'multiline':False]
['text':' members of the `NamespaceString` class representing system-reserved','line_number':192,'multiline':False]
['text':' collections is now generated from "namespace_string_reserved.def.h".','line_number':193,'multiline':False]
['text':' Please make edits there to add or change such constants.','line_number':194,'multiline':False]
['text':' The constants are declared as merely `const` but have `constexpr`','line_number':196,'multiline':False]
['text':' definitions below. Because the `NamespaceString` class enclosing their','line_number':197,'multiline':False]
['text':' type is incomplete, they can't be _declared_ fully constexpr (a constexpr','line_number':198,'multiline':False]
['text':' limitation).','line_number':199,'multiline':False]
['text':' IWYU pragma: keep','line_number':201,'multiline':False]
['text':'*
     * Constructs an empty NamespaceString.
     ','line_number':205,'multiline':True]
['text':'*
     * Constructs a NamespaceString for the given database.
     ','line_number':210,'multiline':True]
['text':'*
     * Constructs a NamespaceString in the global config db, "config.<collName>".
     ','line_number':215,'multiline':True]
['text':'*
     * Constructs a NamespaceString in the local db, "local.<collName>".
     ','line_number':220,'multiline':True]
['text':'*
     * These functions construct a NamespaceString without checking for presence of TenantId.
     *
     * MUST only be used for tests.
     ','line_number':225,'multiline':True]
['text':'*
     * Constructs the namespace '<dbName>.$cmd.aggregate', which we use as the namespace for
     * aggregation commands with the format {aggregate: 1}.
     ','line_number':258,'multiline':True]
['text':'*
     * Constructs the change collection namespace for the specified tenant.
     ','line_number':264,'multiline':True]
['text':'*
     * Constructs the pre-images collection namespace for a tenant if the 'tenantId' is specified,
     * otherwise creates a default pre-images collection namespace.
     ','line_number':269,'multiline':True]
['text':'*
     * Constructs a NamespaceString representing a listCollections namespace. The format for this
     * namespace is "<dbName>.$cmd.listCollections".
     ','line_number':275,'multiline':True]
['text':'*
     * Constructs a NamespaceString for the specified global index.
     ','line_number':281,'multiline':True]
['text':'*
     * Constructs the cluster parameters NamespaceString for the specified tenant. The format for
     * this namespace is "(<tenantId>_)config.clusterParameters".
     ','line_number':286,'multiline':True]
['text':'*
     * Constructs the system.views NamespaceString for the specified DatabaseName.
     ','line_number':292,'multiline':True]
['text':'*
     * Constructs the system.profile NamespaceString for the specified DatabaseName.
     ','line_number':297,'multiline':True]
['text':'*
     * Constructs a NamespaceString representing a BulkWrite namespace. The format for this
     * namespace is admin.$cmd.bulkWrite".
     ','line_number':302,'multiline':True]
['text':'*
     * Constructs the oplog buffer NamespaceString for the given migration id for movePrimary op.
     ','line_number':308,'multiline':True]
['text':'*
     * Constructs the NamesapceString to store the collections to clone by the movePrimary op.
     ','line_number':313,'multiline':True]
['text':'*
     * Constructs the NamespaceString prefix for temporary movePrimary recipient collections.
     ','line_number':318,'multiline':True]
['text':'*
     * Constructs the oplog buffer NamespaceString for the given UUID and donor shardId.
     ','line_number':323,'multiline':True]
['text':'*
     * Constructs the conflict stash NamespaceString for the given UUID and donor shardId.
     ','line_number':329,'multiline':True]
['text':'*
     * Constructs the tenant-specific admin.system.users NamespaceString for the given tenant,
     * "tenant_admin.system.users".
     ','line_number':335,'multiline':True]
['text':'*
     * Constructs the tenant-specific admin.system.roles NamespaceString for the given tenant,
     * "tenant_admin.system.roles".
     ','line_number':341,'multiline':True]
['text':'*
     * Constructs the command NamespaceString, "<dbName>.$cmd".
     ','line_number':347,'multiline':True]
['text':'*
     * Constructs a dummy NamespaceString, "<tenantId>.config.dummy.namespace", to be used where a
     * placeholder NamespaceString is needed. It must be acceptable for tenantId to be empty, so we
     * use "config" as the db.
     ','line_number':352,'multiline':True]
['text':'*
     * This function must only be used in sharding code (src/mongo/s and src/mongo/db/s).
     ','line_number':368,'multiline':True]
['text':'*
     * This function must only be used in unit tests.
     ','line_number':375,'multiline':True]
['text':'*
     * Gets a namespace string without tenant id.
     *
     * MUST only be used for tests.
     ','line_number':403,'multiline':True]
['text':'*
     * Returns a namespace string without tenant id.
     * Please use the NamespaceStringUtil::serialize class instead to apply the proper serialization
     * behavior.
     * Only to be used when a tenant id cannot be tolerated in the serialized output, and should
     * otherwise be avoided whenever possible.
     *
     * MUST only be used for very specific cases.
     ','line_number':412,'multiline':True]
['text':'*
     * Gets a namespace string with tenant id.
     *
     * MUST only be used for tests.
     ','line_number':425,'multiline':True]
['text':'*
     * This function should only be used when creating a resouce id for nss.
     ','line_number':434,'multiline':True]
['text':'*
     * This function should only be used when logging a NamespaceString in an error message.
     ','line_number':441,'multiline':True]
['text':'*
     * Method to be used only when logging a NamespaceString in a log message.
     * It is called anytime a NamespaceString is logged by logAttrs or otherwise.
     ','line_number':448,'multiline':True]
['text':'','line_number':469,'multiline':False]
['text':' The following methods assume isValid() is true for this NamespaceString.','line_number':470,'multiline':False]
['text':'','line_number':471,'multiline':False]
['text':'*
     * foo = true
     * foo. = false
     * foo.a = false
     ','line_number':533,'multiline':True]
['text':'*
     * Returns whether the specified namespace is never tracked in the sharding catalog.
     *
     * These class of namespaces are used for internal purposes only and they are only registered in
     * the local catalog but not tracked by the sharding catalog.
     ','line_number':543,'multiline':True]
['text':'*
     * Returns whether the specified namespace is config.cache.chunks.<>.
     ','line_number':551,'multiline':True]
['text':'*
     * Returns whether the specified namespace is config.localReshardingOplogBuffer.<>.
     ','line_number':556,'multiline':True]
['text':'*
     * Returns whether the specified namespace is config.localReshardingConflictStash.<>.
     ','line_number':561,'multiline':True]
['text':'*
     * Returns whether the specified namespace is <database>.system.resharding.<>.
     ','line_number':566,'multiline':True]
['text':'*
     * Returns whether the specified namespace is <database>.system.buckets.<>.
     ','line_number':571,'multiline':True]
['text':'*
     * Returns whether the specified namespace is config.system.preimages.
     ','line_number':576,'multiline':True]
['text':'*
     * Returns whether the specified namespace is config.system.changeCollection.
     ','line_number':581,'multiline':True]
['text':'*
     * Returns whether the specified namespace is config.image_collection.
     ','line_number':586,'multiline':True]
['text':'*
     * Returns whether the specified namespace is config.transactions.
     ','line_number':591,'multiline':True]
['text':'*
     * Returns whether the specified namespace is <database>.enxcol_.<.+>.(esc|ecc|ecoc).
     ','line_number':596,'multiline':True]
['text':'*
     * Returns true if the namespace is an oplog or a change collection, false otherwise.
     ','line_number':603,'multiline':True]
['text':'*
     * Returns true if the namespace is a system.statistics collection, false otherwise.
     ','line_number':608,'multiline':True]
['text':'*
     * Returns true if the collection starts with "system.buckets.tmp.agg_out". Used for $out to
     * time-series collections.
     ','line_number':613,'multiline':True]
['text':'*
     * Returns the time-series buckets namespace for this view.
     ','line_number':619,'multiline':True]
['text':'*
     * Returns the time-series view namespace for this buckets namespace.
     ','line_number':624,'multiline':True]
['text':'*
     * Returns whether the namespace is implicitly replicated, based only on its string value.
     *
     * An implicitly replicated namespace is an internal namespace which does not replicate writes
     * via the oplog, with the exception of deletions. Writes are not replicated as an optimization
     * because their content can be reliably derived from entries in the oplog.
     ','line_number':629,'multiline':True]
['text':'*
     * Returns whether a namespace is replicated, based only on its string value. One notable
     * omission is that map reduce `tmp.mr` collections may or may not be replicated. Callers must
     * decide how to handle that case separately.
     *
     * Note: This function considers "replicated" to be any namespace that should be timestamped.
     * Not all collections that are timestamped are replicated explicitly through the oplog.
     * Drop-pending collections are a notable example. Please use
     * ReplicationCoordinator::isOplogDisabledForNS to determine if a namespace gets logged in the
     * oplog.
     ','line_number':638,'multiline':True]
['text':'*
     * The namespace associated with some ClientCursors does not correspond to a particular
     * namespace. For example, this is true for listCollections cursors and $currentOp agg cursors.
     * Returns true if the namespace string is for a "collectionless" cursor.
     ','line_number':651,'multiline':True]
['text':'*
     * NOTE an aggregate could still refer to another collection using a stage like $out.
     ','line_number':660,'multiline':True]
['text':'*
     * Returns true if a client can modify this namespace even though it is under ".system."
     * For example <dbname>.system.users is ok for regular clients to update.
     ','line_number':666,'multiline':True]
['text':'*
     * Returns true if this namespace refers to a drop-pending collection.
     ','line_number':672,'multiline':True]
['text':'*
     * Returns true if operations on this namespace must be applied in their own oplog batch.
     ','line_number':677,'multiline':True]
['text':'*
     * Returns the drop-pending namespace name for this namespace, provided the given optime.
     *
     * Example:
     *     test.foo -> test.system.drop.<timestamp seconds>i<timestamp increment>t<term>.foo
     ','line_number':682,'multiline':True]
['text':'*
     * Returns the optime used to generate the drop-pending namespace.
     * Returns an error if this namespace is not drop-pending.
     ','line_number':690,'multiline':True]
['text':'*
     * Returns true if the namespace is valid. Special namespaces for internal use are considered as
     * valid.
     ','line_number':696,'multiline':True]
['text':'*
     * NamespaceString("foo.bar").getSisterNS("blah") returns "foo.blah".
     ','line_number':712,'multiline':True]
['text':'*
     * @return true if the ns is an oplog one, otherwise false.
     ','line_number':723,'multiline':True]
['text':'*
     * Takes a fully qualified namespace (ie dbname.collectionName), and returns true if
     * the collection name component of the namespace is valid.
     * samples:
     *   good:
     *      foo.bar
     *   bad:
     *      foo.
     *
     * @param ns - a full namespace (a.b)
     * @return if db.coll is an allowed collection name
     ','line_number':731,'multiline':True]
['text':'*
     * Takes a collection name and returns true if it is a valid collection name.
     * samples:
     *   good:
     *     foo
     *     system.views
     *   bad:
     *     $foo
     * @param coll - a collection name component of a namespace
     * @return if the input is a valid collection name
     ','line_number':745,'multiline':True]
['text':'*
     * Checks if a given tenant prefixes or matches the tenantId from this NamespaceString.
     * TODO SERVER-63517 Since we are removing tenant migration code we might be able to remove this
     * method from the codebase.
     ','line_number':771,'multiline':True]
['text':'*
     * Use to compare the TenantId and `db` part of a NamespaceString.
     ','line_number':783,'multiline':True]
['text':'*
     * In order to construct NamespaceString objects, use NamespaceStringUtil. The functions
     * on NamespaceStringUtil make assertions necessary when running in Serverless.
     ','line_number':827,'multiline':True]
['text':'*
     * Constructs a NamespaceString from the fully qualified namespace named in "ns" and the
     * tenantId. "ns" is NOT expected to contain the tenantId.
     ','line_number':832,'multiline':True]
['text':'*
     * Constructs a NamespaceString for the given database and collection names.
     * "dbName" must not contain a ".", and "collectionName" must not start with one.
     ','line_number':839,'multiline':True]
['text':'*
     * Constructs a NamespaceString for the given db name, collection name, and tenantId.
     * "db" must not contain a ".", and "collectionName" must not start with one. "db" is
     * NOT expected to contain a tenantId.
     ','line_number':862,'multiline':True]
['text':'*
     * Please refer to NamespaceStringUtil::serialize method or use ns_forTest to satisfy any unit
     * test needing access to ns().
     ','line_number':882,'multiline':True]
['text':'*
     * This method is deprecated and will be removed as part of SERVER-65456. We strongly
     * encourage to make the use of `dbName`, which returns a DatabaseName object instead.
     * In case you would need to a StringData object instead we strongly recommend taking a look
     * at the DatabaseNameUtil::serialize method which takes in a DatabaseName object.
     ','line_number':891,'multiline':True]
['text':' In order to reduce the size of a NamespaceString, we pack all possible namespace data','line_number':968,'multiline':False]
['text':' into a single std::string with the following in-memory layout:','line_number':969,'multiline':False]
['text':'','line_number':970,'multiline':False]
['text':'      1 byte         12 byte optional tenant id               remaining bytes','line_number':971,'multiline':False]
['text':'    discriminator       (see more below)                        namespace','line_number':972,'multiline':False]
['text':'  |<------------->|<--------------------------->|<-------------------------------------->|','line_number':973,'multiline':False]
['text':'  [---------------|----|----|----|----|----|----|----|----|----|----|----|----|----|----|]','line_number':974,'multiline':False]
['text':'  0               1                            12                                       ??','line_number':975,'multiline':False]
['text':'','line_number':976,'multiline':False]
['text':' The MSB of the discriminator tells us whether a tenant id is present, and the remaining','line_number':977,'multiline':False]
['text':' bits store the offset of end of the databaes component of the namespace. Database names','line_number':978,'multiline':False]
['text':' must be 64 characters or shorter, so we can be confident the length will fit in three bits.','line_number':979,'multiline':False]
['text':'*
 * This class is intented to be used by commands which can accept either a collection name or
 * database + collection UUID. It will never be initialized with both.
 ','line_number':984,'multiline':True]
['text':'*
     * Returns the database name.
     ','line_number':1015,'multiline':True]
['text':'*
     * This function should only be used when logging a NamespaceStringOrUUID in an error message.
     ','line_number':1026,'multiline':True]
['text':'*
     * Method to be used only when logging a NamespaceStringOrUUID in a log message.
     ','line_number':1031,'multiline':True]
['text':'*
 * "database.a.b.c" -> "database"
 ','line_number':1052,'multiline':True]
['text':'*
 * "database.a.b.c" -> "database"
 *
 * TODO: make this return a StringData
 ','line_number':1066,'multiline':True]
['text':'*
 * "database.a.b.c" -> "a.b.c"
 ','line_number':1075,'multiline':True]
['text':'*
 * foo = false
 * foo. = false
 * foo.a = true
 ','line_number':1084,'multiline':True]
['text':' Here are the `constexpr` definitions for the `NamespaceString::ConstantProxy`','line_number':1132,'multiline':False]
['text':' constant static data members of `NamespaceString`. They cannot be defined','line_number':1133,'multiline':False]
['text':' `constexpr` inside the class definition, but they can be upgraded to','line_number':1134,'multiline':False]
['text':' `constexpr` here below it. Each one needs to be initialized with the address','line_number':1135,'multiline':False]
['text':' of their associated shared state, so those are all defined first, as','line_number':1136,'multiline':False]
['text':' variables named by the same `id`, but in separate nested namespace.','line_number':1137,'multiline':False]
['text':' IWYU pragma: keep','line_number':1141,'multiline':False]
['text':' namespace nss_detail::const_proxy_shared_states','line_number':1144,'multiline':False]
['text':' IWYU pragma: keep','line_number':1149,'multiline':False]
['text':' namespace mongo','line_number':1153,'multiline':False]
