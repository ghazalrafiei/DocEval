['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' IWYU pragma: no_include "boost/intrusive/detail/iterator.hpp"','line_number':39,'multiline':False]
['text':' This failpoint simulates a WriteConflictException during createIndexes where the collection is','line_number':115,'multiline':False]
['text':' implicitly created.','line_number':116,'multiline':False]
['text':' This failpoint causes createIndexes with an implicit collection creation to hang before the','line_number':119,'multiline':False]
['text':' collection is created.','line_number':120,'multiline':False]
['text':' This failpoint hangs between logging the index build UUID and starting the index build','line_number':125,'multiline':False]
['text':' through the IndexBuildsCoordinator.','line_number':126,'multiline':False]
['text':'*
 * Appends 'message' to the 'note' component of the response.
 ','line_number':139,'multiline':True]
['text':' setNote() will internally make its own copy.','line_number':145,'multiline':False]
['text':'*
 * Parses the index specifications from 'cmd', validates them, and returns equivalent index
 * specifications. If any index specification is malformed, then an error status is returned.
 ','line_number':149,'multiline':True]
['text':'*
 * Ensures that the options passed in for TTL indexes are valid.
 ','line_number':193,'multiline':True]
['text':' this collection is not encrypted','line_number':223,'multiline':False]
['text':' Create the FieldRefs for each encrypted field.','line_number':230,'multiline':False]
['text':' Do not allow TTL indexes on encrypted collections because automatic','line_number':239,'multiline':False]
['text':' deletion of encrypted documents would require the deletion tokens','line_number':240,'multiline':False]
['text':' for each encrypted field, which the server does not have.','line_number':241,'multiline':False]
['text':' Do not allow indexes on encrypted fields, or prefixes of encrypted fields.','line_number':246,'multiline':False]
['text':'*
 * Checks whether the command attempts to create a columnstore index, and if so, adds a "note" to
 * the response indicating that columnstore indexes are a preview feature.
 ','line_number':259,'multiline':True]
['text':'*
 * Retrieves the commit quorum from 'cmdObj' if it is present. If it isn't, we provide a default
 * commit quorum, which consists of all the data-bearing nodes.
 ','line_number':275,'multiline':True]
['text':' Setting CommitQuorum to 0 will make the index build to opt out of voting proces.','line_number':298,'multiline':False]
['text':'*
 * Returns a vector of index specs with the filled in collection default options and removes any
 * indexes that already exist on the collection -- both ready indexes and in-progress builds. If the
 * returned vector is empty after returning, no new indexes need to be built. Throws on error.
 ','line_number':307,'multiline':True]
['text':' Normalize the specs' collations, wildcard projections, and partial filters as applicable.','line_number':315,'multiline':False]
['text':'removeIndexBuildsToo','line_number':319,'multiline':True]
['text':'*
 * Returns true, after filling in the command result, if the index creation can return early.
 ','line_number':322,'multiline':True]
['text':' Only collections that are not registered in the sharding catalog are affected by','line_number':350,'multiline':False]
['text':' movePrimary','line_number':351,'multiline':False]
['text':'*
 * Attempts to create indexes in `specs` on a non-existent collection (or empty collection created
 * in the same multi-document transaction) with namespace `ns`. In the former case, the collection
 * is implicitly created.
 *
 * The output is added to the 'reply' out argument.
 *
 * Expects to be run at the end of a larger writeConflictRetry loop.
 ','line_number':369,'multiline':True]
['text':' We need to create the collection.','line_number':395,'multiline':False]
['text':' Simulate a scenario where a conflicting collection creation occurs','line_number':403,'multiline':False]
['text':' mid-index build.','line_number':404,'multiline':False]
['text':' TODO (SERVER-77915): Remove once 8.0 becomes last LTS.','line_number':411,'multiline':False]
['text':' TODO (SERVER-82066): Update handling for direct connections.','line_number':412,'multiline':False]
['text':' TODO (SERVER-81937): Update handling for transactions.','line_number':413,'multiline':False]
['text':' By this point, we have exclusive access to our collection, either because we created the','line_number':436,'multiline':False]
['text':' collection implicitly as part of createIndexes or because the collection was created earlier','line_number':437,'multiline':False]
['text':' in the same multi-document transaction.','line_number':438,'multiline':False]
['text':' It's possible for 'filteredSpecs' to be empty if we receive a createIndexes request for the','line_number':452,'multiline':False]
['text':' _id index and also create the collection implicitly. By this point, the _id index has already','line_number':453,'multiline':False]
['text':' been created, and there is no more work to be done.','line_number':454,'multiline':False]
['text':' Disallow users from creating new indexes on config.transactions since the sessions code','line_number':487,'multiline':False]
['text':' was optimized to not update indexes. The only exception is the partial index used to support','line_number':488,'multiline':False]
['text':' retryable transactions that the sessions code knows how to handle.','line_number':489,'multiline':False]
['text':' Two phase index builds are designed to improve the availability of indexes in a replica set.','line_number':505,'multiline':False]
['text':' Preliminary checks before handing control over to IndexBuildsCoordinator:','line_number':514,'multiline':False]
['text':' 1) We are in a replication mode that allows for index creation.','line_number':515,'multiline':False]
['text':' 2) Check sharding state.','line_number':516,'multiline':False]
['text':' 3) Check if we can create the index without handing control to the IndexBuildsCoordinator.','line_number':517,'multiline':False]
['text':' 4) Check we are not in a multi-document transaction.','line_number':518,'multiline':False]
['text':' 5) Check there is enough available disk space to start the index build.','line_number':519,'multiline':False]
['text':' Before potentially taking an exclusive collection lock, check if all indexes already','line_number':543,'multiline':False]
['text':' exist while holding an intent lock.','line_number':544,'multiline':False]
['text':' The collection exists and was not created in the same multi-document transaction','line_number':552,'multiline':False]
['text':' as the createIndexes.','line_number':553,'multiline':False]
['text':' No need to proceed if the index either already existed or has just been built.','line_number':563,'multiline':False]
['text':' If the index does not exist by this point, the index build must go through the index builds','line_number':567,'multiline':False]
['text':' coordinator and take an exclusive lock. We should not take exclusive locks inside of','line_number':568,'multiline':False]
['text':' transactions, so we fail early here if we are inside of a transaction.','line_number':569,'multiline':False]
['text':' Use AutoStatsTracker to update Top.','line_number':580,'multiline':False]
['text':' Throws on error.','line_number':619,'multiline':False]
['text':' If this node is no longer a primary, the index build will continue to run in the','line_number':628,'multiline':False]
['text':' background and will complete when this node receives a commitIndexBuild oplog','line_number':629,'multiline':False]
['text':' entry from the new primary.','line_number':630,'multiline':False]
['text':' The index build may already be in the midst of tearing down.','line_number':644,'multiline':False]
['text':' It is unclear whether the interruption originated from the current opCtx instance','line_number':663,'multiline':False]
['text':' for the createIndexes command or that the IndexBuildsCoordinator task was interrupted','line_number':664,'multiline':False]
['text':' independently of this command invocation. We'll defensively abort the index build','line_number':665,'multiline':False]
['text':' with the assumption that if the index build was already in the midst of tearing down,','line_number':666,'multiline':False]
['text':' this will be a no-op.','line_number':667,'multiline':False]
['text':' The current OperationContext may be interrupted, which would prevent us from','line_number':669,'multiline':False]
['text':' taking locks. Use a new OperationContext to abort the index build.','line_number':670,'multiline':False]
['text':' The index build may already be in the midst of tearing down.','line_number':685,'multiline':False]
['text':' If the collection is dropped after the initial checks in this function (before the','line_number':696,'multiline':False]
['text':' AutoStatsTracker is created), the IndexBuildsCoordinator (either startIndexBuild() or','line_number':697,'multiline':False]
['text':' the the task running the index build) may return NamespaceNotFound. This is not','line_number':698,'multiline':False]
['text':' considered an error and the command should return success.','line_number':699,'multiline':False]
['text':' All other errors should be forwarded to the caller with index build information included.','line_number':718,'multiline':False]
['text':' Set last op on error to provide the client with a specific optime to read the state of','line_number':723,'multiline':False]
['text':' the server when the createIndexes command failed.','line_number':724,'multiline':False]
['text':' IndexBuildsCoordinator may write the createIndexes oplog entry on a different thread.','line_number':730,'multiline':False]
['text':' The current client's last op should be synchronized with the oplog to ensure consistent','line_number':731,'multiline':False]
['text':' getLastError results as the previous non-IndexBuildsCoordinator behavior.','line_number':732,'multiline':False]
['text':'*
 * { createIndexes : "bar",
 *   indexes : [ { ns : "test.bar", key : { x : 1 }, name: "x_1" } ],
 *   commitQuorum: "majority" }
 *
 * commitQuorum specifies which or how many replica set members must be ready to commit before the
 * primary will commit the index. The same values can be used for commitQuorum as writeConcern, with
 * the addition of 'votingMembers', the default. It is used to ensure secondaries can commit indexes
 * quickly, minimizing replication lag (secondaries block replication on receipt of commitIndexBuild
 * while completing the associated index). Note that commitQuorum is NOT like writeConcern: there is
 * no guarantee that indexes on secondaries are ready for use after the command returns.
 ','line_number':741,'multiline':True]
['text':' If the request namespace refers to a time-series collection, transforms the user','line_number':781,'multiline':False]
['text':' time-series index request to one on the underlying bucket.','line_number':782,'multiline':False]
['text':' If we encounter an IndexBuildAlreadyInProgress error for any of the requested index','line_number':793,'multiline':False]
['text':' specs, then we will wait for the build(s) to finish before trying again unless we are','line_number':794,'multiline':False]
['text':' in a multi-document transaction.','line_number':795,'multiline':False]
['text':' We can only wait for an existing index build to finish if we are able to','line_number':802,'multiline':False]
['text':' release our locks, in order to allow the existing index build to proceed. We','line_number':803,'multiline':False]
['text':' cannot release locks in transactions, so we bypass the below logic in','line_number':804,'multiline':False]
['text':' transactions.','line_number':805,'multiline':False]
['text':' Reset the snapshot because we have released locks and need a fresh snapshot','line_number':820,'multiline':False]
['text':' if we reacquire the locks again later.','line_number':821,'multiline':False]
['text':' This is a bit racy since we are not holding a lock across discovering an','line_number':823,'multiline':False]
['text':' in-progress build and starting to listen for completion. It is good enough,','line_number':824,'multiline':False]
['text':' however: we can only wait longer than needed, not less.','line_number':825,'multiline':False]
['text':' namespace','line_number':846,'multiline':False]
['text':' namespace mongo','line_number':847,'multiline':False]
