['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' IWYU pragma: keep','line_number':34,'multiline':False]
['text':'*
 * Test-only command for modifying installed fail points.
 *
 * Requires the 'enableTestCommands' server parameter to be set. See docs/test_commands.md.
 *
 * Format
 * {
 *    configureFailPoint: <string>, // name of the fail point.
 *
 *    mode: <string|Object>, // the new mode to set. Can have one of the following format:
 *
 *        - 'off' - disable fail point.
 *
 *        - 'alwaysOn' - fail point is always active.
 *
 *        - { activationProbability: <n> } - double n. [0 <= n <= 1]
 *          n: the probability that the fail point will fire.  0=never, 1=always.
 *
 *        - { times: <n> } - int32 n. n > 0. n: # of passes the fail point remains active.
 *
 *        - { skip: <n> } - int32 n. n > 0. n: # of passes before the fail point activates
 *          and remains active.
 *
 *    data: <Object> // optional arbitrary object to inject into the failpoint.
 *        When activated, the FailPoint can read this data and it can be used to inform
 *        the specific action taken by the code under test.
 * }
 ','line_number':52,'multiline':True]
['text':' No auth needed because it only works when enabled via command line.','line_number':100,'multiline':False]
['text':'*
 * Command for waiting for installed fail points.
 *
 * For number of additional times entered > 1, this command is only guaranteed to work
 * correctly if the code that enters the fail point uses the FailPoint API correctly.
 * That is, the code can only use one of shouldFail, pauseWhileSet, scopedIf, scoped,
 * executeIf, and execute to enter the fail point (as all of these functions have side
 * effects on the counter for times entered).
 ','line_number':126,'multiline':True]
['text':' The command parameter happens to be string so it's historically been interpreted','line_number':155,'multiline':False]
['text':' by parseNs as a collection. Continuing to do so here for unexamined compatibility.','line_number':156,'multiline':False]
['text':' No auth needed because it only works when enabled via command line.','line_number':161,'multiline':False]
['text':' namespace mongo','line_number':184,'multiline':False]
