['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 * ServerStatusMetricField is the generic class for storing and reporting server
 * status metrics.
 * Its recommended usage is through the addMetricToTree helper function. Here is an
 * example of a ServerStatusMetricField holding a Counter64.
 * Note that the metric is a reference.
 *
 * auto& metric =
 *      addMetricToTree("path.to.counter", std::make_unique<ServerStatusMetricField<Counter64>>());
 *      ...
 *      metric.value().increment();
 *
 * Or with `makeServerStatusMetric`:
 *
 *     auto& counter = makeServerStatusMetric<Counter64>("path.to.counter");
 *     ...
 *     counter.increment();
 *
 * To read the metric from JavaScript:
 *      db.serverStatus().metrics.path.to.counter
 ','line_number':58,'multiline':True]
['text':'*
     * If the predicate has been set, is is consulted when appending the metric.
     * If it evaluates to false, the metric is not appended.
     ','line_number':86,'multiline':True]
['text':'*
 * Metrics are organized as a tree by dot-delimited paths.
 * If path starts with `.`, it will be stripped and the path will be treated
 * as being directly under the root.
 * Otherwise, it will appear under the "metrics" subtree.
 * Examples:
 *     tree.add(".foo.m1", m1);  // m1 appears as "foo.m1"
 *     tree.add("foo.m2", m2);   // m2 appears as "metrics.foo.m2"
 *
 * The `role` is used to disambiguate collisions.
 ','line_number':105,'multiline':True]
['text':'* Can hold either a subtree or a metric. ','line_number':118,'multiline':True]
['text':'* Make a metric that only appends itself when `predicate` is true. ','line_number':177,'multiline':True]
['text':'*
 * Write a merger of the `trees` to `b`, under field `name`. `excludePaths` is a
 * BSON tree of Bool, specifying `false` for subtrees that are to be omitted
 * from the results.
 ','line_number':185,'multiline':True]
['text':'* Replicates the public interface of Counter64. ','line_number':194,'multiline':True]
['text':'*
 * Leverage `synchronized_value<T>` to make a thread-safe `T` metric, for `T`
 * that are not intrinsically thread-safe (e.g. string, int).
 * T must be usable as an argument to `BSONObjBuilder::append`.
 ','line_number':227,'multiline':True]
['text':'*
 * Make a `synchronized_value<T>`-backed metric.
 * Example (note the auto& reference):
 *
 *     auto& currSize = makeSynchronizedMetric<long long>("some.path.size");
 *     currSize = message.size();
 *
 *     auto& currName = makeSynchronizedMetric<std::string>("some.path.name");
 *     currName = message.size();
 ','line_number':247,'multiline':True]
['text':' namespace mongo','line_number':262,'multiline':False]
