['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' IWYU pragma: keep','line_number':63,'multiline':False]
['text':' privileges may come in with non-unique ResourcePatterns.','line_number':177,'multiline':False]
['text':' Make a local copy so that ActionSets are merged.','line_number':178,'multiline':False]
['text':'*
 * Used to get all current roles of the user identified by 'userName'.
 ','line_number':185,'multiline':True]
['text':'*
 * Checks that every role in "rolesToAdd" exists, that adding each of those roles to "role"
 * will not result in a cycle to the role graph, and that every role being added comes from the
 * same database as the role it is being added to (or that the role being added to is from the
 * "admin" database.
 ','line_number':205,'multiline':True]
['text':'*
 * Checks that every privilege being granted targets just the database the role is from, or that
 * the role is from the "admin" db.
 ','line_number':251,'multiline':True]
['text':'*
 * Inserts "document" into "collectionName".
 * If there is a duplicate key error, returns a Status with code DuplicateKey.
 *
 * Should only be called on collections with authorization documents in them
 * (ie admin.system.users and admin.system.roles).
 ','line_number':292,'multiline':True]
['text':' The sc is used to control serialization behavior executed on the request in client.insert,','line_number':304,'multiline':False]
['text':' and tenantIds should not be prefixed on the $db field.  Indicating that the request received','line_number':305,'multiline':False]
['text':' a tenantId from something other than a prefix, in this case the nss, will prevent prefixing.','line_number':306,'multiline':False]
['text':'*
 * Updates documents matching "query" according to "updatePattern" in "collectionName".
 *
 * Should only be called on collections with authorization documents in them
 * (ie admin.system.users and admin.system.roles).
 ','line_number':318,'multiline':True]
['text':' The sc is used to control serialization behavior executed on the request in client.update,','line_number':332,'multiline':False]
['text':' and tenantIds should not be prefixed on the $db field.  Indicating that the request received','line_number':333,'multiline':False]
['text':' a tenantId from something other than a prefix, in this case the nss, will prevent prefixing.','line_number':334,'multiline':False]
['text':'*
 * Update one document matching "query" according to "updatePattern" in "collectionName".
 *
 * If "upsert" is true and no document matches "query", inserts one using "query" as a
 * template.
 * If "upsert" is false and no document matches "query", return a Status with the code
 * NoMatchingDocument.  The Status message in that case is not very descriptive and should
 * not be displayed to the end user.
 *
 * Should only be called on collections with authorization documents in them
 * (ie admin.system.users and admin.system.roles).
 ','line_number':358,'multiline':True]
['text':'*
 * Removes all documents matching "query" from "collectionName".
 *
 * Should only be called on collections with authorization documents in them
 * (ie admin.system.users and admin.system.roles).
 ','line_number':390,'multiline':True]
['text':' The sc is used to control serialization behavior executed on the request in client.remove,','line_number':401,'multiline':False]
['text':' and tenantIds should not be prefixed on the $db field.  Indicating that the request received','line_number':402,'multiline':False]
['text':' a tenantId from something other than a prefix, in this case the nss, will prevent prefixing.','line_number':403,'multiline':False]
['text':'*
 * Creates the given role object in the given database.
 ','line_number':425,'multiline':True]
['text':'*
 * Updates the given role object with the given update modifier.
 ','line_number':446,'multiline':True]
['text':'*
 * Removes roles matching the given query.
 * Writes into *numRemoved the number of role documents that were modified.
 ','line_number':468,'multiline':True]
['text':'*
 * Creates the given user object in the given database.
 ','line_number':479,'multiline':True]
['text':'*
 * Updates the given user object with the given update modifier.
 ','line_number':502,'multiline':True]
['text':' Minimum fields required for an update.','line_number':509,'multiline':False]
['text':'*
 * Convenience wrapper for above using only the UserName to match the original document.
 * Clarifies NoMatchingDocument result to reflect the user not existing.
 ','line_number':523,'multiline':True]
['text':'*
 * Removes users for the given database matching the given query.
 * Writes into *numRemoved the number of user documents that were modified.
 ','line_number':538,'multiline':True]
['text':'*
 * Updates the auth schema version document to reflect the current state of the system.
 * 'foundSchemaVersion' is the authSchemaVersion to update with.
 ','line_number':549,'multiline':True]
['text':' upsert','line_number':561,'multiline':False]
['text':' SERVER-11492','line_number':563,'multiline':False]
['text':'*
 * Returns Status::OK() if the current Auth schema version is at least the auth schema version
 * for the MongoDB 3.0 SCRAM auth mode.
 * Returns an error otherwise.
 ','line_number':611,'multiline':True]
['text':' We take a MODE_X lock during writes because we want to be sure that we can read any pinned','line_number':619,'multiline':False]
['text':' user documents back out of the database after writing them during the user management','line_number':620,'multiline':False]
['text':' commands, and to ensure only one user management command is running at a time.','line_number':621,'multiline':False]
['text':'*
 * Returns Status::OK() if the current Auth schema version is at least the auth schema version
 * for MongoDB 2.6 during the upgrade process.
 * Returns an error otherwise.
 *
 * This method should only be called by READ-ONLY commands (usersInfo & rolesInfo)
 * because getAuthorizationVersion() will return the current max version without
 * reifying the authSchema setting in the admin database.
 *
 * If records are added thinking we're at one schema level, then the default is changed,
 * then the auth database would wind up in an inconsistent state.
 ','line_number':644,'multiline':True]
['text':' Must be external user.','line_number':679,'multiline':False]
['text':' Add SCRAM-SHA-1 credentials.','line_number':711,'multiline':False]
['text':'*
 * Handler for performing transaction guarded updates to the auth collections.
 *
 * UMCTransaction::commit() must be called after setting up operations,
 * or the transaction will be aborted on scope exit.
 ','line_number':788,'multiline':True]
['text':' Don't transactionalize on standalone.','line_number':803,'multiline':False]
['text':' Subclient used by transaction operations.','line_number':805,'multiline':False]
['text':' Note: We allow the client to be killable. We only make an operation context on this','line_number':812,'multiline':False]
['text':' client during runCommand, and that operation context is short-lived. If we get','line_number':813,'multiline':False]
['text':' interrupted during that operation context's life, we will fail the transaction.','line_number':814,'multiline':False]
['text':' Append logical session (transaction) metadata.','line_number':932,'multiline':False]
['text':' Set a default apiVersion for all UMC commands','line_number':936,'multiline':False]
['text':' Switch to our local client and create a short-lived opCtx for this transaction op.','line_number':944,'multiline':False]
['text':' Dedupe','line_number':970,'multiline':False]
['text':' Trim last comma off.','line_number':986,'multiline':False]
['text':' Used by most UMC commands.','line_number':999,'multiline':False]
['text':' Used by {usersInfo:...} and {rolesInfo:...}','line_number':1008,'multiline':False]
['text':' Used by {invalidateUserCache:...}','line_number':1017,'multiline':False]
['text':' Used by {_getUserCacheGeneration:...}','line_number':1026,'multiline':False]
['text':' Since the user management commands do not affect user data, we should allow these commands','line_number':1099,'multiline':False]
['text':' even if the user does not have the direct shard operations action type.','line_number':1100,'multiline':False]
['text':' Validate input','line_number':1122,'multiline':False]
['text':' clusterExtensionValue ','line_number':1151,'multiline':True]
['text':' Synthesize a user document','line_number':1165,'multiline':False]
['text':' Validate contents','line_number':1195,'multiline':False]
['text':' Role existence has to be checked after acquiring the update lock','line_number':1198,'multiline':False]
['text':' Audit this event.','line_number':1201,'multiline':False]
['text':' Must invalidate even on bad status','line_number':1214,'multiline':False]
['text':' Create the update filter (query) object.','line_number':1240,'multiline':False]
['text':' Create set/update mutators.','line_number':1245,'multiline':False]
['text':' Merge set/update builders into a single update document.','line_number':1286,'multiline':False]
['text':' Role existence has to be checked after acquiring the update lock','line_number':1300,'multiline':False]
['text':' Audit this event.','line_number':1306,'multiline':False]
['text':' Must invalidate even on bad status - what if the write succeeded but the GLE failed?','line_number':1322,'multiline':False]
['text':' Must invalidate even on bad status - what if the write succeeded but the GLE failed?','line_number':1346,'multiline':False]
['text':' Must invalidate even on bad status - what if the write succeeded but the GLE failed?','line_number':1375,'multiline':False]
['text':' Must invalidate even on bad status - what if the write succeeded but the GLE failed?','line_number':1413,'multiline':False]
['text':' Must invalidate even on bad status - what if the write succeeded but the GLE failed?','line_number':1448,'multiline':False]
['text':' Exact-match usersInfo queries can be optimized to utilize the user cache if custom data','line_number':1470,'multiline':False]
['text':' can be omitted. This is especially helpful when config servers execute exact-match','line_number':1471,'multiline':False]
['text':' usersInfo queries on behalf of mongoses gathering roles + privileges for recently','line_number':1472,'multiline':False]
['text':' authenticated users.','line_number':1473,'multiline':False]
['text':' getUserDescription always includes credentials and restrictions, which may need','line_number':1483,'multiline':False]
['text':' to be stripped out','line_number':1484,'multiline':False]
['text':' Custom data is not required in the output, so it can be generated from a cached','line_number':1509,'multiline':False]
['text':' user object.','line_number':1510,'multiline':False]
['text':' The returned User object will need to be marshalled back into a BSON document and','line_number':1518,'multiline':False]
['text':' stripped of credentials and restrictions if they were not explicitly requested.','line_number':1519,'multiline':False]
['text':' If you don't need privileges, or authenticationRestrictions, you can just do a','line_number':1531,'multiline':False]
['text':' regular query on system.users','line_number':1532,'multiline':False]
['text':' Leave the pipeline unconstrained, we want to return every user.','line_number':1536,'multiline':False]
['text':' Order results by user field then db field, matching how UserNames are ordered','line_number':1550,'multiline':False]
['text':' Rewrite the credentials object into an array of its fieldnames.','line_number':1553,'multiline':False]
['text':' Authentication restrictions are only rendered in the single user case.','line_number':1563,'multiline':False]
['text':' Remove credentials as well, they're not required in the output.','line_number':1567,'multiline':False]
['text':' Remove customData as well, it's not required in the output.','line_number':1571,'multiline':False]
['text':' Handle a user specified filter.','line_number':1576,'multiline':False]
['text':' Impose no cursor privilege requirements, as cursor is drained internally','line_number':1585,'multiline':False]
['text':'isExhaust','line_number':1599,'multiline':True]
['text':' Role existence has to be checked after acquiring the update lock','line_number':1661,'multiline':False]
['text':' Role existence has to be checked after acquiring the update lock','line_number':1719,'multiline':False]
['text':' Must invalidate even on bad status - what if the write succeeded but the GLE failed?','line_number':1747,'multiline':False]
['text':' Add additional privileges to existing set.','line_number':1778,'multiline':False]
['text':' Build up update modifier object to $set privileges.','line_number':1786,'multiline':False]
['text':' Must invalidate even on bad status - what if the write succeeded but the GLE failed?','line_number':1800,'multiline':False]
['text':' Build up update modifier object to $set privileges.','line_number':1844,'multiline':False]
['text':' Must invalidate even on bad status - what if the write succeeded but the GLE failed?','line_number':1858,'multiline':False]
['text':' Check for cycles','line_number':1885,'multiline':False]
['text':' Add new roles to existing roles','line_number':1888,'multiline':False]
['text':' Must invalidate even on bad status - what if the write succeeded but the GLE failed?','line_number':1898,'multiline':False]
['text':' Remove roles from existing set.','line_number':1925,'multiline':False]
['text':' Must invalidate even on bad status - what if the write succeeded but the GLE failed?','line_number':1937,'multiline':False]
['text':'*
 * Attempt to complete a transaction, retrying up to two times (3 total attempts).
 * Emit an audit entry prior to the first commit attempt,
 * but do not repeat the audit entry for retries.
 ','line_number':1942,'multiline':True]
['text':' In practice this status never makes it to a return','line_number':1959,'multiline':False]
['text':' since its populated with the return from ops(),','line_number':1960,'multiline':False]
['text':' but guard against bit-rot by pre-populating a generic failure.','line_number':1961,'multiline':False]
['text':' Be more patient with our test runner which is likely to be','line_number':1964,'multiline':False]
['text':' doing aggressive reelections and failovers and replication shenanigans.','line_number':1965,'multiline':False]
['text':' Emit log on all but the first attempt.','line_number':1970,'multiline':False]
['text':' Only emit audit on first attempt.','line_number':1988,'multiline':False]
['text':' Success, see ya later!','line_number':1994,'multiline':False]
['text':' Try to responsibly abort, but accept not being able to.','line_number':1998,'multiline':False]
['text':' From here on, we always want to invalidate the user cache before returning.','line_number':2027,'multiline':False]
['text':' Remove this role from all users','line_number':2037,'multiline':False]
['text':' Remove this role from all other roles','line_number':2047,'multiline':False]
['text':' Finally, remove the actual role document','line_number':2057,'multiline':False]
['text':' From here on, we always want to invalidate the user cache before returning.','line_number':2088,'multiline':False]
['text':' Remove these roles from all users','line_number':2103,'multiline':False]
['text':' Remove these roles from all other roles','line_number':2113,'multiline':False]
['text':' Finally, remove the actual role documents','line_number':2124,'multiline':False]
['text':'*
 * Provides information about one or more roles, the indirect roles they are members of, and
 * optionally the privileges they provide.
 *
 * This command accepts the following arguments:
 * rolesInfo:
 *   (String) Returns information about a single role on the current database.
 *   {role: (String), db: (String)} Returns information about a specified role, on a specific db
 *   (BooleanTrue) Returns information about all roles in this database
 *   [ //Zero or more of
 *     {role: (String), db: (String) ] Returns information about all specified roles
 *
 * showBuiltinRoles:
 *   (Boolean) If true, and rolesInfo == (BooleanTrue), include built-in roles from the database
 *
 * showPrivileges:
 *   (BooleanFalse) Do not show information about privileges
 *   (BooleanTrue) Attach all privileges inherited from roles to role descriptions
 *   "asUserFragment" Render results as a partial user document as-if a user existed which possessed
 *                    these roles. This format may change over time with changes to the auth schema.
 ','line_number':2150,'multiline':True]
['text':' Only usersInfo actually supports {forAllDBs: 1} mode.','line_number':2182,'multiline':False]
['text':'*
 * This command is used only by mongorestore to handle restoring users/roles.  We do this so
 * that mongorestore doesn't do direct inserts into the admin.system.users and
 * admin.system.roles, which would bypass the authzUpdateLock and allow multiple concurrent
 * modifications to users/roles.  What mongorestore now does instead is it inserts all user/role
 * definitions it wants to restore into temporary collections, then this command moves those
 * user/role definitions into their proper place in admin.system.users and admin.system.roles.
 * It either adds the users/roles to the existing ones or replaces the existing ones, depending
 * on whether the "drop" argument is true or false.
 ','line_number':2248,'multiline':True]
['text':' TODO (SERVER-TBD) Support mergeAuthzCollections in multitenancy','line_number':2290,'multiline':False]
['text':'*
 * Audits the fact that we are creating or updating the user described by userObj.
 ','line_number':2314,'multiline':True]
['text':'*
 * Designed to be used as a callback to be called on every user object in the result
 * set of a query over the tempUsersCollection provided to the command.  For each user
 * in the temp collection that is defined on the given db, adds that user to the actual
 * admin.system.users collection.
 * Also removes any users it encounters from the usersToDrop set.
 ','line_number':2354,'multiline':True]
['text':' Match the behavior of mongorestore to continue on failure','line_number':2376,'multiline':False]
['text':' Match the behavior of mongorestore to continue on failure','line_number':2386,'multiline':False]
['text':'*
 * Finds all documents matching "query" in "collectionName".  For each document returned,
 * calls the function resultProcessor on it.
 * Should only be called on collections with authorization documents in them
 * (ie admin.system.users and admin.system.roles).
 ','line_number':2397,'multiline':True]
['text':' The sc is used to control serialization behavior executed on the request in client.find, and','line_number':2410,'multiline':False]
['text':' tenantIds should not be prefixed on the $db field.  Indicating that the request received a','line_number':2411,'multiline':False]
['text':' tenantId from something other than a prefix, in this case the nss, will prevent prefixing.','line_number':2412,'multiline':False]
['text':'*
 * Moves all user objects from usersCollName into admin.system.users.  If drop is true,
 * removes any users that were in admin.system.users but not in usersCollName.
 ','line_number':2427,'multiline':True]
['text':' When the "drop" argument has been provided, we use this set to store the users','line_number':2437,'multiline':False]
['text':' that are currently in the system, and remove from it as we encounter','line_number':2438,'multiline':False]
['text':' same-named users in the collection we are restoring from.  Once we've fully','line_number':2439,'multiline':False]
['text':' moved over the temp users collection into its final location, we drop','line_number':2440,'multiline':False]
['text':' any users that previously existed there but weren't in the temp collection.','line_number':2441,'multiline':False]
['text':' This is so that we can completely replace the system.users','line_number':2442,'multiline':False]
['text':' collection with the users from the temp collection, without removing all','line_number':2443,'multiline':False]
['text':' users at the beginning and thus potentially locking ourselves out by having','line_number':2444,'multiline':False]
['text':' no users in the whole system for a time.','line_number':2445,'multiline':False]
['text':' Create map of the users currently in the DB','line_number':2449,'multiline':False]
['text':'*
 * Audits the fact that we are creating or updating the role described by roleObj.
 ','line_number':2485,'multiline':True]
['text':'*
 * Designed to be used as a callback to be called on every role object in the result
 * set of a query over the tempRolesCollection provided to the command.  For each role
 * in the temp collection that is defined on the given db, adds that role to the actual
 * admin.system.roles collection.
 * Also removes any roles it encounters from the rolesToDrop set.
 ','line_number':2514,'multiline':True]
['text':' Match the behavior of mongorestore to continue on failure','line_number':2536,'multiline':False]
['text':' Match the behavior of mongorestore to continue on failure','line_number':2546,'multiline':False]
['text':'*
 * Moves all user objects from usersCollName into admin.system.users.  If drop is true,
 * removes any users that were in admin.system.users but not in usersCollName.
 ','line_number':2556,'multiline':True]
['text':' When the "drop" argument has been provided, we use this set to store the roles','line_number':2566,'multiline':False]
['text':' that are currently in the system, and remove from it as we encounter','line_number':2567,'multiline':False]
['text':' same-named roles in the collection we are restoring from.  Once we've fully','line_number':2568,'multiline':False]
['text':' moved over the temp roles collection into its final location, we drop','line_number':2569,'multiline':False]
['text':' any roles that previously existed there but weren't in the temp collection.','line_number':2570,'multiline':False]
['text':' This is so that we can completely replace the system.roles','line_number':2571,'multiline':False]
['text':' collection with the roles from the temp collection, without removing all','line_number':2572,'multiline':False]
['text':' roles at the beginning and thus potentially locking ourselves out.','line_number':2573,'multiline':False]
['text':' Create map of the roles currently in the DB','line_number':2577,'multiline':False]
['text':' From here on, we always want to invalidate the user cache before returning.','line_number':2626,'multiline':False]
['text':' namespace','line_number':2641,'multiline':False]
['text':' namespace mongo','line_number':2642,'multiline':False]
