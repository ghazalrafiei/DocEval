['text':'*
 *    Copyright (C) 2022-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 * QE cleanup is similar to QE compact in that it also performs "compaction" of the
 * ESC collection by removing stale ESC non-anchors. Unlike compact, cleanup also removes
 * stale ESC anchors. It also differs from compact in that instead of inserting "anchors"
 * to the ESC, cleanup only inserts or updates "null" anchors.
 *
 * At a high level, the cleanup algorithm works as follows:
 * 1. The _ids of random ESC non-anchors are first read into an in-memory set 'P'.
 * 2. (*) an in-memory priority queue 'PQ' is created. This will contain the _ids of
 *    anchor documents that cleanup will remove towards the end of the operation.
 * 3. The ECOC is renamed to a temporary namespace (hereby referred to as 'ecoc.compact').
 * 4. Unique entries from 'ecoc.compact' are decoded into an in-memory set of tokens: 'C'.
 * 5. For each token in 'C', the following is performed:
 *    a. Start a transaction
 *    b. Run EmuBinary to collect the latest anchor and non-anchor positions for the current token.
 *    c. (*) Insert (or update an existing) null anchor which encodes the latest positions.
 *    d. (*) If there are anchors corresponding to the current token, insert their _ids
 *       into 'PQ'. These anchors are now stale and are marked for deletion.
 *    e. Commit transaction
 * 6. Delete every document in the ESC whose _id can be found in 'P'
 * 7. (*) Delete every document in the ESC whose _id can be found in 'PQ'
 * 8. Drop 'ecoc.compact'
 *
 * Steps marked with (*) are unique to the cleanup operation.
 ','line_number':118,'multiline':True]
['text':' Since this command holds an IX lock on the DB and the global lock throughout','line_number':161,'multiline':False]
['text':' the lifetime of this operation, setFCV should not be allowed to abort the transaction','line_number':162,'multiline':False]
['text':' performing the cleanup. Otherwise, on retry, the transaction may attempt to','line_number':163,'multiline':False]
['text':' acquire the global lock in IX mode, while setFCV is already waiting to acquire it','line_number':164,'multiline':False]
['text':' in S mode, causing a deadlock.','line_number':165,'multiline':False]
['text':' Validate the request and acquire the relevant namespaces','line_number':177,'multiline':False]
['text':' Check the data collection exists and is not a view','line_number':182,'multiline':False]
['text':' Acquire exclusive lock on the associated 'ecoc.lock' namespace to serialize calls','line_number':199,'multiline':False]
['text':' to cleanup and compact on the same EDC namespace.','line_number':200,'multiline':False]
['text':' Early exit if there's no ECOC','line_number':220,'multiline':False]
['text':' Set up the temporary 'ecoc.compact' collection','line_number':231,'multiline':False]
['text':' Load the random set of ESC non-anchor entries to be deleted post-cleanup','line_number':233,'multiline':False]
['text':' ecocCompact exists ','line_number':242,'multiline':True]
['text':' Clean up entries for each encrypted field in compactionTokens','line_number':278,'multiline':False]
['text':' Delete the entries in 'C' from the ESC','line_number':287,'multiline':False]
['text':' Delete the entries in esc.deletes collection from the ESC','line_number':291,'multiline':False]
['text':' Drop the 'ecoc.compact' collection','line_number':295,'multiline':False]
['text':' namespace','line_number':356,'multiline':False]
['text':' namespace mongo','line_number':358,'multiline':False]
