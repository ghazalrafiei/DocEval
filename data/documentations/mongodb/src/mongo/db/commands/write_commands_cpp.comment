['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' If the cmdObj is too large, it will be a "too big" message given by CachedBSONObj.get()','line_number':124,'multiline':False]
['text':' Redact the log if there are more than one documents or operations.','line_number':129,'multiline':False]
['text':'*
 * Contains hooks that are used by 'populateReply' method.
 ','line_number':142,'multiline':True]
['text':' Called for each 'SingleWriteResult' processed by 'populateReply' method.','line_number':146,'multiline':False]
['text':' Called after all 'SingleWriteResult' processing is completed by 'populateReply' method.','line_number':149,'multiline':False]
['text':' This is called as the last method.','line_number':150,'multiline':False]
['text':'*
 * Method to populate a write command reply message. It takes 'result' parameter as an input
 * source and populate the fields of 'cmdReply'.
 ','line_number':154,'multiline':True]
['text':' For ordered:false commands we need to duplicate these error results for all ops','line_number':179,'multiline':False]
['text':' after we stopped. See handleError() in write_ops_exec.cpp for more info.','line_number':180,'multiline':False]
['text':'','line_number':181,'multiline':False]
['text':' Omit the reason from the duplicate unordered responses so it doesn't consume BSON','line_number':182,'multiline':False]
['text':' object space','line_number':183,'multiline':False]
['text':' Always there.','line_number':198,'multiline':False]
['text':' Handle custom processing of each result.','line_number':200,'multiline':False]
['text':' writeConcernError field is handled by command processor.','line_number':215,'multiline':False]
['text':' Undocumented repl fields that mongos depends on.','line_number':218,'multiline':False]
['text':' On debug builds, verify that the estimated size of the insert command is at least as','line_number':285,'multiline':False]
['text':' large as the size of the actual, serialized insert command. This ensures that the','line_number':286,'multiline':False]
['text':' logic which estimates the size of insert commands is correct.','line_number':287,'multiline':False]
['text':' Flag set here and in fle_crud.cpp since this only executes on a mongod.','line_number':293,'multiline':False]
['text':' Re-throw parsing exceptions to be consistent with CmdInsert::Invocation's','line_number':310,'multiline':False]
['text':' constructor.','line_number':311,'multiline':False]
['text':' Extend the lifetime of `updates` to allow asynchronous mirroring.','line_number':411,'multiline':False]
['text':' Current design ignores contents of `updates` array except for the first entry.','line_number':413,'multiline':False]
['text':' Assuming identical collation for all elements in `updates`, future design could','line_number':414,'multiline':False]
['text':' use the disjunction primitive (i.e, `$or`) to compile all queries into a single','line_number':415,'multiline':False]
['text':' filter. Such a design also requires a sound way of combining hints.','line_number':416,'multiline':False]
['text':' "filter", "hint", and "collation" fields are optional.','line_number':440,'multiline':False]
['text':' The constructor verifies the following.','line_number':444,'multiline':False]
['text':' On debug builds, verify that the estimated size of the update command is at least as','line_number':478,'multiline':False]
['text':' large as the size of the actual, serialized update command. This ensures that the','line_number':479,'multiline':False]
['text':' logic which estimates the size of update commands is correct.','line_number':480,'multiline':False]
['text':' Flag set here and in fle_crud.cpp since this only executes on a mongod.','line_number':487,'multiline':False]
['text':' Tracks the upserted information. The memory of this variable gets moved in the','line_number':503,'multiline':False]
['text':' 'postProcessHandler' and should not be accessed afterwards.','line_number':504,'multiline':False]
['text':' For retryable updates on time-series collections, we needs to run them in','line_number':508,'multiline':False]
['text':' transactions to ensure the multiple writes are replicated atomically.','line_number':509,'multiline':False]
['text':' Increments the counter if the command contains retries. This is normally done','line_number':518,'multiline':False]
['text':' within write_ops_exec::performUpdates. But for retryable timeseries updates,','line_number':519,'multiline':False]
['text':' we should handle the metrics only once at the caller since each statement','line_number':520,'multiline':False]
['text':' will be run as a separate update command through the internal transaction','line_number':521,'multiline':False]
['text':' API. See write_ops_exec::performUpdates for more details.','line_number':522,'multiline':False]
['text':' Handler to process each 'SingleWriteResult'.','line_number':533,'multiline':False]
['text':' Handler to do the post-processing.','line_number':542,'multiline':False]
['text':' Collect metrics.','line_number':556,'multiline':False]
['text':' For time-series retryable updates, the metrics are already incremented when running','line_number':557,'multiline':False]
['text':' the internal transaction. Avoids updating them twice.','line_number':558,'multiline':False]
['text':' Holds a shared pointer to the first entry in `updates` array.','line_number':628,'multiline':False]
['text':' Update related command execution metrics.','line_number':632,'multiline':False]
['text':' On debug builds, verify that the estimated size of the deletes are at least as large','line_number':695,'multiline':False]
['text':' as the actual, serialized size. This ensures that the logic that estimates the size','line_number':696,'multiline':False]
['text':' of deletes for batch writes is correct.','line_number':697,'multiline':False]
['text':' Flag set here and in fle_crud.cpp since this only executes on a mongod.','line_number':706,'multiline':False]
['text':' namespace','line_number':797,'multiline':False]
['text':' namespace mongo','line_number':798,'multiline':False]
