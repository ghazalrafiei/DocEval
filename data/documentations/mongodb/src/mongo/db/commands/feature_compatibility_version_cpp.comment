['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 * Utility class for recording permitted transitions between feature compatibility versions and
 * their on-disk representation as FeatureCompatibilityVersionDocument objects.
 ','line_number':104,'multiline':True]
['text':' TODO (SERVER-74847): Add back 'const' qualifier to FCVTransitions class declaration','line_number':108,'multiline':False]
['text':' What features we support during the transition.','line_number':113,'multiline':False]
['text':' The transition's goal FCV.','line_number':115,'multiline':False]
['text':' The previous FCV while downgrading.','line_number':117,'multiline':False]
['text':' Steady states - they have FCV documents but no _transitions entries.','line_number':126,'multiline':False]
['text':' Start or complete upgrading to latest. If this release's lastContinuous ==','line_number':140,'multiline':False]
['text':' lastLTS then the second loop iteration just overwrites the first.','line_number':141,'multiline':False]
['text':' effective ','line_number':145,'multiline':True]
['text':' target ','line_number':145,'multiline':True]
['text':' Only config servers may request an upgrade from lastLTS to lastContinuous.','line_number':149,'multiline':False]
['text':' effective ','line_number':156,'multiline':True]
['text':' target ','line_number':156,'multiline':True]
['text':' Add transition from downgrading -> upgrading.','line_number':166,'multiline':False]
['text':' effective ','line_number':172,'multiline':True]
['text':' target ','line_number':173,'multiline':True]
['text':' previous ','line_number':174,'multiline':True]
['text':' TODO (SERVER-74847): Remove this transition once we remove testing around','line_number':178,'multiline':False]
['text':' downgrading from latest to last continuous.','line_number':179,'multiline':False]
['text':'*
     * True if a server in multiversion::FeatureCompatibilityVersion "fromVersion" can
     * transition to "newVersion". Different rules apply if the request is from a config server.
     ','line_number':197,'multiline':True]
['text':'*
     * Get a feature compatibility version enum value from a document representing the
     * multiversion::FeatureCompatibilityVersion, or uassert if the document is invalid.
     ','line_number':206,'multiline':True]
['text':'*
     * Return an FCV representing the transition fromVersion -> newVersion. It may be transitional
     * (such as kUpgradingFromLastLTSToLastContinuous) or not (such as kLastLTS). Different rules
     * apply if the upgrade/downgrade request is from a config server.
     ','line_number':219,'multiline':True]
['text':'*
     * Get the document representation of a (perhaps transitional) version.
     ','line_number':230,'multiline':True]
['text':' Map: (fromVersion, newVersion, isFromConfigServer) -> transitional version.','line_number':242,'multiline':False]
['text':'*
 * Taken in shared mode by any operations that need to ensure that the FCV does not change during
 * its execution.
 *
 * setFCV takes this lock in exclusive mode when changing the FCV value.
 ','line_number':246,'multiline':True]
['text':' lastFCVUpdateTimestamp contains the latest oplog entry timestamp which updated the FCV.','line_number':253,'multiline':False]
['text':' It is reset on rollback.','line_number':254,'multiline':False]
['text':'*
 * Build update command for featureCompatibilityVersion document updates.
 ','line_number':258,'multiline':True]
['text':' Update the featureCompatibilityVersion document stored in the server configuration','line_number':289,'multiline':False]
['text':' collection.','line_number':290,'multiline':False]
['text':' namespace','line_number':296,'multiline':False]
['text':' We may have just stepped down, in which case we should not proceed.','line_number':386,'multiline':False]
['text':' Only transition to fully upgraded or downgraded states when we have completed all required','line_number':389,'multiline':False]
['text':' upgrade/downgrade behavior, unless it is the newly added downgrading to upgrading path.','line_number':390,'multiline':False]
['text':' Create the new FCV document that we want to replace the FCV document to.','line_number':399,'multiline':False]
['text':' The setIsCleaningServerMetadata parameter can either be true, false, or boost::none.','line_number':405,'multiline':False]
['text':' True indicates we want to set the isCleaningServerMetadata FCV document field to true.','line_number':406,'multiline':False]
['text':' False indicates we want to remove the isCleaningServerMetadata FCV document field.','line_number':407,'multiline':False]
['text':' boost::none indicates that we don't want to change the current value of the','line_number':408,'multiline':False]
['text':' isCleaningServerMetadata field.','line_number':409,'multiline':False]
['text':' True case: set isCleaningServerMetadata doc field to true.','line_number':411,'multiline':False]
['text':' Else, false case: don't set the isCleaningServerMetadata field in newFCVDoc. This is','line_number':415,'multiline':False]
['text':' because runUpdateCommand overrides the current whole FCV document with what is in','line_number':416,'multiline':False]
['text':' newFCVDoc so not setting the field is effectively removing it.','line_number':417,'multiline':False]
['text':' boost::none case:','line_number':419,'multiline':False]
['text':' If we don't want to update the isCleaningServerMetadata, we need to make sure not to','line_number':420,'multiline':False]
['text':' override the existing field if it exists, so get the current isCleaningServerMetadata','line_number':421,'multiline':False]
['text':' field value from the current FCV document and set it in newFCVDoc.','line_number':422,'multiline':False]
['text':' This is to protect against the case where a previous FCV downgrade failed','line_number':423,'multiline':False]
['text':' in the isCleaningServerMetadata phase, and the user runs setFCV again. In that','line_number':424,'multiline':False]
['text':' case we do not want to remove the existing isCleaningServerMetadata FCV doc field','line_number':425,'multiline':False]
['text':' because it would not be safe to upgrade the FCV.','line_number':426,'multiline':False]
['text':' Replace the current FCV document with newFCVDoc.','line_number':437,'multiline':False]
['text':' If the server was not started with --shardsvr, the default featureCompatibilityVersion on','line_number':452,'multiline':False]
['text':' clean startup is the upgrade version. If it was started with --shardsvr, the default','line_number':453,'multiline':False]
['text':' featureCompatibilityVersion is the downgrade version, so that it can be safely added to a','line_number':454,'multiline':False]
['text':' downgrade version cluster. The config server will run setFeatureCompatibilityVersion as','line_number':455,'multiline':False]
['text':' part of addShard.','line_number':456,'multiline':False]
['text':' Set FCV to lastLTS for nodes started with --shardsvr. If an FCV was specified at startup','line_number':469,'multiline':False]
['text':' through a startup parameter, set it to that FCV. Otherwise, set it to latest.','line_number':470,'multiline':False]
['text':' We then insert the featureCompatibilityVersion document into the server configuration','line_number':499,'multiline':False]
['text':' collection. The server parameter will be updated on commit by the op observer.','line_number':500,'multiline':False]
['text':' No timestamp or term because this write is not','line_number':505,'multiline':False]
['text':' replicated.','line_number':506,'multiline':False]
['text':' The reason we set the minWireVersion to LATEST_WIRE_VERSION when downgrading from latest as','line_number':528,'multiline':False]
['text':' well as on upgrading to latest is because we shouldnâ€™t decrease the minWireVersion until we','line_number':529,'multiline':False]
['text':' have fully downgraded to the lower FCV in case we get any backwards compatibility breakages,','line_number':530,'multiline':False]
['text':' since during `kDowngradingFrom_X_to_Y` we may still be stopping/cleaning up any features from','line_number':531,'multiline':False]
['text':' the upgraded FCV. In essence, a node with the upgraded FCV/binary should not be able to','line_number':532,'multiline':False]
['text':' communicate with downgraded binary nodes until the FCV is completely downgraded to','line_number':533,'multiline':False]
['text':' `kVersion_Y`.','line_number':534,'multiline':False]
['text':' FCV == kLatest or FCV is upgrading/downgrading to or from kLatest.','line_number':538,'multiline':False]
['text':' FCV == kLastContinuous or upgrading to kLastContinuous.','line_number':545,'multiline':False]
['text':' Global write lock must be held.','line_number':560,'multiline':False]
['text':' If the server configuration collection already contains a valid','line_number':569,'multiline':False]
['text':' featureCompatibilityVersion document, cache it in-memory as a server parameter.','line_number':570,'multiline':False]
['text':' Note this error path captures all cases of an FCV document existing, but with any','line_number':573,'multiline':False]
['text':' unacceptable value. This includes unexpected cases with no path forward such as the FCV','line_number':574,'multiline':False]
['text':' value not being a string.','line_number':575,'multiline':False]
['text':' On startup, if the version is in an upgrading or downgrading state, print a warning.','line_number':595,'multiline':False]
['text':' Fatally asserts if the featureCompatibilityVersion document is not initialized, when','line_number':607,'multiline':False]
['text':' required.','line_number':608,'multiline':False]
['text':' The node did not complete the last initial sync. If the initial sync flag is set and we','line_number':615,'multiline':False]
['text':' are part of a replica set, we expect the version to be initialized as part of initial','line_number':616,'multiline':False]
['text':' sync after startup.','line_number':617,'multiline':False]
['text':' Fail to start up if there is no featureCompatibilityVersion document and there are','line_number':631,'multiline':False]
['text':' non-local databases present.','line_number':632,'multiline':False]
['text':' If we are part of a replica set and are started up with no data files, we do not set the','line_number':639,'multiline':False]
['text':' featureCompatibilityVersion until a primary is chosen. For this case, we expect the','line_number':640,'multiline':False]
['text':' in-memory featureCompatibilityVersion parameter to still be uninitialized until after','line_number':641,'multiline':False]
['text':' startup. In standalone mode, FCV is initialized during startup, even in read-only mode.','line_number':642,'multiline':False]
['text':' If the FCV has been recently set to the fully upgraded FCV but is not part of the','line_number':686,'multiline':False]
['text':' majority snapshot, then if we do a binary upgrade, we may see the old FCV at startup.','line_number':687,'multiline':False]
['text':' It is not safe to do oplog application on the new binary at that point.  So we make','line_number':688,'multiline':False]
['text':' sure that when we report the FCV, it is in the majority snapshot. (The same','line_number':689,'multiline':False]
['text':' consideration applies at downgrade, where if a recently-set fully downgraded FCV is','line_number':690,'multiline':False]
['text':' not part of the majority snapshot, the downgraded binary will see the upgrade FCV and','line_number':691,'multiline':False]
['text':' fail.)','line_number':692,'multiline':False]
['text':' If majority reads are not supported, we will take a full snapshot on clean','line_number':701,'multiline':False]
['text':' shutdown and the new FCV will be included, so upgrade is possible.','line_number':702,'multiline':False]
['text':' Note that the FixedFCVRegion only prevents the on-disk FCV from changing, not','line_number':728,'multiline':False]
['text':' the in-memory FCV. (which for example could be reset during initial sync). The operator* and','line_number':729,'multiline':False]
['text':' operator-> functions return a MutableFCV, which could change at different points in time. If you','line_number':730,'multiline':False]
['text':' wanted to get a consistent snapshot of the in-memory FCV, you should still use the','line_number':731,'multiline':False]
['text':' ServerGlobalParams::MutableFCV's acquireFCVSnapshot() function to get a FCVSnapshot.','line_number':732,'multiline':False]
['text':' namespace mongo','line_number':749,'multiline':False]
