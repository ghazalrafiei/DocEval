['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' IWYU pragma: keep','line_number':49,'multiline':False]
['text':'*
 * Returns kNeedsSuperuser, if the provided applyOps command contains an empty applyOps command or
 * createCollection/renameCollection commands are mixed in applyOps batch.
 *
 * Returns kNeedForceAndUseUUID if an operation contains a UUID, and will create a collection with
 * the user-specified UUID.
 *
 * Returns kNeedsUseUUID if the operation contains a UUID.
 *
 * Returns kOk if no conditions which must be specially handled are detected.
 *
 * May throw exceptions if the input is malformed.
 ','line_number':83,'multiline':True]
['text':' Insert the top level applyOps command into the stack.','line_number':133,'multiline':False]
['text':' Check if the applyOps command is empty. This is probably not something that should','line_number':143,'multiline':False]
['text':' happen, so require a superuser to do this.','line_number':144,'multiline':False]
['text':' createCollection and renameCollection are only allowed to be applied','line_number':149,'multiline':False]
['text':' individually. Ensure there is no create/renameCollection in a batch','line_number':150,'multiline':False]
['text':' of size greater than 1.','line_number':151,'multiline':False]
['text':' For each applyOps command, iterate the ops.','line_number':163,'multiline':False]
['text':' If the op uses any UUIDs at all then the user must possess extra privileges.','line_number':170,'multiline':False]
['text':' If the op is 'c' and forces the server to ingest a collection','line_number':174,'multiline':False]
['text':' with a specific, user defined UUID.','line_number':175,'multiline':False]
['text':' If the op contains a nested applyOps...','line_number':179,'multiline':False]
['text':' And we've recursed too far, then bail out.','line_number':181,'multiline':False]
['text':' Otherwise, if the op contains an applyOps, but we haven't recursed too far:','line_number':186,'multiline':False]
['text':' extract the applyOps command, and insert it into the stack.','line_number':187,'multiline':False]
['text':' TODO (SERVER-30217): When a write concern is provided to the applyOps command, we','line_number':234,'multiline':False]
['text':' normally wait on the OpTime of whichever operation successfully completed last. This is','line_number':235,'multiline':False]
['text':' erroneous, however, if the last operation in the array happens to be a write no-op and','line_number':236,'multiline':False]
['text':' thus isn’t assigned an OpTime. Let the second to last operation in the applyOps be write','line_number':237,'multiline':False]
['text':' A, the last operation in applyOps be write B. Let B do a no-op write and let the','line_number':238,'multiline':False]
['text':' operation that caused B to be a no-op be C. If C has an OpTime after A but before B,','line_number':239,'multiline':False]
['text':' then we won’t wait for C to be replicated and it could be rolled back, even though B','line_number':240,'multiline':False]
['text':' was acknowledged. To fix this, we should wait for replication of the node’s last applied','line_number':241,'multiline':False]
['text':' OpTime if the last write operation was a no-op write.','line_number':242,'multiline':False]
['text':' We set the OplogApplication::Mode argument based on the mode argument given in the','line_number':244,'multiline':False]
['text':' command object. If no mode is given, default to the 'kApplyOpsCmd' mode.','line_number':245,'multiline':False]
['text':' the default mode.','line_number':247,'multiline':False]
['text':' Unable to parse the mode argument.','line_number':255,'multiline':False]
['text':' NoSuchKey means the user did not supply a mode.','line_number':262,'multiline':False]
['text':' namespace','line_number':279,'multiline':False]
['text':' namespace mongo','line_number':280,'multiline':False]
