['text':'*
 *    Copyright (C) 2022-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' IWYU pragma: keep','line_number':43,'multiline':False]
['text':'*
 * A stage that scans provided columnar index.
 *
 * Currently the stage produces an object into the 'reconstructedRecordSlot' such that accessing any
 * of the given paths in it would be equivalent to accessing the paths in the corresponding object
 * from the associated row store. In the future the stage will be extended to produce separate
 * outputs for each path without materializing this intermediate object unless requested by the
 * client.
 *
 * Debug string representation:
 *
 *  columnscan reconstructedRecordSlot|none recordIdSlot|none paths[path_1, ..., path_n]
 *              outputs[output_1, ..., output_n]
 *              pathFilters[filter_path_1: filterSlot_1, filterExpr_1; ...]
 *              rowStoreExpr[slot, expr]|rowStoreExpr[]
 *              collectionUuid indexName
 ','line_number':70,'multiline':True]
['text':' index into the paths array the stage will be using','line_number':90,'multiline':False]
['text':'*
     * A representation of a cursor for one column.
     * This object also maintains statistics for how many times this column was accessed.
     ','line_number':137,'multiline':True]
['text':'*
         * The '_stats' object must outlive this 'ColumnCursor'.
         ','line_number':143,'multiline':True]
['text':' TODO For some reason the destructor of 'lastCell' is not called','line_number':152,'multiline':False]
['text':' on my local asan build unless we explicitly reset it. Maybe','line_number':153,'multiline':False]
['text':' the same compiler bug Nikita ran into?','line_number':154,'multiline':False]
['text':'
         * Copies any data owned by the storage engine into a locally owned buffer.
         ','line_number':186,'multiline':True]
['text':' These members are used to store owned copies of the path and the cell data when preparing','line_number':231,'multiline':False]
['text':' for yield.','line_number':232,'multiline':False]
['text':' The _stats must outlive this.','line_number':236,'multiline':False]
['text':' Finds the smallest row ID such that:','line_number':246,'multiline':False]
['text':' 1) it is greater or equal to the row ID of all filtered columns cursors prior to the call;','line_number':247,'multiline':False]
['text':' 2) the record with this ID passes the filters of all filtered columns.','line_number':248,'multiline':False]
['text':' Ensures that the cursors are set to this row ID unless it's missing in the column (which','line_number':249,'multiline':False]
['text':' is only possible for the non-filtered columns).','line_number':250,'multiline':False]
['text':' Finds the lowest record ID across all cursors. Doesn't move any of the cursors.','line_number':253,'multiline':False]
['text':' Move column cursors to the next record to be processed. If 'reset' is true, it will first','line_number':256,'multiline':False]
['text':' seek all of the cursors to the current '_rowId' and then advance.','line_number':257,'multiline':False]
['text':' The columnar index this stage is scanning and the associated row store collection.','line_number':264,'multiline':False]
['text':' Paths to be read from the index. '_includeInOutput' defines which of the fields should be','line_number':270,'multiline':False]
['text':' included into the reconstructed record and the order of paths in '_paths' defines the','line_number':271,'multiline':False]
['text':' orderding of the fields. The two vectors should have the same size. NB: No paths is possible','line_number':272,'multiline':False]
['text':' when no filters are used and only constant computed columns are projected. In this case only','line_number':273,'multiline':False]
['text':' the dense record ID column will be read.','line_number':274,'multiline':False]
['text':' The record id in the row store that is used to connect the per-path entries in the columnar','line_number':278,'multiline':False]
['text':' index and to retrieve the full record from the row store, if necessary.','line_number':279,'multiline':False]
['text':' The object that is equivalent to the record from the associated row store when accessing','line_number':284,'multiline':False]
['text':' the provided paths. The object might be reconstructed from the index or it might be retrieved','line_number':285,'multiline':False]
['text':' from the row store (in which case it can be transformed with '_rowStoreExpr').','line_number':286,'multiline':False]
['text':' It's optional because in the future the stage will expose slots with results for individual','line_number':287,'multiline':False]
['text':' paths which would make materializing the reconstructed record unnecesary in many cases.','line_number':288,'multiline':False]
['text':' Sometimes, populating the outputs from the index isn't possible and instead the full record','line_number':291,'multiline':False]
['text':' is retrieved from the collection this index is for, that is, from the associated "row store".','line_number':292,'multiline':False]
['text':' This full record is placed into the '_rowStoreSlot' and can be transformed using','line_number':293,'multiline':False]
['text':' '_rowStoreExpr' before producing the outputs. The client is responsible for ensuring that the','line_number':294,'multiline':False]
['text':' outputs after the transformation still satisfy the equivalence requirement for accessing the','line_number':295,'multiline':False]
['text':' paths on them vs on the original record.','line_number':296,'multiline':False]
['text':' Per path filters. The slots must be allocated by the client but downstream stages must not','line_number':300,'multiline':False]
['text':' read from them. Multiple filters form a conjunction where each branch of the AND only passes','line_number':301,'multiline':False]
['text':' when a value exists. Empty '_filteredPaths' means there are no filters.','line_number':302,'multiline':False]
['text':' used when searching for the next matching record','line_number':307,'multiline':False]
['text':' Cursors to simultaneously read from the sections of the index for each path.','line_number':319,'multiline':False]
['text':' A dense column contains records for all documents in the collection. It is sometimes','line_number':323,'multiline':False]
['text':' necessary to support projection semantics for missing values on paths. If a dense path is not','line_number':324,'multiline':False]
['text':' specified to the constructor, noted in '_densePathIncludedInScan', and there are no pushed','line_number':325,'multiline':False]
['text':' down filters (_filteredPaths), then a cursor will be implicitly opened against the dense','line_number':326,'multiline':False]
['text':' _recordId column.','line_number':327,'multiline':False]
['text':' 'densePathIncludedInScan' indicates whether there is a path present in 'paths' that is','line_number':330,'multiline':False]
['text':' expected to be present for every document in the collection. This avoids the extra cost of','line_number':331,'multiline':False]
['text':' iterating the _recordId dense column to ensure all null values for a column are observed.','line_number':332,'multiline':False]
['text':' CSI performs the best when it doesn't have to read from the record store, because the reads','line_number':335,'multiline':False]
['text':' are expensive. There are multiple components to the costs:','line_number':336,'multiline':False]
['text':'  1. moving the per column cursors to the current record','line_number':337,'multiline':False]
['text':'  2. partially reconstructing the object before realizing one of the paths is "bad"','line_number':338,'multiline':False]
['text':'  3. seeking into the row store','line_number':339,'multiline':False]
['text':' If the fallback to the row store happens often, it's cheaper to replace these with a linear','line_number':340,'multiline':False]
['text':' scan through the row store. For this heuristic we are assuming that bad data is either rare','line_number':341,'multiline':False]
['text':' or comes in "chunks". For the former, triggering a short scan on seeing bad data would','line_number':342,'multiline':False]
['text':' amortize and for the latter we'll exponentially increase the number of the scanned records','line_number':343,'multiline':False]
['text':' until we are out of the "bad chunk". This approach effectively replaces CSI with a collection','line_number':344,'multiline':False]
['text':' scan under the hood for the case when data's schema isn't compatible with CSI. NB: we only do','line_number':345,'multiline':False]
['text':' the scanning when no per path filters are lowered, as we cannot (currently) filter based on','line_number':346,'multiline':False]
['text':' the record from the row store.','line_number':347,'multiline':False]
['text':' Cursor into the associated row store.','line_number':348,'multiline':False]
['text':' We must distinguish between '_rowstoreScanCheckpointDueIn' _being_ zero and','line_number':362,'multiline':False]
['text':' _becoming_ zero, so we exit from the scan mode when','line_number':363,'multiline':False]
['text':' '_rowstoreScanCheckpointDueIn' is equal to 1 not 0, thus "+ 1" below.','line_number':364,'multiline':False]
['text':' read from the query_knobs','line_number':379,'multiline':False]
['text':' read from the query_knobs','line_number':380,'multiline':False]
['text':' adaptive batch size between min and max','line_number':381,'multiline':False]
['text':' If provided, used during a trial run to accumulate certain execution stats. Once the trial','line_number':387,'multiline':False]
['text':' run is complete, this pointer is reset to nullptr.','line_number':388,'multiline':False]
['text':' namespace sbe','line_number':393,'multiline':False]
['text':' namespace mongo','line_number':394,'multiline':False]
