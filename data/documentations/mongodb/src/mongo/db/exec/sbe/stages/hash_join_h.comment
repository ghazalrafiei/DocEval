['text':'*
 *    Copyright (C) 2019-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 * Performs a traditional hash join. All rows from the 'outer' side are used to construct a hash
 * table. Keys from the 'inner' side are used to probe the hash table and produce output rows.  This
 * is an equality join where the join is defined by equality between the 'outerCond' slot vector on
 * the outer side and the 'innerCond' slot vector on the inner side. These two slot vectors must
 * have the same length. Each side can define additional slots which appear in each of the rows
 * produced by the join, 'outerProjects' and 'innerProjects'.
 *
 * This is a binding reflector for the outer/build side; since the data is materialized in a hash
 * table, stages higher in the tree cannot see any slots lower in the tree on the outer side. This
 * is _not_ the case for the inner side, since it can stream data as it probes the hash table.
 *
 * The optional 'collatorSlot' can be provided to make the join predicate use a special definition
 * for string equality. For example, this can be used to perform a case-insensitive join on string
 * values.
 *
 * Debug string representation:
 *
 *   hj collatorSlot?
 *     left [<outer cond>] [<outer projects>] childStage
 *     right [<inner cond>] [<inner projects>] childStage
 ','line_number':50,'multiline':True]
['text':' NOLINT','line_number':98,'multiline':False]
['text':' All defined values from the outer side (i.e. they come from the hash table).','line_number':112,'multiline':False]
['text':' Accessors of input condition values (keys) that are being inserted into the hash table.','line_number':115,'multiline':False]
['text':' Accessors of output keys.','line_number':118,'multiline':False]
['text':' Accessors of input projection values that are build inserted into the hash table.','line_number':121,'multiline':False]
['text':' Accessors of output projections.','line_number':124,'multiline':False]
['text':' Accessors of input condition values (keys) that are being inserted into the hash table.','line_number':127,'multiline':False]
['text':' Accessor for collator. Only set if collatorSlot provided during construction.','line_number':130,'multiline':False]
['text':' Key used to probe inside the hash table.','line_number':133,'multiline':False]
['text':' namespace mongo::sbe','line_number':144,'multiline':False]
