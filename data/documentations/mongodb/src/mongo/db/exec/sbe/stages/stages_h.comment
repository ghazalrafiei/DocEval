['text':'*
 *    Copyright (C) 2019-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 * Provides methods to detach and re-attach to an operation context, which derived classes may
 * override to perform additional actions when these events occur.
 *
 * Parameter 'T' is the typename of the class derived from this class. It's used to implement the
 * curiously recurring template pattern and access the internal state of the derived class.
 ','line_number':51,'multiline':True]
['text':'*
     * Detaches from the OperationContext and releases any storage-engine state.
     *
     * It is only legal to call this when in a "saved" state. While in the "detached" state, it is
     * only legal to call reattachToOperationContext or the destructor. It is not legal to call
     * detachFromOperationContext() while already in the detached state.
     *
     * Propagates to all children, then calls doDetachFromOperationContext().
     ','line_number':63,'multiline':True]
['text':'*
     * Reattaches to the OperationContext and reacquires any storage-engine state.
     *
     * It is only legal to call this in the "detached" state. On return, the cursor is left in a
     * "saved" state, so callers must still call restoreState to use this object.
     *
     * Propagates to all children, then calls doReattachToOperationContext().
     ','line_number':84,'multiline':True]
['text':'*
 * Provides methods to save and restore the state of the object which derives from this class
 * when corresponding events are generated as a response to a change in the underlying data source.
 * Derived classes may override these methods to perform additional actions when these events occur.
 *
 * Parameter 'T' is the typename of the class derived from this class. It's used to implement the
 * curiously recurring template pattern and access the internal state of the derived class.
 ','line_number':109,'multiline':True]
['text':'*
     * Ensures that accessor owns the underlying BSON value, which can be potentially owned by
     * storage.
     ','line_number':122,'multiline':True]
['text':'*
     * Notifies the stage that the underlying data source may change.
     *
     * It is illegal to call work() or isEOF() when a stage is in the "saved" state. May be called
     * before the first call to open(), before execution of the plan has begun.
     *
     * Propagates to all children, then calls doSaveState().
     *
     * The 'relinquishCursor' parameter indicates whether cursors should be reset and all data
     * should be copied.
     *
     * When 'relinquishCursor' is true, the 'disableSlotAccess' parameter indicates whether this
     * stage is allowed to discard slot state before saving. When 'relinquishCursor' is false, the
     * 'disableSlotAccess' parameter has no effect.
     *
     * TODO SERVER-59620: Remove the 'relinquishCursor' parameter once all callers pass 'false'.
     ','line_number':158,'multiline':True]
['text':' Save the children in a right to left order so dependent stages (i.e. one using correlated','line_number':184,'multiline':False]
['text':' slots) are saved first.','line_number':185,'multiline':False]
['text':'*
     * Notifies the stage that underlying data is stable again and prepares for calls to work().
     *
     * Can only be called while the stage in is the "saved" state.
     *
     * Propagates to all children, then calls doRestoreState().
     *
     * Throws a UserException on failure to restore due to a conflicting event such as a
     * collection drop. May throw a WriteConflictException, in which case the caller may choose to
     * retry.
     *
     * The 'relinquishCursor' parameter indicates whether the stages are recovering from a "full
     * save" or not, as discussed in saveState(). It is the caller's responsibility to pass the same
     * value for 'relinquishCursor' as was passed in the previous call to saveState().
     ','line_number':197,'multiline':True]
['text':' We do not want to incur the overhead of tracking information about saved-ness','line_number':234,'multiline':False]
['text':' per stage. This information is only used for sanity checking, so we only run these','line_number':235,'multiline':False]
['text':' checks in debug builds.','line_number':236,'multiline':False]
['text':' TODO SERVER-59620: Remove this.','line_number':238,'multiline':False]
['text':'*
 * An abstract class to be used for traversing a plan-stage tree.
 ','line_number':271,'multiline':True]
['text':'*
     * Visits one plan-stage during a traversal over the plan-stage tree.
     ','line_number':281,'multiline':True]
['text':'*
 * Provides methods to obtain execution statistics specific to a plan stage.
 *
 * Parameter 'T' is the typename of the class derived from this class. It's used to implement the
 * curiously recurring template pattern and access the internal state of the derived class.
 ','line_number':287,'multiline':True]
['text':'*
     * Returns a tree of stats. If the stage has any children it must propagate the request for
     * stats to them. If 'includeDebugInfo' is set to 'true' the stage may include some additional
     * debug info, opaque to the caller, which will be available via 'PlanStageStats::debugInfo'
     * member.
     ','line_number':300,'multiline':True]
['text':'*
     * Get stats specific to this stage. Some stages may not have specific stats, in which
     * case they return nullptr. The pointer is *not* owned by the caller.
     *
     * The returned pointer is only valid when the corresponding stage is also valid.
     * It must not exist past the stage. If you need the stats to outlive the stage,
     * use the getStats(...) method above.
     ','line_number':308,'multiline':True]
['text':'*
     * Get the CommonStats for this stage. The pointer is *not* owned by the caller.
     *
     * The returned pointer is only valid when the corresponding stage is also valid.
     * It must not exist past the stage. If you need the stats to outlive the stage,
     * use the getStats(...) method above.
     ','line_number':318,'multiline':True]
['text':'*
     * Populates plan 'summary' object by walking through the entire PlanStage tree and for each
     * node whose plan node ID equals to the given 'nodeId', or if 'nodeId' is 'kEmptyPlanNodeId',
     * invoking 'acceptVisitor(visitor)' on the SpecificStats instance obtained by calling
     * 'getSpecificStats()'.
     ','line_number':329,'multiline':True]
['text':'*
     * Implements a pre-order traversal over the plan-stage tree starting from this node. The
     * visitor parameter plays the role of an accumulator during this traversal.
     ','line_number':348,'multiline':True]
['text':' Bit flags to indicate what kinds of stages a TrialRunTracker was attached to by a call to the','line_number':369,'multiline':False]
['text':' 'attachToTrialRunTracker()' method.','line_number':370,'multiline':False]
['text':'*
     * Force this stage to collect timing info during its execution. Must not be called after
     * execution has started.
     ','line_number':393,'multiline':True]
['text':'*
     * Returns an optional timer which is used to collect time spent executing the current stage.
     * May return boost::none if it is not necessary to collect timing info.
     ','line_number':448,'multiline':True]
['text':' Flag which determines whether this node and its children can participate in trial run','line_number':474,'multiline':False]
['text':' tracking. A stage and its children are not eligible for trial run tracking when they are','line_number':475,'multiline':False]
['text':' planned deterministically (that is, the amount of work they perform is independent of','line_number':476,'multiline':False]
['text':' other parts of the tree which are multiplanned).','line_number':477,'multiline':False]
['text':'*
     * In general, accessors can be accessed only after getNext returns a row. It is most definitely
     * not OK to access accessors in ANY other state; e.g. closed, not yet opened, after EOF. We
     * need this tracker to support unfortunate consequences of the internal yielding feature. Once
     * that feature is retired we can then simply revisit all stages and simplify them.
     ','line_number':481,'multiline':True]
['text':'*
 * Provides a method which can be used to check if the current operation has been interrupted.
 * Maintains an internal state to maintain the interrupt check period. Also responsible for
 * triggering yields if this object has been configured with a yield policy.
 ','line_number':490,'multiline':True]
['text':'*
     * This object will always be responsible for interrupt checking, but it can also optionally be
     * responsible for yielding. In order to enable yielding, the caller should pass a non-null
     * 'PlanYieldPolicy' pointer. Yielding may be disabled by providing a nullptr.
     ','line_number':498,'multiline':True]
['text':'*
     * Checks for interrupt if necessary. If yielding has been enabled for this object, then also
     * performs a yield if necessary.
     ','line_number':505,'multiline':True]
['text':' Yielding has been disabled, but interrupt checking can never be disabled (all','line_number':513,'multiline':False]
['text':' SBE operations must be interruptible). When yielding is enabled, it is responsible','line_number':514,'multiline':False]
['text':' for interrupt checking, but when disabled we do it ourselves.','line_number':515,'multiline':False]
['text':'*
     * Checks for interrupt if necessary. Will never yield regardless of the yielding policy.
     * Should only be used for ValueBlock stages.
     ','line_number':525,'multiline':True]
['text':'*
 * This is an abstract base class of all plan stages in SBE.
 ','line_number':557,'multiline':True]
['text':'*
     * The idiomatic C++ pattern of object cloning. Plan stages must be fully copyable as every
     * thread in parallel execution needs its own private copy.
     ','line_number':579,'multiline':True]
['text':'*
     * Prepare this SBE PlanStage tree for execution. Must be called once, and must be called
     * prior to open(), getNext(), close(), saveState(), or restoreState(),
     ','line_number':585,'multiline':True]
['text':'*
     * Returns a slot accessor for a given slot id. This method is only called during the prepare
     * phase.
     ','line_number':591,'multiline':True]
['text':'*
     * Opens the plan tree and makes it ready for subsequent open(), getNext(), and close() calls.
     * The expectation is that a plan stage acquires resources (e.g. memory buffers) during the open
     * call and avoids resource acquisition in getNext().
     *
     * When reOpen flag is true then the plan stage should reinitizalize already acquired resources
     * (e.g. re-hash, re-sort, re-seek, etc), but it can avoid reinitializing things that do not
     * contain state and are not destroyed by close(), since close() is not called before a reopen.
     ','line_number':597,'multiline':True]
['text':'*
     * Moves to the next position. If the end is reached then return EOF otherwise ADVANCED. Callers
     * are not required to call getNext until EOF. They can stop consuming results at any time. Once
     * EOF is reached it will stay at EOF unless reopened.
     ','line_number':608,'multiline':True]
['text':'*
     * The mirror method to open(). It releases any acquired resources.
     ','line_number':615,'multiline':True]
['text':'*
     * Estimates the compile-time size of the current plan stage and its children (SBE Plan
     * subtree). The compile-time size is the size of the SBE subtree before it has been prepared or
     * executed.
     ','line_number':626,'multiline':True]
['text':' Derived classes can optionally override these methods.','line_number':639,'multiline':False]
['text':' namespace sbe','line_number':667,'multiline':False]
['text':' namespace mongo','line_number':668,'multiline':False]
