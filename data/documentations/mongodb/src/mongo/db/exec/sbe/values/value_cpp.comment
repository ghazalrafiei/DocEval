['text':'*
 *    Copyright (C) 2019-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' namespace','line_number':81,'multiline':False]
['text':' Add 2 to account NULL bytes after pattern and flags.','line_number':105,'multiline':False]
['text':' Copy pattern first and flags after it.','line_number':110,'multiline':False]
['text':' Ensure NULL byte is placed after each part.','line_number':114,'multiline':False]
['text':' Write length of 'ns' as a little-endian uint32_t.','line_number':131,'multiline':False]
['text':' Write 'ns' followed by a null terminator.','line_number':135,'multiline':False]
['text':' Write 'id'.','line_number':140,'multiline':False]
['text':' Write length of 'numBytes' as a little-endian uint32_t.','line_number':154,'multiline':False]
['text':' Write length of 'code' as a little-endian uint32_t.','line_number':158,'multiline':False]
['text':' Write 'code' followed by a null terminator.','line_number':162,'multiline':False]
['text':' Write 'scope'.','line_number':167,'multiline':False]
['text':' Force doubles to integers for hashing.','line_number':403,'multiline':False]
['text':' Doubles not representable as int64_t will hash as doubles.','line_number':410,'multiline':False]
['text':' Force decimals to integers for hashing.','line_number':415,'multiline':False]
['text':' There should be enough entropy in the first 4 elements.','line_number':464,'multiline':False]
['text':' There should be enough entropy in the first 4 elements.','line_number':478,'multiline':False]
['text':' Zero initialize buffer and copy bytes in.','line_number':500,'multiline':False]
['text':' Hash as if it is 64bit integer.','line_number':504,'multiline':False]
['text':' Hash only the first 8 bytes. It should be enough.','line_number':507,'multiline':False]
['text':' Collation semantics do not apply to strings nested inside the CodeWScope scope','line_number':526,'multiline':False]
['text':' object, so we do not pass through the collator when computing the hash of the','line_number':527,'multiline':False]
['text':' scope object.','line_number':528,'multiline':False]
['text':'*
 * Performs a three-way comparison for any type that has < and == operators. Additionally,
 * guarantees that the result will be exactlty -1, 0, or 1, which is important, because not all
 * comparison functions make that guarantee.
 *
 * The StringData::compare(basic_string_view s) function, for example, only promises that it
 * will return a value less than 0 in the case that 'this' is less than 's,' whereas we want to
 * return exactly -1.
 ','line_number':545,'multiline':True]
['text':'
 * Three ways value comparison (aka spacehip operator).
 ','line_number':559,'multiline':True]
['text':' ArraySets and ArrayMultiSet carry semantics of an unordered set, so we cannot define a','line_number':637,'multiline':False]
['text':' deterministic less or greater operations on them, but only compare for equality.','line_number':638,'multiline':False]
['text':' Comparing an ArraySet or ArrayMultiSet with a regular Array is equivalent of converting','line_number':639,'multiline':False]
['text':' the ArraySet/ArrayMultiSet to an Array and them comparing the two Arrays, so we can','line_number':640,'multiline':False]
['text':' simply use a generic algorithm below.','line_number':641,'multiline':False]
['text':' If they are not equal then we cannot say if one is smaller than the other.','line_number':657,'multiline':False]
['text':' If they are not equal then we cannot say if one is smaller than the other.','line_number':687,'multiline':False]
['text':' To match BSONElement::woCompare() semantics, we first compare the canonical types of','line_number':693,'multiline':False]
['text':' the elements. If they do not match, we return their difference.','line_number':694,'multiline':False]
['text':' Since we already compared the size above, skip the first 4 bytes of the buffer and','line_number':738,'multiline':False]
['text':' compare the lsz+1 bytes carrying the subtype and binData payload in one pass.','line_number':739,'multiline':False]
['text':' Special case for Nothing in a hash table (group) and sort comparison.','line_number':748,'multiline':False]
['text':' To match the existing behavior from the classic execution engine, we intentionally','line_number':768,'multiline':False]
['text':' compare the sizes of 'ns' fields first, and then only if the sizes are equal do we','line_number':769,'multiline':False]
['text':' compare the contents of the 'ns' fields.','line_number':770,'multiline':False]
['text':' Special string comparison semantics do not apply to strings nested inside the','line_number':791,'multiline':False]
['text':' CodeWScope scope object, so we do not pass through the string comparator.','line_number':792,'multiline':False]
['text':' Different types.','line_number':798,'multiline':False]
['text':' compareValue','line_number':808,'multiline':False]
['text':' In the edge case that 'componentIndex' indicates that we have already read','line_number':936,'multiline':False]
['text':' 'kMaxCompoundIndexKeys' components, we expect that the next 'readSBEValue()' will','line_number':937,'multiline':False]
['text':' return false (to indicate EOF), so the value of 'inverted' does not matter.','line_number':938,'multiline':False]
['text':' If 'indexKeysToInclude' indicates that this index key component is not part of the','line_number':948,'multiline':False]
['text':' projection, remove it from the list of values that will be fed to the 'accessors'','line_number':949,'multiline':False]
['text':' list. Note that, even when we are excluding a key component, we can't skip the call','line_number':950,'multiline':False]
['text':' to 'key_string::readSBEValue()' because it is needed to advance the 'reader' and','line_number':951,'multiline':False]
['text':' 'typeBitsReader' stream.','line_number':952,'multiline':False]
['text':' namespace value','line_number':1006,'multiline':False]
['text':' namespace sbe','line_number':1007,'multiline':False]
['text':' namespace mongo','line_number':1008,'multiline':False]
