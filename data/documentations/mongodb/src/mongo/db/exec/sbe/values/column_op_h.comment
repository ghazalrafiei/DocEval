['text':'*
 *    Copyright (C) 2023-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 * The ColumnOpType struct is used as a means to declare various properties about a ColumnOp.
 * These properties include the ColumnOp's expected input type, the ColumnOp's output type on
 * existent input, the ColumnOp's output type on missing input, and other properties represented
 * using flags.
 ','line_number':39,'multiline':True]
['text':' ColumnOp always returns Nothing if the input is Nothing.','line_number':49,'multiline':False]
['text':' ColumnOp always returns a non-Nothing value if the input is Nothing.','line_number':52,'multiline':False]
['text':' ColumnOp always returns a non-Nothing value if the input matches the expected input type.','line_number':55,'multiline':False]
['text':' ColumnOp always returns a non-Nothing value if the input is non-Nothing','line_number':58,'multiline':False]
['text':' ColumnOp is a monotonic function','line_number':61,'multiline':False]
['text':' Indicates ColumnOp always returns a non-Nothing value if the input is Nothing.','line_number':65,'multiline':False]
['text':' Indicates ColumnOp always returns Nothing if the input is Nothing.','line_number':68,'multiline':False]
['text':' Indicates ColumnOp always returns a non-Nothing Null value if the input is Nothing.','line_number':71,'multiline':False]
['text':' Indicates ColumnOp always returns a non-Nothing Boolean value if the input is Nothing.','line_number':74,'multiline':False]
['text':' 'outputTag' indicates ColumnOp's output type when the input is Nothing. If 'outputTag'','line_number':78,'multiline':False]
['text':' is equal to TypeTags::Nothing, that means that the ColumnOp may return any type when','line_number':79,'multiline':False]
['text':' the input is Nothing. (Note that 'outputTag' is independent of and has no effect on','line_number':80,'multiline':False]
['text':' whether ColumnOp returns Nothing or a non-Nothing value when the input is Nothing.)','line_number':81,'multiline':False]
['text':' Indicates ColumnOp's expected input type. If the ColumnOp does not have an "expected input','line_number':110,'multiline':False]
['text':' type" (i.e. it supports any type of input), 'expectedTag' will be equal to TypeTags::Nothing.','line_number':111,'multiline':False]
['text':' When 'expectedTag' is not TypeTags::Nothing, that means the ColumnOp is guaranteed to return','line_number':112,'multiline':False]
['text':' Nothing when the input is a non-Nothing value whose type does not match 'expectedTag'.','line_number':113,'multiline':False]
['text':' Indicates ColumnOp's output type on existent input. If the ColumnOp does not have an "output','line_number':116,'multiline':False]
['text':' type" (i.e. it may return any type on existent input), then 'outputTag' will be equal to','line_number':117,'multiline':False]
['text':' TypeTags::Nothing. When 'outputTag' is not TypeTags::Nothing, that means that the ColumnOp','line_number':118,'multiline':False]
['text':' is guaranteed to return either Nothing or a value whose type matches 'outputTag' when the','line_number':119,'multiline':False]
['text':' input is a non-Nothing value.','line_number':120,'multiline':False]
['text':' Indicates ColumnOp's output type on missing input. If the ColumnOp does not have an "output','line_number':123,'multiline':False]
['text':' type on missing input" (i.e. it may return any type on missing input), 'outputTagOnMissing'','line_number':124,'multiline':False]
['text':' will be equal to TypeTags::Nothing. When 'outputTagOnMissing' is not TypeTags::Nothing, that','line_number':125,'multiline':False]
['text':' means that the ColumnOp is guaranteed to return either Nothing or a value whose type matches','line_number':126,'multiline':False]
['text':' 'outputTagOnMissing' when the input is Nothing.','line_number':127,'multiline':False]
['text':'*
 * Shared base class for all instantiations of the 'ColumnOpFunctor' template.
 ','line_number':150,'multiline':True]
['text':' 'MethodTable' is a struct of function pointers that serves as the "method table" for','line_number':155,'multiline':False]
['text':' a ColumnOp.','line_number':156,'multiline':False]
['text':' processSingleFn() processes a single value.','line_number':168,'multiline':False]
['text':' processBatchFn() processes a variable-size batch of values.','line_number':171,'multiline':False]
['text':'*
 * ColumnOpFunctor provides implementations for all the methods in a ColumnOp's method table.
 *
 * ColumnOpFunctor is a wrapper around the 1 or 2 functors (FuncT1, FuncT2) that are provided
 * to makeColumnOp() or makeColumnOpWithParams().
 *
 * When a single functor is provided to makeColumnOp() or makeColumnOpWithParams(), FuncT1 is used
 * both for processing single values and for processing batches of values (and FuncT2 is ignored).
 *
 * When two functors are provided to makeColumnOp(), FuncT1 is used for processing single values
 * and FuncT2 is used for processing batches of values.
 ','line_number':178,'multiline':True]
['text':' Check if this op is guaranteed to output Nothing when the input is Nothing.','line_number':198,'multiline':False]
['text':' Check if 'BatchFn' provides a general batch callback that uses a variable-size batch.','line_number':202,'multiline':False]
['text':' If 2 functors were provided to makeColumnOp(), the second functor must provide a batch','line_number':206,'multiline':False]
['text':' callback.','line_number':207,'multiline':False]
['text':'*
 * This specialization allows for constructing a ColumnOpFunctor with a single arg when only a
 * single input functor was provided to makeColumnOp() or makeColumnOpWithParams().
 ','line_number':271,'multiline':True]
['text':'*
 * This class serves as the base class for all ColumnOps. The 'ColumnOp' class is not templated
 * and has no static/compile-time knowledge about the specific column operation.
 *
 * ColumnOp consists of a ColumnOpType ('opType'), a ColumnOpFunctor ('cofd'), and a method table
 * ('methodTable').
 *
 * ColumnOp also provides wrapper methods around all the methods in 'methodTable' to make it easy
 * to correctly dispatch to a given method as desired.
 ','line_number':287,'multiline':True]
['text':'*
 * This templated class derived from ColumnOp is the actual class used to represent a specific
 * column operation.
 *
 * This class has holds the ColumnOpFunctor object, and it also makes a copy of the method table
 * when 'copyMethodTable' is true.
 ','line_number':320,'multiline':True]
['text':'*
 * Shared base class for all instantiations of the 'ColumnOpInstanceWithParams' template.
 ','line_number':354,'multiline':True]
['text':'*
 * The 'ColumnOpInstanceWithParams' class is essentially a "factory" class that can be used to
 * generate ColumnOpInstances via the bindParams() method.
 *
 * This class is used by makeColumnOpWithParams().
 ','line_number':367,'multiline':True]
['text':'*
 * Helper function for creating a ColumnOp.
 *
 * makeColumnOp() can be invoked in the following ways:
 *
 *    makeColumnOp<opType>({single-value functor})
 *      - When makeColumnOp() is invoked with a single functor arg, a ColumnOp will be created that
 *        uses the arg for processing single values.
 *
 *    makeColumnOp<opType>({single-value functor}, {batch functor})
 *      - When makeColumnOp() is invoked with two functor args, a ColumnOp will be created that uses
 *        the first arg for processing single values and the second arg for processing batches of
 *        values.
 *
 *    makeColumnOp<opType>({all-purpose functor object})
 *      - When makeColumnOp() is invoked with a single functor object arg, a ColumnOp will be
 *        created that uses the functor object for processing single values and also, if the
 *        functor supports it, uses the functor arg for processing batches of values as well.
 *
 ','line_number':392,'multiline':True]
['text':'*
 * Helper function for creating a ColumnOpInstanceWithParams.
 *
 * makeColumnOpWithParams() can be invoked like so:
 *
 *    makeColumnOpWithParams<opType, ColumnOpFunctorT>()
 *
 * 'ColumnOpFunctorT' must be a class that defines an 'operator()' method for processing single
 * values. Optionally, 'ColumnOpFunctorT' may also provide 'operator()' methods for processing
 * batches of values.
 *
 * makeColumnOpWithParams() doesn't actually return a ready-to-use ColumnOpInstance, but rather
 * it returns a "factory" object (ColumnOpInstanceWithParams) that can create ColumnOpInstances
 * by calling the bindParams() method.
 ','line_number':433,'multiline':True]
['text':' namespace mongo::sbe::value','line_number':452,'multiline':False]
