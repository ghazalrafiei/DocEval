['text':'*
 *    Copyright (C) 2022-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
     * This class holds info about what action should be taken for a given field. Each FieldAction
     * can be one of the following:
     *   1) Keep:      Copy the field.
     *   2) Drop:      Ignore the field.
     *   3) ValueArg:  If the field exists then overwrite it with the corresponding argument,
     *                 otherwise add a new field set to the corresponding argument.
     *   4) LambdaArg: Pass the current value of the field (or Nothing if the field doesn't exist)
     *                 to the corresponding lambda arg, and then replace the field with the return
     *                 value of the lambda.
     *   5) MakeObj:   Recursively invoke makeBsonObj() passing in the field as the input object,
     *                 and replace the field with output produced.
     ','line_number':77,'multiline':True]
['text':' 'fieldsScope' indicates how other fields not present in 'fields' should be handled.','line_number':252,'multiline':False]
['text':' If 'fieldsScope == kOpen', then other fields not present in 'fields' should be copied','line_number':253,'multiline':False]
['text':' to the output object. If 'fieldsScope == kClosed', then other fields not present in','line_number':254,'multiline':False]
['text':' 'fields' should be ignored/dropped.','line_number':255,'multiline':False]
['text':' 'nonObjInputBehavior' indicates how makeBsonObj() should behave if the input value is not an','line_number':258,'multiline':False]
['text':' object. If 'nonObjInputBehavior == kNewObj', then makeBsonObj() should replace the input','line_number':259,'multiline':False]
['text':' with an empty object and proceed as usual. If 'nonObjInputBehavior == kReturnNothing', then','line_number':260,'multiline':False]
['text':' makeBsonObj() should return Nothing. If 'nonObjInputBehavior == kReturnInput', makeBsonObj()','line_number':261,'multiline':False]
['text':' should return the input value.','line_number':262,'multiline':False]
['text':' If this MakeObjSpec is part of a "MakeObj" FieldAction, 'traversalDepth' indicates what','line_number':265,'multiline':False]
['text':' the array traversal depth limit should be. By default 'traversalDepth' is 'boost::none'','line_number':266,'multiline':False]
['text':' (i.e. by default there is no depth limit).','line_number':267,'multiline':False]
['text':' Contains info about each field of interest. 'fields' and 'actions' are parallel vectors','line_number':270,'multiline':False]
['text':' (i.e. the info corresponding to field[i] is stored in actions[i]).','line_number':271,'multiline':False]
['text':' Number of 'fields' whose FieldAction type is not kDrop (if 'fieldsScope' is kClosed) or','line_number':274,'multiline':False]
['text':' whose FieldAction type is not kKeep (if 'fieldsScope' is kOpen).','line_number':275,'multiline':False]
['text':' Number of 'fields' that are ValueArgs.','line_number':278,'multiline':False]
['text':' The total number of ValueArgs and LamdbaArgs in this MakeObjSpec and all of its descendents.','line_number':281,'multiline':False]
['text':' Searchable vector of fields of interest.','line_number':290,'multiline':False]
['text':' Hash the index of the variant alternative to differentiate the different types in the hash.','line_number':311,'multiline':False]
['text':' If Keep{} or Drop{}, don't update hash state, as the variant index() will differentiate them.','line_number':326,'multiline':False]
['text':' namespace mongo::sbe','line_number':330,'multiline':False]
