['text':'*
 *    Copyright (C) 2021-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' IWYU pragma: no_include "boost/container/detail/std_fwd.hpp"','line_number':41,'multiline':False]
['text':'*
 * Contains a set of functions for shallow estimating the size of allocated on the heap objects
 * in a given container. The functions do not take account of the size of the given container, only
 * its values allocated on the heap.
 * They are used to calculate compile-time size of an SBE tree.
 ','line_number':60,'multiline':True]
['text':' Calculate sizes of heap-allocated values only. Therefore, sizes of scalar values are always 0.','line_number':96,'multiline':False]
['text':' Calculate the size of a SpecificStats's derived class.','line_number':137,'multiline':False]
['text':' We need a template argument here rather than passing const SpecificStats&','line_number':138,'multiline':False]
['text':' as we need to know the exact type to properly compute the size of the object.','line_number':139,'multiline':False]
['text':' Calculate the size of the inlined vector's elements.','line_number':150,'multiline':False]
['text':' Calculate size of the value only if the values are not inlined.','line_number':154,'multiline':False]
['text':' Calculate the size of the vector's elements.','line_number':166,'multiline':False]
['text':' Overload of 'estimate' function for std::vector<bool> since','line_number':178,'multiline':False]
['text':' the latter is often an optimized specialization of std::vector for bool','line_number':179,'multiline':False]
['text':' and it might fail to match against ordinary 'size_t estimate(const std::vector<T, A>&)'.','line_number':180,'multiline':False]
['text':' The estimation is based on the memory usage of absl::flat_hash_map','line_number':192,'multiline':False]
['text':' documented in https://abseil.io/docs/cpp/guides/container:','line_number':193,'multiline':False]
['text':' The container uses O((sizeof(std::pair<const K, V>) + 1) * bucket_count()) bytes.','line_number':194,'multiline':False]
['text':' The tests with a custom allocator showed that actual memory usage was','line_number':195,'multiline':False]
['text':' (sizeof(std::pair<const K, V>) + 1) * bucket_count() + C,','line_number':196,'multiline':False]
['text':' where C was equal to 17 for non-empty containers on x64 platform','line_number':197,'multiline':False]
['text':' and 0 for empty containers.','line_number':198,'multiline':False]
['text':' namespace mongo::sbe::size_estimator','line_number':231,'multiline':False]
