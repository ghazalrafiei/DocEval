['text':'*
 *    Copyright (C) 2023-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 * Performs a partitioned sliding window aggregation. The input is assumed to be partitioned into
 * consecutive groups. For each document the stage takes a fixed number of slots in `currSlots`,
 * where the first `partitionSlotCount` slots are used to separate partitions.
 *
 * The list of sliding window aggregator definitions are in the 'windows' vector. Each aggregator
 * tracks a set of accumulators that are used to compute its final value. To keep the state of the
 * accumulators, the aggregator has a vector of slots 'windowExprSlots'. The state of each
 * accumulator is updated using an expression triplet {'initExpr', 'addExpr', 'removeExpr'}, all
 * expressions are optional.
 *
 * The sliding window bound is determined by two boolean valued expressions 'lowBoundExpr' and
 * 'highBoundExpr', where both can be optional to indicated unbounded window. If any document is
 * evaluated to true for the current document, then that document is included in the window frame
 * of the current document. This test is performed against a different document, whose slots are
 * saved in `boundTestingSlots`, which is of the same number as `currSlots`.
 *
 * In addition, the caller may provide a list of `frameFirstSlots` and `frameLastSlots` for each
 * window, each slot vector of the same size as the `currSlots`, to represent slots for the first
 * and last documents in the current window frame. Empty slot vector means the value is not
 * required.
 *
 * Debug string representation:
 *
 *  window  [<current slots>]
 *          [frameFirst[<frame first slots>], frameLast[<frame last slots>],
 *              lowBound{<expr>}, highBound{<expr>}]
 *          [<window slot 1> = {init{<expr>}, add{<expr>}, remove{<expr>}},
 *          ...]
 *  childStage
 ','line_number':42,'multiline':True]
['text':'*
     * Get the last row id either in the buffer or spilled.
     ','line_number':114,'multiline':True]
['text':'*
     * Get the window frame size of a particular window.
     ','line_number':119,'multiline':True]
['text':'*
     * Fetch the next row into the window buffer, this call may cause spilling when memory
     * usage exceeds the threshold.
     ','line_number':124,'multiline':True]
['text':'*
     * All rows up until the given id (exclusive) will be freed from the window buffer, the spilled
     * rows will not be deleted.
     ','line_number':130,'multiline':True]
['text':'*
     * Free the entire window buffer and the spilled records, reset all relevant states to their
     * initial values.
     ','line_number':136,'multiline':True]
['text':'*
     * Set the current partition to the row starting at the given id. Updates all window frame
     * ranges and window states.
     ','line_number':142,'multiline':True]
['text':'*
     * Set the accessors to the row of given id, either when the row is in memory buffer or when the
     * row is spilled.
     ','line_number':148,'multiline':True]
['text':'*
     * Clear the accessors to empty. Use the spilled row to hold the Nothing values.
     ','line_number':157,'multiline':True]
['text':'*
     * Set or clear different accessor types.
     ','line_number':163,'multiline':True]
['text':'*
     * Get the last spilled row id.
     ','line_number':173,'multiline':True]
['text':'*
     * Get the estimated total memory size, including both the window buffer and the accumulator
     * states.
     ','line_number':178,'multiline':True]
['text':'*
     * Read a spilled row of given id into the provided MaterializedRow.
     ','line_number':184,'multiline':True]
['text':'*
     * Spill all the in memory rows inside the window buffer.
     ','line_number':189,'multiline':True]
['text':' The in/out accessors for the current document slots. Either pointing to a row in the window','line_number':203,'multiline':False]
['text':' buffer by an index, or a recovered spilled row.','line_number':204,'multiline':False]
['text':' The accessors for document slots under bound testing. Either pointing to a row in the window','line_number':211,'multiline':False]
['text':' buffer by an index, or a recovered spilled row.','line_number':212,'multiline':False]
['text':' The accessors for the document slots of the first document in window frame. Either pointing','line_number':218,'multiline':False]
['text':' to a row in the window buffer by an index, or a recovered spilled row.','line_number':219,'multiline':False]
['text':' The accessors for the document slots of the last document in window frame. Either pointing','line_number':225,'multiline':False]
['text':' to a row in the window buffer by an index, or a recovered spilled row.','line_number':226,'multiline':False]
['text':' The out accessors for the window states.','line_number':232,'multiline':False]
['text':' Accessor for collator. Only set if collatorSlot provided during construction.','line_number':238,'multiline':False]
['text':' The id of the current document, starting from 1.','line_number':250,'multiline':False]
['text':' We use 1-based id since we want to use the id for spilling as the key in the','line_number':251,'multiline':False]
['text':' temporary record store, and id 0 is reserved','line_number':252,'multiline':False]
['text':' The id ranges each window function state current holds, inclusive on both ends. Empty ranges','line_number':254,'multiline':False]
['text':' are represented as [a+1, a].','line_number':255,'multiline':False]
['text':' The buffered slot values.','line_number':257,'multiline':False]
['text':' The first id in the buffered rows.','line_number':259,'multiline':False]
['text':' The last id in the buffered rows.','line_number':261,'multiline':False]
['text':' The id of the next partition that we have fetched into the buffer.','line_number':263,'multiline':False]
['text':' Whether the child stage has reached EOF.','line_number':265,'multiline':False]
['text':' Whether to allow spilling.','line_number':268,'multiline':False]
['text':' The spilled record storage.','line_number':270,'multiline':False]
['text':' The temporary data structure to hold record batch before they're spilled.','line_number':272,'multiline':False]
['text':'*
     * A memory estimator for the window state. Incrementally calculate the linear regression of the
     * memory samples of different window frame size. The intervals between sample frame sizes are
     * increased in a capped exponential backoff fashion.
     *
     * https://stats.stackexchange.com/questions/23481/are-there-algorithms-for-computing-running-linear-or-logistic-regression-param
     ','line_number':278,'multiline':True]
['text':' This checkpoing increment ensures we sample at two's power plus one (1, 2, 3, 5,','line_number':292,'multiline':False]
['text':' 9, ...), becasue some data structures (e.g. std::vector) grows internal memory at','line_number':293,'multiline':False]
['text':' that point.','line_number':294,'multiline':False]
['text':' Variance of x will be zero when less than two samples are taken.','line_number':314,'multiline':False]
['text':'*
     * A memory estimator for the window buffer. Tracks the mean of each record memory sample. The
     * samples are taken in a capped exponential backoff fashion.
     ','line_number':339,'multiline':True]
['text':' The memory estimator for the window buffer.','line_number':382,'multiline':False]
['text':' The memory size for each window accumulator state.','line_number':384,'multiline':False]
['text':' Memory threshold before spilling.','line_number':386,'multiline':False]
['text':' The failpoint counter to force spilling, incremented for every window function update,','line_number':389,'multiline':False]
['text':' every document.','line_number':390,'multiline':False]
['text':' namespace mongo::sbe','line_number':396,'multiline':False]
