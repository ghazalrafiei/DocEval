['text':'*
 *    Copyright (C) 2020-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 * Uniquely identifies a slot in an SBE plan. The slot ids are allocated as part of creating the
 * SBE plan, and remain constant during query runtime.
 *
 * Each slot id corresponds to a particular 'SlotAccessor' instance. The various slot accessor
 * implementations provide the mechanism for manipulating values held in slots.
 ','line_number':41,'multiline':True]
['text':'*
 * Interface for accessing a value held inside a slot. SBE plans assign unique ids to each slot. The
 * id is needed to find the corresponding accessor during plan preparation, but need not be known by
 * the slot accessor object itself.
 ','line_number':50,'multiline':True]
['text':'*
     * Returns a non-owning view of value currently stored in the slot. The returned value is valid
     * until the content of this slot changes (usually as a result of calling getNext()). If the
     * caller needs to hold onto the value longer then it must make a copy of the value.
     ','line_number':59,'multiline':True]
['text':'*
     * Sometimes it may be determined that a caller is the last one to access this slot. If that is
     * the case then the caller can use this optimized method to move out the value out of the slot
     * saving the extra copy operation. Not all slots own the values stored in them so they must
     * make a deep copy. The returned value is owned by the caller.
     ','line_number':66,'multiline':True]
['text':'*
 * Accessor for a slot which provides a view of a value that is owned elsewhere.
 ','line_number':80,'multiline':True]
['text':'*
     * Returns non-owning view of the value.
     ','line_number':85,'multiline':True]
['text':'*
     * Returns a copy of the value.
     ','line_number':92,'multiline':True]
['text':'*
 * Accessor for a slot which can own the value held by that slot.
 ','line_number':113,'multiline':True]
['text':' Copy and swap idiom for a single copy/move assignment operator.','line_number':145,'multiline':False]
['text':'*
     * Returns a non-owning view of the value.
     ','line_number':153,'multiline':True]
['text':'*
     * If a the value is owned by this slot, then the slot relinquishes ownership of the returned
     * value. Alternatively, if the value is unowned, then the caller receives a copy. Either way,
     * the caller owns the resulting value.
     ','line_number':161,'multiline':True]
['text':' class OwnedValueAccessor','line_number':212,'multiline':False]
['text':'*
 * An accessor for a slot which must hold an array-like type (e.g. 'TypeTags::Array' or
 * 'TypeTags::bsonArray'). The array is never owned by this slot. Provides an interface to iterate
 * over the values that constitute the array.
 *
 * It is illegal to fill out the slot with a type that is not array-like.
 ','line_number':214,'multiline':True]
['text':' Return non-owning view of the value.','line_number':229,'multiline':False]
['text':' We can never move out values from array.','line_number':234,'multiline':False]
['text':' class ArrayAccessor','line_number':259,'multiline':False]
['text':'*
 * This is a switched accessor - it holds a vector of accessors and operates on an accessor selected
 * (switched) by the index field.
 ','line_number':261,'multiline':True]
['text':'*
 * Some SBE stages must materialize rows inside (key, value) data structures, e.g. for the sort or
 * hash aggregation operators. In such cases, both key and value are each materialized rows which
 * may consist of multiple 'sbe::Value' instances. This accessor provides a view of a particular
 * value inside a particular key for such a data structure.
 *
 * T is the type of an iterator pointing to the (key, value) pair of interest.
 ','line_number':288,'multiline':True]
['text':' We can never move out values from keys.','line_number':305,'multiline':False]
['text':'*
 * Some SBE stages must materialize rows inside (key, value) data structures, e.g. for the sort or
 * hash aggregation operators. In such cases, both key and value are each materialized rows which
 * may consist of multiple 'sbe::Value' instances. This accessor provides a view of a particular
 * 'sbe::Value' inside the materialized row which serves as the "value" part of the (key, value)
 * pair.
 *
 * T is the type of an iterator pointing to the (key, value) pair of interest.
 ','line_number':315,'multiline':True]
['text':'*
 * Provides a view of  a particular slot inside a particular row of an abstract table-like container
 * of type T.
 ','line_number':345,'multiline':True]
['text':'*
     * Constructs an accessor for the row with index 'it' inside the given 'container'. Within that
     * row, the resulting accessor provides a vew of the value at the given 'slot'.
     ','line_number':352,'multiline':True]
['text':'*
 * Provides a view of a slot inside a single MaterializedRow.
 ','line_number':376,'multiline':True]
['text':'*
     * Constructs an accessor that gives a view of the value at the given 'slot' of a
     * given single row.
     ','line_number':382,'multiline':True]
['text':'*
 * Read the components of the 'keyString' value and populate 'accessors' with those components. Some
 * components are appended into the 'valueBufferBuilder' object's internal buffer, and the accessors
 * populated with those values will hold pointers into the buffer. The 'valueBufferBuilder' is
 * caller owned, and it can be reset and reused once it is safe to invalidate any accessors that
 * might reference it.
 ','line_number':404,'multiline':True]
['text':'*
 * Commonly used containers.
 ','line_number':419,'multiline':True]
['text':'*
 * Given an unordered slot 'map', calls 'callback' for each slot/value pair in order of ascending
 * slot id.
 ','line_number':434,'multiline':True]
['text':' namespace mongo::sbe::value','line_number':450,'multiline':False]
