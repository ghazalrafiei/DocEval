['text':'*
 *    Copyright (C) 2023-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 * This file contains tests for sbe::TsBlockToCellBlockStage and sbe::BlockToRowStage.
 ','line_number':30,'multiline':True]
['text':'timeFieldName','line_number':57,'multiline':True]
['text':'nss','line_number':57,'multiline':True]
['text':'outSlots','line_number':61,'multiline':True]
['text':'nodeId','line_number':70,'multiline':True]
['text':'blockSlots','line_number':76,'multiline':True]
['text':'metaSlot','line_number':77,'multiline':True]
['text':' Builds a TsBucketToCellBlockStage on top of the input stage.','line_number':82,'multiline':False]
['text':'nodeId','line_number':100,'multiline':True]
['text':' Builds a scan for the (imaginary) buckets collection.','line_number':109,'multiline':False]
['text':' Builds a TsBucketToCellBlockStage on top of the scan.','line_number':112,'multiline':False]
['text':' Builds a scan for the (imaginary) buckets collection.','line_number':120,'multiline':False]
['text':' Builds a TsBucketToCellBlockStage on top of the scan.','line_number':123,'multiline':False]
['text':' Builds a BlockToRowStage on top of the TsBucketToCellBlockStage.','line_number':127,'multiline':False]
['text':' Prepares the execution tree.','line_number':140,'multiline':False]
['text':' Sets up accessors for results from the BlockToRow stage.','line_number':144,'multiline':False]
['text':' Verifies meta field.','line_number':155,'multiline':False]
['text':' Verifies rows.','line_number':162,'multiline':False]
['text':' Yields after 'yieldAfter'th (0-based) documents. Calling saveState() and','line_number':172,'multiline':False]
['text':' restoreState() here is to emulate what happens when the lock is yielded and','line_number':173,'multiline':False]
['text':' unyielded.','line_number':174,'multiline':False]
['text':' Builds TS bucket unpacking stages on top of an imaginary buckets collection 'inputDocs' and','line_number':182,'multiline':False]
['text':' verifies the results against 'expectedData' which is a vector of BSONObj whose field names','line_number':183,'multiline':False]
['text':' must conform to 'cellPaths'.','line_number':184,'multiline':False]
['text':'','line_number':185,'multiline':False]
['text':' The generated plan shape will look like:','line_number':186,'multiline':False]
['text':'  [1] block_to_row paths[blocksOut[0], ..., blocksOut[N]]','line_number':187,'multiline':False]
['text':'        vals[valsOut[0], ..., valsOut[N]]','line_number':188,'multiline':False]
['text':'  [1] ts_bucket_to_cellblock bucketSlot','line_number':189,'multiline':False]
['text':'        paths[blocksOut[0] = cellPaths[0], ..., blocksOut[N] = cellPaths[N]]','line_number':190,'multiline':False]
['text':'        meta = metaSlot?','line_number':191,'multiline':False]
['text':'  [0] virtual_scan bucketSlot [from 'inputDocs']','line_number':192,'multiline':False]
['text':'','line_number':193,'multiline':False]
['text':' The 'inputDocs' must be of timeseries bucket format, either compressed or uncompressed.','line_number':194,'multiline':False]
['text':' 'yieldAfter' is the ordinal number (0-based) of documents to yield after. The default is the','line_number':195,'multiline':False]
['text':' max size_t, which means no yield.','line_number':196,'multiline':False]
['text':' Stages under tests do not require 'control.min' and 'control.max' fields to be present though','line_number':213,'multiline':False]
['text':' they are mandatory fields. This data is not valid timeseries data.','line_number':214,'multiline':False]
['text':' Stages under tests do not require 'control.min' and 'control.max' fields to be present though','line_number':225,'multiline':False]
['text':' they are mandatory fields. This data is not valid timeseries data.','line_number':226,'multiline':False]
['text':' Verifies that the TsBucketToCellBlockStage exposes the meta field correctly and produces','line_number':239,'multiline':False]
['text':' 'CellBlock's.','line_number':240,'multiline':False]
['text':' Builds a TsBucketToCellBlock stage on top of an imaginary buckets collection.','line_number':242,'multiline':False]
['text':' Prepares the execution tree.','line_number':250,'multiline':False]
['text':' Sets up accessors for results from the TsBucketToCellBlock stage.','line_number':254,'multiline':False]
['text':' Verifies meta field.','line_number':266,'multiline':False]
['text':' Verifies that cell blocks are produced for requested 'cellPaths'.','line_number':271,'multiline':False]
['text':' We don't verify the actual values of the cell blocks here, as that is done in the','line_number':272,'multiline':False]
['text':' 'UnpackBucket*' tests below.','line_number':273,'multiline':False]
['text':' Verifies that each value is of cell block type.','line_number':275,'multiline':False]
['text':' The 'yieldAfter' == 1 means that the execution plan will yield after the second document,','line_number':305,'multiline':False]
['text':' which in turn, means that we yield in the middle of the second bucket for the dataset with','line_number':306,'multiline':False]
['text':' 'bucketWithMeta1' and 'bucketWithMeta2'.','line_number':307,'multiline':False]
['text':'yieldAfter','line_number':312,'multiline':True]
['text':' The 'yieldAfter' == 1 means that the execution plan will yield after the second document,','line_number':325,'multiline':False]
['text':' which in turn, means that we yield in the middle of the second bucket for the dataset with','line_number':326,'multiline':False]
['text':' 'bucketWithMeta1' and 'bucketWithMeta2'.','line_number':327,'multiline':False]
['text':'yieldAfter','line_number':332,'multiline':True]
['text':' Stages under tests do not require 'control.min' and 'control.max' fields to be present though','line_number':335,'multiline':False]
['text':' they are mandatory fields. This data is not valid timeseries data.','line_number':336,'multiline':False]
['text':' No 'meta' field for 'tsOptions' parameter.','line_number':351,'multiline':False]
['text':' The 'yieldAfter' == 1 means that the execution plan will yield in the middle of the bucket.','line_number':369,'multiline':False]
['text':'yieldAfter','line_number':374,'multiline':True]
['text':' The 'yieldAfter' == 0 means that the execution plan will yield in the middle of the bucket.','line_number':385,'multiline':False]
['text':'yieldAfter','line_number':390,'multiline':True]
['text':' Stages under tests do not require 'control.min' and 'control.max' fields to be present though','line_number':393,'multiline':False]
['text':' they are mandatory fields. This data is not valid timeseries data.','line_number':394,'multiline':False]
['text':' Note that the following test cases select only '_id" field and so, we will figure out the number','line_number':409,'multiline':False]
['text':' of measurements in a bucket from the time field.','line_number':410,'multiline':False]
['text':' The 'yieldAfter' == 0 means that the execution plan will yield in the middle of the bucket.','line_number':429,'multiline':False]
['text':'yieldAfter','line_number':434,'multiline':True]
['text':' The 'yieldAfter' == 1 means that the execution plan will yield in the middle of the bucket.','line_number':445,'multiline':False]
['text':'yieldAfter','line_number':450,'multiline':True]
['text':' Note that this data has the 'control.count' field. It facilitates testing the case where we','line_number':453,'multiline':False]
['text':' extract the number of measurements in a bucket directly from it when the bucket is compressed.','line_number':454,'multiline':False]
['text':' To make sure that we are not relying on the 'time' field to figure out the number of measurements','line_number':455,'multiline':False]
['text':' in a bucket, we have set the 'time' field to 4 elements array which is actually invalid data.','line_number':456,'multiline':False]
['text':'','line_number':457,'multiline':False]
['text':' Stages under tests do not require 'control.min' and 'control.max' fields to be present though','line_number':458,'multiline':False]
['text':' they are mandatory fields. This data is not valid timeseries data.','line_number':459,'multiline':False]
['text':' The 'yieldAfter' == 1 means that the execution plan will yield in the middle of the bucket.','line_number':493,'multiline':False]
['text':'yieldAfter','line_number':498,'multiline':True]
['text':' Stages under tests do not require 'control.min' and 'control.max' fields to be present though','line_number':501,'multiline':False]
['text':' they are mandatory fields. This data is not valid timeseries data.','line_number':502,'multiline':False]
['text':' The 1st document is missing the '_id' field.','line_number':525,'multiline':False]
['text':' The 2nd documents is missing the 'f' and 'g' fields.','line_number':527,'multiline':False]
['text':' The 3rd documents is missing the 'f' fields.','line_number':529,'multiline':False]
['text':' The 'yieldAfter' == 0 means that the execution plan will yield in the middle of the bucket.','line_number':542,'multiline':False]
['text':'yieldAfter','line_number':547,'multiline':True]
['text':' The 'yieldAfter' == 1 means that the execution plan will yield in the middle of the bucket.','line_number':558,'multiline':False]
['text':'yieldAfter','line_number':563,'multiline':True]
['text':' Stages under tests do not require 'control.min' and 'control.max' fields to be present though','line_number':566,'multiline':False]
['text':' they are mandatory fields. This data is not valid timeseries data.','line_number':567,'multiline':False]
['text':' Stages under tests do not require 'control.min' and 'control.max' fields to be present though','line_number':601,'multiline':False]
['text':' they are mandatory fields. This data is not valid timeseries data.','line_number':602,'multiline':False]
['text':' The 'yieldAfter' == 1 means that the execution plan will yield in the middle of the bucket.','line_number':639,'multiline':False]
['text':'yieldAfter','line_number':644,'multiline':True]
['text':' The 'yieldAfter' == 0 means that the execution plan will yield in the middle of the bucket.','line_number':655,'multiline':False]
['text':'yieldAfter','line_number':660,'multiline':True]
['text':' Stages under tests do not require 'control.min' and 'control.max' fields to be present though','line_number':663,'multiline':False]
['text':' they are mandatory fields. This data is not valid timeseries data.','line_number':664,'multiline':False]
['text':' The 'yieldAfter' == 0 means that the execution plan will yield in the middle of the bucket.','line_number':708,'multiline':False]
['text':'yieldAfter','line_number':713,'multiline':True]
['text':' The 'yieldAfter' == 1 means that the execution plan will yield in the middle of the bucket.','line_number':724,'multiline':False]
['text':'yieldAfter','line_number':729,'multiline':True]
['text':'
 * Test that the 'bitmap' argument to the BlockToRow stage is used. This bitmap indicates which
 * indexes in the input blocks should be propagated upwards and which should not.
 *
 * The test creates a block_to_row stage above a virtual scan and checks that only the values with
 * a corresponding '1' in the bitmap can be fetched from the block_to_row stage.
 ','line_number':732,'multiline':True]
['text':' The data passed to the virtual scan. This is an array of the form:','line_number':743,'multiline':False]
['text':' [[ValueBlock([42, 43, 44]), ValueBlock([true, false, true])], ...]','line_number':744,'multiline':False]
['text':' Check that the test data is valid.','line_number':748,'multiline':False]
['text':' The virtual scan will return three blocks, each with a corresponding bitset.','line_number':751,'multiline':False]
['text':' Generate the inclusion bitset based on a coin flip.','line_number':766,'multiline':False]
['text':' Construct the SBE PlanStage tree.','line_number':780,'multiline':False]
['text':' last slot is the bitset ','line_number':783,'multiline':True]
['text':' Run the plan and ensure that only values with a corresponding '1' in the bitset are returned.','line_number':788,'multiline':False]
['text':' namespace mongo::sbe','line_number':863,'multiline':False]
