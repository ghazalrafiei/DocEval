['text':'*
 *    Copyright (C) 2022-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' IWYU pragma: keep','line_number':66,'multiline':False]
['text':' Run rewriters while things change','line_number':228,'multiline':False]
['text':' Run rewriters while things change','line_number':282,'multiline':False]
['text':' Create an array of array with one RecordId and one empty document.','line_number':468,'multiline':False]
['text':'hasRID','line_number':492,'multiline':True]
['text':'costModel','line_number':499,'multiline':True]
['text':' Test lowering of a SortedMerge node.','line_number':547,'multiline':False]
['text':' Optimize the logical plan.','line_number':554,'multiline':False]
['text':' We have to fake some metadata for this to work.','line_number':555,'multiline':False]
['text':'costModel','line_number':566,'multiline':True]
['text':' Now we should have a plan with a SortedMerge in it.','line_number':571,'multiline':False]
['text':' TODO SERVER-72010 fix test or SortedMergeNode logic so building VariableEnvironment succeeds','line_number':589,'multiline':False]
['text':' Lower to SBE.','line_number':591,'multiline':False]
['text':' auto env = VariableEnvironment::build(root);','line_number':592,'multiline':False]
['text':' SlotVarMap map;','line_number':593,'multiline':False]
['text':' boost::optional<sbe::value::SlotId> ridSlot;','line_number':594,'multiline':False]
['text':' sbe::value::SlotIdGenerator ids;','line_number':595,'multiline':False]
['text':' SBENodeLowering g{env,','line_number':596,'multiline':False]
['text':'                   ids,','line_number':597,'multiline':False]
['text':'                   phaseManager.getMetadata(),','line_number':598,'multiline':False]
['text':'                   phaseManager.getNodeToGroupPropsMap(),','line_number':599,'multiline':False]
['text':'                   false /*randomScan*/};','line_number':600,'multiline':False]
['text':' auto sbePlan = g.optimize(root, map, ridSlot, ids);','line_number':601,'multiline':False]
['text':' ASSERT_EQ(','line_number':603,'multiline':False]
['text':'     "[4] smerge [s4] [asc] [\n"','line_number':604,'multiline':False]
['text':'     "    [s1] [s1] [3] ixseek ks(2ll, 0, 1ll, 1ll) ks(2ll, 0, 1ll, 2ll) none s1 none [s2 = 0]','line_number':605,'multiline':False]
['text':'     "','line_number':606,'multiline':False]
['text':'     "@\"11111111-1111-1111-1111-111111111111\" @\"index1\" true , \n"','line_number':607,'multiline':False]
['text':'     "    [s3] [s3] [3] ixseek ks(2ll, 0, 2ll, 1ll) ks(2ll, 0, 2ll, 2ll) none s3 none [] "','line_number':608,'multiline':False]
['text':'     "@\"11111111-1111-1111-1111-111111111111\" @\"index2\" true \n"','line_number':609,'multiline':False]
['text':'     "] ",','line_number':610,'multiline':False]
['text':'     sbe::DebugPrinter().print(*sbePlan.get()));','line_number':611,'multiline':False]
['text':' Create an array of 10 arrays, each inner array consisting of a RecordId at the first','line_number':626,'multiline':False]
['text':' position, followed by a document with the field "a" containing sequential integers from 0','line_number':627,'multiline':False]
['text':' to 9.','line_number':628,'multiline':False]
['text':'hasRID','line_number':655,'multiline':True]
['text':' Assert we have one result, and it is equal to {a: 2} with rid = RecordId(2).','line_number':695,'multiline':False]
['text':'isMultiKey','line_number':720,'multiline':True]
['text':' We are not lowering the paths.','line_number':735,'multiline':False]
['text':'requireRID','line_number':742,'multiline':True]
['text':' Used to record the sampling plans.','line_number':753,'multiline':False]
['text':' Not optimizing fully.','line_number':756,'multiline':False]
['text':'requireRID','line_number':764,'multiline':True]
['text':'collectionSize','line_number':767,'multiline':True]
['text':'queryHints','line_number':775,'multiline':True]
['text':' We have a single plan to sample the predicate','line_number':782,'multiline':False]
['text':' NOLINT','line_number':783,'multiline':False]
['text':'*
 * This transport is used to populate default values into the NodeToGroupProps map to get around the
 * fact that the plan was not obtained from the memo. At this point we are interested only in the
 * planNodeIds being distinct.
 ','line_number':806,'multiline':True]
['text':'groupId','line_number':818,'multiline':True]
['text':'logicalProps','line_number':819,'multiline':True]
['text':'physicalProps','line_number':820,'multiline':True]
['text':'ridProjName','line_number':821,'multiline':True]
['text':'cost','line_number':822,'multiline':True]
['text':'localCost','line_number':823,'multiline':True]
['text':'adjustedCE','line_number':824,'multiline':True]
['text':' Construct a spool-based recursive plan to compute the first 10 Fibonacci numbers. The main','line_number':842,'multiline':False]
['text':' plan (first child of the union) sets up the initial conditions (val = 1, prev = 0, and it =','line_number':843,'multiline':False]
['text':' 1), and the recursive subplan is computing the actual Fibonacci sequence and ensures we','line_number':844,'multiline':False]
['text':' terminate after 10 numbers.','line_number':845,'multiline':False]
['text':'spoolId','line_number':852,'multiline':True]
['text':'spoolId','line_number':856,'multiline':True]
['text':' Verify we are getting 10 Fibonacci numbers.','line_number':923,'multiline':False]
['text':' namespace','line_number':933,'multiline':False]
['text':' namespace mongo::optimizer','line_number':934,'multiline':False]
