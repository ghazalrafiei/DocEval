['text':'*
 *    Copyright (C) 2023-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' TODO SERVER-82852 kOutputNonNothingOnMissingInput is already set by ReturnBoolOnMissing{}.','line_number':50,'multiline':False]
['text':' namespace','line_number':61,'multiline':False]
['text':'
 * Given a ValueBlock as input, returns a ValueBlock of true/false values indicating whether
 * each value in the input was non-Nothing (true) or Nothing (false).
 ','line_number':62,'multiline':True]
['text':' Avoid extracting the block if we know every value is non-Nothing.','line_number':73,'multiline':False]
['text':' Block was dense and we could determine the number of the values in the block without','line_number':75,'multiline':False]
['text':' extracting so we can just return a MonoBlock of true.','line_number':76,'multiline':False]
['text':' If the fill value is Nothing, valueBlockFillEmpty will just return the input block unmodified.','line_number':122,'multiline':False]
['text':' namespace','line_number':130,'multiline':False]
['text':'*
 * Implementation of the valueBlockFillEmpty builtin. This instruction takes a block and an
 * SBE value, and produces a new block where all missing values in the block have been replaced
 * with the SBE value.
 ','line_number':132,'multiline':True]
['text':' Input block was dense so we can just return it unmodified.','line_number':150,'multiline':False]
['text':'*
 * Implementation of the valueBlockFillEmptyBlock builtin. This instruction takes two blocks of the
 * same size, and produces a new block where all missing values in the first block have been
 * replaced with the correpsonding value in the second block.
 ','line_number':160,'multiline':True]
['text':'
 * Given a ValueBlock and bitset as input, returns a tag, value pair that contains the minimum value
 * in the block based on compareValue. Values whose corresponding bit is set to false get ignored.
 * This function will return a non-Nothing value if the block contains any non-Nothing values.
 ','line_number':234,'multiline':True]
['text':' less ','line_number':250,'multiline':True]
['text':'
 * Given a ValueBlock and bitset as input, returns a tag, value pair that contains the maximum value
 * in the block based on compareValue. Values whose corresponding bit is set to false get ignored.
 * This function will return a non-Nothing value if the block contains any non-Nothing values.
 ','line_number':253,'multiline':True]
['text':' less ','line_number':269,'multiline':True]
['text':'
 * Given a ValueBlock bitset, count how many "true" elements there are.
 ','line_number':272,'multiline':True]
['text':' TODO SERVER-83450 add monoblock fast path.','line_number':276,'multiline':False]
['text':'
 * Given a ValueBlock and bitset, returns the sum of the elements of the ValueBlock where the bitset
 * indicates true. If all elements of the bitset are false, return Nothing. If there are non-Nothing
 * elements where the bitset indicates true, we return a value. If there are only Nothing elements,
 * we return Nothing.
 ','line_number':296,'multiline':True]
['text':' TODO SERVER-83450 add monoblock fast path.','line_number':303,'multiline':False]
['text':' If we find a non-Nothing value and our current result is nothing, set the result to be','line_number':323,'multiline':False]
['text':' this value.','line_number':324,'multiline':False]
['text':' We do not own the value in the block, so make a copy.','line_number':327,'multiline':False]
['text':' namespace','line_number':362,'multiline':False]
['text':'
 * Comparison against scalar functions.
 ','line_number':376,'multiline':True]
['text':' This is not monotonic, because the min and max not being equal to the target value does not','line_number':391,'multiline':False]
['text':' imply that no values in the block will be equal to the target value.','line_number':392,'multiline':False]
['text':' For neq we apply equal_to and then use genericNot() to negate it, just like the scalar','line_number':401,'multiline':False]
['text':' variation in the VM.','line_number':402,'multiline':False]
['text':'
 * Given two blocks and a mask of equal size, return a new block having the values from the first
 * argument when the matching entry in the mask is True, and the values from the second argument
 * when the matching entry in the mask is False.
 ','line_number':452,'multiline':True]
['text':'*
 * Implementation of the valueBlockApplyLambda instruction. This instruction takes a mask, a block
 * and an SBE lambda f(), and produces a new block with the result of f() applied to each element of
 * the input for which the mask has, in the same position, a 'true' value.
 * A mask value of Nothing is equivalent to a mask full of 'true' values.
 ','line_number':540,'multiline':True]
['text':' We have a valid mask, loop only over the enabled indexes.','line_number':574,'multiline':False]
['text':' Pre-fill with Nothing, and overwrite only the allowed indexes.','line_number':585,'multiline':False]
['text':' Fast path for two homogeneous blocks. Any MonoBlock input should have already returned a','line_number':613,'multiline':False]
['text':' result before calling this function. This code path should almost always be taken.','line_number':614,'multiline':False]
['text':' All resulting bools were the same so we can return a MonoBlock.','line_number':632,'multiline':False]
['text':' Naive implementation for when at least one input block is not a BoolBlock.','line_number':639,'multiline':False]
['text':' Check that both contain all booleans.','line_number':644,'multiline':False]
['text':' All resulting bools were the same so we can return a MonoBlock.','line_number':664,'multiline':False]
['text':' We always assume that the inputs are blocks of bools that can provide a count in O(1).','line_number':694,'multiline':False]
['text':' and True is a noop.','line_number':700,'multiline':False]
['text':' and False returns a block of all falses.','line_number':703,'multiline':False]
['text':' We always assume that the inputs are blocks of bools that can provide a count in O(1).','line_number':734,'multiline':False]
['text':' or True returns a block of all trues.','line_number':740,'multiline':False]
['text':' or False is a noop.','line_number':743,'multiline':False]
['text':' Take ownership of the value, we are transferring it to the block.','line_number':763,'multiline':False]
['text':' Return the input unchanged.','line_number':855,'multiline':False]
['text':' Note: if this code ends up being a bottleneck, we can make some changes. foldCounts()','line_number':864,'multiline':False]
['text':' can be initialized based on the number of 1 bits in filterPosInfo. We can also try to','line_number':865,'multiline':False]
['text':' make 'folded' and 'foldCounts' use one buffer, rather than two.','line_number':866,'multiline':False]
['text':' Represents number of true values in each run.','line_number':868,'multiline':False]
['text':' The last run is implicitly ended.','line_number':877,'multiline':False]
['text':' Return the input unchanged.','line_number':902,'multiline':False]
['text':' namespace mongo::sbe::vm','line_number':923,'multiline':False]
