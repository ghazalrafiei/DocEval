['text':'*
 *    Copyright (C) 2019-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 * This is an abstract base class of all expression types in SBE. The expression types derived form
 * this base must implement two fundamental operations:
 *   - compile method that generates bytecode that is executed by the VM during runtime
 *   - clone method that creates a complete copy of the expression
 *
 * The debugPrint method generates textual representation of the expression for internal debugging
 * purposes.
 ','line_number':57,'multiline':True]
['text':'*
     * Let's optimistically assume a nice binary tree.
     ','line_number':68,'multiline':True]
['text':'*
     * The idiomatic C++ pattern of object cloning. Expressions must be fully copyable as every
     * thread in parallel execution needs its own private copy.
     ','line_number':75,'multiline':True]
['text':'*
     * Returns bytecode directly executable by VM.
     ','line_number':81,'multiline':True]
['text':'*
     * Estimates the size of the current expression node and its children.
     ','line_number':90,'multiline':True]
['text':'*
     * Utility for casting to derived types.
     ','line_number':95,'multiline':True]
['text':'*
     * Utility for casting to derived types.
     ','line_number':103,'multiline':True]
['text':' For printing from an interactive debugger.','line_number':111,'multiline':False]
['text':'*
     * Expressions can never be constructed with nullptr children.
     ','line_number':117,'multiline':True]
['text':' base case','line_number':162,'multiline':False]
['text':' recursive case','line_number':170,'multiline':False]
['text':' base case','line_number':180,'multiline':False]
['text':' recursive case','line_number':195,'multiline':False]
['text':' namespace detail','line_number':211,'multiline':False]
['text':'*
 * This is a constant expression. It assumes the ownership of the input constant.
 ','line_number':251,'multiline':True]
['text':' Views are non-owning so we have to make a copy.','line_number':258,'multiline':False]
['text':'*
 * This is an expression representing a variable. The variable can point to a slot as defined by a
 * SBE plan stages or to a slot defined by a local bind (a.k.a. let) expression. The local binds are
 * identified by the frame id.
 ','line_number':281,'multiline':True]
['text':' If true then accessing this variable will take over the ownership of value. The flag has to','line_number':314,'multiline':False]
['text':' be used carefully only when the variable is used exactly once. When used with slots then the','line_number':315,'multiline':False]
['text':' expression must be guaranteed to be the last use of the slot. Essentially we are simulating','line_number':316,'multiline':False]
['text':' linear type system here.','line_number':317,'multiline':False]
['text':'*
 * This is a binary primitive (builtin) operation.
 ','line_number':321,'multiline':True]
['text':' Logical operations. These operations are short-circuiting.','line_number':327,'multiline':False]
['text':' Nothing-handling operation. This is short-circuiting like logicOr,','line_number':331,'multiline':False]
['text':' but it checks Nothing / non-Nothing instead of false / true.','line_number':332,'multiline':False]
['text':' Math operations.','line_number':335,'multiline':False]
['text':' Comparison operations. These operations support taking a third "collator" arg.','line_number':341,'multiline':False]
['text':' If you add or remove comparison operations or change their order, make sure you','line_number':342,'multiline':False]
['text':' update isComparisonOp() accordingly.','line_number':343,'multiline':False]
['text':'*
 * This is a unary primitive (builtin) operation.
 ','line_number':389,'multiline':True]
['text':'*
 * This is a function call expression. Functions can have arbitrary arity and arguments are
 * evaluated right to left. They are identified simply by a name and we have a dictionary of all
 * supported (builtin) functions.
 ','line_number':416,'multiline':True]
['text':'*
 * This is a conditional (a.k.a. ite) expression.
 ','line_number':440,'multiline':True]
['text':'*
 * This is a let expression that can be used to define local variables.
 ','line_number':463,'multiline':True]
['text':'*
 * A simple lambda value with no captures.
 ','line_number':487,'multiline':True]
['text':'*
 * Evaluating this expression will throw an exception with given error code and message.
 ','line_number':509,'multiline':True]
['text':'*
 * This is a numeric conversion expression. It supports both narrowing and widening conversion under
 * no loss of precision. If a given conversion loses precision the expression results in Nothing.
 * ENumericConvert can be instantiated for the following source to target tags,
 *
 *  NumberInt32 -> NumberInt64, NumberInt32 -> NumberDouble, NumberInt32 -> NumberDecimal
 *  NumberInt64 -> NumberInt32, NumberInt64 -> NumberDouble, NumberInt64 -> NumberDecimal
 *  NumberDouble -> NumberInt32, NumberDouble -> NumberInt64, NumberDouble -> NumberDecimal
 *  NumberDecimal -> NumberInt32, NumberDecimal -> NumberInt64, NumberDecimal -> NumberDouble
 ','line_number':536,'multiline':True]
['text':'*
 * Behavior variants for bit tests supported by match expressions $bitsAllClear, $bitsAllSet,
 * $bitsAnyClear, $bitsAnySet.
 ','line_number':568,'multiline':True]
['text':' namespace sbe','line_number':578,'multiline':False]
['text':' namespace mongo','line_number':579,'multiline':False]
