['text':'*
 *    Copyright (C) 2019-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 * An abstract index scan stage class to share common code for 'SimpleIndexScanStage' and
 * 'GenericIndexScanStage'.
 *
 * The "output" slots are
 *   - 'indexKeySlot': the "KeyString" representing the index entry,
 *   - 'recordIdSlot': a reference that can be used to fetch the entire document,
 *   - 'snapshotIdSlot': the storage snapshot that this index scan is reading from,
 *   - 'indexIdentSlot': the ident of the index being read from, and
 *   - 'vars': one slot for each value in the index key that should be "projected" out of the entry.
 *
 * The 'indexKeysToInclude' bitset determines which values are included in the projection based
 * on their order in the index pattern. The number of bits set in 'indexKeysToInclude' must be
 * the same as the number of slots in the 'vars' SlotVector.
 *
 * The 'forward' flag indicates the direction of the index scan, which can be either forwards or
 * backwards.
 ','line_number':70,'multiline':True]
['text':'*
     * Keeps track of what this index scan is currently doing so that it can do the right thing on
     * the next call to getNext().
     ','line_number':114,'multiline':True]
['text':' Need to seek for next key.','line_number':119,'multiline':False]
['text':' Retrieving the next key.','line_number':121,'multiline':False]
['text':' The index scan is finished.','line_number':123,'multiline':False]
['text':' Seeks and returns the first/next index KeyStringEntry or boost::none if no such key exists.','line_number':127,'multiline':False]
['text':' Returns true if the 'key' is within the bounds and false otherwise. Implementations may set','line_number':129,'multiline':False]
['text':' state internally to reflect whether the scan is done, or whether a new seek point should be','line_number':130,'multiline':False]
['text':' used.','line_number':131,'multiline':False]
['text':'*
     * When this stage is re-opened after being closed, or during yield recovery, called to verify
     * that the index (and the index's collection) remain valid. If any validity check fails, throws
     * a UserException that terminates execution of the query.
     ','line_number':141,'multiline':True]
['text':' Bumps '_specificStats.numReads' and calls trackProgress() if '_tracker' is non-null.','line_number':147,'multiline':False]
['text':' Shares the common code for PlanStage::prepare() implementation.','line_number':149,'multiline':False]
['text':' Shares the common code for PlanStage::open() implementation.','line_number':151,'multiline':False]
['text':' Shares the common code for PlanStage::estimateCompileTimeSize() implementation.','line_number':153,'multiline':False]
['text':' Shares the common code for PlanStage::debugPrint() implementation.','line_number':155,'multiline':False]
['text':' This field holds the latest snapshot ID that we've received from _opCtx->recoveryUnit().','line_number':179,'multiline':False]
['text':' This field gets initialized by prepare(), and it gets updated each time doRestoreState() is','line_number':180,'multiline':False]
['text':' called.','line_number':181,'multiline':False]
['text':' One accessor and slot for each key component that this stage will bind from an index entry's','line_number':184,'multiline':False]
['text':' KeyString. The accessors are in the same order as the key components they bind to.','line_number':185,'multiline':False]
['text':' This buffer stores values that are projected out of the index entry. Values in the','line_number':194,'multiline':False]
['text':' '_accessors' list that are pointers point to data in this buffer.','line_number':195,'multiline':False]
['text':' If provided, used during a trial run to accumulate certain execution stats. Once the trial','line_number':205,'multiline':False]
['text':' run is complete, this pointer is reset to nullptr.','line_number':206,'multiline':False]
['text':'*
 * A stage that iterates the entries of a collection index, starting from a bound specified by the
 * value in 'seekKeyLow' and ending (via IS_EOF) with the 'seekKeyHigh' bound. (A null 'seekKeyHigh'
 * scans to the end of the index. Leaving both bounds as null scans the index from beginning to
 * end.)
 *
 * The input 'seekKeyLow' and 'seekKeyHigh' EExpressions get evaluated as part of the open
 * (or re-open) call. See 'IndexScanStageBase' above for additional information.
 *
 * Debug string representation:
 *
 *   ixscan indexKeySlot? recordIdSlot? snapshotIdSlot? indexIdentSlot?
 *          [slot_1 = fieldNo_1, ..., slot2 = fieldNo_n] collectionUuid indexName forward
 *
 *   ixseek lowKey highKey indexKeySlot? recordIdSlot? snapshotIdSlot? indexIdentSlot?
 *          [slot_1 = fieldNo_1, ..., slot2 = fieldNo_n] collectionUuid indexName forward
 ','line_number':210,'multiline':True]
['text':' Carries the compiled bytecode for the above '_seekKeyLow' and '_seekKeyHigh'.','line_number':265,'multiline':False]
['text':'*
 * A stage that finds all keys of a collection index within the given 'IndexBounds'.
 * The index bounds can't be easily resolved to a small set of intervals in advance to use
 * 'SimpleIndexScanStage', thus this implements a runtime algorithm using the 'IndexBoundsChecker'
 * to calculate a seek point and seek to the beginning of the next interval.
 *
 * The input 'params.indexBounds' EExpression gets evaluated as part of the open (or re-open) call.
 *
 * See comments for IndexScanStageBase above for more detail.
 *
 * Debug string representation:
 *
 *   ixscan_generic indexBounds indexKeySlot? recordIdSlot? snapshotIdSlot? indexIdentSlot?
 *                  [slot_1 = fieldNo_1, ..., slot2 = fieldNo_n] collectionUuid indexName forward
 ','line_number':273,'multiline':True]
['text':' namespace mongo::sbe','line_number':329,'multiline':False]
