['text':'*
 *    Copyright (C) 2023-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 * Evaluates paths on a time series bucket. The constructor input is a set of paths using the
 * Get/Traverse/Id primitives. When given a TS bucket, it evaluates each path on the block of
 * "documents" in the TS bucket, producing a block of cells for each path.
 *
 * TODO PM-3402/after PM-3402: Swap out the naive implementation here with one that uses the new
 * decoding API.
 *
 * TODO: For now only top-level fields are supported.
 ','line_number':49,'multiline':True]
['text':'
     * Returns one CellBlock per path given in the constructor. A CellBlock represents all of the
     * values at a path, along with information on their position.
     ','line_number':63,'multiline':True]
['text':' Set of indexes in _pathReqs which are paths NOT of the form [Get <field> Id]. This includes','line_number':73,'multiline':False]
['text':' paths like [Get <field> Traverse Id] as well as access to nested paths. Paths of the form','line_number':74,'multiline':False]
['text':' [Get <field> Id] can be provided in a special/faster way, since the time series decoding API','line_number':75,'multiline':False]
['text':' (currently) provides top-level fields only.','line_number':76,'multiline':False]
['text':' This maps [top-level field -> [index into '_paths' which start with this field]]','line_number':82,'multiline':False]
['text':'','line_number':83,'multiline':False]
['text':' A vector is needed in case multiple fields with the same prefix (e.g. a.b and a.c) are','line_number':84,'multiline':False]
['text':' requested.','line_number':85,'multiline':False]
['text':'*
 * This class implements a block of data in the time series format which is either a BSON object
 * or a binary BSON column. This class is only used for top-level fields.
 ','line_number':89,'multiline':True]
['text':' Note: This constructor is special and is only used by the TsCellBlockForTopLevelField to','line_number':95,'multiline':False]
['text':' create a TsBlock for a top-level field, where the 'ncells` is actually same as the number of','line_number':96,'multiline':False]
['text':' values in this block.','line_number':97,'multiline':False]
['text':' We don't have use cases for copy/move constructors and assignment operators and so disable','line_number':106,'multiline':False]
['text':' them until we have one.','line_number':107,'multiline':False]
['text':' Return whether or not any values of the field are arrays, otherwise return boost::none.','line_number':118,'multiline':False]
['text':' Checking !isArray after the initial if statement is redundant but this is the','line_number':124,'multiline':False]
['text':' explicit condition we are using to see if a field cannot contain any array values.','line_number':125,'multiline':False]
['text':'*
     * Deblocks the values from a BSON object block.
     ','line_number':158,'multiline':True]
['text':'*
     * Deblocks the values from a BSON column block.
     ','line_number':164,'multiline':True]
['text':' TsBlock owned by the TsCellBlockForTopLevelField which in turn is owned by the','line_number':170,'multiline':False]
['text':' TsBucketToCellBlockStage can be in a special unowned state of '_blockVal', where it is merely','line_number':171,'multiline':False]
['text':' a view on the BSON provided by the stage tree below. This is done as an optimization to avoid','line_number':172,'multiline':False]
['text':' copying all the data we read. Any TsBlocks created outside that stage (either via clone() or','line_number':173,'multiline':False]
['text':' any other way) are fully owned, and have no pointers to outside data. So, we need to keep','line_number':174,'multiline':False]
['text':' track of whether the underlying buffer '_blockVal' is owned or not via '_blockOwned'.','line_number':175,'multiline':False]
['text':'','line_number':176,'multiline':False]
['text':' If the '_blockVal' is not owned, this TsBlock is valid only as long as the underlying BSON.','line_number':177,'multiline':False]
['text':' The number of values in this block.','line_number':182,'multiline':False]
['text':' true if all values in the block are non-nothing. Currently only true for timeField','line_number':185,'multiline':False]
['text':' Store the min and max found in the control field of a bucket','line_number':188,'multiline':False]
['text':'*
 * Implements CellBlock interface for timeseries buckets. Currently this class is only used for top
 * level fields. Subfields use a materialized cell block.
 ','line_number':193,'multiline':True]
['text':'*
     * Constructor.
     *
     * Note: The topLevel in 'topLevel*' parameters means that the value is not nested one inside
     * sub-field of TS bucket "data" field. For example, in the following TS bucket "data" field:
     * {
     *   "control": {...},
     *   "data": {
     *     "foo": {"0": {"a": 1, "b": 1}, "1": [{"a": 2, "b": 2}, {"a": 3, "b": 3}]},
     *   }
     * }
     * the 'topLevelTag' and 'topLevelVal' must be for the value of path "foo" field (hence the
     * top-level), not for the value of paths "foo.a" or "foo.b". The top-level path does not
     * require path navigation.
     ','line_number':199,'multiline':True]
['text':' We don't have use cases for copy/move constructors and assignment operators and so disable','line_number':224,'multiline':False]
['text':' them until we have one.','line_number':225,'multiline':False]
['text':' If _ownedTsBlock is non-null, this points to _ownedTsBlock.','line_number':245,'multiline':False]
['text':' For now this is always empty since only top-level fields are supported.','line_number':248,'multiline':False]
['text':' namespace mongo::sbe::value','line_number':251,'multiline':False]
