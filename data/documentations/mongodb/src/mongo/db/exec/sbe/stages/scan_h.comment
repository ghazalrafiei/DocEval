['text':'*
 *    Copyright (C) 2019-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' IWYU pragma: keep','line_number':42,'multiline':False]
['text':'*
 * Retrieves documents from the collection with the given 'collectionUuid' using the storage API.
 *
 * Iff resuming a prior scan, this stage is given a 'seekRecordIdSlot' from which to read a
 * 'RecordId'. We seek to this 'RecordId' before resuming the scan. 'stageType' is set to "seek"
 * instead of "scan" for this case only.
 *
 * If the 'recordSlot' is provided, then each of the records returned from the scan is placed into
 * an output slot with this slot id. Similarly, if 'recordIdSlot' is provided, then this slot is
 * populated with the record id on each advance.
 *
 * In addition, the scan/seek can extract a set of top-level fields from each document. The caller
 * asks for this by passing a vector of 'scanFieldNames', along with a corresponding slot vector
 * 'scanFieldSlots' into which the resulting values should be stored. These vectors must have the
 * same length.
 *
 * The direction of the scan is controlled by the 'forward' parameter.
 *
 * If this scan is acting as a seek used to obtain the record assocated with a particular record id,
 * then a set of special slots will be provided. In this scenario, we need to detect whether a yield
 * has caused the storage snapshot to advance since the index key was obtained from storage. When
 * the snapshot has indeed advanced, the key may no longer be consistent with the 'RecordStore' and
 * we must verify at runtime that no such inconsistency exists. This requires the scan to know the
 * value of the index key, the identity of the index from which it was obtained, and the id of the
 * storage snapshot from which it was obtained. This information is made available to the seek stage
 * via 'snapshotIdSlot', 'indexIdentSlot', 'indexKeySlot', and 'indexKeyPatternSlot'.
 *
 * For oplog scans, 'oplogTsSlot' will be populated with a copy of the "ts" field (which is the
 * oplog clustering key) from the doc if it is a clustered scan (for use by the EOF filter above the
 * scan) or the caller asked for the latest oplog "ts" value.
 *
 * Debug string representations:
 *
 *  scan recordSlot? recordIdSlot? snapshotIdSlot? indexIdentSlot? indexKeySlot?
 *       indexKeyPatternSlot? minRecordIdSlot? maxRecordIdSlot? [slot1 = fieldName1, ...
 *       slot_n = fieldName_n] collectionUuid forward needOplogSlotForTs
 *
 *  seek seekKeySlot recordSlot? recordIdSlot? snapshotIdSlot? indexIdentSlot? indexKeySlot?
 *       indexKeyPatternSlot? minRecordIdSlot? maxRecordIdSlot? [slot1 = fieldName1, ...
 *       slot_n = fieldName_n] collectionUuid forward needOplogSlotForTs
 ','line_number':85,'multiline':True]
['text':' Returns the primary cursor or the random cursor depending on whether _useRandomCursor is set.','line_number':174,'multiline':False]
['text':'*
     * Resets the state data members for starting the scan in the 'reOpen' case, i.e. skipping state
     * that would be correct after a prior open() call that was NOT followed by a close() call. This
     * is also called by the initial open() to set the same subset of state for the first time to
     * avoid duplicating this code.
     ','line_number':177,'multiline':True]
['text':' Only for a resumed scan ("seek"), this sets '_seekRecordId' to the resume point at runtime.','line_number':185,'multiline':False]
['text':' Only for a clustered collection scan, this sets '_minRecordId' to the lower scan bound.','line_number':188,'multiline':False]
['text':' Only for a clustered collection scan, this sets '_maxRecordId' to the upper scan bound.','line_number':191,'multiline':False]
['text':' '_scanFieldNames' - names of the fields being scanned from the doc','line_number':210,'multiline':False]
['text':' '_scanFieldSlots' - slot IDs corresponding, by index, to _scanFieldAccessors','line_number':211,'multiline':False]
['text':' Tells if this is a forward (as opposed to reverse) scan.','line_number':219,'multiline':False]
['text':' Used to return a random sample of the collection.','line_number':222,'multiline':False]
['text':' Holds the current record.','line_number':229,'multiline':False]
['text':' Holds the RecordId of the current record as a TypeTags::RecordId.','line_number':232,'multiline':False]
['text':' For oplog scans only, holds a copy of the "ts" field of the record (which is the oplog','line_number':241,'multiline':False]
['text':' clustering key) for use by the end-bound EOF filter above the scan, if applicable.','line_number':242,'multiline':False]
['text':' For oplog scans only, holds a cached pointer to the accessor for the "ts" field in the','line_number':245,'multiline':False]
['text':' current document to get this accessor quickly rather than having to look it up in the','line_number':246,'multiline':False]
['text':' '_scanFieldAccessors' hashtable each time.','line_number':247,'multiline':False]
['text':' These members hold info about the target fields being scanned from the record.','line_number':250,'multiline':False]
['text':'     '_scanFieldAccessors' - slot accessors corresponding, by index, to _scanFieldNames','line_number':251,'multiline':False]
['text':'     '_scanFieldAccessorsMap' - a map from vector index to pointer to the corresponding','line_number':252,'multiline':False]
['text':'         accessor in '_scanFieldAccessors'','line_number':253,'multiline':False]
['text':' Only for a resumed scan ("seek"). Slot holding the TypeTags::RecordId of the record to resume','line_number':257,'multiline':False]
['text':' the scan from. '_seekRecordId' is the RecordId value, initialized from the slot at runtime.','line_number':258,'multiline':False]
['text':' Only for clustered collection scans, holds the minimum record ID of the scan, if applicable.','line_number':262,'multiline':False]
['text':' Only for clustered collection scans, holds the maximum record ID of the scan, if applicable.','line_number':266,'multiline':False]
['text':' Only for clustered collection scans: must ScanStage::getNext() include the starting bound?','line_number':270,'multiline':False]
['text':' Only for clustered collection scans: must ScanStage::getNext() include the ending bound?','line_number':273,'multiline':False]
['text':' Only for clustered collection scans: does the scan have an end bound?','line_number':276,'multiline':False]
['text':' Only for clustered collection scans: have we crossed the scan end bound if there is one?','line_number':279,'multiline':False]
['text':' If provided, used during a trial run to accumulate certain execution stats. Once the trial','line_number':284,'multiline':False]
['text':' run is complete, this pointer is reset to nullptr.','line_number':285,'multiline':False]
['text':' TODO: SERVER-62647. Consider removing random cursor when no longer needed.','line_number':291,'multiline':False]
['text':' Tells whether this is the first getNext() call of the scan or after restarting.','line_number':294,'multiline':False]
['text':' Whether the scan should have low storage admission priority.','line_number':297,'multiline':False]
['text':' Flag set upon restoring the stage that indicates whether the cursor's position in the','line_number':303,'multiline':False]
['text':' collection is still valid. Only relevant to capped collections.','line_number':304,'multiline':False]
['text':' Debug-only buffer used to track the last thing returned from the stage. Between','line_number':310,'multiline':False]
['text':' saves/restores this is used to check that the storage cursor has not changed position.','line_number':311,'multiline':False]
['text':' '_scanFieldNames' - names of the fields being scanned from the doc','line_number':394,'multiline':False]
['text':' '_scanFieldSlots' - slot IDs corresponding, by index, to _scanFieldAccessors','line_number':395,'multiline':False]
['text':' Holds the current record.','line_number':403,'multiline':False]
['text':' Holds the RecordId of the current record as a TypeTags::RecordId.','line_number':406,'multiline':False]
['text':' These members hold info about the target fields being scanned from the record.','line_number':415,'multiline':False]
['text':'     '_scanFieldAccessors' - slot accessors corresponding, by index, to _scanFieldNames','line_number':416,'multiline':False]
['text':'     '_scanFieldAccessorsMap' - a map from vector index to pointer to the corresponding','line_number':417,'multiline':False]
['text':'         accessor in '_scanFieldAccessors'','line_number':418,'multiline':False]
['text':' Debug-only buffer used to track the last thing returned from the stage. Between','line_number':436,'multiline':False]
['text':' saves/restores this is used to check that the storage cursor has not changed position.','line_number':437,'multiline':False]
['text':' namespace sbe','line_number':441,'multiline':False]
['text':' namespace mongo','line_number':442,'multiline':False]
