['text':'*
 *    Copyright (C) 2023-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' Tests that copyValue() behaves correctly when given a TypeTags::valueBlock. Uses MonoBlock as','line_number':51,'multiline':False]
['text':' the concrete block type.','line_number':52,'multiline':False]
['text':' Tests that copyValue() behaves correctly when given a TypeTags::valueBlock. Uses MonoBlock as','line_number':66,'multiline':False]
['text':' the concrete block type.','line_number':67,'multiline':False]
['text':' First run the tests using the direct BSON implementation for extracting paths.','line_number':87,'multiline':False]
['text':' Then run the tests with the time series implementation.','line_number':90,'multiline':False]
['text':' Shred the bsons here, produce a time series "bucket"-like thing, and pass it to the','line_number':101,'multiline':False]
['text':' TS decoding implementation.','line_number':102,'multiline':False]
['text':' Keep track of which fields we visited for this bson, so we can pad the','line_number':107,'multiline':False]
['text':' unvisited fields with 'gaps'.','line_number':108,'multiline':False]
['text':' Backfill with missing values.','line_number':115,'multiline':False]
['text':' Fill in missings for fields not present in this document.','line_number':125,'multiline':False]
['text':' Store the bucket into a member variable so that the memory remains valid for the','line_number':140,'multiline':False]
['text':' rest of the test.','line_number':141,'multiline':False]
['text':' Now call into the time series extractor.','line_number':146,'multiline':False]
['text':' Use null as a fill value.','line_number':172,'multiline':False]
['text':' A bunch of documents missing 'a' at the beginning and end.','line_number':225,'multiline':False]
['text':' Get A Id.','line_number':285,'multiline':False]
['text':' Get A Traverse Id.','line_number':300,'multiline':False]
['text':' Get A Traverse Get B Id.','line_number':316,'multiline':False]
['text':' Get A Traverse Get B Traverse Id.','line_number':333,'multiline':False]
['text':' These documents have no values at a.b, however MQL semantics demand','line_number':354,'multiline':False]
['text':' they must know about the array in 'a' for "$a.b" but not for $match.','line_number':355,'multiline':False]
['text':'','line_number':356,'multiline':False]
['text':' This tests that the information kept in Get A Traverse Get B Traverse projection','line_number':357,'multiline':False]
['text':' position info is enough to recover the fact that 'a' had an array.','line_number':358,'multiline':False]
['text':' These have a.b values with the missing value in the middle.','line_number':362,'multiline':False]
['text':' Get A Traverse Get B Traverse Id.','line_number':367,'multiline':False]
['text':' Test HeterogenousBlock::map().','line_number':451,'multiline':False]
['text':' Test MonoBlock::map().','line_number':480,'multiline':False]
['text':' Test ValueBlock::defaultMapImpl().','line_number':610,'multiline':False]
['text':' Test ValueBlock::tokenize().','line_number':639,'multiline':False]
['text':' StringSmall','line_number':645,'multiline':False]
['text':' StringSmall','line_number':649,'multiline':False]
['text':' StringSmall','line_number':651,'multiline':False]
['text':' Test MonoBlock::tokenize().','line_number':670,'multiline':False]
['text':' Int32Block::tokenize(), Int64Block::tokenize(), and DateBlock::tokenize() are effectively','line_number':701,'multiline':False]
['text':' identical so they are combined into 1 test.','line_number':702,'multiline':False]
['text':' Test that first token is Nothing for non-dense blocks.','line_number':705,'multiline':False]
['text':' Test on leading Nothing.','line_number':729,'multiline':False]
['text':' Test on dense input.','line_number':746,'multiline':False]
['text':' Test that default implementation still works for DoubleBlock's.','line_number':765,'multiline':False]
['text':' namespace mongo::sbe','line_number':789,'multiline':False]
