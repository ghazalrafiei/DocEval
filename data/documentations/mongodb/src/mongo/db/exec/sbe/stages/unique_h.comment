['text':'*
 *    Copyright (C) 2020-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 * This stage deduplicates by a given key. Unlike a HashAgg, this stage is not blocking and rows are
 * returned in the same order as they appear in the input stream.
 *
 * TODO: It is possible to optimize this stage in the case where the input is sorted by key X, we
 * are "uniquing" by key Y, and we are guaranteed that all identical values of Y appear are
 * associated with the same key X. In this case the hash table of seen elements can be cleared each
 * time a new key X is encountered.
 *
 * For example, this optimization is possible when the UniqueStage is uniquing by record ID and
 * below it there are non-multikey index scans merged via a SortMerge stage. Each duplicate record
 * ID will be associated with the same sort key.
 *
 * Debug string representation:
 *
 *   unique [<keys>] childStage
 ','line_number':47,'multiline':True]
['text':' Table of keys that have been seen.','line_number':94,'multiline':False]
['text':' namespace mongo::sbe','line_number':101,'multiline':False]
