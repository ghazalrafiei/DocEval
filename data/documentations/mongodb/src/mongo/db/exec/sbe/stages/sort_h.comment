['text':'*
 *    Copyright (C) 2019-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' namespace mongo','line_number':53,'multiline':False]
['text':'*
 * Sorts the incoming data from the 'input' tree. The keys on which we are sorting are given by the
 * order-by slots, 'obs'.  The ascending/descending sort direction associated with each of these
 * order-by slots is given by 'dirs'. The 'obs' and 'dirs' vectors must be the same length. The
 * 'vals' slot vector indicates the values that should associated with the sort keys.
 *
 * Together, a set of values for 'obs' and 'vals' consistute one of the rows being sorted. These
 * rows are materialized at runtime. The given 'memoryLimit' contrains the amount of materialized
 * data that can be held in memory. If this limit is exceeded, and 'allowDiskUse' is false, then
 * this stage throws a query-fatal exception. If 'allowDiskUse' is true, then this stage will spill
 * materialized rows to disk.
 *
 * If 'limit' is not std::numeric_limits<size_t>::max(), then this is a top-k sort that should only
 * return the number of rows given by the limit.
 *
 * This stage is a binding reflector, meaning that only the 'obs' and 'vals' slots are visible to
 * nodes higher in the tree.
 *
 * Debug string representation:
 *
 *   sort [<order-by slots>] [asc/desc, ...] [<value slots>] limit? childStage
 ','line_number':56,'multiline':True]
['text':' If provided, used during a trial run to accumulate certain execution stats. Once the','line_number':172,'multiline':False]
['text':' trial run is complete, this pointer is reset to nullptr.','line_number':173,'multiline':False]
['text':' namespace mongo::sbe','line_number':176,'multiline':False]
