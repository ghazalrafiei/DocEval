['text':'*
 *    Copyright (C) 2022-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' Assign a frame ID for the local variable bound by this Let expression.','line_number':136,'multiline':False]
['text':' ABT let binds only a single variable. When we extend it to support multiple binds then we','line_number':147,'multiline':False]
['text':' have to revisit how we map variable names to sbe slot ids.','line_number':148,'multiline':False]
['text':' Assign a frame ID for the local variable bound by this LambdaAbstraction.','line_number':153,'multiline':False]
['text':' lambda applications are not directly supported by SBE (yet) and must not be present.','line_number':171,'multiline':False]
['text':' If this variable was defined by a Let expression, use the frame ID that was defined in','line_number':180,'multiline':False]
['text':' the prepare() step for the Let.','line_number':181,'multiline':False]
['text':' Similarly if the variable was defined by a lambda abstraction, use a frame ID rather','line_number':188,'multiline':False]
['text':' than a slot.','line_number':189,'multiline':False]
['text':' If variable was not defined in the scope of the local expression via a Let or','line_number':197,'multiline':False]
['text':' LambdaAbstraction, it must be a reference that will be in the slotMap.','line_number':198,'multiline':False]
['text':' We directly translate BinaryOp [EqMember] to the SBE function isMember.','line_number':213,'multiline':False]
['text':' If binary operations are type bracketed, then we can translate this comparison','line_number':236,'multiline':False]
['text':' directly to SBE's type bracketed comparison operator.','line_number':237,'multiline':False]
['text':' If binary operations have a total order, then we generate the comparison using a','line_number':241,'multiline':False]
['text':' cmp3w expression to achieve the desired semantics. For example, a < b will','line_number':242,'multiline':False]
['text':' generate lt(cmp3w(a, b), 0).','line_number':243,'multiline':False]
['text':'
 * In the ABT, the shard filtering operation is represented by a FunctionCall node with n
 * arguments, in which each argument is a projection of the value of one field of the
 * shard key (which has n fields). In the SBE plan, the shard filtering is represented by a
 * 2-argument function called shardFilter. The first argument is the slotID of a slot that
 * contains a ShardFilterer instance. The second argument to shardFilter is a function
 * (makeBsonObj) that takes a spec for the construction of an object which evaluates to the
 * shard key (e.g. the output of the function is {a:1, b:1, ...}).
 ','line_number':278,'multiline':True]
['text':' First, get the paths to the shard key fields.','line_number':294,'multiline':False]
['text':' Specify a BSONObj which will contain the shard key values.','line_number':304,'multiline':False]
['text':' Each argument corresponds to one component of the shard key. This loop lowers an expression','line_number':320,'multiline':False]
['text':' for each component. The ShardFilterer expects the BSONObj of the shard key to have values for','line_number':321,'multiline':False]
['text':' each component of the shard key; since shard components may be missing, we must wrap the','line_number':322,'multiline':False]
['text':' expression in a fillEmpty to coerce a missing shard key component to an explicit null. For','line_number':323,'multiline':False]
['text':' example, if the shard key is {a: 1, b: 1} and the document is {b: 123}, the object we will','line_number':324,'multiline':False]
['text':' generate is {a: null, b: 123}.','line_number':325,'multiline':False]
['text':' Prepare the FunctionCall expression.','line_number':349,'multiline':False]
['text':' This input parameter id has already been tied to a particular runtime environment','line_number':423,'multiline':False]
['text':' slot. Just return that slot to the caller. This can happen if a query planning','line_number':424,'multiline':False]
['text':' optimization or rewrite chose to clone one of the input expressions from the','line_number':425,'multiline':False]
['text':' user's query.','line_number':426,'multiline':False]
['text':' owned ','line_number':431,'multiline':True]
['text':' TODO - this is an open question how to do the name mappings.','line_number':439,'multiline':False]
['text':' Need to dedup here, because even if 'projections' is unique, 'slotMap' can map two','line_number':484,'multiline':False]
['text':' projections to the same slot. 'convertProjectionsToSlots' can't dedup because it preserves','line_number':485,'multiline':False]
['text':' the order of items in the vector.','line_number':486,'multiline':False]
['text':' If we required rid on the Root node, populate ridSlot.','line_number':552,'multiline':False]
['text':' Deliver the ridSlot separate from the slotMap.','line_number':556,'multiline':False]
['text':' If the evaluation node is only renaming a variable, do not place a project stage.','line_number':590,'multiline':False]
['text':' Dependency analysis: this node can be merged with its child into the same project stage if it','line_number':597,'multiline':False]
['text':' is independent from the child and the child is not a simple rename of a variable.','line_number':598,'multiline':False]
['text':' This node can be merged with its child.','line_number':614,'multiline':False]
['text':' Check if the filter expression is 'constant' (i.e., does not depend on any variables); then','line_number':650,'multiline':False]
['text':' create FilterStage<true> if it is constant, or FilterStage<false> otherwise.','line_number':651,'multiline':False]
['text':' The DOP is obtained from the child (number of producers).','line_number':682,'multiline':False]
['text':' Initialized to arbitrary placeholder','line_number':697,'multiline':False]
['text':' We set 'localPolicy' to 'ExchangePolicy::rangepartition' here, but there is more','line_number':713,'multiline':False]
['text':' that we need to do to actually support the RangePartitioning distribution.','line_number':714,'multiline':False]
['text':' TODO SERVER-62523: Implement real support for the RangePartitioning distribution','line_number':715,'multiline':False]
['text':' and add some test coverage.','line_number':716,'multiline':False]
['text':' TODO: is there a more efficient way to compute clustered collation op than sort?','line_number':754,'multiline':False]
['text':' TODO: obtain defaults for these.','line_number':796,'multiline':False]
['text':' 100MB','line_number':797,'multiline':False]
['text':'isStack','line_number':881,'multiline':True]
['text':'isStack','line_number':885,'multiline':True]
['text':' Ideally, we should make a distinction between gbBind and gbRefs; i.e. internal references','line_number':904,'multiline':False]
['text':' used by the hash agg to determinte the group by values from its input and group by values as','line_number':905,'multiline':False]
['text':' outputted by the hash agg after the grouping. However, SBE hash agg uses the same slot it to','line_number':906,'multiline':False]
['text':' represent both so that distinction is kind of moot.','line_number':907,'multiline':False]
['text':' Similar considerations apply to the agg expressions as to the group by columns.','line_number':919,'multiline':False]
['text':' TODO: We need to update the nullptr to pass in the initializer expression for certain','line_number':935,'multiline':False]
['text':' accumulators.','line_number':936,'multiline':False]
['text':' Unused','line_number':942,'multiline':False]
['text':'optimizedClose','line_number':949,'multiline':True]
['text':'allowDiskUse','line_number':951,'multiline':True]
['text':' Since we are always disallowing disk use for this stage,','line_number':952,'multiline':False]
['text':' we need not provide merging expressions. Once spilling','line_number':953,'multiline':False]
['text':' is permitted here, we will need to generate merging','line_number':954,'multiline':False]
['text':' expressions during lowering.','line_number':955,'multiline':False]
['text':'mergingExprs','line_number':956,'multiline':True]
['text':' List of correlated projections (bound in outer side and referred to in the inner side).','line_number':970,'multiline':False]
['text':' Sorting is not essential. Here we sort only for SBE plan stability.','line_number':975,'multiline':False]
['text':' However, we should deduplicate the slots, in case two projections mapped to the same slot.','line_number':977,'multiline':False]
['text':' Note the inner and outer sides here are reversed. The HashJoinNode assumes the build side is','line_number':1017,'multiline':False]
['text':' the inner side while sbe hash join stage assumes the build side is the outer side.','line_number':1018,'multiline':False]
['text':' Add RID projection only from outer side.','line_number':1028,'multiline':False]
['text':' Add RID projection only from outer side.','line_number':1064,'multiline':False]
['text':'refs','line_number':1087,'multiline':True]
['text':' Use a fresh map to prevent same projections for every child being overwritten. We','line_number':1101,'multiline':False]
['text':' initialize with the current map in order to be able to use correlated slots.','line_number':1102,'multiline':False]
['text':' Find the slots for the collation keys. Also find slots for other values passed.','line_number':1110,'multiline':False]
['text':' Note that lowering for SortedMergeNode does not take into account required projections','line_number':1113,'multiline':False]
['text':' from the Cascade props for this node. Like UnionNode, it's expected that all fields that','line_number':1114,'multiline':False]
['text':' should be visible above a SortedMergeNode should be added to the exprBinder explicitly','line_number':1115,'multiline':False]
['text':' before lowering.','line_number':1116,'multiline':False]
['text':'refs','line_number':1151,'multiline':True]
['text':' Use a fresh map to prevent same projections for every child being overwritten. We','line_number':1158,'multiline':False]
['text':' initialize with the current map in order to be able to use correlated slots.','line_number':1159,'multiline':False]
['text':' Union with one child is used to restrict projections. Do not place a union stage.','line_number':1166,'multiline':False]
['text':' The unwind is overwriting the output projection.','line_number':1210,'multiline':False]
['text':'canOverwrite','line_number':1211,'multiline':True]
['text':' Allow overwriting slots for rid projections only. We have a single rid projection per','line_number':1230,'multiline':False]
['text':' collection.','line_number':1231,'multiline':False]
['text':'canOverwrite','line_number':1232,'multiline':True]
['text':'binds','line_number':1251,'multiline':True]
['text':' Unused.','line_number':1267,'multiline':False]
['text':' minRecordIdSlot ','line_number':1310,'multiline':True]
['text':' maxRecordIdSlot ','line_number':1311,'multiline':True]
['text':' lowPriority ','line_number':1316,'multiline':True]
['text':' TODO: ordering is unsigned int32??','line_number':1343,'multiline':False]
['text':' For a reverse scan, we start from the high bound and iterate until the low bound.','line_number':1354,'multiline':False]
['text':' For the start point, we want to seek ExclusiveBefore iff the bound is inclusive,','line_number':1356,'multiline':False]
['text':' so that values equal to the seek value are included.','line_number':1357,'multiline':False]
['text':' For the end point we want the opposite.','line_number':1361,'multiline':False]
['text':' Make sure vars are in sorted order on index field position.','line_number':1403,'multiline':False]
['text':'isLower','line_number':1420,'multiline':True]
['text':'isLower','line_number':1422,'multiline':True]
['text':' Unused.','line_number':1427,'multiline':False]
['text':'binds','line_number':1448,'multiline':True]
['text':'refs','line_number':1449,'multiline':True]
['text':' minRecordIdSlot ','line_number':1479,'multiline':True]
['text':' maxRecordIdSlot ','line_number':1480,'multiline':True]
['text':'forward','line_number':1481,'multiline':True]
['text':' namespace mongo::optimizer','line_number':1486,'multiline':False]
