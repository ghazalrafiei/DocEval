['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 * This file contains a test framework for testing sbe::PlanStages.
 ','line_number':30,'multiline':True]
['text':' We want to avoid recursive locking since this results in yield plans that don't yield when','line_number':81,'multiline':False]
['text':' they should.','line_number':82,'multiline':False]
['text':' Allocate an array to hold the results.','line_number':117,'multiline':False]
['text':' Loop and repeatedly call getNext() until we reach the end, storing the values produced','line_number':121,'multiline':False]
['text':' into the array.','line_number':122,'multiline':False]
['text':' Test out saveState() and restoreState() for 50% of the documents (the first document,','line_number':128,'multiline':False]
['text':' the third document, the fifth document, and so on).','line_number':129,'multiline':False]
['text':' Allocate an SBE array to hold the results.','line_number':144,'multiline':False]
['text':' Loop and repeatedly call getNext() until we reach the end.','line_number':149,'multiline':False]
['text':' Create a new SBE array (`arr`) containing the values produced by each SlotAccessor','line_number':152,'multiline':False]
['text':' and insert `arr` into the array of results.','line_number':153,'multiline':False]
['text':' Test out saveState() and restoreState() for 50% of the documents (the first document,','line_number':164,'multiline':False]
['text':' the third document, the fifth document, and so on).','line_number':165,'multiline':False]
['text':' Set up a ValueGuard to ensure `expected` gets released.','line_number':185,'multiline':False]
['text':' Generate a mock scan from `input` with a single output slot.','line_number':188,'multiline':False]
['text':' Call the `makeStage` callback to create the PlanStage that we want to test, passing in','line_number':191,'multiline':False]
['text':' the mock scan subtree and its output slot.','line_number':192,'multiline':False]
['text':' Prepare the tree and get the SlotAccessor for the output slot.','line_number':195,'multiline':False]
['text':' Get all the results produced by the PlanStage we want to test.','line_number':198,'multiline':False]
['text':' Compare the results produced with the expected output and assert that they match.','line_number':202,'multiline':False]
['text':' Set up a ValueGuard to ensure `expected` gets released.','line_number':214,'multiline':False]
['text':' Generate a mock scan from `input` with multiple output slots.','line_number':217,'multiline':False]
['text':' Call the `makeStageMulti` callback to create the PlanStage that we want to test, passing','line_number':220,'multiline':False]
['text':' in the mock scan subtree and its output slots.','line_number':221,'multiline':False]
['text':' Prepare the tree and get the SlotAccessors for the output slots.','line_number':224,'multiline':False]
['text':' Get all the results produced by the PlanStage we want to test.','line_number':227,'multiline':False]
['text':' Compare the results produced with the expected output and assert that they match.','line_number':231,'multiline':False]
['text':' namespace mongo::sbe','line_number':235,'multiline':False]
