['text':'*
 *    Copyright (C) 2023-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' Loop over each element in the array.','line_number':48,'multiline':False]
['text':' If 'tag' is an array and we have not exceeded the maximum depth yet, traverse','line_number':51,'multiline':False]
['text':' the array.','line_number':52,'multiline':False]
['text':' Otherwise, if 'tag' is not an object and 'nonObjInputBehavior' is not 'kNewObj',','line_number':59,'multiline':False]
['text':' then we either append 'tag'/'val' if ('nonObjInputBehavior' is 'kReturnInput') or we','line_number':60,'multiline':False]
['text':' skip 'tag'/'val' (if 'nonObjInputBehavior' is 'kReturnNothing').','line_number':61,'multiline':False]
['text':' For all other cases, call produceBsonObject().','line_number':66,'multiline':False]
['text':' If 'tag' is an array and we have not exceeded the maximum depth yet, traverse the array.','line_number':83,'multiline':False]
['text':' Otherwise, if 'tag' is not an object and 'nonObjInputBehavior' is not 'kNewObj',','line_number':90,'multiline':False]
['text':' then we either append 'tag'/'val' if ('nonObjInputBehavior' is 'kReturnInput') or we','line_number':91,'multiline':False]
['text':' skip 'tag'/'val' (if 'nonObjInputBehavior' is 'kReturnNothing').','line_number':92,'multiline':False]
['text':' For all other cases, call produceBsonObject().','line_number':97,'multiline':False]
['text':' The 'visited' array keeps track of which computed fields have been visited so far so','line_number':125,'multiline':False]
['text':' that later we can append the non-visited computed fields to the end of the object.','line_number':126,'multiline':False]
['text':'','line_number':127,'multiline':False]
['text':' Note that we only use the 'visited' array when 'recordVisits' is true.','line_number':128,'multiline':False]
['text':' If 'isClosed' is false, loop over the input object until 'fieldsLeft == 0' is true. If','line_number':142,'multiline':False]
['text':' 'isClosed' is true, loop over the input object until 'fieldsLeft == 0' is true or until','line_number':143,'multiline':False]
['text':' 'fieldsLeft == 1 && valueArgsLeft == 1' is true.','line_number':144,'multiline':False]
['text':' Get the idx of the current field and the corresponding action type.','line_number':147,'multiline':False]
['text':' Get the value arg and store it into 'tag'/'val'.','line_number':170,'multiline':False]
['text':' Append the value arg to 'bob'.','line_number':175,'multiline':False]
['text':' Increment 'mandatoryLamsAndMakeObjsVisited' if appropriate.','line_number':179,'multiline':False]
['text':' Get the current value from 'cursor' and store it to 'inputTag'/'inputVal'.','line_number':184,'multiline':False]
['text':' Get the lambda corresponding to 'fieldIdx' and get the offset of the lambda.','line_number':187,'multiline':False]
['text':' Push the lambda's input onto the stack and invoke the lambda.','line_number':193,'multiline':False]
['text':' Append the lambda's return value to 'bob', then pop the return value','line_number':197,'multiline':False]
['text':' off of the stack and release it.','line_number':198,'multiline':False]
['text':' Increment 'mandatoryLamsAndMakeObjsVisited' if appropriate.','line_number':204,'multiline':False]
['text':' Get the current value from 'cursor' and store it to 'inputTag'/'inputVal', and then','line_number':210,'multiline':False]
['text':' call traverseAndProduceBsonObj() to produce the object.','line_number':211,'multiline':False]
['text':' If 'isClosed' is false and 'cursor' has not reached the end of the input object, copy over','line_number':221,'multiline':False]
['text':' the remaining fields from the input object to the output object.','line_number':222,'multiline':False]
['text':' If there are remaining fields in 'fields' that need to be processed, take care of processing','line_number':229,'multiline':False]
['text':' those remaining fields here.','line_number':230,'multiline':False]
['text':' Loop over 'fields' (skipping past the simple "keeps"/"drops" at the beginning','line_number':233,'multiline':False]
['text':' of the vector).','line_number':234,'multiline':False]
['text':' Skip fields that have already been visited.','line_number':236,'multiline':False]
['text':' Get the field name for this field, and then consult 'action' to see what','line_number':242,'multiline':False]
['text':' action should be taken.','line_number':243,'multiline':False]
['text':' Get the value arg and store it into 'tag'/'val'.','line_number':248,'multiline':False]
['text':' Append the value arg to 'bob'.','line_number':252,'multiline':False]
['text':' If 'lambdaArg.returnsNothingOnMissingInput' is false, then we need to','line_number':255,'multiline':False]
['text':' invoke the lamdba.','line_number':256,'multiline':False]
['text':' Get the lambda corresponding to 'fieldIdx' and the offset of the lambda.','line_number':262,'multiline':False]
['text':' Push the lambda's input (Nothing) onto the stack and invoke the lambda.','line_number':268,'multiline':False]
['text':' Append the lambda's return value to 'bob', then pop the return value','line_number':272,'multiline':False]
['text':' off of the stack and release it.','line_number':273,'multiline':False]
['text':' If 'fieldSpec->returnsNothingOnMissingInput()' is false, then we need to','line_number':278,'multiline':False]
['text':' produce the object.','line_number':279,'multiline':False]
['text':' Call traverseAndProduceBsonObj() to produce the object.','line_number':285,'multiline':False]
['text':' Invoke the produceBsonObject() lambda with the appropriate cursor type.','line_number':350,'multiline':False]
['text':' namespace mongo::sbe::vm','line_number':369,'multiline':False]
