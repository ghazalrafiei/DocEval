['text':'*
 *    Copyright (C) 2023-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' Build a mapping from the top level field name to the bucket's corresponding bson element.','line_number':89,'multiline':False]
['text':' The time series decoding API gives us the top level fields only, and our CellBlock','line_number':106,'multiline':False]
['text':' extraction code expects full BSON objects. For now we resolve this mismatch by converting','line_number':107,'multiline':False]
['text':' the decoded output into BSON, and then re-extracting. This is really awful in terms of','line_number':108,'multiline':False]
['text':' performance, but the hope is that a new decoding API will be made available, and this','line_number':109,'multiline':False]
['text':' code can be deleted.','line_number':110,'multiline':False]
['text':' To avoid repeated allocations, we put all of the BSONObjs into one giant buffer (bsonBuffer).','line_number':112,'multiline':False]
['text':' We keep track of their offsets in 'bsonOffsets'.','line_number':113,'multiline':False]
['text':' The set of indexes in _pathReqs which begin with this top level field.','line_number':127,'multiline':False]
['text':'View','line_number':129,'multiline':True]
['text':'View','line_number':135,'multiline':True]
['text':'View','line_number':138,'multiline':True]
['text':' The time field cannot be nothing.','line_number':141,'multiline':False]
['text':' Initialize a TsBlock for the top level field. For paths of the form [Get <field> Id], or','line_number':144,'multiline':False]
['text':' equivalent, we will create a CellBlock. For nested paths that aren't eligible for the','line_number':145,'multiline':False]
['text':' fast path, we will call extract() on this TsBlock, and then pull the values out from the','line_number':146,'multiline':False]
['text':' nested bson.','line_number':147,'multiline':False]
['text':'owned','line_number':149,'multiline':True]
['text':' Build a list of values 'pathIndexesForCurrentField' which are not top-level Gets.','line_number':157,'multiline':False]
['text':' This path is a top level [Get <field> Id] path. We assign to its corresponding','line_number':162,'multiline':False]
['text':' output the top level cellblock. Note that we keep the raw pointer to this','line_number':163,'multiline':False]
['text':' CellBlock in 'topLevelCellBlock' so that if we end up decoding this CellBlock,','line_number':164,'multiline':False]
['text':' we do so once, and via same TsCellBlockForTopLevelField instance.','line_number':165,'multiline':False]
['text':' Remember this PathReq index for later.','line_number':168,'multiline':False]
['text':' There are no more paths that were requested which begin with this top level field.','line_number':173,'multiline':False]
['text':' First check if we are traversing a top level field AND there are no arrays. The path','line_number':178,'multiline':False]
['text':' must look like: [Get <field> Traverse Id]. If this is the case, we take a fast path and','line_number':179,'multiline':False]
['text':' skip the work of shredding the whole thing.','line_number':180,'multiline':False]
['text':' In this case the top level TsCellBlockForTopLevelField (representing the [Get','line_number':189,'multiline':False]
['text':' <field> Id]) is identical to the path [Get <field> Traverse Id]. We make a top','line_number':190,'multiline':False]
['text':' level cell block with an unowned pointer.','line_number':191,'multiline':False]
['text':' There's no need to do any more work for this top level field. Every path request','line_number':199,'multiline':False]
['text':' was a top level get or eligible for the fast path.','line_number':200,'multiline':False]
['text':' Fill in any empty spots in the output with a block of [Nothing, Nothing...].','line_number':238,'multiline':False]
['text':' The underlying buffer is owned by this TsBlock and so this releases it.','line_number':268,'multiline':False]
['text':' controlMin and controlMax are always owned so we always need to release them.','line_number':271,'multiline':False]
['text':' There's a missing index or a hole in the middle or at the tail, so returns','line_number':282,'multiline':False]
['text':' Nothing.','line_number':283,'multiline':False]
['text':' Always makes a copy to match the behavior to the BSONColumn case's and simplify','line_number':288,'multiline':False]
['text':' the SBE value ownership model. The underlying buffer for the BSON object block is','line_number':289,'multiline':False]
['text':' owned by this TsBlock or not so we would not necessarily need to always copy the','line_number':290,'multiline':False]
['text':' values out of it.','line_number':291,'multiline':False]
['text':'','line_number':292,'multiline':False]
['text':' TODO SERVER-79612: Avoid copying values out of the BSON object block if','line_number':293,'multiline':False]
['text':' necessary.','line_number':294,'multiline':False]
['text':' BSONColumn::Iterator decompresses values into its own buffer which is invalidated','line_number':317,'multiline':False]
['text':' whenever the iterator advances, so we need to copy them out.','line_number':318,'multiline':False]
['text':'View','line_number':319,'multiline':True]
['text':' TODO: If we've already decoded the output, there's no need to re-copy the entire bson','line_number':329,'multiline':False]
['text':' column. We could instead just copy the decoded values and metadata.','line_number':330,'multiline':False]
['text':' The new copy must own the copied underlying buffer.','line_number':334,'multiline':False]
['text':'owned','line_number':335,'multiline':True]
['text':' If the block has been deblocked, then we need to copy the deblocked values too to','line_number':338,'multiline':False]
['text':' avoid deblocking overhead again.','line_number':339,'multiline':False]
['text':' If the _blockTag is TypeTags::bsonObject, then the underlying bucket is using the v1','line_number':356,'multiline':False]
['text':' schema. Since v1 buckets are unsorted and the bucket min of the time field is a lower','line_number':357,'multiline':False]
['text':' bound, we just ignore it and return Nothting since verifying the true minimum requires','line_number':358,'multiline':False]
['text':' traversing the entire block anyways.','line_number':359,'multiline':False]
['text':' control.min is only a lower bound for the time field but v2 buckets are sorted by','line_number':361,'multiline':False]
['text':' time, so we can easily get the true min by reading the first element in the block.','line_number':362,'multiline':False]
['text':'View','line_number':365,'multiline':True]
['text':' Timeseries computes min and max for arrays/objects differently from our language. As','line_number':368,'multiline':False]
['text':' a result, the min/max value is not guaranteed to a member of the block so we choose','line_number':369,'multiline':False]
['text':' not to expose it.','line_number':370,'multiline':False]
['text':' Using raw new to access private constructor.','line_number':402,'multiline':False]
['text':' The 'count' means the number of cells in this TsCellBlockForTopLevelField and as of','line_number':416,'multiline':False]
['text':' now, we only support top-level fields only, the number of values per cell is always 1','line_number':417,'multiline':False]
['text':' and the number of cells in this TsCellBlockForTopLevelField is always the same as the','line_number':418,'multiline':False]
['text':' number of values in '_tsBlock'. So, we pass 'count' to '_tsBlock' as the number of','line_number':419,'multiline':False]
['text':' values in it.','line_number':420,'multiline':False]
['text':' namespace mongo::sbe::value','line_number':435,'multiline':False]
