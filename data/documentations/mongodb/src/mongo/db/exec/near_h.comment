['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 * An abstract stage which uses a progressive sort to return results sorted by distance.  This
 * is useful when we do not have a full ordering computed over the distance metric and don't
 * want to generate one.
 *
 * Some parts of the geoNear implementation depend on the type of index being used, so
 * subclasses need to implement these three functions:
 *
 * - initialize() - Prepares the stage to begin the geoNear search. Must return IS_EOF iff the
 *                  stage is prepared to begin buffering documents.
 * - nextInterval() - Must return the bounds of the next interval with a PlanStage that will find
 *                    all of the results in this interval that have not already been buffered in
 *                    previous intervals.
 * - computeDistance() - Must return the distance from a document to the centroid of search using
 *                       the correct metric (spherical/flat, radians/meters).
 *
 * For example - given a distance search over documents with distances from [0 -> 10], the child
 * stage might break up the search into intervals [0->5),[5,7),[7->10].
 *
 * Each interval requires a PlanStage which returns all of the results in the interval that have
 * not been buffered in a previous interval.  Results in each interval are buffered fully before
 * being returned to ensure that ordering is preserved. Results that are in the cover, but outside
 * the outer bounds of the current interval will remain buffered to be returned in subsequent
 * search intervals.
 *
 * For efficient search, the child stage should not return too many results outside the interval,
 * but correctness only depends on all the results in the interval being buffered before any are
 * returned. As an example, a PlanStage for the interval [0->5) might just be a full collection
 * scan - this will always buffer every result in the interval, but is slow.  If there is an index
 * available, an IndexScan stage might also return all documents with distance [0->5) but
 * would be much faster.
 *
 * Also for efficient search, the intervals should not be too large or too small - though again
 * correctness does not depend on interval size.
 *
 * The child stage may return duplicate documents, so it is the responsibility of NearStage to
 * deduplicate. Every document in _resultBuffer is kept track of in _seenDocuments. When a document
 * is returned, it is removed from _seenDocuments.
 *
 * TODO: Right now the interface allows the nextCovering() to be adaptive, but doesn't allow
 * aborting and shrinking a covered range being buffered if we guess wrong.
 ','line_number':48,'multiline':True]
['text':'*
     * Subclasses of NearStage must provide basics + a stats object which gets owned here.
     ','line_number':104,'multiline':True]
['text':'','line_number':114,'multiline':False]
['text':' Methods implemented for specific search functionality','line_number':115,'multiline':False]
['text':'','line_number':116,'multiline':False]
['text':'*
     * Constructs the next covering over the next interval to buffer results from, or nullptr if the
     * full range has been searched.  Use the provided working set as the working set for the
     * covering stage if required.
     ','line_number':118,'multiline':True]
['text':'*
     * Computes the distance value for the given member data, or -1 if the member should not be
     * returned in the sorted results.
     ','line_number':126,'multiline':True]
['text':'
     * Initialize near stage before buffering the data.
     * Return IS_EOF if subclass finishes the initialization.
     * Return NEED_TIME if we need more time.
     * Return errors if an error occurs.
     * Can't return ADVANCED.
     ','line_number':132,'multiline':True]
['text':' Filled in by subclasses.','line_number':147,'multiline':False]
['text':'','line_number':151,'multiline':False]
['text':' Generic methods for progressive search functionality','line_number':152,'multiline':False]
['text':'','line_number':153,'multiline':False]
['text':'','line_number':159,'multiline':False]
['text':' Generic state for progressive near search','line_number':160,'multiline':False]
['text':'','line_number':161,'multiline':False]
['text':' A progressive search works in stages of buffering and then advancing','line_number':165,'multiline':False]
['text':' Tracks RecordIds from the child stage to do our own deduping.','line_number':173,'multiline':False]
['text':' Stats for the stage covering this interval','line_number':176,'multiline':False]
['text':' This is owned by _specificStats','line_number':177,'multiline':False]
['text':' Sorted buffered results to be returned - the current interval','line_number':180,'multiline':False]
['text':' Stats','line_number':184,'multiline':False]
['text':' The current stage from which this stage should buffer results','line_number':187,'multiline':False]
['text':' Pointer to the last interval in _childrenIntervals. Owned by _childrenIntervals.','line_number':188,'multiline':False]
['text':' All children CoveredIntervals and the sub-stages owned by them.','line_number':191,'multiline':False]
['text':'','line_number':192,'multiline':False]
['text':' All children intervals except the last active one are only used by getStats(),','line_number':193,'multiline':False]
['text':' because they are all EOF.','line_number':194,'multiline':False]
['text':'*
 * A covered interval over which a portion of a near search can be run.
 ','line_number':198,'multiline':True]
['text':' Owned in PlanStage::_children.','line_number':204,'multiline':False]
['text':' namespace mongo','line_number':211,'multiline':False]
