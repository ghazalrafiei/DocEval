['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 * A type used to identify indexes that have been registered with the WorkingSet. A WorkingSetMember
 * can be associated with a particular index via this id.
 ','line_number':61,'multiline':True]
['text':'*
 * The key data extracted from an index.  Keeps track of both the key (currently a BSONObj) and
 * the index that provided the key.  The index key pattern is required to correctly interpret
 * the key.
 ','line_number':67,'multiline':True]
['text':'*
     * getFieldDotted produces the field with the provided name based on index keyData. The return
     * object is populated if the element is in a provided index key.  Returns none otherwise.
     * Returning none indicates a query planning error.
     ','line_number':79,'multiline':True]
['text':' This is not owned and points into the IndexDescriptor's data.','line_number':102,'multiline':False]
['text':' This is the BSONObj for the key that we put into the index.  Owned by us.','line_number':105,'multiline':False]
['text':' Associates this index key with an index that has been registered with the WorkingSet. Can be','line_number':108,'multiline':False]
['text':' used to recover pointers to catalog objects for this index from the WorkingSet.','line_number':109,'multiline':False]
['text':' Identifies the storage engine snapshot from which this index key was obtained.','line_number':112,'multiline':False]
['text':'*
 * The type of the data passed between query stages.  In particular:
 *
 * Index scan stages return a WorkingSetMember in the RID_AND_IDX state.
 *
 * Collection scan stages return a WorkingSetMember in the RID_AND_OBJ state.
 *
 * A WorkingSetMember may have any of the data above.
 ','line_number':116,'multiline':True]
['text':' Initial state.','line_number':128,'multiline':False]
['text':' Data is from 1 or more indices.','line_number':131,'multiline':False]
['text':' Data is from a collection scan, or data is from an index scan and was fetched. The','line_number':134,'multiline':False]
['text':' BSONObj might be owned or unowned.','line_number':135,'multiline':False]
['text':' The WSM doesn't correspond to an on-disk document anymore (e.g. is a computed','line_number':138,'multiline':False]
['text':' expression). Since it doesn't correspond to a stored document, a WSM in this state has an','line_number':139,'multiline':False]
['text':' owned BSONObj, but no record id.','line_number':140,'multiline':False]
['text':'*
     * Reset to an "empty" state.
     ','line_number':146,'multiline':True]
['text':'','line_number':151,'multiline':False]
['text':' Member state and state transitions','line_number':152,'multiline':False]
['text':'','line_number':153,'multiline':False]
['text':'','line_number':161,'multiline':False]
['text':' Core attributes','line_number':162,'multiline':False]
['text':'','line_number':163,'multiline':False]
['text':'*
     * Ensures that 'obj' of a WSM in the RID_AND_OBJ state is owned BSON. It is a no-op if the WSM
     * is in a different state or if 'obj' is already owned.
     *
     * It is illegal for unowned BSON to survive a yield, so this must be called on any working set
     * members which may stay alive across yield points.
     ','line_number':173,'multiline':True]
['text':'*
     * getFieldDotted uses its state (obj or index data) to produce the field with the provided
     * name.
     *
     * Returns true if there is the element is in an index key or in an (owned or unowned)
     * object.  *out is set to the element if so.
     *
     * Returns false otherwise.  Returning false indicates a query planning error.
     ','line_number':182,'multiline':True]
['text':'*
     * Returns expected memory usage of working set member.
     ','line_number':193,'multiline':True]
['text':'*
     * Returns a const reference to an object housing the metadata fields associated with this
     * WorkingSetMember.
     ','line_number':198,'multiline':True]
['text':'*
     * Returns a non-const reference to an object housing the metadata fields associated with this
     * WorkingSetMember.
     ','line_number':206,'multiline':True]
['text':'*
     * Clears all metadata fields inside this WorkingSetMember, and returns a structure containing
     * that extracted metadata to the caller. The metadata can then be attached to a new
     * WorkingSetMember or to another data structure that houses metadata.
     ','line_number':214,'multiline':True]
['text':'*
     * Transfers metadata fields to this working set member. By pairs of calls to releaseMetadata()
     * and setMetadata(), callers can cheaply transfer metadata between WorkingSetMembers.
     ','line_number':223,'multiline':True]
['text':'*
     * Resets the underlying BSONObj in the doc field. This avoids unnecessary allocation/
     * deallocation of Document/DocumentStorage objects.
     ','line_number':231,'multiline':True]
['text':'*
 * A variant of WorkingSetMember that is designed to be compatible with the SortExecutor. Objects of
 * this type are small, acting only as a handle to the underlying WorkingSetMember. This means that
 * they can be efficiently copied or moved during the sorting process while the actual
 * WorkingSetMember data remains in place.
 *
 * A SortableWorkingSetMember supports serialization and deserialization so that objects of this
 * type can be flushed to disk and later recovered.
 ','line_number':247,'multiline':True]
['text':'*
     * Constructs an empty SortableWorkingSetMember.
     ','line_number':265,'multiline':True]
['text':'*
     * Constructs a SortableWorkingSetMember from a regular WorkingSetMember. Supports implicit
     * conversion from WorkingSetMember.
     ','line_number':270,'multiline':True]
['text':' implicit ','line_number':274,'multiline':True]
['text':'*
     * Extracts and returns the underlying WorkingSetMember held by this SortableWorkingSetMember.
     ','line_number':285,'multiline':True]
['text':'*
     * Returns a reference to the underlying WorkingSetMember.
     ','line_number':292,'multiline':True]
['text':'*
 * All data in use by a query.  Data is passed through the stage tree by referencing the ID of
 * an element of the working set.  Stages can add elements to the working set, delete elements
 * from the working set, or mutate elements in the working set.
 ','line_number':310,'multiline':True]
['text':'*
     * Allocate a new query result and return the ID used to get and free it.
     ','line_number':326,'multiline':True]
['text':'*
     * Get the i-th mutable query result. The pointer will be valid for this id until freed.
     * Do not delete the returned pointer as the WorkingSet retains ownership. Call free() to
     * release it.
     ','line_number':331,'multiline':True]
['text':' ID has been allocated.','line_number':337,'multiline':False]
['text':' ID currently in use.','line_number':338,'multiline':False]
['text':' ID has been allocated.','line_number':343,'multiline':False]
['text':' ID currently in use.','line_number':344,'multiline':False]
['text':'*
     * Returns true if WorkingSetMember with id 'i' is free.
     ','line_number':348,'multiline':True]
['text':'*
     * Deallocate the i-th query result and release its resources.
     ','line_number':355,'multiline':True]
['text':'*
     * Removes and deallocates all members of this working set.
     ','line_number':360,'multiline':True]
['text':'','line_number':365,'multiline':False]
['text':' WorkingSetMember state transitions','line_number':366,'multiline':False]
['text':'','line_number':367,'multiline':False]
['text':'*
     * Registers the index ident with the WorkingSet, and returns a handle that can be used to
     * recover the index ident.
     ','line_number':373,'multiline':True]
['text':'*
     * Returns the index ident for an index that has previously been registered with the WorkingSet
     * using 'registerIndexIdent()'.
     ','line_number':379,'multiline':True]
['text':'*
     * Returns the WorkingSetMember with the given id after removing it from this WorkingSet. The
     * WSM can be reinstated in the WorkingSet by calling 'emplace()'.
     *
     * WorkingSetMembers typically only temporarily live free of their WorkingSet, so calls to
     * 'extract()' and 'emplace()' should come in pairs.
     ','line_number':387,'multiline':True]
['text':'*
     * Puts the given WorkingSetMember into this WorkingSet. Assigns the WorkingSetMember an id and
     * returns it. This id can be used later to obtain a pointer to the WSM using 'get()'.
     *
     * WorkingSetMembers typically only temporarily live free of their WorkingSet, so calls to
     * 'extract()' and 'emplace()' should come in pairs.
     ','line_number':396,'multiline':True]
['text':' Free list link if freed. Points to self if in use.','line_number':407,'multiline':False]
['text':' All WorkingSetIDs are indexes into this, except for INVALID_ID.','line_number':413,'multiline':False]
['text':' Elements are added to _freeList rather than removed when freed.','line_number':414,'multiline':False]
['text':' Index into _data, forming a linked-list using MemberHolder::nextFreeOrSelf as the next','line_number':417,'multiline':False]
['text':' link. INVALID_ID is the list terminator since 0 is a valid index.','line_number':418,'multiline':False]
['text':' If _freeList == INVALID_ID, the free list is empty and all elements in _data are in use.','line_number':419,'multiline':False]
['text':' Holds index idents that have been registered with 'registerIndexIdent()`. The','line_number':422,'multiline':False]
['text':' WorkingSetRegisteredIndexId is the offset into the vector.','line_number':423,'multiline':False]
['text':' namespace mongo','line_number':427,'multiline':False]
