['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' External params for the merge sort stage.  Declared below.','line_number':53,'multiline':False]
['text':'*
 * Merges the outputs of N children, each of which is sorted in the order specified by
 * 'pattern'.  The output is sorted by 'pattern'.  Practically speaking, all of this stage's
 * children are indices.
 *
 * AKA the SERVER-1205 stage.  Allows very efficient handling of the following query:
 * find($or[{a:1}, {b:1}]).sort({c:1}) with indices {a:1, c:1} and {b:1, c:1}.
 *
 * Preconditions: For each field in 'pattern' all inputs in the child must handle a
 * getFieldDotted for that field.
 ','line_number':56,'multiline':True]
['text':' This stage maintains a priority queue of results from each child stage so that it can quickly','line_number':93,'multiline':False]
['text':' return the next result according to the sort order. A value in the priority queue is a','line_number':94,'multiline':False]
['text':' MergingRef, an iterator which refers to a buffered (WorkingSetMember, child stage) pair.','line_number':95,'multiline':False]
['text':' The comparison function used in our priority queue.','line_number':98,'multiline':False]
['text':' Is lhs less than rhs?  Note that priority_queue is a max heap by default so we invert','line_number':104,'multiline':False]
['text':' the return from the expected value.','line_number':105,'multiline':False]
['text':' Encodes sort key part 'keyPart' according to the collation of the query.','line_number':109,'multiline':False]
['text':' Not owned by us.','line_number':117,'multiline':False]
['text':' The pattern that we're sorting by.','line_number':120,'multiline':False]
['text':' Null if this merge sort stage orders strings according to simple binary compare. If non-null,','line_number':123,'multiline':False]
['text':' represents the collator used to compare strings.','line_number':124,'multiline':False]
['text':' Are we deduplicating on RecordId?','line_number':127,'multiline':False]
['text':' Which RecordIds have we seen?','line_number':130,'multiline':False]
['text':' In order to pick the next smallest value, we need each child work(...) until it produces','line_number':133,'multiline':False]
['text':' a result.  This is the queue of children that haven't given us a result yet.','line_number':134,'multiline':False]
['text':' The min heap of the results we're returning.','line_number':137,'multiline':False]
['text':' The data referred to by the _merging queue above.','line_number':140,'multiline':False]
['text':' Stats','line_number':143,'multiline':False]
['text':' Parameters that must be provided to a MergeSortStage','line_number':147,'multiline':False]
['text':' How we're sorting.','line_number':152,'multiline':False]
['text':' Null if this merge sort stage orders strings according to simple binary compare. If non-null,','line_number':155,'multiline':False]
['text':' represents the collator used to compare strings.','line_number':156,'multiline':False]
['text':' Do we deduplicate on RecordId?','line_number':159,'multiline':False]
['text':' namespace mongo','line_number':163,'multiline':False]
