['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' Do we want to add the key as metadata?','line_number':102,'multiline':False]
['text':'*
 * Stage scans over an index from startKey to endKey, returning results that pass the provided
 * filter.  Internally dedups on RecordId.
 *
 * Sub-stage preconditions: None.  Is a leaf and consumes no stage data.
 ','line_number':108,'multiline':True]
['text':'*
     * Keeps track of what this index scan is currently doing so that it
     * can do the right thing on the next call to work().
     ','line_number':116,'multiline':True]
['text':' Need to initialize the underlying index traversal machinery.','line_number':121,'multiline':False]
['text':' Skipping keys as directed by the _checker.','line_number':124,'multiline':False]
['text':' Retrieving the next key, and applying the filter if necessary.','line_number':127,'multiline':False]
['text':' The index scan is finished.','line_number':130,'multiline':False]
['text':'*
     * Initialize the underlying index Cursor, returning first result if any.
     ','line_number':175,'multiline':True]
['text':' The WorkingSet we fill with results.  Not owned by us.','line_number':180,'multiline':False]
['text':' Contains expressions only over fields in the index key.  We assume this is built','line_number':188,'multiline':False]
['text':' correctly by whomever creates this class.','line_number':189,'multiline':False]
['text':' The filter is not owned by us.','line_number':190,'multiline':False]
['text':' Do we want to add the key as metadata?','line_number':198,'multiline':False]
['text':' Stats','line_number':201,'multiline':False]
['text':' Keeps track of what work we need to do next.','line_number':204,'multiline':False]
['text':' Could our index have duplicates?  If so, we use _returned to dedup.','line_number':207,'multiline':False]
['text':'','line_number':210,'multiline':False]
['text':' This class employs one of two different algorithms for determining when the index scan','line_number':211,'multiline':False]
['text':' has reached the end:','line_number':212,'multiline':False]
['text':'','line_number':213,'multiline':False]
['text':'','line_number':215,'multiline':False]
['text':' 1) If the index scan is not a single contiguous interval, then we use an','line_number':216,'multiline':False]
['text':'    IndexBoundsChecker to determine which keys to return and when to stop scanning.','line_number':217,'multiline':False]
['text':'    In this case, _checker will be non-NULL.','line_number':218,'multiline':False]
['text':'','line_number':219,'multiline':False]
['text':'','line_number':224,'multiline':False]
['text':' 2) If the index scan is a single contiguous interval, then the scan can execute faster by','line_number':225,'multiline':False]
['text':'    letting the index cursor tell us when it hits the end, rather than repeatedly doing','line_number':226,'multiline':False]
['text':'    BSON compares against scanned keys. In this case _checker will be NULL.','line_number':227,'multiline':False]
['text':'','line_number':228,'multiline':False]
['text':' The key that the index cursor should start on/after.','line_number':230,'multiline':False]
['text':' The key that the index cursor should stop on/after.','line_number':232,'multiline':False]
['text':' Is the start key included in the range?','line_number':235,'multiline':False]
['text':' Is the end key included in the range?','line_number':237,'multiline':False]
['text':' namespace mongo','line_number':244,'multiline':False]
