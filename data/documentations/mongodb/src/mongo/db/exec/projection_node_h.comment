['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 * A node used to define the parsed structure of a projection. Each ProjectionNode represents one
 * 'level' of the parsed specification. The root ProjectionNode represents all top level projections
 * or additions, with any child ProjectionNodes representing dotted or nested projections or
 * additions.
 *
 * ProjectionNode is an abstract base class which implements all the generic construction, traversal
 * and execution functionality common to different projection types. Each derived class need only
 * provide a minimal set of virtual function implementations dictating, for instance, how the
 * projection should behave upon reaching a leaf node.
 ','line_number':59,'multiline':True]
['text':'*
     * Recursively adds 'path' into the tree as a projected field, creating any child nodes if
     * necessary.
     *
     * 'path' is allowed to be dotted, and is assumed not to conflict with another path already in
     * the tree. For example, it is an error to add the path "a.b" from a tree which has already
     * added a computed field "a".
     *
     * Note: This function can only be called from the root of the tree. This will ensure that all
     * the node properties are set correctly along the path from root to expression leaf.
     ','line_number':76,'multiline':True]
['text':'*
     * Get the expression for the given path. Returns null if no expression for the given path is
     * found.
     ','line_number':89,'multiline':True]
['text':'*
     * Recursively adds 'path' into the tree as a computed field, creating any child nodes if
     * necessary.
     *
     * 'path' is allowed to be dotted, and is assumed not to conflict with another path already in
     * the tree. For example, it is an error to add the path "a.b" as a computed field to a tree
     * which has already projected the field "a".
     *
     * Note: This function can only be called from the root of the tree. Every node needs to know
     * whether it has an expression as a descendent, so by adding nodes only from the root, this
     * flag can be set correctly along the path from root to expression leaf.
     ','line_number':95,'multiline':True]
['text':'*
     * Applies all projections and expressions, if applicable, and returns the resulting document.
     ','line_number':109,'multiline':True]
['text':'*
     * Recursively evaluates all expressions in the projection, writing the results to 'outputDoc'.
     ','line_number':114,'multiline':True]
['text':'*
     * Reports dependencies on any fields that are required by this projection.
     ','line_number':119,'multiline':True]
['text':'*
     * Recursively report all paths that are referenced by this projection.
     ','line_number':124,'multiline':True]
['text':'*
     * Return an optional number, x, which indicates that it is safe to stop reading the document
     * being projected once x fields have been projected.
     ','line_number':129,'multiline':True]
['text':'*
     * Recursively reports all computed paths in this projection, adding them into 'computedPaths'.
     *
     * Computed paths that are identified as the result of a simple rename are instead filled out in
     * 'renamedPaths'. Each entry in 'renamedPaths' maps from the path's new name to its old name
     * prior to application of this projection. 'complexRenamedPaths' is an optional parameter that
     * acts exactly as the 'renamedPaths' map and includes renames whose old name includes dotted
     * paths (Note: the dotted path renames are constrained to length 3). The paths that are
     * included in 'complexRenamedPaths' are also included in 'computedPaths'.
     ','line_number':137,'multiline':True]
['text':'*
     * Append the variables referred to by this projection to the set 'refs', without clearing any
     * pre-existing references. Should not include $$ROOT or field path expressions.
     ','line_number':164,'multiline':True]
['text':'*
     * Creates the child if it doesn't already exist. 'field' is not allowed to be dotted. Returns
     * the child node if it already exists, or the newly-created child otherwise.
     ','line_number':179,'multiline':True]
['text':' Returns a unique_ptr to a new instance of the implementing class for the given 'fieldName'.','line_number':185,'multiline':False]
['text':' Returns the initial document to which the current level of the projection should be applied.','line_number':188,'multiline':False]
['text':' For an inclusion projection this will be an empty document, to which we will add the fields','line_number':189,'multiline':False]
['text':' we wish to retain. For an exclusion this will be the complete document, from which we will','line_number':190,'multiline':False]
['text':' eliminate the fields we wish to omit.','line_number':191,'multiline':False]
['text':' Given an input leaf value, returns the value that should be added to the output document.','line_number':194,'multiline':False]
['text':' Depending on the projection type this will be either the value itself, or "missing".','line_number':195,'multiline':False]
['text':' Given an input leaf that we intend to skip over, returns the value that should be added to','line_number':198,'multiline':False]
['text':' the output document. Depending on the projection this will be either the value, or "missing".','line_number':199,'multiline':False]
['text':' Writes the given value to the output doc, replacing the existing value of 'field' if present.','line_number':202,'multiline':False]
['text':' Used to determine if the node is an inclusion or exclusion node.','line_number':205,'multiline':False]
['text':' List of the projected fields in the order in which they were specified.','line_number':211,'multiline':False]
['text':' Set of projected fields. Note that the _projectedFields list actually owns the strings, and','line_number':214,'multiline':False]
['text':' this StringDataSet simply holds views of those strings.','line_number':215,'multiline':False]
['text':' Whether this node or any child of this node contains a computed field.','line_number':221,'multiline':False]
['text':' Our projection semantics are such that all field additions need to be processed in the order','line_number':224,'multiline':False]
['text':' specified. '_orderToProcessAdditionsAndChildren' tracks that order.','line_number':225,'multiline':False]
['text':'','line_number':226,'multiline':False]
['text':' For example, for the specification {a: <expression>, "b.c": <expression>, d: <expression>},','line_number':227,'multiline':False]
['text':' we need to add the top level fields in the order "a", then "b", then "d". This ordering','line_number':228,'multiline':False]
['text':' information needs to be tracked separately, since "a" and "d" will be tracked via','line_number':229,'multiline':False]
['text':' '_expressions', and "b.c" will be tracked as a child ProjectionNode in '_children'. For the','line_number':230,'multiline':False]
['text':' example above, '_orderToProcessAdditionsAndChildren' would be ["a", "b", "d"].','line_number':231,'multiline':False]
['text':' Iterates 'inputDoc' for each projected field, adding to or removing from 'outputDoc'. Also','line_number':235,'multiline':False]
['text':' copies over enough information to preserve the structure of the incoming document for the','line_number':236,'multiline':False]
['text':' fields this projection cares about.','line_number':237,'multiline':False]
['text':'','line_number':238,'multiline':False]
['text':' For example, given a ProjectionNode tree representing this projection:','line_number':239,'multiline':False]
['text':'    {a: {b: 1, c: <exp>}, "d.e": <exp>}','line_number':240,'multiline':False]
['text':' Calling applyProjections() with an 'inputDoc' of','line_number':241,'multiline':False]
['text':'    {a: [{b: 1, d: 1}, {b: 2, d: 2}], d: [{e: 1, f: 1}, {e: 1, f: 1}]}','line_number':242,'multiline':False]
['text':' and an empty 'outputDoc' will leave 'outputDoc' representing the document','line_number':243,'multiline':False]
['text':'    {a: [{b: 1}, {b: 2}], d: [{}, {}]}','line_number':244,'multiline':False]
['text':' Helpers for the 'applyProjections' and 'applyExpressions' methods. Applies the transformation','line_number':247,'multiline':False]
['text':' recursively to each element of any arrays, and ensures primitives are handled appropriately.','line_number':248,'multiline':False]
['text':' Adds a new ProjectionNode as a child. 'field' cannot be dotted.','line_number':252,'multiline':False]
['text':' Returns nullptr if no such child exists.','line_number':255,'multiline':False]
['text':'*
     * Indicates that metadata computed by previous calls to optimize() is now stale and must be
     * recomputed. This must be called any time the tree is updated (an expression added or child
     * node added).
     ','line_number':258,'multiline':True]
['text':'*
     * Internal helper function for addExpressionForPath().
     ','line_number':267,'multiline':True]
['text':'*
     * Internal helper function for addProjectionForPath().
     ','line_number':272,'multiline':True]
['text':' Maximum number of fields that need to be projected. This allows for an "early" return','line_number':277,'multiline':False]
['text':' optimization which means we don't have to iterate over an entire document. The value is','line_number':278,'multiline':False]
['text':' stored here to avoid re-computation for each document.','line_number':279,'multiline':False]
['text':' namespace mongo::projection_executor','line_number':282,'multiline':False]
