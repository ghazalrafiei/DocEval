['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' For s2 search','line_number':38,'multiline':False]
['text':' IWYU pragma: no_include "boost/intrusive/detail/iterator.hpp"','line_number':44,'multiline':False]
['text':'','line_number':89,'multiline':False]
['text':' Shared GeoNear search functionality','line_number':90,'multiline':False]
['text':'','line_number':91,'multiline':False]
['text':'','line_number':98,'multiline':False]
['text':' Generic GeoNear distance computation','line_number':99,'multiline':False]
['text':' Distances are computed by projecting the stored geometry into the query CRS, and','line_number':100,'multiline':False]
['text':' computing distance in that CRS.','line_number':101,'multiline':False]
['text':'','line_number':102,'multiline':False]
['text':' Must have an object in order to get geometry out of it.','line_number':104,'multiline':False]
['text':' Extract all the geometries out of this document for the near query. Note that the NearStage','line_number':109,'multiline':False]
['text':' stage can only be run with an existing index. Therefore, it is always safe to skip geometry','line_number':110,'multiline':False]
['text':' validation.','line_number':111,'multiline':False]
['text':' Compute the minimum distance of all the geometries in the document','line_number':116,'multiline':False]
['text':' NOTE: A stored document with STRICT_SPHERE CRS is treated as a malformed document','line_number':122,'multiline':False]
['text':' and ignored. Since GeoNear requires an index, there's no stored STRICT_SPHERE shape.','line_number':123,'multiline':False]
['text':' So we don't check it here.','line_number':124,'multiline':False]
['text':' NOTE: For now, we're sure that if we get this far in the query we'll have an','line_number':126,'multiline':False]
['text':' appropriate index which validates the type of geometry we're pulling back here.','line_number':127,'multiline':False]
['text':' TODO: It may make sense to change our semantics and, by default, only return','line_number':128,'multiline':False]
['text':' shapes in the same CRS from $geoNear.','line_number':129,'multiline':False]
['text':' No distance to report','line_number':143,'multiline':False]
['text':' Hack for nearSphere','line_number':149,'multiline':False]
['text':' TODO: Remove nearSphere?','line_number':150,'multiline':False]
['text':' TODO: Tighten this up a bit by making a CRS for "sphere with radians"','line_number':174,'multiline':False]
['text':' Our input bounds are in radians, convert to meters since the query CRS is actually','line_number':179,'multiline':False]
['text':' SPHERE.  We'll convert back to radians on outputting distances.','line_number':180,'multiline':False]
['text':' GOTCHA: oldPoint is a misnomer - it is the original point data and is in the correct','line_number':185,'multiline':False]
['text':' CRS.  We must not try to derive the original point from the spherical S2Point generated','line_number':186,'multiline':False]
['text':' as an optimization - the mapping is not 1->1 - [-180, 0] and [180, 0] map to the same','line_number':187,'multiline':False]
['text':' place.','line_number':188,'multiline':False]
['text':' TODO: Wrapping behavior should not depend on the index, which would make $near code','line_number':189,'multiline':False]
['text':' insensitive to which direction we explore the index in.','line_number':190,'multiline':False]
['text':'','line_number':196,'multiline':False]
['text':' GeoNear2DStage','line_number':197,'multiline':False]
['text':'','line_number':198,'multiline':False]
['text':' Reset the full bounds based on our index bounds.','line_number':206,'multiline':False]
['text':' The index status should always be valid.','line_number':207,'multiline':False]
['text':' The biggest distance possible in this indexed collection is the diagonal of the','line_number':210,'multiline':False]
['text':' square indexed region.','line_number':211,'multiline':False]
['text':' Spherical queries have upper bounds set by the earth - no-op','line_number':219,'multiline':False]
['text':' TODO: Wrapping errors would creep in here if nearSphere wasn't defined to not wrap','line_number':220,'multiline':False]
['text':' The index status should always be valid.','line_number':239,'multiline':False]
['text':' Since appendVertexNeighbors(level, output) requires level < hash.getBits(),','line_number':245,'multiline':False]
['text':' we have to start to find documents at most GeoHash::kMaxBits - 1. Thus the finest','line_number':246,'multiline':False]
['text':' search area is 16 * finest cell area at GeoHash::kMaxBits.','line_number':247,'multiline':False]
['text':' Initialize the internal states','line_number':251,'multiline':False]
['text':' Scan bounds on 2D indexes are only over the 2D field - other bounds aren't applicable.','line_number':255,'multiline':False]
['text':' This is handled in query planning.','line_number':256,'multiline':False]
['text':' The "2d" field is always the first in the index','line_number':260,'multiline':False]
['text':' Construct index intervals used by this stage','line_number':264,'multiline':False]
['text':' Return the neighbors of closest vertex to this cell at the given level.','line_number':269,'multiline':False]
['text':' Intersect the $near bounds we just generated into the bounds we have for anything else','line_number':283,'multiline':False]
['text':' in the scan (i.e. $within)','line_number':284,'multiline':False]
['text':' Return IS_EOF is we find a document in it's ancestor cells and set estimated distance','line_number':292,'multiline':False]
['text':' from the nearest document.','line_number':293,'multiline':False]
['text':' Setup index scan stage for current level.','line_number':300,'multiline':False]
['text':' We ran through the neighbors but found nothing.','line_number':308,'multiline':False]
['text':'','line_number':309,'multiline':False]
['text':' Before going to the next-coarsest level, check whether our search area contains the','line_number':310,'multiline':False]
['text':' entire search annulus, since we don't want to spend time doing density estimation over','line_number':311,'multiline':False]
['text':' areas that are much larger than the requested $maxDistance.','line_number':312,'multiline':False]
['text':'','line_number':313,'multiline':False]
['text':' The search area consists of four cells with side length S. Within its cell, the closest','line_number':314,'multiline':False]
['text':' vertex to the search point must be the vertex shared with the other three cells. If the','line_number':315,'multiline':False]
['text':' search point lies in the upper left cell, this means that it must lie in the lower right','line_number':316,'multiline':False]
['text':' quadrant of that cell. Furthermore, this lower-right quadrant has a side-length of S/2.','line_number':317,'multiline':False]
['text':'','line_number':318,'multiline':False]
['text':'   +-----------+-----------+','line_number':319,'multiline':False]
['text':'   |           |           |','line_number':320,'multiline':False]
['text':'   |       S/2 |           |','line_number':321,'multiline':False]
['text':'   +     +-----+           |','line_number':322,'multiline':False]
['text':'   |     | o   |           |','line_number':323,'multiline':False]
['text':'   |     |     |           |','line_number':324,'multiline':False]
['text':'   +-----+-----+-----------+','line_number':325,'multiline':False]
['text':'   |           |           |','line_number':326,'multiline':False]
['text':'   |           |           |','line_number':327,'multiline':False]
['text':'   |           |           |','line_number':328,'multiline':False]
['text':'   |           |           |','line_number':329,'multiline':False]
['text':'   |           |           |','line_number':330,'multiline':False]
['text':'   +-----------+-----------+','line_number':331,'multiline':False]
['text':'         S','line_number':332,'multiline':False]
['text':'','line_number':333,'multiline':False]
['text':' As long as the outer radius of the search annulus is less than S/2, it must be entirely','line_number':334,'multiline':False]
['text':' contained within these four cells.','line_number':335,'multiline':False]
['text':' We're covering the entire search annulus. Return EOF to indicate we're done.','line_number':337,'multiline':False]
['text':' Advance to the next level and search again.','line_number':343,'multiline':False]
['text':' Reset index scan for the next level.','line_number':345,'multiline':False]
['text':' We are already at the top level.','line_number':352,'multiline':False]
['text':' Found a document at current level.','line_number':356,'multiline':False]
['text':' Clean up working set.','line_number':358,'multiline':False]
['text':' Propagate NEED_TIME or errors','line_number':365,'multiline':False]
['text':' 2d index only works with legacy points as centroid. $nearSphere will project','line_number':382,'multiline':False]
['text':' the point into SPHERE CRS and calculate distance based on that.','line_number':383,'multiline':False]
['text':' STRICT_SPHERE is impossible here, as GeoJSON centroid is not allowed for 2d index.','line_number':384,'multiline':False]
['text':' Estimator finished its work, we need to finish initialization too.','line_number':386,'multiline':False]
['text':' Estimated distance is in degrees, convert it to meters multiplied by 3.','line_number':388,'multiline':False]
['text':' Limit boundsIncrement to ~20KM, so that the first circle won't be too aggressive.','line_number':390,'multiline':False]
['text':' We expand the radius by 3 times to give a reasonable starting search area.','line_number':393,'multiline':False]
['text':' Assume points are distributed evenly. X is the edge size of cells at whose','line_number':394,'multiline':False]
['text':' level we found a document in 4 neighbors. Thus the closest point is at least','line_number':395,'multiline':False]
['text':' X/2 far from the centroid. The distance between two points is at least X.','line_number':396,'multiline':False]
['text':' The area of Pi * (3X)^2 ~= 28 * X^2 will cover dozens of points at most.','line_number':397,'multiline':False]
['text':' We'll explore the space with exponentially increasing radius if this guess is','line_number':398,'multiline':False]
['text':' too small, so starting from a conservative initial radius doesn't hurt.','line_number':399,'multiline':False]
['text':' Clean up','line_number':405,'multiline':False]
['text':' Helper class to maintain ownership of a match expression alongside an index scan','line_number':436,'multiline':False]
['text':' Owns matcher','line_number':447,'multiline':False]
['text':' namespace','line_number':450,'multiline':False]
['text':' The index status should always be valid.','line_number':454,'multiline':False]
['text':' The hasher error is the diagonal of a 2D hash region - it's generally not helpful','line_number':457,'multiline':False]
['text':' to change region size such that a search radius is smaller than the 2D hash region','line_number':458,'multiline':False]
['text':' max radius.  This is slightly conservative for now (box diagonal vs circle radius).','line_number':459,'multiline':False]
['text':' If this is a spherical query, units are in meters - this is just a heuristic','line_number':468,'multiline':False]
['text':' The search is finished if we searched at least once and all the way to the edge','line_number':484,'multiline':False]
['text':'','line_number':489,'multiline':False]
['text':' Setup the next interval','line_number':490,'multiline':False]
['text':'','line_number':491,'multiline':False]
['text':' TODO: Generally we want small numbers of results fast, then larger numbers later','line_number':496,'multiline':False]
['text':'','line_number':513,'multiline':False]
['text':' Get a covering region for this interval','line_number':514,'multiline':False]
['text':'','line_number':515,'multiline':False]
['text':' NOTE: Due to floating point math issues, FLAT searches of a 2D index need to treat','line_number':522,'multiline':False]
['text':' containment and distance separately.','line_number':523,'multiline':False]
['text':' Ex: (distance) 54.001 - 54 > 0.001, but (containment) 54 + 0.001 <= 54.001','line_number':524,'multiline':False]
['text':' The idea is that a $near search with bounds is really a $within search, sorted by','line_number':525,'multiline':False]
['text':' distance.  We attach a custom $within : annulus matcher to do the $within search,','line_number':526,'multiline':False]
['text':' and adjust max/min bounds slightly since, as above, containment does not mean the','line_number':527,'multiline':False]
['text':' distance calculation won't slightly overflow the boundary.','line_number':528,'multiline':False]
['text':'','line_number':529,'multiline':False]
['text':' The code below adjusts:','line_number':530,'multiline':False]
['text':' 1) Overall min/max bounds of the generated distance intervals to be more inclusive','line_number':531,'multiline':False]
['text':' 2) Bounds of the interval covering to be more inclusive','line_number':532,'multiline':False]
['text':' ... and later on we add the custom $within : annulus matcher.','line_number':533,'multiline':False]
['text':'','line_number':534,'multiline':False]
['text':' IMPORTANT: The *internal* interval distance bounds are *exact thresholds* - these','line_number':535,'multiline':False]
['text':' should not be adjusted.','line_number':536,'multiline':False]
['text':' TODO: Maybe integrate annuluses as a standard shape, and literally transform $near','line_number':537,'multiline':False]
['text':' internally into a $within query with $near just as sort.','line_number':538,'multiline':False]
['text':' Compute the maximum axis-aligned distance error','line_number':540,'multiline':False]
['text':' We're at the max bound of the search, adjust interval maximum','line_number':552,'multiline':False]
['text':' *Always* adjust the covering bounds to be more inclusive','line_number':557,'multiline':False]
['text':' TODO: As above, make this consistent with $within : $centerSphere','line_number':563,'multiline':False]
['text':' Our intervals aren't in the same CRS as our index, so we need to adjust them','line_number':565,'multiline':False]
['text':'','line_number':569,'multiline':False]
['text':' Setup the stages for this interval','line_number':570,'multiline':False]
['text':'','line_number':571,'multiline':False]
['text':' Scan bounds on 2D indexes are only over the 2D field - other bounds aren't applicable.','line_number':573,'multiline':False]
['text':' This is handled in query planning.','line_number':574,'multiline':False]
['text':' This does force us to do our own deduping of results.','line_number':577,'multiline':False]
['text':' The "2d" field is always the first in the index','line_number':580,'multiline':False]
['text':' Make sure the same index key isn't visited twice','line_number':587,'multiline':False]
['text':' After taking the difference, there may be cells in the covering that don't intersect','line_number':591,'multiline':False]
['text':' with the annulus.','line_number':592,'multiline':False]
['text':' Add the cells in this covering to the _scannedCells union','line_number':595,'multiline':False]
['text':' Intersect the $near bounds we just generated into the bounds we have for anything else','line_number':602,'multiline':False]
['text':' in the scan (i.e. $within)','line_number':603,'multiline':False]
['text':' These parameters are stored by the index, and so must be ok','line_number':607,'multiline':False]
['text':' 2D indexes support covered search over additional fields they contain','line_number':610,'multiline':False]
['text':' FLAT searches need to add an additional annulus $within matcher, see above','line_number':616,'multiline':False]
['text':' TODO: Find out if this matcher is actually needed','line_number':617,'multiline':False]
['text':' FetchStage owns index scan','line_number':622,'multiline':False]
['text':'','line_number':634,'multiline':False]
['text':' GeoNear2DSphereStage','line_number':635,'multiline':False]
['text':'','line_number':636,'multiline':False]
['text':' initialize2dsphereParams() does not require the collator during the GEO_NEAR_2DSPHERE stage.','line_number':676,'multiline':False]
['text':' It only requires the collator for index key generation. For query execution,','line_number':677,'multiline':False]
['text':' _nearParams.baseBounds should have collator-generated comparison keys in place of raw','line_number':678,'multiline':False]
['text':' strings, and _nearParams.filter should have the collator.','line_number':679,'multiline':False]
['text':' Internal bounds come in SPHERE CRS units','line_number':687,'multiline':False]
['text':' i.e. center is lon/lat, inner/outer are in meters','line_number':688,'multiline':False]
['text':' TODO: Currently a workaround to fix occasional floating point errors','line_number':697,'multiline':False]
['text':' in S2, where sometimes points near the axis will not be returned','line_number':698,'multiline':False]
['text':' if inner == 0','line_number':699,'multiline':False]
['text':' 'kEpsilon' is about 9 times the double-precision roundoff relative error.','line_number':706,'multiline':False]
['text':' We only need to max bound if this is not a full search of the Earth','line_number':709,'multiline':False]
['text':' Using the constant here is important since we use the min of kMaxEarthDistance','line_number':710,'multiline':False]
['text':' and the actual bounds passed in to set up the search area.','line_number':711,'multiline':False]
['text':' SERVER-52953: The cell covering returned by S2 may have a matching point along its','line_number':713,'multiline':False]
['text':' boundary. In certain cases, this boundary point is not contained within the covering,','line_number':714,'multiline':False]
['text':' which means that this search will not match said point. As such, we avoid this issue by','line_number':715,'multiline':False]
['text':' finding a covering for the region expanded over a very small radius because this covering','line_number':716,'multiline':False]
['text':' is guaranteed to contain the boundary point.','line_number':717,'multiline':False]
['text':' If 'outer' is sufficiently small, the computation of the S2Cap's height from 'angle' may','line_number':721,'multiline':False]
['text':' underflow, resulting in a height less than 'kEpsilon' and an empty cap. As such, we','line_number':722,'multiline':False]
['text':' guarantee that 'outerCap' has a height of at least 'kEpsilon'.','line_number':723,'multiline':False]
['text':' if annulus is entire world, return a full cap','line_number':730,'multiline':False]
['text':' Takes ownership of caps','line_number':735,'multiline':False]
['text':' namespace','line_number':738,'multiline':False]
['text':' cellId.AppendVertexNeighbors(level, output) requires level < finest,','line_number':752,'multiline':False]
['text':' so we use the minimum of max_level - 1 and the user specified finest','line_number':753,'multiline':False]
['text':' Setup the index scan stage for neighbors at this level.','line_number':758,'multiline':False]
['text':' Because the planner doesn't yet set up 2D index bounds, do it ourselves here','line_number':765,'multiline':False]
['text':' Find 4 neighbors (3 neighbors at face vertex) at current level.','line_number':772,'multiline':False]
['text':' The search area expands 4X each time.','line_number':776,'multiline':False]
['text':' Return the neighbors of closest vertex to this cell at the given level.','line_number':777,'multiline':False]
['text':' Index scan','line_number':783,'multiline':False]
['text':' Setup index scan stage for current level.','line_number':795,'multiline':False]
['text':' We ran through the neighbors but found nothing.','line_number':803,'multiline':False]
['text':'','line_number':804,'multiline':False]
['text':' Before going to the next-coarsest level, check whether our search area contains the','line_number':805,'multiline':False]
['text':' entire search annulus, since we don't want to spend time doing density estimation over','line_number':806,'multiline':False]
['text':' areas that are much larger than the requested $maxDistance.','line_number':807,'multiline':False]
['text':'','line_number':808,'multiline':False]
['text':' The search area consists of four cells at level L. Within its cell, the closest vertex to','line_number':809,'multiline':False]
['text':' the search point must be the vertex shared with the other three cells. If the search','line_number':810,'multiline':False]
['text':' point lies in the upper left cell, this means that it must lie in the lower right','line_number':811,'multiline':False]
['text':' sub-cell at level L+1.','line_number':812,'multiline':False]
['text':'','line_number':813,'multiline':False]
['text':'   +-----------+-----------+','line_number':814,'multiline':False]
['text':'   |           |           |','line_number':815,'multiline':False]
['text':'   |        S  |           |','line_number':816,'multiline':False]
['text':'   +     +-----+           |','line_number':817,'multiline':False]
['text':'   |     | o   |           |','line_number':818,'multiline':False]
['text':'   |     |     |           |','line_number':819,'multiline':False]
['text':'   +-----+-----+-----------+','line_number':820,'multiline':False]
['text':'   |           |           |','line_number':821,'multiline':False]
['text':'   |           |           |','line_number':822,'multiline':False]
['text':'   |           |           |','line_number':823,'multiline':False]
['text':'   |           |           |','line_number':824,'multiline':False]
['text':'   |           |           |','line_number':825,'multiline':False]
['text':'   +-----------+-----------+','line_number':826,'multiline':False]
['text':'','line_number':827,'multiline':False]
['text':' In the diagram above, S is the width of the cell at level L+1. We can determine a lower','line_number':828,'multiline':False]
['text':' bound for the width any cell at this level, i.e. S > minWidth(L+1). As long as the outer','line_number':829,'multiline':False]
['text':' radius of the search annulus is less than minWidth(L+1), it must be entirely contained','line_number':830,'multiline':False]
['text':' within these four level L cells.','line_number':831,'multiline':False]
['text':' We're covering the entire search annulus. Return EOF to indicate we're done.','line_number':834,'multiline':False]
['text':' Advance to the next level and search again.','line_number':840,'multiline':False]
['text':' Reset index scan for the next level.','line_number':842,'multiline':False]
['text':' We are already at the top level.','line_number':849,'multiline':False]
['text':' We found something!','line_number':853,'multiline':False]
['text':' Clean up working set.','line_number':855,'multiline':False]
['text':' Propagate NEED_TIME or errors','line_number':862,'multiline':False]
['text':' We find a document in 4 neighbors at current level, but didn't at previous level.','line_number':880,'multiline':False]
['text':'','line_number':881,'multiline':False]
['text':' Assuming cell size at current level is d and data is even distributed, the distance','line_number':882,'multiline':False]
['text':' between two nearest points are at least d. The following circle with radius of 3 * d','line_number':883,'multiline':False]
['text':' covers PI * 9 * d^2, giving at most 30 documents.','line_number':884,'multiline':False]
['text':'','line_number':885,'multiline':False]
['text':' At the coarsest level, the search area is the whole earth.','line_number':886,'multiline':False]
['text':' Clean up','line_number':890,'multiline':False]
['text':' The search is finished if we searched at least once and all the way to the edge','line_number':899,'multiline':False]
['text':'','line_number':904,'multiline':False]
['text':' Setup the next interval','line_number':905,'multiline':False]
['text':'','line_number':906,'multiline':False]
['text':' TODO: Generally we want small numbers of results fast, then larger numbers later','line_number':911,'multiline':False]
['text':'','line_number':927,'multiline':False]
['text':' Setup the covering region and stages for this interval','line_number':928,'multiline':False]
['text':'','line_number':929,'multiline':False]
['text':' This does force us to do our own deduping of results.','line_number':933,'multiline':False]
['text':' Because the planner doesn't yet set up 2D index bounds, do it ourselves here','line_number':936,'multiline':False]
['text':' Generate a covering that does not intersect with any previous coverings','line_number':945,'multiline':False]
['text':' Add the cells in this covering to the _scannedCells union','line_number':957,'multiline':False]
['text':' FetchStage owns index scan','line_number':966,'multiline':False]
['text':' namespace mongo','line_number':978,'multiline':False]
