['text':'*
 *    Copyright (C) 2019-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 * Holds various parameters required to apply a $slice projection. Populated from the arguments
 * to 'applySliceProjection()'.
 ','line_number':60,'multiline':True]
['text':'*
 * Extracts an element from the array 'arr' at position 'elemIndex'. The 'elemIndex' string
 * parameter must hold a value which can be converted to an unsigned integer. If 'elemIndex' is not
 * within array boundaries, an empty Value is returned.
 ','line_number':70,'multiline':True]
['text':'*
 * Returns a portion of the 'array', skipping a number of elements as indicated by the 'skip'
 * parameter, either from the beginning of the array (if 'skip' is positive), or from the end
 * of the array (if 'skip' is negative). The 'limit' indicates the number of items to return.
 * If 'limit' is negative, the last 'limit' number of items in the array are returned.
 *
 * If the 'skip' is specified, the 'limit' cannot be negative.
 ','line_number':86,'multiline':True]
['text':' We explicitly disallow a negative limit when skip is specified.','line_number':107,'multiline':False]
['text':'*
 * Applies a $slice projection to the array at the given 'params.path'. For each array element,
 * recursively calls 'applySliceProjectionHelper' if the element is a Document, storing the result
 * in the output array, otherwise just stores the element in the output unmodified.
 *
 * Note we do not expand arrays within arrays this way. For example, {a: [[{b: 1}]]} has no values
 * on the path "a.b", but {a: [{b: 1}]} does, so nested arrays are stored within the output array
 * as regular values.
 ','line_number':126,'multiline':True]
['text':'*
 * This is a helper function which implements the $slice projection. The strategy for applying a
 * $slice projection is as follows:
 *     * Pick the current path component from the current 'params.path' and store the value from the
 *       'input' doc at this sub-path in 'val'.
 *     * If 'val' is an array and we're at the last component in the 'params.path' - slice the array
 *       and exit recursion, otherwise recursively apply the $slice projection to each element
 *       in the array, and store the result in 'val'.
 *     * If the field value is a document, apply the $slice projection to this document, and store
 *       the result in 'val'.
 *     * Store the computed 'val' in the 'output' document under the current field name.
 ','line_number':151,'multiline':True]
['text':' namespace','line_number':193,'multiline':False]
['text':' Try to find the first matching array element from the 'input' document based on the condition','line_number':201,'multiline':False]
['text':' specified as 'matchExpr'. If such an element is found, its position within an array will be','line_number':202,'multiline':False]
['text':' recorded in the 'details' object.','line_number':203,'multiline':False]
['text':' Since 'matchExpr' used with the positional projection is the very same selection filter','line_number':208,'multiline':False]
['text':' expression in the find command, the input document passed to this function should have','line_number':209,'multiline':False]
['text':' already been matched against this expression, so we'll use a tassert to make sure this is the','line_number':210,'multiline':False]
['text':' case indeed.','line_number':211,'multiline':False]
['text':' At this stage we know that the 'input' document matches against the specified condition,','line_number':216,'multiline':False]
['text':' but the matching array element may not be found. This can happen if the field, specified','line_number':217,'multiline':False]
['text':' in the match condition is not an array. For example, if the match condition is {foo: 3}','line_number':218,'multiline':False]
['text':' and the document is {_id: 1, foo: 3}, then we will match this document but the matching','line_number':219,'multiline':False]
['text':' array element position won't be recorded. In this case, we don't want to error out but','line_number':220,'multiline':False]
['text':' to exclude the positional projection path from the output document. So, we will walk the','line_number':221,'multiline':False]
['text':' 'path' on the 'input' document trying to locate the first array element. If it can be','line_number':222,'multiline':False]
['text':' found, then we will extract the matching element from this array and will store it as','line_number':223,'multiline':False]
['text':' the current sub-path in the 'output' document. Otherwise, just leave the 'output'','line_number':224,'multiline':False]
['text':' document untouched.','line_number':225,'multiline':False]
['text':' Raise an error if we found the first array on the 'path', but the matching array','line_number':229,'multiline':False]
['text':' element index wasn't recorded in the 'details' object. This can happen when the','line_number':230,'multiline':False]
['text':' match expression doesn't conform to the positional projection requirements. E.g.,','line_number':231,'multiline':False]
['text':' when it contains multiple conditions on the array field being projected, which','line_number':232,'multiline':False]
['text':' may override each other, making it impossible to correctly locate the matching','line_number':233,'multiline':False]
['text':' element.','line_number':234,'multiline':False]
['text':' Try to find the first matching array element from the 'input' document based on the condition','line_number':266,'multiline':False]
['text':' specified as 'matchExpr'. If such an element is found, its position within an array will be','line_number':267,'multiline':False]
['text':' recorded in the 'details' object.','line_number':268,'multiline':False]
['text':' namespace mongo::projection_executor_utils','line_number':302,'multiline':False]
