['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
     * This class represents the different kind of actions we can take when handling a write
     * operation:
     *   - kWrite: perform the current write operation.
     *   - kWriteAsFromMigrate: perform the current write operation but marking it with the
     *     fromMigrate flag.
     *   - kSkip: skip the current write operation.
     ','line_number':66,'multiline':True]
['text':'*
     * Returns which PreWriteFilterAction we should take for the current write operation over doc.
     ','line_number':82,'multiline':True]
['text':'*
     * Computes the required action for the current write operation over the 'doc' and logs cases
     * of 'kSkip' or 'kWriteAsFromMigrate'.
     *
     * - Returns 'kWRite' if the 'doc' is writeable
     * - Returns 'kSkip' if the 'doc' is not writeable and should be skipped.
     * - Returns 'kWriteAsFromMigrate' meaning that the 'doc' should be written to orphan chunk.
     ','line_number':87,'multiline':True]
['text':'*
     * Checks if the 'doc' is NOT writable and additionally handles the StaleConfig error. This
     * method should be called in a context of single update / delete.
     *
     * Returns a pair of [optional immediate StageState return code, bool fromMigrate].
     * - Returns {{}, false} if the 'doc' is simply writable.
     * - Returns PlanStage::StageState if the 'doc' is not writable and the caller should return
     *   immediately with the state.
     * - Returns bool for 'fromMigrate' flag meaning that the 'doc' should be written to orphan
     *   chunk.
     ','line_number':108,'multiline':True]
['text':' If the 'doc' should be skipped in a context of single update / delete, the caller','line_number':124,'multiline':False]
['text':' should return immediately with NEED_TIME state. When action is 'kSkip', 'fromMigrate'','line_number':125,'multiline':False]
['text':' is a 'don't care' condition but we just fill it with false.','line_number':126,'multiline':False]
['text':' If the placement version is IGNORED and we encountered a critical section, then','line_number':132,'multiline':False]
['text':' yield, wait for the critical section to finish and then we'll resume the write from','line_number':133,'multiline':False]
['text':' the point we had left. We do this to prevent large multi-writes from repeatedly','line_number':134,'multiline':False]
['text':' failing due to StaleConfig and exhausting the mongos retry attempts.','line_number':135,'multiline':False]
['text':'*
     * Returns true if the operation is not versioned or if the doc is owned by the shard.
     *
     * May throw a ShardKeyNotFound if the document has an invalid shard key.
     ','line_number':146,'multiline':True]
['text':'*
 * Returns true if the document referred to by 'id' still exists and matches the query predicate
 * given by 'cq'. Returns true if the document still exists and 'cq' is null. Returns false
 * otherwise, in which case the WorkingSetMember referred to by 'id' will no longer contain a valid
 * document, and the only operation that should be performed on the WSM is to free it.
 *
 * May throw a WriteConflictException if there was a conflict while searching to see if the document
 * still exists.
 ','line_number':166,'multiline':True]
['text':'*
 * Returns true if we are running retryable write or retryable internal multi-document transaction.
 ','line_number':181,'multiline':True]
['text':' namespace write_stage_common','line_number':186,'multiline':False]
['text':' namespace mongo','line_number':187,'multiline':False]
