['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' Hint provided','line_number':86,'multiline':False]
['text':' Min provided','line_number':91,'multiline':False]
['text':' Min queries are a special case of hinted queries.','line_number':92,'multiline':False]
['text':' Max provided','line_number':97,'multiline':False]
['text':' Similar to min, max queries are a special case of hinted queries.','line_number':98,'multiline':False]
['text':' Tailable cursors won't get cached, just turn into collscans.','line_number':103,'multiline':False]
['text':' We can only subplan rooted $or queries, and only if they have at least one clause.','line_number':108,'multiline':False]
['text':' Clear out the working set. We'll start with a fresh working set.','line_number':117,'multiline':False]
['text':' Use the query planning module to plan the whole query.','line_number':120,'multiline':False]
['text':' Only one possible plan.  Run it.  Build the stages from the solution.','line_number':130,'multiline':False]
['text':' This SubplanStage takes ownership of the query solution.','line_number':136,'multiline':False]
['text':' Many solutions. Create a MultiPlanStage to pick the best, update the cache,','line_number':142,'multiline':False]
['text':' and so on. The working set will be shared by all candidate plans.','line_number':143,'multiline':False]
['text':' Delegate the the MultiPlanStage's plan selection facility.','line_number':156,'multiline':False]
['text':' Adds the amount of time taken by pickBestPlan() to executionTime. There's lots of work that','line_number':167,'multiline':False]
['text':' happens here, so this is needed for the time accounting to make sense.','line_number':168,'multiline':False]
['text':' During plan selection, the list of indices we are using to plan must remain stable, so the','line_number':171,'multiline':False]
['text':' query will die during yield recovery if any index has been dropped. However, once plan','line_number':172,'multiline':False]
['text':' selection completes successfully, we no longer need all indices to stick around. The selected','line_number':173,'multiline':False]
['text':' plan should safely die on yield recovery if it is using the dropped index.','line_number':174,'multiline':False]
['text':'','line_number':175,'multiline':False]
['text':' Dismiss the requirement that no indices can be dropped when this method returns.','line_number':176,'multiline':False]
['text':' Plan each branch of the $or.','line_number':196,'multiline':False]
['text':' Remember whether each branch of the $or was planned from a cached solution.','line_number':203,'multiline':False]
['text':' Use the multi plan stage to select a winning plan for each branch, and then construct','line_number':210,'multiline':False]
['text':' the overall winning plan from the resulting index tags.','line_number':211,'multiline':False]
['text':' We pass the SometimesCache option to the MPS because the SubplanStage currently does','line_number':217,'multiline':False]
['text':' not use the CachedPlanStage's eviction mechanism. We therefore are more conservative','line_number':218,'multiline':False]
['text':' about putting a potentially bad plan into the cache in the subplan path.','line_number':219,'multiline':False]
['text':'','line_number':220,'multiline':False]
['text':' We temporarily add the MPS to _children to ensure that we pass down all save/restore','line_number':221,'multiline':False]
['text':' messages that can be generated if pickBestPlan yields.','line_number':222,'multiline':False]
['text':' Make sure nothing else was added to _children.','line_number':227,'multiline':False]
['text':' Dump all the solutions into the MPS.','line_number':232,'multiline':False]
['text':' Query planning can continue if we failed to find a solution for one of the','line_number':256,'multiline':False]
['text':' children. Otherwise, it cannot, as it may no longer be safe to access the collection','line_number':257,'multiline':False]
['text':' (and index may have been dropped, we may have exceeded the time limit, etc).','line_number':258,'multiline':False]
['text':' Build a plan stage tree from the the composite solution and add it as our child stage.','line_number':264,'multiline':False]
['text':' If we're running we best have a runner.','line_number':276,'multiline':False]
['text':' namespace mongo','line_number':300,'multiline':False]
