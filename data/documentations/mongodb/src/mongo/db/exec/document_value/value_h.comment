['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'* A variant type that can hold any type of data representable in BSON
 *
 *  Small values are stored inline, but some values, such as large strings,
 *  are heap allocated. It has smart pointer capabilities built-in so it is
 *  safe and recommended to pass these around and return them by value.
 *
 *  Values are immutable, but can be assigned. This means that once you have
 *  a Value, you can be assured that none of the data in that Value will
 *  change. However if you have a non-const Value you replace it with
 *  operator=. These rules are the same as BSONObj, and similar to
 *  shared_ptr<const Object> with stronger guarantees of constness. This is
 *  also the same as Java's std::string type.
 *
 *  Thread-safety: A single Value instance can be safely shared between
 *  threads as long as there are no writers while other threads are
 *  accessing the object. Any number of threads can read from a Value
 *  concurrently. There are no restrictions on how threads access Value
 *  instances exclusively owned by them, even if they reference the same
 *  storage as Value in other threads.
 ','line_number':64,'multiline':True]
['text':'*
     * Operator overloads for relops return a DeferredComparison which can subsequently be evaluated
     * by a ValueComparator.
     ','line_number':86,'multiline':True]
['text':'* Construct a Value
     *
     *  All types not listed will be rejected rather than converted, to prevent unexpected implicit
     *  conversions to the accepted argument types (e.g. bool accepts any pointer).
     *
     *  Note: Currently these are all explicit conversions.
     *        I'm not sure if we want implicit or not.
     *  //TODO decide
     ','line_number':108,'multiline':True]
['text':' "Missing" value','line_number':118,'multiline':False]
['text':' BSONNull','line_number':142,'multiline':False]
['text':' BSONUndefined','line_number':143,'multiline':False]
['text':' MINKEY','line_number':144,'multiline':False]
['text':' MAXKEY','line_number':145,'multiline':False]
['text':'*
     *  Force the use of StringData to prevent accidental NUL-termination.
     ','line_number':151,'multiline':True]
['text':'*
     *  Prevent implicit conversions to the accepted argument types.
     ','line_number':161,'multiline':True]
['text':' TODO: add an unsafe version that can share storage with the BSONElement','line_number':168,'multiline':False]
['text':'/ Deep-convert from BSONElement to Value','line_number':169,'multiline':False]
['text':'/ Create a value from a SafeNum.','line_number':172,'multiline':False]
['text':'* Construct a long or integer-valued Value.
     *
     *  Used when preforming arithmetic operations with int where the
     *  result may be too large and need to be stored as long. The Value
     *  will be an int if value fits, otherwise it will be a long.
     ','line_number':176,'multiline':True]
['text':'* A "missing" value indicates the lack of a Value.
     *  This is similar to undefined/null but should not appear in output to BSON.
     *  Missing Values are returned by Document when accessing non-existent fields.
     ','line_number':184,'multiline':True]
['text':'/ true if missing() or type is jstNULL or Undefined','line_number':192,'multiline':False]
['text':'/ true if type represents a number','line_number':197,'multiline':False]
['text':'*
     * Return true if the Value is an array.
     ','line_number':203,'multiline':True]
['text':'*
     * Returns true if this value is a numeric type that can be represented as a 32-bit integer,
     * and false otherwise.
     ','line_number':210,'multiline':True]
['text':'*
     * Returns true if this value is numeric and a NaN value.
     ','line_number':216,'multiline':True]
['text':'*
     * Returns true if this value is numeric and infinite.
     ','line_number':221,'multiline':True]
['text':'*
     * Returns true if this value is a numeric type that can be represented as a 64-bit integer,
     * and false otherwise.
     ','line_number':226,'multiline':True]
['text':'*
     * Returns true if this value can be coerced to a Date, and false otherwise.
     ','line_number':232,'multiline':True]
['text':'/ Get the BSON type of the field.','line_number':243,'multiline':False]
['text':'* Exact type getters.
     *  Asserts if the requested value type is not exactly correct.
     *  See coerceTo methods below for a more type-flexible alternative.
     ','line_number':248,'multiline':True]
['text':' May contain embedded NUL bytes, the returned StringData is just a view into the string still','line_number':255,'multiline':False]
['text':' owned by this Value.','line_number':256,'multiline':False]
['text':' The returned BSONBinData remains owned by this Value.','line_number':270,'multiline':False]
['text':'/ Access an element of a subarray. Returns Value() if missing or getType() != Array','line_number':277,'multiline':False]
['text':'/ Access a field of a subdocument. Returns Value() if missing or getType() != Object','line_number':280,'multiline':False]
['text':'*
     * Recursively serializes this value as a field in the object in 'builder' with the field name
     * 'fieldName'. This function throws a AssertionException if the recursion exceeds the server's
     * BSON depth limit.
     ','line_number':283,'multiline':True]
['text':'*
     * Recursively serializes this value as an element in the array in 'builder'. This function
     * throws a AssertionException if the recursion exceeds the server's BSON depth limit.
     ','line_number':292,'multiline':True]
['text':' Support BSONObjBuilder and BSONArrayBuilder "stream" API','line_number':298,'multiline':False]
['text':'* Coerce a value to a bool using BSONElement::trueValue() rules.
     ','line_number':301,'multiline':True]
['text':'* Coercion operators to extract values with fuzzy type logic.
     *
     *  These currently assert if called on an unconvertible type.
     *  TODO: decided how to handle unsupported types.
     ','line_number':305,'multiline':True]
['text':'','line_number':318,'multiline':False]
['text':' Comparison API.','line_number':319,'multiline':False]
['text':'','line_number':320,'multiline':False]
['text':' Value instances can be compared either using Value::compare() or via operator overloads.','line_number':321,'multiline':False]
['text':' Most callers should prefer operator overloads. Note that the operator overloads return a','line_number':322,'multiline':False]
['text':' DeferredComparison, which must be subsequently evaluated by a ValueComparator. See','line_number':323,'multiline':False]
['text':' value_comparator.h for details.','line_number':324,'multiline':False]
['text':'','line_number':325,'multiline':False]
['text':'*
     * Compare two Values. Most Values should prefer to use ValueComparator instead. See
     * value_comparator.h for details.
     *
     *  Pass a non-null StringDataComparator if special string comparison semantics are
     *  required. If the comparator is null, then a simple binary compare is used for strings. This
     *  comparator is only used for string *values*; field names are always compared using simple
     *  binary compare.
     *
     *  @returns an integer less than zero, zero, or an integer greater than
     *           zero, depending on whether lhs < rhs, lhs == rhs, or lhs > rhs
     *  Warning: may return values other than -1, 0, or 1
     ','line_number':327,'multiline':True]
['text':'/ This is for debugging, logging, etc. See getString() for how to extract a string.','line_number':368,'multiline':False]
['text':'*
     * Returns a cache-only copy of the value with no backing bson.
     ','line_number':372,'multiline':True]
['text':'* Figure out what the widest of two numeric types is.
     *
     *  Widest can be thought of as "most capable," or "able to hold the
     *  largest or most precise value."  The progression is Int, Long, Double.
     ','line_number':381,'multiline':True]
['text':'/ Get the approximate memory size of the value, in bytes. Includes sizeof(Value)','line_number':388,'multiline':False]
['text':'*
     * Calculate a hash value.
     *
     * Meant to be used to create composite hashes suitable for hashed container classes such as
     * unordered_map<>.
     *
     * Most callers should prefer the utilities in ValueComparator for hashing and creating function
     * objects for computing the hash. See value_comparator.h.
     ','line_number':391,'multiline':True]
['text':'/ Call this after memcpying to update ref counts if needed','line_number':402,'multiline':False]
['text':'/ members for Sorter','line_number':407,'multiline':False]
['text':' unused','line_number':408,'multiline':False]
['text':'/ Members to support parsing/deserialization from IDL generated code.','line_number':419,'multiline':False]
['text':' Wrap a value in a BSONObj.','line_number':424,'multiline':False]
['text':' May contain embedded NUL bytes, does not check the type.','line_number':430,'multiline':False]
['text':' gets and sets _storage.genericRCPtr','line_number':434,'multiline':False]
['text':'*
 * This class is identical to Value, but supports implicit creation from any of the types explicitly
 * supported by Value.
 ','line_number':442,'multiline':True]
['text':'*
     * Converts a vector of Implicit values to a single Value object.
     ','line_number':466,'multiline':True]
['text':'*
     * Converts a vector of Implicit values to a vector of Values.
     ','line_number':477,'multiline':True]
['text':' namespace mongo','line_number':489,'multiline':False]
['text':' ======================= INLINED IMPLEMENTATIONS ========================== ','line_number':491,'multiline':True]
['text':' this is known to be NUL terminated','line_number':536,'multiline':False]
['text':' this is known to be NUL terminated','line_number':540,'multiline':False]
['text':' first byte after pattern's NUL','line_number':541,'multiline':False]
['text':' namespace mongo','line_number':580,'multiline':False]
