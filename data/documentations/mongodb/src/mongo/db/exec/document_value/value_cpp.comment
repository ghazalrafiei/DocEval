['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' Note: this also stores data portion of BinData','line_number':77,'multiline':False]
['text':' no NUL','line_number':82,'multiline':False]
['text':' All memory is zeroed before this is called, so we know that','line_number':84,'multiline':False]
['text':' the nulTerminator field will definitely contain a NUL byte.','line_number':85,'multiline':False]
['text':'middle NUL','line_number':109,'multiline':True]
['text':' Need to copy since putString doesn't support scatter-gather.','line_number':111,'multiline':False]
['text':' no NUL','line_number':114,'multiline':False]
['text':' not in header because document is fwd declared','line_number':127,'multiline':False]
['text':' An option of providing 'Value(Document)' was rejected in favor of 'Value(const Document&)' and','line_number':130,'multiline':False]
['text':' 'Value(Document&&)' overloads, and lvalue/rvalue reference overloads of callees, since','line_number':131,'multiline':False]
['text':' 'Value(Document)' option with a lvalue parameter would result in one extra move operation in','line_number':132,'multiline':False]
['text':' 'ValueStorage::putDocument()'.','line_number':133,'multiline':False]
['text':' These are all type-only, no data','line_number':140,'multiline':False]
['text':' it is too large to be an int and should remain a long','line_number':275,'multiline':False]
['text':' should be an int since all arguments were int and it fits','line_number':279,'multiline':False]
['text':' nothing appended','line_number':330,'multiline':False]
['text':' looking for void*','line_number':370,'multiline':False]
['text':' If this Value is empty, do nothing to avoid incrementing the builder's counter.','line_number':419,'multiline':False]
['text':' TODO Unify the implementation with BSONElement::trueValue().','line_number':440,'multiline':False]
['text':' namespace','line_number':494,'multiline':False]
['text':' switch(getType())','line_number':518,'multiline':False]
['text':' switch(getType())','line_number':542,'multiline':False]
['text':' switch(getType())','line_number':564,'multiline':False]
['text':' switch(getType())','line_number':586,'multiline':False]
['text':' switch(getType())','line_number':605,'multiline':False]
['text':' switch(getType())','line_number':645,'multiline':False]
['text':' switch(getType())','line_number':658,'multiline':False]
['text':' Helper function for Value::compare.','line_number':661,'multiline':False]
['text':' Better than l-r for cases where difference > MAX_INT','line_number':662,'multiline':False]
['text':' Note, this function needs to behave identically to BSONElement::compareElements().','line_number':676,'multiline':False]
['text':' Additionally, any changes here must be replicated in hash_combine().','line_number':677,'multiline':False]
['text':' fast-path common case','line_number':681,'multiline':False]
['text':' Order of types is the same as in BSONElement::compareElements() to make it easier to','line_number':688,'multiline':False]
['text':' verify.','line_number':689,'multiline':False]
['text':' These are valueless types','line_number':691,'multiline':False]
['text':' unsigned','line_number':702,'multiline':False]
['text':' signed','line_number':705,'multiline':False]
['text':' Numbers should compare by equivalence even if different types','line_number':708,'multiline':False]
['text':' All types can precisely represent all NumberInts, so it is safe to simply convert to','line_number':727,'multiline':False]
['text':' whatever rhs's type is.','line_number':728,'multiline':False]
['text':' compare the two corresponding elements','line_number':798,'multiline':False]
['text':' values are unequal','line_number':801,'multiline':False]
['text':' if we get here we are either equal or one is prefix of the other','line_number':804,'multiline':False]
['text':' Need to compare as an unsigned char rather than enum since BSON uses memcmp','line_number':823,'multiline':False]
['text':' same as String in this impl but keeping order same as','line_number':832,'multiline':False]
['text':' BSONElement::compareElements().','line_number':833,'multiline':False]
['text':'*
 * Hashes the given 'StringData', combines the resulting hash with 'seed', and returns the result.
 ','line_number':851,'multiline':True]
['text':' namespace','line_number':859,'multiline':False]
['text':' Order of types is the same as in Value::compare() and BSONElement::compareElements().','line_number':867,'multiline':False]
['text':' These are valueless types','line_number':869,'multiline':False]
['text':' Normalize our decimal to force equivalent decimals','line_number':893,'multiline':False]
['text':' in the same cohort to hash to the same value','line_number':894,'multiline':False]
['text':' Else, fall through and convert the decimal to a double and hash.','line_number':900,'multiline':False]
['text':' At this point the decimal fits into the range of doubles, is infinity, or is NaN,','line_number':901,'multiline':False]
['text':' which doubles have a cheaper representation for.','line_number':902,'multiline':False]
['text':' This converts all numbers to doubles, which ignores the low-order bits of','line_number':905,'multiline':False]
['text':' NumberLongs > 2**53 and precise decimal numbers without double representations,','line_number':906,'multiline':False]
['text':' but that is ok since the hash will still be the same for equal numbers and is','line_number':907,'multiline':False]
['text':' still likely to be different for different numbers. (Note: this issue only','line_number':908,'multiline':False]
['text':' applies for decimals when they are inside of the valid double range. See','line_number':909,'multiline':False]
['text':' the above case.)','line_number':910,'multiline':False]
['text':' SERVER-16851','line_number':911,'multiline':False]
['text':' Reachable, but callers must subsequently err out in this case.','line_number':1043,'multiline':False]
['text':' If we are able to convert the decimal to an int32_t without any rounding errors,','line_number':1056,'multiline':False]
['text':' then it is integral.','line_number':1057,'multiline':False]
['text':' If we are able to convert the decimal to an int64_t without any rounding errors,','line_number':1105,'multiline':False]
['text':' then it is a 64-bit.','line_number':1106,'multiline':False]
['text':' string stored inline, so no extra mem usage','line_number':1124,'multiline':False]
['text':' These types are always contained within the Value','line_number':1150,'multiline':False]
['text':' TODO use StringBuilder when operator << is ready','line_number':1169,'multiline':False]
['text':' Not in default case to trigger better warning if a case is missing','line_number':1245,'multiline':False]
['text':' type-only types','line_number':1265,'multiline':False]
['text':' simple types','line_number':1273,'multiline':False]
['text':' types that are like strings','line_number':1299,'multiline':False]
['text':'NUL byte','line_number':1305,'multiline':True]
['text':'NUL byte','line_number':1313,'multiline':True]
['text':'NUL byte','line_number':1318,'multiline':True]
['text':'NUL byte','line_number':1319,'multiline':True]
['text':'NUL byte','line_number':1328,'multiline':True]
['text':'NUL byte','line_number':1334,'multiline':True]
['text':' need sign extension for MinKey','line_number':1351,'multiline':False]
['text':' type-only types','line_number':1353,'multiline':False]
['text':' simple types','line_number':1361,'multiline':False]
['text':' types that are like strings','line_number':1382,'multiline':False]
['text':' namespace mongo','line_number':1451,'multiline':False]
