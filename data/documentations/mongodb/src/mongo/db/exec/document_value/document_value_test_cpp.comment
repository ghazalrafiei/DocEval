['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' advance index times','line_number':79,'multiline':False]
['text':' Prior to SERVER-26462, cloning an empty document would cause a segmentation fault.','line_number':138,'multiline':False]
['text':' Prior to SERVER-39209 this would make ASAN complain.','line_number':142,'multiline':False]
['text':' For good measure, try a third clone','line_number':146,'multiline':False]
['text':'*
 * Appends to 'builder' an object nested 'depth' levels deep.
 ','line_number':162,'multiline':True]
['text':' Should be able to get all top level fields without caching.','line_number':205,'multiline':False]
['text':' Get the field again to be sure it wasn't cached during the access above.','line_number':211,'multiline':False]
['text':' Try to get a top level field which doesn't exist.','line_number':216,'multiline':False]
['text':' Force 'scalar2' to be cached.','line_number':227,'multiline':False]
['text':' Attempt to access scalar2 with the non caching accessor. It should be cached already.','line_number':230,'multiline':False]
['text':' Attempt to access 'array' with the non caching accessor. It should not be cached.','line_number':237,'multiline':False]
['text':' Force 'array' to be cached.','line_number':245,'multiline':False]
['text':' Check that 'array' is cached and that we can read it with the non caching accessor.','line_number':248,'multiline':False]
['text':' With no fields cached.','line_number':261,'multiline':False]
['text':' Get a nested field without caching.','line_number':263,'multiline':False]
['text':' Check that it was not cached.','line_number':268,'multiline':False]
['text':' Check that the top level field isn't cached after accessing one of its children.','line_number':272,'multiline':False]
['text':' Get a dotted field which does not exist.','line_number':276,'multiline':False]
['text':' Check that the top level field isn't cached after a failed attempt to access one of its','line_number':280,'multiline':False]
['text':' children.','line_number':281,'multiline':False]
['text':' Get a dotted field which extends past a scalar.','line_number':285,'multiline':False]
['text':' Now force 'address.street' to be cached.','line_number':290,'multiline':False]
['text':' Check that we get the right value when accessing it with the non caching accessor.','line_number':293,'multiline':False]
['text':' The top level field should be cached.','line_number':295,'multiline':False]
['text':' Check that the other subfield, 'zip' is not cached.','line_number':304,'multiline':False]
['text':' Check that attempting to get a subfield of 'address.street' returns monostate.','line_number':310,'multiline':False]
['text':' Not cached.','line_number':321,'multiline':False]
['text':' Force part of the path to get cached.','line_number':328,'multiline':False]
['text':' The function should be able to traverse a path which is part Value and part BSONElement.','line_number':331,'multiline':False]
['text':' Force the entire path to be cached.','line_number':338,'multiline':False]
['text':' Attempting to traverse an uncached nested array results in TraversesArrayTag being','line_number':358,'multiline':False]
['text':' returned.','line_number':359,'multiline':False]
['text':' Check with no fields cached.','line_number':364,'multiline':False]
['text':' Force the top level array to be cached.','line_number':367,'multiline':False]
['text':' Check with one field cached.','line_number':370,'multiline':False]
['text':' Force the array that's in a sub object to be cached.','line_number':373,'multiline':False]
['text':' Check it works with both fields (and the full sub object) cached.','line_number':376,'multiline':False]
['text':' Force the cache construction, making the total size of the 'Document' bigger.','line_number':386,'multiline':False]
['text':' 'getApproximateSize()' must still return the same value.','line_number':387,'multiline':False]
['text':' Fields in the original doc shouldn't be cached since it was raw bson','line_number':428,'multiline':False]
['text':' BSON is more compact than ValueElement','line_number':431,'multiline':False]
['text':' Accessing a field shouldn't change the size since all fields are already cached.','line_number':435,'multiline':False]
['text':'* Add Document fields. ','line_number':463,'multiline':True]
['text':' No assertion is triggered by a duplicate field name.','line_number':474,'multiline':False]
['text':' Add field to the document as an lvalue.','line_number':481,'multiline':False]
['text':' Set field to the document as an lvalue.','line_number':487,'multiline':False]
['text':' Set nested field to the document as an lvalue.','line_number':492,'multiline':False]
['text':'* Get Document values. ','line_number':500,'multiline':True]
['text':' Missing field.','line_number':509,'multiline':False]
['text':'* Get Document fields. ','line_number':516,'multiline':True]
['text':' Initial positions. Used at end of function to make sure nothing moved','line_number':522,'multiline':False]
['text':' Set the first field.','line_number':529,'multiline':False]
['text':' Set the second field.','line_number':535,'multiline':False]
['text':' Remove the second field.','line_number':542,'multiline':False]
['text':' Remove the first field.','line_number':552,'multiline':False]
['text':' Remove the final field. Verify document is empty.','line_number':560,'multiline':False]
['text':' Set a nested field using []','line_number':569,'multiline':False]
['text':' Set a nested field using setNestedField','line_number':573,'multiline':False]
['text':' Set a nested fields through an existing empty document','line_number':578,'multiline':False]
['text':' Make sure nothing moved','line_number':585,'multiline':False]
['text':'* Document comparator. ','line_number':593,'multiline':True]
['text':' numbers sort before strings','line_number':606,'multiline':False]
['text':' numbers sort before strings, even if keys compare otherwise','line_number':611,'multiline':False]
['text':' null before number, even if keys compare otherwise','line_number':616,'multiline':False]
['text':' sign','line_number':623,'multiline':False]
['text':'* Shallow copy clone of a single field Document. ','line_number':643,'multiline':True]
['text':' Check equality.','line_number':650,'multiline':False]
['text':' Check pointer equality of sub document.','line_number':652,'multiline':False]
['text':' Change field in clone and ensure the original document's field is unchanged.','line_number':657,'multiline':False]
['text':' setNestedField and ensure the original document is unchanged.','line_number':662,'multiline':False]
['text':'* Shallow copy clone of a multi field Document. ','line_number':677,'multiline':True]
['text':'* FieldIterator for an empty Document. ','line_number':687,'multiline':True]
['text':'* FieldIterator for a single field Document. ','line_number':696,'multiline':True]
['text':'* FieldIterator for a multiple field Document. ','line_number':709,'multiline':True]
['text':' These are listed in order of BSONType with some duplicates','line_number':736,'multiline':False]
['text':' EOO not valid in middle of BSONObj','line_number':738,'multiline':False]
['text':' can't use append any more since arrBuilder is done','line_number':773,'multiline':False]
['text':' logical equality','line_number':783,'multiline':False]
['text':' binary equality','line_number':787,'multiline':False]
['text':' ensure sorter serialization round-trips correctly','line_number':791,'multiline':False]
['text':' namespace Document','line_number':831,'multiline':False]
['text':' Documents should not have a text score until it is set.','line_number':836,'multiline':False]
['text':' Setting the text score should work as expected.','line_number':839,'multiline':False]
['text':' Documents should not have a random value until it is set.','line_number':848,'multiline':False]
['text':' Setting the random value field should work as expected.','line_number':851,'multiline':False]
['text':' Setting the random value twice should keep the second value.','line_number':858,'multiline':False]
['text':' Documents should not have a search score until it is set.','line_number':868,'multiline':False]
['text':' Setting the search score field should work as expected.','line_number':871,'multiline':False]
['text':' Setting the searchScore twice should keep the second value.','line_number':878,'multiline':False]
['text':' Documents should not have a search highlights until it is set.','line_number':888,'multiline':False]
['text':' Setting the search highlights field should work as expected.','line_number':891,'multiline':False]
['text':' Setting the searchHighlights twice should keep the second value.','line_number':900,'multiline':False]
['text':' Documents should not have a value for searchScoreDetails until it is set.','line_number':913,'multiline':False]
['text':' Setting the searchScoreDetails field should work as expected.','line_number':916,'multiline':False]
['text':' Setting the searchScoreDetails twice should keep the second value.','line_number':925,'multiline':False]
['text':' Round trip to/from a buffer.','line_number':998,'multiline':False]
['text':' Same as above test, but add a non-meta field as well.','line_number':1051,'multiline':False]
['text':' Everything should still round trip even if the searchHighlights metadata isn't an array.','line_number':1070,'multiline':False]
['text':' Create a document with a backing BSONObj and separate metadata.','line_number':1113,'multiline':False]
['text':' Test the 'isTriviallyConvertible()' function.','line_number':1127,'multiline':False]
['text':' The original document is trivially convertible without metadata because the metadata was','line_number':1128,'multiline':False]
['text':' added to the document separately from the backing BSON object.','line_number':1129,'multiline':False]
['text':' The original document is NOT trivially convertible with metadata because the metadata was','line_number':1131,'multiline':False]
['text':' added to the document and does not exist in the BSONObj.','line_number':1132,'multiline':False]
['text':' The restored document is trivially convertible with metadata because the underlying BSONObj','line_number':1134,'multiline':False]
['text':' contains the metadata serialized from the original document.','line_number':1135,'multiline':False]
['text':' The restored document is NOT trivially convertible without metadata because the metadata','line_number':1137,'multiline':False]
['text':' fields need to be stripped from the underlying BSONObj.','line_number':1138,'multiline':False]
['text':' Test that the conversion with metadata 'origObjWithMetadata' -> 'restoredDocWithMetadata' ->','line_number':1141,'multiline':False]
['text':' 'restoredObjWithMetadata' is trivial because the backing BSON already contains metadata and','line_number':1142,'multiline':False]
['text':' neither the metadata nor the non-metadata fields have been modified.','line_number':1143,'multiline':False]
['text':' Test that 'restoredObjWithMetadata' is referring to the exact same memory location as','line_number':1146,'multiline':False]
['text':' 'origObjWithMetadata', i.e. both objdata() and objsize() match.','line_number':1147,'multiline':False]
['text':' Test that the conversion without metadata 'origObjWithMetadata' -> 'restoredDocWithMetadata'','line_number':1151,'multiline':False]
['text':' -> 'strippedRestoredObj' is NOT trivial because the backing BSON has metadata that must be','line_number':1152,'multiline':False]
['text':' omitted during serialization.','line_number':1153,'multiline':False]
['text':' 'restoredDocWithMetadata' is trivially convertible with metadata and converting it to BSON','line_number':1156,'multiline':False]
['text':' without metadata will return a new BSON object.','line_number':1157,'multiline':False]
['text':' Test that the conversion without metadata 'origObjNoMetadata' ->','line_number':1161,'multiline':False]
['text':' 'docWithSeparateBsonAndMetadata' -> 'restoredObjNoMetadata' is trivial because','line_number':1162,'multiline':False]
['text':' 'origObjNoMetadata' does not contain any metadata.','line_number':1163,'multiline':False]
['text':' Test that 'restoredObjNoMetadata' is referring to the exact same memory location as','line_number':1166,'multiline':False]
['text':' 'origObjNoMetadata', i.e. both objdata() and objsize() match.','line_number':1167,'multiline':False]
['text':' Test that an unmodified document without metadata is trivially convertible to BSON with and','line_number':1173,'multiline':False]
['text':' without metadata.','line_number':1174,'multiline':False]
['text':' A Document created with no backing BSON is not trivially convertible.','line_number':1182,'multiline':False]
['text':' An empty Document is trivially convertible, since the default BSONObj is also empty.','line_number':1187,'multiline':False]
['text':' Modifying a document with a backing BSON renders it not trivially convertible.','line_number':1194,'multiline':False]
['text':' Modifying the metadata of a document with a backing BSON renders it not trivially convertible','line_number':1203,'multiline':False]
['text':' with metadata.','line_number':1204,'multiline':False]
['text':' The second document has a larger "search highlights" object.','line_number':1219,'multiline':False]
['text':' Do a sanity check on the amount of space taken by metadata in document 2. Note that the size','line_number':1228,'multiline':False]
['text':' of certain data types may vary on different build variants, so we cannot assert on the exact','line_number':1229,'multiline':False]
['text':' size.','line_number':1230,'multiline':False]
['text':' Write an unrecognized option to the buffer.','line_number':1238,'multiline':False]
['text':' Signal there are 0 fields.','line_number':1240,'multiline':False]
['text':' This would specify a meta field with an invalid type.','line_number':1242,'multiline':False]
['text':' Signals end of input.','line_number':1244,'multiline':False]
['text':' namespace MetaFields','line_number':1252,'multiline':False]
['text':' EOO','line_number':1260,'multiline':False]
['text':'* Int type. ','line_number':1289,'multiline':True]
['text':'* Long type. ','line_number':1302,'multiline':True]
['text':'* Double type. ','line_number':1314,'multiline':True]
['text':'* String type. ','line_number':1325,'multiline':True]
['text':'* String with a null character. ','line_number':1336,'multiline':True]
['text':'*
 * SERVER-43205: Constructing a Value with a very large BSONElement string causes the Value
 * constructor to throw before it can completely initialize its ValueStorage member, which has the
 * potential to lead to incorrect state.
 ','line_number':1349,'multiline':True]
['text':'* Date type. ','line_number':1368,'multiline':True]
['text':'* Timestamp type. ','line_number':1379,'multiline':True]
['text':'* Document with no fields. ','line_number':1395,'multiline':True]
['text':'* Document type. ','line_number':1407,'multiline':True]
['text':' Check document pointers are equal.','line_number':1418,'multiline':False]
['text':' Check document contents.','line_number':1420,'multiline':False]
['text':' Construct Value from an rvalue.','line_number':1432,'multiline':False]
['text':'* Array with no elements. ','line_number':1440,'multiline':True]
['text':'* Array type. ','line_number':1455,'multiline':True]
['text':'* Oid type. ','line_number':1477,'multiline':True]
['text':'* Bool type. ','line_number':1488,'multiline':True]
['text':'* Regex type. ','line_number':1499,'multiline':True]
['text':'* Symbol type (currently unsupported). ','line_number':1510,'multiline':True]
['text':'* Undefined type. ','line_number':1521,'multiline':True]
['text':'* Null type. ','line_number':1531,'multiline':True]
['text':'* True value. ','line_number':1541,'multiline':True]
['text':'* False value. ','line_number':1552,'multiline':True]
['text':'* -1 value. ','line_number':1563,'multiline':True]
['text':'* 0 value. ','line_number':1574,'multiline':True]
['text':'* 1 value. ','line_number':1585,'multiline':True]
['text':'* Coerce 0 to bool. ','line_number':1622,'multiline':True]
['text':'* Coerce -1 to bool. ','line_number':1629,'multiline':True]
['text':'* Coerce 0LL to bool. ','line_number':1636,'multiline':True]
['text':'* Coerce 5LL to bool. ','line_number':1643,'multiline':True]
['text':'* Coerce 0.0 to bool. ','line_number':1650,'multiline':True]
['text':'* Coerce -1.3 to bool. ','line_number':1657,'multiline':True]
['text':'* Coerce "" to bool. ','line_number':1664,'multiline':True]
['text':'* Coerce {} to bool. ','line_number':1671,'multiline':True]
['text':'* Coerce [] to bool. ','line_number':1678,'multiline':True]
['text':'* Coerce Date(0) to bool. ','line_number':1685,'multiline':True]
['text':'* Coerce js literal regex to bool. ','line_number':1692,'multiline':True]
['text':'* Coerce true to bool. ','line_number':1699,'multiline':True]
['text':'* Coerce false to bool. ','line_number':1706,'multiline':True]
['text':'* Coerce null to bool. ','line_number':1713,'multiline':True]
['text':'* Coerce undefined to bool. ','line_number':1720,'multiline':True]
['text':'* Coerce -5 to int. ','line_number':1747,'multiline':True]
['text':'* Coerce long to int. ','line_number':1757,'multiline':True]
['text':'* Coerce 9.8 to int. ','line_number':1767,'multiline':True]
['text':'* Coerce null to int. ','line_number':1777,'multiline':True]
['text':'* Coerce undefined to int. ','line_number':1787,'multiline':True]
['text':'* Coerce "" to int unsupported. ','line_number':1797,'multiline':True]
['text':'* Coerce maxInt to int ','line_number':1805,'multiline':True]
['text':'* Coerce minInt to int ','line_number':1815,'multiline':True]
['text':'* Coerce maxInt + 1 to int ','line_number':1825,'multiline':True]
['text':'* Coerce minInt - 1 to int ','line_number':1835,'multiline':True]
['text':'* Coerce -5 to long. ','line_number':1865,'multiline':True]
['text':'* Coerce long to long. ','line_number':1875,'multiline':True]
['text':'* Coerce 9.8 to long. ','line_number':1885,'multiline':True]
['text':'* Coerce infinity to long. ','line_number':1895,'multiline':True]
['text':'* Coerce negative infinity to long. *','line_number':1905,'multiline':True]
['text':'* Coerce large to long. *','line_number':1915,'multiline':True]
['text':'* Coerce lowest double to long. *','line_number':1925,'multiline':True]
['text':'* Coerce 'towards infinity' to long *','line_number':1935,'multiline':True]
['text':'* Coerce null to long. ','line_number':1946,'multiline':True]
['text':'* Coerce undefined to long. ','line_number':1956,'multiline':True]
['text':'* Coerce string to long unsupported. ','line_number':1966,'multiline':True]
['text':'* Coerce -5 to double. ','line_number':1994,'multiline':True]
['text':'* Coerce long to double. ','line_number':2004,'multiline':True]
['text':' A long that cannot be exactly represented as a double.','line_number':2007,'multiline':False]
['text':'* Coerce double to double. ','line_number':2015,'multiline':True]
['text':'* Coerce null to double. ','line_number':2025,'multiline':True]
['text':'* Coerce undefined to double. ','line_number':2035,'multiline':True]
['text':'* Coerce string to double unsupported. ','line_number':2045,'multiline':True]
['text':'* Coerce date to date. ','line_number':2065,'multiline':True]
['text':'*
 * Convert timestamp to date.  This extracts the time portion of the timestamp, which
 * is different from BSON behavior of interpreting all bytes as a date.
 ','line_number':2075,'multiline':True]
['text':'* Coerce string to date unsupported. ','line_number':2088,'multiline':True]
['text':'* Coerce -0.2 to string. ','line_number':2110,'multiline':True]
['text':'* Coerce -4 to string. ','line_number':2120,'multiline':True]
['text':'* Coerce 10000LL to string. ','line_number':2130,'multiline':True]
['text':'* Coerce string to string. ','line_number':2140,'multiline':True]
['text':'* Coerce timestamp to string. ','line_number':2150,'multiline':True]
['text':'* Coerce date to string. ','line_number':2160,'multiline':True]
['text':' from js','line_number':2167,'multiline':False]
['text':'* Coerce null to string. ','line_number':2170,'multiline':True]
['text':'* Coerce undefined to string. ','line_number':2177,'multiline':True]
['text':'* Coerce document to string unsupported. ','line_number':2184,'multiline':True]
['text':'* Coerce timestamp to timestamp. ','line_number':2192,'multiline':True]
['text':'* Coerce date to timestamp unsupported. ','line_number':2201,'multiline':True]
['text':' namespace Coerce','line_number':2210,'multiline':False]
['text':'* Get the "widest" of two numeric types. ','line_number':2212,'multiline':True]
['text':' Numeric types.','line_number':2218,'multiline':False]
['text':' Missing value and numeric types (result Undefined).','line_number':2226,'multiline':False]
['text':' Missing value types (result Undefined).','line_number':2234,'multiline':False]
['text':' Other types (result Undefined).','line_number':2239,'multiline':False]
['text':'* Add a Value to a BSONObj. ','line_number':2251,'multiline':True]
['text':'* Add a Value to a BSONArray. ','line_number':2265,'multiline':True]
['text':'* Value comparator. ','line_number':2277,'multiline':True]
['text':' Undefined / null.','line_number':2285,'multiline':False]
['text':' Undefined / null with other types.','line_number':2290,'multiline':False]
['text':' Numeric types.','line_number':2302,'multiline':False]
['text':' strings compare between numbers and objects','line_number':2315,'multiline':False]
['text':' String comparison.','line_number':2322,'multiline':False]
['text':' With a null character.','line_number':2331,'multiline':False]
['text':' Object.','line_number':2334,'multiline':False]
['text':' Array.','line_number':2340,'multiline':False]
['text':' OID.','line_number':2347,'multiline':False]
['text':' Bool.','line_number':2351,'multiline':False]
['text':' Date.','line_number':2356,'multiline':False]
['text':' Negative date.','line_number':2359,'multiline':False]
['text':' Regex.','line_number':2362,'multiline':False]
['text':' Timestamp.','line_number':2367,'multiline':False]
['text':' High bit set.','line_number':2370,'multiline':False]
['text':' Cross-type comparisons. Listed in order of canonical types.','line_number':2373,'multiline':False]
['text':' reflexivity','line_number':2426,'multiline':False]
['text':' symmetry','line_number':2430,'multiline':False]
['text':' equal values must hash equally.','line_number':2435,'multiline':False]
['text':' unequal values must hash unequally.','line_number':2438,'multiline':False]
['text':' (not true in general but we should error if it fails in any of these cases)','line_number':2439,'multiline':False]
['text':' same as BSON','line_number':2443,'multiline':False]
['text':' ^ this outer object is removed by fromBson','line_number':2459,'multiline':False]
['text':' Can't be tested in AllTypesDoc since missing values are omitted when adding to BSON.','line_number':2487,'multiline':False]
['text':' Integer limits.','line_number':2505,'multiline':False]
['text':' 64-bit integer limits.','line_number':2515,'multiline':False]
['text':' Double limits.','line_number':2523,'multiline':False]
['text':' namespace Value','line_number':2575,'multiline':False]
['text':' namespace','line_number':2685,'multiline':False]
['text':' namespace mongo','line_number':2686,'multiline':False]
