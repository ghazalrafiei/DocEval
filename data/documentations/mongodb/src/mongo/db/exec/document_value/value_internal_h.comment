['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'* An immutable reference-counted string of inline data. ','line_number':57,'multiline':True]
['text':'* Used if constructor fails after placement `new (StringData)`. ','line_number':77,'multiline':True]
['text':' !__cpp_lib_destroying_delete','line_number':88,'multiline':False]
['text':'* Invoked by virtual destructor. ','line_number':89,'multiline':True]
['text':' __cpp_lib_destroying_delete','line_number':93,'multiline':False]
['text':' Incl. '\0'-terminator','line_number':97,'multiline':False]
['text':'* Use static `create()` instead. ','line_number':100,'multiline':True]
['text':'* Excluding '\0' terminator. ','line_number':114,'multiline':True]
['text':' TODO: a MutableVector, similar to MutableDocument','line_number':117,'multiline':False]
['text':'/ A heap-allocated reference-counted std::vector','line_number':118,'multiline':False]
['text':' Not worth converting to Document for now','line_number':131,'multiline':False]
['text':' Note: it is important the memory is zeroed out (by calling zero()) at the start of every','line_number':149,'multiline':False]
['text':' constructor. Much code relies on every byte being predictably initialized to zero.','line_number':150,'multiline':False]
['text':' This is a "missing" Value','line_number':152,'multiline':False]
['text':' Reset rhs to the missing state. TODO consider only doing this if refCounter.','line_number':243,'multiline':False]
['text':' This is designed to be effectively a no-op on self-assign, without needing an explicit','line_number':256,'multiline':False]
['text':' check. This requires that rhs's refcount is incremented before ours is released, and that','line_number':257,'multiline':False]
['text':' we use memmove rather than memcpy.','line_number':258,'multiline':False]
['text':' Reset rhs to the missing state. TODO consider only doing this if refCounter.','line_number':280,'multiline':False]
['text':' Don't need to update ref-counts because they will be the same in the end','line_number':285,'multiline':False]
['text':'/ Call this after memcpying to update ref counts if needed','line_number':292,'multiline':False]
['text':'/ These are only to be called during Value construction on an empty Value','line_number':300,'multiline':False]
['text':' Document is incomplete here so this can't be inline','line_number':365,'multiline':False]
['text':' the above types never reference external data','line_number':395,'multiline':False]
['text':' If this is using the short-string optimization, it must not have a ref-counted','line_number':403,'multiline':False]
['text':' pointer.','line_number':404,'multiline':False]
['text':' If this is _not_ using the short string optimization, it must be storing a','line_number':407,'multiline':False]
['text':' ref-counted pointer. One exception: in the BSONElement constructor of Value, it','line_number':408,'multiline':False]
['text':' is possible for this ValueStorage to get constructed as a type but never','line_number':409,'multiline':False]
['text':' initialized; the ValueStorage gets left as a nullptr and not marked as','line_number':410,'multiline':False]
['text':' ref-counted, which is ok (SERVER-43205).','line_number':411,'multiline':False]
['text':' TODO this should probably support short-string optimization','line_number':416,'multiline':False]
['text':' TODO this should probably support empty-is-NULL optimization','line_number':417,'multiline':False]
['text':' the above types always reference external data.','line_number':420,'multiline':False]
['text':' Objects either hold a NULL ptr or should be ref-counting','line_number':426,'multiline':False]
['text':' This data is public because this should only be used by Value which would be a friend','line_number':432,'multiline':False]
['text':' cover the whole ValueStorage','line_number':434,'multiline':False]
['text':' bytes[0]','line_number':438,'multiline':False]
['text':' bytes[1]','line_number':441,'multiline':False]
['text':' bit 0: true if we need to refCount','line_number':443,'multiline':False]
['text':' bit 1: true if we are using short strings','line_number':444,'multiline':False]
['text':' bytes[2:15]','line_number':448,'multiline':False]
['text':' TODO Consider moving into flags union (4 bits)','line_number':453,'multiline':False]
['text':'offset','line_number':454,'multiline':True]
['text':'NUL byte','line_number':454,'multiline':True]
['text':' TODO copy first few bytes of strings in here','line_number':464,'multiline':False]
['text':' 8 bytes long and 8-byte aligned','line_number':466,'multiline':False]
['text':' There should be no pointers to non-const data','line_number':467,'multiline':False]
['text':' Select void* alignment without interfering with any active pack directives. Can't use','line_number':482,'multiline':False]
['text':' alignas(void*) on this union because that would prohibit ValueStorage from being tightly','line_number':483,'multiline':False]
['text':' packed into a packed struct (though GCC does the tight packing anyway).','line_number':484,'multiline':False]
['text':'','line_number':485,'multiline':False]
['text':' Note that MSVC's behavior is GCC-incompatible. It obeys alignas even when a pack pragma','line_number':486,'multiline':False]
['text':' is active. That causes padding on MSVC when ValueStorage is used as a member of class','line_number':487,'multiline':False]
['text':' Value, which in turn is used as a member of packed class ValueElement.','line_number':488,'multiline':False]
['text':' http://lists.llvm.org/pipermail/cfe-dev/2014-July/thread.html#38174','line_number':489,'multiline':False]
['text':' namespace mongo','line_number':495,'multiline':False]
