['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' Contains update parameters like whether it's a multi update or an upsert. Not owned.','line_number':80,'multiline':False]
['text':' Must outlive the UpdateStage.','line_number':81,'multiline':False]
['text':' Contains the logic for applying mods to documents. Not owned. Must outlive','line_number':84,'multiline':False]
['text':' the UpdateStage.','line_number':85,'multiline':False]
['text':' Needed to pass to Collection::updateDocument(...).','line_number':88,'multiline':False]
['text':' Not owned here.','line_number':91,'multiline':False]
['text':' Determines how the update stats should be incremented. Will be incremented by 1 if the','line_number':94,'multiline':False]
['text':' function is empty.','line_number':95,'multiline':False]
['text':' Default constructor not allowed.','line_number':99,'multiline':False]
['text':'*
 * Execution stage responsible for updates to documents. If the prior or newly-updated version of
 * the document was requested to be returned, then ADVANCED is returned after updating a document.
 * Otherwise, NEED_TIME is returned after updating a document if further updates are pending,
 * and IS_EOF is returned if no documents were found or all updates have been performed.
 *
 * Callers of doWork() must be holding a write lock.
 ','line_number':103,'multiline':True]
['text':' Not owned by us.','line_number':156,'multiline':False]
['text':' Stats','line_number':159,'multiline':False]
['text':' A user-initiated write is one which is not caused by oplog application and is not part of a','line_number':162,'multiline':False]
['text':' chunk migration','line_number':163,'multiline':False]
['text':' These get reused for each update.','line_number':166,'multiline':False]
['text':'*
     * Computes the result of applying mods to the document 'oldObj' at RecordId 'recordId' in
     * memory, then commits these changes to the database. Returns a possibly unowned copy
     * of the newly-updated version of the document.
     ','line_number':171,'multiline':True]
['text':'*
     * Stores 'idToRetry' in '_idRetrying' so the update can be retried during the next call to
     * doWork(). Sets 'out' to WorkingSet::INVALID_ID.
     ','line_number':180,'multiline':True]
['text':'*
     * Performs checks on whether the existing or new shard key fields would change the owning
     * shard, including whether the owning shard under the current key pattern would change as a
     * result of the update, or if the destined recipient under the new shard key pattern from
     * resharding would change as a result of the update.
     *
     * Throws if the updated document does not have all of the shard key fields or no longer belongs
     * to this shard.
     *
     * Accepting a 'newObjCopy' parameter is a performance enhancement for updates which weren't
     * performed in-place to avoid rendering a full copy of the updated document multiple times.
     ','line_number':186,'multiline':True]
['text':'*
     * Checks that the updated doc has all required shard key fields and throws if it does not.
     *
     * Also checks if the updated doc still belongs to this node and throws if it does not. If the
     * doc no longer belongs to this shard, this means that one or more shard key field values have
     * been updated to a value belonging to a chunk that is not owned by this shard. We cannot apply
     * this update atomically.
     ','line_number':201,'multiline':True]
['text':' If not WorkingSet::INVALID_ID, we use this rather than asking our child what to do next.','line_number':216,'multiline':False]
['text':' If not WorkingSet::INVALID_ID, we return this member to our caller.','line_number':219,'multiline':False]
['text':' Guard against the "Halloween Problem": If we're scanning an index {x:1} and performing','line_number':222,'multiline':False]
['text':' {$inc:{x:5}}, we'll keep moving the document forward and it will continue to reappear in our','line_number':223,'multiline':False]
['text':' index scan. Unless the index is multikey, the underlying query machinery won't de-dup so we','line_number':224,'multiline':False]
['text':' keep track of already updated docs in '_updatedRecordIds'.','line_number':225,'multiline':False]
['text':'*
     * This member is used to check whether the write should be performed, and if so, any other
     * behavior that should be done as part of the write (e.g. skipping it because it affects an
     * orphan document). A yield cannot happen between the check and the write, so the checks are
     * embedded in the stage.
     *
     * It's refreshed after yielding and reacquiring the locks.
     ','line_number':229,'multiline':True]
['text':' namespace mongo','line_number':240,'multiline':False]
