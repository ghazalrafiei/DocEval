['text':'*
 *    Copyright (C) 2023-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 * A struct holding pieces of the command request that are a component of the query stats store key
 * and are options/arguments to all supported query stats commands.
 *
 * This struct (and the SpecificKeyComponents) are split out as a separate inheritence hierarchy to
 * make it easier to ensure each piece is hashed without sub-classes needing to enumerate the parent
 * class's member variables.
 ','line_number':62,'multiline':True]
['text':'*
     * Returns a copy of the read concern object. If there is an "afterClusterTime" component, the
     * timestamp is shapified according to 'opts'.
     ','line_number':81,'multiline':True]
['text':' Avoid using boost::optional here because it creates extra padding at the beginning of the','line_number':94,'multiline':False]
['text':' struct. Since each QueryStatsEntry has its own Key subclass, it's better to minimize','line_number':95,'multiline':False]
['text':' the struct's size as much as possible.','line_number':96,'multiline':False]
['text':' Preserve this value.','line_number':99,'multiline':False]
['text':' Shapify this value.','line_number':100,'multiline':False]
['text':' Preserve this value.','line_number':101,'multiline':False]
['text':' Preserve this value.','line_number':102,'multiline':False]
['text':' Preserve this value.','line_number':103,'multiline':False]
['text':' Preserved literal except afterClusterTime is shapified.','line_number':105,'multiline':False]
['text':' Separate the possibly-enormous BSONObj from the remaining members','line_number':108,'multiline':False]
['text':' Preserve this value in the query shape.','line_number':110,'multiline':False]
['text':' This value is not known when run a query is run on mongos over an unsharded collection, so it','line_number':113,'multiline':False]
['text':' is not set through that code path.','line_number':114,'multiline':False]
['text':' Simple hash of the client metadata object. This value is stored separately because it is','line_number':117,'multiline':False]
['text':' cached on the client to avoid re-computing on every operation. If no client metadata is','line_number':118,'multiline':False]
['text':' present, this will be the hash of an empty BSON object (otherwise known as 0).','line_number':119,'multiline':False]
['text':' This anonymous struct represents the presence of the member variables as C++ bit fields.','line_number':122,'multiline':False]
['text':' In doing so, each of these boolean values takes up 1 bit instead of 1 byte.','line_number':123,'multiline':False]
['text':'*
 * A base class for sub-classes to derive from to expose the hashing ability for all of their
 * sub-components.
 *
 * This struct (and the UniversalKeyComponents) are split out as a separate inheritence hierarchy to
 * make it easier to ensure each piece is hashed without sub-classes needing to enumerate the parent
 * class's member variables.
 ','line_number':135,'multiline':True]
['text':'*
     * Sub-classes should implement this to report how much memory is used. This is important to do
     * carefully since we are under a budget in the query stats store and use this to do the
     * accounting. Implementers should include sizeof(*derivedThis) and be sure to also include the
     * size of any owned pointer-like objects such as BSONObj or NamespaceString which are
     * indirectly using memory elsehwhere.
     *
     * We cannot just use sizeof() because there are some variable size data members (like BSON
     * objects) which depend on the particular instance.
     ','line_number':148,'multiline':True]
['text':' Note we use the comment's type in the hash function.','line_number':172,'multiline':False]
['text':' This static assert checks to ensure that the struct's size is changed thoughtfully. If adding','line_number':196,'multiline':False]
['text':' or otherwise changing the members, this assert may be updated with care.','line_number':197,'multiline':False]
['text':'*
 * An abstract base class representing a query stats store key for a given request. All query stats
 * store entries should include some common elements, tracked in `_universalComponents`.  For
 * example, everything tracked must have a `query_shape::Shape`.
 *
 * Subclasses can add more components to include as discriminating factors in which entries should
 * be tracked separately. For example, two find commands which are identical except in their read
 * concern should be tracked differently. Maybe they will have quite different performance
 * characteristics or help us determine when the read concern was changed by the client.
 *
 * The interface to do this is to split out the state/memory for these components as a separate
 * struct which can indpendently hash itself and compute its size (both of which are important for
 * the query stats store). Subclasses of Key itself should not have any meaningfully sized
 * state other than the 'specificComponents().'
 ','line_number':207,'multiline':True]
['text':'*
     * All Keys will share these characteristics as part of their query stats store key.
     * Returns an unowned reference so the caller must ensure the result does not outlive this
     * Key instance.
     ','line_number':226,'multiline':True]
['text':'*
     * Different commands will have different components they want to be included in the query stats
     * store key. This interface allows them to do so and easily have those components incorporated
     * into this key generation and hashing.
     ','line_number':235,'multiline':True]
['text':'*
     * Materializes the query stats store key. Not expected to be used on ingestion, since we should
     * store this object and its components directly in their native C++ data structures - we can
     * use the absl::HashOf() API to look them up. Instead, this may be useful to display the key
     * (as it is used for $queryStats) or perhaps one day persist it to storage.
     ','line_number':242,'multiline':True]
['text':'*
     * Convenience function.
     ','line_number':252,'multiline':True]
['text':' TODO (future ticket?) should we cache this somewhere else?','line_number':257,'multiline':False]
['text':' The default implementation of hashing for smart pointers is not a good one for our purposes.','line_number':270,'multiline':False]
['text':' Here we overload them to actually take the hash of the object, rather than hashing the','line_number':271,'multiline':False]
['text':' pointer itself.','line_number':272,'multiline':False]
['text':'*
     * Sub-classes can use this to instantiate a 'real' Key. 'queryShape' must not be null,
     * but is tracked as a pointer since it is a virtual class and we want to own it here.
     ','line_number':283,'multiline':True]
['text':'*
     * With a given BSONObjBuilder, append the command-specific components of the query stats key.
     *
     * You may be wondering why this API is here rather than as a virtual method on
     * CmdSpecificComponents - and that would be because many implementations can involve a re-parse
     * of the request if it needs to serialize with different serialization options. This re-parsing
     * process often needs the context of things tracked in _universalComponents, which is hard to
     * access from the specific components.
     ','line_number':294,'multiline':True]
['text':' namespace mongo::query_stats','line_number':310,'multiline':False]
