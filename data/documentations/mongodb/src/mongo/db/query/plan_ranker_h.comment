['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' IWYU pragma: no_include "boost/container/detail/std_fwd.hpp"','line_number':33,'multiline':False]
['text':' The logging facility enforces the rule that logging should not be done in a header file. Since','line_number':57,'multiline':False]
['text':' template classes and functions below must be defined in the header file and since they use the','line_number':58,'multiline':False]
['text':' logging facility, we have to define the helper functions below to perform the actual logging','line_number':59,'multiline':False]
['text':' operation from template code.','line_number':60,'multiline':False]
['text':' Note that we pass std::function callback instead of string values to avoid spending time','line_number':61,'multiline':False]
['text':' generating log output that may never actually be written to the logs, depending on the current','line_number':62,'multiline':False]
['text':' log level.','line_number':63,'multiline':False]
['text':' namespace log_detail','line_number':86,'multiline':False]
['text':' Constant used for tie breakers.','line_number':88,'multiline':False]
['text':'*
 * Assigns the stats tree a 'goodness' score. The higher the score, the better the plan. The exact
 * value isn't meaningful except for imposing a ranking.
 *
 * All specific plan scorers should inherit from this scorer and provide methods to produce the plan
 * productivity factor, and the number of plan "advances", representing the number of documents
 * returned by the PlanStage tree.
 ','line_number':91,'multiline':True]
['text':' We start all scores at 1.  Our "no plan selected" score is 0 and we want all plans to','line_number':106,'multiline':False]
['text':' be greater than that.','line_number':107,'multiline':False]
['text':' We prefer queries that don't require a fetch stage.','line_number':116,'multiline':False]
['text':' In the case of ties, prefer solutions without a blocking sort','line_number':122,'multiline':False]
['text':' to solutions with a blocking sort.','line_number':123,'multiline':False]
['text':' In the case of ties, prefer single index solutions to ixisect. Index','line_number':129,'multiline':False]
['text':' intersection solutions are often slower than single-index solutions','line_number':130,'multiline':False]
['text':' because they require examining a superset of index keys that would be','line_number':131,'multiline':False]
['text':' examined by a single index scan.','line_number':132,'multiline':False]
['text':'','line_number':133,'multiline':False]
['text':' On the other hand, index intersection solutions examine the same','line_number':134,'multiline':False]
['text':' number or fewer of documents. In the case that index intersection','line_number':135,'multiline':False]
['text':' allows us to examine fewer documents, the penalty given to ixisect','line_number':136,'multiline':False]
['text':' can be made up via the no fetch bonus.','line_number':137,'multiline':False]
['text':' The boost should be >2.001 to make absolutely sure the ixisect plan will win due','line_number':157,'multiline':False]
['text':' to the combination of 1) productivity, 2) eof bonus, and 3) no ixisect bonus.','line_number':158,'multiline':False]
['text':'*
     * Returns an abstract plan productivity value. Each implementation is free to define the
     * formula to calculate the productivity. The value must be withing the range: [0, 1].
     ','line_number':167,'multiline':True]
['text':'*
     * Returns a string desribing a formula to calculte plan producivity. It can be used for the log
     * output, for example.
     ','line_number':173,'multiline':True]
['text':'*
     * Returns the number of advances from the root stage stats, which represents the number of
     * documents returned by the PlanStage tree.
     ','line_number':179,'multiline':True]
['text':'*
     * True, if the plan stage stats tree represents a plan stage of the given 'type'.
     ','line_number':185,'multiline':True]
['text':'*
 * A container holding one to-be-scored plan and its associated/relevant data.
 * It takes the following template parameters:
 *    * PlanStageType - the type of plan stages in the execution tree.
 *    * ResultType - the type of data produced by the execution tree during the candidate plan
 *      execution.
 *    * Data - the type of any auxiliary data which is needed to run the execution tree.
 ','line_number':191,'multiline':True]
['text':' A query solution representing this candidate plan.','line_number':201,'multiline':False]
['text':' A root stage of the PlanStage tree constructed from the 'solution'.','line_number':203,'multiline':False]
['text':' Any auxiliary data required to run the execution tree.','line_number':205,'multiline':False]
['text':' Indicates whether this candidate plan has completed the trial run early by achieving one','line_number':207,'multiline':False]
['text':' of the trial run metrics.','line_number':208,'multiline':False]
['text':' If the candidate plan has failed in a recoverable fashion during the trial run, contains a','line_number':210,'multiline':False]
['text':' non-OK status.','line_number':211,'multiline':False]
['text':' Indicates whether this candidate plan was retrieved from the cache.','line_number':213,'multiline':False]
['text':' Any results produced during the plan's execution prior to scoring are retained here.','line_number':215,'multiline':False]
['text':' This is used to track the original plan with clean PlanStage tree and the auxiliary data.','line_number':217,'multiline':False]
['text':' The 'root' and 'data' in this struct could be used to execute trials in multi-planner before','line_number':218,'multiline':False]
['text':' caching the winning plan, which requires necessary values bound to 'data'. These values','line_number':219,'multiline':False]
['text':' should not be stored in the plan cache.','line_number':220,'multiline':False]
['text':'*
 * Apply index prefix heuristic (see comment to 'getIndexBoundsScore' function in the cpp file) for
 * the given list of solutions, if the solutions are compatible (have the same plan shape), the
 * vector of winner indexes are returned, otherwise an empty vector is returned.
 ','line_number':226,'multiline':True]
['text':' namespace mongo::plan_ranker','line_number':232,'multiline':False]
