['text':'*
 *    Copyright (C) 2023-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' IWYU pragma: no_include "ext/alloc_traits.h"','line_number':34,'multiline':False]
['text':' Define an initial binding level, so that the caller can define variable bindings before','line_number':48,'multiline':False]
['text':' invoking typeCheck().','line_number':49,'multiline':False]
['text':' Import the type inferred for the variables the parent checker knows.','line_number':55,'multiline':False]
['text':' Walk the list of active bindings until the variable is found.','line_number':69,'multiline':False]
['text':' No explicit type defined, return the wildcard type.','line_number':76,'multiline':False]
['text':' Verify that the new type for the variable is compatible with the information deducted until','line_number':81,'multiline':False]
['text':' now.','line_number':82,'multiline':False]
['text':' Store the association in the current binding level.','line_number':85,'multiline':False]
['text':' Add a new binding to the list of active ones.','line_number':90,'multiline':False]
['text':' We must never remove the top binding.','line_number':95,'multiline':False]
['text':' A constant has a signature of the type of the value stored inside the node.','line_number':103,'multiline':False]
['text':' Retrieve the current type of the variable.','line_number':111,'multiline':False]
['text':' Define the new variable with the type of the 'bind' expression type.','line_number':116,'multiline':False]
['text':' The Let node returns the value of its 'in' child.','line_number':119,'multiline':False]
['text':' The current binding must be the one where we defined the variable.','line_number':122,'multiline':False]
['text':' The signature of Not is boolean plus Nothing if the operand can be Nothing.','line_number':135,'multiline':False]
['text':' Recursively walk a binary node and invoke the callback with the arguments in the order of test.','line_number':146,'multiline':False]
['text':' e.g. And(And(a,b), And(c,d)) will invoke the callback on a,b,c,d.','line_number':147,'multiline':False]
['text':' In an And operation, due to the short-circuiting logic, a child node','line_number':168,'multiline':False]
['text':' can infer some extra type information just because it is being evaluated','line_number':169,'multiline':False]
['text':' after another node that must have returned a 'true' value.','line_number':170,'multiline':False]
['text':' E.g. (exists(s4) && isNumber(s4)) can never be Nothing because the only place','line_number':171,'multiline':False]
['text':'      where Nothing can be returned is isNumber, but s4 cannot be Nothing because','line_number':172,'multiline':False]
['text':'      the first child of the And node had to return 'true' in order for isNumber to','line_number':173,'multiline':False]
['text':'      be executed, and this excludes the possibility that s4 is Nothing.','line_number':174,'multiline':False]
['text':' If we are requested *not* to preserve our inferences, define a local binding where the','line_number':176,'multiline':False]
['text':' variables used inside the And can be constrained as each test is assumed to succeed.','line_number':177,'multiline':False]
['text':' If the saveInference is true, we will be writing directly in the scope that our caller','line_number':178,'multiline':False]
['text':' set up.','line_number':179,'multiline':False]
['text':' Visit the logical children in their natural order, even if they are not direct','line_number':185,'multiline':False]
['text':' children of this node.','line_number':186,'multiline':False]
['text':' Visit the child node using the flag 'saveInference' set to true, so that any','line_number':188,'multiline':False]
['text':' constraint applied to a variable can be stored in the local binding.','line_number':189,'multiline':False]
['text':' The signature of the And is boolean plus Nothing if any operands can be Nothing.','line_number':197,'multiline':False]
['text':' Visit the logical children in their natural order, even if they are not direct','line_number':201,'multiline':False]
['text':' children of this node.','line_number':202,'multiline':False]
['text':' The signature of the Or is boolean plus Nothing if any operands can be Nothing.','line_number':208,'multiline':False]
['text':' If the argument is already guaranteed not to be a Nothing, or the replacement value','line_number':217,'multiline':False]
['text':' is a Nothing itself, the fillEmpty can be removed.','line_number':218,'multiline':False]
['text':' The signature of FillEmtpy is the signature of the first argument, minus Nothing,','line_number':226,'multiline':False]
['text':' plus the signature of the second argument.','line_number':227,'multiline':False]
['text':' The signature of the Add/Sub is either numeric or date, plus Nothing.','line_number':234,'multiline':False]
['text':' The signature of the Mult is numeric plus Nothing.','line_number':242,'multiline':False]
['text':' Equality: check if one of the terms is a boolean constant, and remove it','line_number':249,'multiline':False]
['text':' Ensure we don't have a constant on the left side.','line_number':252,'multiline':False]
['text':' If the left side is type checked as a boolean and the right side is the','line_number':260,'multiline':False]
['text':' constant 'true', replace the comparison with just the left side; if it is','line_number':261,'multiline':False]
['text':' 'false', replace it with a not(left side).','line_number':262,'multiline':False]
['text':' The signature of the Eq is boolean plus Nothing if either operands can be','line_number':282,'multiline':False]
['text':' Nothing.','line_number':283,'multiline':False]
['text':' The signature of comparison is boolean plus Nothing if either operands can be','line_number':293,'multiline':False]
['text':' Nothing.','line_number':294,'multiline':False]
['text':' The signature of comparison is integer plus Nothing if either operands can be','line_number':300,'multiline':False]
['text':' Nothing.','line_number':301,'multiline':False]
['text':' If the argument is exactly Nothing, evaluate to Nothing','line_number':317,'multiline':False]
['text':' If the argument is only one (or more) of the types to check, evaluate to True','line_number':321,'multiline':False]
['text':' If the argument doesn't include Nothing or any of the types to check, evaluate to False','line_number':325,'multiline':False]
['text':' See if we can answer the typeMatch call only using type inference. The','line_number':349,'multiline':False]
['text':' type of the argument must be either completely inside or outside of the','line_number':350,'multiline':False]
['text':' requested type mask in order to constant fold this call. It also must not','line_number':351,'multiline':False]
['text':' include the possibility of being Nothing.','line_number':352,'multiline':False]
['text':' If the argument is already of the requested type (or Nothing), remove the','line_number':380,'multiline':False]
['text':' 'convert' call.','line_number':381,'multiline':False]
['text':' If the argument is already guaranteed not to be a Nothing or if it is a constant, we','line_number':397,'multiline':False]
['text':' can evaluate it now.','line_number':398,'multiline':False]
['text':' If this 'exists' is testing a variable and is part of an And, add a mask','line_number':402,'multiline':False]
['text':' excluding Nothing from the type information of the variable.','line_number':403,'multiline':False]
['text':' If the argument is already guaranteed to be a boolean or a Nothing, the coerceToBool','line_number':412,'multiline':False]
['text':' is unnecessary.','line_number':413,'multiline':False]
['text':' Always mark Nothing as a possible return type, as it can be reported due to invalid','line_number':454,'multiline':False]
['text':' arguments.','line_number':455,'multiline':False]
['text':' Define a new binding where the variables used inside the condition can be constrained by the','line_number':462,'multiline':False]
['text':' assumption that the condition is either true or false.','line_number':463,'multiline':False]
['text':' Remove the binding associated with the condition being true.','line_number':469,'multiline':False]
['text':' The signature of If is the mix of both branches, plus Nothing if the condition can produce','line_number':474,'multiline':False]
['text':' it.','line_number':475,'multiline':False]
['text':' Do the swap.','line_number':480,'multiline':False]
['text':' newN now contains the old ABT and will be destroyed upon exiting this function.','line_number':483,'multiline':False]
['text':' namespace mongo::stage_builder','line_number':488,'multiline':False]
