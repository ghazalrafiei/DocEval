['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 * Helper function to parse the given BSON object as a MatchExpression, checks the status,
 * and return the MatchExpression*.
 ','line_number':60,'multiline':True]
['text':' Passing a sortKey meta-projection without a sort is an error.','line_number':131,'multiline':False]
['text':' Should be able to successfully create a CQ when there is a sort.','line_number':141,'multiline':False]
['text':'','line_number':152,'multiline':False]
['text':' Tests for MatchExpression::sortTree','line_number':153,'multiline':False]
['text':'','line_number':154,'multiline':False]
['text':'*
 * Helper function for testing MatchExpression::sortTree().
 *
 * Verifies that sorting the expression 'unsortedQueryStr' yields an expression equivalent to
 * the expression 'sortedQueryStr'.
 ','line_number':156,'multiline':True]
['text':' Sanity check that the unsorted expression is not equivalent to the sorted expression.','line_number':169,'multiline':False]
['text':' Sanity check that sorting the sorted expression is a no-op.','line_number':172,'multiline':False]
['text':' Test that sorting the unsorted expression yields the sorted expression.','line_number':179,'multiline':False]
['text':' Test that an EQ expression sorts before a GT expression.','line_number':184,'multiline':False]
['text':' Test that an EQ expression on path "a" sorts before an EQ expression on path "b".','line_number':189,'multiline':False]
['text':' Test that AND expressions sort according to their first differing child.','line_number':196,'multiline':False]
['text':' Test that an AND with 2 children sorts before an AND with 3 children, if the first 2 children','line_number':201,'multiline':False]
['text':' are equivalent in both.','line_number':202,'multiline':False]
['text':'*
 * Utility function to create a CanonicalQuery
 ','line_number':208,'multiline':True]
['text':'*
 * Test function for CanonicalQuery::normalize.
 ','line_number':241,'multiline':True]
['text':' Field names','line_number':255,'multiline':False]
['text':' Operator types','line_number':257,'multiline':False]
['text':' Nested queries','line_number':259,'multiline':False]
['text':' Single-child $or elimination.','line_number':264,'multiline':False]
['text':' $or deduplication for same-path children.','line_number':266,'multiline':False]
['text':' Single-child $and elimination.','line_number':268,'multiline':False]
['text':' Single-child $_internalSchemaXor elimination.','line_number':270,'multiline':False]
['text':'skipHashTest','line_number':271,'multiline':True]
['text':' $or absorbs $or children.','line_number':272,'multiline':False]
['text':' $and absorbs $and children.','line_number':275,'multiline':False]
['text':' $_internalSchemaXor _does not_ absorb any children.','line_number':278,'multiline':False]
['text':'skipHashTest','line_number':283,'multiline':True]
['text':' $in with 0 arguments is alwaysFalse','line_number':284,'multiline':False]
['text':' $in with one argument is rewritten as an equality or regex predicate.','line_number':286,'multiline':False]
['text':' $in with two or more args is not rewritten','line_number':289,'multiline':False]
['text':' Child of $elemMatch object expression is normalized.','line_number':292,'multiline':False]
['text':' All three children of $_internalSchemaCond are normalized.','line_number':295,'multiline':False]
['text':'skipHashTest','line_number':303,'multiline':True]
['text':' Like the above test, but use $text which is a 'special feature' not always allowed. This is','line_number':333,'multiline':False]
['text':' meant to reproduce SERVER-XYZ.','line_number':334,'multiline':False]
['text':' Note: be sure to use the second child to get $text, since we 'normalize' and sort the','line_number':359,'multiline':False]
['text':' MatchExpression tree as part of canonicalization. This will put the text search clause','line_number':360,'multiline':False]
['text':' second.','line_number':361,'multiline':False]
['text':' namespace','line_number':558,'multiline':False]
['text':' namespace mongo','line_number':559,'multiline':False]
