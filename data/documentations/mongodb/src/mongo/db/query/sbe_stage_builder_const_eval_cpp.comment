['text':'*
 *    Copyright (C) 2023-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' We run the transport<true> that will pass the reference to optimizer::ABT to specific','line_number':58,'multiline':False]
['text':' transport functions. The reference serves as a conceptual 'this' pointer allowing the','line_number':59,'multiline':False]
['text':' transport function to change the node itself.','line_number':60,'multiline':False]
['text':' TODO: should we be clearing here?','line_number':74,'multiline':False]
['text':' See if we have already manipulated this definition and if so then use the newer version.','line_number':86,'multiline':False]
['text':' If we find the definition and it is a simple constant then substitute the variable.','line_number':95,'multiline':False]
['text':' The bind expressions has not been referenced so it is dead code and the whole let','line_number':119,'multiline':False]
['text':' expression can be removed; i.e. we implement a following rewrite:','line_number':120,'multiline':False]
['text':'','line_number':121,'multiline':False]
['text':' n == let var=<bind expr> in <in expr>','line_number':122,'multiline':False]
['text':'','line_number':123,'multiline':False]
['text':'     v','line_number':124,'multiline':False]
['text':'','line_number':125,'multiline':False]
['text':' n == <in expr>','line_number':126,'multiline':False]
['text':' We don't want to optimizer::make a copy of 'in' as it may be arbitrarily large. Also, we','line_number':128,'multiline':False]
['text':' cannot move it out as it is part of the Let object and we do not want to invalidate any','line_number':129,'multiline':False]
['text':' assumptions the Let may have about its structure. Hence we swap it for the "special"','line_number':130,'multiline':False]
['text':' Blackhole object. The Blackhole does nothing, it just plugs the hole left in the 'in'','line_number':131,'multiline':False]
['text':' place.','line_number':132,'multiline':False]
['text':' Swap the current node (n) for the result.','line_number':135,'multiline':False]
['text':' The bind expression has been referenced exactly once so schedule it for inlining.','line_number':138,'multiline':False]
['text':' If the 'lam' expression is optimizer::LambdaAbstraction then we can do the inplace beta','line_number':149,'multiline':False]
['text':' reduction.','line_number':150,'multiline':False]
['text':' TODO - missing alpha conversion so for now assume globally unique names.','line_number':151,'multiline':False]
['text':' Specific transport for binary operation','line_number':179,'multiline':False]
['text':' The const correctness is probably wrong (as const optimizer::ABT& lhs, const optimizer::ABT& rhs','line_number':180,'multiline':False]
['text':' does not work for some reason but we can fix it later).','line_number':181,'multiline':False]
['text':' Let say we want to recognize ConstLhs + ConstRhs and replace it with the result of','line_number':189,'multiline':False]
['text':' addition.','line_number':190,'multiline':False]
['text':' Let say we want to recognize ConstLhs - ConstRhs and replace it with the result of','line_number':204,'multiline':False]
['text':' subtraction.','line_number':205,'multiline':False]
['text':' Let say we want to recognize ConstLhs * ConstRhs and replace it with the result of','line_number':220,'multiline':False]
['text':' multiplication.','line_number':221,'multiline':False]
['text':' Nothing and short-circuiting semantics of the 'or' operation in SBE allow us to','line_number':236,'multiline':False]
['text':' interrogate 'lhs' only. The 'rhs' can be removed only if it is 'false'.','line_number':237,'multiline':False]
['text':' false || rhs -> rhs','line_number':242,'multiline':False]
['text':' true || rhs -> true','line_number':246,'multiline':False]
['text':' lhs || false -> lhs','line_number':253,'multiline':False]
['text':' Nothing and short-circuiting semantics of the 'and' operation in SBE allow us to','line_number':261,'multiline':False]
['text':' interrogate 'lhs' only. The 'rhs' can be removed only if it is 'true'.','line_number':262,'multiline':False]
['text':' false && rhs -> false','line_number':267,'multiline':False]
['text':' true && rhs -> rhs','line_number':271,'multiline':False]
['text':' lhs && true -> lhs','line_number':278,'multiline':False]
['text':' If the subtrees are equal, we can conclude that their result is equal because we','line_number':287,'multiline':False]
['text':' have only pure functions.','line_number':288,'multiline':False]
['text':' We have two non-equal constants, but they still may be equal from _collator's','line_number':294,'multiline':False]
['text':' point of view.','line_number':295,'multiline':False]
['text':' Not implemented.','line_number':417,'multiline':False]
['text':' We can simplify exists(constant) to true if the said constant is not Nothing.','line_number':425,'multiline':False]
['text':' We can simplify coerceToBool(constant).','line_number':431,'multiline':False]
['text':' We can simplify typeMatch(constant, constantMask).','line_number':438,'multiline':False]
['text':' We can simplify convert(constant).','line_number':454,'multiline':False]
['text':' All arguments are constants. Replace with an array constant.','line_number':482,'multiline':False]
['text':' Copy the value before inserting into the array.','line_number':487,'multiline':False]
['text':' If the condition is a boolean constant we can simplify.','line_number':503,'multiline':False]
['text':' if true -> thenBranch','line_number':507,'multiline':False]
['text':' if false -> elseBranch','line_number':511,'multiline':False]
['text':' If the condition is a Not we can remove it and swap the branches.','line_number':516,'multiline':False]
['text':' If the condition is an "exists" on an expression, the thenBranch is the same expression','line_number':523,'multiline':False]
['text':' and the elseBranch is a constant, the node is actually a FillEmpty.','line_number':524,'multiline':False]
['text':' Note that this is not true if the replacement value is an expression that can have side','line_number':525,'multiline':False]
['text':' effects, because FillEmpty has to evaluate both operands before deciding which one to','line_number':526,'multiline':False]
['text':' return: keeping the if(exists(..)) allows not to evaluate the elseBranch when the','line_number':527,'multiline':False]
['text':' condition returns true.','line_number':528,'multiline':False]
['text':' It is structurally impossible to nest optimizer::References nodes.','line_number':548,'multiline':False]
['text':' Record the mapping from the old to the new.','line_number':560,'multiline':False]
['text':' Do the swap.','line_number':566,'multiline':False]
['text':' newN now contains the old optimizer::ABT','line_number':569,'multiline':False]
['text':' namespace mongo::stage_builder','line_number':574,'multiline':False]
