['text':'*
 *    Copyright (C) 2023-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' IWYU pragma: no_include "ext/alloc_traits.h"','line_number':34,'multiline':False]
['text':'*
     * Returns true if 'this' is a non-strict subset of 'other'.
     ','line_number':55,'multiline':True]
['text':'*
 * Sum (union) of prime implicants.
 ','line_number':94,'multiline':True]
['text':'*
     * Inserts the 'implicant'. Uses the absorption law to minimize the number of
     * implicants. Three outcomes are possible: 1. The implicant is inserted. 2. The implicant is
     * inserted and some existing implicants are removed due to being absorbed by the new one. 3.
     * The implicant is not inserted because it was absorbed by one of the existing implicants.
     ','line_number':105,'multiline':True]
['text':' Here we apply the absorption law: X + XY = X.','line_number':120,'multiline':False]
['text':' Current is a non-strict subset of the new implicant, we don't need to add','line_number':122,'multiline':False]
['text':' implicant.','line_number':123,'multiline':False]
['text':' New implicant is a subset of the current, it means we remove the current, by','line_number':126,'multiline':False]
['text':' swapping the current element with the last element. The last elements will be','line_number':127,'multiline':False]
['text':' deleted in the end of the function by calling resize().','line_number':128,'multiline':False]
['text':' Erase removed elements and allocate memory for the new one if required.','line_number':136,'multiline':False]
['text':' Insert new implicant.','line_number':138,'multiline':False]
['text':'*
     * Finds the product of two implicant sums using De Morgan's laws.
     ','line_number':142,'multiline':True]
['text':' E.g., one implicant sum covers minterms with indices 0 and 1, and another with 0 and 2.','line_number':146,'multiline':False]
['text':' (I0 + I1) * (I0 + I2) = I0 + I0*I2 + I0*I1 + I1*I2.','line_number':147,'multiline':False]
['text':' Trying to add to the result every applicant we got here. In the example above it','line_number':152,'multiline':False]
['text':' would be I0, I0*I2, I0*I1, I1*I2. 'insertImplicant()' applies the absorption','line_number':153,'multiline':False]
['text':' law (X + XY = X) to minimize number of implicants. In the example only I0','line_number':154,'multiline':False]
['text':' and I1*I2 would be added, because I0 "absorbs" I0*I2 and I0*I1.','line_number':155,'multiline':False]
['text':'*
     * Finds if there is an intersection between an implicant and implicants of this
     * ImplicantSum.
     ','line_number':163,'multiline':True]
['text':'*
     * Expands a bitset representation of each prime implicant into a vector of minterm indexes and
     * returns the resulting vector, adding all essential implicants to each result.
     ','line_number':188,'multiline':True]
['text':'*
 * The Petrick's method implementation using tabular approach.
 ','line_number':206,'multiline':True]
['text':' Just return a vector of essential implicants if every minterm is already covered.','line_number':223,'multiline':False]
['text':'*
     * Simplifies the table by removing essential implicants and the minterms covered by them, and
     * sets the combined essential implicants as a member variable.
     ','line_number':246,'multiline':True]
['text':' If an ImplicantSum only has one PrimeImplicant, it is an essential implicant.','line_number':252,'multiline':False]
['text':' Look for intersection between vector of essential implicants and each implicantSum.','line_number':258,'multiline':False]
['text':' If we don't have an intersection, then that minterm is not covered by an essential','line_number':259,'multiline':False]
['text':' implicant and has to be simplified with Petrick's Method.','line_number':260,'multiline':False]
['text':' namespace','line_number':271,'multiline':False]
['text':' namespace mongo::boolean_simplification','line_number':281,'multiline':False]
