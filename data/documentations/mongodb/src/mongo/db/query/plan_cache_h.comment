['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' IWYU pragma: no_include "ext/alloc_traits.h"','line_number':36,'multiline':False]
['text':'*
 * Tracks the approximate cumulative size of the plan cache entries across all the collections.
 ','line_number':74,'multiline':True]
['text':'*
 * Tracks the number of query shapes in the plan cache entries across all the collections. Each
 * entry in the plan cache is a unique query shape.
 ','line_number':79,'multiline':True]
['text':'*
 * Represents the security level of a plan to help us dictate if we whould filter it out during
 * planCacheStats.
 ','line_number':85,'multiline':True]
['text':'*
 * Information returned from a get(...) query.
 ','line_number':94,'multiline':True]
['text':'*
     * Indicates whether or not the cached plan is pinned to cache.
     ','line_number':109,'multiline':True]
['text':' A cached plan that can be used to reconstitute the complete execution plan from cache.','line_number':116,'multiline':False]
['text':' The number of work cycles taken to decide on a winning plan when the plan was first','line_number':119,'multiline':False]
['text':' cached. The value of boost::none indicates that the plan is pinned to the cache and','line_number':120,'multiline':False]
['text':' is not subject to replanning.','line_number':121,'multiline':False]
['text':' Per-plan cache entry information that is used for debugging purpose. Shared across all plans','line_number':124,'multiline':False]
['text':' recovered from the same cached entry.','line_number':125,'multiline':False]
['text':'*
 * Used by the cache to track entries and their performance over time.
 * Also used by the plan cache commands to display plan cache state.
 ','line_number':129,'multiline':True]
['text':' If the cumulative size of the plan caches is estimated to remain within a predefined','line_number':147,'multiline':False]
['text':' threshold, then include additional debug info which is not strictly necessary for','line_number':148,'multiline':False]
['text':' the plan cache to be functional. Once the cumulative plan cache size exceeds this','line_number':149,'multiline':False]
['text':' threshold, omit this debug info as a heuristic to prevent plan cache memory consumption','line_number':150,'multiline':False]
['text':' from growing too large.','line_number':151,'multiline':False]
['text':' The stripping logic does not apply to SBE's debugging info as "DebugInfoSBE" is not','line_number':155,'multiline':False]
['text':' expected to be huge and is required to build a PlanExplainerSBE for the executor.','line_number':156,'multiline':False]
['text':'*
     * Create a cache entry without a plan ranking decision. Such entries contain plans for which
     * there are no alternatives. As a result, these plans are pinned to the cache and are always
     * active.
     ','line_number':177,'multiline':True]
['text':' isActive','line_number':195,'multiline':False]
['text':' decisionWorks','line_number':197,'multiline':False]
['text':'*
     * Indicates whether or not the cache entry is pinned to cache. Pinned entries are always active
     * and are not subject to replanning.
     ','line_number':206,'multiline':True]
['text':'*
     * Make a copy of this plan cache entry. For all members a deep copy will be made, apart from
     * 'debugInfo' which is shared among all clone entries.
     ','line_number':214,'multiline':True]
['text':' A cached plan that can be used to reconstitute the complete execution plan from cache.','line_number':242,'multiline':False]
['text':' Hash of the cache key. Intended as an identifier for the query shape in logs and other','line_number':247,'multiline':False]
['text':' diagnostic output.','line_number':248,'multiline':False]
['text':' Hash of the "stable" cache key, which is the same regardless of what indexes are around.','line_number':251,'multiline':False]
['text':' Hash of the plan cache command key. This key is a representation of the query shape used','line_number':254,'multiline':False]
['text':' specifically by the plan cache commands (planCacheClear, planCacheClearFilter,','line_number':255,'multiline':False]
['text':' planCacheListFilters, and planCacheSetFilter). Its encoding incorporates the filter, sort,','line_number':256,'multiline':False]
['text':' projection, and user-defined collation.','line_number':257,'multiline':False]
['text':' Whether or not the cache entry is active. Inactive cache entries should not be used for','line_number':260,'multiline':False]
['text':' planning.','line_number':261,'multiline':False]
['text':' Security level of the plan entry, dictates whether a plan should be omitted during','line_number':264,'multiline':False]
['text':' planCacheStats.','line_number':265,'multiline':False]
['text':' The number of "works" required for a plan to run on this shape before it becomes','line_number':268,'multiline':False]
['text':' active. This value is also used to determine the number of works necessary in order to','line_number':269,'multiline':False]
['text':' trigger a replan. Running a query of the same shape while this cache entry is inactive may','line_number':270,'multiline':False]
['text':' cause this value to be increased.','line_number':271,'multiline':False]
['text':'','line_number':272,'multiline':False]
['text':' If boost::none the cached entry is pinned to cached. Pinned entries are always active','line_number':273,'multiline':False]
['text':' and are not subject to replanning.','line_number':274,'multiline':False]
['text':' Optional debug info containing plan cache entry information that is used strictly as','line_number':277,'multiline':False]
['text':' debug information. Read-only and shared between all plans recovered from this entry.','line_number':278,'multiline':False]
['text':' An estimate of the size in bytes of this plan cache entry. This is the "deep size",','line_number':281,'multiline':False]
['text':' calculated by recursively incorporating the size of owned objects, the objects that they in','line_number':282,'multiline':False]
['text':' turn own, and so on.','line_number':283,'multiline':False]
['text':'*
     * All arguments constructor.
     ','line_number':287,'multiline':True]
['text':' Account for the object in the global metric for estimating the server's total plan cache','line_number':311,'multiline':False]
['text':' memory consumption.','line_number':312,'multiline':False]
['text':' Account for new entry in the plan cache.','line_number':314,'multiline':False]
['text':' Ensure that PlanCacheEntryBase is non-copyable.','line_number':318,'multiline':False]
['text':'*
 * A data structure for caching execution plans, to avoid repeatedly performing query optimization
 * and plan compilation on each invocation of a query. The cache is logically a mapping from
 * 'KeyType' to 'CachedPlanType'. The cache key is derived from the query, and can be used to
 * determine whether a cached plan is available. The cache has an LRU replacement policy, so it only
 * keeps the most recently used plans.
 ','line_number':334,'multiline':True]
['text':' The 'Value' being "std::shared_ptr<const Entry>" is because we allow readers to clone','line_number':350,'multiline':False]
['text':' cache entries out of the lock, therefore it is illegal to mutate the pieces of a cache','line_number':351,'multiline':False]
['text':' entry that can be cloned whether you are holding a lock or not.','line_number':352,'multiline':False]
['text':' We have three states for a cache entry to be in. Rather than just 'present' or 'not','line_number':372,'multiline':False]
['text':' present', we use a notion of 'inactive entries' as a way of remembering how performant our','line_number':373,'multiline':False]
['text':' original solution to the query was. This information is useful to prevent much slower','line_number':374,'multiline':False]
['text':' queries from putting their plans in the cache immediately, which could cause faster queries','line_number':375,'multiline':False]
['text':' to run with a sub-optimal plan. Since cache entries must go through the "vetting" process of','line_number':376,'multiline':False]
['text':' being inactive, we protect ourselves from the possibility of simply adding a cache entry','line_number':377,'multiline':False]
['text':' with a very high works value which will never be evicted.','line_number':378,'multiline':False]
['text':' There is no cache entry for the given query shape.','line_number':380,'multiline':False]
['text':' There is a cache entry for the given query shape, but it is inactive, meaning that it','line_number':383,'multiline':False]
['text':' should not be used when planning.','line_number':384,'multiline':False]
['text':' There is a cache entry for the given query shape, and it is active.','line_number':387,'multiline':False]
['text':'*
     * Encapsulates the value returned from a call to get().
     ','line_number':391,'multiline':True]
['text':'*
     * Initialize plan cache with the total cache size in bytes and number of partitions.
     ','line_number':399,'multiline':True]
['text':'*
     * Tries to add 'cachedPlan' into the plan cache.
     *
     * Callers are responsible for passing the current time so that the time the plan cache entry
     * was created is stored in the plan cache.
     *
     * 'worksGrowthCoefficient' specifies what multiplier to use when growing the 'works' value of
     * an inactive cache entry.  If boost::none is provided, the function will use
     * 'internalQueryCacheWorksGrowthCoefficient'.
     *
     * A 'callbacks' argument should be provided to perform some custom actions when the state of
     * the plan cache or a plan cache entry has been changed. The 'callbacks' is also responsible
     * for constructing DebugInfo.
     *
     * If the mapping was set successfully, returns Status::OK(), even if it evicted another entry.
     ','line_number':407,'multiline':True]
['text':' Can't use reference to structured bindings in a lambda until C++20 so manually','line_number':448,'multiline':False]
['text':' destructure it here.','line_number':449,'multiline':False]
['text':' All entries are always active.','line_number':454,'multiline':False]
['text':' isNewEntryActive  ','line_number':457,'multiline':True]
['text':' shouldBeCreated  ','line_number':458,'multiline':True]
['text':' Deference the pointer, then the shared_ptr, and then back to a raw pointer.','line_number':469,'multiline':False]
['text':' Avoid recomputing the hashes if we've got an old entry to grab them from.','line_number':475,'multiline':False]
['text':' We use callback function here to build the 'DebugInfo' rather than pass in a constructed','line_number':496,'multiline':False]
['text':' DebugInfo for performance.','line_number':497,'multiline':False]
['text':'','line_number':498,'multiline':False]
['text':' Most of the time when either creating a new cache entry or replacing an old cache entry,','line_number':499,'multiline':False]
['text':' the 'works' value is based on the latest trial run. However, if the cache entry was','line_number':500,'multiline':False]
['text':' inactive and the latest trial required a higher works value, then we follow a special','line_number':501,'multiline':False]
['text':' formula for computing an 'increasedWorks' value.','line_number':502,'multiline':False]
['text':'*
     * Adds a 'cachedPlan', resulting from a single QuerySolution, into the cache. A new cache entry
     * is always created and always active in this scenario.
     ','line_number':517,'multiline':True]
['text':'*
     * Set a cache entry back to the 'inactive' state. Rather than completely evicting an entry
     * when the associated plan starts to perform poorly, we deactivate it, so that plans which
     * perform even worse than the one already in the cache may not easily take its place.
     ','line_number':540,'multiline':True]
['text':' This is a noop if inactive entries are disabled.','line_number':547,'multiline':False]
['text':'*
     * Look up the cached data access for the provided key. Circumvents the recalculation
     * of a plan cache key.
     *
     * The return value will provide the "state" of the cache entry, as well as the CachedSolution
     * for the query (if there is one).
     ','line_number':568,'multiline':True]
['text':' The purpose of cloning 'entry' (in CachedPlanHolder ctor) after we release the lock','line_number':590,'multiline':False]
['text':' is to allow multiple threads to clone the same plan cache entry at once. 'entry'','line_number':591,'multiline':False]
['text':' cannot be deleted by another thread even if the plan cache is being concurrently','line_number':592,'multiline':False]
['text':' modified by other threads because we are holding a std::shared_ptr to this entry.','line_number':593,'multiline':False]
['text':'*
     * If the cache entry exists and is active, return a CachedSolution. If the cache entry is
     * inactive, log a message and return a nullptr. If no cache entry exists, return a nullptr.
     ','line_number':598,'multiline':True]
['text':'*
     * Returns a copy of a cache entry, looked up by the plan cache key.
     *
     * If there is no entry in the cache for the 'query', returns an error Status.
     ','line_number':613,'multiline':True]
['text':'*
     * Returns a vector of all cache entries. Does not guarantee a point-in-time view of the cache.
     ','line_number':626,'multiline':True]
['text':'*
     * Iterates over the plan cache. For each entry, first filters according to the predicate
     * function 'cacheKeyFilterFunc', (Note that 'cacheKeyFilterFunc' could be empty, if so, we
     * don't filter by plan cache key.), then serializes the PlanCacheEntryBase according to
     * 'serializationFunc'. Returns a vector of all serialized entries which match 'filterFunc'.
     ','line_number':639,'multiline':True]
['text':'*
     * Given a query, and an (optional) current cache entry for its shape ('oldEntry'), determine
     * whether:
     * - We should create a new entry
     * - The new entry should be marked 'active'
     * - The new entry should update 'works' to the new value returned as 'increasedWorks'.
     ','line_number':676,'multiline':True]
['text':' The new plan did better than the currently stored active plan. This case may','line_number':705,'multiline':False]
['text':' occur if many MultiPlanners are run simultaneously.','line_number':706,'multiline':False]
['text':' There is already an active cache entry with a lower works value.','line_number':716,'multiline':False]
['text':' We do nothing.','line_number':717,'multiline':False]
['text':' The cached plan performed worse than expected. Rather than immediately overwriting','line_number':720,'multiline':False]
['text':' the cache, lower the bar to what is considered good performance and keep the entry','line_number':721,'multiline':False]
['text':' inactive.','line_number':722,'multiline':False]
['text':' Be sure that 'works' always grows by at least 1, in case its current','line_number':724,'multiline':False]
['text':' value and 'internalQueryCacheWorksGrowthCoefficient' are low enough that','line_number':725,'multiline':False]
['text':' the old works * new works cast to size_t is the same as the previous value of','line_number':726,'multiline':False]
['text':' 'works'.','line_number':727,'multiline':False]
['text':' Create a new inactive cache entry with 'increasedWorks'.','line_number':735,'multiline':False]
['text':' This cached plan performed just as well or better than we expected, based on the','line_number':739,'multiline':False]
['text':' inactive entry's works. We use this as an indicator that it's safe to','line_number':740,'multiline':False]
['text':' cache (as an active entry) the plan this query used for the future.','line_number':741,'multiline':False]
['text':' We'll replace the old inactive entry with an active entry.','line_number':745,'multiline':False]
['text':' namespace mongo','line_number':754,'multiline':False]
