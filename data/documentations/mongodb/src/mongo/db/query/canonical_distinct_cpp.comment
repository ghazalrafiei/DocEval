['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 * Add the stages that pull all values along a path and puts them into an array. Includes the
 * necessary unwind stage that can turn those into individual documents.
 ','line_number':76,'multiline':True]
['text':'*
 * Helper for when converting a distinct() to an aggregation pipeline. This function may add a
 * $match stage enforcing that intermediate subpaths are objects so that no implicit array
 * traversal happens later on. The $match stage is only added when the path is dotted (e.g. "a.b"
 * but for "xyz").
 *
 * See comments in CanonicalDistinct::asAggregationCommand() for more detailed explanation.
 ','line_number':96,'multiline':True]
['text':' Add a clause to the $match predicate requiring that intermediate paths are objects so','line_number':116,'multiline':False]
['text':' that no implicit array traversal happens.','line_number':117,'multiline':False]
['text':'*
 * Checks dotted field for a projection and truncates the field name if we could be projecting on an
 * array element. Sets 'isIDOut' to true if the projection is on a sub document of _id. For example,
 * _id.a.2, _id.b.c.
 ','line_number':127,'multiline':True]
['text':' Check if field contains an array index.','line_number':133,'multiline':False]
['text':' Since we could exit early from the loop,','line_number':137,'multiline':False]
['text':' we should check _id here and set '*isIDOut' accordingly.','line_number':138,'multiline':False]
['text':' Skip the first dotted component. If the field starts','line_number':141,'multiline':False]
['text':' with a number, the number cannot be an array index.','line_number':142,'multiline':False]
['text':' Array indices cannot be negative numbers (this is not $slice).','line_number':146,'multiline':False]
['text':' Negative numbers are allowed as field names.','line_number':147,'multiline':False]
['text':' Generate prefix of field up to (but not including) array index.','line_number':149,'multiline':False]
['text':' Reset projectedField. Instead of overwriting, joinStringDelim() appends joined','line_number':152,'multiline':False]
['text':' string','line_number':153,'multiline':False]
['text':' to the end of projectedField.','line_number':154,'multiline':False]
['text':'*
 * Creates a projection spec for a distinct command from the requested field. In most cases, the
 * projection spec will be {_id: 0, key: 1}.
 * The exceptions are:
 * 1) When the requested field is '_id', the projection spec will {_id: 1}.
 * 2) When the requested field could be an array element (eg. a.0), the projected field will be the
 *    prefix of the field up to the array element. For example, a.b.2 => {_id: 0, 'a.b': 1} Note
 *    that we can't use a $slice projection because the distinct command filters the results from
 *    the executor using the dotted field name. Using $slice will re-order the documents in the
 *    array in the results.
 ','line_number':165,'multiline':True]
['text':' namespace','line_number':192,'multiline':False]
['text':' Build a pipeline that accomplishes the distinct request. The building code constructs a','line_number':204,'multiline':False]
['text':' pipeline that looks like this, assuming the distinct is on the key "a.b.c"','line_number':205,'multiline':False]
['text':'','line_number':206,'multiline':False]
['text':'      [','line_number':207,'multiline':False]
['text':'          { $match: { ... } },','line_number':208,'multiline':False]
['text':'          { $replaceRoot: {newRoot: {$_internalFindAllValuesAtPath: "a.b.c"}}},','line_number':209,'multiline':False]
['text':'          { $unwind: { path: "_internalUnwoundField", preserveNullAndEmptyArrays: true } },','line_number':210,'multiline':False]
['text':'          { $group: { _id: null, distinct: { $addToSet: "$<key>" } } }','line_number':211,'multiline':False]
['text':'      ]','line_number':212,'multiline':False]
['text':'','line_number':213,'multiline':False]
['text':' The purpose of the intermediate $replaceRoot and $unwind stages is to deal with cases','line_number':214,'multiline':False]
['text':' where there is an array along the distinct path. For example, if we're distincting on "a.b"','line_number':215,'multiline':False]
['text':' and have a document like {a: [{b: 1}, {b: 2}]}, distinct() should produce two values: 1','line_number':216,'multiline':False]
['text':' and 2.','line_number':217,'multiline':False]
['text':' Specify the 'cursor' option so that aggregation uses the cursor interface.','line_number':261,'multiline':False]
['text':' apiStrict ','line_number':281,'multiline':True]
['text':' The 'collPtr' will be null for views, but we don't need to worry about views here. The','line_number':359,'multiline':False]
['text':' views will get rewritten into aggregate command and will regenerate the','line_number':360,'multiline':False]
['text':' ExpressionContext.','line_number':361,'multiline':False]
['text':' mayDbProfile','line_number':369,'multiline':False]
['text':' namespace mongo','line_number':374,'multiline':False]
