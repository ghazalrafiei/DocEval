['text':'*
 *    Copyright (C) 2020-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' An abstract class used to notify on new insert events.','line_number':59,'multiline':False]
['text':' Performs the necessary work needed for waiting. Should be called prior calling waitUntil().','line_number':64,'multiline':False]
['text':' Performs any necessary steps after waiting. Should be called after waitUntil().','line_number':67,'multiline':False]
['text':' After calling doneWaiting, the caller must attempt to read the data waited for before','line_number':68,'multiline':False]
['text':' calling prepareForWait and waitUntil again, or a spurious wait may occur.','line_number':69,'multiline':False]
['text':' Blocks the caller until an insert event is fired or the deadline is hit.  Must be robust','line_number':72,'multiline':False]
['text':' to being called multiple times without an intervening read.','line_number':73,'multiline':False]
['text':' Class used to notify listeners of local inserts into the capped collection.','line_number':77,'multiline':False]
['text':' This will be initialized by prepareForWait.','line_number':99,'multiline':False]
['text':' Class used to notify listeners on majority committed point advancement events.','line_number':103,'multiline':False]
['text':' Computes the OpTime to wait on by incrementing the current read timestamp.','line_number':109,'multiline':False]
['text':'*
 * Returns true if the PlanExecutor should listen for inserts, which is when a getMore is called
 * on a tailable and awaitData cursor that still has time left and hasn't been interrupted.
 ','line_number':138,'multiline':True]
['text':'*
 * Returns true if the PlanExecutor should wait for data to be inserted, which is when a getMore
 * is called on a tailable and awaitData cursor on a capped collection.  Returns false if an EOF
 * should be returned immediately.
 ','line_number':145,'multiline':True]
['text':'*
 * Returns an insert notifier for a capped collection.
 ','line_number':154,'multiline':True]
['text':'*
 * Called for tailable and awaitData cursors in order to yield locks and waits for inserts to
 * the collection being tailed. Returns control to the caller once there has been an insertion
 * and there may be new results. If the PlanExecutor was killed during a yield, throws an
 * exception.
 ','line_number':161,'multiline':True]
['text':' namespace mongo::insert_listener','line_number':170,'multiline':False]
