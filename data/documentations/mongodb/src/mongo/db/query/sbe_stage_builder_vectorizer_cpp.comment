['text':'*
 *    Copyright (C) 2023-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' namespace','line_number':63,'multiline':False]
['text':' The output of a folding in this case is a block of boolean values.','line_number':85,'multiline':False]
['text':' The output of a folding in this case is a block of arrays or single values, so we','line_number':90,'multiline':False]
['text':' can't be more precise.','line_number':91,'multiline':False]
['text':' A constant can be used as is.','line_number':124,'multiline':False]
['text':' If the variable holds a cell, extract the block variable from that and propagate the name','line_number':131,'multiline':False]
['text':' of the cell variable to the caller to be used when folding back the result.','line_number':132,'multiline':False]
['text':' When we are computing projections, we always work on folded values.','line_number':139,'multiline':False]
['text':' If the argument is a block, create a block-generating operation.','line_number':163,'multiline':False]
['text':' Preserve scalar operation.','line_number':174,'multiline':False]
['text':' If the left argument is a block, and the right is a scalar value, create a','line_number':193,'multiline':False]
['text':' block-generating operation.','line_number':194,'multiline':False]
['text':' Propagate the name of the associated cell variable, this is not the place to','line_number':198,'multiline':False]
['text':' fold (there could be a fillEmpty node on top of this comparison).','line_number':199,'multiline':False]
['text':' Preserve scalar operation.','line_number':210,'multiline':False]
['text':' If one of the argument is a block, and the other is a scalar value, create a','line_number':236,'multiline':False]
['text':' block-generating operation.','line_number':237,'multiline':False]
['text':' Propagate the name of the associated cell variable, this is not the place to','line_number':258,'multiline':False]
['text':' fold (there could be a fillEmpty node on top of this comparison).','line_number':259,'multiline':False]
['text':' Preserve scalar operation.','line_number':268,'multiline':False]
['text':' An And operation between two blocks has to work at the level of measures, not on the','line_number':283,'multiline':False]
['text':' expanded arrays.','line_number':284,'multiline':False]
['text':' Treat the result of the left side as the mask to be applied on the right side.','line_number':288,'multiline':False]
['text':' This way, the right side can decide whether to skip the processing of the indexes','line_number':289,'multiline':False]
['text':' where the left side produced a false result.','line_number':290,'multiline':False]
['text':' Preserve scalar operation.','line_number':316,'multiline':False]
['text':' This placeholder function is injected when a tree like "traverseF(block_slot, <lambda>,','line_number':363,'multiline':False]
['text':' false)" would be used on scalar values. The traverseF would execute the lambda on the','line_number':364,'multiline':False]
['text':' current value in the slot if it is not an array; if it contains an array, it would','line_number':365,'multiline':False]
['text':' run the lambda on each element, picking as final result "true" (if at least one of','line_number':366,'multiline':False]
['text':' the outputs of the lambda is "true") otherwise "false". This behavior on a cell slot','line_number':367,'multiline':False]
['text':' is guaranteed by applying the lambda on the block representing the expanded cell','line_number':368,'multiline':False]
['text':' values and then invoking the valueBlockCellFold_F operation on the result.','line_number':369,'multiline':False]
['text':' Reuse the variable name of the lambda so that we don't have to manipulate the code','line_number':380,'multiline':False]
['text':' inside the lambda (and to avoid problems if the expression we are going to iterate','line_number':381,'multiline':False]
['text':' over has side effects and the lambda references it multiple times, as replacing it','line_number':382,'multiline':False]
['text':' directly in code would imply executing more than once). Don't propagate the reference','line_number':383,'multiline':False]
['text':' to the cell slot, as we are going to fold the result and we don't want that the','line_number':384,'multiline':False]
['text':' lambda does it too.','line_number':385,'multiline':False]
['text':' If the body of the lambda is just a scalar constant, create a block','line_number':393,'multiline':False]
['text':' of the same size of the block argument filled with that value.','line_number':394,'multiline':False]
['text':' This is a pure scalar function, preserve it as it could be used later as an argument for','line_number':438,'multiline':False]
['text':' a block-enabled operation.','line_number':439,'multiline':False]
['text':' We don't support this function applied to multiple blocks at the same time.','line_number':449,'multiline':False]
['text':' Simply recreate the Let node using the processed inputs.','line_number':455,'multiline':False]
['text':' Forward the inferred type to the inner expression.','line_number':460,'multiline':False]
['text':' Treat the result of the condition as the mask to be applied on the 'then' side, and its','line_number':496,'multiline':False]
['text':' flipped representation as the mask for the 'else' branch.','line_number':497,'multiline':False]
['text':' If the branch produces a scalar value, blockify it.','line_number':505,'multiline':False]
['text':' If the branch produces a scalar value, blockify it.','line_number':515,'multiline':False]
['text':' If we can't identify a single cell for both branches, fold them.','line_number':523,'multiline':False]
['text':' Scalar test, keep it as it is.','line_number':541,'multiline':False]
['text':' TODO: blockify the scalar branch.','line_number':552,'multiline':False]
['text':' If we can't identify a single cell for both branches, fold them.','line_number':561,'multiline':False]
['text':' namespace mongo::stage_builder','line_number':574,'multiline':False]
