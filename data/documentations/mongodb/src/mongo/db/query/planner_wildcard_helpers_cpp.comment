['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' IWYU pragma: no_include "boost/intrusive/detail/iterator.hpp"','line_number':36,'multiline':False]
['text':' IWYU pragma: no_include "ext/alloc_traits.h"','line_number':40,'multiline':False]
['text':'*
 * Returns a new key pattern object with '$_path' and finds the wildcard field name.
 ','line_number':76,'multiline':True]
['text':'*
 * Compares the path 'fieldNameOrArrayIndexPath' to 'staticComparisonPath', ignoring any array
 * indices present in the former if they are not present in the latter. The 'multikeyPathComponents'
 * set contains the path positions that are known to be arrays; only numerical path components that
 * immediately follow an array field are considered array indices. If 'fieldNameOrArrayIndexPath' is
 * 'a.0.b', it will match 'staticComparisonPath' 'a.0.b', and it will also match 'a.b' but only if
 * 'multikeyPathComponents' indicates that 'a' is an array.
 ','line_number':93,'multiline':True]
['text':' Can't be equal if 'staticComparisonPath' has more parts than 'fieldNameOrArrayIndexPath'.','line_number':104,'multiline':False]
['text':' Ensure that we matched the entire 'staticComparisonPath' dotted string.','line_number':122,'multiline':False]
['text':'*
 * Returns true if 'multikeyPathSet' contains a FieldRef that matches 'pathToLookup' exactly, or
 * matches 'pathToLookup' when the latter's array indices are ignored.
 ','line_number':126,'multiline':True]
['text':' Fast-path check for an exact match. If there is no exact match and 'pathToLookup' has no','line_number':133,'multiline':False]
['text':' numeric path components, then 'multikeyPathSet' does not contain the path.','line_number':134,'multiline':False]
['text':' Determine whether any of the 'multikeyPathSet' entries match 'pathToLookup' under relaxed','line_number':140,'multiline':False]
['text':' fieldname-or-array-index constraints.','line_number':141,'multiline':False]
['text':'*
 * Returns the positions of all path components in 'queryPath' that may be interpreted as array
 * indices by the query system. We obtain this list by finding all multikey path components that
 * have a numerical path component immediately after. Note that the 'queryPath' argument may be a
 * prefix of the full path used to generate 'multikeyPaths', and so we must avoid checking path
 * components beyond the end of 'queryPath'.
 ','line_number':149,'multiline':True]
['text':'*
 * Returns a FieldRef of the full dotted field, minus the parts at indices listed in
 * 'skipComponents'.
 ','line_number':167,'multiline':True]
['text':' If 'skipComponents' is empty, we return 'path' immediately.','line_number':173,'multiline':False]
['text':'*
 * Returns a MultikeyPaths which indicates which components of 'indexedPath' are multikey, by
 * looking up multikeyness in 'multikeyPathSet'.
 ','line_number':186,'multiline':True]
['text':' We iterate over the power set of array index positions to generate all necessary paths.','line_number':217,'multiline':False]
['text':' The algorithm is unavoidably O(n2^n), but we enforce that 'n' is never more than single','line_number':218,'multiline':False]
['text':' digits during the planner's index selection phase.','line_number':219,'multiline':False]
['text':' We iterate over every value [0..2^n), where 'n' is the size of 'potentialArrayIndices',','line_number':223,'multiline':False]
['text':' treating each value as a 'bitMask' of 'n' bits. Each bit in 'bitMask' represents the','line_number':224,'multiline':False]
['text':' entry at the equivalent position in the 'potentialArrayIndices' vector. When a given bit','line_number':225,'multiline':False]
['text':' is set, we treat the corresponding numeric path component as an array index, and generate','line_number':226,'multiline':False]
['text':' a path that omits it. When a bit is not set, we treat the numeric path component as a','line_number':227,'multiline':False]
['text':' literal fieldname, and we generate a path that includes it. Because we iterate over every','line_number':228,'multiline':False]
['text':' value [0..2^n), we ensure that we generate every combination of 'n' bits, and therefore','line_number':229,'multiline':False]
['text':' every possible fieldname and array index path.','line_number':230,'multiline':False]
['text':' Add the path to the FieldRef set, and obtain an iterator pointing to the new entry.','line_number':240,'multiline':False]
['text':' If any path in the set prefixes another, then the bounds generated will overlap (and','line_number':244,'multiline':False]
['text':' thus, be invalid). So, we must make sure that the new path does not prefix and is not','line_number':245,'multiline':False]
['text':' prefixed by any existing entries in the set. If any such prefixes do exist, we must','line_number':246,'multiline':False]
['text':' remove the subpath(s) and retain only the shortest prefix path, since the bounds it','line_number':247,'multiline':False]
['text':' generates will be a superset of all the paths generated by the removed entries.','line_number':248,'multiline':False]
['text':' If the new path is a subpath of an existing entry, remove the new path.','line_number':251,'multiline':False]
['text':' If existing paths are subpaths of the new entry, remove the old paths.','line_number':257,'multiline':False]
['text':'*
 * Returns false if 'queryPath' includes any numerical path components which render it unanswerable
 * by the $** index, true otherwise. Specifically, the $** index cannot answer the query if any
 * of the following scenarios occur:
 *
 * - The query path traverses through more than 'kWildcardMaxArrayIndexTraversalDepth' nested arrays
 * via explicit array indices.
 * - The query path has multiple successive positional components that come immediately after a
 *   multikey path component.
 * - The query path lies along a $** projection through an array index.
 *
 * For an example of the latter case, say that our query path is 'a.0.b', our projection includes
 * {'a.0': 1}, and 'a' is multikey. The query semantics will match 'a.0.b' by either field name or
 * array index against the documents, but because the $** index always projects numeric path
 * components strictly as field names, the projection {'a.0': 1} cannot correctly support this
 * query.
 *
 * To see why, consider the document {a: [1, 2, 3]}. Query {'a.0': 1} will match this document, but
 * the projection {'a.0': 1} will produce output document {a: []}, and so we will not index any of
 * the values [1, 2, 3] for 'a'.
 ','line_number':267,'multiline':True]
['text':' Find the position of the Wildcard's MultikeyComponents in the paths, we assume that the','line_number':291,'multiline':False]
['text':' wildcard field is the only one that can be multikey.','line_number':292,'multiline':False]
['text':' If no MultikeyComponents just return.','line_number':297,'multiline':False]
['text':' Find the positions of all multikey path components in 'queryPath' that have a numerical path','line_number':301,'multiline':False]
['text':' component immediately after. For a queryPath of 'a.2.b' this will return position 0; that is,','line_number':302,'multiline':False]
['text':' 'a'. If no such multikey path was found, we are clear to proceed with planning.','line_number':303,'multiline':False]
['text':' To support $** fieldname-or-array-index semantics, the planner must generate the power set of','line_number':308,'multiline':False]
['text':' all paths with and without array indices. Because this is O(2^n), we decline to answer','line_number':309,'multiline':False]
['text':' queries that traverse more than 8 levels of array indices.','line_number':310,'multiline':False]
['text':' Prevent the query from attempting to use a wildcard index if there are multiple successive','line_number':321,'multiline':False]
['text':' positional path components that follow a multikey path component. For example, the path','line_number':322,'multiline':False]
['text':' "a.0.1" cannot use a wildcard index if "a" is multikey.','line_number':323,'multiline':False]
['text':'','line_number':324,'multiline':False]
['text':' This restriction stems from the fact that wildcard indices do not recursively index nested','line_number':325,'multiline':False]
['text':' arrays. The document {a: [[3, 4]]}, for instance, will have a single index key containing','line_number':326,'multiline':False]
['text':' the array [3, 4] rather than individual index keys for 3 and 4. If "a" is known to be','line_number':327,'multiline':False]
['text':' multikey, then a user could issue a query like {"a.0.1": {$eq: 4}} to attempt to match by','line_number':328,'multiline':False]
['text':' position within a nested array. The access planner is not able to generate useful bounds for','line_number':329,'multiline':False]
['text':' such positional queries over nested arrays.','line_number':330,'multiline':False]
['text':'','line_number':331,'multiline':False]
['text':' We have already found all positional path components that are immediately preceded by a','line_number':332,'multiline':False]
['text':' multikey path component. All that remains is to bail out if any of these positional path','line_number':333,'multiline':False]
['text':' components are followed by another positional component.','line_number':334,'multiline':False]
['text':' There are two adjacent positional components, so this query might need to match by','line_number':339,'multiline':False]
['text':' position in a nested array. The query cannot be answered using a wildcard index.','line_number':340,'multiline':False]
['text':' If 'includedPaths' is empty, then either the $** projection is an exclusion, or no explicit','line_number':345,'multiline':False]
['text':' projection was provided. In either case, it is not possible for the query path to lie along','line_number':346,'multiline':False]
['text':' an array index projection, and so we are safe to proceed with planning.','line_number':347,'multiline':False]
['text':' Find the $** projected field which prefixes or is equal to the query path. If 'includedPaths'','line_number':351,'multiline':False]
['text':' is non-empty then we are guaranteed that exactly one entry will prefix the query path, since','line_number':352,'multiline':False]
['text':' (a) if no such inclusion exists, an IndexEntry would not have been created for this path, and','line_number':353,'multiline':False]
['text':' (b) conflicting paths, such as 'a.b' and 'a.b.c', are not permitted in projections.','line_number':354,'multiline':False]
['text':' If the projectedPath responsible for including this queryPath prefixes it up to and including','line_number':361,'multiline':False]
['text':' the numerical array index field, then the queryPath lies along a projection through the array','line_number':362,'multiline':False]
['text':' index, and we cannot support the query for the reasons outlined above.','line_number':363,'multiline':False]
['text':'*
 * Queries whose bounds overlap the Object type bracket may require special handling, since the $**
 * index does not index complete objects but instead only contains the leaves along each of its
 * subpaths. Since we ban all object-value queries except those on the empty object {}, this will
 * typically only be relevant for bounds involving MinKey and MaxKey, such as {$exists: true}.
 ','line_number':367,'multiline':True]
['text':' Create an Interval representing the subrange ({}, []) of the object type bracket. We exclude','line_number':374,'multiline':False]
['text':' both ends of the bracket because $** indexes support queries on empty objects and arrays.','line_number':375,'multiline':False]
['text':' Determine whether any of the ordered intervals overlap with the object type bracket. Because','line_number':384,'multiline':False]
['text':' Interval's various bounds-comparison methods all depend upon the bounds being in ascending','line_number':385,'multiline':False]
['text':' order, we reverse the direction of the input OIL if necessary here.','line_number':386,'multiline':False]
['text':' Iterate through each of the OIL's intervals. If the current interval precedes the bracket, we','line_number':389,'multiline':False]
['text':' must check the next interval in sequence. If the interval succeeds the bracket then we can','line_number':390,'multiline':False]
['text':' stop checking. If we neither precede nor succeed the object type bracket, then they overlap.','line_number':391,'multiline':False]
['text':' Break out of the switch and proceed to check the next interval.','line_number':396,'multiline':False]
['text':' If we're here, then all the OIL's bounds precede the object type bracket.','line_number':406,'multiline':False]
['text':'*
 * Returns expanded wildcard key pattern with a wildcard field replaced by the given expandField and
 * the position of the replaced wildcard field.
 ','line_number':410,'multiline':True]
['text':' Convert string 'fieldName' into a FieldRef, to better facilitate the subsequent checks.','line_number':446,'multiline':False]
['text':' $** indices hold multikey metadata directly in the index keys, rather than in the index','line_number':448,'multiline':False]
['text':' catalog. In turn, the index key data is used to produce a set of multikey paths','line_number':449,'multiline':False]
['text':' in-memory. Here we convert this set of all multikey paths into a MultikeyPaths vector','line_number':450,'multiline':False]
['text':' which will indicate to the downstream planning code which components of 'fieldName' are','line_number':451,'multiline':False]
['text':' multikey.','line_number':452,'multiline':False]
['text':' Check whether a query on the current fieldpath is answerable by the $** index, given any','line_number':456,'multiline':False]
['text':' numerical path components that may be present in the path string.','line_number':457,'multiline':False]
['text':' The expanded IndexEntry is only considered multikey if the particular path represented by','line_number':462,'multiline':False]
['text':' this IndexEntry has a multikey path component. For instance, suppose we have index {$**:','line_number':463,'multiline':False]
['text':' 1} with "a" as the only multikey path. If we have a query on paths "a.b" and "c.d", then','line_number':464,'multiline':False]
['text':' we will generate two expanded index entries: one for "a.b" and "c.d". The "a.b" entry','line_number':465,'multiline':False]
['text':' will be marked as multikey because "a" is multikey, whereas the "c.d" entry will not be','line_number':466,'multiline':False]
['text':' marked as multikey.','line_number':467,'multiline':False]
['text':' Expanded index entries always use the fixed-size multikey paths','line_number':480,'multiline':False]
['text':' representation, so we purposefully discard 'multikeyPathSet'.','line_number':481,'multiline':False]
['text':' sparse','line_number':483,'multiline':False]
['text':' unique','line_number':484,'multiline':False]
['text':'*
 * Determines if an expanded index entry can satisfy a query on a wildcard field with a FETCH
 * (for e.g., it may only be able to answer a query on the prefix if the wildcard field is being
 * queried with an incompatible $not predicate).
 *
 * Note: we could just use 'index.keyPattern' here for this check, but then we would have to iterate
 * through the entire pattern to get to the field at 'wildcardPos'.
 ','line_number':494,'multiline':True]
['text':' This is either a single-field wildcard index, or a compound wildcard index without a','line_number':509,'multiline':False]
['text':' prefix.','line_number':510,'multiline':False]
['text':' If the index entry was not expanded to include a second $_path field, we cannot answer a','line_number':514,'multiline':False]
['text':' query on a wildcard field with an IXSCAN + FETCH if the predicate itself is, for e.g. an','line_number':515,'multiline':False]
['text':' ineligible $not query, because we won't retrieve documents where the wildcard field is','line_number':516,'multiline':False]
['text':' missing from the IXSCAN.','line_number':517,'multiline':False]
['text':' namespace','line_number':520,'multiline':False]
['text':' $** indexes do not keep the multikey metadata inside the index catalog entry, as the amount','line_number':530,'multiline':False]
['text':' of metadata is not bounded. We do not expect IndexEntry objects for $** indexes to have a','line_number':531,'multiline':False]
['text':' fixed-size vector of multikey metadata until after they are expanded.','line_number':532,'multiline':False]
['text':' Obtain the projection executor from the parent wildcard IndexEntry.','line_number':537,'multiline':False]
['text':' If this wildcard index cannot be expanded because the wildcard field is not relevant. We','line_number':561,'multiline':False]
['text':' should also check whether the regular fields is able to answer the query or not. That is - if','line_number':562,'multiline':False]
['text':' any field of the regular fields in a compound wildcard index is in 'fields', then we should','line_number':563,'multiline':False]
['text':' also generate an expanded wildcard 'IndexEntry' for later index analysis.','line_number':564,'multiline':False]
['text':' This expanded IndexEntry is for queries on the non-wildcard prefix of a compound wildcard','line_number':577,'multiline':False]
['text':' index, the wildcard component is not required. We use the reserved path, "$_path", to','line_number':578,'multiline':False]
['text':' instruct the query planner to generate "all values" index bounds and not consider this','line_number':579,'multiline':False]
['text':' field in supporting any sort operation.','line_number':580,'multiline':False]
['text':' paths included ','line_number':582,'multiline':True]
['text':' This method should only ever be called for a $** IndexEntry. We expect to be called during','line_number':607,'multiline':False]
['text':' planning, *before* finishWildcardIndexScanNode has been invoked. The IndexEntry should thus','line_number':608,'multiline':False]
['text':' only have a single keyPattern field and multikeyPath entry, but this is sufficient to','line_number':609,'multiline':False]
['text':' determine whether it will be necessary to adjust the tightness.','line_number':610,'multiline':False]
['text':' If 'oil' was not filled the filter type may not be supported, but we can still use this','line_number':614,'multiline':False]
['text':' wildcard index for queries on prefix fields. The index bounds for the wildcard field will be','line_number':615,'multiline':False]
['text':' filled later to include all values. Therefore, we should use INEXACT_FETCH to avoid false','line_number':616,'multiline':False]
['text':' positives.','line_number':617,'multiline':False]
['text':' If our bounds include any objects -- anything in the range ({}, []) -- then we will need to','line_number':622,'multiline':False]
['text':' use subpath bounds; that is, we will add the interval ["path.","path/") at the point where we','line_number':623,'multiline':False]
['text':' finalize the index scan. If the subpath interval is required but the bounds do not already','line_number':624,'multiline':False]
['text':' run from MinKey to MaxKey, then we must expand them to [MinKey, MaxKey]. Consider the case','line_number':625,'multiline':False]
['text':' where out bounds are [[MinKey, undefined), (null, MaxKey]] as generated by {$ne: null}. Our','line_number':626,'multiline':False]
['text':' result set should include documents such as {a: {b: null}}; however, the wildcard index key','line_number':627,'multiline':False]
['text':' for this object will be {"": "a.b", "": null}, which means that the original bounds would','line_number':628,'multiline':False]
['text':' skip this document. We must also set the tightness to INEXACT_FETCH to avoid false positives.','line_number':629,'multiline':False]
['text':' We need to replace a previously added interval in the IET builder with a new','line_number':633,'multiline':False]
['text':' all-values interval.','line_number':634,'multiline':False]
['text':' If the query passes through any array indices, we must always fetch and filter the documents.','line_number':645,'multiline':False]
['text':' If the list of array indices we traversed is non-empty, set the tightness to INEXACT_FETCH.','line_number':649,'multiline':False]
['text':' We should only ever reach this point when processing a $** index. Sanity check the arguments.','line_number':658,'multiline':False]
['text':' For $** indexes, the IndexEntry key pattern is {..., 'path.to.field': 1, ...} but the actual','line_number':661,'multiline':False]
['text':' keys in the index are of the form {..., '$_path': 1, 'path.to.field': 1, ...}, where the','line_number':662,'multiline':False]
['text':' value of the wildcard field in each key is 'path.to.field'. We push a new entry into the','line_number':663,'multiline':False]
['text':' bounds vector for the leading '$_path' bound here. We also push corresponding fields into the','line_number':664,'multiline':False]
['text':' IndexScanNode's keyPattern and its multikeyPaths vector.','line_number':665,'multiline':False]
['text':' Update the position as we insert "$_path" prior to the wildcard field.','line_number':679,'multiline':False]
['text':' If the wildcard field is "$_path", the index is used to answer query only on the non-wildcard','line_number':682,'multiline':False]
['text':' prefix of a compound wildcard index. The bounds for the "$_path" field should scan all','line_number':683,'multiline':False]
['text':' string values and 'MinKey'. The bounds for the generic wildcard field should scan all values','line_number':684,'multiline':False]
['text':' with bounds, "[MinKey, MaxKey]". Because the wildcard field can generate multiple keys for','line_number':685,'multiline':False]
['text':' one single document, we should also instruct the IXSCAN to dedup keys.','line_number':686,'multiline':False]
['text':' Create a FieldRef to perform any necessary manipulations on the query path string.','line_number':696,'multiline':False]
['text':' If the bounds overlap the object type bracket or the wildcard field's bounds were not filled,','line_number':700,'multiline':False]
['text':' then we must retrieve all documents which include the given path. We must therefore add','line_number':701,'multiline':False]
['text':' bounds that encompass all its subpaths, specifically the interval ["path.","path/") on','line_number':702,'multiline':False]
['text':' "$_path".','line_number':703,'multiline':False]
['text':' Account for fieldname-or-array-index semantics. $** indexes do not explicitly encode array','line_number':707,'multiline':False]
['text':' indices in their keys, so if this query traverses one or more multikey fields via an array','line_number':708,'multiline':False]
['text':' index (e.g. query 'a.0.b' where 'a' is an array), then we must generate bounds on all array-','line_number':709,'multiline':False]
['text':' and non-array permutations of the path in order to produce INEXACT_FETCH bounds.','line_number':710,'multiline':False]
['text':' Add a $_path point-interval for each path that needs to be traversed in the index. If subpath','line_number':714,'multiline':False]
['text':' bounds are required, then we must add a further range interval on ["path.","path/").','line_number':715,'multiline':False]
['text':' Queries which scan subpaths for a single wildcard index should be deduped. The index','line_number':725,'multiline':False]
['text':' bounds may include multiple keys associated with the same document. Therefore, we','line_number':726,'multiline':False]
['text':' instruct the IXSCAN to dedup keys which point to the same object.','line_number':727,'multiline':False]
['text':' If the node is not a $** index scan, return false immediately.','line_number':734,'multiline':False]
['text':' Check the bounds on the query field for any intersections with the object type bracket.','line_number':739,'multiline':False]
['text':' Generating a [MinKey, MinKey] point interval. We use 'MinKey' as the "$_path" key value for','line_number':759,'multiline':False]
['text':' documents that don't have any wildcard field.','line_number':760,'multiline':False]
['text':' Generating a all-value index bounds for only string type, because "$_path" with a string','line_number':765,'multiline':False]
['text':' value tracks the wildcard path.','line_number':766,'multiline':False]
['text':' Check if the index is a CWI and its wildcard field was expanded to a specific field.','line_number':777,'multiline':False]
['text':' Expand the CWI's index bounds to include all keys for the '$_path' field and the wildcard','line_number':788,'multiline':False]
['text':' field.','line_number':789,'multiline':False]
['text':' Reverse the index bounds of the wildcard field.','line_number':810,'multiline':False]
['text':' Expand the index bounds of certain compound wildcard indexes in order to avoid missing any','line_number':822,'multiline':False]
['text':' documents for $or queries.','line_number':823,'multiline':False]
['text':' This expanding logic is only for $or queries with the assumption that there're only FETCH','line_number':825,'multiline':False]
['text':' and IXSCAN under OR to expand.','line_number':826,'multiline':False]
['text':' It's not safe to include/expand the index bounds if there's no filter in','line_number':844,'multiline':False]
['text':' the IndexScanNode and no FetchNode above the IndexScanNode. Therefore,','line_number':845,'multiline':False]
['text':' in order to prevent missing any document in any predicate of the $or query,','line_number':846,'multiline':False]
['text':' we should abandon the query plan using such compound wildcard index.','line_number':847,'multiline':False]
['text':' We can expand the CWI because there's a filter making sure the returning','line_number':850,'multiline':False]
['text':' documents match the predicate.','line_number':851,'multiline':False]
['text':' namespace wildcard_planning','line_number':859,'multiline':False]
['text':' namespace mongo','line_number':860,'multiline':False]
