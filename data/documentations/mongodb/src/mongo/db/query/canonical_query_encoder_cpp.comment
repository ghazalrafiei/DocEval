['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' If the query predicate is null, do not reuse the plan since empty arrays ([]) are','line_number':105,'multiline':False]
['text':' encoded as 'null' in the index. Thus we cannot safely invert the index bounds since 'null'','line_number':106,'multiline':False]
['text':' has special comparison semantics.','line_number':107,'multiline':False]
['text':'*
 * AppendChar provides the compiler with a type for a "appendChar(...)" member function.
 ','line_number':127,'multiline':True]
['text':'*
 * hasAppendChar is a template variable indicating whether such a void-returning member function
 * exists for a 'BuilderType'.
 ','line_number':133,'multiline':True]
['text':'*
 * Encode user-provided string. Cache key delimiters seen in the user string are escaped with a
 * backslash.
 ','line_number':140,'multiline':True]
['text':'*
 * String encoding of MatchExpression::MatchType.
 ','line_number':174,'multiline':True]
['text':'*
 * Encodes GEO match expression.
 * Encoding includes:
 * - type of geo query (within/intersect/near)
 * - geometry type
 * - CRS (flat or spherical)
 ','line_number':349,'multiline':True]
['text':' Type of geo query.','line_number':359,'multiline':False]
['text':' Geometry type.','line_number':372,'multiline':False]
['text':' Only one of the shared_ptrs in GeoContainer may be non-NULL.','line_number':373,'multiline':False]
['text':' CRS (flat or spherical)','line_number':376,'multiline':False]
['text':'*
 * Encodes GEO_NEAR match expression.
 * Encode:
 * - isNearSphere
 * - CRS (flat or spherical)
 ','line_number':392,'multiline':True]
['text':' isNearSphere','line_number':401,'multiline':False]
['text':' CRS (flat or spherical or strict-winding spherical)','line_number':404,'multiline':False]
['text':' Ensure val can be encoded as a digit between '0' and '9' inclusive.','line_number':426,'multiline':False]
['text':' Ensure that we can encode this value with a single ascii byte '0' through '9'.','line_number':442,'multiline':False]
['text':' We do not encode 'spec.version' because query shape strings are never persisted, and need','line_number':452,'multiline':False]
['text':' not be stable between versions.','line_number':453,'multiline':False]
['text':' We sort the flags, so that queries with the same regex flags in different orders will have','line_number':458,'multiline':False]
['text':' the same shape. We then add them to a set, so that identical flags across multiple regexes','line_number':459,'multiline':False]
['text':' will be deduplicated and the resulting set of unique flags will be ordered consistently.','line_number':460,'multiline':False]
['text':' Regex flags are not validated at parse-time, so we also ensure that only valid flags','line_number':461,'multiline':False]
['text':' contribute to the encoding.','line_number':462,'multiline':False]
['text':' Helper overload to prepare a vector of unique_ptrs for the heavy-lifting function above.','line_number':481,'multiline':False]
['text':' Helper that passes a range covering the entire source set into the heavy-lifting function above.','line_number':491,'multiline':False]
['text':'*
 * Traverses expression tree pre-order.
 * Appends an encoding of each node's match type and path name
 * to the output stream.
 ','line_number':497,'multiline':True]
['text':' Encode match type and path.','line_number':505,'multiline':False]
['text':' GEO and GEO_NEAR require additional encoding.','line_number':510,'multiline':False]
['text':' We encode regular expression flags such that different options produce different shapes.','line_number':517,'multiline':False]
['text':' Append '_re' to distinguish an $in without regexes from an $in with regexes.','line_number':523,'multiline':False]
['text':' If the query predicate is minKey or maxKey it can't use the same plan as other GT/LT','line_number':529,'multiline':False]
['text':' queries. If the index is multikey and the query involves one of these values, it needs','line_number':530,'multiline':False]
['text':' to use INEXACT_FETCH and the bounds can't be inverted. Therefore these need their own','line_number':531,'multiline':False]
['text':' shape.','line_number':532,'multiline':False]
['text':' If the query predicate involves comparison to null, do not reuse the plan since empty arrays','line_number':538,'multiline':False]
['text':' ([]) are encoded as null in the index. Thus we cannot safely invert the index bounds.','line_number':539,'multiline':False]
['text':' Traverse child nodes.','line_number':544,'multiline':False]
['text':' Enclose children in [].','line_number':545,'multiline':False]
['text':' Use comma to separate children encoding.','line_number':549,'multiline':False]
['text':'*
 * Encodes sort order into cache key. Sort order is normalized because it provided by
 * FindCommandRequest.
 ','line_number':562,'multiline':True]
['text':' $meta text score','line_number':575,'multiline':False]
['text':' Ascending','line_number':579,'multiline':False]
['text':' Descending','line_number':583,'multiline':False]
['text':' Sort argument separator','line_number':589,'multiline':False]
['text':'*
 * Encodes projection AST into a cache key.
 *
 * For projections which have a finite set of required fields (inclusion-only projections), encodes
 * those field names in order.
 *
 * For projections which require the entire document (exclusion projections, projections with
 * expressions), the projection section is empty.
 ','line_number':596,'multiline':True]
['text':' Don't encode anything for the projection section to indicate the entire document is','line_number':608,'multiline':False]
['text':' required.','line_number':609,'multiline':False]
['text':' If the only requirement is that $sortKey be included with some value, we just act as if the','line_number':615,'multiline':False]
['text':' entire document is needed.','line_number':616,'multiline':False]
['text':' Encode the fields required by the projection in order.','line_number':621,'multiline':False]
['text':' Internal callers (e.g, from mongos) may add "$sortKey" to the projection. This is not','line_number':626,'multiline':False]
['text':' part of the user query, and therefore are not considered part of the cache key.','line_number':627,'multiline':False]
['text':' Encode a OptionalBool value - 'n' if the value is not specified, 't' for true, and 'f' for','line_number':652,'multiline':False]
['text':' false.','line_number':653,'multiline':False]
['text':' Encode a BSON object by its raw data.','line_number':668,'multiline':False]
['text':' Read concern "available" results in SBE plans that do not perform shard filtering, so it must','line_number':674,'multiline':False]
['text':' be encoded differently from other read concerns.','line_number':675,'multiline':False]
['text':'*
 * A visitor intended for use in combination with the corresponding walker class below to encode a
 * 'MatchExpression' into the SBE plan cache key.
 *
 * Handles potentially parameterized queries, in which case parameter markers are encoded into the
 * cache key in place of the actual constant values.
 ','line_number':685,'multiline':True]
['text':' Encode the number of unique $in values as part of the plan cache key. If the query is','line_number':742,'multiline':False]
['text':' optimized by exploding for sort, the number of unique elements in $in determines how many','line_number':743,'multiline':False]
['text':' merge branches we get in the query plan.','line_number':744,'multiline':False]
['text':' Assume that $in have n elements.','line_number':748,'multiline':False]
['text':' If n is less than or equal to maxScansToExplode, then it is possible that explode for','line_number':749,'multiline':False]
['text':' sort optimization will be used, so we need to add n to plan cache key.','line_number':750,'multiline':False]
['text':' If n is greater than maxScansToExplode, then we can't explode it for sort. So we can','line_number':751,'multiline':False]
['text':' use the same value of (maxScansToExplode + 1) for all queries, so they can share a','line_number':752,'multiline':False]
['text':' plan cache entry.','line_number':753,'multiline':False]
['text':' Encode a discriminator so that a "simple" regex which is exactly convertible into','line_number':788,'multiline':False]
['text':' index bounds has a different shape from a non-simple regex.','line_number':789,'multiline':False]
['text':'','line_number':790,'multiline':False]
['text':' We don't actually need to know the contents of the prefix string, so we ignore the','line_number':791,'multiline':False]
['text':' first member of the pair.','line_number':792,'multiline':False]
['text':'*
     * Nothing needs to be encoded for these nodes beyond their type, their path (if they have one),
     * and their children.
     ','line_number':828,'multiline':True]
['text':' The 'InternalExpr*' match expressions are generated internally from a $expr, so they do not','line_number':840,'multiline':False]
['text':' need to contribute anything else to the cache key.','line_number':841,'multiline':False]
['text':'*
     * These node types are not yet supported in SBE.
     ','line_number':849,'multiline':True]
['text':' This is only used for time-series collections, but SBE isn't yet used for querying','line_number':862,'multiline':False]
['text':' time-series collections.','line_number':863,'multiline':False]
['text':' Used in the implementation of geoNear, which is not yet supported in SBE.','line_number':926,'multiline':False]
['text':'*
     * Encodes a 'PathMatchExpression' node of type T whose constant can be replaced with a single
     * parameter marker. If the parameter marker is not present, encodes the node's BSON constant
     * into the cache key.
     ','line_number':932,'multiline':True]
['text':'*
     * Encodes a non-path 'MatchExpression' node of type T whose constant can be replaced with a
     * single parameter marker. If the parameter marker is not present, encodes the entire node into
     * the cache key.
     ','line_number':947,'multiline':True]
['text':'*
     * Adds a special parameter marker byte to the cache key, followed by a four byte integer for
     * the parameter id.
     ','line_number':982,'multiline':True]
['text':'*
     * For path match expressions which can be written as {"some.path": {$operator: <RHS>}}, encodes
     * the right-hand side portion of the expression verbatim. Illegal to call if 'expr' has a
     * parameter marker.
     ','line_number':991,'multiline':True]
['text':' Call getSerializedRightHandSide() with 'inMatchExprSortAndDedupElements' set to false.','line_number':997,'multiline':False]
['text':'*
     * Similar to 'encodeRhs()' above, but for non-path match expressions. In this case, rather than
     * encode just the right-hand side, we call 'serialize()' to get a serialized version of the
     * full expression, and encode the result into the plan cache key. Illegal to call if 'expr' has
     * a parameter marker.
     ','line_number':1004,'multiline':True]
['text':'*
     * Encodes a special byte to mark a constant, followed by a byte for the BSON type of 'elem',
     * followed by the bytes of the value part of 'elem' (for types that have such a value).
     *
     * Note that the element's field name is not encoded, just the type and value.
     ','line_number':1022,'multiline':True]
['text':'*
 * A tree walker which walks a 'MatchExpression' tree and encodes the corresponding portion of the
 * SBE plan cache key into 'builder'.
 *
 * Handles potentially parameterized queries, in which case parameter markers are encoded into the
 * cache key in place of the actual constant values.
 ','line_number':1038,'multiline':True]
['text':' Encode the type of the node as well as the path (if there is a non-empty path).','line_number':1054,'multiline':False]
['text':' The node encodes itself, and then its children.','line_number':1058,'multiline':False]
['text':'*
 * Given a 'matchExpr' which may have parameter markers, encodes a key into 'builder' with the
 * following property: Two match expression trees which are identical after auto-parameterization
 * have the same key, otherwise the keys must differ.
 ','line_number':1081,'multiline':True]
['text':'*
 * Encode the stages pushed down to SBE via CanonicalQuery::cqPipeline.
 ','line_number':1093,'multiline':True]
['text':' Match expressions are parameterized so need to be encoded differently.','line_number':1104,'multiline':False]
['text':' for each stage in 'cqPipeline'','line_number':1121,'multiline':False]
['text':' namespace','line_number':1123,'multiline':False]
['text':' The apiStrict flag can cause the query to see different set of indexes. For example, all','line_number':1134,'multiline':False]
['text':' sparse indexes will be ignored with apiStrict is used.','line_number':1135,'multiline':False]
['text':' Do not encode query's hint if query settings already has index hints.','line_number':1152,'multiline':False]
['text':' A constant for reserving buffer size. It should be large enough to reserve the space required','line_number':1162,'multiline':False]
['text':' to encode various properties from the FindCommandRequest and query knobs.','line_number':1163,'multiline':False]
['text':' includeEndingNull ','line_number':1172,'multiline':True]
['text':' The apiStrict flag can cause the query to see different set of indexes. For example, all','line_number':1180,'multiline':False]
['text':' sparse indexes will be ignored with apiStrict is used.','line_number':1181,'multiline':False]
['text':' We can wind up with different query plans for aggregate commands if 'needsMerge' is set or','line_number':1186,'multiline':False]
['text':' not. For instance, when 'needsMerge' is true, $group queries will produce partial aggregates','line_number':1187,'multiline':False]
['text':' as output, and complete output otherwise.','line_number':1188,'multiline':False]
['text':' We only encode user-specified collation. Collation inherited from the collection should not','line_number':1205,'multiline':False]
['text':' be encoded.','line_number':1206,'multiline':False]
['text':' namespace canonical_query_encoder','line_number':1221,'multiline':False]
['text':' namespace mongo','line_number':1222,'multiline':False]
