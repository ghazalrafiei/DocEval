['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'','line_number':46,'multiline':False]
['text':' Text','line_number':47,'multiline':False]
['text':' Creating an FTS index {a:1, b:"text", c:1} actually','line_number':48,'multiline':False]
['text':' creates an index with spec {a:1, _fts: "text", _ftsx: 1, c:1}.','line_number':49,'multiline':False]
['text':' So, the latter is what we pass in to the planner.','line_number':50,'multiline':False]
['text':'','line_number':51,'multiline':False]
['text':' PS. You can also do {a:1, b:"text", d:"text", c:1} and it will create an index with the same','line_number':52,'multiline':False]
['text':' key pattern.','line_number':53,'multiline':False]
['text':'','line_number':54,'multiline':False]
['text':' Basic test that it works.','line_number':56,'multiline':False]
['text':' If you create an index {a:1, b: "text"} you can't use it for queries on just 'a'.','line_number':67,'multiline':False]
['text':' No table scans allowed so there is no solution.','line_number':73,'multiline':False]
['text':' But if you create an index {a:1, b:"text"} you can use it if it has a pred on 'a'','line_number':78,'multiline':False]
['text':' and a text query.','line_number':79,'multiline':False]
['text':' TODO: Do we want to $or a collection scan with a text search?','line_number':90,'multiline':False]
['text':' runQuery(fromjson("{$or: [{b:1}, {a:1, $text: {$search: 'blah'}}]}"));','line_number':91,'multiline':False]
['text':' assertNumSolutions(1);','line_number':92,'multiline':False]
['text':' But the prefixes must be points.','line_number':98,'multiline':False]
['text':' Outside predicates are not yet pushed into contained ORs for text indexes.','line_number':111,'multiline':False]
['text':' There can be more than one prefix, but they all require points.','line_number':121,'multiline':False]
['text':' Both points.','line_number':128,'multiline':False]
['text':' Missing a.','line_number':133,'multiline':False]
['text':' Missing b.','line_number':136,'multiline':False]
['text':' a is not a point','line_number':139,'multiline':False]
['text':' b is not a point','line_number':142,'multiline':False]
['text':' And, suffixes.  They're optional and don't need to be points.','line_number':146,'multiline':False]
['text':' Text is quite often multikey.  None of the prefixes can be arrays, and suffixes are indexed','line_number':176,'multiline':False]
['text':' as-is, so we should compound even if it's multikey.','line_number':177,'multiline':False]
['text':' Both points.','line_number':185,'multiline':False]
['text':' 'a' is not an EQ so it doesn't compound w/the text pred.  We also shouldn't use the text','line_number':197,'multiline':False]
['text':' index to satisfy it w/o the text query.','line_number':198,'multiline':False]
['text':' SERVER-15639: Test that predicates on index prefix fields which are not assigned to the index','line_number':223,'multiline':False]
['text':' prefix are correctly included in the solution node filter.','line_number':224,'multiline':False]
['text':' SERVER-13039: Test that we don't generate invalid solutions when the TEXT node','line_number':236,'multiline':False]
['text':' is buried beneath a logical node.','line_number':237,'multiline':False]
['text':' SERVER-13039','line_number':253,'multiline':False]
['text':' SERVER-13039','line_number':272,'multiline':False]
['text':' SERVER-13039','line_number':292,'multiline':False]
['text':' SERVER-13039','line_number':316,'multiline':False]
['text':' SERVER-13039','line_number':339,'multiline':False]
['text':' If only one branch of the $or can be indexed, then no indexed','line_number':361,'multiline':False]
['text':' solutions are generated, even if one branch is $text.','line_number':362,'multiline':False]
['text':' If the unindexable $or is not the one containing the $text predicate,','line_number':374,'multiline':False]
['text':' then we should still be able to generate an indexed solution.','line_number':375,'multiline':False]
['text':' Mandatory text index is used, and geo predicate becomes a filter.','line_number':401,'multiline':False]
['text':' SERVER-13960: $text beneath $or with exact predicates.','line_number':406,'multiline':False]
['text':' SERVER-13960: $text beneath $or with an inexact covered predicate.','line_number':421,'multiline':False]
['text':' namespace','line_number':569,'multiline':False]
