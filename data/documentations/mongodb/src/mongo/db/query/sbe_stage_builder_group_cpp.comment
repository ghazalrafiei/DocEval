['text':'*
 *    Copyright (C) 2023-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' Return true iff 'accStmt' is a $topN or $bottomN operator.','line_number':42,'multiline':False]
['text':' Return true iff 'accStmt' is one of $topN, $bottomN, $minN, $maxN, $firstN or $lastN.','line_number':50,'multiline':False]
['text':' To avoid overloaded-virtual warnings.','line_number':64,'multiline':False]
['text':'*
 * Walks through the 'expr' expression tree and whenever finds an 'ExpressionFieldPath', calls
 * the 'fn' function. Type requirement for 'fn' is it must have a const 'ExpressionFieldPath'
 * pointer parameter.
 ','line_number':76,'multiline':True]
['text':'inVisitor','line_number':84,'multiline':True]
['text':'postVisitor','line_number':84,'multiline':True]
['text':' Compute what values 'groupNode' will need from its child node in order to build expressions for','line_number':88,'multiline':False]
['text':' the group-by key ("_id") and the accumulators.','line_number':89,'multiline':False]
['text':' If the group node references any top level fields, we take all of them and add them to','line_number':94,'multiline':False]
['text':' 'childReqs'. Note that this happens regardless of whether we need the whole document because','line_number':95,'multiline':False]
['text':' it can be the case that this stage references '$$ROOT' as well as some top level fields.','line_number':96,'multiline':False]
['text':' Tracks whether we need to request kResult.','line_number':103,'multiline':False]
['text':' Walk over all field paths involved in this $group stage.','line_number':110,'multiline':False]
['text':' If any accumulator requires generating sort key, we cannot clear the kResult.','line_number':119,'multiline':False]
['text':' If the group node doesn't have any dependency (e.g. $count) or if the dependency can','line_number':123,'multiline':False]
['text':' be satisfied by the child node (e.g. covered index scan), we can clear the kResult','line_number':124,'multiline':False]
['text':' requirement for the child.','line_number':125,'multiline':False]
['text':' Collect the FieldPath expressions referenced by a GroupNode that should be exposed in a slot for','line_number':146,'multiline':False]
['text':' the group stage to work properly.','line_number':147,'multiline':False]
['text':' We optimize neither a field path for the top-level document itself nor a field path','line_number':152,'multiline':False]
['text':' that refers to a variable instead.','line_number':153,'multiline':False]
['text':' Don't generate an expression if we have one already.','line_number':158,'multiline':False]
['text':' Neither if it's a top level field which already have a slot.','line_number':163,'multiline':False]
['text':' Walk over all field paths involved in this $group stage.','line_number':168,'multiline':False]
['text':' Given a list of field path expressions used in the group-by ('_id') and accumulator expressions','line_number':176,'multiline':False]
['text':' of a $group, populate a slot in 'childOutputs' for each path found. Each slot is bound via a','line_number':177,'multiline':False]
['text':' ProjectStage to an EExpression that evaluates the path traversal.','line_number':178,'multiline':False]
['text':' Slot to EExpression map that tracks path traversal expressions. Note that this only contains','line_number':186,'multiline':False]
['text':' expressions corresponding to paths which require traversals (that is, if there exists a','line_number':187,'multiline':False]
['text':' top level field slot corresponding to a field, we take care not to add it to 'projects' to','line_number':188,'multiline':False]
['text':' avoid rebinding a slot).','line_number':189,'multiline':False]
['text':' Populates 'projects' and 'childOutputs' with an expression and/or a slot, respectively,','line_number':192,'multiline':False]
['text':' corresponding to the value of 'fieldExpr'.','line_number':193,'multiline':False]
['text':' Either find a slot corresponding to it or generate an expression for it and bind it to a','line_number':195,'multiline':False]
['text':' slot.','line_number':196,'multiline':False]
['text':' When there's only one field in the document _id expression, 'Nothing' is converted to','line_number':249,'multiline':False]
['text':' 'Null'.','line_number':250,'multiline':False]
['text':' TODO SERVER-21992: Remove the following block because this block emulates the classic','line_number':251,'multiline':False]
['text':' engine's buggy behavior. With index that can handle 'Nothing' and 'Null' differently,','line_number':252,'multiline':False]
['text':' SERVER-21992 issue goes away and the distinct scan should be able to return 'Nothing' and','line_number':253,'multiline':False]
['text':' 'Null' separately.','line_number':254,'multiline':False]
['text':' Composes the _id document and assigns a slot to the result using 'newObj' function if _id','line_number':263,'multiline':False]
['text':' should produce a document. For example, resultSlot = newObj(field1, slot1, ..., fieldN,','line_number':264,'multiline':False]
['text':' slotN)','line_number':265,'multiline':False]
['text':' The group-by field may end up being 'Nothing' and in that case _id: null will be','line_number':277,'multiline':False]
['text':' returned. Calling 'makeFillEmptyNull' for the group-by field takes care of that.','line_number':278,'multiline':False]
['text':' One accumulator may be translated to multiple accumulator expressions. For example, The','line_number':335,'multiline':False]
['text':' $avg will have two accumulators expressions, a sum(..) and a count which is implemented','line_number':336,'multiline':False]
['text':' as sum(1).','line_number':337,'multiline':False]
['text':' $topN/$bottomN accumulators require multiple arguments to the accumulator builder.','line_number':339,'multiline':False]
['text':' Build the key expression for the accumulator.','line_number':345,'multiline':False]
['text':' Build the value expression for the accumulator.','line_number':360,'multiline':False]
['text':' View ','line_number':382,'multiline':True]
['text':'*
 * Generate a vector of (inputSlot, mergingExpression) pairs. The slot (whose id is allocated by
 * this function) will be used to store spilled partial aggregate values that have been recovered
 * from disk and deserialized. The merging expression is an agg function which combines these
 * partial aggregates.
 *
 * Usually the returned vector will be of length 1, but in some cases the MQL accumulation statement
 * is implemented by calculating multiple separate aggregates in the SBE plan, which are finalized
 * by a subsequent project stage to produce the ultimate value.
 ','line_number':456,'multiline':True]
['text':' Zip the slot vector and expression vector into a vector of pairs.','line_number':490,'multiline':False]
['text':' Given a sequence 'groupBySlots' of slot ids, return a new sequence that contains all slots ids in','line_number':502,'multiline':False]
['text':' 'groupBySlots' but without any duplicate ids.','line_number':503,'multiline':False]
['text':' To passthrough the output slots of accumulators with trivial finalizers, we need to find','line_number':528,'multiline':False]
['text':' their slot ids. We can do this by sorting 'groupStage.outSlots' because the slot ids','line_number':529,'multiline':False]
['text':' correspond to the order in which the accumulators were translated (that is, the order in','line_number':530,'multiline':False]
['text':' which they are listed in 'accStmts'). Note, that 'groupStage.outSlots' contains deduped','line_number':531,'multiline':False]
['text':' group-by slots at the front and the accumulator slots at the back.','line_number':532,'multiline':False]
['text':' Gathers field names for the output object from accumulator statements.','line_number':554,'multiline':False]
['text':' The final step may not return an expression if it's trivial. For example, $first and','line_number':577,'multiline':False]
['text':' $last's final steps are trivial.','line_number':578,'multiline':False]
['text':' Some accumulator(s) like $avg generate multiple expressions and slots. So, need to','line_number':587,'multiline':False]
['text':' advance this index by the number of those slots for each accumulator.','line_number':588,'multiline':False]
['text':' Gathers all accumulator results. If there're no project expressions, does not add a project','line_number':592,'multiline':False]
['text':' stage.','line_number':593,'multiline':False]
['text':' Generate the accumulator expressions and HashAgg operator used to compute a $group pipeline','line_number':601,'multiline':False]
['text':' stage.','line_number':602,'multiline':False]
['text':' We materialize the groupId before the group stage to provide it as root to','line_number':625,'multiline':False]
['text':' initializer expression','line_number':626,'multiline':False]
['text':' As per the mql semantics add a project expression 'isObject(id) ? id : {}'','line_number':640,'multiline':False]
['text':' which will be provided as root to initializer expression','line_number':641,'multiline':False]
['text':' Translates accumulators which are executed inside the group stage and gets slots for','line_number':655,'multiline':False]
['text':' accumulators.','line_number':656,'multiline':False]
['text':' Since partial accumulator state may be spilled to disk and then merged, we must construct not','line_number':660,'multiline':False]
['text':' only the basic agg expressions for each accumulator, but also agg expressions that are used','line_number':661,'multiline':False]
['text':' to combine partial aggregates that have been spilled to disk.','line_number':662,'multiline':False]
['text':' There might be duplicated expressions and slots. Dedup them before creating a HashAgg','line_number':677,'multiline':False]
['text':' because it would complain about duplicated slots and refuse to be created, which is','line_number':678,'multiline':False]
['text':' reasonable because duplicated expressions would not contribute to grouping.','line_number':679,'multiline':False]
['text':' Builds a group stage with accumulator expressions and group-by slot(s).','line_number':687,'multiline':False]
['text':' Builds the final stage(s) over the collected accumulators.','line_number':711,'multiline':False]
['text':' namespace','line_number':721,'multiline':False]
['text':'*
 * Translates a 'GroupNode' QSN into a sbe::PlanStage tree. This translation logic assumes that the
 * only child of the 'GroupNode' must return an Object (or 'BSONObject') and the translated sub-tree
 * must return 'BSONObject'. The returned 'BSONObject' will always have an "_id" field for the group
 * key and zero or more field(s) for accumulators.
 *
 * For example, a QSN tree: GroupNode(nodeId=2) over a CollectionScanNode(nodeId=1), we would have
 * the following translated sbe::PlanStage tree. In this example, we assume that the $group pipeline
 * spec is {"_id": "$a", "x": {"$min": "$b"}, "y": {"$first": "$b"}}.
 *
 * [2] mkbson s12 [_id = s8, x = s11, y = s10] true false
 * [2] project [s11 = (s9 ?: null)]
 * [2] group [s8] [s9 = min(
 *   let [
 *      l1.0 = s5
 *  ]
 *  in
 *      if (typeMatch(l1.0, 1088ll) ?: true)
 *      then Nothing
 *      else l1.0
 * ), s10 = first((s5 ?: null))]
 * [2] project [s8 = (s4 ?: null)]
 * [1] scan s6 s7 none none none none [s4 = a, s5 = b] @<collUuid> true false
 ','line_number':723,'multiline':True]
['text':' Builds the child and gets the child result slot. If we don't need the full result object, we','line_number':762,'multiline':False]
['text':' can process block values.','line_number':763,'multiline':False]
['text':' Build the group stage in a separate helper method, so that the variables that are not needed','line_number':769,'multiline':False]
['text':' to setup the recursive call to build() don't consume precious stack.','line_number':770,'multiline':False]
['text':' Map of field paths referenced by group. Useful for de-duplicating fields and clearing the','line_number':786,'multiline':False]
['text':' slots corresponding to fields in 'childOutputs' so that they are not mistakenly referenced by','line_number':787,'multiline':False]
['text':' parent stages.','line_number':788,'multiline':False]
['text':' If we have block values in input, convert them to scalar values before computing the','line_number':791,'multiline':False]
['text':' projection.','line_number':792,'multiline':False]
['text':' If we have an object as group id, let's stop block processing immediately and build','line_number':805,'multiline':False]
['text':' the required projection to create it. If we have a single expression, we can try to','line_number':806,'multiline':False]
['text':' vectorize it.','line_number':807,'multiline':False]
['text':' Attempt to use a block-enabled project stage.','line_number':815,'multiline':False]
['text':' The group-by field may end up being 'Nothing' and in that case _id: null will be','line_number':817,'multiline':False]
['text':' returned. Calling 'makeFillEmptyNull' for the group-by field takes care of that.','line_number':818,'multiline':False]
['text':' Make up a temporary field name so that we can register the slot in the','line_number':831,'multiline':False]
['text':' childOutputs, as buildBlockToRow below reads from it to get the slots to convert','line_number':832,'multiline':False]
['text':' to scalar. Use a Base64-encoded UUID to minimize the chance of colliding with','line_number':833,'multiline':False]
['text':' existing fields.','line_number':834,'multiline':False]
['text':' TODO: remove this section when $group is able to digest block values.','line_number':846,'multiline':False]
['text':' For now, we have to close the block processing pipeline here, remove the','line_number':847,'multiline':False]
['text':' slot we just added and replace the slot used as group id with the scalar','line_number':848,'multiline':False]
['text':' result.','line_number':849,'multiline':False]
['text':' Vectorization is not possible, stop block processing now.','line_number':854,'multiline':False]
['text':' If vectorization wasn't needed, or if it failed, create the scalar projection.','line_number':859,'multiline':False]
['text':' Clear all fields needed by this group stage from 'childOutputs' to avoid references to','line_number':879,'multiline':False]
['text':' ExpressionFieldPath values that are no longer visible.','line_number':880,'multiline':False]
['text':' Builds a stage to create a result object out of a group-by slot and gathered accumulator','line_number':897,'multiline':False]
['text':' result slots if the parent node requests so.','line_number':898,'multiline':False]
['text':' This mkbson stage combines 'finalSlots' into a bsonObject result slot which has','line_number':902,'multiline':False]
['text':' 'fieldNames' fields.','line_number':903,'multiline':False]
['text':' objSlot','line_number':906,'multiline':False]
['text':' rootSlot','line_number':907,'multiline':False]
['text':' fieldBehavior','line_number':908,'multiline':False]
['text':' fields','line_number':909,'multiline':False]
['text':' projectFields','line_number':910,'multiline':False]
['text':' projectVars','line_number':911,'multiline':False]
['text':' forceNewObject','line_number':912,'multiline':False]
['text':' returnOldObject','line_number':913,'multiline':False]
['text':' objSlot','line_number':917,'multiline':False]
['text':' rootSlot','line_number':918,'multiline':False]
['text':' fieldBehavior','line_number':919,'multiline':False]
['text':' fields','line_number':920,'multiline':False]
['text':' projectFields','line_number':921,'multiline':False]
['text':' projectVars','line_number':922,'multiline':False]
['text':' forceNewObject','line_number':923,'multiline':False]
['text':' returnOldObject','line_number':924,'multiline':False]
['text':' namespace mongo::stage_builder','line_number':931,'multiline':False]
