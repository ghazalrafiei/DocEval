['text':'*
 *    Copyright (C) 2023-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 * Creates a balanced boolean binary expression tree from given collection of leaf expression.
 ','line_number':52,'multiline':True]
['text':'*
 * Check if expression returns Nothing and return boolean false if so. Otherwise, return the
 * expression.
 ','line_number':81,'multiline':True]
['text':'*
 * Check if expression returns Nothing and return boolean true if so. Otherwise, return the
 * expression.
 ','line_number':86,'multiline':True]
['text':'*
 * Check if expression returns Nothing and return null if so. Otherwise, return the expression.
 ','line_number':91,'multiline':True]
['text':'*
 * Generates an ABT that checks if the input expression is negative assuming that it has already
 * been verified to have numeric type and to not be NaN.
 ','line_number':109,'multiline':True]
['text':'*
 * Generates an ABT to check the given variable is a number between -20 and 100 inclusive, and is a
 * whole number.
 ','line_number':125,'multiline':True]
['text':'*
 * Generates an ABT that checks if the input expression is NaN _assuming that_ it has
 * already been verified to be numeric.
 ','line_number':130,'multiline':True]
['text':'*
 * A pair representing a 1) true/false condition and 2) the value that should be returned if that
 * condition evaluates to true.
 ','line_number':138,'multiline':True]
['text':'*
 * Convert a list of CaseValuePairs into a chain of optimizer::If expressions, with the final else
 * case evaluating to the 'defaultValue' optimizer::ABT.
 ','line_number':144,'multiline':True]
['text':'*
 * Converts a std::vector of ABTCaseValuePairs into a chain of optimizer::If expressions in the
 * same manner as the 'buildABTMultiBranchConditional()' function.
 ','line_number':161,'multiline':True]
['text':' namespace mongo::stage_builder','line_number':196,'multiline':False]
