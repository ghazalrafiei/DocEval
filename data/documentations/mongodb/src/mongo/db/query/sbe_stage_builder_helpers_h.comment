['text':'*
 *    Copyright (C) 2020-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' IWYU pragma: no_include "boost/container/detail/std_fwd.hpp"','line_number':36,'multiline':False]
['text':'*
 * Wrap expression into logical negation.
 ','line_number':99,'multiline':True]
['text':'*
 * Generates an EExpression that checks if the input expression is null or missing.
 ','line_number':113,'multiline':True]
['text':'*
 * Generates an EExpression that checks if the input expression is a non-numeric type _assuming
 * that_ it has already been verified to be neither null nor missing.
 ','line_number':123,'multiline':True]
['text':'*
 * Generates an EExpression that checks if the input expression is the value NumberLong(-2^64).
 ','line_number':129,'multiline':True]
['text':'*
 * Generates an EExpression that checks if the input expression is NaN _assuming that_ it has
 * already been verified to be numeric.
 ','line_number':134,'multiline':True]
['text':'*
 * Generates an EExpression that checks if the input expression is a numeric Infinity.
 ','line_number':140,'multiline':True]
['text':'*
 * Generates an EExpression that checks if the input expression is a non-positive number (i.e. <= 0)
 * _assuming that_ it has already been verified to be numeric.
 ','line_number':145,'multiline':True]
['text':'*
 * Generates an EExpression that checks if the input expression is a positive number (i.e. > 0)
 * _assuming that_ it has already been verified to be numeric.
 ','line_number':151,'multiline':True]
['text':'*
 * Generates an EExpression that checks if the input expression is a negative (i.e., < 0) number
 * _assuming that_ it has already been verified to be numeric.
 ','line_number':157,'multiline':True]
['text':'*
 * Generates an EExpression that checks if the input expression is _not_ an object, _assuming that_
 * it has already been verified to be neither null nor missing.
 ','line_number':163,'multiline':True]
['text':'*
 * Generates an EExpression that checks if the input expression is not a string, _assuming that
 * it has already been verified to be neither null nor missing.
 ','line_number':169,'multiline':True]
['text':'*
 * Generates an EExpression that checks whether the input expression is null, missing, or
 * unable to be converted to the type NumberInt32.
 ','line_number':175,'multiline':True]
['text':'*
 * A pair representing a 1) true/false condition and 2) the value that should be returned if that
 * condition evaluates to true.
 ','line_number':184,'multiline':True]
['text':'*
 * Convert a list of CaseValuePairs into a chain of EIf expressions, with the final else case
 * evaluating to the 'defaultValue' EExpression.
 ','line_number':191,'multiline':True]
['text':'*
 * Converts a std::vector of CaseValuePairs into a chain of EIf expressions in the same manner as
 * the 'buildMultiBranchConditional()' function.
 ','line_number':209,'multiline':True]
['text':'*
 * Insert a limit stage on top of the 'input' stage.
 ','line_number':216,'multiline':True]
['text':'*
 * Create tree consisting of coscan stage followed by limit stage.
 ','line_number':223,'multiline':True]
['text':'*
 * Check if expression returns Nothing and return boolean false if so. Otherwise, return the
 * expression.
 ','line_number':228,'multiline':True]
['text':'*
 * Creates an EFunction expression with the given name and arguments.
 ','line_number':236,'multiline':True]
['text':'*
 * Check if expression returns Nothing and return null if so. Otherwise, return the expression.
 ','line_number':294,'multiline':True]
['text':'*
 * Check if expression returns Nothing and return bsonUndefined if so. Otherwise, return the
 * expression.
 ','line_number':299,'multiline':True]
['text':'*
 * Makes "newObj" function from variadic parameter pack of 'FieldPair' which is a pair of a field
 * name and field expression.
 ','line_number':305,'multiline':True]
['text':' The following two template functions convert 'FieldPair' to two 'EExpression's and add them to','line_number':316,'multiline':False]
['text':' 'EExpression' array which will be converted back to variadic parameter pack for 'makeFunction()'.','line_number':317,'multiline':False]
['text':' The following two template functions convert the 'EExpression' array back to variadic parameter','line_number':333,'multiline':False]
['text':' pack and calls the 'makeFunction("newObj")'.','line_number':334,'multiline':False]
['text':' Deals with the last 'FieldPair' and adds it to the 'EExpression' array.','line_number':345,'multiline':False]
['text':' Deals with the intermediary 'FieldPair's and adds them to the 'EExpression' array.','line_number':351,'multiline':False]
['text':' Deals with the first 'FieldPair' and adds it to the 'EExpression' array.','line_number':360,'multiline':False]
['text':'*
 * Generates an expression that returns shard key that behaves similarly to
 * ShardKeyPattern::extractShardKeyFromDoc. However, it will not check for arrays in shard key, as
 * it is used only for documents that are already persisted in a sharded collection
 ','line_number':370,'multiline':True]
['text':'*
 * Creates a chain of EIf expressions that will inspect each arg in order and return the first
 * arg that is not null or missing.
 ','line_number':410,'multiline':True]
['text':'* This helper takes an SBE SlotIdGenerator and an SBE Array and returns an output slot and a
 * unwind/project/limit/coscan subtree that streams out the elements of the array one at a time via
 * the output slot over a series of calls to getNext(), mimicking the output of a collection scan or
 * an index scan. Note that this method assumes ownership of the SBE Array being passed in.
 ','line_number':417,'multiline':True]
['text':'*
 * Make a mock scan with multiple output slots from an BSON array. This method does NOT assume
 * ownership of the BSONArray passed in.
 ','line_number':428,'multiline':True]
['text':'*
 * Helper functions for converting from BSONObj/BSONArray to SBE Object/Array. Caller owns the SBE
 * Object/Array returned. These helper functions do not assume ownership of the BSONObj/BSONArray.
 ','line_number':439,'multiline':True]
['text':'*
 * Returns a BSON type mask of all data types coercible to date.
 ','line_number':446,'multiline':True]
['text':'*
 * Constructs local binding with inner expression built by 'innerExprFunc' and variables assigned
 * to expressions from 'bindings'.
 * Example usage:
 *
 * makeLocalBind(
 *   _context->frameIdGenerator,
 *   [](sbe::EVariable inputArray, sbe::EVariable index) {
 *     return <expression using inputArray and index>;
 *   },
 *   <expression to assign to inputArray>,
 *   <expression to assign to index>
 * );
 ','line_number':451,'multiline':True]
['text':'*
 * Given an index key pattern, and a subset of the fields of the index key pattern that are depended
 * on to compute the query, returns the corresponding 'IndexKeysInclusionSet' bit vector and field
 * name vector.
 *
 * For example, suppose that we have an index key pattern {d: 1, c: 1, b: 1, a: 1}, and the caller
 * depends on the set of 'requiredFields' {"b", "d"}. In this case, the pair of return values would
 * be:
 *  - 'IndexKeysInclusionSet' bit vector of 1010
 *  - Field name vector of <"d", "b">
 ','line_number':500,'multiline':True]
['text':'*
 * A tree of nodes arranged based on field path. PathTreeNode can be used to represent index key
 * patterns, projections, etc. A PathTreeNode can also optionally hold a value of type T.
 *
 * For example, the key pattern {a.b: 1, x: 1, a.c: 1} in tree form would look like:
 *
 *         <root>
 *         /   |
 *        a    x
 *       / \
 *      b   c
 ','line_number':529,'multiline':True]
['text':' Aside from the root node, it is very common for a node to have no children or only 1 child.','line_number':546,'multiline':False]
['text':' It is the caller's responsibility to verify that there is not an existing field with the','line_number':549,'multiline':False]
['text':' same name as 'fieldComponent'.','line_number':550,'multiline':False]
['text':' If 'childrenMap' is null and there are 3 or more children, build 'childrenMap' now.','line_number':559,'multiline':False]
['text':'*
     * Returns leaf node matching field path. If the field path provided resolves to a non-leaf
     * node, null will be returned. For example, if tree was built for key pattern {a.b: 1}, this
     * method will return nullptr for field path "a".
     ','line_number':596,'multiline':True]
['text':' We only build a hash map when there are 3 or more children. The vast majority of nodes','line_number':624,'multiline':False]
['text':' will have 2 children or less, so we dynamically allocate 'childrenMap' to save space.','line_number':625,'multiline':False]
['text':' If mode == AssertNoConflictingPaths, assert that no conflicting paths exist as','line_number':685,'multiline':False]
['text':' we build the path tree.','line_number':686,'multiline':False]
['text':' If 'mode == RemoveConflictingPaths' and we're about to process a path P and we've','line_number':692,'multiline':False]
['text':' already processed some other path that is a prefix of P, then ignore P.','line_number':693,'multiline':False]
['text':' If 'mode == RemoveConflictingPaths' and we're about to process a path P that is a','line_number':700,'multiline':False]
['text':' prefix of another path that's already been processed, then delete the children of','line_number':701,'multiline':False]
['text':' 'node' to remove the longer conflicting path(s).','line_number':702,'multiline':False]
['text':'*
 * Builds a path tree from a set of paths and returns the root node of the tree.
 *
 * If 'mode == AllowConflictingPaths', this function will build a tree that contains all paths
 * specified in 'paths' (regardless of whether there are any paths that conflict).
 *
 * If 'mode == RemoveConflictingPaths', when there are two conflicting paths (ex. "a" and "a.b")
 * the conflict is resolved by removing the longer path ("a.b") and keeping the shorter path ("a").
 *
 * If 'mode == AssertNoConflictingPaths', this function will tassert() if it encounters any
 * conflicting paths.
 ','line_number':728,'multiline':True]
['text':'*
 * Builds a path tree from a set of paths, assigns a sequence of values to the sequence of nodes
 * corresponding to each path, and returns the root node of the tree.
 *
 * The 'values' sequence and the 'paths' vector are expected to have the same number of elements.
 * The kth value in the 'values' sequence will be assigned to the node corresponding to the kth path
 * in 'paths'.
 *
 * If 'mode == AllowConflictingPaths', this function will build a tree that contains all paths
 * specified in 'paths' (regardless of whether there are any paths that conflict).
 *
 * If 'mode == RemoveConflictingPaths', when there are two conflicting paths (ex. "a" and "a.b")
 * the conflict is resolved by removing the longer path ("a.b") and keeping the shorter path ("a").
 *
 * If 'mode == AssertNoConflictingPaths', this function will tassert() if it encounters any
 * conflicting paths.
 ','line_number':747,'multiline':True]
['text':'*
 * If a boolean can be constructed from type T, this function will construct a boolean from 'value'
 * and then return the negation. If a boolean cannot be constructed from type T, then this function
 * returns false.
 ','line_number':798,'multiline':True]
['text':'*
 * This function will invoke an invocable object ('fn') with the specified arguments ('args'). If
 * 'fn' returns bool, this function will return fn's return value. If 'fn' returns void or some type
 * other than bool, this function will return 'defaultReturnValue'.
 *
 * As a special case, this function alows fn's type (FuncT) to be nullptr_t. In such cases, this
 * function will do nothing and it will return 'defaultReturnValue'.
 *
 * If 'fn' is not invocable with the specified arguments and fn's type is not nullptr_t, this
 * function will raise a static assertion.
 *
 * Note that when a bool can be constructed from 'fn' (for example, if FuncT is a function pointer
 * type), this method will always invoke 'fn' regardless of whether "!bool(fn)" is true or false.
 * It is the caller's responsibility to do any necessary checks (ex. null checks) before calling
 * this function.
 ','line_number':828,'multiline':True]
['text':'*
 * This is a helper function used by visitPathTreeNodes() to invoke preVisit and postVisit callback
 * functions. This helper function will check if 'fn' supports invocation with the following args:
 *   (1) Node* node, const std::string& path, const DfsState& dfsState
 *   (2) Node* node, const DfsState& dfsState
 *   (3) Node* node, const std::string& path
 *   (4) Node* node
 *
 * After checking what 'fn' supports, this helper function will then use invokeAndReturnBool() to
 * invoke 'fn' accordingly and it will return invokeAndReturnBool()'s return value. If 'fn' supports
 * multiple signatures, whichever signature that appears first in the list above will be used.
 ','line_number':855,'multiline':True]
['text':'*
 * This function performs a DFS traversal on a path tree (as given by 'treeRoot') and it invokes
 * the specified preVisit and postVisit callbacks at the appropriate times.
 *
 * The caller may pass nullptr for 'preVisit' if they do not wish to perform any pre-visit actions,
 * and likewise the caller may pass nullptr for 'postVisit' if they do not wish to perform any
 * post-visit actions.
 *
 * Assuming 'preVisit' is not null, the 'preVisit' callback must support one of the following
 * signatures:
 *   (1) Node* node, const std::string& path, const DfsState& dfsState
 *   (2) Node* node, const DfsState& dfsState
 *   (3) Node* node, const std::string& path
 *   (4) Node* node
 *
 * Likewise, assuming 'postVisit' is not null, the 'postVisit' callback must support one of the
 * signatures listed above. For details, see invokeVisitPathTreeNodesCallback().
 *
 * The 'preVisit' callback can return any type. If preVisit's return type is not 'bool', its return
 * value will be ignored at run time. If preVisit's return type _is_ 'bool', then its return value
 * at run time will be used to decide whether the current node should be "skipped". If preVisit()
 * returns false, then the current node will be "skipped", its descendents will not be visited (i.e.
 * instead of the DFS descending, it will backtrack), and the 'postVisit' will not be called for the
 * node.
 *
 * The 'postVisit' callback can return any type. postVisit's return value (if any) is ignored.
 *
 * If 'invokeCallbacksForRootNode' is false (which is the default), the preVisit and postVisit
 * callbacks won't be invoked for the root node of the tree. If 'invokeCallbacksForRootNode' is
 * true, the preVisit and postVisit callbacks will be invoked for the root node of the tree at
 * the appropriate times.
 *
 * The 'rootPath' parameter allows the caller to specify the absolute path of 'treeRoot', which
 * will be used as the base/prefix to determine the paths of all the other nodes in the tree. If
 * no 'rootPath' argument is provided, then 'rootPath' defaults to boost::none.
 ','line_number':886,'multiline':True]
['text':' Perform a depth-first traversal using 'dfs' to keep track of where we are.','line_number':943,'multiline':False]
['text':' Invoke the pre-visit callback on the root node if appropriate.','line_number':964,'multiline':False]
['text':' Invoke the pre-visit callback.','line_number':988,'multiline':False]
['text':' Invoke the post-visit callback.','line_number':995,'multiline':False]
['text':'*
 * Simple tagged pointer to a projection AST node. This class provides some useful methods for
 * extracting information from the AST node.
 ','line_number':1003,'multiline':True]
['text':'*
 * This function converts from projection AST to a pair of vectors: a vector of field paths and a
 * vector of ProjectNodes.
 ','line_number':1109,'multiline':True]
['text':'*
 * This method retrieves the values of the specified field paths ('fields') from 'resultSlot'
 * and stores the values into slots.
 *
 * This method returns a pair containing: (1) the updated SBE plan stage tree and; (2) a vector of
 * the slots ('outSlots') containing the field path values.
 *
 * The order of slots in 'outSlots' will match the order of field paths in 'fields'.
 ','line_number':1116,'multiline':True]
['text':' Note that 'makeKeyFromBSONKeyForSeek()' is intended to compute the "start" key for an','line_number':1221,'multiline':False]
['text':' index scan. The logic for computing a "discriminator" for an "end" key is reversed, which','line_number':1222,'multiline':False]
['text':' is why we use 'makeKeyStringFromBSONKey()' to manually specify the discriminator for the','line_number':1223,'multiline':False]
['text':' end key.','line_number':1224,'multiline':False]
['text':'*
 * The 'ProjectionEffects' class is used to represented the "effects" that projection (either
 * (a single projection or multiple projections combined together) has on the set of all possible
 * top-level field names.
 *
 * Conceptully, a ProjectionEffects object can be thought of as a field name/Effect map plus
 * a "default" Effect to be applied to all fields that are not present in the map.
 *
 * The four possible Effects modeled by this class are: Keep, Drop, Modify, and Create. The
 * "default" Effect may be set to Keep, Drop, or Modify, but it cannot be set to Create. The
 * names of each kind of Effect are solely for "descriptive" purposes - for the formal definition
 * of each kind of Effect, see the docblock above the 'Effect' enum.
 *
 * A ProjectionEffects object can be constructed from a projection, or it can be constructed
 * using a single FieldSet (a "keep" set), or it can be constructed using 3 FieldSets (a
 * "nonDropped" set, a "modifiedOrCreated" set, and a "created" set).
 *
 * Two ProjectionEffects objects can also be combined together using the merge() method (to
 * merge two ProjectionEffects) or the compose() method (to "compose" a parent ProjectionEffects
 * and a child ProjectionEffects). Two ProjectionEffects objects can also be compared using the
 * difference() method.
 ','line_number':1236,'multiline':True]
['text':'*
     * Here is a Venn diagram showing what possible changes to a value are permitted for each
     * type of Effect:
     *
     *   +-----------------------+
     *   | Create                |
     *   | +-------------------+ |
     *   | | Modify            | |
     *   | | +------+ +------+ | |
     *   | | | Drop | | Keep | | |
     *   | | +------+ +------+ | |
     *   | +-------------------+ |
     *   +-----------------------+
     *
     * The "Keep" Effect is only allowed to return the input unmodified, and the "Drop" Effect is
     * only allowed to return Nothing. Thus, Keep's set contains only 1 possibility and Drop's set
     * contains only 1 possibility and the two sets do not overlap.
     *
     * The "Modify" Effect is allowed to return the input unmodified, or return Nothing, or make
     * any change to the input provided that when the input is Nothing it gets returned unmodified.
     * Modify's set is therefore a superset of Keep's set and Drop's set.
     *
     * The "Create" Effect is allowed to make any change to the input without any restrictions.
     * Specifically, when the input is Nothing, "Create" is allowed to return a non-Nothing value.
     * Therefore Create's set is a superset of Keep's set, Drop's set, and Modify's set.
     *
     * Note that the Keep, Drop, and Modify Effects cannot cause a field's position within the
     * object to change. (Drop makes the field disappear, but that technically doesn't count as
     * "changing" the field's position.)
     *
     * The Create effect is only Effect that can cause a field's position within the object to
     * change. (A single projection isn't capable of causinig a field's position within the object
     * o change, but multiple projections combined together are able to do this.)
     ','line_number':1260,'multiline':True]
['text':'*
     * Creates a ProjectionEffects that has a Keep Effect for all fields.
     ','line_number':1296,'multiline':True]
['text':'*
     * Creates a ProjectionEffects from a projection as specified by 'isInclusion', 'paths',
     * and 'nodes'. 'isInclusion' indicates whether the projection is an inclusion or an
     * exclusion. 'paths' and 'nodes' are parallel vectors (one a vector of strings, the
     * other a vector of ProjectNodes) that specify the actions performed by the projection
     * on each path.
     *
     * The ProjectionEffects class models projections using the following rules:
     *
     * 1) For a given top-level field F, if the projection has a "computed" field on a path that
     *    F is a prefix of (or if $addFields created a field on a path that F is a prefix of),
     *    then the Effect for field F is 'Create'.
     * 2) Otherwise, if the projection has at least one keep or drop on a dotted path that is
     *    a prefix of a given top-level field F, then the Effect for field F is 'Modify'.
     * 3) Otherwise, if the projection has at least one $slice operation on any path (top-level
     *    or not) that is a prefix of a given top-level field F, then the Effect for field F
     *    is 'Modify'.
     * 4) Otherwise, if the none of the other rules apply for a given top-level field F, then
     *    the Effect for field F will either be 'Drop' (if 'isInclusion' is true) or 'Keep'
     *    (if 'isInclusion' is false).
     ','line_number':1301,'multiline':True]
['text':'*
     * Creates a ProjectionEffects representing a projection that has a Keep Effect for all the
     * fields 'keepFieldSet' and that has a Drop Effect for all other fields.
     ','line_number':1326,'multiline':True]
['text':'*
     * Creates a ProjectionEffects that has a Create Effect for fields in 'createdFieldSet',
     * that has a Modify Effect for fields in 'modifiedOrCreatedFieldSet' that are not present
     * in 'createdFieldSet', that has a Keep Effect for fields in 'nonDroppedFieldSet' that are
     * not present in 'modifiedOrCreatedFieldSet' or 'createdFieldSet', and that has a Drop
     * Effect for all other fields.
     *
     * Note that 'createdFieldSet' must be a "closed" FieldSet.
     ','line_number':1332,'multiline':True]
['text':'*
     * Same as 'ProjectionEffects(FieldSet, FieldSet, FieldSet, vector<string>)', except that
     * the second and third parameters are 'vector<string>' instead of 'FieldSet'.
     *
     * Note that the second and third parameters will be treated as "closed" field lists.
     ','line_number':1346,'multiline':True]
['text':'*
     * For each field, merge() will compute the union of the each child's Effect on the field.
     *
     * The merge() operation is typically used when a stage has 2 or more children and we want
     * to compute the combined effect of all of the stage's children together (as if the output
     * documents coming from the children were all mixed together into a single stream).
     *
     * merge() is commutative and associative, and any ProjectionEffects object that is merged with
     * itself produces itself. The merge() operation does not have a "neutral element" value.
     ','line_number':1357,'multiline':True]
['text':'*
     * The compose() operation models the combined effects you would get if you had one projection
     * (parent) on top of another (child).
     *
     * compose() takes two ProjectionEffects as input that represent the effects in isolation of the
     * parent projection and the child projection. The output of compose() is computed using the
     * following table:
     *
     *   Parent's Effect | Child's Effect | Composed Effect
     *   ----------------+----------------+----------------
     *   Create          | Any effect     | Create
     *   Drop            | Any effect     | Drop
     *   Keep or Modify  | Create         | Create
     *   Keep or Modify  | Drop           | Drop
     *   Keep or Modify  | Modify         | Modify
     *   Modify          | Keep           | Modify
     *   Keep            | Keep           | Keep
     *
     * compose() is associative (but not commutative), and any ProjectionEffects object that is
     * composed with itself produces itself. The default ProjectionEffects object (no effects with
     * _defaultEffect == kKeep) behaves as the "neutral element" for the compose() operation.
     *
     * It's also worth noting that compose() is distributive over merge(), and furthermore that
     * for any 4 given ProjectionEffects objects (A,B,C,D) the following relationship will always
     * hold:
     *    (A*B)+(C*D) == (A+C)*(B+D)                    (where '+' is merge and '*' is compose)
     ','line_number':1369,'multiline':True]
['text':'*
     * This method compares two ProjectionEffects objects and returns a pair that indicates
     * what is different between the two objects. The first part of the pair is a list of all
     * the fields present in '_fields' or 'other._fields' that have different Effects in
     * '*this' vs. 'other'. The second part of the pair is a bool that indicates if the
     * '_defaultEffect' is different from 'other._defaultEffect'.
     ','line_number':1398,'multiline':True]
['text':'*
     * Returns the list of fields whose Effect is not equal to the "default" Effect.
     ','line_number':1407,'multiline':True]
['text':'*
     * Returns the "default" Effect.
     ','line_number':1414,'multiline':True]
['text':'*
     * Returns the Effect for the specified field.
     ','line_number':1421,'multiline':True]
['text':'*
     * Returns true if 'effect == _defaultEffect' is true or if one of the values in the
     * '_effects' map is equal to 'effect'. Otherwise, returns false.
     ','line_number':1442,'multiline':True]
['text':'*
     * Returns a FieldSet containing all the fields whose effect is not kDrop.
     *
     * If there are a _finite_ number of fields whose effect is not kDrop, then this function will
     * return a "closed" FieldSet, otherwise it will return an "open" FieldSet.
     ','line_number':1458,'multiline':True]
['text':'*
     * Returns a FieldSet containing all the fields whose effect is kModify or kCreate.
     *
     * If '_defaultEffect' is kKeep or kDrop (which is usually the case), then this function will
     * return a "closed" FieldSet.
     *
     * If '_defaultEffect' is kModify (which can happen if you merge two ProjectionEffects with
     * different defaultEffects), then this function will return an "open" FieldSet.
     ','line_number':1466,'multiline':True]
['text':'*
     * Returns a FieldSet containing all the fields whose effect is kCreate.
     *
     * This function always returns a "closed" FieldSet.
     ','line_number':1477,'multiline':True]
['text':' namespace mongo::stage_builder','line_number':1506,'multiline':False]
