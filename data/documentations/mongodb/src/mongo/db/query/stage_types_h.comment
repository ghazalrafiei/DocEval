['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 * This type acts as an identifier for a node in a query plan tree, such as a 'QuerySolution' tree
 * or an 'sbe::PlanStage' tree.
 *
 * An id of 0 is used to represent the absence of an explicitly assigned id.
 ','line_number':37,'multiline':True]
['text':'*
 * These map to implementations of the PlanStage interface, all of which live in db/exec/. These
 * stage types are shared between Classic and SBE.
 ','line_number':46,'multiline':True]
['text':' A virtual scan stage that simulates a collection scan and doesn't depend on underlying','line_number':60,'multiline':False]
['text':' storage.','line_number':61,'multiline':False]
['text':' This stage sits at the root of the query tree and counts up the number of results','line_number':64,'multiline':False]
['text':' returned by its child.','line_number':65,'multiline':False]
['text':' If we're running a .count(), the query is fully covered by one ixscan, and the ixscan is','line_number':68,'multiline':False]
['text':' from one key to another, we can just skip through the keys without bothering to examine','line_number':69,'multiline':False]
['text':' them.','line_number':70,'multiline':False]
['text':' If we're running a distinct, we only care about one value for each key.  The distinct','line_number':75,'multiline':False]
['text':' scan stage is an ixscan with some key-skipping behvaior that only distinct uses.','line_number':76,'multiline':False]
['text':' The two $geoNear impls imply a fetch+sort and must be stages.','line_number':83,'multiline':False]
['text':' Implements iterating over one or more RecordStore::Cursor.','line_number':94,'multiline':False]
['text':' Projection has three alternate implementations.','line_number':100,'multiline':False]
['text':' Stages for running text search.','line_number':123,'multiline':False]
['text':' Stage for modifying bucket documents in a time-series bucket collection.','line_number':127,'multiline':False]
['text':' Stage for choosing between two alternate plans based on an initial trial period.','line_number':130,'multiline':False]
['text':' Stage for 'UnpackTimeseriesBucket' which is only used for $sample on a time-series bucket','line_number':135,'multiline':False]
['text':' collection.','line_number':136,'multiline':False]
['text':' Stages for DocumentSources.','line_number':142,'multiline':False]
['text':' Stage for the DocumentSource to unpack timeseries buckets.','line_number':148,'multiline':False]
['text':'*
 * Returns the explain() stage type string for a STAGE_COLLSCAN stage that is performing a clustered
 * collection scan in SBE, to match Classic's explain() output.
 ','line_number':175,'multiline':True]
['text':' namespace mongo','line_number':180,'multiline':False]
