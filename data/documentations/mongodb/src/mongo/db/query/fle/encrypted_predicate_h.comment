['text':'*
 *    Copyright (C) 2022-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' IWYU pragma: keep','line_number':40,'multiline':False]
['text':'*
 * This file contains an abstract class that describes rewrites on agg Expressions and
 * MatchExpressions for individual encrypted index types. Subclasses of this class represent
 * concrete encrypted index types, like Equality and Range.
 *
 * This class is not responsible for traversing expression trees, but instead takes leaf
 * expressions that it may replace. Tree traversal is handled by the QueryRewriter.
 ','line_number':57,'multiline':True]
['text':' Virtual functions can't be templated, so in order to write a function which can take in either a','line_number':69,'multiline':False]
['text':' BSONElement or a Value&, we need to create a variant type to use in function signatures.','line_number':70,'multiline':False]
['text':' std::reference_wrapper is necessary to avoid copying the Value because references alone cannot be','line_number':71,'multiline':False]
['text':' included in a variant. BSONElement can be passed by value because it is just a pointer into an','line_number':72,'multiline':False]
['text':' owning BSONObj.','line_number':73,'multiline':False]
['text':'*
 * Parse a find payload from either a BSONElement or a Value. All ParsedFindPayload types should
 * have constructors for both BSONElements and Values, which will enable this function to work on
 * both types.
 ','line_number':76,'multiline':True]
['text':'*
 * Given an array of tags, return a $in predicate with __safeContent__.
 ','line_number':90,'multiline':True]
['text':'*
 * Convert a vector of PrfBlocks to a BSONArray for use in MatchExpression tag generation.
 ','line_number':98,'multiline':True]
['text':'*
 * Convert a vector of PrfBlocks to a vector of Values for use in Agg tag generation.
 ','line_number':103,'multiline':True]
['text':'*
 * Returns true of the BSONElement contains BinData(6) with the specified sub-sub type.
 ','line_number':111,'multiline':True]
['text':'*
 * Returns true of the Value contains BinData(6) with the specified sub-sub type.
 ','line_number':115,'multiline':True]
['text':'*
 * Interface for implementing a server rewrite for an encrypted index. Each type of predicate
 * should have its own subclass that implements the virtual methods in this class.
 ','line_number':120,'multiline':True]
['text':'*
     * Rewrite a terminal expression for this encrypted predicate. If this function returns
     * nullptr, then no rewrite needs to be done. Rewrites generally transform predicates from one
     * kind of expression to another, either a $in or an $_internalFle* runtime expression, and so
     * this function will allocate a new expression and return a unique_ptr to it.
     ','line_number':128,'multiline':True]
['text':' LOGV2 can't be called from a header file, so this call is factored out to a','line_number':141,'multiline':False]
['text':' function defined in the cpp file.','line_number':142,'multiline':False]
['text':'*
     * Check if the passed-in payload is a FLE2 find payload for the right encrypted index type.
     ','line_number':153,'multiline':True]
['text':'*
     * Check if the passed-in payload is a FLE2 find payload for the right encrypted index type.
     ','line_number':161,'multiline':True]
['text':'*
     * Check if the payload type is a deprecated payload type, which, if encountered, causes
     * the rewrite to throw an error.
     ','line_number':169,'multiline':True]
['text':'*
     * Generate tags from a FLE2 Find Payload. This function takes in a variant of BSONElement and
     * Value so that it can be used in both the MatchExpression and Aggregation contexts. Virtual
     * functions can't also be templated, which is why we need the runtime dispatch on the variant.
     ','line_number':177,'multiline':True]
['text':'*
     * Rewrite to a tag disjunction on the __safeContent__ field.
     ','line_number':184,'multiline':True]
['text':'*
     * Rewrite to a tag disjunction on the __safeContent__ field.
     ','line_number':189,'multiline':True]
['text':'*
     * Rewrite to an expression which can generate tags at runtime during an encrypted collscan.
     ','line_number':194,'multiline':True]
['text':'*
     * Rewrite to an expression which can generate tags at runtime during an encrypted collscan.
     ','line_number':199,'multiline':True]
['text':'*
     * Sub-subtype associated with the find payload for this encrypted predicate.
     ','line_number':207,'multiline':True]
['text':'*
     * Checks if type is a deprecated payload type and if so, throws an exception.
     * Otherwise returns whether type is the expected find payload for this predicate.
     ','line_number':212,'multiline':True]
['text':'*
 * Encrypted predicate rewrites are registered at startup time using MONGO_INITIALIZER blocks.
 * MatchExpression rewrites are keyed on the MatchExpressionType enum, and Agg Expression rewrites
 * are keyed on the dynamic type for the Expression subclass.
 ','line_number':219,'multiline':True]
['text':'*
 * Register an agg rewrite if a condition is true at startup time.
 ','line_number':239,'multiline':True]
['text':'*
 * Register an agg rewrite unconditionally.
 ','line_number':257,'multiline':True]
['text':'*
 * Register an agg rewrite behind a feature flag.
 ','line_number':263,'multiline':True]
['text':'*
 * Register a MatchExpression rewrite if a condition is true at startup time.
 ','line_number':270,'multiline':True]
['text':'*
 * Register a MatchExpression rewrite unconditionally.
 ','line_number':290,'multiline':True]
['text':'*
 * Register a MatchExpression rewrite behind a feature flag.
 ','line_number':296,'multiline':True]
['text':' namespace fle','line_number':302,'multiline':False]
['text':' namespace mongo','line_number':303,'multiline':False]
