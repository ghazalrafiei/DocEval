['text':'*
 *    Copyright (C) 2022-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' Index of last logical node in our group we implemented.','line_number':58,'multiline':False]
['text':'*
 * List of physical nodes and associated physical properties for a given group.
 ','line_number':64,'multiline':True]
['text':' Used to speed up lookups into the winner's circle using physical properties.','line_number':95,'multiline':False]
['text':'*
 * Represents a set of equivalent query plans.  See 'class Memo' for more detail.
 ','line_number':99,'multiline':True]
['text':' Returns the set of bindings that all plans in this group are expected to produce.','line_number':108,'multiline':False]
['text':' (Since all plans in a Group are equivalent, they all must produce the same bindings.)','line_number':109,'multiline':False]
['text':' Contains a set of equivalent logical plans. Each element is a LogicalNode, and its immediate','line_number':112,'multiline':False]
['text':' immediate children are MemoLogicalDelegatorNode. This ensures every logical node has an','line_number':113,'multiline':False]
['text':' associated group. For example we would never have (Filter B (Filter A (Delegator _))) here','line_number':114,'multiline':False]
['text':' because 'Filter A' would have no associated group.','line_number':115,'multiline':False]
['text':' Stores, for each logical node, the rewrite rule that first caused that node to be created.','line_number':117,'multiline':False]
['text':' '_rules[i]' corresponds to '_logicalNodes[i]'.','line_number':118,'multiline':False]
['text':' Used only for explain / debugging.','line_number':119,'multiline':False]
['text':' Contains logical properties that are derived bottom-up from the first logical plan in the','line_number':121,'multiline':False]
['text':' group. Since all plans in the group are expected to be equivalent, the logical properties are','line_number':122,'multiline':False]
['text':' expected to be true for all plans in the group.','line_number':123,'multiline':False]
['text':' Same as 'binder()'.','line_number':126,'multiline':False]
['text':' A collection of 'LogicalRewriteEntry', indicating which rewrites we will attempt next, and at','line_number':129,'multiline':False]
['text':' which node.','line_number':130,'multiline':False]
['text':'','line_number':131,'multiline':False]
['text':' Each entry represents a specific rewrite rule, and a specific node. Typically there are many','line_number':132,'multiline':False]
['text':' entries pointing to the same node, but each for a different rewrite rule. In','line_number':133,'multiline':False]
['text':' 'LogicalRewriter::addNode', for every newly added node we schedule all possible rewrites','line_number':134,'multiline':False]
['text':' which transform it or reorder it against other nodes. The goal is to try all possible ways to','line_number':135,'multiline':False]
['text':' generate new plans using this new node.','line_number':136,'multiline':False]
['text':' Best physical plan for given physical properties: aka "Winner's circle".','line_number':139,'multiline':False]
['text':'','line_number':140,'multiline':False]
['text':' Unlike '_logicalNodes', the immediate children of physical nodes are not required to be','line_number':141,'multiline':False]
['text':' delegator nodes. Each entry in '_physicalNode' can be a complex tree of nodes, which may or','line_number':142,'multiline':False]
['text':' may not end in 'MemoPhysicalDelegatorNode' at the leaves.','line_number':143,'multiline':False]
['text':'*
 * A Memo holds all the alternative plans for a query, and for all of its subqueries.
 *
 * A Memo is made of 'groups': a group is a set of alternative plans that produce the same result
 * (the same bag of rows). You can think of a group as representing a question: "what is the best
 * plan for this query?". During optimization a group holds several possible answers, and at the end
 * we will choose the best answer based on cost estimates.
 *
 * The logical plans in a group are all interchangeable, since they compute the same bag. Anywhere
 * one logical plan can appear, so can an equivalent one: it doesn't change the overall result.
 * So, the logical plans in a group are all stored together in one ABTVector.
 *
 * By contrast, not all physical plans are interchangeable. For example, the MergeJoin algorithm
 * requires sorted input. So the physical plans in a group are stored separately, to answer separate
 * questions:
 * - "What is the best physical plan whose results are sorted by <x>?"
 * - "What is the best physical plan that uses an index?"
 * - "What is the best physical plan whose results are sorted by (<x>, <y>), and uses an index?"
 * - "What is the best physical plan (with no constraints)?"
 * etc. Each set of physical properties is a different optimization question. So a group has a
 * mapping from set of physical properties, to the best physical plan discovered so far that
 * produces the same logical result and satisfies those properties. For optimization we only need
 * the best plan for each set of properties, but if 'keepRejectedPlans' is enabled then we keep the
 * non-best plans for debugging.
 *
 * Typically a Memo is populated by calling 'integrate()' to add the initial logical plan, and then
 * letting rewrite rules add more plans.
 * - In the substitution phase, 'RewriteContext' uses 'Memo::clearLogicalNodes()' and
 *   'Memo::integrate()' to replace a group with a single logical node.
 * - In the exploration phase, 'RewriteContext' uses 'Memo::integrate()' to add alternative logical
 *   plans to a group.
 * - In the implementation phase, 'PhysicalRewriter' uses 'PhysNodes::addOptimizationResult()' to
 *   update the set of physical plans.
 ','line_number':147,'multiline':True]
['text':' To be able to access _stats field.','line_number':182,'multiline':False]
['text':'*
     * This structure is essentially a parameter pack to simplify passing multiple references to
     * external objects to facilitate derivation of the memo group's logical properties.
     ','line_number':188,'multiline':True]
['text':' None of those should be null.','line_number':199,'multiline':False]
['text':' Number of calls to integrate()','line_number':208,'multiline':False]
['text':' Number of recursive physical optimization calls.','line_number':210,'multiline':False]
['text':' Number of checks to winner's circle.','line_number':212,'multiline':False]
['text':' The estimated cost of the winning plan.','line_number':214,'multiline':False]
['text':' The cardinality estimate of the Root node of the winning plan.','line_number':216,'multiline':False]
['text':'*
     * Inverse map.
     ','line_number':225,'multiline':True]
['text':'other','line_number':237,'multiline':True]
['text':'other','line_number':238,'multiline':True]
['text':'other','line_number':239,'multiline':True]
['text':'other','line_number':240,'multiline':True]
['text':'*
     * Update the group's logical properties by looking at its first logical node.
     * This includes the 'CardinalityEstimate' property, which has an overall estimate
     * and a per-PartialSchemaRequirement estimate.
     ','line_number':255,'multiline':True]
['text':'*
     * Takes a logical plan, and adds each Node to the appropriate group.
     *
     * Caller can use 'targetGroupMap' to force a node to go into a desired group.
     * The out-param 'insertedNodeIds' tells the caller which nodes were newly inserted.
     * Optional 'rule' is used to annotate any newly inserted nodes, for debugging.
     *
     * See 'class MemoIntegrator' for more details.
     ','line_number':262,'multiline':True]
['text':' MemoIntegrator is a helper / transport for 'Memo::integrate()'.','line_number':290,'multiline':False]
['text':'*
     * Ensures the logical node 'n' is present in some Group.
     *
     * 'groupVector' should be the set of group IDs that contain the immediate children of 'n'. This
     * is used to maintain '_inputGroupsToNodeIdMap' and '_nodeIdToInputGroupsMap'.
     *
     * 'projections' should be the set of output bindings of 'n'. It's used to initialize the
     * ProjectionAvailability property in the case where a new Group is created.
     *
     * Optional 'targetGroupId' means force the node to be added to the given group,
     * and raise an error if it's already present in some other group. '-1' means use an existing
     * group if possible or create a new one otherwise.
     *
     * 'rule' is for explain/debugging only: it identifies the rewrite that introduced the node 'n'.
     *
     * The out-param 'insertedNodeIds' is appended to if a new logical node was added to any group
     * (existing or new).
     ','line_number':293,'multiline':True]
['text':' For every individually estimated sargable predicate, cache its CE. We also include the input','line_number':331,'multiline':False]
['text':' groupId in the cache key.','line_number':332,'multiline':False]
['text':' Used to find nodes using particular groups as inputs.','line_number':336,'multiline':False]
['text':' namespace mongo::optimizer::cascades','line_number':344,'multiline':False]
