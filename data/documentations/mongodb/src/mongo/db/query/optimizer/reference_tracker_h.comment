['text':'*
 *    Copyright (C) 2022-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' IWYU pragma: keep','line_number':40,'multiline':False]
['text':'*
 * Every Variable ABT conceptually references to a point in the ABT tree. The pointed tree is the
 * definition of the variable.
 ','line_number':46,'multiline':True]
['text':'*
     * Pointer to ABT that defines the variable. It can be any Node (e.g. ScanNode, EvaluationNode,
     * etc.) or Expr (e.g. let expression, lambda expression).
     ','line_number':51,'multiline':True]
['text':'*
     * Pointer to actual definition of variable (i.e. the appropriate expression under a Binder).
     ','line_number':57,'multiline':True]
['text':'*
 * Describes Variable references that are safe to move-from in SBE.
 *
 * The concept of "last reference" depends on evaluation order. For example:
 * - in 'if b then f(x) else g(x)', both uses of 'x' are a last reference, because only one branch
 *   is taken.
 * - in 'x + x' or 'f(x, x)' we would need to know whether the left or right is evaluated first.
 *   If this isn't well defined we have to assume neither is a last reference.
 ','line_number':67,'multiline':True]
['text':'*
 * Helps enforce scoping and validity rules for definitions and Variable references.
 ','line_number':78,'multiline':True]
['text':'*
     * Build the environment for the given ABT tree. The environment is valid as long as the tree
     * does not change. More specifically, if a variable defining node is removed from the tree then
     * the environment becomes stale and has to be rebuilt.
     *
     * 'memoInterface' is required if the ABT has any delegator nodes.
     *
     * Passing 'computeLastRefs=false' lets us skip some analysis, on both build() and rebuild(),
     * but 'isLastRef()' will conservatively return false.
     ','line_number':88,'multiline':True]
['text':'*
     * Calls 'variableCallback' on each Variable and `variableDefinitionCallback` on each
     * variable name defined via a Let or Lambda in the ABT.
     ','line_number':104,'multiline':True]
['text':'*
     * Return the projections available to the ancestors of 'node' and the defintions for those
     * projections.
     ','line_number':116,'multiline':True]
['text':'*
     * Returns the projections available to the ancestors of 'node'.
     ','line_number':126,'multiline':True]
['text':'*
     * Returns the projections produced by the root of the ABT.
     ','line_number':132,'multiline':True]
['text':'*
     * Returns the defintion of 'var' in the ABT, regardless of the visibility of 'var' in the tree.
     * If there is no definition for 'var', returns an empty Definition.
     ','line_number':137,'multiline':True]
['text':'*
     * Returns the number of places in the ABT where there is a free Variable with name 'variable'.
     ','line_number':147,'multiline':True]
['text':'*
     * Returns whether 'var' is guaranteed to be the last access to the projection to which it
     * refers.
     ','line_number':152,'multiline':True]
['text':' When '_lastRefs' is boost::none it means we did not collect that information,','line_number':162,'multiline':False]
['text':' and don't need to invalidate it on rebuild.','line_number':163,'multiline':False]
['text':' A searchable map of Variables that is used by VariableEnvironment in order to','line_number':166,'multiline':False]
['text':' answer efficiently optimizer queries about Variables.','line_number':167,'multiline':False]
['text':' '_memoInterface' is required to track references in an ABT containing','line_number':170,'multiline':False]
['text':' MemoLogicalDelegatorNodes.','line_number':171,'multiline':False]
['text':' namespace mongo::optimizer','line_number':175,'multiline':False]
