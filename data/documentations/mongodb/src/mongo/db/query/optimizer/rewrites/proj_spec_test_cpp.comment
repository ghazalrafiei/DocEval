['text':'*
 *    Copyright (C) 2023-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' Helpers to shorten path construction.','line_number':51,'multiline':False]
['text':' Macro helper to detect case when we completely fallback to lowering.','line_number':108,'multiline':False]
['text':' Helper to run one pass of path lowering, which should be enough to generate a MakeObjSpec in the','line_number':111,'multiline':False]
['text':' test cases below.','line_number':112,'multiline':False]
['text':' Traverses are treated additively.','line_number':162,'multiline':False]
['text':' Infinite traverses override other depths.','line_number':186,'multiline':False]
['text':' Note: we need a PathField here, otherwise we will avoid generating the 'makeBsonObj' function','line_number':317,'multiline':False]
['text':' call in this case, since it can be effectively treated as a no-op.','line_number':318,'multiline':False]
['text':' These are cases resulting in an "incomplete" MakeObjSpec, therefore returning 0 args/ falling','line_number':351,'multiline':False]
['text':' back to path lowering. Here we just want to verify that we fail to generate arguments for','line_number':352,'multiline':False]
['text':' makeBsonObj.','line_number':353,'multiline':False]
['text':' This case results in a trivial 'makeObjSpec', so we'd rather fallback to','line_number':361,'multiline':False]
['text':' lowering/const-folding it away.','line_number':362,'multiline':False]
['text':' Different traverse depths for two sides of a composition fails to translate.','line_number':365,'multiline':False]
['text':' The below path means:','line_number':376,'multiline':False]
['text':'  1. (Left branch) if input is an object, set field "a" to "abc" unconditionally (and create a','line_number':377,'multiline':False]
['text':'  new object if needed).','line_number':378,'multiline':False]
['text':'  2. (Right branch) if input is an object, return it, else return {}.','line_number':379,'multiline':False]
['text':' We fallback to lowering when two branches have differing traversal depths.','line_number':446,'multiline':False]
['text':' A possible optimization here would be to recognize that after traversing to','line_number':447,'multiline':False]
['text':' an unlimited depth, we can't possibly have an array value at the end, hence simplifying this','line_number':448,'multiline':False]
['text':' path.','line_number':449,'multiline':False]
['text':' constFold ','line_number':458,'multiline':True]
['text':' Tests that a ValueArg on the right overrides the left branch by ConstCompose.','line_number':471,'multiline':False]
['text':' Note: all the below tests should set field "same" to [] (result in the same lowered ABT).','line_number':472,'multiline':False]
['text':' Furthermore, the left branch must result in behavior kNewObj because the right const branch does,','line_number':473,'multiline':False]
['text':' otherwise we will fallback.','line_number':474,'multiline':False]
['text':' ValueArg.','line_number':476,'multiline':False]
['text':' LambdaArg.','line_number':498,'multiline':False]
['text':' MakeObj.','line_number':539,'multiline':False]
['text':' KeepOrDrop.','line_number':585,'multiline':False]
['text':' Test that a lambda value arg on the right side results in a fallback.','line_number':637,'multiline':False]
['text':' ValueArg. ','line_number':639,'multiline':True]
['text':' LambdaArg. ','line_number':641,'multiline':True]
['text':' MakeObjSpec. ','line_number':644,'multiline':True]
['text':' KeepDrop. ','line_number':647,'multiline':True]
['text':' UNLESS we have a Keep! Then we just propagate the lambda. Note that Lmabda sets the behavior','line_number':654,'multiline':False]
['text':' to kNewObj, so we need to make sure the Keep branch also generates an object, or this will','line_number':655,'multiline':False]
['text':' fallback.','line_number':656,'multiline':False]
['text':' constFold ','line_number':672,'multiline':True]
['text':' Test that a MakeObj value arg on the right side results in a fallback if we have a ValueArg','line_number':684,'multiline':False]
['text':' or LambdaArg on the left.','line_number':685,'multiline':False]
['text':' ValueArg. ','line_number':687,'multiline':True]
['text':' LambdaArg. ','line_number':689,'multiline':True]
['text':' We recursively combine compositions of MakeObj.','line_number':698,'multiline':False]
['text':' If we have a Keep, we return the right MakeObj + set the top-level field behavior to closed.','line_number':739,'multiline':False]
['text':' If we have a Drop, we fallback.','line_number':759,'multiline':False]
['text':' Recursive absorption case.','line_number':764,'multiline':False]
['text':' In the following cases we pick the left FieldAction for "a" and set the field behavior to','line_number':777,'multiline':False]
['text':' closed:','line_number':778,'multiline':False]
['text':' - ValueArg: Field "a" Const c * Keep "a" = Field "a" Const c','line_number':779,'multiline':False]
['text':' - LambdaArg: Field "a" Lambda l * Keep "a" = Field "a" Lambda l','line_number':780,'multiline':False]
['text':' - MakeObj: Field "a" Field "b" p * Keep "a" = Field "a" Field "b" p','line_number':781,'multiline':False]
['text':' ValueArg.','line_number':783,'multiline':False]
['text':' LambdaArg.','line_number':804,'multiline':False]
['text':' constFold ','line_number':814,'multiline':True]
['text':' constFold ','line_number':835,'multiline':True]
['text':' MakeObj.','line_number':848,'multiline':False]
['text':' When we have Keeps/Drops in some combination, things get more complicated.','line_number':885,'multiline':False]
['text':' (KeepMerge) Keep S * Keep S = Keep S.','line_number':887,'multiline':False]
['text':' (KeepMerge) Keep S1 * Keep S2 = Keep S1 âˆ© S2','line_number':924,'multiline':False]
['text':' Empty intersection means we drop all fields.','line_number':961,'multiline':False]
['text':' (DropKeepMerge) Drop S * Keep S = drop all fields, including S.','line_number':979,'multiline':False]
['text':' (DropKeepMerge) Drop S1 * Keep S2 = Keep S2 \ S1','line_number':1016,'multiline':False]
['text':' Eliminate common field, keep other field.','line_number':1018,'multiline':False]
['text':' Drop all fields.','line_number':1036,'multiline':False]
['text':' In the following cases we pick the right FieldAction for "a", as they always evaluate to','line_number':1056,'multiline':False]
['text':' Drop "a"','line_number':1057,'multiline':False]
['text':' - ValueArg: Field "a" Const c * Drop "a"','line_number':1058,'multiline':False]
['text':' - LambdaArg: Field "a" Lambda l * Drop "a"','line_number':1059,'multiline':False]
['text':' - MakeObj: Field "a" Field "b" p * Drop "a"','line_number':1060,'multiline':False]
['text':' - Drop: Drop "a" * Drop "a"','line_number':1061,'multiline':False]
['text':' ValueArg.','line_number':1063,'multiline':False]
['text':' LambdaArg.','line_number':1083,'multiline':False]
['text':' MakeObj.','line_number':1119,'multiline':False]
['text':' (DropMerge) Drop S * Drop S = Drop S.','line_number':1154,'multiline':False]
['text':' (DropMerge) Drop S1 * Drop S2 = Drop S1 U S2.','line_number':1190,'multiline':False]
['text':' (KeepDropMerge) Keep S1 * Drop S2 = Keep S1 \ S2','line_number':1209,'multiline':False]
['text':' Drop everything.','line_number':1211,'multiline':False]
['text':' Keep only "same1".','line_number':1229,'multiline':False]
['text':' Drop the inner "conflicting" path.','line_number':1251,'multiline':False]
['text':' Keep some top-level paths.','line_number':1253,'multiline':False]
['text':' Keep the inner "conflicting" path.','line_number':1255,'multiline':False]
['text':' Drop the conflicting path.','line_number':1272,'multiline':False]
['text':' Tests that we detect the Path subtree equivalent to kNewObj and translate it.','line_number':1283,'multiline':False]
['text':' The below will fail to convert because we have kRetInput on the left and kNewObj on the','line_number':1325,'multiline':False]
['text':' right.','line_number':1326,'multiline':False]
['text':' However, this tree will convert.','line_number':1330,'multiline':False]
['text':' Reduced form of {$project: {o1.a: 1}}, {$project: {o1.o2.b: 1}}.','line_number':1356,'multiline':False]
['text':' We expect to see a fallback here, because when we go to merge the specs for fields "a" and','line_number':1357,'multiline':False]
['text':' "o2", we have a MakeObj on the right side, which we do not know if we should keep when both','line_number':1358,'multiline':False]
['text':' specs are Closed.','line_number':1359,'multiline':False]
['text':' namespace','line_number':1367,'multiline':False]
['text':' namespace mongo::optimizer','line_number':1368,'multiline':False]
