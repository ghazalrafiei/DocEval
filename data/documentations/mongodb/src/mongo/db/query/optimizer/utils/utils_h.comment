['text':'*
 *    Copyright (C) 2022-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' IWYU pragma: keep','line_number':53,'multiline':False]
['text':'*
 * Used to access and manipulate the child of a unary node.
 ','line_number':112,'multiline':True]
['text':'*
 * Used to access and manipulate the left child of a binary node.
 ','line_number':126,'multiline':True]
['text':'*
 * Used to access and manipulate the right child of a binary node.
 ','line_number':140,'multiline':True]
['text':'*
 * Used to access children of a n-ary node. By default, it accesses the first child.
 ','line_number':154,'multiline':True]
['text':'*
 * Used to vend out fresh projection names. The method getNextId receives an optional prefix. If we
 * are generating descriptive names, the variable name we return starts with the prefix and includes
 * a prefix-specific counter. If we are not generating descriptive variable names, the prefix is
 * ignored and instead we use a global counter instead and ignore the prefix.
 ','line_number':170,'multiline':True]
['text':'useDescriptiveVarNames','line_number':185,'multiline':True]
['text':'*
 * Used to track references originating from a set of physical properties.
 ','line_number':229,'multiline':True]
['text':' Use a union node to restrict the set of projections we expose up the tree. The union node is','line_number':234,'multiline':False]
['text':' optimized away during lowering.','line_number':235,'multiline':False]
['text':'*
 * Split a collation requirement between an outer (left) and inner (right) side. The outer side must
 * be a prefix in the collation spec, and the right side a suffix.
 ','line_number':244,'multiline':True]
['text':' If set, contains a Constant or Variable bound of an (yet unknown) interval.','line_number':257,'multiline':False]
['text':' Requirements we have built so far. May be trivially true.','line_number':260,'multiline':False]
['text':' If true, retain original predicate after the conversion. In this case, the requirement map','line_number':263,'multiline':False]
['text':' might capture only a part of the predicate.','line_number':264,'multiline':False]
['text':' TODO: consider generalizing to retain only a part of the predicate.','line_number':265,'multiline':False]
['text':'*
 * Takes an expression that comes from an Filter or Evaluation node, and attempt to convert
 * to a PartialSchemaReqConversion. This is done independent of the availability of indexes.
 * Essentially this means to extract intervals over paths whenever possible. If the conversion is
 * not possible, return empty result.
 *
 * A direct node-to-intervals converter may be specified, used to selectively expands for example
 * PathArr into an equivalent interval representation.
 ','line_number':271,'multiline':True]
['text':'*
 * Given a set of non-multikey paths, remove redundant Traverse elements from paths in a Partial
 * Schema Requirement structure. Following that the intervals of any remaining non-multikey paths
 * (following simplification) on the same key are intersected. Intervals of multikey paths are
 * checked for subsumption and if one subsumes the other, the subsuming one is retained. Returns
 * true if we have an always-false predicate after simplification. Each redundant binding gets an
 * entry in 'projectionRenames', which maps redundant name to the de-duplicated name.
 ','line_number':283,'multiline':True]
['text':'*
 * Try to check whether the predicate 'lhs' is a subset of 'rhs'.
 *
 * True means 'lhs' is contained in 'rhs': every document that matches
 * 'lhs' also matches 'rhs'.
 *
 * False means either:
 * - Not a subset: there is a counterexample.
 * - Not sure: this function was unable to determine one way or the other.
 ','line_number':299,'multiline':True]
['text':'*
 * Computes the intersection of two PartialSchemeRequirements objects.
 * On success, returns true and stores the result in 'target'.
 * On failure, returns false and leaves 'target' in an unspecified state.
 *
 * Assumes 'target' comes before 'source', so 'source' may refer to bindings
 * produced by 'target'.
 *
 * The intersection:
 * - is a predicate that matches iff both original predicates match.
 * - has all the bindings from 'target' and 'source', but excluding
 *   bindings that would be redundant (have the same key).
 *
 * "Failure" means we are unable to represent the result as a PartialSchemaRequirements.
 * This can happen when:
 * - The resulting predicate is always false.
 * - 'source' reads from a projection bound by 'target'.
 ','line_number':311,'multiline':True]
['text':'*
 * Encode an index of an index field as a field name in order to use with a FieldProjectionMap.
 ','line_number':334,'multiline':True]
['text':'*
 * Decode an field name as an index field.
 ','line_number':339,'multiline':True]
['text':'*
 * Compute a list of candidate indexes. A CandidateIndexEntry describes intervals that could be
 * used for accessing each of the indexes in the map. The intervals themselves are derived from
 * 'reqMap'.
 ','line_number':344,'multiline':True]
['text':'*
 * Computes a set of residual predicates which will be applied on top of a Scan.
 ','line_number':357,'multiline':True]
['text':'*
 * Checks if we have an interval tree which has at least one atomic interval which may include Null
 * as an endpoint.
 ','line_number':364,'multiline':True]
['text':'*
 * Used to lower a Sargable node to a subtree consisting of functionally equivalent Filter and Eval
 * nodes.
 ','line_number':370,'multiline':True]
['text':'*
 * Lower ResidualRequirementsWithCE to a subtree consisting of functionally equivalent Filter and
 * Eval nodes. Note that we take indexPredSels by value here because the implementation needs its
 * own copy. "scanGroupCE" is the estimated cardinality of the underlying collection scan (the
 * Sargable node's child group), while the "baseCE" is the initial cardinality on top of which the
 * residual predicates act. For a sargable node with a "Seek" target it is "1" to reflect the fact
 * that we fetch one row id at a time, and for "Complete" and "Index" it is the same as the
 * "scanGroupCE".
 ','line_number':380,'multiline':True]
['text':'*
 * Build ResidualRequirementsWithOptionalCE by combining 'residReqs' with the corresponding entries
 * in 'partialSchemaKeyCE'.
 ','line_number':396,'multiline':True]
['text':'*
 * Build ResidualRequirementsWithOptionalCE where each entry in 'reqs' has boost::none CE.
 ','line_number':403,'multiline':True]
['text':'*
 * Sort requirements under a Conjunction by estimated cost.
 ','line_number':408,'multiline':True]
['text':'*
 * Remove unused requirements from 'residualReqs' and remove unused projections from
 * 'fieldProjectionMap'. A boost::none 'residualReqs' indicates that there are no residual
 * requirements to be applied after the IndexScan, PhysicalScan or Seek (can be thought of as
 * "trivially true" residual requirements).
 ','line_number':415,'multiline':True]
['text':'*
 * Implements an RID Intersect node using Union and GroupBy.
 ','line_number':425,'multiline':True]
['text':'*
 * Implements an RID Intersect node using a HashJoin.
 ','line_number':440,'multiline':True]
['text':'*
 * Lowers a plan consisting of one or several equality prefixes. The sub-plans for each equality
 * prefix are connected using correlated joins. The sub-plans for each prefix in turn are
 * implemented as one or more index scans which are unioned or intersected depending on the shape of
 * the interval expression (e.g. conjunction or disjunction).
 ','line_number':465,'multiline':True]
['text':'*
 * Builds the evaluation nodes necessary to retrieve all non-top-level fields from each shard key
 * path, and the filter node needed to perform shard filtering. Determines the CE of the nodes
 * according to the indexReqTarget.
 ','line_number':488,'multiline':True]
['text':'*
 * Computes the number of plan elements present in the tree.
 ','line_number':500,'multiline':True]
['text':' namespace mongo::optimizer','line_number':505,'multiline':False]
