['text':'*
 *    Copyright (C) 2022-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 * Generic bound.
 ','line_number':52,'multiline':True]
['text':'*
 * Generic interval.
 ','line_number':80,'multiline':True]
['text':'*
 * Represents a bound in an simple interval (interval over one projection). The bound can be a
 * constant or an expression (e.g. a formula). This is a logical abstraction.
 ','line_number':120,'multiline':True]
['text':'*
 * Represents a simple interval (interval over one projection). This is a logical abstraction. It
 * counts low and high bounds which may be inclusive or exclusive.
 ','line_number':137,'multiline':True]
['text':'*
     * Checks whether the interval is exactly [MaxKey, MinKey]. Although this is not the
     * only always-false interval, it is the canonical one we use after simplifying.
     ','line_number':150,'multiline':True]
['text':'*
 * Represents an expression (consisting of possibly nested unions and intersections) over an
 * interval.
 ','line_number':159,'multiline':True]
['text':'*
 * Checks if the interval is always true: it contains all possible values. This is encoded as
 * [MinKey, MaxKey].
 ','line_number':165,'multiline':True]
['text':'*
 * Checks if the interval is always false: it does not contain any values. This is encoded as
 * [MaxKey, MinKey]
 ','line_number':171,'multiline':True]
['text':'*
 * Represents a bound in a compound interval, which encodes an equality prefix. It consists of a
 * vector of expressions, which represents an index bound. This is a physical abstraction.
 ','line_number':177,'multiline':True]
['text':' Extend the current compound bound with a simple bound. It is the caller's responsibility to','line_number':193,'multiline':False]
['text':' ensure we confirm to an equality prefix.','line_number':194,'multiline':False]
['text':'*
 * An interval of compound keys: each endpoint is a compound key, with one expression per index key.
 * This is a physical primitive tied to a specific index.
 ','line_number':198,'multiline':True]
['text':' Unions and conjunctions of individual compound intervals.','line_number':216,'multiline':False]
['text':'*
 * An input binding and a path to be applied over the input binding. Used in conjunction with a
 * PartialSchemaRequirement to indicate which values a requirement should be applied to. The path
 * should only contain Get, Traverse, and Id path elements.
 ','line_number':219,'multiline':True]
['text':' The default constructor sets the path to PathIdentity and the projectionName to boost::none.','line_number':225,'multiline':False]
['text':' Referred, or input projection name. May be boost::none while constructing','line_number':237,'multiline':False]
['text':' PartialSchemaRequirements, before it is known which projection the path should be applied to.','line_number':238,'multiline':False]
['text':' (Partially determined) path.','line_number':241,'multiline':False]
['text':'*
 * Represents a constraint on the schema in the collection. Used in conjunction with a
 * PartialSchemKey to apply an interval constraint to some value and optionally bind the
 * output to a projection.
 ','line_number':245,'multiline':True]
['text':' Bound, or output projection name.','line_number':268,'multiline':False]
['text':' If set, this requirement exists for performance reasons (as opposed to correctness). We will','line_number':273,'multiline':False]
['text':' attempt to incorporate it into index bounds, otherwise will not add it to residual','line_number':274,'multiline':False]
['text':' predicates.','line_number':275,'multiline':False]
['text':'*
 * Allows fast index path lookup with an unordered map whose keys
 * are index paths and values are the number of times each one occurs across all indexes.
 ','line_number':283,'multiline':True]
['text':'*
 * Used to track cardinality estimates per predicate inside a PartialSchemaRequirement. The order of
 * estimates is the same as the leaf order in the primary PartialSchemaRequirements.
 ','line_number':310,'multiline':True]
['text':' Requirements which are not satisfied directly by an IndexScan, PhysicalScan or Seek (e.g. using','line_number':318,'multiline':False]
['text':' an index field, or scan field). The index refers to the underlying entry in the','line_number':319,'multiline':False]
['text':' PartialSchemaRequirement map.','line_number':320,'multiline':False]
['text':' Which one is the first index field in the prefix.','line_number':346,'multiline':False]
['text':' Contains the intervals we compute for each "equality prefix" of query predicates.','line_number':348,'multiline':False]
['text':' Set of positions of predicates (in the requirements map) which we encode with this prefix.','line_number':350,'multiline':False]
['text':'*
 * Specifies type of query predicate which is being answered using a particular field on a candidate
 * index. This is used to determine if we can (or should) attempt to satisfy collation requirements
 * during the implementation phase. For example if we have a query (a = 1) and (b > 2) and (c = 3 or
 * c > 10) the entries will be SimpleEquality, SimpleInequality, and Compound.
 ','line_number':354,'multiline':True]
['text':'*
 * Used to pre-compute candidate indexes for SargableNodes.
 * We keep track of the following:
 *  1. Name of index this entry applies to. There may be multiple entries for the same index if we
 * have more than one equality prefix (see below).
 *  2. A map from index field to projection we deliver the field under. We can select which index
 * fields we want to bind to which projections.
 *  3. A vector of equality prefixes. The equality prefix refers to the predicates applied to each
 * of the index fields. It consists of 0+ equalities followed by at most one inequality, and
 * followed by 0+ unconstrained fields. For example, suppose we have an index consisting of five
 * fields with the following intervals applied to each: _field1: [0, 0], _field2: [1, 1], _field3:
 * [2, MaxKey], _field4: (unconstrained), _field5: [MinKey, 10], _field6: [100, MaxKey]. In this
 * example we have 3 equality prefixes: {_field1, field_2, field3, _field4}, {_field5}, {_field6}.
 * If we have more than one prefixes, we may choose to perform recursive index navigation. If in the
 * simplest case with one equality prefix we perform an index scan with some residual predicates
 * applied.
 *  4. Residual predicates. We may not satisfy all intervals directly by converting into index
 * bounds, and instead may satisfy some as residual predicates. Consider the example: _field1: [0,
 * MaxKey], _field2: [1, MaxKey]. If we were to constrain the candidate indexes to just one equality
 * prefix, we would create compound index bound [{0, MinKey}, {MaxKey, MaxKey}] effectively encoding
 * the interval over the first field into the bound, the binding _field2 to a temporary variable,
 * and applying a filter encoding [1, MaxKey] over the index scan.
 *  5. List of the predicate types applied to each field in the candidate index. This is needed
 * during the physical rewrite phase where we need to match the collation requirements with the
 * collation of the index. One use is to ignore collation requirements for fields which are
 * equalities.
 ','line_number':369,'multiline':True]
['text':' Indicates which fields we are retrieving and how we assign them to projections.','line_number':401,'multiline':False]
['text':' Contains equality prefixes for this index.','line_number':404,'multiline':False]
['text':' If we have more than one equality prefix, contains the list of the correlated projections.','line_number':406,'multiline':False]
['text':' Requirements which are not satisfied directly by the IndexScan. Each Conjunction is intended','line_number':409,'multiline':False]
['text':' to have its children sorted from most to least selective.','line_number':410,'multiline':False]
['text':' boost::none indicates that all requirements are satisfied by the IndexScan.','line_number':411,'multiline':False]
['text':' Types of the predicates which we will answer using a field at a given position in the','line_number':414,'multiline':False]
['text':' candidate index.','line_number':415,'multiline':False]
['text':' Length of prefix of fields with applied intervals.','line_number':418,'multiline':False]
['text':'*
 * ScanParams describes a set of predicates and projections to use for a collection scan or fetch.
 *
 * The semantics are:
 * 1. Apply the FieldProjectionMap to introduce some bindings.
 * 2. Apply the ResidualRequirements (a filter), which can read any of those bindings.
 *
 * We represent projections specially because SBE 'ScanStage' is more efficient at handling multiple
 * fields, compared to doing N separate getField calls.
 ','line_number':422,'multiline':True]
['text':' Requirements which are not satisfied directly by a PhysicalScan or Seek. Each Conjunction is','line_number':435,'multiline':False]
['text':' intended to have its children sorted from most to least selective. boost::none indicates that','line_number':436,'multiline':False]
['text':' all requirements are satisfied by the PhysicalScan or Seek.','line_number':437,'multiline':False]
['text':' namespace mongo::optimizer','line_number':443,'multiline':False]
