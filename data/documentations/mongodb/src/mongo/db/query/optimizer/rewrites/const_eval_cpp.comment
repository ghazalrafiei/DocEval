['text':'*
 *    Copyright (C) 2022-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' We run the transport<true> that will pass the reference to ABT to specific transport','line_number':63,'multiline':False]
['text':' functions. The reference serves as a conceptual 'this' pointer allowing the transport','line_number':64,'multiline':False]
['text':' function to change the node itself.','line_number':65,'multiline':False]
['text':' Test if there are any projections with no references. If so remove them from the tree','line_number':68,'multiline':False]
['text':' TODO: should we be clearing here?','line_number':85,'multiline':False]
['text':'memoInterface','line_number':95,'multiline':True]
['text':'computeLastRefs','line_number':95,'multiline':True]
['text':' Schedule node replacement as it has not references.','line_number':103,'multiline':False]
['text':' Do not inline nodes which can become Sargable.','line_number':107,'multiline':False]
['text':' TODO: consider caching.','line_number':108,'multiline':False]
['text':' TODO: consider deriving IndexingAvailability.','line_number':109,'multiline':False]
['text':' Schedule node inlining as there is exactly one reference.','line_number':111,'multiline':False]
['text':' See if we have already manipulated this definition and if so then use the newer version.','line_number':127,'multiline':False]
['text':' If we find the definition and it is a simple constant then substitute the variable.','line_number':136,'multiline':False]
['text':' This is a indirection to another variable. So we can skip, but first remember that we','line_number':139,'multiline':False]
['text':' inlined this variable so that we won't try to replace it with a common expression and','line_number':140,'multiline':False]
['text':' revert the inlining.','line_number':141,'multiline':False]
['text':' If this is the only reference to some expression then substitute the variable, but','line_number':148,'multiline':False]
['text':' first remember that we inlined this expression so that we won't try to replace it','line_number':149,'multiline':False]
['text':' with a common expression and revert the inlining.','line_number':150,'multiline':False]
['text':' If we are in the ref block we do not want to inline even if there is only a single','line_number':160,'multiline':False]
['text':' reference. Similarly, we do not want to inline any variable under traverse.','line_number':161,'multiline':False]
['text':' The bind expressions has not been referenced so it is dead code and the whole let','line_number':176,'multiline':False]
['text':' expression can be removed; i.e. we implement a following rewrite:','line_number':177,'multiline':False]
['text':'','line_number':178,'multiline':False]
['text':' n == let var=<bind expr> in <in expr>','line_number':179,'multiline':False]
['text':'','line_number':180,'multiline':False]
['text':'     v','line_number':181,'multiline':False]
['text':'','line_number':182,'multiline':False]
['text':' n == <in expr>','line_number':183,'multiline':False]
['text':' We don't want to make a copy of 'in' as it may be arbitrarily large. Also, we cannot','line_number':185,'multiline':False]
['text':' move it out as it is part of the Let object and we do not want to invalidate any','line_number':186,'multiline':False]
['text':' assumptions the Let may have about its structure. Hence we swap it for the "special"','line_number':187,'multiline':False]
['text':' Blackhole object. The Blackhole does nothing, it just plugs the hole left in the 'in'','line_number':188,'multiline':False]
['text':' place.','line_number':189,'multiline':False]
['text':' Swap the current node (n) for the result.','line_number':192,'multiline':False]
['text':' The bind expression has been referenced exactly once so schedule it for inlining.','line_number':195,'multiline':False]
['text':' If the 'lam' expression is LambdaAbstraction then we can do the inplace beta reduction.','line_number':203,'multiline':False]
['text':' TODO - missing alpha conversion so for now assume globally unique names.','line_number':204,'multiline':False]
['text':' Could also constant fold arithmetic negation.','line_number':224,'multiline':False]
['text':' Specific transport for binary operation','line_number':231,'multiline':False]
['text':' The const correctness is probably wrong (as const ABT& lhs, const ABT& rhs does not work for','line_number':232,'multiline':False]
['text':' some reason but we can fix it later).','line_number':233,'multiline':False]
['text':' Let say we want to recognize ConstLhs + ConstRhs and replace it with the result of','line_number':238,'multiline':False]
['text':' addition.','line_number':239,'multiline':False]
['text':' Let say we want to recognize ConstLhs - ConstRhs and replace it with the result of','line_number':253,'multiline':False]
['text':' subtraction.','line_number':254,'multiline':False]
['text':' Let say we want to recognize ConstLhs * ConstRhs and replace it with the result of','line_number':269,'multiline':False]
['text':' multiplication.','line_number':270,'multiline':False]
['text':' Nothing and short-circuiting semantics of the 'or' operation in SBE allow us to','line_number':285,'multiline':False]
['text':' interrogate 'lhs' only provided the right side is not a constant.','line_number':286,'multiline':False]
['text':' Both left and right sides are boolean constants.','line_number':294,'multiline':False]
['text':' Right side is not constant.','line_number':300,'multiline':False]
['text':' true || rhs -> true.','line_number':302,'multiline':False]
['text':' false || rhs -> rhs.','line_number':305,'multiline':False]
['text':' Left side is not constant and right side is a "false" constant.','line_number':311,'multiline':False]
['text':' x || false -> x.','line_number':315,'multiline':False]
['text':' Nothing and short-circuiting semantics of the 'and' operation in SBE allow us to','line_number':323,'multiline':False]
['text':' interrogate 'lhs' only provided the right side is not a constant.','line_number':324,'multiline':False]
['text':' Both left and right sides are boolean constants.','line_number':332,'multiline':False]
['text':' Right side is not constant.','line_number':338,'multiline':False]
['text':' true && rhs -> rhs.','line_number':340,'multiline':False]
['text':' false && rhs -> false.','line_number':343,'multiline':False]
['text':' Left side is not constant and right side is a "true" constant.','line_number':349,'multiline':False]
['text':' x && true -> x.','line_number':353,'multiline':False]
['text':' Not implemented.','line_number':393,'multiline':False]
['text':' We can simplify exists(constant).','line_number':401,'multiline':False]
['text':' All arguments are constants. Replace with an array constant.','line_number':415,'multiline':False]
['text':' Copy the value before inserting into the array.','line_number':420,'multiline':False]
['text':' TraverseP with an identity lambda. Replace with the input.','line_number':429,'multiline':False]
['text':' The isInListData check currently only pertains to parameterized InMatchExpressions, whose','line_number':444,'multiline':False]
['text':' equalities list is bound into the SBE runtime environment as InListData. In this case, no','line_number':445,'multiline':False]
['text':' constant folding will be performed for op.name() == "isInListData" because InListData is','line_number':446,'multiline':False]
['text':' never used in the optimizer; it is generated in a later phase in SBE.','line_number':447,'multiline':False]
['text':'','line_number':448,'multiline':False]
['text':' If the child node is a Constant that's not of type inListData, the check can be ignored and','line_number':449,'multiline':False]
['text':' set directly to false.','line_number':450,'multiline':False]
['text':' If the condition is a boolean constant we can simplify.','line_number':461,'multiline':False]
['text':' If true then x else y -> x.','line_number':465,'multiline':False]
['text':' If false then x else y -> y.','line_number':468,'multiline':False]
['text':' If both branches are boolean constants then we can simplify.','line_number':473,'multiline':False]
['text':' if (x) then true else true -> true.','line_number':482,'multiline':False]
['text':' if (x) then true else false -> (x).','line_number':485,'multiline':False]
['text':' If (x) then false else true -> !(x).','line_number':489,'multiline':False]
['text':' if (x) then false else false -> false.','line_number':492,'multiline':False]
['text':' If (Not (x)) then y else z -> if (x) then z else y.','line_number':499,'multiline':False]
['text':' PathConst does not depend on its parent, so replace with the PathConst's child.','line_number':508,'multiline':False]
['text':' PathConst does not depend on its parent, so replace with the PathConst's child.','line_number':515,'multiline':False]
['text':' Remove trivially true filter.','line_number':562,'multiline':False]
['text':' First, pull out the child and put in a blackhole.','line_number':564,'multiline':False]
['text':' Replace the filter node itself with the extracted child.','line_number':567,'multiline':False]
['text':' The evaluation node is unused so replace it with its own child.','line_number':574,'multiline':False]
['text':' First, pull out the child and put in a blackhole.','line_number':579,'multiline':False]
['text':' Replace the evaluation node itself with the extracted child.','line_number':582,'multiline':False]
['text':' Do not consider simple constants or variable references for elimination.','line_number':589,'multiline':False]
['text':' Try to find a projection with the same expression as the current 'op' node and','line_number':591,'multiline':False]
['text':' substitute it with a variable pointing to that source projection.','line_number':592,'multiline':False]
['text':' Make sure that the matched projection is visible to the current 'op'.','line_number':594,'multiline':False]
['text':' If we already inlined the matched projection, we don't want to use it as a source','line_number':596,'multiline':False]
['text':' for common expression as it will negate the inlining.','line_number':597,'multiline':False]
['text':' Source now will have an extra reference from the newly constructed projection.','line_number':602,'multiline':False]
['text':' The new projection node should inherit the references from the old node.','line_number':608,'multiline':False]
['text':' It is structurally impossible to nest References nodes.','line_number':621,'multiline':False]
['text':' Record the mapping from the old to the new.','line_number':631,'multiline':False]
['text':' Do the swap.','line_number':637,'multiline':False]
['text':' newN now contains the old ABT','line_number':640,'multiline':False]
['text':' namespace mongo::optimizer','line_number':645,'multiline':False]
