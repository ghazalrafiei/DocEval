['text':'*
 *    Copyright (C) 2023-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 * Default functor to simplify a list of children and create an appropriate node to return to the
 * parent level, or as a result of the builder. By default we skip adding nodes for empty child
 * lists, and we do not perform any simplification to the children.
 *
 * The simplifier is made aware if there are children which have been removed from the input vector
 * "v" for reasons of being always-true or always-false. Suppose we are building a DNF tree. First
 * we call .pushDisj(). Then at some point pushConj() was called. Then we added a few atoms with
 * .atom(), and finally call .pop(). At this point the simplifier is called, and receives the list
 * of atoms (v) we tried to add to the conjunction. We may in the extreme case remove all nodes. In
 * particular, if we are building a conjunction and we are left with no nodes but we know we had
 * always-true (but not always-false) children, we could create an always-true node. Conversely when
 * creating a disjunction with always-false (but not always-true) flag set, we'll create an
 * always-false node.
 ','line_number':45,'multiline':True]
['text':' Either result node is present, or any of the flags below is set.','line_number':70,'multiline':False]
['text':' We have no children in 'v', but possibly some children are trivially true or false.','line_number':81,'multiline':False]
['text':' So the rule that applies is either an identity, or an absorbing element.','line_number':82,'multiline':False]
['text':' False is the absorbing element of conjunction.','line_number':86,'multiline':False]
['text':' True is the identity element of conjunction.','line_number':89,'multiline':False]
['text':' True is the absorbing element of disjunction.','line_number':94,'multiline':False]
['text':' False is the identity element of disjunction.','line_number':97,'multiline':False]
['text':'*
 * Builder which is used to create BoolExpr trees. It supports negation, which is translated
 * internally to conjunction and disjunction via deMorgan elimination. The following template
 * parameters need to be supplied:
 *   1. Simplification and create node function. This function will accept a list of children of
 * conjunction or disjunction, and create an appropriate node.
 *   2. Negation function. Used for deMorgan transformation. For example "not (x and y) is
 * simplified to neg(x) or neg(y).
 *
 *  Usage:
 *    1. use .pushConj() or .pushDisj() to begin a new conjunction / disjunction.
 *    2. use .atom() to add elements to the current conjunction / disjunction.
 *    3. use .pop() when done adding elements to the current conjunction / disjunction, and
 * implicitly move to adding elements to the parent.
 *    4. When we are done, call .finish(). Finish returns an empty result if no elements have
 * been added to the root level, and we do not simplify singular conjunction/disjunctions.
 ','line_number':111,'multiline':True]
['text':' What is the type of the node we're currently adding to.','line_number':140,'multiline':False]
['text':' Is the subtree negated.','line_number':142,'multiline':False]
['text':' List of children for the current node.','line_number':144,'multiline':False]
['text':' Was there a child removed from the list which was always-true or always-false.','line_number':146,'multiline':False]
['text':'node','line_number':180,'multiline':True]
['text':'node','line_number':183,'multiline':True]
['text':'children','line_number':183,'multiline':True]
['text':'node','line_number':187,'multiline':True]
['text':'node','line_number':190,'multiline':True]
['text':'children','line_number':190,'multiline':True]
['text':'hasTrue','line_number':208,'multiline':True]
['text':'hasFalse','line_number':209,'multiline':True]
['text':'isConjunction','line_number':214,'multiline':True]
['text':'isConjunction','line_number':218,'multiline':True]
['text':' namespace mongo::optimizer','line_number':310,'multiline':False]
