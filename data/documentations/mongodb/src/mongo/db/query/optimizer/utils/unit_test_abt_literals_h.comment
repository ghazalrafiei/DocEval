['text':'*
 *    Copyright (C) 2022-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 * The functions in this file aim to simplify and shorten the manual construction of ABTs for
 * testing. This utility is meant to be used exclusively for tests. It does not necessarily provide
 * an efficient way to construct the tree (e.g. we need to shuffle arguments through a lambda and
 * wrap/unwrap the holders).
 *
 * Note if renaming, changing, etc names of shorthand functions, also update the corresponding
 * 'ExplainInShorthand' transport in order to continue generating valid construction code.
 ','line_number':44,'multiline':True]
['text':' Strong aliases for expressions, paths and nodes. Those provide type safety. For example, they','line_number':59,'multiline':False]
['text':' make it impossible to pass an ABT created as an expression in place of an argument expected to a','line_number':60,'multiline':False]
['text':' node.','line_number':61,'multiline':False]
['text':'*
 * ABT Expressions
 ','line_number':70,'multiline':True]
['text':' String constant.','line_number':96,'multiline':False]
['text':' Int32 constant.','line_number':101,'multiline':False]
['text':' Int64 constant.','line_number':106,'multiline':False]
['text':' Double constant.','line_number':111,'multiline':False]
['text':' Null constant.','line_number':116,'multiline':False]
['text':' Nothing constant.','line_number':121,'multiline':False]
['text':' NaN constant','line_number':126,'multiline':False]
['text':' Boolean constant.','line_number':131,'multiline':False]
['text':' MinKey constant.','line_number':136,'multiline':False]
['text':' MaxKey constant.','line_number':141,'multiline':False]
['text':' Array constant. We expect the arguments to be Constants.','line_number':146,'multiline':False]
['text':' Empty Array constant.','line_number':159,'multiline':False]
['text':' Empty Object constant.','line_number':164,'multiline':False]
['text':' Variable.','line_number':169,'multiline':False]
['text':' Vector of variable names.','line_number':174,'multiline':False]
['text':'*
 * ABT Paths
 ','line_number':223,'multiline':True]
['text':'*
 * ABT Nodes.
 * TODO: add shorthands for all node types if it makes sense.
 ','line_number':292,'multiline':True]
['text':'*
 * Note the root returns an ABT instead of a holder.
 ','line_number':376,'multiline':True]
['text':'*
 * A builder used to construct an ABT. The usage pattern is the following:
 *    1. Construct the builder object.
 *    2. Call appropriate method to add a node of a particular type. The builder works top to
 * bottom: first we add root of the query, then add its child etc until we finalize.
 *    3. At the end call "finish" and pass-in the leaf ABT. This will finalize the builder and
 * return the entire ABT.
 ','line_number':388,'multiline':True]
['text':' This first input is stubbed. IndexedChildAccessor will access the first child by default.','line_number':426,'multiline':False]
['text':' Need to use a dummy nullary node here (Blackhole does not work: it is not a node).','line_number':452,'multiline':False]
['text':' Holds the root node.','line_number':464,'multiline':False]
['text':' Holds a pointer to the previous node's child.','line_number':466,'multiline':False]
['text':'*
 * Interval expressions.
 ','line_number':470,'multiline':True]
['text':'inclusive','line_number':504,'multiline':True]
['text':'inclusive','line_number':508,'multiline':True]
['text':'*
 * Shorthand explainer: generate C++ code to construct ABTs in shorthand form. The use case is to
 * provide an easy way to capture an ABT from a JS test and convert it to use in a C++ unit test.
 ','line_number':519,'multiline':True]
['text':'*
     * ABT Expressions.
     ','line_number':528,'multiline':True]
['text':'*
     * ABT Paths.
     ','line_number':620,'multiline':True]
['text':'*
     * ABT Nodes.
     ','line_number':674,'multiline':True]
['text':'bindResult','line_number':677,'multiline':True]
['text':'bindResult','line_number':686,'multiline':True]
['text':' We explain the projection directly to avoid explaining the binder.','line_number':704,'multiline':False]
['text':'bindAggResult','line_number':712,'multiline':True]
['text':'refsAggResult','line_number':713,'multiline':True]
['text':'bindGbResult','line_number':714,'multiline':True]
['text':'refsGbResult','line_number':715,'multiline':True]
['text':'bindResult','line_number':777,'multiline':True]
['text':'refsResult','line_number':778,'multiline':True]
['text':' namespace mongo::optimizer::unit_test_abt_literals','line_number':823,'multiline':False]
