['text':'*
 *    Copyright (C) 2022-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' IWYU pragma: keep','line_number':39,'multiline':False]
['text':' The result must be Constant.','line_number':66,'multiline':False]
['text':' And the value must be 2','line_number':70,'multiline':False]
['text':' The result must be Constant.','line_number':81,'multiline':False]
['text':' And the value must be 2','line_number':85,'multiline':False]
['text':' Get "any" Const 2','line_number':90,'multiline':False]
['text':' The result must be Constant.','line_number':98,'multiline':False]
['text':' And the value must be 2','line_number':102,'multiline':False]
['text':' Field "a" Const 2','line_number':107,'multiline':False]
['text':' Get "a" Id','line_number':111,'multiline':False]
['text':' let x = (Field "a" Const 2 | root)','line_number':114,'multiline':False]
['text':'     in  (Get "a" Id | x)','line_number':115,'multiline':False]
['text':' Run rewriters while things change','line_number':119,'multiline':False]
['text':' The result must be Constant.','line_number':133,'multiline':False]
['text':' And the value must be 2','line_number':137,'multiline':False]
['text':' Field "a" Const 2','line_number':144,'multiline':False]
['text':' Get "a" Id','line_number':150,'multiline':False]
['text':' Run rewriters while things change','line_number':165,'multiline':False]
['text':' After rewrites for x projection disappear from the tree.','line_number':179,'multiline':False]
['text':' Field "a" Const Var "z"','line_number':196,'multiline':False]
['text':' Get "a" Traverse Const 2','line_number':201,'multiline':False]
['text':' Field "a" Const Var "z" * Field "b" Const Var "z1"','line_number':277,'multiline':False]
['text':' Get "a" Traverse Const 2','line_number':286,'multiline':False]
['text':' Get "a" Traverse Compare= 2','line_number':395,'multiline':False]
['text':' The filter now refers directly to the root projection.','line_number':435,'multiline':False]
['text':' PathObj is removed.','line_number':495,'multiline':False]
['text':' Obtain "x" and directly assign at "a".','line_number':564,'multiline':False]
['text':' Run rewriters while things change','line_number':581,'multiline':False]
['text':'make<PathIdentity>()','line_number':640,'multiline':True]
['text':' make<FunctionCall>("anyFunctionWillDo", makeSeq(make<Variable>(var))),','line_number':734,'multiline':False]
['text':' Run rewriters while things change','line_number':745,'multiline':False]
['text':' NOLINT','line_number':967,'multiline':False]
['text':' PathLambda should be the left child.','line_number':982,'multiline':False]
['text':' This ABT sets every element (if its an array) of the field 'a' to 2 (via the PathTraverse) by','line_number':1069,'multiline':False]
['text':' the bottom-most EvalPath and then retrieves the value of the field 'a' by the top-most','line_number':1070,'multiline':False]
['text':' PathTraverse.','line_number':1071,'multiline':False]
['text':' We expect that the PathFusion rewrite simplifies the tree such that we simply set every','line_number':1095,'multiline':False]
['text':' element (if its an array) of the field 'a' to 2 and return the value of the field 'a'.','line_number':1096,'multiline':False]
['text':' This ABT sets the field 'a' to "hello" and then checks if the value of the field 'a' is equal','line_number':1108,'multiline':False]
['text':' to 2.','line_number':1109,'multiline':False]
['text':' We expect that the PathFusion rewrite simplifies the tree such that (1) the PathTraverse is','line_number':1134,'multiline':False]
['text':' eliminated, since the constant that we are setting the field 'a' to is not an array and (2)','line_number':1135,'multiline':False]
['text':' we directly compare "hello" to 2 instead of retrieving the field 'a' in the Filter. Note that','line_number':1136,'multiline':False]
['text':' further optimizations with different rewrites (i.e. ConstEval) would simplify the tree','line_number':1137,'multiline':False]
['text':' further (constant folding could determine that "hello" != 2 and replace the right child of','line_number':1138,'multiline':False]
['text':' the Filter node with Const [false]). However, this unit test just exercises PathFusion','line_number':1139,'multiline':False]
['text':' optimizations.','line_number':1140,'multiline':False]
['text':' This test tests the rewriting of ABTs with array and boolean constants.','line_number':1156,'multiline':False]
['text':' This ABT sets the field 'a' to an empty array and the field 'b' to 'true' and then projects','line_number':1157,'multiline':False]
['text':' those two fields.','line_number':1158,'multiline':False]
['text':' We expect that the PathFusion rewrite simplifies the tree such that we directly construct the','line_number':1188,'multiline':False]
['text':' object {a: [], b: true}','line_number':1189,'multiline':False]
['text':' This test tests the rewriting of ABTs with array and boolean constants.','line_number':1203,'multiline':False]
['text':' This ABT sets the field 'a' to an empty array and the field 'b' to 'true' and then projects','line_number':1204,'multiline':False]
['text':' those two fields, similar to PathConstantArrayBool. The difference between this test and','line_number':1205,'multiline':False]
['text':' PathConstantArrayBool is the order of the children under the leftmost PathComposeM (the','line_number':1206,'multiline':False]
['text':' PathKeep and PathObj). Regardless of this order, we will arrive at the same optimized tree.','line_number':1207,'multiline':False]
['text':' We expect that the PathFusion rewrite simplifies the tree such that we directly construct the','line_number':1237,'multiline':False]
['text':' object {a: [], b: true}','line_number':1238,'multiline':False]
['text':' This test tests the rewriting of ABTs with a Nothing constant.','line_number':1252,'multiline':False]
['text':' This ABT sets the field 'a' to Nothing and then checks if the field 'a.b' is equal to 3.','line_number':1253,'multiline':False]
['text':' We expect that the PathFusion rewrites will remove the PathTraverse under PathGet [a] in the','line_number':1280,'multiline':False]
['text':' Filter since we know that a is set to be a non-array by the projection.','line_number':1281,'multiline':False]
['text':' Observe the path law Id * p2 -> p2 via the PathFusion rewrites in action.','line_number':1297,'multiline':False]
['text':' Observe the path law p1 * Id -> p1 via the PathFusion rewrites in action.','line_number':1324,'multiline':False]
['text':' The following ABT returns the object {a: 3}. Notice the PathDefault is the first child of the','line_number':1352,'multiline':False]
['text':' PathComposeM.','line_number':1353,'multiline':False]
['text':' We expect to see that the PathComposeM and the PathDefault are removed by the PathFusion','line_number':1378,'multiline':False]
['text':' rewrites since the constant overwrites whatever its input is.','line_number':1379,'multiline':False]
['text':' The following ABT returns the object {a: 3}. Notice the PathDefault is the second child of','line_number':1391,'multiline':False]
['text':' the PathComposeM.','line_number':1392,'multiline':False]
['text':' We expect to see that the PathComposeM and the PathDefault are removed by the PathFusion','line_number':1417,'multiline':False]
['text':' rewrites since we know that the first child of the PathComposeM will not produce Nothing, as','line_number':1418,'multiline':False]
['text':' it produces a constant object.','line_number':1419,'multiline':False]
['text':' The following ABT does an inclusion projection on the field 'a' and then on the fields 'a',','line_number':1431,'multiline':False]
['text':' 'b', and 'c'.','line_number':1432,'multiline':False]
['text':' We expect to see that the unused PathKeeps for fields 'b' and 'c' are removed by the','line_number':1454,'multiline':False]
['text':' PathFusion rewrites.','line_number':1455,'multiline':False]
['text':' The following ABT defines the field 'a' to be 2, then projects 'a' and defines the field 'b'','line_number':1467,'multiline':False]
['text':' to be 3.','line_number':1468,'multiline':False]
['text':' We expect to see that the PathFusion rewrites simplify the tree such that we project {a: 2,','line_number':1494,'multiline':False]
['text':' b: 3} at once.','line_number':1495,'multiline':False]
['text':' The following ABT defines the field 'a' to be 2, then also projects 'b'.','line_number':1509,'multiline':False]
['text':' We expect to see that the PathFusion rewrites simplify the tree such that we compose the','line_number':1535,'multiline':False]
['text':' projections.','line_number':1536,'multiline':False]
['text':' We expect to see that the PathFusion rewrites remove the unnecessary PathDefaults.','line_number':1569,'multiline':False]
['text':' This ABT sets the field 'a' to "hello" and then checks if the value of the field 'a' is a','line_number':1578,'multiline':False]
['text':' member of the array [1, 2, 3].','line_number':1579,'multiline':False]
['text':' We expect that the PathFusion rewrites removes the PathTraverse and transforms the','line_number':1607,'multiline':False]
['text':' PathCompare [EqMember] to an expression checking if the value under the PathCompare is an','line_number':1608,'multiline':False]
['text':' array. If so, we rewrite it as BinaryOp [EqMember] and if not, we rewrite it as BinaryOp [Eq]','line_number':1609,'multiline':False]
['text':' + BinaryOp [Cmp3w]. ConstEval will simplify the prior expression to just have the BinaryOp','line_number':1610,'multiline':False]
['text':' [EqMember] branch since the value of the PathCompare is a constant array.','line_number':1611,'multiline':False]
['text':' This ABT sets the field 'a' to "hello" and then checks if the value of the field 'a' "is a','line_number':1627,'multiline':False]
['text':' member" of the string "world". Note, this is a weird example, but it is one that tests the','line_number':1628,'multiline':False]
['text':' rewrites in the situation where the value below PathCompare [EqMember] is not an array, but','line_number':1629,'multiline':False]
['text':' some other constant.','line_number':1630,'multiline':False]
['text':' We expect that the PathFusion rewrites removes the PathTraverse and transforms the','line_number':1654,'multiline':False]
['text':' PathCompare [EqMember] to an expression checking if the value under the PathCompare is an','line_number':1655,'multiline':False]
['text':' array. If so, we rewrite it as BinaryOp [EqMember] and if not, we rewrite it as BinaryOp [Eq]','line_number':1656,'multiline':False]
['text':' + BinaryOp [Cmp3w]. ConstEval will simplify the prior expression to just have the BinaryOp','line_number':1657,'multiline':False]
['text':' [Eq] + BinaryOp [Cmp3w] branch since the value of the PathCompare is NOT a constant array.','line_number':1658,'multiline':False]
['text':' ConstEval will further simplify the tree since both "hello" and "world" are constants, so the','line_number':1659,'multiline':False]
['text':' check of their equality will always be false.','line_number':1660,'multiline':False]
['text':' This ABT sets the field 'a' to "hello" and then checks if the value of the field 'a' is a','line_number':1674,'multiline':False]
['text':' member of the value stored by the variable "a".','line_number':1675,'multiline':False]
['text':' We expect that the PathFusion rewrites removes the PathTraverse and transforms the','line_number':1699,'multiline':False]
['text':' PathCompare [EqMember] to an expression checking if the value under the PathCompare is an','line_number':1700,'multiline':False]
['text':' array. If so, we rewrite it as BinaryOp [EqMember] and if not, we rewrite it as BinaryOp [Eq]','line_number':1701,'multiline':False]
['text':' + BinaryOp [Cmp3w]. There are no further simplifications for ConstEval to do here since we do','line_number':1702,'multiline':False]
['text':' not know the type of the value stored by the variable "a".','line_number':1703,'multiline':False]
['text':' namespace','line_number':1750,'multiline':False]
['text':' namespace mongo::optimizer','line_number':1751,'multiline':False]
