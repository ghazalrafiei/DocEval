['text':'*
 *    Copyright (C) 2022-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' ABT is just a scan.','line_number':56,'multiline':False]
['text':' Check that the ScanNode originates a projection which is visible to ancestors in the ABT.','line_number':62,'multiline':False]
['text':' ABT is a scan followed by an eval which creates a new projection.','line_number':73,'multiline':False]
['text':' Check that the eval node can reference "scanProjection".','line_number':81,'multiline':False]
['text':' Check that the EvalNode propagates up its child's projections and its own projection.','line_number':85,'multiline':False]
['text':' ABT is a scan followed by an eval which creates a new projection that overwrites the scan.','line_number':98,'multiline':False]
['text':' Check that the evaluation node cannot overwrite a projection from its child.','line_number':104,'multiline':False]
['text':' ABT is a scan followed by two simple evals and a group which groups on one of the added','line_number':109,'multiline':False]
['text':' projections and aggregates on the other.','line_number':110,'multiline':False]
['text':' The group does in fact resolve the free variables in its agg expressions.','line_number':119,'multiline':False]
['text':' Check that the GroupNode only propagates its own projections (i.e., no evalProj2).','line_number':123,'multiline':False]
['text':' The same group as above but now it groups on a non-existent projection.','line_number':136,'multiline':False]
['text':' ABT is a scan followed by an eval and then a filter.','line_number':149,'multiline':False]
['text':' The filter resolves any variables it refers to.','line_number':157,'multiline':False]
['text':' Check that the FilterNode propagates up its children's projections without modification.','line_number':161,'multiline':False]
['text':' ABT is a scan followed by an eval node which contains a let expression.','line_number':174,'multiline':False]
['text':' The let resolves references to its local variable and other variables with visible','line_number':183,'multiline':False]
['text':' definitions.','line_number':184,'multiline':False]
['text':' The let does not pass up its local definitions to ancestor nodes.','line_number':188,'multiline':False]
['text':' But, the environment keeps the info about the definitions for all variables in the ABT. Check','line_number':192,'multiline':False]
['text':' that the local variable is defined by the Let.','line_number':193,'multiline':False]
['text':' Again, ABT is a scan followed by an eval node which contains a let expression. This time, the','line_number':205,'multiline':False]
['text':' let expression also refers to the projection being defined by the eval.','line_number':206,'multiline':False]
['text':' The "evalProj" referenced by the let correctly cannot be resolved.','line_number':214,'multiline':False]
['text':'isPerfOnly','line_number':237,'multiline':True]
['text':'boundProjectionName','line_number':239,'multiline':True]
['text':'isPerfOnly','line_number':239,'multiline':True]
['text':'candidateIndexes','line_number':243,'multiline':True]
['text':'scanParams','line_number':244,'multiline':True]
['text':'isPerfOnly','line_number':252,'multiline':True]
['text':'isPerfOnly','line_number':254,'multiline':True]
['text':'candidateIndexes','line_number':258,'multiline':True]
['text':'scanParams','line_number':259,'multiline':True]
['text':' The union only propagates the specified projections.','line_number':271,'multiline':False]
['text':' ABT is a union of two eval nodes which have two projection names in common.','line_number':287,'multiline':False]
['text':' We only union on one of the projections.','line_number':301,'multiline':False]
['text':' The union only propagates the specified projections.','line_number':307,'multiline':False]
['text':'*
 * The following tests cover more basic variable resolution behavior, specifically around free
 * variables. FilterNode is used as a running example of a node which exhibits on the default
 * behavior of passing up child projections and definitions unmodified.
 ','line_number':317,'multiline':True]
['text':' There are no free variables when filtering on a variable defined previously.','line_number':324,'multiline':False]
['text':' There are free variables when filtering on a variable not defined previously.','line_number':334,'multiline':False]
['text':' There are free variables when filtering 2x on variables not defined previously, and both','line_number':345,'multiline':False]
['text':' free variables are recorded.','line_number':346,'multiline':False]
['text':' There are free variables when filtering on a variable that is defined higher in the tree.','line_number':360,'multiline':False]
['text':' And there are still free variables when an additional filter is included and resolved.','line_number':369,'multiline':False]
['text':' And there are more free variables when an additional filter is included and not resolved.','line_number':380,'multiline':False]
['text':' There are no free variables when referencing a variable projected by a group.','line_number':394,'multiline':False]
['text':' There are free variables when referencing a variable masked by a group.','line_number':408,'multiline':False]
['text':' There are no free variables when multiple variables can be resolved by a single definition.','line_number':426,'multiline':False]
['text':' ABT is a binary join where each side creates some new projections and the join applies a','line_number':437,'multiline':False]
['text':' filter to the right side. Both the filter and the right side contain correlated variables.','line_number':438,'multiline':False]
['text':' "evalProjA" needs to come from the left child and IS set to be correlated in the binary join','line_number':453,'multiline':False]
['text':' below.','line_number':454,'multiline':False]
['text':' "evalProjA1" needs to come from the left child and IS NOT set to be correlated in the binary','line_number':462,'multiline':False]
['text':' join below.','line_number':463,'multiline':False]
['text':' Check that the binary join resolves "evalProjA" but not "evalProjA1" in the right child and','line_number':477,'multiline':False]
['text':' the filter.','line_number':478,'multiline':False]
['text':' Check that the binary join node propagates up left and right projections.','line_number':482,'multiline':False]
['text':' Check that we propagate left and right projections.','line_number':518,'multiline':False]
['text':' Check that we propagate left and right projections.','line_number':547,'multiline':False]
['text':' There are no last refs in an ABT that doesn't "finalize" any last refs.','line_number':554,'multiline':False]
['text':' There is a last ref in a basic lambda expression.','line_number':561,'multiline':False]
['text':' An 'in' result with multiple variables only marks the local variable as a last ref.','line_number':571,'multiline':False]
['text':' namespace','line_number':590,'multiline':False]
['text':' namespace mongo::optimizer','line_number':591,'multiline':False]
