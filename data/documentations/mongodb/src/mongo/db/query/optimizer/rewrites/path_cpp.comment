['text':'*
 *    Copyright (C) 2022-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' If the LHS and RHS are PathTraverses with equal depth, we can try to fuse the inner','line_number':88,'multiline':False]
['text':' paths.','line_number':89,'multiline':False]
['text':' If we know that the RHS is a non-array, we can eliminate the PathTraverse since it is','line_number':95,'multiline':False]
['text':' an unecessary operation.','line_number':96,'multiline':False]
['text':' PathLambda should be the left child.','line_number':109,'multiline':False]
['text':' We can directly inline the comparison since we know it is a comparison to a','line_number':116,'multiline':False]
['text':' constant.','line_number':117,'multiline':False]
['text':' If we have nodes in _redundant then continue iterating even if _changed is not set.','line_number':158,'multiline':False]
['text':' Let's see what we can determine from the constant expression','line_number':173,'multiline':False]
['text':' TODO - follow up on Nothing and 3 value logic. Assume plain boolean for now.','line_number':195,'multiline':False]
['text':' Get "a" Const <c> -> Const <c>','line_number':206,'multiline':False]
['text':' Pull out the constant path','line_number':208,'multiline':False]
['text':' And swap it for the current node','line_number':211,'multiline':False]
['text':' Simply move the info from the child.','line_number':219,'multiline':False]
['text':' We don't know anything about the child.','line_number':230,'multiline':False]
['text':' We are setting a field to nothing (aka drop) hence we do not know what the result could','line_number':233,'multiline':False]
['text':' be (i.e. it all depends on the input).','line_number':234,'multiline':False]
['text':' The child produces bona fide value hence this will become an object.','line_number':237,'multiline':False]
['text':' Traverse is completely dependent on its input and we cannot say anything about it.','line_number':246,'multiline':False]
['text':' PathComposeM in the EvalFilter context cannot be modeled as function composition','line_number':261,'multiline':False]
['text':' the same way that it can in EvalPath because the output of the inner EvalFilter','line_number':262,'multiline':False]
['text':' would be a stream of booleans rather than a stream of documents.','line_number':263,'multiline':False]
['text':' TODO: handle chain of Gets.','line_number':274,'multiline':False]
['text':' Id * p2 -> p2','line_number':281,'multiline':False]
['text':' p1 * Id -> p1','line_number':287,'multiline':False]
['text':' Default * Const e -> e (provided we can prove e is not Nothing and we can do that','line_number':311,'multiline':False]
['text':' only when e is Constant expression)','line_number':312,'multiline':False]
['text':' Const e * Default -> e (provided we can prove e is not Nothing and we can do that','line_number':318,'multiline':False]
['text':' only when e is Constant expression)','line_number':319,'multiline':False]
['text':' We can remove any PathObj elements in this loop because we know that p2 will produce an','line_number':326,'multiline':False]
['text':' object and that p2 will be applied after p1 is applied to the input (so the final output','line_number':327,'multiline':False]
['text':' of the PathComposeM will be an object).','line_number':328,'multiline':False]
['text':' Specifically not setting _changed here. Since we are trying to erase a child we','line_number':333,'multiline':False]
['text':' need to traverse the tree again on the next iteration of the optimize() loop (see','line_number':334,'multiline':False]
['text':' conditions above which erase from _redundant).','line_number':335,'multiline':False]
['text':' Check to see if our flattened composition consists of constant branches containing only','line_number':345,'multiline':False]
['text':' Field and Keep elements. If we have duplicate Field branches then retain only the','line_number':346,'multiline':False]
['text':' latest one. For example:','line_number':347,'multiline':False]
['text':'      (Field "a" ConstPath1) * (Field "b" ConstPath2) * Keep "a" -> Field "a" ConstPath1','line_number':348,'multiline':False]
['text':'      (Field "a" ConstPath1) * (Field "a" ConstPath2) -> Field "a" ConstPath2','line_number':349,'multiline':False]
['text':' TODO: handle Drop elements.','line_number':350,'multiline':False]
['text':' Latest value per field.','line_number':352,'multiline':False]
['text':' Used to preserve the relative order in which fields are set on the result.','line_number':354,'multiline':False]
['text':' Rewrite is valid only with constant paths.','line_number':373,'multiline':False]
['text':' Overwrite field with the latest value.','line_number':377,'multiline':False]
['text':' This loop checks to see if we can delete any field values depending on if they are','line_number':384,'multiline':False]
['text':' kept by this PathKeep.','line_number':385,'multiline':False]
['text':' Field is not kept, erase.','line_number':388,'multiline':False]
['text':' Field is kept, we can leave the value of the field.','line_number':392,'multiline':False]
['text':' This loop finds the intersection between fields kept by any previous PathKeeps','line_number':399,'multiline':False]
['text':' and the current PathKeep.','line_number':400,'multiline':False]
['text':' Field was not previously kept, so there is no such field to keep anymore.','line_number':403,'multiline':False]
['text':' Field was kept by a previous PathKeep.','line_number':407,'multiline':False]
['text':' Skip over PathDefault with an empty object since our input is already an object.','line_number':416,'multiline':False]
['text':' Skip over other PathDefaults but remember we had one.','line_number':419,'multiline':False]
['text':' Check if we assign to every field we keep. If so, drop dependence on input.','line_number':428,'multiline':False]
['text':' Do not need the input, do not keep fields, and ignore defaults.','line_number':437,'multiline':False]
['text':' We may have removed the field name by virtue of not keeping.','line_number':458,'multiline':False]
['text':' If we are evaluating const path then we can simply replace the whole expression with the','line_number':473,'multiline':False]
['text':' result.','line_number':474,'multiline':False]
['text':' Pull out the constant out of the path','line_number':476,'multiline':False]
['text':' And swap it for the current node','line_number':479,'multiline':False]
['text':' An input to 'this' EvalPath expression is another EvalPath so we may try to fuse the','line_number':484,'multiline':False]
['text':' paths.','line_number':485,'multiline':False]
['text':' We have fused paths so replace the input (by making a copy).','line_number':487,'multiline':False]
['text':' Compose immediate EvalPath input.','line_number':493,'multiline':False]
['text':' If we are evaluating const path then we can simply replace the whole expression with the','line_number':513,'multiline':False]
['text':' result.','line_number':514,'multiline':False]
['text':' Pull out the constant out of the path','line_number':516,'multiline':False]
['text':' And swap it for the current node','line_number':519,'multiline':False]
['text':' An input to 'this' EvalFilter expression is another EvalPath so we may try to fuse the','line_number':524,'multiline':False]
['text':' paths.','line_number':525,'multiline':False]
['text':' We have fused paths so replace the input (by making a copy).','line_number':527,'multiline':False]
['text':' namespace mongo::optimizer','line_number':538,'multiline':False]
