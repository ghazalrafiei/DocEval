['text':'*
 *    Copyright (C) 2023-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' Hypothetical MQL which could generate this ABT:','line_number':47,'multiline':False]
['text':'   db.c1.aggregate([{$unionWith: {coll: "c2", pipeline: [{$match: {}}]}}])','line_number':48,'multiline':False]
['text':' Sharded on {a: 1}','line_number':64,'multiline':False]
['text':'exists','line_number':66,'multiline':True]
['text':'ce','line_number':67,'multiline':True]
['text':' Sharded on {b: 1}','line_number':77,'multiline':False]
['text':'exists','line_number':79,'multiline':True]
['text':'ce','line_number':80,'multiline':True]
['text':'costModel','line_number':89,'multiline':True]
['text':'debugMode','line_number':90,'multiline':True]
['text':'debugLevel','line_number':90,'multiline':True]
['text':' Note the evaluation node to project the shard key and filter node to perform shard filtering.','line_number':95,'multiline':False]
['text':' Common setup function to construct optimizer metadata with no indexes and invoke optimization','line_number':110,'multiline':False]
['text':' given a physical plan and sharding metadata. Returns the optimized plan.','line_number':111,'multiline':False]
['text':' Shard keys guarentee non-multikeyness of all their components. In some cases, there might not','line_number':116,'multiline':False]
['text':' be an index backing the shard key. So to make use of the multikeyness data of the shard key,','line_number':117,'multiline':False]
['text':' we populate the multikeyness trie.','line_number':118,'multiline':False]
['text':'exists','line_number':131,'multiline':True]
['text':'ce','line_number':132,'multiline':True]
['text':'costModel','line_number':141,'multiline':True]
['text':'debugMode','line_number':142,'multiline':True]
['text':'debugLevel','line_number':142,'multiline':True]
['text':' The fields of the shard key are extracted in the physical scan.','line_number':156,'multiline':False]
['text':' The top-level of each field's path is pushed down into the physical scan, and the rest of','line_number':173,'multiline':False]
['text':' the path is obtained with an evaluation node.','line_number':174,'multiline':False]
['text':' Sharded on {a.b.c: 1, a.b.d:1}','line_number':223,'multiline':False]
['text':' Only the top level of shared paths is currently pushed down into the physical scan.','line_number':228,'multiline':False]
['text':' TODO SERVER-79435: Factor out a shared path to the greatest extent possible (e.g. 'a.b'','line_number':229,'multiline':False]
['text':' rather than just 'a').','line_number':230,'multiline':False]
['text':'costModel','line_number':289,'multiline':True]
['text':'debugMode','line_number':290,'multiline':True]
['text':'debugLevel','line_number':290,'multiline':True]
['text':' Assert plan structure contains NLJ with in index scan on left and shard filter + seek on the','line_number':294,'multiline':False]
['text':' right.','line_number':295,'multiline':False]
['text':' NOLINT','line_number':296,'multiline':False]
['text':' Sharded on {a.b.c: 1, a.b.d:1}','line_number':315,'multiline':False]
['text':'exists','line_number':327,'multiline':True]
['text':'ce','line_number':328,'multiline':True]
['text':'costModel','line_number':340,'multiline':True]
['text':'debugMode','line_number':341,'multiline':True]
['text':'debugLevel','line_number':341,'multiline':True]
['text':' Assert top level field of shard key is pushed down into the SeekNode.','line_number':345,'multiline':False]
['text':' NOLINT','line_number':346,'multiline':False]
['text':' Hypothetical MQL which could generate this ABT: {$match: {a: 1}}','line_number':374,'multiline':False]
['text':' Shard key {a: 1, b: 1};','line_number':379,'multiline':False]
['text':' Projections on 'a' and 'b' pushed down into PhysicalScan and used as args to 'shardFilter()'.','line_number':385,'multiline':False]
['text':' {$match: {"a.b": {$gt: 1}}}','line_number':402,'multiline':False]
['text':' Shard key {'a.b': 1}','line_number':409,'multiline':False]
['text':' Push down projection on 'a' into PhysicalScan and use that stream to project 'b' to use as','line_number':413,'multiline':False]
['text':' input to 'shardFilter()'. This avoids explicitly projecting 'a.b' from the root projection.','line_number':414,'multiline':False]
['text':' Make predicates on PathGet[a] very selective to prefer IndexScan plan over collection scan.','line_number':442,'multiline':False]
['text':'exists','line_number':461,'multiline':True]
['text':'ce','line_number':462,'multiline':True]
['text':'costModel','line_number':465,'multiline':True]
['text':'debugMode','line_number':466,'multiline':True]
['text':'debugLevel','line_number':466,'multiline':True]
['text':' The shard filter is performed on the index side of the NLJ and pushed the projection into the','line_number':473,'multiline':False]
['text':' index scan.','line_number':474,'multiline':False]
['text':' NOLINT','line_number':475,'multiline':False]
['text':'exists','line_number':511,'multiline':True]
['text':'ce','line_number':512,'multiline':True]
['text':'costModel','line_number':514,'multiline':True]
['text':'debugMode','line_number':515,'multiline':True]
['text':'debugLevel','line_number':515,'multiline':True]
['text':' NOLINT','line_number':520,'multiline':False]
['text':' No seek required.','line_number':525,'multiline':False]
['text':' Make predicates on PathGet[a] very selective to prefer IndexScan plan over collection scan.','line_number':545,'multiline':False]
['text':'exists','line_number':564,'multiline':True]
['text':'ce','line_number':565,'multiline':True]
['text':'costModel','line_number':568,'multiline':True]
['text':'debugMode','line_number':569,'multiline':True]
['text':'debugLevel','line_number':569,'multiline':True]
['text':' Shard key {a: 1, b: 1} and index on {a: 1} means that shard filtering must occur on the seek','line_number':576,'multiline':False]
['text':' side.','line_number':577,'multiline':False]
['text':' NOLINT','line_number':578,'multiline':False]
['text':' Make predicates on PathGet[a] PathGet [b] very selective to prefer IndexScan plan over','line_number':601,'multiline':False]
['text':' collection scan.','line_number':602,'multiline':False]
['text':'exists','line_number':625,'multiline':True]
['text':'ce','line_number':626,'multiline':True]
['text':'costModel','line_number':629,'multiline':True]
['text':'debugMode','line_number':630,'multiline':True]
['text':'debugLevel','line_number':630,'multiline':True]
['text':' Shard key {"a.b": 1} and index on {"a.b": 1, "a.c": 1}','line_number':637,'multiline':False]
['text':' The index scan produces the projections for "a.b" to perform shard filtering.','line_number':638,'multiline':False]
['text':' NOLINT','line_number':639,'multiline':False]
['text':' Shard key: {a: 1}','line_number':654,'multiline':False]
['text':' Index: {a: 1, b: 1} -> multikey on b','line_number':655,'multiline':False]
['text':' Query: {$match: {a: {$gt: 2}, b: {$gt: 3}}}','line_number':656,'multiline':False]
['text':'exists','line_number':689,'multiline':True]
['text':'ce','line_number':690,'multiline':True]
['text':'costModel','line_number':693,'multiline':True]
['text':'debugMode','line_number':694,'multiline':True]
['text':'debugLevel','line_number':694,'multiline':True]
['text':' Ensure that we perform the shard filter using a projection from the index scan.','line_number':701,'multiline':False]
['text':' NOLINT','line_number':702,'multiline':False]
['text':' Query: {$match: {a: 1, b: 1}}','line_number':722,'multiline':False]
['text':' Shard key {a: 1}','line_number':728,'multiline':False]
['text':' No shard filter in the plan.','line_number':732,'multiline':False]
['text':' NOLINT','line_number':733,'multiline':False]
['text':' Query: {$match: {a: 1, b: 1}}','line_number':751,'multiline':False]
['text':' Shard key {a: 1}','line_number':758,'multiline':False]
['text':' No shard filter in the plan.','line_number':762,'multiline':False]
['text':' NOLINT','line_number':763,'multiline':False]
['text':' Query: {$match: {a: 1, b: 1}}','line_number':781,'multiline':False]
['text':' Shard key {a: 1, b: 1}','line_number':787,'multiline':False]
['text':' No shard filter in the plan.','line_number':793,'multiline':False]
['text':' NOLINT','line_number':794,'multiline':False]
['text':' Query: {$match: {a: 1}}','line_number':811,'multiline':False]
['text':' Shard key {a: 1, b: 1}','line_number':816,'multiline':False]
['text':' These is a shard filter in the plan.','line_number':822,'multiline':False]
['text':' NOLINT','line_number':823,'multiline':False]
['text':' Query: {$match: {"a.b": 1, "a.c": 1, "a.d": {$gt: 1}}}','line_number':840,'multiline':False]
['text':' Shard key {"a.b": 1, "a.c": 1}','line_number':851,'multiline':False]
['text':' No shard filter in the plan.','line_number':857,'multiline':False]
['text':' NOLINT','line_number':858,'multiline':False]
['text':' Query: {$match: {"a.b": 1, "a.c": {$gt: 1}, "a.d": 1}}','line_number':884,'multiline':False]
['text':' Shard key {"a.b": 1, "a.c": 1}','line_number':895,'multiline':False]
['text':' There is shard filter in the plan.','line_number':901,'multiline':False]
['text':' NOLINT','line_number':902,'multiline':False]
['text':' Query: {$match: {a: 1, b: 1}}','line_number':942,'multiline':False]
['text':' Shard key {a: 'hashed'}','line_number':948,'multiline':False]
['text':' No shard filter in the plan.','line_number':952,'multiline':False]
['text':' NOLINT','line_number':953,'multiline':False]
['text':' Query: {a: {$gt: 1}}','line_number':973,'multiline':False]
['text':' Shard key: {a: 1}','line_number':980,'multiline':False]
['text':'exists','line_number':996,'multiline':True]
['text':'ce','line_number':997,'multiline':True]
['text':'costModel','line_number':999,'multiline':True]
['text':'debugMode','line_number':1000,'multiline':True]
['text':'debugLevel','line_number':1000,'multiline':True]
['text':' Fully explore search space to enumerate all alternatives to verify the RIDIntersect rewrite','line_number':1002,'multiline':False]
['text':' enumerated the rewrites we expected.','line_number':1003,'multiline':False]
['text':' Examine the memo to verify that there are alternatives in which RemoveOrphansRequirement is','line_number':1010,'multiline':False]
['text':' pushed down into the left and right child groups.','line_number':1011,'multiline':False]
['text':' Get the ID of the group which performs the RIDIntersect.','line_number':1014,'multiline':False]
['text':' Get the result of optimization of this RIDIntersect group when optimized with','line_number':1027,'multiline':False]
['text':' RemoveOrphansRequirement{true}.','line_number':1028,'multiline':False]
['text':' Keep track whether we've seen alternatives that push the RemoveOrphansRequirement into the','line_number':1039,'multiline':False]
['text':' left and right child respectively.','line_number':1040,'multiline':False]
['text':' Put all alternatives in the same vector to iterate over them.','line_number':1044,'multiline':False]
['text':' We don't care about alternatives that don't use the index.','line_number':1050,'multiline':False]
['text':' Get physical node id of left and right children.','line_number':1055,'multiline':False]
['text':' Examine whether the left and right children are optimized with RemoveOrphansRequirement.','line_number':1058,'multiline':False]
['text':' RemoveOrphansRequirement should only be pushed down to one child.','line_number':1063,'multiline':False]
['text':' Assert that both alternatives exist in the memo.','line_number':1071,'multiline':False]
['text':' Sharded on {a: "hashed", b: 1}','line_number':1078,'multiline':False]
['text':' namespace','line_number':1094,'multiline':False]
['text':' namespace mongo::optimizer','line_number':1095,'multiline':False]
