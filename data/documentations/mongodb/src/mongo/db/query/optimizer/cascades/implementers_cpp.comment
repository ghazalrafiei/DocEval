['text':'*
 *    Copyright (C) 2022-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' IWYU pragma: keep','line_number':52,'multiline':False]
['text':' Checks that all leaves of the expression are equalities. This would indicate that we could use','line_number':95,'multiline':False]
['text':' SortedMerge and MergeJoin to produce a stream of sorted RIDs, allowing us to potentially','line_number':96,'multiline':False]
['text':' deduplicate with a streaming Unique.','line_number':97,'multiline':False]
['text':' We shouldn't use a SortedMerge for a singleton disjunction, because with one child there is','line_number':124,'multiline':False]
['text':' nothing to sort-merge.','line_number':125,'multiline':False]
['text':' Returns true if the given index contains entries for every component of the given shard key. For','line_number':129,'multiline':False]
['text':' each component of the shard key, ensures that the given FieldProjectionMap contains an entry for','line_number':130,'multiline':False]
['text':' it. Note that projections pushed down into the index scan have keys that encode the position of','line_number':131,'multiline':False]
['text':' the component in the index specification; for example, for an index {a: 1, "b.c": 1}, the "b.c"','line_number':132,'multiline':False]
['text':' projection is encoded as "<indexKey> 1" rather than "b.c". For this reason, this function also','line_number':133,'multiline':False]
['text':' populates 'shardKeyProjections' with the projection names generated and inserted into','line_number':134,'multiline':False]
['text':' 'indexProjections'; the i'th entry in 'shardKeyProjections' corresponds to the projection name','line_number':135,'multiline':False]
['text':' representing the i'th component of the shard key.','line_number':136,'multiline':False]
['text':' If the index does not cover the shard key, this function returns false.','line_number':137,'multiline':False]
['text':' Builds filter node required to perform shard filtering on top of IndexScan. The function assumes','line_number':168,'multiline':False]
['text':' that 'builder' contains an IndexScanNode with 'fieldProjections' for each component of the shard','line_number':169,'multiline':False]
['text':' key.','line_number':170,'multiline':False]
['text':' Keep track of paths in the  the components of the shard key that have equality predicates on','line_number':189,'multiline':False]
['text':' them.','line_number':190,'multiline':False]
['text':' If the interval for this requirement is an equality, add it to the set.','line_number':196,'multiline':False]
['text':' Ensure that all components of the shard key have an equality predicate.','line_number':210,'multiline':False]
['text':'*
 * Takes a logical node and required physical properties, and creates zero or more physical subtrees
 * that can implement that logical node while satisfying those properties.
 *
 * The input logical node is expected to come from a Memo, which means its immediate children are
 * 'MemoLogicalDelegator' nodes (because each logical node lives in a separate Group).
 *
 * The physical plans are output by adding 'PhysRewriteEntry' entries to '_queue'. Each entry must
 * contain:
 * - a tree of physical nodes, with logical(!) delegator nodes as the leaves.
 * - a cardinality estimate for each physical node.
 * - the physical properties that we require for each logical leaf.
 ','line_number':219,'multiline':True]
['text':'n','line_number':234,'multiline':True]
['text':' Cannot satisfy limit-skip.','line_number':236,'multiline':False]
['text':' Regular scan cannot satisfy any collation requirement.','line_number':240,'multiline':False]
['text':' TODO: consider rid?','line_number':241,'multiline':False]
['text':' At this point cannot only satisfy index-only.','line_number':249,'multiline':False]
['text':' Fall through to code below.','line_number':256,'multiline':False]
['text':' Fall through to code below.','line_number':263,'multiline':False]
['text':' Handle complete indexing requirement.','line_number':270,'multiline':False]
['text':' Regular scan node can satisfy only using its root or rid projections (not','line_number':293,'multiline':False]
['text':' fields).','line_number':294,'multiline':False]
['text':' If shard filtering is necessary, do up-front prep to push top-level fields down into the','line_number':299,'multiline':False]
['text':' scan.','line_number':300,'multiline':False]
['text':' Construct the Seek or Scan Node','line_number':315,'multiline':False]
['text':' If optimizing a Seek, override CE to 1.0.','line_number':317,'multiline':False]
['text':' If needed, add EvaluationNodes to collect the shard key from dotted paths.','line_number':330,'multiline':False]
['text':' Optimize the plan','line_number':341,'multiline':False]
['text':'childProps','line_number':348,'multiline':True]
['text':' Cannot satisfy limit-skip.','line_number':354,'multiline':False]
['text':' Cannot satisfy any collation requirement.','line_number':358,'multiline':False]
['text':' We cannot provide RID.','line_number':373,'multiline':False]
['text':' Unwind the combined array constant and pick an element for each required projection','line_number':404,'multiline':False]
['text':' in sequence.','line_number':405,'multiline':False]
['text':'retainNonArrays','line_number':409,'multiline':True]
['text':' Iterate over the bound projections here as opposed to the required projections, since','line_number':417,'multiline':False]
['text':' the array elements are ordered accordingly. Skip over the first element (this is the','line_number':418,'multiline':False]
['text':' row id).','line_number':419,'multiline':False]
['text':' Obtain row id from first element of the array.','line_number':433,'multiline':False]
['text':'n','line_number':447,'multiline':True]
['text':'node','line_number':447,'multiline':True]
['text':' We cannot satisfy here.','line_number':454,'multiline':False]
['text':' Reject if under indexing requirements and now we introduce dependence on scan','line_number':460,'multiline':False]
['text':' projection.','line_number':461,'multiline':False]
['text':' Add projections we depend on to the requirement.','line_number':466,'multiline':False]
['text':' Special case of evaluation node: rebinds to a different variable.','line_number':479,'multiline':False]
['text':' Update required projections.','line_number':484,'multiline':False]
['text':' Update the collation specification to use the input variable.','line_number':492,'multiline':False]
['text':' Update the distribution specification to use the input variable;','line_number':502,'multiline':False]
['text':' We cannot satisfy distribution on the projection we output.','line_number':518,'multiline':False]
['text':' In general, we cannot satisfy collation on the projection we output.','line_number':522,'multiline':False]
['text':' TODO consider x = y+1, we can propagate the collation requirement from x to y.','line_number':523,'multiline':False]
['text':' We do not require the projection. Do not place a physical evaluation node and','line_number':527,'multiline':False]
['text':' continue optimizing the child.','line_number':528,'multiline':False]
['text':' Remove our projection from requirement, and add projections we depend on to the','line_number':534,'multiline':False]
['text':' requirement.','line_number':535,'multiline':False]
['text':' Reject if under indexing requirements and now we introduce dependence on scan','line_number':540,'multiline':False]
['text':' projection.','line_number':541,'multiline':False]
['text':' Cannot satisfy limit-skip.','line_number':556,'multiline':False]
['text':' To optimize a sargable predicate, we must have the scan group as a child.','line_number':564,'multiline':False]
['text':' We do not check indexDefs to be empty here. We want to allow evaluations to be covered','line_number':572,'multiline':False]
['text':' via a physical scan even in the absence of indexes.','line_number':573,'multiline':False]
['text':' PhysicalScan or Seek cannot satisfy any collation requirement.','line_number':612,'multiline':False]
['text':' TODO: consider rid?','line_number':613,'multiline':False]
['text':' We can only satisfy partial schema requirements using our root projection.','line_number':619,'multiline':False]
['text':' Deliver root projection if required.','line_number':636,'multiline':False]
['text':' Unknown projections remain. Reject.','line_number':644,'multiline':False]
['text':' Consider all candidate indexes, and check if they satisfy the collation and','line_number':674,'multiline':False]
['text':' distribution requirements.','line_number':675,'multiline':False]
['text':' Consider only indexes for which we satisfy partial requirements.','line_number':683,'multiline':False]
['text':' Failed to satisfy collation requirement.','line_number':705,'multiline':False]
['text':' Ensure that the current index under consideration can cover all components of','line_number':716,'multiline':False]
['text':' the shard key and 'indexProjectionMap' has entries for all components of the','line_number':717,'multiline':False]
['text':' shard key.','line_number':718,'multiline':False]
['text':' Compute the selectivities of predicates covered by index bounds and by residual','line_number':730,'multiline':False]
['text':' predicates.','line_number':731,'multiline':False]
['text':' Compute the selectivity of the indexed requirements by excluding reqs tracked','line_number':745,'multiline':False]
['text':' in 'residIndexes'.','line_number':746,'multiline':False]
['text':'*
                 * The following logic determines whether we need a unique stage to deduplicate the
                 * RIDs returned by the query. If the caller doesn't need unique RIDs then you don't
                 * need to provide them. if the index is non-multikey there are no duplicates. If
                 * there is more than one interval in the BoolExpr, then the helper method that is
                 * called currently creates Groupby+Union which will already deduplicate. Finally,
                 * if there is only one interval, but it's a point interval, then the index won't
                 * have duplicates.
                 *
                 * If there is more than one equality prefix, and any of them needs a unique stage,
                 * we add one after we translate the combined eqPrefix plan.
                 ','line_number':786,'multiline':True]
['text':' For now we only use SortedMerge for one equality prefix. We also check the field','line_number':800,'multiline':False]
['text':' projections for information about whether we need a GroupBy to perform','line_number':801,'multiline':False]
['text':' aggregations, in which case a unique is unnecessary and therefore a SortedMerge','line_number':802,'multiline':False]
['text':' is not needed. `canReturnSortedOutput` tells us if we have more than one','line_number':803,'multiline':False]
['text':' predicate, and if all of these predicates are equalities.','line_number':804,'multiline':False]
['text':' If we have decided to use SortedMerge and we need a unique stage, skip this check','line_number':810,'multiline':False]
['text':' because we will not produce GroupBys to dedup. We always need the Unique.','line_number':811,'multiline':False]
['text':' TODO: consider pre-computing in "computeCandidateIndexes()".','line_number':813,'multiline':False]
['text':' Compute reversing per equality prefix.','line_number':830,'multiline':False]
['text':'currentEqPrefixIndex','line_number':845,'multiline':True]
['text':' Insert unique stage if we need to, after the residual requirements.','line_number':863,'multiline':False]
['text':' Add top level fields of the shard key to the fieldProjectionMap used to create','line_number':910,'multiline':False]
['text':' the PhysicalScan.','line_number':911,'multiline':False]
['text':' Return a physical scan with field map.','line_number':929,'multiline':False]
['text':' Try Seek with Limit 1.','line_number':939,'multiline':False]
['text':'indexPredSels','line_number':951,'multiline':True]
['text':' Insert evaluation nodes to project the fields of the shard key if we couldn't push','line_number':957,'multiline':False]
['text':' them down to the PhysicalScan and insert a FilterNode which performs shard filtering.','line_number':958,'multiline':False]
['text':'n','line_number':977,'multiline':True]
['text':' Reject if we do not have any indexes.','line_number':984,'multiline':False]
['text':' Cannot satisfy limit-skip.','line_number':991,'multiline':False]
['text':' This is a special RIDIntersectNode that has the Scan as its right child and has all','line_number':1014,'multiline':False]
['text':' predicates in its left child. We should optimize only the left child to support','line_number':1015,'multiline':False]
['text':' covering queries.','line_number':1016,'multiline':False]
['text':' We need to have proper intervals on both sides.','line_number':1033,'multiline':False]
['text':' Cannot satisfy unknown or round-robin distributions.','line_number':1043,'multiline':False]
['text':' Split required projections between inner and outer side.','line_number':1061,'multiline':False]
['text':' If we are performing an intersection we need to obtain rids from both sides.','line_number':1065,'multiline':False]
['text':' Split collation between inner and outer side.','line_number':1098,'multiline':False]
['text':' We are propagating the distribution requirements to both sides.','line_number':1104,'multiline':False]
['text':' Add repeated execution property to inner side.','line_number':1127,'multiline':False]
['text':' If we are not changing the distributions, both the left and right children need to','line_number':1178,'multiline':False]
['text':' have it available. For example, if optimizing under HashPartitioning on "var1", we','line_number':1179,'multiline':False]
['text':' need to check that this distribution is available in both child groups. If not, and','line_number':1180,'multiline':False]
['text':' it is available in one group, we can try replicating the other group (below).','line_number':1181,'multiline':False]
['text':' If optimizing the seek side specifically, we allow for a RoundRobin distribution','line_number':1182,'multiline':False]
['text':' which can match a collection with UnknownPartitioning.','line_number':1183,'multiline':False]
['text':' Nothing more to do for Complete target. The index side needs to be collocated with','line_number':1188,'multiline':False]
['text':' the seek side.','line_number':1189,'multiline':False]
['text':' Specifically for index intersection, try propagating the requirement on one','line_number':1193,'multiline':False]
['text':' side and replicating the other.','line_number':1194,'multiline':False]
['text':'n','line_number':1222,'multiline':True]
['text':' Reject if we do not have any indexes.','line_number':1228,'multiline':False]
['text':' Cannot satisfy limit-skip.','line_number':1235,'multiline':False]
['text':' We allow target to be either Index or Complete.','line_number':1243,'multiline':False]
['text':' We need to have proper intervals on both sides.','line_number':1261,'multiline':False]
['text':' For now we allow only centralized distribution.','line_number':1268,'multiline':False]
['text':' Require left and right children share the projection names. The RID projection name needs','line_number':1272,'multiline':False]
['text':' to be preserved for RID deduplication.','line_number':1273,'multiline':False]
['text':' For now we cannot satisfy collation requirement.','line_number':1281,'multiline':False]
['text':' We are propagating the distribution requirements to both sides.','line_number':1285,'multiline':False]
['text':' Propagate IndexingRequirement, but don't require children to provide deduped RIDs:','line_number':1292,'multiline':False]
['text':' if the consumer needs deduped RIDs, then we construct a Unique node anyway, to handle any','line_number':1293,'multiline':False]
['text':' RIDs that appear in both children.','line_number':1294,'multiline':False]
['text':'dedupRID','line_number':1298,'multiline':True]
['text':' If 'indexReqTarget' is IndexReqTarget::Complete, the right child might need fetching and','line_number':1300,'multiline':False]
['text':' require RID deduplication.','line_number':1301,'multiline':False]
['text':'dedupRID','line_number':1305,'multiline':True]
['text':' To estimate the physical Union node, we can add the estimates of the left and right','line_number':1324,'multiline':False]
['text':' child. This makes sense because physical Union does not do anything about duplicates:','line_number':1325,'multiline':False]
['text':' it's a bag-union. That's different than the overall CE of the current group, which','line_number':1326,'multiline':False]
['text':' should estimate the cardinality we have after duplicates are removed.','line_number':1327,'multiline':False]
['text':' The consumer doesn't require unique row IDs, so we don't need any Unique stage.','line_number':1342,'multiline':False]
['text':' We cannot satisfy limit-skip requirements.','line_number':1350,'multiline':False]
['text':' For now we only support centralized distribution.','line_number':1356,'multiline':False]
['text':' Add expression references to requirements.','line_number':1380,'multiline':False]
['text':' Split required projections between inner and outer side.','line_number':1386,'multiline':False]
['text':' Split collation between inner and outer side.','line_number':1414,'multiline':False]
['text':'ridProjName','line_number':1416,'multiline':True]
['text':' TODO: consider hash join if the predicate is equality.','line_number':1427,'multiline':False]
['text':'n','line_number':1443,'multiline':True]
['text':' We cannot satisfy limit-skip requirements.','line_number':1445,'multiline':False]
['text':' In general we cannot satisfy collation requirements.','line_number':1449,'multiline':False]
['text':' TODO: This may be possible with a merge sort type of node.','line_number':1450,'multiline':False]
['text':' Only need to propagate the required projection set.','line_number':1454,'multiline':False]
['text':' Optimize each child under the same physical properties.','line_number':1459,'multiline':False]
['text':' We cannot satisfy limit-skip requirements.','line_number':1472,'multiline':False]
['text':' TODO: consider an optimization where we keep track of at most "limit" groups.','line_number':1473,'multiline':False]
['text':' In general we cannot satisfy collation requirements.','line_number':1477,'multiline':False]
['text':' TODO: consider stream group-by.','line_number':1478,'multiline':False]
['text':' We cannot satisfy distribution on the aggregations.','line_number':1484,'multiline':False]
['text':' We are constrained in terms of distribution only if we are a global or complete agg.','line_number':1492,'multiline':False]
['text':' Cannot satisfy unknown or round-robin partitioning.','line_number':1500,'multiline':False]
['text':' We can only be partitioned on projections on which we group.','line_number':1511,'multiline':False]
['text':' For range partitioning we need to be partitioned exactly in the same','line_number':1520,'multiline':False]
['text':' order as our group-by projections.','line_number':1521,'multiline':False]
['text':' TODO: remove RepetitionEstimate if the subtree does not use bound variables.','line_number':1533,'multiline':False]
['text':' TODO: this is not the case for stream group-by.','line_number':1534,'multiline':False]
['text':' Specifically do not propagate limit-skip.','line_number':1536,'multiline':False]
['text':' Iterate over the aggregation expressions and only add those required.','line_number':1541,'multiline':False]
['text':' We require this agg expression.','line_number':1556,'multiline':False]
['text':' Add all references this expression requires.','line_number':1561,'multiline':False]
['text':' We cannot satisfy distribution on the unwound output, or pid.','line_number':1585,'multiline':False]
['text':' We cannot satisfy collation on the output.','line_number':1589,'multiline':False]
['text':' Cannot satisfy limit-skip.','line_number':1593,'multiline':False]
['text':' Specifically do not propagate limit-skip.','line_number':1601,'multiline':False]
['text':' Keep collation property if given it does not affect output.','line_number':1603,'multiline':False]
['text':'n','line_number':1612,'multiline':True]
['text':' We can only pick up collation under centralized (but we can enforce under any','line_number':1616,'multiline':False]
['text':' distribution).','line_number':1617,'multiline':False]
['text':'n','line_number':1626,'multiline':True]
['text':' We can pick-up limit-skip under any distribution (but enforce under centralized or','line_number':1627,'multiline':False]
['text':' replicated).','line_number':1628,'multiline':False]
['text':' Continue with new unenforced requirement.','line_number':1641,'multiline':False]
['text':'n','line_number':1652,'multiline':True]
['text':'n','line_number':1680,'multiline':True]
['text':'node','line_number':1680,'multiline':True]
['text':' For each equality prefix, keep track if we can match against forward or backward','line_number':1718,'multiline':False]
['text':' direction.','line_number':1719,'multiline':False]
['text':' We are not constrained. Both forward and reverse available for each eq prefix.','line_number':1731,'multiline':False]
['text':' Add result for first equality prefix.','line_number':1736,'multiline':False]
['text':' Verify the index is compatible with our collation requirement, and can deliver the right','line_number':1750,'multiline':False]
['text':' order of paths. Note: we are iterating to index one past the size. We assume there is an','line_number':1751,'multiline':False]
['text':' implicit rid index field which is collated in increasing order.','line_number':1752,'multiline':False]
['text':' No bound projection for this index field.','line_number':1767,'multiline':False]
['text':' We cannot satisfy the rest of the collation requirements.','line_number':1769,'multiline':False]
['text':' We do not need to collate this field because of equality.','line_number':1779,'multiline':False]
['text':' We can satisfy the next collation requirement independent of','line_number':1781,'multiline':False]
['text':' collation op.','line_number':1782,'multiline':False]
['text':' Cannot satisfy collation if we have a compound predicate on this field.','line_number':1790,'multiline':False]
['text':' If we fall through here, we are trying to satisfy a trailing collation','line_number':1807,'multiline':False]
['text':' requirement on rid.','line_number':1808,'multiline':False]
['text':' Pad result to match the number of prefixes. Allow forward and back by default.','line_number':1830,'multiline':False]
['text':'*
     * Check if we are under index-only requirements and expression introduces dependency on scan
     * projection.
     ','line_number':1835,'multiline':True]
['text':' We can satisfy Seek with RoundRobin if we can scan the collection in','line_number':1871,'multiline':False]
['text':' parallel.','line_number':1872,'multiline':False]
['text':' TODO: Are two round robin distributions compatible?','line_number':1876,'multiline':False]
['text':' We cannot satisfy unknown partitioning with an index as (unlike parallel','line_number':1881,'multiline':False]
['text':' collection scan) we currently cannot perform a parallel index scan.','line_number':1882,'multiline':False]
['text':' Need to reverse the left and right side as the left collation split is not valid, or','line_number':1954,'multiline':False]
['text':' to use the larger CE as the other side.','line_number':1955,'multiline':False]
['text':'isIndex','line_number':1956,'multiline':True]
['text':' Try a merge join on RID since both of our children only have equality','line_number':1977,'multiline':False]
['text':' predicates.','line_number':1978,'multiline':False]
['text':' Add collation requirement on rid to both sides if needed.','line_number':1983,'multiline':False]
['text':'dedupRID','line_number':1997,'multiline':True]
['text':'dedupRID','line_number':1999,'multiline':True]
['text':' Try a HashJoin. Propagate dedupRID on left and right indexing','line_number':2021,'multiline':False]
['text':' requirements.','line_number':2022,'multiline':False]
['text':'dedupRID','line_number':2031,'multiline':True]
['text':'dedupRID','line_number':2033,'multiline':True]
['text':' We can only attempt this strategy if we have no collation requirements.','line_number':2055,'multiline':False]
['text':' Try a Union+GroupBy. left and right indexing requirements are already','line_number':2059,'multiline':False]
['text':' initialized to not dedup.','line_number':2060,'multiline':False]
['text':'*
     * Optimize the RIDIntersect node. If RemoveOrphansRequirement is set to 'true,' this function
     * will try an optimization in which the requirement is set on only one child at a time. If the
     * requirement is 'false', the function simply optimizes the children as normal.
     ','line_number':2109,'multiline':True]
['text':' If RemoveOrphansRequirement is already 'false', do not try any other variations.','line_number':2128,'multiline':False]
['text':' Perform copies so we can modify the props.','line_number':2148,'multiline':False]
['text':' Correct the cost of the inner side of the NLJ to account for the fact that the Seek side','line_number':2169,'multiline':False]
['text':' is responsible for filtering orphans and thus will encounter more documents than its CE','line_number':2170,'multiline':False]
['text':' indicates. This adjustment allows to prefer plans which perform shard filtering on the','line_number':2171,'multiline':False]
['text':' index side if possible, resulting in fewer calls to Seek.','line_number':2172,'multiline':False]
['text':' We don't own any of those:','line_number':2193,'multiline':False]
['text':' namespace mongo::optimizer::cascades','line_number':2232,'multiline':False]
