['text':'*
 *    Copyright (C) 2022-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 * A Variable is 'resolved' when it is associated with a Definition.
 ','line_number':46,'multiline':True]
['text':'*
 * While analyzing an ABT tree via the Collector transport class, there is a need
 * for state that is 'global' for the duration of the analysis and is accessible to
 * all Collector::transport methods. This class represents such a state.
 * Notice:
 * This is a struct instead of simple 'using' because at least one more future task
 * will add more state to it - namely, SERVER-80954.
 ','line_number':54,'multiline':True]
['text':'*
     * All resolved variables, regardless of visibility in the ABT.
     ','line_number':63,'multiline':True]
['text':'*
 * Information collected by each Collector::transport method for each ABT node in a tree.
 * The Collector passes the CollectedInfo of a node's children to the parent's node
 * transport method, where the child/children CollectedInfo is typically merged into
 * the parent's CollectedInfo.
 ','line_number':69,'multiline':True]
['text':'*
     * Current definitions available for use in ancestor nodes (projections).
     ','line_number':80,'multiline':True]
['text':'*
     * All free variables (i.e. so far not resolved) seen so far, regardless of visibility in the
     * ABT. Maps from projection name to all Variable instances referencing that name. Variables
     * move from 'freeVars' to 'Collector::resolvedVariables' when they are resolved.
     ','line_number':85,'multiline':True]
['text':'*
     * Maps from a node to the definitions (projections) available for use in its ancestor nodes.
     ','line_number':92,'multiline':True]
['text':'*
     * The collector transport class stores global information that is updated by some
     * CollectedInfo methods. Hence we need a pointer to the collector.
     ','line_number':97,'multiline':True]
['text':'*
     * This is a destructive merge, the 'other' will be siphoned out.
     ','line_number':103,'multiline':True]
['text':' Incoming (other) info has some definitions. So let's try to resolve our free','line_number':109,'multiline':False]
['text':' variables.','line_number':110,'multiline':False]
['text':' We have some definitions so let try to resolve other's free variables.','line_number':117,'multiline':False]
['text':' There should not be two projections of the same name propagated up by a single operator,','line_number':125,'multiline':False]
['text':' so every definition should be moved from other.','line_number':126,'multiline':False]
['text':' It should be impossible to have duplicate Node pointer so every Node should be moved from','line_number':136,'multiline':False]
['text':' other.','line_number':137,'multiline':False]
['text':'*
     * This is a destructive merge, the 'others' will be siphoned out.
     ','line_number':142,'multiline':True]
['text':'*
     * A special merge asserting that the 'other' has no defined projections. Expressions do not
     * project anything, only Nodes do.
     *
     * We still have to track free variables though.
     ','line_number':151,'multiline':True]
['text':'*
     * Resolve any free Variables matching the given the name with the corresponding definition.
     ','line_number':175,'multiline':True]
['text':'*
 * Walks over all variables in the ABT and calls a callback for each variable.
 ','line_number':192,'multiline':True]
['text':'op','line_number':204,'multiline':True]
['text':'ts','line_number':204,'multiline':True]
['text':'bind','line_number':210,'multiline':True]
['text':'bind','line_number':214,'multiline':True]
['text':'expr','line_number':214,'multiline':True]
['text':' Callback used on each Variable in the ABT.','line_number':219,'multiline':False]
['text':' Callback used on any defined variable name (via a Let or Lambda) in the ABT.','line_number':222,'multiline':False]
['text':' The default behavior resolves free variables, merges known definitions and propagates','line_number':236,'multiline':False]
['text':' them up unmodified.','line_number':237,'multiline':False]
['text':' Every variable starts as a free variable until it is resolved.','line_number':247,'multiline':False]
['text':' Local variables are not part of projections (i.e. we do not track them in defs) so','line_number':261,'multiline':False]
['text':' resolve any free variables manually.','line_number':262,'multiline':False]
['text':' Local variables are not part of projections (i.e. we do not track them in defs) so','line_number':272,'multiline':False]
['text':' resolve any free variables manually.','line_number':273,'multiline':False]
['text':' 'refs' should just track references to projections from any children of a Scan/Seek.','line_number':286,'multiline':False]
['text':'bindResult','line_number':297,'multiline':True]
['text':'bindResult','line_number':301,'multiline':True]
['text':'bindResult','line_number':307,'multiline':True]
['text':'bindResult','line_number':311,'multiline':True]
['text':'bindResult','line_number':317,'multiline':True]
['text':' Make the definition available upstream.','line_number':375,'multiline':False]
['text':'refResult','line_number':388,'multiline':True]
['text':' This is a special case where both children of 'node' have a definition for the scan','line_number':411,'multiline':False]
['text':' projection. Remove the definition from one side to avoid running into the conflict of two','line_number':412,'multiline':False]
['text':' projections with the same name during the merge step below.','line_number':413,'multiline':False]
['text':'resolveFreeVarsWithOther','line_number':417,'multiline':True]
['text':' Handle the collected info for UnionNode and RIDUnionNode, as both of them have their own','line_number':424,'multiline':False]
['text':' binders and references.','line_number':425,'multiline':False]
['text':' Merge children but disregard any defined projections.','line_number':437,'multiline':False]
['text':' Note that refsResult follows the structure as built by buildUnionTypeReferences, meaning','line_number':438,'multiline':False]
['text':' it contains a free variable for each name for each child of the union and no other info.','line_number':439,'multiline':False]
['text':' Manually copy and resolve references of specific child. We do this manually','line_number':442,'multiline':False]
['text':' because each Variable must be resolved by the appropriate child's definition.','line_number':443,'multiline':False]
['text':' Propagate union projections. Note that these are the only defs propagated, since we clear','line_number':458,'multiline':False]
['text':' the child defs before merging above.','line_number':459,'multiline':False]
['text':' We should always preserve the scanDef projection name.','line_number':483,'multiline':False]
['text':' Note correlated projections might be coming either from the left child or from the','line_number':502,'multiline':False]
['text':' parent.','line_number':503,'multiline':False]
['text':' Manually resolve free variables in the right child using the correlated variables','line_number':509,'multiline':False]
['text':' from the left child.','line_number':510,'multiline':False]
['text':' Do not resolve further free variables. We also need to propagate the right child','line_number':518,'multiline':False]
['text':' projections here, since these may be useful to ancestor nodes.','line_number':519,'multiline':False]
['text':'resolveFreeVarsWithOther','line_number':520,'multiline':True]
['text':' Do not resolve further free variables.','line_number':559,'multiline':False]
['text':'resolveFreeVarsWithOther','line_number':560,'multiline':True]
['text':' Do not resolve further free variables.','line_number':576,'multiline':False]
['text':'resolveFreeVarsWithOther','line_number':577,'multiline':True]
['text':' Merge children but disregard any defined projections.','line_number':596,'multiline':False]
['text':' Note that refsResult follows the structure as built by buildUnionTypeReferences, meaning','line_number':597,'multiline':False]
['text':' it contains a free variable for each name for each child of the sorted merge and no other','line_number':598,'multiline':False]
['text':' info.','line_number':599,'multiline':False]
['text':' Manually copy and resolve references of specific child. We do this manually because','line_number':602,'multiline':False]
['text':' each Variable must be resolved by the appropriate child's definition.','line_number':603,'multiline':False]
['text':' Propagate sorted merge projections. Note that these are the only defs propagated, since','line_number':618,'multiline':False]
['text':' we clear the child defs before merging above.','line_number':619,'multiline':False]
['text':' First resolve all variables from the inside point of view; i.e. agg expressions and group','line_number':656,'multiline':False]
['text':' by expressions reference variables from the input child.','line_number':657,'multiline':False]
['text':' Make a copy of 'childResult' as we need it later and 'merge' is destructive.','line_number':660,'multiline':False]
['text':' GroupBy completely masks projected variables; i.e. outside expressions cannot reach','line_number':663,'multiline':False]
['text':' inside the groupby. We will create a brand new set of projections from aggs and gbs here.','line_number':664,'multiline':False]
['text':' First resolve all variables from the inside point of view.','line_number':700,'multiline':False]
['text':' Redefine unwind projection.','line_number':709,'multiline':False]
['text':' Define unwind PID.','line_number':711,'multiline':False]
['text':' Redefine projection.','line_number':828,'multiline':False]
['text':'*
     * The collector transport class stores here global information that is updated by
     * some CollectedInfo methods. This object is passed to each CollectedInfo, so that
     * it can update the collectorState.
     ','line_number':847,'multiline':True]
['text':'*
 * Finds Variable references that are safe to mark moveFrom in SBE. See 'LastRefsSet'.
 ','line_number':858,'multiline':True]
['text':'*
     * Maps each name that occurs free to the set of its last references.
     * If a name has one or more free occurrences, but none are last, then the set is empty.
     * If a name has no free occurrences at all, then there won't be a map entry.
     *
     * This distinction is important when combining results from two subtrees.
     * For example, in 'let a = f(x) in g()', we know that 'x' does not occur in 'g()',
     * so the 'x' in 'f(x)' is a last reference. On other hand in 'let a = f(x) in g(x, x)',
     * 'x' does occur in 'g(x, x)', so the one in 'f(x)' is not a last reference--even if we don't
     * know which use of 'x' in 'g(x, x)' is last.
     ','line_number':862,'multiline':True]
['text':'*
     * Merge results, siphoning out r2 and putting results in r1.
     *
     * Variables that only occur on one side have their last-references preserved.
     * Variables that occur on both sides have their last-references cleared, because we don't know
     * which side is evaluated last.
     ','line_number':877,'multiline':True]
['text':'resetOther','line_number':885,'multiline':True]
['text':'resetBoth','line_number':885,'multiline':True]
['text':'*
     * Same as merge() but accepts a vector; this allows the generic transport() to handle Result
     * and vector<Result> uniformly.
     *
     * Both of these overloads make no assumptions about evaluation order: if a variable occurs in
     * more than one Result then all its last-references are cleared.
     ','line_number':888,'multiline':True]
['text':'*
     * Like merge(), but assumes the left-hand side 'result' will be evaluated after 'other'.
     *
     * This means when a variable occurs on both sides, its last-references in 'result' can be
     * preserved.
     ','line_number':901,'multiline':True]
['text':'resetOther','line_number':908,'multiline':True]
['text':'resetBoth','line_number':908,'multiline':True]
['text':'*
     * Merges variable references from 'other' and keeps the last-references from both sides.
     *
     * This is appropriate when neither side is evaluated after the other. For example the two
     * branches of a conditional.
     ','line_number':911,'multiline':True]
['text':'resetOther','line_number':918,'multiline':True]
['text':'resetBoth','line_number':918,'multiline':True]
['text':'*
     * Combine all the occurrences from 'result' and 'other' into 'result'.
     *
     * The boolean flags control what to do when a variable occurs in both arguments:
     * - 'resetOther' means preserve the last-references of 'result' but clear the ones in 'other'.
     * - 'resetBoth' means clear the last-references flags of both 'result' and 'other'.
     *
     * If both flags are false then all last-references flags are preserved.
     ','line_number':921,'multiline':True]
['text':' This variable is referenced in both sets.','line_number':933,'multiline':False]
['text':' If requested, stop treating occurrences in 'other' as last references.','line_number':935,'multiline':False]
['text':' Combine the last references from each side.','line_number':940,'multiline':False]
['text':' Each side may contribute zero or more.','line_number':941,'multiline':False]
['text':' If requested, stop treating occurrences in the combined set as last references.','line_number':945,'multiline':False]
['text':' This variable is only referenced in 'other', so preserve its last-references.','line_number':950,'multiline':False]
['text':' Preserve it by not erasing: we'll combine these not-erased entries at the end.','line_number':951,'multiline':False]
['text':' Combine all the not-erased map entries.','line_number':955,'multiline':False]
['text':'*
     * Should be called once we know that we've seen all occurrences of a variable: removes all
     * information about this variable from 'result', and records the last-references in the global
     * set '_lastRefs'.
     ','line_number':959,'multiline':True]
['text':' Since we currently only track last-references for local variables, we don't have to','line_number':974,'multiline':False]
['text':' do anything for Nodes.','line_number':975,'multiline':False]
['text':' Every variable starts as a last reference until proven otherwise.','line_number':988,'multiline':False]
['text':' The 'in' portion of the Let will execute after the bind, so its last refs should be kept','line_number':995,'multiline':False]
['text':' over the last refs from the bind. Then, it's safe to finalize the last ref for the','line_number':996,'multiline':False]
['text':' variable defined by the Let here (we know it can't be referenced elsewhere in the ABT).','line_number':997,'multiline':False]
['text':' As in the Let case, we can finalize the last ref for the local variable.','line_number':1005,'multiline':False]
['text':' Only one of the 'then' or 'else' will be executed, so it's safe to union the last refs.','line_number':1015,'multiline':False]
['text':' Since the condition will be executed before either of the then/else, its last refs should','line_number':1016,'multiline':False]
['text':' be reset if there's a collision.','line_number':1017,'multiline':False]
['text':'*
     * The set of Variable occurrences that are safe to move from.
     *
     * We only add to this map once a variable is resolved, because that's when we know we've seen
     * all of its uses.
     ','line_number':1030,'multiline':True]
['text':' Reset the Variable map to the newly computed one.','line_number':1069,'multiline':False]
['text':' namespace mongo::optimizer','line_number':1159,'multiline':False]
