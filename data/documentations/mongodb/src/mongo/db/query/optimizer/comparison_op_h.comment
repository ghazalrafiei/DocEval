['text':'*
 *    Copyright (C) 2023-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' comparison operations ','line_number':38,'multiline':True]
['text':'                                                                                             \
     * In Bonsai, the comparison operators Gt/Gte/Lt/Lte form a total order (they are non-type     \
     * bracketing). This means that for operands of different canonical BSON types, they will use  \
     * the total BSON order to determine the result of the comparison. This is opposed to          \
     * type-bracketing operators which return Nothing when applied to operands of different types. \
     *                                                                                             \
     * NOTE: The SBE stage builders use ABTs as intermediate representations of expressions. In    \
     * this context, the comparison operators have type-bracketing semantics. There is no meaning  \
     * to this, it appears to be a historical accident. The result of this is configurable         \
     * semantics during ABT lowering, see abt_lower.h & `SBEExpressionLowering` for more details.  \
     ','line_number':42,'multiline':True]
['text':' binary operations ','line_number':59,'multiline':True]
['text':' unary operations ','line_number':65,'multiline':True]
['text':' Nothing-handling ','line_number':68,'multiline':True]
['text':' logical operations ','line_number':71,'multiline':True]
['text':'*
 * Flip the argument order of a comparison op.
 *
 * Not to be confused with boolean negation: see 'negateComparisonOp'.
 ','line_number':103,'multiline':True]
['text':'*
 * Negate a comparison op, such that negate(op)(x, y) == not(op(x, y)).
 *
 * If the op is not a comparison, return none.
 * If the op can't be negated (for example EqMember), return none.
 *
 * Not to be confused with flipping the argument order: see 'flipComparisonOp'.
 ','line_number':128,'multiline':True]
['text':' namespace mongo::optimizer','line_number':155,'multiline':False]
