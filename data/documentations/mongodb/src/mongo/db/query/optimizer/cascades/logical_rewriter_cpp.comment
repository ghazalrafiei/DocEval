['text':'*
 *    Copyright (C) 2022-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' IWYU pragma: no_include "ext/alloc_traits.h"','line_number':37,'multiline':False]
['text':' IWYU pragma: keep','line_number':51,'multiline':False]
['text':' If we are performing SargableSplit exploration rewrite, populate helper map.','line_number':93,'multiline':False]
['text':'addExistingNodeWithNewChild','line_number':107,'multiline':True]
['text':' Every memo group that was extended with a new node may have new rewrites that can apply to','line_number':135,'multiline':False]
['text':' it, so enqueue each of these groups to be visited by a rewrite later.','line_number':136,'multiline':False]
['text':' However, if 'addExistingNodeWithNewChild' then don't schedule the 'targetGroupId' for new','line_number':138,'multiline':False]
['text':' rewrites, to avoid applying the same rewrite forever.','line_number':139,'multiline':False]
['text':'hasBelowNodeId','line_number':165,'multiline':True]
['text':'hasBelowNodeId','line_number':170,'multiline':True]
['text':' We don't own this.','line_number':248,'multiline':False]
['text':' Get variables from above node and check if they are bound at below node, or at below node's','line_number':268,'multiline':False]
['text':' child.','line_number':269,'multiline':False]
['text':'computeLastRefs','line_number':274,'multiline':True]
['text':' Variable is exclusively defined in the below node.','line_number':285,'multiline':False]
['text':' Variable is defined in the belowNode's child subtree.','line_number':287,'multiline':False]
['text':' Lambda variable. Ignore.','line_number':299,'multiline':False]
['text':'substitute','line_number':318,'multiline':True]
['text':' Above node refers to a variable bound by below node.','line_number':352,'multiline':False]
['text':'substitute','line_number':390,'multiline':True]
['text':' Prefer to keep conjunction-only PSRs closer to the scan, because (at time of writing)','line_number':402,'multiline':False]
['text':' those are the only ones that we merge together.','line_number':403,'multiline':False]
['text':' Above node refers to projection being unwound. Reject rewrite.','line_number':417,'multiline':False]
['text':' A projection being affected by the collation is being unwound. Reject rewrite.','line_number':451,'multiline':False]
['text':' Retain above property.','line_number':526,'multiline':False]
['text':'substitute','line_number':529,'multiline':True]
['text':'substitute','line_number':548,'multiline':True]
['text':' Do not merge if child is not another Sargable node, or the child's child is not a','line_number':560,'multiline':False]
['text':' ScanNode.','line_number':561,'multiline':False]
['text':'substitute','line_number':624,'multiline':True]
['text':' Can only convert to sargable node if we have indexing availability.','line_number':656,'multiline':False]
['text':' Do not attempt to optimize for non-existing collections.','line_number':663,'multiline':False]
['text':'isFilterContext','line_number':668,'multiline':True]
['text':'ctx','line_number':674,'multiline':True]
['text':' Too many requirements.','line_number':700,'multiline':False]
['text':' If the filter has no constraints after removing no-ops, then replace with its child. We','line_number':704,'multiline':False]
['text':' need to copy the child since we hold it by reference from the memo, and during','line_number':705,'multiline':False]
['text':' subtitution the current group will be erased.','line_number':706,'multiline':False]
['text':'substitute','line_number':709,'multiline':True]
['text':' '_retainPredicate' means the 'sargableNode' is an over-approximation, so we also have to','line_number':727,'multiline':False]
['text':' keep the original Filter node. But this means the Filter-to-Sargable rewrite could apply','line_number':728,'multiline':False]
['text':' again, to avoid rewriting endlessly we need to avoid scheduling this rewrite. So we pass','line_number':729,'multiline':False]
['text':' 'addExistingNodeWithNewChild = true'.','line_number':730,'multiline':False]
['text':'substitute','line_number':733,'multiline':True]
['text':'addExistingNodeWithNewChild','line_number':733,'multiline':True]
['text':'substitute','line_number':735,'multiline':True]
['text':'*
 * Type utilities to negate PathComposeA and PathComposeM.
 ','line_number':739,'multiline':True]
['text':'*
 * Takes an expression or path and attempts to remove Not nodes by pushing them
 * down toward the leaves. We push a Not if we can combine it into a PathCompare,
 * push though PathConstant, or cancel it out with another Not.
 *
 * Caller provides:
 * - an input ABT
 * - 'negate': true if we want the new ABT to be the negation of the input.
 *
 * Callee can reply with either:
 * - boost::none, meaning we can't make the ABT any simpler.
 * - struct Simplified, which means we can make the ABT simpler.
 *     - 'newNode' is the replacement.
 *     - 'negated' says whether 'newNode' is the negation of the original.
 *       For example, we can simplify the child of Traverse but not push
 *       a Not through it.
 ','line_number':758,'multiline':True]
['text':' True if 'newNode' is the negation of the original node.','line_number':778,'multiline':False]
['text':'n','line_number':784,'multiline':True]
['text':'n','line_number':792,'multiline':True]
['text':'n','line_number':800,'multiline':True]
['text':' No rewrite necessary.','line_number':802,'multiline':False]
['text':'n','line_number':812,'multiline':True]
['text':' we can still negate the inner expression.','line_number':816,'multiline':False]
['text':'n','line_number':823,'multiline':True]
['text':' We can still negate the inner expression.','line_number':827,'multiline':False]
['text':'n','line_number':834,'multiline':True]
['text':' Only handle Not.','line_number':835,'multiline':False]
['text':' Remove the 'Not' if either:','line_number':842,'multiline':False]
['text':' - it can cancel with a Not in some ancestor ('negate')','line_number':843,'multiline':False]
['text':' - it can cancel with a Not in the child ('simplified->negated')','line_number':844,'multiline':False]
['text':' The 'either' is exclusive because the child is only 'negated' if we','line_number':845,'multiline':False]
['text':' requested it ('negateChild').','line_number':846,'multiline':False]
['text':' We cancelled with a Not in some ancestor iff the caller asked us to.','line_number':849,'multiline':False]
['text':' We failed to simplify the child.','line_number':857,'multiline':False]
['text':' But we can still simplify 'n' by unwrapping the 'Not'.','line_number':859,'multiline':False]
['text':' Therefore we failed to simplify 'n'.','line_number':862,'multiline':False]
['text':'n','line_number':868,'multiline':True]
['text':' Shouldn't happen; just don't simplify.','line_number':871,'multiline':False]
['text':' Try to simplify the lambda body.','line_number':875,'multiline':False]
['text':' If that succeeds, it may expose 'PathLambda Lambda [x] EvalFilter p (Variable [x])',','line_number':876,'multiline':False]
['text':' which we can simplify to just 'p'. That's only valid if the Variable [x] is the','line_number':877,'multiline':False]
['text':' only occurrence of 'x'.','line_number':878,'multiline':False]
['text':' If the lambda var is used only once, simplifying the body may have exposed','line_number':882,'multiline':False]
['text':' 'PathLambda Lambda [x] EvalFilter p (Variable [x])', which we can replace','line_number':883,'multiline':False]
['text':' with just 'p'.','line_number':884,'multiline':False]
['text':'n','line_number':902,'multiline':True]
['text':'negate','line_number':902,'multiline':True]
['text':' We actually don't care whether the caller is asking us to negate.','line_number':903,'multiline':False]
['text':' We can't negate a Traverse; the best we can do is simplify the child.','line_number':904,'multiline':False]
['text':'negate','line_number':905,'multiline':True]
['text':' Neither child is simplified.','line_number':922,'multiline':False]
['text':' At least one child is simplified, so we're going to rebuild a node.','line_number':926,'multiline':False]
['text':' If either child was not simplified, we're going to copy the original','line_number':927,'multiline':False]
['text':' unsimplified child.','line_number':928,'multiline':False]
['text':' Neither is negated: keep the original composition.','line_number':936,'multiline':False]
['text':' At least one child is negated, so we're going to rewrite to the negated composition.','line_number':941,'multiline':False]
['text':' If either child was not able to aborb a Not, we'll add an explicit Not to its root.','line_number':942,'multiline':False]
['text':'n','line_number':954,'multiline':True]
['text':'n','line_number':958,'multiline':True]
['text':'n','line_number':962,'multiline':True]
['text':'n','line_number':972,'multiline':True]
['text':'nodeSubclass','line_number':972,'multiline':True]
['text':'negate','line_number':972,'multiline':True]
['text':' We don't know how to simplify this node.','line_number':973,'multiline':False]
['text':'negate','line_number':984,'multiline':True]
['text':' Take a Path and negate it.  Use Lambda / EvalFilter to toggle between expressions and paths.','line_number':998,'multiline':False]
['text':'*
 * Attempt to remove Traverse nodes from a FilterNode.
 *
 * If we succeed, add a replacement node to the RewriteContext and return true.
 ','line_number':1011,'multiline':True]
['text':' Expect the filter to be EvalFilter, or UnaryOp [Not] EvalFilter.','line_number':1020,'multiline':False]
['text':' If EvalFilter is applied to the whole-document binding then','line_number':1027,'multiline':False]
['text':' we can simplify the path using what we know about the multikeyness','line_number':1028,'multiline':False]
['text':' of the collection.','line_number':1029,'multiline':False]
['text':'substitute','line_number':1041,'multiline':True]
['text':' Sub-rewrite: attempt to de-compose filter into at least two new filter nodes.','line_number':1055,'multiline':False]
['text':'minDepth','line_number':1060,'multiline':True]
['text':'substitute','line_number':1062,'multiline':True]
['text':'substitute','line_number':1090,'multiline':True]
['text':' TODO SERVER-83835: Implement more granular rewrites.','line_number':1102,'multiline':False]
['text':'substitute','line_number':1127,'multiline':True]
['text':' Can only convert to sargable node if we have indexing availability.','line_number':1141,'multiline':False]
['text':' Do not attempt to optimize for non-existing collections.','line_number':1151,'multiline':False]
['text':' Sub-rewrite: attempt to convert Keep to a chain of individual evaluations.','line_number':1157,'multiline':False]
['text':' TODO: consider using a standalone rewrite.','line_number':1158,'multiline':False]
['text':' Optimization. If we are retaining fields on the root level, generate','line_number':1165,'multiline':False]
['text':' EvalNodes with the intention of converting later to a SargableNode after','line_number':1166,'multiline':False]
['text':' reordering, in order to be able to cover the fields using a physical scan or','line_number':1167,'multiline':False]
['text':' index.','line_number':1168,'multiline':False]
['text':'substitute','line_number':1195,'multiline':True]
['text':' We still want to extract sargable nodes from EvalNode to use for PhysicalScans.','line_number':1201,'multiline':False]
['text':'isFilterContext','line_number':1203,'multiline':True]
['text':' For evaluation nodes we expect to create a single entry.','line_number':1211,'multiline':False]
['text':'substitute','line_number':1253,'multiline':True]
['text':'scanGroupCE','line_number':1260,'multiline':True]
['text':'baseCE','line_number':1261,'multiline':True]
['text':'indexPredSels','line_number':1262,'multiline':True]
['text':'substitute','line_number':1266,'multiline':True]
['text':'*
 * Used to pre-compute properties of a PSR.
 ','line_number':1274,'multiline':True]
['text':'*
 * Holds result of splitting requirements into left and right sides to support index+fetch and index
 * intersection.
 ','line_number':1281,'multiline':True]
['text':'*
 * Helper transport for 'splitRequirementsFetch': adds a PSRExpr::Node to a builder. The caller can
 * specify whether to keep only predicates, only projections, or both. Implicitly it handles
 * perfOnly predicates: either dropping them (on the fetch side) or converting them to non-perfOnly
 * (on the index side).
 ','line_number':1292,'multiline':True]
['text':' perfOnly predicates on the fetch side become trivially true.','line_number':1340,'multiline':False]
['text':' We have found a left requirement which cannot be covered with an','line_number':1348,'multiline':False]
['text':' index.','line_number':1349,'multiline':False]
['text':' The whole predicate/projection is trivial and its indexability doesn't','line_number':1353,'multiline':False]
['text':' matter.','line_number':1354,'multiline':False]
['text':' Always add atom (even if trivially true). Builder will remove it as needed.','line_number':1358,'multiline':False]
['text':'isPerfOnly','line_number':1361,'multiline':True]
['text':'*
 * Takes a vector of PSRExpr, 'conjuncts', and splits them into an index side (on the left) and a
 * fetch side (on the right).
 *
 * The bitfield 'mask' says how to split: each corresponding bit is 1 for left or 0 for right.
 *
 * 'perfOnly' predicates are preserved and converted to non-perfOnly when they go on the index side.
 * On the fetch side they are dropped, by converting them to trivially-true.
 *
 * If yielding-tolerant plans are requested (by 'hints._disableYieldingTolerantPlans == false') then
 * any predicate that should go on the left, we actually put on both sides.
 *
 * Some special cases apply when we attempt to put a predicate on the index side:
 * - If yielding-tolerant plans are requested (by 'hints._disableYieldingTolerantPlans == false')
 *   then we put the predicate on both sides.
 * - If correct null handling is requested (by 'hints._fastIndexNullHandling == false') and the
 *   predicate may contain null, we satisfy its output projection (if any) on the fetch side
 *   instead.
 ','line_number':1372,'multiline':True]
['text':' Builder left and right sides in CNF.','line_number':1397,'multiline':False]
['text':' Adds a PSRExpr 'expr' to the left or right, as specified by 'left'.','line_number':1402,'multiline':False]
['text':' When adding to the right, replaces any 'perfOnly' atoms with trivially-true.','line_number':1403,'multiline':False]
['text':' When adding to the left, keeps 'perfOnly' atoms and marks them non-perfOnly.','line_number':1404,'multiline':False]
['text':'','line_number':1405,'multiline':False]
['text':' 'keep' specifies whether to keep only the predicate, only the projection, or both.','line_number':1406,'multiline':False]
['text':' It defaults to both.','line_number':1407,'multiline':False]
['text':'','line_number':1408,'multiline':False]
['text':' If we end up adding an unindexed path (one we know does not appear in any index),','line_number':1409,'multiline':False]
['text':' set 'hasFieldCoverage' to false as a signal to bail out.','line_number':1410,'multiline':False]
['text':' Predicate should go on the right side.','line_number':1423,'multiline':False]
['text':'left','line_number':1424,'multiline':True]
['text':' Predicate should go on the left side. However:','line_number':1428,'multiline':False]
['text':' - Correct null handling requires moving the projection to the fetch side.','line_number':1429,'multiline':False]
['text':' - Yield-safe plans require duplicating the predicate to both sides.','line_number':1430,'multiline':False]
['text':'     - Except that 'perfOnly' predicates become true on the fetch side.','line_number':1431,'multiline':False]
['text':' We can never return Null values from the requirement.','line_number':1434,'multiline':False]
['text':' Insert into left side unchanged.','line_number':1436,'multiline':False]
['text':'left','line_number':1437,'multiline':True]
['text':' Insert a requirement on the right side too, left side is non-binding.','line_number':1439,'multiline':False]
['text':'left','line_number':1440,'multiline':True]
['text':'left','line_number':1441,'multiline':True]
['text':' At this point we should not be seeing perf-only predicates.','line_number':1444,'multiline':False]
['text':' We cannot return index values, since the interval can possibly contain Null.','line_number':1446,'multiline':False]
['text':' Instead, we remove the output binding for the left side, and return the value','line_number':1447,'multiline':False]
['text':' from the right (seek) side.','line_number':1448,'multiline':False]
['text':'left','line_number':1449,'multiline':True]
['text':'left','line_number':1450,'multiline':True]
['text':' Yield-safe plans keep both the predicate and projection on the fetch side.','line_number':1452,'multiline':False]
['text':' Yield-unsafe plans only need the projection.','line_number':1453,'multiline':False]
['text':'*
 * Finds and splits one requirement with bound projection that may return null. Checks if a
 * SargableNode can be split into two SargableNodes where one of them does not contain any null,
 * which allows us to optimize that with an IndexScan without Seek. The underlying PSR is expected
 * to be a singleton disjunction.
 *
 * If eligible, returns the struct containing the position in 'reqs' where the requirement needs to
 * be split along with the split requirements. Returns boost::none if the node is ineligible for the
 * optimization. Returns boost::none if there are more than one requirements which may return nulls.
 ','line_number':1493,'multiline':True]
['text':' We only support one requirement to be split.','line_number':1527,'multiline':False]
['text':' Cannot rewrite.','line_number':1540,'multiline':False]
['text':'*
 * Splits the SargableNode into two SargableNodes to avoid fetching. The resulting plan looks like:
 *
 * RIDUnion [p0]
 * |   Sargable [Complete]
 * |       requirements:
 * |           (requirement intervals with null)
 * Sargable [Index]
 *     requirements:
 *         (requirement intervals without nulls)
 *
 * Currently there's an assumption that each requirement in 'reqs' has to be a singular disjunction
 * node with an atom. Returns early if fails to fulfill the assumption.
 ','line_number':1559,'multiline':True]
['text':' Create the requirement for non-null IndexScan.','line_number':1593,'multiline':False]
['text':' Create the requirement with interval including nulls.','line_number':1600,'multiline':False]
['text':' Convert everything back to DNF.','line_number':1615,'multiline':False]
['text':'substitute','line_number':1662,'multiline':True]
['text':' We are not sitting above a ScanNode.','line_number':1682,'multiline':False]
['text':' Do not insert RIDIntersect if we do not have indexes available.','line_number':1690,'multiline':False]
['text':' We cannot split this node further.','line_number':1698,'multiline':False]
['text':' Rewrite not applicable if we refer projections other than the scan projection.','line_number':1704,'multiline':False]
['text':' Decide whether to do a conjunctive or disjunctive split.','line_number':1710,'multiline':False]
['text':' Rearrange the predicates so that the top-level node is the one we want to split:','line_number':1711,'multiline':False]
['text':' - DNF if we want a disjunctive split.','line_number':1712,'multiline':False]
['text':' - CNF if we want a conjunctive split.','line_number':1713,'multiline':False]
['text':' When targeting an index, do a disjunctive split if possible.','line_number':1718,'multiline':False]
['text':' Trivial disjunction means we can only do a conjunctive split.','line_number':1720,'multiline':False]
['text':' When targeting 'Complete', the only split we allow is index/fetch,','line_number':1730,'multiline':False]
['text':' because we want to do all union/intersection of record IDs within the index side,','line_number':1731,'multiline':False]
['text':' to avoid redundant fetching.','line_number':1732,'multiline':False]
['text':' Index/fetch is a conjunctive split.','line_number':1734,'multiline':False]
['text':' Conversion between DNF/CNF can fail if the result would be too big.','line_number':1740,'multiline':False]
['text':' Pre-computed properties of the requirements.','line_number':1758,'multiline':False]
['text':' We only need these for the index/fetch split.','line_number':1759,'multiline':False]
['text':'ctx','line_number':1764,'multiline':True]
['text':' Pre-compute if a requirement's interval is fully open.','line_number':1765,'multiline':False]
['text':' Pre-compute if a requirement's interval may contain nulls, and also has an','line_number':1767,'multiline':False]
['text':' output binding. Do use constant folding if we do not have to.','line_number':1768,'multiline':False]
['text':' Explores the optimization by splitting a sargable node in order to reduce fetching on','line_number':1780,'multiline':False]
['text':' non-null fields. For this optimization, the SargableNode to split has to target','line_number':1781,'multiline':False]
['text':' 'IndexReqTarget::Complete'.','line_number':1782,'multiline':False]
['text':' We iterate over the possible ways to split N predicates into 2^N subsets, one goes to the','line_number':1790,'multiline':False]
['text':' left, and the other to the right side. If splitting into Index+Seek (isIndex = false), we','line_number':1791,'multiline':False]
['text':' try having at least one predicate on the left (mask = 1), and we try all possible','line_number':1792,'multiline':False]
['text':' subsets. For index intersection however (isIndex = true), we try symmetric partitioning','line_number':1793,'multiline':False]
['text':' (thus the high bound is 2^(N-1)).','line_number':1794,'multiline':False]
['text':' Reject rewrite. No suitable indexes.','line_number':1802,'multiline':False]
['text':' Can happen if we have intervals containing null.','line_number':1815,'multiline':False]
['text':' Convert everything back to DNF.','line_number':1819,'multiline':False]
['text':' DNF / CNF conversions can create redundant predicates; try to simplify.','line_number':1837,'multiline':False]
['text':' If the reqs are too big, even after simplification, creating a SargableNode will','line_number':1838,'multiline':False]
['text':' fail, so bail out.','line_number':1839,'multiline':False]
['text':' Reject. Must have at least one proper interval on either side.','line_number':1876,'multiline':False]
['text':' Reject. We must satisfy all intervals via indexes.','line_number':1880,'multiline':False]
['text':' Reject rewrite, because further splitting can only be conjunctive,','line_number':1893,'multiline':False]
['text':' which does not increase the set of candidate indexes.','line_number':1894,'multiline':False]
['text':' Reject rewrite, because further splitting can only be conjunctive,','line_number':1911,'multiline':False]
['text':' which does not increase the set of candidate indexes.','line_number':1912,'multiline':False]
['text':'substitute','line_number':1945,'multiline':True]
['text':' In order to be able to pre-aggregate for now we expect a simple aggregate like','line_number':1969,'multiline':False]
['text':' SUM(x).','line_number':1970,'multiline':False]
['text':' TODO: allow more functions.','line_number':1973,'multiline':False]
['text':'substitute','line_number':1995,'multiline':True]
['text':' Both left and right reorderings available means that we refer to both left and right','line_number':2023,'multiline':False]
['text':' sides.','line_number':2024,'multiline':False]
['text':'substitute','line_number':2040,'multiline':True]
['text':'substitute','line_number':2054,'multiline':True]
['text':' Iteration limit exceeded.','line_number':2181,'multiline':False]
['text':' TODO: check if rewriteEntry is different than previous (remove duplicates).','line_number':2197,'multiline':False]
['text':' Get a reference to the node instead of the node itself.','line_number':2207,'multiline':False]
['text':' Rewrites insert into the memo and can move it.','line_number':2208,'multiline':False]
['text':' Try to bind as parent.','line_number':2213,'multiline':False]
['text':' Try to bind as child.','line_number':2233,'multiline':False]
['text':' Get a reference to the node instead of the node itself.','line_number':2266,'multiline':False]
['text':' Rewrites insert into the memo and can move it.','line_number':2267,'multiline':False]
['text':' namespace mongo::optimizer::cascades','line_number':2275,'multiline':False]
