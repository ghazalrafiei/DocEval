['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' IWYU pragma: no_include "boost/container/detail/std_fwd.hpp"','line_number':33,'multiline':False]
['text':' IWYU pragma: no_include "ext/alloc_traits.h"','line_number':41,'multiline':False]
['text':'','line_number':97,'multiline':False]
['text':' Helpers for bounds explosion AKA quick-and-dirty SERVER-1205.','line_number':98,'multiline':False]
['text':'','line_number':99,'multiline':False]
['text':'*
 * Walk the tree 'root' and output all leaf nodes into 'leafNodes'.
 ','line_number':103,'multiline':True]
['text':'*
 * Determines if the query solution node 'node' is a FETCH node with an IXSCAN child node.
 ','line_number':116,'multiline':True]
['text':'*
 * Walks the tree 'root' and outputs all nodes that can be considered for explosion for sort.
 * Outputs FETCH nodes with an IXSCAN node as a child as well as singular IXSCAN leaves without a
 * FETCH as a parent into 'explodableNodes'.
 ','line_number':124,'multiline':True]
['text':'*
 * Returns the IXSCAN node from the tree 'node' that can be either a IXSCAN node or a FETCH node
 * with an IXSCAN node as a child.
 ','line_number':139,'multiline':True]
['text':'*
 * Returns true if every interval in 'oil' is a point, false otherwise.
 ','line_number':153,'multiline':True]
['text':' We can't explode if there are empty bounds. Don't consider the','line_number':157,'multiline':False]
['text':' oil a union of points if there are no intervals.','line_number':158,'multiline':False]
['text':'*
 * Returns true if we are safe to explode the 'oil' with the corresponding 'iet' that will be
 * evaluated on different input parameters.
 ','line_number':172,'multiline':True]
['text':' In order for the IET to be evaluated to the same number of point intervals given any set','line_number':183,'multiline':False]
['text':' of input parameters, the IET needs to be either a const node, or an $eq/$in eval node.','line_number':184,'multiline':False]
['text':' Having union or intersection may result in different number of point intervals when the','line_number':185,'multiline':False]
['text':' IET is evaluated.','line_number':186,'multiline':False]
['text':'*
 * Should we try to expand the index scan(s) in 'solnRoot' to pull out an indexed sort?
 *
 * Returns the node which should be replaced by the merge sort of exploded scans, or nullptr
 * if there is no such node. The result is a pointer to a unique_ptr so that the caller
 * can replace the unique_ptr.
 ','line_number':200,'multiline':True]
['text':' For now we only explode if we *know* we will pull the sort out.  We can look at','line_number':209,'multiline':False]
['text':' more structure (or just explode and recalculate properties and see what happens)','line_number':210,'multiline':False]
['text':' but for now we just explode if it's a sure bet.','line_number':211,'multiline':False]
['text':'','line_number':212,'multiline':False]
['text':' TODO: Can also try exploding if root is AND_HASH (last child dictates order.),','line_number':213,'multiline':False]
['text':' or other less obvious cases...','line_number':214,'multiline':False]
['text':' Skip over a sharding filter stage.','line_number':216,'multiline':False]
['text':' If we have a STAGE_OR, we can explode only when all children are either IXSCANs or FETCHes','line_number':229,'multiline':False]
['text':' that have an IXSCAN as a child.','line_number':230,'multiline':False]
['text':'*
 * A pair of <PointPrefix, PrefixIndices> are returned from the Cartesian product function,
 * where PointPrefix is the list of point intervals that has been exploded, and the PrefixIndices is
 * the list of indices of each point interval in the original union of points OIL.
 *
 * For example, if the index bounds is {a: [[1, 1], [2, 2]], b: [[3, 3], c: [[MinKey, MaxKey]]},
 * then the two PointPrefix are: [[1, 1], [3, 3]] and [[2, 2], [3, 3]].
 * The two PrefixIndices are [0, 0] and [1, 0].
 ','line_number':243,'multiline':True]
['text':'*
 * The first 'fieldsToExplode' fields of 'bounds' are points.  Compute the Cartesian product
 * of those fields and place it in 'prefixOut'.
 ','line_number':255,'multiline':True]
['text':' We dump the Cartesian product of bounds into prefixForScans, starting w/the first','line_number':264,'multiline':False]
['text':' field's points.','line_number':265,'multiline':False]
['text':' For each subsequent field...','line_number':279,'multiline':False]
['text':' For each point interval in that field (all ivals must be points)...','line_number':284,'multiline':False]
['text':' Make a new scan by appending it to all scans in prefixForScans.','line_number':288,'multiline':False]
['text':' And update prefixForScans.','line_number':298,'multiline':False]
['text':'*
 * Takes the provided 'node' (identified by 'nodeIndex'), either an IndexScanNode or FetchNode with
 * a direct child that is an IndexScanNode. Produces a list of new nodes, which are logically
 * equivalent to 'node' if joined by a MergeSort. Inserts these new nodes at the end of
 * 'explosionResult'.
 *
 * 'fieldsToExplode' is a count of how many fields in the scan's bounds are the union of point
 * intervals.  This is computed beforehand and provided as a small optimization.
 *
 * Example:
 *
 * For the query find({a: {$in: [1,2]}}).sort({b: 1}) using the index {a:1, b:1}:
 * 'node' will be a scan with multi-interval bounds a: [[1, 1], [2, 2]], b: [MinKey, MaxKey]
 * 'sort' will be {b: 1}
 * 'fieldsToExplode' will be 1 (as only one field isUnionOfPoints).
 *
 * The return value is whether the original index scan needs to be deduplicated.
 *
 * On return, 'explosionResult' will contain the following two scans:
 * a: [[1, 1]], b: [MinKey, MaxKey]
 * a: [[2, 2]], b: [MinKey, MaxKey]
 ','line_number':305,'multiline':True]
['text':' Get the 'isn' from either the FetchNode or IndexScanNode.','line_number':332,'multiline':False]
['text':' Turn the compact bounds in 'isn' into a bunch of points...','line_number':335,'multiline':False]
['text':' Copy boring fields into new child.','line_number':345,'multiline':False]
['text':' Set up the IET of children when the original index scan has IET.','line_number':351,'multiline':False]
['text':' Set the explosion index for the exploded IET so that they can be evaluated to the','line_number':353,'multiline':False]
['text':' correct point interval. When present, the caller should already have verified that','line_number':354,'multiline':False]
['text':' the IETs are the correct shape (i.e. derived from an $in or $eq predicate) so that','line_number':355,'multiline':False]
['text':' they are safe to explode.','line_number':356,'multiline':False]
['text':' Copy the rest of the unexploded IETs directly into the new child.','line_number':381,'multiline':False]
['text':' Copy the filter, if there is one.','line_number':387,'multiline':False]
['text':' Create child bounds.','line_number':392,'multiline':False]
['text':' If the explosion is on a FetchNode, make a copy and add the 'isn' as a child.','line_number':402,'multiline':False]
['text':' Copy the FETCH's filter, if it exists.','line_number':407,'multiline':False]
['text':' Add the 'child' IXSCAN under the FETCH stage, and the FETCH stage to the result set.','line_number':412,'multiline':False]
['text':' If there is a GeoMatchExpression in the tree on a field with a 2dsphere index,','line_number':425,'multiline':False]
['text':' we can skip validation since it was validated on insertion. This only applies to','line_number':426,'multiline':False]
['text':' 2dsphere index version >= 3.','line_number':427,'multiline':False]
['text':'','line_number':428,'multiline':False]
['text':' This does not mean that there is necessarily an IXSCAN using this 2dsphere index,','line_number':429,'multiline':False]
['text':' only that there exists a 2dsphere index on this field.','line_number':430,'multiline':False]
['text':'*
 * If any field is missing from the list of fields the projection wants, we are not covered.
 ','line_number':446,'multiline':True]
['text':'*
 * If 'solnRoot' is returning index key data from a single index, returns the associated index key
 * pattern. Otherwise, returns an empty object.
 ','line_number':457,'multiline':True]
['text':' Both the IXSCAN and DISTINCT stages provide covered key data.','line_number':465,'multiline':False]
['text':'*
 * Adds a stage to generate the sort key metadata if there's no sort stage but we have a sortKey
 * meta-projection.
 ','line_number':478,'multiline':True]
['text':'*
 * Returns a pointer to a COLUMN_SCAN node if there is one. Returns nullptr if it cannot be found or
 * if there is any branching in the tree that would lead to more than one leaf node.
 ','line_number':493,'multiline':True]
['text':' Non-branching trees only, intentionally ignore >1 child.','line_number':502,'multiline':False]
['text':'*
 * When a projection needs to be added to the solution tree, this function chooses between the
 * default implementation and one of the fast paths.
 ','line_number':509,'multiline':True]
['text':' If the projection requires the entire document we add a fetch stage if not present. Otherwise','line_number':520,'multiline':False]
['text':' we add a fetch stage if we are not covered.','line_number':521,'multiline':False]
['text':' With the previous fetch analysis we know we have all the required fields. We know we have a','line_number':530,'multiline':False]
['text':' projection specified, so we may need a projection node in the tree for any or multiple of the','line_number':531,'multiline':False]
['text':' following reasons:','line_number':532,'multiline':False]
['text':' - We have provided too many fields. Maybe we have the full document from a FETCH, or the','line_number':533,'multiline':False]
['text':'   index scan is compound and has an extra field or two, or maybe some fields were needed','line_number':534,'multiline':False]
['text':'   internally that the client didn't request.','line_number':535,'multiline':False]
['text':' - We have a projection which computes new values using expressions - a "computed projection".','line_number':536,'multiline':False]
['text':' - Finally, we could have the right data, but not in the format required to return to the','line_number':537,'multiline':False]
['text':'   client. As one example: The format of data returned in index keys is meant for internal','line_number':538,'multiline':False]
['text':'   consumers and is not returnable to a user.','line_number':539,'multiline':False]
['text':' A generic "ProjectionNodeDefault" will take care of any of the three, but is slower due to','line_number':541,'multiline':False]
['text':' its generic nature. We will attempt to avoid that for some "fast paths" first.','line_number':542,'multiline':False]
['text':' All fast paths can only apply to "simple" projections - see the implementation for details.','line_number':543,'multiline':False]
['text':' First fast path: We have a COLUMN_SCAN providing the data, there are no computed','line_number':546,'multiline':False]
['text':' expressions, and the requested fields are provided exactly. For 'simple' projections','line_number':547,'multiline':False]
['text':' which must have only top-level fields, A COLUMN_SCAN can provide data in a format safe to','line_number':548,'multiline':False]
['text':' return to the client, so it is safe to elide any projection if the COLUMN_SCAN is','line_number':549,'multiline':False]
['text':' outputting exactly the set of fields that the user required. This may not be the case all','line_number':550,'multiline':False]
['text':' the time if say we needed an extra field for a sort or for shard filtering.','line_number':551,'multiline':False]
['text':' No projection needed. We already checked that all necessary fields are provided, so','line_number':555,'multiline':False]
['text':' if the set sizes match, they match exactly.','line_number':556,'multiline':False]
['text':' Next fast path: A ProjectionNodeSimple fast-path for plans that have a materialized','line_number':560,'multiline':False]
['text':' object from a FETCH or COLUMN_SCAN stage.','line_number':561,'multiline':False]
['text':' COLUMN_SCAN may fall into this case if it provided all the necessary data but had','line_number':563,'multiline':False]
['text':' too many fields output, so we need to trim them down.','line_number':564,'multiline':False]
['text':' Final fast path: ProjectionNodeCovered for plans with an index scan that the','line_number':573,'multiline':False]
['text':' projection can cover.','line_number':574,'multiline':False]
['text':' No fast path available, we need to add this generic projection node.','line_number':584,'multiline':False]
['text':'*
 * Given the solution tree 'root', attempts to push a projection at the root of the tree beneath a
 * SORT node. Returns the tree with this optimization applied, or the unmodified tree if the
 * optimization was not legal.
 *
 * Applying the projection before the sort is beneficial when it reduces the amount of data that
 * needs to be sorted.
 ','line_number':591,'multiline':True]
['text':' There's no projection to push down.','line_number':602,'multiline':False]
['text':' If the projection has any expressions, then we refrain from moving it underneath the','line_number':608,'multiline':False]
['text':' sort. It's possible that the addition of computed fields increases the size of the data','line_number':609,'multiline':False]
['text':' to sort, in which case it would be better to sort first and then project.','line_number':610,'multiline':False]
['text':' There could be a situation when there is a SKIP stage between PROJECT and SORT:','line_number':614,'multiline':False]
['text':'   PROJECT => SKIP => SORT','line_number':615,'multiline':False]
['text':' In this case we still want to push PROJECT beneath SORT.','line_number':616,'multiline':False]
['text':' Don't perform this optimization if the sort is a top-k sort. We would be wasting work','line_number':630,'multiline':False]
['text':' computing projections for documents that are discarded since they are not in the top-k set.','line_number':631,'multiline':False]
['text':' It is only legal to push down the projection it if preserves all of the fields on which we','line_number':636,'multiline':False]
['text':' need to sort.','line_number':637,'multiline':False]
['text':' Perform the swap. We are starting with the following structure:','line_number':644,'multiline':False]
['text':'   PROJECT => SORT => CHILD','line_number':645,'multiline':False]
['text':' Or if there is a SKIP stage between PROJECT and SORT:','line_number':646,'multiline':False]
['text':'   PROJECT => SKIP => SORT => CHILD','line_number':647,'multiline':False]
['text':'','line_number':648,'multiline':False]
['text':' This needs to be transformed to the following:','line_number':649,'multiline':False]
['text':'   SORT => PROJECT => CHILD','line_number':650,'multiline':False]
['text':' Or to the following in case of SKIP:','line_number':651,'multiline':False]
['text':'   SKIP => SORT => PROJECT => CHILD','line_number':652,'multiline':False]
['text':'','line_number':653,'multiline':False]
['text':' First, detach the bottom of the tree. This part is CHILD in the comment above.','line_number':654,'multiline':False]
['text':' Next, detach the input from the projection and assume ownership of it.','line_number':659,'multiline':False]
['text':' The projection input is either this structure:','line_number':660,'multiline':False]
['text':'   SORT','line_number':661,'multiline':False]
['text':' Or this if we have SKIP:','line_number':662,'multiline':False]
['text':'   SKIP => SORT','line_number':663,'multiline':False]
['text':' Attach the lower part of the tree as the child of the projection.','line_number':669,'multiline':False]
['text':' We want to get the following structure:','line_number':670,'multiline':False]
['text':'   PROJECT => CHILD','line_number':671,'multiline':False]
['text':' Attach the projection as the child of the sort stage.','line_number':675,'multiline':False]
['text':' In this case 'ownedProjectionInput' points to the structure:','line_number':677,'multiline':False]
['text':'   SKIP => SORT','line_number':678,'multiline':False]
['text':' And to attach PROJECT => CHILD to it, we need to access children of SORT stage.','line_number':679,'multiline':False]
['text':' In this case 'ownedProjectionInput' points to the structure:','line_number':682,'multiline':False]
['text':'   SORT','line_number':683,'multiline':False]
['text':' And we can just add PROJECT => CHILD to its children.','line_number':684,'multiline':False]
['text':' Re-compute properties so that they reflect the new structure of the tree.','line_number':688,'multiline':False]
['text':' The simple sort stage discards any metadata other than sort key metadata. It can only be used','line_number':697,'multiline':False]
['text':' if there are no metadata dependencies, or the only metadata dependency is a 'kSortKey'','line_number':698,'multiline':False]
['text':' dependency.','line_number':699,'multiline':False]
['text':' For performance, the simple sort stage discards any incoming record ids. Carrying the','line_number':704,'multiline':False]
['text':' record ids along through the sorting process is wasted work when these ids will never be','line_number':705,'multiline':False]
['text':' consumed later in the execution of the query. If the record ids are needed, however, then','line_number':706,'multiline':False]
['text':' we can't use the simple sort stage.','line_number':707,'multiline':False]
['text':'*
 * Returns true if 'setL' is a non-strict subset of 'setR'.
 *
 * The types of the sets are permitted to be different to allow checking something with compatible
 * but different types e.g. std::set<std::string>, StringMap.
 ','line_number':723,'multiline':True]
['text':' Look for a GROUP => PROJECTION_SIMPLE where the dependency set of the PROJECTION_SIMPLE','line_number':742,'multiline':False]
['text':' is a super set of the dependency set of the GROUP. If so, the projection isn't needed and','line_number':743,'multiline':False]
['text':' it can be elminated.','line_number':744,'multiline':False]
['text':' only eliminate inclusion projections','line_number':750,'multiline':False]
['text':' only eliminate when group depends on a subset of fields','line_number':752,'multiline':False]
['text':' only eliminate projections which preserve all fields used by the group','line_number':754,'multiline':False]
['text':' Attach the projectNode's child directly as the groupNode's child, eliminating the','line_number':756,'multiline':False]
['text':' project node.','line_number':757,'multiline':False]
['text':' Keep traversing the tree in search of GROUP stages.','line_number':762,'multiline':False]
['text':' Determines whether 'index' is eligible for executing the right side of a pushed down $lookup over','line_number':768,'multiline':False]
['text':' 'foreignField'.','line_number':769,'multiline':False]
['text':'*
 * Sets the lowPriority parameter on the given node if it is an unbounded collection scan.
 ','line_number':778,'multiline':True]
['text':' There is a limit with either no sort or the natural sort.','line_number':790,'multiline':False]
['text':' This scan is not unbounded.','line_number':796,'multiline':False]
['text':' namespace','line_number':802,'multiline':False]
['text':' static','line_number':814,'multiline':False]
['text':' static','line_number':825,'multiline':False]
['text':' If a group or projection's child is a COLUMN_SCAN node, try to eliminate the','line_number':827,'multiline':False]
['text':' expression that projects documents retrieved from row store fallback. In other words, the','line_number':828,'multiline':False]
['text':' COLUMN_SCAN's rowStoreExpression can be removed if it does not affect the group or','line_number':829,'multiline':False]
['text':' project above.','line_number':830,'multiline':False]
['text':' Look for group above column scan.','line_number':835,'multiline':False]
['text':' A row store expression that preserves all fields used by the parent $group is','line_number':838,'multiline':False]
['text':' redundant and can be removed.','line_number':839,'multiline':False]
['text':' Look for projection above column scan.','line_number':845,'multiline':False]
['text':' A row store expression that preserves all fields used by the parent projection is','line_number':851,'multiline':False]
['text':' redundant and can be removed.','line_number':852,'multiline':False]
['text':' Recur on child.','line_number':860,'multiline':False]
['text':' static','line_number':865,'multiline':False]
['text':' For timeseries collections, the imprecise filters are able to get rid of an entire','line_number':869,'multiline':False]
['text':' bucket's worth of data, and save us from unpacking potentially thousands of documents.','line_number':870,'multiline':False]
['text':' In this case, we decide not to prune the imprecise filters.','line_number':871,'multiline':False]
['text':' In principle we could do this optimization for TEXT queries, but for simplicity we do not','line_number':875,'multiline':False]
['text':' today.','line_number':876,'multiline':False]
['text':' Remove the imprecise predicates on nodes after a fetch. For nodes before a fetch, the','line_number':882,'multiline':False]
['text':' imprecise filters may be able to save us the significant work of doing a fetch. In such','line_number':883,'multiline':False]
['text':' cases, we assume the imprecise filter is always worth applying.','line_number':884,'multiline':False]
['text':' static','line_number':895,'multiline':False]
['text':' Check if an eligible index exists for indexed loop join strategy.','line_number':908,'multiline':False]
['text':' Sort indexes by (# of components, index type, index key pattern) tuple.','line_number':910,'multiline':False]
['text':' Here we rely on the fact that 'INDEX_BTREE < INDEX_HASHED'.','line_number':919,'multiline':False]
['text':' This is a completely arbitrary tie breaker to make the selection algorithm','line_number':923,'multiline':False]
['text':' deterministic.','line_number':924,'multiline':False]
['text':' static','line_number':948,'multiline':False]
['text':' Get field names of all 2dsphere indexes with version >= 3.','line_number':951,'multiline':False]
['text':' The canonical check as to whether a key pattern element is "ascending" or "descending" is','line_number':985,'multiline':False]
['text':' (elt.number() >= 0). This is defined by the Ordering class.','line_number':986,'multiline':False]
['text':' static','line_number':993,'multiline':False]
['text':' Find explodable nodes in the subtree rooted at 'toReplace'.','line_number':1003,'multiline':False]
['text':' How many scan leaves will result from our expansion?','line_number':1008,'multiline':False]
['text':' The value of entry i is how many scans we want to blow up for explodableNodes[i]. We','line_number':1011,'multiline':False]
['text':' calculate this in the loop below and might as well reuse it if we blow up that scan.','line_number':1012,'multiline':False]
['text':' The sort order we're looking for has to possibly be provided by each of the index scans','line_number':1015,'multiline':False]
['text':' upon explosion.','line_number':1016,'multiline':False]
['text':' We can do this because structureOKForExplode is only true if the leaves are index','line_number':1018,'multiline':False]
['text':' scans.','line_number':1019,'multiline':False]
['text':' Not a point interval prefix, can't try to rewrite.','line_number':1023,'multiline':False]
['text':' The index is multikey but has no path-level multikeyness metadata. In this case, the','line_number':1029,'multiline':False]
['text':' index can never provide a sort.','line_number':1030,'multiline':False]
['text':' How many scans will we create if we blow up this ixscan?','line_number':1034,'multiline':False]
['text':' Skip every field that is a union of point intervals. When the index scan is','line_number':1037,'multiline':False]
['text':' parameterized, we need to check IET instead of the index bounds alone because we need to','line_number':1038,'multiline':False]
['text':' make sure the same number of exploded index scans will result given any set of input','line_number':1039,'multiline':False]
['text':' parameters. So that when the plan is recovered from cache and parameterized, we will be','line_number':1040,'multiline':False]
['text':' sure to have the same number of sort merge branches.','line_number':1041,'multiline':False]
['text':' There's no sort order left to gain by exploding.  Just go home.  TODO: verify nothing','line_number':1059,'multiline':False]
['text':' clever we can do here.','line_number':1060,'multiline':False]
['text':' Only explode if there's at least one field to explode for this scan.','line_number':1065,'multiline':False]
['text':' The rest of the fields define the sort order we could obtain by exploding','line_number':1070,'multiline':False]
['text':' the bounds.','line_number':1071,'multiline':False]
['text':' One of the indexed fields providing the sort is multikey. It is not correct for a','line_number':1076,'multiline':False]
['text':' field with multikey components to provide a sort, so bail out.','line_number':1077,'multiline':False]
['text':' See if it's the order we're looking for.','line_number':1083,'multiline':False]
['text':' We can't get the sort order from the index scan. See if we can','line_number':1086,'multiline':False]
['text':' get the sort by reversing the scan.','line_number':1087,'multiline':False]
['text':' Can't get the sort order from the reversed index scan either. Give up.','line_number':1091,'multiline':False]
['text':' We can get the sort order we need if we reverse the scan.','line_number':1094,'multiline':False]
['text':' An index whose collation does not match the query's cannot provide a sort if sort-by','line_number':1099,'multiline':False]
['text':' fields can contain collatable values.','line_number':1100,'multiline':False]
['text':' The field can contain collatable values and therefore we cannot use the index','line_number':1106,'multiline':False]
['text':' to provide the sort.','line_number':1107,'multiline':False]
['text':' Do some bookkeeping to see how many ixscans we'll create total.','line_number':1113,'multiline':False]
['text':' And for this scan how many fields we expand.','line_number':1116,'multiline':False]
['text':' Too many ixscans spoil the performance.','line_number':1120,'multiline':False]
['text':' If we're here, we can (probably?  depends on how restrictive the structure check is)','line_number':1132,'multiline':False]
['text':' get our sort order via ixscan blow-up.','line_number':1133,'multiline':False]
['text':' When there's a single IX_SCAN explodable, we're guaranteed that the exploded nodes all take','line_number':1137,'multiline':False]
['text':' different point prefixes so they should produce disjoint results. As such, there's no need to','line_number':1138,'multiline':False]
['text':' deduplicate. We don't have this guarantee if there're multiple explodable IX_SCAN under an OR','line_number':1139,'multiline':False]
['text':' node because the index bounds might intersect. Furthermore, we always need to deduplicate if','line_number':1140,'multiline':False]
['text':' some original index scans need to deduplicate, for example a multikey index.','line_number':1141,'multiline':False]
['text':' This function is used to check if the given index pattern and direction in the traversal','line_number':1156,'multiline':False]
['text':' preference can be used to satisfy the given sort pattern (specifically for time series','line_number':1157,'multiline':False]
['text':' collections).','line_number':1158,'multiline':False]
['text':' If the field doesn't match or the directions don't match, we return false.','line_number':1171,'multiline':False]
['text':' The sort still has more, so it cannot be a prefix of the index.','line_number':1179,'multiline':False]
['text':' static','line_number':1191,'multiline':False]
['text':' If we've been passed a traversal preference, we might want to reverse the order we scan','line_number':1201,'multiline':False]
['text':' the data to avoid a blocking sort later in the pipeline.','line_number':1202,'multiline':False]
['text':' TODO: We could check sortObj for any projections other than :1 and :-1','line_number':1228,'multiline':False]
['text':' and short-cut some of this.','line_number':1229,'multiline':False]
['text':' If the sort is $natural, we ignore it, assuming that the caller has detected that and','line_number':1231,'multiline':False]
['text':' outputted a collscan to satisfy the desired order.','line_number':1232,'multiline':False]
['text':' See if solnRoot gives us the sort.  If so, we're done.','line_number':1237,'multiline':False]
['text':' Sort is not provided.  See if we provide the reverse of our sort pattern.','line_number':1243,'multiline':False]
['text':' If so, we can reverse the scan direction(s).','line_number':1244,'multiline':False]
['text':' The only collection scan that includes a sort order in 'providedSorts' is a scan on a','line_number':1246,'multiline':False]
['text':' clustered collection. However, we cannot reverse this scan if its direction is specified by a','line_number':1247,'multiline':False]
['text':' $natural hint.','line_number':1248,'multiline':False]
['text':' Sort not provided, can't reverse scans to get the sort.  One last trick: We can "explode"','line_number':1260,'multiline':False]
['text':' index scans over point intervals to an OR of sub-scans in order to pull out a sort.','line_number':1261,'multiline':False]
['text':' Let's try this.','line_number':1262,'multiline':False]
['text':' If we're here, we need to add a sort stage.','line_number':1267,'multiline':False]
['text':' If the index has the collation that the query is expecting then kCollatedProvided','line_number':1271,'multiline':False]
['text':' will be returned hence we can use the index for sorting and grouping (distinct_scan)','line_number':1272,'multiline':False]
['text':' but need to add a fetch to retrieve a proper value of the key.','line_number':1273,'multiline':False]
['text':' When setting the limit on the sort, we need to consider both','line_number':1295,'multiline':False]
['text':' the limit N and skip count M. The sort should return an ordered list','line_number':1296,'multiline':False]
['text':' N + M items so that the skip stage can discard the first M results.','line_number':1297,'multiline':False]
['text':' The limit can be combined with the SORT stage.','line_number':1299,'multiline':False]
['text':' solnRoot finds all our results.  Let's see what transformations we must perform to the','line_number':1328,'multiline':False]
['text':' data.','line_number':1329,'multiline':False]
['text':' If we're answering a query on a sharded system, we need to drop documents that aren't','line_number':1331,'multiline':False]
['text':' logically part of our shard.','line_number':1332,'multiline':False]
['text':' See if we need to fetch information for our shard key.','line_number':1335,'multiline':False]
['text':' NOTE: Solution nodes only list ordinary, non-transformed index keys for now','line_number':1336,'multiline':False]
['text':' One of the shard key fields are not  or only a collated version are provided','line_number':1343,'multiline':False]
['text':' by an index. We need to fetch the full documents prior to shard filtering. In','line_number':1344,'multiline':False]
['text':' the case of kCollatedProvided the fetch is needed to get a non-ICU encoded','line_number':1345,'multiline':False]
['text':' value from the collection. Else the IDXScan would only return non-readable','line_number':1346,'multiline':False]
['text':' ICU encoded values.','line_number':1347,'multiline':False]
['text':' The index scan provides the hash of a field, but the shard key field is _not_','line_number':1353,'multiline':False]
['text':' hashed. We need to fetch prior to shard filtering in order to recover the raw','line_number':1354,'multiline':False]
['text':' value of the field.','line_number':1355,'multiline':False]
['text':' This can happen if we need to create a blocking sort stage and we're not allowed to.','line_number':1376,'multiline':False]
['text':' A solution can be blocking if it has a blocking sort stage or','line_number':1381,'multiline':False]
['text':' a hashed AND stage.','line_number':1382,'multiline':False]
['text':' Project the results.','line_number':1393,'multiline':False]
['text':' We don't need a projection stage if returnKey was requested since the intended behavior','line_number':1395,'multiline':False]
['text':' is that the projection is ignored when returnKey is specified.','line_number':1396,'multiline':False]
['text':' Even if there's no projection, the client may want sort key metadata.','line_number':1405,'multiline':False]
['text':' If there's no projection, we must fetch, as the user wants the entire doc.','line_number':1408,'multiline':False]
['text':' When there is both a blocking sort and a limit, the limit will be enforced by the blocking','line_number':1416,'multiline':False]
['text':' sort. Otherwise, we will have to enforce the limit ourselves since it's not handled inside','line_number':1417,'multiline':False]
['text':' SORT.','line_number':1418,'multiline':False]
['text':' namespace mongo','line_number':1435,'multiline':False]
