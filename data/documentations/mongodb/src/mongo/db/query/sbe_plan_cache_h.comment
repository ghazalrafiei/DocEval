['text':'*
 *    Copyright (C) 2021-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 * Represents the sharding epoch of the collection which entry will be stored in the plan cache. The
 * sharding epoch is not updated on operations like chunk splits and moves but rather on sharding
 * and refine shard key operations.
 ','line_number':62,'multiline':True]
['text':' There is a special collection versioning scheme associated with the SBE plan cache. Whenever','line_number':94,'multiline':False]
['text':' an action against a collection is made which should invalidate the plan cache entries for the','line_number':95,'multiline':False]
['text':' collection -- in particular index builds and drops -- the version number is incremented.','line_number':96,'multiline':False]
['text':' Readers specify the version number that they are reading at so that they only pick up cache','line_number':97,'multiline':False]
['text':' entries with the right set of indexes.','line_number':98,'multiline':False]
['text':'','line_number':99,'multiline':False]
['text':' We also clean up all cache entries for a particular (collectionUuid, versionNumber) pair when','line_number':100,'multiline':False]
['text':' all readers seeing this version of the collection have drained.','line_number':101,'multiline':False]
['text':' Ensures that a cached SBE plan cannot be reused if the collection has since become sharded or','line_number':104,'multiline':False]
['text':' changed its shard key. The cached plan may no longer be valid after sharding or shard key','line_number':105,'multiline':False]
['text':' refining since the structure of the plan depends on whether the collection is sharded, and if','line_number':106,'multiline':False]
['text':' sharded depends on the shard key.','line_number':107,'multiline':False]
['text':'*
 * Represents the "key" used in the PlanCache mapping from query shape -> query plan.
 ','line_number':111,'multiline':True]
['text':' For secondary collections, we don't encode collection generation in the key since we','line_number':122,'multiline':False]
['text':' don't shard version these collections. This is OK because we only push down $lookup','line_number':123,'multiline':False]
['text':' queries to SBE when involved collections are unsharded.','line_number':124,'multiline':False]
['text':'*
     * Returns the estimated size of the plan cache key in bytes.
     ','line_number':167,'multiline':True]
['text':' Contains the actual encoding of the query shape as well as the index discriminators.','line_number':180,'multiline':False]
['text':' To make sure the plan cache key matches, the secondary collection states need to be passed','line_number':185,'multiline':False]
['text':' in a defined order. Currently, we use the collection order stored in','line_number':186,'multiline':False]
['text':' MultipleCollectionAccessor, which is ordered by the collection namespaces.','line_number':187,'multiline':False]
['text':' Determines the partitioning function for use with the 'Partitioned' utility.','line_number':199,'multiline':False]
['text':'*
 * Represents the data cached in the SBE plan cache. This data holds an execution plan and necessary
 * auxiliary data for preparing and executing the PlanStage tree. In addition, holds the hash of the
 * query solution that led to this plan.
 ','line_number':205,'multiline':True]
['text':' Hash of the QuerySolution that led this cache entry.','line_number':229,'multiline':False]
['text':'*
     * This estimator function is called when an entry is added or removed to LRU cache in order to
     * make sure the total plan cache size does not exceed the maximum size.
     ','line_number':236,'multiline':True]
['text':'*
 * A helper method to get the global SBE plan cache decorated in 'serviceCtx'.
 ','line_number':253,'multiline':True]
['text':'*
 * A wrapper for the helper above. 'opCtx' cannot be null.
 ','line_number':258,'multiline':True]
['text':'*
 * Removes cached plan entries with the given collection UUID and collection version number.
 *
 * When 'matchSecondaryCollections' is 'true' this function will also clear plan cache entries
 * whose list of secondary collection contains at least one collection with the 'collectionUuid'.
 * Otherwise, only the main collection will be matched against the given 'collectionUuid'.
 ','line_number':263,'multiline':True]
['text':' namespace sbe','line_number':275,'multiline':False]
['text':' namespace mongo','line_number':276,'multiline':False]
