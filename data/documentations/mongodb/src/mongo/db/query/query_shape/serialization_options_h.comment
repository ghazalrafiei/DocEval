['text':'*
 *    Copyright (C) 2023-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' Should never be called, throw to ensure we catch this in tests.','line_number':55,'multiline':False]
['text':' namespace','line_number':59,'multiline':False]
['text':'*
 * A policy enum for how to serialize literal values.
 ','line_number':61,'multiline':True]
['text':' The default way to serialize. Just serialize whatever literals were given if they are still','line_number':65,'multiline':False]
['text':' available, or whatever you parsed them to. This is expected to be able to parse again, since','line_number':66,'multiline':False]
['text':' it worked the first time.','line_number':67,'multiline':False]
['text':' Serialize any literal value as "?number" or similar. For example "?bool" for any boolean. Use','line_number':69,'multiline':False]
['text':' 'debugTypeString()' helper.','line_number':70,'multiline':False]
['text':' Serialize any literal value to one canonical value of the given type, with the constraint','line_number':72,'multiline':False]
['text':' that the chosen representative value should be parseable in this context. There are some','line_number':73,'multiline':False]
['text':' default implementations that will usually work (e.g. using the number 1 almost always works','line_number':74,'multiline':False]
['text':' for numbers), but serializers should be careful to think about and test this if their parsers','line_number':75,'multiline':False]
['text':' reject certain values.','line_number':76,'multiline':False]
['text':'*
 * A struct with options for how you want to serialize a match or aggregation expression.
 ','line_number':80,'multiline':True]
['text':' The default serialization options for a query shape. No need to redact identifiers for the','line_number':86,'multiline':False]
['text':' this purpose. We may do that on the $queryStats read path.','line_number':87,'multiline':False]
['text':'*
     * Checks if this SerializationOptions represents the same options as another
     * SerializationOptions. Note it cannot compare whether the two 'transformIdentifiersCallback's
     * are the same - the language purposefully leaves the comparison operator undefined.
     ','line_number':93,'multiline':True]
['text':' You cannot well determine std::function equivalence in C++, so this is the best we'll','line_number':100,'multiline':False]
['text':' do.','line_number':101,'multiline':False]
['text':' Helper function for removing identifiable information (like collection/db names).','line_number':107,'multiline':False]
['text':' Note: serializeFieldPath/serializeFieldPathFromString should be used for field','line_number':108,'multiline':False]
['text':' names.','line_number':109,'multiline':False]
['text':' Helper functions for applying hmac to BSONObj. Does not take into account anything to do with','line_number':147,'multiline':False]
['text':' MQL semantics, removes all field names and literals in the passed in obj.','line_number':148,'multiline':False]
['text':'*
     * Helper method to call 'serializeLiteral()' on 'e' and append the resulting value to 'bob'
     * using the same name as 'e'.
     ','line_number':182,'multiline':True]
['text':'*
     * Helper method to call 'serializeLiteral()' on 'v' and append the result to 'bob' using field
     * name 'fieldName'.
     ','line_number':188,'multiline':True]
['text':'*
     * Depending on the configured 'literalPolicy', serializeLiteral will return the appropriate
     * value for adding literals to serialization output:
     * - If 'literalPolicy' is 'kUnchanged', returns the input value unmodified.
     * - If it is 'kToDebugTypeString', computes and returns the type string as a string Value.
     * - If it is 'kToRepresentativeValue', it returns an arbitrary value of the same type as the
     *   one given. For any number, this will be the number 1. For any boolean this will be true.
     *   If the 'representativeValue' parameter if it is not none, returns it (regardless of type).
     *
     * Example usage: BSON("myArg" << options.serializeLiteral(_myArg));
     ','line_number':197,'multiline':True]
['text':' 'literalPolicy' is an independent option to serialize in a general format with the aim of','line_number':213,'multiline':False]
['text':' similar "shaped" queries serializing to the same object. For example, if set to','line_number':214,'multiline':False]
['text':' 'kToDebugTypeString', then the serialization of {a: {$gt: 2}} should result in {a: {$gt:','line_number':215,'multiline':False]
['text':' '?number'}}, as will the serialization of {a: {$gt: 3}}.','line_number':216,'multiline':False]
['text':'','line_number':217,'multiline':False]
['text':' "Literal" here is meant to stand in contrast to expression arguments, as in the $gt','line_number':218,'multiline':False]
['text':' expressions in {$and: [{a: {$gt: 3}}, {b: {$gt: 4}}]}. There the only literals are 3 and 4,','line_number':219,'multiline':False]
['text':' so the serialization expected for 'kToDebugTypeString' would be {$and: [{a: {$gt:','line_number':220,'multiline':False]
['text':' '?number'}}, {b: {$lt: '?number'}}]}.','line_number':221,'multiline':False]
['text':' If true the caller must set transformIdentifiersCallback. 'transformIdentifiers' if set along','line_number':224,'multiline':False]
['text':' with a strategy the redaction strategy will be called on any personal identifiable','line_number':225,'multiline':False]
['text':' information (e.g., field paths/names, collection names) encountered before serializing them.','line_number':226,'multiline':False]
['text':' For aggregation indicate whether we should use the more verbose serialization format.','line_number':230,'multiline':False]
['text':' If set to true, serializes InMatchExpresions by using the sorted and de-duped list of','line_number':233,'multiline':False]
['text':' elements. Otherwise, serializes InMatchExpressions using the original (unsorted) list of','line_number':234,'multiline':False]
['text':' elements. This flag has no effect on other types of MatchExpressions.','line_number':235,'multiline':False]
['text':' namespace mongo','line_number':239,'multiline':False]
