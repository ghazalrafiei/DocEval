['text':'*
 *    Copyright (C) 2019-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 * Helpers for building $lookup.
 ','line_number':97,'multiline':True]
['text':'*
 * De-facto MQL semantics for matching local or foreign records to 'null' is complex and therefore
 * is causing complex SBE trees to implement it. This comment describes the semantics.
 *
 * =================================================================================================
 * Definitions:
 *  1. "path" or "path spec" - the sequence of field names to access nested objects
 *  2. "resolved path" - the sequence of objects a path has been resolved to inside a particular
 *      object. If some of the fields are arrays, there might be multiple resolved paths that
 *      correspond to the same path spec. We'll denote a resolved path with a string that encodes
 *      which elements of the arrays have been accessed. For example, for a path "a.b.c" resolved
 *      paths might look like "a.b.c", "a.b._", "a.0.b.0.c" or "a.0.b.1._" (underscore shows that
 *      couldn't continue resolving the path).
 *  3. "terminal" - the value at the end of a resolved path, if the resolved path terminates before
 *      fully implementing a path spec, we'll call the terminal "missing".
 *
 * For example, given object {a: [{b: [{c: [1,2]}, {no_c: 3}]}, {b: {c: 4}}, {no_b: 5}]} and path
 * spec 'a.b.c', there are four resolved paths:
 *  - a.0.b.0.c - terminal: [1,2]
 *  - a.0.b.1._ - terminal: missing
 *  - a.1.b.c   - terminal: 4
 *  - a.2._     - terminal: missing
 *
 * =================================================================================================
 * Matching local records to null
 *
 * Foreign record {key: null}, assuming foreignField:'key', would match to local records that meet
 * the following conditions when traversing localField path:
 *
 * 1. there is a terminal with value 'null' or a value of array that contains 'null'. For example,
 *    if localField:"a.b", the following records would match:
 *      {a: {b: null}}
 *      {a: {b: [1, null, 2]}
 *      {a: [{b: [1, null, 2]}, {b: 3}]}
 *
 * 2. all terminals are either missing or have value of an empty array. For example, if
 *    localField:'a.b', the following records would match:
 *      {a: {b: []}}
 *      {a: {no_b: 1}}
 *      {a: [{b: []}, {no_b: 1}]}
 *      {a: [1, 2]}
 *      {no_a: 1}
 *
 * =================================================================================================
 * Matching foreign records to null (same as in the 'find' sub-system)
 *
 * Local record {key: null}, assuming localField:'key', would match to foreign records that meet the
 * following conditions when traversing foreignField path:

 * 1. (same as when matching local) there is a terminal with value 'null' or a value of array that
 *    contains 'null'. For example, if foreignField:'a.b', the following records would match:
 *      {a: {b: null}}
 *      {a: {b: [1, null, 2]}
 *      {a: [{b: [1, null, 2]}, {b: 3}]}
 *
 * 2. there is a missing terminal, such that the last value on the resolved path to this terminal
 *    is not a scalar inside array. For example, if foreignField:"a.b.c", the following records
 *    would match:
 *      {a: {b: {no_c: 1}}} // a.b._ last value {no_c: 1} isn't a scalar
 *      {a: {b: 1}} // a.b._ last value 1 is a scalar but it's not inside an array
 *      {a: [{b: {no_c: 1}}, {b: {c: 2}}]} // a.0.b._ last value {no_c: 1} isn't a scalar
 *      {a: [{b: [{c: 1}, {c: 2}]}, {b: [{c: 3}, {no_c: 4}]]} // a.1.b.1._ last value {no_c: 4}
 *      {a: 1} // a._ last value 1 is a scalar but it's not inside an array
 *      {no_a: 1} // _ last value {no_a: 1} isn't a scalar
 *
 *    but these records won't match:
 *      {a: [1, 2]} // a.0._ and a.1._ end in scalar values inside array
 *      {a: {b: [1, 2]}} // a.b.0._ and a.b.1._ end in scalar values inside array
 *      {a: [{b: [1, 2]}, 3]} // a.0.b.0._, a.0.b.1._ and a.1.b._ end in scalar values inside arrays
 ','line_number':104,'multiline':True]
['text':' Creates stages for traversing path 'fp' in the record from 'inputSlot' that implement MQL','line_number':177,'multiline':False]
['text':' semantics for local collections. The semantics never treat terminal arrays as whole values and','line_number':178,'multiline':False]
['text':' match to null per "Matching local records to null" above. Returns one key value at a time.','line_number':179,'multiline':False]
['text':' For example, if the record in the 'inputSlot' is:','line_number':180,'multiline':False]
['text':'     {a: [{b:[1,[2,3]]}, {b:4}, {b:1}, {b:2}]},','line_number':181,'multiline':False]
['text':' the returned values for path "a.b" will be streamed as: 1, [2,3], 4, 1, 2.','line_number':182,'multiline':False]
['text':' Empty arrays and missing are skipped, that is, if the record in the 'inputSlot' is:','line_number':183,'multiline':False]
['text':'     {a: [{b:1}, {b:[]}, {no_b:42}, {b:2}]},','line_number':184,'multiline':False]
['text':' the returned values for path "a.b" will be streamed as: 1, 2.','line_number':185,'multiline':False]
['text':' keyValueSlot ','line_number':186,'multiline':True]
['text':' child stage ','line_number':206,'multiline':True]
['text':' outIndex ','line_number':209,'multiline':True]
['text':' preserveNullAndEmptyArrays ','line_number':210,'multiline':True]
['text':' Creates stages for traversing path 'fp' in the record from 'inputSlot' that implement MQL','line_number':217,'multiline':False]
['text':' semantics for foreign collections. Returns one key value at a time, including terminal arrays as','line_number':218,'multiline':False]
['text':' a whole value. For example,','line_number':219,'multiline':False]
['text':' if the record in the 'inputSlot' is:','line_number':220,'multiline':False]
['text':'     {a: [{b:[1,[2,3]]}, {b:4}, {b:1}, {b:2}]},','line_number':221,'multiline':False]
['text':' the returned values for path "a.b" will be streamed as: 1, [2,3], [1, [2, 3]], 4, 1, 2.','line_number':222,'multiline':False]
['text':' Scalars inside arrays on the path are skipped, that is, if the record in the 'inputSlot' is:','line_number':223,'multiline':False]
['text':'     {a: [42, {b:{c:1}}, {b: [41,42,{c:2}]}, {b:42}, {b:{c:3}}]},','line_number':224,'multiline':False]
['text':' the returned values for path "a.b.c" will be streamed as: 1, 2, null, 3.','line_number':225,'multiline':False]
['text':' Replaces other missing terminals with 'null', that is, if the record in the 'inputSlot' is:','line_number':226,'multiline':False]
['text':'     {a: [{b:1}, {b:[]}, {no_b:42}, {b:2}]},','line_number':227,'multiline':False]
['text':' the returned values for path "a.b" will be streamed as: 1, [], null, 2.','line_number':228,'multiline':False]
['text':' keyValueSlot ','line_number':229,'multiline':True]
['text':' 'inputSlot' must contain a document and, by definition, it's not inside an array, so','line_number':245,'multiline':False]
['text':' can get field unconditionally.','line_number':246,'multiline':False]
['text':' Don't get field from scalars inside arrays (it would fail but we also don't want to','line_number':250,'multiline':False]
['text':' fill with "null" in this case to match the MQL semantics described above.)','line_number':251,'multiline':False]
['text':' For the terminal array we will do the extra work of adding the array itself to the stream','line_number':269,'multiline':False]
['text':' (see below) but for the non-termial path components we only need to unwind array','line_number':270,'multiline':False]
['text':' elements.','line_number':271,'multiline':False]
['text':' child stage ','line_number':274,'multiline':True]
['text':' outIndex ','line_number':277,'multiline':True]
['text':' preserveNullAndEmptyArrays ','line_number':278,'multiline':True]
['text':' For the terminal field part, both the array elements and the array itself are considered as','line_number':285,'multiline':False]
['text':' keys. To implement this, we use a "union" stage, where the first branch produces array','line_number':286,'multiline':False]
['text':' elements and the second branch produces the array itself. To avoid re-traversing the path, we','line_number':287,'multiline':False]
['text':' pass the already traversed path to the "union" via "nlj" stage. However, for scalars 'unwind'','line_number':288,'multiline':False]
['text':' produces the scalar itself and we don't want to add it to the stream twice -- this is handled','line_number':289,'multiline':False]
['text':' by the 'branch' stage.','line_number':290,'multiline':False]
['text':' For example, for foreignField = "a.b" this part of the tree would look like:','line_number':291,'multiline':False]
['text':' [2] nlj [] [s17]','line_number':292,'multiline':False]
['text':'     left','line_number':293,'multiline':False]
['text':'         # Get the terminal value on the path, it will be placed in s17, it might be a scalar','line_number':294,'multiline':False]
['text':'         # or it might be an array.','line_number':295,'multiline':False]
['text':'         [2] project [s17 = if (','line_number':296,'multiline':False]
['text':'               isObject (s15) || ! isArray (s14), fillEmpty (getField (s15, "b"), null),','line_number':297,'multiline':False]
['text':'               Nothing)]','line_number':298,'multiline':False]
['text':'         [2] unwind s15 s16 s14 true','line_number':299,'multiline':False]
['text':'         [2] project [s14 = fillEmpty (getField (s7 = inputSlot, "a"), null)]','line_number':300,'multiline':False]
['text':'         [2] limit 1','line_number':301,'multiline':False]
['text':'         [2] coscan','line_number':302,'multiline':False]
['text':'     right','line_number':303,'multiline':False]
['text':'         # Process the terminal value depending on whether it's an array or a scalar/object.','line_number':304,'multiline':False]
['text':'         [2] branch {isArray (s17)} [s21]','line_number':305,'multiline':False]
['text':'           # If s17 is an array, unwind it and union with the value of the array itself.','line_number':306,'multiline':False]
['text':'           [s20] [2] union [s20] [','line_number':307,'multiline':False]
['text':'                 [s18] [2] unwind s18 s19 s17 true','line_number':308,'multiline':False]
['text':'                       [2] limit 1','line_number':309,'multiline':False]
['text':'                       [2] coscan ,','line_number':310,'multiline':False]
['text':'                 [s17] [2] limit 1','line_number':311,'multiline':False]
['text':'                       [2] coscan','line_number':312,'multiline':False]
['text':'                 ]','line_number':313,'multiline':False]
['text':'           # If s17 isn't an array, don't need to do anything and simply return s17.','line_number':314,'multiline':False]
['text':'           [s17] [2] limit 1','line_number':315,'multiline':False]
['text':'                 [2] coscan','line_number':316,'multiline':False]
['text':' child stage ','line_number':320,'multiline':True]
['text':' outIndex ','line_number':323,'multiline':True]
['text':' preserveNullAndEmptyArrays ','line_number':324,'multiline':True]
['text':' outerProjects ','line_number':349,'multiline':True]
['text':' outerCorrelated ','line_number':350,'multiline':True]
['text':' predicate ','line_number':351,'multiline':True]
['text':' keyValuesSetSlot ','line_number':358,'multiline':True]
['text':' Returns the vector of local slots to be used in lookup join, including the record slot and','line_number':377,'multiline':False]
['text':' metadata slots produced by local side.','line_number':378,'multiline':False]
['text':' Creates stages for traversing path 'fp' in the record from 'inputSlot'. Puts the set of key','line_number':385,'multiline':False]
['text':' values into 'keyValuesSetSlot. For example, if the record in the 'inputSlot' is:','line_number':386,'multiline':False]
['text':'     {a: [{b:[1,[2,3]]}, {b:4}, {b:1}, {b:2}]},','line_number':387,'multiline':False]
['text':' the returned slot will contain for path "a.b" a set of {1, 2, 4, [2,3]}.','line_number':388,'multiline':False]
['text':' If the stream produces no values, that is, would result in an empty set, the empty set is','line_number':389,'multiline':False]
['text':' replaced with a set that contains a single 'null' value, so that it matches MQL semantics when','line_number':390,'multiline':False]
['text':' empty arrays and all missing are matched to 'null'.','line_number':391,'multiline':False]
['text':' keyValuesSetSlot ','line_number':392,'multiline':True]
['text':' Create the branch to stream individual key values from every terminal of the path.','line_number':401,'multiline':False]
['text':' Re-pack the individual key values into a set. We don't cap "addToSet" here because its size','line_number':406,'multiline':False]
['text':' is bounded by the size of the record.','line_number':407,'multiline':False]
['text':' groupBy slots - "none" means creating a single group ','line_number':421,'multiline':True]
['text':' we group _all_ key values into a single set, so collator is irrelevant ','line_number':423,'multiline':True]
['text':' The set in 'keyValuesSetSlot' might end up empty if the localField contained only missing and','line_number':428,'multiline':False]
['text':' empty arrays (e.g. path "a.b" in {a: [{no_b:1}, {b:[]}]}). The semantics of MQL for local','line_number':429,'multiline':False]
['text':' keys require these cases to match to 'null', so we replace the empty set with a constant set','line_number':430,'multiline':False]
['text':' that contains a single 'null' value. The set of foreign key values also can be empty but it','line_number':431,'multiline':False]
['text':' should produce no matches so we leave it empty.','line_number':432,'multiline':False]
['text':' NOLINT(bugprone-use-after-move)','line_number':435,'multiline':False]
['text':' Attach the set of key values to the original local record.','line_number':443,'multiline':False]
['text':' NOLINT(bugprone-use-after-move)','line_number':446,'multiline':False]
['text':' outerCorrelated ','line_number':448,'multiline':True]
['text':' predicate ','line_number':449,'multiline':True]
['text':' Creates stages for grouping matched foreign records into an array. If there's no match, the','line_number':455,'multiline':False]
['text':' stages return an empty array instead.','line_number':456,'multiline':False]
['text':' resultSlot ','line_number':457,'multiline':True]
['text':' $lookup's aggregates the matching records into an array. We currently don't have a stage','line_number':463,'multiline':False]
['text':' that could do this grouping _after_ Nlj, so we achieve it by having a hash_agg inside the','line_number':464,'multiline':False]
['text':' inner branch that aggregates all matched records into a single accumulator. When there','line_number':465,'multiline':False]
['text':' are no matches, return an empty array.','line_number':466,'multiline':False]
['text':' groupBy slots ','line_number':472,'multiline':True]
['text':' collatorSlot, no collation here because we want to return all matches "as is" ','line_number':478,'multiline':True]
['text':' 'accumulatorSlot' is either Nothing or contains an array of size two, where the front element','line_number':486,'multiline':False]
['text':' is the array of matched records and the back element is their cumulative size (in bytes).','line_number':487,'multiline':False]
['text':' $lookup is an _outer_ left join that returns an empty array for "as" field rather than','line_number':498,'multiline':False]
['text':' dropping the unmatched local records. The branch that accumulates the matched records into an','line_number':499,'multiline':False]
['text':' array returns either 1 or 0 results, so to return an empty array for no-matches case we union','line_number':500,'multiline':False]
['text':' this branch with a const scan that produces an empty array but limit it to 1, so if the given','line_number':501,'multiline':False]
['text':' branch does produce a record, only that record is returned.','line_number':502,'multiline':False]
['text':' Immediately take ownership of the new array (we could use a ValueGuard here but we'll','line_number':504,'multiline':False]
['text':' need the constant below anyway).','line_number':505,'multiline':False]
['text':' inputs ','line_number':516,'multiline':True]
['text':' limit ','line_number':522,'multiline':True]
['text':'*
 * Build keys set for NLJ foreign side using traverseF expression. Creates stages that extract key
 * values from the given foreign record, compares them to the local key values and groups the
 * matching records into an array.
 *
 * The traverseF expression will iterate each key value, including terminal arrays as
 * a whole value, and compare it against local key set 'localKeySlot'. For example,
 * if the record in the 'foreignRecordSlot' is:
 *     {a: [{b:[1,[2,3]]}, {b:4}, {b:1}, {b:2}]},
 * path "a.b" will be iterated as: 1, [2,3], [1, [2, 3]], 4, 1, 2.
 * Scalars inside arrays on the path are skipped, that is, if the record in the 'foreignRecordSlot'
 * is:  {a: [42, {b:{c:1}}, {b: [41,42,{c:2}]}, {b:42}, {b:{c:3}}]},
 * path "a.b.c" will be iterated as: 1, 2, null, 3.
 * Replaces other missing terminals with 'null', that is, if the record in the 'foreignRecordSlot'
 * is:  {a: [{b:1}, {b:[]}, {no_b:42}, {b:2}]},
 * path "a.b" will be iterated as: 1, [], null, 2.
 *
 * Here is an example plan for the NLJ inner side:
 * limit 1
 * union [unionOutputSlot] [
 *   branch0[projOutputSlot]
 *     project [projOutputSlot = getElement(groupSlot, 0)]
 *     group [] [groupSlot = addToArrayCapped(foreignRecordSlot, 104857600)]
 *     filter {traverseF (
 *       let [
 *           l11.0 = fillEmpty (getField (foreignRecordSlot, "a"), null)
 *       ]
 *       in
 *           if typeMatch (l11.0, 24)
 *           then l11.0
 *           else Nothing
 *       , lambda(l3.0) {
 *           if fillEmpty (isObject (l3.0), true)
 *           then traverseF (
 *             fillEmpty (getField (l3.0, "b"), null), lambda(l2.0) {isMember (l2.0, localKeySlot)},
 *             true),
 *           else false
 *        }, false)}
 *     scan foreignRecordSlot recordIdSlot none none none none [] @uuid true false
 * branch1[emptySlot] project [emptySlot = []] limit 1 coscan
 * ]
 ','line_number':525,'multiline':True]
['text':' matched docs ','line_number':567,'multiline':True]
['text':' Recursively create traverseF expressions to iterate elements in 'foreignRecordSlot' with path','line_number':580,'multiline':False]
['text':' 'foreignFieldName', and check if key is in set 'localKeySlot'.','line_number':581,'multiline':False]
['text':'','line_number':582,'multiline':False]
['text':' If a non-terminal field is an array, we will ignore any element that is not an object inside','line_number':583,'multiline':False]
['text':' the array.','line_number':584,'multiline':False]
['text':' Non object/array field will be converted into Nothing, passing along recursive traverseF','line_number':594,'multiline':False]
['text':' and will be treated as null to compared against local key set.','line_number':595,'multiline':False]
['text':'compareArray','line_number':614,'multiline':True]
['text':' Ignoring the nulls produced by missing field in array.','line_number':617,'multiline':False]
['text':' Group the matched foreign documents into a list.','line_number':627,'multiline':False]
['text':' It creates a union stage internally so that when there's no matching foreign records, an','line_number':628,'multiline':False]
['text':' empty array will be returned.','line_number':629,'multiline':False]
['text':' matched docs ','line_number':638,'multiline':True]
['text':' Build the outer branch that produces the set of local key values.','line_number':652,'multiline':False]
['text':' Build the inner branch that will get the foreign key values, compare them to the local key','line_number':662,'multiline':False]
['text':' values and accumulate all matching foreign records into an array that is placed into','line_number':663,'multiline':False]
['text':' 'matchedRecordsSlot'.','line_number':664,'multiline':False]
['text':' 'innerRootStage' should not participate in trial run tracking as the number of reads that','line_number':674,'multiline':False]
['text':' it performs should not influence planning decisions made for 'outerRootStage'.','line_number':675,'multiline':False]
['text':' Connect the two branches with a nested loop join. For each outer record with a corresponding','line_number':678,'multiline':False]
['text':' value in the 'localKeySlot', the inner branch will be executed and will place the result into','line_number':679,'multiline':False]
['text':' 'matchedRecordsSlot'.','line_number':680,'multiline':False]
['text':' outerCorrelated ','line_number':685,'multiline':True]
['text':' predicate ','line_number':686,'multiline':True]
['text':'
 * Build $lookup stage using index join strategy. Below is an example plan for the aggregation
 * [{$lookup: {localField: "a", foreignField: "b"}}] with an index {b: 1} on the foreign
 * collection. Note that parts reading the local values and constructing the resulting document are
 * omitted.
 *
 * nlj [foreignDocument] [foreignDocument]
 * left
 *   nlj
 *   left
 *     nlj [lowKey, highKey]
 *     left
 *       nlj
 *       left
 *         unwind localKeySet localValue
 *         limit 1
 *         coscan
 *       right
 *         project lowKey = ks (1, 0, valueForIndexBounds, 1),
 *                 highKey = ks (1, 0, valueForIndexBounds, 2)
 *         union [valueForIndexBounds] [
 *           cfilter {isNull (localValue)}
 *           project [valueForIndexBounds = undefined]
 *           limit 1
 *           coscan
 *           ,
 *           cfilter {isArray (localValue)}
 *           project [valueForIndexBounds = fillEmpty (getElement (localValue, 0), undefined)]
 *           limit 1
 *           coscan
 *           ,
 *           project [valueForIndexBounds = localValue]
 *           limit 1
 *           coscan
 *         ]
 *     right
 *       ixseek lowKey highKey recordId @"b_1"
 *   right
 *     limit 1
 *     seek s21 foreignDocument recordId @"foreign collection"
 * right
 *   limit 1
 *   filter {isMember (foreignValue, localValueSet)}
 *   // Below is the tree performing path traversal on the 'foreignDocument' and producing value
 *   // into 'foreignValue'.
 *
 ','line_number':691,'multiline':True]
['text':' Build the outer branch that produces the correlated local key slot.','line_number':766,'multiline':False]
['text':' Unwind local keys one by one into 'singleLocalValueSlot'.','line_number':776,'multiline':False]
['text':' inSlot ','line_number':779,'multiline':True]
['text':' outField ','line_number':780,'multiline':True]
['text':' outIndex ','line_number':781,'multiline':True]
['text':' preserveNullAndEmptyArrays ','line_number':782,'multiline':True]
['text':' We need to lookup value in 'singleLocalValueSlot' in the index defined on the foreign','line_number':785,'multiline':False]
['text':' collection. To do this, we need to generate set of point intervals corresponding to this','line_number':786,'multiline':False]
['text':' value. Single value can correspond to multiple point intervals:','line_number':787,'multiline':False]
['text':' - Null values:','line_number':788,'multiline':False]
['text':'   a. [Null, Null]','line_number':789,'multiline':False]
['text':'   b. [Undefined, Undefined]','line_number':790,'multiline':False]
['text':' - Array values:','line_number':791,'multiline':False]
['text':'   a. If array is empty, [Undefined, Undefined]','line_number':792,'multiline':False]
['text':'   b. If array is NOT empty, [array[0], array[0]] (point interval composed from the first','line_number':793,'multiline':False]
['text':'      array element). This is needed to match {_id: 0, a: [[1, 2]]} to {_id: 0, b: [1, 2]}.','line_number':794,'multiline':False]
['text':' - All other types, including array itself as a value, single point interval [value, value].','line_number':795,'multiline':False]
['text':'   This is needed for arrays to match {_id: 1, a: [[1, 2]]} to {_id: 0, b: [[1, 2], 42]}.','line_number':796,'multiline':False]
['text':'','line_number':797,'multiline':False]
['text':' To implement these rules, we use the union stage:','line_number':798,'multiline':False]
['text':'   union pointValue [','line_number':799,'multiline':False]
['text':'       // Branch 1','line_number':800,'multiline':False]
['text':'       cfilter isNull(rawValue)','line_number':801,'multiline':False]
['text':'       project pointValue = Undefined','line_number':802,'multiline':False]
['text':'       limit 1','line_number':803,'multiline':False]
['text':'       coscan','line_number':804,'multiline':False]
['text':'       ,','line_number':805,'multiline':False]
['text':'       // Branch 2','line_number':806,'multiline':False]
['text':'       filter isArray(rawValue) && !isMember(pointValue, localKeyValueSet)','line_number':807,'multiline':False]
['text':'       project pointValue = fillEmpty(','line_number':808,'multiline':False]
['text':'           getElement(rawValue, 0),','line_number':809,'multiline':False]
['text':'           Undefined','line_number':810,'multiline':False]
['text':'       )','line_number':811,'multiline':False]
['text':'       limit 1','line_number':812,'multiline':False]
['text':'       coscan','line_number':813,'multiline':False]
['text':'       ,','line_number':814,'multiline':False]
['text':'       // Branch 3','line_number':815,'multiline':False]
['text':'       project pointValue = rawValue','line_number':816,'multiline':False]
['text':'       limit 1','line_number':817,'multiline':False]
['text':'       coscan','line_number':818,'multiline':False]
['text':'   ]','line_number':819,'multiline':False]
['text':'','line_number':820,'multiline':False]
['text':' For null values, only branches (1) and (3) produce values. For array values, only branches','line_number':821,'multiline':False]
['text':' (2) and (3) produce values. For all other types, only (3) produces value.','line_number':822,'multiline':False]
['text':'IsConst','line_number':828,'multiline':True]
['text':'IsConst','line_number':847,'multiline':True]
['text':' For hashed indexes, we need to hash value before computing keystrings.','line_number':863,'multiline':False]
['text':' Calculate the low key and high key of each individual local field. They are stored in','line_number':874,'multiline':False]
['text':' 'lowKeySlot' and 'highKeySlot', respectively. These two slots will be made available in','line_number':875,'multiline':False]
['text':' the loop join stage to perform index seek. We also set the 'indexKeyPatternSlot' constant','line_number':876,'multiline':False]
['text':' for the seek stage later to perform consistency check.','line_number':877,'multiline':False]
['text':' To ensure that we compute index bounds for all local values, introduce loop join, where','line_number':907,'multiline':False]
['text':' unwinding of local values happens on the right side and index generation happens on the left','line_number':908,'multiline':False]
['text':' side.','line_number':909,'multiline':False]
['text':' outerProjects ','line_number':912,'multiline':True]
['text':' outerCorrelated ','line_number':913,'multiline':True]
['text':' predicate ','line_number':914,'multiline':True]
['text':' Perform the index seek based on the 'lowKeySlot' and 'highKeySlot' from the outer side.','line_number':917,'multiline':False]
['text':' The foreign record id of the seek is stored in 'foreignRecordIdSlot'. We also keep','line_number':918,'multiline':False]
['text':' 'indexKeySlot' and 'snapshotIdSlot' for the seek stage later to perform consistency','line_number':919,'multiline':False]
['text':' check.','line_number':920,'multiline':False]
['text':' forward ','line_number':927,'multiline':True]
['text':' indexKeysToInclude ','line_number':932,'multiline':True]
['text':' vars ','line_number':933,'multiline':True]
['text':' Loop join the low key and high key generation with the index seek stage to produce the','line_number':939,'multiline':False]
['text':' foreign record id to seek.','line_number':940,'multiline':False]
['text':' outerProjects ','line_number':944,'multiline':True]
['text':' outerCorrelated ','line_number':945,'multiline':True]
['text':' predicate ','line_number':946,'multiline':True]
['text':' It is possible for the same record to be returned multiple times when the index is multikey','line_number':949,'multiline':False]
['text':' (contains arrays). Consider an example where local values set is '(1, 2)' and we have a','line_number':950,'multiline':False]
['text':' document with foreign field value '[1, 2]'. The same document will be returned twice:','line_number':951,'multiline':False]
['text':'  - On the first index seek, where we are looking for value '1'','line_number':952,'multiline':False]
['text':'  - On the second index seek, where we are looking for value '2'','line_number':953,'multiline':False]
['text':' To avoid such situation, we are placing 'unique' stage to prevent repeating records from','line_number':954,'multiline':False]
['text':' appearing in the result.','line_number':955,'multiline':False]
['text':' Loop join the foreign record id produced by the index seek on the outer side with seek','line_number':961,'multiline':False]
['text':' stage on the inner side to get matched foreign documents. The foreign documents are','line_number':962,'multiline':False]
['text':' stored in 'foreignRecordSlot'. We also pass in 'snapshotIdSlot', 'indexIdentSlot',','line_number':963,'multiline':False]
['text':' 'indexKeySlot' and 'indexKeyPatternSlot' to perform index consistency check during the seek.','line_number':964,'multiline':False]
['text':' unused recordId slot ','line_number':968,'multiline':True]
['text':' slotsToForward ','line_number':978,'multiline':True]
['text':' 'buildForeignMatches()' filters the foreign records, returned by the index scan, to match','line_number':980,'multiline':False]
['text':' those in 'localKeysSetSlot'. This is necessary because some values are encoded with the same','line_number':981,'multiline':False]
['text':' value in BTree index, such as undefined, null and empty array. In hashed indexes, hash','line_number':982,'multiline':False]
['text':' collisions are possible.','line_number':983,'multiline':False]
['text':' 'foreignGroupStage' should not participate in trial run tracking as the number of reads','line_number':993,'multiline':False]
['text':' that it performs should not influence planning decisions for 'localKeysSetStage'.','line_number':994,'multiline':False]
['text':' The top level loop join stage that joins each local field with the matched foreign','line_number':997,'multiline':False]
['text':' documents.','line_number':998,'multiline':False]
['text':' outerCorrelated ','line_number':1002,'multiline':True]
['text':'matched docs','line_number':1008,'multiline':True]
['text':' Build the outer branch that produces the set of local key values.','line_number':1021,'multiline':False]
['text':' Build the inner branch that produces the set of foreign key values.','line_number':1031,'multiline':False]
['text':' 'foreignKeyStage' should not participate in trial run tracking as the number of','line_number':1041,'multiline':False]
['text':' reads that it performs should not influence planning decisions for 'outerRootStage'.','line_number':1042,'multiline':False]
['text':' Build lookup stage that matches the local and foreign rows and aggregates the','line_number':1045,'multiline':False]
['text':' foreign values in an array.','line_number':1046,'multiline':False]
['text':' Add a projection that makes so that empty array is returned if no foreign row were matched.','line_number':1059,'multiline':False]
['text':'matched docs','line_number':1073,'multiline':True]
['text':'
 * Builds a project stage that projects an empty array for each local document.
 ','line_number':1115,'multiline':True]
['text':' Extract values of all fields along the path except the last one.','line_number':1141,'multiline':False]
['text':' Construct new objects for each path level.','line_number':1153,'multiline':False]
['text':' objSlot ','line_number':1162,'multiline':True]
['text':' rootSlot ','line_number':1163,'multiline':True]
['text':' fieldBehaviour ','line_number':1164,'multiline':True]
['text':' fields ','line_number':1165,'multiline':True]
['text':' projectFields ','line_number':1166,'multiline':True]
['text':' projectVars ','line_number':1167,'multiline':True]
['text':' forceNewObject ','line_number':1168,'multiline':True]
['text':' returnOldObject ','line_number':1169,'multiline':True]
['text':' objSlot ','line_number':1173,'multiline':True]
['text':' rootSlot ','line_number':1174,'multiline':True]
['text':' fieldBehaviour ','line_number':1175,'multiline':True]
['text':' fields ','line_number':1176,'multiline':True]
['text':' projectFields ','line_number':1177,'multiline':True]
['text':' projectVars ','line_number':1178,'multiline':True]
['text':' forceNewObject ','line_number':1179,'multiline':True]
['text':' returnOldObject ','line_number':1180,'multiline':True]
['text':' namespace','line_number':1187,'multiline':False]
['text':' When foreign collection doesn't exist, we create stages that simply append empty','line_number':1207,'multiline':False]
['text':' arrays to each local document and do not consider the case that foreign collection','line_number':1208,'multiline':False]
['text':' may be created during the query, since we cannot easily create dynamic plan stages','line_number':1209,'multiline':False]
['text':' and it has messier semantics. Builds a project stage that projects an empty array for','line_number':1210,'multiline':False]
['text':' each local document.','line_number':1211,'multiline':False]
['text':' snapshotIdSlot ','line_number':1247,'multiline':True]
['text':' indexIdentSlot ','line_number':1248,'multiline':True]
['text':' indexKeySlot ','line_number':1249,'multiline':True]
['text':' indexKeyPatternSlot ','line_number':1250,'multiline':True]
['text':' oplogTsSlot ','line_number':1251,'multiline':True]
['text':' scanFieldNames ','line_number':1252,'multiline':True]
['text':' scanFieldSlots ','line_number':1253,'multiline':True]
['text':' seekRecordIdSlot ','line_number':1254,'multiline':True]
['text':' minRecordIdSlot ','line_number':1255,'multiline':True]
['text':' maxRecordIdSlot ','line_number':1256,'multiline':True]
['text':' forward ','line_number':1257,'multiline':True]
['text':' namespace mongo::stage_builder','line_number':1293,'multiline':False]
