['text':'*
 *    Copyright (C) 2020-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 * A function of type 'MakePredicateFn' can be called to generate an SbExpr which applies
 * a predicate to the value found in 'inputExpr'.
 ','line_number':101,'multiline':True]
['text':'*
 * A struct for storing context across calls to visit() methods in MatchExpressionPreVisitor,
 * MatchExpressionInVisitor, and MatchExpressionPostVisitor.
 ','line_number':107,'multiline':True]
['text':'*
         * MatchFrame's constructor has 3 parameters. 'inputExpr' provides the input source, and is
         * expected to be a local variable or a slot. 'frameId' is the FrameId of the current lambda
         * (or boost::none if there is no current lambda). By default, 'childOfElemMatchValue' is
         * false and generatePredicate() will generate a traversal for the current MatchExpression's
         * field path (using 'inputExpr' as the base of the traversal) when applying the predicate.
         * When 'childOfElemMatchValue' is set to true, generatePredicate() will ignore the current
         * MatchExpression's field path and just apply the predicate directly on 'inputExpr'.
         ','line_number':113,'multiline':True]
['text':' Set up the top-level MatchFrame.','line_number':162,'multiline':False]
['text':' The current context must be initialized either with a slot that contains the root','line_number':205,'multiline':False]
['text':' document ('rootSlot') or with the set of kField slots ('slots').','line_number':206,'multiline':False]
['text':' Don't traverse the leaf.','line_number':213,'multiline':False]
['text':' Traverse the leaf, and for arrays visit both the array's elements _and_ the array itself.','line_number':216,'multiline':False]
['text':' Traverse the leaf, and for arrays visit the array's elements but not the array itself.','line_number':219,'multiline':False]
['text':' If 'level' is currently pointing to the second last part of the field path AND the last','line_number':238,'multiline':False]
['text':' part of the field path is "", then 'childIsLeafWithEmptyName' will be true. Otherwise it','line_number':239,'multiline':False]
['text':' will be false.','line_number':240,'multiline':False]
['text':' topLevelFieldSlot ','line_number':268,'multiline':True]
['text':' When the predicate can match Nothing, we need to do some extra work for non-leaf fields.','line_number':282,'multiline':False]
['text':' Add a check that will return false if the lambda's parameter is not an object. This','line_number':284,'multiline':False]
['text':' effectively allows us to skip over cases where we would be calling getField() on a scalar','line_number':285,'multiline':False]
['text':' value or an array and getting back Nothing. The subset of such cases where we should','line_number':286,'multiline':False]
['text':' return true is handled by the previous level before execution would reach here.','line_number':287,'multiline':False]
['text':' traverseF() can return Nothing only when the lambda returns Nothing. All expressions that we','line_number':304,'multiline':False]
['text':' generate return Boolean, so there is no need for explicit fillEmpty here.','line_number':305,'multiline':False]
['text':' When the predicate can match Nothing, we need to do some extra work for non-leaf fields.','line_number':309,'multiline':False]
['text':' If the result of getField() was Nothing or a scalar value, then don't bother traversing','line_number':311,'multiline':False]
['text':' the remaining levels of the path and just decide now if we should return true or false','line_number':312,'multiline':False]
['text':' for this value.','line_number':313,'multiline':False]
['text':'*
 * Given a field path 'path' and a predicate 'makePredicate', this function generates an SBE tree
 * that will evaluate the predicate on the field path. When 'path' is not empty string (""), this
 * function generates a sequence of nested traverse operators to traverse the field path and it uses
 * 'makePredicate' to generate an SBE expression for evaluating the predicate on individual value.
 * When 'path' is empty, this function simply uses 'makePredicate' to generate an SBE expression for
 * evaluating the predicate on a single value.
 ','line_number':333,'multiline':True]
['text':' If matchExpr's parent is a ElemMatchValueMatchExpression, then we should just','line_number':351,'multiline':False]
['text':' apply the predicate directly on 'inputExpr'. 'inputExpr' will be a lambda','line_number':352,'multiline':False]
['text':' parameter that holds the value of the ElemMatchValueMatchExpression's field path.','line_number':353,'multiline':False]
['text':' If we are generating a filter over an index scan, search for a kField slot that','line_number':363,'multiline':False]
['text':' corresponds to the full path 'path'.','line_number':364,'multiline':False]
['text':' We found a kField slot that matches. We don't need to perform any traversal;','line_number':368,'multiline':False]
['text':' we can just evaluate the predicate on the slot directly and return.','line_number':369,'multiline':False]
['text':' Check if this operation is supposed to work only on the array elements and that the','line_number':375,'multiline':False]
['text':' navigation of the full path has been made available via the dedicated slot type; in this','line_number':376,'multiline':False]
['text':' case generate a special version of traverseF that doesn't have a runtime counterpart and','line_number':377,'multiline':False]
['text':' can only be processed by the block vectorizer.','line_number':378,'multiline':False]
['text':' Search for a kField slot whose path matches the first part of 'path'.','line_number':391,'multiline':False]
['text':' level ','line_number':404,'multiline':True]
['text':'*
 * Generates and pushes a constant boolean expression for either alwaysTrue or alwaysFalse.
 ','line_number':412,'multiline':True]
['text':'*
 * Generates a path traversal SBE plan stage sub-tree for matching arrays with '$size'. Applies
 * an extra project on top of the sub-tree to filter based on user provided value.
 ','line_number':422,'multiline':True]
['text':' If there's an "inputParamId" in 'matchExpr' meaning this expr got parameterized, we can','line_number':431,'multiline':False]
['text':' register a SlotId for it and use the slot directly.','line_number':432,'multiline':False]
['text':' If the expr did not get parametrized and it is less than 0, then we should always','line_number':438,'multiline':False]
['text':' return false.','line_number':439,'multiline':False]
['text':'*
 * Generates a path traversal SBE plan stage sub-tree which implements the comparison match
 * expression 'expr'. The comparison itself executes using the given 'binaryOp'.
 ','line_number':458,'multiline':True]
['text':' A 'kArrayAndItsElements' traversal mode matches the following semantics: when the path we are','line_number':469,'multiline':False]
['text':' comparing is a path to an array, the comparison is considered true if it evaluates to true','line_number':470,'multiline':False]
['text':' for the array itself or for any of the array's elements.','line_number':471,'multiline':False]
['text':' However, we use 'kArrayElementsOnly' for the general case, because the comparison with the','line_number':472,'multiline':False]
['text':' array will almost always be false. There are two exceptions:','line_number':473,'multiline':False]
['text':' 1) when the 'rhs' operand is an array and','line_number':474,'multiline':False]
['text':' 2) when the 'rhs' operand is MinKey or MaxKey.','line_number':475,'multiline':False]
['text':' In the former case, the comparison we would skip by using 'kArrayElementsOnly' mode is an','line_number':476,'multiline':False]
['text':' array-to-array comparison that can return true. In the latter case, we are avoiding a','line_number':477,'multiline':False]
['text':' potential bug where traversing the path to the empty array ([]) would prevent _any_','line_number':478,'multiline':False]
['text':' comparison, meaning a comparison like {$gt: MinKey} would return false.','line_number':479,'multiline':False]
['text':'*
 * Generates a SBE plan stage sub-tree which implements the bitwise match expression 'expr'. The
 * various bit test expressions accept a numeric, BinData or position list bitmask. Here we handle
 * building an SbExpr for both the numeric and BinData or position list forms of the bitmask.
 ','line_number':496,'multiline':True]
['text':' Build specified logical expression with branches stored on stack.','line_number':512,'multiline':False]
['text':' If an $and or $or expression does not have any children, a constant is returned.','line_number':519,'multiline':False]
['text':' For $and or $or expressions with 1 child, do nothing and return. The post-visitor for','line_number':523,'multiline':False]
['text':' the child expression has already done all the necessary work.','line_number':524,'multiline':False]
['text':' Move the children's outputs off of the matchStack into a vector in preparation for','line_number':530,'multiline':False]
['text':' calling makeBalancedBooleanOpTree().','line_number':531,'multiline':False]
['text':'*
 * A match expression pre-visitor used for maintaining nested logical expressions while traversing
 * the match expression tree.
 ','line_number':541,'multiline':True]
['text':' We evaluate $elemMatch's child in a new MatchFrame. For the child's MatchFrame, we set','line_number':562,'multiline':False]
['text':' the 'inputExpr' field to be the lambda's parameter (lambdaParam).','line_number':563,'multiline':False]
['text':' We create a new MatchFrame for evaluating $elemMatch's children. For this new MatchFrame,','line_number':574,'multiline':False]
['text':' we set the 'inputExpr' field to be the lambda's parameter (lambdaParam).','line_number':575,'multiline':False]
['text':' The QueryPlanner always converts a $text predicate into a query solution involving the','line_number':678,'multiline':False]
['text':' 'TextNode' which is translated to an SBE plan elsewhere. Therefore, no $text predicates','line_number':679,'multiline':False]
['text':' should remain in the MatchExpression tree when converting it to SBE.','line_number':680,'multiline':False]
['text':' No-op $text match expressions exist as a crutch for parsing a $text predicate without','line_number':685,'multiline':False]
['text':' having access to the FTS subsystem. We should never attempt to execute a MatchExpression','line_number':686,'multiline':False]
['text':' containing such a no-op node.','line_number':687,'multiline':False]
['text':' We're guaranteed to not fire this assertion by implementing a mechanism in the upper','line_number':702,'multiline':False]
['text':' layer which directs the query to the classic engine when an unsupported expression','line_number':703,'multiline':False]
['text':' appears.','line_number':704,'multiline':False]
['text':' If there's an "inputParamId" in this expr meaning this expr got parameterized, we can','line_number':719,'multiline':False]
['text':' register a SlotId for it and use the slot directly. Note we don't auto-parameterize','line_number':720,'multiline':False]
['text':' $in if it contains null, regexes, or nested arrays or objects.','line_number':721,'multiline':False]
['text':'*
 * A match expression post-visitor which does all the job to translate the match expression tree
 * into an SBE plan stage sub-tree.
 ','line_number':739,'multiline':True]
['text':' Move the children's outputs off of the expr stack into a vector in preparation for','line_number':820,'multiline':False]
['text':' calling makeBalancedBooleanOpTree().','line_number':821,'multiline':False]
['text':' The $expr expression is always applied to the current $$ROOT document.','line_number':867,'multiline':False]
['text':' Convert the result of the '{$expr: ..}' expression to a boolean value.','line_number':871,'multiline':False]
['text':' We have to match nulls and undefined if a 'null' is present in','line_number':900,'multiline':False]
['text':' equalities.','line_number':901,'multiline':False]
['text':' If the InMatchExpression contains regex patterns, then we need to handle the regex-only','line_number':914,'multiline':False]
['text':' case, and we also must handle the case where both equalities and regexes are present. For','line_number':915,'multiline':False]
['text':' the regex-only case, we call regexMatch() to see if any of the values match against any','line_number':916,'multiline':False]
['text':' of the regexes, and we also call isMember() to see if any of the values are of type','line_number':917,'multiline':False]
['text':' 'bsonRegex' and are considered equal to any of the regexes. For the case where both','line_number':918,'multiline':False]
['text':' regexes and equalities are present, we use the "logicOr" operator to combine the logic','line_number':919,'multiline':False]
['text':' for equalities with the logic for regexes.','line_number':920,'multiline':False]
['text':' We have to match nulls and undefined if a 'null' is present in equalities.','line_number':958,'multiline':False]
['text':' Only $expr expressions supported.','line_number':991,'multiline':False]
['text':' We want to translate this into an SBE expression that returns 'true' any time '$a.b.c'','line_number':999,'multiline':False]
['text':' is an array, and {<cmpExpr>: ["$a.b.c", <rhs>]} otherwise. (<cmpExpr> is $eq, $lt, $gt','line_number':1000,'multiline':False]
['text':' etc).','line_number':1001,'multiline':False]
['text':' First we're going to create an agg expression that of the form:','line_number':1002,'multiline':False]
['text':' {$eq: ['$$INTERNAL_FIELD_PATH_EXPR_FOR_INTERNAL_EXPR_*', <rhs>]}','line_number':1003,'multiline':False]
['text':' We'll then translate this into an SBE expression, placing the result of the LHS field','line_number':1004,'multiline':False]
['text':' path expression into the internal variable.','line_number':1005,'multiline':False]
['text':'','line_number':1006,'multiline':False]
['text':' '$$INTERNAL_FIELD_PATH_EXPR_FOR_INTERNAL_EXPR' <=== the output of '$a.b.c'','line_number':1007,'multiline':False]
['text':'','line_number':1008,'multiline':False]
['text':' We can then generate an expression of the form:','line_number':1009,'multiline':False]
['text':'','line_number':1010,'multiline':False]
['text':' let l1 = <expression for '$a.b.c.'>','line_number':1011,'multiline':False]
['text':'   if (isArray(l1)) true // Return true any time we see an array','line_number':1012,'multiline':False]
['text':'   else <expression for $eq: [l1, <rhs>]>','line_number':1013,'multiline':False]
['text':'','line_number':1014,'multiline':False]
['text':' We then coerce this to boolean, and we're done.','line_number':1015,'multiline':False]
['text':' Generate a variable name that won't conflict with anything else. Note that in agg, all','line_number':1018,'multiline':False]
['text':' variable names starting with a capital letter are reserved for internal use, so there is','line_number':1019,'multiline':False]
['text':' no risk of conflict with a user-chosen variable name.','line_number':1020,'multiline':False]
['text':' Inject the internal variable into the stage builder state, so that the expression stage','line_number':1031,'multiline':False]
['text':' builder knows that INTERNAL_FIELD_PATH_EXPR* points to the frameId/slot we generated.','line_number':1032,'multiline':False]
['text':' Generate an agg expression which does the comparison, referencing the internal variable.','line_number':1036,'multiline':False]
['text':' Translate the agg expression to SBE.','line_number':1044,'multiline':False]
['text':' Now generate the actual field path expression for the LHS.','line_number':1052,'multiline':False]
['text':' Put the LHS into the slot we generated in a let statement.','line_number':1058,'multiline':False]
['text':' Convert the result of the '{$expr: ..}' expression to a boolean value.','line_number':1062,'multiline':False]
['text':' The mod function returns the result of the mod operation between the operand and','line_number':1115,'multiline':False]
['text':' given divisor, so construct an expression to then compare the result of the operation','line_number':1116,'multiline':False]
['text':' to the given remainder.','line_number':1117,'multiline':False]
['text':' $nor is implemented as a negation of $or. First step is to build $or expression from','line_number':1129,'multiline':False]
['text':' stack.','line_number':1130,'multiline':False]
['text':' Second step is to negate the result of $or expression.','line_number':1133,'multiline':False]
['text':' Here we discard the index value of the state even if it was set by expressions below NOR.','line_number':1134,'multiline':False]
['text':' This matches the behaviour of classic engine, which does not pass 'MatchDetails' object','line_number':1135,'multiline':False]
['text':' to children of NOR and thus does not get any information on 'elemMatchKey' from them.','line_number':1136,'multiline':False]
['text':' Negate the result of $not's child.','line_number':1145,'multiline':False]
['text':' Here we discard the index value of the state even if it was set by expressions below NOT.','line_number':1146,'multiline':False]
['text':' This matches the behaviour of classic engine, which does not pass 'MatchDetails' object','line_number':1147,'multiline':False]
['text':' to children of NOT and thus does not get any information on 'elemMatchKey' from them.','line_number':1148,'multiline':False]
['text':' If there's an "inputParamId" in this expr meaning this expr got parameterized, we can','line_number':1176,'multiline':False]
['text':' register a SlotId for it and use the slot directly. Note that we don't auto-parameterize','line_number':1177,'multiline':False]
['text':' if the type set contains 'BSONType::Array'.','line_number':1178,'multiline':False]
['text':'*
 * A match expression in-visitor used for maintaining the counter of the processed child
 * expressions of the nested logical expressions in the match expression tree being traversed.
 ','line_number':1215,'multiline':True]
['text':' namespace','line_number':1285,'multiline':False]
['text':' The planner adds an $and expression without the operands if the query was empty. We can bail','line_number':1293,'multiline':False]
['text':' out early without generating the filter plan stage if this is the case.','line_number':1294,'multiline':False]
['text':' Build an array set of bit positions for the bitmask, and remove duplicates in the','line_number':1315,'multiline':False]
['text':' bitPositions vector since duplicates aren't handled in the match expression parser by','line_number':1316,'multiline':False]
['text':' checking if an item has already been seen.','line_number':1317,'multiline':False]
['text':' If there's an "inputParamId" in this expr meaning this expr got parameterized, we can','line_number':1379,'multiline':False]
['text':' register a SlotId for it and use the slot directly.','line_number':1380,'multiline':False]
['text':' An EExpression for the BinData and position list for the binary case of','line_number':1391,'multiline':False]
['text':' BitTestMatchExpressions. This function will be applied to values carrying BinData','line_number':1392,'multiline':False]
['text':' elements.','line_number':1393,'multiline':False]
['text':' Build An EExpression for the numeric bitmask case. The AllSet case tests if (mask &','line_number':1399,'multiline':False]
['text':' value) == mask, and AllClear case tests if (mask & value) == 0. The AnyClear and','line_number':1400,'multiline':False]
['text':' AnySet cases are the negation of the AllSet and AllClear cases, respectively.','line_number':1401,'multiline':False]
['text':' We round NumberDecimal values to the nearest integer to match the classic execution engine's','line_number':1412,'multiline':False]
['text':' behavior for now. Note that this behavior is _not_ consistent with MongoDB's documentation.','line_number':1413,'multiline':False]
['text':' At some point, we should consider removing this call to round() to make SBE's behavior','line_number':1414,'multiline':False]
['text':' consistent with MongoDB's documentation.','line_number':1415,'multiline':False]
['text':' Convert the value to a 64-bit integer, and then pass the converted value along with the mask','line_number':1431,'multiline':False]
['text':' to the appropriate bit-test function. If the value cannot be losslessly converted to a 64-bit','line_number':1432,'multiline':False]
['text':' integer, this expression will return Nothing.','line_number':1433,'multiline':False]
['text':' For the AnyClear and AnySet cases, negate the output of the bit-test function.','line_number':1440,'multiline':False]
['text':' isBinData and numericBitTestExpr might produce Nothing, so we wrap everything with','line_number':1445,'multiline':False]
['text':' makeFillEmptyFalse().','line_number':1446,'multiline':False]
['text':'*
 * Generates the following plan for $mod:
 * (mod(convert ( trunc(input), int64), divisor) == remainder) ?: false
 *
 * When 'inputExpr' is NaN or inf, trunc() remains unmodified and lossless conversion will return
 * Nothing, so the final result becomes false.
 ','line_number':1452,'multiline':True]
['text':' If there's related input param ids in this expr, we can register SlotIds for them, and use','line_number':1469,'multiline':False]
['text':' generated slots directly.','line_number':1470,'multiline':False]
['text':' Generally speaking, this visitor is non-destructive and does not mutate the MatchExpression','line_number':1539,'multiline':False]
['text':' tree. However, in order to apply an optimization to avoid making a copy of the 'JsFunction'','line_number':1540,'multiline':False]
['text':' object stored within 'WhereMatchExpression', we can transfer its ownership from the match','line_number':1541,'multiline':False]
['text':' expression node into the SBE plan. Hence, we need to drop the const qualifier. This should be','line_number':1542,'multiline':False]
['text':' a safe operation, given that the match expression tree is allocated on the heap, and this','line_number':1543,'multiline':False]
['text':' visitor has exclusive access to this tree (after it has been translated into an SBE tree,','line_number':1544,'multiline':False]
['text':' it's no longer used).','line_number':1545,'multiline':False]
['text':' If there's an "inputParamId" in this expr meaning this expr got parameterized, we can','line_number':1551,'multiline':False]
['text':' register a SlotId for it and use the slot directly.','line_number':1552,'multiline':False]
['text':' namespace mongo::stage_builder','line_number':1561,'multiline':False]
