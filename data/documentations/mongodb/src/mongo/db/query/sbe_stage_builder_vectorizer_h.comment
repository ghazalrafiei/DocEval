['text':'*
 *    Copyright (C) 2023-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 * ABT rewriter that constructs an equivalent tree designed to process the data in blocks.
 * Given a suitable ABT tree working on a single vectorized slot and any number of scalar slots,
 * e.g.
 *
 *    if (test(slot1)) then
 *       process1(slot1, scalar1)
 *    else
 *       process2(slot1, scalar2)
 *
 * and a set of vectorizable expressions (test/process1/process2), create a new ABT tree that can
 * process the entire block in slot1 without unpacking it into N scalar values, e.g.
 *
 *    let mask1 = block_test(slot1)
 *    in block_combine(
 *                     block_process1(mask1, slot1, scalar1),
 *                     let mask2 = bitmap_invert(mask1) in block_process2(mask2, slot1, scalar2),
 *                     mask1)
 ','line_number':42,'multiline':True]
['text':' The ABT expression produced by vectorizing the original expression tree. If not set, the','line_number':68,'multiline':False]
['text':' original expression cannot be converted into a vectorized one, usually because of missing','line_number':69,'multiline':False]
['text':' functionalities in the engine.','line_number':70,'multiline':False]
['text':' The type signature of the expression.','line_number':72,'multiline':False]
['text':' If set, it points to a slot holding a cell type that must be used in a call to a fold','line_number':74,'multiline':False]
['text':' function to obtain the correct result of the evaluation.','line_number':75,'multiline':False]
['text':' Declare the context in which the expression will be evaluated, affecting how cell values will','line_number':79,'multiline':False]
['text':' be folded at the end of the operation. In a Filter context, operations applied to array','line_number':80,'multiline':False]
['text':' values will generate a single boolean result, while, in a Project context, all the results','line_number':81,'multiline':False]
['text':' will be packed in a new array result.','line_number':82,'multiline':False]
['text':' Recursively convert the provided node into a node suitable for vectorized processing.','line_number':87,'multiline':False]
['text':' Return a result with an empty 'expr' inside if the node contains an operation that cannot be','line_number':88,'multiline':False]
['text':' processed one block at a time.','line_number':89,'multiline':False]
['text':' The externalBindings argument contains the known types for the slots referenced by the ABT','line_number':90,'multiline':False]
['text':' tree. The externalBitmapSlot argument contains the slot where another stage has already','line_number':91,'multiline':False]
['text':' computed a valid selectivity bitmap.','line_number':92,'multiline':False]
['text':' The default visitor for non-supported nodes, returning an empty value to mean "node not','line_number':97,'multiline':False]
['text':' supported".','line_number':98,'multiline':False]
['text':' Ensure that the generated tree is representing a block of measures (i.e.','line_number':120,'multiline':False]
['text':' if it's a block expanded from a cell, fold it).','line_number':121,'multiline':False]
['text':' Return an expression combining all the active bitmap masks currently in scope.','line_number':124,'multiline':False]
['text':' Helper method to report unsupported constructs.','line_number':127,'multiline':False]
['text':' The purpose of the operations being vectorized.','line_number':130,'multiline':False]
['text':' Keep track of the active mask.','line_number':133,'multiline':False]
['text':' Keep track of the type of the in-scope variables.','line_number':136,'multiline':False]
['text':' Generator for local variable frames.','line_number':139,'multiline':False]
['text':' namespace mongo::stage_builder','line_number':143,'multiline':False]
