['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' IWYU pragma: no_include "boost/intrusive/detail/iterator.hpp"','line_number':37,'multiline':False]
['text':'*
 * A wildcard index contains an unbounded set of multikey paths, therefore, it was decided to store
 * multikey path as a metadata key to a wildcard index using the following special format:
 * {["": MinKey, ] "": 1, "": "multikey.path.value" [, "": MinKey] }.
 * Where MinKey values are corresponding to regular fields of the Wildcard Index, which can never be
 * multikeys, and the actual multikey path value is prefixed by the integer value 1.
 * Some examples of Wildcard key patterns and their corresponding metadata keys
 * - {"$**": 1} --> {"": 1, "some.path": 1}
 * - {a: 1, "$**": 1} --> {"": MinKey, "": 1, "": "some.path"}
 * - {a: 1, "$**": 1, b: 1} --> {"": MinKey, "": 1, "": "some.path", "": MinKey}
 * - {a: 1, c: 1, "$**": 1, b: 1} --> {"": MinKey, "": MinKey, "": 1, "": "some.path", "": MinKey}
 * where "some.path" represents an actual multikey path in some documents.
 * The prefix of a number of MinKey values followed by the number "1" allows to differentiate
 * multikey metadata keys from user-data keys, because user-data keys always have a string value on
 * the position of the value "1" in a multikey metadata key.
 ','line_number':69,'multiline':True]
['text':'*
 * Extracts the multikey path from a metadata key stored within a wildcard index.
 ','line_number':87,'multiline':True]
['text':' Validate that the first piece of the key is the integer 1.','line_number':111,'multiline':False]
['text':'*
 * Returns IndexBoundsChecker's key pattern for the given Wildcard Index's key pattern.
 ','line_number':140,'multiline':True]
['text':' corresponds to  "$_path" fields which is always in ascending order','line_number':150,'multiline':False]
['text':' Add an order corresponding to the next field of the Wildcard Index's key pattern.','line_number':154,'multiline':False]
['text':'*
 * Retrieves from the wildcard index the set of multikey path metadata keys bounded by
 * 'indexBounds'. Returns the set of multikey paths represented by the keys.
 ','line_number':165,'multiline':True]
['text':' Add a point interval for each path up to the first numeric path component. Field "a.b.c"','line_number':250,'multiline':False]
['text':' would produce point intervals ["a", "a"], ["a.b", "a.b"] and ["a.b.c", "a.b.c"]. Field','line_number':251,'multiline':False]
['text':' "a.b.0.c" would produce point intervals ["a", "a"] and ["a.b", "a.b"].','line_number':252,'multiline':False]
['text':' If "field" contains a numeric path component then we add a range covering all subfields','line_number':258,'multiline':False]
['text':' of the non-numeric prefix.','line_number':259,'multiline':False]
['text':'*
 * Returns the postion of the wildcard field inside the Wildcard Index's keyPattern and the
 * direction of 'IndexBounds' generated for querying multikey paths.
 ','line_number':275,'multiline':True]
['text':'*
 * Returns the IndexBounds to retrieve multikey metadata keys for the given 'fieldSet'.
 ','line_number':294,'multiline':True]
['text':' Multikey metadata keys are stored in the following format:','line_number':301,'multiline':False]
['text':' '[MinKey]*, 1, <multikeypath>, [MinKey]*'.','line_number':302,'multiline':False]
['text':' A multikey metadata key is always prefixed with the number of MinKeys equal to the number of','line_number':303,'multiline':False]
['text':' regular fields in the index's keyPattern, then follows the number "1", followed by the string','line_number':304,'multiline':False]
['text':' value of the multikey path. At the end of the metadata key the number of MinKey equal to the','line_number':305,'multiline':False]
['text':' number of regular fields after the wildcard field is placed.','line_number':306,'multiline':False]
['text':' We build index bounds in the following 4 steps:','line_number':307,'multiline':False]
['text':' 1. Add the number of prefixed MinKey values, which is 0 or more.','line_number':308,'multiline':False]
['text':' 2. Add the number "1" which is always prefixed the multikey path value.','line_number':309,'multiline':False]
['text':' 3. Add the multikey path.','line_number':310,'multiline':False]
['text':' 4. Add the number of suffixed MinKey values, which is 0 or more.','line_number':311,'multiline':False]
['text':' Step 1. Add the number of prefixed MinKey values, which is 0 or more.','line_number':315,'multiline':False]
['text':' Step 2. Add the number "1" which is always prefixed the multikey path value.','line_number':322,'multiline':False]
['text':' Step 3. Add the multikey path.','line_number':327,'multiline':False]
['text':' IndexBoundsBuilder::unionize() sorts the OrderedIntervalList allowing for in order index','line_number':336,'multiline':False]
['text':' traversal.','line_number':337,'multiline':False]
['text':' Step 4. Add the number of suffixed MinKey values, which is 0 or more.','line_number':344,'multiline':False]
['text':'*
 * Return key range to retrieve all multikey metadata keys.
 ','line_number':366,'multiline':True]
['text':' forward ','line_number':413,'multiline':True]
['text':' Iterate the cursor, copying the multikey paths into an in-memory set.','line_number':418,'multiline':False]
['text':' namespace mongo','line_number':431,'multiline':False]
