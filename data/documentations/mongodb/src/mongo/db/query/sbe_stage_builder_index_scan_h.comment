['text':'*
 *    Copyright (C) 2020-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 * A list of low and high key values representing ranges over a particular index.
 ','line_number':61,'multiline':True]
['text':'*
 * This method returns a pair containing: (1) an SBE plan stage tree implementing an index scan;
 * and (2) a PlanStageSlots object containing a kRecordId slot, possibly some other kMeta slots,
 * and slots produced by the index scan that correspond to parts of the index key specified by
 * 'fieldBitset | sortKeyBitset'.
 ','line_number':67,'multiline':True]
['text':'*
 * Constructs the most simple version of an index scan from the single interval index bounds.
 *
 * In case when the 'lowKey'/'lowKeySlot' and 'highKey' are not specified, slots will be registered
 * for them in the runtime environment and their slot ids returned as a pair in the third element of
 * the tuple.
 *
 * If 'indexKeySlot' is provided, than the corresponding slot will be filled out with each KeyString
 * in the index.
 ','line_number':83,'multiline':True]
['text':'*
 * Constructs low/high key values from the given index 'bounds' if they can be represented either as
 * a single interval between the low and high keys, or multiple single intervals. If index bounds
 * for some interval cannot be expressed as valid low/high keys, then an empty vector is returned.
 ','line_number':125,'multiline':True]
['text':'*
 * Construct an array containing objects with the low and high keys for each interval.
 *
 * E.g., [ {l: KS(...), h: KS(...)},
 *         {l: KS(...), h: KS(...)}, ... ]
 ','line_number':135,'multiline':True]
['text':'*
 * Constructs a generic multi-interval index scan. Depending on the intervals will either execute
 * the optimized or the generic index scan subplan.
 *
 * This method returns a pair containing: (1) an SBE plan stage tree implementing a generic multi-
 * interval index scan; and (2) a PlanStageSlots object containing a kRecordId slot, possibly some
 * other kMeta slots, and slots produced by the index scan that correspond to parts of the index
 * key specified by 'fieldBitset | sortKeyBitset'.
 ','line_number':144,'multiline':True]
['text':' namespace mongo::stage_builder','line_number':162,'multiline':False]
