['text':'*
 *    Copyright (C) 2019-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 * Uassert that the given policy permits using computed fields in a projection.
 ','line_number':61,'multiline':True]
['text':'*
 * In some arcane situations, when a projection is empty, only contains top-level _id projections
 * and find expressions, it is non-trivial to determine the type of the projection. These rules are
 * kept purely for compatibility reasons.
 *
 * The significance of an _id inclusion or exclusion depends on the presence of the expressions find
 * $slice, $elemMatch and $meta.
 ','line_number':72,'multiline':True]
['text':' If there's a find $slice then the presence of an {_id: 1} overrides, regardless of other','line_number':87,'multiline':False]
['text':' find() expressions. If there's no _id, then it defaults to exclusion.','line_number':88,'multiline':False]
['text':' Either _id is explicitly excluded _or_ not mentioned at all, in which case we','line_number':92,'multiline':False]
['text':' default to exclusion.','line_number':93,'multiline':False]
['text':' If there's an $elemMatch (but no $slice) then it's an inclusion projection. Note that','line_number':97,'multiline':False]
['text':' this is _regardless_ of what value is provided for _id. This is consistent with the','line_number':98,'multiline':False]
['text':' behavior of most expressions: for an arbitrary $func expression, the rule is that {foo:','line_number':99,'multiline':False]
['text':' {$func: ...}}, {_id: 0, foo: {$func: ...}}, and {_id: 1, foo: {$func: ...}} are all','line_number':100,'multiline':False]
['text':' inclusions.','line_number':101,'multiline':False]
['text':' In find, {_id: 0, x: {$meta: ...}} is considered exclusion.','line_number':105,'multiline':False]
['text':' In find, {_id: 1, x: {$meta: ...}} is considered inclusion.','line_number':110,'multiline':False]
['text':' Just $meta by itself is exclusion.','line_number':115,'multiline':False]
['text':' In aggregate(), any projection with a $meta is an inclusion projection.','line_number':118,'multiline':False]
['text':' There were no expressions. So this is an {_id: 1} projection. It is an','line_number':122,'multiline':False]
['text':' inclusion. The ParseContext's type field was not marked as an inclusion, because a','line_number':123,'multiline':False]
['text':' projection {_id: 1, a: 0} is also valid, but considered exclusion.','line_number':124,'multiline':False]
['text':' There were no expressions, but there is an {_id: 0} element. This is an exclusion.  The','line_number':127,'multiline':False]
['text':' ParseContext's 'type' field was not marked as an exclusion because a projection {_id: 0,','line_number':128,'multiline':False]
['text':' a: 1} is valid but considered inclusion.','line_number':129,'multiline':False]
['text':' Default is exclusion otherwise.','line_number':133,'multiline':False]
['text':'*
 * Returns whether an element's type implies that the element is an inclusion or exclusion.
 ','line_number':137,'multiline':True]
['text':'*
 * Given the 'root' of the AST and the field 'path', returns the last inner 'ProjectionPathASTNode'
 * in the AST on that 'path'. For example, if the AST represents a projection {'a.b.c': 1} and the
 * 'path' is 'a.b',  the returned node will be 'b'. If the node doesn't exist in the tree, or if the
 * last node is a leaf node, the function returns 'nullptr'. For example, given the same projection
 * specification and the 'path' of 'a.b.c.d', the function will return 'nullptr'.
 ','line_number':153,'multiline':True]
['text':' Either find or create an internal node.','line_number':202,'multiline':False]
['text':' Properties of the projection/query.','line_number':227,'multiline':False]
['text':' Properties of the projection that need to be stored for later checks.','line_number':234,'multiline':False]
['text':' Whether there's an {_id: 1} field in the projection.','line_number':242,'multiline':False]
['text':' Whether there's an {_id: 0} field in the projection.','line_number':245,'multiline':False]
['text':'*
 * If the object matches the form of an expression ({<valid expression name>: <arguments>}) then
 * attempts to parse it as an expression and add it to the tree.

 * Returns whether the object matched the form an actual expression.
 ','line_number':285,'multiline':True]
['text':' It must be an expression.','line_number':299,'multiline':False]
['text':'*
 * Treats the given object as either a find()-only expression ($slice, $elemMatch) if allowed,
 * or as a generic agg expression, and adds it to the the tree.
 *
 * Returns whether or not the object matched the form of an expression. If not,
 * the sub object must represent a sub-projection (e.g. {a: {b: 1}}).
 ','line_number':319,'multiline':True]
['text':' Validate $elemMatch arguments and dependencies.','line_number':357,'multiline':False]
['text':' Create a MatchExpression for the elemMatch.','line_number':371,'multiline':False]
['text':' optimize expression ','line_number':379,'multiline':True]
['text':' find()-only features are not and the user tried invoking elemMatch. Here we can give a','line_number':388,'multiline':False]
['text':' nicer error than the generic "unknown expression."','line_number':389,'multiline':False]
['text':'*
 * Treats the given element as an inclusion projection, and update the tree as necessary.
 ','line_number':396,'multiline':True]
['text':' There are special rules about _id being included. _id may be included in both inclusion and','line_number':403,'multiline':False]
['text':' exclusion projections.','line_number':404,'multiline':False]
['text':' Special case: ".$" is not considered a valid projection.','line_number':427,'multiline':False]
['text':' Get everything up to the first positional operator.','line_number':432,'multiline':False]
['text':' Parse the match expression in order to ensure that no special features are used with','line_number':441,'multiline':False]
['text':' positional projection.','line_number':442,'multiline':False]
['text':' Copy the original match expression, which makes sure to preserve any input parameter ids','line_number':449,'multiline':False]
['text':' attached to the tree.','line_number':450,'multiline':False]
['text':'*
 * Treates the given element as an exclusion projection and updates the tree as necessary.
 ','line_number':471,'multiline':True]
['text':'*
 * Treats the given element as a literal value (e.g. {a: "foo"}) and updates the tree as necessary.
 ','line_number':491,'multiline':True]
['text':' Mutually recursive with parseSubObject().','line_number':512,'multiline':False]
['text':'*
 * Parses the given object and updates the tree as necessary.
 * This function will do the work of determining whether the sub object should be treated as an
 * expression or subprojection.
 ','line_number':518,'multiline':True]
['text':' Maybe it's an expression.','line_number':534,'multiline':False]
['text':' It was likely intended to be an expression. Check if it's a valid field path or not to','line_number':541,'multiline':False]
['text':' confirm.','line_number':542,'multiline':False]
['text':' The 'FieldPath' parser doesn't take positional operators into account, but those','line_number':548,'multiline':False]
['text':' are valid path projections so trim it off for this validation.','line_number':549,'multiline':False]
['text':'*
 * Determine what "type" this element of the projection is (inclusion, exclusion, sub object,
 * literal) and update the tree accordingly.
 ','line_number':574,'multiline':True]
['text':' If there is a positional projection, find only features must be enabled.','line_number':584,'multiline':False]
['text':' Be sure that uses of positional projection that were correct in versions before 4.4 that are','line_number':589,'multiline':False]
['text':' now incorrect get a good error message.','line_number':590,'multiline':False]
['text':' Uninitialized 'ctx->type' is default treated as ProjectType::kInclusion.','line_number':600,'multiline':False]
['text':' Make sure this isn't a positional operator. It's illegal to combine positional with','line_number':602,'multiline':False]
['text':' any expression.','line_number':603,'multiline':False]
['text':' subObj.isEmpty() in the ProjectType::kAddition case. This occurs when a pipeline','line_number':610,'multiline':False]
['text':' stage like {$addFields: {myField: {}}} is pushed down to SBE and the current object','line_number':611,'multiline':False]
['text':' is the one holding "myField". In this case we want to treat {myField: {}} as a','line_number':612,'multiline':False]
['text':' projection literal, i.e. add "myField" with literal value {}.','line_number':613,'multiline':False]
['text':' namespace','line_number':631,'multiline':False]
['text':' In agg-style syntax it is illegal to have an empty projection specification.','line_number':640,'multiline':False]
['text':' $addFields is treated as a projection that has only computed fields.','line_number':648,'multiline':False]
['text':' If we have not yet determined the type, we must fall back to the defaults for ambiguous','line_number':660,'multiline':False]
['text':' projections.','line_number':661,'multiline':False]
['text':' Add a node to the root indicating that _id is included.','line_number':675,'multiline':False]
['text':' Add a node to the root indicating that _id is not included.','line_number':679,'multiline':False]
['text':' The user explicitly included _id in an exclusion projection. This is legal syntax, but','line_number':685,'multiline':False]
['text':' the node indicating that _id is included doesn't need to be in the tree.','line_number':686,'multiline':False]
['text':' Optimize the projection expression if requested and as long as not explicitly disabled','line_number':690,'multiline':False]
['text':' pipeline optimization.','line_number':691,'multiline':False]
['text':' namespace projection_ast','line_number':714,'multiline':False]
['text':' namespace mongo','line_number':715,'multiline':False]
