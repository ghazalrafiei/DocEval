['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' IWYU pragma: no_include "ext/alloc_traits.h"','line_number':32,'multiline':False]
['text':' Return a value in the set {-1, 0, 1} to represent the sign of parameter i.','line_number':52,'multiline':False]
['text':'*
 * Returns BEHIND if the key is behind the interval.
 * Returns WITHIN if the key is within the interval.
 * Returns AHEAD if the key is ahead the interval.
 *
 * All directions are oriented along 'direction'.
 ','line_number':59,'multiline':True]
['text':' namespace','line_number':84,'multiline':False]
['text':' For debugging.','line_number':86,'multiline':False]
['text':' These are both symmetric.','line_number':182,'multiline':False]
['text':' Because the interval list is ordered, we only need to compare the two endpoints of the','line_number':237,'multiline':False]
['text':' overall list. If the endpoints are ascending or descending, then each interval already','line_number':238,'multiline':False]
['text':' respects that order. And if the endpoints are equal, then all the intervals must be squeezed','line_number':239,'multiline':False]
['text':' into a single point.','line_number':240,'multiline':False]
['text':' static','line_number':271,'multiline':False]
['text':' We complement by scanning the entire range of BSON values from MinKey to MaxKey. The value','line_number':277,'multiline':False]
['text':' from which we must begin the next complemented interval is kept in 'curBoundary'.','line_number':278,'multiline':False]
['text':' If 'curInclusive' is true, then 'curBoundary' is included in one of the original intervals,','line_number':281,'multiline':False]
['text':' and hence should not be included in the complement (and vice-versa if 'curInclusive' is','line_number':282,'multiline':False]
['text':' false).','line_number':283,'multiline':False]
['text':' We will build up a list of intervals that represents the inversion of those in the OIL.','line_number':286,'multiline':False]
['text':' There is one special case worth optimizing for: we will generate two point queries for an','line_number':290,'multiline':False]
['text':' equality-to-null predicate like {a: {$eq: null}}. The points are undefined and null, so','line_number':291,'multiline':False]
['text':' when complementing (for {a: {$ne: null}} or similar), we know that there is nothing in','line_number':292,'multiline':False]
['text':' between these two points, and can avoid adding that range.','line_number':293,'multiline':False]
['text':' Make a new interval from 'curBoundary' to the start of 'curInterval'.','line_number':301,'multiline':False]
['text':' Reset the boundary for the next iteration.','line_number':309,'multiline':False]
['text':' We may have to add a final interval which ends in MaxKey.','line_number':314,'multiline':False]
['text':' Replace the old list of intervals with the new one.','line_number':327,'multiline':False]
['text':' Insulate against hitting BSON size limit.','line_number':373,'multiline':False]
['text':' Swap start and end key.','line_number':400,'multiline':False]
['text':' If only one bound is included, swap which one is included.','line_number':428,'multiline':False]
['text':'','line_number':445,'multiline':False]
['text':' Validity checking for bounds','line_number':446,'multiline':False]
['text':'','line_number':447,'multiline':False]
['text':' Make sure each interval's start is oriented correctly with respect to its end.','line_number':450,'multiline':False]
['text':' false means don't consider field name.','line_number':452,'multiline':False]
['text':' Make sure each interval is oriented correctly with respect to its neighbors.','line_number':464,'multiline':False]
['text':' TODO: We could care if the end of one interval is the start of another.  The bounds','line_number':468,'multiline':False]
['text':' are still valid but they're a bit sloppy; they could have been combined to form one','line_number':469,'multiline':False]
['text':' interval if either of them is inclusive.','line_number':470,'multiline':False]
['text':' We expect a bound for each field in the index.','line_number':490,'multiline':False]
['text':' Make sure the names match up.','line_number':498,'multiline':False]
['text':' Special indices are all inserted increasing.  elt.number() will return 0 if it's','line_number':503,'multiline':False]
['text':' not a number.  Special indices are strings, not numbers.','line_number':504,'multiline':False]
['text':'','line_number':515,'multiline':False]
['text':' Iteration over index bounds','line_number':516,'multiline':False]
['text':'','line_number':517,'multiline':False]
['text':' For each field in the index key, see if it's in the interval it should be.','line_number':553,'multiline':False]
['text':' If it's not in the interval we think it is...','line_number':559,'multiline':False]
['text':' Check end conditions.  Since we need to move the keys before','line_number':572,'multiline':False]
['text':' firstNonContainedField forward, let's make sure that those fields are not at the','line_number':573,'multiline':False]
['text':' end of their bounds.','line_number':574,'multiline':False]
['text':' Field 'i' isn't at its last interval.  There's possibly a key we could move forward','line_number':576,'multiline':False]
['text':' to, either in the current interval or the next one.','line_number':577,'multiline':False]
['text':' Field 'i' is at its last interval.','line_number':582,'multiline':False]
['text':' We're OK if it's an open interval.  There are an infinite number of keys between any','line_number':585,'multiline':False]
['text':' key and the end point...','line_number':586,'multiline':False]
['text':' If it's a closed interval, we're fine so long as we haven't hit the end point of','line_number':591,'multiline':False]
['text':' the interval.','line_number':592,'multiline':False]
['text':' It's useful later to go from a field number to the value for that field.  Store these.','line_number':621,'multiline':False]
['text':' All fields in the index are within the current interval.  Caller can use the key.','line_number':636,'multiline':False]
['text':' Field number 'firstNonContainedField' of the index key is before its current interval.','line_number':640,'multiline':False]
['text':' It's behind our current interval, but our current interval could be wrong.  Start all','line_number':642,'multiline':False]
['text':' intervals from firstNonContainedField to the right over...','line_number':643,'multiline':False]
['text':' ...and try again.  This call modifies 'orientation', so we may check its value again','line_number':648,'multiline':False]
['text':' in the clause below if field number 'firstNonContainedField' isn't in its first','line_number':649,'multiline':False]
['text':' interval.','line_number':650,'multiline':False]
['text':' Field number 'firstNonContainedField' of the index key is before all current intervals.','line_number':656,'multiline':False]
['text':' Tell the caller to move forward to the start of the current interval.','line_number':658,'multiline':False]
['text':' Field number 'firstNonContainedField' of the index key is after interval we think it's','line_number':676,'multiline':False]
['text':' in.  Fields 0 through 'firstNonContained-1' are within their current intervals and we can','line_number':677,'multiline':False]
['text':' ignore them.','line_number':678,'multiline':False]
['text':' Find the interval that contains our field.','line_number':680,'multiline':False]
['text':' Found a new interval for field firstNonContainedField.  Move our internal choice','line_number':689,'multiline':False]
['text':' of interval to that.','line_number':690,'multiline':False]
['text':' Let's find valid intervals for fields to the right.','line_number':692,'multiline':False]
['text':' firstNonContained field is between the intervals (newIntervalForField-1) and','line_number':695,'multiline':False]
['text':' newIntervalForField.  We have to tell the caller to move forward until he at','line_number':696,'multiline':False]
['text':' least hits our new current interval.','line_number':697,'multiline':False]
['text':' All other fields to the right start at their first interval.','line_number':700,'multiline':False]
['text':' Field number 'firstNonContainedField' cannot possibly be placed into an interval,','line_number':719,'multiline':False]
['text':' as it is already past its last possible interval.  The caller must move forward','line_number':720,'multiline':False]
['text':' to a key with a greater value for the previous field.','line_number':721,'multiline':False]
['text':' If all fields to the left have hit the end of their intervals, we can't ask them','line_number':723,'multiline':False]
['text':' to move forward and we should stop iterating.','line_number':724,'multiline':False]
['text':' If movePastKeyElts is true, we don't examine any fields after the keyEltsToUse','line_number':737,'multiline':False]
['text':' fields of the key.  As such we don't populate the out/incOut.','line_number':738,'multiline':False]
['text':'*
 * Returns true if key (first member of pair) is AHEAD of interval
 * along 'direction' (second member of pair).
 ','line_number':749,'multiline':True]
['text':' namespace','line_number':761,'multiline':False]
['text':' static','line_number':763,'multiline':False]
['text':' Binary search for interval.','line_number':769,'multiline':False]
['text':' Intervals are ordered in the same direction as our keys.','line_number':770,'multiline':False]
['text':' Key behind all intervals: [BEHIND, ..., BEHIND]','line_number':771,'multiline':False]
['text':' Key ahead of all intervals: [AHEAD, ..., AHEAD]','line_number':772,'multiline':False]
['text':' Key within one interval: [AHEAD, ..., WITHIN, BEHIND, ...]','line_number':773,'multiline':False]
['text':' Key not in any inteval: [AHEAD, ..., AHEAD, BEHIND, ...]','line_number':774,'multiline':False]
['text':' Find left-most BEHIND/WITHIN interval.','line_number':776,'multiline':False]
['text':' Key ahead of all intervals.','line_number':782,'multiline':False]
['text':' Found either interval containing key or left-most BEHIND interval.','line_number':787,'multiline':False]
['text':' Additional check to determine if interval contains key.','line_number':790,'multiline':False]
['text':' namespace mongo','line_number':797,'multiline':False]
