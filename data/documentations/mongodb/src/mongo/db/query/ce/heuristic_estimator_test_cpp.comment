['text':'*
 *    Copyright (C) 2022-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' IWYU pragma: keep','line_number':42,'multiline':False]
['text':'forValidation','line_number':65,'multiline':True]
['text':' Estimation for $in is not implemented yet, so we assume it has the default filter selectivity','line_number':251,'multiline':False]
['text':' of 0.1.','line_number':252,'multiline':False]
['text':' This predicate is a conjunction of two comparisons, but','line_number':549,'multiline':False]
['text':' can't be represented as a single contiguous interval,','line_number':550,'multiline':False]
['text':' because 'Neq' is a non-contiguous union of intervals.','line_number':551,'multiline':False]
['text':' Make sure 'heuristicIntervalSel' doesn't crash here.','line_number':552,'multiline':False]
['text':' Each disjunct has different number of conjuncts,','line_number':757,'multiline':False]
['text':' so that its selectivity is different. We need 5 disjuncts to test exponential backoff which','line_number':758,'multiline':False]
['text':' cuts off at the first 4. The conjuncts are in selectivity order.','line_number':759,'multiline':False]
['text':' The conjuncts are in inverse selectivity order.','line_number':771,'multiline':False]
['text':' We avoid optimizing in order to verify heuristic estimate of FilterNode subtree. Note that we','line_number':940,'multiline':False]
['text':' do not generate SargableNodes for $not predicates, but we do generate SargableNodes without','line_number':941,'multiline':False]
['text':' it; for the purposes of this test, we want to demonstrate that $not returns the inverse of','line_number':942,'multiline':False]
['text':' the FilterNode estimate.','line_number':943,'multiline':False]
['text':' Equality selectivity is sqrt(kCollCard)/kCollCard = 0.01. When we see a UnaryOp [Not] above','line_number':946,'multiline':False]
['text':' this subtree, we invert the selectivity 1.0 - 0.01 = 0.99.','line_number':947,'multiline':False]
['text':' $elemMatch ','line_number':952,'multiline':True]
['text':' $elemMatch ','line_number':953,'multiline':True]
['text':' $elemMatch ','line_number':954,'multiline':True]
['text':' $elemMatch ','line_number':955,'multiline':True]
['text':' Update cardinality to 25.','line_number':973,'multiline':False]
['text':' Selectivity is sqrt(25)/25.','line_number':978,'multiline':False]
['text':' $elemMatch ','line_number':983,'multiline':True]
['text':' $elemMatch ','line_number':984,'multiline':True]
['text':' $elemMatch ','line_number':985,'multiline':True]
['text':' $elemMatch ','line_number':986,'multiline':True]
['text':' Update cardinality to 9.','line_number':1004,'multiline':False]
['text':' Selectivity is sqrt(3)/9.','line_number':1009,'multiline':False]
['text':' $elemMatch ','line_number':1014,'multiline':True]
['text':' $elemMatch ','line_number':1015,'multiline':True]
['text':' $elemMatch ','line_number':1016,'multiline':True]
['text':' $elemMatch ','line_number':1017,'multiline':True]
['text':' Repeat the above test for open ranges; the $not cardinality estimate should add up with the','line_number':1037,'multiline':False]
['text':' non-$not estimate to the collection cardinality.','line_number':1038,'multiline':False]
['text':' Expect open-range selectivity for input card > 100 (0.33).','line_number':1043,'multiline':False]
['text':' Update cardinality to 25.','line_number':1058,'multiline':False]
['text':' Expect open-range selectivity for input card in range (20, 100) (0.45).','line_number':1063,'multiline':False]
['text':' Update cardinality to 10.','line_number':1078,'multiline':False]
['text':' Expect open-range selectivity for input card < 20 (0.70).','line_number':1083,'multiline':False]
['text':' Repeat the above test for closed ranges; the $not cardinality estimate should add up with the','line_number':1100,'multiline':False]
['text':' non-$not estimate to the collection cardinality.','line_number':1101,'multiline':False]
['text':'
     * Update cardinality to 25. Here we observe an interesting edge case where the estimated
     * cardinality is not the inverse of the actual cardinality.
     *
     * Consider the predicate {a: {$gt: 10, $lt: 20}}. This generates two FilterNodes stacked on top
     * of each other. However, the predicate {a: {$not: {$gt: 10, $lt: 20}}} generates just one
     * FilterNode.
     *
     * We always use input cardinality to determine which interval selectivity we're going to use.
     * However, we have a different input cardinality for the one FilterNode case (collCard) than
     * for the two FilterNodes case: the first node gets collCard, and the second node gets a
     * smaller value after the selectivity of the first filter is applied.
     *
     * Because we use a piecewise function to pick the selectivity, and because we go from inputCard
     * < 100 to inputCard < 20, we choose different selectivities for the intervals in the second
     * FilterNode (0.50) than in the first (0.33).
     ','line_number':1119,'multiline':True]
['text':' Update cardinality to 10.','line_number':1153,'multiline':False]
['text':' Test basic case + $not.','line_number':1175,'multiline':False]
['text':' Test combinations of predicates.','line_number':1181,'multiline':False]
['text':' namespace','line_number':1188,'multiline':False]
['text':' namespace mongo::optimizer::ce','line_number':1189,'multiline':False]
