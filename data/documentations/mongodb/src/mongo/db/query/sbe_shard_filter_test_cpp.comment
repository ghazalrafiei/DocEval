['text':'*
 *    Copyright (C) 2020-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
     * Makes a ShardFiltererFactoryInterface that produces a mock ShardFilterer that always passes.
     ','line_number':67,'multiline':True]
['text':'*
     * Makes a ShardFiltererFactoryInterface that produces a mock ShardFilterer that always fails.
     ','line_number':76,'multiline':True]
['text':'*
     * Makes a ShardFiltererFactoryInterface that produces a mock ShardFilterer to filter out docs
     * containing all null values along the shard key.
     ','line_number':85,'multiline':True]
['text':'*
     * Makes a new QuerySolutionNode consisting of a ShardingFilterNode and a child VirtualScanNode.
     ','line_number':96,'multiline':True]
['text':'*
     * Runs a unit test with a given shard filterer factory and asserts that the results match the
     * expected docs.
     ','line_number':107,'multiline':True]
['text':' Construct a QuerySolutionNode consisting of a ShardingFilterNode with a single child','line_number':114,'multiline':False]
['text':' VirtualScanNode.','line_number':115,'multiline':False]
['text':'*
     * Similar to the above, but rather than hardcoding a SHARDING_FILTER => VIRTUAL_SCAN query
     * solution, uses the query solution node tree provided by the caller.
     ','line_number':120,'multiline':True]
['text':' Translate the QuerySolution to an sbe::PlanStage.','line_number':129,'multiline':False]
['text':' Prepare the sbe::PlanStage for execution and collect all results.','line_number':133,'multiline':False]
['text':' Convert the expected results to an sbe value and assert results.','line_number':138,'multiline':False]
['text':' Construct a PROJECTION_COVERED => SHARDING_FILTER => VIRTUAL_SCAN query solution node tree','line_number':213,'multiline':False]
['text':' where the virtual scan mocks an index scan with 'indexKeyPattern'.','line_number':214,'multiline':False]
['text':' namespace mongo','line_number':296,'multiline':False]
