['text':'*
 *    Copyright (C) 2020-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' There might be children in the $and expression that cannot be rewritten to a match','line_number':97,'multiline':False]
['text':' expression. If this is the case we cannot assume that the tight predicate or','line_number':98,'multiline':False]
['text':' wholeBucketFilter produced by the rewritten $and expression is correct. Measurements in the','line_number':99,'multiline':False]
['text':' bucket might fit the rewritten $and expression, but fail to fit the other children of the','line_number':100,'multiline':False]
['text':' $and expression and will be returned incorrectly.','line_number':101,'multiline':False]
['text':' It is an error to call 'createPredicate' on predicates on the meta field, and it only','line_number':103,'multiline':False]
['text':' returns a value for predicates on the 'timeField'.','line_number':104,'multiline':False]
['text':' tight ','line_number':111,'multiline':True]
['text':' namespace','line_number':122,'multiline':False]
['text':' If we have a leaf predicate on a meta field, we can map it to the bucket's meta field.','line_number':154,'multiline':False]
['text':' This includes comparisons such as $eq and $lte, as well as other non-comparison predicates','line_number':155,'multiline':False]
['text':' such as $exists, or $mod. Unrenamable expressions can't be split into a whole bucket level','line_number':156,'multiline':False]
['text':' filter, when we should return nullptr.','line_number':157,'multiline':False]
['text':'','line_number':158,'multiline':False]
['text':' Metadata predicates are partially handled earlier, by splitting the match expression into a','line_number':159,'multiline':False]
['text':' metadata-only part, and measurement/time-only part. However, splitting a $match into two','line_number':160,'multiline':False]
['text':' sequential $matches only works when splitting a conjunction. A predicate like','line_number':161,'multiline':False]
['text':' {$or: [ {a: 5}, {meta.b: 5} ]} can't be split, and can't be metadata-only, so we have to','line_number':162,'multiline':False]
['text':' handle it here.','line_number':163,'multiline':False]
['text':' For tight expression, null means always false, we can short circuit here.','line_number':207,'multiline':False]
['text':' For a loose predicate, if we are unable to generate an expression we can just treat it as','line_number':214,'multiline':False]
['text':' always true or an empty AND. This is because we are trying to generate a predicate that','line_number':215,'multiline':False]
['text':' will match the superset of our actual results.','line_number':216,'multiline':False]
['text':' For a tight predicate, if we are unable to generate an expression we can just treat it as','line_number':224,'multiline':False]
['text':' always false. This is because we are trying to generate a predicate that will match the','line_number':225,'multiline':False]
['text':' subset of our actual results.','line_number':226,'multiline':False]
['text':' Given {$or: [A, B]}, suppose A, B can be pushed down as A', B'.','line_number':238,'multiline':False]
['text':' If an event matches {$or: [A, B]} then either:','line_number':239,'multiline':False]
['text':'     - it matches A, which means any bucket containing it matches A'','line_number':240,'multiline':False]
['text':'     - it matches B, which means any bucket containing it matches B'','line_number':241,'multiline':False]
['text':' So {$or: [A', B']} will capture all the buckets we need to satisfy {$or: [A, B]}.','line_number':242,'multiline':False]
['text':' For loose expression, null means always true, we can short circuit here.','line_number':261,'multiline':False]
['text':' For tight predicate, we give a tighter bound so that all events in the bucket','line_number':265,'multiline':False]
['text':' either all matches A or all matches B.','line_number':266,'multiline':False]
['text':' For a loose predicate, if we are unable to generate an expression we can just treat it as','line_number':274,'multiline':False]
['text':' always true. This is because we are trying to generate a predicate that will match the','line_number':275,'multiline':False]
['text':' superset of our actual results.','line_number':276,'multiline':False]
['text':' For a tight predicate, if we are unable to generate an expression we can just treat it as','line_number':284,'multiline':False]
['text':' always false or an empty OR. This is because we are trying to generate a predicate that','line_number':285,'multiline':False]
['text':' will match the subset of our actual results.','line_number':286,'multiline':False]
['text':' tight ','line_number':302,'multiline':True]
['text':' tight ','line_number':307,'multiline':True]
['text':' The loose predicate will be pushed before the unpacking which will be inspected by','line_number':313,'multiline':False]
['text':' the query planner. Since the classic planner doesn't handle the $expr expression, we','line_number':314,'multiline':False]
['text':' don't generate the loose predicate.','line_number':315,'multiline':False]
['text':' We know that every field that appears in an event will also appear in the min/max.','line_number':329,'multiline':False]
['text':' At time of writing, we only pass 'kError' when creating a partial index, and','line_number':337,'multiline':False]
['text':' we know the collection will have no mixed-schema buckets by the time the index is','line_number':338,'multiline':False]
['text':' done building.','line_number':339,'multiline':False]
['text':' {a: {$in: [X, Y]}} is equivalent to {$or: [ {a: X}, {a: Y} ]}.','line_number':347,'multiline':False]
['text':' {$in: [/a/]} is interpreted as a regex query.','line_number':348,'multiline':False]
['text':' {$in: [null]} matches any nullish value.','line_number':349,'multiline':False]
['text':' If inExpr is {$in: [X, Y]} then the elems are '0: X' and '1: Y'.','line_number':363,'multiline':False]
['text':'annotation','line_number':365,'multiline':True]
['text':' tight ','line_number':367,'multiline':True]
['text':' As with OR, only add the child if it has been succesfully translated, otherwise','line_number':371,'multiline':False]
['text':' the $in cannot be correctly mapped to bucket level fields and we should return','line_number':372,'multiline':False]
['text':' nullptr.','line_number':373,'multiline':False]
['text':' As above, no special case for an empty IN: returning nullptr would be incorrect because','line_number':385,'multiline':False]
['text':' it means 'always-true', here.','line_number':386,'multiline':False]
['text':' If there's no metadata field, then none of the predicates are metadata-only','line_number':422,'multiline':False]
['text':' predicates.','line_number':423,'multiline':False]
['text':' Since we are operating on a collection, not a query-result,','line_number':458,'multiline':False]
['text':' there are no inclusion/exclusion projections we need to apply','line_number':459,'multiline':False]
['text':' to the buckets before unpacking. So we can use default values','line_number':460,'multiline':False]
['text':' for the rest of the arguments.','line_number':461,'multiline':False]
['text':' namespace mongo::timeseries','line_number':592,'multiline':False]
