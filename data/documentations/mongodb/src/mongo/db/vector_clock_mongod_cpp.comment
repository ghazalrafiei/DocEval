['text':'*
 *    Copyright (C) 2020-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' VectorClock methods implementation','line_number':101,'multiline':False]
['text':' If this node is in an unreadable state, skip gossiping because it may require reading a','line_number':107,'multiline':False]
['text':' signing key from the keys collection.','line_number':108,'multiline':False]
['text':' Check repl status without locks to prevent deadlocks. This is a best effort check','line_number':112,'multiline':False]
['text':' as the repl state can change right after this check even when inspected under a','line_number':113,'multiline':False]
['text':' lock or mutex.','line_number':114,'multiline':False]
['text':' VectorClockMutable methods implementation','line_number':122,'multiline':False]
['text':' ReplicaSetAwareService methods implementation','line_number':132,'multiline':False]
['text':'*
     * Structure used as keys for the map of waiters for VectorClock durability.
     ','line_number':147,'multiline':True]
['text':'*
     * The way the VectorClock durability works is by maintaining an `_queue` of callers, which wait
     * for a particular VectorTime to become durable.
     *
     * When the queue is empty, there is no persistence activity going on. The first caller, who
     * finds `_loopScheduled` to be false, will set it to true, indicating it will schedule the
     * asynchronous persistence task. The asynchronous persistence task is effectively the following
     * loop:
     *
     *  while (!_queue.empty()) {
     *      timeToPersist = getTime();
     *      persistTime(timeToPersist);
     *      _durableTime = timeToPersist;
     *      // Notify entries in _queue, whose time is <= _durableTime and remove them
     *  }
     ','line_number':167,'multiline':True]
['text':' Protects the shared state below','line_number':187,'multiline':False]
['text':' If set to true, means that another operation already scheduled the `_queue` draining loop, if','line_number':190,'multiline':False]
['text':' false it means that this operation must do it','line_number':191,'multiline':False]
['text':' This value is only boost::none once, just after the object is constructuted. From the moment,','line_number':194,'multiline':False]
['text':' the first operation schedules the `_queue`-draining loop, it will be set to a future, which','line_number':195,'multiline':False]
['text':' will be signaled when the previously-scheduled `_queue` draining loop completes.','line_number':196,'multiline':False]
['text':' If boost::none, means the durable time needs to be recovered from disk, otherwise contains','line_number':199,'multiline':False]
['text':' the latest-known durable time','line_number':200,'multiline':False]
['text':' Queue ordered in increasing order of the VectorTimes, which are waiting to be persisted','line_number':203,'multiline':False]
['text':' No shards are available yet.','line_number':251,'multiline':False]
['text':' The maxTopologyTime is majority committed. Thus, we can start gossiping it.','line_number':261,'multiline':False]
['text':' There is no guarantee that the maxTopologyTime is majority committed and we don't','line_number':264,'multiline':False]
['text':' have a way to obtain the commit time associated with it (init sync scenario).','line_number':265,'multiline':False]
['text':' The only guarantee that we have at this point is that any majority read','line_number':266,'multiline':False]
['text':' that comes afterwards will read, at least, from the initialDataTimestamp. Thus,','line_number':267,'multiline':False]
['text':' we introduce an artificial tick point <initialDataTimestamp, maxTopologyTime>.','line_number':268,'multiline':False]
['text':' The node has become an arbiter, hence will not need logical clock for external operations.','line_number':279,'multiline':False]
['text':' Make sure the VectorClock advances at least up to the just recovered durable time','line_number':334,'multiline':False]
['text':' Blocking work to recover and/or persist the current vector time','line_number':410,'multiline':False]
['text':' This code is used by the TransactionCoordinator. As a result, we need to skip ticket','line_number':423,'multiline':False]
['text':' acquisition in order to prevent possible deadlock when participants are in the','line_number':424,'multiline':False]
['text':' prepared state. See SERVER-82883 and SERVER-60682.','line_number':425,'multiline':False]
['text':' Although conceptually ClusterTime can only be ticked when a mongod is able to take writes','line_number':476,'multiline':False]
['text':' (ie. primary, or standalone), this is handled at a higher layer.','line_number':477,'multiline':False]
['text':'','line_number':478,'multiline':False]
['text':' ClusterTime is ticked when replacing zero-valued Timestamps with the current time, which','line_number':479,'multiline':False]
['text':' is usually but not necessarily associated with writes.','line_number':480,'multiline':False]
['text':'','line_number':481,'multiline':False]
['text':' ClusterTime is ticked after winning an election, while persisting the stepUp to the','line_number':482,'multiline':False]
['text':' oplog, which is slightly before the repl state is changed to primary.','line_number':483,'multiline':False]
['text':'','line_number':484,'multiline':False]
['text':' As such, ticking ClusterTime is not restricted here based on repl state.','line_number':485,'multiline':False]
['text':' tick is not permitted in other circumstances.','line_number':490,'multiline':False]
['text':' The ClusterTime is allowed to tickTo in certain very limited and trusted cases (eg.','line_number':496,'multiline':False]
['text':' initializing based on oplog timestamps), so we have to allow it here.','line_number':497,'multiline':False]
['text':' tickTo is not permitted in other circumstances.','line_number':514,'multiline':False]
['text':' namespace','line_number':518,'multiline':False]
['text':' namespace mongo','line_number':519,'multiline':False]
