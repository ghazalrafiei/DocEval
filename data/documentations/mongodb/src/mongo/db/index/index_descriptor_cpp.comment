['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 * Returns wildcardProjection or columnstoreProjection projection
 ','line_number':76,'multiline':True]
['text':' namespace','line_number':90,'multiline':False]
['text':' These index options are not considered for equality.','line_number':98,'multiline':False]
['text':' checked specially','line_number':100,'multiline':False]
['text':' removed in 4.4','line_number':101,'multiline':False]
['text':' checked separately','line_number':102,'multiline':False]
['text':' not considered for equivalence','line_number':103,'multiline':False]
['text':' same as index version','line_number':104,'multiline':False]
['text':' same as index version','line_number':105,'multiline':False]
['text':' this is a creation time option only','line_number':106,'multiline':False]
['text':' this is now ignored','line_number':107,'multiline':False]
['text':' not considered for equivalence','line_number':108,'multiline':False]
['text':' checked specially','line_number':109,'multiline':False]
['text':' checked specially','line_number':110,'multiline':False]
['text':' checked specially','line_number':111,'multiline':False]
['text':' checked specially','line_number':112,'multiline':False]
['text':' checked specially','line_number':113,'multiline':False]
['text':' checked specially','line_number':114,'multiline':False]
['text':' not considered for equivalence','line_number':115,'multiline':False]
['text':' namespace','line_number':130,'multiline':False]
['text':'*
 * Constructs an IndexDescriptor object. Arguments:
 *   accessMethodName - one of the 'IndexNames::XXX' constants from index_names.cpp
 *   infoObj          - options information
 ','line_number':160,'multiline':True]
['text':' If there is a wildcardProjection or columnstoreProjection, compute and store the normalized','line_number':210,'multiline':False]
['text':' version in '_normalizedProjection'.','line_number':211,'multiline':False]
['text':' We first check whether the key pattern is identical for both indexes.','line_number':251,'multiline':False]
['text':' If the candidate has a wildcardProjection or columnstoreProjection, we must compare the','line_number':257,'multiline':False]
['text':' normalized versions, not the versions from the catalog which are kept as the user gave them','line_number':258,'multiline':False]
['text':' and thus may be semantically identical to but syntactically different from the normalized','line_number':259,'multiline':False]
['text':' form. There are no other types of index projections. Thus, if there is no projection, both','line_number':260,'multiline':False]
['text':' the original and normalized projections will be empty BSON objects, so we can still do the','line_number':261,'multiline':False]
['text':' comparison based on the normalized projection.','line_number':262,'multiline':False]
['text':' Check whether both indexes have the same collation. If not, then they are not equivalent.','line_number':277,'multiline':False]
['text':' If we have a partialFilterExpression and the existingIndex doesn't, or vice-versa, then the','line_number':286,'multiline':False]
['text':' two indexes are not equivalent. We therefore return Comparison::kDifferent immediately.','line_number':287,'multiline':False]
['text':' Compare 'partialFilterExpression' in each descriptor to see if they are equivalent. We use','line_number':291,'multiline':False]
['text':' the collator that we parsed earlier to create the filter's ExpressionContext, although we','line_number':292,'multiline':False]
['text':' don't currently consider collation when comparing string predicates for filter equivalence.','line_number':293,'multiline':False]
['text':' For instance, under a case-sensitive collation, the predicates {a: "blah"} and {a: "BLAH"}','line_number':294,'multiline':False]
['text':' would match the same set of documents, but these are not currently considered equivalent.','line_number':295,'multiline':False]
['text':' TODO SERVER-47664: take collation into account while comparing string predicates.','line_number':296,'multiline':False]
['text':' If we are here, then the two descriptors match on all option fields that uniquely distinguish','line_number':305,'multiline':False]
['text':' an index, and so the return value will be at least Comparison::kEquivalent. We now proceed to','line_number':306,'multiline':False]
['text':' compare the rest of the options to see if we should return Comparison::kIdentical instead.','line_number':307,'multiline':False]
['text':' If all non-identifying options also match, the descriptors are identical. Otherwise, we','line_number':323,'multiline':False]
['text':' consider them equivalent; two indexes with these options and the same key cannot coexist.','line_number':324,'multiline':False]
['text':' This field is only applicable for the text index and if set to true, then the 'term' and the','line_number':336,'multiline':False]
['text':' 'weight' field names have already been added to the 'fieldNames'.','line_number':337,'multiline':False]
['text':' Appends the 'term' and 'weight' fields to the 'fieldNames' vector if 'hasSeenFtsOrFtsxFields'','line_number':340,'multiline':False]
['text':' is set to false.','line_number':341,'multiline':False]
['text':' Iterate over the key pattern and add the field names to the 'fieldNames' vector.','line_number':350,'multiline':False]
['text':' If the index type is text and the field name is either '_fts' or '_ftsx', then append the','line_number':356,'multiline':False]
['text':' index fields to the field names, otherwise add the field name from the key pattern.','line_number':357,'multiline':False]
['text':' If the index type is text and the 'hasSeenFtsOrFtsxFields' is set to false, then append the','line_number':366,'multiline':False]
['text':' index fields.','line_number':367,'multiline':False]
['text':' namespace mongo','line_number':375,'multiline':False]
