['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
     * Constructs a sort key generator which will generate keys for sort pattern 'sortPattern'. The
     * keys will incorporate the collation given by 'collator', and thus when actually compared to
     * one another should use the simple collation.
     ','line_number':60,'multiline':True]
['text':'*
     * Returns the key which should be used to sort the WorkingSetMember or throws if no key could
     * be generated. The WorkingSetMember may represent either an index key or a document (owned or
     * unowned) that has been fetched from the collection.
     *
     * If the sort pattern contains a $meta sort (e.g. sort by "textScore" or "randVal"), then the
     * necessary metadata is obtained from the WorkingSetMember.
     ','line_number':67,'multiline':True]
['text':'*
     * Computes a KeyString that can be used as the sort key for this object.
     ','line_number':77,'multiline':True]
['text':'*
     * Determines all of the portions of the sort key for the given document and populates the
     * output vector with their positions. The results in the output vector are valid until the
     * next call.
     ','line_number':82,'multiline':True]
['text':'*
     * Returns the sort key for the input 'doc' as a Value or throws if no key could be generated.
     * When the sort pattern has multiple components, the resulting sort key is an Array-typed Value
     * with one element for each component. For sort patterns with just one component, the sort key
     * is a Value that represents the single element to sort on (which may or may not itself be an
     * array).
     *
     * The sort key is computed based on the sort pattern, the contents of the document, and if
     * required by $meta sort specifiers, metadata in the Document.
     ','line_number':89,'multiline':True]
['text':' Tree representation of the sort key pattern. E.g. {a.b:1, a.x: 1}
     *      a
     *    /  \
     *   b    x
     * This is used for the fast path where the sort key is generated in one pass over the bson.
     * This is only used when the sort pattern does not include a $meta.
     ','line_number':122,'multiline':True]
['text':' Pointer into the SortPattern.','line_number':131,'multiline':False]
['text':' Tracks field names of the children. We use this when scanning the bson to quickly skip','line_number':135,'multiline':False]
['text':' over fields irrelevant to the sort pattern.','line_number':136,'multiline':False]
['text':' Adds a new component of the sort pattern to the tree.','line_number':139,'multiline':False]
['text':' Check if we already have a child with the same prefix.','line_number':151,'multiline':False]
['text':' Returns the sort key for the input 'doc' as a Value.','line_number':173,'multiline':False]
['text':'','line_number':174,'multiline':False]
['text':' Note that this function will ignore any metadata (e.g., textScore, randVal), in 'doc' but','line_number':175,'multiline':False]
['text':' will instead read from the 'metadata' variable. When the metadata is contained in the 'doc'','line_number':176,'multiline':False]
['text':' input, callers can use the public overload of this function.','line_number':177,'multiline':False]
['text':' Returns the key which should be used to sort 'obj' or throws an exception if no key could be','line_number':181,'multiline':False]
['text':' generated.','line_number':182,'multiline':False]
['text':'','line_number':183,'multiline':False]
['text':' The caller must supply the appropriate 'metadata' in the case that the sort pattern includes','line_number':184,'multiline':False]
['text':' a $meta sort (i.e. if sortHasMeta() is true). These values are filled in at the corresponding','line_number':185,'multiline':False]
['text':' positions in the sort key.','line_number':186,'multiline':False]
['text':' Extracts the sort key from a WorkingSetMember which represents an index key. It is illegal to','line_number':190,'multiline':False]
['text':' call this if the working set member is not in RID_AND_IDX state. It is also illegal to call','line_number':191,'multiline':False]
['text':' this if the sort pattern has any $meta components.','line_number':192,'multiline':False]
['text':' Extracts the sort key from 'obj', using '_sortSpecWithoutMeta' and thus ignoring any $meta','line_number':195,'multiline':False]
['text':' sort components of the sort pattern. The caller is responsible for augmenting this key with','line_number':196,'multiline':False]
['text':' the appropriate metadata if '_sortHasMeta' is true.','line_number':197,'multiline':False]
['text':' Returns the sort key for 'doc' based on the SortPattern, or boost::none if an array is','line_number':200,'multiline':False]
['text':' encountered during sort key generation.','line_number':201,'multiline':False]
['text':'','line_number':202,'multiline':False]
['text':' Note that this function will ignore any metadata (e.g., textScore, randVal), in 'doc' but','line_number':203,'multiline':False]
['text':' will instead read from the 'metadata' variable.','line_number':204,'multiline':False]
['text':' Extracts the sort key component described by 'keyPart' from 'doc' and returns it. Returns','line_number':208,'multiline':False]
['text':' boost::none if the path for 'keyPart' contains an array in 'doc'.','line_number':209,'multiline':False]
['text':'','line_number':210,'multiline':False]
['text':' Note that this function will ignore any metadata (e.g., textScore, randVal), in 'doc' but','line_number':211,'multiline':False]
['text':' will instead read from the 'metadata' variable.','line_number':212,'multiline':False]
['text':' Returns the sort key for 'doc' based on the SortPattern. Note this is in the BSONObj format -','line_number':217,'multiline':False]
['text':' with empty field names.','line_number':218,'multiline':False]
['text':'','line_number':219,'multiline':False]
['text':' Note that this function will ignore any metadata (e.g., textScore, randVal), in 'doc' but','line_number':220,'multiline':False]
['text':' will instead read from the 'metadata' variable.','line_number':221,'multiline':False]
['text':' Returns the comparison key used to sort 'val' with collation. Note that these comparison keys','line_number':224,'multiline':False]
['text':' should always be sorted with the simple (i.e. binary) collation.','line_number':225,'multiline':False]
['text':' Fast path for reading a BSON obj and computing the sort key. Returns true on success, false','line_number':228,'multiline':False]
['text':' when an array is encountered and the slow path needs to be used instead.','line_number':229,'multiline':False]
['text':' The sort pattern with any $meta sort components stripped out, since the underlying index key','line_number':240,'multiline':False]
['text':' generator does not understand $meta sort.','line_number':241,'multiline':False]
['text':' If we're not sorting with a $meta value we can short-cut some work.','line_number':245,'multiline':False]
['text':' Used for fastFillOutSortKeyParts()/extractSortKeyParts().','line_number':250,'multiline':False]
['text':' Used when generating KeyStrings.','line_number':254,'multiline':False]
['text':' namespace mongo','line_number':258,'multiline':False]
