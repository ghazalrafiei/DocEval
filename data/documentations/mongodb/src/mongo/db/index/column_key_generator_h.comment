['text':'*
 *    Copyright (C) 2022-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 * ColumnstoreProjectionTree and ColumnstoreProjectionNode act as a proxy for the Projection AST to
 * help determine which fields to preserve for the index.
 *
 * Motivation for creation was to eliminate the linear-time search for fields in the Projection AST.
 ','line_number':57,'multiline':True]
['text':'*
 * This is a representation of the cell prior to flattening it out into a buffer which is passed to
 * visitor callbacks.
 *
 * All memory within the UnencodedCellView should only be assumed valid within the callback. If you
 * need it longer, you must copy it yourself. Non-test callers will generally immediately encode
 * this to a flat buffer, so this shouldn't be a problem.
 ','line_number':114,'multiline':True]
['text':' If true, this path has multiple values in a single (possibly nested) object with the same','line_number':126,'multiline':False]
['text':' field name. In this case, arrayInfo will be empty and this cell must not be used to','line_number':127,'multiline':False]
['text':' reconstruct an object. We should probably not attempt to encode vals in the index either, and','line_number':128,'multiline':False]
['text':' just put a marker that causes us to either skip the row (because it breaks the rules) or go','line_number':129,'multiline':False]
['text':' to the row store.','line_number':130,'multiline':False]
['text':'','line_number':131,'multiline':False]
['text':' Note that this detection is best-effort and will only detect cases that would result in','line_number':132,'multiline':False]
['text':' corrupt array info. We have decided that query results do not need to be precise for objects','line_number':133,'multiline':False]
['text':' with duplicate fields, so it is OK if we don't detect every case, as long as we don't crash','line_number':134,'multiline':False]
['text':' or cause corruption on the undetected cases.','line_number':135,'multiline':False]
['text':' If true, this cell omits values that are stored in subpaths.','line_number':138,'multiline':False]
['text':' If true, when reconstructing an object, you will need to visit the parent path in order to','line_number':141,'multiline':False]
['text':' match current semantics for projections and field-path expressions.','line_number':142,'multiline':False]
['text':' If true, at least one of the values in vals is inside of a directly-double-nested array, or','line_number':145,'multiline':False]
['text':' the field name was encountered while already inside of a directly-double-nested array, so','line_number':146,'multiline':False]
['text':' arrayInfo must be consulted to know which values to skip when matching. If false, simple','line_number':147,'multiline':False]
['text':' matches can ignore the array info and just match against each value independently.','line_number':148,'multiline':False]
['text':' These are only used in tests and for debugging.','line_number':151,'multiline':False]
['text':'*
     * Returns a pointer to the key generator's underlying ProjectionExecutor.
     ','line_number':166,'multiline':True]
['text':'*
     * Visits all paths within obj and provides their cell values.
     * Path visit order is unspecified.
     ','line_number':177,'multiline':True]
['text':'*
     * Visits all paths within obj and provides their cell values.
     * Visit order is completely unspecified, so callers should not assume anything, but this
     * function will attempt to perform the visits in an order optimized for inserting into a tree.
     *
     * Current implementation will visit all cells for a given path before moving on to the next
     * path. Additionally, within each path, the cells will be visited in an order matching the
     * order of their corresponding entries in the input vector. This will typically be ordered by
     * RecordId since callers will typically pass records in that order, but this function neither
     * relies on nor ensures that.
     ','line_number':184,'multiline':True]
['text':'*
     * Visits all paths within obj. When deleting, you do not need to know about values.
     * Path visit order is unspecified.
     ','line_number':199,'multiline':True]
['text':'*
     * See visitDiffForUpdate().
     ','line_number':205,'multiline':True]
['text':'*
     * Computes differences between oldObj and newObj, and invokes cb() with the required actions to
     * take to update the columnar index.
     *
     * For kInsert and kUpdate, the UnencodedCellView will point to the cell data for newObj (you
     * don't need to know the value for oldObj).
     *
     * For kDelete, the UnencodedCellView pointer will be null.
     *
     * Path visit order is unspecified.
     ','line_number':210,'multiline':True]
['text':'
     * Private function to construct ColumnProjectionTree given
     * Projection AST in order for faster traversals using field names
     ','line_number':227,'multiline':True]
['text':'*
 * An insert, update, or delete used to apply part of a diff to a document in a column store index.
 * These operations get stored in the side writes table to defer column store writes that occur
 * while the column store is being built.
 ','line_number':241,'multiline':True]
['text':' Note: 'contents' is empty for DiffAcction::kDelete operations.','line_number':248,'multiline':False]
['text':' namespace mongo::column_keygen','line_number':261,'multiline':False]
