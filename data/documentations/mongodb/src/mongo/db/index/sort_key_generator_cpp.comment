['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' IWYU pragma: no_include "boost/container/detail/flat_tree.hpp"','line_number':31,'multiline':False]
['text':' IWYU pragma: no_include "ext/alloc_traits.h"','line_number':37,'multiline':False]
['text':' IWYU pragma: keep','line_number':52,'multiline':False]
['text':' namespace','line_number':69,'multiline':False]
['text':' If we're just sorting by meta, don't bother creating an index key generator.','line_number':77,'multiline':False]
['text':' We'll need to treat arrays as if we were to create an index over them. that is, we may need','line_number':83,'multiline':False]
['text':' to unnest the first level and consider each array element to decide the sort order. In order','line_number':84,'multiline':False]
['text':' to do this, we make a BtreeKeyGenerator.','line_number':85,'multiline':False]
['text':' When 'isSparse' is false, BtreeKeyGenerator::getKeys() is guaranteed to insert at least','line_number':137,'multiline':False]
['text':' one key into 'keySet', so this assertion should always be true.','line_number':138,'multiline':False]
['text':' If we were to call 'collationAwareIndexKeyAppend' with a non-simple collation and a','line_number':152,'multiline':False]
['text':' 'sortKeyElt' representing a collated index key we would incorrectly encode for the','line_number':153,'multiline':False]
['text':' collation twice. This is not currently possible as the query planner will ensure that','line_number':154,'multiline':False]
['text':' the plan fetches the data before sort key generation in the case where the index has a','line_number':155,'multiline':False]
['text':' non-simple collation.','line_number':156,'multiline':False]
['text':' We don't have to worry about $meta sort, so the index key becomes the sort key.','line_number':167,'multiline':False]
['text':' Merge metadata into the key.','line_number':173,'multiline':False]
['text':' Create a Document that represents the input object and its metadata together, so we can','line_number':182,'multiline':False]
['text':' use it to evaluate the ExpressionMeta for this part of the sort pattern. This operation','line_number':183,'multiline':False]
['text':' copies the data in 'metadata' but not any of the data in the 'obj' BSON.','line_number':184,'multiline':False]
['text':' variables ','line_number':190,'multiline':True]
['text':' We should have added a key component for each part of the index key pattern.','line_number':198,'multiline':False]
['text':' Not sorting by anything in the key, just bail out early.','line_number':206,'multiline':False]
['text':' We will sort 'obj' in the same order an index over '_sortSpecWithoutMeta' would have. This is','line_number':211,'multiline':False]
['text':' tricky. Consider the sort pattern {a:1} and the document {a: [1, 10]}. We have potentially','line_number':212,'multiline':False]
['text':' two keys we could use to sort on. Here we extract these keys.','line_number':213,'multiline':False]
['text':'','line_number':214,'multiline':False]
['text':' The keys themselves will incorporate the collation, with strings translated to their','line_number':215,'multiline':False]
['text':' corresponding collation keys. Therefore, we use the simple string comparator when comparing','line_number':216,'multiline':False]
['text':' the keys themselves.','line_number':217,'multiline':False]
['text':' There's no need to compute the prefixes of the indexed fields that cause the index to be','line_number':222,'multiline':False]
['text':' multikey when getting the index keys for sorting.','line_number':223,'multiline':False]
['text':' Probably a parallel array.','line_number':228,'multiline':False]
['text':' Key generator isn't sparse so we should at least get an all-null key.','line_number':238,'multiline':False]
['text':' The sort key is the first index key, ordered according to the pattern '_sortSpecWithoutMeta'.','line_number':241,'multiline':False]
['text':' If the collation is the simple collation, the value itself is the comparison key.','line_number':246,'multiline':False]
['text':' If 'val' is not a collatable type, there's no need to do any work.','line_number':251,'multiline':False]
['text':' If 'val' is a string, directly use the collator to obtain a comparison key.','line_number':256,'multiline':False]
['text':' Otherwise, for non-string collatable types, take the slow path and round-trip the value','line_number':262,'multiline':False]
['text':' through BSON.','line_number':263,'multiline':False]
['text':' In this case, the document has an array along the path given. This means the','line_number':283,'multiline':False]
['text':' document is ineligible for taking the fast path for index key generation.','line_number':284,'multiline':False]
['text':' In this case the field was already in the cache (or may not have existed).','line_number':286,'multiline':False]
['text':' The document may have an array at the given path.','line_number':288,'multiline':False]
['text':' In this case the field was in the backing BSON, and not in the cache.','line_number':294,'multiline':False]
['text':' The document may have an array at the given path.','line_number':296,'multiline':False]
['text':' ExpressionMeta expects metadata to be attached to the document.','line_number':312,'multiline':False]
['text':' ExpressionMeta does not use Variables.','line_number':316,'multiline':False]
['text':' variables ','line_number':318,'multiline':True]
['text':' We can't use the fast path, so bail out.','line_number':335,'multiline':False]
['text':' Sort key generation requires the Document to be in BSON format. First, we attempt the','line_number':346,'multiline':False]
['text':' "trivial" conversion, which returns the Document's BSON storage.','line_number':347,'multiline':False]
['text':' If the trivial conversion is not possible, we perform a conversion that only converts the','line_number':350,'multiline':False]
['text':' paths we need to generate the sort key.','line_number':351,'multiline':False]
['text':' This fast pass directly generates a Value.','line_number':360,'multiline':False]
['text':' Compute the key through the slow path, which generates a serialized BSON sort key (taking a','line_number':366,'multiline':False]
['text':' form like BSONObj {'': 1, '': [2, 3]}) and converts it to a Value (Value [1, [2, 3]] in the','line_number':367,'multiline':False]
['text':' earlier example).','line_number':368,'multiline':False]
['text':' In MQL missing sort keys are substituted with JS null.','line_number':375,'multiline':False]
['text':' Walk the BSON once and fill out the sort key parts.','line_number':383,'multiline':False]
['text':' Returns false if array is encountered and fallback is needed.','line_number':384,'multiline':False]
['text':' Could use a hash table, but sort patterns are small so brute force search is good','line_number':395,'multiline':False]
['text':' enough.','line_number':396,'multiline':False]
['text':' Slow path needed.','line_number':406,'multiline':False]
['text':' Eventually we could reuse the buffer from _localObjStorage here.','line_number':439,'multiline':False]
['text':' Fast path succeeded, we're done.','line_number':454,'multiline':False]
['text':' Slow, generic path, used when an array was encountered.','line_number':458,'multiline':False]
['text':' namespace mongo','line_number':477,'multiline':False]
