['text':'*
 *    Copyright (C) 2022-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' Intentionally shadowing earlier name.','line_number':66,'multiline':False]
['text':' Little-endian write.','line_number':68,'multiline':False]
['text':' Little-endian write.','line_number':71,'multiline':False]
['text':' Little-endian write.','line_number':75,'multiline':False]
['text':' Storing -0 or NaN as an integer type would lose information.','line_number':82,'multiline':False]
['text':' Little-endian write.','line_number':114,'multiline':False]
['text':' Little-endian write.','line_number':117,'multiline':False]
['text':' Little-endian write.','line_number':121,'multiline':False]
['text':' NB: This conversion is used by the "shredding" algorithm, which we expect to','line_number':138,'multiline':False]
['text':' decompose any non-empty objects. In the future, we may support partial shredding,','line_number':139,'multiline':False]
['text':' which would leave deeply nested objects intact and would require a way to store a','line_number':140,'multiline':False]
['text':' non-empty object in a cell.','line_number':141,'multiline':False]
['text':' NB: As with objects (above), we do not currently need to store non-empty arrays but','line_number':145,'multiline':False]
['text':' may need to in the future.','line_number':146,'multiline':False]
['text':' Store large strings as BSON.','line_number':156,'multiline':False]
['text':'nul','line_number':159,'multiline':True]
['text':'long','line_number':163,'multiline':True]
['text':'long','line_number':165,'multiline':True]
['text':' This overload writes the on-disk format of its Decimal128 argument.','line_number':169,'multiline':False]
['text':' Fall through to storing as BSON.','line_number':176,'multiline':False]
['text':' There is no columnar-specific way to format this value. We can still include it in a cell,','line_number':180,'multiline':False]
['text':' however, because column cells support directly appending BSONElement-formated values.','line_number':181,'multiline':False]
['text':' WARNING: The decoder assumes that flags are written in this order. Do not change the order!','line_number':191,'multiline':False]
['text':' The 'hasDuplicateFields' flag indicates an ill-formed document. In this case, we make no','line_number':193,'multiline':False]
['text':' attempt to record any other information about this field in the index.','line_number':194,'multiline':False]
['text':' Encode meaningful flags.','line_number':200,'multiline':False]
['text':' The 'SubPathsMarker' flag is unnecessary when there are no values. The reader will assume','line_number':202,'multiline':False]
['text':' the existence of sub objects.','line_number':203,'multiline':False]
['text':' Encode the 'arrayInfo' if it exists. An 'arrayInfo' is "tiny" iff its size can be encoded','line_number':213,'multiline':False]
['text':' directly within the tag byte that identifies its type. For larger 'arrayInfo' values, the','line_number':214,'multiline':False]
['text':' size gets encoded separately.','line_number':215,'multiline':False]
['text':' Note: BufBuilder does not have a uint16_t append function.','line_number':230,'multiline':False]
['text':' Note: BufBuilder does not have a uint32_t append function.','line_number':236,'multiline':False]
['text':' No path in a BSON document that fits in the storage limit could generate an arrayInfo','line_number':242,'multiline':False]
['text':' of this size.','line_number':243,'multiline':False]
['text':' namespace','line_number':256,'multiline':False]
['text':' These overrides are just to keep the templating and implementation defined in the .cpp files. We','line_number':258,'multiline':False]
['text':' could template the public method but then we'd have to drag the implementation into the header.','line_number':259,'multiline':False]
['text':' namespace column_keygen','line_number':270,'multiline':False]
['text':' namespace mongo','line_number':271,'multiline':False]
