['text':'*
 *    Copyright (C) 2022-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' Initialize a buffer with the expected output of translating 'referenceBson' in the columnar','line_number':54,'multiline':False]
['text':' index format.','line_number':55,'multiline':False]
['text':' Write 0 as an int32.','line_number':59,'multiline':False]
['text':' Write 5000 as an int64 (represented in 2 bytes).','line_number':62,'multiline':False]
['text':' Write a strange message.','line_number':66,'multiline':False]
['text':' includeEndingNull ','line_number':69,'multiline':True]
['text':' Use the 'appendElementToCell()' function, which is the function being tested, to compute the','line_number':79,'multiline':False]
['text':' transformed 'referenceBson' in columnar index format.','line_number':80,'multiline':False]
['text':' Ensure that the output of 'appendElementToCell()' matches the expected output.','line_number':86,'multiline':False]
['text':' Repeat the test, but this time we manually construct the expected string of bytes instead of','line_number':90,'multiline':False]
['text':' building it out of the constansts in the 'ColumnStore::Bytes' class. The column cell format','line_number':91,'multiline':False]
['text':' is an on-disk format and should never change.','line_number':92,'multiline':False]
['text':' namespace','line_number':105,'multiline':False]
['text':' Test document: {a: [null, {b: 1}]}.','line_number':108,'multiline':False]
['text':' What the cell would look like with "a" as the path.','line_number':111,'multiline':False]
['text':' hasDuplicateFields','line_number':115,'multiline':False]
['text':' hasSubPaths','line_number':116,'multiline':False]
['text':' isSparse','line_number':117,'multiline':False]
['text':' hasDoubleNestedArrays','line_number':118,'multiline':False]
['text':' Test document: {a: [[{b: null}], {b: null}, {c: 1}]}','line_number':128,'multiline':False]
['text':' What the cell would look like with "a.b" as the path.','line_number':131,'multiline':False]
['text':' hasDuplicateFields','line_number':135,'multiline':False]
['text':' hasSubPaths','line_number':136,'multiline':False]
['text':' isSparse','line_number':137,'multiline':False]
['text':' hasDoubleNestedArrays','line_number':138,'multiline':False]
['text':' Test document: {a: null, a: null} (Note: INVALID document in context of index storage)','line_number':148,'multiline':False]
['text':' What the invalid cell would look like with "a" as the path.','line_number':151,'multiline':False]
['text':' These should _not_ get included in the output.','line_number':153,'multiline':False]
['text':' This flag is the only thing that gets included.','line_number':156,'multiline':False]
['text':' hasDuplicateFields','line_number':157,'multiline':False]
['text':' hasSubPaths','line_number':158,'multiline':False]
['text':' isSparse','line_number':159,'multiline':False]
['text':' hasDoubleNestedArrays','line_number':160,'multiline':False]
['text':' This test does not use a realistic cell. A cell with a 100-byte arrayInfo would be great fun','line_number':170,'multiline':False]
['text':' but also needlessly complicated for a unit test.','line_number':171,'multiline':False]
['text':' This test does not use a realistic cell. A cell with a 1KB arrayInfo would be delightful but','line_number':184,'multiline':False]
['text':' also needlessly complicated for a unit test.','line_number':185,'multiline':False]
['text':' This test does not use a realistic cell. A cell with a 100KB arrayInfo would be hilarious but','line_number':198,'multiline':False]
['text':' also needlessly complicated for a unit test.','line_number':199,'multiline':False]
['text':' namespace mongo','line_number':210,'multiline':False]
