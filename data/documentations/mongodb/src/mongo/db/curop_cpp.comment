['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' CHECK_LOG_REDACTION','line_number':30,'multiline':False]
['text':' IWYU pragma: keep','line_number':52,'multiline':False]
['text':' namespace','line_number':117,'multiline':False]
['text':'*
 * This type decorates a Client object with a stack of active CurOp objects.
 *
 * It encapsulates the nesting logic for curops attached to a Client, along with
 * the notion that there is always a root CurOp attached to a Client.
 *
 * The stack itself is represented in the _parent pointers of the CurOp class.
 ','line_number':119,'multiline':True]
['text':'*
     * Returns the top of the CurOp stack.
     ','line_number':136,'multiline':True]
['text':'*
     * Adds "curOp" to the top of the CurOp stack for a client.
     *
     * This sets the "_parent", "_stack", and "_lockStatsBase" fields
     * of "curOp".
     ','line_number':143,'multiline':True]
['text':'*
     * Pops the top off the CurOp stack for a Client. Called by CurOp's destructor.
     ','line_number':154,'multiline':True]
['text':' It is not necessary to lock when popping the final item off of the curop stack. This','line_number':158,'multiline':False]
['text':' is because the item at the base of the stack is owned by the stack itself, and is not','line_number':159,'multiline':False]
['text':' popped until the stack is being destroyed.  By the time the stack is being destroyed,','line_number':160,'multiline':False]
['text':' no other threads can be observing the Client that owns the stack, because it has been','line_number':161,'multiline':False]
['text':' removed from its ServiceContext's set of owned clients.  Further, because the last','line_number':162,'multiline':False]
['text':' item is popped in the destructor of the stack, and that destructor runs during','line_number':163,'multiline':False]
['text':' destruction of the owning client, it is not safe to access other member variables of','line_number':164,'multiline':False]
['text':' the client during the final pop.','line_number':165,'multiline':False]
['text':' If `curOp` is a sub-operation, we store the snapshot of lock stats as the base lock stats','line_number':191,'multiline':False]
['text':' of the current operation.','line_number':192,'multiline':False]
['text':' Top of the stack of CurOps for a Client.','line_number':203,'multiline':False]
['text':' The bottom-most CurOp for a client.','line_number':206,'multiline':False]
['text':' Fill out the rest of the BSONObj with opCtx specific details.','line_number':250,'multiline':False]
['text':' Depending on whether the authenticated user is the same user which ran the command,','line_number':257,'multiline':False]
['text':' this might be "effectiveUsers" or "runBy".','line_number':258,'multiline':False]
['text':' reportState is used to generate a command reply','line_number':307,'multiline':False]
['text':'* This branch becomes useful again with SERVER-44091
            for (const auto& frame : diagnostic->makeStackTrace().frames) {
                BSONObjBuilder backtraceObj(backtraceBuilder.subobjStart());
                backtraceObj.append("addr", unsignedHex(frame.instructionOffset));
                backtraceObj.append("path", frame.objectPath);
            }
            ','line_number':319,'multiline':True]
['text':' Set the _isCommand flags based on network op only. For legacy writes on mongoS, we','line_number':366,'multiline':False]
['text':' resolve them to OpMsgRequests and then pass them into the Commands path, so having a','line_number':367,'multiline':False]
['text':' valid Command* here does not guarantee that the op was issued from the client using a','line_number':368,'multiline':False]
['text':' command protocol.','line_number':369,'multiline':False]
['text':' A non-none queryStatsInfo.keyHash indicates the current query is being tracked for queryStats','line_number':384,'multiline':False]
['text':' and therefore the executionTime needs to be recorded as part of that effort. executionTime is','line_number':385,'multiline':False]
['text':' set with the final executionTime in completeAndLogOperation, but for query stats collection','line_number':386,'multiline':False]
['text':' we want it set before incrementing cursor metrics using OpDebug's AdditiveMetrics. The value','line_number':387,'multiline':False]
['text':' set here will be overwritten later in completeAndLogOperation.','line_number':388,'multiline':False]
['text':' copy','line_number':400,'multiline':False]
['text':' Start the CPU timer if this system supports it.','line_number':426,'multiline':False]
['text':' The '_start' value is initialized to 0 and gets assigned on demand the first time it gets','line_number':432,'multiline':False]
['text':' accessed. The above thread ownership requirement ensures that there will never be','line_number':433,'multiline':False]
['text':' concurrent calls to this '_start' assignment, but we use compare-exchange anyway as an','line_number':434,'multiline':False]
['text':' additional check that writes to '_start' never race.','line_number':435,'multiline':False]
['text':' This operation is ongoing.','line_number':456,'multiline':False]
['text':' Record the size of the response returned to the client, if applicable.','line_number':499,'multiline':False]
['text':' Obtain the total execution time of this operation.','line_number':504,'multiline':False]
['text':' Do not log the slow query information if asked to omit it','line_number':511,'multiline':False]
['text':' Calculate this operation's CPU time before deciding whether logging/profiling is','line_number':523,'multiline':False]
['text':' necessary only if it is needed for filtering.','line_number':524,'multiline':False]
['text':' Log the operation if it is eligible according to the current slowMS and sampleRate','line_number':535,'multiline':False]
['text':' settings.','line_number':536,'multiline':False]
['text':' Defer calculating the CPU time until we know that we actually are going to write it to','line_number':544,'multiline':False]
['text':' the logs or profiler. The CPU time may have been determined earlier if it was a','line_number':545,'multiline':False]
['text':' dependency of 'filter' in which case this is a no-op.','line_number':546,'multiline':False]
['text':' Do not fetch operation statistics again if we have already got them (for','line_number':556,'multiline':False]
['text':' instance, as a part of stashing the transaction). Take a lock before calling into','line_number':557,'multiline':False]
['text':' the storage engine to prevent racing against a shutdown. Any operation that used','line_number':558,'multiline':False]
['text':' a storage engine would have at-least held a global lock at one point, hence we','line_number':559,'multiline':False]
['text':' limit our lock acquisition to such operations. We can get here and our lock','line_number':560,'multiline':False]
['text':' acquisition be timed out or interrupted, log a message if that happens.','line_number':561,'multiline':False]
['text':' Slow query logs are critical for observability and should not wait for ticket','line_number':563,'multiline':False]
['text':' acquisition. Slow queries can happen for various reasons; however, if queries','line_number':564,'multiline':False]
['text':' are slower due to ticket exhaustion, queueing in order to log can compound','line_number':565,'multiline':False]
['text':' the issue.','line_number':566,'multiline':False]
['text':' Gets the time spent blocked on prepare conflicts.','line_number':585,'multiline':False]
['text':' Return 'true' if this operation should also be added to the profiler.','line_number':608,'multiline':False]
['text':' Failpoints after commands are logged.','line_number':620,'multiline':False]
['text':'*
 * Appends {<name>: obj} to the provided builder.  If obj is greater than maxSize, appends a
 * string summary of obj as { <name>: { $truncated: "obj" } }. If a comment parameter is
 * present, add it to the truncation object.
 ','line_number':674,'multiline':True]
['text':' Generate an abbreviated serialization for the object, by passing false as the "full"','line_number':686,'multiline':False]
['text':' argument to obj.toString(). Remove "comment" field from the object, if present, since','line_number':687,'multiline':False]
['text':' this will be promoted to a top-level field in the output.','line_number':688,'multiline':False]
['text':' objToString is still too long, so we append to the builder a truncated form','line_number':692,'multiline':False]
['text':' of objToString concatenated with "...".  Instead of creating a new string','line_number':693,'multiline':False]
['text':' temporary, mutate objToString to do this (we know that we can mutate','line_number':694,'multiline':False]
['text':' characters in objToString up to and including objToString[maxSize]).','line_number':695,'multiline':False]
['text':' Append the truncated representation of the object to the builder. If a comment','line_number':708,'multiline':False]
['text':' parameter is present, write it to the object alongside the truncated op. This object','line_number':709,'multiline':False]
['text':' will appear as','line_number':710,'multiline':False]
['text':' {$truncated: "{find: \"collection\", filter: {x: 1, ...", comment: "comment text" }','line_number':711,'multiline':False]
['text':' namespace','line_number':722,'multiline':False]
['text':' This creates a new builder to truncate the object that will go into the curOp output. In','line_number':726,'multiline':False]
['text':' order to make sure the object is not too large but not truncate the comment, we only','line_number':727,'multiline':False]
['text':' truncate the originatingCommand and not the entire cursor.','line_number':728,'multiline':False]
['text':' lsid, ns, and planSummary exist in the top level curop object, so they need to be','line_number':736,'multiline':False]
['text':' temporarily removed from the cursor object to avoid duplicating information.','line_number':737,'multiline':False]
['text':' When the currentOp command is run, it returns a single response object containing all','line_number':773,'multiline':False]
['text':' current operations; this request will fail if the response exceeds the 16MB document','line_number':774,'multiline':False]
['text':' limit. By contrast, the $currentOp aggregation stage does not have this restriction. If','line_number':775,'multiline':False]
['text':' 'truncateOps' is true, limit the size of each op to 1000 bytes. Otherwise, do not','line_number':776,'multiline':False]
['text':' truncate.','line_number':777,'multiline':False]
['text':' If flag is true, add command field to builder without sensitive information.','line_number':784,'multiline':False]
['text':' Omit information for QE user collections, QE state collections and QE user operations.','line_number':804,'multiline':False]
['text':' (Ignore FCV check): This feature flag is used to initialize ticketing during storage','line_number':872,'multiline':False]
['text':' engine initialization and FCV checking is ignored there, so here we also need to ignore','line_number':873,'multiline':False]
['text':' FCV to keep consistent behavior.','line_number':874,'multiline':False]
['text':' namespace','line_number':901,'multiline':False]
['text':' Should not happen but we need to handle curCommand == NULL gracefully.','line_number':965,'multiline':False]
['text':' We don't know what the request payload is intended to be, so it might be','line_number':966,'multiline':False]
['text':' sensitive, and we don't know how to redact it properly without a 'Command*'.','line_number':967,'multiline':False]
['text':' So we just don't log it at all.','line_number':968,'multiline':False]
['text':' (Ignore FCV check): This feature flag is used to initialize ticketing during storage','line_number':1109,'multiline':False]
['text':' engine initialization and FCV checking is ignored there, so here we also need to ignore','line_number':1110,'multiline':False]
['text':' FCV to keep consistent behavior.','line_number':1111,'multiline':False]
['text':' Always report cpuNanos in rare cases that it is zero to facilitate testing that expects this','line_number':1171,'multiline':False]
['text':' field to always exist.','line_number':1172,'multiline':False]
['text':' durationMillis should always be present for any operation','line_number':1195,'multiline':False]
['text':' Always log cpuNanos in rare cases that it is zero to facilitate testing that expects this','line_number':1372,'multiline':False]
['text':' field to always exist.','line_number':1373,'multiline':False]
['text':' millis should always be present for any operation','line_number':1378,'multiline':False]
['text':' This function is analogous to OpDebug::append. The main difference is that append() does','line_number':1422,'multiline':False]
['text':' the work of building BSON right away, while appendStaged() stages the work to be done','line_number':1423,'multiline':False]
['text':' later. It returns a std::function that builds BSON when called.','line_number':1424,'multiline':False]
['text':' The other difference is that appendStaged can avoid building BSON for unneeded fields.','line_number':1426,'multiline':False]
['text':' requestedFields is a set of top-level field names; any fields beyond this list may be','line_number':1427,'multiline':False]
['text':' omitted. This also lets us uassert if the caller asks for an unsupported field.','line_number':1428,'multiline':False]
['text':' Each piece of the result is a function that appends to a BSONObjBuilder.','line_number':1430,'multiline':False]
['text':' Before returning, we encapsulate the result in a simpler function that returns a BSONObj.','line_number':1431,'multiline':False]
['text':' For convenience, the callback that handles each field gets the fieldName as an extra arg.','line_number':1435,'multiline':False]
['text':' Helper to check for the presence of a field in the StringSet, and remove it.','line_number':1438,'multiline':False]
['text':' At the end of this method, anything left in the StringSet is a field we don't know','line_number':1439,'multiline':False]
['text':' how to handle.','line_number':1440,'multiline':False]
['text':' Don't short-circuit: call needs() for every supported field, so that at the end we can','line_number':1661,'multiline':False]
['text':' uassert that no unsupported fields were requested.','line_number':1662,'multiline':False]
['text':' Always report cpuNanos in rare cases that it is zero to facilitate testing that expects','line_number':1697,'multiline':False]
['text':' this field to always exist.','line_number':1698,'multiline':False]
['text':' millis and durationMillis are the same thing. This is one of the few inconsistencies between','line_number':1704,'multiline':False]
['text':' the profiler (OpDebug::append) and the log file (OpDebug::report), so for the profile filter','line_number':1705,'multiline':False]
['text':' we support both names.','line_number':1706,'multiline':False]
['text':' 'resolvedViews' might be populated if any other collection as a part of the query is on a','line_number':1877,'multiline':False]
['text':' view. However, it will not have associated dependencies.','line_number':1878,'multiline':False]
['text':' The underlying namespace for the view/timeseries collection is the next namespace in the','line_number':1899,'multiline':False]
['text':' dependency chain. If the view depends on a timeseries buckets collection, then it is a','line_number':1900,'multiline':False]
['text':' timeseries collection, otherwise it is a regular view.','line_number':1901,'multiline':False]
['text':'*
 * Adds two boost::optionals of the same type with an operator+() together. Returns boost::none if
 * both 'lhs' and 'rhs' are uninitialized, or the sum of 'lhs' and 'rhs' if they are both
 * initialized. Returns 'lhs' if only 'rhs' is uninitialized and vice-versa.
 ','line_number':1925,'multiline':True]
['text':' namespace','line_number':1937,'multiline':False]
['text':' namespace mongo','line_number':2115,'multiline':False]
