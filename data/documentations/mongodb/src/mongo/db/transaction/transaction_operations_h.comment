['text':'*
 *    Copyright (C) 2022-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' for OplogSlot','line_number':43,'multiline':False]
['text':' for ReplOperation','line_number':44,'multiline':False]
['text':'*
 * Container for ReplOperation used in multi-doc transactions and batched writer context.
 * Includes statistics on operations held in this container.
 * Provides methods for exporting ReplOperations in one or more applyOps oplog entries.
 * Concurrency control for this class is maintained by the TransactionParticipant.
 ','line_number':57,'multiline':True]
['text':'*
     * Function type used by logOplogEntries() to write a formatted applyOps oplog entry
     * to the oplog.
     *
     * The 'oplogEntry' holds the current applyOps oplog entry formatted by logOplogEntries()
     * and is passed in as a pointer because downstream functions in the oplog generation code
     * may append additional information.
     *
     * The booleans 'firstOp' and 'lastOp' indicate where this entry is within the chain of
     * generated applyOps oplog entries. One use for these booleans is to determine if we have
     * a singleton oplog chain (firstOp == lastOp).
     *
     * The 'stmtIdsWritten' holds the complete list of statement ids extracted from the entire
     * chain of applyOps oplog entries. It will be empty for each entry in the chain except for
     * the last entry ('lastOp' == true). It may also be empty if there are no statement ids
     * contained in any of the replicated operations.
     *
     * This is based on the signature of the logApplyOps() function within the OpObserverImpl
     * implementation, which takes a few more arguments that can be derived from the caller's
     * context.
     ','line_number':68,'multiline':True]
['text':'*
     * Contains "applyOps" oplog entries for a transaction. "applyOps" entries are not actual
     * "applyOps" entries to be written to the oplog, but comprise certain parts of those entries -
     * BSON serialized operations, and the assigned oplog slot. The operations in field
     * 'ApplyOpsEntry::operations' should be considered opaque outside the OpObserver.
     ','line_number':94,'multiline':True]
['text':' Conservative BSON array element overhead assuming maximum 6 digit array index.','line_number':101,'multiline':False]
['text':' Representation of "applyOps" oplog entries.','line_number':124,'multiline':False]
['text':' Number of oplog slots utilized.','line_number':127,'multiline':False]
['text':' Number of operations with 'needsRetryImage' set.','line_number':130,'multiline':False]
['text':' Indicates if we are generating "applyOps" oplog entries for a prepared transaction.','line_number':133,'multiline':False]
['text':' This is derived from the 'prepared' parameter passed to the getApplyOpsInfo() function.','line_number':134,'multiline':False]
['text':'*
     * Accepts an empty BSON builder and appends the given transaction statements to an 'applyOps'
     * array field (and their corresponding statement ids to 'stmtIdsWritten'). The transaction
     * statements are represented as range ['stmtBegin', 'stmtEnd') and BSON serialized objects
     * 'operations'. If any of the statements has a pre-image or post-image that needs to be
     * stored in the image collection, stores it to 'imageToWrite'.
     *
     * Throws TransactionTooLarge if the size of the resulting oplog entry exceeds the BSON limit.
     * See BSONObjMaxUserSize (currently set to 16 MB).
     *
     * Used to implement logOplogEntries().
     ','line_number':138,'multiline':True]
['text':'*
     * Returns true if '_transactionsOperations' is empty.
     ','line_number':160,'multiline':True]
['text':'*
     * Returns number of items in '_transactionOperations'.
     ','line_number':165,'multiline':True]
['text':'*
     * Total size in bytes of all operations within the _transactionOperations vector.
     * See DurableOplogEntry::getDurableReplOperationSize().
     ','line_number':170,'multiline':True]
['text':'*
     * Returns number of operations that have pre-images or post-images to be written to
     * noop oplog entries or the image collection.
     ','line_number':176,'multiline':True]
['text':'*
     * Clears the operations stored in this container along with corresponding statistics.
     ','line_number':182,'multiline':True]
['text':'*
     * Adds an operation to this container and updates relevant statistics.
     *
     * Ensures that statement ids in operation do not conflict with the operations
     * already added.
     *
     * Ensures that total size of collected operations after adding operation does not
     * exceed 'transactionSizeLimitBytes' (if provided).
     ','line_number':187,'multiline':True]
['text':'*
     * Returns a set of collection UUIDs for the operations stored in this container.
     *
     * This allows the caller to check which collections will be modified as a resulting of
     * executing this transaction. The set of UUIDs returned by this function does not include
     * collection UUIDs for no-op operations, e.g. {op: 'n', ...}.
     ','line_number':199,'multiline':True]
['text':'*
     * Returns oplog slots to be used for "applyOps" oplog entries, BSON serialized operations,
     * their assignments to "applyOps" entries, and oplog slots to be used for writing pre- and
     * post- image oplog entries for the transaction consisting of 'operations'. Allocates oplog
     * slots from 'oplogSlots'. The 'prepare' indicates if the function is called when preparing a
     * transaction.
     ','line_number':208,'multiline':True]
['text':'*
     * Logs applyOps oplog entries for preparing a transaction, committing an unprepared
     * transaction, or committing a WUOW that is not necessarily related to a multi-document
     * transaction. This includes the in-progress 'partialTxn' oplog entries followed by the
     * implicit prepare or commit entry. If the 'prepare' argument is true, it will log entries
     * for a prepared transaction. Otherwise, it logs entries for an unprepared transaction.
     * The total number of oplog entries written will be <= the number of the operations in the
     * '_transactionOperations' vector, and will depend on how many transaction statements
     * are given, the data size of each statement, and the 'oplogEntryCountLimit' parameter
     * given to getApplyOpsInfo().
     *
     * This function expects that the size of 'oplogSlots' be at least as big as the size of
     * '_transactionOperations' in the worst case, where each operation requires an applyOps
     * entry of its own. If there are more oplog slots than applyOps operations are written, the
     * number of oplog slots corresponding to the number of applyOps written will be used.
     * It also expects that the vector of given statements is non-empty.
     *
     * The 'applyOpsOperationAssignment' contains BSON serialized transaction statements, their
     * assignment to "applyOps" oplog entries for a transaction.
     *
     * In the case of writing entries for a prepared transaction, the last oplog entry
     * (i.e. the implicit prepare) will always be written using the last oplog slot given,
     * even if this means skipping over some reserved slots.
     *
     * The number of oplog entries written is returned.
     *
     * Throws TransactionTooLarge if the size of any resulting applyOps oplog entry exceeds the
     * BSON limit.
     * See packTransactionStatementsForApplyOps() and BSONObjMaxUserSize (currently set to 16 MB).
     ','line_number':220,'multiline':True]
['text':'*
     * Returns const reference to vector of operations for integrating with
     * BatchedWriteContext, TransactionParticipant, and OpObserver interfaces
     * for multi-doc transactions.
     *
     * This function can be removed when we have migrated callers of BatchedWriteContext
     * and TransactionParticipant to use the methods on this class directly.
     ','line_number':257,'multiline':True]
['text':'*
     * Returns copy of operations for TransactionParticipant testing.
     ','line_number':267,'multiline':True]
['text':' Holds stmtIds for operations which have been applied in the current multi-document','line_number':275,'multiline':False]
['text':' transaction.','line_number':276,'multiline':False]
['text':' Size of operations in _transactionOperations as calculated by','line_number':279,'multiline':False]
['text':' DurableOplogEntry::getDurableReplOperationSize().','line_number':280,'multiline':False]
['text':' Number of operations that have pre-images or post-images to be written to noop oplog','line_number':283,'multiline':False]
['text':' entries or the image collection.','line_number':284,'multiline':False]
['text':' namespace mongo','line_number':288,'multiline':False]
