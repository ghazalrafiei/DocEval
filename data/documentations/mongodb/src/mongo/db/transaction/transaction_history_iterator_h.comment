['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 * An iterator class that traverses backwards through a transaction's oplog entries by following the
 * "prevOpTime" link in each entry.
 ','line_number':39,'multiline':True]
['text':'*
     * Returns false if there are no more entries to iterate.
     ','line_number':47,'multiline':True]
['text':'*
     * Returns an oplog entry and advances the iterator one step back through the oplog.
     * Should not be called if hasNext is false.
     * Throws if next oplog entry is in a unrecognized format or if it can't find the next oplog
     * entry.
     ','line_number':52,'multiline':True]
['text':'*
     * Same as next() but returns only the OpTime, instead of the entire entry.
     ','line_number':60,'multiline':True]
['text':'*
     * Creates a new iterator starting with an oplog entry with the given start opTime.
     ','line_number':68,'multiline':True]
['text':'*
     * Same as next() but makes exceptions fatal.
     ','line_number':78,'multiline':True]
['text':' Clients can set this to allow PlanExecutors created by this TransactionHistoryIterator to','line_number':84,'multiline':False]
['text':' have a YIELD_AUTO yield policy. It is only safe to set this if next() will never be called','line_number':85,'multiline':False]
['text':' while holding a lock that should not be yielded.','line_number':86,'multiline':False]
['text':' namespace mongo','line_number':92,'multiline':False]
