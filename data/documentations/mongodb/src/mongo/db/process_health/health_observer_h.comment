['text':'*
 *    Copyright (C) 2021-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 * Liveness data and stats.
 ','line_number':47,'multiline':True]
['text':' true is this observer is currently running a health check.','line_number':51,'multiline':False]
['text':' When the last or current check started, depending if currently','line_number':53,'multiline':False]
['text':' running one.','line_number':54,'multiline':False]
['text':' When the last check completed (not the current one).','line_number':56,'multiline':False]
['text':' Incremented when a check is done.','line_number':58,'multiline':False]
['text':' Incremented when check completed with fault.','line_number':60,'multiline':False]
['text':' This doesn't take into account critical vs non-critical.','line_number':61,'multiline':False]
['text':'*
 * Interface to conduct periodic health checks.
 ','line_number':75,'multiline':True]
['text':'*
     * Health observer of this type is unique and can only create the fault facet
     * of the same type.
     *
     * @return FaultFacetType of this health observer.
     ','line_number':82,'multiline':True]
['text':'*
     * Triggers health check. The implementation should not block to wait for the completion
     * of this check.
     *
     * @param factory Interface to get or create the factory of faults.
     ','line_number':90,'multiline':True]
['text':'*
     * Value used to introduce jitter between health check invocations.
     ','line_number':101,'multiline':True]
['text':'*
     * Timeout value enforced on an individual health check.
     ','line_number':106,'multiline':True]
['text':'*
     * Returns false if the health observer is missing some configuration it needs for its health
     * checks. In the case of faulty configuration, make sure to log any helpful messages within
     * this method.
     ','line_number':111,'multiline':True]
['text':' namespace process_health','line_number':119,'multiline':False]
['text':' namespace mongo','line_number':120,'multiline':False]
