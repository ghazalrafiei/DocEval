['text':'*
 *    Copyright (C) 2021-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 * FaultManager is a singleton constantly monitoring the health of the
 * system.
 *
 * It supports pluggable 'HealthObservers', which are responsible to check various
 * aspects of the server health. The aggregate outcome of all periodic checks
 * is accesible as FaultState.
 *
 * If an active fault state persists, FaultManager will terminate the server process.
 ','line_number':64,'multiline':True]
['text':' The taskExecutor provided should not be already started.','line_number':79,'multiline':False]
['text':' Variant with explicit crash callback for tests.','line_number':83,'multiline':False]
['text':' Start periodic health checks, invoke it once during server startup.','line_number':103,'multiline':False]
['text':' It is unsafe to start health checks immediately during ServiceContext creation','line_number':104,'multiline':False]
['text':' because some ServiceContext fields might not be initialized yet.','line_number':105,'multiline':False]
['text':' Health checks cannot be stopped but could be effectively disabled with health-checker','line_number':106,'multiline':False]
['text':' specific flags.','line_number':107,'multiline':False]
['text':' Replace the FaultManager for the 'svcCtx'. This functionality','line_number':115,'multiline':False]
['text':' is exposed for testing and initial bootstrap.','line_number':116,'multiline':False]
['text':' Signals that the intensity for a health observer has been updated.','line_number':119,'multiline':False]
['text':' Returns the current fault state for the server.','line_number':123,'multiline':False]
['text':' Returns the current fault, if any. Otherwise returns an empty pointer.','line_number':126,'multiline':False]
['text':' All observers remain valid for the manager lifetime, thus returning','line_number':129,'multiline':False]
['text':' just pointers is safe, as long as they are used while manager exists.','line_number':130,'multiline':False]
['text':' Gets the aggregate configuration for all process health environment.','line_number':133,'multiline':False]
['text':' Gets the timestamp of the last transition','line_number':136,'multiline':False]
['text':'*
     * Generate the `serverStatus` section for the fault manager.
     * @param appendDetails is true when the section is generated with:
     *     health: {details: true}
     * thus it is ok to add any verbose information here.
     ','line_number':139,'multiline':True]
['text':' Returns all health observers not configured as Off','line_number':148,'multiline':False]
['text':' Runs a particular health observer.  Then attempts to transition states. Then schedules next','line_number':152,'multiline':False]
['text':' run.','line_number':153,'multiline':False]
['text':'*
     * Update the active fault with supplied check result.
     * Create or delete existing facet depending on the status.
     ','line_number':162,'multiline':True]
['text':' One time init.','line_number':177,'multiline':False]
['text':' Callback used to crash the server.','line_number':183,'multiline':False]
['text':' This source is canceled before the _taskExecutor shutdown(). It','line_number':190,'multiline':False]
['text':' can be used to check for the start of the shutdown sequence.','line_number':191,'multiline':False]
['text':' Manager owns all observer instances.','line_number':193,'multiline':False]
['text':' Protects the state below.','line_number':197,'multiline':False]
['text':' Responsible for transitioning the state of FaultManager to ActiveFault after a','line_number':204,'multiline':False]
['text':' timeout while in the TransientFault state. The timer is canceled when the instance is','line_number':205,'multiline':False]
['text':' destroyed.','line_number':206,'multiline':False]
['text':' Cancel timer for transitioning to ActiveFault','line_number':215,'multiline':False]
['text':' Fufilled when we should transition to ActiveFault','line_number':218,'multiline':False]
['text':' The stages of health check context modifications:','line_number':226,'multiline':False]
['text':' 1. Schedule and set callbackHandle','line_number':227,'multiline':False]
['text':' 2. When scheduled check starts, reset callbackHandle and set result future','line_number':228,'multiline':False]
['text':' 3. When result is ready, repeat','line_number':229,'multiline':False]
['text':' namespace process_health','line_number':241,'multiline':False]
['text':' namespace mongo','line_number':242,'multiline':False]
