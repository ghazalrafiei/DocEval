['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 * Contains all the authorization logic for a single client connection.  It contains a set of
 * the users which have been authenticated, as well as a set of privileges that have been
 * granted to those users to perform various actions.
 *
 * An AuthorizationSession object is present within every mongo::Client object.
 *
 * Users in the _authenticatedUsers cache may get marked as invalid by the AuthorizationManager,
 * for instance if their privileges are changed by a user or role modification command.  At the
 * beginning of every user-initiated operation startRequest() gets called which updates
 * the cached information about any users who have been marked as invalid.  This guarantees that
 * every operation looks at one consistent view of each user for every auth check required over
 * the lifetime of the operation.
 ','line_number':70,'multiline':True]
['text':'*
     * Provides a way to swap out impersonate data for the duration of the ScopedImpersonate's
     * lifetime.
     ','line_number':93,'multiline':True]
['text':'*
     * Gets the AuthorizationSession associated with the given "client", or nullptr.
     *
     * The "client" object continues to own the returned AuthorizationSession.
     ','line_number':120,'multiline':True]
['text':'*
     * Gets the AuthorizationSession associated with the given "client", or nullptr.
     *
     * The "client" object continues to own the returned AuthorizationSession.
     ','line_number':127,'multiline':True]
['text':'*
     * Returns false if AuthorizationSession::get(client) would return nullptr.
     ','line_number':134,'multiline':True]
['text':'*
     * Sets the AuthorizationSession associated with "client" to "session".
     *
     * "session" must not be NULL, and it is only legal to call this function once
     * on each instance of "client".
     ','line_number':139,'multiline':True]
['text':' Takes ownership of the externalState.','line_number':147,'multiline':False]
['text':' Should be called at the beginning of every new request.  This performs the checks','line_number':152,'multiline':False]
['text':' necessary to determine if localhost connections should be given full access.','line_number':153,'multiline':False]
['text':' TODO: try to eliminate the need for this call.','line_number':154,'multiline':False]
['text':'*
     * Start tracking permissions and privileges in the authorization contract.
     ','line_number':157,'multiline':True]
['text':'*
     * Adds the User identified by "UserName" to the authorization session, acquiring privileges
     * for it in the process.
     ','line_number':162,'multiline':True]
['text':' Returns the authenticated user with the given name.  Returns NULL','line_number':170,'multiline':False]
['text':' if no such user is found.','line_number':171,'multiline':False]
['text':' The user remains in the _authenticatedUsers set for this AuthorizationSession,','line_number':172,'multiline':False]
['text':' and ownership of the user stays with the AuthorizationManager','line_number':173,'multiline':False]
['text':' Get the authenticated user's object handle, if any.','line_number':176,'multiline':False]
['text':' Get the authenticated user's tenant ID, if any.','line_number':179,'multiline':False]
['text':' Is auth disabled? Returns true if auth is disabled.','line_number':182,'multiline':False]
['text':' Is authenticated as at least one user.','line_number':185,'multiline':False]
['text':' Gets the name of the currently authenticated user (if any).','line_number':188,'multiline':False]
['text':' Gets an iterator over the roles of all authenticated users stored in this manager.','line_number':191,'multiline':False]
['text':' Removes all authenticated principals while in kSecurityToken authentication mode.','line_number':194,'multiline':False]
['text':' Removes any authenticated principals and revokes any privileges that were granted via those','line_number':197,'multiline':False]
['text':' principals. This function modifies state. Synchronizes with the Client lock.','line_number':198,'multiline':False]
['text':' Removes any authenticated principals whose authorization credentials came from the given','line_number':201,'multiline':False]
['text':' database, and revokes any privileges that were granted via that principal. This function','line_number':202,'multiline':False]
['text':' modifies state. Synchronizes with the Client lock.','line_number':203,'multiline':False]
['text':' How the active session is authenticated.','line_number':206,'multiline':False]
['text':' Not authenticated.','line_number':208,'multiline':False]
['text':' For the duration of the connection, or until logged out or','line_number':209,'multiline':False]
['text':' expiration.','line_number':210,'multiline':False]
['text':' By operation scoped security token.','line_number':211,'multiline':False]
['text':' Adds the internalSecurity user to the set of authenticated users.','line_number':215,'multiline':False]
['text':' Used to grant internal threads full access. Takes in the Client','line_number':216,'multiline':False]
['text':' as a parameter so it can take out a lock on the client.','line_number':217,'multiline':False]
['text':' Checks if the current session is authorized to list the collections in the given','line_number':221,'multiline':False]
['text':' database. If it is, return a privilegeVector containing the privileges used to authorize','line_number':222,'multiline':False]
['text':' this command.','line_number':223,'multiline':False]
['text':' Checks if this connection is using the localhost bypass','line_number':227,'multiline':False]
['text':' Checks if this connection has the privileges necessary to parse a namespace from a','line_number':230,'multiline':False]
['text':' given BSONElement.','line_number':231,'multiline':False]
['text':' Checks if this connection has the privileges necessary to parse a namespace from a','line_number':234,'multiline':False]
['text':' given NamespaceOrUUID object.','line_number':235,'multiline':False]
['text':' Checks if this connection has the privileges necessary to create a new role','line_number':238,'multiline':False]
['text':' Utility function for isAuthorizedToChangeOwnPasswordAsUser and','line_number':241,'multiline':False]
['text':' isAuthorizedToChangeOwnCustomDataAsUser','line_number':242,'multiline':False]
['text':' Returns true if any of the authenticated users on this session have the given role.','line_number':245,'multiline':False]
['text':' NOTE: this does not refresh any of the users even if they are marked as invalid.','line_number':246,'multiline':False]
['text':' Returns true if this session is authorized for the given Privilege.','line_number':249,'multiline':False]
['text':'','line_number':250,'multiline':False]
['text':' Contains all the authorization logic including handling things like the localhost','line_number':251,'multiline':False]
['text':' exception.','line_number':252,'multiline':False]
['text':' Like isAuthorizedForPrivilege, above, except returns true if the session is authorized','line_number':255,'multiline':False]
['text':' for all of the listed privileges.','line_number':256,'multiline':False]
['text':' Utility function for isAuthorizedForPrivilege(Privilege(resource, action)).','line_number':259,'multiline':False]
['text':' Utility function for isAuthorizedForPrivilege(Privilege(resource, actions)).','line_number':263,'multiline':False]
['text':' Utility function for','line_number':267,'multiline':False]
['text':' isAuthorizedForActionsOnResource(ResourcePattern::forExactNamespace(ns), action).','line_number':268,'multiline':False]
['text':' Utility function for','line_number':272,'multiline':False]
['text':' isAuthorizedForActionsOnResource(ResourcePattern::forExactNamespace(ns), actions).','line_number':273,'multiline':False]
['text':' Returns true if the current session possesses a privilege which could apply to the','line_number':277,'multiline':False]
['text':' database resource, or a specific or arbitrary resource within the database.','line_number':278,'multiline':False]
['text':' Returns true if the current session possesses a privilege which applies to the resource.','line_number':281,'multiline':False]
['text':' Replaces the data for the user that a system user is impersonating with new data.','line_number':284,'multiline':False]
['text':' The auditing system adds this user and their roles to each audit record in the log.','line_number':285,'multiline':False]
['text':' Gets the name of the user, if any, that the system user is impersonating.','line_number':289,'multiline':False]
['text':' Gets an iterator over the roles of all users that the system user is impersonating.','line_number':292,'multiline':False]
['text':' Clears the data for impersonated users.','line_number':295,'multiline':False]
['text':' Returns true if the session and 'opClient's AuthorizationSession share an','line_number':298,'multiline':False]
['text':' authenticated user. If either object has impersonated users,','line_number':299,'multiline':False]
['text':' those users will be considered as 'authenticated' for the purpose of this check.','line_number':300,'multiline':False]
['text':'','line_number':301,'multiline':False]
['text':' The existence of 'opClient' must be guaranteed through locks taken by the caller,','line_number':302,'multiline':False]
['text':' as demonstrated by opClientLock which must be a lock taken on opClient.','line_number':303,'multiline':False]
['text':'','line_number':304,'multiline':False]
['text':' Returns true if the current auth session and the opClient's auth session have users','line_number':305,'multiline':False]
['text':' in common.','line_number':306,'multiline':False]
['text':' Returns true if the specified userName is the currently authenticated user,','line_number':309,'multiline':False]
['text':' or if the session is unauthenticated and `boost::none` is specified.','line_number':310,'multiline':False]
['text':' Impersonated users are not considered as 'authenticated' for the purpose of this check.','line_number':311,'multiline':False]
['text':' This always returns true if auth is not enabled.','line_number':312,'multiline':False]
['text':' Tells whether impersonation is active or not.  This state is set when','line_number':315,'multiline':False]
['text':' setImpersonatedUserData is called and cleared when clearImpersonatedUserData is','line_number':316,'multiline':False]
['text':' called.','line_number':317,'multiline':False]
['text':' Returns a status encoding whether the current session in the specified `opCtx` has privilege','line_number':320,'multiline':False]
['text':' to access a cursor in the specified `cursorSessionId` parameter.  Returns `Status::OK()`,','line_number':321,'multiline':False]
['text':' when the session is accessible.  Returns a `mongo::Status` with information regarding the','line_number':322,'multiline':False]
['text':' nature of session inaccessibility when the session is not accessible.','line_number':323,'multiline':False]
['text':' Verify the authorization contract. If contract == nullptr, no check is performed.','line_number':327,'multiline':False]
['text':' Returns true if any user has the privilege to bypass write blocking mode for the cluster','line_number':330,'multiline':False]
['text':' resource.','line_number':331,'multiline':False]
['text':' Returns true if the authorization session is expired. When this returns true,','line_number':334,'multiline':False]
['text':' isAuthenticated() is also expected to return false.','line_number':335,'multiline':False]
['text':' When the current authorization will expire.','line_number':338,'multiline':False]
['text':' boost::none indicates a non-expiring session.','line_number':339,'multiline':False]
['text':' Returns a status encoding whether the current session in the specified `opCtx` has privilege to','line_number':346,'multiline':False]
['text':' access a cursor in the specified `cursorSessionId` parameter.  Returns `Status::OK()`, when the','line_number':347,'multiline':False]
['text':' session is accessible.  Returns a `mongo::Status` with information regarding the nature of','line_number':348,'multiline':False]
['text':' session inaccessibility when the session is not accessible.','line_number':349,'multiline':False]
['text':' namespace mongo','line_number':359,'multiline':False]
