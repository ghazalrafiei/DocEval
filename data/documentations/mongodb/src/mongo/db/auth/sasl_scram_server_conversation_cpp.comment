['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' IWYU pragma: keep','line_number':43,'multiline':False]
['text':' IWYU pragma: keep','line_number':71,'multiline':False]
['text':'
 * RFC 5802 specifies that in SCRAM user names characters ',' and '=' are encoded as
 * =2C and =3D respectively.
 ','line_number':99,'multiline':True]
['text':'
 * Parse client-first-message of the form:
 * n,a=authzid,n=encoded-username,r=client-nonce
 *
 * Generate server-first-message on the form:
 * r=client-nonce|server-nonce,s=user-salt,i=iteration-count
 *
 * NOTE: we are ignoring the authorization ID part of the message
 ','line_number':108,'multiline':True]
['text':'*
     * gs2-cbind-flag := ("p=" cb-name) / 'y' / 'n'
     * gs2-header := gs2-cbind-flag ',' [ authzid ] ','
     * reserved-mext := "m=" 1*(value-char)
     * client-first-message-bare := [reserved-mext  ','] username ',' nonce [',' extensions]
     * client-first-message := gs2-header client-first-message-bare
     ','line_number':127,'multiline':True]
['text':' StringSplitter::split() will ignore consecutive delimiters.
     * e.g. "foo,,bar" => {"foo","bar"}
     * This makes our implementation of SCRAM *slightly* more generous
     * in what it will accept than the standard calls for.
     *
     * This does not impact _authMessage, as it's composed from the raw
     * string input, rather than the output of the split operation.
     ','line_number':167,'multiline':True]
['text':' gs2-header is not included in this count, so add it back in.','line_number':178,'multiline':False]
['text':' SERVER-16534, some mechanisms must be enabled for authenticating the internal user, so that','line_number':207,'multiline':False]
['text':' cluster members may communicate with each other. Hence ignore disabled auth mechanism','line_number':208,'multiline':False]
['text':' for the internal user.','line_number':209,'multiline':False]
['text':' We can no longer accept keyfiles.','line_number':213,'multiline':False]
['text':' The authentication database is also the source database for the user.','line_number':226,'multiline':False]
['text':' Check for authentication attempts of the __system user on','line_number':253,'multiline':False]
['text':' systems started without a keyfile.','line_number':254,'multiline':False]
['text':' Generate server-first-message','line_number':285,'multiline':False]
['text':' Create text-based nonce as base64 encoding of a binary blob of length multiple of 3','line_number':286,'multiline':False]
['text':' add client-first-message-bare and server-first-message to _authMessage','line_number':298,'multiline':False]
['text':'*
 * Parse client-final-message of the form:
 * c=channel-binding(base64),r=client-nonce|server-nonce,p=ClientProof
 *
 * Generate successful authentication server-final-message on the form:
 * v=ServerSignature
 *
 * or failed authentication server-final-message on the form:
 * e=message
 *
 * NOTE: we are ignoring the channel binding part of the message
 *','line_number':304,'multiline':True]
['text':'*
     * client-final-message-without-proof := cbind ',' nonce ',' [ ',' extensions ]
     * client-final-message := client-final-message-without-proof ',' proof
     ','line_number':326,'multiline':True]
['text':' add client-final-message-without-proof to authMessage','line_number':335,'multiline':False]
['text':' Add count for proof back on.','line_number':348,'multiline':False]
['text':' Concatenated nonce sent by client should equal the one in server-first-message','line_number':364,'multiline':False]
['text':' Do server side computations, compare storedKeys and generate client-final-message','line_number':372,'multiline':False]
['text':' AuthMessage     := client-first-message-bare + "," +','line_number':373,'multiline':False]
['text':'                    server-first-message + "," +','line_number':374,'multiline':False]
['text':'                    client-final-message-without-proof','line_number':375,'multiline':False]
['text':' ClientSignature := HMAC(StoredKey, AuthMessage)','line_number':376,'multiline':False]
['text':' ClientKey := ClientSignature XOR ClientProof','line_number':377,'multiline':False]
['text':' ServerSignature := HMAC(ServerKey, AuthMessage)','line_number':378,'multiline':False]
['text':' ServerSignature := HMAC(ServerKey, AuthMessage)','line_number':396,'multiline':False]
['text':' namespace','line_number':422,'multiline':False]
['text':' namespace mongo','line_number':423,'multiline':False]
