['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' TODO: SERVER-50283 Refactor UnnamedRestriction BSON serialization APIs.','line_number':170,'multiline':False]
['text':'*
 * Make sure the roleDoc as retreived from storage matches expectations for options.
 ','line_number':179,'multiline':True]
['text':' For a rolesInfo invocation, we need to lift ARs up into a container.','line_number':215,'multiline':False]
['text':' For a usersInfo invocation, we leave it as is.','line_number':221,'multiline':False]
['text':' namespace','line_number':272,'multiline':False]
['text':' If tenantId is none, we're checking whether to enable localhost auth bypass which by definition','line_number':281,'multiline':False]
['text':' will be a local user.','line_number':282,'multiline':False]
['text':' If we were unable to complete the query,','line_number':290,'multiline':False]
['text':' it's best to assume that there _are_ privilege documents.','line_number':291,'multiline':False]
['text':' Normal path: Acquire a user from the local store by UserName.','line_number':341,'multiline':False]
['text':' Proxy path.  Some other external mechanism (e.g. X509 or LDAP) has acquired','line_number':361,'multiline':False]
['text':' a base user definition with a set of immediate roles.','line_number':362,'multiline':False]
['text':' We're being asked to use the local roles collection to derive privileges,','line_number':363,'multiline':False]
['text':' subordinate roles, and authentication restrictions.','line_number':364,'multiline':False]
['text':' Apply TenantID for user to all roles (which are assumed to be part of the same tenant).','line_number':373,'multiline':False]
['text':' We are able to artifically construct the external user from the request','line_number':429,'multiline':False]
['text':' Apply TenantID for user to all roles (which are assumed to be part of the same tenant).','line_number':444,'multiline':False]
['text':' Perform DB queries for user-defined roles (skipping builtin roles).','line_number':464,'multiline':False]
['text':' If anything remains, raise it as an unknown role error.','line_number':473,'multiline':False]
['text':' Shouldn't be called this way, but cope if we are.','line_number':626,'multiline':False]
['text':' Synthesize builtin role from definition.','line_number':642,'multiline':False]
['text':' throws','line_number':667,'multiline':False]
['text':' Builtin roles have identival privs/inheritedPrivs','line_number':721,'multiline':False]
['text':'*
 * Below this point is the implementation of our OpObserver handler.
 *
 * Ops which mutate user documents will invalidate those specific users
 * from the UserCache.
 *
 * Any other privilege related op (mutation to roles or version collection,
 * or command issued on the admin namespace) will invalidate the entire
 * user cache.
 ','line_number':761,'multiline':True]
['text':' Capture events regardless of what Tenant they occured in,','line_number':785,'multiline':False]
['text':' invalidators will purge cache on a per-tenant basis as needed.','line_number':786,'multiline':False]
['text':' System-only collections.','line_number':793,'multiline':False]
['text':' admin.system.users or {tenantID}_admin.system.users','line_number':805,'multiline':False]
['text':' admin.system.roles or {tenantID}_admin.system.roles','line_number':811,'multiline':False]
['text':' namespace','line_number':873,'multiline':False]
['text':' namespace mongo','line_number':893,'multiline':False]
