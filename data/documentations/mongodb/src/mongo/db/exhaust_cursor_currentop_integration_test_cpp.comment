['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' IWYU pragma: no_include "cxxabi.h"','line_number':35,'multiline':False]
['text':' Specifies the amount of time we are willing to wait for a parallel operation to complete.','line_number':91,'multiline':False]
['text':' Obtain a pointer to the global system clock. Used to enforce timeouts in the parallel thread.','line_number':94,'multiline':False]
['text':' Drop and recreate the test namespace.','line_number':109,'multiline':False]
['text':' Start an exhaust request with a batchSize of 2 in the initial 'find' and a batchSize of 1 in','line_number':183,'multiline':False]
['text':' subsequent 'getMore's.','line_number':184,'multiline':False]
['text':' Protects the 'cursorId' variable.','line_number':192,'multiline':False]
['text':' Synchronizes the threads on 'cursorId' initialization.','line_number':193,'multiline':False]
['text':' Issue the initial 'find' with a batchSize of 2 and the exhaust flag set.','line_number':205,'multiline':False]
['text':' We then iterate through the first batch and confirm that the results are','line_number':206,'multiline':False]
['text':' as expected.','line_number':207,'multiline':False]
['text':' Having exhausted the two results returned by the initial find, we set the','line_number':228,'multiline':False]
['text':' batchSize to 1 and issue a single getMore via DBClientCursor::more().','line_number':229,'multiline':False]
['text':' Because the 'exhaust' flag is set, the server will generate a series of','line_number':230,'multiline':False]
['text':' internal getMores and stream them back to the client until the cursor is','line_number':231,'multiline':False]
['text':' exhausted, without the client sending any further getMore requests. We','line_number':232,'multiline':False]
['text':' expect this request to hang at the','line_number':233,'multiline':False]
['text':' 'waitWithPinnedCursorDuringGetMoreBatch' failpoint.','line_number':234,'multiline':False]
['text':' Wait until the parallel operation initializes its cursor.','line_number':247,'multiline':False]
['text':' Confirm that the initial getMore appears in the $currentOp output.','line_number':265,'multiline':False]
['text':' Airlock the failpoint by releasing it only after we enable a post-getMore failpoint. This','line_number':268,'multiline':False]
['text':' ensures that no subsequent getMores can run before we re-enable the original failpoint.','line_number':269,'multiline':False]
['text':' Confirm that the getMore completed its batch and hit the post-getMore failpoint.','line_number':272,'multiline':False]
['text':' Re-enable the original failpoint to catch the next getMore, and release the current one.','line_number':278,'multiline':False]
['text':' namespace','line_number':282,'multiline':False]
['text':' We need to set failpoints around getMore which cause it to hang, so only test against a','line_number':287,'multiline':False]
['text':' single server rather than a replica set or mongoS.','line_number':288,'multiline':False]
['text':' Enable a failpoint to block getMore during execution.','line_number':295,'multiline':False]
['text':' Execute a query on a separate thread, with the 'exhaust' flag set.','line_number':301,'multiline':False]
['text':' Ensure that, regardless of whether the test completes or fails, we release all failpoints.','line_number':303,'multiline':False]
['text':' We expect that the server, having received the first {batchSize: 1} getMore for the parallel','line_number':310,'multiline':False]
['text':' thread's exhaust cursor, will produce a series of pseudo-getMores internally and stream the','line_number':311,'multiline':False]
['text':' results back to the client until the cursor is exhausted. Here, we verify that each of these','line_number':312,'multiline':False]
['text':' pseudo-getMores appear in the $currentOp output.','line_number':313,'multiline':False]
['text':' Test exhaust cursor is cleaned up on client disconnect. By default, the test client disconnects','line_number':319,'multiline':False]
['text':' while the exhaust getMore is running. If disconnectAfterGetMoreBatch is set to true, the test','line_number':320,'multiline':False]
['text':' client disconnects after the exhaust getMore is run but before the server sends out the response.','line_number':321,'multiline':False]
['text':' We need to set failpoints around getMore which cause it to hang, so only test against a','line_number':325,'multiline':False]
['text':' single server rather than a replica set or mongoS.','line_number':326,'multiline':False]
['text':' Enable a failpoint to block getMore during execution.','line_number':333,'multiline':False]
['text':' Execute a query on a separate thread, with the 'exhaust' flag set.','line_number':341,'multiline':False]
['text':' Ensure that, regardless of whether the test completes or fails, we release all failpoints.','line_number':343,'multiline':False]
['text':' This will allow the initial getMore to run.','line_number':350,'multiline':False]
['text':' The next getMore will be an exhaust getMore. Confirm that the exhaust getMore appears in the','line_number':353,'multiline':False]
['text':' $currentOp output.','line_number':354,'multiline':False]
['text':' Allow the exhaust getMore to run but block it before sending out the response.','line_number':362,'multiline':False]
['text':' Kill the client connection while the exhaust getMore is blocked on the failpoint.','line_number':371,'multiline':False]
['text':' Disable the failpoint to allow the exhaust getMore to continue sending out the response','line_number':376,'multiline':False]
['text':' after the client disconnects. This will result in a broken pipe error.','line_number':377,'multiline':False]
['text':' Confirm that the exhaust getMore was interrupted and does not appear in the $currentOp','line_number':382,'multiline':False]
['text':' output.','line_number':383,'multiline':False]
['text':' Confirm that the cursor was cleaned up and does not appear in the $currentOp idleCursor','line_number':393,'multiline':False]
['text':' output.','line_number':394,'multiline':False]
['text':' Test that an exhaust getMore is interrupted on client disconnect.','line_number':399,'multiline':False]
['text':' disconnectAfterGetMoreBatch ','line_number':400,'multiline':True]
['text':' Test that exhaust cursor is cleaned up on broken pipe even if the exhaust getMore succeeded.','line_number':404,'multiline':False]
['text':' disconnectAfterGetMoreBatch ','line_number':405,'multiline':True]
['text':' We need to test the lastKnownCommittedOpTime in exhaust getMore requests. So we need a','line_number':411,'multiline':False]
['text':' replica set.','line_number':412,'multiline':False]
['text':' Connect directly to the primary.','line_number':417,'multiline':False]
['text':' Create a capped collection to run tailable awaitData queries on.','line_number':422,'multiline':False]
['text':' size of collection ','line_number':424,'multiline':True]
['text':' capped ','line_number':424,'multiline':True]
['text':' max number of objects ','line_number':424,'multiline':True]
['text':' Insert initial records into the capped collection.','line_number':425,'multiline':False]
['text':' Get the lastAppliedOpTime after the initial inserts.','line_number':433,'multiline':False]
['text':' Create a new connection to the primary for the exhaust query.','line_number':436,'multiline':False]
['text':' Enable a failpoint to block getMore during execution to avoid races between getCursorId() and','line_number':442,'multiline':False]
['text':' receiving new batches.','line_number':443,'multiline':False]
['text':' Initiate a tailable awaitData exhaust cursor with lastKnownCommittedOpTime being the','line_number':446,'multiline':False]
['text':' lastAppliedOpTime.','line_number':447,'multiline':False]
['text':' awaitData timeout','line_number':451,'multiline':False]
['text':' lastKnownCommittedOpTime','line_number':452,'multiline':False]
['text':' Assert non-zero cursorId.','line_number':454,'multiline':False]
['text':' Disable failpoint and allow exhaust queries to run.','line_number':457,'multiline':False]
['text':' Test that the cursor's lastKnownCommittedOpTime is eventually advanced to the','line_number':462,'multiline':False]
['text':' lastAppliedOpTime.','line_number':463,'multiline':False]
['text':' Inserting more records to unblock awaitData and advance the commit point.','line_number':469,'multiline':False]
['text':' Get the new lastAppliedOpTime after the inserts.','line_number':477,'multiline':False]
['text':' Test that the cursor's lastKnownCommittedOpTime is eventually advanced to the','line_number':480,'multiline':False]
['text':' new lastAppliedOpTime.','line_number':481,'multiline':False]
['text':' namespace mongo','line_number':487,'multiline':False]
