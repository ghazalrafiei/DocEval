['text':'*
 *    Copyright (C) 2022-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 * Returns the state doc matching the document with shardSplitId from the disk if it
 * exists.
 *
 * If the stored state doc on disk contains invalid BSON, the 'InvalidBSON' error code is
 * returned.
 *
 * Returns 'NoMatchingDocument' error code if no document with 'shardSplitId' is found.
 ','line_number':110,'multiline':True]
['text':' Use kLastApplied so that we can read the state document as a secondary.','line_number':123,'multiline':False]
['text':' namespace','line_number':152,'multiline':False]
['text':' When a state document is transitioned to kAborted, the ShardSplitDonorOpObserver will','line_number':232,'multiline':False]
['text':' transition tenant access blockers to a kAborted state if, and only if, the abort timestamp','line_number':233,'multiline':False]
['text':' is less than or equal to the currentCommittedSnapshotOpTime. Since we are using the','line_number':234,'multiline':False]
['text':' ReplicationCoordinatorMock, we must manually manage the currentCommittedSnapshotOpTime','line_number':235,'multiline':False]
['text':' using this method.','line_number':236,'multiline':False]
['text':' The command can also be `hello`','line_number':314,'multiline':False]
['text':' Set a 30s timeout to prevent spurious timeouts.','line_number':373,'multiline':False]
['text':' The database needs to be open before using shard split donor service.','line_number':378,'multiline':False]
['text':' Timestamps of "0 seconds" are not allowed, so we must advance our clock mock to the first','line_number':387,'multiline':False]
['text':' real second. Don't save an instance, since this just internally modified the global','line_number':388,'multiline':False]
['text':' immortal ClockSourceMockImpl.','line_number':389,'multiline':False]
['text':' setup mock networking for split acceptance','line_number':393,'multiline':False]
['text':'*
     * Wait for replSetStepUp command, enqueue hello response, and ignore heartbeats.
     ','line_number':437,'multiline':True]
['text':'*
     * Wait for monitors to start, and enqueue successfull hello responses
     ','line_number':465,'multiline':True]
['text':' hasPrimary ','line_number':492,'multiline':True]
['text':' dollarPrefixHosts ','line_number':492,'multiline':True]
['text':' hasPrimary ','line_number':494,'multiline':True]
['text':' dollarPrefixHosts ','line_number':494,'multiline':True]
['text':' for mocking split acceptance','line_number':508,'multiline':False]
['text':' Shard split service will send a stepUp request to the first node in the vector.','line_number':535,'multiline':False]
['text':' We reset this failpoint to test complete functionality. waitForMonitorAndProcessHello()','line_number':538,'multiline':False]
['text':' returns hello responses that makes split acceptance pass.','line_number':539,'multiline':False]
['text':' Create and start the instance.','line_number':542,'multiline':False]
['text':' Verify the serverless lock has been acquired for split.','line_number':552,'multiline':False]
['text':' The lock has been released.','line_number':566,'multiline':False]
['text':' Create and start the instance.','line_number':581,'multiline':False]
['text':' Shard split service will send a stepUp request to the first node in the vector. When it fails','line_number':598,'multiline':False]
['text':' it will send it to the next node.','line_number':599,'multiline':False]
['text':' We disable this failpoint to test complete functionality. waitForMonitorAndProcessHello()','line_number':602,'multiline':False]
['text':' returns hello responses that makes split acceptance pass.','line_number':603,'multiline':False]
['text':' Create and start the instance.','line_number':606,'multiline':False]
['text':' Shard split will retry the command indefinitely for timeout/retriable errors.','line_number':614,'multiline':False]
['text':' Set a timeout of 200 ms, and make sure we reset after this test is run','line_number':640,'multiline':False]
['text':' Create and start the instance.','line_number':643,'multiline':False]
['text':' Shard split service will send a stepUp request to the first node in the vector.','line_number':667,'multiline':False]
['text':' Create and start the instance.','line_number':675,'multiline':False]
['text':' Validate we currently have a splitConfig and set it as the mock's return value.','line_number':691,'multiline':False]
['text':' Validate shard split sets a new replicaSetId on the recipientConfig.','line_number':699,'multiline':False]
['text':' Clear the failpoint and wait for completion.','line_number':703,'multiline':False]
['text':' Proves that the node with the highest lastAppliedOpTime is chosen as the recipient primary,','line_number':717,'multiline':False]
['text':' by replacing the default `hello` replies (set by the MockReplicaSet) with ones that report','line_number':718,'multiline':False]
['text':' `lastWrite.opTime` values in a deterministic way.','line_number':719,'multiline':False]
['text':' Abort scenario : abortSplit called before startSplit.','line_number':760,'multiline':False]
['text':' Abort scenario : instance created through startSplit then calling abortSplit.','line_number':788,'multiline':False]
['text':' Instance building (from inserted state document) is done in a separate thread. This failpoint','line_number':854,'multiline':False]
['text':' disable it to ensure there's no race condition with the insertion of the state document.','line_number':855,'multiline':False]
['text':' insert the document for the first time.','line_number':877,'multiline':False]
['text':' deletes a document that was marked as garbage collectable and succeeds.','line_number':880,'multiline':False]
['text':' Matching recipientSetName to the replSetName to fail validation and abort shard split.','line_number':895,'multiline':False]
['text':' Create and start the instance.','line_number':902,'multiline':False]
['text':' hasPrimary ','line_number':922,'multiline':True]
['text':' dollarPrefixHosts ','line_number':922,'multiline':True]
['text':' hasPrimary ','line_number':935,'multiline':True]
['text':' dollarPrefixHosts ','line_number':935,'multiline':True]
['text':' hasPrimary ','line_number':953,'multiline':True]
['text':' dollarPrefixHosts ','line_number':953,'multiline':True]
['text':' hasPrimary ','line_number':971,'multiline':True]
['text':' dollarPrefixHosts ','line_number':971,'multiline':True]
['text':' hasPrimary ','line_number':983,'multiline':True]
['text':' dollarPrefixHosts ','line_number':983,'multiline':True]
['text':' We need to allow writes during the test's setup.','line_number':1042,'multiline':False]
['text':' We set the promise before the future chain. Cleanup will return kCommitted as a result.','line_number':1130,'multiline':False]
['text':' deleted the local state doc so this should return NoMatchingDocument','line_number':1134,'multiline':False]
['text':' namespace mongo','line_number':1188,'multiline':False]
