['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' IWYU pragma: no_include "boost/system/detail/error_code.hpp"','line_number':40,'multiline':False]
['text':' IWYU pragma: keep','line_number':52,'multiline':False]
['text':' IWYU pragma: keep','line_number':58,'multiline':False]
['text':' The pipe read side has closed.','line_number':110,'multiline':False]
['text':'*
 * "Double fork" idiom to decouple mongod from the launcher process group (job) and terminal
 * session. We ensure that the daemon runs in a leaderless session. This protects it
 * from accidentally acquiring a controlling terminal should it open a terminal device
 * file.
 *
 * https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap11.html#tag_11_01_03
 *
 * Original process is <launcher>, which forks <middle>, which in turn forks <daemon>.
 *
 *       <launcher>                 // pid: <launcher>, pgid: <launcher>, sid: <?>
 *         |                        // [pid==pgid, so <launcher> is group leader]
 *         fork():
 *             + <launcher>
 *             |   | waitpid(<middle>)
 *             |   | exit with <middle>'s exit code
 *             |
 *             + <middle>           // pid: <middle>,   pgid: <launcher>, sid: <?>
 *                 |                // [<middle> is NOT group leader, thus it can `setsid()`]
 *                 setsid()         // pid: <middle>,   pgid: <middle>,   sid: <middle>
 *                 |                // [<middle> is leader of its own session and group]
 *                 pipe()
 *                 fork():
 *                     + <middle>
 *                     |  |read 1 byte from pipe
 *                     |  |if the read fails:
 *                     |  |    waitpid(<daemon>)
 *                     |  |    exit with <daemon>'s exit code
 *                     |  |exit successfully if the read succeeds
 *                     |
 *                     + <daemon>   // pid: <daemon>,   pgid: <middle>,   sid: <middle>
 *                        |         // [<daemon> leads neither its session nor its group]
 *                        |...
 *                        |(continue initializing)
 *                        |READY to serve:
 *                        |    write 1 byte to pipe
 *                        |(run forever)
 *                        |...
 *
 * The first fork creates a <middle> process. The important thing about <middle> is that
 * it is not a process group (job) leader, and is therefore not being controlled by its
 * session's terminal. This property allows <middle> to call `setsid()` and create a new
 * session, of which it will be the de facto leader. Note that `setsid()` FAILS if
 * called by a process group leader. Process group leaders are not allowed to disconnect
 * from their session, and so the fork to create <middle> is necessary.  This new
 * session will have no controlling terminal, because <middle>, with its simple code
 * path, does not open any terminal devices.
 *
 * The second fork, from <middle>, creates the <daemon> process, which will be member of
 * the <middle> process group and the newly created and unconnected <middle> session.
 * Because the <daemon> is not the originator of its session, it will can never be
 * controlled by a terminal, even if it opens a terminal device.
 *
 * Another side effect of this idiom is that the <daemon> has no parent, so it leaves no
 * zombie when it dies (it is reaped by the pid 1 init process). Only one fork is
 * required to achieve this property, however. The double fork is only necessary because
 * of the controlling terminal issue.
 *
 * Care is taken that the <launcher> process waits until <daemon> reports that it is
 * ready (serving), and that if <daemon> dies before signalling readiness, its exit code
 * is propagated through <middle> to become the exit code of the <launcher>.
 *
 * The idiom is explained in APUE (Stevens).
 ','line_number':136,'multiline':True]
['text':' Start in the <launcher> process.','line_number':233,'multiline':False]
['text':' In the <launcher> process','line_number':239,'multiline':False]
['text':' In the <middle> process','line_number':246,'multiline':False]
['text':' In the <middle> process','line_number':263,'multiline':False]
['text':' <middle> does not write pipe','line_number':264,'multiline':False]
['text':' pipe reached eof without the daemon signalling readiness.','line_number':273,'multiline':False]
['text':' Wait for <daemon> to exit, and exit with its exit code.','line_number':274,'multiline':False]
['text':' In the <daemon> process (i.e. the server)','line_number':282,'multiline':False]
['text':' <daemon> does not read pipe','line_number':283,'multiline':False]
['text':' !defined(_WIN32)','line_number':307,'multiline':False]
['text':' namespace','line_number':355,'multiline':False]
['text':' Hook up this global into our logging encoder','line_number':361,'multiline':False]
['text':' defined(_WIN32)','line_number':375,'multiline':False]
['text':' ignore ','line_number':403,'multiline':True]
['text':'*
 * atexit handler to terminate the process before static destructors run.
 *
 * Mongo server processes cannot safely call ::exit() or std::exit(), but
 * some third-party libraries may call one of those functions.  In that
 * case, to avoid static-destructor problems in the server, this exits the
 * process immediately with code ExitCode::fail.
 *
 * TODO: Remove once exit() executes safely in mongo server processes.
 ','line_number':416,'multiline':True]
['text':' Handling for `honorSystemUmask` and `processUmask` setParameters.','line_number':454,'multiline':False]
['text':' Non-Windows platforms only.','line_number':455,'multiline':False]
['text':'','line_number':456,'multiline':False]
['text':' If honorSystemUmask is true, processUmask may not be set','line_number':457,'multiline':False]
['text':' and the umask will be left exactly as set by the OS.','line_number':458,'multiline':False]
['text':'','line_number':459,'multiline':False]
['text':' If honorSystemUmask is false, then we will still honor the 'user'','line_number':460,'multiline':False]
['text':' portion of the current umask, but the group/other bits will be','line_number':461,'multiline':False]
['text':' set to 1, or whatever value is provided by processUmask if specified.','line_number':462,'multiline':False]
['text':' processUmask set parameter may only override group/other bits.','line_number':464,'multiline':False]
['text':' By default, honorSystemUmask==false masks all group/other bits.','line_number':467,'multiline':False]
['text':' We need to set our umask before opening any log files.','line_number':477,'multiline':False]
['text':' POSIX does not provide a mechanism for reading the current umask','line_number':481,'multiline':False]
['text':' without modifying it.','line_number':482,'multiline':False]
['text':' Do this conservatively by setting a short-lived umask of 0777','line_number':483,'multiline':False]
['text':' in order to pull out the user portion of the current umask.','line_number':484,'multiline':False]
['text':' namespace','line_number':488,'multiline':False]
['text':' --setParameter honorSystemUmask','line_number':491,'multiline':False]
['text':' false may be specified with processUmask','line_number':496,'multiline':False]
['text':' since it defines precisely how we're not honoring system umask.','line_number':497,'multiline':False]
['text':' --setParameter processUmask','line_number':527,'multiline':False]
['text':' Convert base from octal','line_number':536,'multiline':False]
['text':' namespace mongo::initialize_server_global_state','line_number':568,'multiline':False]
