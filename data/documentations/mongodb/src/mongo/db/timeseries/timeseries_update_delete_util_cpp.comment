['text':'*
 *    Copyright (C) 2021-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 * Expression used to filter out closed buckets for timeseries writes. The 'control.closed' field
 * may not exist or may be false. To be safe, filter on 'control.closed' != true.
 ','line_number':64,'multiline':True]
['text':'*
 * Returns whether the given metaField is the first element of the dotted path in the given
 * field.
 ','line_number':74,'multiline':True]
['text':'*
 * Returns a string where the substring leading up to "." in the given field is replaced with
 * "meta". If there is no "." in the given field, returns "meta".
 ','line_number':82,'multiline':True]
['text':'*
 * Recurses through the mutablebson element query and replaces any occurrences of the metaField with
 * "meta" accounting for queries that may be in dot notation. isTopLevelField is set for elements
 * which contain a top-level field name, and parentIsArray is set for elements with an array as a
 * parent.
 ','line_number':109,'multiline':True]
['text':' Replace any occurences of the metaField in the top-level required fields of the JSON Schema','line_number':129,'multiline':False]
['text':' object with "meta".','line_number':130,'multiline':False]
['text':' namespace','line_number':168,'multiline':False]
['text':' We can't translate an update without a meta field.','line_number':198,'multiline':False]
['text':' Make a mutable copy of the update document in order to replace all occurrences of the','line_number':207,'multiline':False]
['text':' metaField with "meta".','line_number':208,'multiline':False]
['text':' updateDoc = { <updateOperator> : { <field1>: <value1>, ... },','line_number':210,'multiline':False]
['text':'               <updateOperator> : { <field1>: <value1>, ... },','line_number':211,'multiline':False]
['text':'               ... }','line_number':212,'multiline':False]
['text':' updateDoc.root() = <updateOperator> : { <field1>: <value1>, ... },','line_number':214,'multiline':False]
['text':'                    <updateOperator> : { <field1>: <value1>, ... },','line_number':215,'multiline':False]
['text':'                    ...','line_number':216,'multiline':False]
['text':' updatePair = <updateOperator> : { <field1>: <value1>, ... }','line_number':219,'multiline':False]
['text':' Check each field that is being modified by the update operator and replace it if it is','line_number':220,'multiline':False]
['text':' the metaField.','line_number':221,'multiline':False]
['text':' If this is a $rename, we also need to translate the value.','line_number':233,'multiline':False]
['text':'*
 * Combines the given MatchExpressions into a single AndMatchExpression by $and-ing them. If there
 * is only one non-null expression, returns that expression. If there are no non-null expressions,
 * returns nullptr.
 *
 * Ts must be convertible to std::unique_ptr<MatchExpression>.
 ','line_number':259,'multiline':True]
['text':' namespace','line_number':277,'multiline':False]
['text':' In case the time-series collection does not have meta field defined, we broadcast','line_number':290,'multiline':False]
['text':' the request to all shards or use two phase protocol using empty predicate.','line_number':291,'multiline':False]
['text':' Translate the delete query into a query on the time-series collection's underlying','line_number':295,'multiline':False]
['text':' buckets collection.','line_number':296,'multiline':False]
['text':' If the meta field exists, split out the meta field predicate which can be potentially used','line_number':306,'multiline':False]
['text':' for bucket-level routing.','line_number':307,'multiline':False]
['text':' Split out the time field predicate which can be potentially used for bucket-level routing.','line_number':311,'multiline':False]
['text':'fields','line_number':314,'multiline':True]
['text':'renames','line_number':315,'multiline':True]
['text':' Translate the time field predicate into a predicate on the bucket-level time field.','line_number':320,'multiline':False]
['text':'haveComputedMetaField','line_number':330,'multiline':True]
['text':'includeMetaField','line_number':331,'multiline':True]
['text':'assumeNoMixedSchemaData','line_number':332,'multiline':True]
['text':'policy','line_number':333,'multiline':True]
['text':' fixedBuckets ','line_number':334,'multiline':True]
['text':' In case that the delete query does not contain any potential bucket-level routing predicate,','line_number':338,'multiline':False]
['text':' target the request to all shards using empty predicate.','line_number':339,'multiline':False]
['text':' Combine the meta field and time field predicates into a single predicate by $and-ing them','line_number':344,'multiline':False]
['text':' together.','line_number':345,'multiline':False]
['text':' Note: At least one of 'metaOnlyPred' or 'timeBucketPred' is not null. So, the result','line_number':346,'multiline':False]
['text':' expression is guaranteed to be not null.','line_number':347,'multiline':False]
['text':'haveComputedMetaField','line_number':361,'multiline':True]
['text':'assumeNoMixedSchemaData','line_number':363,'multiline':True]
['text':' Combine the closed bucket filter and the bucket metric filter and the meta-only filter into a','line_number':367,'multiline':False]
['text':' single filter by $and-ing them together.','line_number':368,'multiline':False]
['text':' namespace mongo::timeseries','line_number':373,'multiline':False]
