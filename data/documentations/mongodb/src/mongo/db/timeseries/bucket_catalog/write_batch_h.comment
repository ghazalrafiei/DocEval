['text':'*
 *    Copyright (C) 2023-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 * The basic unit of work for a bucket. Each insert will return a shared_ptr to a WriteBatch.
 * When a writer is finished with all their insertions, they should then take steps to ensure
 * each batch they wrote into is committed. To ensure a batch is committed, a writer should
 * first attempt to claimWriteBatchCommitRights(). If successful, the writer can proceed to commit
 * (or abort) the batch via BucketCatalog::prepareCommit and BucketCatalog::finish. If unsuccessful,
 * it means another writer is in the process of committing. The writer can proceed to do other
 * work (like commit another batch), and when they have no other work to do, they can wait for
 * this batch to be committed by executing the blocking operation getWriteBatchResult().
 ','line_number':61,'multiline':True]
['text':' Necessary so we can compress on writes, since the compression','line_number':85,'multiline':False]
['text':' algorithm sorts on the timeField. See compressBucket().','line_number':86,'multiline':False]
['text':' Number of measurements we can hold in a batch without needing to allocate memory.','line_number':88,'multiline':False]
['text':' Batch-local min; full if first batch, updates otherwise.','line_number':93,'multiline':False]
['text':' Batch-local max; full if first batch, updates otherwise.','line_number':94,'multiline':False]
['text':' Value is hash of string key','line_number':96,'multiline':False]
['text':' If set, bucket is compressed on-disk.','line_number':97,'multiline':False]
['text':' If true, bucket has been opened due to the inserted measurement having different','line_number':100,'multiline':False]
['text':' metadata than available buckets.','line_number':101,'multiline':False]
['text':'*
 * Returns whether the batch has already been committed or aborted.
 ','line_number':107,'multiline':True]
['text':'*
 * Attempts to claim the right to commit a batch. If it returns true, rights are
 * granted. If it returns false, rights are revoked, and the caller should get the result
 * of the batch with getResult(). Non-blocking.
 ','line_number':112,'multiline':True]
['text':'*
 * Retrieves the result of the write batch commit. Should be called by any interested party
 * that does not have commit rights. Blocking.
 ','line_number':119,'multiline':True]
['text':' namespace mongo::timeseries::bucket_catalog','line_number':125,'multiline':False]
