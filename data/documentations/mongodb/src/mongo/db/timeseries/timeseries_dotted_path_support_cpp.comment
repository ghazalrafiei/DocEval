['text':'*
 *    Copyright (C) 2021-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' do nothing: no match','line_number':119,'multiline':False]
['text':' Unbucketing happens here for nested measurement fields (i.e. data.a.b) in','line_number':188,'multiline':False]
['text':' compressed buckets. We know that 'e' corresponds to the top-level','line_number':189,'multiline':False]
['text':' measurement field (i.e. data.a) and we need to iterate over each of the','line_number':190,'multiline':False]
['text':' numerically-indexed entries (i.e. data.a.1, data.a.5, etc.) and do a','line_number':191,'multiline':False]
['text':' field lookup to extract the actual field we want (i.e. data.a.1.b).','line_number':192,'multiline':False]
['text':' Thanks to the bucket structure, we know there is no literal field with a','line_number':193,'multiline':False]
['text':' dot at this depth (e.g. '1.b'), so we can skip that field lookup, but','line_number':194,'multiline':False]
['text':' it's possible that the element e2 stores an object, array, or other type,','line_number':195,'multiline':False]
['text':' and we need to figure out how to resolve the rest of the path based on','line_number':196,'multiline':False]
['text':' the type.','line_number':197,'multiline':False]
['text':' Need to pass along the column since it owns the memory referenced by the','line_number':210,'multiline':False]
['text':' extracted elements.','line_number':211,'multiline':False]
['text':' Unbucketing happens here for top-level measurement fields (i.e. data.a) in','line_number':226,'multiline':False]
['text':' compressed buckets. We know that 'e' corresponds to the top-level','line_number':227,'multiline':False]
['text':' measurement field (i.e. data.a) and we need to iterate over each of the','line_number':228,'multiline':False]
['text':' numerically-indexed entries (i.e. data.a.1, data.a.5, etc.) to extract','line_number':229,'multiline':False]
['text':' the actual field we want.','line_number':230,'multiline':False]
['text':' Need to pass along the column since it owns the memory referenced by the','line_number':240,'multiline':False]
['text':' extracted elements.','line_number':241,'multiline':False]
['text':' Unbucketing happens here for uncompressed buckets. We know that 'obj' corresponds to','line_number':248,'multiline':False]
['text':' the top-level measurement field (i.e. data.a) and we need to iterate over each of the','line_number':249,'multiline':False]
['text':' numerically-indexed entries (i.e. data.a.1, data.a.5, etc.) to extract the actual','line_number':250,'multiline':False]
['text':' field we want. If we are after a top-level field, then we already have the element we','line_number':251,'multiline':False]
['text':' want in 'e'. If we are after a nested field, then we need to recurse.','line_number':252,'multiline':False]
['text':' The top-level measurement field (i.e. data.a) is the indexed field we are','line_number':256,'multiline':False]
['text':' trying to extract, so we can target it directly.','line_number':257,'multiline':False]
['text':' We'll need to inspect at least one more field, but we can take advantage of','line_number':261,'multiline':False]
['text':' the bucket structure here to skip checking for any field at this depth with a','line_number':262,'multiline':False]
['text':' dot in the name (e.g. '1.b') and instead just look at the next level down','line_number':263,'multiline':False]
['text':' (e.g. look within '1' for a field named 'b').','line_number':264,'multiline':False]
['text':' no match','line_number':294,'multiline':False]
['text':' Unbucketing happens here for nested measurement fields (i.e. data.a.b) in','line_number':335,'multiline':False]
['text':' compressed buckets. We know that 'e' corresponds to the top-level','line_number':336,'multiline':False]
['text':' measurement field (i.e. data.a) and we need to iterate over each of the','line_number':337,'multiline':False]
['text':' numerically-indexed entries (i.e. data.a.1, data.a.5, etc.) and do a','line_number':338,'multiline':False]
['text':' field lookup to find the actual field we want (i.e. data.a.1.b).','line_number':339,'multiline':False]
['text':' Thanks to the bucket structure, we know there is no literal field with a','line_number':340,'multiline':False]
['text':' dot at this depth (e.g. '1.b'), so we can skip that field lookup, but','line_number':341,'multiline':False]
['text':' it's possible that the element e2 stores an object, array, or other type,','line_number':342,'multiline':False]
['text':' and we need to figure out how to resolve the rest of the path based on','line_number':343,'multiline':False]
['text':' the type.','line_number':344,'multiline':False]
['text':' Unbucketing happens here for top-level measurement fields (i.e. data.a) in','line_number':362,'multiline':False]
['text':' compressed buckets. We know that 'e' corresponds to the top-level','line_number':363,'multiline':False]
['text':' measurement field (i.e. data.a) and we need to iterate over each of the','line_number':364,'multiline':False]
['text':' numerically-indexed entries (i.e. data.a.1, data.a.5, etc.) to decide whether','line_number':365,'multiline':False]
['text':' we have any arrays.','line_number':366,'multiline':False]
['text':' Unbucketing happens here for uncompressed buckets. We know that 'obj' corresponds to','line_number':379,'multiline':False]
['text':' the top-level measurement field (i.e. data.a) and we need to iterate over each of the','line_number':380,'multiline':False]
['text':' numerically-indexed entries (i.e. data.a.1, data.a.5, etc.) to extract the actual','line_number':381,'multiline':False]
['text':' field we want. If we are after a top-level field, then we already have the element we','line_number':382,'multiline':False]
['text':' want in 'e'. If we are after a nested field, then we need recurse.','line_number':383,'multiline':False]
['text':' The top-level measurement field (i.e. data.a) is the field we are trying to','line_number':388,'multiline':False]
['text':' check, so we can target it directly.','line_number':389,'multiline':False]
['text':' We'll need to inspect at least one more field, but we can take advantage of','line_number':394,'multiline':False]
['text':' the bucket structure here to skip checking for any field at this depth with a','line_number':395,'multiline':False]
['text':' dot in the name (e.g. '1.b') and instead just look at the next level down','line_number':396,'multiline':False]
['text':' (e.g. look within '1' for a field named 'b').','line_number':397,'multiline':False]
['text':' When we get here, we know that some prefix value on the control.min path was a non-object','line_number':446,'multiline':False]
['text':' type < Object. We can also assume that our parent was an Object.','line_number':447,'multiline':False]
['text':' Field is eoo(). Use parent type Object to draw conclusion conclusion.','line_number':472,'multiline':False]
['text':' Invariants to consider coming into this function.','line_number':477,'multiline':False]
['text':'  1. min an max are both known to be objects','line_number':478,'multiline':False]
['text':'  2. field is some (possibly whole) suffix of the indexed user field (e.g. if the user defines','line_number':479,'multiline':False]
['text':'     an index on "a.b.c", then field is "c", "b.c", or "a.b.c", but does not include the','line_number':480,'multiline':False]
['text':'     "control..." prefix for the index defined on the bucket collection).','line_number':481,'multiline':False]
['text':'  3. Every field in the prefix corresponding to field is an object. That is, if the user index','line_number':482,'multiline':False]
['text':'     is defined on "a.b.c" and we have "c", then "control", "control.min", "control.max",','line_number':483,'multiline':False]
['text':'     "control.min.a", "control.max.a", "control.min.a.b", and "control.max.a.b" are all','line_number':484,'multiline':False]
['text':'     objects.','line_number':485,'multiline':False]
['text':' Let's decide whether we are looking at the terminal field on the dotted path, or if we might','line_number':487,'multiline':False]
['text':' need to unpack sub-objects.','line_number':488,'multiline':False]
['text':' => !maxLit.eoo()','line_number':492,'multiline':True]
['text':' Nothing further to evaluate, the field is missing from min and max, and thus from all','line_number':495,'multiline':False]
['text':' measurements in this bucket.','line_number':496,'multiline':False]
['text':' Since we are undecided, at least one of minEl and maxEl must be of type object. We know','line_number':507,'multiline':False]
['text':' minEl.type() <= maxEl.type(), and we know that if minEl.type == Object and maxEl.type() >','line_number':508,'multiline':False]
['text':' Object, then we would have gotten a Yes decision above, so it must be the case that','line_number':509,'multiline':False]
['text':' minEl.type() <= Object and maxEl.type() == Object.','line_number':510,'multiline':False]
['text':' We preserve the invariants mentioned above for the recursive call, where both are objects.','line_number':515,'multiline':False]
['text':' namespace','line_number':519,'multiline':False]
['text':' Shortcut: if we aren't checking a `data.` path, then we don't care.','line_number':538,'multiline':False]
['text':' In general, we are searching for an array, or for a type mismatch somewhere along the path','line_number':567,'multiline':False]
['text':' in the summary fields, such that it can hide array values in the data field. For example if','line_number':568,'multiline':False]
['text':' we are interested in the user field 'a.b', we will examine the paths 'control.min.a.b' and','line_number':569,'multiline':False]
['text':' 'control.max.a.b'. If we are able to determine that along both paths, 'a' corresponds to an','line_number':570,'multiline':False]
['text':' object and 'a.b.' to a double, then we know that there can be no array data between them, as','line_number':571,'multiline':False]
['text':' an array compares greater than an object or a double, and would be reflected in the','line_number':572,'multiline':False]
['text':' 'control.max' field somewhere. Similarly, if we find that 'control.min.a' is a double and','line_number':573,'multiline':False]
['text':' 'control.max.a' is a bool, then there may be an array hidden between them. There are more','line_number':574,'multiline':False]
['text':' complex cases where one path yields a sub-object and the other contains a scalar type, but','line_number':575,'multiline':False]
['text':' the overall concept remains the same.','line_number':576,'multiline':False]
['text':' namespace dotted_path_support','line_number':598,'multiline':False]
['text':' namespace timeseries','line_number':599,'multiline':False]
['text':' namespace mongo','line_number':600,'multiline':False]
