['text':'*
 *    Copyright (C) 2022-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' We use a heuristic here to perform a check as quickly as possible and get the correct answer','line_number':88,'multiline':False]
['text':' with high probability. The rough idea is that if a user has dates outside the standard range','line_number':89,'multiline':False]
['text':' from 1970-2038, they most likely have some dates near either end of that range, i.e. between','line_number':90,'multiline':False]
['text':' 1902-1969 or 2039-2106. Given this assumption, we can assume that at least one document in','line_number':91,'multiline':False]
['text':' the collection should have the high bit of the timestamp portion of the OID set. If such a','line_number':92,'multiline':False]
['text':' document exists, then the maximum OID will have this bit set. So we can just check the last','line_number':93,'multiline':False]
['text':' document in the record store and test this high bit of it's _id.','line_number':94,'multiline':False]
['text':' forward ','line_number':97,'multiline':True]
['text':' The IndexIterator is initialized lazily, so the first call to 'next' positions it to the','line_number':120,'multiline':False]
['text':' first entry.','line_number':121,'multiline':False]
['text':' namespace mongo::timeseries','line_number':136,'multiline':False]
