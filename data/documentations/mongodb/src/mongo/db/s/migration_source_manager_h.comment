['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 * The donor-side migration state machine. This object must be created and owned by a single thread,
 * which controls its lifetime and should not be passed across threads. Unless explicitly indicated
 * its methods must not be called from more than one thread and must not be called while any locks
 * are held.
 *
 * The intended workflow is as follows:
 *  - Instantiate a MigrationSourceManager on the stack.
 *      This will perform preliminary checks and snapshot the latest collection
 *  - Call startClone to initiate background cloning of the chunk contents. This will perform the
 *      necessary registration of the cloner with the replication subsystem and will start listening
 *      for document changes, while at the same time responding to data fetch requests from the
 *      recipient.
 *  - Call awaitUntilCriticalSectionIsAppropriate to wait for the cloning process to catch up
 *      sufficiently so we don't keep the server in read-only state for too long.
 *  - Call enterCriticalSection to cause the shard to enter in 'read only' mode while the latest
 *      changes are drained by the recipient shard.
 *  - Call commitDonateChunk to commit the chunk move in the config server's metadata and leave the
 *      read only (critical section) mode.
 *
 * At any point in time it is safe to let the MigrationSourceManager object go out of scope in which
 * case the desctructor will take care of clean up based on how far we have advanced. One exception
 * is the commitDonateChunk and its comments explain the reasoning.
 ','line_number':62,'multiline':True]
['text':'*
     * Retrieves the MigrationSourceManager pointer that corresponds to the given collection under
     * a CollectionShardingRuntime that has its ResourceMutex locked.
     ','line_number':91,'multiline':True]
['text':'*
     * If the currently installed migration has reached the cloning stage (i.e., after startClone),
     * returns the cloner currently in use.
     ','line_number':97,'multiline':True]
['text':'*
     * Instantiates a new migration source manager with the specified migration parameters.
     *
     * Loads the most up-to-date collection metadata and uses it as a starting point.
     *
     * May throw any exception. Known exceptions are:
     *  - InvalidOptions if the operation context is missing shard version
     *  - StaleConfig if the expected placement version does not match the one known by this shard.
     ','line_number':104,'multiline':True]
['text':'*
     * Contacts the donor shard and tells it to start cloning the specified chunk. This method will
     * fail if for any reason the donor shard fails to initiate the cloning sequence.
     *
     * Expected state: kCreated
     * Resulting state: kCloning on success, kDone on failure
     ','line_number':120,'multiline':True]
['text':'*
     * Waits for the cloning to catch up sufficiently so we won't have to stay in the critical
     * section for a long period of time. This method will fail if any error occurs while the
     * recipient is catching up.
     *
     * Expected state: kCloning
     * Resulting state: kCloneCaughtUp on success, kDone on failure
     ','line_number':129,'multiline':True]
['text':'*
     * Waits for the active clone operation to catch up and enters critical section. Once this call
     * returns successfully, no writes will be happening on this shard until the chunk donation is
     * committed. Therefore, commitChunkOnRecipient/commitChunkMetadata must be called as soon as
     * possible afterwards.
     *
     * Expected state: kCloneCaughtUp
     * Resulting state: kCriticalSection on success, kDone on failure
     ','line_number':139,'multiline':True]
['text':'*
     * Tells the recipient of the chunk to commit the chunk contents, which it received.
     *
     * Expected state: kCriticalSection
     * Resulting state: kCloneCompleted on success, kDone on failure
     ','line_number':150,'multiline':True]
['text':'*
     * Tells the recipient shard to fetch the latest portion of data from the donor and to commit it
     * locally. After that it persists the changed metadata to the config servers and leaves the
     * critical section.
     *
     * NOTE: Since we cannot recover from failures to write chunk metadata to the config servers, if
     *       applying the committed chunk information fails and we cannot definitely verify that the
     *       write was definitely applied or not, this call may crash the server.
     *
     * Expected state: kCloneCompleted
     * Resulting state: kDone
     ','line_number':158,'multiline':True]
['text':'*
     * Aborts the migration after observing a concurrent index operation by marking its operation
     * context as killed.
     ','line_number':172,'multiline':True]
['text':'*
     * Returns a report on the active migration.
     *
     * Must be called with some form of lock on the collection namespace.
     ','line_number':178,'multiline':True]
['text':' Used to track the current state of the source manager. See the methods above, which have','line_number':203,'multiline':False]
['text':' comments explaining the various state transitions.','line_number':204,'multiline':False]
['text':'*
     * Called when any of the states fails. May only be called once and will put the migration
     * manager into the kDone state.
     ','line_number':217,'multiline':True]
['text':'*
     * May be called at any time. Unregisters the migration source manager from the collection,
     * restores the committed metadata (if in critical section) and logs error in the change log to
     * indicate that the migration has failed.
     *
     * Expected state: Any
     * Resulting state: kDone
     ','line_number':223,'multiline':True]
['text':' This is the opCtx of the moveChunk request that constructed the MigrationSourceManager.','line_number':233,'multiline':False]
['text':' The caller must guarantee it outlives the MigrationSourceManager.','line_number':234,'multiline':False]
['text':' The parameters to the moveRange command','line_number':237,'multiline':False]
['text':' The write concern received for the moveRange command','line_number':240,'multiline':False]
['text':' The resolved connection string of the donor shard','line_number':243,'multiline':False]
['text':' The resolved primary of the recipient shard','line_number':246,'multiline':False]
['text':' Stores a reference to the process sharding statistics object which needs to be updated','line_number':249,'multiline':False]
['text':' Information about the moveChunk to be used in the critical section.','line_number':252,'multiline':False]
['text':' Times the entire moveChunk operation','line_number':255,'multiline':False]
['text':' Utility for constructing detailed logs for the steps of the chunk migration','line_number':258,'multiline':False]
['text':' Promise which will be signaled when the migration source manager has finished running and is','line_number':261,'multiline':False]
['text':' ready to be destroyed','line_number':262,'multiline':False]
['text':' Starts counting from creation time and is used to time various parts from the lifetime of the','line_number':265,'multiline':False]
['text':' move chunk sequence','line_number':266,'multiline':False]
['text':' The current state. Used only for diagnostics and validation.','line_number':269,'multiline':False]
['text':' Responsible for registering and unregistering the MigrationSourceManager from the collection','line_number':272,'multiline':False]
['text':' sharding runtime for the collection','line_number':273,'multiline':False]
['text':' The epoch of the collection being migrated and its UUID, as of the time the migration','line_number':284,'multiline':False]
['text':' started. Values are boost::optional only up until the constructor runs, because UUID doesn't','line_number':285,'multiline':False]
['text':' have a default constructor.','line_number':286,'multiline':False]
['text':' TODO SERVER-80188: remove _collectionEpoch once 8.0 becomes last-lts.','line_number':287,'multiline':False]
['text':' The version of the chunk at the time the migration started.','line_number':292,'multiline':False]
['text':' The chunk cloner source. Only available if there is an active migration going on. To set and','line_number':295,'multiline':False]
['text':' remove it, a collection lock and the CSRLock need to be acquired first in order to block all','line_number':296,'multiline':False]
['text':' logOp calls and then the mutex. To access it, only the mutex is necessary. Available after','line_number':297,'multiline':False]
['text':' cloning stage has completed.','line_number':298,'multiline':False]
['text':' Contains logic for ensuring the donor's and recipient's config.rangeDeletions entries are','line_number':301,'multiline':False]
['text':' correctly updated based on whether the migration committed or aborted.','line_number':302,'multiline':False]
['text':' Holds the in-memory critical section for the collection. Only set when migration has reached','line_number':305,'multiline':False]
['text':' the critical section phase.','line_number':306,'multiline':False]
['text':' The statistics about a chunk migration to be included in moveChunk.commit','line_number':309,'multiline':False]
['text':' Optional future that is populated if the migration succeeds and range deletion is scheduled','line_number':312,'multiline':False]
['text':' on this node. The future is set when the range deletion completes. Used if the moveChunk was','line_number':313,'multiline':False]
['text':' sent with waitForDelete.','line_number':314,'multiline':False]
['text':' namespace mongo','line_number':318,'multiline':False]
