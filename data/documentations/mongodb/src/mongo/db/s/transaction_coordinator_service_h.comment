['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
     * Retrieves the TransactionCoordinatorService associated with the service or operation context.
     ','line_number':64,'multiline':True]
['text':'*
     * Creates a new TransactionCoordinator for the given session id and transaction number, with a
     * deadline for the commit decision. If the coordinator has not decided to commit by that
     * deadline, it will abort.
     ','line_number':70,'multiline':True]
['text':'*
     * Outputs a vector of BSON documents to the ops out-param containing information about active
     * and idle coordinators in the system.
     ','line_number':80,'multiline':True]
['text':'*
     * If a coordinator for the (lsid, txnNumber, txnRetryCounter) exists, delivers the participant
     * list to the coordinator, which will cause the coordinator to start coordinating the commit if
     * the coordinator had not yet received a list, and returns a Future that will contain the
     * decision when the transaction finishes committing or aborting.
     *
     * If no coordinator for the (lsid, txnNumber, txnRetryCounter) exists, returns boost::none.
     ','line_number':86,'multiline':True]
['text':'*
     * If a coordinator for the (lsid, txnNumber, txnRetryCounter) exists, returns a Future that
     * will contain the decision when the transaction finishes committing or aborting.
     *
     * If no coordinator for the (lsid, txnNumber, txnRetryCounter) exists, returns boost::none.
     ','line_number':100,'multiline':True]
['text':'*
     * Marks the coordinator catalog as stepping up, which blocks all incoming requests for
     * coordinators, and launches an async task to:
     * 1. Wait for the coordinators in the catalog to complete (successfully or with an error) and
     *    be removed from the catalog.
     * 2. Read all pending commit tasks from the config.transactionCoordinators collection.
     * 3. Create TransactionCoordinator objects in memory for each pending commit and launch an
     *    async task to continue coordinating its commit.
     *
     * The 'recoveryDelay' argument is only used for testing in order to simulate recovery taking
     * long time.
     ','line_number':111,'multiline':True]
['text':'*
     * Shuts down this service. This will no longer be usable once shutdown is called.
     ','line_number':126,'multiline':True]
['text':'*
     * Called when an already established replica set is added as a shard to a cluster. Ensures that
     * the TransactionCoordinator service is started up if the replica set is currently primary.
     ','line_number':131,'multiline':True]
['text':'*
     * Cancel commit on the coordinator for the given transaction only if it has not started yet.
     ','line_number':137,'multiline':True]
['text':'*
     * Blocking call which waits for the previous stepUp/stepDown round to join and ensures all
     * tasks scheduled by that round have completed.
     ','line_number':144,'multiline':True]
['text':'*
     * Returns the current catalog + scheduler if stepUp has started, otherwise throws a
     * NotWritablePrimary exception.
     ','line_number':163,'multiline':True]
['text':' Contains the catalog + scheduler, which was active at the last step-down attempt (if any).','line_number':169,'multiline':False]
['text':' Set at onStepDown and destroyed at onStepUp, which are always invoked sequentially by the','line_number':170,'multiline':False]
['text':' replication machinery, so there is no need to explicitly synchronize it','line_number':171,'multiline':False]
['text':' Protects the state below','line_number':174,'multiline':False]
['text':' The catalog + scheduler instantiated at the last step-up attempt. When nullptr, it means','line_number':177,'multiline':False]
['text':' onStepUp has not been called yet after the last stepDown (or construction).','line_number':178,'multiline':False]
['text':' Sets to false once shutdown was called at least once.','line_number':181,'multiline':False]
['text':' Used to cancel WaitForMajority for TransactionCoordinator when this service steps down.','line_number':184,'multiline':False]
['text':' namespace mongo','line_number':188,'multiline':False]
