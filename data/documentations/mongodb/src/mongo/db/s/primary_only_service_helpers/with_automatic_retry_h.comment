['text':'*
 *    Copyright (C) 2023-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' Always attempt to retry on any type of retryable error. Also retry on errors','line_number':41,'multiline':False]
['text':' from stray killCursors and killOp commands being run. Cancellation and','line_number':42,'multiline':False]
['text':' NotPrimary errors may indicate the primary-only service Instance will be shut','line_number':43,'multiline':False]
['text':' down or is shutting down now. However, it is also possible that the error','line_number':44,'multiline':False]
['text':' originated from a remote response rather than being an error generated by','line_number':45,'multiline':False]
['text':' this shard itself. Defer whether or not to retry to the state of the','line_number':46,'multiline':False]
['text':' cancellation token. This means the body of the AsyncTry may continue to run','line_number':47,'multiline':False]
['text':' and error more times until the cancellation token is actually canceled if','line_number':48,'multiline':False]
['text':' this shard was in the midst of stepping down.','line_number':49,'multiline':False]
['text':'*
 * A fluent-style API for executing asynchronous, future-returning try-until loops, specialized
 * around typical retry logic for components within primary-only services.
 *
 * Example usage:
 *
 *      ExecutorFuture<void> future =
 *          primary_only_service_helpers::WithAutomaticRetry(
 *              [this, chainCtx] { chainCtx->moreToCome = doOneBatch(); })
 *              .onTransientError([](const Status& status) {
 *                  LOGV2(123,
 *                        "Transient error while doing batch",
 *                        "error"_attr = redact(status));
 *              })
 *              .onUnrecoverableError([](const Status& status) {
 *                  LOGV2_ERROR(456,
 *                              "Operation-fatal error while doing batch",
 *                              "error"_attr = redact(status));
 *              })
 *              .until([chainCtx](const Status& status) {
 *                  return status.isOK() && !chainCtx->moreToCome;
 *              })
 *              .on(std::move(executor), std::move(cancelToken));
 ','line_number':62,'multiline':True]
['text':' namespace primary_only_service_helpers','line_number':147,'multiline':False]
['text':' namespace mongo','line_number':148,'multiline':False]
