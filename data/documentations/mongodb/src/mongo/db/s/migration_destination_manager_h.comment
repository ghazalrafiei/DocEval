['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 * Drives the receiving side of the MongoD migration process. One instance exists per shard.
 ','line_number':95,'multiline':True]
['text':'*
     * Returns the singleton instance of the migration destination manager.
     ','line_number':120,'multiline':True]
['text':'*
     * Checks whether the MigrationDestinationManager is currently handling a migration.
     ','line_number':128,'multiline':True]
['text':'*
     * Reports the state of the migration manager as a BSON document.
     ','line_number':133,'multiline':True]
['text':'*
     * Returns a report on the active migration, if the migration is active. Otherwise return an
     * empty BSONObj.
     ','line_number':138,'multiline':True]
['text':'*
     * Returns OK if migration started successfully.
     ','line_number':145,'multiline':True]
['text':'*
     * Restores the MigrationDestinationManager state for a migration recovered on step-up.
     ','line_number':154,'multiline':True]
['text':'*
     * Clones documents from a donor shard.
     ','line_number':161,'multiline':True]
['text':'*
     * Idempotent method, which causes the current ongoing migration to abort only if it has the
     * specified session id. If the migration is already aborted, does nothing.
     ','line_number':169,'multiline':True]
['text':'*
     * Same as 'abort' above, but unconditionally aborts the current migration without checking the
     * session id. Only used for backwards compatibility.
     ','line_number':175,'multiline':True]
['text':'
     * Refreshes the filtering metadata and releases the migration recipient critical section for
     * the specified migration session. If no session is ongoing or the session doesn't match the
     * current one, it does nothing and returns OK.
     ','line_number':183,'multiline':True]
['text':'*
     * Gets the collection indexes from fromShardId. If given a chunk manager, will fetch the
     * indexes using the shard version protocol.
     ','line_number':190,'multiline':True]
['text':'*
     * Gets the collection uuid and options from fromShardId. If given a chunk manager, will fetch
     * the collection options using the database version protocol.
     ','line_number':209,'multiline':True]
['text':'*
     * Creates the collection on the shard and clones the indexes and options.
     ','line_number':224,'multiline':True]
['text':'*
     * These log the argument msg; then, under lock, move msg to _errmsg and set the state to FAIL.
     * The setStateWailWarn version logs with "warning() << msg".
     ','line_number':233,'multiline':True]
['text':'*
     * Thread which drives the migration apply process on the recipient side.
     ','line_number':242,'multiline':True]
['text':'*
     * If this shard doesn't own any chunks for the collection to be cloned and the collection
     * exists locally, drops its indexes to guarantee that no stale indexes carry over.
     ','line_number':253,'multiline':True]
['text':'*
     * Remembers a chunk range between 'min' and 'max' as a range which will have data migrated
     * into it, to protect it against separate commands to clean up orphaned data. First, though,
     * it schedules deletion of any documents in the range, so that process must be seen to be
     * complete before migrating any new documents in.
     ','line_number':262,'multiline':True]
['text':'*
     * Stops tracking a chunk range between 'min' and 'max' that previously was having data
     * migrated into it, and schedules deletion of any such documents already migrated in.
     ','line_number':270,'multiline':True]
['text':'*
     * Checks whether the MigrationDestinationManager is currently handling a migration by checking
     * that the migration "_sessionId" is initialized.
     ','line_number':276,'multiline':True]
['text':'*
     * Waits for _state to transition to EXIT_CRIT_SEC. Then, it performs a filtering metadata
     * refresh, releases the critical section and finally deletes the recovery document.
     ','line_number':282,'multiline':True]
['text':'*
     * ReplicaSetAwareService entry points.
     ','line_number':289,'multiline':True]
['text':' The number of session oplog entries recieved from the source shard. Not all oplog','line_number':305,'multiline':False]
['text':' entries recieved from the source shard may be committed','line_number':306,'multiline':False]
['text':' Mutex to guard all fields below','line_number':309,'multiline':False]
['text':' Migration session ID uniquely identifies the migration and indicates whether the prepare','line_number':312,'multiline':False]
['text':' method has been called.','line_number':313,'multiline':False]
['text':' A condition variable on which to wait for the prepare method to be called.','line_number':317,'multiline':False]
['text':' State that is shared among all inserter threads.','line_number':333,'multiline':False]
['text':' Set to true once we have accepted the chunk as pending into our metadata. Used so that on','line_number':351,'multiline':False]
['text':' failure we can perform the appropriate cleanup.','line_number':352,'multiline':False]
['text':' Condition variable, which is signalled every time the state of the migration changes.','line_number':363,'multiline':False]
['text':' Promise that will be fulfilled when the donor has signaled us that we can release the','line_number':366,'multiline':False]
['text':' critical section.','line_number':367,'multiline':False]
['text':' Promise that will be fulfilled when the migrateThread has finished its work.','line_number':370,'multiline':False]
['text':' Cancellation source that is cancelled on stepdowns. On stepup, a new cancellation source will','line_number':373,'multiline':False]
['text':' be installed.','line_number':374,'multiline':False]
['text':' namespace mongo','line_number':378,'multiline':False]
