['text':'*
 *    Copyright (C) 2020-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' TODO (SERVER-74481): Define these functions in the nested `sharding_ddl_util` namespace when the','line_number':80,'multiline':False]
['text':' IDL compiler will support the use case.','line_number':81,'multiline':False]
['text':'*
 * Creates a barrier after which we are guaranteed that all writes to the config server performed by
 * the previous primary have been majority commited and will be seen by the new primary.
 ','line_number':89,'multiline':True]
['text':'*
 * Generic utility to send a command to a list of shards. Throws if one of the commands fails.
 ','line_number':95,'multiline':True]
['text':' AsyncRPC ignores impersonation metadata so we need to manually attach them to','line_number':108,'multiline':False]
['text':' the command','line_number':109,'multiline':False]
['text':'*
 * Erase tags metadata from config server for the given namespace, using the _configsvrRemoveTags
 * command as a retryable write to ensure idempotency.
 ','line_number':171,'multiline':True]
['text':'*
 * Erase collection metadata from config server and invalidate the locally cached one.
 * In particular remove the collection and chunks metadata associated with the given namespace.
 ','line_number':179,'multiline':True]
['text':'*
 * Delete the query analyzer documents that match the given filter.
 ','line_number':193,'multiline':True]
['text':'*
 * Ensure source collection uuid is consistent on every shard
 * Ensure target collection is not present on any shard when `dropTarget` is false
 ','line_number':198,'multiline':True]
['text':'*
 * Ensures rename preconditions for collections are met:
 * - Check that the namespace of the destination collection is not too long
 * - Check that `dropTarget` is true if the destination collection exists
 * - Check that no tags exist for the destination collection
 ','line_number':209,'multiline':True]
['text':'*
 * Throws if the DB primary shards of the provided namespaces differs.
 *
 * Optimistically assume that no movePrimary is performed during the check: it's currently not
 * possible to ensure primary shard stability for both databases.
 ','line_number':222,'multiline':True]
['text':'*
 * Throws an exception if the collection is already tracked with different options.
 *
 * If the collection is already tracked with the same options, returns the existing collection's
 * full spec, else returns boost::none.
 *
 * If the collection is tracked as unsplittable and the request is for a splittable collection,
 * returns boost::none.
 ','line_number':232,'multiline':True]
['text':'*
 * Stops ongoing migrations and prevents future ones to start for the given nss.
 * If expectedCollectionUUID is set and doesn't match that of that collection, then this is a no-op.
 * If expectedCollectionUUID is not set, no UUID check will be performed before stopping migrations.
 ','line_number':249,'multiline':True]
['text':'*
 * Resume migrations and balancing rounds for the given nss.
 * If expectedCollectionUUID is set and doesn't match that of the collection, then this is a no-op.
 * If expectedCollectionUUID is not set, no UUID check will be performed before resuming migrations.
 ','line_number':259,'multiline':True]
['text':'*
 * Calls to the config server primary to get the collection document for the given nss.
 * Returns the value of the allowMigrations flag on the collection document.
 ','line_number':269,'multiline':True]
['text':'
 * Returns the UUID of the collection (if exists) using the catalog. It does not provide any locking
 * guarantees after the call.
 *','line_number':275,'multiline':True]
['text':'
 * Performs a noop retryable write on the given shards using the session and txNumber specified in
 * 'osi'
 ','line_number':283,'multiline':True]
['text':'
 * Performs a noop write locally with majority write concern.
 ','line_number':293,'multiline':True]
['text':'*
 * Sends the _shardsvrDropCollectionParticipant command to the specified shards.
 ','line_number':298,'multiline':True]
['text':'*
 * Runs the given transaction chain on the catalog. Transaction will be remote if called by a shard.
 * Important: StmtsIds must be set in the transactionChain if the OperationSessionId is not empty
 * since we are spawning a transaction on behalf of a retryable operation.
 ','line_number':311,'multiline':True]
['text':'*
 * Returns the default key pattern value for unsplittable collections.
 ','line_number':324,'multiline':True]
['text':'
 * The returned operations to execute on the sharding catalog are the following:
 * 1. Delete any existing chunk entries (there can be 0 or 1 depending on whether we are
 * creating a new collection or sharding a pre-existing unsplittable collection).
 * 2. Insert new chunk entries.
 * 3. Upsert the collection entry (update in case of pre-existing unspittable collection or insert
 * if the collection did not exist).
 * 4. Insert the placement information.
 ','line_number':332,'multiline':True]
['text':' namespace sharding_ddl_util','line_number':347,'multiline':False]
['text':' namespace mongo','line_number':348,'multiline':False]
