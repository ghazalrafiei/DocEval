['text':'*
 *    Copyright (C) 2023-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
         * The following pipeline is used to check for inconsistencies in the indexes of all the
         * collections across all shards in the cluster. In particular, it checks that:
         *      1. All shards have the same set of indexes.
         *      2. All shards have the same properties for each index.
         *
         * The pipeline is structured as follows:
         *      1. Use the $indexStats stage to gather statistics about each index in all shards.
         *      2. Group all the indexes together and collect them into an array. Also, collect the
         *      names of all the shards in the cluster.
         *      3. Create a new document for each index in the array created by the previous stage.
         *      4. Group all the indexes by name.
         *      5. For each index, create two new fields:
         *          - `missingFromShards`: array of differences between all shards that are expected
         *          to have the index and the shards that actually contain the index.
         *          - `inconsistentProperties`: array of differences between the properties of each
         *          index across all shards.
         *      6. Filter out indexes that are consistent across all shards.
         *      7. Project the final result.
         ','line_number':106,'multiline':True]
['text':' Check out the cursor. If the cursor is not found, all data was retrieve in the','line_number':215,'multiline':False]
['text':' first batch.','line_number':216,'multiline':False]
['text':' Internal command (server to server).','line_number':253,'multiline':False]
['text':' Get the list of collections from configsvr sorted by namespace','line_number':278,'multiline':False]
['text':' If this is the primary shard of the db coordinate index check across shards','line_number':285,'multiline':False]
['text':'sort','line_number':334,'multiline':True]
['text':' If we don't find the nss, it means that the collection is not sharded.','line_number':342,'multiline':False]
['text':' Lock db in mode IS while taking the collection catalog snapshot to','line_number':363,'multiline':False]
['text':' ensure that we serialize with non-atomic collection and index','line_number':364,'multiline':False]
['text':' creation performed by the MigrationDestinationManager. Without this','line_number':365,'multiline':False]
['text':' lock we could potentially acquire a snapshot in which a collection','line_number':366,'multiline':False]
['text':' have been already created by the MigrationDestinationManager but the','line_number':367,'multiline':False]
['text':' relative shardkey index is still missing.','line_number':368,'multiline':False]
['text':' Lock collection in mode IS while taking the collection catalog','line_number':389,'multiline':False]
['text':' snapshot to ensure that we serialize with non-atomic collection and','line_number':390,'multiline':False]
['text':' index creation performed by the MigrationDestinationManager. Without','line_number':391,'multiline':False]
['text':' this lock we could potentially acquire a snapshot in which a','line_number':392,'multiline':False]
['text':' collection have been already created by the','line_number':393,'multiline':False]
['text':' MigrationDestinationManager but the relative shardkey index is still','line_number':394,'multiline':False]
['text':' missing.','line_number':395,'multiline':False]
['text':' Check consistency between local metadata and configsvr metadata','line_number':417,'multiline':False]
['text':' namespace','line_number':446,'multiline':False]
['text':' namespace mongo','line_number':447,'multiline':False]
