['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 * This class groups all the asynchronous work scheduled by a given TransactionCoordinatorDriver.
 ','line_number':71,'multiline':True]
['text':'*
     * @brief Returns a shared pointer to the executor
     ','line_number':79,'multiline':True]
['text':'*
     * Schedules the specified callable to execute asynchronously and returns a future which will be
     * set with its result.
     ','line_number':86,'multiline':True]
['text':' TODO(SERVER-74658): Please revisit if this thread could be made killable.','line_number':126,'multiline':False]
['text':' There is no need to call _notifyAllTasksComplete here, because we','line_number':141,'multiline':False]
['text':' will still have an outstanding _activeHandles entry, so the scheduler','line_number':142,'multiline':False]
['text':' is never completed at this point','line_number':143,'multiline':False]
['text':'*
     * Sends a command asynchronously to the given shard and returns a Future when that request
     * completes (with error or not).
     ','line_number':167,'multiline':True]
['text':'*
     * Allows sub-tasks on this scheduler to be grouped together and works-around the fact that
     * futures are not cancellable.
     *
     * Shutting down the returned child scheduler has no effect on the parent. Shutting down the
     * parent scheduler also shuts down all child schedulers and prevents new ones from starting.
     ','line_number':177,'multiline':True]
['text':'*
     * Non-blocking method, which interrupts all currently active scheduled commands or tasks and
     * prevents any new ones from starting.
     * After this method is called, all returned futures, which haven't yet been signalled will be
     * set to the specified status. Attempting to schedule any new operations will return ready
     * futures set to the specified status.
     *
     * Must not be called with Status::OK.
     ','line_number':186,'multiline':True]
['text':'*
     * Blocking call, which will wait until any scheduled commands/tasks and child schedulers have
     * drained.
     *
     * It is allowed to be called without calling shutdown, but in that case it the caller's
     * responsibility to ensure that no new work gets scheduled.
     ','line_number':197,'multiline':True]
['text':' A targeted host and the shard object used to target it. The shard object is passed through','line_number':209,'multiline':False]
['text':' resolved so the caller can avoid a potentially blocking "ShardRegistry::getShard" call.','line_number':210,'multiline':False]
['text':'*
     * Finds the host and port for a shard id, returning it and the shard object used for targeting.
     ','line_number':216,'multiline':True]
['text':'*
     * Returns true when all the registered child schedulers, op contexts and handles have joined.
     ','line_number':224,'multiline':True]
['text':'*
     * Invoked every time a registered op context, handle or child scheduler is getting
     * unregistered. Used to notify the 'all lists empty' condition variable when there is no more
     * activity on a scheduler which has been shut down.
     ','line_number':229,'multiline':True]
['text':' Service context under which this executor runs','line_number':236,'multiline':False]
['text':' Executor for performing async tasks.','line_number':239,'multiline':False]
['text':' If this work scheduler was constructed through 'makeChildScheduler', points to the parent','line_number':242,'multiline':False]
['text':' scheduler and contains the iterator from the parent, which needs to be removed on destruction','line_number':243,'multiline':False]
['text':' Mutex to protect the shared state below','line_number':247,'multiline':False]
['text':' If shutdown() is called, this contains the first status that was passed to it and is an','line_number':250,'multiline':False]
['text':' indication that no more operations can be scheduled','line_number':251,'multiline':False]
['text':' Any active scheduled work will have its operation context stored here','line_number':254,'multiline':False]
['text':' Any active scheduled work or network operation will have its TaskExecutor handle stored here','line_number':257,'multiline':False]
['text':' Any outstanding child schedulers created though 'makeChildScheduler'','line_number':260,'multiline':False]
['text':' Notified when the the scheduler is shut down and the last active handle, operation context or','line_number':263,'multiline':False]
['text':' child scheduler has been unregistered.','line_number':264,'multiline':False]
['text':'*
 * Helper function that allows you to asynchronously aggregate the results of a vector of Futures.
 * It's essentially an async foldLeft.
 *
 * The combiner function specifies how to take an incoming result (the second parameter) and combine
 * it to create the final ('global') result (the first parameter). The inital value for the 'global
 * result' is specified by initValue.
 *
 * Example from the unit tests:
 *
 *  TEST_F(TransactionCoordinatorTest, CollectReturnsCombinedResultWithSeveralInputFutures) {
 *      std::vector<Future<int>> futures;
 *      std::vector<Promise<int>> promises;
 *      std::vector<int> futureValues;
 *      for (int i = 0; i < 5; ++i) {
 *          auto pf = makePromiseFuture<int>();
 *          futures.push_back(std::move(pf.future));
 *          promises.push_back(std::move(pf.promise));
 *          futureValues.push_back(i);
 *      }
 *
 *      // Sum all of the inputs.
 *      auto resultFuture = collect<int, int>(futures, 0, [](int& result, const int& next) {
 *          result += next;
 *          return true;
 *      });
 *
 *      for (size_t i = 0; i < promises.size(); ++i) {
 *          promises[i].emplaceValue(futureValues[i]);
 *      }
 *
 *      // Result should be the sum of all the values emplaced into the promises.
 *      ASSERT_EQ(resultFuture.get(), std::accumulate(futureValues.begin(), futureValues.end(), 0));
 * }
 *
 ','line_number':272,'multiline':True]
['text':'*
     * Shared state for the continuations of the individual futures in the array.
     ','line_number':316,'multiline':True]
['text':'****************************************************
         * The first few fields have fixed values.           *
         *****************************************************','line_number':328,'multiline':True]
['text':' Protects all state in the SharedBlock.','line_number':331,'multiline':False]
['text':' If any response returns an error prior to a response setting shouldStopIteration to','line_number':334,'multiline':False]
['text':' ShouldStopIteration::kYes, the promise will be set with that error rather than the global','line_number':335,'multiline':False]
['text':' result.','line_number':336,'multiline':False]
['text':' If the combiner returns kYes after processing any response, the combiner will not be','line_number':339,'multiline':False]
['text':' applied to any further responses.','line_number':340,'multiline':False]
['text':'****************************************************
         * The below have initial values based on user input.*
         *****************************************************','line_number':343,'multiline':True]
['text':' The number of input futures that have not yet been resolved and processed.','line_number':346,'multiline':False]
['text':' The variable where the intermediate results and final result is stored.','line_number':348,'multiline':False]
['text':' The promise to be fulfilled when the result is ready.','line_number':350,'multiline':False]
['text':' The input combiner function.','line_number':352,'multiline':False]
['text':' Create the promise and future used to fulfill the result.','line_number':356,'multiline':False]
['text':' Create the shared context used by all continuations','line_number':359,'multiline':False]
['text':' For every input future, add a continuation that will asynchronously update the','line_number':365,'multiline':False]
['text':' SharedBlock upon completion of the input future.','line_number':366,'multiline':False]
['text':' Unlock before emplacing the result in case any continuations do expensive','line_number':388,'multiline':False]
['text':' work.','line_number':389,'multiline':False]
['text':'*
 * Returns a future that will be resolved when all of the input futures have resolved, or rejected
 * when any of the futures is rejected.
 ','line_number':403,'multiline':True]
['text':'*
 * Executes a function returning a Future until the function does not return an error status or
 * until one of the provided error codes is returned.
 ','line_number':409,'multiline':True]
['text':' Retry after a delay.','line_number':428,'multiline':False]
['text':' namespace txn','line_number':441,'multiline':False]
['text':' namespace mongo','line_number':442,'multiline':False]
