['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' excludeDraining ','line_number':95,'multiline':True]
['text':'*
 * Creates a chunk based on the given arguments, appends it to 'chunks' and increments the given
 * chunk version
 ','line_number':118,'multiline':True]
['text':'*
 * Return the shard with least amount of chunks while respecting the zone settings.
 ','line_number':135,'multiline':True]
['text':' If limitedShardIds is provided, only pick shard in that set.','line_number':160,'multiline':False]
['text':'
 * Returns a map mapping each tag name to a vector of shard ids with that tag name
 ','line_number':174,'multiline':True]
['text':' Get all docs in config.shards through a query instead of going through the shard registry','line_number':186,'multiline':False]
['text':' because we need the zones as well. Filter out the shards not contained at availableShardIds,','line_number':187,'multiline':False]
['text':' if set.','line_number':188,'multiline':False]
['text':'*
 * Returns a set of split points to ensure that chunk boundaries will align with the zone
 * ranges.
 ','line_number':233,'multiline':True]
['text':'
 * Returns a map mapping shard id to a set of zone tags.
 ','line_number':257,'multiline':True]
['text':' Get all docs in config.shards through a query instead of going through the shard registry','line_number':267,'multiline':False]
['text':' because we need the zones as well','line_number':268,'multiline':False]
['text':' namespace','line_number':294,'multiline':False]
['text':' Hashes are signed, 64-bit integers. So we divide the range (-MIN long, +MAX long) into','line_number':306,'multiline':False]
['text':' intervals of size (2^64/numInitialChunks) and create split points at the boundaries.','line_number':307,'multiline':False]
['text':'','line_number':308,'multiline':False]
['text':' The logic below ensures that initial chunks are all symmetric around 0.','line_number':309,'multiline':False]
['text':' Forward the iterator until hashed field is reached.','line_number':316,'multiline':False]
['text':' Append the prefix fields to the new splitpoint, if any such fields exist.','line_number':322,'multiline':False]
['text':' Append the value of the hashed field for the current splitpoint.','line_number':325,'multiline':False]
['text':' Set all subsequent shard key fields to MinKey.','line_number':328,'multiline':False]
['text':' Make sure points are unique and ordered','line_number':363,'multiline':False]
['text':' TODO SERVER-82611: get rid of the `numInitialChunks` argument.','line_number':437,'multiline':False]
['text':' The `numInitialChunks` parameter was deprecated in SERVER-74747 and should not be used.','line_number':438,'multiline':False]
['text':' `numInitialChunks` is a test-only paramter','line_number':441,'multiline':False]
['text':' TODO SERVER-81884: update once 8.0 becomes last LTS.','line_number':447,'multiline':False]
['text':' Do not generate any split points when using this strategy. We create one chunk on a shard','line_number':488,'multiline':False]
['text':' choosen using round-robin.','line_number':489,'multiline':False]
['text':' Create a chunk for the hole [lastChunkMax, tag.getMinKey)','line_number':514,'multiline':False]
['text':' Create chunk for the actual tag - [tag.getMinKey, tag.getMaxKey)','line_number':519,'multiline':False]
['text':' The buildSplitInfoForTag() should provide split points which are in sorted order. So we','line_number':523,'multiline':False]
['text':' don't need to sort them again while generating chunks.','line_number':524,'multiline':False]
['text':' Ensure that the number of splitPoints is consistent with the computed chunk distribution.','line_number':527,'multiline':False]
['text':' The resulting number of chunks will be one more than the number of split points to','line_number':528,'multiline':False]
['text':' accommodate boundaries.','line_number':529,'multiline':False]
['text':' initial value for 'runningSum'.','line_number':533,'multiline':False]
['text':' Generate chunks using 'splitPoints' and distribute them among shards based on','line_number':538,'multiline':False]
['text':' 'chunkDistributionPerShard'.','line_number':539,'multiline':False]
['text':' Create a chunk for the hole [lastChunkMax, MaxKey]','line_number':555,'multiline':False]
['text':' Returns the ceiling number for the decimal value of x/y.','line_number':566,'multiline':False]
['text':' This strategy presplits each tag such that at least 1 chunk is placed on every shard to which','line_number':571,'multiline':False]
['text':' the tag is assigned. We distribute the chunks such that at least '_numInitialChunks' are','line_number':572,'multiline':False]
['text':' created across the cluster, and we make a best-effort attempt to ensure that an equal number','line_number':573,'multiline':False]
['text':' of chunks are created on each shard regardless of how the zones are laid out.','line_number':574,'multiline':False]
['text':'  We take the ceiling when the number is not divisible so that the final number of chunks','line_number':576,'multiline':False]
['text':'  we generate are at least '_numInitialChunks'.','line_number':577,'multiline':False]
['text':' For each shard in the current zone, find the quota of chunks that can be allocated to that','line_number':584,'multiline':False]
['text':' zone. We distribute chunks equally to all the zones present on a shard.','line_number':585,'multiline':False]
['text':' Extract the fields preceding the hashed field. We use this object as a base for building','line_number':596,'multiline':False]
['text':' split points.','line_number':597,'multiline':False]
['text':' TODO SERVER-82611: get rid of the `numInitialChunks` argument.','line_number':617,'multiline':False]
['text':' The `numInitialChunks` parameter was deprecated in SERVER-74747 and should not be used.','line_number':618,'multiline':False]
['text':' `numInitialChunks` is a test-only parameter','line_number':621,'multiline':False]
['text':' Verify that tags have been set up correctly for this split policy.','line_number':625,'multiline':False]
['text':' Calculate the count of zones on each shard and save it in a map for later.','line_number':628,'multiline':False]
['text':' If we are here, we have confirmed that at least one tag is already set up. A tag can only be','line_number':636,'multiline':False]
['text':' created if they are associated with a zone and the zone has to be assigned to a shard.','line_number':637,'multiline':False]
['text':' TODO SERVER-81884: update once 8.0 becomes last LTS.','line_number':641,'multiline':False]
['text':' If 'numInitialChunks' was not specified, use default value.','line_number':646,'multiline':False]
['text':'*
 * If 'presplitHashedZones' flag is set with shard key prefix being a non-hashed field then all
 * zones must be set up according to the following rules:
 *  1. All lower-bound prefix fields of the shard key must have a value other than MinKey or
 * MaxKey.
 *  2. All lower-bound fields from the hash field onwards must be MinKey.
 *  3. At least one upper-bound prefix field must be different than the lower bound counterpart.
 *
 * Examples for shard key {country : 1, hashedField: "hashed", suffix : 1}:
 * Zone with range : [{country : "US", hashedField: MinKey, suffix: MinKey}, {country :MaxKey,
 * hashedField: MaxKey, suffix: MaxKey}) is valid.
 * Zone with range : [{country : MinKey, hashedField: MinKey, suffix: MinKey}, {country : "US",
 * hashedField: MinKey, suffix: MinKey}) is invalid since it violates #1 rule.
 * Zone with range: [{country : "US", hashedField: MinKey, suffix: "someVal"}, {country :MaxKey,
 * hashedField: MaxKey, suffix: MaxKey}) is invalid since it violates #2 rule.
 * Zone with range: [{country : "US", hashedField: MinKey, suffix: MinKey}, {country : "US",
 * hashedField: MaxKey, suffix: MaxKey}) is invalid since it violates #3 rule.
 *
 * If the shard key has a hashed prefix, then pre-splitting is only supported if there is a single
 * zone defined from global MinKey to global MaxKey. i.e, if the shard key is {x: "hashed", y: 1}
 * then there should be exactly one zone ranging from {x:MinKey, y:MinKey} to {x:MaxKey, y:MaxKey}.
 ','line_number':651,'multiline':True]
['text':' We cannot pre-split if the lower bound fields preceding the hashed field are same as','line_number':695,'multiline':False]
['text':' the upper bound. We validate that at least one of the preceding field is different.','line_number':696,'multiline':False]
['text':' Additionally we all make sure that none of the lower-bound prefix fields have Minkey','line_number':697,'multiline':False]
['text':' or MaxKey.','line_number':698,'multiline':False]
['text':' Forward the iterator until hashed field is reached.','line_number':711,'multiline':False]
['text':' Each field in the lower bound after the hashed field must be set to MinKey.','line_number':729,'multiline':False]
['text':' If the shard key includes a hashed field and current fieldRef is the hashed field.','line_number':753,'multiline':False]
['text':' The BlockingResultsMerger underlying the $mergeCursors stage records how long was','line_number':817,'multiline':False]
['text':' spent waiting for samples from the donor shards. It doing so requires the CurOp','line_number':818,'multiline':False]
['text':' to be marked as having started.','line_number':819,'multiline':False]
['text':' if key is hashed, nextKey values are already hashed','line_number':899,'multiline':False]
['text':' For the pipeline to be dispatched to shards, the ShardServerProcessInterface must be','line_number':934,'multiline':False]
['text':' used. However, the generic factory would only return a ShardServerProcessInterface','line_number':935,'multiline':False]
['text':' if the mongod is a shardsvr and the connection is internal. That is, if the mongod is','line_number':936,'multiline':False]
['text':' a configsvr or a shardsvr but connected directly, the factory would return a','line_number':937,'multiline':False]
['text':' StandaloneProcessInterface. Given this, we need to manually crate a','line_number':938,'multiline':False]
['text':' ShardServerProcessInterface here instead of using the generic factory.','line_number':939,'multiline':False]
['text':' explain ','line_number':947,'multiline':True]
['text':' fromMongos ','line_number':948,'multiline':True]
['text':' needsMerge ','line_number':949,'multiline':True]
['text':' allowDiskUse ','line_number':950,'multiline':True]
['text':' bypassDocumentValidation ','line_number':951,'multiline':True]
['text':' isMapReduceCommand ','line_number':952,'multiline':True]
['text':' runtimeConstants ','line_number':954,'multiline':True]
['text':' collator ','line_number':955,'multiline':True]
['text':' collUUID ','line_number':958,'multiline':True]
['text':' If there are not enough samples, just select the last sample.','line_number':981,'multiline':False]
['text':' When we compare a defined shard range with a splitPoint, there are three cases:
         * 1. The whole shard range is on the left side of the splitPoint -> Add this shard as a
         * whole chunk and move to next shard.
         * 2. The splitPoint is in the middle of the shard range. -> Append (shardMin,
         * splitPoint) as a chunk and move to next split point.
         * 3. The whole shard range is on the right side of the splitPoint -> Move to the next
         * splitPoint.
         * This algorithm relies on the shardDistribution is continuous and complete to be
         * correct, which is validated in the cmd handler.
         ','line_number':1052,'multiline':True]
['text':' The whole shard range is on the left side of the splitPoint.','line_number':1063,'multiline':False]
['text':' The splitPoint is in the middle of the shard range.','line_number':1073,'multiline':False]
['text':' The whole shard range is on the right side of the splitPoint.','line_number':1083,'multiline':False]
['text':' namespace mongo','line_number':1113,'multiline':False]
