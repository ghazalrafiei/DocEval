['text':'*
 *    Copyright (C) 2019-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 * Creates a report document with the provided parameters:
 *
 * {
 *     source:                          "shard0000"
 *     destination:                     "shard0001"
 *     isDonorShard:                    true or false
 *     chunk:                           {"min": <MinKey>, "max": <MaxKey>}
 *     collection:                      "dbName.collName"
 *     sessionOplogEntriesToBeMigratedSoFar: <Number>
 *     sessionOplogEntriesSkipped:      <Number>
 * }
 *
 ','line_number':64,'multiline':True]
['text':'*
 * Creates a report document with the provided parameters:
 *
 * {
 *     source:                      "shard0000"
 *     destination:                 "shard0001"
 *     isDonorShard:                true or false
 *     chunk:                       {"min": <MinKey>, "max": <MaxKey>}
 *     collection:                  "dbName.collName"
 *     sessionOplogEntriesMigrated: <Number>
 * }
 *
 ','line_number':88,'multiline':True]
['text':'*
 * Returns a chunk range with extended or truncated boundaries to match the number of fields in the
 * given metadata's shard key pattern.
 ','line_number':110,'multiline':True]
['text':'*
 * Returns an executor to be used to run commands related to submitting tasks to the range deleter.
 * The executor is initialized on the first call to this function. Uses a shared_ptr because a
 * shared_ptr is required to work with ExecutorFutures.
 ','line_number':117,'multiline':True]
['text':'*
 * Writes the migration coordinator document to config.migrationCoordinators and waits for majority
 * write concern.
 ','line_number':125,'multiline':True]
['text':'*
 * Updates the migration coordinator document to set the decision field to "committed" and waits for
 * majority writeConcern.
 ','line_number':132,'multiline':True]
['text':'*
 * Updates the migration coordinator document to set the decision field to "aborted" and waits for
 * majority writeConcern.
 ','line_number':139,'multiline':True]
['text':'*
 * Advances the optime for the current transaction by performing a write operation as a retryable
 * write. This is to prevent a write of the deletion task once the decision has been recorded.
 ','line_number':147,'multiline':True]
['text':'*
 * Submits an asynchronous task to scan config.migrationCoordinators and drive each unfinished
 * migration coordination to completion.
 ','line_number':156,'multiline':True]
['text':'*
 * Drive each unfished migration coordination in the given namespace to completion.
 * Assumes the caller to have entered CollectionCriticalSection.
 ','line_number':162,'multiline':True]
['text':'*
 * Instructs the recipient shard to release its critical section.
 ','line_number':170,'multiline':True]
['text':'*
 * Writes the migration recipient recovery document to config.migrationRecipients and waits for
 * majority write concern.
 ','line_number':179,'multiline':True]
['text':'*
 * Deletes the migration recipient recovery document from config.migrationRecipients and waits for
 * majority write concern.
 ','line_number':186,'multiline':True]
['text':'*
 * If there was any ongoing receiveChunk that requires recovery (i.e that has reached the
 * critical section stage), restores the MigrationDestinationManager state.
 ','line_number':192,'multiline':True]
['text':'*
 * Recovers all unfinished migrations pending recovery.
 * Note: This method assumes its caller is preventing new migrations from starting.
 ','line_number':198,'multiline':True]
['text':'*
 * Submits an asynchronous task to recover the migration until it succeeds or the node steps down.
 ','line_number':204,'multiline':True]
['text':'*
 * This function writes a no-op message to the oplog when migrating a first chunk to the recipient
 * (i.e., the recipient didn't have any * chunks), so that change stream will notice that and close
 * the cursor in order to notify mongos to target the new shard as well.
 ','line_number':210,'multiline':True]
['text':'*
 * This function writes a no-op message to the oplog when during migration the last chunk of the
 * collection collNss is migrated off the off the donor and hence the  donor has no more chunks.
 ','line_number':221,'multiline':True]
['text':' namespace migrationutil','line_number':229,'multiline':False]
['text':' namespace mongo','line_number':230,'multiline':False]
