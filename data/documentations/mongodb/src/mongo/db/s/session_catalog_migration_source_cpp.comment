['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' In our snapshot, fetch the current transaction number for a session. If that transaction','line_number':113,'multiline':False]
['text':' number doesn't match what's found on the image lookup, it implies that the image is not','line_number':114,'multiline':False]
['text':' the correct version for this oplog entry. We will not forge a noop from it.','line_number':115,'multiline':False]
['text':' The wallclock and namespace are not directly available on the txn document when','line_number':124,'multiline':False]
['text':' forging the noop image document.','line_number':125,'multiline':False]
['text':' The OpTime is probably the last write time, but the destination will overwrite this','line_number':129,'multiline':False]
['text':' anyways. Just set an OpTime to satisfy the IDL constraints for calling `toBSON`.','line_number':130,'multiline':False]
['text':' No pre/post image was found. Defensively strip the `needsRetryImage` value to remove','line_number':144,'multiline':False]
['text':' any notion this operation was a retryable findAndModify. If the request is retried on','line_number':145,'multiline':False]
['text':' the destination, it will surface an error to the user.','line_number':146,'multiline':False]
['text':'*
 * Creates an OplogEntry using the given field values
 ','line_number':171,'multiline':True]
['text':' optime','line_number':182,'multiline':False]
['text':' op type','line_number':183,'multiline':False]
['text':' namespace','line_number':184,'multiline':False]
['text':' uuid','line_number':185,'multiline':False]
['text':' fromMigrate','line_number':186,'multiline':False]
['text':' checkExistenceForDiffInsert','line_number':187,'multiline':False]
['text':' version','line_number':188,'multiline':False]
['text':' o','line_number':189,'multiline':False]
['text':' o2','line_number':190,'multiline':False]
['text':' session info','line_number':191,'multiline':False]
['text':' upsert','line_number':192,'multiline':False]
['text':' wall clock time','line_number':193,'multiline':False]
['text':' statement ids','line_number':194,'multiline':False]
['text':' optime of previous write within same transaction','line_number':195,'multiline':False]
['text':' pre-image optime','line_number':196,'multiline':False]
['text':' post-image optime','line_number':197,'multiline':False]
['text':' ShardId of resharding recipient','line_number':198,'multiline':False]
['text':' _id','line_number':199,'multiline':False]
['text':' needsRetryImage','line_number':200,'multiline':False]
['text':'*
 * Creates a special "write history lost" sentinel oplog entry.
 ','line_number':203,'multiline':True]
['text':' optime','line_number':213,'multiline':False]
['text':' op type','line_number':214,'multiline':False]
['text':' o','line_number':215,'multiline':False]
['text':' o2','line_number':216,'multiline':False]
['text':' session info','line_number':217,'multiline':False]
['text':' wall clock time','line_number':218,'multiline':False]
['text':' statement id','line_number':219,'multiline':False]
['text':'*
 * If the given oplog entry is an oplog entry for a retryable internal transaction, returns a copy
 * of it but with the session id and transaction number set to the session id and transaction number
 * of the retryable write that it corresponds to. Otherwise, returns the original oplog entry.
 ','line_number':222,'multiline':True]
['text':' namespace','line_number':240,'multiline':False]
['text':' Skip internal sessions for retryable writes with aborted or in progress transactions since','line_number':257,'multiline':False]
['text':' there is no write history to transfer at this point. Skip all internal sessions for','line_number':258,'multiline':False]
['text':' non-retryable writes since they only support transactions and those transactions are not','line_number':259,'multiline':False]
['text':' retryable so there is no need to transfer their write history to the recipient.','line_number':260,'multiline':False]
['text':' Sort the records in descending of the session id (_id) field so that the records for internal','line_number':270,'multiline':False]
['text':' sessions with highest txnNumber are returned first. This enables us to avoid migrating','line_number':271,'multiline':False]
['text':' internal sessions for retryable writes with txnNumber lower than the highest txnNumber.','line_number':272,'multiline':False]
['text':' Skip internal sessions for retryable writes with txnNumber lower than the higest','line_number':288,'multiline':False]
['text':' txnNumber.','line_number':289,'multiline':False]
['text':' Skip session id matching the migration lsid as they are only for used for rejecting','line_number':294,'multiline':False]
['text':' old migration source from initiating range deleter on the destination. Sending','line_number':295,'multiline':False]
['text':' these sessions to the other side has a potential to deadlock as the destination','line_number':296,'multiline':False]
['text':' will also try to checkout the same session for almost the entire duration of','line_number':297,'multiline':False]
['text':' the migration.','line_number':298,'multiline':False]
['text':' Session docs contain at least LSID, TxnNumber, Timestamp, and some BSON overhead.','line_number':345,'multiline':False]
['text':' Even if commit has started, we still need to drain the current buffer.','line_number':432,'multiline':False]
['text':' We affirm the no-op oplog entry has an 'o2' field to know it was generated by the system','line_number':455,'multiline':False]
['text':' internally and couldn't have come from the appendOplogNote command.','line_number':456,'multiline':False]
['text':' $incompleteOplogHistory no-op oplog entries must always be passed along still to','line_number':465,'multiline':False]
['text':' prevent a multi-statement transaction from being retried as a retryable write.','line_number':466,'multiline':False]
['text':' Skip this operation since it is not retryable.','line_number':520,'multiline':False]
['text':' Skip this operation since it does not involve the namespace being migrated.','line_number':525,'multiline':False]
['text':' The oplog buffer is empty. Fetch the next oplog entry from the current session','line_number':546,'multiline':False]
['text':' oplog iterator.','line_number':547,'multiline':False]
['text':' Determine if this oplog entry should be migrated. If so, add the oplog entry or the','line_number':555,'multiline':False]
['text':' oplog entries derived from it to the oplog buffer.','line_number':556,'multiline':False]
['text':' Derive retryable write oplog entries from this retryable internal transaction','line_number':559,'multiline':False]
['text':' applyOps oplog entry, and add them to the oplog buffer.','line_number':560,'multiline':False]
['text':' We only expect to see two kinds of oplog entries here:','line_number':578,'multiline':False]
['text':' - Dead-end sentinel oplog entries which by design should have stmtId equal to','line_number':579,'multiline':False]
['text':'   kIncompleteHistoryStmtId.','line_number':580,'multiline':False]
['text':' - CRUD or noop oplog entries for retryable writes which by design should have a','line_number':581,'multiline':False]
['text':'   stmtId.','line_number':582,'multiline':False]
['text':' Skip the rest of the chain for this session since the ns is unrelated with the','line_number':588,'multiline':False]
['text':' current one being migrated. It is ok to not check the rest of the chain because','line_number':589,'multiline':False]
['text':' retryable writes doesn't allow touching different namespaces.','line_number':590,'multiline':False]
['text':' Skipping an entry here will also result in the pre/post images to also not be','line_number':596,'multiline':False]
['text':' sent in the migration as they're handled by 'fetchPrePostImageOplog' below.','line_number':597,'multiline':False]
['text':' Peek the next oplog entry in the buffer and process it. We cannot pop the oplog','line_number':607,'multiline':False]
['text':' entry upfront since it may require fetching/forging a pre or post image and the reads','line_number':608,'multiline':False]
['text':' done as part of that can fail with a WriteConflictException error.','line_number':609,'multiline':False]
['text':' When `_lastFetchedOplogImage` is set, it means we found an oplog entry with a pre/post','line_number':636,'multiline':False]
['text':' image. At this step, we've already returned the image oplog entry, but we have yet to','line_number':637,'multiline':False]
['text':' return the original oplog entry stored in `_lastFetchedOplog`. We will unset this value','line_number':638,'multiline':False]
['text':' and return such that the next call to `getLastFetchedOplog` will return','line_number':639,'multiline':False]
['text':' `_lastFetchedOplog`.','line_number':640,'multiline':False]
['text':' When `_lastFetchedNewWriteOplogImage` is set, it means we found an oplog entry with','line_number':675,'multiline':False]
['text':' a pre/post image. At this step, we've already returned the image oplog entry, but we','line_number':676,'multiline':False]
['text':' have yet to return the original oplog entry stored in `_lastFetchedNewWriteOplog`. We','line_number':677,'multiline':False]
['text':' will unset this value and return such that the next call to `getLastFetchedOplog`','line_number':678,'multiline':False]
['text':' will return `_lastFetchedNewWriteOplog`.','line_number':679,'multiline':False]
['text':' The oplog buffer is empty. Peek the next opTime and fetch its oplog entry while not','line_number':691,'multiline':False]
['text':' holding the mutex. We cannot dequeue the opTime upfront since the the read can fail','line_number':692,'multiline':False]
['text':' with a WriteConflictException error.','line_number':693,'multiline':False]
['text':' Determine how this oplog entry should be migrated. Either add the oplog entry or the','line_number':709,'multiline':False]
['text':' oplog entries derived from it to the oplog buffer. Finally, dequeue the opTime.','line_number':710,'multiline':False]
['text':' Transactions inside internal sessions for non-retryable writes are not','line_number':729,'multiline':False]
['text':' retryable so there is no need to transfer their write history to the','line_number':730,'multiline':False]
['text':' recipient.','line_number':731,'multiline':False]
['text':' Derive retryable write oplog entries from this retryable internal','line_number':738,'multiline':False]
['text':' transaction applyOps oplog entry, and add them to the oplog buffer.','line_number':739,'multiline':False]
['text':' Add the opTime for the previous applyOps oplog entry in the transaction','line_number':746,'multiline':False]
['text':' to the queue.','line_number':747,'multiline':False]
['text':' This applyOps oplog entry corresponds to non-internal transaction prepare/commit,','line_number':755,'multiline':False]
['text':' replace it with a dead-end sentinel oplog entry.','line_number':756,'multiline':False]
['text':' Peek the next oplog entry in the buffer and process it below. We cannot pop the oplog','line_number':769,'multiline':False]
['text':' entry upfront since it may require fetching/forging a pre or post image and the reads','line_number':770,'multiline':False]
['text':' done as part of that can fail with a WriteConflictException error.','line_number':771,'multiline':False]
['text':' The SessionCatalogMigrationSource should not try to create a SessionOplogIterator','line_number':814,'multiline':False]
['text':' for a retryable internal transaction that has aborted or is still in progress or','line_number':815,'multiline':False]
['text':' prepare.','line_number':816,'multiline':False]
['text':' The SessionCatalogMigrationSource should not try to create a SessionOplogIterator for','line_number':820,'multiline':False]
['text':' internal sessions for non-retryable writes.','line_number':821,'multiline':False]
['text':' Note: during SessionCatalogMigrationSource::init, we inserted a document and wait for it','line_number':842,'multiline':False]
['text':' to committed to the majority. In addition, the TransactionHistoryIterator uses OpTime','line_number':843,'multiline':False]
['text':' to query for the oplog. This means that if we can successfully fetch the oplog, we are','line_number':844,'multiline':False]
['text':' guaranteed that they are majority committed. If we can't fetch the oplog, it can either','line_number':845,'multiline':False]
['text':' mean that the oplog has been rolled over or was rolled back.','line_number':846,'multiline':False]
['text':' Note: no need to check if in replicaSet mode because having an iterator implies','line_number':859,'multiline':False]
['text':' oplog exists.','line_number':860,'multiline':False]
['text':' If the rollbackId hasn't changed, and this record corresponds to a retryable write,','line_number':868,'multiline':False]
['text':' this means that the oplog has been truncated, so we return a sentinel oplog entry','line_number':869,'multiline':False]
['text':' indicating that the history for the retryable write has been lost. We also return','line_number':870,'multiline':False]
['text':' this sentinel entry for prepared or committed transaction records, since we don't','line_number':871,'multiline':False]
['text':' support retrying entire transactions.','line_number':872,'multiline':False]
['text':'','line_number':873,'multiline':False]
['text':' Otherwise, skip the record by returning boost::none.','line_number':874,'multiline':False]
['text':' Reset the iterator so that subsequent calls to getNext() will return boost::none.','line_number':888,'multiline':False]
['text':' namespace mongo','line_number':897,'multiline':False]
