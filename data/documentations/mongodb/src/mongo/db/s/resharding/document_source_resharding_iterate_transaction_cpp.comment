['text':'*
 *    Copyright (C) 2021-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' Generates the _id field for the resharding event. For an event within a transaction, this will be','line_number':57,'multiline':False]
['text':' {clusterTime: <transaction commit time>, ts: <applyOps optime>}. For all other events, this will','line_number':58,'multiline':False]
['text':' be {clusterTime: <optime>, ts: <optime>}.','line_number':59,'multiline':False]
['text':' namespace','line_number':71,'multiline':False]
['text':' If we're unwinding an 'applyOps' from a transaction, check if there are any documents','line_number':162,'multiline':False]
['text':' we have stored that can be returned.','line_number':163,'multiline':False]
['text':' Get the next input document.','line_number':172,'multiline':False]
['text':' If the oplog entry is not part of a transaction, allow it to pass through after appending','line_number':180,'multiline':False]
['text':' a resharding _id to the document.','line_number':181,'multiline':False]
['text':' The only two commands we will see here are an applyOps or a commit, which both mean','line_number':189,'multiline':False]
['text':' we need to open a "transaction context" representing a group of updates that all','line_number':190,'multiline':False]
['text':' occurred at once as part of a transaction. If we already have a transaction context','line_number':191,'multiline':False]
['text':' open, that would mean we are looking at an applyOps or commit nested within an','line_number':192,'multiline':False]
['text':' applyOps, which is not allowed in the oplog.','line_number':193,'multiline':False]
['text':' Once we initialize the transaction iterator, we can loop back to the top in order to','line_number':196,'multiline':False]
['text':' call 'getNextTransactionOp' on it. Note that is possible for the transaction iterator','line_number':197,'multiline':False]
['text':' to be empty of any relevant operations, meaning that this loop may need to execute','line_number':198,'multiline':False]
['text':' multiple times before it encounters a relevant change to return.','line_number':199,'multiline':False]
['text':' We want to parse the OpTime out of this document using the BSON OpTime parser. Instead of','line_number':237,'multiline':False]
['text':' converting the entire Document back to BSON, we convert only the fields we need.','line_number':238,'multiline':False]
['text':' We found an applyOps that implicitly commits a transaction. We include it in the','line_number':249,'multiline':False]
['text':' '_txnOplogEntries' stack of applyOps entries that the iterator should process as','line_number':250,'multiline':False]
['text':' part of this transaction. There may be additional applyOps entries linked through the','line_number':251,'multiline':False]
['text':' 'prevOpTime' field, which will also get added to '_txnOplogEntries' later in this','line_number':252,'multiline':False]
['text':' function. Note that this style of transaction does not have a 'commitTransaction'','line_number':253,'multiline':False]
['text':' command.','line_number':254,'multiline':False]
['text':' This must be a "commitTransaction" command, which commits a prepared transaction.','line_number':257,'multiline':False]
['text':' This style of transaction does not have an applyOps entry that implicitly commits it,','line_number':258,'multiline':False]
['text':' as in the previous case. We're going to iterate through the other oplog entries in','line_number':259,'multiline':False]
['text':' the transaction, but this entry does not have any updates in it, so we do not include','line_number':260,'multiline':False]
['text':' it in the '_txnOplogEntries' stack.','line_number':261,'multiline':False]
['text':' As with the 'txnOpTime' parsing above, we convert a portion of 'input' back to BSON','line_number':269,'multiline':False]
['text':' in order to parse an OpTime, this time from the "prevOpTime" field.','line_number':270,'multiline':False]
['text':' By this stage, we should always have at least one transaction entry optime in the stack.','line_number':276,'multiline':False]
['text':' There are no more operations in this transaction.','line_number':285,'multiline':False]
['text':' Pop the optime of the next applyOps entry off the stack and retrieve it.','line_number':289,'multiline':False]
['text':' Attach the transaction commit timestamp so it can be used by a downstream stage to','line_number':294,'multiline':False]
['text':' generate the _id for the document.','line_number':295,'multiline':False]
['text':' Generate the _id for the document as {clusterTime: txnCommitTime, ts: applyOpsTs}.','line_number':301,'multiline':False]
['text':' namespace mongo','line_number':326,'multiline':False]
