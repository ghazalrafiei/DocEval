['text':'*
 *    Copyright (C) 2020-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 * Observes writes that indicate state changes for a resharding operation. Holds promises that
 * the ReshardingCoordinator waits on in order to transition to a new state.
 *
 * An instance of this object is specific to one resharding operation.
 ','line_number':53,'multiline':True]
['text':'*
     * Called when a donor or recipient writes to its 'state' field. The updatedStateDoc is the
     * post-image of the ReshardingCoordinatorDocument after the update.
     ','line_number':64,'multiline':True]
['text':'*
     * When the last donor reports its 'minFetchTimestamp', selects the highest 'minFetchTimestamp'
     * of all donors to be the 'fetchTimestamp'. Fulfills the '_allDonorsReportedMinFetchTimestamp'
     * promise with this 'fetchTimestamp'.
     ','line_number':70,'multiline':True]
['text':'*
     * Fulfills the '_allRecipientsFinishedCloning' promise when the last recipient writes that it
     * has finished cloning the collection and is ready to start applying oplog entries missed
     * during collection cloning.
     ','line_number':77,'multiline':True]
['text':'*
     * Fulfills the '_allRecipientsReportedStrictConsistencyTimestamp' promise when the last
     * recipient writes that it is in 'strict-consistency' state as well as its
     * 'strictConsistencyTimestamp'.
     ','line_number':84,'multiline':True]
['text':'*
     * Fulfills the '_allRecipientsDone' promise when the last recipient writes
     * that it is in 'done' state.
     ','line_number':91,'multiline':True]
['text':'*
     * Fulfills the '_allDonorsDone' promise when the last donor writes that it
     * is in 'done' state.
     ','line_number':97,'multiline':True]
['text':'*
     * Checks if all recipients are in steady state. Otherwise, sets an error state so that
     * resharding is aborted.
     ','line_number':103,'multiline':True]
['text':'*
     * Sets errors on any promises that have not yet been fulfilled.
     ','line_number':109,'multiline':True]
['text':'*
     * Fulfills all promises prematurely. To be called only if no state document has been persisted
     * yet.
     ','line_number':114,'multiline':True]
['text':'*
     * Does work necessary for both recoverable errors (failover/stepdown) and unrecoverable errors
     * (abort resharding).
     ','line_number':121,'multiline':True]
['text':' Protects the state below','line_number':127,'multiline':False]
['text':'*
     * Promises indicating that either all donors or all recipients have entered a specific state.
     * The ReshardingCoordinator waits on these in order to transition states. Promises must be
     * fulfilled in descending order.
     *
     * Below are the relationships between promise and expected state in
     * format: {promiseToFulfill, expectedState}
     *
     *  {_allDonorsReportedMinFetchTimestamp, DonorStateEnum::kDonatingInitialData}
     *  {_allRecipientsFinishedCloning, RecipientStateEnum::kApplying}
     *  {_allRecipientsReportedStrictConsistencyTimestamp, RecipientStateEnum::kStrictConsistency}
     *  {_allRecipientsDone, RecipientStateEnum::kDone}
     *  {_allDonorsDone, DonorStateEnum::kDone}
     ','line_number':130,'multiline':True]
['text':' namespace mongo','line_number':156,'multiline':False]
