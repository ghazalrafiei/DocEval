['text':'*
 *    Copyright (C) 2020-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' The service implemented its own conflict check before this method was added.','line_number':86,'multiline':False]
['text':'*
 * Represents the current state of a resharding donor operation on this shard. This class drives
 * state transitions and updates to underlying on-disk metadata.
 ','line_number':98,'multiline':True]
['text':'*
     * Returns a Future that will be resolved when all work associated with this Instance has
     * completed running.
     ','line_number':117,'multiline':True]
['text':'*
     * Returns a Future fulfilled once the donor locally persists its final state before the
     * coordinator makes its decision to commit or abort (DonorStateEnum::kError or
     * DonorStateEnum::kBlockingWrites).
     ','line_number':141,'multiline':True]
['text':'*
     * Indicates that the coordinator has persisted a decision. Unblocks the
     * _coordinatorHasDecisionPersisted promise.
     ','line_number':153,'multiline':True]
['text':'*
     * Initiates the cancellation of the resharding operation.
     ','line_number':159,'multiline':True]
['text':'*
     * Runs up until the donor is either in state kBlockingWrites or encountered an error.
     ','line_number':167,'multiline':True]
['text':'*
     * Notifies the coordinator if the donor is in kBlockingWrites or kError and waits for
     * _coordinatorHasDecisionPersisted to be fulfilled (success) or for the abortToken to be
     * canceled (failure or stepdown).
     ','line_number':174,'multiline':True]
['text':'*
     * Finishes the work left remaining on the donor after the coordinator persists its decision to
     * abort or complete resharding.
     ','line_number':183,'multiline':True]
['text':'*
     * The work inside this function must be run regardless of any work on _scopedExecutor ever
     * running.
     ','line_number':192,'multiline':True]
['text':' The following functions correspond to the actions to take at a particular donor state.','line_number':198,'multiline':False]
['text':' Drops the original collection and throws if the returned status is not either Status::OK()','line_number':213,'multiline':False]
['text':' or NamespaceNotFound.','line_number':214,'multiline':False]
['text':' Transitions the on-disk and in-memory state to 'newState'.','line_number':217,'multiline':False]
['text':' Transitions the on-disk and in-memory state to DonorStateEnum::kDonatingInitialData.','line_number':222,'multiline':False]
['text':' Transitions the on-disk and in-memory state to DonorStateEnum::kError.','line_number':227,'multiline':False]
['text':' Updates the mutable portion of the on-disk and in-memory donor document with 'newDonorCtx'.','line_number':235,'multiline':False]
['text':' Removes the local donor document from disk.','line_number':238,'multiline':False]
['text':' Initializes the _abortSource and generates a token from it to return back the caller. If an','line_number':241,'multiline':False]
['text':' abort was reported prior to the initialization, automatically cancels the _abortSource before','line_number':242,'multiline':False]
['text':' returning the token.','line_number':243,'multiline':False]
['text':'','line_number':244,'multiline':False]
['text':' Should only be called once per lifetime.','line_number':245,'multiline':False]
['text':' The primary-only service instance corresponding to the donor instance. Not owned.','line_number':248,'multiline':False]
['text':' The in-memory representation of the immutable portion of the document in','line_number':255,'multiline':False]
['text':' config.localReshardingOperations.donor.','line_number':256,'multiline':False]
['text':' The in-memory representation of the mutable portion of the document in','line_number':260,'multiline':False]
['text':' config.localReshardingOperations.donor.','line_number':261,'multiline':False]
['text':' This is only used to restore metrics on a stepup.','line_number':264,'multiline':False]
['text':' ThreadPool used by CancelableOperationContext.','line_number':269,'multiline':False]
['text':' CancelableOperationContext must have a thread that is always available to it to mark its','line_number':270,'multiline':False]
['text':' opCtx as killed when the cancelToken has been cancelled.','line_number':271,'multiline':False]
['text':' Protects the state below','line_number':275,'multiline':False]
['text':' Canceled by 2 different sources: (1) This DonorStateMachine when it learns of an','line_number':278,'multiline':False]
['text':' unrecoverable error (2) The primary-only service instance driving this DonorStateMachine that','line_number':279,'multiline':False]
['text':' cancels the parent CancellationSource upon stepdown/failover.','line_number':280,'multiline':False]
['text':' The identifier associated to the recoverable critical section.','line_number':283,'multiline':False]
['text':' It states whether the current node has also the recipient role.','line_number':286,'multiline':False]
['text':' Each promise below corresponds to a state on the donor state machine. They are listed in','line_number':289,'multiline':False]
['text':' ascending order, such that the first promise below will be the first promise fulfilled -','line_number':290,'multiline':False]
['text':' fulfillment order is not necessarily maintained if the operation gets aborted.','line_number':291,'multiline':False]
['text':' Promises used to synchronize the acquisition/promotion of the recoverable critical section.','line_number':304,'multiline':False]
['text':'*
 * Represents the interface that DonorStateMachine uses to interact with the rest of the sharding
 * codebase.
 *
 * In particular, DonorStateMachine must not directly use CatalogCacheLoader, Grid, ShardingState,
 * or ShardingCatalogClient. DonorStateMachine must instead access those types through the
 * DonorStateMachineExternalState interface. Having it behind an interface makes it more
 * straightforward to unit test DonorStateMachine.
 ','line_number':309,'multiline':True]
['text':' namespace mongo','line_number':337,'multiline':False]
