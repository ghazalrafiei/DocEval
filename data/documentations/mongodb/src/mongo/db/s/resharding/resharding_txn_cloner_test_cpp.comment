['text':'*
 *    Copyright (C) 2020-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' The config database's primary shard is always config, and it is always sharded.','line_number':146,'multiline':False]
['text':' The config.transactions collection is always unsharded.','line_number':150,'multiline':False]
['text':' onStepUp() relies on the storage interface to create the config.transactions table.','line_number':163,'multiline':False]
['text':'*
     * Override the CatalogClient to make CatalogClient::getAllShards automatically return the
     * expected shards. We cannot mock the network responses for the ShardRegistry reload, since the
     * ShardRegistry reload is done over DBClient, not the NetworkInterface, and there is no
     * DBClientMock analogous to the NetworkInterfaceMock.
     ','line_number':176,'multiline':True]
['text':' Handle the 'killCursors' command.','line_number':299,'multiline':False]
['text':' The AsyncResultsMerger doesn't actually inspect the response of the killCursors, so','line_number':307,'multiline':False]
['text':' we don't have to put anything except {ok: true}.','line_number':308,'multiline':False]
['text':' autocommit ','line_number':331,'multiline':True]
['text':' startTransaction ','line_number':331,'multiline':True]
['text':' autocommit ','line_number':334,'multiline':True]
['text':' startTransaction ','line_number':334,'multiline':True]
['text':' The same logical session entry may be inserted more than once by a test case, so use a','line_number':340,'multiline':False]
['text':' $natural sort to find the most recently inserted entry.','line_number':341,'multiline':False]
['text':' The ReshardingTxnCloner expects there to already be a Client associated with the thread','line_number':401,'multiline':False]
['text':' from the thread pool. We set up the ThreadPoolTaskExecutor identically to how the','line_number':402,'multiline':False]
['text':' recipient's primary-only service is set up.','line_number':403,'multiline':False]
['text':' Allows callers to control the cancellation of the cloner's run() function when specified.','line_number':436,'multiline':False]
['text':' There isn't a guarantee that the reference count to `executor` has been decremented after','line_number':450,'multiline':False]
['text':' .run() returns. We schedule a trivial task on the task executor to ensure the callback's','line_number':451,'multiline':False]
['text':' destructor has run. Otherwise `executor` could end up outliving the ServiceContext and','line_number':452,'multiline':False]
['text':' triggering an invariant due to the task executor's thread having a Client still.','line_number':453,'multiline':False]
['text':' autocommit ','line_number':473,'multiline':True]
['text':' startTransaction ','line_number':473,'multiline':True]
['text':' autocommit ','line_number':490,'multiline':True]
['text':' startTransaction ','line_number':490,'multiline':True]
['text':' The transaction machinery cannot store an empty locker.','line_number':494,'multiline':False]
['text':' autocommit ','line_number':523,'multiline':True]
['text':' startTransaction ','line_number':523,'multiline':True]
['text':' The oplog entry must have o2 and fromMigrate set or SessionUpdateTracker will ignore it.','line_number':585,'multiline':False]
['text':'*
 * Test that the ReshardingTxnCloner stops processing batches when canceled via cancelToken.
 ','line_number':785,'multiline':True]
['text':' isFirstBatch ','line_number':821,'multiline':True]
['text':' Repeat with a different shard to verify multiple progress docs can exist at once for a','line_number':830,'multiline':False]
['text':' resharding operation.','line_number':831,'multiline':False]
['text':' isFirstBatch ','line_number':840,'multiline':True]
['text':' Verify each progress document is scoped to a single resharding operation.','line_number':849,'multiline':False]
['text':' The progress document is updated asynchronously after the session record is updated. We fake','line_number':867,'multiline':False]
['text':' the cloning operation being canceled to inspect the progress document after the first batch','line_number':868,'multiline':False]
['text':' has been processed.','line_number':869,'multiline':False]
['text':' isFirstBatch ','line_number':872,'multiline':True]
['text':' Simulate a stepdown.','line_number':874,'multiline':False]
['text':' With a non-mock network, disposing of the pipeline upon cancellation would also cancel','line_number':877,'multiline':False]
['text':' the original request.','line_number':878,'multiline':False]
['text':' After the first batch, the progress document should contain the lsid of the last document in','line_number':886,'multiline':False]
['text':' that batch.','line_number':887,'multiline':False]
['text':' Now we run the cloner again and give it the remaining documents.','line_number':891,'multiline':False]
['text':' isFirstBatch ','line_number':895,'multiline':True]
['text':' After the second and final batch, the progress document should have been updated to the final','line_number':900,'multiline':False]
['text':' overall lsid.','line_number':901,'multiline':False]
['text':' isFirstBatch ','line_number':919,'multiline':True]
['text':' Simulate the cloning operation being canceled as the batch was being filled.','line_number':921,'multiline':False]
['text':' The progress document is updated asynchronously after the session record is updated but','line_number':923,'multiline':False]
['text':' is guaranteed to have been updated before the next getMore request is sent.','line_number':924,'multiline':False]
['text':' Simulate a stepdown.','line_number':928,'multiline':False]
['text':' With a non-mock network, disposing of the pipeline upon cancellation would also cancel','line_number':931,'multiline':False]
['text':' the original request.','line_number':932,'multiline':False]
['text':' The stored progress should be unchanged.','line_number':941,'multiline':False]
['text':' Simulate a resume on the new primary by creating a new fetcher that resumes after the lsid in','line_number':945,'multiline':False]
['text':' the progress document.','line_number':946,'multiline':False]
['text':' The aggregation request should include the progress lsid to resume from.','line_number':961,'multiline':False]
['text':' Note 0 is the default txnNumber used for txn records made by makeSortedTxns()','line_number':968,'multiline':False]
['text':' Simulate a resume after a rollback of an update to the progress document by creating a new','line_number':972,'multiline':False]
['text':' fetcher that resumes at the lsid from the first progress document. This verifies cloning is','line_number':973,'multiline':False]
['text':' idempotent on the cloning shard.','line_number':974,'multiline':False]
['text':' The aggregation request should have included the previous progress lsid to resume from.','line_number':989,'multiline':False]
['text':' Note 0 is the default txnNumber used for txn records made by makeSortedTxns()','line_number':996,'multiline':False]
['text':' isFirstBatch ','line_number':1008,'multiline':True]
['text':' Wait a little bit to increase the likelihood that the cloner has blocked on the prepared','line_number':1033,'multiline':False]
['text':' transaction before the transaction is aborted.','line_number':1034,'multiline':False]
['text':' The first oplog entry is from aborting the prepared transaction via abortTxn().','line_number':1046,'multiline':False]
['text':' The second oplog entry is from the session txn record being updated by','line_number':1047,'multiline':False]
['text':' ReshardingTxnCloner.','line_number':1048,'multiline':False]
['text':' Wait a little bit to increase the likelihood that the applier has blocked on the prepared','line_number':1075,'multiline':False]
['text':' transaction before the cancellation source is canceled.','line_number':1076,'multiline':False]
['text':' Make two in progress transactions so the one started by resharding must block.','line_number':1093,'multiline':False]
['text':' Wait a little bit to increase the likelihood that the cloner has blocked on the in progress','line_number':1117,'multiline':False]
['text':' internal transaction before the transaction is aborted.','line_number':1118,'multiline':False]
['text':' The first oplog entry is from the session txn record being updated by','line_number':1130,'multiline':False]
['text':' ReshardingTxnCloner.','line_number':1131,'multiline':False]
['text':' Wait a little bit to increase the likelihood that the cloner has blocked on the in progress','line_number':1162,'multiline':False]
['text':' internal transaction before the transaction is aborted.','line_number':1163,'multiline':False]
['text':' The first oplog entry is from aborting the prepared internal transaction via abortTxn().','line_number':1175,'multiline':False]
['text':' The second oplog entry is from the session txn record being updated by','line_number':1176,'multiline':False]
['text':' ReshardingTxnCloner.','line_number':1177,'multiline':False]
['text':' Make two in progress transactions so the one started by resharding must block.','line_number':1195,'multiline':False]
['text':' Wait a little bit to increase the likelihood that the applier has blocked on the prepared','line_number':1219,'multiline':False]
['text':' transaction before the cancellation source is canceled.','line_number':1220,'multiline':False]
['text':' namespace','line_number':1229,'multiline':False]
['text':' namespace mongo','line_number':1230,'multiline':False]
