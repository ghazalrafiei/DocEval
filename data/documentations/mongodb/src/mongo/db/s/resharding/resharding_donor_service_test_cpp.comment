['text':'*
 *    Copyright (C) 2020-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' isAlsoRecipient ','line_number':288,'multiline':True]
['text':' isAlsoRecipient ','line_number':329,'multiline':True]
['text':' isAlsoRecipient ','line_number':363,'multiline':True]
['text':' The kBlockingWrite state is interrupted twice so we don't unset the guard until after','line_number':435,'multiline':False]
['text':' the second time.','line_number':436,'multiline':False]
['text':' Allow the transition to prevState to succeed on this primary-only service','line_number':453,'multiline':False]
['text':' instance.','line_number':454,'multiline':False]
['text':' Signal a change in the coordinator's state for the donor state transition dependent','line_number':462,'multiline':False]
['text':' on it.','line_number':463,'multiline':False]
['text':' A shard version refresh cannot be triggered once the critical section has','line_number':474,'multiline':False]
['text':' been acquired. We intentionally test the DonorStateEnum::kBlockingWrites','line_number':475,'multiline':False]
['text':' transition being triggered two different ways:','line_number':476,'multiline':False]
['text':'','line_number':477,'multiline':False]
['text':'   - The first transition would wait for the RecoverRefreshThread to','line_number':478,'multiline':False]
['text':'     notify the donor about the CoordinatorStateEnum::kBlockingWrites state.','line_number':479,'multiline':False]
['text':'','line_number':480,'multiline':False]
['text':'   - The second transition would rely on the donor having already written down','line_number':481,'multiline':False]
['text':'     DonorStateEnum::kPreparingToBlockWrites as a result of the','line_number':482,'multiline':False]
['text':'     RecoverRefreshThread having already been notified the donor about the','line_number':483,'multiline':False]
['text':'     CoordinatorStateEnum::kBlockingWrites state before.','line_number':484,'multiline':False]
['text':' Step down before the transition to state can complete.','line_number':498,'multiline':False]
['text':' Finally complete the operation and ensure its success.','line_number':511,'multiline':False]
['text':' isAlsoRecipient ','line_number':527,'multiline':True]
['text':' isAlsoRecipient ','line_number':548,'multiline':True]
['text':' isAlsoRecipient ','line_number':576,'multiline':True]
['text':' The call to notifyToStartBlockingWrites() is skipped here because the donor is being','line_number':630,'multiline':False]
['text':' notified that the resharding operation is aborting before the donor would have','line_number':631,'multiline':False]
['text':' transitioned to kBlockingWrites.','line_number':632,'multiline':False]
['text':' Step down before the transition to kDone can complete.','line_number':635,'multiline':False]
['text':' The donor still waits for the abort decision from the coordinator despite it having','line_number':725,'multiline':False]
['text':' errored locally. It is therefore safe to check its local state document until','line_number':726,'multiline':False]
['text':' DonorStateMachine::abort() is called.','line_number':727,'multiline':False]
['text':' The actual abortReason will be slightly larger than kReshardErrorMaxBytes bytes due','line_number':744,'multiline':False]
['text':' to the primitive truncation algorithm - Check that the total size is less than','line_number':745,'multiline':False]
['text':' kReshardErrorMaxBytes + a couple additional bytes to provide a buffer for the field','line_number':746,'multiline':False]
['text':' name sizes.','line_number':747,'multiline':False]
['text':' This acquires the critical section required by resharding donor machine when it is in','line_number':784,'multiline':False]
['text':' kBlockingWrites.','line_number':785,'multiline':False]
['text':' namespace','line_number':812,'multiline':False]
['text':' namespace mongo','line_number':813,'multiline':False]
