['text':'*
 *    Copyright (C) 2021-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 * This stage keeps track of applyOps oplog entries that represent transactions and iterates them
 * whenever an oplog entry commits a transaction. When the stage observes an applyOps or commit
 * command that commits a transaction, it emits one document for each applyOps in the transaction.
 *
 * If 'includeCommitTransactionTimestamp' is true, this stage is responsible for attaching the
 * transaction commit timestamp to each applyOps oplog entry document that it emits and a
 * downstream stage is expected to use this timestamp when generating the resharding's _id field
 * for the document (as described below).
 *
 * If 'includeCommitTransactionTimestamp' is false, this stage is responsible for generating
 * the resharding's _id field for each oplog entry document that it emits. For a document that
 * corresponds to an applyOps oplog entry for a committed transaction, this will be
 * {clusterTime: <transaction commit timestamp>, ts: <applyOps optime.ts>}. For all other documents,
 * this will be {clusterTime: <optime.ts>, ts: <optime.ts>}.
 ','line_number':60,'multiline':True]
['text':'*
     * Validates if the supplied document contains transaction details.
     ','line_number':115,'multiline':True]
['text':'*
     * Represents the DocumentSource's state if it's currently reading from a transaction.
     * Transaction operations are packed into 'applyOps' entries in the oplog.
     *
     * This iterator returns applyOps entries from a transaction in the same order they appear on
     * the oplog (chronological order). Note that the TransactionHistoryIterator, which this class
     * uses to query the oplog, returns the oplog entries in _reverse_ order. We internally reverse
     * the output of the TransactionHistoryIterator in order to get the desired order.
     ','line_number':120,'multiline':True]
['text':'*
         * Returns the next 'applyOps' oplog entry from the transaction. Returns boost::none to
         * indicate that there are no operations left.
         ','line_number':151,'multiline':True]
['text':' Perform a find on the oplog to find an OplogEntry by its OpTime.','line_number':158,'multiline':False]
['text':' Traverse backwards through the oplog by starting at the entry at 'firstOpTime' and','line_number':162,'multiline':False]
['text':' following "prevOpTime" links until reaching the terminal "prevOpTime" value, and push the','line_number':163,'multiline':False]
['text':' OpTime value to '_txnOplogEntries' for each entry traversed, including the 'firstOpTime'','line_number':164,'multiline':False]
['text':' entry. Note that we follow the oplog links _backwards_ through the oplog (i.e., in','line_number':165,'multiline':False]
['text':' reverse chronological order) but because this is a stack, the iterator will process them','line_number':166,'multiline':False]
['text':' in the opposite order, allowing iteration to proceed forwards and return operations in','line_number':167,'multiline':False]
['text':' chronological order.','line_number':168,'multiline':False]
['text':' This stack contains the timestamps for all oplog entries in this transaction that have','line_number':171,'multiline':False]
['text':' yet to be processed by the iterator. Each time the TransactionOpIterator returns an','line_number':172,'multiline':False]
['text':' applyOps entry, it pops the next optime off the stack and uses it to load the next','line_number':173,'multiline':False]
['text':' applyOps entry, meaning that the top entry is always the next entry to be processed. From','line_number':174,'multiline':False]
['text':' top-to-bottom, the stack is ordered chronologically, in the same order as entries appear','line_number':175,'multiline':False]
['text':' in the oplog.','line_number':176,'multiline':False]
['text':' The clusterTime of the entry which committed the transaction.','line_number':179,'multiline':False]
['text':' Fields that were taken from the oplog entry which committed the transaction.','line_number':182,'multiline':False]
['text':' Used for traversing the oplog with TransactionHistoryInterface.','line_number':186,'multiline':False]
['text':' Set to true if this stage should attach the transaction commit timestamp to the applyOps','line_number':192,'multiline':False]
['text':' oplog entry documents that it emits instead of generating a resharding id for the documents','line_number':193,'multiline':False]
['text':' that it emits.','line_number':194,'multiline':False]
['text':' Represents the current transaction we're unwinding, if any.','line_number':197,'multiline':False]
['text':' namespace mongo','line_number':201,'multiline':False]
