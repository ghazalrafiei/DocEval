['text':'*
 *    Copyright (C) 2020-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' It's possible that the state document was already previously inserted in the following','line_number':105,'multiline':False]
['text':' cases:','line_number':106,'multiline':False]
['text':' 1. The document was inserted previously, but the opCtx was interrupted before the','line_number':107,'multiline':False]
['text':' state machine was started in-memory with getOrCreate(), e.g. due to a chunk migration','line_number':108,'multiline':False]
['text':' (see SERVER-74647)','line_number':109,'multiline':False]
['text':' 2. Similar to the ErrorCategory::NotPrimaryError clause below, it is','line_number':110,'multiline':False]
['text':' theoretically possible for a series of stepdowns and step-ups to lead a scenario where a','line_number':111,'multiline':False]
['text':' stale but now re-elected primary attempts to insert the state document when another node','line_number':112,'multiline':False]
['text':' which was primary had already done so. Again, rather than attempt to prevent replica set','line_number':113,'multiline':False]
['text':' member state transitions during the shard version refresh, we instead swallow the','line_number':114,'multiline':False]
['text':' DuplicateKey exception. This is safe because PrimaryOnlyService::onStepUp() will have','line_number':115,'multiline':False]
['text':' constructed a new instance of the resharding state machine.','line_number':116,'multiline':False]
['text':'
 * Creates a ReshardingStateMachine if this node is primary and the ReshardingStateMachine doesn't
 * already exist.
 *
 * It is safe to call this function when this node is actually a secondary.
 ','line_number':123,'multiline':True]
['text':' Inserting the resharding state document must happen synchronously with the shard version','line_number':132,'multiline':False]
['text':' refresh for the w:majority wait from the resharding coordinator to mean that this replica','line_number':133,'multiline':False]
['text':' set shard cannot forget about being a participant.','line_number':134,'multiline':False]
['text':' resharding::processReshardingFieldsForCollection() is called on both primary and','line_number':144,'multiline':False]
['text':' secondary nodes as part of the shard version being refreshed. Due to the RSTL lock not','line_number':145,'multiline':False]
['text':' being held throughout the shard version refresh, it is also possible for the node to','line_number':146,'multiline':False]
['text':' arbitrarily step down and step up during the shard version refresh. Rather than','line_number':147,'multiline':False]
['text':' attempt to prevent replica set member state transitions during the shard version refresh,','line_number':148,'multiline':False]
['text':' we instead swallow the NotPrimaryError exception. This is safe because there is no work a','line_number':149,'multiline':False]
['text':' secondary (or primary which stepped down) must do for an active resharding operation upon','line_number':150,'multiline':False]
['text':' refreshing its shard version. The primary is solely responsible for advancing the','line_number':151,'multiline':False]
['text':' participant state as a result of the shard version refresh.','line_number':152,'multiline':False]
['text':'
 * Either constructs a new ReshardingDonorStateMachine with 'reshardingFields' or passes
 * 'reshardingFields' to an already-existing ReshardingDonorStateMachine.
 ','line_number':156,'multiline':True]
['text':' If a resharding operation is BEFORE state kPreparingToDonate, then the config.collections','line_number':178,'multiline':False]
['text':' entry won't have yet been created for the temporary resharding collection. The','line_number':179,'multiline':False]
['text':' DonorStateMachine refreshes the temporary resharding collection immediately after being','line_number':180,'multiline':False]
['text':' constructed. Accordingly, we avoid constructing the DonorStateMachine until the collection','line_number':181,'multiline':False]
['text':' entry for the temporary resharding collection is known to exist.','line_number':182,'multiline':False]
['text':'','line_number':183,'multiline':False]
['text':' If a resharding operation is PAST state kPreparingToDonate, but does not currently have a','line_number':184,'multiline':False]
['text':' donor document in-memory, this means that the document will be recovered by the','line_number':185,'multiline':False]
['text':' ReshardingDonorService. Accordingly, at time-of-recovery, the latest instance of','line_number':186,'multiline':False]
['text':' 'reshardingFields' will be read. Return no-op.','line_number':187,'multiline':False]
['text':' This could be a shard not indicated as a donor that's trying to refresh the source','line_number':192,'multiline':False]
['text':' collection. In this case, we don't want to create a donor machine.','line_number':193,'multiline':False]
['text':' We clear the routing information for the temporary resharding namespace to ensure this donor','line_number':198,'multiline':False]
['text':' shard primary will refresh from the config server and see the chunk distribution for the new','line_number':199,'multiline':False]
['text':' resharding operation.','line_number':200,'multiline':False]
['text':'
 * Either constructs a new ReshardingRecipientStateMachine with 'reshardingFields' or passes
 * 'reshardingFields' to an already-existing ReshardingRecipientStateMachine.
 ','line_number':215,'multiline':True]
['text':' If a resharding operation is past state kPreparingToDonate but does not currently have a','line_number':231,'multiline':False]
['text':' recipient document in-memory, this means that the document will be recovered by the','line_number':232,'multiline':False]
['text':' ReshardingRecipientService, and at that time the latest instance of 'reshardingFields'','line_number':233,'multiline':False]
['text':' will be read. Return no-op.','line_number':234,'multiline':False]
['text':'','line_number':235,'multiline':False]
['text':' We construct the RecipientStateMachine in the kPreparingToDonate state (which is the same','line_number':236,'multiline':False]
['text':' state as when we would construct the DonorStateMachine) so the resharding coordinator can','line_number':237,'multiline':False]
['text':' rely on all of the state machines being constructed as part of the same state transition.','line_number':238,'multiline':False]
['text':' This could be a shard not indicated as a recipient that's trying to refresh the temporary','line_number':243,'multiline':False]
['text':' collection. In this case, we don't want to create a recipient machine.','line_number':244,'multiline':False]
['text':'*
 * Checks that presence/absence of 'donorShards' and 'recipientShards' fields in the
 * reshardingFields are consistent with the 'state' field.
 ','line_number':256,'multiline':True]
['text':' Prior to the state CoordinatorStateEnum::kPreparingToDonate, the source collection's','line_number':264,'multiline':False]
['text':' config.collections entry won't have "donorFields". Additionally, the temporary resharding','line_number':265,'multiline':False]
['text':' collection's config.collections entry won't exist yet.','line_number':266,'multiline':False]
['text':' Prior to the state CoordinatorStateEnum::kCommitting, only the source','line_number':274,'multiline':False]
['text':' collection's config.collections entry should have donorFields, and only the','line_number':275,'multiline':False]
['text':' temporary resharding collection's entry should have recipientFields.','line_number':276,'multiline':False]
['text':' At and after state CoordinatorStateEnum::kCommitting, the temporary','line_number':286,'multiline':False]
['text':' resharding collection's config.collections entry has been removed, and so the','line_number':287,'multiline':False]
['text':' source collection's entry should have both donorFields and recipientFields.','line_number':288,'multiline':False]
['text':' namespace','line_number':298,'multiline':False]
['text':' The recipient state machines are created before the donor shards are prepared to donate but','line_number':330,'multiline':False]
['text':' will remain idle until the donor shards are prepared to donate.','line_number':331,'multiline':False]
['text':' Persist the config time to ensure that in case of stepdown next filtering metadata refresh on','line_number':366,'multiline':False]
['text':' the new primary will always fetch the latest information.','line_number':367,'multiline':False]
['text':' The coordinator encountered an unrecoverable error, both donors and recipients should be','line_number':374,'multiline':False]
['text':' made aware.','line_number':375,'multiline':False]
['text':' We clear the routing information for the temporary resharding namespace to ensure all','line_number':416,'multiline':False]
['text':' new donor shard primaries will refresh from the config server and see the chunk','line_number':417,'multiline':False]
['text':' distribution for the ongoing resharding operation.','line_number':418,'multiline':False]
['text':' chunkVersionReceived ','line_number':436,'multiline':True]
['text':' namespace resharding','line_number':453,'multiline':False]
['text':' namespace mongo','line_number':455,'multiline':False]
