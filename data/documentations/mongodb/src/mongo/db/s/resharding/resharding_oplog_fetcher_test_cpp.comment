['text':'*
 *    Copyright (C) 2020-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' IWYU pragma: no_include "cxxabi.h"','line_number':35,'multiline':False]
['text':'*
 * RAII type for operating at a timestamp. Will remove any timestamping when the object destructs.
 ','line_number':116,'multiline':True]
['text':' onStepUp() relies on the storage interface to create the config.transactions table.','line_number':167,'multiline':False]
['text':'*
     * Override the CatalogClient to make CatalogClient::getAllShards automatically return the
     * expected shards. We cannot mock the network responses for the ShardRegistry reload, since the
     * ShardRegistry reload is done over DBClient, not the NetworkInterface, and there is no
     * DBClientMock analogous to the NetworkInterfaceMock.
     ','line_number':188,'multiline':True]
['text':' Insert some documents.','line_number':224,'multiline':False]
['text':' No unittests would request more than this?','line_number':291,'multiline':False]
['text':' The fetcher will send a `killCursors` after the last `getMore`.','line_number':293,'multiline':False]
['text':' Writes five documents to `dataCollectionNss` that are replicated with a `destinedRecipient`','line_number':315,'multiline':False]
['text':' followed by the final no-op oplog entry that signals the last oplog entry needed to be','line_number':316,'multiline':False]
['text':' applied for resharding to move to the next stage.','line_number':317,'multiline':False]
['text':' Set a failpoint to tack a `destinedRecipient` onto oplog entries.','line_number':328,'multiline':False]
['text':' Insert five documents. Advance the majority point.','line_number':335,'multiline':False]
['text':' Write an entry saying that fetching is complete.','line_number':346,'multiline':False]
['text':' Disable the failpoint.','line_number':368,'multiline':False]
['text':' Five oplog entries for resharding + the sentinel final oplog entry.','line_number':436,'multiline':False]
['text':' Two oplog entries due to the batch size.','line_number':473,'multiline':False]
['text':' Assert the lastSeen value has been bumped from the original `_fetchTimestamp`.','line_number':476,'multiline':False]
['text':' Status has a private default constructor so we wrap it in a boost::optional to placate','line_number':503,'multiline':False]
['text':' the Windows compiler.','line_number':504,'multiline':False]
['text':' Test failure case.','line_number':508,'multiline':False]
['text':' Two oplog entries due to the batch size.','line_number':517,'multiline':False]
['text':' The ReshardingOplogFetcher hasn't inserted a record for','line_number':546,'multiline':False]
['text':' {_id: {clusterTime: _fetchTimestamp, ts: _fetchTimestamp}} so awaitInsert(startAt) won't be','line_number':547,'multiline':False]
['text':' immediately ready.','line_number':548,'multiline':False]
['text':' Because no writes have happened to the data collection, the fetcher will insert a no-op entry','line_number':552,'multiline':False]
['text':' with the latestOplogTimestamp, so `hasSeenStartAtFuture` will be ready.','line_number':553,'multiline':False]
['text':' Insert a document into the data collection and have it generate an oplog entry with a','line_number':565,'multiline':False]
['text':' "destinedRecipient" field.','line_number':566,'multiline':False]
['text':' Asking for `startAt` again would return an immediately ready future.','line_number':592,'multiline':False]
['text':' However, asking for `dataWriteTimestamp` wouldn't become ready until the next record is','line_number':595,'multiline':False]
['text':' inserted into the output collection.','line_number':596,'multiline':False]
['text':' Insert a document into the data collection and have it generate an oplog entry with a','line_number':627,'multiline':False]
['text':' "destinedRecipient" field.','line_number':628,'multiline':False]
['text':' The fetcher's lastSeenTimestamp should be equal to `writeToDataCollectionTs`.','line_number':653,'multiline':False]
['text':' Now, insert a document into a different collection that is not involved in resharding.','line_number':658,'multiline':False]
['text':' The fetcher's lastSeenTimestamp should now be equal to `writeToOtherCollectionTs`','line_number':680,'multiline':False]
['text':' because the lastSeenTimestamp will be updated with the latest oplog timestamp from the','line_number':681,'multiline':False]
['text':' donor's cursor response.','line_number':682,'multiline':False]
['text':' The last document returned by ReshardingDonorOplogIterator::getNextBatch() would be','line_number':687,'multiline':False]
['text':' `writeToDataCollectionTs`, but ReshardingOplogFetcher would have inserted a doc with','line_number':688,'multiline':False]
['text':' `writeToOtherCollectionTs` after this so `awaitInsert` should be immediately ready when','line_number':689,'multiline':False]
['text':' passed `writeToDataCollectionTs`.','line_number':690,'multiline':False]
['text':' `awaitInsert` should not be ready if passed `writeToOtherCollectionTs`.','line_number':693,'multiline':False]
['text':' Simulate the remote donor shard stepping down or transitioning into rollback.','line_number':732,'multiline':False]
['text':' Inject network timeout error.','line_number':772,'multiline':False]
['text':' We intentionally do not call fetcher.useReadConcernForTest(false) for this test case.','line_number':830,'multiline':False]
['text':' Calling onCommand() leads to a more helpful "Expected death, found life" error when the','line_number':844,'multiline':False]
['text':' invariant failure isn't triggered.','line_number':845,'multiline':False]
['text':' namespace','line_number':853,'multiline':False]
['text':' namespace mongo','line_number':854,'multiline':False]
