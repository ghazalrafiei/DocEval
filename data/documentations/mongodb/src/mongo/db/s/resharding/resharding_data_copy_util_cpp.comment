['text':'*
 *    Copyright (C) 2021-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' If the collection doesn't exist or exists with a different UUID, then the','line_number':125,'multiline':False]
['text':' requested collection has been dropped already.','line_number':126,'multiline':False]
['text':' dropOpTime ','line_number':132,'multiline':True]
['text':' markFromMigrate ','line_number':132,'multiline':True]
['text':' Remove the oplog applier progress doc for this donor.','line_number':144,'multiline':False]
['text':' Remove the txn cloner progress doc for this donor.','line_number':153,'multiline':False]
['text':' Drop the conflict stash collection for this donor.','line_number':161,'multiline':False]
['text':' Drop the oplog buffer collection for this donor.','line_number':165,'multiline':False]
['text':' It is safe for resharding to drop and reacquire locks when checking for collection existence','line_number':176,'multiline':False]
['text':' because the coordinator will prevent two resharding operations from running for the same','line_number':177,'multiline':False]
['text':' namespace at the same time.','line_number':178,'multiline':False]
['text':' justOne ','line_number':239,'multiline':True]
['text':' The BlockingResultsMerger underlying by the $mergeCursors stage records how long the','line_number':277,'multiline':False]
['text':' recipient spent waiting for documents from the donor shards. It doing so requires the CurOp','line_number':278,'multiline':False]
['text':' to be marked as having started.','line_number':279,'multiline':False]
['text':' It is legal to have an empty batch; in that case we should still write the','line_number':343,'multiline':False]
['text':' resume token.','line_number':344,'multiline':False]
['text':' When we have new data we always expect to make progress.  If we don't,','line_number':368,'multiline':False]
['text':' we just inserted duplicate documents, so fail.','line_number':369,'multiline':False]
['text':' Stale config errors requires that we refresh shard version, not just try again, so','line_number':374,'multiline':False]
['text':' we let the layer above handle them. We set isCommitOrAbort to true to avoid retrying','line_number':375,'multiline':False]
['text':' on errors in ErrorCodes::isRetriableError like InterruptedDueToReplStateChange.','line_number':376,'multiline':False]
['text':' hasWriteConcernError ','line_number':379,'multiline':True]
['text':' isCommitOrAbort ','line_number':379,'multiline':True]
['text':' Populate 'slots' with new optimes for each insert.','line_number':407,'multiline':False]
['text':' This also notifies the storage engine of each new timestamp.','line_number':408,'multiline':False]
['text':' autocommit ','line_number':444,'multiline':True]
['text':' startTransaction ','line_number':444,'multiline':True]
['text':' Skip the incoming statement because it has already been logged locally.','line_number':447,'multiline':False]
['text':' txnNumber < txnParticipant.o().activeTxnNumber','line_number':451,'multiline':False]
['text':' txnNumber == txnParticipant.o().activeTxnNumber &&','line_number':454,'multiline':False]
['text':' !txnParticipant.transactionIsInRetryableWriteMode()','line_number':455,'multiline':False]
['text':'','line_number':456,'multiline':False]
['text':' If the transaction chain is incomplete because the oplog was truncated, just ignore the','line_number':457,'multiline':False]
['text':' incoming write and don't attempt to "patch up" the missing pieces.','line_number':458,'multiline':False]
['text':'','line_number':459,'multiline':False]
['text':' This situation could also happen if the client reused the txnNumber for distinct','line_number':460,'multiline':False]
['text':' operations (which is a violation of the protocol). The client would receive an error if','line_number':461,'multiline':False]
['text':' they attempted to retry the retryable write they had reused the txnNumber with so it is','line_number':462,'multiline':False]
['text':' safe to leave config.transactions as-is.','line_number':463,'multiline':False]
['text':' txnParticipant.transactionIsPrepared()','line_number':466,'multiline':False]
['text':' This is a retryable write that was executed using an internal transaction and there is','line_number':469,'multiline':False]
['text':' a retry in progress.','line_number':470,'multiline':False]
['text':' ReshardingOpObserver depends on the collection metadata being known when processing writes to','line_number':489,'multiline':False]
['text':' the temporary resharding collection. We attach placement version IGNORED to the write','line_number':490,'multiline':False]
['text':' operations and leave it to ReshardingOplogBatchApplier::applyBatch() to retry on a','line_number':491,'multiline':False]
['text':' StaleConfig error to allow the collection metadata information to be recovered.','line_number':492,'multiline':False]
['text':' shardVersion ','line_number':498,'multiline':True]
['text':' databaseVersion ','line_number':499,'multiline':True]
['text':' autocommit ','line_number':520,'multiline':True]
['text':' startTransaction ','line_number':520,'multiline':True]
['text':' Similar to the `isTimestamped` check in `applyOperation`, we only want to commit the','line_number':526,'multiline':False]
['text':' transaction if we're doing replicated writes.','line_number':527,'multiline':False]
['text':' Use the same wallTime as the oplog entry since SessionUpdateTracker','line_number':580,'multiline':False]
['text':' looks at the oplog entry wallTime when replicating.','line_number':581,'multiline':False]
['text':' namespace mongo::resharding::data_copy','line_number':611,'multiline':False]
