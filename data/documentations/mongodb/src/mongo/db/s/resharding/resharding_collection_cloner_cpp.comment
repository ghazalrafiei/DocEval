['text':'*
 *    Copyright (C) 2020-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' For simulating errors while cloning. Takes "donorShard" as data.','line_number':104,'multiline':False]
['text':' namespace','line_number':119,'multiline':False]
['text':' Assume that the input collection isn't a view. The collectionUUID parameter to','line_number':143,'multiline':False]
['text':' the aggregate would enforce this anyway.','line_number':144,'multiline':False]
['text':' Assume that the config.cache.chunks collection isn't a view either.','line_number':148,'multiline':False]
['text':' Pipeline::makePipeline() ignores the collation set on the AggregationRequest (or lack','line_number':156,'multiline':False]
['text':' thereof) and instead only considers the collator set on the ExpressionContext. Setting','line_number':157,'multiline':False]
['text':' nullptr as the collator on the ExpressionContext means that the aggregation pipeline is','line_number':158,'multiline':False]
['text':' always using the "simple" collation, even when the collection default collation for','line_number':159,'multiline':False]
['text':' _sourceNss is non-simple. The chunk ranges in the $lookup stage must be compared using the','line_number':160,'multiline':False]
['text':' simple collation because collections are always sharded using the simple collation. However,','line_number':161,'multiline':False]
['text':' resuming by _id is only efficient (i.e. non-blocking seek/sort) when the aggregation pipeline','line_number':162,'multiline':False]
['text':' would be using the collection's default collation. We cannot do both so we choose to disallow','line_number':163,'multiline':False]
['text':' automatic resuming for collections with non-simple default collations.','line_number':164,'multiline':False]
['text':' explain ','line_number':170,'multiline':True]
['text':' fromMongos ','line_number':171,'multiline':True]
['text':' needsMerge ','line_number':172,'multiline':True]
['text':' allowDiskUse ','line_number':173,'multiline':True]
['text':' bypassDocumentValidation ','line_number':174,'multiline':True]
['text':' isMapReduceCommand ','line_number':175,'multiline':True]
['text':' runtimeConstants ','line_number':177,'multiline':True]
['text':' collator ','line_number':178,'multiline':True]
['text':' We use $arrayToObject to synthesize the $sortKeys needed by the AsyncResultsMerger to','line_number':196,'multiline':False]
['text':' merge the results from all of the donor shards by {_id: 1}. This expression wouldn't','line_number':197,'multiline':False]
['text':' be correct if the aggregation pipeline was using a non-"simple" collation.','line_number':198,'multiline':False]
['text':' Assume that the input collection isn't a view. The collectionUUID parameter to','line_number':214,'multiline':False]
['text':' the aggregate would enforce this anyway.','line_number':215,'multiline':False]
['text':' Assume that the config.cache.chunks collection isn't a view either.','line_number':219,'multiline':False]
['text':' explain ','line_number':228,'multiline':True]
['text':' fromMongos ','line_number':229,'multiline':True]
['text':' needsMerge ','line_number':230,'multiline':True]
['text':' allowDiskUse ','line_number':231,'multiline':True]
['text':' bypassDocumentValidation ','line_number':232,'multiline':True]
['text':' isMapReduceCommand ','line_number':233,'multiline':True]
['text':' runtimeConstants ','line_number':235,'multiline':True]
['text':' collator ','line_number':236,'multiline':True]
['text':' We associate the aggregation cursors established on each donor shard with a logical','line_number':255,'multiline':False]
['text':' session to prevent them from killing the cursor when it is idle locally. Due to the','line_number':256,'multiline':False]
['text':' cursor's merging behavior across all donor shards, it is possible for the cursor to be','line_number':257,'multiline':False]
['text':' active on one donor shard while idle for a long period on another donor shard.','line_number':258,'multiline':False]
['text':' The read preference on the request is merely informational (e.g. for profiler entries) -- the','line_number':280,'multiline':False]
['text':' pipeline's opCtx setting is actually used when sending the request.','line_number':281,'multiline':False]
['text':' We use the hint as an implied sort for $mergeCursors because','line_number':291,'multiline':False]
['text':' the aggregation pipeline synthesizes the necessary $sortKeys','line_number':292,'multiline':False]
['text':' fields in the result set.','line_number':293,'multiline':False]
['text':' Set up writer threads.','line_number':349,'multiline':False]
['text':' This loop will end by interrupt when the producer end closes.','line_number':357,'multiline':False]
['text':' If consumers fail, ensure that producers waiting on the queue','line_number':382,'multiline':False]
['text':' exit rather than hanging.','line_number':383,'multiline':False]
['text':' To ensure that all batches from one donor are handled sequentially, we need to handle','line_number':400,'multiline':False]
['text':' those requests by only one writer thread, which is determined by the shardId, which','line_number':401,'multiline':False]
['text':' corresponds to the index here.','line_number':402,'multiline':False]
['text':' We'll fake the error and not issue any more getMores.','line_number':420,'multiline':False]
['text':' Network commands can start immediately, so reserve here to avoid the','line_number':435,'multiline':False]
['text':' vector being resized while setting up.','line_number':436,'multiline':False]
['text':' TODO(SERVER-79857): This AsyncTry is being used to simulate the way the','line_number':472,'multiline':False]
['text':' future-enabled scheduleRemoteExhaustCommand works -- the future will be','line_number':473,'multiline':False]
['text':' fulfilled when there are no more responses forthcoming.  When we enable','line_number':474,'multiline':False]
['text':' exhaust we can remove the AsyncTry.','line_number':475,'multiline':False]
['text':' The final result should be the first error.','line_number':506,'multiline':False]
['text':' There is one shardId per donor.','line_number':548,'multiline':False]
['text':' (M)','line_number':561,'multiline':False]
['text':' (M)','line_number':562,'multiline':False]
['text':' (M)','line_number':563,'multiline':False]
['text':' If we see a null $recordId, this means that there are no more records to read from','line_number':589,'multiline':False]
['text':' this shard. As such, we skip it.','line_number':590,'multiline':False]
['text':' We associate the aggregation cursors established on each donor shard with a logical','line_number':608,'multiline':False]
['text':' session to prevent them from killing the cursor when it is idle locally.  While we','line_number':609,'multiline':False]
['text':' read from all cursors simultaneously, it is possible (though unlikely) for one to be starved','line_number':610,'multiline':False]
['text':' for an arbitrary period of time.','line_number':611,'multiline':False]
['text':' In the case of a single-shard command, dispatchShardPipeline uses the passed-in batch','line_number':619,'multiline':False]
['text':' size instead of 0.  The ReshardingCloneFetcher does not handle cursors with a populated','line_number':620,'multiline':False]
['text':' first batch nor a cursor already complete (id 0), so avoid that by setting the batch size','line_number':621,'multiline':False]
['text':' to 0 here.','line_number':622,'multiline':False]
['text':' This is intentionally not 'setRequestReshardingResumeToken'; that is used for getting','line_number':627,'multiline':False]
['text':' oplog.','line_number':628,'multiline':False]
['text':' The read preference on the request is merely informational (e.g. for profiler entries) -- the','line_number':641,'multiline':False]
['text':' pipeline's opCtx setting is actually used when sending the request.','line_number':642,'multiline':False]
['text':' eligibleForSampling ','line_number':650,'multiline':True]
['text':' explain ','line_number':652,'multiline':True]
['text':' cri ','line_number':653,'multiline':True]
['text':' If we don't establish any cursors, there is no work to do. Return.','line_number':660,'multiline':False]
['text':'useNaturalOrderCloner','line_number':722,'multiline':True]
['text':' The BlockingResultsMerger underlying by the $mergeCursors stage records how long the','line_number':738,'multiline':False]
['text':' recipient spent waiting for documents from the donor shards. It doing so requires the CurOp','line_number':739,'multiline':False]
['text':' to be marked as having started.','line_number':740,'multiline':False]
['text':' Skip inserting the first document retrieved after resuming because $gte was used in the','line_number':751,'multiline':False]
['text':' aggregation pipeline.','line_number':752,'multiline':False]
['text':' Note that the following uassert() could throw because we're using the simple string','line_number':759,'multiline':False]
['text':' comparator and the collection could have a non-simple collation. However, it would still','line_number':760,'multiline':False]
['text':' be correct to throw an exception because it would mean the collection being resharded','line_number':761,'multiline':False]
['text':' contains multiple documents with the same _id value as far as global uniqueness is','line_number':762,'multiline':False]
['text':' concerned.','line_number':763,'multiline':False]
['text':' ReshardingOpObserver depends on the collection metadata being known when processing','line_number':806,'multiline':False]
['text':' writes to the temporary resharding collection. We attach shard version IGNORED to the','line_number':807,'multiline':False]
['text':' insert operations and retry once on a StaleConfig error to allow the collection metadata','line_number':808,'multiline':False]
['text':' information to be recovered.','line_number':809,'multiline':False]
['text':' shardVersion ','line_number':828,'multiline':True]
['text':' databaseVersion ','line_number':829,'multiline':True]
['text':' We can run into StaleConfig errors when cloning collections. To make it','line_number':863,'multiline':False]
['text':' safer during retry, we retry the whole cloning process and rely on the','line_number':864,'multiline':False]
['text':' resume token to be correct.','line_number':865,'multiline':False]
['text':' If we got here, we succeeded and there is no more to come.  Otherwise','line_number':873,'multiline':False]
['text':' _runOnceWithNaturalOrder would uassert.','line_number':874,'multiline':False]
['text':' It is unsafe to capture `this` once the task is running on the cleanupExecutor because','line_number':919,'multiline':False]
['text':' RecipientStateMachine, along with its ReshardingCollectionCloner member, may have already','line_number':920,'multiline':False]
['text':' been destructed.','line_number':921,'multiline':False]
['text':' TODO(SERVER-74658): Please revisit if this thread could be made killable.','line_number':928,'multiline':False]
['text':' Guarantee the pipeline is always cleaned up - even upon cancellation.','line_number':937,'multiline':False]
['text':' Propagate the result of the AsyncTry.','line_number':942,'multiline':False]
['text':' namespace mongo','line_number':948,'multiline':False]
