['text':'*
 *    Copyright (C) 2020-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' namespace executor','line_number':57,'multiline':False]
['text':'*
 * Transfer config.transaction information from a given source shard to this shard.
 ','line_number':59,'multiline':True]
['text':'*
     * Returns a pipeline for iterating the donor shard's config.transactions collection.
     *
     * The pipeline itself looks like:
     * [
     *      {$match: {_id: {$gt: <startAfter>}}},
     *      {$sort: {_id: 1}},
     * ]
     ','line_number':66,'multiline':True]
['text':'*
     * Schedules work to repeatedly fetch and update config.transactions records.
     *
     * Returns a future that becomes ready when either:
     *   (a) all config.transactions records have been fetched and updated, or
     *   (b) the cancellation token was canceled due to a stepdown or abort.
     ','line_number':80,'multiline':True]
['text':'*
     * Updates this shard's config.transactions table based on a retryable write or multi-statement
     * transaction that already executed on the donor shard.
     *
     * Returns boost::none unless this shard has an active prepared transaction for the
     * corresponding config.transactions record. It otherwise returns a future that becomes ready
     * once the active prepared transaction on this shard commits or aborts.
     ','line_number':94,'multiline':True]
['text':'*
 * Create pipeline stages for iterating donor config.transactions.  The pipeline has these stages:
 * pipeline: [
 *      {$match: {_id: {$gt: <startAfter>}}},
 *      {$sort: {_id: 1}},
 * ],
 * Note that the caller is responsible for making sure that the transactions ns is set in the
 * expCtx.
 *
 * fetchTimestamp never isNull()
 ','line_number':126,'multiline':True]
['text':' namespace mongo','line_number':142,'multiline':False]
