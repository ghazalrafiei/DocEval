['text':'*
 *    Copyright (C) 2021-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 * Creates the specified collection with the given options if the collection does not already exist.
 * If the collection already exists, we do not compare the options because the resharding process
 * will always use the same options for the same namespace.
 ','line_number':75,'multiline':True]
['text':'*
 * Drops the specified collection or returns without error if the collection has already been
 * dropped. A particular incarnation of the collection can be dropped by specifying its UUID.
 *
 * This functions assumes the collection being dropped doesn't have any two-phase index builds
 * active on it.
 ','line_number':84,'multiline':True]
['text':'*
 * Removes documents from the oplog applier progress and transaction applier progress collections
 * that are associated with an in-progress resharding operation. Also drops all oplog buffer
 * collections and conflict stash collections that are associated with the in-progress resharding
 * operation.
 ','line_number':95,'multiline':True]
['text':'*
 * Renames the temporary resharding collection to the source namespace string, or is a no-op if the
 * collection has already been renamed to it.
 *
 * This function throws an exception if the collection doesn't exist as the temporary resharding
 * namespace string or the source namespace string.
 ','line_number':106,'multiline':True]
['text':'*
 * Removes all entries matching the given reshardingUUID from the recipient resume data table.
 ','line_number':116,'multiline':True]
['text':'*
 * Returns the largest _id value in the collection.
 ','line_number':121,'multiline':True]
['text':'*
 * Returns the full document of the largest _id value in the collection.
 ','line_number':126,'multiline':True]
['text':'*
 * Returns a batch of documents suitable for being inserted with insertBatch().
 *
 * The batch of documents is returned once its size exceeds batchSizeLimitBytes or the pipeline has
 * been exhausted.
 ','line_number':132,'multiline':True]
['text':'*
 * Atomically inserts a batch of documents in a single multi-document transaction, along with also
 * storing the resume token in the same transaction. Returns the number of bytes inserted.
 ','line_number':140,'multiline':True]
['text':'*
 * Atomically inserts a batch of documents in a single storage transaction. Returns the number of
 * bytes inserted.
 *
 * Throws NamespaceNotFound if the collection doesn't already exist.
 ','line_number':154,'multiline':True]
['text':'*
 * Checks out the logical session in the opCtx and runs the supplied lambda function in a
 * transaction, using the transaction number supplied in the opCtx.
 ','line_number':164,'multiline':True]
['text':'*
 * Checks out the logical session and acts in one of the following ways depending on the state of
 * this shard's config.transactions table:
 *
 *   (a) When this shard already knows about a higher transaction than txnNumber,
 *       withSessionCheckedOut() skips calling the supplied lambda function and returns boost::none.
 *
 *   (b) When this shard already knows about the retryable write statement (txnNumber, *stmtId),
 *       withSessionCheckedOut() skips calling the supplied lambda function and returns boost::none.
 *
 *   (c) When this shard has an earlier prepared transaction still active, withSessionCheckedOut()
 *       skips calling the supplied lambda function and returns a future that becomes ready once the
 *       active prepared transaction on this shard commits or aborts. After waiting for the returned
 *       future to become ready, the caller should then invoke withSessionCheckedOut() with the same
 *       arguments a second time.
 *
 *   (d) Otherwise, withSessionCheckedOut() calls the lambda function and returns boost::none.
 ','line_number':172,'multiline':True]
['text':'*
 * Updates this shard's config.transactions table based on a retryable write or multi-statement
 * transaction that already executed on some donor shard.
 *
 * This function assumes it is being called while the corresponding logical session is checked out
 * by the supplied OperationContext.
 ','line_number':196,'multiline':True]
['text':'*
 * Retrieves the resume data natural order scans for all donor shards.
 ','line_number':209,'multiline':True]
['text':'*
 * Calls and returns the value from the supplied lambda function.
 *
 * If a StaleConfig error is thrown during its execution, then this function will attempt to refresh
 * the collection and invoke the supplied lambda function a second time.
 ','line_number':215,'multiline':True]
['text':' Cause a catalog cache refresh in case the index information is stale. Invalidate even','line_number':227,'multiline':False]
['text':' if the shard metadata was unknown so that we require only one stale config retry.','line_number':228,'multiline':False]
['text':' Recover the sharding metadata if there was no wanted version in the staleConfigInfo','line_number':234,'multiline':False]
['text':' If a wanted version was returned, the metadata is already known, so we care about the','line_number':243,'multiline':False]
['text':' advancement of the catalog cache rather than the shard refresh. If the wanted version','line_number':244,'multiline':False]
['text':' is not set, then we only want to retry if we succeeded in recovering the collection','line_number':245,'multiline':False]
['text':' metadata.','line_number':246,'multiline':False]
['text':' namespace resharding::data_copy','line_number':255,'multiline':False]
['text':' namespace mongo','line_number':256,'multiline':False]
