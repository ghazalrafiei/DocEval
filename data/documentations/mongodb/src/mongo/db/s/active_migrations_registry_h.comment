['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 * This class is used to synchronise all the active routing info operations for chunks owned by this
 * shard. There is only one instance of it per ServiceContext.
 *
 * It implements a non-fair lock manager, which provides the following guarantees:
 *
 *   - Move || Move (same chunk): The second move will join the first
 *   - Move || Move (different chunks or collections): The second move will result in a
 *                                                     ConflictingOperationInProgress error
 *   - Move || Split/Merge (same collection): The second operation will block behind the first
 *   - Move/Split/Merge || Split/Merge (for different collections): Can proceed concurrently
 ','line_number':65,'multiline':True]
['text':'*
     * These methods can be used to block migrations temporarily. The lock() method will block if
     * there is a migration operation in progress and will return once it is completed. Any
     * subsequent migration operations will return ConflictingOperationInProgress until the unlock()
     * method is called.
     ','line_number':88,'multiline':True]
['text':'*
     * If there are no migrations or split/merges running on this shard, registers an active
     * migration with the specified arguments. Returns a ScopedDonateChunk, which must be signaled
     * by the caller before it goes out of scope.
     *
     * If there is an active migration already running on this shard and it has the exact same
     * arguments, returns a ScopedDonateChunk. The ScopedDonateChunk can be used to join the
     * already running migration.
     *
     * Otherwise returns a ConflictingOperationInProgress error.
     ','line_number':97,'multiline':True]
['text':'*
     * Registers an active receive chunk operation with the specified session id and returns a
     * ScopedReceiveChunk. The returned ScopedReceiveChunk object will unregister the migration when
     * it goes out of scope.
     *
     * In case registerReceiveChunk() is called while other operations (a second migration or a
     * registry lock()) are already holding resources of the ActiveMigrationsRegistry, the function
     * will either
     * - wait for such operations to complete and then perform the registration
     * - return a ConflictingOperationInProgress error
     * based on the value of the waitForCompletionOfConflictingOps parameter
     ','line_number':111,'multiline':True]
['text':'*
     * If there are no migrations running on this shard, registers an active split or merge
     * operation for the specified namespace and returns a scoped object which will in turn disallow
     * other migrations or splits/merges for the same namespace (but not for other namespaces).
     ','line_number':129,'multiline':True]
['text':'*
     * If a migration has been previously registered through a call to registerDonateChunk, returns
     * that namespace. Otherwise returns boost::none.
     ','line_number':138,'multiline':True]
['text':'*
     * Returns a report on the active migration if there currently is one. Otherwise, returns an
     * empty BSONObj.
     *
     * Takes an IS lock on the namespace of the active migration, if one is active.
     ','line_number':144,'multiline':True]
['text':' Describes the state of a currently active moveChunk operation','line_number':157,'multiline':False]
['text':'*
         * Constructs an error status to return in the case of conflicting operations.
         ','line_number':162,'multiline':True]
['text':' Exact arguments of the currently active operation','line_number':167,'multiline':False]
['text':' Notification event that will be signaled when the currently active operation completes','line_number':170,'multiline':False]
['text':' Describes the state of a currently active receive chunk operation','line_number':174,'multiline':False]
['text':'*
         * Constructs an error status to return in the case of conflicting operations.
         ','line_number':179,'multiline':True]
['text':' Namespace for which a chunk is being received','line_number':184,'multiline':False]
['text':' Bounds of the chunk being migrated','line_number':187,'multiline':False]
['text':' Id of the shard from which the chunk is being received','line_number':190,'multiline':False]
['text':' Describes the state of a currently active split or merge operation','line_number':194,'multiline':False]
['text':' Namespace for which a chunk is being split or merged','line_number':199,'multiline':False]
['text':' If split, bounds of the chunk being split; if merge, the end bounds of the range being','line_number':202,'multiline':False]
['text':' merged','line_number':203,'multiline':False]
['text':'*
     * Unregisters a previously registered namespace with an ongoing migration. Must only be called
     * if a previous call to registerDonateChunk has succeeded.
     ','line_number':207,'multiline':True]
['text':'*
     * Unregisters a previously registered incoming migration. Must only be called if a previous
     * call to registerReceiveChunk has succeeded.
     ','line_number':213,'multiline':True]
['text':'*
     * Unregisters a previously registered split/merge chunk operation. Must only be called if a
     * previous call to registerSplitOrMergeChunk has succeeded.
     ','line_number':219,'multiline':True]
['text':' Protects the state below','line_number':225,'multiline':False]
['text':' Condition variable which will be signaled whenever any of the states below become false,','line_number':228,'multiline':False]
['text':' boost::none or a specific namespace removed from the map.','line_number':229,'multiline':False]
['text':' Overarching block, which doesn't allow migrations to occur even when there isn't an active','line_number':232,'multiline':False]
['text':' migration ongoing. Used during recovery and FCV changes.','line_number':233,'multiline':False]
['text':' If there is an active moveChunk operation, this field contains the original request','line_number':236,'multiline':False]
['text':' If there is an active chunk receive operation, this field contains the original session id','line_number':239,'multiline':False]
['text':' If there is an active split or merge chunk operation for a particular namespace, this map','line_number':242,'multiline':False]
['text':' will contain an entry','line_number':243,'multiline':False]
['text':' Ensure any thread attempting to use a MigrationBlockingGuard will be interrupted by','line_number':251,'multiline':False]
['text':' a stepdown.','line_number':252,'multiline':False]
['text':'*
 * Object of this class is returned from the registerDonateChunk call of the active migrations
 * registry. It can exist in two modes - 'execute' and 'join'. See the comments for
 * registerDonateChunk method for more details.
 ','line_number':268,'multiline':True]
['text':'*
     * Returns true if the migration object is in the 'execute' mode. This means that the migration
     * object holder is next in line to execute the moveChunk command. The holder must execute the
     * command and call signalComplete with a status.
     ','line_number':286,'multiline':True]
['text':'*
     * Must only be called if the object is in the 'execute' mode when the moveChunk command was
     * invoked (the command immediately executed). Signals any callers that might be blocked in
     * waitForCompletion.
     ','line_number':295,'multiline':True]
['text':'*
     * Must only be called if the object is in the 'join' mode. Blocks until the main executor of
     * the moveChunk command calls signalComplete.
     ','line_number':302,'multiline':True]
['text':' Registry from which to unregister the migration. Not owned.','line_number':309,'multiline':False]
['text':'*
     * Whether the holder is the first in line for a newly started migration (in which case the
     * destructor must unregister) or the caller is joining on an already-running migration
     * (in which case the caller must block and wait for completion).
     ','line_number':312,'multiline':True]
['text':' This is the future, which will be set at the end of a migration.','line_number':319,'multiline':False]
['text':' This is the outcome of the migration execution, stored when signalComplete() is called and','line_number':322,'multiline':False]
['text':' set on the future of the executing ScopedDonateChunk object when this gets destroyed.','line_number':323,'multiline':False]
['text':'*
 * Object of this class is returned from the registerReceiveChunk call of the active migrations
 * registry.
 ','line_number':327,'multiline':True]
['text':' Registry from which to unregister the migration. Not owned.','line_number':343,'multiline':False]
['text':'*
 * Object of this class is returned from the registerSplitOrMergeChunk call of the active migrations
 * registry.
 ','line_number':347,'multiline':True]
['text':' Registry from which to unregister the split/merge. Not owned.','line_number':360,'multiline':False]
['text':' namespace mongo','line_number':366,'multiline':False]
