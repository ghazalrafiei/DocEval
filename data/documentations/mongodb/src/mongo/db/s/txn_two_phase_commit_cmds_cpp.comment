['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' Internal command (server to server).','line_number':98,'multiline':False]
['text':' If a node has majority read concern disabled, replication must use the legacy','line_number':123,'multiline':False]
['text':' 'rollbackViaRefetch' algortithm, which does not support prepareTransaction oplog','line_number':124,'multiline':False]
['text':' entries','line_number':125,'multiline':False]
['text':' Replica sets with arbiters are able to continually accept majority writes without','line_number':130,'multiline':False]
['text':' actually being able to commit them (e.g. PSA with a downed secondary), which in turn','line_number':131,'multiline':False]
['text':' will impact the liveness of 2PC transactions','line_number':132,'multiline':False]
['text':' Standalone nodes do not support transactions at all','line_number':138,'multiline':False]
['text':' TODO SERVER-81037: This can be removed whenever the catalog uses the new schema','line_number':163,'multiline':False]
['text':' and we can rely on WT to detect these changes.','line_number':164,'multiline':False]
['text':'','line_number':165,'multiline':False]
['text':' We now verify that the created collections are not part of the latest catalog.','line_number':166,'multiline':False]
['text':' That means that there is a prepare conflict and we should error.','line_number':167,'multiline':False]
['text':' TODO SERVER-81937: Verify that the DDL Coordinator locks are acquired for all','line_number':175,'multiline':False]
['text':' uncommitted collection catalog entries.','line_number':176,'multiline':False]
['text':' Ensure waiting for writeConcern of the prepare OpTime. If the node has failed','line_number':190,'multiline':False]
['text':' over, then we want to wait on an OpTime in the new term, so we wait on the','line_number':191,'multiline':False]
['text':' lastApplied OpTime. If we've gotten to this point, then we are guaranteed that','line_number':192,'multiline':False]
['text':' the transaction was prepared at this prepareOpTime on this branch of history and','line_number':193,'multiline':False]
['text':' that waiting on this lastApplied OpTime waits on the prepareOpTime as well.','line_number':194,'multiline':False]
['text':' Because lastAppliedOpTime is updated asynchronously with the WUOW that prepares','line_number':195,'multiline':False]
['text':' the transaction, there is a chance that the lastAppliedOpTime is behind the','line_number':196,'multiline':False]
['text':' prepareOpTime. And we also need to be careful not to set lastOp backwards. Thus,','line_number':197,'multiline':False]
['text':' we set the client lastOp to max of prepareOpTime, lastAppliedOpTime, and the','line_number':198,'multiline':False]
['text':' current lastOp.','line_number':199,'multiline':False]
['text':' Internal command (server to server).','line_number':307,'multiline':False]
['text':' Only config servers or initialized shard servers can act as transaction coordinators.','line_number':316,'multiline':False]
['text':' Coordinate the commit, or recover the commit decision from disk if this command was','line_number':327,'multiline':False]
['text':' sent without a participant list.','line_number':328,'multiline':False]
['text':' A decision will most likely have been written from a different OperationContext','line_number':342,'multiline':False]
['text':' (in all cases except the one where this command aborts the local participant), so','line_number':343,'multiline':False]
['text':' ensure waiting for the client's writeConcern of the decision.','line_number':344,'multiline':False]
['text':' The coordinator can throw TransactionCoordinatorCanceled if','line_number':352,'multiline':False]
['text':' cancelIfCommitNotYetStarted was called, which can happen in one of 3 cases:','line_number':353,'multiline':False]
['text':'','line_number':354,'multiline':False]
['text':'  1) The deadline to receive coordinateCommit passed','line_number':355,'multiline':False]
['text':'  2) Transaction with a newer txnNumber started on the session before','line_number':356,'multiline':False]
['text':'     coordinateCommit was received','line_number':357,'multiline':False]
['text':'  3) This is a sharded transaction, which used the optimized commit path and','line_number':358,'multiline':False]
['text':'     didn't require 2PC','line_number':359,'multiline':False]
['text':'','line_number':360,'multiline':False]
['text':' Even though only (3) requires recovering the commit decision from the local','line_number':361,'multiline':False]
['text':' participant, since these cases cannot be differentiated currently, we always','line_number':362,'multiline':False]
['text':' recover from the local participant.','line_number':363,'multiline':False]
['text':' No coordinator was found in memory. Recover the decision from the local participant.','line_number':378,'multiline':False]
['text':' autocommit ','line_number':393,'multiline':True]
['text':' startTransaction ','line_number':394,'multiline':True]
['text':' Wait for the participant to exit prepare.','line_number':405,'multiline':False]
['text':' Call beginOrContinue again in case the transaction number has changed.','line_number':412,'multiline':False]
['text':' autocommit ','line_number':415,'multiline':True]
['text':' startTransaction ','line_number':416,'multiline':True]
['text':' namespace','line_number':465,'multiline':False]
['text':' namespace mongo','line_number':466,'multiline':False]
