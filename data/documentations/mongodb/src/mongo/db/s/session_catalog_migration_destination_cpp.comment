['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 * Returns the command request to extract session information from the source shard.
 ','line_number':99,'multiline':True]
['text':'*
 * Determines whether the oplog entry has a link to either preImage/postImage and sets a new link
 * to lastResult.oplogTime. For example, if entry has link to preImageTs, this sets preImageTs to
 * lastResult.oplogTime.
 *
 * It is an error to have both preImage and postImage as well as not having them at all.
 ','line_number':109,'multiline':True]
['text':' PM-2213 introduces oplog entries that link to pre/post images in the','line_number':139,'multiline':False]
['text':' `config.image_collection` table. For chunk migration, we downconvert to the classic format','line_number':140,'multiline':False]
['text':' where the image is stored as a no-op in the oplog. A chunk migration source will always send','line_number':141,'multiline':False]
['text':' the appropriate no-op. This code on the destination patches up the CRUD operation oplog entry','line_number':142,'multiline':False]
['text':' to look like the classic format.','line_number':143,'multiline':False]
['text':'*
 * Parses the oplog into an oplog entry and makes sure that it contains the expected fields.
 ','line_number':169,'multiline':True]
['text':'*
 * Gets the next batch of oplog entries from the source shard.
 ','line_number':195,'multiline':True]
['text':' namespace','line_number':223,'multiline':False]
['text':' TODO: remove this after v3.7','line_number':254,'multiline':False]
['text':'','line_number':255,'multiline':False]
['text':' This means that the donor shard is running at an older version so it is safe to','line_number':256,'multiline':False]
['text':' just end this because there is no session information to transfer.','line_number':257,'multiline':False]
['text':'*
 * Outline:
 *
 * 1. Get oplog with session info from the source shard.
 * 2. For each oplog entry, convert to type 'n' if not yet type 'n' while preserving all info
 *    needed for retryable writes.
 * 3. Also update the sessionCatalog for every oplog entry.
 * 4. Once the source shard returned an empty oplog buffer, it means that this should enter
 *    ReadyToCommit state and wait for the commit signal (by calling finish()).
 * 5. Once finish() is called, keep on trying to get more oplog from the source shard until it
 *    returns an empty result again.
 * 6. Wait for writes to be committed to majority of the replica set.
 ','line_number':278,'multiline':True]
['text':' The migration is considered done only when it gets an empty result from','line_number':323,'multiline':False]
['text':' the source shard while this is in state committing. This is to make sure','line_number':324,'multiline':False]
['text':' that it doesn't miss any new oplog created between the time window where','line_number':325,'multiline':False]
['text':' this depleted the buffer from the source shard and receiving the commit','line_number':326,'multiline':False]
['text':' command.','line_number':327,'multiline':False]
['text':' Note: only transition to "ready to commit" if state is not error/force stop.','line_number':349,'multiline':False]
['text':' We depleted the buffer at least once, transition to ready for commit.','line_number':351,'multiline':False]
['text':' This means that the server has a newer txnNumber than the oplog being','line_number':383,'multiline':False]
['text':' migrated, so just skip it','line_number':384,'multiline':False]
['text':'*
 * Insert a new oplog entry by converting the oplogBSON into type 'n' oplog with the session
 * information. The new oplogEntry will also link to prePostImageTs if not null.
 ','line_number':406,'multiline':True]
['text':' Note: Oplog is already no-op type, no need to nest.','line_number':423,'multiline':False]
['text':' There are three types of type 'n' oplog format expected here:','line_number':424,'multiline':False]
['text':' (1) Oplog entries that has been transformed by a previous migration into a','line_number':425,'multiline':False]
['text':'     nested oplog. In this case, o field contains {$sessionMigrateInfo: 1}','line_number':426,'multiline':False]
['text':'     and o2 field contains the details of the original oplog.','line_number':427,'multiline':False]
['text':' (2) Oplog entries that contains the pre/post-image information of a','line_number':428,'multiline':False]
['text':'     findAndModify operation. In this case, o field contains the relevant info','line_number':429,'multiline':False]
['text':'     and o2 will be empty.','line_number':430,'multiline':False]
['text':' (3) Oplog entries that are a dead sentinel, which the donor sent over as the replacement','line_number':431,'multiline':False]
['text':'     for a prepare oplog entry or unprepared transaction commit oplog entry.','line_number':432,'multiline':False]
['text':' (4) Oplog entries that are a WouldChangeOwningShard sentinel entry, used for making','line_number':433,'multiline':False]
['text':'     retries of a WouldChangeOwningShard update or findAndModify fail with','line_number':434,'multiline':False]
['text':'     IncompleteTransactionHistory. In this case, the o field is non-empty and the o2','line_number':435,'multiline':False]
['text':'     field is an empty BSONObj.','line_number':436,'multiline':False]
['text':' TODO: strip redundant info?','line_number':456,'multiline':False]
['text':' Irrespective of whether or not the oplog gets logged, we want to update the','line_number':473,'multiline':False]
['text':' entriesMigrated counter to signal that we have succesfully recieved the oplog','line_number':474,'multiline':False]
['text':' from the source and have processed it.','line_number':475,'multiline':False]
['text':' autocommit ','line_number':486,'multiline':True]
['text':' startTransaction ','line_number':487,'multiline':True]
['text':' Skip the incoming statement because it has already been logged locally','line_number':489,'multiline':False]
['text':' If the transaction chain is incomplete because oplog was truncated, just ignore the','line_number':493,'multiline':False]
['text':' incoming oplog and don't attempt to 'patch up' the missing pieces.','line_number':494,'multiline':False]
['text':' No need to log entries for transactions whose history has been truncated','line_number':500,'multiline':False]
['text':' Do not overwrite the "o" field if this is a pre/post image oplog entry. Also do not','line_number':509,'multiline':False]
['text':' overwrite it if this is a WouldChangeOwningShard sentinel oplog entry since it contains','line_number':510,'multiline':False]
['text':' a special BSONObj used for making retries fail with an IncompleteTransactionHistory','line_number':511,'multiline':False]
['text':' error.','line_number':512,'multiline':False]
['text':' Reset OpTime so logOp() can assign a new one.','line_number':520,'multiline':False]
['text':' Need to take global lock here so repl::logOp will not unlock it and trigger the','line_number':525,'multiline':False]
['text':' invariant that disallows unlocking global lock while inside a WUOW. Take the','line_number':526,'multiline':False]
['text':' transaction table db lock to ensure the same lock ordering with normal replicated','line_number':527,'multiline':False]
['text':' updates to the table.','line_number':528,'multiline':False]
['text':' Do not call onWriteOpCompletedO nPrimary if we inserted a pre/post image, because the','line_number':541,'multiline':False]
['text':' next oplog will contain the real operation','line_number':542,'multiline':False]
['text':' Use the same wallTime as oplog since SessionUpdateTracker looks at the oplog','line_number':549,'multiline':False]
['text':' entry wallTime when replicating.','line_number':550,'multiline':False]
['text':' We do not migrate transaction oplog entries so don't set the txn state.','line_number':557,'multiline':False]
['text':' namespace mongo','line_number':597,'multiline':False]
