['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 * Does a linear pass over the information cached in the specified chunk manager and extracts chunk
 * distribution and chunk placement information which is needed by the balancer policy.
 ','line_number':108,'multiline':True]
['text':' Makes sure there is an entry in shardToChunksMap for every shard, so empty shards will also','line_number':119,'multiline':False]
['text':' be accounted for','line_number':120,'multiline':False]
['text':' Cache the collection zones','line_number':141,'multiline':False]
['text':' Map to be returned, incrementally populated with the collected statistics','line_number':159,'multiline':False]
['text':' throwOnError ','line_number':183,'multiline':True]
['text':' Handle `removeShard`: skip shards removed during a balancing round','line_number':205,'multiline':False]
['text':'*
 * Helper class used to accumulate the split points for the same chunk together so they can be
 * submitted to the shard as a single call versus multiple. This is necessary in order to avoid
 * refreshing the chunk metadata after every single split point (if done one by one), because
 * splitting a chunk does not yield the same chunk anymore.
 ','line_number':224,'multiline':True]
['text':'*
     * Adds the specified split point to the chunk. The split points must always be within the
     * boundaries of the chunk and must come in increasing order.
     ','line_number':241,'multiline':True]
['text':' Split points must come in order','line_number':259,'multiline':False]
['text':'*
     * May be called only once for the lifetime of the buffer. Moves the contents of the buffer into
     * a vector of split infos to be passed to the split call.
     ','line_number':264,'multiline':True]
['text':' Namespace and expected collection placement version','line_number':278,'multiline':False]
['text':' Chunk min key and split vector associated with that chunk','line_number':282,'multiline':False]
['text':'*
 * Populates splitCandidates with chunk and splitPoint pairs for chunks that violate zone
 * range boundaries.
 ','line_number':286,'multiline':True]
['text':' For each zone range, find chunks that need to be split.','line_number':295,'multiline':False]
['text':' The global max key can never fall in the middle of a chunk.','line_number':306,'multiline':False]
['text':' We need to check that both the chunk's minKey does not match the zone's max and also that','line_number':312,'multiline':False]
['text':' the max is not equal, which would only happen in the case of the zone ending in MaxKey.','line_number':313,'multiline':False]
['text':' namespace','line_number':321,'multiline':False]
['text':' Namespace got dropped before we managed to get to it, so just skip it','line_number':353,'multiline':False]
['text':' Lambda function used to get a CollectionType leveraging the `collections` vector','line_number':422,'multiline':False]
['text':' The `collections` vector must be sorted by nss when it is called','line_number':423,'multiline':False]
['text':' Using a lower_bound to perform a binary search on the `collections` vector','line_number':426,'multiline':False]
['text':' Lambda function to check if a collection is explicitly disabled for balancing','line_number':441,'multiline':False]
['text':' Lambda function to select migrate candidates from a batch of collections','line_number':458,'multiline':False]
['text':' Namespace got dropped before we managed to get to it, so just skip it','line_number':475,'multiline':False]
['text':' To assess if a collection has chunks to migrate, we need to ask shards the size of that','line_number':500,'multiline':False]
['text':' collection. For efficiency, we ask for a batch of collections per every shard request instead','line_number':501,'multiline':False]
['text':' of a single request per collection','line_number':502,'multiline':False]
['text':' The first batch is partially filled by the imbalanced cached collections','line_number':505,'multiline':False]
['text':' The collection was dropped or is no longer enabled for balancing.','line_number':512,'multiline':False]
['text':' Remove the collection from the whole list of collections to avoid processing it twice','line_number':520,'multiline':False]
['text':' Iterate all the remaining collections randomly','line_number':524,'multiline':False]
['text':' Used to check locally if the collection exists, it should trow NamespaceNotFound if it','line_number':571,'multiline':False]
['text':' doesn't.','line_number':572,'multiline':False]
['text':' Accumulate split points for the same chunk together','line_number':644,'multiline':False]
['text':' The global max key can never fall in the middle of a chunk','line_number':698,'multiline':False]
['text':' We need to check that both the chunk's minKey does not match the zone's max and also that','line_number':704,'multiline':False]
['text':' the max is not equal, which would only happen in the case of the zone ending in MaxKey.','line_number':705,'multiline':False]
['text':' namespace mongo','line_number':726,'multiline':False]
