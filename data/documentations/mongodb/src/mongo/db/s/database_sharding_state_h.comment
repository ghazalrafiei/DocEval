['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 * Each shard node process (primary or secondary) has one instance of this object for each database
 * whose primary is placed on, or is currently being movePrimary'd to, the current shard. It sits on
 * the second level of the hierarchy of the Shard Role runtime-authoritative caches (along with
 * CollectionShardingState) and contains sharding-related information about the database, such as
 * its database version.
 *
 * SYNCHRONISATION: Requires some combination of the DB lock and the DSS lock, but different methods
 * have different requirements though, so be sure to check the function-level comments for details.
 ','line_number':49,'multiline':True]
['text':'*
     * Obtains the sharding state for the specified database along with a resource lock in exclusive
     * mode, which will be held until the object goes out of scope.
     ','line_number':67,'multiline':True]
['text':'*
     * Obtains the sharding state for the specified database along with a resource lock in shared
     * mode, which will be held until the object goes out of scope.
     ','line_number':90,'multiline':True]
['text':'*
     * Returns the names of the databases that have a DatabaseShardingState.
     ','line_number':122,'multiline':True]
['text':'*
     * Checks that the cached database version matches the one attached to the operation, which
     * means that the operation is routed to the right shard (database owner).
     *
     * Throws `StaleDbRoutingVersion` exception when the critical section is taken, there is no
     * cached database version, or the cached database version does not match the one sent by the
     * client.
     ','line_number':127,'multiline':True]
['text':'*
     * Checks that the current shard server is the primary for the given database, throwing
     * `IllegalOperation` if not.
     ','line_number':139,'multiline':True]
['text':'*
     * Returns the name of the database related to the current sharding state.
     ','line_number':145,'multiline':True]
['text':'*
     * Sets this node's cached database info.
     *
     * The caller must hold the database lock in MODE_IX.
     ','line_number':152,'multiline':True]
['text':'*
     * Resets this node's cached database info.
     *
     * NOTE: Only the thread that refreshes the database metadata (which calls the function
     * `onDbVersionMismatch`) actually needs to change the default initialization of
     * `cancelOngoingRefresh`. This parameter must be ignored in any other case.
     *
     * The caller must hold the database lock in MODE_IX.
     ','line_number':159,'multiline':True]
['text':'*
     * Returns this node's cached  database version if the database info is cached, otherwise
     * it returns `boost::none`.
     ','line_number':170,'multiline':True]
['text':'*
     * Methods to control the databases's critical section. Must be called with the database X lock
     * held.
     ','line_number':176,'multiline':True]
['text':'*
     * Returns `true` whether a `movePrimary` operation on this database is in progress, `false`
     * otherwise.
     ','line_number':193,'multiline':True]
['text':'*
     * Declares that a `movePrimary` operation on this database is in progress. This causes write
     * operations on this database to fail with the `MovePrimaryInProgress` error.
     *
     * Must be called with the database locked in X mode.
     ','line_number':201,'multiline':True]
['text':'*
     * Declares that the `movePrimary` operation on this database is over. This re-enables write
     * operations on this database.
     *
     * Must be called with the database locked in IX mode.
     ','line_number':209,'multiline':True]
['text':'*
     * Sets the database metadata refresh future for other threads to wait on it.
     ','line_number':217,'multiline':True]
['text':'*
     * If there is an ongoing database metadata refresh, returns the future to wait on it, otherwise
     * `boost::none`.
     ','line_number':223,'multiline':True]
['text':'*
     * Resets the database metadata refresh future to `boost::none`.
     ','line_number':229,'multiline':True]
['text':' Tracks the ongoing database metadata refresh.','line_number':239,'multiline':False]
['text':' Cancellation source to cancel the ongoing database metadata refresh.','line_number':242,'multiline':False]
['text':'*
     * Cancel any ongoing database metadata refresh.
     ','line_number':246,'multiline':True]
['text':' This node's cached database info.','line_number':253,'multiline':False]
['text':' Modifying the state below requires holding the DBLock in X mode; holding the DBLock in any','line_number':256,'multiline':False]
['text':' mode is acceptable for reading it. (Note: accessing this class at all requires holding the','line_number':257,'multiline':False]
['text':' DBLock in some mode).','line_number':258,'multiline':False]
['text':' Tracks the movePrimary critical section state for this collection.','line_number':260,'multiline':False]
['text':' Is `true` when this database is serving as a source shard for a movePrimary, `false`','line_number':263,'multiline':False]
['text':' otherwise.','line_number':264,'multiline':False]
['text':' Tracks the ongoing database metadata refresh. Possibly keeps a future for other threads to','line_number':267,'multiline':False]
['text':' wait on it, and a cancellation source to cancel the ongoing database metadata refresh.','line_number':268,'multiline':False]
['text':'*
     * If there is cached database info, returns `true` if the current shard is the primary shard
     * for the database of the current sharding state. If there is no cached database info, returns
     * `boost::none`.
     *
     * This method is unsafe to use since it doesn't honor the critical section.
     ','line_number':271,'multiline':True]
['text':' Permit the `getDatabaseVersion` command to access the private method `_isPrimaryShardForDb`.','line_number':280,'multiline':False]
['text':' namespace mongo','line_number':284,'multiline':False]
