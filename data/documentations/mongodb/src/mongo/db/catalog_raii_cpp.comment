['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 * Performs some sanity checks on the collection and database.
 ','line_number':68,'multiline':True]
['text':' In most cases we expect modifications for system.views to upgrade MODE_IX to MODE_X before','line_number':88,'multiline':False]
['text':' taking the lock. One exception is a query by UUID of system.views in a transaction. Usual','line_number':89,'multiline':False]
['text':' queries of system.views (by name, not UUID) within a transaction are rejected. However, if','line_number':90,'multiline':False]
['text':' the query is by UUID we can't determine whether the namespace is actually system.views until','line_number':91,'multiline':False]
['text':' we take the lock here. So we have this one last assertion.','line_number':92,'multiline':False]
['text':' Verify that we are using the latest instance if we intend to perform writes.','line_number':101,'multiline':False]
['text':' namespace','line_number':125,'multiline':False]
['text':' The 'primary' database must be version checked for sharding.','line_number':149,'multiline':False]
['text':' TODO: Improve comment','line_number':164,'multiline':False]
['text':'','line_number':165,'multiline':False]
['text':' If the 'opCtx' is in a multi document transaction, pure reads on the','line_number':166,'multiline':False]
['text':' transaction session collections would acquire the global lock in the IX','line_number':167,'multiline':False]
['text':' mode and acquire a flow control ticket.','line_number':168,'multiline':False]
['text':' Acquire the global/RSTL and all the database locks (may or may not be multiple','line_number':185,'multiline':False]
['text':' databases).','line_number':186,'multiline':False]
['text':' tenantLockMode ','line_number':198,'multiline':True]
['text':' We cannot be sure that the namespace we lock matches the UUID given because we resolve','line_number':244,'multiline':False]
['text':' the namespace from the UUID without the safety of a lock. Therefore, we will continue','line_number':245,'multiline':False]
['text':' to re-lock until the namespace we resolve from the UUID before and after taking the','line_number':246,'multiline':False]
['text':' lock is the same.','line_number':247,'multiline':False]
['text':'verifyWriteEligible=','line_number':265,'multiline':True]
['text':'verifyWriteEligible=','line_number':272,'multiline':True]
['text':' Out of an abundance of caution, force operations to acquire new snapshots after','line_number':286,'multiline':False]
['text':' acquiring exclusive collection locks. Operations that hold MODE_X locks make an','line_number':287,'multiline':False]
['text':' assumption that all writes are visible in their snapshot and no new writes will commit.','line_number':288,'multiline':False]
['text':' This may not be the case if an operation already has a snapshot open before acquiring an','line_number':289,'multiline':False]
['text':' exclusive lock.','line_number':290,'multiline':False]
['text':' Acquire the collection locks. If there's only one lock, then it can simply be taken. If','line_number':297,'multiline':False]
['text':' there are many, however, the locks must be taken in _ascending_ ResourceId order to avoid','line_number':298,'multiline':False]
['text':' deadlocks across threads.','line_number':299,'multiline':False]
['text':' Wait for a configured amount of time after acquiring locks if the failpoint is enabled','line_number':317,'multiline':False]
['text':' Check that the collections are all safe to use.','line_number':324,'multiline':False]
['text':' It is possible for an operation to have created the database and collection after this','line_number':330,'multiline':False]
['text':' AutoGetCollection initialized its AutoGetDb, but before it has performed the collection','line_number':331,'multiline':False]
['text':' lookup. Thus, it is possible for AutoGetDb to hold nullptr while _coll is a valid','line_number':332,'multiline':False]
['text':' pointer. This would be unexpected, as for a collection to exist the database must exist.','line_number':333,'multiline':False]
['text':' We ensure the database reference is valid by refreshing it.','line_number':334,'multiline':False]
['text':' Fetch and store the sharding collection description data needed for use during the','line_number':356,'multiline':False]
['text':' operation. The shardVersion will be checked later if the shard filtering metadata is','line_number':357,'multiline':False]
['text':' fetched, ensuring both that the collection description info used here and the routing','line_number':358,'multiline':False]
['text':' table are consistent with the read request's shardVersion.','line_number':359,'multiline':False]
['text':'','line_number':360,'multiline':False]
['text':' Note: sharding versioning for an operation has no concept of multiple collections.','line_number':361,'multiline':False]
['text':' TODO SERVER-79296 remove call to isSharded','line_number':366,'multiline':False]
['text':' We only need to look up a view if an expected collection UUID was not provided. If this','line_number':380,'multiline':False]
['text':' namespace were a view, the collection UUID mismatch check would have failed above.','line_number':381,'multiline':False]
['text':' wantedVersion ','line_number':396,'multiline':True]
['text':' There is neither a collection nor a view for the namespace, so if we reached to this point','line_number':406,'multiline':False]
['text':' there are the following possibilities depending on the received shard version:','line_number':407,'multiline':False]
['text':'   1. ShardVersion::UNSHARDED: The request comes from a router and the operation entails the','line_number':408,'multiline':False]
['text':'      implicit creation of an unsharded collection. We can continue.','line_number':409,'multiline':False]
['text':'   2. ChunkVersion::IGNORED: The request comes from a router that broadcasted the same to all','line_number':410,'multiline':False]
['text':'      shards, but this shard doesn't own any chunks for the collection. We can continue.','line_number':411,'multiline':False]
['text':'   3. boost::none: The request comes from client directly connected to the shard. We can','line_number':412,'multiline':False]
['text':'      continue.','line_number':413,'multiline':False]
['text':'   4. Any other value: The request comes from a stale router on a collection or a view which','line_number':414,'multiline':False]
['text':'      was deleted time ago (or the user manually deleted it from from underneath of sharding).','line_number':415,'multiline':False]
['text':'      We return a stale config error so that the router recovers.','line_number':416,'multiline':False]
['text':' wantedVersion ','line_number':420,'multiline':True]
['text':' Acquire writable instance if not already available','line_number':434,'multiline':False]
['text':' Makes the internal CollectionPtr Yieldable and resets the writable Collection when','line_number':438,'multiline':False]
['text':' the write unit of work finishes so we re-fetches and re-clones the Collection if a','line_number':439,'multiline':False]
['text':' new write unit of work is opened.','line_number':440,'multiline':False]
['text':' Set to writable collection. We are no longer yieldable.','line_number':453,'multiline':False]
['text':' Notify shared state that this instance is destroyed','line_number':532,'multiline':False]
['text':' Acquire writable instance lazily if not already available','line_number':539,'multiline':False]
['text':' If we are using our stored Collection then we are not managed by an AutoGetCollection','line_number':543,'multiline':False]
['text':' and we need to manage lifetime here.','line_number':544,'multiline':False]
['text':' Resets the writable Collection when the write unit of work finishes so we re-fetch','line_number':550,'multiline':False]
['text':' and re-clone the Collection if a new write unit of work is opened. Holds the back','line_number':551,'multiline':False]
['text':' pointer to the CollectionWriter explicitly so we can detect if the instance is','line_number':552,'multiline':False]
['text':' already destroyed.','line_number':553,'multiline':False]
['text':' Make the stored collection yieldable again as we now operate with the','line_number':559,'multiline':False]
['text':' same instance as is in the catalog.','line_number':560,'multiline':False]
['text':' Restore stored collection to its previous state. The rollback','line_number':570,'multiline':False]
['text':' instance is already yieldable.','line_number':571,'multiline':False]
['text':' Abandoning the snapshot is unsafe when the snapshot is managed by a lock free read','line_number':592,'multiline':False]
['text':' helper.','line_number':593,'multiline':False]
['text':' Abandoning the snapshot is unsafe when the snapshot is managed by a lock free read','line_number':605,'multiline':False]
['text':' helper.','line_number':606,'multiline':False]
['text':' Invariant that global lock is already held for kLogOp mode.','line_number':620,'multiline':False]
['text':' Treat this as a regular AutoGetCollection.','line_number':637,'multiline':False]
['text':' When writing to the change collection as part of normal operation, we avoid taking any new','line_number':646,'multiline':False]
['text':' locks. The caller must already have the tenant lock that protects the tenant specific change','line_number':647,'multiline':False]
['text':' stream collection from being dropped. That's sufficient for acquiring a raw collection','line_number':648,'multiline':False]
['text':' pointer.','line_number':649,'multiline':False]
['text':' namespace mongo','line_number':672,'multiline':False]
