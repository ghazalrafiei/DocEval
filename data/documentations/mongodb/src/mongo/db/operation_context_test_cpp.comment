['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' IWYU pragma: no_include "cxxabi.h"','line_number':31,'multiline':False]
['text':' IWYU pragma: keep','line_number':62,'multiline':False]
['text':' use member op->','line_number':192,'multiline':False]
['text':' use conversion to OC*','line_number':193,'multiline':False]
['text':' NOLINT(bugprone-use-after-move)','line_number':223,'multiline':False]
['text':' Should not be canceled yet.','line_number':282,'multiline':False]
['text':' Now should be canceled.','line_number':287,'multiline':False]
['text':' 1ms before relative deadline reports no interrupt','line_number':325,'multiline':False]
['text':' Exactly at deadline reports no interrupt, because setDeadlineAfterNowBy adds one clock','line_number':329,'multiline':False]
['text':' precision unit to the deadline, to ensure that the deadline does not expire in less than the','line_number':330,'multiline':False]
['text':' requested amount of time.','line_number':331,'multiline':False]
['text':' Since the mock clock's precision is 1ms, at test start + 1001 ms, we expect','line_number':335,'multiline':False]
['text':' checkForInterruptNoAssert to return ExceededTimeLimit.','line_number':336,'multiline':False]
['text':' Also at times greater than start + 1001ms, we expect checkForInterruptNoAssert to keep','line_number':340,'multiline':False]
['text':' returning ExceededTimeLimit.','line_number':341,'multiline':False]
['text':' Should not be canceled yet.','line_number':353,'multiline':False]
['text':' Advance past the timeout.','line_number':356,'multiline':False]
['text':' This is required for the OperationContext to realize that the timeout has passed and mark','line_number':359,'multiline':False]
['text':' itself killed, which is what triggers cancellation.','line_number':360,'multiline':False]
['text':' Should be canceled now.','line_number':363,'multiline':False]
['text':' Should not be canceled yet.','line_number':375,'multiline':False]
['text':' Advance past the timeout.','line_number':378,'multiline':False]
['text':' Chain a callback to the token. This will mean that calling cancel() on the CancellationSource','line_number':381,'multiline':False]
['text':' will eventually have to acquire a mutex when fulfilling its SharedPromie.','line_number':382,'multiline':False]
['text':' Make sure this does not deadlock. (Because in a previous implementation, it did.)','line_number':385,'multiline':False]
['text':' Should be canceled now.','line_number':388,'multiline':False]
['text':' Nanoseconds::max() is less than Microseconds::max(), so it is possible to set','line_number':421,'multiline':False]
['text':' a deadline of that duration.','line_number':422,'multiline':False]
['text':' Now we know that the waiter task must own the mutex, because it does not signal the','line_number':783,'multiline':False]
['text':' barrier until it does.','line_number':784,'multiline':False]
['text':' Assuming that opCtx has not already been interrupted and that maxTime and until are','line_number':787,'multiline':False]
['text':' unexpired, we know that the waiter must be blocked in the condition variable, because','line_number':788,'multiline':False]
['text':' it held the mutex before we tried to acquire it, and only releases it on condition','line_number':789,'multiline':False]
['text':' variable wait.','line_number':790,'multiline':False]
['text':' `waitForConditionOrInterruptUntil` can have four outcomes:','line_number':1021,'multiline':False]
['text':'','line_number':1022,'multiline':False]
['text':' 1) The condition is satisfied before any timeouts.','line_number':1023,'multiline':False]
['text':' 2) The explicit `deadline` function argument is triggered.','line_number':1024,'multiline':False]
['text':' 3) The operation context implicitly times out, or is interrupted from a killOp command or','line_number':1025,'multiline':False]
['text':'    shutdown, etc.','line_number':1026,'multiline':False]
['text':' 4) The deadline supplied may overflow the conversion to the system clock's resolution, from','line_number':1027,'multiline':False]
['text':'    milliseconds to nanoseconds. This will not cancel the opCtx.','line_number':1028,'multiline':False]
['text':'','line_number':1029,'multiline':False]
['text':' Case (1) must return true.','line_number':1030,'multiline':False]
['text':' Case (2) must return false.','line_number':1031,'multiline':False]
['text':' Case (3) must throw a MaxTimeMSExpired DBException.','line_number':1032,'multiline':False]
['text':' Case (4) must throw a DurationOverflow DBException.','line_number':1033,'multiline':False]
['text':'','line_number':1034,'multiline':False]
['text':' Case (1) is the hardest to test. The condition variable must be notified by a second thread','line_number':1035,'multiline':False]
['text':' when the client is waiting on it. Case (1) is also the least in need of having the API','line_number':1036,'multiline':False]
['text':' tested, thus it's omitted from being tested here.','line_number':1037,'multiline':False]
['text':' Case (2). Expect a Status::OK with a cv_status::timeout.','line_number':1045,'multiline':False]
['text':' Case (3). Expect an error of `MaxTimeMSExpired`.','line_number':1051,'multiline':False]
['text':' Case (4). Expect an error of 'DurationOverflow'.','line_number':1060,'multiline':False]
['text':' Case (1) must return false (immediately after initialization)','line_number':1075,'multiline':False]
['text':' Case (2) must return true while waiting for the condition','line_number':1078,'multiline':False]
['text':' We use a separate client thread to generate CurrentOp reports in presence and absence','line_number':1146,'multiline':False]
['text':' of an `opCtx`. This is because `CurOp::reportCurrentOpForClient()` accepts an `opCtx`','line_number':1147,'multiline':False]
['text':' as input and requires it to be present throughout its execution.','line_number':1148,'multiline':False]
['text':' Generate report in absence of any opCtx','line_number':1154,'multiline':False]
['text':' Generate report in presence of a killed opCtx','line_number':1161,'multiline':False]
['text':' namespace','line_number':1183,'multiline':False]
['text':' namespace mongo','line_number':1185,'multiline':False]
