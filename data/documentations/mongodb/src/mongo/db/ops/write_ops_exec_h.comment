['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 * The result of performing a single write, possibly within a batch.
 ','line_number':73,'multiline':True]
['text':'*
     * Maps 1-to-1 to single ops in request. May be shorter than input if there are errors.
     ','line_number':77,'multiline':True]
['text':' Stores the statement ids for the ops that had already been executed, thus were not executed','line_number':82,'multiline':False]
['text':' by this write.','line_number':83,'multiline':False]
['text':' In case of an error, whether the operation can continue.','line_number':86,'multiline':False]
['text':'*
 * Returns true if the batch can continue, false to stop the batch, or throws to fail the command.
 ','line_number':90,'multiline':True]
['text':'*
 * Returns true if caller should try to insert more documents. Does nothing else if batch is empty.
 ','line_number':105,'multiline':True]
['text':'*
 * If the operation succeeded, then returns either a document to return to the client, or
 * boost::none if no matching document to update/remove was found. If the operation failed, throws.
 * Accepts the name of the operation (e.g. "delete", "update", "findAndModify") for use in the
 * exception and log messages.
 ','line_number':117,'multiline':True]
['text':'*
 * Executes an update, supports returning a pre/post image. The returned document is placed into
 * docFound (if applicable). Should be called in a writeConflictRetry loop.
 ','line_number':128,'multiline':True]
['text':'*
 * Executes a delete, supports returning the deleted document. the returned document is placed into
 * docFound (if applicable). Should be called in a writeConflictRetry loop.
 ','line_number':142,'multiline':True]
['text':'*
 * Generates a WriteError for a given Status.
 ','line_number':154,'multiline':True]
['text':'*
 * Updates the retryable write stats if the write op contains retry.
 ','line_number':162,'multiline':True]
['text':'*
 * Marks the op as complete, log it and profile if appropriate.
 ','line_number':167,'multiline':True]
['text':'*
 * Performs a batch of inserts, updates, or deletes.
 *
 * These functions handle all of the work of doing the writes, including locking, incrementing
 * counters, managing CurOp, and of course actually doing the write. Waiting for the writeConcern is
 * *not* handled by these functions and is expected to be done by the caller if needed.
 *
 * NotPrimaryErrorTracker is updated for failures of individual writes, but not for batch errors
 * reported by an exception being thrown from these functions. Callers are responsible for managing
 * NotPrimaryErrorTracker in that case. This should generally be combined with
 * NotPrimaryErrorTracker handling from parse failures.
 *
 * 'type' indicates whether the operation was induced by a standard write, a chunk migration, or a
 * time-series insert.
 *
 * Note: performInserts() gets called for both user and internal (like tenant collection cloner,
 * and initial sync/tenant migration oplog buffer) inserts.
 ','line_number':172,'multiline':True]
['text':'*
 * Runs a time-series update command in a transaction and collects the write result from each
 * statement.
 *
 * Assumes the update command is a retryable write and targeted on the time-series view namespace.
 ','line_number':204,'multiline':True]
['text':'*
 * Populate 'opDebug' with stats describing the execution of an update operation. Illegal to call
 * with a null OpDebug pointer.
 ','line_number':216,'multiline':True]
['text':'*
 * Returns true if an update failure due to a given DuplicateKey error is eligible for retry.
 ','line_number':222,'multiline':True]
['text':'*
 * Returns an InsertCommandReply if the timeseries writes succeeded.
 ','line_number':229,'multiline':True]
['text':'
 * Populates 'result' with the explain information for the write requests.
 ','line_number':238,'multiline':True]
['text':' namespace write_ops_exec','line_number':257,'multiline':False]
['text':' namespace mongo','line_number':258,'multiline':False]
