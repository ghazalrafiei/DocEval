['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 * Note: this class is the base class for ParsedUpdate and ParsedUpdateForMongos. Their only
 * difference is that ParsedUpdateForMongos uses the ExtensionsCallbackNoop and on the other hand,
 * ParsedUpdate uses ExtensionsCallbackReal. The reason for this is that ExtensionsCallbackReal is
 * available only on the mongod. This difference does not need to be exposed through the interface
 * and can be hidden in the implementation.
 *
 ','line_number':67,'multiline':True]
['text':'*
     * Constructs a parsed update.
     *
     * The objects pointed to by "request" must stay in scope for the life of the constructed
     * ParsedUpdate.
     ','line_number':80,'multiline':True]
['text':'*
     * Parses the update request to a canonical query and an update driver. On success, the
     * parsed update can be used to create a PlanExecutor for this update.
     ','line_number':93,'multiline':True]
['text':'*
     * As an optimization, we do not create a canonical query if the predicate is a simple
     * _id equality. This method can be used to force full parsing to a canonical query,
     * as a fallback if the idhack path is not available (e.g. no _id index).
     ','line_number':99,'multiline':True]
['text':'*
     * Get the raw request.
     ','line_number':106,'multiline':True]
['text':'*
     * Get a pointer to the update driver, the abstraction which both parses the update and
     * is capable of applying mods / computing damages.
     ','line_number':111,'multiline':True]
['text':'*
     * Get the YieldPolicy, adjusted for GodMode.
     ','line_number':117,'multiline':True]
['text':'*
     * As an optimization, we don't create a canonical query for updates with simple _id
     * queries. Use this method to determine whether or not we actually parsed the query.
     ','line_number':122,'multiline':True]
['text':'*
     * Returns a const pointer to the canonical query. Requires that hasParsedQuery() is true.
     ','line_number':128,'multiline':True]
['text':'*
     * Releases ownership of the canonical query to the caller.
     ','line_number':136,'multiline':True]
['text':'*
     * Never returns nullptr.
     ','line_number':141,'multiline':True]
['text':'*
     * Releases the ownership of the residual MatchExpression.
     *
     * Note: see _timeseriesUpdateQueryExprs._bucketMatchExpr for more details.
     ','line_number':148,'multiline':True]
['text':'*
     * Releases the ownership of the original MatchExpression.
     ','line_number':158,'multiline':True]
['text':'*
     * Returns true when we are performing multi updates using a residual predicate on a time-series
     * collection or when performing singleton updates on a time-series collection.
     ','line_number':165,'multiline':True]
['text':'*
     * Parses the query portion of the update request.
     ','line_number':176,'multiline':True]
['text':'*
     * Parses the update-descriptor portion of the update request.
     ','line_number':181,'multiline':True]
['text':'*
     * Handles splitting and/or translating the timeseries query predicate, if applicable. Must be
     * called before parsing the query and update.
     ','line_number':186,'multiline':True]
['text':' Unowned pointer to the transactional context.','line_number':192,'multiline':False]
['text':' Unowned pointer to the request object to process.','line_number':195,'multiline':False]
['text':' The array filters for the parsed update. Owned here.','line_number':198,'multiline':False]
['text':' Driver for processing updates on matched documents.','line_number':203,'multiline':False]
['text':' Requested update modifications on matched documents.','line_number':206,'multiline':False]
['text':' Parsed query object, or NULL if the query proves to be an id hack query.','line_number':209,'multiline':False]
['text':' Reference to an extensions callback used when parsing to a canonical query.','line_number':212,'multiline':False]
['text':' Reference to the collection this update is being performed on.','line_number':215,'multiline':False]
['text':' Contains the residual expression and the bucket-level expression that should be pushed down','line_number':218,'multiline':False]
['text':' to the bucket collection.','line_number':219,'multiline':False]
['text':' The original, complete and untranslated write query expression.','line_number':222,'multiline':False]
['text':' namespace impl','line_number':234,'multiline':False]
['text':'*
 * This class takes a pointer to an UpdateRequest, and converts that request into a parsed form
 * via the parseRequest() method. A ParsedUpdate can then be used to get information about the
 * update, or to retrieve an upsert document.
 *
 * No locks need to be held during parsing.
 *
 * The query part of the update is parsed to a CanonicalQuery, and the update part is parsed
 * using the UpdateDriver.
 *
 * ParsedUpdateForMongos is a ParsedUpdate that can be used in mongos.
 ','line_number':236,'multiline':True]
['text':'*
 * This class takes a pointer to an UpdateRequest, and converts that request into a parsed form
 * via the parseRequest() method. A ParsedUpdate can then be used to retrieve a PlanExecutor
 * capable of executing the update.
 *
 * It is invalid to request that the UpdateStage return the prior or newly-updated version of a
 * document during a multi-update. It is also invalid to request that a ProjectionStage be
 * applied to the UpdateStage if the UpdateStage would not return any document.
 *
 * The query part of the update is parsed to a CanonicalQuery, and the update part is parsed
 * using the UpdateDriver.
 *
 * ParsedUpdate is a ParsedUpdate that can be used in mongod.
 ','line_number':257,'multiline':True]
['text':' namespace mongo','line_number':280,'multiline':False]
