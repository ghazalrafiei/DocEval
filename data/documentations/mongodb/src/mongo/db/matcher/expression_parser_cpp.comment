['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' IWYU pragma: keep','line_number':52,'multiline':False]
['text':'*
 * Returns true if subtree contains MatchExpression 'type'.
 ','line_number':108,'multiline':True]
['text':' TODO SERVER-49852: Currently SBE cannot handle match expressions with numeric path','line_number':123,'multiline':False]
['text':' components due to some of the complexity around how arrays are handled.','line_number':124,'multiline':False]
['text':' For some match expressions trees, there could be a path associated with a node deeper in','line_number':133,'multiline':False]
['text':' the tree. This is true in particular for negations. For example, {a: {$not: {$gt: 0}}}','line_number':134,'multiline':False]
['text':' will be converted to a NOT => GT tree, but it is the GT node that carries the path,','line_number':135,'multiline':False]
['text':' rather than the NOT node. We recursively process these nodes here.','line_number':136,'multiline':False]
['text':' namespace','line_number':149,'multiline':False]
['text':'*
 * 'DocumentParseLevel' refers to the current position of the parser as it descends a
 *  MatchExpression tree.
 ','line_number':160,'multiline':True]
['text':' Indicates that the parser is looking at the root level of the BSON object containing the','line_number':165,'multiline':False]
['text':' user's query predicate.','line_number':166,'multiline':False]
['text':' Indicates that match expression nodes in this position will match against the complete','line_number':168,'multiline':False]
['text':' user document, as opposed to matching against a nested document or a subdocument inside','line_number':169,'multiline':False]
['text':' an array.','line_number':170,'multiline':False]
['text':' Indicates that match expression nodes in this position will match against a nested','line_number':172,'multiline':False]
['text':' document or a subdocument inside an array.','line_number':173,'multiline':False]
['text':' Forward declarations.','line_number':179,'multiline':False]
['text':' createAnnotation() helper functions. If the expCtx indicates we're parsing a collection','line_number':197,'multiline':False]
['text':' validator then these functions return an annotation, otherwise these functions are a no-op','line_number':198,'multiline':False]
['text':' and return nullptr.','line_number':199,'multiline':False]
['text':' Parse functions.','line_number':265,'multiline':False]
['text':' Non-equality comparison match expressions cannot have a regular expression as the argument.','line_number':287,'multiline':False]
['text':' (e.g. {a: {$gt: /b/}} is illegal).','line_number':288,'multiline':False]
['text':'*
 * DBRef fields are ordered in the collection. In the query, we consider an embedded object a query
 * on a DBRef as long as it contains $ref and $id.
 * Required fields: $ref and $id (if incomplete DBRefs are not allowed).
 *
 * If incomplete DBRefs are allowed, we accept the BSON object as long as it contains $ref, $id or
 * $db.
 *
 * Field names are checked but not field types.
 *
 * { $ref: "s", $id: "x" } = true
 * { $ref : "s" } = true (if incomplete DBRef is allowed)
 * { $id : "x" } = true (if incomplete DBRef is allowed)
 * { $db : "x" } = true (if incomplete DBRef is allowed)
 ','line_number':299,'multiline':True]
['text':' $ref','line_number':323,'multiline':False]
['text':' $id','line_number':327,'multiline':False]
['text':' $db','line_number':331,'multiline':False]
['text':'*
 * 5 = false
 * { a : 5 } = false
 * { $lt : 5 } = true
 * { $ref: "s", $id: "x" } = false
 * { $ref: "s", $id: "x", $db: "mydb" } = false
 * { $ref : "s" } = false (if incomplete DBRef is allowed)
 * { $id : "x" } = false (if incomplete DBRef is allowed)
 * { $db : "mydb" } = false (if incomplete DBRef is allowed)
 ','line_number':344,'multiline':True]
['text':'*
 * Parse 'obj' and return either a MatchExpression or an error.
 ','line_number':373,'multiline':True]
['text':' A nullptr for 'parsedExpression' indicates that the particular operator should not','line_number':413,'multiline':False]
['text':' be added to 'root', because it is handled outside of the MatchExpressionParser','line_number':414,'multiline':False]
['text':' library. The following operators currently follow this convention:','line_number':415,'multiline':False]
['text':'    - $comment  has no action associated with the operator.','line_number':416,'multiline':False]
['text':' Ensure the path length does not exceed the maximum allowed depth.','line_number':424,'multiline':False]
['text':' Here we validate that the argument to $sampleRate is in [0, 1], we simplify 0.0 and 1.0 to a','line_number':513,'multiline':False]
['text':' contradiction or a tautology, respectively. Everything in between is desugared into','line_number':514,'multiline':False]
['text':' {$expr: {$lt: [{$rand: {}}, x]}}.','line_number':515,'multiline':False]
['text':' This conditional is negated intentionally to handle NaN correctly.  If you apply','line_number':518,'multiline':False]
['text':' DeMorgan's law here you will be suprised that $sampleRate will accept NaN as a valid','line_number':519,'multiline':False]
['text':' argument.','line_number':520,'multiline':False]
['text':' 'id' is collation-aware. 'ref' and 'db' are compared using binary comparison.','line_number':569,'multiline':False]
['text':' Allow DBRefs, but reject all fields with names starting with $.','line_number':731,'multiline':False]
['text':'*
 * Converts 'theArray', a BSONArray of integers, into a std::vector of integers.
 ','line_number':770,'multiline':True]
['text':' Fill temporary bit position array with integers read from the BSON array.','line_number':776,'multiline':False]
['text':'*
 * Parses 'e' into a BitTestMatchExpression.
 ','line_number':790,'multiline':True]
['text':' Array of bit positions provided as value.','line_number':801,'multiline':False]
['text':' Integer bitmask provided as value.','line_number':809,'multiline':False]
['text':' Binary bitmask provided as value.','line_number':817,'multiline':False]
['text':'*
 * Parses the given BSONElement into a single integer argument and creates a MatchExpression
 * of type 'T' that gets initialized with the resulting integer.
 ','line_number':892,'multiline':True]
['text':'*
 * Same as the parseInternalSchemaSingleIntegerArgument function, but for top-level
 * operators which don't have paths.
 ','line_number':910,'multiline':True]
['text':'*
 * Looks at the field named 'namePlaceholderFieldName' within 'containingObject' and parses a name
 * placeholder from that element. 'expressionName' is the name of the expression that requires the
 * name placeholder and is used to generate helpful error messages.
 ','line_number':930,'multiline':True]
['text':'*
 * Looks at the field named 'exprWithPlaceholderFieldName' within 'containingObject' and parses an
 * ExpressionWithPlaceholder from that element. Fails if an error occurs during parsing, or if the
 * ExpressionWithPlaceholder has a different name placeholder than 'expectedPlaceholder'.
 * 'expressionName' is the name of the expression that requires the ExpressionWithPlaceholder and is
 * used to generate helpful error messages.
 ','line_number':951,'multiline':True]
['text':' Parse the region field, 'withinRegion', to a GeometryContainer.','line_number':1140,'multiline':False]
['text':' The element must be a geo specifier. "$box", "$center", "$geometry", etc.','line_number':1144,'multiline':False]
['text':' Parse the field.','line_number':1162,'multiline':False]
['text':'*
 * Parses 'elem' into an InternalSchemaMatchArrayIndexMatchExpression.
 ','line_number':1231,'multiline':True]
['text':' $elemMatch value case applies when the children all','line_number':1373,'multiline':False]
['text':' work on the field 'name'.','line_number':1374,'multiline':False]
['text':' This is the case when:','line_number':1375,'multiline':False]
['text':'     1) the argument is an expression document; and','line_number':1376,'multiline':False]
['text':'     2) expression is not a AND/NOR/OR logical operator. Children of','line_number':1377,'multiline':False]
['text':'        these logical operators are initialized with field names.','line_number':1378,'multiline':False]
['text':'     3) expression is not a WHERE operator. WHERE works on objects instead','line_number':1379,'multiline':False]
['text':'        of specific field.','line_number':1380,'multiline':False]
['text':' Value case.','line_number':1390,'multiline':False]
['text':' DBRef value case','line_number':1414,'multiline':False]
['text':' A DBRef document under a $elemMatch should be treated as an object case because it may','line_number':1415,'multiline':False]
['text':' contain non-DBRef fields in addition to $ref, $id and $db.','line_number':1416,'multiline':False]
['text':' Object case.','line_number':1418,'multiline':False]
['text':' $where is not supported under $elemMatch because $where applies to top-level document, not','line_number':1426,'multiline':False]
['text':' array elements in a field.','line_number':1427,'multiline':False]
['text':' $all : [ { $elemMatch : {} } ... ]','line_number':1486,'multiline':False]
['text':' $all : [ { $elemMatch : ... }, 5 ]','line_number':1492,'multiline':False]
['text':' $all : [ { $elemMatch : ... }, { x : 5 } ]','line_number':1498,'multiline':False]
['text':'*
 * Parses a MatchExpression which takes a fixed-size array of MatchExpressions as arguments.
 ','line_number':1544,'multiline':True]
['text':' Fill out 'expressions' with all of the parsed subexpressions contained in the array,','line_number':1569,'multiline':False]
['text':' tracking our location in the array with 'position'.','line_number':1570,'multiline':False]
['text':' If the and has one child, it can be ignored when generating a document validation error.','line_number':1626,'multiline':False]
['text':'*
 * Parses a single field in a sub expression.
 * If the query is { x : { $gt : 5, $lt : 8 } },
 * 'e' is $gt : 5
 ','line_number':1665,'multiline':True]
['text':' $where cannot be a sub-expression because it works on top-level documents only.','line_number':1686,'multiline':False]
['text':' Just because $ne can be rewritten as the negation of an equality does not mean','line_number':1730,'multiline':False]
['text':' that $ne of a regex is allowed. See SERVER-1705.','line_number':1731,'multiline':False]
['text':' TODO: try to optimize this','line_number':1817,'multiline':False]
['text':' we have to do this since $options can be before or after a $regex','line_number':1818,'multiline':False]
['text':' but we validate here','line_number':1819,'multiline':False]
['text':' Handles bitwise query operators.','line_number':1923,'multiline':False]
['text':'*
 * Parses a field in a sub expression.
 * If the query is { x : { $gt : 5, $lt : 8 } },
 * 'e' is { $gt : 5, $lt : 8 }
 ','line_number':2088,'multiline':True]
['text':' The one exception to {field : {fully contained argument} } is, of course, geo.  Example:','line_number':2100,'multiline':False]
['text':' sub == { field : {$near[Sphere]: [0,0], $maxDistance: 1000, $minDistance: 10 } }','line_number':2101,'multiline':False]
['text':' We peek inside of 'sub' to see if it's possibly a $near.  If so, we can't iterate over its','line_number':2102,'multiline':False]
['text':' subfields and parse them one at a time (there is no $maxDistance without $near), so we hand','line_number':2103,'multiline':False]
['text':' the entire object over to the geo parsing routines.','line_number':2104,'multiline':False]
['text':' Special case parsing for geoNear. This is necessary in order to support query formats like','line_number':2106,'multiline':False]
['text':' {$near: <coords>, $maxDistance: <distance>}. No other query operators allow $-prefixed','line_number':2107,'multiline':False]
['text':' modifiers as sibling BSON elements.','line_number':2108,'multiline':False]
['text':' Propagate geo parsing result to caller.','line_number':2121,'multiline':False]
['text':' namespace','line_number':2142,'multiline':False]
['text':' TODO SERVER-81846: Enable Boolean Expression Simplifier in change streams.','line_number':2165,'multiline':False]
['text':' TODO SERVER-81847: Enable the boolean expression simplifier for index partial filters.','line_number':2166,'multiline':False]
['text':' enableSimplification ','line_number':2167,'multiline':True]
['text':' Maps from query operator string name to function.','line_number':2171,'multiline':False]
['text':' Maps from query operator string name to operator PathAcceptingKeyword.','line_number':2225,'multiline':False]
['text':'*
 * Returns the proper parser for the indicated pathless operator. Returns 'null' if 'name'
 * doesn't represent a known type.
 ','line_number':2284,'multiline':True]
['text':' deprecated','line_number':2305,'multiline':False]
['text':' aggregation stage','line_number':2306,'multiline':False]
['text':' $-prefixed field names','line_number':2307,'multiline':False]
['text':' namespace','line_number':2328,'multiline':False]
['text':' namespace mongo','line_number':2344,'multiline':False]
