['text':'*
 *    Copyright (C) 2022-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' Adaptive container for storing a mapping between assigned InputParamIds and parameterized','line_number':51,'multiline':False]
['text':' MatchExpressions. Uses a vector when 'size()' is below 'useMapThreshold', and builds a map','line_number':52,'multiline':False]
['text':' for faster lookups once 'size()' reaches the threshold.','line_number':53,'multiline':False]
['text':' Moves the vector and clears other resources.','line_number':60,'multiline':False]
['text':' Caller must ensure that inputParamId is an increasing sequence of integers starting from 0.','line_number':66,'multiline':False]
['text':' If size reaches given threshold, build a map for faster lookups.','line_number':73,'multiline':False]
['text':' If available, use the map to search for an equivalent expression. Otherwise linearly','line_number':89,'multiline':False]
['text':' search through the vector.','line_number':90,'multiline':False]
['text':' Map from assigned InputParamId to parameterized MatchExpression. It can be safely represented','line_number':123,'multiline':False]
['text':' as a vector because in 'MatchExpressionParameterizationVisitorContext' we control that','line_number':124,'multiline':False]
['text':' inputParamId is an increasing sequence of integers starting from 0.','line_number':125,'multiline':False]
['text':'*
 * A context to track assigned input parameter IDs for auto-parameterization. Note that the
 * parameterized MatchExpressions must outlive this class.
 ','line_number':141,'multiline':True]
['text':'*
     * Reports whether the requested number of parameter IDs can be assigned within the
     * 'maxParamCount' limit. Used by callers that need to parameterize all or none of the arguments
     * of an expression because MatchExpressionSbePlanCacheKeySerializationVisitor visit() methods
     * expect those to either be fully parameterized or unparameterized. This must set
     * 'parameterized' to false if the requested IDs are not available, as the caller will then not
     * parameterize any of its arguments, which means the query will not be fully parameterized
     * even if we do not end up using all the allowed parameter IDs.
     ','line_number':154,'multiline':True]
['text':'*
     * Assigns a parameter ID to `expr` with the ability to reuse an already-assigned parameter id
     * if `expr` is equivalent to an expression we have seen before. This is used to model
     * dependencies within a query (e.g. $or[{a:1}, {a:1, b:1}] --> $or[{a:P0}, {a:P0, b:P1}]) and
     * to reduce the number of parameters. The reusable parameters use the same vector for tracking
     * as the non-reusable to ensure uniqueness of the parameterId.
     *
     * If 'maxParamCount' was specified, this stops creating new parameters once that limit has been
     * reached and returns boost::none instead.
     ','line_number':175,'multiline':True]
['text':' Couldn't find a param id to reuse. Create a new one.','line_number':198,'multiline':False]
['text':'*
     * Assigns a parameter ID to 'expr'. This is not only a helper for
     * nextReusableInputParamId(); it is also called directly by visit() methods whose
     * expressions are deemed non-shareable.
     *
     * If 'maxParamCount' was specified, this stops creating new parameters once that limit has
     * been reached and returns boost::none instead.
     ','line_number':202,'multiline':True]
['text':' Map from assigned InputParamId to parameterized MatchExpression.','line_number':222,'multiline':False]
['text':' This is the maximumum number of MatchExpression parameters a single CanonicalQuery','line_number':225,'multiline':False]
['text':' may have. A value of boost::none means unlimited.','line_number':226,'multiline':False]
['text':' This is the next input parameter ID to assign. It may be initialized to a value > 0','line_number':229,'multiline':False]
['text':' to enable a forest of match expressions to be parameterized by allowing each tree to','line_number':230,'multiline':False]
['text':' continue parameter IDs from where the prior tree left off.','line_number':231,'multiline':False]
['text':' This is changed to false if an attempt to parameterize ever failed (because it would','line_number':234,'multiline':False]
['text':' exceed 'maxParamCount').','line_number':235,'multiline':False]
['text':'*
 * An implementation of a MatchExpression visitor which assigns an optional input parameter
 * ID to each node which is eligible for auto-parameterization:
 *  - BitsAllClearMatchExpression
 *  - BitsAllSetMatchExpression
 *  - BitsAnyClearMatchExpression
 *  - BitsAnySetMatchExpression
 *  - BitTestMatchExpression (two parameter IDs for the position and mask)
 *  - Comparison expressions, unless compared against MinKey, MaxKey, null or NaN value or
 * array
 *      - EqualityMatchExpression
 *      - GTEMatchExpression
 *      - GTMatchExpression
 *      - LTEMatchExpression
 *      - LTMatchExpression
 *  - InMatchExpression, unless it contains an array, null or regexp value.
 *  - ModMatchExpression (two parameter IDs for the divider and reminder)
 *  - RegexMatchExpression (two parameter IDs for the compiled regex and raw value)
 *  - SizeMatchExpression
 *  - TypeMatchExpression, unless type value is Array
 *  - WhereMatchExpression
 ','line_number':239,'multiline':True]
['text':' Don't support parameterization of InternEqHashedKey because it is not implemented','line_number':292,'multiline':False]
['text':' in SBE.','line_number':293,'multiline':False]
['text':'*
 * A match expression tree walker compatible with tree_walker::walk() to be used with
 * MatchExpressionParameterizationVisitor.
 ','line_number':338,'multiline':True]
['text':' namespace mongo','line_number':361,'multiline':False]
