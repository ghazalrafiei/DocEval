['text':'*
 *    Copyright (C) 2020-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 * Visitor pattern for the MatchExpression tree.
 *
 * This code is not responsible for traversing the tree, only for performing the double-dispatch.
 *
 * If the visitor doesn't intend to modify the tree, then the template argument 'IsConst' should be
 * set to 'true'. In this case all 'visit()' methods will take a const pointer to a visiting node.
 ','line_number':94,'multiline':True]
['text':'*
 * This class provides null implementations for all visit methods so that a derived class can
 * override visit method(s) only for interested 'MatchExpression' types. For example, if one wants
 * to visit only 'EqualityMatchExpression', one can override only void visit(const
 * EqualityMatchExpression*).
 *
 * struct EqVisitor : public SelectiveMatchExpressionVisitorBase<true> {
 *     // To avoid overloaded-virtual warnings.
 *     using SelectiveMatchExpressionVisitorBase<true>::visit;
 *
 *     void visit(const EqualityMatchExpression* expr) final {
 *         // logic for what to do with an EqualityMatchExpression.
 *     }
 * };
 *
 * NOTE: Take caution when deriving from this class as you lose the compile-time safety of ensuring
 * that new expressions must consider the impact in the corresponding visitor implementation.
 ','line_number':172,'multiline':True]
['text':' namespace mongo','line_number':255,'multiline':False]
