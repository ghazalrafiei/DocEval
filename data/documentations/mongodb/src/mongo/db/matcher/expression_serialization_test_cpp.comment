['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' Unit tests for MatchExpression::serialize serialization.','line_number':30,'multiline':False]
['text':' IWYU pragma: no_include "boost/container/detail/std_fwd.hpp"','line_number':41,'multiline':False]
['text':' We construct an OrMatchExpression directly rather than using the match expression','line_number':178,'multiline':False]
['text':' parser, since the parser does not permit a $or with no children.','line_number':179,'multiline':False]
['text':' At the time of this writing, the MatchExpression parser does not ever create a NOT with a','line_number':1129,'multiline':False]
['text':' direct path expression child, instead creating a NOT -> AND -> path expression. This test','line_number':1130,'multiline':False]
['text':' manually constructs such an expression in case it ever turns up, since that should still be','line_number':1131,'multiline':False]
['text':' able to serialize.','line_number':1132,'multiline':False]
['text':' At the time of this writing, the MatchExpression parser does not ever create a NOT with a','line_number':1150,'multiline':False]
['text':' direct NOT child, instead creating a NOT -> AND -> NOT. This test manually constructs such an','line_number':1151,'multiline':False]
['text':' expression in case it ever turns up, since that should still be able to serialize to','line_number':1152,'multiline':False]
['text':' {$not: {$not: ...}}.','line_number':1153,'multiline':False]
['text':' The grammar only permits a $not under a given path. For example, {a: {$not: {$eq: 4}}} is OK','line_number':1171,'multiline':False]
['text':' but {$not: {a: 4}} is not OK). However, we sometimes use the NOT MatchExpression to negate','line_number':1172,'multiline':False]
['text':' clauses within a JSONSchema. In such circumstances we need to be able to serialize the tree','line_number':1173,'multiline':False]
['text':' and re-parse it but the parser will reject the NOT in the place it's in. As a result, we need','line_number':1174,'multiline':False]
['text':' to translate the NOT to a $nor.','line_number':1175,'multiline':False]
['text':' MatchExpression tree expected:','line_number':1177,'multiline':False]
['text':'  {$or: [','line_number':1178,'multiline':False]
['text':'    {$and: [','line_number':1179,'multiline':False]
['text':'      {foo: {$_internalSchemaType: [2]}},','line_number':1180,'multiline':False]
['text':'      {foo: {$not: {','line_number':1181,'multiline':False]
['text':'        // This whole $or represents the {maxLength: 4}, since the restriction only applies if','line_number':1182,'multiline':False]
['text':'        // the element is the right type.','line_number':1183,'multiline':False]
['text':'        $or: [','line_number':1184,'multiline':False]
['text':'          {$_internalSchemaMaxLength: 4},','line_number':1185,'multiline':False]
['text':'          {foo: {$not: {$_internalSchemaType: [2]}}}','line_number':1186,'multiline':False]
['text':'        ]','line_number':1187,'multiline':False]
['text':'      }}}','line_number':1188,'multiline':False]
['text':'    ]},','line_number':1189,'multiline':False]
['text':'    {foo: {$not: {$exists: true}}}','line_number':1190,'multiline':False]
['text':'  ]}','line_number':1191,'multiline':False]
['text':' <-- This is the interesting part of this test.','line_number':1208,'multiline':False]
['text':' NOLINT','line_number':1899,'multiline':False]
['text':'*
 * Helper function for parsing and creating MatchExpressions.
 ','line_number':1915,'multiline':True]
['text':' NOLINT','line_number':1948,'multiline':False]
['text':' NOLINT','line_number':1976,'multiline':False]
['text':' NOLINT','line_number':1992,'multiline':False]
['text':' NOLINT','line_number':2012,'multiline':False]
['text':' NOLINT','line_number':2020,'multiline':False]
['text':' NOLINT','line_number':2029,'multiline':False]
['text':' NOLINT','line_number':2037,'multiline':False]
['text':' NOLINT','line_number':2048,'multiline':False]
['text':' NOLINT','line_number':2063,'multiline':False]
['text':' NOLINT','line_number':2073,'multiline':False]
['text':' NOLINT','line_number':2094,'multiline':False]
['text':' NOLINT','line_number':2102,'multiline':False]
['text':' NOLINT','line_number':2113,'multiline':False]
['text':' NOLINT','line_number':2124,'multiline':False]
['text':' NOLINT','line_number':2151,'multiline':False]
['text':' namespace','line_number':2194,'multiline':False]
['text':' namespace mongo','line_number':2195,'multiline':False]
