['text':'*
 *    Copyright (C) 2021-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 * InternalExprComparisonMatchExpression consists of comparison expressions with similar semantics
 * to the correlating $eq, $gt, $gte, $lt, and $lte aggregation expression. They differ from the
 * regular comparison match expressions in the following ways:
 *
 * - There will be no type bracketing. For instance, null is considered less than 2, and objects
 *   are considered greater than 2.
 *
 * - The document will match if there is an array anywhere along the path. By always returning true
 *   in such cases, we match a superset of documents that the related aggregation expression would
 *   match. This sidesteps us having to implement field path expression evaluation as part of this
 *   match expression.
 *
 * - Comparison to NaN will consider NaN as the less than all numbers.
 *
 * - Comparison to an array is illegal. It is invalid usage to construct a
 *   InternalExprComparisonMatchExpression node which compares to an array.
 *
 * These expressions are always treated as "imprecise" and are to be used as the first level in a
 * two-level filtering scheme. They must always be accompanied by a later filter which is precise.
 ','line_number':50,'multiline':True]
['text':' We use NonLeafArrayBehavior::kMatchSubpath traversal in','line_number':89,'multiline':False]
['text':' InternalExprComparisonMatchExpression. This means matchesSinglElement() will be called','line_number':90,'multiline':False]
['text':' when an array is found anywhere along the patch we are matching against. When this','line_number':91,'multiline':False]
['text':' occurs, we return 'true' and depend on the corresponding ExprMatchExpression node to','line_number':92,'multiline':False]
['text':' filter properly.','line_number':93,'multiline':False]
['text':' This is a comparison match expression, so it must be either a $eq, $lt, $lte, $gt','line_number':112,'multiline':False]
['text':' or $gte expression.','line_number':113,'multiline':False]
['text':' namespace mongo','line_number':224,'multiline':False]
