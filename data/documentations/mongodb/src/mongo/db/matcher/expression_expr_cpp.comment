['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' 'Variables' is not thread safe, and ExprMatchExpression may be used in a validator which','line_number':87,'multiline':False]
['text':' processes documents from multiple threads simultaneously. Hence we make a copy of the','line_number':88,'multiline':False]
['text':' 'Variables' object per-caller.','line_number':89,'multiline':False]
['text':' TODO SERVER-30982: Add mechanism to allow for checking Expression equivalency.','line_number':112,'multiline':False]
['text':' This function is used to give match expression nodes which don't keep a pointer to the','line_number':118,'multiline':False]
['text':' ExpressionContext access to the ExpressionContext's collator. Since the operation only ever','line_number':119,'multiline':False]
['text':' has a single CollatorInterface, and since that collator is kept on the ExpressionContext,','line_number':120,'multiline':False]
['text':' the collator pointer that we're propagating throughout the MatchExpression tree must match','line_number':121,'multiline':False]
['text':' the one inside the ExpressionContext.','line_number':122,'multiline':False]
['text':' TODO SERVER-31003: Replace Expression clone via serialization with Expression::clone().','line_number':131,'multiline':False]
['text':' Return nullptr on failure.','line_number':152,'multiline':False]
['text':' Looking for:','line_number':156,'multiline':False]
['text':'                     $eq','line_number':157,'multiline':False]
['text':'    $toHashedIndexKey   {$const: NumberLong(?)}','line_number':158,'multiline':False]
['text':'           "$a"','line_number':159,'multiline':False]
['text':'','line_number':160,'multiline':False]
['text':' Where "a" can be any field path and ? can be any number.','line_number':161,'multiline':False]
['text':' Matched $toHashedIndexKey - keep going.','line_number':170,'multiline':False]
['text':' Matched "$a" in the example above! Now look for the constant long:','line_number':180,'multiline':False]
['text':' namespace','line_number':191,'multiline':False]
['text':'  $expr expressions can't take advantage of indexes. We attempt to rewrite the expressions','line_number':197,'multiline':False]
['text':'  as a conjunction of internal match expressions, so the query planner can use the','line_number':198,'multiline':False]
['text':'  internal match expressions to potentially generate an index scan.','line_number':199,'multiline':False]
['text':' Exiting early prevents additional calls to optimize from performing additional rewrites','line_number':200,'multiline':False]
['text':' and adding duplicate MatchExpression sub-trees to the tree.','line_number':201,'multiline':False]
['text':' If '_expression' can be rewritten to a MatchExpression, we will return a $and node','line_number':215,'multiline':False]
['text':' with both the original ExprMatchExpression and the MatchExpression rewrite as','line_number':216,'multiline':False]
['text':' children. The rewritten expression might not be equivalent to the original one so we','line_number':217,'multiline':False]
['text':' still have to keep the latter for correctness.','line_number':218,'multiline':False]
['text':' Re-optimize the new AND in order to make sure that any AND children are absorbed.','line_number':222,'multiline':False]
['text':' The Boolean simplifier is disabled since we don't want to simplify sub-expressions,','line_number':223,'multiline':False]
['text':' but simplify the whole expression instead.','line_number':224,'multiline':False]
['text':' enableSimplification ','line_number':226,'multiline':True]
['text':' Replace trivially true expression with an empty AND since the planner doesn't always','line_number':229,'multiline':False]
['text':' check for 'isTriviallyTrue()'.','line_number':230,'multiline':False]
['text':' namespace mongo','line_number':238,'multiline':False]
