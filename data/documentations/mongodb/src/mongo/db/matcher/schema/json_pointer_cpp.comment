['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'  Check for unespaced '~' characters, then replace all occurrences of '~1' with '/', and '~0'','line_number':39,'multiline':False]
['text':'  with '~'.','line_number':40,'multiline':False]
['text':' Search the string for any '~', and replace it if it is part of '~1'.','line_number':43,'multiline':False]
['text':' If we can replace the '~' in this loop, do it now.','line_number':49,'multiline':False]
['text':' Replace all '~0' with '~' after all other tilda characters have been removed.','line_number':56,'multiline':False]
['text':' namespace','line_number':63,'multiline':False]
['text':' Check if pointer specifies root.','line_number':68,'multiline':False]
['text':' Parse the last key.','line_number':80,'multiline':False]
['text':' if this is the last key, return the found element.','line_number':99,'multiline':False]
['text':' If this is not the last key, and the current element is not an object with','line_number':103,'multiline':False]
['text':' keys, pointer does not match.','line_number':104,'multiline':False]
['text':' This relies on the behavior that a BSONArray is formatted as a BSONObj with numeric,','line_number':108,'multiline':False]
['text':' ascending keys.','line_number':109,'multiline':False]
['text':' namespace mongo','line_number':116,'multiline':False]
