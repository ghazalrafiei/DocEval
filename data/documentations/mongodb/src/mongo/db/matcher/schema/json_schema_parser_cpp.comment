['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' Explicitly unsupported JSON Schema keywords.','line_number':109,'multiline':False]
['text':'*
 * Parses 'schema' to the semantically equivalent match expression. If the schema has an associated
 * path, e.g. if we are parsing the nested schema for property "myProp" in
 *
 *    {properties: {myProp: <nested-schema>}}
 *
 * then this is passed in 'path'. In this example, the value of 'path' is "myProp". If there is no
 * path, e.g. for top-level schemas, then 'path' is empty.
 ','line_number':121,'multiline':True]
['text':'*
 * Constructs and returns a match expression to evaluate a JSON Schema restriction keyword.
 *
 * This handles semantic differences between the MongoDB query language and JSON Schema. MongoDB
 * match expressions which apply to a particular type will reject non-matching types, whereas JSON
 * Schema restriction keywords allow non-matching types. As an example, consider the maxItems
 * keyword. This keyword only applies in JSON Schema if the type is an array, whereas the
 * $_internalSchemaMaxItems match expression node rejects non-arrays.
 *
 * The 'restrictionType' expresses the type to which the JSON Schema restriction applies (e.g.
 * arrays for maxItems). The 'restrictionExpr' is the match expression node which can be used to
 * enforce this restriction, should the types match (e.g. $_internalSchemaMaxItems). 'statedType' is
 * a parsed representation of the JSON Schema type keyword which is in effect.
 ','line_number':136,'multiline':True]
['text':' Use NumberInt in the "number" case as a stand-in.','line_number':159,'multiline':False]
['text':' This restriction applies to the type that is already being enforced. We return the','line_number':165,'multiline':False]
['text':' restriction unmodified.','line_number':166,'multiline':False]
['text':' This restriction doesn't take any effect, since the type of the schema is different','line_number':169,'multiline':False]
['text':' from the type to which this restriction applies.','line_number':170,'multiline':False]
['text':' Generate and return the following expression tree:','line_number':176,'multiline':False]
['text':'','line_number':177,'multiline':False]
['text':'  (OR (<restrictionExpr>) (NOT (INTERNAL_SCHEMA_TYPE <restrictionType>))','line_number':178,'multiline':False]
['text':'','line_number':179,'multiline':False]
['text':' We need to do this because restriction keywords do not apply when a field is either not','line_number':180,'multiline':False]
['text':' present or of a different type.','line_number':181,'multiline':False]
['text':' This restriction has no effect in a top-level schema, since we only store objects.','line_number':250,'multiline':False]
['text':' This restriction has no effect in a top-level schema, since we only store objects.','line_number':290,'multiline':False]
['text':'*
 * Parses length-related keywords that expect a nonnegative long as an argument.
 ','line_number':306,'multiline':True]
['text':' JSON Schema does not allow regex flags to be specified.','line_number':347,'multiline':False]
['text':' 'enum' at the top-level implies a literal object match on the root document.','line_number':456,'multiline':False]
['text':' Top-level non-object enum values can be safely ignored, since MongoDB only stores','line_number':458,'multiline':False]
['text':' objects, not scalars or arrays.','line_number':459,'multiline':False]
['text':' Make sure that the OR expression has at least 1 child.','line_number':475,'multiline':False]
['text':'*
 * Given a BSON element corresponding to the $jsonSchema "required" keyword, returns the set of
 * required property names. If the contents of the "required" keyword are invalid, returns a non-OK
 * status.
 ','line_number':484,'multiline':True]
['text':'*
 * Given the already-parsed set of required properties, returns a MatchExpression which ensures that
 * those properties exist. Returns a parsing error if the translation fails.
 ','line_number':525,'multiline':True]
['text':' This node is tagged as '_propertyExists' to indicate that it will produce a path instead','line_number':540,'multiline':False]
['text':' of a detailed BSONObj error during error generation.','line_number':541,'multiline':False]
['text':' If this is a top-level schema, then we know that we are matching against objects, and there','line_number':547,'multiline':False]
['text':' is no need to worry about ensuring that non-objects match.','line_number':548,'multiline':False]
['text':' The field name for which we created the nested schema is a required property. This','line_number':600,'multiline':False]
['text':' property must exist and therefore must match 'nestedSchemaMatch'.','line_number':601,'multiline':False]
['text':' This property either must not exist or must match the nested schema. Therefore, we','line_number':604,'multiline':False]
['text':' generate the match expression (OR (NOT (EXISTS)) <nestedSchemaMatch>).','line_number':605,'multiline':False]
['text':' If this is a top-level schema, then we have no path and there is no need for an','line_number':623,'multiline':False]
['text':' explicit object match node.','line_number':624,'multiline':False]
['text':' Parse the nested schema using a placeholder as the path, since we intend on using the','line_number':664,'multiline':False]
['text':' resulting match expression inside an ExpressionWithPlaceholder.','line_number':665,'multiline':False]
['text':' The absence of the 'additionalProperties' keyword is identical in meaning to the presence','line_number':691,'multiline':False]
['text':' of 'additionalProperties' with a value of true.','line_number':692,'multiline':False]
['text':' Parse the nested schema using a placeholder as the path, since we intend on using the','line_number':720,'multiline':False]
['text':' resulting match expression inside an ExpressionWithPlaceholder.','line_number':721,'multiline':False]
['text':'*
 * Returns a match expression which handles both the 'additionalProperties' and 'patternProperties'
 * keywords.
 ','line_number':734,'multiline':True]
['text':' Collect the set of properties named by the 'properties' keyword.','line_number':748,'multiline':False]
['text':' If one of the patterns in pattern properties matches '_id', no need to warn about a schema','line_number':766,'multiline':False]
['text':' that can't match documents.','line_number':767,'multiline':False]
['text':' In the case of no 'additionalProperties' keyword, but a 'patternProperties' keyword is','line_number':786,'multiline':False]
['text':' present, we still want '$_internalSchemaAllowedProperties' to generate an error, so we','line_number':787,'multiline':False]
['text':' provide an annotation with empty information.','line_number':788,'multiline':False]
['text':' If this is a top-level schema, then we have no path and there is no need for an explicit','line_number':802,'multiline':False]
['text':' object match node.','line_number':803,'multiline':False]
['text':'*
 * Parses 'minProperties' and 'maxProperties' JSON Schema keywords.
 ','line_number':816,'multiline':True]
['text':' This is a top-level schema.','line_number':835,'multiline':False]
['text':' This node is tagged as '_propertyExists' to indicate that it will produce a path instead','line_number':851,'multiline':False]
['text':' of a detailed BSONObj error during error generation.','line_number':852,'multiline':False]
['text':' The 'if' should never directly contribute to the error being generated.','line_number':887,'multiline':False]
['text':' This node is tagged as '_internalPropertyList' to denote that this node will produce an','line_number':916,'multiline':False]
['text':' array of properties during error generation.','line_number':917,'multiline':False]
['text':' The 'if' should never directly contribute to the error being generated.','line_number':954,'multiline':False]
['text':' Allow JSON Schema annotations under "dependency" keyword.','line_number':985,'multiline':False]
['text':'*
 * Parses 'itemsElt' into a match expression and adds it to 'andExpr'. On success, returns the index
 * from which the "additionalItems" schema should be enforced, if needed.
 ','line_number':1036,'multiline':True]
['text':' When "items" is an array, generate match expressions for each subschema for each position','line_number':1050,'multiline':False]
['text':' in the array, which are bundled together in an AndMatchExpression. Annotate the','line_number':1051,'multiline':False]
['text':' AndMatchExpression with the 'items' operator name, since it logically corresponds to the','line_number':1052,'multiline':False]
['text':' user visible JSON Schema "items" keyword.','line_number':1053,'multiline':False]
['text':' We want to make an ExpressionWithPlaceholder for $_internalSchemaMatchArrayIndex,','line_number':1068,'multiline':False]
['text':' so we use our default placeholder as the path.','line_number':1069,'multiline':False]
['text':' 'andExprForSubschemas' carries the operator name, not this expression ','line_number':1086,'multiline':True]
['text':' When "items" is an object, generate a single AllElemMatchFromIndex that applies to every','line_number':1102,'multiline':False]
['text':' element in the array to match. The parsed expression is intended for an','line_number':1103,'multiline':False]
['text':' ExpressionWithPlaceholder, so we use the default placeholder as the path.','line_number':1104,'multiline':False]
['text':' Ignore the expression, since InternalSchemaAllElemMatchFromIndexMatchExpression reports','line_number':1151,'multiline':False]
['text':' the details in this case.','line_number':1152,'multiline':False]
['text':' Only generate a match expression if needed.','line_number':1183,'multiline':False]
['text':'*
 * Parses the logical keywords in 'keywordMap' to their equivalent match expressions
 * and, on success, adds the results to 'andExpr'.
 *
 * This function parses the following keywords:
 *  - allOf
 *  - anyOf
 *  - oneOf
 *  - not
 *  - enum
 ','line_number':1233,'multiline':True]
['text':'*
 * Parses JSON Schema array keywords in 'keywordMap' and adds them to 'andExpr'. Returns a non-OK
 * status if an error occurs during parsing.
 *
 * This function parses the following keywords:
 *  - minItems
 *  - maxItems
 *  - uniqueItems
 *  - items
 *  - additionalItems
 ','line_number':1308,'multiline':True]
['text':'*
 * Parses JSON Schema keywords related to objects in 'keywordMap' and adds them to 'andExpr'.
 * Returns a non-OK status if an error occurs during parsing.
 *
 * This function parses the following keywords:
 *  - additionalProperties
 *  - dependencies
 *  - maxProperties
 *  - minProperties
 *  - patternProperties
 *  - properties
 *  - required
 ','line_number':1356,'multiline':True]
['text':' If a top level 'required' field does not contain '_id' and 'additionalProperties' is','line_number':1406,'multiline':False]
['text':' false, no documents will be permitted. Calculate whether we need to warn the user','line_number':1407,'multiline':False]
['text':' later in parsing.','line_number':1408,'multiline':False]
['text':'*
 * Parses JSON Schema scalar keywords in 'keywordMap' and adds them to 'andExpr'. Returns a non-OK
 * status if an error occurs during parsing.
 *
 * This function parses the following keywords:
 *  - minimum
 *  - exclusiveMinimum
 *  - maximum
 *  - exclusiveMaximum
 *  - minLength
 *  - maxLength
 *  - pattern
 *  - multipleOf
 ','line_number':1469,'multiline':True]
['text':' String keywords.','line_number':1488,'multiline':False]
['text':' Numeric keywords.','line_number':1515,'multiline':False]
['text':' If "exclusiveMaximum" is present, "maximum" must also be present.','line_number':1543,'multiline':False]
['text':' If "exclusiveMinimum" is present, "minimum" must also be present.','line_number':1569,'multiline':False]
['text':'*
 * Parses JSON Schema encrypt keyword in 'keywordMap' and adds it to 'andExpr'. Returns a
 * non-OK status if an error occurs during parsing.
 ','line_number':1579,'multiline':True]
['text':' Discard the result as we are only concerned with validation.','line_number':1618,'multiline':False]
['text':' This checks the types of all the fields. Will throw on any parsing error.','line_number':1634,'multiline':False]
['text':'*
 * Validates that the following metadata keywords have the correct type:
 *  - description
 *  - title
 ','line_number':1660,'multiline':True]
['text':' Map from JSON Schema keyword to the corresponding element from 'schema', or to an empty','line_number':1691,'multiline':False]
['text':' BSONElement if the JSON Schema keyword is not specified.','line_number':1692,'multiline':False]
['text':' The presence of the encrypt keyword implies the restriction that the field must be','line_number':1804,'multiline':False]
['text':' of type BinData.','line_number':1805,'multiline':False]
['text':' All schemas are given a tag of '_subschema' to indicate during error generation that','line_number':1812,'multiline':False]
['text':' 'andExpr' logically corresponds to a subschema. If this is a top level schema corresponding','line_number':1813,'multiline':False]
['text':' to '$jsonSchema', the caller is responsible for providing this information by overwriting','line_number':1814,'multiline':False]
['text':' this annotation.','line_number':1815,'multiline':False]
['text':' This is a top-level schema which requires that the type is something other than','line_number':1860,'multiline':False]
['text':' "object". Since we only know how to store objects, this schema matches nothing.','line_number':1861,'multiline':False]
['text':' namespace','line_number':1871,'multiline':False]
['text':' Tag the top level MatchExpression as '$jsonSchema' if necessary.','line_number':1937,'multiline':False]
['text':' namespace mongo','line_number':1951,'multiline':False]
