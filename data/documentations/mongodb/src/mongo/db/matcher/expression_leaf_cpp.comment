['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' IWYU pragma: no_include "ext/alloc_traits.h"','line_number':33,'multiline':False]
['text':' IWYU pragma: keep','line_number':46,'multiline':False]
['text':' Instantiate above constructor for 'Value&&' and 'const BSONElement&' types.','line_number':79,'multiline':False]
['text':' Please, keep BSONElementComparator consistent with MatchExpressionHasher defined in','line_number':106,'multiline':False]
['text':' db/matcher/expression_hasher.cpp.','line_number':107,'multiline':False]
['text':' Instantiate above constructor for 'Value&&' and 'const BSONElement&' types.','line_number':153,'multiline':False]
['text':' We can't call 'compareElements' on elements of different canonical types.  Usually','line_number':171,'multiline':False]
['text':' elements with different canonical types should never match any comparison, but there','line_number':172,'multiline':False]
['text':' are a few exceptions, handled here.','line_number':173,'multiline':False]
['text':' jstNULL and undefined are treated the same','line_number':174,'multiline':False]
['text':' LT and LTE need no distinction here because the two elements that we are','line_number':180,'multiline':False]
['text':' comparing do not even have the same canonical type and are thus not equal','line_number':181,'multiline':False]
['text':' (i.e.the case where we compare MinKey against MinKey would not reach this','line_number':182,'multiline':False]
['text':' switch statement at all).  The same reasoning follows for the lack of','line_number':183,'multiline':False]
['text':' distinction between GTE and GT.','line_number':184,'multiline':False]
['text':' This is a comparison match expression, so it must be either','line_number':194,'multiline':False]
['text':' a $lt, $lte, $gt, $gte, or equality expression.','line_number':195,'multiline':False]
['text':' We know from above that _rhs must also be a String (or Symbol which has the same','line_number':205,'multiline':False]
['text':' representation) so if they have different value sizes, they must be different','line_number':206,'multiline':False]
['text':' strings. We can only stop here with the default collator, since other collators may','line_number':207,'multiline':False]
['text':' consider different length strings as equal.','line_number':208,'multiline':False]
['text':' Special case handling for NaN. NaN is equal to NaN but otherwise always compares to','line_number':213,'multiline':False]
['text':' false. This follows the normal comparison rules (where NaN is less than all numbers) for','line_number':214,'multiline':False]
['text':' EQ, so we only need to do this for other comparison types.','line_number':215,'multiline':False]
['text':'','line_number':216,'multiline':False]
['text':' This is a comparison match expression, so it must be either','line_number':232,'multiline':False]
['text':' a $lt, $lte, $gt, $gte, or equality expression.','line_number':233,'multiline':False]
['text':' This is a comparison match expression, so it must be either','line_number':253,'multiline':False]
['text':' a $lt, $lte, $gt, $gte, or equality expression.','line_number':254,'multiline':False]
['text':' We need to be careful to generate a valid regex representative value, and the default string','line_number':322,'multiline':False]
['text':' "?" is not valid.','line_number':323,'multiline':False]
['text':' We need to make sure the $options value can be re-parsed as legal regex options, so','line_number':327,'multiline':False]
['text':' we'll set the representative value in this case to be the empty string rather than','line_number':328,'multiline':False]
['text':' "?", which is the standard representative for string values.','line_number':329,'multiline':False]
['text':' ---------','line_number':342,'multiline':False]
['text':' If dividend is NaN or Infinity, then there is no match.','line_number':361,'multiline':False]
['text':' If the dividend value cannot be represented as a 64-bit integer, then we return false.','line_number':367,'multiline':False]
['text':' If dividend is NaN or Infinity, then there is no match.','line_number':375,'multiline':False]
['text':' If the dividend value cannot be represented as a 64-bit integer, then we return false.','line_number':382,'multiline':False]
['text':' ------------------','line_number':416,'multiline':False]
['text':' ----','line_number':448,'multiline':False]
['text':' When an $in has a null, it adopts the same semantics as {$eq:null}. Namely, in addition to','line_number':482,'multiline':False]
['text':' matching literal null values, the $in should match missing and undefined.','line_number':483,'multiline':False]
['text':' NOTE: We do not recursively call optimize() on the RegexMatchExpression children in the','line_number':608,'multiline':False]
['text':' _regexes list. We assume that optimize() on a RegexMatchExpression is a no-op.','line_number':609,'multiline':False]
['text':' Simplify IN of exactly one regex to be a regex match.','line_number':615,'multiline':False]
['text':' Simplify IN of exactly one equality to be an EqualityMatchExpression.','line_number':626,'multiline':False]
['text':' Empty IN is always false','line_number':636,'multiline':False]
['text':' -----------','line_number':644,'multiline':False]
['text':' Process bit positions into bitmask.','line_number':652,'multiline':False]
['text':' Checking bits > 63 is just checking the sign bit, since we sign-extend numbers. For','line_number':654,'multiline':False]
['text':' example, the 100th bit of -1 is considered set if and only if the 63rd bit position is','line_number':655,'multiline':False]
['text':' set.','line_number':656,'multiline':False]
['text':' Process bitmask into bit positions.','line_number':667,'multiline':False]
['text':' Build _bitMask with the first 8 bytes of the bitMaskBinary.','line_number':687,'multiline':False]
['text':' Checking bits > 63 is just checking the sign bit, since we sign-extend numbers. For','line_number':691,'multiline':False]
['text':' example, the 100th bit of -1 is considered set if and only if the 63rd bit position','line_number':692,'multiline':False]
['text':' is set.','line_number':693,'multiline':False]
['text':' Test each bit position.','line_number':732,'multiline':False]
['text':' If position to test is longer than the data to test against, zero-extend.','line_number':736,'multiline':False]
['text':' Map to byte position and bit position within that byte. Note that byte positions','line_number':739,'multiline':False]
['text':' start at position 0 in the char array, and bit positions start at the least','line_number':740,'multiline':False]
['text':' significant bit.','line_number':741,'multiline':False]
['text':' If we can skip the rest fo the tests, that means we succeeded with _ANY_ or failed','line_number':750,'multiline':False]
['text':' with _ALL_.','line_number':751,'multiline':False]
['text':' If we finished all the tests, that means we succeeded with _ALL_ or failed with _ANY_.','line_number':756,'multiline':False]
['text':' Validate 'e' is a number or a BinData.','line_number':762,'multiline':False]
['text':' Length of eBinary (in bytes).','line_number':768,'multiline':False]
['text':' NaN doubles are rejected.','line_number':778,'multiline':False]
['text':' Integral doubles that are too large or small to be represented as a 64-bit signed','line_number':783,'multiline':False]
['text':' integer are treated as 0. We use 'kLongLongMaxAsDouble' because if we just did','line_number':784,'multiline':False]
['text':' eDouble > 2^63-1, it would be compared against 2^63. eDouble=2^63 would not get caught','line_number':785,'multiline':False]
['text':' that way.','line_number':786,'multiline':False]
['text':' This checks if e is an integral double.','line_number':792,'multiline':False]
['text':' Unfortunately this cannot be done without copying the array into the BSONObjBuilder, since','line_number':863,'multiline':False]
['text':' `opts.appendLiteral` may choose to append this actual array, a representative empty array, or','line_number':864,'multiline':False]
['text':' a debug string.','line_number':865,'multiline':False]
['text':' namespace mongo','line_number':883,'multiline':False]
