['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' Directly nested objects are not matched with $elemMatch.  An intervening array is','line_number':97,'multiline':False]
['text':' required.','line_number':98,'multiline':False]
['text':' The entry within the $elemMatch array is reported.','line_number':137,'multiline':False]
['text':' The entry within a parent of the $elemMatch array is reported.','line_number':143,'multiline':False]
['text':'*
TEST(ElemMatchObjectMatchExpression, MatchesIndexKey) {
    auto baseOperand = BSON("b" << 5);
    auto eq = std::make_unique<EqualityMatchExpression>();
    ASSERT(eq->init("b", baseOperand["b"]).isOK());
    auto op = ElemMatchObjectMatchExpression{};
    ASSERT(op.init("a", std::move(eq)).isOK());
    auto indexSpec = IndexSpec{BSON("a.b" << 1)};
    auto indexKey = BSON("" << "5");
    ASSERT(MatchMatchExpression::PartialMatchResult_Unknown ==
           op.matchesIndexKey(indexKey, indexSpec));
}
','line_number':174,'multiline':True]
['text':' Directly nested objects are not matched with $elemMatch.  An intervening array is','line_number':221,'multiline':False]
['text':' required.','line_number':222,'multiline':False]
['text':' The entry within the $elemMatch array is reported.','line_number':261,'multiline':False]
['text':' The entry within a parent of the $elemMatch array is reported.','line_number':266,'multiline':False]
['text':'*
TEST(ElemMatchValueMatchExpression, MatchesIndexKey) {
    auto baseOperand = BSON("$lt" << 5);
    auto lt = std::make_unique<LtOp>();
    ASSERT(lt->init("a", baseOperand["$lt"]).isOK());
    auto op = ElemMatchValueMatchExpression{};
    ASSERT(op.init("a", std::move(lt)).isOK());
    auto indexSpec = IndexSpec{BSON("a" << 1)};
    auto indexKey = BSON("" << "3");
    ASSERT(MatchMatchExpression::PartialMatchResult_Unknown ==
           op.matchesIndexKey(indexKey, indexSpec));
}
','line_number':293,'multiline':True]
['text':' and1 = { a : 1, b : 1 }','line_number':317,'multiline':False]
['text':' elemMatch1 = { x : { $elemMatch : { a : 1, b : 1 } } }','line_number':320,'multiline':False]
['text':' and2 = { a : 2, b : 2 }','line_number':331,'multiline':False]
['text':' elemMatch2 = { x : { $elemMatch : { a : 2, b : 2 } } }','line_number':334,'multiline':False]
['text':' elemMatch1 = { x : { $elemMatch : { $gt : 1 , $lt : 10 } } }','line_number':368,'multiline':False]
['text':' elemMatch2 = { x : { $elemMatch : { $gt : 101 , $lt : 110 } } }','line_number':379,'multiline':False]
['text':' Non arrays do not match.','line_number':410,'multiline':False]
['text':' Arrays are not unwound to look for matching subarrays.','line_number':424,'multiline':False]
['text':' A numerically referenced nested array is matched.','line_number':430,'multiline':False]
['text':'*
   TEST(SizeMatchExpression, MatchesIndexKey) {
   auto operand = BSON("$size" << 4);
   auto size = SizeMatchExpression{};
   ASSERT(size.init("a", operand["$size"]).isOK());
   auto indexSpec = IndexSpec{BSON("a" << 1)};
   auto indexKey = BSON("" << 1);
   ASSERT(MatchMatchExpression::PartialMatchResult_Unknown ==
          size.matchesIndexKey(indexKey, indexSpec));
   }
','line_number':468,'multiline':True]
['text':' namespace mongo','line_number':480,'multiline':False]
