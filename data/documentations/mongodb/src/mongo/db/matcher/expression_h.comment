['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 * Enabling the disableMatchExpressionOptimization fail point will stop match expressions from
 * being optimized.
 ','line_number':66,'multiline':True]
['text':' tree types','line_number':85,'multiline':False]
['text':' array types','line_number':89,'multiline':False]
['text':' leaf types','line_number':94,'multiline':False]
['text':' Negations.','line_number':109,'multiline':False]
['text':' special types','line_number':113,'multiline':False]
['text':' Boolean expressions.','line_number':119,'multiline':False]
['text':' Things that we parse but cannot be answered without an index.','line_number':123,'multiline':False]
['text':' Expressions that are only created internally','line_number':127,'multiline':False]
['text':' Used to represent expression language comparisons in a match expression tree, since $eq,','line_number':131,'multiline':False]
['text':' $gt, $gte, $lt and $lte in the expression language has different semantics than their','line_number':132,'multiline':False]
['text':' respective match expressions.','line_number':133,'multiline':False]
['text':' Used to represent the comparison to a hashed index key value.','line_number':140,'multiline':False]
['text':' JSON Schema expressions.','line_number':143,'multiline':False]
['text':'*
     * An iterator to walk through the children expressions of the given MatchExpressions. Along
     * with the defined 'begin()' and 'end()' functions, which take a reference to a
     * MatchExpression, this iterator can be used with a range-based loop. For example,
     *
     *    const MatchExpression* expr = makeSomeExpression();
     *    for (const auto& child : *expr) {
     *       ...
     *    }
     *
     * When incrementing the iterator, no checks are made to ensure the iterator does not pass
     * beyond the boundary. The caller is responsible to compare the iterator against an iterator
     * referring to the past-the-end child in the given expression, which can be obtained using
     * the 'mongo::end(*expr)' call.
     ','line_number':167,'multiline':True]
['text':'*
     * Tracks the information needed to generate a document validation error for a
     * MatchExpression node.
     ','line_number':237,'multiline':True]
['text':'*
         * Enumerated type describing what action to take when generating errors for document
         * validation failures.
         ','line_number':242,'multiline':True]
['text':' Do not generate an error for this MatchExpression or any of its children.','line_number':247,'multiline':False]
['text':' Do not generate an error for this MatchExpression, but iterate over any children','line_number':249,'multiline':False]
['text':' as they may provide useful information. This is particularly useful for translated','line_number':250,'multiline':False]
['text':' jsonSchema keywords.','line_number':251,'multiline':False]
['text':' Generate an error message.','line_number':253,'multiline':False]
['text':'*
         * JSON Schema annotations - 'title' and 'description' attributes.
         ','line_number':257,'multiline':True]
['text':'*
             * Constructs JSON schema annotations with annotation fields not set.
             ','line_number':261,'multiline':True]
['text':'*
             * Constructs JSON schema annotations from JSON Schema element 'jsonSchemaElement'.
             ','line_number':266,'multiline':True]
['text':'*
         * Constructs an annotation for a MatchExpression which does not contribute to error output.
         ','line_number':277,'multiline':True]
['text':'*
         * Constructs a complete annotation for a MatchExpression which contributes to error output.
         ','line_number':285,'multiline':True]
['text':' Tracks either the name of a user facing MQL operator or an internal name for some logical','line_number':298,'multiline':False]
['text':' entity to be used for dispatching to the correct handling logic during error generation.','line_number':299,'multiline':False]
['text':' All internal names are denoted by an underscore prefix.','line_number':300,'multiline':False]
['text':' Tracks the original expression as specified by the user.','line_number':302,'multiline':False]
['text':'*
     * Make simplifying changes to the structure of a MatchExpression tree without altering its
     * semantics. This function may return:
     *   - a pointer to the original, unmodified MatchExpression,
     *   - a pointer to the original MatchExpression that has been mutated, or
     *   - a pointer to a new MatchExpression.
     *
     * The value of 'expression' must not be nullptr.
     * 'enableSimplification' parameter controls Boolean Expression Simplifier.
     ','line_number':308,'multiline':True]
['text':'*
     * Traverses expression tree post-order. Sorts children at each non-leaf node by (MatchType,
     * path(), children, number of children).
     ','line_number':321,'multiline':True]
['text':'*
     * Convenience method which normalizes a MatchExpression tree by optimizing and then sorting it.
     ','line_number':327,'multiline':True]
['text':'*
     * Assigns an optional input parameter ID to each node which is eligible for
     * auto-parameterization.
     * - tree - The MatchExpression to be parameterized.
     * - maxParamCount - Optional maximum number of parameters that can be created. If the
     *   number of parameters would exceed this value, no parameterization will be performed.
     * - startingParamId - Optional first parameter ID to use. This enables parameterizing a forest
     *   of match expressions, where each tree continues IDs where the prior one left off.
     * - parameterized - Optional output argument. If non-null, the method sets this output to
     *   indicate whether parameterization was actually done.
     *
     * Returns a vector-form map to a parameterized MatchExpression from assigned InputParamId. (The
     * vector index serves as the map key.)
     ','line_number':333,'multiline':True]
['text':'*
     * Sets max param count in MatchExpression::parameterize to 0, clearing MatchExpression
     * auto-parameterization before CanonicalQuery to ABT translation.
     ','line_number':353,'multiline':True]
['text':'','line_number':362,'multiline':False]
['text':' Structural/AST information','line_number':363,'multiline':False]
['text':'','line_number':364,'multiline':False]
['text':'*
     * What type is the node?  See MatchType above.
     ','line_number':366,'multiline':True]
['text':'*
     * Returns the number of child MatchExpression nodes contained by this node. It is expected that
     * a node that does not support child nodes will return 0.
     ','line_number':373,'multiline':True]
['text':'*
     * Returns the child of the current node at zero-based position 'index'. 'index' must be within
     * the range of [0, numChildren()).
     ','line_number':379,'multiline':True]
['text':'*
     * Delegates to the specified child unique_ptr's reset() method in order to replace child
     * expressions while traversing the tree.
     ','line_number':386,'multiline':True]
['text':'*
     * For MatchExpression nodes that can participate in tree restructuring (like AND/OR),
     * returns a non-const vector of MatchExpression* child nodes. If the MatchExpression does
     * not participated in tree restructuring, returns boost::none. Do not use to traverse the
     * MatchExpression tree. Use numChildren() and getChild(), which provide access to all
     * nodes.
     ','line_number':392,'multiline':True]
['text':'*
     * Get the path of the leaf.  Returns StringData() if there is no path (node is logical).
     ','line_number':401,'multiline':True]
['text':'*
     * Similar to path(), but returns a FieldRef. Returns nullptr if there is no path.
     ','line_number':407,'multiline':True]
['text':' Expressions that are leaves on the AST, these do not have any children.','line_number':415,'multiline':False]
['text':' Logical Expressions such as $and, $or, etc. that do not have a path and may have','line_number':417,'multiline':False]
['text':' one or more children.','line_number':418,'multiline':False]
['text':' Expressions that operate on arrays only.','line_number':420,'multiline':False]
['text':' Expressions that don't fall into any particular bucket.','line_number':422,'multiline':False]
['text':'*
     * This method will perform a clone of the entire match expression tree, but will not clone the
     * memory pointed to by underlying BSONElements. To perform a "deep clone" use this method and
     * also ensure that the buffer held by the underlying BSONObj will not be destroyed during the
     * lifetime of the clone.
     ','line_number':428,'multiline':True]
['text':' XXX document','line_number':436,'multiline':False]
['text':'','line_number':439,'multiline':False]
['text':' Determine if a document satisfies the tree-predicate.','line_number':440,'multiline':False]
['text':'','line_number':441,'multiline':False]
['text':'*
     * Determines if 'elem' would satisfy the predicate if wrapped with the top-level field name of
     * the predicate. Does not check that the predicate has a single top-level field name. For
     * example, given the object obj={a: [5]}, the predicate {i: {$gt: 0}} would match the element
     * obj["a"]["0"] because it performs the match as if the element at "a.0" were the BSONObj {i:
     * 5}.
     ','line_number':447,'multiline':True]
['text':'*
     * Determines if the element satisfies the tree-predicate.
     * Not valid for all expressions (e.g. $where); in those cases, returns false.
     ','line_number':456,'multiline':True]
['text':'','line_number':463,'multiline':False]
['text':' Tagging mechanism: Hang data off of the tree for retrieval later.','line_number':464,'multiline':False]
['text':'','line_number':465,'multiline':False]
['text':'*
     * Takes ownership
     ','line_number':476,'multiline':True]
['text':'*
     * Set the collator 'collator' on this match expression and all its children.
     *
     * 'collator' must outlive the match expression.
     ','line_number':492,'multiline':True]
['text':'*
     * Serialize the MatchExpression to BSON, appending to 'out'.
     *
     * See 'SerializationOptions' for some options.
     *
     * Generally, the output of this method is expected to be a valid query object that, when
     * parsed, produces a logically equivalent MatchExpression. However, if special options are set,
     * this no longer holds.
     *
     * If 'options.literalPolicy' is set to 'kToDebugTypeString', the result is no longer expected
     * to re-parse, since we will put strings in places where strings may not be accpeted
     * syntactically (e.g. a number is always expected, as in with the $mod expression).
     *
     * includePath:
     * If set to false, serializes without including the path. For example {a: {$gt: 2}} would
     * serialize as just {$gt: 2}.
     *
     * It is expected that most callers want to set 'includePath' to true to get a correct
     * serialization. Internally, we may set this to false if we have a situation where an outer
     * expression serializes a path and we don't want to repeat the path in the inner expression.

     * For example in {a: {$elemMatch: {$eq: 2}}} the "a" is serialized by the $elemMatch, and
     * should not be serialized by the EQ child.
     * The $elemMatch will serialize {a: {$elemMatch: <recurse>}} and the EQ will serialize just
     * {$eq: 2} instead of its usual {a: {$eq: 2}}.
     ','line_number':499,'multiline':True]
['text':'*
     * Convenience method which serializes this MatchExpression to a BSONObj. See the override with
     * a BSONObjBuilder* argument for details.
     ','line_number':529,'multiline':True]
['text':'*
     * Returns true if this expression will always evaluate to false, such as an $or with no
     * children.
     ','line_number':539,'multiline':True]
['text':'*
     * Returns true if this expression will always evaluate to true, such as an $and with no
     * children.
     ','line_number':547,'multiline':True]
['text':' Returns nullptr if this MatchExpression node has no annotation.','line_number':566,'multiline':False]
['text':'','line_number':575,'multiline':False]
['text':' Debug information','line_number':576,'multiline':False]
['text':'','line_number':577,'multiline':False]
['text':'*
     * Returns a debug string representing the match expression tree, including any tags attached
     * for planning. This debug string format may spill across multiple lines, so it is not suitable
     * for logging at low debug levels or for error messages.
     ','line_number':579,'multiline':True]
['text':'*
     * Serializes this MatchExpression to BSON, and then returns a standard string representation of
     * the resulting BSON object.
     ','line_number':587,'multiline':True]
['text':'*
     * An ExpressionOptimizerFunc implements tree simplifications for a MatchExpression tree with a
     * specific type of MatchExpression at the root. Except for requiring a specific MatchExpression
     * subclass, an ExpressionOptimizerFunc has the same requirements and functionality as described
     * in the specification of MatchExpression::getOptimizer(std::unique_ptr<MatchExpression>).
     ','line_number':594,'multiline':True]
['text':'*
     * Subclasses that are collation-aware must implement this method in order to capture changes
     * to the collator that occur after initialization time.
     ','line_number':603,'multiline':True]
['text':'* Adds the tag information to the debug string. ','line_number':611,'multiline':True]
['text':'*
     * Subclasses should implement this function to provide an ExpressionOptimizerFunc specific to
     * the subclass. This function is only called by
     * MatchExpression::optimize(std::unique_ptr<MatchExpression>), which is responsible for calling
     * MatchExpression::getOptimizer() on its input MatchExpression and then passing the same
     * MatchExpression to the resulting ExpressionOptimizerFunc. There should be no other callers
     * to this function.
     *
     * Any MatchExpression subclass that stores child MatchExpression objects is responsible for
     * returning an ExpressionOptimizerFunc that recursively calls
     * MatchExpression::optimize(std::unique_ptr<MatchExpression>) on those children.
     *
     * See the descriptions of MatchExpression::optimize(std::unique_ptr<MatchExpression>) and
     * ExpressionOptimizerFunc for additional explanation of their interfaces and functionality.
     ','line_number':624,'multiline':True]
['text':' namespace mongo','line_number':661,'multiline':False]
