['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 * Returns true if the documents matched by 'lhs' are a subset of the documents matched by
 * 'rhs', i.e. a document matched by 'lhs' must also be matched by 'rhs', and false otherwise.
 ','line_number':86,'multiline':True]
['text':' An expression can only match a subset of the documents matched by another if they are','line_number':91,'multiline':False]
['text':' comparing the same field.','line_number':92,'multiline':False]
['text':' Special case the handling for NaN values: NaN compares equal only to itself.','line_number':104,'multiline':False]
['text':' Either collator may be used by compareElements() here, since either the collators are','line_number':117,'multiline':False]
['text':' the same or lhsData does not contain string comparison.','line_number':118,'multiline':False]
['text':' Check whether the two expressions are equivalent.','line_number':122,'multiline':False]
['text':' An expression can only match a subset of the documents matched by another if they are','line_number':161,'multiline':False]
['text':' comparing the same field.','line_number':162,'multiline':False]
['text':' Check whether the two expressions are equivalent.','line_number':178,'multiline':False]
['text':'','line_number':190,'multiline':False]
['text':'*
 * Returns true if the documents matched by 'lhs' are a subset of the documents matched by
 * 'rhs', i.e. a document matched by 'lhs' must also be matched by 'rhs', and false otherwise.
 *
 * This overload handles the $_internalExpr family of comparisons.
 ','line_number':216,'multiline':True]
['text':' An expression can only match a subset of the documents matched by another if they are','line_number':223,'multiline':False]
['text':' comparing the same field.','line_number':224,'multiline':False]
['text':'*
 * Returns true if the documents matched by 'lhs' are a subset of the documents matched by
 * 'rhs', i.e. a document matched by 'lhs' must also be matched by 'rhs', and false otherwise.
 *
 * This overload handles comparisons such as $lt, $eq, $gte, but not $_internalExprLt, etc.
 ','line_number':236,'multiline':True]
['text':' An expression can only match a subset of the documents matched by another if they are','line_number':243,'multiline':False]
['text':' comparing the same field.','line_number':244,'multiline':False]
['text':' Each element in the $in-array represents an equality predicate.','line_number':259,'multiline':False]
['text':'*
 * Returns true if the documents matched by 'lhs' are a subset of the documents matched by
 * 'rhs', i.e. a document matched by 'lhs' must also be matched by 'rhs', and false otherwise.
 ','line_number':271,'multiline':True]
['text':' An expression can only match a subset of the documents matched by another if they are','line_number':276,'multiline':False]
['text':' comparing the same field.','line_number':277,'multiline':False]
['text':' Each element in the $in-array represents an equality predicate.','line_number':287,'multiline':False]
['text':'*
 * Returns true if the documents matched by 'lhs' are a subset of the documents matched by
 * 'rhs', i.e. a document matched by 'lhs' must also be matched by 'rhs', and false otherwise.
 ','line_number':297,'multiline':True]
['text':' An expression can only match a subset of the documents matched by another if they are','line_number':302,'multiline':False]
['text':' comparing the same field. Defer checking the path for $not expressions until the','line_number':303,'multiline':False]
['text':' subexpression is examined.','line_number':304,'multiline':False]
['text':' The CompareMatchExpression constructor prohibits creating a match expression with EOO or','line_number':311,'multiline':False]
['text':' Undefined types, so only need to ensure that the value is not of type jstNULL.','line_number':312,'multiline':False]
['text':' An expression can only match a subset of the documents matched by another if they are','line_number':331,'multiline':False]
['text':' comparing the same field.','line_number':332,'multiline':False]
['text':'*
 * Creates a MatchExpression that is equivalent to {$and: [children[0], children[1]...]}.
 ','line_number':356,'multiline':True]
['text':'*
 * Creates a MatchExpression that is equivalent to {$nor: [children[0], children[1]...]}.
 ','line_number':375,'multiline':True]
['text':'*
 * Attempt to split 'expr' into two MatchExpressions according to 'shouldSplitOut', which describes
 * the conditions under which its argument can be split from 'expr'. Returns two pointers, where
 * each new MatchExpression contains a portion of 'expr'. The first contains the parts of 'expr'
 * which satisfy 'shouldSplitOut', and the second are the remaining parts of 'expr'.
 ','line_number':390,'multiline':True]
['text':' 'expr' satisfies our split condition and can be completely split out.','line_number':403,'multiline':False]
['text':' At this point, the content of 'renameables' is no longer applicable because we chose not to','line_number':407,'multiline':False]
['text':' proceed with the wholesale extraction of 'expr', or we try to find portion of 'expr' that can','line_number':408,'multiline':False]
['text':' be split out by recursing down. In either case, we want to restart our renamable analysis and','line_number':409,'multiline':False]
['text':' reset the state.','line_number':410,'multiline':False]
['text':' 'expr' is a leaf and cannot be split out.','line_number':414,'multiline':False]
['text':' Accumulate the renameable expressions from the children.','line_number':433,'multiline':False]
['text':' We can split a $nor because !(x | y) is logically equivalent to !x & !y.','line_number':444,'multiline':False]
['text':' However, we cannot split each child individually; instead, we must look for a wholly','line_number':446,'multiline':False]
['text':' independent child to split off by itself. As an example of why, with 'b' in','line_number':447,'multiline':False]
['text':' 'fields': $nor: [{$and: [{a: 1}, {b: 1}]}]} will match if a is not 1, or if b is not','line_number':448,'multiline':False]
['text':' 1. However, if we split this into: {$nor: [{$and: [{a: 1}]}]}, and','line_number':449,'multiline':False]
['text':' {$nor: [{$and: [{b: 1}]}]}, a document will only pass both stages if neither a nor b','line_number':450,'multiline':False]
['text':' is equal to 1.','line_number':451,'multiline':False]
['text':' Accumulate the renameable expressions from the children.','line_number':458,'multiline':False]
['text':' We haven't satisfied the split condition, so 'expr' belongs in the remaining match.','line_number':470,'multiline':False]
['text':' In order for this to be correct, the dependencies of the filter by column must be exactly','line_number':488,'multiline':False]
['text':' this column.','line_number':489,'multiline':False]
['text':' First predicate for this path, just put it in directly.','line_number':493,'multiline':False]
['text':' We have at least one predicate for this path already. Put all the predicates for the path','line_number':496,'multiline':False]
['text':' into a giant $and clause. Note this might have to change once we start supporting $or','line_number':497,'multiline':False]
['text':' predicates.','line_number':498,'multiline':False]
['text':' This is the second predicate, we need to make the $and and put in both predicates:','line_number':500,'multiline':False]
['text':' {$and: [<existing>, 'me']}.','line_number':501,'multiline':False]
['text':'*
 * Here we check whether the comparison can work with the given value. Objects and arrays are
 * generally not permitted. Objects can't work because the paths will be split apart in the columnar
 * index. We could do arrays of scalars since we would have all that information in the index, but
 * it proved complex to integrate due to the interface with the matcher. It expects to get a
 * BSONElement for the whole Array but we'd like to avoid materializing that.
 *
 * One exception to the above: We can support EQ with empty objects and empty arrays since those are
 * stored as values in CSI. Maybe could also support LT and LTE, but those don't seem as important
 * so are left for future work.
 ','line_number':521,'multiline':True]
['text':' MinKey and MaxKey have special semantics for comparison to objects.','line_number':535,'multiline':False]
['text':' We support all other types, except null, since it is equivalent to x==null || !exists(x).','line_number':542,'multiline':False]
['text':'*
 * Helper for the main public API. Returns the residual predicate and adds any columnar predicates
 * into 'out', if they can be pushed down on their own, or into 'pending' if they can be pushed down
 * only if there are fully supported predicates on the same path.
 ','line_number':546,'multiline':True]
['text':' These are always safe since they will never match documents missing their field, or where','line_number':556,'multiline':False]
['text':' the element is an object or array.','line_number':557,'multiline':False]
['text':' Note: {$exists: false} is represented as {$not: {$exists: true}}.','line_number':565,'multiline':False]
['text':' We can support negation of all supported operators, except AND. The unsupported ops','line_number':615,'multiline':False]
['text':' would manifest as non-null residual.','line_number':616,'multiline':False]
['text':' path ','line_number':628,'multiline':True]
['text':' We don't currently handle any of these cases, but some may be possible in the future.','line_number':631,'multiline':False]
['text':' This one should be feasible. May be valuable.','line_number':635,'multiline':False]
['text':' This one could be valuable for $lookup','line_number':641,'multiline':False]
['text':' namespace','line_number':677,'multiline':False]
['text':' lhs is the query and rhs is the index.','line_number':695,'multiline':False]
['text':' $and/$or should be evaluated prior to leaf MatchExpressions. Additionally any recursion','line_number':703,'multiline':False]
['text':' should be done through the 'rhs' expression prior to 'lhs'. Swapping the recursion order','line_number':704,'multiline':False]
['text':' would cause a comparison like the following to fail as neither the 'a' or 'b' left hand','line_number':705,'multiline':False]
['text':' clause would match the $and on the right hand side on their own.','line_number':706,'multiline':False]
['text':'     lhs: {a:5, b:5}','line_number':707,'multiline':False]
['text':'     rhs: {$or: [{a: 3}, {$and: [{a: 5}, {b: 5}]}]}','line_number':708,'multiline':False]
['text':' 'lhs' must match a subset of the documents matched by 'rhs'.','line_number':711,'multiline':False]
['text':' 'lhs' must match a subset of the documents matched by each clause of 'rhs'.','line_number':721,'multiline':False]
['text':' At least one clause of 'lhs' must match a subset of the documents matched by 'rhs'.','line_number':731,'multiline':False]
['text':' Every clause of 'lhs' must match a subset of the documents matched by 'rhs'.','line_number':741,'multiline':False]
['text':' Confirm that the "field" arguments match before continuing.','line_number':757,'multiline':False]
['text':' The region described by query is within the region captured by the index.','line_number':765,'multiline':False]
['text':' For example, a query over the $geometry for the city of Houston is covered by an','line_number':766,'multiline':False]
['text':' index over the $geometry for the entire state of texas. Therefore this index can be','line_number':767,'multiline':False]
['text':' used in a potential solution for this query.','line_number':768,'multiline':False]
['text':' lhs is the query, eg {loc: {$geoWithin: {$geometry: {type: "Polygon", coordinates:','line_number':774,'multiline':False]
['text':' [...]}}}} geoWithinObj is {$geoWithin: {$geometry: {type: "Polygon", coordinates:','line_number':775,'multiline':False]
['text':' [...]}}} geoWithinElement is '$geoWithin: {$geometry: {type: "Polygon", coordinates:','line_number':776,'multiline':False]
['text':' [...]}}' geometryObj is  {$geometry: {type: "Polygon", coordinates: [...]}}','line_number':777,'multiline':False]
['text':' geometryElement '$geometry: {type: "Polygon", coordinates: [...]}'','line_number':778,'multiline':False]
['text':' We only handle geoWithin queries','line_number':781,'multiline':False]
['text':' The region described by query is within the region captured by the index.','line_number':789,'multiline':False]
['text':' Therefore this index can be used in a potential solution for this query.','line_number':790,'multiline':False]
['text':' Type requirements for the hashOnlyRenameableMatchExpressionChildrenImpl() & isIndependentOfImpl()','line_number':814,'multiline':False]
['text':' & isOnlyDependentOnImpl() functions','line_number':815,'multiline':False]
['text':' const MatchExpression& should be passed with no 'renameables' argument to traverse the expression','line_number':819,'multiline':False]
['text':' tree in read-only mode.','line_number':820,'multiline':False]
['text':' MatchExpression& should be passed with a single 'renameables' argument to traverse the expression','line_number':826,'multiline':False]
['text':' tree in read-write mode.','line_number':827,'multiline':False]
['text':' Traversing the expression tree in read-write mode is same as the 'shouldCollectRenameables'.','line_number':832,'multiline':False]
['text':' We traverse the expression tree in either read-only mode or read-write mode.','line_number':836,'multiline':False]
['text':' The second element is ignored for $expr.','line_number':848,'multiline':False]
['text':' Cannot proceed to dependency or independence checks if any attempted rename would fail.','line_number':870,'multiline':False]
['text':' At this point we know that p1 <= *i2, so it may be identical or a path prefix.','line_number':937,'multiline':False]
['text':' We will take advantage of the fact that paths with common ancestors are ordered together in','line_number':946,'multiline':False]
['text':' our ordering. Thus if there are any paths that contain a common ancestor, they will be right','line_number':947,'multiline':False]
['text':' next to each other - unless there are multiple pairs, in which case at least one pair will be','line_number':948,'multiline':False]
['text':' right next to each other.','line_number':949,'multiline':False]
['text':' all non-empty','line_number':975,'multiline':False]
['text':' Any expression types that do not have renaming implemented cannot have their independence','line_number':993,'multiline':False]
['text':' evaluated here. See applyRenamesToExpression().','line_number':994,'multiline':False]
['text':' Match expressions that generate random numbers can't be safely split out and pushed down.','line_number':1011,'multiline':False]
['text':' Any expression types that do not have renaming implemented cannot have their independence','line_number':1039,'multiline':False]
['text':' evaluated here. See applyRenamesToExpression().','line_number':1040,'multiline':False]
['text':' Any expression types that do not have renaming implemented cannot have their independence','line_number':1051,'multiline':False]
['text':' evaluated here. See applyRenamesToExpression().','line_number':1052,'multiline':False]
['text':' The approach below takes only O(n log n) time.','line_number':1057,'multiline':False]
['text':' Find the unique dependencies of pathSet.','line_number':1059,'multiline':False]
['text':' Now add the match expression's paths and see if the dependencies are the same.','line_number':1064,'multiline':False]
['text':' Match expressions that generate random numbers can't be safely split out and pushed down.','line_number':1067,'multiline':False]
['text':'= isIndependentOf ','line_number':1095,'multiline':True]
['text':' PathMatchExpression.','line_number':1110,'multiline':False]
['text':' ExprMatchExpression.','line_number':1113,'multiline':False]
['text':'*
 * Helper function for assumeImpreciseInternalExprNodesReturnTrue(). Given a tree-like
 * match expression (one which can have multiple children e.g. AND, OR, NOR), walk it and
 * apply the assumeImpreciseInternalExprNodesReturnTrue() to each child.
 *
 * If a child is trivially true or trivially false, the expression is simplified based on the
 * callbacks onTriviallyTrue() and onTriviallyFalse(). A return of nullptr from the callback
 * indicates that the node should be removed, and a return value of non-null indicates that the
 * non-null value should replace the entire match expression.
 ','line_number':1147,'multiline':True]
['text':' namespace','line_number':1192,'multiline':False]
['text':' Remove any trivially true node.','line_number':1202,'multiline':False]
['text':' If any false node is found, that becomes the new root.','line_number':1204,'multiline':False]
['text':' Any trivially true node makes this OR true.','line_number':1210,'multiline':False]
['text':' If any false node is found, remove it.','line_number':1212,'multiline':False]
['text':' Any trivially true node makes this entire node false.','line_number':1218,'multiline':False]
['text':' If any false node is found, remove it.','line_number':1220,'multiline':False]
['text':' Let's combine pending expressions with those in 'out', if possible.','line_number':1248,'multiline':False]
['text':' Do not create nested ANDs.','line_number':1254,'multiline':False]
['text':' Remove the path from the 'pending' map.','line_number':1264,'multiline':False]
['text':' The unmatched pending predicates have to be done as residual.','line_number':1277,'multiline':False]
['text':' namespace expression','line_number':1302,'multiline':False]
['text':' namespace mongo','line_number':1303,'multiline':False]
