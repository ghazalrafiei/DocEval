['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' IWYU pragma: keep','line_number':36,'multiline':False]
['text':' IWYU pragma: keep','line_number':44,'multiline':False]
['text':' IWYU pragma: keep','line_number':49,'multiline':False]
['text':'*
 * Generates a new file name on each call using a static, atomic and monotonically increasing
 * number.
 *
 * Each user of the Sorter must implement this function to ensure that all temporary files that the
 * Sorter instances produce are uniquely identified using a unique file name extension with separate
 * atomic variable. This is necessary because the sorter.cpp code is separately included in multiple
 * places, rather than compiled in one place and linked, and so cannot provide a globally unique ID.
 ','line_number':58,'multiline':True]
['text':' namespace mongo','line_number':72,'multiline':False]
['text':' Need access to internal classes','line_number':74,'multiline':False]
['text':'','line_number':84,'multiline':False]
['text':' Sorter framework testing utilities','line_number':85,'multiline':False]
['text':'','line_number':86,'multiline':False]
['text':'/ members for Sorter','line_number':95,'multiline':False]
['text':' unused','line_number':96,'multiline':False]
['text':' make sure more() is safe to call twice','line_number':235,'multiline':False]
['text':' make sure more() is safe to call twice','line_number':266,'multiline':False]
['text':'*
 * Spills the contents of inputIter to a file and returns a FileIterator for reading the data back.
 * This is needed because the MergeIterator currently requires that it is merging from sorted spill
 * file segments (as opposed to any other kind of iterator).
 ','line_number':298,'multiline':True]
['text':' sorterTracker ','line_number':310,'multiline':True]
['text':' Spill iterator outputs to a file and obtain a new iterator for it.','line_number':332,'multiline':False]
['text':'','line_number':338,'multiline':False]
['text':' Tests for Sorter framework internals','line_number':339,'multiline':False]
['text':'','line_number':340,'multiline':False]
['text':' make sure InMemIterator doesn't do any reordering on it's own','line_number':357,'multiline':False]
['text':' small','line_number':400,'multiline':False]
['text':' big','line_number':407,'multiline':False]
['text':' File size only increases if buffer size exceeds limit and spills. Each spill','line_number':432,'multiline':False]
['text':' includes the buffer and the size of the spill.','line_number':433,'multiline':False]
['text':' Anything left in-memory is spilled to disk when sorter.done().','line_number':440,'multiline':False]
['text':' test empty (no inputs)','line_number':451,'multiline':False]
['text':' test empty (only empty inputs)','line_number':457,'multiline':False]
['text':' test ASC','line_number':466,'multiline':False]
['text':' 1, 3, ... 19','line_number':468,'multiline':False]
['text':' 0, 2, ... 18','line_number':470,'multiline':False]
['text':' test DESC with an empty source','line_number':477,'multiline':False]
['text':' 30, 27, ... 3','line_number':479,'multiline':False]
['text':' 29, 26, ... 2','line_number':480,'multiline':False]
['text':' 28, 25, ... 1','line_number':481,'multiline':False]
['text':' test Limit','line_number':487,'multiline':False]
['text':' 1, 3, ... 19','line_number':489,'multiline':False]
['text':' 0, 2, ... 18','line_number':490,'multiline':False]
['text':' test ASC with additional merging','line_number':497,'multiline':False]
['text':' 0, 1, ... 4','line_number':500,'multiline':False]
['text':' 5, 6, ... 9','line_number':501,'multiline':False]
['text':' 10, 11, ... 14','line_number':502,'multiline':False]
['text':' 15, 16, ... 19','line_number':503,'multiline':False]
['text':' test empty (no limit)','line_number':531,'multiline':False]
['text':' test empty (limit 1)','line_number':535,'multiline':False]
['text':' test empty (limit 10)','line_number':539,'multiline':False]
['text':' test all data ASC','line_number':545,'multiline':False]
['text':' test all data DESC','line_number':554,'multiline':False]
['text':' The debug builds are too slow to run these tests.','line_number':564,'multiline':False]
['text':' Among other things, MSVC++ makes all heap functions O(N) not O(logN).','line_number':565,'multiline':False]
['text':' merge all data ASC','line_number':567,'multiline':False]
['text':' merge all data DESC and use multiple threads to insert','line_number':585,'multiline':False]
['text':' Run the tests without checking the Sorter ranges. This means that','line_number':607,'multiline':False]
['text':' Sorter::persistDataForShutdown() will not be called, so we can verify that the Sorter','line_number':608,'multiline':False]
['text':' properly cleans up its files upon destruction.','line_number':609,'multiline':False]
['text':' Run the tests checking the Sorter ranges. This allows us to verify that','line_number':613,'multiline':False]
['text':' Sorter::persistDataForShutdown() correctly persists the Sorter data.','line_number':614,'multiline':False]
['text':' Two sorters have executed','line_number':627,'multiline':False]
['text':' Six sorters have executed','line_number':630,'multiline':False]
['text':' add data to the sorter','line_number':636,'multiline':False]
['text':' returns an iterator with the correct results','line_number':649,'multiline':False]
['text':' 0, 1, ... 4','line_number':651,'multiline':False]
['text':' like correct but with opposite sort direction','line_number':654,'multiline':False]
['text':' 4, 3, ... 0','line_number':656,'multiline':False]
['text':' It is safe to ignore / overwrite any part of options','line_number':667,'multiline':False]
['text':' Make a new sorter with desired opts and comp. Opts may be ignored but not comp','line_number':673,'multiline':False]
['text':' returns an iterator with the correct results','line_number':726,'multiline':False]
['text':' 0, 1, ... 4','line_number':728,'multiline':False]
['text':' like correct but with opposite sort direction','line_number':731,'multiline':False]
['text':' 4, 3, ... 0','line_number':733,'multiline':False]
['text':' pause returns data still in the original order because we havent reached the limit','line_number':776,'multiline':False]
['text':' pause will return top 5 elements in some order (they are from a heap but not yet sorted)','line_number':788,'multiline':False]
['text':' either 4 or 3 depending on asc or desc','line_number':794,'multiline':False]
['text':' check to make sure we only got limit number of entries','line_number':796,'multiline':False]
['text':' returns an iterator with the correct results','line_number':805,'multiline':False]
['text':' like correct but with opposite sort direction','line_number':810,'multiline':False]
['text':' either 4 or -1 depending on asc or desc','line_number':835,'multiline':False]
['text':' check to make sure we only got limit number of entries','line_number':836,'multiline':False]
['text':' returns an iterator with the correct results','line_number':845,'multiline':False]
['text':' like correct but with opposite sort direction','line_number':850,'multiline':False]
['text':' Make sure we use a reasonable number of files when we spill','line_number':895,'multiline':False]
['text':' We add 1 to the calculation since the call to persistDataForShutdown() spills the','line_number':924,'multiline':False]
['text':' remaining in-memory Sorter data to disk, adding one extra range.','line_number':925,'multiline':False]
['text':' As the spills may get merged we'll account for the intermediate spills that happen.','line_number':927,'multiline':False]
['text':' Make sure our tests will spill or not as desired','line_number':954,'multiline':False]
['text':' Make sure we use a reasonable number of files when we spill','line_number':959,'multiline':False]
['text':' For the TopKSorter, the number of ranges depends on the specific composition of the data','line_number':972,'multiline':False]
['text':' being sorted.','line_number':973,'multiline':False]
['text':' namespace SorterTests','line_number':978,'multiline':False]
['text':'random=','line_number':994,'multiline':True]
['text':'random=','line_number':995,'multiline':True]
['text':'random=','line_number':996,'multiline':True]
['text':' limit=1 is special case','line_number':996,'multiline':False]
['text':'random=','line_number':997,'multiline':True]
['text':' limit=1 is special case','line_number':997,'multiline':False]
['text':'random=','line_number':998,'multiline':True]
['text':' fits in mem','line_number':998,'multiline':False]
['text':'random=','line_number':999,'multiline':True]
['text':' fits in mem','line_number':999,'multiline':False]
['text':'random=','line_number':1000,'multiline':True]
['text':' spills','line_number':1000,'multiline':False]
['text':'random=','line_number':1001,'multiline':True]
['text':' spills','line_number':1001,'multiline':False]
['text':' kMaxAsU64<uint64_t> + 1','line_number':1012,'multiline':False]
['text':'*
 * This suite includes test cases for resumable index builds where the Sorter is reconstructed from
 * state persisted to disk during a previous clean shutdown.
 ','line_number':1026,'multiline':True]
['text':' static','line_number':1035,'multiline':False]
['text':' Sample data extracted from resumable_index_build_bulk_load_phase.js test run.','line_number':1038,'multiline':False]
['text':' 16815 - unexpected empty file.','line_number':1106,'multiline':False]
['text':' The number of spills is set when NoLimitSorter is constructed from existing ranges.','line_number':1127,'multiline':False]
['text':' 16817 - error reading file.','line_number':1131,'multiline':False]
['text':' This test uses two sorters. The first sorter is used to persist data to disk in a shutdown','line_number':1147,'multiline':False]
['text':' scenario. On startup, we will restore the original state of the sorter using the persisted','line_number':1148,'multiline':False]
['text':' data.','line_number':1149,'multiline':False]
['text':' On restart, reconstruct sorter from persisted state.','line_number':1162,'multiline':False]
['text':' The number of spills is set when NoLimitSorter is constructed from existing ranges.','line_number':1166,'multiline':False]
['text':' Ensure that the restored sorter can accept additional data.','line_number':1169,'multiline':False]
['text':' Technically this sorter has not sorted anything. It is just merging files.','line_number':1173,'multiline':False]
['text':' Read data from sorter.','line_number':1176,'multiline':False]
['text':' unused','line_number':1244,'multiline':False]
['text':'*
     * Feed the input into the sorter one-by-one, taking any output as soon as it's available.
     ','line_number':1284,'multiline':True]
['text':' Swap 11 and 12.','line_number':1355,'multiline':False]
['text':' 0 and 11 cannot swap.','line_number':1368,'multiline':False]
['text':' 3 and 14 cannot swap.','line_number':1374,'multiline':False]
['text':' This 1 is too far out of order: it's more than 10 away from 15.','line_number':1390,'multiline':False]
['text':' So it will appear too late in the output.','line_number':1391,'multiline':False]
['text':' We will still be hanging on to anything in the range [5, inf).','line_number':1392,'multiline':False]
['text':' So we will have already returned 3, 4.','line_number':1393,'multiline':False]
['text':' Disable input order checking so we can see what happens.','line_number':1398,'multiline':False]
['text':' checkInput ','line_number':1399,'multiline':True]
['text':' Out of order.','line_number':1405,'multiline':False]
['text':' Test that by default, bad input like this would be detected.','line_number':1411,'multiline':False]
['text':' Swap 11 and 12.','line_number':1471,'multiline':False]
['text':' 0 and 11 cannot swap.','line_number':1494,'multiline':False]
['text':' 3 and 14 cannot swap.','line_number':1500,'multiline':False]
['text':' This 1 is too far out of order: it's more than 10 away from 15.','line_number':1521,'multiline':False]
['text':' So it will appear too late in the output.','line_number':1522,'multiline':False]
['text':' We will still be hanging on to anything in the range [5, inf).','line_number':1523,'multiline':False]
['text':' So we will have already returned 3, 4.','line_number':1524,'multiline':False]
['text':' Disable input order checking so we can see what happens.','line_number':1529,'multiline':False]
['text':' checkInput ','line_number':1530,'multiline':True]
['text':' Out of order.','line_number':1536,'multiline':False]
['text':' Test that by default, bad input like this would be detected.','line_number':1544,'multiline':False]
['text':' 0 and 11 cannot swap.','line_number':1562,'multiline':False]
['text':' 3 and 14 cannot swap.','line_number':1568,'multiline':False]
['text':' Also check that the correct values made it into the top K.','line_number':1576,'multiline':False]
['text':' 0 and 11 cannot swap.','line_number':1595,'multiline':False]
['text':' 3 and 14 cannot swap.','line_number':1601,'multiline':False]
['text':' Also check that the correct values made it into the top K.','line_number':1609,'multiline':False]
['text':' ascending ','line_number':1630,'multiline':True]
['text':' Swap 11 and 12.','line_number':1642,'multiline':False]
['text':' ascending ','line_number':1649,'multiline':True]
['text':' 3 and 14 cannot swap.','line_number':1658,'multiline':False]
['text':' 0 and 11 cannot swap.','line_number':1664,'multiline':False]
['text':' ascending ','line_number':1668,'multiline':True]
['text':' This 15 is too far out of order: it's more than 10 away from 3.','line_number':1678,'multiline':False]
['text':' So it will appear too late in the output.','line_number':1679,'multiline':False]
['text':' We will still be hanging on to anything in the range [-inf, 13).','line_number':1680,'multiline':False]
['text':' So we will have already returned 16, 14.','line_number':1681,'multiline':False]
['text':' Disable input order checking so we can see what happens.','line_number':1686,'multiline':False]
['text':' checkInput ','line_number':1687,'multiline':True]
['text':' Out of order.','line_number':1693,'multiline':False]
['text':' Test that by default, bad input like this would be detected.','line_number':1699,'multiline':False]
['text':' After restart(), the sorter accepts new input.','line_number':1717,'multiline':False]
['text':' The new values are compared to each other, but not compared to any of the old values,','line_number':1718,'multiline':False]
['text':' so it's fine for the new values to be smaller even though the sort is ascending.','line_number':1719,'multiline':False]
['text':' restart() can be called any number of times.','line_number':1731,'multiline':False]
['text':' ascending ','line_number':1752,'multiline':True]
['text':' After restart(), the sorter accepts new input.','line_number':1756,'multiline':False]
['text':' The new values are compared to each other, but not compared to any of the old values,','line_number':1757,'multiline':False]
['text':' so it's fine for the new values to be smaller even though the sort is ascending.','line_number':1758,'multiline':False]
['text':' ascending ','line_number':1766,'multiline':True]
['text':' restart() can be called any number of times.','line_number':1770,'multiline':False]
['text':' ascending ','line_number':1778,'multiline':True]
['text':' A limit applies to the entire sorter, not to each partition of a compound sort.','line_number':1783,'multiline':False]
['text':' Example where the limit lands in the first partition.','line_number':1785,'multiline':False]
['text':' Also check that the correct values made it into the top K.','line_number':1797,'multiline':False]
['text':' Example where the limit lands in the second partition.','line_number':1822,'multiline':False]
['text':' Also check that the correct values made it into the top K.','line_number':1842,'multiline':False]
['text':' When each partition is small enough, we don't spill.','line_number':1867,'multiline':False]
['text':' If any individual partition is large enough, we do spill.','line_number':1876,'multiline':False]
['text':' If later partitions are small again, they don't spill.','line_number':1895,'multiline':False]
['text':' namespace','line_number':1906,'multiline':False]
['text':' namespace sorter','line_number':1907,'multiline':False]
['text':' namespace mongo','line_number':1908,'multiline':False]
