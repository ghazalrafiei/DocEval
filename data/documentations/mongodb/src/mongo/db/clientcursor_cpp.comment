['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' cursors normally timeout after an inactivity period to prevent excess memory use','line_number':140,'multiline':False]
['text':' setting this prevents timeout of the cursor in question.','line_number':141,'multiline':False]
['text':' Cursors must be unpinned and deregistered from their cursor manager before being deleted.','line_number':147,'multiline':False]
['text':' Now that the associated PlanExecutor is being destroyed, the recovery unit no longer','line_number':152,'multiline':False]
['text':' needs to keep data pinned.','line_number':153,'multiline':False]
['text':' We manually dispose of the PlanExecutor here to release all acquisitions. This must be','line_number':157,'multiline':False]
['text':' deleted before the yielded acquisitions since the execution plan may maintain pointers to the','line_number':158,'multiline':False]
['text':' TransactionResources.','line_number':159,'multiline':False]
['text':' If we are holding transaction resources we must dispose of them before destroying the object.','line_number':161,'multiline':False]
['text':' Not doing so is a programming failure.','line_number':162,'multiline':False]
['text':' It is discouraged but technically possible for a user to enable queryStats on the mongods of','line_number':171,'multiline':False]
['text':' a replica set. In this case, a cursor will be created for each mongod. However, the','line_number':172,'multiline':False]
['text':' queryStatsKey is behind a unique_ptr on CurOp. The ClientCursor constructor std::moves the','line_number':173,'multiline':False]
['text':' queryStatsKey so it uniquely owns it (and also makes the queryStatsKey on CurOp now a','line_number':174,'multiline':False]
['text':' nullptr) and copies over the queryStatsKeyHash as the latter is a cheap copy.','line_number':175,'multiline':False]
['text':' In the case of sharded $search, two cursors will be created per mongod. In this way,','line_number':178,'multiline':False]
['text':' two cursors are part of the same thread/operation, and therefore share a OpCtx/CurOp/OpDebug.','line_number':179,'multiline':False]
['text':' The first cursor that is created will own the queryStatsKey and have a copy of the','line_number':180,'multiline':False]
['text':' queryStatsKeyHash. On the other hand, the second one will only have a copy of the hash since','line_number':181,'multiline':False]
['text':' the queryStatsKey will be null on CurOp from being std::move'd in the first cursor','line_number':182,'multiline':False]
['text':' construction call. To not trip the tassert in writeQueryStats and because all cursors are','line_number':183,'multiline':False]
['text':' guaranteed to have a copy of the hash, we check that the cursor has a key .','line_number':184,'multiline':False]
['text':' Update opCtx of the decorated ExternalDataSourceScopeGuard object so that it can drop virtual','line_number':207,'multiline':False]
['text':' collections in the new 'opCtx'.','line_number':208,'multiline':False]
['text':'','line_number':234,'multiline':False]
['text':' Pin methods','line_number':235,'multiline':False]
['text':'','line_number':236,'multiline':False]
['text':' We keep track of the number of cursors currently pinned. The cursor can become unpinned','line_number':251,'multiline':False]
['text':' either by being released back to the cursor manager or by being deleted. A cursor may be','line_number':252,'multiline':False]
['text':' transferred to another pin object via move construction or move assignment, but in this case','line_number':253,'multiline':False]
['text':' it is still considered pinned.','line_number':254,'multiline':False]
['text':' The pinned cursor is being transferred to us from another pin. The 'other' pin must have a','line_number':264,'multiline':False]
['text':' pinned cursor.','line_number':265,'multiline':False]
['text':' Be sure to set the 'other' pin's cursor to null in order to transfer ownership to ourself.','line_number':269,'multiline':False]
['text':' The pinned cursor is being transferred to us from another pin. The 'other' pin must have a','line_number':281,'multiline':False]
['text':' pinned cursor, and we must not have a cursor.','line_number':282,'multiline':False]
['text':' Copy the cursor pointer to ourselves, but also be sure to set the 'other' pin's cursor to','line_number':287,'multiline':False]
['text':' null so that it no longer has the cursor pinned.','line_number':288,'multiline':False]
['text':' Be sure to set the 'other' pin's cursor to null in order to transfer ownership to ourself.','line_number':289,'multiline':False]
['text':' Unpin the cursor. This must be done by calling into the cursor manager, since the cursor','line_number':325,'multiline':False]
['text':' manager must acquire the appropriate mutex in order to safely perform the unpin operation.','line_number':326,'multiline':False]
['text':' Move the recovery unit from the operation context onto the cursor and create a new RU for','line_number':364,'multiline':False]
['text':' the current OperationContext.','line_number':365,'multiline':False]
['text':'','line_number':370,'multiline':False]
['text':' ClientCursorMonitor','line_number':371,'multiline':False]
['text':'','line_number':372,'multiline':False]
['text':'*
 * Thread for timing out inactive cursors.
 ','line_number':374,'multiline':True]
['text':' namespace','line_number':418,'multiline':False]
['text':' If we haven't registered a cursor to prepare for getMore requests, we record','line_number':429,'multiline':False]
['text':' query stats directly.','line_number':430,'multiline':False]
['text':' namespace mongo','line_number':441,'multiline':False]
