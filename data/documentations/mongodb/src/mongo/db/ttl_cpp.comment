['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' IWYU pragma: no_include "cxxabi.h"','line_number':33,'multiline':False]
['text':' TODO (SERVER-64506): support change streams' pre- and post-images.','line_number':140,'multiline':False]
['text':' When batching is enabled, returns BatchedDeleteStageParams that limit the amount of work done in','line_number':145,'multiline':False]
['text':' a delete such that it is possible not all expired documents will be removed. Returns nullptr','line_number':146,'multiline':False]
['text':' otherwise.','line_number':147,'multiline':False]
['text':'','line_number':148,'multiline':False]
['text':' When batching is disabled, all expired documents are removed by the delete operation.','line_number':149,'multiline':False]
['text':' Given the set of current TTL collections via 'ttlCollectionInfo', populates the 'ttlPriorityMap'','line_number':171,'multiline':False]
['text':' with TTL delete priority for each collection based on the 'collSubpassHistory'.','line_number':172,'multiline':False]
['text':'','line_number':173,'multiline':False]
['text':' Returns the number of collections whose TTL deletes should be executed with non-default priority','line_number':174,'multiline':False]
['text':' 'AdmissionContext::Priority::kNormal'.','line_number':175,'multiline':False]
['text':' The 'ttlPriorityMap' should contain entries for every collection in the TTLCollectionCache at','line_number':197,'multiline':False]
['text':' the start of a subpass. If not, something went wrong during the population of the map.','line_number':198,'multiline':False]
['text':' Given 'remainingWorkAfterSubpass', updates the 'collSubpassHistory' count for each collection','line_number':204,'multiline':False]
['text':' with more work. Removes collections from 'collSubpassHistory' with no work left after the','line_number':205,'multiline':False]
['text':' subpass.','line_number':206,'multiline':False]
['text':' Remove history for collections that are caught up on TTL deletes.','line_number':209,'multiline':False]
['text':' Increment the subpass count for the unexhausted collections.','line_number':215,'multiline':False]
['text':' Generates an expiration date based on the user-configured expireAfterSeconds. Includes special','line_number':225,'multiline':False]
['text':' 'safe' handling for time-series collections.','line_number':226,'multiline':False]
['text':' Don't delete data unless it is safely out of range of the bucket maximum time','line_number':233,'multiline':False]
['text':' range. On time-series collections, the _id (and thus RecordId) is the minimum','line_number':234,'multiline':False]
['text':' time value of a bucket. A bucket may have newer data, so we cannot safely delete','line_number':235,'multiline':False]
['text':' the entire bucket yet until the maximum bucket range has passed, even if the','line_number':236,'multiline':False]
['text':' minimum value can be expired.','line_number':237,'multiline':False]
['text':'  Computes and returns the start 'RecordIdBound' with the correct type for a bounded, clustered','line_number':244,'multiline':False]
['text':'  collection scan. All time-series buckets collections delete entries of type 'ObjectId'. All','line_number':245,'multiline':False]
['text':'  other collections must only delete entries of type 'Date'.','line_number':246,'multiline':False]
['text':' max ','line_number':250,'multiline':True]
['text':'  Computes and returns the end 'RecordIdBound' with the correct type for a bounded, clustered','line_number':257,'multiline':False]
['text':'  collection scan. All time-series buckets collections delete entries of type 'ObjectId'. All','line_number':258,'multiline':False]
['text':'  other collections must only delete entries of type 'Date'.','line_number':259,'multiline':False]
['text':' max ','line_number':263,'multiline':True]
['text':'*
 * Runs on primaries and secondaries. Forwards replica set events to the TTLMonitor.
 ','line_number':319,'multiline':True]
['text':' Some test fixtures might not install the TTLMonitor.','line_number':336,'multiline':False]
['text':' static','line_number':354,'multiline':False]
['text':' namespace','line_number':359,'multiline':False]
['text':' A TTL pass completes when there are no more expired documents to remove. A single TTL pass may','line_number':364,'multiline':False]
['text':' consist of multiple sub-passes. Each sub-pass deletes all the expired documents it can up to','line_number':365,'multiline':False]
['text':' 'ttlSubPassTargetSecs'. It is possible for a sub-pass to complete before all expired documents','line_number':366,'multiline':False]
['text':' have been removed.','line_number':367,'multiline':False]
['text':' Counts the subpasses over TTL collections where the deletes on a collection are increased from','line_number':372,'multiline':False]
['text':' 'low' to 'normal' priority.','line_number':373,'multiline':False]
['text':' selfDelete ','line_number':379,'multiline':True]
['text':' Wait until either ttlMonitorSleepSecs passes, a shutdown is requested, or the','line_number':421,'multiline':False]
['text':' sleeping time has changed.','line_number':422,'multiline':False]
['text':' Recompute the deadline in case the sleep time has changed since we started.','line_number':429,'multiline':False]
['text':' Note: this is not perfect as you can go into fsync+lock between this and actually','line_number':453,'multiline':False]
['text':' doing the delete later.','line_number':454,'multiline':False]
['text':' Increment the metric after the TTL work has been finished.','line_number':488,'multiline':False]
['text':' Tracks the number of consecutive subpasses that have failed to exhaust a collection of TTL','line_number':491,'multiline':False]
['text':' deletes. If a collection incurs 'ttlCollLowPrioritySubpassLimit', then all TTL deletes on the','line_number':492,'multiline':False]
['text':' collection are executed at 'normal' priority until there are no TTL deletes remaining on the','line_number':493,'multiline':False]
['text':' collection.','line_number':494,'multiline':False]
['text':' Sub-passes may not delete all documents in the interest of fairness. If a sub-pass','line_number':499,'multiline':False]
['text':' indicates that it did not delete everything possible, we continue performing sub-passes.','line_number':500,'multiline':False]
['text':' This maintains the semantic that a full TTL pass deletes everything it possibly can','line_number':501,'multiline':False]
['text':' before sleeping periodically.','line_number':502,'multiline':False]
['text':' If part of replSet but not in a readable state (e.g. during initial sync), skip.','line_number':509,'multiline':False]
['text':' Refresh view of current TTL indexes - prevents starvation if a new TTL index is introduced','line_number':518,'multiline':False]
['text':' during a long running pass.','line_number':519,'multiline':False]
['text':' Before the subpass begins work, compute the priority at which TTL deletes should be executed','line_number':522,'multiline':False]
['text':' on each collection. By default, TTL deletes are 'low' priority. Only collections where TTL','line_number':523,'multiline':False]
['text':' deletes have fallen behind over several subpasses are promoted to 'normal' priority TTL','line_number':524,'multiline':False]
['text':' deletes.','line_number':525,'multiline':False]
['text':' When batching is enabled, _doTTLIndexDelete will limit the amount of work it','line_number':532,'multiline':False]
['text':' performs in both time and the number of documents it deletes. If it reaches one','line_number':533,'multiline':False]
['text':' of these limits on an index, it will return moreToDelete as true, and we will','line_number':534,'multiline':False]
['text':' re-visit it, but only after passing through every other TTL index. We repeat this','line_number':535,'multiline':False]
['text':' process until we hit the ttlMonitorSubPassTargetSecs time limit.','line_number':536,'multiline':False]
['text':'','line_number':537,'multiline':False]
['text':' When batching is disabled, _doTTLIndexDelete will delete as many documents as','line_number':538,'multiline':False]
['text':' possible without limit.','line_number':539,'multiline':False]
['text':' If there are multiple TTL indexes on a TTL collection, and any of those have fallen','line_number':544,'multiline':False]
['text':' behind TTL inserts over consecutive subpasses, raising the priority to','line_number':545,'multiline':False]
['text':' 'AdmissionContext::Priority::kNormal' for one index means the priority will be','line_number':546,'multiline':False]
['text':' 'normal' for all indexes.','line_number':547,'multiline':False]
['text':' More work signals there may more expired documents to visit.','line_number':566,'multiline':False]
['text':' The collection was dropped.','line_number':576,'multiline':False]
['text':' For resharding, the donor shard primary is responsible for performing the TTL','line_number':588,'multiline':False]
['text':' deletions.','line_number':589,'multiline':False]
['text':' Attach IGNORED placement version to skip orphans (the range deleter will clear them up)','line_number':601,'multiline':False]
['text':' The collection with `uuid` might be renamed before the lock and the wrong namespace','line_number':614,'multiline':False]
['text':' would be locked and looked up so we double check here.','line_number':615,'multiline':False]
['text':' The TTL index tried to delete some information from a sharded collection','line_number':663,'multiline':False]
['text':' through a direct operation against the shard but the filtering metadata was','line_number':664,'multiline':False]
['text':' not available or the index version in the cache was stale.','line_number':665,'multiline':False]
['text':'','line_number':666,'multiline':False]
['text':' The current TTL task cannot be completed. However, if the critical section is','line_number':667,'multiline':False]
['text':' not held the code below will fire an asynchronous refresh, hoping that the','line_number':668,'multiline':False]
['text':' next time this task is re-executed the filtering information is already','line_number':669,'multiline':False]
['text':' present. It will also invalidate the cache, causing the index information to be refreshed','line_number':670,'multiline':False]
['text':' on the next attempt.','line_number':671,'multiline':False]
['text':' Invalidate cache in case index version is stale','line_number':682,'multiline':False]
['text':' The exception is relevant to the entire TTL monitoring process, not just the specific','line_number':709,'multiline':False]
['text':' TTL index. Let the exception escape so it can be addressed at the higher monitoring','line_number':710,'multiline':False]
['text':' layer.','line_number':711,'multiline':False]
['text':' The canonical check as to whether a key pattern element is "ascending" or','line_number':753,'multiline':False]
['text':' "descending" is (elt.number() >= 0).  This is defined by the Ordering class.','line_number':754,'multiline':False]
['text':' We need to pass into the DeleteStageParams (below) a CanonicalQuery with a BSONObj that','line_number':759,'multiline':False]
['text':' queries for the expired documents correctly so that we do not delete documents that are','line_number':760,'multiline':False]
['text':' not actually expired when our snapshot changes during deletion.','line_number':761,'multiline':False]
['text':' Maintain a consistent view of whether batching is enabled - batching depends on','line_number':774,'multiline':False]
['text':' parameters that can be set at runtime, and it is illegal to try to get','line_number':775,'multiline':False]
['text':' BatchedDeleteStageStats from a non-batched delete.','line_number':776,'multiline':False]
['text':' A pass target met implies there may be more to delete.','line_number':811,'multiline':False]
['text':' It is expected that a collection drop can kill a query plan while the TTL monitor','line_number':815,'multiline':False]
['text':' is deleting an old document, so ignore this error.','line_number':816,'multiline':False]
['text':' Maintain a consistent view of whether batching is enabled - batching depends on','line_number':847,'multiline':False]
['text':' parameters that can be set at runtime, and it is illegal to try to get','line_number':848,'multiline':False]
['text':' BatchedDeleteStageStats from a non-batched delete.','line_number':849,'multiline':False]
['text':' Deletes records using a bounded collection scan from the beginning of time to the','line_number':852,'multiline':False]
['text':' expiration time (inclusive).','line_number':853,'multiline':False]
['text':' A pass target met implies there may be more work to be done on the index.','line_number':884,'multiline':False]
['text':' It is expected that a collection drop can kill a query plan while the TTL monitor','line_number':888,'multiline':False]
['text':' is deleting an old document, so ignore this error.','line_number':889,'multiline':False]
['text':' We allow the TTLMonitor not to be set in case shutdown occurs before the thread has been','line_number':903,'multiline':False]
['text':' initialized.','line_number':904,'multiline':False]
['text':' The collection was dropped.','line_number':916,'multiline':False]
['text':' Skip clustered indexes with TTL. This includes time-series collections.','line_number':930,'multiline':False]
['text':' Compose collMod command to amend 'expireAfterSeconds' to same value that','line_number':948,'multiline':False]
['text':' would be used by listIndexes() to convert a NaN value in the catalog.','line_number':949,'multiline':False]
['text':' processCollModCommand() will acquire MODE_X access to the collection.','line_number':957,'multiline':False]
['text':' The exception is relevant to the entire TTL monitoring process, not just the specific','line_number':971,'multiline':False]
['text':' TTL index. Let the exception escape so it can be addressed at the higher monitoring','line_number':972,'multiline':False]
['text':' layer.','line_number':973,'multiline':False]
['text':' namespace mongo','line_number':993,'multiline':False]
