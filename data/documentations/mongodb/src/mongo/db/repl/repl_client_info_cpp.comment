['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' We use a struct to wrap lastOpSetExplicitly here in order to give the boolean a default value','line_number':57,'multiline':False]
['text':' when initially constructed for the associated OperationContext.','line_number':58,'multiline':False]
['text':' namespace','line_number':64,'multiline':False]
['text':' If a multi-document transaction or regular write actually performs a write op, the','line_number':80,'multiline':False]
['text':' lastOp in the client is enough for write concern and there is no need to call','line_number':81,'multiline':False]
['text':' setLastOpToSystemLastOpTime.','line_number':82,'multiline':False]
['text':' On the other hand, if a transaction is a no-op and we are using speculative majority read','line_number':84,'multiline':False]
['text':' concern, there is risk of a transaction reading data that might not have yet been','line_number':85,'multiline':False]
['text':' majority commited, and later waiting for write concern on a lastApplied which is older','line_number':86,'multiline':False]
['text':' than the timestamp to which the read corresponds. This is possible due to the fact','line_number':87,'multiline':False]
['text':' that lastApplied is advanced in an onCommit hook AFTER commiting writes (and making them','line_number':88,'multiline':False]
['text':' visible), leaving a small window of time where a concurrent transaction might','line_number':89,'multiline':False]
['text':' speculatively read local data, and then wait on a lastApplied which has yet to be','line_number':90,'multiline':False]
['text':' advanced.','line_number':91,'multiline':False]
['text':' Multi-doc transactions perform a no-op write on commit time and advance the lastOp. So it','line_number':93,'multiline':False]
['text':' is no longer necessary for transactions to update the client's lastOp (calling','line_number':94,'multiline':False]
['text':' setLastOpToSystemLastOpTime).','line_number':95,'multiline':False]
['text':' Non-transaction operations resulting in no-op suffer from the same issue as transactions,','line_number':97,'multiline':False]
['text':' but there is no built-in mechanism to advance the lastOp and client's lastOp has to be','line_number':98,'multiline':False]
['text':' updated.','line_number':99,'multiline':False]
['text':' Due to this, the lastOp has to be updated directly from the oplog's top entry instead of','line_number':101,'multiline':False]
['text':' the lastApplied in the ReplicationCoordinator. This works because the oplog entry is','line_number':102,'multiline':False]
['text':' commited together with the write op itself.','line_number':103,'multiline':False]
['text':' Fall back to use my lastAppliedOpTime if we failed to get the latest OpTime from','line_number':111,'multiline':False]
['text':' storage. In most cases, it is safe to ignore errors because if','line_number':112,'multiline':False]
['text':' getLatestWriteOpTime returns an error, we cannot use the same opCtx to wait for','line_number':113,'multiline':False]
['text':' writeConcern anyways. But getLastError from the same client could use a different','line_number':114,'multiline':False]
['text':' opCtx to wait for the lastOp. So this is a best effort attempt to set the lastOp','line_number':115,'multiline':False]
['text':' to the in-memory lastAppliedOpTime (which could be lagged). And this is a known','line_number':116,'multiline':False]
['text':' bug in getLastError.','line_number':117,'multiline':False]
['text':' It is ok if the storage engine does not support getLatestOplogTimestamp() or','line_number':122,'multiline':False]
['text':' if the oplog is empty. If the node stepped down in between, it is correct to','line_number':123,'multiline':False]
['text':' use lastAppliedOpTime as last OpTime.','line_number':124,'multiline':False]
['text':' We will continue trying to set client's lastOp to lastAppliedOpTime as a best-effort','line_number':127,'multiline':False]
['text':' alternative to getLatestWriteOpTime. And we will then throw after setting client's','line_number':128,'multiline':False]
['text':' lastOp if getLatestWriteOpTime has failed with a error code other than the ones','line_number':129,'multiline':False]
['text':' above.','line_number':130,'multiline':False]
['text':' If the system timestamp has gone backwards, that must mean that there was a rollback.','line_number':133,'multiline':False]
['text':' If the system optime has a higher term but a lower timestamp than the client's lastOp, it','line_number':134,'multiline':False]
['text':' means that this node's wallclock time was ahead of the current primary's before it rolled','line_number':135,'multiline':False]
['text':' back. This is safe, but the timestamp of the last op for a Client should never go','line_number':136,'multiline':False]
['text':' backwards, so just leave the last op for this Client as it was.','line_number':137,'multiline':False]
['text':' Throw if getLatestWriteOpTime failed.','line_number':152,'multiline':False]
['text':' In most cases, it is safe to ignore all errors when the OperationContext is','line_number':162,'multiline':False]
['text':' interrupted because we cannot use that OperationContext to wait for writeConcern','line_number':163,'multiline':False]
['text':' anyways.','line_number':164,'multiline':False]
['text':' Context was not interrupted, throw error up to caller.','line_number':168,'multiline':False]
['text':' namespace repl','line_number':173,'multiline':False]
['text':' namespace mongo','line_number':174,'multiline':False]
