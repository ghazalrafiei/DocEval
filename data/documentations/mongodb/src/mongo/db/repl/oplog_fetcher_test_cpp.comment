['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' optime','line_number':124,'multiline':False]
['text':' opType','line_number':125,'multiline':False]
['text':' namespace','line_number':126,'multiline':False]
['text':' uuid','line_number':127,'multiline':False]
['text':' fromMigrate','line_number':128,'multiline':False]
['text':' checkExistenceForDiffInsert','line_number':129,'multiline':False]
['text':' version','line_number':130,'multiline':False]
['text':' o','line_number':131,'multiline':False]
['text':' o2','line_number':132,'multiline':False]
['text':' sessionInfo','line_number':133,'multiline':False]
['text':' upsert','line_number':134,'multiline':False]
['text':' wall clock time','line_number':135,'multiline':False]
['text':' statement ids','line_number':136,'multiline':False]
['text':' optime of previous write within same transaction','line_number':137,'multiline':False]
['text':' pre-image optime','line_number':138,'multiline':False]
['text':' post-image optime','line_number':139,'multiline':False]
['text':' ShardId of resharding recipient','line_number':140,'multiline':False]
['text':' _id','line_number':141,'multiline':False]
['text':' needsRetryImage','line_number':142,'multiline':False]
['text':' Wait up to 10 seconds.','line_number':178,'multiline':False]
['text':' The find command should not specify the deprecated 'oplogReplay' flag.','line_number':223,'multiline':False]
['text':' In unittests, lastCommittedWithCurrentTerm.value should always be a valid term.','line_number':241,'multiline':False]
['text':' The case when currentTerm is kUninitializedTerm is tested separately in','line_number':242,'multiline':False]
['text':' GetMoreQueryDoesNotContainTermIfGetCurrentTermAndLastCommittedOpTimeReturnsUninitializedTerm.','line_number':243,'multiline':False]
['text':' Test that we don't attach the lastKnownCommittedOpTime field for non-exhaust cursors when','line_number':247,'multiline':False]
['text':' the lastCommittedOpTime is null.','line_number':248,'multiline':False]
['text':' Simulate a response to a single outgoing client request and return the client request. Use this','line_number':266,'multiline':False]
['text':' function to simulate responses to client find/getMore requests.','line_number':267,'multiline':False]
['text':' Simulate a response to a single network recv() call. Use this function to simulate responses to','line_number':281,'multiline':False]
['text':' exhaust stream where a client expects to receive responses without sending out new requests.','line_number':282,'multiline':False]
['text':'*
     * Returns the status at shutdown.
     ','line_number':307,'multiline':True]
['text':'*
     * Returns the rbid at shutdown.
     ','line_number':312,'multiline':True]
['text':'*
     * Use this for oplog fetcher shutdown callback.
     ','line_number':317,'multiline':True]
['text':' 16MB max batch size / 12 byte min doc size * 10 (for good measure) = defaultBatchSize to use.','line_number':356,'multiline':False]
['text':'*
     * Tests checkSyncSource result handling.
     ','line_number':389,'multiline':True]
['text':' The last OpTime fetched by the oplog fetcher.','line_number':405,'multiline':False]
['text':' Always enable oplogFetcherUsesExhaust at the beginning of each unittest in case some','line_number':465,'multiline':False]
['text':' unittests disable it in the test.','line_number':466,'multiline':False]
['text':' Ensure that the MockDBClientConnection was created before proceeding.','line_number':501,'multiline':False]
['text':' Create an oplog fetcher with no retries.','line_number':553,'multiline':False]
['text':' Update lastFetched before it is updated by getting the next batch.','line_number':561,'multiline':False]
['text':' We should only be blocked on the network after the response if we need to shut down the oplog','line_number':564,'multiline':False]
['text':' fetcher after this test.','line_number':565,'multiline':False]
['text':' shouldShutdown ','line_number':597,'multiline':True]
['text':' requireFresherSyncSource ','line_number':598,'multiline':True]
['text':' lastFetchedShouldAdvance ','line_number':599,'multiline':True]
['text':' Last optime fetched should match values passed to constructor.','line_number':629,'multiline':False]
['text':' Last optime fetched should not change.','line_number':636,'multiline':False]
['text':' The onShutdownFn should not be called because the oplog fetcher should fail during startup.','line_number':646,'multiline':False]
['text':' Last optime fetched should match values passed to constructor.','line_number':650,'multiline':False]
['text':' Last optime fetched should not change.','line_number':657,'multiline':False]
['text':' Defer scheduling work so that the executor's shutdown happens before startup's work is','line_number':664,'multiline':False]
['text':' scheduled.','line_number':665,'multiline':False]
['text':' Defer scheduling work so that the oplog fetcher's shutdown happens before startup's work is','line_number':689,'multiline':False]
['text':' scheduled.','line_number':690,'multiline':False]
['text':' Tests shutting down after _runQuery is scheduled.','line_number':712,'multiline':False]
['text':' This will also ensure that _runQuery was scheduled before returning.','line_number':716,'multiline':False]
['text':' Tests that shutting down while the connection is blocked on call successfully shuts down the','line_number':728,'multiline':False]
['text':' connection as well.','line_number':729,'multiline':False]
['text':' This will also ensure that _runQuery was scheduled before returning.','line_number':733,'multiline':False]
['text':' Make sure that we are blocked on the network before shutting down to make sure that shutting','line_number':736,'multiline':False]
['text':' down properly interrupts and shuts down the DBClientConnection.','line_number':737,'multiline':False]
['text':' This is the error message that the connection throws if shutdown while blocked on the','line_number':746,'multiline':False]
['text':' network.','line_number':747,'multiline':False]
['text':' Tests shutting down after getting the first batch, but before enqueuing it.','line_number':755,'multiline':False]
['text':' This will also ensure that _runQuery was scheduled before returning.','line_number':759,'multiline':False]
['text':' Successfully create a cursor and get the first batch.','line_number':765,'multiline':False]
['text':' Update lastFetched before it is updated by getting the next batch.','line_number':771,'multiline':False]
['text':' Creating the cursor will succeed.','line_number':774,'multiline':False]
['text':' Ensure that the oplog fetcher is paused before processing the successful batch.','line_number':782,'multiline':False]
['text':' Unpause the oplog fetcher.','line_number':787,'multiline':False]
['text':' Wait up to 10 seconds.','line_number':798,'multiline':False]
['text':' This will cause the initial attempt to create a cursor to fail.','line_number':832,'multiline':False]
['text':' Oplog fetcher should reset 'OplogFetcher::_onShutdownCallbackFn' after running callback','line_number':840,'multiline':False]
['text':' function before becoming inactive.','line_number':841,'multiline':False]
['text':' This ensures that we release resources associated with','line_number':842,'multiline':False]
['text':' 'OplogFetcher::_onShutdownCallbackFn'.','line_number':843,'multiline':False]
['text':' We need to check sharedCallbackStateDestroyed in a loop because SharedCallbackState's','line_number':846,'multiline':False]
['text':' desctructor is run after the oplog fetcher transitions to complete and outside of the oplog','line_number':847,'multiline':False]
['text':' fetcher's mutex, which means that it does not necessarily run before the oplog fetcher is','line_number':848,'multiline':False]
['text':' joined.','line_number':849,'multiline':False]
['text':' Test that the correct maxTimeMS is set if this is the initial 'find' query.','line_number':855,'multiline':False]
['text':' Test that the correct maxTimeMS is set if we are retrying the 'find' query.','line_number':885,'multiline':False]
['text':' Create an oplog fetcher without any retries.','line_number':914,'multiline':False]
['text':' First batch for the initial find command.','line_number':923,'multiline':False]
['text':' Second and terminating batch (with cursorId 0) for the getMore command.','line_number':926,'multiline':False]
['text':' moreToCome ','line_number':929,'multiline':True]
['text':' Test that the getMore query does not contain the term or the lastKnownCommittedOpTime field.','line_number':933,'multiline':False]
['text':' shouldShutdown ','line_number':1016,'multiline':True]
['text':' requireFresherSyncSource ','line_number':1017,'multiline':True]
['text':' lastFetchedShouldAdvance ','line_number':1018,'multiline':True]
['text':' requiredRBID ','line_number':1019,'multiline':True]
['text':' shouldShutdown ','line_number':1067,'multiline':True]
['text':' requireFresherSyncSource ','line_number':1068,'multiline':True]
['text':' This tests the case where the sync source metadata is behind us but we get a document which','line_number':1076,'multiline':False]
['text':' is equal to us.  Since that means the metadata is stale and can be ignored, we should accept','line_number':1077,'multiline':False]
['text':' this sync source.','line_number':1078,'multiline':False]
['text':' shouldShutdown ','line_number':1084,'multiline':True]
['text':' requireFresherSyncSource ','line_number':1085,'multiline':True]
['text':' shouldShutdown ','line_number':1104,'multiline':True]
['text':' requireFresherSyncSource ','line_number':1105,'multiline':True]
['text':' Set the remote node's first oplog entry to equal to lastFetched.','line_number':1115,'multiline':False]
['text':' Set the remote node's first oplog entry to be later than lastFetched, so we have fallen off','line_number':1131,'multiline':False]
['text':' the sync source's oplog.','line_number':1132,'multiline':False]
['text':' Set the remote node's first oplog entry to be earlier than lastFetched, so we have not fallen','line_number':1146,'multiline':False]
['text':' off the sync source's oplog.','line_number':1147,'multiline':False]
['text':' Set the remote node's first oplog entry to be an invalid BSON.','line_number':1161,'multiline':False]
['text':' Set the remote node's first oplog entry to be an empty BSON.','line_number':1175,'multiline':False]
['text':' Set the remote node's first oplog entry to have a null timestamp.','line_number':1189,'multiline':False]
['text':' Set the remote node's first oplog entry to include extra fields.','line_number':1203,'multiline':False]
['text':' We should have parsed the OpTime correctly and realized that we have not fallen off the sync','line_number':1210,'multiline':False]
['text':' source's oplog, so we should go into rollback.','line_number':1211,'multiline':False]
['text':' Create an oplog fetcher with one retry.','line_number':1223,'multiline':False]
['text':' An empty message will cause the initial attempt to create a cursor to fail.','line_number':1226,'multiline':False]
['text':' An empty message will cause the attempt to recreate a cursor to fail.','line_number':1229,'multiline':False]
['text':' Create an oplog fetcher with one retry.','line_number':1242,'multiline':False]
['text':' This will cause the initial attempt to create a cursor to fail.','line_number':1245,'multiline':False]
['text':' This will cause the attempt to recreate a cursor to fail.','line_number':1251,'multiline':False]
['text':' Create an oplog fetcher without any retries.','line_number':1264,'multiline':False]
['text':' Update lastFetched before it is updated by getting the next batch.','line_number':1273,'multiline':False]
['text':' Creating the cursor will succeed.','line_number':1276,'multiline':False]
['text':' Check that the first batch was successfully processed.','line_number':1284,'multiline':False]
['text':' skipFirstDoc ','line_number':1286,'multiline':True]
['text':' This will cause the oplog fetcher to fail while getting the next batch. Since it doesn't have','line_number':1288,'multiline':False]
['text':' any retries, the oplog fetcher will shut down.','line_number':1289,'multiline':False]
['text':' Create an oplog fetcher with one retry.','line_number':1302,'multiline':False]
['text':' Update lastFetched before it is updated by getting the next batch.','line_number':1311,'multiline':False]
['text':' Creating the cursor will succeed.','line_number':1314,'multiline':False]
['text':' Check that the first batch was successfully processed.','line_number':1322,'multiline':False]
['text':' skipFirstDoc ','line_number':1324,'multiline':True]
['text':' Mock a result that tells us to stop syncing.','line_number':1326,'multiline':False]
['text':' This will cause the oplog fetcher to fail while getting the next batch. Since we're expecting','line_number':1330,'multiline':False]
['text':' a sync source change, the oplog fetcher will shut down.','line_number':1331,'multiline':False]
['text':' Create an oplog fetcher with one retry.','line_number':1344,'multiline':False]
['text':' Update lastFetched before it is updated by getting the next batch.','line_number':1353,'multiline':False]
['text':' Creating the cursor will succeed.','line_number':1356,'multiline':False]
['text':' Check that the first batch was successfully processed.','line_number':1364,'multiline':False]
['text':' skipFirstDoc ','line_number':1366,'multiline':True]
['text':' This will cause us to fail getting the next batch, meaning a new cursor needs to be created.','line_number':1368,'multiline':False]
['text':' An empty message will cause the attempt to create a cursor to fail.','line_number':1374,'multiline':False]
['text':' This tests that the oplog fetcher successfully can recreate a cursor after it failed to get','line_number':1383,'multiline':False]
['text':' a batch and makes sure the recreated cursor behaves like an exhaust cursor. This will also','line_number':1384,'multiline':False]
['text':' check that the socket timeouts are set as expected. The steps are:','line_number':1385,'multiline':False]
['text':' 1. Start the oplog fetcher.','line_number':1386,'multiline':False]
['text':' 2. Create the initial cursor successfully.','line_number':1387,'multiline':False]
['text':' 3. Fail getting the next batch, causing us to create a new cursor.','line_number':1388,'multiline':False]
['text':' 4. Succeed creating a new cursor.','line_number':1389,'multiline':False]
['text':' 5. Successfully get the next batch (from the first getMore command).','line_number':1390,'multiline':False]
['text':' 6. Successfully get the next batch (this is the first exhaust batch).','line_number':1391,'multiline':False]
['text':' 7. Shut down while the connection is blocked on the network.','line_number':1392,'multiline':False]
['text':' -- Step 1 --','line_number':1396,'multiline':False]
['text':' Create an oplog fetcher with one retry.','line_number':1397,'multiline':False]
['text':' Make sure we are blocked on the network before checking that the socket timeout is properly','line_number':1400,'multiline':False]
['text':' set.','line_number':1401,'multiline':False]
['text':' Check the socket timeout is equal to the initial find max time plus the network buffer.','line_number':1413,'multiline':False]
['text':' Update lastFetched before it is updated by getting the next batch.','line_number':1423,'multiline':False]
['text':' -- Step 2 --','line_number':1426,'multiline':False]
['text':' Creating the cursor will succeed. After this, the cursor will be blocked on call() for the','line_number':1427,'multiline':False]
['text':' getMore command.','line_number':1428,'multiline':False]
['text':' Check the socket timeout is equal to the awaitData timeout plus the network buffer.','line_number':1436,'multiline':False]
['text':' Update lastFetched since it should have been updated after getting the last batch.','line_number':1440,'multiline':False]
['text':' Check that the first batch was successfully processed.','line_number':1443,'multiline':False]
['text':' skipFirstDoc ','line_number':1444,'multiline':True]
['text':' -- Step 3 --','line_number':1446,'multiline':False]
['text':' This will cause us to fail getting the next batch, meaning a new cursor needs to be created.','line_number':1447,'multiline':False]
['text':' After this, the new cursor will be blocked on call() while trying to initialize.','line_number':1448,'multiline':False]
['text':' Check the socket timeout is equal to the retried find max time plus the network buffer.','line_number':1459,'multiline':False]
['text':' -- Step 4 --','line_number':1467,'multiline':False]
['text':' This will cause the attempt to create a cursor to succeed. After this, the cursor will be','line_number':1468,'multiline':False]
['text':' blocked on call() for the getMore command.','line_number':1469,'multiline':False]
['text':' Check the socket timeout is equal to the awaitData timeout plus the network buffer.','line_number':1477,'multiline':False]
['text':' Update lastFetched since it should have been updated after getting the last batch.','line_number':1481,'multiline':False]
['text':' Check that the first batch with the new cursor was successfully processed.','line_number':1484,'multiline':False]
['text':' skipFirstDoc ','line_number':1485,'multiline':True]
['text':' -- Step 5 --','line_number':1491,'multiline':False]
['text':' This will be the first getMore. After this, the cursor will be blocked on recv() for the next','line_number':1492,'multiline':False]
['text':' batch.','line_number':1493,'multiline':False]
['text':' moreToCome ','line_number':1496,'multiline':True]
['text':' Update lastFetched since it should have been updated after getting the last batch.','line_number':1504,'multiline':False]
['text':' Check that the next batch was successfully processed.','line_number':1507,'multiline':False]
['text':' skipFirstDoc ','line_number':1508,'multiline':True]
['text':' -- Step 6 --','line_number':1514,'multiline':False]
['text':' Getting this batch will mean the cursor was successfully recreated as an exhaust cursor. The','line_number':1515,'multiline':False]
['text':' moreToCome flag is set to false so that _connectionHasPendingReplies on the cursor will be','line_number':1516,'multiline':False]
['text':' false when cleaning up the cursor (otherwise we'd need to use a side connection to clean up','line_number':1517,'multiline':False]
['text':' the cursor).','line_number':1518,'multiline':False]
['text':' moreToCome ','line_number':1521,'multiline':True]
['text':' Update lastFetched since it should have been updated after getting the last batch.','line_number':1524,'multiline':False]
['text':' Check that the next batch was successfully processed.','line_number':1527,'multiline':False]
['text':' skipFirstDoc ','line_number':1528,'multiline':True]
['text':' -- Step 7 --','line_number':1530,'multiline':False]
['text':' This tests that the OplogFetcherRestartDecision resets its counter when the oplog fetcher','line_number':1538,'multiline':False]
['text':' successfully gets the next batch. The steps are:','line_number':1539,'multiline':False]
['text':' 1. Start the oplog fetcher.','line_number':1540,'multiline':False]
['text':' 2. Fail to create the initial cursor. This will increment the number of failed restarts.','line_number':1541,'multiline':False]
['text':' 3. Create the cursor successfully. This should reset the count of failed restarts.','line_number':1542,'multiline':False]
['text':' 4. Fail getting the next batch, causing us to create a new cursor.','line_number':1543,'multiline':False]
['text':' 5. Succeed creating a new cursor.','line_number':1544,'multiline':False]
['text':' 6. Shut down while the connection is blocked on the network.','line_number':1545,'multiline':False]
['text':' -- Step 1 --','line_number':1549,'multiline':False]
['text':' Create an oplog fetcher with one retry.','line_number':1550,'multiline':False]
['text':' -- Step 2 --','line_number':1553,'multiline':False]
['text':' This will cause the first attempt to create a cursor to fail. After this, the new cursor will','line_number':1554,'multiline':False]
['text':' be blocked on call() while trying to initialize.','line_number':1555,'multiline':False]
['text':' Update lastFetched before it is updated by getting the next batch.','line_number':1567,'multiline':False]
['text':' -- Step 3 --','line_number':1570,'multiline':False]
['text':' Creating the cursor will succeed. After this, the cursor will be blocked on call() for the','line_number':1571,'multiline':False]
['text':' getMore command.','line_number':1572,'multiline':False]
['text':' Update lastFetched since it should have been updated after getting the last batch.','line_number':1580,'multiline':False]
['text':' Check that the first batch was successfully processed.','line_number':1583,'multiline':False]
['text':' skipFirstDoc ','line_number':1584,'multiline':True]
['text':' -- Step 4 --','line_number':1586,'multiline':False]
['text':' This will cause an error when getting the next batch, which will cause us to recreate the','line_number':1587,'multiline':False]
['text':' cursor. If the number of retries was not reset, this will fail because the new cursor won't','line_number':1588,'multiline':False]
['text':' be blocked on the call while recreating the cursor.','line_number':1589,'multiline':False]
['text':' Update lastFetched before it is updated by getting the next batch.','line_number':1599,'multiline':False]
['text':' -- Step 5 --','line_number':1602,'multiline':False]
['text':' Make sure that we can finish recreating the cursor successfully.','line_number':1603,'multiline':False]
['text':' Update lastFetched since it should have been updated after getting the last batch.','line_number':1611,'multiline':False]
['text':' Check that the first batch from the new cursor was successfully processed.','line_number':1614,'multiline':False]
['text':' skipFirstDoc ','line_number':1615,'multiline':True]
['text':' Test that the oplog fetcher works if the 'oplogFetcherUsesExhaust' server parameter is set to','line_number':1624,'multiline':False]
['text':' false.','line_number':1625,'multiline':False]
['text':' Create an oplog fetcher with one retry.','line_number':1631,'multiline':False]
['text':' Update lastFetched before it is updated by getting the next batch.','line_number':1640,'multiline':False]
['text':' Set a null lastCommittedOpTime to test that non-exhaust cursors don't attach a null','line_number':1643,'multiline':False]
['text':' lastKnownCommittedOpTime. This must be done before we issue the response to the find request','line_number':1644,'multiline':False]
['text':' so that the first getMore request (made immediately after processSingleRequestResponse) can','line_number':1645,'multiline':False]
['text':' pick this up.','line_number':1646,'multiline':False]
['text':' Creating the cursor will succeed. After this, the cursor will be blocked on call() for the','line_number':1651,'multiline':False]
['text':' getMore command.','line_number':1652,'multiline':False]
['text':' Update lastFetched since it should have been updated after getting the last batch.','line_number':1660,'multiline':False]
['text':' Check that the first batch was successfully processed.','line_number':1663,'multiline':False]
['text':' skipFirstDoc ','line_number':1664,'multiline':True]
['text':' Reset the lastCommittedOpTime to non-null. This must be done before we issue the response to','line_number':1671,'multiline':False]
['text':' the first getMore request so that the second getMore request (made immediately after','line_number':1672,'multiline':False]
['text':' processSingleRequestResponse) can pick this up.','line_number':1673,'multiline':False]
['text':' moreToCome would be set to false if oplogFetcherUsesExhaust was set to false. After this,','line_number':1679,'multiline':False]
['text':' the cursor will be blocked on call() for the next getMore command.','line_number':1680,'multiline':False]
['text':' moreToCome ','line_number':1683,'multiline':True]
['text':' exhaustSupported ','line_number':1690,'multiline':True]
['text':' Update lastFetched since it should have been updated after getting the last batch.','line_number':1692,'multiline':False]
['text':' Check that the next batch was successfully processed.','line_number':1695,'multiline':False]
['text':' skipFirstDoc ','line_number':1696,'multiline':True]
['text':' exhaustSupported ','line_number':1710,'multiline':True]
['text':' Update lastFetched since it should have been updated after getting the last batch.','line_number':1712,'multiline':False]
['text':' Check that the next batch was successfully processed.','line_number':1715,'multiline':False]
['text':' skipFirstDoc ','line_number':1716,'multiline':True]
['text':' Create an oplog fetcher with one retry.','line_number':1728,'multiline':False]
['text':' Creating the cursor will succeed, but the oplog fetcher will shut down after receiving this','line_number':1737,'multiline':False]
['text':' batch because the cursor id is 0.','line_number':1738,'multiline':False]
['text':' Check that the oplog fetcher has shut down to make sure it has processed the next batch','line_number':1745,'multiline':False]
['text':' before verifying the batch's contents.','line_number':1746,'multiline':False]
['text':' Check that the next batch was successfully processed.','line_number':1749,'multiline':False]
['text':' skipFirstDoc ','line_number':1751,'multiline':True]
['text':' Create a filter that won't match the first document.','line_number':1760,'multiline':False]
['text':' Create an oplog fetcher with one retry.','line_number':1763,'multiline':False]
['text':' requireFresherSyncSource ','line_number':1767,'multiline':True]
['text':' Check that the oplog fetcher has shut down to make sure it has processed the next batch','line_number':1786,'multiline':False]
['text':' before verifying the batch's contents.','line_number':1787,'multiline':False]
['text':' Check that the next batch was successfully processed.','line_number':1790,'multiline':False]
['text':' Note that though we told the oplog fetcher not to skip the first doc, we should skip it','line_number':1791,'multiline':False]
['text':' anyway because it won't match the filter.','line_number':1792,'multiline':False]
['text':' skipFirstDoc ','line_number':1794,'multiline':True]
['text':' Create a filter that will match the first document.','line_number':1803,'multiline':False]
['text':' Create an oplog fetcher with one retry.','line_number':1806,'multiline':False]
['text':' requireFresherSyncSource ','line_number':1810,'multiline':True]
['text':' Check that the oplog fetcher has shut down to make sure it has processed the next batch','line_number':1829,'multiline':False]
['text':' before verifying the batch's contents.','line_number':1830,'multiline':False]
['text':' Check that the next batch was successfully processed.','line_number':1833,'multiline':False]
['text':' skipFirstDoc ','line_number':1835,'multiline':True]
['text':' Set the remote node's first oplog entry to equal to lastFetched.','line_number':1863,'multiline':False]
['text':' shouldShutdown ','line_number':1909,'multiline':True]
['text':' requireFresherSyncSource ','line_number':1910,'multiline':True]
['text':' lastFetchedShouldAdvance ','line_number':1911,'multiline':True]
['text':' This function verifies that every oplog entry is only enqueued once.','line_number':1934,'multiline':False]
['text':' Create an oplog fetcher with one retry.','line_number':1956,'multiline':False]
['text':' requireFresherSyncSource ','line_number':1960,'multiline':True]
['text':' Update lastFetched before it is updated by getting the next batch.','line_number':1968,'multiline':False]
['text':' Creating the cursor will succeed. Only send over the first entry. Save the second for the','line_number':1971,'multiline':False]
['text':' getMore request.','line_number':1972,'multiline':False]
['text':' Simulate an error right before receiving the second entry. This will cause an error when','line_number':1980,'multiline':False]
['text':' getting the next batch, which will cause the oplog fetcher to recreate the cursor.','line_number':1981,'multiline':False]
['text':' Resend all data for the retry. The enqueueDocumentsFn will check to make sure that','line_number':1989,'multiline':False]
['text':' the first entry was not enqueued twice.','line_number':1990,'multiline':False]
['text':' This function verifies that every oplog entry is only enqueued once.','line_number':2008,'multiline':False]
['text':' Create an oplog fetcher with one retry.','line_number':2030,'multiline':False]
['text':' requireFresherSyncSource ','line_number':2034,'multiline':True]
['text':' Update lastFetched before it is updated by getting the next batch.','line_number':2043,'multiline':False]
['text':' Creating the cursor will succeed.','line_number':2046,'multiline':False]
['text':' Simulate an error. This will cause an error when getting the next batch, which will cause the','line_number':2055,'multiline':False]
['text':' oplog fetcher to recreate the cursor.','line_number':2056,'multiline':False]
['text':' Resend the second entry for the retry. The enqueueDocumentsFn will check to make sure that','line_number':2064,'multiline':False]
['text':' the second entry was not enqueued twice.','line_number':2065,'multiline':False]
['text':' Sync source optime and "hasSyncSource" can be set if the response contains metadata.','line_number':2100,'multiline':False]
['text':' We should have enqueued the last batch if the 'shouldStopFetching' check returns','line_number':2105,'multiline':False]
['text':' kStopSyncingAndEnqueueLastBatch.','line_number':2106,'multiline':False]
['text':' Sync source "hasSyncSource" is derived from metadata.','line_number':2120,'multiline':False]
['text':' We should have enqueued the last batch if the 'shouldStopFetching' check returns','line_number':2126,'multiline':False]
['text':' kStopSyncingAndEnqueueLastBatch.','line_number':2127,'multiline':False]
['text':' If the 'shouldStopFetching' check returns kStopSyncingAndDropLastBatchIfPresent, we should','line_number':2135,'multiline':False]
['text':' not enqueue any documents.','line_number':2136,'multiline':False]
['text':' Test that OplogFetcher fails to establish initial connection, retrying HostUnreachable.','line_number':2296,'multiline':False]
['text':' Shutdown the mock remote server before the OplogFetcher tries to connect.','line_number':2299,'multiline':False]
['text':' This will also ensure that _runQuery was scheduled before returning.','line_number':2302,'multiline':False]
['text':' This is the error code for connection failures.','line_number':2307,'multiline':False]
['text':' Test that OplogFetcher tries but fails after failing the initial connection, retrying','line_number':2312,'multiline':False]
['text':' HostUnreachable.','line_number':2313,'multiline':False]
['text':' Shutdown the mock remote server before the OplogFetcher tries to connect.','line_number':2316,'multiline':False]
['text':' Create an OplogFetcher with 1 retry attempt. This will also ensure that _runQuery was','line_number':2320,'multiline':False]
['text':' scheduled before returning.','line_number':2321,'multiline':False]
['text':' This is the error code for connection failures.','line_number':2327,'multiline':False]
['text':' We should see one retry','line_number':2330,'multiline':False]
['text':' We should one failure to retry','line_number':2333,'multiline':False]
['text':' Test that OplogFetcher does not retry after failing the initial connection if we've gotten','line_number':2338,'multiline':False]
['text':' a better sync source in the meantime.','line_number':2339,'multiline':False]
['text':' Mock a result that tells us to stop syncing.','line_number':2342,'multiline':False]
['text':' Shutdown the mock remote server before the OplogFetcher tries to connect.','line_number':2346,'multiline':False]
['text':' Create an OplogFetcher with 1 retry attempt. This will also ensure that _runQuery was','line_number':2350,'multiline':False]
['text':' scheduled before returning.','line_number':2351,'multiline':False]
['text':' This is the error code for connection failures.','line_number':2357,'multiline':False]
['text':' We should not see retry attempts.','line_number':2360,'multiline':False]
['text':' Test that OplogFetcher returns CallbackCanceled error if it is shut down after failing the','line_number':2366,'multiline':False]
['text':' initial connection but before it retries the connection.','line_number':2367,'multiline':False]
['text':' Shutdown the mock remote server before the OplogFetcher tries to connect.','line_number':2370,'multiline':False]
['text':' Hang OplogFetcher before it retries the connection.','line_number':2373,'multiline':False]
['text':' Create an OplogFetcher with 1 retry attempt. This will also ensure that _runQuery was','line_number':2377,'multiline':False]
['text':' scheduled before returning.','line_number':2378,'multiline':False]
['text':' Wait until the first connect attempt fails but before it retries.','line_number':2381,'multiline':False]
['text':' Shut down the OplogFetcher.','line_number':2384,'multiline':False]
['text':' Disable the failpoint to allow reconnection.','line_number':2387,'multiline':False]
['text':' Test that OplogFetcher resets the number of restarts after a successful connection on a','line_number':2396,'multiline':False]
['text':' retry.','line_number':2397,'multiline':False]
['text':' Shutdown the mock remote server before the OplogFetcher tries to connect.','line_number':2400,'multiline':False]
['text':' Hang OplogFetcher before it retries the connection.','line_number':2403,'multiline':False]
['text':' Create an OplogFetcher with 1 retry attempt. This will also ensure that _runQuery was','line_number':2407,'multiline':False]
['text':' scheduled before returning.','line_number':2408,'multiline':False]
['text':' Wait until the first connect attempt fails but before it retries.','line_number':2411,'multiline':False]
['text':' Bring up the mock server so that the connection retry can succeed.','line_number':2414,'multiline':False]
['text':' Disable the failpoint to allow reconnection.','line_number':2417,'multiline':False]
['text':' After the connection succeeded, the number of restarts should be reset back to 0 so that the','line_number':2420,'multiline':False]
['text':' OplogFetcher can tolerate another failure before failing. This will cause the first attempt','line_number':2421,'multiline':False]
['text':' to create a cursor to fail. After this, the new cursor will be blocked on call() while','line_number':2422,'multiline':False]
['text':' retrying to initialize. This also makes sure the OplogFetcher reconnects correctly.','line_number':2423,'multiline':False]
['text':' Allow the cursor re-initialization to succeed. But the OplogFetcher will shut down with an OK','line_number':2430,'multiline':False]
['text':' status after receiving this batch because the cursor id is 0.','line_number':2431,'multiline':False]
['text':' Test that the OplogFetcher can autoreconnect after a broken connection.','line_number':2441,'multiline':False]
['text':' Create an oplog fetcher with one retry.','line_number':2444,'multiline':False]
['text':' Simulate a disconnect for the first find command.','line_number':2448,'multiline':False]
['text':' Simulate closing the cursor and the OplogFetcher should exit with an OK status.','line_number':2455,'multiline':False]
['text':' Test that the OplogFetcher fails an autoreconnect after a broken connection.','line_number':2464,'multiline':False]
['text':' Create an oplog fetcher with one retry.','line_number':2467,'multiline':False]
['text':' Simulate a disconnect for the first find command. And the OplogFetcher should retry with','line_number':2475,'multiline':False]
['text':' AutoReconnect.','line_number':2476,'multiline':False]
['text':' Shut down the mock server before OplogFetcher reconnects.','line_number':2479,'multiline':False]
['text':' Allow retry and autoreconnect.','line_number':2483,'multiline':False]
['text':' AutoReconnect should also fail because the server is shut down.','line_number':2488,'multiline':False]
['text':' Test that the connection disconnects if we get errors after successfully receiving a batch','line_number':2493,'multiline':False]
['text':' from the exhaust stream.','line_number':2494,'multiline':False]
['text':' Create an oplog fetcher with one retry.','line_number':2497,'multiline':False]
['text':' First batch for the initial find command.','line_number':2506,'multiline':False]
['text':' Temporarily override the metatdata reader to introduce failure after successfully receiving a','line_number':2512,'multiline':False]
['text':' batch from the first getMore. And the exhaust stream is now established.','line_number':2513,'multiline':False]
['text':' moreToCome ','line_number':2519,'multiline':True]
['text':' Test that the connection is disconnected because we cannot use the same connection to','line_number':2523,'multiline':False]
['text':' recreate cursor as more data is on the way from the server for the exhaust stream.','line_number':2524,'multiline':False]
['text':' Unset the metatdata reader.','line_number':2527,'multiline':False]
['text':' Allow retry and autoreconnect.','line_number':2530,'multiline':False]
['text':' Simulate closing the cursor and the OplogFetcher should exit with an OK status.','line_number':2533,'multiline':False]
['text':' Create an oplog fetcher without any retries.','line_number':2544,'multiline':False]
['text':' Creating the cursor will succeed.','line_number':2553,'multiline':False]
['text':' Empty batch from first getMore.','line_number':2557,'multiline':False]
['text':' moreToCome ','line_number':2559,'multiline':True]
['text':' Terminating empty batch from exhaust stream with cursorId 0.','line_number':2561,'multiline':False]
['text':' moreToCome ','line_number':2563,'multiline':True]
['text':' Process one batch with the logical time metadata.','line_number':2595,'multiline':False]
['text':' Test that the cluster time is updated to the cluster time in the metadata.','line_number':2598,'multiline':False]
['text':' Create an oplog fetcher without any retries but with a filter.  Note the filter is not','line_number':2607,'multiline':False]
['text':' respected as our Mock objects do not respect them; this unit test only tests the command','line_number':2608,'multiline':False]
['text':' is well-formed.','line_number':2609,'multiline':False]
['text':' numRestarts ','line_number':2614,'multiline':True]
['text':' requireFresherSyncSourc ','line_number':2615,'multiline':True]
['text':' Update lastFetched before it is updated by getting the next batch.','line_number':2626,'multiline':False]
['text':' Creating the cursor will succeed.','line_number':2629,'multiline':False]
['text':' Create an oplog fetcher without any retries but with a custom read concern.','line_number':2646,'multiline':False]
['text':' numRestarts ','line_number':2651,'multiline':True]
['text':' requireFresherSyncSourc ','line_number':2652,'multiline':True]
['text':' filter ','line_number':2655,'multiline':True]
['text':' Update lastFetched before it is updated by getting the next batch.','line_number':2664,'multiline':False]
['text':' Creating the cursor will succeed.','line_number':2667,'multiline':False]
['text':' filter ','line_number':2675,'multiline':True]
['text':' numRestarts ','line_number':2687,'multiline':True]
['text':' requireFresherSyncSourc ','line_number':2688,'multiline':True]
['text':' filter ','line_number':2691,'multiline':True]
['text':' readConcern ','line_number':2692,'multiline':True]
['text':' requestResumeToken ','line_number':2693,'multiline':True]
['text':' Update lastFetched before it is updated by getting the next batch.','line_number':2703,'multiline':False]
['text':' Creating the cursor will succeed.','line_number':2713,'multiline':False]
['text':' filter ','line_number':2721,'multiline':True]
['text':' requestResumeToken ','line_number':2725,'multiline':True]
['text':' namespace','line_number':2733,'multiline':False]
