['text':'*
 *    Copyright (C) 2020-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
     * Adds an entry for mtab with the provided tenantId as the key. There must not be
     * a blocker of the same type (donor or recipient) for this tenantId already.
     ','line_number':131,'multiline':True]
['text':'*
     * Add one access blocker and associate it with many tenant_id objects.
     ','line_number':137,'multiline':True]
['text':'*
     * Adds an entry for mtab that will block all tenants.
     ','line_number':143,'multiline':True]
['text':'*
     * Remove all access blockers of the provided type for a migration.
     ','line_number':148,'multiline':True]
['text':'*
     * Removes all mtabs of the given type.
     ','line_number':154,'multiline':True]
['text':'*
     * Returns the first 'DonorRecipientAccessBlockerPair' it finds whose 'tenantId' is a prefix for
     * 'dbName'.
     ','line_number':159,'multiline':True]
['text':'*
     * Iterates through each of the TenantMigrationAccessBlockers and
     * returns the first 'TenantMigrationAccessBlocker' it finds whose 'tenantId' is a prefix for
     * 'dbName' and is of the requested type.
     ','line_number':166,'multiline':True]
['text':'*
     * Return the global donor access blocker or searches through TenantMigrationAccessBlockers and
     * returns the TenantMigrationAccessBlocker that matches tenantId.
     ','line_number':174,'multiline':True]
['text':'*
     * Return the global donor access blocker and all the donor access blockers associated with a
     * migration.
     ','line_number':181,'multiline':True]
['text':'*
     * Return the recipient access blockers associated with a migration.
     ','line_number':188,'multiline':True]
['text':'*
     * Applies callback to all TenantMigrationAccessBlockers of the desired type.
     ','line_number':196,'multiline':True]
['text':'*
     * Starts the _asyncBlockingOperationsExecutor.
     ','line_number':201,'multiline':True]
['text':'*
     * Shuts down each of the TenantMigrationAccessBlockers and releases the shared_ptrs to the
     * TenantMigrationAccessBlockers from the map.
     ','line_number':206,'multiline':True]
['text':'*
     * Shuts down each of the TenantMigrationAccessBlockers, releases the shared_ptrs to the
     * TenantMigrationAccessBlockers from the map, and resets the executor.
     ','line_number':212,'multiline':True]
['text':'*
     * Iterates through each of the TenantMigrationAccessBlockers stored by the mapping
     * and appends the server status of each blocker to the BSONObjBuilder.
     ','line_number':218,'multiline':True]
['text':'*
     * Notifies all the TenantMigrationAccessBlockers that the given opTime has been majority
     * committed.
     *
     * This is called while holding a very hot mutex (the ReplicationCoordinator mutex). Therefore
     * it should avoid doing any work that can be done later, and avoid calling back into any
     * replication functions that take this mutex (which would cause self-deadlock).
     ','line_number':224,'multiline':True]
['text':' All member variables are labeled with one of the following codes indicating the','line_number':251,'multiline':False]
['text':' synchronization rules for accessing them.','line_number':252,'multiline':False]
['text':'','line_number':253,'multiline':False]
['text':' (R)  Read-only in concurrent operation; no synchronization required.','line_number':254,'multiline':False]
['text':' (S)  Self-synchronizing; access according to class's own rules.','line_number':255,'multiline':False]
['text':' (M)  Reads and writes guarded by _mutex.','line_number':256,'multiline':False]
['text':' (W)  Synchronization required only for writes.','line_number':257,'multiline':False]
['text':' (S) Lives for the lifetime of the registry.','line_number':259,'multiline':False]
['text':' (M)','line_number':262,'multiline':False]
['text':' namespace mongo','line_number':265,'multiline':False]
