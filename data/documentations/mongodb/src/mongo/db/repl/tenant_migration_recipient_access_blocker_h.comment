['text':'*
 *    Copyright (C) 2021-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 * The TenantMigrationRecipientAccessBlocker is used to reject tenant reads at a point-in-time
 * before a recipient node reaches the consistent state after a tenant migration.
 *
 * When data cloning is finished (and therefore a consistent donor optime established) an opObserver
 * that is observing the recipient state document will create a
 * TenantMigrationRecipientAccessBlocker in state `kRejectReadsAndWrites` that will reject all
 * commands (with IllegalOperation) for that tenant. If a command is received during this
 * `kRejectReadsAndWrites` phase it suggests that something is wrong with the proxy since traffic
 * should not be routed to the recipient yet.
 *
 * When oplog application reaches this consistent point, the recipient primary will wait for
 * the earlier state document write to be committed on all recipient nodes before doing the state
 * machine write for the consistent state. The TenantMigrationRecipientAccessBlocker, upon seeing
 * the write for the consistent state, will transition to `kRejectReadsBefore` state with the
 * `rejectBeforeTimestamp` set to the recipient consistent timestamp and will start allowing reads
 * for read concerns which read the latest snapshot, and "atClusterTime" or "majority" read concerns
 * which are after the `rejectBeforeTimestamp`. Reads for older snapshots, except "majority" until
 * the majority snapshot for a node reaches the `rejectBeforeTimestamp`, will be rejected with
 * SnapshotTooOld. Reads for "majority" when the majority snapshot is before the
 * `rejectBeforeTimestamp` will be blocked until the majority committed snapshot reaches that
 * timestamp.
 *
 * To ensure atClusterTime and afterClusterTime reads are consistent, when the recipient receives a
 * recipientSyncData command with a returnAfterReachingTimestamp after the consistent point, the
 * `rejectBeforeTimestamp` will be advanced to the given returnAfterReachingTimestamp.
 *
 * Blocker excludes all operations with 'tenantMigrationInfo' decoration set, as they are
 * internal.
 ','line_number':56,'multiline':True]
['text':'','line_number':92,'multiline':False]
['text':' Called by all writes and reads against the database.','line_number':93,'multiline':False]
['text':'','line_number':94,'multiline':False]
['text':'','line_number':103,'multiline':False]
['text':' Called by index build user threads before acquiring an index build slot, and again right','line_number':104,'multiline':False]
['text':' after registering the build.','line_number':105,'multiline':False]
['text':'','line_number':106,'multiline':False]
['text':'*
     * Checks if opening a new change stream should block.
     ','line_number':109,'multiline':True]
['text':'*
     * Returns error status if "getMore" command of a change stream should fail.
     ','line_number':114,'multiline':True]
['text':' @return true if TTL is blocked','line_number':119,'multiline':False]
['text':' Clear TTL blocker once the state doc is garbage collectable.','line_number':122,'multiline':False]
['text':'*
     * Called when an optime is majority committed.
     ','line_number':125,'multiline':True]
['text':'','line_number':134,'multiline':False]
['text':' Called as a recipient to reject reads before the `timestamp`.','line_number':135,'multiline':False]
['text':'','line_number':136,'multiline':False]
['text':'*
     * The access states of an mtab.
     ','line_number':144,'multiline':True]
['text':' Protects the state below.','line_number':171,'multiline':False]
['text':' Start with blocked TTL, unblock when the migration document is marked as','line_number':178,'multiline':False]
['text':' garbage collectable.','line_number':179,'multiline':False]
['text':' namespace mongo','line_number':183,'multiline':False]
