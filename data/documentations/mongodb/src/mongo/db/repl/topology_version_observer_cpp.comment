['text':'*
 *    Copyright (C) 2020-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' IWYU pragma: no_include "cxxabi.h"','line_number':36,'multiline':False]
['text':' If we aren't the first ones to call shutdown, wait for the thread to stop','line_number':87,'multiline':False]
['text':' Wait for the thread to stop and steal it to the local stack','line_number':97,'multiline':False]
['text':' If we are still running, attempt to kill any opCtx','line_number':101,'multiline':False]
['text':' We never started','line_number':116,'multiline':False]
['text':' Finally join','line_number':120,'multiline':False]
['text':' Early return if we know there isn't a worker','line_number':126,'multiline':False]
['text':' Acquires the lock to avoid potential races with `_workerThreadBody()`.','line_number':130,'multiline':False]
['text':' Atomics cannot be used here as `shared_ptr` cannot be atomically updated.','line_number':131,'multiline':False]
['text':' If we're not dismissed, reset the _cache.','line_number':148,'multiline':False]
['text':' Reset the cacheGuard because we got a good value.','line_number':160,'multiline':False]
['text':' Pessimistically check if we should shutdown before we sleepFor(...).','line_number':166,'multiline':False]
['text':' We could be a PeriodicRunner::Job someday. For now, OperationContext::sleepFor() will serve','line_number':172,'multiline':False]
['text':' the same purpose.','line_number':173,'multiline':False]
['text':' Rethrow if we've experienced shutdown.','line_number':183,'multiline':False]
['text':' This thread may be interrupted by replication state changes and this is safe because','line_number':195,'multiline':False]
['text':' _cacheHelloResponse is the only place where an opCtx is used and already has logic for','line_number':196,'multiline':False]
['text':' handling exceptions. Any logic added to this thread that uses the opCtx must be able to','line_number':197,'multiline':False]
['text':' handle interrupts.','line_number':198,'multiline':False]
['text':' Only the observer thread updates `_cache`, thus there is no need to hold the lock before','line_number':201,'multiline':False]
['text':' accessing `_cache` here.','line_number':202,'multiline':False]
['text':' The following notifies `init()` that the worker thread is active.','line_number':221,'multiline':False]
['text':' Invalidate the cache as it is no longer updated','line_number':233,'multiline':False]
['text':' Notify `shutdown()` that the worker thread is no longer active','line_number':236,'multiline':False]
['text':' Pause here to confirm that we do not depend upon shutdown() being invoked for','line_number':242,'multiline':False]
['text':' isShutdown() to be true.','line_number':243,'multiline':False]
['text':' Set the _workerOpCtx to our newly formed opCtxHandle before we unlock.','line_number':252,'multiline':False]
['text':' Checking `_shouldShutdown` under the lock is necessary to ensure the shutdown','line_number':254,'multiline':False]
['text':' method can interrupt the new operation.','line_number':255,'multiline':False]
['text':' We're done with our opCtxHandle, unset _workerOpCtx.','line_number':262,'multiline':False]
['text':' Pause here so that we can force there to be an opCtx to be interrupted.','line_number':267,'multiline':False]
['text':' namespace repl','line_number':276,'multiline':False]
['text':' namespace mongo','line_number':277,'multiline':False]
