['text':'*
 *    Copyright (C) 2020-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 * An utility to observe topology changes asynchronously and cache updates.
 * `getCached()` is thread-safe (through `_mutex`), but its behavior is undefined during the
 * execution of the constructor/destructor methods.
 *
 * The life-cycle for instances of this class (`_state`) is as follows:
 * * Uninitialized: immediately after construction.
 *   Call `init()` to initialize the instance and start the observer thread.
 *   You may only call `init()` once -- otherwise, it will terminate the process.
 * * Running: anytime after returning from `init()` and before calling `shutdown()`.
 *   Note that if the observer thread stops due to an error, it will set the state to Shutdown.
 * * Shutdown: the object is ready for destruction.
 *   You must wait for `shutdown()` to return before deleting the object.
 *   Multiple, multithreaded calls to `shutdown()` is safe, and only one will proceed.
 *   After transitioning to shutdown, you can only call the destructor.
 *
 * constructor() -> init() -> getCached() ... getCached() -> shutdown() -> destructor()
 ','line_number':60,'multiline':True]
['text':'*
     * Returns a reference (shared pointer) to the cached version of `HelloResponse`.
     * Note that the reference is initially set to `nullptr`.
     * Also, the reference is set back to `nullptr` if the thread that updates `_cache` terminates
     * due to an error (i.e., exception), or it receives an invalid response.
     ','line_number':94,'multiline':True]
['text':'*
     * Returns true if this TopologyVersionObserver background thread has stopped.
     *
     * Note that this funtion only returns true after _thread has started and ended, thus implies
     * that getCached() will never return a valid HelloResponse again.
     ','line_number':104,'multiline':True]
['text':'*
     * Protects shared accesses to `_cache`, `_observerClient`, and serializes calls to `init()`
     * and `shutdown()` methods.
     *
     * Accessing the cached `HelloResponse` follows a single-producer, multi-consumer model:
     * consumers are readers of `_cache` and the producer is the observer thread. The assumption
     * is that the contention on this lock is insignificant.
     ','line_number':125,'multiline':True]
['text':'*
     * Tells the worker thread if it should continue to run
     *
     * This variable is set to true from false outside the worker thread
     ','line_number':136,'multiline':True]
['text':' The reference to the latest cached version of `HelloResponse`','line_number':143,'multiline':False]
['text':'*
     * Represents the current state of the observer.
     *
     * This variable is only changed from the worker thread
     ','line_number':146,'multiline':True]
['text':' Holds a reference to the worker opCtx to allow `shutdown()` to stop the observer thread.','line_number':153,'multiline':False]
['text':' This variable should only be set after the `_workerThreadBody()` checks _shouldShutdown.','line_number':154,'multiline':False]
['text':' This means that we only ever have to interrupt the _workerOpCtx at most once because both its','line_number':155,'multiline':False]
['text':' construction and its destruction synchronize with the cv in shutdown().','line_number':156,'multiline':False]
['text':' namespace repl','line_number':165,'multiline':False]
['text':' namespace mongo','line_number':166,'multiline':False]
