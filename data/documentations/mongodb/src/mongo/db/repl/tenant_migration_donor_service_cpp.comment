['text':'*
 *    Copyright (C) 2020-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' IWYU pragma: keep','line_number':55,'multiline':False]
['text':'*
 * Encapsulates the retry logic for sending the ForgetMigration command.
 ','line_number':166,'multiline':True]
['text':' Returned if findHost() is unable to target the recipient in 15 seconds, which may','line_number':180,'multiline':False]
['text':' happen after a failover.','line_number':181,'multiline':False]
['text':'*
 * Encapsulates the retry logic for sending the SyncData command.
 ','line_number':187,'multiline':True]
['text':'* Returns true if we should retry sending SyncData given the error ','line_number':197,'multiline':True]
['text':' Returned if findHost() is unable to target the recipient in 15 seconds, which may','line_number':215,'multiline':False]
['text':' happen after a failover.','line_number':216,'multiline':False]
['text':' namespace','line_number':266,'multiline':False]
['text':' Any existing migration for this tenant must be aborted and garbage-collectable.','line_number':293,'multiline':False]
['text':' namespace mongo','line_number':308,'multiline':False]
['text':' Since a tenant migration donor and recipient both copy signing keys from each other and','line_number':377,'multiline':False]
['text':' put them in the same external keys collection, they share this TTL index (the recipient','line_number':378,'multiline':False]
['text':' service does not also build this TTL index).','line_number':379,'multiline':False]
['text':' The migration was resumed on stepup.','line_number':402,'multiline':False]
['text':' Ignore connMode and sessionMode because tenant migrations are not associated with','line_number':436,'multiline':False]
['text':' sessions and they run in a background thread pool.','line_number':437,'multiline':False]
['text':' Resolve any unresolved promises to avoid hanging.','line_number':534,'multiline':False]
['text':'fromMigrate=','line_number':576,'multiline':True]
['text':' '$setOnInsert' update operator can never modify an existing on-disk state','line_number':578,'multiline':False]
['text':' doc.','line_number':579,'multiline':False]
['text':' Start blocking writes before getting an oplog slot to guarantee no','line_number':633,'multiline':False]
['text':' writes to the tenant's data can commit with a timestamp after the','line_number':634,'multiline':False]
['text':' block timestamp.','line_number':635,'multiline':False]
['text':' Reserve an opTime for the write.','line_number':651,'multiline':False]
['text':' Update the state.','line_number':656,'multiline':False]
['text':' indexesAffected ','line_number':701,'multiline':True]
['text':' OpDebug* ','line_number':702,'multiline':True]
['text':'fromMigrate=','line_number':756,'multiline':True]
['text':' An abort was requested before the abort source was set up so immediately cancel it.','line_number':932,'multiline':False]
['text':' We must abort the migration if we try to start or resume while upgrading or downgrading.','line_number':959,'multiline':False]
['text':' (Generic FCV reference): This FCV check should exist across LTS binary versions.','line_number':960,'multiline':False]
['text':' Tenant migrations gets aborted on FCV upgrading or downgrading state. But,','line_number':970,'multiline':False]
['text':' due to race between between Instance::getOrCreate() and','line_number':971,'multiline':False]
['text':' SetFeatureCompatibilityVersionCommand::_cancelTenantMigrations(), we might miss aborting this','line_number':972,'multiline':False]
['text':' tenant migration and FCV might have updated or downgraded at this point. So, need to ensure','line_number':973,'multiline':False]
['text':' that the protocol is still compatible with FCV.','line_number':974,'multiline':False]
['text':' Any FCV changes after this point will abort this migration.','line_number':979,'multiline':False]
['text':' Validate the field is correctly set','line_number':989,'multiline':False]
['text':' Note we do not use the abort migration token here because the donorAbortMigration','line_number':995,'multiline':False]
['text':' command waits for a decision to be persisted which will not happen if inserting','line_number':996,'multiline':False]
['text':' the initial state document fails.','line_number':997,'multiline':False]
['text':' Note from here on the migration cannot be aborted, so only the token from the primary','line_number':1029,'multiline':False]
['text':' only service should be used.','line_number':1030,'multiline':False]
['text':' Avoid double counting tenant migration statistics after failover.','line_number':1037,'multiline':False]
['text':' Double counting may still happen if the failover to the same primary','line_number':1038,'multiline':False]
['text':' happens after this block and before the state doc GC is persisted.','line_number':1039,'multiline':False]
['text':' Don't set the forget migration durable promise if the instance has been canceled. We','line_number':1067,'multiline':False]
['text':' assume whatever canceled the token will also set the promise with an appropriate','line_number':1068,'multiline':False]
['text':' error.','line_number':1069,'multiline':False]
['text':' If a ConflictingServerlessOperation was thrown, ensure a valid _abortReason exists.','line_number':1076,'multiline':False]
['text':' If a ConflictingServerlessOperation was thrown during the initial insertion we do not','line_number':1088,'multiline':False]
['text':' have a state document. In that case return the error to PrimaryOnlyService so it','line_number':1089,'multiline':False]
['text':' frees the instance from its map.','line_number':1090,'multiline':False]
['text':' Enter "abortingIndexBuilds" state.','line_number':1107,'multiline':False]
['text':' Before starting data sync, abort any in-progress index builds.  No new index','line_number':1129,'multiline':False]
['text':' builds can start while we are doing this because the mtab prevents it.','line_number':1130,'multiline':False]
['text':' Throw out any accumulated results on error','line_number':1182,'multiline':False]
['text':' expireAt ','line_number':1193,'multiline':True]
['text':' findNetworkTimeout ','line_number':1211,'multiline':True]
['text':' getMoreNetworkTimeout ','line_number':1212,'multiline':True]
['text':' Note the fetcher cannot be canceled via token, so this check for','line_number':1220,'multiline':False]
['text':' interrupt is required otherwise stepdown/shutdown could block waiting','line_number':1221,'multiline':False]
['text':' for the fetcher to complete.','line_number':1222,'multiline':False]
['text':' We use the instance cleanup executor instead of the scoped task executor','line_number':1229,'multiline':False]
['text':' here in order to avoid a self-deadlock situation in the Fetcher during','line_number':1230,'multiline':False]
['text':' failovers.','line_number':1231,'multiline':False]
['text':' The callback never got invoked.','line_number':1242,'multiline':False]
['text':' Enter "dataSync" state.','line_number':1293,'multiline':False]
['text':' For shard merge, we set startApplyingDonorOpTime timestamp on the recipient to the donor's','line_number':1320,'multiline':False]
['text':' backup cursor checkpoint timestamp, and startMigrationDonorTimestamp to the timestamp after','line_number':1321,'multiline':False]
['text':' aborting all index builds. As a result, startApplyingDonorOpTime timestamp can be <','line_number':1322,'multiline':False]
['text':' startMigrationDonorTimestamp, which means we can erroneously fetch and apply index build','line_number':1323,'multiline':False]
['text':' operations before startMigrationDonorTimestamp. Trigger a stable checkpoint to ensure that','line_number':1324,'multiline':False]
['text':' the recipient does not fetch and apply donor index build entries before','line_number':1325,'multiline':False]
['text':' startMigrationDonorTimestamp.','line_number':1326,'multiline':False]
['text':'stableCheckpoint','line_number':1334,'multiline':True]
['text':' Enter "blocking" state.','line_number':1371,'multiline':False]
['text':' Source to cancel the timeout if the operation completed in time.','line_number':1396,'multiline':False]
['text':' Deadline reached, cancel the pending '_sendRecipientSyncDataCommand()'...','line_number':1416,'multiline':False]
['text':' ...and return error.','line_number':1418,'multiline':False]
['text':' '_sendRecipientSyncDataCommand()' finished first, cancel the timeout.','line_number':1421,'multiline':False]
['text':' Last chance to abort','line_number':1452,'multiline':False]
['text':' Enter "commit" state.','line_number':1455,'multiline':False]
['text':' Ignore the abort token once we've entered the committed state','line_number':1457,'multiline':False]
['text':' If interrupt is called at some point during execution, it is','line_number':1464,'multiline':False]
['text':' possible that interrupt() will fulfill the promise before we','line_number':1465,'multiline':False]
['text':' do.','line_number':1466,'multiline':False]
['text':' Don't handle errors if the instance token is canceled to guarantee we don't enter the abort','line_number':1478,'multiline':False]
['text':' state because of an earlier error from token cancellation.','line_number':1479,'multiline':False]
['text':' The migration was resumed on stepup and it was already aborted.','line_number':1484,'multiline':False]
['text':' Note we must check the parent token has not been canceled so we don't change the error if the','line_number':1489,'multiline':False]
['text':' abortToken was canceled because of an instance interruption. The checks don't need to be','line_number':1490,'multiline':False]
['text':' atomic because a token cannot be uncanceled.','line_number':1491,'multiline':False]
['text':' The migration failed either before or during inserting the state doc. Use the status to','line_number':1500,'multiline':False]
['text':' fulfill the _initialDonorStateDurablePromise to fail the donorStartMigration command','line_number':1501,'multiline':False]
['text':' immediately.','line_number':1502,'multiline':False]
['text':' Don't abort the migration on retriable errors that may have been generated by the local','line_number':1508,'multiline':False]
['text':' server shutting/stepping down because it can be resumed when the client retries.','line_number':1509,'multiline':False]
['text':' Enter "abort" state.','line_number':1519,'multiline':False]
['text':' If interrupt is called at some point during execution, it is','line_number':1526,'multiline':False]
['text':' possible that interrupt() will fulfill the promise before we do.','line_number':1527,'multiline':False]
['text':' The migration state has already been marked as garbage collectable. Set the','line_number':1563,'multiline':False]
['text':' donorForgetMigration promise here since the Instance's destructor has an','line_number':1564,'multiline':False]
['text':' invariant that _receiveDonorForgetMigrationPromise is ready.','line_number':1565,'multiline':False]
['text':' Wait for the donorForgetMigration command.','line_number':1570,'multiline':False]
['text':' If donorAbortMigration has already canceled work, the abortMigrationSource would be','line_number':1571,'multiline':False]
['text':' canceled and continued usage of the source would lead to incorrect behavior. Thus, we','line_number':1572,'multiline':False]
['text':' need to use the token after the migration has reached a decision state in order to continue','line_number':1573,'multiline':False]
['text':' work, such as sending donorForgetMigration, successfully.','line_number':1574,'multiline':False]
['text':' If the abortReason is ConflictingServerlessOperation, it means there are no','line_number':1579,'multiline':False]
['text':' document on the recipient. Do not send the forget command.','line_number':1580,'multiline':False]
['text':' Note marking the keys as garbage collectable is not atomic with marking the','line_number':1597,'multiline':False]
['text':' state document garbage collectable, so an interleaved failover can lead the','line_number':1598,'multiline':False]
['text':' keys to be deleted before the state document has an expiration date. This is','line_number':1599,'multiline':False]
['text':' acceptable because the decision to forget a migration is not reversible.','line_number':1600,'multiline':False]
['text':' If the state document was not inserted due to a conflicting serverless operation, do not','line_number':1622,'multiline':False]
['text':' try to delete it.','line_number':1623,'multiline':False]
['text':' namespace mongo','line_number':1642,'multiline':False]
