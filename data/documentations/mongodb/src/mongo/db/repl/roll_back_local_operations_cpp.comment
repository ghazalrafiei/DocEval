['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' After the release of MongoDB 3.8, these fail point declarations can','line_number':54,'multiline':False]
['text':' be moved into the rs_rollback.cpp file, as we no longer need to maintain','line_number':55,'multiline':False]
['text':' functionality for rs_rollback_no_uuid.cpp. See SERVER-29766.','line_number':56,'multiline':False]
['text':' Failpoint which causes rollback to hang before finishing.','line_number':58,'multiline':False]
['text':' Failpoint which causes rollback to hang and then fail after minValid is written.','line_number':61,'multiline':False]
['text':' namespace','line_number':88,'multiline':False]
['text':' nextOplogEntry holds the oplog entry immediately after the common point.','line_number':107,'multiline':False]
['text':' As we iterate through the oplog in reverse, opAfterCurrentEntry holds the oplog entry','line_number':122,'multiline':False]
['text':' immediately after the entry stored in _localOplogValue.','line_number':123,'multiline':False]
['text':' We don't need to advance the localOplogIterator here because it is guaranteed to advance','line_number':157,'multiline':False]
['text':' during the next call to onRemoteOperation. This is because before the next call to','line_number':158,'multiline':False]
['text':' onRemoteOperation, the remote oplog iterator will advance and the new remote operation is','line_number':159,'multiline':False]
['text':' guaranteed to have a timestamp less than the current local operation, which will trigger','line_number':160,'multiline':False]
['text':' a call to get the next local operation.','line_number':161,'multiline':False]
['text':' Retry in case of network errors.','line_number':181,'multiline':False]
['text':' namespace repl','line_number':218,'multiline':False]
['text':' namespace mongo','line_number':219,'multiline':False]
