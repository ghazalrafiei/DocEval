['text':'*
 *    Copyright (C) 2020-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' namespace','line_number':97,'multiline':False]
['text':' Failpoint which causes the tenant database cloner to hang after it has successfully run','line_number':99,'multiline':False]
['text':' listIndexes and recorded the results and the operationTime.','line_number':100,'multiline':False]
['text':' Failpoint which causes the tenant collection cloner to hang after createCollection. This','line_number':103,'multiline':False]
['text':' failpoint doesn't check for cloner exit so we can rely on its timesEntered in tests.','line_number':104,'multiline':False]
['text':' Failpoint which causes tenant migration to hang after handling the next batch of results from the','line_number':107,'multiline':False]
['text':' DBClientConnection, optionally limited to a specific collection.','line_number':108,'multiline':False]
['text':' total will be replaced with count command result.','line_number':134,'multiline':False]
['text':' We can exit this cloner cleanly and move on to the next one.','line_number':171,'multiline':False]
['text':' Query ','line_number':186,'multiline':True]
['text':' limit ','line_number':188,'multiline':True]
['text':' skip ','line_number':189,'multiline':True]
['text':' The count command may return a negative value after an unclean shutdown,','line_number':192,'multiline':False]
['text':' so we set it to zero here to avoid aborting the collection clone.','line_number':193,'multiline':False]
['text':' Note that this count value is only used for reporting purposes.','line_number':194,'multiline':False]
['text':' This avoids a race where an index may be created and data inserted after we do listIndexes.','line_number':228,'multiline':False]
['text':' That would result in doing a createIndexes on a non-empty collection during oplog application.','line_number':229,'multiline':False]
['text':' Instead, if the collection is empty before listIndexes, we do not clone the data -- it will be','line_number':230,'multiline':False]
['text':' added during oplog application.','line_number':231,'multiline':False]
['text':'','line_number':232,'multiline':False]
['text':' Note we cannot simply use the count() above, because that checks metadata which may not be 100%','line_number':233,'multiline':False]
['text':' accurate.','line_number':234,'multiline':False]
['text':' This will be set after a successful listCollections command.','line_number':254,'multiline':False]
['text':' includeBuildUUIDs ','line_number':258,'multiline':True]
['text':' Do a majority read on the sync source to make sure the indexes listed exist on a majority of','line_number':260,'multiline':False]
['text':' nodes in the set. We do not check the rollbackId - rollback would lead to the sync source','line_number':261,'multiline':False]
['text':' closing connections so the stage would fail.','line_number':262,'multiline':False]
['text':' Only hang when cloning the specified collection, or if no collection was specified.','line_number':280,'multiline':False]
['text':' Process the listIndexes results for finished indexes only.','line_number':291,'multiline':False]
['text':' Tenant collections are replicated collections and it's impossible to have an empty _id index','line_number':311,'multiline':False]
['text':' and collection options 'autoIndexId' as false except for collections that use clustered','line_number':312,'multiline':False]
['text':' index. These are extra sanity checks made on the response received from the remote node.','line_number':313,'multiline':False]
['text':' We are resuming and the collection already exists.','line_number':362,'multiline':False]
['text':' Set the recipient info on the opCtx to bypass the access blocker for local reads.','line_number':365,'multiline':False]
['text':' Reset the recipient info after local reads so oplog entries for future writes','line_number':368,'multiline':False]
['text':' (createCollection/createIndex) don't get stamped with the fromTenantMigration field.','line_number':369,'multiline':False]
['text':' The collection is not empty. Skip creating indexes and resume cloning from the last','line_number':377,'multiline':False]
['text':' document.','line_number':378,'multiline':False]
['text':' The collection is still empty. Create indexes that we haven't created. For the','line_number':389,'multiline':False]
['text':' indexes that exist locally but not on the donor, we don't need to drop them because','line_number':390,'multiline':False]
['text':' oplog application will eventually apply those dropIndex oplog entries.','line_number':391,'multiline':False]
['text':' No collection with the same UUID exists. But if this still fails with NamespaceExists, it','line_number':412,'multiline':False]
['text':' means that we have a collection with the same namespace but a different UUID.','line_number':413,'multiline':False]
['text':' createIdIndex ','line_number':418,'multiline':True]
['text':' If we are resuming from a recipient failover we can get ErrorCodes::NamespaceExists','line_number':422,'multiline':False]
['text':' due to following conditions:','line_number':423,'multiline':False]
['text':'','line_number':424,'multiline':False]
['text':' 1) We have a collection on disk with the same namespace but a different uuid. It','line_number':425,'multiline':False]
['text':' means this collection must have been dropped and re-created under a different uuid on','line_number':426,'multiline':False]
['text':' the donor during the recipient failover. And the drop and the re-create will be','line_number':427,'multiline':False]
['text':' covered by the oplog application phase.','line_number':428,'multiline':False]
['text':'','line_number':429,'multiline':False]
['text':' 2) We have a [time series] view on disk with the same namespace. It means the view','line_number':430,'multiline':False]
['text':' must have dropped and created a regular collection with the namespace same as the','line_number':431,'multiline':False]
['text':' dropped view during the recipient failover. The drop view and create collection','line_number':432,'multiline':False]
['text':' will be covered by the oplog application phase.','line_number':433,'multiline':False]
['text':' This will start building the indexes whose specs we saved last stage.','line_number':446,'multiline':False]
['text':' Sets up tracking the lastVisibleOpTime from response metadata.','line_number':466,'multiline':False]
['text':' Some responses may not carry this information (e.g. reconnecting to verify a drop).','line_number':481,'multiline':False]
['text':' Use $expr and the aggregation version of $gt to avoid type bracketing.','line_number':502,'multiline':False]
['text':' Process the results of the cursor one batch at a time.','line_number':522,'multiline':False]
['text':' Only hang when cloning the specified collection, or if no collection was specified.','line_number':556,'multiline':False]
['text':' Disabling the internal document validation for inserts on recipient side as those','line_number':579,'multiline':False]
['text':' validations should have already been performed on donor's primary during tenant','line_number':580,'multiline':False]
['text':' collection document insertion.','line_number':581,'multiline':False]
['text':' Set the recipient info on the opCtx to skip checking user permissions in','line_number':595,'multiline':False]
['text':' 'write_ops_exec::performInserts()'.','line_number':596,'multiline':False]
['text':' write_ops_exec::PerformInserts() will handle limiting the batch size','line_number':600,'multiline':False]
['text':' that gets inserted in a single WUOW.','line_number':601,'multiline':False]
['text':' Since the writes are ordered, it's ok to check just the last writeOp result.','line_number':604,'multiline':False]
['text':' namespace repl','line_number':653,'multiline':False]
['text':' namespace mongo','line_number':654,'multiline':False]
