['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 * Creates an oplog entry to perform an update on the transaction table.
 ','line_number':73,'multiline':True]
['text':' uuid','line_number':83,'multiline':False]
['text':' fromMigrate','line_number':84,'multiline':False]
['text':' checkExistenceForDiffInsert','line_number':85,'multiline':False]
['text':' sessionInfo','line_number':89,'multiline':False]
['text':' upsert','line_number':90,'multiline':False]
['text':' statementIds','line_number':92,'multiline':False]
['text':' prevWriteOpTime','line_number':93,'multiline':False]
['text':' preImageOpTime','line_number':94,'multiline':False]
['text':' postImageOpTime','line_number':95,'multiline':False]
['text':' destinedRecipient','line_number':96,'multiline':False]
['text':' _id','line_number':97,'multiline':False]
['text':' needsRetryImage','line_number':98,'multiline':False]
['text':'*
 * Constructs a new oplog entry if the given entry has transaction state embedded within in. The new
 * oplog entry will contain the operation needed to replicate the transaction table.
 *
 * Returns boost::none if the given oplog doesn't have any transaction state or does not support
 * update to the transaction table.
 ','line_number':101,'multiline':True]
['text':'*
 * A tenant migrations transaction entry will:
 *
 * 1) Have the 'fromTenantMigration' field set
 * 2) Be a no-op entry
 * 3) Have sessionId and txnNumber
 ','line_number':139,'multiline':True]
['text':' Retryable writes have fromMigrate set.','line_number':152,'multiline':False]
['text':' namespace','line_number':167,'multiline':False]
['text':' If we generate an update from a multi-statement transaction operation, we must clear (then','line_number':203,'multiline':False]
['text':' replace) a possibly queued transaction table update for a retryable write on this session.','line_number':204,'multiline':False]
['text':' It is okay to clear the transaction table update because retryable writes only care about','line_number':205,'multiline':False]
['text':' the final state of the transaction table entry for a given session, not the full history','line_number':206,'multiline':False]
['text':' of updates for the session. By contrast, we care about each transaction table update for','line_number':207,'multiline':False]
['text':' multi-statement transactions -- we must maintain the timestamps and transaction states for','line_number':208,'multiline':False]
['text':' each entry originating from a multi-statement transaction. For this reason, we cannot defer','line_number':209,'multiline':False]
['text':' entries originating from multi-statement transactions.','line_number':210,'multiline':False]
['text':' Ignore pre/post image no-op oplog entries. These entries will not have an o2 field.','line_number':230,'multiline':False]
['text':' Do not coalesce updates across txn numbers. For more details, see SERVER-55305.','line_number':256,'multiline':False]
['text':' Session table is keyed by session id, so nothing to do here because','line_number':278,'multiline':False]
['text':' it would have triggered a unique index violation in the primary if','line_number':279,'multiline':False]
['text':' it was trying to insert with the same session id with existing ones.','line_number':280,'multiline':False]
['text':' The following cases should never be hit, we break to hit MONGO_UNREACHABLE. Reason:','line_number':292,'multiline':False]
['text':' SessionUpdateTracker should only be called when the ns target is config.transactions or','line_number':293,'multiline':False]
['text':' config.$cmd. This should never be the case with global index operations.','line_number':294,'multiline':False]
['text':' We only update the transaction table on the first partialTxn operation.','line_number':339,'multiline':False]
['text':' The prepare oplog entry is the first operation of the transaction.','line_number':373,'multiline':False]
['text':' Update the transaction record using a delta oplog entry to avoid','line_number':376,'multiline':False]
['text':' overwriting the startOpTime.','line_number':377,'multiline':False]
['text':' namespace repl','line_number':404,'multiline':False]
['text':' namespace mongo','line_number':405,'multiline':False]
