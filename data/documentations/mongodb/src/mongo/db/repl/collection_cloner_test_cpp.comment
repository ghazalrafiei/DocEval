['text':'*
 *    Copyright (C) 2019-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' IWYU pragma: no_include "ext/alloc_traits.h"','line_number':33,'multiline':False]
['text':' Used by the _loader.','line_number':138,'multiline':False]
['text':' Owned by CollectionCloner.','line_number':140,'multiline':False]
['text':' The collection cloner pre-stage makes a remote call to collStats to store in-progress','line_number':165,'multiline':False]
['text':' metrics.','line_number':166,'multiline':False]
['text':' The collection cloner pre-stage makes a remote call to collStats to store in-progress','line_number':176,'multiline':False]
['text':' metrics.','line_number':177,'multiline':False]
['text':' On a negative count, the CollectionCloner should use a zero count.','line_number':184,'multiline':False]
['text':' The collection cloner pre-stage makes a remote call to collStats to store in-progress','line_number':188,'multiline':False]
['text':' metrics.','line_number':189,'multiline':False]
['text':' On NamespaceNotFound, the CollectionCloner should exit without doing anything.','line_number':196,'multiline':False]
['text':' The collection cloner pre-stage makes a remote call to collStats to store in-progress','line_number':199,'multiline':False]
['text':' metrics.','line_number':200,'multiline':False]
['text':' The collection cloner pre-stage makes a remote call to collStats to store in-progress','line_number':209,'multiline':False]
['text':' metrics.','line_number':210,'multiline':False]
['text':' The collection cloner pre-stage makes a remote call to collStats to store in-progress','line_number':219,'multiline':False]
['text':' metrics.','line_number':220,'multiline':False]
['text':' The collection cloner pre-stage makes a remote call to collStats to store in-progress','line_number':235,'multiline':False]
['text':' metrics.','line_number':236,'multiline':False]
['text':' NamespaceNotFound is treated the same as no index.','line_number':256,'multiline':False]
['text':' We expect not to have run the create collection.','line_number':263,'multiline':False]
['text':' Respond to listIndexes once with failure, once with success.','line_number':290,'multiline':False]
['text':' Set up data for preliminary stages','line_number':362,'multiline':False]
['text':' Set up documents to be returned from upstream node.','line_number':367,'multiline':False]
['text':' Set up data for preliminary stages.','line_number':386,'multiline':False]
['text':' Set up documents to be returned from upstream node. It should take 3 batches to clone the','line_number':391,'multiline':False]
['text':' documents.','line_number':392,'multiline':False]
['text':' Set up data for preliminary stages','line_number':412,'multiline':False]
['text':' Set up documents to be returned from upstream node.','line_number':417,'multiline':False]
['text':' Set up data for preliminary stages','line_number':434,'multiline':False]
['text':' Set up documents to be returned from upstream node.','line_number':439,'multiline':False]
['text':' Stop before running the query to set up the failure.','line_number':445,'multiline':False]
['text':' Run the cloner in a separate thread.','line_number':452,'multiline':False]
['text':' Wait for the failpoint to be reached','line_number':457,'multiline':False]
['text':' Replace scheduleDbWork function so that cloner will fail to schedule DB work after','line_number':459,'multiline':False]
['text':' getting documents.','line_number':460,'multiline':False]
['text':' Continue and finish. Final status is checked in the thread.','line_number':465,'multiline':False]
['text':' Set up data for preliminary stages','line_number':471,'multiline':False]
['text':' Set up documents to be returned from upstream node.','line_number':476,'multiline':False]
['text':' Stop before running the query to set up the failure.','line_number':482,'multiline':False]
['text':' Run the cloner in a separate thread.','line_number':489,'multiline':False]
['text':' Wait for the failpoint to be reached','line_number':494,'multiline':False]
['text':' Replace scheduleDbWork function so that cloner will fail to schedule DB work after','line_number':496,'multiline':False]
['text':' getting documents.','line_number':497,'multiline':False]
['text':' Continue and finish. Final status is checked in the thread.','line_number':508,'multiline':False]
['text':' Set up data for preliminary stages','line_number':514,'multiline':False]
['text':' Set up documents to be returned from upstream node.','line_number':519,'multiline':False]
['text':' Stop before running the query to set up the failure.','line_number':525,'multiline':False]
['text':' Run the cloner in a separate thread.','line_number':532,'multiline':False]
['text':' Wait for the failpoint to be reached','line_number':538,'multiline':False]
['text':' Modify the loader so insert documents fails.','line_number':541,'multiline':False]
['text':' Continue and finish. Final status is checked in the thread.','line_number':548,'multiline':False]
['text':' We initialize collIndexSpecs with fake information to ensure it is overwritten by an empty','line_number':556,'multiline':False]
['text':' vector.','line_number':557,'multiline':False]
['text':' We will retry our query without having yet obtained a resume token.','line_number':589,'multiline':False]
['text':' Set up data for preliminary stages','line_number':593,'multiline':False]
['text':' The collection cloner pre-stage makes a remote call to collStats to store in-progress','line_number':596,'multiline':False]
['text':' metrics.','line_number':597,'multiline':False]
['text':' Set up documents to be returned from upstream node.','line_number':603,'multiline':False]
['text':' Preliminary setup for failpoints.','line_number':608,'multiline':False]
['text':' Run the cloner in a separate thread.','line_number':619,'multiline':False]
['text':' Wait until we get to the query stage.','line_number':625,'multiline':False]
['text':' Bring the server down. We will fail right before our first batch.','line_number':628,'multiline':False]
['text':' Let the cloner retry and wait until just before it.','line_number':631,'multiline':False]
['text':' Verify we haven't been able to receive anything yet.','line_number':635,'multiline':False]
['text':' Bring the server back up.','line_number':639,'multiline':False]
['text':' Let the retry commence.','line_number':642,'multiline':False]
['text':' Check that we've received all the data.','line_number':647,'multiline':False]
['text':' We will resume our query using the resume token we stored after receiving the first batch.','line_number':654,'multiline':False]
['text':' Set up data for preliminary stages','line_number':658,'multiline':False]
['text':' Set up documents to be returned from upstream node.','line_number':665,'multiline':False]
['text':' Preliminary setup for hanging failpoint.','line_number':672,'multiline':False]
['text':' Run the cloner in a separate thread.','line_number':680,'multiline':False]
['text':' Wait for us to process the first batch.','line_number':686,'multiline':False]
['text':' Verify we've only managed to store one batch.','line_number':689,'multiline':False]
['text':' This will cause the next batch to fail once (transiently).','line_number':693,'multiline':False]
['text':' Let the query stage finish.','line_number':697,'multiline':False]
['text':' Since the CollectionMockStats class does not de-duplicate inserts, it is possible to insert','line_number':701,'multiline':False]
['text':' the same document more than once, thereby also increasing the insertCount more than once.','line_number':702,'multiline':False]
['text':' This means that here insertCount=5 is evidence that we correctly resumed our query where we','line_number':703,'multiline':False]
['text':' left off (2 inserts in) instead of retrying the whole query (that leads to insertCount=7).','line_number':704,'multiline':False]
['text':' Set up data for preliminary stages','line_number':714,'multiline':False]
['text':' Set up documents to be returned from upstream node.','line_number':721,'multiline':False]
['text':' Run the cloner in a separate thread.','line_number':731,'multiline':False]
['text':' Wait until we get to the query stage.','line_number':738,'multiline':False]
['text':' Verify we've made no progress yet.','line_number':741,'multiline':False]
['text':' This will cause the next batch to fail once, non-transiently.','line_number':745,'multiline':False]
['text':' Let us begin with the query stage.','line_number':749,'multiline':False]
['text':' Set up data for preliminary stages','line_number':759,'multiline':False]
['text':' Set up documents to be returned from upstream node.','line_number':766,'multiline':False]
['text':' Run the cloner in a separate thread.','line_number':777,'multiline':False]
['text':' Verify we've only managed to store one batch.','line_number':786,'multiline':False]
['text':' This will cause the next batch to fail once, non-transiently.','line_number':790,'multiline':False]
['text':' Allow the cloner to attempt (and fail) the next batch.','line_number':794,'multiline':False]
['text':' We retry the query after a transient error and we immediately encounter a non-retriable one.','line_number':800,'multiline':False]
['text':' Set up data for preliminary stages','line_number':804,'multiline':False]
['text':' Set up documents to be returned from upstream node.','line_number':811,'multiline':False]
['text':' Preliminary setup for hanging failpoints.','line_number':816,'multiline':False]
['text':' Run the cloner in a separate thread.','line_number':828,'multiline':False]
['text':' Wait for us to process the first batch.','line_number':835,'multiline':False]
['text':' Verify we've only managed to store one batch.','line_number':838,'multiline':False]
['text':' This will cause the next batch to fail once (transiently).','line_number':842,'multiline':False]
['text':' Follow-up the transient error with a non-retriable one.','line_number':849,'multiline':False]
['text':' We only made it one batch in before failing.','line_number':855,'multiline':False]
['text':' We retry the query after a transient error, we make a bit more progress and then we encounter','line_number':860,'multiline':False]
['text':' a non-retriable one.','line_number':861,'multiline':False]
['text':' Set up data for preliminary stages','line_number':865,'multiline':False]
['text':' Set up documents to be returned from upstream node.','line_number':872,'multiline':False]
['text':' Preliminary setup for hanging failpoints.','line_number':879,'multiline':False]
['text':' Run the cloner in a separate thread.','line_number':891,'multiline':False]
['text':' Wait for us to process the first batch.','line_number':898,'multiline':False]
['text':' Verify we've only managed to store one batch.','line_number':901,'multiline':False]
['text':' This will cause the next batch to fail once (transiently).','line_number':905,'multiline':False]
['text':' Do a quick failpoint dance so we clone one more batch before failing.','line_number':912,'multiline':False]
['text':' Follow-up the transient error with a non-retriable one.','line_number':917,'multiline':False]
['text':' We only made it one batch in before failing.','line_number':923,'multiline':False]
['text':' We resume a query, receive some more data, then get a transient error again. The goal of this','line_number':928,'multiline':False]
['text':' test is to make sure we don't forget to request the _next_ resume token when resuming a query.','line_number':929,'multiline':False]
['text':'*
     * Test runs like so:
     *
     *      |___batch___| . |___batch___| |___batch___| . |batch|
     *                    |                             |
     *                 resume 1                      resume 2
     ','line_number':932,'multiline':True]
['text':' Set up data for preliminary stages','line_number':942,'multiline':False]
['text':' Set up documents to be returned from upstream node.','line_number':949,'multiline':False]
['text':' Preliminary setup for hanging failpoints.','line_number':958,'multiline':False]
['text':' Run the cloner in a separate thread.','line_number':970,'multiline':False]
['text':' Wait for us to process the first batch.','line_number':976,'multiline':False]
['text':' Verify we've only managed to store one batch.','line_number':979,'multiline':False]
['text':' This will cause the next batch to fail once (transiently).','line_number':983,'multiline':False]
['text':' Allow copying two more batches before the next error.','line_number':990,'multiline':False]
['text':' It is important that the resumes come after differing amounts of progress, so that we can','line_number':991,'multiline':False]
['text':' more easily distinguish error scenarios based on document count. (see end of test)','line_number':992,'multiline':False]
['text':' Do a failpoint dance so we can get to the next retry.','line_number':995,'multiline':False]
['text':' Allow the clone to finish.','line_number':1004,'multiline':False]
['text':'*
     * Since the CollectionMockStats class does not de-duplicate inserts, it is possible to insert
     * the same document more than once, thereby also increasing the insertCount more than once.
     * We can therefore infer the resume history from the insertCount. In this test:
     * - insertCount = 7: all the resumes were correct and we got every doc exactly once
     *      - this is the correct result
     * - insertCount = 9: the first resume retried instead of resuming (second resume was correct)
     * - insertCount = 11: the second resume used the first resume token instead of the second one
     *      - we test that we avoid this result
     * - insertCount = 13: the second resume retried instead of resuming (first one was correct)
     ','line_number':1010,'multiline':True]
['text':' Set up responses to be returned from upstream node.','line_number':1064,'multiline':False]
['text':' Set up documents to be returned from upstream node.','line_number':1072,'multiline':False]
['text':' Check the count stage correctly updated the number of documents to copy.','line_number':1079,'multiline':False]
['text':' Check the listIndexes stage correctly found the indexes to copy.','line_number':1082,'multiline':False]
['text':' Account for the _id index as well','line_number':1087,'multiline':False]
['text':' Check the documents to copy were inserted correctly.','line_number':1090,'multiline':False]
['text':' namespace repl','line_number':1098,'multiline':False]
['text':' namespace mongo','line_number':1099,'multiline':False]
