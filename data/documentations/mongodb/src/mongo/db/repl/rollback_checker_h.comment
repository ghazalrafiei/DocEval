['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 * The RollbackChecker maintains a sync source and its baseline rollback ID (rbid). It
 * contains methods to check if a rollback occurred by checking if the rbid has changed since
 * the baseline was set.
 *
 * To use the RollbackChecker:
 * 1) Create a RollbackChecker by passing in an executor, and a sync source to use. If the
 *    sync source changes, make a new RollbackChecker.
 * 2) Call reset(), either synchronously or asynchronously, so that the RollbackChecker retrieves
 *    the state it needs from the sync source to check for rollbacks.
 * 3) Call checkForRollback(), passing in a 'nextAction' callback. This checks if there was a
 *    rollback at the sync source. If there is a rollback or another error, the 'nextAction'
 *    callback will be invoked. This error could be an UnrecoverableRollbackError, when there is a
 *    rollback.
 *    The only case where 'nextAction' is not called is when checkForRollback fails because the
 *    task executor is unable to schedule the remote replSetGetRBID command. In this case,
 *    checkForRollback() returns the error from executorTaskExecutor::scheduleRemoteCommand().
 *    Alternatively, call hasHadRollback() which synchronously checks for a rollback and returns
 *    true if any error occurs. Checking for a rollback does not reset the baseline rbid.
 * 4) Repeat steps 2 and 3 as needed.
 *
 ','line_number':43,'multiline':True]
['text':' Rollback checker result - true if rollback occurred; false if rollback IDs','line_number':70,'multiline':False]
['text':' were the same; Otherwise, error status indicating why rollback check failed.','line_number':71,'multiline':False]
['text':' Checks whether the the sync source has had a rollback since the last time reset was called,','line_number':81,'multiline':False]
['text':' and then calls the nextAction with the rollback checker result. An error status','line_number':82,'multiline':False]
['text':' will be passed to the callback if the RBID cannot be determined or if','line_number':83,'multiline':False]
['text':' the callback was canceled.','line_number':84,'multiline':False]
['text':' Synchronously checks if there has been a rollback and returns a boolean specifying if one','line_number':87,'multiline':False]
['text':' has occurred.','line_number':88,'multiline':False]
['text':' Resets the state used to decide if a rollback occurs, and then calls the nextAction with a','line_number':91,'multiline':False]
['text':' status specifying what should occur next. The status will either be OK if there was no','line_number':92,'multiline':False]
['text':' error or another status if the command failed. The nextAction should account for','line_number':93,'multiline':False]
['text':' each of these cases.','line_number':94,'multiline':False]
['text':' Synchronously calls reset and returns the Status of the command.','line_number':97,'multiline':False]
['text':' Returns the current baseline rbid.','line_number':100,'multiline':False]
['text':' ================== Test Support API ===================','line_number':103,'multiline':False]
['text':' Returns the last rbid seen.','line_number':105,'multiline':False]
['text':' Assumes a lock has been taken. Returns if a rollback has occurred by comparing the remoteRBID','line_number':109,'multiline':False]
['text':' provided and the stored baseline rbid. Sets _lastRBID to the remoteRBID provided.','line_number':110,'multiline':False]
['text':' Schedules a remote command to get the rbid at the sync source and then calls the nextAction.','line_number':113,'multiline':False]
['text':' If there is an error scheduling the call, it returns the error from','line_number':114,'multiline':False]
['text':' TaskExecutor::scheduleRemoteCommand().','line_number':115,'multiline':False]
['text':' Assumes a lock has been taken. Sets the current rbid used as the baseline for rollbacks.','line_number':118,'multiline':False]
['text':' Not owned by us.','line_number':121,'multiline':False]
['text':' Protects member data of this RollbackChecker.','line_number':124,'multiline':False]
['text':' The sync source to check for rollbacks against.','line_number':127,'multiline':False]
['text':' The baseline rbid of the sync source to use when deciding if a rollback should occur.','line_number':130,'multiline':False]
['text':' The last rbid that we saw.','line_number':133,'multiline':False]
['text':' namespace repl','line_number':137,'multiline':False]
['text':' namespace mongo','line_number':138,'multiline':False]
