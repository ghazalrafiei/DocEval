['text':'*
 *    Copyright (C) 2020-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 * Initializes the TenantMigrationDonorAccessBlocker for the tenant migration denoted by the given
 * state doc.
 ','line_number':71,'multiline':True]
['text':' Add global access blocker to avoid any tenant creation during shard merge.','line_number':103,'multiline':False]
['text':'*
 * Transitions the TenantMigrationDonorAccessBlocker to the blocking state.
 ','line_number':119,'multiline':True]
['text':' A primary calls startBlockingWrites on the TenantMigrationDonorAccessBlocker before','line_number':132,'multiline':False]
['text':' reserving the OpTime for the "start blocking" write, so only secondaries call','line_number':133,'multiline':False]
['text':' startBlockingWrites on the TenantMigrationDonorAccessBlocker in the op observer.','line_number':134,'multiline':False]
['text':' Both primaries and secondaries call startBlockingReadsAfter in the op observer, since','line_number':140,'multiline':False]
['text':' startBlockingReadsAfter just needs to be called before the "start blocking" write's oplog','line_number':141,'multiline':False]
['text':' hole is filled.','line_number':142,'multiline':False]
['text':'*
 * Transitions the TenantMigrationDonorAccessBlocker to the committed state.
 ','line_number':148,'multiline':True]
['text':'*
 * Transitions the TenantMigrationDonorAccessBlocker to the aborted state.
 ','line_number':165,'multiline':True]
['text':'*
 * Used to update the TenantMigrationDonorAccessBlocker for the migration denoted by the donor's
 * state doc once the write for updating the doc is committed.
 ','line_number':182,'multiline':True]
['text':' The state doc and TenantMigrationDonorAccessBlocker for this migration were','line_number':201,'multiline':False]
['text':' removed immediately after expireAt was set. This is unlikely to occur in','line_number':202,'multiline':False]
['text':' production where the garbage collection delay should be sufficiently large.','line_number':203,'multiline':False]
['text':' Setting expireAt implies that the TenantMigrationDonorAccessBlocker for this','line_number':208,'multiline':False]
['text':' migration will be removed shortly after this. However, a lagged secondary','line_number':209,'multiline':False]
['text':' might not manage to advance its majority commit point past the migration','line_number':210,'multiline':False]
['text':' commit or abort opTime and consequently transition out of the blocking state','line_number':211,'multiline':False]
['text':' before the TenantMigrationDonorAccessBlocker is removed. When this occurs,','line_number':212,'multiline':False]
['text':' blocked reads or writes will be left waiting for the migration decision','line_number':213,'multiline':False]
['text':' indefinitely. To avoid that, notify the TenantMigrationDonorAccessBlocker','line_number':214,'multiline':False]
['text':' here that the commit or abort opTime has been majority committed (guaranteed','line_number':215,'multiline':False]
['text':' to be true since by design the donor never marks its state doc as garbage','line_number':216,'multiline':False]
['text':' collectable before the migration decision is majority committed).','line_number':217,'multiline':False]
['text':' The migration durably aborted and is now marked as garbage collectable,','line_number':228,'multiline':False]
['text':' remove its TenantMigrationDonorAccessBlocker right away to allow back-to-back','line_number':229,'multiline':False]
['text':' migration retries.','line_number':230,'multiline':False]
['text':' namespace','line_number':256,'multiline':False]
['text':' To support back-to-back migration retries, when a migration is aborted, we remove its','line_number':333,'multiline':False]
['text':' TenantMigrationDonorAccessBlocker as soon as its donor state doc is marked as garbage','line_number':334,'multiline':False]
['text':' collectable. So onDelete should skip removing the TenantMigrationDonorAccessBlocker for','line_number':335,'multiline':False]
['text':' aborted migrations.','line_number':336,'multiline':False]
['text':' namespace repl','line_number':393,'multiline':False]
['text':' namespace mongo','line_number':394,'multiline':False]
