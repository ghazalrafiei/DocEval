['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' This method is called during initial sync of a replica set member, so we can safely tell','line_number':92,'multiline':False]
['text':' the index builders to build in the foreground instead of using the hybrid approach. The','line_number':93,'multiline':False]
['text':' member won't be available to be queried by anyone until it's caught up with the primary.','line_number':94,'multiline':False]
['text':' The only reason to do this is to force the index document insertion to not yield the','line_number':95,'multiline':False]
['text':' locks as yielding a MODE_X/MODE_S lock isn't allowed.','line_number':96,'multiline':False]
['text':' All writes in CollectionBulkLoaderImpl should be unreplicated.','line_number':106,'multiline':False]
['text':' The opCtx is accessed indirectly through _secondaryIndexesBlock.','line_number':107,'multiline':False]
['text':' This enforces the buildIndexes setting in the replica set configuration.','line_number':109,'multiline':False]
['text':' This version of insert will not update any indexes.','line_number':170,'multiline':False]
['text':' Inserts index entries into the external sorter. This will not update pre-existing','line_number':186,'multiline':False]
['text':' indexes. Wrap this in a WUOW since the index entry insertion may modify the durable','line_number':187,'multiline':False]
['text':' record store which can throw a write conflict exception.','line_number':188,'multiline':False]
['text':' For capped collections, we use regular insertDocument, which','line_number':216,'multiline':False]
['text':' will update pre-existing indexes.','line_number':217,'multiline':False]
['text':' Commit before deleting dups, so the dups will be removed from secondary indexes when','line_number':251,'multiline':False]
['text':' deleted.','line_number':252,'multiline':False]
['text':' This should always return Status::OK() as the foreground index build doesn't install','line_number':260,'multiline':False]
['text':' an interceptor.','line_number':261,'multiline':False]
['text':' Do not do inside a WriteUnitOfWork (required by dumpInsertsFromBulk).','line_number':286,'multiline':False]
['text':' Delete the document before committing the index. If we were to delete','line_number':295,'multiline':False]
['text':' the document after committing the index, it's possible that the we','line_number':296,'multiline':False]
['text':' may unindex a record with the same key but a different RecordId.','line_number':297,'multiline':False]
['text':' logIfError ','line_number':324,'multiline':True]
['text':' numDeleted ','line_number':326,'multiline':True]
['text':' Initial sync can build an index over a collection with','line_number':327,'multiline':False]
['text':' duplicates, so we need to check the RecordId of the docuemnt','line_number':328,'multiline':False]
['text':' we are unindexing. See SERVER-17487 for more details.','line_number':329,'multiline':False]
['text':' Commit the _id index, there won't be any documents with duplicate _ids as they were','line_number':341,'multiline':False]
['text':' deleted prior to this.','line_number':342,'multiline':False]
['text':' Clean up here so we do not try to abort the index builds when cleaning up in','line_number':367,'multiline':False]
['text':' _releaseResources.','line_number':368,'multiline':False]
['text':' Locks will get released when we destroy the object.','line_number':390,'multiline':False]
['text':' This caller / code path does not have cursors to save/restore.','line_number':416,'multiline':False]
['text':'saveCursorBeforeWrite','line_number':417,'multiline':True]
['text':'restoreCursorAfterWrite','line_number':418,'multiline':True]
['text':' This caller / code path does not have cursors to save/restore.','line_number':430,'multiline':False]
['text':'saveCursorBeforeWrite','line_number':431,'multiline':True]
['text':'restoreCursorAfterWrite','line_number':432,'multiline':True]
['text':' namespace repl','line_number':459,'multiline':False]
['text':' namespace mongo','line_number':460,'multiline':False]
