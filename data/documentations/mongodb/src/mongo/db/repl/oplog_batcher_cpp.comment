['text':'*
 *    Copyright (C) 2019-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' IWYU pragma: no_include "cxxabi.h"','line_number':35,'multiline':False]
['text':' _ops can indicate the following cases:','line_number':83,'multiline':False]
['text':' 1. A new batch is ready to consume.','line_number':84,'multiline':False]
['text':' 2. Shutdown.','line_number':85,'multiline':False]
['text':' 3. The batch has (or had) exhausted the buffer in draining mode.','line_number':86,'multiline':False]
['text':' 4. Empty batch since the batch has/had exhausted the buffer but not in draining mode,','line_number':87,'multiline':False]
['text':'    so there could be new oplog entries coming.','line_number':88,'multiline':False]
['text':' 5. Empty batch since the batcher is still running.','line_number':89,'multiline':False]
['text':'','line_number':90,'multiline':False]
['text':' In case (4) and (5), we wait for up to "maxWaitTime".','line_number':91,'multiline':False]
['text':' We intentionally don't care about whether this returns due to signaling or timeout','line_number':93,'multiline':False]
['text':' since we do the same thing either way: return whatever is in _ops.','line_number':94,'multiline':False]
['text':' Get the number of operations enclosed in 'applyOps'. The 'count' field only exists in','line_number':116,'multiline':False]
['text':' the last applyOps oplog entry of a large transaction that has multiple oplog entries,','line_number':117,'multiline':False]
['text':' and when not present, we fallback to get the count by using BSONObj::nFields() which','line_number':118,'multiline':False]
['text':' could be slower.','line_number':119,'multiline':False]
['text':' Check for oplog version change.','line_number':157,'multiline':False]
['text':' Sleep if we've got nothing to do. Only sleep for 1 second at a time to allow','line_number':177,'multiline':False]
['text':' reconfigs and shutdown to occur.','line_number':178,'multiline':False]
['text':' Apply replication batch limits. Avoid returning an empty batch.','line_number':202,'multiline':False]
['text':' If we have a forced batch boundary, apply it.','line_number':212,'multiline':False]
['text':' Add op to buffer.','line_number':219,'multiline':False]
['text':' At this point we either have a partial batch or an exactly full batch; if we are using','line_number':227,'multiline':False]
['text':' a wait to fill the batch, we should wait if and only if the batch is partial.','line_number':228,'multiline':False]
['text':'*
 * Commands, in most cases, must be processed one at a time, however there are some exceptions:
 *
 * 1) When in secondary steady state oplog application mode, a prepareTransaction entry can be
 *    batched with other entries, while a prepared commitTransaction or abortTransaction entry
 *    can only be batched with other prepared commitTransaction or abortTransaction entries.
 * 2) An applyOps entry from batched writes or unprepared transactions will be expanded to CRUD
 *    operation and thus can be safely batched with other CRUD operations in most cases, unless
 *    it refers to the end of a large transaction (> 16MB) or a transaction that contains DDL
 *    commands, which have to be processed individually (see SERVER-45565).
 ','line_number':250,'multiline':True]
['text':' Used by non-commit and non-abort entries to cut the batch if it already contains any','line_number':263,'multiline':False]
['text':' commit or abort entries.','line_number':264,'multiline':False]
['text':' Grouping too many prepare ops in a batch may have performance implications,','line_number':278,'multiline':False]
['text':' so we break the batch when it contains enough prepare ops.','line_number':279,'multiline':False]
['text':' The DBCheck oplog shouldn't be batched with any preceding oplog to ensure that DBCheck is','line_number':290,'multiline':False]
['text':' reading from a consistent snapshot. However, it can be batched with any subsequent oplog that','line_number':291,'multiline':False]
['text':' is batchable.','line_number':292,'multiline':False]
['text':'*
 * If secondaryDelaySecs is enabled, this function calculates the most recent timestamp of any oplog
 * entries that can be be returned in a batch.
 ','line_number':305,'multiline':True]
['text':' This is just to get the op off the buffer; it's been peeked at and queued for application','line_number':321,'multiline':False]
['text':' already.','line_number':322,'multiline':False]
['text':' If we failed to get an op off the buffer, this means that shutdown() was called between the','line_number':323,'multiline':False]
['text':' consumer's calls to peek() and consume(). shutdown() cleared the buffer so there is nothing','line_number':324,'multiline':False]
['text':' for us to consume here. Since our postcondition is already met, it is safe to return','line_number':325,'multiline':False]
['text':' successfully.','line_number':326,'multiline':False]
['text':' The OplogBatcher's thread has its own shutdown sequence triggered by the OplogApplier,','line_number':336,'multiline':False]
['text':' so we don't want it to be killed in other ways.','line_number':337,'multiline':False]
['text':' Check the limits once per batch since users can change them at runtime.','line_number':350,'multiline':False]
['text':' Use the OplogBuffer to populate a local OplogBatch. Note that the buffer may be empty.','line_number':353,'multiline':False]
['text':' During storage change operations, we may shut down storage under a global lock','line_number':360,'multiline':False]
['text':' and wait for any storage-using opCtxs to exit.  This results in a deadlock with','line_number':361,'multiline':False]
['text':' uninterruptible global locks, so we will take the global lock here to block the','line_number':362,'multiline':False]
['text':' storage change.  The rest of the batch acquisition remains uninterruptible.','line_number':363,'multiline':False]
['text':' This use of UninterruptibleLockGuard is intentional. It is undesirable to use an','line_number':366,'multiline':False]
['text':' UninterruptibleLockGuard in client operations because stepdown requires the','line_number':367,'multiline':False]
['text':' ability to interrupt client operations. However, it is acceptable to use an','line_number':368,'multiline':False]
['text':' UninterruptibleLockGuard in batch application because the only cause of','line_number':369,'multiline':False]
['text':' interruption would be shutdown, and the ReplBatcher thread has its own shutdown','line_number':370,'multiline':False]
['text':' handling.','line_number':371,'multiline':False]
['text':' NOLINT.','line_number':372,'multiline':False]
['text':' Locks the oplog to check its max size, do this in the UninterruptibleLockGuard.','line_number':375,'multiline':False]
['text':' If we don't have anything in the batch, wait a bit for something to appear.','line_number':392,'multiline':False]
['text':' Block up to 1 second. Skip waiting if the failpoint is enabled.','line_number':397,'multiline':False]
['text':' do no waiting.','line_number':399,'multiline':False]
['text':' The applier may be in its 'Draining' state. Determines if the OplogBatcher has finished','line_number':406,'multiline':False]
['text':' draining the OplogBuffer and should notify the OplogApplier to signal draining is','line_number':407,'multiline':False]
['text':' complete.','line_number':408,'multiline':False]
['text':' Store the current term. It's checked in signalDrainComplete() to detect if the node','line_number':410,'multiline':False]
['text':' has stepped down and stepped back up again. See the declaration of','line_number':411,'multiline':False]
['text':' signalDrainComplete() for more details.','line_number':412,'multiline':False]
['text':' Draining state guarantees the producer has already been fully stopped and no more','line_number':416,'multiline':False]
['text':' operations will be pushed in to the oplog buffer until the applier state changes.','line_number':417,'multiline':False]
['text':' Check the oplog buffer after the applier state to ensure the producer is stopped.','line_number':423,'multiline':False]
['text':' Don't emit empty batches.','line_number':428,'multiline':False]
['text':' Block until the previous batch has been taken.','line_number':434,'multiline':False]
['text':' We can't change the timestamp source within a write unit of work.','line_number':449,'multiline':False]
['text':' namespace repl','line_number':456,'multiline':False]
['text':' namespace mongo','line_number':457,'multiline':False]
