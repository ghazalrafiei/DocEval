['text':'*
 *    Copyright (C) 2020-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' namespace','line_number':90,'multiline':False]
['text':' Make this public since it's protected in the base class but it needs to be public if we want','line_number':125,'multiline':False]
['text':' to test it here.','line_number':126,'multiline':False]
['text':' We already completed','line_number':152,'multiline':False]
['text':' After this line the shared_ptr maintaining the Instance object is deleted','line_number':176,'multiline':False]
['text':' from the PrimaryOnlyService's map.  Thus keeping the self reference is','line_number':177,'multiline':False]
['text':' critical to extend the instance lifetime until all the callbacks using it','line_number':178,'multiline':False]
['text':' have completed.','line_number':179,'multiline':False]
['text':' We were already interrupted','line_number':189,'multiline':False]
['text':' This instance is considered complete when both cancellation logic and test logic have','line_number':200,'multiline':False]
['text':' finished running.','line_number':201,'multiline':False]
['text':' Currently unused. Functionality has been put into cancellation logic.','line_number':211,'multiline':False]
['text':' Whether or not an op is reported depends on the "reportOp" field of the state doc the','line_number':214,'multiline':False]
['text':' Instance was created with.','line_number':215,'multiline':False]
['text':' Hang before creating OpCtx so that we can test that OpCtxs created after stepping','line_number':271,'multiline':False]
['text':' down still get interrupted.','line_number':272,'multiline':False]
['text':' Hang after creating OpCtx but before doing the document write so that we can test','line_number':280,'multiline':False]
['text':' that the OpCtx gets interrupted at stepdown or shutdown.','line_number':281,'multiline':False]
['text':'upsert','line_number':295,'multiline':True]
['text':' set only if doing a write to the state document throws an exception.','line_number':308,'multiline':False]
['text':' Make ASSERT_EQ work with State enums.','line_number':339,'multiline':False]
['text':' Used to ensure that _scheduleRun is run before we run the stepdown logic so that we fulfill','line_number':411,'multiline':False]
['text':' the _completionPromise.','line_number':412,'multiline':False]
['text':' Used to ensure that _scheduleRun is run before we run the stepdown logic so that we','line_number':429,'multiline':False]
['text':' fulfill the _completionPromise.','line_number':430,'multiline':False]
['text':' Used to ensure that _scheduleRun is run before we run the stepdown logic so that we','line_number':459,'multiline':False]
['text':' fulfill the _completionPromise.','line_number':460,'multiline':False]
['text':' TODO(SERVER-50612): Shutting down the WaitForMajorityService is a workaround for','line_number':494,'multiline':False]
['text':' SERVER-50612. After that is resolved this line should be able to be removed.','line_number':495,'multiline':False]
['text':' Make the instance rebuild on stepUp hang','line_number':505,'multiline':False]
['text':' Start an async task to step up, which will block on the fail point.','line_number':509,'multiline':False]
['text':' Shutdown, interrupting the thread waiting for the step up.','line_number':514,'multiline':False]
['text':' Let the previous stepUp attempt continue and realize that the node has since shutdown.','line_number':517,'multiline':False]
['text':' Make sure the instance doesn't complete before we try to look it up.','line_number':543,'multiline':False]
['text':' Shouldn't be able to look up instance after it has completed running.','line_number':562,'multiline':False]
['text':' Make sure the service stays in state kRebuilding so that lookup() has to try to wait on the','line_number':571,'multiline':False]
['text':' opCtx for the state to change.','line_number':572,'multiline':False]
['text':' Make sure the instance doesn't complete before we try to look it up.','line_number':584,'multiline':False]
['text':' The RstlKillOpThread would only interrupt a read operation if the OperationContext opted','line_number':596,'multiline':False]
['text':' into always being interrupted.','line_number':597,'multiline':False]
['text':' Make sure the instance doesn't complete before we try to look it up.','line_number':614,'multiline':False]
['text':' Make sure the instance doesn't complete before we try to look it up.','line_number':640,'multiline':False]
['text':' Make sure the instance doesn't complete before we try to look it up.','line_number':659,'multiline':False]
['text':' Wait for Instance::run() to be called before calling stepDown so that the _completionPromise','line_number':668,'multiline':False]
['text':' will eventually be set.','line_number':669,'multiline':False]
['text':' Make sure the instance doesn't complete before we try to look it up.','line_number':685,'multiline':False]
['text':' Make sure we enter the run function before shutting down.','line_number':693,'multiline':False]
['text':' Make sure the instance doesn't complete before we try to look it up.','line_number':709,'multiline':False]
['text':' Wait for Instance::run() to be called before calling stepDown so that the _completionPromise','line_number':718,'multiline':False]
['text':' will eventually be set.','line_number':719,'multiline':False]
['text':' Make sure the instance doesn't complete before we try to look it up.','line_number':733,'multiline':False]
['text':' Make sure we enter the run function before shutting down.','line_number':742,'multiline':False]
['text':' Make sure the service stays in state kRebuilding so that getOrCreate() has to try to wait on','line_number':757,'multiline':False]
['text':' the opCtx for the state to change.','line_number':758,'multiline':False]
['text':' Make sure the first instance doesn't complete before we try to create the second.','line_number':770,'multiline':False]
['text':' Trying to create a new instance with the same _id but different state otherwise just returns','line_number':779,'multiline':False]
['text':' the already existing instance based on the _id only.','line_number':780,'multiline':False]
['text':' Make the instance rebuild on stepUp hang.','line_number':790,'multiline':False]
['text':' Make sure the instance doesn't complete.','line_number':809,'multiline':False]
['text':' Prevent the instance from writing its initial state document to the storage engine.','line_number':864,'multiline':False]
['text':' Since the Instance never wrote its state document, it shouldn't be recreated on stepUp.','line_number':884,'multiline':False]
['text':' Cause the Instance to be interrupted after writing its initial state document in state 1.','line_number':892,'multiline':False]
['text':' Need to block instance execution after it's started running but before it's completed so that','line_number':926,'multiline':False]
['text':' the lookup() call later can find the Instance.','line_number':927,'multiline':False]
['text':' No Instance should be recreated since the previous run completed successfully and deleted','line_number':954,'multiline':False]
['text':' its state document.','line_number':955,'multiline':False]
['text':' Cause the Instance to be interrupted after writing its initial state document in state 1.','line_number':964,'multiline':False]
['text':' Let the running instance terminate.','line_number':979,'multiline':False]
['text':' Make the instance rebuild on stepUp hang','line_number':981,'multiline':False]
['text':' Start an async task to lookup the rebuilt instance, this will block waiting on the rebuild to','line_number':987,'multiline':False]
['text':' finish.','line_number':988,'multiline':False]
['text':' Stepdown, interrupting the thread waiting for the rebuilt instance.','line_number':1000,'multiline':False]
['text':' Let the previous stepUp attempt continue and realize that the node has since stepped','line_number':1003,'multiline':False]
['text':' down.','line_number':1004,'multiline':False]
['text':' Now do another stepUp that is allowed to complete this time.','line_number':1009,'multiline':False]
['text':' Cause the Instance to be interrupted after writing its initial state document in state 1.','line_number':1028,'multiline':False]
['text':' Make querying the state document collection on stepUp fail','line_number':1044,'multiline':False]
['text':' Now that rebuilding the service on stepUp failed, all subsequent operations on that','line_number':1051,'multiline':False]
['text':' service will fail until the next stepDown.','line_number':1052,'multiline':False]
['text':' After stepping down we are in a consistent state again, but cannot create or lookup','line_number':1065,'multiline':False]
['text':' instances because we are not primary.','line_number':1066,'multiline':False]
['text':' Allow the next stepUp to succeed.','line_number':1078,'multiline':False]
['text':' Instance should be recreated successfully.','line_number':1086,'multiline':False]
['text':' Ensure that if work has already been scheduled on the executor, but hasn't yet created an','line_number':1101,'multiline':False]
['text':' OpCtx, and then we stepDown, that the OpCtx that gets created still gets interrupted.','line_number':1102,'multiline':False]
['text':' Ensure that OpCtxs for PrimaryOnlyService work get interrupted by stepDown.','line_number':1119,'multiline':False]
['text':' Ensure that OpCtxs for PrimaryOnlyService work get interrupted by shutdown.','line_number':1134,'multiline':False]
['text':' Make sure the instance doesn't complete before we try to report its state.','line_number':1149,'multiline':False]
['text':'
     * 1. `onStepUp()` changes `_state` to `kRebuilding`.
     * 2. `lookupInstance()` is called immediately and blocks on the condition variable, after the
     * initial predicate check returns `false` since `_state == kRebuilding`.
     * 3. `onStepDown()` is called and sets `_state` to `kPaused`. After changing the state, it
     * should notify waiters on the condition variable.
     * 4. `lookupInstance()` should return after receiving the notification from `onStepDown()`.
     ','line_number':1169,'multiline':True]
['text':' This is a best effort to wait for the `waitForConditionOrInterrupt` in `lookupInstance`','line_number':1197,'multiline':False]
['text':' to make the initial call to its predicate while `_state` is `kRebuilding`.','line_number':1198,'multiline':False]
['text':' We change slow stepUp threshold to a extremely large value to avoid test failure in some slow','line_number':1210,'multiline':False]
['text':' test environments.','line_number':1211,'multiline':False]
['text':' First test a stepUp with no hanging. We shouldn't log anything.','line_number':1227,'multiline':False]
['text':' Reset thresholds.','line_number':1234,'multiline':False]
['text':' Use the "PrimaryOnlyServiceHangBeforeLaunchingStepUpLogic", which is encountered','line_number':1238,'multiline':False]
['text':' via PrimaryOnlyServiceRegistry::onStepUpComplete, to simulate a slow primary-only','line_number':1239,'multiline':False]
['text':' service.','line_number':1240,'multiline':False]
['text':' Start an async task to step up, which will block on the fail point.','line_number':1247,'multiline':False]
['text':' Once stepUp has hit the failpoint, sleep for the specified amount of ms so the service','line_number':1250,'multiline':False]
['text':' hangs, before disabling the failpoint and allowing stepUp to proceed.','line_number':1251,'multiline':False]
['text':' Hang for long enough to generate a message about the single service being slow.','line_number':1258,'multiline':False]
['text':' Hang for long enough to generate a message about the total time being slow.','line_number':1264,'multiline':False]
['text':'*
     * (1) onStepUp changes state to kRebuilding. lookupInstanceThread blocks waiting for state
     * not rebuilding.
     * (2) PrimaryOnlyService::_rebuildService fails due to fail point, causing rebuilding to
     * fail, despite no stepDown/shutDown occurring.
     * (3) Failure _rebuildService results in state change to kRebuildFailed.
     * (4) lookupInstanceThread notified of the state change, unblocks and sees error that
     * caused _rebuildService to fail.
     ','line_number':1272,'multiline':True]
