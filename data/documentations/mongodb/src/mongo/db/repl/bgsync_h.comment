['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
     *   Stopped -> Starting -> Running
     *      ^          |            |
     *      |__________|____________|
     *
     * In normal cases: Stopped -> Starting -> Running -> Stopped.
     * It is also possible to transition directly from Starting to Stopped.
     *
     * We need a separate Starting state since part of the startup process involves reading from
     * disk and we want to do that disk I/O in the bgsync thread, rather than whatever thread calls
     * start().
     ','line_number':78,'multiline':True]
['text':'*
     * Constructs a BackgroundSync to fetch oplog entries from a sync source.
     * The BackgroundSync does not own any of the components referenced by the constructor
     * arguments. All these components must outlive the BackgroundSync object.
     ','line_number':92,'multiline':True]
['text':' stop syncing (when this node becomes a primary, e.g.)','line_number':102,'multiline':False]
['text':' During stepdown, the last fetched optime is not reset in order to keep track of the lastest','line_number':103,'multiline':False]
['text':' optime in the buffer. However, the last fetched optime has to be reset after initial sync or','line_number':104,'multiline':False]
['text':' rollback.','line_number':105,'multiline':False]
['text':'*
     * Starts oplog buffer, task executor and producer thread, in that order.
     ','line_number':108,'multiline':True]
['text':'*
     * Signals producer thread to stop.
     ','line_number':113,'multiline':True]
['text':'*
     * Waits for producer thread to stop before shutting down the task executor and oplog buffer.
     ','line_number':118,'multiline':True]
['text':'*
     * Returns true if shutdown() has been called.
     * Once this returns true, nothing more will be added to the queue and consumers must shutdown.
     ','line_number':123,'multiline':True]
['text':'*
     * Returns true if we have discovered that no sync source's oplog overlaps with ours.
     ','line_number':129,'multiline':True]
['text':'*
     * Informs us that data relevant to sync source selection has changed.
     ','line_number':134,'multiline':True]
['text':' For monitoring','line_number':143,'multiline':False]
['text':'*
     * Returns true if any of the following is true:
     * 1) We are shutting down;
     * 2) We are primary;
     * 3) We are in drain mode; or
     * 4) We are stopped.
     ','line_number':146,'multiline':True]
['text':' Starts the producer if it's stopped. Otherwise, let it keep running.','line_number':156,'multiline':False]
['text':'*
     * Starts the producer thread which runs until shutdown. Upon resolving the current sync source
     * the producer thread uses the OplogFetcher (which requires the replication coordinator
     * external state at construction) to fetch oplog entries from the source's oplog via a long
     * running find query.
     ','line_number':162,'multiline':True]
['text':' Production thread inner loop.','line_number':169,'multiline':False]
['text':'*
     * Checks current background sync state before pushing operations into blocking queue and
     * updating metrics. If the queue is full, might block.
     *
     * requiredRBID is reset to empty after the first call.
     ','line_number':174,'multiline':True]
['text':'*
     * Executes a rollback.
     ','line_number':184,'multiline':True]
['text':'*
     * Executes a rollback with the recover to checkpoint algorithm. This is the default rollback
     * algorithm.
     ','line_number':193,'multiline':True]
['text':'*
     * Executes a rollback via refetch in rs_rollback.cpp.
     *
     * We fall back on the rollback via refetch algorithm when the storage engine does not support
     * "rollback to a checkpoint," or when the forceRollbackViaRefetch parameter is set to true.
     *
     * Must be called from _runRollback() which ensures that all the conditions for entering
     * rollback have been met.
     ','line_number':203,'multiline':True]
['text':' restart syncing','line_number':218,'multiline':False]
['text':' Set the state and notify the condition variable.','line_number':221,'multiline':False]
['text':' Waits for the given time, or until we are notified that relevant sync source selection data','line_number':228,'multiline':False]
['text':' has changed.  Takes _mutex, so don't call with _mutex held.','line_number':229,'multiline':False]
['text':' Internal version of notifySyncSourceSelectionDataChanged(), to be used by callers','line_number':232,'multiline':False]
['text':' which already hold _mutex.','line_number':233,'multiline':False]
['text':' This OplogApplier applies oplog entries fetched from the sync source.','line_number':236,'multiline':False]
['text':' A pointer to the replication coordinator running the show.','line_number':239,'multiline':False]
['text':' A pointer to the replication coordinator external state.','line_number':242,'multiline':False]
['text':' A pointer to the replication process.','line_number':245,'multiline':False]
['text':'*
     * All member variables are labeled with one of the following codes indicating the
     * synchronization rules for accessing them:
     *
     * (PR) Completely private to BackgroundSync. Can be read or written to from within the main
     *      BackgroundSync thread without synchronization. Shouldn't be accessed outside of this
     *      thread.
     *
     * (S)  Self-synchronizing; access in any way from any context.
     *
     * (M)  Reads and writes guarded by _mutex
     *
     ','line_number':248,'multiline':True]
['text':' Protects member data of BackgroundSync.','line_number':262,'multiline':False]
['text':' Never hold the BackgroundSync mutex when trying to acquire the ReplicationCoordinator mutex.','line_number':263,'multiline':False]
['text':' (S)','line_number':264,'multiline':False]
['text':' (M)','line_number':266,'multiline':False]
['text':' Thread running producerThread().','line_number':268,'multiline':False]
['text':' (M)','line_number':269,'multiline':False]
['text':' Condition variable to notify of _state and _inShutdown changes.','line_number':271,'multiline':False]
['text':' (S)','line_number':272,'multiline':False]
['text':' Set to true if shutdown() has been called.','line_number':274,'multiline':False]
['text':' (M)','line_number':275,'multiline':False]
['text':' Flag that marks whether a node's oplog has no common point with any','line_number':277,'multiline':False]
['text':' potential sync sources.','line_number':278,'multiline':False]
['text':' (S)','line_number':279,'multiline':False]
['text':' (M)','line_number':281,'multiline':False]
['text':' (M)','line_number':283,'multiline':False]
['text':' Current sync source resolver validating sync source candidates.','line_number':285,'multiline':False]
['text':' Pointer may be read on any thread that locks _mutex or unlocked on the BGSync thread. It can','line_number':286,'multiline':False]
['text':' only be written to by the BGSync thread while holding _mutex.','line_number':287,'multiline':False]
['text':' (M)','line_number':288,'multiline':False]
['text':' Current oplog fetcher tailing the oplog on the sync source.','line_number':290,'multiline':False]
['text':' Current rollback process. If this component is active, we are currently reverting local','line_number':293,'multiline':False]
['text':' operations in the local oplog in order to bring this server to a consistent state relative','line_number':294,'multiline':False]
['text':' to the sync source.','line_number':295,'multiline':False]
['text':' (PR)','line_number':296,'multiline':False]
['text':' A condition variable used to wake us when sync source selection data changes.','line_number':298,'multiline':False]
['text':' (S)','line_number':299,'multiline':False]
['text':' A latch which tells us if sync source selection data has changed since we called','line_number':301,'multiline':False]
['text':' the syncSourcSelector','line_number':302,'multiline':False]
['text':' (M)','line_number':303,'multiline':False]
['text':' namespace repl','line_number':307,'multiline':False]
['text':' namespace mongo','line_number':308,'multiline':False]
