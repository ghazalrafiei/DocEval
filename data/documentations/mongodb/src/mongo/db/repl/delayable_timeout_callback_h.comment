['text':'*
 *    Copyright (C) 2022-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 * The DelayableTimeoutCallback is a utility class which allows a callback to be scheduled on an
 * executor at a given time, and then that time pushed back (later) arbitrarily often without
 * rescheduling the call on the executor.  The callback is never called with CallbackCanceled or
 * ShutdownInProgress.
 *
 * All methods are thread safe, though isActive() and getNextCall() may return stale information
 * if external synchronization is not used.  The callback is called without any locks held.
 ','line_number':46,'multiline':True]
['text':'*
     * Creates a DelayableTimeoutCallback with the given executor and callback function.  The
     * DelayableTimeoutCallback is inactive (the callback is not scheduled) when constructed.
     ','line_number':57,'multiline':True]
['text':'*
     * If the timeout is scheduled, cancel it.  The callback function will not be called.
     ','line_number':68,'multiline':True]
['text':'*
     * Schedule the timeout to occur at "when", regardless of if or when it is already scheduled.
     * If it is already scheduled to occur after "when", it is canceled and rescheduled
     *
     * Returns status of the attempt to schedule on the executor.
     ','line_number':73,'multiline':True]
['text':'*
     * Schedule the timeout to occur at "when" if it is not scheduled or scheduled to occur before
     * "when".  If it is already scheduled to occur before "when", this call has no effect.
     *
     * Returns status of the attempt to schedule on the executor.
     ','line_number':81,'multiline':True]
['text':'*
     * Returns whether the callback is scheduled at all.
     ','line_number':89,'multiline':True]
['text':'*
     * Returns when the next call to the passed-in callback will be made, or Date_t() if inactive.
     ','line_number':94,'multiline':True]
['text':' Timer name is used only for logging.','line_number':118,'multiline':False]
['text':'*
 * DelayableTimeoutCallbackWithJitter is a slight variation on DelayableTimeoutCallback
 * which adds some additional random time to delays.  Since the callback may be delayed at
 * intervals much shorter than the random time, this would naively result in the timeout
 * either being moved backwards often, or if we forbid moving it backwards, ending up quickly
 * moving to the maximum jitter (which isn't very random).  To avoid that, we only recompute
 * the jitter every maximum jitter interval -- e.g. if the max jitter is 10 seconds and we
 * add 3 seconds jitter at time T, we will add 3 seconds jitter to every subsequent call until
 * time T + 10.
 *
 * The typical purpose of the jitter is to prevent two timers receiving delay calls at the same
 * times from firing at the same time.
 *
 * Synchronization of the randomSource is up to the caller; it is provided externally to
 * avoid having a separate random number generator per timer.  The randomSource function will
 * be called with the maximum jitter value passed to delayUntilWithJitter; it should return
 * a value in the range [0, maxJitter) or [0, maxJitter] depending on what you want the
 * actual jitter range to be.
 ','line_number':122,'multiline':True]
['text':' namespace repl','line_number':164,'multiline':False]
['text':' namespace mongo','line_number':165,'multiline':False]
