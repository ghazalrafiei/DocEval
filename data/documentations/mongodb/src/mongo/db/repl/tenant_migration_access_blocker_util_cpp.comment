['text':'*
 *    Copyright (C) 2020-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' Failpoint that will cause recoverTenantMigrationAccessBlockers to return early.','line_number':94,'multiline':False]
['text':' Signals that we have checked that we can build an index.','line_number':97,'multiline':False]
['text':' We always set recipientPrimaryStartingFCV before copying any data. If it is not set, it means','line_number':106,'multiline':False]
['text':' no data has been copied during the current instance's lifetime.','line_number':107,'multiline':False]
['text':' Do not create the mtab when:','line_number':113,'multiline':False]
['text':' 1) The migration was forgotten before receiving a 'recipientSyncData'.','line_number':114,'multiline':False]
['text':' 2) A delayed 'recipientForgetMigration' was received after the state doc was deleted.','line_number':115,'multiline':False]
['text':' Skip creating a TenantMigrationDonorAccessBlocker for aborted migrations that have been','line_number':164,'multiline':False]
['text':' marked as garbage collected.','line_number':165,'multiline':False]
['text':' Add global access blocker to avoid any tenant creation during shard merge.','line_number':184,'multiline':False]
['text':' If the initial syncing node (both FCBIS and logical initial sync) syncs from a sync source','line_number':237,'multiline':False]
['text':' that's in the middle of file copy/import phase of shard merge, it can cause the initial','line_number':238,'multiline':False]
['text':' syncing node to have only partial donor data. And, if this node went into initial sync (i.e,','line_number':239,'multiline':False]
['text':' resync) after it sent `recipientVoteImportedFiles` to the recipient primary, the primary','line_number':240,'multiline':False]
['text':' can commit the migration and cause permanent data loss on this node.','line_number':241,'multiline':False]
['text':' Do not create mtab for following cases. Otherwise, we can get into potential race','line_number':246,'multiline':False]
['text':' causing recovery procedure to fail with `ErrorCodes::ConflictingServerlessOperation`.','line_number':247,'multiline':False]
['text':' 1) The migration was skipped.','line_number':248,'multiline':False]
['text':' 2) Aborted state doc marked as garbage collectable.','line_number':254,'multiline':False]
['text':' namespace','line_number':288,'multiline':False]
['text':' We need to check both donor and recipient access blockers in the case where two','line_number':383,'multiline':False]
['text':' migrations happen back-to-back before the old recipient state (from the first','line_number':384,'multiline':False]
['text':' migration) is garbage collected.','line_number':385,'multiline':False]
['text':' Source to cancel the timeout if the operation completed in time.','line_number':393,'multiline':False]
['text':' Source to cancel waiting on the canRunCommandFuture's.','line_number':395,'multiline':False]
['text':' A vector of futures where the donor access blocker's 'getCanRunCommandFuture' will always','line_number':399,'multiline':False]
['text':' precede the recipient's.','line_number':400,'multiline':False]
['text':' Cancel waiting for operations if we timeout.','line_number':431,'multiline':False]
['text':' To require continuation in the user executor.','line_number':488,'multiline':False]
['text':' Only the donor access blocker will block linearizable reads.','line_number':498,'multiline':False]
['text':' The migration protocol guarantees the recipient will not get writes until the migration','line_number':515,'multiline':False]
['text':' is committed.','line_number':516,'multiline':False]
['text':' We only block index builds on the donor.','line_number':532,'multiline':False]
['text':' This log is included for synchronization of the tenant migration buildindex jstests.','line_number':537,'multiline':False]
['text':' We only block opening change streams on the donor.','line_number':554,'multiline':False]
['text':' We only block change stream getMores on the donor.','line_number':569,'multiline':False]
['text':' Recover TenantMigrationDonorAccessBlockers.','line_number':599,'multiline':False]
['text':' Recover TenantMigrationRecipientAccessBlockers.','line_number':607,'multiline':False]
['text':' Recover TenantMigrationDonorAccessBlockers for ShardSplit.','line_number':622,'multiline':False]
['text':' Skip creating a TenantMigrationDonorAccessBlocker for terminal shard split that have been','line_number':627,'multiline':False]
['text':' marked as garbage collected.','line_number':628,'multiline':False]
['text':' Some operations, like multi updates, can't safely be automatically retried so we return a','line_number':689,'multiline':False]
['text':' non retryable error instead of TenantMigrationCommitted/TenantMigrationAborted. If','line_number':690,'multiline':False]
['text':' waiting failed for a different reason, e.g. MaxTimeMS expiring, propagate that to the','line_number':691,'multiline':False]
['text':' user unchanged.','line_number':692,'multiline':False]
['text':' Not a tenant database.','line_number':751,'multiline':False]
['text':' Not a tenant database.','line_number':774,'multiline':False]
['text':' namespace tenant_migration_access_blocker','line_number':780,'multiline':False]
['text':' namespace mongo','line_number':782,'multiline':False]
