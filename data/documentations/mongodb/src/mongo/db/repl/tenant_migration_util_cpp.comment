['text':'*
 *    Copyright (C) 2021-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' namespace repl','line_number':124,'multiline':False]
['text':' namespace','line_number':135,'multiline':False]
['text':' Create 'system.views' in a separate WUOW if it does not exist.','line_number':143,'multiline':False]
['text':' Project the fields that a tenant migration recipient needs to refetch retryable','line_number':154,'multiline':False]
['text':' writes oplog entries: `ts`, `prevOpTime`, `preImageOpTime`, and `postImageOpTime`.','line_number':155,'multiline':False]
['text':' Also projects the first 'ns' field of 'applyOps' for transactions.','line_number':156,'multiline':False]
['text':'','line_number':157,'multiline':False]
['text':' We use two stages in this pipeline because 'o.applyOps' is an array but '$project'','line_number':158,'multiline':False]
['text':' does not recognize numeric paths as array indices. As a result, we use one '$project'','line_number':159,'multiline':False]
['text':' stage to get the first element in 'o.applyOps', then a second stage to store the 'ns'','line_number':160,'multiline':False]
['text':' field of the element into 'applyOpsNs'.','line_number':161,'multiline':False]
['text':' 1. Match config.transactions entries that have a 'lastWriteOpTime.ts' before or at','line_number':199,'multiline':False]
['text':'    'startApplyingTimestamp' and 'state: committed', which indicates that it is a committed','line_number':200,'multiline':False]
['text':'    transaction. Retryable writes should not have the 'state' field.','line_number':201,'multiline':False]
['text':' 2. Get all oplog entries that have a timestamp equal to 'lastWriteOpTime.ts'. Store these','line_number':210,'multiline':False]
['text':'    oplog entries in the 'oplogEntry' field.','line_number':211,'multiline':False]
['text':' 3. Filter out the entries that do not belong to the tenant.','line_number':222,'multiline':False]
['text':' 4. Unset the 'oplogEntry' field and return the committed transaction entries.','line_number':230,'multiline':False]
['text':' 1. Match config.transactions entries that do not have a `state` field, which indicates that','line_number':246,'multiline':False]
['text':'    the last write on the session was a retryable write and not a transaction.','line_number':247,'multiline':False]
['text':' 2. Fetch latest oplog entry for each config.transactions entry from the oplog view. `lastOps`','line_number':250,'multiline':False]
['text':'    is expected to contain exactly one element, unless `ns` does not contain the correct','line_number':251,'multiline':False]
['text':'    `tenantId`. In that case, it will be empty.','line_number':252,'multiline':False]
['text':' 3. Filter out entries with an empty `lastOps` array since they do not correspond to the','line_number':268,'multiline':False]
['text':'    correct tenant.','line_number':269,'multiline':False]
['text':' 4. Replace the single-element 'lastOps' array field with a single 'lastOp' field.','line_number':272,'multiline':False]
['text':' 5. Remove `lastOps` in favor of `lastOp`.','line_number':276,'multiline':False]
['text':' 6. If `lastOp` does not have `preImageOpTime` or `postImageOpTime` field, assign a dummy','line_number':279,'multiline':False]
['text':'    timestamp so that the next two $lookup stages do not need to do collection scan on the','line_number':280,'multiline':False]
['text':'    the oplog collection, because otherwise $lookup treats the field as having a value of','line_number':281,'multiline':False]
['text':'    of null, preventing it from seeking directly to the entry with the matching timestamp.','line_number':282,'multiline':False]
['text':' 7. Fetch preImage oplog entry for `findAndModify` from the oplog view. `preImageOps` is','line_number':293,'multiline':False]
['text':'    expected to contain exactly one element if the `preImageOpTime` field is not null and','line_number':294,'multiline':False]
['text':'    is earlier than `startFetchingTimestamp`.','line_number':295,'multiline':False]
['text':' 8. Fetch postImage oplog entry for `findAndModify` from the oplog view. `postImageOps` is','line_number':312,'multiline':False]
['text':'    expected to contain exactly one element if the `postImageOpTime` field is not null and is','line_number':313,'multiline':False]
['text':'    earlier than `startFetchingTimestamp`.','line_number':314,'multiline':False]
['text':' 9. Fetch oplog entries in each chain from the oplog view.','line_number':331,'multiline':False]
['text':' 10. Filter out all oplog entries from the `history` array that occur after','line_number':344,'multiline':False]
['text':'    `startFetchingTimestamp`. We keep the entry at the `startFetchingTimestamp` here so that','line_number':345,'multiline':False]
['text':'    we can capture any synthetic oplog entries that need to be created in the','line_number':346,'multiline':False]
['text':'    `FindAndModifyImageLookup` stage later. We do not need to sort the history after this','line_number':347,'multiline':False]
['text':'    since we will put the fetched entries into the oplog buffer collection, where entries are','line_number':348,'multiline':False]
['text':'    read in timestamp order.','line_number':349,'multiline':False]
['text':' 11. Combine the oplog entries.','line_number':357,'multiline':False]
['text':' 12. Keep only the `history` field to minimize the unwind result in the next stage.','line_number':363,'multiline':False]
['text':' 13. Unwind oplog entries in each `history` chain. This serves as an optimization for the','line_number':367,'multiline':False]
['text':'     next $lookup stage. Without unwinding, `history` is an array and the next $lookup will','line_number':368,'multiline':False]
['text':'     do a collection scan on the oplog collection to find all entries that match any element','line_number':369,'multiline':False]
['text':'     in the array, which is not efficient. After unwinding, the $lookup can utilize the fact','line_number':370,'multiline':False]
['text':'     that oplog collection is order by timestamp to seek directly to an entry that matches','line_number':371,'multiline':False]
['text':'     a timestamp without scanning the entire oplog collection.','line_number':372,'multiline':False]
['text':' 14. Fetch the complete oplog entries. `completeOplogEntry` is expected to contain exactly one','line_number':375,'multiline':False]
['text':'     element.','line_number':376,'multiline':False]
['text':' 15. Unwind oplog entries in each chain to the top-level array.','line_number':387,'multiline':False]
['text':' 16. Replace root.','line_number':391,'multiline':False]
['text':' 17. Downconvert any 'findAndModify' oplog entries to store pre- and post-images in the','line_number':395,'multiline':False]
['text':'     oplog rather than in a side collection.','line_number':396,'multiline':False]
['text':' 18. Since the oplog fetching and application stages will already capture entries after','line_number':399,'multiline':False]
['text':'    `startFetchingTimestamp`, we only need the earlier part of the oplog chain.','line_number':400,'multiline':False]
['text':' 1. Match config.transactions entries that do not have a `state` field, which indicates that','line_number':417,'multiline':False]
['text':'    the last write on the session was a retryable write and not a transaction.','line_number':418,'multiline':False]
['text':' 2. Fetch latest oplog entry for each config.transactions entry from the oplog view. `lastOps`','line_number':421,'multiline':False]
['text':'    is expected to contain every elements from `oplogView` for all the tenants.','line_number':422,'multiline':False]
['text':' 3. Replace the single-element 'lastOps' array field with a single 'lastOp' field.','line_number':433,'multiline':False]
['text':' 4. Remove `lastOps` in favor of `lastOp`.','line_number':437,'multiline':False]
['text':' 5. If `lastOp` does not have `preImageOpTime` or `postImageOpTime` field, assign a dummy','line_number':440,'multiline':False]
['text':'    timestamp so that the next two $lookup stages do not need to do collection scan on the','line_number':441,'multiline':False]
['text':'    the oplog collection, because otherwise $lookup treats the field as having a value of','line_number':442,'multiline':False]
['text':'    of null, preventing it from seeking directly to the entry with the matching timestamp.','line_number':443,'multiline':False]
['text':' 6. Fetch preImage oplog entry for `findAndModify` from the oplog view. `preImageOps` is','line_number':454,'multiline':False]
['text':'    expected to contain exactly one element if the `preImageOpTime` field is not null and','line_number':455,'multiline':False]
['text':'    is earlier than `startFetchingTimestamp`.','line_number':456,'multiline':False]
['text':' 7. Fetch postImage oplog entry for `findAndModify` from the oplog view. `postImageOps` is','line_number':473,'multiline':False]
['text':'    expected to contain exactly one element if the `postImageOpTime` field is not null and is','line_number':474,'multiline':False]
['text':'    earlier than `startFetchingTimestamp`.','line_number':475,'multiline':False]
['text':' 8. Fetch oplog entries in each chain from the oplog view.','line_number':492,'multiline':False]
['text':' 9. Filter out all oplog entries from the `history` array that occur after','line_number':505,'multiline':False]
['text':'    `startFetchingTimestamp`. We keep the entry at the `startFetchingTimestamp` here so that','line_number':506,'multiline':False]
['text':'    we can capture any synthetic oplog entries that need to be created in the','line_number':507,'multiline':False]
['text':'    `FindAndModifyImageLookup` stage later. We do not need to sort the history after this','line_number':508,'multiline':False]
['text':'    since we will put the fetched entries into the oplog buffer collection, where entries are','line_number':509,'multiline':False]
['text':'    read in timestamp order.','line_number':510,'multiline':False]
['text':' 10. Combine the oplog entries.','line_number':518,'multiline':False]
['text':' 11. Keep only the `history` field to minimize the unwind result in the next stage.','line_number':524,'multiline':False]
['text':' 12. Unwind oplog entries in each `history` chain. This serves as an optimization for the','line_number':528,'multiline':False]
['text':'     next $lookup stage. Without unwinding, `history` is an array and the next $lookup will','line_number':529,'multiline':False]
['text':'     do a collection scan on the oplog collection to find all entries that match any element','line_number':530,'multiline':False]
['text':'     in the array, which is not efficient. After unwinding, the $lookup can utilize the fact','line_number':531,'multiline':False]
['text':'     that oplog collection is order by timestamp to seek directly to an entry that matches','line_number':532,'multiline':False]
['text':'     a timestamp without scanning the entire oplog collection.','line_number':533,'multiline':False]
['text':' 13. Fetch the complete oplog entries. `completeOplogEntry` is expected to contain exactly one','line_number':536,'multiline':False]
['text':'     element.','line_number':537,'multiline':False]
['text':' 14. Unwind oplog entries in each chain to the top-level array.','line_number':548,'multiline':False]
['text':' 15. Replace root.','line_number':552,'multiline':False]
['text':' 16. Downconvert any 'findAndModify' oplog entries to store pre- and post-images in the','line_number':556,'multiline':False]
['text':'     oplog rather than in a side collection.','line_number':557,'multiline':False]
['text':' 17. Since the oplog fetching and application stages will already capture entries after','line_number':560,'multiline':False]
['text':'    `startFetchingTimestamp`, we only need the earlier part of the oplog chain.','line_number':561,'multiline':False]
['text':' Note marking keys garbage collectable is not atomic with marking the','line_number':615,'multiline':False]
['text':' state document garbage collectable, so after a failover this update','line_number':616,'multiline':False]
['text':' may fail to match any keys if they were previously marked garbage','line_number':617,'multiline':False]
['text':' collectable and deleted by the TTL monitor. Because of this we can't','line_number':618,'multiline':False]
['text':' assert on the update result's numMatched or numDocsModified.','line_number':619,'multiline':False]
['text':' namespace tenant_migration_util','line_number':642,'multiline':False]
['text':' namespace mongo','line_number':644,'multiline':False]
