['text':'*
 *    Copyright (C) 2020-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 * Populates a CRUD op's idHash and updates the isForCappedCollection field if necessary.
 ','line_number':119,'multiline':True]
['text':' Include the _id of the document in the hash so we get parallelism even if all writes are to a','line_number':126,'multiline':False]
['text':' single collection.','line_number':127,'multiline':False]
['text':'','line_number':128,'multiline':False]
['text':' For capped collections, this is usually illegal, since capped collections must preserve','line_number':129,'multiline':False]
['text':' insertion order. One exception are clustered capped collections with a monotonically','line_number':130,'multiline':False]
['text':' increasing cluster key, which guarantee preservation of the insertion order.','line_number':131,'multiline':False]
['text':' The document key indentifies the base collection's document, and is used to','line_number':135,'multiline':False]
['text':' serialise index key writes referring to the same document.','line_number':136,'multiline':False]
['text':' Mark capped collection ops before storing them to ensure we do not attempt to','line_number':147,'multiline':False]
['text':' bulk insert them.','line_number':148,'multiline':False]
['text':'*
 * Returns the ID of the writer thread that this op will be assigned to, determined by the
 * namespace string (and document key if exists) of the op.
 ','line_number':153,'multiline':True]
['text':'*
 * Returns the ID of the writer thread that this op will be assigned to, determined by the
 * session ID of the op.
 ','line_number':166,'multiline':True]
['text':'*
 * Adds an op to the writer vector of the given writer ID. The variadic arguments will be
 * forwarded to the writer vector to in-place construct the op.
 ','line_number':179,'multiline':True]
['text':' Skip a few growth rounds.','line_number':190,'multiline':False]
['text':'*
 * Adds the top-level prepareTransaction op to the writerVectors.
 ','line_number':198,'multiline':True]
['text':'*
 * Adds the top-level commitTransaction or AbortTransaction op to the writerVectors.
 ','line_number':213,'multiline':True]
['text':' namespace','line_number':225,'multiline':False]
['text':' l == r; now compare the namespace','line_number':258,'multiline':False]
['text':' l < r','line_number':260,'multiline':False]
['text':' l > r','line_number':264,'multiline':False]
['text':' Walk through the vector, if a prepared transaction command is encountered, sort','line_number':269,'multiline':False]
['text':' the ops between the previous prepared transaction command and the current one.','line_number':270,'multiline':False]
['text':' The end iterator acts as a dummy prepared transaction command, so we would','line_number':272,'multiline':False]
['text':' also sort the ops after the last real one encountered.','line_number':273,'multiline':False]
['text':' Used to determine which writer vector to assign serial ops.','line_number':286,'multiline':False]
['text':' Get the SplitPrepareSessionManager to be used to create split sessions.','line_number':306,'multiline':False]
['text':' For empty (read-only) prepares, we use the namespace of the original prepare oplog entry','line_number':316,'multiline':False]
['text':' (admin.$cmd) to decide which writer thread to apply it, and assigned it a split session.','line_number':317,'multiline':False]
['text':' The reason that we also split an empty prepare instead of treating it as some standalone','line_number':318,'multiline':False]
['text':' prepare op (as the prepares in initial sync or recovery mode) is so that we can keep a','line_number':319,'multiline':False]
['text':' logical invariant that all prepares in secondary mode are split, and thus we can apply','line_number':320,'multiline':False]
['text':' empty and non-empty prepares in the same way.','line_number':321,'multiline':False]
['text':' For non-empty prepares, the namespace of each derived op in the transaction is used to','line_number':331,'multiline':False]
['text':' decide which writer thread to apply it. We first add all the derived ops to a buffer','line_number':332,'multiline':False]
['text':' writer vector in order to get all the writer threads needed to apply this transaction.','line_number':333,'multiline':False]
['text':' We then acquire that number of split sessions and assign each writer thread a unique','line_number':334,'multiline':False]
['text':' split session when moving the ops to the real writer vector.','line_number':335,'multiline':False]
['text':' Add the top-level transaction to the writerVectors. Applying split transactions would','line_number':367,'multiline':False]
['text':' update the TransactionParticipant states of the split sessions, however we must also','line_number':368,'multiline':False]
['text':' update the TransactionParticipant states of the original (i.e. top-level) session in','line_number':369,'multiline':False]
['text':' case later this node becomes a primary.','line_number':370,'multiline':False]
['text':' When this commit refers to a non-split prepare, it means the transaction was','line_number':384,'multiline':False]
['text':' prepared when the node was primary or during inital sync/recovery. In this','line_number':385,'multiline':False]
['text':' case we do not split the commit and just add it as-is to the writer vector.','line_number':386,'multiline':False]
['text':' When this commit refers to a split prepare, we split the commit and add them','line_number':392,'multiline':False]
['text':' to the writers that have been assigned split prepare ops.','line_number':393,'multiline':False]
['text':' Add the top-level transaction to the writerVectors. Applying split transactions would','line_number':402,'multiline':False]
['text':' update the TransactionParticipant states of the split sessions, however we must also','line_number':403,'multiline':False]
['text':' update the TransactionParticipant states of the original (i.e. top-level) session in','line_number':404,'multiline':False]
['text':' case later this node becomes a primary.','line_number':405,'multiline':False]
['text':' Count each log op application as a separate operation, for reporting purposes.','line_number':443,'multiline':False]
['text':' Need to throw instead of returning a status for it to be properly ignored.','line_number':464,'multiline':False]
['text':' If the collection UUID does not resolve, acquire the collection using the','line_number':469,'multiline':False]
['text':' namespace. This is so we reach `applyOperation_inlock` below and invalidate','line_number':470,'multiline':False]
['text':' the preimage / postimage for the op if applicable.','line_number':471,'multiline':False]
['text':' TODO SERVER-41371 / SERVER-73661 this code is difficult to maintain and','line_number':473,'multiline':False]
['text':' needs to be done everywhere this situation is possible. We should try','line_number':474,'multiline':False]
['text':' to consolidate this into applyOperation_inlock.','line_number':475,'multiline':False]
['text':' In addition to the system.views, obtain the lock of the view that we are','line_number':507,'multiline':False]
['text':' going to change','line_number':508,'multiline':False]
['text':' We convert updates to upserts in secondary mode when the','line_number':532,'multiline':False]
['text':' oplogApplicationEnforcesSteadyStateConstraints parameter is false, to avoid','line_number':533,'multiline':False]
['text':' failing on the constraint that updates in steady state mode always update','line_number':534,'multiline':False]
['text':' an existing document.','line_number':535,'multiline':False]
['text':'','line_number':536,'multiline':False]
['text':' In initial sync and recovery modes we always ignore errors about missing','line_number':537,'multiline':False]
['text':' documents on update, so there is no reason to convert the updates to upsert.','line_number':538,'multiline':False]
['text':' This can happen in initial sync or recovery modes (when a delete of the','line_number':556,'multiline':False]
['text':' namespace appears later in the oplog), but we will ignore it in the caller.','line_number':557,'multiline':False]
['text':'','line_number':558,'multiline':False]
['text':' When we're not enforcing steady-state constraints, the error is ignored','line_number':559,'multiline':False]
['text':' only for deletes, on the grounds that deleting from a non-existent collection','line_number':560,'multiline':False]
['text':' is a no-op.','line_number':561,'multiline':False]
['text':' status ','line_number':574,'multiline':True]
['text':' This can happen in initial sync or unstable recovery mode when a time-series','line_number':583,'multiline':False]
['text':' collection is created in place of a dropped regular collection and oplog entries','line_number':584,'multiline':False]
['text':' are being applied that were originally performed on the regular collection.','line_number':585,'multiline':False]
['text':' A special case apply for commands to avoid implicit database creation.','line_number':598,'multiline':False]
['text':' We cannot do document validation, because document validation could have been disabled when','line_number':629,'multiline':False]
['text':' these oplog entries were generated.','line_number':630,'multiline':False]
['text':' Group the operations by namespace in order to get larger groups for bulk inserts, but do not','line_number':632,'multiline':False]
['text':' mix up the current order of oplog entries within the same namespace (thus *stable* sort).','line_number':633,'multiline':False]
['text':' If we are successful in grouping and applying inserts, advance the current iterator','line_number':642,'multiline':False]
['text':' past the end of the inserted group of entries.','line_number':643,'multiline':False]
['text':' If we didn't create a group, try to apply the op individually.','line_number':650,'multiline':False]
['text':' Tried to apply an update operation but the document is missing, there must be','line_number':656,'multiline':False]
['text':' a delete operation for the document later in the oplog.','line_number':657,'multiline':False]
['text':' Server will crash on oplog application failure during recovery from stable','line_number':658,'multiline':False]
['text':' checkpoint in the test environment.','line_number':659,'multiline':False]
['text':' SERVER-24927 If we have a NamespaceNotFound exception, then this document will be','line_number':686,'multiline':False]
['text':' dropped before initial sync or recovery ends anyways and we should ignore it.','line_number':687,'multiline':False]
['text':' Server will crash on oplog application failure during recovery from stable checkpoint','line_number':688,'multiline':False]
['text':' in the test environment.','line_number':689,'multiline':False]
['text':' namespace repl','line_number':709,'multiline':False]
['text':' namespace mongo','line_number':710,'multiline':False]
