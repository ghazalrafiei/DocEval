['text':'*
 *    Copyright (C) 2020-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 * TenantMigrationRecipientService is a primary only service to handle
 * data copy portion of a multitenant migration on recipient side.
 ','line_number':91,'multiline':True]
['text':' Disallows copying.','line_number':96,'multiline':False]
['text':'*
     * Sends an abort to all tenant migration instances on this recipient.
     ','line_number':121,'multiline':True]
['text':'
         * Interrupts the running instance and cause the completion future to complete with
         * 'status'.
         ','line_number':135,'multiline':True]
['text':'
         * Cancels the running instance but permits waiting for forgetMigration.
         ','line_number':141,'multiline':True]
['text':'*
         * Interrupts the migration for garbage collection.
         ','line_number':146,'multiline':True]
['text':'*
         * Returns a Future that will be resolved when data sync associated with this Instance has
         * completed running.
         ','line_number':152,'multiline':True]
['text':'*
         * Returns a Future that will be resolved when the instance has been durably marked garbage
         * collectable.
         ','line_number':160,'multiline':True]
['text':'*
         * Report TenantMigrationRecipientService Instances in currentOp().
         ','line_number':168,'multiline':True]
['text':'
         *  Returns the instance id.
         ','line_number':175,'multiline':True]
['text':'
         *  Returns the tenant id (database prefix).
         ','line_number':180,'multiline':True]
['text':'
         * Returns the recipient document state.
         ','line_number':185,'multiline':True]
['text':'
         * Blocks the thread until the tenant migration reaches consistent state in an interruptible
         * mode. Returns the donor optime at which the migration reached consistent state. Throws
         * exception on error.
         ','line_number':192,'multiline':True]
['text':'
         * Blocks the thread until the tenant oplog applier applied data past the
         * 'returnAfterReachingTimestamp' in an interruptible mode. If the recipient's logical clock
         * has not yet reached the 'returnAfterReachingTimestamp', advances the recipient's logical
         * clock to 'returnAfterReachingTimestamp'. Finally, stores the
         * 'returnAfterReachingTimestamp' as 'rejectReadsBeforeTimestamp' in the state
         * document and waits for the write to be replicated to every node (i.e. wait for
         * 'rejectReadsBeforeTimestamp' to be set on the TenantMigrationRecipientAccessBlocker of
         * every node) to guarantee that no reads will be incorrectly accepted.
         ','line_number':199,'multiline':True]
['text':'
         *  Set the oplog creator functor, to allow use of a mock oplog fetcher.
         ','line_number':212,'multiline':True]
['text':'*
         * Stops the oplog applier without going through tenantForgetMigration.
         ','line_number':220,'multiline':True]
['text':'
         * Suppresses selecting 'host' as the donor sync source, until 'until'.
         ','line_number':228,'multiline':True]
['text':' Represents the instance task state.','line_number':249,'multiline':False]
['text':' The interruptStatus can exist (and should be non-OK) if and only if the state is','line_number':284,'multiline':False]
['text':' kInterrupted.','line_number':285,'multiline':False]
['text':' task state.','line_number':334,'multiline':False]
['text':' task interrupt status. Set to Status::OK() only when the recipient service has not','line_number':336,'multiline':False]
['text':' been interrupted so far, and is used to remember the initial interrupt error.','line_number':337,'multiline':False]
['text':'
         * Helper for interrupt().
         * The _receivedForgetMigrationPromise is resolved when skipWaitingForForgetMigration is
         * set (e.g. stepDown/shutDown). And we use skipWaitingForForgetMigration=false for
         * interruptions coming from the instance's task chain itself (e.g. _oplogFetcherCallback).
         ','line_number':341,'multiline':True]
['text':'
         * Transitions the instance state to 'kStarted'.
         *
         * Persists the instance state doc and waits for it to be majority replicated.
         * Throws an user assertion on failure.
         ','line_number':349,'multiline':True]
['text':'
         * Transitions the instance state to 'kDone' and sets the expireAt field.
         *
         * Persists the instance state doc and waits for it to be majority replicated.
         * Throws on shutdown / notPrimary errors.
         ','line_number':357,'multiline':True]
['text':'*
         * Deletes the state document. Does not return the opTime for the delete, since it's not
         * necessary to wait for this delete to be majority committed (this is one of the last steps
         * in the chain, and if the delete rolls back, the new primary will re-do the delete).
         ','line_number':365,'multiline':True]
['text':'*
         * Creates a client, connects it to the donor and uses the default
         * authentication mode (KeyFile Authentication). Throws a user assertion on failure.
         ','line_number':375,'multiline':True]
['text':'*
         * Creates and connects both the oplog fetcher client and the client used for other
         * operations.
         ','line_number':382,'multiline':True]
['text':'*
         * Fetches all key documents from the donor's admin.system.keys collection, stores them in
         * config.external_validation_keys, and refreshes the keys cache.
         ','line_number':388,'multiline':True]
['text':'*
         * Get the oldest active multi-statement transaction optime by reading
         * config.transactions collection at given ReadTimestamp (i.e, equal to
         * startApplyingDonorOpTime) snapshot.
         ','line_number':394,'multiline':True]
['text':'*
         * Retrieves the start/fetch optimes from the donor and updates the in-memory/on-disk states
         * accordingly.
         ','line_number':401,'multiline':True]
['text':'*
         * Pushes documents from oplog fetcher to oplog buffer.
         *
         * Returns a status even though it always returns OK, to conform the interface OplogFetcher
         * expects for the EnqueueDocumentsFn.
         ','line_number':407,'multiline':True]
['text':'*
         * Runs an aggregation that gets the entire oplog chain for every retryable write entry in
         * `config.transactions`. Only returns oplog entries in the chain where
         * `ts` < `startFetchingOpTime.ts` and adds them to the oplog buffer.
         ','line_number':417,'multiline':True]
['text':'*
         * Migrates committed transactions entries into 'config.transactions'.
         ','line_number':424,'multiline':True]
['text':'*
         * Opens and returns a cursor for entries from '_makeCommittedTransactionsAggregation()'.
         ','line_number':429,'multiline':True]
['text':'*
         * Creates an aggregation pipeline to fetch transaction entries with 'lastWriteOpTime' <
         * 'startFetchingDonorOpTime' and 'state: committed'.
         ','line_number':434,'multiline':True]
['text':'*
         * Processes a committed transaction entry from the donor. Updates the recipient's
         * 'config.transactions' collection with the entry and writes a no-op entry for the
         * recipient secondaries to replicate the entry.
         ','line_number':440,'multiline':True]
['text':'*
         * Starts the tenant oplog fetcher.
         ','line_number':447,'multiline':True]
['text':'*
         * Called when the oplog fetcher finishes.  Usually the oplog fetcher finishes only when
         * cancelled or on error.
         ','line_number':452,'multiline':True]
['text':'*
         * Returns the filter used to get only oplog documents related to the appropriate tenant.
         ','line_number':458,'multiline':True]
['text':'
         * Traverse backwards through the oplog to find the optime which tenant oplog application
         * should resume from. The oplog applier should resume applying entries that have a greater
         * optime than the returned value.
         ','line_number':463,'multiline':True]
['text':'
         * Starts the tenant cloner.
         * Returns future that will be fulfilled when the cloner completes.
         ','line_number':470,'multiline':True]
['text':'
         * Starts the tenant oplog applier.
         ','line_number':476,'multiline':True]
['text':'
         * Waits for tenant oplog applier to stop.
         ','line_number':481,'multiline':True]
['text':'
         * Gets called when the logical/file cloner completes cloning data successfully.
         * And, it is responsible to populate the 'dataConsistentStopDonorOpTime'
         * and 'cloneFinishedRecipientOpTime' fields in the state doc.
         ','line_number':486,'multiline':True]
['text':'
         * Wait for the data cloned via logical cloner to be consistent.
         ','line_number':493,'multiline':True]
['text':'
         * Transitions the instance state to 'kConsistent'.
         ','line_number':498,'multiline':True]
['text':'
         * Persists the instance state doc and waits for it to be majority replicated.
         * Throws an user assertion on failure.
         ','line_number':503,'multiline':True]
['text':'
         * Cancels the tenant migration recipient instance task work.
         ','line_number':509,'multiline':True]
['text':'
         * Performs some cleanup work on sync completion, like, shutting down the components or
         * fulfilling any data-sync related instance promises.
         ','line_number':514,'multiline':True]
['text':'
         * Suppresses selecting 'host' as the donor sync source, until 'until'.
         ','line_number':520,'multiline':True]
['text':'
         * Returns a vector of currently excluded donor hosts. Also removes hosts from the list of
         * excluded donor nodes, if the exclude duration has expired.
         ','line_number':525,'multiline':True]
['text':'
         * Makes the failpoint stop or hang the migration based on failpoint data "action" field.
         * If "action" is "hang" and 'opCtx' is not null, the failpoint will be interruptible.
         ','line_number':531,'multiline':True]
['text':'
         * Parse the "state" field contained in the failpoint into a
         * TenantMigrationRecipientStateEnum. The field must be present and be a valid terminal
         * state.
         ','line_number':537,'multiline':True]
['text':'*
         * Updates the state doc in the database and waits for that to be propagated to a majority.
         ','line_number':544,'multiline':True]
['text':'
         * Returns the majority OpTime on the donor node that 'client' is connected to.
         ','line_number':549,'multiline':True]
['text':'
         * Detects recipient FCV changes during migration.
         ','line_number':554,'multiline':True]
['text':'*
         * Enforces that the donor and recipient share the same featureCompatibilityVersion.
         ','line_number':559,'multiline':True]
['text':'
         * Sets up internal state to begin migration.
         ','line_number':564,'multiline':True]
['text':'
         * Drops ephemeral collections used for tenant migrations.
         ','line_number':571,'multiline':True]
['text':' All member variables are labeled with one of the following codes indicating the','line_number':578,'multiline':False]
['text':' synchronization rules for accessing them.','line_number':579,'multiline':False]
['text':'','line_number':580,'multiline':False]
['text':' (R)  Read-only in concurrent operation; no synchronization required.','line_number':581,'multiline':False]
['text':' (S)  Self-synchronizing; access according to class's own rules.','line_number':582,'multiline':False]
['text':' (M)  Reads and writes guarded by _mutex.','line_number':583,'multiline':False]
['text':' (W)  Synchronization required only for writes.','line_number':584,'multiline':False]
['text':' (R) (not owned)','line_number':587,'multiline':False]
['text':' (M)','line_number':588,'multiline':False]
['text':' (M)','line_number':589,'multiline':False]
['text':' This data is provided in the initial state doc and never changes.  We keep copies to','line_number':591,'multiline':False]
['text':' avoid having to obtain the mutex to access them.','line_number':592,'multiline':False]
['text':' (R)','line_number':593,'multiline':False]
['text':' (R)','line_number':594,'multiline':False]
['text':' (R)','line_number':595,'multiline':False]
['text':' (R)','line_number':596,'multiline':False]
['text':' (R)','line_number':597,'multiline':False]
['text':' (M)','line_number':599,'multiline':False]
['text':' Members of the donor replica set that we have excluded as a potential sync source for','line_number':601,'multiline':False]
['text':' some period of time.','line_number':602,'multiline':False]
['text':' (M)','line_number':603,'multiline':False]
['text':' Because the cloners and oplog fetcher use exhaust, we need a separate connection for','line_number':605,'multiline':False]
['text':' each.  The '_client' will be used for the cloners and other operations such as fetching','line_number':606,'multiline':False]
['text':' optimes while the '_oplogFetcherClient' will be reserved for the oplog fetcher only.','line_number':607,'multiline':False]
['text':'','line_number':608,'multiline':False]
['text':' Follow DBClientCursor synchonization rules.','line_number':609,'multiline':False]
['text':' (S)','line_number':610,'multiline':False]
['text':' (S)','line_number':611,'multiline':False]
['text':' (M)','line_number':613,'multiline':False]
['text':' (M)','line_number':614,'multiline':False]
['text':' (M)','line_number':615,'multiline':False]
['text':' (M)','line_number':616,'multiline':False]
['text':' (M)','line_number':617,'multiline':False]
['text':' (M)','line_number':618,'multiline':False]
['text':' Writer pool to do storage write operation. Used by tenant collection cloner and by','line_number':620,'multiline':False]
['text':' tenant oplog applier.','line_number':621,'multiline':False]
['text':'(M)','line_number':622,'multiline':False]
['text':' Data shared by cloners. Follow TenantMigrationSharedData synchronization rules.','line_number':623,'multiline':False]
['text':' (S)','line_number':624,'multiline':False]
['text':' Indicates whether the main task future continuation chain state kicked off by run().','line_number':625,'multiline':False]
['text':' (M)','line_number':626,'multiline':False]
['text':' Promise that is resolved when the state document is initialized and persisted.','line_number':628,'multiline':False]
['text':' (W)','line_number':629,'multiline':False]
['text':' Promise that is resolved Signaled when the instance has started tenant database cloner','line_number':630,'multiline':False]
['text':' and tenant oplog fetcher.','line_number':631,'multiline':False]
['text':' (W)','line_number':632,'multiline':False]
['text':' Promise that is resolved when the tenant data sync has reached consistent point.','line_number':633,'multiline':False]
['text':' (W)','line_number':634,'multiline':False]
['text':' Promise that is resolved when the data sync has completed.','line_number':635,'multiline':False]
['text':' (W)','line_number':636,'multiline':False]
['text':' Promise that is resolved when the recipientForgetMigration command is received or on','line_number':637,'multiline':False]
['text':' stepDown/shutDown with errors.','line_number':638,'multiline':False]
['text':' (W)','line_number':640,'multiline':False]
['text':' Promise that is resolved when the instance has been durably marked garbage collectable','line_number':641,'multiline':False]
['text':' (W)','line_number':642,'multiline':False]
['text':' Waiters are notified when 'tenantOplogApplier' is valid on restart.','line_number':643,'multiline':False]
['text':' (M)','line_number':644,'multiline':False]
['text':' Waiters are notified when 'tenantOplogApplier' is ready to use.','line_number':645,'multiline':False]
['text':' (M)','line_number':646,'multiline':False]
['text':' Indicates whether 'tenantOplogApplier' is ready to use or not.','line_number':647,'multiline':False]
['text':' (M)','line_number':648,'multiline':False]
['text':'
     * Ensures that only one Instance is able to insert the initial state doc provided by the user,
     * into NamespaceString::kTenantMigrationRecipientsNamespace collection at a time.
     *
     * No other locks should be held when locking this. RSTl/global/db/collection locks have to be
     * taken after taking this.
     ','line_number':657,'multiline':True]
['text':' namespace repl','line_number':666,'multiline':False]
['text':' namespace mongo','line_number':667,'multiline':False]
