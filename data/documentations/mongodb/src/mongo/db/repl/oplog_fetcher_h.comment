['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 * The oplog fetcher, once started, reads operations from a remote oplog using a tailable,
 * awaitData, exhaust cursor.
 *
 * The initial `find` command is generated from the last fetched optime.
 *
 * Using RequestMetadataWriter and ReplyMetadataReader, the sync source will forward metadata in
 * each response that will be sent to the data replicator external state.
 *
 * Performs additional validation on first batch of operations returned from the query to ensure we
 * are able to continue from our last known fetched operation.
 *
 * Validates each batch of operations to make sure that none of the oplog entries are out of order.
 *
 * Collect stats about all the batches received to be able to report in serverStatus metrics.
 *
 * Pushes operations from each batch of operations onto a buffer using the "enqueueDocumentsFn"
 * function.
 *
 * When there is an error, it will create a new cursor by issuing a new `find` command to the sync
 * source. If the sync source is no longer eligible or the OplogFetcher was shutdown, calls
 * "onShutdownCallbackFn" to signal the end of processing.
 *
 * An oplog fetcher is an abstract async component, which takes care of startup and shutdown logic.
 ','line_number':67,'multiline':True]
['text':'*
     * Type of function called by the oplog fetcher on shutdown with the final oplog fetcher status.
     *
     * The status will be Status::OK() if we have processed the last batch of operations from the
     * cursor.
     *
     * rbid will be set to the rollback id of the oplog query metadata for the first batch fetched
     * from the sync source.
     *
     * This function will be called 0 times if startup() fails and at most once after startup()
     * returns success.
     ','line_number':97,'multiline':True]
['text':'*
     * Container for BSON documents extracted from cursor results.
     ','line_number':111,'multiline':True]
['text':'*
     * An enum that indicates if we want to skip the first document during oplog fetching or not.
     * Currently, the only time we don't want to skip the first document is during initial sync
     * if the sync source has a valid oldest active transaction optime, as we need to include
     * the corresponding oplog entry when applying.
     ','line_number':116,'multiline':True]
['text':'*
     * Statistics on current batch of operations returned by the sync source.
     ','line_number':124,'multiline':True]
['text':'*
     * Type of function that accepts a pair of iterators into a range of operations
     * within the current batch of results and copies the operations into
     * a buffer to be consumed by the next stage of the replication process.
     *
     * Additional information on the operations is provided in a DocumentsInfo
     * struct.
     ','line_number':136,'multiline':True]
['text':'*
         * Defines which situations the oplog fetcher will restart after encountering an error.
         * Called when getting the next batch failed for some reason.
         ','line_number':153,'multiline':True]
['text':'*
         * Called when a batch was successfully fetched to reset any state needed to track restarts.
         ','line_number':159,'multiline':True]
['text':' Restarts since the last successful oplog query response.','line_number':176,'multiline':False]
['text':' The OpTime, last oplog entry fetched in a previous run, or the optime to start fetching','line_number':203,'multiline':False]
['text':' from, depending on the startingPoint (below.).  If the startingPoint is kSkipFirstDoc,','line_number':204,'multiline':False]
['text':' this entry will be verified to exist, then discarded. If it is kEnqueueFirstDoc, it will','line_number':205,'multiline':False]
['text':' be sent to the enqueue function with the first batch.','line_number':206,'multiline':False]
['text':' Sync source to read from.','line_number':209,'multiline':False]
['text':' Rollback ID that the sync source is required to have after the first batch. If the value','line_number':214,'multiline':False]
['text':' is uninitialized, the oplog fetcher has not contacted the sync source yet.','line_number':215,'multiline':False]
['text':' A flag indicating whether we should error if the sync source is not ahead of our initial','line_number':220,'multiline':False]
['text':' last fetched OpTime on the first batch. Most of the time this should be set to','line_number':221,'multiline':False]
['text':' kRequireFresherSyncSource, but there are certain special cases where it's acceptable for','line_number':222,'multiline':False]
['text':' our sync source to have no ops newer than _lastFetched.','line_number':223,'multiline':False]
['text':' Predicate with additional filtering to be done on oplog entries.','line_number':226,'multiline':False]
['text':' Read concern to use for reading the oplog.  Empty read concern means we use a default','line_number':229,'multiline':False]
['text':' of "afterClusterTime: Timestamp(0,1)".','line_number':230,'multiline':False]
['text':' Indicates if we want to skip the first document during oplog fetching or not.','line_number':233,'multiline':False]
['text':' Specifies if the oplog fetcher should request a resume token and provide it to','line_number':236,'multiline':False]
['text':' _enqueueDocumentsFn.','line_number':237,'multiline':False]
['text':' If true, the oplog fetcher will use an aggregation request with '$match' rather than','line_number':242,'multiline':False]
['text':' a 'find' query.','line_number':243,'multiline':False]
['text':'*
     * Invariants if validation fails on any of the provided arguments.
     ','line_number':247,'multiline':True]
['text':'*
     * Validates documents in current batch of results returned from tailing the remote oplog.
     * 'first' should be set to true if this set of documents is the first batch returned from the
     * query.
     * On success, returns statistics on operations.
     ','line_number':259,'multiline':True]
['text':'*
     * Allows the OplogFetcher to use an already-established connection from the caller.  Ownership
     * of the connection is taken by the OplogFetcher.  Must be called before startup.
     ','line_number':271,'multiline':True]
['text':'*
     * Prints out the status and settings of the oplog fetcher.
     ','line_number':277,'multiline':True]
['text':' ================== Test support API ===================','line_number':282,'multiline':False]
['text':'*
     * Returns the StartingPoint defined in the OplogFetcher::Config.
     ','line_number':284,'multiline':True]
['text':'*
     * Returns the `find` query run on the sync source's oplog.
     ','line_number':289,'multiline':True]
['text':'*
     * Returns the OpTime of the last oplog entry fetched and processed.
     ','line_number':294,'multiline':True]
['text':'*
     * Returns the await data timeout used for the "maxTimeMS" field in getMore command requests.
     ','line_number':299,'multiline':True]
['text':'*
     * Type of function to create a database client connection. Used for testing only.
     ','line_number':304,'multiline':True]
['text':'*
     * Overrides how the OplogFetcher creates the client. Used for testing only.
     ','line_number':309,'multiline':True]
['text':'*
     * Get a raw pointer to the client connection. It is the caller's responsibility to not reuse
     * this pointer beyond the lifetime of the underlying client. Used for testing only.
     ','line_number':314,'multiline':True]
['text':'*
     * Returns how long the `find` command should wait before timing out.
     ','line_number':320,'multiline':True]
['text':'*
     * Returns how long the `find` command should wait before timing out, if we are retrying the
     * `find` due to an error.
     ','line_number':325,'multiline':True]
['text':'*
     * Returns the OpTime of the last oplog entry fetched and processed.
     ','line_number':332,'multiline':True]
['text':' =============== AbstractAsyncComponent overrides ================','line_number':338,'multiline':False]
['text':'*
     * Schedules the _runQuery function to run in a separate thread.
     ','line_number':340,'multiline':True]
['text':'*
     * Shuts down the DBClientCursor and DBClientConnection. Uses the connection's
     * shutdownAndDisallowReconnect function to interrupt it.
     ','line_number':345,'multiline':True]
['text':' ============= End AbstractAsyncComponent overrides ==============','line_number':355,'multiline':False]
['text':'*
     * Creates a DBClientConnection and executes a query to retrieve oplog entries from this node's
     * sync source. This will create a tailable, awaitData, exhaust cursor which will be used until
     * the cursor fails or OplogFetcher is shut down. For each batch returned by the upstream node,
     * _onSuccessfulBatch will be called with the response.
     *
     * In the case of any network or response errors, this method will close the cursor and restart
     * a new one. If OplogFetcherRestartDecision's shouldContinue function indicates it should not
     * create a new cursor, it will call _finishCallback.
     ','line_number':357,'multiline':True]
['text':'*
     * Establishes the initial connection to the sync source and authenticates the connection for
     * replication. This will also retry on connection failures until it exhausts the allowed retry
     * attempts.
     ','line_number':369,'multiline':True]
['text':'*
     * Sets the RequestMetadataWriter and ReplyMetadataReader on the connection.
     ','line_number':376,'multiline':True]
['text':'*
     * Does one of:
     * 1. Executes a `find` query on the sync source's oplog and establishes a tailable, awaitData,
     * exhaust cursor.
     * 2. Executes a 'aggregate' query on the sync source's oplog. This is currently used in
     * tenant migrations.
     *
     * Before running the query, it will set a RequestMetadataWriter to modify the request to
     * include $oplogQueryData and $replData. If will also set a ReplyMetadataReader to parse the
     * response for the metadata field.
     ','line_number':381,'multiline':True]
['text':'*
     * This function will create an `AggregateCommandRequest` object that will do a `$match` to find
     * all entries greater than the last fetched timestamp.
     ','line_number':394,'multiline':True]
['text':'*
     * This function will create the `find` query to issue to the sync source. It is provided with
     * the value to use as the "maxTimeMS" for the find command.
     ','line_number':401,'multiline':True]
['text':'*
     * Gets the next batch from the exhaust cursor.
     *
     * If there was an error getting the next batch, checks _oplogFetcherRestartDecision's
     * shouldContinue function to see if it should create a new cursor and if so, calls
     * _createNewCursor.
     ','line_number':407,'multiline':True]
['text':'*
     * Function called by the oplog fetcher when it gets a successful batch from the sync source.
     * This will also process the metadata received from the response.
     *
     * On failure returns a status that will be passed to _finishCallback.
     ','line_number':416,'multiline':True]
['text':'*
     * Notifies caller that the oplog fetcher has completed processing operations from the remote
     * oplog using the "_onShutdownCallbackFn".
     ','line_number':424,'multiline':True]
['text':'*
     * Sets the socket timeout on the connection to the source node. It will add a network buffer to
     * the provided timeout.
     ','line_number':430,'multiline':True]
['text':'*
     * Returns how long the `find` command should wait before timing out.
     ','line_number':436,'multiline':True]
['text':'*
     * Returns how long the `find` command should wait before timing out, if we are retrying the
     * `find` due to an error. This timeout should be considerably smaller than our initial oplog
     * `find` time, since a communication failure with an upstream node may indicate it is
     * unreachable.
     ','line_number':441,'multiline':True]
['text':'*
     * Checks the first batch of results from query.
     * 'documents' are the first batch of results returned from tailing the remote oplog.
     * 'remoteLastOpApplied' is the last OpTime applied on the sync source.
     * 'remoteRBID' is a RollbackId for the sync source returned in this oplog query.
     *
     * Returns TooStaleToSyncFromSource if we are too stale to sync from our source.
     * Returns OplogStartMissing if we should go into rollback.
     ','line_number':449,'multiline':True]
['text':'*
     * Distinguishes between needing to rollback and being too stale to sync from our sync source.
     * This will be called when we check the first batch of results and our last fetched optime does
     * not equal the first document in that batch. This function should never return Status::OK().
     ','line_number':462,'multiline':True]
['text':' Protects member data of this OplogFetcher.','line_number':469,'multiline':False]
['text':' Namespace of the oplog to read.','line_number':472,'multiline':False]
['text':' Rollback ID that the sync source had after the first batch. Initialized from','line_number':475,'multiline':False]
['text':' the requiredRBID in the OplogFetcher::Config and passed to the onShutdown callback.','line_number':476,'multiline':False]
['text':' Indicates whether the current batch is the first received via this cursor.','line_number':479,'multiline':False]
['text':' In the case of an error, this will help decide if a new cursor should be created or the','line_number':482,'multiline':False]
['text':' oplog fetcher should be shut down.','line_number':483,'multiline':False]
['text':' Function to call when the oplog fetcher shuts down.','line_number':486,'multiline':False]
['text':' Used to keep track of the last oplog entry read and processed from the sync source.','line_number':489,'multiline':False]
['text':' Logical time metadata handling hook for the DBClientConnection.','line_number':492,'multiline':False]
['text':' Set by the ReplyMetadataReader upon receiving a new batch.','line_number':495,'multiline':False]
['text':' Connection to the sync source whose oplog we will be querying. This connection should be','line_number':498,'multiline':False]
['text':' created with autoreconnect set to true so that it will automatically reconnect on a','line_number':499,'multiline':False]
['text':' connection failure. When the OplogFetcher is shut down, the connection will be interrupted','line_number':500,'multiline':False]
['text':' via its shutdownAndDisallowReconnect function.','line_number':501,'multiline':False]
['text':' Used to create the DBClientConnection for the oplog fetcher.','line_number':504,'multiline':False]
['text':' The tailable, awaitData, exhaust cursor used to fetch oplog entries from the sync source.','line_number':507,'multiline':False]
['text':' When an error is encountered, depending on the result of OplogFetcherRestartDecision's','line_number':508,'multiline':False]
['text':' shouldContinue function, a new cursor will be created or the oplog fetcher will shut down.','line_number':509,'multiline':False]
['text':' Handle to currently scheduled _runQuery task.','line_number':517,'multiline':False]
['text':' Condition to be notified on shutdown.','line_number':522,'multiline':False]
['text':' namespace repl','line_number':563,'multiline':False]
['text':' namespace mongo','line_number':564,'multiline':False]
