['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 * Interface for temporary container of oplog entries (in BSON format) from sync source by
 * OplogFetcher that will be read by applier in the InitialSyncer.
 *
 * Implementations are only required to support one pusher and one popper.
 ','line_number':48,'multiline':True]
['text':'*
     * Type of item held in the oplog buffer;
     ','line_number':59,'multiline':True]
['text':'*
     * Batch of oplog entries (in BSON format) for bulk read/write operations.
     ','line_number':64,'multiline':True]
['text':'*
     * Counters for this oplog buffer.
     ','line_number':69,'multiline':True]
['text':'*
     * Causes the oplog buffer to initialize its internal state (start threads if appropriate,
     * create backing storage, etc). This method may be called at most once for the lifetime of an
     * oplog buffer.
     ','line_number':77,'multiline':True]
['text':'*
     * Signals to the oplog buffer that it should shut down. This method may block. After
     * calling shutdown, it is illegal to perform read/write operations on this oplog buffer.
     *
     * It is legal to call this method multiple times, but it should only be called after startup
     * has been called.
     ','line_number':84,'multiline':True]
['text':'*
     * Pushes operations in the iterator range [begin, end) into the oplog buffer without blocking.
     ','line_number':93,'multiline':True]
['text':'*
     * Returns when enough space is available.
     ','line_number':100,'multiline':True]
['text':'*
     * Returns true if oplog buffer is empty.
     ','line_number':105,'multiline':True]
['text':'*
     * Maximum size of all oplog entries that can be stored in this oplog buffer as measured by the
     * BSONObj::objsize() function.
     *
     * Returns 0 if this oplog buffer has no size constraints.
     ','line_number':110,'multiline':True]
['text':'*
     * Total size of all oplog entries in this oplog buffer as measured by the BSONObj::objsize()
     * function.
     ','line_number':118,'multiline':True]
['text':'*
     * Returns the number/count of items in the oplog buffer.
     ','line_number':124,'multiline':True]
['text':'*
     * Clears oplog buffer.
     ','line_number':129,'multiline':True]
['text':'*
     * Returns false if oplog buffer is empty. "value" is left unchanged.
     * Otherwise, removes last item (saves in "value") from the oplog buffer and returns true.
     ','line_number':134,'multiline':True]
['text':'*
     * Waits uninterruptibly for "waitDuration" for an operation to be pushed into the oplog buffer.
     * Returns false if oplog buffer is still empty after "waitDuration".
     * Otherwise, returns true.
     ','line_number':140,'multiline':True]
['text':'*
     * Interruptible wait with millisecond granularity.
     *
     * Waits "waitDuration" for an operation to be pushed into the oplog buffer.
     * Returns false if oplog buffer is still empty after "waitDuration".
     * Otherwise, returns true.
     * Throws if the interruptible is interrupted.
     ','line_number':150,'multiline':True]
['text':'*
     * Same as waitForDataFor(Milliseconds, Interruptible) above but takes a deadline instead
     * of a duration.
     ','line_number':162,'multiline':True]
['text':'*
     * Returns false if oplog buffer is empty.
     * Otherwise, returns true and sets "value" to last item in oplog buffer.
     ','line_number':169,'multiline':True]
['text':'*
     * Returns the item most recently added to the oplog buffer or nothing if the buffer is empty.
     ','line_number':175,'multiline':True]
['text':'*
     * Enters "drain mode".  May only be called by the producer.  When the buffer is in drain mode,
     * "waitForData" will return immediately even if there is data in the queue.  This
     * is an optimization and subclasses may choose not to implement this function.
     ','line_number':180,'multiline':True]
['text':'*
     * Leaves "drain mode".  May only be called by the producer.
     ','line_number':187,'multiline':True]
['text':'*
     * Sets maximum size of operations for this OplogBuffer.
     * This function should only be called by a single thread.
     ','line_number':200,'multiline':True]
['text':'*
     * Clears counters.
     * This function should only be called by a single thread.
     ','line_number':208,'multiline':True]
['text':' Number of operations in this OplogBuffer.','line_number':227,'multiline':False]
['text':' Total size of operations in this OplogBuffer. Measured in bytes.','line_number':230,'multiline':False]
['text':' Maximum size of operations in this OplogBuffer. Measured in bytes.','line_number':233,'multiline':False]
['text':'*
 * An OplogBuffer interface which also supports random access by timestamp.
 * The entries in a RandomAccessOplogBuffer must be pushed in strict timestamp order.
 *
 * The user of a RandomAccesOplogBuffer may seek to or find timestamps which have already been read
 * from the buffer.  It is up to the implementing subclass to ensure that such timestamps are
 * available to be read.
 ','line_number':237,'multiline':True]
['text':'*
     * Retrieves an oplog entry by timestamp. Returns ErrorCodes::NoSuchKey if no such entry is
     * found.  Does not change current position of oplog buffer.
     ','line_number':252,'multiline':True]
['text':'*
     * Change current position of oplog buffer to point to the entry with timestamp 'ts'.  If
     * 'exact' is true, return NoSuchKey if the timestamp is not found. Otherwise, position will
     * be before the next timestamp greater than or equal to 'ts'.
     ','line_number':258,'multiline':True]
['text':' namespace repl','line_number':268,'multiline':False]
['text':' namespace mongo','line_number':269,'multiline':False]
