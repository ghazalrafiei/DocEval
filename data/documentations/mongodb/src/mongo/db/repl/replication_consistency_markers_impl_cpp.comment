['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' namespace','line_number':78,'multiline':False]
['text':' Fail if there is an error other than the collection being missing or being empty.','line_number':105,'multiline':False]
['text':' Writes on minValid document should always be untimestamped.','line_number':116,'multiline':False]
['text':' This initializes the values of the required fields if they are not already set.','line_number':124,'multiline':False]
['text':' If one of the fields is already set, the $max will prefer the existing value since it','line_number':125,'multiline':False]
['text':' will always be greater than the provided ones.','line_number':126,'multiline':False]
['text':' The initialization write should go into the first checkpoint taken, so we provide no','line_number':127,'multiline':False]
['text':' timestamp. The 'minValid' document could exist already and this could simply add fields to','line_number':128,'multiline':False]
['text':' the 'minValid' document, but we still want the initialization write to go into the next','line_number':129,'multiline':False]
['text':' checkpoint since a newly initialized 'minValid' document is always valid.','line_number':130,'multiline':False]
['text':' At this point, we have already updated our initialDataTimestamp from','line_number':166,'multiline':False]
['text':' Timestamp::kAllowUnstableCheckpointsSentinel to lastAppliedTimestamp, we are no longer','line_number':167,'multiline':False]
['text':' allowed to take unstable checkpoints. So, this minValid update will only be covered by the','line_number':168,'multiline':False]
['text':' first stable checkpoint taken after initial sync (when the stable timestamp is >= the','line_number':169,'multiline':False]
['text':' initialDataTimestamp). If we crash before the first stable checkpoint is taken, we are','line_number':170,'multiline':False]
['text':' guaranteed to come back up with the initial sync flag. In this corner case, this node has to','line_number':171,'multiline':False]
['text':' be resynced.','line_number':172,'multiline':False]
['text':' Make sure to clear the oplogTrucateAfterPoint in case it is stale. Otherwise, we risk the','line_number':177,'multiline':False]
['text':' possibility of deleting oplog entries that we want to keep. It is safe to clear this','line_number':178,'multiline':False]
['text':' here since we are consistent at the top of our oplog at this point.','line_number':179,'multiline':False]
['text':' This will set lastDurable after journal flush is completed so we after this function, we','line_number':185,'multiline':False]
['text':' will have both valid lastApplied and lastDurable.','line_number':186,'multiline':False]
['text':' Initialized at startup so it should never be missing.','line_number':193,'multiline':False]
['text':' We set the 'appliedThrough' to the provided timestamp. The 'appliedThrough' is only valid','line_number':230,'multiline':False]
['text':' in checkpoints that contain all writes through this timestamp since it indicates the top of','line_number':231,'multiline':False]
['text':' the oplog.','line_number':232,'multiline':False]
['text':' Initialized at startup so it should never be missing.','line_number':245,'multiline':False]
['text':' The count is updated before successful commit of a write, so unclean shutdown can leave','line_number':278,'multiline':False]
['text':' the value incorrectly set to one.','line_number':279,'multiline':False]
['text':' We can safely set a count of one. We know that we only ever write one document, and the','line_number':296,'multiline':False]
['text':' success of findSingleton above confirms only one document exists in the collection.','line_number':297,'multiline':False]
['text':' Update the oplog pin so we don't delete oplog history past the oplogTruncateAfterPoint.','line_number':325,'multiline':False]
['text':' Set Timestamp::max() to nullify the pin, rather than pinning all oplog history with a','line_number':328,'multiline':False]
['text':' Timestamp::min().','line_number':329,'multiline':False]
['text':' If the oplogTruncateAfterPoint is manually reset via this function, then we need to clear the','line_number':333,'multiline':False]
['text':' cached last no-holes oplog entry. This is important so that','line_number':334,'multiline':False]
['text':' refreshOplogTruncateAfterPointIfPrimary always returns the latest oplog entry without','line_number':335,'multiline':False]
['text':' skipping it.','line_number':336,'multiline':False]
['text':' Fails if there is an error other than the collection being missing or being empty.','line_number':352,'multiline':False]
['text':' There is only one path to stepup and it is not called redundantly.','line_number':381,'multiline':False]
['text':' Stepdown clears the truncate point, after which the truncate point is set manually as','line_number':411,'multiline':False]
['text':' needed, so nothing should be done here -- else we might truncate something we should not.','line_number':412,'multiline':False]
['text':' Temporarily allow writes if kIgnoreConflicts is set on the recovery unit so the truncate','line_number':416,'multiline':False]
['text':' point can be updated. The kIgnoreConflicts setting only allows reads.','line_number':417,'multiline':False]
['text':' Exempt waiting for storage ticket acquisition in order to avoid starving upstream requests','line_number':425,'multiline':False]
['text':' waiting for durability. SERVER-60682 is an example with more pending prepared transactions','line_number':426,'multiline':False]
['text':' than storage tickets; the transaction coordinator could not persist the decision and had to','line_number':427,'multiline':False]
['text':' unnecessarily wait for prepared transactions to expire to make forward progress.','line_number':428,'multiline':False]
['text':' The locks necessary to write to the oplog truncate after point's collection and read from the','line_number':432,'multiline':False]
['text':' oplog collection must be taken up front so that the mutex can also be taken around both','line_number':433,'multiline':False]
['text':' operations without causing deadlocks.','line_number':434,'multiline':False]
['text':' Update the oplogTruncateAfterPoint to the storage engine's reported oplog timestamp with no','line_number':439,'multiline':False]
['text':' holes behind it in-memory (only, not on disk, despite the name).','line_number':440,'multiline':False]
['text':' Return the last durable no-holes oplog entry. Nothing has changed in the system yet.','line_number':445,'multiline':False]
['text':' Throw write interruption errors up to the caller so that durability attempts can be','line_number':448,'multiline':False]
['text':' retried.','line_number':449,'multiline':False]
['text':' The all_durable timestamp has not yet been set: there have been no oplog writes since','line_number':452,'multiline':False]
['text':' this server instance started up. In this case, we will return the current','line_number':453,'multiline':False]
['text':' oplogTruncateAfterPoint without updating it, since there's nothing to update.','line_number':454,'multiline':False]
['text':' A primary cannot have an unset oplogTruncateAfterPoint because it is initialized on','line_number':457,'multiline':False]
['text':' step-up.','line_number':458,'multiline':False]
['text':' Reset the snapshot so that it is ensured to see the latest oplog entries.','line_number':462,'multiline':False]
['text':' Fetch the oplog entry <= timestamp. all_durable may be set to a value between oplog entries.','line_number':465,'multiline':False]
['text':' We need an oplog entry in order to return term and wallclock time for an OpTimeAndWallTime','line_number':466,'multiline':False]
['text':' result.','line_number':467,'multiline':False]
['text':' The truncate point moves the Durable timestamp forward, so it should always exist in the','line_number':472,'multiline':False]
['text':' oplog.','line_number':473,'multiline':False]
['text':' Note: the oplogTruncateAfterPoint is written to disk and updated periodically with WT's','line_number':476,'multiline':False]
['text':' all_durable timestamp, which tracks the oplog no holes point. The oplog entry associated with','line_number':477,'multiline':False]
['text':' the no holes point is sent along to replication (the return value here) to update their','line_number':478,'multiline':False]
['text':' durable timestamp. Since the WT all_durable timestamp doesn't always match a particular oplog','line_number':479,'multiline':False]
['text':' entry (it can be momentarily between oplog entry timestamps), _lastNoHolesOplogTimestamp','line_number':480,'multiline':False]
['text':' tracks the oplog entry so as to ensure we send out all updates before desisting until new','line_number':481,'multiline':False]
['text':' operations occur.','line_number':482,'multiline':False]
['text':' Pass the _lastNoHolesOplogTimestamp timestamp down to the storage layer to prevent oplog','line_number':489,'multiline':False]
['text':' history lte to oplogTruncateAfterPoint from being entirely deleted. There should always be a','line_number':490,'multiline':False]
['text':' single oplog entry lte to the oplogTruncateAfterPoint. Otherwise there will not be a valid','line_number':491,'multiline':False]
['text':' oplog entry with which to update the caller.','line_number':492,'multiline':False]
['text':' namespace repl','line_number':558,'multiline':False]
['text':' namespace mongo','line_number':559,'multiline':False]
