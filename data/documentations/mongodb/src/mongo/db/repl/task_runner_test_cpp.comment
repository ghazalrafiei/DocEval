['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' IWYU pragma: no_include "cxxabi.h"','line_number':30,'multiline':False]
['text':' Null thread pool.','line_number':54,'multiline':False]
['text':' Joining thread pool before scheduling first task has no effect.','line_number':138,'multiline':False]
['text':' Joining thread pool before scheduling second task ensures that task runner releases','line_number':139,'multiline':False]
['text':' thread back to pool after disposing of operation context.','line_number':140,'multiline':False]
['text':' Wait for the test code to schedule the second task.','line_number':172,'multiline':False]
['text':' Wait for the test code to schedule the second task.','line_number':214,'multiline':False]
['text':' Throwing an exception from the first task should cancel','line_number':219,'multiline':False]
['text':' unscheduled tasks and make the task runner inactive.','line_number':220,'multiline':False]
['text':' When the second (canceled) task throws an exception, it should be ignored.','line_number':221,'multiline':False]
['text':' not reached.','line_number':224,'multiline':False]
['text':' Running this task causes the task runner to wait for another task that','line_number':253,'multiline':False]
['text':' is never scheduled.','line_number':254,'multiline':False]
['text':' Calling cancel() before schedule() has no effect.','line_number':263,'multiline':False]
['text':' The task should still be invoked with a successful status.','line_number':264,'multiline':False]
['text':' It is fine to call cancel() multiple times.','line_number':276,'multiline':False]
['text':' This status will not be OK if canceling the task runner','line_number':283,'multiline':False]
['text':' before scheduling the task results in the task being canceled.','line_number':284,'multiline':False]
['text':' "task1" should start running before we invoke join() the task runner.','line_number':295,'multiline':False]
['text':' Upon completion, "task1" requests the task runner to retain the operation context. This has','line_number':296,'multiline':False]
['text':' effect of keeping the task runner active.','line_number':297,'multiline':False]
['text':' "task2" should start running after we invoke join() the task runner.','line_number':305,'multiline':False]
['text':' Upon completion, "task2" requests the task runner to dispose the operation context. After the','line_number':306,'multiline':False]
['text':' operation context is destroyed, the task runner will go into an inactive state.','line_number':307,'multiline':False]
['text':' join() waits for "task1" and "task2" to complete execution.','line_number':318,'multiline':False]
['text':' This status should be OK because we ensured that the task','line_number':321,'multiline':False]
['text':' was scheduled and invoked before we called cancel().','line_number':322,'multiline':False]
['text':' Running this task causes the task runner to wait for another task that','line_number':334,'multiline':False]
['text':' is never scheduled.','line_number':335,'multiline':False]
['text':' This status will not be OK if canceling the task runner','line_number':357,'multiline':False]
['text':' before scheduling the task results in the task being canceled.','line_number':358,'multiline':False]
['text':' namespace','line_number':363,'multiline':False]
['text':' namespace mongo::repl','line_number':364,'multiline':False]
