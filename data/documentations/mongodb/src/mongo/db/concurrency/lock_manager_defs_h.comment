['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' IWYU pragma: keep','line_number':42,'multiline':False]
['text':'*
 * LockMode compatibility matrix.
 *
 * This matrix answers the question, "Is a lock request with mode 'Requested Mode' compatible with
 * an existing lock held in mode 'Granted Mode'?"
 *
 * | Requested Mode |                      Granted Mode                     |
 * |----------------|:------------:|:-------:|:--------:|:------:|:--------:|
 * |                |  MODE_NONE   | MODE_IS |  MODE_IX | MODE_S |  MODE_X  |
 * | MODE_IS        |      +       |    +    |     +    |    +   |          |
 * | MODE_IX        |      +       |    +    |     +    |        |          |
 * | MODE_S         |      +       |    +    |          |    +   |          |
 * | MODE_X         |      +       |         |          |        |          |
 ','line_number':55,'multiline':True]
['text':'* None ','line_number':70,'multiline':True]
['text':'* Intent shared ','line_number':72,'multiline':True]
['text':'* Intent exclusive ','line_number':74,'multiline':True]
['text':'* Shared ','line_number':76,'multiline':True]
['text':'* Exclusive ','line_number':78,'multiline':True]
['text':'*
     * Counts the lock modes. Used for array size allocations, etc. Always insert new lock modes
     * above this entry.
     ','line_number':81,'multiline':True]
['text':'*
 * Returns a human-readable name for the specified lock mode.
 ','line_number':88,'multiline':True]
['text':'*
 * Legacy lock mode names in parity for 2.6 reports.
 ','line_number':93,'multiline':True]
['text':'*
 * Mode A is covered by mode B if the set of conflicts for mode A is a subset of the set of
 * conflicts for mode B. For example S is covered by X. IS is covered by S. However, IX is not
 * covered by S or IS.
 ','line_number':98,'multiline':True]
['text':'*
 * Returns whether the passed in mode is S or IS. Used for validation checks.
 ','line_number':105,'multiline':True]
['text':'*
 * Return values for the locking functions of the lock manager.
 ','line_number':113,'multiline':True]
['text':'*
     * The lock request was granted and is now on the granted list for the specified resource.
     ','line_number':118,'multiline':True]
['text':'*
     * The lock request was not granted because of conflict. If this value is returned, the
     * request was placed on the conflict queue of the specified resource and a call to the
     * LockGrantNotification::notify callback should be expected with the resource whose lock
     * was requested.
     ','line_number':123,'multiline':True]
['text':'*
     * The lock request waited, but timed out before it could be granted. This value is never
     * returned by the LockManager methods here, but by the Locker class, which offers
     * capability to block while waiting for locks.
     ','line_number':131,'multiline':True]
['text':'*
     * This is used as an initializer value. Should never be returned.
     ','line_number':138,'multiline':True]
['text':'*
 * Hierarchy of resource types. The lock manager knows nothing about this hierarchy, it is
 * purely logical. Resources of different types will never conflict with each other.
 *
 * While the lock manager does not know or care about ordering, the general policy is that
 * resources are acquired in the order below. For example, one might first acquire a
 * RESOURCE_GLOBAL and then the desired RESOURCE_DATABASE, both using intent modes, and
 * finally a RESOURCE_COLLECTION in exclusive mode. When locking multiple resources of the
 * same type, the canonical order is by resourceId order.
 *
 * It is OK to lock resources out of order, but it is the users responsibility to ensure
 * ordering is consistent so deadlock cannot occur.
 ','line_number':145,'multiline':True]
['text':'*  Used for global exclusive operations ','line_number':161,'multiline':True]
['text':'* Encompasses resources belonging to a tenant, if in multi-tenant mode.','line_number':164,'multiline':True]
['text':'* Generic resources, used for multi-granularity locking, together with the above locks ','line_number':167,'multiline':True]
['text':'*
     * Resource DDL types used for multi-granularity locking on DDL operations.
     * These resources are not related to the storage hierarchy.
     ','line_number':172,'multiline':True]
['text':'*
     * Resource type used for locking general resources not related to the storage hierarchy. These
     * can't be created manually, use Lock::ResourceMutex::ResourceMutex() instead.
     ','line_number':179,'multiline':True]
['text':'* Counts the rest. Always insert new resource types above this entry. ','line_number':185,'multiline':True]
['text':'*
 * IDs for usages of RESOURCE_GLOBAL.
 ','line_number':189,'multiline':True]
['text':' The number of global resource ids. Always insert new ids above this entry.','line_number':197,'multiline':False]
['text':'*
 * Maps the resource id to a human-readable string.
 ','line_number':201,'multiline':True]
['text':'*
 * Maps the global resource id to a human-readable string.
 ','line_number':214,'multiline':True]
['text':' Ensure we do not add new types without updating the names array.','line_number':223,'multiline':False]
['text':' Ensure we do not add new global resource ids without updating the names array.','line_number':227,'multiline':False]
['text':'*
 * Returns a human-readable name for the specified resource type.
 ','line_number':231,'multiline':True]
['text':'*
 * Returns a human-readable name for the specified global resource.
 ','line_number':238,'multiline':True]
['text':'*
 * Uniquely identifies a lockable resource.
 ','line_number':245,'multiline':True]
['text':' We only use 4 bits for the resource type in the ResourceId hash','line_number':249,'multiline':False]
['text':' Resources of type database, collection, or tenant must never be passed as a raw string.','line_number':264,'multiline':False]
['text':' This defines the canonical locking order, first by type and then hash id','line_number':285,'multiline':False]
['text':'*
     * The top 'resourceTypeBits' bits of '_fullHash' represent the resource type,
     * while the remaining bits contain the bottom bits of the hashId. This avoids false
     * conflicts between resources of different types, which is necessary to prevent deadlocks.
     ','line_number':317,'multiline':True]
['text':' Treat the resource ids as 64-bit integers in release mode in order to ensure we do','line_number':335,'multiline':False]
['text':' not spend too much time doing comparisons for hashing.','line_number':336,'multiline':False]
['text':' Type to uniquely identify a given locker object','line_number':341,'multiline':False]
['text':' Hardcoded resource id for the oplog collection, which is special-cased both for resource','line_number':344,'multiline':False]
['text':' acquisition purposes and for statistics reporting.','line_number':345,'multiline':False]
['text':' Hardcoded resource id for admin db. This is to ensure direct writes to auth collections','line_number':348,'multiline':False]
['text':' are serialized (see SERVER-16092)','line_number':349,'multiline':False]
['text':' Global lock. Every server operation, which uses the Locker must acquire this lock at least','line_number':352,'multiline':False]
['text':' once. See comments in the header file (begin/endTransaction) for more information.','line_number':353,'multiline':False]
['text':' Hardcoded resource id for draining prepared transactions and avoiding a deadlock with global lock','line_number':356,'multiline':False]
['text':' acquisitions in strong mode. This lock is acquired before the RSTL and resourceIdGlobal. It is','line_number':357,'multiline':False]
['text':' acquired by operations processing transaction statements, and by operations acquiring the global','line_number':358,'multiline':False]
['text':' lock in non-intent mode; all other requests skip this acquisition. It is acquired in the same','line_number':359,'multiline':False]
['text':' mode as the requested global lock mode.','line_number':360,'multiline':False]
['text':' Hardcoded resource id for the ReplicationStateTransitionLock (RSTL). This lock is acquired in','line_number':363,'multiline':False]
['text':' mode X for any replication state transition and is acquired by all other reads and writes in mode','line_number':364,'multiline':False]
['text':' IX. This lock is acquired after the MultiDocumentTransactionsBarrier lock but before the','line_number':365,'multiline':False]
['text':' resourceIdGlobal.','line_number':366,'multiline':False]
['text':'*
 * Interface on which granted lock requests will be notified. See the contract for the notify
 * method for more information and also the LockManager::lock call.
 *
 * The default implementation of this method would simply block on an event until notify has
 * been invoked (see CondVarLockGrantNotification).
 *
 * Test implementations could just count the number of notifications and their outcome so that
 * they can validate locks are granted as desired and drive the test execution.
 ','line_number':369,'multiline':True]
['text':'*
     * This method is invoked at most once for each lock request and indicates the outcome of
     * the lock acquisition for the specified resource id.
     *
     * Cases where it won't be called are if a lock acquisition (be it in waiting or converting
     * state) is cancelled through a call to unlock.
     *
     * IMPORTANT: This callback runs under a spinlock for the lock manager, so the work done
     *            inside must be kept to a minimum and no locks or operations which may block
     *            should be run. Also, no methods which call back into the lock manager should
     *            be invoked from within this methods (LockManager is not reentrant).
     *
     * @resId ResourceId for which a lock operation was previously called.
     * @result Outcome of the lock operation.
     ','line_number':383,'multiline':True]
['text':'*
 * There is one of those entries per each request for a lock. They hang on a linked list off
 * the LockHead or off a PartitionedLockHead and also are in a map for each Locker. This
 * structure is not thread-safe.
 *
 * LockRequest are owned by the Locker class and it controls their lifetime. They should not
 * be deleted while on the LockManager though (see the contract for the lock/unlock methods).
 ','line_number':402,'multiline':True]
['text':' Counts the rest. Always insert new status types above this entry.','line_number':417,'multiline':False]
['text':'*
     * Used for initialization of a LockRequest, which might have been retrieved from cache.
     ','line_number':421,'multiline':True]
['text':' If the request cannot be granted right away, whether to put it at the front or at the end of','line_number':426,'multiline':False]
['text':' the queue. By default, requests are put at the back. If a request is requested to be put at','line_number':427,'multiline':False]
['text':' the front, this effectively bypasses fairness. Default is FALSE.','line_number':428,'multiline':False]
['text':'','line_number':429,'multiline':False]
['text':' Written at construction time by Locker','line_number':430,'multiline':False]
['text':' Read by LockManager on any thread','line_number':431,'multiline':False]
['text':' No synchronization','line_number':432,'multiline':False]
['text':' When this request is granted and as long as it is on the granted queue, the particular','line_number':435,'multiline':False]
['text':' resource's policy will be changed to "compatibleFirst". This means that even if there are','line_number':436,'multiline':False]
['text':' pending requests on the conflict queue, if a compatible request comes in it will be granted','line_number':437,'multiline':False]
['text':' immediately. This effectively turns off fairness.','line_number':438,'multiline':False]
['text':'','line_number':439,'multiline':False]
['text':' Written at construction time by Locker','line_number':440,'multiline':False]
['text':' Read by LockManager on any thread','line_number':441,'multiline':False]
['text':' No synchronization','line_number':442,'multiline':False]
['text':' When set, an attempt is made to execute this request using partitioned lockheads. This speeds','line_number':445,'multiline':False]
['text':' up the common case where all requested locking modes are compatible with each other, at the','line_number':446,'multiline':False]
['text':' cost of extra overhead for conflicting modes.','line_number':447,'multiline':False]
['text':'','line_number':448,'multiline':False]
['text':' Written at construction time by LockManager','line_number':449,'multiline':False]
['text':' Read by LockManager on any thread','line_number':450,'multiline':False]
['text':' No synchronization','line_number':451,'multiline':False]
['text':' The current status of this request. Always starts at STATUS_NEW.','line_number':454,'multiline':False]
['text':'','line_number':455,'multiline':False]
['text':' Written by LockManager on any thread','line_number':456,'multiline':False]
['text':' Read by LockManager on any thread','line_number':457,'multiline':False]
['text':' Protected by LockHead bucket's mutex','line_number':458,'multiline':False]
['text':' If this request is not granted, the mode which has been requested for this lock. If granted,','line_number':461,'multiline':False]
['text':' the mode in which it is currently granted.','line_number':462,'multiline':False]
['text':'','line_number':463,'multiline':False]
['text':' Written by LockManager on any thread','line_number':464,'multiline':False]
['text':' Read by LockManager on any thread','line_number':465,'multiline':False]
['text':' Protected by LockHead bucket's mutex','line_number':466,'multiline':False]
['text':' Read by Locker on Locker thread','line_number':467,'multiline':False]
['text':' It is safe for the Locker to read this without taking the bucket mutex provided that the','line_number':468,'multiline':False]
['text':' LockRequest status is not WAITING or CONVERTING.','line_number':469,'multiline':False]
['text':' This value is different from MODE_NONE only if a conversion is requested for a lock and that','line_number':472,'multiline':False]
['text':' conversion cannot be immediately granted.','line_number':473,'multiline':False]
['text':'','line_number':474,'multiline':False]
['text':' Written by LockManager on any thread','line_number':475,'multiline':False]
['text':' Read by LockManager on any thread','line_number':476,'multiline':False]
['text':' Protected by LockHead bucket's mutex','line_number':477,'multiline':False]
['text':' This unsigned represents the number of pending unlocks for this LockRequest. It is greater','line_number':480,'multiline':False]
['text':' than 0 when the LockRequest is participating in two-phase lock and unlock() is called on it.','line_number':481,'multiline':False]
['text':' It can be greater than 1 if this lock is participating in two-phase-lock and has been','line_number':482,'multiline':False]
['text':' converted to a different mode that also participates in two-phase-lock. unlock() may be','line_number':483,'multiline':False]
['text':' called multiple times on the same resourceId within the same WriteUnitOfWork in this case, so','line_number':484,'multiline':False]
['text':' the number of unlocks() to execute at the end of this WUOW is tracked with this unsigned.','line_number':485,'multiline':False]
['text':'','line_number':486,'multiline':False]
['text':' Written by Locker on Locker thread','line_number':487,'multiline':False]
['text':' Read by Locker on Locker thread','line_number':488,'multiline':False]
['text':' No synchronization','line_number':489,'multiline':False]
['text':' How many times has LockManager::lock been called for this request. Locks are released when','line_number':492,'multiline':False]
['text':' their recursive count drops to zero.','line_number':493,'multiline':False]
['text':'','line_number':494,'multiline':False]
['text':' Written by LockManager on Locker thread','line_number':495,'multiline':False]
['text':' Read by LockManager on Locker thread','line_number':496,'multiline':False]
['text':' Read by Locker on Locker thread','line_number':497,'multiline':False]
['text':' No synchronization','line_number':498,'multiline':False]
['text':' This is the Locker, which created this LockRequest. Pointer is not owned, just referenced.','line_number':501,'multiline':False]
['text':' Must outlive the LockRequest.','line_number':502,'multiline':False]
['text':'','line_number':503,'multiline':False]
['text':' Written at construction time by Locker','line_number':504,'multiline':False]
['text':' Read by LockManager on any thread','line_number':505,'multiline':False]
['text':' No synchronization','line_number':506,'multiline':False]
['text':' Notification to be invoked when the lock is granted. Pointer is not owned, just referenced.','line_number':509,'multiline':False]
['text':' If a request is in the WAITING or CONVERTING state, must live at least until','line_number':510,'multiline':False]
['text':' LockManager::unlock is cancelled or the notification has been invoked.','line_number':511,'multiline':False]
['text':'','line_number':512,'multiline':False]
['text':' Written at construction time by Locker','line_number':513,'multiline':False]
['text':' Read by LockManager','line_number':514,'multiline':False]
['text':' No synchronization','line_number':515,'multiline':False]
['text':' Pointer to the lock to which this request belongs, or null if this request has not yet been','line_number':518,'multiline':False]
['text':' assigned to a lock or if it belongs to the PartitionedLockHead for locker (in which case','line_number':519,'multiline':False]
['text':' partitionedLock must be set). The LockHead should be alive as long as there are LockRequests','line_number':520,'multiline':False]
['text':' on it, so it is safe to have this pointer hanging around.','line_number':521,'multiline':False]
['text':'','line_number':522,'multiline':False]
['text':' Written by LockManager on any thread','line_number':523,'multiline':False]
['text':' Read by LockManager on any thread','line_number':524,'multiline':False]
['text':' Protected by LockHead bucket's mutex','line_number':525,'multiline':False]
['text':' Pointer to the partitioned lock to which this request belongs, or null if it is not','line_number':528,'multiline':False]
['text':' partitioned. Only one of 'lock' and 'partitionedLock' is non-NULL, and a request can only','line_number':529,'multiline':False]
['text':' transition from 'partitionedLock' to 'lock', never the other way around.','line_number':530,'multiline':False]
['text':'','line_number':531,'multiline':False]
['text':' Written by LockManager on any thread','line_number':532,'multiline':False]
['text':' Read by LockManager on any thread','line_number':533,'multiline':False]
['text':' Protected by LockHead bucket's mutex','line_number':534,'multiline':False]
['text':' The linked list chain on which this request hangs off the owning lock head. The reason','line_number':537,'multiline':False]
['text':' intrusive linked list is used instead of the std::list class is to allow for entries to be','line_number':538,'multiline':False]
['text':' removed from the middle of the list in O(1) time, if they are known instead of having to','line_number':539,'multiline':False]
['text':' search for them and we cannot persist iterators, because the list can be modified while an','line_number':540,'multiline':False]
['text':' iterator is held.','line_number':541,'multiline':False]
['text':'','line_number':542,'multiline':False]
['text':' Written by LockManager on any thread','line_number':543,'multiline':False]
['text':' Read by LockManager on any thread','line_number':544,'multiline':False]
['text':' Protected by LockHead bucket's mutex','line_number':545,'multiline':False]
['text':'*
 * Type used to fetch lock info from the LockManager for debugging purposes.
 * Note that using a struct to fetch internal LockManager information is preferable than a BSONObj
 * to minimize the time the LockManager mutexes are hold.
 ','line_number':550,'multiline':True]
['text':'*
 * Returns a human readable status name for the specified LockRequest status.
 ','line_number':562,'multiline':True]
['text':' namespace mongo','line_number':567,'multiline':False]
