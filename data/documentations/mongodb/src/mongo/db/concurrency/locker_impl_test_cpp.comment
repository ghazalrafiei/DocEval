['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' IWYU pragma: keep','line_number':43,'multiline':False]
['text':' Try upgrading locker 1, which should block and timeout','line_number':167,'multiline':False]
['text':' MODE_S attempt.','line_number':190,'multiline':False]
['text':' MODE_X attempt.','line_number':195,'multiline':False]
['text':' Granted MODE_X lock, fail incoming MODE_S and MODE_X.','line_number':212,'multiline':False]
['text':' MODE_S attempt.','line_number':224,'multiline':False]
['text':' The timed out MODE_S attempt shouldn't be present in the map of lock requests because it','line_number':231,'multiline':False]
['text':' won't ever be granted.','line_number':232,'multiline':False]
['text':' MODE_X attempt.','line_number':236,'multiline':False]
['text':' The timed out MODE_X attempt shouldn't be present in the map of lock requests because it','line_number':243,'multiline':False]
['text':' won't ever be granted.','line_number':244,'multiline':False]
['text':'*
 * Test that saveLockerImpl works by examining the output.
 ','line_number':269,'multiline':True]
['text':' No lock requests made, no locks held.','line_number':277,'multiline':False]
['text':' Lock the global lock, but just once.','line_number':280,'multiline':False]
['text':' We've locked the global lock.  This should be reflected in the lockInfo.','line_number':283,'multiline':False]
['text':' Restore the lock(s) we had.','line_number':289,'multiline':False]
['text':'*
 * Test that saveLockerImpl can save and restore the RSTL.
 ','line_number':296,'multiline':True]
['text':' Acquire locks.','line_number':309,'multiline':False]
['text':' Save the lock state.','line_number':314,'multiline':False]
['text':' Check locks are unlocked.','line_number':319,'multiline':False]
['text':' Restore the lock(s) we had.','line_number':324,'multiline':False]
['text':' Check locks are re-locked.','line_number':327,'multiline':False]
['text':'*
 * Test that we don't unlock when we have the global lock more than once.
 ','line_number':336,'multiline':True]
['text':' No lock requests made, no locks held.','line_number':344,'multiline':False]
['text':' Lock the global lock.','line_number':347,'multiline':False]
['text':' This shouldn't actually unlock as we're in a nested scope.','line_number':351,'multiline':False]
['text':' We must unlockGlobal twice.','line_number':356,'multiline':False]
['text':'*
 * Tests that restoreLockerImpl works by locking a db and collection and saving + restoring.
 ','line_number':361,'multiline':True]
['text':' Lock some stuff.','line_number':377,'multiline':False]
['text':' Things shouldn't be locked anymore.','line_number':383,'multiline':False]
['text':' Restore lock state.','line_number':387,'multiline':False]
['text':' Make sure things were re-locked.','line_number':390,'multiline':False]
['text':' Lock some stuff.','line_number':411,'multiline':False]
['text':' Unlock them so that they will be pending to unlock.','line_number':415,'multiline':False]
['text':' Things shouldn't be locked anymore.','line_number':422,'multiline':False]
['text':' Destructor should succeed since the locker's state should be empty.','line_number':427,'multiline':False]
['text':' Lock some stuff.','line_number':444,'multiline':False]
['text':' Unlock them so that they will be pending to unlock.','line_number':448,'multiline':False]
['text':' Things shouldn't be locked anymore.','line_number':455,'multiline':False]
['text':' Restore lock state.','line_number':460,'multiline':False]
['text':' Make sure things were re-locked.','line_number':463,'multiline':False]
['text':' Lock some stuff.','line_number':492,'multiline':False]
['text':' Recursive global lock.','line_number':497,'multiline':False]
['text':' Unlock them so that they will be pending to unlock.','line_number':503,'multiline':False]
['text':' Things should still be locked.','line_number':516,'multiline':False]
['text':' The locker is no longer participating the two-phase locking.','line_number':525,'multiline':False]
['text':' Start a new WUOW with the same locker. Any new locks acquired in the new WUOW','line_number':529,'multiline':False]
['text':' should participate two-phase locking.','line_number':530,'multiline':False]
['text':' Grab new locks inside the new WUOW.','line_number':534,'multiline':False]
['text':' The new locks has been released.','line_number':567,'multiline':False]
['text':' Restore lock state.','line_number':570,'multiline':False]
['text':' Make sure things are still locked.','line_number':575,'multiline':False]
['text':' Snapshot transactions delay shared locks as well.','line_number':609,'multiline':False]
['text':' Lock some stuff in IS mode.','line_number':613,'multiline':False]
['text':' Unlock them.','line_number':617,'multiline':False]
['text':' Things shouldn't be locked anymore.','line_number':623,'multiline':False]
['text':' Restore lock state.','line_number':630,'multiline':False]
['text':' Snapshot transactions delay shared locks as well.','line_number':649,'multiline':False]
['text':' Nothing to yield.','line_number':654,'multiline':False]
['text':' Lock some stuff.','line_number':675,'multiline':False]
['text':' Recursively lock them again with a weaker mode.','line_number':679,'multiline':False]
['text':' Make sure locks are converted.','line_number':684,'multiline':False]
['text':' Unlock them so that they will be pending to unlock.','line_number':692,'multiline':False]
['text':' Make sure locks are still acquired in the correct mode.','line_number':696,'multiline':False]
['text':' Make sure unlocking converted locks decrements the locks' recursiveCount instead of','line_number':700,'multiline':False]
['text':' incrementing unlockPending.','line_number':701,'multiline':False]
['text':' Unlock again so unlockPending == recursiveCount.','line_number':709,'multiline':False]
['text':' Things shouldn't be locked anymore.','line_number':722,'multiline':False]
['text':' Restore lock state.','line_number':727,'multiline':False]
['text':' Make sure things were re-locked in the correct mode.','line_number':730,'multiline':False]
['text':' Make sure locks were coalesced after restore and are pending to unlock as before.','line_number':734,'multiline':False]
['text':' Make sure only Global and TestDB resources are locked.','line_number':759,'multiline':False]
['text':' Test that when setSharedLocksShouldTwoPhaseLock is true and we are in a WUOW, unlock on IS','line_number':771,'multiline':False]
['text':' and S locks are postponed until endWriteUnitOfWork() is called. Mode IX and X locks always','line_number':772,'multiline':False]
['text':' participate in two-phased locking, regardless of the setting.','line_number':773,'multiline':False]
['text':' Unlock on mode IX and X locks during a WUOW should always be postponed until','line_number':834,'multiline':False]
['text':' endWriteUnitOfWork() is called. Mode IS and S locks should unlock immediately.','line_number':835,'multiline':False]
['text':' Do a nested lock acquisition.','line_number':901,'multiline':False]
['text':' Set up locker2 to override lock requests' provided timeout if greater than 1000 milliseconds.','line_number':998,'multiline':False]
['text':' locker1 acquires FirstDB under an exclusive lock.','line_number':1004,'multiline':False]
['text':' locker2's attempt to acquire FirstDB with unlimited wait time should timeout after 1000','line_number':1008,'multiline':False]
['text':' milliseconds and throw because _maxLockRequestTimeout is set to 1000 milliseconds.','line_number':1009,'multiline':False]
['text':' locker2's attempt to acquire an uncontested lock should still succeed normally.','line_number':1014,'multiline':False]
['text':' Set up locker2 to immediately return if a lock is unavailable, regardless of supplied','line_number':1037,'multiline':False]
['text':' deadlines in the lock request.','line_number':1038,'multiline':False]
['text':' locker1 acquires FirstDB under an exclusive lock.','line_number':1044,'multiline':False]
['text':' locker2's attempt to acquire FirstDB with unlimited wait time should fail immediately and','line_number':1048,'multiline':False]
['text':' throw because _maxLockRequestTimeout was set to 0.','line_number':1049,'multiline':False]
['text':' locker2's attempt to acquire an uncontested lock should still succeed normally.','line_number':1054,'multiline':False]
['text':'*
 * Helper function to determine if 'lockerInfo' contains a lock with ResourceId 'resourceId' and
 * lock mode 'mode' within 'lockerInfo.locks'.
 ','line_number':1067,'multiline':True]
['text':' namespace','line_number':1081,'multiline':False]
['text':' Take an exclusive lock on the collection.','line_number':1092,'multiline':False]
['text':' Assert it shows up in the output of getLockerInfo().','line_number':1098,'multiline':False]
['text':' Take an exclusive lock on the collection.','line_number':1121,'multiline':False]
['text':' Now attempt to get conflicting locks.','line_number':1127,'multiline':False]
['text':' Assert the held locks show up in the output of getLockerInfo().','line_number':1133,'multiline':False]
['text':' Assert it reports that it is waiting for the collection lock.','line_number':1141,'multiline':False]
['text':' Make sure it no longer reports waiting once unlocked.','line_number':1144,'multiline':False]
['text':' Obtain a lock before any other ops have been pushed to the stack.','line_number':1176,'multiline':False]
['text':' Push another op to the stack and obtain a lock.','line_number':1182,'multiline':False]
['text':' Then push another op to the stack and obtain another lock.','line_number':1191,'multiline':False]
['text':' Reacquire lock pending unlock.','line_number':1226,'multiline':False]
['text':' Attempt to lock the resource with a mode that is covered by the existing mode.','line_number':1258,'multiline':False]
['text':' Convert lock pending unlock.','line_number':1291,'multiline':False]
['text':' Convert lock pending unlock.','line_number':1327,'multiline':False]
['text':' Unlock the lock conversion.','line_number':1333,'multiline':False]
['text':' Make sure we still hold X lock and unlock the weaker mode to decrement recursiveCount instead','line_number':1337,'multiline':False]
['text':' of incrementing unlockPending.','line_number':1338,'multiline':False]
['text':' By default, ticket acquisition is required.','line_number':1354,'multiline':False]
['text':' This test exercises the lock dumping code in ~LockerImpl in case locks are held on destruction.','line_number':1378,'multiline':False]
['text':' 'locker' destructor should invariant because locks are still held.','line_number':1395,'multiline':False]
['text':' No lock requests made, no locks held.','line_number':1405,'multiline':False]
['text':' Lock the global lock.','line_number':1409,'multiline':False]
['text':' Should invariant','line_number':1413,'multiline':False]
['text':' namespace mongo','line_number':1417,'multiline':False]
