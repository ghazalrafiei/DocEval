['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 * Parses a field of the form $[<identifier>] into <identifier>. 'field' must be of the form
 * $[<identifier>]. Returns a non-ok status if 'field' is in the first position in the path or the
 * array filter identifier does not have a corresponding filter in 'arrayFilters'. Adds the
 * identifier to 'foundIdentifiers'.
 ','line_number':47,'multiline':True]
['text':'*
 * Gets the child of 'element' named 'field', if it exists. Otherwise returns a non-ok element.
 ','line_number':83,'multiline':True]
['text':'*
 * Applies 'child' to the child of 'applyParams->element' named 'field' (which will create it, if it
 * does not exist). If 'applyParams->pathToCreate' is created, then 'applyParams->pathToCreate' is
 * moved to the end of 'applyParams->pathTaken', and 'applyParams->element' is advanced to the end
 * of 'applyParams->pathTaken'. Updates 'applyResult' based on whether 'child' was a noop or
 * affected indexes.
 ','line_number':98,'multiline':True]
['text':' A non-ok value for childElement will indicate that we need to append 'field' to the','line_number':113,'multiline':False]
['text':' 'pathToCreate' FieldRef.','line_number':114,'multiline':False]
['text':' We're already traversing a path with elements that don't exist yet, so we will definitely','line_number':118,'multiline':False]
['text':' need to append.','line_number':119,'multiline':False]
['text':' The path we've traversed so far already exists in our document, and 'childElement'','line_number':125,'multiline':False]
['text':' represents the Element indicated by the 'field' name or index, which we indicate by','line_number':126,'multiline':False]
['text':' updating the 'pathTaken' FieldRef.','line_number':127,'multiline':False]
['text':' We are traversing path components that do not exist in our document. Any update modifier','line_number':134,'multiline':False]
['text':' that creates new path components (i.e., any modifiers that return true for','line_number':135,'multiline':False]
['text':' allowCreation()) will need to create this component, so we append it to the','line_number':136,'multiline':False]
['text':' 'pathToCreate' FieldRef. If the component cannot be created, pathsupport::createPathAt()','line_number':137,'multiline':False]
['text':' will provide a sensible PathNotViable UserError.','line_number':138,'multiline':False]
['text':' Pop 'field' off of 'pathToCreate' or 'pathTaken'.','line_number':152,'multiline':False]
['text':' If the child is an internal node, it may have created 'pathToCreate' and moved 'pathToCreate'','line_number':159,'multiline':False]
['text':' to the end of 'pathTaken'. We should advance 'element' to the end of 'pathTaken'.','line_number':160,'multiline':False]
['text':' If the child is a leaf node, it may have created 'pathToCreate' without moving','line_number':169,'multiline':False]
['text':' 'pathToCreate' to the end of 'pathTaken'. We should move 'pathToCreate' to the end of','line_number':170,'multiline':False]
['text':' 'pathTaken' and advance 'element' to the end of 'pathTaken'.','line_number':171,'multiline':False]
['text':' Either the path was fully created or not created at all.','line_number':182,'multiline':False]
['text':' namespace','line_number':206,'multiline':False]
['text':' static','line_number':208,'multiline':False]
['text':' General case: Create a path in the tree according to the path specified in the field name','line_number':218,'multiline':False]
['text':' of the "modExpr" element.','line_number':219,'multiline':False]
['text':' Special case: For $rename modifiers, we add two nodes to the tree:','line_number':222,'multiline':False]
['text':' 1) a ConflictPlaceholderNode at the path specified in the field name of the "modExpr"','line_number':223,'multiline':False]
['text':'    element and','line_number':224,'multiline':False]
['text':' 2) a RenameNode at the path specified by the value of the "modExpr" element, which must','line_number':235,'multiline':False]
['text':'    be a string value.','line_number':236,'multiline':False]
['text':' Check that the path is updatable.','line_number':246,'multiline':False]
['text':' Check that there is at most one positional ($) part of the path and it is not in the first','line_number':252,'multiline':False]
['text':' position.','line_number':253,'multiline':False]
['text':' Construct and initialize the leaf node.','line_number':272,'multiline':False]
['text':' Create UpdateInternalNodes along the path.','line_number':280,'multiline':False]
['text':' Add the leaf node to the end of the path.','line_number':322,'multiline':False]
['text':' static','line_number':352,'multiline':False]
['text':' The "positional" field ("$" notation) lives outside of the _children map, so we merge it','line_number':360,'multiline':False]
['text':' separately.','line_number':361,'multiline':False]
['text':' In Clang-3.9, we can just return mergedNode directly, but in 3.7, we need a std::move','line_number':365,'multiline':False]
['text':' If this child has the same field name as the positional child, they must be merged and','line_number':419,'multiline':False]
['text':' applied.','line_number':420,'multiline':False]
['text':' Check if we have stored the result of merging the positional child with this child.','line_number':423,'multiline':False]
['text':' The full path to the merged field is required for error reporting. In order to','line_number':426,'multiline':False]
['text':' modify the 'pathTaken' FieldRef, we need a (mutable) copy of it.','line_number':427,'multiline':False]
['text':' If 'matchedField' is alphabetically before the current child, we should apply the','line_number':456,'multiline':False]
['text':' positional child now.','line_number':457,'multiline':False]
['text':' Apply the current child.','line_number':467,'multiline':False]
['text':' 'matchedField' is alphabetically after all children, so we apply it now.','line_number':471,'multiline':False]
['text':' namespace mongo','line_number':483,'multiline':False]
