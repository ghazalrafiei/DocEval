['text':'*
 *    Copyright (C) 2020-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' IWYU pragma: keep','line_number':53,'multiline':False]
['text':' This struct stores the tables we build from an object diff before applying it.','line_number':76,'multiline':False]
['text':' Types of modifications that can be done to a field.','line_number':78,'multiline':False]
['text':'*
     * Inserts to the table and throws if the key exists already, which would mean that the
     * diff is invalid.
     ','line_number':81,'multiline':True]
['text':' Map from field name to modification for that field. Not populated for insert only diffs.','line_number':90,'multiline':False]
['text':' Order in which new fields should be added to the pre image.','line_number':93,'multiline':False]
['text':' Diff only inserts fields, no deletes or updates','line_number':95,'multiline':False]
['text':' Merges the new damage with the previous one if possible, otherwise adds a new one.','line_number':152,'multiline':False]
['text':' If the previous damage is a delete, updates with the new sourceOffset.','line_number':163,'multiline':False]
['text':' Appends EOO byte to help with potential merging.','line_number':179,'multiline':False]
['text':' Appends the fieldname of the sub-document for potential merging.','line_number':191,'multiline':False]
['text':' Computes the damage vector and constructs the damage source from doc diffs.','line_number':198,'multiline':False]
['text':' The 'preImageRoot' is kept to calculate the offset of current (sub)document 'preImageSub' in the','line_number':199,'multiline':False]
['text':' root document. The diff for the current (sub)document is stored in the 'reader'. The 'damages'','line_number':200,'multiline':False]
['text':' and 'bufBuilder' are passed down to the recursive calls to build the damage vector and damage','line_number':201,'multiline':False]
['text':' source. The 'offsetRoot' is an extra offset in the root document to account for bytes changed by','line_number':202,'multiline':False]
['text':' updates made already.','line_number':203,'multiline':False]
['text':' Reserves four bytes for the total size. Stores the offset instead of the actual pointer in','line_number':214,'multiline':False]
['text':' case the buffer grows and invalidates the pointer. Will update the value at the end.','line_number':215,'multiline':False]
['text':' The start of 'preImageSub' with the offset from the updates made already.','line_number':218,'multiline':False]
['text':' The end of 'preImageSub' with the offset from the updates made already.','line_number':225,'multiline':False]
['text':' Inserts the field to the end.','line_number':228,'multiline':False]
['text':' Updates the bytes of total size.','line_number':234,'multiline':False]
['text':' The end of 'preImageSub' with the offset from the updates made already.','line_number':238,'multiline':False]
['text':' Appends EOO byte to help with potential merging.','line_number':241,'multiline':False]
['text':' Keeps track of what fields we already appended, so that we can insert the rest at the end.','line_number':247,'multiline':False]
['text':' The start of 'elt' with the offset from the updates made already.','line_number':252,'multiline':False]
['text':' Field is not modified.','line_number':256,'multiline':False]
['text':' Updates with the new BSONElement.','line_number':268,'multiline':False]
['text':' Deletes the pre-image version of the field. We'll add it at the end.','line_number':277,'multiline':False]
['text':' The end of 'preImageSub' with the offset from the updates made already.','line_number':311,'multiline':False]
['text':' Inserts the field to the end.','line_number':314,'multiline':False]
['text':' Updates the bytes of total size.','line_number':321,'multiline':False]
['text':' The end of 'preImageSub' with the offset from the updates made already.','line_number':325,'multiline':False]
['text':' The start of 'preImageValue' if existed otherwise the end of the array, with','line_number':350,'multiline':False]
['text':' the offset from the updates made already.','line_number':351,'multiline':False]
['text':' Updates with the new BSONElement except for the 'u' byte.','line_number':354,'multiline':False]
['text':' Skips the byte of 'u' and appends the data after the type byte.','line_number':360,'multiline':False]
['text':' Mutually recursive with computeDamageOnObject().','line_number':401,'multiline':False]
['text':' Each modification is an optional pair where the first component is the array index and','line_number':411,'multiline':False]
['text':' the second is the modification type.','line_number':412,'multiline':False]
['text':' Reserves four bytes for the total size. Stores the offset instead of the actual pointer in','line_number':415,'multiline':False]
['text':' case the buffer grows and invalidates the pointer. Will update the value at the end.','line_number':416,'multiline':False]
['text':' The start of 'arrayPreImage' with the offset from the updates made already.','line_number':419,'multiline':False]
['text':' Removes the remaining fields in 'arrayPreImage' if resizing to a shorter array.','line_number':439,'multiline':False]
['text':' The element 'preImageIt' points to with the offset from the updates made already.','line_number':441,'multiline':False]
['text':' The size of bytes from current element to the end of the array.','line_number':444,'multiline':False]
['text':' Deletes the rest of the array in the 'arrayPreImage'.','line_number':446,'multiline':False]
['text':' Deals with remaining fields in the diff if the pre image was too short.','line_number':451,'multiline':False]
['text':' This field is not mentioned in the diff so we pad the post image with null.','line_number':464,'multiline':False]
['text':' The end of 'arrayPreImage' with the offset from the updates made already.','line_number':466,'multiline':False]
['text':' Inserts the BSON type byte, index string, and terminating null byte to the end.','line_number':469,'multiline':False]
['text':' Updates the bytes of total size.','line_number':480,'multiline':False]
['text':' The end of 'arrayPreImage' with the offset from the updates made already.','line_number':484,'multiline':False]
['text':' First build some tables so we can quickly apply the diff. We shouldn't need to examine','line_number':500,'multiline':False]
['text':' the diff again once this is done.','line_number':501,'multiline':False]
['text':' Keep track of what fields we already appended, so that we can insert the rest at the end.','line_number':514,'multiline':False]
['text':' Field is not modified, so we append it as is.','line_number':520,'multiline':False]
['text':' Do not append anything.','line_number':529,'multiline':False]
['text':' Skip the pre-image version of the field. We'll add it at the end.','line_number':538,'multiline':False]
['text':' There's a type mismatch. The diff was expecting one type but the','line_number':554,'multiline':False]
['text':' pre image contains a value of a different type. This means we are','line_number':555,'multiline':False]
['text':' re-applying a diff.','line_number':556,'multiline':False]
['text':' There must be some future operation which changed the type of this','line_number':558,'multiline':False]
['text':' field from object/array to something else. So we set this field to','line_number':559,'multiline':False]
['text':' null and expect the future value to overwrite the value here.','line_number':560,'multiline':False]
['text':' Note: There's no need to update 'fieldsToSkipInserting' here, because a','line_number':565,'multiline':False]
['text':' field cannot appear in both the sub-diff and insert section.','line_number':566,'multiline':False]
['text':' Whether we have already determined whether indexes are affected for the base path; that','line_number':572,'multiline':False]
['text':' is, the path without any of the fields to insert below. This is useful for when multiple','line_number':573,'multiline':False]
['text':' of the fields to insert are not canonical index field components.','line_number':574,'multiline':False]
['text':' Insert remaining fields to the end.','line_number':577,'multiline':False]
['text':' If the path is empty, then the field names are being appended at the top level.','line_number':585,'multiline':False]
['text':' This means that they cannot represent indices of an array, so the 'canonical'','line_number':586,'multiline':False]
['text':' path check does not apply.','line_number':587,'multiline':False]
['text':' If we checked whether the update affects indexes for a path where the tail','line_number':592,'multiline':False]
['text':' element is not considered part of the 'canonicalized' path (as defined by','line_number':593,'multiline':False]
['text':' UpdateIndexData) then we've effectively checked whether updating the base','line_number':594,'multiline':False]
['text':' path affects indexes. This means we can skip future checks for paths that end','line_number':595,'multiline':False]
['text':' with a component that's not considered part of the canonicalized path.','line_number':596,'multiline':False]
['text':'*
     * Given an (optional) member of the pre image array and a modification, apply the modification
     * and add it to the post image array in 'builder'.
     ','line_number':606,'multiline':True]
['text':' The pre-image's array was shorter than we expected. This means some','line_number':622,'multiline':False]
['text':' future oplog entry will either re-write the value of this array index','line_number':623,'multiline':False]
['text':' (or some parent) so we append a null and move on.','line_number':624,'multiline':False]
['text':' The type does not match what we expected. This means some future oplog','line_number':642,'multiline':False]
['text':' entry will either re-write the value of this array index (or some','line_number':643,'multiline':False]
['text':' parent) so we append a null and move on.','line_number':644,'multiline':False]
['text':' Mutually recursive with applyDiffToObject().','line_number':651,'multiline':False]
['text':' Each modification is an optional pair where the first component is the array index and','line_number':657,'multiline':False]
['text':' the second is the modification type.','line_number':658,'multiline':False]
['text':' This index is not in the diff so we keep the value in the pre image.','line_number':671,'multiline':False]
['text':' Deal with remaining fields in the diff if the pre image was too short.','line_number':676,'multiline':False]
['text':' This field is not mentioned in the diff so we pad the post image with null.','line_number':684,'multiline':False]
['text':' namespace','line_number':694,'multiline':False]
['text':' Use size of pre + diff as an approximation for size needed for post object when the diff is','line_number':704,'multiline':False]
['text':' insert-only. This is an upper bound for the size needed to avoid re-allocations when applying','line_number':705,'multiline':False]
['text':' the diff.','line_number':706,'multiline':False]
['text':' The interface around reserving bytes is strange. You need to "claim" the reserved bytes for','line_number':708,'multiline':False]
['text':' it to take effect.','line_number':709,'multiline':False]
['text':' namespace mongo::doc_diff','line_number':726,'multiline':False]
