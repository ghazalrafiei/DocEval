['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 * Checks that no immutable paths were modified in the case where we are modifying an existing path
 * in the document.
 *
 * This check does not make assumptions about how 'element' was modified; it explicitly checks
 * immutable fields in 'element' to see if they differ from the 'original' value. Consider an
 * updating the document {a: {b: 1, c: 1}} with {$set: {a: {b: 1, d: 1}}} where 'a.b' is an
 * immutable path. Even though we've overwritten the immutable field, it has the same value, and the
 * update is allowed.
 *
 * 'element' should be the modified element. 'pathTaken' is the path to the modified element.
 * 'original' should be provided as the preimage of the whole document. We _do_ assume that we have
 * already checked the update is not a noop.
 ','line_number':56,'multiline':True]
['text':' If 'immutablePath' is a (strict or non-strict) prefix of 'pathTaken', and the update is','line_number':78,'multiline':False]
['text':' not a noop, then we have modified 'immutablePath', which is immutable.','line_number':79,'multiline':False]
['text':' If 'pathTaken' is a strict prefix of 'immutablePath', then we may have modified','line_number':87,'multiline':False]
['text':' 'immutablePath'. We already know that 'pathTaken' is not equal to 'immutablePath', or we','line_number':88,'multiline':False]
['text':' would have uasserted.','line_number':89,'multiline':False]
['text':' We are allowed to modify immutable paths that do not yet exist.','line_number':94,'multiline':False]
['text':'*
 * Checks that no immutable paths were modified in the case where we are modifying an existing path
 * in the document.
 *
 * Unlike checkImmutablePathsNotModifiedFromOriginal(), this function does not check the original
 * document. It always assumes that an update where 'pathTaken' is a prefix of any immutable path or
 * vice versa is modifying an immutable path. This assumption is valid when we already know that
 * 'pathTaken' is not a prefix of any immutable path or when the update is to a primitive value or
 * array. (Immutable paths cannot include array elements.)
 *
 * See the comment above checkImmutablePathNotModifiedFromOriginal() for an example where that
 * assumption does not apply.
 *
 * 'element' should be the modified element. 'pathTaken' is the path to the modified element. We
 * assume that we have already checked the update is not a noop.
 ','line_number':127,'multiline':True]
['text':' namespace','line_number':157,'multiline':False]
['text':' We have two different ways of checking for changes to immutable paths, depending on the style','line_number':180,'multiline':False]
['text':' of update. See the comments above checkImmutablePathsNotModifiedFromOriginal() and','line_number':181,'multiline':False]
['text':' checkImmutablePathsNotModified().','line_number':182,'multiline':False]
['text':' No path was created.','line_number':223,'multiline':False]
['text':' $set operations on non-viable paths are ignored when the update came from','line_number':244,'multiline':False]
['text':' replication. We do not error because idempotency requires that any other update','line_number':245,'multiline':False]
['text':' modifiers must still be applied. For example, consider applying the following updates','line_number':246,'multiline':False]
['text':' twice to an initially empty document:','line_number':247,'multiline':False]
['text':' {$set: {c: 0}}','line_number':248,'multiline':False]
['text':' {$set: {'a.b': 0, c: 1}}','line_number':249,'multiline':False]
['text':' {$set: {a: 0}}','line_number':250,'multiline':False]
['text':' Setting 'a.b' will fail the second time, but we must still set 'c'.','line_number':251,'multiline':False]
['text':' (There are modifiers besides $set that use this code path, but they are not used for','line_number':252,'multiline':False]
['text':' replication, so we are not concerned with their behavior when "fromOplogApplication"','line_number':253,'multiline':False]
['text':' is true.)','line_number':254,'multiline':False]
['text':' The previous uassertStatusOK should always throw.','line_number':260,'multiline':False]
['text':' If 'immutablePath' is a (strict or non-strict) prefix of 'pathTaken', then we are','line_number':279,'multiline':False]
['text':' modifying 'immutablePath'. For example, adding '_id.x' will illegally modify '_id'.','line_number':280,'multiline':False]
['text':' (Note that this behavior is subtly different from checkImmutablePathsNotModified(),','line_number':281,'multiline':False]
['text':' because we just created this element.)','line_number':282,'multiline':False]
['text':' Newly created paths consist only of objects.','line_number':297,'multiline':False]
['text':' If adding an element to an array, only mark the path to the array itself as modified.','line_number':313,'multiline':False]
['text':' This path is for modifiers like $pop or $pull that generally have no effect when applied','line_number':331,'multiline':False]
['text':' to a path that does not exist.','line_number':332,'multiline':False]
['text':' One exception: some of these modifiers still fail when the nonexistent path is','line_number':334,'multiline':False]
['text':' "non-viable," meaning it couldn't be created even if we intended to.','line_number':335,'multiline':False]
['text':' allowTopLevelDollarPrefixedFields ','line_number':376,'multiline':True]
['text':' isEmbeddedInIdField ','line_number':378,'multiline':True]
['text':' namespace mongo','line_number':398,'multiline':False]
