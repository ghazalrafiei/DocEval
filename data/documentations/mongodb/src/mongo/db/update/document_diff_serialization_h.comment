['text':'*
 *    Copyright (C) 2020-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' IWYU pragma: keep','line_number':55,'multiline':False]
['text':' This file contains classes for serializing document diffs to a format that can be stored in the','line_number':59,'multiline':False]
['text':' oplog. Any code/machinery which manipulates document diffs should do so through these classes.','line_number':60,'multiline':False]
['text':'*
 * Enum representing the type of a diff.
 ','line_number':66,'multiline':True]
['text':' Below are string constants used in the diff format.','line_number':71,'multiline':False]
['text':' 'l' for length.','line_number':77,'multiline':False]
['text':' Below are constants used for computation of Diff size. Note that the computed size is supposed to','line_number':80,'multiline':False]
['text':' be an approximate value.','line_number':81,'multiline':False]
['text':' Size of empty object(5) + kArrayHeader(1) + null terminator + type byte + bool size.','line_number':83,'multiline':False]
['text':'
 * The below classes are for reading diffs. When given an invalid/malformed diff they will uassert.
 ','line_number':86,'multiline':True]
['text':'*
     * Methods which return the next modification (if any) and advance the iterator.  Returns
     * boost::none if there are no remaining modifications.  Otherwise, returns a pair. The first
     * member of the pair is the index of the modification. The second part is the modification
     * itself.
     *
     * If the second part of the pair contains a BSONElement, it means there is an update at that
     * index.
     *
     * If the second part contains a DocumentDiffReader or ArrayDiffReader, it means there is a
     * subdiff at that index.
     ','line_number':97,'multiline':True]
['text':'*
     * Returns the size of the post image array.
     ','line_number':111,'multiline':True]
['text':'*
     * The below methods get the next type of modification (if any) and advance the iterator.
     ','line_number':129,'multiline':True]
['text':' namespace doc_diff','line_number':146,'multiline':False]
['text':'*
 * These are structs for a "diff tree" that is constructed while the update is applied. There are
 * two types of internal nodes: Document nodes and Array nodes. All other node types are always
 * leaves.
 *
 * When the update is complete, the diff tree is converted into a $v: 2 oplog entry.
 ','line_number':149,'multiline':True]
['text':'*
 * Base class to represents a node in the diff tree.
 ','line_number':158,'multiline':True]
['text':'*
 * This class represents insertion of a BSONElement or mutablebson Element. Note that
 * 'DocumentInsertionNode' also represent an insert for the cases where an object is created
 * implicitly.
 ','line_number':166,'multiline':True]
['text':'*
 * Structure to represent a field update node.
 ','line_number':181,'multiline':True]
['text':'*
 * Structure to represent a field delete node.
 ','line_number':194,'multiline':True]
['text':'*
 * Struct representing non-leaf node.
 ','line_number':203,'multiline':True]
['text':'*
     * Internal helper class for BSON size tracking of the diff to be generated.
     ','line_number':208,'multiline':True]
['text':' Type byte(1) + FieldName(1) + Null terminator(1) + empty BSON object size (5)','line_number':217,'multiline':False]
['text':' Returns an unowned pointer to the newly added child.','line_number':234,'multiline':False]
['text':'*
 *  Indicates a Document internal node which is already in the pre-image document.
 ','line_number':245,'multiline':True]
['text':' We store the raw pointer to each of the child node so that we don't have to look up in','line_number':297,'multiline':False]
['text':' 'children' map every time. Note that the field names of these modifications will reference','line_number':298,'multiline':False]
['text':' the field name stored in 'children'. The node objects also point to the value of 'children'','line_number':299,'multiline':False]
['text':' map, where they are owned.','line_number':300,'multiline':False]
['text':' We use absl::node_hash_map here for pointer stability on keys (field names) when a rehash','line_number':306,'multiline':False]
['text':' happens.','line_number':307,'multiline':False]
['text':'*
 *  Indicates that the document this node represents was created as part of the update.
 *
 * E.g. applying the update {$set: {"a.b.c": "foo"}} on document {} will create sub-documents
 * at paths "a" and "a.b".
 ','line_number':311,'multiline':True]
['text':' We store the raw pointer to each of the child node so that we don't have to look up in','line_number':345,'multiline':False]
['text':' 'children' map every time. Note that the field names of these inserts will reference','line_number':346,'multiline':False]
['text':' the field name stored in 'children'. The node objects also point to the value of 'children'','line_number':347,'multiline':False]
['text':' map, where they are owned.','line_number':348,'multiline':False]
['text':' We use absl::node_hash_map here for pointer stability on keys (field names) when a rehash','line_number':351,'multiline':False]
['text':' happens.','line_number':352,'multiline':False]
['text':'*
 * Class representing an array node.
 ','line_number':356,'multiline':True]
['text':' modification type ','line_number':364,'multiline':True]
['text':' Count the number of digits ','line_number':365,'multiline':True]
['text':' kResizeSectionFieldName ','line_number':391,'multiline':True]
['text':' size of value ','line_number':392,'multiline':True]
['text':' The ordering of this map is significant. We are expected to serialize array indexes in','line_number':407,'multiline':False]
['text':' numeric ascending order (as opposed to "stringified" order where "11" < "8").','line_number':408,'multiline':False]
['text':' namespace diff_tree','line_number':413,'multiline':False]
['text':' namespace mongo','line_number':414,'multiline':False]
