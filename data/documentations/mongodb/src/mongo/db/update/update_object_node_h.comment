['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 * An internal node in the prefix tree of update modifier expressions, representing updates to an
 * object. See comment in class definition of UpdateNode for more details.
 ','line_number':48,'multiline':True]
['text':'*
     * Parses 'modExpr' as an update modifier expression and merges with it with 'root'. Returns a
     * non-OK status if 'modExpr' is not a valid update modifier expression, if merging would
     * cause a conflict, or if there is an array filter identifier in 'modExpr' without a
     * corresponding filter in 'arrayFilters'. Returns true if the path of 'modExpr' contains a
     * positional $ element, e.g. 'a.$.b'. Any array filter identifiers are added to
     * 'foundIdentifiers'.
     ','line_number':55,'multiline':True]
['text':'*
     * Creates a new UpdateObjectNode by merging two input UpdateObjectNode objects and their
     * children. Each field that lives on one side of the merge but not the other (according to
     * field name) is cloned to the newly created UpdateObjectNode. Fields that exist on both sides
     * of the merge get merged recursively before being added to the resulting UpdateObjectNode.
     * This merge operation is a deep copy: the new UpdateObjectNode is a brand new tree that does
     * not contain any references to the objects in the original input trees.
     ','line_number':71,'multiline':True]
['text':'*
     * Gather all update operators in the subtree rooted from this into a BSONObj in the format of
     * the update command's update parameter.
     ','line_number':105,'multiline':True]
['text':' Object nodes have a positional child that must be accounted for.','line_number':119,'multiline':False]
['text':' When calling apply() causes us to merge an element of '_children' with '_positionalChild', we','line_number':138,'multiline':False]
['text':' store the result of the merge in case we need it in a future call to apply().','line_number':139,'multiline':False]
['text':' namespace mongo','line_number':143,'multiline':False]
