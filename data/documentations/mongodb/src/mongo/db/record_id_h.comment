['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 * The key that uniquely identifies a Record in a Collection or RecordStore.
 ','line_number':69,'multiline':True]
['text':' The alignas is necessary in order to comply with memory alignment. Internally we're using','line_number':73,'multiline':False]
['text':' 8-byte aligned data members (int64_t / ConstSharedBuffer) but as we're packing the structure','line_number':74,'multiline':False]
['text':' the compiler will set the alignment to 1 so we must correct its alignment information for','line_number':75,'multiline':False]
['text':' users of the class.','line_number':76,'multiline':False]
['text':' Class used for static assertions that can only happen when RecordId is completely defined.','line_number':78,'multiline':False]
['text':' This set of constants define the boundaries of the 'normal' id ranges for the int64_t format.','line_number':82,'multiline':False]
['text':' A RecordId binary string cannot be larger than this arbitrary size. RecordIds get written to','line_number':86,'multiline':False]
['text':' the key and the value in WiredTiger, so we should avoid large strings.','line_number':87,'multiline':False]
['text':'*
     * A RecordId that compares less than all int64_t RecordIds that represent documents in a
     * collection.
     ','line_number':90,'multiline':True]
['text':'*
     * A RecordId that compares greater than all int64_t RecordIds that represent documents in a
     * collection.
     ','line_number':98,'multiline':True]
['text':' Re-initialize the SharedBuffer to get the correct reference count.','line_number':120,'multiline':False]
['text':'*
     * Construct a RecordId that holds an int64_t. The raw value for RecordStore storage may be
     * retrieved using getLong().
     ','line_number':142,'multiline':True]
['text':'*
     * Construct a RecordId that holds a binary string. The raw value for RecordStore storage may be
     * retrieved using getStr().
     ','line_number':151,'multiline':True]
['text':'*
     * Construct a RecordId from two halves.
     ','line_number':175,'multiline':True]
['text':'* Tag for dispatching on null values ','line_number':180,'multiline':True]
['text':'*
     * Helper to dispatch based on the underlying type. In most cases the RecordId type will be
     * known in advance, but this may be used when the type is not known.
     ','line_number':183,'multiline':True]
['text':' Returns true if this RecordId is storing a long integer.','line_number':207,'multiline':False]
['text':' Returns true if this RecordId is storing a binary string.','line_number':212,'multiline':False]
['text':'*
     * Returns the raw value to be used as a key in a RecordStore. Requires that this RecordId was
     * constructed with a 64-bit integer value or null; invariants otherwise.
     ','line_number':217,'multiline':True]
['text':' In the the int64_t format, null can also be represented by '0'.','line_number':222,'multiline':False]
['text':'*
     * Returns the raw value to be used as a key in a RecordStore. Requires that this RecordId was
     * constructed with a binary string value, and invariants otherwise.
     ','line_number':231,'multiline':True]
['text':'*
     * Returns true if this RecordId is not suitable for storage in a RecordStore.
     ','line_number':245,'multiline':True]
['text':' In the the int64_t format, null can also be represented by '0'.','line_number':249,'multiline':False]
['text':'*
     * Returns whether the data for the RecordId is completely stored inline (within the class
     * memory allocation). The only cases where this won't be true is when the RecordId contains a
     * large key string that cannot be allocated inline completely.
     ','line_number':256,'multiline':True]
['text':'*
     * Valid RecordIds are the only ones which may be used to represent Records. The range of valid
     * RecordIds includes both "normal" ids that refer to user data, and "reserved" ids that are
     * used internally. All RecordIds outside of the valid range are sentinel values.
     ','line_number':265,'multiline':True]
['text':'*
     * Compares two RecordIds. Requires that both RecordIds are of the same "type" (long or string).
     * Null is always comparable and is less than every other RecordId format.
     ','line_number':277,'multiline':True]
['text':'*
     * Returns a string form of this RecordId, but in the cases where RecordId is either
     * Format::kSmallStr or Format::kBigStr this is a raw hex dump. For a human-readable string call
     * toStringHumanReadable().
     ','line_number':327,'multiline':True]
['text':'*
     * Returns a human-readable string form of this RecordId. (Call toString() if you prefer a hex
     * dump of string IDs.)
     ','line_number':339,'multiline':True]
['text':'*
     * Returns the total amount of memory used by this RecordId, including itself and any heap
     * buffers.
     ','line_number':364,'multiline':True]
['text':'*
     * Hash value for this RecordId. The hash implementation may be modified, and its behavior
     * may differ across platforms. Hash values should not be persisted.
     ','line_number':374,'multiline':True]
['text':'*
     * Formats this RecordId into a human-readable BSON object that may be passed around and
     * deserialized with deserializeToken().
     * Note: This is not to be used as a key to a RecordStore.
     ','line_number':384,'multiline':True]
['text':' Preserve the underlying format by using a different BSON type for each format.','line_number':390,'multiline':False]
['text':'*
     * Same as above but in a binary.
     ','line_number':398,'multiline':True]
['text':'*
     * Decode a token created by serializeToken().
     ','line_number':411,'multiline':True]
['text':'*
     * Decode a token created by serializeToken().
     ','line_number':429,'multiline':True]
['text':'*
     * This maximum size for 'small' strings was chosen as a good tradeoff between keeping the
     * RecordId struct lightweight to copy by value (32 bytes), but also making the struct large
     * enough to hold a wider variety of strings. Larger strings must be stored in the
     * heap, which requires an extra memory allocation and makes it more expensive to copy.
     ','line_number':449,'multiline':True]
['text':'/ members for Sorter','line_number':457,'multiline':False]
['text':' unused','line_number':458,'multiline':False]
['text':'*
     * Format specifies the in-memory representation of this RecordId. This does not represent any
     * durable storage format.
     ','line_number':476,'multiline':True]
['text':' Uninitialized and contains no value ','line_number':481,'multiline':True]
['text':'*
         * Stores an integer. Data is stored in '_data.longId.id'. The RecordId may only be accessed
         * using getLong().
         ','line_number':483,'multiline':True]
['text':'*
         * Stores a variable-length binary string less than or equal to kSmallStrMaxSize. Data is
         * stored in the InlineStr struct at '_data.inlineStr'. This RecordId may only be accessed
         * using getStr().
         ','line_number':488,'multiline':True]
['text':'*
         * Stores a variable-length binary string larger than kSmallStrMaxSize. The value is stored
         * in a SharedBuffer '_data.heapStr.buffer'.
         * This RecordId may only be accessed using getStr().
         ','line_number':494,'multiline':True]
['text':' In the usual case we would store the data as Format followed by a struct union of the','line_number':530,'multiline':False]
['text':' InlineString (size + array), HeapStr (ConstSharedBuffer), and LongId (int64_t). This however','line_number':531,'multiline':False]
['text':' leaves 7 bytes unused for pading if Format is 1 byte and 4 if it is 4 bytes (x86) due to data','line_number':532,'multiline':False]
['text':' alignment requirements of the union. To avoid this we manually perform memory padding in the','line_number':533,'multiline':False]
['text':' structs of the union coupled with packing the class so that all items align properly.','line_number':534,'multiline':False]
['text':' offset = 0, size = 1','line_number':535,'multiline':False]
['text':' All of this will work if and only if char size is 1 (std::byte) for the InlineString.','line_number':537,'multiline':False]
['text':' Offsets/padding will be computed in respect to the whole class by taking into account the','line_number':541,'multiline':False]
['text':' Format data member.','line_number':542,'multiline':False]
['text':' offset = 1 + 7, size = 8','line_number':548,'multiline':False]
['text':' Various assertions of RecordId that can only happen when the type is completely defined.','line_number':593,'multiline':False]
['text':' namespace details','line_number':598,'multiline':False]
['text':' namespace mongo','line_number':608,'multiline':False]
