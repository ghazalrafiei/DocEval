['text':'*
 *    Copyright (C) 2019-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' extractAndAttachPipelineStages ','line_number':123,'multiline':True]
['text':' We can instantiate AutoGetCollectionForRead but not find a collection at the provided','line_number':250,'multiline':False]
['text':' timestamp','line_number':251,'multiline':False]
['text':' Simulate using a DBDirectClient to test this behavior for user reads.','line_number':268,'multiline':False]
['text':' Don't call into the ReplicationCoordinator to update lastApplied because it is only a mock','line_number':281,'multiline':False]
['text':' class and does not update the correct state in the SnapshotManager.','line_number':282,'multiline':False]
['text':' Simulate using a DBDirectClient to test this behavior for user reads.','line_number':290,'multiline':False]
['text':' This test simulates a situation where we read from the last applied timestamp but that point','line_number':296,'multiline':False]
['text':' in time is earlier than the catalog change. We expect to reconstruct the state from that','line_number':297,'multiline':False]
['text':' point in time in order to read at last applied.','line_number':298,'multiline':False]
['text':' Note that when the collection was created, above, the system chooses a minimum snapshot time','line_number':305,'multiline':False]
['text':' for the collection.  If we now manually set our last applied time to something very early, we','line_number':306,'multiline':False]
['text':' will be guaranteed to hit the logic that triggers when the minimum snapshot time is greater','line_number':307,'multiline':False]
['text':' than the read-at time, since we default to reading at last-applied when in SECONDARY state.','line_number':308,'multiline':False]
['text':' Don't call into the ReplicationCoordinator to update lastApplied because it is only a mock','line_number':310,'multiline':False]
['text':' class and does not update the correct state in the SnapshotManager.','line_number':311,'multiline':False]
['text':' Simulate using a DBDirectClient to test this behavior for user reads.','line_number':317,'multiline':False]
['text':' We can perform the lock acquisition even though lastApplied is earlier than the minimum valid','line_number':320,'multiline':False]
['text':' time on the namespace.','line_number':321,'multiline':False]
['text':' This test simulates a situation where AutoGetCollectionForRead reads without a timestamp','line_number':328,'multiline':False]
['text':' even though lastApplied is not available.','line_number':329,'multiline':False]
['text':' Note that when the collection was created, above, the system chooses a minimum snapshot time','line_number':336,'multiline':False]
['text':' for the collection. Since last-applied isn't available, we default to read without a','line_number':337,'multiline':False]
['text':' timestamp.','line_number':338,'multiline':False]
['text':' Simulate using a DBDirectClient to test this behavior for user reads.','line_number':343,'multiline':False]
['text':' This test simulates a situation where AutoGetCollectionForRead reads at lastApplied on a','line_number':354,'multiline':False]
['text':' secondary.','line_number':355,'multiline':False]
['text':' Ensure the default ReadSource is used.','line_number':359,'multiline':False]
['text':' Don't call into the ReplicationCoordinator to update lastApplied because it is only a mock','line_number':363,'multiline':False]
['text':' class and does not update the correct state in the SnapshotManager.','line_number':364,'multiline':False]
['text':' Simulate using a DBDirectClient to test this behavior for user reads.','line_number':370,'multiline':False]
['text':' Use a tailable query on a capped collection because we can anticipate it automatically','line_number':381,'multiline':False]
['text':' yielding locks when it reaches the end of a capped collection.','line_number':382,'multiline':False]
['text':' Simulate using a DBDirectClient to test this behavior for user reads.','line_number':387,'multiline':False]
['text':' The collection scan should use the default ReadSource on a primary.','line_number':392,'multiline':False]
['text':' When the tailable query recovers from its yield, it should discover that the node is','line_number':396,'multiline':False]
['text':' secondary and change its read source.','line_number':397,'multiline':False]
['text':' After restoring, the collection scan should now be reading with kLastApplied, the default on','line_number':404,'multiline':False]
['text':' secondaries.','line_number':405,'multiline':False]
['text':' Use a tailable query on a capped collection because we can anticipate it automatically','line_number':414,'multiline':False]
['text':' yielding locks when it reaches the end of a capped collection.','line_number':415,'multiline':False]
['text':' Simulate using a DBDirectClient to test this behavior for user reads.','line_number':422,'multiline':False]
['text':' The collection scan should use the default ReadSource on a secondary.','line_number':427,'multiline':False]
['text':' When the tailable query recovers from its yield, it should discover that the node is primary','line_number':431,'multiline':False]
['text':' and change its ReadSource.','line_number':432,'multiline':False]
['text':' After restoring, the collection scan should now be reading with kUnset, the default on','line_number':439,'multiline':False]
['text':' primaries.','line_number':440,'multiline':False]
['text':' The AutoGetCollectionForRead changes the read source to be last applied.','line_number':457,'multiline':False]
['text':' The AutoGetCollectionForRead does not change the read source since we are not enforcing','line_number':474,'multiline':False]
['text':' constraints.','line_number':475,'multiline':False]
['text':' namespace','line_number':480,'multiline':False]
['text':' namespace mongo','line_number':481,'multiline':False]
