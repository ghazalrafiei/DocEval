['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 * This is a coordinator for all things index builds. Index builds can be externally affected,
 * notified, waited upon and aborted through this interface. Index build results are returned to
 * callers via Futures and Promises. The coordinator uses cross replica set index build state
 * to control index build progression.
 *
 * The IndexBuildsCoordinator is instantiated on the ServiceContext as a decoration, and is always
 * accessible via the ServiceContext. It owns an IndexBuildsManager that manages all MultiIndexBlock
 * index builder instances.
 ','line_number':95,'multiline':True]
['text':'*
     * Represents the set of different application modes used around building indexes that differ
     * from the default behaviour.
     ','line_number':107,'multiline':True]
['text':'*
     * Contains additional information required by 'startIndexBuild()'.
     ','line_number':113,'multiline':True]
['text':'*
     * Executes tasks that must be done prior to destruction of the instance.
     ','line_number':123,'multiline':True]
['text':'*
     * Stores a coordinator on the specified service context. May only be called once for the
     * lifetime of the service context.
     ','line_number':128,'multiline':True]
['text':'*
     * Retrieves the coordinator set on the service context. set() above must be called before any
     * get() calls.
     ','line_number':134,'multiline':True]
['text':'*
     * Returns Status::OK if there is enough available disk space to start an index build. Will
     * return OutOfDiskSpace otherwise, with the context string providing the details.
     ','line_number':141,'multiline':True]
['text':'*
     * Updates CurOp's 'op' type to 'command', the 'nss' field, and the 'opDescription' field with
     * 'createIndexes' command and index specs. Also ensures the timer is started. If provided,
     * 'curOpDesc' is used as the base description upon which to perform the updates. Otherwise, the
     * current 'opDescription' is used.
     ','line_number':147,'multiline':True]
['text':'*
     * Returns index names listed from the index specs list "specs".
     ','line_number':158,'multiline':True]
['text':'*
     * Returns true if an index creation error is safe to ignore.
     * Consolidates the checking for the multiple scenarios where we may create indexes.
     * - createIndexes command on the primary;
     * - during oplog application (both empty and non-empty collection cases); and
     * - single-phase index creation for internal collections.
     ','line_number':163,'multiline':True]
['text':'*
     * Sets up the in-memory and durable state of the index build. When successful, returns after
     * the index build has started and the first catalog write has been made, and if called on a
     * primary, when the startIndexBuild oplog entry has been written.
     *
     * A Future is returned that will complete when the index build commits or aborts.
     *
     * On a successful index build, calling Future::get(), or Future::getNoThrow(), returns index
     * catalog statistics.
     *
     * Returns an error status if there are any errors setting up the index build.
     ','line_number':173,'multiline':True]
['text':'*
     * Reconstructs the in-memory state of the index build. When successful, returns after the index
     * build has been resumed from the phase it left off in.
     *
     * A Future is returned that will complete when the index build commits or aborts.
     *
     * On a successful index build, calling Future::get(), or Future::getNoThrow(), returns index
     * catalog statistics.
     *
     * Returns an error status if there are any errors setting up the index build.
     ','line_number':194,'multiline':True]
['text':'*
     * Resumes and restarts index builds for recovery. Anything that fails to resume will be started
     * in a background thread. Each index build will wait for a replicated commit or abort, as in
     * steady-state.
     ','line_number':213,'multiline':True]
['text':'*
     * Runs the full index rebuild for recovery. This will only rebuild single-phase index builds.
     * Rebuilding an index in recovery mode verifies the BSON format of each document. Upon
     * discovery of corruption, if 'repair' is kYes, this function will remove any documents with
     * invalid BSON; otherwise, it will abort the server process.
     *
     * Returns the number of records and the size of the data iterated over, if successful.
     ','line_number':222,'multiline':True]
['text':'*
     * Apply a 'startIndexBuild' oplog entry. Returns when the index build thread has started and
     * performed the initial ready:false write. Throws if there were any errors building the index.
     ','line_number':237,'multiline':True]
['text':'*
     * Apply a 'commitIndexBuild' oplog entry. If no index build is found, starts an index build
     * with the provided information. In all cases, waits until the index build commits and the
     * thread exits. Throws if there were any errors building the index.
     ','line_number':245,'multiline':True]
['text':'*
     * Apply an 'abortIndexBuild' oplog entry. Waits until the index build aborts and the
     * thread exits. Throws if there were any errors aborting the index.
     ','line_number':252,'multiline':True]
['text':'*
     * Waits for all index builds to stop.
     *
     * This should only be called when certain the server will not start any new index builds --
     * i.e. after a call to setNewIndexBuildsBlocked -- and potentially after aborting all index
     * builds that can be aborted -- i.e. using abortAllIndexBuildsWithReason -- to avoid an
     * excesively long wait.
     ','line_number':258,'multiline':True]
['text':'*
     * Signals all of the index builds on the specified collection to abort and then waits until the
     * index builds are no longer running. Must identify the collection with a UUID and the caller
     * must continue to operate on the collection by UUID to protect against rename collection. The
     * provided 'reason' will be used in the error message that the index builders return to their
     * callers.
     *
     * Does not stop new index builds from starting. Caller must make that guarantee.
     *
     * Does not require holding locks.
     *
     * Returns the UUIDs of the index builds that were aborted or are already in the process of
     * being aborted by another caller.
     ','line_number':268,'multiline':True]
['text':'*
     * Signals all of the index builds on the specified 'db' to abort and then waits until the index
     * builds are no longer running. The provided 'reason' will be used in the error message that
     * the index builders return to their callers.
     *
     * Does not require holding locks.
     *
     * Does not stop new index builds from starting. Caller must make that guarantee.
     ','line_number':287,'multiline':True]
['text':'*
     * Signals all of the index builds belonging to the specified tenant to abort and then waits
     * until the index builds are no longer running. The provided 'reason' will be used in the
     * error message that the index builders return to their callers.
     *
     * Does not require holding locks.
     *
     * Does not stop new index builds from starting. Caller must make that guarantee.
     ','line_number':302,'multiline':True]
['text':'*
     * Signals all of the index builds to abort and then waits until the index builds are no longer
     * running. The provided 'reason' will be used in the error message that the index builders
     * return to their callers.
     *
     * Does not require holding locks.
     *
     * Does not stop new index builds from starting. Caller must make that guarantee.
     ','line_number':317,'multiline':True]
['text':'*
     * Signals all index builds to abort because there is not enough disk space. Returns when index
     * builds have been killed.
     *
     * Does not require holding locks.
     *
     * Does not stop new index builds from starting. Caller must make that guarantee.
     ','line_number':328,'multiline':True]
['text':'*
     * Aborts an index build by index build UUID. Returns when the index build thread exits.
     *
     * Returns true if the index build was aborted or the index build is already aborted.
     * Returns false if the index build does not exist or the index build is already in the process
     * of committing and cannot be aborted.
     ','line_number':340,'multiline':True]
['text':'*
     * Aborts an index build by its index name(s). This will only abort in-progress index builds if
     * all of the indexes are specified that a single builder is building together. When an
     * appropriate builder exists, this returns the build UUID of the index builder that will be
     * aborted.
     ','line_number':351,'multiline':True]
['text':'*
     * Signals all of the index builds to abort and then waits until the index builds are no longer
     * running. The provided 'reason' will be used in the error message that the index builders
     * return to their callers.
     *
     * Does not require holding locks.
     *
     * Does not stop new index builds from starting. If required, caller must make that guarantee
     * with a call to setNewIndexBuildsBlocked.
     ','line_number':362,'multiline':True]
['text':'*
     * Blocks or unblocks new index builds from starting. When blocking is enabled, new index builds
     * will not immediately start and instead wait until a call to unblock is made. Concurrent calls
     * to this function are not supported.
     ','line_number':374,'multiline':True]
['text':'*
     * Returns true if there is an index builder building the given index names on a collection.
     ','line_number':381,'multiline':True]
['text':'*
     * Returns number of index builds in process.
     *
     * Invoked when the node is processing a shutdown command, an admin command that is
     * used to shut down the server gracefully.
     ','line_number':388,'multiline':True]
['text':'*
     * Invoked when the node enters the primary state.
     * Unblocks index builds that have been waiting to commit/abort during the secondary state.
     ','line_number':396,'multiline':True]
['text':'*
     * Called during rollback to stop all active index builds. The state of these builds is distinct
     * from "aborted" because no abortIndexBuild is replicated and the current node will restart
     * these builds at the completion of rollback. Returns an IndexBuilds of stopped index builds.
     * Single-phase index builds are not stopped.
     ','line_number':402,'multiline':True]
['text':'*
     * Handles the 'voteAbortIndexBuild' command request.
     ','line_number':410,'multiline':True]
['text':'*
     * Handles the 'VoteCommitIndexBuild' command request.
     * Writes the host and port information of the replica set member that has voted to commit an
     * index build into config.system.indexBuilds collection.
     ','line_number':418,'multiline':True]
['text':'*
     * Sets a new commit quorum on an index build that manages 'indexNames' on collection 'nss'.
     * If the 'newCommitQuorum' is not satisfiable by the current replica set config, then the
     * previous commit quorum is kept and the UnsatisfiableCommitQuorum error code is returned.
     ','line_number':427,'multiline':True]
['text':'*
     * Returns true if there are no index builds in progress.
     ','line_number':437,'multiline':True]
['text':'*
     * Returns the number of index builds that are running on the specified database.
     ','line_number':442,'multiline':True]
['text':'*
     * Returns true if an index build is in progress on the specified collection.
     ','line_number':447,'multiline':True]
['text':'*
     * Returns true if an index build is in progress on the specified database.
     ','line_number':453,'multiline':True]
['text':'*
     * Uasserts if any index builds are in progress on any database.
     ','line_number':458,'multiline':True]
['text':'*
     * Uasserts if any index builds is in progress on the specified collection.
     ','line_number':463,'multiline':True]
['text':'*
     * Uasserts if any index builds is in progress on the specified database.
     ','line_number':468,'multiline':True]
['text':'*
     * Waits for all index builds on a specified collection to finish.
     ','line_number':473,'multiline':True]
['text':'*
     * Waits for all index builds on a specified database to finish.
     ','line_number':482,'multiline':True]
['text':'*
     * Waits until an index build completes. If there are no index builds in progress, returns
     * immediately.
     ','line_number':487,'multiline':True]
['text':'*
     * Appends the current state information of the index build to the builder.
     * Does nothing if build UUID does not refer to an active index build.
     ','line_number':494,'multiline':True]
['text':'*
     * Returns an Action for the DiskSpaceMonitor that kills all index builds when the disk space
     * drops below a certain threshold.
     ','line_number':500,'multiline':True]
['text':'','line_number':506,'multiline':False]
['text':' Helper functions for creating indexes that do not have to be managed by the','line_number':507,'multiline':False]
['text':' IndexBuildsCoordinator.','line_number':508,'multiline':False]
['text':'','line_number':509,'multiline':False]
['text':'*
     * Creates the specified index without yielding locks.
     * Assumes the caller has collection MODE_X lock.
     * Throws exception on error.
     ','line_number':511,'multiline':True]
['text':'*
     * Creates the specified indexes on an empty collection without yielding locks.
     * Assumes we are enclosed in a WriteUnitOfWork and the caller has exclusive access to the
     * collection. For two phase index builds, writes both startIndexBuild and commitIndexBuild
     * oplog entries on success. No two phase index build oplog entries, including abortIndexBuild,
     * will be written on failure. Throws exception on error.
     ','line_number':522,'multiline':True]
['text':'*
     * Helper function that adds collation defaults to 'indexSpecs', as well as filtering out
     * existing indexes (ready or building) and checking uniqueness constraints are compatible with
     * sharding.
     *
     * Produces final specs to use for an index build, if the result is non-empty.
     *
     * This function throws on error. Expects caller to have exclusive access to `collection`.
     ','line_number':538,'multiline':True]
['text':'*
     * Returns total number of indexes in collection, including unfinished/in-progress indexes.
     *
     * Used to set statistics on index build results.
     *
     * Expects a lock to be held by the caller, so that 'collection' is safe to use.
     ','line_number':552,'multiline':True]
['text':'*
     * Sets up the in-memory and durable state of the index build.
     *
     * This function should only be called when in recovery mode, because the index tables are
     * recreated.
     ','line_number':608,'multiline':True]
['text':'*
     * Removes the in-memory and durable state of the passed in indexes in preparation of rebuilding
     * them for repair.
     *
     * This function should only be called when in recovery mode.
     ','line_number':620,'multiline':True]
['text':'*
     * Acquire the collection MODE_X lock (and other locks up the hierarchy) as usual, with a
     * timeout. On timeout, all locks are released. If 'retry' is true, keeps retrying until
     * successful acquisition, and the returned StatusWith will always be OK and contain the locks.
     * If false, it returns with the error after a single try. The timeout is intentionally low to
     * avoid stalling replication state transitions for too long.
     *
     * Taking a collection exclusive lock from an operation which is not killed by step down can
     * cause a 3-way deadlock with prepared transactions, which hold MODE_IX locks, and the step
     * down thread trying to acquire the RSTL in MODE_X.
     *
     * 1. Prepared transaction (Holds Coll MODE_IX)
     * 2. Unkillable index builder (Holds RSTL MODE_IX, Blocked Coll MODE_X)
     * 3. Step down thread (Blocked on RSTL MODE_X)
     *
     * If we don't time out all locks in the hierarchy, there is potential for a 4-way deadlock:
     *
     * 1. Prepared transaction (Holds Coll MODE_IX)
     * 2. Unkillable index builder (Holds RSTL MODE_IX, Enqueues Coll MODE_X)
     * 3. Regular op (not killed by stepdown) (Holds RSTL MODE_IX, Enqueues Coll MODE_IS)
     * 4. Step down thread (Blocked on RSTL MODE_X due to stepdown not killing the op at 3 which
     *    holds the global lock in MODE_IS)
     *
     * See SERVER-44722, SERVER-42621, SERVER-71191 and SERVER-78662.
     *
     * TODO(SERVER-75288): revert SERVER-78662.
     ','line_number':645,'multiline':True]
['text':'*
     * Sets up the in-memory state of the index build. Validates index specs and filters out
     * existing indexes from the list of specs.
     *
     * Helper function for startIndexBuild. If the returned boost::optional is set, then the task
     * does not require scheduling and can be immediately returned to the caller of startIndexBuild.
     *
     * Returns an error status if there are any errors registering the index build.
     ','line_number':675,'multiline':True]
['text':'*
     * Sets up the durable state of the index build.
     *
     * Returns an error status if there are any errors setting up the index build.
     ','line_number':692,'multiline':True]
['text':'*
     * Acquires locks and sets up index build. Throws on error.
     * Returns PostSetupAction which indicates whether to proceed to _runIndexBuild() or complete
     * the index build early (because there is no further work to be done).
     ','line_number':702,'multiline':True]
['text':'*
     * Sets up the in-memory and durable state of the index build for two-phase recovery.
     *
     * Helper function for startIndexBuild during the two-phase index build recovery process.
     ','line_number':713,'multiline':True]
['text':'*
     * Reconstructs the in-memory state of the index build so that it can be resumed from the phase
     * it was in when the node cleanly shut down.
     ','line_number':723,'multiline':True]
['text':'*
     * Runs the index build on the caller thread. Handles unregistering the index build and setting
     * the index build's Promise with the outcome of the index build.
     * 'IndexBuildOptios::replSetAndNotPrimary' is determined at the start of the index build.
     ','line_number':734,'multiline':True]
['text':'*
     * Acquires locks and runs index build. Throws on error.
     * 'IndexBuildOptios::replSetAndNotPrimary' is determined at the start of the index build.
     ','line_number':744,'multiline':True]
['text':'*
     * Resumes the index build from the phase that it was in when the node cleanly shut down. By the
     * time this function is called, the in-memory state of the index build should already have been
     * reconstructed.
     ','line_number':753,'multiline':True]
['text':'*
     * Cleans up the index build after a failure. If a shutdown happens during clean-up, defaults to
     * shutdown abort behaviour.
     ','line_number':763,'multiline':True]
['text':'*
     * Cleans up a single-phase index build after a failure, only if non-shutdown related. This
     * allows handling shutdown errors during the clean-up itself, in _cleanUpAfterFailure.
     ','line_number':772,'multiline':True]
['text':'*
     * Cleans up a two-phase index build after a failure, only if non-shutdown related. This allows
     * handling shutdown errors during the clean-up itself, in _cleanUpAfterFailure.
     ','line_number':781,'multiline':True]
['text':'*
     * Performs last steps of aborting an index build.
     ','line_number':790,'multiline':True]
['text':'*
     * Waits for the last optime before the interceptors were installed on the node to be majority
     * committed and sets that the collection scan for the index build should use a majority read
     * cursor. If no such optime was recorded, it will do nothing.
     ','line_number':808,'multiline':True]
['text':'*
     * Modularizes the _indexBuildsManager calls part of _runIndexBuildInner. Throws on error.
     ','line_number':816,'multiline':True]
['text':'*
     * First phase is the collection scan and insertion of the keys into the sorter.
     * Second phase is extracting the sorted keys and writing them into the new index table.
     ','line_number':823,'multiline':True]
['text':'*
     * Performs the second phase of the index build, for use when resuming from the second phase.
     ','line_number':831,'multiline':True]
['text':'*
     * Third phase is catching up on all the writes that occurred during the first two phases.
     ','line_number':839,'multiline':True]
['text':'*
     * Reads the commit ready members list for index build UUID in 'replState' from
     * "config.system.indexBuilds" collection. And, signals the index builder thread on primary to
     * commit the index build if the number of voters have satisfied the commit quorum for that
     * index build. Sets the ReplIndexBuildState::waitForNextAction promise value to be
     * IndexBuildAction::kCommitQuorumSatisfied.
     *
     * Returns true when the index build has been signalled, false otherwise.
     ','line_number':848,'multiline':True]
['text':'*
     * Attempt to signal the index build to commit and advance the index build to the
     * kApplyCommitOplogEntry state. Returns true if successful and false if the attempt was
     * unnecessful and the caller should retry.
     ','line_number':860,'multiline':True]
['text':'*
     * Skips the voting process and directly signal primary to commit index build if
     * commit quorum is not enabled.
     ','line_number':866,'multiline':True]
['text':'*
     * Signals the primary to abort the index build by sending "voteAbortIndexBuild" command
     * request to it with write concern 'majority', then waits for that command's response. The
     * command gets retried if failure is due to replication state transition. Finally, it waits for
     * the index build to be externally aborted.
     ','line_number':873,'multiline':True]
['text':'*
     * Signals the primary to commit the index build by sending "voteCommitIndexBuild" command
     * request to it with write concern 'majority', then waits for that command's response. And,
     * command gets retried on error. This function gets called after the first draining phase of
     * index build.
     ','line_number':882,'multiline':True]
['text':'*
     * Drains the side-writes table periodically while waiting for the IndexBuildAction to be ready.
     ','line_number':891,'multiline':True]
['text':'*
     * Both primary and secondaries will wait on 'ReplIndexBuildState::waitForNextAction' future for
     * commit or abort index build signal.
     * On primary:
     *   - Commit signal can be sent either by voteCommitIndexBuild command or stepup.
     *   - Abort signal can be sent either by createIndexes command thread on user interruption or
     *     drop indexes/databases/collection commands.
     * On secondaries:
     *   - Commit signal can be sent only by oplog applier.
     *   - Abort signal on secondaries can be sent by oplog applier, bgSync on rollback.
     *
     * On completion, this function will commit the index build.
     ','line_number':897,'multiline':True]
['text':'*
     * Third phase is catching up on all the writes that occurred during the first two phases.
     * Accepts a commit timestamp for the index, which could be null. See
     * _waitForNextIndexBuildAction() comments. This timestamp is used only for committing the
     * index, which sets the ready flag to true, to the catalog; it is not used for the catch-up
     * writes during the final drain phase.
     *
     * This operation released the RSTL temporarily to acquire the collection X lock to prevent
     * deadlocks. It must reacquire the RSTL to commit, but it's possible for the node's state to
     * have changed in that period of time. If the replication state has changed or the lock
     * acquisition times out, a non-success CommitResult will be returned and the caller must retry.
     *
     * Returns a CommitResult that indicates whether or not the commit was successful.
     ','line_number':915,'multiline':True]
['text':'* The index build was able to commit successfully. ','line_number':930,'multiline':True]
['text':'* After reacquiring the RSTL to commit, this node was no longer primary. The caller must
           reset and wait for the next IndexBuildAction again.  ','line_number':932,'multiline':True]
['text':'* Reacquiring the RSTL timed out, indicating that conflicting state transition was in
           progress. The caller must try again. ','line_number':935,'multiline':True]
['text':'*
     * Function to be run in the asynchronous task launched onStepUp to check if there are any index
     * builds that can be aborted because it has skipped records.
     ','line_number':945,'multiline':True]
['text':'*
     * Runs the index build.
     * Rebuilding an index in recovery mode verifies each document to ensure that it is a valid
     * BSON object. If repair is kYes, it will remove any documents with invalid BSON.
     *
     * Returns the number of records and the size of the data iterated over, if successful.
     ','line_number':951,'multiline':True]
['text':'*
     * Looks up active index build by UUID. Returns NoSuchKey if the build does not exist.
     ','line_number':964,'multiline':True]
['text':'*
     * Returns a list of index builds matching the criteria 'indexBuildFilter'.
     * Requires caller to lock '_mutex'.
     ','line_number':969,'multiline':True]
['text':' Handles actually building the indexes.','line_number':975,'multiline':False]
['text':' Maintains data structures relating to activeIndexBuilds. Thread safe, unless a specific','line_number':978,'multiline':False]
['text':' function specifies otherwise.','line_number':979,'multiline':False]
['text':' The thread spawned during step-up to verify the builds.','line_number':982,'multiline':False]
['text':' Manages _newIndexBuildsBlocked.','line_number':985,'multiline':False]
['text':' Condition signalled to indicate new index builds are unblocked.','line_number':988,'multiline':False]
['text':' Protected by _newIndexBuildsBlockedMutex.','line_number':990,'multiline':False]
['text':' Reason for blocking new index builds.','line_number':992,'multiline':False]
['text':' These fail points are used to control index build progress. Declared here to be shared','line_number':996,'multiline':False]
['text':' temporarily between createIndexes command and IndexBuildsCoordinator.','line_number':997,'multiline':False]
['text':' namespace mongo','line_number':1002,'multiline':False]
