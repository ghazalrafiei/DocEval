['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 * Tracks metrics for a single multi-document transaction.
 *
 * For all timing related stats, a TickSource with at least microsecond resolution must be used.
 ','line_number':54,'multiline':True]
['text':'*
     * Stores information about the last client to run a transaction operation.
     ','line_number':61,'multiline':True]
['text':'*
     * Sets the transaction's start time, only if it hasn't already been set.
     *
     * This method takes two sources of input for the current time. The 'curTick' argument should be
     * the current time as measured by a TickSource, which is a high precision interface for
     * measuring the passage of time that should provide at least microsecond resolution. The given
     * 'curWallClockTime' need only be a millisecond resolution time point that serves as a close
     * approximation to the true start time. This millisecond resolution time point is not used for
     * measuring transaction durations. The given tick value, however, is.
     *
     * This method must only be called once.
     ','line_number':87,'multiline':True]
['text':'*
     * If the transaction is currently in progress, this method returns the duration
     * the transaction has been running for in microseconds, given the current time value.
     *
     * For a completed transaction, this method returns the total duration of the
     * transaction in microseconds.
     *
     * This method cannot be called until setStartTime() has been called.
     ','line_number':101,'multiline':True]
['text':'*
     * If the transaction is currently in progress, this method returns the duration
     * the transaction has been in the prepared state for in microseconds, given the
     * current time value.
     *
     * For a completed transaction, this method returns the total duration the transaction
     * has been in the prepared state in microseconds.
     *
     * This method cannot be called until setStartTime() and setPreparedStartTime() have been
     * called.
     ','line_number':112,'multiline':True]
['text':'*
     * Sets the time at which a transaction enters the prepared state.
     *
     * This method cannot be called until setStartTime() has been called.
     ','line_number':125,'multiline':True]
['text':'*
     * Sets the transaction's end time, only if the start time has already been set.
     *
     * This method cannot be called until setStartTime() has been called.
     ','line_number':132,'multiline':True]
['text':'*
     * Returns the total active time of the transaction, given the current time value. A transaction
     * is active when there is a running operation that is part of the transaction.
     ','line_number':139,'multiline':True]
['text':'*
     * Returns the total inactive time of the transaction, given the current time value. A
     * transaction is inactive when it is idly waiting for a new operation to occur.
     ','line_number':145,'multiline':True]
['text':'*
     * Marks the transaction as active and sets the start of the transaction's active time.
     *
     * This method cannot be called if the transaction is currently active. A call to setActive()
     * must be followed by a call to setInactive() before calling setActive() again.
     ','line_number':151,'multiline':True]
['text':'*
     * Marks the transaction as inactive and sets the total active time of the transaction. The
     * total active time will only be set if the transaction was active prior to this call.
     *
     * This method cannot be called if the transaction is currently not active.
     ','line_number':159,'multiline':True]
['text':'*
     * Returns whether or not the transaction is currently active.
     ','line_number':167,'multiline':True]
['text':'*
     * Returns whether these stats are for a multi-document transaction.
     ','line_number':174,'multiline':True]
['text':'*
     * Returns whether or not the transaction is currently prepared.
     ','line_number':181,'multiline':True]
['text':'*
     * Returns the OpDebug object stored in this SingleTransactionStats instance.
     ','line_number':188,'multiline':True]
['text':'*
     * Returns the LastClientInfo object stored in this SingleTransactionStats instance.
     ','line_number':198,'multiline':True]
['text':'*
     * Updates the LastClientInfo object stored in this SingleTransactionStats instance with the
     * given Client's information.
     ','line_number':205,'multiline':True]
['text':'*
     * Set the autoCommit field.  If this field is unset, this is not a transaction but a
     * retryable write and other values will not be meaningful.
     ','line_number':213,'multiline':True]
['text':'*
     * Set the transaction expiration date.
     ','line_number':221,'multiline':True]
['text':'*
     * Set the transaction storage read timestamp.
     ','line_number':228,'multiline':True]
['text':'*
     * Append the stats to the builder.
     ','line_number':239,'multiline':True]
['text':' The struct containing the transaction number and transaction retry counter.','line_number':248,'multiline':False]
['text':' Unset for retryable write, 'false' for multi-document transaction.  Value 'true' is','line_number':251,'multiline':False]
['text':' for future use.','line_number':252,'multiline':False]
['text':' The start time of the transaction in millisecond resolution. Used only for diagnostics','line_number':255,'multiline':False]
['text':' reporting. Not used for measuring transaction durations.','line_number':256,'multiline':False]
['text':' The start time of the transaction. Note that tick values should only ever be used to measure','line_number':259,'multiline':False]
['text':' distance from other tick values, not for reporting absolute wall clock time.','line_number':260,'multiline':False]
['text':' The end time of the transaction.','line_number':263,'multiline':False]
['text':' The total amount of active time spent by the transaction.','line_number':266,'multiline':False]
['text':' The time at which the transaction was last marked as active. The transaction is considered','line_number':269,'multiline':False]
['text':' active if this value is not equal to 0.','line_number':270,'multiline':False]
['text':' The expiration date of the transaction.','line_number':273,'multiline':False]
['text':' The storage read timestamp of the transaction.','line_number':276,'multiline':False]
['text':' Tracks and accumulates stats from all operations that run inside the transaction.','line_number':279,'multiline':False]
['text':' Holds information about the last client to run a transaction operation.','line_number':282,'multiline':False]
['text':' The time at which a transaction becomes prepared. It is possible for _preparedStartTime to','line_number':285,'multiline':False]
['text':' not be set in a transaction that is in state kPrepared if an exception is thrown after the','line_number':286,'multiline':False]
['text':' transaction transitions to the prepared state but before setPreparedStartTime is called.','line_number':287,'multiline':False]
['text':' namespace mongo','line_number':291,'multiline':False]
