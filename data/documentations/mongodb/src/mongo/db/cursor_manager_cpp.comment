['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' IWYU pragma: no_include "boost/align/detail/aligned_alloc_posix.hpp"','line_number':35,'multiline':False]
['text':' IWYU pragma: keep','line_number':45,'multiline':False]
['text':' namespace','line_number':87,'multiline':False]
['text':' Callers must ensure that no cursors are in use.','line_number':127,'multiline':False]
['text':' Advance the iterator first since erasing from the lockedPartition will','line_number':152,'multiline':False]
['text':' invalidate any references to it.','line_number':153,'multiline':False]
['text':' Be careful not to dispose of cursors while holding the partition lock.','line_number':162,'multiline':False]
['text':' Lock and inspect one partition at a time in order to avoid contention. It is acceptable for','line_number':176,'multiline':False]
['text':' the output not to include info about cursors opened/closed while iterating.','line_number':177,'multiline':False]
['text':' This cursor was killed while it was idle.','line_number':207,'multiline':False]
['text':' Pass along the original queryHash and planCacheKey for slow query logging.','line_number':226,'multiline':False]
['text':' Pass along queryStats context so it is retrievable after query execution for storing metrics.','line_number':230,'multiline':False]
['text':' We use pinning of a cursor as a proxy for active, user-initiated use of a cursor.  Therefore,','line_number':235,'multiline':False]
['text':' we pass down to the logical session cache and vivify the record (updating last use).','line_number':236,'multiline':False]
['text':' Avoid computing the current time within the critical section.','line_number':252,'multiline':False]
['text':' We must verify that no interrupts have occurred since we finished building the current','line_number':258,'multiline':False]
['text':' batch. Otherwise, the cursor will be checked back in, the interrupted opCtx will be','line_number':259,'multiline':False]
['text':' destroyed, and subsequent getMores with a fresh opCtx will succeed.','line_number':260,'multiline':False]
['text':' If someone was trying to kill this cursor with a killOp or a killCursors, they are likely','line_number':265,'multiline':False]
['text':' interesting in proactively cleaning up that cursor's resources. In these cases, we','line_number':266,'multiline':False]
['text':' proactively delete the cursor. In other cases we preserve the error code so that the client','line_number':267,'multiline':False]
['text':' will see the reason the cursor was killed when asking for the next batch.','line_number':268,'multiline':False]
['text':' The cursor will stay around in '_cursorMap', so release the unique pointer to avoid deleting','line_number':279,'multiline':False]
['text':' it. Cast to void to explicitly ignore the return value.','line_number':280,'multiline':False]
['text':' Exclude cursors that this user does not own if auth is enabled.','line_number':306,'multiline':False]
['text':' Exclude pinned cursors.','line_number':312,'multiline':False]
['text':' Avoid computing the current time within the critical section.','line_number':357,'multiline':False]
['text':' Make sure the PlanExecutor isn't registered, since we will register the ClientCursor wrapping','line_number':360,'multiline':False]
['text':' it.','line_number':361,'multiline':False]
['text':' Note we must hold the registration lock from now until insertion into '_cursorMap' to ensure','line_number':365,'multiline':False]
['text':' we don't insert two cursors with the same cursor id.','line_number':366,'multiline':False]
['text':' Even though we drop the lock on the '_cursorMap' partition, another thread cannot','line_number':370,'multiline':False]
['text':' register a cursor with the same id because we still hold '_registrationLock'.','line_number':371,'multiline':False]
['text':' Register this cursor for lookup by transaction.','line_number':380,'multiline':False]
['text':' Transfer ownership of the cursor to '_cursorMap'.','line_number':385,'multiline':False]
['text':' If set, store the mapping of OperationKey to the generated CursorID.','line_number':390,'multiline':False]
['text':' Restores the maxTimeMS provided in the cursor generating command in the case it used','line_number':396,'multiline':False]
['text':' maxTimeMSOpOnly. This way the pinned cursor will have the leftover time consistent with the','line_number':397,'multiline':False]
['text':' maxTimeMS.','line_number':398,'multiline':False]
['text':' Note the following subleties of the implementations of deregisterAndDestroyCursor:','line_number':404,'multiline':False]
['text':' - We must make sure the cursor is unpinned (by clearing the '_operationUsingCursor' field) before','line_number':405,'multiline':False]
['text':'   destruction, since it is an error to delete a pinned cursor.','line_number':406,'multiline':False]
['text':' - In addition, we must deregister the cursor from the manager's map before clearing the','line_number':407,'multiline':False]
['text':'   '_operationUsingCursor' field, since it is an error to unpin a registered cursor without','line_number':408,'multiline':False]
['text':'   holidng the appropriate cursor manager mutex. By first deregistering the cursor, we ensure that','line_number':409,'multiline':False]
['text':'   no other thread can access '_cursor', meaning that it is safe for us to write to','line_number':410,'multiline':False]
['text':'   '_operationUsingCursor' without holding the CursorManager mutex.','line_number':411,'multiline':False]
['text':' Restrict the scope of the lock so we can destroy the cursor without holding any cursor','line_number':422,'multiline':False]
['text':' manager mutexes.','line_number':423,'multiline':False]
['text':' Dispose of the cursor without holding any cursor manager mutexes. Disposal of a cursor can','line_number':433,'multiline':False]
['text':' require taking lock manager locks, which we want to avoid while holding a mutex. If we did','line_number':434,'multiline':False]
['text':' so, any caller of a CursorManager method which already held a lock manager lock could induce','line_number':435,'multiline':False]
['text':' a deadlock when trying to acquire a CursorManager lock.','line_number':436,'multiline':False]
['text':' Rather than removing the cursor directly, kill the operation that's currently using the','line_number':450,'multiline':False]
['text':' cursor. It will stop on its own (and remove the cursor) when it sees that it's been','line_number':451,'multiline':False]
['text':' interrupted.','line_number':452,'multiline':False]
['text':' Mark that the cursor has been killed on the cursor object itself as well, as other errors','line_number':459,'multiline':False]
['text':' e.g. MaxTimeMSExpired may override the CursorKilled status.','line_number':460,'multiline':False]
['text':' Note that we're accessing the cursor without having pinned it! This is okay since we're only','line_number':478,'multiline':False]
['text':' accessing nss() and getAuthenticatedUsers() both of which return values that don't change','line_number':479,'multiline':False]
['text':' after the cursor's creation. We're guaranteed that the cursor won't get destroyed while we're','line_number':480,'multiline':False]
['text':' reading from it because we hold the partition's lock.','line_number':481,'multiline':False]
['text':' namespace mongo','line_number':486,'multiline':False]
