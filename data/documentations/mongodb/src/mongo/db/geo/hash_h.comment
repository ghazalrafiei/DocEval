['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' This class maps an unsigned x,y coordinate pair to a hash value.
 * To hash values more interesting than unsigned, use the GeoHashConverter,
 * which maps doubles to unsigned values.
 ','line_number':52,'multiline':True]
['text':' = 32;','line_number':58,'multiline':False]
['text':' The strings are binary values of length <= 64,','line_number':61,'multiline':False]
['text':' examples: 1001010100101, 1','line_number':62,'multiline':False]
['text':' bits is how many bits are used to hash each of x and y.','line_number':65,'multiline':False]
['text':' hash is a raw hash value.  we just copy these into our private fields.','line_number':68,'multiline':False]
['text':' This only works if e is BinData.  To get a GeoHash from other BSONElements,','line_number':70,'multiline':False]
['text':' use the converter class.','line_number':71,'multiline':False]
['text':' Convert from the hashed value to unsigned.','line_number':74,'multiline':False]
['text':'* Is the 'bit'-th most significant bit set?  (NOT the least significant) ','line_number':77,'multiline':True]
['text':'* Return a GeoHash with one bit of precision lost. ','line_number':80,'multiline':True]
['text':' XXX: what does this really do?','line_number':94,'multiline':False]
['text':' XXX what does this do','line_number':97,'multiline':False]
['text':' XXX comment better','line_number':101,'multiline':False]
['text':' XXX comment better','line_number':105,'multiline':False]
['text':' XXX: what does this do','line_number':109,'multiline':False]
['text':' Append the hash in s to our current hash.  We expect s to be '0' or '1' or '\0',','line_number':116,'multiline':False]
['text':' though we also treat non-'1' values as '0'.','line_number':117,'multiline':False]
['text':' Append the minimum range of the hash to the builder provided (inclusive)','line_number':122,'multiline':False]
['text':' Append the minimum range of the hash to the KeyString provided (inclusive)','line_number':124,'multiline':False]
['text':' Append the maximum range of the hash to the builder provided (inclusive)','line_number':127,'multiline':False]
['text':' If this is not a leaf cell, set children[0..3] to the four children of','line_number':135,'multiline':False]
['text':' this cell (in traversal order) and return true. Otherwise returns false.','line_number':136,'multiline':False]
['text':' Return true if the given cell is contained within this one.','line_number':138,'multiline':False]
['text':' Return the parent at given level.','line_number':140,'multiline':False]
['text':' Return the neighbors of closest vertex to this cell at the given level,','line_number':144,'multiline':False]
['text':' by appending them to "output".  Normally there are four neighbors, but','line_number':145,'multiline':False]
['text':' the closest vertex may only have two or one neighbor if it is next to the','line_number':146,'multiline':False]
['text':' boundary.','line_number':147,'multiline':False]
['text':'','line_number':148,'multiline':False]
['text':' Requires: level < this->_bits, so that we can determine which vertex is','line_number':149,'multiline':False]
['text':' closest (in particular, level == kMaxBits is not allowed).','line_number':150,'multiline':False]
['text':' Create a hash from the provided string.  Used by the std::string and char* cons.','line_number':154,'multiline':False]
['text':' Keep the upper _bits*2 bits of _hash, clear the lower bits.
     * Maybe there's junk in there?  XXX Not sure why this is done.
     ','line_number':156,'multiline':True]
['text':' XXX: what does this do','line_number':160,'multiline':False]
['text':' Bits per field.  Our hash is 64 bits, and we have an X and a Y field,','line_number':164,'multiline':False]
['text':' so this is 1 to 32.','line_number':165,'multiline':False]
['text':' Convert between various types and the GeoHash. We need additional information (scaling etc.)
 * to convert to/from GeoHash.  The additional information doesn't change often and is the same
 * for all conversions, so we stick all the conversion methods here with their associated
 * data.
 ','line_number':169,'multiline':True]
['text':' = 1.1e-16','line_number':176,'multiline':False]
['text':' How many bits to use for the hash?','line_number':179,'multiline':False]
['text':' X/Y values must be [min, max]','line_number':181,'multiline':False]
['text':' Values are scaled by this when converted to/from hash scale.','line_number':184,'multiline':False]
['text':'*
     * Factory method to return a new instance with status. Uses hashing parameters parsed from a
     * BSONObj.
     ','line_number':188,'multiline':True]
['text':'*
     * Factory method to return a new instance with status.
     ','line_number':194,'multiline':True]
['text':'*
     * Return converter parameterss which can be used to
     * construct an copy of this converter.
     ','line_number':201,'multiline':True]
['text':'*
     * Hashing functions.  Convert the following types to a GeoHash:
     * BSONElement
     * BSONObj
     * Point
     * double, double
     ','line_number':227,'multiline':True]
['text':' src is printed out as debugging information.  I'm not sure if it's actually','line_number':237,'multiline':False]
['text':' somehow the 'source' of o?  Anyway, this is nasty, very nasty.  XXX','line_number':238,'multiline':False]
['text':'* Unhashing functions.
     * Convert from a hash to the following types:
     * double, double
     * Point
     * Box
     * BSONObj
     ','line_number':242,'multiline':True]
['text':' XXX: these should have consistent naming','line_number':249,'multiline':False]
['text':'*
     * Generates bounding box from geohash, expanded by the error bound
     ','line_number':255,'multiline':True]
['text':' Return the sizeEdge of a cell at a given level.','line_number':262,'multiline':False]
['text':' Used by test.','line_number':265,'multiline':False]
['text':' Convert from an unsigned in [0, (max-min)*scaling] to [min, max]','line_number':274,'multiline':False]
['text':' Convert from a double that is [min, max] to an unsigned in [0, (max-min)*scaling]','line_number':277,'multiline':False]
['text':' We compute these based on the _params:','line_number':281,'multiline':False]
['text':' Error bound of unhashToBox, see hash_test.cpp for its proof.','line_number':285,'multiline':False]
['text':' 8 * max(|max|, |min|) * u','line_number':286,'multiline':False]
['text':' namespace mongo','line_number':289,'multiline':False]
