['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' for max()','line_number':32,'multiline':False]
['text':' IWYU pragma: keep','line_number':50,'multiline':False]
['text':'
 * GeoBitSets fills out various bit patterns that are used by GeoHash.
 * What patterns?  Look at the comments next to the fields.
 ','line_number':67,'multiline':True]
['text':'
         * oddBitmasks' values are all possible 8-bit odd bitmasks which are used in unhash_fast():
         * "00000000", "00000001", "00000100", "00000101", "00010000", "00010001", "00010100",
         * "00010101", "01000000", "01000001", "01000100", "01000101", "01010000", "01010001",
         * "01010100", "01010101"
         ','line_number':74,'multiline':True]
['text':' Generate all 32 + 1 all-on bit patterns by repeatedly shifting the next bit to the','line_number':85,'multiline':False]
['text':' correct position','line_number':86,'multiline':False]
['text':' The 0-th entries of each all[XY] is 0.','line_number':102,'multiline':False]
['text':' The i-th entry of allX has i alternating bits turned on starting','line_number':103,'multiline':False]
['text':' with the most significant.  Example:','line_number':104,'multiline':False]
['text':' allX[1] = 8000000000000000','line_number':105,'multiline':False]
['text':' allX[2] = a000000000000000','line_number':106,'multiline':False]
['text':' allX[3] = a800000000000000','line_number':107,'multiline':False]
['text':' Note that 32 + 1 entries are needed, since 0 and 32 are both valid numbers of bits.','line_number':108,'multiline':False]
['text':' Same alternating bits but starting with one from the MSB:','line_number':110,'multiline':False]
['text':' allY[1] = 4000000000000000','line_number':111,'multiline':False]
['text':' allY[2] = 5000000000000000','line_number':112,'multiline':False]
['text':' allY[3] = 5400000000000000','line_number':113,'multiline':False]
['text':' Oh global variables.','line_number':119,'multiline':False]
['text':' For i return the i-th most significant bit.','line_number':122,'multiline':False]
['text':' masks(0) = 80000..000','line_number':123,'multiline':False]
['text':' masks(1) = 40000..000','line_number':124,'multiline':False]
['text':' etc.','line_number':125,'multiline':False]
['text':' Number of 0s depends on 32 vs. 64 bit.','line_number':126,'multiline':False]
['text':' copyAndReverse is used to reverse the order of bytes when copying between BinData and GeoHash.','line_number':135,'multiline':False]
['text':' GeoHashes are meant to be compared from MSB to LSB, where the first 2 MSB indicate the quadrant.','line_number':136,'multiline':False]
['text':' In BinData, the GeoHash of a 2D index is compared from LSB to MSB, so the bytes should be','line_number':137,'multiline':False]
['text':' reversed on little-endian systems.','line_number':138,'multiline':False]
['text':' Definition','line_number':145,'multiline':False]
['text':' This class maps an x,y coordinate pair to a hash value.
 * This should probably be renamed/generalized so that it's more of a planar hash,
 * and we also have a spherical hash, etc.
 ','line_number':148,'multiline':True]
['text':' _bits is how many bits for X or Y, not both, so we divide by 2.','line_number':167,'multiline':False]
['text':' Extends a 32 bit value into a 64 bit value interleaved with zeros.','line_number':175,'multiline':False]
['text':' The following example is an extension to 32-bits of the following bit manipulation for 16-bit','line_number':177,'multiline':False]
['text':' numbers.','line_number':178,'multiline':False]
['text':'','line_number':179,'multiline':False]
['text':'    0000 0000 0000 0000  abcd efgh ijkl mnop','line_number':180,'multiline':False]
['text':' -> 0000 0000 abcd efgh  0000 0000 ijkl mnop','line_number':181,'multiline':False]
['text':' -> 0000 abcd 0000 efgh  0000 ijkl 0000 mnop','line_number':182,'multiline':False]
['text':' -> 00ab 00cd 00ef 00gh  00ij 00kl 00mn 00op','line_number':183,'multiline':False]
['text':' -> 0a0b 0c0d 0e0f 0g0h  0i0j 0k0l 0m0n 0o0p','line_number':184,'multiline':False]
['text':' The following example is an extension to 32-bits of the following bit manipulation for','line_number':195,'multiline':False]
['text':' 16-bit numbers. Note that the following operations are a result of applying the inverse of','line_number':196,'multiline':False]
['text':' interleaveWithZeros operations.','line_number':197,'multiline':False]
['text':'','line_number':198,'multiline':False]
['text':'    0a0b 0c0d 0e0f 0g0h  0i0j 0k0l 0m0n 0o0p','line_number':199,'multiline':False]
['text':' -> 00ab 00cd 00ef 00gh  00ij 00kl 00mn 00op','line_number':200,'multiline':False]
['text':' -> 0000 abcd 0000 efgh  0000 ijkl 0000 mnop','line_number':201,'multiline':False]
['text':' -> 0000 0000 abcd efgh  0000 0000 ijkl mnop','line_number':202,'multiline':False]
['text':' -> 0000 0000 0000 0000  abcd efgh ijkl mnop','line_number':203,'multiline':False]
['text':' namespace','line_number':214,'multiline':False]
['text':' bits * 2 number of significant bits set to 1 leaving the rest set at 0.','line_number':222,'multiline':False]
['text':' Order goes XYXYXY... Shift Xs to Y position as that's how the algorithm expects the input.','line_number':238,'multiline':False]
['text':'* Is the 'bit'-th most significant bit set?  (NOT the least significant) ','line_number':243,'multiline':True]
['text':'* Return a GeoHash with one bit of precision lost. ','line_number':248,'multiline':True]
['text':' We only care about the leftmost other._bits (well, really _bits*2 since we have x and','line_number':259,'multiline':False]
['text':' y)','line_number':260,'multiline':False]
['text':' if (_hash & mask)','line_number':283,'multiline':False]
['text':' TODO(hk): Comment this.','line_number':301,'multiline':False]
['text':' Do we have a non-trivial GeoHash?','line_number':311,'multiline':False]
['text':' Could our GeoHash have higher precision?','line_number':316,'multiline':False]
['text':'*
 * Hashing works like this:
 * Divide the world into 4 buckets.  Label each one as such:
 *  -----------------
 *  |       |       |
 *  |       |       |
 *  | 0,1   | 1,1   |
 *  -----------------
 *  |       |       |
 *  |       |       |
 *  | 0,0   | 1,0   |
 *  -----------------
 * We recursively divide each cell, furthermore.
 * The functions below tell us what quadrant we're in *at the finest level
 * of the subdivision.*
 ','line_number':321,'multiline':True]
['text':' TODO(hk): comment better','line_number':350,'multiline':False]
['text':' TODO(hk): comment much better','line_number':357,'multiline':False]
['text':' TEMP','line_number':361,'multiline':False]
['text':' overflow','line_number':382,'multiline':False]
['text':' Append the hash in s to our current hash.  We expect s to be '0' or '1' or '\0',','line_number':418,'multiline':False]
['text':' though we also treat non-'1' values as '0'.','line_number':419,'multiline':False]
['text':' Keep the most significant _bits*2 bits of _hash, clear the least significant bits. If shorter','line_number':443,'multiline':False]
['text':' than 64 bits, the hash occupies the higher order bits, so we ensure that the lower order bits are','line_number':444,'multiline':False]
['text':' zeroed.','line_number':445,'multiline':False]
['text':' Left shift count should be less than 64','line_number':447,'multiline':False]
['text':' Reverse the order of bytes when copying between BinData and GeoHash.','line_number':461,'multiline':False]
['text':' GeoHashes are meant to be compared from MSB to LSB, where the first 2 MSB indicate the','line_number':462,'multiline':False]
['text':' quadrant.','line_number':463,'multiline':False]
['text':' In BinData, the GeoHash of a 2D index is compared from LSB to MSB, so the bytes should be','line_number':464,'multiline':False]
['text':' reversed on little-endian systems','line_number':465,'multiline':False]
['text':' Reverse the order of bytes when copying between BinData and GeoHash.','line_number':477,'multiline':False]
['text':' GeoHashes are meant to be compared from MSB to LSB, where the first 2 MSB indicate the','line_number':478,'multiline':False]
['text':' quadrant.','line_number':479,'multiline':False]
['text':' In BinData, the GeoHash of a 2D index is compared from LSB to MSB, so the bytes should be','line_number':480,'multiline':False]
['text':' reversed on little-endian systems','line_number':481,'multiline':False]
['text':' namespace','line_number':488,'multiline':False]
['text':' The min bound of a GeoHash region has all the unused suffix bits set to 0','line_number':491,'multiline':False]
['text':' The min bound of a GeoHash region has all the unused suffix bits set to 0','line_number':496,'multiline':False]
['text':' The min bound of a GeoHash region has all the unused suffix bits set to 0','line_number':501,'multiline':False]
['text':' The max bound of a GeoHash region has all the unused suffix bits set to 1','line_number':506,'multiline':False]
['text':' i is how many bits match between this and other.','line_number':528,'multiline':False]
['text':' (0, 0)','line_number':538,'multiline':False]
['text':' (0, 1)','line_number':540,'multiline':False]
['text':' (1, 0)','line_number':542,'multiline':False]
['text':' (1, 1)','line_number':543,'multiline':False]
['text':' Parent at the given level.','line_number':564,'multiline':False]
['text':' Generate the neighbors of parent that are closest to me.','line_number':568,'multiline':False]
['text':' No Neighbors for the top level.','line_number':573,'multiline':False]
['text':' Position in parent','line_number':577,'multiline':False]
['text':' Y','line_number':578,'multiline':False]
['text':' ^','line_number':579,'multiline':False]
['text':' |  01, 11','line_number':580,'multiline':False]
['text':' |  00, 10','line_number':581,'multiline':False]
['text':' +----------> X','line_number':582,'multiline':False]
['text':' We can guarantee _bits > 0.','line_number':583,'multiline':False]
['text':' 1 bit at parent's level, the least significant bit of parent.','line_number':586,'multiline':False]
['text':' Along X Axis','line_number':589,'multiline':False]
['text':' Left side of parent, X - 1','line_number':591,'multiline':False]
['text':' Right side of parent, X + 1','line_number':595,'multiline':False]
['text':' Along Y Axis','line_number':600,'multiline':False]
['text':' Bottom of parent, Y - 1','line_number':602,'multiline':False]
['text':' Top of parent, Y + 1','line_number':606,'multiline':False]
['text':' Four corners','line_number':611,'multiline':False]
['text':' PosInParent == 3LL','line_number':622,'multiline':False]
['text':'      a   x     b','line_number':632,'multiline':False]
['text':'      |   |     |','line_number':633,'multiline':False]
['text':' -----|---o-----|---------|--   "|" is a representable double number.','line_number':634,'multiline':False]
['text':'','line_number':635,'multiline':False]
['text':' In the above figure, b is the next representable double number after a, so','line_number':636,'multiline':False]
['text':' |a - b|/|a| = epsilon (ULP) ~= 2.22E-16.','line_number':637,'multiline':False]
['text':'','line_number':638,'multiline':False]
['text':' An exact number x will be represented as the nearest representable double, which is a.','line_number':639,'multiline':False]
['text':' |x - a|/|a| <= 0.5 ULP ~= 1.11e-16','line_number':640,'multiline':False]
['text':'','line_number':641,'multiline':False]
['text':' IEEE floating-point operations have a maximum error of 0.5 ULPS (units in','line_number':642,'multiline':False]
['text':' the last place).  For double-precision numbers, this works out to 2**-53','line_number':643,'multiline':False]
['text':' (about 1.11e-16) times the magnitude of the result.','line_number':644,'multiline':False]
['text':' TODO(hk): What do we require of the values in params?','line_number':714,'multiline':False]
['text':' Compute how much error there is so it can be used as a fudge factor.','line_number':716,'multiline':False]
['text':' Epsilon is 1/100th of a bucket size','line_number':721,'multiline':False]
['text':' TODO:  Can we actually find error bounds for the sqrt function?','line_number':722,'multiline':False]
['text':' Error in radians','line_number':726,'multiline':False]
['text':' 8 * max(|max|, |min|) * u','line_number':729,'multiline':False]
['text':'*
 * Hashing functions.  Convert the following types (which have a double precision point)
 * to a GeoHash:
 * BSONElement
 * BSONObj
 * Point
 * double, double
 ','line_number':744,'multiline':True]
['text':' src is printed out as debugging information.  Maybe it is actually somehow the 'source' of o?','line_number':761,'multiline':False]
['text':'*
 * Unhashing functions.  These convert from a "discretized" GeoHash to the "continuous"
 * doubles according to our scaling parameters.
 *
 * Possible outputs:
 * double, double
 * Point
 * BSONObj
 ','line_number':800,'multiline':True]
['text':' TODO(hk): these should have consistent naming','line_number':809,'multiline':False]
['text':' Return the result without any error.','line_number':834,'multiline':False]
['text':' Expand the box by the error bound','line_number':842,'multiline':False]
['text':' Relative error = epsilon_(max-min). ldexp() is just a direct translation to','line_number':859,'multiline':False]
['text':' floating point exponent, and should be exact.','line_number':860,'multiline':False]
['text':' C4146: unary minus operator applied to unsigned type, result still unsigned','line_number':865,'multiline':False]
['text':' Convert from a double in [0, (max-min)*scaling] to [min, max]','line_number':871,'multiline':False]
['text':' Convert from an unsigned in [0, (max-min)*scaling] to [min, max]','line_number':878,'multiline':False]
['text':' Convert from a double that is [min, max] to a double in [0, (max-min)*scaling]','line_number':883,'multiline':False]
['text':' prevent aliasing with _min by moving inside the "box"','line_number':888,'multiline':False]
['text':' makes 180 == 179.999 (roughly)','line_number':889,'multiline':False]
['text':' Convert from a double that is [min, max] to an unsigned in [0, (max-min)*scaling]','line_number':898,'multiline':False]
['text':' namespace mongo','line_number':904,'multiline':False]
