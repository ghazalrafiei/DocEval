['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' IWYU pragma: no_include "ext/alloc_traits.h"','line_number':46,'multiline':False]
['text':' Point coordinates must be finite numbers, neither NaN or infinite.','line_number':95,'multiline':False]
['text':' We don't rely on drem to clean up non-sane points.  We just don't let them become','line_number':110,'multiline':False]
['text':' spherical.','line_number':111,'multiline':False]
['text':' Note that it's (lat, lng) for S2 but (lng, lat) for MongoDB.','line_number':114,'multiline':False]
['text':' This shouldn't happen since we should only have valid lng/lats.','line_number':116,'multiline':False]
['text':' GeoJSON allows extra elements, e.g. altitude.','line_number':132,'multiline':False]
['text':' "coordinates": [ [100.0, 0.0], [101.0, 1.0] ]','line_number':141,'multiline':False]
['text':' Iterate all coordinates in array','line_number':148,'multiline':False]
['text':' We could have > 2 adjacent identical vertices, and must examine i again.','line_number':163,'multiline':False]
['text':' Iterate all loops of the polygon.','line_number':195,'multiline':False]
['text':' Parse the array of vertices of a loop.','line_number':197,'multiline':False]
['text':' Check if the loop is closed.','line_number':204,'multiline':False]
['text':' Drop the duplicated last point.','line_number':210,'multiline':False]
['text':' At least 3 vertices.','line_number':213,'multiline':False]
['text':' Check whether this loop is valid if vaildation hasn't been already done on 2dSphere index','line_number':223,'multiline':False]
['text':' insertion which is controlled by the 'skipValidation' flag.','line_number':224,'multiline':False]
['text':' 1. At least 3 vertices.','line_number':225,'multiline':False]
['text':' 2. All vertices must be unit length. Guaranteed by parsePoints().','line_number':226,'multiline':False]
['text':' 3. Loops are not allowed to have any duplicate vertices.','line_number':227,'multiline':False]
['text':' 4. Non-adjacent edges are not allowed to intersect.','line_number':228,'multiline':False]
['text':' If the loop is more than one hemisphere, invert it.','line_number':232,'multiline':False]
['text':' Check the first loop must be the exterior ring and any others must be','line_number':235,'multiline':False]
['text':' interior rings or holes.','line_number':236,'multiline':False]
['text':' Check if the given loops form a valid polygon.','line_number':251,'multiline':False]
['text':' 1. If a loop contains an edge AB, then no other loop may contain AB or BA.','line_number':252,'multiline':False]
['text':' 2. No loop covers more than half of the sphere.','line_number':253,'multiline':False]
['text':' 3. No two loops cross.','line_number':254,'multiline':False]
['text':' Given all loops are valid / normalized and S2Polygon::IsValid() above returns true.','line_number':259,'multiline':False]
['text':' The polygon must be valid. See S2Polygon member function IsValid().','line_number':260,'multiline':False]
['text':' Transfer ownership of the loops and clears loop vector.','line_number':263,'multiline':False]
['text':' Check if every loop of this polygon shares at most one vertex with','line_number':271,'multiline':False]
['text':' its parent loop.','line_number':272,'multiline':False]
['text':' "err" looks like "Loop 1 shares more than one vertex with its parent loop 0"','line_number':274,'multiline':False]
['text':' S2Polygon contains more than one ring, which is allowed by S2, but not by GeoJSON.','line_number':277,'multiline':False]
['text':'','line_number':278,'multiline':False]
['text':' Loops are indexed according to a preorder traversal of the nesting hierarchy.','line_number':279,'multiline':False]
['text':' GetLastDescendant() returns the index of the last loop that is contained within','line_number':280,'multiline':False]
['text':' a given loop. We guarantee that the first loop is the exterior ring.','line_number':281,'multiline':False]
['text':' In GeoJSON, only one nesting is allowed.','line_number':286,'multiline':False]
['text':' The depth of a loop is set by polygon according to the nesting hierarchy of polygon,','line_number':287,'multiline':False]
['text':' so the exterior ring's depth is 0, a hole in it is 1, etc.','line_number':288,'multiline':False]
['text':' Only one loop is allowed in a BigSimplePolygon','line_number':305,'multiline':False]
['text':' The last point is duplicated.  We drop it, since S2Loop expects no','line_number':325,'multiline':False]
['text':' duplicate points','line_number':326,'multiline':False]
['text':' At least 3 vertices.','line_number':329,'multiline':False]
['text':' Check whether this loop is valid.','line_number':337,'multiline':False]
['text':' Parse "crs" field of BSON object.','line_number':346,'multiline':False]
['text':' "crs": {','line_number':347,'multiline':False]
['text':'   "type": "name",','line_number':348,'multiline':False]
['text':'   "properties": {','line_number':349,'multiline':False]
['text':'     "name": "urn:ogc:def:crs:OGC:1.3:CRS84"','line_number':350,'multiline':False]
['text':'    }','line_number':351,'multiline':False]
['text':' }','line_number':352,'multiline':False]
['text':' "crs" field doesn't exist, return the default SPHERE','line_number':357,'multiline':False]
['text':' "type": "name"','line_number':368,'multiline':False]
['text':' "properties"','line_number':372,'multiline':False]
['text':' Parse "coordinates" field of GeoJSON LineString','line_number':398,'multiline':False]
['text':' e.g. "coordinates": [ [100.0, 0.0], [101.0, 1.0] ]','line_number':399,'multiline':False]
['text':' Or a line in "coordinates" field of GeoJSON MultiLineString','line_number':400,'multiline':False]
['text':' Parse legacy point or GeoJSON point, used by geo near.','line_number':424,'multiline':False]
['text':' Only stored legacy points allow additional fields.','line_number':425,'multiline':False]
['text':' location: [1, 2] or location: {x: 1, y:2}','line_number':432,'multiline':False]
['text':' Legacy point','line_number':434,'multiline':False]
['text':' GeoJSON point. location: { type: "Point", coordinates: [1, 2] }','line_number':438,'multiline':False]
['text':'* exported *','line_number':442,'multiline':True]
['text':' XXX: VERIFY AREA >= 0','line_number':464,'multiline':False]
['text':' A coordinate','line_number':476,'multiline':False]
['text':' { "type": "Point", "coordinates": [100.0, 0.0] }','line_number':490,'multiline':False]
['text':' "crs"','line_number':493,'multiline':False]
['text':' "coordinates"','line_number':498,'multiline':False]
['text':' Projection','line_number':503,'multiline':False]
['text':' { "type": "LineString", "coordinates": [ [100.0, 0.0], [101.0, 1.0] ] }','line_number':512,'multiline':False]
['text':' "crs"','line_number':515,'multiline':False]
['text':' "coordinates"','line_number':520,'multiline':False]
['text':' "crs", allow strict sphere','line_number':534,'multiline':False]
['text':' "coordinates"','line_number':539,'multiline':False]
['text':' Iterate array','line_number':590,'multiline':False]
['text':' Iterate array','line_number':620,'multiline':False]
['text':' Center','line_number':636,'multiline':False]
['text':' Radius','line_number':642,'multiline':False]
['text':' radius >= 0 and is not NaN','line_number':644,'multiline':False]
['text':' No more','line_number':648,'multiline':False]
['text':' Center','line_number':660,'multiline':False]
['text':' Check the object has and only has 2 numbers.','line_number':663,'multiline':False]
['text':' Radius','line_number':673,'multiline':False]
['text':' radius >= 0 and is not NaN','line_number':675,'multiline':False]
['text':' No more elements','line_number':682,'multiline':False]
['text':'  { "type": "GeometryCollection",','line_number':693,'multiline':False]
['text':'    "geometries": [','line_number':694,'multiline':False]
['text':'      { "type": "Point",','line_number':695,'multiline':False]
['text':'        "coordinates": [100.0, 0.0]','line_number':696,'multiline':False]
['text':'      },','line_number':697,'multiline':False]
['text':'      { "type": "LineString",','line_number':698,'multiline':False]
['text':'        "coordinates": [ [101.0, 0.0], [102.0, 1.0] ]','line_number':699,'multiline':False]
['text':'      }','line_number':700,'multiline':False]
['text':'    ]','line_number':701,'multiline':False]
['text':'  }','line_number':702,'multiline':False]
['text':' Should not reach here.','line_number':752,'multiline':False]
['text':' Check parsing result.','line_number':756,'multiline':False]
['text':' namespace mongo','line_number':844,'multiline':False]
