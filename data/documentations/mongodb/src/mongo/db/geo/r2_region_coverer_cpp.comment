['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' IWYU pragma: no_include "boost/intrusive/detail/std_fwd.hpp"','line_number':32,'multiline':False]
['text':' Definition','line_number':60,'multiline':False]
['text':' We define our own own comparison function on QueueEntries in order to','line_number':63,'multiline':False]
['text':' make the results deterministic.  Using the default less<QueueEntry>,','line_number':64,'multiline':False]
['text':' entries of equal priority would be sorted according to the memory address','line_number':65,'multiline':False]
['text':' of the candidate.','line_number':66,'multiline':False]
['text':' Need to declare explicitly because of scoped pointers.','line_number':82,'multiline':False]
['text':' Strategy: Start with the full plane. Discard any','line_number':100,'multiline':False]
['text':' that do not intersect the shape.  Then repeatedly choose the','line_number':101,'multiline':False]
['text':' largest cell that intersects the shape and subdivide it.','line_number':102,'multiline':False]
['text':'','line_number':103,'multiline':False]
['text':' _result contains the cells that will be part of the output, while the','line_number':104,'multiline':False]
['text':' queue contains cells that we may still subdivide further.  Cells that','line_number':105,'multiline':False]
['text':' are entirely contained within the region are immediately added to the','line_number':106,'multiline':False]
['text':' output, while cells that do not intersect the region are immediately','line_number':107,'multiline':False]
['text':' discarded. Therefore the queue only contains cells that partially','line_number':108,'multiline':False]
['text':' intersect the region. Candidates are prioritized first according to','line_number':109,'multiline':False]
['text':' cell size (larger cells first), then by the number of intersecting','line_number':110,'multiline':False]
['text':' children they have (fewest children first), and then by the number of','line_number':111,'multiline':False]
['text':' fully contained children (fewest children first).','line_number':112,'multiline':False]
['text':' Owned','line_number':122,'multiline':False]
['text':' REDACT?? I think this may have User info, but I'm not sure how to redact','line_number':124,'multiline':False]
['text':' Try to expand this cell into its children','line_number':130,'multiline':False]
['text':' Reached max cells. Move all candidates from the queue into results.','line_number':139,'multiline':False]
['text':' Caller owns the returned pointer','line_number':157,'multiline':False]
['text':' Exclude the cell that doesn't intersect with the geometry.','line_number':159,'multiline':False]
['text':' Stop subdivision when we reach the max level or there is no need to do so.','line_number':169,'multiline':False]
['text':' Don't stop if we haven't reach min level.','line_number':170,'multiline':False]
['text':' Takes ownership of "candidate"','line_number':177,'multiline':False]
['text':' Expand children','line_number':190,'multiline':False]
['text':' Optimization: add the parent cell rather than all of its children.','line_number':196,'multiline':False]
['text':' Add the cell into the priority queue for further subdivision.','line_number':200,'multiline':False]
['text':'','line_number':201,'multiline':False]
['text':' We negate the priority so that smaller absolute priorities are returned','line_number':202,'multiline':False]
['text':' first.  The heuristic is designed to refine the largest cells first,','line_number':203,'multiline':False]
['text':' since those are where we have the largest potential gain.  Among cells','line_number':204,'multiline':False]
['text':' at the same level, we prefer the cells with the smallest number of','line_number':205,'multiline':False]
['text':' intersecting children.  Finally, we prefer cells that have the smallest','line_number':206,'multiline':False]
['text':' number of children that cannot be refined any further.','line_number':207,'multiline':False]
['text':' queue owns candidate','line_number':210,'multiline':False]
['text':' REDACT??','line_number':211,'multiline':False]
['text':' Dones't take ownership of "candidate"','line_number':220,'multiline':False]
['text':' Takes ownership of "candidate"','line_number':237,'multiline':False]
['text':' Add the full plane','line_number':249,'multiline':False]
['text':' TODO a better initialization.','line_number':250,'multiline':False]
['text':'','line_number':254,'multiline':False]
['text':' R2CellUnion','line_number':255,'multiline':False]
['text':'','line_number':256,'multiline':False]
['text':' Since all cells are ordered, if an ancestor of id exists, it must be the previous one.','line_number':273,'multiline':False]
['text':' it > cellId','line_number':275,'multiline':False]
['text':' --it <= cellId','line_number':276,'multiline':False]
['text':' Parent is less than children. If an ancestor of id exists, it must be the last one.','line_number':287,'multiline':False]
['text':'','line_number':288,'multiline':False]
['text':' Invariant: output doesn't contain intersected cells (ancestor and its descendants)','line_number':289,'multiline':False]
['text':' Proof: Assume another cell "c" exists between ancestor "p" and the current "id",','line_number':290,'multiline':False]
['text':' i.e. p < c < id, then "c" has "p" as its prefix, since id share the same prefix "p",','line_number':291,'multiline':False]
['text':' so "p" contains "c", which conflicts with the invariant.','line_number':292,'multiline':False]
['text':' Check whether the last 3 elements of "output" plus "id" can be','line_number':296,'multiline':False]
['text':' collapsed into a single parent cell.','line_number':297,'multiline':False]
['text':' A necessary (but not sufficient) condition is that the XOR of the','line_number':299,'multiline':False]
['text':' four cells must be zero.  This is also very fast to test.','line_number':300,'multiline':False]
['text':' Now we do a slightly more expensive but exact test.','line_number':305,'multiline':False]
['text':' Replace four children by their parent cell.','line_number':311,'multiline':False]
['text':' After normalization, the cells will be ordered.','line_number':335,'multiline':False]
['text':' cellId intersects with the union if and only if it either contains or is contained by','line_number':336,'multiline':False]
['text':' a member of the union.','line_number':337,'multiline':False]
['text':' Add the difference between cell and cellUnion to cellIds.','line_number':350,'multiline':False]
['text':' If they intersect but the difference is non-empty, divides and conquers.','line_number':351,'multiline':False]
['text':' namespace','line_number':363,'multiline':False]
['text':' namespace mongo ','line_number':373,'multiline':True]
