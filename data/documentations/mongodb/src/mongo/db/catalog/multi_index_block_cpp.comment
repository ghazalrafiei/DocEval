['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' When enabled by a test, this failpoint allows the test to set the maximum allowed memory for','line_number':129,'multiline':False]
['text':' an index build to an unreasonably low value that is below what the user configuration will','line_number':130,'multiline':False]
['text':' allow.','line_number':131,'multiline':False]
['text':' If a key generation error was suppressed, record the document as "skipped" so the','line_number':148,'multiline':False]
['text':' index builder can retry at a point when data is consistent.','line_number':149,'multiline':False]
['text':' Save and restore the cursor around the write in case it throws a WCE','line_number':160,'multiline':False]
['text':' internally and causes the cursor to be unpositioned.','line_number':161,'multiline':False]
['text':' Always suppress.','line_number':173,'multiline':False]
['text':' When graceful index build cancellation in enabled, primaries do not need','line_number':180,'multiline':False]
['text':' to suppress key generation errors other than duplicate key. The error','line_number':181,'multiline':False]
['text':' should be surfaced and cause immediate abort of the index build.','line_number':182,'multiline':False]
['text':' This is true because primaries are guaranteed to have a consistent view of data. To receive a','line_number':184,'multiline':False]
['text':' transient error on a primary node, the user would have to correct any poorly-formed documents','line_number':185,'multiline':False]
['text':' while the index build is in progress. As this requires good timing and would likely not be','line_number':186,'multiline':False]
['text':' intentional by the user, we try to fail early.','line_number':187,'multiline':False]
['text':' Initial syncing nodes, however, can experience false-positive transient errors, so they must','line_number':189,'multiline':False]
['text':' suppress errors. Secondaries, on the other hand, rely on the primary's decision to commit or','line_number':190,'multiline':False]
['text':' abort the index build, so we suppress errors there as well, but it is not required. If a','line_number':191,'multiline':False]
['text':' secondary ever becomes primary, it must retry any previously-skipped documents before','line_number':192,'multiline':False]
['text':' committing.','line_number':193,'multiline':False]
['text':' namespace','line_number':197,'multiline':False]
['text':' init() was previously called with a collection pointer, so ensure that the same','line_number':218,'multiline':False]
['text':' collection is being provided for clean up and the interface in not being abused.','line_number':219,'multiline':False]
['text':' This cleans up all index builds. Because that may need to write, it is done inside of','line_number':233,'multiline':False]
['text':' a WUOW. Nothing inside this block can fail, and it is made fatal if it does.','line_number':234,'multiline':False]
['text':' Guarantees that exceptions cannot be returned from index builder initialization except for','line_number':311,'multiline':False]
['text':' WriteConflictExceptions, which should be dealt with by the caller.','line_number':312,'multiline':False]
['text':' On rollback in init(), cleans up _indexes so that ~MultiIndexBlock doesn't try to clean','line_number':316,'multiline':False]
['text':' up _indexes manually (since the changes were already rolled back). Due to this, it is','line_number':317,'multiline':False]
['text':' thus legal to call init() again after it fails.','line_number':318,'multiline':False]
['text':' Initializing individual index build blocks below performs un-timestamped writes to the','line_number':337,'multiline':False]
['text':' durable catalog. It's possible for the onInit function to set multiple timestamps','line_number':338,'multiline':False]
['text':' depending on the index build codepath taken. Once to persist the index build entry in the','line_number':339,'multiline':False]
['text':' 'config.system.indexBuilds' collection and another time to log the operation using','line_number':340,'multiline':False]
['text':' onStartIndexBuild(). It's imperative that the durable catalog writes are timestamped at','line_number':341,'multiline':False]
['text':' the same time as onStartIndexBuild() is to avoid rollback issues.','line_number':342,'multiline':False]
['text':' We skip this step when initializing unfinished index builds during startup','line_number':351,'multiline':False]
['text':' recovery as they are already in the index catalog.','line_number':352,'multiline':False]
['text':' If we were given two identical indexes to build, we will run into an error','line_number':358,'multiline':False]
['text':' trying to set up the same index a second time in this for-loop. This is the','line_number':359,'multiline':False]
['text':' only way to encounter this error because callers filter out ready/in-progress','line_number':360,'multiline':False]
['text':' indexes and start the build while holding a lock throughout.','line_number':361,'multiline':False]
['text':' Find the resume information that corresponds to this spec.','line_number':392,'multiline':False]
['text':' ConstraintEnforcement is checked dynamically via callback (shouldRelaxContraints) on','line_number':432,'multiline':False]
['text':' steady state replication. On other modes, constraints are always relaxed.','line_number':433,'multiline':False]
['text':' Foreground index builds have to check for duplicates. Other index builds can relax','line_number':437,'multiline':False]
['text':' constraints and check for violations at commit-time.','line_number':438,'multiline':False]
['text':' Avoid converting TenantMigrationConflict errors to Status.','line_number':479,'multiline':False]
['text':' Avoid converting TenantMigrationCommittedException to Status.','line_number':482,'multiline':False]
['text':' UUIDs are not guaranteed during startup because the check happens after indexes are rebuilt.','line_number':502,'multiline':False]
['text':' Refrain from persisting any multikey updates as a result from building the index. Instead,','line_number':507,'multiline':False]
['text':' accumulate them in the `MultikeyPathTracker` and do the write as part of the update that','line_number':508,'multiline':False]
['text':' commits the index.','line_number':509,'multiline':False]
['text':' Hang the build after the curOP info is set up.','line_number':527,'multiline':False]
['text':' Unlock before hanging so replication recognizes we've completed.','line_number':548,'multiline':False]
['text':' Hint to the storage engine that this collection scan should not keep data in the cache.','line_number':563,'multiline':False]
['text':' Forced replica set re-configs will clear the majority committed snapshot, which may be','line_number':572,'multiline':False]
['text':' used by the collection scan. The collection scan will restart from the beginning in this','line_number':573,'multiline':False]
['text':' case. Capped cursors are invalidated when the document they were positioned on gets','line_number':574,'multiline':False]
['text':' deleted. The collection scan will restart in both cases.','line_number':575,'multiline':False]
['text':'stateInfo=','line_number':598,'multiline':True]
['text':' Resumable index builds can only be resumed prior to the oplog recovery phase of','line_number':612,'multiline':False]
['text':' startup. When restarting the collection scan, any saved index build progress is lost.','line_number':613,'multiline':False]
['text':' Unlock before hanging so replication recognizes we've completed.','line_number':665,'multiline':False]
['text':' The phase will be kCollectionScan when resuming an index build from the collection','line_number':712,'multiline':False]
['text':' scan phase.','line_number':713,'multiline':False]
['text':' If a key constraint violation is found, it may be suppressed and written to the constraint','line_number':720,'multiline':False]
['text':' violations side table. The plan executor must be passed down to save and restore the','line_number':721,'multiline':False]
['text':' cursor around the side table write in case any write conflict exception occurs that would','line_number':722,'multiline':False]
['text':' otherwise reposition the cursor unexpectedly.','line_number':723,'multiline':False]
['text':' Update objToIndex so that it continues to point to valid data when the','line_number':725,'multiline':False]
['text':' cursor is closed. A WCE may occur during a write to index A, and','line_number':726,'multiline':False]
['text':' objToIndex must still be used when the write is retried or for a write to','line_number':727,'multiline':False]
['text':' another index (if creating multiple indexes at once)','line_number':728,'multiline':False]
['text':' Callback to handle writing to the side table in case an error is suppressed, it is','line_number':735,'multiline':False]
['text':' constructed using the above callbacks to ensure the cursor is well positioned after the','line_number':736,'multiline':False]
['text':' write.','line_number':737,'multiline':False]
['text':' The external sorter is not part of the storage engine and therefore does not need','line_number':763,'multiline':False]
['text':' a WriteUnitOfWork to write keys. In case there are constraint violations being','line_number':764,'multiline':False]
['text':' suppressed, resulting in a write to the side table, all WUOW and write conflict exception','line_number':765,'multiline':False]
['text':' handling for the side table write is handled internally.','line_number':766,'multiline':False]
['text':' If kRelaxConstraints, shouldRelaxConstraints will simply be ignored and all errors','line_number':768,'multiline':False]
['text':' suppressed. If kRelaxContraintsCallback, shouldRelaxConstraints is used to determine','line_number':769,'multiline':False]
['text':' whether the error is suppressed or an exception is thrown.','line_number':770,'multiline':False]
['text':' Go to the next document.','line_number':783,'multiline':False]
['text':' The detection of mixed-schema data needs to be done before applying the partial filter','line_number':810,'multiline':False]
['text':' expression below. Only check for mixed-schema data if it's possible for the time-series','line_number':811,'multiline':False]
['text':' collection to have it.','line_number':812,'multiline':False]
['text':' Cache the collection and index catalog entry pointers during the collection scan phase. This','line_number':830,'multiline':False]
['text':' is necessary for index build performance to avoid looking up the index catalog entry for each','line_number':831,'multiline':False]
['text':' insertion into the index table.','line_number':832,'multiline':False]
['text':' Reset cached index catalog entry pointers.','line_number':836,'multiline':False]
['text':' When calling insert, BulkBuilderImpl's Sorter performs file I/O that may result in an','line_number':849,'multiline':False]
['text':' exception.','line_number':850,'multiline':False]
['text':' Initial sync adds documents to the sorter using','line_number':886,'multiline':False]
['text':' insertSingleDocumentForInitialSyncOrRecovery() instead of delegating to','line_number':887,'multiline':False]
['text':' insertDocumentsInCollection() to scan and insert the contents of the collection.','line_number':888,'multiline':False]
['text':' Therefore, it is possible for the phase of this MultiIndexBlock to be kInitialized','line_number':889,'multiline':False]
['text':' rather than kCollection when this function is called. The phase will be kBulkLoad when','line_number':890,'multiline':False]
['text':' resuming an index build from the bulk load phase.','line_number':891,'multiline':False]
['text':' Doesn't allow yielding when in a foreground index build.','line_number':898,'multiline':False]
['text':' When onDuplicateRecord is passed, 'dupsAllowed' should be passed to reflect whether or','line_number':903,'multiline':False]
['text':' not the index is unique.','line_number':904,'multiline':False]
['text':' SERVER-41918 This call to bulk->commit() results in file I/O that may result in an','line_number':915,'multiline':False]
['text':' exception.','line_number':916,'multiline':False]
['text':' Do not record duplicates when explicitly ignored. This may be the case on','line_number':926,'multiline':False]
['text':' secondaries.','line_number':927,'multiline':False]
['text':' Background writes are drained three times (once without blocking writes and twice blocking','line_number':963,'multiline':False]
['text':' writes), so we may either be coming from the bulk load phase or be already in the drain','line_number':964,'multiline':False]
['text':' writes phase.','line_number':965,'multiline':False]
['text':' Drain side-writes table for each index. This only drains what is visible. Assuming intent','line_number':977,'multiline':False]
['text':' locks are held on the user collection, more writes can come in after this drain completes.','line_number':978,'multiline':False]
['text':' Callers are responsible for stopping writes by holding an S or X lock while draining before','line_number':979,'multiline':False]
['text':' completing the index build.','line_number':980,'multiline':False]
['text':' Track duplicates for later constraint checking for all index builds, except when','line_number':986,'multiline':False]
['text':' _ignoreUnique is set explicitly.','line_number':987,'multiline':False]
['text':' For each index that may be unique, check that no recorded duplicates still exist. This can','line_number':1024,'multiline':False]
['text':' only check what is visible on the index. Callers are responsible for ensuring all writes to','line_number':1025,'multiline':False]
['text':' the collection are visible.','line_number':1026,'multiline':False]
['text':' UUIDs are not guaranteed during startup because the check happens after indexes are rebuilt.','line_number':1056,'multiline':False]
['text':' Do not interfere with writing multikey information when committing index builds.','line_number':1083,'multiline':False]
['text':' Do this before calling success(), which unsets the interceptor pointer on the index','line_number':1094,'multiline':False]
['text':' catalog entry. The interceptor will write multikey metadata keys into the index during','line_number':1095,'multiline':False]
['text':' IndexBuildInterceptor::sideWrite, so we only need to pass the cached MultikeyPaths into','line_number':1096,'multiline':False]
['text':' IndexCatalogEntry::setMultikey here.','line_number':1097,'multiline':False]
['text':' The bulk builder will track multikey information itself, and will write cached multikey','line_number':1116,'multiline':False]
['text':' metadata keys into the index just before committing. We therefore only need to pass the','line_number':1117,'multiline':False]
['text':' MultikeyPaths into IndexCatalogEntry::setMultikey here.','line_number':1118,'multiline':False]
['text':' Update the 'timeseriesBucketsMayHaveMixedSchemaData' catalog entry flag to false in order to','line_number':1128,'multiline':False]
['text':' allow subsequent index builds to skip checking bucket documents for mixed-schema data.','line_number':1129,'multiline':False]
['text':' Aborting without cleanup is done during shutdown. At this point the operation context is','line_number':1165,'multiline':False]
['text':' killed, but acquiring locks must succeed.','line_number':1166,'multiline':False]
['text':' NOLINT.','line_number':1167,'multiline':False]
['text':' Lock if it's not already locked, to ensure storage engine cannot be destructed out from','line_number':1168,'multiline':False]
['text':' underneath us.','line_number':1169,'multiline':False]
['text':' We can be interrupted by shutdown before inserting the first document from the collection','line_number':1235,'multiline':False]
['text':' scan, in which case there is no _lastRecordIdInserted.','line_number':1236,'multiline':False]
['text':' Persist the data to disk so that we see all of the data that has been inserted into','line_number':1246,'multiline':False]
['text':' the Sorter.','line_number':1247,'multiline':False]
['text':' namespace mongo','line_number':1331,'multiline':False]
