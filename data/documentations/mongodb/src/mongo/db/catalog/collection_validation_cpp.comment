['text':'*
 *    Copyright (C) 2019-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' Indicates whether the failpoint turned on by testing has been reached.','line_number':112,'multiline':False]
['text':'*
 * Validates the internal structure of each index in the Index Catalog 'indexCatalog', ensuring that
 * the index files have not been corrupted or compromised.
 *
 * May close or invalidate open cursors.
 ','line_number':115,'multiline':True]
['text':' Need to use the IndexCatalog here because the 'validateState->indexes' object hasn't been','line_number':125,'multiline':False]
['text':' constructed yet. It must be initialized to ensure we're validating all indexes.','line_number':126,'multiline':False]
['text':' Validate Indexes Internal Structure, checking if index files have been compromised or','line_number':130,'multiline':False]
['text':' corrupted.','line_number':131,'multiline':False]
['text':'*
 * Validates each index in the Index Catalog using the cursors in 'indexCursors'.
 *
 * If 'level' is kValidateFull, then we will compare new index entry counts with a previously taken
 * count saved in 'numIndexKeysPerIndex'.
 ','line_number':155,'multiline':True]
['text':' Validate Indexes, checking for mismatch between index entries and collection records.','line_number':165,'multiline':False]
['text':' Make a copy of the index name. The `traverseIndex()` function below will yield','line_number':169,'multiline':False]
['text':' periodically, so it's unsafe to hold a pointer to the index here.','line_number':170,'multiline':False]
['text':'*
 * Executes the second phase of validation for improved error reporting. This is only done if
 * any index inconsistencies are found during the first phase of validation.
 ','line_number':200,'multiline':True]
['text':' During the second phase of validation, iterate through each documents key set and only record','line_number':216,'multiline':False]
['text':' the keys that were inconsistent during the first phase of validation.','line_number':217,'multiline':False]
['text':' Iterate through all the indexes in the collection and only record the index entry keys that','line_number':229,'multiline':False]
['text':' had inconsistencies during the first phase.','line_number':230,'multiline':False]
['text':'numTraversedKeys=','line_number':244,'multiline':True]
['text':'*
 * Logs oplog entries related to corrupted records/indexes in validation results.
 ','line_number':287,'multiline':True]
['text':' Set up read on oplog collection.','line_number':300,'multiline':False]
['text':' Log oplog entries in reverse from most recent timestamp to oldest.','line_number':318,'multiline':False]
['text':' Due to oplog truncation, if we fail to find any oplog entry for a particular timestamp,','line_number':319,'multiline':False]
['text':' we can stop searching for oplog entries with earlier timestamps.','line_number':320,'multiline':False]
['text':'forward=','line_number':327,'multiline':True]
['text':' A record id in the oplog collection is equivalent to the document's timestamp field.','line_number':336,'multiline':False]
['text':' Report detailed index validation results gathered when using {full: true} for validated','line_number':376,'multiline':False]
['text':' indexes.','line_number':377,'multiline':False]
['text':' It is illegal for multikey paths to exist without the multikey flag set on the index,','line_number':522,'multiline':False]
['text':' but it may be possible for multikey to be set on the index while having no multikey','line_number':523,'multiline':False]
['text':' paths. If any of the paths are multikey, then the entire index should also be marked','line_number':524,'multiline':False]
['text':' multikey.','line_number':525,'multiline':False]
['text':' namespace','line_number':536,'multiline':False]
['text':' This is deliberately outside of the try-catch block, so that any errors thrown in the','line_number':549,'multiline':False]
['text':' constructor fail the cmd, as opposed to returning OK with valid:false.','line_number':550,'multiline':False]
['text':' Foreground validation needs to ignore prepare conflicts, or else it would deadlock.','line_number':553,'multiline':False]
['text':' Repair mode cannot use ignore-prepare because it needs to be able to do writes, and there is','line_number':554,'multiline':False]
['text':' no danger of deadlock for this mode anyway since it is only used at startup (or in standalone','line_number':555,'multiline':False]
['text':' mode where prepared transactions are prohibited.)','line_number':556,'multiline':False]
['text':' Relax corruption detection so that we log and continue scanning instead of failing early.','line_number':563,'multiline':False]
['text':' Note: cannot set PrepareConflictBehavior here, since the validate command with repair','line_number':571,'multiline':False]
['text':' needs kIngnoreConflictsAllowWrites, but validate repair at startup cannot set that here','line_number':572,'multiline':False]
['text':' due to an already active WriteUnitOfWork.  The prepare conflict behavior for validate','line_number':573,'multiline':False]
['text':' command with repair is set in the command code prior to this point.','line_number':574,'multiline':False]
['text':' Foreground validation may perform writes to fix up inconsistencies that are not','line_number':577,'multiline':False]
['text':' correctness errors.','line_number':578,'multiline':False]
['text':' isBackground().','line_number':582,'multiline':False]
['text':' Check whether we are allowed to read from this node after acquiring our locks. If we are','line_number':590,'multiline':False]
['text':' in a state where we cannot read, we should not run validate.','line_number':591,'multiline':False]
['text':' Record store validation code is executed before we open cursors because it may close','line_number':604,'multiline':False]
['text':' and/or invalidate all open cursors.','line_number':605,'multiline':False]
['text':' For full index validation, we validate the internal structure of each index and save','line_number':609,'multiline':False]
['text':' the number of keys in the index to compare against _validateIndexes()'s count results.','line_number':610,'multiline':False]
['text':' Validate the record store.','line_number':638,'multiline':False]
['text':' In traverseRecordStore(), the index validator keeps track the records in the record','line_number':647,'multiline':False]
['text':' store so that _validateIndexes() can confirm that the index entries match the records in','line_number':648,'multiline':False]
['text':' the collection. For clustered collections, the validator also verifies that the','line_number':649,'multiline':False]
['text':' record key (RecordId) matches the cluster key field in the record value (document's','line_number':650,'multiline':False]
['text':' cluster key).','line_number':651,'multiline':False]
['text':' Pause collection validation while a lock is held and between collection and index data','line_number':654,'multiline':False]
['text':' validation.','line_number':655,'multiline':False]
['text':'','line_number':656,'multiline':False]
['text':' The KeyStringIndexConsistency object saves document key information during collection','line_number':657,'multiline':False]
['text':' data validation and then compares against that key information during index data','line_number':658,'multiline':False]
['text':' validation. This fail point is placed in between them, in an attempt to catch any','line_number':659,'multiline':False]
['text':' inconsistencies that concurrent CRUD ops might cause if we were to have a bug.','line_number':660,'multiline':False]
['text':'','line_number':661,'multiline':False]
['text':' Only useful for background validation because we hold an intent lock instead of an','line_number':662,'multiline':False]
['text':' exclusive lock, and thus allow concurrent operations.','line_number':663,'multiline':False]
['text':' Validate indexes and check for mismatches.','line_number':677,'multiline':False]
['text':' Validate index key count.','line_number':694,'multiline':False]
['text':' At this point, validation is complete and successful.','line_number':702,'multiline':False]
['text':' Report the validation results for the user to see.','line_number':703,'multiline':False]
['text':' namespace CollectionValidation','line_number':738,'multiline':False]
['text':' namespace mongo','line_number':739,'multiline':False]
