['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' IWYU pragma: no_include "boost/container/detail/flat_tree.hpp"','line_number':41,'multiline':False]
['text':' IWYU pragma: no_include "boost/intrusive/detail/algorithm.hpp"','line_number':45,'multiline':False]
['text':' IWYU pragma: no_include "boost/intrusive/detail/iterator.hpp"','line_number':46,'multiline':False]
['text':' IWYU pragma: no_include "boost/move/algo/detail/set_difference.hpp"','line_number':47,'multiline':False]
['text':' IWYU pragma: no_include "boost/move/detail/iterator_to_raw_pointer.hpp"','line_number':49,'multiline':False]
['text':'*
 * Returns a key for the '_extraIndexEntries' and '_missingIndexEntries' maps. The key is a pair
 * of index name and the index key represented in KeyString form.
 * Using the index name is required as the index keys are passed in as KeyStrings which do not
 * contain field names.
 *
 * If we had the following document: { a: 1, b: 1 } with two indexes on keys "a" and "b", then
 * the KeyStrings for the index keys of the document would be identical as the field name in the
 * KeyString is not present. The BSON representation of this would look like: { : 1 } for both.
 * To distinguish these as different index keys, return a pair of index name and index key.
 ','line_number':109,'multiline':True]
['text':' We need to rehydrate the indexKey for improved readability.','line_number':126,'multiline':False]
['text':' {"": ObjectId(...)} -> {"_id": ObjectId(...)}','line_number':127,'multiline':False]
['text':' keysIt and valuesIt must have the same number of elements.','line_number':133,'multiline':False]
['text':' namespace','line_number':144,'multiline':False]
['text':' We'll report up to 1MB for extra index entry errors and missing index entry errors.','line_number':284,'multiline':False]
['text':' Sort missing index entries by size so we can process in order of increasing size and return','line_number':295,'multiline':False]
['text':' as many as possible within memory limits.','line_number':296,'multiline':False]
['text':' Inform which indexes have inconsistencies and add the BSON objects of the inconsistent index','line_number':309,'multiline':False]
['text':' entries to the results vector.','line_number':310,'multiline':False]
['text':' Sort extra index entries by size so we can process in order of increasing size and return as','line_number':350,'multiline':False]
['text':' many as possible within memory limits.','line_number':351,'multiline':False]
['text':' Since the extra entries are stored in a map of sets, we have to iterate the entries in the','line_number':354,'multiline':False]
['text':' map and sum the size of the sets in order to get the total number. Given that we can have at','line_number':355,'multiline':False]
['text':' most 64 indexes per collection, and the total number of entries could potentially be in the','line_number':356,'multiline':False]
['text':' millions, we expect that iterating the map will be much less costly than the additional','line_number':357,'multiline':False]
['text':' allocations and copies that could result from not calling 'reserve' on the vector.','line_number':358,'multiline':False]
['text':' Inform how many inconsistencies were detected.','line_number':404,'multiline':False]
['text':' Instantiate the multikey paths. Also indicates that this index uses multikeyPaths.','line_number':426,'multiline':False]
['text':' During the first phase of validation we only keep track of the count for the document','line_number':443,'multiline':False]
['text':' keys encountered.','line_number':444,'multiline':False]
['text':' Found a document key for a hash bucket that had mismatches.','line_number':463,'multiline':False]
['text':' Get the documents _id index key.','line_number':465,'multiline':False]
['text':' Cannot have duplicate KeyStrings during the document scan phase for the same index.','line_number':476,'multiline':False]
['text':' During the first phase of validation we only keep track of the count for the index entry','line_number':497,'multiline':False]
['text':' keys encountered.','line_number':498,'multiline':False]
['text':' Found an index key for a bucket that has inconsistencies.','line_number':517,'multiline':False]
['text':' If there is a corresponding document key for the index entry key, we remove the key from','line_number':518,'multiline':False]
['text':' the '_missingIndexEntries' map. However if there was no document key for the index entry','line_number':519,'multiline':False]
['text':' key, we add the key to the '_extraIndexEntries' map.','line_number':520,'multiline':False]
['text':' Removing extra index entries.','line_number':529,'multiline':False]
['text':' We may have multiple extra index entries for a given KeyString.','line_number':548,'multiline':False]
['text':' Prints the collection document's and index entry's metadata.','line_number':554,'multiline':False]
['text':' Allows twice the "maxValidateMemoryUsageMB" because each KeyString has two hashes stored.','line_number':581,'multiline':False]
['text':' The amount of memory we need is under the limit, so no need to do anything else.','line_number':583,'multiline':False]
['text':' At this point we know we'll exceed the memory limit, and will pare back some of the buckets.','line_number':587,'multiline':False]
['text':' First we'll see what the smallest bucket is, and if that's over the limit by itself, then','line_number':588,'multiline':False]
['text':' we can zero out all the other buckets. Otherwise we'll keep as many buckets as we can.','line_number':589,'multiline':False]
['text':' We're going to just keep the smallest bucket, and zero everything else.','line_number':603,'multiline':False]
['text':' We keep the smallest bucket.','line_number':607,'multiline':False]
['text':' We're going to scan through the buckets and keep as many as we can.','line_number':614,'multiline':False]
['text':' Including this bucket would put us over the memory limit, so zero this','line_number':623,'multiline':False]
['text':' bucket. We don't want to keep any entry that will exceed the memory limit in','line_number':624,'multiline':False]
['text':' the second phase so we don't double the 'maxMemoryUsageBytes' here.','line_number':625,'multiline':False]
['text':' Fetch the total number of index entries we previously found traversing the index.','line_number':648,'multiline':False]
['text':' Update numRecords by subtracting number of records removed from record store in repair mode','line_number':654,'multiline':False]
['text':' when validating index consistency','line_number':655,'multiline':False]
['text':' Hashed indexes may never be multikey.','line_number':666,'multiline':False]
['text':' Confirm that the number of index entries is not greater than the number of documents in the','line_number':674,'multiline':False]
['text':' collection. This check is only valid for indexes that are not multikey (indexed arrays','line_number':675,'multiline':False]
['text':' produce an index key per array entry) and not $** indexes which can produce index keys for','line_number':676,'multiline':False]
['text':' multiple paths within a single document.','line_number':677,'multiline':False]
['text':' Ignore any indexes with a special access method. If an access method name is given, the','line_number':687,'multiline':False]
['text':' index may be a full text, geo or special index plugin with different semantics.','line_number':688,'multiline':False]
['text':' Ensures that index entries are in increasing or decreasing order.','line_number':700,'multiline':False]
['text':' KeyStrings will be in strictly increasing order because all keys are sorted and they are in','line_number':709,'multiline':False]
['text':' the format (Key, RID), and all RecordIDs are unique.','line_number':710,'multiline':False]
['text':' Unique indexes must not have duplicate keys.','line_number':724,'multiline':False]
['text':' namespace','line_number':747,'multiline':False]
['text':' Ensure that this index has an open index cursor.','line_number':769,'multiline':False]
['text':' Warn about unique indexes with keys in old format (without record id).','line_number':794,'multiline':False]
['text':' Periodically checks for interrupts and yields.','line_number':837,'multiline':False]
['text':' Adjust multikey metadata when allowed. These states are all allowed by the design of','line_number':863,'multiline':False]
['text':' multikey. A collection should still be valid without these adjustments.','line_number':864,'multiline':False]
['text':' If this collection has documents that make this index multikey, then check whether those','line_number':867,'multiline':False]
['text':' multikey paths match the index's metadata.','line_number':868,'multiline':False]
['text':' Since we have the correct multikey path information for this index, we can tighten up','line_number':878,'multiline':False]
['text':' its metadata to improve query performance. This may apply in two distinct scenarios:','line_number':879,'multiline':False]
['text':' 1. Collection data has changed such that the current multikey paths on the index','line_number':880,'multiline':False]
['text':' are too permissive and certain document paths are no longer multikey.','line_number':881,'multiline':False]
['text':' 2. This index was built before 3.4, and there is no multikey path information for','line_number':882,'multiline':False]
['text':' the index. We can effectively 'upgrade' the index so that it does not need to be','line_number':883,'multiline':False]
['text':' rebuilt to update this information.','line_number':884,'multiline':False]
['text':' If this index does not need to be multikey, then unset the flag.','line_number':901,'multiline':False]
['text':' This makes an improvement in the case that no documents make the index multikey and','line_number':909,'multiline':False]
['text':' the flag can be unset entirely. This may be due to a change in the data or historical','line_number':910,'multiline':False]
['text':' multikey bugs that have persisted incorrect multikey infomation.','line_number':911,'multiline':False]
['text':' An empty set of multikey paths indicates that this index does not track path-level','line_number':1058,'multiline':False]
['text':' multikey information and we should do no tracking.','line_number':1059,'multiline':False]
['text':' namespace mongo','line_number':1110,'multiline':False]
