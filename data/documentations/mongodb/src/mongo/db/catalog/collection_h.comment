['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 * Holds information update an update operation.
 ','line_number':90,'multiline':True]
['text':' The unique sample id for this update if it has been chosen for sampling.','line_number':101,'multiline':False]
['text':' The document before modifiers were applied.','line_number':104,'multiline':False]
['text':' Fully updated document with damages (update modifiers) applied.','line_number':107,'multiline':False]
['text':' Document describing the update.','line_number':110,'multiline':False]
['text':' Document containing the _id field of the doc being updated.','line_number':113,'multiline':False]
['text':' Type of update. See OperationSource definition for more details.','line_number':116,'multiline':False]
['text':' Set if the diff insert operation needs to check for the field's existence.','line_number':124,'multiline':False]
['text':' Set if OpTimes were reserved for the update ahead of time.','line_number':127,'multiline':False]
['text':'*
 * A decorable object that is shared across all Collection instances for the same collection. There
 * may be several Collection instances simultaneously in existence representing different versions
 * of a collection's persisted state. A single instance of SharedCollectionDecorations will be
 * associated with all of the Collection instances for a collection, sharing whatever data may
 * decorate it across all point in time views of the collection.
 ','line_number':131,'multiline':True]
['text':'*
     * Direction of collection scan plan executor returned by makePlanExecutor().
     ','line_number':147,'multiline':True]
['text':'*
     * A Collection::Factory is a factory class that constructs Collection objects.
     ','line_number':155,'multiline':True]
['text':'*
         * Constructs a Collection object. This does not persist any state to the storage engine,
         * only constructs an in-memory representation of what already exists on disk.
         ','line_number':166,'multiline':True]
['text':'*
     * A Collection::Validator represents a filter that is applied to all documents that are
     * inserted. Enforcement of Validators being well formed is done lazily, so the 'Validator'
     * class may represent a validator which is not well formed.
     ','line_number':178,'multiline':True]
['text':'*
         * Returns whether the validator's filter is well formed.
         ','line_number':185,'multiline':True]
['text':'*
         * Returns OK or the error encounter when parsing the validator.
         ','line_number':192,'multiline':True]
['text':'*
         * Empty means no validator. This must outlive 'filter'.
         ','line_number':199,'multiline':True]
['text':'*
         * A special ExpressionContext used to evaluate the filter match expression. This should
         * outlive 'filter'.
         ','line_number':204,'multiline':True]
['text':'*
         * The collection validator MatchExpression. This is stored as a StatusWith, as we lazily
         * enforce that collection validators are well formed.
         *
         * -A non-OK Status indicates that the validator is not well formed, and any attempts to
         * enforce the validator should error.
         *
         * -A value of Status::OK/nullptr indicates that there is no validator.
         *
         * -Anything else indicates a well formed validator. The MatchExpression will maintain
         * pointers into _validatorDoc.
         *
         * Note: this is shared state across cloned Collection instances
         ','line_number':210,'multiline':True]
['text':'*
     * Clones this Collection instance. Some members are deep copied and some are shallow copied.
     * This should only be be called from the CollectionCatalog when it needs a writable collection.
     ','line_number':230,'multiline':True]
['text':'*
     * Fetches the shared state across Collection instances for the a collection. Returns an object
     * decorated by state shared across Collection instances for the same namespace. Its decorations
     * are unversioned (not associated with any point in time view of the collection) data related
     * to the collection.
     ','line_number':236,'multiline':True]
['text':'*
     * Initializes a collection representative at the provided read timestamp using the shared state
     * from an already existing, later collection.
     *
     * Returns the SnapshotTooOld error if the underlying data files have already been removed.
     ','line_number':246,'multiline':True]
['text':'*
     * Sets a new namespace on this Collection, in the case that the Collection is being renamed.
     * In general, reads and writes to Collection objects are synchronized using locks from the lock
     * manager. However, there is special synchronization for ns() and rename() so that the
     * CollectionCatalog can perform UUID to namespace lookup without holding a Collection lock. See
     * CollectionCatalog::onCollectionRename().
     ','line_number':263,'multiline':True]
['text':'*
     * Fetches the Ident for this collection.
     ','line_number':281,'multiline':True]
['text':'*
     * Sets the Ident for this collection.
     ','line_number':286,'multiline':True]
['text':'*
     * Returns 'kPass' with an ok Status if the document passes this collection's schema validator.
     *
     * Returns a non-ok Status if the document does not pass this collection's schema validator and
     * returns 'kWarn' or 'kError' based on the validation action.
     *
     * The validation action is set during collection creation and can be modified as part of
     * collMod. It determines whether we should error for documents that violate the schema
     * validation rules, or warn about, but allow invalid documents.
     ','line_number':293,'multiline':True]
['text':'*
     * Extension of `checkValidation` above which converts the tri-modal return value into either a
     * successful or failed status, printing warning if necessary.
     ','line_number':307,'multiline':True]
['text':'*
     * @param out - contents set to the right docs if exists, or nothing.
     * @return true iff loc exists
     ','line_number':318,'multiline':True]
['text':' -----------','line_number':332,'multiline':False]
['text':'*
     * removes all documents as fast as possible
     * indexes before and after will be the same
     * as will other characteristics.
     *
     * The caller should hold a collection X lock and ensure there are no index builds in progress
     * on the collection.
     ','line_number':334,'multiline':True]
['text':'*
     * Returns a non-ok Status if validator is not legal for this collection.
     ','line_number':344,'multiline':True]
['text':'*
     * Sets the validator for this collection.
     *
     * An empty validator removes all validation.
     * Requires an exclusive lock on the collection.
     ','line_number':353,'multiline':True]
['text':'*
     * Returns true if this is a temporary collection.
     ','line_number':378,'multiline':True]
['text':'*
     * Returns true if the time-series collection may have mixed-schema data.
     *
     * If FCV < 5.2 or if this is not a time-series collection, returns boost::none.
     ','line_number':383,'multiline':True]
['text':'*
     * Sets the 'timeseriesBucketsMayHaveMixedSchemaData' catalog entry flag to 'setting' for this
     * collection.
     *
     * Throws if this is not a time-series collection.
     ','line_number':390,'multiline':True]
['text':'*
     * Sets the 'timeseriesBucketingParametersHaveChanged' catalog entry flag to 'value' for this
     * collection.
     *
     * Throws if this is not a time-series collection.
     ','line_number':401,'multiline':True]
['text':'*
     * Returns true if the passed in time-series bucket document contains mixed-schema data.
     ','line_number':410,'multiline':True]
['text':'*
     * Returns true if the time-series collection may have dates outside the standard range (roughly
     * 1970-2038). The value may be updated in the background by another thread between calls, even
     * if the caller holds a lock on the collection. The value may only transition from false to
     * true.
     ','line_number':416,'multiline':True]
['text':'*
     * Sets the in-memory flag for this collection. This value can be retrieved by
     * 'getRequiresTimeseriesExtendedRangeSupport'.
     *
     * Throws if this is not a time-series collection.
     ','line_number':424,'multiline':True]
['text':'*
     * Returns true if the time-series collection was created with 'bucketRoundingSeconds' and
     * 'bucketMaxSpanSeconds', and none of the time-series options have been changed. The value may
     * only transition from true to false.
     ','line_number':432,'multiline':True]
['text':'
     * Returns true if this collection is clustered. That is, its RecordIds store the value of the
     * cluster key. If the collection is clustered on _id, there is no separate _id index.
     ','line_number':438,'multiline':True]
['text':'*
     * Updates the expireAfterSeconds setting for a clustered TTL index in this Collection and the
     * durable catalog.
     ','line_number':446,'multiline':True]
['text':'','line_number':457,'multiline':False]
['text':' Index','line_number':458,'multiline':False]
['text':'','line_number':459,'multiline':False]
['text':'*
     * Checks that the metadata for the index exists and matches the given spec.
     * Returns offset in metadata on success.
     ','line_number':461,'multiline':True]
['text':'
     * Updates the expireAfterSeconds field of the given index to the value in newExpireSecs.
     * The specified index must already contain an expireAfterSeconds field, and the value in
     * that field and newExpireSecs must both be numeric.
     ','line_number':468,'multiline':True]
['text':'
     * Hide or unhide the given index. A hidden index will not be considered for use by the
     * query planner.
     ','line_number':477,'multiline':True]
['text':'
     * Converts the the given index to be unique or non-unique.
     ','line_number':483,'multiline':True]
['text':'
     * Disallows or allows new duplicates in the given index.
     ','line_number':488,'multiline':True]
['text':'*
     * Repairs invalid index options on all indexes in this collection. Returns a list of
     * index names that were repaired.
     ','line_number':495,'multiline':True]
['text':'*
     * Updates the 'temp' setting for this collection.
     ','line_number':501,'multiline':True]
['text':'*
     * Removes the index 'indexName' from the persisted collection catalog entry identified by
     * 'catalogId'.
     ','line_number':506,'multiline':True]
['text':'*
     * Updates the persisted catalog entry for 'ns' with the new index and creates the index on
     * disk.
     *
     * A passed 'buildUUID' implies that the index is part of a two-phase index build.
     ','line_number':512,'multiline':True]
['text':'*
     * Returns a UUID if the index is being built with the two-phase index build procedure.
     ','line_number':523,'multiline':True]
['text':'*
     * Returns true if the index identified by 'indexName' is multikey, and returns false otherwise.
     *
     * If the 'multikeyPaths' pointer is non-null, then it must point to an empty vector. If this
     * index type supports tracking path-level multikey information in the catalog, then this
     * function sets 'multikeyPaths' as the path components that cause this index to be multikey.
     *
     * In particular, if this function returns false and the index supports tracking path-level
     * multikey information, then 'multikeyPaths' is initialized as a vector with size equal to the
     * number of elements in the index key pattern of empty sets.
     ','line_number':528,'multiline':True]
['text':'*
     * Sets the index identified by 'indexName' to be multikey.
     *
     * If 'multikeyPaths' is non-empty, then it must be a vector with size equal to the number of
     * elements in the index key pattern. Additionally, at least one path component of the indexed
     * fields must cause this index to be multikey.
     *
     * This function returns true if the index metadata has changed, and returns false otherwise.
     ','line_number':544,'multiline':True]
['text':'*
     * Sets the index to be multikey with the provided paths. This performs minimal validation of
     * the inputs and is intended to be used internally to "correct" multikey metadata that drifts
     * from the underlying collection data.
     *
     * When isMultikey is false, ignores multikeyPaths and resets the metadata appropriately based
     * on the index descriptor. Otherwise, overwrites the existing multikeyPaths with the ones
     * provided. This only writes multikey paths if the index type supports path-level tracking, and
     * only sets the multikey boolean flag otherwise.
     ','line_number':558,'multiline':True]
['text':'*
     * Sanitizes the collection options in order to remove parameters that are local to this mongod
     * instance.
     ','line_number':592,'multiline':True]
['text':'*
     * Specifies whether writes to this collection should X-lock the metadata resource. It is only
     * set for replicated, non-clustered capped collections. Such collections require writes to be
     * serialized on the secondary in order to guarantee insertion order (SERVER-21483). This
     * exclusive access to the metadata resource prevents the primary from executing with more
     * concurrency than secondaries - thus helping secondaries keep up, and protects the
     * 'cappedFirstRecord' value for the collection. See SERVER-21646.
     *
     * On the other hand, capped clustered collections with a monotonically increasing cluster key
     * natively guarantee preservation of the insertion order, and don't need serialisation, so we
     * allow concurrent inserts for clustered capped collections.
     ','line_number':598,'multiline':True]
['text':'*
     * Checks whether the collection is capped and if the current data size or number of records
     * exceeds cappedMaxSize or cappedMaxDocs respectively.
     ','line_number':612,'multiline':True]
['text':'*
     * When true, this collection uses the CappedSnapshots API to track concurrent writes and safely
     * handle visibility for readers.
     ','line_number':618,'multiline':True]
['text':'*
     * When we write to a capped collection, we call this so that that the storage engine can manage
     * the visibility of documents to ensure they are ordered by RecordId.
     *
     * Since this is called inside of a WriteUnitOfWork while holding a std::mutex, it is
     * illegal to acquire any LockManager locks inside of this function.
     ','line_number':627,'multiline':True]
['text':'','line_number':645,'multiline':False]
['text':' Stats','line_number':646,'multiline':False]
['text':'','line_number':647,'multiline':False]
['text':'*
     * Return uncompressed collection data size in bytes
     ','line_number':655,'multiline':True]
['text':'*
     * Returns true if the collection does not contain any records.
     ','line_number':660,'multiline':True]
['text':'*
     * Return the average object size in bytes
     ','line_number':665,'multiline':True]
['text':'*
     * Returns the number of unused, free bytes used by all indexes on disk.
     ','line_number':674,'multiline':True]
['text':'*
     * Get the timestamp this Collection instance was most recently changed at.
     ','line_number':679,'multiline':True]
['text':'*
     * Sets the timestamp this Collection instance was most recently changed at.
     ','line_number':684,'multiline':True]
['text':'*
     * Returns the time-series options for this buckets collection, or boost::none if not a
     * time-series buckets collection.
     ','line_number':689,'multiline':True]
['text':'*
     * Sets the time-series options for this buckets collection.
     ','line_number':695,'multiline':True]
['text':'*
     * Get a pointer to the collection's default collator. The pointer must not be used after this
     * Collection is destroyed.
     ','line_number':701,'multiline':True]
['text':'*
     * Returns a cached version of the Collection MetaData that matches the version of this
     * Collection instance.
     ','line_number':707,'multiline':True]
['text':'*
     * Fills in each index specification with collation information from this collection and returns
     * the new index specifications.
     *
     * The returned index specifications will not be equivalent to the ones specified in
     * 'indexSpecs' if any missing collation information were filled in; however, the returned index
     * specifications will match the form stored in the IndexCatalog should any of these indexes
     * already exist.
     ','line_number':713,'multiline':True]
['text':'*
     * Called when this Collection is deregistered from the catalog
     ','line_number':729,'multiline':True]
['text':'*
 * Smart-pointer'esque type to handle yielding of Collection lock that may invalidate pointers when
 * resuming. CollectionPtr will re-load the Collection from the Catalog when restoring from a yield
 * that dropped locks.
 ','line_number':739,'multiline':True]
['text':' Function for the implementation on how we load a new Collection pointer when restoring from','line_number':748,'multiline':False]
['text':' yield','line_number':749,'multiline':False]
['text':' Creates non-yieldable CollectionPtr, performing yield/restore will invariant. To make this','line_number':752,'multiline':False]
['text':' CollectionPtr yieldable call `makeYieldable` and provide appropriate implementation depending','line_number':753,'multiline':False]
['text':' on context.','line_number':754,'multiline':False]
['text':' Makes this CollectionPtr yieldable. The RestoreFn provides an implementation on how to setup','line_number':782,'multiline':False]
['text':' the correct state after yield and fetches the internal Collection pointer.','line_number':783,'multiline':False]
['text':' TODO SERVER-79296 remove sharding info from CollectionPtr','line_number':802,'multiline':False]
['text':' These members needs to be mutable so the yield/restore interface can be const. We don't want','line_number':808,'multiline':False]
['text':' yield/restore to require a non-const instance when it otherwise could be const.','line_number':809,'multiline':False]
['text':' If the collection is currently in the 'yielded' state (i.e. yield() has been called), this','line_number':812,'multiline':False]
['text':' field will contain what was the UUID of the collection at the time of yield.','line_number':813,'multiline':False]
['text':' Stores a consistent view of shard key with the collection that will be needed during the','line_number':819,'multiline':False]
['text':' operation. If _shardKeyPattern is set, that indicates that the collection is sharded.','line_number':820,'multiline':False]
['text':'*
 * Returns a collator for the user-specified collation 'userCollation'.
 *
 * Note: The caller should check if 'userCollation' is not empty since the empty 'userCollation'
 * has the special meaning that the query follows the collection default collation that exists.
 ','line_number':838,'multiline':True]
['text':'*
 * Resolves the collator to either the user-specified collation or, if none was specified, to
 * the collection-default collation and also returns a flag indicating whether the user-provided
 * collation matches the collection default collation.
 ','line_number':851,'multiline':True]
['text':' namespace mongo','line_number':859,'multiline':False]
