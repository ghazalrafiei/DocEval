['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' IWYU pragma: keep','line_number':45,'multiline':False]
['text':' This failpoint causes the check for TTL indexes on capped collections to be ignored.','line_number':131,'multiline':False]
['text':'*
 * Similar to _isSpecOK(), checks if the indexSpec is valid, conflicts, or already exists as a
 * clustered index.
 *
 * Returns Status::OK() if no clustered index exists or the 'indexSpec' does not conflict with it.
 * Returns ErrorCodes::IndexAlreadyExists if the 'indexSpec' already exists as the clustered index.
 * Returns an error if the indexSpec fields conflict with the clustered index.
 ','line_number':143,'multiline':True]
['text':' The 'clustered' option implies the indexSpec must match the clustered index.','line_number':160,'multiline':False]
['text':' The indexes don't conflict at all.','line_number':171,'multiline':False]
['text':' The collection is guaranteed to be clustered since at least the name or key matches a','line_number':181,'multiline':False]
['text':' clustered index.','line_number':182,'multiline':False]
['text':' Prohibit creating an index with the same 'name' as the cluster key but different key','line_number':186,'multiline':False]
['text':' pattern.','line_number':187,'multiline':False]
['text':' Users should be able to call createIndexes on the cluster key. If a name isn't specified, a','line_number':195,'multiline':False]
['text':' default one is generated. Silently ignore mismatched names.','line_number':196,'multiline':False]
['text':' The indexSpec matches the clustered index, which already exists implicitly.','line_number':212,'multiline':False]
['text':' namespace','line_number':216,'multiline':False]
['text':' -------------','line_number':218,'multiline':False]
['text':' TTL indexes with an invalid 'expireAfterSeconds' field cause problems in multiversion','line_number':257,'multiline':False]
['text':' settings.','line_number':258,'multiline':False]
['text':' Note that TTL deletion is supported on capped clustered collections via bounded','line_number':275,'multiline':False]
['text':' collection scan, which does not use an index.','line_number':276,'multiline':False]
['text':' When initializing the indexes at the latest timestamp for existing collections,','line_number':303,'multiline':False]
['text':' the only non-ready indexes will be two-phase index builds. Unfinished','line_number':304,'multiline':False]
['text':' single-phase index builds are dropped during startup and rollback.','line_number':305,'multiline':False]
['text':' We intentionally do not drop or rebuild unfinished two-phase index builds before','line_number':312,'multiline':False]
['text':' initializing the IndexCatalog when starting a replica set member in standalone mode.','line_number':313,'multiline':False]
['text':' This is because the index build cannot complete until it receives a replicated commit','line_number':314,'multiline':False]
['text':' or abort oplog entry. When performing a point-in-time read, this non-ready index may','line_number':315,'multiline':False]
['text':' represent a single-phase index build.','line_number':316,'multiline':False]
['text':' Indicate that this index is "frozen". It is not ready but is not currently in','line_number':318,'multiline':False]
['text':' progress either. These indexes may be dropped.','line_number':319,'multiline':False]
['text':' Initializing with unfinished indexes may occur during rollback or startup.','line_number':325,'multiline':False]
['text':' When instantiating a collection for point-in-time reads the collection instance can be using','line_number':339,'multiline':False]
['text':' shared state, so we clear the query plan cache and rebuild it.','line_number':340,'multiline':False]
['text':' If the caller only wants the ready indexes, we return an iterator over the catalog's','line_number':351,'multiline':False]
['text':' ready indexes vector. When the user advances this iterator, it will filter out any','line_number':352,'multiline':False]
['text':' indexes that were not ready at the OperationContext's read timestamp.','line_number':353,'multiline':False]
['text':' If the caller doesn't only want the ready indexes, for simplicity of implementation, we copy','line_number':358,'multiline':False]
['text':' the pointers to a new vector. The vector's ownership is passed to the iterator. The query','line_number':359,'multiline':False]
['text':' code path from an external client is not expected to hit this case so the cost isn't paid by','line_number':360,'multiline':False]
['text':' the important code path.','line_number':361,'multiline':False]
['text':' This assert will be triggered when downgrading from a future version that','line_number':388,'multiline':False]
['text':' supports an index plugin unsupported by this version.','line_number':389,'multiline':False]
['text':' ---------------------------','line_number':399,'multiline':False]
['text':' we double check with new index spec','line_number':414,'multiline':False]
['text':' Check whether the replica set member's config has {buildIndexes:false} set, which means','line_number':435,'multiline':False]
['text':' we are not allowed to build non-_id indexes on this server.','line_number':436,'multiline':False]
['text':' We return an IndexAlreadyExists error so that the caller can catch it and silently','line_number':438,'multiline':False]
['text':' skip building it.','line_number':439,'multiline':False]
['text':' Report the ready indexes.','line_number':463,'multiline':False]
['text':' Report the in-progress indexes.','line_number':472,'multiline':False]
['text':' Normalise the spec','line_number':516,'multiline':False]
['text':' Check whether this is a TTL index being created on a capped collection.','line_number':519,'multiline':False]
['text':' Check whether this is a non-_id index and there are any settings disallowing this server','line_number':528,'multiline':False]
['text':' from building non-_id indexes.','line_number':529,'multiline':False]
['text':' First check against only the ready indexes for conflicts.','line_number':535,'multiline':False]
['text':' Don't check against unfinished indexes if this index is being resumed, since it will','line_number':542,'multiline':False]
['text':' conflict with itself.','line_number':543,'multiline':False]
['text':' Now we will check against all indexes, in-progress included.','line_number':547,'multiline':False]
['text':'','line_number':548,'multiline':False]
['text':' The index catalog cannot currently iterate over only in-progress indexes. So by previously','line_number':549,'multiline':False]
['text':' checking against only ready indexes without error, we know that any errors encountered','line_number':550,'multiline':False]
['text':' checking against all indexes occurred due to an in-progress index.','line_number':551,'multiline':False]
['text':' Callers need to be able to distinguish conflicts against ready indexes versus','line_number':560,'multiline':False]
['text':' in-progress indexes.','line_number':561,'multiline':False]
['text':' Filter out ready and in-progress index builds, and any non-_id indexes if 'buildIndexes' is','line_number':576,'multiline':False]
['text':' set to false in the replica set's config.','line_number':577,'multiline':False]
['text':' returned to be built by the caller.','line_number':579,'multiline':False]
['text':' _doesSpecConflictWithExisting currently does more work than we require here: we are only','line_number':584,'multiline':False]
['text':' interested in the index already exists error.','line_number':585,'multiline':False]
['text':' Normalise the spec','line_number':586,'multiline':False]
['text':' If running inside a --repair operation, throw an error so the operation can attempt to','line_number':628,'multiline':False]
['text':' remove any invalid options from the index specification. Any other types of invalid index','line_number':629,'multiline':False]
['text':' specifications, e.g. not specifying a name for the index, will crash the server.','line_number':630,'multiline':False]
['text':' In some cases, it may be necessary to update the index metadata in the storage engine in','line_number':656,'multiline':False]
['text':' order to obtain the correct SortedDataInterface. One such scenario is found in converting an','line_number':657,'multiline':False]
['text':' index to be unique.','line_number':658,'multiline':False]
['text':' now going to touch disk','line_number':700,'multiline':False]
['text':'forRecovery=','line_number':704,'multiline':True]
['text':' sanity checks, etc...','line_number':708,'multiline':False]
['text':' sanity check','line_number':719,'multiline':False]
['text':'*
 * Recursive function which confirms whether 'expression' is valid for use in partial indexes.
 * Recursion is restricted to 'internalPartialFilterExpressionMaxDepth' levels.
 ','line_number':730,'multiline':True]
['text':'*
 * Adjust the provided index spec BSONObj depending on the type of index obj describes.
 *
 * This is a no-op unless the object describes a TEXT or a GEO_2DSPHERE index.  TEXT and
 * GEO_2DSPHERE provide additional validation on the index spec, and tweak the index spec
 * object to conform to their expected format.
 ','line_number':786,'multiline':True]
['text':' namespace','line_number':840,'multiline':False]
['text':' namespace','line_number':862,'multiline':False]
['text':' logical name of the index','line_number':912,'multiline':False]
['text':' With our testing failpoint we may try to run this code before we've initialized','line_number':984,'multiline':False]
['text':' the FCV.','line_number':985,'multiline':False]
['text':' Create an ExpressionContext, used to parse the match expression and to house the collator for','line_number':994,'multiline':False]
['text':' the remaining checks.','line_number':995,'multiline':False]
['text':' Ensure if there is a filter, its valid.','line_number':999,'multiline':False]
['text':' Parsing the partial filter expression is not expected to fail here since the','line_number':1012,'multiline':False]
['text':' expression would have been successfully parsed upstream during index creation.','line_number':1013,'multiline':False]
['text':' Clustered collections require checks to ensure the spec does not conflict with the','line_number':1032,'multiline':False]
['text':' implicit clustered index that exists on the clustered collection.','line_number':1033,'multiline':False]
['text':' --- only storage engine checks allowed below this ----','line_number':1069,'multiline':False]
['text':' Not an error, but the spec is already validated against the collection options by','line_number':1106,'multiline':False]
['text':' _isSpecOK now and we know that if 'clustered' is true, then the index already exists.','line_number':1107,'multiline':False]
['text':' Check whether an index with the specified candidate name already exists in the catalog.','line_number':1112,'multiline':False]
['text':' Index already exists with same name. Check whether the options are the same as well.','line_number':1116,'multiline':False]
['text':' Key pattern or another uniquely-identifying option differs. We can build this index,','line_number':1123,'multiline':False]
['text':' but not with the specified (duplicate) name. User must specify another index name.','line_number':1124,'multiline':False]
['text':' The candidate's key and uniquely-identifying options are equivalent to an existing','line_number':1135,'multiline':False]
['text':' index, but some other options are not identical. Return a message to that effect.','line_number':1136,'multiline':False]
['text':' If we've reached this point, the requested index is identical to an existing index.','line_number':1144,'multiline':False]
['text':' If an identical index exists, but it is frozen, return an error with a different','line_number':1147,'multiline':False]
['text':' error code to the user, forcing the user to drop before recreating the index.','line_number':1148,'multiline':False]
['text':' Index already exists with the same options, so there is no need to build a new one.','line_number':1157,'multiline':False]
['text':' This is not an error condition.','line_number':1158,'multiline':False]
['text':' No index with the candidate name exists. Check for an index with conflicting options.','line_number':1165,'multiline':False]
['text':' Index already exists with a different name. Check whether the options are identical.','line_number':1176,'multiline':False]
['text':' We will return an error in either case, but this check allows us to generate a more','line_number':1177,'multiline':False]
['text':' informative error message.','line_number':1178,'multiline':False]
['text':' The candidate's key and uniquely-identifying options are equivalent to an existing','line_number':1185,'multiline':False]
['text':' index, but some other options are not identical. Return a message to that effect.','line_number':1186,'multiline':False]
['text':' If we've reached this point, the requested index is identical to an existing index.','line_number':1193,'multiline':False]
['text':' An identical index already exists with a different name. We cannot build this index.','line_number':1196,'multiline':False]
['text':' Refuse to build text index if another text index exists or is in progress.','line_number':1214,'multiline':False]
['text':' Collections should only have one text index.','line_number':1215,'multiline':False]
['text':' Creating an index with the "collation" option requires a v=2 index.','line_number':1240,'multiline':False]
['text':' If the onDrop function creates an oplog entry, it should run first so that the drop is','line_number':1290,'multiline':False]
['text':' timestamped at the same optime.','line_number':1291,'multiline':False]
['text':' verify state is sane post cleaning','line_number':1298,'multiline':False]
['text':' Only indexes that aren't ready can be reset.','line_number':1341,'multiline':False]
['text':' Drop the ident if it exists. The storage engine will return OK if the ident is not found.','line_number':1365,'multiline':False]
['text':' Recreate the ident on-disk. DurableCatalog::createIndex() will lookup the ident internally','line_number':1373,'multiline':False]
['text':' using the catalogId and index name.','line_number':1374,'multiline':False]
['text':' Update the index entry state in preparation to rebuild the index.','line_number':1384,'multiline':False]
['text':' Pulling indexName out as it is needed post descriptor release.','line_number':1413,'multiline':False]
['text':' getSharedIdent() returns a nullptr for unfinished index builds. These indexes can be','line_number':1458,'multiline':False]
['text':' removed immediately as they weren't ready for use yet.','line_number':1459,'multiline':False]
['text':' ---------------------------','line_number':1475,'multiline':False]
['text':' namespace mongo','line_number':1538,'multiline':False]
['text':' This collection instance already uniquely owns this IndexCatalogEntry, return it.','line_number':1609,'multiline':False]
['text':' Delete the IndexCatalogEntry that owns this descriptor. After deletion, 'oldDesc' is invalid','line_number':1653,'multiline':False]
['text':' and should not be dereferenced. Also, invalidate the index from the','line_number':1654,'multiline':False]
['text':' CollectionIndexUsageTrackerDecoration (shared state among Collection instances).','line_number':1655,'multiline':False]
['text':' Ask the CollectionCatalogEntry for the new index spec.','line_number':1665,'multiline':False]
['text':' Re-register this index in the index catalog with the new spec. Also, add the new index','line_number':1669,'multiline':False]
['text':' to the CollectionIndexUsageTrackerDecoration (shared state among Collection instances).','line_number':1670,'multiline':False]
['text':' Last rebuild index data for CollectionQueryInfo for this Collection.','line_number':1679,'multiline':False]
['text':' Return the new descriptor.','line_number':1682,'multiline':False]
['text':' ---------------------------','line_number':1686,'multiline':False]
['text':' Skip the _id index by default.','line_number':1710,'multiline':False]
['text':' TODO SERVER-80257: This failpoint was added to produce index corruption scenarios where an','line_number':1741,'multiline':False]
['text':' index has incorrect keys. Replace this failpoint with a test command instead.','line_number':1742,'multiline':False]
['text':' Tests can enable this failpoint to produce index corruption scenarios where an index has','line_number':1792,'multiline':False]
['text':' extra keys.','line_number':1793,'multiline':False]
['text':' For vectored inserts, we insert index keys and flip multikey in "index order". However','line_number':1833,'multiline':False]
['text':' because multikey state for different indexes both live on the same _mdb_catalog document,','line_number':1834,'multiline':False]
['text':' index order isn't necessarily timestamp order. We track multikey paths here to ensure we make','line_number':1835,'multiline':False]
['text':' changes to the _mdb_catalog document with in timestamp order updates.','line_number':1836,'multiline':False]
['text':' Take care when choosing to aggregate multikey writes. This code will only* track multikey','line_number':1839,'multiline':False]
['text':' when:','line_number':1840,'multiline':False]
['text':' * No parent is tracking multikey and*','line_number':1841,'multiline':False]
['text':' * There are timestamps associated with the input `bsonRecords`.','line_number':1842,'multiline':False]
['text':'','line_number':1843,'multiline':False]
['text':' If we are not responsible for tracking multikey:','line_number':1844,'multiline':False]
['text':' * Leave the multikey tracker in its original "tracking" state.','line_number':1845,'multiline':False]
['text':' * Not write any accumulated multikey paths to the _mdb_catalog document.','line_number':1846,'multiline':False]
['text':' If it's a background index, we DO NOT want to log anything.','line_number':1976,'multiline':False]
['text':' Don't allow dups for Id key. Allow dups for non-unique keys or when constraints relaxed.','line_number':2041,'multiline':False]
['text':' This function can be called inside of a WriteUnitOfWork, which can still encounter a write','line_number':2054,'multiline':False]
['text':' conflict. We don't need to reset any in-memory state as a new writable collection is fetched','line_number':2055,'multiline':False]
['text':' when retrying.','line_number':2056,'multiline':False]
['text':' We've already verified in IndexCatalog::_isSpecOk() that the index version is present and','line_number':2076,'multiline':False]
['text':' that it is representable as a 32-bit integer.','line_number':2077,'multiline':False]
['text':' normalize to bool true in case was int 1 or something...','line_number':2084,'multiline':False]
['text':' normalize to bool true in case was int 1 or something...','line_number':2087,'multiline':False]
['text':' normalize to bool true in case was int 1 or something...','line_number':2091,'multiline':False]
['text':' During repair, if the 'ns' field exists in the index spec, do not remove it as repair can be','line_number':2102,'multiline':False]
['text':' running on old data files from other mongod versions. Removing the 'ns' field during repair','line_number':2103,'multiline':False]
['text':' would prevent the data files from starting up on the original mongod version as the 'ns'','line_number':2104,'multiline':False]
['text':' field is required to be present in 3.6 and 4.0.','line_number':2105,'multiline':False]
['text':' skip','line_number':2117,'multiline':False]
['text':' dropDups is silently ignored and removed from the spec as of SERVER-14710.','line_number':2119,'multiline':False]
['text':' ns is removed from the spec as of 4.4.','line_number':2120,'multiline':False]
['text':' covered above','line_number':2123,'multiline':False]
['text':' namespace mongo','line_number':2133,'multiline':False]
