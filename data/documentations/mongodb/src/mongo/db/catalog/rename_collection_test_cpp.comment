['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 * Mock OpObserver that tracks dropped collections and databases.
 * Since this class is used exclusively to test dropDatabase(), we will also check the drop-pending
 * flag in the Database object being tested (if provided).
 ','line_number':94,'multiline':True]
['text':' Operations written to the oplog. These are operations for which','line_number':177,'multiline':False]
['text':' ReplicationCoordinator::isOplogDisabled() returns false.','line_number':178,'multiline':False]
['text':'*
     * Pushes 'operationName' into 'oplogEntries' if we can write to the oplog for this namespace.
     ','line_number':191,'multiline':True]
['text':' If the oplog is not disabled for this namespace, then we need to reserve an op time for the','line_number':277,'multiline':False]
['text':' drop.','line_number':278,'multiline':False]
['text':'markFromMigrate=','line_number':345,'multiline':True]
['text':' static','line_number':380,'multiline':False]
['text':' Set up mongod.','line_number':386,'multiline':False]
['text':' Set up ReplicationCoordinator and create oplog.','line_number':397,'multiline':False]
['text':' Ensure that we are primary.','line_number':403,'multiline':False]
['text':' Use OpObserverMock to track notifications for collection and database drops.','line_number':406,'multiline':False]
['text':'*
 * Creates a collection without any namespace restrictions.
 ','line_number':428,'multiline':True]
['text':'*
 * Returns a collection options with a generated UUID.
 ','line_number':450,'multiline':True]
['text':'*
 * Creates a collection with UUID and returns the UUID.
 ','line_number':459,'multiline':True]
['text':'*
 * Returns true if collection exists.
 ','line_number':468,'multiline':True]
['text':'*
 * Returns collection options.
 ','line_number':475,'multiline':True]
['text':'*
 * Returns UUID of collection.
 ','line_number':485,'multiline':True]
['text':'*
 * Get collection namespace by UUID.
 ','line_number':494,'multiline':True]
['text':'*
 * Returns true if namespace refers to a temporary collection.
 ','line_number':502,'multiline':True]
['text':'*
 * Creates an index on an empty collection using the given index name with a bogus key spec.
 ','line_number':513,'multiline':True]
['text':'*
 * Inserts a single document into a collection.
 ','line_number':540,'multiline':True]
['text':' Source collections stays in drop-pending state.','line_number':573,'multiline':False]
['text':' Using XXXXX to check namespace length. Each 'X' will be replaced by a random character in','line_number':608,'multiline':False]
['text':' renameCollection().','line_number':609,'multiline':False]
['text':' Source collections stays in drop-pending state.','line_number':640,'multiline':False]
['text':' Source collections stays in drop-pending state.','line_number':660,'multiline':False]
['text':' Rename A to B, drop C, where B is not an existing collection','line_number':697,'multiline':False]
['text':' A and C should be dropped','line_number':701,'multiline':False]
['text':' B (originally A) should exist','line_number':704,'multiline':False]
['text':' collAUUID should be associated with collB's NamespaceString in the CollectionCatalog.','line_number':706,'multiline':False]
['text':' Rename A to B, drop C, where B is an existing collection','line_number':719,'multiline':False]
['text':' B should be kept but with a temporary name','line_number':720,'multiline':False]
['text':' A and C should be dropped','line_number':724,'multiline':False]
['text':' B (originally A) should exist','line_number':727,'multiline':False]
['text':' The original B should exist too, but with a temporary name','line_number':729,'multiline':False]
['text':' Rename A to B, drop C, where B is an existing collection','line_number':751,'multiline':False]
['text':' B should be kept but with a temporary name','line_number':752,'multiline':False]
['text':' A and C should be dropped','line_number':756,'multiline':False]
['text':' B (originally A) should exist','line_number':759,'multiline':False]
['text':' The original B should exist too, but with a temporary name','line_number':761,'multiline':False]
['text':' Rename A to B, drop C, where B is an existing collection','line_number':777,'multiline':False]
['text':' B should be kept but with a temporary name','line_number':778,'multiline':False]
['text':' A and C should be dropped','line_number':782,'multiline':False]
['text':' B (originally A) should exist','line_number':784,'multiline':False]
['text':' The original B should exist too, but with a temporary name','line_number':786,'multiline':False]
['text':'*
 * Checks oplog entries written by the OpObserver to the oplog.
 ','line_number':947,'multiline':True]
['text':'*
 * Runs a rename across database operation and checks oplog entries written to the oplog.
 ','line_number':969,'multiline':True]
['text':' Empty collections generate createIndexes oplog entry even if the node','line_number':999,'multiline':False]
['text':' supports 2 phase index build.','line_number':1000,'multiline':False]
['text':' Empty collections generate createIndexes oplog entry even if the node','line_number':1013,'multiline':False]
['text':' supports 2 phase index build.','line_number':1014,'multiline':False]
['text':' Empty collections generate createIndexes oplog entry even if the node','line_number':1028,'multiline':False]
['text':' supports 2 phase index build.','line_number':1029,'multiline':False]
['text':' Empty collections generate createIndexes oplog entry even if the node','line_number':1043,'multiline':False]
['text':' supports 2 phase index build.','line_number':1044,'multiline':False]
['text':' Empty Collections generate createIndexes oplog entry even if the node','line_number':1087,'multiline':False]
['text':' supports 2 phase index build.','line_number':1088,'multiline':False]
['text':' This simulates the case when renameCollection is called using the applyOps command (different','line_number':1101,'multiline':False]
['text':' from secondary oplog application).','line_number':1102,'multiline':False]
['text':' Create a namespace that is not in the form "database.collection".','line_number':1137,'multiline':False]
['text':' Used for sharded rename.','line_number':1160,'multiline':False]
['text':' Used for sharded rename.','line_number':1180,'multiline':False]
['text':' A tid field supersedes tenantIds maintained in source or target, ie. we don't take into','line_number':1224,'multiline':False]
['text':' account the tenantId from the _sourceNssTid or targetNssTid objects, only the _tenantId obj.','line_number':1225,'multiline':False]
['text':' This makes it impossible to mismatch tenantIds between source and target if the only tenantId','line_number':1226,'multiline':False]
['text':' being considered is common to both; if it doesn't match the source, rename will fail being','line_number':1227,'multiline':False]
['text':' unable to locate the source collection.  If the targetNss tenantId doesn't match, well we're','line_number':1228,'multiline':False]
['text':' going to rename the db/collection within the _tenantId, so this effectively ensures it isn't','line_number':1229,'multiline':False]
['text':' possible to rename across tenantIds.','line_number':1230,'multiline':False]
['text':' This test only has a single tenantId that belongs to neither source nor target.','line_number':1247,'multiline':False]
['text':' A tid field supersedes tenantIds maintained in source or target. See above.','line_number':1264,'multiline':False]
['text':' A tid field supersedes tenantIds maintained in source or target. See above.','line_number':1284,'multiline':False]
['text':' A tid field supersedes tenantIds maintained in source or target. See above.','line_number':1305,'multiline':False]
['text':' A tid field supersedes tenantIds maintained in source or target. See above.','line_number':1334,'multiline':False]
['text':' This test is valid during the transition period, before featureFlagRequireTenantID is','line_number':1357,'multiline':False]
['text':' enforced, and will prefix the tenantIds onto the ns fields.','line_number':1358,'multiline':False]
['text':' Renaming collections across tenantIds is not allowed','line_number':1372,'multiline':False]
['text':' namespace','line_number':1379,'multiline':False]
['text':' namespace mongo','line_number':1380,'multiline':False]
