['text':'*
 *    Copyright (C) 2019-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' IWYU pragma: no_include "ext/alloc_traits.h"','line_number':33,'multiline':False]
['text':' Create collection kNss for unit tests to use. It will possess a default _id index.','line_number':103,'multiline':False]
['text':' Calling verify() is not possible on an ephemeral instance.','line_number':110,'multiline':False]
['text':'*
 * Calls validate on collection nss with both kValidateFull and kValidateNormal validation levels
 * and verifies the results.
 *
 * Returns the list of validation results.
 ','line_number':116,'multiline':True]
['text':'additionalOptions=','line_number':141,'multiline':True]
['text':'logDiagnostics=','line_number':144,'multiline':True]
['text':' debugging ','line_number':147,'multiline':True]
['text':'*
 * Inserts a range of documents into the nss collection and then returns that count. The range is
 * defined by [startIDNum, startIDNum+numDocs), not inclusive of (startIDNum+numDocs), using the
 * numbers as values for '_id' of the document being inserted followed by numFields fields.
 ','line_number':184,'multiline':True]
['text':'*
 * Inserts a range of documents into the kNss collection and then returns that count. The range is
 * defined by [startIDNum, endIDNum), not inclusive of endIDNum, using the numbers as values for
 * '_id' of the document being inserted.
 ','line_number':215,'multiline':True]
['text':'*
 * Inserts a single invalid document into the kNss collection and then returns that count.
 ','line_number':228,'multiline':True]
['text':'*
 * Convenience function to convert ValidateResults to a BSON object.
 ','line_number':247,'multiline':True]
['text':' debugging ','line_number':252,'multiline':True]
['text':'*
     * This method decorates the execution of column-store index validation tests. It works by
     * 1) creating an 'nss' namespace with a column-store index, 2) inserting documents into this
     * namespace (via calling 'insertDocsFn'), 3) running validation on this collection and making
     * sure it's valid, 4) running 'modifyIndexContentsFn', and 5) running 'postCheckFn', which
     * usually contains an index validation call with relevant assertions.
     *
     * Returns the list of validation results.
     ','line_number':267,'multiline':True]
['text':' Durable catalog expects metadata updates to be timestamped but this is','line_number':288,'multiline':False]
['text':' not necessary in our case - we just want to check the contents of the index table.','line_number':289,'multiline':False]
['text':' The alternative here would be to provide a commit timestamp with a TimestamptBlock.','line_number':290,'multiline':False]
['text':' Validate the collection here as a sanity check before we modify the index contents','line_number':299,'multiline':False]
['text':' in-place.','line_number':300,'multiline':False]
['text':'valid','line_number':303,'multiline':True]
['text':'numRecords','line_number':304,'multiline':True]
['text':'numInvalidDocuments','line_number':305,'multiline':True]
['text':'numErrors','line_number':306,'multiline':True]
['text':'*
     * Represents a fault where an index entry is deleted.
     ','line_number':328,'multiline':True]
['text':'*
     * Represents a fault where an index entry is additionally inserted.
     ','line_number':333,'multiline':True]
['text':' This value is inserted in the target index cell.','line_number':337,'multiline':False]
['text':'*
     * Represents a fault where the value of an index entry is replaced with a wrong value.
     ','line_number':343,'multiline':True]
['text':' The actual index value is replaced with this given value in the target index cell.','line_number':347,'multiline':False]
['text':'*
     * Represents an index corruption in field represented by 'fieldIndex' for a document with id
     * equals to 'docIndex'. The actual fault can be one of the 'DeletionFault', 'InsertionFault',
     * or 'ReplacementFault' options.
     ','line_number':353,'multiline':True]
['text':'*
         * Returns a field index for a field that doesn't exists. As field indexes are assumed to be
         * non-negative, it's guaranteed that a negative field index does not exist. 'fldId' is used
         * to produce more specific negative numbers for the non-existing field index to help with
         * pinpointing the test failures.
         ','line_number':369,'multiline':True]
['text':'*
     * This method runs a column-store index test on 'nss' via a call to 'runColumnStoreIndexTest'.
     * First, it populates an 'nss' collection (with a column-store index defined on it) with
     * 'numDocs' documents, where each document has 'numFields' fields. Then, applies a series of
     * 'corruptions' on the column-store index. Finally, the index validation is ran on this
     * collection (which now has a corrupted column-store index) and the validation results are
     * returned.
     *
     * Returns the list of validation results.
     ','line_number':384,'multiline':True]
['text':' insertDocsFn ','line_number':401,'multiline':True]
['text':'startIDNum','line_number':404,'multiline':True]
['text':'numDocs','line_number':404,'multiline':True]
['text':'numFields','line_number':404,'multiline':True]
['text':' modifyIndexContentsFn: For each corruption specified, introduces the corruption and','line_number':406,'multiline':False]
['text':' then in a separate transaction ensures the corruption is now present.','line_number':407,'multiline':False]
['text':' Apply the requested corruption in a transaction.','line_number':428,'multiline':False]
['text':' Confirm the requested corruption is actually applied (in a separate','line_number':455,'multiline':False]
['text':' transaction).','line_number':456,'multiline':False]
['text':' postCheckFn ','line_number':491,'multiline':True]
['text':' Confirm there is an expected validation error','line_number':494,'multiline':False]
['text':'valid','line_number':499,'multiline':True]
['text':'numRecords','line_number':500,'multiline':True]
['text':'numInvalidDocuments','line_number':501,'multiline':True]
['text':'numErrors','line_number':502,'multiline':True]
['text':'*
     * This method repairs the (possible) index corruptions by running the validate command and
     * returns the results from this command (after doing some common assertions). In addition,
     * before returning this result, another call to the validate command is done to repair the
     * index again. It's expected that this second call to index repair will not lead to any repair,
     * as it's done in the first call (if any corruption exists).
     ','line_number':510,'multiline':True]
['text':'valid','line_number':523,'multiline':True]
['text':'numRecords','line_number':524,'multiline':True]
['text':'numInvalidDocuments','line_number':525,'multiline':True]
['text':'numErrors','line_number':526,'multiline':True]
['text':' After the first round of repair, if we do a second round of repair, it should always','line_number':544,'multiline':False]
['text':' validate without requiring any actual repair anymore.','line_number':545,'multiline':False]
['text':'valid','line_number':549,'multiline':True]
['text':'numRecords','line_number':550,'multiline':True]
['text':'numInvalidDocuments','line_number':551,'multiline':True]
['text':'numErrors','line_number':552,'multiline':True]
['text':' return the result of initial repair command, so that tests can do further checks on that','line_number':573,'multiline':False]
['text':' result if needed.','line_number':574,'multiline':False]
['text':' Verify that calling validate() on an empty collection with different validation levels returns an','line_number':579,'multiline':False]
['text':' OK status.','line_number':580,'multiline':False]
['text':'valid','line_number':584,'multiline':True]
['text':'numRecords','line_number':585,'multiline':True]
['text':'numInvalidDocuments','line_number':586,'multiline':True]
['text':'numErrors','line_number':587,'multiline':True]
['text':' Verify calling validate() on a nonempty collection with different validation levels.','line_number':590,'multiline':False]
['text':'valid','line_number':595,'multiline':True]
['text':'numRecords','line_number':596,'multiline':True]
['text':'numInvalidDocuments','line_number':597,'multiline':True]
['text':'numErrors','line_number':598,'multiline':True]
['text':' Verify calling validate() on a collection with an invalid document.','line_number':601,'multiline':False]
['text':'valid','line_number':606,'multiline':True]
['text':'numRecords','line_number':607,'multiline':True]
['text':'numInvalidDocuments','line_number':608,'multiline':True]
['text':'numErrors','line_number':609,'multiline':True]
['text':' Verify calling validate() with enforceFastCount=true.','line_number':612,'multiline':False]
['text':'valid','line_number':617,'multiline':True]
['text':'numRecords','line_number':618,'multiline':True]
['text':'numInvalidDocuments','line_number':619,'multiline':True]
['text':'numErrors','line_number':620,'multiline':True]
['text':' initialize collection','line_number':627,'multiline':False]
['text':'valid','line_number':631,'multiline':True]
['text':'numRecords','line_number':632,'multiline':True]
['text':' uninitialized','line_number':632,'multiline':False]
['text':'numInvalidDocuments','line_number':633,'multiline':True]
['text':' uninitialized','line_number':633,'multiline':False]
['text':'numErrors','line_number':634,'multiline':True]
['text':'*
 * Waits for a parallel running collection validation operation to start and then hang at a
 * failpoint.
 *
 * A failpoint in the validate() code should have been set prior to calling this function.
 ','line_number':638,'multiline':True]
['text':' a fairly arbitrary sleep period.','line_number':646,'multiline':False]
['text':'*
 * Generates a KeyString suitable for positioning a cursor at the beginning of an index.
 ','line_number':651,'multiline':True]
['text':'*
 * Extracts KeyString without RecordId.
 ','line_number':662,'multiline':True]
['text':' Verify calling validate() on a collection with old (pre-4.2) keys in a WT unique index.','line_number':677,'multiline':False]
['text':' Durable catalog expects metadata updates to be timestamped but this is','line_number':682,'multiline':False]
['text':' not necessary in our case - we just want to check the contents of the index table.','line_number':683,'multiline':False]
['text':' The alternative here would be to provide a commit timestamp with a TimestamptBlock.','line_number':684,'multiline':False]
['text':' Insert single document with the default (new) index key that includes a record id.','line_number':693,'multiline':False]
['text':' Validate the collection here as a sanity check before we modify the index contents in-place.','line_number':699,'multiline':False]
['text':'valid','line_number':701,'multiline':True]
['text':'numRecords','line_number':701,'multiline':True]
['text':'numInvalidDocuments','line_number':701,'multiline':True]
['text':'numErrors','line_number':701,'multiline':True]
['text':' Update existing entry in index to pre-4.2 format without record id in key string.','line_number':703,'multiline':False]
['text':' Check key in index for only document.','line_number':716,'multiline':False]
['text':' Replace key with old format (without record id).','line_number':733,'multiline':False]
['text':' Confirm that key in index is in old format.','line_number':743,'multiline':False]
['text':'valid','line_number':756,'multiline':True]
['text':'numRecords','line_number':757,'multiline':True]
['text':'numInvalidDocuments','line_number':758,'multiline':True]
['text':'numErrors','line_number':759,'multiline':True]
['text':'*
 * Checks whether a given 'entry' is equal to any element in the 'list'.
 ','line_number':774,'multiline':True]
['text':' Exhaustively tests having one error in the column-store index by updating one index entry with an','line_number':782,'multiline':False]
['text':' invalid value in different parts of the index on collections with different number of columns and','line_number':783,'multiline':False]
['text':' documents.','line_number':784,'multiline':False]
['text':' Create collection nss for unit tests to use.','line_number':797,'multiline':False]
['text':' column-store index corruptions ','line_number':806,'multiline':True]
['text':' Update the current index entry with an invalid value. ','line_number':809,'multiline':True]
['text':' Exhaustively tests having one error in the column-store index by adding an extra index entry on','line_number':890,'multiline':False]
['text':' collections with different number of columns and documents.','line_number':891,'multiline':False]
['text':' non-existent field on an existing document ','line_number':897,'multiline':True]
['text':'corruptedFldIndex','line_number':898,'multiline':True]
['text':'corruptedDocIndex','line_number':899,'multiline':True]
['text':' non-existent field on a non-existent document ','line_number':900,'multiline':True]
['text':'corruptedFldIndex','line_number':901,'multiline':True]
['text':'corruptedDocIndex','line_number':902,'multiline':True]
['text':' existing field on a non-existent document ','line_number':904,'multiline':True]
['text':'corruptedDocIndex','line_number':906,'multiline':True]
['text':' Create collection nss for unit tests to use.','line_number':919,'multiline':False]
['text':' column-store index corruptions ','line_number':928,'multiline':True]
['text':' Insert an extra index entry. ','line_number':931,'multiline':True]
['text':' Exhaustively tests having one error in the column-store index by removing one index entry from','line_number':992,'multiline':False]
['text':' different parts of the index on collections with different number of columns and documents.','line_number':993,'multiline':False]
['text':' Create collection nss for unit tests to use.','line_number':1006,'multiline':False]
['text':' column-store index corruptions ','line_number':1015,'multiline':True]
['text':' Remove the existing index entry. ','line_number':1018,'multiline':True]
['text':' Tests having multiple errors in the column-store index by updating several index entries with an','line_number':1084,'multiline':False]
['text':' invalid value in different parts of the index on a collection with multiple columns and multiple','line_number':1085,'multiline':False]
['text':' documents.','line_number':1086,'multiline':False]
['text':' column-store index corruptions ','line_number':1095,'multiline':True]
['text':' corruptedFldIndex ','line_number':1096,'multiline':True]
['text':' corruptedDocIndex ','line_number':1097,'multiline':True]
['text':' Remove the existing index entry. ','line_number':1098,'multiline':True]
['text':' corruptedFldIndex ','line_number':1100,'multiline':True]
['text':' corruptedDocIndex ','line_number':1101,'multiline':True]
['text':' Update the current index entry with an invalid value. ','line_number':1102,'multiline':True]
['text':' corruptedFldIndex ','line_number':1104,'multiline':True]
['text':' corruptedDocIndex ','line_number':1105,'multiline':True]
['text':' Insert an extra index entry for a non-exisiting document. ','line_number':1106,'multiline':True]
['text':' corruptedFldIndex ','line_number':1108,'multiline':True]
['text':' corruptedDocIndex ','line_number':1109,'multiline':True]
['text':' Insert an extra index entry for a non-existing field of an existing document. ','line_number':1110,'multiline':True]
['text':' corruptedFldIndex ','line_number':1112,'multiline':True]
['text':' corruptedDocIndex ','line_number':1113,'multiline':True]
['text':' Insert an extra index entry for a non-existing field of a non-existing document. ','line_number':1114,'multiline':True]
['text':' corruptedFldIndex ','line_number':1116,'multiline':True]
['text':' corruptedDocIndex ','line_number':1117,'multiline':True]
['text':' Update the current index entry with an invalid value. ','line_number':1118,'multiline':True]
['text':' namespace','line_number':1168,'multiline':False]
['text':' namespace mongo','line_number':1169,'multiline':False]
