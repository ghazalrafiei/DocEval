['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 * Mock OpObserver that tracks dropped collections and databases.
 * Since this class is used exclusively to test dropDatabase(), we will also check the drop-pending
 * flag in the Database object being tested (if provided).
 ','line_number':83,'multiline':True]
['text':' Do not update 'droppedDatabaseNames' if OpObserverNoop::onDropDatabase() throws.','line_number':109,'multiline':False]
['text':' Do not update 'droppedCollectionNames' if OpObserverNoop::onDropCollection() throws.','line_number':123,'multiline':False]
['text':' Check drop-pending flag in Database if provided.','line_number':126,'multiline':False]
['text':' static','line_number':153,'multiline':False]
['text':' Set up mongod.','line_number':159,'multiline':False]
['text':' Set up ReplicationCoordinator and create oplog.','line_number':170,'multiline':False]
['text':' Ensure that we are primary.','line_number':176,'multiline':False]
['text':' Use OpObserverMock to track notifications for collection and database drops.','line_number':179,'multiline':False]
['text':'*
 * Creates a collection without any namespace restrictions.
 ','line_number':202,'multiline':True]
['text':'*
 * Removes database from catalog, bypassing dropDatabase().
 ','line_number':219,'multiline':True]
['text':' dropDatabase can call awaitReplication more than once, so do not attempt to drop the database','line_number':225,'multiline':False]
['text':' twice.','line_number':226,'multiline':False]
['text':'*
 * Tests successful drop of a database containing a single collection.
 * Checks expected number of onDropCollection() and onDropDatabase() invocations on the
 * OpObserver.
 * Checks that drop-pending flag is set by dropDatabase() during the collection drop phase.
 ','line_number':250,'multiline':True]
['text':' Set OpObserverMock::db so that we can check Database::isDropPending() while dropping','line_number':262,'multiline':False]
['text':' collections.','line_number':263,'multiline':False]
['text':' Update ReplicationCoordinatorMock so that we record the optime passed to awaitReplication().','line_number':296,'multiline':False]
['text':' Update ReplicationCoordinatorMock so that we record the optime passed to awaitReplication().','line_number':312,'multiline':False]
['text':' Update OpObserverMock so that onDropCollection() throws an exception when called.','line_number':336,'multiline':False]
['text':' Update ReplicationCoordinatorMock so that awaitReplication() fails.','line_number':380,'multiline':False]
['text':' Update ReplicationCoordinatorMock so that awaitReplication() fails.','line_number':391,'multiline':False]
['text':' Update ReplicationCoordinatorMock so that awaitReplication() fails.','line_number':404,'multiline':False]
['text':' Transition from PRIMARY to SECONDARY while awaiting replication of collection drops.','line_number':427,'multiline':False]
['text':' Check drop-pending flag in Database after dropDatabase() fails.','line_number':447,'multiline':False]
['text':' namespace','line_number':464,'multiline':False]
