['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' IWYU pragma: no_include "boost/system/detail/error_code.hpp"','line_number':44,'multiline':False]
['text':' When active, a column index will be created for all new collections. This is used for the column','line_number':123,'multiline':False]
['text':' index JS test passthrough suite. Other passthroughs work by overriding javascript methods on the','line_number':124,'multiline':False]
['text':' client side, but this approach often requires the drop() function to create the collection. This','line_number':125,'multiline':False]
['text':' behavior is confusing, and requires a large number of tests to be re-written to accommodate this','line_number':126,'multiline':False]
['text':' passthrough behavior. In case you're wondering, this failpoint approach would not work as well','line_number':127,'multiline':False]
['text':' for the sharded collections task, since mongos and the config servers are generally unaware of','line_number':128,'multiline':False]
['text':' when a collection is created. There isn't a great server-side hook we can use to auto-shard a','line_number':129,'multiline':False]
['text':' collection, and it is more complex technically to drive this process from one shard in the','line_number':130,'multiline':False]
['text':' cluster. For column store indexes, we just need to change local state on each mongod.','line_number':131,'multiline':False]
['text':' namespace','line_number':166,'multiline':False]
['text':' If this is called from the repair path, the collection is already initialized.','line_number':204,'multiline':False]
['text':' When in restore mode, views created on collections that weren't restored will be removed. We','line_number':212,'multiline':False]
['text':' only do this during startup when the global lock is held.','line_number':213,'multiline':False]
['text':' Refresh our copy of the catalog, since we may have modified it above.','line_number':215,'multiline':False]
['text':' The name of the most resolved namespace, which is a collection.','line_number':236,'multiline':False]
['text':' The collection exists for this view.','line_number':240,'multiline':False]
['text':' Defer the view to drop so we don't do it while iterating. In case we're updating','line_number':244,'multiline':False]
['text':' the catalog inplace, we cannot modify the same data structure as we're iterating','line_number':245,'multiline':False]
['text':' on.','line_number':246,'multiline':False]
['text':' Drop all collected views from above.','line_number':252,'multiline':False]
['text':' Make sure that the same fields are returned for non-existing dbs','line_number':336,'multiline':False]
['text':' in `DBStats::errmsgRun`','line_number':337,'multiline':False]
['text':' Cannot drop uncommitted collections.','line_number':389,'multiline':False]
['text':' Collection doesn't exist so don't bother validating if it can be dropped.','line_number':395,'multiline':False]
['text':' A valid 'dropOpTime' is not allowed when writes are replicated.','line_number':418,'multiline':False]
['text':' Post condition already met.','line_number':428,'multiline':False]
['text':' Make sure no indexes builds are in progress.','line_number':435,'multiline':False]
['text':' Use massert() to be consistent with IndexCatalog::dropAllIndexes().','line_number':436,'multiline':False]
['text':' Drop unreplicated collections immediately.','line_number':448,'multiline':False]
['text':' If 'dropOpTime' is provided, we should proceed to rename the collection.','line_number':449,'multiline':False]
['text':' Replicated collections should be dropped in two phases.','line_number':464,'multiline':False]
['text':' New two-phase drop: Starting in 4.2, pending collection drops will be maintained in the','line_number':466,'multiline':False]
['text':' storage engine and will no longer be visible at the catalog layer with 3.6-style','line_number':467,'multiline':False]
['text':' <db>.system.drop.* namespaces.','line_number':468,'multiline':False]
['text':' Log oplog entry for collection drop and remove the UUID.','line_number':481,'multiline':False]
['text':' If we are provided with a valid 'dropOpTime', it means we are dropping this','line_number':490,'multiline':False]
['text':' collection in the context of applying an oplog entry on a secondary.','line_number':491,'multiline':False]
['text':' OpObserver::onDropCollection should not be writing to the oplog on the secondary.','line_number':498,'multiline':False]
['text':' Old two-phase drop: Replicated collections will be renamed with a special drop-pending','line_number':506,'multiline':False]
['text':' namespace and dropped when the replica set optime reaches the drop optime.','line_number':507,'multiline':False]
['text':' Log oplog entry for collection drop.','line_number':510,'multiline':False]
['text':' If we are provided with a valid 'dropOpTime', it means we are dropping this','line_number':519,'multiline':False]
['text':' collection in the context of applying an oplog entry on a secondary.','line_number':520,'multiline':False]
['text':' OpObserver::onDropCollection should not be writing to the oplog on the secondary.','line_number':527,'multiline':False]
['text':' Rename collection using drop-pending namespace generated from drop optime.','line_number':531,'multiline':False]
['text':' This is a uniquely generated drop-pending namespace that no other operations are using.','line_number':541,'multiline':False]
['text':' Register this drop-pending namespace with DropPendingCollectionReaper to remove when the','line_number':548,'multiline':False]
['text':' committed optime reaches the drop optime.','line_number':549,'multiline':False]
['text':' Reduce log verbosity for virtual collections','line_number':571,'multiline':False]
['text':' A virtual collection does not have a durable catalog entry.','line_number':576,'multiline':False]
['text':' Set the namespace of 'collToRename' from within the CollectionCatalog. This is necessary','line_number':624,'multiline':False]
['text':' because the CollectionCatalog manages the necessary isolation for this Collection until the','line_number':625,'multiline':False]
['text':' WUOW commits.','line_number':626,'multiline':False]
['text':'vopts=','line_number':705,'multiline':True]
['text':'createIdIndex=','line_number':715,'multiline':True]
['text':'idIndex=','line_number':716,'multiline':True]
['text':'fromMigrate=','line_number':717,'multiline':True]
['text':'*
 * Some system collections (namely, 'config.transactions' and
 * 'local.replset.oplogTruncateAfterPoint') are special internal collections that are written to
 * without updating indexes, so there's no value in creating an index on them.
 *
 * @return true if any modification on the collection data leads to updating the indexes defined on
 * it.
 ','line_number':721,'multiline':True]
['text':' Because writing the oplog entry depends on having the full spec for the _id index, which is','line_number':764,'multiline':False]
['text':' not available until the collection is actually created, we can't write the oplog entry until','line_number':765,'multiline':False]
['text':' after we have created the collection.  In order to make the storage timestamp for the','line_number':766,'multiline':False]
['text':' collection create always correct even when other operations are present in the same storage','line_number':767,'multiline':False]
['text':' transaction, we reserve an opTime before the collection creation, then pass it to the','line_number':768,'multiline':False]
['text':' opObserver.  Reserving the optime automatically sets the storage timestamp.','line_number':769,'multiline':False]
['text':' In order to ensure isolation of multi-document transactions, createCollection should only','line_number':770,'multiline':False]
['text':' reserve oplog slots here if it is run outside of a multi-document transaction. Multi-','line_number':771,'multiline':False]
['text':' document transactions reserve the appropriate oplog slots at commit time.','line_number':772,'multiline':False]
['text':' Reduce log verbosity for virtual collections','line_number':793,'multiline':False]
['text':' Create Collection object','line_number':804,'multiline':False]
['text':'allocateDefaultSpace','line_number':816,'multiline':True]
['text':' Virtual collection stays only in memory and its metadata need not persist on disk and','line_number':825,'multiline':False]
['text':' therefore we bypass DurableCatalog.','line_number':826,'multiline':False]
['text':' autoIndexId: false is only allowed on unreplicated collections.','line_number':856,'multiline':False]
['text':' It is necessary to create the system index *after* running the onCreateCollection so that','line_number':883,'multiline':False]
['text':' the storage timestamp for the index creation is after the storage timestamp for the','line_number':884,'multiline':False]
['text':' collection creation, and the opTimes for the corresponding oplog entries are the same as the','line_number':885,'multiline':False]
['text':' storage timestamps.  This way both primary and any secondaries will see the index created','line_number':886,'multiline':False]
['text':' after the collection is created.','line_number':887,'multiline':False]
['text':' If the collator factory returned a non-null collator, set the collation option to the','line_number':909,'multiline':False]
['text':' result of serializing the collator's spec back into BSON. We do this in order to fill in','line_number':910,'multiline':False]
['text':' all options that the user omitted.','line_number':911,'multiline':False]
['text':'','line_number':912,'multiline':False]
['text':' If the collator factory returned a null collator (representing the "simple" collation),','line_number':913,'multiline':False]
['text':' we simply unset the "collation" from the collection options. This ensures that','line_number':914,'multiline':False]
['text':' collections created on versions which do not support the collation feature have the same','line_number':915,'multiline':False]
['text':' format for representing the simple collation as collections created on this version.','line_number':916,'multiline':False]
['text':' Validate the collation, if there is one.','line_number':938,'multiline':False]
['text':' If the feature compatibility version is not kLatest, and we are validating features as','line_number':948,'multiline':False]
['text':' primary, ban the use of new agg features introduced in kLatest to prevent them from being','line_number':949,'multiline':False]
['text':' persisted in the catalog.','line_number':950,'multiline':False]
['text':' (Generic FCV reference): This FCV check should exist across LTS binary versions.','line_number':951,'multiline':False]
['text':' The match expression parser needs to know that we're parsing an expression for a','line_number':959,'multiline':False]
['text':' validator to apply some additional checks.','line_number':960,'multiline':False]
['text':' If the validation action is "warn" or the level is "moderate", or if the user has','line_number':963,'multiline':False]
['text':' defined some encrypted fields in the collection options, then disallow any encryption','line_number':964,'multiline':False]
['text':' keywords. This is to prevent any plaintext data from showing up in the logs.','line_number':965,'multiline':False]
['text':' Increment counters to track the usage of schema validators.','line_number':978,'multiline':False]
['text':' We check the status of the parse to see if there are any banned features, but we don't','line_number':982,'multiline':False]
['text':' actually need the result for now.','line_number':983,'multiline':False]
['text':' Validate the collation, if there is one.','line_number':1038,'multiline':False]
['text':'createDefaultIndexes=','line_number':1046,'multiline':True]
['text':'idIndex=','line_number':1047,'multiline':True]
['text':'fromMigrate=','line_number':1048,'multiline':True]
['text':' namespace mongo','line_number':1056,'multiline':False]
