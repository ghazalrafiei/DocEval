['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':' IWYU pragma: keep','line_number':42,'multiline':False]
['text':' For time-series collections, we need to check that the indexed metric fields do not have','line_number':105,'multiline':False]
['text':' expanded array values.','line_number':106,'multiline':False]
['text':' Index spec should have already been validated.','line_number':117,'multiline':False]
['text':' Parsing the partial filter expression is not expected to fail here since the','line_number':129,'multiline':False]
['text':' expression would have been successfully parsed upstream during index creation.','line_number':130,'multiline':False]
['text':' ---','line_number':174,'multiline':False]
['text':' An index can either track path-level multikey information in the catalog or as metadata keys','line_number':188,'multiline':False]
['text':' in the index itself, but not both.','line_number':189,'multiline':False]
['text':' If the index is already set as multikey and we don't have any path-level information to','line_number':194,'multiline':False]
['text':' update, then there's nothing more for us to do.','line_number':195,'multiline':False]
['text':' If 'multikeyPaths' contains a new path component that causes this index to be','line_number':210,'multiline':False]
['text':' multikey, then we must update the index metadata in the CollectionCatalogEntry.','line_number':211,'multiline':False]
['text':' Otherwise, if all the path components in 'multikeyPaths' are already tracked in','line_number':218,'multiline':False]
['text':' '_indexMultikeyPaths', then there's nothing more for us to do.','line_number':219,'multiline':False]
['text':' On a primary, we can simply assign this write the same timestamp as the index creation,','line_number':230,'multiline':False]
['text':' insert, or update that caused this index to become multikey. This is because if two','line_number':231,'multiline':False]
['text':' operations concurrently try to change the index to be multikey, they will conflict and the','line_number':232,'multiline':False]
['text':' loser will simply get a higher timestamp and go into the oplog second with a later optime.','line_number':233,'multiline':False]
['text':'','line_number':234,'multiline':False]
['text':' On a secondary, writes must get the timestamp of their oplog entry, and the multikey change','line_number':235,'multiline':False]
['text':' must occur before the timestamp of the earliest write that makes the index multikey.','line_number':236,'multiline':False]
['text':' Secondaries only serialize writes by document, not by collection. If two inserts that both','line_number':237,'multiline':False]
['text':' make an index multikey are applied out of order, changing the index to multikey at the','line_number':238,'multiline':False]
['text':' insert timestamps would change the index to multikey at the later timestamp, which would be','line_number':239,'multiline':False]
['text':' wrong. To prevent this, rather than setting the index to be multikey here, we add the','line_number':240,'multiline':False]
['text':' necessary information to the OperationContext and do the write at the timestamp of the','line_number':241,'multiline':False]
['text':' beginning of the batch.','line_number':242,'multiline':False]
['text':'','line_number':243,'multiline':False]
['text':' One exception to this rule is for background indexes. Background indexes are built using','line_number':244,'multiline':False]
['text':' a different OperationContext and thus this information would be ignored. Background index','line_number':245,'multiline':False]
['text':' builds happen concurrently though and thus the multikey write can safely occur at the','line_number':246,'multiline':False]
['text':' current clock time. Once a background index is committed, if a future write makes','line_number':247,'multiline':False]
['text':' it multikey, that write will be marked as "isTrackingMultikeyPathInfo" on the applier's','line_number':248,'multiline':False]
['text':' OperationContext and we can safely defer that write to the end of the batch.','line_number':249,'multiline':False]
['text':' If multikeyMetadataKeys is non-empty, we must insert these keys into the index itself. We do','line_number':259,'multiline':False]
['text':' not have to account for potential dupes, since all metadata keys are indexed against a single','line_number':260,'multiline':False]
['text':' RecordId. An attempt to write a duplicate key will therefore be ignored.','line_number':261,'multiline':False]
['text':' Mark the catalog as multikey, and record the multikey paths if applicable.','line_number':267,'multiline':False]
['text':' Retry without side transaction.','line_number':270,'multiline':False]
['text':' Don't check _indexTracksMultikeyPathsInCatalog because the caller may be intentionally trying','line_number':285,'multiline':False]
['text':' to bypass this check. That is, pre-3.4 indexes may be 'stuck' in a state where they are not','line_number':286,'multiline':False]
['text':' tracking multikey paths in the catalog (i.e. the multikeyPaths field is absent), but the','line_number':287,'multiline':False]
['text':' caller wants to upgrade this index because it knows exactly which paths are multikey. We rely','line_number':288,'multiline':False]
['text':' on the following function to make sure this upgrade only takes place on index types that','line_number':289,'multiline':False]
['text':' currently support path-level multikey path tracking.','line_number':290,'multiline':False]
['text':' Since multikey metadata has changed, invalidate the query cache.','line_number':293,'multiline':False]
['text':' If we are inside a multi-document transaction, we write the on-disk multikey update in a','line_number':301,'multiline':False]
['text':' separate transaction so that it will not generate prepare conflicts with other operations','line_number':302,'multiline':False]
['text':' that try to set the multikey flag. In general, it should always be safe to update the','line_number':303,'multiline':False]
['text':' multikey flag earlier than necessary, and so we are not concerned with the atomicity of the','line_number':304,'multiline':False]
['text':' multikey flag write and the parent transaction. We can do this write separately and commit it','line_number':305,'multiline':False]
['text':' before the parent transaction commits.','line_number':306,'multiline':False]
['text':' If the index is not visible within the side transaction, the index may have been created,','line_number':311,'multiline':False]
['text':' but not committed, in the parent transaction. Therefore, we abandon the side transaction','line_number':312,'multiline':False]
['text':' and set the multikey flag in the parent transaction.','line_number':313,'multiline':False]
['text':' If we have a prepare optime for recovery, then we always use that. This is safe since','line_number':323,'multiline':False]
['text':' the prepare timestamp is always <= the commit timestamp of a transaction, which','line_number':324,'multiline':False]
['text':' satisfies the correctness requirement for multikey writes i.e. they must occur at or','line_number':325,'multiline':False]
['text':' before the first write that set the multikey flag. This only occurs when','line_number':326,'multiline':False]
['text':' reconstructing prepared transactions, and not during replication recovery oplog','line_number':327,'multiline':False]
['text':' application.','line_number':328,'multiline':False]
['text':' We might replay a prepared transaction behind the oldest timestamp during initial','line_number':331,'multiline':False]
['text':' sync or behind the stable timestamp during rollback. During initial sync, we','line_number':332,'multiline':False]
['text':' may not have a stable timestamp. Therefore, we need to round up','line_number':333,'multiline':False]
['text':' the multi-key write timestamp to the max of the three so that we don't write','line_number':334,'multiline':False]
['text':' behind the oldest/stable timestamp. This code path is only hit during initial','line_number':335,'multiline':False]
['text':' sync/recovery when reconstructing prepared transactions, and so we don't expect','line_number':336,'multiline':False]
['text':' the oldest/stable timestamp to advance concurrently.','line_number':337,'multiline':False]
['text':'','line_number':338,'multiline':False]
['text':' WiredTiger disallows committing at the stable timestamp to avoid confusion during','line_number':339,'multiline':False]
['text':' checkpoints, to overcome that we allow setting the timestamp slightly after the','line_number':340,'multiline':False]
['text':' prepared timestamp of the original transaction. This is currently not an issue as','line_number':341,'multiline':False]
['text':' the index metadata state is read from in-memory cache and this is modifying the','line_number':342,'multiline':False]
['text':' state on-disk from the _mdb_catalog document. To put in other words, multikey','line_number':343,'multiline':False]
['text':' doesn't go backwards. This would be a problem if we move to a versioned catalog','line_number':344,'multiline':False]
['text':' world as a different transaction could choose an earlier timestamp (i.e. the','line_number':345,'multiline':False]
['text':' original transaction timestamp) and encounter an invalid system state where the','line_number':346,'multiline':False]
['text':' document that enables multikey hasn't enabled it yet but is present in the','line_number':347,'multiline':False]
['text':' collection. In other words, the index is not set for multikey but there is','line_number':348,'multiline':False]
['text':' already data present that relies on it.','line_number':349,'multiline':False]
['text':' If there is no recovery prepare OpTime, then this node must be a primary. We','line_number':356,'multiline':False]
['text':' write a noop oplog entry to get a properly ordered timestamp.','line_number':357,'multiline':False]
['text':' Index spec should have already been validated.','line_number':413,'multiline':False]
['text':' namespace','line_number':539,'multiline':False]
['text':' ----','line_number':546,'multiline':False]
['text':' It's possible that the index type (e.g. ascending/descending index) supports tracking','line_number':561,'multiline':False]
['text':' path-level multikey information, but this particular index doesn't.','line_number':562,'multiline':False]
['text':' CollectionCatalogEntry::setIndexIsMultikey() requires that we discard the path-level','line_number':563,'multiline':False]
['text':' multikey information in order to avoid unintentionally setting path-level multikey','line_number':564,'multiline':False]
['text':' information on an index created before 3.4.','line_number':565,'multiline':False]
['text':' namespace mongo','line_number':579,'multiline':False]
