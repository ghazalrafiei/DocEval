['text':'*
 *    Copyright (C) 2022-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]
['text':'*
 * A CappedVisibilitySnapshot represents a snapshot of the Records that should and should not be
 * visible for a capped collection.
 ','line_number':58,'multiline':True]
['text':'*
     * Returns true if this RecordId is safely visible in our snapshot.
     ','line_number':72,'multiline':True]
['text':'*
     * Returns the highest RecordId that should be visible in our snapshot. May not represent a
     * RecordId that exists.
     ','line_number':86,'multiline':True]
['text':'*
 * UncommittedRecords hold RecordIds for uncommitted inserts into a capped collection by a single
 * operation. Only valid for the duration of a storage snapshot on a single collection.
 ','line_number':106,'multiline':True]
['text':'*
     * Register a range of RecordIds as allocated and may be committed by this writer in the future.
     * RecordIds must be of the long type. When registering a single RecordId, min and max must be
     * the same.
     ','line_number':114,'multiline':True]
['text':'*
     * Returns the lowest uncommitted RecordId of this writer. This is thread safe.
     ','line_number':124,'multiline':True]
['text':'*
     * Returns the highest uncommitted RecordId of this writer. This is not thread safe.
     ','line_number':131,'multiline':True]
['text':'*
     * Returns an iterator to this writer's position in a list owned by the
     * CappedVisibilityObserver.
     ','line_number':140,'multiline':True]
['text':'*
     * Set the iterator to this writer's position in a list.
     ','line_number':148,'multiline':True]
['text':'*
     * Sets an optional function to be called when the uncommitted writes are either committed or
     * aborted. The callback function must not throw.
     ','line_number':155,'multiline':True]
['text':'*
     * This iterator is not thread safe and may only be modified by the writer itself. Points to
     * this writer's position in the CappedVisibilityObserver's list of active writers.
     ','line_number':171,'multiline':True]
['text':' Since a CappedVisibilitySnapshot is only concerned with the minimum uncommitted RecordId for','line_number':177,'multiline':False]
['text':' a given writer, we use an atomic on the minimum. We can use a non-atomic for the maximum,','line_number':178,'multiline':False]
['text':' which is never observed by another thread.','line_number':179,'multiline':False]
['text':' For consistency with _min, we'll use an int64 type as well.','line_number':182,'multiline':False]
['text':' An optional notification function that should be called when these uncommitted records are','line_number':185,'multiline':False]
['text':' either committed or aborted.','line_number':186,'multiline':False]
['text':'*
 * Container that holds UncommittedRecords for different capped collections. This allows an
 * operation to write to multiple capped collections at once, if necessary. A CappedWriter is only
 * valid for the lifetime of a RecoveryUnit Snapshot, and may only be accessed by a single thread.
 ','line_number':190,'multiline':True]
['text':'*
     * Returns a pointer to the uncommitted writes for the given ident. The pointer is only valid
     * for the duration of this storage snapshot.
     ','line_number':201,'multiline':True]
['text':' This maps ident names to the uncommitted records for that collection.','line_number':208,'multiline':False]
['text':'*
 * A CappedVisibilityObserver tracks the "visibility point" of a capped collection. For capped
 * collections that accept concurrent writes which may not commit in RecordId order, the visibility
 * point is the highest RecordId that is safe to read for a forward scanning cursor to guarantee
 * that it doesn't miss "holes" for uncommitted records.
 ','line_number':212,'multiline':True]
['text':'*
     * Register a writer for an uncommitted insert operation. The writer must follow-up by
     * registering its allocated RecordIds with registerRecordIds() on the UncommittedRecords.
     ','line_number':222,'multiline':True]
['text':'*
     * Set a RecordId as committed and should be visible immediately. This bypasses any visibility
     * tracking for uncommitted records so should only be used in cases where concurrent writes are
     * not possible.
     ','line_number':230,'multiline':True]
['text':'*
     * Obtain a consistent view of the capped visibility point. This can be used by callers to
     * determine whether records should be visible or not.
     *
     * It is critical that callers create a capped visibility snapshot before opening a storage
     * engine snapshot unless the caller can guarantee there are no concurrent writes.
     ','line_number':237,'multiline':True]
['text':'*
     * Notify that a previously-allocated RecordId for an uncommitted insert operation has either
     * been committed or rolled-back.
     ','line_number':247,'multiline':True]
['text':' This mutex protects all variables below.','line_number':257,'multiline':False]
['text':' The set of uncommitted writes to this capped collection. We use a std::list so that we can','line_number':261,'multiline':False]
['text':' use splice() for constant time insertion and deletion. This relies on the ability to maintain','line_number':262,'multiline':False]
['text':' an iterator that is valid even after modifications to the container.','line_number':263,'multiline':False]
['text':' This is the highest RecordId ever committed to this collection.','line_number':266,'multiline':False]
['text':' namespace mongo','line_number':269,'multiline':False]
