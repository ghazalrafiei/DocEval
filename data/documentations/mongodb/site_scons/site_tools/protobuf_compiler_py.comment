['text':' Copyright 2022 MongoDB Inc.','line_number':1,'multiline':False]
['text':'','line_number':2,'multiline':False]
['text':' Permission is hereby granted, free of charge, to any person obtaining','line_number':3,'multiline':False]
['text':' a copy of this software and associated documentation files (the','line_number':4,'multiline':False]
['text':' "Software"), to deal in the Software without restriction, including','line_number':5,'multiline':False]
['text':' without limitation the rights to use, copy, modify, merge, publish,','line_number':6,'multiline':False]
['text':' distribute, sublicense, and/or sell copies of the Software, and to','line_number':7,'multiline':False]
['text':' permit persons to whom the Software is furnished to do so, subject to','line_number':8,'multiline':False]
['text':' the following conditions:','line_number':9,'multiline':False]
['text':'','line_number':10,'multiline':False]
['text':' The above copyright notice and this permission notice shall be included','line_number':11,'multiline':False]
['text':' in all copies or substantial portions of the Software.','line_number':12,'multiline':False]
['text':'','line_number':13,'multiline':False]
['text':' THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY','line_number':14,'multiline':False]
['text':' KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE','line_number':15,'multiline':False]
['text':' WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND','line_number':16,'multiline':False]
['text':' NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE','line_number':17,'multiline':False]
['text':' LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION','line_number':18,'multiline':False]
['text':' OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION','line_number':19,'multiline':False]
['text':' WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.','line_number':20,'multiline':False]
['text':'','line_number':21,'multiline':False]
['text':' context manager copied from','line_number':31,'multiline':False]
['text':' https://stackoverflow.com/a/57701186/1644736','line_number':32,'multiline':False]
['text':' Utility function for parsing out the gen type and desired gen dir','line_number':58,'multiline':False]
['text':' Check for valid requested gen type.','line_number':81,'multiline':False]
['text':' Create the targets by extensions list for this type in the desired gen dir.','line_number':94,'multiline':False]
['text':' Setup the dependency file.','line_number':99,'multiline':False]
['text':' This is little weird currently, because of the limitation of ninja and multiple','line_number':100,'multiline':False]
['text':' outputs. The base file name can change for each gen type, so in this case we are','line_number':101,'multiline':False]
['text':' taking the last one. This works if all gen outs are in the same dir and makes ninja','line_number':102,'multiline':False]
['text':' happy, but if there are multiple gen_out dirs, then in a scons only build the deps','line_number':103,'multiline':False]
['text':' is gened to the last in the list, which is awkward, but because this is only refernced','line_number':104,'multiline':False]
['text':' as a target throughout the rest of tool, it works fine in scons build.','line_number':105,'multiline':False]
['text':' Create targets for any listed plugins.','line_number':109,'multiline':False]
['text':' Need to depend on the compiler and any plugins.','line_number':130,'multiline':False]
['text':' For scanning the proto dependencies from within the proto files themselves,','line_number':136,'multiline':False]
['text':' there are two ways (with out writing a custom reader) to do it. One is with the','line_number':137,'multiline':False]
['text':' output depends file and other other is with a tool the protobuf project supplies.','line_number':138,'multiline':False]
['text':' The problem with the depends files, is you must first run the command before you can','line_number':139,'multiline':False]
['text':' get the dependencies, which has some downsides:','line_number':140,'multiline':False]
['text':' https://scons.org/doc/4.4.0/HTML/scons-user.html#idp105548894482512','line_number':141,'multiline':False]
['text':'','line_number':142,'multiline':False]
['text':' Using the reader provided by protobuf project works, but you must have access to the','line_number':143,'multiline':False]
['text':' proto which gives this functionality.','line_number':144,'multiline':False]
['text':'','line_number':145,'multiline':False]
['text':' Scanners will run multiple times during the building phase, revisiting as new dependencies','line_number':146,'multiline':False]
['text':' from the original scan are completed. Here we will use both methods, because in the case','line_number':147,'multiline':False]
['text':' you have an existing dep file you can get more dependency information on the first scan.','line_number':148,'multiline':False]
['text':' This code was mostly ripped from SCons ParseDepends function','line_number':151,'multiline':False]
['text':' Throws AttributeError if line isn't a string.  Can throw','line_number':163,'multiline':False]
['text':' ValueError if line doesn't split into two or more elements.','line_number':164,'multiline':False]
['text':' First we generate a the command line so we can extract the proto_paths as they','line_number':172,'multiline':False]
['text':' used for finding imported protos. Then we run the command and output the','line_number':173,'multiline':False]
['text':' descriptor set to a file for use later. The descriptor set is output as binary data','line_number':174,'multiline':False]
['text':' intended to be read in by other protos. In this case the second command does that','line_number':175,'multiline':False]
['text':' and extracts the dependencies.','line_number':176,'multiline':False]
['text':' This subst function is for generating the command line --proto_path and desired','line_number':225,'multiline':False]
['text':' --TYPE_out options.','line_number':226,'multiline':False]
['text':' This depends out only works if there is at least one gen out','line_number':241,'multiline':False]
['text':' This generates the types from the list of types requested by the user','line_number':250,'multiline':False]
['text':' for the pretty build output message. Any invalid types are caught in the emitter.','line_number':251,'multiline':False]
['text':' Plugins are user customizable ways to modify the generation and generate','line_number':261,'multiline':False]
['text':' additional files if desired. This extracts the desired plugins from the environment','line_number':262,'multiline':False]
['text':' and formats them to be suitable for the command line.','line_number':263,'multiline':False]
['text':' A custom out command for this plugin, options to the plugin can','line_number':274,'multiline':False]
['text':' be passed here with colon separating','line_number':275,'multiline':False]
['text':' specify the plugin binary','line_number':285,'multiline':False]
['text':' In the case the command did not include any standard gen types, we add a command line','line_number':294,'multiline':False]
['text':' entry so the depends file is still written','line_number':295,'multiline':False]
['text':' Internal subst function vars','line_number':322,'multiline':False]
['text':' Somewhat safe cross tool dependency','line_number':331,'multiline':False]
['text':' TODO create variables to support other generation types, might require a more flexible','line_number':368,'multiline':False]
['text':' builder setup','line_number':369,'multiline':False]
['text':' User facing customizable variables','line_number':372,'multiline':False]
['text':' PROTOC_GEN_TYPES can be a list of strings, where','line_number':374,'multiline':False]
['text':' each string is the gen type desired, or it could','line_number':375,'multiline':False]
['text':' a list of lists, where each list contains first','line_number':376,'multiline':False]
['text':' the type, the the desired output dir, if no','line_number':377,'multiline':False]
['text':' dir is specified the scons will build it at the location','line_number':378,'multiline':False]
['text':' of the source proto file, accounting for variant','line_number':379,'multiline':False]
['text':' dirs. e.g.','line_number':380,'multiline':False]
['text':' env["PROTOC_GEN_TYPES"] = [','line_number':381,'multiline':False]
['text':'     'cpp',','line_number':382,'multiline':False]
['text':'     ['java', "$BUILD_DIR/java_gen_source"]','line_number':383,'multiline':False]
['text':' ]','line_number':384,'multiline':False]
['text':' PROTOC_PLUGINS allows customization of the plugins','line_number':387,'multiline':False]
['text':' for the command lines. It should be a dict of dicts where','line_number':388,'multiline':False]
['text':' the keys are the names of the plugins, and the plugin must','line_number':389,'multiline':False]
['text':' specify the plugin binary file path and a list of extensions','line_number':390,'multiline':False]
['text':' to use on the output files. Optionally you can specify a list','line_number':391,'multiline':False]
['text':' of options to pass the plugin and a gen out directory. e.g:','line_number':392,'multiline':False]
['text':' env['PROTOC_PLUGINS']={','line_number':393,'multiline':False]
['text':'     'grpc': {','line_number':394,'multiline':False]
['text':'         'plugin': '$PROTOC_GRPC_PLUGIN',','line_number':395,'multiline':False]
['text':'         'options': ['generate_mock_code=true'],','line_number':396,'multiline':False]
['text':'         'gen_out': "$BUILD_DIR/grpc_gen"','line_number':397,'multiline':False]
['text':'         'exts': ['.grpc.pb.cc', '.grpc.pb.h'],','line_number':398,'multiline':False]
['text':'     },','line_number':399,'multiline':False]
['text':'     'my_plugin': {','line_number':400,'multiline':False]
['text':'         'plugin': '/usr/bin/my_custom_plugin',','line_number':401,'multiline':False]
['text':'         'exts': ['.pb.txt'],','line_number':402,'multiline':False]
['text':'     }','line_number':403,'multiline':False]
['text':' },','line_number':404,'multiline':False]
['text':' This is a proto which allows dependent protos to be extracted','line_number':407,'multiline':False]
['text':' generally this is in protobuf src tree at google/protobuf/descriptor.proto','line_number':408,'multiline':False]
