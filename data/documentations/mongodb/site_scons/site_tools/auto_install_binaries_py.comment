['text':' Copyright 2020 MongoDB Inc.','line_number':1,'multiline':False]
['text':'','line_number':2,'multiline':False]
['text':' Permission is hereby granted, free of charge, to any person obtaining','line_number':3,'multiline':False]
['text':' a copy of this software and associated documentation files (the','line_number':4,'multiline':False]
['text':' "Software"), to deal in the Software without restriction, including','line_number':5,'multiline':False]
['text':' without limitation the rights to use, copy, modify, merge, publish,','line_number':6,'multiline':False]
['text':' distribute, sublicense, and/or sell copies of the Software, and to','line_number':7,'multiline':False]
['text':' permit persons to whom the Software is furnished to do so, subject to','line_number':8,'multiline':False]
['text':' the following conditions:','line_number':9,'multiline':False]
['text':'','line_number':10,'multiline':False]
['text':' The above copyright notice and this permission notice shall be included','line_number':11,'multiline':False]
['text':' in all copies or substantial portions of the Software.','line_number':12,'multiline':False]
['text':'','line_number':13,'multiline':False]
['text':' THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY','line_number':14,'multiline':False]
['text':' KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE','line_number':15,'multiline':False]
['text':' WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND','line_number':16,'multiline':False]
['text':' NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE','line_number':17,'multiline':False]
['text':' LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION','line_number':18,'multiline':False]
['text':' OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION','line_number':19,'multiline':False]
['text':' WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.','line_number':20,'multiline':False]
['text':'','line_number':21,'multiline':False]
['text':' TODO: Handle chmod state','line_number':23,'multiline':False]
['text':' Ensure that all roles named in dependency lists actually were','line_number':98,'multiline':False]
['text':' passed in as a role.','line_number':99,'multiline':False]
['text':' Set it to something falsey','line_number':115,'multiline':False]
['text':' Set it to something falsy','line_number':128,'multiline':False]
['text':' If a base role was given, then add it as a dependency of every','line_number':135,'multiline':False]
['text':' role that isn't the base role (which would be circular).','line_number':136,'multiline':False]
['text':' Become a dictionary, so we can look up roles easily.','line_number':142,'multiline':False]
['text':' If a meta role was given, then add every role which isn't the','line_number':145,'multiline':False]
['text':' meta role as one of its dependencies.','line_number':146,'multiline':False]
['text':' TODO: Check for DAG','line_number':150,'multiline':False]
['text':' TODO: What if base_role or meta_role is really None?','line_number':152,'multiline':False]
['text':' Access directly by keys because we don't want to accidentally','line_number':219,'multiline':False]
['text':' create a new entry via get_alias_map_entry and instead should','line_number':220,'multiline':False]
['text':' throw a KeyError if we got here without valid components and','line_number':221,'multiline':False]
['text':' roles','line_number':222,'multiline':False]
['text':' We have to explicitly look at the various BASE files here since it's not','line_number':228,'multiline':False]
['text':' guaranteed they'll be pulled in anywhere in our grandchildren but we need','line_number':229,'multiline':False]
['text':' to always depend upon them. For example if env.AutoInstall some file 'foo'','line_number':230,'multiline':False]
['text':' tagged as common base but it's never used as a source for the','line_number':231,'multiline':False]
['text':' AutoInstalled file we're looking at or the children of our children (and','line_number':232,'multiline':False]
['text':' so on) then 'foo' would never get scanned in here without this explicit','line_number':233,'multiline':False]
['text':' dependency adding.','line_number':234,'multiline':False]
['text':' This is where component inheritance happens. We need a default','line_number':267,'multiline':False]
['text':' component for everything so we can store it but if during','line_number':268,'multiline':False]
['text':' transitive scanning we see a child with the default component here','line_number':269,'multiline':False]
['text':' we will move that file to our component. This prevents','line_number':270,'multiline':False]
['text':' over-stepping the DAG bounds since the default component is likely','line_number':271,'multiline':False]
['text':' to be large and an explicitly tagged file is unlikely to depend on','line_number':272,'multiline':False]
['text':' everything in it.','line_number':273,'multiline':False]
['text':' Produce deterministic output for caching purposes','line_number':284,'multiline':False]
['text':' We cannot wire back dependencies to any combination of meta role, meta','line_number':317,'multiline':False]
['text':' component or base component. These cause dependency cycles because','line_number':318,'multiline':False]
['text':' get_alias_map_entry will do that wiring for us then we will try to','line_number':319,'multiline':False]
['text':' map them back on themselves in our loop.','line_number':320,'multiline':False]
['text':' AIB currently uses file suffixes to do mapping. However, sometimes we need','line_number':349,'multiline':False]
['text':' to do the mapping based on a different suffix. This is used for things like','line_number':350,'multiline':False]
['text':' dSYM files, where we really just want to describe where .dSYM bundles should','line_number':351,'multiline':False]
['text':' be placed, but need to actually handle the substructure. Currently, this is','line_number':352,'multiline':False]
['text':' only used by separate_debug.py.','line_number':353,'multiline':False]
['text':'','line_number':354,'multiline':False]
['text':' TODO: Find a way to do this without the tools needing to coordinate.','line_number':355,'multiline':False]
['text':' We've already auto installed this file and it may have belonged to a','line_number':364,'multiline':False]
['text':' different role since it wouldn't get retagged above. So we just skip','line_number':365,'multiline':False]
['text':' this files since SCons will already wire the dependency since s is a','line_number':366,'multiline':False]
['text':' source and so the file will get installed. A common error here is','line_number':367,'multiline':False]
['text':' adding debug files to the runtime component file if we do not skip','line_number':368,'multiline':False]
['text':' this.','line_number':369,'multiline':False]
['text':' We must do an early subst here so that the _aib_debugdir','line_number':374,'multiline':False]
['text':' generator has a chance to run while seeing 'source'. We need','line_number':375,'multiline':False]
['text':' to do two substs here.  The first is to expand an variables','line_number':376,'multiline':False]
['text':' in `target_for_source` while we can see `source`. This is','line_number':377,'multiline':False]
['text':' needed for things like _aib_debugdir. Then, we need to do a','line_number':378,'multiline':False]
['text':' second subst to expand DESTDIR, interpolating','line_number':379,'multiline':False]
['text':' `target_for_source` in as $TARGET. Yes, this is confusing.','line_number':380,'multiline':False]
['text':' Wire up component dependencies and generate task aliases','line_number':400,'multiline':False]
['text':' The task map is a map of string task names (i.e. "install" by default)','line_number':404,'multiline':False]
['text':' to either a tuple or function. If it's a function we assume that we','line_number':405,'multiline':False]
['text':' generate dependent aliases for that task, otherwise if it's a tuple we','line_number':406,'multiline':False]
['text':' deconstruct it here to get the function (the first element) and a','line_number':407,'multiline':False]
['text':' boolean indicating whether or not to generate dependent aliases for','line_number':408,'multiline':False]
['text':' that task. For example the "archive" task added by the auto_archive','line_number':409,'multiline':False]
['text':' tool disables them because tarballs do not track dependencies so you','line_number':410,'multiline':False]
['text':' do not want archive-foo to build archive-bar as well if foo depends on','line_number':411,'multiline':False]
['text':' bar.','line_number':412,'multiline':False]
['text':' There is no API for determining if an Entry is operating in','line_number':438,'multiline':False]
['text':' a SConf context. We obviously do not want to auto tag, and','line_number':439,'multiline':False]
['text':' install conftest Programs. So we filter them out the only','line_number':440,'multiline':False]
['text':' way available to us.','line_number':441,'multiline':False]
['text':'','line_number':442,'multiline':False]
['text':' We're working with upstream to expose this information.','line_number':443,'multiline':False]
['text':' Get the suffix, unless overridden','line_number':447,'multiline':False]
['text':' Does this target_role end with one of our speicifed roles','line_number':537,'multiline':False]
['text':' dedup and sort targets','line_number':543,'multiline':False]
['text':' Matches the autoconf documentation:','line_number':571,'multiline':False]
['text':' https://www.gnu.org/prep/standards/html_node/Directory-Variables.html','line_number':572,'multiline':False]
['text':' TODO: we should probably expose these as PseudoBuilders and let','line_number':602,'multiline':False]
['text':' users define their own aliases for them.','line_number':603,'multiline':False]
['text':' TODO: investigate if using a ListEmitter here can cause','line_number':619,'multiline':False]
['text':' problems if AIB is not loaded last','line_number':620,'multiline':False]
