['text':'*
 * Tests that a backtrace will appear in the $currentOp output if the backtrace option is
 * set to true and there is a latch timeout.
 *
 * @tags: [
 *   # The test runs commands that are not allowed with security token: whatsmyuri.
 *   not_allowed_with_signed_security_token,
 *   assumes_read_concern_unchanged,
 *   assumes_read_preference_unchanged,
 *   no_selinux,
 *   multiversion_incompatible,
 *   requires_latch_analyzer
 * ]
 ','line_number':1,'multiline':True]
['text':' This test causes an extra thread with a self-contended lock to be created so that currentOp can','line_number':17,'multiline':False]
['text':' observe its DiagnosticInfo. This mutex is test-only, and is at a lower level than the','line_number':18,'multiline':False]
['text':' SessionCatalog's mutex, so we pass 'idleSessions: false' to avoid scanning idle sessions during','line_number':19,'multiline':False]
['text':' currentOp and hitting a latch violation.','line_number':20,'multiline':False]
['text':' Absent until we have efficient enough backtracing
        assert(result["waitingForLatch"].hasOwnProperty("backtrace"));
        result["waitingForLatch"]["backtrace"].forEach(function(frame) {
            assert(frame.hasOwnProperty("addr"));
            assert(typeof frame["addr"] === "string");
            assert(frame.hasOwnProperty("path"));
            assert(typeof frame["path"] === "string");
        });
        ','line_number':72,'multiline':True]
['text':' Make sure we saw the ops we expected','line_number':91,'multiline':False]
