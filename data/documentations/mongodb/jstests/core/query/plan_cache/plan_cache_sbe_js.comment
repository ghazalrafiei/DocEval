['text':'*
 * Test that for SBE plans a plan cache entry includes a serialized SBE plan tree, and does not for
 * classic plans.
 *
 * @tags: [
 *   # If all chunks are moved off of a shard, it can cause the plan cache to miss commands.
 *   assumes_balancer_off,
 *   does_not_support_stepdowns,
 *   # This test attempts to perform queries with plan cache filters set up. The former operation
 *   # may be routed to a secondary in the replica set, whereas the latter must be routed to the
 *   # primary.
 *   assumes_read_concern_unchanged,
 *   assumes_read_preference_unchanged,
 *   assumes_unsharded_collection,
 *   # This test checks a new field "solutionHash" in $planCacheStats, not available in previous
 *   # versions.
 *   requires_fcv_72,
 *   multiversion_incompatible,
 *   # Plan cache state is node-local and will not get migrated alongside tenant data.
 *   tenant_migration_incompatible,
 *   # TODO SERVER-67607: Test plan cache with CQF enabled.
 *   cqf_incompatible,
 *   # Checks that SBE is never used when SBE full is not enabled. For implicitly created column
 *   # indexes this check would be violated, since it is not covered by other SBE feature flags.
 *   assumes_no_implicit_index_creation,
 * ]
 ','line_number':1,'multiline':True]
['text':' Check that a new entry is added to the plan cache even for single plans.','line_number':36,'multiline':False]
['text':' Validate sbe plan cache stats entry.','line_number':39,'multiline':False]
['text':' We need two indexes so that the multi-planner is executed.','line_number':52,'multiline':False]
['text':' Validate plan cache stats entry.','line_number':58,'multiline':False]
['text':' Test that the plan cached for a query with a $match pushed down to SBE via','line_number':74,'multiline':False]
['text':' 'CanonicalQuery::_cqPipeline' is shared across queries with the same shape but different','line_number':75,'multiline':False]
['text':' constants.','line_number':76,'multiline':False]
['text':' Test that a plan whose match expression has > 512 predicates does not get cached for SBE,','line_number':88,'multiline':False]
['text':' because in that case it will not be auto-parameterized, so caching the plan would cause cache','line_number':89,'multiline':False]
['text':' flooding with plans that will likely never be resused (SERVER-79867). Also verify the results','line_number':90,'multiline':False]
['text':' are correct.','line_number':91,'multiline':False]
['text':' Define $match stages with kDocFields > 512 match predicates.','line_number':104,'multiline':False]
['text':' Run each query twice as query plans do not show up in cache stats until they have been','line_number':109,'multiline':False]
['text':' activated, which occurs on the second execution.','line_number':110,'multiline':False]
['text':' There should be zero SBE plan cache entries.','line_number':123,'multiline':False]
['text':' Test that a plan whose match expression has <= 512 predicates does get cached for SBE. Also','line_number':129,'multiline':False]
['text':' verify the results are correct. There is currently an overhead of one parameter, so we must','line_number':130,'multiline':False]
['text':' not use more than 511 match predicates, but to future-proof this against any additional','line_number':131,'multiline':False]
['text':' overhead, we use only 500 for this test case.','line_number':132,'multiline':False]
['text':' Define $match stages with kDocFields < 512 match predicates.','line_number':145,'multiline':False]
['text':' Run each query twice as query plans do not show up in cache stats until they have been','line_number':150,'multiline':False]
['text':' activated, which occurs on the second execution.','line_number':151,'multiline':False]
['text':' There should be one SBE plan cache entry as the above aggreegations are parameterized and','line_number':164,'multiline':False]
['text':' thus all share the same plan.','line_number':165,'multiline':False]
