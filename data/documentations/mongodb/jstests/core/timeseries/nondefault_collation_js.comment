['text':'*
 * Correctness tests for TS collections with collation that might not match the explicit collation,
 * specified in the query.
 *
 * Queries on timeseries attempt various optimizations to avoid unpacking of buckets. These rely on
 * the meta field and the control data (currently, min and max), computed for each bucket.
 * Collection's collation might affect the computed control values.
 *
 * @tags: [
 *   # TODO (SERVER-73322): remove
 *   assumes_against_mongod_not_mongos,
 *   requires_non_retryable_writes,
 *   requires_pipeline_optimization,
 *   does_not_support_stepdowns,
 *   multiversion_incompatible,
 *   # Explain of a resolved view must be executed by mongos.
 *   directly_against_shardsvrs_incompatible,
 *   # We need a timeseries collection.
 *   requires_timeseries,
 * ]
 ','line_number':1,'multiline':True]
['text':' case and diacritics ignored','line_number':30,'multiline':False]
['text':' Find on meta field isn't different from a find on any other view, but let's check it anyway.','line_number':47,'multiline':False]
['text':' Use the collection's collation with numeric ordering.','line_number':60,'multiline':False]
['text':' should match "5" and "10"','line_number':62,'multiline':False]
['text':' Use explicit collation with lexicographic ordering.','line_number':64,'multiline':False]
['text':' should match only "5"','line_number':66,'multiline':False]
['text':' For the measurement fields each bucket computes additional "control values", such as min/max and','line_number':69,'multiline':False]
['text':' might use them to avoid unpacking.','line_number':70,'multiline':False]
['text':' The 'numericOrdering' on the collection means that the max of the bucket with the three docs','line_number':79,'multiline':False]
['text':' below is "10" (while the lexicographic max is "5").','line_number':80,'multiline':False]
['text':' A query with default collation would use the bucket's min/max and find the matches. We are','line_number':85,'multiline':False]
['text':' not checking the unpacking optimizations here as it's not a concern of collation per se.','line_number':86,'multiline':False]
['text':' should match "5" and "10"','line_number':88,'multiline':False]
['text':' If a query with 'insensitive' collation, which doesn't do numeric ordering, used the bucket's','line_number':90,'multiline':False]
['text':' min/max it would miss the bucket. Check, that it doesn't.','line_number':91,'multiline':False]
['text':' should match only "5"','line_number':93,'multiline':False]
['text':' This should generate a bucket with control.min.value = 'C' and control.max.value = 'c'.','line_number':102,'multiline':False]
['text':' A query with default collation would use the bucket's min/max and find the two matches.','line_number':107,'multiline':False]
['text':' should match "C" and "b".','line_number':111,'multiline':False]
['text':' If a query with 'insensitive' collation used the bucket's min/max it would miss the bucket.','line_number':113,'multiline':False]
['text':' Check, that it doesn't.','line_number':114,'multiline':False]
['text':' should match only "b".','line_number':118,'multiline':False]
['text':' Run the same test with aggregate command.','line_number':120,'multiline':False]
['text':' Using collection's collation with numeric ordering.','line_number':137,'multiline':False]
['text':' Using explicit collation with lexicographic ordering.','line_number':143,'multiline':False]
['text':' "1" goes here','line_number':148,'multiline':False]
['text':' "5" goes here','line_number':149,'multiline':False]
['text':' Cause two different buckets with various case/diacritics in each for the measurement 'name'.','line_number':160,'multiline':False]
['text':' Test with the collection's collation, which is case and diacritic insensitive.','line_number':168,'multiline':False]
['text':' Test with explicit collation that is different from the collection's.','line_number':171,'multiline':False]
['text':' For $group queries that would put whole buckets into the same group, it might be possible to','line_number':177,'multiline':False]
['text':' avoid unpacking if the information the group is computing is exposed in the control data of each','line_number':178,'multiline':False]
['text':' bucket. Currently, we only do this optimization for min/max with the meta as the group key.','line_number':179,'multiline':False]
['text':' These two docs will be placed in the same bucket, and the max for the bucket will be computed','line_number':188,'multiline':False]
['text':' using collection's collation, that is, it should be "10".','line_number':189,'multiline':False]
['text':' Let's check our understanding of what happens with the bucketing as otherwise the tests below','line_number':193,'multiline':False]
['text':' won't be testing what we think they are.','line_number':194,'multiline':False]
['text':' Use the collection's collation with numeric ordering.','line_number':199,'multiline':False]
['text':' Use the collection's collation with lexicographic ordering.','line_number':203,'multiline':False]
['text':' Create index with a different collation.','line_number':218,'multiline':False]
['text':' We only check that the correct plan is chosen so the contents of the collection don't matter','line_number':221,'multiline':False]
['text':' as long as it's not empty.','line_number':222,'multiline':False]
['text':' Queries that don't specify explicit collation should use the collection's default collation','line_number':226,'multiline':False]
['text':' which isn't compatible with the index, so the index should NOT be used.','line_number':227,'multiline':False]
['text':' Queries with an explicit collation which isn't compatible with the index, should NOT do','line_number':231,'multiline':False]
['text':' index scan.','line_number':232,'multiline':False]
['text':' Queries with the same collation as in the index, should do index scan.','line_number':236,'multiline':False]
['text':' Numeric queries that don't rely on collation should do index scan.','line_number':240,'multiline':False]
