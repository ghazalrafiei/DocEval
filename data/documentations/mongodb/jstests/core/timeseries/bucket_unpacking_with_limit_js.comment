['text':'*
 * Tests that the bucket unpacking with limit rewrite is performed and pushes the limit before
 * unpacking all buckets, while ensuring no incorrect results are created

 * @tags: [
 *     # This test depends on certain writes ending up in the same bucket. Stepdowns and tenant
 *     # migrations may result in writes splitting between two primaries, and thus different
 *     # buckets.
 *     does_not_support_stepdowns,
 *     tenant_migration_incompatible,
 *     # We need a timeseries collection.
 *     requires_timeseries,
 *     # Explain of a resolved view must be executed by mongos.
 *     directly_against_shardsvrs_incompatible,
 *     # This complicates aggregation extraction.
 *     do_not_wrap_aggregations_in_facets,
 *     # Refusing to run a test that issues an aggregation command with explain because it may
 *     # return incomplete results if interrupted by a stepdown.
 *     does_not_support_stepdowns,
 *     requires_fcv_71
 * ]
 ','line_number':1,'multiline':True]
['text':' Helper function to set up collections.','line_number':31,'multiline':False]
['text':' If usesMeta is true, we want the collection to have a onlyMeta field','line_number':35,'multiline':False]
['text':' If usesMeta is true, we push 10 documents with all different onlyMeta field. This tests the','line_number':46,'multiline':False]
['text':' case when documents come from multiple different buckets. If usesMeta is false, we generate','line_number':47,'multiline':False]
['text':' 20 documents that all go into the same bucket.','line_number':48,'multiline':False]
['text':' Helper function to check the PlanStage.','line_number':61,'multiline':False]
['text':' If onlyMeta is set to true, we only want to include the collection with onlyMeta field','line_number':64,'multiline':False]
['text':' specified to ensure sort can be done on the onlyMeta field','line_number':65,'multiline':False]
['text':' We check index at i in the PlanStage against the i'th index in expectedStages','line_number':71,'multiline':False]
['text':' Should rewrite [{$_unpack}, {$limit: x}] pipeline as [{$limit:','line_number':72,'multiline':False]
['text':' x}, {$_unpack}, {$limit: x}]','line_number':73,'multiline':False]
['text':' Helper function to test correctness.','line_number':89,'multiline':False]
['text':' Checks that the result length is correct, and that each element is unique','line_number':94,'multiline':False]
['text':' checks that each element in the result is actually from the collection','line_number':97,'multiline':False]
['text':' Simple limit test. Because the pushed down limit is in the PlanStage now,','line_number':107,'multiline':False]
['text':' getExplainedPipelineFromAggregation does not display it and we don't see the first limit / sort','line_number':108,'multiline':False]
['text':' stage. The presence of the pushed limit is tested in unit tests.','line_number':109,'multiline':False]
['text':' Test that when two limits are present, they get squashed into 1 taking limit of the smaller','line_number':112,'multiline':False]
['text':' (tighter) value','line_number':113,'multiline':False]
['text':' Adding another stage after $limit to make sure that is also executed','line_number':116,'multiline':False]
['text':' Correctness test','line_number':122,'multiline':False]
['text':' Test that sort absorbs the limits following it.','line_number':127,'multiline':False]
['text':' Test limit comes before sort.','line_number':157,'multiline':False]
