['text':'*
 * Conceptually, the lastpoint optimization consists of adding bucket-level stages that would limit
 * the data to the bucket(s) that contain the lastpoint event(s). Then only these buckets are
 * unpacked and the original pipeline is run over the unpacked events.
 *
 * Computing a "lastpoint" involves defining an ordering and using a $group stage to pick the
 * boundary element. The ordering can come either from an explicit $sort stage or from the 'sortBy'
 * property of the top/bottom accumulators in the $group. We only do this optimization when ordering
 * on time. Note, that the actual sort pattern might include a prefix for the key that is used to
 * group by.
 *
 * The additional stages against the buckets collection rely on the control values for the time
 * field. The min/max control values for time have _different semantics_. Max is a true max accross
 * the events in the bucket but min is a _rounded down_ value per the collection settings. This
 * means that we can find the event with max t ({$top: {sortBy: {t: -1}, ...}
 * or {$bottom: {sortBy: {t: 1}, ...}}) accurately by sorting the buckets on
 * {control.time.max: -1} and taking the first bucket (then unpacking the bucket, etc.). We cannot
 * do the same when looking for the event with min t ({$top: {sortBy: {t: 1}, ...} or
 * {$bottom: {sortBy: {t: -1}, ...}}).
 *
 * The optimization would be valid for any group key that guarantees combining all events from a
 * given bucket into the same group (e.g. a const group key), however, we only support the case
 * when the group key is a single 'metaField' (whole or a sub-field, but not an expression).
 *
 * In presense of suitable indexes inserting the bucket level stages might enable futher
 * optimizations such as DISTINCT_SCAN.
 *
 * @tags: [
 *   requires_timeseries,
 *   # Aggregation with explain may return incomplete results if interrupted by a stepdown.
 *   does_not_support_stepdowns,
 *   # "Explain of a resolved view must be executed by mongos"
 *   directly_against_shardsvrs_incompatible,
 * ]
 *
 ','line_number':1,'multiline':True]
['text':' The lastpoint optimization attempt to pick a bucket that would contain the event with max time','line_number':44,'multiline':False]
['text':' and then only unpack that bucket. This function creates a collection with three buckets that','line_number':45,'multiline':False]
['text':' include events that define the following time windows (for m: 1):','line_number':46,'multiline':False]
['text':' #1: [t0*         t3]','line_number':47,'multiline':False]
['text':' #2:     [t1*             t5] <- the optimization should pick this bucket, lastpoint event is t5','line_number':48,'multiline':False]
['text':' #3:         [t2*     t4]','line_number':49,'multiline':False]
['text':' NB: ti* are rounded down to the nearest minute','line_number':50,'multiline':False]
['text':' Ordered in time.','line_number':52,'multiline':False]
['text':' lastpoint value of x for m = 1','line_number':61,'multiline':False]
['text':' lastpoint value of x for m = 2','line_number':62,'multiline':False]
['text':' create bucket #3','line_number':68,'multiline':False]
['text':' add to bucket #3','line_number':69,'multiline':False]
['text':' earlier time => create bucket #2 (close #3)','line_number':70,'multiline':False]
['text':' add to bucket #2, this is the lastpoint event','line_number':71,'multiline':False]
['text':' earlier time => create bucket #1 (close #2)','line_number':73,'multiline':False]
['text':' add to bucket #1','line_number':74,'multiline':False]
['text':' An event with a different meta goes into a separate bucket.','line_number':76,'multiline':False]
['text':' If this assert fails it would mean that bucket creation logic have changed. The lastpoint','line_number':80,'multiline':False]
['text':' optimization might still be correct but the tests below won't be checking some aspects of it','line_number':81,'multiline':False]
['text':' anymore.','line_number':82,'multiline':False]
['text':' Cases when the lastpoint optimization doesn't apply.','line_number':91,'multiline':False]
['text':' First/last family of accumulators (quering for the event with min time).','line_number':93,'multiline':False]
['text':' Top/bottom family of accumulators (quering for the event with min time).','line_number':101,'multiline':False]
['text':' TopN/bottomN family of accumulators (quering for the event with min time).','line_number':109,'multiline':False]
['text':' TopN/bottomN family of accumulators with n > 1 or non-const (even if it always evals to 1).','line_number':117,'multiline':False]
['text':' If there are multiple top/bottom accumulators, even if all of them are eligible for the','line_number':145,'multiline':False]
['text':' optimization, we don't do it.','line_number':146,'multiline':False]
['text':' If there are accumulators, other than the supported ones or if mixing direction.','line_number':162,'multiline':False]
['text':' If there is an event filter, the optimization doesn't apply because the filter might skip','line_number':166,'multiline':False]
['text':' _all_ events in the bucket chosen by the bucket-level stages.','line_number':167,'multiline':False]
['text':' If there is a limit after $sort, the optimization doesn't apply (as the limit might cut','line_number':171,'multiline':False]
['text':' off the max time depending on the direction of the sort).','line_number':172,'multiline':False]
['text':' Not grouping by a single 'metaField' (some of these groups, in theory, could be supported by','line_number':176,'multiline':False]
['text':' the lastpoint optimization, but it hasn't been implemented yet).','line_number':177,'multiline':False]
['text':' Cases when the lastpoint optimization does apply. When there is no suitable index, the plan is:','line_number':194,'multiline':False]
['text':' SORT + PROJECTION_SIMPLE + COLLSCAN + $group at the bucket level followed by unpack, etc.','line_number':195,'multiline':False]
['text':' The default {m: 1, t: 1} index isn't suitable.','line_number':196,'multiline':False]
['text':' First/last family of accumulators.','line_number':198,'multiline':False]
['text':' Top/bottom family of accumulators.','line_number':224,'multiline':False]
['text':' TopN/bottomN family of accumulators.','line_number':250,'multiline':False]
['text':' Multiple $first ($last) are supported. As well as multiple outputs in top/bottom.','line_number':280,'multiline':False]
['text':' A filter on 'metaField' should not prevent this optimization.','line_number':301,'multiline':False]
['text':' Fields computed from 'metaField' can be used in the acc.','line_number':322,'multiline':False]
['text':' When there is a suitable index, DISTINCT_SCAN optimization should kick in. We only sanity test','line_number':332,'multiline':False]
['text':' with a couple of pipelines because the correctness of DISTINCT_SCAN is verified elsewhere, so','line_number':333,'multiline':False]
['text':' here we check that the rewrite we do for "lastpoint" does enable it.','line_number':334,'multiline':False]
['text':' When we don't expect the optimization to happen, we'll just check the plan. For this the data in','line_number':358,'multiline':False]
['text':' the collection is irrelevant as long as the collection isn't empty.','line_number':359,'multiline':False]
['text':' When the lastpoint optimization doesn't apply there must be no group stage at the buckets','line_number':365,'multiline':False]
['text':' collection level (that is, before unpacking).','line_number':366,'multiline':False]
['text':' The pipeline was executed in SBE. The input to 'UNPACK_TS_BUCKET' cannot be a group.','line_number':378,'multiline':False]
['text':' When we expect the optimization to happen, we'll check the plan and the result of the query to','line_number':389,'multiline':False]
['text':' confirm the correctness of rewrite.','line_number':390,'multiline':False]
['text':' There must be a group at the buckets collection level (that is, before unpack).','line_number':397,'multiline':False]
['text':' The lastpoint opt currently isn't lowered to SBE.','line_number':408,'multiline':False]
['text':' There must be a group at the buckets collection level (that is, before unpack).','line_number':436,'multiline':False]
['text':' The distinct scan opt currently isn't lowered to SBE.','line_number':448,'multiline':False]
