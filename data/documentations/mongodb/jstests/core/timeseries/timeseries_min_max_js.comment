['text':'*
 * Tests that a time-series bucket's control.min and control.max accurately reflect the minimum and
 * maximum values inserted into the bucket.
 *
 * @tags: [
 *   # This test depends on certain writes ending up in the same bucket. Stepdowns and tenant
 *   # migrations may result in writes splitting between two primaries, and thus different buckets.
 *   does_not_support_stepdowns,
 *   tenant_migration_incompatible,
 *   # We need a timeseries collection.
 *   requires_timeseries,
 * ]
 ','line_number':1,'multiline':True]
['text':' Find the _id value of the measurement just inserted.','line_number':43,'multiline':False]
['text':' Find the bucket the measurement belongs to.','line_number':48,'multiline':False]
['text':' Empty objects are considered.','line_number':74,'multiline':False]
['text':' The metadata field is not considered.','line_number':81,'multiline':False]
['text':' Objects and arrays are updated element-wise.','line_number':85,'multiline':False]
['text':' Schema change, new bucket.','line_number':91,'multiline':False]
['text':' Sub-objects and arrays also updated element-wise','line_number':95,'multiline':False]
['text':' If the two types being compared are not both objects or both arrays, we'll detect a schema','line_number':101,'multiline':False]
['text':' change and open a new bucket.','line_number':102,'multiline':False]
['text':' We correctly detect schema changes from Array to Object and back','line_number':109,'multiline':False]
['text':' Sparse measurements only affect the min/max for the fields present.','line_number':115,'multiline':False]
['text':' We correctly handle canonical type','line_number':121,'multiline':False]
