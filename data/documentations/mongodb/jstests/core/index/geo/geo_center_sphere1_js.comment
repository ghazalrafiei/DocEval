['text':' @tags: [','line_number':1,'multiline':False]
['text':'   assumes_balancer_off,','line_number':2,'multiline':False]
['text':'   requires_fastcount,','line_number':3,'multiline':False]
['text':' ]','line_number':4,'multiline':False]
['text':' lower for more rigor, higher for more speed (tested with .5, .678, 1, 2, 3, and 4)','line_number':11,'multiline':False]
['text':'  x , y    rad','line_number':14,'multiline':False]
['text':' ~200 miles','line_number':15,'multiline':False]
['text':' ~1000 miles','line_number':22,'multiline':False]
['text':' needed with low skip values','line_number':43,'multiline':False]
['text':' correct[i].forEach( printjson )','line_number':56,'multiline':False]
['text':' printjson( q );','line_number':57,'multiline':False]
['text':' t.find( q ).forEach( printjson )','line_number':58,'multiline':False]
['text':' printjson(t.find( q ).explain())','line_number':60,'multiline':False]
['text':' printjson( correct[i].map( function(z){ return z._id; } ).sort() )','line_number':62,'multiline':False]
['text':' printjson( t.find(q).map( function(z){ return z._id; } ).sort() )','line_number':63,'multiline':False]
['text':' allow tenth of a percent error due to conversions','line_number':74,'multiline':False]
['text':' The index should be at least minimally effective in preventing the full collection','line_number':101,'multiline':False]
['text':' scan.','line_number':102,'multiline':False]
