['text':'*
 * Test the write conflict behavior between transactional and non-transactional (single document)
 * writes.
 *
 * All writes in MongoDB execute inside transactions. Single document writes (which, until 4.0,
 * categorized all writes), will indefinitely retry, if their associated transaction encounters a
 * WriteConflict error. This differs from the behavior of multi-document transactions, where
 * WriteConflict exceptions that occur inside a transaction are not automatically retried, and are
 * returned to the client. This means that writes to a document D inside a multi-document
 * transaction will effectively "block" any subsequent single document writes to D, until the
 * multi-document transaction commits.
 *
 * Note that in this test we sometimes refer to a single document write as "non-transactional".
 * Internally, single document writes still execute inside a transaction, but we use this
 * terminology to distinguish them from multi-document transactions.
 *
 * @tags: [uses_transactions]
 ','line_number':1,'multiline':True]
['text':' Clean up and create test collection.','line_number':28,'multiline':False]
['text':' Two conflicting documents to be inserted by a multi-document transaction and a','line_number':39,'multiline':False]
['text':' non-transactional write, respectively.','line_number':40,'multiline':False]
['text':' Performs a single document insert on the test collection. Returns the command result object.','line_number':49,'multiline':False]
['text':' Returns true if a single document insert has started running on the server.','line_number':55,'multiline':False]
['text':'*
 * A non-transactional (single document) write should keep retrying when attempting to insert a
 * document that conflicts with a previous write done by a running transaction, and should be
 * allowed to continue after the transaction commits. If 'maxTimeMS' is specified, a single
 * document write should timeout after the given time limit if there is a write conflict.
 ','line_number':63,'multiline':True]
['text':' Wait for the single doc write to start.','line_number':83,'multiline':False]
['text':' Commit the transaction, which should allow the single document write to finish. Since the','line_number':86,'multiline':False]
['text':' single doc write should get serialized after the transaction, we expect it to fail with a','line_number':87,'multiline':False]
['text':' duplicate key error.','line_number':88,'multiline':False]
['text':' Check the final documents.','line_number':94,'multiline':False]
['text':' Clean up the test collection.','line_number':97,'multiline':False]
['text':'*
 * A non-transactional (single document) write should keep retrying when attempting to insert a
 * document that conflicts with a previous write done by a running transaction, and should be
 * allowed to continue and complete successfully after the transaction aborts.
 ','line_number':100,'multiline':True]
['text':' Wait for the single doc write to start.','line_number':114,'multiline':False]
['text':' Abort the transaction, which should allow the single document write to finish and insert its','line_number':117,'multiline':False]
['text':' document successfully.','line_number':118,'multiline':False]
['text':' Check the final documents.','line_number':124,'multiline':False]
['text':' Clean up the test collection.','line_number':127,'multiline':False]
['text':'*
 * A transaction that tries to write to a document that was updated by a non-transaction after
 * it started should fail with a WriteConflict.
 ','line_number':130,'multiline':True]
['text':' Check the final documents.','line_number':146,'multiline':False]
