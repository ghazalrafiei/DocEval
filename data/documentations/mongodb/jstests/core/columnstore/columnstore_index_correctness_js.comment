['text':'*
 * Testing of just the query layer's integration for columnar index.
 * @tags: [
 *   # Column store indexes are still under a feature flag.
 *   featureFlagColumnstoreIndexes,
 *   # Runs explain on an aggregate command which is only compatible with readConcern local.
 *   assumes_read_concern_unchanged,
 *   # Columnstore tests set server parameters to disable columnstore query planning heuristics -
 *   # 1) server parameters are stored in-memory only so are not transferred onto the recipient,
 *   # 2) server parameters may not be set in stepdown passthroughs because it is a command that may
 *   #      return different values after a failover
 *   tenant_migration_incompatible,
 *   does_not_support_stepdowns,
 *   not_allowed_with_signed_security_token,
 *   uses_full_validation,
 * ]
 ','line_number':1,'multiline':True]
['text':' the content doesn't matter for this test','line_number':30,'multiline':False]
['text':' Run a query that tests SERVER-65494 (columnstore index shouldn't make us choke on empty paths).','line_number':50,'multiline':False]
['text':' Note that we intentionally don't hint or validate that the columnstore index is','line_number':85,'multiline':False]
['text':' being used. This is because we just care that the index doesn't cause these queries','line_number':86,'multiline':False]
['text':' to choke (we actually expect them to redirect to collection scan).','line_number':87,'multiline':False]
['text':' Logically, the array cases should return results, but they don't with collscan.','line_number':96,'multiline':False]
['text':' We just care that the behavior matches so keep the validation less brittle here.','line_number':97,'multiline':False]
['text':' Check that column scan projections without filters will return all the documents, leveraging','line_number':107,'multiline':False]
['text':' dense columns internally regardless of whether _id is included or not. Internally, the dense','line_number':108,'multiline':False]
['text':' RowId Column will be scanned if the dense _id field is not included in the query. Scanning a','line_number':109,'multiline':False]
['text':' dense field column, which has a value present for every document in the collection, is','line_number':110,'multiline':False]
['text':' necessary to find documents missing all projected fields -- in the following queries','line_number':111,'multiline':False]
['text':' ultimately returning empty documents for such documents, rather than not at all.','line_number':112,'multiline':False]
['text':' Store documents where 'x' and 'y' fields are missing in some documents but present in other','line_number':114,'multiline':False]
['text':' documents. This should cause the dense _id or internal RowId columns to be used to identify','line_number':115,'multiline':False]
['text':' null field values.','line_number':116,'multiline':False]
['text':' Double check that the document was inserted correctly.','line_number':156,'multiline':False]
['text':' A projection on "a.b.c" should retrieve {"a": {"b": {"c": 5}}} but _not_ {"a": {"b.c": 6}}.','line_number':160,'multiline':False]
['text':' We cannot directly check the output of a column scan on most fields in the test document,','line_number':169,'multiline':False]
['text':' because there is no way to express projections on fields with empty names, internal dots, or','line_number':170,'multiline':False]
['text':' leading $s. For this test, we consider it sufficient that inserts to the column store do not','line_number':171,'multiline':False]
['text':' crash or corrupt data.','line_number':172,'multiline':False]
['text':' Multiple tests in this file use the same dataset. Intentionally not using _id as the unique','line_number':177,'multiline':False]
['text':' identifier, to avoid getting IDHACK plans when we query by it.','line_number':178,'multiline':False]
['text':' Run a similar query that projects multiple fields with a shared parent object.','line_number':310,'multiline':False]
['text':' Run a query that tests the SERVER-67742 fix.','line_number':329,'multiline':False]
['text':' Have to use the index hint because SERVER-67264 blocks selection of CSI.','line_number':333,'multiline':False]
['text':' Now test grouping semantics. Grouping limits the set of paths visible downstream which should','line_number':353,'multiline':False]
['text':' allow column scan plans.','line_number':354,'multiline':False]
['text':' Sanity check that we are comparing the plans we expect to be.','line_number':356,'multiline':False]
['text':' For readers who are taking on the massachistic task of trying to','line_number':375,'multiline':False]
['text':' verify that these results are in fact expected, the major expectations are that all arrays','line_number':376,'multiline':False]
['text':' are traversed and output as the "structure" EXCEPT if there's a doubly nested array without','line_number':377,'multiline':False]
['text':' any intervening path as in {a: [[{b: {c: 1}}]]}.','line_number':378,'multiline':False]
['text':' Note "$a.b.c" does not descend into double (directly nested) arrays as in 42,45. Might','line_number':396,'multiline':False]
['text':' have expected [[[]]]. Similarly in 56,57, it does not find the "c" values "hidden" within','line_number':397,'multiline':False]
['text':' a directly-nested array.','line_number':398,'multiline':False]
['text':' Test count-like queries.','line_number':421,'multiline':False]
['text':' Now test a few different count pipelines.','line_number':432,'multiline':False]
['text':' Test column store queries with collations.','line_number':454,'multiline':False]
['text':' Insert case sensitive values.','line_number':459,'multiline':False]
['text':' Ensure that the filter actually got pushed down.','line_number':468,'multiline':False]
['text':' no collation','line_number':480,'multiline':False]
['text':' case sensitive','line_number':481,'multiline':False]
['text':' case insensitive','line_number':482,'multiline':False]
