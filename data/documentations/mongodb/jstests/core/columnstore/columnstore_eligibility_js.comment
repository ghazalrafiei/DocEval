['text':'*
 * Tests the eligibility of certain queries to use a columnstore index.
 * @tags: [
 *   # Column store indexes are still under a feature flag.
 *   featureFlagColumnstoreIndexes,
 *   # Refusing to run a test that issues an aggregation command with explain because it may return
 *   # incomplete results if interrupted by a stepdown.
 *   does_not_support_stepdowns,
 *   # Cannot run aggregate with explain in a transaction.
 *   does_not_support_transactions,
 *   # Columnstore tests set server parameters to disable columnstore query planning heuristics -
 *   # server parameters are stored in-memory only so are not transferred onto the recipient.
 *   tenant_migration_incompatible,
 *   not_allowed_with_signed_security_token,
 *   # Logic for when a COLUMN_SCAN plan is generated changed slightly as part of enabling more
 *   # queries in SBE in the 7.0 release.
 *   requires_fcv_70,
 * ]
 ','line_number':1,'multiline':True]
['text':' TODO SERVER-80226: Remove this import','line_number':23,'multiline':False]
['text':'','line_number':38,'multiline':False]
['text':' Examples extracted from the project's design doc.','line_number':39,'multiline':False]
['text':'','line_number':40,'multiline':False]
['text':' Column index can be used to just scan the 'a' column. Note it will also have to','line_number':42,'multiline':False]
['text':' scan The "RowId Column" to find any documents missing 'a'. The column index is not performing the','line_number':43,'multiline':False]
['text':' grouping operation, it is simply providing an optimized data access layer.','line_number':44,'multiline':False]
['text':' $match+$group queries are expected to be the typical use case for a column index. The predicate','line_number':48,'multiline':False]
['text':' can be applied to the 'a' values directly in the index, but the index is not sorted on the 'a'','line_number':49,'multiline':False]
['text':' values, so this will still need to scan the entire 'a' range.','line_number':50,'multiline':False]
['text':' The column index can also be used for find() queries.','line_number':58,'multiline':False]
['text':' No filter, just projection.','line_number':60,'multiline':False]
['text':' Filter is not eligible for use during column scan, but set of fields is limited enough. Filter','line_number':64,'multiline':False]
['text':' will be applied after assembling an intermediate result containing both "a" and "b".','line_number':65,'multiline':False]
['text':' COLUMN_SCAN is used for top-level $or queries.','line_number':68,'multiline':False]
['text':' Simplest case: just scan "a" column.','line_number':84,'multiline':False]
['text':' Scan the "a" column with a predicate.','line_number':88,'multiline':False]
['text':' A complex predicate.','line_number':92,'multiline':False]
['text':' Scan the "a.b" column with a predicate. Dotted paths are supported even if there are arrays','line_number':105,'multiline':False]
['text':' encountered. See IS_SPARSE Encoding for more details.','line_number':106,'multiline':False]
['text':' 'aggregate' command is supported.','line_number':110,'multiline':False]
['text':'','line_number':114,'multiline':False]
['text':' Now test some queries which are NOT eligible to use a columnstore index.','line_number':115,'multiline':False]
['text':'','line_number':116,'multiline':False]
['text':' No projection.','line_number':117,'multiline':False]
['text':' Any other index should be preferred over a columnstore index.','line_number':120,'multiline':False]
['text':' Referenced more than internalQueryMaxNumberOfFieldsToChooseUnfilteredColumnScan fields (default','line_number':127,'multiline':False]
['text':' 5) - note _id is implicitly included in this projection, causing this query to need 6 fields','line_number':128,'multiline':False]
['text':' There was a query predicate which can be filtered during a columnstore index scan, but the query','line_number':132,'multiline':False]
['text':' referenced more than internalQueryMaxNumberOfFieldsToChooseFilteredColumnScan fields (default 12)','line_number':133,'multiline':False]
['text':' Same as above - the fields here are split across the query and the projection, but there are','line_number':152,'multiline':False]
['text':' still >12 needed to answer the query.','line_number':153,'multiline':False]
['text':' The query depends on the 'comments' field, which has sub objects.  There is a useful operation','line_number':165,'multiline':False]
['text':' that could use the column index: a "parallel unwind" on comments.author and comments.views. No','line_number':166,'multiline':False]
['text':' such operator exists in MQL today, however.','line_number':167,'multiline':False]
['text':' TODO SERVER-80226: Remove 'featureFlagSbeFull' used by $unwind Pushdown feature.','line_number':173,'multiline':False]
['text':' The entire pipeline should be pushed down to SBE.','line_number':175,'multiline':False]
['text':' SBE is not supported for update operations. Also this update would require the whole document.','line_number':183,'multiline':False]
['text':' Be sure to update by _id to preseve the sharded collection passthrough coverage. Targeting by','line_number':184,'multiline':False]
['text':' shard key is required for non-multi updates.','line_number':185,'multiline':False]
['text':' SBE is not supported for delete operations.','line_number':189,'multiline':False]
['text':' SBE is not supported for the count command.','line_number':193,'multiline':False]
['text':' Count-like queries that can use another index should prefer that to column scan.','line_number':197,'multiline':False]
['text':' CSI Can never be used for a filter/$match on numeric components because that represents a','line_number':203,'multiline':False]
['text':' filter over 2^k columns, where k is the number of numeric components. E.g.','line_number':204,'multiline':False]
['text':' find({a.0.b.1: 123}) represents 4 paths:','line_number':205,'multiline':False]
['text':'','line_number':206,'multiline':False]
['text':' {a: {0: {b: {1: 123}}}}','line_number':207,'multiline':False]
['text':' {a: [{b: {1: 123}}]}','line_number':208,'multiline':False]
['text':' {a: {0: {b: [<anything>, 123]}}}','line_number':209,'multiline':False]
['text':' {a: [{b: [<anything>, 123]}]}','line_number':210,'multiline':False]
['text':'','line_number':211,'multiline':False]
['text':' Today we're guaranteed CSI will never be used when numeric components are present in a','line_number':212,'multiline':False]
['text':' filter because SBE does not support querying on such paths.','line_number':213,'multiline':False]
['text':' CSI _can_ be used when there's a numeric path component used in a projection. This','line_number':220,'multiline':False]
['text':' is because MQL projection treats numeric components only as object keys, not array indexes.','line_number':221,'multiline':False]
['text':' Test that a column store index on a subpath can be used and hinted when it covers the query.','line_number':228,'multiline':False]
['text':' Index covers query, can be used.','line_number':234,'multiline':False]
['text':' Note that this is only applicable in non-sharded environments, as the index will not be able to','line_number':235,'multiline':False]
['text':' cover the query if we need the shard key.','line_number':236,'multiline':False]
['text':' Index does not cover query.','line_number':240,'multiline':False]
['text':' Test hinting the subpath index. Sanity check - should use a traditional index without a hint.','line_number':244,'multiline':False]
['text':' Hint the subpath index.','line_number':249,'multiline':False]
['text':' Hint when subpath index doesn't cover query.','line_number':256,'multiline':False]
