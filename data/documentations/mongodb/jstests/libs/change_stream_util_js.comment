['text':'
 * A class with helper functions which operate on change streams. The class maintains a list of
 * opened cursors and kills them on cleanup.
 ','line_number':1,'multiline':True]
['text':'*
 * Enumeration of the possible types of change streams.
 ','line_number':7,'multiline':True]
['text':'*
 * Returns a truncated json object if the size of 'jsonObj' is greater than 'maxErrorSizeBytes'.
 ','line_number':16,'multiline':True]
['text':' Maximum size for the json object.','line_number':20,'multiline':False]
['text':'*
 * Helper function used internally by ChangeStreamTest. If no passthrough is active, it is exactly
 * the same as calling db.runCommand. If a passthrough is active and has defined a function
 * 'changeStreamPassthroughAwareRunCommand', then this method will be overridden to allow individual
 * streams to explicitly exempt themselves from being modified by the passthrough.
 ','line_number':26,'multiline':True]
['text':'*
 * Helper function to retrieve the type of change stream based on the passthrough suite in which the
 * test is being run. If no passthrough is active, this method returns the kCollection watch mode.
 ','line_number':36,'multiline':True]
['text':'*
 * Asserts that the given opType triggers an invalidate entry depending on the type of change
 * stream.
 *     - single collection streams: drop, rename, and dropDatabase.
 *     - whole DB streams: dropDatabase.
 *     - whole cluster streams: none.
 * Returns the invalidate document if there was one, or null otherwise.
 ','line_number':54,'multiline':True]
['text':'*
 * Returns true if a change stream event matches the given expected event, false otherwise. Ignores
 * the resume token, clusterTime, and other unknowable fields unless they are explicitly listed in
 * the expected event.
 ','line_number':95,'multiline':True]
['text':'*
 * Helper to check whether a change event matches the given expected event. Throws assertion failure
 * if change events do not match.
 ','line_number':106,'multiline':True]
['text':'*
 * Helper to check that there are no transaction operations past end of transaction event.
 ','line_number':116,'multiline':True]
['text':' Keeps track of cursors opened during the test so that we can be sure to','line_number':139,'multiline':False]
['text':' clean them up before the test completes.','line_number':140,'multiline':False]
['text':'*
     * Starts a change stream cursor with the given pipeline on the given collection. It uses
     * the 'aggregateOptions' if provided and saves the cursor so that it can be cleaned up later.
     * If 'doNotModifyInPassthroughs' is 'true' and the test is running in a $changeStream
     * upconversion passthrough, then this stream will not be modified and will run as though no
     * passthrough were active.
     *
     * Returns the cursor returned by the 'aggregate' command.
     ','line_number':146,'multiline':True]
['text':' The 'collection' argument may be a collection name, DBCollection object, or '1' which','line_number':160,'multiline':False]
['text':' indicates all collections in _db.','line_number':161,'multiline':False]
['text':'*
     * Returns a change stream cursor that listens for every change in the cluster. Assumes that the
     * ChangeStreamTest has been created on the 'admin' db, and will assert if not. It uses the
     * 'aggregateOptions' if provided and saves the cursor so that it can be cleaned up later.
     ','line_number':175,'multiline':True]
['text':'*
     * Issues a 'getMore' on the provided cursor and returns the cursor returned.
     ','line_number':189,'multiline':True]
['text':'*
     * Returns the next batch of documents from the cursor. This encapsulates logic for checking
     * if it's the first batch or another batch afterwards.
     ','line_number':199,'multiline':True]
['text':'*
     * Returns the next document from a cursor or returns null if there wasn't one.
     * This does not issue any getMores, instead relying off the batch inside 'cursor'.
     ','line_number':207,'multiline':True]
['text':' Since the first change may be on the original cursor, we need to check for that','line_number':225,'multiline':False]
['text':' change on the cursor before we move the cursor forward.','line_number':226,'multiline':False]
['text':'*
     * Checks if the change has been invalidated.
     ','line_number':254,'multiline':True]
['text':'*
     * Asserts that the last observed change was the change we expect to see. This also asserts
     * that if we do not expect the cursor to be invalidated, that we do not see the cursor
     * invalidated. Omits the observed change's resume token and cluster time from the comparison,
     * unless the expected change explicitly lists an '_id' or 'clusterTime' field to compare
     * against.
     ','line_number':261,'multiline':True]
['text':'*
     * Iterates through the change stream and asserts that the next changes are the expected ones.
     * This can be provided with either an expected size or a list of expected changes.
     * If 'expectInvalidate' is provided, then it will expect the change stream to be invalidated
     * at the end. The caller is still expected to provide an invalidate entry in 'expectedChanges'.
     *
     * Returns a list of the changes seen.
     ','line_number':282,'multiline':True]
['text':' Assert that the expected length matches the length of the expected batch.','line_number':301,'multiline':False]
['text':' Convert 'expectedChanges' to an array, even if it contains just a single element.','line_number':308,'multiline':False]
['text':' Set the expected number of changes based on the size of the expected change list.','line_number':315,'multiline':False]
['text':' If we expect invalidation, the final change should have operation type "invalidate".','line_number':338,'multiline':False]
['text':' We make sure that the next batch kills the cursor after an invalidation entry.','line_number':344,'multiline':False]
['text':'*
     * Iterates through the change stream and asserts that the next changes are the expected ones.
     * The order of the change events from the cursor relative to their order in the list of
     * expected changes is ignored, however.
     *
     * Returns a list of the changes seen.
     ','line_number':354,'multiline':True]
['text':'*
     * Retrieves the next batch in the change stream and confirms that it is empty.
     ','line_number':373,'multiline':True]
['text':'*
     * Gets the next document in the change stream. This always executes a 'getMore' first.
     * If the current batch has a document in it, that one will be ignored.
     ','line_number':383,'multiline':True]
['text':' We make sure that the next batch kills the cursor after an invalidation entry.','line_number':395,'multiline':False]
['text':'*
     * Kills all outstanding cursors.
     ','line_number':405,'multiline':True]
['text':' Collection '1' indicates that the change stream was opened against an entire','line_number':416,'multiline':False]
['text':' database and is considered 'collectionless'.','line_number':417,'multiline':False]
['text':'*
     * Returns the document to be used for the value of a $changeStream stage, given a watchMode
     * of type ChangeStreamWatchMode and optional resumeAfter value.
     ','line_number':426,'multiline':True]
['text':'*
     * Create a change stream of the given watch mode (see ChangeStreamWatchMode) on the given
     * collection. Will resume from a given point if resumeAfter is specified.
     ','line_number':442,'multiline':True]
['text':' Use a batch size of 0 to prevent any notifications from being returned in the first','line_number':450,'multiline':False]
['text':' batch. These would be ignored by ChangeStreamTest.getOneChange().','line_number':451,'multiline':False]
['text':'*
     * Asserts that the change stream cursor given by 'cursor' returns at least one 'dropType'
     * notification before returning the next notification given by 'expectedNext'. If running in a
     * sharded passthrough suite, the expectation is to receive a 'dropType' notification from each
     * shard that has at least one chunk. If the change stream is watching the single collection,
     * then the first drop will invalidate the stream.
     *
     * Returns an array of documents which includes all drop events consumed and the expected change
     * itself.
     ','line_number':456,'multiline':True]
['text':'*
     * Asserts that the notifications from the change stream cursor include 0 or more 'drop'
     * notifications followed by a 'dropDatabase' notification.
     *
     * Returns the list of notifications.
     ','line_number':481,'multiline':True]
['text':'*
 * Asserts that the given pipeline will eventually return an error with the provided code, either in
 * the initial aggregate, or a subsequent getMore. Throws an exception if there are any results from
 * running the pipeline, or if it doesn't throw an error within the window of assert.soon(). If
 * 'doNotModifyInPassthroughs' is 'true' and the test is running in a $changeStream upconversion
 * passthrough, then this stream will not be modified and will run as though no passthrough were
 * active.
 ','line_number':496,'multiline':True]
['text':' Run a passthrough-aware initial 'aggregate' command to open the change stream.','line_number':507,'multiline':False]
['text':' Create a cursor using the command response, and begin issuing getMores. We expect','line_number':513,'multiline':False]
['text':' csCursor.hasNext() to throw the expected code before assert.soon() times out.','line_number':514,'multiline':False]
['text':'*
 * Static method for determining which database to run the change stream aggregation on based on
 * the watchMode.
 ','line_number':526,'multiline':True]
['text':'*
 * A set of functions to help validate the behaviour of $changeStreams for a given namespace.
 ','line_number':537,'multiline':True]
['text':'*
 * Asserts that 'changeStreamPreAndPostImages' collection option is present and is enabled for
 * collection.
 ','line_number':566,'multiline':True]
['text':'*
 * Asserts that 'changeStreamPreAndPostImages' collection option is absent in the collection.
 ','line_number':575,'multiline':True]
['text':' Returns the pre-images written while performing the write operations.','line_number':587,'multiline':False]
['text':' Determine the id of the last pre-image document written to be able to determine the pre-image','line_number':592,'multiline':False]
['text':' documents written by 'writeOps()'. The pre-image purging job may concurrently remove some','line_number':593,'multiline':False]
['text':' pre-image documents while this function is executing.','line_number':594,'multiline':False]
['text':' Perform the write operations.','line_number':601,'multiline':False]
['text':' Return only newly written pre-images.','line_number':604,'multiline':False]
['text':' Verify that the result is correct by checking if the last pre-image still exists. However, if','line_number':609,'multiline':False]
['text':' no pre-image document existed before 'writeOps()' invocation, the result may be incorrect.','line_number':610,'multiline':False]
['text':'*
 * Returns documents from the pre-images collection from 'connection' ordered by _id.ts,
 * _id.applyOpsIndex ascending.
 ','line_number':616,'multiline':True]
['text':'*
 * Asserts that pre-images collection is absent in configDB.
 ','line_number':634,'multiline':True]
['text':'*
 * Asserts that pre-images collection is created in the configDB and has clustered index on _id.
 ','line_number':642,'multiline':True]
['text':' Verifies that the pre-images collection is clustered by _id.','line_number':651,'multiline':False]
