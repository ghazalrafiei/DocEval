['text':'*
 * Creates a cursor, then pins it in a parallel shell by using the provided 'failPointName' and
 * 'runGetMoreFunc'. Runs 'assertFunction' while the cursor is pinned, then unpins it.
 *
 * 'conn': a connection to an instance of a mongod or mongos.
 * 'sessionId': The id present if the database is currently in a session.
 * 'dbName': the database to use with the cursor.
 *
 * 'assertFunction(cursorId, coll)':
 *   A function containing the test to be run while the cursor is pinned.
 *
 * 'runGetMoreFunc':
 *   A function to be executed in the parallel shell. It is expected to hit the fail point, defined
 *   in 'failPointName' by calling 'db.runCommand({getMore: cursorId, collection: collName})' but
 *   it can do additional validation on the result of the command or run other commands.
 *
 * 'failPointName': name of the failpoint where 'runGetMoreFunc' is expected to hang.
 *
 * 'assertEndCounts': whether to assert zero pinned cursors an the end.
 ','line_number':1,'multiline':True]
['text':' This test runs manual getMores using different connections, which will not inherit the','line_number':27,'multiline':False]
['text':' implicit session of the cursor establishing command.','line_number':28,'multiline':False]
['text':' Issue an initial find in order to create a cursor and obtain its cursorID.','line_number':39,'multiline':False]
['text':' Enable the specified failpoint.','line_number':45,'multiline':False]
['text':' In a different shell pin the cursor by calling 'getMore' on it that would be blocked by','line_number':49,'multiline':False]
['text':' the failpoint.','line_number':50,'multiline':False]
['text':' Wait until we know the failpoint has been reached.','line_number':57,'multiline':False]
['text':' The assert function might initiate killing of the cursor. Because the cursor is pinned,','line_number':60,'multiline':False]
['text':' it actually won't be killed until the pin is removed but it will interrupt 'getMore' in','line_number':61,'multiline':False]
['text':' the parallel shell after the failpoint is unset.','line_number':62,'multiline':False]
['text':' Unsetting the failpoint allows getMore in the parallel shell to proceed and unpins the','line_number':65,'multiline':False]
['text':' cursor, which will either exhaust or detect interrupt (if 'assertFunction' killed the','line_number':66,'multiline':False]
['text':' cursor).','line_number':67,'multiline':False]
['text':' Wait for the parallel shell to be done with 'getMore' command. We'd know when it moves on','line_number':70,'multiline':False]
['text':' to inserting the sentinel object.','line_number':71,'multiline':False]
['text':' Give the server up to 5 sec to dispose of the cursor.','line_number':74,'multiline':False]
['text':' num_attempts ','line_number':81,'multiline':True]
['text':' intervalMS ','line_number':82,'multiline':True]
['text':' By now either getMore in the parallel shell has exhausted the cursor, or the cursor has','line_number':85,'multiline':False]
['text':' been killed by 'assertFunction'. In both cases, an attempt to kill the cursor again','line_number':86,'multiline':False]
['text':' should report it as not found.','line_number':87,'multiline':False]
