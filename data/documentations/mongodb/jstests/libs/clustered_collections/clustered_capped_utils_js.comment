['text':' Validate TTL-based deletion on a clustered, capped collection.','line_number':4,'multiline':False]
['text':' Set expireAfterSeconds to a day to safely test that only expired documents are deleted.','line_number':8,'multiline':False]
['text':' This test runs with default read concern 'local'.','line_number':44,'multiline':False]
['text':'waitForMajorityCommit=','line_number':45,'multiline':True]
['text':' Only the recent documents survived.','line_number':47,'multiline':False]
['text':' Must tail with read concern majority.','line_number':64,'multiline':False]
['text':' Validate tailable cursor operation along with TTL deletion.','line_number':82,'multiline':False]
['text':' Create a clustered capped collection, and insert two old documents subject to imminent','line_number':100,'multiline':False]
['text':' TTL deletion, and two recent document which survive TTL deletion.','line_number':101,'multiline':False]
['text':' Tail just past the first two documents, so the cursor can survive the upcoming TTL','line_number':117,'multiline':False]
['text':' deletion.','line_number':118,'multiline':False]
['text':' TTL delete the two old documents.','line_number':143,'multiline':False]
['text':'waitForMajorityCommit=','line_number':146,'multiline':True]
['text':' Confirm that the tailable getMore can resume from where it was, since the document the','line_number':149,'multiline':False]
['text':' cursor is positioned on hasn't been TTL-removed.','line_number':150,'multiline':False]
['text':' Validate tailable cursor not keeping up with TTL deletion - CappedPositionLost.','line_number':165,'multiline':False]
['text':' Create a clustered capped collection, and insert two old documents subject to imminent','line_number':182,'multiline':False]
['text':' TTL deletion, and a recent document.','line_number':183,'multiline':False]
['text':' Tail up to and including the first document, before it gets TTL reaped.','line_number':197,'multiline':False]
['text':' TTL delete the two old documents, while the tailable cursor is still on the first one.','line_number':212,'multiline':False]
['text':'waitForMajorityCommit=','line_number':215,'multiline':True]
['text':' Confirm that the tailable cursor returns CappedPositionLost, as the document it was','line_number':218,'multiline':False]
['text':' pointing to has been TTL-deleted.','line_number':219,'multiline':False]
['text':' Validate that by design, a cursor on a clustered capped collection can miss documents if they','line_number':228,'multiline':False]
['text':' are not inserted in cluster key order.','line_number':229,'multiline':False]
['text':' Create a clustered capped collection and insert a document with a cluster key value equal','line_number':242,'multiline':False]
['text':' to now.','line_number':243,'multiline':False]
['text':' Create a tailable cursor and fetch the document inserted.','line_number':252,'multiline':False]
['text':' Now insert a document with a cluster key value equal to a minute ago, and verify','line_number':266,'multiline':False]
['text':' that the tailable cursor is unable to fetch it.','line_number':267,'multiline':False]
['text':' Create clustered capped collection and insert soon-to-be-expired documents.','line_number':288,'multiline':False]
['text':' Expire the documents.','line_number':300,'multiline':False]
['text':' No need to wait for majority commit, as default 'local' read concern is used.','line_number':302,'multiline':False]
['text':'waitForMajorityCommit=','line_number':303,'multiline':True]
['text':' The TTL deletion has been replicated to the oplog.','line_number':306,'multiline':False]
['text':' The batch got split in two separate executions.','line_number':328,'multiline':False]
