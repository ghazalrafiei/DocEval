['text':'*
 * Utilities for feature flags.
 ','line_number':3,'multiline':True]
['text':' A JS attempt at an enum.','line_number':7,'multiline':False]
['text':'*
     * @param 'featureFlag' - the name of the flag you want to check, but *without* the
     *     'featureFlag' prefix. For example, just "Toaster" instead of "featureFlagToaster."
     *
     * @param 'ignoreFcv' - If true, return whether or not the given feature flag is enabled,
     *     regardless of the current FCV version. This is used when a feature flag needs to be
     *     enabled in downgraded FCV versions. If 'ignoreFCV' is false or null, we only return true
     *     if the flag is enabled and this FCV version is greater or equal to the required version
     *     for the flag.
     *
     * @returns one of the 'FlagStatus' values indicating whether the flag is enabled, disabled, or
     *     not found. A flag may be not found because it was recently deleted or because the test is
     *     running on an older mongod version for example.
     ','line_number':14,'multiline':True]
['text':' In order to get an accurate answer for whether a feature flag is enabled, we need to ask','line_number':29,'multiline':False]
['text':' a mongod. If db represents a connection to mongos, or some other configuration, we need','line_number':30,'multiline':False]
['text':' to obtain the correct connection to a mongod.','line_number':31,'multiline':False]
['text':' Some db-like objects (e.g. ShardingTest.shard0) aren't supported by FixtureHelpers,','line_number':45,'multiline':False]
['text':' but we can replace it with an object that should work and try again.','line_number':46,'multiline':False]
['text':' Some db-like objects (e.g ShardedClusterFixture) have a getSiblingDB method','line_number':50,'multiline':False]
['text':' instead of getDB, use that here to avoid an undefined error.','line_number':51,'multiline':False]
['text':' Feature flag not found.','line_number':67,'multiline':False]
['text':'*
     * @param 'featureFlag' - the name of the flag you want to check, but *without* the
     *     'featureFlag' prefix. For example, just "Toaster" instead of "featureFlagToaster."
     *
     * Wrapper around 'getStatus' - see that function for more details on the arguemnts.
     *
     * This wrapper checks for 'kEnabled' but raises an error for 'kNotFound' - if the flag is not
     * known. This can be useful if you want to gate an entire test on a feature flag like so:
     *   if (!FeatureFlagUtil.isEnabled(db, "myFlag")) {
     *       jsTestLog("Skipping test because my flag is not enabled");
     *       return;
     *   }
     *
     * The advantage of this throwing API is that such a test will start complaining in evergreen
     * when you delete the feature flag, rather than passing by not actually running any assertions.
     ','line_number':87,'multiline':True]
['text':' TODO SERVER-XYZ remove 'featureFlagMyFlag'.','line_number':127,'multiline':False]
['text':' I expect to see some new return value.','line_number':129,'multiline':False]
['text':' I expect *not* to see some return value.','line_number':131,'multiline':False]
['text':' Assert on something new.','line_number':139,'multiline':False]
['text':' No else clause.','line_number':141,'multiline':False]
