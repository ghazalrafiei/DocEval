['text':'*
 * This override (1) wraps consecutive CRUD operations in transactions and (2) retries commands and
 * transactions on network errors. Both behaviors are only enabled with a TestData config parameter.
 *
 * (1) Consecutive CRUD operations that are supported in transactions are wrapped in transactions.
 * When an operation that cannot be run in a transaction is encountered, the active transaction is
 * committed before running the next operation. The override retries TransientTransactionErrors,
 * which are expected without failover in sharding, and automatically creates collections and
 * retries transactions that fail due to implicit collection creation.
 *
 * (2) When a network connection to the mongo shell is closed, attempting to call
 * Mongo.prototype.runCommand() throws a JavaScript exception. This override catches these
 * exceptions (i.e. ones where isNetworkError() returns true) and automatically re-sends the
 * command request to the server, or propagates the error if the command should already be using
 * the shell's existing retryability logic. The goal of this override is to implement retry logic
 * such that the assertions within our existing JavaScript tests still pass despite stepdowns of
 * replica set primaries (optionally in sharded clusters) happening in the background.
 *
 * These two overrides are unified to simplify the retry logic.
 *
 * Unittests for these overrides are included in:
 *     jstests/noPassthrough/txn_override_causal_consistency.js
 *     jstests/replsets/txn_override_unittests.js
 *     jstests/libs/txns/txn_passthrough_runner_selftest.js
 ','line_number':1,'multiline':True]
['text':' Truncates the 'print' output if it's too long to print.','line_number':36,'multiline':False]
['text':' Commands assumed to not be blindly retryable.','line_number':71,'multiline':False]
['text':' Commands that take write concern and do not support txnNumbers.','line_number':73,'multiline':False]
['text':' These commands are not idempotent because they return errors if retried after successfully','line_number':110,'multiline':False]
['text':' completing (like IndexNotFound, NamespaceExists, etc.), but because they only take effect','line_number':111,'multiline':False]
['text':' once, and many tests use them to set up state, their errors on retries are handled specially.','line_number':112,'multiline':False]
['text':' Already ignores NamespaceNotFound errors, so not handled below.','line_number':120,'multiline':False]
['text':' The following read operations defined in the CRUD specification are retryable.','line_number':125,'multiline':False]
['text':' Note that estimatedDocumentCount() and countDocuments() use the count command.','line_number':126,'multiline':False]
['text':' Returns true if the command name is that of a retryable read command.','line_number':129,'multiline':False]
['text':' Returns if the given failed response is a safe response to ignore when retrying the','line_number':134,'multiline':False]
['text':' given command type.','line_number':135,'multiline':False]
['text':' These codes are uniquely returned from user_management_commands.cpp','line_number':138,'multiline':False]
['text':' Commands that may return different values or fail if retried on a new primary after a','line_number':150,'multiline':False]
['text':' failover.','line_number':151,'multiline':False]
['text':' Failovers can change currentOp output.','line_number':153,'multiline':False]
['text':' The log is different on different servers.','line_number':154,'multiline':False]
['text':' Failovers may interrupt operations intended to be killed later in the test.','line_number':155,'multiline':False]
['text':' The plan cache isn't replicated.','line_number':157,'multiline':False]
['text':' Not replicated, so can't tolerate failovers.','line_number':161,'multiline':False]
['text':' Not replicated, so can't tolerate failovers.','line_number':162,'multiline':False]
['text':' Sessions are flushed to disk asynchronously.','line_number':164,'multiline':False]
['text':' Returns if the given command on the given database can retry network errors.','line_number':175,'multiline':False]
['text':' Commands in transactions cannot be retried at the statement level, except for the','line_number':182,'multiline':False]
['text':' commit and abort.','line_number':183,'multiline':False]
['text':' Returns if the given command should retry a read error when reconfigs are present.','line_number':190,'multiline':False]
['text':' When running the reconfig command on a node, it will drop its snapshot. Read commands issued','line_number':198,'multiline':False]
['text':' to this node before it updates its snapshot will fail with ReadConcernMajorityNotAvailableYet.','line_number':199,'multiline':False]
['text':' Several commands that use the plan executor swallow the actual error code from a failed plan','line_number':204,'multiline':False]
['text':' into their error message and instead return OperationFailed.','line_number':205,'multiline':False]
['text':'','line_number':206,'multiline':False]
['text':' TODO SERVER-32208: Remove this function once it is no longer needed.','line_number':207,'multiline':False]
['text':' Returns true if the given response could have come from shardCollection being interrupted by','line_number':213,'multiline':False]
['text':' a failover.','line_number':214,'multiline':False]
['text':' shardCollection can bury the original error code in the error message.','line_number':216,'multiline':False]
['text':' shardCollection creates collections on each shard that will receive a chunk using','line_number':218,'multiline':False]
['text':' _cloneCollectionsOptionsFromPrimaryShard, which may fail with the following code if','line_number':219,'multiline':False]
['text':' interupted by a failover.','line_number':220,'multiline':False]
['text':' Returns true if the given response could have come from moveChunk being interrupted by a','line_number':224,'multiline':False]
['text':' failover.','line_number':225,'multiline':False]
['text':' The transaction number is bumped by the migration coordinator when its commit or','line_number':229,'multiline':False]
['text':' abort decision is being made durable.','line_number':230,'multiline':False]
['text':' The range deletion task may have been interrupted. This error can occur even when','line_number':232,'multiline':False]
['text':' _waitForDelete=false.','line_number':233,'multiline':False]
['text':' This error may occur when the node is shutting down.','line_number':235,'multiline':False]
['text':' Tracks if the current command is being run in a network retry. This is specifically for','line_number':265,'multiline':False]
['text':' retries that this file initiates, not ones that retryable writes initiates.','line_number':266,'multiline':False]
['text':' "Command ID" is an identifier for a given command being overridden. This is to track what log','line_number':269,'multiline':False]
['text':' messages come from what commands. This override is highly recursive and this is helpful for','line_number':270,'multiline':False]
['text':' debugging that recursion and following what commands initiated other commands.','line_number':271,'multiline':False]
['text':' The "nesting level" specifies if this is a top level command or a command being recursively','line_number':275,'multiline':False]
['text':' run by the override itself.','line_number':276,'multiline':False]
['text':' An object that tracks the current stmtId and txnNumber of the most recently run transaction.','line_number':283,'multiline':False]
['text':' Array to hold pairs of (dbName, cmdObj) that will be iterated over when retrying an entire','line_number':289,'multiline':False]
['text':' transaction.','line_number':290,'multiline':False]
['text':' The (initially empty) set of cursors belonging to aggregation operations that executed','line_number':296,'multiline':False]
['text':' outside of a transaction. Any getMore operations on these cursors must also execute outside','line_number':297,'multiline':False]
['text':' of a transaction. The set stores key/value pairs where the key is a cursor id and the value','line_number':298,'multiline':False]
['text':' is the true boolean value.','line_number':299,'multiline':False]
['text':' Set the max number of operations to run in a transaction. Once we've hit this number of','line_number':302,'multiline':False]
['text':' operations, we will commit the transaction. This is to prevent having to retry an extremely','line_number':303,'multiline':False]
['text':' long running transaction.','line_number':304,'multiline':False]
['text':' Validate the command before running it, to prevent tests with non-retryable commands','line_number':320,'multiline':False]
['text':' from being run.','line_number':321,'multiline':False]
['text':' $listLocalSessions must be the first stage in the pipeline.','line_number':351,'multiline':False]
['text':' Aggregate can be either a read or a write depending on whether it has a $out stage.','line_number':362,'multiline':False]
['text':' $out is required to be the last stage of the pipeline.','line_number':363,'multiline':False]
['text':' Default read concern level to use for transactions. Snapshot read concern is not supported in','line_number':384,'multiline':False]
['text':' sharded transactions when majority reads are disabled.','line_number':385,'multiline':False]
['text':' Default read concern level to use for commands that are not transactions.','line_number':395,'multiline':False]
['text':' Use majority if the suite didn't specify a level, unless the variant doesn't support it.','line_number':401,'multiline':False]
['text':' Default write concern w to use for both transactions and non-transactions.','line_number':405,'multiline':False]
['text':' Use a "signature" value that won't typically match a value assigned in normal use. This way','line_number':409,'multiline':False]
['text':' the wtimeout set by this override is distinguishable in the server logs.','line_number':410,'multiline':False]
['text':' The $listLocalSessions and $currentOp stages can only be used with','line_number':429,'multiline':False]
['text':' readConcern={level: "local"}, and the $changeStream stage can only be used with','line_number':430,'multiline':False]
['text':' readConcern={level: "majority"}.','line_number':431,'multiline':False]
['text':' The $out stage can only be used with readConcern={level: "local"}.','line_number':436,'multiline':False]
['text':' A writeConcern can only be used with a $out stage.','line_number':439,'multiline':False]
['text':' Attempting to specify a readConcern while explaining an aggregation would always','line_number':444,'multiline':False]
['text':' return an error prior to SERVER-30582 and it is otherwise only compatible with','line_number':445,'multiline':False]
['text':' readConcern={level: "local"}.','line_number':446,'multiline':False]
['text':' A writeConcern can only be used with non-inline output.','line_number':450,'multiline':False]
['text':' If we're retrying on network errors the write concern should already be majority.','line_number':454,'multiline':False]
['text':' Convert all collection drops to w:majority so they won't prevent subsequent','line_number':457,'multiline':False]
['text':' operations in transactions from failing when failing to acquire collection locks.','line_number':458,'multiline':False]
['text':' Only attach afterClusterTime if causal consistency is explicitly enabled. Note, it is','line_number':479,'multiline':False]
['text':' OK to send a readConcern with only afterClusterTime, which is interpreted as local','line_number':480,'multiline':False]
['text':' read concern by the server.','line_number':481,'multiline':False]
['text':' The command object should always have a readConcern by this point.','line_number':487,'multiline':False]
['text':' Commits the given transaction. Throws on failure to commit.','line_number':513,'multiline':False]
['text':' Running the command on conn will reenter from the top of `runCommandOverride`, retrying','line_number':521,'multiline':False]
['text':' as needed.','line_number':522,'multiline':False]
['text':' We've successfully committed the transaction, so we can forget the ops we've successfully','line_number':530,'multiline':False]
['text':' run.','line_number':531,'multiline':False]
['text':' Running the command on conn will reenter from the top of `runCommandOverride`, retrying','line_number':542,'multiline':False]
['text':' as needed.','line_number':543,'multiline':False]
['text':' Transient transaction errors mean the transaction has aborted, so consider it a success.','line_number':551,'multiline':False]
['text':' Bump the txnNumber and reset the stmtId.','line_number':559,'multiline':False]
['text':' Used to communicate the txnNumber to unittests.','line_number':563,'multiline':False]
['text':' Reserve the statement ids for batch writes.','line_number':571,'multiline':False]
['text':' Malformed command objects can cause errors to be thrown.','line_number':586,'multiline':False]
['text':' Bump the stmtId for the next statement. We do this after so that the stmtIds start at 1.','line_number':596,'multiline':False]
['text':' This function expects to get a command without any read or write concern properties.','line_number':599,'multiline':False]
['text':' If this is the first time we are running this command, push it to the ops array.','line_number':603,'multiline':False]
['text':' Make a copy so the command does not get changed by the test.','line_number':605,'multiline':False]
['text':' Empty transaction state that needs to be refreshed. The stmtId and startTransaction','line_number':608,'multiline':False]
['text':' fields shouldn't need to be refreshed.','line_number':609,'multiline':False]
['text':' Returns true iff a command is a "getMore" on a cursor that is in the `nonTxnAggCursorSet`','line_number':620,'multiline':False]
['text':' dictionary of cursors that were created outside of any transaction.','line_number':621,'multiline':False]
['text':' No operations on system.profile are permitted inside transactions (see SERVER-46900).','line_number':627,'multiline':False]
['text':' We want to overwrite whatever read and write concern is already set.','line_number':637,'multiline':False]
['text':' If sessions are explicitly disabled for this command, we skip overriding it to','line_number':641,'multiline':False]
['text':' use transactions.','line_number':642,'multiline':False]
['text':' Nested commands should never start a new transaction.','line_number':650,'multiline':False]
['text':' We should never end a transaction on a getMore.','line_number':652,'multiline':False]
['text':' If the command is a getMore, we cannot consider ending the transaction.','line_number':656,'multiline':False]
['text':' Operations on system.profile must be allowed to execute in parallel with open','line_number':668,'multiline':False]
['text':' transactions, so operations on system.profile should not commit the current open','line_number':669,'multiline':False]
['text':' transaction.','line_number':670,'multiline':False]
['text':' Retries the entire transaction without committing it. Returns immediately on an error with','line_number':681,'multiline':False]
['text':' the response from the failed command. This may recursively retry the entire transaction in','line_number':682,'multiline':False]
['text':' which case parent retries are completed early.','line_number':683,'multiline':False]
['text':' Re-run every command in the ops array.','line_number':685,'multiline':False]
['text':' Keep track of what txnNumber this retry is attempting.','line_number':688,'multiline':False]
['text':' Running the command on conn will reenter from the top of `runCommandOverride`,','line_number':698,'multiline':False]
['text':' individual statement retries will be suppressed by tracking nesting level.','line_number':699,'multiline':False]
['text':' Sanity check that we checked for an error correctly.','line_number':705,'multiline':False]
['text':' If we recursively retried the entire transaction, we do not want to continue this','line_number':708,'multiline':False]
['text':' retry. We just pass up the response from the retry that completed.','line_number':709,'multiline':False]
['text':' We do not commit the transaction and let it continue in the next operation.','line_number':715,'multiline':False]
['text':' Creates the given collection, retrying if needed. Throws on failure.','line_number':719,'multiline':False]
['text':' Always majority commit the create because this is not expected to roll back once','line_number':725,'multiline':False]
['text':' successful.','line_number':726,'multiline':False]
['text':' Running the command on conn will reenter from the top of `runCommandOverride`, retrying','line_number':733,'multiline':False]
['text':' as needed. If an error returned by `create` were tolerable, it would already have been','line_number':734,'multiline':False]
['text':' retried by the time it surfaced here.','line_number':735,'multiline':False]
['text':' Processes the response to the command if we are configured for txn override. Performs retries','line_number':739,'multiline':False]
['text':' if necessary for implicit collection creation or transient transaction errors.','line_number':740,'multiline':False]
['text':' Returns the last command response received by a command or retry.','line_number':741,'multiline':False]
['text':' Transaction statements cannot be retried, but retryable codes are expected to succeed','line_number':751,'multiline':False]
['text':' on full transaction retry.','line_number':752,'multiline':False]
['text':' Transient transaction errors should retry the entire transaction. A','line_number':759,'multiline':False]
['text':' TransientTransactionError on "abortTransaction" is considered a success.','line_number':760,'multiline':False]
['text':' If we got a TransientTransactionError on 'commitTransaction' retrying the transaction','line_number':765,'multiline':False]
['text':' will not retry it, so we retry it here.','line_number':766,'multiline':False]
['text':' Returns true if any error code in a response's "raw" field is retryable.','line_number':776,'multiline':False]
['text':' Don't override the responses from each shard because only the top-level code in a','line_number':786,'multiline':False]
['text':' response is used to determine if a command succeeded or not.','line_number':787,'multiline':False]
['text':' shouldOverrideAcceptableError ','line_number':789,'multiline':True]
['text':' Processes the command response if we are configured for network error retries. Returns the','line_number':799,'multiline':False]
['text':' provided response if we should not retry in this override. Returns kContinue if we should','line_number':800,'multiline':False]
['text':' retry the current command without subtracting from our retry allocation. By default sets ok=1','line_number':801,'multiline':False]
['text':' for failures with acceptable error codes, unless shouldOverrideAcceptableError is false.','line_number':802,'multiline':False]
['text':' ReplicaSetMonitor::getHostOrRefresh() waits up to 15 seconds to find the','line_number':809,'multiline':False]
['text':' primary of the replica set. It is possible for the step up attempt of another','line_number':810,'multiline':False]
['text':' node in the replica set to take longer than 15 seconds so we allow retrying','line_number':811,'multiline':False]
['text':' for up to 5 minutes.','line_number':812,'multiline':False]
['text':' findAndModify can fail during the find stage and return an executor error.','line_number':821,'multiline':False]
['text':' Don't interfere with retryable writes.','line_number':826,'multiline':False]
['text':' commitTransaction should be retried on any write concern error.','line_number':830,'multiline':False]
['text':' If an explain is interrupted by a stepdown, and it returns before its connection is','line_number':837,'multiline':False]
['text':' closed, it will return incomplete results. To prevent failing the test, force retries','line_number':838,'multiline':False]
['text':' of interrupted explains.','line_number':839,'multiline':False]
['text':' An explain command can fail if its child command cannot be run on the current server.','line_number':848,'multiline':False]
['text':' This can be hit if a primary only or not explicitly slaveOk command is accepted by a','line_number':849,'multiline':False]
['text':' primary node that then steps down and returns before having its connection closed.','line_number':850,'multiline':False]
['text':' Don't decrement retries, because the command returned before the connection was','line_number':859,'multiline':False]
['text':' closed, so a subsequent attempt will receive a network error (or NotWritablePrimary','line_number':860,'multiline':False]
['text':' error) and need to retry.','line_number':861,'multiline':False]
['text':' Some sharding commands return raw responses from all contacted shards and there won't','line_number':871,'multiline':False]
['text':' be a top level code if shards returned more than one error code, in which case retry','line_number':872,'multiline':False]
['text':' if any error is retryable.','line_number':873,'multiline':False]
['text':' Check for the retryable error codes from an interrupted shardCollection.','line_number':880,'multiline':False]
['text':' Check for the retryable error codes from an interrupted moveChunk.','line_number':886,'multiline':False]
['text':' In a sharded cluster, drop may bury the original error code in the error message if','line_number':892,'multiline':False]
['text':' interrupted.','line_number':893,'multiline':False]
['text':' Pass up unretryable errors.','line_number':900,'multiline':False]
['text':' Swallow safe errors that may come from a retry since the command may have completed','line_number':904,'multiline':False]
['text':' before the connection was closed.','line_number':905,'multiline':False]
['text':' Fall through to retry on write concern errors if needed.','line_number':909,'multiline':False]
['text':' Do not retry on a write concern error at this point if there is an actual error.','line_number':912,'multiline':False]
['text':' TransientTransactionErrors would already have been retried at an earlier point.','line_number':913,'multiline':False]
['text':' Background reconfigs can interfere with read commands if they are using readConcern: majority','line_number':926,'multiline':False]
['text':' and readPreference: primary. If we're running a read command and it fails with','line_number':927,'multiline':False]
['text':' ReadConcernMajorityNotAvailableYet, retry because it should eventually succeed.','line_number':928,'multiline':False]
['text':' Processes exceptions if configured for txn override. Retries the entire transaction on','line_number':937,'multiline':False]
['text':' transient transaction errors or network errors if configured for network errors as well.','line_number':938,'multiline':False]
['text':' If a retry fails, returns the response, or returns null for further exception processing.','line_number':939,'multiline':False]
['text':' If we got a TransientTransactionError on 'commitTransaction' retrying the transaction','line_number':947,'multiline':False]
['text':' will not retry it, so we retry it here.','line_number':948,'multiline':False]
['text':' Processes exceptions if configured for network error retry. Returns whether to subtract one','line_number':963,'multiline':False]
['text':' from the number of command retries this override counts. Throws if we should not retry.','line_number':964,'multiline':False]
['text':' ReplicaSetMonitor::getHostOrRefresh() waits up to 15 seconds to find the','line_number':974,'multiline':False]
['text':' primary of the replica set. It is possible for the step up attempt of another','line_number':975,'multiline':False]
['text':' node in the replica set to take longer than 15 seconds so we allow retrying','line_number':976,'multiline':False]
['text':' for up to 5 minutes.','line_number':977,'multiline':False]
['text':' If the command is retryable, assume the command has already gone through','line_number':989,'multiline':False]
['text':' or will go through the retry logic in SessionAwareClient, so propagate','line_number':990,'multiline':False]
['text':' the error.','line_number':991,'multiline':False]
['text':' This function is the heart of the override with the main error retry loop.','line_number':1003,'multiline':False]
['text':' If this is a top level command, make sure that the command supports network error','line_number':1010,'multiline':False]
['text':' retries. Don't validate transaction statements because their encompassing transaction','line_number':1011,'multiline':False]
['text':' can be retried at a higher level, even if each statement isn't retryable on its own.','line_number':1012,'multiline':False]
['text':' Actually run the provided command.','line_number':1025,'multiline':False]
['text':' Top level runCommand override function.','line_number':1096,'multiline':False]
['text':' Many tests run queries that are expected to fail. In this case, when we wrap CRUD ops','line_number':1106,'multiline':False]
['text':' in transactions, the transaction including the failed query will not be able to','line_number':1107,'multiline':False]
['text':' commit. This override expects transactions to be able to commit. Rather than','line_number':1108,'multiline':False]
['text':' denylisting all tests containing queries that are expected to fail, we clear the ops','line_number':1109,'multiline':False]
['text':' list when we return an error to the test so we do not retry the failed query.','line_number':1110,'multiline':False]
['text':' Reset recursion and retry state tracking.','line_number':1120,'multiline':False]
['text':' Default timeout.','line_number':1146,'multiline':False]
['text':' 2 second interval.','line_number':1147,'multiline':False]
