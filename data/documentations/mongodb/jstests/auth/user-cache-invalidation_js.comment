['text':' Test for invalidation of records across invalidation boundaries.','line_number':1,'multiline':False]
['text':' @tags: [requires_replication]','line_number':2,'multiline':False]
['text':'*
 * Check the global log for an entry defined by `cond`
 * occuring after the JS Date `after`.
 *
 * Returns the log line matched with the `t` field
 * transposed to a Javascript Date object.
 ','line_number':43,'multiline':True]
['text':'*
 * Negative of assertHasLog() above.
 * Does not return a log line (because there isn't one).
 ','line_number':74,'multiline':True]
['text':'*
 * Create a user with read permission and simply
 * auth and read in a parallel shell.
 *
 * We use FailPoint 'authLocalGetUser.resolveRolesDelayMS' to
 * give us time to invalidate the user mid-acquisition.
 *
 * We also use pauseBatchApplicationBeforeCompletion with replsets
 * to try to slip the parallel client into the wrong snapshot.
 *
 * When we call revokeRolesFromUser(), this invalidates the
 * user acquisition in progress and forces it to restart.
 *
 * If the restarted acquisition was on the same snapshot,
 * then we'd end up with a stale user being injected into
 * the cache anyway.
 *
 * If the snapshot is advanced, then our parallel shell user
 * sees testRole successfully revoked, and our query fails.
 ','line_number':90,'multiline':True]
['text':' Set the failpoint before we start the parallel thread.','line_number':135,'multiline':False]
['text':' We need some time to mutate the auth state before the acquisition completes.','line_number':139,'multiline':False]
['text':' Wait for initial auth to start.','line_number':162,'multiline':False]
['text':' Our initial acquisition has the read role.','line_number':167,'multiline':False]
['text':' Wait for our find to hit the fail point.','line_number':176,'multiline':False]
['text':' Mutate the user to cause an invalidation.','line_number':179,'multiline':False]
['text':' Use writeConcern 1 to avoid blocking on the secondary applications.','line_number':180,'multiline':False]
['text':' This acquisition comes from a later snapshot which has no roles.','line_number':197,'multiline':False]
['text':' Standalone','line_number':214,'multiline':False]
['text':' ReplicaSet','line_number':221,'multiline':False]
['text':' Prevent stepdowns, by setting priority to zero on all but one node.','line_number':224,'multiline':False]
['text':' Now identify the permanent primary and secondary we'll use.','line_number':232,'multiline':False]
