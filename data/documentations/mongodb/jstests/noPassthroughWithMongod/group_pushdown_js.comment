['text':'*
 * Tests basic functionality of pushing $group into the find layer.
 *
 * @tags: [requires_sbe]
 ','line_number':1,'multiline':True]
['text':' Ensure group pushdown is enabled and capture the original value of','line_number':8,'multiline':False]
['text':' 'internalQuerySlotBasedExecutionDisableGroupPushdown' to use at the end of the test.','line_number':9,'multiline':False]
['text':' When $group is pushed down it will never be present as a stage in the 'winningPlan' of','line_number':30,'multiline':False]
['text':' $cursor.','line_number':31,'multiline':False]
['text':' Make sure the provided pipeline is eligible for pushdown.','line_number':52,'multiline':False]
['text':' Turn sbe off.','line_number':55,'multiline':False]
['text':' Sanity check the results when no pushdown happens.','line_number':58,'multiline':False]
['text':' Turn sbe on which will allow $group stages that contain supported accumulators to be pushed','line_number':62,'multiline':False]
['text':' down under certain conditions.','line_number':63,'multiline':False]
['text':' Try a pipeline with no group stage.','line_number':106,'multiline':False]
['text':' Run a simple $group with {$sum: 1} accumulator, and check if it gets pushed down.','line_number':111,'multiline':False]
['text':' Run a simple $group with supported $sum accumulator, and check if it gets pushed down.','line_number':129,'multiline':False]
['text':' The subexpression '$not' is not translated to $coerceToolBool and thus is SBE compatible.','line_number':135,'multiline':False]
['text':' Two group stages both get pushed down and the second $group stage refer to only a top-level field','line_number':141,'multiline':False]
['text':' which does not exist.','line_number':142,'multiline':False]
['text':' Two group stages both get pushed down and the second $group stage refers to only existing','line_number':149,'multiline':False]
['text':' top-level fields of the first $group.','line_number':150,'multiline':False]
['text':' The $group stage refers to the same top-level field twice.','line_number':160,'multiline':False]
['text':' The $group stage refers to the same top-level field twice and another top-level field.','line_number':167,'multiline':False]
['text':' The $group stage refers to two existing sub-fields.','line_number':181,'multiline':False]
['text':' The $group stage refers to a non-existing sub-field twice.','line_number':196,'multiline':False]
['text':' Two group stages both get pushed down and the second $group stage refers to only existing','line_number':203,'multiline':False]
['text':' top-level fields of the first $group. The field name may be one of "result" / "recordId" /','line_number':204,'multiline':False]
['text':' "returnKey" / "snapshotId" / "indexId" / "indexKey" / "indexKeyPattern" which are reserved names','line_number':205,'multiline':False]
['text':' inside the SBE stage builder. These special names must not hide user-defined field names.','line_number':206,'multiline':False]
['text':' The second $group stage refers to a top-field below a $switch','line_number':243,'multiline':False]
['text':' The second $group stage refers to a top-field below a $cond','line_number':278,'multiline':False]
['text':' The second $group stage refers to a top-field below a nested $cond / $ifNull','line_number':294,'multiline':False]
['text':' The second $group stage refers to top-fields below a $let','line_number':328,'multiline':False]
['text':' The second $group stage refers to top-fields below a $and','line_number':348,'multiline':False]
['text':' The second $group stage refers to top-fields below a $or','line_number':382,'multiline':False]
['text':' The second $group stage refers to both a top-level field and a sub-field twice which does not','line_number':416,'multiline':False]
['text':' exist.','line_number':417,'multiline':False]
['text':' The second $group stage refers to a sub-field which does exist.','line_number':431,'multiline':False]
['text':' Verifies that an optimized expression can be pushed down.','line_number':441,'multiline':False]
['text':' {"$ifNull": [1, 2]} will be optimized into just the constant 1.','line_number':444,'multiline':False]
['text':' Run a group with a supported $stdDevSamp accumultor and check that it gets pushed down.','line_number':449,'multiline':False]
['text':' Run a simple group with $sum and object _id, check if it gets pushed down.','line_number':459,'multiline':False]
['text':' Test that we can push down a $group and a projection.','line_number':464,'multiline':False]
['text':' Test that the results are as expected if the projection comes first and removes a field that the','line_number':470,'multiline':False]
['text':' $group stage needs.','line_number':471,'multiline':False]
['text':' Run a group with spilling on and check that $group is pushed down.','line_number':477,'multiline':False]
['text':' Run a pipeline with match, sort, group to check if the whole pipeline gets pushed down.','line_number':484,'multiline':False]
['text':' Make sure the DISTINCT_SCAN case where the sort is provided by an index still works and is not','line_number':490,'multiline':False]
['text':' executed in SBE.','line_number':491,'multiline':False]
['text':' Time to check that indexes don't prevent pushdown.','line_number':498,'multiline':False]
['text':' The $match stage should trigger usage of indexed plans if there is an index for it. Indexes on','line_number':499,'multiline':False]
['text':' the fields involved in $group stage should make no difference.','line_number':500,'multiline':False]
['text':' data schema: {"_id": 1, "item": "a", "price": 10, "quantity": 2, "date": ISODate()}','line_number':501,'multiline':False]
['text':' The existing index is irrelevant.','line_number':502,'multiline':False]
['text':' expectedGroupCountInExplain ','line_number':507,'multiline':True]
['text':' Index on the group by field but the accumulator prevents distinct scan.','line_number':508,'multiline':False]
['text':' expectedGroupCountInExplain ','line_number':513,'multiline':True]
['text':' Multiple relevant indexes.','line_number':514,'multiline':False]
['text':' expectedGroupCountInExplain ','line_number':519,'multiline':True]
['text':' Index on the accumulator field only.','line_number':520,'multiline':False]
['text':' expectedGroupCountInExplain ','line_number':525,'multiline':True]
['text':' expectedGroupCountInExplain ','line_number':529,'multiline':True]
['text':' Supported group and then a group with unsupported accumulators. JS accumulators are not','line_number':533,'multiline':False]
['text':' currently pushed down.','line_number':534,'multiline':False]
['text':' Another case of supported group and then a group with no supported accumulators. A boolean','line_number':548,'multiline':False]
['text':' expression may be translated to an internal expression $coerceToBool which is not supported by','line_number':549,'multiline':False]
['text':' SBE.','line_number':550,'multiline':False]
['text':' A group with one supported and one unsupported accumulators.','line_number':559,'multiline':False]
['text':' $group can be pushed down to SBE when subplanning is involved. Note that the top $or expression','line_number':564,'multiline':False]
['text':' triggers subplanning.','line_number':565,'multiline':False]
['text':' Use another collection to not interfere with other test cases even when a test case fails since','line_number':567,'multiline':False]
['text':' we create indexes to verify group pushdown when subplanning is involed.','line_number':568,'multiline':False]
['text':' A trival $and with only one $or will be optimized away and thus $or will be the top','line_number':581,'multiline':False]
['text':' expression.','line_number':582,'multiline':False]
['text':' Verify that $group can be pushed down when subplanning is involved. With this test case,','line_number':590,'multiline':False]
['text':' subplanning code path is involved but "Subplanning" does not actually happen and instead,','line_number':591,'multiline':False]
['text':' it falls back to planning a whole query.','line_number':592,'multiline':False]
['text':' Create indexes on 'item' and 'price' fields to cover all sub-expressions of $match.','line_number':595,'multiline':False]
['text':' Verify that $group can be pushed down when there are indexes that cover all sub-expressions','line_number':599,'multiline':False]
['text':' and "Subplanning" actually happens.','line_number':600,'multiline':False]
['text':' $bucketAuto is a group-like stage that is not compatible with SBE HashAggStage.','line_number':604,'multiline':False]
['text':' TODO SERVER-62401: Supporting a $bucketAuto will require a range-based group-aggregate','line_number':605,'multiline':False]
['text':' implementation that will chose _ids based on the collection of values rather than a hash-based','line_number':606,'multiline':False]
['text':' group-aggregate that requires _id to be computable by looking just at the current document.','line_number':607,'multiline':False]
['text':' Verify that $bucket is pushed down to SBE and returns correct results.','line_number':618,'multiline':False]
['text':' Verify that $sortByCount is pushed down to SBE and returns correct results.','line_number':638,'multiline':False]
['text':' When at the mongos-side in a sharded environment or we are spilling $doingMerge is set to true.','line_number':649,'multiline':False]
['text':' We should bail out and not push down $group stages and the suffix of the pipeline when we','line_number':650,'multiline':False]
['text':' encounter a $group stage with this flag set.','line_number':651,'multiline':False]
['text':' In a sharded environment, the mongos splits a $group stage into two different stages. One is a','line_number':659,'multiline':False]
['text':' merge $group stage at the mongos-side which does the global aggregation and the other is a $group','line_number':660,'multiline':False]
['text':' stage at the shard-side which does the partial aggregation. The shard-side $group stage is','line_number':661,'multiline':False]
['text':' requested with 'needsMerge' and 'fromMongos' flags set to true from the mongos, which we should','line_number':662,'multiline':False]
['text':' verify that is also pushed down and produces the correct results.','line_number':663,'multiline':False]
['text':' Verifies that a basic sharded $sum accumulator works.','line_number':674,'multiline':False]
['text':' Verifies that a sharded count-like accumulator works','line_number':677,'multiline':False]
['text':' When there's overflow for 'NumberLong', the mongod sends back the partial sum as a doc with','line_number':683,'multiline':False]
['text':' 'subTotal' and 'subTotalError' fields. So, we need an overflow case to verify such behavior.','line_number':684,'multiline':False]
['text':' Verifies that the shard-side $stdDevPop and $stdDevSamp work.','line_number':689,'multiline':False]
['text':' Verifies that a sharded $avg works when there's no numeric data.','line_number':693,'multiline':False]
['text':' When sum of numeric data is a non-decimal, shard(s) should return data in the form of {subTotal:','line_number':696,'multiline':False]
['text':' val1, count: val2, subTotalError: val3}.','line_number':697,'multiline':False]
['text':' When sum of numeric data is a decimal, shard(s) should return data in the form of {subTotal:','line_number':700,'multiline':False]
['text':' val1, count: val2}.','line_number':701,'multiline':False]
['text':' Prices for group "a" are all decimals.','line_number':703,'multiline':False]
['text':' Prices for group "b" are one decimal and one non-decimal.','line_number':706,'multiline':False]
['text':' Verify that $group pushdown can be disabled with the','line_number':711,'multiline':False]
['text':' 'internalQuerySlotBasedExecutionDisableGroupPushdown' flag.','line_number':712,'multiline':False]
['text':' $group pushdown should work as expected before setting','line_number':716,'multiline':False]
['text':' 'internalQuerySlotBasedExecutionDisableGroupPushdown' to true.','line_number':717,'multiline':False]
['text':' expectedGroupCountInExplain ','line_number':721,'multiline':True]
['text':' Turn group pushdown off.','line_number':723,'multiline':False]
['text':' Reset 'internalQuerySlotBasedExecutionDisableGroupPushdown' to its original value.','line_number':728,'multiline':False]
['text':' Prepare a collection.','line_number':733,'multiline':False]
['text':' $$REMOVE produce Nothing constant and it should be converted to Null. Without an accumulator','line_number':738,'multiline':False]
['text':' $group is not pushed down and we need an accumulator.','line_number':739,'multiline':False]
