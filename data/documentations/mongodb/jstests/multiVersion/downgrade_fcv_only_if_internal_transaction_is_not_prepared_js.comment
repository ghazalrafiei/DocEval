['text':'*
 * Verify that during FCV downgrade we abort unprepared internal
 * transactions and wait for prepared internal transactions to
 * commit or abort.
 *
 * This test verifies this behavior with internal transactions in sessions with
 * retryableWrite: {false, true}, distinguished through the specification of txnNumber in their
 * lsids. Variables named with 0 correlates to the former and 1 with the latter.
 * @tags: [requires_fcv_60]
 ','line_number':1,'multiline':True]
['text':' Start internal transactions inside sessions with retryableWrite: {false, true}.','line_number':51,'multiline':False]
['text':' By being unable to insert documents, verify that both transactions are aborted when FCV is','line_number':55,'multiline':False]
['text':' downgraded.','line_number':56,'multiline':False]
['text':' Start internal transactions for writes executed in sessions with retryableWrite: {false,','line_number':85,'multiline':False]
['text':' true} and bring to prepared state.','line_number':86,'multiline':False]
['text':' The setFCV command will need to acquire a global S lock to complete. The global','line_number':95,'multiline':False]
['text':' lock is currently held by prepare, so that will block. We use a failpoint to make that','line_number':96,'multiline':False]
['text':' command fails when it tries to get the lock.','line_number':97,'multiline':False]
['text':' We are able to downgrade FCV only when both transactions are no longer in the prepared state.','line_number':114,'multiline':False]
