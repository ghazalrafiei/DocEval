['text':'*
 * map_reduce_drop.js
 *
 * This workload generates random data and inserts it into a collection.
 * It then runs simultaneous mapReduce commands while dropping the source
 * collection or source database.  It repopulates the data before each
 * mapReduce in an attempt to ensure that the mapReduce commands are
 * actually doing work.
 *
 * This workload serves as a regression test for SERVER-6757, SERVER-15087,
 * and SERVER-15842.
 * @tags: [
 *   # mapReduce does not support afterClusterTime.
 *   does_not_support_causal_consistency,
 * ]
 ','line_number':1,'multiline':True]
['text':' This dummy reducer is present to enable the database and collection','line_number':23,'multiline':False]
['text':' drops to occur during different phases of the mapReduce.','line_number':24,'multiline':False]
['text':' We don't check the return value of drop() because the collection','line_number':34,'multiline':False]
['text':' might not exist due to a drop() in another thread.','line_number':35,'multiline':False]
['text':' Concurrent dropDatabase calls can result in transient errors.','line_number':42,'multiline':False]
['text':' Try to ensure that some documents have been inserted before running','line_number':49,'multiline':False]
['text':' the mapReduce command.  Although it's possible for the documents to','line_number':50,'multiline':False]
['text':' be dropped by another thread, some mapReduce commands should end up','line_number':51,'multiline':False]
['text':' running on non-empty collections by virtue of the number of','line_number':52,'multiline':False]
['text':' iterations and threads in this workload.','line_number':53,'multiline':False]
['text':' Ignore all mapReduce exceptions.  This workload is only concerned','line_number':76,'multiline':False]
['text':' with verifying server availability.','line_number':77,'multiline':False]
