['text':'*
 * kill_multicollection_aggregation.js
 *
 * This workload was designed to stress running and invalidating aggregation pipelines involving
 * multiple collections and to reproduce issues like those described in SERVER-22537 and
 * SERVER-24386. Threads perform an aggregation pipeline on one of a few collections, optionally
 * specifying a $lookup stage, a $graphLookup stage, or a $facet stage, while the database, a
 * collection, or an index is dropped concurrently.
 *
 * The parent test, invalidated_cursors.js, uses $currentOp.
 * @tags: [uses_curop_agg_stage, state_functions_share_cursor]
 ','line_number':1,'multiline':True]
['text':'*
     * Runs the specified aggregation pipeline and stores the resulting cursor (if the command
     * is successful) in 'this.cursor'.
     ','line_number':17,'multiline':True]
['text':' We perform the $lookup on a field that doesn't exist in either the document','line_number':35,'multiline':False]
['text':' on the source collection or the document on the foreign collection. This','line_number':36,'multiline':False]
['text':' ensures that every document in the source collection will match every','line_number':37,'multiline':False]
['text':' document in the foreign collection and cause the cursor underlying the','line_number':38,'multiline':False]
['text':' $lookup stage to need to request another batch.','line_number':39,'multiline':False]
['text':'*
     * Runs an aggregation involving only one collection and saves the resulting cursor to
     * 'this.cursor'.
     ','line_number':69,'multiline':True]
['text':'*
     * Runs an aggregation that uses the $lookup stage and saves the resulting cursor to
     * 'this.cursor'.
     ','line_number':81,'multiline':True]
['text':'*
     * Runs an aggregation that uses the $graphLookup stage and saves the resulting cursor to
     * 'this.cursor'.
     ','line_number':94,'multiline':True]
['text':'*
     * Runs an aggregation that uses the $lookup and $graphLookup stages within a $facet stage
     * and saves the resulting cursor to 'this.cursor'.
     ','line_number':107,'multiline':True]
['text':' The lookup pipeline computes a Cartesian product of the input collection, which','line_number':119,'multiline':False]
['text':' can occasionally create $facet documents large enough to OOM crash the test. The','line_number':120,'multiline':False]
['text':' $limit keeps it in check.','line_number':121,'multiline':False]
['text':' We decrease the batch size of the DocumentSourceCursor so that the PlanExecutor','line_number':152,'multiline':False]
['text':' underlying it isn't exhausted when the "aggregate" command is sent. This makes it more','line_number':153,'multiline':False]
['text':' likely for the "killCursors" command to need to handle destroying the underlying','line_number':154,'multiline':False]
['text':' PlanExecutor.','line_number':155,'multiline':False]
['text':' Use the workload name as part of the database name, since the workload name is assumed to','line_number':161,'multiline':False]
['text':' be unique.','line_number':162,'multiline':False]
['text':' Restore DocumentSourceCursor batch size to the default.','line_number':174,'multiline':False]
