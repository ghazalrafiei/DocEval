['text':'*
 * map_reduce_interrupt.js
 *
 * Extends the map_reduce_inline.js workload with a state that randomly kills a running map-reduce
 * operation. This workload is intended to test that there are no deadlocks or unhandled exceptions
 * when tearing down a map-reduce command following an interrupt.
 *
 * @tags: [
 *   # mapReduce does not support afterClusterTime.
 *   does_not_support_causal_consistency,
 *   uses_curop_agg_stage,
 *   # Use mapReduce.
 *   requires_scripting,
 * ]
 ','line_number':1,'multiline':True]
['text':' Note: Even if the killOp reaches the server after the map-reduce command is already','line_number':38,'multiline':False]
['text':' done, the server still returns an "ok" response, so this assertion is safe.','line_number':39,'multiline':False]
['text':' No map-reduce operations to kill at the moment.','line_number':42,'multiline':False]
['text':' The nature of this test means that we expect the map-reduce command to sometimes fail','line_number':50,'multiline':False]
['text':' due to interruption. No other failures are expected, though. Note that interruptions','line_number':51,'multiline':False]
['text':' can cause some unrelated error codes, including InternalError (during JavaScript','line_number':52,'multiline':False]
['text':' execution) and some non-specific errors (SERVER-39281, SERVER-39282). Checking for','line_number':53,'multiline':False]
['text':' "interrupted" in the error message is a reasonable way to spot all the miscellaneous','line_number':54,'multiline':False]
['text':' errors that can occur because of an interruption.','line_number':55,'multiline':False]
['text':' The default WC is majority and this workload may not be able to satisfy majority writes.','line_number':64,'multiline':False]
['text':' Interrupted map-reduce operations should still be able to clean up the temp collections','line_number':85,'multiline':False]
['text':' that they create within the database of the output collection and within the "local"','line_number':86,'multiline':False]
['text':' database.','line_number':87,'multiline':False]
['text':'','line_number':88,'multiline':False]
['text':' Cleanup occurs as part of its own operations, which can also be interrupted, but the','line_number':89,'multiline':False]
['text':' 'killOp' state of this test only targets map-reduce operations.','line_number':90,'multiline':False]
['text':' Note that we can't do this check on sharded clusters, which do not have a "local"','line_number':98,'multiline':False]
['text':' database.','line_number':99,'multiline':False]
['text':' Unsetting CWWC is not allowed, so explicitly restore the default write concern to be','line_number':106,'multiline':False]
['text':' majority by setting CWWC to {w: majority}.','line_number':107,'multiline':False]
['text':' Unsetting CWWC is not allowed, so explicitly restore the default write concern to be','line_number':116,'multiline':False]
['text':' majority by setting CWWC to {w: majority}.','line_number':117,'multiline':False]
