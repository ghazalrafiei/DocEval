['text':'*
 * invalidated_cursors.js
 *
 * This workload was designed to stress creating, pinning, and invalidating cursors through the
 * cursor manager. Threads perform find, getMore and explain commands while the database,
 * collection, or an index is dropped.
 *
 * @tags: [uses_curop_agg_stage, state_functions_share_cursor]
 ','line_number':1,'multiline':True]
['text':'*
         * Inserts 'this.numDocs' new documents into the specified collection and ensures that the
         * indexes 'this.indexSpecs' exist on the collection. Note that means it is safe for
         * multiple threads to perform this function simultaneously.
         ','line_number':32,'multiline':True]
['text':'*
         * Calls 'killFn' on a random getMore that's currently running.
         ','line_number':68,'multiline':True]
['text':' idleConnections true so we can also kill cursors which are','line_number':75,'multiline':False]
['text':' not currently active.','line_number':76,'multiline':False]
['text':' localOps true so that currentOp reports the mongos','line_number':77,'multiline':False]
['text':' operations when run on a sharded cluster, instead of the','line_number':78,'multiline':False]
['text':' shard's operations.','line_number':79,'multiline':False]
['text':' We only about getMores.','line_number':81,'multiline':False]
['text':' Only find getMores running on the database for this test.','line_number':83,'multiline':False]
['text':'*
         * This is a no-op, used only as a transition state.
         ','line_number':98,'multiline':True]
['text':'*
         * Runs a query on the collection with a small enough batchSize to leave the cursor open.
         * If the command was successful, stores the resulting cursor in 'this.cursor'.
         ','line_number':103,'multiline':True]
['text':'*
         * Explains a find on a collection.
         ','line_number':120,'multiline':True]
['text':'*
         * This is just a transition state that serves as a placeholder to delegate to one of the
         * specific kill types like 'killOp' or 'killCursors'.
         ','line_number':132,'multiline':True]
['text':'*
         * Choose a random cursor that's open and kill it.
         ','line_number':138,'multiline':True]
['text':' Not checking the return value, since the cursor may be closed on its own','line_number':144,'multiline':False]
['text':' before this has a chance to run.','line_number':145,'multiline':False]
['text':' Not checking return value since the operation may end on its own before we have','line_number':155,'multiline':False]
['text':' a chance to kill it.','line_number':156,'multiline':False]
['text':'*
         * Requests enough results from 'this.cursor' to ensure that another batch is needed, and
         * thus ensures that a getMore request is sent for 'this.cursor'.
         ','line_number':162,'multiline':True]
['text':' The getMore request can fail if the database, a collection, or an index was','line_number':178,'multiline':False]
['text':' dropped. It can also fail if another thread kills it through killCursor or','line_number':179,'multiline':False]
['text':' killOp.','line_number':180,'multiline':False]
['text':'*
         * Drops the database being used by this workload and then re-creates each of
         * 'this.involvedCollections' by repopulating them with data and indexes.
         ','line_number':192,'multiline':True]
['text':' This workload can sometimes triggers an 'unable to target write op for','line_number':198,'multiline':False]
['text':' collection ... caused by ... database not found' error. Further investigation','line_number':199,'multiline':False]
['text':' still needs to be done, but these failures may be due to SERVER-17397 'drops in','line_number':200,'multiline':False]
['text':' a sharded cluster may not fully succeed' because it drops and reuses the same','line_number':201,'multiline':False]
['text':' namespaces. For now, we avoid dropping the database on a sharded cluster.','line_number':202,'multiline':False]
['text':' Re-create all of the collections and indexes that were dropped.','line_number':209,'multiline':False]
['text':'*
         * Randomly selects a collection from 'this.involvedCollections' and drops it. The
         * collection is then re-created with data and indexes.
         ','line_number':215,'multiline':True]
['text':' This workload can sometimes triggers an 'unable to target write op for','line_number':221,'multiline':False]
['text':' collection ... caused by ... database not found' error. Further investigation','line_number':222,'multiline':False]
['text':' still needs to be done, but these failures may be due to SERVER-17397 'drops in','line_number':223,'multiline':False]
['text':' a sharded cluster may not fully succeed' because it drops and reuses the same','line_number':224,'multiline':False]
['text':' namespaces. For now, we avoid dropping the collection on a sharded cluster.','line_number':225,'multiline':False]
['text':' Re-create the collection that was dropped.','line_number':234,'multiline':False]
['text':'*
         * Randomly selects a collection from 'this.involvedCollections' and an index from
         * 'this.indexSpecs' and drops that particular index from the collection. The index is then
         * re-created.
         ','line_number':238,'multiline':True]
['text':' We don't assert that the command succeeded when dropping an index because it's','line_number':248,'multiline':False]
['text':' possible another thread has already dropped this index.','line_number':249,'multiline':False]
['text':' Re-create the index that was dropped.','line_number':252,'multiline':False]
['text':' Use the workload name as part of the database name, since the workload name is assumed to','line_number':282,'multiline':False]
['text':' be unique.','line_number':283,'multiline':False]
