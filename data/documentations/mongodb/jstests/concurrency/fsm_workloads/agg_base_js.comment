['text':'*
 * agg_base.js
 *
 * Base workload for aggregation. Inserts a bunch of documents in its setup,
 * then each thread does an aggregation with an empty $match.
 ','line_number':1,'multiline':True]
['text':' Use 12KB documents by default. This number is useful because 12,000 documents each of','line_number':11,'multiline':False]
['text':' size 12KB take up more than 100MB in total, and 100MB is the in-memory limit for $sort','line_number':12,'multiline':False]
['text':' and $group.','line_number':13,'multiline':False]
['text':' first set doc.padding so that Object.bsonsize will include the field name and other','line_number':28,'multiline':False]
['text':' overhead','line_number':29,'multiline':False]
['text':' load example data','line_number':49,'multiline':False]
['text':' note: padDoc caches the large string after allocating it once, so it's ok to call it','line_number':52,'multiline':False]
['text':' in this loop','line_number':53,'multiline':False]
['text':' By default, do nothing on teardown. Workload tests may implement this function.','line_number':70,'multiline':False]
['text':' Using few threads and iterations because each iteration is fairly expensive compared to','line_number':74,'multiline':False]
['text':' other workloads' iterations. (Each does a collection scan over a few thousand documents','line_number':75,'multiline':False]
['text':' rather than a few dozen documents.)','line_number':76,'multiline':False]
