['text':'
 * Tests that descending indexes on range predicates yield all matching documents. Prior to the
 * fix in SERVER-67510, range predicates always scanned from low to high, even when the
 * corresponding index was descending. In this case, the optimizer would start from the "low" point
 * and continue until finding the "high" point, but because the index is descending, the "high"
 * point comes before the "low" point and is out of the index's search scope. To counteract this
 * behavior, the index bounds are swapped when the corresponding index is descending.
 ','line_number':1,'multiline':True]
['text':'
 * This is the most basic case: a single range predicate with a descending index.
 ','line_number':14,'multiline':True]
['text':'
 * Test a compound index, with a range on the leading field and a descending index on the
 * secondary field.
 ','line_number':36,'multiline':True]
['text':' Insert documents that match 'a' but not 'b'--this makes filtering on 'b' more','line_number':50,'multiline':False]
['text':' beneficial, and more likely to happen before the fetch. This also discourages','line_number':51,'multiline':False]
['text':' collection-scan plans since 'b' is indexed.','line_number':52,'multiline':False]
['text':' Spread the interesting documents evenly, to encourage IndexScan when sampling in chunks.','line_number':54,'multiline':False]
['text':'
 * Test a descending index with range predicates, ensuring that the index plan is chosen.
 ','line_number':73,'multiline':True]
