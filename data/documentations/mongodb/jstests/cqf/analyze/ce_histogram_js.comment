['text':'*
 * This is an integration test for histogram CE to ensure that we can create a histogram and
 * retrieve that histogram to estimate a simple match predicate. Note that this tests predicates and
 * histograms on several scalar types.
 *
 * This test is designed such that the constructed histograms should always give an exact
 * answer for a given equality predicate on any distinct value produced by 'generateDocs' below.
 * This is the case because the 'ndv' is sufficiently small such that each histogram will have
 * one bucket per distinct value with that distinct value as a bucket boundary. This should never
 * change as a result of updates to estimation, since estimates for bucket boundaries should always
 * be accurate.
 ','line_number':1,'multiline':True]
['text':' Helper to sort ints lexicographically.','line_number':26,'multiline':False]
['text':' A small note: the ordering of string bounds (lexicographical) is different than that of int','line_number':27,'multiline':False]
['text':' bounds. In order to simplify the histogram validation logic, we don't want to have to account for','line_number':28,'multiline':False]
['text':' the fact that in the resulting histogram, string bounds will be sorted differently than int','line_number':29,'multiline':False]
['text':' bounds. To illustrate this, if we were to use the format `${val}` to generate strings, we would','line_number':30,'multiline':False]
['text':' generate a different order of bounds for the histogram on the string fields and the histogram on','line_number':31,'multiline':False]
['text':' the int fields, because 2 < 10, but "10" < "2". This test relies on all field values being sorted','line_number':32,'multiline':False]
['text':' the same way in the bounds.','line_number':33,'multiline':False]
['text':' Note: val >= 1.','line_number':35,'multiline':False]
['text':' Helper to generate hex strings for ints from 1-10. These are trivially lexicographically sorted.','line_number':38,'multiline':False]
['text':'*
 * Generates 'val' documents where each document has a distinct value for each 'field' in 'fields'.
 ','line_number':43,'multiline':True]
['text':' Necessary to cast, otherwise we get a double here.','line_number':49,'multiline':False]
['text':' Object Ids are represented by 12 bytes. We want to ensure the ordering matches the','line_number':56,'multiline':False]
['text':' ordering of the other fields for the purposes of this test. As a result, we set the 4th','line_number':57,'multiline':False]
['text':' most significant byte to a lexicographically increasing hexadecimal value.','line_number':58,'multiline':False]
['text':'*
 * Returns the correct type name in the stats 'typeCount' field for the given field name.
 ','line_number':68,'multiline':True]
['text':'*
 * This is the main testing function. Note that the input value 'ndv' corresponds to both the number
 * of distinct values per type in 'fields', as well as the number of buckets in each histogram
 * produced for this test.
 ','line_number':110,'multiline':True]
['text':' Set up test collection and initialize the expected histograms in order to validate basic','line_number':139,'multiline':False]
['text':' histogram construction. We generate 'ndv' distinct values for each 'field', such that the','line_number':140,'multiline':False]
['text':' 'i'th distinct value has a frequency of 'i'. Because we have a small number of distinct','line_number':141,'multiline':False]
['text':' values, we expect to have one bucket per distinct value.','line_number':142,'multiline':False]
['text':' Small hack; when we insert a doc, we want to insert it as a NumberInt so that the','line_number':151,'multiline':False]
['text':' appropriate type counters increment. However, when we verify it later on, we expect to','line_number':152,'multiline':False]
['text':' see a regular number, so we should update the "int" field of docs here.','line_number':153,'multiline':False]
['text':' Create histograms for all fields.','line_number':175,'multiline':False]
['text':' Verify CE for all distinct values of each field across multiple types.','line_number':193,'multiline':False]
['text':' Compute the expected documents selected for a single range using the boundary val.','line_number':201,'multiline':False]
['text':' Skip this estimation- we have already tested range predicates for this type.','line_number':224,'multiline':False]
['text':' Verify that we obtain a CE of 0 for types other outside the 'field' type's','line_number':228,'multiline':False]
['text':' type-class.','line_number':229,'multiline':False]
['text':' Verify CE for values outside the range of distinct values for each field.','line_number':244,'multiline':False]
