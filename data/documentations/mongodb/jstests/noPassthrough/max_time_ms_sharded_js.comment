['text':' Test mongos implementation of time-limited operations: verify that mongos correctly forwards max','line_number':1,'multiline':False]
['text':' time to shards, and that mongos correctly times out max time sharded getmore operations (which','line_number':2,'multiline':False]
['text':' are run in parallel on shards).','line_number':3,'multiline':False]
['text':' @tags: [','line_number':4,'multiline':False]
['text':'   requires_replication,','line_number':5,'multiline':False]
['text':' ]','line_number':6,'multiline':False]
['text':' The maxTimeAlwaysTimeOut failpoint interferes with the maxAwaitTimeMS parameter sent by the','line_number':12,'multiline':False]
['text':' streamable RSM so we have mongos use the non-streamable version here.','line_number':13,'multiline':False]
['text':' Helper function to configure "maxTimeAlwaysTimeOut" fail point on shards, which forces mongod','line_number':26,'multiline':False]
['text':' to throw if it receives an operation with a max time. See fail point declaration for complete','line_number':27,'multiline':False]
['text':' description.','line_number':28,'multiline':False]
['text':' Helper function to configure "maxTimeAlwaysTimeOut" fail point on shards, which prohibits','line_number':36,'multiline':False]
['text':' mongod from enforcing time limits. See fail point declaration for complete description.','line_number':37,'multiline':False]
['text':'','line_number':45,'multiline':False]
['text':' Pre-split collection: shard 0 takes {_id: {$lt: 0}}, shard 1 takes {_id: {$gte: 0}}.','line_number':46,'multiline':False]
['text':'','line_number':47,'multiline':False]
['text':'','line_number':55,'multiline':False]
['text':' Insert 1000 documents into sharded collection, such that each shard owns 500.','line_number':56,'multiline':False]
['text':'','line_number':57,'multiline':False]
['text':'','line_number':67,'multiline':False]
['text':' Test that mongos correctly forwards max time to shards for sharded queries.  Uses','line_number':68,'multiline':False]
['text':' maxTimeAlwaysTimeOut to ensure mongod throws if it receives a max time.','line_number':69,'multiline':False]
['text':'','line_number':70,'multiline':False]
['text':' Positive test.','line_number':72,'multiline':False]
['text':' Negative test.','line_number':80,'multiline':False]
['text':'','line_number':88,'multiline':False]
['text':' Test that mongos correctly times out max time sharded getmore operations.  Uses','line_number':89,'multiline':False]
['text':' maxTimeNeverTimeOut to ensure mongod doesn't enforce a time limit.','line_number':90,'multiline':False]
['text':'','line_number':91,'multiline':False]
['text':' ~30s operation with a 10s limit. Each shard will process 250 batches, each of which takes 60ms*2','line_number':95,'multiline':False]
['text':' = 120ms. We do not expect the first operation (one batch) to time out, but iterating the cursor','line_number':96,'multiline':False]
['text':' should exhaust the 10s limit.','line_number':97,'multiline':False]
['text':' Negative test. ~5s operation, with a high (1-day) limit.','line_number':110,'multiline':False]
['text':'','line_number':128,'multiline':False]
['text':' Test that mongos correctly forwards max time to shards for sharded commands.  Uses','line_number':129,'multiline':False]
['text':' maxTimeAlwaysTimeOut to ensure mongod throws if it receives a max time.','line_number':130,'multiline':False]
['text':'','line_number':131,'multiline':False]
['text':' Positive test for "validate".','line_number':144,'multiline':False]
['text':' Negative test for "validate".','line_number':151,'multiline':False]
['text':' Positive test for "count".','line_number':156,'multiline':False]
['text':' Negative test for "count".','line_number':163,'multiline':False]
['text':' Positive test for "collStats".','line_number':168,'multiline':False]
['text':' Negative test for "collStats".','line_number':175,'multiline':False]
['text':' Positive test for "mapReduce".','line_number':180,'multiline':False]
['text':' Negative test for "mapReduce".','line_number':198,'multiline':False]
['text':' Positive test for "aggregate".','line_number':212,'multiline':False]
['text':' Negative test for "aggregate".','line_number':220,'multiline':False]
['text':' Positive test for "setFeatureCompatibilityVersion"','line_number':226,'multiline':False]
['text':' Negative test for "setFeatureCompatibilityVersion"','line_number':237,'multiline':False]
['text':' Negative test for "setFeatureCompatibilityVersion" to upgrade','line_number':246,'multiline':False]
['text':' Test that the maxTimeMS is still enforced on the shards even if we do not spend much time in','line_number':252,'multiline':False]
['text':' mongos blocking.','line_number':253,'multiline':False]
['text':' Manually run a find here so we can be sure cursor establishment happens with batch size 0.','line_number':255,'multiline':False]
['text':' Slow down the query only on one of the shards. Each shard has 500 documents','line_number':262,'multiline':False]
['text':' so we expect the slow shard to take ~30 seconds to return a batch of 500.','line_number':263,'multiline':False]
['text':' Use a batch size of 500 to allow returning results from the fast shard as soon as they're','line_number':272,'multiline':False]
['text':' ready, as opposed to waiting to return one 16MB batch at a time.','line_number':273,'multiline':False]
['text':' The fast shard should return relatively quickly.','line_number':276,'multiline':False]
['text':' Sleep on the client-side so mongos's time budget is not being used.','line_number':282,'multiline':False]
['text':' Even though mongos has not been blocking this whole time, the shard has been busy computing','line_number':284,'multiline':False]
['text':' the next batch and should have timed out.','line_number':285,'multiline':False]
['text':' TODO SERVER-30179: Re-introduce tests for moveChunk and maxTimeMS.','line_number':288,'multiline':False]
