['text':' Test escaping of user provided data in logs','line_number':1,'multiline':False]
['text':' Use our own log parser instead of `checkLog`','line_number':6,'multiline':False]
['text':' because we want to force reading from a file.','line_number':7,'multiline':False]
['text':' {getLog: 'global'} could mask output encoding issues.','line_number':8,'multiline':False]
['text':' Search by splitting the log file on newlines,','line_number':11,'multiline':False]
['text':' filtering out blanks, parsing the remains as JSON,','line_number':12,'multiline':False]
['text':' then filtering to id===5060500 and msg==expect.','line_number':13,'multiline':False]
['text':' We should get precisely one match.','line_number':14,'multiline':False]
['text':' Too few and we didn't log,','line_number':15,'multiline':False]
['text':' too many and we didn't make the message unique enough.','line_number':16,'multiline':False]
['text':' Wrap msg in tojson for assert message so that we can see what character wasn't found.','line_number':23,'multiline':False]
['text':' Test a range of characters sent to the global log','line_number':29,'multiline':False]
