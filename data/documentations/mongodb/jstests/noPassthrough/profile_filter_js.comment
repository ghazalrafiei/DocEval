['text':'
 * Test the usage and behavior of the 'filter' profiler option.
 *
 * @tags: [requires_sharding, requires_replication]
 ','line_number':1,'multiline':True]
['text':' mongoS supports slow-query log lines but not profiling. So if we are talking to mongoS, we','line_number':13,'multiline':False]
['text':' will avoid enabling profiling, or making assertions about profiling.','line_number':14,'multiline':False]
['text':' When you set a filter it appears in getProfilingLevel.','line_number':17,'multiline':False]
['text':' But, slowms / sampleRate still appears in getProfilingLevel.','line_number':22,'multiline':False]
['text':' Since this may be confusing, a note also appears.','line_number':25,'multiline':False]
['text':' When you unset the filter it no longer appears in the response.','line_number':33,'multiline':False]
['text':' The note is also gone.','line_number':37,'multiline':False]
['text':' Setting the filter to null is an error: we don't want people to assume that {filter: null}','line_number':40,'multiline':False]
['text':' unsets the filter, and we don't want people to assume {filter: null} is equivalent to not','line_number':41,'multiline':False]
['text':' specifying a new filter.','line_number':42,'multiline':False]
['text':' While the filter is set, slow-query log lines ignore slowms and sampleRate.','line_number':47,'multiline':False]
['text':' For example:','line_number':48,'multiline':False]
['text':' 1. An always-true filter of {} will always log.','line_number':49,'multiline':False]
['text':'    This shows we don't AND all the settings together.','line_number':50,'multiline':False]
['text':' 2. An always-false filter of {$expr: false} will never log.','line_number':64,'multiline':False]
['text':'    This shows we don't OR all the settings together.','line_number':65,'multiline':False]
['text':' The filter lets you express interesting predicates, such as SERVER-37308.','line_number':81,'multiline':False]
['text':' This filter looks for queries with a high ratio of scanned to returned,','line_number':84,'multiline':False]
['text':' as an attempt to find query plans that aren't using indexes well.','line_number':85,'multiline':False]
['text':' Only the collscan plan should be logged and profiled. The ixscan plan has a low ratio of','line_number':93,'multiline':False]
['text':' docsExamined/nreturned, so the filter does not select it.','line_number':94,'multiline':False]
['text':' The input to the filter has the same schema as system.profile, with a few exceptions.','line_number':102,'multiline':False]
['text':' storage stats are set after filtering and cannot be used for filtering','line_number':107,'multiline':False]
['text':' Set a filter that requires `field` to exist.','line_number':113,'multiline':False]
['text':' If the profile filter's input didn't contain `field`, then this operation wouldn't be','line_number':118,'multiline':False]
['text':' profiled.','line_number':119,'multiline':False]
['text':' To catch mistakes, it's not allowed for the filter to reference fields that don't exist.','line_number':127,'multiline':False]
['text':' setProfilingLevel throws an error, and prevents you from setting an invalid filter like this.','line_number':128,'multiline':False]
['text':' However, we can't catch every run-time error statically. For example, we make no attempt to','line_number':138,'multiline':False]
['text':' catch a type error statically. This kind of invalid filter will fail silently, because','line_number':139,'multiline':False]
['text':' logging the error would be too expensive, since the filter runs so frequently.','line_number':140,'multiline':False]
['text':' It is allowed for the filter to depend on the entire document.','line_number':148,'multiline':False]
