['text':'*
 * Tests running the setFeatureCompatibilityVersion command concurrently with a prepared
 * transaction. Specifically, runs the setFCV right before the TransactionCoordinator writes the
 * commit decision.
 *
 * @tags: [
 *   requires_sharding,
 * ]
 ','line_number':1,'multiline':True]
['text':' Set up a sharded collection with two chunks:','line_number':16,'multiline':False]
['text':' shard0: [MinKey, 0]','line_number':17,'multiline':False]
['text':' shard1: [0, MaxKey]','line_number':18,'multiline':False]
['text':' Run a cross-shard transaction that has shard0 as the coordinator. Make the TransactionCoordinator','line_number':63,'multiline':False]
['text':' thread hang right before the commit decision is written (i.e. after the transaction has entered','line_number':64,'multiline':False]
['text':' the "prepared" state).','line_number':65,'multiline':False]
['text':' Run a setFCV command against shard0 and wait for the setFCV thread to start waiting to acquire','line_number':71,'multiline':False]
['text':' the MultiDocumentTransactionsBarrier S lock (i.e. waiting for existing prepared transactions to','line_number':72,'multiline':False]
['text':' commit or abort).','line_number':73,'multiline':False]
['text':' Unpause the TransactionCoordinator. The transaction should be able to commit despite the fact','line_number':82,'multiline':False]
['text':' that the MultiDocumentTransactionsBarrier S lock is enqueued.','line_number':83,'multiline':False]
