['text':'*
 * Tests that we don't hit 3 way deadlock between a interrupted index build, prepared txn and step
 * down thread.
 *
 * This test creates a scenario where:
 * 1) Starts an index build.
 * 2) Transaction gets prepared and holds the collection lock in MODE_IX.
 * 3) A dropIndexes command attempts to abort the createIndexes command. The abort command holds the
 *    RSTL lock in MODE_IX and tries to acquire a MODE_X collection lock, but blocks on the prepared
 *    transaction.
 * 4) Step down enqueues RSTL in MODE_X and waits for aborting thread to release RSTL lock.
 * 5) The aborting thread gets interrupted by step down, step down completes, and the index build
 *    eventually completes on the new primary.
 *
 * @tags: [
 *   uses_prepare_transaction,
 *   uses_transactions,
 * ]
 ','line_number':1,'multiline':True]
['text':' Enable fail point which makes index build hang in an interruptible state.','line_number':43,'multiline':False]
['text':' Attempt to abort the index build. It will hang holding the RSTL while waiting for the collection','line_number':72,'multiline':False]
['text':' X lock.','line_number':73,'multiline':False]
['text':' Stepdown should interrupt the dropIndexes operation and cause it to drop its queued lock.','line_number':81,'multiline':False]
['text':' Unblock the index build and wait for threads to join. The stepdown should succeed in unblocking','line_number':85,'multiline':False]
['text':' the abort. In the case of single-phase index builds, the abort will succeed after the stepdown.','line_number':86,'multiline':False]
['text':' Allow the primary to be re-elected, and wait for it.','line_number':93,'multiline':False]
