['text':'','line_number':1,'multiline':False]
['text':' Integration test of the geo code','line_number':2,'multiline':False]
['text':'','line_number':3,'multiline':False]
['text':' Basically, this tests adds a random number of docs with a random number of points,','line_number':4,'multiline':False]
['text':' given a 2d environment of random precision which is either randomly earth-like or of','line_number':5,'multiline':False]
['text':' random bounds, and indexes these points after a random amount of points have been added','line_number':6,'multiline':False]
['text':' with a random number of additional fields which correspond to whether the documents are','line_number':7,'multiline':False]
['text':' in randomly generated circular, spherical, box, and box-polygon shapes (and exact),','line_number':8,'multiline':False]
['text':' queried randomly from a set of query types.  Each point is randomly either and object','line_number':9,'multiline':False]
['text':' or array, and all points and document data fields are nested randomly in arrays (or not).','line_number':10,'multiline':False]
['text':'','line_number':11,'multiline':False]
['text':' We approximate the user here as a random function :-)','line_number':12,'multiline':False]
['text':'','line_number':13,'multiline':False]
['text':' These random point fields can then be tested against all types of geo queries using these random','line_number':14,'multiline':False]
['text':' shapes.','line_number':15,'multiline':False]
['text':'','line_number':16,'multiline':False]
['text':' Tests can be easily reproduced by getting the test number from the output directly before a','line_number':17,'multiline':False]
['text':' test fails, and hard-wiring that as the test number.','line_number':18,'multiline':False]
['text':'','line_number':19,'multiline':False]
['text':' Normal earth environment','line_number':28,'multiline':False]
['text':' Make sure we don't blow past our test resources','line_number':87,'multiline':False]
['text':' See s2cap.cc','line_number':97,'multiline':False]
['text':'','line_number':98,'multiline':False]
['text':' Compute the range of longitudes covered by the cap.  We use the law','line_number':99,'multiline':False]
['text':' of sines for spherical triangles.  Consider the triangle ABC where','line_number':100,'multiline':False]
['text':' A is the north pole, B is the center of the cap, and C is the point','line_number':101,'multiline':False]
['text':' of tangency between the cap boundary and a line of longitude.  Then','line_number':102,'multiline':False]
['text':' C is a right angle, and letting a,b,c denote the sides opposite A,B,C,','line_number':103,'multiline':False]
['text':' we have sin(a)/sin(A) = sin(c)/sin(C), or sin(A) = sin(a)/sin(c).','line_number':104,'multiline':False]
['text':' Here "a" is the cap angle, and "c" is the colatitude (90 degrees','line_number':105,'multiline':False]
['text':' minus the latitude).  This formula also works for negative latitudes.','line_number':106,'multiline':False]
['text':'','line_number':107,'multiline':False]
['text':' Angle A is the difference of longitudes of B and C.','line_number':108,'multiline':False]
['text':' Double floating number error, return invalid distance','line_number':112,'multiline':False]
['text':' TODO SERVER-24440: Points close to the north and south poles may fail to be returned by','line_number':130,'multiline':False]
['text':' $nearSphere queries answered using a "2d" index. We have empirically found that points','line_number':131,'multiline':False]
['text':' with latitudes between 89 and 90 degrees are potentially affected by this issue, so we','line_number':132,'multiline':False]
['text':' additionally reject any coordinates with a latitude that falls within that range.','line_number':133,'multiline':False]
['text':' Get a start point that doesn't require wrapping','line_number':147,'multiline':False]
['text':' TODO: Are we a bit too aggressive with wrapping issues?','line_number':148,'multiline':False]
['text':' TODO:  Add spherical $uniqueDocs tests','line_number':332,'multiline':False]
['text':' Our seed will change every time this is run, but','line_number':335,'multiline':False]
['text':' each individual test will be reproducible given','line_number':336,'multiline':False]
['text':' that seed and test number','line_number':337,'multiline':False]
['text':' seed = 175 + 288 + 12','line_number':339,'multiline':False]
['text':' Random.srand( 42240 )','line_number':343,'multiline':False]
['text':' Random.srand( 7344 )','line_number':344,'multiline':False]
['text':' env.bits = 11','line_number':350,'multiline':False]
['text':' data.numDocs = 5; data.maxLocs = 1;','line_number':353,'multiline':False]
['text':' Nest the keys differently','line_number':374,'multiline':False]
['text':' "earth" is used to drive test setup and not a valid createIndex option or required at','line_number':390,'multiline':False]
['text':' this point. It must be removed before calling createIndex().','line_number':391,'multiline':False]
['text':' exact','line_number':412,'multiline':False]
['text':' $center','line_number':418,'multiline':False]
['text':' $centerSphere','line_number':439,'multiline':False]
['text':' $box','line_number':461,'multiline':False]
['text':' $polygon','line_number':468,'multiline':False]
['text':' $near','line_number':475,'multiline':False]
['text':' $centerSphere','line_number':484,'multiline':False]
['text':' $geoNear aggregation stage.','line_number':495,'multiline':False]
['text':' $polygon','line_number':530,'multiline':False]
