['text':'*
 * Tests that read operations with readConcern majority only see committed data.
 *
 * The following read operations are tested:
 *  - find command
 *  - aggregation
 *  - distinct
 *  - count
 *
 * Each operation is tested on a single node, and (if supported) through mongos on both sharded and
 * unsharded collections. Mongos doesn't directly handle readConcern majority, but these tests
 * should ensure that it correctly propagates the setting to the shards when running commands.
 * @tags: [
 *   requires_majority_read_concern,
 *   requires_sharding,
 * ]
 ','line_number':1,'multiline':True]
['text':' Skip metadata consistency checks since the sharded cluster is started with 0 shards','line_number':19,'multiline':False]
['text':' These test cases are functions that return a cursor of the documents in collections without','line_number':36,'multiline':False]
['text':' fetching them yet.','line_number':37,'multiline':False]
['text':' These test cases have a run method that will be passed a collection with a single object with','line_number':60,'multiline':False]
['text':' _id: 1 and a state field that equals either "before" or "after". The collection will also','line_number':61,'multiline':False]
['text':' contain a 2dsphere index to enable testing commands that depend on it. The return value from the','line_number':62,'multiline':False]
['text':' run method is expected to be the value of expectedBefore or expectedAfter depending on the state','line_number':63,'multiline':False]
['text':' of the state field.','line_number':64,'multiline':False]
['text':' Setup initial state.','line_number':111,'multiline':False]
['text':' Check initial conditions.','line_number':116,'multiline':False]
['text':' Change state without making it committed.','line_number':119,'multiline':False]
['text':' Cursor still sees old state.','line_number':122,'multiline':False]
['text':' Create a cursor before the update is visible.','line_number':125,'multiline':False]
['text':' Making a snapshot doesn't make the update visible yet.','line_number':128,'multiline':False]
['text':' Setting it as committed does for both new and old cursors.','line_number':132,'multiline':False]
['text':' Setup initial state.','line_number':144,'multiline':False]
['text':' Check initial conditions.','line_number':149,'multiline':False]
['text':' Change state without making it committed.','line_number':152,'multiline':False]
['text':' Cursor still sees old state.','line_number':155,'multiline':False]
['text':' Making a snapshot doesn't make the update visible yet.','line_number':158,'multiline':False]
['text':' Setting it as committed does.','line_number':162,'multiline':False]
['text':' Cannot wait for a stable recovery timestamp with 'testingSnapshotBehaviorInIsolation' set.','line_number':178,'multiline':False]
['text':' Do a majority write to wait for a valid committed snapshot before starting the test. This is','line_number':184,'multiline':False]
['text':' needed to make sure no oplog holes behind the clusterTime and all internal writes as part of the','line_number':185,'multiline':False]
['text':' server startup are committed. Otherwise, manually setting the committed snapshot to the latest','line_number':186,'multiline':False]
['text':' clusterTime using the `setCommittedSnapshot` command could result in reading ahead of the','line_number':187,'multiline':False]
['text':' all_durable.','line_number':188,'multiline':False]
