['text':'*
 * Test that an aggregation with a $merge stage obeys the maxTimeMS.
 * @tags: [
 *   requires_replication,
 *   requires_sharding,
 * ]
 ','line_number':1,'multiline':True]
['text':'*
 * Helper for populating the collection.
 ','line_number':16,'multiline':True]
['text':'*
 * Given a $merge parameters mongod connection, run a $merge aggregation against 'conn'. Set the
 * provided failpoint on the node specified by 'failPointConn' in order to hang during the
 * aggregate. Ensure that the $merge maxTimeMS expires on the node specified by 'maxTimeMsConn'.
 ','line_number':25,'multiline':True]
['text':' Use a short maxTimeMS so that the test completes in a reasonable amount of time. We will','line_number':32,'multiline':False]
['text':' use the 'maxTimeNeverTimeOut' failpoint to ensure that the operation does not','line_number':33,'multiline':False]
['text':' prematurely time out.','line_number':34,'multiline':False]
['text':' Enable a failPoint so that the write will hang. 'shouldCheckForInterrupt' is set to true','line_number':37,'multiline':False]
['text':' so that maxTimeMS expiration can occur while the $merge operation's thread is hanging on','line_number':38,'multiline':False]
['text':' this failpoiint.','line_number':39,'multiline':False]
['text':' Make sure we don't run out of time on either of the involved nodes before the failpoint is','line_number':48,'multiline':False]
['text':' hit.','line_number':49,'multiline':False]
['text':' Build the parallel shell function.','line_number':55,'multiline':False]
['text':' eslint-disable ','line_number':62,'multiline':True]
['text':' eslint-enable ','line_number':73,'multiline':True]
['text':' The aggregation running in the parallel shell will hang on the failpoint, burning','line_number':82,'multiline':False]
['text':' its time. Wait until the maxTimeMS has definitely expired.','line_number':83,'multiline':False]
['text':' Now drop the failpoint, allowing the aggregation to proceed. It should hit an','line_number':86,'multiline':False]
['text':' interrupt check and terminate immediately.','line_number':87,'multiline':False]
['text':' Wait for the parallel shell to finish.','line_number':91,'multiline':False]
['text':'*
 * Run a $merge aggregate against the node specified by 'conn' with primary 'primaryConn' (these may
 * be the same node). Verify that maxTimeMS properly times out the aggregate on the node specified
 * by 'maxTimeMsConn' both while hanging on the insert/update on 'primaryConn' and while hanging on
 * the batch being built on 'conn'.
 ','line_number':95,'multiline':True]
['text':' The target collection will always be empty so we do not test the setting that will cause','line_number':104,'multiline':False]
['text':' only failure.','line_number':105,'multiline':False]
['text':' Be sure we're able to read from a cursor with a maxTimeMS set on it.','line_number':114,'multiline':False]
['text':' Use a long maxTimeMS, since we expect the operation to finish.','line_number':116,'multiline':False]
['text':' Force the aggregation to hang while the batch is being written. The failpoint changes','line_number':127,'multiline':False]
['text':' depending on the mode. If 'whenMatched' is set to "fail" then the implementation will end','line_number':128,'multiline':False]
['text':' up issuing insert commands instead of updates.','line_number':129,'multiline':False]
['text':' Force the aggregation to hang while the batch is being built.','line_number':137,'multiline':False]
['text':' Run on a standalone.','line_number':142,'multiline':False]
['text':' Run on the primary and the secondary of a replica set.','line_number':152,'multiline':False]
['text':' Run the $merge on the primary and test that the maxTimeMS times out on the primary.','line_number':162,'multiline':False]
['text':' Run the $merge on the secondary and test that the maxTimeMS times out on the primary.','line_number':164,'multiline':False]
['text':' Run the $merge on the secondary and test that the maxTimeMS times out on the secondary.','line_number':166,'multiline':False]
['text':' Runs a $merge against 'mongosConn' and verifies that the maxTimeMS value is included in the','line_number':172,'multiline':False]
['text':' command sent to mongod. Since the actual timeout can unreliably happen in mongos before even','line_number':173,'multiline':False]
['text':' reaching the shard, we instead set a very large timeout and verify that the command sent to','line_number':174,'multiline':False]
['text':' mongod includes the maxTimeMS.','line_number':175,'multiline':False]
['text':' The target collection will always be empty so we do not test the setting that will cause','line_number':179,'multiline':False]
['text':' only failure.','line_number':180,'multiline':False]
['text':' Set a large timeout since we expect the command to finish.','line_number':185,'multiline':False]
['text':' Make sure we don't timeout in mongos before even reaching the shards.','line_number':192,'multiline':False]
['text':' Filter the profiler entries on the existence of $merge, since aggregations through mongos','line_number':204,'multiline':False]
['text':' will include an extra aggregation with an empty pipeline to establish cursors on the','line_number':205,'multiline':False]
['text':' shards.','line_number':206,'multiline':False]
['text':' Run on a sharded cluster.','line_number':223,'multiline':False]
['text':' Ensure shard 0 is the primary shard. This is so that the $merge stage is guaranteed to','line_number':227,'multiline':False]
['text':' run on it.','line_number':228,'multiline':False]
['text':' Set up the source collection to be sharded in a way such that each node will have some','line_number':232,'multiline':False]
['text':' documents for the remainder of the test.','line_number':233,'multiline':False]
['text':' shard 0: [MinKey, 5]','line_number':234,'multiline':False]
['text':' shard 1: [5, MaxKey]','line_number':235,'multiline':False]
['text':' key','line_number':237,'multiline':False]
['text':' split','line_number':238,'multiline':False]
['text':' move','line_number':239,'multiline':False]
['text':' Start the profiler on each shard so that we can examine the $out's maxTimeMS.','line_number':243,'multiline':False]
['text':' // Run the test with 'destColl' unsharded.','line_number':247,'multiline':False]
['text':' Run the test with 'destColl' sharded. This means that writes will be sent to both','line_number':254,'multiline':False]
['text':' shards, and if either one hangs, the MaxTimeMS will expire.','line_number':255,'multiline':False]
['text':' Shard the destination collection.','line_number':256,'multiline':False]
['text':' key','line_number':258,'multiline':False]
['text':' split','line_number':259,'multiline':False]
['text':' move','line_number':260,'multiline':False]
