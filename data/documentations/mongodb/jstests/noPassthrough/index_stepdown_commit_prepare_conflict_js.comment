['text':'*
 * Tests that we don't hit 3 way deadlock between an index builder, prepared transaction, and step
 * down.
 *
 * This tests the following scenario:
 * 1) Starts and index build.
 * 2) Prepares a transaction which holds the collection lock in IX mode.
 * 3) Waits for the index build to attempt to acquire the collection lock in X mode to commit, but
 *    blocks behind the prepared transaction due to a collection lock conflict.
 * 4) Steps down the primary, which enqueues the RSTL in X mode.
 * 5) Ensures the index build has released its RSTL lock before taking the X lock, and does not
 *    block stepDown. Since commit must acquire the RSTL to write its oplog entry, ensures that the
 *    index build is able to retry after failing once due to a stepDown.
 * 6) Steps up a new primary. Ensure that the blocked index build on the secondary does not prevent
 *    step-up from ocurring.
 *
 * @tags: [
 *   uses_prepare_transaction,
 *   uses_transactions,
 * ]
 ','line_number':1,'multiline':True]
['text':' Clear the log.','line_number':40,'multiline':False]
['text':' Enable fail point which makes hybrid index build to hang.','line_number':43,'multiline':False]
['text':' Unblock index build, which will cause it to hang acquiring the X lock to commit.','line_number':69,'multiline':False]
['text':' Wait for threads to join.','line_number':79,'multiline':False]
['text':' assert.commandWorked(primary.adminCommand({replSetFreeze: 0}));','line_number':87,'multiline':False]
