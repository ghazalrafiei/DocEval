['text':'
 * Test of a successfull replica set rollback for basic CRUD operations in multitenancy environment
 * with featureFlagRequireTenantId. This test is modeled from rollback_crud_ops_sequence.js.
 ','line_number':1,'multiline':True]
['text':' Helper function for verifying contents at the end of the test.','line_number':37,'multiline':False]
['text':' Tiebreaker's replication is paused for most of the test, avoid falling off the oplog.','line_number':80,'multiline':False]
['text':' Insert initial data for both nodes.','line_number':103,'multiline':False]
['text':' Testing capped collection.','line_number':114,'multiline':False]
['text':' Going back to empty on capped is a special case and must be tested.','line_number':117,'multiline':False]
['text':' These operations are only done on 'rollbackNode' and should eventually be rolled back.','line_number':123,'multiline':False]
['text':' Rolling back a delete will involve reinserting the item(s).','line_number':134,'multiline':False]
['text':' Create a collection (need to roll back the whole thing).','line_number':142,'multiline':False]
['text':' Create a new empty collection (need to roll back the whole thing).','line_number':144,'multiline':False]
['text':' Insert new data into syncSource so that rollbackNode enters rollback when it is reconnected.','line_number':149,'multiline':False]
['text':' These operations should not be rolled back.','line_number':150,'multiline':False]
