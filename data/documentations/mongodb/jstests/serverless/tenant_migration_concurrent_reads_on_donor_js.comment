['text':'*
 * Tests that the donor
 * - blocks reads with atClusterTime/afterClusterTime >= blockTimestamp that are executed while the
 *   migration is in the blocking state but does not block linearizable reads.
 * - rejects reads with atClusterTime/afterClusterTime >= blockTimestamp reads and linearizable
 *   reads after the migration commits.
 * - does not reject reads with atClusterTime/afterClusterTime >= blockTimestamp and linearizable
 *   reads after the migration aborts.
 *
 * @tags: [
 *   incompatible_with_macos,
 *   incompatible_with_windows_tls,
 *   requires_majority_read_concern,
 *   requires_persistence,
 *   serverless,
 *   requires_fcv_71,
 * ]
 ','line_number':1,'multiline':True]
['text':'*
 * Asserts that the TenantMigrationAccessBlocker for the given tenant on the given node has the
 * expected statistics.
 ','line_number':36,'multiline':True]
['text':'*
 * To be used to resume a migration that is paused after entering the blocking state. Waits for the
 * number of blocked reads to reach 'targetNumBlockedReads' and unpauses the migration.
 ','line_number':60,'multiline':True]
['text':' The 'TransientTransactionError' label is attached only in a scope of a transaction.','line_number':77,'multiline':False]
['text':'*
 * Tests that after the migration commits, the donor rejects linearizable reads and reads with
 * atClusterTime/afterClusterTime >= blockTimestamp.
 ','line_number':97,'multiline':True]
['text':' Wait for the last oplog entry on the primary to be visible in the committed snapshot view of','line_number':115,'multiline':False]
['text':' the oplog on all the secondaries. This is to ensure that snapshot reads on secondaries with','line_number':116,'multiline':False]
['text':' unspecified atClusterTime have read timestamp >= commitTimestamp.','line_number':117,'multiline':False]
['text':'*
 * Tests that after the migration abort, the donor does not reject linearizable reads or reads with
 * atClusterTime/afterClusterTime >= blockTimestamp.
 ','line_number':150,'multiline':True]
['text':' Wait for the last oplog entry on the primary to be visible in the committed snapshot view of','line_number':171,'multiline':False]
['text':' the oplog on all the secondaries. This is to ensure that snapshot reads on secondaries with','line_number':172,'multiline':False]
['text':' unspecified atClusterTime have read timestamp >= abortTimestamp.','line_number':173,'multiline':False]
['text':'*
 * Tests that in the blocking state, the donor blocks reads with atClusterTime/afterClusterTime >=
 * blockTimestamp but does not block linearizable reads.
 ','line_number':202,'multiline':True]
['text':' Wait for the migration to enter the blocking state.','line_number':221,'multiline':False]
['text':' Wait for the last oplog entry on the primary to be visible in the committed snapshot view of','line_number':224,'multiline':False]
['text':' the oplog on all secondaries to ensure that snapshot reads on the secondaries with','line_number':225,'multiline':False]
['text':' unspecified atClusterTime have read timestamp >= blockTimestamp.','line_number':226,'multiline':False]
['text':'*
 * Tests that the donor rejects the blocked reads (reads with atClusterTime/afterClusterTime >=
 * blockingTimestamp) once the migration commits.
 ','line_number':256,'multiline':True]
['text':' Linearizable reads are not blocked.','line_number':262,'multiline':False]
['text':' Run the commands after the migration enters the blocking state.','line_number':283,'multiline':False]
['text':' Wait for the last oplog entry on the primary to be visible in the committed snapshot view of','line_number':287,'multiline':False]
['text':' the oplog on all secondaries to ensure that snapshot reads on the secondaries with','line_number':288,'multiline':False]
['text':' unspecified atClusterTime have read timestamp >= blockTimestamp.','line_number':289,'multiline':False]
['text':' The migration should unpause and commit after the read is blocked. Verify that the read','line_number':300,'multiline':False]
['text':' is rejected.','line_number':301,'multiline':False]
['text':' Verify that the migration succeeded.','line_number':313,'multiline':False]
['text':'*
 * Tests that the donor unblocks blocked reads (reads with atClusterTime/afterClusterTime >=
 * blockingTimestamp) once the migration aborts.
 ','line_number':322,'multiline':True]
['text':' Linearizable reads are not blocked.','line_number':328,'multiline':False]
['text':' Run the commands after the migration enters the blocking state.','line_number':351,'multiline':False]
['text':' Wait for the last oplog entry on the primary to be visible in the committed snapshot view of','line_number':355,'multiline':False]
['text':' the oplog on all secondaries to ensure that snapshot reads on the secondaries with','line_number':356,'multiline':False]
['text':' unspecified atClusterTime have read timestamp >= blockTimestamp.','line_number':357,'multiline':False]
['text':' The migration should unpause and abort after the read is blocked. Verify that the read','line_number':368,'multiline':False]
['text':' unblocks.','line_number':369,'multiline':False]
['text':' Reads just get unblocked if the migration aborts.','line_number':378,'multiline':False]
['text':' Verify that the migration failed due to the simulated error.','line_number':382,'multiline':False]
['text':' Force the donor to preserve all snapshot history to ensure that transactional reads do not fail','line_number':487,'multiline':False]
['text':' with TransientTransactionError "Read timestamp is older than the oldest available timestamp".','line_number':488,'multiline':False]
