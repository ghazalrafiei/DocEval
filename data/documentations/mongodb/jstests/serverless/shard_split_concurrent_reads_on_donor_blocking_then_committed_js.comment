['text':'*
 * Tests that the donor
 * - rejects reads with atClusterTime/afterClusterTime >= blockOpTime reads and linearizable
 *   reads after the split commits.
 *
 * @tags: [
 *   incompatible_with_eft,
 *   incompatible_with_macos,
 *   incompatible_with_windows_tls,
 *   requires_majority_read_concern,
 *   requires_persistence,
 *   serverless,
 *   requires_fcv_63
 * ]
 ','line_number':1,'multiline':True]
['text':'*
 * To be used to resume a split that is paused after entering the blocking state. Waits for the
 * number of blocked reads to reach 'targetNumBlockedReads' and unpauses the split.
 ','line_number':28,'multiline':True]
['text':'*
 * Tests that the donor rejects the blocked reads (reads with atClusterTime/afterClusterTime >=
 * blockingTimestamp) once the split commits.
 ','line_number':43,'multiline':True]
['text':' Linearizable reads are not blocked.','line_number':49,'multiline':False]
['text':' Run the commands after the split enters the blocking state.','line_number':71,'multiline':False]
['text':' Wait for the last oplog entry on the primary to be visible in the committed snapshot view of','line_number':75,'multiline':False]
['text':' the oplog on all secondaries to ensure that snapshot reads on the secondaries with','line_number':76,'multiline':False]
['text':' unspecified atClusterTime have read timestamp >= blockOpTime.','line_number':77,'multiline':False]
['text':' The split should unpause and commit after the read is blocked. Verify that the read','line_number':85,'multiline':False]
['text':' is rejected on donor nodes.','line_number':86,'multiline':False]
['text':' Verify that the split succeeded.','line_number':104,'multiline':False]
