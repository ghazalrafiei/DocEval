['text':'*
 * Tests that tenant migrations correctly set the TTL values for keys in the
 * config.external_validation_keys collection.
 *
 * @tags: [
 *   incompatible_with_macos,
 *   incompatible_with_windows_tls,
 *   requires_majority_read_concern,
 *   requires_persistence,
 *   serverless,
 *   requires_fcv_71,
 * ]
 ','line_number':1,'multiline':True]
['text':'','line_number':97,'multiline':False]
['text':' Tests with no failovers.','line_number':98,'multiline':False]
['text':'','line_number':99,'multiline':False]
['text':' Verify the external keys TTL index is created on both replica sets on stepup.','line_number':106,'multiline':False]
['text':' This test runs multiple concurrent migrations, which shard merge can't handle.','line_number':122,'multiline':False]
['text':' The keys should have been created without a TTL deadline.','line_number':133,'multiline':False]
['text':' Run another migration to verify key expiration is only set for a specific migration's','line_number':137,'multiline':False]
['text':' keys.','line_number':138,'multiline':False]
['text':' The keys should have been created without a TTL deadline.','line_number':148,'multiline':False]
['text':' After running donorForgetMigration, the TTL value should be updated. The default TTL','line_number':156,'multiline':False]
['text':' buffer is 1 day so the keys will not have been deleted.','line_number':157,'multiline':False]
['text':' The keys for the other migration should not have been affected.','line_number':161,'multiline':False]
['text':' Verify the default value of the buffer.','line_number':183,'multiline':False]
['text':' 1 day.','line_number':184,'multiline':False]
['text':' 1 day.','line_number':185,'multiline':False]
['text':' The keys should have been created without a TTL deadline.','line_number':190,'multiline':False]
['text':' The keys won't be deleted until the buffer expires, so sleep to avoid wasted work.','line_number':196,'multiline':False]
['text':' Wait for the keys to be deleted on both replica sets.','line_number':199,'multiline':False]
['text':' Restore the original timeouts','line_number':203,'multiline':False]
['text':'','line_number':213,'multiline':False]
['text':' Tests with failovers','line_number':214,'multiline':False]
['text':'','line_number':215,'multiline':False]
['text':' retryOnRetryableErrors ','line_number':271,'multiline':True]
['text':' The keys should have been created without a TTL deadline.','line_number':273,'multiline':False]
['text':' After running donorForgetMigration, the TTL value should be updated. The default TTL','line_number':279,'multiline':False]
['text':' buffer is 1 day so the keys will not have been deleted.','line_number':280,'multiline':False]
['text':' retryOnRetryableErrors ','line_number':295,'multiline':True]
['text':' The keys should have been created without a TTL deadline.','line_number':297,'multiline':False]
['text':' After running donorForgetMigration, the TTL value should be updated. The default TTL','line_number':315,'multiline':False]
['text':' buffer is 1 day so the keys will not have been deleted.','line_number':316,'multiline':False]
['text':' this test expects the external keys to expire, so lower the expiration timeouts.','line_number':325,'multiline':False]
['text':' retryOnRetryableErrors ','line_number':337,'multiline':True]
['text':' The keys should have been created without a TTL deadline.','line_number':339,'multiline':False]
['text':' Let the keys expire on the donor before the state document is deleted to verify retrying','line_number':350,'multiline':False]
['text':' recipientForgetMigration can handle this case. The keys won't be deleted until the buffer','line_number':351,'multiline':False]
['text':' expires, so sleep to avoid wasted work.','line_number':352,'multiline':False]
['text':' TODO SERVER-76128: Tenant Migrations are not robust to recipient failover.','line_number':366,'multiline':False]
['text':' jsTestLog("Recipient failover after receiving forgetMigration after updating keys.");','line_number':367,'multiline':False]
['text':' (() => {','line_number':368,'multiline':False]
['text':'     const {tmt, donorRst, recipientRst, teardown} = setup();','line_number':369,'multiline':False]
['text':'     // this test expects the external keys to expire, so lower the expiration timeouts.','line_number':370,'multiline':False]
['text':'     const lowerExternalKeysBufferSecs = 5;','line_number':371,'multiline':False]
['text':'     const lowerStateDocExpirationMS = 500;','line_number':372,'multiline':False]
['text':'     for (let conn of [...donorRst.nodes, ...recipientRst.nodes]) {','line_number':373,'multiline':False]
['text':'         setTenantMigrationExpirationParams(','line_number':374,'multiline':False]
['text':'             conn, lowerStateDocExpirationMS, lowerExternalKeysBufferSecs);','line_number':375,'multiline':False]
['text':'     }','line_number':376,'multiline':False]
['text':'     const [tenantId, migrationId, migrationOpts] = makeTestParams();','line_number':377,'multiline':False]
['text':'     const recipientPrimary = tmt.getRecipientPrimary();','line_number':378,'multiline':False]
['text':'     if (isShardMergeEnabled(tmt.getDonorPrimary().getDB("admin"))) {','line_number':380,'multiline':False]
['text':'         jsTestLog(','line_number':381,'multiline':False]
['text':'             "Skip: featureFlagShardMerge is enabled. Shard merge deletes keys after marking','line_number':382,'multiline':False]
['text':'             the recipient state document as 'aborted'.");','line_number':383,'multiline':False]
['text':'         teardown();','line_number':384,'multiline':False]
['text':'         return;','line_number':385,'multiline':False]
['text':'     }','line_number':386,'multiline':False]
['text':'     assert.commandWorked(tmt.startMigration(migrationOpts));','line_number':388,'multiline':False]
['text':'     TenantMigrationTest.assertCommitted(','line_number':389,'multiline':False]
['text':'         tmt.waitForMigrationToComplete(migrationOpts, true /* retryOnRetryableErrors */));','line_number':390,'multiline':False]
['text':'     // The keys should have been created without a TTL deadline.','line_number':392,'multiline':False]
['text':'     verifyExternalKeys(tmt.getDonorPrimary(), {migrationId, expectTTLValue: false});','line_number':393,'multiline':False]
['text':'     verifyExternalKeys(tmt.getRecipientPrimary(), {migrationId, expectTTLValue: false});','line_number':394,'multiline':False]
['text':'     let fp;','line_number':396,'multiline':False]
['text':'     if (isShardMergeEnabled(tmt.getDonorPrimary().getDB("admin"))) {','line_number':397,'multiline':False]
['text':'         fp = configureFailPoint(','line_number':398,'multiline':False]
['text':'             recipientPrimary, "fpBeforeMarkingStateDocAsGarbageCollectable", {action:','line_number':399,'multiline':False]
['text':'             "hang"});','line_number':400,'multiline':False]
['text':'     } else {','line_number':401,'multiline':False]
['text':'         fp = configureFailPoint(','line_number':402,'multiline':False]
['text':'             recipientPrimary, "fpAfterReceivingRecipientForgetMigration", {action: "hang"});','line_number':403,'multiline':False]
['text':'     }','line_number':404,'multiline':False]
['text':'     const forgetMigrationThread = new Thread(','line_number':405,'multiline':False]
['text':'         forgetMigrationAsync, migrationOpts.migrationIdString, createRstArgs(donorRst),','line_number':406,'multiline':False]
['text':'         true);','line_number':407,'multiline':False]
['text':'     forgetMigrationThread.start();','line_number':408,'multiline':False]
['text':'     fp.wait();','line_number':409,'multiline':False]
['text':'     // Let the keys expire on the recipient before the state document is deleted to verify','line_number':411,'multiline':False]
['text':'     // retrying recipientForgetMigration can handle this case. The keys won't be deleted','line_number':412,'multiline':False]
['text':'     until','line_number':413,'multiline':False]
['text':'     // the buffer expires, so sleep to avoid wasted work.','line_number':414,'multiline':False]
['text':'     sleep((lowerExternalKeysBufferSecs * 1000) + lowerStateDocExpirationMS + 500);','line_number':415,'multiline':False]
['text':'     waitForExternalKeysToBeDeleted(tmt.getRecipientPrimary(), migrationId);','line_number':416,'multiline':False]
['text':'     assert.commandWorked(recipientPrimary.adminCommand(','line_number':418,'multiline':False]
['text':'         {replSetStepDown: ReplSetTest.kForeverSecs, force: true}));','line_number':419,'multiline':False]
['text':'     assert.commandWorked(recipientPrimary.adminCommand({replSetFreeze: 0}));','line_number':420,'multiline':False]
['text':'     fp.off();','line_number':421,'multiline':False]
['text':'     assert.commandWorked(forgetMigrationThread.returnData());','line_number':423,'multiline':False]
['text':'     // Eventually the donor's keys should be deleted too.','line_number':425,'multiline':False]
['text':'     waitForExternalKeysToBeDeleted(tmt.getDonorPrimary(), migrationId);','line_number':426,'multiline':False]
['text':'     teardown();','line_number':427,'multiline':False]
['text':' })();','line_number':428,'multiline':False]
