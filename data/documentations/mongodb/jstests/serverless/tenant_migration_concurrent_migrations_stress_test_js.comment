['text':'*
 * Stress test runs many concurrent migrations against the same recipient.
 *
 * @tags: [
 *   incompatible_with_amazon_linux,
 *   incompatible_with_macos,
 *   incompatible_with_windows_tls,
 *   # Shard merge does not allow concurrent migrations.
 *   incompatible_with_shard_merge,
 *   requires_majority_read_concern,
 *   requires_persistence,
 *   # The currentOp output field 'lastDurableState' was changed from an enum to a string.
 *   requires_fcv_70,
 *   serverless,
 *   requires_fcv_71,
 * ]
 ','line_number':1,'multiline':True]
['text':' Set up tenant data for the migrations.','line_number':52,'multiline':False]
['text':' Blocks until the migration with index `id` completes (it is supposed to be aborted so','line_number':71,'multiline':False]
['text':' the wait should be short) and creates another migration.','line_number':72,'multiline':False]
['text':' The `currentOp()` seems to be lagging so this condition actually happens.','line_number':82,'multiline':False]
['text':' We simply ignore this condition.','line_number':83,'multiline':False]
['text':' Note: this is not a bug, the code is fast enough to forget, replace Id','line_number':84,'multiline':False]
['text':' and restart the migration with the same name to get a stale currentOp() result','line_number':85,'multiline':False]
['text':' from previous attempt with same name. As we replace UUID() below it is guaranteed','line_number':86,'multiline':False]
['text':' that we do not restart the same migration and 'aborted' state is terminal. The','line_number':87,'multiline':False]
['text':' currentOp() is stale because forgetting the migration only marks it for garbage','line_number':88,'multiline':False]
['text':' collection, which happens later.','line_number':89,'multiline':False]
['text':' Drop recipient DB.','line_number':96,'multiline':False]
['text':' Replace migration UUID.','line_number':105,'multiline':False]
['text':' Old migration needs to be garbage collected before this works.','line_number':107,'multiline':False]
['text':' Start the migrations.','line_number':117,'multiline':False]
['text':' Reduce spam by logging the aborted migration once, also use this flag to abort one migration.','line_number':122,'multiline':False]
['text':' After starting many migrations first time there is no need to check soon.','line_number':135,'multiline':False]
['text':' The second case is when all migrations are already scheduled.','line_number':136,'multiline':False]
['text':' Do not query too often in any case.','line_number':139,'multiline':False]
['text':' Map of sets: key is state, value is set of IDs.','line_number':141,'multiline':False]
['text':' Check if this migration completed after previous check.','line_number':155,'multiline':False]
['text':' Abort a random migration until observed by the `currentOp`.','line_number':179,'multiline':False]
['text':' We only log the small collections to know which ones were stuck.','line_number':195,'multiline':False]
['text':' Wait and forget all migrations.','line_number':201,'multiline':False]
['text':' All migrations should be done, wait.','line_number':203,'multiline':False]
['text':' Forget migrations first before shutting down the test to prevent unnecessary failover','line_number':209,'multiline':False]
['text':' retries.','line_number':210,'multiline':False]
