['text':'*
 * Tests a back-to-back migration scenario where we migrate immediately from replica sets A->B->C.
 * Specifically, this tests that when replica set B has both a recipient and donor access blocker,
 * old reads will continue to be blocked by the recipient access blocker even while it acts as a
 * donor for a newly initiated migration.
 *
 * @tags: [
 *   incompatible_with_macos,
 *   incompatible_with_windows_tls,
 *   requires_majority_read_concern,
 *   requires_persistence,
 *   serverless,
 *   # The error code for a rejected recipient command invoked during the reject phase was changed.
 *   requires_fcv_71,
 * ]
 ','line_number':1,'multiline':True]
['text':' Select a read timestamp < blockTimestamp.','line_number':43,'multiline':False]
['text':' Wait for the migration to complete.','line_number':57,'multiline':False]
['text':' At this point, 'donor2Primary' should have both a recipient and donor access blocker. The donor','line_number':95,'multiline':False]
['text':' access blocker has entered the blocking state, and the recipient access blocker should','line_number':96,'multiline':False]
['text':' still be blocking reads with timestamps < rejectReadsBeforeTimestamp from the previous migration.','line_number':97,'multiline':False]
['text':' Check that the current serverStatus reflects the recipient access blocker.','line_number':99,'multiline':False]
['text':' Get the block timestamp for this new migration.','line_number':113,'multiline':False]
['text':' The donor access blocker should block reads after the blockTimestamp of the new migration.','line_number':123,'multiline':False]
['text':' The recipient access blocker should fail reads before the blockTimestamp of the old migration.','line_number':137,'multiline':False]
