['text':'*
 * Tests aggregation pipeline for cloning oplog chains for retryable writes on the tenant migration
 * donor that committed before a certain donor Timestamp.
 *
 * Relies on MT Migrations implementation details, overall end-to-end behavior of migrating
 * retryable writes is tested elsewhere.
 *
 * @tags: [
 *   incompatible_with_macos,
 *   incompatible_with_windows_tls,
 *   incompatible_with_shard_merge,
 *   requires_majority_read_concern,
 *   requires_persistence,
 *   serverless,
 *   requires_fcv_71,
 * ]
 ','line_number':1,'multiline':True]
['text':' Allow non-timestamped reads on donor after migration completes for testing.','line_number':36,'multiline':False]
['text':' Each retryable insert and update below is identified by a unique 'tag'. This function returns the','line_number':73,'multiline':False]
['text':' value of the 'tag' field inside the 'o' field of the given 'oplogEntry'.','line_number':74,'multiline':False]
['text':' Test batched inserts.','line_number':89,'multiline':False]
['text':' Test batched updates.','line_number':106,'multiline':False]
['text':' Test batched deletes.','line_number':127,'multiline':False]
['text':' Use limit: 1 because multi-deletes are not supported in retryable writes.','line_number':131,'multiline':False]
['text':' Test findAndModify oplog entry without preImageOpTime or postImageOpTime.','line_number':143,'multiline':False]
['text':' Test findAndModify oplog entry with postImageOpTime.','line_number':162,'multiline':False]
['text':' one post-image oplog entry.','line_number':178,'multiline':False]
['text':' Test findAndModify oplog entry with preImageOpTime.','line_number':182,'multiline':False]
['text':' one pre-image oplog entry.','line_number':196,'multiline':False]
['text':' Example oplog entries output for the retryable findAndModify in session 'lsid6' where the first','line_number':199,'multiline':False]
['text':' one is its pre-image oplog entry.','line_number':200,'multiline':False]
['text':' {','line_number':201,'multiline':False]
['text':'     "lsid" : {','line_number':202,'multiline':False]
['text':'         "id" : UUID("99e24c9c-3da0-48dc-9b31-ab72460e666c"),','line_number':203,'multiline':False]
['text':'         "uid" : BinData(0,"47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=")','line_number':204,'multiline':False]
['text':'     },','line_number':205,'multiline':False]
['text':'     "txnNumber" : NumberLong(0),','line_number':206,'multiline':False]
['text':'     "op" : "n",','line_number':207,'multiline':False]
['text':'     "ns" : "<OID>_testDb.testColl",','line_number':208,'multiline':False]
['text':'     "ui" : UUID("1aa099b9-879f-4cd5-b58e-0a654abfeb58"),','line_number':209,'multiline':False]
['text':'     "o" : {','line_number':210,'multiline':False]
['text':'         "_id" : ObjectId("5fa4d04d04c649017b6558ff"),','line_number':211,'multiline':False]
['text':'         "x" : 6,','line_number':212,'multiline':False]
['text':'         "tag" : "retryable findAndModify update"','line_number':213,'multiline':False]
['text':'     },','line_number':214,'multiline':False]
['text':'     "ts" : Timestamp(1604636749, 17),','line_number':215,'multiline':False]
['text':'     "t" : NumberLong(1),','line_number':216,'multiline':False]
['text':'     "wall" : ISODate("2020-11-06T04:25:49.765Z"),','line_number':217,'multiline':False]
['text':'     "v" : NumberLong(2),','line_number':218,'multiline':False]
['text':'     "stmtId" : 0,','line_number':219,'multiline':False]
['text':'     "prevOpTime" : {','line_number':220,'multiline':False]
['text':'         "ts" : Timestamp(0, 0),','line_number':221,'multiline':False]
['text':'         "t" : NumberLong(-1)','line_number':222,'multiline':False]
['text':'     }','line_number':223,'multiline':False]
['text':' },','line_number':224,'multiline':False]
['text':' {','line_number':225,'multiline':False]
['text':'     "lsid" : {','line_number':226,'multiline':False]
['text':'         "id" : UUID("99e24c9c-3da0-48dc-9b31-ab72460e666c"),','line_number':227,'multiline':False]
['text':'         "uid" : BinData(0,"47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=")','line_number':228,'multiline':False]
['text':'     },','line_number':229,'multiline':False]
['text':'     "txnNumber" : NumberLong(0),','line_number':230,'multiline':False]
['text':'     "op" : "d",','line_number':231,'multiline':False]
['text':'     "ns" : "<OID>_testDb.testColl",','line_number':232,'multiline':False]
['text':'     "ui" : UUID("1aa099b9-879f-4cd5-b58e-0a654abfeb58"),','line_number':233,'multiline':False]
['text':'     "o" : {','line_number':234,'multiline':False]
['text':'         "_id" : ObjectId("5fa4d04d04c649017b6558ff")','line_number':235,'multiline':False]
['text':'     },','line_number':236,'multiline':False]
['text':'     "preImageOpTime" : {','line_number':237,'multiline':False]
['text':'         "ts" : Timestamp(1604636749, 17),','line_number':238,'multiline':False]
['text':'         "t" : NumberLong(1)','line_number':239,'multiline':False]
['text':'     },','line_number':240,'multiline':False]
['text':'     "ts" : Timestamp(1604636749, 18),','line_number':241,'multiline':False]
['text':'     "t" : NumberLong(1),','line_number':242,'multiline':False]
['text':'     "wall" : ISODate("2020-11-06T04:25:49.765Z"),','line_number':243,'multiline':False]
['text':'     "v" : NumberLong(2),','line_number':244,'multiline':False]
['text':'     "stmtId" : 0,','line_number':245,'multiline':False]
['text':'     "prevOpTime" : {','line_number':246,'multiline':False]
['text':'         "ts" : Timestamp(0, 0),','line_number':247,'multiline':False]
['text':'         "t" : NumberLong(-1)','line_number':248,'multiline':False]
['text':'     }','line_number':249,'multiline':False]
['text':' }','line_number':250,'multiline':False]
['text':' Wait for recipient to get the startFetchingTimestamp.','line_number':268,'multiline':False]
['text':' Do retryable writes after retrieving startFetchingTimestamp, these writes should not appear in','line_number':271,'multiline':False]
['text':' the oplog buffer in the pre-fetch stage, but should exit after tenant migration is consistent.','line_number':272,'multiline':False]
['text':' Wait for retryable writes to be fetched and inserted into oplog buffer prior to cloning.','line_number':284,'multiline':False]
['text':' Verify that after pre-fetching retryable writes, the entries inserted into the oplog buffer','line_number':292,'multiline':False]
['text':' are equal to the entries on the donor.','line_number':293,'multiline':False]
['text':' Find the returned oplog docs for the session.','line_number':301,'multiline':False]
['text':' Verify the doc corresponds to the right config.transactions entry.','line_number':306,'multiline':False]
['text':' Verify that doc contains the right oplog entry.','line_number':308,'multiline':False]
['text':' Wait for tenant migration to be consistent.','line_number':317,'multiline':False]
['text':' After tenant migration is consistent, the retryable writes done after startFetchingTimestamp','line_number':321,'multiline':False]
['text':' should have been fetched and inserted into the oplog buffer.','line_number':322,'multiline':False]
['text':' Wait for tenant migration to complete successfully.','line_number':331,'multiline':False]
