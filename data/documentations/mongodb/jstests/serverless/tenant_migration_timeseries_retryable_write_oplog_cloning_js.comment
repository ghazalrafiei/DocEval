['text':'*
 * Tests aggregation pipeline for cloning oplog chains for retryable writes on the tenant migration
 * donor that committed before a certain donor Timestamp for time-series collections oplog entries
 * with multiple statement IDs.
 *
 * This test is based on "tenant_migration_retryable_write_retry.js".
 *
 * @tags: [
 *   incompatible_with_macos,
 *   incompatible_with_windows_tls,
 *   requires_majority_read_concern,
 *   requires_persistence,
 *   serverless,
 *   # We assume that all nodes in a mixed-mode replica set are using compressed inserts to
 *   # a time-series collection.
 *   requires_fcv_71,
 * ]
 ','line_number':1,'multiline':True]
['text':' Set the delay before a donor state doc is garbage collected to be short to speed up','line_number':28,'multiline':False]
['text':' the test.','line_number':29,'multiline':False]
['text':' Set the TTL monitor to run at a smaller interval to speed up the test.','line_number':32,'multiline':False]
['text':' Each retryable insert and update below is identified by a unique 'tag'. This function returns','line_number':80,'multiline':False]
['text':' the value of the 'tag' field inside the 'o' field of the given 'oplogEntry'.','line_number':81,'multiline':False]
['text':' With the feature flag enabled, the behavior of updates is changed. They are now','line_number':89,'multiline':False]
['text':' compressed, and also full replacements. We can decompress to inspect the op in','line_number':90,'multiline':False]
['text':' this case.','line_number':91,'multiline':False]
['text':' Test batched inserts resulting in "insert" oplog entries.','line_number':109,'multiline':False]
['text':' Test batched inserts resulting in "update" oplog entries.','line_number':113,'multiline':False]
['text':' Test the aggregation pipeline the recipient would use for getting the oplog chain where','line_number':139,'multiline':False]
['text':' "ts" < "startFetchingOpTime" for all retryable writes entries in config.transactions. The','line_number':140,'multiline':False]
['text':' recipient would use the real "startFetchingOpTime", but this test uses the donor's commit','line_number':141,'multiline':False]
['text':' timestamp as a substitute.','line_number':142,'multiline':False]
['text':' Make sure this write is in the majority snapshot.','line_number':148,'multiline':False]
['text':' The aggregation pipeline will return an array of retryable writes oplog entries (pre-image/','line_number':157,'multiline':False]
['text':' post-image oplog entries included) with "ts" < "startFetchingTimestamp" and sorted in','line_number':158,'multiline':False]
['text':' ascending order of "ts".','line_number':159,'multiline':False]
['text':' Fetch the config.transactions entries that do not have a "state" field, which indicates a','line_number':163,'multiline':False]
['text':' retryable write.','line_number':164,'multiline':False]
['text':' Fetch latest oplog entry for each config.transactions entry from the oplog view.','line_number':166,'multiline':False]
['text':' This array is expected to contain exactly one element if `ns` contains','line_number':183,'multiline':False]
['text':' `kTenantId`. Otherwise, it will be empty.','line_number':184,'multiline':False]
['text':' Entries that don't have the correct `ns` will return an empty `lastOps` array. Filter','line_number':187,'multiline':False]
['text':' these results before the next stage.','line_number':188,'multiline':False]
['text':' All remaining results should correspond to the correct `kTenantId`. Replace the','line_number':190,'multiline':False]
['text':' single-element 'lastOps' array field with a single 'lastOp' field.','line_number':191,'multiline':False]
['text':' Fetch preImage oplog entry for findAndModify from the oplog view.','line_number':194,'multiline':False]
['text':' This array is expected to contain exactly one element if the 'preImageOpTime'','line_number':199,'multiline':False]
['text':' field is not null.','line_number':200,'multiline':False]
['text':' Fetch postImage oplog entry for findAndModify from the oplog view.','line_number':203,'multiline':False]
['text':' This array is expected to contain exactly one element if the 'postImageOpTime'','line_number':208,'multiline':False]
['text':' field is not null.','line_number':209,'multiline':False]
['text':' Fetch oplog entries in each chain for insert, update, or delete from the oplog view.','line_number':212,'multiline':False]
['text':' Now that we have the whole chain, filter out entries that occurred after','line_number':221,'multiline':False]
['text':' `startFetchingTimestamp`, since these entries will be fetched during the oplog fetching','line_number':222,'multiline':False]
['text':' phase.','line_number':223,'multiline':False]
['text':' Sort the oplog entries in each oplog chain.','line_number':232,'multiline':False]
['text':' Combine the oplog entries.','line_number':250,'multiline':False]
['text':' Fetch the complete oplog entries and unwind oplog entries in each chain to the top-level','line_number':252,'multiline':False]
['text':' array.','line_number':253,'multiline':False]
['text':' This array is expected to contain exactly one element.','line_number':258,'multiline':False]
['text':' Unwind oplog entries in each chain to the top-level array.','line_number':261,'multiline':False]
['text':' Verify that the aggregation command returned the expected number of oplog entries.','line_number':269,'multiline':False]
['text':' Verify that the oplog docs are sorted in ascending order of "ts".','line_number':272,'multiline':False]
['text':' Verify the number of statement ids is correct.','line_number':279,'multiline':False]
