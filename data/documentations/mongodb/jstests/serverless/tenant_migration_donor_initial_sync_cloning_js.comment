['text':'*
 * Tests that during tenant migration, when the migration has reached but not completed the
 * migration committed state, a new node added to the donor replica set is still able to
 * successfully complete initial sync.
 *
 * @tags: [
 *    # Running tenant migrations on macOS depends on plumbing transient SSL params through the
 *    # Apple SSL manager (see SERVER-56100).
 *      incompatible_with_macos,
 *    # Shard merge not resilient to failover, which will be caused by issuing startClean on an
 *    # existing node to force an initial sync.
 *      incompatible_with_shard_merge,
 *    # Running tenant migrations on Windows with TLS depends on plumbing transient SSL params
 *    # through the Windows SSL manager (see SERVER-53883 and SERVER-53763).
 *      incompatible_with_windows_tls,
 *    # failpoint pauseTenantMigrationBeforeLeavingCommittedState only exists on the latest branch.
 *      requires_fcv_60,
 *    # Tenant migrations will not be run with enableMajorityReadConcern=false in production.
 *      requires_majority_read_concern,
 *    # Tenant migrations will not be run with the inMemory storage engine in production.
 *      requires_persistence,
 *    # Tenant migrations are only used in serverless.
 *      serverless,
 *   requires_fcv_71,
 * ]
 ','line_number':1,'multiline':True]
['text':' turn off tenantMigrationDonorAllowsNonTimestampedReads fp','line_number':40,'multiline':False]
['text':' This test does the following:','line_number':43,'multiline':False]
['text':' 1. Configures a failpoint on the donor primary','line_number':44,'multiline':False]
['text':' 2. Starts a tenant migration.','line_number':45,'multiline':False]
['text':' 3. Waits for the donor failpoint to be hit. Restarts a node to undergo initial sync.','line_number':46,'multiline':False]
['text':' 4. Makes sure the initial sync completes successfully','line_number':47,'multiline':False]
['text':' 5. Releases the donor failpoint, and allows the migration to complete.','line_number':48,'multiline':False]
['text':' In order to validate the fix, we want to ensure we hit a server failpoint that will cause an','line_number':64,'multiline':False]
['text':' error should the fix be bypassed/fail.  Since initial sync does not produce a readTimestamp, this','line_number':65,'multiline':False]
['text':' means hitting the BlockerState::State::kRejected in order to generate an error in','line_number':66,'multiline':False]
['text':' getCanReadFuture, which can only happen after the state doc has been updated to kCommitted.','line_number':67,'multiline':False]
['text':' Restart a node and allow it to undergo initial sync.','line_number':79,'multiline':False]
['text':' Allow the new node to finish initial sync.','line_number':85,'multiline':False]
['text':' reenable tenantMigrationDonorAllowsNonTimestampedReads to allow us to read from both nodes','line_number':95,'multiline':False]
['text':' without hitting reroute errors','line_number':96,'multiline':False]
['text':' Make sure the documents on the new node matches that on the donor primary','line_number':102,'multiline':False]
['text':' Allow the migration to run to completion.','line_number':112,'multiline':False]
