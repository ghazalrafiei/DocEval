['text':'*
 * Tests that for large transactions that involve multiple applyOps oplog entries, as long as the
 * donor manages to reserve oplog slots for the operations inside transaction before the migration
 * starts blocking writes, the donor will successfully write all the applyOps oplog entries to
 * commit the transaction even if the migration enters the blocking state while the applyOps oplog
 * entries are being written.
 *
 * @tags: [
 *   incompatible_with_macos,
 *   incompatible_with_windows_tls,
 *   requires_majority_read_concern,
 *   requires_persistence,
 *   serverless,
 *   requires_fcv_71,
 * ]
 ','line_number':1,'multiline':True]
['text':'*
 * Runs a large transaction (>16MB) on the given collection name that requires two applyOps oplog
 * entries and asserts that it commits successfully.
 ','line_number':33,'multiline':True]
['text':'*
     * Returns a doc of size 'numMB'.
     ','line_number':38,'multiline':True]
['text':' Start a migration, and pause it after the donor has majority-committed the initial state doc.','line_number':65,'multiline':False]
['text':' Run a large transaction (>16MB) that will write two applyOps oplog entries. Pause','line_number':72,'multiline':False]
['text':' commitTransaction after it has reserved oplog slots for the applyOps oplog entries and has','line_number':73,'multiline':False]
['text':' written the first one.','line_number':74,'multiline':False]
['text':' Allow the migration to move to the blocking state and commit.','line_number':81,'multiline':False]
['text':' Verify that the transaction commits successfully since both applyOps have oplog timestamp <','line_number':90,'multiline':False]
['text':' blockingTimestamp .','line_number':91,'multiline':False]
