['text':'*
 * Tests if the recipient is rolled back well after a migration has been committed, the tenant
 * migration recipient access blocker is initialized in the correct state.
 *
 * @tags: [
 *   incompatible_with_macos,
 *   # Shard merge protocol will be tested by
 *   # tenant_migration_shard_merge_recipient_access_blocker_rollback.js.
 *   incompatible_with_shard_merge,
 *   incompatible_with_windows_tls,
 *   requires_majority_read_concern,
 *   requires_persistence,
 *   serverless,
 *   requires_fcv_71,
 * ]
 ','line_number':1,'multiline':True]
['text':' This test case','line_number':41,'multiline':False]
['text':' 1) Completes and commits a tenant migration. Then forgets the migration (state doc marked with','line_number':42,'multiline':False]
['text':'    'expireAt', but not yet deleted.)','line_number':43,'multiline':False]
['text':' 2) Waits until the replica set is stable.','line_number':44,'multiline':False]
['text':' 3) Rolls back the primary. This makes the primary recover its tenant migration access blockers.','line_number':45,'multiline':False]
['text':' 4) Ensures that a read is possible from the primary.','line_number':46,'multiline':False]
['text':' Populate the donor side with data.','line_number':61,'multiline':False]
['text':' Complete and commit the migration, and then forget it as well.','line_number':73,'multiline':False]
['text':' It should be possible to read from the recipient now.','line_number':80,'multiline':False]
['text':' Prepare the recipient primary for rollback, by inserting non-tenant related data on it while','line_number':89,'multiline':False]
['text':' replication has been halted.','line_number':90,'multiline':False]
['text':' Stepping up one of the secondaries should cause the original primary to rollback.','line_number':95,'multiline':False]
['text':' This test case:','line_number':113,'multiline':False]
['text':' 1) Sets the replica set up such that the migration has already been committed and forgotten, and','line_number':114,'multiline':False]
['text':'    the state doc has been deleted as well.','line_number':115,'multiline':False]
['text':' 2) Sends a 'recipientForgetMigration' command to the recipient primary, and waits for the state','line_number':116,'multiline':False]
['text':'    doc to persist.','line_number':117,'multiline':False]
['text':' 3) Performs a rollback on the recipient primary, so that the access blockers are reconstructed.','line_number':118,'multiline':False]
['text':' 4) Performs a read on the recipient primary.','line_number':119,'multiline':False]
['text':' We will have the tenant database already on the recipient, as though the tenant migration has','line_number':135,'multiline':False]
['text':' already run to completion, and the state document has been cleaned up already.','line_number':136,'multiline':False]
['text':' Prevent the "expireAt" field from being populated.','line_number':141,'multiline':False]
['text':' Prevent the new primary from marking the state document as garbage collectable.','line_number':143,'multiline':False]
['text':' We need to handle network errors as this thread might race with rollback.','line_number':158,'multiline':False]
['text':' Run a delayed/retried recipientForgetMigration command after the state doc has been deleted.','line_number':173,'multiline':False]
['text':' It should be possible to read from the recipient now.','line_number':180,'multiline':False]
['text':' Now perform a rollback on the recipient primary.','line_number':183,'multiline':False]
['text':' Stepping up one of the secondaries should cause the original primary to rollback.','line_number':192,'multiline':False]
['text':' It should be possible to read from new recipient primary.','line_number':198,'multiline':False]
