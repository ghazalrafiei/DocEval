['text':'*
 * Tests that the tenant migration recipient correctly fetches retryable writes oplog entries
 * and adds them to its oplog buffer.
 *
 * @tags: [
 *   incompatible_with_macos,
 *   incompatible_with_windows_tls,
 *   requires_majority_read_concern,
 *   requires_persistence,
 *   serverless,
 *   requires_fcv_71,
 * ]
 ','line_number':1,'multiline':True]
['text':' Decrease internal max batch size so we can still show writes are batched without','line_number':30,'multiline':False]
['text':' inserting hundreds of documents.','line_number':31,'multiline':False]
['text':' Create a collection on a database that isn't prefixed with `kTenantId`.','line_number':57,'multiline':False]
['text':' Retryable insert, but not on correct tenant database. This write should not show up in the','line_number':65,'multiline':False]
['text':' oplog buffer for the tenant migration protocol. It will however for the shard merge protocol.','line_number':66,'multiline':False]
['text':' The following retryable writes should occur on the correct tenant database, so they should','line_number':69,'multiline':False]
['text':' all be retrieved by the pipeline.','line_number':70,'multiline':False]
['text':' Retryable write with `postImageOpTime`.','line_number':73,'multiline':False]
['text':' Shard merge needs both tenants otherwise it will fail when it receives data for an','line_number':83,'multiline':False]
['text':' unknown tenant.','line_number':84,'multiline':False]
['text':' Use `hangDuringBatchInsert` on the donor to hang after the first batch of a bulk insert. The','line_number':91,'multiline':False]
['text':' first batch only has one write and its `lastWriteOpTime` should be before','line_number':92,'multiline':False]
['text':' `startFetchingDonorOpTime`.','line_number':93,'multiline':False]
['text':' Insert elements [{_id: bulkRetryableWrite0}, {_id: bulkRetryableWrite1}].','line_number':97,'multiline':False]
['text':' Use `fpAfterRetrievingStartOpTimesMigrationRecipientInstance` to hang after obtaining','line_number':111,'multiline':False]
['text':' `startFetchingDonorOpTime`.','line_number':112,'multiline':False]
['text':' Use `fpAfterFetchingRetryableWritesEntriesBeforeStartOpTime` to hang after populating the','line_number':118,'multiline':False]
['text':' oplog buffer.','line_number':119,'multiline':False]
['text':' After we've calculated `startFetchingDonorOpTime`, allow the bulk insert to complete its','line_number':129,'multiline':False]
['text':' second batch, which only has one write. This write should have a `lastWriteOpTime` after','line_number':130,'multiline':False]
['text':' `startFetchingDonorOpTime`.','line_number':131,'multiline':False]
['text':' Now, we've created a retryable writes chain where write1TS < startFetchingTS < write2TS. We','line_number':132,'multiline':False]
['text':' must fetch the entry that occurred before `startFetchingDonorOpTime` (write1) and discard the','line_number':133,'multiline':False]
['text':' one that occurred after (write2).','line_number':134,'multiline':False]
['text':' Do a retryable write on the donor after hitting `fpAfterRetrievingStartOpTime` so that its','line_number':138,'multiline':False]
['text':' `lastWriteOpTime` is after `startFetchingDonorOpTime`. The corresponding oplog entries should','line_number':139,'multiline':False]
['text':' not be added to the oplog buffer.','line_number':140,'multiline':False]
['text':' Test that when a post image op's `postImageOpTime` is after `startFetchingDonorOpTime`, it','line_number':144,'multiline':False]
['text':' gets filtered out.','line_number':145,'multiline':False]
['text':' Test that when a pre image op's `preImageOpTime` is after `startFetchingDonorOpTime`, it gets','line_number':153,'multiline':False]
['text':' filtered out.','line_number':154,'multiline':False]
['text':' We expect to see retryableWrite2, retryableWrite3, retryableWrite3's postImage,','line_number':165,'multiline':False]
['text':' and bulkRetryableWrite0 (bulk insert batch size is 1).','line_number':166,'multiline':False]
['text':' Only for shardMerge we expect to have the other tenantId. Otherwise only for the provided','line_number':172,'multiline':False]
['text':' tenantId.','line_number':173,'multiline':False]
['text':' Ensure the retryable write oplog entries that should not be in `kOplogBufferNS` are in fact','line_number':177,'multiline':False]
['text':' not.','line_number':178,'multiline':False]
