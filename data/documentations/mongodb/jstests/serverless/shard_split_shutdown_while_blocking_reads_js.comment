['text':'*
 * Tests that shard split donor can peacefully shut down when there are reads being blocked due
 * to an in-progress split.
 *
 * @tags: [
 *   incompatible_with_eft,
 *   incompatible_with_macos,
 *   incompatible_with_windows_tls,
 *   requires_majority_read_concern,
 *   requires_persistence,
 *   serverless,
 *   requires_fcv_63
 * ]
 ','line_number':1,'multiline':True]
['text':' We expect the splitThread to throw an unhandled exception related to network. We want to catch it','line_number':36,'multiline':False]
['text':' and test that the exception is the network exception we expect.','line_number':37,'multiline':False]
['text':' The primary will shut down and might throw an unhandled exception that needs to be caught by','line_number':48,'multiline':False]
['text':' our test to verify that we indeed failed with the expected network errors.','line_number':49,'multiline':False]
['text':' In some cases (ASAN builds) we could end up closing the connection before stopping the','line_number':54,'multiline':False]
['text':' worker thread. This race condition would result in HostUnreachable instead of','line_number':55,'multiline':False]
['text':' InterruptedAtShutdown. Since the error is uncaught we need to catch it here.','line_number':56,'multiline':False]
['text':' Shut down the donor after the read starts blocking.','line_number':62,'multiline':False]
['text':' Shut down all the other nodes.','line_number':69,'multiline':False]
