['text':'*
 * Starts a tenant migration that aborts, either due to the
 * abortTenantMigrationBeforeLeavingBlockingState failpoint or due to receiving donorAbortMigration,
 * and then issues a donorForgetMigration command. Finally, starts a second tenant migration with
 * the same tenantId as the aborted migration, and expects this second migration to go through.
 *
 * @tags: [
 *   incompatible_with_macos,
 *   incompatible_with_windows_tls,
 *   requires_majority_read_concern,
 *   requires_persistence,
 *   serverless,
 *   requires_fcv_71,
 * ]
 ','line_number':1,'multiline':True]
['text':' Start a migration with the "abortTenantMigrationBeforeLeavingBlockingState" failPoint','line_number':36,'multiline':False]
['text':' enabled. The migration will abort as a result, and a status of "kAborted" should be returned.','line_number':37,'multiline':False]
['text':' Forget the aborted migration.','line_number':48,'multiline':False]
['text':' Try running a new migration with the same tenantId. It should succeed, since the previous','line_number':52,'multiline':False]
['text':' migration with the same tenantId was aborted.','line_number':53,'multiline':False]
['text':' retryOnRetryableErrors ','line_number':81,'multiline':True]
['text':' Wait for donorAbortMigration command to start.','line_number':84,'multiline':False]
['text':' Forget the aborted migration.','line_number':100,'multiline':False]
['text':' Try running a new migration with the same tenantId. It should succeed, since the previous','line_number':104,'multiline':False]
['text':' migration with the same tenantId was aborted.','line_number':105,'multiline':False]
