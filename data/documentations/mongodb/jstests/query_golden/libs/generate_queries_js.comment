['text':'*
 * Helper functions for generating of queries over a collection.
 ','line_number':1,'multiline':True]
['text':'*
 * Generates predicates with comparison operators for the given field and boundary values.
 * We want to cover all comparisons and multiple values in the field domain. To avoid combinatoric
 * explosion in the number of predicates we create all comparison predicates only for 25% of the
 * query values, while for the other 75% we pick one comparison operator in a round-robin fashion.
 ','line_number':15,'multiline':True]
['text':' Index over boundaries.','line_number':24,'multiline':False]
['text':' Index over comparison operators.','line_number':26,'multiline':False]
['text':'*
 * Produces a string value at some distance from the argument string.
 * distance: "small", "middle", "large".
 ','line_number':72,'multiline':True]
['text':'char distance','line_number':92,'multiline':True]
['text':'*
 * Helper function to generate an array of query ranges given an array of boundary values. The
 * 'rangeSize' parameter determines the size of the ranges and varies depending on the 'fieldType'.
 * For fieldType integer 'rangeSize' is the amount to add to the low bound to compute the upper
 * bound. For fieldType string 'rangeSize' is one of "small", "medium", "large". For other data
 * types both low and upper bounds are taken from the 'values' array and rangeSize is the distance
 * they are apart from each other.
 ','line_number':105,'multiline':True]
['text':' For other data types use the values array to form the ranges.','line_number':138,'multiline':False]
['text':'*
 * Split an ordered array of values into sub-arrays of the same type.
 * Example: [0, 25, 'an', 'mac', 'zen'] -> [[0, 25], ['an', 'mac', 'zen']].
 ','line_number':154,'multiline':True]
