['text':'*
 * $group stages with no accumulators or with only $first or only $last accumulators can sometimes
 * be converted into a DISTINCT_SCAN (see SERVER-9507 and SERVER-37304). This optimization
 * potentially applies to a $group when it begins the pipeline or when it is preceded only by one or
 * both of $match and $sort (in that order). In all cases, it must be possible to do a DISTINCT_SCAN
 * that sees each value of the distinct field exactly once among matching documents and also
 * provides any requested sort. The test queries below show most $match/$sort/$group combinations
 * where that is possible.
 *
 * @tags: [
 *   # The sharding and $facet passthrough suites modifiy aggregation pipelines in a way that
 *   # prevents the DISTINCT_SCAN optimization from being applied, which breaks the test.
 *   assumes_unsharded_collection,
 *   do_not_wrap_aggregations_in_facets,
 *   # Index filter commands do not support causal consistency.
 *   does_not_support_causal_consistency,
 *   requires_fcv_63,
 *   not_allowed_with_signed_security_token,
 * ]
 ','line_number':1,'multiline':True]
['text':' Add test data and indexes. Fields prefixed with "mk" are multikey.','line_number':27,'multiline':False]
['text':' Helper for dropping an index and removing it from the list of indexes.','line_number':77,'multiline':False]
['text':' Check that 'pipeline' returns the correct results with and without a hint added to the query.','line_number':88,'multiline':False]
['text':' We also test with and without indices to check all the possibilities. 'options' is the','line_number':89,'multiline':False]
['text':' options to pass to aggregate() and may be omitted. Similarly, the hint object can be omitted','line_number':90,'multiline':False]
['text':' and will default to a $natural hint.','line_number':91,'multiline':False]
['text':' Pipelines that use the DISTINCT_SCAN optimization should not also have a blocking sort.','line_number':119,'multiline':False]
['text':'','line_number':157,'multiline':False]
['text':' Verify that a $sort-$group pipeline can use DISTINCT_SCAN when the sort is available from an','line_number':158,'multiline':False]
['text':' index.','line_number':159,'multiline':False]
['text':'','line_number':160,'multiline':False]
['text':'','line_number':167,'multiline':False]
['text':' Verify that a $group pipeline can use DISTINCT_SCAN even when the user does not specify a','line_number':168,'multiline':False]
['text':' sort.','line_number':169,'multiline':False]
['text':'','line_number':170,'multiline':False]
['text':'','line_number':182,'multiline':False]
['text':' Verify that a $group pipeline with a $natural hint does not use DISTINCT_SCAN.','line_number':183,'multiline':False]
['text':'','line_number':184,'multiline':False]
['text':'','line_number':192,'multiline':False]
['text':' Verify that a $group pipeline with a pertinent hint as string does use DISTINCT_SCAN.','line_number':193,'multiline':False]
['text':'','line_number':194,'multiline':False]
['text':'','line_number':202,'multiline':False]
['text':' Verify that a $group pipeline with a pertinent hint as an object does use DISTINCT_SCAN.','line_number':203,'multiline':False]
['text':'','line_number':204,'multiline':False]
['text':'','line_number':212,'multiline':False]
['text':' Verify that a $group pipeline with a non-pertinent hint does not use DISTINCT_SCAN.','line_number':213,'multiline':False]
['text':'','line_number':214,'multiline':False]
['text':'','line_number':222,'multiline':False]
['text':' Verify that a $group pipeline with an index filter still uses DISTINCT_SCAN.','line_number':223,'multiline':False]
['text':'','line_number':224,'multiline':False]
['text':'','line_number':238,'multiline':False]
['text':' Verify that a $group pipeline with an index filter and $natural hint uses DISTINCT_SCAN.','line_number':239,'multiline':False]
['text':'','line_number':240,'multiline':False]
['text':'','line_number':249,'multiline':False]
['text':' Verify that a $group pipeline with an index filter and non-pertinent hint uses DISTINCT_SCAN.','line_number':250,'multiline':False]
['text':'','line_number':251,'multiline':False]
['text':'','line_number':263,'multiline':False]
['text':' Verify that a $sort-$group pipeline _does not_ use a DISTINCT_SCAN on a multikey field.','line_number':264,'multiline':False]
['text':'','line_number':265,'multiline':False]
['text':'','line_number':272,'multiline':False]
['text':' Verify that a $sort-$group pipeline can use DISTINCT_SCAN when the sort is available from an','line_number':273,'multiline':False]
['text':' index and there are $first accumulators.','line_number':274,'multiline':False]
['text':'','line_number':275,'multiline':False]
['text':'','line_number':282,'multiline':False]
['text':' Verify that a $sort-$group pipeline can use DISTINCT_SCAN when the sort is available from an','line_number':283,'multiline':False]
['text':' index and there are $last accumulators.','line_number':284,'multiline':False]
['text':'','line_number':285,'multiline':False]
['text':'','line_number':292,'multiline':False]
['text':' Verify that a $sort-$group pipeline can use DISTINCT_SCAN when a $first accumulator needs the','line_number':293,'multiline':False]
['text':' entire document.','line_number':294,'multiline':False]
['text':'','line_number':295,'multiline':False]
['text':'','line_number':306,'multiline':False]
['text':' Verify that a $sort-$group pipeline can use DISTINCT_SCAN when a $last accumulator needs the','line_number':307,'multiline':False]
['text':' entire document.','line_number':308,'multiline':False]
['text':'','line_number':309,'multiline':False]
['text':'','line_number':320,'multiline':False]
['text':' Verify that a $sort-$group pipeline can use DISTINCT_SCAN when sorting and grouping by fields','line_number':321,'multiline':False]
['text':' with dotted paths.','line_number':322,'multiline':False]
['text':'','line_number':323,'multiline':False]
['text':'','line_number':340,'multiline':False]
['text':' Verify that a $group pipeline can use DISTINCT_SCAN to group on a dotted path field, even','line_number':341,'multiline':False]
['text':' when the user does not specify a sort.','line_number':342,'multiline':False]
['text':'','line_number':343,'multiline':False]
['text':'','line_number':350,'multiline':False]
['text':' Verify that we _do not_ attempt to use a DISTINCT_SCAN on a multikey field.','line_number':351,'multiline':False]
['text':'','line_number':352,'multiline':False]
['text':'','line_number':359,'multiline':False]
['text':' Verify that we may not use a DISTINCT_SCAN on a dotted field when the last component','line_number':360,'multiline':False]
['text':' is not multikey, but an intermediate component is.','line_number':361,'multiline':False]
['text':'','line_number':362,'multiline':False]
['text':'','line_number':374,'multiline':False]
['text':' Verify that we _do not_ attempt to use a DISTINCT_SCAN on a multikey dotted-path field when','line_number':375,'multiline':False]
['text':' a sort is present.','line_number':376,'multiline':False]
['text':'','line_number':377,'multiline':False]
['text':'','line_number':406,'multiline':False]
['text':' Verify that we use a DISTINCT_SCAN to satisfy a sort on a multikey field if the bounds','line_number':407,'multiline':False]
['text':' are [minKey, maxKey].','line_number':408,'multiline':False]
['text':'','line_number':409,'multiline':False]
['text':'','line_number':434,'multiline':False]
['text':' Verify that we _do not_ attempt a DISTINCT_SCAN because "mkB" is multikey, and we don't use','line_number':435,'multiline':False]
['text':' DISTINCT_SCAN for a compound group key.','line_number':436,'multiline':False]
['text':'','line_number':437,'multiline':False]
['text':'','line_number':445,'multiline':False]
['text':' Verify that with dotted paths we use a DISTINCT_SCAN to satisfy a sort on a multikey field if the','line_number':446,'multiline':False]
['text':' bounds are [minKey, maxKey].','line_number':447,'multiline':False]
['text':'','line_number':448,'multiline':False]
['text':'','line_number':472,'multiline':False]
['text':' Verify that we _do not_ attempt a DISTINCT_SCAN to satisfy a sort on a multikey field if','line_number':473,'multiline':False]
['text':' the bounds are not [minKey, maxKey].','line_number':474,'multiline':False]
['text':'','line_number':475,'multiline':False]
['text':' Repeat above tests for $last.','line_number':496,'multiline':False]
['text':'','line_number':518,'multiline':False]
['text':' Verify that with dotted paths we _do not_ attempt a DISTINCT_SCAN to satisfy a sort on a','line_number':519,'multiline':False]
['text':' multikey field if the bounds are not [minKey, maxKey].','line_number':520,'multiline':False]
['text':'','line_number':521,'multiline':False]
['text':'','line_number':544,'multiline':False]
['text':' Verify that we can use a DISTINCT_SCAN on a multikey index to sort and group on a dotted-path','line_number':545,'multiline':False]
['text':' field, so long as the field we are sorting over is not multikey and comes before any multikey','line_number':546,'multiline':False]
['text':' fields in the index key pattern.','line_number':547,'multiline':False]
['text':'','line_number':548,'multiline':False]
['text':' We drop the {"foo.a": 1, "foo.b": 1} to force this test to use the multikey','line_number':549,'multiline':False]
['text':' {"foo.a": 1, "mkFoo.b"} index. The rest of the test doesn't use either of those indexes.','line_number':550,'multiline':False]
['text':'','line_number':551,'multiline':False]
['text':'','line_number':560,'multiline':False]
['text':' Verify that a $sort-$group pipeline can use DISTINCT_SCAN even when there is a $first','line_number':561,'multiline':False]
['text':' accumulator that accesses a multikey field.','line_number':562,'multiline':False]
['text':'','line_number':563,'multiline':False]
['text':'','line_number':570,'multiline':False]
['text':' Verify that a $sort-$group pipeline can use DISTINCT_SCAN when there is a $last','line_number':571,'multiline':False]
['text':' accumulator that accesses a multikey field, provided that field is not part of the index.','line_number':572,'multiline':False]
['text':'','line_number':573,'multiline':False]
['text':'','line_number':580,'multiline':False]
['text':' Verify that a $sort-$group pipeline can use DISTINCT_SCAN even when there is a $first','line_number':581,'multiline':False]
['text':' accumulator that includes an expression.','line_number':582,'multiline':False]
['text':'','line_number':583,'multiline':False]
['text':'','line_number':590,'multiline':False]
['text':' Verify that a $sort-$group pipeline can use DISTINCT_SCAN even when there is a $last','line_number':591,'multiline':False]
['text':' accumulator that includes an expression.','line_number':592,'multiline':False]
['text':'','line_number':593,'multiline':False]
['text':'','line_number':600,'multiline':False]
['text':' Verify that a $match-$sort-$group pipeline can use a DISTINCT_SCAN to sort and group by a','line_number':601,'multiline':False]
['text':' field that is not the first field in a compound index, so long as the previous fields are','line_number':602,'multiline':False]
['text':' scanned with equality bounds (i.e., are point queries).','line_number':603,'multiline':False]
['text':'','line_number':604,'multiline':False]
['text':'','line_number':611,'multiline':False]
['text':' Same as the previous case but with the sort order matching the index key pattern, so the','line_number':612,'multiline':False]
['text':' query planner does not need to infer the availability of a sort on {b: 1} based on the','line_number':613,'multiline':False]
['text':' equality bounds for the 'a field.','line_number':614,'multiline':False]
['text':'','line_number':615,'multiline':False]
['text':'','line_number':622,'multiline':False]
['text':' Same as the previous case but with no user-specified sort.','line_number':623,'multiline':False]
['text':'','line_number':624,'multiline':False]
['text':'','line_number':631,'multiline':False]
['text':' Verify that a $match-$sort-$group pipeline _does not_ use a DISTINCT_SCAN to sort and group','line_number':632,'multiline':False]
['text':' on the second field of an index when there is no equality match on the first field.','line_number':633,'multiline':False]
['text':'','line_number':634,'multiline':False]
['text':'','line_number':641,'multiline':False]
['text':' Verify that a $match-$sort-$limit-$group pipeline _does not_ coalesce the $sort-$limit and','line_number':642,'multiline':False]
['text':' then consider the result eligible for the DISTINCT_SCAN optimization.','line_number':643,'multiline':False]
['text':'','line_number':644,'multiline':False]
['text':' In this example, the {$limit: 3} filters out the document {a: 1, b: 3, c: 2}, which means we','line_number':645,'multiline':False]
['text':' don't see a {_id: 3} group. If we instead applied the {$limit: 3} after the $group stage, we','line_number':646,'multiline':False]
['text':' would incorrectly list three groups. DISTINCT_SCAN won't work here, because we have to','line_number':647,'multiline':False]
['text':' examine each document in order to determine which groups get filtered out by the $limit.','line_number':648,'multiline':False]
['text':'','line_number':649,'multiline':False]
['text':'','line_number':656,'multiline':False]
['text':' Verify that an additional $project stage does not lead to incorrect results (although it will','line_number':657,'multiline':False]
['text':' preclude the use of the DISTINCT_SCAN optimization).','line_number':658,'multiline':False]
['text':'','line_number':659,'multiline':False]
['text':'','line_number':667,'multiline':False]
['text':' Verify that a $sort-$group can use a DISTINCT_SCAN even when the requested sort is the','line_number':668,'multiline':False]
['text':' reverse of the index's sort.','line_number':669,'multiline':False]
['text':'','line_number':670,'multiline':False]
['text':'','line_number':683,'multiline':False]
['text':' Verify that a $sort-$group pipeline _does not_ use DISTINCT_SCAN when there are non-$first/$last','line_number':684,'multiline':False]
['text':' accumulators.','line_number':685,'multiline':False]
['text':'','line_number':686,'multiline':False]
['text':'','line_number':693,'multiline':False]
['text':' Verify that a $sort-$group pipeline _does not_ use DISTINCT_SCAN when there are both $first and','line_number':694,'multiline':False]
['text':' $last accumulators.','line_number':695,'multiline':False]
['text':'','line_number':696,'multiline':False]
['text':'','line_number':703,'multiline':False]
['text':' Verify that a $sort-$group pipeline with multiple $first accumulators uses DISTINCT_SCAN.','line_number':704,'multiline':False]
['text':'','line_number':705,'multiline':False]
['text':'','line_number':722,'multiline':False]
['text':' Verify that a $sort-$group pipeline with multiple $last accumulators uses DISTINCT_SCAN.','line_number':723,'multiline':False]
['text':'','line_number':724,'multiline':False]
['text':'','line_number':743,'multiline':False]
['text':' Verify that a $sort-$group pipeline _does not_ use DISTINCT_SCAN when documents are not','line_number':744,'multiline':False]
['text':' sorted by the field used for grouping.','line_number':745,'multiline':False]
['text':'','line_number':746,'multiline':False]
['text':'','line_number':759,'multiline':False]
['text':' Verify that a $match-$sort-$group pipeline _does not_ use a DISTINCT_SCAN when the match does','line_number':760,'multiline':False]
['text':' not provide equality (point query) bounds for each field before the grouped-by field in the','line_number':761,'multiline':False]
['text':' index.','line_number':762,'multiline':False]
['text':'','line_number':763,'multiline':False]
['text':'','line_number':770,'multiline':False]
['text':' Verify that a $sort-$group pipeline with a $first accumulator can use DISTINCT_SCAN, even when','line_number':771,'multiline':False]
['text':' the group _id field is a singleton object instead of a fieldPath.','line_number':772,'multiline':False]
['text':'','line_number':773,'multiline':False]
['text':'','line_number':781,'multiline':False]
['text':' Verify that a $sort-$group pipeline with a $last accumulator can use DISTINCT_SCAN, even when','line_number':782,'multiline':False]
['text':' the group _id field is a singleton object instead of a fieldPath.','line_number':783,'multiline':False]
['text':'','line_number':784,'multiline':False]
['text':'//////////////////////////////////////////////////////////////////////////////////////////////','line_number':791,'multiline':False]
['text':' We execute all the collation-related tests three times with three different configurations','line_number':792,'multiline':False]
['text':' (no index, index without collation, index with collation).','line_number':793,'multiline':False]
['text':'','line_number':794,'multiline':False]
['text':' Collation tests 1: no index on string field.','line_number':795,'multiline':False]
['text':'//////////////////////////////////////////////////////////////////////////////////////////////','line_number':796,'multiline':False]
['text':'','line_number':802,'multiline':False]
['text':' Verify that a $group on an unindexed field uses a collection scan.','line_number':803,'multiline':False]
['text':'','line_number':804,'multiline':False]
['text':'','line_number':811,'multiline':False]
['text':' Verify that a collated $group on an unindexed field uses a collection scan.','line_number':812,'multiline':False]
['text':'','line_number':813,'multiline':False]
['text':'','line_number':821,'multiline':False]
['text':' Verify that a $sort-$group pipeline uses a collection scan.','line_number':822,'multiline':False]
['text':'','line_number':823,'multiline':False]
['text':'','line_number':848,'multiline':False]
['text':' Verify that a collated $sort-$group pipeline with a $first accumulator uses a collection','line_number':849,'multiline':False]
['text':' scan.','line_number':850,'multiline':False]
['text':'','line_number':851,'multiline':False]
['text':'','line_number':859,'multiline':False]
['text':' Verify that a collated $sort-$group pipeline with a $last accumulator uses a collection','line_number':860,'multiline':False]
['text':' scan.','line_number':861,'multiline':False]
['text':'','line_number':862,'multiline':False]
['text':'//////////////////////////////////////////////////////////////////////////////////////////////','line_number':870,'multiline':False]
['text':' Collation tests 2: index on string field with no collation.','line_number':871,'multiline':False]
['text':'//////////////////////////////////////////////////////////////////////////////////////////////','line_number':872,'multiline':False]
['text':'','line_number':876,'multiline':False]
['text':' Verify that a $group uses a DISTINCT_SCAN.','line_number':877,'multiline':False]
['text':'','line_number':878,'multiline':False]
['text':'','line_number':885,'multiline':False]
['text':' Verify that a $sort-$group pipeline with a collation _does not_ scan the index, which is not','line_number':886,'multiline':False]
['text':' aware of the collation.','line_number':887,'multiline':False]
['text':'','line_number':888,'multiline':False]
['text':' Note that, when using a case-insensitive collation, "bAr" and "bar" will get grouped','line_number':889,'multiline':False]
['text':' together, and the decision as to which one will represent the group is arbitary. The','line_number':890,'multiline':False]
['text':' tie-breaking {d: 1} component of the sort forces a specific decision for this aggregation,','line_number':891,'multiline':False]
['text':' making this test more reliable.','line_number':892,'multiline':False]
['text':'','line_number':893,'multiline':False]
['text':'','line_number':901,'multiline':False]
['text':' Verify that a $sort-$group pipeline uses a DISTINCT_SCAN.','line_number':902,'multiline':False]
['text':'','line_number':903,'multiline':False]
['text':'','line_number':928,'multiline':False]
['text':' Verify that a $sort-$group that use a collation and includes a $first accumulators  _does','line_number':929,'multiline':False]
['text':' not_ scan the index, which is not aware of the collation.','line_number':930,'multiline':False]
['text':'','line_number':931,'multiline':False]
['text':'','line_number':939,'multiline':False]
['text':' Verify that a $sort-$group that use a collation and includes a $last accumulators  _does','line_number':940,'multiline':False]
['text':' not_ scan the index, which is not aware of the collation.','line_number':941,'multiline':False]
['text':'','line_number':942,'multiline':False]
['text':'//////////////////////////////////////////////////////////////////////////////////////////////','line_number':950,'multiline':False]
['text':' Collation tests 3: index on string field with case-insensitive collation.','line_number':951,'multiline':False]
['text':'//////////////////////////////////////////////////////////////////////////////////////////////','line_number':952,'multiline':False]
['text':'','line_number':957,'multiline':False]
['text':' Verify that a $group with no collation _does not_ scan the index, which does have a','line_number':958,'multiline':False]
['text':' collation.','line_number':959,'multiline':False]
['text':'','line_number':960,'multiline':False]
['text':'','line_number':967,'multiline':False]
['text':' Verify that a $sort-$group with a collation uses a DISTINCT_SCAN on the index, which uses a','line_number':968,'multiline':False]
['text':' matching collation.','line_number':969,'multiline':False]
['text':'','line_number':970,'multiline':False]
['text':' Note that, when using a case-insensitive collation, "bAr" and "bar" will get grouped','line_number':971,'multiline':False]
['text':' together, and the decision as to which one will represent the group is arbitary. The','line_number':972,'multiline':False]
['text':' tie-breaking {d: 1} component of the sort forces a specific decision for this aggregation,','line_number':973,'multiline':False]
['text':' making this test more reliable.','line_number':974,'multiline':False]
['text':'','line_number':975,'multiline':False]
['text':'','line_number':983,'multiline':False]
['text':' Verify that a $sort-$group pipeline with no collation _does not_ scan the index, which does','line_number':984,'multiline':False]
['text':' have a collation.','line_number':985,'multiline':False]
['text':'','line_number':986,'multiline':False]
['text':'','line_number':1011,'multiline':False]
['text':' Verify that a $sort-$group pipeline that uses a collation and includes a $first accumulator','line_number':1012,'multiline':False]
['text':' uses a DISTINCT_SCAN, which uses a matching collation.','line_number':1013,'multiline':False]
['text':'','line_number':1014,'multiline':False]
['text':'','line_number':1022,'multiline':False]
['text':' Verify that a $sort-$group pipeline that uses a collation and includes a $last accumulator','line_number':1023,'multiline':False]
['text':' uses a DISTINCT_SCAN, which uses a matching collation. Note that because strings FoO and foo are','line_number':1024,'multiline':False]
['text':' treated the same by this collation, it is equally valid to have either as the _id. For that','line_number':1025,'multiline':False]
['text':' reason, we project _id to lowercase in the output. This converts _id: null to _id: "".','line_number':1026,'multiline':False]
['text':'','line_number':1027,'multiline':False]
['text':'','line_number':1039,'multiline':False]
['text':' Verify that a $sort-$_internalStreamingGroup pipeline can use DISTINCT_SCAN','line_number':1040,'multiline':False]
['text':'','line_number':1041,'multiline':False]
