['text':'*
 * Compute the result of evaluating 'expression', and compare it to 'result'. Replaces the contents
 * of 'coll' with a single empty document.
 ','line_number':3,'multiline':True]
['text':'*
 * Compute the result of evaluating 'expression', and compare it to 'result', using 'collationSpec'
 * as the collation spec. Replaces the contents of 'coll' with a single empty document.
 ','line_number':11,'multiline':True]
['text':'*
 * Compare using valueComparator if provided, or the default otherwise. Assumes al and ar have the
 * same type.
 ','line_number':68,'multiline':True]
['text':' bsonBinaryEqual would return false for NumberDecimal("0.1") and NumberDecimal("0.100").','line_number':73,'multiline':False]
['text':'*
 * Returns true if 'al' is the same as 'ar'. If the two are arrays, the arrays can be in any order.
 * Objects (either 'al' and 'ar' themselves, or embedded objects) must have all the same properties.
 * If 'al' and 'ar' are neither object nor arrays, they must compare equal using 'valueComparator',
 * or == if not provided.
 ','line_number':77,'multiline':True]
['text':' Helper to log 'msg' iff 'verbose' is true.','line_number':84,'multiline':False]
['text':' One of the supported subtypes, make sure ar is of the same type.','line_number':90,'multiline':False]
['text':' If al was not of any of the subtypes, but ar is, then types are different.','line_number':108,'multiline':False]
['text':' Default to comparing object fields.','line_number':113,'multiline':False]
['text':' One of the operands, or both, is not an object. If one of them is not an object, but the','line_number':120,'multiline':False]
['text':' other is, the default compare will return false. If both are not an object, default','line_number':121,'multiline':False]
['text':' comparison should work fine. In all cases, if the value comparator is provided, it should','line_number':122,'multiline':False]
['text':' be used, even for different types.','line_number':123,'multiline':False]
['text':'*
 * Compares two documents for equality using a custom comparator for the values which returns true
 * or false. Returns true or false. Only equal if they have the exact same set of properties, and
 * all the properties' values match according to 'valueComparator'.
 ','line_number':132,'multiline':True]
['text':'*
 * Compare two documents for equality. Returns true or false. Only equal if they have the exact same
 * set of properties, and all the properties' values match except the values with names in the
 * fieldsToSkip array. The fields in fieldsToSkip will be skipped at all levels of the document.
 * The value comparison with the recursive anyEq function allows for comparing nested array values
 * ignoring the elements' order.
 * If the order of the nested arrays elements is significant for the equivalence, the assert.docEq
 * from assert.js should be used instead.
 ','line_number':141,'multiline':True]
['text':' Helper to log 'msg' iff 'verbose' is true.','line_number':151,'multiline':False]
['text':' Make sure these are both objects.','line_number':153,'multiline':False]
['text':' Start by checking for all of dl's properties in dr.','line_number':163,'multiline':False]
['text':' Skip inherited properties.','line_number':165,'multiline':False]
['text':' The documents aren't equal if they don't both have the property.','line_number':172,'multiline':False]
['text':' Now make sure that dr doesn't have any extras that dl doesn't have.','line_number':183,'multiline':False]
['text':' If dl doesn't have this they are not equal; if it does, we compared it above and know it','line_number':191,'multiline':False]
['text':' to be equal.','line_number':192,'multiline':False]
['text':'*
 * Returns true if both 'al' and 'ar' are arrays of the same length with the same elements according
 * to valueComparator.  Order of the elements within the arrays is not significant.
 *
 * Element comparison uses the anyEq function recursively, which allows for comparing of nested
 * arrays with insignificant order.
 *
 * Use this function if the arguments have nested arrays and the element order is *not* significant
 * when the equivalence is determined. Use assert.sameMembers() in assert.js instead if the
 * arguments have no nested arrays, or the order of the nested arrays is significant for the
 * equivalent assertion.
 ','line_number':203,'multiline':True]
['text':' Helper to log 'msg' iff 'verbose' is true.','line_number':216,'multiline':False]
['text':' Check that these are both arrays.','line_number':218,'multiline':False]
['text':' Keep a set of which indexes we've already used to avoid considering [1,1] as equal to [1,2].','line_number':234,'multiline':False]
['text':' Don't use the same value each time.','line_number':241,'multiline':False]
['text':' Check that these are both arrays.','line_number':255,'multiline':False]
['text':' Keep a set of which indexes we've already used to avoid considering [1,1] as equal to [1,2].','line_number':266,'multiline':False]
['text':' Don't use the same value each time.','line_number':274,'multiline':False]
['text':'*
 * Makes a shallow copy of 'a'.
 ','line_number':292,'multiline':True]
['text':' Makes a copy.','line_number':297,'multiline':False]
['text':'*
 * Compare two sets of documents (expressed as arrays) to see if they match. The two sets must have
 * the same documents, although the order need not match and values for fields defined in
 * "fieldsToSkip" need not match.
 *
 * Are non-scalar values references?
 ','line_number':300,'multiline':True]
['text':' Helper to log 'msg' iff 'verbose' is true.','line_number':308,'multiline':False]
['text':' Make clones of the arguments so that we don't damage them.','line_number':310,'multiline':False]
['text':' Find a match in the other array.','line_number':322,'multiline':False]
['text':' Because we made the copies above, we can edit these out of the arrays so we don't','line_number':329,'multiline':False]
['text':' check on them anymore.','line_number':330,'multiline':False]
['text':' For the inner loop, we're going to be skipping out, so we don't need to be too','line_number':331,'multiline':False]
['text':' careful.','line_number':332,'multiline':False]
['text':' If we got here, we didn't find this item.','line_number':339,'multiline':False]
['text':'*
 * Returns true if both 'al' and 'ar' are arrays of the same length with the same elements.
 * Order of the elements is significant only in the top-level arrays.
 *
 * Element comparison uses the anyEq function recursively, which allows for comparing of nested
 * arrays ignoring the elements' order.
 *
 * Use this function if the arguments have nested arrays and the elements' order is significant at
 * the top-level and insignificant for the nested arrays.
 ','line_number':349,'multiline':True]
['text':'*
 * Assert that the given aggregation fails with a specific code. Error message is optional. Note
 * that 'code' can be an array of possible codes.
 ','line_number':374,'multiline':True]
['text':' default','line_number':390,'multiline':False]
['text':'*
 * Assert that an aggregation fails with a specific code and the error message contains the given
 * string. Note that 'code' can be an array of possible codes.
 ','line_number':399,'multiline':True]
['text':'*
 * Assert that an aggregation ran on admin DB fails with a specific code and the error message
 * contains the given string. Note that 'code' can be an array of possible codes.
 ','line_number':412,'multiline':True]
['text':'*
 * Assert that an aggregation fails with any code and the error message contains the given
 * string.
 ','line_number':425,'multiline':True]
['text':'*
 * Assert that an aggregation fails with any code and the error message does not contain the given
 * string.
 ','line_number':438,'multiline':True]
['text':'*
 * Asserts that two arrays are equal - that is, if their sizes are equal and each element in
 * the 'actual' array has a matching element in the 'expected' array, without honoring elements
 * order.
 ','line_number':450,'multiline':True]
['text':'*
 * Generates the 'numDocs' number of documents each of 'docSize' size and inserts them into the
 * collecton 'coll'. Each document is generated from the 'template' function, which, by default,
 * returns a document in the form of {_id: i}, where 'i' is the iteration index, starting from 0.
 * The 'template' function is called on each iteration and can take three arguments and return
 * any JSON document which will be used as a document template:
 *   - 'itNum' - the current iteration number in the range [0, numDocs)
 *   - 'docSize' - is the 'docSize' parameter passed to 'generateCollection'
 *   - 'numDocs' - is the 'numDocs' parameter passed to 'generateCollection'
 *
 * After a document is generated from the template, it will be assigned a new field called 'padding'
 * holding a repeating string of 'x' characters, so that the total size of the generated object
 * equals to 'docSize'.
 ','line_number':462,'multiline':True]
['text':' Pick an arbitrary shard to look at.','line_number':570,'multiline':False]
['text':' The shardsPart is either a pipeline or a find-like plan. If it's a find-like','line_number':573,'multiline':False]
['text':' plan, wrap it in a $cursor stage so we can combine it into one big pipeline with','line_number':574,'multiline':False]
['text':' mergerPart.','line_number':575,'multiline':False]
['text':' Required for aggregation_mongos_passthrough.','line_number':594,'multiline':False]
['text':' The first two stages should be the .find() cursor and the inhibit-optimization stage','line_number':596,'multiline':False]
['text':' (if enabled); the rest of the stages are what the user's 'stage' expanded to.','line_number':597,'multiline':False]
['text':' Required for aggregation_one_shard_sharded_collections.','line_number':606,'multiline':False]
