['text':'*
 * Tests that $setWindowFields stage reports memory footprint per function when explain is run
 * with verbosities "executionStats" and "allPlansExecution". Also tests that the explain output
 * includes a metric for peak memory usage across the entire stage, including each individual
 * function as well as any other internal state.
 *
 * @tags: [assumes_against_mongod_not_mongos]
 ','line_number':1,'multiline':True]
['text':' 1KB of ','','line_number':13,'multiline':False]
['text':' Size was found through logging in 'SpillableCache' class.','line_number':16,'multiline':False]
['text':'*
 * Checks that the execution stats in the explain output for a $setWindowFields stage are as
 * expected.
 * - 'stages' is an array of the explain output of $setWindowFields stages.
 * - 'expectedFunctionMemUsages' is used to check the memory footprint stats for each function.
 * - 'expectedTotalMemUsage' is used to check the peak memory footprint for the entire stage.
 * - 'verbosity' indicates the explain verbosity used.
 ','line_number':25,'multiline':True]
['text':' Ensures that the expected functions are all included and the corresponding','line_number':43,'multiline':False]
['text':' memory usage is in a reasonable range.','line_number':44,'multiline':False]
['text':' The estimates being passed in are as close as possible to accurate. Leave 10%','line_number':46,'multiline':False]
['text':' wiggle room for variants that use different amounts of memory.','line_number':47,'multiline':False]
['text':' The $setWindowFields stage "streams" one partition at a time, so there's only one instance of','line_number':89,'multiline':False]
['text':' each function. For the default [unbounded, unbounded] window type, each function uses memory','line_number':90,'multiline':False]
['text':' usage comparable to it's $group counterpart.','line_number':91,'multiline':False]
['text':' The total mem usage for unbounded windows is the total from each function as well as the size','line_number':98,'multiline':False]
['text':' of all documents in the partition.','line_number':99,'multiline':False]
['text':' Test that the memory footprint is reduced with partitioning.','line_number':108,'multiline':False]
['text':' 56 constant state size. Uses 1056 per document.','line_number':119,'multiline':False]
['text':' 1024 for the string, rest is constant state.','line_number':120,'multiline':False]
['text':' Add one document for the NextPartitionState structure.','line_number':122,'multiline':False]
['text':' The partition iterator will only hold five documents at once. After they are added to the','line_number':134,'multiline':False]
['text':' removable document executor they will be released.','line_number':135,'multiline':False]
['text':' 10 integer values per window, with some extra to account for the $sum accumulator and','line_number':145,'multiline':False]
['text':' executor state.','line_number':146,'multiline':False]
['text':' Test that a window which also looks behind is able to release documents that are no longer','line_number':157,'multiline':False]
['text':' needed, thus reducing the total memory footprint. In this example, only half of the window','line_number':158,'multiline':False]
['text':' will be in memory at any point in time.','line_number':159,'multiline':False]
['text':' Adding partitioning doesn't change the peak memory usage.','line_number':176,'multiline':False]
['text':' The memory usage is doubled since both the executor and the function state have copies of the','line_number':201,'multiline':False]
['text':' large string.','line_number':202,'multiline':False]
