['text':'*
 * Tests that rolling back the insertion of the shardIdentity document on a shard causes the node
 * rolling it back to shut down.
 * @tags: [multiversion_incompatible, requires_persistence]
 ','line_number':1,'multiline':True]
['text':' This test triggers an unclean shutdown (an fassert), which may cause inaccurate fast counts.','line_number':7,'multiline':False]
['text':' The default WC is majority and stopServerReplication will prevent satisfying any majority writes.','line_number':18,'multiline':False]
['text':' Wait for the secondaries to have the latest oplog entries before stopping the fetcher to','line_number':26,'multiline':False]
['text':' avoid the situation where one of the secondaries will not have an overlapping oplog with','line_number':27,'multiline':False]
['text':' the other nodes once the primary is killed.','line_number':28,'multiline':False]
['text':' Ensure sharding state on the primary was initialized','line_number':47,'multiline':False]
['text':' Ensure sharding state on the secondaries was *not* initialized','line_number':55,'multiline':False]
['text':' Ensure manually deleting the shardIdentity document is not allowed.','line_number':62,'multiline':False]
['text':' Shut down the primary so a secondary gets elected that definitely won't have replicated the','line_number':67,'multiline':False]
['text':' shardIdentity insert, which should trigger a rollback on the original primary when it comes','line_number':68,'multiline':False]
['text':' back online.','line_number':69,'multiline':False]
['text':' Disable the fail point so that the elected node can exit drain mode and finish becoming','line_number':72,'multiline':False]
['text':' primary.','line_number':73,'multiline':False]
['text':' Wait for a new healthy primary','line_number':76,'multiline':False]
['text':' Restart the original primary so it triggers a rollback of the shardIdentity insert. Pass','line_number':81,'multiline':False]
['text':' {waitForConnect : false} to avoid a race condition between the node crashing (which we expect)','line_number':82,'multiline':False]
['text':' and waiting to be able to connect to the node.','line_number':83,'multiline':False]
['text':' Wait until we cannot create a connection to the former primary, which indicates that it must','line_number':87,'multiline':False]
['text':' have shut itself down during the rollback.','line_number':88,'multiline':False]
['text':' Wait until the node shuts itself down during the rollback. We will hit the first assertion if','line_number':90,'multiline':False]
['text':' we rollback using 'recoverToStableTimestamp' and the second if using 'rollbackViaRefetch'.','line_number':91,'multiline':False]
['text':' Restart the original primary again.  This time, the shardIdentity document should already be','line_number':96,'multiline':False]
['text':' rolled back, so there shouldn't be any rollback and the node should stay online.','line_number':97,'multiline':False]
['text':' Join() with the crashed mongod and ignore its bad exit status.','line_number':101,'multiline':False]
['text':' expected','line_number':104,'multiline':False]
['text':' Since we pass "restart: true" here, the node will start with the same options as above unless','line_number':106,'multiline':False]
['text':' specified. We do want to wait to be able to connect to the node here however, so we need to pass','line_number':107,'multiline':False]
['text':' {waitForConnect: true}.','line_number':108,'multiline':False]
['text':' Wait for the old primary to replicate the document that was written to the new primary while','line_number':112,'multiline':False]
['text':' it was shut down.','line_number':113,'multiline':False]
['text':' Ensure that there's no sharding state on the restarted original primary, since the','line_number':118,'multiline':False]
['text':' shardIdentity doc should have been rolled back.','line_number':119,'multiline':False]
