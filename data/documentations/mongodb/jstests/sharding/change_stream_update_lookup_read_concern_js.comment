['text':'*
 * Tests that a change stream's update lookup will use the appropriate read concern. In particular,
 * tests that the update lookup will return a version of the document at least as recent as the
 * change that we're doing the lookup for, and that change will be majority-committed.
 * @tags: [
 *   requires_majority_read_concern,
 *   # This test has some timing dependency causing failures when run with a non-streamable rsm
 *   # (e.g. sdam), because non-streamable rsm is generally slower to learn of new replica set info.
 *   requires_streamable_rsm,
 *   uses_change_streams,
 *   # This test expects that there's only one shard (so no config shard) that has all the
 *   # replSet tags set.
 *   config_shard_incompatible,
 * ]
 ','line_number':1,'multiline':True]
['text':' Configure a replica set to have nodes with specific tags - we will eventually add this as','line_number':24,'multiline':False]
['text':' part of a sharded cluster.','line_number':25,'multiline':False]
['text':' Note we do not configure the periodic noop writes to be more frequent as we do to','line_number':29,'multiline':False]
['text':' speed up other change streams tests, since we provide an array of individually','line_number':30,'multiline':False]
['text':' configured nodes, in order to know which nodes have which tags. This requires a step','line_number':31,'multiline':False]
['text':' up command to happen, which requires all nodes to agree on an op time. With the','line_number':32,'multiline':False]
['text':' periodic noop writer at a high frequency, this can potentially never finish.','line_number':33,'multiline':False]
['text':' Note that we include {chainingAllowed: false} in the replica set settings, because this test','line_number':38,'multiline':False]
['text':' assumes that both secondaries sync from the primary. Without this setting, the','line_number':39,'multiline':False]
['text':' TopologyCoordinator would sometimes chain one of the secondaries off the other. The test','line_number':40,'multiline':False]
['text':' later disables replication on one secondary, but with chaining, that would effectively','line_number':41,'multiline':False]
['text':' disable replication on both secondaries, deadlocking the test.','line_number':42,'multiline':False]
['text':' Start the sharding test and add the replica set.','line_number':57,'multiline':False]
['text':' The default WC is majority and stopServerReplication will prevent satisfying any majority writes.','line_number':61,'multiline':False]
['text':' Make sure reads with read preference tag 'closestSecondary' go to the tagged secondary.','line_number':75,'multiline':False]
['text':' Do a read concern "local" read so that the secondary refreshes its metadata.','line_number':80,'multiline':False]
['text':' We expect the tag to ensure there is only one node to choose from, so the actual read','line_number':83,'multiline':False]
['text':' preference doesn't really matter - we use 'nearest' throughout.','line_number':84,'multiline':False]
['text':' Test that the change stream itself goes to the secondary. There might be more than one if we','line_number':106,'multiline':False]
['text':' needed multiple getMores to retrieve the changes.','line_number':107,'multiline':False]
['text':' TODO SERVER-31650 We have to use 'originatingCommand' here and look for the getMore because','line_number':108,'multiline':False]
['text':' the initial aggregate will not show up.','line_number':109,'multiline':False]
['text':' Test that the update lookup goes to the secondary as well.','line_number':113,'multiline':False]
['text':' We need to filter out any profiler entries with a stale config - this is the first read on','line_number':118,'multiline':False]
['text':' this secondary with a readConcern specified, so it is the first read on this secondary that','line_number':119,'multiline':False]
['text':' will enforce shard version.','line_number':120,'multiline':False]
['text':' Now add a new secondary which is "closer" (add the "closestSecondary" tag to that secondary,','line_number':132,'multiline':False]
['text':' and remove it from the old node with that tag) to force update lookups target a different','line_number':133,'multiline':False]
['text':' node than the change stream itself.','line_number':134,'multiline':False]
['text':' Wait for the mongos to acknowledge the new tags from our reconfig.','line_number':149,'multiline':False]
['text':' Make sure new queries with read preference tag "closestSecondary" go to the new secondary.','line_number':158,'multiline':False]
['text':' Test that the change stream continues on the original host, but the update lookup now targets','line_number':170,'multiline':False]
['text':' the new, lagged secondary. Even though it's lagged, the lookup should use 'afterClusterTime'','line_number':171,'multiline':False]
['text':' to ensure it does not return until the node can see the change it's looking up.','line_number':172,'multiline':False]
['text':' Since we stopped replication, we expect the update lookup to block indefinitely until we','line_number':176,'multiline':False]
['text':' resume replication, so we resume replication in a parallel shell while this thread is blocked','line_number':177,'multiline':False]
['text':' getting the next change from the stream.','line_number':178,'multiline':False]
['text':' This shell creates its own connection to the host.','line_number':179,'multiline':False]
['text':' Wait for the update lookup to appear in currentOp.','line_number':186,'multiline':False]
['text':' Note the namespace here happens to be database.$cmd, because','line_number':193,'multiline':False]
['text':' we're blocked waiting for the read concern, which happens','line_number':194,'multiline':False]
['text':' before we get to the command processing level and adjust the','line_number':195,'multiline':False]
['text':' currentOp namespace to include the collection name.','line_number':196,'multiline':False]
['text':' Then restart replication - this should eventually unblock the lookup.','line_number':205,'multiline':False]
['text':' Test that the update lookup goes to the new closest secondary.','line_number':215,'multiline':False]
['text':' We need to filter out any profiler entries with a stale config - this is the first read on','line_number':220,'multiline':False]
['text':' this secondary with a readConcern specified, so it is the first read on this secondary that','line_number':221,'multiline':False]
['text':' will enforce shard version.','line_number':222,'multiline':False]
