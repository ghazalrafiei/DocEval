['text':'*
 * Tests that resharding participants do not block replication while waiting for the
 * ReshardingCoordinatorService to be rebuilt.
 *
 * Incompatible because it uses a fail point to block all primary only services from being rebuilt
 * on the config server, and if the config server is the first shard, this prevents the test from
 * making progress. This tests logic that shouldn't be different on a config server, so there's no
 * need to run it with a config shard.
 * @tags: [config_shard_incompatible]
 ','line_number':1,'multiline':True]
['text':' We prevent primary-only service Instances from being constructed on all of the config server','line_number':37,'multiline':False]
['text':' replica set because we don't know which node will be elected primary from calling','line_number':38,'multiline':False]
['text':' stepUpNewPrimaryOnShard().','line_number':39,'multiline':False]
['text':' The ReshardingTest fixture had enabled failpoints on the original config server primary so it','line_number':44,'multiline':False]
['text':' could safely perform data consistency checks. It doesn't handle those failpoints not taking','line_number':45,'multiline':False]
['text':' effect on the new config server primary. We intentionally have the resharding operation abort to','line_number':46,'multiline':False]
['text':' skip those data consistency checks and work around this limitation.','line_number':47,'multiline':False]
['text':'','line_number':48,'multiline':False]
['text':' forceRecipientToLaterFailReshardingOp() is written as a helper function this way so it doesn't','line_number':49,'multiline':False]
['text':' distract from the body of the withReshardingInBackground() callback function because that part is','line_number':50,'multiline':False]
['text':' the true part of the test.','line_number':51,'multiline':False]
['text':' Note that it is safe to enable the reshardingPauseRecipientDuringOplogApplication failpoint','line_number':53,'multiline':False]
['text':' after the resharding operation has begun because this test already enabled the','line_number':54,'multiline':False]
['text':' reshardingPauseRecipientBeforeCloning failpoint.','line_number':55,'multiline':False]
['text':' The following documents violate the global _id uniqueness assumption of sharded collections.','line_number':61,'multiline':False]
['text':' It is possible to construct such a sharded collection due to how each shard independently','line_number':62,'multiline':False]
['text':' enforces the uniqueness of _id values for only the documents it owns. The resharding','line_number':63,'multiline':False]
['text':' operation is expected to abort upon discovering this violation.','line_number':64,'multiline':False]
['text':' Wait until participants are aware of the resharding operation.','line_number':79,'multiline':False]
['text':' Verify the update from the recipient shard is able to succeed despite the','line_number':88,'multiline':False]
['text':' ReshardingCoordinatorService not having been rebuilt yet.','line_number':89,'multiline':False]
['text':' Also verify the config server replica set can replicate writes to a majority of its','line_number':102,'multiline':False]
['text':' members because that is originally how this issue around holding open an oplog hole had','line_number':103,'multiline':False]
['text':' manifested.','line_number':104,'multiline':False]
['text':' The update from the recipient shard is still waiting for the ReshardingCoordinatorService','line_number':107,'multiline':False]
['text':' to be rebuilt but should have any interruptions be non-fatal for the mongod process.','line_number':108,'multiline':False]
