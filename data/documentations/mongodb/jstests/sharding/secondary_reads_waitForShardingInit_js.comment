['text':'*
 * Tests that a secondary that hasn't finished sharding initialization can successfully handle
 * a read request that uses afterClusterTime >= the optime of the insert of the shard identity
 * document on the primary.

 * @tags: [
 *     requires_fcv_52,
 * ]
 ','line_number':1,'multiline':True]
['text':' Set up replica set that we'll add as shard','line_number':16,'multiline':False]
['text':' Set failpoint on one secondary to hang during sharding initialization','line_number':34,'multiline':False]
['text':'*
 * Force the other secondary node to sync from the primary. If it syncs from the hanging secondary
 * node that has not inserted the sharding identity document, the sharding initialization will not
 * be triggered and the addShard command will fail
 ','line_number':39,'multiline':True]
['text':' Make sure that the test db data is stored into the new shard.','line_number':64,'multiline':False]
['text':'*
 * Send a read request to the hanging secondary node. We expect it to fail as the sharding state is
 * not initialized. The read will block waiting for the afterClusterTime that is younger (greater)
 * than the opLog timestamp on hanging secondary node. A maxTimeMs is set to force the read time out
 * so that it will not block for too long.
 *
 * In this test case
 * -T1: insert of the shard identity doc (addShard)
 * -T2: write operation (insert)

 * The afterClusterTime we give is T2.  On hanging secondary node, the oplog is still at ts < T1.
 ','line_number':68,'multiline':True]
['text':'*
 * Send the read request again. We expect it to succeed now as the sharding state is initialized and
 * the read won't block waiting for read concern.
 ','line_number':99,'multiline':True]
