['text':'*
 * Confirms that a sharded $sample which employs the DSSampleFromRandomCursor optimization is
 * capable of yielding.
 *
 * @tags: [assumes_read_concern_unchanged, do_not_wrap_aggregations_in_facets,
 * requires_sharding]
 ','line_number':1,'multiline':True]
['text':' Set up a 2-shard cluster. Configure 'internalQueryExecYieldIterations' on both shards such','line_number':10,'multiline':False]
['text':' that operations will yield on each PlanExecuter iteration.','line_number':11,'multiline':False]
['text':' Shard the test collection, split it at {_id: 0}, and move the upper chunk to shard1.','line_number':21,'multiline':False]
['text':' Insert enough documents on each shard to induce the $sample random-cursor optimization.','line_number':24,'multiline':False]
['text':' Run the initial aggregate for the $sample stage.','line_number':29,'multiline':False]
['text':' Force each shard to hang on yield to allow for currentOp capture.','line_number':38,'multiline':False]
['text':' Run $currentOp to confirm that the $sample getMore yields on both shards.','line_number':48,'multiline':False]
['text':' Release the failpoint and allow the getMores to complete.','line_number':63,'multiline':False]
['text':' Retrieve the results for the $sample aggregation.','line_number':70,'multiline':False]
['text':' Confirm that the parallel shell completes successfully, and tear down the cluster.','line_number':74,'multiline':False]
