['text':'*
 * @tags: [uses_transactions, uses_multi_shard_transaction,
 * requires_sharding]
 *
 * Tests that when a load-balanced client disconnects, its in-progress transactions are aborted
 ','line_number':1,'multiline':True]
['text':' Shard collection; ensure docs on each shard','line_number':12,'multiline':False]
['text':' Insert some docs on each shard','line_number':20,'multiline':False]
['text':'${host}/?appName=${appName}`);','line_number':31,'multiline':False]
['text':' We manually generate a logical session and send it to the server explicitly, to prevent','line_number':34,'multiline':False]
['text':' the shell from making its own logical session object which will attempt to explicitly','line_number':35,'multiline':False]
['text':' abort the transaction on disconnection. In this way, we simulate a "hard partition"','line_number':36,'multiline':False]
['text':' between the shell and mongos with the open transaction, where the shell never sends','line_number':37,'multiline':False]
['text':' endSessions or abortTransaction commands on disconnect, to ensure the server cleans up','line_number':38,'multiline':False]
['text':' itself.','line_number':39,'multiline':False]
['text':' capture txn statistics before opening and aborting the txn.','line_number':64,'multiline':False]
['text':' Wait until we can see the txn opened by txnStartingThread, identified by the appName, as','line_number':73,'multiline':False]
['text':' idle.','line_number':74,'multiline':False]
['text':' We've found the txn started by txnStartingThread.','line_number':90,'multiline':False]
['text':' We now join that thread, and therefore end its connection to the server.','line_number':91,'multiline':False]
['text':' Make sure we can't find that txn anymore/it has been killed.','line_number':102,'multiline':False]
