['text':'
 * This test exercises the "linearizable" readConcern option on a simple sharded cluster.
 * Note that a full linearizable read concern test exists in
 * "replsets/linearizable_read_concern.js". This test exists mainly to affirm that a
 * readConcern "linearizable" propagates correctly through a sharded cluster i.e. we
 * execute database commands only through a mongos, not directly on a replica set.
 *
 * There is one mongos and two shards (each a 3-node replica set). We put one
 * chunk on each shard, each containing five documents. We then execute a
 * linearizable read targeting both shards with readPreference "secondary", to
 * make sure it fails. We next execute a linearizable read targeting both
 * shards with readPreference "primary" to make sure it succeeds. The primary
 * is then partitioned from the other two secondaries in the first shard, and
 * we make sure that a linearizable read targeting primaries in both shards
 * times out, since the partitioned primary can no longer communicate with a
 * majority of nodes.
 *
 * NOTE: Linearizability guarantees only apply when a query specifies a unique
 * document. This test is mainly trying to ensure that system behavior is
 * reasonable when executing linearizable reads in a sharded cluster, so as to
 * exercise possible (invalid) user behavior.
 ','line_number':1,'multiline':True]
['text':' Set up the sharded cluster.','line_number':39,'multiline':False]
['text':' Set high election timeout so that primary doesn't step down during linearizable read test.','line_number':47,'multiline':False]
['text':' Set up sharded collection. Put 5 documents on each shard, with keys {x: 0...9}.','line_number':52,'multiline':False]
['text':' Make sure the 'shardIdentity' document on each shard is replicated to all secondary nodes','line_number':56,'multiline':False]
['text':' before issuing reads against them.','line_number':57,'multiline':False]
['text':' Print current sharding stats for debugging.','line_number':61,'multiline':False]
['text':' Filter to target one document in each shard.','line_number':64,'multiline':False]
['text':' Execute a linearizable read from secondaries (targeting both shards) which should fail.','line_number':71,'multiline':False]
['text':' Execute a linearizable read from primaries (targeting both shards) which should succeed.','line_number':83,'multiline':False]
['text':' Make sure data was returned from both shards correctly.','line_number':93,'multiline':False]
['text':' Partition the primary in the first shard.','line_number':102,'multiline':False]
['text':' Execute a linearizable read targeting the partitioned primary in first shard, and good','line_number':108,'multiline':False]
['text':' primary in the second shard. This should time out due to partitioned primary.','line_number':109,'multiline':False]
['text':' Reconnect so the config server is available for shutdown hooks and to allow potential write','line_number':118,'multiline':False]
['text':' operations triggered by consistency checks.','line_number':119,'multiline':False]
