['text':'
 * Test that the targeting of $graphLookup queries and any sub-queries works correctly.
 * @tags: [
 *   featureFlagTrackUnshardedCollectionsOnShardingCatalog,
 *   assumes_balancer_off,
 *   requires_sharding,
 *   requires_spawning_own_processes,
 *   requires_profiling,
 * ]
 ','line_number':1,'multiline':True]
['text':' Map from shard name to database connection. Used when determine which shard to read from when','line_number':26,'multiline':False]
['text':' gathering profiler output.','line_number':27,'multiline':False]
['text':' Create two sharded collections, both of which are distributed across the 3 shards.','line_number':36,'multiline':False]
['text':' Create two unsplittable collections.','line_number':81,'multiline':False]
['text':' Inner collection is unsplittable and not on the primary shard. Outer collection is sharded.','line_number':108,'multiline':False]
['text':' In this case, we should be merging on the shard which owns the unsplittable collection.','line_number':109,'multiline':False]
['text':'*
     * TODO SERVER-81335: The cursor against 'kShardedColl1Name' may no longer be profiled
     * once the $mergeCursors pipeline can execute it locally. If this is the case, remove
     * this assertion (here and elsewhere).
     ','line_number':128,'multiline':True]
['text':' Outer collection is unsplittable and not on the primary shard. Inner collection is sharded.','line_number':151,'multiline':False]
['text':' We should target the shard which owns the unsplittable collection.','line_number':152,'multiline':False]
['text':' Both collections are unsplittable and are located on different shards. We should merge on the','line_number':195,'multiline':False]
['text':' shard which owns the inner collection in each case.','line_number':196,'multiline':False]
['text':' TODO SERVER-83902: Add test coverage where the inner collection targets a view whose pipeline','line_number':272,'multiline':False]
['text':' includes a $graphLookup. In particular, we wish to have the following cases:','line_number':273,'multiline':False]
['text':' - Nested case where we have [$graphLookup(A, [$graphLoookup(B)])]. A and B are unsplittable and','line_number':274,'multiline':False]
['text':' on different shards.','line_number':275,'multiline':False]
['text':' - Nested case where we have [$graphLookup(A, [$graphLookup(B)])]. A sharded, B unsplittable and','line_number':276,'multiline':False]
['text':' not on the primary shard.','line_number':277,'multiline':False]
['text':' - Nested case where we have [$graphLookup(A, [$graphLookup(B)])]. A unsplittable and not on','line_number':278,'multiline':False]
['text':' the primary shard, B sharded.','line_number':279,'multiline':False]
['text':' - Consider adding a case with 3 levels of nested pipelines','line_number':280,'multiline':False]
['text':' Issue an aggregate featuring two $graphLookup stages, where both stages' inner collections are','line_number':282,'multiline':False]
['text':' unsplittable and reside on different shards. We should always merge on the shard which owns the','line_number':283,'multiline':False]
['text':' first inner collection.','line_number':284,'multiline':False]
['text':' Issue aggregates featuring two $graphLookup stages: the first $graphLookup targets an inner','line_number':373,'multiline':False]
['text':' sharded collection and the other targets an unsplittable inner collection. We should merge on the','line_number':374,'multiline':False]
['text':' shard which owns the unsplittable collection.','line_number':375,'multiline':False]
['text':' Issue aggregates featuring two $graphLookup stages, where the first one's inner collection is','line_number':539,'multiline':False]
['text':' unsplittable and the second one's inner collection is sharded. We should target the shard which','line_number':540,'multiline':False]
['text':' owns the unsplittable collection.','line_number':541,'multiline':False]
['text':' Set of tests which involve moving an unsplittable collection during query execution.','line_number':705,'multiline':False]
['text':' Test moving the outer collection to another shard during $group execution. This should','line_number':707,'multiline':False]
['text':' result in a 'QueryPlanKilled' error.','line_number':708,'multiline':False]
['text':' Add a set of 20 documents to the outer collection which are at least 1 MB in size. This','line_number':711,'multiline':False]
['text':' makes it so that the documents from the outer collection do not fit in one batch and we','line_number':712,'multiline':False]
['text':' will have to issue at least one getMore against the outer collection to continue','line_number':713,'multiline':False]
['text':' constructing the result set.','line_number':714,'multiline':False]
['text':' Establish our cursor. We should not have exhausted our cursor.','line_number':723,'multiline':False]
['text':' Move the outer collection to a different shard.','line_number':731,'multiline':False]
['text':' Subsequent getMore commands should cause our query plan to be killed because to our','line_number':740,'multiline':False]
['text':' $mergeCursor stage, it will appear as though the outer collection has been dropped.','line_number':741,'multiline':False]
['text':' Move the outer collection back to its original shard.','line_number':744,'multiline':False]
['text':' Test moving the inner collection to another shard during $graphLookup execution. Because the','line_number':747,'multiline':False]
['text':' move happens in between executions of the inner pipeline, the query plan should not be','line_number':748,'multiline':False]
['text':' killed. Rather, we should be able to target the inner side to the new owning shard.','line_number':749,'multiline':False]
