['text':' Tests that an $merge stage is able to default the "on" fields to the correct value - even if one','line_number':1,'multiline':False]
['text':' or more of the involved nodes has a stale cache of the routing information.','line_number':2,'multiline':False]
['text':' shardKey ','line_number':13,'multiline':True]
['text':' splitAt ','line_number':13,'multiline':True]
['text':' chunkToMove','line_number':13,'multiline':True]
['text':' Test that an $merge through a stale mongos can still use the correct "on" fields and succeed.','line_number':16,'multiline':False]
['text':' Shard the collection through 'staleMongos', setting it up to believe the collection is','line_number':22,'multiline':False]
['text':' sharded by {sk: 1, _id: 1}.','line_number':23,'multiline':False]
['text':' Perform a query through that mongos to ensure the cache is populated.','line_number':26,'multiline':False]
['text':' Drop the collection from the other mongos - it is no longer sharded but the stale mongos','line_number':29,'multiline':False]
['text':' doesn't know that yet.','line_number':30,'multiline':False]
['text':' At this point 'staleMongos' will believe that the target collection is sharded. This should','line_number':34,'multiline':False]
['text':' not prevent it from running an $merge without "on" fields specified.','line_number':35,'multiline':False]
['text':'','line_number':36,'multiline':False]
['text':' Specifically, the mongos should force a refresh of its cache before defaulting the "on"','line_number':37,'multiline':False]
['text':' fields.','line_number':38,'multiline':False]
['text':' If we had used the stale "on" fields, this aggregation would fail since the documents do not','line_number':40,'multiline':False]
['text':' have an 'sk' field.','line_number':41,'multiline':False]
['text':' Test that if the collection is dropped and re-sharded during the course of the aggregation that','line_number':49,'multiline':False]
['text':' the operation will fail rather than proceed with the old shard key.','line_number':50,'multiline':False]
['text':' Converts a single string or an array of strings into it's object spec form. For instance, for','line_number':52,'multiline':False]
['text':' input ["a", "b"] the returned object would be {a: 1, b: 1}.','line_number':53,'multiline':False]
['text':' Drop the collection and reshard it with a different shard key','line_number':66,'multiline':False]
['text':' Use a failpoint to make the query feeding into the aggregate hang while we drop the','line_number':78,'multiline':False]
['text':' collection.','line_number':79,'multiline':False]
['text':' If a user specifies their own "on" fields, we don't need to fail an aggregation if','line_number':99,'multiline':False]
['text':' the collection is dropped and recreated or the epoch otherwise changes. We are','line_number':100,'multiline':False]
['text':' allowed to fail such an operation should we choose to in the future, but for now we','line_number':101,'multiline':False]
['text':' don't expect to because we do not do anything special on mongos to ensure the catalog','line_number':102,'multiline':False]
['text':' cache is up to date, so do not want to attach mongos's believed epoch to the command','line_number':103,'multiline':False]
['text':' for the shards.','line_number':104,'multiline':False]
['text':' Wait for the merging $merge to appear in the currentOp output from the shards. We should','line_number':116,'multiline':False]
['text':' see that the $merge stage has an 'epoch' field serialized from the mongos.','line_number':117,'multiline':False]
['text':' Drop the collection so that the epoch changes while the merge operation is executing','line_number':137,'multiline':False]
['text':' Insert enough documents to force a yield.','line_number':147,'multiline':False]
['text':' Skip the combination of merge modes which will fail depending on the contents of the source','line_number':155,'multiline':False]
['text':' and target collection, as this will cause a different assertion error from the one expected.','line_number':156,'multiline':False]
['text':' Test with some different failpoints to prove we will detect an epoch change in the middle of the','line_number':181,'multiline':False]
['text':' inserts or updates.','line_number':182,'multiline':False]
