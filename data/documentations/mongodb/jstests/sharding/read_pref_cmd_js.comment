['text':'*
 * This test is labeled resource intensive because its total io_write is 47MB compared to a median
 * of 5MB across all sharding tests in wiredTiger.
 * @tags: [
 *   resource_intensive,
 * ]
 ','line_number':1,'multiline':True]
['text':' Checking UUID and index consistency involves reading from the config server through mongos, but','line_number':23,'multiline':False]
['text':' this test sets an invalid readPreference on the connection to the mongos.','line_number':24,'multiline':False]
['text':'*
 * Prepares to call testConnReadPreference(), testCursorReadPreference() or testBadMode().
 ','line_number':28,'multiline':True]
['text':' Each time we drop the database we have to re-enable profiling. Enable profiling on 'admin'','line_number':36,'multiline':False]
['text':' to test the $currentOp aggregation stage.','line_number':37,'multiline':False]
['text':'*
 * Cleans up after testConnReadPreference(), testCursorReadPreference() or testBadMode(),
 * prepares to call setUp() again.
 ','line_number':44,'multiline':True]
['text':'*
 * Returns a profile query for the given namespace and command query. Assumes that all values
 * are native types (no objects).
 ','line_number':53,'multiline':True]
['text':'*
 * Returns the serverStatus hedgingMetrics for the given mongos connection.
 ','line_number':70,'multiline':True]
['text':'*
 * Returns true if hedging is expected for the command with the given hedge options
 * and properties.
 ','line_number':77,'multiline':True]
['text':'*
 * Returns the number of nodes in 'rsNodes' that ran the command that matches the given
 * 'profileQuery' to completion. If 'expectedNode' is "primary" or "secondary" (and 'secOk'
 * is true), checks that the command only ran on the specified node.
 ','line_number':85,'multiline':True]
['text':'*
 * Runs the given cmdFunc to run a command and asserts that the command runs successfully
 * on the node(s) that match the given read preference and expected node.
 ','line_number':108,'multiline':True]
['text':' We did not hedge the operation That is, we did not manage to acquire a connection','line_number':125,'multiline':False]
['text':' to one other eligible node and send out an additional request before the command','line_number':126,'multiline':False]
['text':' finished.','line_number':127,'multiline':False]
['text':' We did hedge the operation. That is, we did acquire a connection to one other eligible','line_number':132,'multiline':False]
['text':' node and try to send an additional request. So if the request had already been sent','line_number':133,'multiline':False]
['text':' when the command finished and the remote killOp did not occur quickly enough, that','line_number':134,'multiline':False]
['text':' other node could also run the command to completion.','line_number':135,'multiline':False]
['text':'*
 * Sets the connection's read preference, performs a series of commands, and verifies that
 * each command runs on the expected node.
 *
 * @param conn {Mongo} the connection object of which to test the read preference functionality.
 * @param isMongos {boolean} true if conn is a mongos connection.
 * @param rsNodes {Array.<Mongo>} list of the replica set node members.
 * @param readPref {Object} object containing the following keys:
 *          mode {string} a read preference mode like "secondary".
 *          tagSets {Array.<Object>} list of tag sets to use.
 *          hedge {Object} hedge options of the form {enabled: <bool>}.
 * @param expectedNode {string} which node should this run on: "primary", "secondary", or "any".
 ','line_number':143,'multiline':True]
['text':' purely rely on readPref','line_number':163,'multiline':False]
['text':'*
     * Performs the command and checks whether the command was routed to the
     * appropriate node(s).
     *
     * @param cmdObj the cmd to send.
     * @param secOk true if command can be routed to a secondary.
     * @param isReadOnlyCmd true if command cannot trigger writes.
     * @param profileQuery the query to perform agains the profile collection to
     *     look for the cmd just sent.
     * @param dbName the name of the database against which to run the command,
     *     and to which the 'system.profile' entry for this command is written.
     ','line_number':166,'multiline':True]
['text':' Use runReadCommand so that the cmdObj is modified with the readPreference.','line_number':183,'multiline':False]
['text':' Test command that can be sent to secondary','line_number':196,'multiline':False]
['text':' Test command that can't be sent to secondary','line_number':202,'multiline':False]
['text':' Make sure the unsharded collection is propagated to secondaries before proceeding.','line_number':208,'multiline':False]
['text':' Test inline mapReduce on sharded collection.','line_number':216,'multiline':False]
['text':' Test inline mapReduce on unsharded collection.','line_number':231,'multiline':False]
['text':' Test non-inline mapReduce on sharded collection.','line_number':253,'multiline':False]
['text':' Test non-inline mapReduce on unsharded collection.','line_number':268,'multiline':False]
['text':' Test other commands that can be sent to secondary.','line_number':295,'multiline':False]
['text':' Test on sharded','line_number':313,'multiline':False]
['text':' Test on non-sharded. Skip testing in a multiversion scenario as the format of the','line_number':328,'multiline':False]
['text':' profiler entry will depend on the binary version of each shard as well as mongos.','line_number':329,'multiline':False]
['text':' Test $currentOp aggregation stage.','line_number':339,'multiline':False]
['text':' A $currentOp without any foreign namespaces takes no collection locks and will not be','line_number':343,'multiline':False]
['text':' profiled, so we add a dummy $lookup stage to force an entry in system.profile.','line_number':344,'multiline':False]
['text':'*
 * Creates a cursor with the given read preference and verifies that the 'find' command runs
 * on the expected node.
 *
 * @param conn {Mongo} the connection object of which to test the read preference functionality.
 * @param isMongos {boolean} true if conn is a mongos connection.
 * @param rsNodes {Array.<Mongo>} list of the replica set node members.
 * @param readPref {Object} object containing the following keys:
 *          mode {string} a read preference mode like "secondary".
 *          tagSets {Array.<Object>} list of tag sets to use.
 *          hedge {Object} hedge options of the form {enabled: <bool>}.
 * @param expectedNode {string} which node should this run on: "primary", "secondary", or "any".
 ','line_number':370,'multiline':True]
['text':' purely rely on readPref','line_number':388,'multiline':False]
['text':' Do a read concern "local" read on each secondary so they refresh their metadata.','line_number':400,'multiline':False]
['text':'*
 * Verifies that commands fail with the given combination of mode, tags, and hedge options
 * in 'readPref'.
 *
 * @param conn {Mongo} the connection object of which to test the read preference functionality.
 * @param isMongos {boolean} true if conn is a mongos connection.
 * @param rsNodes {Array.<Mongo>} list of the replica set host members.
 * @param readPref {Object} object containing the following keys:
 *          mode {string} a read preference mode like "secondary".
 *          tagSets {Array.<Object>} list of tag sets to use.
 *          hedge {Object} hedge options of the form {enabled: <bool>}.
 * @param expectedNode {string} which node should this run on: "primary", "secondary", or "any".
 ','line_number':421,'multiline':True]
['text':' use setReadPrefUnsafe to bypass client-side validation','line_number':437,'multiline':False]
['text':' Test that a command that could be routed to a secondary fails with bad mode / tags.','line_number':441,'multiline':False]
['text':' Command result should have ok: 0.','line_number':443,'multiline':False]
['text':' conn should throw error','line_number':451,'multiline':False]
['text':' The primary is tagged with { tag: "one" } and one of the secondaries is','line_number':464,'multiline':False]
['text':' tagged with { tag: "two" }. We can use this to test the interaction between','line_number':465,'multiline':False]
['text':' modes, tags, and hedge options. Test a bunch of combinations.','line_number':466,'multiline':False]
['text':' readPref and expectedNode.','line_number':468,'multiline':False]
['text':' We don't have a way to alter ping times so we can't predict where an','line_number':496,'multiline':False]
['text':' untagged "nearest" command should go, hence only test with tags.','line_number':497,'multiline':False]
['text':' Run testCursorReadPreference() first since testConnReadPreference() sets the connection's','line_number':506,'multiline':False]
['text':' read preference.','line_number':507,'multiline':False]
['text':' Tags are not allowed in mode "primary".','line_number':515,'multiline':False]
['text':' Hedging is not allowed in mode "primary".','line_number':520,'multiline':False]
['text':' No matching node.','line_number':523,'multiline':False]
['text':' Invalid mode, tags, hedgeOptions.','line_number':527,'multiline':False]
['text':' Tag the primary and secondaries. Set node priorities to force the primary to never change','line_number':544,'multiline':False]
['text':' during this test.','line_number':545,'multiline':False]
['text':' Force mongos to reconnect after our reconfig','line_number':597,'multiline':False]
['text':' Intentionally caused an error that forces mongos's monitor to refresh.','line_number':603,'multiline':False]
['text':' Make sure replica set connection is ready','line_number':618,'multiline':False]
['text':' Force the mongos's replica set monitors to always include all the eligible nodes.','line_number':635,'multiline':False]
