['text':'*
 * Test to verify that all the CRUD operations get routed to the correct shard when the shard key is
 * compound hashed.
 *
 * @tags: [
 *   multiversion_incompatible,
 *   requires_majority_read_concern,
 * ]
 ','line_number':1,'multiline':True]
['text':' Enable 'retryWrites' so that the shard key fields are updatable.','line_number':28,'multiline':False]
['text':'*
 * Enables profiling on both shards so that we can verify the targeting behaviour.
 ','line_number':35,'multiline':True]
['text':'*
 * Runs find command with the 'filter' and validates that the output returned matches
 * 'expectedOutput'. Also runs explain() command on the same find command and validates that all
 * the 'expectedStages' are present in the plan returned.
 ','line_number':46,'multiline':True]
['text':' We ignore the order since hashed index order is not predictable.','line_number':57,'multiline':False]
['text':'*
 * Tests when range field is a prefix of compound hashed shard key.
 ','line_number':62,'multiline':True]
['text':' Postive numbers of 'a' should go to 'shard1DB' and negative numbers should go to 'shard0DB'','line_number':69,'multiline':False]
['text':' Test to verify that insert operations are routed to correct shard and succeeds on the respective','line_number':78,'multiline':False]
['text':' shards.','line_number':79,'multiline':False]
['text':' Verify that $in query with all predicates values present in a single shard, can be targeted','line_number':103,'multiline':False]
['text':' correctly. Also verify that the command uses index scan on the individual shard.','line_number':104,'multiline':False]
['text':' Verify that a range query on a non-hashed prefix field can target a single shard if all values in','line_number':121,'multiline':False]
['text':' the range are on that shard. Also verify that the command uses index scan on the individual','line_number':122,'multiline':False]
['text':' shard.','line_number':123,'multiline':False]
['text':' Test to verify that the update operation can use query to route the operation. Also verify that','line_number':136,'multiline':False]
['text':' updating shard key value succeeds.','line_number':137,'multiline':False]
['text':' Test to verify that the update operation can use query to route the operation. Also verify that','line_number':145,'multiline':False]
['text':' updating shard key value succeeds when the document has to move shard.','line_number':146,'multiline':False]
['text':' Verify that the 'update' command gets targeted to 'shard1DB'.','line_number':155,'multiline':False]
['text':' Verify that the 'count' command gets targeted to 'shard0DB' after the update.','line_number':159,'multiline':False]
['text':' Test to verify that the 'delete' command with a range query predicate can target a single shard','line_number':166,'multiline':False]
['text':' if all values in the range are on that shard.','line_number':167,'multiline':False]
['text':'*
 * Test when hashed field is a prefix.
 ','line_number':175,'multiline':True]
['text':' Since the prefix field of the shard key is hashed, we pre-split the collection using hashed field','line_number':180,'multiline':False]
['text':' and distribute the resulting chunks equally among the shards.','line_number':181,'multiline':False]
['text':'*
 * Finds the shard to which hashed value of 'fieldValue' belongs to and validates that there exists
 * a single profiler entry on that shard, for the given 'filter'. Also verifies that no entry
 * matching 'filter' is present on the other shard.
 ','line_number':184,'multiline':True]
['text':' Find the chunk to which 'hashedValue' belongs to. We use $expr here so that the $lte and $gt','line_number':190,'multiline':False]
['text':' comparisons occurs across data types.','line_number':191,'multiline':False]
['text':' Test to verify that insert operations are routed to a single shard and succeeds on the respective','line_number':210,'multiline':False]
['text':' shards.','line_number':211,'multiline':False]
['text':' Test to verify that an equality match on the hashed prefix can be routed to single shard.','line_number':221,'multiline':False]
['text':' Test to verify that a range query on hashed field will be routed to all nodes and the individual','line_number':236,'multiline':False]
['text':' nodes cannot use index to answer the query.','line_number':237,'multiline':False]
['text':' Test to verify that update with only a shard key prefix in the query can be routed correctly.','line_number':253,'multiline':False]
['text':' Verify that update has modified the intended object.','line_number':261,'multiline':False]
['text':' Verify that the update has been routed to the correct shard.','line_number':264,'multiline':False]
['text':' Sharded updateOnes that do not directly target a shard can now use the two phase write','line_number':271,'multiline':False]
['text':' protocol to execute.','line_number':272,'multiline':False]
['text':' Op-style update with range query on hashed field, cannot route to single shard and hence','line_number':277,'multiline':False]
['text':' should fail.','line_number':278,'multiline':False]
['text':' Test to verify that delete with full shard key in the query can be routed correctly.','line_number':282,'multiline':False]
['text':' Sharded deleteOnes that do not directly target a shard can now use the two phase write','line_number':293,'multiline':False]
['text':' protocol to execute.','line_number':294,'multiline':False]
['text':' Test to verify that delete with limit:1, without full shard key in query fails.','line_number':299,'multiline':False]
