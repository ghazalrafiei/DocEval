['text':'*
 * Tests that the config.transactions collection has a partial index such that the find query of the
 * form {"parentLsid": ..., "_id.txnNumber": ...} is a covered query.
 *
 * @tags: [requires_fcv_60, uses_transactions]
 ','line_number':1,'multiline':True]
['text':' A config server does internal txns, clear the transaction table to make sure it's','line_number':94,'multiline':False]
['text':' empty before dropping the index, otherwise it can't be recreated automatically.','line_number':95,'multiline':False]
['text':' Complete the setup by explicitly creating the test db (which is done through an internal','line_number':97,'multiline':False]
['text':' txn).','line_number':98,'multiline':False]
['text':' Disable implicit sessions we can directly write to config.transactions.','line_number':101,'multiline':False]
['text':' If the collection is empty and the index does not exist, we should always create the partial','line_number':107,'multiline':False]
['text':' index on stepup,','line_number':108,'multiline':False]
['text':' expectRecreateAfterDrop ','line_number':109,'multiline':True]
['text':'','line_number':163,'multiline':False]
['text':' Verify clients can create the index only if they provide the exact specification and that','line_number':164,'multiline':False]
['text':' operations requiring the index fails if it does not exist.','line_number':165,'multiline':False]
['text':'','line_number':166,'multiline':False]
['text':' Normal writes don't involve config.transactions, so they succeed.','line_number':172,'multiline':False]
['text':' Retryable writes read from the partial index, so they fail.','line_number':176,'multiline':False]
['text':' User transactions read from the partial index, so they fail.','line_number':186,'multiline':False]
['text':' Non retryable internal transactions do not read from or update the partial index, so they can','line_number':197,'multiline':False]
['text':' succeed without the index existing.','line_number':198,'multiline':False]
['text':' Retryable transactions read from the partial index, so they fail.','line_number':216,'multiline':False]
['text':' Recreating the partial index requires the exact options used internally, but in any order.','line_number':228,'multiline':False]
['text':' Operations involving the index should succeed now.','line_number':244,'multiline':False]
['text':' We expect that if the partial index is dropped when the collection isn't empty, then on','line_number':303,'multiline':False]
['text':' stepup we should not recreate the collection.','line_number':304,'multiline':False]
['text':' expectRecreateAfterDrop ','line_number':305,'multiline':True]
['text':' Creating the partial index when the collection isn't empty can be enabled by a feature','line_number':307,'multiline':False]
['text':' flag.','line_number':308,'multiline':False]
['text':' expectRecreateAfterDrop ','line_number':309,'multiline':True]
['text':' alwaysCreateFeatureFlagEnabled ','line_number':315,'multiline':True]
['text':' Sanity check the feature flag was enabled.','line_number':329,'multiline':False]
['text':' alwaysCreateFeatureFlagEnabled ','line_number':343,'multiline':True]
