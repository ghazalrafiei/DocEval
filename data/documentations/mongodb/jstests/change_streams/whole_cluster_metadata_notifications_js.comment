['text':' Tests of metadata notifications for a $changeStream on a whole cluster.','line_number':1,'multiline':False]
['text':' When run in sharded+transaction passthrough suites, it is possible that the two unsharded','line_number':2,'multiline':False]
['text':' collections will live on different shards. Majority read concern cannot be off with multi-shard','line_number':3,'multiline':False]
['text':' transactions, which is why this test needs the tag below.','line_number':4,'multiline':False]
['text':' @tags: [requires_majority_read_concern]','line_number':5,'multiline':False]
['text':' Define two databases. We will conduct our tests by creating one collection in each.','line_number':14,'multiline':False]
['text':' Create one collection on each database.','line_number':22,'multiline':False]
['text':' Create a ChangeStreamTest on the 'admin' db. Cluster-wide change streams can only be opened','line_number':26,'multiline':False]
['text':' on admin.','line_number':27,'multiline':False]
['text':' Generate oplog entries of type insert, update, and delete across both databases.','line_number':31,'multiline':False]
['text':' Drop the second database, which should generate a 'drop' entry for the collection followed','line_number':38,'multiline':False]
['text':' by a 'dropDatabase' entry.','line_number':39,'multiline':False]
['text':' We should get 6 oplog entries; three ops of type insert, update, delete from each database.','line_number':52,'multiline':False]
['text':' Test that a cluster-wide change stream can be resumed using a token from a collection which','line_number':61,'multiline':False]
['text':' has been dropped.','line_number':62,'multiline':False]
['text':' Get a valid resume token that the next change stream can use.','line_number':65,'multiline':False]
['text':' For cluster-wide streams, it is possible to resume at a point before a collection is dropped,','line_number':73,'multiline':False]
['text':' even if the "drop" notification has not been received on the original stream yet.','line_number':74,'multiline':False]
['text':' Wait for two-phase drop to complete, so that the UUID no longer exists.','line_number':76,'multiline':False]
['text':' Test that collection drops from any database result in "drop" notifications for the stream.','line_number':87,'multiline':False]
['text':' Start watching all changes in the cluster.','line_number':92,'multiline':False]
['text':' Insert into the collections on both databases, and verify the change stream is able to','line_number':97,'multiline':False]
['text':' pick them up.','line_number':98,'multiline':False]
['text':' Renaming the collection should generate a 'rename' notification. Skip this test when','line_number':108,'multiline':False]
['text':' running on a sharded collection, since these cannot be renamed.','line_number':109,'multiline':False]
['text':' Start watching all changes in the cluster.','line_number':114,'multiline':False]
['text':' Repeat the test, this time using the 'dropTarget' option with an existing target','line_number':128,'multiline':False]
['text':' collection.','line_number':129,'multiline':False]
['text':' dropTarget ','line_number':133,'multiline':True]
['text':' Test renaming a collection to a different database. Do not run this in the mongos','line_number':153,'multiline':False]
['text':' passthrough suites since we cannot guarantee the primary shard of the target database','line_number':154,'multiline':False]
['text':' and renameCollection requires the source and destination to be on the same shard.','line_number':155,'multiline':False]
['text':' Ensure the target database exists.','line_number':158,'multiline':False]
['text':' Do not check the 'ns' field since it will contain the namespace of the temp','line_number':164,'multiline':False]
['text':' collection created when renaming a collection across databases.','line_number':165,'multiline':False]
['text':' Rename across databases also drops the source collection after the collection is','line_number':170,'multiline':False]
['text':' copied over.','line_number':171,'multiline':False]
['text':' Test the behavior of a change stream watching the target collection of a $out','line_number':181,'multiline':False]
['text':' aggregation stage.','line_number':182,'multiline':False]
['text':' Do not check the 'ns' field since it will contain the namespace of the temp','line_number':184,'multiline':False]
['text':' collection created by the $out stage, before renaming to 'renamed_coll'.','line_number':185,'multiline':False]
['text':' The change stream should not be invalidated by the rename(s).','line_number':190,'multiline':False]
['text':' Drop the "system.views" collection to avoid view catalog errors in subsequent tests.','line_number':195,'multiline':False]
['text':' Recreate the test collection for the remainder of the test.','line_number':198,'multiline':False]
['text':' Dropping a collection should generate a 'drop' entry.','line_number':211,'multiline':False]
['text':' Insert to the test collection to queue up another change after the drop. This is needed','line_number':213,'multiline':False]
['text':' since the number of 'drop' notifications is not deterministic in the sharded passthrough','line_number':214,'multiline':False]
['text':' suites.','line_number':215,'multiline':False]
['text':' Operations on internal "system" collections should be filtered out and not included in','line_number':228,'multiline':False]
['text':' the change stream.','line_number':229,'multiline':False]
['text':' Creating a view will generate an insert entry on the "system.views" collection.','line_number':231,'multiline':False]
['text':' Drop the "system.views" collection.','line_number':234,'multiline':False]
['text':' Verify that the change stream does not report the insertion into "system.views", and is','line_number':236,'multiline':False]
['text':' not invalidated by dropping the system collection. Instead, it correctly reports the next','line_number':237,'multiline':False]
['text':' write to the test collection.','line_number':238,'multiline':False]
