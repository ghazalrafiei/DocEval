['text':' Tests of metadata notifications for a $changeStream on a whole database.','line_number':1,'multiline':False]
['text':' Do not run in whole-cluster passthrough since this test assumes that the change stream will be','line_number':2,'multiline':False]
['text':' invalidated by a database drop.','line_number':3,'multiline':False]
['text':' @tags: [do_not_run_in_whole_cluster_passthrough]','line_number':4,'multiline':False]
['text':' Write a document to the collection and test that the change stream returns it','line_number':18,'multiline':False]
['text':' and getMore command closes the cursor afterwards.','line_number':19,'multiline':False]
['text':' Create oplog entries of type insert, update, and delete.','line_number':25,'multiline':False]
['text':' Drop and recreate the collection.','line_number':30,'multiline':False]
['text':' We should get 4 oplog entries of type insert, update, delete, and drop.','line_number':33,'multiline':False]
['text':' Get a valid resume token that the next change stream can use.','line_number':43,'multiline':False]
['text':' For whole-db streams, it is possible to resume at a point before a collection is dropped.','line_number':49,'multiline':False]
['text':' Wait for two-phase drop to complete, so that the UUID no longer exists.','line_number':51,'multiline':False]
['text':' Test that invalidation entries for other databases are filtered out.','line_number':58,'multiline':False]
['text':' Create collection on the database being watched.','line_number':64,'multiline':False]
['text':' Create the $changeStream. We set 'doNotModifyInPassthroughs' so that this test will not be','line_number':67,'multiline':False]
['text':' upconverted to a cluster-wide stream, which would return an entry for the dropped collection','line_number':68,'multiline':False]
['text':' in the other database.','line_number':69,'multiline':False]
['text':' Drop the collection on the other database, this should *not* invalidate the change stream.','line_number':73,'multiline':False]
['text':' Insert into the collection in the watched database, and verify the change stream is able to','line_number':76,'multiline':False]
['text':' pick it up.','line_number':77,'multiline':False]
['text':' Test that renaming a collection generates a 'rename' entry for the 'from' collection. MongoDB','line_number':83,'multiline':False]
['text':' does not allow renaming of sharded collections, so only perform this test if the collection','line_number':84,'multiline':False]
['text':' is not sharded.','line_number':85,'multiline':False]
['text':' Repeat the test, this time using the 'dropTarget' option with an existing target','line_number':100,'multiline':False]
['text':' collection.','line_number':101,'multiline':False]
['text':' dropTarget ','line_number':105,'multiline':True]
['text':' Test renaming a collection from the database being watched to a different database. Do','line_number':124,'multiline':False]
['text':' not run this in the mongos passthrough suites since we cannot guarantee the primary shard','line_number':125,'multiline':False]
['text':' of the target database, and renameCollection requires the source and destination to be on','line_number':126,'multiline':False]
['text':' the same shard.','line_number':127,'multiline':False]
['text':' Create target collection to ensure the database exists.','line_number':130,'multiline':False]
['text':' Rename across databases drops the source collection after the collection is copied','line_number':135,'multiline':False]
['text':' over.','line_number':136,'multiline':False]
['text':' Test renaming a collection from a different database to the database being watched.','line_number':143,'multiline':False]
['text':' Do not check the 'ns' field since it will contain the namespace of the temp','line_number':146,'multiline':False]
['text':' collection created when renaming a collection across databases.','line_number':147,'multiline':False]
['text':' Test the behavior of a change stream watching the target collection of a $out aggregation','line_number':153,'multiline':False]
['text':' stage.','line_number':154,'multiline':False]
['text':' Note that $out will first create a temp collection, and then rename the temp collection','line_number':156,'multiline':False]
['text':' to the target. Do not explicitly check the 'ns' field.','line_number':157,'multiline':False]
['text':' The change stream should not be invalidated by the rename(s).','line_number':162,'multiline':False]
['text':' Drop the new collection to avoid an additional 'drop' notification when the database is','line_number':167,'multiline':False]
['text':' dropped.','line_number':168,'multiline':False]
['text':' Dropping a collection should return a 'drop' entry.','line_number':177,'multiline':False]
['text':' Operations on internal "system" collections should be filtered out and not included in the','line_number':184,'multiline':False]
['text':' change stream.','line_number':185,'multiline':False]
['text':' Creating a view will generate an insert entry on the "system.views" collection.','line_number':187,'multiline':False]
['text':' Drop the "system.views" collection.','line_number':189,'multiline':False]
['text':' Verify that the change stream does not report the insertion into "system.views", and is','line_number':191,'multiline':False]
['text':' not invalidated by dropping the system collection. Instead, it correctly reports the next','line_number':192,'multiline':False]
['text':' write to the test collection.','line_number':193,'multiline':False]
['text':' Dropping the database should generate a 'dropDatabase' notification followed by an','line_number':199,'multiline':False]
['text':' 'invalidate'.','line_number':200,'multiline':False]
['text':' Even after the 'invalidate' event has been filtered out, the cursor should hold the resume token','line_number':206,'multiline':False]
['text':' of the 'invalidate' event.','line_number':207,'multiline':False]
