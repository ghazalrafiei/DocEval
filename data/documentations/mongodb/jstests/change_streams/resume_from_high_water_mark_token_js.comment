['text':'*
 * Tests that a synthetic high-water-mark (HWM) token obeys the same semantics as a regular token.
 ','line_number':1,'multiline':True]
['text':' Drop the test collections to assure a clean run.','line_number':10,'multiline':False]
['text':' Helper function to ensure that the specified command is not modified by the passthroughs.','line_number':16,'multiline':False]
['text':' Tracks _id of documents inserted to ensure that we do not duplicate.','line_number':22,'multiline':False]
['text':' Open a stream on the test collection, before the collection has actually been created. Make','line_number':24,'multiline':False]
['text':' sure that this command is not modified in the passthroughs, since this behaviour is only','line_number':25,'multiline':False]
['text':' relevant for single-collection streams.','line_number':26,'multiline':False]
['text':' We should be able to retrieve a postBatchResumeToken (PBRT) even with no collection present.','line_number':30,'multiline':False]
['text':' We can resumeAfter and startAfter the token while the collection still does not exist.','line_number':36,'multiline':False]
['text':' If the collection is then created with a case-insensitive collation, the resumed stream','line_number':52,'multiline':False]
['text':' continues to use the simple collation. We see 'INSERT_TWO' but not 'insert_one'.','line_number':53,'multiline':False]
['text':' We can resume from the pre-creation high water mark if we do not specify a collation...','line_number':62,'multiline':False]
['text':' ... but we will not inherit the collection's case-insensitive collation, instead defaulting','line_number':72,'multiline':False]
['text':' to the simple collation. We will therefore match 'INSERT_TWO' but not 'insert_one'.','line_number':73,'multiline':False]
['text':' If we do specify a non-simple collation, it will be adopted by the pipeline.','line_number':79,'multiline':False]
['text':' Now we match both 'insert_one' and 'INSERT_TWO'.','line_number':90,'multiline':False]
['text':' Now open a change stream with batchSize:0 in order to produce a new high water mark.','line_number':98,'multiline':False]
['text':' Insert two more documents into the collection for testing purposes.','line_number':111,'multiline':False]
['text':' We can resume the stream on the collection using the HWM...','line_number':115,'multiline':False]
['text':' ... but we do not inherit the collection's case-insensitive collation, matching 'INSERT_FOUR'','line_number':126,'multiline':False]
['text':' but not the preceding 'insert_three'.','line_number':127,'multiline':False]
['text':' Drop the collection and obtain a new pre-creation high water mark. We will use this later.','line_number':132,'multiline':False]
['text':' Now create each of the test collections with the default simple collation.','line_number':141,'multiline':False]
['text':' Open a stream on the test collection, and write a document to it.','line_number':145,'multiline':False]
['text':' Write an event to the unrelated collection in order to advance the PBRT, and then consume all','line_number':149,'multiline':False]
['text':' events. When we see a PBRT that is greater than the timestamp of the last event (stored in','line_number':150,'multiline':False]
['text':' 'relatedEvent'), we know it must be a synthetic high-water-mark token.','line_number':151,'multiline':False]
['text':'','line_number':152,'multiline':False]
['text':' Note that the first insert into the unrelated collection may not be enough to advance the','line_number':153,'multiline':False]
['text':' PBRT; some passthroughs will group the unrelated write into a transaction with the related','line_number':154,'multiline':False]
['text':' write, giving them the same timestamp. We put the unrelated insert into the assert.soon loop,','line_number':155,'multiline':False]
['text':' so that it will eventually get its own transaction with a new timestamp.','line_number':156,'multiline':False]
['text':' Now write some further documents to the collection before attempting to resume.','line_number':171,'multiline':False]
['text':' We can resumeAfter and startAfter the high water mark. We only see the latest 5 documents.','line_number':176,'multiline':False]
['text':' We never see the first document, whose _id was 0.','line_number':183,'multiline':False]
['text':' The _id of the last document inserted is (docId-1).','line_number':186,'multiline':False]
['text':' Now resumeAfter the token that was generated before the collection was created...','line_number':192,'multiline':False]
['text':' ... and confirm that we see all the events that have occurred since then.','line_number':198,'multiline':False]
['text':' Despite the fact that we just resumed from a token which was generated before the collection','line_number':209,'multiline':False]
['text':' existed and had no UUID, all subsequent HWMs should now have UUIDs. To test this, we first','line_number':210,'multiline':False]
['text':' get the current resume token, then write a document to the unrelated collection. We then wait','line_number':211,'multiline':False]
['text':' until the PBRT advances, which means that we now have a new HWM token.','line_number':212,'multiline':False]
['text':' We can resume from the token if the collection is dropped...','line_number':222,'multiline':False]
['text':' ... or if the collection is recreated with a different UUID...','line_number':229,'multiline':False]
['text':' ... or if we specify an explicit collation.','line_number':236,'multiline':False]
['text':' Even after the collection is recreated, we can still resume from the pre-creation HWM...','line_number':244,'multiline':False]
['text':' ...and we can still see all the events from the collection's original incarnation...','line_number':250,'multiline':False]
['text':' ... this time followed by an invalidate, as the collection is dropped.','line_number':260,'multiline':False]
