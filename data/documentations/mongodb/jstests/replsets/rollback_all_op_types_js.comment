['text':'
 * Test to ensure that rollback is able to handle every supported operation type correctly.
 *
 * The purpose of this integration test is to check that rollback is able to parse and revert all
 * oplog entry types that would be generated in a real system. It provides a level of assurance at a
 * higher system layer than our unit tests, which can be considerably more "artificial". Unit tests
 * will mock many system components, and sometimes will mock behaviors that don't necessarily match
 * true system behavior i.e. mocking an oplog entry with an incorrect format. So, this integration
 * test provides an additional verification of rollback's correctness within a real replica set.
 *
 * @tags: [requires_fcv_53]
 ','line_number':1,'multiline':True]
['text':'*
 * All operation types that are able to be rolled back.
 *
 * Each operation type maps to an array of test objects that contains an 'init' function, an
 * 'op' function, and an optional 'description' field. Some operations depend on the current
 * state of the database, so the 'init' function provides a way to set up the database before an
 * operation is executed. All init functions are executed at the very beginning of the test, as
 * part of CommonOps. Also, to provide isolation between commands, each is given its own
 * database to execute in.
 *
 * Each operation has an array of test objects to allow testing of multiple variations of an
 * operation. Each test case in an array will be executed in isolation.
 *
 * Note: The 'dropDatabase' command is excluded and tested separately. It cannot be tested
 * directly using the RollbackTest fixture, since the command is always up-converted to use
 * majority write concern in 3.6.
 *
 ','line_number':18,'multiline':True]
['text':' In 3.6 only document CRUD operations are grouped into a single applyOps oplog','line_number':225,'multiline':False]
['text':' entry.','line_number':226,'multiline':False]
['text':' In 3.6 only document CRUD operations are grouped into a single applyOps oplog','line_number':250,'multiline':False]
['text':' entry.','line_number':251,'multiline':False]
['text':'*
 * Create the test name string given an operation name and the test case index. The test
 * name for the nth test case of an operation called "opName", with description "description",
 * will be "opName_<n>_description".
 ','line_number':266,'multiline':True]
['text':'*
 * Operations that will be present on both nodes, before the common point.
 ','line_number':279,'multiline':True]
['text':' Ensure there is at least one common op between nodes.','line_number':283,'multiline':False]
['text':' Run init functions for each op type. Each is given its own database to run in and a','line_number':286,'multiline':False]
['text':' standard collection name to use.','line_number':287,'multiline':False]
['text':'*
 * Operations that will be performed on the rollback node past the common point.
 ','line_number':298,'multiline':True]
['text':' Returns a new object with any metadata fields from the given command object removed.','line_number':302,'multiline':False]
['text':' Execute the operation given by 'opFn'. 'opName' is the string identifier of the','line_number':313,'multiline':False]
['text':' operation to be executed.','line_number':314,'multiline':False]
['text':' Override 'runCommand' so we can capture the raw command object for each operation','line_number':316,'multiline':False]
['text':' and log it, to improve diagnostics.','line_number':317,'multiline':False]
['text':' Reset runCommand to its normal behavior.','line_number':327,'multiline':False]
['text':' Execute all test cases for this operation type.','line_number':334,'multiline':False]
['text':' Set up Rollback Test.','line_number':343,'multiline':False]
['text':' Perform the operations that will be rolled back.','line_number':347,'multiline':False]
['text':' Complete cycle one of rollback. Data consistency is checked automatically after entering','line_number':351,'multiline':False]
['text':' steady state.','line_number':352,'multiline':False]
['text':' Again, perform operations that will be rolled back. This time, each node in the replica set','line_number':357,'multiline':False]
['text':' has assumed a different role and will roll back operations that were applied in a different','line_number':358,'multiline':False]
['text':' state (e.g. as a SECONDARY as opposed to a PRIMARY).','line_number':359,'multiline':False]
['text':' Complete cycle two of rollback.','line_number':363,'multiline':False]
['text':' Perform operations that will be rolled back one more time.','line_number':368,'multiline':False]
['text':' Complete cycle three of rollback. After this cycle is completed, the replica set returns to','line_number':372,'multiline':False]
['text':' its original topology.','line_number':373,'multiline':False]
['text':' Check the replica set.','line_number':378,'multiline':False]
