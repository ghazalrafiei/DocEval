['text':'*
 * Tests that the server logs ops on the secondary if and only if they are slow to apply.
 * We should only report ops if they take longer than "slowMS" to apply on a secondary.
 * We intentionally target CRUD ops in this test, since we know we should be the only ones
 * issuing them. See below for details on how we simulate quickness and slowness.
 ','line_number':1,'multiline':True]
['text':' The default WC is majority and this test can't satisfy majority writes.','line_number':24,'multiline':False]
['text':'*
 * Part 1: Issue a fast op and make sure that we do *not* log it.
 * We ensure the op is always considered fast by vastly increasing the "slowMS" threshold.
 ','line_number':28,'multiline':True]
['text':' Create collection explicitly so the insert doesn't have to do it.','line_number':33,'multiline':False]
['text':' Set "slowMS" to a very high value (in milliseconds).','line_number':37,'multiline':False]
['text':' Issue a write and make sure we replicate it.','line_number':40,'multiline':False]
['text':' The op should not have been logged.','line_number':44,'multiline':False]
['text':'*
 * Part 2: Issue a slow op and make sure that we *do* log it when the sample rate is set to 1.
 * We use a failpoint in applyOplogEntryOrGroupedInserts which blocks after we read the time at the
 * start of the application of the op, and we wait there to simulate slowness.
 ','line_number':49,'multiline':True]
['text':' Create collection explicitly so the insert doesn't have to do it.','line_number':55,'multiline':False]
['text':' Set "sampleRate" to 1 and "slowMS" to a low value (in milliseconds).','line_number':59,'multiline':False]
['text':' Hang right after taking note of the start time of the application.','line_number':62,'multiline':False]
['text':' Issue a write and make sure we've hit the failpoint before moving on.','line_number':66,'multiline':False]
['text':' Wait for an amount of time safely above the "slowMS" we set.','line_number':70,'multiline':False]
['text':' Disable the hangAfterRecordingOpApplicationsStartTime failpoint so the op finish can applying.','line_number':73,'multiline':False]
['text':' Make sure we log that insert op.','line_number':76,'multiline':False]
['text':'*
 * Part 3: Issue a slow op and make sure that we do *not* log it when the sample rate is set to 0.
 ','line_number':80,'multiline':True]
['text':' Set "sampleRate" to 0 and "slowMS" to a low value (in milliseconds).','line_number':84,'multiline':False]
['text':' Hang right after taking note of the start time of the application.','line_number':87,'multiline':False]
['text':' Issue a write and make sure we've hit the failpoint before moving on.','line_number':91,'multiline':False]
['text':' Wait for an amount of time safely above the "slowMS" we set.','line_number':95,'multiline':False]
['text':' Disable the hangAfterRecordingOpApplicationsStartTime failpoint so the op finish can applying.','line_number':98,'multiline':False]
['text':' Ensure that the write was replicated.','line_number':101,'multiline':False]
['text':' The op should not have been logged.','line_number':104,'multiline':False]
['text':'*
 * Part 4: Issue a slow op and verify that we log it when the sample rate is 0 but log verbosity
 * is set to 1.
 ','line_number':109,'multiline':True]
['text':' Set the log verbosity for the replication component to 1.','line_number':114,'multiline':False]
['text':' Hang right after taking note of the start time of the application.','line_number':117,'multiline':False]
['text':' Issue a write and make sure we've hit the failpoint before moving on.','line_number':121,'multiline':False]
['text':' Wait for an amount of time safely above the "slowMS" we set.','line_number':125,'multiline':False]
['text':' Disable the hangAfterRecordingOpApplicationsStartTime failpoint so the op finish can applying.','line_number':128,'multiline':False]
['text':' Ensure that the write was replicated.','line_number':131,'multiline':False]
['text':' Make sure we log that insert op.','line_number':134,'multiline':False]
