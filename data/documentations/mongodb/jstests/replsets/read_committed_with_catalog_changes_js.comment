['text':'*
 * Test read committed functionality when mixed with catalog changes. Since we don't support
 * multiple versions of the catalog, operations that modify the catalog may need to lock out
 * committed readers until the modification is in the committed snapshot.
 *
 * The following replicated operations are tested here:
 *  - creating a collection in an existing db
 *  - creating a collection in a new db
 *  - dropping a collection
 *  - dropping a db
 *  - dropping a collection and creating one with the same name
 *  - dropping a db and creating one with the same name
 *  - renaming a collection to a new, unused name
 *  - renaming a collection on top of an existing collection
 *  - creating a foreground index
 *  - creating a background index
 *  - dropping an index
 *
 * The following non-replicated operations are tested here:
 *  - repair database
 *  - reindex collection
 *  - compact collection
 *
 * @tags: [
 *   requires_majority_read_concern,
 * ]
 ','line_number':1,'multiline':True]
['text':' Each test case includes a 'prepare' method that sets up the initial state starting with a','line_number':32,'multiline':False]
['text':' database that has been dropped, a 'performOp' method that does some operation, and two','line_number':33,'multiline':False]
['text':' arrays, 'blockedCollections' and 'unblockedCollections', that list the collections that','line_number':34,'multiline':False]
['text':' should be blocked or unblocked between the time the operation is performed until it is','line_number':35,'multiline':False]
['text':' committed. If the operation is local only and isn't replicated, the test case should include','line_number':36,'multiline':False]
['text':' a 'localOnly' field set to true. Test cases are not allowed to touch any databases other than','line_number':37,'multiline':False]
['text':' the one passed in.','line_number':38,'multiline':False]
['text':' Only existent collections are blocked.','line_number':56,'multiline':False]
['text':' Drop collection explicitly during the preparation phase while we are still able','line_number':72,'multiline':False]
['text':' to write to a majority. Otherwise, dropDatabase() will drop the collection','line_number':73,'multiline':False]
['text':' and wait for the collection drop to be replicated to a majority of the nodes.','line_number':74,'multiline':False]
['text':' Drop collection explicitly during the preparation phase while we are still able','line_number':98,'multiline':False]
['text':' to write to a majority. Otherwise, dropDatabase() will drop the collection','line_number':99,'multiline':False]
['text':' and wait for the collection drop to be replicated to a majority of the nodes.','line_number':100,'multiline':False]
['text':'doesNotExist','line_number':119,'multiline':True]
['text':'doesNotExist','line_number':131,'multiline':True]
['text':' This test create indexes with majority of nodes not available for replication.','line_number':139,'multiline':False]
['text':' So, disabling index build commit quorum.','line_number':140,'multiline':False]
['text':' This test create indexes with majority of nodes not available for replication.','line_number':148,'multiline':False]
['text':' So, disabling index build commit quorum.','line_number':149,'multiline':False]
['text':' This test create indexes with majority of nodes not available for replication.','line_number':165,'multiline':False]
['text':' So, disabling index build commit quorum.','line_number':166,'multiline':False]
['text':' Remaining case is a local-only operation.','line_number':176,'multiline':False]
['text':' At least on WiredTiger, compact is fully inplace so it doesn't need to block readers.','line_number':178,'multiline':False]
['text':' This test create indexes with majority of nodes not available for replication.','line_number':183,'multiline':False]
['text':' So, disabling index build commit quorum.','line_number':184,'multiline':False]
['text':' It is fine for a storage engine to support snapshots but not compact. Since','line_number':190,'multiline':False]
['text':' compact doesn't block any collections we are fine with doing a no-op here.','line_number':191,'multiline':False]
['text':' Other errors should fail the test.','line_number':192,'multiline':False]
['text':' Assertion helpers. These must get all state as arguments rather than through closure since','line_number':202,'multiline':False]
['text':' they may be passed in to a Thread.','line_number':203,'multiline':False]
['text':' With point-in-time catalog lookups, reads no longer block waiting for the majority commit','line_number':205,'multiline':False]
['text':' point to advance.','line_number':206,'multiline':False]
['text':' Exhaust the cursor to avoid leaking cursors on the server.','line_number':214,'multiline':False]
['text':' Set up a set and grab things for later.','line_number':218,'multiline':False]
['text':' Get connections.','line_number':239,'multiline':False]
['text':' The default WC is majority and stopServerReplication will prevent satisfying any majority writes.','line_number':243,'multiline':False]
['text':' This is the DB that all of the tests will use.','line_number':247,'multiline':False]
['text':' This DB won't be used by any tests so it should always be unblocked.','line_number':250,'multiline':False]
['text':' Do some sanity checks.','line_number':265,'multiline':False]
['text':' All operations, whether replicated or not, must become visible automatically as long as','line_number':271,'multiline':False]
['text':' the secondary is keeping up.','line_number':272,'multiline':False]
['text':' Return to the initial state, then stop the secondary from applying new writes to prevent','line_number':279,'multiline':False]
['text':' them from becoming committed.','line_number':280,'multiline':False]
['text':' If the tested operation isn't replicated, do a write to the side collection before','line_number':284,'multiline':False]
['text':' performing the operation. This will ensure that the operation happens after an','line_number':285,'multiline':False]
['text':' uncommitted write which prevents it from immediately being marked as committed.','line_number':286,'multiline':False]
['text':' Perform the op and ensure that blocked collections block and unblocked ones don't.','line_number':291,'multiline':False]
['text':' Use background threads to test that reads that start blocked can complete if the','line_number':297,'multiline':False]
['text':' operation they are waiting on becomes committed while the read is still blocked.','line_number':298,'multiline':False]
['text':' We don't do this when testing auth because Thread's don't propagate auth','line_number':299,'multiline':False]
['text':' credentials.','line_number':300,'multiline':False]
['text':' This function must get all inputs as arguments and can't use closure because it','line_number':302,'multiline':False]
['text':' is used in a Thread.','line_number':303,'multiline':False]
['text':' Use a longer timeout since we expect to block for a little while (at least 2','line_number':305,'multiline':False]
['text':' seconds).','line_number':306,'multiline':False]
['text':' Give the reads a chance to block.','line_number':314,'multiline':False]
['text':' Try the committed read again after sleeping to ensure that it still blocks even if it','line_number':317,'multiline':False]
['text':' isn't immediately after the operation.','line_number':318,'multiline':False]
['text':' Restart oplog application on the secondary and ensure the blocked collections become','line_number':321,'multiline':False]
['text':' unblocked.','line_number':322,'multiline':False]
['text':' Wait for the threads to complete and report any errors encountered from running them.','line_number':327,'multiline':False]
['text':' Make join a no-op for the finally below.','line_number':330,'multiline':False]
['text':' Make sure we wait for all threads to finish.','line_number':334,'multiline':False]
