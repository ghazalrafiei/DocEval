['text':'*
 * Tests that initial sync properly fetches from the oldest active transaction timestamp, even if
 * the beginApplyingTimestamp and the stopTimestamp are the same. The beginApplyingTimestamp is the
 * timestamp of the oplog entry that was last applied on the sync source before initial sync begins.
 * It is also the timestamp after which we will start applying operations during initial sync. The
 * stopTimestamp is the timestamp of the oplog entry that was last applied on the sync source when
 * before the oplog application phase of initial sync begins. If they are the same, it means that
 * no operations were run on the sync source during the collection cloning phase of initial sync and
 * so no oplog entries need to be applied.
 *
 * To make sure that it is applying from the correct point, the test prepares a transaction before
 * the beginFetchingTimestamp and commits it before the beginApplyingTimestamp. Since the
 * transaction is not active by the time initial sync begins, its prepareTransaction oplog entry
 * won't be fetched during oplog application and trying to apply the commitTransaction oplog entry
 * will cause initial sync to fail.
 *
 * @tags: [
 *   uses_prepare_transaction,
 *   uses_transactions,
 * ]
 ','line_number':1,'multiline':True]
['text':' The default WC is majority and this test can't satisfy majority writes.','line_number':32,'multiline':False]
['text':' Prepare a transaction so that there is an active transaction with an oplog entry. The','line_number':54,'multiline':False]
['text':' timestamp of the first oplog entry of this transaction will become the beginFetchingTimestamp','line_number':55,'multiline':False]
['text':' during initial sync.','line_number':56,'multiline':False]
['text':' Commit the first transaction so that we have an operation that is fetched during initial sync','line_number':71,'multiline':False]
['text':' but should not be applied. If this is applied, initial sync will fail because while trying to','line_number':72,'multiline':False]
['text':' apply the commitTransaction oplog entry, it will fail to get the prepareTransaction oplog','line_number':73,'multiline':False]
['text':' entry since its optime is before the beginFetchingTimestamp. Doing another operation will','line_number':74,'multiline':False]
['text':' also cause the beginApplyingTimestamp to be different from the beginFetchingTimestamp. Note','line_number':75,'multiline':False]
['text':' that since the beginApplyingTimestamp is the timestamp after which operations are applied','line_number':76,'multiline':False]
['text':' during initial sync, this commitTransaction will not be applied.','line_number':77,'multiline':False]
['text':' Restart the secondary with startClean set to true so that it goes through initial sync. Since','line_number':84,'multiline':False]
['text':' we won't be running any operations during collection cloning, the beginApplyingTimestamp and','line_number':85,'multiline':False]
['text':' stopTimestamp should be the same.','line_number':86,'multiline':False]
['text':' signal','line_number':88,'multiline':False]
['text':' Validation would encounter a prepare conflict on the open transaction.','line_number':90,'multiline':False]
['text':' wait ','line_number':93,'multiline':True]
['text':' Wait for the secondary to complete initial sync.','line_number':99,'multiline':False]
['text':' Make sure the secondary fetched enough transaction oplog entries.','line_number':104,'multiline':False]
['text':' Make sure the first transaction committed properly and is reflected after the initial sync.','line_number':109,'multiline':False]
