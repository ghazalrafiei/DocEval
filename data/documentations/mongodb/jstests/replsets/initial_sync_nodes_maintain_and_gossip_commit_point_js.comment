['text':'*
 * Tests that nodes in initial sync update their commit point and gossip their commit point to
 * other nodes. This is done starting with a 3 node replica set with one non-voting secondary. We
 * disconnect the non-voting secondary from the other nodes and then add a new node to the replica
 * set. Thus, the non-voting secondary can only communicate with the initial syncing node. We then
 * hang the initial syncing node at various stages, perform multiple majority writes to advance the
 * commit point, and verify that the commit point on the initial syncing node is updated. Finally,
 * we ensure that the disconnected secondary is able to update its commit point from the initial
 * syncing node via heartbeats.
 ','line_number':1,'multiline':True]
['text':' Insert initial data to ensure that the repl set is initialized correctly.','line_number':28,'multiline':False]
['text':'
 * Fetches the 'lastCommittedOpTime' field of the given node.
 ','line_number':32,'multiline':True]
['text':' Disconnect the non-voting secondary from the other nodes so that it won't update its commit point','line_number':43,'multiline':False]
['text':' from the other nodes' heartbeats.','line_number':44,'multiline':False]
['text':' Make sure our initial sync node does not sync from the node with votes 0.','line_number':51,'multiline':False]
['text':' Hang the initial sync node after it sets 'beginFetchingTimestamp' to ensure that the node will','line_number':67,'multiline':False]
['text':' not set 'stopTimestamp' until after we perform the next write.','line_number':68,'multiline':False]
['text':' Do a write to be applied by the initial sync node. This is necessary because we cannot update the','line_number':71,'multiline':False]
['text':' commit point if the term of `lastAppliedOpTime` is not equal to the current term.','line_number':72,'multiline':False]
['text':' Wait for knowledge of the last commit point to advance to the last write on the primary and','line_number':74,'multiline':False]
['text':' secondary.','line_number':75,'multiline':False]
['text':' Verify that the commit point has advanced on the primary and secondary.','line_number':82,'multiline':False]
['text':' Verify that the commit point has *NOT* advanced on the non-voting secondary.','line_number':86,'multiline':False]
['text':' Allow the node to proceed to the oplog applying phase of initial sync and ensure that the oplog','line_number':93,'multiline':False]
['text':' fetcher thread is still running.','line_number':94,'multiline':False]
['text':' The initial sync node will be able to update its commit point after fetching this write, since it','line_number':98,'multiline':False]
['text':' set its `lastAppliedOpTime` from the previous write.','line_number':99,'multiline':False]
['text':' Wait for knowledge of the last commit point to advance to the last write on the primary and','line_number':101,'multiline':False]
['text':' secondary.','line_number':102,'multiline':False]
['text':' Verify that the commit point has advanced on the primary and secondary.','line_number':109,'multiline':False]
['text':' Allow the initial sync node to complete oplog fetching but hang it before it completes initial','line_number':113,'multiline':False]
['text':' sync.','line_number':114,'multiline':False]
['text':' Verify that the initial sync node receives the commit point from the primary, either via oplog','line_number':118,'multiline':False]
['text':' fetching or by a heartbeat. This will usually happen via oplog fetching but in some cases it is','line_number':119,'multiline':False]
['text':' possible that the OplogFetcher shuts down before this ever happens. See SERVER-76695 for details.','line_number':120,'multiline':False]
['text':' We only assert that it is greater than or equal to the second commit point because it is possible','line_number':121,'multiline':False]
['text':' for the commit point to not yet be advanced by the primary when we fetch the oplog entry.','line_number':122,'multiline':False]
['text':' compareOpTimes will throw an error if given an invalid opTime, and if the','line_number':125,'multiline':False]
['text':' node has not yet advanced its opTime it will still have the default one,','line_number':126,'multiline':False]
['text':' which is invalid.','line_number':127,'multiline':False]
['text':' Verify that the non-voting secondary has received the updated commit point via heartbeats from','line_number':134,'multiline':False]
['text':' the initial sync node.','line_number':135,'multiline':False]
['text':' Since the primary sends a shut down command to all secondaries in `rst.stopSet()`, we reconnect','line_number':141,'multiline':False]
['text':' the disconnected secondary to the primary to allow it to be shut down.','line_number':142,'multiline':False]
