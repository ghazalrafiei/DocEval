['text':'*
 * Tests that initial sync successfully reconstructs multiple prepared transactions during the oplog
 * application phase of initial sync and that we can commit or abort the transactions afterwards.
 * It also tests that after reconstructing a prepared transaction at the end of initial sync, we can
 * successfully apply a commitTransaction oplog entry during secondary oplog application. To be able
 * to test this, we have to pause collection cloning and run operations on the sync source so that
 * we have oplog entries to apply during the oplog application phase of initial sync. We will also
 * prepare a transaction while collection cloning is paused to test applying a prepare oplog entry
 * during oplog application phase of initial sync.
 *
 * @tags: [
 *   uses_prepare_transaction,
 *   uses_transactions,
 * ]
 ','line_number':1,'multiline':True]
['text':' Increase the election timeout so that we do not accidentally trigger an election while the','line_number':24,'multiline':False]
['text':' secondary is restarting.','line_number':25,'multiline':False]
['text':' The default WC is majority and this test can't satisfy majority writes.','line_number':34,'multiline':False]
['text':' Restart the secondary with startClean set to true so that it goes through initial sync. Also','line_number':82,'multiline':False]
['text':' restart the node with a failpoint turned on that will pause initial sync after the secondary','line_number':83,'multiline':False]
['text':' has copied {_id: 1}, {_id: 2} and {_id: 3}. This way we can do some writes on the sync source','line_number':84,'multiline':False]
['text':' while initial sync is paused and know that its operations won't be copied during collection','line_number':85,'multiline':False]
['text':' cloning. Instead, the writes must be applied during oplog application.','line_number':86,'multiline':False]
['text':' signal ','line_number':87,'multiline':True]
['text':' wait ','line_number':98,'multiline':True]
['text':' Wait for failpoint to be reached so we know that collection cloning is paused.','line_number':100,'multiline':False]
['text':' Perform writes while collection cloning is paused so that we know they must be applied during','line_number':109,'multiline':False]
['text':' the oplog application stage of initial sync.','line_number':110,'multiline':False]
['text':' Prepare a transaction while collection cloning is paused so that its oplog entry must be','line_number':119,'multiline':False]
['text':' applied during the oplog application phase of initial sync.','line_number':120,'multiline':False]
['text':' Resume initial sync.','line_number':127,'multiline':False]
['text':' Wait for the secondary to complete initial sync.','line_number':131,'multiline':False]
['text':' Wait for the commit point to advance past the "prepare" oplog entry for transaction four.','line_number':133,'multiline':False]
['text':' Make sure that while reading from the node that went through initial sync, we can't read','line_number':141,'multiline':False]
['text':' changes to the documents from any of the prepared transactions after initial sync. Also, make','line_number':142,'multiline':False]
['text':' sure that the writes that happened when collection cloning was paused happened.','line_number':143,'multiline':False]
['text':' Make sure that we can't read changes to the document from the first prepared transaction','line_number':149,'multiline':False]
['text':' after initial sync.','line_number':150,'multiline':False]
['text':' Make sure that we can see the data from a committed transaction on the secondary if it was','line_number':158,'multiline':False]
['text':' applied during secondary oplog application.','line_number':159,'multiline':False]
['text':' Make sure that we can't read changes to the document from the first prepared transaction','line_number':164,'multiline':False]
['text':' after initial sync.','line_number':165,'multiline':False]
['text':' Make sure that we can see the data from a committed transaction on the secondary if it was','line_number':173,'multiline':False]
['text':' applied during secondary oplog application.','line_number':174,'multiline':False]
['text':' Step up the secondary after initial sync is done and make sure the other two transactions are','line_number':179,'multiline':False]
['text':' properly prepared.','line_number':180,'multiline':False]
['text':' Force the second session to use the same lsid and txnNumber as from before the restart. This','line_number':185,'multiline':False]
['text':' ensures that we're working with the same session and transaction.','line_number':186,'multiline':False]
['text':' Make sure that we can't read changes to the document from the second prepared transaction','line_number':193,'multiline':False]
['text':' after initial sync.','line_number':194,'multiline':False]
['text':' Make sure that another write on the same document from the second transaction causes a write','line_number':197,'multiline':False]
['text':' conflict.','line_number':198,'multiline':False]
['text':' Make sure that we cannot add other operations to the second transaction since it is prepared.','line_number':204,'multiline':False]
['text':' Make sure we can successfully commit the second transaction after recovery.','line_number':216,'multiline':False]
['text':' Make sure that we can run another conflicting transaction without any problems','line_number':227,'multiline':False]
['text':' Force the third session to use the same lsid and txnNumber as from before the restart. This','line_number':234,'multiline':False]
['text':' ensures that we're working with the same session and transaction.','line_number':235,'multiline':False]
['text':' Make sure that we can't read changes to the document from the third prepared transaction','line_number':242,'multiline':False]
['text':' after initial sync.','line_number':243,'multiline':False]
['text':' Make sure that another write on the same document from the third transaction causes a write','line_number':246,'multiline':False]
['text':' conflict.','line_number':247,'multiline':False]
['text':' Make sure that we cannot add other operations to the third transaction since it is prepared.','line_number':253,'multiline':False]
['text':' Make sure we can successfully abort the third transaction after recovery.','line_number':265,'multiline':False]
