['text':'*
     * Runs a resumable index build rollback test.
     *
     * 'indexSpecs' is a 2d array that specifies all indexes that should be built. The first
     *   dimension indicates separate calls to the createIndexes command, while the second dimension
     *   is for indexes that are built together using one call to createIndexes.
     *
     * 'rollbackStartFailPoints' specifies the phases that the index builds will be in when rollback
     *   starts. It is an array of objects that contain two fields: 'name', which specifies the name
     *   of the failpoint, and exactly one of 'logIdWithBuildUUID' and 'logIdWithIndexName'. The
     *   former is used for failpoints whose log message includes the build UUID, and the latter is
     *   used for failpoints whose log message includes the index name. The array must either
     *   contain one element, in which case that one element will be applied to all index builds
     *   specified above, or it must be exactly the length of 'indexSpecs'.
     *
     * 'rollbackEndFailPoints' specifies the phases that the index builds resume from after rollback
     *   completes. It follows the same roles as 'rollbackStartFailPoints'.
     *
     * 'locksYieldedFailPointNames' is an array of strings with the same length as the first
     *   dimension of 'indexSpecs'. It specifies a point for respective each index build between
     *   'rollbackEndFailPointName' and 'rollbackStartFailPointName' at which its locks are yielded.
     *
     * 'expectedResumePhases' is an array of strings that specify the name of the phases that each
     *   index build is expected to resume in. The array must either contain one string, in which
     *   case all index builds will be expected to resume from that phase, or it must be exactly
     *   the length of 'indexSpecs'.
     *
     * 'resumeChecks' is an array of objects that contain exactly one of 'numScannedAfterResume' and
     *   'skippedPhaseLogID'. The former is used to verify that the index build scanned the expected
     *   number of documents in the collection scan after resuming. The latter is used for phases
     *   which do not perform a collection scan after resuming, to verify that the index build did
     *   not resume from an earlier phase than expected. The log message must contain the buildUUID
     *   attribute.
     *
     * 'insertsToBeRolledBack' is documents which are inserted after transitioning to rollback
     *   operations and will be rolled back.
     *
     * 'sideWrites' is documents to insert into the side writes table. If either
     *   'rollbackStartFailPointName' or 'rollbackEndFailPointName' the above two are in the drain
     *   writes phase, this is required.
     *
     * 'shouldComplete' is a boolean which determines whether the index builds started by the test
     *   fixture should be expected to be completed when this function returns. If false, this
     *   function returns the collections, buildUUIDs, and index names of the index builds started
     *   by the test fixture.
     ','line_number':18,'multiline':True]
['text':' Set internalQueryExecYieldIterations to 0, internalIndexBuildBulkLoadYieldIterations to','line_number':88,'multiline':False]
['text':' 1, and maxIndexBuildDrainBatchSize to 1 so that the index builds are guaranteed to yield','line_number':89,'multiline':False]
['text':' their locks between the rollback end and start failpoints.','line_number':90,'multiline':False]
['text':' Wait until the index builds have completed their last operations that won't be rolled','line_number':138,'multiline':False]
['text':' back so that we can begin the operations that will be rolled back.','line_number':139,'multiline':False]
['text':' Move the index builds forward to points at which their locks are yielded. This allows the','line_number':145,'multiline':False]
['text':' primary to step down during the call to transitionToSyncSourceOperationsBeforeRollback()','line_number':146,'multiline':False]
['text':' below.','line_number':147,'multiline':False]
['text':' The index creation commands will report as having failed due to','line_number':166,'multiline':False]
['text':' InterruptedDueToReplStateChange, but they are still building in the background.','line_number':167,'multiline':False]
['text':' Wait until the index builds reach the desired starting points for the rollback.','line_number':172,'multiline':False]
['text':' Let the index builds yield their locks so that they can be aborted for rollback.','line_number':176,'multiline':False]
['text':' Clear the log so that we can verify that the index builds resume from the correct phases','line_number':191,'multiline':False]
['text':' after rollback.','line_number':192,'multiline':False]
['text':' The parallel shells run checkLog, so use this failpoint to synchronize starting the','line_number':195,'multiline':False]
['text':' parallel shells with rollback.','line_number':196,'multiline':False]
['text':' Wait for the index build to be aborted for rollback.','line_number':204,'multiline':False]
['text':' Disable the failpoint so that the builder thread can exit.','line_number':211,'multiline':False]
['text':' Wait until the parallel shells have all started.','line_number':217,'multiline':False]
