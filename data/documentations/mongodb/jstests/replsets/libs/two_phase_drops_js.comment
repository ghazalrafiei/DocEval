['text':'*
 * TwoPhaseDropCollectionTest is a library for testing two phase collection drops in a replica set.
 *
 * External tests can utilize this library to verify various aspects of the two phase collection
 * drop behavior. It provides a way to easily create a replicated collection and control its
 * transition between the 'PREPARE' and 'COMMIT' phase of a collection drop.
 *
 * Details:
 *
 * The test uses a 2 node replica set to verify both phases of a 2-phase collection drop: the
 * 'Prepare' and 'Commit' phase. Executing a 'drop' collection command should put that collection
 * into the 'Prepare' phase. The 'Commit' phase (physically dropping the collection) of a drop
 * operation with optime T should only be executed when C >= T, where C is the majority commit point
 * of the replica set.
 *
 ','line_number':1,'multiline':True]
['text':'*
     * Log a message for 'TwoPhaseDropCollectionTest'.
     ','line_number':30,'multiline':True]
['text':'*
     * Returns true if the replica set supports two phase drops that use 'system.drop' namespaces.
     * Since 4.2, 'system.drop' drop pending collections will be disabled on storage engines that
     * support drop pending idents natively. See serverStatus().storageEngine.supportsPendingDrops.
     ','line_number':37,'multiline':True]
['text':'*
     * Instance method version of supportsDropPendingNamespaces().
     ','line_number':51,'multiline':True]
['text':'*
     * Pause oplog application on a specified node.
     ','line_number':58,'multiline':True]
['text':'*
     * Resume oplog application on a specified node.
     ','line_number':66,'multiline':True]
['text':'*
     * Return a list of all collections in a given database. Use 'args' as the 'listCollections'
     * command arguments.
     ','line_number':74,'multiline':True]
['text':'*
     * Waits for all collections pending drop to be completely dropped on the given connection.
     ','line_number':85,'multiline':True]
['text':' Do a write on the primary to ensure that the commit point advances.','line_number':97,'multiline':False]
['text':'*
     * Return a list of all collection names in a given database.
     ','line_number':110,'multiline':True]
['text':'*
     * Initiates a 2 node replica set to be used for the test. Returns the constructed ReplSetTest.
     ','line_number':117,'multiline':True]
['text':' Initiate the replica set.','line_number':124,'multiline':False]
['text':' The default WC is majority and rsSyncApplyStop failpoint will prevent satisfying any','line_number':128,'multiline':False]
['text':' majority writes.','line_number':129,'multiline':False]
['text':'*
     * Creates a collection with name 'collName' in the test database and then awaits replication.
     ','line_number':137,'multiline':True]
['text':' Create the collection that will be dropped and let it replicate.','line_number':141,'multiline':False]
['text':'*
     * Return a regex matching a drop-pending namespace string for a collection with name
     * 'collName'.
     *
     * Drop pending names should be of the format "system.drop.<optime>.<collectionName>", where
     * 'optime' is the optime of the collection drop operation, encoded as a string, and
     * 'collectionName' is the original collection name.
     ','line_number':147,'multiline':True]
['text':'*
     * Returns true if the collection 'collName' exists on the primary.
     ','line_number':159,'multiline':True]
['text':'*
     * If 'collName' is in drop pending state on the primary, returns the name of the collection
     * after drop pending rename. If collection is not in drop pending state, returns false.
     ','line_number':169,'multiline':True]
['text':'*
     * If 'collName' in database 'db' is in drop pending state on the primary, returns the name
     * of the collection after drop pending rename. If collection is not in drop pending state,
     * returns false.
     ','line_number':178,'multiline':True]
['text':'*
     * Waits until 'collName' in database 'db' is not in drop pending state.
     ','line_number':195,'multiline':True]
['text':'*
     * Puts a collection with name 'collName' into the drop pending state. Returns the name of the
     * collection after it has been renamed to the 'system.drop' namespace.
     ','line_number':203,'multiline':True]
['text':' Pause application on secondary so that commit point doesn't advance, meaning that a','line_number':210,'multiline':False]
['text':' dropped collection on the primary will remain in 'drop-pending' state.','line_number':211,'multiline':False]
['text':' Drop the collection on the primary.','line_number':215,'multiline':False]
['text':' Make sure the collection doesn't appear in the normal collection list and that it is now','line_number':220,'multiline':False]
['text':' in 'drop-pending' state.','line_number':221,'multiline':False]
['text':'*
     * Restarts oplog application on the secondary and waits for the drop of collection 'collName'
     * to be committed (physically dropped).
     ','line_number':232,'multiline':True]
['text':' Let the secondary apply the collection drop operation, so that the replica set commit','line_number':237,'multiline':False]
['text':' point will advance, and the 'Commit' phase of the collection drop will complete on the','line_number':238,'multiline':False]
['text':' primary.','line_number':239,'multiline':False]
['text':' Make sure the collection has been fully dropped. It should not appear as a normal','line_number':247,'multiline':False]
['text':' collection or under the 'system.drop' namespace any longer. Physical collection drops may','line_number':248,'multiline':False]
['text':' happen asynchronously, any time after the drop operation is committed, so we wait to make','line_number':249,'multiline':False]
['text':' sure the collection is eventually dropped.','line_number':250,'multiline':False]
['text':' Bind the member functions onto this instead of the anonymous function.','line_number':253,'multiline':False]
['text':'*
     * Disable all fail points and shut down the replica set.
     ','line_number':262,'multiline':True]
