['text':'*
 * Wrapper around ReplSetTest for testing tenant migration behavior.
 ','line_number':1,'multiline':True]
['text':'*
 * This fixture allows the user to optionally pass in a custom ReplSetTest for the donor and
 * recipient replica sets, to be used for the test.
 *
 * If the caller does not provide their own replica set, a two node replset will be initialized
 * instead, with all nodes running the latest version.
 ','line_number':36,'multiline':True]
['text':'*
     * Takes in the response to the donarStartMigration command and asserts the command
     * works and the state is 'committed'.
     ','line_number':44,'multiline':True]
['text':'*
     * Takes in the response to the donarStartMigration command and asserts the command
     * works and the state is 'aborted', with optional errorCode.
     ','line_number':54,'multiline':True]
['text':'*
     * Make a new TenantMigrationTest
     *
     * @param {string} [name] the name of the replica sets
     * @param {string} [protocol] the migration protocol to use, either "multitenant migrations" or
     *     "shard merge". If no value is provided, will default to "shard merge" if the shard merge
     *     feature flag is enabled, otherwise will be set to "multitenant migrations"
     * @param {boolean} [enableRecipientTesting] whether recipient would actually migrate tenant
     *     data
     * @param {Object} [donorRst] the ReplSetTest instance to adopt for the donor
     * @param {Object} [recipientRst] the ReplSetTest instance to adopt for the recipient
     * @param {Object} [sharedOptions] an object that can contain 'nodes' <number>, the number of
     *     nodes each RST will contain, and 'setParameter' <object>, an object with various server
     *     parameters.
     * @param {boolean} [allowDonorReadAfterMigration] whether donor would allow reads after a
     *     committed migration.
     * @param {boolean} [initiateRstWithHighElectionTimeout] whether donor and recipient replica
     *     sets should be initiated with high election timeout.
     * @param {boolean} [quickGarbageCollection] whether to set a low garbageCollectionDelayMS.
     * @param {string} [insertDataForTenant] create dummy data in <tenantId>_test database.
     ','line_number':67,'multiline':True]
['text':' Default this to true so it is easier for data consistency checks.','line_number':95,'multiline':False]
['text':' A tenant migration recipient's `OplogFetcher` uses aggregation which does not support','line_number':108,'multiline':False]
['text':' tailable awaitdata cursors. For aggregation commands `OplogFetcher` will default to','line_number':109,'multiline':False]
['text':' half the election timeout (e.g: 5 seconds) between getMores. That wait is largely','line_number':110,'multiline':False]
['text':' unnecessary.','line_number':111,'multiline':False]
['text':'*
         * Creates a ReplSetTest instance. The repl set will have 2 nodes if not otherwise
         * specified.
         ','line_number':120,'multiline':True]
['text':' isDonor ','line_number':156,'multiline':True]
['text':' isDonor ','line_number':158,'multiline':True]
['text':' If we don't pass "protocol" and shard merge is enabled, we set the protocol to','line_number':160,'multiline':False]
['text':' "shard merge". Otherwise, the provided protocol is used, which defaults to','line_number':161,'multiline':False]
['text':' "multitenant migrations" if not provided.','line_number':162,'multiline':False]
['text':' Shard Merge installs TenantRecipientAccessBlockers only for tenants with data, so most','line_number':185,'multiline':False]
['text':' tests require some data.','line_number':186,'multiline':False]
['text':'*
     * Inserts documents into the specified collection on the donor primary.
     ','line_number':192,'multiline':True]
['text':'*
     * Inserts documents into the specified collection on the recipient primary.
     ','line_number':204,'multiline':True]
['text':'*
     * Runs a tenant migration with the given migration options and waits for the migration to
     * be committed or aborted.
     *
     * Returns the result of the initial donorStartMigration if it was unsuccessful. Otherwise,
     * returns the command response containing the migration state on the donor after the
     * migration has completed.
     ','line_number':216,'multiline':True]
['text':'*
     * Starts a tenant migration by running the 'donorStartMigration' command once.
     *
     * Returns the result of the 'donorStartMigration' command.
     ','line_number':245,'multiline':True]
['text':'*
     * Waits for a migration to complete by continuously polling the donor primary with
     * 'donorStartMigration' until the returned state is committed or aborted. Must be used with
     * startMigration, after the migration has been started for the specified tenantId.
     *
     * Returns the result of the last 'donorStartMigration' command executed.
     ','line_number':254,'multiline':True]
['text':' Assert that the migration has already been started.','line_number':264,'multiline':False]
['text':'*
     * Executes the 'donorStartMigration' command on the donor primary.
     *
     * This will return on the first successful command if 'waitForMigrationToComplete' is
     * set to false. Otherwise, it will continuously poll the donor primary until the
     * migration has been committed or aborted.
     *
     * If 'retryOnRetryableErrors' is set, this function will retry if the command fails
     * with a NotPrimary or network error.
     ','line_number':279,'multiline':True]
['text':' If the migration has been successfully committed, check the db hashes for the tenantId','line_number':326,'multiline':False]
['text':' between the donor and recipient.','line_number':327,'multiline':False]
['text':'*
     * Runs the donorForgetMigration command with the given migrationId and returns the response.
     *
     * If 'retryOnRetryableErrors' is set, this function will retry if the command fails with a
     * NotPrimary or network error.
     ','line_number':336,'multiline':True]
['text':' If the command succeeded, we expect that the migration is marked garbage collectable on','line_number':346,'multiline':False]
['text':' the donor and the recipient. Check the state docs for expireAt, check that the oplog','line_number':347,'multiline':False]
['text':' buffer collection has been dropped, and external keys have ttlExpiresAt.','line_number':348,'multiline':False]
['text':'*
     * Runs the donorAbortMigration command with the given migration options and returns the
     * response.
     ','line_number':396,'multiline':True]
['text':'*
     * Asserts that durable and in-memory state for the migration 'migrationId' and 'tenantId' is
     * eventually deleted from the given nodes.
     ','line_number':408,'multiline':True]
['text':'*
     * Asserts that the migration 'migrationId' and 'tenantId' eventually goes to the
     * expected state on all the given donor nodes.
     ','line_number':444,'multiline':True]
['text':'*
     * Asserts that the migration 'migrationId' and 'tenantId' is in the expected state on all the
     * given donor nodes.
     ','line_number':455,'multiline':True]
['text':'*
     * Returns true if the durable and in-memory state for the migration 'migrationId' and
     * 'tenantId' is in the expected state, and false otherwise.
     ','line_number':465,'multiline':True]
['text':'*
     * Asserts that the migration 'migrationId' and 'tenantId' eventually goes to the expected state
     * on all the given recipient nodes.
     ','line_number':484,'multiline':True]
['text':'*
     * Asserts that the migration 'migrationId' and 'tenantId' is in the expected state on all the
     * given recipient nodes.
     ','line_number':509,'multiline':True]
['text':'*
     * Returns true if the durable and in-memory state for the migration 'migrationId' and
     * 'tenantId' is in the expected state, and false otherwise.
     ','line_number':534,'multiline':True]
['text':'*
     * Verifies that the documents on the recipient primary are correct.
     ','line_number':561,'multiline':True]
['text':' We should migrate all data regardless of tenant id for shard merge.','line_number':566,'multiline':False]
['text':'*
     * Returns the TenantMigrationAccessBlocker serverStatus output for the migration or shard merge
     * for the given node.
     ','line_number':599,'multiline':True]
['text':'*
     * Returns the TenantMigrationStats on the node.
     ','line_number':607,'multiline':True]
['text':'*
     * Returns the donor ReplSetTest.
     ','line_number':614,'multiline':True]
['text':'*
     * Returns the recipient ReplSetTest.
     ','line_number':621,'multiline':True]
['text':'*
     * Returns the donor's primary.
     ','line_number':628,'multiline':True]
['text':'*
     * Returns the recipient's primary.
     ','line_number':635,'multiline':True]
['text':'*
     * Returns the recipient's connection string.
     ','line_number':642,'multiline':True]
['text':'*
     * Shuts down the donor and recipient sets, only if they were not passed in as parameters.
     * If they were passed in, the test that initialized them should be responsible for shutting
     * them down.
     ','line_number':649,'multiline':True]
