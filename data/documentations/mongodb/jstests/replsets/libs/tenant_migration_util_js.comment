['text':'*
 * Utilities for testing tenant migrations.
 ','line_number':3,'multiline':True]
['text':'*
 * Crafts a tenant database name.
 ','line_number':10,'multiline':True]
['text':'*
 * Returns true if feature flag 'featureFlagShardMerge' is enabled, false otherwise.
 ','line_number':17,'multiline':True]
['text':'*
 * Checks the FCV and the command object passed to see if tenantIds should be set for shard
 * merge.
 ','line_number':24,'multiline':True]
['text':'*
 * Returns the external keys for the given migration id.
 ','line_number':35,'multiline':True]
['text':'*
 * Returns X509 options for ReplSetTest with the given certificate-key file and CA pem file.
 ','line_number':42,'multiline':True]
['text':' When the global sslMode is preferSSL or requireSSL, the transport layer would do the','line_number':47,'multiline':False]
['text':' SSL handshake regardless of the specified sslMode for the connection. So we use a','line_number':48,'multiline':False]
['text':' allowTLS to verify that the donor and recipient use SSL to authenticate to each other','line_number':49,'multiline':False]
['text':' regardless of the global sslMode.','line_number':50,'multiline':False]
['text':'*
 * Returns an object containing the certificate and private key extracted from the given
 * pem file.
 ','line_number':58,'multiline':True]
['text':'*
 * Returns an object containing the donor and recipient ReplSetTest X509 options for tenant
 * migration testing.
 ','line_number':71,'multiline':True]
['text':'*
 * Returns an object containing the donor and recipient's certificate and private key for
 * tenant migration testing.
 ','line_number':82,'multiline':True]
['text':'*
 * Takes in the response to the donorStartMigration command and returns true if the state is
 * "committed" or "aborted".
 ','line_number':95,'multiline':True]
['text':'*
 * Runs the donorStartMigration command with the given migration options
 * until the migration commits or aborts, or until the command fails. Returns the last command
 * response.
 *
 * If 'retryOnRetryableErrors' is set, this function will retry if the command fails with a
 * retryable error.
 *
 * Only use when it is necessary to run the donorStartMigration command in its own thread. For
 * all other use cases, please consider the runMigration() function in the TenantMigrationTest
 * fixture.
 ','line_number':103,'multiline':True]
['text':'*
 * Runs the donorForgetMigration command with the given migrationId and returns the response.
 *
 * If 'retryOnRetryableErrors' is set, this function will retry if the command fails with a
 * retryable error.
 *
 * Only use when it is necessary to run the donorForgetMigration command in its own thread. For
 * all other use cases, please consider the forgetMigration() function in the
 * TenantMigrationTest fixture.
 ','line_number':142,'multiline':True]
['text':'*
 * Runs the donorAbortMigration command with the given migration options and returns the
 * response.
 *
 * If 'retryOnRetryableErrors' is set, this function will retry if the command fails with a
 * retryable error.
 *
 * Only use when it is necessary to run the donorAbortMigration command in its own thread. For
 * all other use cases, please consider the tryAbortMigration() function in the
 * TenantMigrationTest fixture.
 ','line_number':163,'multiline':True]
['text':'*
 * Runs the donorStartMigration command against the primary of the provided replica set. Will
 * automatically assign the correct 'protocol' and 'tenantId'/'tenantIds' based on the provided
 * 'protocol' and/or currently enabled feature flags.
 ','line_number':188,'multiline':True]
['text':' If we don't pass "protocol" and shard merge is enabled, we set the protocol to','line_number':197,'multiline':False]
['text':' "shard merge". Otherwise, the provided protocol is used, which defaults to','line_number':198,'multiline':False]
['text':' "multitenant migrations" if not provided.','line_number':199,'multiline':False]
['text':'*
 * Runs the given tenant migration command against the primary of the given replica set until
 * the command succeeds or fails with a non-retryable error (if 'retryOnRetryableErrors' is
 * true) or until 'shouldStopFunc' returns true. Returns the last response.
 ','line_number':218,'multiline':True]
['text':' Note: assert.commandWorked() considers command responses with embedded','line_number':231,'multiline':False]
['text':' writeErrors and WriteConcernErrors as a failure even if the command returned','line_number':232,'multiline':False]
['text':' "ok: 1". And, admin commands(like, donorStartMigration) doesn't generate','line_number':233,'multiline':False]
['text':' writeConcernErros or WriteErrors. So, it's safe to wrap the command invocation with','line_number':234,'multiline':False]
['text':' assert.commandWorked() here. However, in few scenarios, like','line_number':235,'multiline':False]
['text':' Mongo.prototype.recordRerouteDueToTenantMigration(), it's not safe to wrap the','line_number':236,'multiline':False]
['text':' command invocation with commandWorked() as retrying on retryable writeConcernErrors','line_number':237,'multiline':False]
['text':' can cause the retry attempt to fail with writeErrors.','line_number':238,'multiline':False]
['text':' In some tests we expects the command to fail due to a network error. We want to','line_number':240,'multiline':False]
['text':' catch the error OR the unhandled exception here and return the error to the','line_number':241,'multiline':False]
['text':' caller to assert on the result. Otherwise if this is not a network exception','line_number':242,'multiline':False]
['text':' it will be caught in the outter catch and either be retried or thrown.','line_number':243,'multiline':False]
['text':' If res is defined, return true to exit assert.soon and return res to the caller.','line_number':258,'multiline':False]
['text':' Otherwise rethrow e to propagate it to the caller.','line_number':259,'multiline':False]
['text':'*
 * Return the active serverless operation lock, if one is acquired.
 ','line_number':276,'multiline':True]
['text':'*
 * Returns the TenantMigrationAccessBlocker serverStatus output for the multi-tenant migration
 * or shard merge for the given node.
 ','line_number':284,'multiline':True]
['text':'*
 * Returns all TenantMigrationAccessBlocker serverStatus output for the multi-tenant migration
 * or shard merge associated with the provided tenantId for the given nodes, filtering out any
 * empty entries.
 ','line_number':306,'multiline':True]
['text':'*
 * Returns the number of reads on the given donor node that were blocked due to tenant migration
 * for the given tenant.
 ','line_number':325,'multiline':True]
['text':'*
 * Returns the number of writes on the given donor node that were blocked due to tenant
 * migration for the given tenant.
 ','line_number':337,'multiline':True]
['text':'*
 * Determines if a database name belongs to the given tenant.
 ','line_number':349,'multiline':True]
['text':'*
 * Compares the hashes for DBs that belong to the specified tenant between the donor and
 * recipient primaries.
 ','line_number':356,'multiline':True]
['text':' Always skip db hash checks for the config, admin, and local database.','line_number':369,'multiline':False]
['text':' Allows listCollections and listIndexes on donor after migration for consistency','line_number':377,'multiline':False]
['text':' checks.','line_number':378,'multiline':False]
['text':' Only turn on the failpoint if it is not already.','line_number':386,'multiline':False]
['text':' Filter out all dbs that don't belong to the tenant.','line_number':394,'multiline':False]
['text':' Pass in an empty array for the secondaries, since we only wish to compare','line_number':408,'multiline':False]
['text':' the DB hashes between the donor and recipient primary in this test.','line_number':409,'multiline':False]
['text':' syncingHasIndexes ','line_number':431,'multiline':True]
['text':' Reset failpoint on the donor after consistency checks if it wasn't enabled','line_number':441,'multiline':False]
['text':' before.','line_number':442,'multiline':False]
['text':' We unset the failpoint for every node in case there was a failover at some','line_number':444,'multiline':False]
['text':' point before this.','line_number':445,'multiline':False]
['text':'*
 * Creates a role for tenant migration donor if it doesn't exist.
 ','line_number':466,'multiline':True]
['text':'*
 * Checks if an error gotten while doing a tenant dbhash check is retryable.
 ','line_number':486,'multiline':True]
['text':' Due to the shell not propagating error codes correctly, if we get any of the following','line_number':490,'multiline':False]
['text':' error messages, we can retry the operation.','line_number':491,'multiline':False]
['text':' The following shell helper methods check if the error message contains some','line_number':497,'multiline':False]
['text':' notion of retryability. This is in case the error does not contain an error code.','line_number':498,'multiline':False]
['text':' If there's a failover while we're running a dbhash check, the elected secondary might','line_number':500,'multiline':False]
['text':' not have set the tenantMigrationDonorAllowsNonTimestampedReads failpoint, which means','line_number':501,'multiline':False]
['text':' that the listCollections command run when we call CollInfos would throw a','line_number':502,'multiline':False]
['text':' TenantMigrationCommitted error.','line_number':503,'multiline':False]
['text':' If there's a failover as we're creating a ReplSetTest from either the donor or','line_number':505,'multiline':False]
['text':' recipient URLs, it's possible to get back a NotYetInitialized error, so we want to','line_number':506,'multiline':False]
['text':' retry creating the ReplSetTest.','line_number':507,'multiline':False]
['text':' TODO (SERVER-54026): Remove check for error message once the shell correctly','line_number':509,'multiline':False]
['text':' propagates the error code.','line_number':510,'multiline':False]
['text':'*
 * Creates a role for tenant migration recipient if it doesn't exist.
 ','line_number':514,'multiline':True]
['text':'*
 * Returns true if the given database role already exists.
 ','line_number':541,'multiline':True]
