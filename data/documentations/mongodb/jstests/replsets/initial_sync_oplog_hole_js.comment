['text':'*
 * Test that initial sync works without error when the sync source has an oplog hole.
 ','line_number':1,'multiline':True]
['text':' Set up replica set. Disallow chaining so nodes always sync from primary.','line_number':7,'multiline':False]
['text':' Set up a three-node replset.  The first node is primary throughout the test, the second node','line_number':10,'multiline':False]
['text':' is used as the initial sync node, and the third node is to ensure we maintain a majority (and','line_number':11,'multiline':False]
['text':' thus no election) while restarting the second.','line_number':12,'multiline':False]
['text':' The default WC is majority and this test can't satisfy majority writes.','line_number':32,'multiline':False]
['text':' Make sure it gets written out.','line_number':38,'multiline':False]
['text':' Make sure it gets written out.','line_number':55,'multiline':False]
['text':' The 5 seconds is because in the non-buggy case, we'll be hung waiting for the optime to','line_number':63,'multiline':False]
['text':' advance.  However, if we allow the write to finish immediately, we are likely to miss the','line_number':64,'multiline':False]
['text':' race if it happens.  By allowing 5 seconds, we'll never fail when we should succeed, and','line_number':65,'multiline':False]
['text':' we'll nearly always fail when we should fail.','line_number':66,'multiline':False]
['text':'','line_number':67,'multiline':False]
['text':' Once the hangAfterCollectionInserts failpoint is turned off, the write of {_id: "b"} will','line_number':68,'multiline':False]
['text':' complete and both the data and the oplog entry for the write will be written out. The oplog','line_number':69,'multiline':False]
['text':' visibility thread will then close the oplog hole.','line_number':70,'multiline':False]
['text':' Make sure the primary collection has all three data items.','line_number':86,'multiline':False]
