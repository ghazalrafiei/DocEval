['text':'
 * Tests that we can recover from a node with a lagged stable timestamp using the special
 * "for restore" mode, but not read from older points-in-time on the recovered node.
 *
 * This test only makes sense for storage engines that support recover to stable timestamp.
 * @tags: [requires_persistence, requires_replication,
 * requires_majority_read_concern, uses_transactions, uses_prepare_transaction,
 * # We don't expect to do this while upgrading.
 * multiversion_incompatible]
 ','line_number':1,'multiline':True]
['text':' The default WC is majority and stopServerReplication will prevent satisfying any majority writes.','line_number':37,'multiline':False]
['text':' Pre-load some documents.','line_number':41,'multiline':False]
['text':' Keep the stable timestamp from moving on the node we're going to restart in restore mode.','line_number':48,'multiline':False]
['text':' Insert a bunch of documents.','line_number':55,'multiline':False]
['text':' Make sure we can read something after standalone recovery.','line_number':101,'multiline':False]
['text':' Test that appliedThrough still exists in the minValid document after standalone recovery with','line_number':104,'multiline':False]
['text':' takeUnstableCheckpointOnShutdown.','line_number':105,'multiline':False]
['text':' Test that no appliedThrough in the minValid document after replication recovery.','line_number':119,'multiline':False]
['text':' Test that we cannot take another checkpoint via fsync before we have an up-to-date stable','line_number':123,'multiline':False]
['text':' timestamp because otherwise we would end up mistakenly taking an unstable timestamp with a null','line_number':124,'multiline':False]
['text':' appliedThrough.','line_number':125,'multiline':False]
['text':' Make sure we can read the new write on the restore node.  Must be durable because we're about','line_number':132,'multiline':False]
['text':' to crash this node with no checkpoints.','line_number':133,'multiline':False]
['text':' restart ','line_number':142,'multiline':True]
['text':' Make sure we can still read the latest write on the restore node.','line_number':147,'multiline':False]
['text':' Basic test: should see all docs with untimestamped read.','line_number':153,'multiline':False]
['text':' For the remaining checks we step up the restored node so we can do atClusterTime reads on it.','line_number':157,'multiline':False]
['text':' They are necessarily speculative because we are preventing majority optimes from advancing.','line_number':158,'multiline':False]
['text':' Should also be able to read at the final sentinel optime on restore node.','line_number':163,'multiline':False]
['text':' Must abort because majority is not advancing.','line_number':175,'multiline':False]
['text':' Should NOT able to read at the first sentinel optime on the restore node.','line_number':178,'multiline':False]
['text':' Should NOT able to read at the penultimate optime on the restore node either.','line_number':188,'multiline':False]
['text':' Allow set to become current and shut down with ordinary dbHash verification.','line_number':198,'multiline':False]
