['text':'*
 * Tests that the prepare oplog entry is applied as part of replaying commit oplog entry
 * during startup recovery.
 *
 * Also, tests that it does not re-apply the operations from the transaction if the data already
 * reflects the transaction. If the operations are replayed, this will cause a BSONTooLarge
 * exception.
 *
 * @tags: [requires_persistence, uses_transactions, uses_prepare_transaction]
 ','line_number':1,'multiline':True]
['text':' Construct a large array such that two arrays in the same document are not greater than the','line_number':25,'multiline':False]
['text':' 16MB limit, but that three such arrays in the same document are greater than 16MB. This will','line_number':26,'multiline':False]
['text':' be helpful in recreating an idempotency issue that exists when applying the operations from','line_number':27,'multiline':False]
['text':' a transaction after the data already reflects the transaction.','line_number':28,'multiline':False]
['text':' Start a transaction in a session that will be prepared and committed before node restart.','line_number':32,'multiline':False]
['text':' Hold back the stable timestamp to be right after the prepareTimestamp, but before the','line_number':47,'multiline':False]
['text':' commitTransaction oplog entry so that the transaction will be replayed during startup','line_number':48,'multiline':False]
['text':' recovery.','line_number':49,'multiline':False]
['text':' Since this transaction is committed after the last snapshot, this commit oplog entry will be','line_number':58,'multiline':False]
['text':' replayed during startup replication recovery.','line_number':59,'multiline':False]
['text':' Perform a clean shutdown and restart. And, the data restored at the storage recovery','line_number':64,'multiline':False]
['text':' timestamp should not reflect the transaction. If not, replaying the commit oplog entry during','line_number':65,'multiline':False]
['text':' startup recovery would throw BSONTooLarge exception.','line_number':66,'multiline':False]
['text':' Since the oldest timestamp is same as the stable timestamp during node's restart, this test','line_number':68,'multiline':False]
['text':' will commit a transaction older than oldest timestamp during startup recovery.','line_number':69,'multiline':False]
['text':' Make sure that the data reflects all the operations from the transaction after recovery.','line_number':75,'multiline':False]
['text':' Make sure that another write on the same document from the transaction has no write conflict.','line_number':80,'multiline':False]
['text':' Also, make sure that we can run another transaction after recovery without any problems.','line_number':81,'multiline':False]
