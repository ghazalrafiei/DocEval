['text':' Tests rollback of auth data in replica sets.','line_number':1,'multiline':False]
['text':' This test creates a user and then does two different sets of updates to that user's privileges','line_number':2,'multiline':False]
['text':' using the replSetTest command to trigger a rollback and verify that at the end the access control','line_number':3,'multiline':False]
['text':' data is rolled back correctly and the user only has access to the expected collections.','line_number':4,'multiline':False]
['text':'','line_number':5,'multiline':False]
['text':' If all data-bearing nodes in a replica set are using an ephemeral storage engine, the set will','line_number':6,'multiline':False]
['text':' not be able to survive a scenario where all data-bearing nodes are down simultaneously. In such a','line_number':7,'multiline':False]
['text':' scenario, none of the members will have any data, and upon restart will each look for a member to','line_number':8,'multiline':False]
['text':' inital sync from, so no primary will be elected. This test induces such a scenario, so cannot be','line_number':9,'multiline':False]
['text':' run on ephemeral storage engines.','line_number':10,'multiline':False]
['text':' @tags: [requires_persistence]','line_number':11,'multiline':False]
['text':' Multiple users cannot be authenticated on one connection within a session.','line_number':13,'multiline':False]
['text':' helper function for verifying contents at the end of the test','line_number':16,'multiline':False]
['text':' Make sure we have a primary','line_number':42,'multiline':False]
['text':' Make sure we have an arbiter','line_number':56,'multiline':False]
['text':' Create collections that will be used in test','line_number':64,'multiline':False]
['text':' Set up user admin user','line_number':68,'multiline':False]
['text':' Give replication time to catch up.','line_number':79,'multiline':False]
['text':' Create a basic user and role','line_number':84,'multiline':False]
['text':' To make awaitReplication() work','line_number':86,'multiline':False]
['text':' wait for secondary to get this data','line_number':107,'multiline':False]
['text':' down A and wait for B to become primary','line_number':126,'multiline':False]
['text':' Modify the the user and role in a way that will be rolled back.','line_number':139,'multiline':False]
['text':' Default write concern will wait for majority, which will time out.','line_number':144,'multiline':False]
['text':' Default write concern will wait for majority, which will time out.','line_number':150,'multiline':False]
['text':' Default write concern will wait for majority, which will time out.','line_number':153,'multiline':False]
['text':' down B, bring A back up, then wait for A to become primary','line_number':164,'multiline':False]
['text':' insert new data into A so that B will need to rollback when it reconnects to A','line_number':165,'multiline':False]
['text':' A should not have the new data as it was down','line_number':180,'multiline':False]
['text':' Modify the user and role in a way that will persist.','line_number':190,'multiline':False]
['text':' Default write concern will wait for majority, which would time out','line_number':192,'multiline':False]
['text':' so we override it with an empty write concern','line_number':193,'multiline':False]
['text':' A has the data we just wrote, but not what B wrote before','line_number':208,'multiline':False]
['text':' bring B back in contact with A','line_number':213,'multiline':False]
['text':' as A is primary, B will roll back and then catch up','line_number':214,'multiline':False]
['text':' Now both A and B should agree','line_number':223,'multiline':False]
['text':' Verify data consistency between nodes.','line_number':229,'multiline':False]
['text':' DB hash check is done in stopSet.','line_number':234,'multiline':False]
