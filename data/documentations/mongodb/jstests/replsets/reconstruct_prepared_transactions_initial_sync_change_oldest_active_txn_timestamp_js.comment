['text':'*
 * Tests that initial sync successfully reconstructs a prepared transaction even when the sync
 * source started a transaction before the oplog application phase began but after the syncing node
 * fetched the oldest active transaction timestamp.
 *
 * To test this, we pause initial sync after the syncing node has fetched the oldest active
 * transaction timestamp from its sync source. Since there are no in-progress transactions, this
 * value will be null. While paused, the syncing node will start and prepare a transaction and do an
 * additional write. This will mean that when initial sync is unpaused, the syncing node will set
 * the begin applying timestamp to after the prepare timestamp. We can then test that the node still
 * fetches all the oplog entries it needs to reconstruct the prepared transaction.
 *
 * @tags: [
 *   uses_prepare_transaction,
 *   uses_transactions,
 * ]
 ','line_number':1,'multiline':True]
['text':' The default WC is majority and this test can't satisfy majority writes.','line_number':28,'multiline':False]
['text':' Restart the secondary with startClean set to true so that it goes through initial sync. Also','line_number':45,'multiline':False]
['text':' restart the node with a failpoint turned on that will pause initial sync after it has fetched','line_number':46,'multiline':False]
['text':' the oldest active transaction timestamp from its sync source to use as the begin fetching','line_number':47,'multiline':False]
['text':' timestamp. This means we can do some writes on the sync source to change the oldest active','line_number':48,'multiline':False]
['text':' transaction timestamp before getting the top of the sync source's oplog and make sure the node','line_number':49,'multiline':False]
['text':' fetches all the oplog entries it needs to reconstruct the prepared transaction.','line_number':50,'multiline':False]
['text':' wait ','line_number':61,'multiline':True]
['text':' Wait for failpoint to be reached so we know that the node is paused. At this point, the','line_number':63,'multiline':False]
['text':' the beginFetchingTimestamp is Timestamp(0, 0) because there were no open transactions.','line_number':64,'multiline':False]
['text':' This write will advance the last applied timestamp on the sync source, which will mean that','line_number':79,'multiline':False]
['text':' the beginApplyingTimestamp will be after the prepareTimestamp.','line_number':80,'multiline':False]
['text':' Wait for the secondary to complete initial sync.','line_number':88,'multiline':False]
['text':' Make sure that we can't read changes to the document from the first prepared transaction','line_number':97,'multiline':False]
['text':' after initial sync.','line_number':98,'multiline':False]
['text':' Make sure that we can see the data from a committed transaction on the secondary if it was','line_number':106,'multiline':False]
['text':' applied during secondary oplog application.','line_number':107,'multiline':False]
