['text':'*
 * Test to ensure that initial sync builds indexes correctly when syncing a capped collection that
 * is receiving concurrent inserts.
 *
 * The main goal of this test is to have the SECONDARY clone more documents than would actually fit
 * in a specific capped collection, leading to the deletion of documents (i.e. 'capping') on the
 * SECONDARY *during* the collection cloning process. This scenario is encountered when a SECONDARY
 * opens a cursor on a capped collection, begins iterating on that cursor, and, before the cursor is
 * exhausted, new documents get appended to the capped collection that it is cloning.
 *
 * Test Setup:
 * 1-node replica set that is reconfigured to a 2-node replica set.
 *
 * 1. Initiate replica set.
 * 2. Create a capped collection on the PRIMARY and overflow it.
 * 4. Add a SECONDARY node to the replica set.
 * 5. Set fail point on SECONDARY that hangs capped collection clone after first 'find' response.
 * 6. Let SECONDARY start initial sync.
 * 7. Wait for initial 'find' response during the cloning of the capped collection.
 * 8. Insert documents to the capped collection on the PRIMARY.
 * 9, Disable fail point on SECONDARY so the rest of the capped collection documents are cloned.
 * 8. Once initial sync completes, ensure that capped collection indexes on the SECONDARY are valid.
 *
 * This is a regression test for SERVER-29197.
 *
 * @tags: [
 *   uses_full_validation,
 * ]
 ','line_number':1,'multiline':True]
['text':'*
 * Overflow a capped collection 'coll' by continuously inserting a given document,
 * 'docToInsert'.
 ','line_number':33,'multiline':True]
['text':' Insert one document and save its _id.','line_number':38,'multiline':False]
['text':' Detect overflow by seeing if the original first doc of the collection is still present.','line_number':42,'multiline':False]
['text':' Set up replica set.','line_number':48,'multiline':False]
['text':' Create a capped collection of the minimum allowed size.','line_number':60,'multiline':False]
['text':' Overflow the capped collection.','line_number':67,'multiline':False]
['text':' Check that there are more than two documents in the collection. This will ensure the','line_number':74,'multiline':False]
['text':' secondary's collection cloner will send a getMore.','line_number':75,'multiline':False]
['text':' Add a SECONDARY node. It should use batchSize=2 for its initial sync queries.','line_number':78,'multiline':False]
['text':' Make the collection cloner pause after its initial 'find' response on the capped collection.','line_number':85,'multiline':False]
['text':' Let the SECONDARY begin initial sync.','line_number':90,'multiline':False]
['text':' Append documents to the capped collection so that the SECONDARY will clone these','line_number':97,'multiline':False]
['text':' additional documents.','line_number':98,'multiline':False]
['text':' Let the 'getMore' requests for the capped collection clone continue.','line_number':104,'multiline':False]
['text':' Wait until initial sync completes.','line_number':108,'multiline':False]
['text':' Before validating the secondary, confirm that it is in the SECONDARY state. Otherwise, the','line_number':111,'multiline':False]
['text':' validate command will fail.','line_number':112,'multiline':False]
['text':' Make sure the indexes created during initial sync are valid.','line_number':115,'multiline':False]
