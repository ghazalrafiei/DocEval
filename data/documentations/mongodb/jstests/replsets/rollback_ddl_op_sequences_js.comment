['text':'*
 * Basic test of a succesful replica set rollback for DDL operations.
 *
 * This tests sets up a 3 node set, data-bearing nodes A and B and an arbiter.
 *
 * 1. A is elected PRIMARY and receives several writes, which are propagated to B.
 * 2. A is isolated from the rest of the set and B is elected PRIMARY.
 * 3. B receives several operations, which will later be undone during rollback.
 * 4. B is then isolated and A regains its connection to the arbiter.
 * 5. A receives many new operations, which B will replicate after rollback.
 * 6. B rejoins the set and goes through the rollback process.
 * 7. The contents of A and B are compare to ensure the rollback results in consistent nodes.
 ','line_number':1,'multiline':True]
['text':' helper function for verifying contents at the end of the test','line_number':16,'multiline':False]
['text':' Make sure we have a primary and that that primary is node A','line_number':51,'multiline':False]
['text':' The default WC is majority and this test can't satisfy majority writes.','line_number':55,'multiline':False]
['text':' Wait for initial replication','line_number':69,'multiline':False]
['text':' This test create indexes with fail point enabled on secondary which prevents secondary from','line_number':73,'multiline':False]
['text':' voting. So, disabling index build commit quorum.','line_number':74,'multiline':False]
['text':' initial data for both nodes','line_number':75,'multiline':False]
['text':' isolate A and wait for B to become primary','line_number':95,'multiline':False]
['text':' do operations on B and B alone, these will be rolled back','line_number':106,'multiline':False]
['text':' multi remove test','line_number':109,'multiline':False]
['text':' rolling back a delete will involve reinserting the item(s)','line_number':111,'multiline':False]
['text':' create a collection (need to roll back the whole thing)','line_number':116,'multiline':False]
['text':' create a new empty collection (need to roll back the whole thing)','line_number':118,'multiline':False]
['text':' drop a collection - we'll need all its data back!','line_number':120,'multiline':False]
['text':' drop an index - verify it comes back','line_number':122,'multiline':False]
['text':' two to see if we transitively rollback?','line_number':124,'multiline':False]
['text':' create an index - verify that it is removed','line_number':128,'multiline':False]
['text':' test roll back (drop) a whole database','line_number':130,'multiline':False]
['text':' isolate B, bring A back into contact with the arbiter, then wait for A to become primary','line_number':135,'multiline':False]
['text':' insert new data into A so that B will need to rollback when it reconnects to A','line_number':136,'multiline':False]
['text':' A is 1 2 3 7 8','line_number':159,'multiline':False]
['text':' B is 1 2 3 4 5 6','line_number':160,'multiline':False]
['text':' put B back in contact with A and arbiter, as A is primary, B will rollback and then catch up','line_number':161,'multiline':False]
['text':' await steady state and ensure the two nodes have the same contents','line_number':167,'multiline':False]
['text':' Verify data consistency between nodes.','line_number':173,'multiline':False]
