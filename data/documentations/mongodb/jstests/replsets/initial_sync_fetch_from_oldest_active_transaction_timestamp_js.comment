['text':'*
 * Tests that initial sync properly fetches from the oldest active transaction timestamp, but that
 * it only applies from the beginApplyingTimestamp. The beginApplyingTimestamp is the timestamp of
 * the oplog entry that was last applied on the sync source before initial sync begins. It is also
 * the timestamp after which we will start applying operations during initial sync.
 *
 * To make sure that it is applying from the correct point, the test prepares a transaction before
 * the beginFetchingTimestamp and commits it before the beginApplyingTimestamp. Since the
 * transaction is not active by the time initial sync begins, its prepare oplog entry
 * won't be fetched during oplog application and trying to apply the commitTransaction oplog entry
 * will cause initial sync to fail.
 *
 * @tags: [
 *   uses_prepare_transaction,
 *   uses_transactions,
 * ]
 ','line_number':1,'multiline':True]
['text':' Increase the election timeout so that we do not accidentally trigger an election while the','line_number':25,'multiline':False]
['text':' secondary is restarting.','line_number':26,'multiline':False]
['text':' The default WC is majority and this test can't satisfy majority writes.','line_number':35,'multiline':False]
['text':' Prepare a transaction so that there is an active transaction with an oplog entry. The','line_number':57,'multiline':False]
['text':' timestamp of the first oplog entry of this transaction will become the beginFetchingTimestamp','line_number':58,'multiline':False]
['text':' during initial sync.','line_number':59,'multiline':False]
['text':' Commit the first transaction so that we have an operation that is fetched during initial sync','line_number':77,'multiline':False]
['text':' but should not be applied. If this is applied, initial sync will fail because while trying to','line_number':78,'multiline':False]
['text':' apply the commitTransaction oplog entry, it will fail to get the prepare oplog','line_number':79,'multiline':False]
['text':' entry since its optime is before the beginFetchingTimestamp. Doing another operation will','line_number':80,'multiline':False]
['text':' also cause the beginApplyingTimestamp to be different from the beginFetchingTimestamp. Note','line_number':81,'multiline':False]
['text':' that since the beginApplyingTimestamp is the timestamp after which operations are applied','line_number':82,'multiline':False]
['text':' during initial sync, this commitTransaction will not be applied.','line_number':83,'multiline':False]
['text':' Restart the secondary with startClean set to true so that it goes through initial sync. Also','line_number':90,'multiline':False]
['text':' restart the node with a failpoint turned on that will pause initial sync after the secondary','line_number':91,'multiline':False]
['text':' has copied {_id: 1} and {_id: 2}. This way we can insert more documents when initial sync is','line_number':92,'multiline':False]
['text':' paused and know that they won't be copied during collection cloning but instead must be','line_number':93,'multiline':False]
['text':' applied during oplog application.','line_number':94,'multiline':False]
['text':' signal','line_number':96,'multiline':False]
['text':' Validation would encounter a prepare conflict on the open transaction.','line_number':98,'multiline':False]
['text':' wait ','line_number':110,'multiline':True]
['text':' Wait for failpoint to be reached so we know that collection cloning is paused.','line_number':114,'multiline':False]
['text':' Run some operations on the sync source while collection cloning is paused so that we know','line_number':122,'multiline':False]
['text':' they must be applied during the oplog application stage of initial sync. This will also make','line_number':123,'multiline':False]
['text':' sure that the beginApplyingTimestamp and the stopTimestamp in initial sync are different. The','line_number':124,'multiline':False]
['text':' stopTimestamp is the timestamp of the oplog entry that was last applied on the sync source','line_number':125,'multiline':False]
['text':' when the oplog application phase of initial sync begins.','line_number':126,'multiline':False]
['text':' Resume initial sync.','line_number':132,'multiline':False]
['text':' Wait for the secondary to complete initial sync.','line_number':138,'multiline':False]
['text':' Make sure the secondary fetched enough transaction oplog entries.','line_number':144,'multiline':False]
['text':' Make sure the first transaction committed properly and is reflected after the initial sync.','line_number':149,'multiline':False]
['text':' Step up the secondary after initial sync is done and make sure the transaction is properly','line_number':155,'multiline':False]
['text':' prepared.','line_number':156,'multiline':False]
['text':' Force the second session to use the same lsid and txnNumber as from before the restart. This','line_number':163,'multiline':False]
['text':' ensures that we're working with the same session and transaction.','line_number':164,'multiline':False]
['text':' Make sure that we can't read changes to the document from the second prepared transaction','line_number':171,'multiline':False]
['text':' after initial sync.','line_number':172,'multiline':False]
['text':' Make sure that another write on the same document from the second transaction causes a write','line_number':175,'multiline':False]
['text':' conflict.','line_number':176,'multiline':False]
['text':' Make sure that we cannot add other operations to the second transaction since it is prepared.','line_number':182,'multiline':False]
['text':' Make sure we can successfully commit the second transaction after recovery.','line_number':194,'multiline':False]
['text':' Make sure that we can run another conflicting transaction without any problems.','line_number':205,'multiline':False]
