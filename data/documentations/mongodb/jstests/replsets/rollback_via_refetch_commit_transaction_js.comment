['text':'*
 * Test that a node crashes if it tries to roll back a 'commit' oplog entry using refetch-based
 * rollback. The tests mimics the standard PSA rollback setup by using a PSS replica set where the
 * last node effectively acts as an arbiter without formally being one (this is necessary because
 * we disallow the 'prepareTransaction' command in sets with arbiters).
 *
 * @tags: [
 *   uses_transactions,
 *   uses_prepare_transaction,
 * ]
 ','line_number':1,'multiline':True]
['text':' Provide RollbackTest with custom ReplSetTest so we can set forceRollbackViaRefetch.','line_number':21,'multiline':False]
['text':' Create collection that exists on the sync source and rollback node.','line_number':39,'multiline':False]
['text':' Issue a 'prepareTransaction' command just to the current primary.','line_number':43,'multiline':False]
['text':' Stop replication from the current primary ("rollbackNode").','line_number':52,'multiline':False]
['text':' Step down current primary and elect a node that lacks the commit.','line_number':57,'multiline':False]
['text':' Verify the old primary crashes trying to roll back.','line_number':60,'multiline':False]
['text':' Let the ReplSetTest know the old primary is down.','line_number':73,'multiline':False]
['text':' Transaction is still in prepared state and validation will be blocked, so skip it.','line_number':81,'multiline':False]
