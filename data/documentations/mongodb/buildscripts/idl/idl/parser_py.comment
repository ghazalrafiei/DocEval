['text':' Copyright (C) 2018-present MongoDB, Inc.','line_number':1,'multiline':False]
['text':'','line_number':2,'multiline':False]
['text':' This program is free software: you can redistribute it and/or modify','line_number':3,'multiline':False]
['text':' it under the terms of the Server Side Public License, version 1,','line_number':4,'multiline':False]
['text':' as published by MongoDB, Inc.','line_number':5,'multiline':False]
['text':'','line_number':6,'multiline':False]
['text':' This program is distributed in the hope that it will be useful,','line_number':7,'multiline':False]
['text':' but WITHOUT ANY WARRANTY; without even the implied warranty of','line_number':8,'multiline':False]
['text':' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the','line_number':9,'multiline':False]
['text':' Server Side Public License for more details.','line_number':10,'multiline':False]
['text':'','line_number':11,'multiline':False]
['text':' You should have received a copy of the Server Side Public License','line_number':12,'multiline':False]
['text':' along with this program. If not, see','line_number':13,'multiline':False]
['text':' <http://www.mongodb.com/licensing/server-side-public-license>.','line_number':14,'multiline':False]
['text':'','line_number':15,'multiline':False]
['text':' As a special exception, the copyright holders give permission to link the','line_number':16,'multiline':False]
['text':' code of portions of this program with the OpenSSL library under certain','line_number':17,'multiline':False]
['text':' conditions as described in each individual source file and distribute','line_number':18,'multiline':False]
['text':' linked combinations including the program with the OpenSSL library. You','line_number':19,'multiline':False]
['text':' must comply with the Server Side Public License in all respects for','line_number':20,'multiline':False]
['text':' all of the code used other than as permitted herein. If you modify file(s)','line_number':21,'multiline':False]
['text':' with this exception, you may extend this exception to your version of the','line_number':22,'multiline':False]
['text':' file(s), but you are not obligated to do so. If you do not wish to do so,','line_number':23,'multiline':False]
['text':' delete this exception statement from your version. If you delete this','line_number':24,'multiline':False]
['text':' exception statement from all source files in the program, then also delete','line_number':25,'multiline':False]
['text':' it in the license file.','line_number':26,'multiline':False]
['text':'','line_number':27,'multiline':False]
['text':' TODO: after porting to Python 3, use an enum','line_number':62,'multiline':False]
['text':' type: (str, int, Callable[[errors.ParserContext,yaml.nodes.MappingNode], Any], Callable[[errors.ParserContext,yaml.nodes.SequenceNode], Any]) -> None','line_number':68,'multiline':False]
['text':' type: str','line_number':72,'multiline':False]
['text':' type: int','line_number':73,'multiline':False]
['text':' type: Callable[[errors.ParserContext,yaml.nodes.MappingNode], Any]','line_number':74,'multiline':False]
['text':' type: Callable[[errors.ParserContext,yaml.nodes.SequenceNode], Any]','line_number':76,'multiline':False]
['text':' type: Union[yaml.nodes.MappingNode, yaml.nodes.ScalarNode, yaml.nodes.SequenceNode]','line_number':80,'multiline':False]
['text':' type: str','line_number':81,'multiline':False]
['text':' type: (...) -> bool','line_number':82,'multiline':False]
['text':' type: errors.ParserContext','line_number':87,'multiline':False]
['text':' type: Union[yaml.nodes.MappingNode, yaml.nodes.ScalarNode, yaml.nodes.SequenceNode]','line_number':88,'multiline':False]
['text':' type: str','line_number':89,'multiline':False]
['text':' type: Any','line_number':90,'multiline':False]
['text':' type: Dict[str, _RuleDesc]','line_number':91,'multiline':False]
['text':' type: (...) -> None','line_number':92,'multiline':False]
['text':' type: Set[str]','line_number':93,'multiline':False]
['text':' Check for any missing required fields','line_number':145,'multiline':False]
['text':' A bool is never "None" like other types, it simply defaults to "false".','line_number':150,'multiline':False]
['text':' It means "if bool is None" will always return false and there is no support for required','line_number':151,'multiline':False]
['text':' 'bool' at this time. Use the node type 'required_bool_scalar' if this behavior is not desired.','line_number':152,'multiline':False]
['text':' type: errors.ParserContext','line_number':162,'multiline':False]
['text':' type: syntax.IDLSpec','line_number':163,'multiline':False]
['text':' type: Union[yaml.nodes.MappingNode, yaml.nodes.ScalarNode, yaml.nodes.SequenceNode]','line_number':164,'multiline':False]
['text':' type: str','line_number':165,'multiline':False]
['text':' type: Callable[[errors.ParserContext,syntax.IDLSpec,str,Union[yaml.nodes.MappingNode, yaml.nodes.ScalarNode, yaml.nodes.SequenceNode]], None]','line_number':166,'multiline':False]
['text':' type: (...) -> None','line_number':167,'multiline':False]
['text':' type: (errors.ParserContext, Union[yaml.nodes.ScalarNode, yaml.nodes.MappingNode]) -> syntax.GlobalInitializer','line_number':180,'multiline':False]
['text':' type: (errors.ParserContext, yaml.nodes.MappingNode) -> syntax.ConfigGlobal','line_number':197,'multiline':False]
['text':' type: (errors.ParserContext, syntax.IDLSpec, Union[yaml.nodes.MappingNode, yaml.nodes.ScalarNode, yaml.nodes.SequenceNode]) -> None','line_number':212,'multiline':False]
['text':' type: (errors.ParserContext, syntax.IDLSpec, Union[yaml.nodes.MappingNode, yaml.nodes.ScalarNode, yaml.nodes.SequenceNode]) -> None','line_number':229,'multiline':False]
['text':' type: (errors.ParserContext, syntax.IDLSpec, str, Union[yaml.nodes.MappingNode, yaml.nodes.ScalarNode, yaml.nodes.SequenceNode]) -> None','line_number':240,'multiline':False]
['text':' type: (errors.ParserContext, Union[yaml.nodes.ScalarNode,yaml.nodes.MappingNode]) -> syntax.Expression','line_number':265,'multiline':False]
['text':' type: (errors.ParserContext, yaml.nodes.MappingNode) -> syntax.Validator','line_number':282,'multiline':False]
['text':' type: (errors.ParserContext, yaml.nodes.MappingNode) -> syntax.Condition','line_number':299,'multiline':False]
['text':' type: (errors.ParserContext, yaml.nodes.SequenceNode) -> List[syntax.FieldType]','line_number':316,'multiline':False]
['text':' type: (errors.ParserContext, yaml.nodes.MappingNode) -> syntax.FieldType','line_number':322,'multiline':False]
['text':' For now, FieldTypeVariant is the only non-scalar node.','line_number':328,'multiline':False]
['text':' type: (errors.ParserContext, str, Union[yaml.nodes.MappingNode, yaml.nodes.ScalarNode, yaml.nodes.SequenceNode]) -> syntax.Field','line_number':366,'multiline':False]
['text':' Allow both 'unstable' and the new alternative 'stability' options to support IDL compatibility tests with old IDLs.','line_number':398,'multiline':False]
['text':' type: (errors.ParserContext, yaml.nodes.MappingNode) -> List[syntax.Field]','line_number':417,'multiline':False]
['text':' type: Set[str]','line_number':422,'multiline':False]
['text':' Like "fieldName: typeName".','line_number':433,'multiline':False]
['text':' Like "fieldName: { ... options ... }".','line_number':448,'multiline':False]
['text':' Convert the deprecated 'unstable' option to the new 'stability' option to keep support for the IDL compatibility tests.','line_number':458,'multiline':False]
['text':' type: (errors.ParserContext, str, yaml.nodes.MappingNode) -> syntax.ChainedType','line_number':474,'multiline':False]
['text':' type: (errors.ParserContext, yaml.nodes.MappingNode) -> List[syntax.ChainedType]','line_number':487,'multiline':False]
['text':' type: Set[str]','line_number':491,'multiline':False]
['text':' Simple Scalar','line_number':500,'multiline':False]
['text':' type: (errors.ParserContext, str, yaml.nodes.MappingNode) -> syntax.ChainedStruct','line_number':516,'multiline':False]
['text':' type: (errors.ParserContext, yaml.nodes.MappingNode) -> List[syntax.ChainedStruct]','line_number':529,'multiline':False]
['text':' type: Set[str]','line_number':533,'multiline':False]
['text':' Simple Scalar','line_number':543,'multiline':False]
['text':' type: (errors.ParserContext, syntax.IDLSpec, str, Union[yaml.nodes.MappingNode, yaml.nodes.ScalarNode, yaml.nodes.SequenceNode]) -> None','line_number':560,'multiline':False]
['text':' PyLint has difficulty with some iterables: https://github.com/PyCQA/pylint/issues/3105','line_number':587,'multiline':False]
['text':' pylint: disable=not-an-iterable','line_number':588,'multiline':False]
['text':' type: (errors.ParserContext, syntax.IDLSpec, str, Union[yaml.nodes.MappingNode, yaml.nodes.ScalarNode, yaml.nodes.SequenceNode]) -> None','line_number':603,'multiline':False]
['text':' type: (errors.ParserContext, syntax.IDLSpec, str, Union[yaml.nodes.MappingNode, yaml.nodes.ScalarNode, yaml.nodes.SequenceNode]) -> None','line_number':625,'multiline':False]
['text':' type: (errors.ParserContext, str, Union[yaml.nodes.MappingNode, yaml.nodes.ScalarNode, yaml.nodes.SequenceNode], bool) -> syntax.FieldListEntry','line_number':647,'multiline':False]
['text':' type: (errors.ParserContext, yaml.nodes.MappingNode, bool) -> List[syntax.FieldListEntry]','line_number':662,'multiline':False]
['text':' type: Set[str]','line_number':667,'multiline':False]
['text':' type: (errors.ParserContext, yaml.nodes.MappingNode) -> List[syntax.FieldListEntry]','line_number':686,'multiline':False]
['text':' type: (errors.ParserContext, yaml.nodes.MappingNode) -> List[syntax.FieldListEntry]','line_number':692,'multiline':False]
['text':' type: (errors.ParserContext, Union[yaml.nodes.MappingNode, yaml.nodes.ScalarNode, yaml.nodes.SequenceNode]) -> Any','line_number':698,'multiline':False]
['text':' Error added to context by is_scalar_node case above','line_number':708,'multiline':False]
['text':' type: (errors.ParserContext, yaml.nodes.MappingNode) -> List[syntax.EnumValue]','line_number':713,'multiline':False]
['text':' type: Set[str]','line_number':718,'multiline':False]
['text':' type: (errors.ParserContext, syntax.IDLSpec, str, Union[yaml.nodes.MappingNode, yaml.nodes.ScalarNode, yaml.nodes.SequenceNode]) -> None','line_number':749,'multiline':False]
['text':' type: (errors.ParserContext, yaml.nodes.MappingNode) -> syntax.Privilege','line_number':771,'multiline':False]
['text':' type: (errors.ParserContext, yaml.nodes.MappingNode) -> syntax.AccessCheck','line_number':790,'multiline':False]
['text':' type: (errors.ParserContext, yaml.nodes.SequenceNode) -> List[syntax.AccessCheck]','line_number':811,'multiline':False]
['text':' type: (errors.ParserContext, yaml.nodes.MappingNode) -> syntax.AccessChecks','line_number':817,'multiline':False]
['text':' type: (errors.ParserContext, syntax.IDLSpec, str, Union[yaml.nodes.MappingNode, yaml.nodes.ScalarNode, yaml.nodes.SequenceNode]) -> None','line_number':843,'multiline':False]
['text':' type property must be specified for a namespace = type','line_number':894,'multiline':False]
['text':' Commands may only have the first parameter, ensure the fields property is an empty array.','line_number':904,'multiline':False]
['text':' type: (errors.ParserContext, Union[yaml.nodes.ScalarNode,yaml.nodes.MappingNode]) -> syntax.ServerParameterClass','line_number':917,'multiline':False]
['text':' type: (errors.ParserContext, syntax.IDLSpec, str, Union[yaml.nodes.MappingNode, yaml.nodes.ScalarNode, yaml.nodes.SequenceNode]) -> None','line_number':938,'multiline':False]
['text':' Declare as local to avoid ugly formatting with long line.','line_number':946,'multiline':False]
['text':' type: (errors.ParserContext, syntax.IDLSpec, str, Union[yaml.nodes.MappingNode, yaml.nodes.ScalarNode, yaml.nodes.SequenceNode]) -> None','line_number':969,'multiline':False]
['text':' type: (errors.ParserContext, syntax.IDLSpec, str, Union[yaml.nodes.MappingNode, yaml.nodes.ScalarNode, yaml.nodes.SequenceNode]) -> None','line_number':997,'multiline':False]
['text':' type: (str, str) -> str','line_number':1034,'multiline':False]
['text':' type: (syntax.IDLSpec) -> None','line_number':1043,'multiline':False]
['text':' type: (Any, str, bool) -> syntax.IDLParsedSpec','line_number':1064,'multiline':False]
['text':' This will raise an exception if the YAML parse fails','line_number':1074,'multiline':False]
['text':' If the document is empty, we are done','line_number':1081,'multiline':False]
['text':' type: Set[str]','line_number':1090,'multiline':False]
['text':' type: () -> None','line_number':1143,'multiline':False]
['text':' type: (str, str) -> str','line_number':1149,'multiline':False]
['text':' type: (str) -> Any','line_number':1155,'multiline':False]
['text':' type: (Any, str, ImportResolverBase, bool) -> syntax.IDLParsedSpec','line_number':1161,'multiline':False]
['text':' type: List[Tuple[common.SourceLocation, str, str]]','line_number':1176,'multiline':False]
['text':' type: List[str]','line_number':1177,'multiline':False]
['text':' type: List[str]','line_number':1182,'multiline':False]
['text':' Process imports in a breadth-first search','line_number':1186,'multiline':False]
['text':' Check for already resolved file','line_number':1195,'multiline':False]
['text':' Parse imported file','line_number':1206,'multiline':False]
['text':' Check for errors','line_number':1210,'multiline':False]
['text':' We need to generate includes for imported IDL files which have structs or enums.','line_number':1214,'multiline':False]
['text':' Add other imported files to the list of files to parse','line_number':1219,'multiline':False]
['text':' Merge cpp_includes as needed','line_number':1224,'multiline':False]
['text':' Merge symbol tables together','line_number':1229,'multiline':False]
['text':' Resolve the direct imports which contain structs for root document so they can be translated','line_number':1234,'multiline':False]
['text':' into include file paths in generated code.','line_number':1235,'multiline':False]
