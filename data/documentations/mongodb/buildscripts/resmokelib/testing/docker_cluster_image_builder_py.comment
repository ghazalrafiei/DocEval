['text':' pylint: disable=unsupported-membership-test','line_number':17,'multiline':False]
['text':' pylint: disable=unsupported-membership-test','line_number':19,'multiline':False]
['text':' pylint: disable=unsupported-membership-test','line_number':21,'multiline':False]
['text':' Build context constants','line_number':51,'multiline':False]
['text':' Artifact constants','line_number':60,'multiline':False]
['text':' MongoDB Enterprise Modules constants','line_number':72,'multiline':False]
['text':' Port suffix ranging from 1-24 is subject to fault injection while ports 130+ are safe.','line_number':76,'multiline':False]
['text':' The supported `run` command should keep all of the same args except:','line_number':103,'multiline':False]
['text':' (1) it should remove the `--dockerComposeBuildImages` option and value','line_number':104,'multiline':False]
['text':' (2) it should add the `--externalSUT` flag','line_number':105,'multiline':False]
['text':' Add the `Process` as a service in the docker-compose.yml','line_number':167,'multiline':False]
['text':' Write the `Process` args as an init script','line_number':172,'multiline':False]
['text':' `shutil.rmtree` throws FileNotFoundError if the path DNE. In that case continue as normal.','line_number':198,'multiline':False]
['text':' Build out the directory structure and write the startup scripts for the config image','line_number':231,'multiline':False]
['text':' Our official builds happen in Evergreen. Assert debug symbols are on system.','line_number':236,'multiline':False]
['text':' If this is running locally, this is for development purposes only and debug symbols are not required.','line_number':237,'multiline':False]
['text':' Set up build context','line_number':263,'multiline':False]
['text':' Build docker image','line_number':273,'multiline':False]
['text':' Set up build context','line_number':284,'multiline':False]
['text':' Build docker image','line_number':293,'multiline':False]
['text':' If local, fetch the binaries.','line_number':314,'multiline':False]
['text':' Ensure that `db-contrib-tool` is installed locally','line_number':316,'multiline':False]
['text':' Use `db-contrib-tool` to get MongoDB binaries for this image','line_number':328,'multiline':False]
['text':' Verify the binaries were downloaded successfully','line_number':358,'multiline':False]
['text':' Our official builds happen in Evergreen.','line_number':364,'multiline':False]
['text':' We want to ensure the binaries are linked with `libvoidstar.so` during image build.','line_number':365,'multiline':False]
['text':' Clean up any old artifacts in the build context','line_number':384,'multiline':False]
['text':' Our official builds happen in Evergreen. Assert there's already a `mongo` repo in the build context.','line_number':401,'multiline':False]
['text':' This is because we cannot rely on the standard "git clone" command to include uncommitted changes applied from a `patch`.','line_number':402,'multiline':False]
['text':' Instead, we rely on Evergreen's `git.get_project` which will correctly clone the repo and apply changes from the `patch`.','line_number':403,'multiline':False]
['text':' Clean up any old artifacts in the build context.','line_number':410,'multiline':False]
['text':' Copy the mongo repo to the build context.','line_number':422,'multiline':False]
['text':' If this fails to clone, the `git` library will raise an exception.','line_number':423,'multiline':False]
['text':' Create the modules directory in the mongo repo at the build context','line_number':431,'multiline':False]
['text':' Copy the mongo enterprise modules repo to the build context.','line_number':439,'multiline':False]
['text':' If this fails to clone, the `git` library will raise an exception.','line_number':440,'multiline':False]
['text':' Clone QA repo if it does not already exist','line_number':454,'multiline':False]
['text':' Clone jstestfuzz repo if it does not already exist','line_number':470,'multiline':False]
['text':' Clean up any old artifacts in the build context','line_number':495,'multiline':False]
['text':' We create lib/empty so that the relevant COPY in the Dockerfiles always has','line_number':514,'multiline':False]
['text':' something to copy - the docker build step will fail if it doesn't. This is important','line_number':515,'multiline':False]
['text':' when we're using a statically-linked build.','line_number':516,'multiline':False]
['text':' Clean up any old artifacts in the build context','line_number':531,'multiline':False]
['text':' Our official builds happen in Evergreen. Assert a "real" `libvoidstar.so` is on system.','line_number':536,'multiline':False]
