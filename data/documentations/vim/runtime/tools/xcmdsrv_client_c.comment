['text':' vi:set ts=8 sts=4 sw=4:
 *
 * VIM - Vi IMproved	by Bram Moolenaar
 * X-Windows communication by Flemming Madsen
 *
 * Do ":help uganda"  in Vim to read copying and usage conditions.
 * Do ":help credits" in Vim to see a list of people who contributed.
 * See README.txt for an overview of the Vim source code.
 *
 * Client for sending commands to an '+xcmdsrv' enabled vim.
 * This is mostly a de-Vimified version of if_xcmdsrv.c in vim.
 * See that file for a protocol specification.
 *
 * You can make a test program with a Makefile like:
 *  xcmdsrv_client: xcmdsrv_client.c
 *	cc -o $@ -g -DMAIN -I/usr/X11R6/include -L/usr/X11R6/lib $< -lX11
 *
 ','line_number':1,'multiline':True]
['text':' Client API ','line_number':32,'multiline':True]
['text':' A sample program ','line_number':36,'multiline':True]
['text':'
 * Maximum size property that can be read at one time by
 * this module:
 ','line_number':60,'multiline':True]
['text':'
 * Forward declarations for procedures defined later in this file:
 ','line_number':67,'multiline':True]
['text':' Private variables ','line_number':81,'multiline':True]
['text':'
 * sendToVim --
 *	Send to an instance of Vim via the X display.
 *
 * Results:
 *	A string with the result or NULL. Caller must free if non-NULL
 ','line_number':88,'multiline':True]
['text':' Where to send. ','line_number':98,'multiline':True]
['text':' Where to send. ','line_number':99,'multiline':True]
['text':' What to send. ','line_number':100,'multiline':True]
['text':' Interpret as keystrokes or expr ? ','line_number':101,'multiline':True]
['text':' Return code. 0 => OK ','line_number':102,'multiline':True]
['text':' Running count of sent commands.
				 * Used to give each command a
				 * different serial number. ','line_number':111,'multiline':True]
['text':'
     * Bind the server name to a communication window.
     *
     * Find any survivor with a serialno attached to the name if the
     * original registrant of the wanted name is no longer present.
     *
     * Delete any lingering names from dead editors.
     ','line_number':126,'multiline':True]
['text':' Check that the window is hot ','line_number':140,'multiline':True]
['text':'DELETE=','line_number':150,'multiline':True]
['text':'
     * Send the command to target interpreter by appending it to the
     * comm window in the communication window.
     ','line_number':164,'multiline':True]
['text':' Add a back reference to our comm window ','line_number':182,'multiline':True]
['text':' There is no answer for this - Keys are sent async ','line_number':196,'multiline':True]
['text':'
     * Enter a loop processing X events & pooling chars until we see the result
     ','line_number':200,'multiline':True]
['text':' Look out for the answer ','line_number':209,'multiline':True]
['text':'
 * SendInit --
 *	This procedure is called to initialize the
 *	communication channels for sending commands and
 *	receiving results.
 ','line_number':240,'multiline':True]
['text':'
     * Create the window used for communication, and set up an
     * event handler for it.
     ','line_number':252,'multiline':True]
['text':' Change this back to "InterpRegistry" to talk to tk processes ','line_number':260,'multiline':True]
['text':'
 * LookupName --
 *	Given an interpreter name, see if the name exists in
 *	the interpreter registry for a particular display.
 *
 * Results:
 *	If the given name is registered, return the ID of
 *	the window associated with the name.  If the name
 *	isn't registered, then return 0.
 ','line_number':279,'multiline':True]
['text':' Display whose registry to check. ','line_number':292,'multiline':True]
['text':' Name of an interpreter. ','line_number':293,'multiline':True]
['text':' If non-zero, delete info about name. ','line_number':294,'multiline':True]
['text':' Do another search matching -999 if not found
			   Return result here if a match is found ','line_number':295,'multiline':True]
['text':'
     * Read the registry property.
     ','line_number':305,'multiline':True]
['text':'
     * If the property is improperly formed, then delete it.
     ','line_number':318,'multiline':True]
['text':'
     * Scan the property for the desired name.
     ','line_number':330,'multiline':True]
['text':' Not needed, but eliminates compiler warning. ','line_number':335,'multiline':True]
['text':'
     * Delete the property, if that is desired (copy down the
     * remainder of the registry property to overlay the deleted
     * info, then rewrite the property).
     ','line_number':371,'multiline':True]
['text':' Information about event. ','line_number':400,'multiline':True]
['text':' The one were waiting for ','line_number':401,'multiline':True]
['text':' Return code. 0 => OK ','line_number':402,'multiline':True]
['text':'
     * Read the comm property and delete it.
     ','line_number':417,'multiline':True]
['text':'
     * If the property doesn't exist or is improperly formed
     * then ignore it.
     ','line_number':427,'multiline':True]
['text':'
     * Several commands and results could arrive in the property at
     * one time;  each iteration through the outer loop handles a
     * single command or result.
     ','line_number':442,'multiline':True]
['text':'
	 * Ignore leading NULs; each command or result starts with a
	 * NUL so that no matter how badly formed a preceding command
	 * is, we'll be able to tell that a new command/result is
	 * starting.
	 ','line_number':450,'multiline':True]
['text':'
	     * This is a reply to some command that we sent out.  Iterate
	     * over all of its options.  Stop when we reach the end of the
	     * property or something that doesn't look like an option.
	     ','line_number':468,'multiline':True]
['text':'
	     * Didn't recognize this thing.  Just skip through the next
	     * null character and try again.
	     * Also, throw away commands that we can't process anyway.
	     ','line_number':509,'multiline':True]
['text':'
 * AppendPropCarefully --
 *
 *	Append a given property to a given window, but set up
 *	an X error handler so that if the append fails this
 *	procedure can return an error code rather than having
 *	Xlib panic.
 *
 *  Return:
 *	0 on OK - -1 on error
 *--------------------------------------------------------------
 ','line_number':523,'multiline':True]
['text':' Display on which to operate. ','line_number':538,'multiline':True]
['text':' Window whose property is to
				 * be modified. ','line_number':539,'multiline':True]
['text':' Name of property. ','line_number':541,'multiline':True]
['text':' Characters  to append to property. ','line_number':542,'multiline':True]
['text':' How much to append ','line_number':543,'multiline':True]
['text':'
 * Another X Error handler, just used to check for errors.
 ','line_number':557,'multiline':True]
['text':' ARGSUSED ','line_number':560,'multiline':True]
['text':'
 * Check if "str" looks like it had a serial number appended.
 * Actually just checks if the name ends in a digit.
 ','line_number':568,'multiline':True]
