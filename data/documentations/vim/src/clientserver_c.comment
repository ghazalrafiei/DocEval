['text':' vi:set ts=8 sts=4 sw=4 noet:
 *
 * VIM - Vi IMproved	by Bram Moolenaar
 *
 * Do ":help uganda"  in Vim to read copying and usage conditions.
 * Do ":help credits" in Vim to see a list of people who contributed.
 * See README.txt for an overview of the Vim source code.
 ','line_number':1,'multiline':True]
['text':'
 * clientserver.c: functions for Client Server functionality
 ','line_number':10,'multiline':True]
['text':'
 * Replace termcodes such as <CR> and insert as key presses if there is room.
 ','line_number':21,'multiline':True]
['text':' Set 'cpoptions' the way we want it.','line_number':30,'multiline':False]
['text':'    B set - backslashes are *not* treated specially','line_number':31,'multiline':False]
['text':'    k set - keycodes are *not* reverse-engineered','line_number':32,'multiline':False]
['text':'    < unset - <Key> sequences *are* interpreted','line_number':33,'multiline':False]
['text':'  The last but one parameter of replace_termcodes() is TRUE so that the','line_number':34,'multiline':False]
['text':'  <lt> sequence is recognised - needed for a real backslash.','line_number':35,'multiline':False]
['text':' trailing CTRL-V results in nothing','line_number':40,'multiline':False]
['text':'
	 * Add the string to the input stream.
	 * Can't use add_to_input_buf() here, we now have K_SPECIAL bytes.
	 *
	 * First clear typed characters from the typeahead buffer, there could
	 * be half a mapping there.  Then append to the existing string, so
	 * that multiple commands from a client are concatenated.
	 ','line_number':42,'multiline':True]
['text':' Let input_available() know we inserted text in the typeahead','line_number':54,'multiline':False]
['text':' buffer.','line_number':55,'multiline':False]
['text':'
 * Evaluate an expression that the client sent to a string.
 ','line_number':61,'multiline':True]
['text':' Evaluate the expression at the toplevel, don't use variables local to','line_number':77,'multiline':False]
['text':' the calling function. Except when in debug mode.','line_number':78,'multiline':False]
['text':' Disable debugging, otherwise Vim hangs, waiting for "cont" to be','line_number':85,'multiline':False]
['text':' typed.','line_number':86,'multiline':False]
['text':' Do not display error message, otherwise Vim hangs, waiting for "cont"','line_number':89,'multiline':False]
['text':' to be typed.  Do generate errors so that try/catch works.','line_number':90,'multiline':False]
['text':' A client can tell us to redraw, but not to display the cursor, so do','line_number':103,'multiline':False]
['text':' that here.','line_number':104,'multiline':False]
['text':'
 * Evaluate a command or expression sent to ourselves.
 ','line_number':111,'multiline':True]
['text':'
 * If conversion is needed, convert "data" from "client_enc" to 'encoding' and
 * return an allocated string.  Otherwise return "data".
 * "*tofree" is set to the result when it needs to be freed later.
 ','line_number':146,'multiline':True]
['text':'
 * Common code for the X command server and the Win32 command server.
 ','line_number':182,'multiline':True]
['text':'
 * Do the client-server stuff, unless "--servername ''" was used.
 ','line_number':188,'multiline':True]
['text':' Initialise the client/server messaging infrastructure.','line_number':198,'multiline':False]
['text':'
     * When a command server argument was found, execute it.  This may
     * exit Vim when it was successful.  Otherwise it's executed further
     * on.  Remember the encoding used here in "serverStrEnc".
     ','line_number':202,'multiline':True]
['text':' If we're still running, get the name to register ourselves.','line_number':214,'multiline':False]
['text':' On Win32 can register right now, for X11 need to setup the','line_number':215,'multiline':False]
['text':' clipboard first, it's further down.','line_number':216,'multiline':False]
['text':'
 * Prepare for running as a Vim server.
 ','line_number':228,'multiline':True]
['text':'
     * Register for remote command execution with :serversend and --remote
     * unless there was a -X or a --servername '' on the command line.
     * Only register nongui-vim's with an explicit --servername argument,
     * or when compiling with autoservername.
     * When running as root --servername is also required.
     ','line_number':235,'multiline':True]
['text':'
     * Execute command ourselves if we're here because the send failed (or
     * else we would have exited above).
     ','line_number':265,'multiline':True]
['text':'
     * Execute the command server related arguments and remove them
     * from the argc/argv array; We may have to return into main()
     ','line_number':314,'multiline':True]
['text':' end of option arguments','line_number':321,'multiline':False]
['text':' Probably out of memory, exit.','line_number':380,'multiline':False]
['text':' Win32 always works?','line_number':397,'multiline':False]
['text':' Failed to send, abort.','line_number':404,'multiline':False]
['text':' Let vim start normally.','line_number':410,'multiline':False]
['text':' Guess that when the server name starts with "g" it's a GUI','line_number':416,'multiline':False]
['text':' server, which we can bring to the foreground here.','line_number':417,'multiline':False]
['text':' Foreground() in the server doesn't work very well.','line_number':418,'multiline':False]
['text':'
	     * For --remote-wait: Wait until the server did edit each
	     * file.  Also detect that the server no longer runs.
	     ','line_number':423,'multiline':True]
['text':' Skip "+cmd" argument, don't wait for it to be edited.','line_number':438,'multiline':False]
['text':' Wait for all files to unload in remote','line_number':451,'multiline':False]
['text':' Win32 always works?','line_number':489,'multiline':False]
['text':' Output error from remote','line_number':501,'multiline':False]
['text':' Win32 always works?','line_number':511,'multiline':False]
['text':' Already processed. Take it out of the command line','line_number':522,'multiline':False]
['text':' display any collected messages','line_number':544,'multiline':False]
['text':' Mission accomplished - get out','line_number':545,'multiline':False]
['text':' Return back into main()','line_number':548,'multiline':False]
['text':'
 * Build a ":drop" command to send to a Vim server.
 ','line_number':553,'multiline':True]
['text':' Use ":tab drop" instead of ":drop".','line_number':560,'multiline':False]
['text':' Check if we have at least one argument.','line_number':576,'multiline':False]
['text':' Temporarily cd to the current directory to handle relative file names.','line_number':580,'multiline':False]
['text':' rem_backslash() will tell what chars to escape','line_number':591,'multiline':False]
['text':' Call inputsave() so that a prompt for an encryption key works.','line_number':603,'multiline':False]
['text':' On Unix the shell has already expanded the wildcards, don't want to','line_number':611,'multiline':False]
['text':' do it again in the Vim server.  On MS-Windows only escape','line_number':612,'multiline':False]
['text':' non-wildcard characters.','line_number':613,'multiline':False]
['text':' The :drop commands goes to Insert mode when 'insertmode' is set, use','line_number':633,'multiline':False]
['text':' CTRL-\ CTRL-N again.','line_number':634,'multiline':False]
['text':' Switch back to the correct current directory (prior to temporary path','line_number':637,'multiline':False]
['text':' switch) unless 'autochdir' is set, in which case it will already be','line_number':638,'multiline':False]
['text':' correct after the :drop command. With line breaks and spaces:','line_number':639,'multiline':False]
['text':'  if !exists('+acd') || !&acd','line_number':640,'multiline':False]
['text':'    if haslocaldir()','line_number':641,'multiline':False]
['text':'	    cd -','line_number':642,'multiline':False]
['text':'      lcd -','line_number':643,'multiline':False]
['text':'    elseif getcwd() ==# 'current path'','line_number':644,'multiline':False]
['text':'      cd -','line_number':645,'multiline':False]
['text':'    endif','line_number':646,'multiline':False]
['text':'  endif','line_number':647,'multiline':False]
['text':' Can't use <CR> after "inicmd", because a "startinsert" would cause','line_number':659,'multiline':False]
['text':' the following commands to be inserted as text.  Use a "|",','line_number':660,'multiline':False]
['text':' hopefully "inicmd" does allow this...','line_number':661,'multiline':False]
['text':' Bring the window to the foreground, goto Insert mode when 'im' set and','line_number':665,'multiline':False]
['text':' clear command line.','line_number':666,'multiline':False]
['text':'
 * Make our basic server name: use the specified "arg" if given, otherwise use
 * the tail of the command "cmd" we were started with.
 * Return the name in allocated memory.  This doesn't include a serial number.
 ','line_number':672,'multiline':True]
['text':' Remove .exe or .bat from the name.','line_number':687,'multiline':False]
['text':' FEAT_CLIENTSERVER','line_number':693,'multiline':False]
['text':' type error; errmsg already given','line_number':752,'multiline':False]
['text':' sending worked but evaluation failed','line_number':763,'multiline':False]
['text':'
 * "remote_expr()" function
 ','line_number':793,'multiline':True]
['text':'
 * "remote_foreground()" function
 ','line_number':815,'multiline':True]
['text':' On Win32 it's done in this application.','line_number':826,'multiline':False]
['text':' Send a foreground() expression to the server.','line_number':834,'multiline':False]
['text':' type error; errmsg already given','line_number':868,'multiline':False]
['text':' The server's HWND is encoded in the 'id' parameter','line_number':920,'multiline':False]
['text':'
 * "remote_send()" function
 ','line_number':944,'multiline':True]
['text':'
 * "remote_startserver()" function
 ','line_number':964,'multiline':True]
