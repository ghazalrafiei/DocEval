['text':' vi:set ts=8 sts=4 sw=4 noet:
 *
 * VIM - Vi IMproved	by Bram Moolenaar
 *
 * Do ":help uganda"  in Vim to read copying and usage conditions.
 * Do ":help credits" in Vim to see a list of people who contributed.
 * See README.txt for an overview of the Vim source code.
 ','line_number':1,'multiline':True]
['text':'
 * strings.c: string manipulation functions
 ','line_number':10,'multiline':True]
['text':'
 * Copy "string" into newly allocated memory.
 ','line_number':17,'multiline':True]
['text':'
 * Copy up to "len" bytes of "string" into newly allocated memory and
 * terminate with a NUL.
 * The allocated memory always has size "len + 1", also when "string" is
 * shorter.
 ','line_number':33,'multiline':True]
['text':'
 * Same as vim_strsave(), but any characters found in esc_chars are preceded
 * by a backslash.
 ','line_number':53,'multiline':True]
['text':'
 * Same as vim_strsave_escaped(), but when "bsl" is TRUE also escape
 * characters where rem_backslash() would remove the backslash.
 * Escape the characters with "cc".
 ','line_number':63,'multiline':True]
['text':' First count the number of backslashes required.','line_number':81,'multiline':False]
['text':' Then allocate the memory and insert them.','line_number':82,'multiline':False]
['text':' count the trailing NUL','line_number':83,'multiline':False]
['text':' count a multibyte char','line_number':88,'multiline':False]
['text':' count a backslash','line_number':93,'multiline':False]
['text':' count an ordinary char','line_number':94,'multiline':False]
['text':' skip multibyte char','line_number':106,'multiline':False]
['text':'
 * Return TRUE when 'shell' has "csh" in the tail.
 ','line_number':117,'multiline':True]
['text':'
 * Return TRUE when 'shell' has "fish" in the tail.
 ','line_number':126,'multiline':True]
['text':'
 * Escape "string" for use as a shell argument with system().
 * This uses single quotes, except when we know we need to use double quotes
 * (MS-DOS and MS-Windows not using PowerShell and without 'shellslash' set).
 * PowerShell also uses a novel escaping for enclosed single quotes - double
 * them up.
 * Escape a newline, depending on the 'shell' option.
 * When "do_special" is TRUE also replace "!", "%", "#" and things starting
 * with "<" like "<cfile>".
 * When "do_newline" is FALSE do not escape newline unless it is csh shell.
 * Returns the result in allocated memory, NULL if we have run out.
 ','line_number':135,'multiline':True]
['text':' Only csh and similar shells expand '!' within single quotes.  For sh and','line_number':163,'multiline':False]
['text':' the like we must not put a backslash before it, it will be taken','line_number':164,'multiline':False]
['text':' literally.  If do_special is set the '!' will be escaped twice.','line_number':165,'multiline':False]
['text':' Csh also needs to have "\n" escaped twice when do_special is set.','line_number':166,'multiline':False]
['text':' Fish shell uses '\' as an escape character within single quotes, so '\'','line_number':169,'multiline':False]
['text':' itself must be escaped to get a literal '\'.','line_number':170,'multiline':False]
['text':' PowerShell uses its own version for quoting single quotes','line_number':173,'multiline':False]
['text':' PowerShell only accepts single quotes so override shellslash.','line_number':178,'multiline':False]
['text':' First count the number of extra bytes required.','line_number':182,'multiline':False]
['text':' two quotes and a trailing NUL','line_number':183,'multiline':False]
['text':' " -> ""','line_number':190,'multiline':False]
['text':' ' => ''','line_number':197,'multiline':False]
['text':' ' => '\''','line_number':199,'multiline':False]
['text':' insert backslash','line_number':204,'multiline':False]
['text':' insert backslash','line_number':206,'multiline':False]
['text':' insert backslash','line_number':210,'multiline':False]
['text':' insert backslash','line_number':214,'multiline':False]
['text':' Allocate memory for the result and fill it.','line_number':217,'multiline':False]
['text':' add opening quote','line_number':223,'multiline':False]
['text':' insert backslash','line_number':274,'multiline':False]
['text':' copy the var','line_number':275,'multiline':False]
['text':' add terminating quote and finish with a NUL','line_number':289,'multiline':False]
['text':'
 * Like vim_strsave(), but make all characters uppercase.
 * This uses ASCII lower-to-upper case translation, language independent.
 ','line_number':302,'multiline':True]
['text':'
 * Like vim_strnsave(), but make all characters uppercase.
 * This uses ASCII lower-to-upper case translation, language independent.
 ','line_number':316,'multiline':True]
['text':'
 * ASCII lower-to-upper case translation, language independent.
 ','line_number':330,'multiline':True]
['text':'
 * Make string "s" all upper-case and return it in allocated memory.
 * Handles multi-byte characters as well as possible.
 * Returns NULL when out of memory.
 ','line_number':349,'multiline':True]
['text':' overlong sequence, use only the first byte','line_number':377,'multiline':False]
['text':' Reallocate string when byte count changes.  This is rare,','line_number':383,'multiline':False]
['text':' thus it's OK to do another malloc()/free().','line_number':384,'multiline':False]
['text':' skip multi-byte character','line_number':405,'multiline':False]
['text':' note that toupper() can be a macro','line_number':408,'multiline':False]
['text':'
 * Make string "s" all lower-case and return it in allocated memory.
 * Handles multi-byte characters as well as possible.
 * Returns NULL when out of memory.
 ','line_number':416,'multiline':True]
['text':' overlong sequence, use only the first byte','line_number':444,'multiline':False]
['text':' Reallocate string when byte count changes.  This is rare,','line_number':450,'multiline':False]
['text':' thus it's OK to do another malloc()/free().','line_number':451,'multiline':False]
['text':' skip multi-byte character','line_number':472,'multiline':False]
['text':' note that tolower() can be a macro','line_number':475,'multiline':False]
['text':'
 * delete spaces at the end of a string
 ','line_number':484,'multiline':True]
['text':'
 * Like strncpy(), but always terminate the result with one NUL.
 * "to" must be "len + 1" long!
 ','line_number':497,'multiline':True]
['text':'
 * Like strcat(), but make sure the result fits in "tosize" bytes and is
 * always NUL terminated. "from" and "to" may overlap.
 ','line_number':508,'multiline':True]
['text':'
 * A version of strlen() that has a maximum length.
 ','line_number':527,'multiline':True]
['text':'
 * Compare two strings, ignoring case, using current locale.
 * Doesn't work for multi-byte characters.
 * return 0 for match, < 0 for smaller, > 0 for bigger
 ','line_number':541,'multiline':True]
['text':' this character different','line_number':555,'multiline':False]
['text':' strings match until NUL','line_number':557,'multiline':False]
['text':' strings match','line_number':561,'multiline':False]
['text':'
 * Compare two strings, for length "len", ignoring case, using current locale.
 * Doesn't work for multi-byte characters.
 * return 0 for match, < 0 for smaller, > 0 for bigger
 ','line_number':566,'multiline':True]
['text':' this character different','line_number':580,'multiline':False]
['text':' strings match until NUL','line_number':582,'multiline':False]
['text':' strings match','line_number':587,'multiline':False]
['text':'
 * Search for first occurrence of "c" in "string".
 * Version of strchr() that handles unsigned char strings with characters from
 * 128 to 255 correctly.  It also doesn't return a pointer to the NUL at the
 * end of the string.
 ','line_number':591,'multiline':True]
['text':' Avoid matching an illegal byte here.','line_number':610,'multiline':False]
['text':'
 * Version of strchr() that only works for bytes and handles unsigned char
 * strings with characters above 128 correctly. It also doesn't return a
 * pointer to the NUL at the end of the string.
 ','line_number':649,'multiline':True]
['text':'
 * Search for last occurrence of "c" in "string".
 * Version of strrchr() that handles unsigned char strings with characters from
 * 128 to 255 correctly.  It also doesn't return a pointer to the NUL at the
 * end of the string.
 * Return NULL if not found.
 * Does not handle multi-byte char for "c"!
 ','line_number':668,'multiline':True]
['text':'
 * Vim's version of strpbrk(), in case it's missing.
 * Don't generate a prototype for this, causes problems when it's not used.
 ','line_number':691,'multiline':True]
['text':'
 * Sort an array of strings.
 ','line_number':714,'multiline':True]
['text':'
 * Return TRUE if string "s" contains a non-ASCII character (128 or higher).
 * When "s" is NULL FALSE is returned.
 ','line_number':734,'multiline':True]
['text':'
 * Concatenate two strings and return the result in allocated memory.
 * Returns NULL when out of memory.
 ','line_number':751,'multiline':True]
['text':'
 * Reverse text into allocated memory.
 * Returns the allocated string, NULL when out of memory.
 ','line_number':774,'multiline':True]
['text':'
 * Return string "str" in ' quotes, doubling ' characters.
 * If "str" is NULL an empty string is assumed.
 * If "function" is TRUE make it function('string').
 ','line_number':804,'multiline':True]
['text':'
 * Count the number of times "needle" occurs in string "haystack". Case is
 * ignored if "ic" is TRUE.
 ','line_number':848,'multiline':True]
['text':'
 * Make a typval_T of the first character of "input" and store it in "output".
 * Return OK or FAIL.
 ','line_number':887,'multiline':True]
['text':'
 * Implementation of map() and filter() for a String. Apply "expr" to every
 * character in string "str" and return the result in "rettv".
 ','line_number':909,'multiline':True]
['text':' set_vim_var_nr() doesn't set the type','line_number':932,'multiline':False]
['text':' Create one funccall_T for all eval_expr_typval() calls.','line_number':935,'multiline':False]
['text':'
 * Implementation of reduce() for String "argvars[0]" using the function "expr"
 * starting with the optional initial value "argvars[2]" and return the result
 * in "rettv".
 ','line_number':980,'multiline':True]
['text':' Create one funccall_T for all eval_expr_typval() calls.','line_number':1014,'multiline':False]
['text':'
 * Implementation of "byteidx()" and "byteidxcomp()" functions
 ','line_number':1036,'multiline':True]
['text':' EOL reached','line_number':1078,'multiline':False]
['text':'
 * "byteidx()" function
 ','line_number':1093,'multiline':True]
['text':'
 * "byteidxcomp()" function
 ','line_number':1102,'multiline':True]
['text':'
 * "charidx()" function
 ','line_number':1111,'multiline':True]
['text':' If the index is exactly the number of bytes or utf-16 code units','line_number':1152,'multiline':False]
['text':' in the string then return the length of the string in','line_number':1153,'multiline':False]
['text':' characters.','line_number':1154,'multiline':False]
['text':'
 * "str2list()" function
 ','line_number':1173,'multiline':True]
['text':'
 * "str2nr()" function
 ','line_number':1219,'multiline':True]
['text':' Text after the number is silently ignored.','line_number':1261,'multiline':False]
['text':'
 * "strgetchar()" function
 ','line_number':1269,'multiline':True]
['text':'
 * "stridx()" function
 ','line_number':1308,'multiline':True]
['text':' type error; errmsg already given','line_number':1331,'multiline':False]
['text':'
 * "string()" function
 ','line_number':1349,'multiline':True]
['text':' Make a copy if we have a value but it's not in allocated memory.','line_number':1361,'multiline':False]
['text':'
 * "strlen()" function
 ','line_number':1366,'multiline':True]
['text':'
 * "strcharlen()" function
 ','line_number':1396,'multiline':True]
['text':'
 * "strchars()" function
 ','line_number':1409,'multiline':True]
['text':'
 * "strutf16len()" function
 ','line_number':1438,'multiline':True]
['text':'
 * "strdisplaywidth()" function
 ','line_number':1470,'multiline':True]
['text':'
 * "strwidth()" function
 ','line_number':1493,'multiline':True]
['text':'
 * "strcharpart()" function
 ','line_number':1508,'multiline':True]
['text':' default: all bytes that are available.','line_number':1581,'multiline':False]
['text':' Only return the overlap between the specified part and the actual','line_number':1584,'multiline':False]
['text':' string.','line_number':1585,'multiline':False]
['text':'
 * "strpart()" function
 ','line_number':1602,'multiline':True]
['text':' default len: all bytes that are available.','line_number':1631,'multiline':False]
['text':' Only return the overlap between the specified part and the actual','line_number':1633,'multiline':False]
['text':' string.','line_number':1634,'multiline':False]
['text':' length in characters','line_number':1651,'multiline':False]
['text':'
 * "strridx()" function
 ','line_number':1661,'multiline':True]
['text':' type error; errmsg already given','line_number':1685,'multiline':False]
['text':' Third argument: upper limit for index','line_number':1690,'multiline':False]
['text':' can never find a match','line_number':1693,'multiline':False]
['text':' Empty string matches past the end.','line_number':1700,'multiline':False]
['text':'
 * "strtrans()" function
 ','line_number':1720,'multiline':True]
['text':'
 * "utf16idx()" function
 *
 * Converts a byte or character offset in a string to the corresponding UTF-16
 * code unit offset.
 ','line_number':1734,'multiline':True]
['text':' If the index is exactly the number of bytes or characters in the','line_number':1779,'multiline':False]
['text':' string then return the length of the string in utf-16 code','line_number':1780,'multiline':False]
['text':' units.','line_number':1781,'multiline':False]
['text':'
 * "tolower(string)" function
 ','line_number':1799,'multiline':True]
['text':'
 * "toupper(string)" function
 ','line_number':1812,'multiline':True]
['text':'
 * "tr(string, fromstr, tostr)" function
 ','line_number':1825,'multiline':True]
['text':' Default return value: empty string.','line_number':1856,'multiline':False]
['text':' type error; errmsg already given','line_number':1860,'multiline':False]
['text':' not multi-byte: fromstr and tostr must be the same length','line_number':1864,'multiline':False]
['text':' fromstr and tostr have to contain the same number of chars','line_number':1873,'multiline':False]
['text':' tostr is shorter than fromstr','line_number':1897,'multiline':False]
['text':' Check that fromstr and tostr have the same number of','line_number':1906,'multiline':False]
['text':' (multi-byte) characters.  Done only once when a character','line_number':1907,'multiline':False]
['text':' of in_str doesn't appear in fromstr.','line_number':1908,'multiline':False]
['text':' When not using multi-byte chars we can do it faster.','line_number':1927,'multiline':False]
['text':' add a terminating NUL','line_number':1937,'multiline':False]
['text':'
 * "trim({expr})" function
 ','line_number':1944,'multiline':True]
['text':' leading or trailing characters to trim','line_number':1987,'multiline':False]
['text':' Trim leading characters','line_number':2001,'multiline':False]
['text':' Trim trailing characters','line_number':2025,'multiline':False]
['text':'
 * Get number argument from "idxp" entry in "tvs".  First entry is 1.
 ','line_number':2051,'multiline':True]
['text':'
 * Get string argument from "idxp" entry in "tvs".  First entry is 1.
 * If "tofree" is NULL tv_get_string_chk() is used.  Some types (e.g. List)
 * are not converted to a string.
 * If "tofree" is not NULL echo_string() is used.  All types are converted to
 * a string with the same format as ":echo".  The caller must free "*tofree".
 * Returns NULL for an error.
 ','line_number':2073,'multiline':True]
['text':'
 * Get float argument from "idxp" entry in "tvs".  First entry is 1.
 ','line_number':2101,'multiline':True]
['text':'
 * Return the representation of infinity for printf() function:
 * "-inf", "inf", "+inf", " inf", "-INF", "INF", "+INF" or " INF".
 ','line_number':2127,'multiline':True]
['text':'
 * This code was included to provide a portable vsnprintf() and snprintf().
 * Some systems may provide their own, but we always use this one for
 * consistency.
 *
 * This code is based on snprintf.c - a portable implementation of snprintf
 * by Mark Martinec <mark.martinec@ijs.si>, Version 2.2, 2000-10-06.
 * Included with permission.  It was heavily modified to fit in Vim.
 * The original code, including useful comments, can be found here:
 *	http://www.ijs.si/software/snprintf/
 *
 * This snprintf() only supports the following conversion specifiers:
 * s, c, d, u, o, x, X, p  (and synonyms: i, D, U, O - see below)
 * with flags: '-', '+', ' ', '0' and '#'.
 * An asterisk is supported for field width as well as precision.
 *
 * Limited support for floating point was added: 'f', 'F', 'e', 'E', 'g', 'G'.
 *
 * Length modifiers 'h' (short int) and 'l' (long int) and 'll' (long long int)
 * are supported.  NOTE: for 'll' the argument is varnumber_T or uvarnumber_T.
 *
 * The locale is not used, the string is used as a byte string.  This is only
 * relevant for double-byte encodings where the second byte may be '%'.
 *
 * It is permitted for "str_m" to be zero, and it is permitted to specify NULL
 * pointer for resulting string argument if "str_m" is zero (as per ISO C99).
 *
 * The return value is the number of characters which would be generated
 * for the given input, excluding the trailing NUL. If this value
 * is greater or equal to "str_m", not all characters from the result
 * have been stored in str, output bytes beyond the ("str_m"-1) -th character
 * are discarded. If "str_m" is greater than zero it is guaranteed
 * the resulting string will be NUL-terminated.
 ','line_number':2149,'multiline':True]
['text':'
 * When va_list is not supported we only define vim_snprintf().
 *
 * vim_vsnprintf_typval() can be invoked with either "va_list" or a list of
 * "typval_T".  When the latter is not used it must be NULL.
 ','line_number':2184,'multiline':True]
['text':' When generating prototypes all of this is skipped, cproto doesn't','line_number':2191,'multiline':False]
['text':' understand this.','line_number':2192,'multiline':False]
['text':' Like vim_vsnprintf() but append to the string.','line_number':2195,'multiline':False]
['text':' Types that can be used in a format string
 ','line_number':2252,'multiline':True]
['text':' allowed values: \0, h, l, L','line_number':2258,'multiline':False]
['text':' current conversion specifier character','line_number':2261,'multiline':False]
['text':' parse 'h', 'l' and 'll' length modifiers','line_number':2264,'multiline':False]
['text':' double l = __int64 / varnumber_T','line_number':2271,'multiline':False]
['text':' common synonyms:','line_number':2278,'multiline':False]
['text':' get parameter value, do initial processing','line_number':2289,'multiline':False]
['text':' '%' and 'c' behave similar to 's' regarding flags and field','line_number':2292,'multiline':False]
['text':' widths','line_number':2293,'multiline':False]
['text':' NOTE: the u, b, o, x, X and p conversion specifiers','line_number':2310,'multiline':False]
['text':' imply the value is unsigned;  d implies a signed','line_number':2311,'multiline':False]
['text':' value','line_number':2312,'multiline':False]
['text':' 0 if numeric argument is zero (or if pointer is','line_number':2314,'multiline':False]
['text':' NULL for 'p'), +1 if greater than zero (or nonzero','line_number':2315,'multiline':False]
['text':' for unsigned arguments), -1 if negative (unsigned','line_number':2316,'multiline':False]
['text':' argument is never negative)','line_number':2317,'multiline':False]
['text':' signed','line_number':2325,'multiline':False]
['text':' char and short arguments are passed as int.','line_number':2330,'multiline':False]
['text':' unsigned','line_number':2340,'multiline':False]
['text':' allowed values: \0, h, l, L','line_number':2509,'multiline':False]
['text':' variable for positional arg','line_number':2512,'multiline':False]
['text':' skip '%'','line_number':2516,'multiline':False]
['text':' First check to see if we find a positional','line_number':2518,'multiline':False]
['text':' argument specifier','line_number':2519,'multiline':False]
['text':' 0 flag at the wrong place','line_number':2529,'multiline':False]
['text':' Positional argument','line_number':2534,'multiline':False]
['text':' parse flags','line_number':2547,'multiline':False]
['text':' If both the ' ' and '+' flags appear, the ' '','line_number':2556,'multiline':False]
['text':' flag should be ignored','line_number':2557,'multiline':False]
['text':' If the '0' and '-' flags both appear, the '0' flag should be','line_number':2564,'multiline':False]
['text':' ignored.','line_number':2565,'multiline':False]
['text':' parse field width','line_number':2567,'multiline':False]
['text':' Positional argument field width','line_number':2574,'multiline':False]
['text':' size_t could be wider than unsigned int; make sure we treat','line_number':2603,'multiline':False]
['text':' argument like common implementations do','line_number':2604,'multiline':False]
['text':' parse precision','line_number':2617,'multiline':False]
['text':' Parse precision','line_number':2628,'multiline':False]
['text':' size_t could be wider than unsigned int; make sure we','line_number':2658,'multiline':False]
['text':' treat argument like common implementations do','line_number':2659,'multiline':False]
['text':' parse 'h', 'l' and 'll' length modifiers','line_number':2681,'multiline':False]
['text':' double l = __int64 / varnumber_T','line_number':2688,'multiline':False]
['text':' length_modifier = 'L';','line_number':2689,'multiline':False]
['text':' Check for known format specifiers. % is special!','line_number':2696,'multiline':False]
['text':' step over the just processed conversion specifier','line_number':2740,'multiline':False]
['text':' Reset ap to ap_start and skip arg_idx - 1 types','line_number':2790,'multiline':False]
['text':' Skip over any we should skip','line_number':2796,'multiline':False]
['text':' get parameter value, do initial processing','line_number':2814,'multiline':False]
['text':' Because we know that after we return from this call,','line_number':2863,'multiline':False]
['text':' a va_arg() call is made, we can pre-emptively','line_number':2864,'multiline':False]
['text':' increment the current argument index.','line_number':2865,'multiline':False]
['text':' Copy up to the next '%' or NUL without any changes.','line_number':2902,'multiline':False]
['text':' If both the ' ' and '+' flags appear, the ' ' flag should be','line_number':2918,'multiline':False]
['text':' ignored.','line_number':2919,'multiline':False]
['text':' allowed values: \0, h, l, L','line_number':2922,'multiline':False]
['text':' temporary buffer for simple numeric->string conversion','line_number':2925,'multiline':False]
['text':' On my system 1e308 is the biggest number possible.','line_number':2926,'multiline':False]
['text':' That sounds reasonable to use as the maximum','line_number':2927,'multiline':False]
['text':' printable.','line_number':2928,'multiline':False]
['text':' string address in case of string argument','line_number':2931,'multiline':False]
['text':' natural field width of arg without padding and sign','line_number':2934,'multiline':False]
['text':' unsigned char argument value - only defined for c conversion.','line_number':2937,'multiline':False]
['text':' N.B. standard explicitly states the char argument for the c','line_number':2938,'multiline':False]
['text':' conversion is unsigned','line_number':2939,'multiline':False]
['text':' number of zeros to be inserted for numeric conversions as','line_number':2942,'multiline':False]
['text':' required by the precision or minimal field width','line_number':2943,'multiline':False]
['text':' index into tmp where zero padding is to be inserted','line_number':2946,'multiline':False]
['text':' current conversion specifier character','line_number':2949,'multiline':False]
['text':' buffer for 's' and 'S' specs','line_number':2952,'multiline':False]
['text':' variables for positional arg','line_number':2955,'multiline':False]
['text':' skip '%'','line_number':2960,'multiline':False]
['text':' First check to see if we find a positional','line_number':2962,'multiline':False]
['text':' argument specifier','line_number':2963,'multiline':False]
['text':' Positional argument','line_number':2971,'multiline':False]
['text':' parse flags','line_number':2981,'multiline':False]
['text':' If both the ' ' and '+' flags appear, the ' '','line_number':2991,'multiline':False]
['text':' flag should be ignored','line_number':2992,'multiline':False]
['text':' If the '0' and '-' flags both appear, the '0' flag should be','line_number':2999,'multiline':False]
['text':' ignored.','line_number':3000,'multiline':False]
['text':' parse field width','line_number':3002,'multiline':False]
['text':' Positional argument field width','line_number':3011,'multiline':False]
['text':' size_t could be wider than unsigned int; make sure we treat','line_number':3039,'multiline':False]
['text':' argument like common implementations do','line_number':3040,'multiline':False]
['text':' parse precision','line_number':3048,'multiline':False]
['text':' size_t could be wider than unsigned int; make sure we','line_number':3056,'multiline':False]
['text':' treat argument like common implementations do','line_number':3057,'multiline':False]
['text':' positional argument','line_number':3072,'multiline':False]
['text':' parse 'h', 'l' and 'll' length modifiers','line_number':3100,'multiline':False]
['text':' double l = __int64 / varnumber_T','line_number':3107,'multiline':False]
['text':' common synonyms:','line_number':3114,'multiline':False]
['text':' get parameter value, do initial processing','line_number':3136,'multiline':False]
['text':' '%' and 'c' behave similar to 's' regarding flags and field','line_number':3139,'multiline':False]
['text':' widths','line_number':3140,'multiline':False]
['text':' standard demands unsigned char','line_number':3164,'multiline':False]
['text':' make sure not to address string beyond the specified','line_number':3185,'multiline':False]
['text':' precision !!!','line_number':3186,'multiline':False]
['text':' truncate string if necessary as requested by precision','line_number':3189,'multiline':False]
['text':' Don't put the #if inside memchr(), it can be a','line_number':3194,'multiline':False]
['text':' macro.','line_number':3195,'multiline':False]
['text':' memchr on HP does not like n > 2^31  !!!','line_number':3196,'multiline':False]
['text':' NOTE: the u, b, o, x, X and p conversion specifiers','line_number':3236,'multiline':False]
['text':' imply the value is unsigned;  d implies a signed','line_number':3237,'multiline':False]
['text':' value','line_number':3238,'multiline':False]
['text':' 0 if numeric argument is zero (or if pointer is','line_number':3240,'multiline':False]
['text':' NULL for 'p'), +1 if greater than zero (or nonzero','line_number':3241,'multiline':False]
['text':' for unsigned arguments), -1 if negative (unsigned','line_number':3242,'multiline':False]
['text':' argument is never negative)','line_number':3243,'multiline':False]
['text':' only set for length modifier h, or for no length','line_number':3246,'multiline':False]
['text':' modifiers','line_number':3247,'multiline':False]
['text':' only set for length modifier l','line_number':3251,'multiline':False]
['text':' only set for length modifier ll','line_number':3255,'multiline':False]
['text':' only set for b conversion','line_number':3259,'multiline':False]
['text':' pointer argument value -only defined for p','line_number':3262,'multiline':False]
['text':' conversion','line_number':3263,'multiline':False]
['text':' signed','line_number':3297,'multiline':False]
['text':' char and short arguments are passed as int.','line_number':3302,'multiline':False]
['text':' unsigned','line_number':3348,'multiline':False]
['text':' NOTE:','line_number':3397,'multiline':False]
['text':'   For d, i, u, o, x, and X conversions, if precision is','line_number':3398,'multiline':False]
['text':'   specified, the '0' flag should be ignored. This is so','line_number':3399,'multiline':False]
['text':'   with Solaris 2.6, Digital UNIX 4.0, HPUX 10, Linux,','line_number':3400,'multiline':False]
['text':'   FreeBSD, NetBSD; but not with Perl.','line_number':3401,'multiline':False]
['text':' leave negative numbers for sprintf to handle, to','line_number':3408,'multiline':False]
['text':' avoid handling tricky cases like (short int)-32768','line_number':3409,'multiline':False]
['text':' alternate form should have no effect for p','line_number':3420,'multiline':False]
['text':' conversion, but ...','line_number':3421,'multiline':False]
['text':' default precision is 1','line_number':3426,'multiline':False]
['text':' When zero value is formatted with an explicit','line_number':3429,'multiline':False]
['text':' precision 0, the resulting formatted string is','line_number':3430,'multiline':False]
['text':' empty (d, i, u, b, B, o, x, X, p).','line_number':3431,'multiline':False]
['text':' construct a simple format string for sprintf','line_number':3438,'multiline':False]
['text':' signed','line_number':3478,'multiline':False]
['text':' unsigned','line_number':3499,'multiline':False]
['text':' include the optional minus sign and possible','line_number':3519,'multiline':False]
['text':' "0x" in the region before the zero padding','line_number':3520,'multiline':False]
['text':' insertion point','line_number':3521,'multiline':False]
['text':' unless zero is already the first','line_number':3537,'multiline':False]
['text':' character','line_number':3538,'multiline':False]
['text':' assure leading zero for alternate-form','line_number':3542,'multiline':False]
['text':' octal numbers','line_number':3543,'multiline':False]
['text':' precision is increased to force the','line_number':3547,'multiline':False]
['text':' first character to be zero, except if a','line_number':3548,'multiline':False]
['text':' zero value is formatted with an','line_number':3549,'multiline':False]
['text':' explicit precision of zero','line_number':3550,'multiline':False]
['text':' zero padding to specified precision?','line_number':3554,'multiline':False]
['text':' zero padding to specified minimal field width?','line_number':3558,'multiline':False]
['text':' Floating point.','line_number':3576,'multiline':False]
['text':' Would be nice to use %g directly, but it prints','line_number':3595,'multiline':False]
['text':' "1.0" as "1", we don't want that.','line_number':3596,'multiline':False]
['text':' Avoid a buffer overflow','line_number':3613,'multiline':False]
['text':' Not a number: nan or NAN','line_number':3623,'multiline':False]
['text':' Regular float number','line_number':3638,'multiline':False]
['text':' Make sure we don't get more digits than we','line_number':3647,'multiline':False]
['text':' have room for.','line_number':3648,'multiline':False]
['text':' Using %g or %G: remove superfluous zeroes.','line_number':3667,'multiline':False]
['text':' Remove superfluous '+' and leading','line_number':3676,'multiline':False]
['text':' zeroes from the exponent.','line_number':3677,'multiline':False]
['text':' Change "1.0e+07" to "1.0e07"','line_number':3680,'multiline':False]
['text':' Change "1.0e07" to "1.0e7"','line_number':3687,'multiline':False]
['text':' Remove trailing zeroes, but keep the one','line_number':3696,'multiline':False]
['text':' just after a dot.','line_number':3697,'multiline':False]
['text':' Be consistent: some printf("%e") use 1.0e+12','line_number':3710,'multiline':False]
['text':' and some 1.0e+012.  Remove one zero in the last','line_number':3711,'multiline':False]
['text':' case.','line_number':3712,'multiline':False]
['text':' padding 0's should be inserted after the sign','line_number':3728,'multiline':False]
['text':' unrecognized conversion specifier, keep format string','line_number':3737,'multiline':False]
['text':' as-is','line_number':3738,'multiline':False]
['text':' turn zero padding off for non-numeric','line_number':3739,'multiline':False]
['text':' conversion','line_number':3740,'multiline':False]
['text':' reset flags','line_number':3742,'multiline':False]
['text':' discard the unrecognized conversion, just keep *','line_number':3744,'multiline':False]
['text':' the unrecognized conversion character','line_number':3745,'multiline':False]
['text':' include invalid conversion specifier','line_number':3749,'multiline':False]
['text':' unchanged if not at end-of-string','line_number':3750,'multiline':False]
['text':' step over the just processed conversion specifier','line_number':3755,'multiline':False]
['text':' insert padding to the left as requested by min_field_width;','line_number':3757,'multiline':False]
['text':' this does not include the zero padding in case of numerical','line_number':3758,'multiline':False]
['text':' conversions','line_number':3759,'multiline':False]
['text':' left padding with blank or zero','line_number':3762,'multiline':False]
['text':' zero padding as requested by the precision or by the minimal','line_number':3779,'multiline':False]
['text':' field width for numeric conversions required?','line_number':3780,'multiline':False]
['text':' will not copy first part of numeric right now, *','line_number':3783,'multiline':False]
['text':' force it to be copied later in its entirety','line_number':3784,'multiline':False]
['text':' insert first part of numerics (sign or '0x') before zero','line_number':3789,'multiline':False]
['text':' padding','line_number':3790,'multiline':False]
['text':' insert zero padding as requested by the precision or min','line_number':3806,'multiline':False]
['text':' field width','line_number':3807,'multiline':False]
['text':' insert formatted string','line_number':3823,'multiline':False]
['text':' (or as-is conversion specifier for unknown conversions)','line_number':3824,'multiline':False]
['text':' insert right padding','line_number':3842,'multiline':False]
['text':' right blank padding to the field width','line_number':3845,'multiline':False]
['text':' make sure the string is nul-terminated even at the expense of','line_number':3868,'multiline':False]
['text':' overwriting the last character (shouldn't happen, but just in case)','line_number':3869,'multiline':False]
['text':'','line_number':3870,'multiline':False]
['text':' Return the number of characters formatted (excluding trailing nul','line_number':3880,'multiline':False]
['text':' character), that is, the number of characters that would have been','line_number':3881,'multiline':False]
['text':' written to the buffer if it were large enough.','line_number':3882,'multiline':False]
['text':' PROTO','line_number':3886,'multiline':False]
