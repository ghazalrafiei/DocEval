['text':' vi:set ts=8 sts=4 sw=4 noet:
 *
 * VIM - Vi IMproved	by Bram Moolenaar
 *
 * Do ":help uganda"  in Vim to read copying and usage conditions.
 * Do ":help credits" in Vim to see a list of people who contributed.
 * See README.txt for an overview of the Vim source code.
 ','line_number':1,'multiline':True]
['text':'
 * vim9execute.c: execute Vim9 script instructions
 ','line_number':10,'multiline':True]
['text':' When not generating protos this is included in proto.h','line_number':19,'multiline':False]
['text':' Structure put on ec_trystack when ISN_TRY is encountered.','line_number':25,'multiline':False]
['text':' ec_frame_idx at ISN_TRY','line_number':27,'multiline':False]
['text':' size of ectx.ec_stack at ISN_TRY','line_number':28,'multiline':False]
['text':' in catch or finally block','line_number':29,'multiline':False]
['text':' set did_throw in :endtry','line_number':30,'multiline':False]
['text':' instruction of the first :catch or :finally','line_number':31,'multiline':False]
['text':' instruction of the :finally block or zero','line_number':32,'multiline':False]
['text':' instruction of the :endtry','line_number':33,'multiline':False]
['text':' catch block entered','line_number':34,'multiline':False]
['text':' :continue encountered, jump here (minus one)','line_number':35,'multiline':False]
['text':' when TRUE return from end of :finally','line_number':36,'multiline':False]
['text':' Data local to a function.','line_number':39,'multiline':False]
['text':' On a function call, if not empty, is saved on the stack and restored when','line_number':40,'multiline':False]
['text':' returning.','line_number':41,'multiline':False]
['text':' Structure to hold a reference to an outer_T, with information of whether it','line_number':48,'multiline':False]
['text':' was allocated.','line_number':49,'multiline':False]
['text':' decrement "or_partial->pt_refcount" later','line_number':52,'multiline':False]
['text':' free "or_outer" later','line_number':53,'multiline':False]
['text':' A stack is used to store:','line_number':56,'multiline':False]
['text':' - arguments passed to a :def function','line_number':57,'multiline':False]
['text':' - info about the calling function, to use when returning','line_number':58,'multiline':False]
['text':' - local variables','line_number':59,'multiline':False]
['text':' - temporary values','line_number':60,'multiline':False]
['text':'','line_number':61,'multiline':False]
['text':' In detail (FP == Frame Pointer):','line_number':62,'multiline':False]
['text':'	  arg1		first argument from caller (if present)','line_number':63,'multiline':False]
['text':'	  arg2		second argument from caller (if present)','line_number':64,'multiline':False]
['text':'	  extra_arg1	any missing optional argument default value','line_number':65,'multiline':False]
['text':' FP ->  cur_func	calling function','line_number':66,'multiline':False]
['text':'	  current	previous instruction pointer','line_number':67,'multiline':False]
['text':'	  frame_ptr	previous Frame Pointer','line_number':68,'multiline':False]
['text':'	  var1		space for local variable','line_number':69,'multiline':False]
['text':'	  var2		space for local variable','line_number':70,'multiline':False]
['text':'	  ....		fixed space for max. number of local variables','line_number':71,'multiline':False]
['text':'	  temp		temporary values','line_number':72,'multiline':False]
['text':'	  ....		flexible space for temporary values (can grow big)','line_number':73,'multiline':False]
['text':'
 * Execution context.
 ','line_number':75,'multiline':True]
['text':' stack of typval_T values','line_number':79,'multiline':False]
['text':' index in ec_stack: context of ec_dfunc_idx','line_number':80,'multiline':False]
['text':' frame index when called','line_number':81,'multiline':False]
['text':' outer scope used for closures, allocated','line_number':83,'multiline':False]
['text':' stack of trycmd_T values','line_number':86,'multiline':False]
['text':' array with instructions','line_number':88,'multiline':False]
['text':' current function index','line_number':89,'multiline':False]
['text':' index in ec_instr: instruction to execute','line_number':90,'multiline':False]
['text':' partials that might be a closure','line_number':92,'multiline':False]
['text':' stack of profinfo_T used when profiling.','line_number':100,'multiline':False]
['text':' Get pointer to item in the stack.','line_number':104,'multiline':False]
['text':' Get pointer to item relative to the bottom of the stack, -1 is the last one.','line_number':107,'multiline':False]
['text':' Get pointer to a local variable on the stack.  Negative for arguments.','line_number':110,'multiline':False]
['text':'
 * Return the number of arguments, including optional arguments and any vararg.
 ','line_number':119,'multiline':True]
['text':'
 * Create a new string from "count" items at the bottom of the stack.
 * A trailing NUL is appended.
 * When "count" is zero an empty string is added to the stack.
 ','line_number':128,'multiline':True]
['text':' Preallocate enough space for the whole string to avoid having to grow','line_number':142,'multiline':False]
['text':' and copy.','line_number':143,'multiline':False]
['text':' add a terminating NUL','line_number':161,'multiline':False]
['text':'
 * Create a new list from "count" items at the bottom of the stack.
 * When "count" is zero an empty list is added to the stack.
 * When "count" is -1 a NULL list is added to the stack.
 ','line_number':170,'multiline':True]
['text':'
 * Implementation of ISN_NEWDICT.
 * Returns FAIL on total failure, MAYBE on error.
 ','line_number':209,'multiline':True]
['text':' have already checked key type is VAR_STRING','line_number':229,'multiline':False]
['text':' check key is unique','line_number':231,'multiline':False]
['text':' can this ever happen?','line_number':253,'multiline':False]
['text':'
 * If debug_tick changed check if "ufunc" has a breakpoint and update
 * "uf_has_breakpoint".
 ','line_number':275,'multiline':True]
['text':'
 * Put a value on the dict stack.  This consumes "tv".
 ','line_number':294,'multiline':True]
['text':'
 * Get the typval at top of the dict stack.
 ','line_number':309,'multiline':True]
['text':'
 * Get the dict at top of the dict stack.
 ','line_number':320,'multiline':True]
['text':'
 * Drop an item from the dict stack.
 ','line_number':336,'multiline':True]
['text':'
 * Drop items from the dict stack until the length is equal to "len".
 ','line_number':351,'multiline':True]
['text':'
 * Get a pointer to useful "pt_outer" of "pt".
 ','line_number':361,'multiline':True]
['text':' partial using partial (recursively)','line_number':372,'multiline':False]
['text':'
 * Check "argcount" arguments on the stack against what "ufunc" expects.
 * "off" is the offset of arguments on the stack.
 * Return OK or FAIL.
 ','line_number':378,'multiline':True]
['text':' The function can change at runtime, check that the argument','line_number':391,'multiline':False]
['text':' types are correct.','line_number':392,'multiline':False]
['text':' assume a v:none argument, using the default value, is always OK','line_number':397,'multiline':False]
['text':'
 * Call compiled function "cdf_idx" from compiled code.
 * This adds a stack frame and sets the instruction pointer to the start of the
 * called function.
 * If "pt_arg" is not NULL use "pt_arg->pt_outer" for ec_outer_ref->or_outer.
 *
 * Stack has:
 * - current arguments (already there)
 * - omitted optional argument (default values) added here
 * - stack frame:
 *	- pointer to calling function
 *	- Index of next instruction in calling function
 *	- previous frame pointer
 * - reserved space for local variables
 ','line_number':413,'multiline':True]
['text':' don't use ufunc->uf_name, it may have been freed','line_number':450,'multiline':False]
['text':' When debugging and using "cont" switches to the not-debugged','line_number':472,'multiline':False]
['text':' instructions, may need to still compile them.','line_number':473,'multiline':False]
['text':' compile_def_function() may cause def_functions.ga_data to change','line_number':479,'multiline':False]
['text':' Need to make a list out of the vararg arguments.','line_number':492,'multiline':False]
['text':' Stack at time of call with 2 varargs:','line_number':493,'multiline':False]
['text':'   normal_arg','line_number':494,'multiline':False]
['text':'   optional_arg','line_number':495,'multiline':False]
['text':'   vararg_1','line_number':496,'multiline':False]
['text':'   vararg_2','line_number':497,'multiline':False]
['text':' After creating the list:','line_number':498,'multiline':False]
['text':'   normal_arg','line_number':499,'multiline':False]
['text':'   optional_arg','line_number':500,'multiline':False]
['text':'   vararg-list','line_number':501,'multiline':False]
['text':' With missing optional arguments we get:','line_number':502,'multiline':False]
['text':'    normal_arg','line_number':503,'multiline':False]
['text':' After creating the list','line_number':504,'multiline':False]
['text':'    normal_arg','line_number':505,'multiline':False]
['text':'    (space for optional_arg)','line_number':506,'multiline':False]
['text':'    vararg-list','line_number':507,'multiline':False]
['text':' If this is an object method, the object is just before the arguments.','line_number':535,'multiline':False]
['text':' If this is not a constructor method, then a valid object is','line_number':541,'multiline':False]
['text':' needed.','line_number':542,'multiline':False]
['text':' Check the argument types.','line_number':547,'multiline':False]
['text':' While check_ufunc_arg_types call, def function compilation process may','line_number':551,'multiline':False]
['text':' run.  If so many def functions are compiled, def_functions array may be','line_number':552,'multiline':False]
['text':' reallocated and dfunc may no longer have valid pointer.  Get the object','line_number':553,'multiline':False]
['text':' pointer from def_functions again here.','line_number':554,'multiline':False]
['text':' Reserve space for:','line_number':557,'multiline':False]
['text':' - missing arguments','line_number':558,'multiline':False]
['text':' - stack frame','line_number':559,'multiline':False]
['text':' - local variables','line_number':560,'multiline':False]
['text':' - if needed: a counter for number of closures created in','line_number':561,'multiline':False]
['text':'   ectx->ec_funcrefs.','line_number':562,'multiline':False]
['text':' The object pointer is in the execution typval stack.  The GA_GROW call','line_number':568,'multiline':False]
['text':' above may have reallocated the execution typval stack.  So the object','line_number':569,'multiline':False]
['text':' pointer may not be valid anymore.  Get the object pointer again from the','line_number':570,'multiline':False]
['text':' execution stack.','line_number':571,'multiline':False]
['text':' If depth of calling is getting too high, don't execute the function.','line_number':574,'multiline':False]
['text':' Only make a copy of funclocal if it contains something to restore.','line_number':579,'multiline':False]
['text':' Move the vararg-list to below the missing optional arguments.','line_number':589,'multiline':False]
['text':' Reserve space for omitted optional arguments, filled in soon.','line_number':593,'multiline':False]
['text':' Store current execution state in stack frame for ISN_RETURN.','line_number':598,'multiline':False]
['text':' Initialize all local variables to number zero.  Also initialize the','line_number':608,'multiline':False]
['text':' variable that counts how many closures were created.  This is used in','line_number':609,'multiline':False]
['text':' handle_closure_in_use().','line_number':610,'multiline':False]
['text':' For an object method move the object from just before the arguments to','line_number':621,'multiline':False]
['text':' the first local variable.','line_number':622,'multiline':False]
['text':' Set execution state to the start of the called function.','line_number':669,'multiline':False]
['text':' Set the script context to the script where the function was defined.','line_number':675,'multiline':False]
['text':' Save the current context so it can be restored on return.','line_number':676,'multiline':False]
['text':' Start execution at the first instruction.','line_number':681,'multiline':False]
['text':' Double linked list of funcstack_T in use.','line_number':687,'multiline':False]
['text':' Link in list of funcstacks.','line_number':693,'multiline':False]
['text':'
 * Used when returning from a function: Check if any closure is still
 * referenced.  If so then move the arguments and variables to a separate piece
 * of stack to be used when the closure is called.
 * When "free_arguments" is TRUE the arguments are to be freed.
 * Returns FAIL when out of memory.
 ','line_number':712,'multiline':True]
['text':' function was freed','line_number':733,'multiline':False]
['text':' no closures','line_number':735,'multiline':False]
['text':' no funcrefs created','line_number':739,'multiline':False]
['text':' Compute "top": the first entry in the stack used by the function.','line_number':741,'multiline':False]
['text':' This is the first argument (after that comes the stack frame and then','line_number':742,'multiline':False]
['text':' the local variables).','line_number':743,'multiline':False]
['text':' Check if any created closure is still in use.','line_number':747,'multiline':False]
['text':' count is off or already done','line_number':754,'multiline':False]
['text':' A Reference in a local variable doesn't count, it gets','line_number':761,'multiline':False]
['text':' unreferenced on return.','line_number':762,'multiline':False]
['text':' A closure is using the arguments and/or local variables.','line_number':783,'multiline':False]
['text':' Move them to the called function.','line_number':784,'multiline':False]
['text':' Move or copy the arguments.','line_number':800,'multiline':False]
['text':' Skip the stack frame.','line_number':812,'multiline':False]
['text':' Move the local variables.','line_number':813,'multiline':False]
['text':' A partial created for a local function, that is also used as a','line_number':818,'multiline':False]
['text':' local variable, has a reference count for the variable, thus','line_number':819,'multiline':False]
['text':' will never go down to zero.  When all these refcounts are one','line_number':820,'multiline':False]
['text':' then the funcstack is unused.  We need to count how many we have','line_number':821,'multiline':False]
['text':' so we know when to check.','line_number':822,'multiline':False]
['text':'
 * Called when a partial is freed or its reference count goes down to one.  The
 * funcstack may be the only reference to the partials in the local variables.
 * Go over all of them, the funcref and can be freed if all partials
 * referencing the funcstack have a reference count of one.
 * Returns TRUE if the funcstack is freed, the partial referencing it will then
 * also have been freed.
 ','line_number':861,'multiline':True]
['text':' All partials referencing the funcstack have a reference count of','line_number':893,'multiline':False]
['text':' one, thus the funcstack is no longer of use.','line_number':894,'multiline':False]
['text':'
 * For garbage collecting: set references in all variables referenced by
 * all funcstacks.
 ','line_number':904,'multiline':True]
['text':' abort','line_number':921,'multiline':False]
['text':' Ugly static to avoid passing the execution context around through many','line_number':926,'multiline':False]
['text':' layers.','line_number':927,'multiline':False]
['text':'
 * Return TRUE if currently executing a :def function.
 * Can be used by builtin functions only.
 ','line_number':930,'multiline':True]
['text':'
 * If executing a class/object method, then fill in the lval_T.
 * Set lr_tv to the executing item, and lr_exec_class to the executing class;
 * use free_tv and class_unref when finished with the lval_root.
 * For use by builtin functions.
 *
 * Return FAIL and do nothing if not executing in a class; otherwise OK.
 ','line_number':940,'multiline':True]
['text':' executing a method?','line_number':957,'multiline':False]
['text':'
 * Clear "current_ectx" and return the previous value.  To be used when calling
 * a user function.
 ','line_number':975,'multiline':True]
['text':'
 * Add an entry for a deferred function call to the currently executing
 * function.
 * Return the list or NULL when failed.
 ','line_number':996,'multiline':True]
['text':' first time, allocate the list','line_number':1011,'multiline':False]
['text':'
 * Handle ISN_DEFER.  Stack has a function reference and "argcount" arguments.
 * The local variable that lists deferred functions is "var_idx".
 * Returns OK or FAIL.
 ','line_number':1032,'multiline':True]
['text':'
 * Add a deferred call for "name" with arguments "argvars[argcount]".
 * Consumes "name", also on failure.
 * Only to be called when in_def_function() returns TRUE.
 ','line_number':1063,'multiline':True]
['text':'
 * Invoked when returning from a function: Invoke any deferred calls.
 ','line_number':1101,'multiline':True]
['text':' no function added','line_number':1113,'multiline':False]
['text':' already being called, can happen if function does ":qa"','line_number':1125,'multiline':False]
['text':' If the deferred function is called after an exception, then only the','line_number':1149,'multiline':False]
['text':' first statement in the function will be executed (because of the','line_number':1150,'multiline':False]
['text':' exception).  So save and restore the try/catch/throw exception','line_number':1151,'multiline':False]
['text':' state.','line_number':1152,'multiline':False]
['text':'
 * Return from the current function.
 ','line_number':1166,'multiline':True]
['text':' No check for uf_refcount being zero, cannot think of a way that would','line_number':1202,'multiline':False]
['text':' happen.','line_number':1203,'multiline':False]
['text':' execution context goes one level up','line_number':1206,'multiline':False]
['text':' Clear the arguments.  If this was an object method also clear the','line_number':1214,'multiline':False]
['text':' object, it is just before the arguments.','line_number':1215,'multiline':False]
['text':' Clear local variables and temp values, but not the return value.','line_number':1222,'multiline':False]
['text':' The return value should be on top of the stack.  However, when aborting','line_number':1227,'multiline':False]
['text':' it may not be there and ec_frame_idx is the top of the stack.','line_number':1228,'multiline':False]
['text':' Restore the previous frame.','line_number':1241,'multiline':False]
['text':' restoring ec_frame_idx must be last','line_number':1251,'multiline':False]
['text':' Reset the stack to the position before the call, with a spot for the','line_number':1265,'multiline':False]
['text':' return value, moved there from above the frame.','line_number':1266,'multiline':False]
['text':' Reset the stack to the position before the call.','line_number':1271,'multiline':False]
['text':'
 * Prepare arguments and rettv for calling a builtin or user function.
 ','line_number':1279,'multiline':True]
['text':' Move arguments from bottom of the stack to argvars[] and add terminator.','line_number':1288,'multiline':False]
['text':' Result replaces the arguments on the stack.','line_number':1293,'multiline':False]
['text':' Default return value is zero.','line_number':1301,'multiline':False]
['text':'
 * Call a builtin function by index.
 ','line_number':1310,'multiline':True]
['text':' Call the builtin function.  Set "current_ectx" so that when it','line_number':1326,'multiline':False]
['text':' recursively invokes call_def_function() a closure context can be set.','line_number':1327,'multiline':False]
['text':' Clear the arguments.','line_number':1333,'multiline':False]
['text':'
 * Execute a user defined function.
 * If the function is compiled this will add a stack frame and set the
 * instruction pointer at the start of the function.
 * Otherwise the function is called here.
 * If "pt" is not null use "pt->pt_outer" for ec_outer_ref->or_outer.
 * "iptr" can be used to replace the instruction with a more efficient one.
 ','line_number':1342,'multiline':True]
['text':' The function has been compiled, can call it quickly.  For a function','line_number':1384,'multiline':False]
['text':' that was defined later: we can call it directly next time.','line_number':1385,'multiline':False]
['text':' Call the user function.  Result goes in last position on the stack.','line_number':1402,'multiline':False]
['text':' Clear the arguments.','line_number':1406,'multiline':False]
['text':' Error other than from calling the function itself.','line_number':1417,'multiline':False]
['text':'
 * If command modifiers were applied restore them.
 ','line_number':1422,'multiline':True]
['text':'
 * Return TRUE if an error was given (not caught in try/catch) or CTRL-C was
 * pressed.
 ','line_number':1437,'multiline':True]
['text':'
 * Execute a function by "name".
 * This can be a builtin function or a user function.
 * "iptr" can be used to replace the instruction with a more efficient one.
 * Returns FAIL if not found without an error message.
 ','line_number':1447,'multiline':True]
['text':' Impossible?','line_number':1467,'multiline':False]
['text':' loaded a package, search for the function again','line_number':1481,'multiline':False]
['text':' bail out if loading the script caused an error','line_number':1485,'multiline':False]
['text':' partial with an object method.  Push the object before the','line_number':1518,'multiline':False]
['text':' function arguments.','line_number':1519,'multiline':False]
['text':' Make space for arguments from the partial, shift the "argcount"','line_number':1535,'multiline':False]
['text':' arguments up.','line_number':1536,'multiline':False]
['text':' copy the arguments from the partial onto the stack','line_number':1544,'multiline':False]
['text':' May need to translate <SNR>123_ to K_SNR.','line_number':1564,'multiline':False]
['text':'
 * Check if "lock" is VAR_LOCKED or VAR_FIXED.  If so give an error and return
 * TRUE.
 ','line_number':1583,'multiline':True]
['text':'
 * Give an error if "tv" is not a number and return FAIL.
 ','line_number':1598,'multiline':True]
['text':'
 * Store "tv" in variable "name".
 * This is for s: and g: variables.
 ','line_number':1613,'multiline':True]
['text':'
 * Convert "tv" to a string.
 * Return FAIL if not allowed.
 ','line_number':1630,'multiline':True]
['text':' Convert to NL separated items, then','line_number':1660,'multiline':False]
['text':' escape the items and replace the NL with','line_number':1661,'multiline':False]
['text':' a space.','line_number':1662,'multiline':False]
['text':' FALLTHROUGH','line_number':1686,'multiline':False]
['text':'
 * When the value of "sv" is a null list of dict, allocate it.
 ','line_number':1698,'multiline':True]
['text':'
 * Return the character "str[index]" where "index" is the character index,
 * including composing characters.
 * If "index" is out of range NULL is returned.
 ','line_number':1725,'multiline':True]
['text':' Do the same as for a list: a negative index counts from the end.','line_number':1741,'multiline':False]
['text':' Optimization to check the first byte to be below 0x80 (and no composing','line_number':1742,'multiline':False]
['text':' character follows) makes this a lot faster.','line_number':1743,'multiline':False]
['text':' unlike list: index out of range results in empty string','line_number':1759,'multiline':False]
['text':'
 * Get the byte index for character index "idx" in string "str" with length
 * "str_len".  Composing characters are included.
 * If going over the end return "str_len".
 * If "idx" is negative count from the end, -1 is the last character.
 * When going over the start return -1.
 ','line_number':1777,'multiline':True]
['text':'
 * Return the slice "str[first : last]" using character indexes.  Composing
 * characters are included.
 * "exclusive" is TRUE for slice().
 * Return NULL when the result is empty.
 ','line_number':1813,'multiline':True]
['text':' first index very negative: use zero','line_number':1830,'multiline':False]
['text':' end index is inclusive','line_number':1837,'multiline':False]
['text':'
 * Get a script variable for ISN_STORESCRIPT and ISN_LOADSCRIPT.
 * When "dfunc_idx" is negative don't give an error.
 * Returns NULL for an error.
 ','line_number':1846,'multiline':True]
['text':' The script was reloaded after the function was compiled, the','line_number':1861,'multiline':False]
['text':' script_idx may not be valid.','line_number':1862,'multiline':False]
['text':'
 * Function passed to do_cmdline() for splitting a script joined by NL
 * characters.
 ','line_number':1892,'multiline':True]
['text':'
 * Execute a function by "name".
 * This can be a builtin function, user function or a funcref.
 * "iptr" can be used to replace the instruction with a more efficient one.
 ','line_number':1921,'multiline':True]
['text':'
 * When a function reference is used, fill a partial with the information
 * needed, especially when it is used as a closure.
 ','line_number':1953,'multiline':True]
['text':' The closure may need to find arguments and local variables of the','line_number':1972,'multiline':False]
['text':' current function in the stack.','line_number':1973,'multiline':False]
['text':' The current context already has a context, link to that one.','line_number':1978,'multiline':False]
['text':' The closure may need to find variables defined inside a loop,','line_number':1991,'multiline':False]
['text':' for every nested loop.  A new reference is made every time,','line_number':1992,'multiline':False]
['text':' ISN_ENDLOOP will check if they are actually used.','line_number':1993,'multiline':False]
['text':' If the function currently executing returns and the closure is still','line_number':2007,'multiline':False]
['text':' being referenced, we need to make a copy of the context (arguments','line_number':2008,'multiline':False]
['text':' and local variables) so that the closure can use it later.','line_number':2009,'multiline':False]
['text':' Store a reference to the partial so we can handle that.','line_number':2010,'multiline':False]
['text':' Extra variable keeps the count of closures created in the current','line_number':2016,'multiline':False]
['text':' function call.','line_number':2017,'multiline':False]
['text':'
 * Execute iptr->isn_arg.string as an Ex command.
 ','line_number':2030,'multiline':True]
['text':' Pass getsourceline to get an error for a missing ":end" command.','line_number':2039,'multiline':False]
['text':'
 * If script "sid" is not loaded yet then load it now.
 * Caller must make sure "sid" is a valid script ID.
 * "loaded" is set to TRUE if the script had to be loaded.
 * Returns FAIL if loading fails, OK if already loaded or loaded now.
 ','line_number':2049,'multiline':True]
['text':' used for v_instr of typval of VAR_INSTR','line_number':2072,'multiline':False]
['text':' used for substitute_instr','line_number':2078,'multiline':False]
['text':' Set when calling do_debug().','line_number':2085,'multiline':False]
['text':'
 * When debugging lookup "name" and return the typeval.
 * When not found return NULL.
 ','line_number':2089,'multiline':True]
['text':' Go through the local variable names, from last to first.','line_number':2106,'multiline':False]
['text':' the variable name may be NULL when not available in this block','line_number':2111,'multiline':False]
['text':' Go through argument names.','line_number':2116,'multiline':False]
['text':'
 * Return TRUE if there might be a breakpoint in "ufunc", which is when a
 * breakpoint was set in that function or when there is any expression.
 ','line_number':2129,'multiline':True]
['text':' check for the next breakpoint if needed','line_number':2157,'multiline':False]
['text':' left over from continuation line','line_number':2187,'multiline':False]
['text':'
 * Store a value in a list, dict, blob or object variable.
 * Returns OK, FAIL or NOTDONE (uncatchable error).
 ','line_number':2209,'multiline':True]
['text':' Stack contains:','line_number':2226,'multiline':False]
['text':' -3 value to be stored','line_number':2227,'multiline':False]
['text':' -2 index','line_number':2228,'multiline':False]
['text':' -1 dict, list, blob, object or class','line_number':2229,'multiline':False]
['text':' Make sure an object has been initialized','line_number':2233,'multiline':False]
['text':' Need to get the member index now that the class is known.','line_number':2246,'multiline':False]
['text':' negative index is relative to the end','line_number':2290,'multiline':False]
['text':' overwrite existing list item','line_number':2304,'multiline':False]
['text':' append to list, only fails when out of memory','line_number':2312,'multiline':False]
['text':' overwrite existing value','line_number':2338,'multiline':False]
['text':' add to dict, only fails when out of memory','line_number':2346,'multiline':False]
['text':' negative index is relative to the end','line_number':2366,'multiline':False]
['text':' Can add one byte at the end.','line_number':2369,'multiline':False]
['text':' convert interface member index to class member index','line_number':2393,'multiline':False]
['text':' VAR_CLASS','line_number':2399,'multiline':False]
['text':'
 * Store a value in a list or blob range.
 ','line_number':2425,'multiline':True]
['text':' Stack contains:','line_number':2437,'multiline':False]
['text':' -4 value to be stored','line_number':2438,'multiline':False]
['text':' -3 first index or "none"','line_number':2439,'multiline':False]
['text':' -2 second index or "none"','line_number':2440,'multiline':False]
['text':' -1 destination list or blob','line_number':2441,'multiline':False]
['text':'
 * Unlet item in list or dict variable.
 ','line_number':2510,'multiline':True]
['text':' Stack contains:','line_number':2520,'multiline':False]
['text':' -2 index','line_number':2521,'multiline':False]
['text':' -1 dict or list','line_number':2522,'multiline':False]
['text':' unlet a dict item, index must be a string','line_number':2526,'multiline':False]
['text':' NULL dict is equivalent to empty dict','line_number':2559,'multiline':False]
['text':' unlet a List item, index must be a number','line_number':2575,'multiline':False]
['text':'
 * Unlet a range of items in a list variable.
 ','line_number':2616,'multiline':True]
['text':' Stack contains:','line_number':2622,'multiline':False]
['text':' -3 index1','line_number':2623,'multiline':False]
['text':' -2 index2','line_number':2624,'multiline':False]
['text':' -1 dict or list','line_number':2625,'multiline':False]
['text':' indexes must be a number','line_number':2633,'multiline':False]
['text':'
 * Top of a for loop.
 ','line_number':2701,'multiline':True]
['text':' push the next item from the list','line_number':2719,'multiline':False]
['text':' non-materialized range() list','line_number':2728,'multiline':False]
['text':' The index is for the last byte of the previous','line_number':2749,'multiline':False]
['text':' character.','line_number':2750,'multiline':False]
['text':' Push the next character from the string.','line_number':2760,'multiline':False]
['text':' When we get here the first time make a copy of the','line_number':2773,'multiline':False]
['text':' blob, so that the iteration still works when it is','line_number':2774,'multiline':False]
['text':' changed.','line_number':2775,'multiline':False]
['text':' The index is for the previous byte.','line_number':2783,'multiline':False]
['text':' Push the next byte from the blob.','line_number':2791,'multiline':False]
['text':' past the end of the list/string/blob, jump to "endfor"','line_number':2808,'multiline':False]
['text':' Store the current number of funcrefs, this may be used in','line_number':2814,'multiline':False]
['text':' ISN_LOOPEND.  The variable index is always one more than the loop','line_number':2815,'multiline':False]
['text':' variable index.','line_number':2816,'multiline':False]
['text':'
 * Code for handling variables declared inside a loop and used in a closure.
 * This is very similar to what is done with funcstack_T.  The difference is
 * that the funcstack_T has the scope of a function, while a loopvars_T has the
 * scope of the block inside a loop and each loop may have its own.
 ','line_number':2824,'multiline':True]
['text':' Double linked list of loopvars_T in use.','line_number':2831,'multiline':False]
['text':' Link in list of loopvarss.','line_number':2837,'multiline':False]
['text':'
 * End of a for or while loop: Handle any variables used by a closure.
 ','line_number':2856,'multiline':True]
['text':' Check if any created closure is still being referenced and loopvars have','line_number':2872,'multiline':False]
['text':' not been saved yet for the current depth.','line_number':2873,'multiline':False]
['text':' A Reference in a variable inside the loop doesn't count, it gets','line_number':2883,'multiline':False]
['text':' unreferenced at the end of the loop.','line_number':2884,'multiline':False]
['text':' If no function reference were created since the start of the loop block','line_number':2900,'multiline':False]
['text':' or it is no longer referenced there is nothing to do.','line_number':2901,'multiline':False]
['text':' A closure is using variables declared inside the loop.','line_number':2905,'multiline':False]
['text':' Move them to the called function.','line_number':2906,'multiline':False]
['text':' Move the variable values.','line_number':2921,'multiline':False]
['text':'
 * Called when a partial is freed or its reference count goes down to one.  The
 * loopvars may be the only reference to the partials in the local variables.
 * Go over all of them, the funcref and can be freed if all partials
 * referencing the loopvars have a reference count of one.
 * Return TRUE if it was freed.
 ','line_number':2948,'multiline':True]
['text':' All partials referencing the loopvars have a reference count of','line_number':2982,'multiline':False]
['text':' one, thus the loopvars is no longer of use.','line_number':2983,'multiline':False]
['text':'
 * For garbage collecting: set references in all variables referenced by
 * all loopvars.
 ','line_number':2993,'multiline':True]
['text':' abort','line_number':3010,'multiline':False]
['text':'
 * Load instruction for w:/b:/g:/t: variable.
 * "isn_type" is used instead of "iptr->isn_type".
 ','line_number':3015,'multiline':True]
['text':' Cannot reach here','line_number':3046,'multiline':False]
['text':' g:Something could be a function','line_number':3057,'multiline':False]
['text':' no check if the item exists in the script but','line_number':3074,'multiline':False]
['text':' isn't exported, it is too complicated','line_number':3075,'multiline':False]
['text':'
 * Execute instructions in execution context "ectx".
 * Return OK or FAIL;
 ','line_number':3104,'multiline':True]
['text':' Start execution at the first instruction.','line_number':3115,'multiline':False]
['text':' Only catch exceptions in this instruction list.','line_number':3118,'multiline':False]
['text':' using "static" makes it faster','line_number':3123,'multiline':False]
['text':' Turn CTRL-C into an exception.','line_number':3134,'multiline':False]
['text':' Turn an error message into an exception.','line_number':3143,'multiline':False]
['text':' This exception was not caught (yet).','line_number':3150,'multiline':False]
['text':' An exception jumps to the first catch, finally, or returns from','line_number':3167,'multiline':False]
['text':' the current function.','line_number':3168,'multiline':False]
['text':' 1. after :try and before :catch - jump to first :catch','line_number':3172,'multiline':False]
['text':' 2. in :catch block - jump to :finally','line_number':3173,'multiline':False]
['text':' 3. in :catch block and no finally - jump to :endtry','line_number':3174,'multiline':False]
['text':' In the catch and finally block of this try we have to go up','line_number':3178,'multiline':False]
['text':' one level.','line_number':3179,'multiline':False]
['text':' exception inside ":catch", jump to ":finally" once','line_number':3189,'multiline':False]
['text':' exception inside ":catch" or ":finally", jump to','line_number':3195,'multiline':False]
['text':' ":endtry"','line_number':3196,'multiline':False]
['text':' jump to first ":catch"','line_number':3202,'multiline':False]
['text':' don't come back here until :endtry','line_number':3206,'multiline':False]
['text':' Not inside try or need to return from current function.','line_number':3211,'multiline':False]
['text':' Push a dummy return value.','line_number':3212,'multiline':False]
['text':' At the toplevel we are done.','line_number':3221,'multiline':False]
['text':'
	 * Big switch on the instruction.  Most compilers will be turning this
	 * into an efficient lookup table, since the "case" values are an enum
	 * with sequential numbers.  It may look ugly, but it should be the
	 * most efficient way.
	 ','line_number':3234,'multiline':True]
['text':' Constructor, first instruction in a new() method.','line_number':3243,'multiline':False]
['text':' "this" is always the local variable at index zero','line_number':3245,'multiline':False]
['text':' execute Ex command line','line_number':3257,'multiline':False]
['text':' execute Ex command line split at NL characters.','line_number':3263,'multiline':False]
['text':' execute Ex command line that is only a range','line_number':3287,'multiline':False]
['text':' error is always NULL when using ADDR_LINES','line_number':3301,'multiline':False]
['text':' Evaluate an expression with legacy syntax, push it onto the','line_number':3311,'multiline':False]
['text':' stack.','line_number':3312,'multiline':False]
['text':' push typeval VAR_INSTR with instructions to be executed','line_number':3332,'multiline':False]
['text':' execute :substitute with an expression','line_number':3360,'multiline':False]
['text':' This is very much like ISN_EXEC','line_number':3375,'multiline':False]
['text':' create a dummy entry for var_redir_str()','line_number':3393,'multiline':False]
['text':' The output is stored in growarray "redir_ga" until','line_number':3397,'multiline':False]
['text':' redirection ends.','line_number':3398,'multiline':False]
['text':' End redirection, put redirected text on the stack.','line_number':3407,'multiline':False]
['text':' execute Ex command from pieces on the stack','line_number':3453,'multiline':False]
['text':' execute :echo {string} ...','line_number':3493,'multiline':False]
['text':' :execute {string} ...','line_number':3514,'multiline':False]
['text':' :echomsg {string} ...','line_number':3515,'multiline':False]
['text':' :echowindow {string} ...','line_number':3516,'multiline':False]
['text':' :echoconsole {string} ...','line_number':3517,'multiline':False]
['text':' :echoerr {string} ...','line_number':3518,'multiline':False]
['text':' load local variable or argument','line_number':3622,'multiline':False]
['text':' missing argument or default value v:none','line_number':3629,'multiline':False]
['text':' load v: variable','line_number':3638,'multiline':False]
['text':' load s: variable in Vim9 script','line_number':3646,'multiline':False]
['text':' load s: variable in old script or autoload import','line_number':3663,'multiline':False]
['text':' load g:/b:/w:/t: variable','line_number':3707,'multiline':False]
['text':' load autoload variable','line_number':3723,'multiline':False]
['text':' load g:/b:/w:/t: namespace','line_number':3738,'multiline':False]
['text':' Cannot reach here','line_number':3752,'multiline':False]
['text':' load &option','line_number':3766,'multiline':False]
['text':' This is not expected to fail, name is checked during','line_number':3772,'multiline':False]
['text':' compilation: don't set SOURCING_LNUM.','line_number':3773,'multiline':False]
['text':' load $ENV','line_number':3783,'multiline':False]
['text':' name is always valid, checked when compiling','line_number':3791,'multiline':False]
['text':' load @register','line_number':3798,'multiline':False]
['text':' This may result in NULL, which should be equivalent to an','line_number':3805,'multiline':False]
['text':' empty string.','line_number':3806,'multiline':False]
['text':' store local variable','line_number':3812,'multiline':False]
['text':' store s: variable in old script or autoload import','line_number':3825,'multiline':False]
['text':' can this ever fail?','line_number':3855,'multiline':False]
['text':' store script-local variable in Vim9 script','line_number':3881,'multiline':False]
['text':' "const" and "final" are checked at compile time, locking','line_number':3892,'multiline':False]
['text':' the value needs to be checked here.','line_number':3893,'multiline':False]
['text':' store option','line_number':3906,'multiline':False]
['text':' If the option can be set to a function reference or','line_number':3929,'multiline':False]
['text':' a lambda and the passed value is a function','line_number':3930,'multiline':False]
['text':' reference, then convert it to the name (string) of','line_number':3931,'multiline':False]
['text':' the function reference.','line_number':3932,'multiline':False]
['text':' cannot happen?','line_number':3936,'multiline':False]
['text':' must be VAR_NUMBER, CHECKTYPE makes sure','line_number':3943,'multiline':False]
['text':' store $ENV','line_number':3957,'multiline':False]
['text':' store @r','line_number':3965,'multiline':False]
['text':' store v: variable','line_number':3977,'multiline':False]
['text':' should not happen, type is checked when compiling','line_number':3982,'multiline':False]
['text':' store g:/b:/w:/t: variable','line_number':3986,'multiline':False]
['text':' Cannot reach here','line_number':4010,'multiline':False]
['text':' store an autoload variable','line_number':4029,'multiline':False]
['text':' store number in local variable','line_number':4037,'multiline':False]
['text':' Store a value in a list, dict, blob or object variable.','line_number':4045,'multiline':False]
['text':' store value in list or blob range','line_number':4057,'multiline':False]
['text':' Load or store variable or argument from outer scope.','line_number':4084,'multiline':False]
['text':' Possibly :def function called from legacy','line_number':4102,'multiline':False]
['text':' context.','line_number':4103,'multiline':False]
['text':' Variable declared in loop.  May be copied if the','line_number':4110,'multiline':False]
['text':' loop block has already ended.','line_number':4111,'multiline':False]
['text':' Variable declared in a function.  May be copied if','line_number':4117,'multiline':False]
['text':' the function has already returned.','line_number':4118,'multiline':False]
['text':' careful: ga_grow_inner may re-alloc the stack','line_number':4127,'multiline':False]
['text':' memory was freed, get tv again','line_number':4137,'multiline':False]
['text':' unlet item in list or dict variable','line_number':4152,'multiline':False]
['text':' unlet range of items in list variable','line_number':4158,'multiline':False]
['text':' push constant','line_number':4164,'multiline':False]
['text':' Stack has the local variable, argument the whole :lock','line_number':4281,'multiline':False]
['text':' or :unlock command, like ISN_EXEC.','line_number':4282,'multiline':False]
['text':' create a list from items on the stack; uses a single allocation','line_number':4301,'multiline':False]
['text':' for the list header and the items','line_number':4302,'multiline':False]
['text':' create a dict from items on the stack','line_number':4308,'multiline':False]
['text':' create a partial with NULL value','line_number':4327,'multiline':False]
['text':' call a :def function','line_number':4338,'multiline':False]
['text':' call a method on an interface','line_number':4348,'multiline':False]
['text':' convert the interface index to the object index','line_number':4363,'multiline':False]
['text':' call a builtin function','line_number':4373,'multiline':False]
['text':' call a funcref or partial','line_number':4382,'multiline':False]
['text':' funcref is above the arguments','line_number':4392,'multiline':False]
['text':' Get the funcref from the stack.','line_number':4397,'multiline':False]
['text':' PCALL finished, arguments have been consumed and replaced by','line_number':4411,'multiline':False]
['text':' the return value.  Now clear the funcref from the stack,','line_number':4412,'multiline':False]
['text':' and move the return value in its place.','line_number':4413,'multiline':False]
['text':' call a user defined function or funcref/partial','line_number':4419,'multiline':False]
['text':' :defer func(arg)','line_number':4431,'multiline':False]
['text':' Return from a :def function call without a value.','line_number':4438,'multiline':False]
['text':' Return from a constructor.','line_number':4439,'multiline':False]
['text':' FALLTHROUGH','line_number':4457,'multiline':False]
['text':' return from a :def function call with what is on the stack','line_number':4459,'multiline':False]
['text':' jump to ":finally" or ":endtry"','line_number':4471,'multiline':False]
['text':' push a partial, a reference to a compiled function','line_number':4483,'multiline':False]
['text':' drop the value from the stack','line_number':4513,'multiline':False]
['text':' object method','line_number':4525,'multiline':False]
['text':' convert the interface index to the object index','line_number':4526,'multiline':False]
['text':' class method','line_number':4534,'multiline':False]
['text':' Create a global function from a lambda.','line_number':4568,'multiline':False]
['text':' List functions','line_number':4580,'multiline':False]
['text':' jump if a condition is met','line_number':4598,'multiline':False]
['text':' drop the value from the stack','line_number':4623,'multiline':False]
['text':' "while": jump to end if a condition is false','line_number':4633,'multiline':False]
['text':' drop the value from the stack','line_number':4644,'multiline':False]
['text':' Store the current funcref count, may be used by','line_number':4650,'multiline':False]
['text':' ISN_ENDLOOP later','line_number':4651,'multiline':False]
['text':' Jump if an argument with a default value was already set and not','line_number':4658,'multiline':False]
['text':' v:none.','line_number':4659,'multiline':False]
['text':' top of a for loop','line_number':4670,'multiline':False]
['text':' end of a for or while loop','line_number':4676,'multiline':False]
['text':' start of ":try" block','line_number':4682,'multiline':False]
['text':' Make :endtry jump to any outer try block and the last','line_number':4753,'multiline':False]
['text':' :endtry inside the loop to the loop start.','line_number':4754,'multiline':False]
['text':' Add one to tcd_cont to be able to jump to','line_number':4759,'multiline':False]
['text':' instruction with index zero.','line_number':4760,'multiline':False]
['text':' jump to :finally or :endtry of current try statement','line_number':4765,'multiline':False]
['text':' Reset the index to avoid a return statement jumps here','line_number':4776,'multiline':False]
['text':' again.','line_number':4777,'multiline':False]
['text':' end of ":try" block','line_number':4782,'multiline':False]
['text':' discard the exception','line_number':4795,'multiline':False]
['text':' handling :continue: jump to outer try block or','line_number':4810,'multiline':False]
['text':' start of the loop','line_number':4811,'multiline':False]
['text':' Throwing an exception while using "silent!" causes','line_number':4822,'multiline':False]
['text':' the function to abort but not display an error.','line_number':4823,'multiline':False]
['text':' Inside a "catch" we need to first discard the caught','line_number':4841,'multiline':False]
['text':' exception.','line_number':4842,'multiline':False]
['text':' discard the exception','line_number':4849,'multiline':False]
['text':' compare with special values','line_number':4868,'multiline':False]
['text':' Operation with two number arguments','line_number':4908,'multiline':False]
['text':' Computation with two float arguments','line_number':4982,'multiline':False]
['text':' ISN_COMPAREOBJECT','line_number':5064,'multiline':False]
['text':' add two lists or blobs','line_number':5102,'multiline':False]
['text':' add an item to a list','line_number':5125,'multiline':False]
['text':' add a number to a blob','line_number':5149,'multiline':False]
['text':' Computation with two arguments of unknown type','line_number':5164,'multiline':False]
['text':' if there is a float on either side the result is a float','line_number':5218,'multiline':False]
['text':' string index: string is at stack-2, index at stack-1','line_number':5271,'multiline':False]
['text':' string slice: string is at stack-3, first index at','line_number':5272,'multiline':False]
['text':' stack-2, second index at stack-1','line_number':5273,'multiline':False]
['text':' Slice: Select the characters from the string','line_number':5286,'multiline':False]
['text':' Index: The resulting variable is a string of a','line_number':5289,'multiline':False]
['text':' single character (including composing characters).','line_number':5290,'multiline':False]
['text':' If the index is too big or negative the result is','line_number':5291,'multiline':False]
['text':' empty.','line_number':5292,'multiline':False]
['text':' list index: list is at stack-2, index at stack-1','line_number':5311,'multiline':False]
['text':' list slice: list is at stack-3, indexes at stack-2 and','line_number':5312,'multiline':False]
['text':' stack-1','line_number':5313,'multiline':False]
['text':' Same for blob.','line_number':5314,'multiline':False]
['text':' index: composite is at stack-2, index at stack-1','line_number':5353,'multiline':False]
['text':' slice: composite is at stack-3, indexes at stack-2 and','line_number':5354,'multiline':False]
['text':' stack-1','line_number':5355,'multiline':False]
['text':' type will have been checked to be a list','line_number':5378,'multiline':False]
['text':' no error for short list, expect it to be checked earlier','line_number':5382,'multiline':False]
['text':' Get list item: list is at stack-1, push item.','line_number':5403,'multiline':False]
['text':' List type and length is checked for when compiling.','line_number':5404,'multiline':False]
['text':' Useful when used in unpack assignment.  Reset at','line_number':5413,'multiline':False]
['text':' ISN_DROP.','line_number':5414,'multiline':False]
['text':' dict member: dict is at stack-2, key at stack-1','line_number':5426,'multiline':False]
['text':' no need to check for VAR_DICT, CHECKTYPE will check.','line_number':5428,'multiline':False]
['text':' no need to check for VAR_STRING, 2STRING will check.','line_number':5432,'multiline':False]
['text':' If :silent! is used we will continue, make sure the','line_number':5442,'multiline':False]
['text':' stack contents makes sense and the dict stack is','line_number':5443,'multiline':False]
['text':' updated.','line_number':5444,'multiline':False]
['text':' Put the dict used on the dict stack, it might be used by','line_number':5455,'multiline':False]
['text':' a dict function later.','line_number':5456,'multiline':False]
['text':' dict member with string key','line_number':5464,'multiline':False]
['text':' Put the dict used on the dict stack, it might be used by','line_number':5487,'multiline':False]
['text':' a dict function later.','line_number':5488,'multiline':False]
['text':' convert the interface index to the object index','line_number':5521,'multiline':False]
['text':' The members are located right after the object struct.','line_number':5527,'multiline':False]
['text':' Unreference the object after getting the member, it may','line_number':5531,'multiline':False]
['text':' be freed.','line_number':5532,'multiline':False]
['text':' the members are located right after the object struct','line_number':5541,'multiline':False]
['text':' Turn "dict.Func" into a partial for "Func" bound to','line_number':5557,'multiline':False]
['text':' "dict".  Don't do this when "Func" is already a partial','line_number':5558,'multiline':False]
['text':' that was bound explicitly (pt_auto is FALSE).','line_number':5559,'multiline':False]
['text':' CHECKTYPE should have checked the variable type','line_number':5576,'multiline':False]
['text':' number 0 is FALSE, number 1 is TRUE','line_number':5601,'multiline':False]
['text':' line number was put on the stack by ISN_RANGE','line_number':5706,'multiline':False]
['text':' :put! above cursor','line_number':5714,'multiline':False]
['text':' check_cursor() below will move to line 1','line_number':5720,'multiline':False]
['text':' allocates value','line_number':5731,'multiline':False]
['text':' filter regprog is owned by the instruction, don't free it','line_number':5752,'multiline':False]
['text':' Check there is a valid list to unpack.','line_number':5767,'multiline':False]
['text':' Variable after semicolon gets a list with the remaining','line_number':5795,'multiline':False]
['text':' items.','line_number':5796,'multiline':False]
['text':' Produce the values in reverse order, first item last.','line_number':5822,'multiline':False]
['text':' if we get here the instruction is executed','line_number':5848,'multiline':False]
['text':' Restore previous function. If the frame pointer is where we started','line_number':5886,'multiline':False]
['text':' then there is none and we are done.','line_number':5887,'multiline':False]
['text':' only fails when out of memory','line_number':5892,'multiline':False]
['text':' Jump here for an error that does not require aborting execution.','line_number':5897,'multiline':False]
['text':' If "emsg_silent" is set then ignore the error, unless it was set','line_number':5898,'multiline':False]
['text':' when calling the function.','line_number':5899,'multiline':False]
['text':' If a sequence of instructions causes an error while ":silent!"','line_number':5903,'multiline':False]
['text':' was used, restore the stack length and jump ahead to restoring','line_number':5904,'multiline':False]
['text':' the cmdmod.','line_number':5905,'multiline':False]
['text':' Jump here for an error that messes up the stack.','line_number':5920,'multiline':False]
['text':' If we are not inside a try-catch started here, abort execution.','line_number':5921,'multiline':False]
['text':'
 * Execute the instructions from a VAR_INSTR typval and put the result in
 * "rettv".
 * Return OK or FAIL.
 ','line_number':5936,'multiline':True]
['text':' Initialize rettv so that it is safe for caller to invoke clear_tv(rettv)','line_number':5949,'multiline':False]
['text':' even when the compilation fails.','line_number':5950,'multiline':False]
['text':'
 * Execute the instructions from an ISN_SUBSTITUTE command, which are in
 * "substitute_instr".
 ','line_number':5967,'multiline':True]
['text':'
 * Call a "def" function from old Vim script.
 * Return OK or FAIL.
 ','line_number':6000,'multiline':True]
['text':' nr of arguments','line_number':6007,'multiline':False]
['text':' arguments','line_number':6008,'multiline':False]
['text':' DEF_ flags','line_number':6009,'multiline':False]
['text':' optional partial for context','line_number':6010,'multiline':False]
['text':' object, e.g. for this.Func()','line_number':6011,'multiline':False]
['text':' return value','line_number':6013,'multiline':False]
['text':' execution context','line_number':6015,'multiline':False]
['text':' Get pointer to item in the stack.','line_number':6035,'multiline':False]
['text':' Get pointer to item at the bottom of the stack, -1 is the bottom.','line_number':6039,'multiline':False]
['text':' Get pointer to a local variable on the stack.  Negative for arguments.','line_number':6043,'multiline':False]
['text':' Check the function was really compiled.','line_number':6060,'multiline':False]
['text':' If depth of calling is getting too high, don't execute the function.','line_number':6075,'multiline':False]
['text':' Put values from the partial and arguments on the stack, but no more than','line_number':6108,'multiline':False]
['text':' what the function expects.  A lambda can be called with more arguments','line_number':6109,'multiline':False]
['text':' than it uses.','line_number':6110,'multiline':False]
['text':' Use the default value.','line_number':6122,'multiline':False]
['text':' When a float is expected and a number was given, convert','line_number':6133,'multiline':False]
['text':' the value.','line_number':6134,'multiline':False]
['text':' Turn varargs into a list.  Empty list if no args.','line_number':6150,'multiline':False]
['text':' Check the type of the list items.','line_number':6162,'multiline':False]
['text':' Move varargs list to below missing default arguments.','line_number':6182,'multiline':False]
['text':' Make space for omitted arguments, will store default value below.','line_number':6187,'multiline':False]
['text':' Any varargs list goes after them.','line_number':6188,'multiline':False]
['text':' Frame pointer points to just after arguments.','line_number':6198,'multiline':False]
['text':' "uf_partial" is on the ufunc that "df_ufunc" points to, as is done','line_number':6207,'multiline':False]
['text':' by copy_lambda_to_global_func().','line_number':6208,'multiline':False]
['text':' no stack was set','line_number':6220,'multiline':False]
['text':' else: should there be an error here?','line_number':6228,'multiline':False]
['text':' dummy frame entries','line_number':6246,'multiline':False]
['text':' Reserve space for local variables and any closure reference count.','line_number':6254,'multiline':False]
['text':' Initialize variables to zero.  That avoids having to generate','line_number':6258,'multiline':False]
['text':' initializing instructions for "var nr: number", "var x: any", etc.','line_number':6259,'multiline':False]
['text':' the object is always the variable at index zero','line_number':6269,'multiline':False]
['text':' Initialize the variable that counts how many closures were','line_number':6277,'multiline':False]
['text':' created.  This is used in handle_closure_in_use().','line_number':6278,'multiline':False]
['text':' Store the execution context in funccal, used by invoke_all_defer().','line_number':6287,'multiline':False]
['text':' Following errors are in the function, not the caller.','line_number':6291,'multiline':False]
['text':' Commands behave like vim9script.','line_number':6292,'multiline':False]
['text':' Use a specific location for storing error messages to be converted to an','line_number':6297,'multiline':False]
['text':' exception.','line_number':6298,'multiline':False]
['text':' Do turn errors into exceptions.','line_number':6302,'multiline':False]
['text':' Do not delete the function while executing it.','line_number':6305,'multiline':False]
['text':' When ":silent!" was used before calling then we still abort the','line_number':6308,'multiline':False]
['text':' function.  If ":silent!" is used in the function then we don't.','line_number':6309,'multiline':False]
['text':'
     * Execute the instructions until done.
     ','line_number':6315,'multiline':True]
['text':' function finished, get result from the stack.','line_number':6321,'multiline':False]
['text':' When failed need to unwind the call stack.','line_number':6334,'multiline':False]
['text':' Deal with any remaining closures, they may be in use somewhere.','line_number':6337,'multiline':False]
['text':' Function was unreferenced while being used, free it now.','line_number':6348,'multiline':False]
['text':' Append entries from the current msg_list (uncaught exceptions) to','line_number':6355,'multiline':False]
['text':' the saved msg_list.','line_number':6356,'multiline':False]
['text':' Free all arguments and local variables.','line_number':6374,'multiline':False]
['text':' Not sure if this is necessary.','line_number':6393,'multiline':False]
['text':'
 * Called when a def function has finished (possibly failed).
 * Invoke all the function returns to clean up and invoke deferred functions,
 * except the toplevel one.
 ','line_number':6404,'multiline':True]
['text':'
 * Invoke any deferred functions for the top function in "ectx".
 ','line_number':6416,'multiline':True]
['text':'
 * Return loopvarinfo in a printable form in allocated memory.
 ','line_number':6428,'multiline':True]
['text':'
 * List instructions "instr" up to "instr_count" or until ISN_FINISH.
 * "ufunc" has the source lines, NULL for the instructions of ISN_SUBSTITUTE.
 * "pfx" is prefixed to every line.
 ','line_number':6454,'multiline':True]
['text':' constants','line_number':6818,'multiline':False]
['text':' function call','line_number':6911,'multiline':False]
['text':' unused','line_number':7058,'multiline':False]
['text':' expression operations on number','line_number':7156,'multiline':False]
['text':' expression operations','line_number':7249,'multiline':False]
['text':' End of list of instructions for ISN_SUBSTITUTE.','line_number':7402,'multiline':False]
['text':' output one line at a time','line_number':7406,'multiline':False]
['text':'
 * Handle command line completion for the :disassemble command.
 ','line_number':7413,'multiline':True]
['text':' Default: expand user functions, "debug" and "profile"','line_number':7421,'multiline':False]
['text':' first argument already typed: only user function names','line_number':7425,'multiline':False]
['text':'
 * Function given to ExpandGeneric() to obtain the list of :disassemble
 * arguments.
 ','line_number':7433,'multiline':True]
['text':'
 * ":disassemble".
 * We don't really need this at runtime, but we do have tests that require it,
 * so always include this.
 ','line_number':7447,'multiline':True]
['text':' init to shut up gcc warning','line_number':7458,'multiline':False]
['text':' init to shut up gcc warning','line_number':7459,'multiline':False]
['text':' FALLTHROUGH','line_number':7484,'multiline':False]
['text':'
 * Return TRUE when "tv" is not falsy: non-zero, non-empty string, non-empty
 * list, etc.  Mostly like what JavaScript does, except that empty list and
 * empty dictionary are FALSE.
 ','line_number':7498,'multiline':True]
['text':'
 * If "tv" is a string give an error and return FAIL.
 ','line_number':7560,'multiline':True]
['text':' FEAT_EVAL','line_number':7576,'multiline':False]
