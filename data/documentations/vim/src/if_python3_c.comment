['text':' vi:set ts=8 sts=4 sw=4 noet:
 *
 * VIM - Vi IMproved    by Bram Moolenaar
 *
 * Do ":help uganda"  in Vim to read copying and usage conditions.
 * Do ":help credits" in Vim to see a list of people who contributed.
 * See README.txt for an overview of the Vim source code.
 ','line_number':1,'multiline':True]
['text':'
 * Python extensions by Paul Moore.
 * Changes for Unix by David Leonard.
 *
 * This consists of four parts:
 * 1. Python interpreter main program
 * 2. Python output stream: writes output via [e]msg().
 * 3. Implementation of the Vim module for Python
 * 4. Utility functions for handling the interface between Vim and Python.
 ','line_number':9,'multiline':True]
['text':'
 * Roland Puntaier 2009/sept/16:
 * Adaptations to support both python3.x and python2.x
 ','line_number':20,'multiline':True]
['text':' uncomment this if used with the debug version of python','line_number':25,'multiline':False]
['text':' #define Py_DEBUG','line_number':26,'multiline':False]
['text':' Note: most of time you can add -DPy_DEBUG to CFLAGS in place of uncommenting','line_number':27,'multiline':False]
['text':' uncomment this if used with the debug version of python, but without its','line_number':28,'multiline':False]
['text':' allocator','line_number':29,'multiline':False]
['text':' #define Py_DEBUG_NO_PYMALLOC','line_number':30,'multiline':False]
['text':' Python's config.h defines it as well.','line_number':61,'multiline':False]
['text':' defined in feature.h','line_number':63,'multiline':False]
['text':' pyconfig.h defines it as well.','line_number':67,'multiline':False]
['text':' Using Python 3 limited ABI','line_number':73,'multiline':False]
['text':' Defined in python.h - aargh','line_number':78,'multiline':False]
['text':' Clash with os_win32.h','line_number':79,'multiline':False]
['text':' The "surrogateescape" error handler is new in Python 3.1','line_number':81,'multiline':False]
['text':' Suppress Python 3.11 depreciations to see useful warnings','line_number':88,'multiline':False]
['text':' Python 3 does not support CObjects, always use Capsules','line_number':94,'multiline':False]
['text':'
 * PySlice_GetIndicesEx(): first argument type changed from PySliceObject
 * to PyObject in Python 3.2 or later.
 ','line_number':121,'multiline':True]
['text':' Instance of python.dll','line_number':135,'multiline':False]
['text':'
 * Wrapper defines
 ','line_number':157,'multiline':True]
['text':'
 * Pointers for dynamic link
 ','line_number':354,'multiline':True]
['text':' Imported exception objects','line_number':529,'multiline':False]
['text':'
 * Table of name to function pointer of python.
 ','line_number':552,'multiline':True]
['text':' PyTuple_GET_SIZE/PyList_GET_SIZE are inlined functions that use Py_SIZE(),','line_number':789,'multiline':False]
['text':' which started to introduce linkage dependency from Python 3.12. When we','line_number':790,'multiline':False]
['text':' build Python in dynamic mode, we don't link against it in build time, and','line_number':791,'multiline':False]
['text':' this would fail to build. Just use the non-inlined version instead.','line_number':792,'multiline':False]
['text':'
 * Look up the library "libname" using the InstallPath registry key.
 * Return NULL when failed.  Return an allocated string when successful.
 ','line_number':800,'multiline':True]
['text':' Bail out if "libname" contains path separator, assume it is','line_number':819,'multiline':False]
['text':' an absolute path.','line_number':820,'multiline':False]
['text':' Search the latest version.','line_number':865,'multiline':False]
['text':' Check if it matches with the compiled version.','line_number':874,'multiline':False]
['text':' Remove trailing path separators.','line_number':909,'multiline':False]
['text':'
 * Load library and get all pointers.
 * Parameter 'libname' provides name of DLL.
 * Return OK or FAIL.
 ','line_number':918,'multiline':True]
['text':' Can't have Python and Python3 loaded at the same time.','line_number':933,'multiline':False]
['text':' It causes a crash, because RTLD_GLOBAL is needed for','line_number':934,'multiline':False]
['text':' standard C extension libraries of one or both python versions.','line_number':935,'multiline':False]
['text':' Attempt to use the path from InstallPath as stored in the registry.','line_number':951,'multiline':False]
['text':' Load unicode functions separately as only the ucs2 or the ucs4 functions','line_number':984,'multiline':False]
['text':' will be present in the library.','line_number':985,'multiline':False]
['text':'
 * If python is enabled (there is installed python on Windows system) return
 * TRUE, else FALSE.
 ','line_number':1021,'multiline':True]
['text':'
 * Load the standard Python exceptions - don't import the symbols from the
 * DLL, as this can cause errors (importing data symbols is not reliable).
 ','line_number':1031,'multiline':True]
['text':' DYNAMIC_PYTHON3','line_number':1062,'multiline':False]
['text':'
 * Include the code shared with if_python.c
 ','line_number':1121,'multiline':True]
['text':' Python limited API before 3.10 lack easy ways to query the raw UTF-8 chars.','line_number':1130,'multiline':False]
['text':' We need to first convert the string to bytes, and then extract the chars.','line_number':1131,'multiline':False]
['text':' This function is only used for attribute string comparisons, which have','line_number':1132,'multiline':False]
['text':' known short length. As such, just allocate a short static buffer to hold','line_number':1133,'multiline':False]
['text':' the characters instead of having to allocate/deallcoate it.','line_number':1134,'multiline':False]
['text':'','line_number':1135,'multiline':False]
['text':' An alternative would be to convert all attribute string comparisons to use','line_number':1136,'multiline':False]
['text':' PyUnicode_CompareWithASCIIString to skip having to extract the chars.','line_number':1137,'multiline':False]
['text':' PyBytes_AsStringAndSize guarantees null-termination','line_number':1150,'multiline':False]
['text':' !USE_LIMITED_API','line_number':1158,'multiline':False]
['text':' NOTE: Must always be used at the start of a block, since it declares "name".','line_number':1166,'multiline':False]
['text':'/////////////////////////////////////////////////////','line_number':1174,'multiline':False]
['text':' Internal function prototypes.','line_number':1175,'multiline':False]
['text':'/////////////////////////////////////////////////////','line_number':1179,'multiline':False]
['text':' 1. Python interpreter main program.','line_number':1180,'multiline':False]
['text':' If a crash occurs while doing this, don't try again.','line_number':1187,'multiline':False]
['text':' acquire lock before finalizing','line_number':1203,'multiline':False]
['text':'
 * Return TRUE if stdin is readable from Python 3.
 ','line_number':1223,'multiline':True]
['text':' Check if stdin is connected to the console.','line_number':1234,'multiline':False]
['text':' Check if it is opened as input.','line_number':1236,'multiline':False]
['text':' Python 3.5 or later will abort inside Py_Initialize() when stdin has','line_number':1242,'multiline':False]
['text':' been closed (i.e. executed by "vim -").  Reconnect stdin to CONIN$.','line_number':1243,'multiline':False]
['text':' Note that the python DLL is linked to its own stdio DLL which can be','line_number':1244,'multiline':False]
['text':' differ from Vim's stdio.','line_number':1245,'multiline':False]
['text':' Get "freopen" and "stdin" which are used in the python DLL.','line_number':1256,'multiline':False]
['text':' "stdin" is defined as "__acrt_iob_func(0)" in VC++ 2015 or later.','line_number':1257,'multiline':False]
['text':' Reconnect stdin to CONIN$.','line_number':1267,'multiline':False]
['text':' Python 3.2 or later will abort inside Py_Initialize() when mandatory','line_number':1277,'multiline':False]
['text':' modules cannot be loaded (e.g. 'pythonthreehome' is wrongly set.).','line_number':1278,'multiline':False]
['text':' Install a hook to python dll's exit() and recover from it.','line_number':1279,'multiline':False]
['text':'
 * Function that replaces exit() while calling Py_Initialize().
 ','line_number':1287,'multiline':True]
['text':' Recover from exit.','line_number':1293,'multiline':False]
['text':'
 * Install a hook to python dll's exit().
 ','line_number':1297,'multiline':True]
['text':'
 * Remove the hook installed by hook_py_exit().
 ','line_number':1311,'multiline':True]
['text':' The string must not change later, make a copy in static memory.','line_number':1347,'multiline':False]
['text':' Catch exit() called in Py_Initialize().','line_number':1366,'multiline':False]
['text':' exit() was called in Py_Initialize().','line_number':1375,'multiline':False]
['text':' Initialise threads.  This is deprecated since Python 3.9.','line_number':1385,'multiline':False]
['text':' Remove the element from sys.path that was added because of our','line_number':1397,'multiline':False]
['text':' argv[0] value in Py3Init_vim().  Previously we used an empty','line_number':1398,'multiline':False]
['text':' string, but depending on the OS we then get an empty entry or','line_number':1399,'multiline':False]
['text':' the current directory in sys.path.','line_number':1400,'multiline':False]
['text':' Only after vim has been imported, the element does exist in','line_number':1401,'multiline':False]
['text':' sys.path.','line_number':1402,'multiline':False]
['text':' Without the call to PyEval_SaveThread, thread specific state (such','line_number':1405,'multiline':False]
['text':' as the system trace hook), will be lost between invocations of','line_number':1406,'multiline':False]
['text':' Python code.','line_number':1407,'multiline':False]
['text':' GIL may have been created and acquired in PyEval_InitThreads() and','line_number':1408,'multiline':False]
['text':' thread state is created in Py_Initialize(); there','line_number':1409,'multiline':False]
['text':' _PyGILState_NoteThreadState() also sets gilcounter to 1 (python must','line_number':1410,'multiline':False]
['text':' have threads enabled!), so the following does both: unlock GIL and','line_number':1411,'multiline':False]
['text':' save thread state in TLS without deleting thread state','line_number':1412,'multiline':False]
['text':' We call PythonIO_Flush() here to print any Python errors.','line_number':1421,'multiline':False]
['text':' This is OK, as it is possible to call this function even','line_number':1422,'multiline':False]
['text':' if PythonIO_Init_io() has not completed successfully (it will','line_number':1423,'multiline':False]
['text':' not do anything in this case).','line_number':1424,'multiline':False]
['text':'
 * External interface
 ','line_number':1429,'multiline':True]
['text':' leave Vim','line_number':1450,'multiline':False]
['text':' Python only works properly when the LC_NUMERIC locale is "C".','line_number':1453,'multiline':False]
['text':' Need to make a copy, value may change when setting new locale.','line_number':1459,'multiline':False]
['text':' PyRun_SimpleString expects a UTF-8 string. Wrong encoding may cause','line_number':1467,'multiline':False]
['text':' SyntaxError (unicode error).','line_number':1468,'multiline':False]
['text':' enter Vim','line_number':1487,'multiline':False]
['text':' keeps lint happy','line_number':1491,'multiline':False]
['text':'
 * ":py3"
 ','line_number':1494,'multiline':True]
['text':'
 * ":py3file"
 ','line_number':1518,'multiline':True]
['text':' Have to do it like this. PyRun_SimpleFile requires you to pass a','line_number':1532,'multiline':False]
['text':' stdio file pointer, but Vim and the Python DLL are compiled with','line_number':1533,'multiline':False]
['text':' different options under Windows, meaning that stdio pointers aren't','line_number':1534,'multiline':False]
['text':' compatible between the two. Yuk.','line_number':1535,'multiline':False]
['text':'','line_number':1536,'multiline':False]
['text':' construct: exec(compile(open('a_filename', 'rb').read(), 'a_filename', 'exec'))','line_number':1537,'multiline':False]
['text':'','line_number':1538,'multiline':False]
['text':' Using bytes so that Python can detect the source encoding as it normally','line_number':1539,'multiline':False]
['text':' does. The doc does not say "compile" accept bytes, though.','line_number':1540,'multiline':False]
['text':'','line_number':1541,'multiline':False]
['text':' We need to escape any backslashes or single quotes in the file name, so that','line_number':1542,'multiline':False]
['text':' Python won't mangle the file name.','line_number':1543,'multiline':False]
['text':' size of "exec(compile(open('"','line_number':1546,'multiline':False]
['text':' If we didn't finish the file name, we hit a buffer overflow','line_number':1557,'multiline':False]
['text':' Execute the file','line_number':1573,'multiline':False]
['text':'/////////////////////////////////////////////////////','line_number':1592,'multiline':False]
['text':' 2. Python output stream: writes output via [e]msg().','line_number':1593,'multiline':False]
['text':' Implementation functions','line_number':1595,'multiline':False]
['text':'/////////////////////////////////////////////////////','line_number':1620,'multiline':False]
['text':' 3. Implementation of the Vim module for Python','line_number':1621,'multiline':False]
['text':' Window type - Implementation functions','line_number':1623,'multiline':False]
['text':' --------------------------------------','line_number':1624,'multiline':False]
['text':' Buffer type - Implementation functions','line_number':1628,'multiline':False]
['text':' --------------------------------------','line_number':1629,'multiline':False]
['text':' Line range type - Implementation functions','line_number':1636,'multiline':False]
['text':' --------------------------------------','line_number':1637,'multiline':False]
['text':' Current objects type - Implementation functions','line_number':1645,'multiline':False]
['text':' -----------------------------------------------','line_number':1646,'multiline':False]
['text':' sq_length,    len(x)','line_number':1649,'multiline':False]
['text':' sq_concat,    x+y','line_number':1650,'multiline':False]
['text':' sq_repeat,    x*n','line_number':1651,'multiline':False]
['text':' sq_item,      x[i]','line_number':1652,'multiline':False]
['text':' was_sq_slice,	 x[i:j]','line_number':1653,'multiline':False]
['text':' sq_ass_item,  x[i]=v','line_number':1654,'multiline':False]
['text':' sq_ass_slice, x[i:j]=v','line_number':1655,'multiline':False]
['text':' sq_contains','line_number':1656,'multiline':False]
['text':' sq_inplace_concat','line_number':1657,'multiline':False]
['text':' sq_inplace_repeat','line_number':1658,'multiline':False]
['text':' mp_length	','line_number':1662,'multiline':True]
['text':' mp_subscript     ','line_number':1663,'multiline':True]
['text':' mp_ass_subscript ','line_number':1664,'multiline':True]
['text':' Buffer object','line_number':1668,'multiline':False]
['text':'////////////////','line_number':1698,'multiline':False]
['text':' sq_length,	  len(x)','line_number':1767,'multiline':False]
['text':' RangeConcat, sq_concat,  x+y','line_number':1768,'multiline':False]
['text':' RangeRepeat, sq_repeat,  x*n','line_number':1769,'multiline':False]
['text':' sq_item,	  x[i]','line_number':1770,'multiline':False]
['text':' was_sq_slice,     x[i:j]','line_number':1771,'multiline':False]
['text':' sq_as_item,  x[i]=v','line_number':1772,'multiline':False]
['text':' sq_ass_slice, x[i:j]=v','line_number':1773,'multiline':False]
['text':' sq_contains','line_number':1774,'multiline':False]
['text':' sq_inplace_concat','line_number':1775,'multiline':False]
['text':' sq_inplace_repeat','line_number':1776,'multiline':False]
['text':' mp_length	','line_number':1780,'multiline':True]
['text':' mp_subscript     ','line_number':1781,'multiline':True]
['text':' mp_ass_subscript ','line_number':1782,'multiline':True]
['text':' Line range object - Implementation','line_number':1785,'multiline':False]
['text':'//////////////','line_number':1800,'multiline':False]
['text':' TabPage object - Implementation','line_number':1872,'multiline':False]
['text':' Window object - Implementation','line_number':1894,'multiline':False]
['text':' Tab page list object - Definitions','line_number':1924,'multiline':False]
['text':' sq_length,    len(x)','line_number':1927,'multiline':False]
['text':' sq_concat,    x+y','line_number':1928,'multiline':False]
['text':' sq_repeat,    x*n','line_number':1929,'multiline':False]
['text':' sq_item,      x[i]','line_number':1930,'multiline':False]
['text':' sq_slice,     x[i:j]','line_number':1931,'multiline':False]
['text':' sq_as_item,  x[i]=v','line_number':1932,'multiline':False]
['text':' sq_ass_slice, x[i:j]=v','line_number':1933,'multiline':False]
['text':' sq_contains','line_number':1934,'multiline':False]
['text':' sq_inplace_concat','line_number':1935,'multiline':False]
['text':' sq_inplace_repeat','line_number':1936,'multiline':False]
['text':' Window list object - Definitions','line_number':1939,'multiline':False]
['text':' sq_length,    len(x)','line_number':1942,'multiline':False]
['text':' sq_concat,    x+y','line_number':1943,'multiline':False]
['text':' sq_repeat,    x*n','line_number':1944,'multiline':False]
['text':' sq_item,      x[i]','line_number':1945,'multiline':False]
['text':' sq_slice,     x[i:j]','line_number':1946,'multiline':False]
['text':' sq_as_item,  x[i]=v','line_number':1947,'multiline':False]
['text':' sq_ass_slice, x[i:j]=v','line_number':1948,'multiline':False]
['text':' sq_contains','line_number':1949,'multiline':False]
['text':' sq_inplace_concat','line_number':1950,'multiline':False]
['text':' sq_inplace_repeat','line_number':1951,'multiline':False]
['text':'
 * Current items object - Implementation
 ','line_number':1954,'multiline':True]
['text':' Dictionary object - Definitions','line_number':1974,'multiline':False]
['text':' List object - Definitions','line_number':1998,'multiline':False]
['text':' Function object - Definitions','line_number':2018,'multiline':False]
['text':' External interface','line_number':2035,'multiline':False]
['text':' The special value is removed from sys.path in Python3_Init().','line_number':2070,'multiline':False]
['text':' Set sys.argv[] to avoid a crash in warn().','line_number':2076,'multiline':False]
['text':'////////////////////////////////////////////////////////////////////////','line_number':2091,'multiline':False]
['text':' 4. Utility functions for handling the interface between Vim and Python.','line_number':2092,'multiline':False]
['text':'
 * Convert a Vim line into a Python string.
 * All internal newlines are replaced by null characters.
 *
 * On errors, the Python exception data is set, and NULL is returned.
 ','line_number':2094,'multiline':True]
