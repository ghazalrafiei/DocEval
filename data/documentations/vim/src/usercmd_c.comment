['text':' vi:set ts=8 sts=4 sw=4 noet:
 *
 * VIM - Vi IMproved	by Bram Moolenaar
 *
 * Do ":help uganda"  in Vim to read copying and usage conditions.
 * Do ":help credits" in Vim to see a list of people who contributed.
 * See README.txt for an overview of the Vim source code.
 ','line_number':1,'multiline':True]
['text':'
 * usercmd.c: User defined command support
 ','line_number':10,'multiline':True]
['text':' The command name','line_number':18,'multiline':False]
['text':' The argument type','line_number':19,'multiline':False]
['text':' The command's replacement string','line_number':20,'multiline':False]
['text':' The default value for a range/count','line_number':21,'multiline':False]
['text':' completion type','line_number':22,'multiline':False]
['text':' The command's address type','line_number':23,'multiline':False]
['text':' SCTX where the command was defined','line_number':24,'multiline':False]
['text':' some UC_ flags','line_number':25,'multiline':False]
['text':' completion argument if any','line_number':27,'multiline':False]
['text':' List of all user commands.','line_number':31,'multiline':False]
['text':' When non-zero it is not allowed to add or remove user commands','line_number':34,'multiline':False]
['text':'
 * List of names for completion for ":command" with the EXPAND_ flag.
 * Must be alphabetical for completion.
 ','line_number':40,'multiline':True]
['text':'
 * List of names of address types.  Must be alphabetical for completion.
 ','line_number':105,'multiline':True]
['text':'
 * Search for a user command that matches "eap->cmd".
 * Return cmdidx in "eap->cmdidx", flags in "eap->argt", idx in "eap->useridx".
 * Return a pointer to just after the command.
 * Return NULL if there is no matching command.
 ','line_number':126,'multiline':True]
['text':' end of the command (possibly including count)','line_number':135,'multiline':False]
['text':' set to TRUE for a full match','line_number':136,'multiline':False]
['text':' used for completion, NULL otherwise','line_number':137,'multiline':False]
['text':' completion flags or NULL','line_number':138,'multiline':False]
['text':' Point into typed cmd and test name','line_number':145,'multiline':False]
['text':' Found ambiguous buffer-local command,','line_number':147,'multiline':False]
['text':' only full match global is accepted.','line_number':148,'multiline':False]
['text':'
     * Look for buffer-local user commands first, then global ones.
     ','line_number':150,'multiline':True]
['text':' If finding a second match, the command is ambiguous.  But','line_number':166,'multiline':False]
['text':' not if a buffer-local command wasn't a full match and a','line_number':167,'multiline':False]
['text':' global command is a full match.','line_number':168,'multiline':False]
['text':' If we matched up to a digit, then there could','line_number':178,'multiline':False]
['text':' be another command including the digit that we','line_number':179,'multiline':False]
['text':' should use instead.','line_number':180,'multiline':False]
['text':' Do not search for further abbreviations','line_number':204,'multiline':False]
['text':' if this is an exact match.','line_number':205,'multiline':False]
['text':' Stop if we found a full match or searched all.','line_number':218,'multiline':False]
['text':' Only found ambiguous matches.','line_number':224,'multiline':False]
['text':' The match we found may be followed immediately by a number.  Move "p"','line_number':232,'multiline':False]
['text':' back to point to it.','line_number':233,'multiline':False]
['text':'
 * Set completion context for :command
 ','line_number':239,'multiline':True]
['text':' Check for attributes','line_number':248,'multiline':False]
['text':' Skip "-"','line_number':251,'multiline':False]
['text':' Cursor is still in the attribute','line_number':255,'multiline':False]
['text':' No "=", so complete attribute names','line_number':259,'multiline':False]
['text':' For the -complete, -nargs and -addr attributes, we complete','line_number':265,'multiline':False]
['text':' their arguments as well.','line_number':266,'multiline':False]
['text':' After the attributes comes the new command name','line_number':290,'multiline':False]
['text':' And finally comes a normal command','line_number':299,'multiline':False]
['text':'
 * Set the completion context for the argument of a user defined command.
 ','line_number':303,'multiline':True]
['text':' EX_XFILE: file names are handled before this call','line_number':322,'multiline':False]
['text':' Find start of last argument.','line_number':336,'multiline':False]
['text':' argument starts after a space','line_number':341,'multiline':False]
['text':' skip over escaped character','line_number':344,'multiline':False]
['text':'
 * Function given to ExpandGeneric() to obtain the list of user command names.
 ','line_number':359,'multiline':True]
['text':' In cmdwin, the alternative buffer should be used.','line_number':365,'multiline':False]
['text':' global command is overruled by buffer-local one','line_number':379,'multiline':False]
['text':'
 * Get the name of user command "idx".  "cmdidx" can be CMD_USER or
 * CMD_USER_BUF.
 * Returns NULL if the command is not found.
 ','line_number':387,'multiline':True]
['text':' In cmdwin, the alternative buffer should be used.','line_number':399,'multiline':False]
['text':'
 * Function given to ExpandGeneric() to obtain the list of user address type
 * names.
 ','line_number':409,'multiline':True]
['text':'
 * Function given to ExpandGeneric() to obtain the list of user command
 * attributes.
 ','line_number':419,'multiline':True]
['text':'
 * Function given to ExpandGeneric() to obtain the list of values for -nargs.
 ','line_number':436,'multiline':True]
['text':'
 * Function given to ExpandGeneric() to obtain the list of values for
 * -complete.
 ','line_number':449,'multiline':True]
['text':'
 * Get the name of completion type "expand" as a string.
 ','line_number':460,'multiline':True]
['text':'
 * Get the index of completion type "complete_str".
 * Returns EXPAND_NOTHING if no match found.
 ','line_number':475,'multiline':True]
['text':'
 * List user commands starting with "name[name_len]".
 ','line_number':497,'multiline':True]
['text':' don't allow for adding or removing user commands here','line_number':511,'multiline':False]
['text':' In cmdwin, the alternative buffer should be used.','line_number':514,'multiline':False]
['text':' Skip commands which don't match the requested prefix and','line_number':523,'multiline':False]
['text':' commands filtered out.','line_number':524,'multiline':False]
['text':' Put out the title first time','line_number':529,'multiline':False]
['text':' Special cases','line_number':537,'multiline':False]
['text':' "over" is how much longer the name is than the column width for','line_number':570,'multiline':False]
['text':' the name, we'll try to align what comes after.','line_number':571,'multiline':False]
['text':' Arguments','line_number':575,'multiline':False]
['text':' Address / Range','line_number':589,'multiline':False]
['text':' -count=N','line_number':594,'multiline':False]
['text':' -range=N','line_number':602,'multiline':False]
['text':' Address Type','line_number':614,'multiline':False]
['text':' Completion','line_number':628,'multiline':False]
['text':'
 * Parse address type argument
 ','line_number':690,'multiline':True]
['text':'
 * Parse a completion argument "value[vallen]".
 * The detected completion goes in "*complp", argument type in "*argt".
 * When there is an argument, for function and user defined completion, it's
 * copied to allocated memory and stored in "*compl_arg".
 * Returns FAIL if something is wrong.
 ','line_number':726,'multiline':True]
['text':' Look for any argument part - which is the part after any ','','line_number':748,'multiline':False]
['text':'
 * Scan attributes in the ":command" command.
 * Return FAIL when something is wrong.
 ','line_number':808,'multiline':True]
['text':' First, try the simple attributes (no arguments)','line_number':831,'multiline':False]
['text':' Look for the attribute name - which is the part before any '='','line_number':849,'multiline':False]
['text':' Do nothing - this is the default','line_number':866,'multiline':False]
['text':' default for -range is using buffer lines','line_number':911,'multiline':False]
['text':' default for -count is using any number','line_number':918,'multiline':False]
['text':'
 * Add a user command to the list or replace an existing one.
 ','line_number':975,'multiline':True]
['text':' can't replace termcodes - try using the string as is','line_number':1001,'multiline':False]
['text':' give up if out of memory','line_number':1004,'multiline':False]
['text':' get address of growarray: global or in curbuf','line_number':1009,'multiline':False]
['text':' Search for the command in the already defined commands.','line_number':1019,'multiline':False]
['text':' Command can be replaced with "command!" and when sourcing the','line_number':1037,'multiline':False]
['text':' same script again, but only once.','line_number':1038,'multiline':False]
['text':' Stop as soon as we pass the name to add','line_number':1058,'multiline':False]
['text':' Extend the array unless we're replacing an existing command','line_number':1063,'multiline':False]
['text':'
 * If "p" starts with "{" then read a block of commands until "}".
 * Used for ":command" and ":autocmd".
 ','line_number':1103,'multiline':True]
['text':' If the argument ends in "}" it must have been concatenated already','line_number':1122,'multiline':False]
['text':' for ISN_EXEC.','line_number':1123,'multiline':False]
['text':' Read lines between '{' and '}'.  Does not support nesting or','line_number':1125,'multiline':False]
['text':' here-doc constructs.','line_number':1126,'multiline':False]
['text':'
 * ":command ..." implementation
 ','line_number':1149,'multiline':True]
['text':' Check for attributes','line_number':1169,'multiline':False]
['text':' Get the name (if any) and skip to the following argument','line_number':1180,'multiline':False]
['text':' If there is nothing after the name, and no attributes were specified,','line_number':1193,'multiline':False]
['text':' we are listing commands','line_number':1194,'multiline':False]
['text':' Some plugins rely on silently ignoring the mistake, only make this','line_number':1212,'multiline':False]
['text':' an error in Vim9 script.','line_number':1213,'multiline':False]
['text':' success','line_number':1231,'multiline':False]
['text':'
 * ":comclear" implementation
 * Clear all user commands, global and for current buffer.
 ','line_number':1238,'multiline':True]
['text':'
 * If ucmd_locked is set give an error and return TRUE.
 * Otherwise return FALSE.
 ','line_number':1250,'multiline':True]
['text':'
 * Clear all user commands for "gap".
 ','line_number':1265,'multiline':True]
['text':'
 * ":delcommand" implementation
 ','line_number':1289,'multiline':True]
['text':'
 * Split and quote args for <f-args>.
 ','line_number':1346,'multiline':True]
['text':' Precalculate length','line_number':1357,'multiline':False]
['text':' Initial and final quotes','line_number':1359,'multiline':False]
['text':' ", "','line_number':1383,'multiline':False]
['text':'
 * Add modifiers from "cmod->cmod_split" to "buf".  Set "multi_mods" when one
 * was added.  Return the number of bytes added.
 ','line_number':1464,'multiline':True]
['text':' :aboveleft and :leftabove','line_number':1473,'multiline':False]
['text':' :belowright and :rightbelow','line_number':1476,'multiline':False]
['text':' :botright','line_number':1479,'multiline':False]
['text':' :tab','line_number':1483,'multiline':False]
['text':' For compatibility, don't add a tabpage number if it is the same','line_number':1490,'multiline':False]
['text':' as the default number for :tab.','line_number':1491,'multiline':False]
['text':' :topleft','line_number':1503,'multiline':False]
['text':' :vertical','line_number':1506,'multiline':False]
['text':' :horizontal','line_number':1509,'multiline':False]
['text':'
 * Generate text for the "cmod" command modifiers.
 * If "buf" is NULL just return the length.
 ','line_number':1515,'multiline':True]
['text':' the modifiers that are simple flags','line_number':1560,'multiline':False]
['text':' :silent','line_number':1565,'multiline':False]
['text':' :verbose','line_number':1570,'multiline':False]
['text':' flags from cmod->cmod_split','line_number':1585,'multiline':False]
['text':'
 * Check for a <> code in a user command.
 * "code" points to the '<'.  "len" the length of the <> (inclusive).
 * "buf" is where the result is to be added.
 * "split_buf" points to a buffer used for splitting, caller should free it.
 * "split_len" is the length of what "split_buf" contains.
 * Returns the length of the replacement, which has been added to "buf".
 * Returns -1 if there was no match, and only the "<" has been copied.
 ','line_number':1596,'multiline':True]
['text':' the user command we're expanding','line_number':1610,'multiline':False]
['text':' ex arguments','line_number':1611,'multiline':False]
['text':' Simple case first','line_number':1664,'multiline':False]
['text':' When specified there is a single argument don't split it.','line_number':1678,'multiline':False]
['text':' Works for ":Cmd %" when % is "a b c".','line_number':1679,'multiline':False]
['text':' No quoting, no splitting','line_number':1685,'multiline':False]
['text':' Quote, but don't split','line_number':1690,'multiline':False]
['text':' DBCS can contain \ in a trail byte, skip the','line_number':1695,'multiline':False]
['text':' double-byte character.','line_number':1696,'multiline':False]
['text':' DBCS can contain \ in a trail byte, copy the','line_number':1709,'multiline':False]
['text':' double-byte character to avoid escaping.','line_number':1710,'multiline':False]
['text':' Quote and split (<f-args>)','line_number':1721,'multiline':False]
['text':' This is hard, so only do it once, and cache the result','line_number':1722,'multiline':False]
['text':' Not recognized: just copy the '<' and return -1.','line_number':1809,'multiline':False]
['text':'
 * Execute a user defined command.
 ','line_number':1819,'multiline':True]
['text':'
     * Replace <> in the command by the arguments.
     * First round: "buf" is NULL, compute length, allocate "buf".
     * Second round: copy result into "buf".
     ','line_number':1848,'multiline':True]
['text':' source','line_number':1856,'multiline':False]
['text':' destination','line_number':1857,'multiline':False]
['text':' K_SPECIAL has been put in the buffer as K_SPECIAL','line_number':1877,'multiline':False]
['text':' KS_SPECIAL KE_FILLER, like for mappings, but','line_number':1878,'multiline':False]
['text':' do_cmdline() doesn't handle that, so convert it back.','line_number':1879,'multiline':False]
['text':' Also change K_SPECIAL KS_EXTRA KE_CSI into CSI.','line_number':1880,'multiline':False]
['text':' break if no <item> is found','line_number':1893,'multiline':False]
['text':' Include the '>'','line_number':1897,'multiline':False]
['text':' Take everything up to the '<'','line_number':1900,'multiline':False]
['text':' no match, continue after '<'','line_number':1914,'multiline':False]
['text':' second time here, finished','line_number':1925,'multiline':False]
['text':' Add on the trailing characters','line_number':1931,'multiline':False]
['text':' In a {} block variables use Vim9 script rules, even in a legacy','line_number':1949,'multiline':False]
['text':' script.','line_number':1950,'multiline':False]
['text':' Careful: Do not use "cmd" here, it may have become invalid if a user','line_number':1961,'multiline':False]
['text':' command was added.','line_number':1962,'multiline':False]
