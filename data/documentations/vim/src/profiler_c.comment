['text':' vi:set ts=8 sts=4 sw=4 noet:
 *
 * VIM - Vi IMproved	by Bram Moolenaar
 *
 * Do ":help uganda"  in Vim to read copying and usage conditions.
 * Do ":help credits" in Vim to see a list of people who contributed.
 * See README.txt for an overview of the Vim source code.
 ','line_number':1,'multiline':True]
['text':'
 * profiler.c: vim script profiler
 ','line_number':10,'multiline':True]
['text':'
 * Store the current time in "tm".
 ','line_number':18,'multiline':True]
['text':'
 * Compute the elapsed time from "tm" till now and store in "tm".
 ','line_number':31,'multiline':True]
['text':'
 * Subtract the time "tm2" from "tm".
 ','line_number':54,'multiline':True]
['text':'
 * Return a string that represents the time in "tm".
 * Uses a static buffer!
 ','line_number':73,'multiline':True]
['text':'
 * Return a float that represents the time in "tm".
 ','line_number':93,'multiline':True]
['text':'
 * Put the time "msec" past now in "tm".
 ','line_number':109,'multiline':True]
['text':' no limit','line_number':115,'multiline':False]
['text':' this should be 64 bit if possible','line_number':126,'multiline':False]
['text':'
 * Return TRUE if the current time is past "tm".
 ','line_number':137,'multiline':True]
['text':' timer was not set','line_number':146,'multiline':False]
['text':' timer was not set','line_number':151,'multiline':False]
['text':'
 * Set the time in "tm" to zero.
 ','line_number':159,'multiline':True]
['text':' FEAT_PROFILE || FEAT_RELTIME','line_number':173,'multiline':False]
['text':'
 * Divide the time "tm" by "count" and store in "tm2".
 ','line_number':180,'multiline':True]
['text':'
 * Functions for profiling.
 ','line_number':204,'multiline':True]
['text':'
 * Add the time "tm2" to "tm".
 ','line_number':209,'multiline':True]
['text':'
 * Add the "self" time from the total time and the children's time.
 ','line_number':228,'multiline':True]
['text':' Check that the result won't be negative.  Can happen with recursive','line_number':234,'multiline':False]
['text':' calls.','line_number':235,'multiline':False]
['text':'
 * Get the current waittime.
 ','line_number':249,'multiline':True]
['text':'
 * Subtract the passed waittime since "tm" from "tma".
 ','line_number':258,'multiline':True]
['text':'
 * Return TRUE if "tm1" and "tm2" are equal.
 ','line_number':270,'multiline':True]
['text':'
 * Return <0, 0 or >0 if "tm1" < "tm2", "tm1" == "tm2" or "tm1" > "tm2"
 ','line_number':283,'multiline':True]
['text':'
 * Reset all profiling information.
 ','line_number':301,'multiline':True]
['text':' Reset sourced files.','line_number':312,'multiline':False]
['text':' Reset functions.','line_number':336,'multiline':False]
['text':'
 * ":profile cmd args"
 ','line_number':377,'multiline':True]
['text':' The rest is similar to ":breakadd".','line_number':426,'multiline':False]
['text':' Command line expansion for :profile.','line_number':431,'multiline':False]
['text':' expand :profile sub-commands','line_number':434,'multiline':False]
['text':' expand :profile func {funcname}','line_number':435,'multiline':False]
['text':'
 * Function given to ExpandGeneric() to obtain the profile command
 * specific expansion.
 ','line_number':449,'multiline':True]
['text':'
 * Handle command line completion for :profile command.
 ','line_number':465,'multiline':True]
['text':' Default: expand subcommands.','line_number':473,'multiline':False]
['text':'
 * Called when starting to wait for the user to type a character.
 ','line_number':501,'multiline':True]
['text':'
 * Called when finished waiting for the user to type a character.
 ','line_number':510,'multiline':True]
['text':'
 * Return TRUE when a function defined in the current script should be
 * profiled.
 ','line_number':521,'multiline':True]
['text':'
 * Print the count and times for one function or function line.
 ','line_number':533,'multiline':True]
['text':' when equal print only self time','line_number':542,'multiline':False]
['text':' when equal print only self time','line_number':566,'multiline':False]
['text':'
 * Compare function for total time sorting.
 ','line_number':586,'multiline':True]
['text':'
 * Compare function for self time sorting.
 ','line_number':599,'multiline':True]
['text':'
 * Start profiling function "fp".
 ','line_number':612,'multiline':True]
['text':' avoid getting error for allocating zero bytes','line_number':623,'multiline':False]
['text':' out of memory','line_number':636,'multiline':False]
['text':'
 * Save time when starting to invoke another script or function.
 ','line_number':643,'multiline':True]
['text':' place to store wait time','line_number':648,'multiline':False]
['text':'
 * When calling a function: may initialize for profiling.
 ','line_number':661,'multiline':True]
['text':'
 * After calling a function: may handle profiling.  profile_may_start_func()
 * must have been called previously.
 ','line_number':682,'multiline':True]
['text':' make a ":profdel func" stop profiling the function','line_number':699,'multiline':False]
['text':'
 * Prepare profiling for entering a child or something else that is not
 * counted for the script/function itself.
 * Should always be called in pair with prof_child_exit().
 ','line_number':703,'multiline':True]
['text':' place to store waittime','line_number':710,'multiline':False]
['text':'
 * Take care of time spent in a child.
 * Should always be called after prof_child_enter().
 ','line_number':719,'multiline':True]
['text':' where waittime was stored','line_number':725,'multiline':False]
['text':' don't count waiting time','line_number':732,'multiline':False]
['text':'
 * Called when starting to read a function line.
 * "sourcing_lnum" must be correct!
 * When skipping lines it may not actually be executed, but we won't find out
 * until later and we need to store the time now.
 ','line_number':739,'multiline':True]
['text':' Skip continuation lines.','line_number':754,'multiline':False]
['text':'
 * Called when actually executing a function line.
 ','line_number':764,'multiline':True]
['text':'
 * Called when done with a function line.
 ','line_number':777,'multiline':True]
['text':'
 * Dump the profiling results for all functions in file "fd".
 ','line_number':801,'multiline':True]
['text':' nothing to dump','line_number':819,'multiline':False]
['text':'
 * Start profiling script "fp".
 ','line_number':884,'multiline':True]
['text':'
 * Count time spent in children after invoking another script or function.
 ','line_number':900,'multiline':True]
['text':' don't count wait time','line_number':915,'multiline':False]
['text':'
 * Dump the profiling results for all scripts in file "fd".
 ','line_number':921,'multiline':True]
['text':' Keep going till the end of file, so that trailing','line_number':953,'multiline':False]
['text':' continuation lines are listed.','line_number':954,'multiline':False]
['text':' When a line has been truncated, append NL, taking care','line_number':959,'multiline':False]
['text':' of multi-byte characters .','line_number':960,'multiline':False]
['text':' Move to the first byte of this char.','line_number':967,'multiline':False]
['text':' utf_head_off() doesn't work, because it checks','line_number':968,'multiline':False]
['text':' for a truncated character.','line_number':969,'multiline':False]
['text':'
 * Dump the profiling info.
 ','line_number':999,'multiline':True]
['text':'
 * Called when starting to read a script line.
 * "sourcing_lnum" must be correct!
 * When skipping lines it may not actually be executed, but we won't find out
 * until later and we need to store the time now.
 ','line_number':1021,'multiline':True]
['text':' Grow the array before starting the timer, so that the time spent','line_number':1038,'multiline':False]
['text':' here isn't counted.','line_number':1039,'multiline':False]
['text':' Zero counters for a line that was not used before.','line_number':1046,'multiline':False]
['text':'
 * Called when actually executing a function line.
 ','line_number':1060,'multiline':True]
['text':'
 * Called when done with a script line.
 ','line_number':1075,'multiline':True]
['text':' FEAT_PROFILE','line_number':1103,'multiline':False]
