['text':' vi:set ts=8 sts=4 sw=4 noet:
 *
 * VIM - Vi IMproved	by Bram Moolenaar
 *
 * Do ":help uganda"  in Vim to read copying and usage conditions.
 * Do ":help credits" in Vim to see a list of people who contributed.
 * See README.txt for an overview of the Vim source code.
 ','line_number':1,'multiline':True]
['text':'
 * Tcl extensions by Ingo Wilken <Ingo.Wilken@informatik.uni-oldenburg.de>
 * Last modification: Wed May 10 21:28:44 CEST 2000
 * Requires Tcl 8.0 or higher.
 *
 *  Variables:
 *  ::vim::current(buffer)	# Name of buffer command for current buffer.
 *  ::vim::current(window)	# Name of window command for current window.
 *  ::vim::range(start)		# Start of current range (line number).
 *  ::vim::range(end)		# End of current range (line number).
 *  ::vim::lbase		# Start of line/column numbers (1 or 0).
 *
 *  Commands:
 *  ::vim::command {cmd}	# Execute ex command {cmd}.
 *  ::vim::option {opt} [val]	# Get/Set option {opt}.
 *  ::vim::expr {expr}		# Evaluate {expr} using vim's evaluator.
 *  ::vim::beep			# Guess.
 *
 *  set buf [::vim::buffer {n}]	# Create Tcl command for buffer N.
 *  set bl [::vim::buffer list] # Get list of Tcl commands of all buffers.
 *  ::vim::buffer exists {n}	# True if buffer {n} exists.
 *
 *  set wl [::vim::window list] # Get list of Tcl commands of all windows.
 *
 *  set n [$win height]		# Report window height.
 *  $win height {n}		# Set window height to {n}.
 *  array set pos [$win cursor] # Get cursor position.
 *  $win cursor {row} {col}	# Set cursor position.
 *  $win cursor pos		# Set cursor position from array var "pos"
 *  $win delcmd {cmd}		# Register callback command for closed window.
 *  $win option {opt} [val]	# Get/Set vim option in context of $win.
 *  $win command {cmd}		# Execute ex command in context of $win.
 *  $win expr {expr}		# Evaluate vim expression in context of $win.
 *  set buf [$win buffer]	# Create Tcl command for window's buffer.
 *
 *  $buf name			# Reports file name in buffer.
 *  $buf number			# Reports buffer number.
 *  set l [$buf get {n}]	# Get buffer line {n} as a string.
 *  set L [$buf get {n} {m}]	# Get lines {n} through {m} as a list.
 *  $buf count			# Reports number of lines in buffer.
 *  $buf last			# Reports number of last line in buffer.
 *  $buf delete {n}		# Delete line {n}.
 *  $buf delete {n} {m}		# Delete lines {n} through {m}.
 *  $buf set {n} {l}		# Set line {n} to string {l}.
 *  $buf set {n} {m} {L}	# Set lines {n} through {m} from list {L}.
 *				# Delete/inserts lines as appropriate.
 *  $buf option {opt} [val]	# Get/Set vim option in context of $buf.
 *  $buf command {cmd}		# Execute ex command in context of $buf
 *  $buf expr {cmd}		# Evaluate vim expression in context of $buf.
 *  array set pos [$buf mark {m}]   # Get position of mark.
 *  $buf append {n} {str}	# Append string {str} to buffer,after line {n}.
 *  $buf insert {n} {str}	# Insert string {str} in buffer as line {n}.
 *  $buf delcmd {cmd}		# Register callback command for deleted buffer.
 *  set wl [$buf windows]	# Get list of Tcl commands for all windows of
 *				# this buffer.
TODO:
 *  ::vim::buffer new		#   create new buffer + Tcl command
 ','line_number':10,'multiline':True]
['text':' tcl.h defines it too','line_number':70,'multiline':False]
['text':' use tcl's stubs mechanism','line_number':73,'multiline':False]
['text':' This appears to be new in Tcl 8.4.','line_number':109,'multiline':False]
['text':'
 *  List of Tcl interpreters who reference a vim window or buffer.
 *  Each buffer and window has its own list in the w_tcl_ref or b_tcl_ref
 *  struct member.  We need this because Tcl can create sub-interpreters with
 *  the "interp" command, and each interpreter can reference all windows and
 *  buffers.
 ','line_number':114,'multiline':True]
['text':' Tcl command that represents this object','line_number':126,'multiline':False]
['text':' Tcl command to call when object is being del.','line_number':127,'multiline':False]
['text':' Vim window or buffer (win_T* or buf_T*)','line_number':128,'multiline':False]
['text':' dummy object for deleted ref list','line_number':145,'multiline':False]
['text':'////////////////////////////////////////////////////////////////////////////','line_number':147,'multiline':False]
['text':' TCL interface manager','line_number':148,'multiline':False]
['text':'//////////////////////////////////////////////////////////////////////////','line_number':149,'multiline':False]
['text':' Just generating prototypes','line_number':159,'multiline':False]
['text':'
 * Declare HANDLE for tcl.dll and function pointers.
 ','line_number':179,'multiline':True]
['text':'
 * Table of name to function pointer of tcl.
 ','line_number':186,'multiline':True]
['text':'
 * Make all runtime-links of tcl.
 *
 * 1. Get module handle using LoadLibraryEx.
 * 2. Get pointer to tcl function by GetProcAddress.
 * 3. Repeat 2, until get all functions will be used.
 *
 * Parameter 'libname' provides name of DLL.
 * Return OK or FAIL.
 ','line_number':198,'multiline':True]
['text':' defined(DYNAMIC_TCL) || defined(PROTO)','line_number':236,'multiline':False]
['text':'
 * Return TRUE if the TCL interface can be used.
 ','line_number':256,'multiline':True]
['text':' Note: the library will allocate memory to store the executable name,','line_number':267,'multiline':False]
['text':' which will be reported as possibly leaked by valgrind.','line_number':268,'multiline':False]
['text':' FIXME: When Tcl_InitStubs() was failed, how delete interp?','line_number':278,'multiline':False]
['text':'
 * Called once when exiting.
 ','line_number':286,'multiline':True]
['text':'///////////////////////////////////////////////////////////////////////////','line_number':304,'multiline':False]
['text':' Tcl commands','line_number':305,'multiline':False]
['text':'//////////////////////////////////////////////////////////////////////////','line_number':306,'multiline':False]
['text':'
 * Replace standard "exit" command.
 *
 * Delete the Tcl interpreter; a new one will be created with the next
 * :tcl command). The exit code is saved (and retrieved in tclexit()).
 * Since Tcl's exit is never expected to return and this replacement
 * does, then (except for a trivial case) additional Tcl commands will
 * be run. Since the interpreter is now marked as deleted, an error
 * will be returned -- typically "attempt to call eval in deleted
 * interpreter". Hopefully, at this point, checks for TCL_ERROR take
 * place and control percolates back up to Vim -- but with this new error
 * string in the interpreter's result value. Therefore it would be
 * useless for this routine to return the exit code via Tcl_SetResult().
 ','line_number':308,'multiline':True]
['text':' FALLTHROUGH','line_number':336,'multiline':False]
['text':'
 *  "::vim::beep" - what Vi[m] does best :-)
 ','line_number':348,'multiline':True]
['text':'
 *  "::vim::buffer list" - create a list of buffer commands.
 *  "::vim::buffer {N}" - create buffer command for buffer N.
 *  "::vim::buffer exists {N}" - test if buffer N exists.
 *  "::vim::buffer new" - create a new buffer (not implemented)
 ','line_number':367,'multiline':True]
['text':' clear error from Tcl_GetIntFromObj','line_number':417,'multiline':False]
['text':'
 * "::vim::window list" - create list of window commands.
 ','line_number':466,'multiline':True]
['text':'
 * flags for bufselfcmd and winselfcmd to indicate outstanding actions.
 ','line_number':500,'multiline':True]
['text':'
 * This function implements the buffer commands.
 ','line_number':507,'multiline':True]
['text':'
	     *	Get filename of buffer.
	     ','line_number':571,'multiline':True]
['text':'
	     * Get line number of last line.
	     ','line_number':587,'multiline':True]
['text':' fallthrough','line_number':591,'multiline':False]
['text':'
	     * Get number of lines in buffer.
	     ','line_number':593,'multiline':True]
['text':'
	     * Get buffer's number.
	     ','line_number':611,'multiline':True]
['text':' objc == 3','line_number':655,'multiline':False]
['text':'
		 *  Replace one line with a string.
		 *	$buf set {n} {string}
		 ','line_number':673,'multiline':True]
['text':'
		 * Replace several lines with the elements of a Tcl list.
		 *	$buf set {n} {m} {list}
		 * If the list contains more than {m}-{n}+1 elements, they
		 * are * inserted after line {m}.  If the list contains fewer
		 * elements, * the lines from {n}+length({list}) through {m}
		 * are deleted.
		 ','line_number':698,'multiline':True]
['text':' append lines','line_number':741,'multiline':False]
['text':' did not replace all lines, delete','line_number':754,'multiline':False]
['text':' number of lines to be replaced','line_number':763,'multiline':False]
['text':' ???','line_number':769,'multiline':False]
['text':' fallthrough','line_number':854,'multiline':False]
['text':'
	     * Return list of window commands.
	     ','line_number':888,'multiline':True]
['text':'
	     * Register deletion callback.
	     * TODO: Should be able to register multiple callbacks
	     ','line_number':915,'multiline':True]
['text':'
 * This function implements the window commands.
 ','line_number':945,'multiline':True]
['text':' objc == 4','line_number':1095,'multiline':False]
['text':' TODO: should check column','line_number':1103,'multiline':False]
['text':'///////////////////////////////////////////////////////////////////////////','line_number':1162,'multiline':False]
['text':' Support functions for Tcl commands','line_number':1163,'multiline':False]
['text':'//////////////////////////////////////////////////////////////////////////','line_number':1164,'multiline':False]
['text':'
 * Get a line number from 'obj' and convert it to vim's range.
 ','line_number':1166,'multiline':True]
['text':'
 * Find the first window in the window list that displays the buffer.
 ','line_number':1219,'multiline':True]
['text':' keep current window context','line_number':1232,'multiline':False]
['text':'
 * Do-it-all function for "::vim::command", "$buf command" and "$win command".
 ','line_number':1235,'multiline':True]
['text':' If the ex command created a new Tcl interpreter, remove it','line_number':1284,'multiline':False]
['text':'
 * Do-it-all function for "::vim::option", "$buf option" and "$win option".
 ','line_number':1293,'multiline':True]
['text':' avoid compiler warning','line_number':1343,'multiline':False]
['text':'
 * Do-it-all function for "::vim::expr", "$buf expr" and "$win expr".
 ','line_number':1377,'multiline':True]
['text':'
 * Check for internal vim errors.
 ','line_number':1417,'multiline':True]
['text':'
 * Functions that handle the reference lists:
 *   delref() - callback for Tcl's DeleteCommand
 *   tclgetref() - find/create Tcl command for a win_T* or buf_T* object
 *   tclgetwindow() - window frontend for tclgetref()
 *   tclgetbuffer() - buffer frontend for tclgetref()
 *   tclsetdelcmd() - add Tcl callback command to a vim object
 ','line_number':1436,'multiline':True]
['text':' ptr to w_tcl_ref/b_tcl-ref member of','line_number':1460,'multiline':False]
['text':' win_T/buf_T struct','line_number':1461,'multiline':False]
['text':' "win" or "buf"','line_number':1462,'multiline':False]
['text':' win_T* or buf_T*','line_number':1463,'multiline':False]
['text':' winselfcmd or bufselfcmd','line_number':1464,'multiline':False]
['text':' This might break on some exotic systems...','line_number':1501,'multiline':False]
['text':' This should never happen.  Famous last word?','line_number':1554,'multiline':False]
['text':'//////////////////////////////////////////','line_number':1561,'multiline':False]
['text':'    I/O Channel','line_number':1562,'multiline':False]
['text':'//////////////////////////////////////////','line_number':1563,'multiline':False]
['text':' currently does nothing','line_number':1570,'multiline':False]
['text':' input is currently not supported','line_number':1588,'multiline':False]
['text':' The buffer is not guaranteed to be 0-terminated, and we don't if','line_number':1606,'multiline':False]
['text':' there is enough room to add a '\0'.  So we have to create a copy','line_number':1607,'multiline':False]
['text':' of the buffer...','line_number':1608,'multiline':False]
['text':' typeName','line_number':1654,'multiline':False]
['text':' version','line_number':1655,'multiline':False]
['text':' closeProc','line_number':1656,'multiline':False]
['text':' inputProc','line_number':1657,'multiline':False]
['text':' outputProc','line_number':1658,'multiline':False]
['text':' seekProc','line_number':1659,'multiline':False]
['text':' setOptionProc','line_number':1660,'multiline':False]
['text':' getOptionProc','line_number':1661,'multiline':False]
['text':' watchProc','line_number':1662,'multiline':False]
['text':' getHandleProc','line_number':1663,'multiline':False]
['text':' close2Proc','line_number':1664,'multiline':False]
['text':' blockModeProc','line_number':1665,'multiline':False]
['text':' flushProc','line_number':1667,'multiline':False]
['text':' handlerProc','line_number':1668,'multiline':False]
['text':' The following should not be necessary since TCL_CHANNEL_VERSION_2 was','line_number':1670,'multiline':False]
['text':' set above','line_number':1671,'multiline':False]
['text':' wideSeekProc','line_number':1673,'multiline':False]
['text':' threadActionProc','line_number':1676,'multiline':False]
['text':' truncateProc','line_number':1679,'multiline':False]
['text':'/////////////////////////////////','line_number':1683,'multiline':False]
['text':' Interface to vim','line_number':1684,'multiline':False]
['text':'////////////////////////////////','line_number':1685,'multiline':False]
['text':' must be writeable','line_number':1690,'multiline':False]
['text':' Tcl_LinkVar requires writeable varname','line_number':1718,'multiline':False]
['text':' Create replacement channels for stdout and stderr; this has to be','line_number':1734,'multiline':False]
['text':' done each time an interpreter is created since the channels are closed','line_number':1735,'multiline':False]
['text':' when the interpreter is deleted','line_number':1736,'multiline':False]
['text':' VIM sure is interactive','line_number':1751,'multiline':False]
['text':' replace standard Tcl exit command','line_number':1764,'multiline':False]
['text':' new commands, in ::vim namespace','line_number':1769,'multiline':False]
['text':' "lbase" variable','line_number':1783,'multiline':False]
['text':' "range" variable','line_number':1788,'multiline':False]
['text':' "current" variable','line_number':1798,'multiline':False]
['text':' Interpreter already exists, just update variables','line_number':1814,'multiline':False]
['text':' The interpreter is now gets deleted.  All registered commands (esp.','line_number':1860,'multiline':False]
['text':' window and buffer commands) are deleted, triggering their deletion','line_number':1861,'multiline':False]
['text':' callback, which deletes all refs pointing to this interpreter.','line_number':1862,'multiline':False]
['text':' We could garbage-collect the unused ref structs in all windows and','line_number':1863,'multiline':False]
['text':' buffers, but unless the user creates hundreds of sub-interpreters','line_number':1864,'multiline':False]
['text':' all referring to lots of windows and buffers, this is hardly worth','line_number':1865,'multiline':False]
['text':' the effort.  Unused refs are recycled by other interpreters, and','line_number':1866,'multiline':False]
['text':' all refs are free'd when the window/buffer gets closed by vim.','line_number':1867,'multiline':False]
['text':' True if we intercepted Tcl's exit command','line_number':1880,'multiline':False]
['text':' True if the interpreter cannot continue','line_number':1882,'multiline':False]
['text':'
 * ":tcl"
 ','line_number':1920,'multiline':True]
['text':'
 * ":tclfile"
 ','line_number':1946,'multiline':True]
['text':'
 * ":tcldo"
 ','line_number':1964,'multiline':True]
['text':' must be writeable memory','line_number':1972,'multiline':False]
['text':' TODO: this code currently crashes Vim on exit','line_number':2053,'multiline':False]
['text':' Not using Tcl, nothing to do.','line_number':2088,'multiline':False]
['text':' Not using Tcl, nothing to do.','line_number':2107,'multiline':False]
['text':' The End','line_number':2120,'multiline':False]
