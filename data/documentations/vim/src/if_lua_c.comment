['text':' vi:set ts=8 sts=4 sw=4 noet:
 *
 * VIM - Vi IMproved	by Bram Moolenaar
 *
 * Lua interface by Luis Carvalho
 *
 * Do ":help uganda"  in Vim to read copying and usage conditions.
 * Do ":help credits" in Vim to see a list of people who contributed.
 * See README.txt for an overview of the Vim source code.
 ','line_number':1,'multiline':True]
['text':' Only do the following when the feature is enabled.  Needed for "make','line_number':25,'multiline':False]
['text':' depend".','line_number':26,'multiline':False]
['text':' funcref','line_number':46,'multiline':False]
['text':' selfdict','line_number':47,'multiline':False]
['text':' ref to a lua func','line_number':52,'multiline':False]
['text':' ref to a lua table if metatable else LUA_NOREF. used','line_number':53,'multiline':False]
['text':' for __call','line_number':54,'multiline':False]
['text':' get/setudata manage references to vim userdata in a cache table through','line_number':70,'multiline':False]
['text':' object pointers (light userdata). The cache table itself is retrieved','line_number':71,'multiline':False]
['text':' from the registry.','line_number':72,'multiline':False]
['text':' lauxlib','line_number':119,'multiline':False]
['text':' lua','line_number':150,'multiline':False]
['text':' libs','line_number':209,'multiline':False]
['text':' lauxlib','line_number':220,'multiline':False]
['text':' lua','line_number':255,'multiline':False]
['text':' libs','line_number':325,'multiline':False]
['text':' lauxlib','line_number':343,'multiline':False]
['text':' lua','line_number':374,'multiline':False]
['text':' libs','line_number':433,'multiline':False]
['text':' DYNAMIC_LUA','line_number':473,'multiline':False]
['text':' now the cache table is at the top of the stack','line_number':497,'multiline':False]
['text':' remove the cache table from the stack','line_number':500,'multiline':False]
['text':' cache table is at -1','line_number':507,'multiline':False]
['text':' ...now at -2','line_number':508,'multiline':False]
['text':' copy the userdata (cache at -3)','line_number':509,'multiline':False]
['text':' consumes two stack items','line_number':510,'multiline':False]
['text':' and remove the cache table','line_number':511,'multiline':False]
['text':' =======   Internal   =======','line_number':514,'multiline':False]
['text':' value is userdata','line_number':533,'multiline':False]
['text':' does it have a metatable?','line_number':534,'multiline':False]
['text':' get metatable','line_number':536,'multiline':False]
['text':' MTs match?','line_number':537,'multiline':False]
['text':' MTs','line_number':539,'multiline':False]
['text':' TODO: handle partial arguments','line_number':606,'multiline':False]
['text':'
 * Converts lua value at 'pos' to typval 'tv'.
 * Returns OK or FAIL.
 ','line_number':618,'multiline':True]
['text':' has metatable?','line_number':710,'multiline':False]
['text':' check list','line_number':712,'multiline':False]
['text':' MTs','line_number':719,'multiline':False]
['text':' check dict','line_number':722,'multiline':False]
['text':' MTs','line_number':729,'multiline':False]
['text':' check blob','line_number':732,'multiline':False]
['text':' MTs','line_number':739,'multiline':False]
['text':' check funcref','line_number':742,'multiline':False]
['text':' MTs','line_number':751,'multiline':False]
['text':' MTs','line_number':754,'multiline':False]
['text':' FALLTHROUGH','line_number':757,'multiline':False]
['text':'
 * similar to luaL_addlstring, but replaces \0 with \n if toline and
 * \n with \0 otherwise
 ','line_number':766,'multiline':True]
['text':'
 * pops a string s from the top of the stack and calls mf(t) for pieces t of
 * s separated by newlines
 ','line_number':808,'multiline':True]
['text':' break string','line_number':821,'multiline':False]
['text':' break?','line_number':825,'multiline':False]
['text':' original and modified strings','line_number':832,'multiline':False]
['text':' cache[obj] = udata ','line_number':841,'multiline':True]
['text':' not interned? ','line_number':857,'multiline':True]
['text':' =======   List type   =======','line_number':876,'multiline':False]
['text':' reference in Lua','line_number':883,'multiline':False]
['text':' cache[lis] = udata','line_number':884,'multiline':False]
['text':' list item?','line_number':925,'multiline':False]
['text':' Lua array index starts with 1 while Vim uses 0, subtract 1 to','line_number':930,'multiline':False]
['text':' normalize.','line_number':931,'multiline':False]
['text':' method?','line_number':939,'multiline':False]
['text':' Lua array index starts with 1 while Vim uses 0, subtract 1 to normalize.','line_number':963,'multiline':False]
['text':' remove?','line_number':982,'multiline':False]
['text':' =======   Dict type   =======','line_number':1052,'multiline':False]
['text':' reference in Lua','line_number':1059,'multiline':False]
['text':' cache[dic] = udata','line_number':1060,'multiline':False]
['text':' # remaining items','line_number':1105,'multiline':False]
['text':' funcref?','line_number':1124,'multiline':False]
['text':' keep "self" reference','line_number':1127,'multiline':False]
['text':' read value?','line_number':1148,'multiline':False]
['text':' non-existing key?','line_number':1158,'multiline':False]
['text':' remove?','line_number':1177,'multiline':False]
['text':' =======   Blob type   =======','line_number':1198,'multiline':False]
['text':' reference in Lua','line_number':1205,'multiline':False]
['text':' cache[blo] = udata','line_number':1206,'multiline':False]
['text':' =======   Funcref type   =======','line_number':1318,'multiline':False]
['text':' NOTE: Don't call "dict_unref(f->self)", because the dict of "f->self"','line_number':1352,'multiline':False]
['text':' will be (or has been already) freed by Vim's garbage collection.','line_number':1353,'multiline':False]
['text':' equivalent to string(funcref)','line_number':1357,'multiline':False]
['text':' #args','line_number':1371,'multiline':False]
['text':' as in clear_tv','line_number':1378,'multiline':False]
['text':' =======   Buffer type   =======','line_number':1409,'multiline':False]
['text':' methods','line_number':1450,'multiline':False]
['text':' delete line','line_number':1477,'multiline':False]
['text':' fix cursor in current window?','line_number':1494,'multiline':False]
['text':' update line','line_number':1512,'multiline':False]
['text':' fix insertion line','line_number':1549,'multiline':False]
['text':' insert','line_number':1552,'multiline':False]
['text':' =======   Window type   =======','line_number':1613,'multiline':False]
['text':' methods','line_number':1643,'multiline':False]
['text':' =======   Vim module   =======','line_number':1745,'multiline':False]
['text':' nargs','line_number':1750,'multiline':False]
['text':' tostring','line_number':1759,'multiline':False]
['text':' arg','line_number':1760,'multiline':False]
['text':' use space instead of tab','line_number':1766,'multiline':False]
['text':' Replace any "\n" with "\0"','line_number':1770,'multiline':False]
['text':' vim.eval at position 1','line_number':1788,'multiline':False]
['text':' vim.eval','line_number':1793,'multiline':False]
['text':' return string','line_number':1795,'multiline':False]
['text':' avoid outputting on input line','line_number':1799,'multiline':False]
['text':' remove eventual returns, but keep vim.eval','line_number':1803,'multiline':False]
['text':' Delete the key','line_number':1866,'multiline':False]
['text':' Doesn't exist, nothing to do','line_number':1868,'multiline':False]
['text':' Delete the entry','line_number':1870,'multiline':False]
['text':' Update the key','line_number':1875,'multiline':False]
['text':' Convert the lua value to a Vim script type in the temporary variable','line_number':1878,'multiline':False]
['text':' Need to create an entry','line_number':1885,'multiline':False]
['text':' Update the value','line_number':1892,'multiline':False]
['text':' Clear the old value','line_number':1913,'multiline':False]
['text':' Update the value','line_number':1915,'multiline':False]
['text':' Clear the temporary variable','line_number':1919,'multiline':False]
['text':' nil','line_number':1935,'multiline':False]
['text':' traverse table to init list','line_number':1997,'multiline':False]
['text':' value','line_number':2010,'multiline':False]
['text':' traverse table to init dict','line_number':2036,'multiline':False]
['text':' dup key in case it's a number','line_number':2044,'multiline':False]
['text':' value','line_number':2053,'multiline':False]
['text':' key copy and value','line_number':2062,'multiline':False]
['text':' traverse table to init blob','line_number':2088,'multiline':False]
['text':' note: not checking if function exists (needs function_exists)','line_number':2103,'multiline':False]
['text':' get by number or name?','line_number':2114,'multiline':False]
['text':' by number?','line_number':2116,'multiline':False]
['text':' by name','line_number':2122,'multiline':False]
['text':' first buffer?','line_number':2139,'multiline':False]
['text':' get by number?','line_number':2148,'multiline':False]
['text':' first window?','line_number':2155,'multiline':False]
['text':' check vim udata?','line_number':2176,'multiline':False]
['text':' fallback','line_number':2219,'multiline':False]
['text':'
 * Return the Vim version as a Lua table
 ','line_number':2269,'multiline':True]
['text':'
 * for freeing list, dict, buffer and window objects; lightuserdata as arg
 ','line_number':2309,'multiline':True]
['text':' compile error?','line_number':2333,'multiline':False]
['text':' running error?','line_number':2339,'multiline':False]
['text':' the cache table','line_number':2356,'multiline':False]
['text':' traverse cache table','line_number':2362,'multiline':False]
['text':' list?','line_number':2366,'multiline':False]
['text':' key','line_number':2368,'multiline':False]
['text':' dict?','line_number':2372,'multiline':False]
['text':' key','line_number':2374,'multiline':False]
['text':' funcref?','line_number':2378,'multiline':False]
['text':' key','line_number':2380,'multiline':False]
['text':' metatable and value','line_number':2384,'multiline':False]
['text':' cache table','line_number':2502,'multiline':False]
['text':' cache table's metatable','line_number':2503,'multiline':False]
['text':' cache is weak-valued','line_number':2506,'multiline':False]
['text':' put the cache table in the registry for luaV_get/setudata()','line_number':2507,'multiline':False]
['text':' we don't need the cache table here anymore','line_number':2511,'multiline':False]
['text':' print','line_number':2512,'multiline':False]
['text':' debug.debug','line_number':2515,'multiline':False]
['text':' free','line_number':2520,'multiline':False]
['text':' luaeval','line_number':2524,'multiline':False]
['text':' setref','line_number':2528,'multiline':False]
['text':' register','line_number':2532,'multiline':False]
['text':' vim table','line_number':2551,'multiline':False]
['text':' custom code','line_number':2556,'multiline':False]
['text':' core libs','line_number':2574,'multiline':False]
['text':' vim','line_number':2575,'multiline':False]
['text':' vim table','line_number':2588,'multiline':False]
['text':' =======   Interface   =======','line_number':2592,'multiline':False]
['text':'
 * ex commands
 ','line_number':2630,'multiline':True]
['text':' header','line_number':2668,'multiline':False]
['text':' footer','line_number':2670,'multiline':False]
['text':' function body','line_number':2676,'multiline':False]
['text':' function -> body','line_number':2680,'multiline':False]
['text':' Check the line number, the command may have deleted lines.','line_number':2683,'multiline':False]
['text':' function','line_number':2687,'multiline':False]
['text':' current line as arg','line_number':2688,'multiline':False]
['text':' current line number as arg','line_number':2689,'multiline':False]
['text':' Catch the command switching to another buffer.','line_number':2695,'multiline':False]
['text':' update line?','line_number':2698,'multiline':False]
['text':' result from luaV_toline','line_number':2705,'multiline':False]
['text':' line','line_number':2707,'multiline':False]
['text':' function','line_number':2709,'multiline':False]
['text':' call the function with 1 arg, getting 1 result back','line_number':2760,'multiline':False]
['text':' get the result','line_number':2763,'multiline':False]
['text':' pop result off the stack','line_number':2765,'multiline':False]
['text':'
 * Native C function callback
 ','line_number':2784,'multiline':True]
['text':' First arg for metatable __call method is a table','line_number':2801,'multiline':False]
['text':'
 * Free up any lua references held by the func state.
 ','line_number':2819,'multiline':True]
