['text':'
 * NOTE: This is a MODIFIED version of libvterm, see the README file.
 ','line_number':1,'multiline':True]
['text':' VIM: use TRUE and FALSE instead of true and false','line_number':15,'multiline':False]
['text':' VIM: from stdint.h','line_number':19,'multiline':False]
['text':' VIM: define max screen cols and rows','line_number':24,'multiline':False]
['text':' Any cell can contain at most one basic printing character and 5 combining
 * characters. This number could be changed but will be ABI-incompatible if
 * you do ','line_number':35,'multiline':True]
['text':' Specifies a screen point.','line_number':44,'multiline':False]
['text':' some small utility functions; we can just keep these static here ','line_number':50,'multiline':True]
['text':'
 * Order points by on-screen flow order:
 * Return < 0 if "a" is before "b"
 * Return  0  if "a" and "b" are equal
 * Return > 0 if "a" is after "b".
 ','line_number':52,'multiline':True]
['text':' Specifies a rectangular screen area.','line_number':67,'multiline':False]
['text':' true if the rect contains the point ','line_number':75,'multiline':True]
['text':' move a rect ','line_number':86,'multiline':True]
['text':' Move "rect" "row_delta" down and "col_delta" right.','line_number':87,'multiline':False]
['text':' Does not check boundaries.','line_number':88,'multiline':False]
['text':'*
 * Bit-field describing the value of VTermColor.type
 ','line_number':99,'multiline':True]
['text':'*
   * If the lower bit of `type` is not set, the colour is 24-bit RGB.
   ','line_number':103,'multiline':True]
['text':'*
   * The colour is an index into a palette of 256 colours.
   ','line_number':108,'multiline':True]
['text':'*
   * Mask that can be used to extract the RGB/Indexed bit.
   ','line_number':113,'multiline':True]
['text':'*
   * If set, indicates that this colour should be the default foreground
   * color, i.e. there was no SGR request for another colour. When
   * rendering this colour it is possible to ignore "idx" and just use a
   * colour that is not in the palette.
   ','line_number':118,'multiline':True]
['text':'*
   * If set, indicates that this colour should be the default background
   * color, i.e. there was no SGR request for another colour. A common
   * option when rendering this colour is to not render a background at
   * all, for example by rendering the window transparently at this spot.
   ','line_number':126,'multiline':True]
['text':'*
   * Mask that can be used to extract the default foreground/background bit.
   ','line_number':134,'multiline':True]
['text':'*
   * VIM: If set, indicates that the color is invalid.
   ','line_number':139,'multiline':True]
['text':'*
 * Returns true if the VTERM_COLOR_RGB `type` flag is set, indicating that the
 * given VTermColor instance is an indexed colour.
 ','line_number':145,'multiline':True]
['text':'*
 * Returns true if the VTERM_COLOR_INDEXED `type` flag is set, indicating that
 * the given VTermColor instance is an rgb colour.
 ','line_number':152,'multiline':True]
['text':'*
 * Returns true if the VTERM_COLOR_DEFAULT_FG `type` flag is set, indicating
 * that the given VTermColor instance corresponds to the default foreground
 * color.
 ','line_number':159,'multiline':True]
['text':'*
 * Returns true if the VTERM_COLOR_DEFAULT_BG `type` flag is set, indicating
 * that the given VTermColor instance corresponds to the default background
 * color.
 ','line_number':167,'multiline':True]
['text':'*
 * Returns true if the VTERM_COLOR_INVALID `type` flag is set, indicating
 * that the given VTermColor instance is an invalid color.
 ','line_number':175,'multiline':True]
['text':' VIM: this was a union, but that doesn't always work.','line_number':181,'multiline':False]
['text':'*
   * Tag indicating which member is actually valid.
   * Please use the `VTERM_COLOR_IS_*` test macros to check whether a
   * particular type flag is set.
   ','line_number':183,'multiline':True]
['text':'*
 * Constructs a new VTermColor instance representing the given RGB values.
 ','line_number':195,'multiline':True]
['text':'*
 * Construct a new VTermColor instance representing an indexed color with the
 * given index.
 ','line_number':200,'multiline':True]
['text':'*
 * Compares two colours. Returns true if the colors are equal, false otherwise.
 ','line_number':206,'multiline':True]
['text':' VTERM_VALUETYPE_NONE = 0 ','line_number':212,'multiline':True]
['text':' VTERM_ATTR_NONE = 0 ','line_number':236,'multiline':True]
['text':' bool:   1, 22','line_number':237,'multiline':False]
['text':' number: 4, 21, 24','line_number':238,'multiline':False]
['text':' bool:   3, 23','line_number':239,'multiline':False]
['text':' bool:   5, 25','line_number':240,'multiline':False]
['text':' bool:   7, 27','line_number':241,'multiline':False]
['text':' bool:   8, 28','line_number':242,'multiline':False]
['text':' bool:   9, 29','line_number':243,'multiline':False]
['text':' number: 10-19','line_number':244,'multiline':False]
['text':' color:  30-39 90-97','line_number':245,'multiline':False]
['text':' color:  40-49 100-107','line_number':246,'multiline':False]
['text':' bool:   73, 74, 75','line_number':247,'multiline':False]
['text':' number: 73, 74, 75','line_number':248,'multiline':False]
['text':' VTERM_PROP_NONE = 0 ','line_number':254,'multiline':True]
['text':' bool','line_number':255,'multiline':False]
['text':' bool','line_number':256,'multiline':False]
['text':' bool','line_number':257,'multiline':False]
['text':' string','line_number':258,'multiline':False]
['text':' string','line_number':259,'multiline':False]
['text':' bool','line_number':260,'multiline':False]
['text':' number','line_number':261,'multiline':False]
['text':' number','line_number':262,'multiline':False]
['text':' bool','line_number':263,'multiline':False]
['text':' VIM - string','line_number':264,'multiline':False]
['text':' also CUT1 .. CUT7 by bitshifting ','line_number':291,'multiline':True]
['text':' DECSCA-protected against DECSEL/DECSED ','line_number':297,'multiline':True]
['text':' DECDWL or DECDHL double-width line ','line_number':298,'multiline':True]
['text':' DECDHL double-height line (1=top 2=bottom) ','line_number':299,'multiline':True]
['text':' DECDWL or DECDHL line ','line_number':303,'multiline':True]
['text':' DECDHL line (1=top 2=bottom) ','line_number':304,'multiline':True]
['text':' Line is a flow continuation of the previous ','line_number':305,'multiline':True]
['text':' Copies of VTermState fields that the 'resize' callback might have reason to
 * edit. 'resize' callback gets total control of these fields and may
 * free-and-reallocate them if required. They will be copied back from the
 * struct after the callback has returned.
 ','line_number':308,'multiline':True]
['text':' current cursor position ','line_number':314,'multiline':True]
['text':' [1] may be NULL ','line_number':315,'multiline':True]
['text':' libvterm relies on this memory to be zeroed out before it is returned
   * by the allocator. ','line_number':319,'multiline':True]
['text':' currently unused but reserved for some sort of ABI version flag ','line_number':328,'multiline':True]
['text':' Override default sizes for various structures ','line_number':335,'multiline':True]
['text':' default: 4096 ','line_number':336,'multiline':True]
['text':' default: 4096 ','line_number':337,'multiline':True]
['text':' A convenient shortcut for default cases ','line_number':342,'multiline':True]
['text':' Allocate and initialize a new terminal with default allocators.','line_number':343,'multiline':False]
['text':' These shortcuts are generally discouraged in favour of just using vterm_build() ','line_number':345,'multiline':True]
['text':' Allocate and initialize a new terminal with specified allocators.','line_number':347,'multiline':False]
['text':' Free and cleanup a terminal and all its data.','line_number':350,'multiline':False]
['text':' Get the current size of the terminal and store in "rowsp" and "colsp".','line_number':353,'multiline':False]
['text':' Setting output callback will override the buffer logic ','line_number':363,'multiline':True]
['text':' These buffer functions only work if output callback is NOT set
 * These are deprecated and will be removed in a later version ','line_number':367,'multiline':True]
['text':' This too ','line_number':373,'multiline':True]
['text':' "button" is 1 for left, 2 for middle, 3 for right.','line_number':385,'multiline':False]
['text':' Button 4 is scroll wheel down, button 5 is scroll wheel up.','line_number':386,'multiline':False]
['text':' ------------','line_number':389,'multiline':False]
['text':' Parser layer','line_number':390,'multiline':False]
['text':' ------------','line_number':391,'multiline':False]
['text':' Flag to indicate non-final subparameters in a single CSI parameter.
 * Consider
 *   CSI 1;2:3:4;5a
 * 1 4 and 5 are final.
 * 2 and 3 are non-final and will have this bit set
 *
 * Don't confuse this with the final byte of the CSI escape; 'a' in this case.
 ','line_number':393,'multiline':True]
['text':' Can't use -1 to indicate a missing argument; use this instead ','line_number':407,'multiline':True]
['text':' VIM: changed 31 to 30 to avoid an overflow warning','line_number':408,'multiline':False]
['text':' Normally NUL, CAN, SUB and DEL are ignored. Setting this true causes them
 * to be emitted by the 'control' callback
 ','line_number':431,'multiline':True]
['text':' -----------','line_number':436,'multiline':False]
['text':' State layer','line_number':437,'multiline':False]
['text':' -----------','line_number':438,'multiline':False]
['text':' Callback for setting various properties.  Must return 1 if the property','line_number':448,'multiline':False]
['text':' was accepted, 0 otherwise.','line_number':449,'multiline':False]
['text':' VIM: added','line_number':457,'multiline':False]
['text':' useful to add protocol?','line_number':468,'multiline':False]
['text':' Initialize the state.','line_number':494,'multiline':False]
['text':' VIM: added','line_number':498,'multiline':False]
['text':'*
 * Makes sure that the given color `col` is indeed an RGB colour. After this
 * function returns, VTERM_COLOR_IS_RGB(col) will return true, while all other
 * flags stored in `col->type` will have been reset.
 *
 * @param state is the VTermState instance from which the colour palette should
 * be extracted.
 * @param col is a pointer at the VTermColor instance that should be converted
 * to an RGB colour.
 ','line_number':511,'multiline':True]
['text':' ------------','line_number':528,'multiline':False]
['text':' Screen layer','line_number':529,'multiline':False]
['text':' ------------','line_number':530,'multiline':False]
['text':' 0 to 9 ','line_number':540,'multiline':True]
['text':' On a DECDWL or DECDHL line ','line_number':541,'multiline':True]
['text':' On a DECDHL line (1=top 2=bottom) ','line_number':542,'multiline':True]
['text':' All fields are optional, NULL when not used.','line_number':567,'multiline':False]
['text':' A line was pushed off the top of the window.','line_number':575,'multiline':False]
['text':' "cells[cols]" contains the cells of that line.','line_number':576,'multiline':False]
['text':' Return value is unused.','line_number':577,'multiline':False]
['text':' Return the screen of the vterm.','line_number':583,'multiline':False]
['text':'
 * Install screen callbacks.  These are invoked when the screen contents is
 * changed.  "user" is passed into to the callback.
 ','line_number':586,'multiline':True]
['text':' Back-compat alias for the brief time it was in 0.3-RC1','line_number':598,'multiline':False]
['text':' Enable support for using the alternate screen if "altscreen" is non-zero.','line_number':601,'multiline':False]
['text':' Before that switching to the alternate screen won't work.','line_number':602,'multiline':False]
['text':' Calling with "altscreen" zero has no effect.','line_number':603,'multiline':False]
['text':' every cell ','line_number':607,'multiline':True]
['text':' entire rows ','line_number':608,'multiline':True]
['text':' entire screen ','line_number':609,'multiline':True]
['text':' entire screen + scrollrect ','line_number':610,'multiline':True]
['text':' Invoke the relevant callbacks to update the screen.','line_number':615,'multiline':False]
['text':'
 * Reset the screen.  Also invokes vterm_state_reset().
 * Must be called before the terminal can be used.
 ','line_number':620,'multiline':True]
['text':' Neither of these functions NUL-terminate the buffer ','line_number':626,'multiline':True]
['text':'*
 * Same as vterm_state_convert_color_to_rgb(), but takes a `screen` instead of a `state`
 * instance.
 ','line_number':653,'multiline':True]
['text':'*
 * Similar to vterm_state_set_default_colors(), but also resets colours in the
 * screen buffer(s)
 ','line_number':659,'multiline':True]
['text':' ---------','line_number':665,'multiline':False]
['text':' Utilities','line_number':666,'multiline':False]
['text':' ---------','line_number':667,'multiline':False]
