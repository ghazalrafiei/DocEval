['text':' vi:set ts=8 sts=4 sw=4 noet:
 *
 * VIM - Vi IMproved	by Bram Moolenaar
 *
 * Do ":help uganda"  in Vim to read copying and usage conditions.
 * Do ":help credits" in Vim to see a list of people who contributed.
 * See README.txt for an overview of the Vim source code.
 ','line_number':1,'multiline':True]
['text':'
 * indent.c: Indentation related functions
 ','line_number':10,'multiline':True]
['text':'
 * Set the integer values corresponding to the string setting of 'vartabstop'.
 * "array" will be set, caller must free it if needed.
 * Return FAIL for an error.
 ','line_number':18,'multiline':True]
['text':' Catch negative values, overflow and ridiculous big values.','line_number':73,'multiline':False]
['text':'
 * Calculate the number of screen spaces a tab will occupy.
 * If "vts" is set then the tab widths are taken from that array,
 * otherwise the value of ts is used.
 ','line_number':90,'multiline':True]
['text':'
 * Find the size of the tab that covers a particular column.
 ','line_number':124,'multiline':True]
['text':'
 * Find the column on which a tab starts.
 ','line_number':154,'multiline':True]
['text':'
 * Find the number of tabs and spaces necessary to get from one column
 * to another.
 ','line_number':180,'multiline':True]
['text':' Find the padding needed to reach the next tabstop.','line_number':219,'multiline':False]
['text':' If the space needed is less than the padding no tabs can be used.','line_number':233,'multiline':False]
['text':' At least one tab has been used. See if any more will fit.','line_number':244,'multiline':False]
['text':'
 * See if two tabstop arrays contain the same values.
 ','line_number':261,'multiline':True]
['text':'
 * Copy a tabstop array, allocating space for the new array.
 ','line_number':284,'multiline':True]
['text':'
 * Return a count of the number of tabstops.
 ','line_number':303,'multiline':True]
['text':'
 * Return the first tabstop, or 8 if there are no tabstops defined.
 ','line_number':312,'multiline':True]
['text':'
 * Return the effective shiftwidth value for current buffer, using the
 * 'tabstop' value when 'shiftwidth' is zero.
 ','line_number':323,'multiline':True]
['text':'
 * Idem, using "pos".
 ','line_number':333,'multiline':True]
['text':'
 * Idem, using the first non-black in the current line.
 ','line_number':348,'multiline':True]
['text':'
 * Idem, using virtual column "col".
 ','line_number':360,'multiline':True]
['text':'
 * Return the effective softtabstop value for the current buffer, using the
 * 'shiftwidth' value when 'softtabstop' is negative.
 ','line_number':374,'multiline':True]
['text':'
 * Count the size (in window cells) of the indent in the current line.
 ','line_number':384,'multiline':True]
['text':'
 * Count the size (in window cells) of the indent in line "lnum".
 ','line_number':398,'multiline':True]
['text':'
 * Count the size (in window cells) of the indent in line "lnum" of buffer
 * "buf".
 ','line_number':413,'multiline':True]
['text':'
 * count the size (in window cells) of the indent in line "ptr", with
 * 'tabstop' at "ts"
 ','line_number':429,'multiline':True]
['text':' if TRUE, count only screen size for tabs','line_number':437,'multiline':False]
['text':' count a tab for what it is worth','line_number':446,'multiline':False]
['text':' In list mode, when tab is not set, count screen char width','line_number':449,'multiline':False]
['text':' for Tab, displays: ^I','line_number':450,'multiline':False]
['text':' count a space for one','line_number':454,'multiline':False]
['text':'
 * Count the size (in window cells) of the indent in line "ptr", using
 * variable tabstops.
 * if "list" is TRUE, count only screen size for tabs.
 ','line_number':462,'multiline':True]
['text':' count a tab for what it is worth','line_number':474,'multiline':False]
['text':' In list mode, when tab is not set, count screen char width','line_number':479,'multiline':False]
['text':' for Tab, displays: ^I','line_number':480,'multiline':False]
['text':' count a space for one','line_number':484,'multiline':False]
['text':'
 * Set the indent of the current line.
 * Leaves the cursor on the first non-blank in the line.
 * Caller must take care of undo.
 * "flags":
 *	SIN_CHANGED:	call changed_bytes() if the line was changed.
 *	SIN_INSERT:	insert the indent in front of the line.
 *	SIN_UNDO:	save line for undo before changing it.
 * Returns TRUE if the line was changed.
 ','line_number':492,'multiline':True]
['text':' measured in spaces','line_number':504,'multiline':False]
['text':' measured in characters','line_number':512,'multiline':False]
['text':' measured in spaces','line_number':515,'multiline':False]
['text':' number of initial whitespace chars when','line_number':521,'multiline':False]
['text':' 'et' and 'pi' are both set','line_number':522,'multiline':False]
['text':' First check if there is anything to do and compute the number of','line_number':524,'multiline':False]
['text':' characters needed for the indent.','line_number':525,'multiline':False]
['text':' Calculate the buffer size for the new indent, and check to see if it','line_number':530,'multiline':False]
['text':' isn't already set','line_number':531,'multiline':False]
['text':' if 'expandtab' isn't set: use TABs; if both 'expandtab' and','line_number':533,'multiline':False]
['text':' 'preserveindent' are set count the number of characters at the','line_number':534,'multiline':False]
['text':' beginning of the line to be copied','line_number':535,'multiline':False]
['text':' If 'preserveindent' is set then reuse as much as possible of','line_number':538,'multiline':False]
['text':' the existing indent structure for the new indent','line_number':539,'multiline':False]
['text':' count as many characters as we can use','line_number':544,'multiline':False]
['text':' stop if this tab will overshoot the target','line_number':556,'multiline':False]
['text':' These diverge from this point.','line_number':573,'multiline':False]
['text':' Set initial number of whitespace chars to copy if we are','line_number':576,'multiline':False]
['text':' preserving indent but expandtab is set','line_number':577,'multiline':False]
['text':' Fill to next tabstop with a tab, if possible','line_number':581,'multiline':False]
['text':' ind_done += tab_pad;','line_number':593,'multiline':False]
['text':' count tabs required for indent','line_number':600,'multiline':False]
['text':' ind_done += (int)curbuf->b_p_ts;','line_number':625,'multiline':False]
['text':' count spaces required for indent','line_number':629,'multiline':False]
['text':' ++ind_done;','line_number':638,'multiline':False]
['text':' Return if the indent is OK already.','line_number':641,'multiline':False]
['text':' Allocate memory for the new line.','line_number':645,'multiline':False]
['text':' If 'preserveindent' and 'expandtab' are both set keep the original','line_number':652,'multiline':False]
['text':' characters and allocate accordingly.  We will fill the rest with spaces','line_number':653,'multiline':False]
['text':' after the if (!curbuf->b_p_et) below.','line_number':654,'multiline':False]
['text':' Set total length of indent in','line_number':661,'multiline':False]
['text':' characters, which may have been','line_number':662,'multiline':False]
['text':' undercounted until now','line_number':663,'multiline':False]
['text':' Skip over any additional white space (useful when newindent is less','line_number':672,'multiline':False]
['text':' than old)','line_number':673,'multiline':False]
['text':' Put the characters in the new line.','line_number':687,'multiline':False]
['text':' if 'expandtab' isn't set: use TABs','line_number':688,'multiline':False]
['text':' If 'preserveindent' is set then reuse as much as possible of','line_number':691,'multiline':False]
['text':' the existing indent structure for the new indent','line_number':692,'multiline':False]
['text':' stop if this tab will overshoot the target','line_number':709,'multiline':False]
['text':' Fill to next tabstop with a tab, if possible','line_number':723,'multiline':False]
['text':' Replace the line (unless undo fails).','line_number':768,'multiline':False]
['text':' this may free "newline"','line_number':774,'multiline':False]
['text':' Correct saved cursor position if it is in this line.','line_number':779,'multiline':False]
['text':' cursor was after the indent, adjust for the number of','line_number':783,'multiline':False]
['text':' bytes added/removed','line_number':784,'multiline':False]
['text':' cursor was in the indent, and is now after it, put it back','line_number':787,'multiline':False]
['text':' at the start of the indent (replacing spaces with TAB)','line_number':788,'multiline':False]
['text':' When increasing indent this behaves like spaces were inserted at','line_number':795,'multiline':False]
['text':' the old indent, when decreasing indent it behaves like spaces','line_number':796,'multiline':False]
['text':' were deleted at the new indent.','line_number':797,'multiline':False]
['text':'
 * Return the indent of the current line after a number.  Return -1 if no
 * number was found.  Used for 'n' in 'formatoptions': numbered list.
 * Since a pattern is used it can actually handle more than numbers.
 ','line_number':812,'multiline':True]
['text':' length of comment leader','line_number':824,'multiline':False]
['text':' In format_lines() (i.e. not insert mode), fo+=q is needed too...','line_number':830,'multiline':False]
['text':' vim_regexec() expects a pointer to a line.  This lets us','line_number':839,'multiline':False]
['text':' start matching for the flp beyond any comment leader...','line_number':840,'multiline':False]
['text':'
 * This is called when 'breakindentopt' is changed and when a window is
 * initialized.
 ','line_number':857,'multiline':True]
['text':' Note: Keep this in sync with p_briopt_values','line_number':874,'multiline':False]
['text':'
 * Return appropriate space number for breakindent, taking influencing
 * parameters into account. Window must be specified, since it is not
 * necessarily always the current one.
 ','line_number':916,'multiline':True]
['text':' start of the line','line_number':924,'multiline':False]
['text':' cached indent value','line_number':926,'multiline':False]
['text':' cached tabstop value','line_number':927,'multiline':False]
['text':' cached buffer number','line_number':928,'multiline':False]
['text':' cached copy of "line"','line_number':929,'multiline':False]
['text':' changedtick of cached value','line_number':930,'multiline':False]
['text':' cached vartabs values','line_number':932,'multiline':False]
['text':' cached list value','line_number':934,'multiline':False]
['text':' cached w_p_briopt_list value','line_number':935,'multiline':False]
['text':' cached formatlistpat value','line_number':936,'multiline':False]
['text':' window width minus window margin space, i.e. what rests for text','line_number':939,'multiline':False]
['text':' used cached indent, unless','line_number':945,'multiline':False]
['text':' - buffer changed','line_number':946,'multiline':False]
['text':' - 'tabstop' changed','line_number':947,'multiline':False]
['text':' - buffer was changed','line_number':948,'multiline':False]
['text':' - 'briopt_list changed' changed or','line_number':949,'multiline':False]
['text':' - 'formatlistpattern' changed','line_number':950,'multiline':False]
['text':' - line changed','line_number':951,'multiline':False]
['text':' - 'vartabs' changed','line_number':952,'multiline':False]
['text':' add additional indent for numbered lists','line_number':985,'multiline':False]
['text':' column value has priority','line_number':1009,'multiline':False]
['text':' Add offset for number column, if 'n' is in 'cpoptions'','line_number':1016,'multiline':False]
['text':' add additional indent for numbered lists','line_number':1019,'multiline':False]
['text':' indent minus the length of the showbreak string','line_number':1023,'multiline':False]
['text':' never indent past left window margin','line_number':1028,'multiline':False]
['text':' always leave at least bri_min characters on the left,','line_number':1032,'multiline':False]
['text':' if text width is sufficient','line_number':1033,'multiline':False]
['text':'
 * When extra == 0: Return TRUE if the cursor is before or on the first
 *		    non-blank in the line.
 * When extra == 1: Return TRUE if the cursor is before the first non-blank in
 *		    the line.
 ','line_number':1042,'multiline':True]
['text':'
 * op_reindent - handle reindenting a block of lines.
 ','line_number':1062,'multiline':True]
['text':' Don't even try when 'modifiable' is off.','line_number':1075,'multiline':False]
['text':' Save for undo.  Do this once for all lines, much faster than doing this','line_number':1082,'multiline':False]
['text':' for each line separately, especially when undoing.','line_number':1083,'multiline':False]
['text':' it's a slow thing to do, so give feedback so there's no worry','line_number':1088,'multiline':False]
['text':' that the computer's just hung.','line_number':1089,'multiline':False]
['text':' Be vi-compatible: For lisp indenting the first line is not','line_number':1096,'multiline':False]
['text':' indented, unless there is only one line.','line_number':1097,'multiline':False]
['text':' empty or blank line','line_number':1102,'multiline':False]
['text':' get the indent for this line','line_number':1105,'multiline':False]
['text':' did change the indent, call changed_lines() later','line_number':1109,'multiline':False]
['text':' make sure it's valid','line_number':1116,'multiline':False]
['text':' put cursor on first non-blank of indented line','line_number':1119,'multiline':False]
['text':' Mark changed lines so that they will be redrawn.  When Visual','line_number':1123,'multiline':False]
['text':' highlighting was present, need to continue until the last line.  When','line_number':1124,'multiline':False]
['text':' there is no change still need to remove the Visual highlighting.','line_number':1125,'multiline':False]
['text':' set '[ and '] marks','line_number':1141,'multiline':False]
['text':'
 * Return TRUE if lines starting with '#' should be left aligned.
 ','line_number':1147,'multiline':True]
['text':'
 * Return TRUE if the conditions are OK for smart indenting.
 ','line_number':1160,'multiline':True]
['text':'
 * Try to do some very smart auto-indenting.
 * Used when inserting a "normal" character.
 ','line_number':1174,'multiline':True]
['text':' do some very smart indenting when entering '{' or '}'','line_number':1186,'multiline':False]
['text':' for '}' set indent equal to indent of line containing matching '{'','line_number':1190,'multiline':False]
['text':' If the matching '{' has a ')' immediately before it (ignoring','line_number':1194,'multiline':False]
['text':' white-space), then line up with the start of the line','line_number':1195,'multiline':False]
['text':' containing the matching '(' if there is one.  This handles the','line_number':1196,'multiline':False]
['text':' case where an "if (..\n..) {" statement continues over multiple','line_number':1197,'multiline':False]
['text':' lines -- webb','line_number':1198,'multiline':False]
['text':' skip blanks before '{'','line_number':1201,'multiline':False]
['text':' when inserting '{' after "O" reduce indent, but not','line_number':1217,'multiline':False]
['text':' more than indent of previous line','line_number':1218,'multiline':False]
['text':' ignore empty lines and lines starting with '#'.','line_number':1228,'multiline':False]
['text':' set indent of '#' always to 0','line_number':1241,'multiline':False]
['text':' remember current indent for next line','line_number':1244,'multiline':False]
['text':' Adjust ai_col, the char at this position can be deleted.','line_number':1249,'multiline':False]
['text':'
 * Insert an indent (for <Tab> or CTRL-T) or delete an indent (for CTRL-D).
 * Keep the cursor on the same character.
 * type == INDENT_INC	increase indent (for CTRL-T or <Tab>)
 * type == INDENT_DEC	decrease indent (for CTRL-D)
 * type == INDENT_SET	set indent to "amount"
 * if round is TRUE, round the indent to 'shiftwidth' (only with _INC and _Dec).
 ','line_number':1254,'multiline':True]
['text':' replaced character, put on replace stack','line_number':1267,'multiline':False]
['text':' call changed_bytes()','line_number':1268,'multiline':False]
['text':' reduction for Insstart.col','line_number':1272,'multiline':False]
['text':' init for GCC','line_number':1279,'multiline':False]
['text':' init for GCC','line_number':1280,'multiline':False]
['text':' MODE_VREPLACE state needs to know what the line was like before changing','line_number':1282,'multiline':False]
['text':' Deal with NULL below','line_number':1285,'multiline':False]
['text':' for the following tricks we don't want list mode','line_number':1289,'multiline':False]
['text':' For Replace mode we need to fix the replace stack later, which is only','line_number':1298,'multiline':False]
['text':' possible when the cursor is in the indent.  Remember the number of','line_number':1299,'multiline':False]
['text':' characters before the cursor if it's possible.','line_number':1300,'multiline':False]
['text':' determine offset from first non-blank','line_number':1303,'multiline':False]
['text':' If the cursor is in the indent, compute how many screen columns the','line_number':1310,'multiline':False]
['text':' cursor is to the left of the first non-blank.','line_number':1311,'multiline':False]
['text':' can't fix replace stack','line_number':1315,'multiline':False]
['text':' Set the new indent.  The cursor will be put on the first non-blank.','line_number':1318,'multiline':False]
['text':' Avoid being called recursively.','line_number':1325,'multiline':False]
['text':' Try to put cursor on same character.','line_number':1333,'multiline':False]
['text':' If the cursor is at or after the first non-blank in the line,','line_number':1334,'multiline':False]
['text':' compute the cursor column relative to the column of the first','line_number':1335,'multiline':False]
['text':' non-blank character.','line_number':1336,'multiline':False]
['text':' If we are not in insert mode, leave the cursor on the first non-blank.','line_number':1337,'multiline':False]
['text':' If the cursor is before the first non-blank, position it relative','line_number':1338,'multiline':False]
['text':' to the first non-blank, counted in screen columns.','line_number':1339,'multiline':False]
['text':' When changing the indent while the cursor is touching it, reset','line_number':1342,'multiline':False]
['text':' Insstart_col to 0.','line_number':1343,'multiline':False]
['text':' Compute the screen column where the cursor should be.','line_number':1354,'multiline':False]
['text':' Advance the cursor until we reach the right screen column.','line_number':1358,'multiline':False]
['text':' May need to insert spaces to be able to position the cursor on','line_number':1375,'multiline':False]
['text':' the right screen column.','line_number':1376,'multiline':False]
['text':' When changing the indent while the cursor is in it, reset','line_number':1393,'multiline':False]
['text':' Insstart_col to 0.','line_number':1394,'multiline':False]
['text':' May have to adjust the start of the insert.','line_number':1407,'multiline':False]
['text':' For MODE_REPLACE state, may have to fix the replace stack, if it's','line_number':1423,'multiline':False]
['text':' possible.  If the number of characters before the cursor decreased, need','line_number':1424,'multiline':False]
['text':' to pop a few characters from the replace stack.','line_number':1425,'multiline':False]
['text':' If the number of characters before the cursor increased, need to push a','line_number':1426,'multiline':False]
['text':' few NULs onto the replace stack.','line_number':1427,'multiline':False]
['text':' remove a NUL from the replace stack','line_number':1432,'multiline':False]
['text':' For MODE_VREPLACE state, we also have to fix the replace stack.  In this','line_number':1450,'multiline':False]
['text':' case it is always possible because we backspace over the whole line and','line_number':1451,'multiline':False]
['text':' then put it back again the way we wanted it.','line_number':1452,'multiline':False]
['text':' If orig_line didn't allocate, just return.  At least we did the job,','line_number':1455,'multiline':False]
['text':' even if you can't backspace.','line_number':1456,'multiline':False]
['text':' Save new line','line_number':1460,'multiline':False]
['text':' We only put back the new line up to the cursor','line_number':1465,'multiline':False]
['text':' Put back original line','line_number':1468,'multiline':False]
['text':' Backspace from cursor to start of line','line_number':1472,'multiline':False]
['text':' Insert new stuff into line again','line_number':1475,'multiline':False]
['text':'
 * Copy the indent from ptr to the current line (and fill to size)
 * Leaves the cursor on the first non-blank in the line.
 * Returns TRUE if the line was changed.
 ','line_number':1482,'multiline':True]
['text':' Round 1: compute the number of characters needed for the indent','line_number':1503,'multiline':False]
['text':' Round 2: copy the characters.','line_number':1504,'multiline':False]
['text':' Count/copy the usable portion of the source line','line_number':1515,'multiline':False]
['text':' Stop if this tab will overshoot the target','line_number':1527,'multiline':False]
['text':' Fill to next tabstop with a tab, if possible','line_number':1550,'multiline':False]
['text':' Add tabs required for indent','line_number':1568,'multiline':False]
['text':' Count/add spaces required for indent','line_number':1595,'multiline':False]
['text':' Allocate memory for the result: the copied indent, new indent','line_number':1606,'multiline':False]
['text':' and the rest of the line.','line_number':1607,'multiline':False]
['text':' Append the original line','line_number':1616,'multiline':False]
['text':' Replace the line','line_number':1619,'multiline':False]
['text':' Put the cursor after the indent.','line_number':1622,'multiline':False]
['text':'
 * Give a "resulting text too long" error and maybe set got_int.
 ','line_number':1627,'multiline':True]
['text':' when not inside a try/catch set got_int to break out of any loop','line_number':1635,'multiline':False]
['text':'
 * ":retab".
 ','line_number':1641,'multiline':True]
['text':' For start of white-space string','line_number':1654,'multiline':False]
['text':' For start of white-space string','line_number':1655,'multiline':False]
['text':' init to non-NULL','line_number':1659,'multiline':False]
['text':' called u_save for current line','line_number':1660,'multiline':False]
['text':' string value of tab argument','line_number':1663,'multiline':False]
['text':' first changed line','line_number':1669,'multiline':False]
['text':' last changed line','line_number':1670,'multiline':False]
['text':' don't want list mode here','line_number':1673,'multiline':False]
['text':' This ensures that either new_vts_array and new_ts_str are freshly','line_number':1682,'multiline':False]
['text':' allocated, or new_vts_array points to an existing array and new_ts_str','line_number':1683,'multiline':False]
['text':' is null.','line_number':1684,'multiline':False]
['text':' First consecutive white-space','line_number':1720,'multiline':False]
['text':' Retabulate this string of white-space','line_number':1733,'multiline':False]
['text':' len is virtual length of white string','line_number':1735,'multiline':False]
['text':' flag out-of-memory','line_number':1767,'multiline':False]
['text':' len is actual number of white characters used','line_number':1772,'multiline':False]
['text':' "new_line" may have been copied','line_number':1792,'multiline':False]
['text':' out of memory','line_number':1817,'multiline':False]
['text':' If a single value was given then it can be considered equal to','line_number':1825,'multiline':False]
['text':' either the value of 'tabstop' or the value of 'vartabstop'.','line_number':1826,'multiline':False]
['text':' not changed','line_number':1830,'multiline':False]
['text':' not changed','line_number':1833,'multiline':False]
['text':' restore 'list'','line_number':1843,'multiline':False]
['text':' set the new tabstop','line_number':1846,'multiline':False]
['text':' If 'vartabstop' is in use or if the value given to retab has more','line_number':1848,'multiline':False]
['text':' than one tabstop then update 'vartabstop'.','line_number':1849,'multiline':False]
['text':' 'vartabstop' wasn't in use and a single value was given to','line_number':1861,'multiline':False]
['text':' retab then update 'tabstop'.','line_number':1862,'multiline':False]
['text':'
 * Get indent level from 'indentexpr'.
 ','line_number':1877,'multiline':True]
['text':' Save and restore cursor position and curswant, in case it was changed','line_number':1893,'multiline':False]
['text':' via :normal commands','line_number':1894,'multiline':False]
['text':' Need to make a copy, the 'indentexpr' option could be changed while','line_number':1904,'multiline':False]
['text':' evaluating it.','line_number':1905,'multiline':False]
['text':' Restore the cursor position so that 'indentexpr' doesn't need to.','line_number':1918,'multiline':False]
['text':' Pretend to be in Insert mode, allow cursor past end of line for "o"','line_number':1919,'multiline':False]
['text':' command.','line_number':1920,'multiline':False]
['text':' Reset did_throw, unless 'debug' has "throw" and inside a try/catch.','line_number':1929,'multiline':False]
['text':' If there is an error, just keep the current indent.','line_number':1936,'multiline':False]
['text':'
 * When 'p' is present in 'cpoptions, a Vi compatible method is used.
 * The incompatible newer method is quite a bit better at indenting
 * code in lisp-like languages than the traditional one; it's still
 * mostly heuristics however -- Dirk van Deun, dirk@rave.org
 *
 * TODO:
 * Findmatch() should be adapted for lisp, also to make showmatch
 * work correctly: now (v5.3) it seems all C/C++ oriented:
 * - it does not recognize the #\( and #\) notations as character literals
 * - it doesn't know about comments starting with a semicolon
 * - it incorrectly interprets '(' as a character literal
 * All this messes up get_lisp_indent in some rare cases.
 * Update from Sergey Khorev:
 * I tried to fix the first two issues.
 ','line_number':1961,'multiline':True]
['text':' Set vi_lisp to use the vi-compatible method','line_number':1988,'multiline':False]
['text':' Extra trick: Take the indent of the first previous non-white','line_number':2005,'multiline':False]
['text':' line that is at the same () level.','line_number':2006,'multiline':False]
['text':' skipping escaped characters in the string','line_number':2032,'multiline':False]
['text':' Some keywords require "body" indenting rules (the','line_number':2084,'multiline':False]
['text':' non-standard-lisp ones are Scheme special forms):','line_number':2085,'multiline':False]
['text':'','line_number':2086,'multiline':False]
['text':' (let ((a 1))    instead    (let ((a 1))','line_number':2087,'multiline':False]
['text':'   (...))	      of	   (...))','line_number':2088,'multiline':False]
['text':' not a comment line','line_number':2113,'multiline':False]
['text':' test *that != '(' to accommodate first let/do','line_number':2115,'multiline':False]
['text':' argument if it is more than one line','line_number':2116,'multiline':False]
['text':' no matching '(' or '[' found, use zero indent','line_number':2172,'multiline':False]
['text':'
 * Re-indent the current line, based on the current contents of it and the
 * surrounding lines. Fixing the cursor position seems really easy -- I'm very
 * confused what all the part that handles Control-T is doing that I'm not.
 * "get_the_indent" should be get_c_indent, get_expr_indent or get_lisp_indent.
 ','line_number':2179,'multiline':True]
['text':' delete the indent if the line stays empty','line_number':2196,'multiline':False]
['text':'
 * Return TRUE if 'indentexpr' should be used for Lisp indenting.
 * Caller may want to check 'autoindent'.
 ','line_number':2199,'multiline':True]
['text':'
 * Fix indent for 'lisp' and 'cindent'.
 ','line_number':2215,'multiline':True]
['text':' no auto-indenting when 'paste' is set','line_number':2222,'multiline':False]
['text':'
 * "indent()" function
 ','line_number':2235,'multiline':True]
['text':'
 * "lispindent(lnum)" function
 ','line_number':2257,'multiline':True]
