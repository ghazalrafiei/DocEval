['text':' vi:set ts=8 sts=4 sw=4 noet:
 *
 * VIM - Vi IMproved	by Bram Moolenaar
 *
 * Do ":help uganda"  in Vim to read a list of people who contributed.
 * Do ":help credits" in Vim to see a list of people who contributed.
 * See README.txt for an overview of the Vim source code.
 ','line_number':1,'multiline':True]
['text':' non-existing window','line_number':69,'multiline':False]
['text':' flags for win_enter_ext()','line_number':73,'multiline':False]
['text':' When non-zero splitting a window is forbidden.  Used to avoid that nasty','line_number':83,'multiline':False]
['text':' autocommands mess up the window structure.','line_number':84,'multiline':False]
['text':' When non-zero closing a window is forbidden.  Used to avoid that nasty','line_number':87,'multiline':False]
['text':' autocommands mess up the window structure.','line_number':88,'multiline':False]
['text':'
 * Disallow changing the window layout (split window, close window, move
 * window).  Resizing is still allowed.
 * Used for autocommands that temporarily use another window and need to
 * make sure the previously selected window is still there.
 * Must be matched with exactly one call to window_layout_unlock()!
 ','line_number':91,'multiline':True]
['text':'
 * When the window layout cannot be changed give an error and return TRUE.
 * "cmd" indicates the action being performed and is used to pick the relevant
 * error message.
 ','line_number':112,'multiline':True]
['text':' #define WIN_DEBUG','line_number':131,'multiline':False]
['text':'
 * Call this method to log the current window layout.
 ','line_number':133,'multiline':True]
['text':'
 * Return the current window, unless in the cmdline window and "prevwin" is
 * set, then return "prevwin".
 ','line_number':159,'multiline':True]
['text':' In cmdwin, the alternative buffer should be used.','line_number':166,'multiline':False]
['text':'
 * If the 'switchbuf' option contains "useopen" or "usetab", then try to jump
 * to a window containing "buf".
 * Returns the pointer to the window that was jumped to or NULL.
 ','line_number':170,'multiline':True]
['text':' If 'switchbuf' contains "useopen": jump to first window in the current','line_number':183,'multiline':False]
['text':' tab page containing "buf" if one exists.','line_number':184,'multiline':False]
['text':' If 'switchbuf' contains "usetab": jump to first window in any tab page','line_number':188,'multiline':False]
['text':' containing "buf" if one exists.','line_number':189,'multiline':False]
['text':'
 * All CTRL-W window commands are handled here, called from normal_cmd().
 ','line_number':196,'multiline':True]
['text':' extra char from ":wincmd gx" or NUL','line_number':203,'multiline':False]
['text':' split current window in two parts, horizontally','line_number':231,'multiline':False]
['text':' stop Visual mode','line_number':236,'multiline':False]
['text':' When splitting the quickfix window open a new buffer in it,','line_number':237,'multiline':False]
['text':' don't replicate the quickfix buffer.','line_number':238,'multiline':False]
['text':' split current window in two parts, vertically','line_number':247,'multiline':False]
['text':' stop Visual mode','line_number':251,'multiline':False]
['text':' When splitting the quickfix window open a new buffer in it,','line_number':252,'multiline':False]
['text':' don't replicate the quickfix buffer.','line_number':253,'multiline':False]
['text':' split current window and edit alternate file','line_number':262,'multiline':False]
['text':' stop Visual mode','line_number':266,'multiline':False]
['text':' open new window','line_number':284,'multiline':False]
['text':' stop Visual mode','line_number':288,'multiline':False]
['text':' window height','line_number':291,'multiline':False]
['text':' quit current window','line_number':303,'multiline':False]
['text':' stop Visual mode','line_number':306,'multiline':False]
['text':' close current window','line_number':311,'multiline':False]
['text':' stop Visual mode','line_number':314,'multiline':False]
['text':' close preview window','line_number':320,'multiline':False]
['text':' stop Visual mode','line_number':324,'multiline':False]
['text':' cursor to preview window','line_number':328,'multiline':False]
['text':' close all but current window','line_number':340,'multiline':False]
['text':' stop Visual mode','line_number':344,'multiline':False]
['text':' cursor to next window with wrap around','line_number':349,'multiline':False]
['text':' cursor to previous window with wrap around','line_number':352,'multiline':False]
['text':' just one window','line_number':355,'multiline':False]
['text':' go to specified window','line_number':359,'multiline':False]
['text':' go to previous window','line_number':371,'multiline':False]
['text':' wrap around','line_number':375,'multiline':False]
['text':' go to next window','line_number':377,'multiline':False]
['text':' wrap around','line_number':381,'multiline':False]
['text':' cursor to window below','line_number':388,'multiline':False]
['text':' cursor to window above','line_number':396,'multiline':False]
['text':' cursor to left window','line_number':404,'multiline':False]
['text':' cursor to right window','line_number':413,'multiline':False]
['text':' move window to new tab page','line_number':421,'multiline':False]
['text':' First create a new tab with the window, then go back to','line_number':431,'multiline':False]
['text':' the old tab and close the window there.','line_number':432,'multiline':False]
['text':' cursor to top-left window','line_number':447,'multiline':False]
['text':' cursor to bottom-right window','line_number':453,'multiline':False]
['text':' cursor to last accessed (previous) window','line_number':459,'multiline':False]
['text':' exchange current and next window','line_number':468,'multiline':False]
['text':' rotate windows downwards','line_number':475,'multiline':False]
['text':' stop Visual mode','line_number':479,'multiline':False]
['text':' downwards','line_number':480,'multiline':False]
['text':' rotate windows upwards','line_number':483,'multiline':False]
['text':' stop Visual mode','line_number':486,'multiline':False]
['text':' upwards','line_number':487,'multiline':False]
['text':' move window to the very top/bottom/left/right','line_number':490,'multiline':False]
['text':' make all windows the same width and/or height','line_number':501,'multiline':False]
['text':' increase current window height','line_number':513,'multiline':False]
['text':' decrease current window height','line_number':521,'multiline':False]
['text':' set current window height','line_number':529,'multiline':False]
['text':' increase current window width','line_number':538,'multiline':False]
['text':' decrease current window width','line_number':546,'multiline':False]
['text':' set current window width','line_number':554,'multiline':False]
['text':' jump to tag and split window if tag exists (in preview window)','line_number':562,'multiline':False]
['text':' FALLTHROUGH','line_number':571,'multiline':False]
['text':' keep Visual mode, can select words to use as a tag','line_number':575,'multiline':False]
['text':' Execute the command right here, required when "wincmd ]"','line_number':585,'multiline':False]
['text':' was used in a function.','line_number':586,'multiline':False]
['text':' edit file name under cursor in a new window','line_number':591,'multiline':False]
['text':' If 'switchbuf' is set to 'useopen' or 'usetab' and the','line_number':610,'multiline':False]
['text':' file is already opened in a window, then jump to it.','line_number':611,'multiline':False]
['text':' Failed to open the file, close the window','line_number':623,'multiline':False]
['text':' opened for it.','line_number':624,'multiline':False]
['text':' Go to the first occurrence of the identifier under cursor along path in a','line_number':643,'multiline':False]
['text':' new window -- webb','line_number':644,'multiline':False]
['text':' Go to any match','line_number':645,'multiline':False]
['text':' FALLTHROUGH','line_number':648,'multiline':False]
['text':' Go to definition, using 'define'','line_number':649,'multiline':False]
['text':' Make a copy, if the line was changed it will be freed.','line_number':655,'multiline':False]
['text':' Quickfix window only: view the result under the cursor in a new split.','line_number':668,'multiline':False]
['text':' CTRL-W g  extended commands','line_number':677,'multiline':False]
['text':' disallow scrolling here','line_number':682,'multiline':False]
['text':' no mapping for xchar, but allow key codes','line_number':685,'multiline':False]
['text':' FALLTHROUGH','line_number':703,'multiline':False]
['text':' keep Visual mode, can select words to use as a tag','line_number':706,'multiline':False]
['text':' Execute the command right here, required when','line_number':712,'multiline':False]
['text':' "wincmd g}" was used in a function.','line_number':713,'multiline':False]
['text':' CTRL-W gf: "gf" in a new tab page','line_number':718,'multiline':False]
['text':' CTRL-W gF: "gF" in a new tab page','line_number':719,'multiline':False]
['text':' CTRL-W gt: go to next tab page','line_number':724,'multiline':False]
['text':' CTRL-W gT: go to previous tab page','line_number':728,'multiline':False]
['text':' CTRL-W g<Tab>: go to last used tab page','line_number':732,'multiline':False]
['text':'
 * Figure out the address type for ":wincmd".
 ','line_number':748,'multiline':True]
['text':' window size or any count','line_number':802,'multiline':False]
['text':' buffer number','line_number':808,'multiline':False]
['text':' window number','line_number':823,'multiline':False]
['text':' no count','line_number':840,'multiline':False]
['text':'
 * If "split_disallowed" is set give an error and return FAIL.
 * Otherwise return OK.
 ','line_number':859,'multiline':True]
['text':'
 * split the current window, implements CTRL-W s and :split
 *
 * "size" is the height or width for the new window, 0 to use half of current
 * height or width.
 *
 * "flags":
 * WSP_ROOM: require enough room for new window
 * WSP_VERT: vertical split.
 * WSP_TOP:  open window at the top-left of the shell (help window).
 * WSP_BOT:  open window at the bottom-right of the shell (quickfix window).
 * WSP_HELP: creating the help window, keep layout snapshot
 *
 * return FAIL for failure, OK otherwise
 ','line_number':879,'multiline':True]
['text':' When the ":tab" modifier was used open a new tab page instead.','line_number':903,'multiline':False]
['text':' Add flags from ":vertical", ":topleft" and ":botright".','line_number':907,'multiline':False]
['text':' When creating the help window make a snapshot of the window layout.','line_number':915,'multiline':False]
['text':' Otherwise clear the snapshot, it's now invalid.','line_number':916,'multiline':False]
['text':'
 * When "new_wp" is NULL: split the current window in two.
 * When "new_wp" is not NULL: insert this window at the far
 * top/left/right/bottom.
 * Return FAIL for failure, OK otherwise.
 ','line_number':925,'multiline':True]
['text':' Do not redraw here, curwin->w_buffer may be invalid.','line_number':955,'multiline':False]
['text':' add a status line when p_ls == 1 and splitting the first window','line_number':965,'multiline':False]
['text':' May be needed for the scrollbars that are going to change.','line_number':977,'multiline':False]
['text':'
	 * Check if we are able to split the current window and compute its
	 * width.
	 ','line_number':989,'multiline':True]
['text':' Current window requires at least 1 space.','line_number':993,'multiline':False]
['text':' if it doesn't fit in the current window, need win_equal()','line_number':1038,'multiline':False]
['text':' We don't like to take lines for the new window from a','line_number':1042,'multiline':False]
['text':' 'winfixwidth' window.  Take them from a window to the left or right','line_number':1043,'multiline':False]
['text':' instead, if possible. Add one for the separator.','line_number':1044,'multiline':False]
['text':' Only make all windows the same width if one of them (except oldwin)','line_number':1048,'multiline':False]
['text':' is wider than one of the split windows.','line_number':1049,'multiline':False]
['text':'
	 * Check if we are able to split the current window and compute its
	 * height.
	 ','line_number':1072,'multiline':True]
['text':' Current window requires at least 1 space.','line_number':1076,'multiline':False]
['text':' if it doesn't fit in the current window, need win_equal()','line_number':1127,'multiline':False]
['text':' We don't like to take lines for the new window from a','line_number':1131,'multiline':False]
['text':' 'winfixheight' window.  Take them from a window above or below','line_number':1132,'multiline':False]
['text':' instead, if possible.','line_number':1133,'multiline':False]
['text':' Set w_fraction now so that the cursor keeps the same relative','line_number':1136,'multiline':False]
['text':' vertical position using the old height.','line_number':1137,'multiline':False]
['text':' Only make all windows the same height if one of them (except oldwin)','line_number':1148,'multiline':False]
['text':' is higher than one of the split windows.','line_number':1149,'multiline':False]
['text':'
     * allocate new window structure and link it in the window list
     ','line_number':1169,'multiline':True]
['text':' new window below/right of current one','line_number':1178,'multiline':False]
['text':' make the contents of the new window the same as the current one','line_number':1204,'multiline':False]
['text':'
     * Reorganise the tree of frames to insert the new window.
     ','line_number':1208,'multiline':True]
['text':' Need to create a new frame in the tree to make a branch.','line_number':1239,'multiline':False]
['text':' Insert the new frame at the right place in the frame list.','line_number':1262,'multiline':False]
['text':' Set w_fraction now so that the cursor keeps the same relative','line_number':1268,'multiline':False]
['text':' vertical position.','line_number':1269,'multiline':False]
['text':' set height and row of new window to full height','line_number':1285,'multiline':False]
['text':' height and row of new window is same as current window','line_number':1293,'multiline':False]
['text':' "new_size" of the current window goes to the new window, use','line_number':1300,'multiline':False]
['text':' one column for the vertical separator','line_number':1301,'multiline':False]
['text':' Set width of neighbor frame','line_number':1314,'multiline':False]
['text':' new window left of current one','line_number':1321,'multiline':False]
['text':' new window right of current one','line_number':1326,'multiline':False]
['text':' width and column of new window is same as current window','line_number':1333,'multiline':False]
['text':' "new_size" of the current window goes to the new window, use','line_number':1348,'multiline':False]
['text':' one row for the status line','line_number':1349,'multiline':False]
['text':' new window above current one','line_number':1365,'multiline':False]
['text':' new window below current one','line_number':1371,'multiline':False]
['text':' Both windows need redrawing.  Update all status lines, in case they','line_number':1386,'multiline':False]
['text':' show something related to the window count or position.','line_number':1387,'multiline':False]
['text':' Old command/ruler may still be there','line_number':1396,'multiline':False]
['text':' put position back at start of line','line_number':1399,'multiline':False]
['text':'
     * equalize the window sizes.
     ','line_number':1402,'multiline':True]
['text':' Don't change the window height/width to 'winheight' / 'winwidth' if a','line_number':1412,'multiline':False]
['text':' size was given.','line_number':1413,'multiline':False]
['text':' When 'guioptions' includes 'L' or 'R' may have to add scrollbars.','line_number':1421,'multiline':False]
['text':'
     * make the new window the current window
     ','line_number':1433,'multiline':True]
['text':'
 * Initialize window "newp" from window "oldp".
 * Used when splitting a window and when creating a new tab page.
 * The windows will both edit the same buffer.
 * WSP_NEWLOC may be specified in flags to prevent the location list from
 * being copied.
 ','line_number':1451,'multiline':True]
['text':' Don't copy the location list.','line_number':1487,'multiline':False]
['text':' copy tagstack and folds','line_number':1508,'multiline':False]
['text':' Keep same changelist position in new window.','line_number':1521,'multiline':False]
['text':'
 * Initialize window "newp" from window "old".
 * Only the essential things are copied.
 ','line_number':1534,'multiline':True]
['text':' Use the same argument list.','line_number':1541,'multiline':False]
['text':' copy options from existing window','line_number':1546,'multiline':False]
['text':'
 * Return TRUE if "win" is a global popup or a popup in the current tab page.
 ','line_number':1550,'multiline':True]
['text':'
 * Check if "win" is a pointer to an existing window in the current tab page.
 ','line_number':1569,'multiline':True]
['text':'
 * Find window "id" in the current tab page.
 * Also find popup windows.
 * Return NULL if not found.
 ','line_number':1585,'multiline':True]
['text':'
 * Check if "win" is a pointer to an existing window in any tab page.
 ','line_number':1609,'multiline':True]
['text':'
 * Return the number of windows.
 ','line_number':1636,'multiline':True]
['text':'
 * Make "count" windows on the screen.
 * Return actual number of windows on the screen.
 * Must be called when there is just one window, filling the whole screen
 * (excluding the command line).
 ','line_number':1650,'multiline':True]
['text':' split windows vertically if TRUE','line_number':1659,'multiline':False]
['text':' Each window needs at least 'winminwidth' lines and a separator','line_number':1666,'multiline':False]
['text':' column.','line_number':1667,'multiline':False]
['text':' Each window needs at least 'winminheight' lines and a status line.','line_number':1673,'multiline':False]
['text':'
     * add status line now, otherwise first window will be too big
     ','line_number':1683,'multiline':True]
['text':'
     * Don't execute autocommands while creating the windows.  Must do that
     * when putting the buffers in the windows.
     ','line_number':1689,'multiline':True]
['text':' todo is number of windows left to create','line_number':1695,'multiline':False]
['text':' return actual number of windows','line_number':1713,'multiline':False]
['text':'
 * Exchange current and next window
 ','line_number':1717,'multiline':True]
['text':' just one window','line_number':1731,'multiline':False]
['text':'
     * find window to exchange with
     ','line_number':1746,'multiline':True]
['text':' Swap with next','line_number':1755,'multiline':False]
['text':' Swap last window in row/col with previous','line_number':1757,'multiline':False]
['text':' We can only exchange a window with another window, not with a frame','line_number':1760,'multiline':False]
['text':' containing windows.','line_number':1761,'multiline':False]
['text':'
 * 1. remove curwin from the list. Remember after which window it was in wp2
 * 2. insert curwin before wp in the list
 * if wp != wp2
 *    3. remove wp from the list
 *    4. insert wp after wp2
 * 5. exchange the status line height and vsep width.
 ','line_number':1766,'multiline':True]
['text':' recompute window positions','line_number':1805,'multiline':False]
['text':'
 * rotate windows: if upwards TRUE the second window becomes the first one
 *		   if upwards FALSE the first window becomes the second one
 ','line_number':1816,'multiline':True]
['text':' nothing to do','line_number':1828,'multiline':False]
['text':' Check if all frames in this row/col have one window.','line_number':1838,'multiline':False]
['text':' first window becomes last window','line_number':1848,'multiline':False]
['text':' remove first window/frame from the list','line_number':1850,'multiline':False]
['text':' find last frame and append removed window/frame after it','line_number':1856,'multiline':False]
['text':' previously last window','line_number':1862,'multiline':False]
['text':' last window becomes first window','line_number':1864,'multiline':False]
['text':' find last window/frame in the list and remove it','line_number':1866,'multiline':False]
['text':' will become last window','line_number':1871,'multiline':False]
['text':' append the removed window/frame before the first in the list','line_number':1875,'multiline':False]
['text':' exchange status height and vsep width of old and new last window','line_number':1880,'multiline':False]
['text':' recompute w_winrow and w_wincol for all windows','line_number':1892,'multiline':False]
['text':'
 * Move the current window to the very top/bottom/left/right of the screen.
 ','line_number':1899,'multiline':True]
['text':' Remove the window and frame from the tree of frames.','line_number':1916,'multiline':False]
['text':' may need to remove last status line','line_number':1919,'multiline':False]
['text':' recompute window positions','line_number':1920,'multiline':False]
['text':' Split a window on the desired side and put the window there.','line_number':1922,'multiline':False]
['text':' When 'guioptions' includes 'L' or 'R' may have to remove or add','line_number':1932,'multiline':False]
['text':' scrollbars.  Have to update them anyway.','line_number':1933,'multiline':False]
['text':'
 * Move window "win1" to below/right of "win2" and make "win1" the current
 * window.  Only works within the same frame!
 ','line_number':1938,'multiline':True]
['text':' check if the arguments are reasonable','line_number':1947,'multiline':False]
['text':' check if there is something to do','line_number':1951,'multiline':False]
['text':' may need to move the status line/vertical separator of the last','line_number':1960,'multiline':False]
['text':' window','line_number':1961,'multiline':False]
['text':' Remove the vertical separator from the last-but-one window,','line_number':1969,'multiline':False]
['text':' add it to the last window.  Adjust the frame widths.','line_number':1970,'multiline':False]
['text':' Remove the vertical separator from win1, add it to the last','line_number':1984,'multiline':False]
['text':' window, win2.  Adjust the frame widths.','line_number':1985,'multiline':False]
['text':' recompute w_winrow for all windows','line_number':1997,'multiline':False]
['text':'
 * Make all windows the same height.
 * 'next_curwin' will soon be the current window, make sure it has enough
 * rows.
 ','line_number':2003,'multiline':True]
['text':' pointer to current window to be or NULL','line_number':2010,'multiline':False]
['text':' do only frame with current window','line_number':2011,'multiline':False]
['text':' 'v' for vertically, 'h' for horizontally,','line_number':2012,'multiline':False]
['text':' 'b' for both, 0 for using p_ead','line_number':2013,'multiline':False]
['text':'
 * Set a frame to a new position and height, spreading the available room
 * equally over contained frames.
 * The window "next_curwin" (if not NULL) should at least get the size from
 * 'winheight' and 'winwidth' if possible.
 ','line_number':2024,'multiline':True]
['text':' pointer to current window to be or NULL','line_number':2032,'multiline':False]
['text':' do only frame with current window','line_number':2033,'multiline':False]
['text':' frame to set size off','line_number':2034,'multiline':False]
['text':' 'v', 'h' or 'b', see win_equal()','line_number':2035,'multiline':False]
['text':' horizontal position for frame','line_number':2036,'multiline':False]
['text':' vertical position for frame','line_number':2037,'multiline':False]
['text':' new width of frame','line_number':2038,'multiline':False]
['text':' new height of frame','line_number':2039,'multiline':False]
['text':' Set the width/height of this frame.','line_number':2053,'multiline':False]
['text':' Redraw when size or position changes','line_number':2054,'multiline':False]
['text':' equalize frame widths','line_number':2071,'multiline':False]
['text':' Compute the maximum number of windows horizontally in this','line_number':2073,'multiline':False]
['text':' frame.','line_number':2074,'multiline':False]
['text':' add one for the rightmost window, it doesn't have a separator','line_number':2076,'multiline':False]
['text':'
	     * Compute width for "next_curwin" window and room available for
	     * other windows.
	     * "m" is the minimal width when counting p_wiw for "next_curwin".
	     ','line_number':2084,'multiline':True]
['text':' If 'winfixwidth' set keep the window width if possible.','line_number':2103,'multiline':False]
['text':' Watch out for this window being the next_curwin.','line_number':2104,'multiline':False]
['text':' These windows don't use up room.','line_number':2115,'multiline':False]
['text':' Can make all windows wider than 'winwidth', spread','line_number':2134,'multiline':False]
['text':' the room equally.','line_number':2135,'multiline':False]
['text':' don't count curwin','line_number':2147,'multiline':False]
['text':' last frame gets all that remains (avoid roundoff error)','line_number':2154,'multiline':False]
['text':' doesn't count as a sizeable window','line_number':2161,'multiline':False]
['text':' Compute the maximum number of windows horiz. in "fr".','line_number':2165,'multiline':False]
['text':' don't count next_curwin','line_number':2174,'multiline':False]
['text':' add next_curwin size','line_number':2181,'multiline':False]
['text':' Skip frame that is full width when splitting or closing a','line_number':2194,'multiline':False]
['text':' window, unless equalizing all frames.','line_number':2195,'multiline':False]
['text':' topfr->fr_layout == FR_COL','line_number':2206,'multiline':False]
['text':' equalize frame heights','line_number':2211,'multiline':False]
['text':' Compute maximum number of windows vertically in this frame.','line_number':2213,'multiline':False]
['text':' add one for the bottom window if it doesn't have a statusline','line_number':2215,'multiline':False]
['text':'
	     * Compute height for "next_curwin" window and room available for
	     * other windows.
	     * "m" is the minimal height when counting p_wh for "next_curwin".
	     ','line_number':2223,'multiline':True]
['text':' The room is less than 'winheight', use all space for the','line_number':2232,'multiline':False]
['text':' current window.','line_number':2233,'multiline':False]
['text':' If 'winfixheight' set keep the window height if','line_number':2244,'multiline':False]
['text':' possible.','line_number':2245,'multiline':False]
['text':' Watch out for this window being the next_curwin.','line_number':2246,'multiline':False]
['text':' These windows don't use up room.','line_number':2257,'multiline':False]
['text':' can make all windows higher than 'winheight',','line_number':2276,'multiline':False]
['text':' spread the room equally.','line_number':2277,'multiline':False]
['text':' don't count curwin','line_number':2289,'multiline':False]
['text':' last frame gets all that remains (avoid roundoff error)','line_number':2296,'multiline':False]
['text':' doesn't count as a sizeable window','line_number':2303,'multiline':False]
['text':' Compute the maximum number of windows vert. in "fr".','line_number':2307,'multiline':False]
['text':' don't count next_curwin','line_number':2316,'multiline':False]
['text':' add next_curwin size','line_number':2323,'multiline':False]
['text':' Skip frame that is full width when splitting or closing a','line_number':2333,'multiline':False]
['text':' window, unless equalizing all frames.','line_number':2334,'multiline':False]
['text':' Only matters for a prompt window.','line_number':2351,'multiline':False]
['text':' When leaving a prompt window stop Insert mode and perhaps restart','line_number':2355,'multiline':False]
['text':' it when entering that window again.','line_number':2356,'multiline':False]
['text':' unshow mode later','line_number':2359,'multiline':False]
['text':' When leaving the window (or closing the window) was done from a','line_number':2362,'multiline':False]
['text':' callback we need to break out of the Insert mode loop and restart Insert','line_number':2363,'multiline':False]
['text':' mode when entering the window again.','line_number':2364,'multiline':False]
['text':' Only matters for a prompt window.','line_number':2376,'multiline':False]
['text':' When switching to a prompt buffer that was in Insert mode, don't stop','line_number':2380,'multiline':False]
['text':' Insert mode, it may have been set in leaving_window().','line_number':2381,'multiline':False]
['text':' When entering the prompt window restart Insert mode if we were in Insert','line_number':2385,'multiline':False]
['text':' mode when we left it and not already in Insert mode.','line_number':2386,'multiline':False]
['text':' pcmark not cleared but set to line 1','line_number':2400,'multiline':False]
['text':'
 * Init the current window "curwin".
 * Called when a new file is being edited.
 ','line_number':2417,'multiline':True]
['text':'
 * Close all windows for buffer "buf".
 ','line_number':2427,'multiline':True]
['text':' don't close "curwin"','line_number':2433,'multiline':False]
['text':' If closing the window fails give up, to avoid looping','line_number':2447,'multiline':False]
['text':' forever.','line_number':2448,'multiline':False]
['text':' Start all over, autocommands may change the window layout.','line_number':2451,'multiline':False]
['text':' Also check windows in other tab pages.','line_number':2458,'multiline':False]
['text':' Start all over, the tab page may be closed and','line_number':2469,'multiline':False]
['text':' autocommands may change the window layout.','line_number':2470,'multiline':False]
['text':'
 * Return TRUE if the current window is the only window that exists (ignoring
 * "aucmd_win[]").
 * Returns FALSE if there is a window, possibly in another tab page.
 ','line_number':2483,'multiline':True]
['text':'
 * Return TRUE if there is only one window other than "aucmd_win[]" in the
 * current tab page.
 ','line_number':2494,'multiline':True]
['text':'
 * Close the possibly last window in a tab page.
 * Returns TRUE when the window was closed already.
 ','line_number':2516,'multiline':True]
['text':'
     * Closing the last window in a tab page.  First go to another tab
     * page and then close the window and the tab page.  This avoids that
     * curwin and curtab are invalid while we are freeing memory, they may
     * be used in GUI events.
     * Don't trigger autocommands yet, they may use wrong values, so do
     * that below.
     ','line_number':2531,'multiline':True]
['text':' Safety check: Autocommands may have closed the window when jumping','line_number':2541,'multiline':False]
['text':' to the other tab page.','line_number':2542,'multiline':False]
['text':' Since goto_tabpage_tp above did not trigger *Enter autocommands, do','line_number':2548,'multiline':False]
['text':' that now.','line_number':2549,'multiline':False]
['text':'
 * Close the buffer of "win" and unload it if "action" is DOBUF_UNLOAD.
 * "action" can also be zero (do nothing) or DOBUF_WIPE.
 * "abort_if_last" is passed to close_buffer(): abort closing if all other
 * windows are closed.
 ','line_number':2558,'multiline':True]
['text':' Free independent synblock before the buffer is freed.','line_number':2568,'multiline':False]
['text':' When a quickfix/location list window is closed and the buffer is','line_number':2574,'multiline':False]
['text':' displayed in only one window, then unlist the buffer.','line_number':2575,'multiline':False]
['text':' Close the link to the buffer.','line_number':2581,'multiline':False]
['text':' Make sure curbuf is valid. It can become invalid if 'bufhidden' is','line_number':2591,'multiline':False]
['text':' "wipe".','line_number':2592,'multiline':False]
['text':'
 * Close window "win".  Only works for the current tab page.
 * If "free_buf" is TRUE related buffer may be unloaded.
 *
 * Called by :quit, :close, :xit, :wq and findtag().
 * Returns FAIL when the window was not closed.
 ','line_number':2598,'multiline':True]
['text':' Can close a popup window with a terminal if the job has finished.','line_number':2623,'multiline':False]
['text':' window is already being closed','line_number':2640,'multiline':False]
['text':' When closing the last window in a tab page first go to another tab page','line_number':2652,'multiline':False]
['text':' and then close the window and the tab page to avoid that curwin and','line_number':2653,'multiline':False]
['text':' curtab are invalid while we are freeing memory.','line_number':2654,'multiline':False]
['text':' When closing the help window, try restoring a snapshot after closing','line_number':2658,'multiline':False]
['text':' the window.  Otherwise clear the snapshot, it's now invalid.','line_number':2659,'multiline':False]
['text':'
	 * Guess which window is going to be the new current window.
	 * This may change because of the autocommands (sigh).
	 ','line_number':2670,'multiline':True]
['text':'
	 * Be careful: If autocommands delete the window or cause this window
	 * to be the last one left, return now.
	 ','line_number':2676,'multiline':True]
['text':' stop Visual mode','line_number':2682,'multiline':False]
['text':' autocmds may abort script processing','line_number':2703,'multiline':False]
['text':' Avoid trouble with scrollbars that are going to be deleted in','line_number':2710,'multiline':False]
['text':' win_free().','line_number':2711,'multiline':False]
['text':' Trigger WinClosed just before starting to free window-related resources.','line_number':2721,'multiline':False]
['text':' autocmd may have freed the window already.','line_number':2723,'multiline':False]
['text':' Autocommands have closed all windows, quit now.  Restore','line_number':2733,'multiline':False]
['text':' curwin->w_buffer, otherwise writing viminfo may fail.','line_number':2734,'multiline':False]
['text':' Autocommands may have moved to another tab page.','line_number':2740,'multiline':False]
['text':' Need to close the window anyway, since the buffer is NULL.','line_number':2744,'multiline':False]
['text':' Don't trigger autocmds with a NULL buffer.','line_number':2745,'multiline':False]
['text':' Autocommands may have closed the window already or closed the only','line_number':2752,'multiline':False]
['text':' other window.','line_number':2753,'multiline':False]
['text':' Now we are really going to close the window.  Disallow any autocommand','line_number':2758,'multiline':False]
['text':' to split a window to avoid trouble.','line_number':2759,'multiline':False]
['text':' Also bail out of parse_queued_messages() to avoid it tries to update the','line_number':2760,'multiline':False]
['text':' screen.','line_number':2761,'multiline':False]
['text':' Free the memory used for the window and get the window that received','line_number':2767,'multiline':False]
['text':' the screen space.','line_number':2768,'multiline':False]
['text':' Closing the help window moves the cursor back to the current window','line_number':2773,'multiline':False]
['text':' of the snapshot.','line_number':2774,'multiline':False]
['text':' Make sure curwin isn't invalid.  It can cause severe trouble when','line_number':2781,'multiline':False]
['text':' printing an error message.  For win_equal() curbuf needs to be valid','line_number':2782,'multiline':False]
['text':' too.','line_number':2783,'multiline':False]
['text':'
	     * If the cursor goes to the preview or the quickfix window, try
	     * finding another window to go to.
	     ','line_number':2790,'multiline':True]
['text':' The cursor position may be invalid if the buffer changed after last','line_number':2813,'multiline':False]
['text':' using the window.','line_number':2814,'multiline':False]
['text':'
     * If last window has a status line now and we don't want one, remove the
     * status line.  Do this before win_equal(), because it may change the
     * height of a window
     ','line_number':2818,'multiline':True]
['text':' If the frame of the closed window contains the new current window,','line_number':2826,'multiline':False]
['text':' only resize that frame.  Otherwise resize all windows.','line_number':2827,'multiline':False]
['text':' Pass WEE_ALLOW_PARSE_MESSAGES to decrement dont_parse_messages','line_number':2836,'multiline':False]
['text':' before autocommands.','line_number':2837,'multiline':False]
['text':' careful: after this wp and win may be invalid!','line_number':2847,'multiline':False]
['text':' After closing the help window, try restoring the window layout from','line_number':2857,'multiline':False]
['text':' before it was opened.','line_number':2858,'multiline':False]
['text':' If the window had 'diff' set and now there is only one window left in','line_number':2863,'multiline':False]
['text':' the tab page with 'diff' set, and "closeoff" is in 'diffopt', then','line_number':2864,'multiline':False]
['text':' execute ":diffoff!".','line_number':2865,'multiline':False]
['text':' When 'guioptions' includes 'L' or 'R' may have to remove scrollbars.','line_number':2880,'multiline':False]
['text':'
 * Make a snapshot of all the window scroll positions and sizes of the current
 * tab page.
 ','line_number':2903,'multiline':True]
['text':'
 * Create a dictionary with information about size and scroll changes in a
 * window.
 * Returns the dictionary with refcount set to one.
 * Returns NULL when out of memory.
 ','line_number':2937,'multiline':True]
['text':' not actually looping, for breaking out on error','line_number':2959,'multiline':False]
['text':' Return values of check_window_scroll_resize():','line_number':2995,'multiline':False]
['text':' at least one window scrolled','line_number':2996,'multiline':False]
['text':' at least one window size changed','line_number':2997,'multiline':False]
['text':'
 * This function is used for three purposes:
 * 1. Goes over all windows in the current tab page and returns:
 *	0				no scrolling and no size changes found
 *	CWSR_SCROLLED			at least one window scrolled
 *	CWSR_RESIZED			at least one window changed size
 *	CWSR_SCROLLED + CWSR_RESIZED	both
 *    "size_count" is set to the nr of windows with size changes.
 *    "first_scroll_win" is set to the first window with any relevant changes.
 *    "first_size_win" is set to the first window with size changes.
 *
 * 2. When the first three arguments are NULL and "winlist" is not NULL,
 *    "winlist" is set to the list of window IDs with size changes.
 *
 * 3. When the first three arguments are NULL and "v_event" is not NULL,
 *    information about changed windows is added to "v_event".
 ','line_number':2999,'multiline':True]
['text':' Add this window to the list of changed windows.','line_number':3048,'multiline':False]
['text':' For WinScrolled the first window with a size change is used','line_number':3062,'multiline':False]
['text':' even when it didn't scroll.','line_number':3063,'multiline':False]
['text':' Add info about this window to the v:event dictionary.','line_number':3085,'multiline':False]
['text':'
 * Trigger WinScrolled and/or WinResized if any window in the current tab page
 * scrolled or changed size.
 ','line_number':3143,'multiline':True]
['text':' Do not trigger WinScrolled or WinResized recursively.  Do not trigger','line_number':3154,'multiline':False]
['text':' before the initial snapshot of the w_last_ values was made.','line_number':3155,'multiline':False]
['text':' no relevant changes','line_number':3169,'multiline':False]
['text':' Create the list for v:event.windows before making the snapshot.','line_number':3174,'multiline':False]
['text':' Create the dict with entries for v:event before making the snapshot.','line_number':3182,'multiline':False]
['text':' WinScrolled/WinResized are triggered only once, even when multiple','line_number':3193,'multiline':False]
['text':' windows scrolled or changed size.  Store the current values before','line_number':3194,'multiline':False]
['text':' triggering the event, if a scroll or resize happens as a side effect','line_number':3195,'multiline':False]
['text':' then WinScrolled/WinResized is triggered for that later.','line_number':3196,'multiline':False]
['text':' "curwin" may be different from the actual current window, make','line_number':3199,'multiline':False]
['text':' sure it can be restored.','line_number':3200,'multiline':False]
['text':' If both are to be triggered do WinResized first.','line_number':3204,'multiline':False]
['text':' Move the entries from scroll_dict to v_event.','line_number':3236,'multiline':False]
['text':'
 * Close window "win" in tab page "tp", which is not the current tab page.
 * This may be the last window in that tab page and result in closing the tab,
 * thus "tp" may become invalid!
 * Caller must check if buffer is hidden and whether the tabline needs to be
 * updated.
 ','line_number':3255,'multiline':True]
['text':' Get here with win->w_buffer == NULL when win_close() detects the tab','line_number':3270,'multiline':False]
['text':' page changed.','line_number':3271,'multiline':False]
['text':' window is already being closed','line_number':3274,'multiline':False]
['text':' Trigger WinClosed just before starting to free window-related resources.','line_number':3276,'multiline':False]
['text':' autocmd may have freed the window already.','line_number':3278,'multiline':False]
['text':' Close the link to the buffer.','line_number':3283,'multiline':False]
['text':' Careful: Autocommands may have closed the tab page or made it the','line_number':3287,'multiline':False]
['text':' current tab page.','line_number':3288,'multiline':False]
['text':' If the buffer was removed from the window we have to give it any','line_number':3293,'multiline':False]
['text':' buffer.','line_number':3294,'multiline':False]
['text':' Autocommands may have closed the window already.','line_number':3304,'multiline':False]
['text':' When closing the last window in a tab page remove the tab page.','line_number':3310,'multiline':False]
['text':' Free the memory used for the window.','line_number':3335,'multiline':False]
['text':'
 * Free the memory used for a window.
 * Returns a pointer to the window that got the freed up space.
 ','line_number':3342,'multiline':True]
['text':' set to 'v' or 'h' for direction if 'ea'','line_number':3349,'multiline':False]
['text':' tab page "win" is in, NULL for current','line_number':3350,'multiline':False]
['text':' Remove the window and its frame from the tree of frames.','line_number':3356,'multiline':False]
['text':' When deleting the current window in the tab, select a new current','line_number':3362,'multiline':False]
['text':' window.','line_number':3363,'multiline':False]
['text':' avoid an error for switching tabpage with the cmdline window open','line_number':3376,'multiline':False]
['text':' No window should be used after this. Set curwin to NULL to crash','line_number':3392,'multiline':False]
['text':' instead of using freed memory.','line_number':3393,'multiline':False]
['text':'
 * Remove a window and its frame from the tree of frames.
 * Returns a pointer to the window that got the freed up space.
 ','line_number':3398,'multiline':True]
['text':' set to 'v' or 'h' for direction if 'ea'','line_number':3405,'multiline':False]
['text':' tab page "win" is in, NULL for current','line_number':3406,'multiline':False]
['text':'
     * If there is only one window there is nothing to remove.
     ','line_number':3412,'multiline':True]
['text':'
     * Remove the window from its frame.
     ','line_number':3418,'multiline':True]
['text':' Remove this frame from the list of frames.','line_number':3424,'multiline':False]
['text':' When 'winfixheight' is set, try to find another frame in the column','line_number':3429,'multiline':False]
['text':' (as close to the closed frame as possible) to distribute the height','line_number':3430,'multiline':False]
['text':' to.','line_number':3431,'multiline':False]
['text':' When 'winfixwidth' is set, try to find another frame in the column','line_number':3466,'multiline':False]
['text':' (as close to the closed frame as possible) to distribute the width','line_number':3467,'multiline':False]
['text':' to.','line_number':3468,'multiline':False]
['text':' If rows/columns go to a window below/right its positions need to be','line_number':3502,'multiline':False]
['text':' updated.  Can only be done after the sizes have been updated.','line_number':3503,'multiline':False]
['text':' There is no other frame in this list, move its info to the parent','line_number':3514,'multiline':False]
['text':' and remove it.','line_number':3515,'multiline':False]
['text':' The frame above the parent has the same layout, have to merge','line_number':3531,'multiline':False]
['text':' the frames into this list.','line_number':3532,'multiline':False]
['text':'
 * Return a pointer to the frame that will receive the empty screen space that
 * is left over after "win" is closed.
 *
 * If 'splitbelow' or 'splitright' is set, the space goes above or to the left
 * by default.  Otherwise, the free space goes below or to the right.  The
 * result is that opening a window and then immediately closing it will
 * preserve the initial window layout.  The 'wfh' and 'wfw' settings are
 * respected when possible.
 ','line_number':3558,'multiline':True]
['text':' tab page "win" is in, NULL for current','line_number':3571,'multiline':False]
['text':' By default the next window will get the space that was abandoned by this','line_number':3586,'multiline':False]
['text':' window','line_number':3587,'multiline':False]
['text':' If this is part of a column of windows and 'splitbelow' is true then the','line_number':3591,'multiline':False]
['text':' previous window will get the space.','line_number':3592,'multiline':False]
['text':' If this is part of a row of windows, and 'splitright' is true then the','line_number':3599,'multiline':False]
['text':' previous window will get the space.','line_number':3600,'multiline':False]
['text':' If 'wfh' or 'wfw' is set for the target and not for the alternate','line_number':3607,'multiline':False]
['text':' window, reverse the selection.','line_number':3608,'multiline':False]
['text':'
 * Return the tabpage that will be used if the current one is closed.
 ','line_number':3623,'multiline':True]
['text':' Use the next tab page if possible.','line_number':3631,'multiline':False]
['text':' Find the last but one tab page.','line_number':3635,'multiline':False]
['text':'
 * Find the left-upper window in frame "frp".
 ','line_number':3641,'multiline':True]
['text':'
 * Return TRUE if frame "frp" contains window "wp".
 ','line_number':3652,'multiline':True]
['text':'
 * Set a new height for a frame.  Recursively sets the height for contained
 * frames and windows.  Caller must take care of positions.
 ','line_number':3669,'multiline':True]
['text':' resize topmost contained frame first','line_number':3677,'multiline':False]
['text':' obey 'winfixheight' when there is a choice;','line_number':3678,'multiline':False]
['text':' may cause the height not to be set','line_number':3679,'multiline':False]
['text':' Simple case: just one window.','line_number':3687,'multiline':False]
['text':' All frames in this row get the same new height.','line_number':3696,'multiline':False]
['text':' Could not fit the windows, make the whole row higher.','line_number':3702,'multiline':False]
['text':' fr_layout == FR_COL','line_number':3710,'multiline':False]
['text':' Complicated case: Resize a column of frames.  Resize the bottom','line_number':3712,'multiline':False]
['text':' frame first, frames above that when needed.','line_number':3713,'multiline':False]
['text':' Advance past frames with one window with 'wfh' set.','line_number':3717,'multiline':False]
['text':' no frame without 'wfh', give up','line_number':3722,'multiline':False]
['text':' Find the bottom frame of this column','line_number':3726,'multiline':False]
['text':' Advance back for frames with one window with 'wfh' set.','line_number':3730,'multiline':False]
['text':' reduce height of contained frames, bottom or top frame first','line_number':3738,'multiline':False]
['text':' Increase "height" if we could not reduce enough frames.','line_number':3765,'multiline':False]
['text':' increase height of bottom or top frame','line_number':3772,'multiline':False]
['text':'
 * Return TRUE if height of frame "frp" should not be changed because of
 * the 'winfixheight' option.
 ','line_number':3779,'multiline':True]
['text':' frame with one window: fixed height if 'winfixheight' set.','line_number':3786,'multiline':False]
['text':' The frame is fixed height if one of the frames in the row is fixed','line_number':3792,'multiline':False]
['text':' height.','line_number':3793,'multiline':False]
['text':' frp->fr_layout == FR_COL: The frame is fixed height if all of the','line_number':3800,'multiline':False]
['text':' frames in the row are fixed height.','line_number':3801,'multiline':False]
['text':'
 * Return TRUE if width of frame "frp" should not be changed because of
 * the 'winfixwidth' option.
 ','line_number':3808,'multiline':True]
['text':' frame with one window: fixed width if 'winfixwidth' set.','line_number':3815,'multiline':False]
['text':' The frame is fixed width if one of the frames in the row is fixed','line_number':3821,'multiline':False]
['text':' width.','line_number':3822,'multiline':False]
['text':' frp->fr_layout == FR_ROW: The frame is fixed width if all of the','line_number':3829,'multiline':False]
['text':' frames in the row are fixed width.','line_number':3830,'multiline':False]
['text':'
 * Add a status line to windows at the bottom of "frp".
 * Note: Does not check if there is room!
 ','line_number':3837,'multiline':True]
['text':' Handle all the frames in the row.','line_number':3853,'multiline':False]
['text':' frp->fr_layout == FR_COL','line_number':3857,'multiline':False]
['text':' Only need to handle the last frame in the column.','line_number':3859,'multiline':False]
['text':'
 * Set width of a frame.  Handles recursively going through contained frames.
 * May remove separator line for windows at the right side (for win_close()).
 ','line_number':3866,'multiline':True]
['text':' resize leftmost contained frame first','line_number':3874,'multiline':False]
['text':' obey 'winfixwidth' when there is a choice;','line_number':3875,'multiline':False]
['text':' may cause the width not to be set','line_number':3876,'multiline':False]
['text':' Simple case: just one window.','line_number':3885,'multiline':False]
['text':' Find out if there are any windows right of this one.','line_number':3887,'multiline':False]
['text':' All frames in this column get the same new width.','line_number':3899,'multiline':False]
['text':' Could not fit the windows, make whole column wider.','line_number':3905,'multiline':False]
['text':' fr_layout == FR_ROW','line_number':3912,'multiline':False]
['text':' Complicated case: Resize a row of frames.  Resize the rightmost','line_number':3914,'multiline':False]
['text':' frame first, frames left of it when needed.','line_number':3915,'multiline':False]
['text':' Advance past frames with one window with 'wfw' set.','line_number':3919,'multiline':False]
['text':' no frame without 'wfw', give up','line_number':3924,'multiline':False]
['text':' Find the rightmost frame of this row','line_number':3928,'multiline':False]
['text':' Advance back for frames with one window with 'wfw' set.','line_number':3932,'multiline':False]
['text':' reduce frame width, rightmost frame first','line_number':3940,'multiline':False]
['text':' Increase "width" if we could not reduce enough frames.','line_number':3967,'multiline':False]
['text':' increase width of rightmost frame','line_number':3974,'multiline':False]
['text':'
 * Add the vertical separator to windows at the right side of "frp".
 * Note: Does not check if there is room!
 ','line_number':3981,'multiline':True]
['text':' don't make it negative','line_number':3995,'multiline':False]
['text':' Handle all the frames in the column.','line_number':4002,'multiline':False]
['text':' frp->fr_layout == FR_ROW','line_number':4006,'multiline':False]
['text':' Only need to handle the last frame in the row.','line_number':4008,'multiline':False]
['text':'
 * Set frame width from the window it contains.
 ','line_number':4016,'multiline':True]
['text':'
 * Set frame height from the window it contains.
 ','line_number':4025,'multiline':True]
['text':'
 * Compute the minimal height for frame "topfrp".
 * Uses the 'winminheight' option.
 * When "next_curwin" isn't NULL, use p_wh for this window.
 * When "next_curwin" is NOWIN, don't use at least one line for the current
 * window.
 ','line_number':4034,'multiline':True]
['text':' window: minimal height of the window plus status line','line_number':4054,'multiline':False]
['text':' Current window is minimal one line high and WinBar is','line_number':4058,'multiline':False]
['text':' visible.','line_number':4059,'multiline':False]
['text':' get the minimal height from each frame in this row','line_number':4068,'multiline':False]
['text':' Add up the minimal heights for all frames in this column.','line_number':4079,'multiline':False]
['text':'
 * Compute the minimal width for frame "topfrp".
 * When "next_curwin" isn't NULL, use p_wiw for this window.
 * When "next_curwin" is NOWIN, don't use at least one column for the current
 * window.
 ','line_number':4088,'multiline':True]
['text':' use p_wh and p_wiw for next_curwin','line_number':4097,'multiline':False]
['text':' window: minimal width of the window plus separator column','line_number':4108,'multiline':False]
['text':' Current window is minimal one column wide','line_number':4110,'multiline':False]
['text':' get the minimal width from each frame in this column','line_number':4117,'multiline':False]
['text':' Add up the minimal widths for all frames in this row.','line_number':4128,'multiline':False]
['text':'
 * Try to close all windows except current one.
 * Buffers in the other windows become hidden if 'hidden' is set, or '!' is
 * used and the buffer was modified.
 *
 * Used by ":bdel" and ":only".
 ','line_number':4138,'multiline':True]
['text':' always hide all other windows','line_number':4148,'multiline':False]
['text':' Be very careful here: autocommands may change the window layout.','line_number':4161,'multiline':False]
['text':' don't close current window','line_number':4165,'multiline':False]
['text':' autoccommands messed this one up','line_number':4168,'multiline':False]
['text':' Check if it's allowed to abandon this window','line_number':4175,'multiline':False]
['text':' autocommands messed wp up','line_number':4177,'multiline':False]
['text':' autocommands messed wp up','line_number':4189,'multiline':False]
['text':'
 * Store the relevant window pointers for tab page "tp".  To be used before
 * use_tabpage().
 ','line_number':4206,'multiline':True]
['text':'
 * Set the relevant pointers to use tab page "tp".  May want to call
 * unuse_tabpage() first.
 ','line_number':4219,'multiline':True]
['text':'
 * Allocate the first window and put an empty buffer in it.
 * Called from main().
 * Return FAIL when something goes wrong (out of memory).
 ','line_number':4233,'multiline':True]
['text':'
 * Allocate and init a window that is not a regular window.
 * This can only be done after the first window is fully initialized, thus it
 * can't be in win_alloc_first().
 ','line_number':4253,'multiline':True]
['text':' We need to initialize options with something, using the current','line_number':4266,'multiline':False]
['text':' window makes most sense.','line_number':4267,'multiline':False]
['text':'
 * Initialize window "wp" to display buffer "buf".
 ','line_number':4275,'multiline':True]
['text':' set cursor and topline to safe values','line_number':4283,'multiline':False]
['text':' Make sure w_localdir and globaldir are NULL to avoid a chdir() in','line_number':4285,'multiline':False]
['text':' win_enter_ext().','line_number':4286,'multiline':False]
['text':'
 * Allocate the first window or the first window in a new tab page.
 * When "oldwin" is NULL create an empty buffer for it.
 * When "oldwin" is not NULL copy info from it to the new window.
 * Return FAIL when something goes wrong (out of memory).
 ','line_number':4290,'multiline':True]
['text':' Very first window, need to create an empty buffer for it and','line_number':4304,'multiline':False]
['text':' initialize from scratch.','line_number':4305,'multiline':False]
['text':' there is one window','line_number':4313,'multiline':False]
['text':' init current window','line_number':4315,'multiline':False]
['text':' First window in new tab page, initialize it from "oldwin".','line_number':4319,'multiline':False]
['text':' We don't want cursor- and scroll-binding in the first window.','line_number':4322,'multiline':False]
['text':'
 * Create a frame for window "wp".
 ','line_number':4336,'multiline':True]
['text':'
 * Initialize the window and frame size to the maximum.
 ','line_number':4351,'multiline':True]
['text':'
 * Allocate a new tabpage_T and init the values.
 * Returns NULL when out of memory.
 ','line_number':4364,'multiline':True]
['text':' init t: variables','line_number':4382,'multiline':False]
['text':' free all t: variables','line_number':4419,'multiline':False]
['text':'
 * Create a new Tab page with one window.
 * It will edit the current buffer, like after ":split".
 * When "after" is 0 put it just after the current Tab page.
 * Otherwise put it just before tab page "after".
 * Return FAIL or OK.
 ','line_number':4441,'multiline':True]
['text':' Remember the current windows in this Tab page.','line_number':4468,'multiline':False]
['text':' Create a new empty window.','line_number':4478,'multiline':False]
['text':' Make the new Tab page the new topframe.','line_number':4481,'multiline':False]
['text':' New tab page becomes the first one.','line_number':4484,'multiline':False]
['text':' Put new tab page before tab page "after".','line_number':4492,'multiline':False]
['text':' When 'guioptions' includes 'L' or 'R' may have to remove or add','line_number':4514,'multiline':False]
['text':' scrollbars.  Have to update them anyway.','line_number':4515,'multiline':False]
['text':' Failed, get back the previous Tab page','line_number':4530,'multiline':False]
['text':'
 * Open a new tab page if ":tab cmd" was used.  It will edit the same buffer,
 * like with ":split".
 * Returns OK if a new tab page was created, FAIL otherwise.
 ','line_number':4535,'multiline':True]
['text':' reset it to avoid doing it twice','line_number':4549,'multiline':False]
['text':'
 * Create up to "maxcount" tabpages with empty windows.
 * Returns the number of resulting tab pages.
 ','line_number':4554,'multiline':True]
['text':' Limit to 'tabpagemax' tabs.','line_number':4564,'multiline':False]
['text':'
     * Don't execute autocommands while creating the tab pages.  Must do that
     * when putting the buffers in the windows.
     ','line_number':4568,'multiline':True]
['text':' return actual number of tab pages','line_number':4580,'multiline':False]
['text':'
 * Return TRUE when "tpc" points to a valid tab page.
 ','line_number':4584,'multiline':True]
['text':'
 * Return TRUE when "tpc" points to a valid tab page and at least one window is
 * valid.
 ','line_number':4598,'multiline':True]
['text':' shouldn't happen','line_number':4620,'multiline':False]
['text':'
 * Close tabpage "tab", assuming it has no windows in it.
 * There must be another tabpage or this will crash.
 ','line_number':4624,'multiline':True]
['text':'
 * Find tab page "n" (first one is 1).  Returns NULL when not found.
 ','line_number':4651,'multiline':True]
['text':'
 * Get index of tab page "tp".  First one has index 1.
 * When not found returns number of tab pages plus one.
 ','line_number':4668,'multiline':True]
['text':'
 * Prepare for leaving the current tab page.
 * When autocommands change "curtab" we don't leave the tab page and return
 * FAIL.
 * Careful: When OK is returned need to get a new tab page very very soon!
 ','line_number':4683,'multiline':True]
['text':' what is going to be the new curbuf,','line_number':4691,'multiline':False]
['text':' NULL if unknown','line_number':4692,'multiline':False]
['text':' stop Visual mode','line_number':4700,'multiline':False]
['text':' Remove the scrollbars.  They may be added back later.','line_number':4719,'multiline':False]
['text':'
 * Start using tab page "tp".
 * Only to be used after leave_tabpage() or freeing the current tab page.
 * Only trigger *Enter autocommands when trigger_enter_autocmds is TRUE.
 * Only trigger *Leave autocommands when trigger_leave_autocmds is TRUE.
 ','line_number':4735,'multiline':True]
['text':' We would like doing the TabEnter event first, but we don't have a','line_number':4755,'multiline':False]
['text':' valid current window yet, which may break some commands.','line_number':4756,'multiline':False]
['text':' This triggers autocommands, thus may make "tp" invalid.','line_number':4757,'multiline':False]
['text':' status line may appear or disappear','line_number':4763,'multiline':False]
['text':' recompute w_winrow for all windows','line_number':4764,'multiline':False]
['text':' Use the stored value of p_ch, so that it can be different for each tab','line_number':4769,'multiline':False]
['text':' page.','line_number':4770,'multiline':False]
['text':' When cmdheight is changed in a tab page with '<C-w>-', cmdline_row is','line_number':4775,'multiline':False]
['text':' changed but p_ch and tp_ch_used are not changed. Thus we also need to','line_number':4776,'multiline':False]
['text':' check cmdline_row.','line_number':4777,'multiline':False]
['text':' If there was a click in a window, it won't be usable for a following','line_number':4781,'multiline':False]
['text':' drag.','line_number':4782,'multiline':False]
['text':' The tabpage line may have appeared or disappeared, may need to resize','line_number':4785,'multiline':False]
['text':' the frames for that.  When the Vim window was resized need to update','line_number':4786,'multiline':False]
['text':' frame sizes too.','line_number':4787,'multiline':False]
['text':' update window widths','line_number':4798,'multiline':False]
['text':' update window widths later','line_number':4802,'multiline':False]
['text':' When 'guioptions' includes 'L' or 'R' may have to remove or add','line_number':4808,'multiline':False]
['text':' scrollbars.  Have to update them anyway.','line_number':4809,'multiline':False]
['text':' Apply autocommands after updating the display, when 'rows' and','line_number':4813,'multiline':False]
['text':' 'columns' have been set correctly.','line_number':4814,'multiline':False]
['text':'
 * Go to tab page "n".  For ":tab N" and "Ngt".
 * When "n" is 9999 go to the last tab page.
 ','line_number':4825,'multiline':True]
['text':' shut up compiler','line_number':4832,'multiline':False]
['text':' Not allowed when editing the command line.','line_number':4838,'multiline':False]
['text':' If there is only one it can't work.','line_number':4843,'multiline':False]
['text':' No count, go to next tab page, wrap around end.','line_number':4853,'multiline':False]
['text':' "gT": go to previous tab page, wrap around end.  "N gT" repeats','line_number':4861,'multiline':False]
['text':' this N times.','line_number':4862,'multiline':False]
['text':' Go to last tab page.','line_number':4874,'multiline':False]
['text':' Go to tab page "n".','line_number':4880,'multiline':False]
['text':'
 * Go to tabpage "tp".
 * Only trigger *Enter autocommands when trigger_enter_autocmds is TRUE.
 * Only trigger *Leave autocommands when trigger_leave_autocmds is TRUE.
 * Note: doesn't update the GUI tab.
 ','line_number':4897,'multiline':True]
['text':' Don't repeat a message in another tab page.','line_number':4912,'multiline':False]
['text':'
 * Go to the last accessed tab page, if there is one.
 * Return OK or FAIL
 ','line_number':4929,'multiline':True]
['text':'
 * Enter window "wp" in tab page "tp".
 * Also updates the GUI tab.
 ','line_number':4943,'multiline':True]
['text':'
 * Move the current tab page to after tab page "nr".
 ','line_number':4961,'multiline':True]
['text':' Remove the current tab page from the list of tab pages.','line_number':4982,'multiline':False]
['text':' "cannot happen"','line_number':4990,'multiline':False]
['text':' Re-insert it at the specified position.','line_number':4995,'multiline':False]
['text':' Need to redraw the tabline.  Tab page contents doesn't change.','line_number':5007,'multiline':False]
['text':'
 * Go to another window.
 * When jumping to another buffer, stop Visual mode.  Do this before
 * changing windows so we can yank the selection into the '*' register.
 * (note: this may trigger ModeChanged autocommand!)
 * When jumping to another window on the same buffer, adjust its cursor
 * position to keep the same Visual area.
 ','line_number':5012,'multiline':True]
['text':' careful: triggers ModeChanged autocommand','line_number':5043,'multiline':False]
['text':' autocommand may have made wp invalid','line_number':5048,'multiline':False]
['text':' Conceal cursor line in previous window, unconceal in current window.','line_number':5058,'multiline':False]
['text':'
 * Find window number "winnr" (counting top to bottom).
 ','line_number':5067,'multiline':True]
['text':'
 * Find the tabpage for window "win".
 ','line_number':5083,'multiline':True]
['text':'
 * Get the above or below neighbor window of the specified window.
 *   up - TRUE for the above neighbor
 *   count - nth neighbor window
 * Returns the specified window if the neighbor is not found.
 ','line_number':5099,'multiline':True]
['text':' popups don't have neighbors.','line_number':5114,'multiline':False]
['text':'
	 * First go upwards in the tree of frames until we find a upwards or
	 * downwards neighbor.
	 ','line_number':5120,'multiline':True]
['text':'
	 * Now go downwards to find the bottom or top frame in it.
	 ','line_number':5138,'multiline':True]
['text':' Find the frame at the cursor row.','line_number':5151,'multiline':False]
['text':'
 * Move to window above or below "count" times.
 ','line_number':5167,'multiline':True]
['text':' TRUE to go to win above','line_number':5172,'multiline':False]
['text':'
 * Get the left or right neighbor window of the specified window.
 *   left - TRUE for the left neighbor
 *   count - nth neighbor window
 * Returns the specified window if the neighbor is not found.
 ','line_number':5186,'multiline':True]
['text':' popups don't have neighbors.','line_number':5201,'multiline':False]
['text':'
	 * First go upwards in the tree of frames until we find a left or
	 * right neighbor.
	 ','line_number':5207,'multiline':True]
['text':'
	 * Now go downwards to find the leftmost or rightmost frame in it.
	 ','line_number':5225,'multiline':True]
['text':' Find the frame at the cursor row.','line_number':5238,'multiline':False]
['text':'
 * Move to left or right window.
 ','line_number':5254,'multiline':True]
['text':' TRUE to go to left win','line_number':5259,'multiline':False]
['text':'
 * Make window "wp" the current window.
 ','line_number':5273,'multiline':True]
['text':'
 * Used after making another window the current one: change directory if
 * needed.
 ','line_number':5283,'multiline':True]
['text':' Window or tab has a local directory: Save current directory as','line_number':5294,'multiline':False]
['text':' global directory (unless that was done already) and change to the','line_number':5295,'multiline':False]
['text':' local directory.','line_number':5296,'multiline':False]
['text':' Window doesn't have a local directory and we are not in the global','line_number':5317,'multiline':False]
['text':' directory: Change to the global directory.','line_number':5318,'multiline':False]
['text':'
 * Make window "wp" the current window.
 * Can be called with "flags" containing WEE_CURWIN_INVALID, which means that
 * curwin has just been closed and isn't valid.
 * Returns TRUE when dont_parse_messages was decremented.
 ','line_number':5326,'multiline':True]
['text':' nothing to do','line_number':5339,'multiline':False]
['text':'
	 * Be careful: If autocommands delete the window, return now.
	 ','line_number':5349,'multiline':True]
['text':' autocmds may abort script processing','line_number':5363,'multiline':False]
['text':' sync undo before leaving the current buffer','line_number':5369,'multiline':False]
['text':' Might need to scroll the old window before switching, e.g., when the','line_number':5373,'multiline':False]
['text':' cursor was moved.','line_number':5374,'multiline':False]
['text':' may have to copy the buffer options when 'cpo' contains 'S'','line_number':5378,'multiline':False]
['text':' remember for CTRL-W p','line_number':5383,'multiline':False]
['text':' assume cursor position needs updating','line_number':5391,'multiline':False]
['text':' Make sure the cursor position is valid, either by moving the cursor','line_number':5394,'multiline':False]
['text':' or by scrolling the text.','line_number':5395,'multiline':False]
['text':' Now it is OK to parse messages again, which may be needed in','line_number':5399,'multiline':False]
['text':' autocommands.','line_number':5400,'multiline':False]
['text':' Careful: autocommands may close the window and make "wp" invalid','line_number':5414,'multiline':False]
['text':' terminal is likely in another mode','line_number':5428,'multiline':False]
['text':' causes status line redraw','line_number':5433,'multiline':False]
['text':' set window height to desired minimal value','line_number':5435,'multiline':False]
['text':' set window width to desired minimal value','line_number':5445,'multiline':False]
['text':' in case jumped to/from help buffer','line_number':5449,'multiline':False]
['text':' Change directories when the 'acd' option is set.','line_number':5451,'multiline':False]
['text':'
 * Jump to the first open window that contains buffer "buf", if one exists.
 * Returns a pointer to the window found, otherwise NULL.
 ','line_number':5457,'multiline':True]
['text':'
 * Jump to the first open window in any tab page that contains buffer "buf",
 * if one exists. First search in the windows present in the current tab page.
 * Returns a pointer to the window found, otherwise NULL.
 ','line_number':5477,'multiline':True]
['text':' something went wrong','line_number':5501,'multiline':False]
['text':'
 * Allocate a window structure and link it in the window list when "hidden" is
 * FALSE.
 ','line_number':5510,'multiline':True]
['text':'
     * allocate window structure and linesizes arrays
     ','line_number':5519,'multiline':True]
['text':' init w: variables','line_number':5535,'multiline':False]
['text':' Don't execute autocommands while the window is not properly','line_number':5546,'multiline':False]
['text':' initialized yet.  gui_create_scrollbar() may trigger a FocusGained','line_number':5547,'multiline':False]
['text':' event.','line_number':5548,'multiline':False]
['text':'
     * link the window in the window list
     ','line_number':5551,'multiline':True]
['text':' position the display and the cursor at the top of the file.','line_number':5559,'multiline':False]
['text':' use global option value for global-local options','line_number':5568,'multiline':False]
['text':' We won't calculate w_fraction until resizing the window','line_number':5572,'multiline':False]
['text':' up to 1000 can be picked by the user','line_number':5590,'multiline':False]
['text':'
 * Remove window 'wp' from the window list and free the structure.
 ','line_number':5595,'multiline':True]
['text':' tab page "win" is in, NULL for current','line_number':5601,'multiline':False]
['text':' reduce the reference count to the argument list.','line_number':5611,'multiline':False]
['text':' Don't execute autocommands while the window is halfway being deleted.','line_number':5614,'multiline':False]
['text':' gui_mch_destroy_scrollbar() may trigger a FocusGained event.','line_number':5615,'multiline':False]
['text':' free all w: variables','line_number':5653,'multiline':False]
['text':' Remove the window from the b_wininfo lists, it may happen that the','line_number':5677,'multiline':False]
['text':' freed memory is re-used for another window.','line_number':5678,'multiline':False]
['text':' If there already is an entry with "wi_win" set to NULL it','line_number':5685,'multiline':False]
['text':' must be removed, it would never be used.','line_number':5686,'multiline':False]
['text':' Skip "wip" itself, otherwise Coverity complains.','line_number':5687,'multiline':False]
['text':' FEAT_GUI','line_number':5720,'multiline':False]
['text':'
 * Return TRUE if "wp" is not in the list of windows: the autocmd window or a
 * popup window.
 ','line_number':5754,'multiline':True]
['text':'
 * Free a popup window.  This does not take the window out of the window list
 * and assumes there is only one toplevel frame, no split.
 ','line_number':5765,'multiline':True]
['text':' the timer may have been cleared, making the pointer invalid','line_number':5780,'multiline':False]
['text':'
 * Append window "wp" in the window list after window "after".
 ','line_number':5789,'multiline':True]
['text':' after NULL is in front of the first','line_number':5797,'multiline':False]
['text':'
 * Remove a window from the window list.
 ','line_number':5814,'multiline':True]
['text':' tab page "win" is in, NULL for current','line_number':5820,'multiline':False]
['text':'
 * Append frame "frp" in a frame list after frame "after".
 ','line_number':5837,'multiline':True]
['text':'
 * Insert frame "frp" in a frame list before frame "before".
 ','line_number':5850,'multiline':True]
['text':'
 * Remove a frame from a frame list.
 ','line_number':5865,'multiline':True]
['text':'
 * Allocate w_lines[] for window "wp".
 * Return FAIL for failure, OK for success.
 ','line_number':5879,'multiline':True]
['text':'
 * free lsize arrays for a window
 ','line_number':5893,'multiline':True]
['text':' TODO: why would wp be NULL here?','line_number':5899,'multiline':False]
['text':'
 * Called from win_new_shellsize() after Rows changed.
 * This only does the current tab page, others must be done when made active.
 ','line_number':5904,'multiline':True]
['text':' not initialized yet','line_number':5913,'multiline':False]
['text':' First try setting the heights of windows with 'winfixheight'.  If','line_number':5918,'multiline':False]
['text':' that doesn't result in the right height, forget about that option.','line_number':5919,'multiline':False]
['text':' recompute w_winrow and w_wincol','line_number':5924,'multiline':False]
['text':' Disabled: don't want making the screen smaller make a window larger.','line_number':5932,'multiline':False]
['text':'
 * Called from win_new_shellsize() after Columns changed.
 ','line_number':5938,'multiline':True]
['text':' not initialized yet','line_number':5944,'multiline':False]
['text':' First try setting the widths of windows with 'winfixwidth'.  If that','line_number':5947,'multiline':False]
['text':' doesn't result in the right width, forget about that option.','line_number':5948,'multiline':False]
['text':' recompute w_winrow and w_wincol','line_number':5953,'multiline':False]
['text':' Disabled: don't want making the screen smaller make a window larger.','line_number':5955,'multiline':False]
['text':'
 * Save the size of all windows in "gap".
 ','line_number':5961,'multiline':True]
['text':' first entry is the total lines available for windows','line_number':5973,'multiline':False]
['text':'
 * Restore window sizes, but only if the number of windows is still the same
 * and total lines available for windows didn't change.
 * Does not free the growarray.
 ','line_number':5984,'multiline':True]
['text':' The order matters, because frames contain other frames, but it's','line_number':5998,'multiline':False]
['text':' difficult to get right. The easy way out is to do it twice.','line_number':5999,'multiline':False]
['text':' recompute the window positions','line_number':6009,'multiline':False]
['text':'
 * Update the position for all windows, using the width and height of the
 * frames.
 * Returns the row just after the last window.
 ','line_number':6014,'multiline':True]
['text':'
 * Update the position of the windows in frame "topfrp", using the width and
 * height of the frames.
 * "*row" and "*col" are the top-left position of the frame.  They are updated
 * to the bottom-right position plus one.
 ','line_number':6029,'multiline':True]
['text':' position changed, redraw','line_number':6049,'multiline':False]
['text':' WinBar will not show if the window height is zero','line_number':6055,'multiline':False]
['text':' all frames are at the same row','line_number':6067,'multiline':False]
['text':' all frames are at the same col','line_number':6069,'multiline':False]
['text':'
 * Make the current window show at least one line and one column.
 ','line_number':6075,'multiline':True]
['text':'
 * Set current window height and take care of repositioning other windows to
 * fit around it.
 ','line_number':6087,'multiline':True]
['text':'
 * Set the window height of window "win" and take care of repositioning other
 * windows to fit around it.
 ','line_number':6097,'multiline':True]
['text':' Always keep current window at least one line high, even when','line_number':6108,'multiline':False]
['text':' 'winminheight' is zero.','line_number':6109,'multiline':False]
['text':' recompute the window positions','line_number':6119,'multiline':False]
['text':'
     * If there is extra space created between the last window and the command
     * line, clear it.
     ','line_number':6122,'multiline':True]
['text':'
 * Set the height of a frame to "height" and take care that all frames and
 * windows inside it are resized.  Also resize frames on the left and right if
 * the are in the same FR_ROW frame.
 *
 * Strategy:
 * If the frame is part of a FR_COL frame, try fitting the frame in that
 * frame.  If that doesn't work (the FR_COL frame is too small), recursively
 * go to containing frames to resize them and make room.
 * If the frame is part of a FR_ROW frame, all frames must be resized as well.
 * Check for the minimal height of the FR_ROW frame.
 * At the top level we can also use change the command line height.
 ','line_number':6137,'multiline':True]
['text':' total number of lines available','line_number':6153,'multiline':False]
['text':' number of lines taken from other windows','line_number':6154,'multiline':False]
['text':' lines available from cmdline','line_number':6155,'multiline':False]
['text':' If the height already is the desired value, nothing to do.','line_number':6161,'multiline':False]
['text':' topframe: can only change the command line height','line_number':6167,'multiline':False]
['text':' Row of frames: Also need to resize frames left and right of this','line_number':6175,'multiline':False]
['text':' one.  First check for the minimal height of these.','line_number':6176,'multiline':False]
['text':'
	 * Column of frames: try to change only frames in this column.
	 ','line_number':6184,'multiline':True]
['text':'
	 * Do this twice:
	 * 1: compute room available, if it's not enough try resizing the
	 *    containing frame.
	 * 2: compute the room available and adjust the height to it.
	 * Try not to reduce the height of a window with 'winfixheight' set.
	 ','line_number':6187,'multiline':True]
['text':'
	 * Compute the number of lines we will take from others frames (can be
	 * negative!).
	 ','line_number':6230,'multiline':True]
['text':' If there is not enough room, also reduce the height of a window','line_number':6236,'multiline':False]
['text':' with 'winfixheight' set.','line_number':6237,'multiline':False]
['text':' If there is only a 'winfixheight' window and making the','line_number':6240,'multiline':False]
['text':' window smaller, need to make the other window taller.','line_number':6241,'multiline':False]
['text':' use lines from cmdline first','line_number':6247,'multiline':False]
['text':'
	 * set the current frame to the new height
	 ','line_number':6254,'multiline':True]
['text':'
	 * First take lines from the frames after the current frame.  If
	 * that is not enough, takes lines from frames above the current
	 * frame.
	 ','line_number':6259,'multiline':True]
['text':' 1st run: start with next window','line_number':6267,'multiline':False]
['text':' 2nd run: start with prev window','line_number':6269,'multiline':False]
['text':'
 * Set current window width and take care of repositioning other windows to
 * fit around it.
 ','line_number':6311,'multiline':True]
['text':' Always keep current window at least one column wide, even when','line_number':6324,'multiline':False]
['text':' 'winminwidth' is zero.','line_number':6325,'multiline':False]
['text':' recompute the window positions','line_number':6338,'multiline':False]
['text':'
 * Set the width of a frame to "width" and take care that all frames and
 * windows inside it are resized.  Also resize frames above and below if the
 * are in the same FR_ROW frame.
 *
 * Strategy is similar to frame_setheight().
 ','line_number':6344,'multiline':True]
['text':' total number of lines available','line_number':6354,'multiline':False]
['text':' number of lines taken from other windows','line_number':6355,'multiline':False]
['text':' If the width already is the desired value, nothing to do.','line_number':6361,'multiline':False]
['text':' topframe: can't change width','line_number':6366,'multiline':False]
['text':' Column of frames: Also need to resize frames above and below of','line_number':6371,'multiline':False]
['text':' this one.  First check for the minimal width of these.','line_number':6372,'multiline':False]
['text':'
	 * Row of frames: try to change only frames in this row.
	 *
	 * Do this twice:
	 * 1: compute room available, if it's not enough try resizing the
	 *    containing frame.
	 * 2: compute the room available and adjust the width to it.
	 ','line_number':6380,'multiline':True]
['text':'
	 * Compute the number of lines we will take from others frames (can be
	 * negative!).
	 ','line_number':6414,'multiline':True]
['text':' If there is not enough room, also reduce the width of a window','line_number':6420,'multiline':False]
['text':' with 'winfixwidth' set.','line_number':6421,'multiline':False]
['text':' If there is only a 'winfixwidth' window and making the','line_number':6424,'multiline':False]
['text':' window smaller, need to make the other window narrower.','line_number':6425,'multiline':False]
['text':'
	 * set the current frame to the new width
	 ','line_number':6429,'multiline':True]
['text':'
	 * First take lines from the frames right of the current frame.  If
	 * that is not enough, takes lines from frames left of the current
	 * frame.
	 ','line_number':6434,'multiline':True]
['text':' 1st run: start with next window','line_number':6442,'multiline':False]
['text':' 2nd run: start with prev window','line_number':6444,'multiline':False]
['text':'
 * Check 'winminheight' for a valid value and reduce it if needed.
 ','line_number':6486,'multiline':True]
['text':' loop until there is a 'winminheight' that is possible','line_number':6496,'multiline':False]
['text':' 1 was added for the cmdline','line_number':6500,'multiline':False]
['text':'
 * Check 'winminwidth' for a valid value and reduce it if needed.
 ','line_number':6512,'multiline':True]
['text':' loop until there is a 'winminheight' that is possible','line_number':6522,'multiline':False]
['text':'
 * Status line of dragwin is dragged "offset" lines down (negative is up).
 ','line_number':6538,'multiline':True]
['text':' if TRUE, drag status line up, otherwise down','line_number':6548,'multiline':False]
['text':' more than one window','line_number':6553,'multiline':False]
['text':' When the parent frame is not a column of frames, its parent should','line_number':6556,'multiline':False]
['text':' be.','line_number':6557,'multiline':False]
['text':' only a row of windows, may drag statusline','line_number':6561,'multiline':False]
['text':' If this is the last frame in a column, may want to resize the parent','line_number':6566,'multiline':False]
['text':' frame instead (go two up to skip a row of frames).','line_number':6567,'multiline':False]
['text':' drag up','line_number':6577,'multiline':False]
['text':' sum up the room of the current frame and above it','line_number':6581,'multiline':False]
['text':' only one window','line_number':6584,'multiline':False]
['text':' put fr at frame that grows','line_number':6597,'multiline':False]
['text':' drag down','line_number':6599,'multiline':False]
['text':'
	 * Only dragging the last status line can reduce p_ch.
	 ','line_number':6602,'multiline':True]
['text':' sum up the room of frames below of the current one','line_number':6612,'multiline':False]
['text':' put fr at window that grows','line_number':6615,'multiline':False]
['text':' Not enough room','line_number':6618,'multiline':False]
['text':' Move as far as we can','line_number':6619,'multiline':False]
['text':'
     * Grow frame fr by "offset" lines.
     * Doesn't happen when dragging the last status line up.
     ','line_number':6623,'multiline':True]
['text':' current frame gets smaller','line_number':6631,'multiline':False]
['text':' next frame gets smaller','line_number':6633,'multiline':False]
['text':'
     * Now make the other frames smaller.
     ','line_number':6635,'multiline':True]
['text':'
 * Separator line of dragwin is dragged "offset" lines right (negative is left).
 ','line_number':6668,'multiline':True]
['text':' if TRUE, drag separator line left, otherwise right','line_number':6677,'multiline':False]
['text':' only one window (cannot happen?)','line_number':6681,'multiline':False]
['text':' When the parent frame is not a row of frames, its parent should be.','line_number':6685,'multiline':False]
['text':' only a column of windows (cannot happen?)','line_number':6688,'multiline':False]
['text':' If this is the last frame in a row, may want to resize a parent','line_number':6694,'multiline':False]
['text':' frame instead.','line_number':6695,'multiline':False]
['text':' drag left','line_number':6709,'multiline':False]
['text':' sum up the room of the current frame and left of it','line_number':6713,'multiline':False]
['text':' put fr at frame that grows','line_number':6721,'multiline':False]
['text':' drag right','line_number':6723,'multiline':False]
['text':' sum up the room of frames right of the current one','line_number':6726,'multiline':False]
['text':' put fr at window that grows','line_number':6730,'multiline':False]
['text':' Not enough room','line_number':6733,'multiline':False]
['text':' Move as far as we can','line_number':6734,'multiline':False]
['text':' No room at all, quit.','line_number':6735,'multiline':False]
['text':' This can happen when calling win_move_separator() on the rightmost','line_number':6738,'multiline':False]
['text':' window.  Just don't do anything.','line_number':6739,'multiline':False]
['text':' grow frame fr by offset lines','line_number':6742,'multiline':False]
['text':' shrink other frames: current and at the left or at the right','line_number':6745,'multiline':False]
['text':' current frame gets smaller','line_number':6747,'multiline':False]
['text':' next frame gets smaller','line_number':6749,'multiline':False]
['text':'
 * Set wp->w_fraction for the current w_wrow and w_height.
 * Has no effect when the window is less than two lines.
 ','line_number':6775,'multiline':True]
['text':' When cursor is in the first line the percentage is computed as if','line_number':6783,'multiline':False]
['text':' it's halfway that line.  Thus with two lines it is 25%, with three','line_number':6784,'multiline':False]
['text':' lines 17%, etc.  Similarly for the last line: 75%, 83%, etc.','line_number':6785,'multiline':False]
['text':'
 * Handle scroll position, depending on 'splitkeep'.  Replaces the
 * scroll_to_fraction() call from win_new_height() if 'splitkeep' is "screen"
 * or "topline".  Instead we iterate over all windows in a tabpage and
 * calculate the new scroll position.
 * TODO: Ensure this also works with wrapped lines.
 * Requires a not fully visible cursor line to be allowed at the bottom of
 * a window("zb"), probably only when 'smoothscroll' is also set.
 ','line_number':6790,'multiline':True]
['text':' 'splitkeep' is "cursor"','line_number':6803,'multiline':False]
['text':' Skip when window height has not changed.','line_number':6809,'multiline':False]
['text':' Cursor position in this window may now be invalid.  It is kept','line_number':6812,'multiline':False]
['text':' potentially invalid until the window is made the current window.','line_number':6813,'multiline':False]
['text':' If window has moved update botline to keep the same screenlines.','line_number':6816,'multiline':False]
['text':'  Add difference in height and row to botline.','line_number':6825,'multiline':False]
['text':' Scroll to put the new cursor position at the bottom of the','line_number':6831,'multiline':False]
['text':' screen.','line_number':6832,'multiline':False]
['text':' Ensure cursor is valid when not in normal mode or when resized.','line_number':6848,'multiline':False]
['text':'
 * Make sure the cursor position is valid for 'splitkeep'.
 * If it is not, put the cursor position in the jumplist and move it.
 * If we are not in normal mode ("normal" is FALSE), make it valid by scrolling
 * instead.
 ','line_number':6855,'multiline':True]
['text':' Determine valid cursor range.','line_number':6872,'multiline':False]
['text':' Check if cursor position is above or below valid cursor range.','line_number':6886,'multiline':False]
['text':' Cursor is invalid for current scroll position.','line_number':6893,'multiline':False]
['text':' Save to jumplist and set cursor to avoid scrolling.','line_number':6895,'multiline':False]
['text':' Scroll instead when not in normal mode.','line_number':6900,'multiline':False]
['text':'
 * Set the height of a window.
 * "height" excludes any window toolbar.
 * This takes care of the things inside the window, not what happens to the
 * window position, the frame or to other windows.
 ','line_number':6909,'multiline':True]
['text':' Don't want a negative height.  Happens when splitting a tiny window.','line_number':6920,'multiline':False]
['text':' Will equalize heights soon to fix it.','line_number':6921,'multiline':False]
['text':' nothing to do','line_number':6925,'multiline':False]
['text':' w_wrow needs to be valid. When setting 'laststatus' this may','line_number':6930,'multiline':False]
['text':' call win_new_height() recursively.','line_number':6931,'multiline':False]
['text':' Recursive call already changed the size, bail out here','line_number':6934,'multiline':False]
['text':'	to avoid the following to mess things up.','line_number':6935,'multiline':False]
['text':' There is no point in adjusting the scroll position when exiting.  Some','line_number':6944,'multiline':False]
['text':' values might be invalid.','line_number':6945,'multiline':False]
['text':' Don't change w_topline in any of these cases:','line_number':6960,'multiline':False]
['text':' - window height is 0','line_number':6961,'multiline':False]
['text':' - 'scrollbind' is set and this isn't the current window','line_number':6962,'multiline':False]
['text':' - window height is sufficient to display the whole buffer and first line','line_number':6963,'multiline':False]
['text':'   is visible.','line_number':6964,'multiline':False]
['text':'
	 * Find a value for w_topline that shows the cursor at the same
	 * relative position in the window as before (more or less).
	 ','line_number':6969,'multiline':True]
['text':' can happen when starting up','line_number':6974,'multiline':False]
['text':' Make sure the whole cursor line is visible, if possible.','line_number':6983,'multiline':False]
['text':'
	     * Cursor line would go off top of screen if w_wrow was this high.
	     * Make cursor line the first line in the window.  If not enough
	     * room use w_skipcol;
	     ','line_number':6995,'multiline':True]
['text':' first line in buffer is folded','line_number':7022,'multiline':False]
['text':'
		 * Line we want at top would go off top of screen.  Use next
		 * line instead.
		 ','line_number':7041,'multiline':True]
['text':' First line of file reached, use that as topline.','line_number':7053,'multiline':False]
['text':' validate w_wrow','line_number':7062,'multiline':False]
['text':'
 * Set the width of a window.
 ','line_number':7071,'multiline':True]
['text':' Should we give an error if width < 0?','line_number':7077,'multiline':False]
['text':' validate w_wrow','line_number':7084,'multiline':False]
['text':' Used by "verbose set scroll".','line_number':7103,'multiline':False]
['text':'
 * Command_height: called whenever p_ch has been changed.
 ','line_number':7110,'multiline':True]
['text':' Use the value of p_ch that we remembered.  This is needed for when the','line_number':7120,'multiline':False]
['text':' GUI starts up, we can't be sure in what order things happen.  And when','line_number':7121,'multiline':False]
['text':' p_ch was changed in another tab page.','line_number':7122,'multiline':False]
['text':' If the space for the command line is already more than 'cmdheight' there','line_number':7125,'multiline':False]
['text':' is nothing to do (window size must have decreased).','line_number':7126,'multiline':False]
['text':' Update cmdline_row to what it should be: just below the last window.','line_number':7130,'multiline':False]
['text':' If cmdline_row is smaller than what it is supposed to be for 'cmdheight'','line_number':7133,'multiline':False]
['text':' then set old_p_ch to what it would be, so that the windows get resized','line_number':7134,'multiline':False]
['text':' properly for the new value.','line_number':7135,'multiline':False]
['text':' Find bottom frame with width of screen.','line_number':7139,'multiline':False]
['text':' Avoid changing the height of a window with 'winfixheight' set.','line_number':7144,'multiline':False]
['text':' p_ch got bigger','line_number':7153,'multiline':False]
['text':' Recompute window positions.','line_number':7173,'multiline':False]
['text':' clear the lines added to cmdline','line_number':7176,'multiline':False]
['text':' Recompute window positions.','line_number':7191,'multiline':False]
['text':'
 * Resize frame "frp" to be "n" lines higher (negative for less high).
 * Also resize the frames it is contained in.
 ','line_number':7196,'multiline':True]
['text':'
 * Add or remove a status line for the bottom window(s), according to the
 * value of 'laststatus'.
 ','line_number':7213,'multiline':True]
['text':' pretend there are two or more windows','line_number':7219,'multiline':False]
['text':' Don't make a difference between horizontal or vertical split.','line_number':7221,'multiline':False]
['text':' remove status line','line_number':7236,'multiline':False]
['text':' Find a frame to take a line from.','line_number':7243,'multiline':False]
['text':' In a column of frames: go to frame above.  If already at','line_number':7252,'multiline':False]
['text':' the top or in a row of frames: go to parent.','line_number':7253,'multiline':False]
['text':' Set prev_height when difference is due to 'laststatus'.','line_number':7271,'multiline':False]
['text':' vertically split windows, set status line for each one','line_number':7277,'multiline':False]
['text':' horizontally split window, set status line for last one','line_number':7283,'multiline':False]
['text':'
 * Return the number of lines used by the tab page line.
 ','line_number':7290,'multiline':True]
['text':' When the GUI has the tabline then this always returns zero.','line_number':7297,'multiline':False]
['text':'
 * Return the height of the last window's statusline.
 ','line_number':7309,'multiline':True]
['text':' pretend there are two or more windows','line_number':7314,'multiline':False]
['text':'
 * Return the minimal number of rows that is needed on the screen to display
 * the current number of windows.
 ','line_number':7320,'multiline':True]
['text':' not initialized yet','line_number':7331,'multiline':False]
['text':' count the room for the command line','line_number':7342,'multiline':False]
['text':'
 * Return TRUE if there is only one window and only one tab page, not
 * counting a help or preview window, unless it is the current window.
 * Does not count unlisted windows.
 ','line_number':7346,'multiline':True]
['text':' If the current window is a popup then there always is another window.','line_number':7358,'multiline':False]
['text':' If there is another tab page there always is another window.','line_number':7363,'multiline':False]
['text':'
 * Implementation of check_lnums() and check_lnums_nested().
 ','line_number':7378,'multiline':True]
['text':' save the original cursor position and topline','line_number':7394,'multiline':False]
['text':' save the (corrected) cursor position','line_number':7403,'multiline':False]
['text':' save the (corrected) topline','line_number':7410,'multiline':False]
['text':'
 * Correct the cursor line number in other windows.  Used after changing the
 * current buffer, and before applying autocommands.
 * When "do_curwin" is TRUE, also check current window.
 ','line_number':7415,'multiline':True]
['text':'
 * Like check_lnums() but for when check_lnums() was already called.
 ','line_number':7426,'multiline':True]
['text':'
 * Reset cursor and topline to its stored values from check_lnums().
 * check_lnums() must have been called first!
 ','line_number':7435,'multiline':True]
['text':' Restore the value if the autocommand didn't change it and it was','line_number':7448,'multiline':False]
['text':' set.','line_number':7449,'multiline':False]
['text':' Note: This triggers e.g. on BufReadPre, when the buffer is not yet','line_number':7450,'multiline':False]
['text':'       loaded, so cannot validate the buffer line','line_number':7451,'multiline':False]
['text':'
 * A snapshot of the window sizes, to restore them after closing the help
 * or other window.
 * Only these fields are used:
 * fr_layout
 * fr_width
 * fr_height
 * fr_next
 * fr_child
 * fr_win (only valid for the old curwin, NULL otherwise)
 ','line_number':7463,'multiline':True]
['text':'
 * Create a snapshot of the current frame sizes.
 * "idx" is SNAP_HELP_IDX or SNAP_AUCMD_IDX.
 ','line_number':7475,'multiline':True]
['text':'
 * Remove any existing snapshot.
 ','line_number':7503,'multiline':True]
['text':'
 * Traverse a snapshot to find the previous curwin.
 ','line_number':7523,'multiline':True]
['text':'
 * Return the current window stored in the snapshot or NULL.
 ','line_number':7545,'multiline':True]
['text':'
 * Restore a previously created snapshot, if there is any.
 * This is only done if the screen size didn't change and the window layout is
 * still the same.
 * "idx" is SNAP_HELP_IDX or SNAP_AUCMD_IDX.
 ','line_number':7557,'multiline':True]
['text':' closing current window','line_number':7566,'multiline':False]
['text':'
 * Check if frames "sn" and "fr" have the same layout, same following frames
 * and same children.  And the window pointer is valid.
 ','line_number':7584,'multiline':True]
['text':'
 * Copy the size of snapshot frame "sn" to frame "fr".  Do the same for all
 * following frames and children.
 * Returns a pointer to the old current window, or NULL.
 ','line_number':7603,'multiline':True]
['text':'
 * Return TRUE if there is any vertically split window.
 ','line_number':7638,'multiline':True]
['text':'
 * Return TRUE if "topfrp" and its children are at the right height.
 ','line_number':7690,'multiline':True]
['text':'
 * Return TRUE if "topfrp" and its children are at the right width.
 ','line_number':7709,'multiline':True]
['text':'
 * Simple int comparison function for use with qsort()
 ','line_number':7729,'multiline':True]
['text':'
 * Handle setting 'colorcolumn' or 'textwidth' in window "wp".
 * Returns error message, NULL if it's OK.
 ','line_number':7738,'multiline':True]
['text':' buffer was closed','line_number':7753,'multiline':False]
['text':' -N and +N: add to 'textwidth'','line_number':7759,'multiline':False]
['text':' 'textwidth' not set, skip this item','line_number':7766,'multiline':False]
['text':' 1-based to 0-based','line_number':7775,'multiline':False]
['text':' illegal trailing comma as in "set cc=80,"','line_number':7782,'multiline':False]
['text':' sort the columns for faster usage on screen redraw inside','line_number':7793,'multiline':False]
['text':' win_line()','line_number':7794,'multiline':False]
['text':' skip duplicates','line_number':7798,'multiline':False]
['text':' end marker','line_number':7801,'multiline':False]
['text':' no error','line_number':7805,'multiline':False]
