['text':' vi:set ts=8 sts=4 sw=4 noet:
 *
 * VIM - Vi IMproved	by Bram Moolenaar
 *
 * Do ":help uganda"  in Vim to read copying and usage conditions.
 * Do ":help credits" in Vim to see a list of people who contributed.
 * See README.txt for an overview of the Vim source code.
 ','line_number':1,'multiline':True]
['text':'
 * change.c: functions related to changing text
 ','line_number':10,'multiline':True]
['text':'
 * If the file is readonly, give a warning message with the first change.
 * Don't do this for autocommands.
 * Doesn't use emsg(), because it flushes the macro buffer.
 * If we have undone all changes b_changed will be FALSE, but "b_did_warn"
 * will be TRUE.
 * "col" is the column for the message; non-zero when in insert mode and
 * 'showmode' is on.
 * Careful: may trigger autocommands that reload the buffer.
 ','line_number':16,'multiline':True]
['text':' Do what msg() does, but with a column offset if the warning should','line_number':43,'multiline':False]
['text':' be after the mode message.','line_number':44,'multiline':False]
['text':' give the user time to think about it','line_number':62,'multiline':False]
['text':' don't redraw and erase the message','line_number':65,'multiline':False]
['text':'
 * Call this function when something in the current buffer is changed.
 *
 * Most often called through changed_bytes() and changed_lines(), which also
 * mark the area of the display to be redrawn.
 *
 * Careful: may trigger autocommands that reload the buffer.
 ','line_number':70,'multiline':True]
['text':' The text of the preediting area is inserted, but this doesn't','line_number':84,'multiline':False]
['text':' mean a change of the buffer yet.  That is delayed until the','line_number':85,'multiline':False]
['text':' text is committed. (this means preedit becomes empty)','line_number':86,'multiline':False]
['text':' Give a warning about changing a read-only file.  This may also','line_number':97,'multiline':False]
['text':' check-out the file, thus change "curbuf"!','line_number':98,'multiline':False]
['text':' Create a swap file if that is wanted.','line_number':101,'multiline':False]
['text':' Don't do this for "nofile" and "nowrite" buffer types.','line_number':102,'multiline':False]
['text':' The ml_open_file() can cause an ATTENTION message.','line_number':110,'multiline':False]
['text':' Wait two seconds, to make sure the user reads this unexpected','line_number':111,'multiline':False]
['text':' message.  Since we could be anywhere, call wait_return() now,','line_number':112,'multiline':False]
['text':' and don't let the emsg() set msg_scroll.','line_number':113,'multiline':False]
['text':' If a pattern is highlighted, the position may now be invalid.','line_number':129,'multiline':False]
['text':'
 * Internal part of changed(), no user interaction.
 * Also used for recovery.
 ','line_number':134,'multiline':True]
['text':' set window title later','line_number':145,'multiline':False]
['text':'
 * Check if the change at "lnum" is above or overlaps with an existing
 * change. If above then flush changes and invoke listeners.
 ','line_number':151,'multiline':True]
['text':' the current change is going to make the line number in','line_number':177,'multiline':False]
['text':' the older change invalid, flush now','line_number':178,'multiline':False]
['text':'
 * Record a change for listeners added with listener_add().
 * Always for the current buffer.
 ','line_number':185,'multiline':True]
['text':' If the new change is going to change the line numbers in already listed','line_number':201,'multiline':False]
['text':' changes, then flush.','line_number':202,'multiline':False]
['text':' out of memory','line_number':208,'multiline':False]
['text':'
 * listener_add() function
 ','line_number':225,'multiline':True]
['text':'
 * listener_flush() function
 ','line_number':269,'multiline':True]
['text':'
 * listener_remove() function
 ','line_number':301,'multiline':True]
['text':' in invoke_listeners(), clear ID and delete later','line_number':327,'multiline':False]
['text':'
 * Called before inserting a line above "lnum"/"lnum3" or deleting line "lnum"
 * to "lnume".
 ','line_number':340,'multiline':True]
['text':'
 * Called when a sequence of changes is done: invoke listeners added with
 * listener_add().
 ','line_number':350,'multiline':True]
['text':' nothing changed','line_number':369,'multiline':False]
['text':' no listeners','line_number':370,'multiline':False]
['text':' already busy','line_number':371,'multiline':False]
['text':' Block messages on channels from being handled, so that they don't make','line_number':375,'multiline':False]
['text':' text changes here.','line_number':376,'multiline':False]
['text':' a:bufnr','line_number':380,'multiline':False]
['text':' If f_listener_remove() was called may have to remove a listener now.','line_number':411,'multiline':False]
['text':'
 * Remove all listeners associated with "buf".
 ','line_number':433,'multiline':True]
['text':'
 * Common code for when a change was made.
 * See changed_lines() for the arguments.
 * Careful: may trigger autocommands that reload the buffer.
 ','line_number':452,'multiline':True]
['text':' mark the buffer as modified','line_number':471,'multiline':False]
['text':' set the '. mark','line_number':482,'multiline':False]
['text':' Create a new entry if a new undo-able change was started or we','line_number':488,'multiline':False]
['text':' don't have an entry yet.','line_number':489,'multiline':False]
['text':' Don't create a new entry when the line number is the same','line_number':496,'multiline':False]
['text':' as the last one and the column is not too far away.  Avoids','line_number':497,'multiline':False]
['text':' creating many entries for typing "xxxxx".','line_number':498,'multiline':False]
['text':' This is the first of a new sequence of undo-able changes','line_number':512,'multiline':False]
['text':' and it's at some distance of the last change.  Use a new','line_number':513,'multiline':False]
['text':' position in the changelist.','line_number':514,'multiline':False]
['text':' changelist is full: remove oldest entry','line_number':519,'multiline':False]
['text':' Correct position in changelist for other windows on','line_number':525,'multiline':False]
['text':' this buffer.','line_number':526,'multiline':False]
['text':' For other windows, if the position in the changelist is','line_number':533,'multiline':False]
['text':' at the end it stays at the end.','line_number':534,'multiline':False]
['text':' The current window is always after the last change, so that "g,"','line_number':544,'multiline':False]
['text':' takes you back to it.','line_number':545,'multiline':False]
['text':' last line after the change','line_number':556,'multiline':False]
['text':' Mark this window to be redrawn later.','line_number':558,'multiline':False]
['text':' Reset "w_skipcol" if the topline length has become smaller to','line_number':562,'multiline':False]
['text':' such a degree that nothing will be visible anymore, accounting','line_number':563,'multiline':False]
['text':' for 'smoothscroll' <<< or 'listchars' "precedes" marker.','line_number':564,'multiline':False]
['text':' Check if a change in the buffer has invalidated the cached','line_number':575,'multiline':False]
['text':' values for the cursor.','line_number':576,'multiline':False]
['text':' Update the folds for this window.  Can't postpone this, because','line_number':578,'multiline':False]
['text':' a following operator might work on the whole fold: ">>dd".','line_number':579,'multiline':False]
['text':' The change may cause lines above or below the change to become','line_number':582,'multiline':False]
['text':' included in a fold.  Set lnum/lnume to the first/last line that','line_number':583,'multiline':False]
['text':' might be displayed differently.','line_number':584,'multiline':False]
['text':' Set w_cline_folded here as an efficient way to update it when','line_number':585,'multiline':False]
['text':' inserting lines just above a closed fold.','line_number':586,'multiline':False]
['text':' If the changed line is in a range of previously folded lines,','line_number':594,'multiline':False]
['text':' compare with the first line in that range.','line_number':595,'multiline':False]
['text':' Assume that botline doesn't change (inserted lines make','line_number':612,'multiline':False]
['text':' other lines scroll down below botline).','line_number':613,'multiline':False]
['text':' Check if any w_lines[] entries have become invalid.','line_number':617,'multiline':False]
['text':' For entries below the change: Correct the lnums for','line_number':618,'multiline':False]
['text':' inserted/deleted lines.  Makes it possible to stop displaying','line_number':619,'multiline':False]
['text':' after the change.','line_number':620,'multiline':False]
['text':' Do not change wl_lnum at index zero, it is used to','line_number':626,'multiline':False]
['text':' compare with w_topline.  Invalidate it instead.','line_number':627,'multiline':False]
['text':' line included in change','line_number':630,'multiline':False]
['text':' line below change','line_number':635,'multiline':False]
['text':' change somewhere inside this range of folded lines,','line_number':645,'multiline':False]
['text':' may need to be redrawn','line_number':646,'multiline':False]
['text':' Take care of side effects for setting w_topline when folds have','line_number':653,'multiline':False]
['text':' changed.  Esp. when the buffer was changed in another window.','line_number':654,'multiline':False]
['text':' If lines have been added or removed, relative numbering always','line_number':658,'multiline':False]
['text':' requires a redraw.','line_number':659,'multiline':False]
['text':' Cursor line highlighting probably need to be updated with','line_number':666,'multiline':False]
['text':' "UPD_VALID" if it's below the change.','line_number':667,'multiline':False]
['text':' If the cursor line is inside the change we need to redraw more.','line_number':668,'multiline':False]
['text':' Call update_screen() later, which checks out what needs to be redrawn,','line_number':684,'multiline':False]
['text':' since it notices b_mod_set and then uses b_mod_*.','line_number':685,'multiline':False]
['text':' when the cursor line is changed always trigger CursorMoved','line_number':688,'multiline':False]
['text':' find the maximum area that must be redisplayed','line_number':699,'multiline':False]
['text':' set the area that must be redisplayed to one line','line_number':707,'multiline':False]
['text':'
 * Changed bytes within a single line for the current buffer.
 * - marks the windows on this buffer to be redisplayed
 * - marks the buffer changed by calling changed()
 * - invalidates cached values
 * Careful: may trigger autocommands that reload the buffer.
 ','line_number':715,'multiline':True]
['text':' When text has been changed at the end of the line, possibly the start of','line_number':729,'multiline':False]
['text':' the next line may have SpellCap that should be removed or it needs to be','line_number':730,'multiline':False]
['text':' displayed.  Schedule the next line for redrawing just in case.','line_number':731,'multiline':False]
['text':' Don't do this when displaying '$' at the end of changed text.','line_number':732,'multiline':False]
['text':' Diff highlighting in other diff windows may need to be updated too.','line_number':739,'multiline':False]
['text':'
 * Like changed_bytes() but also adjust text properties for "added" bytes.
 * When "added" is negative text was deleted.
 ','line_number':757,'multiline':True]
['text':'
 * Appended "count" lines below line "lnum" in the current buffer.
 * Must be called AFTER the change and after mark_adjust().
 * Takes care of marking the buffer to be redrawn and sets the changed flag.
 ','line_number':772,'multiline':True]
['text':'
 * Like appended_lines(), but adjust marks first.
 ','line_number':783,'multiline':True]
['text':'
 * Deleted "count" lines at line "lnum" in the current buffer.
 * Must be called AFTER the change and after mark_adjust().
 * Takes care of marking the buffer to be redrawn and sets the changed flag.
 ','line_number':793,'multiline':True]
['text':'
 * Like deleted_lines(), but adjust marks first.
 * Make sure the cursor is on a valid line before calling, a GUI callback may
 * be triggered to display the cursor.
 ','line_number':804,'multiline':True]
['text':'
 * Marks the area to be redrawn after a change.
 * Consider also calling changed_line_display_buf().
 ','line_number':816,'multiline':True]
['text':' first line with change','line_number':823,'multiline':False]
['text':' line below last changed line','line_number':824,'multiline':False]
['text':' number of extra lines (negative when deleting)','line_number':825,'multiline':False]
['text':' find the maximum area that must be redisplayed','line_number':829,'multiline':False]
['text':' adjust old bot position for xtra lines','line_number':834,'multiline':False]
['text':' set the area that must be redisplayed','line_number':845,'multiline':False]
['text':'
 * Changed lines for the current buffer.
 * Must be called AFTER the change and after mark_adjust().
 * - mark the buffer changed by calling changed()
 * - mark the windows on this buffer to be redisplayed
 * - invalidate cached values
 * "lnum" is the first line that needs displaying, "lnume" the first line
 * below the changed lines (BEFORE the change).
 * When only inserting lines, "lnum" and "lnume" are equal.
 * Takes care of calling changed() and updating b_mod_*.
 * Careful: may trigger autocommands that reload the buffer.
 ','line_number':853,'multiline':True]
['text':' first line with change','line_number':867,'multiline':False]
['text':' column in first line with change','line_number':868,'multiline':False]
['text':' line below last changed line','line_number':869,'multiline':False]
['text':' number of extra lines (negative when deleting)','line_number':870,'multiline':False]
['text':' When the number of lines doesn't change then mark_adjust() isn't','line_number':877,'multiline':False]
['text':' called and other diff buffers still need to be marked for','line_number':878,'multiline':False]
['text':' displaying.','line_number':879,'multiline':False]
['text':'
 * Called when the changed flag must be reset for buffer "buf".
 * When "ff" is TRUE also reset 'fileformat'.
 * When "always_inc_changedtick" is TRUE b:changedtick is incremented also when
 * the changed flag was off.
 ','line_number':898,'multiline':True]
['text':' set window title later','line_number':915,'multiline':False]
['text':'
 * Save the current values of 'fileformat' and 'fileencoding', so that we know
 * the file must be considered changed when the value is different.
 ','line_number':925,'multiline':True]
['text':' Only use free/alloc when necessary, they take time.','line_number':937,'multiline':False]
['text':'
 * Return TRUE if 'fileformat' and/or 'fileencoding' has a different value
 * from when editing started (save_file_ff() called).
 * Also when 'endofline' was changed and 'binary' is set, or when 'bomb' was
 * changed and 'binary' is not set.
 * Also when 'endofline' was changed and 'fixeol' is not set.
 * When "ignore_empty" is true don't consider a new, empty buffer to be
 * changed.
 ','line_number':946,'multiline':True]
['text':' In a buffer that was never loaded the options are not valid.','line_number':958,'multiline':False]
['text':'
 * Insert string "p" at the cursor position.  Stops at a NUL byte.
 * Handles Replace mode and multi-byte characters.
 ','line_number':979,'multiline':True]
['text':'
 * Insert string "p" with length "len" at the cursor position.
 * Handles Replace mode and multi-byte characters.
 ','line_number':989,'multiline':True]
['text':' avoid reading past p[len]','line_number':1003,'multiline':False]
['text':'
 * Insert or replace a single character at the cursor position.
 * When in MODE_REPLACE or MODE_VREPLACE state, replace any existing character.
 * Caller must have prepared for undo.
 * For multi-byte characters we get the whole character, the caller must
 * convert bytes to a character.
 ','line_number':1014,'multiline':True]
['text':' When "c" is 0x100, 0x200, etc. we don't want to insert a NUL byte.','line_number':1027,'multiline':False]
['text':' Happens for CTRL-Vu9900.','line_number':1028,'multiline':False]
['text':' nr of bytes inserted','line_number':1039,'multiline':False]
['text':' nr of bytes deleted (0 when not replacing)','line_number':1040,'multiline':False]
['text':' length of old line including NUL','line_number':1044,'multiline':False]
['text':' Break tabs if needed.','line_number':1049,'multiline':False]
['text':' The lengths default to the values for when not replacing.','line_number':1057,'multiline':False]
['text':' init for GCC','line_number':1065,'multiline':False]
['text':' Disable 'list' temporarily, unless 'cpo' contains the 'L' flag.','line_number':1069,'multiline':False]
['text':' Returns the old value of list, so when finished,','line_number':1070,'multiline':False]
['text':' curwin->w_p_list should be set back to this.','line_number':1071,'multiline':False]
['text':' In virtual replace mode each character may replace one or more','line_number':1076,'multiline':False]
['text':' characters (zero if it's a TAB).  Count the number of bytes to','line_number':1077,'multiline':False]
['text':' be deleted to make room for the new character, counting screen','line_number':1078,'multiline':False]
['text':' cells.  May result in adding spaces to fill a gap.','line_number':1079,'multiline':False]
['text':' Don't need to remove a TAB that takes us to the right','line_number':1085,'multiline':False]
['text':' position.','line_number':1086,'multiline':False]
['text':' Deleted a bit too much, insert spaces.','line_number':1090,'multiline':False]
['text':' normal replace','line_number':1098,'multiline':False]
['text':' Push the replaced bytes onto the replace stack, so that they can be','line_number':1103,'multiline':False]
['text':' put back when BS is used.  The bytes of a multi-byte character are','line_number':1104,'multiline':False]
['text':' done the other way around, so that the first byte is popped off','line_number':1105,'multiline':False]
['text':' first (it tells the byte length of the character).','line_number':1106,'multiline':False]
['text':' Copy bytes before the cursor.','line_number':1121,'multiline':False]
['text':' Copy bytes after the changed character(s).','line_number':1125,'multiline':False]
['text':' Insert or overwrite the new character.','line_number':1131,'multiline':False]
['text':' Fill with spaces when necessary.','line_number':1135,'multiline':False]
['text':' Replace the line in the buffer.','line_number':1139,'multiline':False]
['text':' mark the buffer as changed and prepare for displaying','line_number':1142,'multiline':False]
['text':' If we're in Insert or Replace mode and 'showmatch' is set, then briefly','line_number':1150,'multiline':False]
['text':' show the match for right parens and braces.','line_number':1151,'multiline':False]
['text':' Normal insert: move cursor right','line_number':1166,'multiline':False]
['text':' TODO: should try to update w_row here, to avoid recomputing it later.','line_number':1170,'multiline':False]
['text':'
 * Insert a string at the cursor position.
 * Note: Does NOT handle Replace mode.
 * Caller must have prepared for undo.
 ','line_number':1173,'multiline':True]
['text':'
 * Delete one character under the cursor.
 * If "fixpos" is TRUE, don't leave the cursor on the NUL after the line.
 * Caller must have prepared for undo.
 *
 * return FAIL for failure, OK otherwise
 ','line_number':1206,'multiline':True]
['text':' Make sure the cursor is at the start of a character.','line_number':1218,'multiline':False]
['text':'
 * Like del_bytes(), but delete characters instead of bytes.
 ','line_number':1227,'multiline':True]
['text':'
 * Delete "count" bytes under the cursor.
 * If "fixpos" is TRUE, don't leave the cursor on the NUL after the line.
 * Caller must have prepared for undo.
 *
 * Return FAIL for failure, OK otherwise.
 ','line_number':1248,'multiline':True]
['text':' 'delcombine' option applies','line_number':1259,'multiline':False]
['text':' Can't do anything when the cursor is on the NUL after the line.','line_number':1273,'multiline':False]
['text':' If "count" is zero there is nothing to do.','line_number':1277,'multiline':False]
['text':' If "count" is negative the caller must be doing something wrong.','line_number':1281,'multiline':False]
['text':' If 'delcombine' is set and deleting (less than) one character, only','line_number':1288,'multiline':False]
['text':' delete the last combining character.','line_number':1289,'multiline':False]
['text':' Find the last composing char, there can be several.','line_number':1299,'multiline':False]
['text':' When count is too big, reduce it.','line_number':1311,'multiline':False]
['text':' includes trailing NUL','line_number':1312,'multiline':False]
['text':' If we just took off the last character of a non-blank line, and','line_number':1315,'multiline':False]
['text':' fixpos is TRUE, we don't want to end up positioned at the NUL,','line_number':1316,'multiline':False]
['text':' unless "restart_edit" is set or 'virtualedit' contains "onemore".','line_number':1317,'multiline':False]
['text':' If the old line has been allocated the deletion can be done in the','line_number':1332,'multiline':False]
['text':' existing line. Otherwise a new line has to be allocated','line_number':1333,'multiline':False]
['text':' Can't do this when using Netbeans, because we would need to invoke','line_number':1334,'multiline':False]
['text':' netbeans_removed(), which deallocates the line.  Let ml_replace() take','line_number':1335,'multiline':False]
['text':' care of notifying Netbeans.','line_number':1336,'multiline':False]
['text':' check if oldp was allocated','line_number':1342,'multiline':False]
['text':' use same allocated memory','line_number':1344,'multiline':False]
['text':' need to allocate a new line','line_number':1346,'multiline':False]
['text':' Also move any following text properties.','line_number':1358,'multiline':False]
['text':' mark the buffer as changed and prepare for displaying','line_number':1366,'multiline':False]
['text':'
 * open_line: Add a new line below or above the current line.
 *
 * For MODE_VREPLACE state, we only add a new line when we get to the end of
 * the file, otherwise we just start replacing the next line.
 *
 * Caller must take care of undo.  Since MODE_VREPLACE may affect any number of
 * lines however, it may call u_save_cursor() again when starting to change a
 * new line.
 * "flags": OPENLINE_DELSPACES	delete spaces after cursor
 *	    OPENLINE_DO_COM	format comments
 *	    OPENLINE_KEEPTRAIL	keep trailing spaces
 *	    OPENLINE_MARKFIX	adjust mark positions after the line break
 *	    OPENLINE_COM_LIST	format comments with list or 2nd line indent
 *
 * "second_line_indent": indent for after ^^D in Insert mode or if flag
 *			  OPENLINE_COM_LIST
 * "did_do_comment" is set to TRUE when intentionally putting the comment
 * leader in front of the new line.
 *
 * Return OK for success, FAIL for failure
 ','line_number':1372,'multiline':True]
['text':' FORWARD or BACKWARD','line_number':1396,'multiline':False]
['text':' copy of the original line','line_number':1401,'multiline':False]
['text':' copy of the next line','line_number':1402,'multiline':False]
['text':' what goes to next line','line_number':1403,'multiline':False]
['text':' less columns for mark in new line','line_number':1404,'multiline':False]
['text':' columns to skip for mark and','line_number':1405,'multiline':False]
['text':' textprop adjustment','line_number':1406,'multiline':False]
['text':' old cursor position','line_number':1407,'multiline':False]
['text':' new cursor column','line_number':1408,'multiline':False]
['text':' auto-indent of the new line','line_number':1409,'multiline':False]
['text':' truncate current line afterwards','line_number':1411,'multiline':False]
['text':' return value','line_number':1412,'multiline':False]
['text':' length of p_extra string','line_number':1413,'multiline':False]
['text':' length of comment leader','line_number':1414,'multiline':False]
['text':' start index of the comment leader','line_number':1415,'multiline':False]
['text':' position in 'comments' for comment leader','line_number':1416,'multiline':False]
['text':' copy of comment leader','line_number':1417,'multiline':False]
['text':' allocated memory','line_number':1418,'multiline':False]
['text':' init for GCC','line_number':1420,'multiline':False]
['text':' reset did_si afterwards','line_number':1424,'multiline':False]
['text':' init for GCC','line_number':1425,'multiline':False]
['text':' appended a new line','line_number':1427,'multiline':False]
['text':' copy of preserveindent setting','line_number':1428,'multiline':False]
['text':' cursor after last character','line_number':1430,'multiline':False]
['text':' make a copy of the current line so we can mess with it','line_number':1433,'multiline':False]
['text':' out of memory!','line_number':1435,'multiline':False]
['text':' With MODE_VREPLACE we make a copy of the next line, which we will be','line_number':1444,'multiline':False]
['text':' starting to replace.  First make the new line empty and let vim play','line_number':1445,'multiline':False]
['text':' with the indenting and comment leader to its heart's content.  Then','line_number':1446,'multiline':False]
['text':' we grab what it ended up putting on the new line, put back the','line_number':1447,'multiline':False]
['text':' original line, and call ins_char() to put each new character onto','line_number':1448,'multiline':False]
['text':' the line, replacing what was there before and pushing the right','line_number':1449,'multiline':False]
['text':' stuff onto the replace stack.  -- webb.','line_number':1450,'multiline':False]
['text':' out of memory!','line_number':1455,'multiline':False]
['text':' In MODE_VREPLACE state, a NL replaces the rest of the line, and','line_number':1458,'multiline':False]
['text':' starts replacing the next line, so push all of the characters left','line_number':1459,'multiline':False]
['text':' on the line onto the replace stack.  We'll push any other characters','line_number':1460,'multiline':False]
['text':' that might be replaced at the start of the next line (due to','line_number':1461,'multiline':False]
['text':' autoindent etc) a bit later.','line_number':1462,'multiline':False]
['text':' Call twice because BS over NL expects it','line_number':1463,'multiline':False]
['text':' need first char after new line break','line_number':1479,'multiline':False]
['text':' cannot do "U" command when adding lines','line_number':1489,'multiline':False]
['text':' If we just did an auto-indent, then we didn't type anything on','line_number':1493,'multiline':False]
['text':' the prior line, and it should be truncated.  Do this even if 'ai' is not','line_number':1494,'multiline':False]
['text':' set because automatically inserting a comment leader also sets did_ai.','line_number':1495,'multiline':False]
['text':' If 'autoindent' and/or 'smartindent' is set, try to figure out what','line_number':1499,'multiline':False]
['text':' indent to use for the new line.','line_number':1500,'multiline':False]
['text':' count white space on current line','line_number':1503,'multiline':False]
['text':' for ^^D command in insert mode','line_number':1511,'multiline':False]
['text':' Do smart indenting.','line_number':1513,'multiline':False]
['text':' In insert/replace mode (only when dir == FORWARD)','line_number':1514,'multiline':False]
['text':' we may move some text to the next line. If it starts with '{'','line_number':1515,'multiline':False]
['text':' don't add an indent. Fixes inserting a NL before '{' in line','line_number':1516,'multiline':False]
['text':'	"if (condition) {"','line_number':1517,'multiline':False]
['text':' Skip preprocessor directives, unless they are','line_number':1532,'multiline':False]
['text':' recognised as comments.','line_number':1533,'multiline':False]
['text':' This case gets the following right:','line_number':1546,'multiline':False]
['text':'	    /*','line_number':1547,'multiline':False]
['text':'	     * A comment (read '\' as '/').','line_number':1548,'multiline':False]
['text':'	     */','line_number':1549,'multiline':False]
['text':' #define IN_THE_WAY','line_number':1550,'multiline':False]
['text':'	    This should line up here;','line_number':1551,'multiline':False]
['text':' End of C comment, indent should line up','line_number':1561,'multiline':False]
['text':' with the line containing the start of','line_number':1562,'multiline':False]
['text':' the comment.','line_number':1563,'multiline':False]
['text':' this may make "ptr" invalid, get it again','line_number':1571,'multiline':False]
['text':' Not a comment line','line_number':1578,'multiline':False]
['text':' Find last non-blank in line','line_number':1580,'multiline':False]
['text':' find the character just before the '{' or ';'','line_number':1586,'multiline':False]
['text':' Try to catch lines that are split over multiple','line_number':1594,'multiline':False]
['text':' lines.  eg:','line_number':1595,'multiline':False]
['text':'	    if (condition &&','line_number':1596,'multiline':False]
['text':'			condition) {','line_number':1597,'multiline':False]
['text':'		Should line up here!','line_number':1598,'multiline':False]
['text':'	    }','line_number':1599,'multiline':False]
['text':' If last character is '{' do indent, without','line_number':1610,'multiline':False]
['text':' checking for "if" and the like.','line_number':1611,'multiline':False]
['text':' do indent','line_number':1614,'multiline':False]
['text':' don't delete it when '{' typed','line_number':1615,'multiline':False]
['text':' Look for "if" and the like, use 'cinwords'.','line_number':1617,'multiline':False]
['text':' Don't do this if the previous line ended in ';' or','line_number':1618,'multiline':False]
['text':' '}'.','line_number':1619,'multiline':False]
['text':' dir == BACKWARD','line_number':1625,'multiline':False]
['text':' Skip preprocessor directives, unless they are','line_number':1627,'multiline':False]
['text':' recognised as comments.','line_number':1628,'multiline':False]
['text':' Got to end of file','line_number':1643,'multiline':False]
['text':' if line starts with '}': do indent','line_number':1648,'multiline':False]
['text':' can delete indent when '{' typed','line_number':1650,'multiline':False]
['text':' May do indenting after opening a new line.','line_number':1661,'multiline':False]
['text':' Find out if the current line starts with a comment leader.','line_number':1671,'multiline':False]
['text':' This may then be inserted in front of the new line.','line_number':1672,'multiline':False]
['text':' Check for a line comment after code.','line_number':1682,'multiline':False]
['text':' replaces comment leader','line_number':1701,'multiline':False]
['text':' length of *lead_repl','line_number':1702,'multiline':False]
['text':' middle-comment string','line_number':1703,'multiline':False]
['text':' end-comment string','line_number':1704,'multiline':False]
['text':' where lead_end has been found','line_number':1705,'multiline':False]
['text':' append extra space','line_number':1706,'multiline':False]
['text':' requires blank after middle','line_number':1708,'multiline':False]
['text':' If the comment leader has the start, middle or end flag, it may not','line_number':1711,'multiline':False]
['text':' be used or may be replaced with the middle leader.','line_number':1712,'multiline':False]
['text':' Doing "O" on a start of comment does not insert leader.','line_number':1725,'multiline':False]
['text':' find start of middle part','line_number':1732,'multiline':False]
['text':' Isolate the strings of the middle and end leader.','line_number':1737,'multiline':False]
['text':' find end of middle flags','line_number':1738,'multiline':False]
['text':' find end of end flags','line_number':1746,'multiline':False]
['text':' Check whether we allow automatic ending of comments','line_number':1748,'multiline':False]
['text':' means we want to set it','line_number':1750,'multiline':False]
['text':' we can set it now','line_number':1755,'multiline':False]
['text':' If the end of the comment is in the same line, don't use','line_number':1758,'multiline':False]
['text':' the comment leader.','line_number':1759,'multiline':False]
['text':' Doing "o" on a start of comment inserts the middle leader.','line_number':1771,'multiline':False]
['text':' If we have hit RETURN immediately after the start','line_number':1780,'multiline':False]
['text':' comment leader, then put a space after the middle','line_number':1781,'multiline':False]
['text':' comment leader on the next line.','line_number':1782,'multiline':False]
['text':' Doing "o" on the end of a comment does not insert leader.','line_number':1795,'multiline':False]
['text':' Remember where the end is, might want to use it to find the','line_number':1796,'multiline':False]
['text':' start (for C-comments).','line_number':1797,'multiline':False]
['text':' Doing "O" on the end of a comment inserts the middle leader.','line_number':1805,'multiline':False]
['text':' Find the string for the middle leader, searching backwards.','line_number':1806,'multiline':False]
['text':' We can probably always add an extra space when doing "O" on','line_number':1814,'multiline':False]
['text':' the comment-end','line_number':1815,'multiline':False]
['text':' Check whether we allow automatic ending of comments','line_number':1818,'multiline':False]
['text':' means we want to set it','line_number':1822,'multiline':False]
['text':' Find last character in end-comment string','line_number':1826,'multiline':False]
['text':' Comment leader for first line only:	Don't repeat leader','line_number':1835,'multiline':False]
['text':' when using "O", blank out leader when using "o".','line_number':1836,'multiline':False]
['text':' allocate buffer (may concatenate p_extra later)','line_number':1849,'multiline':False]
['text':' remember to free it later','line_number':1852,'multiline':False]
['text':' TODO: handle multi-byte and double width chars','line_number':1862,'multiline':False]
['text':' Replace leader with lead_repl, right or left adjusted','line_number':1867,'multiline':False]
['text':' right adjusted leader','line_number':1882,'multiline':False]
['text':' find last non-white in the leader to line up with','line_number':1884,'multiline':False]
['text':' Compute the length of the replaced characters in','line_number':1890,'multiline':False]
['text':' screen characters, not bytes.','line_number':1891,'multiline':False]
['text':' blank-out any other chars from the old leader.','line_number':1914,'multiline':False]
['text':' left adjusted leader','line_number':1936,'multiline':False]
['text':' Compute the length of the replaced characters in','line_number':1940,'multiline':False]
['text':' screen characters, not bytes. Move the part that is','line_number':1941,'multiline':False]
['text':' not to be overwritten.','line_number':1942,'multiline':False]
['text':' Replace any remaining non-white chars in the old','line_number':1964,'multiline':False]
['text':' leader by spaces.  Keep Tabs, the indent must','line_number':1965,'multiline':False]
['text':' remain the same.','line_number':1966,'multiline':False]
['text':' Don't put a space before a TAB.','line_number':1970,'multiline':False]
['text':' Replace a double-wide char with','line_number':1985,'multiline':False]
['text':' two spaces','line_number':1986,'multiline':False]
['text':' Recompute the indent, it may have changed.','line_number':2000,'multiline':False]
['text':' Add the indent offset','line_number':2010,'multiline':False]
['text':' Correct trailing spaces for the shift, so that','line_number':2019,'multiline':False]
['text':' alignment remains equal.','line_number':2020,'multiline':False]
['text':' Don't do it when there is a tab before the space','line_number':2024,'multiline':False]
['text':' If the leader ends in white space, don't add an','line_number':2031,'multiline':False]
['text':' extra space','line_number':2032,'multiline':False]
['text':' if a new indent will be set below, remove the indent that','line_number':2046,'multiline':False]
['text':' is in the comment leader','line_number':2047,'multiline':False]
['text':' We have finished a comment, so we don't use the leader.','line_number':2063,'multiline':False]
['text':' If this was a C-comment and 'ai' or 'si' is set do a normal','line_number':2064,'multiline':False]
['text':' indent to align with the line containing the start of the','line_number':2065,'multiline':False]
['text':' comment.','line_number':2066,'multiline':False]
['text':' (State == MODE_INSERT || State == MODE_REPLACE), only when dir == FORWARD','line_number':2082,'multiline':False]
['text':' restore char that NUL replaced','line_number':2085,'multiline':False]
['text':' When 'ai' set or "flags" has OPENLINE_DELSPACES, skip to the first','line_number':2087,'multiline':False]
['text':' non-blank.','line_number':2088,'multiline':False]
['text':'','line_number':2089,'multiline':False]
['text':' When in MODE_REPLACE state, put the deleted blanks on the replace','line_number':2090,'multiline':False]
['text':' stack, preceded by a NUL, so they can be put back when a BS is','line_number':2091,'multiline':False]
['text':' entered.','line_number':2092,'multiline':False]
['text':' end of extra blanks','line_number':2094,'multiline':False]
['text':' columns for marks adjusted for removed columns','line_number':2108,'multiline':False]
['text':' append empty line','line_number':2113,'multiline':False]
['text':' concatenate leader and p_extra, if there is a leader','line_number':2115,'multiline':False]
['text':' Here whitespace is inserted after the comment char.','line_number':2124,'multiline':False]
['text':' Below, set_indent(newindent, SIN_INSERT) will insert the','line_number':2125,'multiline':False]
['text':' whitespace needed before the comment char.','line_number':2126,'multiline':False]
['text':' So truncating blanks works with comments','line_number':2136,'multiline':False]
['text':' turns out there was no leader','line_number':2140,'multiline':False]
['text':' Postpone calling changed_lines(), because it would mess up folding','line_number':2150,'multiline':False]
['text':' with markers.','line_number':2151,'multiline':False]
['text':' Properties after the split move to the next line.','line_number':2156,'multiline':False]
['text':' In MODE_VREPLACE state we are starting to replace the next line.','line_number':2163,'multiline':False]
['text':' In case we NL to a new line, BS to the previous one, and NL','line_number':2167,'multiline':False]
['text':' again, we don't want to save the new line for undo twice.','line_number':2168,'multiline':False]
['text':' errors are ignored!','line_number':2169,'multiline':False]
['text':' Copy the indent','line_number':2189,'multiline':False]
['text':' Set the 'preserveindent' option so that any further screwing','line_number':2194,'multiline':False]
['text':' with the line doesn't entirely destroy our efforts to preserve','line_number':2195,'multiline':False]
['text':' it.  It gets restored at the function end.','line_number':2196,'multiline':False]
['text':' In MODE_REPLACE state, for each character in the new indent, there','line_number':2205,'multiline':False]
['text':' must be a NUL on the replace stack, for when it is deleted with BS','line_number':2206,'multiline':False]
['text':' In MODE_REPLACE state, for each character in the extra leader, there','line_number':2215,'multiline':False]
['text':' must be a NUL on the replace stack, for when it is deleted with BS.','line_number':2216,'multiline':False]
['text':' truncate current line at cursor','line_number':2227,'multiline':False]
['text':' Remove trailing white space, unless OPENLINE_KEEPTRAIL used.','line_number':2229,'multiline':False]
['text':' Move marks after the line break to the new line.','line_number':2240,'multiline':False]
['text':' Keep into account the deleted blanks on the new line.','line_number':2246,'multiline':False]
['text':' Put the cursor on the new line.  Careful: the scrollup() above may','line_number':2256,'multiline':False]
['text':' have moved w_cursor, we must use old_cursor.','line_number':2257,'multiline':False]
['text':' In MODE_VREPLACE state, we are handling the replace stack ourselves, so','line_number':2266,'multiline':False]
['text':' stop fixthisline() from doing it (via change_indent()) by telling it','line_number':2267,'multiline':False]
['text':' we're in normal MODE_INSERT state.','line_number':2268,'multiline':False]
['text':' So we know to put things right later','line_number':2271,'multiline':False]
['text':' do lisp indenting','line_number':2284,'multiline':False]
['text':' do 'cindent' or 'indentexpr' indenting','line_number':2290,'multiline':False]
['text':' Finally, MODE_VREPLACE gets the stuff on the new line, then puts back','line_number':2299,'multiline':False]
['text':' the original line, and inserts the new stuff char by char, pushing old','line_number':2300,'multiline':False]
['text':' stuff onto the replace stack (via ins_char()).','line_number':2301,'multiline':False]
['text':' Put new line in p_extra','line_number':2304,'multiline':False]
['text':' Put back original line','line_number':2309,'multiline':False]
['text':' Insert new stuff into line again','line_number':2312,'multiline':False]
['text':' will call changed_bytes()','line_number':2315,'multiline':False]
['text':' success!','line_number':2320,'multiline':False]
['text':'
 * Delete from cursor to end of line.
 * Caller must have prepared for undo.
 * If "fixpos" is TRUE fix the cursor position when done.
 *
 * Return FAIL for failure, OK otherwise.
 ','line_number':2329,'multiline':True]
['text':' mark the buffer as changed and prepare for displaying','line_number':2357,'multiline':False]
['text':' If "fixpos" is TRUE we don't want to end up positioned at the NUL.','line_number':2360,'multiline':False]
['text':'
 * Delete "nlines" lines at the cursor.
 * Saves the lines for undo first if "undo" is TRUE.
 ','line_number':2367,'multiline':True]
['text':' save the deleted lines for undo','line_number':2380,'multiline':False]
['text':' nothing to delete','line_number':2386,'multiline':False]
['text':' If we delete the last line in the file, stop','line_number':2392,'multiline':False]
['text':' Correct the cursor position before calling deleted_lines_mark(), it may','line_number':2397,'multiline':False]
['text':' trigger a callback to display the cursor.','line_number':2398,'multiline':False]
['text':' adjust marks, mark the buffer as changed and prepare for displaying','line_number':2402,'multiline':False]
