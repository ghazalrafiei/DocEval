['text':' vi:set ts=8 sts=4 sw=4 noet:
 *
 * VIM - Vi IMproved	by Bram Moolenaar
 *
 * Do ":help uganda"  in Vim to read copying and usage conditions.
 * Do ":help credits" in Vim to see a list of people who contributed.
 ','line_number':1,'multiline':True]
['text':'
 * This file contains various definitions of structures that are used by Vim
 ','line_number':9,'multiline':True]
['text':'
 * There is something wrong in the SAS compiler that makes typedefs not
 * valid in include files.  Has been fixed in version 6.58.
 ','line_number':13,'multiline':True]
['text':'
 * Position in file or buffer.
 ','line_number':23,'multiline':True]
['text':' line number','line_number':28,'multiline':False]
['text':' column number','line_number':29,'multiline':False]
['text':' extra virtual column','line_number':30,'multiline':False]
['text':'
 * Same, but without coladd.
 ','line_number':34,'multiline':True]
['text':' line number','line_number':39,'multiline':False]
['text':' column number','line_number':40,'multiline':False]
['text':'
 * Structure used for growing arrays.
 * This is used to store information that only grows, is deleted all at
 * once, and needs to be accessed by index.  See ga_clear() and ga_grow().
 ','line_number':43,'multiline':True]
['text':' current number of items used','line_number':50,'multiline':False]
['text':' maximum number of items possible','line_number':51,'multiline':False]
['text':' sizeof(item)','line_number':52,'multiline':False]
['text':' number of items to grow each time','line_number':53,'multiline':False]
['text':' pointer to the first item','line_number':54,'multiline':False]
['text':' script ID','line_number':62,'multiline':False]
['text':' forward declaration','line_number':63,'multiline':False]
['text':' maximum value for sc_version','line_number':70,'multiline':False]
['text':' value for sc_version in a Vim9 script file','line_number':72,'multiline':False]
['text':'
 * SCript ConteXt (SCTX): identifies a script line.
 * When sourcing a script "sc_lnum" is zero, "sourcing_lnum" is the current
 * line number. When executing a user function "sc_lnum" is the line where the
 * function was defined, "sourcing_lnum" is the line number inside the
 * function.  When stored with a function, mapping, option, etc. "sc_lnum" is
 * the line number in the script "sc_sid".
 *
 * sc_version is also here, for convenience.
 ','line_number':75,'multiline':True]
['text':' script ID','line_number':87,'multiline':False]
['text':' sourcing sequence number','line_number':88,'multiline':False]
['text':' line number','line_number':89,'multiline':False]
['text':' :scriptversion','line_number':91,'multiline':False]
['text':'
 * Reference to a buffer that stores the value of buf_free_count.
 * bufref_valid() only needs to check "buf" when the count differs.
 ','line_number':94,'multiline':True]
['text':'
 * This is here because regexp.h needs pos_T and below regprog_T is used.
 ','line_number':104,'multiline':True]
['text':'
 * This is here because gui.h needs the pos_T and win_T, and win_T needs gui.h
 * for scrollbar_T.
 ','line_number':109,'multiline':True]
['text':' only used for cterm.bg_rgb and cterm.fg_rgb: use cterm color','line_number':121,'multiline':False]
['text':'
 * marks: positions in a file
 * (a normal mark is a lnum/col pair, the same as a file position)
 ','line_number':134,'multiline':True]
['text':' max. # of named marks','line_number':139,'multiline':False]
['text':' marks 0-9','line_number':140,'multiline':False]
['text':' max. # of marks in jump list','line_number':141,'multiline':False]
['text':' max. # of tags in tag stack','line_number':142,'multiline':False]
['text':' cursor position','line_number':146,'multiline':False]
['text':' file number','line_number':147,'multiline':False]
['text':' Xtended file mark: also has a file name','line_number':150,'multiline':False]
['text':' file name, used when fnum == 0','line_number':154,'multiline':False]
['text':'
 * The taggy struct is used to store the information about a :tag command.
 ','line_number':160,'multiline':True]
['text':' tag name','line_number':165,'multiline':False]
['text':' cursor position BEFORE ":tag"','line_number':166,'multiline':False]
['text':' match number','line_number':167,'multiline':False]
['text':' buffer number used for cur_match','line_number':168,'multiline':False]
['text':' used with tagfunc','line_number':169,'multiline':False]
['text':'
 * Structure that contains all options that are local to a window.
 * Used twice in a window: for the current buffer and for all buffers.
 * Also used in wininfo_T.
 ','line_number':172,'multiline':True]
['text':' 'arabic'','line_number':181,'multiline':False]
['text':' 'breakindent'','line_number':185,'multiline':False]
['text':' 'breakindentopt'','line_number':187,'multiline':False]
['text':' 'wincolor'','line_number':190,'multiline':False]
['text':' 'diff'','line_number':193,'multiline':False]
['text':' 'foldcolumn'','line_number':197,'multiline':False]
['text':' 'foldenable' saved for diff mode','line_number':199,'multiline':False]
['text':' 'foldenable'','line_number':201,'multiline':False]
['text':' 'foldenable' saved for diff mode','line_number':203,'multiline':False]
['text':' 'foldignore'','line_number':205,'multiline':False]
['text':' 'foldlevel'','line_number':207,'multiline':False]
['text':' 'foldlevel' state saved for diff mode','line_number':209,'multiline':False]
['text':' 'foldmethod'','line_number':211,'multiline':False]
['text':' 'fdm' saved for diff mode','line_number':213,'multiline':False]
['text':' 'foldminlines'','line_number':215,'multiline':False]
['text':' 'foldnestmax'','line_number':217,'multiline':False]
['text':' 'foldexpr'','line_number':220,'multiline':False]
['text':' 'foldtext'','line_number':222,'multiline':False]
['text':' 'foldmarker'','line_number':225,'multiline':False]
['text':' 'linebreak'','line_number':229,'multiline':False]
['text':' 'list'','line_number':232,'multiline':False]
['text':' 'listchars'','line_number':234,'multiline':False]
['text':' 'fillchars'','line_number':236,'multiline':False]
['text':' 'number'','line_number':238,'multiline':False]
['text':' 'relativenumber'','line_number':240,'multiline':False]
['text':' 'virtualedit'','line_number':242,'multiline':False]
['text':' flags for 'virtualedit'','line_number':244,'multiline':False]
['text':' 'numberwidth'','line_number':247,'multiline':False]
['text':' 'winfixheight'','line_number':250,'multiline':False]
['text':' 'winfixwidth'','line_number':252,'multiline':False]
['text':' 'previewwindow'','line_number':255,'multiline':False]
['text':' 'rightleft'','line_number':259,'multiline':False]
['text':' 'rightleftcmd'','line_number':261,'multiline':False]
['text':' 'scroll'','line_number':264,'multiline':False]
['text':' 'smoothscroll'','line_number':266,'multiline':False]
['text':' 'spell'','line_number':269,'multiline':False]
['text':' 'cursorcolumn'','line_number':273,'multiline':False]
['text':' 'cursorline'','line_number':275,'multiline':False]
['text':' 'cursorlineopt'','line_number':277,'multiline':False]
['text':' 'colorcolumn'','line_number':279,'multiline':False]
['text':' 'showbreak'','line_number':283,'multiline':False]
['text':' 'statusline'','line_number':287,'multiline':False]
['text':' 'scrollbind'','line_number':290,'multiline':False]
['text':' options were saved for starting diff mode','line_number':291,'multiline':False]
['text':' 'scrollbind' saved for diff mode','line_number':293,'multiline':False]
['text':' 'wrap'','line_number':296,'multiline':False]
['text':' 'wrap' state saved for diff mode','line_number':298,'multiline':False]
['text':' 'concealcursor'','line_number':302,'multiline':False]
['text':' 'conceallevel'','line_number':304,'multiline':False]
['text':' 'cursorbind'','line_number':308,'multiline':False]
['text':' 'cursorbind' state saved for diff mode','line_number':309,'multiline':False]
['text':' 'signcolumn'','line_number':313,'multiline':False]
['text':' 'sidescrolloff' local value','line_number':316,'multiline':False]
['text':' 'scrolloff' local value','line_number':318,'multiline':False]
['text':' 'termwinkey'','line_number':321,'multiline':False]
['text':' 'termwinsize'','line_number':323,'multiline':False]
['text':' SCTXs for window-local options','line_number':327,'multiline':False]
['text':'
 * Window info stored with a buffer.
 *
 * Two types of info are kept for a buffer which are associated with a
 * specific window:
 * 1. Each window can have a different line number associated with a buffer.
 * 2. The window-local options for a buffer work in a similar way.
 * The window-info is kept in a list at b_wininfo.  It is kept in
 * most-recently-used order.
 ','line_number':332,'multiline':True]
['text':' next entry or NULL for last entry','line_number':344,'multiline':False]
['text':' previous entry or NULL for first entry','line_number':345,'multiline':False]
['text':' pointer to window that did set wi_fpos','line_number':346,'multiline':False]
['text':' last cursor position in the file','line_number':347,'multiline':False]
['text':' local window options','line_number':348,'multiline':False]
['text':' TRUE when wi_opt has useful values','line_number':349,'multiline':False]
['text':' copy of w_fold_manual','line_number':351,'multiline':False]
['text':' clone of w_folds','line_number':352,'multiline':False]
['text':' copy of w_changelistidx','line_number':354,'multiline':False]
['text':'
 * Info used to pass info about a fold from the fold-detection code to the
 * code that displays the foldcolumn.
 ','line_number':357,'multiline':True]
['text':' level of the fold; when this is zero the','line_number':363,'multiline':False]
['text':' other fields are invalid','line_number':364,'multiline':False]
['text':' line number where fold starts','line_number':365,'multiline':False]
['text':' lowest fold level that starts in the same','line_number':366,'multiline':False]
['text':' line','line_number':367,'multiline':False]
['text':'
 * Structure to store info about the Visual area.
 ','line_number':370,'multiline':True]
['text':' start pos of last VIsual','line_number':375,'multiline':False]
['text':' end position of last VIsual','line_number':376,'multiline':False]
['text':' VIsual_mode of last VIsual','line_number':377,'multiline':False]
['text':' MAXCOL from w_curswant','line_number':378,'multiline':False]
['text':'
 * structures used for undo
 ','line_number':381,'multiline':True]
['text':' One line saved for undo.  After the NUL terminated text there might be text','line_number':385,'multiline':False]
['text':' properties, thus ul_len can be larger than STRLEN(ul_line) + 1.','line_number':386,'multiline':False]
['text':' text of the line','line_number':388,'multiline':False]
['text':' length of the line including NUL, plus text','line_number':389,'multiline':False]
['text':' properties','line_number':390,'multiline':False]
['text':' pointer to next entry in list','line_number':397,'multiline':False]
['text':' number of line above undo block','line_number':398,'multiline':False]
['text':' number of line below undo block','line_number':399,'multiline':False]
['text':' linecount when u_save called','line_number':400,'multiline':False]
['text':' array of lines in undo block','line_number':401,'multiline':False]
['text':' number of lines in ue_array','line_number':402,'multiline':False]
['text':' magic number to check allocation','line_number':404,'multiline':False]
['text':' The following have a pointer and a number. The number is used when','line_number':410,'multiline':False]
['text':' reading the undo file in u_read_undo()','line_number':411,'multiline':False]
['text':' pointer to next undo header in list','line_number':413,'multiline':False]
['text':' pointer to previous header in list','line_number':417,'multiline':False]
['text':' pointer to next header for alt. redo','line_number':421,'multiline':False]
['text':' pointer to previous header for alt. redo','line_number':425,'multiline':False]
['text':' sequence number, higher == newer undo','line_number':428,'multiline':False]
['text':' used by undo_time()','line_number':429,'multiline':False]
['text':' pointer to first entry','line_number':430,'multiline':False]
['text':' pointer to where ue_bot must be set','line_number':431,'multiline':False]
['text':' cursor position before saving','line_number':432,'multiline':False]
['text':' see below','line_number':434,'multiline':False]
['text':' marks before undo/after redo','line_number':435,'multiline':False]
['text':' Visual areas before undo/after redo','line_number':436,'multiline':False]
['text':' timestamp when the change was made','line_number':437,'multiline':False]
['text':' set when the file was saved after the','line_number':438,'multiline':False]
['text':' changes in this block','line_number':439,'multiline':False]
['text':' magic number to check allocation','line_number':441,'multiline':False]
['text':' values for uh_flags','line_number':445,'multiline':False]
['text':' b_changed flag before undo/after redo','line_number':446,'multiline':False]
['text':' buffer was empty','line_number':447,'multiline':False]
['text':'
 * structures used in undo.c
 ','line_number':449,'multiline':True]
['text':' longword alignment and use filler byte','line_number':452,'multiline':False]
['text':'
 * structure used to link chunks in one of the free chunk lists.
 ','line_number':459,'multiline':True]
['text':' size of the chunk (including m_info)','line_number':465,'multiline':False]
['text':' size of the chunk (including m_info)','line_number':467,'multiline':False]
['text':' pointer to next free chunk in the list','line_number':469,'multiline':False]
['text':'
 * things used in memfile.c
 ','line_number':472,'multiline':True]
['text':'
 * mf_hashtab_T is a chained hashtable with blocknr_T key and arbitrary
 * structures as items.  This is an intrusive data structure: we require
 * that items begin with mf_hashitem_T which contains the key and linked
 * list pointers.  List of items in each bucket is doubly-linked.
 ','line_number':480,'multiline':True]
['text':' mask used for hash value (nr of items','line_number':500,'multiline':False]
['text':' in array is "mht_mask" + 1)','line_number':501,'multiline':False]
['text':' nr of items inserted into hashtable','line_number':502,'multiline':False]
['text':' points to mht_small_buckets or','line_number':503,'multiline':False]
['text':'dynamically allocated array','line_number':504,'multiline':False]
['text':' initial buckets','line_number':505,'multiline':False]
['text':' non-zero value forbids growth','line_number':506,'multiline':False]
['text':'
 * for each (previously) used block in the memfile there is one block header.
 *
 * The block may be linked in the used list OR in the free list.
 * The used blocks are also kept in hash lists.
 *
 * The used list is a doubly linked list, most recently used block first.
 *	The blocks in the used list have a block of memory allocated.
 *	mf_used_count is the number of pages in the used list.
 * The hash lists are used to quickly find a block in the used list.
 * The free list is a single linked list, not sorted.
 *	The blocks in the free list have no block of memory allocated and
 *	the contents of the block in the file (if any) is irrelevant.
 ','line_number':509,'multiline':True]
['text':' header for hash table and key','line_number':526,'multiline':False]
['text':' block number, part of bh_hashitem','line_number':527,'multiline':False]
['text':' next block_hdr in free or used list','line_number':529,'multiline':False]
['text':' previous block_hdr in used list','line_number':530,'multiline':False]
['text':' pointer to memory (for used block)','line_number':531,'multiline':False]
['text':' number of pages in this block','line_number':532,'multiline':False]
['text':' BH_DIRTY or BH_LOCKED','line_number':536,'multiline':False]
['text':'
 * when a block with a negative number is flushed to the file, it gets
 * a positive number. Because the reference to the block is still the negative
 * number, we remember the translation to the new positive number in the
 * double linked trans lists. The structure is the same as the hash lists.
 ','line_number':539,'multiline':True]
['text':' header for hash table and key','line_number':549,'multiline':False]
['text':' old, negative, number','line_number':550,'multiline':False]
['text':' new, positive, number','line_number':552,'multiline':False]
['text':'
 * structure used to store one block of the stuff/redo/recording buffers
 ','line_number':559,'multiline':True]
['text':' pointer to next buffblock','line_number':564,'multiline':False]
['text':' contents (actually longer)','line_number':565,'multiline':False]
['text':'
 * header used for the stuff buffer and the redo buffer
 ','line_number':568,'multiline':True]
['text':' first (dummy) block of list','line_number':573,'multiline':False]
['text':' buffblock for appending','line_number':574,'multiline':False]
['text':' index for reading','line_number':575,'multiline':False]
['text':' space in bh_curr for appending','line_number':576,'multiline':False]
['text':' prefix not used','line_number':586,'multiline':False]
['text':' "no" prefix for bool option','line_number':587,'multiline':False]
['text':' "inv" prefix for bool option','line_number':588,'multiline':False]
['text':'
 * :set operator types
 ','line_number':591,'multiline':True]
['text':' "opt+=arg"','line_number':596,'multiline':False]
['text':' "opt^=arg"','line_number':597,'multiline':False]
['text':' "opt-=arg"','line_number':598,'multiline':False]
['text':'
 * used for completion on the command line
 ','line_number':601,'multiline':True]
['text':' start of item to expand, guaranteed','line_number':606,'multiline':False]
['text':' to be part of xp_line','line_number':607,'multiline':False]
['text':' type of expansion','line_number':608,'multiline':False]
['text':' bytes in xp_pattern before cursor','line_number':609,'multiline':False]
['text':' completion function','line_number':612,'multiline':False]
['text':' SCTX for completion function','line_number':613,'multiline':False]
['text':' one of the XP_BS_ values','line_number':615,'multiline':False]
['text':' TRUE for a shell command, more','line_number':617,'multiline':False]
['text':' characters need to be escaped','line_number':618,'multiline':False]
['text':' number of files found by','line_number':620,'multiline':False]
['text':' file name completion','line_number':621,'multiline':False]
['text':' cursor position in line','line_number':622,'multiline':False]
['text':' selected index in completion','line_number':623,'multiline':False]
['text':' originally expanded string','line_number':624,'multiline':False]
['text':' list of files','line_number':625,'multiline':False]
['text':' text being completed','line_number':626,'multiline':False]
['text':' buffer for returned match','line_number':628,'multiline':False]
['text':'
 * values for xp_backslash
 ','line_number':631,'multiline':True]
['text':' nothing special for backslashes','line_number':634,'multiline':False]
['text':' uses one backslash before a space','line_number':635,'multiline':False]
['text':' uses three backslashes before a space','line_number':636,'multiline':False]
['text':' commas need to be escaped with a backslash','line_number':637,'multiline':False]
['text':'
 * Variables shared between getcmdline(), redrawcmdline() and others.
 * These need to be saved when using CTRL-R |, that's why they are in a
 * structure.
 ','line_number':639,'multiline':True]
['text':' pointer to command line buffer','line_number':646,'multiline':False]
['text':' length of cmdbuff','line_number':647,'multiline':False]
['text':' number of chars in command line','line_number':648,'multiline':False]
['text':' current cursor position','line_number':649,'multiline':False]
['text':' cursor column on screen','line_number':650,'multiline':False]
['text':' ':', '/', '?', '=', '>' or NUL','line_number':651,'multiline':False]
['text':' number of spaces before cmdline','line_number':652,'multiline':False]
['text':' message in front of cmdline','line_number':653,'multiline':False]
['text':' attributes for prompt','line_number':654,'multiline':False]
['text':' Typing mode on the command line.  Shared by','line_number':655,'multiline':False]
['text':' getcmdline() and put_on_cmdline().','line_number':656,'multiline':False]
['text':' struct being used for expansion, xp_pattern','line_number':657,'multiline':False]
['text':' may point into cmdbuff','line_number':658,'multiline':False]
['text':' type of expansion','line_number':659,'multiline':False]
['text':' user-defined expansion arg','line_number':661,'multiline':False]
['text':' when TRUE Invoked for input() function','line_number':662,'multiline':False]
['text':'
 * Command modifiers ":vertical", ":browse", ":confirm" and ":hide" set a flag.
 * This needs to be saved for recursive commands, put them in a structure for
 * easy manipulation.
 ','line_number':666,'multiline':True]
['text':' CMOD_ flags','line_number':673,'multiline':False]
['text':' ":sandbox"','line_number':674,'multiline':False]
['text':' ":silent"','line_number':675,'multiline':False]
['text':' ":silent!"','line_number':676,'multiline':False]
['text':' ":unsilent"','line_number':677,'multiline':False]
['text':' ":noautocmd"','line_number':678,'multiline':False]
['text':' ":hide"','line_number':679,'multiline':False]
['text':' ":browse" - invoke file dialog','line_number':680,'multiline':False]
['text':' ":confirm" - invoke yes/no dialog','line_number':681,'multiline':False]
['text':' ":keepalt"','line_number':682,'multiline':False]
['text':' ":keepmarks"','line_number':683,'multiline':False]
['text':' ":keepjumps"','line_number':684,'multiline':False]
['text':' ":lockmarks"','line_number':685,'multiline':False]
['text':' ":keeppatterns"','line_number':686,'multiline':False]
['text':' ":noswapfile"','line_number':687,'multiline':False]
['text':' ":vim9cmd"','line_number':688,'multiline':False]
['text':' ":legacy"','line_number':689,'multiline':False]
['text':' flags for win_split()','line_number':691,'multiline':False]
['text':' > 0 when ":tab" was used','line_number':692,'multiline':False]
['text':' set by :filter /pat/','line_number':693,'multiline':False]
['text':' set for :filter!','line_number':694,'multiline':False]
['text':' 0 if not set, > 0 to set 'verbose'','line_number':696,'multiline':False]
['text':' to cmod_verbose - 1','line_number':697,'multiline':False]
['text':' values for undo_cmdmod()','line_number':699,'multiline':False]
['text':' saved value of 'eventignore'','line_number':700,'multiline':False]
['text':' set when "sandbox" was incremented','line_number':702,'multiline':False]
['text':' if 'verbose' was set: value of','line_number':704,'multiline':False]
['text':' p_verbose plus one','line_number':705,'multiline':False]
['text':' if non-zero: saved value of','line_number':706,'multiline':False]
['text':' msg_silent + 1','line_number':707,'multiline':False]
['text':' for restoring msg_scroll','line_number':708,'multiline':False]
['text':' incremented when emsg_silent is','line_number':709,'multiline':False]
['text':' no dirty blocks','line_number':713,'multiline':False]
['text':' there are dirty blocks','line_number':714,'multiline':False]
['text':' there are dirty blocks, do not sync yet','line_number':715,'multiline':False]
['text':' name of the file','line_number':722,'multiline':False]
['text':' idem, full path','line_number':723,'multiline':False]
['text':' file descriptor','line_number':724,'multiline':False]
['text':' flags used when opening this memfile','line_number':725,'multiline':False]
['text':' mf_fd was closed, retry opening','line_number':726,'multiline':False]
['text':' first block_hdr in free list','line_number':727,'multiline':False]
['text':' mru block_hdr in used list','line_number':728,'multiline':False]
['text':' lru block_hdr in used list','line_number':729,'multiline':False]
['text':' number of pages in used list','line_number':730,'multiline':False]
['text':' maximum number of pages in memory','line_number':731,'multiline':False]
['text':' hash lists','line_number':732,'multiline':False]
['text':' trans lists','line_number':733,'multiline':False]
['text':' highest positive block number + 1','line_number':734,'multiline':False]
['text':' lowest negative block number - 1','line_number':735,'multiline':False]
['text':' number of negative blocks numbers','line_number':736,'multiline':False]
['text':' number of pages in the file','line_number':737,'multiline':False]
['text':' number of bytes in a page','line_number':738,'multiline':False]
['text':' buffer this memfile is for','line_number':741,'multiline':False]
['text':' seed for encryption','line_number':742,'multiline':False]
['text':' Values for key, method and seed used for reading data blocks when','line_number':744,'multiline':False]
['text':' updating for a newly set key or method. Only when mf_old_key != NULL.','line_number':745,'multiline':False]
['text':'
 * things used in memline.c
 ','line_number':752,'multiline':True]
['text':'
 * When searching for a specific line, we remember what blocks in the tree
 * are the branches leading to that block. This is stored in ml_stack.  Each
 * entry is a pointer to info in a block (may be data block or pointer block)
 ','line_number':755,'multiline':True]
['text':' block number','line_number':762,'multiline':False]
['text':' lowest lnum in this block','line_number':763,'multiline':False]
['text':' highest lnum in this block','line_number':764,'multiline':False]
['text':' index for block with current lnum','line_number':765,'multiline':False]
['text':' block/index pair','line_number':766,'multiline':False]
['text':'
 * Flags when calling ml_updatechunk()
 ','line_number':775,'multiline':True]
['text':'
 * the memline structure holds all the information about a memline
 ','line_number':783,'multiline':True]
['text':' number of lines in the buffer','line_number':788,'multiline':False]
['text':' pointer to associated memfile','line_number':790,'multiline':False]
['text':' stack of pointer blocks (array of IPTRs)','line_number':792,'multiline':False]
['text':' current top of ml_stack','line_number':793,'multiline':False]
['text':' total number of entries in ml_stack','line_number':794,'multiline':False]
['text':' empty buffer','line_number':796,'multiline':False]
['text':' cached line was changed and allocated','line_number':797,'multiline':False]
['text':' ml_locked was changed','line_number':798,'multiline':False]
['text':' ml_locked needs positive block number','line_number':799,'multiline':False]
['text':' ml_line_ptr is an allocated copy','line_number':800,'multiline':False]
['text':' length of the cached line, including NUL','line_number':803,'multiline':False]
['text':' line number of cached line, 0 if not valid','line_number':804,'multiline':False]
['text':' pointer to cached line','line_number':805,'multiline':False]
['text':' block used by last ml_get','line_number':807,'multiline':False]
['text':' first line in ml_locked','line_number':808,'multiline':False]
['text':' last line in ml_locked','line_number':809,'multiline':False]
['text':' number of lines inserted in ml_locked','line_number':810,'multiline':False]
['text':' Values for the flags argument of ml_delete_flags().','line_number':818,'multiline':False]
['text':' may give a "No lines in buffer" message','line_number':819,'multiline':False]
['text':' called from undo, do not update textprops','line_number':820,'multiline':False]
['text':' splitting data block, do not update textprops','line_number':821,'multiline':False]
['text':' Values for the flags argument of ml_append_int().','line_number':823,'multiline':False]
['text':' starting to edit a new file','line_number':824,'multiline':False]
['text':' mark the new line','line_number':825,'multiline':False]
['text':' called from undo','line_number':826,'multiline':False]
['text':' do not continue textprop from previous line','line_number':827,'multiline':False]
['text':'
 * Structure defining text properties.  These stick with the text.
 * When stored in memline they are after the text, ml_line_len is larger than
 * STRLEN(ml_line_ptr) + 1.
 ','line_number':830,'multiline':True]
['text':' start column (one based, in bytes)','line_number':837,'multiline':False]
['text':' length in bytes, when tp_id is negative used','line_number':838,'multiline':False]
['text':' for left padding plus one','line_number':839,'multiline':False]
['text':' identifier','line_number':840,'multiline':False]
['text':' property type','line_number':841,'multiline':False]
['text':' TP_FLAG_ values','line_number':842,'multiline':False]
['text':' left padding between text line and virtual','line_number':843,'multiline':False]
['text':' text','line_number':844,'multiline':False]
['text':' property continues in next line','line_number':847,'multiline':False]
['text':' property was continued from prev line','line_number':848,'multiline':False]
['text':' without these text is placed after the end of the line','line_number':850,'multiline':False]
['text':' virtual text is right-aligned','line_number':851,'multiline':False]
['text':' virtual text above the line','line_number':852,'multiline':False]
['text':' virtual text on next screen line','line_number':853,'multiline':False]
['text':' virtual text wraps - when missing','line_number':855,'multiline':False]
['text':' text is truncated','line_number':856,'multiline':False]
['text':' "start_incl" copied from proptype','line_number':857,'multiline':False]
['text':' minimum number of cells to use for','line_number':859,'multiline':False]
['text':' the text, even when truncating','line_number':860,'multiline':False]
['text':'
 * Structure defining a property type.
 ','line_number':862,'multiline':True]
['text':' value used for tp_id','line_number':867,'multiline':False]
['text':' number used for tp_type','line_number':868,'multiline':False]
['text':' highlighting','line_number':869,'multiline':False]
['text':' priority','line_number':870,'multiline':False]
['text':' PT_FLAG_ values','line_number':871,'multiline':False]
['text':' property type name, actually longer','line_number':872,'multiline':False]
['text':' insert at start included in property','line_number':875,'multiline':False]
['text':' insert at end included in property','line_number':876,'multiline':False]
['text':' combine with syntax highlight','line_number':877,'multiline':False]
['text':' override any highlight','line_number':878,'multiline':False]
['text':' Sign group','line_number':880,'multiline':False]
['text':' next sign id for this group','line_number':883,'multiline':False]
['text':' number of signs in this group','line_number':884,'multiline':False]
['text':' sign group name, actually longer','line_number':885,'multiline':False]
['text':' unique identifier for each placed sign','line_number':891,'multiline':False]
['text':' typenr of sign','line_number':892,'multiline':False]
['text':' priority for highlighting','line_number':893,'multiline':False]
['text':' line number which has this sign','line_number':894,'multiline':False]
['text':' sign group','line_number':895,'multiline':False]
['text':' next entry in a list of signs','line_number':896,'multiline':False]
['text':' previous entry -- for easy reordering','line_number':897,'multiline':False]
['text':'
 * Sign attributes. Used by the screen refresh routines.
 ','line_number':900,'multiline':True]
['text':' Macros to get the sign group structure from the group name','line_number':915,'multiline':False]
['text':' Default sign priority for highlighting','line_number':919,'multiline':False]
['text':'
 * Argument list: Array of file names.
 * Used for the global argument list and the argument lists local to a window.
 ','line_number':924,'multiline':True]
['text':' growarray with the array of file names','line_number':930,'multiline':False]
['text':' number of windows using this arglist','line_number':931,'multiline':False]
['text':' id of this arglist','line_number':932,'multiline':False]
['text':'
 * For each argument remember the file name as it was given, and the buffer
 * number that contains the expanded file name (required for when ":cd" is
 * used).
 ','line_number':935,'multiline':True]
['text':' file name as specified','line_number':942,'multiline':False]
['text':' buffer number with expanded file name','line_number':943,'multiline':False]
['text':'
 * A list used for saving values of "emsg_silent".  Used by ex_try() to save the
 * value of "emsg_silent" if it was non-zero.  When this is done, the CSF_SILENT
 * flag below is set.
 ','line_number':955,'multiline':True]
['text':' saved value of "emsg_silent"','line_number':964,'multiline':False]
['text':' next element on the list','line_number':965,'multiline':False]
['text':'
 * For conditional commands a stack is kept of nested conditionals.
 * When cs_idx < 0, there is no conditional command.
 ','line_number':968,'multiline':True]
['text':' CSF_ flags','line_number':975,'multiline':False]
['text':' CSTP_: what's pending in ":finally"','line_number':976,'multiline':False]
['text':' return typeval for pending return','line_number':978,'multiline':False]
['text':' exception for pending throw','line_number':979,'multiline':False]
['text':' info used by ":for"','line_number':981,'multiline':False]
['text':' line nr of ":while"/":for" line','line_number':982,'multiline':False]
['text':' block ID stack','line_number':983,'multiline':False]
['text':' value of sn_var_vals.ga_len','line_number':984,'multiline':False]
['text':' when entering the block','line_number':985,'multiline':False]
['text':' current entry, or -1 if none','line_number':986,'multiline':False]
['text':' nr of nested ":while"s and ":for"s','line_number':987,'multiline':False]
['text':' nr of nested ":try"s','line_number':988,'multiline':False]
['text':' saved values of "emsg_silent"','line_number':989,'multiline':False]
['text':' loop flags: CSL_ flags','line_number':990,'multiline':False]
['text':' There is no CSF_IF, the lack of CSF_WHILE, CSF_FOR and CSF_TRY means ":if"','line_number':995,'multiline':False]
['text':' was used.','line_number':996,'multiline':False]
['text':' condition was TRUE','line_number':997,'multiline':False]
['text':' current state is active','line_number':998,'multiline':False]
['text':' ":else" has been passed','line_number':999,'multiline':False]
['text':' is a ":while"','line_number':1000,'multiline':False]
['text':' is a ":for"','line_number':1001,'multiline':False]
['text':' is a "{" block','line_number':1002,'multiline':False]
['text':' is a ":try"','line_number':1004,'multiline':False]
['text':' ":finally" has been passed','line_number':1005,'multiline':False]
['text':' ":catch" has been seen','line_number':1006,'multiline':False]
['text':' exception thrown to this try conditional','line_number':1007,'multiline':False]
['text':' exception caught by this try conditional','line_number':1008,'multiline':False]
['text':' CSF_CAUGHT was handled by finish_exception()','line_number':1009,'multiline':False]
['text':' "emsg_silent" reset by ":try"','line_number':1010,'multiline':False]
['text':' Note that CSF_ELSE is only used when CSF_TRY and CSF_WHILE are unset','line_number':1011,'multiline':False]
['text':' (an ":if"), and CSF_SILENT is only used when CSF_TRY is set.','line_number':1012,'multiline':False]
['text':' a function was defined in this block','line_number':1014,'multiline':False]
['text':'
 * What's pending for being reactivated at the ":endtry" of this try
 * conditional:
 ','line_number':1016,'multiline':True]
['text':' nothing pending in ":finally" clause','line_number':1020,'multiline':False]
['text':' an error is pending','line_number':1021,'multiline':False]
['text':' an interrupt is pending','line_number':1022,'multiline':False]
['text':' a throw is pending','line_number':1023,'multiline':False]
['text':' ":break" is pending','line_number':1024,'multiline':False]
['text':' ":continue" is pending','line_number':1025,'multiline':False]
['text':' ":return" is pending','line_number':1026,'multiline':False]
['text':' ":finish" is pending','line_number':1027,'multiline':False]
['text':'
 * Flags for the cs_lflags item in cstack_T.
 ','line_number':1029,'multiline':True]
['text':' just found ":while" or ":for"','line_number':1032,'multiline':False]
['text':' just found ":endwhile" or ":endfor"','line_number':1033,'multiline':False]
['text':' just found ":continue"','line_number':1034,'multiline':False]
['text':' just found ":finally"','line_number':1035,'multiline':False]
['text':'
 * A list of error messages that can be converted to an exception.  "throw_msg"
 * is only set in the first element of the list.  Usually, it points to the
 * original message stored in that element, but sometimes it points to a later
 * message in the list.  See cause_errthrow().
 ','line_number':1037,'multiline':True]
['text':' next of several messages in a row','line_number':1046,'multiline':False]
['text':' original message, allocated','line_number':1047,'multiline':False]
['text':' msg to throw: usually original one','line_number':1048,'multiline':False]
['text':' value from estack_sfile(), allocated','line_number':1049,'multiline':False]
['text':' line number for "sfile"','line_number':1050,'multiline':False]
['text':' saved value of estack_compiling','line_number':1051,'multiline':False]
['text':'
 * The exception types.
 ','line_number':1054,'multiline':True]
['text':' exception caused by ":throw" command','line_number':1059,'multiline':False]
['text':' error exception','line_number':1060,'multiline':False]
['text':' interrupt exception triggered by Ctrl-C','line_number':1061,'multiline':False]
['text':'
 * Structure describing an exception.
 * (don't use "struct exception", it's used by the math library).
 ','line_number':1064,'multiline':True]
['text':' exception type','line_number':1071,'multiline':False]
['text':' exception value','line_number':1072,'multiline':False]
['text':' message(s) causing error exception','line_number':1073,'multiline':False]
['text':' name of the throw point','line_number':1074,'multiline':False]
['text':' line number of the throw point','line_number':1075,'multiline':False]
['text':' next exception on the caught stack','line_number':1076,'multiline':False]
['text':'
 * Structure to save the error/interrupt/exception state between calls to
 * enter_cleanup() and leave_cleanup().  Must be allocated as an automatic
 * variable by the (common) caller of these functions.
 ','line_number':1079,'multiline':True]
['text':' error/interrupt/exception state','line_number':1087,'multiline':False]
['text':' exception value','line_number':1088,'multiline':False]
['text':'
 * Exception state that is saved and restored when calling timer callback
 * functions and deferred functions.
 ','line_number':1091,'multiline':True]
['text':' struct passed to in_id_list()','line_number':1106,'multiline':False]
['text':' ":syn include" unique tag','line_number':1109,'multiline':False]
['text':' highlight group ID of item','line_number':1110,'multiline':False]
['text':' cont.in group IDs, if non-zero','line_number':1111,'multiline':False]
['text':'
 * Each keyword has one keyentry, which is linked in a hash list.
 ','line_number':1114,'multiline':True]
['text':' next entry with identical "keyword[]"','line_number':1121,'multiline':False]
['text':' struct passed to in_id_list()','line_number':1122,'multiline':False]
['text':' ID list for next match (if non-zero)','line_number':1123,'multiline':False]
['text':' conceal substitute character','line_number':1125,'multiline':False]
['text':' actually longer','line_number':1126,'multiline':False]
['text':'
 * Struct used to store one state of the state stack.
 ','line_number':1129,'multiline':True]
['text':' index of pattern','line_number':1134,'multiline':False]
['text':' flags for pattern','line_number':1135,'multiline':False]
['text':' stores si_seqnr','line_number':1137,'multiline':False]
['text':' stores si_cchar','line_number':1138,'multiline':False]
['text':' external matches from start pattern','line_number':1140,'multiline':False]
['text':'
 * syn_state contains the syntax state stack for the start of one line.
 * Used by b_sst_array[].
 ','line_number':1143,'multiline':True]
['text':' next entry in used or free list','line_number':1151,'multiline':False]
['text':' line number for this state','line_number':1152,'multiline':False]
['text':' short state stack','line_number':1155,'multiline':False]
['text':' growarray for long state stack','line_number':1156,'multiline':False]
['text':' flags for sst_next_list','line_number':1158,'multiline':False]
['text':' number of states on the stack','line_number':1159,'multiline':False]
['text':' "nextgroup" list in this state','line_number':1160,'multiline':False]
['text':' (this is a copy, don't free it!','line_number':1161,'multiline':False]
['text':' tick when last displayed','line_number':1162,'multiline':False]
['text':' when non-zero, change in this line','line_number':1163,'multiline':False]
['text':' may have made the state invalid','line_number':1164,'multiline':False]
['text':' FEAT_SYN_HL','line_number':1166,'multiline':False]
['text':' maximum value for a highlight ID.','line_number':1168,'multiline':False]
['text':'
 * Structure shared between syntax.c, screen.c and gui_x11.c.
 ','line_number':1170,'multiline':True]
['text':' HL_BOLD, etc.','line_number':1175,'multiline':False]
['text':' start escape sequence','line_number':1180,'multiline':False]
['text':' stop escape sequence','line_number':1181,'multiline':False]
['text':' These colors need to be > 8 bits to hold 256.','line_number':1185,'multiline':False]
['text':' foreground color number','line_number':1186,'multiline':False]
['text':' background color number','line_number':1187,'multiline':False]
['text':' underline color number','line_number':1188,'multiline':False]
['text':' foreground color RGB','line_number':1190,'multiline':False]
['text':' background color RGB','line_number':1191,'multiline':False]
['text':' underline color RGB','line_number':1192,'multiline':False]
['text':' foreground color handle','line_number':1198,'multiline':False]
['text':' background color handle','line_number':1199,'multiline':False]
['text':' special color handle','line_number':1200,'multiline':False]
['text':' font handle','line_number':1201,'multiline':False]
['text':' fontset handle','line_number':1203,'multiline':False]
['text':' Early MacOS X does not have EILSEQ','line_number':1217,'multiline':False]
['text':'
 * Used for the typeahead buffer: typebuf.
 ','line_number':1227,'multiline':True]
['text':' buffer for typed characters','line_number':1232,'multiline':False]
['text':' mapping flags for characters in tb_buf[]','line_number':1233,'multiline':False]
['text':' size of tb_buf[]','line_number':1234,'multiline':False]
['text':' current position in tb_buf[]','line_number':1235,'multiline':False]
['text':' number of valid bytes in tb_buf[]','line_number':1236,'multiline':False]
['text':' nr of mapped bytes in tb_buf[]','line_number':1237,'multiline':False]
['text':' nr of silently mapped bytes in tb_buf[]','line_number':1238,'multiline':False]
['text':' nr of bytes without abbrev. in tb_buf[]','line_number':1239,'multiline':False]
['text':' nr of time tb_buf was changed; never zero','line_number':1240,'multiline':False]
['text':' Struct to hold the saved typeahead for save_typeahead().','line_number':1243,'multiline':False]
['text':' TRUE when save_typebuf valid','line_number':1247,'multiline':False]
['text':'
 * Used for conversion of terminal I/O and script files.
 ','line_number':1257,'multiline':True]
['text':' zero or one of the CONV_ values','line_number':1262,'multiline':False]
['text':' max. expansion factor','line_number':1263,'multiline':False]
['text':' codepage to convert from (CONV_CODEPAGE)','line_number':1265,'multiline':False]
['text':' codepage to convert to (CONV_CODEPAGE)','line_number':1266,'multiline':False]
['text':' for CONV_ICONV','line_number':1269,'multiline':False]
['text':' fail for invalid char, don't use '?'','line_number':1271,'multiline':False]
['text':'
 * Structure used for the command line history.
 ','line_number':1274,'multiline':True]
['text':' identifying number','line_number':1279,'multiline':False]
['text':' when TRUE hisstr comes from viminfo','line_number':1280,'multiline':False]
['text':' actual entry, separator char after the NUL','line_number':1281,'multiline':False]
['text':' when it was typed, zero if unknown','line_number':1282,'multiline':False]
['text':' codepage -> codepage','line_number':1292,'multiline':False]
['text':'
 * Structure used for mappings and abbreviations.
 ','line_number':1301,'multiline':True]
['text':' next mapblock in list','line_number':1307,'multiline':False]
['text':' mapped from, lhs','line_number':1308,'multiline':False]
['text':' mapped to, rhs','line_number':1309,'multiline':False]
['text':' rhs as entered by the user','line_number':1310,'multiline':False]
['text':' strlen(m_keys)','line_number':1311,'multiline':False]
['text':' valid mode','line_number':1312,'multiline':False]
['text':' m_keys was simplified, do not use this map','line_number':1313,'multiline':False]
['text':' if key_protocol_enabled() returns TRUE','line_number':1314,'multiline':False]
['text':' if non-zero no re-mapping for m_str','line_number':1315,'multiline':False]
['text':' <silent> used, don't echo commands','line_number':1316,'multiline':False]
['text':' <nowait> used','line_number':1317,'multiline':False]
['text':' <expr> used, m_str is an expression','line_number':1319,'multiline':False]
['text':' SCTX where map was defined','line_number':1320,'multiline':False]
['text':'
 * Used for highlighting in the status line.
 ','line_number':1325,'multiline':True]
['text':' 0: no HL, 1-9: User HL, < 0 for syn ID','line_number':1331,'multiline':False]
['text':'
 * Syntax items - usually buffer-specific.
 ','line_number':1335,'multiline':True]
['text':'
 * Item for a hashtable.  "hi_key" can be one of three values:
 * NULL:	   Never been used
 * HI_KEY_REMOVED: Entry was removed
 * Otherwise:	   Used item, pointer to the actual key; this usually is
 *		   inside the item, subtract an offset to locate the item.
 *		   This reduces the size of hashitem by 1/3.
 ','line_number':1339,'multiline':True]
['text':' cached hash number of hi_key','line_number':1349,'multiline':False]
['text':' The address of "hash_removed" is used as a magic number for hi_key to','line_number':1353,'multiline':False]
['text':' indicate a removed item.','line_number':1354,'multiline':False]
['text':' Initial size for a hashtable.  Our items are relatively small and growing','line_number':1358,'multiline':False]
['text':' is expensive, thus use 16 as a start.  Must be a power of 2.','line_number':1359,'multiline':False]
['text':' This allows for storing 10 items (2/3 of 16) before a resize is needed.','line_number':1360,'multiline':False]
['text':' flags used for ht_flags','line_number':1363,'multiline':False]
['text':' Set when growing failed, can't add more','line_number':1364,'multiline':False]
['text':' items before growing works.','line_number':1365,'multiline':False]
['text':' Trying to add or remove an item will result','line_number':1366,'multiline':False]
['text':' in an error message.','line_number':1367,'multiline':False]
['text':' mask used for hash value (nr of items in','line_number':1371,'multiline':False]
['text':' array is "ht_mask" + 1)','line_number':1372,'multiline':False]
['text':' number of items used','line_number':1373,'multiline':False]
['text':' number of items used + removed','line_number':1374,'multiline':False]
['text':' incremented when adding or removing an item','line_number':1375,'multiline':False]
['text':' counter for hash_lock()','line_number':1376,'multiline':False]
['text':' HTFLAGS_ values','line_number':1377,'multiline':False]
['text':' points to the array, allocated when it's','line_number':1378,'multiline':False]
['text':' not "ht_smallarray"','line_number':1379,'multiline':False]
['text':' initial array','line_number':1380,'multiline':False]
['text':' Type for hi_hash','line_number':1383,'multiline':False]
['text':' Use 64-bit Number.','line_number':1386,'multiline':False]
['text':' workaround for cproto that doesn't recognize __int64','line_number':1389,'multiline':False]
['text':' this may cause trouble for code that depends on 64 bit ints','line_number':1410,'multiline':False]
['text':' On rare systems "char" is unsigned, sometimes we really want a signed 8-bit','line_number':1431,'multiline':False]
['text':' value.','line_number':1432,'multiline':False]
['text':' Struct that holds both a normal function name and a partial_T, as used for a','line_number':1443,'multiline':False]
['text':' callback argument.','line_number':1444,'multiline':False]
['text':' When used temporarily "cb_name" is not allocated.  The refcounts to either','line_number':1445,'multiline':False]
['text':' the function or the partial are incremented and need to be decremented','line_number':1446,'multiline':False]
['text':' later with free_callback().','line_number':1447,'multiline':False]
['text':' cb_name was allocated','line_number':1451,'multiline':False]
['text':' instruction','line_number':1454,'multiline':False]
['text':' :def function','line_number':1455,'multiline':False]
['text':' not set, any type or "void" allowed','line_number':1475,'multiline':False]
['text':' used for "any" type','line_number':1476,'multiline':False]
['text':' no value (function not returning anything)','line_number':1477,'multiline':False]
['text':' "v_number" is used: VVAL_TRUE or VVAL_FALSE','line_number':1478,'multiline':False]
['text':' "v_number" is used: VVAL_NULL or VVAL_NONE','line_number':1479,'multiline':False]
['text':' "v_number" is used','line_number':1480,'multiline':False]
['text':' "v_float" is used','line_number':1481,'multiline':False]
['text':' "v_string" is used','line_number':1482,'multiline':False]
['text':' "v_blob" is used','line_number':1483,'multiline':False]
['text':' "v_string" is function name','line_number':1484,'multiline':False]
['text':' "v_partial" is used','line_number':1485,'multiline':False]
['text':' "v_list" is used','line_number':1486,'multiline':False]
['text':' "v_dict" is used','line_number':1487,'multiline':False]
['text':' "v_job" is used','line_number':1488,'multiline':False]
['text':' "v_channel" is used','line_number':1489,'multiline':False]
['text':' "v_instr" is used','line_number':1490,'multiline':False]
['text':' "v_class" is used (also used for interface)','line_number':1491,'multiline':False]
['text':' "v_object" is used','line_number':1492,'multiline':False]
['text':' "v_typealias" is used','line_number':1493,'multiline':False]
['text':' A type specification.','line_number':1496,'multiline':False]
['text':' for func, incl. vararg, -1 for unknown','line_number':1499,'multiline':False]
['text':' number of non-optional arguments','line_number':1500,'multiline':False]
['text':' TTFLAG_ values','line_number':1501,'multiline':False]
['text':' for list, dict, func return type','line_number':1502,'multiline':False]
['text':' for class and object','line_number':1503,'multiline':False]
['text':' func argument types, allocated','line_number':1504,'multiline':False]
['text':' current type, value type','line_number':1508,'multiline':False]
['text':' declared type or equal to type_current','line_number':1509,'multiline':False]
['text':' func args ends with "..."','line_number':1512,'multiline':False]
['text':' can be converted to bool','line_number':1513,'multiline':False]
['text':' number can be used/converted to float','line_number':1514,'multiline':False]
['text':' number can be used for a float','line_number':1515,'multiline':False]
['text':' one of the static types, e.g. t_any','line_number':1516,'multiline':False]
['text':' cannot be changed','line_number':1517,'multiline':False]
['text':' object from "super".','line_number':1518,'multiline':False]
['text':' read/write only inside the class','line_number':1521,'multiline':False]
['text':' read everywhere, write only inside the class','line_number':1522,'multiline':False]
['text':' read/write everywhere','line_number':1523,'multiline':False]
['text':'
 * Entry for an object or class member variable.
 ','line_number':1526,'multiline':True]
['text':' allocated','line_number':1530,'multiline':False]
['text':' type specified explicitly','line_number':1532,'multiline':False]
['text':' allocated','line_number':1534,'multiline':False]
['text':' used for the lookup table of a class member index and object method index','line_number':1537,'multiline':False]
['text':' TRUE for method indexes','line_number':1542,'multiline':False]
['text':' array with ints follows','line_number':1543,'multiline':False]
['text':' another class extends this one','line_number':1547,'multiline':False]
['text':' abstract class','line_number':1548,'multiline':False]
['text':' "class_T": used for v_class of typval of VAR_CLASS','line_number':1550,'multiline':False]
['text':' Also used for an interface (class_flags has CLASS_INTERFACE).','line_number':1551,'multiline':False]
['text':' allocated','line_number':1554,'multiline':False]
['text':' CLASS_ flags','line_number':1555,'multiline':False]
['text':' used by garbage collection','line_number':1558,'multiline':False]
['text':' for list headed by "first_class"','line_number':1559,'multiline':False]
['text':' for list headed by "first_class"','line_number':1560,'multiline':False]
['text':' parent class or NULL','line_number':1562,'multiline':False]
['text':' interfaces declared for the class','line_number':1564,'multiline':False]
['text':' allocated array of names','line_number':1566,'multiline':False]
['text':' interfaces (counts as reference)','line_number':1567,'multiline':False]
['text':' member index lookup tables','line_number':1568,'multiline':False]
['text':' class members: "static varname"','line_number':1570,'multiline':False]
['text':' allocated','line_number':1572,'multiline':False]
['text':' allocated array of class member vals','line_number':1573,'multiline':False]
['text':' class functions: "static def SomeMethod()"','line_number':1575,'multiline':False]
['text':' total count','line_number':1576,'multiline':False]
['text':' count without "extends"','line_number':1577,'multiline':False]
['text':' allocated','line_number':1578,'multiline':False]
['text':' object members: "this.varname"','line_number':1580,'multiline':False]
['text':' allocated','line_number':1582,'multiline':False]
['text':' object methods: "def SomeMethod()"','line_number':1584,'multiline':False]
['text':' total count','line_number':1585,'multiline':False]
['text':' count without "extends"','line_number':1586,'multiline':False]
['text':' allocated','line_number':1587,'multiline':False]
['text':' used for type pointers','line_number':1589,'multiline':False]
['text':' type used for the class','line_number':1590,'multiline':False]
['text':' same as class_type but VAR_OBJECT','line_number':1591,'multiline':False]
['text':' Used for v_object of typval of VAR_OBJECT.','line_number':1594,'multiline':False]
['text':' The member variables follow in an array of typval_T.','line_number':1595,'multiline':False]
['text':' class this object is created for;','line_number':1598,'multiline':False]
['text':' pointer adds to class_refcount','line_number':1599,'multiline':False]
['text':' for list headed by "first_object"','line_number':1602,'multiline':False]
['text':' for list headed by "first_object"','line_number':1603,'multiline':False]
['text':' used by garbage collection','line_number':1604,'multiline':False]
['text':'
 * Structure to hold an internal variable without a name.
 ','line_number':1614,'multiline':True]
['text':' see below: VAR_LOCKED, VAR_FIXED','line_number':1620,'multiline':False]
['text':' number value','line_number':1623,'multiline':False]
['text':' floating point number value','line_number':1624,'multiline':False]
['text':' string value (can be NULL)','line_number':1625,'multiline':False]
['text':' list value (can be NULL)','line_number':1626,'multiline':False]
['text':' dict value (can be NULL)','line_number':1627,'multiline':False]
['text':' closure: function with args','line_number':1628,'multiline':False]
['text':' job value (can be NULL)','line_number':1630,'multiline':False]
['text':' channel value (can be NULL)','line_number':1631,'multiline':False]
['text':' blob value (can be NULL)','line_number':1633,'multiline':False]
['text':' instructions to execute','line_number':1634,'multiline':False]
['text':' class value (can be NULL)','line_number':1635,'multiline':False]
['text':' object value (can be NULL)','line_number':1636,'multiline':False]
['text':' user-defined type name','line_number':1637,'multiline':False]
['text':' Values for "dv_scope".','line_number':1641,'multiline':False]
['text':' a:, v:, s:, etc. scope dictionaries','line_number':1642,'multiline':False]
['text':' l:, g: scope dictionaries: here funcrefs are not','line_number':1643,'multiline':False]
['text':' allowed to mask existing functions','line_number':1644,'multiline':False]
['text':' Values for "v_lock".','line_number':1646,'multiline':False]
['text':' locked with lock(), can use unlock()','line_number':1647,'multiline':False]
['text':' locked forever','line_number':1648,'multiline':False]
['text':' items of non-materialized list locked','line_number':1649,'multiline':False]
['text':'
 * Structure to hold an item of a list: an internal variable without a name.
 ','line_number':1651,'multiline':True]
['text':' next item in list','line_number':1658,'multiline':False]
['text':' previous item in list','line_number':1659,'multiline':False]
['text':' type and value of the variable','line_number':1660,'multiline':False]
['text':' Struct used by those that are using an item in a list.','line_number':1663,'multiline':False]
['text':' item being watched','line_number':1668,'multiline':False]
['text':' next watcher','line_number':1669,'multiline':False]
['text':'
 * Structure to hold info about a list.
 * Order of members is optimized to reduce padding.
 * When created by range() it will at first have special value:
 *  lv_first == &range_list_item;
 * and use lv_start, lv_end, lv_stride.
 ','line_number':1672,'multiline':True]
['text':' first item, NULL if none, &range_list_item','line_number':1681,'multiline':False]
['text':' for a non-materialized list','line_number':1682,'multiline':False]
['text':' first watcher, NULL if none','line_number':1683,'multiline':False]
['text':' used for non-materialized range list:','line_number':1685,'multiline':False]
['text':' "lv_first" is &range_list_item','line_number':1686,'multiline':False]
['text':' used for materialized list','line_number':1691,'multiline':False]
['text':' last item, NULL if none','line_number':1692,'multiline':False]
['text':' when not NULL item at index "lv_idx"','line_number':1693,'multiline':False]
['text':' cached index of an item','line_number':1694,'multiline':False]
['text':' current type, allocated by alloc_type()','line_number':1697,'multiline':False]
['text':' copied list used by deepcopy()','line_number':1698,'multiline':False]
['text':' next list in used lists list','line_number':1699,'multiline':False]
['text':' previous list in used lists list','line_number':1700,'multiline':False]
['text':' reference count','line_number':1701,'multiline':False]
['text':' number of items','line_number':1702,'multiline':False]
['text':' number of items following this struct that','line_number':1703,'multiline':False]
['text':' should not be freed','line_number':1704,'multiline':False]
['text':' ID used by deepcopy()','line_number':1705,'multiline':False]
['text':' zero, VAR_LOCKED, VAR_FIXED','line_number':1706,'multiline':False]
['text':'
 * Static list with 10 items.  Use init_static_list() to initialize.
 ','line_number':1709,'multiline':True]
['text':' must be first','line_number':1713,'multiline':False]
['text':'
 * Structure to hold an item of a Dictionary.
 * Also used for a variable.
 * The key is copied into "di_key" to avoid an extra alloc/free for it.
 ','line_number':1717,'multiline':True]
['text':' type and value of the variable','line_number':1724,'multiline':False]
['text':' DI_FLAGS_ flags (only used for variable)','line_number':1725,'multiline':False]
['text':' key (actually longer!)','line_number':1726,'multiline':False]
['text':'
 * A dictitem with a 16 character key (plus NUL).  This is an efficient way to
 * have a fixed-size dictitem.
 ','line_number':1730,'multiline':True]
['text':' type and value of the variable','line_number':1737,'multiline':False]
['text':' DI_FLAGS_ flags (only used for variable)','line_number':1738,'multiline':False]
['text':' key','line_number':1739,'multiline':False]
['text':' Flags for "di_flags"','line_number':1743,'multiline':False]
['text':' read-only variable','line_number':1744,'multiline':False]
['text':' read-only in the sandbox','line_number':1745,'multiline':False]
['text':' fixed: no :unlet or remove()','line_number':1746,'multiline':False]
['text':' locked variable','line_number':1747,'multiline':False]
['text':' separately allocated','line_number':1748,'multiline':False]
['text':' set when script sourced again','line_number':1749,'multiline':False]
['text':'
 * Structure to hold info about a Dictionary.
 ','line_number':1751,'multiline':True]
['text':' zero, VAR_LOCKED, VAR_FIXED','line_number':1756,'multiline':False]
['text':' zero, VAR_SCOPE, VAR_DEF_SCOPE','line_number':1757,'multiline':False]
['text':' reference count','line_number':1758,'multiline':False]
['text':' ID used by deepcopy()','line_number':1759,'multiline':False]
['text':' hashtab that refers to the items','line_number':1760,'multiline':False]
['text':' current type, allocated by alloc_type()','line_number':1761,'multiline':False]
['text':' copied dict used by deepcopy()','line_number':1762,'multiline':False]
['text':' next dict in used dicts list','line_number':1763,'multiline':False]
['text':' previous dict in used dicts list','line_number':1764,'multiline':False]
['text':'
 * Structure to hold info about a blob.
 ','line_number':1767,'multiline':True]
['text':' growarray with the data','line_number':1772,'multiline':False]
['text':' reference count','line_number':1773,'multiline':False]
['text':' zero, VAR_LOCKED, VAR_FIXED','line_number':1774,'multiline':False]
['text':' type of getline() last argument','line_number':1780,'multiline':False]
['text':' do not concatenate any lines','line_number':1782,'multiline':False]
['text':' concatenate continuation lines with backslash','line_number':1783,'multiline':False]
['text':' concatenate continuation lines with \ and |','line_number':1784,'multiline':False]
['text':' concatenate continuation and Vim9 # comment lines','line_number':1785,'multiline':False]
['text':'
 * Info used by a ":for" loop.
 ','line_number':1791,'multiline':True]
['text':' TRUE if ending in '; var]'','line_number':1796,'multiline':False]
['text':' nr of variables in [] or zero','line_number':1797,'multiline':False]
['text':' nr of line breaks encountered','line_number':1798,'multiline':False]
['text':' keep an eye on the item used.','line_number':1799,'multiline':False]
['text':' list being used','line_number':1800,'multiline':False]
['text':' index of blob','line_number':1801,'multiline':False]
['text':' blob being used','line_number':1802,'multiline':False]
['text':' copy of string being used','line_number':1803,'multiline':False]
['text':' byte index in fi_string','line_number':1804,'multiline':False]
['text':' cs_flags or'ed together','line_number':1805,'multiline':False]
['text':' values used for "uf_def_status"','line_number':1810,'multiline':False]
['text':' executed with interpreter','line_number':1812,'multiline':False]
['text':' to be compiled before execution','line_number':1813,'multiline':False]
['text':' in compile_def_function()','line_number':1814,'multiline':False]
['text':' successfully compiled','line_number':1815,'multiline':False]
['text':' compilation error, cannot execute','line_number':1816,'multiline':False]
['text':'
 * Structure to hold info for a user function.
 * When adding a field check copy_lambda_to_global_func().
 ','line_number':1819,'multiline':True]
['text':' variable nr of arguments (old style)','line_number':1825,'multiline':False]
['text':' FC_ flags','line_number':1826,'multiline':False]
['text':' nr of active calls','line_number':1827,'multiline':False]
['text':' func_clear() was already called','line_number':1828,'multiline':False]
['text':' UF_NOT_COMPILED, UF_TO_BE_COMPILED, etc.','line_number':1829,'multiline':False]
['text':' only valid if uf_def_status is UF_COMPILED','line_number':1830,'multiline':False]
['text':' for class/object method and constructor;','line_number':1832,'multiline':False]
['text':' does not count for class_refcount.','line_number':1833,'multiline':False]
['text':' class of the object which is invoking this','line_number':1834,'multiline':False]
['text':' function.','line_number':1835,'multiline':False]
['text':' class where this function is defined.','line_number':1836,'multiline':False]
['text':' arguments, including optional arguments','line_number':1838,'multiline':False]
['text':' default argument expressions','line_number':1839,'multiline':False]
['text':' normally uf_args.ga_len, less when','line_number':1840,'multiline':False]
['text':' compiling default argument expression.','line_number':1841,'multiline':False]
['text':' for :def (for :function uf_ret_type is NULL)','line_number':1843,'multiline':False]
['text':' argument types (count == uf_args.ga_len)','line_number':1844,'multiline':False]
['text':' return type','line_number':1845,'multiline':False]
['text':' types used in arg and return types','line_number':1846,'multiline':False]
['text':' for closure created inside :def function:','line_number':1847,'multiline':False]
['text':' information about the context','line_number':1848,'multiline':False]
['text':' name from "...name" or NULL','line_number':1850,'multiline':False]
['text':' type from "...name: type" or NULL','line_number':1851,'multiline':False]
['text':' type of the function, &t_func_any if unknown','line_number':1852,'multiline':False]
['text':' nr of entries in uf_block_ids','line_number':1853,'multiline':False]
['text':' blocks a :def function is defined inside','line_number':1854,'multiline':False]
['text':' callback function for cfunc','line_number':1856,'multiline':False]
['text':' callback function to free cfunc','line_number':1857,'multiline':False]
['text':' state of uf_cb','line_number':1858,'multiline':False]
['text':' function lines','line_number':1861,'multiline':False]
['text':' when last checked for a breakpoint in this','line_number':1863,'multiline':False]
['text':' function.','line_number':1864,'multiline':False]
['text':' TRUE when a breakpoint has been set in','line_number':1865,'multiline':False]
['text':' this function.','line_number':1866,'multiline':False]
['text':' TRUE when func is being profiled','line_number':1868,'multiline':False]
['text':' hash for uf_name when profiling','line_number':1870,'multiline':False]
['text':' profiling the function as a whole','line_number':1871,'multiline':False]
['text':' nr of calls','line_number':1872,'multiline':False]
['text':' time spent in function + children','line_number':1873,'multiline':False]
['text':' time spent in function itself','line_number':1874,'multiline':False]
['text':' time spent in children this call','line_number':1875,'multiline':False]
['text':' profiling the function per line','line_number':1876,'multiline':False]
['text':' nr of times line was executed','line_number':1877,'multiline':False]
['text':' time spent in a line + children','line_number':1878,'multiline':False]
['text':' time spent in a line itself','line_number':1879,'multiline':False]
['text':' start time for current line','line_number':1880,'multiline':False]
['text':' time spent in children for this line','line_number':1881,'multiline':False]
['text':' start wait time for current line','line_number':1882,'multiline':False]
['text':' index of line being timed; -1 if none','line_number':1883,'multiline':False]
['text':' line being timed was executed','line_number':1884,'multiline':False]
['text':' SCTX where function was defined,','line_number':1886,'multiline':False]
['text':' used for s: variables; sc_version changed','line_number':1887,'multiline':False]
['text':' for :function','line_number':1888,'multiline':False]
['text':' original sc_version of SCTX','line_number':1889,'multiline':False]
['text':' reference count, see func_name_refcount()','line_number':1890,'multiline':False]
['text':' l: local variables for closure','line_number':1892,'multiline':False]
['text':' if "uf_name[]" starts with SNR the name with','line_number':1894,'multiline':False]
['text':' "<SNR>" as a string, otherwise NULL','line_number':1895,'multiline':False]
['text':' name of function (actual size equals name);','line_number':1896,'multiline':False]
['text':' can start with <SNR>123_ (<SNR> is K_SPECIAL','line_number':1897,'multiline':False]
['text':' KS_EXTRA KE_SNR)','line_number':1898,'multiline':False]
['text':' flags used in uf_flags','line_number':1901,'multiline':False]
['text':' abort function on error','line_number':1902,'multiline':False]
['text':' function accepts range','line_number':1903,'multiline':False]
['text':' Dict function, uses "self"','line_number':1904,'multiline':False]
['text':' closure, uses outer scope variables','line_number':1905,'multiline':False]
['text':' :delfunction used while uf_refcount > 0','line_number':1906,'multiline':False]
['text':' function redefined while uf_refcount > 0','line_number':1907,'multiline':False]
['text':' function defined in the sandbox','line_number':1908,'multiline':False]
['text':' function kept only for reference to dfunc','line_number':1909,'multiline':False]
['text':' "export def Func()"','line_number':1910,'multiline':False]
['text':' no a: variables in lambda','line_number':1911,'multiline':False]
['text':' defined in vim9 script file','line_number':1912,'multiline':False]
['text':' defined as Lua C func','line_number':1913,'multiline':False]
['text':' copy of another function by','line_number':1914,'multiline':False]
['text':' copy_lambda_to_global_func()','line_number':1915,'multiline':False]
['text':' one line "return {expr}"','line_number':1916,'multiline':False]
['text':' object method','line_number':1918,'multiline':False]
['text':' constructor','line_number':1919,'multiline':False]
['text':' abstract method','line_number':1920,'multiline':False]
['text':' Is "ufunc" an object method?','line_number':1922,'multiline':False]
['text':' Is "ufunc" a class new() constructor method?','line_number':1924,'multiline':False]
['text':' Is "ufunc" an abstract class method?','line_number':1926,'multiline':False]
['text':' maximum number of function arguments','line_number':1929,'multiline':False]
['text':' short variable name length','line_number':1930,'multiline':False]
['text':' number of fixed variables','line_number':1931,'multiline':False]
['text':'
 * Structure to hold info for a function that is currently being executed.
 ','line_number':1933,'multiline':True]
['text':' function being called','line_number':1938,'multiline':False]
['text':' next line to be executed','line_number':1939,'multiline':False]
['text':' ":return" used','line_number':1940,'multiline':False]
['text':' fixed variables for arguments','line_number':1941,'multiline':False]
['text':' variable (without room for name)','line_number':1943,'multiline':False]
['text':' room for the name','line_number':1944,'multiline':False]
['text':' l: local function variables','line_number':1946,'multiline':False]
['text':' variable for l: scope','line_number':1947,'multiline':False]
['text':' a: argument variables','line_number':1948,'multiline':False]
['text':' variable for a: scope','line_number':1949,'multiline':False]
['text':' list for a:000','line_number':1950,'multiline':False]
['text':' listitems for a:000','line_number':1951,'multiline':False]
['text':' return value','line_number':1952,'multiline':False]
['text':' next line with breakpoint or zero','line_number':1953,'multiline':False]
['text':' debug_tick when breakpoint was set','line_number':1954,'multiline':False]
['text':' top nesting level of executed function','line_number':1955,'multiline':False]
['text':' functions to be called on return','line_number':1957,'multiline':False]
['text':' execution context for :def function, NULL','line_number':1958,'multiline':False]
['text':' otherwise','line_number':1959,'multiline':False]
['text':' time spent in a child','line_number':1962,'multiline':False]
['text':' calling function or NULL; or next funccal in','line_number':1964,'multiline':False]
['text':' list pointed to by previous_funccal.','line_number':1965,'multiline':False]
['text':' for closure','line_number':1967,'multiline':False]
['text':' number of user functions that reference this','line_number':1968,'multiline':False]
['text':' funccal','line_number':1969,'multiline':False]
['text':' for garbage collection','line_number':1970,'multiline':False]
['text':' list of ufunc_T* which keep a reference to','line_number':1971,'multiline':False]
['text':' "fc_func"','line_number':1972,'multiline':False]
['text':' structure used as item in "fc_defer"','line_number':1975,'multiline':False]
['text':' function name, allocated','line_number':1978,'multiline':False]
['text':'
 * Struct used by trans_function_name()
 ','line_number':1983,'multiline':True]
['text':' Dictionary used','line_number':1988,'multiline':False]
['text':' new key in "dict" in allocated memory','line_number':1989,'multiline':False]
['text':' Dictionary item used','line_number':1990,'multiline':False]
['text':' From user function to hashitem and back.','line_number':1999,'multiline':False]
['text':'
 * Holds the hashtab with variables local to each sourced script.
 * Each item holds a variable (nameless) that points to the dict_T.
 ','line_number':2004,'multiline':True]
['text':'
 * Entry for "sn_all_vars".  Contains the s: variables from sn_vars plus the
 * block-local ones.
 ','line_number':2013,'multiline':True]
['text':' var with same name but different block','line_number':2019,'multiline':False]
['text':' block ID where declared','line_number':2020,'multiline':False]
['text':' index in sn_var_vals','line_number':2021,'multiline':False]
['text':' So long as the variable is valid (block it was defined in is still','line_number':2023,'multiline':False]
['text':' active) "sav_di" is used.  It is set to NULL when leaving the block,','line_number':2024,'multiline':False]
['text':' then sav_tv and sav_flags are used.','line_number':2025,'multiline':False]
['text':' dictitem with di_key and di_tv','line_number':2026,'multiline':False]
['text':' type and value of the variable','line_number':2027,'multiline':False]
['text':' DI_FLAGS_ flags (only used for variable)','line_number':2028,'multiline':False]
['text':' key (actually longer!)','line_number':2029,'multiline':False]
['text':'
 * In the sn_all_vars hashtab item "hi_key" points to "sav_key" in a sallvar_T.
 * This makes it possible to store and find the sallvar_T.
 * SAV2HIKEY() converts a sallvar_T pointer to a hashitem key pointer.
 * HIKEY2SAV() converts a hashitem key pointer to a sallvar_T pointer.
 * HI2SAV() converts a hashitem pointer to a sallvar_T pointer.
 ','line_number':2032,'multiline':True]
['text':' call free_type() for "sv_type"','line_number':2043,'multiline':False]
['text':' "export let var = val"','line_number':2044,'multiline':False]
['text':' assigned a value','line_number':2045,'multiline':False]
['text':'
 * Entry for "sn_var_vals".  Used for script-local variables.
 ','line_number':2047,'multiline':True]
['text':' points into "sn_all_vars" di_key','line_number':2051,'multiline':False]
['text':' points into "sn_vars" or "sn_all_vars" di_tv','line_number':2052,'multiline':False]
['text':' SVFLAG_ values above','line_number':2054,'multiline':False]
['text':' 0, ASSIGN_CONST or ASSIGN_FINAL','line_number':2055,'multiline':False]
['text':' name imported as (allocated)','line_number':2059,'multiline':False]
['text':' script ID of "from"','line_number':2060,'multiline':False]
['text':' IMP_FLAGS_ values','line_number':2061,'multiline':False]
['text':' script reloaded, OK to redefine','line_number':2064,'multiline':False]
['text':' script still needs to be loaded','line_number':2065,'multiline':False]
['text':'
 * Info about an encountered script.
 * When sn_state has SN_STATE_NOT_LOADED, it has not been sourced yet.
 ','line_number':2067,'multiline':True]
['text':' full path of script file','line_number':2073,'multiline':False]
['text':' latest sctx_T sc_seq value','line_number':2074,'multiline':False]
['text':' When non-zero the script ID of the actually sourced script.  Used if a','line_number':2076,'multiline':False]
['text':' script is used by a name which has a symlink, we list both names, but','line_number':2077,'multiline':False]
['text':' only the linked-to script is actually sourced.','line_number':2078,'multiline':False]
['text':' "sn_vars" stores the s: variables currently valid.  When leaving a block','line_number':2081,'multiline':False]
['text':' variables local to that block are removed.','line_number':2082,'multiline':False]
['text':' Specific for a Vim9 script.','line_number':2085,'multiline':False]
['text':' "sn_all_vars" stores all script variables ever declared.  So long as the','line_number':2086,'multiline':False]
['text':' variable is still valid the value is in "sn_vars->sv_dict...di_tv".','line_number':2087,'multiline':False]
['text':' When the block of a declaration is left the value is moved to','line_number':2088,'multiline':False]
['text':' "sn_all_vars..sav_tv".','line_number':2089,'multiline':False]
['text':' Variables with duplicate names are possible, the sav_block_id must be','line_number':2090,'multiline':False]
['text':' used to check that which variable is valid.','line_number':2091,'multiline':False]
['text':' all script variables, dict of sallvar_T','line_number':2092,'multiline':False]
['text':' Stores the same variables as in "sn_all_vars" as a list of svar_T, so','line_number':2094,'multiline':False]
['text':' that they can be quickly found by index instead of a hash table lookup.','line_number':2095,'multiline':False]
['text':' Also stores the type.','line_number':2096,'multiline':False]
['text':' imported items, imported_T','line_number':2099,'multiline':False]
['text':' keeps types used by variables','line_number':2100,'multiline':False]
['text':' ID for current block, 0 for outer','line_number':2101,'multiline':False]
['text':' Unique ID for each script block','line_number':2102,'multiline':False]
['text':' :scriptversion','line_number':2104,'multiline':False]
['text':' SN_STATE_ values','line_number':2105,'multiline':False]
['text':' 'cpo' value when :vim9script found','line_number':2106,'multiline':False]
['text':' .vimrc file, do not restore 'cpo'','line_number':2107,'multiline':False]
['text':' for a Vim9 script under "rtp/autoload/" this is "dir#scriptname#"','line_number':2109,'multiline':False]
['text':' TRUE for a script used with "import autoload './dirname/script.vim'"','line_number':2112,'multiline':False]
['text':' For "../autoload/script.vim" sn_autoload_prefix is also set.','line_number':2113,'multiline':False]
['text':' TRUE when script is/was profiled','line_number':2117,'multiline':False]
['text':' forceit: profile functions in this script','line_number':2118,'multiline':False]
['text':' time set when going into first child','line_number':2119,'multiline':False]
['text':' nesting for sn_pr_child','line_number':2120,'multiline':False]
['text':' profiling the script as a whole','line_number':2121,'multiline':False]
['text':' nr of times sourced','line_number':2122,'multiline':False]
['text':' time spent in script + children','line_number':2123,'multiline':False]
['text':' time spent in script itself','line_number':2124,'multiline':False]
['text':' time at script start','line_number':2125,'multiline':False]
['text':' time in children after script start','line_number':2126,'multiline':False]
['text':' profiling the script per line','line_number':2127,'multiline':False]
['text':' things stored for every line','line_number':2128,'multiline':False]
['text':' start time for current line','line_number':2129,'multiline':False]
['text':' time spent in children for this line','line_number':2130,'multiline':False]
['text':' wait start time for current line','line_number':2131,'multiline':False]
['text':' index of line being timed; -1 if none','line_number':2132,'multiline':False]
['text':' line being timed was executed','line_number':2133,'multiline':False]
['text':' newly loaded script, nothing done','line_number':2137,'multiline':False]
['text':' script located but not loaded','line_number':2138,'multiline':False]
['text':' script loaded before, nothing done','line_number':2139,'multiline':False]
['text':' a command was executed','line_number':2140,'multiline':False]
['text':' Struct passed through eval() functions.','line_number':2142,'multiline':False]
['text':' See EVALARG_EVALUATE for a fixed value with eval_flags set to EVAL_EVALUATE.','line_number':2143,'multiline':False]
['text':' EVAL_ flag values below','line_number':2145,'multiline':False]
['text':' nr of line breaks consumed','line_number':2146,'multiline':False]
['text':' copied from exarg_T when "getline" is "getsourceline". Can be NULL.','line_number':2148,'multiline':False]
['text':' argument for eval_getline()','line_number':2150,'multiline':False]
['text':' used when compiling a :def function, NULL otherwise','line_number':2152,'multiline':False]
['text':' used when executing commands from a script, NULL otherwise','line_number':2155,'multiline':False]
['text':' Used to collect lines while parsing them, so that they can be','line_number':2158,'multiline':False]
['text':' concatenated later.  Used when "eval_ga.ga_itemsize" is not zero.','line_number':2159,'multiline':False]
['text':' "eval_ga.ga_data" is a list of pointers to lines.','line_number':2160,'multiline':False]
['text':' "eval_freega" list pointers that need to be freed after concatenating.','line_number':2161,'multiline':False]
['text':' pointer to the last line obtained with getsourceline()','line_number':2165,'multiline':False]
['text':' array with lines of an inline function','line_number':2168,'multiline':False]
['text':' set when "arg" points into the last entry of "eval_tofree_ga"','line_number':2171,'multiline':False]
['text':' pointer to the lines concatenated for a lambda.','line_number':2174,'multiline':False]
['text':' Flag for expression evaluation.','line_number':2178,'multiline':False]
['text':' when missing don't actually evaluate','line_number':2179,'multiline':False]
['text':'
 * Struct used in sn_prl_ga for every line of a script.
 ','line_number':2182,'multiline':True]
['text':' nr of times line was executed','line_number':2187,'multiline':False]
['text':' time spent in a line + children','line_number':2188,'multiline':False]
['text':' time spent in a line itself','line_number':2189,'multiline':False]
['text':' dummy typedefs for use in function prototypes','line_number':2207,'multiline':False]
['text':' Struct passed between functions dealing with function call execution.','line_number':2234,'multiline':False]
['text':'','line_number':2235,'multiline':False]
['text':' "fe_argv_func", when not NULL, can be used to fill in arguments only when the','line_number':2236,'multiline':False]
['text':' invoked function uses them.  It is called like this:','line_number':2237,'multiline':False]
['text':'   new_argcount = fe_argv_func(current_argcount, argv, partial_argcount,','line_number':2238,'multiline':False]
['text':'							called_func)','line_number':2239,'multiline':False]
['text':'','line_number':2240,'multiline':False]
['text':' first line of range','line_number':2243,'multiline':False]
['text':' last line of range','line_number':2244,'multiline':False]
['text':' if not NULL: return: function handled range','line_number':2245,'multiline':False]
['text':' actually evaluate expressions','line_number':2246,'multiline':False]
['text':' function to be called, when NULL lookup by','line_number':2247,'multiline':False]
['text':' name','line_number':2248,'multiline':False]
['text':' for "dict" and extra arguments','line_number':2249,'multiline':False]
['text':' Dictionary for "self"','line_number':2250,'multiline':False]
['text':' object, e.g. for "this.Func()"','line_number':2251,'multiline':False]
['text':' base for base->method()','line_number':2252,'multiline':False]
['text':' type from funcref or NULL','line_number':2253,'multiline':False]
['text':' if the function is not found then give an','line_number':2254,'multiline':False]
['text':' error that a variable is not callable.','line_number':2255,'multiline':False]
['text':'
 * Structure to hold the context of a compiled function, used by closures
 * defined in that function.
 ','line_number':2258,'multiline':True]
['text':' linked list at "first_funcstack"','line_number':2265,'multiline':False]
['text':' contains the stack, with:','line_number':2268,'multiline':False]
['text':' - arguments','line_number':2269,'multiline':False]
['text':' - frame','line_number':2270,'multiline':False]
['text':' - local variables','line_number':2271,'multiline':False]
['text':' count of arguments + frame size == offset to','line_number':2272,'multiline':False]
['text':' local variables','line_number':2273,'multiline':False]
['text':' nr of closures referencing this funcstack','line_number':2275,'multiline':False]
['text':' nr of closures on this funcstack','line_number':2276,'multiline':False]
['text':' for garbage collection','line_number':2277,'multiline':False]
['text':'
 * Structure to hold the variables declared in a loop that are possibly used
 * in a closure.
 ','line_number':2280,'multiline':True]
['text':' linked list at "first_loopvars"','line_number':2287,'multiline':False]
['text':' contains the variables','line_number':2290,'multiline':False]
['text':' nr of closures referencing this loopvars','line_number':2291,'multiline':False]
['text':' nr of closures on this loopvars','line_number':2292,'multiline':False]
['text':' for garbage collection','line_number':2293,'multiline':False]
['text':' maximum nesting of :while and :for loops in a :def function','line_number':2296,'multiline':False]
['text':' stack from outer scope, or a copy','line_number':2301,'multiline':False]
['text':' containing only arguments and local vars','line_number':2302,'multiline':False]
['text':' index of stack frame in out_stack','line_number':2303,'multiline':False]
['text':' outer scope of outer scope or NULL','line_number':2304,'multiline':False]
['text':' partial owning out_up or NULL','line_number':2305,'multiline':False]
['text':' stack from outer scope, or a copy','line_number':2308,'multiline':False]
['text':' containing only vars inside the loop','line_number':2309,'multiline':False]
['text':' first variable defined in a loop in','line_number':2310,'multiline':False]
['text':' out_loop_stack','line_number':2311,'multiline':False]
['text':' number of variables defined in a loop','line_number':2312,'multiline':False]
['text':' nr of used entries in out_loop[]','line_number':2314,'multiline':False]
['text':' reference count','line_number':2319,'multiline':False]
['text':' when TRUE the partial was created for using','line_number':2320,'multiline':False]
['text':' dict.member in handle_subscript()','line_number':2321,'multiline':False]
['text':' function name; when NULL use','line_number':2322,'multiline':False]
['text':' pt_func->uf_name','line_number':2323,'multiline':False]
['text':' function pointer; when NULL lookup function','line_number':2324,'multiline':False]
['text':' with pt_name','line_number':2325,'multiline':False]
['text':' For a compiled closure: the arguments and local variables scope','line_number':2327,'multiline':False]
['text':' For a partial of a partial: use pt_outer values of this partial.','line_number':2330,'multiline':False]
['text':' copy of stack, used after context','line_number':2333,'multiline':False]
['text':' function returns','line_number':2334,'multiline':False]
['text':' copy of loop variables, used after loop','line_number':2336,'multiline':False]
['text':' block ends','line_number':2337,'multiline':False]
['text':' arguments in allocated array','line_number':2339,'multiline':False]
['text':' number of arguments','line_number':2340,'multiline':False]
['text':' funcstack may contain pointer to partial','line_number':2342,'multiline':False]
['text':' dict for "self"','line_number':2343,'multiline':False]
['text':' object method','line_number':2344,'multiline':False]
['text':' current nested loop depth','line_number':2348,'multiline':False]
['text':' index of first variable inside loop','line_number':2350,'multiline':False]
['text':' number of variables inside loop','line_number':2351,'multiline':False]
['text':'
 * Entry in the execution stack "exestack".
 ','line_number':2357,'multiline':True]
['text':' toplevel','line_number':2361,'multiline':False]
['text':' sourcing script, use es_info.sctx','line_number':2362,'multiline':False]
['text':' user function, use es_info.ufunc','line_number':2363,'multiline':False]
['text':' autocomand, use es_info.aucmd','line_number':2364,'multiline':False]
['text':' modeline, use es_info.sctx','line_number':2365,'multiline':False]
['text':' exception, use es_info.exception','line_number':2366,'multiline':False]
['text':' command line argument','line_number':2367,'multiline':False]
['text':' environment variable','line_number':2368,'multiline':False]
['text':' internal operation','line_number':2369,'multiline':False]
['text':' loading spell file','line_number':2370,'multiline':False]
['text':' replaces "sourcing_lnum"','line_number':2374,'multiline':False]
['text':' replaces "sourcing_name"','line_number':2375,'multiline':False]
['text':' script and modeline info','line_number':2378,'multiline':False]
['text':' function info','line_number':2380,'multiline':False]
['text':' autocommand info','line_number':2382,'multiline':False]
['text':' exception info','line_number':2383,'multiline':False]
['text':' saved current_sctx when calling function','line_number':2386,'multiline':False]
['text':' Information returned by get_tty_info().','line_number':2390,'multiline':False]
['text':' what the Backspace key produces','line_number':2392,'multiline':False]
['text':' what the Enter key produces','line_number':2393,'multiline':False]
['text':' interrupt character','line_number':2394,'multiline':False]
['text':' TRUE when a NL is expanded to CR-NL on output','line_number':2395,'multiline':False]
['text':' Status of a job.  Order matters!','line_number':2398,'multiline':False]
['text':' detected job done','line_number':2403,'multiline':False]
['text':' job done and cleanup done','line_number':2404,'multiline':False]
['text':'
 * Structure to hold info about a Job.
 ','line_number':2407,'multiline':True]
['text':' controlling tty input, allocated','line_number':2422,'multiline':False]
['text':' controlling tty output, allocated','line_number':2423,'multiline':False]
['text':' allocated','line_number':2424,'multiline':False]
['text':' allocated','line_number':2426,'multiline':False]
['text':' allocated','line_number':2429,'multiline':False]
['text':' buffer from "in-name"','line_number':2434,'multiline':False]
['text':' reference count','line_number':2436,'multiline':False]
['text':' channel for I/O, reference counted','line_number':2439,'multiline':False]
['text':' command line used to start the job','line_number':2440,'multiline':False]
['text':'
 * Structures to hold info about a Channel.
 ','line_number':2443,'multiline':True]
['text':' TRUE when no callback was found','line_number':2466,'multiline':False]
['text':' mode for a channel','line_number':2477,'multiline':False]
['text':' Language Server Protocol (http + json)','line_number':2484,'multiline':False]
['text':' default','line_number':2488,'multiline':False]
['text':' Ordering matters, it is used in for loops: IN is last, only SOCK/OUT/ERR','line_number':2497,'multiline':False]
['text':' are polled.','line_number':2498,'multiline':False]
['text':' The per-fd info for a channel.','line_number':2515,'multiline':False]
['text':' socket/stdin/stdout/stderr, -1 if not used','line_number':2517,'multiline':False]
['text':' used by channel_poll_setup()','line_number':2520,'multiline':False]
['text':' Cookie for input','line_number':2524,'multiline':False]
['text':' Cookie for input','line_number':2527,'multiline':False]
['text':' request timeout in msec','line_number':2532,'multiline':False]
['text':' header for circular raw read queue','line_number':2534,'multiline':False]
['text':' header for circular json read queue','line_number':2535,'multiline':False]
['text':' list of IDs that channel_read_json_block()','line_number':2536,'multiline':False]
['text':' is waiting for','line_number':2537,'multiline':False]
['text':' When ch_wait_len is non-zero use ch_deadline to wait for incomplete','line_number':2538,'multiline':False]
['text':' message to be complete. The value is the length of the incomplete','line_number':2539,'multiline':False]
['text':' message when the deadline was set.  If it gets longer (something was','line_number':2540,'multiline':False]
['text':' received) the deadline is reset.','line_number':2541,'multiline':False]
['text':' for testing: 0 when not used, -1 when write','line_number':2548,'multiline':False]
['text':' does not block, 1 simulate blocking','line_number':2549,'multiline':False]
['text':' write() is non-blocking','line_number':2550,'multiline':False]
['text':' header for write queue','line_number':2551,'multiline':False]
['text':' dummy node for per-request callbacks','line_number':2553,'multiline':False]
['text':' call when a msg is not handled','line_number':2554,'multiline':False]
['text':' buffer to read from or write to','line_number':2556,'multiline':False]
['text':' TRUE when buffer can be 'nomodifiable'','line_number':2557,'multiline':False]
['text':' TRUE when e_modifiable was given','line_number':2558,'multiline':False]
['text':' write appended lines instead top-bot','line_number':2559,'multiline':False]
['text':' next line to send','line_number':2560,'multiline':False]
['text':' last line to send','line_number':2561,'multiline':False]
['text':' ID of the channel','line_number':2568,'multiline':False]
['text':' ID of the last message','line_number':2569,'multiline':False]
['text':' info for socket, out, err and in','line_number':2571,'multiline':False]
['text':' write buffer lines with CR, not NL','line_number':2572,'multiline':False]
['text':' only for socket, allocated','line_number':2574,'multiline':False]
['text':' only for socket','line_number':2575,'multiline':False]
['text':' bitset of readable fds to be closed.','line_number':2577,'multiline':False]
['text':' When all readable fds have been closed,','line_number':2578,'multiline':False]
['text':' set to (1 << PART_COUNT).','line_number':2579,'multiline':False]
['text':' When TRUE channel must be freed when it's','line_number':2580,'multiline':False]
['text':' safe to invoke callbacks.','line_number':2581,'multiline':False]
['text':' When TRUE an error was reported.  Avoids','line_number':2582,'multiline':False]
['text':' giving pages full of error messages when','line_number':2583,'multiline':False]
['text':' the other side has exited, only mention the','line_number':2584,'multiline':False]
['text':' first error until the connection works','line_number':2585,'multiline':False]
['text':' again.','line_number':2586,'multiline':False]
['text':' callback for Netbeans when channel is','line_number':2589,'multiline':False]
['text':' closed','line_number':2590,'multiline':False]
['text':' using named pipe instead of pty','line_number':2593,'multiline':False]
['text':' call when any msg is not handled','line_number':2595,'multiline':False]
['text':' call when channel is closed','line_number':2596,'multiline':False]
['text':' do not close on read error','line_number':2598,'multiline':False]
['text':' Job that uses this channel; this does not','line_number':2601,'multiline':False]
['text':' count as a reference to avoid a circular','line_number':2602,'multiline':False]
['text':' reference, the job refers to the channel.','line_number':2603,'multiline':False]
['text':' TRUE when there was a job and it was killed','line_number':2604,'multiline':False]
['text':' or we know it died.','line_number':2605,'multiline':False]
['text':' ConPTY','line_number':2606,'multiline':False]
['text':' TerminateJobObject() was called','line_number':2607,'multiline':False]
['text':' reference count','line_number':2609,'multiline':False]
['text':' channel mode','line_number':2613,'multiline':False]
['text':' stdin mode','line_number':2614,'multiline':False]
['text':' stdout mode','line_number':2615,'multiline':False]
['text':' stderr mode','line_number':2616,'multiline':False]
['text':' channel callback','line_number':2617,'multiline':False]
['text':' stdout callback','line_number':2618,'multiline':False]
['text':' stderr callback','line_number':2619,'multiline':False]
['text':' "close_cb"','line_number':2620,'multiline':False]
['text':' only for ch_open()','line_number':2621,'multiline':False]
['text':' all timeouts','line_number':2622,'multiline':False]
['text':' stdout timeouts','line_number':2623,'multiline':False]
['text':' stderr timeouts','line_number':2624,'multiline':False]
['text':' "part"','line_number':2625,'multiline':False]
['text':' "id"','line_number':2626,'multiline':False]
['text':' "stoponexit"','line_number':2627,'multiline':False]
['text':' "exit_cb"','line_number':2628,'multiline':False]
['text':' "out_io"','line_number':2629,'multiline':False]
['text':' "err_io" (JO_OUT_IO << 1)','line_number':2630,'multiline':False]
['text':' "in_io" (JO_OUT_IO << 2)','line_number':2631,'multiline':False]
['text':' "out_name"','line_number':2632,'multiline':False]
['text':' "err_name" (JO_OUT_NAME << 1)','line_number':2633,'multiline':False]
['text':' "in_name" (JO_OUT_NAME << 2)','line_number':2634,'multiline':False]
['text':' "in_top"','line_number':2635,'multiline':False]
['text':' "in_bot"','line_number':2636,'multiline':False]
['text':' "out_buf"','line_number':2637,'multiline':False]
['text':' "err_buf" (JO_OUT_BUF << 1)','line_number':2638,'multiline':False]
['text':' "in_buf" (JO_OUT_BUF << 2)','line_number':2639,'multiline':False]
['text':' "channel"','line_number':2640,'multiline':False]
['text':' "block_write"','line_number':2641,'multiline':False]
['text':' "out_modifiable"','line_number':2642,'multiline':False]
['text':' "err_modifiable" (JO_OUT_ << 1)','line_number':2643,'multiline':False]
['text':' "out_msg"','line_number':2646,'multiline':False]
['text':' "err_msg" (JO_OUT_ << 1)','line_number':2647,'multiline':False]
['text':' "term_name"','line_number':2648,'multiline':False]
['text':' "term_finish"','line_number':2649,'multiline':False]
['text':' "env"','line_number':2650,'multiline':False]
['text':' "cwd"','line_number':2651,'multiline':False]
['text':' "term_rows"','line_number':2652,'multiline':False]
['text':' "term_cols"','line_number':2653,'multiline':False]
['text':' "vertical"','line_number':2654,'multiline':False]
['text':' "curwin"','line_number':2655,'multiline':False]
['text':' "hidden"','line_number':2656,'multiline':False]
['text':' "term_opencmd"','line_number':2657,'multiline':False]
['text':' "eof_chars"','line_number':2658,'multiline':False]
['text':' "norestore"','line_number':2659,'multiline':False]
['text':' "term_kill"','line_number':2660,'multiline':False]
['text':' "ansi_colors"','line_number':2661,'multiline':False]
['text':' "tty_type"','line_number':2662,'multiline':False]
['text':' "bufnr"','line_number':2663,'multiline':False]
['text':' "term_api"','line_number':2664,'multiline':False]
['text':' "highlight"','line_number':2665,'multiline':False]
['text':'
 * Options for job and channel commands.
 ','line_number':2672,'multiline':True]
['text':' JO_ bits for values that were set','line_number':2677,'multiline':False]
['text':' JO2_ bits for values that were set','line_number':2678,'multiline':False]
['text':' PART_OUT, PART_ERR, PART_IN','line_number':2686,'multiline':False]
['text':' not allocated!','line_number':2688,'multiline':False]
['text':' for testing only','line_number':2708,'multiline':False]
['text':' environment variables','line_number':2713,'multiline':False]
['text':' when non-zero run the job in a terminal window of this size','line_number':2718,'multiline':False]
['text':' first character of "tty_type"','line_number':2740,'multiline':False]
['text':'
 * Structure used for listeners added with listener_add().
 ','line_number':2747,'multiline':True]
['text':'
 * structure used for explicit stack while garbage collecting hash tables
 ','line_number':2759,'multiline':True]
['text':'
 * structure used for explicit stack while garbage collecting lists
 ','line_number':2768,'multiline':True]
['text':'
 * Structure used for iterating over dictionary items.
 * Initialize with dict_iterate_start().
 ','line_number':2777,'multiline':True]
['text':' values for b_syn_spell: what to do with toplevel text','line_number':2787,'multiline':False]
['text':' spell check if @Spell not defined','line_number':2788,'multiline':False]
['text':' spell check toplevel text','line_number':2789,'multiline':False]
['text':' don't spell check toplevel text','line_number':2790,'multiline':False]
['text':' values for b_syn_foldlevel: how to compute foldlevel on a line','line_number':2792,'multiline':False]
['text':' use level of item at start of line','line_number':2793,'multiline':False]
['text':' use lowest local minimum level on line','line_number':2794,'multiline':False]
['text':' avoid #ifdefs for when b_spell is not available','line_number':2796,'multiline':False]
['text':'
 * Used for :syntime: timing of executing a syntax pattern.
 ','line_number':2806,'multiline':True]
['text':' total time used','line_number':2810,'multiline':False]
['text':' time of slowest call','line_number':2811,'multiline':False]
['text':' nr of times used','line_number':2812,'multiline':False]
['text':' nr of times matched','line_number':2813,'multiline':False]
['text':' when the callback is to be invoked','line_number':2824,'multiline':False]
['text':' when TRUE callback is being called','line_number':2825,'multiline':False]
['text':' when TRUE callback is not invoked','line_number':2826,'multiline':False]
['text':' when TRUE keep timer after it fired','line_number':2827,'multiline':False]
['text':' number of times to repeat, -1 forever','line_number':2828,'multiline':False]
['text':' msec','line_number':2829,'multiline':False]
['text':'
 * Structure to hold the type of encryption and the state of encryption or
 * decryption.
 ','line_number':2836,'multiline':True]
['text':' method-specific state information','line_number':2842,'multiline':False]
['text':' values for method_nr','line_number':2845,'multiline':False]
['text':' number of crypt methods','line_number':2851,'multiline':False]
['text':' Currently all crypt methods work inplace.  If one is added that isn't then','line_number':2853,'multiline':False]
['text':' define this.','line_number':2854,'multiline':False]
['text':' Struct for passing arguments down to the crypt_init functions','line_number':2857,'multiline':False]
['text':' bottom of popup just above the command line','line_number':2877,'multiline':False]
['text':'
 * These are items normally related to a buffer.  But when using ":ownsyntax"
 * a window may have its own instance.
 ','line_number':2893,'multiline':True]
['text':' syntax keywords hash table','line_number':2899,'multiline':False]
['text':' idem, ignore case','line_number':2900,'multiline':False]
['text':' TRUE when error occurred in HL','line_number':2901,'multiline':False]
['text':' TRUE when 'redrawtime' reached','line_number':2903,'multiline':False]
['text':' ignore case for :syn cmds','line_number':2905,'multiline':False]
['text':' how to compute foldlevel on a line','line_number':2906,'multiline':False]
['text':' SYNSPL_ values','line_number':2907,'multiline':False]
['text':' table for syntax patterns','line_number':2908,'multiline':False]
['text':' table for syntax clusters','line_number':2909,'multiline':False]
['text':' @Spell cluster ID or 0','line_number':2910,'multiline':False]
['text':' @NoSpell cluster ID or 0','line_number':2911,'multiline':False]
['text':' TRUE when there is an item with a','line_number':2912,'multiline':False]
['text':' "containedin" argument','line_number':2913,'multiline':False]
['text':' flags about how to sync','line_number':2914,'multiline':False]
['text':' group to sync on','line_number':2915,'multiline':False]
['text':' minimal sync lines offset','line_number':2916,'multiline':False]
['text':' maximal sync lines offset','line_number':2917,'multiline':False]
['text':' offset for multi-line pattern','line_number':2918,'multiline':False]
['text':' line continuation pattern','line_number':2919,'multiline':False]
['text':' line continuation program','line_number':2920,'multiline':False]
['text':' ignore-case flag for above','line_number':2924,'multiline':False]
['text':' for ":syntax include"','line_number':2925,'multiline':False]
['text':' auto-conceal for :syn cmds','line_number':2927,'multiline':False]
['text':' number of patterns with the HL_FOLD','line_number':2930,'multiline':False]
['text':' flag set','line_number':2931,'multiline':False]
['text':'
     * b_sst_array[] contains the state stack for a number of lines, for the
     * start of that line (col == 0).  This avoids having to recompute the
     * syntax state too often.
     * b_sst_array[] is allocated to hold the state for all displayed lines,
     * and states for 1 out of about 20 other lines.
     * b_sst_array	pointer to an array of synstate_T
     * b_sst_len	number of entries in b_sst_array[]
     * b_sst_first	pointer to first used entry in b_sst_array[] or NULL
     * b_sst_firstfree	pointer to first free entry in b_sst_array[] or NULL
     * b_sst_freecount	number of free entries in b_sst_array[]
     * b_sst_check_lnum	entries after this lnum need to be checked for
     *			validity (MAXLNUM means no check needed)
     ','line_number':2933,'multiline':True]
['text':' last display tick','line_number':2953,'multiline':False]
['text':' FEAT_SYN_HL','line_number':2954,'multiline':False]
['text':' for spell checking','line_number':2957,'multiline':False]
['text':' list of pointers to slang_T, see spell.c','line_number':2958,'multiline':False]
['text':' flags: is midword char','line_number':2959,'multiline':False]
['text':' multi-byte midword chars','line_number':2960,'multiline':False]
['text':' 'spellcapcheck'','line_number':2961,'multiline':False]
['text':' program for 'spellcapcheck'','line_number':2962,'multiline':False]
['text':' 'spellfile'','line_number':2963,'multiline':False]
['text':' 'spelllang'','line_number':2964,'multiline':False]
['text':' 'spelloptions'','line_number':2965,'multiline':False]
['text':' all CJK letters as OK','line_number':2966,'multiline':False]
['text':' syntax iskeyword option','line_number':2971,'multiline':False]
['text':' iskeyword option','line_number':2972,'multiline':False]
['text':'
 * buffer: structure that holds information about one file
 *
 * Several windows can share a single Buffer
 * A buffer is unallocated if there is no memfile for it.
 * A buffer is new if the associated file has never been loaded yet.
 ','line_number':2976,'multiline':True]
['text':' associated memline (also contains line','line_number':2986,'multiline':False]
['text':' count)','line_number':2987,'multiline':False]
['text':' links in list of buffers','line_number':2989,'multiline':False]
['text':' nr of windows open on this buffer','line_number':2992,'multiline':False]
['text':' various BF_ flags','line_number':2994,'multiline':False]
['text':' Buffer is being closed or referenced, don't','line_number':2995,'multiline':False]
['text':' let autocommands wipe it out.','line_number':2996,'multiline':False]
['text':' Buffer is being closed, don't allow opening','line_number':2997,'multiline':False]
['text':' a new window with it.','line_number':2998,'multiline':False]
['text':'
     * b_ffname has the full path of the file (NULL for no name).
     * b_sfname is the name as the user typed it (or NULL).
     * b_fname is the same as b_sfname, unless ":cd" has been done,
     *		then it is the same as b_ffname (NULL for no name).
     ','line_number':3000,'multiline':True]
['text':' full path file name, allocated','line_number':3006,'multiline':False]
['text':' short file name, allocated, may be equal to','line_number':3007,'multiline':False]
['text':' b_ffname','line_number':3008,'multiline':False]
['text':' current file name, points to b_ffname or','line_number':3009,'multiline':False]
['text':' b_sfname','line_number':3010,'multiline':False]
['text':' TRUE when b_dev has a valid number','line_number':3013,'multiline':False]
['text':' device number','line_number':3014,'multiline':False]
['text':' inode number','line_number':3015,'multiline':False]
['text':' Record format','line_number':3018,'multiline':False]
['text':' Record attribute','line_number':3019,'multiline':False]
['text':' Max record size','line_number':3020,'multiline':False]
['text':' buffer number for this file.','line_number':3022,'multiline':False]
['text':' key used for buf_hashtab, holds b_fnum as','line_number':3024,'multiline':False]
['text':' hex string','line_number':3025,'multiline':False]
['text':' 'modified': Set to TRUE if something in the','line_number':3027,'multiline':False]
['text':' file has been changed and not written out.','line_number':3028,'multiline':False]
['text':' holds the b:changedtick value in','line_number':3029,'multiline':False]
['text':' b_ct_di.di_tv.vval.v_number;','line_number':3030,'multiline':False]
['text':' incremented for each change, also for undo','line_number':3031,'multiline':False]
['text':' b:changedtick when TextChanged was','line_number':3034,'multiline':False]
['text':' last triggered.','line_number':3035,'multiline':False]
['text':' b:changedtick for TextChangedP','line_number':3036,'multiline':False]
['text':' b:changedtick for TextChangedI','line_number':3037,'multiline':False]
['text':' Set to TRUE if we are in the middle of','line_number':3039,'multiline':False]
['text':' saving the buffer.','line_number':3040,'multiline':False]
['text':'
     * Changes to a buffer require updating of the display.  To minimize the
     * work, remember changes made and update everything at once.
     ','line_number':3042,'multiline':True]
['text':' TRUE when there are changes since the last','line_number':3046,'multiline':False]
['text':' time the display was updated','line_number':3047,'multiline':False]
['text':' topmost lnum that was changed','line_number':3048,'multiline':False]
['text':' lnum below last changed line, AFTER the','line_number':3049,'multiline':False]
['text':' change','line_number':3050,'multiline':False]
['text':' number of extra buffer lines inserted;','line_number':3051,'multiline':False]
['text':' negative when lines were deleted','line_number':3052,'multiline':False]
['text':' list of last used info for each window','line_number':3054,'multiline':False]
['text':' last change time of original file','line_number':3056,'multiline':False]
['text':' nanoseconds of last change time','line_number':3057,'multiline':False]
['text':' last change time when reading','line_number':3058,'multiline':False]
['text':' nanoseconds of last read time','line_number':3059,'multiline':False]
['text':' size of original file in bytes','line_number':3060,'multiline':False]
['text':' mode of original file','line_number':3061,'multiline':False]
['text':' time when the buffer was last used; used','line_number':3063,'multiline':False]
['text':' for viminfo','line_number':3064,'multiline':False]
['text':' current named marks (mark.c)','line_number':3067,'multiline':False]
['text':' These variables are set when VIsual_active becomes FALSE','line_number':3069,'multiline':False]
['text':' b_visual.vi_mode for visualmode()','line_number':3072,'multiline':False]
['text':' cursor position when last unloading this','line_number':3075,'multiline':False]
['text':' buffer','line_number':3076,'multiline':False]
['text':' where Insert mode was left','line_number':3077,'multiline':False]
['text':' position of last change: '. mark','line_number':3078,'multiline':False]
['text':'
     * the changelist contains old change positions
     ','line_number':3080,'multiline':True]
['text':' number of active entries','line_number':3084,'multiline':False]
['text':' set by u_savecommon()','line_number':3085,'multiline':False]
['text':'
     * Character table, only used in charset.c for 'iskeyword'
     * 32 bytes of 8 bits: 1 bit per character 0-255.
     ','line_number':3087,'multiline':True]
['text':' Table used for mappings local to a buffer.','line_number':3093,'multiline':False]
['text':' First abbreviation local to a buffer.','line_number':3096,'multiline':False]
['text':' User commands local to the buffer.','line_number':3099,'multiline':False]
['text':' start and end of an operator, also used for '[ and ']','line_number':3101,'multiline':False]
['text':' used for Insstart_orig','line_number':3103,'multiline':False]
['text':' Have we read viminfo marks yet?','line_number':3107,'multiline':False]
['text':'
     * The following only used in undo.c.
     ','line_number':3110,'multiline':True]
['text':' pointer to oldest header','line_number':3113,'multiline':False]
['text':' pointer to newest header; may not be valid','line_number':3114,'multiline':False]
['text':' if b_u_curhead is not NULL','line_number':3115,'multiline':False]
['text':' pointer to current header','line_number':3116,'multiline':False]
['text':' current number of headers','line_number':3117,'multiline':False]
['text':' entry lists are synced','line_number':3118,'multiline':False]
['text':' last used undo sequence number','line_number':3119,'multiline':False]
['text':' counter for last file write','line_number':3120,'multiline':False]
['text':' uh_seq of header below which we are now','line_number':3121,'multiline':False]
['text':' uh_time of header below which we are now','line_number':3122,'multiline':False]
['text':' file write nr after which we are now','line_number':3123,'multiline':False]
['text':'
     * variables for "U" command in undo.c
     ','line_number':3125,'multiline':True]
['text':' saved line for "U" command','line_number':3128,'multiline':False]
['text':' line number of line in u_line','line_number':3129,'multiline':False]
['text':' optional column number','line_number':3130,'multiline':False]
['text':' ^N/^P have scanned this buffer','line_number':3132,'multiline':False]
['text':' flags for use of ":lmap" and IM control','line_number':3134,'multiline':False]
['text':' input mode for insert','line_number':3135,'multiline':False]
['text':' input mode for search','line_number':3136,'multiline':False]
['text':'	Use b_p_iminsert value for search','line_number':3137,'multiline':False]
['text':'	Input via none','line_number':3138,'multiline':False]
['text':'	Input via langmap','line_number':3139,'multiline':False]
['text':'	Input via input method','line_number':3140,'multiline':False]
['text':' using "lmap" mappings','line_number':3144,'multiline':False]
['text':' 'keymap' was set, call keymap_init()','line_number':3145,'multiline':False]
['text':' 'keymap' mappings have been loaded','line_number':3146,'multiline':False]
['text':' the keymap table','line_number':3147,'multiline':False]
['text':'
     * Options local to a buffer.
     * They are here because their value depends on the type of file
     * or contents of the file being edited.
     ','line_number':3150,'multiline':True]
['text':' set when options initialized','line_number':3155,'multiline':False]
['text':' SCTXs for buffer-local options','line_number':3158,'multiline':False]
['text':' 'autoindent'','line_number':3161,'multiline':False]
['text':' b_p_ai saved for paste mode','line_number':3162,'multiline':False]
['text':' 'backupcopy'','line_number':3163,'multiline':False]
['text':' flags for 'backupcopy'','line_number':3164,'multiline':False]
['text':' 'copyindent'','line_number':3165,'multiline':False]
['text':' 'binary'','line_number':3166,'multiline':False]
['text':' 'bomb'','line_number':3167,'multiline':False]
['text':' 'bufhidden'','line_number':3168,'multiline':False]
['text':' 'buftype'','line_number':3169,'multiline':False]
['text':' 'buflisted'','line_number':3175,'multiline':False]
['text':' 'cindent'','line_number':3176,'multiline':False]
['text':' 'cinoptions'','line_number':3177,'multiline':False]
['text':' 'cinkeys'','line_number':3178,'multiline':False]
['text':' 'cinscopedecls'','line_number':3179,'multiline':False]
['text':' 'cinwords'','line_number':3180,'multiline':False]
['text':' 'comments'','line_number':3181,'multiline':False]
['text':' 'commentstring'','line_number':3183,'multiline':False]
['text':' 'complete'','line_number':3185,'multiline':False]
['text':' 'completeslash'','line_number':3187,'multiline':False]
['text':' 'completefunc'','line_number':3190,'multiline':False]
['text':' 'completefunc' callback','line_number':3191,'multiline':False]
['text':' 'omnifunc'','line_number':3192,'multiline':False]
['text':' 'omnifunc' callback','line_number':3193,'multiline':False]
['text':' 'tagfunc' option value','line_number':3196,'multiline':False]
['text':' 'tagfunc' callback','line_number':3197,'multiline':False]
['text':' 'endoffile'','line_number':3199,'multiline':False]
['text':' 'endofline'','line_number':3200,'multiline':False]
['text':' 'fixendofline'','line_number':3201,'multiline':False]
['text':' 'expandtab'','line_number':3202,'multiline':False]
['text':' b_p_et saved for binary mode','line_number':3203,'multiline':False]
['text':' b_p_et saved for paste mode','line_number':3204,'multiline':False]
['text':' 'fileencoding'','line_number':3205,'multiline':False]
['text':' 'fileformat'','line_number':3206,'multiline':False]
['text':' 'filetype'','line_number':3207,'multiline':False]
['text':' 'formatoptions'','line_number':3208,'multiline':False]
['text':' 'formatlistpat'','line_number':3209,'multiline':False]
['text':' 'infercase'','line_number':3210,'multiline':False]
['text':' 'iskeyword'','line_number':3211,'multiline':False]
['text':' 'define' local value','line_number':3213,'multiline':False]
['text':' 'include'','line_number':3214,'multiline':False]
['text':' 'includeexpr'','line_number':3216,'multiline':False]
['text':' flags for 'includeexpr'','line_number':3217,'multiline':False]
['text':' 'indentexpr'','line_number':3221,'multiline':False]
['text':' flags for 'indentexpr'','line_number':3222,'multiline':False]
['text':' 'indentkeys'','line_number':3223,'multiline':False]
['text':' 'formatprg'','line_number':3225,'multiline':False]
['text':' 'formatexpr'','line_number':3227,'multiline':False]
['text':' flags for 'formatexpr'','line_number':3228,'multiline':False]
['text':' 'key'','line_number':3231,'multiline':False]
['text':' 'keywordprg'','line_number':3233,'multiline':False]
['text':' 'lisp'','line_number':3234,'multiline':False]
['text':' 'lispoptions'','line_number':3235,'multiline':False]
['text':' 'makeencoding'','line_number':3236,'multiline':False]
['text':' 'matchpairs'','line_number':3237,'multiline':False]
['text':' 'modeline'','line_number':3238,'multiline':False]
['text':' b_p_ml saved for binary mode','line_number':3239,'multiline':False]
['text':' 'modifiable'','line_number':3240,'multiline':False]
['text':' 'nrformats'','line_number':3241,'multiline':False]
['text':' 'preserveindent'','line_number':3242,'multiline':False]
['text':' 'quoteescape'','line_number':3243,'multiline':False]
['text':' 'readonly'','line_number':3244,'multiline':False]
['text':' 'shiftwidth'','line_number':3245,'multiline':False]
['text':' 'shortname'','line_number':3246,'multiline':False]
['text':' 'smartindent'','line_number':3247,'multiline':False]
['text':' 'softtabstop'','line_number':3248,'multiline':False]
['text':' b_p_sts saved for paste mode','line_number':3249,'multiline':False]
['text':' 'suffixesadd'','line_number':3250,'multiline':False]
['text':' 'swapfile'','line_number':3251,'multiline':False]
['text':' 'synmaxcol'','line_number':3253,'multiline':False]
['text':' 'syntax'','line_number':3254,'multiline':False]
['text':' 'tabstop'','line_number':3256,'multiline':False]
['text':' 'textmode'','line_number':3257,'multiline':False]
['text':' 'textwidth'','line_number':3258,'multiline':False]
['text':' b_p_tw saved for binary mode','line_number':3259,'multiline':False]
['text':' b_p_tw saved for paste mode','line_number':3260,'multiline':False]
['text':' 'wrapmargin'','line_number':3261,'multiline':False]
['text':' b_p_wm saved for binary mode','line_number':3262,'multiline':False]
['text':' b_p_wm saved for paste mode','line_number':3263,'multiline':False]
['text':' 'varsofttabstop'','line_number':3265,'multiline':False]
['text':' 'varsofttabstop' in internal format','line_number':3266,'multiline':False]
['text':' b_p_vsts saved for paste mode','line_number':3267,'multiline':False]
['text':' 'vartabstop'','line_number':3268,'multiline':False]
['text':' 'vartabstop' in internal format','line_number':3269,'multiline':False]
['text':' 'keymap'','line_number':3272,'multiline':False]
['text':'
     * local values for options which are normally global
     ','line_number':3275,'multiline':True]
['text':' 'grepprg' local value','line_number':3279,'multiline':False]
['text':' 'makeprg' local value','line_number':3280,'multiline':False]
['text':' 'errorformat' local value','line_number':3281,'multiline':False]
['text':' 'equalprg' local value','line_number':3283,'multiline':False]
['text':' 'path' local value','line_number':3284,'multiline':False]
['text':' 'autoread' local value','line_number':3285,'multiline':False]
['text':' 'tags' local value','line_number':3286,'multiline':False]
['text':' 'tagcase' local value','line_number':3287,'multiline':False]
['text':' flags for 'tagcase'','line_number':3288,'multiline':False]
['text':' 'dictionary' local value','line_number':3289,'multiline':False]
['text':' 'thesaurus' local value','line_number':3290,'multiline':False]
['text':' 'thesaurusfunc' local value','line_number':3292,'multiline':False]
['text':' 'thesaurusfunc' callback','line_number':3293,'multiline':False]
['text':' 'undolevels' local value','line_number':3295,'multiline':False]
['text':' 'undofile'','line_number':3297,'multiline':False]
['text':' 'lispwords' local value','line_number':3299,'multiline':False]
['text':' 'termwinscroll'','line_number':3301,'multiline':False]
['text':'
     * end of buffer options
     ','line_number':3304,'multiline':True]
['text':' values set from b_p_cino','line_number':3308,'multiline':False]
['text':' non-zero lnum when last line of next binary','line_number':3347,'multiline':False]
['text':' write should not have an end-of-line','line_number':3348,'multiline':False]
['text':' last line had eof (CTRL-Z) when it was read','line_number':3350,'multiline':False]
['text':' last line had eol when it was read','line_number':3351,'multiline':False]
['text':' first char of 'ff' when edit started','line_number':3352,'multiline':False]
['text':' 'fileencoding' when edit started or NULL','line_number':3353,'multiline':False]
['text':' "++bad=" argument when edit started or 0','line_number':3354,'multiline':False]
['text':' 'bomb' when it was read','line_number':3355,'multiline':False]
['text':' variable for "b:" Dictionary','line_number':3358,'multiline':False]
['text':' internal variables, local to buffer','line_number':3359,'multiline':False]
['text':' TRUE when text props were added','line_number':3365,'multiline':False]
['text':' text property types local to buffer','line_number':3366,'multiline':False]
['text':' entries of b_proptypes sorted on tp_id','line_number':3367,'multiline':False]
['text':' stores text for props, index by (-id - 1)','line_number':3368,'multiline':False]
['text':' 'balloonexpr' local value','line_number':3372,'multiline':False]
['text':' flags for 'balloonexpr'','line_number':3373,'multiline':False]
['text':' 'cryptmethod'','line_number':3376,'multiline':False]
['text':' When a buffer is created, it starts without a swap file.  b_may_swap is','line_number':3379,'multiline':False]
['text':' then set to indicate that a swap file may be opened later.  It is reset','line_number':3380,'multiline':False]
['text':' if a swap file could not be opened.','line_number':3381,'multiline':False]
['text':' Set to 1 if user has been warned on first','line_number':3383,'multiline':False]
['text':' change of a read-only file','line_number':3384,'multiline':False]
['text':' Two special kinds of buffers:','line_number':3386,'multiline':False]
['text':' help buffer  - used for help files, won't use a swap file.','line_number':3387,'multiline':False]
['text':' spell buffer - used for spell info, never displayed and doesn't have a','line_number':3388,'multiline':False]
['text':'		      file name.','line_number':3389,'multiline':False]
['text':' TRUE for help file buffer (when set b_p_bt','line_number':3390,'multiline':False]
['text':' is "help")','line_number':3391,'multiline':False]
['text':' TRUE for a spell file buffer, most fields','line_number':3393,'multiline':False]
['text':' are not used!  Use the B_SPELL macro to','line_number':3394,'multiline':False]
['text':' access b_spell without #ifdef.','line_number':3395,'multiline':False]
['text':' this file has an 8.3 file name','line_number':3398,'multiline':False]
['text':' set by prompt_setprompt()','line_number':3401,'multiline':False]
['text':' set by prompt_setcallback()','line_number':3402,'multiline':False]
['text':' set by prompt_setinterrupt()','line_number':3403,'multiline':False]
['text':' value for restart_edit when entering','line_number':3404,'multiline':False]
['text':' a prompt buffer window.','line_number':3405,'multiline':False]
['text':' The MzScheme reference to this buffer','line_number':3408,'multiline':False]
['text':' The Python reference to this buffer','line_number':3416,'multiline':False]
['text':' The Python3 reference to this buffer','line_number':3420,'multiline':False]
['text':' Info related to syntax highlighting.  w_s','line_number':3432,'multiline':False]
['text':' normally points to this, but some windows','line_number':3433,'multiline':False]
['text':' may use a different synblock_T.','line_number':3434,'multiline':False]
['text':' list of placed signs','line_number':3438,'multiline':False]
['text':' Flag that is set when a first sign is','line_number':3440,'multiline':False]
['text':' added and remains set until the end of','line_number':3441,'multiline':False]
['text':' the netbeans session.','line_number':3442,'multiline':False]
['text':' TRUE when buffer is owned by NetBeans','line_number':3447,'multiline':False]
['text':' TRUE if b_netbeans_file was once set','line_number':3448,'multiline':False]
['text':' TRUE when appended lines are written to','line_number':3451,'multiline':False]
['text':' a channel.','line_number':3452,'multiline':False]
['text':' Encryption state while reading or writing','line_number':3456,'multiline':False]
['text':' the file. NULL when not using encryption.','line_number':3457,'multiline':False]
['text':' modes where CTRL-C is mapped','line_number':3459,'multiline':False]
['text':' When not NULL this buffer is for a terminal','line_number':3462,'multiline':False]
['text':' window.','line_number':3463,'multiline':False]
['text':' internal diff failed for this buffer','line_number':3466,'multiline':False]
['text':' file_buffer','line_number':3468,'multiline':False]
['text':'
 * Stuff for diff mode.
 ','line_number':3472,'multiline':True]
['text':' up to eight buffers can be diff'ed','line_number':3475,'multiline':False]
['text':'
 * Each diffblock defines where a block of lines starts in each of the buffers
 * and how many lines it occupies in that buffer.  When the lines are missing
 * in the buffer the df_count[] is zero.  This is all counted in
 * buffer lines.
 * There is always at least one unchanged line in between the diffs.
 * Otherwise it would have been included in the diff above or below it.
 * df_lnum[] + df_count[] is the lnum below the change.  When in one buffer
 * lines have been inserted, in the other buffer df_lnum[] is the line below
 * the insertion and df_count[] is zero.  When appending lines at the end of
 * the buffer, df_lnum[] is one beyond the end!
 * This is using a linked list, because the number of differences is expected
 * to be reasonable small.  The list is sorted on lnum.
 ','line_number':3477,'multiline':True]
['text':' line number in buffer','line_number':3495,'multiline':False]
['text':' nr of inserted/changed lines','line_number':3496,'multiline':False]
['text':'
 * Tab pages point to the top frame of each tab page.
 * Note: Most values are NOT valid for the current tab page!  Use "curwin",
 * "firstwin", etc. for that.  "tp_topframe" is always valid and can be
 * compared against "topframe" to find the current tab page.
 ','line_number':3504,'multiline':True]
['text':' next tabpage or NULL','line_number':3513,'multiline':False]
['text':' topframe for the windows','line_number':3514,'multiline':False]
['text':' current window in this Tab page','line_number':3515,'multiline':False]
['text':' previous window in this Tab page','line_number':3516,'multiline':False]
['text':' first window in this Tab page','line_number':3517,'multiline':False]
['text':' last window in this Tab page','line_number':3518,'multiline':False]
['text':' first popup window in this Tab page','line_number':3520,'multiline':False]
['text':' Rows when Tab page was left','line_number':3522,'multiline':False]
['text':' Columns when Tab page was left, -1 when','line_number':3523,'multiline':False]
['text':' calling shell_new_columns() postponed','line_number':3524,'multiline':False]
['text':' value of 'cmdheight' when frame size','line_number':3525,'multiline':False]
['text':' was set','line_number':3526,'multiline':False]
['text':' previous value of which_scrollbars','line_number':3529,'multiline':False]
['text':' absolute path of local directory or','line_number':3532,'multiline':False]
['text':' NULL','line_number':3533,'multiline':False]
['text':' previous directory','line_number':3534,'multiline':False]
['text':' list of diffs is outdated','line_number':3539,'multiline':False]
['text':' update diffs before redrawing','line_number':3540,'multiline':False]
['text':' window layout snapshots','line_number':3542,'multiline':False]
['text':' variable for "t:" Dictionary','line_number':3544,'multiline':False]
['text':' internal variables, local to tab page','line_number':3545,'multiline':False]
['text':' The Python value for this tab page','line_number':3549,'multiline':False]
['text':' The Python value for this tab page','line_number':3553,'multiline':False]
['text':'
 * Structure to cache info for displayed lines in w_lines[].
 * Each logical line has one entry.
 * The entry tells how the logical line is currently displayed in the window.
 * This is updated when displaying the window.
 * When the display is changed (e.g., when clearing the screen) w_lines_valid
 * is changed to exclude invalid entries.
 * When making changes to the buffer, wl_valid is reset to indicate wl_size
 * may not reflect what is actually in the buffer.  When wl_valid is FALSE,
 * the entries can only be used to count the number of displayed lines used.
 * wl_lnum and wl_lastlnum are invalid too.
 ','line_number':3557,'multiline':True]
['text':' buffer line number for logical line','line_number':3571,'multiline':False]
['text':' height in screen lines','line_number':3572,'multiline':False]
['text':' TRUE values are valid for text in buffer','line_number':3573,'multiline':False]
['text':' TRUE when this is a range of folded lines','line_number':3575,'multiline':False]
['text':' last buffer line number for logical line','line_number':3576,'multiline':False]
['text':'
 * Windows are kept in a tree of frames.  Each frame has a column (FR_COL)
 * or row (FR_ROW) layout or is a leaf, which has a window.
 ','line_number':3580,'multiline':True]
['text':' FR_LEAF, FR_COL or FR_ROW','line_number':3586,'multiline':False]
['text':' new width used in win_equal_rec()','line_number':3588,'multiline':False]
['text':' new height used in win_equal_rec()','line_number':3590,'multiline':False]
['text':' containing frame or NULL','line_number':3591,'multiline':False]
['text':' frame right or below in same parent, NULL','line_number':3592,'multiline':False]
['text':' for last','line_number':3593,'multiline':False]
['text':' frame left or above in same parent, NULL','line_number':3594,'multiline':False]
['text':' for first','line_number':3595,'multiline':False]
['text':' fr_child and fr_win are mutually exclusive','line_number':3596,'multiline':False]
['text':' first contained frame','line_number':3597,'multiline':False]
['text':' window that fills this frame; for a snapshot','line_number':3598,'multiline':False]
['text':' set to the current window','line_number':3599,'multiline':False]
['text':' frame is a leaf','line_number':3602,'multiline':False]
['text':' frame with a row of windows','line_number':3603,'multiline':False]
['text':' frame with a column of windows','line_number':3604,'multiline':False]
['text':'
 * Struct used for highlighting 'hlsearch' matches, matches defined by
 * ":match" and matches defined by match functions.
 * For 'hlsearch' there is one pattern for all windows.  For ":match" and the
 * match functions there is a different pattern for each window.
 ','line_number':3606,'multiline':True]
['text':' points to the regexp program; contains last','line_number':3614,'multiline':False]
['text':' found match (may continue in next line)','line_number':3615,'multiline':False]
['text':' the buffer to search for a match','line_number':3616,'multiline':False]
['text':' the line to search for a match','line_number':3617,'multiline':False]
['text':' attributes to be used for a match','line_number':3618,'multiline':False]
['text':' attributes currently active in win_line()','line_number':3619,'multiline':False]
['text':' first lnum to search for multi-line pat','line_number':3620,'multiline':False]
['text':' in win_line() points to char where HL starts','line_number':3621,'multiline':False]
['text':' in win_line() points to char where HL ends','line_number':3622,'multiline':False]
['text':' position specified directly by','line_number':3623,'multiline':False]
['text':' matchaddpos(). TRUE/FALSE','line_number':3624,'multiline':False]
['text':' TRUE if the cursor is inside the match, used for','line_number':3625,'multiline':False]
['text':' CurSearch','line_number':3626,'multiline':False]
['text':'
 * Same as lpos_T, but with additional field len.
 ','line_number':3629,'multiline':True]
['text':' line number','line_number':3634,'multiline':False]
['text':' column number','line_number':3635,'multiline':False]
['text':' length: 0 - to the end of line','line_number':3636,'multiline':False]
['text':'
 * matchitem_T provides a linked list for storing match items for ":match",
 * matchadd() and matchaddpos().
 ','line_number':3639,'multiline':True]
['text':' match ID','line_number':3647,'multiline':False]
['text':' match priority','line_number':3648,'multiline':False]
['text':' Either a pattern is defined (mit_pattern is not NUL) or a list of','line_number':3650,'multiline':False]
['text':' positions is given (mit_pos is not NULL and mit_pos_count > 0).','line_number':3651,'multiline':False]
['text':' pattern to highlight','line_number':3652,'multiline':False]
['text':' regexp program for pattern','line_number':3653,'multiline':False]
['text':' array of positions','line_number':3655,'multiline':False]
['text':' nr of entries in mit_pos','line_number':3656,'multiline':False]
['text':' internal position counter','line_number':3657,'multiline':False]
['text':' top buffer line','line_number':3658,'multiline':False]
['text':' bottom buffer line','line_number':3659,'multiline':False]
['text':' struct for doing the actual highlighting','line_number':3661,'multiline':False]
['text':' highlight group ID','line_number':3662,'multiline':False]
['text':' cchar for Conceal highlighting','line_number':3664,'multiline':False]
['text':' Structure to store last cursor position and topline.  Used by check_lnums()','line_number':3668,'multiline':False]
['text':' and reset_lnums().','line_number':3669,'multiline':False]
['text':' original topline value','line_number':3672,'multiline':False]
['text':' corrected topline value','line_number':3673,'multiline':False]
['text':' original cursor position','line_number':3674,'multiline':False]
['text':' corrected cursor position','line_number':3675,'multiline':False]
['text':'
 * Characters from the 'listchars' option
 ','line_number':3686,'multiline':True]
['text':'
 * Characters from the 'fillchars' option
 ','line_number':3708,'multiline':True]
['text':'
 * Structure which contains all information that belongs to a window
 *
 * All row numbers are relative to the start of the window, except w_winrow.
 ','line_number':3725,'multiline':True]
['text':' unique window ID','line_number':3732,'multiline':False]
['text':' buffer we are a window into','line_number':3734,'multiline':False]
['text':' link to previous window','line_number':3736,'multiline':False]
['text':' link to next window','line_number':3737,'multiline':False]
['text':' for :ownsyntax','line_number':3740,'multiline':False]
['text':' window is being closed, don't let','line_number':3743,'multiline':False]
['text':' autocommands close it too.','line_number':3744,'multiline':False]
['text':' frame containing this window','line_number':3746,'multiline':False]
['text':' cursor position in buffer','line_number':3748,'multiline':False]
['text':' The column we'd like to be at.  This is','line_number':3750,'multiline':False]
['text':' used to try to stay in the same column','line_number':3751,'multiline':False]
['text':' for up/down cursor motions.','line_number':3752,'multiline':False]
['text':' If set, then update w_curswant the next','line_number':3754,'multiline':False]
['text':' time through cursupdate() to the','line_number':3755,'multiline':False]
['text':' current virtual column','line_number':3756,'multiline':False]
['text':' where last time 'cursorline' was drawn','line_number':3759,'multiline':False]
['text':'
     * the next seven are used to update the Visual highlighting
     ','line_number':3762,'multiline':True]
['text':' last known VIsual_mode','line_number':3765,'multiline':False]
['text':' last known end of visual part','line_number':3766,'multiline':False]
['text':' first column for block visual part','line_number':3767,'multiline':False]
['text':' last column for block visual part','line_number':3768,'multiline':False]
['text':' last known start of visual part','line_number':3769,'multiline':False]
['text':' last known start of visual part','line_number':3770,'multiline':False]
['text':' last known value of Curswant','line_number':3771,'multiline':False]
['text':' cursor lnum when 'rnu' was last','line_number':3773,'multiline':False]
['text':' redrawn','line_number':3774,'multiline':False]
['text':' 'listchars' characters','line_number':3776,'multiline':False]
['text':' 'fillchars' characters','line_number':3777,'multiline':False]
['text':'
     * "w_topline", "w_leftcol" and "w_skipcol" specify the offsets for
     * displaying the buffer.
     ','line_number':3779,'multiline':True]
['text':' buffer line number of the line at the','line_number':3783,'multiline':False]
['text':' top of the window','line_number':3784,'multiline':False]
['text':' flag set to TRUE when topline is set,','line_number':3785,'multiline':False]
['text':' e.g. by winrestview()','line_number':3786,'multiline':False]
['text':' number of the line below the bottom of','line_number':3788,'multiline':False]
['text':' the window','line_number':3789,'multiline':False]
['text':' number of filler lines above w_topline','line_number':3792,'multiline':False]
['text':' w_topfill at last redraw','line_number':3793,'multiline':False]
['text':' TRUE when filler lines are actually','line_number':3794,'multiline':False]
['text':' below w_topline (at end of file)','line_number':3795,'multiline':False]
['text':' w_botfill at last redraw','line_number':3796,'multiline':False]
['text':' screen column number of the left most','line_number':3798,'multiline':False]
['text':' character in the window; used when','line_number':3799,'multiline':False]
['text':' 'wrap' is off','line_number':3800,'multiline':False]
['text':' starting screen column for the first','line_number':3801,'multiline':False]
['text':' line in the window; used when 'wrap' is','line_number':3802,'multiline':False]
['text':' on; does not include win_col_off()','line_number':3803,'multiline':False]
['text':' number of ~ rows in window','line_number':3805,'multiline':False]
['text':' number of filler rows at the end of the','line_number':3807,'multiline':False]
['text':' window','line_number':3808,'multiline':False]
['text':' six fields that are only used when there is a WinScrolled autocommand','line_number':3811,'multiline':False]
['text':' last known value for w_topline','line_number':3812,'multiline':False]
['text':' last known value for w_topfill','line_number':3814,'multiline':False]
['text':' last known value for w_leftcol','line_number':3816,'multiline':False]
['text':' last known value for w_skipcol','line_number':3817,'multiline':False]
['text':' last known value for w_width','line_number':3818,'multiline':False]
['text':' last known value for w_height','line_number':3819,'multiline':False]
['text':'
     * Layout of the window in the screen.
     * May need to add "msg_scrolled" to "w_winrow" in rare situations.
     ','line_number':3821,'multiline':True]
['text':' first row of window in screen','line_number':3825,'multiline':False]
['text':' number of rows in window, excluding','line_number':3826,'multiline':False]
['text':' status/command/winbar line(s)','line_number':3827,'multiline':False]
['text':' previous winrow used for 'splitkeep'','line_number':3828,'multiline':False]
['text':' previous height used for 'splitkeep'','line_number':3829,'multiline':False]
['text':' number of status lines (0 or 1)','line_number':3831,'multiline':False]
['text':' Leftmost column of window in screen.','line_number':3832,'multiline':False]
['text':' Width of window, excluding separation.','line_number':3833,'multiline':False]
['text':' Number of separator columns (0 or 1).','line_number':3834,'multiline':False]
['text':' backup of cursor pos and topline','line_number':3836,'multiline':False]
['text':' if TRUE cursor may be invalid','line_number':3837,'multiline':False]
['text':' POPF_ values','line_number':3840,'multiline':False]
['text':' POPUP_HANDLE[0-9] flags','line_number':3841,'multiline':False]
['text':' do not shift popup to fit on screen','line_number':3844,'multiline':False]
['text':' when not zero: textprop type ID','line_number':3845,'multiline':False]
['text':' window to search for textprop','line_number':3846,'multiline':False]
['text':' when not zero: textprop ID','line_number':3847,'multiline':False]
['text':' "minheight" for popup window','line_number':3849,'multiline':False]
['text':' "minwidth" for popup window','line_number':3850,'multiline':False]
['text':' "maxheight" for popup window','line_number':3851,'multiline':False]
['text':' "maxwidth" for popup window','line_number':3852,'multiline':False]
['text':' maxwidth from option','line_number':3853,'multiline':False]
['text':' "line" for popup window','line_number':3854,'multiline':False]
['text':' "col" for popup window','line_number':3855,'multiline':False]
['text':' "firstline" for popup window','line_number':3856,'multiline':False]
['text':' when zero don't use a scrollbar','line_number':3857,'multiline':False]
['text':' 1 if scrollbar displayed, 0 otherwise','line_number':3858,'multiline':False]
['text':' "scrollbarhighlight"','line_number':3859,'multiline':False]
['text':' "thumbhighlight"','line_number':3860,'multiline':False]
['text':' popup padding top/right/bot/left','line_number':3861,'multiline':False]
['text':' popup border top/right/bot/left','line_number':3862,'multiline':False]
['text':' popup border highlight','line_number':3863,'multiline':False]
['text':' popup border characters','line_number':3864,'multiline':False]
['text':' columns left of the screen','line_number':3866,'multiline':False]
['text':' columns right of the screen','line_number':3867,'multiline':False]
['text':' b:changedtick of popup buffer','line_number':3868,'multiline':False]
['text':' when position was computed','line_number':3869,'multiline':False]
['text':' b:changedtick of buffer with','line_number':3870,'multiline':False]
['text':' w_popup_prop_type when position','line_number':3871,'multiline':False]
['text':' was computed','line_number':3872,'multiline':False]
['text':' w_topline of window with','line_number':3873,'multiline':False]
['text':' w_popup_prop_type when position was','line_number':3874,'multiline':False]
['text':' computed','line_number':3875,'multiline':False]
['text':' last known w_cursor.lnum of window','line_number':3876,'multiline':False]
['text':' with "cursorline" set','line_number':3877,'multiline':False]
['text':' popup close callback','line_number':3878,'multiline':False]
['text':' popup filter callback','line_number':3879,'multiline':False]
['text':' popup filter error count','line_number':3880,'multiline':False]
['text':' mode when filter callback is used','line_number':3881,'multiline':False]
['text':' close popup if curwin differs','line_number':3883,'multiline':False]
['text':' close popup if cursor not on this line','line_number':3884,'multiline':False]
['text':' close popup if cursor before this col','line_number':3885,'multiline':False]
['text':' close popup if cursor after this col','line_number':3886,'multiline':False]
['text':' close popup if mouse moves away','line_number':3887,'multiline':False]
['text':' close popup if mouse moves away','line_number':3888,'multiline':False]
['text':' close popup if mouse moves away','line_number':3889,'multiline':False]
['text':' allow closing the popup with the mouse','line_number':3890,'multiline':False]
['text':' list of lists for "mask"','line_number':3892,'multiline':False]
['text':' cached mask cells','line_number':3893,'multiline':False]
['text':' height of w_popup_mask_cells','line_number':3894,'multiline':False]
['text':' width of w_popup_mask_cells','line_number':3895,'multiline':False]
['text':' timer for closing popup window','line_number':3897,'multiline':False]
['text':' WFLAG_ flags','line_number':3900,'multiline':False]
['text':' popup border and padding were added to','line_number':3902,'multiline':False]
['text':' w_wcol','line_number':3903,'multiline':False]
['text':' popup border and padding were added to','line_number':3904,'multiline':False]
['text':' w_wrow','line_number':3905,'multiline':False]
['text':'
     * === start of cached values ====
     ','line_number':3908,'multiline':True]
['text':'
     * Recomputing is minimized by storing the result of computations.
     * Use functions in screen.c to check if they are valid and to update.
     * w_valid is a bitfield of flags, which indicate if specific values are
     * valid or need to be recomputed.	See screen.c for values.
     ','line_number':3911,'multiline':True]
['text':' last known position of w_cursor, used','line_number':3918,'multiline':False]
['text':' to adjust w_valid','line_number':3919,'multiline':False]
['text':' last known w_leftcol','line_number':3920,'multiline':False]
['text':' last known w_skipcol','line_number':3921,'multiline':False]
['text':'
     * w_cline_height is the number of physical lines taken by the buffer line
     * that the cursor is on.  We use this to avoid extra calls to plines().
     ','line_number':3923,'multiline':True]
['text':' current size of cursor line','line_number':3927,'multiline':False]
['text':' cursor line is folded','line_number':3929,'multiline':False]
['text':' starting row of the cursor line','line_number':3932,'multiline':False]
['text':' column number of the cursor in the','line_number':3934,'multiline':False]
['text':' buffer line, as opposed to the column','line_number':3935,'multiline':False]
['text':' number we're at on the screen.  This','line_number':3936,'multiline':False]
['text':' makes a difference on lines which span','line_number':3937,'multiline':False]
['text':' more than one screen line or when','line_number':3938,'multiline':False]
['text':' w_leftcol is non-zero','line_number':3939,'multiline':False]
['text':' offset for w_virtcol when there are','line_number':3942,'multiline':False]
['text':' virtual text properties above the','line_number':3943,'multiline':False]
['text':' line','line_number':3944,'multiline':False]
['text':'
     * w_wrow and w_wcol specify the cursor position in the window.
     * This is related to positions in the window, not in the display or
     * buffer, thus w_wrow is relative to w_winrow.
     ','line_number':3946,'multiline':True]
['text':' cursor position in window','line_number':3951,'multiline':False]
['text':'
     * Info about the lines currently in the window is remembered to avoid
     * recomputing it every time.  The allocated size of w_lines[] is Rows.
     * Only the w_lines_valid entries are actually valid.
     * When the display is up-to-date w_lines[0].wl_lnum is equal to w_topline
     * and w_lines[w_lines_valid - 1].wl_lnum is equal to w_botline.
     * Between changing text and updating the display w_lines[] represents
     * what is currently displayed.  wl_valid is reset to indicated this.
     * This is used for efficient redrawing.
     ','line_number':3953,'multiline':True]
['text':' number of valid entries','line_number':3963,'multiline':False]
['text':' array of nested folds','line_number':3967,'multiline':False]
['text':' when TRUE: some folds are opened/closed','line_number':3968,'multiline':False]
['text':' manually','line_number':3969,'multiline':False]
['text':' when TRUE: folding needs to be','line_number':3970,'multiline':False]
['text':' recomputed','line_number':3971,'multiline':False]
['text':' width of 'number' and 'relativenumber'','line_number':3974,'multiline':False]
['text':' column being used','line_number':3975,'multiline':False]
['text':' cache for term color of 'wincolor'','line_number':3978,'multiline':False]
['text':'
     * === end of cached values ===
     ','line_number':3981,'multiline':True]
['text':' type of redraw to be performed on win','line_number':3985,'multiline':False]
['text':' number of window lines to update when','line_number':3986,'multiline':False]
['text':' w_redr_type is UPD_REDRAW_TOP','line_number':3987,'multiline':False]
['text':' when != 0: first line needing redraw','line_number':3988,'multiline':False]
['text':' when != 0: last line needing redraw','line_number':3989,'multiline':False]
['text':' if TRUE status line must be redrawn','line_number':3990,'multiline':False]
['text':' remember what is shown in the ruler for this window (if 'ruler' set)','line_number':3992,'multiline':False]
['text':' cursor position shown in ruler','line_number':3993,'multiline':False]
['text':' virtcol shown in ruler','line_number':3994,'multiline':False]
['text':' topline shown in ruler','line_number':3995,'multiline':False]
['text':' line count used for ruler','line_number':3996,'multiline':False]
['text':' topfill shown in ruler','line_number':3998,'multiline':False]
['text':' TRUE if ruler shows 0-1 (empty line)','line_number':4000,'multiline':False]
['text':' alternate file (for # and CTRL-^)','line_number':4002,'multiline':False]
['text':' pointer to arglist for this window','line_number':4004,'multiline':False]
['text':' current index in argument list (can be','line_number':4005,'multiline':False]
['text':' out of range!)','line_number':4006,'multiline':False]
['text':' editing another file than w_arg_idx','line_number':4007,'multiline':False]
['text':' absolute path of local directory or','line_number':4009,'multiline':False]
['text':' NULL','line_number':4010,'multiline':False]
['text':' previous directory','line_number':4011,'multiline':False]
['text':' The root of the WinBar menu hierarchy.','line_number':4013,'multiline':False]
['text':' list of items in the WinBar','line_number':4014,'multiline':False]
['text':' 1 if there is a window toolbar','line_number':4015,'multiline':False]
['text':'
     * Options local to a window.
     * They are local because they influence the layout of the window or
     * depend on the window layout.
     * There are two values: w_onebuf_opt is local to the buffer currently in
     * this window, w_allbuf_opt is for all buffers in this window.
     ','line_number':4018,'multiline':True]
['text':' transform a pointer to a "onebuf" option into a "allbuf" option','line_number':4027,'multiline':False]
['text':' A few options have local flags for P_INSECURE.','line_number':4030,'multiline':False]
['text':' flags for 'statusline'','line_number':4032,'multiline':False]
['text':' flags for 'foldexpr'','line_number':4035,'multiline':False]
['text':' flags for 'foldtext'','line_number':4036,'multiline':False]
['text':' array of columns to highlight or NULL','line_number':4039,'multiline':False]
['text':' flags for cursorline highlighting','line_number':4040,'multiline':False]
['text':' minimum width for breakindent','line_number':4044,'multiline':False]
['text':' additional shift for breakindent','line_number':4045,'multiline':False]
['text':' sbr in 'briopt'','line_number':4046,'multiline':False]
['text':' additional indent for lists','line_number':4047,'multiline':False]
['text':' indent for specific column','line_number':4048,'multiline':False]
['text':' variable for "w:" Dictionary','line_number':4054,'multiline':False]
['text':' internal variables, local to window','line_number':4055,'multiline':False]
['text':'
     * The w_prev_pcmark field is used to check whether we really did jump to
     * a new line after setting the w_pcmark.  If not, then we revert to
     * using the previous w_pcmark.
     ','line_number':4058,'multiline':True]
['text':' previous context mark','line_number':4063,'multiline':False]
['text':' previous w_pcmark','line_number':4064,'multiline':False]
['text':'
     * the jumplist contains old cursor positions
     ','line_number':4066,'multiline':True]
['text':' number of active entries','line_number':4070,'multiline':False]
['text':' current position','line_number':4071,'multiline':False]
['text':' current position in b_changelist','line_number':4073,'multiline':False]
['text':' head of match list','line_number':4076,'multiline':False]
['text':' next match ID','line_number':4077,'multiline':False]
['text':'
     * the tagstack grows from 0 upwards:
     * entry 0: older
     * entry 1: newer
     * entry 2: newest
     ','line_number':4080,'multiline':True]
['text':' the tag stack','line_number':4086,'multiline':False]
['text':' idx just below active entry','line_number':4087,'multiline':False]
['text':' number of tags on stack','line_number':4088,'multiline':False]
['text':'
     * w_fraction is the fractional row of the cursor within the window, from
     * 0 at the top row to FRACTION_MULT at the last row.
     * w_prev_fraction_row was the actual cursor row when w_fraction was last
     * calculated.
     ','line_number':4090,'multiline':True]
['text':' vert. Scrollbars for this window','line_number':4100,'multiline':False]
['text':' line count when ml_nrwidth_width','line_number':4103,'multiline':False]
['text':' was computed.','line_number':4104,'multiline':False]
['text':' 'numberwidth' option cached','line_number':4105,'multiline':False]
['text':' nr of chars to print line count.','line_number':4106,'multiline':False]
['text':' Location list for this window','line_number':4110,'multiline':False]
['text':'
     * Location list reference used in the location list window.
     * In a non-location list window, w_llist_ref is NULL.
     ','line_number':4111,'multiline':True]
['text':' The MzScheme value for this window','line_number':4119,'multiline':False]
['text':' The Python value for this window','line_number':4127,'multiline':False]
['text':' The Python value for this window','line_number':4131,'multiline':False]
['text':'
 * Arguments for operators.
 ','line_number':4143,'multiline':True]
['text':' current pending operator type','line_number':4148,'multiline':False]
['text':' register to use for the operator','line_number':4149,'multiline':False]
['text':' type of the current cursor motion','line_number':4150,'multiline':False]
['text':' force motion type: 'v', 'V' or CTRL-V','line_number':4151,'multiline':False]
['text':' TRUE if delete uses reg 1 even when not','line_number':4152,'multiline':False]
['text':' linewise','line_number':4153,'multiline':False]
['text':' TRUE if char motion is inclusive (only','line_number':4154,'multiline':False]
['text':' valid when motion_type is MCHAR)','line_number':4155,'multiline':False]
['text':' backuped b_op_end one char (only used by','line_number':4156,'multiline':False]
['text':' do_format())','line_number':4157,'multiline':False]
['text':' start of the operator','line_number':4158,'multiline':False]
['text':' end of the operator','line_number':4159,'multiline':False]
['text':' cursor position before motion for "gw"','line_number':4160,'multiline':False]
['text':' number of lines from op_start to op_end','line_number':4162,'multiline':False]
['text':' (inclusive)','line_number':4163,'multiline':False]
['text':' op_start and op_end the same (only used by','line_number':4164,'multiline':False]
['text':' do_change())','line_number':4165,'multiline':False]
['text':' operator on Visual area','line_number':4166,'multiline':False]
['text':' current operator is Visual block mode','line_number':4167,'multiline':False]
['text':' start col for block mode operator','line_number':4168,'multiline':False]
['text':' end col for block mode operator','line_number':4169,'multiline':False]
['text':' ca.opcount saved for K_CURSORHOLD','line_number':4170,'multiline':False]
['text':' ca.count0 saved for K_CURSORHOLD','line_number':4171,'multiline':False]
['text':' exclude trailing whitespace for yank of a','line_number':4172,'multiline':False]
['text':' block','line_number':4173,'multiline':False]
['text':'
 * Arguments for Normal mode commands.
 ','line_number':4176,'multiline':True]
['text':' Operator arguments','line_number':4181,'multiline':False]
['text':' prefix character (optional, always 'g')','line_number':4182,'multiline':False]
['text':' command character','line_number':4183,'multiline':False]
['text':' next command character (optional)','line_number':4184,'multiline':False]
['text':' first composing character (optional)','line_number':4185,'multiline':False]
['text':' second composing character (optional)','line_number':4186,'multiline':False]
['text':' yet another character (optional)','line_number':4187,'multiline':False]
['text':' count before an operator','line_number':4188,'multiline':False]
['text':' count before command, default 0','line_number':4189,'multiline':False]
['text':' count before command, default 1','line_number':4190,'multiline':False]
['text':' extra argument from nv_cmds[]','line_number':4191,'multiline':False]
['text':' return: CA_* values','line_number':4192,'multiline':False]
['text':' return: pointer to search pattern or NULL','line_number':4193,'multiline':False]
['text':' values for retval:','line_number':4196,'multiline':False]
['text':' skip restarting edit() once','line_number':4197,'multiline':False]
['text':' don't adjust operator end','line_number':4198,'multiline':False]
['text':'
 * struct to store values from 'guicursor' and 'mouseshape'
 ','line_number':4201,'multiline':True]
['text':' Indexes in shape_table[]','line_number':4204,'multiline':False]
['text':' Normal mode','line_number':4205,'multiline':False]
['text':' Visual mode','line_number':4206,'multiline':False]
['text':' Insert mode','line_number':4207,'multiline':False]
['text':' Replace mode','line_number':4208,'multiline':False]
['text':' Command line Normal mode','line_number':4209,'multiline':False]
['text':' Command line Insert mode','line_number':4210,'multiline':False]
['text':' Command line Replace mode','line_number':4211,'multiline':False]
['text':' Operator-pending mode','line_number':4212,'multiline':False]
['text':' Visual mode with 'selection' exclusive','line_number':4213,'multiline':False]
['text':' On command line','line_number':4214,'multiline':False]
['text':' A status line','line_number':4215,'multiline':False]
['text':' dragging a status line','line_number':4216,'multiline':False]
['text':' A vertical separator line','line_number':4217,'multiline':False]
['text':' dragging a vertical separator line','line_number':4218,'multiline':False]
['text':' Hit-return or More','line_number':4219,'multiline':False]
['text':' Hit-return or More in last line','line_number':4220,'multiline':False]
['text':' showing matching paren','line_number':4221,'multiline':False]
['text':' block cursor','line_number':4224,'multiline':False]
['text':' horizontal bar cursor','line_number':4225,'multiline':False]
['text':' vertical bar cursor','line_number':4226,'multiline':False]
['text':' offset for shapes identified by number','line_number':4228,'multiline':False]
['text':' hide mouse pointer','line_number':4229,'multiline':False]
['text':' used for mouse pointer shape','line_number':4231,'multiline':False]
['text':' used for text cursor shape','line_number':4232,'multiline':False]
['text':' one of the SHAPE_ defines','line_number':4236,'multiline':False]
['text':' one of the MSHAPE defines','line_number':4237,'multiline':False]
['text':' percentage of cell for bar','line_number':4238,'multiline':False]
['text':' blinking, wait time before blinking starts','line_number':4239,'multiline':False]
['text':' blinking, on time','line_number':4240,'multiline':False]
['text':' blinking, off time','line_number':4241,'multiline':False]
['text':' highlight group ID','line_number':4242,'multiline':False]
['text':' highlight group ID for :lmap mode','line_number':4243,'multiline':False]
['text':' mode name (fixed)','line_number':4244,'multiline':False]
['text':' SHAPE_MOUSE and/or SHAPE_CURSOR','line_number':4245,'multiline':False]
['text':' CURSOR_SHAPE','line_number':4247,'multiline':False]
['text':' Indices into vimmenu_T->strings[] and vimmenu_T->noremap[] for each mode','line_number':4251,'multiline':False]
['text':' Menu modes','line_number':4263,'multiline':False]
['text':' note MENU_INDEX_TIP is not a 'real' mode','line_number':4273,'multiline':False]
['text':' Start a menu name with this to not include it on the main menu bar','line_number':4275,'multiline':False]
['text':' Which modes is this menu visible for?','line_number':4280,'multiline':False]
['text':' for which modes the menu is enabled','line_number':4281,'multiline':False]
['text':' Name of menu, possibly translated','line_number':4282,'multiline':False]
['text':' Displayed Name ("name" without '&')','line_number':4283,'multiline':False]
['text':' "name" untranslated, NULL when "name"','line_number':4285,'multiline':False]
['text':' was not translated','line_number':4286,'multiline':False]
['text':' "dname" untranslated, NULL when "dname"','line_number':4287,'multiline':False]
['text':' was not translated','line_number':4288,'multiline':False]
['text':' accelerator text (after TAB)','line_number':4290,'multiline':False]
['text':' mnemonic key (after '&')','line_number':4291,'multiline':False]
['text':' Menu order priority','line_number':4292,'multiline':False]
['text':' Call-back function','line_number':4294,'multiline':False]
['text':' name of file for icon or NULL','line_number':4297,'multiline':False]
['text':' icon index (-1 if not set)','line_number':4298,'multiline':False]
['text':' icon names is BuiltIn{nr}','line_number':4299,'multiline':False]
['text':' Mapped string for each mode','line_number':4301,'multiline':False]
['text':' A REMAP_ flag for each mode','line_number':4302,'multiline':False]
['text':' A silent flag for each mode','line_number':4303,'multiline':False]
['text':' Children of sub-menu','line_number':4304,'multiline':False]
['text':' Parent of menu','line_number':4305,'multiline':False]
['text':' Next item in menu','line_number':4306,'multiline':False]
['text':' Manage this to enable item','line_number':4308,'multiline':False]
['text':' If this is submenu, add children here','line_number':4309,'multiline':False]
['text':' Manage this to enable item','line_number':4312,'multiline':False]
['text':' If this is submenu, add children here','line_number':4313,'multiline':False]
['text':' Used by "set wak=" code.','line_number':4317,'multiline':False]
['text':' turn button on/off','line_number':4320,'multiline':False]
['text':' pixmap data','line_number':4321,'multiline':False]
['text':' file with pixmap data','line_number':4322,'multiline':False]
['text':' tooltip for this menu item','line_number':4325,'multiline':False]
['text':' Id of menu item','line_number':4328,'multiline':False]
['text':' If this is submenu, add children here','line_number':4329,'multiline':False]
['text':' hWnd of tearoff if created','line_number':4330,'multiline':False]
['text':' Id of menu item','line_number':4333,'multiline':False]
['text':' If this is submenu, add children here','line_number':4334,'multiline':False]
['text':' For generating prototypes when FEAT_MENU isn't defined.','line_number':4345,'multiline':False]
['text':' FEAT_MENU','line_number':4348,'multiline':False]
['text':'
 * Struct to save values in before executing autocommands for a buffer that is
 * not the current buffer.
 ','line_number':4350,'multiline':True]
['text':' saved curbuf','line_number':4356,'multiline':False]
['text':' index in aucmd_win[] if >= 0','line_number':4357,'multiline':False]
['text':' ID of saved curwin','line_number':4358,'multiline':False]
['text':' ID of new curwin','line_number':4359,'multiline':False]
['text':' ID of saved prevwin','line_number':4360,'multiline':False]
['text':' new curbuf','line_number':4361,'multiline':False]
['text':' saved value of globaldir','line_number':4362,'multiline':False]
['text':' saved VIsual_active','line_number':4363,'multiline':False]
['text':' saved State','line_number':4364,'multiline':False]
['text':'
 * Generic option table item, only used for printer at the moment.
 ','line_number':4367,'multiline':True]
['text':' points into option string','line_number':4375,'multiline':False]
['text':'
 * Structure to hold printing color and font attributes.
 ','line_number':4380,'multiline':True]
['text':'
 * Structure passed back to the generic printer code.
 ','line_number':4393,'multiline':True]
['text':'
 * Used for popup menu items.
 ','line_number':4419,'multiline':True]
['text':' main menu text','line_number':4424,'multiline':False]
['text':' extra kind text (may be truncated)','line_number':4425,'multiline':False]
['text':' extra menu text (may be truncated)','line_number':4426,'multiline':False]
['text':' extra info','line_number':4427,'multiline':False]
['text':'
 * Structure used for get_tagfname().
 ','line_number':4430,'multiline':True]
['text':' value of 'tags' when starting','line_number':4435,'multiline':False]
['text':' current position in tn_tags','line_number':4436,'multiline':False]
['text':'
 * types for expressions.
 ','line_number':4448,'multiline':True]
['text':' ==','line_number':4454,'multiline':False]
['text':' !=','line_number':4455,'multiline':False]
['text':' >','line_number':4456,'multiline':False]
['text':' >=','line_number':4457,'multiline':False]
['text':' <','line_number':4458,'multiline':False]
['text':' <=','line_number':4459,'multiline':False]
['text':' =~','line_number':4460,'multiline':False]
['text':' !~','line_number':4461,'multiline':False]
['text':' is','line_number':4462,'multiline':False]
['text':' isnot','line_number':4463,'multiline':False]
['text':' used with ISN_OPNR','line_number':4464,'multiline':False]
['text':' +','line_number':4465,'multiline':False]
['text':' -','line_number':4466,'multiline':False]
['text':' *','line_number':4467,'multiline':False]
['text':' /','line_number':4468,'multiline':False]
['text':' %','line_number':4469,'multiline':False]
['text':' <<','line_number':4470,'multiline':False]
['text':' >>','line_number':4471,'multiline':False]
['text':' used with ISN_ADDLIST','line_number':4472,'multiline':False]
['text':' create new list','line_number':4473,'multiline':False]
['text':' append to first list','line_number':4474,'multiline':False]
['text':'
 * Structure used for reading in json_decode().
 ','line_number':4477,'multiline':True]
['text':' text to be decoded','line_number':4482,'multiline':False]
['text':' NUL in js_buf','line_number':4483,'multiline':False]
['text':' bytes used from js_buf','line_number':4484,'multiline':False]
['text':' function to fill the buffer or NULL;','line_number':4486,'multiline':False]
['text':' return TRUE when the buffer was filled','line_number':4487,'multiline':False]
['text':' can be used by js_fill','line_number':4488,'multiline':False]
['text':' can be used by js_fill','line_number':4489,'multiline':False]
['text':' Maximum number of commands from + or -c arguments.','line_number':4493,'multiline':False]
['text':' values for "window_layout"','line_number':4496,'multiline':False]
['text':' "-o" horizontally split windows','line_number':4497,'multiline':False]
['text':' "-O" vertically split windows','line_number':4498,'multiline':False]
['text':' "-p" windows on tab pages','line_number':4499,'multiline':False]
['text':' Struct for various parameters passed between main() and other functions.','line_number':4501,'multiline':False]
['text':' first file to edit','line_number':4507,'multiline':False]
['text':' started as "evim"','line_number':4509,'multiline':False]
['text':' vimrc from -u argument','line_number':4510,'multiline':False]
['text':' --clean argument','line_number':4511,'multiline':False]
['text':' no. of commands from + or -c','line_number':4513,'multiline':False]
['text':' commands from + or -c arg.','line_number':4514,'multiline':False]
['text':' commands that need free()','line_number':4515,'multiline':False]
['text':' no. of commands from --cmd','line_number':4516,'multiline':False]
['text':' commands from --cmd argument','line_number':4517,'multiline':False]
['text':' type of editing to do','line_number':4519,'multiline':False]
['text':' tag from -t argument','line_number':4520,'multiline':False]
['text':' 'errorfile' from -q argument','line_number':4522,'multiline':False]
['text':' no warning for missing term?','line_number':4526,'multiline':False]
['text':' file to write dialog text in','line_number':4528,'multiline':False]
['text':' exit if not a tty','line_number':4530,'multiline':False]
['text':' specified terminal name','line_number':4531,'multiline':False]
['text':' -x argument','line_number':4533,'multiline':False]
['text':' "-n" argument used','line_number':4535,'multiline':False]
['text':' number of windows to use','line_number':4539,'multiline':False]
['text':' 0, WIN_HOR, WIN_VER or WIN_TABS','line_number':4540,'multiline':False]
['text':' TRUE when argument for a server','line_number':4543,'multiline':False]
['text':' cmdline arg for server name','line_number':4544,'multiline':False]
['text':' remote server command','line_number':4545,'multiline':False]
['text':' encoding of serverStr','line_number':4546,'multiline':False]
['text':' allocated name for our server','line_number':4547,'multiline':False]
['text':' don't expand file names','line_number':4551,'multiline':False]
['text':' file name argument was full path','line_number':4554,'multiline':False]
['text':' start with 'diff' set','line_number':4557,'multiline':False]
['text':'
 * Structure returned by get_lval() and used by set_var_lval().
 * For a plain name:
 *	"name"	    points to the variable name.
 *	"exp_name"  is NULL.
 *	"tv"	    is NULL
 * For a magic braces name:
 *	"name"	    points to the expanded variable name.
 *	"exp_name"  is non-NULL, to be freed later.
 *	"tv"	    is NULL
 * For an index in a list:
 *	"name"	    points to the (expanded) variable name.
 *	"exp_name"  NULL or non-NULL, to be freed later.
 *	"tv"	    points to the (first) list item value
 *	"li"	    points to the (first) list item
 *	"range", "n1", "n2" and "empty2" indicate what items are used.
 * For a plain class or object:
 *	"name"	    points to the variable name.
 *	"exp_name"  is NULL.
 *	"tv"	    points to the variable
 *	"is_root"   TRUE
 * For a variable in a class/object: (class is not NULL)
 *	"name"	    points to the (expanded) variable name.
 *	"exp_name"  NULL or non-NULL, to be freed later.
 *	"tv"	    May point to class/object variable.
 *	"object"    object containing variable, NULL if class variable
 *	"class"	    class of object or class containing variable
 *	"oi"	    index into class/object of tv
 * For an existing Dict item:
 *	"name"	    points to the (expanded) variable name.
 *	"exp_name"  NULL or non-NULL, to be freed later.
 *	"tv"	    points to the dict item value
 *	"newkey"    is NULL
 * For a non-existing Dict item:
 *	"name"	    points to the (expanded) variable name.
 *	"exp_name"  NULL or non-NULL, to be freed later.
 *	"tv"	    points to the Dictionary typval_T
 *	"newkey"    is the key for the new item.
 ','line_number':4561,'multiline':True]
['text':' start of variable name (can be NULL)','line_number':4602,'multiline':False]
['text':' end of variable name (can be NULL)','line_number':4603,'multiline':False]
['text':' type of variable (can be NULL)','line_number':4604,'multiline':False]
['text':' NULL or expanded name in allocated memory.','line_number':4605,'multiline':False]
['text':' for an imported item: the script ID it was','line_number':4607,'multiline':False]
['text':' imported from; zero otherwise','line_number':4608,'multiline':False]
['text':' Typeval of item being used.  If "newkey"','line_number':4610,'multiline':False]
['text':' isn't NULL it's the Dict to which to add','line_number':4611,'multiline':False]
['text':' the item.','line_number':4612,'multiline':False]
['text':' The list item or NULL.','line_number':4613,'multiline':False]
['text':' The list or NULL.','line_number':4614,'multiline':False]
['text':' TRUE when a [i:j] range was used','line_number':4615,'multiline':False]
['text':' Second index is empty: [i:]','line_number':4616,'multiline':False]
['text':' First index for list','line_number':4617,'multiline':False]
['text':' Second index for list range','line_number':4618,'multiline':False]
['text':' The Dictionary or NULL','line_number':4619,'multiline':False]
['text':' The dictitem or NULL','line_number':4620,'multiline':False]
['text':' New key for Dict in alloc. mem or NULL.','line_number':4621,'multiline':False]
['text':' type expected for the value or NULL','line_number':4622,'multiline':False]
['text':' The Blob or NULL','line_number':4623,'multiline':False]
['text':' The function or NULL','line_number':4624,'multiline':False]
['text':' The object or NULL, class is not NULL','line_number':4625,'multiline':False]
['text':' The class or NULL, object may be NULL','line_number':4626,'multiline':False]
['text':' The object/class member index','line_number':4627,'multiline':False]
['text':' TRUE if ll_tv is the lval_root, like a','line_number':4628,'multiline':False]
['text':' plain object/class. ll_tv is variable.','line_number':4629,'multiline':False]
['text':'*
 * This specifies optional parameters for get_lval(). Arguments may be NULL.
 ','line_number':4632,'multiline':True]
['text':' Base typval.','line_number':4636,'multiline':False]
['text':' Executing class for access checking.','line_number':4637,'multiline':False]
['text':' name is an arg (not a member).','line_number':4638,'multiline':False]
['text':' Structure used to save the current state.  Used when executing Normal mode','line_number':4641,'multiline':False]
['text':' commands while in any other mode.','line_number':4642,'multiline':False]
['text':' Scope for changing directory','line_number':4663,'multiline':False]
['text':' :cd','line_number':4665,'multiline':False]
['text':' :tcd','line_number':4666,'multiline':False]
['text':' :lcd','line_number':4667,'multiline':False]
['text':' Variable flavor','line_number':4670,'multiline':False]
['text':' doesn't start with uppercase','line_number':4673,'multiline':False]
['text':' starts with uppercase, some lower','line_number':4674,'multiline':False]
['text':' all uppercase','line_number':4675,'multiline':False]
['text':' argument for mouse_find_win()','line_number':4678,'multiline':False]
['text':' only check non-popup windows','line_number':4680,'multiline':False]
['text':' also find popup windows','line_number':4681,'multiline':False]
['text':' return NULL if mouse on popup window','line_number':4682,'multiline':False]
['text':' Symbolic names for some registers.','line_number':4685,'multiline':False]
['text':' there is only one','line_number':4692,'multiline':False]
['text':' structure used by block_prep, op_delete and op_yank for blockwise operators','line_number':4709,'multiline':False]
['text':' also op_change, op_shift, op_insert, op_replace - AKelly','line_number':4710,'multiline':False]
['text':' 'extra' cols before first char','line_number':4713,'multiline':False]
['text':' 'extra' cols after last char','line_number':4714,'multiline':False]
['text':' chars in block','line_number':4715,'multiline':False]
['text':' pointer to 1st char (partially) in block','line_number':4716,'multiline':False]
['text':' index of chars (partially) in block','line_number':4717,'multiline':False]
['text':' start col of 1st char wholly inside block','line_number':4718,'multiline':False]
['text':' start col of 1st char wholly after block','line_number':4719,'multiline':False]
['text':' TRUE if line is too short to fit in block','line_number':4720,'multiline':False]
['text':' TRUE if curswant==MAXCOL when starting','line_number':4721,'multiline':False]
['text':' TRUE if block within one character','line_number':4722,'multiline':False]
['text':' screen cols of ws before block','line_number':4723,'multiline':False]
['text':' chars of ws before block','line_number':4724,'multiline':False]
['text':' number of vcols of post-block char','line_number':4725,'multiline':False]
['text':' number of vcols of pre-block char','line_number':4726,'multiline':False]
['text':' Each yank register has an array of pointers to lines.','line_number':4729,'multiline':False]
['text':' pointer to array of line pointers','line_number':4732,'multiline':False]
['text':' number of lines in y_array','line_number':4733,'multiline':False]
['text':' MLINE, MCHAR or MBLOCK','line_number':4734,'multiline':False]
['text':' only set if y_type == MBLOCK','line_number':4735,'multiline':False]
['text':' The offset for a search command is store in a soff struct','line_number':4741,'multiline':False]
['text':' Note: only spats[0].off is really used','line_number':4742,'multiline':False]
['text':' search direction, '/' or '?'','line_number':4745,'multiline':False]
['text':' search has line offset','line_number':4746,'multiline':False]
['text':' search set cursor at end','line_number':4747,'multiline':False]
['text':' line or char offset','line_number':4748,'multiline':False]
['text':' A search pattern and its attributes are stored in a spat struct','line_number':4751,'multiline':False]
['text':' the pattern (in allocated memory) or NULL','line_number':4754,'multiline':False]
['text':' magicness of the pattern','line_number':4755,'multiline':False]
['text':' no smartcase for this pattern','line_number':4756,'multiline':False]
['text':'
 * Optional extra arguments for searchit().
 ','line_number':4760,'multiline':True]
['text':' stop after this line number when != 0','line_number':4765,'multiline':False]
['text':' timeout limit or zero','line_number':4767,'multiline':False]
['text':' set when timed out','line_number':4768,'multiline':False]
['text':' search wrapped around','line_number':4770,'multiline':False]
['text':'
 * Cookie used by getsourceline().
 ','line_number':4773,'multiline':True]
['text':'
 * Cookie used to store info for each sourced file.
 * It is shared between do_source() and getsourceline().
 * This is passed to do_cmdline().
 ','line_number':4776,'multiline':True]
['text':' opened file for sourcing','line_number':4782,'multiline':False]
['text':' if not NULL: line that was read ahead','line_number':4783,'multiline':False]
['text':' line number of the source file','line_number':4784,'multiline':False]
['text':' ":finish" used','line_number':4785,'multiline':False]
['text':' TRUE if sourcing from current buffer','line_number':4786,'multiline':False]
['text':' line number in the current buffer','line_number':4787,'multiline':False]
['text':' lines in the current buffer','line_number':4788,'multiline':False]
['text':' EOL_UNKNOWN, EOL_UNIX or EOL_DOS','line_number':4790,'multiline':False]
['text':' TRUE if LF found after CR-LF','line_number':4791,'multiline':False]
['text':' next line with breakpoint or zero','line_number':4794,'multiline':False]
['text':' name of sourced file','line_number':4795,'multiline':False]
['text':' debug_tick when breakpoint was set','line_number':4796,'multiline':False]
['text':' top nesting level of sourced file','line_number':4797,'multiline':False]
['text':' type of conversion','line_number':4799,'multiline':False]
['text':' size of normal write buffer','line_number':4803,'multiline':False]
['text':' convert Latin1','line_number':4805,'multiline':False]
['text':' convert UTF-8','line_number':4806,'multiline':False]
['text':' convert UCS-2','line_number':4807,'multiline':False]
['text':' convert UCS-4','line_number':4808,'multiline':False]
['text':' convert UTF-16','line_number':4809,'multiline':False]
['text':' convert MS-Windows codepage','line_number':4811,'multiline':False]
['text':' put codepage in top word','line_number':4812,'multiline':False]
['text':' get codepage from top word','line_number':4813,'multiline':False]
['text':' convert MacRoman','line_number':4816,'multiline':False]
['text':' little endian','line_number':4818,'multiline':False]
['text':' encrypt written bytes','line_number':4819,'multiline':False]
['text':' skip encoding conversion','line_number':4820,'multiline':False]
['text':' check for BOM at start of file','line_number':4821,'multiline':False]
['text':' allow all formats','line_number':4822,'multiline':False]
['text':' When converting, a read() or write() may leave some bytes to be converted','line_number':4824,'multiline':False]
['text':' for the next call.  The value is guessed...','line_number':4825,'multiline':False]
['text':' We have to guess how much a sequence of bytes may expand when converting','line_number':4828,'multiline':False]
['text':' with iconv() to be able to allocate a buffer.','line_number':4829,'multiline':False]
['text':' Used for "magic_overruled".','line_number':4832,'multiline':False]
['text':' p_magic not overruled','line_number':4834,'multiline':False]
['text':' magic on inside regexp','line_number':4835,'multiline':False]
['text':' magic off inside regexp','line_number':4836,'multiline':False]
['text':' Magicness of a pattern, used by regexp code.','line_number':4839,'multiline':False]
['text':' The order and values matter:','line_number':4840,'multiline':False]
['text':'  magic <= MAGIC_OFF includes MAGIC_NONE','line_number':4841,'multiline':False]
['text':'  magic >= MAGIC_ON  includes MAGIC_ALL','line_number':4842,'multiline':False]
['text':' "\V" very unmagic','line_number':4844,'multiline':False]
['text':' "\M" or 'magic' off','line_number':4845,'multiline':False]
['text':' "\m" or 'magic'','line_number':4846,'multiline':False]
['text':' "\v" very magic','line_number':4847,'multiline':False]
['text':' Unknown or unspecified location','line_number':4851,'multiline':False]
['text':' object method','line_number':4855,'multiline':False]
['text':' object method argument type','line_number':4856,'multiline':False]
['text':' object method return type','line_number':4857,'multiline':False]
['text':' Struct used to pass the location of a type check.  Used in error messages to','line_number':4860,'multiline':False]
['text':' indicate where the error happened.  Also used for doing covariance type','line_number':4861,'multiline':False]
['text':' check for object method return type and contra-variance type check for','line_number':4862,'multiline':False]
['text':' object method arguments.','line_number':4863,'multiline':False]
['text':' function name or NULL','line_number':4865,'multiline':False]
['text':' argument or variable index, 0 means unknown','line_number':4866,'multiline':False]
['text':' type check location','line_number':4867,'multiline':False]
['text':' Struct passed to get_v_event() and restore_v_event().','line_number':4872,'multiline':False]
['text':' Enum used by filter(), map() and mapnew()','line_number':4878,'multiline':False]
['text':' Structure used by switch_win() to pass values to restore_win()','line_number':4885,'multiline':False]
['text':' VIsual_active was not reset','line_number':4889,'multiline':False]
['text':' Fuzzy matched string list item. Used for fuzzy match completion. Items are','line_number':4893,'multiline':False]
['text':' usually sorted by 'score'. The 'idx' member is used for stable-sort.','line_number':4894,'multiline':False]
['text':' Argument for lbr_chartabsize().','line_number':4901,'multiline':False]
['text':' start of the line','line_number':4904,'multiline':False]
['text':' current position in line','line_number':4905,'multiline':False]
['text':' number of text props; when zero','line_number':4907,'multiline':False]
['text':' cts_text_props is not used','line_number':4908,'multiline':False]
['text':' text props (allocated)','line_number':4909,'multiline':False]
['text':' TRUE if a property inserts text','line_number':4910,'multiline':False]
['text':' width of current inserted text','line_number':4911,'multiline':False]
['text':' nr of properties above or below','line_number':4912,'multiline':False]
['text':' width text props above the line','line_number':4913,'multiline':False]
['text':' include size of trailing props with','line_number':4914,'multiline':False]
['text':' last character','line_number':4915,'multiline':False]
['text':' prop has true "start_incl" arg','line_number':4916,'multiline':False]
['text':' virtual column at current position','line_number':4918,'multiline':False]
['text':' see win_lbr_chartabsize()','line_number':4919,'multiline':False]
['text':'
 * Argument for the callback function (opt_did_set_cb_T) invoked after an
 * option value is modified.
 ','line_number':4922,'multiline':True]
['text':' Pointer to the option variable.  The variable can be a long (numeric','line_number':4928,'multiline':False]
['text':' option), an int (boolean option) or a char pointer (string option).','line_number':4929,'multiline':False]
['text':' old value of the option (can be a string, number or a boolean)','line_number':4935,'multiline':False]
['text':' new value of the option (can be a string, number or a boolean)','line_number':4943,'multiline':False]
['text':' Option value was checked to be safe, no need to set P_INSECURE','line_number':4951,'multiline':False]
['text':' Used for the 'keymap', 'filetype' and 'syntax' options.','line_number':4952,'multiline':False]
['text':' Option value changed.  Used for the 'filetype' and 'syntax' options.','line_number':4954,'multiline':False]
['text':' Used by the 'isident', 'iskeyword', 'isprint' and 'isfname' options.','line_number':4957,'multiline':False]
['text':' Set to TRUE if the character table is modified when processing the','line_number':4958,'multiline':False]
['text':' option and need to be restored because of a failure.','line_number':4959,'multiline':False]
['text':' Used by the 't_xxx' terminal options on MS-Windows.','line_number':4963,'multiline':False]
['text':' If the value specified for an option is not valid and the error message','line_number':4967,'multiline':False]
['text':' is parameterized, then the "os_errbuf" buffer is used to store the error','line_number':4968,'multiline':False]
['text':' message (when it is not NULL).','line_number':4969,'multiline':False]
['text':' length of the error buffer','line_number':4971,'multiline':False]
['text':'
 * Argument for the callback function (opt_expand_cb_T) invoked after a string
 * option value is expanded for cmdline completion.
 ','line_number':4975,'multiline':True]
['text':' Pointer to the option variable. It's always a string.','line_number':4981,'multiline':False]
['text':' The original option value, escaped.','line_number':4983,'multiline':False]
['text':' TRUE if using set+= instead of set=','line_number':4986,'multiline':False]
['text':' TRUE if we would like to add the original option value as the first','line_number':4988,'multiline':False]
['text':' choice.','line_number':4989,'multiline':False]
['text':' Regex from the cmdline, for matching potential options against.','line_number':4992,'multiline':False]
['text':' The expansion context.','line_number':4994,'multiline':False]
['text':' The full argument passed to :set. For example, if the user inputs','line_number':4997,'multiline':False]
['text':' ':set dip=icase,algorithm:my<Tab>', oe_xp->xp_pattern will only have','line_number':4998,'multiline':False]
['text':' 'my', but oe_set_arg will contain the whole 'icase,algorithm:my'.','line_number':4999,'multiline':False]
['text':'
 * Spell checking variables passed from win_update() to win_line().
 ','line_number':5003,'multiline':True]
['text':' drawn window has spell checking','line_number':5007,'multiline':False]
['text':' not updating for changed text','line_number':5009,'multiline':False]
['text':' column in "checked_lnum" up to','line_number':5010,'multiline':False]
['text':' which there are no spell errors','line_number':5011,'multiline':False]
['text':' line number for "checked_col"','line_number':5012,'multiline':False]
['text':' column to check for Cap word','line_number':5013,'multiline':False]
['text':' line number for "cap_col"','line_number':5014,'multiline':False]
