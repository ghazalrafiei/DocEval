['text':' vi:set ts=8 sts=4 sw=4 noet:
 *
 * VIM - Vi IMproved    by Bram Moolenaar
 *
 * Do ":help uganda"  in Vim to read copying and usage conditions.
 * Do ":help credits" in Vim to see a list of people who contributed.
 * See README.txt for an overview of the Vim source code.
 ','line_number':1,'multiline':True]
['text':'
 * arabic.c: functions for Arabic language
 *
 * Author: Nadim Shaikli & Isam Bayazidi
 * Farsi support and restructuring to make adding new letters easier by Ali
 * Gholami Rudi.  Further work by Ameretat Reith.
 ','line_number':10,'multiline':True]
['text':'
 * Sorted list of unicode Arabic characters.  Each entry holds the
 * presentation forms of a letter.
 *
 * Arabic characters are categorized into following types:
 *
 * Isolated	- iso-8859-6 form
 * Initial	- unicode form-B start
 * Medial	- unicode form-B middle
 * Final	- unicode form-B final
 * Stand-Alone	- unicode form-B isolated
 ','line_number':18,'multiline':True]
['text':' Unicode values for Arabic characters.','line_number':35,'multiline':False]
['text':'
 * Find the struct achar pointer to the given Arabic char.
 * Returns NULL if not found.
 ','line_number':166,'multiline':True]
['text':' using binary search to find c','line_number':175,'multiline':False]
['text':'
 * Change shape - from Combination (2 char) to an Isolated
 ','line_number':191,'multiline':True]
['text':'
 * Change shape - from Combination-Isolated to Final
 ','line_number':220,'multiline':True]
['text':'
 * Returns whether it is possible to join the given letters
 ','line_number':249,'multiline':True]
['text':'
 * Check whether we are dealing with a character that could be regarded as an
 * Arabic combining character, need to check the character before this.
 ','line_number':261,'multiline':True]
['text':'
 * Check whether we are dealing with Arabic combining characters.
 * Note: these are NOT really composing characters!
 ','line_number':276,'multiline':True]
['text':' first character','line_number':282,'multiline':False]
['text':' character just after "one"','line_number':283,'multiline':False]
['text':'
 * A_is_iso returns true if 'c' is an Arabic ISO-8859-6 character
 *		(alphabet/number/punctuation)
 ','line_number':290,'multiline':True]
['text':'
 * A_is_ok returns true if 'c' is an Arabic 10646 (8859-6 or Form-B)
 ','line_number':300,'multiline':True]
['text':'
 * A_is_valid returns true if 'c' is an Arabic 10646 (8859-6 or Form-B)
 *		with some exceptions/exclusions
 ','line_number':309,'multiline':True]
['text':'
 * Do Arabic shaping on character "c".  Returns the shaped character.
 * out:    "ccp" points to the first byte of the character to be shaped.
 * in/out: "c1p" points to the first composing char for "c".
 * in:     "prev_c"  is the previous character (not shaped)
 * in:     "prev_c1" is the first composing char for the previous char
 *		     (not shaped)
 * in:     "next_c"  is the next character (not shaped).
 ','line_number':319,'multiline':True]
['text':' Deal only with Arabic characters, pass back all others','line_number':341,'multiline':False]
['text':' Remove the composing character','line_number':355,'multiline':False]
['text':' Character missing from the table means using original character.','line_number':380,'multiline':False]
['text':' Update the first byte of the character.','line_number':388,'multiline':False]
['text':' Return the shaped character','line_number':393,'multiline':False]
['text':' FEAT_ARABIC','line_number':396,'multiline':False]
