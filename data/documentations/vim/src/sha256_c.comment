['text':' vi:set ts=8 sts=4 sw=4 noet:
 *
 * VIM - Vi IMproved	by Bram Moolenaar
 *
 * Do ":help uganda"  in Vim to read copying and usage conditions.
 * Do ":help credits" in Vim to see a list of people who contributed.
 * See README.txt for an overview of the Vim source code.
 *
 * FIPS-180-2 compliant SHA-256 implementation
 * GPL by Christophe Devine, applies to older version.
 * Modified for md5deep, in public domain.
 * Modified For Vim, Mohsin Ahmed, http://www.cs.albany.edu/~mosh
 * Mohsin Ahmed states this work is distributed under the VIM License or GPL,
 * at your choice.
 *
 * Vim specific notes:
 * Functions exported by this file:
 *  1. sha256_key() hashes the password to 64 bytes char string.
 *  2. sha2_seed() generates a random header.
 *  sha256_self_test() is implicitly called once.
 ','line_number':1,'multiline':True]
['text':' FEAT_CRYPT || FEAT_PERSISTENT_UNDO','line_number':263,'multiline':False]
['text':'
 * Returns hex digest of "buf[buf_len]" in a static array.
 * if "salt" is not NULL also do "salt[salt_len]".
 ','line_number':266,'multiline':True]
['text':'
 * Returns sha256(buf) as 64 hex chars in static array.
 ','line_number':295,'multiline':True]
['text':' No passwd means don't encrypt','line_number':304,'multiline':False]
['text':'
 * These are the standard FIPS-180-2 test vectors
 ','line_number':311,'multiline':True]
['text':'
 * Perform a test on the SHA256 algorithm.
 * Return FAIL or OK.
 ','line_number':330,'multiline':True]
['text':' printf("sha256_self_test %d failed %s\n", i, output);','line_number':373,'multiline':False]
['text':' Using usec makes it less predictable.','line_number':385,'multiline':False]
['text':'
 * Fill "header[header_len]" with random_data.
 * Also "salt[salt_len]" when "salt" is not NULL.
 ','line_number':393,'multiline':True]
['text':' put first block into header.','line_number':417,'multiline':False]
['text':' put remaining block into salt.','line_number':421,'multiline':False]
['text':' FEAT_CRYPT','line_number':427,'multiline':False]
