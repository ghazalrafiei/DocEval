['text':' vi:set ts=8 sts=4 sw=4 noet:
 *
 * VIM - Vi IMproved	by Bram Moolenaar
 *
 * Do ":help uganda"  in Vim to read copying and usage conditions.
 * Do ":help credits" in Vim to see a list of people who contributed.
 * See README.txt for an overview of the Vim source code.
 ','line_number':1,'multiline':True]
['text':'
 * list.c: List support and container (List, Dict, Blob) functions.
 ','line_number':10,'multiline':True]
['text':' List heads for garbage collection.','line_number':18,'multiline':False]
['text':' list of all lists','line_number':19,'multiline':False]
['text':'
 * Add a watcher to a list.
 ','line_number':26,'multiline':True]
['text':'
 * Remove a watcher from a list.
 * No warning when it isn't found...
 ','line_number':36,'multiline':True]
['text':'
 * Just before removing an item from a list: advance watchers to the next
 * item.
 ','line_number':57,'multiline':True]
['text':' Prepend the list to the list of lists for garbage collection.','line_number':74,'multiline':False]
['text':'
 * Allocate an empty header for a list.
 * Caller should take care of the reference count.
 ','line_number':82,'multiline':True]
['text':'
 * list_alloc() with an ID for alloc_fail().
 ','line_number':97,'multiline':True]
['text':'
 * Allocate space for a list, plus "count" items.
 * This uses one allocation for efficiency.
 * The reference count is not set.
 * Next list_set_item() must be called for each item.
 ','line_number':110,'multiline':True]
['text':'
 * Set item "idx" for a list previously allocated with list_alloc_with_items().
 * The contents of "tv" is moved into the list item.
 * Each item must be set exactly once.
 ','line_number':153,'multiline':True]
['text':'
 * Allocate an empty list for a return value, with reference count set.
 * Returns OK or FAIL.
 ','line_number':166,'multiline':True]
['text':'
 * Same as rettv_list_alloc() but uses an allocation id for testing.
 ','line_number':183,'multiline':True]
['text':'
 * Set a list as the return value.  Increments the reference count.
 ','line_number':197,'multiline':True]
['text':'
 * Unreference a list: decrement the reference count and free it when it
 * becomes zero.
 ','line_number':209,'multiline':True]
['text':'
 * Free a list, including all non-container items it points to.
 * Ignores the reference count.
 ','line_number':220,'multiline':True]
['text':' Remove the item before deleting it.','line_number':232,'multiline':False]
['text':'
 * Go through the list of lists and free items without the copyID.
 * But don't free a list that has a watcher (used in a for loop), these
 * are not referenced anywhere.
 ','line_number':239,'multiline':True]
['text':' Free the List and ordinary items it contains, but don't recurse','line_number':254,'multiline':False]
['text':' into Lists and Dictionaries, they will be in the list of dicts','line_number':255,'multiline':False]
['text':' or list of lists.','line_number':256,'multiline':False]
['text':' Remove the list from the list of lists for garbage collection.','line_number':266,'multiline':False]
['text':' Free the List and ordinary items it contains, but don't recurse','line_number':289,'multiline':False]
['text':' into Lists and Dictionaries, they will be in the list of dicts','line_number':290,'multiline':False]
['text':' or list of lists.','line_number':291,'multiline':False]
['text':'
 * Allocate a list item.
 * It is not initialized, don't forget to set v_lock.
 ','line_number':307,'multiline':True]
['text':'
 * Free a list item, unless it was allocated together with the list itself.
 * Does not clear the value.  Does not notify watchers.
 ','line_number':317,'multiline':True]
['text':'
 * Free a list item, unless it was allocated together with the list itself.
 * Also clears the value.  Does not notify watchers.
 ','line_number':329,'multiline':True]
['text':'
 * Remove a list item from a List and free it.  Also clears the value.
 ','line_number':340,'multiline':True]
['text':'
 * Get the number of items in a list.
 ','line_number':350,'multiline':True]
['text':'
 * Return TRUE when two lists have exactly the same values.
 ','line_number':361,'multiline':True]
['text':' ignore case for strings','line_number':368,'multiline':False]
['text':' TRUE when used recursively','line_number':369,'multiline':False]
['text':' empty and NULL list are considered equal','line_number':378,'multiline':False]
['text':'
 * Locate item with index "n" in list "l" and return it.
 * A negative index is counted from the end; -1 is the last item.
 * Returns NULL when "n" is out of range.
 ','line_number':394,'multiline':True]
['text':' Negative index is relative to the end.','line_number':408,'multiline':False]
['text':' Check for index out of range.','line_number':412,'multiline':False]
['text':' range_list_materialize may reset l->lv_len','line_number':418,'multiline':False]
['text':' When there is a cached index may start search from there.','line_number':422,'multiline':False]
['text':' closest to the start of the list','line_number':427,'multiline':False]
['text':' closest to the end of the list','line_number':433,'multiline':False]
['text':' closest to the cached index','line_number':439,'multiline':False]
['text':' closest to the start of the list','line_number':448,'multiline':False]
['text':' closest to the end of the list','line_number':454,'multiline':False]
['text':' search forward','line_number':462,'multiline':False]
['text':' search backward','line_number':468,'multiline':False]
['text':' cache the used index','line_number':473,'multiline':False]
['text':'
 * Get list item "l[idx]" as a number.
 ','line_number':480,'multiline':True]
['text':' set to TRUE when something wrong','line_number':487,'multiline':False]
['text':' not materialized range() list: compute the value.','line_number':495,'multiline':False]
['text':' Negative index is relative to the end.','line_number':496,'multiline':False]
['text':' Check for index out of range.','line_number':500,'multiline':False]
['text':'
 * Get list item "l[idx - 1]" as a string.  Returns NULL for failure.
 ','line_number':521,'multiline':True]
['text':'
 * Like list_find() but when a negative index is used that is not found use
 * zero and set "idx" to zero.  Used for first index of a range.
 ','line_number':538,'multiline':True]
['text':'
 * Locate "item" list "l" and return its index.
 * Returns -1 when "item" is not in the list.
 ','line_number':558,'multiline':True]
['text':'
 * Append item "item" to the end of list "l".
 ','line_number':579,'multiline':True]
['text':' empty list','line_number':588,'multiline':False]
['text':'
 * Append typval_T "tv" to the end of list "l".  "tv" is copied.
 * Return FAIL when out of memory or the type is wrong.
 ','line_number':602,'multiline':True]
['text':'
 * As list_append_tv() but move the value instead of copying it.
 * Return FAIL when out of memory.
 ','line_number':623,'multiline':True]
['text':'
 * Add a dictionary to a list.  Used by getqflist().
 * Return FAIL when out of memory.
 ','line_number':639,'multiline':True]
['text':'
 * Append list2 to list1.
 * Return FAIL when out of memory.
 ','line_number':658,'multiline':True]
['text':'
 * Make a copy of "str" and append it as an item to list "l".
 * When "len" >= 0 use "str[len]".
 * Returns FAIL when out of memory.
 ','line_number':677,'multiline':True]
['text':'
 * Append "n" to list "l".
 * Returns FAIL when out of memory.
 ','line_number':700,'multiline':True]
['text':'
 * Insert typval_T "tv" in list "l" before "item".
 * If "item" is NULL append at the end.
 * Return FAIL when out of memory or the type is wrong.
 ','line_number':719,'multiline':True]
['text':' Append new item at end of list.','line_number':746,'multiline':False]
['text':' Insert new item before existing item.','line_number':750,'multiline':False]
['text':'
 * Get the list item in "l" with index "n1".  "n1" is adjusted if needed.
 * In Vim9, it is at the end of the list, add an item if "can_append" is TRUE.
 * Return NULL if there is no such item.
 ','line_number':768,'multiline':True]
['text':' Vim9: Allow for adding an item at the end.','line_number':782,'multiline':False]
['text':'
 * Check that "n2" can be used as the second index in a range of list "l".
 * If "n1" or "n2" is negative it is changed to the positive index.
 * "li1" is the item for item "n1".
 * Return OK or FAIL.
 ','line_number':798,'multiline':True]
['text':' Check that n2 isn't before n1.','line_number':825,'multiline':False]
['text':'
 * Assign values from list "src" into a range of "dest".
 * "idx1_arg" is the index of the first item in "dest" to be replaced.
 * "idx2" is the index of last item to be replaced, but when "empty_idx2" is
 * TRUE then replace all items after "idx1".
 * "op" is the operator, normally "=" but can be "+=" and the like.
 * "varname" is used for error messages.
 * Returns OK or FAIL.
 ','line_number':837,'multiline':True]
['text':' Check whether any of the list items is locked before making any changes.','line_number':863,'multiline':False]
['text':' Assign the List values to the list items.','line_number':881,'multiline':False]
['text':' Need to add an empty item.','line_number':902,'multiline':False]
['text':'
 * Flatten up to "maxitems" in "list", starting at "first" to depth "maxdepth".
 * When "first" is NULL use the first item.
 * It does nothing if "maxdepth" is 0.
 * Returns FAIL when out of memory.
 ','line_number':927,'multiline':True]
['text':'
 * "flatten()" and "flattennew()" functions
 ','line_number':979,'multiline':True]
['text':' The type will change.','line_number':1026,'multiline':False]
['text':'
 * "flatten(list[, {maxdepth}])" function
 ','line_number':1041,'multiline':True]
['text':'
 * "flattennew(list[, {maxdepth}])" function
 ','line_number':1053,'multiline':True]
['text':'
 * "items(list)" function
 * Caller must have already checked that argvars[0] is a List.
 ','line_number':1062,'multiline':True]
['text':' null list behaves like an empty list','line_number':1076,'multiline':False]
['text':' TODO: would be more efficient to not materialize the argument','line_number':1078,'multiline':False]
['text':'
 * "items(string)" function
 * Caller must have already checked that argvars[0] is a String.
 ','line_number':1097,'multiline':True]
['text':' null string behaves like an empty string','line_number':1110,'multiline':False]
['text':'
 * Extend "l1" with "l2".  "l1" must not be NULL.
 * If "bef" is NULL append at the end, otherwise insert before this item.
 * Returns FAIL when out of memory.
 ','line_number':1134,'multiline':True]
['text':' NULL list is equivalent to an empty list: nothing to do.','line_number':1146,'multiline':False]
['text':' When exending a list with itself, at some point we run into the item','line_number':1154,'multiline':False]
['text':' that was before "bef" and need to skip over the already inserted items','line_number':1155,'multiline':False]
['text':' to "bef".','line_number':1156,'multiline':False]
['text':' We also quit the loop when we have inserted the original item count of','line_number':1159,'multiline':False]
['text':' the list, avoid a hang when we extend a list with itself.','line_number':1160,'multiline':False]
['text':'
 * Concatenate lists "l1" and "l2" into a new list, stored in "tv".
 * Return FAIL when out of memory.
 ','line_number':1168,'multiline':True]
['text':' make a copy of the first list.','line_number':1177,'multiline':False]
['text':' append all items from the second list','line_number':1190,'multiline':False]
['text':' For a range we allow invalid values and for legacy script return an','line_number':1233,'multiline':False]
['text':' empty list, for Vim9 script start at the first item.','line_number':1234,'multiline':False]
['text':' A list index out of range is an error.','line_number':1235,'multiline':False]
['text':' copy the item to "var1" to avoid that freeing the list makes it','line_number':1267,'multiline':False]
['text':' invalid.','line_number':1268,'multiline':False]
['text':'
 * Make a copy of list "orig".  Shallow if "deep" is FALSE.
 * The refcount of the new list is set to 1.
 * See item_copy() for "top" and "copyID".
 * Returns NULL when out of memory.
 ','line_number':1276,'multiline':True]
['text':' Do this before adding the items, because one of the items may','line_number':1302,'multiline':False]
['text':' refer back to this list.','line_number':1303,'multiline':False]
['text':'
 * Remove items "item" to "item2" from list "l".
 * Does not free the listitem or the value!
 * This used to be called list_remove, but that conflicts with a Sun header
 * file.
 ','line_number':1337,'multiline':True]
['text':' notify watchers','line_number':1350,'multiline':False]
['text':'
 * Return an allocated string with the string representation of a list.
 * May return NULL.
 ','line_number':1370,'multiline':True]
['text':' to store the result in','line_number':1402,'multiline':False]
['text':' to keep each list item string','line_number':1408,'multiline':False]
['text':' Stringify each item in the list.','line_number':1420,'multiline':False]
['text':' recursion error, bail out','line_number':1446,'multiline':False]
['text':' Allocate result buffer with its total size, avoid re-allocation and','line_number':1450,'multiline':False]
['text':' multiple copy operations.  Add 2 for a tailing ']' and NUL.','line_number':1451,'multiline':False]
['text':'
 * Join list "l" into a string in "*gap", using separator "sep".
 * When "echo_style" is TRUE use String as echoed, otherwise as inside a List.
 * Return FAIL or OK.
 ','line_number':1473,'multiline':True]
['text':' nothing to do','line_number':1493,'multiline':False]
['text':' Dispose each item in join_ga.','line_number':1501,'multiline':False]
['text':'
 * "join()" function
 ','line_number':1513,'multiline':True]
['text':'
 * Allocate a variable for a List and fill it from "*arg".
 * "*arg" points to the "[".
 * Return OK or FAIL.
 ','line_number':1551,'multiline':True]
['text':' recursive!','line_number':1577,'multiline':False]
['text':' Legacy Vim script allowed a space before the comma.','line_number':1591,'multiline':False]
['text':' the comma must come after the value','line_number':1595,'multiline':False]
['text':' The "]" can be on the next line.  But a double quoted string may','line_number':1607,'multiline':False]
['text':' follow, not a comment.','line_number':1608,'multiline':False]
['text':'
 * Write "list" of strings to file "fd".
 ','line_number':1644,'multiline':True]
['text':'
 * Initialize a static list with 10 items.
 ','line_number':1685,'multiline':True]
['text':'
 * "list2str()" function
 ','line_number':1716,'multiline':True]
['text':' empty list results in empty string','line_number':1740,'multiline':False]
['text':'
 * Remove item argvars[1] from List argvars[0]. If argvars[2] is supplied, then
 * remove the range of items from argvars[1] to argvars[2] (inclusive).
 ','line_number':1775,'multiline':True]
['text':' type error: do nothing, errmsg already given','line_number':1797,'multiline':False]
['text':' Remove one item, return its value.','line_number':1807,'multiline':False]
['text':' Remove range of items, return list with values.','line_number':1814,'multiline':False]
['text':' type error: do nothing','line_number':1817,'multiline':False]
['text':' didn't find "item2" after "item"','line_number':1831,'multiline':False]
['text':' need to copy the list items and move the value','line_number':1845,'multiline':False]
['text':' struct used in the array that's given to qsort()','line_number':1872,'multiline':False]
['text':' struct storing information about current sort','line_number':1879,'multiline':False]
['text':'
 * Compare functions for f_sort() and f_uniq() below.
 ','line_number':1896,'multiline':True]
['text':' tv2string() puts quotes around a string and allocates memory.  Don't do','line_number':1931,'multiline':False]
['text':' that for string variables. Use a single quote when comparing with a','line_number':1932,'multiline':False]
['text':' non-string to do what the docs promise.','line_number':1933,'multiline':False]
['text':' When the result would be zero, compare the item indexes.  Makes the','line_number':1971,'multiline':False]
['text':' sort stable.','line_number':1972,'multiline':False]
['text':' shortcut after failure in previous call; compare all items equal','line_number':1993,'multiline':False]
['text':' Copy the values.  This is needed to be able to set v_lock to VAR_FIXED','line_number':2005,'multiline':False]
['text':' in the copy without changing the original list items.','line_number':2006,'multiline':False]
['text':' clear_tv() uses this','line_number':2010,'multiline':False]
['text':' return value has wrong type','line_number':2030,'multiline':False]
['text':' When the result would be zero, compare the pointers themselves.  Makes','line_number':2033,'multiline':False]
['text':' the sort stable.','line_number':2034,'multiline':False]
['text':'
 * sort() List "l"
 ','line_number':2041,'multiline':True]
['text':' Make an array with each entry pointing to an item in the List.','line_number':2054,'multiline':False]
['text':' sort(): ptrs will be the list to sort','line_number':2059,'multiline':False]
['text':' test the compare function','line_number':2069,'multiline':False]
['text':' Sort the array with item pointers.','line_number':2077,'multiline':False]
['text':' Clear the List and append the items in sorted order.','line_number':2085,'multiline':False]
['text':'
 * uniq() List "l"
 ','line_number':2097,'multiline':True]
['text':' Make an array with each entry pointing to an item in the List.','line_number':2111,'multiline':False]
['text':' f_uniq(): ptrs will be a stack of items to remove','line_number':2116,'multiline':False]
['text':'
 * Parse the optional arguments supplied to the sort() or uniq() function and
 * return the values in "info".
 ','line_number':2155,'multiline':True]
['text':' optional second argument: {func}','line_number':2174,'multiline':False]
['text':' empty string means default sort','line_number':2206,'multiline':False]
['text':' optional third argument: {dict}','line_number':2239,'multiline':False]
['text':'
 * "sort()" or "uniq()" function
 ','line_number':2248,'multiline':True]
['text':' Pointer to current info struct used in compare function. Save and','line_number':2272,'multiline':False]
['text':' restore the current one for nested calls.','line_number':2273,'multiline':False]
['text':' short list sorts pretty quickly','line_number':2289,'multiline':False]
['text':'
 * "sort({list})" function
 ','line_number':2303,'multiline':True]
['text':'
 * "uniq({list})" function
 ','line_number':2312,'multiline':True]
['text':'
 * Handle one item for map() and filter().
 * Sets v:val to "tv".  Caller must set v:key.
 ','line_number':2321,'multiline':True]
['text':' original value','line_number':2327,'multiline':False]
['text':' callback','line_number':2328,'multiline':False]
['text':' from eval_expr_get_funccal()','line_number':2330,'multiline':False]
['text':' for map() and mapnew(): new value','line_number':2331,'multiline':False]
['text':' for filter(): remove flag','line_number':2332,'multiline':False]
['text':' filter(): when expr is zero remove the item','line_number':2346,'multiline':False]
['text':' On type error, nothing has been removed; return FAIL to stop the','line_number':2352,'multiline':False]
['text':' loop.  The error message was given by tv_get_number_chk().','line_number':2353,'multiline':False]
['text':'
 * Implementation of map() and filter() for a List.  Apply "expr" to every item
 * in List "l" and return the result in "rettv".
 ','line_number':2363,'multiline':True]
['text':' set_vim_var_nr() doesn't set the type','line_number':2402,'multiline':False]
['text':' Create one funccall_T for all eval_expr_typval() calls.','line_number':2408,'multiline':False]
['text':' List from range(): loop over the numbers','line_number':2417,'multiline':False]
['text':' map(), mapnew(): always append the new value to the','line_number':2451,'multiline':False]
['text':' list','line_number':2452,'multiline':False]
['text':' filter(): append the list item value when not rem','line_number':2459,'multiline':False]
['text':' Materialized list: loop over the items','line_number':2469,'multiline':False]
['text':' map(): replace the list item value','line_number':2493,'multiline':False]
['text':' mapnew(): append the list item value','line_number':2500,'multiline':False]
['text':'
 * Implementation of map() and filter().
 ','line_number':2515,'multiline':True]
['text':' map() and filter() return the first argument, also on failure.','line_number':2533,'multiline':False]
['text':' Check that map() does not change the declared type of the list or','line_number':2544,'multiline':False]
['text':' dict.','line_number':2545,'multiline':False]
['text':' On type errors, the preceding call has already displayed an error','line_number':2563,'multiline':False]
['text':' message.  Avoid a misleading error message for an empty string that','line_number':2564,'multiline':False]
['text':' was not passed as argument.','line_number':2565,'multiline':False]
['text':' We reset "did_emsg" to be able to detect whether an error','line_number':2576,'multiline':False]
['text':' occurred during evaluation of the expression.','line_number':2577,'multiline':False]
['text':' argvars[0].v_type == VAR_LIST','line_number':2589,'multiline':False]
['text':'
 * "filter()" function
 ','line_number':2599,'multiline':True]
['text':'
 * "map()" function
 ','line_number':2608,'multiline':True]
['text':'
 * "mapnew()" function
 ','line_number':2617,'multiline':True]
['text':'
 * "add(list, item)" function
 ','line_number':2626,'multiline':True]
['text':'
 * "add(object, item)" function
 ','line_number':2647,'multiline':True]
['text':' Default: Failed','line_number':2653,'multiline':False]
['text':'
 * Count the number of times item "needle" occurs in List "l" starting at index
 * "idx". Case is ignored if "ic" is TRUE.
 ','line_number':2669,'multiline':True]
['text':'
 * "count()" function
 ','line_number':2701,'multiline':True]
['text':'
 * extend() a List. Append List argvars[1] to List argvars[0] before index
 * argvars[3] and return the resulting list in "rettv".  "is_new" is TRUE for
 * extendnew().
 ','line_number':2748,'multiline':True]
['text':' type error; errmsg already given','line_number':2788,'multiline':False]
['text':'
 * "extend()" or "extendnew()" function.  "is_new" is TRUE for extendnew().
 ','line_number':2820,'multiline':True]
['text':' Check that extend() does not change the type of the list if it was','line_number':2831,'multiline':False]
['text':' declared.','line_number':2832,'multiline':False]
['text':' Check that extend() does not change the type of the dict if it was','line_number':2839,'multiline':False]
['text':' declared.','line_number':2840,'multiline':False]
['text':'
 * "extend(list, list [, idx])" function
 * "extend(dict, dict [, action])" function
 ','line_number':2849,'multiline':True]
['text':'
 * "extendnew(list, list [, idx])" function
 * "extendnew(dict, dict [, action])" function
 ','line_number':2861,'multiline':True]
['text':' type error; errmsg already given','line_number':2894,'multiline':False]
['text':'
 * "insert()" function
 ','line_number':2914,'multiline':True]
['text':'
 * "remove()" function
 ','line_number':2935,'multiline':True]
['text':'
 * "reverse({list})" function
 ','line_number':2996,'multiline':True]
['text':'
 * Implementation of reduce() for list "argvars[0]", using the function "expr"
 * starting with the optional initial value argvars[2] and return the result in
 * "rettv".
 ','line_number':3019,'multiline':True]
['text':' Using reduce on a range() uses "range_idx" and "range_val".','line_number':3042,'multiline':False]
['text':' Create one funccall_T for all eval_expr_typval() calls.','line_number':3078,'multiline':False]
['text':' disallow the list changing here','line_number':3082,'multiline':False]
['text':' advance to the next item','line_number':3104,'multiline':False]
['text':'
 * "reduce(list, { accumulator, element -> value } [, initial])" function
 * "reduce(blob, { accumulator, element -> value } [, initial])"
 * "reduce(string, { accumulator, element -> value } [, initial])"
 ','line_number':3120,'multiline':True]
['text':' defined(FEAT_EVAL)','line_number':3162,'multiline':False]
