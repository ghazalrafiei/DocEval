['text':' vi:set ts=8 sts=4 sw=4 noet:
 *
 * VIM - Vi IMproved		by Bram Moolenaar
 *
 * Do ":help uganda"  in Vim to read copying and usage conditions.
 * Do ":help credits" in Vim to see a list of people who contributed.
 * See README.txt for an overview of the Vim source code.
 ','line_number':1,'multiline':True]
['text':'
 * Porting to GTK+ was done by:
 *
 * (C) 1998,1999,2000 by Marcin Dalecki <martin@dalecki.de>
 *
 * With GREAT support and continuous encouragements by Andy Kahn and of
 * course Bram Moolenaar!
 *
 * Support for GTK+ 2 was added by:
 *
 * (C) 2002,2003  Jason Hildebrand  <jason@peaceworks.ca>
 *		  Daniel Elstner  <daniel.elstner@gmx.net>
 *
 * Support for GTK+ 3 was added by:
 *
 * 2016  Kazunobu Kuriyama  <kazunobu.kuriyama@gmail.com>
 ','line_number':10,'multiline':True]
['text':' Gnome redefines _() and N_().  Grrr...','line_number':34,'multiline':False]
['text':' so the texts in the dialog boxes are translated','line_number':51,'multiline':False]
['text':' missing prototype in bonobo-dock-item.h','line_number':55,'multiline':False]
['text':' When generating prototypes we don't want syntax errors.','line_number':60,'multiline':False]
['text':'
 * Easy-to-use macro for multihead support.
 ','line_number':102,'multiline':True]
['text':' Selection type distinguishers','line_number':108,'multiline':False]
['text':'
 * Table of selection targets supported by Vim.
 * Note: Order matters, preferred types should come first.
 ','line_number':123,'multiline':True]
['text':'
 * Table of DnD targets supported by Vim.
 * Note: Order matters, preferred types should come first.
 ','line_number':140,'multiline':True]
['text':'
 * "Monospace" is a standard font alias that should be present
 * on all proper Pango/fontconfig installations.
 ','line_number':156,'multiline':True]
['text':'
 * Atoms used to communicate save-yourself from the X11 session manager. There
 * is no need to move them into the GUI struct, since they should be constant.
 ','line_number':167,'multiline':True]
['text':'
 * Atoms used to control/reference X11 selections.
 ','line_number':175,'multiline':True]
['text':' Vim's own special selection format','line_number':180,'multiline':False]
['text':' Vim's extended selection format','line_number':181,'multiline':False]
['text':'
 * Keycodes recognized by vim.
 * NOTE: when changing this, the table in gui_x11.c probably needs the same
 * change!
 ','line_number':183,'multiline':True]
['text':' Pause == F21 according to netbeans.txt','line_number':221,'multiline':False]
['text':' Keypad keys:','line_number':252,'multiline':False]
['text':' page up','line_number':261,'multiline':False]
['text':' page down','line_number':262,'multiline':False]
['text':' End of list marker:','line_number':282,'multiline':False]
['text':'
 * Flags for command line options table below.
 ','line_number':286,'multiline':True]
['text':' ignored','line_number':298,'multiline':False]
['text':' ignored','line_number':299,'multiline':False]
['text':' a value is expected after the argument','line_number':301,'multiline':False]
['text':' need to initialize the GUI for this','line_number':302,'multiline':False]
['text':' argument is handled by GTK+ or GNOME','line_number':303,'multiline':False]
['text':' accept -foo but substitute with --foo','line_number':304,'multiline':False]
['text':' don't remove argument from argv[]','line_number':305,'multiline':False]
['text':'
 * This table holds all the X GUI command line options allowed.  This includes
 * the standard ones so that we can skip them when Vim is started without the
 * GUI (but the GUI might start up later).
 *
 * When changing this, also update doc/gui_x11.txt and the usage message!!!
 ','line_number':307,'multiline':True]
['text':' We handle these options ourselves','line_number':323,'multiline':False]
['text':' non-standard value format','line_number':339,'multiline':False]
['text':' not implemented','line_number':340,'multiline':False]
['text':' not implemented','line_number':341,'multiline':False]
['text':' not implemented','line_number':342,'multiline':False]
['text':' Arguments handled by GTK (and GNOME) internally.','line_number':344,'multiline':False]
['text':' conflicts with Vim's own --version argument','line_number':372,'multiline':False]
['text':'
 * Can't use Gnome if --socketid given
 ','line_number':391,'multiline':True]
['text':' Comment out the following line to ignore code for resize history tracking.','line_number':399,'multiline':False]
['text':'
 * Keep a short term resize history so that stale gtk responses can be
 * discarded.
 * When a gtk_window_resize() request is sent to gtk, the width/height of
 * the request is saved. Recent stale requests are kept around in a list.
 * See https://github.com/vim/vim/issues/10123
 ','line_number':402,'multiline':True]
['text':' Change to 1 to enable ch_log() calls for debugging.','line_number':409,'multiline':False]
['text':'
 * History item of a resize request.
 * Width and height are of gui.mainwin.
 ','line_number':415,'multiline':True]
['text':' If true, can't match for discard. Only matches once.','line_number':420,'multiline':False]
['text':' for ch_log messages','line_number':424,'multiline':False]
['text':' never NULL during execution','line_number':429,'multiline':False]
['text':' list of stale resize requests','line_number':431,'multiline':False]
['text':'
 * Used when calling gtk_window_resize().
 * Create a resize request history item, put previous request on stale list.
 * Width/height are the size of the request for the gui.mainwin.
 ','line_number':434,'multiline':True]
['text':' alloc a new resize hist, save current in list of old history','line_number':442,'multiline':False]
['text':' previous hist item becomes head of list','line_number':450,'multiline':False]
['text':'
 * Free everything on the stale resize history list.
 * This list is empty when there are no outstanding resize requests.
 ','line_number':461,'multiline':True]
['text':' true if hist item is unused and matches w,h','line_number':489,'multiline':False]
['text':'
 * Search the resize hist list.
 * Return true if the specified width,height match an item in the list that
 * has never matched before. Mark the matching item as used so it will
 * not match again.
 ','line_number':493,'multiline':True]
['text':'
 * GTK doesn't set the GDK_BUTTON1_MASK state when dragging a touch. Add this
 * state when dragging.
 ','line_number':527,'multiline':True]
['text':'
 * Parse the GUI related command-line arguments.  Any arguments used are
 * deleted from argv, and *argc is decremented accordingly.  This is called
 * when vim is started, whether or not the GUI has been started.
 ','line_number':533,'multiline':True]
['text':'
     * Determine the command used to invoke Vim, to be passed as restart
     * command to the session manager.	If argv[0] contains any directory
     * components try building an absolute path, otherwise leave it as is.
     ','line_number':546,'multiline':True]
['text':'
     * Move all the entries in argv which are relevant to GTK+ and GNOME
     * into gui_argv.  Freed later in gui_mch_init().
     ','line_number':565,'multiline':True]
['text':' Don't waste CPU cycles on non-option arguments.','line_number':578,'multiline':False]
['text':' Look for argv[i] in cmdline_options[] table.','line_number':585,'multiline':False]
['text':' allow --foo=bar style','line_number':594,'multiline':False]
['text':' darn, -nb has non-standard syntax','line_number':598,'multiline':False]
['text':' Replace the standard X arguments "-name" and "-display"','line_number':607,'multiline':False]
['text':' with their GNU-style long option counterparts.','line_number':608,'multiline':False]
['text':' no match','line_number':613,'multiline':False]
['text':' Move the argument into gui_argv, which','line_number':621,'multiline':False]
['text':' will later be passed to gtk_init_check()','line_number':622,'multiline':False]
['text':' Extract the option's value if there is one.','line_number':629,'multiline':False]
['text':' Accept both "--foo bar" and "--foo=bar" style.','line_number':630,'multiline':False]
['text':' Check for options handled by Vim itself','line_number':639,'multiline':False]
['text':' used later in gui_mch_open()','line_number':665,'multiline':False]
['text':' don't fork() when starting GUI','line_number':669,'multiline':False]
['text':' These arguments make gnome_program_init() print a message and exit.','line_number':678,'multiline':False]
['text':' Must start the GUI for this, otherwise ":gui" will exit later!','line_number':679,'multiline':False]
['text':' Only when the GUI can start.','line_number':680,'multiline':False]
['text':' Remove the flag from the argument vector.','line_number':689,'multiline':False]
['text':' Move the argument's value as well, if there is one.','line_number':694,'multiline':False]
['text':'
 * This should be maybe completely removed.
 * Doesn't seem possible, since check_copy_area() relies on
 * this information.  --danielk
 ','line_number':731,'multiline':True]
['text':'
     * When we do an gdk_window_copy_area(), and the window is partially
     * obscured, we want to receive an event to tell us whether it worked
     * or not.
     ','line_number':742,'multiline':True]
['text':' !GTK_CHECK_VERSION(3,0,0)','line_number':752,'multiline':False]
['text':'
 * Redraw the corresponding portions of the screen.
 ','line_number':754,'multiline':True]
['text':' Skip this when the GUI isn't set up yet, will redraw later.','line_number':763,'multiline':False]
['text':' make sure all output has been processed','line_number':767,'multiline':False]
['text':' for GTK+ 3, may induce other draw events.','line_number':768,'multiline':False]
['text':' !GTK_CHECK_VERSION(3,0,0)','line_number':793,'multiline':False]
['text':' Skip this when the GUI isn't set up yet, will redraw later.','line_number':799,'multiline':False]
['text':' make sure all output has been processed','line_number':803,'multiline':False]
['text':' Clear the border areas if needed','line_number':807,'multiline':False]
['text':' !GTK_CHECK_VERSION(3,0,0)','line_number':820,'multiline':False]
['text':'
 * Handle changes to the "Comm" property
 ','line_number':823,'multiline':True]
['text':' Translate to XLib','line_number':838,'multiline':False]
['text':' defined(FEAT_CLIENTSERVER)','line_number':848,'multiline':False]
['text':'
 * Handle changes to the "Xft/DPI" setting
 ','line_number':850,'multiline':True]
['text':' Create a new PangoContext for this screen, and initialize it','line_number':858,'multiline':False]
['text':' with the current font if necessary.','line_number':859,'multiline':False]
['text':' force default font','line_number':868,'multiline':False]
['text':'
 * Start a timer that will invoke the specified callback.
 * Returns the ID of the timer.
 ','line_number':876,'multiline':True]
['text':'///////////////////////////////////////////////////////////////////////////','line_number':893,'multiline':False]
['text':' Focus handlers:','line_number':894,'multiline':False]
['text':'
 * This is a simple state machine:
 * BLINK_NONE	not blinking at all
 * BLINK_OFF	blinking, cursor is not shown
 * BLINK_ON	blinking, cursor is shown
 ','line_number':897,'multiline':True]
['text':'
 * Stop the cursor blinking.  Show the cursor if it wasn't shown.
 ','line_number':934,'multiline':True]
['text':' don't happen again','line_number':974,'multiline':False]
['text':'
 * Start the cursor blinking.  If it was already blinking, this restarts the
 * waiting time and shows the cursor.
 ','line_number':977,'multiline':True]
['text':' Only switch blinking on if none of the times is zero','line_number':989,'multiline':False]
['text':' make sure keyboard input goes there','line_number':1009,'multiline':False]
['text':' make sure keyboard input goes to the draw area (if this is focus for a','line_number':1037,'multiline':False]
['text':' window)','line_number':1038,'multiline':False]
['text':'
 * Translate a GDK key value to UTF-8 independently of the current locale.
 * The output is written to string, which must have room for at least 6 bytes
 * plus the NUL terminator.  Returns the length in bytes.
 *
 * event->string is evil; see here why:
 * http://developer.gnome.org/doc/API/2.0/gdk/gdk-Event-Structures.html#GdkEventKey
 ','line_number':1059,'multiline':True]
['text':' Translate a normal key to UTF-8.  This doesn't work for dead','line_number':1076,'multiline':False]
['text':' keys of course, you _have_ to use an input method for that.','line_number':1077,'multiline':False]
['text':' Translate keys which are represented by ASCII control codes in Vim.','line_number':1082,'multiline':False]
['text':' There are only a few of those; most control keys are translated to','line_number':1083,'multiline':False]
['text':' special terminal-like control sequences.','line_number':1084,'multiline':False]
['text':'
 * Main keyboard handler:
 ','line_number':1146,'multiline':True]
['text':' For GTK+ 2 we know for sure how large the string might get.','line_number':1154,'multiline':False]
['text':' (That is, up to 6 bytes + NUL + CSI escapes + safety measure.)','line_number':1155,'multiline':False]
['text':'
     * These keys have bogus lookup strings, and trapping them here is
     * easier than trying to XRebindKeysym() on them with every possible
     * combination of modifiers.
     ','line_number':1176,'multiline':True]
['text':' Careful: convert_input() doesn't handle the NUL character.','line_number':1188,'multiline':False]
['text':' No need to convert pure ASCII anyway, thus the len > 1 check.','line_number':1189,'multiline':False]
['text':' Turn CSI into K_CSI.','line_number':1200,'multiline':False]
['text':' Shift-Tab results in Left_Tab, but we want <S-Tab>','line_number':1208,'multiline':False]
['text':' If there is a menu and 'wak' is "yes", or 'wak' is "menu" and the key','line_number':1216,'multiline':False]
['text':' is a menu shortcut, we ignore everything with the ALT modifier.','line_number':1217,'multiline':False]
['text':' For GTK2 we return false to signify that we haven't handled the','line_number':1224,'multiline':False]
['text':' keypress, so that gtk will handle the mnemonic or accelerator.','line_number':1225,'multiline':False]
['text':' We used to apply Alt/Meta to the key here (Mod1Mask), but that is now','line_number':1229,'multiline':False]
['text':' done later, the same as it happens for the terminal.  Hopefully that','line_number':1230,'multiline':False]
['text':' works for everybody...','line_number':1231,'multiline':False]
['text':' Check for special keys.	Also do this when len == 1 (key has an ASCII','line_number':1233,'multiline':False]
['text':' value) to detect backspace, delete and keypad keys.','line_number':1234,'multiline':False]
['text':' Belgian Ctrl+[ workaround','line_number':1251,'multiline':False]
['text':' workaround has to return here, otherwise our fake string[] entries','line_number':1260,'multiline':False]
['text':' are confusing code downstream','line_number':1261,'multiline':False]
['text':' Unrecognized key','line_number':1266,'multiline':False]
['text':' For some keys a shift modifier is translated into another key code.','line_number':1269,'multiline':False]
['text':' Handle modifiers.','line_number':1278,'multiline':False]
['text':' Recognize special keys.','line_number':1281,'multiline':False]
['text':' Some keys need adjustment when the Ctrl modifier is used.','line_number':1294,'multiline':False]
['text':' May remove the Shift modifier if it's included in the key.','line_number':1297,'multiline':False]
['text':' Check if the key interrupts.','line_number':1313,'multiline':False]
['text':' workaround for German keyboard, where instead of '[' char we have code','line_number':1325,'multiline':False]
['text':' sequence of bytes 195, 188 (UTF-8 for "u-umlaut")','line_number':1326,'multiline':False]
['text':' ASCII('[')','line_number':1331,'multiline':False]
['text':' blank out the pointer if necessary','line_number':1336,'multiline':False]
['text':'
     * GTK+ 2 input methods may do fancy stuff on key release events too.
     * With the default IM for instance, you can enter any UCS code point
     * by holding down CTRL-SHIFT and typing hexadecimal digits.
     ','line_number':1351,'multiline':True]
['text':'///////////////////////////////////////////////////////////////////////////','line_number':1364,'multiline':False]
['text':' Selection handlers:','line_number':1365,'multiline':False]
['text':' Remember when clip_lose_selection was called from here, we must not call','line_number':1367,'multiline':False]
['text':' gtk_selection_owner_set() then.','line_number':1368,'multiline':False]
['text':' selection_received_cb() not called yet','line_number':1386,'multiline':False]
['text':' selection_received_cb() called and OK','line_number':1387,'multiline':False]
['text':' selection_received_cb() called and failed','line_number':1388,'multiline':False]
['text':' clip_free_selection(cbd); ???','line_number':1415,'multiline':False]
['text':' If the encoding of the text is different from 'encoding', attempt','line_number':1437,'multiline':False]
['text':' converting it.','line_number':1438,'multiline':False]
['text':' gtk_selection_data_get_text() handles all the nasty details','line_number':1450,'multiline':False]
['text':' and targets and encodings etc.  This rocks so hard.','line_number':1451,'multiline':False]
['text':' UTF-16, we get this for HTML','line_number':1471,'multiline':False]
['text':' Chop off any trailing NUL bytes.  OpenOffice sends these.','line_number':1487,'multiline':False]
['text':'
 * Prepare our selection data for passing it to the external selection
 * client.
 ','line_number':1497,'multiline':True]
['text':' Shouldn't ever happen','line_number':1523,'multiline':False]
['text':' get the selection from the '*'/'+' register','line_number':1534,'multiline':False]
['text':' Due to int arguments we can't handle more than G_MAXINT.  Also','line_number':1540,'multiline':False]
['text':' reserve one extra byte for NUL or the motion type; just in case.','line_number':1541,'multiline':False]
['text':' (Not that pasting 2G of text is ever going to work, but... ;-)','line_number':1542,'multiline':False]
['text':' For our own format, the first byte contains the motion type','line_number':1553,'multiline':False]
['text':' Since we get utf-16, we probably should set it as well.','line_number':1564,'multiline':False]
['text':' Prepend the BOM: "fffe"','line_number':1575,'multiline':False]
['text':' Looks redundant even for GTK2 because these values are','line_number':1590,'multiline':False]
['text':' overwritten by gtk_selection_data_set() that follows.','line_number':1591,'multiline':False]
['text':' 16 bits per char','line_number':1593,'multiline':False]
['text':' contents: motion_type 'encoding' NUL text','line_number':1605,'multiline':False]
['text':' gtk_selection_data_set_text() handles everything for us.  This is','line_number':1619,'multiline':False]
['text':' so easy and simple and cool, it'd be insane not to use it.','line_number':1620,'multiline':False]
['text':' Validate the string to avoid runtime warnings','line_number':1631,'multiline':False]
['text':' Looks redundant even for GTK2 because these values are','line_number':1644,'multiline':False]
['text':' overwritten by gtk_selection_data_set() that follows.','line_number':1645,'multiline':False]
['text':' 8 bits per char','line_number':1647,'multiline':False]
['text':'
 * Check if the GUI can be started.  Called before gvimrc is sourced and
 * before fork().
 * Return OK or FAIL.
 ','line_number':1654,'multiline':True]
['text':' Guess that when $DISPLAY isn't set the GUI can't start.','line_number':1664,'multiline':False]
['text':'
 * Check if the GUI can be started.  Called before gvimrc is sourced but after
 * fork().
 * Return OK or FAIL.
 ','line_number':1676,'multiline':True]
['text':' Call this function in the GUI process; otherwise, the resources','line_number':1689,'multiline':False]
['text':' won't be available.  Don't call it twice.','line_number':1690,'multiline':False]
['text':' Vim currently assumes that Gtk means X11, so it cannot use native Gtk','line_number':1697,'multiline':False]
['text':' support for other backends such as Wayland.','line_number':1698,'multiline':False]
['text':' This defaults to argv[0], but we want it to match the name of the','line_number':1707,'multiline':False]
['text':' shipped gvim.desktop so that Vim's windows can be associated with this','line_number':1708,'multiline':False]
['text':' file.','line_number':1709,'multiline':False]
['text':' Don't use gtk_init() or gnome_init(), it exits on failure.','line_number':1712,'multiline':False]
['text':'///////////////////////////////////////////////////////////////////////////','line_number':1723,'multiline':False]
['text':' Mouse handling callbacks','line_number':1724,'multiline':False]
['text':'
 * Timer used to recognize multiple clicks of the mouse button
 ','line_number':1730,'multiline':True]
['text':' we don't use this information currently','line_number':1736,'multiline':False]
['text':' don't happen again','line_number':1740,'multiline':False]
['text':' Need to add GDK_BUTTON1_MASK state when dragging a touch.','line_number':1754,'multiline':False]
['text':' If our pointer is currently hidden, then we should show it.','line_number':1762,'multiline':False]
['text':' Just moving the rodent above the drawing area without any button','line_number':1765,'multiline':False]
['text':' being pressed.','line_number':1766,'multiline':False]
['text':' translate modifier coding between the main engine and GTK','line_number':1773,'multiline':False]
['text':' inform the editor engine about the occurrence of this event','line_number':1776,'multiline':False]
['text':'
     * Auto repeat timer handling.
     ','line_number':1779,'multiline':True]
['text':' Calculate the maximal distance of the cursor from the drawing area.','line_number':1794,'multiline':False]
['text':' (offshoot can't become negative here!).','line_number':1795,'multiline':False]
['text':' Make a linearly decaying timer delay with a threshold of 5 at a','line_number':1801,'multiline':False]
['text':' distance of 127 pixels from the main window.','line_number':1802,'multiline':False]
['text':'','line_number':1803,'multiline':False]
['text':' One could think endlessly about the most ergonomic variant here.','line_number':1804,'multiline':False]
['text':' For example it could make sense to calculate the distance from the','line_number':1805,'multiline':False]
['text':' drags start instead...','line_number':1806,'multiline':False]
['text':'','line_number':1807,'multiline':False]
['text':' Maybe a parabolic interpolation would suite us better here too...','line_number':1808,'multiline':False]
['text':' 5 appears to be somehow near to my perceptual limits :-).','line_number':1811,'multiline':False]
['text':' shoot again','line_number':1819,'multiline':False]
['text':' !GTK_CHECK_VERSION(3,0,0)','line_number':1862,'multiline':False]
['text':'
 * Timer used to recognize multiple clicks of the mouse button.
 ','line_number':1868,'multiline':True]
['text':' If there already is a mouse click in the input buffer, wait another','line_number':1888,'multiline':False]
['text':' time (otherwise we would create a backlog of clicks)','line_number':1889,'multiline':False]
['text':'
     * Fake a motion event.
     * Trick: Pretend the mouse moved to the next character on every other
     * event, otherwise drag events will be discarded, because they are still
     * in the same character.
     ','line_number':1895,'multiline':True]
['text':' Don't happen again.  We will get reinstalled in the synthetic event','line_number':1907,'multiline':False]
['text':' if needed -- thus repeating should still work.','line_number':1908,'multiline':False]
['text':' handled','line_number':1932,'multiline':False]
['text':'
 * Mouse button handling.  Note please that we are capturing multiple click's
 * by our own timeout mechanism instead of the one provided by GTK+ itself.
 * This is due to the way the generic VIM code is recognizing multiple clicks.
 ','line_number':1936,'multiline':True]
['text':' Make sure we have focus now we've been selected','line_number':1953,'multiline':False]
['text':'
     * Don't let additional events about multiple clicks send by GTK to us
     * after the initial button press event confuse us.
     ','line_number':1957,'multiline':True]
['text':' Handle multiple clicks','line_number':1967,'multiline':False]
['text':' Keep in sync with gui_x11.c.','line_number':1981,'multiline':False]
['text':' Buttons 4-7 are handled in scroll_event()','line_number':1982,'multiline':False]
['text':' needed for touch-drag','line_number':1985,'multiline':False]
['text':' Unknown button','line_number':1993,'multiline':False]
['text':' cancel any preediting','line_number':1997,'multiline':False]
['text':'
 * GTK+ 2 abstracts scrolling via the GdkEventScroll.
 ','line_number':2009,'multiline':True]
['text':' This shouldn't happen','line_number':2037,'multiline':False]
['text':' cancel any preediting','line_number':2042,'multiline':False]
['text':' Remove any motion "machine gun" timers used for automatic further','line_number':2066,'multiline':False]
['text':' extension of allocation areas if outside of the applications window','line_number':2067,'multiline':False]
['text':' area .','line_number':2068,'multiline':False]
['text':' MOUSE_LEFT','line_number':2084,'multiline':False]
['text':'///////////////////////////////////////////////////////////////////////////','line_number':2094,'multiline':False]
['text':' Drag aNd Drop support handlers.','line_number':2095,'multiline':False]
['text':'
 * Count how many items there may be and separate them with a NUL.
 * Apparently the items are separated with \r\n.  This is not documented,
 * thus be careful not to go past the end.	Also allow separation with
 * NUL characters.
 ','line_number':2097,'multiline':True]
['text':' last item didn't have \r or \n','line_number':2130,'multiline':False]
['text':'
 * Parse NUL separated "src" strings.  Make it an array "outlist" form.  On
 * this process, URI which protocol is not "file:" are removed.  Return
 * length of array (less than "max").
 ','line_number':2136,'multiline':True]
['text':' accept','line_number':2200,'multiline':False]
['text':' accept','line_number':2233,'multiline':False]
['text':'
 * DND receiver.
 ','line_number':2244,'multiline':True]
['text':' Guard against trash','line_number':2259,'multiline':False]
['text':' Get the current modifier state for proper distinguishment between','line_number':2273,'multiline':False]
['text':' different operations later.','line_number':2274,'multiline':False]
['text':' Not sure about the role of "text/plain" here...','line_number':2277,'multiline':False]
['text':' FEAT_DND','line_number':2284,'multiline':False]
['text':'
 * GnomeClient interact callback.  Check for unsaved buffers that cannot
 * be abandoned and pop up a dialog asking the user for confirmation if
 * necessary.
 ','line_number':2288,'multiline':True]
['text':'
     * If there are changed buffers, present the user with
     * a dialog if possible, otherwise give an error message.
     ','line_number':2310,'multiline':True]
['text':' position the cursor','line_number':2318,'multiline':False]
['text':'
     * If the user hit the [Cancel] button the whole shutdown
     * will be cancelled.  Wow, quite powerful feature (:
     ','line_number':2320,'multiline':True]
['text':'
 * "save_yourself" signal handler.  Initiate an interaction to ask the user
 * for confirmation if necessary.  Save the current editing session and tell
 * the session manager how to restart Vim.
 ','line_number':2327,'multiline':True]
['text':' Always request an interaction if possible.  check_changed_any()','line_number':2346,'multiline':False]
['text':' won't actually show a dialog unless any buffers have been modified.','line_number':2347,'multiline':False]
['text':' There doesn't seem to be an obvious way to check that without','line_number':2348,'multiline':False]
['text':' automatically firing the dialog.  Anyway, it works just fine.','line_number':2349,'multiline':False]
['text':' preserve all swap files','line_number':2355,'multiline':False]
['text':' The path is unique for each session save.  We do neither know nor care','line_number':2357,'multiline':False]
['text':' which session script will actually be used later.  This decision is in','line_number':2358,'multiline':False]
['text':' the domain of the session manager.','line_number':2359,'multiline':False]
['text':' get rid of the superfluous trailing '/'','line_number':2365,'multiline':False]
['text':' Tell the session manager how to wipe out the stored session data.','line_number':2377,'multiline':False]
['text':' This isn't as dangerous as it looks, don't worry :)	session_file','line_number':2378,'multiline':False]
['text':' is a unique absolute filename.  Usually it'll be something like','line_number':2379,'multiline':False]
['text':' `/home/user/.gnome2/vim-XXXXXX-session.vim'.','line_number':2380,'multiline':False]
['text':' Tell the session manager how to restore the just saved session.','line_number':2388,'multiline':False]
['text':' This is easily done thanks to Vim's -S option.  Pass the -f flag','line_number':2389,'multiline':False]
['text':' since there's no need to fork -- it might even cause confusion.','line_number':2390,'multiline':False]
['text':' Also pass the window role to give the WM something to match on.','line_number':2391,'multiline':False]
['text':' The role is set in gui_mch_open(), thus should _never_ be NULL.','line_number':2392,'multiline':False]
['text':'
 * Called when the session manager wants us to die.  There isn't much to save
 * here since "save_yourself" has been emitted before (unless serious trouble
 * is happening).
 ','line_number':2412,'multiline':True]
['text':' Don't write messages to the GUI anymore','line_number':2420,'multiline':False]
['text':'
 * Connect our signal handlers to be notified on session save and shutdown.
 ','line_number':2429,'multiline':True]
['text':' Must use the deprecated gtk_signal_connect() for compatibility','line_number':2441,'multiline':False]
['text':' with GNOME 1.  Arrgh, zombies!','line_number':2442,'multiline':False]
['text':' !USE_GNOME_SESSION','line_number':2449,'multiline':False]
['text':'
 * GTK tells us that XSMP needs attention
 ','line_number':2452,'multiline':True]
['text':' Do stuff; maybe close connection','line_number':2463,'multiline':False]
['text':' Error','line_number':2468,'multiline':False]
['text':' USE_XSMP','line_number':2473,'multiline':False]
['text':'
 * Setup the WM_PROTOCOLS to indicate we want the WM_SAVE_YOURSELF event.
 * This is an ugly use of X functions.	GTK doesn't offer an alternative.
 ','line_number':2475,'multiline':True]
['text':'
	 * Use XSMP is preference to legacy WM_SAVE_YOURSELF;
	 * set up GTK IO monitor
	 ','line_number':2488,'multiline':True]
['text':' Fall back to old method','line_number':2501,'multiline':False]
['text':' first get the existing value','line_number':2503,'multiline':False]
['text':' check if WM_SAVE_YOURSELF isn't there yet','line_number':2516,'multiline':False]
['text':' allocate an Atoms array which is one item longer','line_number':2523,'multiline':False]
['text':'
 * Installing a global event filter seems to be the only way to catch
 * client messages of type WM_PROTOCOLS without overriding GDK's own
 * client message event filter.  Well, that's still better than trying
 * to guess what the GDK filter had done if it had been invoked instead
 *
 * GTK2_FIXME:	This doesn't seem to work.  For some reason we never
 * receive WM_SAVE_YOURSELF even though everything is set up correctly.
 * I have the nasty feeling modern session managers just don't send this
 * deprecated message anymore.	Addition: confirmed by several people.
 *
 * The GNOME session support is much cooler anyway.  Unlike this ugly
 * WM_SAVE_YOURSELF hack it actually stores the session...  And yes,
 * it should work with KDE as well.
 ','line_number':2540,'multiline':True]
['text':' preserve all swap files','line_number':2569,'multiline':False]
['text':'
	 * Set the window's WM_COMMAND property, to let the window manager
	 * know we are done saving ourselves.  We don't want to be
	 * restarted, thus set argv to NULL.
	 ','line_number':2570,'multiline':True]
['text':' !USE_GNOME_SESSION','line_number':2583,'multiline':False]
['text':'
 * Setup the window icon & xcmdsrv comm after the main window has been realized.
 ','line_number':2586,'multiline':True]
['text':' If you get an error message here, you still need to unpack the runtime','line_number':2592,'multiline':False]
['text':' archive!','line_number':2593,'multiline':False]
['text':' A bit hackish, but avoids casting later and allows optimization','line_number':2597,'multiline':False]
['text':' When started with "--echo-wid" argument, write window ID on stdout.','line_number':2612,'multiline':False]
['text':'
	 * Add an icon to the main window. For fun and convenience of the user.
	 ','line_number':2621,'multiline':True]
['text':' TODO: is this type cast OK?','line_number':2632,'multiline':False]
['text':' Register a handler for WM_SAVE_YOURSELF with GDK's low-level X I/F','line_number':2638,'multiline':False]
['text':' Setup to indicate to the window manager that we want to catch the','line_number':2641,'multiline':False]
['text':' WM_SAVE_YOURSELF event.	For GNOME, this connects to the session','line_number':2642,'multiline':False]
['text':' manager instead.','line_number':2643,'multiline':False]
['text':' This is a :gui command in a plain vim with no previous server','line_number':2652,'multiline':False]
['text':'
	 * Cannot handle "XLib-only" windows with gtk event routines, we'll
	 * have to change the "server" registration to that of the main window
	 * If we have not registered a name yet, remember the window.
	 ','line_number':2660,'multiline':True]
['text':' Create a pseudo blank pointer, which is in fact one pixel by one pixel','line_number':2701,'multiline':False]
['text':' in size.','line_number':2702,'multiline':False]
['text':'
     * Recreate the invisible mouse cursor.
     ','line_number':2745,'multiline':True]
['text':'
     * Create a new PangoContext for this screen, and initialize it
     * with the current font if necessary.
     ','line_number':2761,'multiline':True]
['text':'
 * After the drawing area comes up, we calculate all colors and create the
 * dummy blank cursor.
 *
 * Don't try to set any VIM scrollbar sizes anywhere here. I'm relying on the
 * fact that the main VIM engine doesn't take them into account anywhere.
 ','line_number':2778,'multiline':True]
['text':' get the actual size of the scrollbars, if they are realized','line_number':2809,'multiline':False]
['text':'
 * Properly clean up on shutdown.
 ','line_number':2823,'multiline':True]
['text':' Don't write messages to the GUI anymore','line_number':2829,'multiline':False]
['text':' As of 3.22.2, GdkWindows have started distributing configure events to','line_number':2894,'multiline':False]
['text':' their "native" children (https://git.gnome.org/browse/gtk+/commit/?h=gtk-3-22&id=12579fe71b3b8f79eb9c1b80e429443bcc437dd0).','line_number':2895,'multiline':False]
['text':'','line_number':2896,'multiline':False]
['text':' As can be seen from the implementation of move_native_children() and','line_number':2897,'multiline':False]
['text':' configure_native_child() in gdkwindow.c, those functions actually','line_number':2898,'multiline':False]
['text':' propagate configure events to every child, failing to distinguish','line_number':2899,'multiline':False]
['text':' "native" one from non-native one.','line_number':2900,'multiline':False]
['text':'','line_number':2901,'multiline':False]
['text':' Naturally, configure events propagated to here like that are fallacious','line_number':2902,'multiline':False]
['text':' and, as a matter of fact, they trigger a geometric collapse of','line_number':2903,'multiline':False]
['text':' gui.drawarea in fullscreen and maximized modes.','line_number':2904,'multiline':False]
['text':'','line_number':2905,'multiline':False]
['text':' To filter out such nuisance events, we are making use of the fact that','line_number':2906,'multiline':False]
['text':' the field send_event of such GdkEventConfigures is set to FALSE in','line_number':2907,'multiline':False]
['text':' configure_native_child().','line_number':2908,'multiline':False]
['text':'','line_number':2909,'multiline':False]
['text':' Obviously, this is a terrible hack making GVim depend on GTK's','line_number':2910,'multiline':False]
['text':' implementation details.  Therefore, watch out any relevant internal','line_number':2911,'multiline':False]
['text':' changes happening in GTK in the feature (sigh).','line_number':2912,'multiline':False]
['text':'','line_number':2913,'multiline':False]
['text':' Follow-up','line_number':2914,'multiline':False]
['text':' After a few weeks later, the GdkWindow change mentioned above was','line_number':2915,'multiline':False]
['text':' reverted (https://git.gnome.org/browse/gtk+/commit/?h=gtk-3-22&id=f70039cb9603a02d2369fec4038abf40a1711155).','line_number':2916,'multiline':False]
['text':' The corresponding official release is 3.22.4.','line_number':2917,'multiline':False]
['text':'
 * Callback routine for the "delete_event" signal on the toplevel window.
 * Tries to vim gracefully, or refuses to exit with changed buffers.
 ','line_number':2942,'multiline':True]
['text':' Only menu & toolbar are dock items.  Could tabline be?','line_number':2970,'multiline':False]
['text':' Seem to be only the 2 defined in GNOME','line_number':2971,'multiline':False]
['text':' these are never vertical without GNOME','line_number':3010,'multiline':False]
['text':' This controls whether we can set the real window hints at','line_number':3045,'multiline':False]
['text':' start-up when in a GtkPlug.','line_number':3046,'multiline':False]
['text':' 0 = normal processing (default)','line_number':3047,'multiline':False]
['text':' 1 = init. hints set, no-one's tried to reset since last check','line_number':3048,'multiline':False]
['text':' 2 = init. hints set, attempt made to change hints','line_number':3049,'multiline':False]
['text':' At start-up, don't try to set the hints until the initial','line_number':3067,'multiline':False]
['text':' values have been used (those that dictate our initial size)','line_number':3068,'multiline':False]
['text':' Let forced (i.e., correct) values through always.','line_number':3069,'multiline':False]
['text':' Don't do it!','line_number':3072,'multiline':False]
['text':' This also needs to be done when the main window isn't there yet,','line_number':3077,'multiline':False]
['text':' otherwise the hints don't work.','line_number':3078,'multiline':False]
['text':' GtkSockets use GtkPlug's [gui,mainwin] min-size hints to determine','line_number':3087,'multiline':False]
['text':' their actual widget size.  When we set our size ourselves (e.g.,','line_number':3088,'multiline':False]
['text':' 'set columns=' or init. -geom) we briefly set the min. to the size','line_number':3089,'multiline':False]
['text':' we wish to be instead of the legitimate minimum so that we actually','line_number':3090,'multiline':False]
['text':' resize correctly.','line_number':3091,'multiline':False]
['text':' Avoid an expose event when the size didn't change.','line_number':3103,'multiline':False]
['text':' Using gui.formwin as geometry widget doesn't work as expected','line_number':3122,'multiline':False]
['text':' with GTK+ 2 -- dunno why.  Presumably all the resizing hacks','line_number':3123,'multiline':False]
['text':' in Vim confuse GTK+.  For GTK 3 the second argument should be NULL','line_number':3124,'multiline':False]
['text':' to make the width/height inc works, despite the docs saying','line_number':3125,'multiline':False]
['text':' something else.','line_number':3126,'multiline':False]
['text':' FEAT_GUI_DARKTHEME','line_number':3149,'multiline':False]
['text':'
 * This extra effort wouldn't be necessary if we only used stock icons in the
 * toolbar, as we do for all builtin icons.  But user-defined toolbar icons
 * shouldn't be treated differently, thus we do need this.
 ','line_number':3153,'multiline':True]
['text':' User-defined icons are stored in a GtkIconSet','line_number':3176,'multiline':False]
['text':' Let global user preferences decide the icon size.','line_number':3236,'multiline':False]
['text':' FEAT_TOOLBAR','line_number':3249,'multiline':False]
['text':' page clicked in tab line','line_number':3257,'multiline':False]
['text':'
 * Handle selecting an item in the tab line popup menu.
 ','line_number':3259,'multiline':True]
['text':' Add the string cmd into input buffer','line_number':3265,'multiline':False]
['text':'
 * Create a menu for the tab line.
 ','line_number':3286,'multiline':True]
['text':' Was this button press event ?','line_number':3305,'multiline':False]
['text':' When ignoring events return TRUE so that the selected page doesn't','line_number':3314,'multiline':False]
['text':' change.','line_number':3315,'multiline':False]
['text':' If the event was generated for 3rd button popup the menu.','line_number':3325,'multiline':False]
['text':' We handled the event.','line_number':3334,'multiline':False]
['text':' Click after all tabs moves to next tab page.  When "x" is','line_number':3341,'multiline':False]
['text':' small guess it's the left button.','line_number':3342,'multiline':False]
['text':' Middle mouse click on tabpage label closes that tab.','line_number':3349,'multiline':False]
['text':' We didn't handle the event.','line_number':3354,'multiline':False]
['text':'
 * Handle selecting one of the tabs.
 ','line_number':3358,'multiline':True]
['text':'
 * Handle reordering the tabs (using D&D).
 ','line_number':3373,'multiline':True]
['text':'
 * Show or hide the tabline.
 ','line_number':3393,'multiline':True]
['text':' Note: this may cause a resize event','line_number':3404,'multiline':False]
['text':'
 * Return TRUE when tabline is displayed.
 ','line_number':3414,'multiline':True]
['text':'
 * Update the labels of the tabline.
 ','line_number':3424,'multiline':True]
['text':' Add a label for each tab page.  They all contain the same text area.','line_number':3444,'multiline':False]
['text':' Add notebook page','line_number':3455,'multiline':False]
['text':' Remove any old labels.','line_number':3502,'multiline':False]
['text':' Make sure everything is in place before drawing text.','line_number':3509,'multiline':False]
['text':'
 * Set the current tab to "nr".  First tab is 1.
 ','line_number':3515,'multiline':True]
['text':' FEAT_GUI_TABLINE','line_number':3530,'multiline':False]
['text':'
 * Add selection targets for PRIMARY and CLIPBOARD selections.
 ','line_number':3532,'multiline':True]
['text':' OpenOffice tries to use TARGET_HTML and fails when we don't','line_number':3544,'multiline':False]
['text':' return something, instead of trying another target. Therefore only','line_number':3545,'multiline':False]
['text':' offer TARGET_HTML when it works.','line_number':3546,'multiline':False]
['text':'
 * Set up for receiving DND items.
 ','line_number':3563,'multiline':True]
['text':'
 * Initialize the GUI.	Create all the windows, set up all the callbacks etc.
 * Returns OK for success, FAIL when the GUI can't be started.
 ','line_number':3588,'multiline':True]
['text':' Initialize the GNOME libraries.	gnome_program_init()/gnome_init()','line_number':3598,'multiline':False]
['text':' exits on failure, but that's a non-issue because we already called','line_number':3599,'multiline':False]
['text':' gtk_init_check() in gui_mch_init_check().','line_number':3600,'multiline':False]
['text':' Make sure strtod() uses a decimal point, not a comma. Gnome','line_number':3609,'multiline':False]
['text':' init may change it.','line_number':3610,'multiline':False]
['text':' Set the human-readable application name','line_number':3620,'multiline':False]
['text':'
     * Force UTF-8 output no matter what the value of 'encoding' is.
     * did_set_string_option() in option.c prohibits changing 'termencoding'
     * to something else than UTF-8 if the GUI is in use.
     ','line_number':3623,'multiline':True]
['text':' FIXME: Need to install the classic icons and a gtkrc.classic file.','line_number':3634,'multiline':False]
['text':' The hard part is deciding install locations and the Makefile magic.','line_number':3635,'multiline':False]
['text':' Initialize values','line_number':3642,'multiline':False]
['text':' LINTED: avoid warning: conversion to 'unsigned long'','line_number':3651,'multiline':False]
['text':' LINTED: avoid warning: conversion to 'unsigned long'','line_number':3653,'multiline':False]
['text':' LINTED: avoid warning: conversion to 'unsigned long'','line_number':3655,'multiline':False]
['text':' Initialise atoms','line_number':3659,'multiline':False]
['text':' Set default foreground and background colors.','line_number':3663,'multiline':False]
['text':' Use GtkSocket from another app.','line_number':3671,'multiline':False]
['text':' Pretend we never wanted it if it failed (get own window)','line_number':3682,'multiline':False]
['text':' Use the GNOME save-yourself functionality now.','line_number':3694,'multiline':False]
['text':' Create the PangoContext used for drawing all text.','line_number':3705,'multiline':False]
['text':' A vertical box holds the menubar, toolbar and main text window.','line_number':3724,'multiline':False]
['text':' automagically restore menubar/toolbar placement','line_number':3736,'multiline':False]
['text':'
     * Create the menubar and handle
     ','line_number':3749,'multiline':True]
['text':' Avoid that GTK takes <F10> away from us.','line_number':3755,'multiline':False]
['text':' We don't want the menu to float.','line_number':3772,'multiline':False]
['text':' FEAT_GUI_GNOME','line_number':3779,'multiline':False]
['text':' Always show the menubar, otherwise <F10> doesn't work.  It may be','line_number':3781,'multiline':False]
['text':' disabled in gui_init() later.','line_number':3782,'multiline':False]
['text':' FEAT_MENU','line_number':3786,'multiline':False]
['text':'
     * Create the toolbar and handle
     ','line_number':3789,'multiline':True]
['text':' some aesthetics on the toolbar','line_number':3792,'multiline':False]
['text':' TODO: Add GTK+ 3 code here using GtkCssProvider if necessary.','line_number':3794,'multiline':False]
['text':' N.B.  Since the default value of GtkToolbar::button-relief is','line_number':3795,'multiline':False]
['text':' GTK_RELIEF_NONE, there's no need to specify that, probably.','line_number':3796,'multiline':False]
['text':' When the toolbar is floating it gets stuck.  So long as that isn't','line_number':3817,'multiline':False]
['text':' fixed let's disallow floating.','line_number':3818,'multiline':False]
['text':' FEAT_GUI_GNOME','line_number':3825,'multiline':False]
['text':' FEAT_TOOLBAR','line_number':3832,'multiline':False]
['text':'
     * Use a Notebook for the tab pages labels.  The labels are hidden by
     * default.
     ','line_number':3835,'multiline':True]
['text':' Add the first tab.','line_number':3857,'multiline':False]
['text':' Create a popup menu for the tab line and connect it.','line_number':3888,'multiline':False]
['text':' FEAT_GUI_TABLINE','line_number':3892,'multiline':False]
['text':' Determine which events we will filter.','line_number':3908,'multiline':False]
['text':' For GtkSockets, key-presses must go to the focus widget (drawarea)','line_number':3926,'multiline':False]
['text':' and not the window.','line_number':3927,'multiline':False]
['text':' Also forward key release events for the benefit of GTK+ 2 input','line_number':3933,'multiline':False]
['text':' modules.  Try CTRL-SHIFT-xdigits to enter a Unicode code point.','line_number':3934,'multiline':False]
['text':' make sure keyboard input can go to the drawarea','line_number':3966,'multiline':False]
['text':'
     * Set clipboard specific atoms
     ','line_number':3969,'multiline':True]
['text':'
     * Start out by adding the configured border width into the border offset.
     ','line_number':3977,'multiline':True]
['text':'
     * Only install these enter/leave callbacks when 'p' in 'guioptions'.
     * Only needed for some window managers.
     ','line_number':3992,'multiline':True]
['text':' Real windows can get focus ... GtkPlug, being a mere container can't,','line_number':4004,'multiline':False]
['text':' only its widgets.  Arguably, this could be common code and we do not','line_number':4005,'multiline':False]
['text':' use the window focus at all, but let's be safe.','line_number':4006,'multiline':False]
['text':' FEAT_GUI_TABLINE','line_number':4025,'multiline':False]
['text':'
     * Add selection handler functions.
     ','line_number':4037,'multiline':True]
['text':' Pretend we don't have input focus, we will get an event if we do.','line_number':4050,'multiline':False]
['text':' Handle changes to the "Xft/DPI" setting.','line_number':4053,'multiline':False]
['text':'
 * This is called from gui_start() after a fork() has been done.
 * We have to tell the session manager our new PID.
 ','line_number':4066,'multiline':True]
['text':' USE_GNOME_SESSION','line_number':4083,'multiline':False]
['text':' GTK_CHECK_VERSION(3,0,0)','line_number':4103,'multiline':False]
['text':'
 * Called when the foreground or background color has been changed.
 * This used to change the graphics contexts directly but we are
 * currently manipulating them where desired.
 ','line_number':4105,'multiline':True]
['text':' !GTK_CHECK_VERSION(3,22,2)','line_number':4140,'multiline':False]
['text':' !GTK_CHECK_VERSION(3,4,0)','line_number':4155,'multiline':False]
['text':' !GTK_CHECK_VERSION(3,22,2)','line_number':4160,'multiline':False]
['text':'
 * This signal informs us about the need to rearrange our sub-widgets.
 ','line_number':4164,'multiline':True]
['text':' Resize requests are made for gui.mainwin;','line_number':4174,'multiline':False]
['text':' get its dimensions for searching if this event','line_number':4175,'multiline':False]
['text':' is a response to a vim request.','line_number':4176,'multiline':False]
['text':' Look through history of recent vim resize requests.','line_number':4185,'multiline':False]
['text':' If this event matches:','line_number':4186,'multiline':False]
['text':'	    - "latest resize hist" We're caught up;','line_number':4187,'multiline':False]
['text':'		clear the history and process this event.','line_number':4188,'multiline':False]
['text':'		If history is, old to new, 100, 99, 100, 99. If this event is','line_number':4189,'multiline':False]
['text':'		99 for the stale, it is matched against the current. History','line_number':4190,'multiline':False]
['text':'		is cleared, we may bounce, but no worse than before.','line_number':4191,'multiline':False]
['text':'	    - "older/stale hist" If match an unused event in history,','line_number':4192,'multiline':False]
['text':'		then discard this event, and mark the matching event as used.','line_number':4193,'multiline':False]
['text':'	    - "no match" Figure it's a user resize event, clear history.','line_number':4194,'multiline':False]
['text':' NOTE: clear history is default, then all incoming events are processed','line_number':4195,'multiline':False]
['text':' discard stale event','line_number':4199,'multiline':False]
['text':' As of 3.22.2, GdkWindows have started distributing configure events to','line_number':4205,'multiline':False]
['text':' their "native" children (https://git.gnome.org/browse/gtk+/commit/?h=gtk-3-22&id=12579fe71b3b8f79eb9c1b80e429443bcc437dd0).','line_number':4206,'multiline':False]
['text':'','line_number':4207,'multiline':False]
['text':' As can be seen from the implementation of move_native_children() and','line_number':4208,'multiline':False]
['text':' configure_native_child() in gdkwindow.c, those functions actually','line_number':4209,'multiline':False]
['text':' propagate configure events to every child, failing to distinguish','line_number':4210,'multiline':False]
['text':' "native" one from non-native one.','line_number':4211,'multiline':False]
['text':'','line_number':4212,'multiline':False]
['text':' Naturally, configure events propagated to here like that are fallacious','line_number':4213,'multiline':False]
['text':' and, as a matter of fact, they trigger a geometric collapse of','line_number':4214,'multiline':False]
['text':' gui.formwin.','line_number':4215,'multiline':False]
['text':'','line_number':4216,'multiline':False]
['text':' To filter out such fallacious events, check if the given event is the','line_number':4217,'multiline':False]
['text':' one that was sent out to the right place. Ignore it if not.','line_number':4218,'multiline':False]
['text':'','line_number':4219,'multiline':False]
['text':' Follow-up','line_number':4220,'multiline':False]
['text':' After a few weeks later, the GdkWindow change mentioned above was','line_number':4221,'multiline':False]
['text':' reverted (https://git.gnome.org/browse/gtk+/commit/?h=gtk-3-22&id=f70039cb9603a02d2369fec4038abf40a1711155).','line_number':4222,'multiline':False]
['text':' The corresponding official release is 3.22.4.','line_number':4223,'multiline':False]
['text':' When in a GtkPlug, we can't guarantee valid heights (as a round','line_number':4228,'multiline':False]
['text':' no. of char-heights), so we have to manually sanitise them.','line_number':4229,'multiline':False]
['text':' Widths seem to sort themselves out, don't ask me why.','line_number':4230,'multiline':False]
['text':' sic.','line_number':4232,'multiline':False]
['text':'
 * Function called when window already closed.
 * We can't do much more here than to trying to preserve what had been done,
 * since the window is already inevitably going away.
 ','line_number':4241,'multiline':True]
['text':' Don't write messages to the GUI anymore','line_number':4249,'multiline':False]
['text':' only do anything if the destroy was unexpected','line_number':4255,'multiline':False]
['text':' x position of window if not initialized','line_number':4270,'multiline':False]
['text':' y position of window if not initialized','line_number':4271,'multiline':False]
['text':'
 * The screen size is used to make sure the initial window doesn't get bigger
 * than the screen.  This subtracts some room for menubar, toolbar and window
 * decorations.
 ','line_number':4312,'multiline':True]
['text':' Subtract 'guiheadroom' from the height to allow some room for the','line_number':4329,'multiline':False]
['text':' window manager (task list and window title bar).','line_number':4330,'multiline':False]
['text':'
     * FIXME: dirty trick: Because the gui_get_base_height() doesn't include
     * the toolbar and menubar for GTK, we subtract them from the screen
     * height, so that the window size can be made to fit on the screen.
     * This should be completely changed later.
     ','line_number':4333,'multiline':True]
['text':'
 * Bit of a hack to ensure we start GtkPlug windows with the correct window
 * hints (and thus the required size from -geom), but that after that we
 * put the hints back to normal (the actual minimum size) so we may
 * subsequently be resized smaller.  GtkSocket (the parent end) uses the
 * plug's window 'min hints to set *its* minimum size, but that's also the
 * only way we have of making ourselves bigger (by set lines/columns).
 * Thus set hints at start-up to ensure correct init. size, then a
 * second after the final attempt to reset the real minimum hints (done by
 * scrollbar init.), actually do the standard hints and stop the timer.
 * We'll not let the default hints be set while this timer's active.
 ','line_number':4350,'multiline':True]
['text':' Safe to use normal hints now','line_number':4367,'multiline':False]
['text':' stop timer','line_number':4370,'multiline':False]
['text':' Keep on trying','line_number':4373,'multiline':False]
['text':'
 * Open the GUI window which was created by a call to gui_mch_init().
 ','line_number':4378,'multiline':True]
['text':'
     * Allow setting a window role on the command line, or invent one
     * if none was specified.  This is mainly useful for GNOME session
     * support; allowing the WM to restore window placement.
     ','line_number':4389,'multiline':True]
['text':' Invent a unique-enough ID string for the role','line_number':4402,'multiline':False]
['text':' Determine user specified geometry, if present.','line_number':4415,'multiline':False]
['text':' From now until everyone's stopped trying to set the window hints','line_number':4460,'multiline':False]
['text':' to their correct minimum values, stop them being set as we need','line_number':4461,'multiline':False]
['text':' them to remain at our required size for the parent GtkSocket to','line_number':4462,'multiline':False]
['text':' give us the right initial size.','line_number':4463,'multiline':False]
['text':' For GTK2 changing the size of the form widget doesn't cause window','line_number':4474,'multiline':False]
['text':' resizing.','line_number':4475,'multiline':False]
['text':' Get the colors from the "Normal" and "Menu" group (set in syntax.c or','line_number':4501,'multiline':False]
['text':' in a vimrc file)','line_number':4502,'multiline':False]
['text':' Check that none of the colors are the same as the background color','line_number':4505,'multiline':False]
['text':' Get the colors for the highlight groups (gui_check_colors() might have','line_number':4508,'multiline':False]
['text':' changed them).','line_number':4509,'multiline':False]
['text':' re-init colors and fonts','line_number':4510,'multiline':False]
['text':'
     * Notify the fixed area about the need to resize the contents of the
     * gui.formwin, which we use for random positioning of the included
     * components.
     *
     * We connect this signal deferred finally after anything is in place,
     * since this is intended to handle resizements coming from the window
     * manager upon us and should not interfere with what VIM is requesting
     * upon startup.
     ','line_number':4515,'multiline':True]
['text':' Set up for receiving DND items.','line_number':4532,'multiline':False]
['text':' With GTK+ 2, we need to iconify the window before calling show()','line_number':4539,'multiline':False]
['text':' to avoid mapping the window for a short time.','line_number':4540,'multiline':False]
['text':'
	 * Urgh hackish :/  For some reason BonoboDockLayout always forces a
	 * show when restoring the saved layout configuration.	We can't just
	 * hide the widgets again after gtk_widget_show(gui.mainwin) since it's
	 * a toplevel window and thus will be realized immediately.  Instead,
	 * connect signal handlers to hide the widgets just after they've been
	 * marked visible, but before the main window is realized.
	 ','line_number':4550,'multiline':True]
['text':'
 * Clean up for when exiting Vim.
 ','line_number':4585,'multiline':True]
['text':' Clean up, unless we don't want to invoke free().','line_number':4591,'multiline':False]
['text':'
 * Get the position of the top left corner of the window.
 ','line_number':4596,'multiline':True]
['text':'
 * Set the position of the top left corner of the window to the given
 * coordinates.
 ','line_number':4606,'multiline':True]
['text':'
 * Idle handler to force resize.  Used by gui_mch_set_shellsize() to ensure
 * the shell size doesn't exceed the window size, i.e. if the window manager
 * ignored our size request.  Usually this happens if the window is maximized.
 *
 * FIXME: It'd be nice if we could find a little more orthodox solution.
 * See also the remark below in gui_mch_set_shellsize().
 *
 * DISABLED: When doing ":set lines+=1" this function would first invoke
 * gui_resize_shell() with the old size, then the normal callback would
 * report the new size through form_configure_event().  That caused the window
 * layout to be messed up.
 ','line_number':4619,'multiline':True]
['text':' don't call me again','line_number':4651,'multiline':False]
['text':' !GTK_CHECK_VERSION(3,0,0)','line_number':4654,'multiline':False]
['text':'
 * Return TRUE if the main window is maximized.
 ','line_number':4656,'multiline':True]
['text':'
 * Unmaximize the main window
 ','line_number':4667,'multiline':True]
['text':'
 * Called when the font changed while the window is maximized or GO_KEEPWINSIZE
 * is set.  Compute the new Rows and Columns.  This is like resizing the
 * window.
 ','line_number':4677,'multiline':True]
['text':'
 * Set the windows size.
 ','line_number':4693,'multiline':True]
['text':' give GTK+ a chance to put all widget's into place','line_number':4702,'multiline':False]
['text':' this will cause the proper resizement to happen too','line_number':4705,'multiline':False]
['text':' With GTK+ 2, changing the size of the form widget doesn't resize','line_number':4709,'multiline':False]
['text':' the window.  So let's do it the other way around and resize the','line_number':4710,'multiline':False]
['text':' main window instead.','line_number':4711,'multiline':False]
['text':' track the resize request','line_number':4716,'multiline':False]
['text':' !GTK_CHECK_VERSION(3,0,0)','line_number':4732,'multiline':False]
['text':'
     * Wait until all events are processed to prevent a crash because the
     * real size of the drawing area doesn't reflect Vim's internal ideas.
     *
     * This is a bit of a hack, since Vim is a terminal application with a GUI
     * on top, while the GUI expects to be the boss.
     ','line_number':4733,'multiline':True]
['text':' Do not disable the menu while starting up, otherwise F10 doesn't work.','line_number':4768,'multiline':False]
['text':' FEAT_MENU','line_number':4779,'multiline':False]
['text':' FEAT_TOOLBAR','line_number':4810,'multiline':False]
['text':'
 * Check if a given font is a CJK font. This is done in a very crude manner. It
 * just see if U+04E00 for zh and ja and U+AC00 for ko are covered in a given
 * font. Consequently, this function cannot  be used as a general purpose check
 * for CJK-ness for which fontconfig APIs should be used.  This is only used by
 * gui_mch_init_font() to deal with 'CJK fixed width fonts'.
 ','line_number':4812,'multiline':True]
['text':' Valgrind reports a leak for pango_language_from_string(), but the','line_number':4839,'multiline':False]
['text':' documentation says "This is owned by Pango and should not be freed".','line_number':4840,'multiline':False]
['text':'
 * Adjust gui.char_height (after 'linespace' was changed).
 ','line_number':4861,'multiline':True]
['text':' Round up when the value is more than about 1/16 of a pixel above a whole','line_number':4878,'multiline':False]
['text':' pixel (12.0624 becomes 12, 12.07 becomes 13).  Then add 'linespace'.','line_number':4879,'multiline':False]
['text':' LINTED: avoid warning: bitwise operation on signed value','line_number':4882,'multiline':False]
['text':' A not-positive value of char_height may crash Vim.  Only happens','line_number':4885,'multiline':False]
['text':' if 'linespace' is negative (which does make sense sometimes).','line_number':4886,'multiline':False]
['text':' Callback function used in gui_mch_font_dialog()','line_number':4894,'multiline':False]
['text':'
 * Put up a font dialog and return the selected font name in allocated memory.
 * "oldval" is the previous value.  Return NULL when cancelled.
 * This should probably go into gui_gtk.c.  Hmm.
 * FIXME:
 * The GTK2 font selection dialog has no filtering API.  So we could either
 * a) implement our own (possibly copying the code from somewhere else) or
 * b) just live with it.
 ','line_number':4904,'multiline':True]
['text':' Annoying bug in GTK (or Pango): if the font name does not include a','line_number':4939,'multiline':False]
['text':' size, zero is used.  Use default point size ten.','line_number':4940,'multiline':False]
['text':' Apparently some font names include a comma, need to escape','line_number':4990,'multiline':False]
['text':' that, because in 'guifont' it separates names.','line_number':4991,'multiline':False]
['text':'
 * Some monospace fonts don't support a bold weight, and fall back
 * silently to the regular weight.  But this is no good since our text
 * drawing function can emulate bold by overstriking.  So let's try
 * to detect whether bold weight is actually available and emulate it
 * otherwise.
 *
 * Note that we don't need to check for italic style since Xft can
 * emulate italic on its own, provided you have a proper fontconfig
 * setup.  We wouldn't be able to emulate it in Vim anyway.
 ','line_number':5010,'multiline':True]
['text':'
     * The comparison relies on the unique handle nature of a PangoFont*,
     * i.e. it's assumed that a different PangoFont* won't refer to the
     * same font.  Seems to work, and failing here isn't critical anyway.
     ','line_number':5039,'multiline':True]
['text':'
 * Create a map from ASCII characters in the range [32,126] to glyphs
 * of the current font.  This is used by gui_gtk2_draw_string() to skip
 * the itemize and shaping process for the most common case.
 ','line_number':5057,'multiline':True]
['text':' For safety, fill in question marks for the control characters.','line_number':5078,'multiline':False]
['text':' Put a space between characters to avoid shaping.','line_number':5079,'multiline':False]
['text':' play safe','line_number':5093,'multiline':False]
['text':' Remember the shape engine used for ASCII.','line_number':5101,'multiline':False]
['text':' TODO: is this type cast OK?','line_number':5124,'multiline':False]
['text':'
 * Initialize Vim to use the font or fontset with the given name.
 * Return FAIL if the font could not be loaded, OK otherwise.
 ','line_number':5130,'multiline':True]
['text':' If font_name is NULL, this means to use the default, which should','line_number':5141,'multiline':False]
['text':' be present on all proper Pango/fontconfig installations.','line_number':5142,'multiline':False]
['text':'
     * Set char_width to half the width obtained from pango_layout_get_size()
     * for CJK fixed_width/bi-width fonts.  An unpatched version of Xft leads
     * Pango to use the same width for both non-CJK characters (e.g. Latin
     * letters and numbers) and CJK characters.  This results in 's p a c e d
     * o u t' rendering when a CJK 'fixed width' font is used. To work around
     * that, divide the width returned by Pango by 2 if cjk_width is equal to
     * width for CJK fonts.
     *
     * For related bugs, see:
     * http://bugzilla.gnome.org/show_bug.cgi?id=106618
     * http://bugzilla.gnome.org/show_bug.cgi?id=106624
     *
     * With this, for all four of the following cases, Vim works fine:
     *	   guifont=CJK_fixed_width_font
     *	   guifont=Non_CJK_fixed_font
     *	   guifont=Non_CJK_fixed_font,CJK_Fixed_font
     *	   guifont=Non_CJK_fixed_font guifontwide=CJK_fixed_font
     ','line_number':5159,'multiline':True]
['text':' Measure the text extent of U+4E00 and U+4E8C','line_number':5182,'multiline':False]
['text':' Xft not patched','line_number':5186,'multiline':False]
['text':' A zero width may cause a crash.	Happens for semi-invalid fontsets.','line_number':5193,'multiline':False]
['text':' Set the fontname, which will be used for information purposes','line_number':5199,'multiline':False]
['text':' Avoid unnecessary overhead if 'guifontwide' is equal to 'guifont'.','line_number':5205,'multiline':False]
['text':' Update lines and columns in accordance with the new font, keep the','line_number':5215,'multiline':False]
['text':' window maximized.','line_number':5216,'multiline':False]
['text':' Preserve the logical dimensions of the screen.','line_number':5221,'multiline':False]
['text':'
 * Get a reference to the font "name".
 * Return zero for failure.
 ','line_number':5228,'multiline':True]
['text':' can't do this when GUI is not running','line_number':5237,'multiline':False]
['text':' pango_context_load_font() bails out if no font size is set','line_number':5261,'multiline':False]
['text':'
 * Return the name of font "font" in allocated memory.
 ','line_number':5287,'multiline':True]
['text':'
 * If a font is not going to be used, free its structure.
 ','line_number':5309,'multiline':True]
['text':'
 * Cmdline expansion for setting 'guifont' / 'guifontwide'. Will enumerate
 * through all fonts for completion. When setting 'guifont' it will only show
 * monospace fonts as it's unlikely other fonts would be useful.
 ','line_number':5319,'multiline':True]
['text':' If guifont is empty, and we want to fill in the orig value, suggest','line_number':5333,'multiline':False]
['text':' the default so the user can modify it.','line_number':5334,'multiline':False]
['text':'
 * Return the Pixel value (color) for the given color name.
 *
 * Return INVALCOLOR for error.
 ','line_number':5375,'multiline':True]
['text':' can't do this when GUI not running','line_number':5385,'multiline':False]
['text':'
 * Return the Pixel value (color) for the given RGB values.
 * Return INVALCOLOR for error.
 ','line_number':5404,'multiline':True]
['text':'
 * Set the current text foreground color.
 ','line_number':5428,'multiline':True]
['text':'
 * Set the current text background color.
 ','line_number':5441,'multiline':True]
['text':'
 * Set the current text special color.
 ','line_number':5454,'multiline':True]
['text':'
 * Function-like convenience macro for the sake of efficiency.
 ','line_number':5467,'multiline':True]
['text':' optimization shortcut','line_number':5495,'multiline':False]
['text':' glyph start index of next cluster','line_number':5516,'multiline':False]
['text':' string segment of current cluster','line_number':5517,'multiline':False]
['text':' real cluster width in Pango units','line_number':5518,'multiline':False]
['text':'
	 * If a certain combining mark had to be taken from a non-monospace
	 * font, we have to compensate manually by adapting x_offset according
	 * to the ink extents of the previous glyph.
	 ','line_number':5549,'multiline':True]
['text':'
 * If there are only combining characters in the cluster, we cannot just
 * change the width of the previous glyph since there is none.	Therefore
 * some guesswork is needed.
 *
 * If ink_rect.x is negative Pango apparently has taken care of the composing
 * by itself.  Actually setting x_offset = 0 should be sufficient then, but due
 * to problems with composing from different fonts we still need to fine-tune
 * x_offset to avoid ugliness.
 *
 * If ink_rect.x is not negative, force overstriking by pointing x_offset to
 * the position of the previous glyph.	Apparently this happens only with old
 * X fonts which don't provide the special combining information needed by
 * Pango.
 ','line_number':5568,'multiline':True]
['text':' If the accent width is smaller than the cluster width, position it','line_number':5606,'multiline':False]
['text':' in the middle.','line_number':5607,'multiline':False]
['text':' redraw the contents with an offset of 1 to emulate bold','line_number':5662,'multiline':False]
['text':'
 * Draw underline and undercurl at the bottom of the character cell.
 ','line_number':5682,'multiline':True]
['text':' Undercurl: draw curl at the bottom of the character cell.','line_number':5698,'multiline':False]
['text':' Draw a strikethrough line','line_number':5725,'multiline':False]
['text':' Underline: draw a line at the bottom of the character cell.','line_number':5746,'multiline':False]
['text':' When p_linespace is 0, overwrite the bottom row of pixels.','line_number':5749,'multiline':False]
['text':' Otherwise put the line just below the character.','line_number':5750,'multiline':False]
['text':' result of UTF-8 conversion','line_number':5773,'multiline':False]
['text':' return value needs to add up since we are','line_number':5778,'multiline':False]
['text':' printing substrings','line_number':5779,'multiline':False]
['text':' byte position in string','line_number':5780,'multiline':False]
['text':' current *s pointer','line_number':5781,'multiline':False]
['text':' look ahead, 0=ascii 1=unicode/ligatures','line_number':5782,'multiline':False]
['text':'
	 * Convert characters from 'encoding' to 'termencoding', which is set
	 * to UTF-8 by gui_mch_init().	did_set_string_option() in option.c
	 * prohibits changing this to something else than UTF-8 if the GUI is
	 * in use.
	 ','line_number':5794,'multiline':True]
['text':' Correct for differences in char width: some chars are','line_number':5804,'multiline':False]
['text':' double-wide in 'encoding' but single-wide in utf-8.  Add a space to','line_number':5805,'multiline':False]
['text':' compensate for that.','line_number':5806,'multiline':False]
['text':'
     * Ligature support and complex utf-8 char optimization:
     * String received to output to screen can print using pre-cached glyphs
     * (fast) or Pango (slow). Ligatures and multibype utf-8 must use Pango.
     * Since we receive mixed content string, split it into logical segments
     * that are guaranteed to go through glyphs as much as possible. Since
     * single ligature char prints as ascii, print it that way.
     ','line_number':5833,'multiline':True]
['text':' return value needs to add up since we are printing','line_number':5841,'multiline':False]
['text':' substrings','line_number':5842,'multiline':False]
['text':' First char decides starting needs_pango mode, 0=ascii 1=utf8/ligatures.','line_number':5845,'multiline':False]
['text':' Even if it is ligature char, two chars or more make ligature.','line_number':5846,'multiline':False]
['text':' Ascii followed by utf8 is also going through pango.','line_number':5847,'multiline':False]
['text':' split string into ascii and non-ascii (ligatures + utf-8) substrings,','line_number':5856,'multiline':False]
['text':' print glyphs or use Pango','line_number':5857,'multiline':False]
['text':' look ahead, single ligature char between ascii is ascii','line_number':5864,'multiline':False]
['text':' ascii followed by utf8 could be combining','line_number':5873,'multiline':False]
['text':' if so send it through pango','line_number':5874,'multiline':False]
['text':' mode switch','line_number':5878,'multiline':False]
['text':' ligature char by char','line_number':5884,'multiline':False]
['text':' is_utf8','line_number':5886,'multiline':False]
['text':' a continuation, find next 0xC0 != 0x80 but don't','line_number':5890,'multiline':False]
['text':' include it','line_number':5891,'multiline':False]
['text':' + one byte utf8','line_number':5900,'multiline':False]
['text':' + two bytes utf8','line_number':5905,'multiline':False]
['text':' + three bytes utf8','line_number':5910,'multiline':False]
['text':' this should not happen, try moving forward, Pango','line_number':5915,'multiline':False]
['text':' will catch it','line_number':5916,'multiline':False]
['text':' ascii','line_number':5923,'multiline':False]
['text':' temporarily zero terminate substring, print, restore char, wrap','line_number':5929,'multiline':False]
['text':' area for clip mask','line_number':5954,'multiline':False]
['text':' glyphs of current item','line_number':5955,'multiline':False]
['text':' column offset in cells','line_number':5956,'multiline':False]
['text':'
     * Restrict all drawing to the current screen line in order to prevent
     * fuzzy font lookups from messing up the screen.
     ','line_number':5962,'multiline':True]
['text':'
     * Optimization hack:  If possible, skip the itemize and shaping process
     * for pure ASCII strings.	This optimization is particularly effective
     * because Vim draws space characters to clear parts of the screen.
     ','line_number':5982,'multiline':True]
['text':' cells occupied by current cluster','line_number':6021,'multiline':False]
['text':' Safety check: pango crashes when invoked with invalid utf-8','line_number':6023,'multiline':False]
['text':' characters.','line_number':6024,'multiline':False]
['text':' original width of the current cluster','line_number':6031,'multiline':False]
['text':' right bearing of the last non-composing glyph','line_number':6034,'multiline':False]
['text':' If 'guifontwide' is set then use that for double-width characters.','line_number':6039,'multiline':False]
['text':' Otherwise just go with 'guifont' and let Pango do its thing.','line_number':6040,'multiline':False]
['text':'
	 * Break the text into segments with consistent directional level
	 * and shaping engine.	Pure Latin text needs only a single segment,
	 * so there's no need to worry about the loop's efficiency.  Better
	 * try to optimize elsewhere, e.g. reducing exposes and stuff :)
	 ','line_number':6050,'multiline':True]
['text':' item length in cells','line_number':6062,'multiline':False]
['text':'
	     * Increment the bidirectional embedding level by 1 if it is not
	     * even.  An odd number means the output will be RTL, but we don't
	     * want that since Vim handles right-to-left text on its own.  It
	     * would probably be sufficient to just set level = 0, but you can
	     * never know :)
	     *
	     * Unfortunately we can't take advantage of Pango's ability to
	     * render both LTR and RTL at the same time.  In order to support
	     * that, Vim's main screen engine would have to make use of Pango
	     * functionality.
	     ','line_number':6066,'multiline':True]
['text':' HACK: Overrule the shape engine, we don't want shaping to be','line_number':6080,'multiline':False]
['text':' done, because drawing the cursor would change the display.','line_number':6081,'multiline':False]
['text':'
	     * Fixed-width hack: iterate over the array and assign a fixed
	     * width to each glyph, thus overriding the choice made by the
	     * shaping engine.	We use utf_char2cells() to determine the
	     * number of cells needed.
	     *
	     * Also perform all kind of dark magic to get composing
	     * characters right (and pretty too of course).
	     ','line_number':6091,'multiline':True]
['text':' If there are only combining characters in the','line_number':6125,'multiline':False]
['text':' cluster, we cannot just change the width of the','line_number':6126,'multiline':False]
['text':' previous glyph since there is none.	Therefore','line_number':6127,'multiline':False]
['text':' some guesswork is needed.','line_number':6128,'multiline':False]
['text':' There is a previous glyph, so we deal with combining','line_number':6141,'multiline':False]
['text':' characters the canonical way.','line_number':6142,'multiline':False]
['text':' In some circumstances Pango uses a positive x_offset,','line_number':6143,'multiline':False]
['text':' then use the width of the previous glyph for this one','line_number':6144,'multiline':False]
['text':' and set the previous width to zero.','line_number':6145,'multiline':False]
['text':' Otherwise we get a negative x_offset, Pango has already','line_number':6146,'multiline':False]
['text':' positioned the combining char, keep the widths as they','line_number':6147,'multiline':False]
['text':' are.','line_number':6148,'multiline':False]
['text':' For both adjust the x_offset to position the glyph in','line_number':6149,'multiline':False]
['text':' the middle.','line_number':6150,'multiline':False]
['text':' i == 0 "cannot happen"','line_number':6161,'multiline':False]
['text':'// Aaaaand action! **','line_number':6167,'multiline':False]
['text':' Draw underline and undercurl.','line_number':6186,'multiline':False]
['text':'
 * Return OK if the key with the termcap name "name" is supported.
 ','line_number':6206,'multiline':True]
['text':'
 * Return the text window-id and display.  Only required for X-based GUI's
 ','line_number':6222,'multiline':True]
['text':' TODO Replace GdkGC with Cairo','line_number':6272,'multiline':False]
['text':'
     * Do a visual beep by changing back and forth in some undetermined way,
     * the foreground and background colors.  This is due to the fact that
     * there can't be really any prediction about the effects of XOR on
     * arbitrary X11 servers. However this seems to be enough for what we
     * intend it to do.
     ','line_number':6291,'multiline':True]
['text':' wait so many msec','line_number':6305,'multiline':False]
['text':'
 * Invert a rectangle from row r, column c, for nr rows and nc columns.
 ','line_number':6317,'multiline':True]
['text':' Give an implementation for older cairo versions if necessary.','line_number':6333,'multiline':False]
['text':'
 * Iconify the GUI window.
 ','line_number':6363,'multiline':True]
['text':'
 * Bring the Vim window to the foreground.
 ','line_number':6373,'multiline':True]
['text':' Just calling gtk_window_present() used to work in the past, but now this','line_number':6379,'multiline':False]
['text':' sequence appears to be needed:','line_number':6380,'multiline':False]
['text':' - Show the window on top of others.','line_number':6381,'multiline':False]
['text':' - Present the window (also shows it above others).','line_number':6382,'multiline':False]
['text':' - Do not the window on top of others (otherwise it would be stuck there).','line_number':6383,'multiline':False]
['text':'
 * Draw a cursor without focus.
 ','line_number':6393,'multiline':True]
['text':'
 * Draw part of a cursor, "w" pixels wide, and "h" pixels high, using
 * color "color".
 ','line_number':6438,'multiline':True]
['text':' vertical line should be on the right of current point','line_number':6460,'multiline':False]
['text':' !GTK_CHECK_VERSION(3,0,0)','line_number':6468,'multiline':False]
['text':' vertical line should be on the right of current point','line_number':6473,'multiline':False]
['text':' !GTK_CHECK_VERSION(3,0,0)','line_number':6479,'multiline':False]
['text':'
 * Catch up with any queued X11 events.  This may put keyboard input into the
 * input buffer, call resize call-backs, trigger timers etc.  If there is
 * nothing in the X11 event queue (& no timers pending), then we return
 * immediately.
 ','line_number':6483,'multiline':True]
['text':' Just inform the caller about the occurrence of it','line_number':6501,'multiline':False]
['text':' don't happen again','line_number':6504,'multiline':False]
['text':' Using an event handler for a channel that may be disconnected does','line_number':6511,'multiline':False]
['text':' not work, it hangs.  Instead poll for messages.','line_number':6512,'multiline':False]
['text':' repeat','line_number':6516,'multiline':False]
['text':'
 * GUI input routine called by gui_wait_for_chars().  Waits for a character
 * from the keyboard.
 *  wtime == -1     Wait forever.
 *  wtime == 0	    This should never happen.
 *  wtime > 0	    Wait wtime milliseconds for a character.
 * Returns OK if a character was found to be available within the given time,
 * or FAIL otherwise.
 ','line_number':6520,'multiline':True]
['text':' This timeout makes sure that we will return if no characters arrived in','line_number':6542,'multiline':False]
['text':' time. If "wtime" is zero just use one.','line_number':6543,'multiline':False]
['text':' If there is a channel with the keep_open flag we need to poll for input','line_number':6551,'multiline':False]
['text':' on them.','line_number':6552,'multiline':False]
['text':' Stop or start blinking when focus changes','line_number':6561,'multiline':False]
['text':' Need to recompute the waiting time.','line_number':6578,'multiline':False]
['text':'
	 * Loop in GTK+ processing  until a timeout or input occurs.
	 * Skip this if input is available anyway (can happen in rare
	 * situations, sort of race condition).
	 ','line_number':6583,'multiline':True]
['text':' Got char, return immediately','line_number':6591,'multiline':False]
['text':'
     * Flush all eventually pending (drawing) events.
     ','line_number':6599,'multiline':True]
['text':'///////////////////////////////////////////////////////////////////////////','line_number':6616,'multiline':False]
['text':' Output drawing routines.','line_number':6617,'multiline':False]
['text':'','line_number':6618,'multiline':False]
['text':' Flush any output to the screen','line_number':6621,'multiline':False]
['text':'
 * Clear a rectangular region of the screen from text pos (row1, col1) to
 * (row2, col2) inclusive.
 ','line_number':6633,'multiline':True]
['text':' Add one pixel to the far right column in case a double-stroked','line_number':6660,'multiline':False]
['text':' bold glyph may sit there.','line_number':6661,'multiline':False]
['text':' !GTK_CHECK_VERSION(3,0,0)','line_number':6685,'multiline':False]
['text':' Clear one extra pixel at the far right, for when bold characters have','line_number':6688,'multiline':False]
['text':' spilled over to the window border.','line_number':6689,'multiline':False]
['text':' !GTK_CHECK_VERSION(3,0,0)','line_number':6695,'multiline':False]
['text':'
 * Redraw any text revealed by scrolling up/down.
 ','line_number':6734,'multiline':True]
['text':' Avoid redrawing the cursor while scrolling or it'll end up where','line_number':6746,'multiline':False]
['text':' we don't want it to be.	I'm not sure if it's correct to call','line_number':6747,'multiline':False]
['text':' gui_dont_update_cursor() at this point but it works as a quick','line_number':6748,'multiline':False]
['text':' fix for now.','line_number':6749,'multiline':False]
['text':' Wait to check whether the scroll worked or not.','line_number':6754,'multiline':False]
['text':' received NoExpose event','line_number':6758,'multiline':False]
['text':' more events follow','line_number':6766,'multiline':False]
['text':' !GTK_CHECK_VERSION(3,0,0)','line_number':6770,'multiline':False]
['text':'
 * Delete the given number of lines from the given row, scrolling up any
 * text further down within the scroll region.
 ','line_number':6792,'multiline':True]
['text':' Can't see the window','line_number':6816,'multiline':False]
['text':' copy one extra pixel, for when bold has spilled over','line_number':6821,'multiline':False]
['text':' !GTK_CHECK_VERSION(3,0,0)','line_number':6835,'multiline':False]
['text':'
 * Insert the given number of lines before the given row, scrolling down any
 * following text within the scroll region.
 ','line_number':6838,'multiline':True]
['text':' Can't see the window','line_number':6862,'multiline':False]
['text':' copy one extra pixel, for when bold has spilled over','line_number':6867,'multiline':False]
['text':' !GTK_CHECK_VERSION(3,0,0)','line_number':6879,'multiline':False]
['text':'
 * X Selection stuff, for cutting and pasting text to other windows.
 ','line_number':6882,'multiline':True]
['text':' Hack: Wait up to three seconds for the selection.  A hang was','line_number':6903,'multiline':False]
['text':' noticed here when using the netrw plugin combined with ":gui"','line_number':6904,'multiline':False]
['text':' during the FocusGained event.','line_number':6905,'multiline':False]
['text':' wait for selection_received_cb','line_number':6908,'multiline':False]
['text':' Final fallback position - use the X CUT_BUFFER0 store','line_number':6914,'multiline':False]
['text':'
 * Disown the selection.
 ','line_number':6919,'multiline':True]
['text':'
 * Own the selection and return OK if it worked.
 ','line_number':6932,'multiline':True]
['text':'
 * Send the current selection to the clipboard.  Do nothing for X because we
 * will fill in the selection only when requested by another app.
 ','line_number':6946,'multiline':True]
['text':'
 * Make a menu item appear either active or not active (grey or not grey).
 ','line_number':6965,'multiline':True]
['text':' Be clever about bitfields versus true booleans here!','line_number':6978,'multiline':False]
['text':'
 * Make menu item hidden or not hidden.
 ','line_number':6986,'multiline':True]
['text':'
 * This is called after setting all the menus to grey/hidden or not.
 ','line_number':7013,'multiline':True]
['text':' just make sure that the visual changes get effect immediately','line_number':7019,'multiline':False]
['text':' FEAT_MENU','line_number':7022,'multiline':False]
['text':'
 * Scrollbar stuff.
 ','line_number':7024,'multiline':True]
['text':'
 * Return the RGB value of a pixel as long.
 ','line_number':7038,'multiline':True]
['text':'
 * Get current mouse coordinates in text window.
 ','line_number':7059,'multiline':True]
['text':' Sorry for the Xlib call, but we can't avoid it, since there is no','line_number':7071,'multiline':False]
['text':' internal GDK mechanism present to accomplish this.  (and for good','line_number':7072,'multiline':False]
['text':' reason...)','line_number':7073,'multiline':False]
['text':' The last set mouse pointer shape is remembered, to be used when it goes','line_number':7081,'multiline':False]
['text':' from hidden to not hidden.','line_number':7082,'multiline':False]
['text':'
 * Use the blank mouse pointer or not.
 *
 * hide: TRUE = use blank ptr, FALSE = use parent ptr
 ','line_number':7086,'multiline':True]
['text':' Table for shape IDs.  Keep in sync with the mshape_names[] table in','line_number':7114,'multiline':False]
['text':' misc2.c!','line_number':7115,'multiline':False]
['text':' arrow','line_number':7118,'multiline':False]
['text':' blank','line_number':7119,'multiline':False]
['text':' beam','line_number':7120,'multiline':False]
['text':' updown','line_number':7121,'multiline':False]
['text':' udsizing','line_number':7122,'multiline':False]
['text':' leftright','line_number':7123,'multiline':False]
['text':' lrsizing','line_number':7124,'multiline':False]
['text':' busy','line_number':7125,'multiline':False]
['text':' no','line_number':7126,'multiline':False]
['text':' crosshair','line_number':7127,'multiline':False]
['text':' hand1','line_number':7128,'multiline':False]
['text':' hand2','line_number':7129,'multiline':False]
['text':' pencil','line_number':7130,'multiline':False]
['text':' question','line_number':7131,'multiline':False]
['text':' right-arrow','line_number':7132,'multiline':False]
['text':' up-arrow','line_number':7133,'multiline':False]
['text':' last one','line_number':7134,'multiline':False]
['text':' they are always even (why?)','line_number':7157,'multiline':False]
['text':' Unref, actually.  Bloody GTK+ 1.','line_number':7169,'multiline':False]
['text':' FEAT_MOUSESHAPE','line_number':7175,'multiline':False]
['text':'
 * Signs are currently always 2 chars wide.  With GTK+ 2, the image will be
 * scaled down if the current font is not big enough, or scaled up if the image
 * size is less than 3/4 of the maximum sign size.  With GTK+ 1, the pixmap
 * will be cut off if the current font is not big enough, or centered if it's
 * too small.
 ','line_number':7179,'multiline':True]
['text':'
     * Decide whether we need to scale.  Allow one pixel of border
     * width to be cut off, in order to avoid excessive scaling for
     * tiny differences in font size.
     * Do scale to fit the height to avoid gaps because of linespacing.
     ','line_number':7209,'multiline':True]
['text':' Keep the original aspect ratio','line_number':7225,'multiline':False]
['text':' Change the aspect ratio by at most 15% to fill the','line_number':7232,'multiline':False]
['text':' available space completely.','line_number':7233,'multiline':False]
['text':' no change in dimensions; don't decrease reference counter','line_number':7242,'multiline':False]
['text':' (below)','line_number':7243,'multiline':False]
['text':' This doesn't seem to be worth caching, and doing so would','line_number':7248,'multiline':False]
['text':' complicate the code quite a bit.','line_number':7249,'multiline':False]
['text':' out of memory','line_number':7253,'multiline':False]
['text':' The origin is the upper-left corner of the pixmap.  Therefore','line_number':7257,'multiline':False]
['text':' these offset may become negative if the pixmap is smaller than','line_number':7258,'multiline':False]
['text':' the 2x1 cells reserved for the sign icon.','line_number':7259,'multiline':False]
['text':' !GTK_CHECK_VERSION(3,0,0)','line_number':7306,'multiline':False]
['text':' !GTK_CHECK_VERSION(3,0,0)','line_number':7329,'multiline':False]
['text':' The error message is already translated and will be more','line_number':7355,'multiline':False]
['text':' descriptive than anything we could possibly do ourselves.','line_number':7356,'multiline':False]
['text':' FEAT_SIGN_ICONS','line_number':7375,'multiline':False]
