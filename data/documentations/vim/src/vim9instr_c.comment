['text':' vi:set ts=8 sts=4 sw=4 noet:
 *
 * VIM - Vi IMproved	by Bram Moolenaar
 *
 * Do ":help uganda"  in Vim to read copying and usage conditions.
 * Do ":help credits" in Vim to see a list of people who contributed.
 * See README.txt for an overview of the Vim source code.
 ','line_number':1,'multiline':True]
['text':'
 * vim9instr.c: Dealing with instructions of a compiled function
 ','line_number':10,'multiline':True]
['text':' When not generating protos this is included in proto.h','line_number':19,'multiline':False]
['text':'///////////////////////////////////////////////////////////////////','line_number':25,'multiline':False]
['text':' Following generate_ functions expect the caller to call ga_grow().','line_number':26,'multiline':False]
['text':'
 * Generate an instruction without arguments.
 * Returns a pointer to the new instruction, NULL if failed.
 ','line_number':31,'multiline':True]
['text':'
 * Generate an instruction without arguments.
 * "drop" will be removed from the stack.
 * Returns a pointer to the new instruction, NULL if failed.
 ','line_number':52,'multiline':True]
['text':'
 * Generate instruction "isn_type" and put "type" on the type stack,
 * use "decl_type" for the declared type.
 ','line_number':65,'multiline':True]
['text':'
 * Generate instruction "isn_type" and put "type" on the type stack.
 * Uses "any" for the declared type, which works for constants.  For declared
 * variables use generate_instr_type2().
 ','line_number':88,'multiline':True]
['text':'
 * Generate an ISN_DEBUG instruction.
 ','line_number':99,'multiline':True]
['text':'
 * Generate an ISN_CONSTRUCT instruction.
 * The object will have "size" members.
 ','line_number':116,'multiline':True]
['text':'
 * Generate ISN_GET_OBJ_MEMBER - access member of object at bottom of stack by
 * index.
 ','line_number':134,'multiline':True]
['text':' drop the object type','line_number':143,'multiline':False]
['text':'
 * Generate ISN_GET_ITF_MEMBER - access member of interface at bottom of stack
 * by index.
 ','line_number':153,'multiline':True]
['text':' drop the object type','line_number':162,'multiline':False]
['text':'
 * Generate ISN_STORE_THIS - store value in member of "this" object with member
 * index "idx".
 ','line_number':173,'multiline':True]
['text':' drop the value type','line_number':182,'multiline':False]
['text':'
 * If type at "offset" isn't already VAR_STRING then generate ISN_2STRING.
 * But only for simple types.
 * When "tolerant" is TRUE convert most types to string, e.g. a List.
 ','line_number':191,'multiline':True]
['text':' nothing to be done','line_number':207,'multiline':False]
['text':' conversion possible','line_number':210,'multiline':False]
['text':' conversion possible (with runtime check)','line_number':217,'multiline':False]
['text':' conversion possible when tolerant','line_number':223,'multiline':False]
['text':' FALLTHROUGH','line_number':230,'multiline':False]
['text':' conversion not possible','line_number':232,'multiline':False]
['text':'
 * Generate instruction for "+".  For a list this creates a new list.
 ','line_number':274,'multiline':True]
['text':' When concatenating two lists with different member types the member type','line_number':309,'multiline':False]
['text':' becomes "any".','line_number':310,'multiline':False]
['text':'
 * Get the type to use for an instruction for an operation on "type1" and
 * "type2".  If they are matching use a type-specific instruction. Otherwise
 * fall back to runtime type checking.
 ','line_number':319,'multiline':True]
['text':'
 * Generate an instruction with two arguments.  The instruction depends on the
 * type of the arguments.
 ','line_number':336,'multiline':True]
['text':' Get the known type of the two items on the stack.','line_number':350,'multiline':False]
['text':' correct type of result','line_number':396,'multiline':False]
['text':' float+number and number+float results in float','line_number':401,'multiline':False]
['text':'
 * Get the instruction to use for comparing two values with specified types.
 * Either "tv1" and "tv2" are passed or "type1" and "type2".
 * Return ISN_DROP when failed.
 ','line_number':411,'multiline':True]
['text':' although comparing null with number, float or bool is not useful, we','line_number':467,'multiline':False]
['text':' allow it','line_number':468,'multiline':False]
['text':'
 * Generate an ISN_COMPARE* instruction with a boolean result.
 ','line_number':517,'multiline':True]
['text':' Get the known type of the two items on the stack.  If they are matching','line_number':529,'multiline':False]
['text':' use a type-specific instruction. Otherwise fall back to runtime type','line_number':530,'multiline':False]
['text':' checking.','line_number':531,'multiline':False]
['text':' takes two arguments, puts one bool back','line_number':542,'multiline':False]
['text':'
 * Generate an ISN_CONCAT instruction.
 * "count" is the number of stack elements to join together and it must be
 * greater or equal to one.
 * The caller ensures all the "count" elements on the stack have the right type.
 ','line_number':549,'multiline':True]
['text':' drop the argument types','line_number':567,'multiline':False]
['text':'
 * Generate an ISN_2BOOL instruction.
 * "offset" is the offset in the type stack.
 ','line_number':573,'multiline':True]
['text':' type becomes bool','line_number':588,'multiline':False]
['text':'
 * Generate an ISN_COND2BOOL instruction.
 ','line_number':594,'multiline':True]
['text':' type becomes bool','line_number':604,'multiline':False]
['text':' add TTFLAG_NUMBER_OK flag','line_number':614,'multiline':False]
['text':' always allocate, also for static types','line_number':627,'multiline':False]
['text':' type becomes expected','line_number':644,'multiline':False]
['text':'
 * Generate an ISN_PUSHOBJ instruction.  Object is always NULL.
 ','line_number':664,'multiline':True]
['text':'
 * Generate an ISN_PUSHCLASS instruction.  "class" can be NULL.
 ','line_number':676,'multiline':True]
['text':'
 * Generate a PUSH instruction for "tv".
 * "tv" will be consumed or cleared.
 ','line_number':693,'multiline':True]
['text':'
 * Generate an ISN_PUSHNR instruction.
 ','line_number':776,'multiline':True]
['text':' A 0 or 1 number can also be used as a bool.','line_number':790,'multiline':False]
['text':'
 * Generate an ISN_PUSHBOOL instruction.
 ','line_number':795,'multiline':True]
['text':'
 * Generate an ISN_PUSHSPEC instruction.
 ','line_number':811,'multiline':True]
['text':'
 * Generate an ISN_PUSHF instruction.
 ','line_number':828,'multiline':True]
['text':'
 * Generate an ISN_PUSHS instruction.
 * Consumes "*str".  When freed *str is set to NULL, unless "str" is NULL.
 * Note that if "str" is used in the instruction OK is returned and "*str" is
 * not set to NULL.
 ','line_number':844,'multiline':True]
['text':'
 * Generate an ISN_PUSHCHANNEL instruction.  Channel is always NULL.
 ','line_number':871,'multiline':True]
['text':'
 * Generate an ISN_PUSHJOB instruction.  Job is always NULL.
 ','line_number':888,'multiline':True]
['text':'
 * Generate an ISN_PUSHBLOB instruction.
 * Consumes "blob".
 ','line_number':905,'multiline':True]
['text':'
 * Generate an ISN_PUSHFUNC instruction with name "name".
 * When "may_prefix" is TRUE prefix "g:" unless "name" is script-local or
 * autoload.
 ','line_number':922,'multiline':True]
['text':' script-local','line_number':939,'multiline':False]
['text':' autoload','line_number':940,'multiline':False]
['text':'
 * Generate an ISN_AUTOLOAD instruction.
 ','line_number':956,'multiline':True]
['text':'
 * Generate an ISN_GETITEM instruction with "index".
 * "with_op" is TRUE for "+=" and other operators, the stack has the current
 * value below the list with values.
 * Caller must check the type is a list.
 ','line_number':973,'multiline':True]
['text':' add the item type to the type stack','line_number':994,'multiline':False]
['text':'
 * Generate an ISN_SLICE instruction with "count".
 ','line_number':998,'multiline':True]
['text':'
 * Generate an ISN_CHECKLEN instruction with "min_len".
 ','line_number':1013,'multiline':True]
['text':'
 * Generate an ISN_STORE instruction.
 ','line_number':1031,'multiline':True]
['text':'
 * Generate an ISN_LOAD_CLASSMEMBER ("load" == TRUE) or ISN_STORE_CLASSMEMBER
 * ("load" == FALSE) instruction.
 ','line_number':1050,'multiline':True]
['text':'
 * Generate an ISN_STOREOUTER instruction.
 ','line_number':1082,'multiline':True]
['text':' Store a variable defined in a loop.  A copy will be made at the end','line_number':1095,'multiline':False]
['text':' of the loop.  TODO: how about deeper nesting?','line_number':1096,'multiline':False]
['text':'
 * Generate an ISN_STORENR instruction (short for ISN_PUSHNR + ISN_STORE)
 ','line_number':1109,'multiline':True]
['text':'
 * Generate an ISN_STOREOPT or ISN_STOREFUNCOPT instruction
 ','line_number':1126,'multiline':True]
['text':'
 * Generate an ISN_LOAD or similar instruction.
 ','line_number':1147,'multiline':True]
['text':'
 * Generate an ISN_LOADOUTER instruction
 ','line_number':1171,'multiline':True]
['text':' Load a variable defined in a loop.  A copy will be made at the end','line_number':1190,'multiline':False]
['text':' of the loop.','line_number':1191,'multiline':False]
['text':'
 * Generate an ISN_LOADV instruction for v:var.
 ','line_number':1204,'multiline':True]
['text':'
 * Generate an ISN_UNLET instruction.
 ','line_number':1226,'multiline':True]
['text':'
 * Generate an ISN_LOCKCONST instruction.
 ','line_number':1243,'multiline':True]
['text':'
 * Generate an ISN_LOADS instruction.
 ','line_number':1255,'multiline':True]
['text':'
 * Generate an ISN_LOADSCRIPT or ISN_STORESCRIPT instruction.
 ','line_number':1281,'multiline':True]
['text':' This requires three arguments, which doesn't fit in an instruction, thus','line_number':1304,'multiline':False]
['text':' we need to allocate a struct for this.','line_number':1305,'multiline':False]
['text':'
 * Generate an ISN_NEWLIST instruction for "count" items.
 * "use_null" is TRUE for null_list.
 ','line_number':1317,'multiline':True]
['text':' Get the member type and the declared member type from all the items on','line_number':1334,'multiline':False]
['text':' the stack.','line_number':1335,'multiline':False]
['text':' drop the value types','line_number':1340,'multiline':False]
['text':' add the list type to the type stack','line_number':1343,'multiline':False]
['text':'
 * Generate an ISN_NEWDICT instruction.
 * "use_null" is TRUE for null_dict.
 ','line_number':1347,'multiline':True]
['text':' drop the key and value types','line_number':1368,'multiline':False]
['text':' add the dict type to the type stack','line_number':1371,'multiline':False]
['text':'
 * Generate an ISN_FUNCREF instruction.
 * For "obj.Method" "cl" is the class of the object (can be an interface or a
 * base class) and "fi" the index of the method on that class.
 * "isn_idx" is set to the index of the instruction, so that fr_dfunc_idx can
 * be set later.  The index is used instead of a pointer to the instruction
 * because the instruction memory can be reallocated.
 ','line_number':1375,'multiline':True]
['text':' save the index of the new instruction','line_number':1402,'multiline':False]
['text':' compile the function now, we need the uf_dfunc_idx value','line_number':1426,'multiline':False]
['text':' Reserve an extra variable to keep track of the number of closures','line_number':1431,'multiline':False]
['text':' created.','line_number':1432,'multiline':False]
['text':' If the referenced function is a closure, it may use items further up in','line_number':1435,'multiline':False]
['text':' the nested context, including this one.  But not a function defined at','line_number':1436,'multiline':False]
['text':' the script level.','line_number':1437,'multiline':False]
['text':'
 * Generate an ISN_NEWFUNC instruction.
 * "lambda_name" and "func_name" must be in allocated memory and will be
 * consumed.
 ','line_number':1446,'multiline':True]
['text':' Reserve an extra variable to keep track of the number of','line_number':1472,'multiline':False]
['text':' closures created.','line_number':1473,'multiline':False]
['text':'
 * Generate an ISN_DEF instruction: list functions
 ','line_number':1489,'multiline':True]
['text':'
 * Generate an ISN_JUMP instruction.
 ','line_number':1509,'multiline':True]
['text':'
 * Generate an ISN_WHILE instruction.  Similar to ISN_JUMP for :while
 ','line_number':1530,'multiline':True]
['text':' filled in later','line_number':1543,'multiline':False]
['text':'
 * Generate an ISN_JUMP_IF_ARG_SET or ISN_JUMP_IF_ARG_NOT_SET instruction.
 ','line_number':1551,'multiline':True]
['text':' jump_where is set later','line_number':1563,'multiline':False]
['text':' type doesn't matter, will be stored next','line_number':1577,'multiline':False]
['text':'
 * Generate an ISN_TRYCONT instruction.
 ','line_number':1597,'multiline':True]
['text':'
 * Check "argount" arguments and their types on the type stack.
 * Give an error and return FAIL if something is wrong.
 * When "method_call" is NULL no code is generated.
 ','line_number':1614,'multiline':True]
['text':' Check the types of the arguments.','line_number':1654,'multiline':False]
['text':'
 * Generate an ISN_BCALL instruction.
 * "method_call" is TRUE for "value->method()"
 * Return FAIL if the number of arguments is wrong.
 ','line_number':1680,'multiline':True]
['text':' Drop the argument types and push the return type.','line_number':1710,'multiline':False]
['text':' Check that map() didn't change the item types.','line_number':1719,'multiline':False]
['text':'
 * Generate an ISN_LISTAPPEND instruction.  Works like add().
 * Argument count is already checked.
 ','line_number':1725,'multiline':True]
['text':' Caller already checked that list_type is a list.','line_number':1736,'multiline':False]
['text':' For checking the item type we use the declared type of the list and the','line_number':1737,'multiline':False]
['text':' current type of the added item, adding a string to [1, 2] is OK.','line_number':1738,'multiline':False]
['text':' drop the argument','line_number':1750,'multiline':False]
['text':'
 * Generate an ISN_BLOBAPPEND instruction.  Works like add().
 * Argument count is already checked.
 ','line_number':1754,'multiline':True]
['text':' Caller already checked that blob_type is a blob, check it is modifiable.','line_number':1763,'multiline':False]
['text':' drop the argument','line_number':1774,'multiline':False]
['text':'
 * Generate an ISN_DCALL, ISN_UCALL or ISN_METHODCALL instruction.
 * When calling a method on an object, of which we know the interface only,
 * then "cl" is the interface and "mi" the method index on the interface.
 * Return FAIL if the number of arguments is wrong.
 ','line_number':1778,'multiline':True]
['text':' assume v:none used for default argument value','line_number':1825,'multiline':False]
['text':' possibly a lambda or "...: any"','line_number':1836,'multiline':False]
['text':' isn->isn_type == ISN_METHODCALL ','line_number':1864,'multiline':True]
['text':' A user function may be deleted and redefined later, can't use the','line_number':1881,'multiline':False]
['text':' ufunc pointer, need to look it up again at runtime.','line_number':1882,'multiline':False]
['text':' drop the argument types','line_number':1887,'multiline':False]
['text':' For an object or class method call, drop the object/class type.','line_number':1890,'multiline':False]
['text':' When a class method is called without the class name prefix, then','line_number':1893,'multiline':False]
['text':' the type will not be in the stack.','line_number':1894,'multiline':False]
['text':' add return type','line_number':1900,'multiline':False]
['text':'
 * Generate an ISN_UCALL instruction when the function isn't defined yet.
 ','line_number':1904,'multiline':True]
['text':' drop the argument types','line_number':1918,'multiline':False]
['text':' add return value','line_number':1921,'multiline':False]
['text':'
 * Check the arguments of function "type" against the types on the stack.
 * Returns OK or FAIL;
 ','line_number':1925,'multiline':True]
['text':'
 * Generate an ISN_PCALL instruction.
 * "type" is the type of the FuncRef.
 ','line_number':1986,'multiline':True]
['text':' return type not known yet, use a runtime check','line_number':2013,'multiline':False]
['text':' drop the arguments and the funcref/partial','line_number':2027,'multiline':False]
['text':' push the return value','line_number':2030,'multiline':False]
['text':' If partial is above the arguments it must be cleared and replaced with','line_number':2033,'multiline':False]
['text':' the return value.','line_number':2034,'multiline':False]
['text':'
 * Generate an ISN_DEFER instruction.
 ','line_number':2041,'multiline':True]
['text':'
 * Generate an ISN_STRINGMEMBER instruction.
 ','line_number':2057,'multiline':True]
['text':' check for dict type','line_number':2071,'multiline':False]
['text':' change dict type to dict member type','line_number':2083,'multiline':False]
['text':'
 * Generate an ISN_ECHO instruction.
 ','line_number':2094,'multiline':True]
['text':'
 * Generate an ISN_EXECUTE/ISN_ECHOMSG/ISN_ECHOERR instruction.
 ','line_number':2111,'multiline':True]
['text':'
 * Generate an ISN_ECHOWINDOW instruction
 ','line_number':2126,'multiline':True]
['text':'
 * Generate an ISN_SOURCE instruction.
 ','line_number':2141,'multiline':True]
['text':'
 * Generate an ISN_PUT instruction.
 ','line_number':2156,'multiline':True]
['text':'
 * Generate a LOCKUNLOCK instruction.The root item, where the indexing starts
 * to find the variable, is on the stack. The instr takes
 * - the string to parse, "root.b[idx1][idx2].d.val", to find the variable
 * - the class, if any, in which the string executes.
 * - if the root item is a function argument
 * A copy is made of "line".
 ','line_number':2172,'multiline':True]
['text':'
 * Generate an EXEC instruction that takes a string argument.
 * A copy is made of "line".
 ','line_number':2197,'multiline':True]
['text':'
 * Generate an EXEC instruction that takes a string argument.
 * "str" must be allocated, it is consumed.
 ','line_number':2213,'multiline':True]
['text':'
 * Generate ISN_RANGE.  Consumes "range".  Return OK/FAIL.
 ','line_number':2261,'multiline':True]
['text':'
 * Generate an instruction for any command modifiers.
 ','line_number':2289,'multiline':True]
['text':' filter program now belongs to the instruction','line_number':2307,'multiline':False]
['text':'
 * Generate a STORE instruction for "dest", not being "dest_local".
 * "lhs" might be NULL.
 * Return FAIL when out of memory.
 ','line_number':2323,'multiline':True]
['text':' include g: with the name, easier to execute that way','line_number':2347,'multiline':False]
['text':' include b: with the name, easier to execute that way','line_number':2351,'multiline':False]
['text':' include w: with the name, easier to execute that way','line_number':2354,'multiline':False]
['text':' include t: with the name, easier to execute that way','line_number':2357,'multiline':False]
['text':' "import autoload './dir/script.vim'" - load script','line_number':2379,'multiline':False]
['text':' first','line_number':2380,'multiline':False]
['text':' "s:" may be included in the name.','line_number':2386,'multiline':False]
['text':' cannot happen','line_number':2399,'multiline':False]
['text':'
 * Return TRUE when inside a "for" or "while" loop.
 ','line_number':2405,'multiline':True]
['text':' Optimization: turn "var = 123" from ISN_PUSHNR + ISN_STORE into','line_number':2438,'multiline':False]
['text':' ISN_STORENR.','line_number':2439,'multiline':False]
['text':' And "var = 0" does not need any instruction.','line_number':2440,'multiline':False]
['text':' zero is the default value, no need to do anything','line_number':2450,'multiline':False]
['text':'
 * Delete an instruction, free what it contains.
 ','line_number':2480,'multiline':True]
['text':' push blob isn_arg.blob','line_number':2560,'multiline':False]
['text':' nothing allocated','line_number':2786,'multiline':False]
['text':' defined(FEAT_EVAL)','line_number':2802,'multiline':False]
