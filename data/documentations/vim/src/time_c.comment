['text':' vi:set ts=8 sts=4 sw=4 noet:
 *
 * VIM - Vi IMproved	by Bram Moolenaar
 *
 * Do ":help uganda"  in Vim to read copying and usage conditions.
 * Do ":help credits" in Vim to see a list of people who contributed.
 * See README.txt for an overview of the Vim source code.
 ','line_number':1,'multiline':True]
['text':'
 * time.c: functions related to time and timers
 ','line_number':10,'multiline':True]
['text':'
 * Cache of the current timezone name as retrieved from TZ, or an empty string
 * where unset, up to 64 octets long including trailing null byte.
 ','line_number':16,'multiline':True]
['text':'
 * Call either localtime(3) or localtime_r(3) from POSIX libc time.h, with the
 * latter version preferred for reentrancy.
 *
 * If we use localtime_r(3) and we have tzset(3) available, check to see if the
 * environment variable TZ has changed since the last run, and call tzset(3) to
 * update the global timezone variables if it has.  This is because the POSIX
 * standard doesn't require localtime_r(3) implementations to do that as it
 * does with localtime(3), and we don't want to call tzset(3) every time.
 ','line_number':27,'multiline':True]
['text':' timestamp for local representation','line_number':39,'multiline':False]
['text':' pointer to caller return buffer','line_number':40,'multiline':False]
['text':' pointer for TZ environment var','line_number':44,'multiline':False]
['text':' HAVE_TZSET','line_number':54,'multiline':False]
['text':' HAVE_LOCALTIME_R','line_number':58,'multiline':False]
['text':'
 * Return the current time in seconds.  Calls time(), unless test_settime()
 * was used.
 ','line_number':61,'multiline':True]
['text':'
 * Replacement for ctime(), which is not safe to use.
 * Requires strftime(), otherwise returns "(unknown)".
 * If "thetime" is invalid returns "(invalid)".  Never returns NULL.
 * When "add_newline" is TRUE add a newline like ctime() does.
 * Uses a static buffer.
 ','line_number':75,'multiline':True]
['text':' hopefully enough for every language','line_number':85,'multiline':False]
['text':' MSVC returns NULL for an invalid value of seconds.','line_number':91,'multiline':False]
['text':' xgettext:no-c-format','line_number':96,'multiline':False]
['text':' Quoting "man strftime":','line_number':100,'multiline':False]
['text':' > If the length of the result string (including the terminating','line_number':101,'multiline':False]
['text':' > null byte) would exceed max bytes, then strftime() returns 0,','line_number':102,'multiline':False]
['text':' > and the contents of the array are undefined.','line_number':103,'multiline':False]
['text':' for time_t','line_number':133,'multiline':False]
['text':'
 * "localtime()" function
 ','line_number':136,'multiline':True]
['text':'
 * Convert a List to proftime_T.
 * Return FAIL when there is something wrong.
 ','line_number':146,'multiline':True]
['text':' FEAT_RELTIME','line_number':170,'multiline':False]
['text':'
 * "reltime()" function
 ','line_number':172,'multiline':True]
['text':' No arguments: get current time.','line_number':194,'multiline':False]
['text':' Two arguments: compute the difference.','line_number':209,'multiline':False]
['text':'
 * "reltimefloat()" function
 ','line_number':232,'multiline':True]
['text':'
 * "reltimestr()" function
 ','line_number':255,'multiline':True]
['text':'
 * "strftime({format}[, {time}])" function
 ','line_number':285,'multiline':True]
['text':' MSVC returns NULL for an invalid value of seconds.','line_number':309,'multiline':False]
['text':' Release conversion descriptors','line_number':349,'multiline':False]
['text':'
 * "strptime({format}, {timestring})" function
 ','line_number':357,'multiline':True]
['text':'
 * Return time left, in "msec", until "due".  Negative if past "due".
 ','line_number':400,'multiline':True]
['text':'
 * Insert a timer in the list of timers.
 ','line_number':422,'multiline':True]
['text':'
 * Take a timer out of the list of timers.
 ','line_number':436,'multiline':True]
['text':'
 * Create a timer and return it.  NULL if out of memory.
 * Caller should set the callback.
 ','line_number':457,'multiline':True]
['text':' Overflow!  Might cause duplicates...','line_number':470,'multiline':False]
['text':'
 * (Re)start a timer.
 ','line_number':482,'multiline':True]
['text':'
 * Invoke the callback of "timer".
 ','line_number':492,'multiline':True]
['text':'
 * Call timers that are due.
 * Return the time in msec until the next timer is due.
 * Returns -1 if there are no pending timers.
 ','line_number':524,'multiline':True]
['text':' Don't run any timers while exiting, dealing with an error or at the','line_number':541,'multiline':False]
['text':' debug prompt.','line_number':542,'multiline':False]
['text':' Save and restore a lot of flags, because the timer fires while','line_number':556,'multiline':False]
['text':' waiting for a character, which might be halfway a command.','line_number':557,'multiline':False]
['text':' Create a scope for running the timer callback, ignoring most of','line_number':571,'multiline':False]
['text':' the current scope, such as being inside a try/catch.','line_number':572,'multiline':False]
['text':' Invoke the callback.','line_number':582,'multiline':False]
['text':' Restore stuff.','line_number':587,'multiline':False]
['text':' Only fire the timer again if it repeats and stop_timer() wasn't','line_number':605,'multiline':False]
['text':' called while inside the callback (tr_id == -1).','line_number':606,'multiline':False]
['text':' Some terminal windows may need their buffer updated.','line_number':660,'multiline':False]
['text':'
 * Find a timer by ID.  Returns NULL if not found;
 ','line_number':667,'multiline':True]
['text':'
 * Stop a timer and delete it.
 ','line_number':685,'multiline':True]
['text':' Free the timer after the callback returns.','line_number':692,'multiline':False]
['text':'
 * Mark references in partials of timers.
 ','line_number':759,'multiline':True]
['text':'
 * Return TRUE if "timer" exists in the list of timers.
 ','line_number':786,'multiline':True]
['text':'
 * "timer_info([timer])" function
 ','line_number':815,'multiline':True]
['text':'
 * "timer_pause(timer, paused)" function
 ','line_number':839,'multiline':True]
['text':'
 * "timer_start(time, callback [, options])" function
 ','line_number':865,'multiline':True]
['text':' empty callback is not useful for a timer','line_number':902,'multiline':False]
['text':'
 * "timer_stop(timer)" function
 ','line_number':920,'multiline':True]
['text':'
 * "timer_stopall()" function
 ','line_number':936,'multiline':True]
['text':' FEAT_TIMERS','line_number':945,'multiline':False]
['text':'
 * Windows doesn't have gettimeofday(), although it does have struct timeval.
 ','line_number':951,'multiline':True]
['text':'
 * Save the previous time before doing something that could nest.
 * set "*tv_rel" to the time elapsed so far.
 ','line_number':964,'multiline':True]
['text':'
 * Compute the previous time after doing something that could nest.
 * Subtract "*tp" from prev_timeval;
 * Note: The arguments are (void *) to avoid trouble with systems that don't
 * have struct timeval.
 ','line_number':985,'multiline':True]
['text':' actually (struct timeval *)','line_number':993,'multiline':False]
['text':' only for do_source: start time; actually','line_number':1019,'multiline':False]
['text':' (struct timeval *)','line_number':1020,'multiline':False]
['text':' STARTUPTIME','line_number':1048,'multiline':False]
['text':' FEAT_EVAL','line_number':1049,'multiline':False]
['text':'
 * Read 8 bytes from "fd" and turn them into a time_T, MSB first.
 * Returns -1 when encountering EOF.
 ','line_number':1052,'multiline':True]
['text':'
 * Write time_T to file "fd" in 8 bytes.
 * Returns FAIL when the write failed.
 ','line_number':1072,'multiline':True]
['text':'
 * Write time_T to "buf[8]".
 ','line_number':1085,'multiline':True]
['text':' time_T can be up to 8 bytes in size, more than long_u, thus we','line_number':1096,'multiline':False]
['text':' can't use put_bytes() here.','line_number':1097,'multiline':False]
['text':' Another problem is that ">>" may do an arithmetic shift that keeps the','line_number':1098,'multiline':False]
['text':' sign.  This happens for large values of wtime.  A cast to long_u may','line_number':1099,'multiline':False]
['text':' truncate if time_T is 8 bytes.  So only use a cast when it is 4 bytes,','line_number':1100,'multiline':False]
['text':' it's safe to assume that long_u is 4 bytes or more and when using 8','line_number':1101,'multiline':False]
['text':' bytes the top bit won't be set.','line_number':1102,'multiline':False]
['text':' ">>" doesn't work well when shifting more bits than avail','line_number':1106,'multiline':False]
['text':'
 * Put timestamp "tt" in "buf[buflen]" in a nice format.
 ','line_number':1122,'multiline':True]
['text':' within 12 hours','line_number':1137,'multiline':False]
['text':' longer ago','line_number':1140,'multiline':False]
