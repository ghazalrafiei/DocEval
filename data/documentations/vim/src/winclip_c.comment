['text':' vi:set ts=8 sts=4 sw=4 noet:
 *
 * VIM - Vi IMproved by Bram Moolenaar
 *
 * Do ":help uganda"  in Vim to read copying and usage conditions.
 * Do ":help credits" in Vim to see a list of people who contributed.
 * See README.txt for an overview of the Vim source code.
 ','line_number':1,'multiline':True]
['text':'
 * winclip.c
 *
 * Routines for Win32 clipboard handling.
 * Also used by Cygwin, using os_unix.c.
 ','line_number':10,'multiline':True]
['text':'
 * Compile only the clipboard handling features when compiling for cygwin
 * posix environment.
 ','line_number':19,'multiline':True]
['text':'
 * When generating prototypes for Win32 on Unix, these lines make the syntax
 * errors disappear.  They do not need to be correct.
 ','line_number':29,'multiline':True]
['text':'
 * Convert an UTF-8 string to UTF-16.
 * "instr[inlen]" is the input.  "inlen" is in bytes.
 * When "outstr" is NULL only return the number of UTF-16 words produced.
 * Otherwise "outstr" must be a buffer of sufficient size.
 * Returns the number of UTF-16 words produced.
 ','line_number':45,'multiline':True]
['text':' Only convert if we have a complete sequence.','line_number':63,'multiline':False]
['text':' Return length of incomplete sequence.','line_number':67,'multiline':False]
['text':' non-BMP character, encoding with surrogate pairs','line_number':76,'multiline':False]
['text':'
 * Convert an UTF-16 string to UTF-8.
 * The input is "instr[inlen]" with "inlen" in number of UTF-16 words.
 * When "outstr" is NULL only return the required number of bytes.
 * Otherwise "outstr" must be a buffer of sufficient size.
 * Return the number of bytes produced.
 ','line_number':94,'multiline':True]
['text':' surrogate pairs handling','line_number':115,'multiline':False]
['text':'
 * Call MultiByteToWideChar() and allocate memory for the result.
 * Returns the result in "*out[*outlen]" with an extra zero appended.
 * "outlen" is in words.
 ','line_number':139,'multiline':True]
['text':' Add one word to avoid a zero-length alloc().','line_number':150,'multiline':False]
['text':'
 * Call WideCharToMultiByte() and allocate memory for the result.
 * Returns the result in "*out[*outlen]" with an extra NUL appended.
 ','line_number':159,'multiline':True]
['text':' Add one byte to avoid a zero-length alloc().','line_number':170,'multiline':False]
['text':'
 * Clipboard stuff, for cutting and pasting text to other windows.
 ','line_number':180,'multiline':True]
['text':'
     * Vim's own clipboard format recognises whether the text is char, line,
     * or rectangular block.  Only useful for copying between two Vims.
     * "Clipboard_T" was used for previous versions, using the first
     * character to specify MCHAR, MLINE or MBLOCK.
     ','line_number':189,'multiline':True]
['text':' Type used for the clipboard type of Vim's data.','line_number':199,'multiline':False]
['text':' MCHAR, MBLOCK or MLINE','line_number':202,'multiline':False]
['text':' length of CF_TEXT in bytes','line_number':203,'multiline':False]
['text':' length of CF_UNICODETEXT in words','line_number':204,'multiline':False]
['text':' length of clip_star.format_raw, including encoding,','line_number':205,'multiline':False]
['text':' excluding terminating NUL','line_number':206,'multiline':False]
['text':'
 * Make vim the owner of the current selection.  Return OK upon success.
 ','line_number':209,'multiline':True]
['text':'
     * Never actually own the clipboard.  If another application sets the
     * clipboard, we don't want to think that we still own it.
     ','line_number':215,'multiline':True]
['text':'
 * Make vim NOT the owner of the current selection.
 ','line_number':222,'multiline':True]
['text':' Nothing needs to be done here','line_number':228,'multiline':False]
['text':'
 * Copy "str[*size]" into allocated memory, changing CR-NL to NL.
 * Return the allocated result and the size in "*size".
 * Returns NULL when out of memory.
 ','line_number':231,'multiline':True]
['text':' Avoid allocating zero bytes, it generates an error message.','line_number':244,'multiline':False]
['text':'
 * Wait for another process to Close the Clipboard.
 * Returns TRUE for success.
 ','line_number':263,'multiline':True]
['text':' waited too long, give up','line_number':275,'multiline':False]
['text':' wait for 10, 20, 40, 80, etc. msec','line_number':277,'multiline':False]
['text':'
 * Get the current selection and put it in the clipboard register.
 *
 * NOTE: Must use GlobalLock/Unlock here to ensure Win32s compatibility.
 * On NT/W95 the clipboard data is a fixed global memory object and
 * so its handle = its pointer.
 * On Win32s, however, co-operation with the Win16 system means that
 * the clipboard data is moveable and its handle is not a pointer at all,
 * so we can't just cast the return value of GetClipboardData to (char_u*).
 * <VN>
 ','line_number':282,'multiline':True]
['text':'
     * Don't pass GetActiveWindow() as an argument to OpenClipboard() because
     * then we can't paste back into the same window for some reason - webb.
     ','line_number':305,'multiline':True]
['text':' Check for vim's own clipboard format first.  This only gets the type of','line_number':312,'multiline':False]
['text':' the data, still need to use CF_UNICODETEXT or CF_TEXT for the text.','line_number':313,'multiline':False]
['text':' We have metadata on the clipboard; try to get it.','line_number':319,'multiline':False]
['text':' The size of "VimClipType_t" changed, "rawlen" was added later.','line_number':323,'multiline':False]
['text':' Only copy what is available for backwards compatibility.','line_number':324,'multiline':False]
['text':' Check for Vim's raw clipboard format first.  This is used without','line_number':333,'multiline':False]
['text':' conversion, but only if 'encoding' matches.','line_number':334,'multiline':False]
['text':' We have raw data on the clipboard; try to get it.','line_number':338,'multiline':False]
['text':' Try to get the clipboard in Unicode if it's not an empty string.','line_number':359,'multiline':False]
['text':' Use the length of our metadata if possible, but limit it to','line_number':368,'multiline':False]
['text':' the GlobalSize() for safety.','line_number':369,'multiline':False]
['text':' Get the clipboard in the Active codepage.','line_number':388,'multiline':False]
['text':' The length is either what our metadata says or the strlen().','line_number':395,'multiline':False]
['text':' But limit it to the GlobalSize() for safety.','line_number':396,'multiline':False]
['text':' The text is in the active codepage.  Convert to','line_number':412,'multiline':False]
['text':' 'encoding', going through UTF-16.','line_number':413,'multiline':False]
['text':' If the type is not known detect it.','line_number':428,'multiline':False]
['text':' Translate <CR><NL> into <NL>.','line_number':432,'multiline':False]
['text':' unlock the global object','line_number':441,'multiline':False]
['text':'
 * Send the current selection to the clipboard.
 ','line_number':450,'multiline':True]
['text':' If the '*' register isn't already filled in, fill it in now','line_number':464,'multiline':False]
['text':' Get the text to be put on the clipboard, with CR-LF.','line_number':469,'multiline':False]
['text':' Always set the raw bytes: 'encoding', NUL and the text.  This is used','line_number':477,'multiline':False]
['text':' when copy/paste from/to Vim with the same 'encoding', so that illegal','line_number':478,'multiline':False]
['text':' bytes can also be copied and no conversion is needed.','line_number':479,'multiline':False]
['text':' Convert the text to UTF-16. This is put on the clipboard as','line_number':501,'multiline':False]
['text':' CF_UNICODETEXT.','line_number':502,'multiline':False]
['text':' Convert the text for CF_TEXT to Active codepage. Otherwise it's','line_number':508,'multiline':False]
['text':' p_enc, which has no relation to the Active codepage.','line_number':509,'multiline':False]
['text':' out of memory','line_number':517,'multiline':False]
['text':' Allocate memory for the UTF-16 text, add one NUL word to','line_number':522,'multiline':False]
['text':' terminate the string.','line_number':523,'multiline':False]
['text':' Allocate memory for the text, add one NUL byte to terminate the string.','line_number':538,'multiline':False]
['text':' Set up metadata:','line_number':550,'multiline':False]
['text':'
     * Open the clipboard, clear it and put our text on it.
     * Always set our Vim format.  Put Unicode and plain text on it.
     *
     * Don't pass GetActiveWindow() as an argument to OpenClipboard()
     * because then we can't paste back into the same window for some
     * reason - webb.
     ','line_number':561,'multiline':True]
['text':' Always use CF_TEXT.  On Win98 Notepad won't obtain the','line_number':580,'multiline':False]
['text':' CF_UNICODETEXT text, only CF_TEXT.','line_number':581,'multiline':False]
['text':' Free any allocations we didn't give to the clipboard:','line_number':589,'multiline':False]
['text':' FEAT_CLIPBOARD','line_number':600,'multiline':False]
['text':'
 * Note: the following two functions are only guaranteed to work when using
 * valid MS-Windows codepages or when iconv() is available.
 ','line_number':602,'multiline':True]
['text':'
 * Convert "str" from 'encoding' to UTF-16.
 * Input in "str" with length "*lenp".  When "lenp" is NULL, use strlen().
 * Output is returned as an allocated string.  "*lenp" is set to the length of
 * the result.  A trailing NUL is always added.
 * Returns NULL when out of memory.
 ','line_number':607,'multiline':True]
['text':' We can do any CP### -> UTF-16 in one pass, and we can do it','line_number':631,'multiline':False]
['text':' without iconv() (convert_* may need iconv).','line_number':632,'multiline':False]
['text':' Use "latin1" by default, we might be called before we have p_enc','line_number':638,'multiline':False]
['text':' set up.  Convert to utf-8 first, works better with iconv().  Does','line_number':639,'multiline':False]
['text':' nothing if 'encoding' is "utf-8".','line_number':640,'multiline':False]
['text':'
 * Convert an UTF-16 string to 'encoding'.
 * Input in "str" with length (counted in wide characters) "*lenp".  When
 * "lenp" is NULL, use wcslen().
 * Output is returned as an allocated string.  If "*lenp" is not NULL it is
 * set to the length of the result.
 * Returns NULL when out of memory.
 ','line_number':668,'multiline':True]
['text':' We can do any UTF-16 -> CP### in one pass.','line_number':691,'multiline':False]
['text':' Avoid allocating zero bytes, it generates an error message.','line_number':700,'multiline':False]
['text':' We might be called before we have p_enc set up.','line_number':706,'multiline':False]
['text':' p_enc is utf-8, so we're done.','line_number':712,'multiline':False]
['text':'
 * Convert from the active codepage to 'encoding'.
 * Input is "str[str_size]".
 * The result is in allocated memory: "out[outlen]".  "outlen" includes the
 * terminating NUL.
 ','line_number':727,'multiline':True]
['text':' Include the 0 after the string','line_number':747,'multiline':False]
['text':'
 * Convert from 'encoding' to the active codepage.
 * Input is "str[str_size]".
 * The result is in allocated memory: "out[outlen]".  With terminating NUL.
 ','line_number':752,'multiline':True]
