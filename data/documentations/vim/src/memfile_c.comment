['text':' vi:set ts=8 sts=4 sw=4 noet:
 *
 * VIM - Vi IMproved	by Bram Moolenaar
 *
 * Do ":help uganda"  in Vim to read copying and usage conditions.
 * Do ":help credits" in Vim to see a list of people who contributed.
 * See README.txt for an overview of the Vim source code.
 ','line_number':1,'multiline':True]
['text':'
 * memfile.c: Contains the functions for handling blocks of memory which can
 * be stored in a file. This is the implementation of a sort of virtual memory.
 *
 * A memfile consists of a sequence of blocks. The blocks numbered from 0
 * upwards have been assigned a place in the actual file. The block number
 * is equal to the page number in the file. The
 * blocks with negative numbers are currently in memory only. They can be
 * assigned a place in the file when too much memory is being used. At that
 * moment they get a new, positive, number. A list is used for translation of
 * negative to positive numbers.
 *
 * The size of a block is a multiple of a page size, normally the page size of
 * the device the file is on. Most blocks are 1 page long. A Block of multiple
 * pages is used for a line that does not fit in a single page.
 *
 * Each block can be in memory and/or in a file. The block stays in memory
 * as long as it is locked. If it is no longer locked it can be swapped out to
 * the file. It is only written to the file if it has been changed.
 *
 * Under normal operation the file is created when opening the memory file and
 * deleted when closing the memory file. Only with recovery an existing memory
 * file is opened.
 ','line_number':10,'multiline':True]
['text':'
 * Some systems have the page size in statfs.f_bsize, some in stat.st_blksize
 ','line_number':37,'multiline':True]
['text':'
 * for Amiga Dos 2.0x we use Flush
 ','line_number':52,'multiline':True]
['text':' this is in os_amiga.c','line_number':57,'multiline':False]
['text':' for chkufb()','line_number':60,'multiline':False]
['text':' default page size','line_number':64,'multiline':False]
['text':' total memory used for memfiles','line_number':66,'multiline':False]
['text':'
 * The functions for using a memfile:
 *
 * mf_open()	    open a new or existing memfile
 * mf_open_file()   open a swap file for an existing memfile
 * mf_close()	    close (and delete) a memfile
 * mf_new()	    create a new block in a memfile and lock it
 * mf_get()	    get an existing block and lock it
 * mf_put()	    unlock a block, may be marked for writing
 * mf_free()	    remove a block
 * mf_sync()	    sync changed parts of memfile to disk
 * mf_release_all() release as much memory as possible
 * mf_trans_del()   may translate negative to positive block number
 * mf_fullname()    make file name full path (use before first :cd)
 ','line_number':91,'multiline':True]
['text':'
 * Open an existing or new memory block file.
 *
 *  fname:	name of file to use (NULL means no file at all)
 *		Note: fname must have been allocated, it is not copied!
 *			If opening the file fails, fname is freed.
 *  flags:	flags for open() call
 *
 *  If fname != NULL and file cannot be opened, fail.
 *
 * return value: identifier for this memory block file.
 ','line_number':107,'multiline':True]
['text':' no file for this memfile, use memory only','line_number':132,'multiline':False]
['text':' try to open the file','line_number':140,'multiline':False]
['text':' if the file cannot be opened, return here','line_number':142,'multiline':False]
['text':' free list is empty','line_number':150,'multiline':False]
['text':' used list is empty','line_number':151,'multiline':False]
['text':'
     * Try to set the page size equal to the block size of the device.
     * Speeds up I/O a lot.
     * When recovering, the actual block size will be retrieved from block 0
     * in ml_recover().  The size used here may be wrong, therefore
     * mf_blocknr_max must be rounded up.
     ','line_number':163,'multiline':True]
['text':' no file or empty file','line_number':179,'multiline':False]
['text':'
     * Compute maximum number of pages ('maxmem' is in Kbyte):
     *	'mammem' * 1Kbyte / page-size-in-bytes.
     * Avoid overflow by first reducing page size as much as possible.
     ','line_number':187,'multiline':True]
['text':'
 * Open a file for an existing memfile.  Used when updatecount set from 0 to
 * some value.
 * If the file already exists, this fails.
 * "fname" is the name of file to use (NULL means no file at all)
 * Note: "fname" must have been allocated, it is not copied!  If opening the
 * file fails, "fname" is freed.
 *
 * return value: FAIL if file could not be opened, OK otherwise
 ','line_number':209,'multiline':True]
['text':' try to open the file','line_number':222,'multiline':False]
['text':'
 * Close a memory file and delete the associated file if 'del_file' is TRUE.
 ','line_number':231,'multiline':True]
['text':' safety check','line_number':239,'multiline':False]
['text':' free entries in used list','line_number':248,'multiline':False]
['text':' free entries in free list','line_number':255,'multiline':False]
['text':' free hashtable and its items','line_number':258,'multiline':False]
['text':'
 * Close the swap file for a memfile.  Used when 'swapfile' is reset.
 ','line_number':264,'multiline':True]
['text':' get all lines into memory?','line_number':270,'multiline':False]
['text':' nothing to close','line_number':276,'multiline':False]
['text':' get all blocks in memory by accessing all lines (clumsy!)','line_number':281,'multiline':False]
['text':' TODO: should check if all blocks are really in core','line_number':286,'multiline':False]
['text':' close the file','line_number':289,'multiline':False]
['text':' delete the swap file','line_number':295,'multiline':False]
['text':'
 * Set new size for a memfile.  Used when block 0 of a swapfile has been read
 * and the size it indicates differs from what was guessed.
 ','line_number':301,'multiline':True]
['text':' Correct the memory used for block 0 to the new size, because it will be','line_number':308,'multiline':False]
['text':' freed with that size later on.','line_number':309,'multiline':False]
['text':'
 * get a new block
 *
 *   negative: TRUE if negative block number desired (data block)
 ','line_number':314,'multiline':True]
['text':' new bhdr_T','line_number':322,'multiline':False]
['text':' first block in free list','line_number':323,'multiline':False]
['text':'
     * If we reached the maximum size for the used memory blocks, release one
     * If a bhdr_T is returned, use it and adjust the page_count if necessary.
     ','line_number':326,'multiline':True]
['text':'
 * Decide on the number to use:
 * If there is a free block, use its number.
 * Otherwise use mf_block_min for a negative number, mf_block_max for
 * a positive number.
 ','line_number':332,'multiline':True]
['text':'
	 * If the block in the free list has more pages, take only the number
	 * of pages needed and allocate a new bhdr_T with data
	 *
	 * If the number of pages matches and mf_release() did not return a
	 * bhdr_T, use the bhdr_T from the free list and allocate the data
	 *
	 * If the number of pages matches and mf_release() returned a bhdr_T,
	 * just use the number and free the bhdr_T from the free list
	 ','line_number':341,'multiline':True]
['text':' need to allocate memory for this block','line_number':359,'multiline':False]
['text':' use the number, remove entry from free list','line_number':366,'multiline':False]
['text':' get a new number','line_number':373,'multiline':False]
['text':' new block is always dirty','line_number':388,'multiline':False]
['text':'
     * Init the data to all zero, to avoid reading uninitialized data.
     * This also avoids that the passwd file ends up in the swap file!
     ','line_number':394,'multiline':True]
['text':'
 * Get existing block "nr" with "page_count" pages.
 *
 * Note: The caller should first check a negative nr with mf_trans_del()
 ','line_number':404,'multiline':True]
['text':' doesn't exist','line_number':413,'multiline':False]
['text':'
     * see if it is in the cache
     ','line_number':417,'multiline':True]
['text':' not in the hash list','line_number':421,'multiline':False]
['text':' can't be in the file','line_number':423,'multiline':False]
['text':' could check here if the block is in the free list','line_number':426,'multiline':False]
['text':'
	 * Check if we need to flush an existing block.
	 * If so, use that block.
	 * If not, allocate a new block.
	 ','line_number':428,'multiline':True]
['text':' cannot read the block!','line_number':442,'multiline':False]
['text':' remove from list, insert in front below','line_number':450,'multiline':False]
['text':' put in front of used list','line_number':455,'multiline':False]
['text':' put in front of hash list','line_number':456,'multiline':False]
['text':'
 * release the block *hp
 *
 *   dirty: Block must be written to file later
 *   infile: Block should be in file (needed for recovery)
 *
 *  no return value, function cannot fail
 ','line_number':461,'multiline':True]
['text':' may translate negative in positive nr','line_number':491,'multiline':False]
['text':'
 * block *hp is no longer in used, may put it in the free list of memfile *mfp
 ','line_number':494,'multiline':True]
['text':' free the memory','line_number':500,'multiline':False]
['text':' get *hp out of the hash list','line_number':501,'multiline':False]
['text':' get *hp out of the used list','line_number':502,'multiline':False]
['text':' don't want negative numbers in free list','line_number':505,'multiline':False]
['text':' put *hp in the free list','line_number':509,'multiline':False]
['text':'
 * Sync the memory file *mfp to disk.
 * Flags:
 *  MFS_ALL	If not given, blocks with negative numbers are not synced,
 *		even when they are dirty!
 *  MFS_STOP	Stop syncing when a character becomes available, but sync at
 *		least one block.
 *  MFS_FLUSH	Make sure buffers are flushed to disk, so they will survive a
 *		system crash.
 *  MFS_ZERO	Only write block 0.
 *
 * Return FAIL for failure, OK otherwise
 ','line_number':512,'multiline':True]
['text':' there is no file, nothing to do','line_number':534,'multiline':False]
['text':' Only a CTRL-C while writing will break us here, not one typed','line_number':539,'multiline':False]
['text':' previously.','line_number':540,'multiline':False]
['text':'
     * sync from last to first (may reduce the probability of an inconsistent
     * file) If a write fails, it is very likely caused by a full filesystem.
     * Then we only try to write blocks within the existing file. If that also
     * fails then we give up.
     ','line_number':543,'multiline':True]
['text':' double error: quit syncing','line_number':560,'multiline':False]
['text':' Stop when char available now.','line_number':566,'multiline':False]
['text':'
     * If the whole list is flushed, the memfile is not dirty anymore.
     * In case of an error this flag is also set, to avoid trying all the time.
     ','line_number':576,'multiline':True]
['text':'
	 * most Unixes have the very useful fsync() function, just what we need.
	 ','line_number':587,'multiline':True]
['text':' OpenNT is strictly POSIX (Benzinger)','line_number':597,'multiline':False]
['text':' Tandem/Himalaya NSK-OSS doesn't have sync()','line_number':598,'multiline':False]
['text':' No sync() on Stratus VOS','line_number':599,'multiline':False]
['text':'
	 * Flush() only exists for AmigaDos 2.0.
	 * For 1.3 it should be done with close() + open(), but then the risk
	 * is that the open() may fail and lose the file....
	 ','line_number':622,'multiline':True]
['text':' Have function (in libnix at least),','line_number':641,'multiline':False]
['text':' but ain't got no prototype anywhere.','line_number':642,'multiline':False]
['text':' assume Manx','line_number':654,'multiline':False]
['text':' AMIGA','line_number':659,'multiline':False]
['text':'
 * For all blocks in memory file *mfp that have a positive block number set
 * the dirty flag.  These are blocks that need to be written to a newly
 * created swapfile.
 ','line_number':667,'multiline':True]
['text':'
 * insert block *hp in front of hashlist of memfile *mfp
 ','line_number':683,'multiline':True]
['text':'
 * remove block *hp from hashlist of memfile list *mfp
 ','line_number':692,'multiline':True]
['text':'
 * look in hash lists of memfile *mfp for block header with number 'nr'
 ','line_number':701,'multiline':True]
['text':'
 * insert block *hp in front of used list of memfile *mfp
 ','line_number':710,'multiline':True]
['text':' list was empty, adjust last pointer','line_number':719,'multiline':False]
['text':'
 * remove block *hp from used list of memfile *mfp
 ','line_number':727,'multiline':True]
['text':' last block in used list','line_number':733,'multiline':False]
['text':' first block in used list','line_number':737,'multiline':False]
['text':'
 * Release the least recently used block from the used list if the number
 * of used memory blocks gets to big.
 *
 * Return the block header to the caller, including the memory block, so
 * it can be re-used. Make sure the page_count is right.
 *
 * Returns NULL if no block is released.
 ','line_number':745,'multiline':True]
['text':' don't release while in mf_close_file()','line_number':761,'multiline':False]
['text':'
     * Need to release a block if the number of blocks for this memfile is
     * higher than the maximum or total memory used is over 'maxmemtot'
     ','line_number':765,'multiline':True]
['text':'
     * Try to create a swap file if the amount of memory used is getting too
     * high.
     ','line_number':772,'multiline':True]
['text':' find for which buffer this memfile is','line_number':778,'multiline':False]
['text':'
     * don't release a block if
     *	there is no file for this memfile
     * or
     *	the number of blocks for this memfile is lower than the maximum
     *	  and
     *	total memory used is not up to 'maxmemtot'
     ','line_number':786,'multiline':True]
['text':' not a single one that can be released','line_number':800,'multiline':False]
['text':'
     * If the block is dirty, write it.
     * If the write fails we don't free it.
     ','line_number':803,'multiline':True]
['text':'
     * If a bhdr_T is returned, make sure that the page_count of bh_data is
     * right
     ','line_number':813,'multiline':True]
['text':'
 * release as many blocks as possible
 * Used in case of out of memory
 *
 * return TRUE if any memory was released
 ','line_number':832,'multiline':True]
['text':' If no swap file yet, may open one','line_number':851,'multiline':False]
['text':' only if there is a swapfile','line_number':855,'multiline':False]
['text':' re-start, list was changed','line_number':867,'multiline':False]
['text':'
 * Allocate a block header and a block of memory for it.
 ','line_number':879,'multiline':True]
['text':' not enough memory','line_number':892,'multiline':False]
['text':'
 * Free a block header and the block of memory for it.
 ','line_number':899,'multiline':True]
['text':'
 * Insert entry *hp in the free list.
 ','line_number':909,'multiline':True]
['text':'
 * remove the first entry from the free list and return a pointer to it
 * Note: caller must check that mfp->mf_free_first is not NULL!
 ','line_number':919,'multiline':True]
['text':'
 * read a block from disk
 *
 * Return FAIL for failure, OK otherwise
 ','line_number':933,'multiline':True]
['text':' there is no file, can't read','line_number':945,'multiline':False]
['text':' Decrypt if 'key' is set and this is a data block. And when changing the','line_number':963,'multiline':False]
['text':' key.','line_number':964,'multiline':False]
['text':'
 * write a block to disk
 *
 * Return FAIL for failure, OK otherwise
 ','line_number':972,'multiline':True]
['text':' offset in the file','line_number':980,'multiline':False]
['text':' block nr which is being written','line_number':981,'multiline':False]
['text':' number of bytes in a page','line_number':983,'multiline':False]
['text':' number of pages written','line_number':984,'multiline':False]
['text':' number of bytes written','line_number':985,'multiline':False]
['text':' there is no file and there was no file, can't write','line_number':988,'multiline':False]
['text':' must assign file block number','line_number':991,'multiline':False]
['text':'
     * We don't want gaps in the file. Write the blocks in front of *hp
     * to extend the file.
     * If block 'mf_infile_count' is not in the hash list, it has been
     * freed. Fill the space in the file with data from the current block.
     ','line_number':997,'multiline':True]
['text':' beyond end of file','line_number':1008,'multiline':False]
['text':' NULL caught below','line_number':1011,'multiline':False]
['text':' freed block, fill with dummy data','line_number':1017,'multiline':False]
['text':' If the swap file is on a network drive, and the network','line_number':1039,'multiline':False]
['text':' gets disconnected and then re-connected, we can maybe fix it','line_number':1040,'multiline':False]
['text':' by closing and then re-opening the file.','line_number':1041,'multiline':False]
['text':' Avoid repeating the error message, this mostly happens when','line_number':1049,'multiline':False]
['text':' the disk is full. We give the message again only after a','line_number':1050,'multiline':False]
['text':' successful write or when hitting a key. We keep on trying,','line_number':1051,'multiline':False]
['text':' in case some space becomes available.','line_number':1052,'multiline':False]
['text':' written a non-dummy block','line_number':1061,'multiline':False]
['text':' appended to the file','line_number':1063,'multiline':False]
['text':' written the desired block','line_number':1066,'multiline':False]
['text':'
 * Write block "hp" with data size "size" to file "mfp->mf_fd".
 * Takes care of encryption.
 * Return FAIL or OK.
 ','line_number':1072,'multiline':True]
['text':' Encrypt if 'key' is set and this is a data block.','line_number':1088,'multiline':False]
['text':'
 * Make block number for *hp positive and add it to the translation list
 *
 * Return FAIL for failure, OK otherwise
 ','line_number':1108,'multiline':True]
['text':' it's already positive','line_number':1121,'multiline':False]
['text':'
 * Get a new number for the block.
 * If the first item in the free list has sufficient pages, use its number
 * Otherwise use mf_blocknr_max.
 ','line_number':1127,'multiline':True]
['text':'
	 * If the page count of the free block was larger, reduce it.
	 * If the page count matches, remove the block from the free list
	 ','line_number':1137,'multiline':True]
['text':' adjust number','line_number':1158,'multiline':False]
['text':' remove from old hash list','line_number':1161,'multiline':False]
['text':' insert in new hash list','line_number':1163,'multiline':False]
['text':' Insert "np" into "mf_trans" hashtable with key "np->nt_old_bnum"','line_number':1165,'multiline':False]
['text':'
 * Lookup a translation from the trans lists and delete the entry.
 *
 * Return the positive new number when found, the old number when not found
 ','line_number':1171,'multiline':True]
['text':' not found','line_number':1184,'multiline':False]
['text':' remove entry from the trans list','line_number':1190,'multiline':False]
['text':'
 * Set mfp->mf_ffname according to mfp->mf_fname and some other things.
 * Only called when creating or renaming the swapfile.	Either way it's a new
 * name so we must work out the full path name.
 ','line_number':1198,'multiline':True]
['text':'
 * Make the name of the file used for the memfile a full path.
 * Used before doing a :cd
 ','line_number':1209,'multiline':True]
['text':'
 * return TRUE if there are any translations pending for 'mfp'
 ','line_number':1224,'multiline':True]
['text':'
 * Open a swap file for a memfile.
 * The "fname" must be in allocated memory, and is consumed (also when an
 * error occurs).
 ','line_number':1233,'multiline':True]
['text':' flags for open()','line_number':1242,'multiline':False]
['text':'
     * Get the full path name before the open, because this is
     * not possible after the open on the Amiga.
     * fname cannot be NameBuff, because it must have been allocated.
     ','line_number':1250,'multiline':True]
['text':'
     * A ":!cd e:xxx" may change the directory without us knowing, use the
     * full pathname always.  Careful: This frees fname!
     ','line_number':1257,'multiline':True]
['text':'
     * Extra security check: When creating a swap file it really shouldn't
     * exist yet.  If there is a symbolic link, this is most likely an attack.
     ','line_number':1265,'multiline':True]
['text':'
	 * try to open the file
	 ','line_number':1277,'multiline':True]
['text':' Prevent handle inheritance that cause problems with Cscope','line_number':1282,'multiline':False]
['text':' (swap file may not be deleted if cscope connection was open after','line_number':1283,'multiline':False]
['text':' the file)','line_number':1284,'multiline':False]
['text':'
     * If the file cannot be opened, use memory only
     ','line_number':1291,'multiline':True]
['text':' try setting the 'hidden' flag','line_number':1309,'multiline':False]
['text':'
 * Implementation of mf_hashtab_T follows.
 ','line_number':1313,'multiline':True]
['text':'
 * The number of buckets in the hashtable is increased by a factor of
 * MHT_GROWTH_FACTOR when the average number of items per bucket
 * exceeds 2 ^ MHT_LOG_LOAD_FACTOR.
 ','line_number':1317,'multiline':True]
['text':' must be a power of two','line_number':1323,'multiline':False]
['text':'
 * Initialize an empty hash table.
 ','line_number':1325,'multiline':True]
['text':'
 * Free the array of a hash table.  Does not free the items it contains!
 * The hash table must not be used again without another mf_hash_init() call.
 ','line_number':1336,'multiline':True]
['text':'
 * Free the array of a hash table and all the items it contains.
 ','line_number':1347,'multiline':True]
['text':'
 * Find "key" in hashtable "mht".
 * Returns a pointer to a mf_hashitem_T or NULL if the item was not found.
 ','line_number':1367,'multiline':True]
['text':'
 * Add item "mhi" to hashtable "mht".
 * "mhi" must not be NULL.
 ','line_number':1383,'multiline':True]
['text':'
     * Grow hashtable when we have more thank 2^MHT_LOG_LOAD_FACTOR
     * items per bucket on average
     ','line_number':1401,'multiline':True]
['text':' stop trying to grow after first failure to allocate memory','line_number':1410,'multiline':False]
['text':'
 * Remove item "mhi" from hashtable "mht".
 * "mhi" must not be NULL and must have been inserted into "mht".
 ','line_number':1416,'multiline':True]
['text':' We could shrink the table here, but it typically takes little memory,','line_number':1433,'multiline':False]
['text':' so why bother?','line_number':1434,'multiline':False]
['text':'
 * Increase number of buckets in the hashtable by MHT_GROWTH_FACTOR and
 * rehash items.
 * Returns FAIL when out of memory.
 ','line_number':1437,'multiline':True]
['text':'
	 * Traverse the items in the i-th original bucket and move them into
	 * MHT_GROWTH_FACTOR new buckets, preserving their relative order
	 * within each new bucket.  Preserving the order is important because
	 * mf_get() tries to keep most recently used items at the front of
	 * each bucket.
	 *
	 * Here we strongly rely on the fact the hashes are computed modulo
	 * a power of two.
	 ','line_number':1463,'multiline':True]
