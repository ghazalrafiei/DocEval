['text':' vi:set ts=8 sts=4 sw=4 noet:
 *
 * VIM - Vi IMproved	by Bram Moolenaar
 *
 * Do ":help uganda"  in Vim to read copying and usage conditions.
 * Do ":help credits" in Vim to see a list of people who contributed.
 * See README.txt for an overview of the Vim source code.
 ','line_number':1,'multiline':True]
['text':'
 * vim9type.c: handling of types
 ','line_number':10,'multiline':True]
['text':' When not generating protos this is included in proto.h','line_number':23,'multiline':False]
['text':'
 * Allocate memory for a type_T and add the pointer to type_gap, so that it can
 * be easily freed later.
 ','line_number':28,'multiline':True]
['text':'
 * Make a shallow copy of "type".
 * When allocation fails returns "type".
 ','line_number':48,'multiline':True]
['text':'
 * Inner part of copy_type_deep().
 * When allocation fails returns "type".
 ','line_number':70,'multiline':True]
['text':' seen this type before, return the copy we made','line_number':79,'multiline':False]
['text':'
 * Make a deep copy of "type".
 * When allocation fails returns "type".
 ','line_number':100,'multiline':True]
['text':' stores type pairs : a type we have seen and the copy used','line_number':108,'multiline':False]
['text':' func_type pointing to the uf_type_list, so reset pointer','line_number':130,'multiline':False]
['text':'
 * Take a type that is using entries in a growarray and turn it into a type
 * with allocated entries.
 ','line_number':138,'multiline':True]
['text':' A fixed type never contains allocated types, return as-is.','line_number':150,'multiline':False]
['text':'
 * Free a type that was created with alloc_type().
 ','line_number':175,'multiline':True]
['text':'
 * Return TRUE if "type" is to be recursed into for setting the type.
 ','line_number':197,'multiline':True]
['text':'
 * Set the type of "tv" to "type" if it is a list or dict.
 ','line_number':211,'multiline':True]
['text':' If the variable type is "any", then keep the value type.','line_number':218,'multiline':False]
['text':' e.g.  var x: any = [1, 2] or var y: any = {v: 1}','line_number':219,'multiline':False]
['text':' recognize commonly used types','line_number':271,'multiline':False]
['text':' Not a common type, create a new entry.','line_number':284,'multiline':False]
['text':' recognize commonly used types','line_number':300,'multiline':False]
['text':' Not a common type, create a new entry.','line_number':313,'multiline':False]
['text':'
 * Allocate a new type for a function.
 ','line_number':324,'multiline':True]
['text':'
 * Get a function type, based on the return type "ret_type".
 * "argcount" must be -1 or 0, a predefined type can be used.
 ','line_number':341,'multiline':True]
['text':' recognize commonly used types','line_number':348,'multiline':False]
['text':' (argcount == 0) is not possible','line_number':351,'multiline':False]
['text':'
 * For a function type, reserve space for "argcount" argument types (including
 * vararg).
 ','line_number':386,'multiline':True]
['text':' To make it easy to free the space needed for the argument types, add the','line_number':396,'multiline':False]
['text':' pointer to type_gap.','line_number':397,'multiline':False]
['text':'
 * Return TRUE if "type" is NULL, any or unknown.
 * This also works for const (comparing with &t_any and &t_unknown doesn't).
 ','line_number':409,'multiline':True]
['text':'
 * Get a type_T for a typval_T.
 * "type_gap" is used to temporarily create types in.
 * When "flags" has TVTT_DO_MEMBER also get the member type, otherwise use
 * "any".
 * When "flags" has TVTT_MORE_SPECIFIC get the more specific member type if it
 * is "any".
 ','line_number':420,'multiline':True]
['text':' An empty list has type list<unknown>, unless the type was specified','line_number':466,'multiline':False]
['text':' and is not list<any>.  This matters when assigning to a variable','line_number':467,'multiline':False]
['text':' with a specific list type.','line_number':468,'multiline':False]
['text':' If the type is list<any> go through the members, it may end up a','line_number':474,'multiline':False]
['text':' more specific type.','line_number':475,'multiline':False]
['text':' make a copy, lv_type may be freed if the list is freed','line_number':479,'multiline':False]
['text':' avoid recursion','line_number':484,'multiline':False]
['text':' Use the common type of all members.','line_number':488,'multiline':False]
['text':' If the type is dict<any> go through the members, it may end up a','line_number':508,'multiline':False]
['text':' more specific type.','line_number':509,'multiline':False]
['text':' avoid recursion','line_number':515,'multiline':False]
['text':' Use the common type of all values.','line_number':519,'multiline':False]
['text':' unused','line_number':551,'multiline':False]
['text':' May need to get the argument types from default values by','line_number':562,'multiline':False]
['text':' compiling the function.','line_number':563,'multiline':False]
['text':'
 * Return TRUE if "tv" is not a bool but should be converted to bool.
 ','line_number':621,'multiline':True]
['text':'
 * Get a type_T for a typval_T.
 * "type_list" is used to temporarily create types in.
 * When "flags" has TVTT_DO_MEMBER also get the member type, otherwise use
 * "any".
 * When "flags" has TVTT_MORE_SPECIFIC get the most specific member type.
 ','line_number':632,'multiline':True]
['text':' Number 0 and 1 and expression with "&&" or "||" can also be used','line_number':649,'multiline':False]
['text':' for bool.','line_number':650,'multiline':False]
['text':' A number can also be used for float.','line_number':653,'multiline':False]
['text':'
 * Return TRUE if "type" can be used for a variable declaration.
 * Give an error and return FALSE if not.
 ','line_number':658,'multiline':True]
['text':' null, none','line_number':665,'multiline':False]
['text':'
 * Get a type_T for a typval_T, used for v: variables.
 * "type_list" is used to temporarily create types in.
 ','line_number':677,'multiline':True]
['text':' e.g. for v:oldfiles','line_number':684,'multiline':False]
['text':' e.g. for v:event','line_number':686,'multiline':False]
['text':'
 * Return FAIL if "expected" and "actual" don't match.
 * When "argidx" > 0 it is included in the error message.
 ','line_number':709,'multiline':True]
['text':' didn't expect anything.','line_number':721,'multiline':False]
['text':'','line_number':722,'multiline':False]
['text':' A null_function and null_partial are special cases, they can be used to','line_number':725,'multiline':False]
['text':' clear a variable.','line_number':726,'multiline':False]
['text':' When the actual type is list<any> or dict<any> go through the values','line_number':732,'multiline':False]
['text':' to possibly get a more specific type.','line_number':733,'multiline':False]
['text':' If a type check is needed that means assigning "any" or','line_number':742,'multiline':False]
['text':' "unknown" to a more specific type, which fails here.','line_number':743,'multiline':False]
['text':' Except when it looks like a lambda, since they have an','line_number':744,'multiline':False]
['text':' incomplete type.','line_number':745,'multiline':False]
['text':'
 * Check if the expected and actual types match.
 * Does not allow for assigning "any" to a specific type.
 * When "argidx" > 0 it is included in the error message.
 * Return OK if types match.
 * Return FAIL if types do not match.
 ','line_number':816,'multiline':True]
['text':'
 * As check_type() but return MAYBE when a runtime type check should be used
 * when compiling.
 ','line_number':835,'multiline':True]
['text':' When expected is "unknown" we accept any actual type.','line_number':848,'multiline':False]
['text':' When expected is "any" we accept any actual type except "void".','line_number':849,'multiline':False]
['text':' tt_type should match, except that a "partial" can be assigned to a','line_number':854,'multiline':False]
['text':' variable with type "func".','line_number':855,'multiline':False]
['text':' And "unknown" (using global variable) and "any" need a runtime type','line_number':856,'multiline':False]
['text':' check.','line_number':857,'multiline':False]
['text':' Using number 0 or 1 for bool is OK.','line_number':866,'multiline':False]
['text':' Using a number where a float is expected is OK here.','line_number':872,'multiline':False]
['text':' "unknown" is used for an empty list or dict','line_number':880,'multiline':False]
['text':' If the return type is unknown it can be anything, including','line_number':887,'multiline':False]
['text':' nothing, thus there is no point in checking.','line_number':888,'multiline':False]
['text':' Allow for using "any" argument type, lambda's have them.','line_number':926,'multiline':False]
['text':' check the argument count at runtime','line_number':938,'multiline':False]
['text':' use runtime type check','line_number':944,'multiline':False]
['text':' don't use tt_class','line_number':946,'multiline':False]
['text':' A null object matches','line_number':948,'multiline':False]
['text':' For object method arguments, do a invariant type check in','line_number':950,'multiline':False]
['text':' an extended class.  For all others, do a covariance type check.','line_number':951,'multiline':False]
['text':' check the type at runtime','line_number':968,'multiline':False]
['text':'
 * Check that the arguments of "type" match "argvars[argcount]".
 * "base_tv" is from "expr->Func()".
 * Return OK/FAIL.
 ','line_number':974,'multiline':True]
['text':' just in case','line_number':992,'multiline':False]
['text':' cannot check','line_number':1004,'multiline':False]
['text':' check the type, unless the value is v:none','line_number':1032,'multiline':False]
['text':'
 * Skip over a type definition and return a pointer to just after it.
 * When "optional" is TRUE then a leading "?" is accepted.
 ','line_number':1040,'multiline':True]
['text':' Also skip over "." for imported classes: "import.ClassName".','line_number':1052,'multiline':False]
['text':' Skip over "<type>"; this is permissive about white space.','line_number':1056,'multiline':False]
['text':' handle func(args): type','line_number':1070,'multiline':False]
['text':' syntax error','line_number':1080,'multiline':False]
['text':' handle func: return_type','line_number':1094,'multiline':False]
['text':'
 * Parse the member type: "<type>" and return "type" with the member set.
 * Use "type_gap" if a new type needs to be added.
 * "info" is extra information for an error message.
 * Returns NULL in case of failure.
 ','line_number':1102,'multiline':True]
['text':'
 * Parse a type at "arg" and advance over it.
 * When "give_error" is TRUE give error messages, otherwise be quiet.
 * Return NULL for failure.
 ','line_number':1151,'multiline':True]
['text':' Skip over the first word.','line_number':1162,'multiline':False]
['text':' func({type}, ...{type}): {type}','line_number':1218,'multiline':False]
['text':' "func" may or may not return a value, "func()" does','line_number':1222,'multiline':False]
['text':' not return a value.','line_number':1223,'multiline':False]
['text':' Nothing comes after "...{type}".','line_number':1262,'multiline':False]
['text':' parse return type','line_number':1304,'multiline':False]
['text':' It can be a class or interface name, possibly imported.','line_number':1373,'multiline':False]
['text':' Although the name is that of a class or interface, the type','line_number':1385,'multiline':False]
['text':' uses will be an object.','line_number':1386,'multiline':False]
['text':' Skip over ".ClassName".','line_number':1392,'multiline':False]
['text':' user defined type','line_number':1401,'multiline':False]
['text':' Skip over ".TypeName".','line_number':1405,'multiline':False]
['text':'
 * Check if "type1" and "type2" are exactly the same.
 * "flags" can have ETYPE_ARG_UNKNOWN, which means that an unknown argument
 * type in "type1" is accepted.
 ','line_number':1419,'multiline':True]
['text':' not composite is always OK','line_number':1450,'multiline':False]
['text':'
 * Find the common type of "type1" and "type2" and put it in "dest".
 * "type2" and "dest" may be the same.
 ','line_number':1472,'multiline':True]
['text':' If either is VAR_UNKNOWN use the other type.  An empty list/dict has no','line_number':1485,'multiline':False]
['text':' specific type.','line_number':1486,'multiline':False]
['text':' When one of the types is t_func_unknown return the other one.','line_number':1515,'multiline':False]
['text':' Useful if a list or dict item is null_func.','line_number':1516,'multiline':False]
['text':' Use -1 for "tt_argcount" to indicate an unknown number of','line_number':1546,'multiline':False]
['text':' arguments.','line_number':1547,'multiline':False]
['text':' Use the minimum of min_argcount.','line_number':1550,'multiline':False]
['text':'
 * Push an entry onto the type stack.  "type" used both for the current type
 * and the declared type.
 * Returns FAIL when out of memory.
 ','line_number':1561,'multiline':True]
['text':'
 * Push an entry onto the type stack.  "type" is the current type, "decl_type"
 * is the declared type.
 * Returns FAIL when out of memory.
 ','line_number':1572,'multiline':True]
['text':'
 * Set the type of the top of the stack to "type".
 ','line_number':1592,'multiline':True]
['text':'
 * Get the current type from the type stack.  If "offset" is zero the one at
 * the top,
 * if "offset" is one the type above that, etc.
 * Returns &t_unknown if there is no such stack entry.
 ','line_number':1606,'multiline':True]
['text':'
 * Get the declared type from the type stack.  If "offset" is zero the one at
 * the top,
 * if "offset" is one the type above that, etc.
 * Returns &t_unknown if there is no such stack entry.
 ','line_number':1623,'multiline':True]
['text':'
 * Get the member type of a dict or list from the items on the stack of "cctx".
 * The declared type is stored in "decl_type".
 * For a list "skip" is 1, for a dict "skip" is 2, keys are skipped.
 * Returns &t_void for an empty list or dict.
 * Otherwise finds the common type of all items.
 ','line_number':1640,'multiline':True]
['text':' Use "unknown" for an empty list or dict.','line_number':1660,'multiline':False]
['text':' Use the first value type for the list member type, then find the common','line_number':1664,'multiline':False]
['text':' type from following items.','line_number':1665,'multiline':False]
['text':' won't get more common','line_number':1671,'multiline':False]
['text':'
 * Return the name of a type.
 * The result may be in allocated memory, in which case "tofree" is set.
 ','line_number':1708,'multiline':True]
['text':' any number of arguments','line_number':1791,'multiline':False]
['text':'
 * "typename(expr)" function
 ','line_number':1821,'multiline':True]
['text':' A type alias for a class has the type set to VAR_OBJECT.  Change it','line_number':1837,'multiline':False]
['text':' to VAR_CLASS, so that the name is "typealias<class<xxx>>"','line_number':1838,'multiline':False]
['text':'
 * Check if the typval_T is a value type; report an error if it is not.
 * Note: a type, user defined or typealias, is not a value type.
 *
 * Return OK if it's a value type, else FAIL
 ','line_number':1862,'multiline':True]
['text':'
 * Same as above, except check type_T.
 ','line_number':1884,'multiline':True]
['text':' Not sure what could be done here to get a name','line_number':1897,'multiline':False]
['text':' TODO: MAYBE AN OPTIONAL ARGUMENT','line_number':1898,'multiline':False]
['text':'
 * Same as above, except check vartype_T.
 ','line_number':1905,'multiline':True]
['text':' FEAT_EVAL','line_number':1924,'multiline':False]
