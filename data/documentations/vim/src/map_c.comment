['text':' vi:set ts=8 sts=4 sw=4 noet:
 *
 * VIM - Vi IMproved	by Bram Moolenaar
 *
 * Do ":help uganda"  in Vim to read copying and usage conditions.
 * Do ":help credits" in Vim to see a list of people who contributed.
 * See README.txt for an overview of the Vim source code.
 ','line_number':1,'multiline':True]
['text':'
 * map.c: Code for mappings and abbreviations.
 ','line_number':10,'multiline':True]
['text':'
 * List used for abbreviations.
 ','line_number':16,'multiline':True]
['text':' first entry in abbrlist','line_number':19,'multiline':False]
['text':'
 * Each mapping is put in one of the 256 hash lists, to speed up finding it.
 ','line_number':21,'multiline':True]
['text':' When non-zero then no mappings can be added or removed.  Prevents mappings','line_number':27,'multiline':False]
['text':' to change while listing them.','line_number':28,'multiline':False]
['text':'
 * Make a hash value for a mapping.
 * "mode" is the lower 4 bits of the State for the mapping.
 * "c1" is the first character of the "lhs".
 * Returns a value between 0 and 255, index in maphash.
 * Put Normal/Visual mode mappings mostly separately from Insert/Cmdline mode.
 ','line_number':31,'multiline':True]
['text':'
 * Get the start of the hashed map list for "state" and first character "c".
 ','line_number':40,'multiline':True]
['text':'
 * Get the buffer-local hashed map list for "state" and first character "c".
 ','line_number':49,'multiline':True]
['text':'
 * Initialize maphash[] for first use.
 ','line_number':64,'multiline':True]
['text':'
 * Delete one entry from the abbrlist or maphash[].
 * "mpp" is a pointer to the m_next field of the PREVIOUS entry!
 ','line_number':77,'multiline':True]
['text':'
 * Return characters to represent the map mode in an allocated string.
 * Returns NULL when out of memory.
 ','line_number':97,'multiline':True]
['text':' :map!','line_number':109,'multiline':False]
['text':' :imap','line_number':111,'multiline':False]
['text':' :lmap','line_number':113,'multiline':False]
['text':' :cmap','line_number':115,'multiline':False]
['text':' :map','line_number':119,'multiline':False]
['text':' :nmap','line_number':123,'multiline':False]
['text':' :omap','line_number':125,'multiline':False]
['text':' :tmap','line_number':127,'multiline':False]
['text':' :vmap','line_number':129,'multiline':False]
['text':' :xmap','line_number':133,'multiline':False]
['text':' :smap','line_number':135,'multiline':False]
['text':'
 * Output a line for one mapping.
 ','line_number':143,'multiline':True]
['text':' TRUE for buffer-local map','line_number':149,'multiline':False]
['text':' Prevent mappings to be cleared while at the more prompt.','line_number':157,'multiline':False]
['text':' Must jump to "theend" instead of returning.','line_number':158,'multiline':False]
['text':' 'q' typed at MORE prompt','line_number':164,'multiline':False]
['text':' Display the LHS.  Get length of what we write.','line_number':179,'multiline':False]
['text':' pad with blanks','line_number':183,'multiline':False]
['text':' Use FALSE below if we only want things like <Up> to show up as such on','line_number':199,'multiline':False]
['text':' the rhs, and not M-x etc, TRUE gets both -- webb','line_number':200,'multiline':False]
['text':' show one line at a time','line_number':210,'multiline':False]
['text':' 0 to use current_sctx','line_number':230,'multiline':False]
['text':' If CTRL-C has been mapped, don't always use it for Interrupting.','line_number':241,'multiline':False]
['text':' add the new entry in front of the abbrlist or maphash[] list','line_number':282,'multiline':False]
['text':'
 * List mappings.  When "haskey" is FALSE all mappings, otherwise mappings that
 * match "keys[keys_len]".
 ','line_number':298,'multiline':True]
['text':' Prevent mappings to be cleared while at the more prompt.','line_number':312,'multiline':False]
['text':' need to loop over all global hash lists','line_number':357,'multiline':False]
['text':' there is only one abbreviation list','line_number':364,'multiline':False]
['text':' check entries with the same mode','line_number':372,'multiline':False]
['text':' show all entries','line_number':375,'multiline':False]
['text':'
 * map[!]		    : show all key mappings
 * map[!] {lhs}		    : show key mapping for {lhs}
 * map[!] {lhs} {rhs}	    : set key mapping for {lhs} to {rhs}
 * noremap[!] {lhs} {rhs}   : same, but no remapping for {rhs}
 * unmap[!] {lhs}	    : remove key mapping for {lhs}
 * abbr			    : show all abbreviations
 * abbr {lhs}		    : show abbreviations for {lhs}
 * abbr {lhs} {rhs}	    : set abbreviation for {lhs} to {rhs}
 * noreabbr {lhs} {rhs}	    : same, but no remapping for {rhs}
 * unabbr {lhs}		    : remove abbreviation for {lhs}
 *
 * maptype: MAPTYPE_MAP for :map
 *	    MAPTYPE_UNMAP for :unmap
 *	    MAPTYPE_NOREMAP for noremap
 *
 * arg is pointer to any arguments. Note: arg cannot be a read-only string,
 * it will be modified.
 *
 * for :map   mode is MODE_NORMAL | MODE_VISUAL | MODE_SELECT | MODE_OP_PENDING
 * for :map!  mode is MODE_INSERT | MODE_CMDLINE
 * for :cmap  mode is MODE_CMDLINE
 * for :imap  mode is MODE_INSERT
 * for :lmap  mode is MODE_LANGMAP
 * for :nmap  mode is MODE_NORMAL
 * for :vmap  mode is MODE_VISUAL | MODE_SELECT
 * for :xmap  mode is MODE_VISUAL
 * for :smap  mode is MODE_SELECT
 * for :omap  mode is MODE_OP_PENDING
 * for :tmap  mode is MODE_TERMINAL
 *
 * for :abbr  mode is MODE_INSERT | MODE_CMDLINE
 * for :iabbr mode is MODE_INSERT
 * for :cabbr mode is MODE_CMDLINE
 *
 * Return 0 for success
 *	  1 for invalid arguments
 *	  2 for no match
 *	  4 for out of mem
 *	  5 for entry not unique
 ','line_number':397,'multiline':True]
['text':' not a mapping but an abbreviation','line_number':443,'multiline':False]
['text':' init for GCC','line_number':450,'multiline':False]
['text':' For ":noremap" don't remap, otherwise do remap.','line_number':477,'multiline':False]
['text':' Accept <buffer>, <nowait>, <silent>, <expr> <script> and <unique> in','line_number':483,'multiline':False]
['text':' any order.','line_number':484,'multiline':False]
['text':' Check for "<buffer>": mapping local to buffer.','line_number':487,'multiline':False]
['text':' Check for "<nowait>": don't wait for more characters.','line_number':496,'multiline':False]
['text':' Check for "<silent>": don't echo commands.','line_number':504,'multiline':False]
['text':' Check for "<special>": accept special keys in <>','line_number':512,'multiline':False]
['text':' Check for "<script>": remap script-local mappings only','line_number':521,'multiline':False]
['text':' Check for "<expr>": {rhs} is an expression.','line_number':529,'multiline':False]
['text':' Check for "<unique>": don't overwrite an existing mapping.','line_number':537,'multiline':False]
['text':' Find end of keys and skip CTRL-Vs (and backslashes) in it.','line_number':549,'multiline':False]
['text':' Accept backslash like CTRL-V when 'cpoptions' does not contain 'B'.','line_number':550,'multiline':False]
['text':' with :unmap white space is included in the keys, no argument possible.','line_number':551,'multiline':False]
['text':' skip CTRL-V or backslash','line_number':558,'multiline':False]
['text':' check for :unmap without argument','line_number':570,'multiline':False]
['text':' If mapping has been given as ^V<C_UP> say, then replace the term codes','line_number':577,'multiline':False]
['text':' with the appropriate two bytes. If it is a shifted special key, unshift','line_number':578,'multiline':False]
['text':' it too, giving another two bytes.','line_number':579,'multiline':False]
['text':' replace_termcodes() may move the result to allocated memory, which','line_number':580,'multiline':False]
['text':' needs to be freed later (*keys_buf and *arg_buf).','line_number':581,'multiline':False]
['text':' replace_termcodes() also removes CTRL-Vs and sometimes backslashes.','line_number':582,'multiline':False]
['text':' If something like <C-H> is simplified to 0x08 then mark it as simplified','line_number':583,'multiline':False]
['text':' and also add an entry with a modifier, which will work when using a key','line_number':584,'multiline':False]
['text':' protocol.','line_number':585,'multiline':False]
['text':' "<Nop>" means nothing','line_number':602,'multiline':False]
['text':'
     * The following is done twice if we have two versions of keys:
     * "alt_keys_buf" is not NULL.
     ','line_number':609,'multiline':True]
['text':' when printing always use the not-simplified map','line_number':627,'multiline':False]
['text':' check arguments and translate function keys','line_number':630,'multiline':False]
['text':' maximum length of MAXMAPLEN chars','line_number':634,'multiline':False]
['text':' If an abbreviation ends in a keyword character, the','line_number':642,'multiline':False]
['text':' rest must be all keyword-char or all non-keyword-char.','line_number':643,'multiline':False]
['text':' Otherwise we won't be able to find the start of it in a','line_number':644,'multiline':False]
['text':' vi-compatible way.','line_number':645,'multiline':False]
['text':' nr of (multi-byte) chars','line_number':657,'multiline':False]
['text':' type of last char','line_number':658,'multiline':False]
['text':' count of same char type','line_number':660,'multiline':False]
['text':' ends in keyword char','line_number':670,'multiline':False]
['text':' An abbreviation cannot contain white space.','line_number':677,'multiline':False]
['text':' if we will add an abbreviation','line_number':687,'multiline':False]
['text':' reset flag that indicates there are','line_number':688,'multiline':False]
['text':' no abbreviations','line_number':689,'multiline':False]
['text':' Check if a new local mapping wasn't already defined globally.','line_number':694,'multiline':False]
['text':' need to loop over all global hash lists','line_number':698,'multiline':False]
['text':' there is only one abbreviation list','line_number':703,'multiline':False]
['text':' check entries with the same mode','line_number':711,'multiline':False]
['text':' When listing global mappings, also list buffer-local ones here.','line_number':730,'multiline':False]
['text':' Find an entry in the maphash[] list that matches.','line_number':736,'multiline':False]
['text':' For :unmap we may loop two times: once to try to unmap an entry with','line_number':737,'multiline':False]
['text':' a matching 'from' part, a second time, if the first fails, to unmap','line_number':738,'multiline':False]
['text':' an entry with a matching 'to' part. This was done to allow','line_number':739,'multiline':False]
['text':' ":ab foo bar" to be unmapped by typing ":unab foo", where "foo" will','line_number':740,'multiline':False]
['text':' be replaced by "bar" because of the abbreviation.','line_number':741,'multiline':False]
['text':' need to loop over all hash lists','line_number':745,'multiline':False]
['text':' there is only one abbreviation list','line_number':750,'multiline':False]
['text':' skip entries with wrong mode','line_number':761,'multiline':False]
['text':' show all entries','line_number':765,'multiline':False]
['text':' do we have a match?','line_number':773,'multiline':False]
['text':' second round: Try unmap "rhs" string','line_number':775,'multiline':False]
['text':' Delete entry.','line_number':789,'multiline':False]
['text':' Only accept a full match.  For abbreviations','line_number':790,'multiline':False]
['text':' we ignore trailing space when matching with','line_number':791,'multiline':False]
['text':' the "lhs", since an abbreviation can't have','line_number':792,'multiline':False]
['text':' trailing space.','line_number':793,'multiline':False]
['text':' In keyround for simplified keys, don't unmap','line_number':800,'multiline':False]
['text':' a mapping without m_simplified flag.','line_number':801,'multiline':False]
['text':' We reset the indicated mode bits. If nothing','line_number':804,'multiline':False]
['text':' is left the entry is deleted below.','line_number':805,'multiline':False]
['text':' remember we did something','line_number':807,'multiline':False]
['text':' show matching entry','line_number':809,'multiline':False]
['text':' new entry is ambiguous','line_number':817,'multiline':False]
['text':' new rhs for existing entry','line_number':836,'multiline':False]
['text':' remove mode bits','line_number':837,'multiline':False]
['text':' reuse entry','line_number':838,'multiline':False]
['text':' no mem','line_number':844,'multiline':False]
['text':' entry can be deleted','line_number':864,'multiline':False]
['text':' continue with *mpp','line_number':867,'multiline':False]
['text':' May need to put this entry into another hash','line_number':870,'multiline':False]
['text':' list.','line_number':871,'multiline':False]
['text':' continue with *mpp','line_number':879,'multiline':False]
['text':' delete entry','line_number':890,'multiline':False]
['text':' no match','line_number':894,'multiline':False]
['text':' If CTRL-C has been unmapped, reuse it for Interrupting.','line_number':898,'multiline':False]
['text':' print entries','line_number':909,'multiline':False]
['text':' listing finished','line_number':917,'multiline':False]
['text':' have added the new entry already','line_number':921,'multiline':False]
['text':' Get here when adding a new entry to the maphash[] list or abbrlist.','line_number':923,'multiline':False]
['text':' sid ','line_number':927,'multiline':True]
['text':' scriptversion ','line_number':927,'multiline':True]
['text':' lnum ','line_number':927,'multiline':True]
['text':' no mem','line_number':931,'multiline':False]
['text':'
 * Get the mapping mode from the command name.
 ','line_number':943,'multiline':True]
['text':' :imap','line_number':956,'multiline':False]
['text':' :lmap','line_number':958,'multiline':False]
['text':' :cmap','line_number':960,'multiline':False]
['text':' avoid :noremap','line_number':961,'multiline':False]
['text':' :nmap','line_number':962,'multiline':False]
['text':' :vmap','line_number':964,'multiline':False]
['text':' :xmap','line_number':966,'multiline':False]
['text':' :smap','line_number':968,'multiline':False]
['text':' :omap','line_number':970,'multiline':False]
['text':' :tmap','line_number':972,'multiline':False]
['text':' :map !','line_number':977,'multiline':False]
['text':' :map','line_number':980,'multiline':False]
['text':'
 * Clear all mappings (":mapclear") or abbreviations (":abclear").
 * "abbr" should be FALSE for mappings, TRUE for abbreviations.
 ','line_number':987,'multiline':True]
['text':'
 * If "map_locked" is set then give an error and return TRUE.
 * Otherwise return FALSE.
 ','line_number':1012,'multiline':True]
['text':'
 * Clear all mappings in "mode".
 ','line_number':1027,'multiline':True]
['text':' buffer for local mappings','line_number':1032,'multiline':False]
['text':' mode in which to delete','line_number':1033,'multiline':False]
['text':' TRUE for buffer-local mappings','line_number':1034,'multiline':False]
['text':' TRUE for abbreviations','line_number':1035,'multiline':False]
['text':' there is only one abbrlist','line_number':1050,'multiline':False]
['text':' entry can be deleted','line_number':1070,'multiline':False]
['text':' May need to put this entry into another hash list.','line_number':1075,'multiline':False]
['text':' continue with *mpp','line_number':1090,'multiline':False]
['text':'
 * Return TRUE if a map exists that has "str" in the rhs for mode "modechars".
 * Recognize termcap codes in "str".
 * Also checks mappings local to the current buffer.
 ','line_number':1124,'multiline':True]
['text':'
 * Return TRUE if a map exists that has "str" in the rhs for mode "mode".
 * Also checks mappings local to the current buffer.
 ','line_number':1145,'multiline':True]
['text':' Do it twice: once for global maps and once for local maps.','line_number':1158,'multiline':False]
['text':' there is only one abbr list','line_number':1165,'multiline':False]
['text':'
 * Used below when expanding mapping/abbreviation names.
 ','line_number':1191,'multiline':True]
['text':'
 * Translate an internal mapping/abbreviation representation into the
 * corresponding external one recognized by :map/:abbrev commands.
 * Respects the current B/k/< settings of 'cpoption'.
 *
 * This function is called when expanding mappings/abbreviations on the
 * command-line.
 *
 * It uses a growarray to build the translation string since the latter can be
 * wider than the original description. The caller has to free the string
 * afterwards.
 *
 * Returns NULL when there is a problem.
 ','line_number':1198,'multiline':True]
['text':' display <Nul> as ^@','line_number':1248,'multiline':False]
['text':' special key','line_number':1252,'multiline':False]
['text':' for (str)','line_number':1260,'multiline':False]
['text':'
 * Work out what to complete when doing command line completion of mapping
 * or abbreviation names.
 ','line_number':1273,'multiline':True]
['text':' TRUE if '!' given','line_number':1282,'multiline':False]
['text':' TRUE if abbreviation','line_number':1283,'multiline':False]
['text':' TRUE if unmap/unabbrev command','line_number':1284,'multiline':False]
['text':'
 * Find all mapping/abbreviation names that match regexp "regmatch"'.
 * For command line expansion of ":[un]map" and ":[un]abbrev" in all modes.
 * Return OK if matches found, FAIL otherwise.
 ','line_number':1351,'multiline':True]
['text':' return values in case of FAIL','line_number':1378,'multiline':False]
['text':' First search in map modifier arguments','line_number':1386,'multiline':False]
['text':' only one abbrev list','line_number':1438,'multiline':False]
['text':' for (hash)','line_number':1439,'multiline':False]
['text':' for (mp)','line_number':1486,'multiline':False]
['text':' for (hash)','line_number':1487,'multiline':False]
['text':' Sort the matches','line_number':1512,'multiline':False]
['text':' Fuzzy matching already sorts the matches','line_number':1513,'multiline':False]
['text':' Remove multiple entries','line_number':1517,'multiline':False]
['text':'
 * Check for an abbreviation.
 * Cursor is at ptr[col].
 * When inserting, mincol is where insert started.
 * For the command line, mincol is what is to be skipped over.
 * "c" is the character typed before check_abbr was called.  It may have
 * ABBR_OFF added to avoid prepending a CTRL-V to it.
 *
 * Historic vi practice: The last character of an abbreviation must be an id
 * character ([a-zA-Z0-9_]). The characters in front of it must be all id
 * characters or all non-id characters. This allows for abbr. "#i" to
 * "#include".
 *
 * Vim addition: Allow for abbreviations that end in a non-keyword character.
 * Then there must be white space before the abbr.
 *
 * return TRUE if there is an abbreviation, FALSE if not
 ','line_number':1538,'multiline':True]
['text':' starting column of the abbr.','line_number':1564,'multiline':False]
['text':' length in characters','line_number':1570,'multiline':False]
['text':' abbrev. are not recursive','line_number':1574,'multiline':False]
['text':' no remapping implies no abbreviation, except for CTRL-]','line_number':1577,'multiline':False]
['text':' Check for word before the cursor: If it ends in a keyword char all','line_number':1581,'multiline':False]
['text':' chars before it must be keyword chars or non-keyword chars, but not','line_number':1582,'multiline':False]
['text':' white space. If it ends in a non-keyword char we accept any characters','line_number':1583,'multiline':False]
['text':' before it except white space.','line_number':1584,'multiline':False]
['text':' cannot be an abbr.','line_number':1585,'multiline':False]
['text':' Vim added abbr.','line_number':1594,'multiline':False]
['text':' vi compatible abbr.','line_number':1597,'multiline':False]
['text':' Vim added abbr.','line_number':1617,'multiline':False]
['text':' vi compatible abbr.','line_number':1620,'multiline':False]
['text':' there is a word in front of the cursor','line_number':1631,'multiline':False]
['text':' might have CSI escaped mp->m_keys','line_number':1653,'multiline':False]
['text':' find entries with right mode and keys','line_number':1662,'multiline':False]
['text':' Found a match:','line_number':1679,'multiline':False]
['text':' Insert the rest of the abbreviation in typebuf.tb_buf[].','line_number':1680,'multiline':False]
['text':' This goes from end to start.','line_number':1681,'multiline':False]
['text':'','line_number':1682,'multiline':False]
['text':' Characters 0x000 - 0x100: normal chars, may need CTRL-V,','line_number':1683,'multiline':False]
['text':' except K_SPECIAL: Becomes K_SPECIAL KS_SPECIAL KE_FILLER','line_number':1684,'multiline':False]
['text':' Characters where IS_SPECIAL() == TRUE: key codes, need','line_number':1685,'multiline':False]
['text':' K_SPECIAL. Other characters (with ABBR_OFF): don't use CTRL-V.','line_number':1686,'multiline':False]
['text':'','line_number':1687,'multiline':False]
['text':' Character CTRL-] is treated specially - it completes the','line_number':1688,'multiline':False]
['text':' abbreviation, but is not inserted into the input stream.','line_number':1689,'multiline':False]
['text':' special key code, split up','line_number':1693,'multiline':False]
['text':' special char needs CTRL-V','line_number':1703,'multiline':False]
['text':' if ABBR_OFF has been added, remove it here','line_number':1709,'multiline':False]
['text':' Need to escape K_SPECIAL.','line_number':1714,'multiline':False]
['text':' insert the last typed char','line_number':1728,'multiline':False]
['text':' copy values here, calling eval_map_expr() may make "mp" invalid!','line_number':1732,'multiline':False]
['text':' insert the to string','line_number':1745,'multiline':False]
['text':' no abbrev. for these chars','line_number':1747,'multiline':False]
['text':' Delete characters instead of bytes','line_number':1758,'multiline':False]
['text':' delete the from string','line_number':1759,'multiline':False]
['text':'
 * Evaluate the RHS of a mapping or abbreviations and take care of escaping
 * special characters.
 * Careful: after this "mp" will be invalid if the mapping was deleted.
 ','line_number':1768,'multiline':True]
['text':' NUL or typed character for abbreviation','line_number':1776,'multiline':False]
['text':' Remove escaping of CSI, because "str" is in a format to be used as','line_number':1787,'multiline':False]
['text':' typeahead.','line_number':1788,'multiline':False]
['text':' Forbid changing text or using ":normal" to avoid most of the bad side','line_number':1794,'multiline':False]
['text':' effects.  Also restore the cursor position.','line_number':1795,'multiline':False]
['text':' set v:char to the typed character','line_number':1798,'multiline':False]
['text':' Note: the evaluation may make "mp" invalid.','line_number':1808,'multiline':False]
['text':' Escape CSI in the result to be able to use the string as typeahead.','line_number':1823,'multiline':False]
['text':'
 * Copy "p" to allocated memory, escaping K_SPECIAL and CSI so that the result
 * can be put in the typeahead buffer.
 * Returns NULL when out of memory.
 ','line_number':1831,'multiline':True]
['text':' Need a buffer to hold up to three times as much.  Four in case of an','line_number':1842,'multiline':False]
['text':' illegal utf-8 byte:','line_number':1843,'multiline':False]
['text':' 0xc0 -> 0xc3 0x80 -> 0xc3 K_SPECIAL KS_SPECIAL KE_FILLER','line_number':1844,'multiline':False]
['text':' Copy special key unmodified.','line_number':1858,'multiline':False]
['text':' Add character, possibly multi-byte to destination, escaping','line_number':1865,'multiline':False]
['text':' CSI and K_SPECIAL. Be careful, it can be an illegal byte!','line_number':1866,'multiline':False]
['text':'
 * Remove escaping from CSI and K_SPECIAL characters.  Reverse of
 * vim_strsave_escape_csi().  Works in-place.
 ','line_number':1876,'multiline':True]
['text':'
 * Write map commands for the current mappings to an .exrc file.
 * Return FAIL on error, OK otherwise.
 ','line_number':1904,'multiline':True]
['text':' buffer for local mappings or NULL','line_number':1911,'multiline':False]
['text':' Do the loop twice: Once for mappings, once for abbreviations.','line_number':1924,'multiline':False]
['text':' Then loop over all map hash lists.','line_number':1925,'multiline':False]
['text':' there is only one abbr list','line_number':1931,'multiline':False]
['text':' skip script-local mappings','line_number':1948,'multiline':False]
['text':' skip mappings that contain a <SNR> (script-local thing),','line_number':1952,'multiline':False]
['text':' they probably don't work when loaded again','line_number':1953,'multiline':False]
['text':' It's possible to create a mapping and then ":unmap" certain','line_number':1961,'multiline':False]
['text':' modes.  We recreate this here by mapping the individual','line_number':1962,'multiline':False]
['text':' modes, which requires up to three of them.','line_number':1963,'multiline':False]
['text':' do this twice if c2 is set, 3 times with c3','line_number':2049,'multiline':False]
['text':' When outputting <> form, need to make sure that 'cpo'','line_number':2051,'multiline':False]
['text':' is set to the Vim default.','line_number':2052,'multiline':False]
['text':' will use <Nop>','line_number':2055,'multiline':False]
['text':'
 * write escape string to file
 * "what": 0 for :map lhs, 1 for :map rhs, 2 for :set
 *
 * return FAIL for failure, OK otherwise
 ','line_number':2113,'multiline':True]
['text':' :map xx <Nop>','line_number':2126,'multiline':False]
['text':' Check for a multi-byte character, which may contain escaped','line_number':2138,'multiline':False]
['text':' K_SPECIAL and CSI bytes','line_number':2139,'multiline':False]
['text':' Special key codes have to be translated to be able to make sense','line_number':2151,'multiline':False]
['text':' when they are read back.','line_number':2152,'multiline':False]
['text':' special key','line_number':2167,'multiline':False]
['text':' A '\n' in a map command should be written as <NL>.','line_number':2175,'multiline':False]
['text':' A '\n' in a set command should be written as \^V^J.','line_number':2176,'multiline':False]
['text':' Some characters have to be escaped with CTRL-V to','line_number':2192,'multiline':False]
['text':' prevent them from misinterpreted in DoOneCmd().','line_number':2193,'multiline':False]
['text':' A space, Tab and '"' has to be escaped with a backslash to','line_number':2194,'multiline':False]
['text':' prevent it to be misinterpreted in do_set().','line_number':2195,'multiline':False]
['text':' A space has to be escaped with a CTRL-V when it's at the start of a','line_number':2196,'multiline':False]
['text':' ":map" rhs.','line_number':2197,'multiline':False]
['text':' A '<' has to be escaped with a CTRL-V to prevent it being','line_number':2198,'multiline':False]
['text':' interpreted as the start of a special key name.','line_number':2199,'multiline':False]
['text':' A space in the lhs of a :map needs a CTRL-V.','line_number':2200,'multiline':False]
['text':'
 * Check all mappings for the presence of special key codes.
 * Used after ":set term=xxx".
 ','line_number':2220,'multiline':True]
['text':' avoids giving error messages','line_number':2237,'multiline':False]
['text':' Do this once for each buffer, and then once for global','line_number':2241,'multiline':False]
['text':' mappings/abbreviations with bp == NULL','line_number':2242,'multiline':False]
['text':' Do the loop twice: Once for mappings, once for abbreviations.','line_number':2245,'multiline':False]
['text':' Then loop over all map hash lists.','line_number':2246,'multiline':False]
['text':' there is only one abbr list','line_number':2252,'multiline':False]
['text':' do this twice','line_number':2268,'multiline':False]
['text':' once for the "from" part','line_number':2271,'multiline':False]
['text':' and once for the "to" part','line_number':2273,'multiline':False]
['text':' for "normal" tcap entries','line_number':2279,'multiline':False]
['text':'
 * Check the string "keys" against the lhs of all mappings.
 * Return pointer to rhs of mapping (mapblock->m_str).
 * NULL when no mapping found.
 ','line_number':2301,'multiline':True]
['text':' require exact match','line_number':2310,'multiline':False]
['text':' ignore preceding modifier','line_number':2311,'multiline':False]
['text':' do abbreviations','line_number':2312,'multiline':False]
['text':' return: pointer to mapblock or NULL','line_number':2313,'multiline':False]
['text':' return: buffer-local mapping or NULL','line_number':2314,'multiline':False]
['text':' loop over all hash lists','line_number':2326,'multiline':False]
['text':' there is only one list.','line_number':2331,'multiline':False]
['text':' skip entries with wrong mode, wrong length and not matching','line_number':2344,'multiline':False]
['text':' ones','line_number':2345,'multiline':False]
['text':'
 * "hasmapto()" function
 ','line_number':2375,'multiline':True]
['text':'
 * Fill in the empty dictionary with items as defined by maparg builtin.
 ','line_number':2409,'multiline':True]
['text':' may be NULL','line_number':2416,'multiline':False]
['text':' false if not buffer local mapping','line_number':2417,'multiline':False]
['text':' true if abbreviation','line_number':2418,'multiline':False]
['text':' Also add the value for the simplified entry.','line_number':2427,'multiline':False]
['text':' return empty string for failure','line_number':2466,'multiline':False]
['text':' When the lhs is being simplified the not-simplified keys are','line_number':2497,'multiline':False]
['text':' preferred for printing, like in do_map().','line_number':2498,'multiline':False]
['text':' Return a string.','line_number':2507,'multiline':False]
['text':'
 * "maplist()" function
 ','line_number':2526,'multiline':True]
['text':' Do it twice: once for global maps and once for local maps.','line_number':2552,'multiline':False]
['text':' there is only one abbr list','line_number':2559,'multiline':False]
['text':'
 * "maparg()" function
 ','line_number':2596,'multiline':True]
['text':'
 * "mapcheck()" function
 ','line_number':2614,'multiline':True]
['text':'
 * Get the mapping mode from the mode string.
 * It may contain multiple characters, eg "nox", or "!", or ' '
 * Return 0 if there is an error.
 ','line_number':2630,'multiline':True]
['text':' compatibility','line_number':2648,'multiline':False]
['text':' error, unknown mode character','line_number':2665,'multiline':False]
['text':' more than one bit set','line_number':2670,'multiline':False]
['text':' false if multiple bits set in mode and mode is fully','line_number':2672,'multiline':False]
['text':' contained in one mask','line_number':2673,'multiline':False]
['text':'
 * "mapset()" function
 ','line_number':2681,'multiline':True]
['text':' If first arg is a dict, then that's the only arg permitted.','line_number':2711,'multiline':False]
['text':' Get the values in the same order as above in get_maparg().','line_number':2752,'multiline':False]
['text':' mode from the dict is not used','line_number':2774,'multiline':False]
['text':' "<Nop>" means nothing','line_number':2776,'multiline':False]
['text':' Delete any existing mapping for this lhs and mode.','line_number':2788,'multiline':False]
['text':' abbreviation','line_number':2819,'multiline':False]
['text':'
 * Default mappings for some often used keys.
 ','line_number':2821,'multiline':True]
['text':' Use the Windows (CUA) keybindings. (GUI)','line_number':2831,'multiline':False]
['text':' paste, copy and cut','line_number':2834,'multiline':False]
['text':' Missing: CTRL-C (cancel) and CTRL-V (block selection)','line_number':2842,'multiline':False]
['text':' Use the Windows (CUA) keybindings. (Console)','line_number':2847,'multiline':False]
['text':' paste, copy and cut','line_number':2855,'multiline':False]
['text':' SHIFT-Insert is "-d"*P','line_number':2858,'multiline':False]
['text':' SHIFT-Insert is ^R^O*','line_number':2859,'multiline':False]
['text':' SHIFT-Insert is P','line_number':2865,'multiline':False]
['text':' CTRL-Insert is y','line_number':2868,'multiline':False]
['text':' SHIFT-Del is d','line_number':2869,'multiline':False]
['text':' CTRL-Del is d','line_number':2870,'multiline':False]
['text':' Use the Standard MacOS binding.','line_number':2878,'multiline':False]
['text':' paste, copy and cut','line_number':2879,'multiline':False]
['text':'
 * Set up default mappings.
 ','line_number':2892,'multiline':True]
['text':'
 * Add a mapping "map" for mode "mode".
 * When "nore" is TRUE use MAPTYPE_NOREMAP.
 * Need to put string in allocated memory, because do_map() will modify it.
 ','line_number':2917,'multiline':True]
['text':' Allow <> notation','line_number':2928,'multiline':False]
['text':'
 * Any character has an equivalent 'langmap' character.  This is used for
 * keyboards that have a special language mode that sends characters above
 * 128 (although other characters can be translated too).  The "to" field is a
 * Vim command character.  This avoids having to switch the keyboard back to
 * ASCII mode when leaving Insert mode.
 *
 * langmap_mapchar[] maps any of 256 chars to an ASCII char used for Vim
 * commands.
 * langmap_mapga.ga_data is a sorted table of langmap_entry_T.  This does the
 * same as langmap_mapchar[] for characters >= 256.
 *
 * Use growarray for 'langmap' chars >= 256
 ','line_number':2939,'multiline':True]
['text':'
 * Search for an entry in "langmap_mapga" for "from".  If found set the "to"
 * field.  If not found insert a new entry at the appropriate location.
 ','line_number':2961,'multiline':True]
['text':' Do a binary search for an existing entry.','line_number':2972,'multiline':False]
['text':' out of memory','line_number':2990,'multiline':False]
['text':' insert new entry at position "a"','line_number':2992,'multiline':False]
['text':'
 * Apply 'langmap' to multi-byte character "c" and return the result.
 ','line_number':3001,'multiline':True]
['text':' found matching entry','line_number':3017,'multiline':False]
['text':' no entry found, return "c" unmodified','line_number':3023,'multiline':False]
['text':' we init with a one-to-one map','line_number':3032,'multiline':False]
['text':'
 * Called when langmap option is set; the language map can be
 * changed at any time!
 ','line_number':3036,'multiline':True]
['text':' clear the previous map first','line_number':3047,'multiline':False]
['text':' back to one-to-one map','line_number':3048,'multiline':False]
['text':' abcd;ABCD form, p2 points to A','line_number':3059,'multiline':False]
['text':' aAbBcCdD form, p2 is NULL','line_number':3061,'multiline':False]
['text':' Advance to next pair','line_number':3105,'multiline':False]
['text':'
 * ":abbreviate" and friends.
 ','line_number':3155,'multiline':True]
['text':' almost the same as mapping','line_number':3161,'multiline':False]
['text':'
 * ":map" and friends.
 ','line_number':3164,'multiline':True]
['text':' If we are sourcing .exrc or .vimrc in current directory we','line_number':3170,'multiline':False]
['text':' print the mappings for security reasons.','line_number':3171,'multiline':False]
['text':'
 * ":unmap" and friends.
 ','line_number':3181,'multiline':True]
['text':'
 * ":mapclear" and friends.
 ','line_number':3190,'multiline':True]
['text':'
 * ":abclear" and friends.
 ','line_number':3199,'multiline':True]
