['text':' vi:set ts=8 sts=4 sw=4 noet:
 *
 * VIM - Vi IMproved	by Bram Moolenaar
 *
 * Do ":help uganda"  in Vim to read copying and usage conditions.
 * Do ":help credits" in Vim to see a list of people who contributed.
 * See README.txt for an overview of the Vim source code.
 ','line_number':1,'multiline':True]
['text':'
 * Code to handle user-settable options. This is all pretty much table-
 * driven. Checklist for adding a new option:
 * - Put it in the options array in optiondefs.h (copy an existing entry).
 * - For a global option: Add a variable for it in option.h.
 * - For a buffer or window local option:
 *   - Add a PV_XX macro definition to the optiondefs.h file.
 *   - Add a variable to the window or buffer struct in structs.h.
 *   - For a window option, add some code to copy_winopt().
 *   - For a window string option, add code to check_win_options() and
 *     clear_winopt().
 *   - For a buffer option, add some code to buf_copy_options().
 *   - For a buffer string option, add code to check_buf_options().
 * - If it's a numeric option, add any necessary bounds checks to
 *   set_num_option().
 * - If it's a list of flags, add some code in did_set_string_option(), search
 *   for WW_ALL.
 * - When adding an option with expansion (P_EXPAND), but with a different
 *   default for Vi and Vim (no P_VI_DEF), add some code at VIMEXP.
 * - Add documentation!  One line in doc/quickref.txt, full description in
 *   options.txt, and any other related places.
 * - Add an entry in runtime/optwin.vim.
 * When making changes:
 * - Adjust the help for the option in doc/option.txt.
 * - When an entry has the P_VIM flag, or is lacking the P_VI_DEF flag, add a
 *   comment at the help for the 'compatible' option.
 ','line_number':10,'multiline':True]
['text':'
 * Initialize the 'shell' option to a default value.
 ','line_number':86,'multiline':True]
['text':' Find default value for 'shell' option.','line_number':94,'multiline':False]
['text':' Don't use it if it is empty.','line_number':95,'multiline':False]
['text':' For MS-Windows put the path in quotes instead of escaping spaces.','line_number':104,'multiline':False]
['text':' two quotes and a trailing NUL','line_number':110,'multiline':False]
['text':'
 * Set the default for 'backupskip' to include environment variables for
 * temp files.
 ','line_number':127,'multiline':True]
['text':' First time count the NUL, otherwise count the ','.','line_number':164,'multiline':False]
['text':'
 * Initialize the 'maxmemtot' and 'maxmem' options to a default value.
 * 'maxmemtot' and 'maxmem' may have to be adjusted for available memory.
 ','line_number':194,'multiline':True]
['text':' Use amount of memory available at this moment.','line_number':213,'multiline':False]
['text':' Use amount of memory available to Vim.','line_number':216,'multiline':False]
['text':'
 * Initialize the 'cdpath' option to a default value.
 ','line_number':234,'multiline':True]
['text':' start with ",", current dir first','line_number':254,'multiline':False]
['text':' cannot happen','line_number':275,'multiline':False]
['text':'
 * Initialize the 'printencoding' option to a default value.
 ','line_number':281,'multiline':True]
['text':' Set print encoding on platforms that don't default to latin1','line_number':289,'multiline':False]
['text':' HPUX','line_number':297,'multiline':False]
['text':'
 * Initialize the 'printexpr' option to a default value.
 ','line_number':305,'multiline':True]
['text':' 'printexpr' must be allocated to be able to evaluate it.','line_number':311,'multiline':False]
['text':'
 * Force restricted-mode on for "nologin" or "false" $SHELL
 ','line_number':326,'multiline':True]
['text':'
 * When Vim is started with the "--clean" argument, set the default value
 * for the 'runtimepath' and 'packpath' options.
 ','line_number':344,'multiline':True]
['text':'
 * Expand environment variables and things like "~" for the defaults.
 * If option_expand() returns non-NULL the variable is expanded.  This can
 * only happen for non-indirect options.
 * Also set the default to the expanded value, so ":set" does not list
 * them.
 * Don't set the P_ALLOCED flag, because we don't want to free the
 * default.
 ','line_number':367,'multiline':True]
['text':' VIMEXP','line_number':392,'multiline':False]
['text':' Defaults for all expanded options are currently the same for Vi','line_number':393,'multiline':False]
['text':' and Vim.  When this changes, add some code here!  Also need to','line_number':394,'multiline':False]
['text':' split P_DEF_ALLOCED in two.','line_number':395,'multiline':False]
['text':'
 * Initialize the 'LANG' environment variable to a default value.
 ','line_number':404,'multiline':True]
['text':' If $LANG isn't set, try to get a good value for it.  This makes the','line_number':411,'multiline':False]
['text':' right language be used automatically.  Don't do this for English.','line_number':412,'multiline':False]
['text':' Could use LOCALE_SISO639LANGNAME, but it's not in Win95.','line_number':418,'multiline':False]
['text':' LOCALE_SABBREVLANGNAME gives us three letters, like "enu", we use','line_number':419,'multiline':False]
['text':' only the first two.','line_number':420,'multiline':False]
['text':' There are a few exceptions (probably more)','line_number':425,'multiline':False]
['text':' truncate to two-letter code','line_number':434,'multiline':False]
['text':' Moved to os_mac_conv.c to avoid dependency problems.','line_number':439,'multiline':False]
['text':'
 * Initialize the 'encoding' option to a default value.
 ','line_number':444,'multiline':True]
['text':' MS-Windows has builtin support for conversion to and from Unicode, using','line_number':454,'multiline':False]
['text':' "utf-8" for 'encoding' should work best for most users.','line_number':455,'multiline':False]
['text':' enc_locale() will try to find the encoding of the current locale.','line_number':458,'multiline':False]
['text':' This works best for properly configured systems, old and new.','line_number':459,'multiline':False]
['text':' Try setting 'encoding' and check if the value is valid.','line_number':465,'multiline':False]
['text':' If not, go back to the default encoding.','line_number':466,'multiline':False]
['text':' We don't support "gb18030", but "cp936" is a good substitute','line_number':471,'multiline':False]
['text':' for practical purposes, thus use that.  It's not an alias to','line_number':472,'multiline':False]
['text':' still support conversion between gb18030 and utf-8.','line_number':473,'multiline':False]
['text':' Adjust the default for 'isprint' and 'iskeyword' to match','line_number':489,'multiline':False]
['text':' latin1.  Also set the defaults for when 'nocompatible' is','line_number':490,'multiline':False]
['text':' set.','line_number':491,'multiline':False]
['text':' Win32 console: When GetACP() returns a different value from','line_number':507,'multiline':False]
['text':' GetConsoleCP() set 'termencoding'.','line_number':508,'multiline':False]
['text':' Win32 console: In ConPTY, GetConsoleCP() returns zero.','line_number':517,'multiline':False]
['text':' Use an alternative value.','line_number':518,'multiline':False]
['text':' $HOME may have characters in active code page.','line_number':540,'multiline':False]
['text':'
 * Initialize the options, first part.
 *
 * Called only once from main(), just after creating the first buffer.
 * If "clean_arg" is TRUE Vim was started with --clean.
 ','line_number':551,'multiline':True]
['text':' Be Vi compatible by default','line_number':564,'multiline':False]
['text':' Use POSIX compatibility when $VIM_POSIX is set.','line_number':567,'multiline':False]
['text':'
     * Set all the options (except the terminal options) to their default
     * value.  Also set the global value for local options.
     ','line_number':583,'multiline':True]
['text':' no local 'autoread' value','line_number':604,'multiline':False]
['text':' Must be before option_expand(), because that one needs vim_isIDc()','line_number':610,'multiline':False]
['text':' Use the current chartab for the generic chartab. This is not in','line_number':614,'multiline':False]
['text':' didset_options() because it only depends on 'encoding'.','line_number':615,'multiline':False]
['text':' Expand environment variables and things like "~" for the defaults.','line_number':621,'multiline':False]
['text':' Buffer is unchanged','line_number':624,'multiline':False]
['text':' Detect use of mlterm.','line_number':627,'multiline':False]
['text':' Mlterm is a terminal emulator akin to xterm that has some special','line_number':628,'multiline':False]
['text':' abilities (bidi namely).','line_number':629,'multiline':False]
['text':' NOTE: mlterm's author is being asked to 'set' a variable','line_number':630,'multiline':False]
['text':'       instead of an environment variable due to inheritance.','line_number':631,'multiline':False]
['text':' Set the default for 'helplang'.','line_number':641,'multiline':False]
['text':'
 * Set the "fileencodings" option to the default value for when 'encoding' is
 * utf-8.
 ','line_number':648,'multiline':True]
['text':'
 * Set an option to its default value.
 * This does not take care of side effects!
 ','line_number':659,'multiline':True]
['text':' OPT_FREE, OPT_LOCAL and/or OPT_GLOBAL','line_number':666,'multiline':False]
['text':' use Vi default value','line_number':667,'multiline':False]
['text':' pointer to variable for current option','line_number':669,'multiline':False]
['text':' index in def_val[]','line_number':670,'multiline':False]
['text':' skip hidden option, nothing to do for it','line_number':677,'multiline':False]
['text':' 'fencs' default value depends on 'encoding'','line_number':682,'multiline':False]
['text':' Use set_string_option_direct() for local options to handle','line_number':685,'multiline':False]
['text':' freeing and allocating the value.','line_number':686,'multiline':False]
['text':' 'scrolloff' and 'sidescrolloff' local values have a','line_number':708,'multiline':False]
['text':' different default value than the global default.','line_number':709,'multiline':False]
['text':' May also set global value for local option.','line_number':713,'multiline':False]
['text':' P_BOOL','line_number':719,'multiline':False]
['text':' the cast to long is required for Manx C, long_i is needed for','line_number':721,'multiline':False]
['text':' MSVC','line_number':722,'multiline':False]
['text':' 'modeline' defaults to off for root','line_number':725,'multiline':False]
['text':' May also set global value for local option.','line_number':729,'multiline':False]
['text':' The default value is not insecure.','line_number':735,'multiline':False]
['text':'
 * Set all options (except terminal options) to their default value.
 * When "opt_flags" is non-zero skip 'encoding'.
 ','line_number':745,'multiline':True]
['text':' OPT_FREE, OPT_LOCAL and/or OPT_GLOBAL','line_number':751,'multiline':False]
['text':' The 'scroll' option must be computed for all windows.','line_number':768,'multiline':False]
['text':'
 * Set the Vi-default value of a string option.
 * Used for 'sh', 'backupskip' and 'term'.
 * When "escape" is TRUE escape spaces with a backslash.
 ','line_number':774,'multiline':True]
['text':' we don't want a NULL','line_number':789,'multiline':False]
['text':'
 * For an option value that contains comma separated items, find "newval" in
 * "origval".  Return NULL if not found.
 ','line_number':808,'multiline':True]
['text':' Count backslashes.  Only a comma with an even number of backslashes','line_number':833,'multiline':False]
['text':' or a single backslash preceded by a comma before it is recognized as','line_number':834,'multiline':False]
['text':' a separator.','line_number':835,'multiline':False]
['text':'
 * Set the Vi-default value of a number option.
 * Used for 'lines' and 'columns'.
 ','line_number':848,'multiline':True]
['text':'
 * Set all window-local and buffer-local options to the Vim default.
 * local-global options will use the global value.
 * When "do_buffer" is FALSE don't set buffer-local options.
 ','line_number':863,'multiline':True]
['text':'
 * Free all options.
 ','line_number':897,'multiline':True]
['text':' global option: free value and default value.','line_number':909,'multiline':False]
['text':' buffer-local option: free global value','line_number':917,'multiline':False]
['text':'
 * Initialize the options, part two: After getting Rows and Columns and
 * setting 'term'.
 ','line_number':926,'multiline':True]
['text':' 'scroll' defaults to half the window height. The stored default is zero,','line_number':935,'multiline':False]
['text':' which results in the actual value computed from the window height.','line_number':936,'multiline':False]
['text':' 'window' is only for backwards compatibility with Vi.','line_number':942,'multiline':False]
['text':' Default is Rows - 1.','line_number':943,'multiline':False]
['text':' For DOS console the default is always black.','line_number':948,'multiline':False]
['text':' If 'background' wasn't set by the user, try guessing the value,','line_number':950,'multiline':False]
['text':' depending on the terminal name.  Only need to check for terminals','line_number':951,'multiline':False]
['text':' with a dark background, that can handle color.','line_number':952,'multiline':False]
['text':' don't mark it as set, when starting the GUI it may be','line_number':958,'multiline':False]
['text':' changed again','line_number':959,'multiline':False]
['text':' set cursor shapes from 'guicursor'','line_number':965,'multiline':False]
['text':' set mouse shapes from 'mouseshape'','line_number':968,'multiline':False]
['text':' parse 'printoptions' default value','line_number':971,'multiline':False]
['text':'
 * Initialize the options, part three: After reading the .vimrc
 ','line_number':975,'multiline':True]
['text':'
 * Set 'shellpipe' and 'shellredir', depending on the 'shell' option.
 * This is done after other initializations, where 'shell' might have been
 * set, but only if they have not been set before.
 ','line_number':982,'multiline':True]
['text':' Default for p_sp is "| tee", for p_srr is ">".','line_number':1010,'multiline':False]
['text':' For known shells it is changed here to include stderr.','line_number':1011,'multiline':False]
['text':' also check with .exe extension','line_number':1014,'multiline':False]
['text':' Windows PowerShell output is UTF-16 with BOM so re-encode to the','line_number':1038,'multiline':False]
['text':' current codepage.','line_number':1039,'multiline':False]
['text':' Always use POSIX shell style redirection if we reach this','line_number':1059,'multiline':False]
['text':'
     * Set 'shellcmdflag', 'shellxquote', and 'shellquote' depending on the
     * 'shell' option.
     * This is done after other initializations, where 'shell' might have been
     * set, but only if they have not been set before.
     * Default values depend on shell (cmd.exe is default shell):
     *
     *			    p_shcf	p_sxq
     * cmd.exe		-   "/c"	"("
     * powershell.exe   -   "-Command"	"\""
     * pwsh.exe		-   "-c"	"\""
     * "sh" like shells -   "-c"	"\""
     *
     * For Win32 p_sxq is set instead of p_shq to include shell redirection.
     ','line_number':1111,'multiline':True]
['text':' Somehow Win32 requires the quotes around the redirection too','line_number':1155,'multiline':False]
['text':'
	 * cmd.exe on Windows will strip the first and last double quote given
	 * on the command line, e.g. most of the time things like:
	 *   cmd /c "my path/to/echo" "my args to echo"
	 * become:
	 *   my path/to/echo" "my args to echo
	 * when executed.
	 *
	 * To avoid this, set shellxquote to surround the command in
	 * parenthesis.  This appears to make most commands work, without
	 * breaking commands that worked previously, such as
	 * '"path with spaces/cmd" "a&b"'.
	 ','line_number':1167,'multiline':True]
['text':' Apply the first entry of 'fileformats' to the initial buffer.','line_number':1200,'multiline':False]
['text':'
 * When 'helplang' is still at its default value, set it to "lang".
 * Only the first two characters of "lang" are used.
 ','line_number':1209,'multiline':True]
['text':' safety check','line_number':1218,'multiline':False]
['text':' zh_CN becomes "cn", zh_TW becomes "tw"','line_number':1231,'multiline':False]
['text':' any C like setting, such as C.UTF-8, becomes "en"','line_number':1237,'multiline':False]
['text':'
 * 'title' and 'icon' only default to true if they have not been set or reset
 * in .vimrc and we can read the old value.
 * When 'title' and 'icon' have been reset in .vimrc, we won't even check if
 * they can be reset.  This reduces startup time when using X on a remote
 * machine.
 ','line_number':1249,'multiline':True]
['text':' If GUI is (going to be) used, we can always set the window title and','line_number':1262,'multiline':False]
['text':' icon name.  Saves a bit of time, because the X11 display server does','line_number':1263,'multiline':False]
['text':' not need to be contacted.','line_number':1264,'multiline':False]
['text':'
 * :set boolean option prefix
 ','line_number':1314,'multiline':True]
['text':' "no" prefix','line_number':1318,'multiline':False]
['text':' no prefix','line_number':1319,'multiline':False]
['text':' "inv" prefix','line_number':1320,'multiline':False]
['text':'
 * Return the prefix type for the option name in *argp.
 ','line_number':1323,'multiline':True]
['text':'
 * Parse the option name in "arg" and return the option index in "*opt_idxp",
 * and the option name length in "*lenp".  For a <t_xx> option, return the key
 * number in "*keyp".
 *
 * Returns FAIL if an option starting with "<" doesn't end with a ">",
 * otherwise returns OK.
 ','line_number':1347,'multiline':True]
['text':' look out for <t_>;>','line_number':1365,'multiline':False]
['text':' put NUL after name','line_number':1377,'multiline':False]
['text':' could be term code','line_number':1378,'multiline':False]
['text':' restore '>'','line_number':1380,'multiline':False]
['text':' next non-white char after option name','line_number':1386,'multiline':False]
['text':' The two characters after "t_" may not be alphanumeric.','line_number':1389,'multiline':False]
['text':' put NUL after name','line_number':1396,'multiline':False]
['text':' restore nextchar','line_number':1398,'multiline':False]
['text':'
 * Get the option operator (+=, ^=, -=).
 ','line_number':1410,'multiline':True]
['text':' "+="','line_number':1421,'multiline':False]
['text':' "^="','line_number':1423,'multiline':False]
['text':' "-="','line_number':1425,'multiline':False]
['text':'
 * Validate whether the value of the option in "opt_idx" can be changed.
 * Returns FAIL if the option can be skipped or cannot be changed. Returns OK
 * if it can be changed.
 ','line_number':1431,'multiline':True]
['text':' Skip all options that are not window-local (used when showing','line_number':1439,'multiline':False]
['text':' an already loaded buffer in a window).','line_number':1440,'multiline':False]
['text':' Skip all options that are window-local (used for :vimgrep).','line_number':1445,'multiline':False]
['text':' Disallow changing some options from modelines.','line_number':1450,'multiline':False]
['text':' In diff mode some options are overruled.  This avoids that','line_number':1464,'multiline':False]
['text':' 'foldmethod' becomes "marker" instead of "diff" and that','line_number':1465,'multiline':False]
['text':' "wrap" gets set.','line_number':1466,'multiline':False]
['text':' shut up coverity warning','line_number':1468,'multiline':False]
['text':' Disallow changing some options in the sandbox','line_number':1479,'multiline':False]
['text':'
 * Get the Vim/Vi default value for a string option.
 ','line_number':1490,'multiline':True]
['text':' guess the value of 'background'','line_number':1506,'multiline':False]
['text':' expand environment variables and ~ since the default value was','line_number':1517,'multiline':False]
['text':' already expanded, only required when an environment variable was set','line_number':1518,'multiline':False]
['text':' later','line_number':1519,'multiline':False]
['text':'
 * Convert the 'backspace' option number value to a string: for adding,
 * prepending and removing string.
 ','line_number':1533,'multiline':True]
['text':'
 * Convert the 'whichwrap' option number value to a string, for backwards
 * compatibility with Vim 3.0.
 * Note: 'argp' is a pointer to a char_u pointer and is updated.
 ','line_number':1572,'multiline':True]
['text':' remove trailing ,','line_number':1592,'multiline':False]
['text':'
 * Copy the new string value into allocated memory for the option.
 * Can't use set_string_option_direct(), because we need to remove the
 * backslashes.
 ','line_number':1598,'multiline':True]
['text':' get a bit too much','line_number':1615,'multiline':False]
['text':' out of mem, don't change','line_number':1620,'multiline':False]
['text':' Copy the string, skip over escaped chars.','line_number':1624,'multiline':False]
['text':' For MS-DOS and WIN32 backslashes before normal file name characters','line_number':1625,'multiline':False]
['text':' are not removed, and keep backslash at start, for "\\machine\path",','line_number':1626,'multiline':False]
['text':' but do remove it for "\\\\machine\\path".','line_number':1627,'multiline':False]
['text':' The reverse is found in escape_option_str_cmdline().','line_number':1628,'multiline':False]
['text':' remove backslash','line_number':1642,'multiline':False]
['text':' copy multibyte char','line_number':1645,'multiline':False]
['text':'
 * Expand environment variables and ~ in string option value 'newval'.
 ','line_number':1659,'multiline':True]
['text':'
 * Concatenate the original and new values of a string option, adding a "," if
 * needed.
 ','line_number':1687,'multiline':True]
['text':' strip a trailing comma, would get 2','line_number':1704,'multiline':False]
['text':'
 * Remove a value from a string option.  Copy string option value in "origval"
 * to "newval" and then remove the string "strval" of length "len".
 ','line_number':1722,'multiline':True]
['text':' Remove newval[] from origval[]. (Note: "len" has been set above','line_number':1734,'multiline':False]
['text':' and is used here).','line_number':1735,'multiline':False]
['text':' may need to remove a comma','line_number':1739,'multiline':False]
['text':' include comma after string','line_number':1744,'multiline':False]
['text':' include comma before string','line_number':1750,'multiline':False]
['text':'
 * Remove flags that appear twice in the string option value 'newval'.
 ','line_number':1759,'multiline':True]
['text':' Remove flags that appear twice.','line_number':1767,'multiline':False]
['text':' if options have P_FLAGLIST and P_ONECOMMA such as 'whichwrap'','line_number':1770,'multiline':False]
['text':' Remove the duplicated value and the next comma.','line_number':1775,'multiline':False]
['text':'
 * Get the string value specified for a ":set" command.  The following set
 * options are supported:
 *	set {opt}&
 *	set {opt}<
 *	set {opt}={val}
 *	set {opt}:{val}
 ','line_number':1793,'multiline':True]
['text':' set to default val','line_number':1826,'multiline':False]
['text':' set to global val','line_number':1828,'multiline':False]
['text':' jump to after the '=' or ':'','line_number':1833,'multiline':False]
['text':' Set 'keywordprg' to ":help" if an empty','line_number':1835,'multiline':False]
['text':' value was passed to :set by the user.','line_number':1836,'multiline':False]
['text':' Convert 'backspace' number to string','line_number':1842,'multiline':False]
['text':' Convert 'whichwrap' number to string, for backwards','line_number':1848,'multiline':False]
['text':' compatibility with Vim 3.0.','line_number':1849,'multiline':False]
['text':' Remove '>' before 'dir' and 'bdir', for backwards compatibility with','line_number':1854,'multiline':False]
['text':' version 3.0','line_number':1855,'multiline':False]
['text':' Copy the new string into allocated memory.','line_number':1860,'multiline':False]
['text':' Expand environment variables and ~.','line_number':1865,'multiline':False]
['text':' Don't do it when adding without inserting a comma.','line_number':1866,'multiline':False]
['text':' locate newval[] in origval[] when removing it and when adding to','line_number':1874,'multiline':False]
['text':' avoid duplicates','line_number':1875,'multiline':False]
['text':' do not add if already there','line_number':1882,'multiline':False]
['text':' if no duplicate, move pointer to end of original value','line_number':1889,'multiline':False]
['text':' concatenate the two strings; add a ',' if needed','line_number':1894,'multiline':False]
['text':' Remove newval[] from origval[]. (Note: "len" has been set above','line_number':1898,'multiline':False]
['text':' and is used here).','line_number':1899,'multiline':False]
['text':' Remove flags that appear twice.','line_number':1903,'multiline':False]
['text':' arg was temporarily changed, restore it','line_number':1909,'multiline':False]
['text':'
 * Part of do_set() for string options.
 * Returns FAIL on failure, do not process further options.
 ','line_number':1920,'multiline':True]
['text':' previous value if *varp','line_number':1942,'multiline':False]
['text':' When using ":set opt=val" for a global option','line_number':1954,'multiline':False]
['text':' with a local value the local value will be','line_number':1955,'multiline':False]
['text':' reset, use the global value here.','line_number':1956,'multiline':False]
['text':' The old value is kept until we are sure that the new value is valid.','line_number':1961,'multiline':False]
['text':' A global-local string option might have an empty option as value to','line_number':1971,'multiline':False]
['text':' indicate that the global value should be used.','line_number':1972,'multiline':False]
['text':' When setting the local value of a global option, the old value may be','line_number':1978,'multiline':False]
['text':' the global value.','line_number':1979,'multiline':False]
['text':' Get the new value for the option','line_number':1985,'multiline':False]
['text':' Set the new value.','line_number':1990,'multiline':False]
['text':' origval may be freed by did_set_string_option(), make a copy.','line_number':2002,'multiline':False]
['text':' newval (and varp) may become invalid if the buffer is closed by','line_number':2004,'multiline':False]
['text':' autocommands.','line_number':2005,'multiline':False]
['text':' When an option is set in the sandbox, from a modeline or in secure','line_number':2018,'multiline':False]
['text':' mode, then deal with side effects in secure mode.  Also when the','line_number':2019,'multiline':False]
['text':' value was set with the P_INSECURE flag and is not completely','line_number':2020,'multiline':False]
['text':' replaced.','line_number':2021,'multiline':False]
['text':' Handle side effects, and set the global value for ":set" on local','line_number':2029,'multiline':False]
['text':' options. Note: when setting 'syntax' or 'filetype' autocommands may','line_number':2030,'multiline':False]
['text':' be triggered that can cause havoc.','line_number':2031,'multiline':False]
['text':'
 * Set a boolean option.
 * Returns an untranslated error message or NULL.
 ','line_number':2053,'multiline':True]
['text':' "cannot happen"','line_number':2074,'multiline':False]
['text':' ":set opt!": invert','line_number':2076,'multiline':False]
['text':' ":set opt&": reset to default value','line_number':2077,'multiline':False]
['text':' ":set opt<": reset to global value','line_number':2078,'multiline':False]
['text':' For 'autoread' -1 means to use global value.','line_number':2086,'multiline':False]
['text':' ":set invopt": invert','line_number':2094,'multiline':False]
['text':' ":set opt" or ":set noopt": set or reset','line_number':2095,'multiline':False]
['text':'
 * Set a numeric option.
 * Returns an untranslated error message or NULL.
 ','line_number':2107,'multiline':True]
['text':' "cannot happen"','line_number':2130,'multiline':False]
['text':'','line_number':2131,'multiline':False]
['text':'
     * Different ways to set a number option:
     * &	    set to default value
     * <	    set to global value
     * <xx>	    accept special key codes for 'wildchar'
     * c	    accept any non-digit for 'wildchar'
     * [-]0-9   set number
     * other    error
     ','line_number':2132,'multiline':True]
['text':' for 'undolevels' NO_LOCAL_UNDOLEVEL means using the global value','line_number':2148,'multiline':False]
['text':' for 'scrolloff'/'sidescrolloff' -1 means using the global value','line_number':2153,'multiline':False]
['text':' Allow negative (for 'undolevels'), octal and hex numbers.','line_number':2174,'multiline':False]
['text':'
 * Set a key code (t_xx) option
 ','line_number':2203,'multiline':True]
['text':' jump to after the '=' or ':'','line_number':2219,'multiline':False]
['text':'
 * Set an option to a new value.
 ','line_number':2236,'multiline':True]
['text':' boolean option','line_number':2262,'multiline':False]
['text':' numeric or string option','line_number':2270,'multiline':False]
['text':' numeric option','line_number':2280,'multiline':False]
['text':' string option','line_number':2289,'multiline':False]
['text':' key code option','line_number':2302,'multiline':False]
['text':'
 * Set an option to a new value.
 * Return NULL if OK, return an untranslated error message when something is
 * wrong.  "errbuf[errbuflen]" can be used to create the error message.
 ','line_number':2317,'multiline':True]
['text':' no prefix, "no" prefix or "inv" prefix','line_number':2335,'multiline':False]
['text':' flags for current option','line_number':2337,'multiline':False]
['text':' pointer to variable for current option','line_number':2338,'multiline':False]
['text':' next non-white char after option name','line_number':2340,'multiline':False]
['text':' character just after option name','line_number':2341,'multiline':False]
['text':' find end of name','line_number':2349,'multiline':False]
['text':' remember character after option name','line_number':2354,'multiline':False]
['text':' disallow white space before =val, +=val, -=val, ^=val','line_number':2361,'multiline':False]
['text':' skip white space, allow ":set ai  ?", ":set hlsearch  !"','line_number':2373,'multiline':False]
['text':' found a mismatch: skip','line_number':2383,'multiline':False]
['text':' hidden option: skip','line_number':2395,'multiline':False]
['text':' Only give an error message when requesting the value of','line_number':2397,'multiline':False]
['text':' a hidden option, ignore setting it.','line_number':2398,'multiline':False]
['text':' Make sure the option value can be changed.','line_number':2425,'multiline':False]
['text':' "opt&vim": set to Vim default','line_number':2435,'multiline':False]
['text':' "opt&vi": set to Vi default','line_number':2440,'multiline':False]
['text':' Allow '=' and ':' for historical reasons (MSDOS command.com).','line_number':2454,'multiline':False]
['text':' Allows only one '=' character per "set" command line. grrr. (jw)','line_number':2455,'multiline':False]
['text':' print value','line_number':2461,'multiline':False]
['text':' cursor below last one','line_number':2463,'multiline':False]
['text':' cursor at status line','line_number':2466,'multiline':False]
['text':' remember that we did a line','line_number':2467,'multiline':False]
['text':' Mention where the option was last set.','line_number':2475,'multiline':False]
['text':'
 * Parse 'arg' for option settings.
 *
 * 'arg' may be IObuff, but only when no errors can be present and option
 * does not need to be expanded with option_expand().
 * "opt_flags":
 * 0 for ":set"
 * OPT_GLOBAL     for ":setglobal"
 * OPT_LOCAL      for ":setlocal" and a modeline
 * OPT_MODELINE   for a modeline
 * OPT_WINONLY    to only set window-local options
 * OPT_NOWIN	  to skip setting window-local options
 * OPT_ONECOLUMN  do not use multiple columns
 *
 * Returns FAIL if an error is detected, OK otherwise.
 ','line_number':2517,'multiline':True]
['text':' option string (may be written to!)','line_number':2535,'multiline':False]
['text':' already showed one value','line_number':2540,'multiline':False]
['text':' loop to process all options','line_number':2549,'multiline':False]
['text':' ":set all"  show all options.','line_number':2554,'multiline':False]
['text':' ":set all&" set all options to their default value.','line_number':2555,'multiline':False]
['text':' Only for :set command set global value of local options.','line_number':2560,'multiline':False]
['text':' Advance to next argument.','line_number':2592,'multiline':False]
['text':' - skip until a blank found, taking care of backslashes','line_number':2593,'multiline':False]
['text':' - skip blanks','line_number':2594,'multiline':False]
['text':' - skip one "=val" argument (for hidden options ":set gfn =xx")','line_number':2595,'multiline':False]
['text':' append the argument with the error','line_number':2612,'multiline':False]
['text':' make sure all characters are printable','line_number':2617,'multiline':False]
['text':' wait_return() done later','line_number':2620,'multiline':False]
['text':' show error highlighted','line_number':2621,'multiline':False]
['text':' After displaying option values in silent mode.','line_number':2634,'multiline':False]
['text':' use mch_msg(), not mch_errmsg()','line_number':2636,'multiline':False]
['text':' msg_start() switches it off','line_number':2638,'multiline':False]
['text':' use mch_msg(), not mch_errmsg()','line_number':2641,'multiline':False]
['text':'
 * Call this when an option has been given a new value through a user command.
 * Sets the P_WAS_SET flag and takes care of the P_INSECURE flag.
 ','line_number':2647,'multiline':True]
['text':' possibly with OPT_MODELINE','line_number':2654,'multiline':False]
['text':' value was replaced completely','line_number':2655,'multiline':False]
['text':' value was checked to be safe, no need to set the','line_number':2656,'multiline':False]
['text':' P_INSECURE flag.','line_number':2657,'multiline':False]
['text':' When an option is set in the sandbox, from a modeline or in secure mode','line_number':2663,'multiline':False]
['text':' set the P_INSECURE flag.  Otherwise, if a new value is stored reset the','line_number':2664,'multiline':False]
['text':' flag.','line_number':2665,'multiline':False]
['text':'
 * Convert a key name or string into a key value.
 * Used for 'wildchar' and 'cedit' options.
 * When "multi_byte" is TRUE allow for multi-byte characters.
 ','line_number':2677,'multiline':True]
['text':'
 * When changing 'title', 'titlestring', 'icon' or 'iconstring', call
 * maketitle() to create and display it.
 * When switching the title or icon off, call mch_restore_title() to get
 * the old value back.
 ','line_number':2694,'multiline':True]
['text':'
 * set_options_bin -  called when 'bin' changes value.
 ','line_number':2711,'multiline':True]
['text':' OPT_LOCAL and/or OPT_GLOBAL','line_number':2718,'multiline':False]
['text':' The option values that are changed when 'bin' changes are','line_number':2720,'multiline':False]
['text':' copied when 'bin is set and restored when 'bin' is reset.','line_number':2721,'multiline':False]
['text':' switched on','line_number':2724,'multiline':False]
['text':' no automatic line wrap','line_number':2744,'multiline':False]
['text':' no automatic line wrap','line_number':2745,'multiline':False]
['text':' no modelines','line_number':2746,'multiline':False]
['text':' no expandtab','line_number':2747,'multiline':False]
['text':' needed when called for the "-b" argument','line_number':2755,'multiline':False]
['text':' switched off','line_number':2758,'multiline':False]
['text':' Remember where the dependent option were reset','line_number':2776,'multiline':False]
['text':'
 * Expand environment variables for some string options.
 * These string options cannot be indirect!
 * If "val" is NULL expand the current value of the option.
 * Return pointer to NameBuff, or NULL when not expanded.
 ','line_number':2781,'multiline':True]
['text':' if option doesn't need expansion nothing to do','line_number':2790,'multiline':False]
['text':' If val is longer than MAXPATHL no meaningful expansion can be done,','line_number':2794,'multiline':False]
['text':' expand_env() would truncate the string.','line_number':2795,'multiline':False]
['text':'
     * Expanding this with NameBuff, expand_env() must not be passed IObuff.
     * Escape spaces when expanding 'tags', they are used to separate file
     * names.
     * For 'spellsuggest' expand after "file:".
     ','line_number':2802,'multiline':True]
['text':' they are the same','line_number':2814,'multiline':False]
['text':'
 * After setting various option values: recompute variables that depend on
 * option values.
 ','line_number':2820,'multiline':True]
['text':' initialize the table for 'iskeyword' et.al.','line_number':2827,'multiline':False]
['text':' set cedit_key','line_number':2838,'multiline':False]
['text':' initialize the table for 'breakat'.','line_number':2841,'multiline':False]
['text':'
 * More side effects of setting options.
 ','line_number':2847,'multiline':True]
['text':' Initialize the highlight_attr[] table.','line_number':2853,'multiline':False]
['text':' Parse default for 'wildmode'','line_number':2856,'multiline':False]
['text':' Parse default for 'listchars'.','line_number':2859,'multiline':False]
['text':' Parse default for 'fillchars'.','line_number':2862,'multiline':False]
['text':' Parse default for 'clipboard'','line_number':2866,'multiline':False]
['text':'
 * Check for string options that are NULL (normally only termcap options).
 ','line_number':2877,'multiline':True]
['text':'
 * Return the option index found by a pointer into term_strings[].
 * Return -1 if not found.
 ','line_number':2890,'multiline':True]
['text':' cannot happen: didn't find it!','line_number':2902,'multiline':False]
['text':'
 * Mark a terminal option as allocated, found by a pointer into term_strings[].
 * Return the option index or -1 if not found.
 ','line_number':2905,'multiline':True]
['text':'
 * Return TRUE when option "opt" was set from a modeline or in secure mode.
 * Return FALSE when it wasn't.
 * Return -1 for an unknown option.
 ','line_number':2920,'multiline':True]
['text':'
 * Get a pointer to the flags used for the P_INSECURE flag of option
 * "opt_idx".  For some local options a local flags field is used.
 * NOTE: Caller must make sure that "curwin" is set to the window from which
 * the option is used.
 ','line_number':2940,'multiline':True]
['text':' Nothing special, return global flags field.','line_number':2971,'multiline':False]
['text':'
 * Redraw the window title and/or tab page text later.
 ','line_number':2976,'multiline':True]
['text':'
 * Return TRUE if "val" is a valid name: only consists of alphanumeric ASCII
 * characters or characters in "allowed".
 ','line_number':2986,'multiline':True]
['text':'
 * Set the script_ctx for an option, taking care of setting the buffer- or
 * window-local value.
 ','line_number':3002,'multiline':True]
['text':' Modeline already has the line number set.','line_number':3013,'multiline':False]
['text':' Remember where the option was set.  For local options need to do that','line_number':3017,'multiline':False]
['text':' in the buffer or window structure.','line_number':3018,'multiline':False]
['text':' also setting the "all buffers" value','line_number':3029,'multiline':False]
['text':'
 * Get the script context of global option "name".
 *
 ','line_number':3036,'multiline':True]
['text':'
 * Set the script_ctx for a termcap option.
 * "name" must be the two character code, e.g. "RV".
 * When "name" is NULL use "opt_idx".
 ','line_number':3051,'multiline':True]
['text':'
 * Apply the OptionSet autocommand.
 ','line_number':3079,'multiline':True]
['text':' Don't do this while starting up, failure or recursively.','line_number':3093,'multiline':False]
['text':'
 * Process the updated 'arabic' option value.
 ','line_number':3134,'multiline':True]
['text':' 'arabic' is set, handle various sub-settings.','line_number':3144,'multiline':False]
['text':' set rightleft mode','line_number':3147,'multiline':False]
['text':' Enable Arabic shaping (major part of what Arabic requires)','line_number':3154,'multiline':False]
['text':' Arabic requires a utf-8 encoding, inform the user if it's not','line_number':3162,'multiline':False]
['text':' set.','line_number':3163,'multiline':False]
['text':' set 'delcombine'','line_number':3175,'multiline':False]
['text':' Force-set the necessary keymap for arabic','line_number':3179,'multiline':False]
['text':' 'arabic' is reset, handle various sub-settings.','line_number':3186,'multiline':False]
['text':' reset rightleft mode','line_number':3189,'multiline':False]
['text':' 'arabicshape' isn't reset, it is a global option and','line_number':3196,'multiline':False]
['text':' another window may still need it "on".','line_number':3197,'multiline':False]
['text':' 'delcombine' isn't reset, it is a global option and another','line_number':3200,'multiline':False]
['text':' window may still want it "on".','line_number':3201,'multiline':False]
['text':' Revert to the default keymap','line_number':3204,'multiline':False]
['text':'
 * Process the updated 'autochdir' option value.
 ','line_number':3215,'multiline':True]
['text':' Change directories when the 'acd' option is set now.','line_number':3221,'multiline':False]
['text':'
 * Process the updated 'ballooneval' option value.
 ','line_number':3228,'multiline':True]
['text':'
 * Process the updated 'balloonevalterm' option value.
 ','line_number':3247,'multiline':True]
['text':'
 * Process the updated 'binary' option value.
 ','line_number':3258,'multiline':True]
['text':' when 'bin' is set also set some other options','line_number':3264,'multiline':False]
['text':'
 * Called when the 'breakat' option changes value.
 ','line_number':3272,'multiline':True]
['text':'
 * Process the updated 'buflisted' option value.
 ','line_number':3292,'multiline':True]
['text':' when 'buflisted' changes, trigger autocommands','line_number':3298,'multiline':False]
['text':'
 * Process the new 'cmdheight' option value.
 ','line_number':3305,'multiline':True]
['text':' if p_ch changed value, change the command line height','line_number':3314,'multiline':False]
['text':' Only compute the new window layout when startup has been','line_number':3323,'multiline':False]
['text':' completed. Otherwise the frame sizes may be wrong.','line_number':3324,'multiline':False]
['text':'
 * Process the updated 'compatible' option value.
 ','line_number':3337,'multiline':True]
['text':'
 * Process the new 'conceallevel' option value.
 ','line_number':3348,'multiline':True]
['text':'
 * Process the updated 'diff' option value.
 ','line_number':3372,'multiline':True]
['text':' May add or remove the buffer from the list of diff buffers.','line_number':3378,'multiline':False]
['text':'
 * Process the updated 'endoffile' or 'endofline' or 'fixendofline' or 'bomb'
 * option value.
 ','line_number':3388,'multiline':True]
['text':' redraw the window title and tab page text','line_number':3395,'multiline':False]
['text':'
 * Process the updated 'equalalways' option value.
 ','line_number':3400,'multiline':True]
['text':'
 * Process the new 'foldcolumn' option value.
 ','line_number':3413,'multiline':True]
['text':'
 * Process the new 'foldlevel' option value.
 ','line_number':3435,'multiline':True]
['text':'
 * Process the new 'foldminlines' option value.
 ','line_number':3447,'multiline':True]
['text':'
 * Process the new 'foldnestmax' option value.
 ','line_number':3457,'multiline':True]
['text':'
 * Process the updated 'hlsearch' option value.
 ','line_number':3470,'multiline':True]
['text':' when 'hlsearch' is set or reset: reset no_hlsearch','line_number':3476,'multiline':False]
['text':'
 * Process the updated 'ignorecase' option value.
 ','line_number':3482,'multiline':True]
['text':' when 'ignorecase' is set or reset and 'hlsearch' is set, redraw','line_number':3488,'multiline':False]
['text':'
 * Process the updated 'imdisable' option value.
 ','line_number':3495,'multiline':True]
['text':' Only de-activate it here, it will be enabled when changing mode.','line_number':3501,'multiline':False]
['text':' When the option is set from an autocommand, it may need to take','line_number':3505,'multiline':False]
['text':' effect right away.','line_number':3506,'multiline':False]
['text':'
 * Process the new 'iminsert' option value.
 ','line_number':3512,'multiline':True]
['text':' don't do this in the alternate screen','line_number':3526,'multiline':False]
['text':' Show/unshow value of 'keymap' in status lines.','line_number':3529,'multiline':False]
['text':'
 * Process the new 'imsearch' option value.
 ','line_number':3536,'multiline':True]
['text':'
 * Process the new 'imstyle' option value.
 ','line_number':3555,'multiline':True]
['text':'
 * Process the updated 'insertmode' option value.
 ','line_number':3570,'multiline':True]
['text':' when 'insertmode' is set from an autocommand need to do work here','line_number':3576,'multiline':False]
['text':' only reset if it was set previously','line_number':3583,'multiline':False]
['text':' remove "(insert)"','line_number':3589,'multiline':False]
['text':'
 * Process the updated 'langnoremap' option value.
 ','line_number':3597,'multiline':True]
['text':' 'langnoremap' -> !'langremap'','line_number':3603,'multiline':False]
['text':'
 * Process the updated 'langremap' option value.
 ','line_number':3608,'multiline':True]
['text':' 'langremap' -> !'langnoremap'','line_number':3614,'multiline':False]
['text':'
 * Process the new 'laststatus' option value.
 ','line_number':3620,'multiline':True]
['text':' (re)set last window status line','line_number':3626,'multiline':False]
['text':'
 * Process the new 'linespace' option value.
 ','line_number':3631,'multiline':True]
['text':' Recompute gui.char_height and resize the Vim window to keep the','line_number':3637,'multiline':False]
['text':' same number of lines.','line_number':3638,'multiline':False]
['text':'
 * Process the updated 'lisp' option value.
 ','line_number':3645,'multiline':True]
['text':' When 'lisp' option changes include/exclude '-' in keyword characters.','line_number':3651,'multiline':False]
['text':' ignore errors','line_number':3652,'multiline':False]
['text':'
 * Process the new 'maxcombine' option value.
 ','line_number':3656,'multiline':True]
['text':' will re-allocate the screen','line_number':3666,'multiline':False]
['text':'
 * Process the updated 'modifiable' option value.
 ','line_number':3670,'multiline':True]
['text':' when 'modifiable' is changed, redraw the window title','line_number':3676,'multiline':False]
['text':' Cannot set 'modifiable' when in Terminal mode.','line_number':3679,'multiline':False]
['text':'
 * Process the updated 'modified' option value.
 ','line_number':3692,'multiline':True]
['text':' Buffer is unchanged','line_number':3699,'multiline':False]
['text':'
 * Process the updated 'mousehide' option value.
 ','line_number':3706,'multiline':True]
['text':'
 * Process the updated 'number' or 'relativenumber' option value.
 ','line_number':3718,'multiline':True]
['text':' If the 'number' or 'relativenumber' options are modified and','line_number':3729,'multiline':False]
['text':' 'signcolumn' is set to 'number', then clear the screen for a full','line_number':3730,'multiline':False]
['text':' refresh. Otherwise the sign icons are not displayed properly in the','line_number':3731,'multiline':False]
['text':' number column.  If the 'number' option is set and only the','line_number':3732,'multiline':False]
['text':' 'relativenumber' option is toggled, then don't refresh the screen','line_number':3733,'multiline':False]
['text':' (optimization).','line_number':3734,'multiline':False]
['text':'
 * Process the new 'numberwidth' option value.
 ','line_number':3743,'multiline':True]
['text':' 'numberwidth' must be positive','line_number':3751,'multiline':False]
['text':' trigger a redraw','line_number':3762,'multiline':False]
['text':'
 * Process the updated 'paste' option value.  Called after p_paste was set or
 * reset.  When 'paste' is set or reset also change other options.
 ','line_number':3768,'multiline':True]
['text':' Paste switched from off to on.','line_number':3787,'multiline':False]
['text':' Save the current values, so they can be restored later.','line_number':3788,'multiline':False]
['text':' save options for each buffer','line_number':3791,'multiline':False]
['text':' save global options','line_number':3808,'multiline':False]
['text':' save global values for local buffer options','line_number':3816,'multiline':False]
['text':' Always set the option values, also when 'paste' is set when it is','line_number':3830,'multiline':False]
['text':' already on.  Set options for each buffer.','line_number':3831,'multiline':False]
['text':' textwidth is 0','line_number':3834,'multiline':False]
['text':' wrapmargin is 0','line_number':3835,'multiline':False]
['text':' softtabstop is 0','line_number':3836,'multiline':False]
['text':' no auto-indent','line_number':3837,'multiline':False]
['text':' no expandtab','line_number':3838,'multiline':False]
['text':' set global options','line_number':3847,'multiline':False]
['text':' no showmatch','line_number':3848,'multiline':False]
['text':' no smarttab','line_number':3849,'multiline':False]
['text':' redraw to remove the ruler','line_number':3851,'multiline':False]
['text':' no ruler','line_number':3852,'multiline':False]
['text':' no reverse insert','line_number':3854,'multiline':False]
['text':' no Hebrew keyboard','line_number':3855,'multiline':False]
['text':' set global values for local buffer options','line_number':3857,'multiline':False]
['text':' Paste switched from on to off: Restore saved values.','line_number':3870,'multiline':False]
['text':' restore options for each buffer','line_number':3873,'multiline':False]
['text':' restore global options','line_number':3894,'multiline':False]
['text':' redraw to draw the ruler','line_number':3898,'multiline':False]
['text':' set global values for local buffer options','line_number':3904,'multiline':False]
['text':' Remember where the dependent options were reset','line_number':3920,'multiline':False]
['text':'
 * Process the updated 'previewwindow' option value.
 ','line_number':3929,'multiline':True]
['text':' There can be only one window with 'previewwindow' set.','line_number':3938,'multiline':False]
['text':'
 * Process the new 'pyxversion' option value.
 ','line_number':3953,'multiline':True]
['text':'
 * Process the updated 'readonly' option value.
 ','line_number':3968,'multiline':True]
['text':' when 'readonly' is reset globally, also reset readonlymode','line_number':3974,'multiline':False]
['text':' when 'readonly' is set may give W10 again','line_number':3978,'multiline':False]
['text':'
 * Process the updated 'scrollbind' option value.
 ','line_number':3987,'multiline':True]
['text':' when 'scrollbind' is set: snapshot the current position to avoid a jump','line_number':3993,'multiline':False]
['text':' at the end of normal_cmd()','line_number':3994,'multiline':False]
['text':'
 * Process the updated 'shellslash' option value.
 ','line_number':4004,'multiline':True]
['text':' need to adjust the file name arguments and buffer names.','line_number':4023,'multiline':False]
['text':'
 * Process the new 'shiftwidth' or the 'tabstop' option value.
 ','line_number':4033,'multiline':True]
['text':' Use the first 'vartabstop' value, or 'tabstop' if vts isn't in use.','line_number':4046,'multiline':False]
['text':' When 'shiftwidth' changes, or it's zero and 'tabstop' changes:','line_number':4059,'multiline':False]
['text':' parse 'cinoptions'.','line_number':4060,'multiline':False]
['text':'
 * Process the new 'showtabline' option value.
 ','line_number':4067,'multiline':True]
['text':' recompute window positions and heights','line_number':4073,'multiline':False]
['text':'
 * Process the updated 'smoothscroll' option value.
 ','line_number':4077,'multiline':True]
['text':'
 * Process the updated 'spell' option value.
 ','line_number':4090,'multiline':True]
['text':'
 * Process the updated 'swapfile' option value.
 ','line_number':4103,'multiline':True]
['text':' when 'swf' is set, create swapfile, when reset remove swapfile','line_number':4109,'multiline':False]
['text':' create the swap file','line_number':4111,'multiline':False]
['text':' no need to reset curbuf->b_may_swap, ml_open_file() will check','line_number':4113,'multiline':False]
['text':' buf->b_p_swf','line_number':4114,'multiline':False]
['text':' remove the swap file','line_number':4115,'multiline':False]
['text':' Do not turn on 'tgc' when 24-bit colors are not supported.','line_number':4124,'multiline':False]
['text':' reset t_Co','line_number':4142,'multiline':False]
['text':'
 * Process the updated 'terse' option value.
 ','line_number':4160,'multiline':True]
['text':' when 'terse' is set change 'shortmess'','line_number':4168,'multiline':False]
['text':' insert 's' in p_shm','line_number':4171,'multiline':False]
['text':' remove 's' from p_shm','line_number':4178,'multiline':False]
['text':'
 * Process the updated 'textauto' option value.
 ','line_number':4184,'multiline':True]
['text':' when 'textauto' is set or reset also change 'fileformats'','line_number':4190,'multiline':False]
['text':'
 * Process the updated 'textmode' option value.
 ','line_number':4198,'multiline':True]
['text':' when 'textmode' is set or reset also change 'fileformat'','line_number':4204,'multiline':False]
['text':'
 * Process the new 'textwidth' option value.
 ','line_number':4210,'multiline':True]
['text':'
 * Process the updated 'title' or the 'icon' option value.
 ','line_number':4236,'multiline':True]
['text':' when 'title' changed, may need to change the title; same for 'icon'','line_number':4242,'multiline':False]
['text':'
 * Process the new 'titlelen' option value.
 ','line_number':4247,'multiline':True]
['text':' if 'titlelen' has changed, redraw the title','line_number':4256,'multiline':False]
['text':'
 * Process the updated 'undofile' option value.
 ','line_number':4269,'multiline':True]
['text':' Only take action when the option was set.','line_number':4275,'multiline':False]
['text':' When reset we do not delete the undo file, the option may be set again','line_number':4279,'multiline':False]
['text':' without making any changes in between.','line_number':4280,'multiline':False]
['text':' When 'undofile' is set globally: for every buffer, otherwise','line_number':4286,'multiline':False]
['text':' only for the current buffer: Try to read in the undofile,','line_number':4287,'multiline':False]
['text':' if one exists, the buffer wasn't changed and the buffer was','line_number':4288,'multiline':False]
['text':' loaded','line_number':4289,'multiline':False]
['text':'
 * Process the new global 'undolevels' option value.
 ','line_number':4309,'multiline':True]
['text':' sync undo before 'undolevels' changes','line_number':4315,'multiline':False]
['text':' use the old value, otherwise u_sync() may not work properly','line_number':4317,'multiline':False]
['text':'
 * Process the new buffer local 'undolevels' option value.
 ','line_number':4323,'multiline':True]
['text':' use the old value, otherwise u_sync() may not work properly','line_number':4329,'multiline':False]
['text':'
 * Process the new 'undolevels' option value.
 ','line_number':4335,'multiline':True]
['text':' global 'undolevels'','line_number':4343,'multiline':False]
['text':' buffer local 'undolevels'','line_number':4346,'multiline':False]
['text':'
 * Process the new 'updatecount' option value.
 ','line_number':4353,'multiline':True]
['text':' when 'updatecount' changes from zero to non-zero, open swap files','line_number':4362,'multiline':False]
['text':'
 * Process the updated 'weirdinvert' option value.
 ','line_number':4374,'multiline':True]
['text':' When 'weirdinvert' changed, set/reset 't_xs'.','line_number':4380,'multiline':False]
['text':' Then set 'weirdinvert' according to value of 't_xs'.','line_number':4381,'multiline':False]
['text':'
 * Process the new 'wildchar' / 'wildcharm' option value.
 ','line_number':4391,'multiline':True]
['text':' Don't allow key values that wouldn't work as wildchar.','line_number':4399,'multiline':False]
['text':'
 * Process the new 'window' option value.
 ','line_number':4406,'multiline':True]
['text':'
 * Process the new 'winheight' or the 'helpheight' option value.
 ','line_number':4419,'multiline':True]
['text':' Change window height NOW','line_number':4444,'multiline':False]
['text':'
 * Process the new 'winminheight' option value.
 ','line_number':4456,'multiline':True]
['text':'
 * Process the new 'winminwidth' option value.
 ','line_number':4479,'multiline':True]
['text':'
 * Process the new 'winwidth' option value.
 ','line_number':4502,'multiline':True]
['text':' Change window width NOW','line_number':4521,'multiline':False]
['text':'
 * Process the updated 'wrap' option value.
 ','line_number':4528,'multiline':True]
['text':' Set w_leftcol or w_skipcol to zero.','line_number':4534,'multiline':False]
['text':'
 * Set the value of a boolean option, and take care of side effects.
 * Returns NULL for success, or an error message for an error.
 ','line_number':4543,'multiline':True]
['text':' index in options[] table','line_number':4549,'multiline':False]
['text':' pointer to the option variable','line_number':4550,'multiline':False]
['text':' new value','line_number':4551,'multiline':False]
['text':' OPT_LOCAL and/or OPT_GLOBAL','line_number':4552,'multiline':False]
['text':' Disallow changing some options from secure mode','line_number':4560,'multiline':False]
['text':' Save the global value before changing anything. This is needed as for','line_number':4569,'multiline':False]
['text':' a global-only option setting the "local value" in fact sets the global','line_number':4570,'multiline':False]
['text':' value (since there is only one value).','line_number':4571,'multiline':False]
['text':' set the new value','line_number':4577,'multiline':False]
['text':' Remember where the option was set.','line_number':4579,'multiline':False]
['text':' May set global value for local option.','line_number':4587,'multiline':False]
['text':' Handle side effects of changing a bool option.','line_number':4591,'multiline':False]
['text':' after handling side effects, call autocommand','line_number':4607,'multiline':False]
['text':' in case 'ruler' or 'showcmd' changed','line_number':4618,'multiline':False]
['text':'
 * Check the bounds of numeric options.
 ','line_number':4629,'multiline':True]
['text':' If the screen (shell) height has been changed, assume it is the','line_number':4664,'multiline':False]
['text':' physical screenheight.','line_number':4665,'multiline':False]
['text':' Changing the screen size is not allowed while updating the screen.','line_number':4668,'multiline':False]
['text':' Postpone the resizing; check the size and cmdline position for','line_number':4679,'multiline':False]
['text':' messages.','line_number':4680,'multiline':False]
['text':' If 'scroll' became invalid because of a side effect silently adjust','line_number':4715,'multiline':False]
['text':' it.','line_number':4716,'multiline':False]
['text':' curwin->w_p_scr > curwin->w_height','line_number':4719,'multiline':False]
['text':' Rows changed, just adjust p_sj','line_number':4744,'multiline':False]
['text':'
 * Set the value of a number option, and take care of side effects.
 * Returns NULL for success, or an error message for an error.
 ','line_number':4781,'multiline':True]
['text':' index in options[] table','line_number':4787,'multiline':False]
['text':' pointer to the option variable','line_number':4788,'multiline':False]
['text':' new value','line_number':4789,'multiline':False]
['text':' buffer for error messages','line_number':4790,'multiline':False]
['text':' length of "errbuf"','line_number':4791,'multiline':False]
['text':' OPT_LOCAL, OPT_GLOBAL,','line_number':4792,'multiline':False]
['text':' OPT_MODELINE, etc.','line_number':4793,'multiline':False]
['text':' only used when setting a local and','line_number':4798,'multiline':False]
['text':' global option','line_number':4799,'multiline':False]
['text':' remember old Rows','line_number':4801,'multiline':False]
['text':' remember old Columns','line_number':4802,'multiline':False]
['text':' Disallow changing some options from secure mode.','line_number':4805,'multiline':False]
['text':' Save the global value before changing anything. This is needed as for','line_number':4814,'multiline':False]
['text':' a global-only option setting the "local value" in fact sets the global','line_number':4815,'multiline':False]
['text':' value (since there is only one value).','line_number':4816,'multiline':False]
['text':' Remember where the option was set.','line_number':4824,'multiline':False]
['text':' Invoke the option specific callback function to validate and apply the','line_number':4831,'multiline':False]
['text':' new value.','line_number':4832,'multiline':False]
['text':' Check the bounds for numeric options here','line_number':4846,'multiline':False]
['text':' May set global value for local option.','line_number':4850,'multiline':False]
['text':' in case 'columns' or 'ls' changed','line_number':4861,'multiline':False]
['text':'
 * Called after an option changed: check if something needs to be redrawn.
 ','line_number':4871,'multiline':True]
['text':' Careful: P_RCLR and P_RALL are a combination of other P_ flags','line_number':4877,'multiline':False]
['text':' mark all status lines dirty','line_number':4881,'multiline':False]
['text':'
 * Find index for option 'arg'.
 * Return -1 if not found.
 ','line_number':4896,'multiline':True]
['text':' quick access table','line_number':4905,'multiline':False]
['text':' For first call: Initialize the quick-access table.','line_number':4908,'multiline':False]
['text':' It contains the index for the first option that starts with a certain','line_number':4909,'multiline':False]
['text':' letter.  There are 26 letters, plus the first "t_" option.','line_number':4910,'multiline':False]
['text':' Check for name starting with an illegal character.','line_number':4927,'multiline':False]
['text':' match full name','line_number':4938,'multiline':False]
['text':' match short name','line_number':4949,'multiline':False]
['text':'
 * Get the value for an option.
 *
 * Returns:
 * Number option: gov_number, *numval gets value.
 * Toggle option: gov_bool,   *numval gets value.
 * String option: gov_string, *stringval gets allocated string.
 * Hidden Number option: gov_hidden_number.
 * Hidden Toggle option: gov_hidden_bool.
 * Hidden String option: gov_hidden_string.
 * Unknown option: gov_unknown.
 *
 * "flagsp" (if not NULL) is set to the option flags (P_xxxx).
 ','line_number':4961,'multiline':True]
['text':' NULL when only checking existence','line_number':4979,'multiline':False]
['text':' option not in the table','line_number':4987,'multiline':False]
['text':' terminal option has no flags','line_number':4998,'multiline':False]
['text':' check for a terminal option','line_number':5000,'multiline':False]
['text':' Return the P_xxxx option flags.','line_number':5025,'multiline':False]
['text':' hidden option','line_number':5030,'multiline':False]
['text':' 'pastetoggle'','line_number':5034,'multiline':False]
['text':' never return the value of the crypt key','line_number':5038,'multiline':False]
['text':' hidden option','line_number':5049,'multiline':False]
['text':' Special case: 'modified' is b_changed, but we also want to consider','line_number':5056,'multiline':False]
['text':' it set when 'ff' or 'fenc' changed.','line_number':5057,'multiline':False]
['text':'
 * Returns the option attributes and its value. Unlike the above function it
 * will return either global value or local value of the option depending on
 * what was requested, but it will never return global value if it was
 * requested to return local one and vice versa. Neither it will return
 * buffer-local value if it was requested to return window-local one.
 *
 * Pretends that option is absent if it is not present in the requested scope
 * (i.e. has no global, window-local or buffer-local value depending on
 * opt_type). Uses
 *
 * Returned flags:
 *       0 hidden or unknown option, also option that does not have requested
 *	   type (see SREQ_* in vim.h)
 *  see SOPT_* in vim.h for other flags
 *
 * Possible opt_type values: see SREQ_* in vim.h
 ','line_number':5068,'multiline':True]
['text':' NULL when only obtaining attributes','line_number':5090,'multiline':False]
['text':' Hidden option','line_number':5105,'multiline':False]
['text':' Did not request global-only option','line_number':5121,'multiline':False]
['text':' Requested global option','line_number':5128,'multiline':False]
['text':' Did not request window-local option','line_number':5133,'multiline':False]
['text':' Did not request buffer-local option','line_number':5140,'multiline':False]
['text':' Special case: 'modified' is b_changed, but we also want to','line_number':5155,'multiline':False]
['text':' consider it set when 'ff' or 'fenc' changed.','line_number':5156,'multiline':False]
['text':' never return the value of the crypt key','line_number':5165,'multiline':False]
['text':' only getting a pointer, no need to use aucmd_prepbuf()','line_number':5174,'multiline':False]
['text':'
 * Iterate over options. First argument is a pointer to a pointer to a
 * structure inside options[] array, second is option type like in the above
 * function.
 *
 * If first argument points to NULL it is assumed that iteration just started
 * and caller needs the very first value.
 * If first argument points to the end marker function returns NULL and sets
 * first argument to NULL.
 *
 * Returns full option name for current option on each call.
 ','line_number':5209,'multiline':True]
['text':' Hidden option','line_number':5239,'multiline':False]
['text':'
 * Return the flags for the option at 'opt_idx'.
 ','line_number':5271,'multiline':True]
['text':'
 * Set a flag for the option at 'opt_idx'.
 ','line_number':5280,'multiline':True]
['text':'
 * Returns TRUE if the option at 'opt_idx' is a global option
 ','line_number':5289,'multiline':True]
['text':'
 * Returns TRUE if the option at 'opt_idx' is a global option which also has a
 * local value.
 ','line_number':5298,'multiline':True]
['text':'
 * Returns TRUE if the option at 'opt_idx' is a window-local option
 ','line_number':5308,'multiline':True]
['text':'
 * Returns TRUE if the option at 'opt_idx' is a hidden option
 ','line_number':5317,'multiline':True]
['text':'
 * Returns TRUE if the option at 'opt_idx' is a crypt key option
 ','line_number':5327,'multiline':True]
['text':'
 * Set the value of option "name".
 * Use "string" for string options, use "number" for other options.
 *
 * Returns NULL on success or an untranslated error message on error.
 ','line_number':5337,'multiline':True]
['text':' OPT_LOCAL or 0 (both)','line_number':5348,'multiline':False]
['text':' Disallow changing some options in the sandbox','line_number':5389,'multiline':False]
['text':' hidden option is not changed','line_number':5400,'multiline':False]
['text':' Either we are given a string or we are setting option','line_number':5406,'multiline':False]
['text':' to zero.','line_number':5407,'multiline':False]
['text':' There's another character after zeros or the string','line_number':5412,'multiline':False]
['text':' is empty.  In both cases, we are trying to set a','line_number':5413,'multiline':False]
['text':' num option using a string.','line_number':5414,'multiline':False]
['text':' do nothing as we hit an error','line_number':5417,'multiline':False]
['text':'
 * Call set_option_value() and when an error is returned report it.
 ','line_number':5434,'multiline':True]
['text':' OPT_LOCAL or 0 (both)','line_number':5442,'multiline':False]
['text':'
 * Get the terminal code for a terminal option.
 * Returns NULL when not found.
 ','line_number':5450,'multiline':True]
['text':'
 * Translate a string like "t_xx", "<t_xx>" or "<S-Tab>" to a key number.
 * When "has_lt" is true there is a '<' before "*arg_arg".
 * Returns 0 when the key is not recognized.
 ','line_number':5505,'multiline':True]
['text':' Don't use get_special_key_code() for t_xx, we don't want it to call','line_number':5517,'multiline':False]
['text':' add_termcap_entry().','line_number':5518,'multiline':False]
['text':' put arg at the '<'','line_number':5523,'multiline':False]
['text':' can't handle modifiers here','line_number':5527,'multiline':False]
['text':'
 * if 'all' == 0: show changed options
 * if 'all' == 1: show all normal options
 * if 'all' == 2: show all terminal options
 ','line_number':5533,'multiline':True]
['text':' OPT_LOCAL and/or OPT_GLOBAL','line_number':5541,'multiline':False]
['text':' Highlight title','line_number':5562,'multiline':False]
['text':' Do the loop two times:','line_number':5572,'multiline':False]
['text':' 1. display the short items','line_number':5573,'multiline':False]
['text':' 2. display the long items (only strings and numbers)','line_number':5574,'multiline':False]
['text':' When "opt_flags" has OPT_ONECOLUMN do everything in run 2.','line_number':5575,'multiline':False]
['text':' collect the items in items[]','line_number':5578,'multiline':False]
['text':' apply :filter /pat/','line_number':5582,'multiline':False]
['text':' a toggle option fits always','line_number':5603,'multiline':False]
['text':' display the items','line_number':5615,'multiline':False]
['text':' run == 2','line_number':5623,'multiline':False]
['text':' go to next line','line_number':5627,'multiline':False]
['text':' 'q' typed in more','line_number':5628,'multiline':False]
['text':' make columns','line_number':5633,'multiline':False]
['text':'
 * Return TRUE if option "p" has its default value.
 ','line_number':5644,'multiline':True]
['text':' hidden option is always at default','line_number':5653,'multiline':False]
['text':' the cast to long is required for Manx C, long_i is','line_number':5658,'multiline':False]
['text':' needed for MSVC','line_number':5659,'multiline':False]
['text':' P_STRING','line_number':5661,'multiline':False]
['text':'
 * showoneopt: show the value of one option
 * must not be called with a hidden option!
 ','line_number':5665,'multiline':True]
['text':' OPT_LOCAL or OPT_GLOBAL','line_number':5672,'multiline':False]
['text':' use mch_msg(), not mch_errmsg()','line_number':5678,'multiline':False]
['text':' for 'modified' we also need to check if 'ff' or 'fenc' changed.','line_number':5682,'multiline':False]
['text':' put value string in NameBuff','line_number':5694,'multiline':False]
['text':'
 * Write modified options as ":set" commands to a file.
 *
 * There are three values for "opt_flags":
 * OPT_GLOBAL:		   Write global option values and fresh values of
 *			   buffer-local options (used for start of a session
 *			   file).
 * OPT_GLOBAL + OPT_LOCAL: Idem, add fresh values of window-local options for
 *			   curwin (used for a vimrc file).
 * OPT_LOCAL:		   Write buffer-local option values for curbuf, fresh
 *			   and local values for window-local options of
 *			   curwin.  Local values are also written when at the
 *			   default value, because a modeline or autocommand
 *			   may have set them when doing ":edit file" and the
 *			   user has set them back at the default or fresh
 *			   value.
 *			   When "local_only" is TRUE, don't write fresh
 *			   values, only local values (for ":mkview").
 * (fresh value = value used for a new buffer or window for a local option).
 *
 * Return FAIL on error, OK otherwise.
 ','line_number':5703,'multiline':True]
['text':' currently used value','line_number':5729,'multiline':False]
['text':' local value','line_number':5730,'multiline':False]
['text':' fresh value','line_number':5731,'multiline':False]
['text':'
     * The options that don't have a default (terminal name, columns, lines)
     * are never written.  Terminal options are also not written.
     * Do the loop over "options[]" twice: once for options with the
     * P_PRI_MKRC flag and once without.
     ','line_number':5736,'multiline':True]
['text':' skip global option when only doing locals','line_number':5749,'multiline':False]
['text':' Do not store options like 'bufhidden' and 'syntax' in a vimrc','line_number':5753,'multiline':False]
['text':' file, they are always buffer-specific.','line_number':5754,'multiline':False]
['text':' Global values are only written when not at the default value.','line_number':5758,'multiline':False]
['text':' skip window-local option when only doing globals','line_number':5772,'multiline':False]
['text':' When fresh value of window-local option is not at the','line_number':5775,'multiline':False]
['text':' default, need to write it too.','line_number':5776,'multiline':False]
['text':' Round 1: fresh value for window-local options.','line_number':5790,'multiline':False]
['text':' Round 2: other values','line_number':5791,'multiline':False]
['text':' P_STRING','line_number':5809,'multiline':False]
['text':' Don't set 'syntax' and 'filetype' again if the value is','line_number':5813,'multiline':False]
['text':' already right, avoids reloading the syntax file.','line_number':5814,'multiline':False]
['text':'
 * Generate set commands for the local fold options only.  Used when
 * 'sessionoptions' or 'viewoptions' contains "folds" but not "options".
 ','line_number':5843,'multiline':True]
['text':' Output 'pastetoggle' as key names.  For other','line_number':5887,'multiline':False]
['text':' options some characters have to be escaped with','line_number':5888,'multiline':False]
['text':' CTRL-V or backslash','line_number':5889,'multiline':False]
['text':' expand the option value, replace $HOME by ~','line_number':5897,'multiline':False]
['text':' replace home directory in the whole option value into "buf"','line_number':5902,'multiline':False]
['text':' If the option value is longer than MAXPATHL, we need to append','line_number':5908,'multiline':False]
['text':' each comma separated part of the option separately, so that it','line_number':5909,'multiline':False]
['text':' can be expanded when read back.','line_number':5910,'multiline':False]
['text':' write line break to clear the option, e.g. ':set rtp='','line_number':5918,'multiline':False]
['text':' for each comma separated option part, append value to','line_number':5925,'multiline':False]
['text':' the option, :set rtp+=value','line_number':5926,'multiline':False]
['text':' print 'wildchar' and 'wildcharm' as a key name','line_number':5969,'multiline':False]
['text':' global/local option using global value','line_number':5987,'multiline':False]
['text':'
 * Clear all the terminal options.
 * If the option has been allocated, free the memory.
 * Terminal options are never hidden or indirect.
 ','line_number':5995,'multiline':True]
['text':' Reset a few things before clearing the old options. This may cause','line_number':6003,'multiline':False]
['text':' outputting a few things that the terminal doesn't understand, but the','line_number':6004,'multiline':False]
['text':' screen will be cleared later, so this is OK.','line_number':6005,'multiline':False]
['text':' switch mouse off','line_number':6006,'multiline':False]
['text':' restore window titles','line_number':6007,'multiline':False]
['text':' When starting the GUI close the display opened for the clipboard.','line_number':6009,'multiline':False]
['text':' After restoring the title, because that will need the display.','line_number':6010,'multiline':False]
['text':' stop termcap mode','line_number':6014,'multiline':False]
['text':' remember where the option was cleared','line_number':6035,'multiline':False]
['text':'
 * Free the string for one term option, if it was allocated.
 * Set the string to empty_option and clear allocated flag.
 * "var" points to the option value.
 ','line_number':6042,'multiline':True]
['text':'
 * Set the terminal option defaults to the current value.
 * Used after setting the terminal name.
 ','line_number':6063,'multiline':True]
['text':' don't free the value now','line_number':6085,'multiline':False]
['text':'
 * return TRUE if 'p' starts with 't_'
 ','line_number':6091,'multiline':True]
['text':'
 * Returns TRUE if the option at 'opt_idx' starts with 't_'
 ','line_number':6100,'multiline':True]
['text':'
 * Unset local option value, similar to ":set opt<".
 ','line_number':6110,'multiline':True]
['text':' global option with local value: use local value if it's been set','line_number':6127,'multiline':False]
['text':'
 * Get pointer to option variable, depending on local or global scope.
 * "scope" can be OPT_LOCAL, OPT_GLOBAL or a combination.
 ','line_number':6237,'multiline':True]
['text':' "cannot happen"','line_number':6298,'multiline':False]
['text':'
 * Get pointer to option variable at 'opt_idx', depending on local or global
 * scope.
 ','line_number':6303,'multiline':True]
['text':'
 * Get pointer to option variable.
 ','line_number':6313,'multiline':True]
['text':' hidden option, always return NULL','line_number':6319,'multiline':False]
['text':' global option with local value: use local value if it's been set','line_number':6327,'multiline':False]
['text':' always return a valid pointer to avoid a crash!','line_number':6563,'multiline':False]
['text':'
 * Return a pointer to the variable for option at 'opt_idx'
 ','line_number':6567,'multiline':True]
['text':'
 * Return the full name of the option at 'opt_idx'
 ','line_number':6577,'multiline':True]
['text':'
 * Return the did_set callback function for the option at 'opt_idx'
 ','line_number':6587,'multiline':True]
['text':'
 * Get the value of 'equalprg', either the buffer-local one or the global one.
 ','line_number':6596,'multiline':True]
['text':'
 * Copy options from one window to another.
 * Used when splitting a window.
 ','line_number':6607,'multiline':True]
['text':'
 * After copying window options: update variables depending on options.
 ','line_number':6619,'multiline':True]
['text':' no need to allocate memory','line_number':6640,'multiline':False]
['text':'
 * Copy the options from one winopt_T to another.
 * Doesn't free the old option values in "to", use clear_winopt() for that.
 * The 'scroll' option is not copied, because it depends on the window height.
 * The 'previewwindow' option is reset, there can be only one preview window.
 ','line_number':6644,'multiline':True]
['text':' Copy the script context so that we know where the value was last set.','line_number':6738,'multiline':False]
['text':' don't want NULL pointers','line_number':6742,'multiline':False]
['text':'
 * Check string options in a window for a NULL value.
 ','line_number':6745,'multiline':True]
['text':'
 * Check for NULL pointers in a winopt_T and replace them with empty_option.
 ','line_number':6755,'multiline':True]
['text':'
 * Free the allocated memory inside a winopt_T.
 ','line_number':6803,'multiline':True]
['text':' Index into the options table for a buffer-local option enum.','line_number':6852,'multiline':False]
['text':'
 * Initialize buf_opt_idx[] if not done already.
 ','line_number':6856,'multiline':True]
['text':'
 * Copy global option values to local options for one buffer.
 * Used when creating a new buffer and sometimes when entering a buffer.
 * flags:
 * BCO_ENTER	We will enter the buffer "buf".
 * BCO_ALWAYS	Always copy the options, but only set b_p_initialized when
 *		appropriate.
 * BCO_NOHELP	Don't copy the values to a help buffer.
 ','line_number':6876,'multiline':True]
['text':' init for GCC','line_number':6889,'multiline':False]
['text':' Skip this when the option defaults have not been set yet.  Happens when','line_number':6893,'multiline':False]
['text':' main() allocates the first buffer.','line_number':6894,'multiline':False]
['text':'
	 * Always copy when entering and 'cpo' contains 'S'.
	 * Don't copy when already initialized.
	 * Don't copy when 'cpo' contains 's' and not entering.
	 * 'S'	BCO_ENTER  initialized	's'  should_copy
	 * yes	  yes	       X	 X	TRUE
	 * yes	  no	      yes	 X	FALSE
	 * no	   X	      yes	 X	FALSE
	 *  X	  no	      no	yes	FALSE
	 *  X	  no	      no	no	TRUE
	 * no	  yes	      no	 X	TRUE
	 ','line_number':6897,'multiline':True]
['text':' Don't copy the options specific to a help buffer when','line_number':6921,'multiline':False]
['text':' BCO_NOHELP is given or the options were initialized already','line_number':6922,'multiline':False]
['text':' (jumping back to a help file with CTRL-T or CTRL-O)','line_number':6923,'multiline':False]
['text':' don't free b_p_isk','line_number':6926,'multiline':False]
['text':' Always free the allocated strings.  If not already initialized,','line_number':6931,'multiline':False]
['text':' reset 'readonly' and copy 'fileformat'.','line_number':6932,'multiline':False]
['text':' don't copy readonly','line_number':6936,'multiline':False]
['text':' NOTE: Valgrind may report a bogus memory leak for 'nrformats'','line_number':7037,'multiline':False]
['text':' when it is set to 8 bytes in defaults.vim.','line_number':7038,'multiline':False]
['text':' Don't copy 'filetype', it must be detected','line_number':7059,'multiline':False]
['text':' Don't copy 'syntax', it must be set','line_number':7068,'multiline':False]
['text':' This isn't really an option, but copying the langmap and IME','line_number':7111,'multiline':False]
['text':' state from the current buffer is better than resetting it.','line_number':7112,'multiline':False]
['text':' options that are normally global but also have a local value','line_number':7118,'multiline':False]
['text':' are not copied, start using the global value','line_number':7119,'multiline':False]
['text':' Don't copy the options set by ex_help(), use the saved values,','line_number':7163,'multiline':False]
['text':' when going from a help buffer to a non-help buffer.','line_number':7164,'multiline':False]
['text':' Don't touch these at all when BCO_NOHELP is used and going from','line_number':7165,'multiline':False]
['text':' or to a help buffer.','line_number':7166,'multiline':False]
['text':' When the options should be copied (ignoring BCO_ALWAYS), set the','line_number':7200,'multiline':False]
['text':' flag that indicates that the options have been initialized.','line_number':7201,'multiline':False]
['text':' make sure we don't have NULLs','line_number':7206,'multiline':False]
['text':'
 * Reset the 'modifiable' option and its default value.
 ','line_number':7211,'multiline':True]
['text':'
 * Set the global value for 'iminsert' to the local value.
 ','line_number':7226,'multiline':True]
['text':'
 * Set the global value for 'imsearch' to the local value.
 ','line_number':7235,'multiline':True]
['text':' OPT_GLOBAL and/or OPT_LOCAL','line_number':7254,'multiline':False]
['text':' init for GCC','line_number':7257,'multiline':False]
['text':' init for GCC','line_number':7258,'multiline':False]
['text':' count number of backslashes before ' ' or ','','line_number':7281,'multiline':False]
['text':' break at a space with an even number of backslashes','line_number':7287,'multiline':False]
['text':' expand terminal option name','line_number':7311,'multiline':False]
['text':' unknown name','line_number':7314,'multiline':False]
['text':' expand option name','line_number':7332,'multiline':False]
['text':' Allow * wildcard','line_number':7340,'multiline':False]
['text':' handle "-=" and "+="','line_number':7362,'multiline':False]
['text':' Below are for handling expanding a specific option's value after the '='','line_number':7381,'multiline':False]
['text':' or ':'','line_number':7382,'multiline':False]
['text':' Certain options currently have special case handling to reuse the','line_number':7401,'multiline':False]
['text':' expansion logic with other commands.','line_number':7402,'multiline':False]
['text':' Now pick. If the option has a custom expander, use that. Otherwise, just','line_number':7416,'multiline':False]
['text':' fill with the existing option value.','line_number':7417,'multiline':False]
['text':' Only string options below','line_number':7439,'multiline':False]
['text':' Options that have P_EXPAND are considered to all use file/dir expansion.','line_number':7441,'multiline':False]
['text':' for 'tags' need three backslashes for a space','line_number':7465,'multiline':False]
['text':' For an option that is a list of file names, or comma/colon-separated','line_number':7475,'multiline':False]
['text':' values, split it by the delimiter and find the start of the current','line_number':7476,'multiline':False]
['text':' pattern, while accounting for backslash-escaped space/commas/colons.','line_number':7477,'multiline':False]
['text':' Triple-backslashed escaped file names (e.g. 'path') can also be','line_number':7478,'multiline':False]
['text':' delimited by space.','line_number':7479,'multiline':False]
['text':' count number of backslashes before ' ' or ',' or ':'','line_number':7484,'multiline':False]
['text':' An option that is a list of single-character flags should always start','line_number':7506,'multiline':False]
['text':' at the end as we don't complete words.','line_number':7507,'multiline':False]
['text':' Some options can either be using file/dir expansions, or custom value','line_number':7511,'multiline':False]
['text':' expansion depending on what the user typed. Unfortunately we have to','line_number':7512,'multiline':False]
['text':' manually handle it here to make sure we have the correct xp_context set.','line_number':7513,'multiline':False]
['text':'
 * Returns TRUE if 'str' either matches 'regmatch' or fuzzy matches 'pat'.
 *
 * If 'test_only' is TRUE and 'fuzzy' is FALSE and if 'str' matches the regular
 * expression 'regmatch', then returns TRUE.  Otherwise returns FALSE.
 *
 * If 'test_only' is FALSE and 'fuzzy' is FALSE and if 'str' matches the
 * regular expression 'regmatch', then stores the match in matches[idx] and
 * returns TRUE.
 *
 * If 'test_only' is TRUE and 'fuzzy' is TRUE and if 'str' fuzzy matches
 * 'fuzzystr', then returns TRUE. Otherwise returns FALSE.
 *
 * If 'test_only' is FALSE and 'fuzzy' is TRUE and if 'str' fuzzy matches
 * 'fuzzystr', then stores the match details in fuzmatch[idx] and returns TRUE.
 ','line_number':7530,'multiline':True]
['text':' Nr of matching non-term-code settings','line_number':7596,'multiline':False]
['text':' Nr of matching terminal code settings','line_number':7597,'multiline':False]
['text':' remember the ignore-case flag','line_number':7606,'multiline':False]
['text':' do this loop twice:','line_number':7612,'multiline':False]
['text':' loop == 0: count the number of matching options','line_number':7613,'multiline':False]
['text':' loop == 1: copy the matching options into allocated memory','line_number':7614,'multiline':False]
['text':' Compare against the abbreviated option name (for regular','line_number':7661,'multiline':False]
['text':' expression match). Fuzzy matching (previous if) already','line_number':7662,'multiline':False]
['text':' matches against both the expanded and abbreviated names.','line_number':7663,'multiline':False]
['text':' Check terminal key codes, these are not in the option table','line_number':7695,'multiline':False]
['text':' Check special key names.','line_number':7739,'multiline':False]
['text':' ignore case here','line_number':7740,'multiline':False]
['text':' Escape an option value that can be used on the command-line with :set.','line_number':7793,'multiline':False]
['text':' Caller needs to free the returned string, unless NULL is returned.','line_number':7794,'multiline':False]
['text':' A backslash is required before some characters.  This is the reverse of','line_number':7800,'multiline':False]
['text':' what happens in do_set().','line_number':7801,'multiline':False]
['text':' For MS-Windows et al. we don't double backslashes at the start and','line_number':7807,'multiline':False]
['text':' before a file name character.','line_number':7808,'multiline':False]
['text':' The reverse is found at stropt_copy_value().','line_number':7809,'multiline':False]
['text':'
 * Expansion handler for :set= when we just want to fill in with the existing value.
 ','line_number':7821,'multiline':True]
['text':' init for GCC','line_number':7827,'multiline':False]
['text':' For a terminal key code expand_option_idx is < 0.','line_number':7835,'multiline':False]
['text':' put string of option value in NameBuff','line_number':7845,'multiline':False]
['text':'
 * Expansion handler for :set=/:set+= when the option has a custom expansion handler.
 ','line_number':7864,'multiline':True]
['text':' init for GCC','line_number':7874,'multiline':False]
['text':' Not supposed to reach this. This function is only for options with','line_number':7880,'multiline':False]
['text':' custom expansion callbacks.','line_number':7881,'multiline':False]
['text':' Retrieve the existing value, but escape it as a reverse of setting it.','line_number':7895,'multiline':False]
['text':' We technically only need to do this when oe_append or','line_number':7896,'multiline':False]
['text':' oe_include_orig_val is true.','line_number':7897,'multiline':False]
['text':'
 * Expansion handler for :set-=
 ','line_number':7912,'multiline':True]
['text':' term option','line_number':7923,'multiline':False]
['text':' Split the option by comma, then present each option to the user if','line_number':7935,'multiline':False]
['text':' it matches the pattern.','line_number':7936,'multiline':False]
['text':' This condition needs to go first, because 'whichwrap' has both','line_number':7937,'multiline':False]
['text':' P_COMMA and P_FLAGLIST.','line_number':7938,'multiline':False]
['text':' Make a copy as we need to inject null characters destructively.','line_number':7949,'multiline':False]
['text':' "\," is interpreted as a literal comma rather than option','line_number':7963,'multiline':False]
['text':' separator when reading options in copy_option_part(). Skip','line_number':7964,'multiline':False]
['text':' it.','line_number':7965,'multiline':False]
['text':' null-terminate this value, required by later functions','line_number':7970,'multiline':False]
['text':' empty value, don't add to list','line_number':7977,'multiline':False]
['text':' Only present the flags that are set on the option as the other flags','line_number':8005,'multiline':False]
['text':' are not meaningful to do set-= on.','line_number':8006,'multiline':False]
['text':' Don't suggest anything if cmdline is non-empty. Vim's set-=','line_number':8010,'multiline':False]
['text':' behavior requires consecutive strings and it's usually','line_number':8011,'multiline':False]
['text':' unintuitive to users if they try to subtract multiple flags at','line_number':8012,'multiline':False]
['text':' once.','line_number':8013,'multiline':False]
['text':' If more than one flags, split the flags up and expose each','line_number':8038,'multiline':False]
['text':' character as individual choice.','line_number':8039,'multiline':False]
['text':'
 * Get the value for the numeric or string option *opp in a nice format into
 * NameBuff[].  Must not be called with a hidden option!
 ','line_number':8056,'multiline':True]
['text':' OPT_GLOBAL and/or OPT_LOCAL','line_number':8063,'multiline':False]
['text':' P_STRING','line_number':8080,'multiline':False]
['text':' just in case','line_number':8083,'multiline':False]
['text':' don't show the actual value of 'key', only that it's set','line_number':8086,'multiline':False]
['text':' Translate 'pastetoggle' into special key names','line_number':8092,'multiline':False]
['text':'
 * Return TRUE if "varp" points to 'wildchar' or 'wildcharm' and it can be
 * printed as a keyname.
 * "*wcp" is set to the value of the option if it's 'wildchar' or 'wildcharm'.
 ','line_number':8100,'multiline':True]
['text':'
 * Return TRUE if "x" is present in 'shortmess' option, or
 * 'shortmess' contains 'a' and "x" is present in SHM_A.
 ','line_number':8117,'multiline':True]
['text':'
 * vimrc_found() - Called when a ".vimrc" or "VIMINIT" has been found.
 *
 * Reset 'compatible' and set the values for options that didn't get set yet
 * to the Vim defaults.
 * Don't do this if the 'compatible' option has been set or reset before.
 * When "fname" is not NULL, use it to set $"envname" when it wasn't set yet.
 ','line_number':8130,'multiline':True]
['text':' Set $MYVIMRC to the first vimrc file found.','line_number':8160,'multiline':False]
['text':'
 * Set 'compatible' on or off.  Called for "-C" and "-N" command line arg.
 ','line_number':8173,'multiline':True]
['text':'
 * Return TRUE when option "name" has been set.
 * Only works correctly for global options.
 ','line_number':8191,'multiline':True]
['text':' unknown option','line_number':8201,'multiline':False]
['text':'
 * Reset the flag indicating option "name" was set.
 ','line_number':8208,'multiline':True]
['text':'
 * compatible_set() - Called when 'compatible' has been set or unset.
 *
 * When 'compatible' set: Set all relevant options (those that have the P_VIM)
 * flag) to a Vi compatible value.
 * When 'compatible' is unset: Set all options that have a different default
 * for Vim (without the P_VI_DEF flag) to that default.
 ','line_number':8223,'multiline':True]
['text':'
 * Check if backspacing over something is allowed.
 ','line_number':8244,'multiline':True]
['text':' BS_INDENT, BS_EOL, BS_START or BS_NOSTOP','line_number':8249,'multiline':False]
['text':'
 * Return the effective 'scrolloff' value for the current window, using the
 * global value when appropriate.
 ','line_number':8265,'multiline':True]
['text':'
 * Return the effective 'sidescrolloff' value for the current window, using the
 * global value when appropriate.
 ','line_number':8275,'multiline':True]
['text':'
 * Get the local or global value of 'backupcopy'.
 ','line_number':8285,'multiline':True]
['text':'
 * Get the local or global value of 'formatlistpat'.
 ','line_number':8295,'multiline':True]
['text':'
 * Get the local or global value of the 'virtualedit' flags.
 ','line_number':8307,'multiline':True]
['text':'
 * Get the local or global value of 'showbreak'.
 ','line_number':8318,'multiline':True]
['text':'
 * Get window or buffer local options.
 ','line_number':8333,'multiline':True]
['text':'
 * This is called when 'culopt' is changed
 ','line_number':8372,'multiline':True]
['text':' Note: Keep this in sync with p_culopt_values.','line_number':8387,'multiline':False]
['text':' Can't have both "line" and "screenline".','line_number':8415,'multiline':False]
['text':'
 * Get the value of 'magic' adjusted for Vim9 script.
 ','line_number':8424,'multiline':True]
['text':'
 * Set the callback function value for an option that accepts a function name,
 * lambda, et al. (e.g. 'operatorfunc', 'tagfunc', etc.)
 * Returns OK if the option is successfully set to a function, otherwise
 * returns FAIL.
 ','line_number':8443,'multiline':True]
['text':' Lambda expression or a funcref','line_number':8465,'multiline':False]
['text':' treat everything else as a function name string','line_number':8468,'multiline':False]
['text':' when using Vim9 style "import.funcname" it needs to be expanded to','line_number':8486,'multiline':False]
['text':' "import#funcname".','line_number':8487,'multiline':False]
