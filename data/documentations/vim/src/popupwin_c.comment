['text':' vi:set ts=8 sts=4 sw=4 noet:
 *
 * VIM - Vi IMproved	by Bram Moolenaar
 *
 * Do ":help uganda"  in Vim to read a list of people who contributed.
 * Do ":help credits" in Vim to see a list of people who contributed.
 * See README.txt for an overview of the Vim source code.
 ','line_number':1,'multiline':True]
['text':'
 * Implementation of popup windows.  See ":help popup".
 ','line_number':10,'multiline':True]
['text':' Window used for ":echowindow"','line_number':32,'multiline':False]
['text':' Time used for the next ":echowindow" message in msec.','line_number':35,'multiline':False]
['text':' Flag set when a message is added to the message window, timer is started','line_number':38,'multiline':False]
['text':' when the message window is drawn.  This might be after pressing Enter at the','line_number':39,'multiline':False]
['text':' hit-enter prompt.','line_number':40,'multiline':False]
['text':'
 * Get option value for "key", which is "line" or "col".
 * Handles "cursor+N" and "cursor-N".
 * Returns MAXCOL if the entry is not present.
 ','line_number':48,'multiline':True]
['text':' "col"','line_number':86,'multiline':False]
['text':' Zero means "not set", use -1 instead.','line_number':89,'multiline':False]
['text':'
 * Used when popup options contain "moved": set default moved values.
 ','line_number':132,'multiline':True]
['text':'
 * Used when popup options contain "moved" with "word" or "WORD".
 ','line_number':144,'multiline':True]
['text':'
 * Used when popup options contain "mousemoved": set default moved values.
 ','line_number':160,'multiline':True]
['text':'
 * Used when popup options contain "moved" with "word" or "WORD".
 ','line_number':194,'multiline':True]
['text':' convert text column to mouse column','line_number':210,'multiline':False]
['text':'
 * Return TRUE if "row"/"col" is on the border of the popup.
 * The values are relative to the top-left corner.
 ','line_number':222,'multiline':True]
['text':'
 * Return TRUE and close the popup if "row"/"col" is on the "X" button of the
 * popup and w_popup_close is POPCLOSE_BUTTON.
 * The values are relative to the top-left corner.
 * Caller should check the left mouse button was clicked.
 * Return TRUE if the popup was closed.
 ','line_number':235,'multiline':True]
['text':' Values set when dragging a popup window starts.','line_number':254,'multiline':False]
['text':'
 * Mouse down on border of popup window: start dragging it.
 * Uses mouse_col and mouse_row.
 ','line_number':261,'multiline':True]
['text':' Stop centering the popup','line_number':279,'multiline':False]
['text':'
 * Mouse moved while dragging a popup window: adjust the window popup position
 * or resize.
 ','line_number':299,'multiline':True]
['text':' The popup may be closed before dragging stops.','line_number':306,'multiline':False]
['text':'
 * Set w_firstline to match the current "wp->w_topline".
 ','line_number':357,'multiline':True]
['text':' we don't want the popup to get smaller, decrement the first line','line_number':368,'multiline':False]
['text':' until it doesn't','line_number':369,'multiline':False]
['text':'
 * Return TRUE if the position is in the popup window scrollbar.
 ','line_number':377,'multiline':True]
['text':'
 * Handle a click in a popup window, if it is in the scrollbar.
 ','line_number':390,'multiline':True]
['text':' Click in lower half, scroll down.','line_number':404,'multiline':False]
['text':' click on upper half, scroll up.','line_number':409,'multiline':False]
['text':'
 * Add a timer to "wp" with "time".
 * If "close" is true use popup_close(), otherwise popup_hide().
 ','line_number':434,'multiline':True]
['text':'
 * Shared between popup_create() and f_popup_move().
 ','line_number':481,'multiline':True]
['text':'
 * Handle "moved" and "mousemoved" arguments.
 ','line_number':549,'multiline':True]
['text':' Three numbers, might be from popup_getoptions().','line_number':592,'multiline':False]
['text':'
 * Scroll to show the line with the cursor.
 ','line_number':639,'multiline':True]
['text':' Don't let "firstline" cause a scroll.','line_number':662,'multiline':False]
['text':'
 * Get the sign group name for window "wp".
 * Returns a pointer to a static buffer, overwritten on the next call.
 ','line_number':667,'multiline':True]
['text':'
 * Highlight the line with the cursor.
 * Also scrolls the text to put the cursor line in view.
 ','line_number':680,'multiline':True]
['text':'
 * Shared between popup_create() and f_popup_setoptions().
 ','line_number':715,'multiline':True]
['text':' TODO: flip','line_number':725,'multiline':False]
['text':' Add timer to close the popup after some time.','line_number':946,'multiline':False]
['text':'
 * Go through the options in "dict" and apply them to popup window "wp".
 * "create" is TRUE when creating a new popup window.
 ','line_number':1022,'multiline':True]
['text':' when "firstline" and "cursorline" are both set and the cursor would be','line_number':1044,'multiline':False]
['text':' above or below the displayed lines, move the cursor to "firstline".','line_number':1045,'multiline':False]
['text':'
 * Add lines to the popup from a list of strings.
 ','line_number':1063,'multiline':True]
['text':'
 * Add lines to the popup from a list of dictionaries.
 ','line_number':1082,'multiline':True]
['text':' first add the text lines','line_number':1094,'multiline':False]
['text':' add the text properties','line_number':1108,'multiline':False]
['text':'
 * Get the padding plus border at the top, adjusted to 1 if there is a title.
 ','line_number':1147,'multiline':True]
['text':'
 * Get the padding plus border at the left.
 ','line_number':1160,'multiline':True]
['text':'
 * Return the height of popup window "wp", including border and padding.
 ','line_number':1169,'multiline':True]
['text':'
 * Return the width of popup window "wp", including border, padding and
 * scrollbar.
 ','line_number':1180,'multiline':True]
['text':' w_leftcol is how many columns of the core are left of the screen','line_number':1187,'multiline':False]
['text':' w_popup_rightoff is how many columns of the core are right of the screen','line_number':1188,'multiline':False]
['text':'
 * Return the extra width of popup window "wp": border, padding and scrollbar.
 ','line_number':1194,'multiline':True]
['text':'
 * Adjust the position and size of the popup to fit on the screen.
 ','line_number':1205,'multiline':True]
['text':' adjusted for textprop','line_number':1237,'multiline':False]
['text':' adjusted for textprop','line_number':1238,'multiline':False]
['text':' May need to update the "cursorline" highlighting, which may also change','line_number':1248,'multiline':False]
['text':' "topline"','line_number':1249,'multiline':False]
['text':' Popup window is positioned relative to a text property.','line_number':1264,'multiline':False]
['text':' Text property is no longer visible, hide the popup.','line_number':1269,'multiline':False]
['text':' Unhiding the popup is done in check_popup_unhidden().','line_number':1270,'multiline':False]
['text':' Compute the desired position from the position of the text','line_number':1280,'multiline':False]
['text':' property.  Use "wantline" and "wantcol" as offsets.','line_number':1281,'multiline':False]
['text':' position is off screen, make the width zero to hide it.','line_number':1292,'multiline':False]
['text':' below the text','line_number':1298,'multiline':False]
['text':' above the text','line_number':1301,'multiline':False]
['text':' right of the text','line_number':1306,'multiline':False]
['text':' left of the text','line_number':1309,'multiline':False]
['text':' If no line was specified default to vertical centering.','line_number':1315,'multiline':False]
['text':' If "wantline" is negative it actually means zero.','line_number':1319,'multiline':False]
['text':' If "wantcol" is negative it actually means zero.','line_number':1322,'multiline':False]
['text':' center after computing the size','line_number':1328,'multiline':False]
['text':' Assume that each buffer line takes one screen line, and one line','line_number':1343,'multiline':False]
['text':' for the top border.  First make sure cmdline_row is valid,','line_number':1344,'multiline':False]
['text':' calling update_screen() will set it only later.','line_number':1345,'multiline':False]
['text':' Need to see at least one character after the decoration.','line_number':1357,'multiline':False]
['text':' When centering or right aligned, use maximum width.','line_number':1363,'multiline':False]
['text':' When left aligned use the space available, but shift to the left when we','line_number':1364,'multiline':False]
['text':' hit the right of the screen.','line_number':1365,'multiline':False]
['text':' A terminal popup initially does not have content, use a default minimal','line_number':1389,'multiline':False]
['text':' width of 20 characters and height of 5 lines.','line_number':1390,'multiline':False]
['text':' start at the desired first line','line_number':1405,'multiline':False]
['text':' Compute width based on longest text line and the 'wrap' option.','line_number':1413,'multiline':False]
['text':' Use a minimum width of one, so that something shows when there is no','line_number':1414,'multiline':False]
['text':' text.','line_number':1415,'multiline':False]
['text':' When "firstline" is -1 then start with the last buffer line and go','line_number':1416,'multiline':False]
['text':' backwards.','line_number':1417,'multiline':False]
['text':' TODO: more accurate wrapping','line_number':1418,'multiline':False]
['text':' Count Tabs for what they are worth and compute the length based on','line_number':1429,'multiline':False]
['text':' the maximum width (matters when 'showbreak' is set).','line_number':1430,'multiline':False]
['text':' "margin_width" is added to "len" where it matters.','line_number':1431,'multiline':False]
['text':' adjust leftwise to fit text on screen','line_number':1452,'multiline':False]
['text':' do not use the width of lines we're not going to show','line_number':1479,'multiline':False]
['text':' Terminal window with running job never has a scrollbar, adjusts to','line_number':1495,'multiline':False]
['text':' window height.','line_number':1496,'multiline':False]
['text':' make space for the scrollbar if needed, when lines wrap and when','line_number':1504,'multiline':False]
['text':' applying minwidth','line_number':1505,'multiline':False]
['text':' some columns cut off on the right','line_number':1524,'multiline':False]
['text':' If the window doesn't fit because 'minwidth' is set then the','line_number':1527,'multiline':False]
['text':' scrollbar is at the far right of the screen, use the size without','line_number':1528,'multiline':False]
['text':' the scrollbar.','line_number':1529,'multiline':False]
['text':' when adding a scrollbar below need to adjust the width','line_number':1544,'multiline':False]
['text':' Right aligned: move to the right if needed.','line_number':1559,'multiline':False]
['text':' No truncation, because that would change the height.','line_number':1560,'multiline':False]
['text':' "col" specifies the right edge, but popup doesn't fit, skip some','line_number':1565,'multiline':False]
['text':' columns when displaying the window, minus left border and','line_number':1566,'multiline':False]
['text':' padding.','line_number':1567,'multiline':False]
['text':' try to show the right border and any scrollbar','line_number':1583,'multiline':False]
['text':' bottom aligned: may move down','line_number':1614,'multiline':False]
['text':' Bottom aligned but does not fit, and less space on the other','line_number':1618,'multiline':False]
['text':' side or "posinvert" is off: reduce height.','line_number':1619,'multiline':False]
['text':' Not enough space and more space on the other side: make top','line_number':1625,'multiline':False]
['text':' aligned.','line_number':1626,'multiline':False]
['text':' top aligned and not enough space below but there is space above:','line_number':1639,'multiline':False]
['text':' make bottom aligned and recompute the height','line_number':1640,'multiline':False]
['text':' Bottom of the popup goes below the last line, reduce the height and','line_number':1659,'multiline':False]
['text':' add a scrollbar.','line_number':1660,'multiline':False]
['text':' make sure w_winrow is valid','line_number':1672,'multiline':False]
['text':' Need to update popup_mask if the position or size changed.','line_number':1689,'multiline':False]
['text':' And redraw windows and statuslines that were behind the popup.','line_number':1690,'multiline':False]
['text':' similar to TYPE_NOTIFICATION','line_number':1711,'multiline':False]
['text':' preview window','line_number':1714,'multiline':False]
['text':' popup menu info','line_number':1715,'multiline':False]
['text':'
 * Return TRUE if "type" is TYPE_NOTIFICATION or TYPE_MESSAGE_WIN.
 ','line_number':1718,'multiline':True]
['text':'
 * Make "buf" empty and set the contents to "text".
 * Used by popup_create() and popup_settext().
 ','line_number':1727,'multiline':True]
['text':' Clear the buffer, then replace the lines.','line_number':1736,'multiline':False]
['text':' Add text to the buffer.','line_number':1742,'multiline':False]
['text':' just a string','line_number':1747,'multiline':False]
['text':' list of strings','line_number':1759,'multiline':False]
['text':' list of dictionaries','line_number':1762,'multiline':False]
['text':' delete the line that was in the empty buffer','line_number':1767,'multiline':False]
['text':'
 * Parse the 'previewpopup' or 'completepopup' option and apply the values to
 * window "wp" if it is not NULL.
 * Return FAIL if the parsing fails.
 ','line_number':1773,'multiline':True]
['text':' Note: Keep this in sync with p_popup_option_values.','line_number':1806,'multiline':False]
['text':' Note: Keep this in sync with p_popup_option_border_values.','line_number':1844,'multiline':False]
['text':' only show the X for close when there is a border','line_number':1857,'multiline':False]
['text':' Note: Keep this in sync with p_popup_option_align_values.','line_number':1863,'multiline':False]
['text':'
 * Parse the 'previewpopup' option and apply the values to window "wp" if it
 * is not NULL.
 * Return FAIL if the parsing fails.
 ','line_number':1879,'multiline':True]
['text':'
 * Parse the 'completepopup' option and apply the values to window "wp" if it
 * is not NULL.
 * Return FAIL if the parsing fails.
 ','line_number':1890,'multiline':True]
['text':'
 * Set w_wantline and w_wantcol for the cursor position in the current window.
 * Keep at least "width" columns from the right of the screen.
 ','line_number':1901,'multiline':True]
['text':' cursor in first line','line_number':1921,'multiline':False]
['text':'
 * Set w_wantline and w_wantcol for the a given screen position.
 * Caller must take care of running into the window border.
 ','line_number':1940,'multiline':True]
['text':'
 * Add a border and lef&right padding.
 ','line_number':1952,'multiline':True]
['text':'
 * Return TRUE if there is any popup window with a terminal buffer.
 ','line_number':1968,'multiline':True]
['text':'
 * Mark all popup windows in the current tab and global for redrawing.
 ','line_number':1988,'multiline':True]
['text':'
 * Set the color for a notification window.
 ','line_number':2002,'multiline':True]
['text':'
 * popup_create({text}, {options})
 * popup_atcursor({text}, {options})
 * etc.
 * When creating a preview or info popup "argvars" and "rettv" are NULL.
 ','line_number':2017,'multiline':True]
['text':' Check that arguments look OK.','line_number':2041,'multiline':False]
['text':' notifications are global by default','line_number':2076,'multiline':False]
['text':' show on all tabs','line_number':2090,'multiline':False]
['text':' Create the window and buffer.','line_number':2092,'multiline':False]
['text':' use existing buffer','line_number':2103,'multiline':False]
['text':' create a new buffer associated with the popup','line_number':2113,'multiline':False]
['text':' no undo','line_number':2130,'multiline':False]
['text':' no swap file','line_number':2131,'multiline':False]
['text':' unlisted buffer','line_number':2132,'multiline':False]
['text':' prevent deleting the buffer','line_number':2133,'multiline':False]
['text':' Avoid that 'buftype' is reset when this buffer is entered.','line_number':2135,'multiline':False]
['text':' 'wrap' is default on','line_number':2138,'multiline':False]
['text':' 'scrolloff' zero','line_number':2139,'multiline':False]
['text':' popup on specified tab page','line_number':2143,'multiline':False]
['text':' popup on current tab page','line_number':2149,'multiline':False]
['text':' (tabnr < 0)','line_number':2153,'multiline':False]
['text':' Global popup: add at the end, so that it gets displayed on top of','line_number':2157,'multiline':False]
['text':' older ones with the same zindex. Matters for notifications.','line_number':2158,'multiline':False]
['text':' by default use the mouse position','line_number':2187,'multiline':False]
['text':' mouse on first line','line_number':2189,'multiline':False]
['text':' set default values','line_number':2199,'multiline':False]
['text':' Try to not overlap with another global popup.  Guess we need 3','line_number':2208,'multiline':False]
['text':' more screen lines than buffer lines.','line_number':2209,'multiline':False]
['text':' move to below this popup and restart the loop to check for','line_number':2219,'multiline':False]
['text':' overlap with other popups','line_number':2220,'multiline':False]
['text':' can't avoid overlap, put on top in the hope that message goes','line_number':2227,'multiline':False]
['text':' away soon.','line_number':2228,'multiline':False]
['text':' Deal with options.','line_number':2303,'multiline':False]
['text':' When running a terminal in the popup it becomes the current window.','line_number':2324,'multiline':False]
['text':'
 * popup_clear()
 ','line_number':2332,'multiline':True]
['text':'
 * popup_create({text}, {options})
 ','line_number':2348,'multiline':True]
['text':'
 * popup_atcursor({text}, {options})
 ','line_number':2357,'multiline':True]
['text':'
 * popup_beval({text}, {options})
 ','line_number':2366,'multiline':True]
['text':'
 * Invoke the close callback for window "wp" with value "result".
 * Careful: The callback may make "wp" invalid!
 ','line_number':2375,'multiline':True]
['text':'
 * Make "prevwin" the current window, unless it's equal to "wp".
 * Otherwise make "firstwin" the current window.
 ','line_number':2406,'multiline':True]
['text':'
 * Close popup "wp" and invoke any close callback for it.
 ','line_number':2419,'multiline':True]
['text':' Closing popup window with a terminal: put focus back on the first','line_number':2432,'multiline':False]
['text':' that works:','line_number':2433,'multiline':False]
['text':' - another popup window with a terminal','line_number':2434,'multiline':False]
['text':' - the previous window','line_number':2435,'multiline':False]
['text':' - the first one.','line_number':2436,'multiline':False]
['text':' Just in case a check higher up is missing.','line_number':2455,'multiline':False]
['text':' To avoid getting stuck when win_execute() does something that causes','line_number':2458,'multiline':False]
['text':' an error, stop calling the filter callback.','line_number':2459,'multiline':False]
['text':' Careful: This may make "wp" invalid.','line_number':2467,'multiline':False]
['text':'
 * Close popup "wp" because of a mouse click.
 ','line_number':2484,'multiline':True]
['text':' Close the popup when all if these are true:','line_number':2496,'multiline':False]
['text':' - the mouse is not on this popup','line_number':2497,'multiline':False]
['text':' - "mousemoved" was used','line_number':2498,'multiline':False]
['text':' - the mouse is no longer on the same screen row or the mouse column is','line_number':2499,'multiline':False]
['text':'   outside of the relevant text','line_number':2500,'multiline':False]
['text':' Careful: this makes "wp" invalid.','line_number':2507,'multiline':False]
['text':'
 * Called when the mouse moved: may close a popup with "mousemoved".
 ','line_number':2512,'multiline':True]
['text':' find the window where the mouse is in','line_number':2523,'multiline':False]
['text':'
 * In a filter: check if the typed key is a mouse event that is used for
 * dragging the popup.
 ','line_number':2538,'multiline':True]
['text':' do not consume the key, allow for dragging the popup','line_number':2552,'multiline':False]
['text':'
 * popup_filter_menu({id}, {key})
 ','line_number':2556,'multiline':True]
['text':' If the popup has been closed do not consume the key.','line_number':2577,'multiline':False]
['text':' consume all keys until done','line_number':2585,'multiline':False]
['text':' caller will call popup_highlight_curline()','line_number':2607,'multiline':False]
['text':' Cancelled, invoke callback with -1','line_number':2613,'multiline':False]
['text':' Invoke callback with current index.','line_number':2620,'multiline':False]
['text':'
 * popup_filter_yesno({id}, {key})
 ','line_number':2629,'multiline':True]
['text':' If the popup has been closed don't consume the key.','line_number':2649,'multiline':False]
['text':' consume all keys until done','line_number':2657,'multiline':False]
['text':' Invoke callback','line_number':2671,'multiline':False]
['text':'
 * popup_dialog({text}, {options})
 ','line_number':2676,'multiline':True]
['text':'
 * popup_menu({text}, {options})
 ','line_number':2685,'multiline':True]
['text':'
 * popup_notification({text}, {options})
 ','line_number':2694,'multiline':True]
['text':'
 * Find the popup window with window-ID "id".
 * If the popup window does not exist NULL is returned.
 * If the window is not a popup window, and error message is given.
 ','line_number':2703,'multiline':True]
['text':'
 * popup_close({id})
 ','line_number':2721,'multiline':True]
['text':' if the popup contains a terminal it will become hidden','line_number':2736,'multiline':False]
['text':' Do not decrement b_nwindows, we still reference the buffer.','line_number':2758,'multiline':False]
['text':'
 * popup_hide({id})
 ','line_number':2763,'multiline':True]
['text':'
 * popup_show({id})
 ','line_number':2795,'multiline':True]
['text':'
 * popup_settext({id}, {text})
 ','line_number':2820,'multiline':True]
['text':' win_execute() may set "curwin" to a popup window temporarily, but many','line_number':2874,'multiline':False]
['text':' commands are disallowed then.  When a terminal runs in the popup most','line_number':2875,'multiline':False]
['text':' things are allowed.  When a terminal is finished it can be closed.','line_number':2876,'multiline':False]
['text':'
 * Close a popup window by Window-id.
 * Does not invoke the callback.
 * Return OK if the popup was closed, FAIL otherwise.
 ','line_number':2889,'multiline':True]
['text':' go through global popups','line_number':2901,'multiline':False]
['text':' go through tab-local popups','line_number':2922,'multiline':False]
['text':'
 * Close a popup window with Window-id "id" in tabpage "tp".
 ','line_number':2929,'multiline':True]
['text':'
 * popup_move({id}, {options})
 ','line_number':2974,'multiline':True]
['text':' invalid {id}','line_number':2992,'multiline':False]
['text':'
 * popup_setoptions({id}, {options})
 ','line_number':3005,'multiline':True]
['text':' invalid {id}','line_number':3024,'multiline':False]
['text':'
 * popup_getpos({id})
 ','line_number':3038,'multiline':True]
['text':' invalid {id}','line_number':3059,'multiline':False]
['text':' we know how much space we need, avoid resizing halfway','line_number':3063,'multiline':False]
['text':'
 * popup_list()
 ','line_number':3088,'multiline':True]
['text':'
 * popup_locate({row}, {col})
 ','line_number':3106,'multiline':True]
['text':'
 * For popup_getoptions(): add a "border" or "padding" entry to "dict".
 ','line_number':3128,'multiline':True]
['text':'
 * For popup_getoptions(): add a "borderhighlight" entry to "dict".
 ','line_number':3150,'multiline':True]
['text':'
 * For popup_getoptions(): add a "borderchars" entry to "dict".
 ','line_number':3174,'multiline':True]
['text':'
 * For popup_getoptions(): add a "moved" and "mousemoved" entry to "dict".
 ','line_number':3203,'multiline':True]
['text':'
 * popup_getoptions({id})
 ','line_number':3229,'multiline':True]
['text':' find the tabpage that holds this popup','line_number':3293,'multiline':False]
['text':' must be global','line_number':3307,'multiline':False]
['text':'
 * Return TRUE if the current window is running a terminal in a popup window.
 * Return FALSE when the job has ended.
 ','line_number':3342,'multiline':True]
['text':'
 * Reset all the "handled_flag" flags in global popup windows and popup windows
 * in the current tab page.
 * Each calling function should use a different flag, see the list at
 * POPUP_HANDLED_1.  This won't work with recursive calls though.
 ','line_number':3359,'multiline':True]
['text':'
 * Find the next visible popup where "handled_flag" is not set.
 * Must have called popup_reset_handled() first.
 * When "lowest" is TRUE find the popup with the lowest zindex, otherwise the
 * popup with the highest zindex.
 ','line_number':3376,'multiline':True]
['text':'
 * Invoke the filter callback for window "wp" with typed character "c".
 * Uses the global "mod_mask" for modifiers.
 * Returns the return value of the filter or -1 for CTRL-C in the current
 * window.
 * Careful: The filter may make "wp" invalid!
 ','line_number':3415,'multiline':True]
['text':' Emergency exit: CTRL-C closes the popup.','line_number':3432,'multiline':False]
['text':' Reset got_int to avoid the callback isn't called.','line_number':3438,'multiline':False]
['text':' If the popup is the current window it probably fails to close.  Then','line_number':3443,'multiline':False]
['text':' do not consume the key.','line_number':3444,'multiline':False]
['text':' Convert the number to a string, so that the function can use:','line_number':3453,'multiline':False]
['text':'	    if a:c == "\<F2>"','line_number':3454,'multiline':False]
['text':' NOTE: The callback might close the popup and make "wp" invalid.','line_number':3461,'multiline':False]
['text':' Cannot call the function, close the popup to avoid that the filter','line_number':3464,'multiline':False]
['text':' eats keys and the user is stuck.  Might as well eat the key.','line_number':3465,'multiline':False]
['text':' If an error message was given always return FALSE, so that keys are','line_number':3474,'multiline':False]
['text':' not consumed and the user can type something.','line_number':3475,'multiline':False]
['text':' If we get three errors in a row then close the popup.  Decrement the','line_number':3476,'multiline':False]
['text':' error count by 1/10 if there are no errors, thus allowing up to 1 in','line_number':3477,'multiline':False]
['text':' 10 calls to cause an error.','line_number':3478,'multiline':False]
['text':'
 * Called when "c" was typed: invoke popup filter callbacks.
 * Returns TRUE when the character was consumed,
 ','line_number':3499,'multiline':True]
['text':' Popup window with terminal always gets focus.','line_number':3514,'multiline':False]
['text':' Reset got_int to avoid a function used in the statusline aborts.','line_number':3545,'multiline':False]
['text':' When interrupted return FALSE to avoid looping.','line_number':3553,'multiline':False]
['text':'
 * Return TRUE if there is a popup visible with a filter callback and the
 * "mapping" property off.
 ','line_number':3557,'multiline':True]
['text':'
 * Called when the cursor moved: check if any popup needs to be closed if the
 * cursor moved far enough.
 ','line_number':3576,'multiline':True]
['text':'
 * Update "w_popup_mask_cells".
 ','line_number':3595,'multiline':True]
['text':' cache is still valid','line_number':3613,'multiline':False]
['text':'
 * Return TRUE if "col" / "line" matches with an entry in w_popup_mask.
 * "col" and "line" are screen coordinates.
 ','line_number':3657,'multiline':True]
['text':'
 * Set flags in popup_transparent[] for window "wp" to "val".
 ','line_number':3672,'multiline':True]
['text':'
 * Only called when popup window "wp" is hidden: If the window is positioned
 * next to a text property, and it is now visible, then  unhide the popup.
 * We don't check if visible popups become hidden, that is done in
 * popup_adjust_position().
 * Return TRUE if the popup became unhidden.
 ','line_number':3724,'multiline':True]
['text':' force repositioning','line_number':3745,'multiline':False]
['text':'
 * Return TRUE if popup_adjust_position() needs to be called for "wp".
 * That is when the buffer in the popup was changed, or the popup is following
 * a textprop and the referenced buffer was changed.
 * Or when the cursor line changed and "cursorline" is set.
 ','line_number':3752,'multiline':True]
['text':' May need to adjust the width if the cursor moved.','line_number':3769,'multiline':False]
['text':'
 * Update "popup_mask" if needed.
 * Also recomputes the popup size and positions.
 * Also updates "popup_visible" and "popup_uses_mouse_move".
 * Also marks window lines for redrawing.
 ','line_number':3773,'multiline':True]
['text':' Need to recompute when switching tabs.','line_number':3788,'multiline':False]
['text':' Also recompute when the type is UPD_CLEAR or UPD_NOT_VALID, something','line_number':3789,'multiline':False]
['text':' basic (such as the screen size) must have changed.','line_number':3790,'multiline':False]
['text':' Check if any popup window buffer has changed and if any popup connected','line_number':3797,'multiline':False]
['text':' to a text property has become visible.','line_number':3798,'multiline':False]
['text':' Need to update the mask, something has changed.','line_number':3813,'multiline':False]
['text':' If redrawing all windows, just update "popup_mask".','line_number':3818,'multiline':False]
['text':' If redrawing only what is needed, update "popup_mask_next" and then','line_number':3819,'multiline':False]
['text':' compare with "popup_mask" to see what changed.','line_number':3820,'multiline':False]
['text':' Find the window with the lowest zindex that hasn't been handled yet,','line_number':3831,'multiline':False]
['text':' so that the window with a higher zindex overwrites the value in','line_number':3832,'multiline':False]
['text':' popup_mask.','line_number':3833,'multiline':False]
['text':' Recompute the position if the text changed.  It may make the popup','line_number':3842,'multiline':False]
['text':' hidden if it's attach to a text property that is no longer visible.','line_number':3843,'multiline':False]
['text':' Only check which lines are to be updated if not already','line_number':3868,'multiline':False]
['text':' updating all lines.','line_number':3869,'multiline':False]
['text':' the command line needs to be cleared if text below','line_number':3889,'multiline':False]
['text':' the popup is now visible.','line_number':3890,'multiline':False]
['text':' The screen position "line" / "col" needs to be','line_number':3900,'multiline':False]
['text':' redrawn.  Figure out what window that is and update','line_number':3901,'multiline':False]
['text':' w_redraw_top and w_redr_bot.  Only needs to be done','line_number':3902,'multiline':False]
['text':' once for each window line.','line_number':3903,'multiline':False]
['text':' A terminal window needs to be redrawn.','line_number':3908,'multiline':False]
['text':' In (or below) status line','line_number':3922,'multiline':False]
['text':' compute the position in the buffer line','line_number':3926,'multiline':False]
['text':' from the position in the window','line_number':3927,'multiline':False]
['text':' This line is going to be redrawn, no need to','line_number':3934,'multiline':False]
['text':' check until the right side of the window.','line_number':3935,'multiline':False]
['text':'
 * If the current window is a popup and something relevant changed, recompute
 * the position and size.
 ','line_number':3949,'multiline':True]
['text':'
 * Return a string of "len" spaces in IObuff.
 ','line_number':3960,'multiline':True]
['text':'
 * Update popup windows.  They are drawn on top of normal windows.
 * "win_update" is called for each popup window, lowest zindex first.
 ','line_number':3971,'multiline':True]
['text':' hide the cursor until redrawing is done.','line_number':3998,'multiline':False]
['text':' Find the window with the lowest zindex that hasn't been updated yet,','line_number':4001,'multiline':False]
['text':' so that the window with a higher zindex is drawn later, thus goes on','line_number':4002,'multiline':False]
['text':' top.','line_number':4003,'multiline':False]
['text':' This drawing uses the zindex of the popup window, so that it's on','line_number':4010,'multiline':False]
['text':' top of the text but doesn't draw when another popup with higher','line_number':4011,'multiline':False]
['text':' zindex is on top of the character.','line_number':4012,'multiline':False]
['text':' Set flags in popup_transparent[] for masked cells.','line_number':4015,'multiline':False]
['text':' adjust w_winrow and w_wincol for border and padding, since','line_number':4018,'multiline':False]
['text':' win_update() doesn't handle them.','line_number':4019,'multiline':False]
['text':' Draw the popup text, unless it's off screen.','line_number':4028,'multiline':False]
['text':' May need to update the "cursorline" highlighting, which may also','line_number':4031,'multiline':False]
['text':' change "topline"','line_number':4032,'multiline':False]
['text':' move the cursor into the visible lines, otherwise executing','line_number':4038,'multiline':False]
['text':' commands with win_execute() may cause the text to jump.','line_number':4039,'multiline':False]
['text':' Add offset for border and padding if not done already.','line_number':4049,'multiline':False]
['text':' We can only use these line drawing characters when 'encoding' is','line_number':4071,'multiline':False]
['text':' "utf-8" and 'ambiwidth' is "single".','line_number':4072,'multiline':False]
['text':' Title goes on top of border or padding.','line_number':4103,'multiline':False]
['text':' truncate the title if too long','line_number':4109,'multiline':False]
['text':' top border; do not draw over the title','line_number':4136,'multiline':False]
['text':' top padding and no border; do not draw over the title','line_number':4182,'multiline':False]
['text':' Compute scrollbar thumb position and size.','line_number':4194,'multiline':False]
['text':' scrolled, no full thumb','line_number':4204,'multiline':False]
['text':' it just fits, avoid divide by zero','line_number':4208,'multiline':False]
['text':' show it's scrolled','line_number':4216,'multiline':False]
['text':' show at least one character','line_number':4219,'multiline':False]
['text':' left and right padding only needed next to the body','line_number':4236,'multiline':False]
['text':' left border','line_number':4244,'multiline':False]
['text':' left padding','line_number':4254,'multiline':False]
['text':' scrollbar','line_number':4264,'multiline':False]
['text':' right border','line_number':4279,'multiline':False]
['text':' right padding','line_number':4285,'multiline':False]
['text':' bottom padding','line_number':4295,'multiline':False]
['text':' bottom border','line_number':4304,'multiline':False]
['text':' close button goes on top of anything at the top-right corner','line_number':4321,'multiline':False]
['text':' Back to the normal zindex.','line_number':4329,'multiline':False]
['text':' if this was the message window popup may start the timer now','line_number':4333,'multiline':False]
['text':' In case win_update() called start_search_hl().','line_number':4339,'multiline':False]
['text':'
 * Mark references in callbacks of one popup window.
 ','line_number':4344,'multiline':True]
['text':'
 * Set reference in callbacks of popup windows.
 ','line_number':4369,'multiline':True]
['text':'
 * Find an existing popup used as the preview window, in the current tab page.
 * Return NULL if not found.
 ','line_number':4399,'multiline':True]
['text':' Preview window popup is always local to tab page.','line_number':4408,'multiline':False]
['text':'
 * Find an existing popup used as the info window, in the current tab page.
 * Return NULL if not found.
 ','line_number':4415,'multiline':True]
['text':' info window popup is always local to tab page.','line_number':4424,'multiline':False]
['text':'
 * Create a popup to be used as the preview or info window.
 * NOTE: this makes the popup the current window, so that the file can be
 * edited.  However, it must not remain to be the current window, the caller
 * must make sure of that.
 ','line_number':4467,'multiline':True]
['text':' Set the width to a reasonable value, so that w_topline can be computed.','line_number':4485,'multiline':False]
['text':' Will switch to another buffer soon, dummy one can be wiped.','line_number':4493,'multiline':False]
['text':'
 * Close any preview popup.
 ','line_number':4500,'multiline':True]
['text':'
 * Hide the info popup.
 ','line_number':4512,'multiline':True]
['text':'
 * Close any info popup.
 ','line_number':4524,'multiline':True]
['text':'
 * Get the message window.
 * Returns NULL if something failed.
 ','line_number':4539,'multiline':True]
['text':' use the full screen width','line_number':4556,'multiline':False]
['text':' position at bottom of screen','line_number':4559,'multiline':False]
['text':' no padding, border at the top','line_number':4565,'multiline':False]
['text':'
 * If the message window is not visible: show it
 * If the message window is visible: reset the timeout
 ','line_number':4576,'multiline':True]
['text':' the highlight may have changed.','line_number':4588,'multiline':False]
['text':'
 * If the message window is visible: hide it.
 ','line_number':4617,'multiline':True]
['text':' Values saved in start_echowindow() and restored in end_echowindow()','line_number':4627,'multiline':False]
['text':' Values saved in end_echowindow() and restored in start_echowindow()','line_number':4630,'multiline':False]
['text':'
 * Invoked before outputting a message for ":echowindow".
 * "time_sec" is the display time, zero means using the default 3 sec.
 ','line_number':4634,'multiline':True]
['text':'
 * Invoked after outputting a message for ":echowindow".
 ','line_number':4650,'multiline':True]
['text':' show the message window now','line_number':4659,'multiline':False]
['text':' do not overwrite messages','line_number':4662,'multiline':False]
['text':'
 * Close any popup for a text property associated with "win".
 * Return TRUE if a popup was closed.
 ','line_number':4670,'multiline':True]
['text':'
 * Set the title of the popup window to the file name.
 ','line_number':4696,'multiline':True]
['text':'
 * If there is a preview window, update the title.
 * Used after changing directory.
 ','line_number':4721,'multiline':True]
['text':' FEAT_PROP_POPUP','line_number':4735,'multiline':False]
