['text':' vi:set ts=8 sts=4 sw=4 noet:
 *
 * VIM - Vi IMproved	by Bram Moolenaar
 *
 * Do ":help uganda"  in Vim to read copying and usage conditions.
 * Do ":help credits" in Vim to see a list of people who contributed.
 * See README.txt for an overview of the Vim source code.
 ','line_number':1,'multiline':True]
['text':'
 * dict.c: Dictionary support
 ','line_number':10,'multiline':True]
['text':' List head for garbage collection. Although there can be a reference loop','line_number':18,'multiline':False]
['text':' from partial to dict to partial, we don't need to keep track of the partial,','line_number':19,'multiline':False]
['text':' since it will get freed when the dict is unused and gets freed.','line_number':20,'multiline':False]
['text':'
 * Allocate an empty header for a dictionary.
 * Caller should take care of the reference count.
 ','line_number':23,'multiline':True]
['text':' Add the dict to the list of dicts for garbage collection.','line_number':36,'multiline':False]
['text':'
 * dict_alloc() with an ID for alloc_fail().
 ','line_number':51,'multiline':True]
['text':'
 * Allocate an empty dict for a return value.
 * Returns OK or FAIL.
 ','line_number':74,'multiline':True]
['text':'
 * Set a dictionary as the return value
 ','line_number':90,'multiline':True]
['text':'
 * Free a Dictionary, including all non-container items it contains.
 * Ignores the reference count.
 ','line_number':102,'multiline':True]
['text':'
 * Clear hashtab "ht" and dict items it contains.
 * If "ht" is not freed then you should call hash_init() next!
 ','line_number':114,'multiline':True]
['text':' Lock the hashtab, we don't want it to resize while freeing items.','line_number':128,'multiline':False]
['text':' Remove the item before deleting it, just in case there is','line_number':135,'multiline':False]
['text':' something recursive causing trouble.','line_number':136,'multiline':False]
['text':' The hashtab is still locked, it has to be re-initialized anyway.','line_number':144,'multiline':False]
['text':' Remove the dict from the list of dicts for garbage collection.','line_number':151,'multiline':False]
['text':'
 * Unreference a Dictionary: decrement the reference count and free it when it
 * becomes zero.
 ','line_number':171,'multiline':True]
['text':'
 * Go through the list of dicts and free items without the copyID.
 * Returns TRUE if something was freed.
 ','line_number':182,'multiline':True]
['text':' Free the Dictionary and ordinary items it contains, but don't','line_number':195,'multiline':False]
['text':' recurse into Lists and Dictionaries, they will be in the list','line_number':196,'multiline':False]
['text':' of dicts or list of lists.','line_number':197,'multiline':False]
['text':'
 * Allocate a Dictionary item.
 * The "key" is copied to the new item.
 * Note that the type and value of the item "di_tv" still needs to be
 * initialized!
 * Returns NULL when out of memory.
 ','line_number':217,'multiline':True]
['text':'
 * Make a copy of a Dictionary item.
 ','line_number':241,'multiline':True]
['text':'
 * Remove item "item" from Dictionary "dict" and free it.
 * "command" is used for the error message when the hashtab if frozen.
 ','line_number':260,'multiline':True]
['text':'
 * Free a dict item.  Also clears the value.
 ','line_number':277,'multiline':True]
['text':'
 * Make a copy of dict "d".  Shallow if "deep" is FALSE.
 * The refcount of the new dict is set to 1.
 * See item_copy() for "top" and "copyID".
 * Returns NULL when out of memory.
 ','line_number':288,'multiline':True]
['text':'
 * Check for adding a function to g: or s: (in Vim9 script) or l:.
 * If the name is wrong give an error message and return TRUE.
 ','line_number':358,'multiline':True]
['text':'
 * Add item "item" to Dictionary "d".
 * Returns FAIL when out of memory and when key already exists.
 ','line_number':373,'multiline':True]
['text':'
 * Add a number or special entry to dictionary "d".
 * Returns FAIL when out of memory and when key already exists.
 ','line_number':385,'multiline':True]
['text':'
 * Add a number entry to dictionary "d".
 * Returns FAIL when out of memory and when key already exists.
 ','line_number':407,'multiline':True]
['text':'
 * Add a special entry to dictionary "d".
 * Returns FAIL when out of memory and when key already exists.
 ','line_number':417,'multiline':True]
['text':'
 * Add a string entry to dictionary "d".
 * Returns FAIL when out of memory and when key already exists.
 ','line_number':427,'multiline':True]
['text':'
 * Add a string entry to dictionary "d".
 * "str" will be copied to allocated memory.
 * When "len" is -1 use the whole string, otherwise only this many bytes.
 * Returns FAIL when out of memory and when key already exists.
 ','line_number':437,'multiline':True]
['text':'
 * Add a list entry to dictionary "d".
 * Returns FAIL when out of memory and when key already exists.
 ','line_number':469,'multiline':True]
['text':'
 * Add a typval_T entry to dictionary "d".
 * Returns FAIL when out of memory and when key already exists.
 ','line_number':492,'multiline':True]
['text':'
 * Add a callback to dictionary "d".
 * Returns FAIL when out of memory and when key already exists.
 ','line_number':513,'multiline':True]
['text':'
 * Initializes "iter" for iterating over dictionary items with
 * dict_iterate_next().
 * If "var" is not a Dict or an empty Dict then there will be nothing to
 * iterate over, no error is given.
 * NOTE: The dictionary must not change until iterating is finished!
 ','line_number':534,'multiline':True]
['text':'
 * Iterate over the items referred to by "iter".  It should be initialized with
 * dict_iterate_start().
 * Returns a pointer to the key.
 * "*tv_result" is set to point to the value for that key.
 * If there are no more items, NULL is returned.
 ','line_number':555,'multiline':True]
['text':'
 * Add a dict entry to dictionary "d".
 * Returns FAIL when out of memory and when key already exists.
 ','line_number':583,'multiline':True]
['text':'
 * Get the number of items in a Dictionary.
 ','line_number':606,'multiline':True]
['text':'
 * Find item "key[len]" in Dictionary "d".
 * If "len" is negative use strlen(key).
 * Returns NULL when not found.
 ','line_number':617,'multiline':True]
['text':' Avoid a malloc/free by using buf[].','line_number':643,'multiline':False]
['text':'
 * Returns TRUE if "key" is present in Dictionary "d".
 ','line_number':655,'multiline':True]
['text':'
 * Get a typval_T item from a dictionary and copy it into "rettv".
 * Returns FAIL if the entry doesn't exist or out of memory.
 ','line_number':664,'multiline':True]
['text':'
 * Get a string item from a dictionary.
 * When "save" is TRUE allocate memory for it.
 * When FALSE a shared buffer is used, can only be used once!
 * Returns NULL if the entry doesn't exist or out of memory.
 ','line_number':680,'multiline':True]
['text':'
 * Get a number item from a dictionary.
 * Returns 0 if the entry doesn't exist.
 ','line_number':701,'multiline':True]
['text':'
 * Get a number item from a dictionary.
 * Returns "def" if the entry doesn't exist.
 ','line_number':711,'multiline':True]
['text':'
 * Get a number item from a dictionary.
 * Returns 0 if the entry doesn't exist.
 * Give an error if the entry is not a number.
 ','line_number':726,'multiline':True]
['text':'
 * Get a bool item (number or true/false) from a dictionary.
 * Returns "def" if the entry doesn't exist.
 ','line_number':747,'multiline':True]
['text':'
 * Return an allocated string with the string representation of a Dictionary.
 * May return NULL.
 ','line_number':762,'multiline':True]
['text':'
 * Advance over a literal key, including "-".  If the first character is not a
 * literal key character then "key" is returned.
 ','line_number':824,'multiline':True]
['text':'
 * Get the key for #{key: val} into "tv" and advance "arg".
 * Return FAIL when there is no valid key.
 ','line_number':838,'multiline':True]
['text':'
 * Get a literal key for a Vim9 dict:
 * {"name": value},
 * {'name': value},
 * {name: value} use "name" as a literal key
 * Return the key in allocated memory or NULL in the case of an error.
 * "arg" is advanced to just after the key.
 ','line_number':856,'multiline':True]
['text':'
 * Allocate a variable for a Dictionary and fill it from "*arg".
 * "*arg" points to the "{".
 * "literal" is TRUE for #{key: val}
 * Return OK or FAIL.  Returns NOTDONE for {expr}.
 ','line_number':897,'multiline':True]
['text':' First check if it's not a curly-braces expression: {expr}.','line_number':918,'multiline':False]
['text':' Must do this without evaluating, otherwise a function may be called','line_number':919,'multiline':False]
['text':' twice.  Unfortunately this means we need to call eval1() twice for the','line_number':920,'multiline':False]
['text':' first item.','line_number':921,'multiline':False]
['text':' "{}" is an empty Dictionary.','line_number':922,'multiline':False]
['text':' "#{abc}" is never a curly-braces expression.','line_number':923,'multiline':False]
['text':' recursive!','line_number':961,'multiline':False]
['text':' the colon should come right after the key, but this wasn't checked','line_number':976,'multiline':False]
['text':' previously, so only require it in Vim9 script.','line_number':977,'multiline':False]
['text':' "key" is NULL when tv_get_string_buf_chk() gave an errmsg','line_number':999,'multiline':False]
['text':' recursive!','line_number':1012,'multiline':False]
['text':' the comma should come right after the value, but this wasn't checked','line_number':1039,'multiline':False]
['text':' previously, so only require it in Vim9 script.','line_number':1040,'multiline':False]
['text':' the "}" can be on the next line','line_number':1054,'multiline':False]
['text':'
 * Go over all entries in "d2" and add them to "d1".
 * When "action" is "error" then a duplicate key is an error.
 * When "action" is "force" then a duplicate key is overwritten.
 * When "action" is "move" then move items instead of copying.
 * Otherwise duplicate keys are ignored ("action" is "keep").
 * "func_name" is used for reporting where an error occurred.
 ','line_number':1085,'multiline':True]
['text':' don't rehash on hash_remove()','line_number':1108,'multiline':False]
['text':' Check the key to be valid when adding to any scope.','line_number':1124,'multiline':False]
['text':' Cheap way to move a dict item from "d2" to "d1".','line_number':1137,'multiline':False]
['text':' If dict_add() fails then "d2" won't be empty.','line_number':1138,'multiline':False]
['text':' Disallow replacing a builtin function.','line_number':1160,'multiline':False]
['text':'
 * Return the dictitem that an entry in a hashtable points to.
 ','line_number':1173,'multiline':True]
['text':'
 * Return TRUE when two dictionaries have exactly the same key/values.
 ','line_number':1182,'multiline':True]
['text':' ignore case for strings','line_number':1189,'multiline':False]
['text':' TRUE when used recursively','line_number':1190,'multiline':False]
['text':' empty and NULL dicts are considered equal','line_number':1201,'multiline':False]
['text':'
 * Count the number of times item "needle" occurs in Dict "d". Case is ignored
 * if "ic" is TRUE.
 ','line_number':1222,'multiline':True]
['text':'
 * extend() a Dict. Append Dict argvars[1] to Dict argvars[0] and return the
 * resulting Dict in "rettv".  "is_new" is TRUE for extendnew().
 ','line_number':1250,'multiline':True]
['text':' Check the third argument.','line_number':1287,'multiline':False]
['text':'
 * Implementation of map() and filter() for a Dict.  Apply "expr" to every
 * item in Dict "d" and return the result in "rettv".
 ','line_number':1322,'multiline':True]
['text':' Create one funccall_T for all eval_expr_typval() calls.','line_number':1362,'multiline':False]
['text':' map(): replace the dict item value','line_number':1402,'multiline':False]
['text':' mapnew(): add the item value to the new dict','line_number':1409,'multiline':False]
['text':' filter(false): remove the item from the dict','line_number':1417,'multiline':False]
['text':'
 * "remove({dict})" function
 ','line_number':1431,'multiline':True]
['text':'
 * Turn a dict into a list.
 ','line_number':1477,'multiline':True]
['text':' NULL dict behaves like an empty dict','line_number':1500,'multiline':False]
['text':' keys()','line_number':1518,'multiline':False]
['text':' values()','line_number':1525,'multiline':False]
['text':' items()','line_number':1530,'multiline':False]
['text':'
 * "items(dict)" function
 ','line_number':1547,'multiline':True]
['text':'
 * "keys()" function
 ','line_number':1561,'multiline':True]
['text':'
 * "values(dict)" function
 ','line_number':1570,'multiline':True]
['text':'
 * Make each item in the dict readonly (not the value of the item).
 ','line_number':1579,'multiline':True]
['text':' Set readonly','line_number':1588,'multiline':False]
['text':'
 * "has_key()" function
 ','line_number':1598,'multiline':True]
['text':' defined(FEAT_EVAL)','line_number':1619,'multiline':False]
