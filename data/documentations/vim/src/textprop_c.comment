['text':' vi:set ts=8 sts=4 sw=4 noet:
 *
 * VIM - Vi IMproved	by Bram Moolenaar
 *
 * Do ":help uganda"  in Vim to read copying and usage conditions.
 * Do ":help credits" in Vim to see a list of people who contributed.
 * See README.txt for an overview of the Vim source code.
 ','line_number':1,'multiline':True]
['text':'
 * Text properties implementation.  See ":help text-properties".
 ','line_number':10,'multiline':True]
['text':'
 * In a hashtable item "hi_key" points to "pt_name" in a proptype_T.
 * This avoids adding a pointer to the hashtable item.
 * PT2HIKEY() converts a proptype pointer to a hashitem key pointer.
 * HIKEY2PT() converts a hashitem key pointer to a proptype pointer.
 * HI2PT() converts a hashitem pointer to a proptype pointer.
 ','line_number':18,'multiline':True]
['text':' The global text property types.','line_number':29,'multiline':False]
['text':' The last used text property type ID.','line_number':33,'multiline':False]
['text':'
 * Find a property type by name, return the hashitem.
 * Returns NULL if the item can't be found.
 ','line_number':36,'multiline':True]
['text':'
 * Like find_prop_type_hi() but return the property type.
 ','line_number':61,'multiline':True]
['text':'
 * Get the prop type ID of "name".
 * When not found return zero.
 ','line_number':74,'multiline':True]
['text':'
 * Lookup a property type by name.  First in "buf" and when not found in the
 * global types.
 * When not found gives an error message and returns NULL.
 ','line_number':88,'multiline':True]
['text':'
 * Get an optional "bufnr" item from the dict in "arg".
 * When the argument is not used or "bufnr" is not present then "buf" is
 * unchanged.
 * If "bufnr" is valid or not present return OK.
 * When "arg" is not a dict or "bufnr" is invalid return FAIL.
 ','line_number':105,'multiline':True]
['text':' NULL dict is like an empty dict','line_number':123,'multiline':False]
['text':'
 * prop_add({lnum}, {col}, {props})
 ','line_number':135,'multiline':True]
['text':'
 * Attach a text property 'type_name' to the text starting
 * at [start_lnum, start_col] and ending at [end_lnum, end_col] in
 * the buffer "buf" and assign identifier "id".
 * When "text" is not NULL add it to buf->b_textprop_text[-id - 1].
 ','line_number':159,'multiline':True]
['text':' double check we got the right ID','line_number':216,'multiline':False]
['text':' change any control character (Tab, Newline, etc.) to a Space to make','line_number':225,'multiline':False]
['text':' it simpler to compute the size','line_number':226,'multiline':False]
['text':' start column use in tp_col','line_number':235,'multiline':False]
['text':' column where it appears','line_number':236,'multiline':False]
['text':' in bytes','line_number':237,'multiline':False]
['text':' Fetch the line to get the ml_line_len field updated.','line_number':239,'multiline':False]
['text':' can include the end-of-line','line_number':259,'multiline':False]
['text':' zero-width property','line_number':261,'multiline':False]
['text':' text is placed on one character','line_number':265,'multiline':False]
['text':' before or after the line','line_number':268,'multiline':False]
['text':' Allocate the new line with space for the new property.','line_number':275,'multiline':False]
['text':' Copy the text, including terminating NUL.','line_number':279,'multiline':False]
['text':' Find the index where to insert the new property.','line_number':282,'multiline':False]
['text':' Since the text properties are not aligned properly when stored with','line_number':283,'multiline':False]
['text':' the text, we need to copy them as bytes before using it as a struct.','line_number':284,'multiline':False]
['text':' col is MAXCOL when the text goes above or after the line, when','line_number':291,'multiline':False]
['text':' above we should use column zero for sorting','line_number':292,'multiline':False]
['text':'
 * prop_add_list()
 * First argument specifies the text property:
 *   {'type': <str>, 'id': <num>, 'bufnr': <num>}
 * Second argument is a List where each item is a List with the following
 * entries: [lnum, start_col, end_col]
 ','line_number':336,'multiline':True]
['text':' This must be done _before_ we start adding properties because property','line_number':380,'multiline':False]
['text':' changes trigger buffer (memline) reorganisation, which needs this flag','line_number':381,'multiline':False]
['text':' to be correctly set.','line_number':382,'multiline':False]
['text':' this is never reset','line_number':383,'multiline':False]
['text':'
 * Get the next ID to use for a textprop with text in buffer "buf".
 ','line_number':418,'multiline':True]
['text':' TODO: recycle deleted entries','line_number':424,'multiline':False]
['text':' Flag that is set when a negative ID isused for a normal text property.','line_number':428,'multiline':False]
['text':' It is then impossible to use virtual text properties.','line_number':429,'multiline':False]
['text':'
 * Shared between prop_add() and popup_create().
 * "dict_arg" is the function argument of a dict containing "bufnr".
 * it is NULL for popup_create().
 * Returns the "id" used for "text" or zero.
 ','line_number':432,'multiline':True]
['text':' use a default length of 1 to make multiple props show up','line_number':515,'multiline':False]
['text':' Column must be 1 or more for a normal text property; when "text" is','line_number':568,'multiline':False]
['text':' present zero means it goes after the line.','line_number':569,'multiline':False]
['text':' This must be done _before_ we add the property because property changes','line_number':604,'multiline':False]
['text':' trigger buffer (memline) reorganisation, which needs this flag to be','line_number':605,'multiline':False]
['text':' correctly set.','line_number':606,'multiline':False]
['text':' this is never reset','line_number':607,'multiline':False]
['text':'
 * Fetch the text properties for line "lnum" in buffer "buf".
 * Returns the number of text properties and, when non-zero, a pointer to the
 * first one in "props" (note that it is not aligned, therefore the char_u
 * pointer).
 ','line_number':620,'multiline':True]
['text':' Be quick when no text property types have been defined for the buffer,','line_number':633,'multiline':False]
['text':' unless we are adding one.','line_number':634,'multiline':False]
['text':' Fetch the line to get the ml_line_len field updated.','line_number':638,'multiline':False]
['text':'
 * Return the number of text properties with "above" or "below" alignment in
 * line "lnum".  A "right" aligned property also goes below after a "below" or
 * other "right" aligned property.
 ','line_number':653,'multiline':True]
['text':'*
 * Return the number of text properties on line "lnum" in the current buffer.
 * When "only_starting" is true only text properties starting in this line will
 * be considered.
 * When "last_line" is FALSE then text properties after the line are not
 * counted.
 ','line_number':694,'multiline':True]
['text':' A prop is dropped when in the first line and it continues from the','line_number':713,'multiline':False]
['text':' previous line, or when not in the last line and it is virtual text','line_number':714,'multiline':False]
['text':' after the line.','line_number':715,'multiline':False]
['text':'
 * Score for sorting on position of the text property: 0: above,
 * 1: after (default), 2: right, 3: below (comes last)
 ','line_number':726,'multiline':True]
['text':'
 * Function passed to qsort() to sort text properties.
 * Return 1 if "s1" has priority over "s2", -1 if the other way around, zero if
 * both have the same priority.
 ','line_number':742,'multiline':True]
['text':' sort on order where it is added','line_number':766,'multiline':False]
['text':' property that inserts text has priority over one that doesn't','line_number':771,'multiline':False]
['text':' check highest priority, defined by the type','line_number':775,'multiline':False]
['text':' same priority, one that starts first wins','line_number':788,'multiline':False]
['text':' for a property with text the id can be used as tie breaker','line_number':792,'multiline':False]
['text':'
 * Sort "count" text properties using an array if indexes "idxs" into the list
 * of text props "props" for buffer "buf".
 ','line_number':799,'multiline':True]
['text':'
 * Find text property "type_id" in the visible lines of window "wp".
 * Match "id" when it is > 0.
 * Returns FAIL when not found.
 ','line_number':815,'multiline':True]
['text':' return when "type_id" no longer exists','line_number':828,'multiline':False]
['text':' w_botline may not have been updated yet.','line_number':832,'multiline':False]
['text':'
 * Set the text properties for line "lnum" to "props" with length "len".
 * If "len" is zero text properties are removed, "props" is not used.
 * Any existing text properties are dropped.
 * Only works for the current buffer.
 ','line_number':852,'multiline':True]
['text':'
 * Add "text_props" with "text_prop_count" text properties to line "lnum".
 ','line_number':880,'multiline':True]
['text':'
 * Function passed to qsort() for sorting proptype_T on pt_id.
 ','line_number':903,'multiline':True]
['text':' Make the lookup faster by creating an array with pointers to','line_number':924,'multiline':False]
['text':' hashtable entries, sorted on pt_id.','line_number':925,'multiline':False]
['text':' binary search in the sorted array','line_number':947,'multiline':False]
['text':'
 * Fill 'dict' with text properties in 'prop'.
 ','line_number':963,'multiline':True]
['text':' virtual text property','line_number':998,'multiline':False]
['text':' negate the property id to get the string index','line_number':1002,'multiline':False]
['text':' text_align','line_number':1006,'multiline':False]
['text':' text_wrap','line_number':1017,'multiline':False]
['text':'
 * Find a property type by ID in "buf" or globally.
 * Returns NULL if not found.
 ','line_number':1025,'multiline':True]
['text':'
 * Return TRUE if "prop" is a valid text property type.
 ','line_number':1040,'multiline':True]
['text':'
 * prop_clear({lnum} [, {lnum_end} [, {bufnr}]])
 ','line_number':1049,'multiline':True]
['text':' need to allocate the line now','line_number':1101,'multiline':False]
['text':'
 * prop_find({props} [, {direction}])
 ','line_number':1116,'multiline':True]
['text':' FORWARD == 1, BACKWARD == -1','line_number':1135,'multiline':False]
['text':' For the very first line try to find the first property before or','line_number':1236,'multiline':False]
['text':' after `col`, depending on the search direction.','line_number':1237,'multiline':False]
['text':' Check if the starting position has text props.','line_number':1252,'multiline':False]
['text':' The property was not continued from last line, it starts on','line_number':1259,'multiline':False]
['text':' this line.','line_number':1260,'multiline':False]
['text':' The property does not continue on the next line, it ends on','line_number':1262,'multiline':False]
['text':' this line.','line_number':1263,'multiline':False]
['text':' Skip lines without the start flag.','line_number':1268,'multiline':False]
['text':' Always search backwards for start when search started','line_number':1271,'multiline':False]
['text':' on a prop and we're not skipping.','line_number':1272,'multiline':False]
['text':' If skipstart is true, skip the prop at start pos (even if','line_number':1278,'multiline':False]
['text':' continued from another line).','line_number':1279,'multiline':False]
['text':'
 * Returns TRUE if 'type_or_id' is in the 'types_or_ids' list.
 ','line_number':1308,'multiline':True]
['text':'
 * Return all the text properties in line 'lnum' in buffer 'buf' in 'retlist'.
 * If 'prop_types' is not NULL, then return only the text properties with
 * matching property type in the 'prop_types' array.
 * If 'prop_ids' is not NULL, then return only the text properties with
 * an identifier in the 'props_ids' array.
 * If 'add_lnum' is TRUE, then add the line number also to the text property
 * dictionary.
 ','line_number':1323,'multiline':True]
['text':'
 * Convert a List of property type names into an array of property type
 * identifiers. Returns a pointer to the allocated array. Returns NULL on
 * error. 'num_types' is set to the number of returned property types.
 ','line_number':1373,'multiline':True]
['text':'
 * Convert a List of property identifiers into an array of property
 * identifiers.  Returns a pointer to the allocated array. Returns NULL on
 * error. 'num_ids' is set to the number of returned property identifiers.
 ','line_number':1419,'multiline':True]
['text':'
 * prop_list({lnum} [, {bufnr}])
 ','line_number':1458,'multiline':True]
['text':' default: get text properties on current line','line_number':1484,'multiline':False]
['text':' negative end_lnum is used as an offset from the last buffer','line_number':1507,'multiline':False]
['text':' line','line_number':1508,'multiline':False]
['text':'
 * prop_remove({props} [, {lnum} [, {lnum_end}]])
 ','line_number':1561,'multiline':True]
['text':' for a single "type"','line_number':1576,'multiline':False]
['text':' array, for a list of "types", allocated','line_number':1577,'multiline':False]
['text':' number of elements in "type_ids"','line_number':1578,'multiline':False]
['text':' if a specific type was supplied "type": check that (and ignore "types".','line_number':1618,'multiline':False]
['text':' Otherwise check against the list of "types".','line_number':1619,'multiline':False]
['text':' static because of alignment','line_number':1686,'multiline':False]
['text':' need to allocate the line to be able to change it','line_number':1720,'multiline':False]
['text':' negative ID: property with text - free the text','line_number':1747,'multiline':False]
['text':' Reduce the growarray size for NULL pointers at the end.','line_number':1778,'multiline':False]
['text':'
 * Common for f_prop_type_add() and f_prop_type_change().
 ','line_number':1788,'multiline':True]
['text':'
 * prop_type_add({name}, {props})
 ','line_number':1925,'multiline':True]
['text':'
 * prop_type_change({name}, {props})
 ','line_number':1934,'multiline':True]
['text':'
 * prop_type_delete({name} [, {bufnr}])
 ','line_number':1943,'multiline':True]
['text':' currently visible text properties will disappear','line_number':1991,'multiline':False]
['text':'
 * prop_type_get({name} [, {props}])
 ','line_number':1996,'multiline':True]
['text':'
 * prop_type_list([{bufnr}])
 ','line_number':2066,'multiline':True]
['text':'
 * Free all property types in "ht".
 ','line_number':2094,'multiline':True]
['text':'
 * Free all global property types.
 ','line_number':2123,'multiline':True]
['text':'
 * Free all property types for "buf".
 ','line_number':2135,'multiline':True]
['text':' Struct used to return two values from adjust_prop().','line_number':2146,'multiline':False]
['text':' if the property was changed','line_number':2149,'multiline':False]
['text':' whether after this change, the prop may be removed','line_number':2150,'multiline':False]
['text':'
 * Adjust the property for "added" bytes (can be negative) inserted at "col".
 *
 * Note that "col" is zero-based, while tp_col is one-based.
 * Only for the current buffer.
 * "flags" can have:
 * APC_SUBSTITUTE:	Text is replaced, not inserted.
 * APC_INDENT:		Text is inserted before virtual text prop
 ','line_number':2153,'multiline':True]
['text':' prop after end of the line doesn't move','line_number':2175,'multiline':False]
['text':' when inserting indent just before a character with virtual text','line_number':2187,'multiline':False]
['text':' shift the text property','line_number':2188,'multiline':False]
['text':' do not drop zero-width props if they later can increase in size','line_number':2192,'multiline':False]
['text':' Change is entirely before the text property: Only shift','line_number':2199,'multiline':False]
['text':' Insertion was inside text property','line_number':2202,'multiline':False]
['text':' don't change length for virtual text','line_number':2221,'multiline':False]
['text':'
 * Adjust the columns of text properties in line "lnum" after position "col" to
 * shift by "bytes_added" (can be negative).
 * Note that "col" is zero-based, while tp_col is one-based.
 * Only for the current buffer.
 * "flags" can have:
 * APC_SAVE_FOR_UNDO:	Call u_savesub() before making changes to the line.
 * APC_SUBSTITUTE:	Text is replaced, not inserted.
 * APC_INDENT:		Text is inserted before virtual text prop
 * Caller is expected to check b_has_textprop and "bytes_added" being non-zero.
 * Returns TRUE when props were changed.
 ','line_number':2234,'multiline':True]
['text':' write index','line_number':2267,'multiline':False]
['text':' Save for undo if requested and not done yet.','line_number':2277,'multiline':False]
['text':' u_savesub() may have updated curbuf->b_ml, fetch it again','line_number':2283,'multiline':False]
['text':' Drop this text property','line_number':2288,'multiline':False]
['text':'
 * Adjust text properties for a line that was split in two.
 * "lnum_props" is the line that has the properties from before the split.
 * "lnum_top" is the top line.
 * "kept" is the number of bytes kept in the first line, while
 * "deleted" is the number of bytes deleted.
 * "at_eol" is true if the split is after the end of the line.
 ','line_number':2310,'multiline':True]
['text':' Get the text properties from "lnum_props".','line_number':2336,'multiline':False]
['text':' Keep the relevant ones in the first line, reducing the length if needed.','line_number':2341,'multiline':False]
['text':' Copy the ones that include the split to the second line.','line_number':2342,'multiline':False]
['text':' Move the ones after the split to the second line.','line_number':2343,'multiline':False]
['text':' copy the prop to an aligned structure','line_number':2352,'multiline':False]
['text':' a text prop "above" behaves like it is on the first text column','line_number':2359,'multiline':False]
['text':' when a prop has text it is never copied','line_number':2372,'multiline':False]
['text':' Only add the property to the next line if the length is bigger than','line_number':2388,'multiline':False]
['text':' zero.','line_number':2389,'multiline':False]
['text':'
 * Prepend properties of joined line "lnum" to "new_props".
 ','line_number':2419,'multiline':True]
['text':' drop property with text after the line','line_number':2443,'multiline':False]
['text':' Remove leading spaces','line_number':2446,'multiline':False]
['text':' Make line start at its final column','line_number':2447,'multiline':False]
['text':' Search for continuing prop.','line_number':2457,'multiline':False]
['text':' Start/end is taken care of when deleting joined lines','line_number':2469,'multiline':False]
['text':' FEAT_PROP_POPUP','line_number':2481,'multiline':False]
