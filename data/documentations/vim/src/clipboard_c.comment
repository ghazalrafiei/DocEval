['text':' vi:set ts=8 sts=4 sw=4 noet:
 *
 * VIM - Vi IMproved	by Bram Moolenaar
 *
 * Do ":help uganda"  in Vim to read copying and usage conditions.
 * Do ":help credits" in Vim to see a list of people who contributed.
 * See README.txt for an overview of the Vim source code.
 ','line_number':1,'multiline':True]
['text':'
 * clipboard.c: Functions to handle the clipboard
 ','line_number':10,'multiline':True]
['text':' Functions for copying and pasting text between applications.','line_number':22,'multiline':False]
['text':' This is always included in a GUI version, but may also be included when the','line_number':23,'multiline':False]
['text':' clipboard and mouse is available to a terminal version such as xterm.','line_number':24,'multiline':False]
['text':' Note: there are some more functions in ops.c that handle selection stuff.','line_number':25,'multiline':False]
['text':'','line_number':26,'multiline':False]
['text':' Also note that the majority of functions here deal with the X 'primary'','line_number':27,'multiline':False]
['text':' (visible - for Visual mode use) selection, and only that. There are no','line_number':28,'multiline':False]
['text':' versions of these for the 'clipboard' selection, as Visual mode has no use','line_number':29,'multiline':False]
['text':' for them.','line_number':30,'multiline':False]
['text':'
 * Selection stuff using Visual mode, for cutting and pasting text to other
 * windows.
 ','line_number':34,'multiline':True]
['text':'
 * Call this to initialise the clipboard.  Pass it FALSE if the clipboard code
 * is included, but the clipboard can not be used, or TRUE if the clipboard can
 * be used.  Eg unix may call this with FALSE, then call it again with TRUE if
 * the GUI starts.
 ','line_number':39,'multiline':True]
['text':'
 * Check whether the VIsual area has changed, and if so try to become the owner
 * of the selection, and free any old converted selection we may still have
 * lying around.  If the VIsual mode has ended, make a copy of what was
 * selected so we can still give it to others.	Will probably have to make sure
 * this is called whenever VIsual mode is ended.
 ','line_number':67,'multiline':True]
['text':' If visual mode is only due to a redo command ("."), then ignore it','line_number':79,'multiline':False]
['text':'
     * Also want to check somehow that we are reading from the keyboard rather
     * than a mapping etc.
     ','line_number':127,'multiline':True]
['text':' Always own the selection, we might have lost it without being','line_number':132,'multiline':False]
['text':' notified, e.g. during a ":sh" command.','line_number':133,'multiline':False]
['text':' May have to show a different kind of highlighting for the','line_number':141,'multiline':False]
['text':' selected area.  There is no specific redraw command for this,','line_number':142,'multiline':False]
['text':' just redraw all windows on the current buffer.','line_number':143,'multiline':False]
['text':' Only own the clipboard when we didn't own it yet.','line_number':154,'multiline':False]
['text':' May have to show a different kind of highlighting for the selected','line_number':194,'multiline':False]
['text':' area.  There is no specific redraw command for this, just redraw all','line_number':195,'multiline':False]
['text':' windows on the current buffer.','line_number':196,'multiline':False]
['text':'
 * Save and restore clip_unnamed before doing possibly many changes. This
 * prevents accessing the clipboard very often which might slow down Vim
 * considerably.
 ','line_number':228,'multiline':True]
['text':' if set, inside a start_global_changes','line_number':233,'multiline':False]
['text':' clipboard needs to be updated','line_number':234,'multiline':False]
['text':'
 * Save clip_unnamed and reset it.
 ','line_number':237,'multiline':True]
['text':'
 * Return TRUE if setting the clipboard was postponed, it already contains the
 * right text.
 ','line_number':255,'multiline':True]
['text':'
 * Restore clip_unnamed and set the selection when needed.
 ','line_number':265,'multiline':True]
['text':' recursive','line_number':272,'multiline':False]
['text':' only store something in the clipboard,','line_number':281,'multiline':False]
['text':' if we have yanked anything to it','line_number':282,'multiline':False]
['text':'
 * Called when Visual mode is ended: update the selection.
 ','line_number':298,'multiline':True]
['text':'
 * Return TRUE if automatic selection of Visual area is desired for the *
 * register.
 ','line_number':310,'multiline':True]
['text':'
 * Return TRUE if automatic selection of Visual area is desired for the +
 * register.
 ','line_number':324,'multiline':True]
['text':'
 * Stuff for general mouse selection, without using Visual mode.
 ','line_number':339,'multiline':True]
['text':'
 * Compare two screen positions ala strcmp()
 ','line_number':343,'multiline':True]
['text':' "how" flags for clip_invert_area()','line_number':360,'multiline':False]
['text':'
 * Invert or un-invert a rectangle of the screen.
 * "invert" is true if the result is inverted.
 ','line_number':365,'multiline':True]
['text':' this goes on top of all popup windows','line_number':384,'multiline':False]
['text':'
 * Invert a region of the display between a starting and ending row and column
 * Values for "how":
 * CLIP_CLEAR:  undo inversion
 * CLIP_SET:    set inversion
 * CLIP_TOGGLE: set inversion if pos1 < pos2, undo inversion otherwise.
 * 0: invert (GUI only).
 ','line_number':413,'multiline':True]
['text':' Swap the from and to positions so the from is always before','line_number':442,'multiline':False]
['text':' If all on the same line, do it the easy way','line_number':457,'multiline':False]
['text':' Handle a piece of the first line','line_number':464,'multiline':False]
['text':' Handle a piece of the last line','line_number':472,'multiline':False]
['text':' Handle the rectangle that's left','line_number':479,'multiline':False]
['text':'
 * Start, continue or end a modeless selection.  Used when editing the
 * command-line, in the cmdline window and when the mouse is in a popup window.
 ','line_number':486,'multiline':True]
['text':' Right mouse button: If there was no selection, start one.','line_number':502,'multiline':False]
['text':' Otherwise extend the existing selection.','line_number':503,'multiline':False]
['text':' Don't try extending a selection if there isn't one.  Happens when','line_number':512,'multiline':False]
['text':' button-down is in the cmdline and them moving mouse upwards.','line_number':513,'multiline':False]
['text':' release','line_number':517,'multiline':False]
['text':'
 * Update the currently selected region by adding and/or subtracting from the
 * beginning or end and inverting the changed area(s).
 ','line_number':521,'multiline':True]
['text':' See if we changed at the beginning of the selection','line_number':533,'multiline':False]
['text':' See if we changed at the end of the selection','line_number':542,'multiline':False]
['text':'
 * Find the starting and ending positions of the word at the given row and
 * column.  Only white-separated words are recognized here.
 ','line_number':552,'multiline':True]
['text':' Correct for starting in the right half of a double-wide char','line_number':570,'multiline':False]
['text':'
 * Find the column position for the last non-whitespace character on the given
 * line at or before start_col.
 ','line_number':597,'multiline':True]
['text':'
 * Start the selection
 ','line_number':620,'multiline':True]
['text':' click or double click in scrollbar does not start a selection','line_number':635,'multiline':False]
['text':' Click in a popup window restricts selection to that window,','line_number':654,'multiline':False]
['text':' excluding the border.','line_number':655,'multiline':False]
['text':' clear the cursor until the selection is made','line_number':683,'multiline':False]
['text':'
 * Continue processing the selection
 ','line_number':721,'multiline':True]
['text':' cursor shape width','line_number':733,'multiline':False]
['text':' Check to make sure we have something selected','line_number':740,'multiline':False]
['text':'
     * When extending the selection with the right mouse button, swap the
     * start and end if the position is before half the selection
     ','line_number':778,'multiline':True]
['text':'
	 * If the click is before the start, or the click is inside the
	 * selection and the start is the closest side, set the origin to the
	 * end of the selection.
	 ','line_number':784,'multiline':True]
['text':' set state, for when using the right mouse button','line_number':813,'multiline':False]
['text':' If we're on a different line, find where the line ends','line_number':826,'multiline':False]
['text':' See if we are before or after the origin of the selection','line_number':830,'multiline':False]
['text':' If we are still within the same word, do nothing','line_number':860,'multiline':False]
['text':' Get new word boundaries','line_number':865,'multiline':False]
['text':' Handle being after the origin point of selection','line_number':868,'multiline':False]
['text':'
 * Redraw part of the selection if character at "row,col" is inside of it.
 * Only used for the GUI.
 ','line_number':902,'multiline':True]
['text':'
 * Called from outside to clear selected region from the display
 ','line_number':926,'multiline':True]
['text':'
 * Clear the selection if any lines from "row1" to "row2" are inside of it.
 ','line_number':941,'multiline':True]
['text':'
 * Called before the screen is scrolled up or down.  Adjusts the line numbers
 * of the selection.  Call with big number when clearing the screen.
 ','line_number':953,'multiline':True]
['text':' negative for scroll down','line_number':959,'multiline':False]
['text':' scrolled off of the screen','line_number':969,'multiline':False]
['text':' scrolled off of the screen','line_number':975,'multiline':False]
['text':'
 * Copy the currently selected area into the '*' register so it will be
 * available for pasting.
 * When "both" is TRUE also copy to the '+' register.
 ','line_number':983,'multiline':True]
['text':' Can't use ScreenLines unless initialized','line_number':1005,'multiline':False]
['text':'
     * Make sure row1 <= row2, and if row1 == row2 that col1 <= col2.
     ','line_number':1009,'multiline':True]
['text':' correct starting point for being on right half of double-wide char','line_number':1033,'multiline':False]
['text':' Create a temporary buffer for storing the text','line_number':1040,'multiline':False]
['text':' max. 2 bytes per display cell','line_number':1043,'multiline':False]
['text':' out of memory','line_number':1047,'multiline':False]
['text':' Process each row in the selection','line_number':1050,'multiline':False]
['text':' See if we need to nuke some trailing whitespace','line_number':1073,'multiline':False]
['text':' Get rid of trailing whitespace','line_number':1082,'multiline':False]
['text':' If the last line extended to the end, add an extra newline','line_number':1087,'multiline':False]
['text':' If after the first row, we need to always add a newline','line_number':1092,'multiline':False]
['text':' Safetey check for in case resizing went wrong','line_number':1096,'multiline':False]
['text':' single-width double-byte char','line_number':1107,'multiline':False]
['text':' The base character is either in ScreenLinesUC[] or','line_number':1127,'multiline':False]
['text':' ScreenLines[].','line_number':1128,'multiline':False]
['text':' Add a composing character.','line_number':1136,'multiline':False]
['text':' Skip right half of double-wide character.','line_number':1143,'multiline':False]
['text':' Add a newline at the end if the selection ended there','line_number':1157,'multiline':False]
['text':' First cleanup any old selection and become the owner.','line_number':1161,'multiline':False]
['text':' Yank the text into the '*' register.','line_number':1165,'multiline':False]
['text':' Make the register contents available to the outside world.','line_number':1168,'multiline':False]
['text':' Do the same for the '+' register.','line_number':1174,'multiline':False]
['text':' Updating postponed, so that accessing the system clipboard won't','line_number':1189,'multiline':False]
['text':' hang Vim when accessing it many times (e.g. on a :g command).','line_number':1190,'multiline':False]
['text':'
 * Extract the items in the 'clipboard' option and set global values.
 * Return an error message or NULL for success.
 ','line_number':1251,'multiline':True]
['text':' Note: Keep this in sync with p_cb_values.','line_number':1269,'multiline':False]
['text':' clip_unnamed will be reset to clip_unnamed_saved','line_number':1323,'multiline':False]
['text':' at end_global_changes','line_number':1324,'multiline':False]
['text':'
 * Stuff for the X clipboard.  Shared between VMS and Unix.
 ','line_number':1348,'multiline':True]
['text':'
 * Open the application context (if it hasn't been opened yet).
 * Used for Motif GUI and the xterm clipboard.
 ','line_number':1356,'multiline':True]
['text':' Vim's own special selection format','line_number':1370,'multiline':False]
['text':' Vim's extended selection format','line_number':1371,'multiline':False]
['text':' Used to get a timestamp','line_number':1376,'multiline':False]
['text':'
 * X Selection stuff, for cutting and pasting text to other windows.
 ','line_number':1392,'multiline':True]
['text':' Shouldn't ever happen','line_number':1419,'multiline':False]
['text':' requestor wants to know what target types we support','line_number':1421,'multiline':False]
['text':' This used to be: *format = sizeof(Atom) * 8; but that caused','line_number':1438,'multiline':False]
['text':' crashes on 64 bit machines. (Peter Derr)','line_number':1439,'multiline':False]
['text':' For our own format, the first byte contains the motion type','line_number':1458,'multiline':False]
['text':' Our own format with encoding: motion 'encoding' NUL text','line_number':1462,'multiline':False]
['text':' create NUL terminated string which XmbTextListToTextProperty wants','line_number':1489,'multiline':False]
['text':'    from plain text','line_number':1499,'multiline':False]
['text':' 8 bits per char','line_number':1521,'multiline':False]
['text':' To prevent automatically freeing the selection value.','line_number':1538,'multiline':False]
['text':'
 * Property callback to get a timestamp for XtOwnSelection.
 ','line_number':1541,'multiline':True]
['text':' Must be a property notify, state can't be Delete (True), has to be','line_number':1558,'multiline':False]
['text':' one of the supported selection types.','line_number':1559,'multiline':False]
['text':' Make sure the property type is "TIMESTAMP" and it's 32 bits.','line_number':1573,'multiline':False]
['text':' Get the selection, using the event timestamp.','line_number':1577,'multiline':False]
['text':' Set the "owned" flag now, there may have been a call to','line_number':1582,'multiline':False]
['text':' lose_ownership_cb in between.','line_number':1583,'multiline':False]
['text':'(XtEventHandler)','line_number':1595,'multiline':True]
['text':' nothing received, clear register','line_number':1623,'multiline':False]
['text':' If the encoding of the text is different from 'encoding', attempt','line_number':1648,'multiline':False]
['text':' converting it.','line_number':1649,'multiline':False]
['text':' Need to use an int here.','line_number':1654,'multiline':False]
['text':' Only request utf-8 when 'encoding' is utf8 and','line_number':1729,'multiline':False]
['text':' Xutf8TextPropertyToTextList is available.','line_number':1730,'multiline':False]
['text':' Make sure the request for the selection goes out before waiting for','line_number':1736,'multiline':False]
['text':' a response.','line_number':1737,'multiline':False]
['text':'
	 * Wait for result of selection request, otherwise if we type more
	 * characters, then they will appear before the one that requested the
	 * paste!  Don't worry, we will catch up with any other events later.
	 ','line_number':1740,'multiline':True]
['text':' This is where clip_x11_request_selection_cb() should be','line_number':1752,'multiline':False]
['text':' called.  It may actually happen a bit later, so we loop','line_number':1753,'multiline':False]
['text':' until "success" changes.','line_number':1754,'multiline':False]
['text':' We may get a SelectionRequest here and if we don't handle','line_number':1755,'multiline':False]
['text':' it we hang.  KDE klipper does this, for example.','line_number':1756,'multiline':False]
['text':' We need to handle a PropertyNotify for large selections.','line_number':1757,'multiline':False]
['text':' Time out after 2 to 3 seconds to avoid that we hang when the','line_number':1762,'multiline':False]
['text':' other process doesn't respond.  Note that the SelectionNotify','line_number':1763,'multiline':False]
['text':' event may still come later when the selection owner comes back','line_number':1764,'multiline':False]
['text':' to life and the text gets inserted unexpectedly.  Don't know','line_number':1765,'multiline':False]
['text':' why that happens or how to avoid that :-(.','line_number':1766,'multiline':False]
['text':' Do we need this?  Probably not.','line_number':1773,'multiline':False]
['text':' Wait for 1 msec to avoid that we eat up all CPU time.','line_number':1776,'multiline':False]
['text':' don't do a retry with another type after timing out, otherwise we','line_number':1783,'multiline':False]
['text':' hang for 15 seconds.','line_number':1784,'multiline':False]
['text':' Final fallback position - use the X CUT_BUFFER0 store','line_number':1789,'multiline':False]
['text':' When using the GUI we have proper timestamps, use the one of the last','line_number':1803,'multiline':False]
['text':' event.  When in the console we don't get events (the terminal gets','line_number':1804,'multiline':False]
['text':' them), Get the time by a zero-length append, clip_x11_timestamp_cb will','line_number':1805,'multiline':False]
['text':' be called with the current timestamp.','line_number':1806,'multiline':False]
['text':' Flush is required in a terminal as nothing else is doing it.','line_number':1823,'multiline':False]
['text':'
 * Send the current selection to the clipboard.  Do nothing for X because we
 * will fill in the selection only when requested by another app.
 ','line_number':1828,'multiline':True]
['text':'
 * Get the contents of the X CUT_BUFFER0 and put it in "cbd".
 ','line_number':1841,'multiline':True]
['text':' CUT_BUFFER0 is supposed to be always latin1.  Convert to 'enc' when','line_number':1854,'multiline':False]
['text':' using a multi-byte encoding.  Conversion between two 8-bit','line_number':1855,'multiline':False]
['text':' character sets usually fails and the text might actually be in','line_number':1856,'multiline':False]
['text':' 'enc' anyway.','line_number':1857,'multiline':False]
['text':' use the text without conversion','line_number':1876,'multiline':False]
['text':'
 * SELECTION / PRIMARY ('*')
 *
 * Text selection stuff that uses the GUI selection register '*'.  When using a
 * GUI this may be text from another window, otherwise it is the last text we
 * had highlighted with VIsual mode.  With mouse support, clicking the middle
 * button performs the paste, otherwise you will need to do <"*p>. "
 * If not under X, it is synonymous with the clipboard register '+'.
 *
 * X CLIPBOARD ('+')
 *
 * Text selection stuff that uses the GUI clipboard register '+'.
 * Under X, this matches the standard cut/paste buffer CLIPBOARD selection.
 * It will be used for unnamed cut/pasting is 'clipboard' contains "unnamed",
 * otherwise you will need to do <"+p>. "
 * If not under X, it is synonymous with the selection register '*'.
 ','line_number':1889,'multiline':True]
['text':'
 * Routine to export any final X selection we had to the environment
 * so that the text is still available after Vim has exited. X selections
 * only exist while the owning application exists, so we write to the
 * permanent (while X runs) store CUT_BUFFER0.
 * Dump the CLIPBOARD selection if we own it (it's logically the more
 * 'permanent' of the two), otherwise the PRIMARY one.
 * For now, use a hard-coded sanity limit of 1Mb of data.
 ','line_number':1907,'multiline':True]
['text':' Get selection to export','line_number':1936,'multiline':False]
['text':' Check it's OK','line_number':1942,'multiline':False]
['text':' The CUT_BUFFER0 is supposed to always contain latin1.  Convert from','line_number':1948,'multiline':False]
['text':' 'enc' when it is a multi-byte encoding.  When 'enc' is an 8-bit','line_number':1949,'multiline':False]
['text':' encoding conversion usually doesn't work, so keep the text as-is.','line_number':1950,'multiline':False]
['text':' Do not store the string if conversion failed.  Better to use any','line_number':1981,'multiline':False]
['text':' other selection than garbled text.','line_number':1982,'multiline':False]
['text':'
 * Get the selected text and put it in register '*' or '+'.
 ','line_number':2008,'multiline':True]
['text':' Avoid triggering autocmds such as TextYankPost.','line_number':2032,'multiline':False]
['text':' Get the text between clip_star.start & clip_star.end','line_number':2035,'multiline':False]
['text':' restore things','line_number':2055,'multiline':False]
['text':' need to update w_virtcol et al','line_number':2059,'multiline':False]
['text':' Try to get selected text from another window','line_number':2073,'multiline':False]
['text':'
 * Convert from the GUI selection string into the '*'/'+' register.
 ','line_number':2078,'multiline':True]
['text':'
 * Convert the '*'/'+' register into a GUI selection string returned in *str
 * with length *len.
 * Returns the motion type, or -1 for failure.
 ','line_number':2100,'multiline':True]
['text':' Don't want newline character at end of last line if we're in MCHAR mode.','line_number':2133,'multiline':False]
['text':' add one to avoid zero','line_number':2137,'multiline':False]
['text':'
 * When "regname" is a clipboard register, obtain the selection.  If it's not
 * available return zero, otherwise return "regname".
 ','line_number':2160,'multiline':True]
['text':'
 * If we have written to a clipboard register, send the text to the clipboard.
 ','line_number':2184,'multiline':True]
['text':'
 * Adjust the register name pointed to with "rp" for the clipboard being
 * used always and the clipboard being available.
 ','line_number':2204,'multiline':True]
['text':' If no reg. specified, and "unnamed" or "unnamedplus" is in 'clipboard',','line_number':2211,'multiline':False]
['text':' use '*' or '+' reg, respectively. "unnamedplus" prevails.','line_number':2212,'multiline':False]
['text':' FEAT_CLIPBOARD','line_number':2228,'multiline':False]
