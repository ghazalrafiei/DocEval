['text':' vi:set ts=8 sts=4 sw=4 noet:
 *
 * VIM - Vi IMproved	by Bram Moolenaar
 *
 * Do ":help uganda"  in Vim to read copying and usage conditions.
 * Do ":help credits" in Vim to see a list of people who contributed.
 * See README.txt for an overview of the Vim source code.
 ','line_number':1,'multiline':True]
['text':'
 * os_mswin.c
 *
 * Routines for Win32.
 ','line_number':10,'multiline':True]
['text':' PROTO','line_number':45,'multiline':False]
['text':'
 * EventFlags
 ','line_number':64,'multiline':True]
['text':'
 * When generating prototypes for Win32 on Unix, these lines make the syntax
 * errors disappear.  They do not need to be correct.
 ','line_number':75,'multiline':True]
['text':' Record all output and all keyboard & mouse input','line_number':126,'multiline':False]
['text':' #define MCH_WRITE_DUMP','line_number':127,'multiline':False]
['text':' console window handle, set by GetConsoleHwnd()','line_number':140,'multiline':False]
['text':' WinSock is initialized','line_number':144,'multiline':False]
['text':' Don't generate prototypes here, because some systems do have these','line_number':147,'multiline':False]
['text':' functions.','line_number':148,'multiline':False]
['text':' the ANSI-ish correct way is to use strxfrm():','line_number':153,'multiline':False]
['text':' file names, so this is enough on Win32','line_number':154,'multiline':False]
['text':'
 * Save the instance handle of the exe/dll.
 ','line_number':180,'multiline':True]
['text':'
 * GUI version of mch_exit().
 * Shut down and exit with status `r'
 * Careful: mch_exit() may be called before mch_init()!
 ','line_number':191,'multiline':True]
['text':' remove all memfiles','line_number':203,'multiline':False]
['text':' FEAT_GUI_MSWIN','line_number':229,'multiline':False]
['text':'
 * Init the tables for toupper() and tolower().
 ','line_number':232,'multiline':True]
['text':' Init the tables for toupper() and tolower()','line_number':242,'multiline':False]
['text':'
 * Return TRUE if the input comes from a terminal, FALSE otherwise.
 ','line_number':250,'multiline':True]
['text':' GUI always has a tty','line_number':260,'multiline':False]
['text':'
 * mch_settitle(): set titlebar of our window
 ','line_number':269,'multiline':True]
['text':'
 * Restore the window/icon title.
 * which is one of:
 *  SAVE_RESTORE_TITLE: Just restore title
 *  SAVE_RESTORE_ICON:  Just restore icon (which we don't have)
 *  SAVE_RESTORE_BOTH:  Restore title and icon (which we don't have)
 ','line_number':302,'multiline':True]
['text':'
 * Return TRUE if we can restore the title (we can)
 ','line_number':321,'multiline':True]
['text':'
 * Return TRUE if we can restore the icon title (we can't)
 ','line_number':331,'multiline':True]
['text':'
 * Get absolute file name into buffer "buf" of length "len" bytes,
 * turning all '/'s into '\\'s and getting the correct case of each component
 * of the file name.  Append a (back)slash to a directory name.
 * When 'shellslash' set do it the other way around.
 * Return OK or FAIL.
 ','line_number':341,'multiline':True]
['text':'
 * Return TRUE if "fname" does not depend on the current directory.
 ','line_number':383,'multiline':True]
['text':' A name like "d:/foo" and "//server/share" is absolute.  "d:foo" is not.','line_number':389,'multiline':False]
['text':' Another way to check is to use mch_FullName() and see if the result is','line_number':390,'multiline':False]
['text':' the same as the name or mch_FullName() fails.  However, this has quite a','line_number':391,'multiline':False]
['text':' bit of overhead, so let's not do that.','line_number':392,'multiline':False]
['text':'
 * Replace all slashes by backslashes.
 * This used to be the other way around, but MS-DOS sometimes has problems
 * with slashes (e.g. in a command name).  We can't have mixed slashes and
 * backslashes, because comparing file names will not work correctly.  The
 * commands that use a file name should try to avoid the need to type a
 * backslash twice.
 * When 'shellslash' set do it the other way around.
 * When the path looks like a URL leave it unmodified.
 ','line_number':400,'multiline':True]
['text':' don't replace backslash in backtick quoted strings','line_number':420,'multiline':False]
['text':' Use 64-bit stat functions.','line_number':433,'multiline':False]
['text':' Work around for VC12 or earlier (and MinGW). _wstat() can't handle','line_number':468,'multiline':False]
['text':' symlinks properly.','line_number':469,'multiline':False]
['text':' VC9 or earlier: _wstat() doesn't support a symlink at all. It retrieves','line_number':470,'multiline':False]
['text':' status of a symlink itself.','line_number':471,'multiline':False]
['text':' VC10: _wstat() supports a symlink to a normal file, but it doesn't','line_number':472,'multiline':False]
['text':' support a symlink to a directory (always returns an error).','line_number':473,'multiline':False]
['text':' VC11 and VC12: _wstat() doesn't return an error for a symlink to a','line_number':474,'multiline':False]
['text':' directory, but it doesn't set S_IFDIR flag.','line_number':475,'multiline':False]
['text':' MinGW: Same as VC9.','line_number':476,'multiline':False]
['text':' The buffer size is arbitrarily chosen to be "big enough" (TM), the','line_number':522,'multiline':False]
['text':' ceiling should be around 16k.','line_number':523,'multiline':False]
['text':' The applinks are similar to symlinks but with a huge difference: they can','line_number':540,'multiline':False]
['text':' only be executed, any other I/O operation on them is bound to fail with','line_number':541,'multiline':False]
['text':' ERROR_FILE_NOT_FOUND even though the file exists.','line_number':542,'multiline':False]
['text':' The (undocumented) reparse buffer contains a set of N null-terminated','line_number':553,'multiline':False]
['text':' Unicode strings, the application path is stored in the third one.','line_number':554,'multiline':False]
['text':'
 * stat() can't handle a trailing '/' or '\', remove it first.
 ','line_number':571,'multiline':True]
['text':' WinNT and later can use _MAX_PATH wide characters for a pathname, which','line_number':577,'multiline':False]
['text':' means that the maximum pathname is _MAX_PATH * 3 bytes when 'enc' is','line_number':578,'multiline':False]
['text':' UTF-8.','line_number':579,'multiline':False]
['text':' Remove trailing '\\' except root path.','line_number':590,'multiline':False]
['text':' UNC root path must be followed by '\\'.','line_number':596,'multiline':False]
['text':' nothing to do','line_number':619,'multiline':False]
['text':' never used','line_number':625,'multiline':False]
['text':' never used','line_number':632,'multiline':False]
['text':'
 * Rows and/or Columns has changed.
 ','line_number':635,'multiline':True]
['text':' never used','line_number':641,'multiline':False]
['text':'
 * We have no job control, so fake it by starting a new shell.
 ','line_number':646,'multiline':True]
['text':'
 * Display the saved error message(s).
 ','line_number':661,'multiline':True]
['text':' avoid putting up a message box with blanks only','line_number':676,'multiline':False]
['text':' Only use a dialog when not using --gui-dialog-file:','line_number':680,'multiline':False]
['text':' write text to a file.','line_number':681,'multiline':False]
['text':'
 * Return TRUE if "p" contain a wildcard that can be expanded by
 * dos_expandpath().
 ','line_number':704,'multiline':True]
['text':'
 * Return TRUE if "p" contain a wildcard or a "~1" kind of thing (could be a
 * shortened file name).
 ','line_number':720,'multiline':True]
['text':'
 * The normal _chdir() does not change the default drive.  This one does.
 * Returning 0 implies success; -1 implies failure.
 ','line_number':743,'multiline':True]
['text':' just checking...','line_number':753,'multiline':False]
['text':' has a drive name','line_number':762,'multiline':False]
['text':' If we can change to the drive, skip that part of the path.  If we','line_number':764,'multiline':False]
['text':' can't then the current directory may be invalid, try using chdir()','line_number':765,'multiline':False]
['text':' with the whole path.','line_number':766,'multiline':False]
['text':' drive name only','line_number':771,'multiline':False]
['text':'
 * return non-zero if a character is available
 ','line_number':785,'multiline':True]
['text':' never used','line_number':791,'multiline':False]
['text':'
 * Check for any pending input or messages.
 ','line_number':796,'multiline':True]
['text':' TODO: check for messages','line_number':802,'multiline':False]
['text':'
 * Call a DLL routine which takes either a string or int param
 * and returns an allocated string.
 * Return OK if it worked, FAIL if not.
 ','line_number':810,'multiline':True]
['text':'
 * Check if a pointer points to a valid NUL terminated string.
 * Return the length of the string, including terminating NUL.
 * Returns 0 for an invalid pointer, 1 for an empty string.
 ','line_number':820,'multiline':True]
['text':' get page size','line_number':834,'multiline':False]
['text':' get memory information','line_number':837,'multiline':False]
['text':' pre cast these (typing savers)','line_number':841,'multiline':False]
['text':' get start address of page that str is on','line_number':845,'multiline':False]
['text':' get length from str to end of page','line_number':848,'multiline':False]
['text':'
 * Passed to do_in_runtimepath() to load a vim.ico file.
 ','line_number':860,'multiline':True]
['text':'
 * Try loading an icon file from 'runtimepath'.
 ','line_number':876,'multiline':True]
['text':' NULL when using a argint','line_number':890,'multiline':False]
['text':' NULL when using number_result','line_number':892,'multiline':False]
['text':' Get a handle to the DLL module.','line_number':904,'multiline':False]
['text':' If the handle is valid, try to get the function address.','line_number':907,'multiline':False]
['text':' Call with string argument','line_number':916,'multiline':False]
['text':' Call with number argument','line_number':928,'multiline':False]
['text':' Save the string before we free the library.','line_number':939,'multiline':False]
['text':' Assume that a "1" result is an illegal pointer.','line_number':940,'multiline':False]
['text':' Free the DLL module.','line_number':961,'multiline':False]
['text':'
 * Debugging helper: expose the MCH_WRITE_DUMP stuff to other modules
 ','line_number':975,'multiline':True]
['text':'_DEBUG','line_number':1009,'multiline':False]
['text':' This is in os_win32.c.','line_number':1012,'multiline':False]
['text':'
 * Showing the printer dialog is tricky since we have no GUI
 * window to parent it. The following routines are needed to
 * get the window parenting and Z-order to work properly.
 ','line_number':1014,'multiline':True]
['text':' Skip if it's already set.','line_number':1022,'multiline':False]
['text':' Window handle may have been found by init code (Windows NT only)','line_number':1026,'multiline':False]
['text':'
 * Console implementation of ":winpos".
 ','line_number':1036,'multiline':True]
['text':'
 * Console implementation of ":winpos x y".
 ','line_number':1051,'multiline':True]
['text':'=================================================================','line_number':1065,'multiline':False]
['text':' Win32 printer stuff','line_number':1066,'multiline':False]
['text':' Defines which are also in vim.rc.','line_number':1082,'multiline':False]
['text':'
 * Convert BGR to RGB for Windows GDI calls
 ','line_number':1103,'multiline':True]
['text':' Translate the dialog texts','line_number':1144,'multiline':False]
['text':' handle to dialog box','line_number':1206,'multiline':False]
['text':' message identifier','line_number':1207,'multiline':False]
['text':' message parameter','line_number':1208,'multiline':False]
['text':' message parameter','line_number':1209,'multiline':False]
['text':' Get the owner window and dialog box rectangles.','line_number':1219,'multiline':False]
['text':' Offset the owner and dialog box rectangles so that','line_number':1227,'multiline':False]
['text':' right and bottom values represent the width and','line_number':1228,'multiline':False]
['text':' height, and then offset the owner again to discard','line_number':1229,'multiline':False]
['text':' space taken up by the dialog box.','line_number':1230,'multiline':False]
['text':' The new position is the sum of half the remaining','line_number':1236,'multiline':False]
['text':' space and the owner's original position.','line_number':1237,'multiline':False]
['text':' ignores size arguments','line_number':1243,'multiline':False]
['text':'  tackle the printdlg copiesctrl problem','line_number':1246,'multiline':False]
['text':'  Bring the window to top','line_number':1250,'multiline':False]
['text':' adjust top margin if there is a header','line_number':1367,'multiline':False]
['text':' get value of s_hwnd','line_number':1401,'multiline':False]
['text':' work around bug in print dialog','line_number':1409,'multiline':False]
['text':'
	     * Use hook to prevent console window being sent to back
	     ','line_number':1415,'multiline':True]
['text':'
     * If bang present, return default printer setup with no dialog
     * never show dialog if we are running over telnet
     ','line_number':1425,'multiline':True]
['text':'
	 * MSDN suggests setting the first parameter to WINSPOOL for
	 * NT, but NULL appears to work just as well.
	 ','line_number':1440,'multiline':True]
['text':'
	 * keep the previous driver context
	 ','line_number':1457,'multiline':True]
['text':' Not all printer drivers report the support of color (or grey) in the','line_number':1473,'multiline':False]
['text':' same way.  Let's set has_color if there appears to be some way to print','line_number':1474,'multiline':False]
['text':' more than B&W.','line_number':1475,'multiline':False]
['text':' Ensure all font styles are baseline aligned','line_number':1481,'multiline':False]
['text':'
     * On some windows systems the nCopies parameter is not
     * passed back correctly. It must be retrieved from the
     * hDevMode struct.
     ','line_number':1484,'multiline':True]
['text':'
     * Initialise the font according to 'printfont'
     ','line_number':1521,'multiline':True]
['text':'
     * Fill in the settings struct
     ','line_number':1546,'multiline':True]
['text':' I suspect FormatMessage() doesn't work for values returned by','line_number':1580,'multiline':False]
['text':' CommDlgExtendedError().  What does?','line_number':1581,'multiline':False]
['text':' Maybe canceled','line_number':1591,'multiline':False]
['text':' Give focus back to main window (when using MDI).','line_number':1624,'multiline':False]
['text':' This is wrong when printing spaces for a TAB.','line_number':1693,'multiline':False]
['text':'
     * With a white background we can draw characters transparent, which is
     * good for italic characters that overlap to the next char cell.
     ','line_number':1719,'multiline':True]
['text':' FEAT_PRINTER && !FEAT_POSTSCRIPT','line_number':1736,'multiline':False]
['text':'
 * Return the resolved file path, NULL if "fname" is an AppExecLink reparse
 * point, already fully resolved, or it doesn't exists.
 ','line_number':1778,'multiline':True]
['text':'
 * When "fname" is the name of a shortcut (*.lnk) resolve the file it points
 * to and return that name in allocated memory.
 * Otherwise NULL is returned.
 ','line_number':1838,'multiline':True]
['text':' we get those free of charge','line_number':1853,'multiline':False]
['text':' Check if the file name ends in ".lnk". Avoid calling','line_number':1855,'multiline':False]
['text':' CoCreateInstance(), it's quite slow.','line_number':1856,'multiline':False]
['text':' create a link manager object and request its interface','line_number':1865,'multiline':False]
['text':' Get a pointer to the IPersistFile interface.','line_number':1875,'multiline':False]
['text':' "load" the name and resolve the link','line_number':1881,'multiline':False]
['text':' This makes Vim wait a long time if the target does not exist.','line_number':1885,'multiline':False]
['text':' Get the path to the link target.','line_number':1891,'multiline':False]
['text':' Release all interface pointers (both belong to the same object)','line_number':1902,'multiline':False]
['text':'
 * Bring ourselves to the foreground.  Does work if the OS doesn't allow it.
 ','line_number':1926,'multiline':True]
['text':' get value of s_hwnd','line_number':1932,'multiline':False]
['text':'
 * Client-server code for Vim
 *
 * Originally written by Paul Moore
 ','line_number':1939,'multiline':True]
['text':' In order to handle inter-process messages, we need to have a window. But','line_number':1945,'multiline':False]
['text':' the functions in this module can be called before the main GUI window is','line_number':1946,'multiline':False]
['text':' created (and may also be called in the console version, where there is no','line_number':1947,'multiline':False]
['text':' GUI window at all).','line_number':1948,'multiline':False]
['text':'','line_number':1949,'multiline':False]
['text':' So we create a hidden window, and arrange to destroy it on exit.','line_number':1950,'multiline':False]
['text':' window that's handling messages','line_number':1951,'multiline':False]
['text':' Timeout for sending a message to another Vim instance.  Normally this works','line_number':1956,'multiline':False]
['text':' instantly, but it may hang when the other Vim instance is halted.','line_number':1957,'multiline':False]
['text':' Communication is via WM_COPYDATA messages. The message type is sent in','line_number':1960,'multiline':False]
['text':' the dwData parameter. Types are defined here.','line_number':1961,'multiline':False]
['text':' This is a structure containing a server HWND and its name.','line_number':1969,'multiline':False]
['text':' Last received 'encoding' that the client uses.','line_number':1976,'multiline':False]
['text':'
 * Tell the other side what encoding we are using.
 * Return -1 if timeout happens.  Other errors are ignored.
 ','line_number':1979,'multiline':True]
['text':'
 * Clean up on exit. This destroys the hidden message window.
 ','line_number':1998,'multiline':True]
['text':'
 * The window procedure for the hidden message window.
 * It handles callback messages and notifications from servers.
 * In order to process these messages, it is necessary to run a
 * message loop. Code which may run before the main message loop
 * is started (in the GUI) is careful to pump messages when it needs
 * to. Features which require message delivery during normal use will
 * not work in the console version - this basically means those
 * features which allow Vim to act as a server, rather than a client.
 ','line_number':2013,'multiline':True]
['text':' This is a message from another Vim. The dwData member of the','line_number':2028,'multiline':False]
['text':' COPYDATASTRUCT determines the type of message:','line_number':2029,'multiline':False]
['text':'   COPYDATA_ENCODING:','line_number':2030,'multiline':False]
['text':'	The encoding that the client uses. Following messages will','line_number':2031,'multiline':False]
['text':'	use this encoding, convert if needed.','line_number':2032,'multiline':False]
['text':'   COPYDATA_KEYS:','line_number':2033,'multiline':False]
['text':'	A key sequence. We are a server, and a client wants these keys','line_number':2034,'multiline':False]
['text':'	adding to the input queue.','line_number':2035,'multiline':False]
['text':'   COPYDATA_REPLY:','line_number':2036,'multiline':False]
['text':'	A reply. We are a client, and a server has sent this message','line_number':2037,'multiline':False]
['text':'	in response to a request.  (server2client())','line_number':2038,'multiline':False]
['text':'   COPYDATA_EXPR:','line_number':2039,'multiline':False]
['text':'	An expression. We are a server, and a client wants us to','line_number':2040,'multiline':False]
['text':'	evaluate this expression.','line_number':2041,'multiline':False]
['text':'   COPYDATA_RESULT:','line_number':2042,'multiline':False]
['text':'	A reply. We are a client, and a server has sent this message','line_number':2043,'multiline':False]
['text':'	in response to a COPYDATA_EXPR.','line_number':2044,'multiline':False]
['text':'   COPYDATA_ERROR_RESULT:','line_number':2045,'multiline':False]
['text':'	A reply. We are a client, and a server has sent this message','line_number':2046,'multiline':False]
['text':'	in response to a COPYDATA_EXPR that failed to evaluate.','line_number':2047,'multiline':False]
['text':' Remember the encoding that the client uses.','line_number':2060,'multiline':False]
['text':' Remember who sent this, for <client>','line_number':2066,'multiline':False]
['text':' Add the received keys to the input buffer.  The loop waiting','line_number':2069,'multiline':False]
['text':' for the user to do something should check the input buffer.','line_number':2070,'multiline':False]
['text':' Wake up the main GUI loop.','line_number':2076,'multiline':False]
['text':' Remember who sent this, for <client>','line_number':2086,'multiline':False]
['text':' When the message window is activated (brought to the foreground),','line_number':2153,'multiline':False]
['text':' this actually applies to the text window.','line_number':2154,'multiline':False]
['text':' get value of s_hwnd','line_number':2159,'multiline':False]
['text':'
 * Initialise the message handling process.  This involves creating a window
 * to handle messages - the window will not be visible.
 ','line_number':2171,'multiline':True]
['text':' Clean up on exit','line_number':2180,'multiline':False]
['text':' Register a window class - we only really care','line_number':2183,'multiline':False]
['text':' about the window procedure','line_number':2184,'multiline':False]
['text':' Create the message window. It will be hidden, so the details don't','line_number':2197,'multiline':False]
['text':' matter.  Don't use WS_OVERLAPPEDWINDOW, it will make a shortcut remove','line_number':2198,'multiline':False]
['text':' focus from gvim.','line_number':2199,'multiline':False]
['text':' Used by serverSendToVim() to find an alternate server name.','line_number':2207,'multiline':False]
['text':'
 * Get the title of the window "hwnd", which is the Vim server name, in
 * "name[namelen]" and return the length.
 * Returns zero if window "hwnd" is not a Vim server.
 ','line_number':2210,'multiline':True]
['text':' Ignore windows which aren't Vim message windows','line_number':2221,'multiline':False]
['text':' Get the title of the window','line_number':2226,'multiline':False]
['text':' Get the title of the window','line_number':2236,'multiline':False]
['text':' If this is the server we're looking for, return its HWND','line_number':2240,'multiline':False]
['text':' If we are looking for an alternate server, remember this name.','line_number':2247,'multiline':False]
['text':' don't use another name','line_number':2253,'multiline':False]
['text':' Otherwise, keep looking','line_number':2256,'multiline':False]
['text':' Get the title of the window','line_number':2266,'multiline':False]
['text':' Add the name to the list','line_number':2270,'multiline':False]
['text':'
 * Enumerate all windows including children.
 ','line_number':2300,'multiline':True]
['text':' Leave enough space for a 9-digit suffix to ensure uniqueness!','line_number':2334,'multiline':False]
['text':' This is inefficient - we're doing an EnumWindows loop for each','line_number':2342,'multiline':False]
['text':' possible name. It would be better to grab all names in one go,','line_number':2343,'multiline':False]
['text':' and scan the list each time...','line_number':2344,'multiline':False]
['text':' Remember the name','line_number':2360,'multiline':False]
['text':' update Vim window title later','line_number':2362,'multiline':False]
['text':' Update the message window title','line_number':2364,'multiline':False]
['text':' Set the servername variable','line_number':2368,'multiline':False]
['text':' Where to send.','line_number':2389,'multiline':False]
['text':' What to send.','line_number':2390,'multiline':False]
['text':' The "name" argument is a magic cookie obtained from expand("<client>").','line_number':2397,'multiline':False]
['text':' It should be of the form 0xXXXXX - i.e. a C hex literal, which is the','line_number':2398,'multiline':False]
['text':' value of the client's message window HWND.','line_number':2399,'multiline':False]
['text':' Where to send.','line_number':2423,'multiline':False]
['text':' What to send.','line_number':2424,'multiline':False]
['text':' Result of eval'ed expression','line_number':2425,'multiline':False]
['text':' HWND of server','line_number':2426,'multiline':False]
['text':' Expression or keys?','line_number':2427,'multiline':False]
['text':' timeout in seconds or zero','line_number':2428,'multiline':False]
['text':' don't complain about no server','line_number':2429,'multiline':False]
['text':' Execute locally if no display or target is ourselves','line_number':2438,'multiline':False]
['text':' If the server name does not end in a digit then we look for an','line_number':2442,'multiline':False]
['text':' alternate name.  e.g. when "name" is GVIM then we may find GVIM2.','line_number':2443,'multiline':False]
['text':' Use another server name we found.','line_number':2450,'multiline':False]
['text':' Caller assumes responsibility for freeing','line_number':2482,'multiline':False]
['text':'
 * Bring the server to the foreground.
 ','line_number':2487,'multiline':True]
['text':' Replies from server need to be stored until the client picks them up via','line_number':2499,'multiline':False]
['text':' remote_read(). So we maintain a list of server-id/reply pairs.','line_number':2500,'multiline':False]
['text':' Note that there could be multiple replies from one server pending if the','line_number':2501,'multiline':False]
['text':' client is slow picking them up.','line_number':2502,'multiline':False]
['text':' We just store the replies in a simple list. When we remove an entry, we','line_number':2503,'multiline':False]
['text':' move list entries down to fill the gap.','line_number':2504,'multiline':False]
['text':' The server ID is simply the HWND.','line_number':2505,'multiline':False]
['text':' server window','line_number':2508,'multiline':False]
['text':' reply string','line_number':2509,'multiline':False]
['text':' 0 for REPLY, 1 for RESULT 2 for error','line_number':2510,'multiline':False]
['text':' Flag which is used to wait for a reply','line_number':2518,'multiline':False]
['text':'
 * Store a reply.  "reply" must be allocated memory (or NULL).
 ','line_number':2521,'multiline':True]
['text':'
 * Get a reply from server "server".
 * When "expr_res" is non NULL, get the result of an expression, otherwise a
 * server2client() message.
 * When non NULL, point to return code. 0 => OK, -1 => ERROR
 * If "remove" is TRUE, consume the message, the caller must free it then.
 * if "wait" is TRUE block until a message arrives (or the server exits).
 ','line_number':2544,'multiline':True]
['text':' When waiting, loop until the message waiting for is received.','line_number':2562,'multiline':False]
['text':' Reset this here, in case a message arrives while we are going','line_number':2566,'multiline':False]
['text':' through the already received messages.','line_number':2567,'multiline':False]
['text':' Save the values we've found for later','line_number':2576,'multiline':False]
['text':' Move the rest of the list down to fill the gap','line_number':2583,'multiline':False]
['text':' Return the reply to the caller, who takes on responsibility','line_number':2589,'multiline':False]
['text':' for freeing it if "remove" is TRUE.','line_number':2590,'multiline':False]
['text':' If we got here, we didn't find a reply. Return immediately if the','line_number':2595,'multiline':False]
['text':' "wait" parameter isn't set.','line_number':2596,'multiline':False]
['text':' Process pending messages once. Without this, looping on','line_number':2599,'multiline':False]
['text':' remote_peek() would never get the reply.','line_number':2600,'multiline':False]
['text':' We need to wait for a reply. Enter a message loop until the','line_number':2610,'multiline':False]
['text':' "reply_received" flag gets set.','line_number':2611,'multiline':False]
['text':' Loop until we receive a reply','line_number':2613,'multiline':False]
['text':' TODO: use the return value to decide how long to wait.','line_number':2617,'multiline':False]
['text':' Wait for a SendMessage() call to us.  This could be the reply','line_number':2624,'multiline':False]
['text':' we are waiting for.  Use a timeout of a second, to catch the','line_number':2625,'multiline':False]
['text':' situation that the server died unexpectedly.','line_number':2626,'multiline':False]
['text':' If the server has died, give up','line_number':2629,'multiline':False]
['text':'
 * Process any messages in the Windows message queue.
 ','line_number':2640,'multiline':True]
['text':' FEAT_CLIENTSERVER','line_number':2655,'multiline':False]
['text':'
 * Convert a charset ID to a name.
 * Return NULL when not recognized.
 ','line_number':2720,'multiline':True]
['text':'
 * Convert a quality ID to a name.
 * Return NULL when not recognized.
 ','line_number':2735,'multiline':True]
['text':' see _ReadVimIni','line_number':2755,'multiline':False]
['text':' Initialise the "current height" to -12 (same as s_lfDefault) just','line_number':2758,'multiline':False]
['text':' in case the user specifies a font in "guifont" with no size before a font','line_number':2759,'multiline':False]
['text':' with an explicit size has been set. This defaults the size to this value','line_number':2760,'multiline':False]
['text':' (-12 equates to roughly 9pt).','line_number':2761,'multiline':False]
['text':' also used in gui_w32.c','line_number':2762,'multiline':False]
['text':'
 * Convert a string representing a point size into pixels. The string should
 * be a positive decimal number, with an optional decimal point (eg, "12", or
 * "10.5"). The pixel value is returned, and a pointer to the next unconverted
 * character is stored in *end. The flag "vertical" says whether this
 * calculation is for a vertical (height) size or a horizontal (width) one.
 ','line_number':2764,'multiline':True]
['text':' Start keeping a divisor, for later','line_number':2785,'multiline':False]
['text':'
 * Convert pixel into point size. This is a reverse of points_to_pixels.
 ','line_number':2822,'multiline':True]
['text':' Return value:','line_number':2855,'multiline':False]
['text':'	  0 = terminate now (monospace & ANSI)','line_number':2856,'multiline':False]
['text':'	  1 = continue, still no luck...','line_number':2857,'multiline':False]
['text':'	  2 = continue, but we have an acceptable LOGFONTW','line_number':2858,'multiline':False]
['text':'	      (monospace, not ANSI)','line_number':2859,'multiline':False]
['text':' We use these values, as EnumFontFamilies returns 1 if the','line_number':2860,'multiline':False]
['text':' callback function is never called. So, we check the return as','line_number':2861,'multiline':False]
['text':' 0 = perfect, 2 = OK, 1 = no good...','line_number':2862,'multiline':False]
['text':' It's not pretty, but it works!','line_number':2863,'multiline':False]
['text':' Ignore non-monospace fonts without further ado','line_number':2868,'multiline':False]
['text':' Remember this LOGFONTW as a "possible"','line_number':2873,'multiline':False]
['text':' Terminate the scan as soon as we find an ANSI font','line_number':2876,'multiline':False]
['text':' Continue the scan - we have a non-ANSI font','line_number':2882,'multiline':False]
['text':' If we couldn't find a usable font, return failure','line_number':2900,'multiline':False]
['text':' Tidy up the rest of the LOGFONTW structure. We set to a basic','line_number':2904,'multiline':False]
['text':' font - get_logfont() sets bold, italic, etc based on the user's','line_number':2905,'multiline':False]
['text':' input.','line_number':2906,'multiline':False]
['text':' Return success','line_number':2914,'multiline':False]
['text':'
 * Call back for EnumFontFamiliesW in expand_font_enumproc.
 *
 ','line_number':2918,'multiline':True]
['text':' Ignore non-monospace fonts without further ado','line_number':2932,'multiline':False]
['text':' Filter only on ANSI. Otherwise will see a lot of random fonts that we','line_number':2937,'multiline':False]
['text':' usually don't want.','line_number':2938,'multiline':False]
['text':'
 * Cmdline expansion for setting 'guifont'. Will enumerate through all
 * monospace fonts for completion. If used after ':', will expand to possible
 * font configuration options like font sizes.
 *
 * This function has "gui" in its name because in some platforms (GTK) font
 * handling is done by the GUI code, whereas in Windows it's part of the
 * platform code.
 ','line_number':2955,'multiline':True]
['text':' Always fill in with the current font size as first option for','line_number':2972,'multiline':False]
['text':' convenience. We simply round to the closest integer for simplicity.','line_number':2973,'multiline':False]
['text':' Note: Keep this in sync with get_logfont(). Don't include 'c' and','line_number':2979,'multiline':False]
['text':' 'q' as we fill in all the values below.','line_number':2980,'multiline':False]
['text':'
 * Compare a UTF-16 string and an ASCII string literally.
 * Only works all the code points are inside ASCII range.
 ','line_number':3012,'multiline':True]
['text':'
 * Get font info from "name" into logfont "lf".
 * Return OK for a valid name, FAIL otherwise.
 ','line_number':3029,'multiline':True]
['text':' if name is "*", bring up std font dialog:','line_number':3058,'multiline':False]
['text':'REGULAR_FONTTYPE;','line_number':3066,'multiline':False]
['text':'
     * Split name up, it could be <name>:h<height>:w<width> etc.
     ','line_number':3073,'multiline':True]
['text':' Name too long','line_number':3079,'multiline':False]
['text':' First set defaults','line_number':3085,'multiline':False]
['text':'
     * If the font can't be found, try replacing '_' by ' '.
     ','line_number':3093,'multiline':True]
['text':' Set the values found after ':'','line_number':3113,'multiline':False]
['text':' Note: Keep this in sync with gui_mch_expand_font().','line_number':3118,'multiline':False]
['text':' ron: init lastlf','line_number':3194,'multiline':False]
['text':' defined(FEAT_GUI) || defined(FEAT_PRINTER)','line_number':3207,'multiline':False]
['text':'
 * Initialize the Winsock dll.
 ','line_number':3210,'multiline':True]
