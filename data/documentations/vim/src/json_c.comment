['text':' vi:set ts=8 sts=4 sw=4 noet:
 *
 * VIM - Vi IMproved	by Bram Moolenaar
 *
 * Do ":help uganda"  in Vim to read copying and usage conditions.
 * Do ":help credits" in Vim to see a list of people who contributed.
 * See README.txt for an overview of the Vim source code.
 ','line_number':1,'multiline':True]
['text':'
 * json.c: Encoding and decoding JSON.
 *
 * Follows this standard: https://tools.ietf.org/html/rfc7159.html
 ','line_number':10,'multiline':True]
['text':'
 * Encode "val" into a JSON format string.
 * The result is added to "gap"
 * Returns FAIL on failure and makes gap->ga_data empty.
 ','line_number':23,'multiline':True]
['text':'
 * Encode "val" into a JSON format string.
 * The result is in allocated memory.
 * The result is empty when encoding fails.
 * "options" can contain JSON_JS, JSON_NO_NONE and JSON_NL.
 ','line_number':40,'multiline':True]
['text':' Store bytes in the growarray.','line_number':51,'multiline':False]
['text':'
 * Encode ["nr", "val"] into a JSON format string in allocated memory.
 * "options" can contain JSON_JS, JSON_NO_NONE and JSON_NL.
 * Returns NULL when out of memory.
 ','line_number':59,'multiline':True]
['text':'
 * Encode "val" into a JSON format string prefixed by the LSP HTTP header.
 * Returns NULL when out of memory.
 ','line_number':90,'multiline':True]
['text':' Header according to LSP specification.','line_number':106,'multiline':False]
['text':'
 * Lookup table to quickly know if the given ASCII character must be escaped.
 ','line_number':117,'multiline':True]
['text':' 0x0.','line_number':121,'multiline':False]
['text':' 0x1.','line_number':122,'multiline':False]
['text':' 0x2.','line_number':123,'multiline':False]
['text':' 0x3.','line_number':124,'multiline':False]
['text':' 0x4.','line_number':125,'multiline':False]
['text':' 0x5.','line_number':126,'multiline':False]
['text':' 0x6.','line_number':127,'multiline':False]
['text':' 0x7.','line_number':128,'multiline':False]
['text':'
 * Encode the utf-8 encoded string "str" into "gap".
 ','line_number':131,'multiline':True]
['text':' Convert the text from 'encoding' to utf-8, because a JSON string is','line_number':155,'multiline':False]
['text':' always utf-8.','line_number':156,'multiline':False]
['text':' `from` is the beginning of a sequence of bytes we can directly copy from','line_number':165,'multiline':False]
['text':' the input string, avoiding the overhead associated to decoding/encoding','line_number':166,'multiline':False]
['text':' them.','line_number':167,'multiline':False]
['text':' always use utf-8 encoding, ignore 'encoding'','line_number':171,'multiline':False]
['text':' "','line_number':196,'multiline':False]
['text':' backslash','line_number':197,'multiline':False]
['text':' Invalid utf-8 sequence, replace it with the Unicode replacement','line_number':219,'multiline':False]
['text':' character U+FFFD.','line_number':220,'multiline':False]
['text':'
 * Return TRUE if "key" can be used without quotes.
 * That is when it starts with a letter and only contains letters, digits and
 * underscore.
 ','line_number':241,'multiline':True]
['text':'
 * Encode "val" into "gap".
 * Return FAIL or OK.
 ','line_number':259,'multiline':True]
['text':' empty item','line_number':288,'multiline':False]
['text':' FALLTHROUGH','line_number':290,'multiline':False]
['text':' add an extra comma if the last item is v:none','line_number':360,'multiline':False]
['text':'
 * When "reader" has less than NUMBUFLEN bytes available, call the fill
 * callback to get more.
 ','line_number':442,'multiline':True]
['text':'
 * Skip white space in "reader".  All characters <= space are considered white
 * space.
 * Also tops up readahead when needed.
 ','line_number':457,'multiline':True]
['text':' skip over " or '','line_number':497,'multiline':False]
['text':' The JSON is always expected to be utf-8, thus use utf functions','line_number':500,'multiline':False]
['text':' here. The string is converted below if needed.','line_number':501,'multiline':False]
['text':' Not enough bytes to make a character or end of the string. Get','line_number':504,'multiline':False]
['text':' more if possible.','line_number':505,'multiline':False]
['text':' didn't get more','line_number':511,'multiline':False]
['text':' decode surrogate pair: \ud812\u3456','line_number':558,'multiline':False]
['text':' not a special char, skip over backslash','line_number':584,'multiline':False]
['text':' Convert the utf-8 string to 'encoding'.','line_number':625,'multiline':False]
['text':' parsing items in an array','line_number':652,'multiline':False]
['text':' parsing key of an object','line_number':653,'multiline':False]
['text':' parsing item in an object, after the key','line_number':654,'multiline':False]
['text':' the list or dict','line_number':659,'multiline':False]
['text':'
 * Decode one item and put it in "res".  If "res" is NULL only advance.
 * Must already have skipped white space.
 *
 * Return FAIL for a decoding error (and give an error).
 * Return MAYBE for an incomplete message.
 ','line_number':664,'multiline':True]
['text':' Check for end of object or array.','line_number':708,'multiline':False]
['text':' consume the ']' or '}'','line_number':711,'multiline':False]
['text':' accept an object key that is not in quotes','line_number':734,'multiline':False]
['text':' start of array','line_number':750,'multiline':False]
['text':' consume the '['','line_number':769,'multiline':False]
['text':' start of object','line_number':781,'multiline':False]
['text':' consume the '{'','line_number':800,'multiline':False]
['text':' string','line_number':812,'multiline':False]
['text':' comma: empty item','line_number':826,'multiline':False]
['text':' FALLTHROUGH','line_number':833,'multiline':False]
['text':' empty','line_number':834,'multiline':False]
['text':' what','line_number':885,'multiline':False]
['text':' check for truncated name','line_number':969,'multiline':False]
['text':' We are finished when retval is FAIL or MAYBE and when at the','line_number':989,'multiline':False]
['text':' toplevel.','line_number':990,'multiline':False]
['text':' cannot use a float as a key','line_number':1001,'multiline':False]
['text':' Get here when parsing failed.','line_number':1131,'multiline':False]
['text':'
 * Decode the JSON from "reader" and store the result in "res".
 * "options" can be JSON_JS or zero;
 * Return FAIL if not the whole message was consumed.
 ','line_number':1148,'multiline':True]
['text':' We find the end once, to avoid calling strlen() many times.','line_number':1158,'multiline':False]
['text':'
 * Decode the JSON from "reader" and store the result in "res".
 * "options" can be JSON_JS or zero;
 * Return FAIL for a decoding error.
 * Return MAYBE for an incomplete message.
 * Consumes the message anyway.
 ','line_number':1178,'multiline':True]
['text':' We find the end once, to avoid calling strlen() many times.','line_number':1190,'multiline':False]
['text':'
 * Decode the JSON from "reader" to find the end of the message.
 * "options" can be JSON_JS or zero.
 * This is only used for testing.
 * Return FAIL if the message has a decoding error.
 * Return MAYBE if the message is truncated, need to read more.
 * This only works reliable if the message contains an object, array or
 * string.  A number might be truncated without knowing.
 * Does not advance the reader.
 ','line_number':1200,'multiline':True]
['text':' We find the end once, to avoid calling strlen() many times.','line_number':1216,'multiline':False]
['text':'
 * "js_decode()" function
 ','line_number':1224,'multiline':True]
['text':'
 * "js_encode()" function
 ','line_number':1242,'multiline':True]
['text':'
 * "json_decode()" function
 ','line_number':1252,'multiline':True]
['text':'
 * "json_encode()" function
 ','line_number':1269,'multiline':True]
