['text':' vi:set ts=8 sts=4 sw=4 noet:
 *
 * VIM - Vi IMproved	by Bram Moolenaar
 *
 * Do ":help uganda"  in Vim to read copying and usage conditions.
 * Do ":help credits" in Vim to see a list of people who contributed.
 * See README.txt for an overview of the Vim source code.
 ','line_number':1,'multiline':True]
['text':'
 * cmdexpand.c: functions for command-line completion
 ','line_number':10,'multiline':True]
['text':' Only show path tail in lists ?','line_number':16,'multiline':False]
['text':' "compl_match_array" points the currently displayed list of entries in the','line_number':27,'multiline':False]
['text':' popup menu.  It is NULL when there is no popup menu.','line_number':28,'multiline':False]
['text':' First column in cmdline of the matched item for completion.','line_number':31,'multiline':False]
['text':'
 * Returns TRUE if fuzzy completion is supported for a given cmdline completion
 * context.
 ','line_number':37,'multiline':True]
['text':'
 * Returns TRUE if fuzzy completion for cmdline completion is enabled and
 * 'fuzzystr' is not empty.  If search pattern is empty, then don't use fuzzy
 * matching.
 ','line_number':65,'multiline':True]
['text':'
 * sort function for the completion matches.
 * <SNR> functions should be sorted to the end.
 ','line_number':76,'multiline':True]
['text':'
 * Escape special characters in the cmdline completion matches.
 ','line_number':91,'multiline':True]
['text':' Insert a backslash into a file name before a space, \, %, #','line_number':111,'multiline':False]
['text':' and wildmatch characters, except '~'.','line_number':112,'multiline':False]
['text':' for ":set path=" we need to escape spaces twice','line_number':115,'multiline':False]
['text':' If 'str' starts with "\~", replace "~" at start of','line_number':158,'multiline':False]
['text':' files[i] with "\~".','line_number':159,'multiline':False]
['text':' If the first file starts with a '+' escape it.  Otherwise it','line_number':165,'multiline':False]
['text':' could be seen as "+cmd".','line_number':166,'multiline':False]
['text':' Insert a backslash before characters in a tag name that','line_number':172,'multiline':False]
['text':' would terminate the ":tag" command.','line_number':173,'multiline':False]
['text':'
 * Escape special characters in the cmdline completion matches.
 ','line_number':186,'multiline':True]
['text':' May change home directory back to "~"','line_number':197,'multiline':False]
['text':'
 * Return FAIL if this is not an appropriate context in which to do
 * completion of anything, return OK if it is (even if there are no matches).
 * For the caller, this means that the character is just passed through like a
 * normal character (instead of being expanded).  This allows :s/^I^D etc.
 ','line_number':205,'multiline':True]
['text':' extra options for ExpandOne()','line_number':215,'multiline':False]
['text':' if TRUE, escape the returned matches','line_number':216,'multiline':False]
['text':' Something illegal on command line','line_number':234,'multiline':False]
['text':' Caller can use the character as a normal char instead','line_number':238,'multiline':False]
['text':' If cmd_silent is set then don't show the dots, because redrawcmd() below','line_number':242,'multiline':False]
['text':' won't remove them.','line_number':243,'multiline':False]
['text':' show that we are busy','line_number':246,'multiline':False]
['text':' Get next/previous match for a previous expanded pattern.','line_number':256,'multiline':False]
['text':' If fuzzy matching, don't modify the search string','line_number':262,'multiline':False]
['text':' Translate string into pattern and expand it.','line_number':267,'multiline':False]
['text':' longest match: make sure it is not shorter, happens with :help','line_number':283,'multiline':False]
['text':' When expanding a ":map" command and no matches are found, assume that','line_number':321,'multiline':False]
['text':' the key is supposed to be inserted literally','line_number':322,'multiline':False]
['text':' free expanded pattern','line_number':329,'multiline':False]
['text':'
 * Create and display a cmdline completion popup menu with items from
 * 'matches'.
 ','line_number':335,'multiline':True]
['text':' Add all the completion matches','line_number':350,'multiline':False]
['text':' Compute the popup menu starting column','line_number':361,'multiline':False]
['text':' no default selection','line_number':374,'multiline':False]
['text':'
 * Display the cmdline completion matches in a popup menu
 ','line_number':382,'multiline':True]
['text':'
 * Returns TRUE if the cmdline completion popup menu is being displayed.
 ','line_number':391,'multiline':True]
['text':'
 * Remove the cmdline completion popup menu (if present), free the list of
 * items and refresh the screen.
 ','line_number':400,'multiline':True]
['text':' avoid the popup menu hanging around','line_number':412,'multiline':False]
['text':' When a function is called (e.g. for 'foldtext') KeyTyped might be reset','line_number':417,'multiline':False]
['text':' as a side effect.','line_number':418,'multiline':False]
['text':'
 * Returns the starting column number to use for the cmdline completion popup
 * menu.
 ','line_number':429,'multiline':True]
['text':'
 * Return the number of characters that should be skipped in a status match.
 * These are backslashes used for escaping.  Do show backslashes in help tags.
 ','line_number':439,'multiline':True]
['text':'
 * Get the length of an item as it will be shown in the status line.
 ','line_number':463,'multiline':True]
['text':' Check for menu separators - replace with '|'.','line_number':475,'multiline':False]
['text':'
 * Show wildchar matches in the status line.
 * Show at least the "match" item.
 * We start at item 'first_match' in the list and show all matches that fit.
 *
 * If inversion is possible we use it. Else '=' characters are used.
 ','line_number':490,'multiline':True]
['text':' list of matches','line_number':501,'multiline':False]
['text':' length in screen cells','line_number':508,'multiline':False]
['text':' interrupted completion?','line_number':524,'multiline':False]
['text':' don't show match but original text','line_number':534,'multiline':False]
['text':' count 1 for the ending ">"','line_number':539,'multiline':False]
['text':' jumping left, as far as we can go','line_number':545,'multiline':False]
['text':' check if match fits on the screen','line_number':551,'multiline':False]
['text':' jumping right, put match at the left','line_number':556,'multiline':False]
['text':' if showing the last match, we can add some on the left','line_number':560,'multiline':False]
['text':' Check for menu separators - replace with '|'','line_number':605,'multiline':False]
['text':' Put the wildmenu just above the command line.  If there is','line_number':659,'multiline':False]
['text':' no room, scroll the screen one line up.','line_number':660,'multiline':False]
['text':' Create status line if needed by setting 'laststatus' to 2.','line_number':675,'multiline':False]
['text':' Set 'winminheight' to zero to avoid that the window is','line_number':676,'multiline':False]
['text':' resized.','line_number':677,'multiline':False]
['text':'
 * Get the next or prev cmdline completion match. The index of the match is set
 * in "xp->xp_selected"
 ','line_number':704,'multiline':True]
['text':' at the first entry, don't select any entries','line_number':730,'multiline':False]
['text':' no entry is selected. select the last entry','line_number':733,'multiline':False]
['text':' go up by the pum height','line_number':737,'multiline':False]
['text':' few entries left, select the first entry','line_number':743,'multiline':False]
['text':' mode == WILD_PAGEDOWN','line_number':747,'multiline':False]
['text':' at the last entry, don't select any entries','line_number':750,'multiline':False]
['text':' no entry is selected. select the first entry','line_number':753,'multiline':False]
['text':' go down by the pum height','line_number':757,'multiline':False]
['text':' few entries left, select the last entry','line_number':763,'multiline':False]
['text':' When wrapping around, return the original string, set findex to -1.','line_number':768,'multiline':False]
['text':'
 * Start the command-line expansion and get the matches.
 ','line_number':799,'multiline':True]
['text':' number without matching suffix','line_number':805,'multiline':False]
['text':' Do the expansion.','line_number':809,'multiline':False]
['text':' Illegal file name has been silently skipped.  But when there','line_number':814,'multiline':False]
['text':' are wildcards, the real problem is that there was no match,','line_number':815,'multiline':False]
['text':' causing the pattern to be added, which has illegal characters.','line_number':816,'multiline':False]
['text':' Escape the matches for use on the command line.','line_number':828,'multiline':False]
['text':' Check for matching suffixes in file names.','line_number':831,'multiline':False]
['text':' More than one match; check suffix.','line_number':842,'multiline':False]
['text':' The files will have been sorted on matching suffix in','line_number':843,'multiline':False]
['text':' expand_wildcards, only need to check the first two.','line_number':844,'multiline':False]
['text':' Can we ever get here unless it's while expanding','line_number':852,'multiline':False]
['text':' interactively?  If not, we can get rid of this all','line_number':853,'multiline':False]
['text':' together. Don't really want to wait for this message','line_number':854,'multiline':False]
['text':' (and possibly have to hit return to continue!).','line_number':855,'multiline':False]
['text':'
 * Return the longest common part in the list of cmdline completion matches.
 ','line_number':869,'multiline':True]
['text':'
 * Do wildcard expansion on the string "str".
 * Chars that should not be expanded must be preceded with a backslash.
 * Return a pointer to allocated memory containing the new string.
 * Return NULL for failure.
 *
 * "orig" is the originally expanded string, copied to allocated memory.  It
 * should either be kept in "xp->xp_orig" or freed.  When "mode" is WILD_NEXT
 * or WILD_PREV "orig" should be NULL.
 *
 * Results are cached in xp->xp_files and xp->xp_numfiles, except when "mode"
 * is WILD_EXPAND_FREE or WILD_ALL.
 *
 * mode = WILD_FREE:	    just free previously expanded matches
 * mode = WILD_EXPAND_FREE: normal expansion, do not keep matches
 * mode = WILD_EXPAND_KEEP: normal expansion, keep matches
 * mode = WILD_NEXT:	    use next match in multiple match, wrap to first
 * mode = WILD_PREV:	    use previous match in multiple match, wrap to first
 * mode = WILD_ALL:	    return all matches concatenated
 * mode = WILD_LONGEST:	    return longest matched part
 * mode = WILD_ALL_KEEP:    get all matches, keep matches
 * mode = WILD_APPLY:	    apply the item selected in the cmdline completion
 *			    popup menu and close the menu.
 * mode = WILD_CANCEL:	    cancel and close the cmdline completion popup and
 *			    use the original text.
 *
 * options = WILD_LIST_NOTFOUND:    list entries without a match
 * options = WILD_HOME_REPLACE:	    do home_replace() for buffer names
 * options = WILD_USE_NL:	    Use '\n' for WILD_ALL
 * options = WILD_NO_BEEP:	    Don't beep for multiple matches
 * options = WILD_ADD_SLASH:	    add a slash after directory names
 * options = WILD_KEEP_ALL:	    don't remove 'wildignore' entries
 * options = WILD_SILENT:	    don't print warning messages
 * options = WILD_ESCAPE:	    put backslash before special chars
 * options = WILD_ICASE:	    ignore case for files
 * options = WILD_ALLLINKS;	    keep broken links
 *
 * The variables xp->xp_context and xp->xp_backslash must have been set!
 ','line_number':922,'multiline':True]
['text':' allocated copy of original of expanded string','line_number':965,'multiline':False]
['text':' first handle the case of using an old match','line_number':974,'multiline':False]
['text':' free old names','line_number':986,'multiline':False]
['text':' The entries from xp_files may be used in the PUM, remove it.','line_number':993,'multiline':False]
['text':' only release file name','line_number':999,'multiline':False]
['text':' Find longest common part','line_number':1011,'multiline':False]
['text':' next p_wc gets first one','line_number':1015,'multiline':False]
['text':' Concatenate all matching names.  Unless interrupted, this can be slow','line_number':1018,'multiline':False]
['text':' and the result probably won't be used.','line_number':1019,'multiline':False]
['text':' prefix "no"','line_number':1028,'multiline':False]
['text':' prefix "inv"','line_number':1030,'multiline':False]
['text':' Free "orig" if it wasn't stored in "xp->xp_orig".','line_number':1058,'multiline':False]
['text':'
 * Prepare an expand structure for use.
 ','line_number':1065,'multiline':True]
['text':'
 * Cleanup an expand structure after use.
 ','line_number':1077,'multiline':True]
['text':'
 * Display one line of completion matches. Multiple matches are displayed in
 * each line (used by wildmode=list and CTRL-D)
 *   matches - list of completion match names
 *   numMatches - number of completion matches in "matches"
 *   lines - number of output lines
 *   linenr - line number of matches to display
 *   maxlen - maximum number of characters in each line
 *   showtail - display only the tail of the full path of a file name
 *   dir_attr - highlight attribute to use for directory names
 ','line_number':1091,'multiline':True]
['text':' highlight directories','line_number':1137,'multiline':False]
['text':' Expansion was done before and special characters','line_number':1144,'multiline':False]
['text':' were escaped, need to halve backslashes.  Also','line_number':1145,'multiline':False]
['text':' $HOME has been replaced with ~/.','line_number':1146,'multiline':False]
['text':' Expansion was done here, file names are literal.','line_number':1157,'multiline':False]
['text':' when not wrapped around','line_number':1175,'multiline':False]
['text':' show one line at a time','line_number':1180,'multiline':False]
['text':'
 * Show all matches for completion on the command line.
 * Returns EXPAND_NOTHING when the character that triggered expansion should
 * be inserted like a normal character.
 ','line_number':1183,'multiline':True]
['text':' cmdline completion popup menu (with wildoptions=pum)','line_number':1218,'multiline':False]
['text':' lines_left will be set','line_number':1223,'multiline':False]
['text':' prepare for paging','line_number':1224,'multiline':False]
['text':' lines_left will be set again','line_number':1228,'multiline':False]
['text':' prepare for paging','line_number':1229,'multiline':False]
['text':' only int. the completion, not the cmd line','line_number':1233,'multiline':False]
['text':' find the length of the longest file name','line_number':1238,'multiline':False]
['text':' compute the number of columns and lines for the listing','line_number':1259,'multiline':False]
['text':' two spaces between file names','line_number':1260,'multiline':False]
['text':' find out highlighting for directories','line_number':1267,'multiline':False]
['text':' list the files line by line','line_number':1277,'multiline':False]
['text':' we redraw the command below the lines that we have just listed','line_number':1289,'multiline':False]
['text':' This is a bit tricky, but it saves a lot of screen updating.','line_number':1290,'multiline':False]
['text':' will put it back later','line_number':1291,'multiline':False]
['text':'
 * gettail() version for showmatches() and win_redr_status_matches():
 * Return the tail of file name path "s", ignoring a trailing "/".
 ','line_number':1300,'multiline':True]
['text':'
 * Return TRUE if we only need to show the tail of completion matches.
 * When not completing file names or there is a wildcard in the path FALSE is
 * returned.
 ','line_number':1329,'multiline':True]
['text':' When not completing file names a "/" may mean something different.','line_number':1340,'multiline':False]
['text':' there is no path separator','line_number':1347,'multiline':False]
['text':' Skip escaped wildcards.  Only when the backslash is not a path','line_number':1352,'multiline':False]
['text':' separator, on DOS the '*' "path\*\file" must not be skipped.','line_number':1353,'multiline':False]
['text':'
 * Prepare a string for expansion.
 * When expanding file names: The string will be used with expand_wildcards().
 * Copy "fname[len]" into allocated memory and add a '*' at the end.
 * When expanding other names: The string will be used with regcomp().  Copy
 * the name into allocated memory and prepend "^".
 ','line_number':1362,'multiline':True]
['text':' EXPAND_FILES etc.','line_number':1373,'multiline':False]
['text':' Matching will be done internally (on something other than files).','line_number':1386,'multiline':False]
['text':' So we convert the file-matching-type wildcards into our kind for','line_number':1387,'multiline':False]
['text':' use with vim_regcomp().  First work out how long it will be:','line_number':1388,'multiline':False]
['text':' For help tags the translation is done in find_help_tags().','line_number':1390,'multiline':False]
['text':' For a tag pattern starting with "/" no translation is needed.','line_number':1391,'multiline':False]
['text':' +2 for '^' at start, NUL at end','line_number':1405,'multiline':False]
['text':' '*' needs to be replaced by ".*"','line_number':1409,'multiline':False]
['text':' '~' needs to be replaced by "\~"','line_number':1410,'multiline':False]
['text':' Buffer names are like file names.  "." should be literal','line_number':1412,'multiline':False]
['text':' "." becomes "\."','line_number':1414,'multiline':False]
['text':' Custom expansion takes care of special things, match','line_number':1416,'multiline':False]
['text':' backslashes literally (perhaps also for other types?)','line_number':1417,'multiline':False]
['text':' '\' becomes "\\"','line_number':1420,'multiline':False]
['text':' Skip backslash.  But why?  At least keep it for custom','line_number':1429,'multiline':False]
['text':' expansion.','line_number':1430,'multiline':False]
['text':' Don't add a star to *, ~, ~user, $var or `cmd`.','line_number':1466,'multiline':False]
['text':' * would become **, which walks the whole tree.','line_number':1467,'multiline':False]
['text':' ~ would be at the start of the file name, but not the tail.','line_number':1468,'multiline':False]
['text':' $ could be anywhere in the tail.','line_number':1469,'multiline':False]
['text':' ` could be anywhere in the file name.','line_number':1470,'multiline':False]
['text':' When the name ends in '$' don't add a star, remove the '$'.','line_number':1471,'multiline':False]
['text':'
 * Must parse the command line so far to work out what context we are in.
 * Completion can then be done based on that context.
 * This routine sets the variables:
 *  xp->xp_pattern	    The start of the pattern to be expanded within
 *				the command line (ends at the cursor).
 *  xp->xp_context	    The type of thing to expand.  Will be one of:
 *
 *  EXPAND_UNSUCCESSFUL	    Used sometimes when there is something illegal on
 *			    the command line, like an unknown command.	Caller
 *			    should beep.
 *  EXPAND_NOTHING	    Unrecognised context for completion, use char like
 *			    a normal char, rather than for completion.	eg
 *			    :s/^I/
 *  EXPAND_COMMANDS	    Cursor is still touching the command, so complete
 *			    it.
 *  EXPAND_BUFFERS	    Complete file names for :buf and :sbuf commands.
 *  EXPAND_FILES	    After command with EX_XFILE set, or after setting
 *			    with P_EXPAND set.	eg :e ^I, :w>>^I
 *  EXPAND_DIRECTORIES	    In some cases this is used instead of the latter
 *			    when we know only directories are of interest.
 *			    E.g.  :set dir=^I  and  :cd ^I
 *  EXPAND_SHELLCMD	    After ":!cmd", ":r !cmd"  or ":w !cmd".
 *  EXPAND_SETTINGS	    Complete variable names.  eg :set d^I
 *  EXPAND_BOOL_SETTINGS    Complete boolean variables only,  eg :set no^I
 *  EXPAND_TAGS		    Complete tags from the files in p_tags.  eg :ta a^I
 *  EXPAND_TAGS_LISTFILES   As above, but list filenames on ^D, after :tselect
 *  EXPAND_HELP		    Complete tags from the file 'helpfile'/tags
 *  EXPAND_EVENTS	    Complete event names
 *  EXPAND_SYNTAX	    Complete :syntax command arguments
 *  EXPAND_HIGHLIGHT	    Complete highlight (syntax) group names
 *  EXPAND_AUGROUP	    Complete autocommand group names
 *  EXPAND_USER_VARS	    Complete user defined variable names, eg :unlet a^I
 *  EXPAND_MAPPINGS	    Complete mapping and abbreviation names,
 *			      eg :unmap a^I , :cunab x^I
 *  EXPAND_FUNCTIONS	    Complete internal or user defined function names,
 *			      eg :call sub^I
 *  EXPAND_USER_FUNC	    Complete user defined function names, eg :delf F^I
 *  EXPAND_EXPRESSION	    Complete internal or user defined function/variable
 *			    names in expressions, eg :while s^I
 *  EXPAND_ENV_VARS	    Complete environment variable names
 *  EXPAND_USER		    Complete user names
 ','line_number':1495,'multiline':True]
['text':' only expansion for ':', '>' and '=' command-lines','line_number':1543,'multiline':False]
['text':'
 * Sets the index of a built-in or user defined command 'cmd' in eap->cmdidx.
 * For user defined commands, the completion context is set in 'xp' and the
 * completion flags in 'complp'.
 *
 * Returns a pointer to the text after the command or NULL for failure.
 ','line_number':1557,'multiline':True]
['text':' Isolate the command and search for it in the command table.','line_number':1571,'multiline':False]
['text':' Exceptions:','line_number':1572,'multiline':False]
['text':' - the 'k' command can directly be followed by any character, but do','line_number':1573,'multiline':False]
['text':' accept "keepmarks", "keepalt" and "keepjumps". As fuzzy matching can','line_number':1574,'multiline':False]
['text':' find matches anywhere in the command name, do this only for command','line_number':1575,'multiline':False]
['text':' expansion based on regular expression and not for fuzzy matching.','line_number':1576,'multiline':False]
['text':' - the 's' command can be followed directly by 'c', 'g', 'i', 'I' or 'r'','line_number':1577,'multiline':False]
['text':' Allow * wild card','line_number':1586,'multiline':False]
['text':' A user command may contain digits.','line_number':1588,'multiline':False]
['text':' Include "9" for "vim9*" commands; "vim9cmd" and "vim9script".','line_number':1589,'multiline':False]
['text':' for python 3.x: ":py3*" commands completion','line_number':1593,'multiline':False]
['text':' check for non-alpha command','line_number':1600,'multiline':False]
['text':' User defined commands support alphanumeric characters.','line_number':1613,'multiline':False]
['text':' Also when doing fuzzy expansion for non-shell commands, support','line_number':1614,'multiline':False]
['text':' alphanumeric characters.','line_number':1615,'multiline':False]
['text':' Allow * wild card','line_number':1618,'multiline':False]
['text':' If the cursor is touching the command, and it ends in an alphanumeric','line_number':1622,'multiline':False]
['text':' character, complete the command name.','line_number':1623,'multiline':False]
['text':' ambiguous user command','line_number':1639,'multiline':False]
['text':' Not still touching the command and it was an illegal one','line_number':1644,'multiline':False]
['text':'
 * Set the completion context for a command argument with wild card characters.
 ','line_number':1652,'multiline':True]
['text':' Beginning of word','line_number':1666,'multiline':False]
['text':' Allow spaces within back-quotes to count as part of the argument','line_number':1669,'multiline':False]
['text':' being expanded.','line_number':1670,'multiline':False]
['text':' An argument can contain just about everything, except','line_number':1690,'multiline':False]
['text':' characters that end the command and white space.','line_number':1691,'multiline':False]
['text':' avoid getting stuck when space is in 'isfname'','line_number':1698,'multiline':False]
['text':' If we are still inside the quotes, and we passed a space, just','line_number':1722,'multiline':False]
['text':' expand from there.','line_number':1723,'multiline':False]
['text':' For a shell command more chars need to be escaped.','line_number':1728,'multiline':False]
['text':' When still after the command name expand executables.','line_number':1734,'multiline':False]
['text':' Check for environment variable.','line_number':1739,'multiline':False]
['text':' Avoid that the assignment uses EXPAND_FILES again.','line_number':1749,'multiline':False]
['text':' Check for user names.','line_number':1754,'multiline':False]
['text':' Complete ~user only if it partially matches a user name.','line_number':1759,'multiline':False]
['text':' A full match ~user<Tab> will be replaced by user's home','line_number':1760,'multiline':False]
['text':' directory i.e. something like ~user<Tab> -> /home/user/','line_number':1761,'multiline':False]
['text':'
 * Set the completion context for the "++opt=arg" argument.  Always returns
 * NULL.
 ','line_number':1771,'multiline':True]
['text':'
 * Set the completion context for :terminal's [options].  Always returns NULL.
 ','line_number':1791,'multiline':True]
['text':'
 * Set the completion context for the :filter command. Returns a pointer to the
 * next command after the :filter command.
 ','line_number':1810,'multiline':True]
['text':'
 * Set the completion context for the :match command. Returns a pointer to the
 * next command after the :match command.
 ','line_number':1828,'multiline':True]
['text':' also complete "None"','line_number':1837,'multiline':False]
['text':'
 * Returns a pointer to the next command after a :global or a :v command.
 * Returns NULL if there is no next command.
 ','line_number':1850,'multiline':True]
['text':' get the delimiter','line_number':1859,'multiline':False]
['text':' skip delimiter if there is one','line_number':1861,'multiline':False]
['text':'
 * Returns a pointer to the next command after a :substitute or a :& command.
 * Returns NULL if there is no next command.
 ','line_number':1875,'multiline':True]
['text':' skip "from" part','line_number':1887,'multiline':False]
['text':' skip "to" part','line_number':1893,'multiline':False]
['text':' skip delimiter','line_number':1901,'multiline':False]
['text':'
 * Returns a pointer to the next command after a :isearch/:dsearch/:ilist
 * :dlist/:ijump/:psearch/:djump/:isplit/:dsplit command.
 * Returns NULL if there is no next command.
 ','line_number':1913,'multiline':True]
['text':' skip count','line_number':1921,'multiline':False]
['text':' Match regexp, not just whole words','line_number':1925,'multiline':False]
['text':' Check for trailing illegal characters','line_number':1933,'multiline':False]
['text':'
 * Set the completion context for the :unlet command. Always returns NULL.
 ','line_number':1944,'multiline':True]
['text':'
 * Set the completion context for the :language command. Always returns NULL.
 ','line_number':1967,'multiline':True]
['text':' expand ":breakadd" sub-commands','line_number':2002,'multiline':False]
['text':' expand ":breakdel" sub-commands','line_number':2003,'multiline':False]
['text':' expand ":profdel" sub-commands','line_number':2004,'multiline':False]
['text':'
 * Set the completion context for the :breakadd command. Always returns NULL.
 ','line_number':2007,'multiline':True]
['text':' :breakadd file [lnum] <filename>','line_number':2033,'multiline':False]
['text':' :breakadd func [lnum] <funcname>','line_number':2034,'multiline':False]
['text':' skip line number (if specified)','line_number':2038,'multiline':False]
['text':' :breakadd expr <expression>','line_number':2057,'multiline':False]
['text':'
 * Set the completion context in 'xp' for command 'cmd' with index 'cmdidx'.
 * The argument to the command is 'arg' and the argument flags is 'argt'.
 * For user-defined commands and for environment variables, 'compl' has the
 * completion type.
 * Returns a pointer to the next command. Returns NULL if there is no next
 * command.
 ','line_number':2084,'multiline':True]
['text':' Command modifiers: return the argument.','line_number':2124,'multiline':False]
['text':' Also for commands with an argument that is a command.','line_number':2125,'multiline':False]
['text':' All completion for the +cmdline_compl feature goes here.','line_number':2171,'multiline':False]
['text':' FALLTHROUGH','line_number':2296,'multiline':False]
['text':' If current buffer is in diff mode, complete buffer names','line_number':2306,'multiline':False]
['text':' which are in diff mode, and different than current buffer.','line_number':2307,'multiline':False]
['text':'
 * This is all pretty much copied from do_one_cmd(), with all the extra stuff
 * we don't need/want deleted.	Maybe this could be done better if we didn't
 * repeat all this stuff.  The only problem is that they may not stay
 * perfectly compatible with each other, but then the command line syntax
 * probably won't change that much -- webb.
 ','line_number':2461,'multiline':True]
['text':' buffer for command string','line_number':2471,'multiline':False]
['text':' filter instead of file name','line_number':2479,'multiline':False]
['text':' Default until we get past command','line_number':2484,'multiline':False]
['text':' 1. skip comment lines and leading space, colons or bars','line_number':2487,'multiline':False]
['text':' ignore comment lines','line_number':2494,'multiline':False]
['text':' 3. Skip over the range to find the command.','line_number':2500,'multiline':False]
['text':' There's another command','line_number':2512,'multiline':False]
['text':' Get the command index.','line_number':2514,'multiline':False]
['text':' Default now that we're past command','line_number':2519,'multiline':False]
['text':' forced commands','line_number':2521,'multiline':False]
['text':' 6. parse arguments','line_number':2527,'multiline':False]
['text':' Does command allow "++argopt" argument?','line_number':2533,'multiline':False]
['text':' Still touching the command after "++"?','line_number':2542,'multiline':False]
['text':' append','line_number':2559,'multiline':False]
['text':' :w !filter','line_number':2565,'multiline':False]
['text':' :r! filter if forced','line_number':2574,'multiline':False]
['text':' :r !filter','line_number':2575,'multiline':False]
['text':' allow any number of '>' or '<'','line_number':2584,'multiline':False]
['text':' Does command allow "+command"?','line_number':2589,'multiline':False]
['text':' Check if we're in the +command','line_number':2592,'multiline':False]
['text':' Still touching the command after '+'?','line_number':2596,'multiline':False]
['text':' Skip space(s) after +command to get to the real argument','line_number':2600,'multiline':False]
['text':' Check for '|' to separate commands and '"' to start comments.','line_number':2605,'multiline':False]
['text':' Don't do this for ":read !cmd" and ":write !cmd".','line_number':2606,'multiline':False]
['text':' ":redir @" is not the start of a comment','line_number':2610,'multiline':False]
['text':' It's a comment','line_number':2627,'multiline':False]
['text':' no arguments allowed but there is something','line_number':2636,'multiline':False]
['text':' Find start of last argument (argument just before cursor):','line_number':2639,'multiline':False]
['text':' argument starts after a space','line_number':2647,'multiline':False]
['text':' skip over escaped character','line_number':2653,'multiline':False]
['text':' 6. Switch on command name.','line_number':2661,'multiline':False]
['text':'
 * Set the completion context in 'xp' for command 'str'
 ','line_number':2666,'multiline':True]
['text':' start of command line','line_number':2672,'multiline':False]
['text':' length of command line (excl. NUL)','line_number':2673,'multiline':False]
['text':' position of cursor','line_number':2674,'multiline':False]
['text':' use ccline for info','line_number':2675,'multiline':False]
['text':' Avoid a UMR warning from Purify, only save the character if it has been','line_number':2683,'multiline':False]
['text':' written before.','line_number':2684,'multiline':False]
['text':' pass CMD_SIZE because there is no real command','line_number':2693,'multiline':False]
['text':' Store the string here so that call_user_expand_func() can get to them','line_number':2707,'multiline':False]
['text':' easily.','line_number':2708,'multiline':False]
['text':'
 * Expand the command line "str" from context "xp".
 * "xp" must have been set by set_cmd_context().
 * xp->xp_pattern points into "str", to where the text that is to be expanded
 * starts.
 * Returns EXPAND_UNSUCCESSFUL when there is something illegal before the
 * cursor.
 * Returns EXPAND_NOTHING when there is nothing to expand, might insert the
 * key that triggered expansion literally.
 * Returns EXPAND_OK otherwise.
 ','line_number':2715,'multiline':True]
['text':' start of command line','line_number':2729,'multiline':False]
['text':' position of cursor','line_number':2730,'multiline':False]
['text':' return: nr of matches','line_number':2731,'multiline':False]
['text':' return: array of pointers to matches','line_number':2732,'multiline':False]
['text':' Something illegal on command line','line_number':2740,'multiline':False]
['text':' Caller can use the character as a normal char instead','line_number':2744,'multiline':False]
['text':' add star to file name, or convert to regexp if not exp. files.','line_number':2748,'multiline':False]
['text':' If fuzzy matching, don't modify the search string','line_number':2751,'multiline':False]
['text':' find all files that match the description','line_number':2763,'multiline':False]
['text':'
 * Expand file or directory names.
 * Returns OK or FAIL.
 ','line_number':2774,'multiline':True]
['text':' for ":set path=" and ":set tags=" halve backslashes for escaped','line_number':2791,'multiline':False]
['text':' space','line_number':2792,'multiline':False]
['text':' Expand wildcards, supporting %:h and the like.','line_number':2829,'multiline':False]
['text':'
 * Function given to ExpandGeneric() to obtain the possible arguments of the
 * ":behave {mswin,xterm}" command.
 ','line_number':2856,'multiline':True]
['text':'
 * Function given to ExpandGeneric() to obtain the possible arguments of the
 * ":breakadd {expr, file, func, here}" command.
 * ":breakdel {func, file, here}" command.
 ','line_number':2871,'multiline':True]
['text':' breakadd {expr, file, func, here}','line_number':2883,'multiline':False]
['text':' breakdel {func, file, here}','line_number':2888,'multiline':False]
['text':' profdel {func, file}','line_number':2894,'multiline':False]
['text':'
 * Function given to ExpandGeneric() to obtain the possible arguments for the
 * ":scriptnames" command.
 ','line_number':2902,'multiline':True]
['text':'
 * Function given to ExpandGeneric() to obtain the possible arguments of the
 * ":messages {clear}" command.
 ','line_number':2920,'multiline':True]
['text':'
 * Do the expansion based on xp->xp_context and 'rmp'.
 ','line_number':2940,'multiline':True]
['text':' Find a context in the table and call the ExpandGeneric() with the','line_number':3013,'multiline':False]
['text':' right function to do the expansion.','line_number':3014,'multiline':False]
['text':'
 * Map wild expand options to flags for expand_wildcards()
 ','line_number':3030,'multiline':True]
['text':' include directories','line_number':3038,'multiline':False]
['text':'
 * Do the expansion based on xp->xp_context and "pat".
 ','line_number':3055,'multiline':True]
['text':' WILD_ flags','line_number':3064,'multiline':False]
['text':' With an empty argument we would get all the help tags, which is','line_number':3085,'multiline':False]
['text':' very slow.  Get matches for "help" instead.','line_number':3086,'multiline':False]
['text':' When expanding a function name starting with s:, match the <SNR>nr_','line_number':3143,'multiline':False]
['text':' prefix.','line_number':3144,'multiline':False]
['text':' set ignore-case according to p_ic, p_scs and pat','line_number':3164,'multiline':False]
['text':'
 * Expand a list of names.
 *
 * Generic function for command line completion.  It calls a function to
 * obtain strings, one by one.	The strings are matched against a regexp
 * program.  Matching strings are copied into an array, which is returned.
 *
 * If 'fuzzy' is TRUE, then fuzzy matching is used. Otherwise, regex matching
 * is used.
 *
 * Returns OK when no problems encountered, FAIL for error (out of memory).
 ','line_number':3197,'multiline':True]
['text':' returns a string from the list','line_number':3217,'multiline':False]
['text':' end of list','line_number':3242,'multiline':False]
['text':' skip empty strings','line_number':3244,'multiline':False]
['text':' test for separator added by get_menu_names()','line_number':3297,'multiline':False]
['text':' sort the matches when using regular expression matching and sorting','line_number':3310,'multiline':False]
['text':' applies to the completion context. Menus and scriptnames should be kept','line_number':3311,'multiline':False]
['text':' in the specified order.','line_number':3312,'multiline':False]
['text':' <SNR> functions should be sorted to the end.','line_number':3321,'multiline':False]
['text':' Sort the matches.','line_number':3328,'multiline':False]
['text':' <SNR> functions should be sorted to the end.','line_number':3332,'multiline':False]
['text':' Reset the variables used for special highlight names expansion, so that','line_number':3353,'multiline':False]
['text':' they don't show up when getting normal highlight names by ID.','line_number':3354,'multiline':False]
['text':'
 * Expand shell command matches in one directory of $PATH.
 ','line_number':3361,'multiline':True]
['text':' Expand matches in one directory of $PATH.','line_number':3385,'multiline':False]
['text':' Check if this name was already found.','line_number':3402,'multiline':False]
['text':' Remove the path that was prepended.','line_number':3407,'multiline':False]
['text':'
 * Complete a shell command.
 * Returns FAIL or OK;
 ','line_number':3419,'multiline':True]
['text':' pattern to match with command names','line_number':3425,'multiline':False]
['text':' return: array with matches','line_number':3426,'multiline':False]
['text':' return: number of matches','line_number':3427,'multiline':False]
['text':' EW_ flags','line_number':3428,'multiline':False]
['text':' for ":set path=" and ":set tags=" halve backslashes for escaped space','line_number':3446,'multiline':False]
['text':' For an absolute name we don't use $PATH.','line_number':3465,'multiline':False]
['text':' Go over all directories in $PATH.  Expand matches in that directory and','line_number':3472,'multiline':False]
['text':' collect them in "ga".  When "." is not in $PATH also expand for the','line_number':3473,'multiline':False]
['text':' current directory, to find "subdir/cmd".','line_number':3474,'multiline':False]
['text':' Find directories in the current directory, path is empty.','line_number':3491,'multiline':False]
['text':' Do not match directories inside a $PATH item.','line_number':3501,'multiline':False]
['text':'
 * Call "user_expand_func()" to invoke a user defined Vim script function and
 * return the result (either a string, a List or NULL).
 ','line_number':3526,'multiline':True]
['text':'
 * Expand names with a function defined by the user (EXPAND_USER_DEFINED and
 * EXPAND_USER_LIST).
 ','line_number':3573,'multiline':True]
['text':' match everything','line_number':3626,'multiline':False]
['text':'
 * Expand names with a list returned by a function defined by the user.
 ','line_number':3670,'multiline':True]
['text':' Loop over the items in the list.','line_number':3690,'multiline':False]
['text':' Skip non-string items and empty strings','line_number':3694,'multiline':False]
['text':'
 * Expand "file" for all comma-separated directories in "path".
 * Adds the matches to "ga".  Caller must init "ga".
 * If "dirs" is TRUE only expand directory names.
 ','line_number':3711,'multiline':True]
['text':' Loop over all entries in {path}.','line_number':3737,'multiline':False]
['text':' Copy one item of the path to buf[] and concatenate the file name.','line_number':3740,'multiline':False]
['text':' Using the platform's path separator (\) makes vim incorrectly','line_number':3745,'multiline':False]
['text':' treat it as an escape character, use '/' instead.','line_number':3746,'multiline':False]
['text':' take over the pointers and put them in "ga"','line_number':3759,'multiline':False]
['text':'
 * Translate some keys pressed when 'wildmenu' is used.
 ','line_number':3773,'multiline':True]
['text':' When the popup menu is used for cmdline completion:','line_number':3787,'multiline':False]
['text':'   Up	  : go to the previous item in the menu','line_number':3788,'multiline':False]
['text':'   Down : go to the next item in the menu','line_number':3789,'multiline':False]
['text':'   Left : go to the parent directory','line_number':3790,'multiline':False]
['text':'   Right: list the files in the selected directory','line_number':3791,'multiline':False]
['text':' Hitting CR after "emenu Name.": complete submenu','line_number':3810,'multiline':False]
['text':'
 * Delete characters on the command line, from "from" to the current
 * position.
 ','line_number':3821,'multiline':True]
['text':'
 * Handle a key pressed when the wild menu for the menu names
 * (EXPAND_MENUNAMES) is displayed.
 ','line_number':3834,'multiline':True]
['text':' Hitting <Down> after "emenu Name.": complete submenu','line_number':3844,'multiline':False]
['text':' in case the key was mapped','line_number':3849,'multiline':False]
['text':' Hitting <Up>: Remove one submenu name in front of the','line_number':3853,'multiline':False]
['text':' cursor','line_number':3854,'multiline':False]
['text':' check for start of menu name','line_number':3861,'multiline':False]
['text':' check for start of submenu name','line_number':3868,'multiline':False]
['text':' in case the key was mapped','line_number':3884,'multiline':False]
['text':'
 * Handle a key pressed when the wild menu for file names (EXPAND_FILES) or
 * directory names (EXPAND_DIRECTORIES) or shell command names
 * (EXPAND_SHELLCMD) is displayed.
 ','line_number':3891,'multiline':True]
['text':' go down a directory','line_number':3916,'multiline':False]
['text':' in case the key was mapped','line_number':3918,'multiline':False]
['text':' If in a direct ancestor, strip off one ../ to go down','line_number':3922,'multiline':False]
['text':' in case the key was mapped','line_number':3944,'multiline':False]
['text':' go up a directory','line_number':3949,'multiline':False]
['text':' TODO this is only for DOS/UNIX systems - need to put in','line_number':3986,'multiline':False]
['text':' machine-specific stuff here and in upseg init','line_number':3987,'multiline':False]
['text':' Now complete in the new directory. Set KeyTyped in case the','line_number':3994,'multiline':False]
['text':' Up key came from a mapping.','line_number':3995,'multiline':False]
['text':'
 * Handle a key pressed when the wild menu is displayed
 ','line_number':4003,'multiline':True]
['text':'
 * Free expanded names when finished walking through the matches
 ','line_number':4019,'multiline':True]
['text':' Entered command line, move it up','line_number':4038,'multiline':False]
['text':' restore 'laststatus' and 'winminheight'','line_number':4044,'multiline':False]
['text':' redraw the screen NOW','line_number':4048,'multiline':False]
['text':'
 * "getcompletion()" function
 ','line_number':4066,'multiline':True]
['text':' For filtered results, 'wildignore' is used','line_number':4096,'multiline':False]
['text':' Must be "custom,funcname" pattern','line_number':4123,'multiline':False]
['text':' Must be "customlist,funcname" pattern','line_number':4135,'multiline':False]
['text':' when fuzzy matching, don't modify the search string','line_number':4174,'multiline':False]
['text':' FEAT_EVAL','line_number':4191,'multiline':False]
