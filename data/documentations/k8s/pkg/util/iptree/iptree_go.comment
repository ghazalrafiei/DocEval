['text':'
Copyright 2023 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
','line_number':1,'multiline':True]
['text':' iptree implement a radix tree that uses IP prefixes as nodes and allows to store values in each node.','line_number':25,'multiline':False]
['text':' Example:','line_number':26,'multiline':False]
['text':'','line_number':27,'multiline':False]
['text':' 	r := New[int]()','line_number':28,'multiline':False]
['text':'','line_number':29,'multiline':False]
['text':'	prefixes := []string{','line_number':30,'multiline':False]
['text':'		"0.0.0.0/0",','line_number':31,'multiline':False]
['text':'		"10.0.0.0/8",','line_number':32,'multiline':False]
['text':'		"10.0.0.0/16",','line_number':33,'multiline':False]
['text':'		"10.1.0.0/16",','line_number':34,'multiline':False]
['text':'		"10.1.1.0/24",','line_number':35,'multiline':False]
['text':'		"10.1.244.0/24",','line_number':36,'multiline':False]
['text':'		"10.0.0.0/24",','line_number':37,'multiline':False]
['text':'		"10.0.0.3/32",','line_number':38,'multiline':False]
['text':'		"192.168.0.0/24",','line_number':39,'multiline':False]
['text':'		"192.168.0.0/28",','line_number':40,'multiline':False]
['text':'		"192.168.129.0/28",','line_number':41,'multiline':False]
['text':'	}','line_number':42,'multiline':False]
['text':'	for _, k := range prefixes {','line_number':43,'multiline':False]
['text':'		r.InsertPrefix(netip.MustParsePrefix(k), 0)','line_number':44,'multiline':False]
['text':'	}','line_number':45,'multiline':False]
['text':'','line_number':46,'multiline':False]
['text':' (*) means the node is not public, is not storing any value','line_number':47,'multiline':False]
['text':'','line_number':48,'multiline':False]
['text':' 0.0.0.0/0 --- 10.0.0.0/8 --- *10.0.0.0/15 --- 10.0.0.0/16 --- 10.0.0.0/24 --- 10.0.0.3/32','line_number':49,'multiline':False]
['text':'  |                                 |','line_number':50,'multiline':False]
['text':'  |                                 \ -------- 10.1.0.0/16 --- 10.1.1.0/24','line_number':51,'multiline':False]
['text':'  |                                                 |','line_number':52,'multiline':False]
['text':'  |	                                               \ ------- 10.1.244.0/24','line_number':53,'multiline':False]
['text':'  |','line_number':54,'multiline':False]
['text':'  \------ *192.168.0.0/16 --- 192.168.0.0/24 --- 192.168.0.0/28','line_number':55,'multiline':False]
['text':'                   |','line_number':56,'multiline':False]
['text':'                    \ -------- 192.168.129.0/28','line_number':57,'multiline':False]
['text':' node is an element of radix tree with a netip.Prefix optimized to store IP prefixes.','line_number':59,'multiline':False]
['text':' prefix network CIDR','line_number':61,'multiline':False]
['text':' public nodes are used to store values','line_number':63,'multiline':False]
['text':' binary tree','line_number':67,'multiline':False]
['text':' mergeChild allow to compress the tree','line_number':70,'multiline':False]
['text':' when n has exactly one child and no value','line_number':71,'multiline':False]
['text':' p -> n -> b -> c ==> p -> b -> c','line_number':72,'multiline':False]
['text':' public nodes can not be merged','line_number':74,'multiline':False]
['text':' can not merge if there are two children','line_number':78,'multiline':False]
['text':' can not merge if there are no children','line_number':83,'multiline':False]
['text':' find the child and merge it','line_number':88,'multiline':False]
['text':' remove any references from the deleted node','line_number':99,'multiline':False]
['text':' to avoid memory leak','line_number':100,'multiline':False]
['text':' Tree is a radix tree for IPv4 and IPv6 networks.','line_number':105,'multiline':False]
['text':' New creates a new Radix Tree for IP addresses.','line_number':111,'multiline':False]
['text':' GetPrefix returns the stored value and true if the exact prefix exists in the tree.','line_number':123,'multiline':False]
['text':' mask the address for sanity','line_number':132,'multiline':False]
['text':' we can't check longer than the request mask','line_number':134,'multiline':False]
['text':' walk the network bits of the prefix','line_number':136,'multiline':False]
['text':' Look for a child checking the bit position after the mask','line_number':138,'multiline':False]
['text':' check we are in the right branch comparing the suffixes','line_number':143,'multiline':False]
['text':' update the new bit position with the new node mask','line_number':147,'multiline':False]
['text':' check if this node is a public node and contains a prefix','line_number':150,'multiline':False]
['text':' LongestPrefixMatch returns the longest prefix match, the stored value and true if exist.','line_number':158,'multiline':False]
['text':' For example, considering the following prefixes 192.168.20.16/28 and 192.168.0.0/16,','line_number':159,'multiline':False]
['text':' when the address 192.168.20.19/32 is looked up it will return 192.168.20.16/28.','line_number':160,'multiline':False]
['text':' bit position is given by the mask bits','line_number':168,'multiline':False]
['text':' mask the address','line_number':170,'multiline':False]
['text':' walk the network bits of the prefix','line_number':173,'multiline':False]
['text':' Look for a child checking the bit position after the mask','line_number':178,'multiline':False]
['text':' check we are in the right branch comparing the suffixes','line_number':183,'multiline':False]
['text':' update the new bit position with the new node mask','line_number':187,'multiline':False]
['text':' ShortestPrefixMatch returns the shortest prefix match, the stored value and true if exist.','line_number':202,'multiline':False]
['text':' For example, considering the following prefixes 192.168.20.16/28 and 192.168.0.0/16,','line_number':203,'multiline':False]
['text':' when the address 192.168.20.19/32 is looked up it will return 192.168.0.0/16.','line_number':204,'multiline':False]
['text':' bit position is given by the mask bits','line_number':212,'multiline':False]
['text':' mask the address','line_number':214,'multiline':False]
['text':' Look for a child checking the bit position after the mask','line_number':221,'multiline':False]
['text':' check we are in the right branch comparing the suffixes','line_number':226,'multiline':False]
['text':' update the new bit position with the new node mask','line_number':230,'multiline':False]
['text':' InsertPrefix is used to add a new entry or update','line_number':240,'multiline':False]
['text':' an existing entry. Returns true if updated.','line_number':241,'multiline':False]
['text':' bit position is given by the mask bits','line_number':248,'multiline':False]
['text':' mask the address','line_number':250,'multiline':False]
['text':' Look for a child checking the bit position after the mask','line_number':254,'multiline':False]
['text':' if no child create a new one with','line_number':258,'multiline':False]
['text':' update the new bit position with the new node mask','line_number':268,'multiline':False]
['text':' continue if we are in the right branch and current','line_number':271,'multiline':False]
['text':' node is our parent','line_number':272,'multiline':False]
['text':' Split the node and add a new child:','line_number':277,'multiline':False]
['text':' - Case 1: parent -> child -> n','line_number':278,'multiline':False]
['text':' - Case 2: parent -> newnode |--> child','line_number':279,'multiline':False]
['text':'                             |--> n','line_number':280,'multiline':False]
['text':' Case 1: existing node is a sibling','line_number':286,'multiline':False]
['text':' parent to child','line_number':288,'multiline':False]
['text':' calculate if the sibling is at the left or right','line_number':291,'multiline':False]
['text':' Case 2: existing node has the same mask but different base address','line_number':296,'multiline':False]
['text':' add common ancestor and branch on it','line_number':297,'multiline':False]
['text':' ancestor -> children','line_number':304,'multiline':False]
['text':' if already exist update it and make it public','line_number':316,'multiline':False]
['text':' DeletePrefix delete the exact prefix and return true if it existed.','line_number':331,'multiline':False]
['text':' bit position is given by the mask bits','line_number':339,'multiline':False]
['text':' mask the address','line_number':341,'multiline':False]
['text':' Look for a child checking the bit position after the mask','line_number':345,'multiline':False]
['text':' check we are in the right branch comparing the suffixes','line_number':351,'multiline':False]
['text':' update the new bit position with the new node mask','line_number':355,'multiline':False]
['text':' check if the node contains the prefix we want to delete','line_number':358,'multiline':False]
['text':' Delete the value','line_number':362,'multiline':False]
['text':' If there is a parent and this node does not have any children','line_number':374,'multiline':False]
['text':' this is a leaf so we can delete this node.','line_number':375,'multiline':False]
['text':' - parent -> child(to be deleted)','line_number':376,'multiline':False]
['text':' Check if we should merge this node','line_number':387,'multiline':False]
['text':' The root node can not be merged','line_number':388,'multiline':False]
['text':' Check if we should merge the parent's other child','line_number':392,'multiline':False]
['text':' parent -> deletedNode','line_number':393,'multiline':False]
['text':'        |--> child','line_number':394,'multiline':False]
['text':' for testing, returns the number of public nodes in the tree.','line_number':410,'multiline':False]
['text':' WalkFn is used when walking the tree. Takes a','line_number':420,'multiline':False]
['text':' key and value, returning if iteration should','line_number':421,'multiline':False]
['text':' be terminated.','line_number':422,'multiline':False]
['text':' DepthFirstWalk is used to walk the tree of the corresponding IP family','line_number':425,'multiline':False]
['text':' recursiveWalk is used to do a pre-order walk of a node','line_number':433,'multiline':False]
['text':' recursively. Returns true if the walk should be aborted','line_number':434,'multiline':False]
['text':' Visit the public values if any','line_number':439,'multiline':False]
['text':' Recurse on the children','line_number':444,'multiline':False]
['text':' WalkPrefix is used to walk the tree under a prefix','line_number':458,'multiline':False]
['text':' mask the address for sanity','line_number':465,'multiline':False]
['text':' we can't check longer than the request mask','line_number':467,'multiline':False]
['text':' walk the network bits of the prefix','line_number':469,'multiline':False]
['text':' Look for a child checking the bit position after the mask','line_number':471,'multiline':False]
['text':' check we are in the right branch comparing the suffixes','line_number':476,'multiline':False]
['text':' update the new bit position with the new node mask','line_number':480,'multiline':False]
['text':' WalkPath is used to walk the tree, but only visiting nodes','line_number':487,'multiline':False]
['text':' from the root down to a given IP prefix. Where WalkPrefix walks','line_number':488,'multiline':False]
['text':' all the entries *under* the given prefix, this walks the','line_number':489,'multiline':False]
['text':' entries *above* the given prefix.','line_number':490,'multiline':False]
['text':' mask the address for sanity','line_number':497,'multiline':False]
['text':' we can't check longer than the request mask','line_number':499,'multiline':False]
['text':' walk the network bits of the prefix','line_number':501,'multiline':False]
['text':' Visit the public values if any','line_number':503,'multiline':False]
['text':' Look for a child checking the bit position after the mask','line_number':507,'multiline':False]
['text':' check we are in the right branch comparing the suffixes','line_number':512,'multiline':False]
['text':' update the new bit position with the new node mask','line_number':516,'multiline':False]
['text':' check if this node is a public node and contains a prefix','line_number':519,'multiline':False]
['text':' TopLevelPrefixes is used to return a map with all the Top Level prefixes','line_number':525,'multiline':False]
['text':' from the corresponding IP family and its values.','line_number':526,'multiline':False]
['text':' For example, if the tree contains entries for 10.0.0.0/8, 10.1.0.0/16, and 192.168.0.0/16,','line_number':527,'multiline':False]
['text':' this will return 10.0.0.0/8 and 192.168.0.0/16.','line_number':528,'multiline':False]
['text':' topLevelPrefixes is used to return a map with all the Top Level prefixes and its values','line_number':536,'multiline':False]
['text':' store and continue, only interested on the top level prefixes','line_number':544,'multiline':False]
['text':' GetHostIPPrefixMatches returns the list of prefixes that contain the specified Host IP.','line_number':559,'multiline':False]
['text':' An IP is considered a Host IP if is within the subnet range and is not the network address','line_number':560,'multiline':False]
['text':' or, if IPv4, the broadcast address (RFC 1878).','line_number':561,'multiline':False]
['text':' walk the tree to find all the prefixes containing this IP','line_number':563,'multiline':False]
['text':' assume starts at 0 from the MSB: 0.1.2......31','line_number':575,'multiline':False]
['text':' return 0 or 1','line_number':576,'multiline':False]
['text':' get the byte in the slice','line_number':579,'multiline':False]
['text':' get the offset inside the byte','line_number':584,'multiline':False]
['text':' check if the bit is set','line_number':586,'multiline':False]
['text':' find the common subnet, aka the one with the common prefix','line_number':593,'multiline':False]
['text':' mask off the non leading zeros','line_number':614,'multiline':False]
['text':' prefixContainIP returns true if the given IP is contained with the prefix,','line_number':631,'multiline':False]
['text':' is not the network address and also, if IPv4, is not the broadcast address.','line_number':632,'multiline':False]
['text':' This is required because the Kubernetes allocators reserve these addresses','line_number':633,'multiline':False]
['text':' so IPAddresses can not block deletion of this ranges.','line_number':634,'multiline':False]
['text':' if the IP is the network address is not contained','line_number':636,'multiline':False]
['text':' the broadcast address is not considered contained for IPv4','line_number':640,'multiline':False]
['text':' TODO(aojea) consolidate all these IPs utils','line_number':650,'multiline':False]
['text':' pkg/registry/core/service/ipallocator/ipallocator.go','line_number':651,'multiline':False]
['text':' broadcastAddress returns the broadcast address of the subnet','line_number':652,'multiline':False]
['text':' The broadcast address is obtained by setting all the host bits','line_number':653,'multiline':False]
['text':' in a subnet to 1.','line_number':654,'multiline':False]
['text':' network 192.168.0.0/24 : subnet bits 24 host bits 32 - 24 = 8','line_number':655,'multiline':False]
['text':' broadcast address 192.168.0.255','line_number':656,'multiline':False]
['text':' get all the host bits from the subnet','line_number':660,'multiline':False]
['text':' set all the host bits to 1','line_number':662,'multiline':False]
