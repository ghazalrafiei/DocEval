['text':'
 *
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 ','line_number':1,'multiline':True]
['text':' Identity is the interface for S2A identities.','line_number':34,'multiline':False]
['text':' Name returns the name of the identity.','line_number':36,'multiline':False]
['text':' NewSpiffeID creates a SPIFFE ID from id.','line_number':46,'multiline':False]
['text':' NewHostname creates a hostname from name.','line_number':57,'multiline':False]
['text':' NewUID creates a UID from name.','line_number':68,'multiline':False]
['text':' VerificationModeType specifies the mode that S2A must use to verify the peer','line_number':73,'multiline':False]
['text':' certificate chain.','line_number':74,'multiline':False]
['text':' Three types of verification modes.','line_number':77,'multiline':False]
['text':' ClientOptions contains the client-side options used to establish a secure','line_number':84,'multiline':False]
['text':' channel using the S2A handshaker service.','line_number':85,'multiline':False]
['text':' TargetIdentities contains a list of allowed server identities. One of the','line_number':87,'multiline':False]
['text':' target identities should match the peer identity in the handshake','line_number':88,'multiline':False]
['text':' result; otherwise, the handshake fails.','line_number':89,'multiline':False]
['text':' LocalIdentity is the local identity of the client application. If none is','line_number':91,'multiline':False]
['text':' provided, then the S2A will choose the default identity, if one exists.','line_number':92,'multiline':False]
['text':' S2AAddress is the address of the S2A.','line_number':94,'multiline':False]
['text':' Optional transport credentials.','line_number':96,'multiline':False]
['text':' If set, this will be used for the gRPC connection to the S2A server.','line_number':97,'multiline':False]
['text':' EnsureProcessSessionTickets waits for all session tickets to be sent to','line_number':99,'multiline':False]
['text':' S2A before a process completes.','line_number':100,'multiline':False]
['text':'','line_number':101,'multiline':False]
['text':' This functionality is crucial for processes that complete very soon after','line_number':102,'multiline':False]
['text':' using S2A to establish a TLS connection, but it can be ignored for longer','line_number':103,'multiline':False]
['text':' lived processes.','line_number':104,'multiline':False]
['text':'','line_number':105,'multiline':False]
['text':' Usage example:','line_number':106,'multiline':False]
['text':'   func main() {','line_number':107,'multiline':False]
['text':'     var ensureProcessSessionTickets sync.WaitGroup','line_number':108,'multiline':False]
['text':'     clientOpts := &s2a.ClientOptions{','line_number':109,'multiline':False]
['text':'       EnsureProcessSessionTickets: &ensureProcessSessionTickets,','line_number':110,'multiline':False]
['text':'       // Set other members.','line_number':111,'multiline':False]
['text':'     }','line_number':112,'multiline':False]
['text':'     creds, _ := s2a.NewClientCreds(clientOpts)','line_number':113,'multiline':False]
['text':'     conn, _ := grpc.Dial(serverAddr, grpc.WithTransportCredentials(creds))','line_number':114,'multiline':False]
['text':'     defer conn.Close()','line_number':115,'multiline':False]
['text':'','line_number':116,'multiline':False]
['text':'     // Make RPC call.','line_number':117,'multiline':False]
['text':'','line_number':118,'multiline':False]
['text':'     // The process terminates right after the RPC call ends.','line_number':119,'multiline':False]
['text':'     // ensureProcessSessionTickets can be used to ensure resumption','line_number':120,'multiline':False]
['text':'     // tickets are fully processed. If the process is long-lived, using','line_number':121,'multiline':False]
['text':'     // ensureProcessSessionTickets is not necessary.','line_number':122,'multiline':False]
['text':'     ensureProcessSessionTickets.Wait()','line_number':123,'multiline':False]
['text':'   }','line_number':124,'multiline':False]
['text':' If true, enables the use of legacy S2Av1.','line_number':126,'multiline':False]
['text':' VerificationMode specifies the mode that S2A must use to verify the','line_number':128,'multiline':False]
['text':' peer certificate chain.','line_number':129,'multiline':False]
['text':' Optional fallback after dialing with S2A fails.','line_number':132,'multiline':False]
['text':' Generates an S2AStream interface for talking to the S2A server.','line_number':135,'multiline':False]
['text':' Serialized user specified policy for server authorization.','line_number':138,'multiline':False]
['text':' FallbackOptions prescribes the fallback logic that should be taken if the application fails to connect with S2A.','line_number':142,'multiline':False]
['text':' FallbackClientHandshakeFunc is used to specify fallback behavior when calling s2a.NewClientCreds().','line_number':144,'multiline':False]
['text':' It will be called by ClientHandshake function, after handshake with S2A fails.','line_number':145,'multiline':False]
['text':' s2a.NewClientCreds() ignores the other FallbackDialer field.','line_number':146,'multiline':False]
['text':' FallbackDialer is used to specify fallback behavior when calling s2a.NewS2aDialTLSContextFunc().','line_number':149,'multiline':False]
['text':' It passes in a custom fallback dialer and server address to use after dialing with S2A fails.','line_number':150,'multiline':False]
['text':' s2a.NewS2aDialTLSContextFunc() ignores the other FallbackClientHandshakeFunc field.','line_number':151,'multiline':False]
['text':' FallbackDialer contains a fallback tls.Dialer and a server address to connect to.','line_number':155,'multiline':False]
['text':' Dialer specifies a fallback tls.Dialer.','line_number':157,'multiline':False]
['text':' ServerAddr is used by Dialer to establish fallback connection.','line_number':159,'multiline':False]
['text':' DefaultClientOptions returns the default client options.','line_number':163,'multiline':False]
['text':' ServerOptions contains the server-side options used to establish a secure','line_number':171,'multiline':False]
['text':' channel using the S2A handshaker service.','line_number':172,'multiline':False]
['text':' LocalIdentities is the list of local identities that may be assumed by','line_number':174,'multiline':False]
['text':' the server. If no local identity is specified, then the S2A chooses a','line_number':175,'multiline':False]
['text':' default local identity, if one exists.','line_number':176,'multiline':False]
['text':' S2AAddress is the address of the S2A.','line_number':178,'multiline':False]
['text':' Optional transport credentials.','line_number':180,'multiline':False]
['text':' If set, this will be used for the gRPC connection to the S2A server.','line_number':181,'multiline':False]
['text':' If true, enables the use of legacy S2Av1.','line_number':183,'multiline':False]
['text':' VerificationMode specifies the mode that S2A must use to verify the','line_number':185,'multiline':False]
['text':' peer certificate chain.','line_number':186,'multiline':False]
['text':' Generates an S2AStream interface for talking to the S2A server.','line_number':189,'multiline':False]
['text':' DefaultServerOptions returns the default server options.','line_number':193,'multiline':False]
