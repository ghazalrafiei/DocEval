['text':' Copyright 2022 Google LLC','line_number':1,'multiline':False]
['text':'','line_number':2,'multiline':False]
['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':3,'multiline':False]
['text':' you may not use this file except in compliance with the License.','line_number':4,'multiline':False]
['text':' You may obtain a copy of the License at','line_number':5,'multiline':False]
['text':'','line_number':6,'multiline':False]
['text':'      http://www.apache.org/licenses/LICENSE-2.0','line_number':7,'multiline':False]
['text':'','line_number':8,'multiline':False]
['text':' Unless required by applicable law or agreed to in writing, software','line_number':9,'multiline':False]
['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':10,'multiline':False]
['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':11,'multiline':False]
['text':' See the License for the specific language governing permissions and','line_number':12,'multiline':False]
['text':' limitations under the License.','line_number':13,'multiline':False]
['text':' Macro describes a function signature to match and the MacroExpander to apply.','line_number':23,'multiline':False]
['text':'','line_number':24,'multiline':False]
['text':' Note: when a Macro should apply to multiple overloads (based on arg count) of a given function,','line_number':25,'multiline':False]
['text':' a Macro should be created per arg-count or as a var arg macro.','line_number':26,'multiline':False]
['text':' MacroExpander converts a call and its associated arguments into a new CEL abstract syntax tree.','line_number':29,'multiline':False]
['text':'','line_number':30,'multiline':False]
['text':' If the MacroExpander determines within the implementation that an expansion is not needed it may return','line_number':31,'multiline':False]
['text':' a nil Expr value to indicate a non-match. However, if an expansion is to be performed, but the arguments','line_number':32,'multiline':False]
['text':' are not well-formed, the result of the expansion will be an error.','line_number':33,'multiline':False]
['text':'','line_number':34,'multiline':False]
['text':' The MacroExpander accepts as arguments a MacroExprHelper as well as the arguments used in the function call','line_number':35,'multiline':False]
['text':' and produces as output an Expr ast node.','line_number':36,'multiline':False]
['text':'','line_number':37,'multiline':False]
['text':' Note: when the Macro.IsReceiverStyle() method returns true, the target argument will be nil.','line_number':38,'multiline':False]
['text':' MacroExprHelper exposes helper methods for creating new expressions within a CEL abstract syntax tree.','line_number':41,'multiline':False]
['text':' NewGlobalMacro creates a Macro for a global function with the specified arg count.','line_number':44,'multiline':False]
['text':' NewReceiverMacro creates a Macro for a receiver function matching the specified arg count.','line_number':49,'multiline':False]
['text':' NewGlobalVarArgMacro creates a Macro for a global function with a variable arg count.','line_number':54,'multiline':False]
['text':' NewReceiverVarArgMacro creates a Macro for a receiver function matching a variable arg count.','line_number':59,'multiline':False]
['text':' HasMacroExpander expands the input call arguments into a presence test, e.g. has(<operand>.field)','line_number':64,'multiline':False]
['text':' ExistsMacroExpander expands the input call arguments into a comprehension that returns true if any of the','line_number':69,'multiline':False]
['text':' elements in the range match the predicate expressions:','line_number':70,'multiline':False]
['text':' <iterRange>.exists(<iterVar>, <predicate>)','line_number':71,'multiline':False]
['text':' ExistsOneMacroExpander expands the input call arguments into a comprehension that returns true if exactly','line_number':76,'multiline':False]
['text':' one of the elements in the range match the predicate expressions:','line_number':77,'multiline':False]
['text':' <iterRange>.exists_one(<iterVar>, <predicate>)','line_number':78,'multiline':False]
['text':' MapMacroExpander expands the input call arguments into a comprehension that transforms each element in the','line_number':83,'multiline':False]
['text':' input to produce an output list.','line_number':84,'multiline':False]
['text':'','line_number':85,'multiline':False]
['text':' There are two call patterns supported by map:','line_number':86,'multiline':False]
['text':'','line_number':87,'multiline':False]
['text':'	<iterRange>.map(<iterVar>, <transform>)','line_number':88,'multiline':False]
['text':'	<iterRange>.map(<iterVar>, <predicate>, <transform>)','line_number':89,'multiline':False]
['text':'','line_number':90,'multiline':False]
['text':' In the second form only iterVar values which return true when provided to the predicate expression','line_number':91,'multiline':False]
['text':' are transformed.','line_number':92,'multiline':False]
['text':' FilterMacroExpander expands the input call arguments into a comprehension which produces a list which contains','line_number':97,'multiline':False]
['text':' only elements which match the provided predicate expression:','line_number':98,'multiline':False]
['text':' <iterRange>.filter(<iterVar>, <predicate>)','line_number':99,'multiline':False]
['text':' Aliases to each macro in the CEL standard environment.','line_number':105,'multiline':False]
['text':' Note: reassigning these macro variables may result in undefined behavior.','line_number':106,'multiline':False]
['text':' HasMacro expands "has(m.f)" which tests the presence of a field, avoiding the need to','line_number':108,'multiline':False]
['text':' specify the field as a string.','line_number':109,'multiline':False]
['text':' AllMacro expands "range.all(var, predicate)" into a comprehension which ensures that all','line_number':112,'multiline':False]
['text':' elements in the range satisfy the predicate.','line_number':113,'multiline':False]
['text':' ExistsMacro expands "range.exists(var, predicate)" into a comprehension which ensures that','line_number':116,'multiline':False]
['text':' some element in the range satisfies the predicate.','line_number':117,'multiline':False]
['text':' ExistsOneMacro expands "range.exists_one(var, predicate)", which is true if for exactly one','line_number':120,'multiline':False]
['text':' element in range the predicate holds.','line_number':121,'multiline':False]
['text':' MapMacro expands "range.map(var, function)" into a comprehension which applies the function','line_number':124,'multiline':False]
['text':' to each element in the range to produce a new list.','line_number':125,'multiline':False]
['text':' MapFilterMacro expands "range.map(var, predicate, function)" into a comprehension which','line_number':128,'multiline':False]
['text':' first filters the elements in the range by the predicate, then applies the transform function','line_number':129,'multiline':False]
['text':' to produce a new list.','line_number':130,'multiline':False]
['text':' FilterMacro expands "range.filter(var, predicate)" into a comprehension which filters','line_number':133,'multiline':False]
['text':' elements in the range, producing a new list from the elements that satisfy the predicate.','line_number':134,'multiline':False]
['text':' StandardMacros provides an alias to all the CEL macros defined in the standard environment.','line_number':137,'multiline':False]
['text':' NoMacros provides an alias to an empty list of macros','line_number':142,'multiline':False]
