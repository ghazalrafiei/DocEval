['text':' Copyright 2018 Google LLC','line_number':1,'multiline':False]
['text':'','line_number':2,'multiline':False]
['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':3,'multiline':False]
['text':' you may not use this file except in compliance with the License.','line_number':4,'multiline':False]
['text':' You may obtain a copy of the License at','line_number':5,'multiline':False]
['text':'','line_number':6,'multiline':False]
['text':'      http://www.apache.org/licenses/LICENSE-2.0','line_number':7,'multiline':False]
['text':'','line_number':8,'multiline':False]
['text':' Unless required by applicable law or agreed to in writing, software','line_number':9,'multiline':False]
['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':10,'multiline':False]
['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':11,'multiline':False]
['text':' See the License for the specific language governing permissions and','line_number':12,'multiline':False]
['text':' limitations under the License.','line_number':13,'multiline':False]
['text':' NewGlobalMacro creates a Macro for a global function with the specified arg count.','line_number':26,'multiline':False]
['text':' NewReceiverMacro creates a Macro for a receiver function matching the specified arg count.','line_number':34,'multiline':False]
['text':' NewGlobalVarArgMacro creates a Macro for a global function with a variable arg count.','line_number':43,'multiline':False]
['text':' NewReceiverVarArgMacro creates a Macro for a receiver function matching a variable arg count.','line_number':51,'multiline':False]
['text':' Macro interface for describing the function signature to match and the MacroExpander to apply.','line_number':60,'multiline':False]
['text':'','line_number':61,'multiline':False]
['text':' Note: when a Macro should apply to multiple overloads (based on arg count) of a given function,','line_number':62,'multiline':False]
['text':' a Macro should be created per arg-count.','line_number':63,'multiline':False]
['text':' Function name to match.','line_number':65,'multiline':False]
['text':' ArgCount for the function call.','line_number':68,'multiline':False]
['text':'','line_number':69,'multiline':False]
['text':' When the macro is a var-arg style macro, the return value will be zero, but the MacroKey','line_number':70,'multiline':False]
['text':' will contain a `*` where the arg count would have been.','line_number':71,'multiline':False]
['text':' IsReceiverStyle returns true if the macro matches a receiver style call.','line_number':74,'multiline':False]
['text':' MacroKey returns the macro signatures accepted by this macro.','line_number':77,'multiline':False]
['text':'','line_number':78,'multiline':False]
['text':' Format: `<function>:<arg-count>:<is-receiver>`.','line_number':79,'multiline':False]
['text':'','line_number':80,'multiline':False]
['text':' When the macros is a var-arg style macro, the `arg-count` value is represented as a `*`.','line_number':81,'multiline':False]
['text':' Expander returns the MacroExpander to apply when the macro key matches the parsed call','line_number':84,'multiline':False]
['text':' signature.','line_number':85,'multiline':False]
['text':' Macro type which declares the function name and arg count expected for the','line_number':89,'multiline':False]
['text':' macro, as well as a macro expansion function.','line_number':90,'multiline':False]
['text':' Function returns the macro's function name (i.e. the function whose syntax it mimics).','line_number':99,'multiline':False]
['text':' ArgCount returns the number of arguments the macro expects.','line_number':104,'multiline':False]
['text':' IsReceiverStyle returns whether the macro is receiver style.','line_number':109,'multiline':False]
['text':' Expander implements the Macro interface method.','line_number':114,'multiline':False]
['text':' MacroKey implements the Macro interface method.','line_number':119,'multiline':False]
['text':' MacroExpander converts a call and its associated arguments into a new CEL abstract syntax tree.','line_number':135,'multiline':False]
['text':'','line_number':136,'multiline':False]
['text':' If the MacroExpander determines within the implementation that an expansion is not needed it may return','line_number':137,'multiline':False]
['text':' a nil Expr value to indicate a non-match. However, if an expansion is to be performed, but the arguments','line_number':138,'multiline':False]
['text':' are not well-formed, the result of the expansion will be an error.','line_number':139,'multiline':False]
['text':'','line_number':140,'multiline':False]
['text':' The MacroExpander accepts as arguments a MacroExprHelper as well as the arguments used in the function call','line_number':141,'multiline':False]
['text':' and produces as output an Expr ast node.','line_number':142,'multiline':False]
['text':'','line_number':143,'multiline':False]
['text':' Note: when the Macro.IsReceiverStyle() method returns true, the target argument will be nil.','line_number':144,'multiline':False]
['text':' ExprHelper assists with the manipulation of proto-based Expr values in a manner which is','line_number':149,'multiline':False]
['text':' consistent with the source position and expression id generation code leveraged by both','line_number':150,'multiline':False]
['text':' the parser and type-checker.','line_number':151,'multiline':False]
['text':' Copy the input expression with a brand new set of identifiers.','line_number':153,'multiline':False]
['text':' LiteralBool creates an Expr value for a bool literal.','line_number':156,'multiline':False]
['text':' LiteralBytes creates an Expr value for a byte literal.','line_number':159,'multiline':False]
['text':' LiteralDouble creates an Expr value for double literal.','line_number':162,'multiline':False]
['text':' LiteralInt creates an Expr value for an int literal.','line_number':165,'multiline':False]
['text':' LiteralString creates am Expr value for a string literal.','line_number':168,'multiline':False]
['text':' LiteralUint creates an Expr value for a uint literal.','line_number':171,'multiline':False]
['text':' NewList creates a CreateList instruction where the list is comprised of the optional set','line_number':174,'multiline':False]
['text':' of elements provided as arguments.','line_number':175,'multiline':False]
['text':' NewMap creates a CreateStruct instruction for a map where the map is comprised of the','line_number':178,'multiline':False]
['text':' optional set of key, value entries.','line_number':179,'multiline':False]
['text':' NewMapEntry creates a Map Entry for the key, value pair.','line_number':182,'multiline':False]
['text':' NewObject creates a CreateStruct instruction for an object with a given type name and','line_number':185,'multiline':False]
['text':' optional set of field initializers.','line_number':186,'multiline':False]
['text':' NewObjectFieldInit creates a new Object field initializer from the field name and value.','line_number':189,'multiline':False]
['text':' Fold creates a fold comprehension instruction.','line_number':192,'multiline':False]
['text':'','line_number':193,'multiline':False]
['text':' - iterVar is the iteration variable name.','line_number':194,'multiline':False]
['text':' - iterRange represents the expression that resolves to a list or map where the elements or','line_number':195,'multiline':False]
['text':'   keys (respectively) will be iterated over.','line_number':196,'multiline':False]
['text':' - accuVar is the accumulation variable name, typically parser.AccumulatorName.','line_number':197,'multiline':False]
['text':' - accuInit is the initial expression whose value will be set for the accuVar prior to','line_number':198,'multiline':False]
['text':'   folding.','line_number':199,'multiline':False]
['text':' - condition is the expression to test to determine whether to continue folding.','line_number':200,'multiline':False]
['text':' - step is the expression to evaluation at the conclusion of a single fold iteration.','line_number':201,'multiline':False]
['text':' - result is the computation to evaluate at the conclusion of the fold.','line_number':202,'multiline':False]
['text':'','line_number':203,'multiline':False]
['text':' The accuVar should not shadow variable names that you would like to reference within the','line_number':204,'multiline':False]
['text':' environment in the step and condition expressions. Presently, the name __result__ is commonly','line_number':205,'multiline':False]
['text':' used by built-in macros but this may change in the future.','line_number':206,'multiline':False]
['text':' Ident creates an identifier Expr value.','line_number':215,'multiline':False]
['text':' AccuIdent returns an accumulator identifier for use with comprehension results.','line_number':218,'multiline':False]
['text':' GlobalCall creates a function call Expr value for a global (free) function.','line_number':221,'multiline':False]
['text':' ReceiverCall creates a function call Expr value for a receiver-style function.','line_number':224,'multiline':False]
['text':' PresenceTest creates a Select TestOnly Expr value for modelling has() semantics.','line_number':227,'multiline':False]
['text':' Select create a field traversal Expr value.','line_number':230,'multiline':False]
['text':' OffsetLocation returns the Location of the expression identifier.','line_number':233,'multiline':False]
['text':' NewError associates an error message with a given expression id.','line_number':236,'multiline':False]
['text':' HasMacro expands "has(m.f)" which tests the presence of a field, avoiding the need to','line_number':241,'multiline':False]
['text':' specify the field as a string.','line_number':242,'multiline':False]
['text':' AllMacro expands "range.all(var, predicate)" into a comprehension which ensures that all','line_number':245,'multiline':False]
['text':' elements in the range satisfy the predicate.','line_number':246,'multiline':False]
['text':' ExistsMacro expands "range.exists(var, predicate)" into a comprehension which ensures that','line_number':249,'multiline':False]
['text':' some element in the range satisfies the predicate.','line_number':250,'multiline':False]
['text':' ExistsOneMacro expands "range.exists_one(var, predicate)", which is true if for exactly one','line_number':253,'multiline':False]
['text':' element in range the predicate holds.','line_number':254,'multiline':False]
['text':' MapMacro expands "range.map(var, function)" into a comprehension which applies the function','line_number':257,'multiline':False]
['text':' to each element in the range to produce a new list.','line_number':258,'multiline':False]
['text':' MapFilterMacro expands "range.map(var, predicate, function)" into a comprehension which','line_number':261,'multiline':False]
['text':' first filters the elements in the range by the predicate, then applies the transform function','line_number':262,'multiline':False]
['text':' to produce a new list.','line_number':263,'multiline':False]
['text':' FilterMacro expands "range.filter(var, predicate)" into a comprehension which filters','line_number':266,'multiline':False]
['text':' elements in the range, producing a new list from the elements that satisfy the predicate.','line_number':267,'multiline':False]
['text':' AllMacros includes the list of all spec-supported macros.','line_number':270,'multiline':False]
['text':' NoMacros list.','line_number':281,'multiline':False]
['text':' AccumulatorName is the traditional variable name assigned to the fold accumulator variable.','line_number':285,'multiline':False]
['text':' MakeAll expands the input call arguments into a comprehension that returns true if all of the','line_number':296,'multiline':False]
['text':' elements in the range match the predicate expressions:','line_number':297,'multiline':False]
['text':' <iterRange>.all(<iterVar>, <predicate>)','line_number':298,'multiline':False]
['text':' MakeExists expands the input call arguments into a comprehension that returns true if any of the','line_number':303,'multiline':False]
['text':' elements in the range match the predicate expressions:','line_number':304,'multiline':False]
['text':' <iterRange>.exists(<iterVar>, <predicate>)','line_number':305,'multiline':False]
['text':' MakeExistsOne expands the input call arguments into a comprehension that returns true if exactly','line_number':310,'multiline':False]
['text':' one of the elements in the range match the predicate expressions:','line_number':311,'multiline':False]
['text':' <iterRange>.exists_one(<iterVar>, <predicate>)','line_number':312,'multiline':False]
['text':' MakeMap expands the input call arguments into a comprehension that transforms each element in the','line_number':317,'multiline':False]
['text':' input to produce an output list.','line_number':318,'multiline':False]
['text':'','line_number':319,'multiline':False]
['text':' There are two call patterns supported by map:','line_number':320,'multiline':False]
['text':'','line_number':321,'multiline':False]
['text':'	<iterRange>.map(<iterVar>, <transform>)','line_number':322,'multiline':False]
['text':'	<iterRange>.map(<iterVar>, <predicate>, <transform>)','line_number':323,'multiline':False]
['text':'','line_number':324,'multiline':False]
['text':' In the second form only iterVar values which return true when provided to the predicate expression','line_number':325,'multiline':False]
['text':' are transformed.','line_number':326,'multiline':False]
['text':' MakeFilter expands the input call arguments into a comprehension which produces a list which contains','line_number':355,'multiline':False]
['text':' only elements which match the provided predicate expression:','line_number':356,'multiline':False]
['text':' <iterRange>.filter(<iterVar>, <predicate>)','line_number':357,'multiline':False]
['text':' MakeHas expands the input call arguments into a presence test, e.g. has(<operand>.field)','line_number':373,'multiline':False]
