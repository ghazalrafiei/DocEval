['text':' Package errors provides errors that have stack-traces.','line_number':1,'multiline':False]
['text':'','line_number':2,'multiline':False]
['text':' This is particularly useful when you want to understand the','line_number':3,'multiline':False]
['text':' state of execution when an error was returned unexpectedly.','line_number':4,'multiline':False]
['text':'','line_number':5,'multiline':False]
['text':' It provides the type *Error which implements the standard','line_number':6,'multiline':False]
['text':' golang error interface, so you can use this library interchangably','line_number':7,'multiline':False]
['text':' with code that is expecting a normal error return.','line_number':8,'multiline':False]
['text':'','line_number':9,'multiline':False]
['text':' For example:','line_number':10,'multiline':False]
['text':'','line_number':11,'multiline':False]
['text':'  package crashy','line_number':12,'multiline':False]
['text':'','line_number':13,'multiline':False]
['text':'  import "github.com/go-errors/errors"','line_number':14,'multiline':False]
['text':'','line_number':15,'multiline':False]
['text':'  var Crashed = errors.Errorf("oh dear")','line_number':16,'multiline':False]
['text':'','line_number':17,'multiline':False]
['text':'  func Crash() error {','line_number':18,'multiline':False]
['text':'      return errors.New(Crashed)','line_number':19,'multiline':False]
['text':'  }','line_number':20,'multiline':False]
['text':'','line_number':21,'multiline':False]
['text':' This can be called as follows:','line_number':22,'multiline':False]
['text':'','line_number':23,'multiline':False]
['text':'  package main','line_number':24,'multiline':False]
['text':'','line_number':25,'multiline':False]
['text':'  import (','line_number':26,'multiline':False]
['text':'      "crashy"','line_number':27,'multiline':False]
['text':'      "fmt"','line_number':28,'multiline':False]
['text':'      "github.com/go-errors/errors"','line_number':29,'multiline':False]
['text':'  )','line_number':30,'multiline':False]
['text':'','line_number':31,'multiline':False]
['text':'  func main() {','line_number':32,'multiline':False]
['text':'      err := crashy.Crash()','line_number':33,'multiline':False]
['text':'      if err != nil {','line_number':34,'multiline':False]
['text':'          if errors.Is(err, crashy.Crashed) {','line_number':35,'multiline':False]
['text':'              fmt.Println(err.(*errors.Error).ErrorStack())','line_number':36,'multiline':False]
['text':'          } else {','line_number':37,'multiline':False]
['text':'              panic(err)','line_number':38,'multiline':False]
['text':'          }','line_number':39,'multiline':False]
['text':'      }','line_number':40,'multiline':False]
['text':'  }','line_number':41,'multiline':False]
['text':'','line_number':42,'multiline':False]
['text':' This package was original written to allow reporting to Bugsnag,','line_number':43,'multiline':False]
['text':' but after I found similar packages by Facebook and Dropbox, it','line_number':44,'multiline':False]
['text':' was moved to one canonical location so everyone can benefit.','line_number':45,'multiline':False]
['text':' The maximum number of stackframes on any error.','line_number':55,'multiline':False]
['text':' Error is an error with an attached stacktrace. It can be used','line_number':58,'multiline':False]
['text':' wherever the builtin error interface is expected.','line_number':59,'multiline':False]
['text':' New makes an Error from the given value. If that value is already an','line_number':67,'multiline':False]
['text':' error then it will be used directly, if not, it will be passed to','line_number':68,'multiline':False]
['text':' fmt.Errorf("%v"). The stacktrace will point to the line of code that','line_number':69,'multiline':False]
['text':' called New.','line_number':70,'multiline':False]
['text':' Wrap makes an Error from the given value. If that value is already an','line_number':89,'multiline':False]
['text':' error then it will be used directly, if not, it will be passed to','line_number':90,'multiline':False]
['text':' fmt.Errorf("%v"). The skip parameter indicates how far up the stack','line_number':91,'multiline':False]
['text':' to start the stacktrace. 0 is from the current call, 1 from its caller, etc.','line_number':92,'multiline':False]
['text':' WrapPrefix makes an Error from the given value. If that value is already an','line_number':117,'multiline':False]
['text':' error then it will be used directly, if not, it will be passed to','line_number':118,'multiline':False]
['text':' fmt.Errorf("%v"). The prefix parameter is used to add a prefix to the','line_number':119,'multiline':False]
['text':' error message when calling Error(). The skip parameter indicates how far','line_number':120,'multiline':False]
['text':' up the stack to start the stacktrace. 0 is from the current call,','line_number':121,'multiline':False]
['text':' 1 from its caller, etc.','line_number':122,'multiline':False]
['text':' Errorf creates a new error with the given message. You can use it','line_number':142,'multiline':False]
['text':' as a drop-in replacement for fmt.Errorf() to provide descriptive','line_number':143,'multiline':False]
['text':' errors in return values.','line_number':144,'multiline':False]
['text':' Error returns the underlying error's message.','line_number':149,'multiline':False]
['text':' Stack returns the callstack formatted the same way that go does','line_number':160,'multiline':False]
['text':' in runtime/debug.Stack()','line_number':161,'multiline':False]
['text':' Callers satisfies the bugsnag ErrorWithCallerS() interface','line_number':172,'multiline':False]
['text':' so that the stack can be read out.','line_number':173,'multiline':False]
['text':' ErrorStack returns a string that contains both the','line_number':178,'multiline':False]
['text':' error message and the callstack.','line_number':179,'multiline':False]
['text':' StackFrames returns an array of frames containing information about the','line_number':184,'multiline':False]
['text':' stack.','line_number':185,'multiline':False]
['text':' TypeName returns the type this error. e.g. *errors.stringError.','line_number':198,'multiline':False]
['text':' Return the wrapped error (implements api for As function).','line_number':206,'multiline':False]
