['text':' Internal functions for libseccomp Go bindings','line_number':1,'multiline':False]
['text':' No exported functions','line_number':2,'multiline':False]
['text':' Unexported C wrapping code - provides the C-Golang interface','line_number':12,'multiline':False]
['text':' Get the seccomp header in scope','line_number':13,'multiline':False]
['text':' Need stdlib.h for free() on cstrings','line_number':14,'multiline':False]
['text':' To compile libseccomp-golang against a specific version of libseccomp:','line_number':16,'multiline':False]
['text':' cd ../libseccomp && mkdir -p prefix','line_number':17,'multiline':False]
['text':' ./configure --prefix=$PWD/prefix && make && make install','line_number':18,'multiline':False]
['text':' cd ../libseccomp-golang','line_number':19,'multiline':False]
['text':' PKG_CONFIG_PATH=$PWD/../libseccomp/prefix/lib/pkgconfig/ make','line_number':20,'multiline':False]
['text':' LD_PRELOAD=$PWD/../libseccomp/prefix/lib/libseccomp.so.2.5.0 PKG_CONFIG_PATH=$PWD/../libseccomp/prefix/lib/pkgconfig/ make test','line_number':21,'multiline':False]
['text':' #cgo pkg-config: libseccomp','line_number':23,'multiline':False]
['text':'
#include <errno.h>
#include <stdlib.h>
#include <seccomp.h>

#if (SCMP_VER_MAJOR < 2) || \
    (SCMP_VER_MAJOR == 2 && SCMP_VER_MINOR < 3) || \
    (SCMP_VER_MAJOR == 2 && SCMP_VER_MINOR == 3 && SCMP_VER_MICRO < 1)
#error This package requires libseccomp >= v2.3.1
#endif

#define ARCH_BAD ~0

const uint32_t C_ARCH_BAD = ARCH_BAD;

#ifndef SCMP_ARCH_PPC
#define SCMP_ARCH_PPC ARCH_BAD
#endif

#ifndef SCMP_ARCH_PPC64
#define SCMP_ARCH_PPC64 ARCH_BAD
#endif

#ifndef SCMP_ARCH_PPC64LE
#define SCMP_ARCH_PPC64LE ARCH_BAD
#endif

#ifndef SCMP_ARCH_S390
#define SCMP_ARCH_S390 ARCH_BAD
#endif

#ifndef SCMP_ARCH_S390X
#define SCMP_ARCH_S390X ARCH_BAD
#endif

#ifndef SCMP_ARCH_PARISC
#define SCMP_ARCH_PARISC ARCH_BAD
#endif

#ifndef SCMP_ARCH_PARISC64
#define SCMP_ARCH_PARISC64 ARCH_BAD
#endif

#ifndef SCMP_ARCH_RISCV64
#define SCMP_ARCH_RISCV64 ARCH_BAD
#endif

const uint32_t C_ARCH_NATIVE       = SCMP_ARCH_NATIVE;
const uint32_t C_ARCH_X86          = SCMP_ARCH_X86;
const uint32_t C_ARCH_X86_64       = SCMP_ARCH_X86_64;
const uint32_t C_ARCH_X32          = SCMP_ARCH_X32;
const uint32_t C_ARCH_ARM          = SCMP_ARCH_ARM;
const uint32_t C_ARCH_AARCH64      = SCMP_ARCH_AARCH64;
const uint32_t C_ARCH_MIPS         = SCMP_ARCH_MIPS;
const uint32_t C_ARCH_MIPS64       = SCMP_ARCH_MIPS64;
const uint32_t C_ARCH_MIPS64N32    = SCMP_ARCH_MIPS64N32;
const uint32_t C_ARCH_MIPSEL       = SCMP_ARCH_MIPSEL;
const uint32_t C_ARCH_MIPSEL64     = SCMP_ARCH_MIPSEL64;
const uint32_t C_ARCH_MIPSEL64N32  = SCMP_ARCH_MIPSEL64N32;
const uint32_t C_ARCH_PPC          = SCMP_ARCH_PPC;
const uint32_t C_ARCH_PPC64        = SCMP_ARCH_PPC64;
const uint32_t C_ARCH_PPC64LE      = SCMP_ARCH_PPC64LE;
const uint32_t C_ARCH_S390         = SCMP_ARCH_S390;
const uint32_t C_ARCH_S390X        = SCMP_ARCH_S390X;
const uint32_t C_ARCH_PARISC       = SCMP_ARCH_PARISC;
const uint32_t C_ARCH_PARISC64     = SCMP_ARCH_PARISC64;
const uint32_t C_ARCH_RISCV64      = SCMP_ARCH_RISCV64;

#ifndef SCMP_ACT_LOG
#define SCMP_ACT_LOG 0x7ffc0000U
#endif

#ifndef SCMP_ACT_KILL_PROCESS
#define SCMP_ACT_KILL_PROCESS 0x80000000U
#endif

#ifndef SCMP_ACT_KILL_THREAD
#define SCMP_ACT_KILL_THREAD	0x00000000U
#endif

#ifndef SCMP_ACT_NOTIFY
#define SCMP_ACT_NOTIFY 0x7fc00000U
#endif

const uint32_t C_ACT_KILL          = SCMP_ACT_KILL;
const uint32_t C_ACT_KILL_PROCESS  = SCMP_ACT_KILL_PROCESS;
const uint32_t C_ACT_KILL_THREAD   = SCMP_ACT_KILL_THREAD;
const uint32_t C_ACT_TRAP          = SCMP_ACT_TRAP;
const uint32_t C_ACT_ERRNO         = SCMP_ACT_ERRNO(0);
const uint32_t C_ACT_TRACE         = SCMP_ACT_TRACE(0);
const uint32_t C_ACT_LOG           = SCMP_ACT_LOG;
const uint32_t C_ACT_ALLOW         = SCMP_ACT_ALLOW;
const uint32_t C_ACT_NOTIFY        = SCMP_ACT_NOTIFY;

// The libseccomp SCMP_FLTATR_CTL_LOG member of the scmp_filter_attr enum was
// added in v2.4.0
#if SCMP_VER_MAJOR == 2 && SCMP_VER_MINOR < 4
#define SCMP_FLTATR_CTL_LOG _SCMP_FLTATR_MIN
#endif

// The following SCMP_FLTATR_*  were added in libseccomp v2.5.0.
#if SCMP_VER_MAJOR == 2 && SCMP_VER_MINOR < 5
#define SCMP_FLTATR_CTL_SSB      _SCMP_FLTATR_MIN
#define SCMP_FLTATR_CTL_OPTIMIZE _SCMP_FLTATR_MIN
#define SCMP_FLTATR_API_SYSRAWRC _SCMP_FLTATR_MIN
#endif

const uint32_t C_ATTRIBUTE_DEFAULT  = (uint32_t)SCMP_FLTATR_ACT_DEFAULT;
const uint32_t C_ATTRIBUTE_BADARCH  = (uint32_t)SCMP_FLTATR_ACT_BADARCH;
const uint32_t C_ATTRIBUTE_NNP      = (uint32_t)SCMP_FLTATR_CTL_NNP;
const uint32_t C_ATTRIBUTE_TSYNC    = (uint32_t)SCMP_FLTATR_CTL_TSYNC;
const uint32_t C_ATTRIBUTE_LOG      = (uint32_t)SCMP_FLTATR_CTL_LOG;
const uint32_t C_ATTRIBUTE_SSB      = (uint32_t)SCMP_FLTATR_CTL_SSB;
const uint32_t C_ATTRIBUTE_OPTIMIZE = (uint32_t)SCMP_FLTATR_CTL_OPTIMIZE;
const uint32_t C_ATTRIBUTE_SYSRAWRC = (uint32_t)SCMP_FLTATR_API_SYSRAWRC;

const int      C_CMP_NE            = (int)SCMP_CMP_NE;
const int      C_CMP_LT            = (int)SCMP_CMP_LT;
const int      C_CMP_LE            = (int)SCMP_CMP_LE;
const int      C_CMP_EQ            = (int)SCMP_CMP_EQ;
const int      C_CMP_GE            = (int)SCMP_CMP_GE;
const int      C_CMP_GT            = (int)SCMP_CMP_GT;
const int      C_CMP_MASKED_EQ     = (int)SCMP_CMP_MASKED_EQ;

const int      C_VERSION_MAJOR     = SCMP_VER_MAJOR;
const int      C_VERSION_MINOR     = SCMP_VER_MINOR;
const int      C_VERSION_MICRO     = SCMP_VER_MICRO;

#if SCMP_VER_MAJOR == 2 && SCMP_VER_MINOR >= 3
unsigned int get_major_version()
{
        return seccomp_version()->major;
}

unsigned int get_minor_version()
{
        return seccomp_version()->minor;
}

unsigned int get_micro_version()
{
        return seccomp_version()->micro;
}
#else
unsigned int get_major_version()
{
        return (unsigned int)C_VERSION_MAJOR;
}

unsigned int get_minor_version()
{
        return (unsigned int)C_VERSION_MINOR;
}

unsigned int get_micro_version()
{
        return (unsigned int)C_VERSION_MICRO;
}
#endif

// The libseccomp API level functions were added in v2.4.0
#if SCMP_VER_MAJOR == 2 && SCMP_VER_MINOR < 4
const unsigned int seccomp_api_get(void)
{
	// libseccomp-golang requires libseccomp v2.2.0, at a minimum, which
	// supported API level 2. However, the kernel may not support API level
	// 2 constructs which are the seccomp() system call and the TSYNC
	// filter flag. Return the "reserved" value of 0 here to indicate that
	// proper API level support is not available in libseccomp.
	return 0;
}

int seccomp_api_set(unsigned int level)
{
	return -EOPNOTSUPP;
}
#endif

typedef struct scmp_arg_cmp* scmp_cast_t;

void* make_arg_cmp_array(unsigned int length)
{
        return calloc(length, sizeof(struct scmp_arg_cmp));
}

// Wrapper to add an scmp_arg_cmp struct to an existing arg_cmp array
void add_struct_arg_cmp(
                        struct scmp_arg_cmp* arr,
                        unsigned int pos,
                        unsigned int arg,
                        int compare,
                        uint64_t a,
                        uint64_t b
                       )
{
        arr[pos].arg = arg;
        arr[pos].op = compare;
        arr[pos].datum_a = a;
        arr[pos].datum_b = b;

        return;
}

// The seccomp notify API functions were added in v2.5.0
#if SCMP_VER_MAJOR == 2 && SCMP_VER_MINOR < 5

struct seccomp_data {
	int nr;
	__u32 arch;
	__u64 instruction_pointer;
	__u64 args[6];
};

struct seccomp_notif {
	__u64 id;
	__u32 pid;
	__u32 flags;
	struct seccomp_data data;
};

struct seccomp_notif_resp {
	__u64 id;
	__s64 val;
	__s32 error;
	__u32 flags;
};

int seccomp_notify_alloc(struct seccomp_notif **req, struct seccomp_notif_resp **resp) {
	return -EOPNOTSUPP;
}
int seccomp_notify_fd(const scmp_filter_ctx ctx) {
	return -EOPNOTSUPP;
}
void seccomp_notify_free(struct seccomp_notif *req, struct seccomp_notif_resp *resp) {
}
int seccomp_notify_id_valid(int fd, uint64_t id) {
	return -EOPNOTSUPP;
}
int seccomp_notify_receive(int fd, struct seccomp_notif *req) {
	return -EOPNOTSUPP;
}
int seccomp_notify_respond(int fd, struct seccomp_notif_resp *resp) {
	return -EOPNOTSUPP;
}

#endif
','line_number':24,'multiline':True]
['text':' Nonexported types','line_number':273,'multiline':False]
['text':' Nonexported constants','line_number':276,'multiline':False]
['text':' An error return from certain libseccomp functions','line_number':290,'multiline':False]
['text':' Comparison boundaries to check for architecture validity','line_number':292,'multiline':False]
['text':' Comparison boundaries to check for action validity','line_number':295,'multiline':False]
['text':' Comparison boundaries to check for comparison operator validity','line_number':298,'multiline':False]
['text':' errBadFilter is thrown on bad filter context.','line_number':304,'multiline':False]
['text':' Constants representing library major, minor, and micro versions','line_number':307,'multiline':False]
['text':' Nonexported functions','line_number':313,'multiline':False]
['text':' checkVersion returns an error if the libseccomp version being used','line_number':315,'multiline':False]
['text':' is less than the one specified by major, minor, and micro arguments.','line_number':316,'multiline':False]
['text':' Argument op is an arbitrary non-empty operation description, which','line_number':317,'multiline':False]
['text':' is used as a part of the error message returned.','line_number':318,'multiline':False]
['text':'','line_number':319,'multiline':False]
['text':' Most users should use checkAPI instead.','line_number':320,'multiline':False]
['text':' Get the API level','line_number':339,'multiline':False]
['text':' Set the API level','line_number':349,'multiline':False]
['text':' Filter helpers','line_number':363,'multiline':False]
['text':' Filter finalizer - ensure that kernel context for filters is freed','line_number':365,'multiline':False]
['text':' Get a raw filter attribute','line_number':374,'multiline':False]
['text':' Set a raw filter attribute','line_number':393,'multiline':False]
['text':' DOES NOT LOCK OR CHECK VALIDITY','line_number':410,'multiline':False]
['text':' Assumes caller has already done this','line_number':411,'multiline':False]
['text':' Wrapper for seccomp_rule_add_... functions','line_number':412,'multiline':False]
['text':' libseccomp >= v2.5.0 returns EACCES, older versions return EPERM.','line_number':429,'multiline':False]
['text':' TODO: remove EPERM once libseccomp < v2.5.0 is not supported.','line_number':430,'multiline':False]
['text':' Generic add function for filter rules','line_number':443,'multiline':False]
['text':' Generic Helpers','line_number':477,'multiline':False]
['text':' Helper - Sanitize Arch token input','line_number':479,'multiline':False]
['text':' Only use with sanitized arches, no error handling','line_number':560,'multiline':False]
['text':' Only use with sanitized ops, no error handling','line_number':608,'multiline':False]
['text':' Only use with sanitized actions, no error handling','line_number':654,'multiline':False]
['text':' Internal only, assumes safe attribute','line_number':678,'multiline':False]
['text':' kernel requires a negated value','line_number':737,'multiline':False]
['text':' checkAPI checks that both the API level and the seccomp version is equal to','line_number':741,'multiline':False]
['text':' or greater than the specified minLevel and major, minor, micro,','line_number':742,'multiline':False]
['text':' respectively, and returns an error otherwise. Argument op is an arbitrary','line_number':743,'multiline':False]
['text':' non-empty operation description, used as a part of the error message','line_number':744,'multiline':False]
['text':' returned.','line_number':745,'multiline':False]
['text':' Ignore error from getAPI, as it returns level == 0 in case of error.','line_number':747,'multiline':False]
['text':' Userspace Notification API','line_number':762,'multiline':False]
['text':' Calls to C.seccomp_notify* hidden from seccomp.go','line_number':763,'multiline':False]
['text':' we only use the request here; the response is unused','line_number':793,'multiline':False]
['text':' we only use the response here; the request is discarded','line_number':830,'multiline':False]
