['text':' Copyright 2016 The Go Authors. All rights reserved.','line_number':1,'multiline':False]
['text':' Use of this source code is governed by a BSD-style','line_number':2,'multiline':False]
['text':' license that can be found in the LICENSE file.','line_number':3,'multiline':False]
['text':' This file was originally from https://golang.org/cl/24717 by Vlad Krasnov of CloudFlare.','line_number':5,'multiline':False]
['text':'go:build gc && !purego','line_number':7,'multiline':False]
['text':' +build gc,!purego','line_number':8,'multiline':False]
['text':' General register allocation','line_number':11,'multiline':False]
['text':' free to reuse, after we hash the additional data','line_number':15,'multiline':False]
['text':' free to reuse, when we copy the key to stack','line_number':16,'multiline':False]
['text':' general iterator','line_number':17,'multiline':False]
['text':' general iterator','line_number':18,'multiline':False]
['text':' Register and stack allocation for the SSE code','line_number':26,'multiline':False]
['text':' Register and stack allocation for the AVX2 code','line_number':56,'multiline':False]
['text':' 256 bytes on stack','line_number':64,'multiline':False]
['text':' ChaCha20 constants','line_number':85,'multiline':False]
['text':' <<< 16 with PSHUFB','line_number':94,'multiline':False]
['text':' <<< 8 with PSHUFB','line_number':99,'multiline':False]
['text':' Poly1305 key clamp','line_number':114,'multiline':False]
['text':' To load/store the last < 16 bytes in a buffer','line_number':122,'multiline':False]
['text':' No PALIGNR in Go ASM yet (but VPALIGNR is present).','line_number':162,'multiline':False]
['text':' PALIGNR $4, X3, X3','line_number':163,'multiline':False]
['text':' PALIGNR $4, X4, X4','line_number':164,'multiline':False]
['text':' PALIGNR $4, X5, X5','line_number':165,'multiline':False]
['text':' PALIGNR $4, X13, X13','line_number':166,'multiline':False]
['text':' PALIGNR $8, X6, X6','line_number':167,'multiline':False]
['text':' PALIGNR $8, X7, X7','line_number':168,'multiline':False]
['text':' PALIGNR $8, X8, X8','line_number':169,'multiline':False]
['text':' PALIGNR $8, X14, X14','line_number':170,'multiline':False]
['text':' PALIGNR $12, X9, X9','line_number':171,'multiline':False]
['text':' PALIGNR $12, X10, X10','line_number':172,'multiline':False]
['text':' PALIGNR $12, X11, X11','line_number':173,'multiline':False]
['text':' PALIGNR $12, X15, X15','line_number':174,'multiline':False]
['text':' PALIGNR $12, X3, X3','line_number':175,'multiline':False]
['text':' PALIGNR $12, X4, X4','line_number':176,'multiline':False]
['text':' PALIGNR $12, X5, X5','line_number':177,'multiline':False]
['text':' PALIGNR $12, X13, X13','line_number':178,'multiline':False]
['text':' PALIGNR $4, X9, X9','line_number':183,'multiline':False]
['text':' PALIGNR $4, X10, X10','line_number':184,'multiline':False]
['text':' PALIGNR $4, X11, X11','line_number':185,'multiline':False]
['text':' PALIGNR $4, X15, X15','line_number':186,'multiline':False]
['text':' Some macros','line_number':187,'multiline':False]
['text':' ----------------------------------------------------------------------------','line_number':212,'multiline':False]
['text':' adp points to beginning of additional data','line_number':214,'multiline':False]
['text':' itr2 holds ad length','line_number':215,'multiline':False]
['text':' Special treatment for the TLS case of 13 bytes','line_number':223,'multiline':False]
['text':' Hash in 16 byte chunks','line_number':232,'multiline':False]
['text':' Hash last < 16 byte tail','line_number':245,'multiline':False]
['text':' Finished AD','line_number':264,'multiline':False]
['text':' ----------------------------------------------------------------------------','line_number':268,'multiline':False]
['text':' func chacha20Poly1305Open(dst, key, src, ad []byte) bool','line_number':269,'multiline':False]
['text':' For aligned stack access','line_number':271,'multiline':False]
['text':' Check for AVX2 support','line_number':281,'multiline':False]
['text':' Special optimization, for very short buffers','line_number':285,'multiline':False]
['text':' About 16% faster','line_number':287,'multiline':False]
['text':' For long buffers, prepare the poly key first','line_number':289,'multiline':False]
['text':' Store state on stack for future use','line_number':296,'multiline':False]
['text':' A0|B0 hold the Poly1305 32-byte key, C0,D0 can be discarded','line_number':310,'multiline':False]
['text':' Clamp and store the key','line_number':313,'multiline':False]
['text':' Hash AAD','line_number':317,'multiline':False]
['text':' Load state, increment counter blocks','line_number':325,'multiline':False]
['text':' Store counters','line_number':331,'multiline':False]
['text':' There are 10 ChaCha20 iterations of 2QR each, so for 6 iterations we hash 2 blocks, and for the remaining 4 only 1 block - for a total of 16','line_number':334,'multiline':False]
['text':' Add in the state','line_number':373,'multiline':False]
['text':' Load - xor - store','line_number':379,'multiline':False]
['text':' Handle the various tail sizes efficiently','line_number':403,'multiline':False]
['text':' Hash in the PT, AAD lengths','line_number':415,'multiline':False]
['text':' Final reduce','line_number':419,'multiline':False]
['text':' Add in the "s" part of the key','line_number':430,'multiline':False]
['text':' Finally, constant time compare to the tag at the end of the message','line_number':434,'multiline':False]
['text':' Return true iff tags are equal','line_number':442,'multiline':False]
['text':' ----------------------------------------------------------------------------','line_number':446,'multiline':False]
['text':' Special optimization for buffers smaller than 129 bytes','line_number':447,'multiline':False]
['text':' For up to 128 bytes of ciphertext and 64 bytes for the poly key, we require to process three blocks','line_number':449,'multiline':False]
['text':' A0|B0 hold the Poly1305 32-byte key, C0,D0 can be discarded','line_number':468,'multiline':False]
['text':' Clamp and store the key','line_number':474,'multiline':False]
['text':' Hash','line_number':478,'multiline':False]
['text':' Load for hashing','line_number':487,'multiline':False]
['text':' Load for decryption','line_number':490,'multiline':False]
['text':' Shift the stream "left"','line_number':496,'multiline':False]
['text':' We can safely load the CT from the end, because it is padded with the MAC','line_number':510,'multiline':False]
['text':' We can only store one byte at a time, since plaintext can be shorter than 16 bytes','line_number':522,'multiline':False]
['text':' ----------------------------------------------------------------------------','line_number':534,'multiline':False]
['text':' Special optimization for the last 64 bytes of ciphertext','line_number':535,'multiline':False]
['text':' Need to decrypt up to 64 bytes - prepare single block','line_number':537,'multiline':False]
['text':' Perform ChaCha rounds, while hashing the remaining input','line_number':545,'multiline':False]
['text':' ----------------------------------------------------------------------------','line_number':583,'multiline':False]
['text':' Special optimization for the last 128 bytes of ciphertext','line_number':584,'multiline':False]
['text':' Need to decrypt up to 128 bytes - prepare two blocks','line_number':586,'multiline':False]
['text':' Perform ChaCha rounds, while hashing the remaining input','line_number':594,'multiline':False]
['text':' ----------------------------------------------------------------------------','line_number':627,'multiline':False]
['text':' Special optimization for the last 192 bytes of ciphertext','line_number':628,'multiline':False]
['text':' Need to decrypt up to 192 bytes - prepare three blocks','line_number':630,'multiline':False]
['text':' Perform ChaCha rounds, while hashing the remaining input','line_number':643,'multiline':False]
['text':' ----------------------------------------------------------------------------','line_number':696,'multiline':False]
['text':' Special optimization for the last 256 bytes of ciphertext','line_number':697,'multiline':False]
['text':' Need to decrypt up to 256 bytes - prepare four blocks','line_number':699,'multiline':False]
['text':' Store counters','line_number':705,'multiline':False]
['text':' This loop inteleaves 8 ChaCha quarter rounds with 1 poly multiplication','line_number':710,'multiline':False]
['text':' Add in the state','line_number':747,'multiline':False]
['text':' Load - xor - store','line_number':754,'multiline':False]
['text':' ----------------------------------------------------------------------------','line_number':779,'multiline':False]
['text':' ------------------------- AVX2 Code ----------------------------------------','line_number':780,'multiline':False]
['text':' broadcasti128 16(r8), ymm14','line_number':784,'multiline':False]
['text':' broadcasti128 32(r8), ymm12','line_number':785,'multiline':False]
['text':' broadcasti128 48(r8), ymm4','line_number':786,'multiline':False]
['text':' Special optimization, for very short buffers','line_number':789,'multiline':False]
['text':' For the general key prepare the key first - as a byproduct we have 64 bytes of cipher stream','line_number':795,'multiline':False]
['text':' Clamp and store poly key','line_number':816,'multiline':False]
['text':' Stream for the first 64 bytes','line_number':820,'multiline':False]
['text':' Hash AD + first 64 bytes','line_number':824,'multiline':False]
['text':' Decrypt the first 64 bytes','line_number':836,'multiline':False]
['text':' Load state, increment counter blocks, store the incremented counters','line_number':849,'multiline':False]
['text':' Lets just say this spaghetti loop interleaves 2 quarter rounds with 3 poly multiplications','line_number':858,'multiline':False]
['text':' Effectively per 512 bytes of stream we hash 480 bytes of ciphertext','line_number':859,'multiline':False]
['text':' We only hashed 480 of the 512 bytes available - hash the remaining 32 here','line_number':935,'multiline':False]
['text':' and here','line_number':945,'multiline':False]
['text':' Handle the various tail sizes efficiently','line_number':960,'multiline':False]
['text':' ----------------------------------------------------------------------------','line_number':971,'multiline':False]
['text':' Special optimization for buffers smaller than 193 bytes','line_number':972,'multiline':False]
['text':' For up to 192 bytes of ciphertext and 64 bytes for the poly key, we process four blocks','line_number':974,'multiline':False]
['text':' Clamp and store poly key','line_number':1003,'multiline':False]
['text':' Stream for up to 192 bytes','line_number':1007,'multiline':False]
['text':' Hash','line_number':1016,'multiline':False]
['text':' Load for hashing','line_number':1025,'multiline':False]
['text':' Load for decryption','line_number':1031,'multiline':False]
['text':' Shift stream left','line_number':1037,'multiline':False]
['text':' Load for hashing','line_number':1056,'multiline':False]
['text':' Load for decryption','line_number':1060,'multiline':False]
['text':' ----------------------------------------------------------------------------','line_number':1072,'multiline':False]
['text':' Special optimization for buffers smaller than 321 bytes','line_number':1073,'multiline':False]
['text':' For up to 320 bytes of ciphertext and 64 bytes for the poly key, we process six blocks','line_number':1075,'multiline':False]
['text':' Clamp and store poly key','line_number':1102,'multiline':False]
['text':' Stream for up to 320 bytes','line_number':1107,'multiline':False]
['text':' ----------------------------------------------------------------------------','line_number':1120,'multiline':False]
['text':' Special optimization for the last 128 bytes of ciphertext','line_number':1121,'multiline':False]
['text':' Need to decrypt up to 128 bytes - prepare two blocks','line_number':1123,'multiline':False]
['text':' Perform ChaCha rounds, while hashing the remaining input','line_number':1138,'multiline':False]
['text':' Load for decryption','line_number':1168,'multiline':False]
['text':' Load for decryption','line_number':1184,'multiline':False]
['text':' ----------------------------------------------------------------------------','line_number':1196,'multiline':False]
['text':' Special optimization for the last 256 bytes of ciphertext','line_number':1197,'multiline':False]
['text':' Need to decrypt up to 256 bytes - prepare four blocks','line_number':1199,'multiline':False]
['text':' Compute the number of iterations that will hash data','line_number':1209,'multiline':False]
['text':' Perform ChaCha rounds, while hashing the remaining input','line_number':1225,'multiline':False]
['text':' Hash the remainder of data (if any)','line_number':1247,'multiline':False]
['text':' Store 128 bytes safely, then go to store loop','line_number':1257,'multiline':False]
['text':' ----------------------------------------------------------------------------','line_number':1274,'multiline':False]
['text':' Special optimization for the last 384 bytes of ciphertext','line_number':1275,'multiline':False]
['text':' Need to decrypt up to 384 bytes - prepare six blocks','line_number':1277,'multiline':False]
['text':' Compute the number of iterations that will hash two blocks of data','line_number':1289,'multiline':False]
['text':' Perform ChaCha rounds, while hashing the remaining input','line_number':1301,'multiline':False]
['text':' Store 256 bytes safely, then go to store loop','line_number':1341,'multiline':False]
['text':' ----------------------------------------------------------------------------','line_number':1359,'multiline':False]
['text':' Special optimization for the last 512 bytes of ciphertext','line_number':1360,'multiline':False]
['text':' ----------------------------------------------------------------------------','line_number':1474,'multiline':False]
['text':' ----------------------------------------------------------------------------','line_number':1475,'multiline':False]
['text':' func chacha20Poly1305Seal(dst, key, src, ad []byte)','line_number':1476,'multiline':False]
['text':' For aligned stack access','line_number':1478,'multiline':False]
['text':' Special optimization, for very short buffers','line_number':1491,'multiline':False]
['text':' About 15% faster','line_number':1493,'multiline':False]
['text':' In the seal case - prepare the poly key + 3 blocks of stream in the first iteration','line_number':1495,'multiline':False]
['text':' Store state on stack for future use','line_number':1501,'multiline':False]
['text':' Load state, increment counter blocks','line_number':1505,'multiline':False]
['text':' Store counters','line_number':1510,'multiline':False]
['text':' Add in the state','line_number':1537,'multiline':False]
['text':' Clamp and store the key','line_number':1543,'multiline':False]
['text':' Hash AAD','line_number':1548,'multiline':False]
['text':' Load state, increment counter blocks','line_number':1587,'multiline':False]
['text':' Store counters','line_number':1593,'multiline':False]
['text':' Add in the state','line_number':1629,'multiline':False]
['text':' Load - xor - store','line_number':1636,'multiline':False]
['text':' ----------------------------------------------------------------------------','line_number':1682,'multiline':False]
['text':' Special optimization for the last 64 bytes of plaintext','line_number':1683,'multiline':False]
['text':' Need to encrypt up to 64 bytes - prepare single block, hash 192 or 256 bytes','line_number':1685,'multiline':False]
['text':' Perform ChaCha rounds, while hashing the previously encrypted ciphertext','line_number':1694,'multiline':False]
['text':' ----------------------------------------------------------------------------','line_number':1720,'multiline':False]
['text':' Special optimization for the last 128 bytes of plaintext','line_number':1721,'multiline':False]
['text':' Need to encrypt up to 128 bytes - prepare two blocks, hash 192 or 256 bytes','line_number':1723,'multiline':False]
['text':' Perform ChaCha rounds, while hashing the previously encrypted ciphertext','line_number':1728,'multiline':False]
['text':' ----------------------------------------------------------------------------','line_number':1765,'multiline':False]
['text':' Special optimization for the last 192 bytes of plaintext','line_number':1766,'multiline':False]
['text':' Need to encrypt up to 192 bytes - prepare three blocks, hash 192 or 256 bytes','line_number':1768,'multiline':False]
['text':' Perform ChaCha rounds, while hashing the previously encrypted ciphertext','line_number':1774,'multiline':False]
['text':' ----------------------------------------------------------------------------','line_number':1822,'multiline':False]
['text':' Special seal optimization for buffers smaller than 129 bytes','line_number':1823,'multiline':False]
['text':' For up to 128 bytes of ciphertext and 64 bytes for the poly key, we require to process three blocks','line_number':1825,'multiline':False]
['text':' A0|B0 hold the Poly1305 32-byte key, C0,D0 can be discarded','line_number':1844,'multiline':False]
['text':' Hash','line_number':1853,'multiline':False]
['text':' itr1 holds the number of bytes encrypted but not yet hashed','line_number':1859,'multiline':False]
['text':' Load for decryption','line_number':1875,'multiline':False]
['text':' Extract for hashing','line_number':1882,'multiline':False]
['text':' Shift the stream "left"','line_number':1889,'multiline':False]
['text':' We can only load the PT one byte at a time to avoid read after end of buffer','line_number':1903,'multiline':False]
['text':' Hash in the buffer lengths','line_number':1936,'multiline':False]
['text':' Final reduce','line_number':1942,'multiline':False]
['text':' Add in the "s" part of the key','line_number':1953,'multiline':False]
['text':' Finally store the tag at the end of the message','line_number':1957,'multiline':False]
['text':' ----------------------------------------------------------------------------','line_number':1962,'multiline':False]
['text':' ------------------------- AVX2 Code ----------------------------------------','line_number':1963,'multiline':False]
['text':' broadcasti128 16(r8), ymm14','line_number':1967,'multiline':False]
['text':' broadcasti128 32(r8), ymm12','line_number':1968,'multiline':False]
['text':' broadcasti128 48(r8), ymm4','line_number':1969,'multiline':False]
['text':' Special optimizations, for very short buffers','line_number':1972,'multiline':False]
['text':' 33% faster','line_number':1974,'multiline':False]
['text':' 17% faster','line_number':1976,'multiline':False]
['text':' For the general key prepare the key first - as a byproduct we have 64 bytes of cipher stream','line_number':1978,'multiline':False]
['text':' Stream bytes 96 - 127','line_number':2020,'multiline':False]
['text':' The Poly1305 key','line_number':2021,'multiline':False]
['text':' Stream bytes 64 - 95','line_number':2022,'multiline':False]
['text':' Clamp and store poly key','line_number':2024,'multiline':False]
['text':' Hash AD','line_number':2028,'multiline':False]
['text':' Can store at least 320 bytes','line_number':2032,'multiline':False]
['text':' We have 448 bytes to hash, but main loop hashes 512 bytes at a time - perform some rounds, before the main loop','line_number':2070,'multiline':False]
['text':' Adjust the pointer','line_number':2113,'multiline':False]
['text':' Load state, increment counter blocks, store the incremented counters','line_number':2118,'multiline':False]
['text':' We only hashed 480 of the 512 bytes available - hash the remaining 32 here','line_number':2204,'multiline':False]
['text':' and here','line_number':2215,'multiline':False]
['text':' Tail can only hash 480 bytes','line_number':2229,'multiline':False]
['text':' ----------------------------------------------------------------------------','line_number':2246,'multiline':False]
['text':' Special optimization for buffers smaller than 193 bytes','line_number':2247,'multiline':False]
['text':' For up to 192 bytes of ciphertext and 64 bytes for the poly key, we process four blocks','line_number':2249,'multiline':False]
['text':' Clamp and store poly key','line_number':2278,'multiline':False]
['text':' Stream for up to 192 bytes','line_number':2282,'multiline':False]
['text':' Hash aad','line_number':2291,'multiline':False]
['text':' itr1 holds the number of bytes encrypted but not yet hashed','line_number':2297,'multiline':False]
['text':' Load for encryption','line_number':2311,'multiline':False]
['text':' Now can hash','line_number':2316,'multiline':False]
['text':' Shift stream left','line_number':2323,'multiline':False]
['text':' Load for encryption','line_number':2342,'multiline':False]
['text':' Hash','line_number':2347,'multiline':False]
['text':' ----------------------------------------------------------------------------','line_number':2358,'multiline':False]
['text':' Special optimization for buffers smaller than 321 bytes','line_number':2359,'multiline':False]
['text':' For up to 320 bytes of ciphertext and 64 bytes for the poly key, we process six blocks','line_number':2361,'multiline':False]
['text':' Clamp and store poly key','line_number':2388,'multiline':False]
['text':' Stream for up to 320 bytes','line_number':2393,'multiline':False]
['text':' ----------------------------------------------------------------------------','line_number':2406,'multiline':False]
['text':' Special optimization for the last 128 bytes of ciphertext','line_number':2407,'multiline':False]
['text':' Need to decrypt up to 128 bytes - prepare two blocks','line_number':2409,'multiline':False]
['text':' If we got here after the main loop - there are 512 encrypted bytes waiting to be hashed','line_number':2410,'multiline':False]
['text':' If we got here before the main loop - there are 448 encrpyred bytes waiting to be hashed','line_number':2411,'multiline':False]
['text':' ----------------------------------------------------------------------------','line_number':2454,'multiline':False]
['text':' Special optimization for the last 256 bytes of ciphertext','line_number':2455,'multiline':False]
['text':' Need to decrypt up to 256 bytes - prepare two blocks','line_number':2457,'multiline':False]
['text':' If we got here after the main loop - there are 512 encrypted bytes waiting to be hashed','line_number':2458,'multiline':False]
['text':' If we got here before the main loop - there are 448 encrpyred bytes waiting to be hashed','line_number':2459,'multiline':False]
['text':' ----------------------------------------------------------------------------','line_number':2513,'multiline':False]
['text':' Special optimization for the last 384 bytes of ciphertext','line_number':2514,'multiline':False]
['text':' Need to decrypt up to 384 bytes - prepare two blocks','line_number':2516,'multiline':False]
['text':' If we got here after the main loop - there are 512 encrypted bytes waiting to be hashed','line_number':2517,'multiline':False]
['text':' If we got here before the main loop - there are 448 encrpyred bytes waiting to be hashed','line_number':2518,'multiline':False]
['text':' ----------------------------------------------------------------------------','line_number':2576,'multiline':False]
['text':' Special optimization for the last 512 bytes of ciphertext','line_number':2577,'multiline':False]
['text':' Need to decrypt up to 512 bytes - prepare two blocks','line_number':2579,'multiline':False]
['text':' If we got here after the main loop - there are 512 encrypted bytes waiting to be hashed','line_number':2580,'multiline':False]
['text':' If we got here before the main loop - there are 448 encrpyred bytes waiting to be hashed','line_number':2581,'multiline':False]
