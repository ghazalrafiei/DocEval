['text':'!/usr/bin/env bash','line_number':1,'multiline':False]
['text':' Copyright 2014 The Kubernetes Authors.','line_number':2,'multiline':False]
['text':'','line_number':3,'multiline':False]
['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':4,'multiline':False]
['text':' you may not use this file except in compliance with the License.','line_number':5,'multiline':False]
['text':' You may obtain a copy of the License at','line_number':6,'multiline':False]
['text':'','line_number':7,'multiline':False]
['text':'     http://www.apache.org/licenses/LICENSE-2.0','line_number':8,'multiline':False]
['text':'','line_number':9,'multiline':False]
['text':' Unless required by applicable law or agreed to in writing, software','line_number':10,'multiline':False]
['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':11,'multiline':False]
['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':12,'multiline':False]
['text':' See the License for the specific language governing permissions and','line_number':13,'multiline':False]
['text':' limitations under the License.','line_number':14,'multiline':False]
['text':' shellcheck disable=2046 # printf word-splitting is intentional','line_number':16,'multiline':False]
['text':' This tool wants a different default than usual.','line_number':22,'multiline':False]
['text':' Any time we call sort, we want it in the same locale.','line_number':42,'multiline':False]
['text':' Work around for older grep tools which might have options we don't want.','line_number':45,'multiline':False]
['text':' Similar to find but faster and easier to understand.  We want to include','line_number':53,'multiline':False]
['text':' modified and untracked files because this might be running against code','line_number':54,'multiline':False]
['text':' which is not tracked by git yet.','line_number':55,'multiline':False]
['text':' We want to include modified and untracked files because this might be','line_number':60,'multiline':False]
['text':' running against code which is not tracked by git yet.','line_number':61,'multiline':False]
['text':' We need vendor exclusion added at the end since it has to be part of','line_number':62,'multiline':False]
['text':' the pathspecs which are specified last.','line_number':63,'multiline':False]
['text':' Generate a list of all files that have a `+k8s:` comment-tag.  This will be','line_number':67,'multiline':False]
['text':' used to derive lists of files/dirs for generation tools.','line_number':68,'multiline':False]
['text':'','line_number':69,'multiline':False]
['text':' We want to include the "special" vendor directories which are actually part','line_number':70,'multiline':False]
['text':' of the Kubernetes source tree (staging/*) but we need them to be named as','line_number':71,'multiline':False]
['text':' their vendor/* equivalents.  We do not want all of vendor nor','line_number':72,'multiline':False]
['text':' hack/tools/vendor nor even all of vendor/k8s.io - just the subset that lives','line_number':73,'multiline':False]
['text':' in staging.','line_number':74,'multiline':False]
['text':' match +k8s: tags` \','line_number':81,'multiline':False]
['text':' not under any testdata` \','line_number':83,'multiline':False]
['text':' in any *.go file` \','line_number':84,'multiline':False]
['text':' see comments above` \','line_number':85,'multiline':False]
['text':'','line_number':91,'multiline':False]
['text':' Code generation logic.','line_number':92,'multiline':False]
['text':'','line_number':93,'multiline':False]
['text':' protobuf generation','line_number':95,'multiline':False]
['text':'','line_number':96,'multiline':False]
['text':' Some of the later codegens depend on the results of this, so it needs to come','line_number':97,'multiline':False]
['text':' first in the case of regenerating everything.','line_number':98,'multiline':False]
['text':' NOTE: All output from this script needs to be copied back to the calling','line_number':100,'multiline':False]
['text':' source tree.  This is managed in kube::build::copy_output in build/common.sh.','line_number':101,'multiline':False]
['text':' If the output set is changed update that function.','line_number':102,'multiline':False]
['text':' Deep-copy generation','line_number':135,'multiline':False]
['text':'','line_number':136,'multiline':False]
['text':' Any package that wants deep-copy functions generated must include a','line_number':137,'multiline':False]
['text':' comment-tag in column 0 of one file of the form:','line_number':138,'multiline':False]
['text':'     // +k8s:deepcopy-gen=<VALUE>','line_number':139,'multiline':False]
['text':'','line_number':140,'multiline':False]
['text':' The <VALUE> may be one of:','line_number':141,'multiline':False]
['text':'     generate: generate deep-copy functions into the package','line_number':142,'multiline':False]
['text':'     register: generate deep-copy functions and register them with a','line_number':143,'multiline':False]
['text':'               scheme','line_number':144,'multiline':False]
['text':' Build the tool.','line_number':146,'multiline':False]
['text':' The result file, in each pkg, of deep-copy generation.','line_number':150,'multiline':False]
['text':' The tool used to generate deep copies.','line_number':153,'multiline':False]
['text':' Find all the directories that request deep-copy generation.','line_number':157,'multiline':False]
['text':' Generates types_swagger_doc_generated file for the given group version.','line_number':199,'multiline':False]
['text':' $1: Name of the group version','line_number':200,'multiline':False]
['text':' $2: Path to the directory where types.go for that group version exists. This','line_number':201,'multiline':False]
['text':' is the directory where the file will be generated.','line_number':202,'multiline':False]
['text':' The tool used to generate swagger code.','line_number':204,'multiline':False]
['text':' Indenting here prevents the boilerplate checker from thinking this file','line_number':221,'multiline':False]
['text':' is generated - gofmt will fix the indents anyway.','line_number':222,'multiline':False]
['text':' swagger generation','line_number':251,'multiline':False]
['text':'','line_number':252,'multiline':False]
['text':' Some of the later codegens depend on the results of this, so it needs to come','line_number':253,'multiline':False]
['text':' first in the case of regenerating everything.','line_number':254,'multiline':False]
['text':' Build the tool','line_number':256,'multiline':False]
['text':' Regenerate files.','line_number':267,'multiline':False]
['text':' prerelease-lifecycle generation','line_number':273,'multiline':False]
['text':'','line_number':274,'multiline':False]
['text':' Any package that wants prerelease-lifecycle functions generated must include a','line_number':275,'multiline':False]
['text':' comment-tag in column 0 of one file of the form:','line_number':276,'multiline':False]
['text':'     // +k8s:prerelease-lifecycle-gen=true','line_number':277,'multiline':False]
['text':' Build the tool.','line_number':279,'multiline':False]
['text':' The result file, in each pkg, of prerelease-lifecycle generation.','line_number':283,'multiline':False]
['text':' The tool used to generate prerelease-lifecycle code.','line_number':286,'multiline':False]
['text':' Find all the directories that request prerelease-lifecycle generation.','line_number':290,'multiline':False]
['text':' Defaulter generation','line_number':331,'multiline':False]
['text':'','line_number':332,'multiline':False]
['text':' Any package that wants defaulter functions generated must include a','line_number':333,'multiline':False]
['text':' comment-tag in column 0 of one file of the form:','line_number':334,'multiline':False]
['text':'     // +k8s:defaulter-gen=<VALUE>','line_number':335,'multiline':False]
['text':'','line_number':336,'multiline':False]
['text':' The <VALUE> depends on context:','line_number':337,'multiline':False]
['text':'     on types:','line_number':338,'multiline':False]
['text':'       true:  always generate a defaulter for this type','line_number':339,'multiline':False]
['text':'       false: never generate a defaulter for this type','line_number':340,'multiline':False]
['text':'     on functions:','line_number':341,'multiline':False]
['text':'       covers: if the function name matches SetDefault_NAME, instructs','line_number':342,'multiline':False]
['text':'               the generator not to recurse','line_number':343,'multiline':False]
['text':'     on packages:','line_number':344,'multiline':False]
['text':'       FIELDNAME: any object with a field of this name is a candidate','line_number':345,'multiline':False]
['text':'                  for having a defaulter generated','line_number':346,'multiline':False]
['text':' Build the tool.','line_number':348,'multiline':False]
['text':' The result file, in each pkg, of defaulter generation.','line_number':352,'multiline':False]
['text':' The tool used to generate defaulters.','line_number':355,'multiline':False]
['text':' All directories that request any form of defaulter generation.','line_number':359,'multiline':False]
['text':' Conversion generation','line_number':401,'multiline':False]
['text':' Any package that wants conversion functions generated into it must','line_number':403,'multiline':False]
['text':' include one or more comment-tags in its `doc.go` file, of the form:','line_number':404,'multiline':False]
['text':'     // +k8s:conversion-gen=<INTERNAL_TYPES_DIR>','line_number':405,'multiline':False]
['text':'','line_number':406,'multiline':False]
['text':' The INTERNAL_TYPES_DIR is a project-local path to another directory','line_number':407,'multiline':False]
['text':' which should be considered when evaluating peer types for','line_number':408,'multiline':False]
['text':' conversions.  An optional additional comment of the form','line_number':409,'multiline':False]
['text':'     // +k8s:conversion-gen-external-types=<EXTERNAL_TYPES_DIR>','line_number':410,'multiline':False]
['text':'','line_number':411,'multiline':False]
['text':' identifies where to find the external types; if there is no such','line_number':412,'multiline':False]
['text':' comment then the external types are sought in the package where the','line_number':413,'multiline':False]
['text':' `k8s:conversion` tag is found.','line_number':414,'multiline':False]
['text':'','line_number':415,'multiline':False]
['text':' Conversions, in both directions, are generated for every type name','line_number':416,'multiline':False]
['text':' that is defined in both an internal types package and the external','line_number':417,'multiline':False]
['text':' types package.','line_number':418,'multiline':False]
['text':'','line_number':419,'multiline':False]
['text':' TODO: it might be better in the long term to make peer-types explicit in the','line_number':420,'multiline':False]
['text':' IDL.','line_number':421,'multiline':False]
['text':' Build the tool.','line_number':423,'multiline':False]
['text':' The result file, in each pkg, of conversion generation.','line_number':427,'multiline':False]
['text':' The tool used to generate conversions.','line_number':430,'multiline':False]
['text':' All directories that request any form of conversion generation.','line_number':434,'multiline':False]
['text':' $@: directories to exclude','line_number':483,'multiline':False]
['text':' example:','line_number':484,'multiline':False]
['text':'    k8s_tag_files_except foo bat/qux','line_number':485,'multiline':False]
['text':' OpenAPI generation','line_number':501,'multiline':False]
['text':'','line_number':502,'multiline':False]
['text':' Any package that wants open-api functions generated must include a','line_number':503,'multiline':False]
['text':' comment-tag in column 0 of one file of the form:','line_number':504,'multiline':False]
['text':'     // +k8s:openapi-gen=true','line_number':505,'multiline':False]
['text':' Build the tool.','line_number':507,'multiline':False]
['text':' The result file, in each pkg, of open-api generation.','line_number':511,'multiline':False]
['text':' The tool used to generate open apis.','line_number':514,'multiline':False]
['text':' When UPDATE_API_KNOWN_VIOLATIONS is set to be true, let the generator to write','line_number':522,'multiline':False]
['text':' updated API violations to the known API violation exceptions list.','line_number':523,'multiline':False]
['text':' add items, but strip off any leading apis/ you find to match command expectations','line_number':643,'multiline':False]
['text':'pkg/}','line_number':646,'multiline':False]
['text':'vendor/k8s.io/api/}','line_number':647,'multiline':False]
['text':'apis/}','line_number':648,'multiline':False]
['text':' skip groups that aren't being served, clients for these don't matter','line_number':650,'multiline':False]
['text':' Call generation on sub-projects.','line_number':780,'multiline':False]
['text':' Each element of this array is a directory containing subdirectories which','line_number':805,'multiline':False]
['text':' eventually contain a file named "api.proto".','line_number':806,'multiline':False]
['text':' NOTE: All output from this script needs to be copied back to the calling','line_number':840,'multiline':False]
['text':' source tree.  This is managed in kube::build::copy_output in build/common.sh.','line_number':841,'multiline':False]
['text':' If the output set is changed update that function.','line_number':842,'multiline':False]
['text':'','line_number':847,'multiline':False]
['text':' main','line_number':848,'multiline':False]
['text':'','line_number':849,'multiline':False]
['text':' shellcheck disable=SC2207 # safe, no functions have spaces','line_number':864,'multiline':False]
['text':' Validate and accumulate flags to pass thru and codegens to run if args are','line_number':874,'multiline':False]
['text':' specified.','line_number':875,'multiline':False]
['text':' Use -? to list known codegens.','line_number':879,'multiline':False]
['text':' Make sure each non-flag arg matches at least one codegen.','line_number':888,'multiline':False]
['text':' Don't run codegens twice, just keep the first match.','line_number':893,'multiline':False]
['text':' shellcheck disable=SC2076 # we want literal matching','line_number':894,'multiline':False]
['text':' The array-syntax abomination is to accommodate older bash.','line_number':908,'multiline':False]
['text':' If no codegens were specified, run them all.','line_number':912,'multiline':False]
['text':' The array-syntax abomination is to accommodate older bash.','line_number':918,'multiline':False]
