['text':'!/usr/bin/env bash','line_number':1,'multiline':False]
['text':' Copyright 2017 The Kubernetes Authors.','line_number':3,'multiline':False]
['text':'','line_number':4,'multiline':False]
['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':5,'multiline':False]
['text':' you may not use this file except in compliance with the License.','line_number':6,'multiline':False]
['text':' You may obtain a copy of the License at','line_number':7,'multiline':False]
['text':'','line_number':8,'multiline':False]
['text':'     http://www.apache.org/licenses/LICENSE-2.0','line_number':9,'multiline':False]
['text':'','line_number':10,'multiline':False]
['text':' Unless required by applicable law or agreed to in writing, software','line_number':11,'multiline':False]
['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':12,'multiline':False]
['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':13,'multiline':False]
['text':' See the License for the specific language governing permissions and','line_number':14,'multiline':False]
['text':' limitations under the License.','line_number':15,'multiline':False]
['text':' Call this to dump all master and node logs into the folder specified in $1','line_number':17,'multiline':False]
['text':' (defaults to _artifacts). Only works if the provider supports SSH.','line_number':18,'multiline':False]
['text':' TODO(shyamjvs): This script should be moved to test/e2e which is where it ideally belongs.','line_number':20,'multiline':False]
['text':' In order to more trivially extend log-dump for custom deployments,','line_number':29,'multiline':False]
['text':' check for a function named log_dump_custom_get_instances. If it's','line_number':30,'multiline':False]
['text':' defined, we assume the function can me called with one argument, the','line_number':31,'multiline':False]
['text':' role, which is either "master" or "node".','line_number':32,'multiline':False]
['text':' Log files found in WINDOWS_LOGS_DIR on Windows nodes:','line_number':57,'multiline':False]
['text':' Log files found in other directories on Windows nodes:','line_number':59,'multiline':False]
['text':' Limit the number of concurrent node connections so that we don't run out of','line_number':62,'multiline':False]
['text':' file descriptors for large clusters.','line_number':63,'multiline':False]
['text':' Indicator variable whether we experienced a significant failure during','line_number':66,'multiline':False]
['text':' logexporter creation or execution.','line_number':67,'multiline':False]
['text':' Percentage of nodes that must be logexported successfully (otherwise the','line_number':70,'multiline':False]
['text':' process will exit with a non-zero exit code).','line_number':71,'multiline':False]
['text':' TODO: Get rid of all the sourcing of bash dependencies eventually.','line_number':83,'multiline':False]
['text':' Source the below script for the ssh-to-node utility function.','line_number':94,'multiline':False]
['text':' Hack to save and restore the value of the ZONE env as the script overwrites it.','line_number':95,'multiline':False]
['text':' Copy all files /var/log/{$3}.log on node $1 into local dir $2.','line_number':121,'multiline':False]
['text':' $3 should be a string array of file names.','line_number':122,'multiline':False]
['text':' This function shouldn't ever trigger errexit, but doesn't block stderr.','line_number':123,'multiline':False]
['text':' Append "*"','line_number':130,'multiline':False]
['text':' The * at the end is needed to also copy rotated logs (which happens','line_number':131,'multiline':False]
['text':' in large clusters and long runs).','line_number':132,'multiline':False]
['text':' Prepend "/var/log/"','line_number':134,'multiline':False]
['text':' Comma delimit (even the singleton, or scp does the wrong thing), surround by braces.','line_number':136,'multiline':False]
['text':' get-serial-port-output lets you ask for ports 1-4, but currently (11/21/2016) only port 1 contains useful information','line_number':140,'multiline':False]
['text':' Save logs for node $1 into directory $2. Pass in any non-common files in $3.','line_number':158,'multiline':False]
['text':' Pass in any non-common systemd services in $4.','line_number':159,'multiline':False]
['text':' $3 and $4 should be a space-separated list of files.','line_number':160,'multiline':False]
['text':' Set $5 to true to indicate it is on master. Default to false.','line_number':161,'multiline':False]
['text':' This function shouldn't ever trigger errexit','line_number':162,'multiline':False]
['text':' log where we pull the images from','line_number':220,'multiline':False]
['text':' Try dumping coverage profiles, if it looks like coverage is enabled in the first place.','line_number':224,'multiline':False]
['text':' Saves a copy of the Windows Docker event log to ${WINDOWS_LOGS_DIR}\docker.log','line_number':246,'multiline':False]
['text':' on node $1.','line_number':247,'multiline':False]
['text':' Retry up to 3 times to allow ssh keys to be properly propagated and','line_number':253,'multiline':False]
['text':' stored.','line_number':254,'multiline':False]
['text':' Saves prepulled Windows Docker images list to ${WINDOWS_LOGS_DIR}\docker_images.log','line_number':265,'multiline':False]
['text':' on node $1.','line_number':266,'multiline':False]
['text':' Retry up to 3 times to allow ssh keys to be properly propagated and','line_number':272,'multiline':False]
['text':' stored.','line_number':273,'multiline':False]
['text':' Saves log files from diagnostics tool.(https://github.com/GoogleCloudPlatform/compute-image-tools/tree/master/cli_tools/diagnostics)','line_number':284,'multiline':False]
['text':' Saves log files from SSH','line_number':308,'multiline':False]
['text':' TODO(pjh, yujuhong): handle rotated logs and copying multiple files at the','line_number':322,'multiline':False]
['text':' same time.','line_number':323,'multiline':False]
['text':' Retry up to 3 times to allow ssh keys to be properly propagated and','line_number':325,'multiline':False]
['text':' stored.','line_number':326,'multiline':False]
['text':' Save log files and serial console output from Windows node $1 into local','line_number':339,'multiline':False]
['text':' directory $2.','line_number':340,'multiline':False]
['text':' This function shouldn't ever trigger errexit.','line_number':341,'multiline':False]
['text':' Serial port 1 contains the Windows console output.','line_number':357,'multiline':False]
['text':' Execute a command in container $2 on node $1.','line_number':362,'multiline':False]
['text':' Uses docker because the container may not ordinarily permit direct execution.','line_number':363,'multiline':False]
['text':' We don't want to run more than ${max_dump_processes} at a time, so','line_number':399,'multiline':False]
['text':' wait once we hit that many nodes. This isn't ideal, since one might','line_number':400,'multiline':False]
['text':' take much longer than the others, but it should help.','line_number':401,'multiline':False]
['text':' Wait for any remaining processes.','line_number':408,'multiline':False]
['text':' Dumps logs from nodes in the cluster. Linux nodes to dump logs from can be','line_number':414,'multiline':False]
['text':' specified via $1 or $use_custom_instance_list. If not specified then the nodes','line_number':415,'multiline':False]
['text':' to dump logs for will be detected using detect-node-names(); if Windows nodes','line_number':416,'multiline':False]
['text':' are present then they will be detected and their logs will be dumped too.','line_number':417,'multiline':False]
['text':' We randomly choose 'LOGDUMP_ONLY_N_RANDOM_NODES' many nodes for fetching logs.','line_number':453,'multiline':False]
['text':'node_names[*]} - 1 )) -n "${LOGDUMP_ONLY_N_RANDOM_NODES}")','line_number':454,'multiline':False]
['text':' log_dump_ssh_timeout is the maximal number of seconds the log dumping over','line_number':466,'multiline':False]
['text':' SSH operation can take. Please note that the logic enforcing the timeout','line_number':467,'multiline':False]
['text':' is only a best effort. The actual time of the operation may be longer','line_number':468,'multiline':False]
['text':' due to waiting for all the child processes below.','line_number':469,'multiline':False]
['text':' Save logs in the background. This speeds up things when there are','line_number':476,'multiline':False]
['text':' many nodes.','line_number':477,'multiline':False]
['text':' We don't want to run more than ${max_dump_processes} at a time, so','line_number':483,'multiline':False]
['text':' wait once we hit that many nodes. This isn't ideal, since one might','line_number':484,'multiline':False]
['text':' take much longer than the others, but it should help.','line_number':485,'multiline':False]
['text':' Wait for any remaining processes.','line_number':497,'multiline':False]
['text':' Collect names of nodes which didn't run logexporter successfully.','line_number':503,'multiline':False]
['text':' This function examines NODE_NAMES but not WINDOWS_NODE_NAMES since logexporter','line_number':504,'multiline':False]
['text':' does not run on Windows nodes.','line_number':505,'multiline':False]
['text':'','line_number':506,'multiline':False]
['text':' Note: This step is O(#nodes^2) as we check if each node is present in the list of succeeded nodes.','line_number':507,'multiline':False]
['text':' Making it linear would add code complexity without much benefit (as it just takes ~1s for 5k nodes).','line_number':508,'multiline':False]
['text':' Assumes:','line_number':509,'multiline':False]
['text':'   NODE_NAMES','line_number':510,'multiline':False]
['text':' Sets:','line_number':511,'multiline':False]
['text':'   NON_LOGEXPORTED_NODES','line_number':512,'multiline':False]
['text':' This function examines NODE_NAMES but not WINDOWS_NODE_NAMES since logexporter','line_number':526,'multiline':False]
['text':' does not run on Windows nodes.','line_number':527,'multiline':False]
['text':' Obtain parameters required by logexporter.','line_number':543,'multiline':False]
['text':' Fill in the parameters in the logexporter daemonset template.','line_number':552,'multiline':False]
['text':' Create the logexporter namespace, service-account secret and the logexporter daemonset within that namespace.','line_number':568,'multiline':False]
['text':' Periodically fetch list of already logexported nodes to verify','line_number':578,'multiline':False]
['text':' if we aren't already done.','line_number':579,'multiline':False]
['text':' Store logs from logexporter pods to allow debugging log exporting process','line_number':595,'multiline':False]
['text':' itself.','line_number':596,'multiline':False]
['text':' We don't want to run more than ${max_dump_processes} at a time, so','line_number':603,'multiline':False]
['text':' wait once we hit that many nodes. This isn't ideal, since one might','line_number':604,'multiline':False]
['text':' take much longer than the others, but it should help.','line_number':605,'multiline':False]
['text':' Wait for any remaining processes.','line_number':611,'multiline':False]
['text':' List registry of marker files (of nodes whose logexporter succeeded) from GCS.','line_number':614,'multiline':False]
['text':' The following if is needed, because defaulting for empty arrays','line_number':632,'multiline':False]
['text':' seems to treat them as non-empty with single empty string.','line_number':633,'multiline':False]
['text':' If less than a certain ratio of the nodes got logexported, report an error.','line_number':641,'multiline':False]
['text':'NODE_NAMES[@]} - ${#failed_nodes[@]}) * 100)) -lt $((${#NODE_NAMES[@]} * log_dump_expected_success_percentage )) ]]; then','line_number':642,'multiline':False]
['text':' Delete the logexporter resources and dump logs for the failed nodes (if any) through SSH.','line_number':646,'multiline':False]
['text':' Copy master logs to artifacts dir locally (through SSH).','line_number':693,'multiline':False]
['text':' Copy logs from nodes to GCS directly or to artifacts dir locally (through SSH).','line_number':701,'multiline':False]
