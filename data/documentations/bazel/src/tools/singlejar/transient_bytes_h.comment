['text':' Copyright 2016 The Bazel Authors. All rights reserved.','line_number':1,'multiline':False]
['text':'','line_number':2,'multiline':False]
['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':3,'multiline':False]
['text':' you may not use this file except in compliance with the License.','line_number':4,'multiline':False]
['text':' You may obtain a copy of the License at','line_number':5,'multiline':False]
['text':'','line_number':6,'multiline':False]
['text':'    http://www.apache.org/licenses/LICENSE-2.0','line_number':7,'multiline':False]
['text':'','line_number':8,'multiline':False]
['text':' Unless required by applicable law or agreed to in writing, software','line_number':9,'multiline':False]
['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':10,'multiline':False]
['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':11,'multiline':False]
['text':' See the License for the specific language governing permissions and','line_number':12,'multiline':False]
['text':' limitations under the License.','line_number':13,'multiline':False]
['text':'
 * An instance of this class holds decompressed data in a list of chunks,
 * to be eventually compressed to the output buffer.
 * Use DecompressFile() or ReadFile() (depending on whether an entry is
 * compressed or not) to append the contents of a Zip entry.
 * Use Append() to append a sequence of bytes or a string.
 * Use Write() to write out the contents, it will compress the entry if
 * necessary.
 ','line_number':29,'multiline':True]
['text':' Appends raw bytes.','line_number':55,'multiline':False]
['text':' Same, but for a string.','line_number':66,'multiline':False]
['text':' Appends the contents of the uncompressed Zip entry.','line_number':71,'multiline':False]
['text':' Appends the contents of the compressed Zip entry. Resets the inflater','line_number':76,'multiline':False]
['text':' used to decompress.','line_number':77,'multiline':False]
['text':' A single region to inflate cannot exceed 4GB-1.','line_number':94,'multiline':False]
['text':' No more data to decompress. Update write position and we are done','line_number':105,'multiline':False]
['text':' for this input chunk.','line_number':106,'multiline':False]
['text':' No more space in the output buffer. Advance write position, update','line_number':110,'multiline':False]
['text':' the number of remaining bytes.','line_number':111,'multiline':False]
['text':' Smog check','line_number':133,'multiline':False]
['text':' This check is disabled on Windows because z_stream::total_out is of type','line_number':134,'multiline':False]
['text':' of uLong (unsigned long), which is 64-bit for most 64-bit Unix platforms,','line_number':135,'multiline':False]
['text':' but it is 32-bit even for Win64. This means even though zlib is capable','line_number':136,'multiline':False]
['text':' of compressing data >4GB as long as it is processed by chunks, zlib','line_number':137,'multiline':False]
['text':' cannot report the correct total number of processed bytes >4GB through','line_number':138,'multiline':False]
['text':' z_stream::total_out on Windows.','line_number':139,'multiline':False]
['text':' Writes the contents bytes to the given buffer in an optimal way, i.e., the','line_number':153,'multiline':False]
['text':' shorter of compressed or uncompressed. Sets the checksum and number of','line_number':154,'multiline':False]
['text':' bytes written and returns Z_DEFLATED if compression took place or','line_number':155,'multiline':False]
['text':' Z_NO_COMPRESSION otherwise.','line_number':156,'multiline':False]
['text':' Feed data blocks to the deflater one by one, but break if the compressed','line_number':170,'multiline':False]
['text':' size exceeds the original size.','line_number':171,'multiline':False]
['text':' The compressed size should not exceed the original size less the number','line_number':175,'multiline':False]
['text':' of bytes already compressed. And, it should not exceed 4GB-1.','line_number':176,'multiline':False]
['text':' Out of the total number of bytes that remain to be compressed, we','line_number':179,'multiline':False]
['text':' can compress no more than this block.','line_number':180,'multiline':False]
['text':' We ran out of space in the output buffer, which means','line_number':190,'multiline':False]
['text':' that deflated size exceeds original size. Leave the loop','line_number':191,'multiline':False]
['text':' and just copy the data.','line_number':192,'multiline':False]
['text':' We ran out of data block, this is not a error.','line_number':196,'multiline':False]
['text':' Compression does not help, just copy the bytes to the output buffer.','line_number':214,'multiline':False]
['text':' Copies the bytes to the buffer and sets the checksum.','line_number':220,'multiline':False]
['text':' Number of data bytes.','line_number':235,'multiline':False]
['text':' This is mostly for testing: stream out contents to a Sink instance.','line_number':238,'multiline':False]
['text':' The class Sink has to have','line_number':239,'multiline':False]
['text':'     void operator()(const void *chunk, uint64_t chunk_size) const;','line_number':240,'multiline':False]
['text':'','line_number':241,'multiline':False]
['text':' Ensures there is some space to write to, returns the amount available.','line_number':269,'multiline':False]
['text':' Records that given amount of bytes is to be appended to the buffer.','line_number':285,'multiline':False]
['text':' Returns the old write position.','line_number':286,'multiline':False]
['text':' Returns the amount of free space.','line_number':306,'multiline':False]
['text':' The bytes are kept in an linked list of the DataBlock instances.','line_number':309,'multiline':False]
['text':' TODO(asmundak): perhaps use mmap to allocate these?','line_number':310,'multiline':False]
['text':' SRC_TOOLS_SINGLEJAR_TRANSIENT_BYTES_H_','line_number':324,'multiline':False]
