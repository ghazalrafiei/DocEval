['text':' Copyright 2016 The Bazel Authors. All rights reserved.','line_number':1,'multiline':False]
['text':'','line_number':2,'multiline':False]
['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':3,'multiline':False]
['text':' you may not use this file except in compliance with the License.','line_number':4,'multiline':False]
['text':' You may obtain a copy of the License at','line_number':5,'multiline':False]
['text':'','line_number':6,'multiline':False]
['text':'    http://www.apache.org/licenses/LICENSE-2.0','line_number':7,'multiline':False]
['text':'','line_number':8,'multiline':False]
['text':' Unless required by applicable law or agreed to in writing, software','line_number':9,'multiline':False]
['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':10,'multiline':False]
['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':11,'multiline':False]
['text':' See the License for the specific language governing permissions and','line_number':12,'multiline':False]
['text':' limitations under the License.','line_number':13,'multiline':False]
['text':' isalpha','line_number':17,'multiline':False]
['text':' wcslen','line_number':18,'multiline':False]
['text':' iswalpha','line_number':19,'multiline':False]
['text':' unique_ptr','line_number':22,'multiline':False]
['text':' Returns true if `path` refers to a directory or (non-dangling) junction.','line_number':52,'multiline':False]
['text':' `path` must be a normalized Windows path, with UNC prefix (and absolute) if','line_number':53,'multiline':False]
['text':' necessary.','line_number':54,'multiline':False]
['text':' Returns true the file or junction at `path` is successfully deleted.','line_number':57,'multiline':False]
['text':' Returns false otherwise, or if `path` doesn't exist or is a directory.','line_number':58,'multiline':False]
['text':' `path` must be a normalized Windows path, with UNC prefix (and absolute) if','line_number':59,'multiline':False]
['text':' necessary.','line_number':60,'multiline':False]
['text':' TODO(laszlocsomor): handle the error mode that is errno=EINTR on Linux.','line_number':88,'multiline':False]
['text':' The pipe HANDLEs can be inherited.','line_number':100,'multiline':False]
['text':' 9 years in the future.','line_number':121,'multiline':False]
['text':' 10 years in the future.','line_number':123,'multiline':False]
['text':' Get attributes, to check if the file exists. (It may still be a dangling','line_number':136,'multiline':False]
['text':' junction.)','line_number':137,'multiline':False]
['text':' lpFileName ','line_number':145,'multiline':True]
['text':' dwDesiredAccess ','line_number':146,'multiline':True]
['text':' dwShareMode ','line_number':147,'multiline':True]
['text':' lpSecurityAttributes ','line_number':148,'multiline':True]
['text':' dwCreationDisposition ','line_number':149,'multiline':True]
['text':' dwFlagsAndAttributes ','line_number':150,'multiline':True]
['text':' Per CreateFile's documentation on MSDN, opening directories requires','line_number':151,'multiline':False]
['text':' the FILE_FLAG_BACKUP_SEMANTICS flag.','line_number':152,'multiline':False]
['text':' hTemplateFile ','line_number':154,'multiline':True]
['text':' Compare the mtime with `near_future_`, not with `GetNow()` or','line_number':168,'multiline':False]
['text':' `distant_future_`.','line_number':169,'multiline':False]
['text':' This way we don't need to call GetNow() every time we want to compare','line_number':170,'multiline':False]
['text':' (and thus convert a SYSTEMTIME to FILETIME), and we also don't need to','line_number':171,'multiline':False]
['text':' worry about potentially unreliable FILETIME equality check (in case it','line_number':172,'multiline':False]
['text':' uses floats or something crazy).','line_number':173,'multiline':False]
['text':' lpFileName ','line_number':188,'multiline':True]
['text':' dwDesiredAccess ','line_number':189,'multiline':True]
['text':' dwShareMode ','line_number':190,'multiline':True]
['text':' lpSecurityAttributes ','line_number':191,'multiline':True]
['text':' dwCreationDisposition ','line_number':192,'multiline':True]
['text':' dwFlagsAndAttributes ','line_number':193,'multiline':True]
['text':' hTemplateFile ','line_number':197,'multiline':True]
['text':' hFile ','line_number':202,'multiline':True]
['text':' lpCreationTime ','line_number':203,'multiline':True]
['text':' lpLastAccessTime ','line_number':204,'multiline':True]
['text':' lpLastWriteTime ','line_number':205,'multiline':True]
['text':' 1 year in FILETIME.','line_number':218,'multiline':False]
['text':' lpFileName ','line_number':234,'multiline':True]
['text':' dwDesiredAccess ','line_number':235,'multiline':True]
['text':' dwShareMode ','line_number':236,'multiline':True]
['text':' lpSecurityAttributes ','line_number':237,'multiline':True]
['text':' dwCreationDisposition ','line_number':238,'multiline':True]
['text':' dwFlagsAndAttributes ','line_number':239,'multiline':True]
['text':' hTemplateFile ','line_number':240,'multiline':True]
['text':' TODO(laszlocsomor): handle the error cases that are errno=EINTR and','line_number':249,'multiline':False]
['text':' errno=EAGAIN on Linux.','line_number':250,'multiline':False]
['text':' mimic read(2) behavior: we can always read 0 bytes from /dev/null','line_number':263,'multiline':False]
['text':' In order for try-imports to be ignored gracefully we need to check for an','line_number':268,'multiline':False]
['text':' error with the path and return false rather than die.','line_number':269,'multiline':False]
['text':' TODO(laszlocsomor): remove the following check; it won't allow opening NUL.','line_number':287,'multiline':False]
['text':' mimic read(2) behavior: we can always read 0 bytes from /dev/null','line_number':314,'multiline':False]
['text':' mimic write(2) behavior with /dev/null','line_number':332,'multiline':False]
['text':' We don't care about the success of this.','line_number':339,'multiline':False]
['text':' lpFileName ','line_number':341,'multiline':True]
['text':' dwDesiredAccess ','line_number':342,'multiline':True]
['text':' dwShareMode ','line_number':343,'multiline':True]
['text':' lpSecurityAttributes ','line_number':344,'multiline':True]
['text':' dwCreationDisposition ','line_number':345,'multiline':True]
['text':' dwFlagsAndAttributes ','line_number':346,'multiline':True]
['text':' hTemplateFile ','line_number':347,'multiline':True]
['text':' TODO(laszlocsomor): respect `perm` and set the file permissions accordingly','line_number':352,'multiline':False]
['text':' Path does not exist.','line_number':404,'multiline':False]
['text':' Path is a directory; unlink(2) also cannot remove directories.','line_number':409,'multiline':False]
['text':' Otherwise it's a junction, remove using RemoveDirectoryW.','line_number':412,'multiline':False]
['text':' Otherwise it's a file, remove using DeleteFileW.','line_number':415,'multiline':False]
['text':' Attempt opening the path, which may be anything -- a file, a directory, a','line_number':430,'multiline':False]
['text':' symlink, even a dangling symlink is fine.','line_number':431,'multiline':False]
['text':' Follow reparse points, getting us that much closer to the real path.','line_number':432,'multiline':False]
['text':' Path does not exist or it's a dangling junction/symlink.','line_number':436,'multiline':False]
['text':' The caller is only interested in whether the file exists, they aren't','line_number':441,'multiline':False]
['text':' interested in its real path. Since we just successfully opened the file','line_number':442,'multiline':False]
['text':' we already know it exists.','line_number':443,'multiline':False]
['text':' Also, GetFinalPathNameByHandleW is slow so avoid calling it if we can.','line_number':444,'multiline':False]
['text':' kMaxPath value: according to MSDN, maximum path length is 32767, and with','line_number':448,'multiline':False]
['text':' an extra null terminator that's exactly 0x8000.','line_number':449,'multiline':False]
['text':' Convert the path to lower-case.','line_number':503,'multiline':False]
['text':' The path doesn't exist or is not a directory.','line_number':551,'multiline':False]
['text':' The only easy way to know if a directory is writable is by attempting to','line_number':555,'multiline':False]
['text':' open a file for writing in it.','line_number':556,'multiline':False]
['text':' File name with Thread ID avoids races among concurrent Bazel processes.','line_number':557,'multiline':False]
['text':' Attempt to open the dummy file for read/write access.','line_number':563,'multiline':False]
['text':' If the file happens to exist, no big deal, we won't overwrite it thanks to','line_number':564,'multiline':False]
['text':' OPEN_ALWAYS.','line_number':565,'multiline':False]
['text':' lpFileName ','line_number':567,'multiline':True]
['text':' dwDesiredAccess ','line_number':568,'multiline':True]
['text':' dwShareMode ','line_number':569,'multiline':True]
['text':' lpSecurityAttributes ','line_number':570,'multiline':True]
['text':' dwCreationDisposition ','line_number':571,'multiline':True]
['text':' dwFlagsAndAttributes ','line_number':572,'multiline':True]
['text':' hTemplateFile ','line_number':573,'multiline':True]
['text':' We couldn't open the file, and not because the dummy file already exists.','line_number':576,'multiline':False]
['text':' Consequently it is because `path` doesn't exist.','line_number':577,'multiline':False]
['text':' The fact that we could open the file, regardless of it existing beforehand','line_number':580,'multiline':False]
['text':' or not, means the directory also exists and we can read/write in it.','line_number':581,'multiline':False]
['text':' The file didn't exist before, but due to OPEN_ALWAYS we created it just','line_number':584,'multiline':False]
['text':' now, so do delete it.','line_number':585,'multiline':False]
['text':' Otherwise the file existed before, leave it alone.','line_number':587,'multiline':False]
['text':' Attempt opening the path, which may be anything -- a file, a directory, a','line_number':592,'multiline':False]
['text':' symlink, even a dangling symlink is fine.','line_number':593,'multiline':False]
['text':' Follow reparse points in order to return false for dangling ones.','line_number':594,'multiline':False]
['text':' No-op on Windows native; unsupported by Cygwin.','line_number':613,'multiline':False]
['text':' fsync always fails on Cygwin with "Permission denied" for some reason.','line_number':614,'multiline':False]
['text':' Since `abs_path` is not a root directory, there should have been at least','line_number':635,'multiline':False]
['text':' one directory above it.','line_number':636,'multiline':False]
['text':' TODO(laszlocsomor): respect `mode` to the extent that it's possible on','line_number':646,'multiline':False]
['text':' Windows; it's currently ignored.','line_number':647,'multiline':False]
['text':' According to MSDN, CreateDirectory's limit without the UNC prefix is','line_number':652,'multiline':False]
['text':' 248 characters (so it could fit another filename before reaching MAX_PATH).','line_number':653,'multiline':False]
['text':' directory doesn't exist','line_number':692,'multiline':False]
['text':' If this is not a junction, delete its contents recursively.','line_number':701,'multiline':False]
['text':' Finally delete this directory/junction too.','line_number':702,'multiline':False]
['text':' Path does not exist.','line_number':724,'multiline':False]
['text':' Path is a directory; unlink(2) also cannot remove directories.','line_number':729,'multiline':False]
['text':' Otherwise it's a junction, remove using RemoveDirectoryW.','line_number':732,'multiline':False]
['text':' Otherwise it's a file, remove using DeleteFileW.','line_number':735,'multiline':False]
['text':' Always add an UNC prefix to ensure we can work with long paths.','line_number':828,'multiline':False]
['text':' Unconditionally add a trailing backslash. We know `wpath` has no trailing','line_number':832,'multiline':False]
['text':' backslash because it comes from AsWindowsPath whose output is always','line_number':833,'multiline':False]
['text':' normalized (see NormalizeWindowsPath).','line_number':834,'multiline':False]
['text':' directory does not exist or is empty','line_number':839,'multiline':False]
['text':' omit prefix ','line_number':845,'multiline':True]
['text':' Always add an UNC prefix to ensure we can work with long paths.','line_number':880,'multiline':False]
['text':' Unconditionally add a trailing backslash. We know `wpath` has no trailing','line_number':884,'multiline':False]
['text':' backslash because it comes from AsWindowsPath whose output is always','line_number':885,'multiline':False]
['text':' normalized (see NormalizeWindowsPath).','line_number':886,'multiline':False]
['text':' directory does not exist or is empty','line_number':891,'multiline':False]
['text':' omit prefix ','line_number':897,'multiline':True]
['text':' namespace blaze_util','line_number':907,'multiline':False]
