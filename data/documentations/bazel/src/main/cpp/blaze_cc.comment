['text':' Copyright 2014 The Bazel Authors. All rights reserved.','line_number':1,'multiline':False]
['text':'','line_number':2,'multiline':False]
['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':3,'multiline':False]
['text':' you may not use this file except in compliance with the License.','line_number':4,'multiline':False]
['text':' You may obtain a copy of the License at','line_number':5,'multiline':False]
['text':'','line_number':6,'multiline':False]
['text':'    http://www.apache.org/licenses/LICENSE-2.0','line_number':7,'multiline':False]
['text':'','line_number':8,'multiline':False]
['text':' Unless required by applicable law or agreed to in writing, software','line_number':9,'multiline':False]
['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':10,'multiline':False]
['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':11,'multiline':False]
['text':' See the License for the specific language governing permissions and','line_number':12,'multiline':False]
['text':' limitations under the License.','line_number':13,'multiline':False]
['text':'','line_number':14,'multiline':False]
['text':' blaze.cc: bootstrap and client code for Blaze server.','line_number':15,'multiline':False]
['text':'','line_number':16,'multiline':False]
['text':' Responsible for:','line_number':17,'multiline':False]
['text':' - extracting the Python, C++ and Java components.','line_number':18,'multiline':False]
['text':' - starting the server or finding the existing one.','line_number':19,'multiline':False]
['text':' - client options parsing.','line_number':20,'multiline':False]
['text':' - passing the argv array, and printing the out/err streams.','line_number':21,'multiline':False]
['text':' - signal handling.','line_number':22,'multiline':False]
['text':' - exiting with the right error/WTERMSIG code.','line_number':23,'multiline':False]
['text':' - debugger + profiler support.','line_number':24,'multiline':False]
['text':' - mutual exclusion between batch invocations.','line_number':25,'multiline':False]
['text':' NOLINT (gRPC requires this)','line_number':44,'multiline':False]
['text':' NOLINT','line_number':48,'multiline':False]
['text':' NOLINT','line_number':52,'multiline':False]
['text':' The following is a treatise on how the interaction between the client and the','line_number':95,'multiline':False]
['text':' server works.','line_number':96,'multiline':False]
['text':'','line_number':97,'multiline':False]
['text':' First, the client unconditionally acquires an flock() lock on','line_number':98,'multiline':False]
['text':' $OUTPUT_BASE/lock then verifies if it has already extracted itself by','line_number':99,'multiline':False]
['text':' checking if the directory it extracts itself to (install base + a checksum)','line_number':100,'multiline':False]
['text':' is present. If not, then it does the extraction. Care is taken that this','line_number':101,'multiline':False]
['text':' process is atomic so that Blazen in multiple output bases do not clash.','line_number':102,'multiline':False]
['text':'','line_number':103,'multiline':False]
['text':' Then the client tries to connect to the currently executing server and kills','line_number':104,'multiline':False]
['text':' it if at least one of the following conditions is true:','line_number':105,'multiline':False]
['text':'','line_number':106,'multiline':False]
['text':' - The server is of the wrong version (as determined by the','line_number':107,'multiline':False]
['text':'   $OUTPUT_BASE/install symlink)','line_number':108,'multiline':False]
['text':' - The server has different startup options than the client wants','line_number':109,'multiline':False]
['text':' - The client wants to run the command in batch mode','line_number':110,'multiline':False]
['text':'','line_number':111,'multiline':False]
['text':' Then, if needed, the client adjusts the install link to indicate which','line_number':112,'multiline':False]
['text':' version of the server it is running.','line_number':113,'multiline':False]
['text':'','line_number':114,'multiline':False]
['text':' In batch mode, the client then simply executes the server while taking care','line_number':115,'multiline':False]
['text':' that the output base lock is kept until it finishes.','line_number':116,'multiline':False]
['text':'','line_number':117,'multiline':False]
['text':' If in server mode, the client starts up a server if needed then sends the','line_number':118,'multiline':False]
['text':' command to the client and streams back stdout and stderr. The output base','line_number':119,'multiline':False]
['text':' lock is released after the command is sent to the server (the server','line_number':120,'multiline':False]
['text':' implements its own locking mechanism).','line_number':121,'multiline':False]
['text':' Synchronization between the client and the server is a little precarious','line_number':123,'multiline':False]
['text':' because the client needs to know the PID of the server and it is not','line_number':124,'multiline':False]
['text':' available using a Java API and we don't have JNI on Windows at the moment,','line_number':125,'multiline':False]
['text':' so the server can't just communicate this over the communication channel.','line_number':126,'multiline':False]
['text':' Thus, a PID file is used, but care needs to be taken that the contents of','line_number':127,'multiline':False]
['text':' this PID file are right.','line_number':128,'multiline':False]
['text':'','line_number':129,'multiline':False]
['text':' Upon server startup, the PID file is written before the client spawns the','line_number':130,'multiline':False]
['text':' server. Thus, when the client can connect, it can be certain that the PID','line_number':131,'multiline':False]
['text':' file is up to date.','line_number':132,'multiline':False]
['text':'','line_number':133,'multiline':False]
['text':' Upon server shutdown, the PID file is deleted using a server shutdown hook.','line_number':134,'multiline':False]
['text':' However, this happens *after* the server stopped listening, so it's possible','line_number':135,'multiline':False]
['text':' that a client has already started up a server and written a new PID file.','line_number':136,'multiline':False]
['text':' In order to avoid this, when the client starts up a new server, it reads the','line_number':137,'multiline':False]
['text':' contents of the PID file and kills the process indicated in it (it could do','line_number':138,'multiline':False]
['text':' with a bit more care, since PIDs can be reused, but for now, we just believe','line_number':139,'multiline':False]
['text':' the PID file)','line_number':140,'multiline':False]
['text':'','line_number':141,'multiline':False]
['text':' Some more interesting scenarios:','line_number':142,'multiline':False]
['text':'','line_number':143,'multiline':False]
['text':' - The server receives a kill signal and it does not have a chance to delete','line_number':144,'multiline':False]
['text':'   the PID file: the client cannot connect, reads the PID file, kills the','line_number':145,'multiline':False]
['text':'   process indicated in it and starts up a new server.','line_number':146,'multiline':False]
['text':'','line_number':147,'multiline':False]
['text':' - The server stopped accepting connections but hasn't quit yet and a new','line_number':148,'multiline':False]
['text':'   client comes around: the new client will kill the server based on the','line_number':149,'multiline':False]
['text':'   PID file before a new server is started up.','line_number':150,'multiline':False]
['text':'','line_number':151,'multiline':False]
['text':' Alternative implementations:','line_number':152,'multiline':False]
['text':'','line_number':153,'multiline':False]
['text':' - Don't deal with PIDs at all. This would make it impossible for the client','line_number':154,'multiline':False]
['text':'   to deliver a SIGKILL to the server after three SIGINTs. It would only be','line_number':155,'multiline':False]
['text':'   possible with gRPC anyway.','line_number':156,'multiline':False]
['text':'','line_number':157,'multiline':False]
['text':' - Have the server check that the PID file contains the correct things','line_number':158,'multiline':False]
['text':'   before deleting them: there is a window of time between checking the file','line_number':159,'multiline':False]
['text':'   and deleting it in which a new server can overwrite the PID file. The','line_number':160,'multiline':False]
['text':'   output base lock cannot be acquired, either, because when starting up a','line_number':161,'multiline':False]
['text':'   new server, the client already holds it.','line_number':162,'multiline':False]
['text':'','line_number':163,'multiline':False]
['text':' - Delete the PID file before stopping to accept connections: then a client','line_number':164,'multiline':False]
['text':'   could come about after deleting the PID file but before stopping accepting','line_number':165,'multiline':False]
['text':'   connections. It would also not be resilient against a dead server that','line_number':166,'multiline':False]
['text':'   left a PID file around.','line_number':167,'multiline':False]
['text':' String string representation of RestartReason.','line_number':169,'multiline':False]
['text':' Cannot actually reach this, but it makes the compiler happy.','line_number':190,'multiline':False]
['text':' Acquire a lock for the server running in this output base. Returns the','line_number':198,'multiline':False]
['text':' number of milliseconds spent waiting for the lock.','line_number':199,'multiline':False]
['text':' Whether there is an active connection to a server.','line_number':202,'multiline':False]
['text':' Connect to the server. Returns if the connection was successful. Only','line_number':205,'multiline':False]
['text':' call this when this object is in disconnected state. If it returns true,','line_number':206,'multiline':False]
['text':' this object will be in connected state.','line_number':207,'multiline':False]
['text':' Send the command line to the server and forward whatever it says to stdout','line_number':210,'multiline':False]
['text':' and stderr. Returns the desired exit code. Only call this when the server','line_number':211,'multiline':False]
['text':' is in connected state.','line_number':212,'multiline':False]
['text':' Disconnects and kills an existing server. Only call this when this object','line_number':222,'multiline':False]
['text':' is in connected state.','line_number':223,'multiline':False]
['text':' Cancel the currently running command. If there is no command currently','line_number':226,'multiline':False]
['text':' running, the result is unspecified. When called, this object must be in','line_number':227,'multiline':False]
['text':' connected state.','line_number':228,'multiline':False]
['text':' Returns information about the actual server process and its configuration.','line_number':231,'multiline':False]
['text':' protects command_id_ . Although we always set it before making the cancel','line_number':244,'multiline':False]
['text':' thread do something with it, the mutex is still useful because it provides','line_number':245,'multiline':False]
['text':' a memory fence.','line_number':246,'multiline':False]
['text':' Pipe that the main thread sends actions to and the cancel thread receives','line_number':249,'multiline':False]
['text':' actions from.','line_number':250,'multiline':False]
['text':'//////////////////////////////////////////////////////////////////////','line_number':266,'multiline':False]
['text':' Global Variables','line_number':267,'multiline':False]
['text':' TODO(laszlocsomor) 2016-11-24: release the `blaze_server` object. Currently','line_number':270,'multiline':False]
['text':' nothing deletes it. Be careful that some functions may call exit(2) or','line_number':271,'multiline':False]
['text':' _exit(2) (attributed with ATTRIBUTE_NORETURN) meaning we have to delete the','line_number':272,'multiline':False]
['text':' objects before those.','line_number':273,'multiline':False]
['text':'//////////////////////////////////////////////////////////////////////','line_number':280,'multiline':False]
['text':' Logic','line_number':281,'multiline':False]
['text':' Escapes colons by replacing them with '_C' and underscores by replacing them','line_number':285,'multiline':False]
['text':' with '_U'. E.g. "name:foo_bar" becomes "name_Cfoo_Ubar"','line_number':286,'multiline':False]
['text':' Returns the JVM command argument array.','line_number':294,'multiline':False]
['text':' e.g. A Blaze server process running in ~/src/build_root (where there's a','line_number':304,'multiline':False]
['text':' ~/src/build_root/WORKSPACE file) will appear in ps(1) as "blaze(src)".','line_number':305,'multiline':False]
['text':' com.google.devtools.build.lib.unsafe.StringUnsafe uses reflection to access','line_number':311,'multiline':False]
['text':' private fields in java.lang.String. The Bazel server requires Java 11, so','line_number':312,'multiline':False]
['text':' this option is known to be supported.','line_number':313,'multiline':False]
['text':' Add JVM arguments particular to building blaze64 and particular JVM','line_number':320,'multiline':False]
['text':' versions.','line_number':321,'multiline':False]
['text':' We put all directories on java.library.path that contain .so/.dll files.','line_number':330,'multiline':False]
['text':' Only add the library path if it's not added yet.','line_number':341,'multiline':False]
['text':' Force use of latin1 for file names.','line_number':352,'multiline':False]
['text':' Force into the root locale to ensure consistent behavior of string','line_number':354,'multiline':False]
['text':' operations across machines (e.g. in the tr_TR locale, capital ASCII 'I'','line_number':355,'multiline':False]
['text':' turns into a special Unicode 'i' when converted to lower case).','line_number':356,'multiline':False]
['text':' https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/util/Locale.html#ROOT','line_number':357,'multiline':False]
['text':' Start JVM so that it listens for a connection from a','line_number':365,'multiline':False]
['text':' JDWP-compliant debugger:','line_number':366,'multiline':False]
['text':' JVM arguments are complete. Now pass in Blaze startup options.','line_number':375,'multiline':False]
['text':' Note that we always use the --flag=ARG form (instead of the --flag ARG one)','line_number':376,'multiline':False]
['text':' so that BlazeRuntime#splitStartupOptions has an easy job.','line_number':377,'multiline':False]
['text':' TODO(b/152047869): Test that whatever the list constructed after this line','line_number':379,'multiline':False]
['text':' is actually a list of parseable startup options.','line_number':380,'multiline':False]
['text':' --batch must come first in the arguments to Java main() because','line_number':390,'multiline':False]
['text':' the code expects it to be at args[0] if it's been set.','line_number':391,'multiline':False]
['text':' Only include this if a value is requested - we rely on the empty case','line_number':433,'multiline':False]
['text':' being "null" to set the programmatic default in the server.','line_number':434,'multiline':False]
['text':' We use this syntax so that the logic in AreStartupOptionsDifferent() that','line_number':468,'multiline':False]
['text':' decides whether the server needs killing is simpler. This is parsed by the','line_number':469,'multiline':False]
['text':' Java code where --noclient_debug and --client_debug=false are equivalent.','line_number':470,'multiline':False]
['text':' Note that --client_debug false (separated by space) won't work either,','line_number':471,'multiline':False]
['text':' because the logic in AreStartupOptionsDifferent() assumes that every','line_number':472,'multiline':False]
['text':' argument is in the --arg=value form.','line_number':473,'multiline':False]
['text':' These flags are passed to the java process only for Blaze reporting','line_number':480,'multiline':False]
['text':' purposes; the real interpretation of the jvm flags occurs when we set up','line_number':481,'multiline':False]
['text':' the java command line.','line_number':482,'multiline':False]
['text':' Pass in invocation policy as a startup argument for batch mode only.','line_number':500,'multiline':False]
['text':' The option sources are transmitted in the following format:','line_number':510,'multiline':False]
['text':' --option_sources=option1:source1:option2:source2:...','line_number':511,'multiline':False]
['text':' Add common command options for logging to the given argument array.','line_number':528,'multiline':False]
['text':' The time in ms the launcher spends before sending the request to the blaze','line_number':534,'multiline':False]
['text':' server.','line_number':535,'multiline':False]
['text':' The time in ms a command had to wait on a busy Blaze server process.','line_number':539,'multiline':False]
['text':' This is part of startup_time.','line_number':540,'multiline':False]
['text':' The time in ms spent on extracting the new blaze version.','line_number':546,'multiline':False]
['text':' This is part of startup_time.','line_number':547,'multiline':False]
['text':' Join the elements of the specified array with NUL's (\0's), akin to the','line_number':559,'multiline':False]
['text':' format of /proc/$PID/cmdline.','line_number':560,'multiline':False]
['text':' The server dir has the connection info - don't allow access by other users.','line_number':568,'multiline':False]
['text':' Do a chdir into the workspace, and die if it fails.','line_number':576,'multiline':False]
['text':' Replace this process with the blaze server. Does not exit.','line_number':591,'multiline':False]
['text':' Replace this process with blaze in standalone/batch mode.','line_number':628,'multiline':False]
['text':' The batch mode blaze process handles the command and exits.','line_number':629,'multiline':False]
['text':' After connecting to the Blaze server, return its PID, or -1 if there was an','line_number':710,'multiline':False]
['text':' error.','line_number':711,'multiline':False]
['text':' Note: there is no race here on startup since the server creates','line_number':713,'multiline':False]
['text':' the pid file strictly before it binds the socket.','line_number':714,'multiline':False]
['text':' Connect to the server process or exit if it doesn't work out.','line_number':726,'multiline':False]
['text':' Give the server two minutes to start up. That's enough to connect with a','line_number':732,'multiline':False]
['text':' debugger.','line_number':733,'multiline':False]
['text':' Print an update at most once every 10 seconds if we are still trying to','line_number':738,'multiline':False]
['text':' connect.','line_number':739,'multiline':False]
['text':' Don't dump the log if we were appending - the user should know where','line_number':765,'multiline':False]
['text':' to find it, and who knows how much content they may have accumulated.','line_number':766,'multiline':False]
['text':' Ensures that any server previously associated with `server_dir` is no longer','line_number':784,'multiline':False]
['text':' running.','line_number':785,'multiline':False]
['text':' Starts up a new server and connects to it. Exits if it didn't work out.','line_number':805,'multiline':False]
['text':' Delete the old command_port file if it already exists. Otherwise we might','line_number':812,'multiline':False]
['text':' run into the race condition that we read the old command_port file before','line_number':813,'multiline':False]
['text':' the new server has written the new file and we try to connect to the old','line_number':814,'multiline':False]
['text':' port, run into a timeout and try again.','line_number':815,'multiline':False]
['text':' Really make sure there's no other server running in this output base (even','line_number':820,'multiline':False]
['text':' an unresponsive one), as that could cause major problems.','line_number':821,'multiline':False]
['text':' cmdline file is used to validate the server running in this server_dir.','line_number':825,'multiline':False]
['text':' There's no server running now so we're safe to unconditionally write this.','line_number':826,'multiline':False]
['text':' Do this here instead of in the daemon so the user can see if it fails.','line_number':830,'multiline':False]
['text':' TODO(ccalvarin) when --batch is gone and the startup_options field in the','line_number':854,'multiline':False]
['text':' gRPC message is always set, there is no reason for client options that are','line_number':855,'multiline':False]
['text':' not used at server startup to be part of the startup command line. The','line_number':856,'multiline':False]
['text':' server command line difference logic can be simplified then.','line_number':857,'multiline':False]
['text':' Internally, -XX:HeapDumpPath is set automatically via the user's TMPDIR','line_number':861,'multiline':False]
['text':' environment variable. Since that can change based on the shell, we','line_number':862,'multiline':False]
['text':' tolerate changes to it. Note that an explicit setting of','line_number':863,'multiline':False]
['text':' -XX:HeapDumpPath via --host_jvm_args *will* trigger a restart.','line_number':864,'multiline':False]
['text':' Split arg based on the first "=" if one exists in arg.','line_number':867,'multiline':False]
['text':' Returns true if the server needs to be restarted to accommodate changes','line_number':875,'multiline':False]
['text':' between the two argument lists.','line_number':876,'multiline':False]
['text':' We need not worry about one side missing an argument and the other side','line_number':880,'multiline':False]
['text':' having the default value, since this command line is the canonical one for','line_number':881,'multiline':False]
['text':' this version of Bazel: either the default value is listed explicitly or it','line_number':882,'multiline':False]
['text':' is not, but this has nothing to do with the user's command line: it is','line_number':883,'multiline':False]
['text':' defined by GetServerExeArgs(). Same applies for argument ordering.','line_number':884,'multiline':False]
['text':' Facts and implications:','line_number':892,'multiline':False]
['text':' (a) We already verified (with EnsureCorrectRunningVersion) that the old and','line_number':893,'multiline':False]
['text':'     new server versions are the same. Therefore we know that','line_number':894,'multiline':False]
['text':'     'running_server_args' and 'requested_args' follow the same ordering for','line_number':895,'multiline':False]
['text':'     flags, the same logic of deduplicating vs. not deduplicating flags, the','line_number':896,'multiline':False]
['text':'     same format of canonicalizing flags, etc.','line_number':897,'multiline':False]
['text':' (b) Some startup flags may come from user bazelrc files.','line_number':898,'multiline':False]
['text':' (c) Because of (b), the ordering of flags doesn't matter, because if the','line_number':899,'multiline':False]
['text':'     user flips two "startup" lines in their bazelrc, that doesn't change','line_number':900,'multiline':False]
['text':'     the effective set of startup flags.','line_number':901,'multiline':False]
['text':' (d) Because of (b), some flags may have repeated values (e.g','line_number':902,'multiline':False]
['text':'     --host_jvm_args="foo" twice) so we cannot simply use two sets and take','line_number':903,'multiline':False]
['text':'     the set difference, but must consider the occurrences of each flag.','line_number':904,'multiline':False]
['text':' remove one instance','line_number':915,'multiline':False]
['text':' Kills the running Blaze server, if any, if the startup options do not match.','line_number':940,'multiline':False]
['text':' Returns true if the server has been killed.','line_number':941,'multiline':False]
['text':' No, /proc/$PID/cmdline does not work, because it is limited to 4K. Even','line_number':954,'multiline':False]
['text':' worse, its behavior differs slightly between kernels (in some, when longer','line_number':955,'multiline':False]
['text':' command lines are truncated, the last 4 bytes are replaced with','line_number':956,'multiline':False]
['text':' "..." + NUL.','line_number':957,'multiline':False]
['text':' These strings contain null-separated command line arguments. If they are','line_number':961,'multiline':False]
['text':' the same, the server can stay alive, otherwise, it needs shuffle off this','line_number':962,'multiline':False]
['text':' mortal coil.','line_number':963,'multiline':False]
['text':' Kills the old running server if it is not the same version as us,','line_number':975,'multiline':False]
['text':' dealing with various combinations of installation scheme','line_number':976,'multiline':False]
['text':' (installation symlink and older MD5_MANIFEST contents).','line_number':977,'multiline':False]
['text':' This function requires that the installation be complete, and the','line_number':978,'multiline':False]
['text':' server lock acquired.','line_number':979,'multiline':False]
['text':' Read the previous installation's semaphore symlink in output_base. If the','line_number':983,'multiline':False]
['text':' target dirs don't match, or if the symlink was not present, then kill any','line_number':984,'multiline':False]
['text':' running servers. Lastly, symlink to our installation so others know which','line_number':985,'multiline':False]
['text':' installation is running.','line_number':986,'multiline':False]
['text':' Update the mtime of the install base so that cleanup tools can','line_number':1010,'multiline':False]
['text':' find install bases that haven't been used for a long time','line_number':1011,'multiline':False]
['text':' Runs the launcher in client/server mode. Ensures that there's indeed a','line_number':1025,'multiline':False]
['text':' running server, then forwards the user's command to the server and the','line_number':1026,'multiline':False]
['text':' server's response back to the user. Does not return - exits via exit or','line_number':1027,'multiline':False]
['text':' signal.','line_number':1028,'multiline':False]
['text':' Check for the case when the workspace directory deleted and then gets','line_number':1043,'multiline':False]
['text':' recreated while the server is running.','line_number':1044,'multiline':False]
['text':' If server_cwd is nullptr, GetProcessCWD failed. This notably occurs when','line_number':1048,'multiline':False]
['text':' running under Docker because then readlink(/proc/[pid]/cwd) returns','line_number':1049,'multiline':False]
['text':' EPERM.','line_number':1050,'multiline':False]
['text':' Docker issue #6687 (https://github.com/docker/docker/issues/6687) fixed','line_number':1051,'multiline':False]
['text':' this, but one still needs the --cap-add SYS_PTRACE command line flag, at','line_number':1052,'multiline':False]
['text':' least according to the discussion on Docker issue #6800','line_number':1053,'multiline':False]
['text':' (https://github.com/docker/docker/issues/6687), and even then, it's a','line_number':1054,'multiline':False]
['text':' non-default Docker flag. Given that this occurs only in very weird','line_number':1055,'multiline':False]
['text':' cases, it's better to assume that everything is alright if we can't get','line_number':1056,'multiline':False]
['text':' the cwd.','line_number':1057,'multiline':False]
['text':' changed','line_number':1060,'multiline':False]
['text':' deleted.','line_number':1061,'multiline':False]
['text':' There's a distant possibility that the two paths look the same yet are','line_number':1062,'multiline':False]
['text':' actually different because the two processes have different mount','line_number':1063,'multiline':False]
['text':' tables.','line_number':1064,'multiline':False]
['text':' Wall clock time since process startup.','line_number':1076,'multiline':False]
['text':' Parse the options.','line_number':1091,'multiline':False]
['text':' Updates the parsed startup options and global config to fill in defaults.','line_number':1116,'multiline':False]
['text':' The default install_base is <output_user_root>/install/<md5(blaze)>','line_number':1120,'multiline':False]
['text':' but if an install_base is specified on the command line, we use that as','line_number':1121,'multiline':False]
['text':' the base instead.','line_number':1122,'multiline':False]
['text':' Prepares the environment to be suitable to start a JVM.','line_number':1182,'multiline':False]
['text':' Changes made to the environment in this function *will not* be part','line_number':1183,'multiline':False]
['text':' of '--client_env'.','line_number':1184,'multiline':False]
['text':' Make sure all existing environment variables appear as part of the','line_number':1188,'multiline':False]
['text':' resulting map unless they are overridden below by UNSET values.','line_number':1189,'multiline':False]
['text':'','line_number':1190,'multiline':False]
['text':' Even though the map we return is intended to represent a "delta" of','line_number':1191,'multiline':False]
['text':' environment variables to modify the current process, we may actually use','line_number':1192,'multiline':False]
['text':' such map to configure a process from scratch (via interfaces like execvpe','line_number':1193,'multiline':False]
['text':' or posix_spawn), so we need to inherit any untouched variables.','line_number':1194,'multiline':False]
['text':' Ignore possibly-bad environment. We don't control what we see in this','line_number':1199,'multiline':False]
['text':' global variable, so it could be invalid.','line_number':1200,'multiline':False]
['text':' Fix for bug: if ulimit -s and LD_ASSUME_KERNEL are both','line_number':1209,'multiline':False]
['text':' specified, the JVM fails to create threads.  See thread_stack_regtest.','line_number':1210,'multiline':False]
['text':' This is also provoked by LD_LIBRARY_PATH=/usr/lib/debug,','line_number':1211,'multiline':False]
['text':' or anything else that causes the JVM to use LinuxThreads.','line_number':1212,'multiline':False]
['text':' These would override --host_jvm_args','line_number':1222,'multiline':False]
['text':' TODO(bazel-team):  We've also seen a failure during loading (creating','line_number':1231,'multiline':False]
['text':' threads?) when ulimit -Hs 8192.  Characterize that and check for it here.','line_number':1232,'multiline':False]
['text':' Make the JVM use ISO-8859-1 for parsing its command line because "blaze','line_number':1234,'multiline':False]
['text':' run" doesn't handle non-ASCII command line arguments. This is apparently','line_number':1235,'multiline':False]
['text':' the most reliable way to select the platform default encoding.','line_number':1236,'multiline':False]
['text':'','line_number':1237,'multiline':False]
['text':' On Linux, only do this if the locale is available to avoid the JVM','line_number':1238,'multiline':False]
['text':' falling back to ASCII-only mode.','line_number':1239,'multiline':False]
['text':' ISO-8859-1 locale not available, use whatever the user has defined.','line_number':1246,'multiline':False]
['text':' This happens during our integration tests, but thats okay, as we won't','line_number':1272,'multiline':False]
['text':' log the invocation anyway.','line_number':1273,'multiline':False]
['text':' Bazel's basil leaf and B-shaped logo at initial release, back in 2015. The','line_number':1306,'multiline':False]
['text':' new heart shaped logo was unveiled in 2017:','line_number':1307,'multiline':False]
['text':' https://blog.bazel.build/2017/07/05/new-logo-and-homepage.html','line_number':1308,'multiline':False]
['text':' TODO(b/134525510): Connected() can return false when the server process','line_number':1394,'multiline':False]
['text':' is alive but unresponsive, so bailing early here might not always be the','line_number':1395,'multiline':False]
['text':' right thing to do.','line_number':1396,'multiline':False]
['text':' When spawning the server's JVM process, we normally set argv[0] to','line_number':1412,'multiline':False]
['text':' "bazel(workspace)". On OpenBSD, doing so causes the JVM process to fail','line_number':1413,'multiline':False]
['text':' during startup; ld.so fails to find a shared library that exists in','line_number':1414,'multiline':False]
['text':' /usr/local/jdk-1.8.0/jre/lib/amd64. Setting LD_LIBRARY_PATH does not help,','line_number':1415,'multiline':False]
['text':' but setting argv[0] to the JVM binary's path','line_number':1416,'multiline':False]
['text':' (/usr/local/jdk-1.8.0/bin/java) allows the JVM process to run. The JVM','line_number':1417,'multiline':False]
['text':' process apparently tries to compute a path to where the shared libraries','line_number':1418,'multiline':False]
['text':' should be, via a relative path from the JVM executable's path -- but','line_number':1419,'multiline':False]
['text':' OpenBSD does not provide a way for a process to determine a path to its','line_number':1420,'multiline':False]
['text':' own executable, and so the JVM falls back to searching the PATH for','line_number':1421,'multiline':False]
['text':' argv[0], which of course fails when argv[0] looks like "bazel(workspace)".','line_number':1422,'multiline':False]
['text':'','line_number':1423,'multiline':False]
['text':' TODO(aldersondrive): This hack is unnecessary on FreeBSD, but the relevant','line_number':1424,'multiline':False]
['text':' OpenJDK code doesn't seem to include anything FreeBSD-specific.','line_number':1425,'multiline':False]
['text':' Investigate why and possibly remove this.','line_number':1426,'multiline':False]
['text':' Logging must be set first to assure no log statements are missed.','line_number':1455,'multiline':False]
['text':' Only check and warn for from-desktop start if there were no args.','line_number':1477,'multiline':False]
['text':' In this case the user probably clicked Bazel's icon (as opposed to either','line_number':1478,'multiline':False]
['text':' starting it from a terminal, or as a subprocess with args, or on Windows','line_number':1479,'multiline':False]
['text':' from a ".lnk" file with some args).','line_number':1480,'multiline':False]
['text':' Best-effort operation to raise the resource limits from soft to hard.  We','line_number':1484,'multiline':False]
['text':' do this early during the main program instead of just before execing the','line_number':1485,'multiline':False]
['text':' Blaze server binary, because it's easier (for testing purposes) and because','line_number':1486,'multiline':False]
['text':' the Blaze client also benefits from this (e.g. during installation).','line_number':1487,'multiline':False]
['text':' Must be done before command line parsing.','line_number':1491,'multiline':False]
['text':' ParseOptionsOrDie already populate --client_env, so detect bash before it','line_number':1492,'multiline':False]
['text':' happens.','line_number':1493,'multiline':False]
['text':' if defined(_WIN32) || defined(__CYGWIN__)','line_number':1495,'multiline':False]
['text':' If client_debug was false, this is ignored, so it's accurate.','line_number':1503,'multiline':False]
['text':' Only start a server when in a workspace because otherwise we won't do more','line_number':1514,'multiline':False]
['text':' than emit a help message.','line_number':1515,'multiline':False]
['text':' There might be a mismatch between std::string and the string type returned','line_number':1539,'multiline':False]
['text':' from protos. This function is the safe way to compare such strings.','line_number':1540,'multiline':False]
['text':' use strncmp insted of strcmp to deal with null bytes in the cookie.','line_number':1544,'multiline':False]
['text':' Make sure that we are being directed to localhost','line_number':1611,'multiline':False]
['text':' Bazel client and server always run on the same machine and communicate','line_number':1631,'multiline':False]
['text':' locally over gRPC; so we want to ignore any configured proxies when setting','line_number':1632,'multiline':False]
['text':' up a gRPC channel to the server.','line_number':1633,'multiline':False]
['text':' Cancellation works as follows:','line_number':1648,'multiline':False]
['text':'','line_number':1649,'multiline':False]
['text':' When the user presses Ctrl-C, a SIGINT is delivered to the client, which is','line_number':1650,'multiline':False]
['text':' translated into a BlazeServer::Cancel() call. Since it's not a good idea to','line_number':1651,'multiline':False]
['text':' do significant work in signal handlers, all it does is write a byte to an','line_number':1652,'multiline':False]
['text':' unnamed pipe.','line_number':1653,'multiline':False]
['text':'','line_number':1654,'multiline':False]
['text':' This unnamed pipe is used to communicate with the cancel thread. Whenever','line_number':1655,'multiline':False]
['text':' something interesting happens, a byte is written into it, which is read by','line_number':1656,'multiline':False]
['text':' the cancel thread. These commands are available:','line_number':1657,'multiline':False]
['text':'','line_number':1658,'multiline':False]
['text':' - NOP','line_number':1659,'multiline':False]
['text':' - JOIN. The cancel thread needs to be terminated.','line_number':1660,'multiline':False]
['text':' - CANCEL. If the command ID is already available, a cancel request is sent.','line_number':1661,'multiline':False]
['text':' - COMMAND_ID_RECEIVED. The client learned the command ID from the server.','line_number':1662,'multiline':False]
['text':'   If there is a pending cancellation request, it is acted upon.','line_number':1663,'multiline':False]
['text':'','line_number':1664,'multiline':False]
['text':' The only data the cancellation thread shares with the main thread is the','line_number':1665,'multiline':False]
['text':' file descriptor for receiving commands and command_id_, the latter of which','line_number':1666,'multiline':False]
['text':' is protected by a mutex, which mainly serves as a memory fence.','line_number':1667,'multiline':False]
['text':'','line_number':1668,'multiline':False]
['text':' The cancellation thread is joined at the end of the execution of the command.','line_number':1669,'multiline':False]
['text':' The main thread wakes it up just so that it can finish (using the JOIN','line_number':1670,'multiline':False]
['text':' action)','line_number':1671,'multiline':False]
['text':'','line_number':1672,'multiline':False]
['text':' It's conceivable that the server is busy and thus it cannot service the','line_number':1673,'multiline':False]
['text':' cancellation request. In that case, we simply ignore the failure and the both','line_number':1674,'multiline':False]
['text':' the server and the client go on as if nothing had happened (except that this','line_number':1675,'multiline':False]
['text':' Ctrl-C still counts as a SIGINT, three of which result in a SIGKILL being','line_number':1676,'multiline':False]
['text':' delivered to the server)','line_number':1677,'multiline':False]
['text':' There isn't a lot we can do if this request fails','line_number':1731,'multiline':False]
['text':' This will wait indefinitely until the server shuts down','line_number':1739,'multiline':False]
['text':' TODO(b/111179585): Swallowing these responses loses potential messages from','line_number':1755,'multiline':False]
['text':' the server, which may be useful in understanding why a shutdown failed.','line_number':1756,'multiline':False]
['text':' However, we don't want to spam the user in case the shutdown works','line_number':1757,'multiline':False]
['text':' perfectly fine, so we discard the information. For --noblock_for_lock, this','line_number':1758,'multiline':False]
['text':' means that we don't output the PID of the competing client, which isn't','line_number':1759,'multiline':False]
['text':' great. We could either store the stderr_output returned by the server and','line_number':1760,'multiline':False]
['text':' output it in the case of a failed shutdown, or we could add a','line_number':1761,'multiline':False]
['text':' special-cased field in RunResponse for this purpose.','line_number':1762,'multiline':False]
['text':' necessary for destroying client_ below to be effective','line_number':1768,'multiline':False]
['text':' Check the final message from the server to see if it exited because','line_number':1770,'multiline':False]
['text':' another command holds the client lock.','line_number':1771,'multiline':False]
['text':' If for any reason the shutdown request failed to initiate a termination,','line_number':1781,'multiline':False]
['text':' this is a bug. Yes, this means the server won't be forced to shut down,','line_number':1782,'multiline':False]
['text':' which might be the preferred behavior, but it will help identify the bug.','line_number':1783,'multiline':False]
['text':' Eagerly disconnect to let the server stop promptly.  Otherwise it may','line_number':1787,'multiline':False]
['text':' wait $GRPC_CLIENT_CHANNEL_BACKUP_POLL_INTERVAL_MS until we go away.','line_number':1788,'multiline':False]
['text':' See http://b/143860035.','line_number':1789,'multiline':False]
['text':' Wait for the server process to terminate (if we know the server PID).','line_number':1792,'multiline':False]
['text':' If it does not terminate itself gracefully within 1m, terminate it.','line_number':1793,'multiline':False]
['text':' Release the server lock because the gRPC handles concurrent clients just','line_number':1853,'multiline':False]
['text':' fine. Note that this may result in two "waiting for other client" messages','line_number':1854,'multiline':False]
['text':' (one during server startup and one emitted by the server)','line_number':1855,'multiline':False]
['text':' to_stdout ','line_number':1888,'multiline':True]
['text':' to_stdout ','line_number':1897,'multiline':True]
['text':' necessary for destroying client_ below to be effective','line_number':1920,'multiline':False]
['text':' If the server claims it is shutting down (eg the command was "shutdown"),','line_number':1922,'multiline':False]
['text':' wait for it to exit.','line_number':1923,'multiline':False]
['text':' Eagerly disconnect to let the server stop promptly.  Otherwise it may','line_number':1925,'multiline':False]
['text':' wait $GRPC_CLIENT_CHANNEL_BACKUP_POLL_INTERVAL_MS until we go away.','line_number':1926,'multiline':False]
['text':' See http://b/143860035.','line_number':1927,'multiline':False]
['text':' Clear environment variables before setting the requested ones so that','line_number':1958,'multiline':False]
['text':' users can still explicitly override the clearing.','line_number':1959,'multiline':False]
['text':' Execute the requested program, but before doing so, flush everything','line_number':1975,'multiline':False]
['text':' we still have to say.','line_number':1976,'multiline':False]
['text':' We'll exit with exit code SIGPIPE on Unixes due to PropagateSignalOnExit()','line_number':1986,'multiline':False]
['text':' namespace blaze','line_number':2004,'multiline':False]
