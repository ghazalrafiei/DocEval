['text':' Copyright 2021 The Bazel Authors. All rights reserved.','line_number':1,'multiline':False]
['text':'','line_number':2,'multiline':False]
['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':3,'multiline':False]
['text':' you may not use this file except in compliance with the License.','line_number':4,'multiline':False]
['text':' You may obtain a copy of the License at','line_number':5,'multiline':False]
['text':'','line_number':6,'multiline':False]
['text':'    http://www.apache.org/licenses/LICENSE-2.0','line_number':7,'multiline':False]
['text':'','line_number':8,'multiline':False]
['text':' Unless required by applicable law or agreed to in writing, software','line_number':9,'multiline':False]
['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':10,'multiline':False]
['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':11,'multiline':False]
['text':' See the License for the specific language governing permissions and','line_number':12,'multiline':False]
['text':' limitations under the License.','line_number':13,'multiline':False]
['text':' Since it is a dwp_output we can assume that it always','line_number':59,'multiline':False]
['text':' ends with .dwp suffix, because it is declared so in outputs','line_number':60,'multiline':False]
['text':' attribute.','line_number':61,'multiline':False]
['text':' This long loop is a substitution for recursion, which is not currently supported in Starlark.','line_number':70,'multiline':False]
['text':' Step 1: generate our batches. We currently break into arbitrary batches of fixed maximum','line_number':76,'multiline':False]
['text':' input counts, but we can always apply more intelligent heuristics if the need arises.','line_number':77,'multiline':False]
['text':' add_all expands all directories to their contained files, see','line_number':85,'multiline':False]
['text':' https://bazel.build/rules/lib/builtins/Args#add_all. add doesn't','line_number':86,'multiline':False]
['text':' do that, so using add_all on the one-item list here allows us to','line_number':87,'multiline':False]
['text':' find dwo files in directories.','line_number':88,'multiline':False]
['text':' Step 2: given the batches, create the actions.','line_number':94,'multiline':False]
['text':' If we have multiple batches, make them all intermediate actions, then pipe their outputs','line_number':96,'multiline':False]
['text':' into an additional level.','line_number':97,'multiline':False]
['text':' This is to fix buildifier errors, even though we should never reach this part of the code.','line_number':117,'multiline':False]
['text':' No inputs? Just generate a trivially empty .dwp.','line_number':121,'multiline':False]
['text':'','line_number':122,'multiline':False]
['text':' Note this condition automatically triggers for any build where fission is disabled.','line_number':123,'multiline':False]
['text':' Because rules referencing .dwp targets may be invoked with or without fission, we need','line_number':124,'multiline':False]
['text':' to support .dwp generation even when fission is disabled. Since no actual functionality','line_number':125,'multiline':False]
['text':' is expected then, an empty file is appropriate.','line_number':126,'multiline':False]
['text':' We apply a hierarchical action structure to limit the maximum number of inputs to any','line_number':132,'multiline':False]
['text':' single action.','line_number':133,'multiline':False]
['text':'','line_number':134,'multiline':False]
['text':' While the dwp tool consumes .dwo files, it can also consume intermediate .dwp files,','line_number':135,'multiline':False]
['text':' allowing us to split a large input set into smaller batches of arbitrary size and order.','line_number':136,'multiline':False]
['text':' Aside from the parallelism performance benefits this offers, this also reduces input','line_number':137,'multiline':False]
['text':' size requirements: if a.dwo, b.dwo, c.dwo, and e.dwo are each 1 KB files, we can apply','line_number':138,'multiline':False]
['text':' two intermediate actions DWP(a.dwo, b.dwo) --> i1.dwp and DWP(c.dwo, e.dwo) --> i2.dwp.','line_number':139,'multiline':False]
['text':' When we then apply the final action DWP(i1.dwp, i2.dwp) --> finalOutput.dwp, the inputs','line_number':140,'multiline':False]
['text':' to this action will usually total far less than 4 KB.','line_number':141,'multiline':False]
['text':'','line_number':142,'multiline':False]
['text':' The actions form an n-ary tree with n == MAX_INPUTS_PER_DWP_ACTION. The tree is fuller','line_number':143,'multiline':False]
['text':' at the leaves than the root, but that both increases parallelism and reduces the final','line_number':144,'multiline':False]
['text':' action's input size.','line_number':145,'multiline':False]
['text':' generate_hidden_top_level_group','line_number':219,'multiline':False]
['text':' TODO(b/198254254): Add Legacyexternalrunfiles if necessary.','line_number':229,'multiline':False]
['text':' If the binary and the DLL don't belong to the same package or the DLL is a source file,','line_number':286,'multiline':False]
['text':' we should copy the DLL to the binary's directory.','line_number':287,'multiline':False]
['text':' If the library is already in the same directory as the binary, we don't need to copy it,','line_number':298,'multiline':False]
['text':' but we still add it to the result.','line_number':299,'multiline':False]
['text':' Entries in unused_dynamic_linker_inputs will be marked None if they are','line_number':358,'multiline':False]
['text':' used','line_number':359,'multiline':False]
['text':' Unlike Unix on Windows every dynamic dependency must be linked to the','line_number':398,'multiline':False]
['text':' main binary, even indirect ones that are dependencies of direct','line_number':399,'multiline':False]
['text':' dynamic dependencies of this binary.','line_number':400,'multiline':False]
['text':' Determine the libraries to link in.','line_number':447,'multiline':False]
['text':' First libraries from srcs. Shared library artifacts here are substituted with mangled symlink','line_number':448,'multiline':False]
['text':' artifacts generated by getDynamicLibraryLink(). This is done to minimize number of -rpath','line_number':449,'multiline':False]
['text':' entries during linking process.','line_number':450,'multiline':False]
['text':' Note: Current Starlark API supports either dynamic or static linking modes,','line_number':508,'multiline':False]
['text':' even though there are more(LEGACY_FULL_STATIC, LEGACY_MOSTLY_STATIC_LIBRARIES) cc_binary','line_number':509,'multiline':False]
['text':' only uses dynamic or static modes. So instead of adding more native footprint','line_number':510,'multiline':False]
['text':' we can use what is already supported.','line_number':511,'multiline':False]
['text':' It is highly unlikely that cc_binary will start using legacy modes,','line_number':512,'multiline':False]
['text':' but if in case it does, code needs to be modified to support it.','line_number':513,'multiline':False]
['text':' TODO(b/198254254): Add a check if linkshared value is explicitly specified.','line_number':579,'multiline':False]
['text':' if ctx.attr.linkshared:','line_number':580,'multiline':False]
['text':'     fail("Do not use 'linkshared' to build a shared library. Use cc_shared_library instead.")','line_number':581,'multiline':False]
['text':' TODO(b/198254254): Fill empty providers if needed.','line_number':583,'multiline':False]
['text':' TODO(b/198254254): Fill in empty providers if needed.','line_number':597,'multiline':False]
['text':' If cc_binary includes "linkshared=1" then gcc will be invoked with','line_number':598,'multiline':False]
['text':' linkopt "-shared", which causes the result of linking to be a shared library.','line_number':599,'multiline':False]
['text':' For linkshared=1 we used to force users to specify the file extension manually, as part of','line_number':600,'multiline':False]
['text':' the target name.','line_number':601,'multiline':False]
['text':' This is no longer necessary, the toolchain can figure out the correct file extensions.','line_number':602,'multiline':False]
['text':' objects','line_number':651,'multiline':False]
['text':' pic_objects','line_number':652,'multiline':False]
['text':' Allows the dynamic library generated for code of test targets to be linked separately.','line_number':657,'multiline':False]
['text':' When linking the object files directly into the resulting binary, we do not need','line_number':662,'multiline':False]
['text':' library-level link outputs; thus, we do not let CcCompilationHelper produce link outputs','line_number':663,'multiline':False]
['text':' (either shared object files or archives) for a non-library link type [*], and add','line_number':664,'multiline':False]
['text':' the object files explicitly in determineLinkerArguments.','line_number':665,'multiline':False]
['text':'','line_number':666,'multiline':False]
['text':' When linking the object files into their own library, we want CcCompilationHelper to','line_number':667,'multiline':False]
['text':' take care of creating the library link outputs for us, so we need to set the link','line_number':668,'multiline':False]
['text':' type to STATIC_LIBRARY.','line_number':669,'multiline':False]
['text':'','line_number':670,'multiline':False]
['text':' [*] The only library link type is STATIC_LIBRARY. EXECUTABLE specifies a normal','line_number':671,'multiline':False]
['text':' cc_binary output, while DYNAMIC_LIBRARY is a cc_binary rules that produces an','line_number':672,'multiline':False]
['text':' output matching a shared object, for example cc_binary(name="foo.so", ...) on linux.','line_number':673,'multiline':False]
['text':' Make copy of a list, to avoid mutating frozen values.','line_number':694,'multiline':False]
['text':' On Windows, if GENERATE_PDB_FILE feature is enabled','line_number':714,'multiline':False]
['text':' then a pdb file will be built along with the executable.','line_number':715,'multiline':False]
['text':' Also add all shared libraries from srcs.','line_number':753,'multiline':False]
['text':'shared_libraries','line_number':754,'multiline':False]
['text':'dynamic_library_symlink_path = library.short_path,','line_number':760,'multiline':False]
['text':' Create the stripped binary but don't add it to filesToBuild; it's only built when requested.','line_number':766,'multiline':False]
['text':' If the binary is linked dynamically and COPY_DYNAMIC_LIBRARIES_TO_BINARY is enabled, collect','line_number':784,'multiline':False]
['text':' all the dynamic libraries we need at runtime. Then copy these libraries next to the binary.','line_number':785,'multiline':False]
['text':' TODO(b/198254254)(bazel-team): Do we need to put original shared libraries (along with','line_number':794,'multiline':False]
['text':' mangled symlinks) into the RunfilesSupport object? It does not seem','line_number':795,'multiline':False]
['text':' logical since all symlinked libraries will be linked anyway and would','line_number':796,'multiline':False]
['text':' not require manual loading but if we do, then we would need to collect','line_number':797,'multiline':False]
['text':' their names and use a different constructor below.','line_number':798,'multiline':False]
['text':' TODO(b/198254254): Add ExecutionInfo.','line_number':829,'multiline':False]
['text':' buildifier: disable=unused-variable','line_number':830,'multiline':False]
['text':' If PDB file is generated by the link action, we add it to pdb_file output group','line_number':833,'multiline':False]
['text':' For consistency and readability.','line_number':840,'multiline':False]
['text':' TODO(b/198254254): SetRunfilesSupport if needed.','line_number':859,'multiline':False]
['text':' We construct DefaultInfo here, as other cc_binary-like rules (cc_test) need','line_number':900,'multiline':False]
['text':' a different DefaultInfo.','line_number':901,'multiline':False]
['text':' We construct RunEnvironmentInfo here as well.','line_number':908,'multiline':False]
['text':' cc_binary does not have env_inherit attr.','line_number':911,'multiline':False]
