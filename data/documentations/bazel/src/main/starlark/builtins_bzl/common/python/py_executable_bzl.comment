['text':' Copyright 2022 The Bazel Authors. All rights reserved.','line_number':1,'multiline':False]
['text':'','line_number':2,'multiline':False]
['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':3,'multiline':False]
['text':' you may not use this file except in compliance with the License.','line_number':4,'multiline':False]
['text':' You may obtain a copy of the License at','line_number':5,'multiline':False]
['text':'','line_number':6,'multiline':False]
['text':'    http://www.apache.org/licenses/LICENSE-2.0','line_number':7,'multiline':False]
['text':'','line_number':8,'multiline':False]
['text':' Unless required by applicable law or agreed to in writing, software','line_number':9,'multiline':False]
['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':10,'multiline':False]
['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':11,'multiline':False]
['text':' See the License for the specific language governing permissions and','line_number':12,'multiline':False]
['text':' limitations under the License.','line_number':13,'multiline':False]
['text':' Non-Google-specific attributes for executables','line_number':55,'multiline':False]
['text':' These attributes are for rules that accept Python sources.','line_number':56,'multiline':False]
['text':' TODO(b/203567235): In the Java impl, any file is allowed. While marked','line_number':62,'multiline':False]
['text':' label, it is more treated as a string, and doesn't have to refer to','line_number':63,'multiline':False]
['text':' anything that exists because it gets treated as suffix-search string','line_number':64,'multiline':False]
['text':' over `srcs`.','line_number':65,'multiline':False]
['text':' TODO(b/203567235): In Google, this attribute is deprecated, and can','line_number':75,'multiline':False]
['text':' only effectively be PY3. Externally, with Bazel, this attribute has','line_number':76,'multiline':False]
['text':' a separate story.','line_number':77,'multiline':False]
['text':' TODO(b/203567235): In the Java impl, the default comes from','line_number':79,'multiline':False]
['text':' --python_version. Not clear what the Starlark equivalent is.','line_number':80,'multiline':False]
['text':' NOTE: Some tests care about the order of these values.','line_number':82,'multiline':False]
['text':' The debugger dependency should be prevented by select() config elsewhere,','line_number':127,'multiline':False]
['text':' but just to be safe, also guard against adding it to the output here.','line_number':128,'multiline':False]
['text':' TODO: This should use the configuration instead of the Bazel OS.','line_number':198,'multiline':False]
['text':' TODO(b/208657718): Remove output_sources from the default outputs','line_number':204,'multiline':False]
['text':' once the depot is cleaned up.','line_number':205,'multiline':False]
['text':' Bazel has --python_path. This flag has a computed default of "python" when','line_number':222,'multiline':False]
['text':' its actual default is null (see','line_number':223,'multiline':False]
['text':' BazelPythonConfiguration.java#getPythonPath). This flag is only used if','line_number':224,'multiline':False]
['text':' toolchains are not enabled and `--python_top` isn't set. Note that Google','line_number':225,'multiline':False]
['text':' used to have a variant of this named --python_binary, but it has since','line_number':226,'multiline':False]
['text':' been removed.','line_number':227,'multiline':False]
['text':'','line_number':228,'multiline':False]
['text':' TOOD(bazelbuild/bazel#7901): Remove this once --python_path flag is removed.','line_number':229,'multiline':False]
['text':' Clear these just in case','line_number':235,'multiline':False]
['text':' Google code path','line_number':239,'multiline':False]
['text':' List of files','line_number':246,'multiline':False]
['text':' List of depsets','line_number':247,'multiline':False]
['text':' Optional PyRuntimeInfo: The runtime found from toolchain resolution.','line_number':268,'multiline':False]
['text':' This may be None because, within Google, toolchain resolution isn't','line_number':269,'multiline':False]
['text':' yet enabled.','line_number':270,'multiline':False]
['text':' Optional PyRuntimeInfo: The runtime that should be used. When','line_number':272,'multiline':False]
['text':' toolchain resolution is enabled, this is the same as','line_number':273,'multiline':False]
['text':' `toolchain_resolution`. Otherwise, this probably came from the','line_number':274,'multiline':False]
['text':' `_python_top` attribute that the Google implementation still uses.','line_number':275,'multiline':False]
['text':' This is separate from `toolchain_runtime` because toolchain_runtime','line_number':276,'multiline':False]
['text':' is propagated as a provider, while non-toolchain runtimes are not.','line_number':277,'multiline':False]
['text':' str; Path to the Python interpreter to use for running the executable','line_number':279,'multiline':False]
['text':' itself (not the bootstrap script). Either an absolute path (which','line_number':280,'multiline':False]
['text':' means it is platform-specific), or a runfiles-relative path (which','line_number':281,'multiline':False]
['text':' means the interpreter should be within `runtime_files`)','line_number':282,'multiline':False]
['text':' runfiles: Additional runfiles specific to the runtime that should','line_number':284,'multiline':False]
['text':' be included. For in-build runtimes, this shold include the interpreter','line_number':285,'multiline':False]
['text':' and any supporting files.','line_number':286,'multiline':False]
['text':' Hack around the fact that the autodetecting Python toolchain, which is','line_number':305,'multiline':False]
['text':' automatically registered, does not yet support Windows. In this case,','line_number':306,'multiline':False]
['text':' we want to return null so that _get_interpreter_path falls back on','line_number':307,'multiline':False]
['text':' --python_path. See tools/python/toolchain.bzl.','line_number':308,'multiline':False]
['text':' TODO(#7844): Remove this hack when the autodetecting toolchain has a','line_number':309,'multiline':False]
['text':' Windows implementation.','line_number':310,'multiline':False]
['text':' In Bazel, --python_top is null by default.','line_number':324,'multiline':False]
['text':' Don't include build_data.txt in data runfiles. This allows binaries to','line_number':377,'multiline':False]
['text':' contain other binaries while still using the same fixed location symlink','line_number':378,'multiline':False]
['text':' for the build_data.txt file. Really, the fixed location symlink should be','line_number':379,'multiline':False]
['text':' removed and another way found to locate the underlying build data file.','line_number':380,'multiline':False]
['text':' TODO: Remove this logic when a central file is always available','line_number':412,'multiline':False]
['text':' A "constant metadata" file is basically a special file that doesn't','line_number':425,'multiline':False]
['text':' support change detection logic and reports that it is unchanged. i.e., it','line_number':426,'multiline':False]
['text':' behaves like ctx.version_file and is ignored when computing "what inputs','line_number':427,'multiline':False]
['text':' changed" (see https://bazel.build/docs/user-manual#workspace-status).','line_number':428,'multiline':False]
['text':'','line_number':429,'multiline':False]
['text':' We do this so that consumers of the final build data file don't have','line_number':430,'multiline':False]
['text':' to transitively rebuild everything -- the `uncachable_version_file` file','line_number':431,'multiline':False]
['text':' isn't cachable, which causes the build data action to always re-run.','line_number':432,'multiline':False]
['text':'','line_number':433,'multiline':False]
['text':' While this technically means a binary could have stale build info,','line_number':434,'multiline':False]
['text':' it ends up not mattering in practice because the volatile information','line_number':435,'multiline':False]
['text':' doesn't meaningfully effect other outputs.','line_number':436,'multiline':False]
['text':'','line_number':437,'multiline':False]
['text':' This is also done for performance and Make It work reasons:','line_number':438,'multiline':False]
['text':'   * Passing the transitive dependencies into the action requires passing','line_number':439,'multiline':False]
['text':'     the runfiles, but actions don't directly accept runfiles. While','line_number':440,'multiline':False]
['text':'     flattening the depsets can be deferred, accessing the','line_number':441,'multiline':False]
['text':'     `runfiles.empty_filenames` attribute will will invoke the empty','line_number':442,'multiline':False]
['text':'     file supplier a second time, which is too much of a memory and CPU','line_number':443,'multiline':False]
['text':'     performance hit.','line_number':444,'multiline':False]
['text':'   * Some targets specify a directory in `data`, which is unsound, but','line_number':445,'multiline':False]
['text':'     mostly works. Google's RBE, unfortunately, rejects it.','line_number':446,'multiline':False]
['text':'   * A binary's transitive closure may be so large that it exceeds','line_number':447,'multiline':False]
['text':'     Google RBE limits for action inputs.','line_number':448,'multiline':False]
['text':' NOTE: ctx.info_file is undocumented; see','line_number':461,'multiline':False]
['text':' https://github.com/bazelbuild/bazel/issues/9363','line_number':462,'multiline':False]
['text':' See b/171276569#comment18: this feature string is just to allow','line_number':489,'multiline':False]
['text':' Google's RBE to know the link action is for the Python case so it can','line_number':490,'multiline':False]
['text':' take special actions (though as of Jun 2022, no special action is','line_number':491,'multiline':False]
['text':' taken).','line_number':492,'multiline':False]
['text':' NOTE: Only flags not captured by cc_info.linking_context need to','line_number':524,'multiline':False]
['text':' be manually passed','line_number':525,'multiline':False]
['text':' This is a minimal version of NativeDepsHelper.getSharedNativeDepsPath, see','line_number':578,'multiline':False]
['text':' com.google.devtools.build.lib.rules.nativedeps.NativeDepsHelper#getSharedNativeDepsPath','line_number':579,'multiline':False]
['text':' The basic idea is to take all the inputs that affect linking and encode (via','line_number':580,'multiline':False]
['text':' hashing) them into the filename.','line_number':581,'multiline':False]
['text':' TODO(b/234232820): The settings that affect linking must be kept in sync with the actual','line_number':582,'multiline':False]
['text':' C++ link action. For more information, see the large descriptive comment on','line_number':583,'multiline':False]
['text':' NativeDepsHelper#getSharedNativeDepsPath.','line_number':584,'multiline':False]
['text':' NOTE: We use short_path because the build configuration root in which','line_number':593,'multiline':False]
['text':' files are always created already captures the configuration-specific','line_number':594,'multiline':False]
['text':' parts, so no need to include them manually.','line_number':595,'multiline':False]
['text':' Sharing of native dependencies may cause an {@link','line_number':607,'multiline':False]
['text':' ActionConflictException} when ThinLTO is disabled for test and test-only','line_number':608,'multiline':False]
['text':' targets that are statically linked, but enabled for other statically','line_number':609,'multiline':False]
['text':' linked targets. This happens in case the artifacts for the shared native','line_number':610,'multiline':False]
['text':' dependency are output by {@link Action}s owned by the non-test and test','line_number':611,'multiline':False]
['text':' targets both. To fix this, we allow creation of multiple artifacts for the','line_number':612,'multiline':False]
['text':' shared native library - one shared among the test and test-only targets','line_number':613,'multiline':False]
['text':' where ThinLTO is disabled, and the other shared among other targets where','line_number':614,'multiline':False]
['text':' ThinLTO is enabled. See b/138118275','line_number':615,'multiline':False]
['text':' Use slash to anchor each path to prevent e.g.','line_number':664,'multiline':False]
['text':' "ab/c.py".endswith("b/c.py") from incorrectly matching.','line_number':665,'multiline':False]
['text':' NOTE: The is_tool_configuration() function is only usable by builtins.','line_number':691,'multiline':False]
['text':' See https://github.com/bazelbuild/bazel/issues/14444 for the FR for','line_number':692,'multiline':False]
['text':' a more public API. Outside of builtins, ctx.bin_dir.path can be','line_number':693,'multiline':False]
['text':' checked for `/host/` or `-exec-`.','line_number':694,'multiline':False]
['text':' TODO(b/265840007): Make this non-conditional once Google enables','line_number':755,'multiline':False]
['text':' --incompatible_use_python_toolchains.','line_number':756,'multiline':False]
['text':' TODO(b/163083591): Remove the PyCcLinkParamsProvider once binaries-in-deps','line_number':760,'multiline':False]
['text':' are cleaned up.','line_number':761,'multiline':False]
['text':' TODO(b/253059598): Remove support for extra actions; https://github.com/bazelbuild/bazel/issues/16455','line_number':773,'multiline':False]
['text':' The list might be frozen, so use concatentation','line_number':818,'multiline':False]
['text':' TODO: add ability to remove attrs, i.e. for imports attr','line_number':821,'multiline':False]
