['text':' Copyright 2016 The Bazel Authors. All rights reserved.','line_number':1,'multiline':False]
['text':'','line_number':2,'multiline':False]
['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':3,'multiline':False]
['text':' you may not use this file except in compliance with the License.','line_number':4,'multiline':False]
['text':' You may obtain a copy of the License at','line_number':5,'multiline':False]
['text':'','line_number':6,'multiline':False]
['text':'    http://www.apache.org/licenses/LICENSE-2.0','line_number':7,'multiline':False]
['text':'','line_number':8,'multiline':False]
['text':' Unless required by applicable law or agreed to in writing, software','line_number':9,'multiline':False]
['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':10,'multiline':False]
['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':11,'multiline':False]
['text':' See the License for the specific language governing permissions and','line_number':12,'multiline':False]
['text':' limitations under the License.','line_number':13,'multiline':False]
['text':'*
 * linux-sandbox runs commands in a restricted environment where they are
 * subject to a few rules:
 *
 *  - The entire filesystem is made read-only.
 *  - The working directory (-W) will be made read-write, though.
 *  - Individual files or directories can be made writable (but not deletable)
 *    (-w).
 *  - If the process takes longer than the timeout (-T), it will be killed with
 *    SIGTERM. If it does not exit within the grace period (-t), it all of its
 *    children will be killed with SIGKILL.
 *  - tmpfs can be mounted on top of existing directories (-e).
 *  - If option -R is passed, the process will run as user 'root'.
 *  - If option -U is passed, the process will run as user 'nobody'.
 *  - Otherwise, the process runs using the current uid / gid.
 *  - If linux-sandbox itself gets killed, the process and all of its children
 *    will be killed.
 *  - If linux-sandbox's parent dies, it will kill itself, the process and all
 *    the children.
 *  - Network access is allowed, but can be disabled via -N.
 *  - The hostname and domainname will be set to "sandbox".
 *  - The process runs in its own PID namespace, so other processes on the
 *    system are invisible.
 ','line_number':15,'multiline':True]
['text':' The PID of our child process, for use in signal handlers.','line_number':72,'multiline':False]
['text':' Our parent's pid at the outset, to check if the original parent has exited.','line_number':74,'multiline':False]
['text':' Must we politely ask the child to exit before we send it a SIGKILL (once we','line_number':77,'multiline':False]
['text':' want it to exit)? Holds only zero or one.','line_number':78,'multiline':False]
['text':' Make sure the child process does not inherit any accidentally left open file','line_number':86,'multiline':False]
['text':' handles from our parent.','line_number':87,'multiline':False]
['text':' (1) Skip unparseable entries.','line_number':109,'multiline':False]
['text':' (2) Close everything except stdin, stdout, stderr and debug output.','line_number':110,'multiline':False]
['text':' (3) Do not accidentally close our directory handle.','line_number':111,'multiline':False]
['text':' Find the PID of the child, which main set up before installing us as a','line_number':128,'multiline':False]
['text':' signal handler.','line_number':129,'multiline':False]
['text':' Figure out whether we should send a SIGTERM here. If so, we won't want to','line_number':132,'multiline':False]
['text':' next time we're called.','line_number':133,'multiline':False]
['text':' If we're not supposed to ask politely, simply forcibly kill the child.','line_number':137,'multiline':False]
['text':' Otherwise make a polite request, then arrange to be called again after a','line_number':143,'multiline':False]
['text':' delay, at which point we'll send SIGKILL.','line_number':144,'multiline':False]
['text':'','line_number':145,'multiline':False]
['text':' Note that main sets us up as the signal handler for SIGALRM, and arranges','line_number':146,'multiline':False]
['text':' for this code path to be taken only if kill_delay_secs > 0.','line_number':147,'multiline':False]
['text':' We use clone instead of unshare, because unshare sometimes fails with','line_number':173,'multiline':False]
['text':' EINVAL due to a race condition in the Linux kernel (see','line_number':174,'multiline':False]
['text':' https://lkml.org/lkml/2015/7/28/833).','line_number':175,'multiline':False]
['text':' We close the write end of the sync pipe, read a byte and then close the','line_number':187,'multiline':False]
['text':' pipe. This proves to the linux-sandbox-pid1 process that we still existed','line_number':188,'multiline':False]
['text':' after it ran prctl(PR_SET_PDEATHSIG, SIGKILL), thus preventing a race','line_number':189,'multiline':False]
['text':' condition where the parent is killed before that call was made.','line_number':190,'multiline':False]
['text':' Wait for the child to exit, obtaining usage information. Restart in the','line_number':208,'multiline':False]
['text':' case of a signal interrupting us.','line_number':209,'multiline':False]
['text':' We've been handed off to a reaper process and should die.','line_number':218,'multiline':False]
['text':' If we're supposed to write stats to a file, do so now.','line_number':230,'multiline':False]
['text':' We want to exit in the same manner as the child.','line_number':235,'multiline':False]
['text':' Ask the kernel to kill us with SIGKILL if our parent dies.','line_number':248,'multiline':False]
['text':' Parse our command-line options.','line_number':253,'multiline':False]
['text':' Open the file PRINT_DEBUG writes to.','line_number':256,'multiline':False]
['text':' Must happen early enough so we don't lose any debugging output.','line_number':257,'multiline':False]
['text':' Start with default signal actions and a clear signal mask.','line_number':265,'multiline':False]
['text':' Ignore SIGTTIN and SIGTTOU, as we hand off the terminal to the child in','line_number':268,'multiline':False]
['text':' SpawnChild.','line_number':269,'multiline':False]
['text':' Remember the parent pid so we can exit if the parent has exited.','line_number':273,'multiline':False]
['text':' Doing this before prctl(PR_SET_PDEATHDIG, 0) ensures no race condition.','line_number':274,'multiline':False]
['text':' Redirect output as requested.','line_number':283,'multiline':False]
['text':' Set up two globals used by the child process.','line_number':287,'multiline':False]
['text':' Ensure we don't pass on any FDs from our parent to our child other than','line_number':291,'multiline':False]
['text':' stdin, stdout, stderr and global_debug.','line_number':292,'multiline':False]
['text':' Spawn the child that will fork the sandboxed program with fresh','line_number':295,'multiline':False]
['text':' namespaces etc.','line_number':296,'multiline':False]
['text':' Let the signal handlers installed below know the PID of the child.','line_number':299,'multiline':False]
['text':' If a kill delay has been configured, let the signal handlers installed','line_number':302,'multiline':False]
['text':' below know that it needs to be respected.','line_number':303,'multiline':False]
['text':' OnTimeoutOrTerm, which is used for other signals below, assumes that it','line_number':308,'multiline':False]
['text':' handles SIGALRM. We also explicitly invoke it after the timeout using','line_number':309,'multiline':False]
['text':' alarm(2).','line_number':310,'multiline':False]
['text':' If requested, arrange for the child to be killed (optionally after being','line_number':313,'multiline':False]
['text':' asked politely to terminate) once the timeout expires.','line_number':314,'multiline':False]
['text':'','line_number':315,'multiline':False]
['text':' Note that it's important to set this up before support for SIGTERM and','line_number':316,'multiline':False]
['text':' SIGINT. Otherwise one of those signals could arrive before we get here,','line_number':317,'multiline':False]
['text':' and then we would reset its opt.kill_delay_secs interval timer.','line_number':318,'multiline':False]
['text':' Also ask/tell the child to quit on SIGTERM, and optionally for SIGINT','line_number':323,'multiline':False]
['text':' too.','line_number':324,'multiline':False]
['text':' Wait for the child to exit, returning an appropriate status.','line_number':330,'multiline':False]
