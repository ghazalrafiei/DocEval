['text':' Copyright 2015 The Bazel Authors. All rights reserved.','line_number':1,'multiline':False]
['text':'','line_number':2,'multiline':False]
['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':3,'multiline':False]
['text':' you may not use this file except in compliance with the License.','line_number':4,'multiline':False]
['text':' You may obtain a copy of the License at','line_number':5,'multiline':False]
['text':'','line_number':6,'multiline':False]
['text':'    http://www.apache.org/licenses/LICENSE-2.0','line_number':7,'multiline':False]
['text':'','line_number':8,'multiline':False]
['text':' Unless required by applicable law or agreed to in writing, software','line_number':9,'multiline':False]
['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':10,'multiline':False]
['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':11,'multiline':False]
['text':' See the License for the specific language governing permissions and','line_number':12,'multiline':False]
['text':' limitations under the License.','line_number':13,'multiline':False]
['text':'*
 * Enforces the {@link FlagPolicy}s (from an {@link InvocationPolicy} proto) on an {@link
 * OptionsParser} by validating and changing the flag values in the given {@link OptionsParser}.
 *
 * <p>"Flag" and "Option" are used interchangeably in this file.
 ','line_number':46,'multiline':True]
['text':'*
   * Creates an InvocationPolicyEnforcer that enforces the given policy.
   *
   * @param invocationPolicy the policy to enforce.
   * @param loglevel the level at which to log informational statements. Warnings and errors will
   *     still be logged at the appropriate level.
   ','line_number':60,'multiline':True]
['text':'*
   * Applies this instance's policy to the provided options parser.
   *
   * @param parser The OptionsParser to enforce policy on.
   * @param command The blaze command to enforce the policy for. Flag policies that apply to
   *     specific commands will be enforced only if they contain this command or a command it
   *     inherits from.
   * @throws OptionsParsingException if any flag policy is invalid.
   ','line_number':87,'multiline':True]
['text':' The effective policy returned is expanded, filtered for applicable commands, and cleaned of','line_number':102,'multiline':False]
['text':' redundancies and conflicts.','line_number':103,'multiline':False]
['text':' This flag doesn't exist. We are deliberately lenient if the flag policy has a flag','line_number':114,'multiline':False]
['text':' we don't know about. This is for better future proofing so that as new flags are added,','line_number':115,'multiline':False]
['text':' new policies can use the new flags without worrying about older versions of Bazel.','line_number':116,'multiline':False]
['text':' getOptionDescription() will return null if the option does not exist, however','line_number':122,'multiline':False]
['text':' getOptionValueDescription() above would have thrown an IllegalArgumentException if that','line_number':123,'multiline':False]
['text':' were the case.','line_number':124,'multiline':False]
['text':' If the commands list is empty, then the policy applies to all commands.','line_number':188,'multiline':False]
['text':'* Returns the expanded and filtered policy that would be enforced for the given command. ','line_number':196,'multiline':True]
['text':'*
   * Takes the provided policy and processes it to the form that can be used on the user options.
   *
   * <p>Expands any policies on expansion flags.
   ','line_number':210,'multiline':True]
['text':' Expand all policies to transfer policies on expansion flags to policies on the child flags.','line_number':231,'multiline':False]
['text':' Explicitly disallow --config in invocation policy.','line_number':236,'multiline':False]
['text':' These policies are high-level, before expansion, and so are not the implicitDependents or','line_number':245,'multiline':False]
['text':' expansions of any other flag, other than in an obtuse sense from --invocation_policy.','line_number':246,'multiline':False]
['text':' Only keep and expand policies that are applicable to the current command.','line_number':252,'multiline':False]
['text':' InvocationPolicy ignores policy on non-existing flags by design, for version','line_number':258,'multiline':False]
['text':' compatibility.','line_number':259,'multiline':False]
['text':' Only keep that last policy for each flag.','line_number':271,'multiline':False]
['text':'*
   * Expand a single policy. If the policy is not about an expansion flag, this will simply return a
   * list with a single element, oneself. If the policy is for an expansion flag, the policy will
   * get split into multiple policies applying to each flag the original flag expands to.
   *
   * <p>None of the flagPolicies returned should be on expansion flags.
   ','line_number':300,'multiline':True]
['text':' If we have nothing to expand to, no need to do any further work.','line_number':317,'multiline':False]
['text':' Log the expansion. This is only really useful for understanding the invocation policy itself.','line_number':322,'multiline':False]
['text':' Repeated flags are special, and could set multiple times in an expansion, with the user','line_number':334,'multiline':False]
['text':' expecting both values to be valid. Collect these separately.','line_number':335,'multiline':False]
['text':' Create a flag policy for the child that looks like the parent's policy "transferred" to its','line_number':339,'multiline':False]
['text':' child. Note that this only makes sense for SetValue, when setting an expansion flag, or','line_number':340,'multiline':False]
['text':' UseDefault, when preventing it from being set.','line_number':341,'multiline':False]
['text':' In case any of the expanded flags are themselves expansions, recurse.','line_number':353,'multiline':False]
['text':' If there are any repeatable flag SetValues, deal with them together now.','line_number':358,'multiline':False]
['text':' Note that expansion flags have no value, and so cannot have multiple values either.','line_number':359,'multiline':False]
['text':' Skipping the recursion above is fine.','line_number':360,'multiline':False]
['text':' These options come from expanding a single policy, so they have effectively the same','line_number':369,'multiline':False]
['text':' priority. They could have come from different expansions or implicit requirements in the','line_number':370,'multiline':False]
['text':' recursive resolving of the option list, so just pick the first one. Do collapse the source','line_number':371,'multiline':False]
['text':' strings though, in case there are different sources.','line_number':372,'multiline':False]
['text':' Don't add the original policy if it was an expansion flag, which have no value, but do add','line_number':387,'multiline':False]
['text':' it if there was either no expansion or if it was a valued flag with implicit requirements.','line_number':388,'multiline':False]
['text':'*
   * Expand a SetValue flag policy on a repeatable flag. SetValue operations are the only flag
   * policies that set the flag, and so interact with repeatable flags, flags that can be set
   * multiple times, in subtle ways.
   *
   * @param subflagDesc, the description of the flag the SetValue'd expansion flag expands to.
   * @param subflagValue, the values that the SetValue'd expansion flag expands to for this flag.
   * @param originalPolicy, the original policy on the expansion flag.
   * @return the flag policy for the subflag given, this will be part of the expanded form of the
   *     SetValue policy on the original flag.
   ','line_number':396,'multiline':True]
['text':' Some checks.','line_number':413,'multiline':False]
['text':' Flag value from the expansion, overridability from the original policy, unless the flag is','line_number':420,'multiline':False]
['text':' repeatable, in which case we care about appendability, not overridability.','line_number':421,'multiline':False]
['text':' Commands from the original policy, flag name of the expansion','line_number':437,'multiline':False]
['text':'*
   * For an expansion flag in an invocation policy, each flag it expands to must be given a
   * corresponding policy.
   ','line_number':448,'multiline':True]
['text':' Accept null originalValueStrings, they are expected when the subflag is also an expansion','line_number':467,'multiline':False]
['text':' flag.','line_number':468,'multiline':False]
['text':' Commands from the original policy, flag name of the expansion','line_number':481,'multiline':False]
['text':' If this flag is an implicitRequirement, and some values for the parent flag are','line_number':497,'multiline':False]
['text':' allowed, nothing needs to happen on the implicitRequirement that is set for all','line_number':498,'multiline':False]
['text':' values of the flag.','line_number':499,'multiline':False]
['text':' If this flag is an implicitRequirement, and some values for the parent flag are','line_number':506,'multiline':False]
['text':' disallowed, that implies that all others are allowed, so nothing needs to happen','line_number':507,'multiline':False]
['text':' on the implicitRequirement that is set for all values of the parent flag.','line_number':508,'multiline':False]
['text':' SetValue.flag_value must have at least 1 value.','line_number':530,'multiline':False]
['text':' Flag must allow multiple values if multiple values are specified by the policy.','line_number':538,'multiline':False]
['text':' The user set the value for the flag but the flag policy is overridable, so keep the','line_number':553,'multiline':False]
['text':' user's','line_number':554,'multiline':False]
['text':' value.','line_number':555,'multiline':False]
['text':' Nothing to do -- the value already has an override.','line_number':563,'multiline':False]
['text':' Clear the value in case the flag is a repeated flag so that values don't accumulate.','line_number':568,'multiline':False]
['text':' Set all the flag values from the policy.','line_number':575,'multiline':False]
['text':' Log the removed value.','line_number':605,'multiline':False]
['text':'* Checks the user's flag values against a filtering function. ','line_number':620,'multiline':True]
['text':' In a disallow operation, the values that the flag policy specifies are not allowed,','line_number':641,'multiline':False]
['text':' so the value is allowed if the set of policy values does not contain the current','line_number':642,'multiline':False]
['text':' flag value.','line_number':643,'multiline':False]
['text':'*
     * Determines if the given value is allowed.
     *
     * @param convertedPolicyValues The values given from the FlagPolicy, converted to real objects.
     * @param value The user value of the flag.
     * @return True if the value should be allowed, false if it should not.
     ','line_number':658,'multiline':True]
['text':' Convert all the allowed values from strings to real objects using the options'','line_number':677,'multiline':False]
['text':' converters so that they can be checked for equality using real .equals() instead','line_number':678,'multiline':False]
['text':' of string comparison. For example, "--foo=0", "--foo=false", "--nofoo", and "-f-"','line_number':679,'multiline':False]
['text':' (if the option has an abbreviation) are all equal for boolean flags. Plus converters','line_number':680,'multiline':False]
['text':' can be arbitrarily complex.','line_number':681,'multiline':False]
['text':' Some converters return lists, and if the flag is a repeatable flag, the items in the','line_number':685,'multiline':False]
['text':' list from the converter should be added, and not the list itself. Otherwise the items','line_number':686,'multiline':False]
['text':' from invocation policy will be compared to lists, which will never work.','line_number':687,'multiline':False]
['text':' See OptionsParserImpl.ParsedOptionEntry.addValue.','line_number':688,'multiline':False]
['text':' Check that if the default value of the flag is disallowed by the policy, that the policy','line_number':696,'multiline':False]
['text':' does not also set use_default. Otherwise the default value would still be set if the','line_number':697,'multiline':False]
['text':' user uses a disallowed value. This doesn't apply to repeatable flags since the default','line_number':698,'multiline':False]
['text':' value for repeatable flags is always the empty list. It also doesn't apply to flags that','line_number':699,'multiline':False]
['text':' are null by default, since these flags' default value is not parsed by the converter, so','line_number':700,'multiline':False]
['text':' there is no guarantee that there exists an accepted user-input value that would also set','line_number':701,'multiline':False]
['text':' the value to NULL. In these cases, we assume that "unset" is a distinct value that is','line_number':702,'multiline':False]
['text':' always allowed.','line_number':703,'multiline':False]
['text':' Nothing has set the value yet, so check that the default value from the flag's','line_number':722,'multiline':False]
['text':' definition is allowed. The else case below (i.e. valueDescription is not null) checks for','line_number':723,'multiline':False]
['text':' the flag allowing multiple values, however, flags that allow multiple values cannot have','line_number':724,'multiline':False]
['text':' default values, and their value is always the empty list if they haven't been specified,','line_number':725,'multiline':False]
['text':' which is why new_default_value is not a repeated field.','line_number':726,'multiline':False]
['text':' Do nothing, the unset value by definition cannot be set. In option filtering operations,','line_number':753,'multiline':False]
['text':' the value is being filtered, but the value that is `no value` passes any filter.','line_number':754,'multiline':False]
['text':' Otherwise, there is no way to "usedefault" on one of these options that has no value by','line_number':755,'multiline':False]
['text':' default.','line_number':756,'multiline':False]
['text':' Use the default value from the policy, since the original default is not allowed','line_number':760,'multiline':False]
['text':' The operation disallows the default value, but doesn't supply a new value.','line_number':773,'multiline':False]
['text':' allowMultiple requires that the type of the option be List<T>, so cast from Object','line_number':798,'multiline':False]
['text':' to List<?>.','line_number':799,'multiline':False]
