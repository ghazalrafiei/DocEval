['text':' Copyright 2017 The Bazel Authors. All rights reserved.','line_number':1,'multiline':False]
['text':'','line_number':2,'multiline':False]
['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':3,'multiline':False]
['text':' you may not use this file except in compliance with the License.','line_number':4,'multiline':False]
['text':' You may obtain a copy of the License at','line_number':5,'multiline':False]
['text':'','line_number':6,'multiline':False]
['text':'    http://www.apache.org/licenses/LICENSE-2.0','line_number':7,'multiline':False]
['text':'','line_number':8,'multiline':False]
['text':' Unless required by applicable law or agreed to in writing, software','line_number':9,'multiline':False]
['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':10,'multiline':False]
['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':11,'multiline':False]
['text':' See the License for the specific language governing permissions and','line_number':12,'multiline':False]
['text':' limitations under the License.','line_number':13,'multiline':False]
['text':'*
 * Everything the {@link OptionsParser} needs to know about how an option is defined.
 *
 * <p>An {@code OptionDefinition} is effectively a wrapper around the {@link Option} annotation and
 * the {@link Field} that is annotated, and should contain all logic about default settings and
 * behavior.
 ','line_number':31,'multiline':True]
['text':'*
   * A special value used to specify an absence of default value.
   *
   * @see Option#defaultValue
   ','line_number':40,'multiline':True]
['text':' TODO(b/65049598) make ConstructionException checked, which will make this checked as well.','line_number':47,'multiline':False]
['text':'*
   * If the {@code field} is annotated with the appropriate @{@link Option} annotation, returns the
   * {@code OptionDefinition} for that option. Otherwise, throws a {@link NotAnOptionException}.
   *
   * <p>These values are cached in the {@link OptionsData} layer and should be accessed through
   * {@link OptionsParser#getOptionDefinitions(Class)}.
   ','line_number':57,'multiline':True]
['text':'* Returns the underlying {@code field} for this {@code OptionDefinition}. ','line_number':82,'multiline':True]
['text':'*
   * Returns the name of the option ("--name").
   *
   * <p>Labelled "Option" name to distinguish it from the field's name.
   ','line_number':87,'multiline':True]
['text':'* The single-character abbreviation of the option ("-a"). ','line_number':96,'multiline':True]
['text':'* {@link Option#help()} ','line_number':101,'multiline':True]
['text':'* {@link Option#valueHelp()} ','line_number':106,'multiline':True]
['text':'* {@link Option#defaultValue()} ','line_number':111,'multiline':True]
['text':'* {@link Option#category()} ','line_number':116,'multiline':True]
['text':'* {@link Option#documentationCategory()} ','line_number':121,'multiline':True]
['text':'* {@link Option#effectTags()} ','line_number':126,'multiline':True]
['text':'* {@link Option#metadataTags()} ','line_number':131,'multiline':True]
['text':'* {@link Option#metadataTags()} ','line_number':136,'multiline':True]
['text':'* {@link Option#converter()} ()} ','line_number':141,'multiline':True]
['text':'* {@link Option#allowMultiple()} ','line_number':147,'multiline':True]
['text':'* {@link Option#expansion()} ','line_number':152,'multiline':True]
['text':'* {@link Option#implicitRequirements()} ()} ','line_number':157,'multiline':True]
['text':'* {@link Option#deprecationWarning()} ()} ','line_number':162,'multiline':True]
['text':'* {@link Option#oldName()} ()} ()} ','line_number':167,'multiline':True]
['text':'* {@link Option#oldNameWarning()} ','line_number':172,'multiline':True]
['text':'* Returns whether an option --foo has a negative equivalent --nofoo. ','line_number':177,'multiline':True]
['text':'* The type of the optionDefinition. ','line_number':182,'multiline':True]
['text':'* Whether this field has type Void. ','line_number':187,'multiline':True]
['text':'* Returns whether the arg is an expansion option. ','line_number':196,'multiline':True]
['text':'* Returns whether the arg is an expansion option. ','line_number':201,'multiline':True]
['text':'*
   * For an option that does not use {@link Option#allowMultiple}, returns its type. For an option
   * that does use it, asserts that the type is a {@code List<T>} and returns its element type
   * {@code T}.
   ','line_number':206,'multiline':True]
['text':' The validity of the converter is checked at compile time. We know the type to be','line_number':214,'multiline':False]
['text':' List<singularType>.','line_number':215,'multiline':False]
['text':'*
   * Retrieves the {@link Converter} that will be used for this option, taking into account the
   * default converters if an explicit one is not specified.
   *
   * <p>Memoizes the converter-finding logic to avoid repeating the computation.
   ','line_number':222,'multiline':True]
['text':' No converter provided, use the default one.','line_number':241,'multiline':False]
['text':' Instantiate the given Converter class.','line_number':246,'multiline':False]
['text':' This indicates an error in the Converter, and should be discovered the first time it is','line_number':251,'multiline':False]
['text':' used.','line_number':252,'multiline':False]
['text':'*
   * Returns whether a field should be considered as boolean.
   *
   * <p>Can be used for usage help and controlling whether the "no" prefix is allowed.
   ','line_number':262,'multiline':True]
['text':'*
   * Returns whether an option requires a value when instantiated, or instead can be present without
   * an explicit value.
   ','line_number':273,'multiline':True]
['text':'* Returns the evaluated default value for this option & memoizes the result. ','line_number':281,'multiline':True]
['text':'*
   * Wraps a converted default value into a {@link List} if the converter doesn't do it on its own.
   *
   * <p>This is to make sure multiple ({@link Option#allowMultiple()}) options' default values are
   * always converted to a list representation.
   *
   * <p>In general it mimics the {@link RepeatableOptionValueDescription# addOptionInstance}
   * behavior: multiple option default value is treated as if it appeared on the command line only
   * once with the specified value.
   *
   * <p>Note that on a command line multiple options can appear multiple times while each can
   * support multiple values (e.g. comma-separated - depending on a converter). Thus default value
   * for multiple option is (depending on the converter) a strict subset of the set of potential
   * values for the option.
   ','line_number':317,'multiline':True]
['text':' Not an unchecked cast - there's an explicit type check before it','line_number':332,'multiline':False]
['text':'*
   * {@link OptionDefinition} is really a wrapper around a {@link Field} that caches information
   * obtained through reflection. Checking that the fields they represent are equal is sufficient to
   * check that two {@link OptionDefinition} objects are equal.
   ','line_number':341,'multiline':True]
['text':'*
   * An ordering relation for option-field fields that first groups together options of the same
   * category, then sorts by name within the category.
   ','line_number':373,'multiline':True]
