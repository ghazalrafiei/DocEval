['text':' Copyright 2014 The Bazel Authors. All rights reserved.','line_number':1,'multiline':False]
['text':'','line_number':2,'multiline':False]
['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':3,'multiline':False]
['text':' you may not use this file except in compliance with the License.','line_number':4,'multiline':False]
['text':' You may obtain a copy of the License at','line_number':5,'multiline':False]
['text':'','line_number':6,'multiline':False]
['text':'    http://www.apache.org/licenses/LICENSE-2.0','line_number':7,'multiline':False]
['text':'','line_number':8,'multiline':False]
['text':' Unless required by applicable law or agreed to in writing, software','line_number':9,'multiline':False]
['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':10,'multiline':False]
['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':11,'multiline':False]
['text':' See the License for the specific language governing permissions and','line_number':12,'multiline':False]
['text':' limitations under the License.','line_number':13,'multiline':False]
['text':'*
 * A helper class for {@link OptionsParserImpl} to help checking the return type
 * of a {@link Converter} against the type of a field or the element type of a
 * list.
 *
 * <p>This class has to go through considerable contortion to get the correct result
 * from the Java reflection system, unfortunately. If the generic reflection part
 * had been better designed, some of this would not be necessary.
 ','line_number':25,'multiline':True]
['text':'*
   * Returns the raw type of t, if t is either a raw or parameterized type.
   * Otherwise, this method throws an {@link AssertionError}.
   ','line_number':36,'multiline':True]
['text':'*
   * If type is a parameterized type, searches the given type variable in the list of declared type
   * variables, and then returns the corresponding actual type. Returns null if the type variable is
   * not defined by type.
   ','line_number':51,'multiline':True]
['text':'*
   * Resolves the return type of a method, in particular if the generic return
   * type ({@link Method#getGenericReturnType()}) is a type variable
   * ({@link TypeVariable}), by checking all super-classes and directly
   * implemented interfaces.
   *
   * <p>The method m must be defined by the given type or by its raw class type.
   *
   * @throws AssertionError if the generic return type could not be resolved
   ','line_number':70,'multiline':True]
['text':' TODO(bazel-team): also check enclosing classes and indirectly implemented','line_number':80,'multiline':False]
['text':' interfaces, which can also contribute type variables. This doesn't happen','line_number':81,'multiline':False]
['text':' in the existing use cases.','line_number':82,'multiline':False]
['text':'*
   * Determines if a value of a particular type (from) is assignable to a field of
   * a particular type (to). Also allows assigning wrapper types to primitive
   * types.
   *
   * <p>The checks done here should be identical to the checks done by
   * {@link java.lang.reflect.Field#set}. I.e., if this method returns true, a
   * subsequent call to {@link java.lang.reflect.Field#set} should succeed.
   ','line_number':112,'multiline':True]
['text':' Prevents Java from creating a public constructor.','line_number':132,'multiline':False]
