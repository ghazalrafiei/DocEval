['text':' Copyright 2014 The Bazel Authors. All rights reserved.','line_number':1,'multiline':False]
['text':'','line_number':2,'multiline':False]
['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':3,'multiline':False]
['text':' you may not use this file except in compliance with the License.','line_number':4,'multiline':False]
['text':' You may obtain a copy of the License at','line_number':5,'multiline':False]
['text':'','line_number':6,'multiline':False]
['text':'    http://www.apache.org/licenses/LICENSE-2.0','line_number':7,'multiline':False]
['text':'','line_number':8,'multiline':False]
['text':' Unless required by applicable law or agreed to in writing, software','line_number':9,'multiline':False]
['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':10,'multiline':False]
['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':11,'multiline':False]
['text':' See the License for the specific language governing permissions and','line_number':12,'multiline':False]
['text':' limitations under the License.','line_number':13,'multiline':False]
['text':'* A renderer for usage messages for any combination of options classes. ','line_number':32,'multiline':True]
['text':'*
   * Given an options class, render the usage string into the usage, which is passed in as an
   * argument. This will not include information about expansions for options using expansion
   * functions (it would be unsafe to report this as we cannot know what options from other {@link
   * OptionsBase} subclasses they depend on until a complete parser is constructed).
   ','line_number':38,'multiline':True]
['text':'* Appends the usage message for a single option-field message to 'usage'. ','line_number':54,'multiline':True]
['text':' Add the option's type and default information. Stop there for "medium" verbosity.','line_number':69,'multiline':False]
['text':' Don't call the annotation directly (we must allow overrides to certain defaults)','line_number':78,'multiline':False]
['text':' For verbosity "long," add the full description and expansion, along with the tag','line_number':93,'multiline':False]
['text':' information if requested.','line_number':94,'multiline':False]
['text':'indent=','line_number':96,'multiline':True]
['text':'width=','line_number':96,'multiline':True]
['text':'indent=','line_number':101,'multiline':True]
['text':'width=','line_number':101,'multiline':True]
['text':'indent=','line_number':108,'multiline':True]
['text':'width=','line_number':108,'multiline':True]
['text':' (indent, width)','line_number':116,'multiline':False]
['text':' If we are expected to include the tags, add them for high verbosity.','line_number':123,'multiline':False]
['text':' (indent, width)','line_number':135,'multiline':False]
['text':'*
   * Paragraph-fill the specified input text, indenting lines to 'indent' and
   * wrapping lines at 'width'.  Returns the formatted result.
   ','line_number':140,'multiline':True]
['text':' TODO(ccalvarin) break iterators expect hyphenated words to be line-breakable, which looks','line_number':149,'multiline':False]
['text':' funny for --flag','line_number':150,'multiline':False]
['text':' (factory)','line_number':151,'multiline':False]
['text':' (may include trailing space)','line_number':159,'multiline':False]
['text':'*
   * Returns the expansion for an option, if any, regardless of if the expansion is from a function
   * or is statically declared in the annotation.
   ','line_number':172,'multiline':True]
['text':' Placeholder tag "UNKNOWN" is ignored.','line_number':183,'multiline':False]
['text':' Tags that only apply to undocumented options are excluded.','line_number':188,'multiline':False]
['text':'* Append the usage message for a single option-field message to 'usage'. ','line_number':194,'multiline':True]
['text':' String.format is a lot slower, sometimes up to 10x.','line_number':206,'multiline':False]
['text':' https://stackoverflow.com/questions/925423/is-it-better-practice-to-use-string-format-over-string-concatenation-in-java','line_number':207,'multiline':False]
['text':'','line_number':208,'multiline':False]
['text':' Considering that this runs for every flag in the CLI reference, it's better to use regular','line_number':209,'multiline':False]
['text':' appends here.','line_number':210,'multiline':False]
['text':' Add the id of the flag to point anchor hrefs to it','line_number':212,'multiline':False]
['text':' Add the href to the id hash','line_number':216,'multiline':False]
['text':' Nothing for boolean, tristate, boolean_or_enum, or void options.','line_number':225,'multiline':False]
['text':' Generic fallback, which isn't very good.','line_number':229,'multiline':False]
['text':' Allow-multiple options can't have a default value.','line_number':237,'multiline':False]
['text':' Don't call the annotation directly (we must allow overrides to certain defaults).','line_number':240,'multiline':False]
['text':' Void options don't have a default.','line_number':243,'multiline':False]
['text':' If this is an expansion option, list the expansion if known, or at least specify that we','line_number':258,'multiline':False]
['text':' don't know.','line_number':259,'multiline':False]
['text':' TODO(jingwen): We link to the expanded flags here, but unfortunately we don't','line_number':269,'multiline':False]
['text':' currently guarantee that all flags are only printed once. A flag in an OptionBase that','line_number':270,'multiline':False]
['text':' is included by 2 different commands, but not inherited through a parent command, will','line_number':271,'multiline':False]
['text':' be printed multiple times. Clicking on the flag will bring the user to its first','line_number':272,'multiline':False]
['text':' definition.','line_number':273,'multiline':False]
['text':' Link to the '#flag--flag_name' hash.','line_number':277,'multiline':False]
['text':' Some expansions are in the form of '--flag_name=value', so we drop everything from','line_number':278,'multiline':False]
['text':' '=' onwards.','line_number':279,'multiline':False]
['text':' Add effect tags, if not UNKNOWN, and metadata tags, if not empty.','line_number':289,'multiline':False]
['text':'*
   * Returns the available completion for the given option field. The completions are the exact
   * command line option (with the prepending '--') that one should pass. It is suitable for
   * completion script to use. If the option expect an argument, the kind of argument is given
   * after the equals. If the kind is a enum, the various enum values are given inside an accolade
   * in a comma separated list. For other special kind, the type is given as a name (e.g.,
   * <code>label</code>, <code>float</ode>, <code>path</code>...). Example outputs of this
   * function are for, respectively, a tristate flag <code>tristate_flag</code>, a enum
   * flag <code>enum_flag</code> which can take <code>value1</code>, <code>value2</code> and
   * <code>value3</code>, a path fragment flag <code>path_flag</code>, a string flag
   * <code>string_flag</code> and a void flag <code>void_flag</code>:
   * <pre>
   *   --tristate_flag={auto,yes,no}
   *   --notristate_flag
   *   --enum_flag={value1,value2,value3}
   *   --path_flag=path
   *   --string_flag=
   *   --void_flag
   * </pre>
   *
   * @param optionDefinition The field to return completion for
   * @param builder the string builder to store the completion values
   ','line_number':318,'multiline':True]
['text':' Return the list of possible completions for this option','line_number':342,'multiline':False]
['text':' String comparison so we don't introduce a dependency to com.google.devtools.build.lib.','line_number':358,'multiline':False]
['text':' TODO(bazel-team): add more types. Maybe even move the completion type','line_number':365,'multiline':False]
['text':' to the @Option annotation?','line_number':366,'multiline':False]
