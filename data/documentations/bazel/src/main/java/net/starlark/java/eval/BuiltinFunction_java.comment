['text':' Copyright 2018 The Bazel Authors. All rights reserved.','line_number':1,'multiline':False]
['text':'','line_number':2,'multiline':False]
['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':3,'multiline':False]
['text':' you may not use this file except in compliance with the License.','line_number':4,'multiline':False]
['text':' You may obtain a copy of the License at','line_number':5,'multiline':False]
['text':'','line_number':6,'multiline':False]
['text':'    http://www.apache.org/licenses/LICENSE-2.0','line_number':7,'multiline':False]
['text':'','line_number':8,'multiline':False]
['text':' Unless required by applicable law or agreed to in writing, software','line_number':9,'multiline':False]
['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':10,'multiline':False]
['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':11,'multiline':False]
['text':' See the License for the specific language governing permissions and','line_number':12,'multiline':False]
['text':' limitations under the License.','line_number':13,'multiline':False]
['text':'*
 * A BuiltinFunction is a callable Starlark value that reflectively invokes a {@link
 * StarlarkMethod}-annotated method of a Java object. The Java object may or may not itself be a
 * Starlark value. BuiltinFunctions are not produced for Java methods for which {@link
 * StarlarkMethod#structField} is true.
 ','line_number':29,'multiline':True]
['text':' TODO(adonovan): support annotated static methods.','line_number':35,'multiline':False]
['text':' (following Python)','line_number':37,'multiline':False]
['text':'*
   * Constructs a BuiltinFunction for a StarlarkMethod-annotated method of the given name (as seen
   * by Starlark, not Java).
   ','line_number':46,'multiline':True]
['text':' computed later','line_number':53,'multiline':False]
['text':'*
   * Constructs a BuiltinFunction for a StarlarkMethod-annotated method (not field) of the given
   * name (as seen by Starlark, not Java).
   *
   * <p>This constructor should be used only for ephemeral BuiltinFunction values created
   * transiently during a call such as {@code x.f()}, when the caller has already looked up the
   * MethodDescriptor using the same semantics as the thread that will be used in the call. Use the
   * other (slower) constructor if there is any possibility that the semantics of the {@code x.f}
   * operation differ from those of the thread used in the call.
   ','line_number':56,'multiline':True]
['text':'*
   * Returns the StarlarkMethod annotation of this Starlark-callable Java method.
   ','line_number':93,'multiline':True]
['text':'*
   * Converts the arguments of a Starlark call into the argument vector for a reflective call to a
   * StarlarkMethod-annotated Java method.
   *
   * @param thread the Starlark thread for the call
   * @param loc the location of the call expression, or BUILTIN for calls from Java
   * @param desc descriptor for the StarlarkMethod-annotated method
   * @param positional a list of positional arguments
   * @param named a list of named arguments, as alternating Strings/Objects. May contain dups.
   * @return the array of arguments which may be passed to {@link MethodDescriptor#call}
   * @throws EvalException if the given set of arguments are invalid for the given method. For
   *     example, if any arguments are of unexpected type, or not all mandatory parameters are
   *     specified by the user
   ','line_number':124,'multiline':True]
['text':' intentionally shadows this.desc','line_number':140,'multiline':False]
['text':' Overview of steps:','line_number':145,'multiline':False]
['text':' - allocate vector of actual arguments of correct size.','line_number':146,'multiline':False]
['text':' - process positional arguments, accumulating surplus ones into *args.','line_number':147,'multiline':False]
['text':' - process named arguments, accumulating surplus ones into **kwargs.','line_number':148,'multiline':False]
['text':' - set default values for missing optionals, and report missing mandatory parameters.','line_number':149,'multiline':False]
['text':' - set special parameters.','line_number':150,'multiline':False]
['text':' The static checks ensure that positional parameters appear before named,','line_number':151,'multiline':False]
['text':' and mandatory positionals appear before optional.','line_number':152,'multiline':False]
['text':' No additional memory allocation occurs in the common (success) case.','line_number':153,'multiline':False]
['text':' Flag-disabled parameters are skipped during argument matching, as if they do not exist. They','line_number':154,'multiline':False]
['text':' are instead assigned their flag-disabled values.','line_number':155,'multiline':False]
['text':' Allocate argument vector.','line_number':159,'multiline':False]
['text':' positional arguments','line_number':172,'multiline':False]
['text':' String methods get the string as an extra argument','line_number':176,'multiline':False]
['text':' because their true receiver is StringModule.INSTANCE.','line_number':177,'multiline':False]
['text':' disabled?','line_number':186,'multiline':False]
['text':' Skip disabled parameter as if not present at all.','line_number':188,'multiline':False]
['text':' The default value will be filled in below.','line_number':189,'multiline':False]
['text':' *args','line_number':198,'multiline':False]
['text':' named arguments','line_number':212,'multiline':False]
['text':' safe','line_number':216,'multiline':False]
['text':' look up parameter','line_number':219,'multiline':False]
['text':' unknown parameter?','line_number':221,'multiline':False]
['text':' spill to **kwargs','line_number':223,'multiline':False]
['text':' duplicate named argument?','line_number':234,'multiline':False]
['text':' positional-only param?','line_number':243,'multiline':False]
['text':' spill to **kwargs','line_number':245,'multiline':False]
['text':' duplicate named argument?','line_number':251,'multiline':False]
['text':' disabled?','line_number':259,'multiline':False]
['text':' spill to **kwargs','line_number':262,'multiline':False]
['text':' duplicate named argument?','line_number':269,'multiline':False]
['text':' duplicate?','line_number':279,'multiline':False]
['text':' Set default values for missing parameters,','line_number':287,'multiline':False]
['text':' and report any that are still missing.','line_number':288,'multiline':False]
['text':' special parameters','line_number':327,'multiline':False]
['text':' Value must belong to one of the specified classes.','line_number':352,'multiline':False]
['text':' Returns a phrase meaning "disabled" appropriate to the specified flag.','line_number':367,'multiline':False]
['text':' If the flag is True, it must be a deprecation flag. Otherwise it's an experimental flag.','line_number':369,'multiline':False]
['text':' TODO(adonovan): is that assumption sound?','line_number':370,'multiline':False]
['text':' remove [+-] prefix','line_number':375,'multiline':False]
['text':' remove [+-] prefix','line_number':380,'multiline':False]
