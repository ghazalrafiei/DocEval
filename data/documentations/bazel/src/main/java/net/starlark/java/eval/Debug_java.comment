['text':' Copyright 2018 The Bazel Authors. All rights reserved.','line_number':1,'multiline':False]
['text':'','line_number':2,'multiline':False]
['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':3,'multiline':False]
['text':' you may not use this file except in compliance with the License.','line_number':4,'multiline':False]
['text':' You may obtain a copy of the License at','line_number':5,'multiline':False]
['text':'','line_number':6,'multiline':False]
['text':'    http://www.apache.org/licenses/LICENSE-2.0','line_number':7,'multiline':False]
['text':'','line_number':8,'multiline':False]
['text':' Unless required by applicable law or agreed to in writing, software','line_number':9,'multiline':False]
['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':10,'multiline':False]
['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':11,'multiline':False]
['text':' See the License for the specific language governing permissions and','line_number':12,'multiline':False]
['text':' limitations under the License.','line_number':13,'multiline':False]
['text':'* Debugger API. ','line_number':24,'multiline':True]
['text':' TODO(adonovan): move Debugger to Debug.Debugger.','line_number':25,'multiline':False]
['text':'*
   * A simple interface for the Starlark interpreter to notify a debugger of events during
   * execution.
   ','line_number':28,'multiline':True]
['text':'* Notify the debugger that execution is at the point immediately before {@code loc}. ','line_number':33,'multiline':True]
['text':'* Notify the debugger that it will no longer receive events from the interpreter. ','line_number':36,'multiline':True]
['text':'* A Starlark value that can expose additional information to a debugger. ','line_number':40,'multiline':True]
['text':'*
     * Returns a list of DebugAttribute of this value. For example, it can be the internal fields of
     * a value that are not accessible from Starlark, or the values inside a collection.
     ','line_number':42,'multiline':True]
['text':'* A name/value pair used in the return value of getDebugAttributes. ','line_number':49,'multiline':True]
['text':' a legal Starlark value','line_number':52,'multiline':False]
['text':'* See stepControl ','line_number':60,'multiline':True]
['text':'*
   * Describes the stepping behavior that should occur when execution of a thread is continued.
   * (Debugger API)
   ','line_number':63,'multiline':True]
['text':'* Continue execution without stepping. ','line_number':68,'multiline':True]
['text':'*
     * If the thread is paused on a statement that contains a function call, step into that
     * function. Otherwise, this is the same as OVER.
     ','line_number':70,'multiline':True]
['text':'*
     * Step over the current statement and any functions that it may call, stopping at the next
     * statement in the same frame. If no more statements are available in the current frame, same
     * as OUT.
     ','line_number':75,'multiline':True]
['text':'*
     * Continue execution until the current frame has been exited and then pause. If we are
     * currently in the outer-most frame, same as NONE.
     ','line_number':81,'multiline':True]
['text':' uninstantiable','line_number':88,'multiline':False]
['text':'*
   * Installs a global hook that causes subsequently executed Starlark threads to notify the
   * debugger of important events. Closes any previously set debugger. Call {@code
   * setDebugger(null)} to disable debugging.
   ','line_number':92,'multiline':True]
['text':'*
   * Returns a copy of the current stack of call frames, outermost call first.
   *
   * <p>This function is intended for use only when execution of {@code thread} is stopped, for
   * example at a breakpoint. The resulting DebugFrames should not be retained after execution of
   * the thread has resumed. Most clients should instead use {@link StarlarkThread#getCallStack}.
   ','line_number':104,'multiline':True]
['text':'*
   * Given a requested stepping behavior, returns a predicate over the context that tells the
   * debugger when to pause. (Debugger API)
   *
   * <p>The predicate will return true if we are at the next statement where execution should pause,
   * and it will return false if we are not yet at that statement. No guarantee is made about the
   * predicate's return value after we have reached the desired statement.
   *
   * <p>A null return value indicates that no further pausing should occur.
   ','line_number':115,'multiline':True]
['text':' pause at the very next statement','line_number':132,'multiline':False]
['text':' if we're at the outermost frame, same as NONE','line_number':137,'multiline':False]
['text':'* Debugger interface to the interpreter's internal call frame representation. ','line_number':143,'multiline':True]
['text':'* Returns function called in this frame. ','line_number':146,'multiline':True]
['text':'* Returns the location of the current program counter. ','line_number':149,'multiline':True]
['text':'* Returns the local environment of this frame. ','line_number':152,'multiline':True]
['text':'*
   * Interface by which debugging tools are notified of a thread entering or leaving its top-level
   * frame.
   ','line_number':156,'multiline':True]
['text':'*
   * Installs a global hook that is notified each time a thread pushes or pops its top-level frame.
   * This interface is provided to support special tools; ordinary clients should have no need for
   * it.
   ','line_number':168,'multiline':True]
