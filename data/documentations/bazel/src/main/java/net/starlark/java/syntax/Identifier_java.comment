['text':' Copyright 2014 The Bazel Authors. All rights reserved.','line_number':1,'multiline':False]
['text':'','line_number':2,'multiline':False]
['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':3,'multiline':False]
['text':' you may not use this file except in compliance with the License.','line_number':4,'multiline':False]
['text':' You may obtain a copy of the License at','line_number':5,'multiline':False]
['text':'','line_number':6,'multiline':False]
['text':'    http://www.apache.org/licenses/LICENSE-2.0','line_number':7,'multiline':False]
['text':'','line_number':8,'multiline':False]
['text':' Unless required by applicable law or agreed to in writing, software','line_number':9,'multiline':False]
['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':10,'multiline':False]
['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':11,'multiline':False]
['text':' See the License for the specific language governing permissions and','line_number':12,'multiline':False]
['text':' limitations under the License.','line_number':13,'multiline':False]
['text':'* Syntax node for an identifier. ','line_number':21,'multiline':True]
['text':' set by Resolver','line_number':27,'multiline':False]
['text':'*
   * Returns the name of the Identifier. If there were parse errors, misparsed regions may be
   * represented as an Identifier for which {@code !isValid(getName())}.
   ','line_number':46,'multiline':True]
['text':'* Returns information about the binding that the identifier denotes. Set by the resolver. ','line_number':58,'multiline':True]
['text':'* Reports whether the string is a valid identifier. ','line_number':74,'multiline':True]
['text':' Keep consistent with Lexer.scanIdentifier.','line_number':76,'multiline':False]
['text':'*
   * Returns all names bound by an LHS expression.
   *
   * <p>Examples:
   *
   * <ul>
   *   <li><{@code x = ...} binds x.
   *   <li><{@code x, [y,z] = ..} binds x, y, z.
   *   <li><{@code x[5] = ..} does not bind any names.
   * </ul>
   ','line_number':89,'multiline':True]
['text':' TODO(adonovan): remove this function in due course.','line_number':100,'multiline':False]
['text':' - Resolver makes one pass to discover bindings than another to resolve uses.','line_number':101,'multiline':False]
['text':'   When it works in a single pass, it is more efficient to process bindings in order,','line_number':102,'multiline':False]
['text':'   deferring (rare) forward references until the end of the block.','line_number':103,'multiline':False]
['text':' - Eval calls boundIdentifiers for comprehensions. This can be eliminated when','line_number':104,'multiline':False]
['text':'   variables are assigned frame slot indices.','line_number':105,'multiline':False]
['text':' - Eval calls boundIdentifiers for the 'export' hack. This can be eliminated','line_number':106,'multiline':False]
['text':'   when we switch to compilation by emitting EXPORT instructions for the necessary','line_number':107,'multiline':False]
['text':'   bindings. (Ideally we would eliminate Bazel's export hack entirely.)','line_number':108,'multiline':False]
['text':' Common case/fast path - skip the builder.','line_number':111,'multiline':False]
