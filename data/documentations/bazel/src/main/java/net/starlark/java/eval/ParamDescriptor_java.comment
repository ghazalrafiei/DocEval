['text':' Copyright 2018 The Bazel Authors. All rights reserved.','line_number':1,'multiline':False]
['text':'','line_number':2,'multiline':False]
['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':3,'multiline':False]
['text':' you may not use this file except in compliance with the License.','line_number':4,'multiline':False]
['text':' You may obtain a copy of the License at','line_number':5,'multiline':False]
['text':'','line_number':6,'multiline':False]
['text':'    http://www.apache.org/licenses/LICENSE-2.0','line_number':7,'multiline':False]
['text':'','line_number':8,'multiline':False]
['text':' Unless required by applicable law or agreed to in writing, software','line_number':9,'multiline':False]
['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':10,'multiline':False]
['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':11,'multiline':False]
['text':' See the License for the specific language governing permissions and','line_number':12,'multiline':False]
['text':' limitations under the License.','line_number':13,'multiline':False]
['text':'* A value class for storing {@link Param} metadata to avoid using Java proxies. ','line_number':29,'multiline':True]
['text':' Null means any class is allowed.','line_number':36,'multiline':False]
['text':' Should be not empty otherwise.','line_number':37,'multiline':False]
['text':' The semantics flag responsible for disabling this parameter, or null if enabled.','line_number':39,'multiline':False]
['text':' It is an error for Starlark code to supply a value to a disabled parameter.','line_number':40,'multiline':False]
['text':' TODO(adonovan): apply the same validation logic to the default value','line_number':51,'multiline':False]
['text':' as we do to caller-supplied values (see BuiltinFunction.checkParamValue).','line_number':52,'multiline':False]
['text':'*
   * Returns a {@link ParamDescriptor} representing the given raw {@link Param} annotation and the
   * given semantics.
   ','line_number':64,'multiline':True]
['text':' Compute set of allowed classes.','line_number':81,'multiline':False]
['text':' Use the class of the parameter itself.','line_number':89,'multiline':False]
['text':' Interpret primitive boolean parameter as j.l.Boolean.','line_number':90,'multiline':False]
['text':'* @see Param#name() ','line_number':103,'multiline':True]
['text':'* Returns a description of allowed argument types suitable for an error message. ','line_number':108,'multiline':True]
['text':' Result has one of these forms:','line_number':110,'multiline':False]
['text':' "a"','line_number':111,'multiline':False]
['text':' "a or b"','line_number':112,'multiline':False]
['text':' "a, b, or c"','line_number':113,'multiline':False]
['text':' TODO(b/200065655#comment3): Remove when we have an official way for package defaults.','line_number':118,'multiline':False]
['text':'* @see Param#positional() ','line_number':137,'multiline':True]
['text':'* @see Param#named() ','line_number':142,'multiline':True]
['text':'* Returns the effective default value of this parameter, or null if mandatory. ','line_number':147,'multiline':True]
['text':'* Returns the flag responsible for disabling this parameter, or null if it is enabled. ','line_number':153,'multiline':True]
['text':' A memoization of evalDefault, keyed by expression.','line_number':159,'multiline':False]
['text':' This cache is manually maintained (instead of using LoadingCache),','line_number':160,'multiline':False]
['text':' as default values may sometimes be recursively requested.','line_number':161,'multiline':False]
['text':' Evaluates the default value expression for a parameter.','line_number':165,'multiline':False]
['text':' Values required by defaults of functions in UNIVERSE must','line_number':167,'multiline':False]
['text':' be handled without depending on the evaluator, or even','line_number':168,'multiline':False]
['text':' on defaultValueCache, because JVM global variable initialization','line_number':169,'multiline':False]
['text':' is such a mess. (Specifically, it's completely dynamic,','line_number':170,'multiline':False]
['text':' so if two or more variables are mutually dependent, like','line_number':171,'multiline':False]
['text':' defaultValueCache and UNIVERSE would be, you have to write','line_number':172,'multiline':False]
['text':' code that works in all possible dynamic initialization orders.)','line_number':173,'multiline':False]
['text':' Better not to go there.','line_number':174,'multiline':False]
['text':' We can't evaluate Starlark code until UNIVERSE is bootstrapped.','line_number':200,'multiline':False]
['text':' Note that this Starlark thread ignores command line flags.','line_number':207,'multiline':False]
['text':' Disable polling of the java.lang.Thread.interrupt flag during','line_number':210,'multiline':False]
['text':' Starlark evaluation. Assuming the expression does not call a','line_number':211,'multiline':False]
['text':' built-in that throws InterruptedException, this allows us to','line_number':212,'multiline':False]
['text':' assert that InterruptedException "can't happen".','line_number':213,'multiline':False]
['text':'','line_number':214,'multiline':False]
['text':' Bazel Java threads are routinely interrupted during Starlark execution,','line_number':215,'multiline':False]
['text':' and the Starlark interpreter may be in a call to LoadingCache (in CallUtils).','line_number':216,'multiline':False]
['text':' LoadingCache computes the cache entry in the same thread that first','line_number':217,'multiline':False]
['text':' requested the entry, propagating undesirable thread state (which Einstein','line_number':218,'multiline':False]
['text':' called "spooky action at a distance") from an arbitrary application thread','line_number':219,'multiline':False]
['text':' to here, which is logically one-time initialization code.','line_number':220,'multiline':False]
['text':'','line_number':221,'multiline':False]
['text':' A simpler non-solution would be to use a "clean" pool thread','line_number':222,'multiline':False]
['text':' to compute each cache entry; we could safely assume such a thread','line_number':223,'multiline':False]
['text':' is never interrupted. However, this runs afoul of JVM class initialization:','line_number':224,'multiline':False]
['text':' the initialization of Starlark.UNIVERSE depends on Starlark.UNBOUND','line_number':225,'multiline':False]
['text':' because of the reference above. That's fine if they are initialized by','line_number':226,'multiline':False]
['text':' the same thread, as JVM class initialization locks are reentrant,','line_number':227,'multiline':False]
['text':' but the reference deadlocks if made from another thread.','line_number':228,'multiline':False]
['text':' See https://docs.oracle.com/javase/specs/jls/se12/html/jls-12.html#jls-12.4','line_number':229,'multiline':False]
['text':' can't happen','line_number':234,'multiline':False]
