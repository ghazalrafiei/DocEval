['text':' Copyright 2020 The Bazel Authors. All rights reserved.','line_number':1,'multiline':False]
['text':'','line_number':2,'multiline':False]
['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':3,'multiline':False]
['text':' you may not use this file except in compliance with the License.','line_number':4,'multiline':False]
['text':' You may obtain a copy of the License at','line_number':5,'multiline':False]
['text':'','line_number':6,'multiline':False]
['text':'    http://www.apache.org/licenses/LICENSE-2.0','line_number':7,'multiline':False]
['text':'','line_number':8,'multiline':False]
['text':' Unless required by applicable law or agreed to in writing, software','line_number':9,'multiline':False]
['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':10,'multiline':False]
['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':11,'multiline':False]
['text':' See the License for the specific language governing permissions and','line_number':12,'multiline':False]
['text':' limitations under the License.','line_number':13,'multiline':False]
['text':'* The Starlark float data type. ','line_number':21,'multiline':True]
['text':'* Returns the Starlark float value that represents x. ','line_number':34,'multiline':True]
['text':'* Returns the value of this float. ','line_number':39,'multiline':True]
['text':'*
   * Defines a total order over float values. Positive and negative zero values compare equal. NaN
   * compares equal to itself and greater than +Inf.
   ','line_number':64,'multiline':True]
['text':' 0.0 == -0.0','line_number':77,'multiline':False]
['text':' At least one operand is NaN.','line_number':80,'multiline':False]
['text':' Canonicalize NaNs using doubleToLongBits and compare bits.','line_number':81,'multiline':False]
['text':' NaN > non-NaN','line_number':84,'multiline':False]
['text':' Equal float and int values must yield the same hash.','line_number':89,'multiline':False]
['text':' For non-integral values we can use a cheaper hash.','line_number':94,'multiline':False]
['text':' Hashing the bits is consistent with equals','line_number':95,'multiline':False]
['text':' because v is neither 0.0 nor -0.0.','line_number':96,'multiline':False]
['text':' canonicalizes NaNs','line_number':97,'multiline':False]
['text':' equal is an equivalence relation consistent with hashCode and compareTo.','line_number':107,'multiline':False]
['text':' Performs printf-style string conversion of a double value v.','line_number':112,'multiline':False]
['text':' conv is one of [efgEFG].','line_number':113,'multiline':False]
['text':' an alias','line_number':134,'multiline':False]
['text':' use DBL_DECIMAL_DIG places','line_number':138,'multiline':False]
['text':' %g is the default format used by str.','line_number':147,'multiline':False]
['text':' It always includes a '.' or an 'e', to make clear that','line_number':148,'multiline':False]
['text':' the value is a float, not an int.','line_number':149,'multiline':False]
['text':'','line_number':150,'multiline':False]
['text':' TODO(adonovan): round the value to the minimal precision required','line_number':151,'multiline':False]
['text':' to avoid ambiguity. This requires computing the decimal digit','line_number':152,'multiline':False]
['text':' strings of the adjacent floating-point values and then taking the','line_number':153,'multiline':False]
['text':' shortest prefix sufficient to distinguish v from them, or using a','line_number':154,'multiline':False]
['text':' more sophisticated algorithm such as Florian Loitsch's Grisu3 or','line_number':155,'multiline':False]
['text':' Ulf Adams' Ryu.  (Is there an easy way to compute the required','line_number':156,'multiline':False]
['text':' precision without materializing the digits? If so we could delegate','line_number':157,'multiline':False]
['text':' to format("%*g", prec, v).)','line_number':158,'multiline':False]
['text':'','line_number':159,'multiline':False]
['text':' For now, we just clean up the output of Java's %.17g implementation,','line_number':160,'multiline':False]
['text':' which is unambiguous, but may yield unnecessarily long digit strings','line_number':161,'multiline':False]
['text':' such as 1000000000000.0.','line_number':162,'multiline':False]
['text':' Ensure result always has a decimal point if no exponent.','line_number':168,'multiline':False]
['text':' "123" -> "123.0"','line_number':169,'multiline':False]
['text':' Remove trailing zeros after decimal point.','line_number':172,'multiline':False]
['text':' "1.110" => "1.11"','line_number':173,'multiline':False]
['text':' "1.000" => "1.0"','line_number':174,'multiline':False]
['text':' Remove trailing zeros from mantissa.','line_number':180,'multiline':False]
['text':' "1.23000e+45" => "1.23e+45"','line_number':181,'multiline':False]
['text':' "1.00000e+45" => "1e+45"','line_number':182,'multiline':False]
['text':' "1.23"','line_number':191,'multiline':False]
['text':' "e+45"','line_number':192,'multiline':False]
['text':'* Returns x // y (floor of division). ','line_number':201,'multiline':True]
['text':'* Returns x / y (floating-point division). ','line_number':209,'multiline':True]
['text':'* Returns x % y (floating-point remainder). ','line_number':217,'multiline':True]
['text':' In Starlark, the sign of the result is the sign of the divisor.','line_number':222,'multiline':False]
['text':'*
   * Returns the Starlark int value closest to x, truncating towards zero.
   *
   * @throws IllegalArgumentException if x is not finite (NaN or Â±Inf).
   ','line_number':230,'multiline':True]
['text':' small value?','line_number':236,'multiline':False]
['text':' Shift must be positive, because we just handled all small values.','line_number':241,'multiline':False]
['text':' Shift mantissa by exponent.','line_number':247,'multiline':False]
['text':' Returns the effective signed mantissa of x.','line_number':254,'multiline':False]
['text':' Precondition: x is finite.','line_number':255,'multiline':False]
['text':' denormal','line_number':261,'multiline':False]
['text':' normal','line_number':265,'multiline':False]
['text':' Returns the effective left (+) or right (-) shift required of the value returned by','line_number':272,'multiline':False]
['text':' getMantissa(x).','line_number':273,'multiline':False]
['text':' Precondition: x is finite.','line_number':274,'multiline':False]
['text':' denormal','line_number':279,'multiline':False]
['text':' normal','line_number':284,'multiline':False]
