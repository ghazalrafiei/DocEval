['text':' Copyright 2019 The Bazel Authors. All rights reserved.','line_number':1,'multiline':False]
['text':'','line_number':2,'multiline':False]
['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':3,'multiline':False]
['text':' you may not use this file except in compliance with the License.','line_number':4,'multiline':False]
['text':' You may obtain a copy of the License at','line_number':5,'multiline':False]
['text':'','line_number':6,'multiline':False]
['text':'    http://www.apache.org/licenses/LICENSE-2.0','line_number':7,'multiline':False]
['text':'','line_number':8,'multiline':False]
['text':' Unless required by applicable law or agreed to in writing, software','line_number':9,'multiline':False]
['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':10,'multiline':False]
['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':11,'multiline':False]
['text':' See the License for the specific language governing permissions and','line_number':12,'multiline':False]
['text':' limitations under the License.','line_number':13,'multiline':False]
['text':'*
 * The Starlark class defines the most important entry points, constants, and functions needed by
 * all clients of the Starlark interpreter.
 ','line_number':52,'multiline':True]
['text':' uninstantiable','line_number':58,'multiline':False]
['text':'* The Starlark None value. ','line_number':60,'multiline':True]
['text':'*
   * A sentinel value passed to optional parameters of StarlarkMethod-annotated methods to indicate
   * that no argument value was supplied.
   ','line_number':63,'multiline':True]
['text':'*
   * The universal bindings predeclared in every Starlark file, such as None, True, len, and range.
   ','line_number':89,'multiline':True]
['text':'*
   * An {@code IllegalArgumentException} subclass for when a non-Starlark object is encountered in a
   * context where a Starlark value ({@code String}, {@code Boolean}, or {@code StarlarkValue}) was
   * expected.
   ','line_number':94,'multiline':True]
['text':'','line_number':114,'multiline':False]
['text':'*
   * Reports whether the argument is a legal Starlark value: a string, boolean, or StarlarkValue.
   ','line_number':122,'multiline':True]
['text':'*
   * Returns {@code x} if it is a {@link #valid} Starlark value, otherwise throws
   * InvalidStarlarkValueException.
   ','line_number':129,'multiline':True]
['text':'* Reports whether {@code x} is Java null or Starlark None. ','line_number':140,'multiline':True]
['text':'* Reports whether a Starlark value is assumed to be deeply immutable. ','line_number':145,'multiline':True]
['text':' TODO(adonovan): eliminate the concept of querying for immutability. It is currently used for','line_number':146,'multiline':False]
['text':' only one purpose, the precondition for adding an element to a Depset, but Depsets should check','line_number':147,'multiline':False]
['text':' hashability, like Dicts. (Similarly, querying for hashability should go: just attempt to hash a','line_number':148,'multiline':False]
['text':' value, and be prepared for it to fail.) In practice, a value may be immutable, either','line_number':149,'multiline':False]
['text':' inherently (e.g. string) or because it has become frozen, but we don't need to query for it.','line_number':150,'multiline':False]
['text':' Just attempt a mutation and be prepared for it to fail.','line_number':151,'multiline':False]
['text':' It is inefficient and potentially inconsistent to ask before doing.','line_number':152,'multiline':False]
['text':'','line_number':153,'multiline':False]
['text':' The main obstacle is that although depsets disallow (say) lists as keys even when frozen,','line_number':154,'multiline':False]
['text':' they permit a tuple of lists, or a struct containing lists, and many users exploit this.','line_number':155,'multiline':False]
['text':' NB: This is used as the basis for accepting objects in Depsets,','line_number':157,'multiline':False]
['text':' as well as for accepting objects as keys for Starlark dicts.','line_number':158,'multiline':False]
['text':'*
   * Returns normally if the Starlark value is hashable and thus suitable as a dict key.
   *
   * @throws EvalException otherwise.
   ','line_number':169,'multiline':True]
['text':' Strings are the most common dict keys. Check them first, since `instanceof StarlarkValue`','line_number':176,'multiline':False]
['text':' (an interface) is slower than `instanceof String` (a final class).','line_number':177,'multiline':False]
['text':' Throw if the type is bad. Otherwise it's a Boolean, which is hashable.','line_number':181,'multiline':False]
['text':'*
   * Converts a Java value {@code x} to a Starlark one, if x is not already a valid Starlark value.
   * An Integer, Long, or BigInteger is converted to a Starlark int, a double is converted to a
   * Starlark float, a Java List or Map is converted to a Starlark list or dict, respectively, and
   * null becomes {@link #NONE}. Any other non-Starlark value causes the function to throw
   * InvalidStarlarkValueException.
   *
   * <p>Elements of Lists and Maps must be valid Starlark values; they are not recursively
   * converted. (This avoids excessive unintended deep copying.)
   *
   * <p>This function is applied to the results of StarlarkMethod-annotated Java methods.
   ','line_number':186,'multiline':True]
['text':'*
   * Converts a Starlark method's bound, non-None parameter value to a Java Optional wrapping that
   * value, and an unbound or None value to an empty Optional.
   *
   * <p>This is typically used in {@link StarlarkMethod} implementations, with a parameter whose
   * {@link Param#allowedTypes} is set to be {@code {T}} or {@code {NoneType, T}}.
   *
   * @throws ClassCastException if value is bound and non-None but is not of the expected class
   ','line_number':221,'multiline':True]
['text':'*
   * Returns the truth value of a valid Starlark value, as if by the Starlark expression {@code
   * bool(x)}.
   ','line_number':238,'multiline':True]
['text':'*
   * Checks whether the Freezable Starlark value is frozen or temporarily immutable due to active
   * iterators.
   *
   * @throws EvalException if the value is not mutable.
   ','line_number':254,'multiline':True]
['text':'*
   * Returns an iterable view of {@code x} if it is an iterable Starlark value; throws EvalException
   * otherwise.
   *
   * <p>Whereas the interpreter temporarily freezes the iterable value by bracketing {@code for}
   * loops and comprehensions in calls to {@link Freezable#updateIteratorCount}, iteration using
   * this method does not freeze the value. Callers should exercise care not to mutate the
   * underlying object during iteration.
   ','line_number':269,'multiline':True]
['text':'*
   * Returns a new array of class Object[] containing the elements of Starlark iterable value {@code
   * x}. A Starlark value is iterable if it implements {@link StarlarkIterable}.
   ','line_number':285,'multiline':True]
['text':' Specialize Sequence and Dict to avoid allocation and/or indirection.','line_number':290,'multiline':False]
['text':' The returned array type must be exactly Object[],','line_number':292,'multiline':False]
['text':' not a subclass, so calling toArray() is not enough.','line_number':293,'multiline':False]
['text':'*
   * Returns the length of a Starlark string, sequence (such as a list or tuple), dict, or other
   * iterable, as if by the Starlark expression {@code len(x)}, or -1 if the value is valid but has
   * no length.
   ','line_number':302,'multiline':True]
['text':' Iterables.size runs in constant time if x implements Collection.','line_number':315,'multiline':False]
['text':' valid but not a sequence','line_number':319,'multiline':False]
['text':'* Returns the name of the type of a value as if by the Starlark expression {@code type(x)}. ','line_number':323,'multiline':True]
['text':'*
   * Returns the name of the type of instances of class c.
   *
   * <p>This function accepts any class, not just those of legal Starlark values, and may be used
   * for reporting error messages involving arbitrary Java classes, for example at the interface
   * between Starlark and Java.
   ','line_number':328,'multiline':True]
['text':' Check for "direct hits" first to avoid needing to scan for annotations.','line_number':336,'multiline':False]
['text':' Shortcut for the most common types.','line_number':347,'multiline':False]
['text':' These cases can be handled by `getStarlarkBuiltin`','line_number':348,'multiline':False]
['text':' but `getStarlarkBuiltin` is quite expensive.','line_number':349,'multiline':False]
['text':' Abstract types, often used as parameter types.','line_number':366,'multiline':False]
['text':' Note == not isAssignableFrom: we don't want any','line_number':367,'multiline':False]
['text':' concrete types to inherit these names.','line_number':368,'multiline':False]
['text':' "unknown" is another unfortunate choice.','line_number':385,'multiline':False]
['text':' Object.class does mean "unknown" when talking about the type parameter','line_number':386,'multiline':False]
['text':' of a collection (List<Object>), but it also means "any" when used','line_number':387,'multiline':False]
['text':' as an argument to Sequence.cast, and more generally it means "value".','line_number':388,'multiline':False]
['text':' Any class of java.util.List that isn't a Sequence.','line_number':392,'multiline':False]
['text':' Any class of java.util.Map that isn't a Dict.','line_number':396,'multiline':False]
['text':' Integer is not a legal Starlark value, but it does appear as','line_number':400,'multiline':False]
['text':' the return type for many built-in functions.','line_number':401,'multiline':False]
['text':' Built-in void methods return None to Starlark.','line_number':405,'multiline':False]
['text':' Built-in function may return boolean.','line_number':409,'multiline':False]
['text':'*
   * Returns the name of the type of instances of {@code c} after being converted to Starlark values
   * by {@link #fromJava}, or "unknown" for {@code Object.class}, since that is used as a wildcard
   * type by evaluation machinery.
   *
   * <p>Note that {@code void.class} is treated as "NoneType" since void methods will return None to
   * Starlark.
   *
   * @throws InvalidStarlarkValueException if {@code c} is not {@code Object.class} and {@link
   *     #fromJava} would throw for instances of {@code c}.
   ','line_number':418,'multiline':True]
['text':' Method.invoke on void-returning methods returns null; we treat it as None','line_number':431,'multiline':False]
['text':'*
   * The ordering relation over (some) Starlark values.
   *
   * <p>Starlark values are ordered as follows.
   *
   * <ul>
   *   <li>{@code False < True}.
   *   <li>int values are ordered according to mathematical tradition.
   *   <li>float values are ordered according to IEEE 754, with the exception of NaN values: all NaN
   *       values compare equal to each other and greater than +Inf. The zero values 0.0 and -0.0
   *       compare equal.
   *   <li>int and float values may be compared. The comparison is mathematically exact, even if
   *       neither argument may be exactly converted to the type of the other. This is the only
   *       permitted case of comparisons between values of different types. NaN values compare
   *       greater than all integers.
   *   <li>Strings are ordered lexicographically by their elements (chars). So too are lists and
   *       tuples, though lists are not comparable with tuples.
   *   <li>If x implements Comparable, its {@code compareTo(y)} method may be called to determine
   *       the comparison if x and y have the same {@link #type}, though not necessary the same Java
   *       class.
   *   <li>Ordered comparison of any other values is an error (ClassCastException).
   * </ul>
   *
   * <p>This method defines a strict weak ordering that is consistent with {@link Object#equals}.
   ','line_number':454,'multiline':True]
['text':'*
   * Defines the strict weak ordering of Starlark values used for sorting and the comparison
   * operators. Throws ClassCastException on failure.
   ','line_number':487,'multiline':True]
['text':' Ordered? e.g. string, int, bool, float.','line_number':493,'multiline':False]
['text':' different types','line_number':501,'multiline':False]
['text':' float < int','line_number':504,'multiline':False]
['text':' int < float','line_number':508,'multiline':False]
['text':'* Returns the string form of a value as if by the Starlark expression {@code str(x)}. ','line_number':522,'multiline':True]
['text':'* Returns the string form of a value as if by the Starlark expression {@code repr(x)}. ','line_number':527,'multiline':True]
['text':'* Returns a string formatted as if by the Starlark expression {@code pattern % arguments}. ','line_number':532,'multiline':True]
['text':'* Returns a string formatted as if by the Starlark expression {@code pattern % arguments}. ','line_number':539,'multiline':True]
['text':'*
   * Returns a Starlark doc string with each line trimmed and dedented to the minimal common
   * indentation level (except for the first line, which is always fully trimmed), and with leading
   * and trailing empty lines removed, following the PEP-257 algorithm. See
   * https://peps.python.org/pep-0257/#handling-docstring-indentation
   *
   * <p>For whitespace trimming, we use the same definition of whitespace as the Starlark {@code
   * string.strip} method.
   *
   * <p>Following PEP-257, we expand tabs in the doc string with tab size 8 before dedenting.
   * Starlark does not use tabs for indentation, but Starlark string values may contain tabs, so we
   * choose to expand them for consistency with Python.
   *
   * <p>The intent is to turn documentation strings like
   *
   * <pre>
   *     """Heading
   *
   *     Details paragraph
   *     """
   * </pre>
   *
   * and
   *
   * <pre>
   *     """
   *     Heading
   *
   *     Details paragraph
   *     """
   * </pre>
   *
   * into the desired "Heading\n\nDetails paragraph" form, and avoid the risk of documentation
   * processors interpreting indented parts of the original string as special formatting (e.g. code
   * blocks in the case of Markdown).
   ','line_number':547,'multiline':True]
['text':' First line is special: we fully strip it and ignore it for leading spaces calculation','line_number':588,'multiline':False]
['text':' Length check ensures we ignore leading empty lines','line_number':606,'multiline':False]
['text':' Remove trailing empty lines','line_number':614,'multiline':False]
['text':'*
   * Expands tab characters to one or more spaces, producing the same indentation level at any given
   * point on any given line as would be expected when rendering the string with a given tab size; a
   * Java port of Python's {@code str.expandtabs}.
   ','line_number':618,'multiline':True]
['text':' Don't alloc in the fast case.','line_number':625,'multiline':False]
['text':'* Returns a slice of a sequence as if by the Starlark operation {@code x[start:stop:step]}. ','line_number':654,'multiline':True]
['text':' step','line_number':671,'multiline':False]
['text':' start, stop','line_number':681,'multiline':False]
['text':' positive stride: default indices are [0:n].','line_number':683,'multiline':False]
['text':' => empty result','line_number':697,'multiline':False]
['text':' negative stride: default indices are effectively [n-1:-1],','line_number':701,'multiline':False]
['text':' though to get this effect using explicit indices requires','line_number':702,'multiline':False]
['text':' [n-1:-1-n:-1] because of the treatment of negative values.','line_number':703,'multiline':False]
['text':' => empty result','line_number':729,'multiline':False]
['text':' slice operation','line_number':733,'multiline':False]
['text':'*
   * Returns the signed 32-bit value of a Starlark int. Throws an exception including {@code what}
   * if x is not a Starlark int or its value is not exactly representable as a Java int.
   *
   * @throws IllegalArgumentException if x is an Integer, which is not a Starlark value.
   ','line_number':741,'multiline':True]
['text':'*
   * Calls the function-like value {@code fn} in the specified thread, passing it the given
   * positional and named arguments, as if by the Starlark expression {@code fn(*args, **kwargs)}.
   *
   * <p>See also {@link #fastcall}.
   ','line_number':757,'multiline':True]
['text':'*
   * Calls the function-like value {@code fn} in the specified thread, passing it the given
   * positional and named arguments in the "fastcall" array representation.
   *
   * <p>The caller must not subsequently modify or even inspect the two arrays.
   *
   * <p>If the call throws an unchecked throwable, regardless of whether it originates in a
   * user-defined built-in function or a bug in the interpreter itself, the throwable is wrapped by
   * {@link UncheckedEvalException} (for {@link RuntimeException}) or {@link UncheckedEvalError}
   * (for {@link Error}). The {@linkplain Throwable#getStackTrace stack trace} will reflect the
   * Starlark call stack rather than the Java call stack. The original throwable (and the Java call
   * stack) may be retrieved using {@link Throwable#getCause}.
   ','line_number':775,'multiline':True]
['text':' @StarlarkMethod(selfCall)?','line_number':795,'multiline':False]
['text':' already wrapped','line_number':808,'multiline':False]
['text':' If this exception was newly thrown, set its stack.','line_number':814,'multiline':False]
['text':'*
   * Decorates a {@link RuntimeException} with its Starlark stack, to help maintainers locate
   * problematic source expressions.
   *
   * <p>The original exception can be retrieved using {@link #getCause}.
   ','line_number':821,'multiline':True]
['text':'*
   * Decorates an {@link Error} with its Starlark stack, to help maintainers locate problematic
   * source expressions.
   *
   * <p>The original exception can be retrieved using {@link #getCause}.
   ','line_number':835,'multiline':True]
['text':'*
   * Returns a new EvalException with no location and an error message produced by Java-style string
   * formatting ({@code String.format(format, args)}). Use {@code errorf("%s", msg)} to produce an
   * error message from a non-constant expression {@code msg}.
   ','line_number':855,'multiline':True]
['text':' don't forget to throw it','line_number':861,'multiline':False]
['text':' --- methods related to attributes (fields and methods) ---','line_number':866,'multiline':False]
['text':'*
   * Reports whether the value {@code x} has a field or method of the given name, as if by the
   * Starlark expression {@code hasattr(x, name)}.
   ','line_number':868,'multiline':True]
['text':'*
   * Returns the named field or method of value {@code x}, as if by the Starlark expression {@code
   * getattr(x, name, defaultValue)}. If the value has no such attribute, getattr returns {@code
   * defaultValue} if non-null, or throws an EvalException otherwise.
   ','line_number':878,'multiline':True]
['text':' StarlarkMethod-annotated field or method?','line_number':890,'multiline':False]
['text':' user-defined field?','line_number':900,'multiline':False]
['text':'*
   * Returns a new sorted list containing the names of the Starlark-accessible fields and methods of
   * the specified value, as if by the Starlark expression {@code dir(x)}.
   ','line_number':926,'multiline':True]
['text':' Order the fields alphabetically.','line_number':931,'multiline':False]
['text':' --- methods related to StarlarkMethod-annotated classes ---','line_number':940,'multiline':False]
['text':'*
   * Returns the value of the named field of Starlark value {@code x}, as defined by a Java method
   * with a {@code StarlarkMethod(structField=true)} annotation.
   *
   * <p>Most callers should use {@link #getattr} instead.
   ','line_number':942,'multiline':True]
['text':'*
   * Returns the names of the fields of Starlark value {@code x}, as defined by Java methods with
   * {@code StarlarkMethod(structField=true)} annotations under the specified semantics.
   *
   * <p>Most callers should use {@link #dir} instead.
   ','line_number':953,'multiline':True]
['text':'*
   * Returns a map of Java methods and corresponding StarlarkMethod annotations for each annotated
   * Java method of the specified class. Elements are ordered by Java method name, which is not
   * necessarily the same as the Starlark attribute name. The set of enabled methods is determined
   * by {@link StarlarkSemantics#DEFAULT}. Excludes the {@code selfCall} method, if any.
   *
   * <p>Most callers should use {@link #dir} and {@link #getattr} instead.
   ','line_number':963,'multiline':True]
['text':' TODO(adonovan): move to StarlarkAnnotations; it's a static property of the annotations.','line_number':971,'multiline':False]
['text':'*
   * Returns the {@code StarlarkMethod(selfCall=true)}-annotated Java method of the specified Java
   * class that is called when Starlark calls an instance of that class like a function. It returns
   * null if no such method exists.
   ','line_number':981,'multiline':True]
['text':'* Equivalent to {@code addMethods(env, v, StarlarkSemantics.DEFAULT)}. ','line_number':991,'multiline':True]
['text':'*
   * Adds to the environment {@code env} all Starlark methods of value {@code v}, filtered by the
   * given semantics. Starlark methods are Java methods of {@code v} with a {@link StarlarkMethod}
   * annotation whose {@code structField} and {@code selfCall} flags are both false.
   *
   * @throws IllegalArgumentException if any method annotation's {@link StarlarkMethod#structField}
   *     flag is true.
   ','line_number':996,'multiline':True]
['text':' TODO(adonovan): rather than silently skip the selfCall method, reject it.','line_number':1007,'multiline':False]
['text':' We cannot accept fields, as they are inherently problematic:','line_number':1012,'multiline':False]
['text':' what if the Java method call fails, or gets interrupted?','line_number':1013,'multiline':False]
['text':' We use the 2-arg (desc=null) BuiltinFunction constructor instead of passing','line_number':1019,'multiline':False]
['text':' the descriptor that CallUtils.getAnnotatedMethod would return,','line_number':1020,'multiline':False]
['text':' because most calls to addMethods implicitly pass StarlarkSemantics.DEFAULT,','line_number':1021,'multiline':False]
['text':' which is probably the wrong semantics for the later call.','line_number':1022,'multiline':False]
['text':'','line_number':1023,'multiline':False]
['text':' The effect is that the default semantics determine which method names are','line_number':1024,'multiline':False]
['text':' statically available in the environment, but the thread's semantics determine','line_number':1025,'multiline':False]
['text':' the dynamic behavior of the method call; this includes a run-time check for','line_number':1026,'multiline':False]
['text':' whether the method was disabled by the semantics.','line_number':1027,'multiline':False]
['text':'*
   * Parses the input as a file, resolves it in the specified module environment, compiles it, and
   * executes it in the specified thread. On success it returns None, unless the file's final
   * statement is an expression, in which case its value is returned.
   *
   * @throws SyntaxError.Exception if there were (static) scanner, parser, or resolver errors.
   * @throws EvalException if there was a (dynamic) evaluation error.
   * @throws InterruptedException if the Java thread was interrupted during evaluation.
   ','line_number':1032,'multiline':True]
['text':'* Variant of {@link #execFile} that creates a module for the given predeclared environment. ','line_number':1049,'multiline':True]
['text':' TODO(adonovan): is this needed?','line_number':1050,'multiline':False]
['text':'*
   * Executes a compiled Starlark file (as obtained from {@link Program#compileFile}) in the given
   * StarlarkThread. On success it returns None, unless the file's final statement is an expression,
   * in which case its value is returned.
   *
   * @throws EvalException if there was a (dynamic) evaluation error.
   * @throws InterruptedException if the Java thread was interrupted during evaluation.
   ','line_number':1061,'multiline':True]
['text':' A given Module may be passed to execFileProgram multiple times in sequence,','line_number':1073,'multiline':False]
['text':' for different compiled Programs. (This happens in the REPL, and in','line_number':1074,'multiline':False]
['text':' EvaluationTestCase scenarios. It is not true of the go.starlark.net','line_number':1075,'multiline':False]
['text':' implementation, and it complicates things significantly.','line_number':1076,'multiline':False]
['text':' It would be nice to stop doing that.)','line_number':1077,'multiline':False]
['text':'','line_number':1078,'multiline':False]
['text':' Therefore StarlarkFunctions from different Programs (files) but initializing','line_number':1079,'multiline':False]
['text':' the same Module need different mappings from the Program's numbering of','line_number':1080,'multiline':False]
['text':' globals to the Module's numbering of globals, and to access a global requires','line_number':1081,'multiline':False]
['text':' two array lookups.','line_number':1082,'multiline':False]
['text':'defaultValues=','line_number':1097,'multiline':True]
['text':'freevars=','line_number':1098,'multiline':True]
['text':'*
   * Parses the input as an expression, resolves it in the specified module environment, compiles
   * it, evaluates it, and returns its value.
   *
   * @throws SyntaxError.Exception if there were (static) scanner, parser, or resolver errors.
   * @throws EvalException if there was a (dynamic) evaluation error.
   * @throws InterruptedException if the Java thread was interrupted during evaluation.
   ','line_number':1104,'multiline':True]
['text':'* Variant of {@link #eval} that creates a module for the given predeclared environment. ','line_number':1119,'multiline':True]
['text':' TODO(adonovan): is this needed?','line_number':1120,'multiline':False]
['text':'*
   * Parses the input as an expression, resolves it in the specified module environment, and returns
   * a callable no-argument Starlark function value that computes and returns the value of the
   * expression.
   *
   * @throws SyntaxError.Exception if there were scanner, parser, or resolver errors.
   ','line_number':1131,'multiline':True]
['text':' see execFileProgram','line_number':1143,'multiline':False]
['text':'defaultValues=','line_number':1145,'multiline':True]
['text':'freevars=','line_number':1145,'multiline':True]
['text':'*
   * Starts the CPU profiler with the specified sampling period, writing a pprof profile to {@code
   * out}. All running Starlark threads are profiled. May be called concurrent with Starlark
   * execution.
   *
   * @throws IllegalStateException exception if the Starlark profiler is already running or if the
   *     operating system's profiling resources for this process are already in use.
   ','line_number':1148,'multiline':True]
['text':'*
   * Stops the profiler and waits for the log to be written. Throws an unchecked exception if the
   * profiler was not already started by a prior call to {@link #startCpuProfile}.
   ','line_number':1160,'multiline':True]
