['text':' Copyright 2014 The Bazel Authors. All rights reserved.','line_number':1,'multiline':False]
['text':'','line_number':2,'multiline':False]
['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':3,'multiline':False]
['text':' you may not use this file except in compliance with the License.','line_number':4,'multiline':False]
['text':' You may obtain a copy of the License at','line_number':5,'multiline':False]
['text':'','line_number':6,'multiline':False]
['text':'    http://www.apache.org/licenses/LICENSE-2.0','line_number':7,'multiline':False]
['text':'','line_number':8,'multiline':False]
['text':' Unless required by applicable law or agreed to in writing, software','line_number':9,'multiline':False]
['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':10,'multiline':False]
['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':11,'multiline':False]
['text':' See the License for the specific language governing permissions and','line_number':12,'multiline':False]
['text':' limitations under the License.','line_number':13,'multiline':False]
['text':'* The universal predeclared functions of core Starlark. ','line_number':28,'multiline':True]
['text':'* Returns the maximum element from this list, as determined by maxOrdering. ','line_number':59,'multiline':True]
['text':' Args can either be a list of items to compare, or a singleton list whose element is an','line_number':62,'multiline':False]
['text':' iterable of items to compare. In either case, there must be at least one item to compare.','line_number':63,'multiline':False]
['text':' e.g. unsupported comparison: int <=> string','line_number':68,'multiline':False]
['text':' no key?','line_number':167,'multiline':False]
['text':' The user provided a key function.','line_number':177,'multiline':False]
['text':' We must call it exactly once per element, in order,','line_number':178,'multiline':False]
['text':' so use the decorate/sort/undecorate pattern.','line_number':179,'multiline':False]
['text':' decorate','line_number':185,'multiline':False]
['text':' may cause Arrays.sort to fail; see below','line_number':206,'multiline':False]
['text':' sort','line_number':211,'multiline':False]
['text':' Arrays.sort failed because comp violated the Comparator contract.','line_number':216,'multiline':False]
['text':' There was no exception from order.compare.','line_number':218,'multiline':False]
['text':' Likely the application defined a Comparable type whose','line_number':219,'multiline':False]
['text':' compareTo is not a strict weak order.','line_number':220,'multiline':False]
['text':' Sort completed, possibly with deferred errors.','line_number':225,'multiline':False]
['text':' undecorate','line_number':230,'multiline':False]
['text':'','line_number':344,'multiline':False]
['text':'','line_number':346,'multiline':False]
['text':'','line_number':348,'multiline':False]
['text':'','line_number':350,'multiline':False]
['text':'','line_number':354,'multiline':False]
['text':'','line_number':355,'multiline':False]
['text':' {,+,-}{NaN,Inf,Infinity}','line_number':372,'multiline':False]
['text':' non-finite','line_number':373,'multiline':False]
['text':' finite','line_number':389,'multiline':False]
['text':' parseDouble accepts signed "NaN" and "Infinity" (case sensitive)','line_number':393,'multiline':False]
['text':' but we already handled those cases, so this indicates','line_number':394,'multiline':False]
['text':' a large number rounded to infinity.','line_number':395,'multiline':False]
['text':' switch','line_number':402,'multiline':False]
['text':'','line_number':427,'multiline':False]
['text':'','line_number':429,'multiline':False]
['text':'','line_number':445,'multiline':False]
['text':'','line_number':449,'multiline':False]
['text':'','line_number':453,'multiline':False]
['text':' common case: dict(k=v, ...)','line_number':521,'multiline':False]
['text':' Note Python uses 'sequence' keyword instead of 'list'. We may want to change tihs','line_number':537,'multiline':False]
['text':' some day.','line_number':538,'multiline':False]
['text':' update in place','line_number':548,'multiline':False]
['text':' Deterministic hashing is important for the consistency of builds, hence why we','line_number':560,'multiline':False]
['text':' promise a specific algorithm. This is in contrast to Java (Object.hashCode()) and','line_number':561,'multiline':False]
['text':' Python, which promise stable hashing only within a given execution of the program.','line_number':562,'multiline':False]
['text':' TODO(adonovan): support arbitrary integers.','line_number':615,'multiline':False]
['text':'* Returns true if the object has a field of the given name, otherwise false. ','line_number':619,'multiline':True]
['text':' TODO(adonovan): remove. See https://github.com/bazelbuild/starlark/issues/47.','line_number':679,'multiline':False]
['text':' TODO(adonovan): remove. See https://github.com/bazelbuild/starlark/issues/47.','line_number':688,'multiline':False]
['text':' msg acts like a leading element of args.','line_number':717,'multiline':False]
['text':' NB: as compared to Python3, we're missing optional named-only arguments 'end' and 'file'','line_number':755,'multiline':False]
['text':' The PRINT_TEST_MARKER key is used in tests to verify the effects of command-line options.','line_number':766,'multiline':False]
['text':' See starlark_flag_test.sh, which runs bazel with --internal_starlark_flag_test_canary.','line_number':767,'multiline':False]
['text':' There is no 'type' type in Starlark, so we return a string with the type name.','line_number':792,'multiline':False]
['text':'* Starlark bool type. ','line_number':834,'multiline':True]
['text':' (documentation only)','line_number':842,'multiline':False]
