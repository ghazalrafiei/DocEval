['text':' Copyright 2014 The Bazel Authors. All rights reserved.','line_number':1,'multiline':False]
['text':'','line_number':2,'multiline':False]
['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':3,'multiline':False]
['text':' you may not use this file except in compliance with the License.','line_number':4,'multiline':False]
['text':' You may obtain a copy of the License at','line_number':5,'multiline':False]
['text':'','line_number':6,'multiline':False]
['text':'    http://www.apache.org/licenses/LICENSE-2.0','line_number':7,'multiline':False]
['text':'','line_number':8,'multiline':False]
['text':' Unless required by applicable law or agreed to in writing, software','line_number':9,'multiline':False]
['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':10,'multiline':False]
['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':11,'multiline':False]
['text':' See the License for the specific language governing permissions and','line_number':12,'multiline':False]
['text':' limitations under the License.','line_number':13,'multiline':False]
['text':'*
 * The Resolver resolves each identifier in a syntax tree to its binding, and performs other
 * validity checks.
 *
 * <p>When a variable is defined, it is visible in the entire block. For example, a global variable
 * is visible in the entire file; a variable in a function is visible in the entire function block
 * (even on the lines before its first assignment).
 *
 * <p>Resolution is a mutation of the syntax tree, as it attaches binding information to Identifier
 * nodes. (In the future, it will attach additional information to functions to support lexical
 * scope, and even compilation of the trees to bytecode.) Resolution errors are reported in the
 * analogous manner to scan/parse errors: for a StarlarkFile, they are appended to {@code
 * StarlarkFile.errors}; for an expression they are reported by an SyntaxError.Exception exception.
 * It is legal to resolve a file that already contains scan/parse errors, though it may lead to
 * secondary errors.
 ','line_number':30,'multiline':True]
['text':' TODO(adonovan):','line_number':48,'multiline':False]
['text':' - use "keyword" (not "named") and "required" (not "mandatory") terminology everywhere,','line_number':49,'multiline':False]
['text':'   including the spec.','line_number':50,'multiline':False]
['text':' - move the "no if statements at top level" check to bazel's check{Build,*}Syntax','line_number':51,'multiline':False]
['text':'   (that's a spec change), or put it behind a FileOptions flag (no spec change).','line_number':52,'multiline':False]
['text':'* Scope discriminates the scope of a binding: global, local, etc. ','line_number':54,'multiline':True]
['text':'* Binding is local to a function, comprehension, or file (e.g. load). ','line_number':56,'multiline':True]
['text':'* Binding is non-local and occurs outside any function or comprehension. ','line_number':58,'multiline':True]
['text':'* Binding is local to a function, comprehension, or file, but shared with nested functions. ','line_number':60,'multiline':True]
['text':'* Binding is an implicit parameter whose value is the CELL of some enclosing function. ','line_number':62,'multiline':True]
['text':'* Binding is predeclared by the application (e.g. glob in Bazel). ','line_number':64,'multiline':True]
['text':'* Binding is predeclared by the core (e.g. None). ','line_number':66,'multiline':True]
['text':'*
   * A Binding is a static abstraction of a variable. The Resolver maps each Identifier to a
   * Binding.
   ','line_number':75,'multiline':True]
['text':' index within frame (LOCAL/CELL), freevars (FREE), or module (GLOBAL)','line_number':81,'multiline':False]
['text':' first binding use, if syntactic','line_number':82,'multiline':False]
['text':'* Returns the name of this binding's identifier. ','line_number':90,'multiline':True]
['text':'* Returns the scope of the binding. ','line_number':96,'multiline':True]
['text':'*
     * Returns the index of a binding within its function's frame (LOCAL/CELL), freevars (FREE), or
     * module (GLOBAL).
     ','line_number':101,'multiline':True]
['text':'* A Resolver.Function records information about a resolved function. ','line_number':118,'multiline':True]
['text':' TODO(adonovan): move to Program.','line_number':133,'multiline':False]
['text':' Create an index of the locals that are cells.','line_number':165,'multiline':False]
['text':'*
     * Returns the name of the function. It may be "<toplevel>" for the implicit function that holds
     * the top-level statements of a file, or "<expr>" for the implicit function that evaluates a
     * single expression.
     ','line_number':181,'multiline':True]
['text':'* Returns the value denoted by the function's doc string literal, or null if absent. ','line_number':190,'multiline':True]
['text':'* Returns the function's local bindings, parameters first. ','line_number':207,'multiline':True]
['text':'*
     * Returns the indices within {@code getLocals()} of the "cells", that is, local variables of
     * thus function that are shared with nested functions. The caller must not modify the result.
     ','line_number':212,'multiline':True]
['text':'*
     * Returns the list of names of globals referenced by this function. The order matches the
     * indices used in compiled code.
     ','line_number':220,'multiline':True]
['text':'*
     * Returns the list of enclosing CELL or FREE bindings referenced by this function. At run time,
     * these values, all of which are cells containing variables local to some enclosing function,
     * will be stored in the closure. (CELL bindings in this list are local to the immediately
     * enclosing function, while FREE bindings pass through one or more intermediate enclosing
     * functions.)
     ','line_number':228,'multiline':True]
['text':'* Returns the location of the function's identifier. ','line_number':239,'multiline':True]
['text':'*
     * Returns the function's parameters, in "run-time order": non-keyword-only parameters,
     * keyword-only parameters, {@code *args}, and finally {@code **kwargs}. A bare {@code *}
     * parameter is dropped.
     ','line_number':244,'multiline':True]
['text':'*
     * Returns the effective statements of the function's body. (For the implicit function created
     * to evaluate a single standalone expression, this may contain a synthesized Return statement.)
     ','line_number':253,'multiline':True]
['text':' TODO(adonovan): eliminate when we switch to compiler.','line_number':257,'multiline':False]
['text':'* Reports whether the function has an {@code *args} parameter. ','line_number':262,'multiline':True]
['text':'* Reports whether the function has a {@code **kwargs} parameter. ','line_number':267,'multiline':True]
['text':'*
     * Returns the number of the function's keyword-only parameters, such as {@code c} in {@code def
     * f(a, *b, c, **d)} or {@code def f(a, *, c, **d)}.
     ','line_number':272,'multiline':True]
['text':'* Returns the names of the parameters. Order is as for {@link #getParameters}. ','line_number':280,'multiline':True]
['text':'*
     * isToplevel indicates that this is the <toplevel> function containing top-level statements of
     * a file.
     ','line_number':285,'multiline':True]
['text':' TODO(adonovan): remove this when we remove Bazel's "export" hack,','line_number':289,'multiline':False]
['text':' or switch to a compiled representation of function bodies.','line_number':290,'multiline':False]
['text':'*
   * A Module is a static abstraction of a Starlark module (see {@link
   * net.starlark.java.eval.Module})). It describes, for the resolver and compiler, the set of
   * variable names that are predeclared, either by the interpreter (UNIVERSAL) or by the
   * application (PREDECLARED), plus the set of pre-defined global names (which is typically empty,
   * except in a REPL or EvaluationTestCase scenario).
   ','line_number':296,'multiline':True]
['text':'*
     * Resolves a name to a GLOBAL, PREDECLARED, or UNIVERSAL binding.
     *
     * @throws Undefined if the name is not defined.
     ','line_number':305,'multiline':True]
['text':'*
     * An Undefined exception indicates a failure to resolve a top-level name. If {@code candidates}
     * is non-null, it provides the set of accessible top-level names, which, along with local
     * names, will be used as candidates for spelling suggestions.
     ','line_number':312,'multiline':True]
['text':' A simple implementation of the Module for testing.','line_number':327,'multiline':False]
['text':' It defines only the predeclared names---no "universal" names (e.g. None)','line_number':328,'multiline':False]
['text':' or initially-defined globals (as happens in a REPL).','line_number':329,'multiline':False]
['text':' Realistically, most clients will use an eval.Module.','line_number':330,'multiline':False]
['text':' TODO(adonovan): move into test/ tree.','line_number':331,'multiline':False]
['text':'*
   * Represents a lexical block.
   *
   * <p>Blocks should not be confused with frames. A block generally (but not always) corresponds to
   * a syntactic element that may introduce variables; the variable is only accessible within the
   * block (and its descendants, unless shadowed). A frame is the place where the variable's content
   * will be stored, and is associated with the current enclosing function. Blocks are used to map
   * an identifier to the proper variable binding, whereas frames are used to ensure each binding
   * has a distinct slot of memory.
   *
   * <p>In particular, comprehension expressions have their own block but share the same underlying
   * frame as their enclosing function. This means that comprehension-local variables are not
   * accessible outside the comprehension, yet these variables are still stored alongside the other
   * local variables of the function.
   ','line_number':343,'multiline':True]
['text':' enclosing block, or null for tail of list','line_number':359,'multiline':False]
['text':' Comprehension, DefStatement/LambdaExpression, StarlarkFile, or null','line_number':360,'multiline':False]
['text':' accumulated locals of enclosing function','line_number':361,'multiline':False]
['text':' Accumulated CELL/FREE bindings of the enclosing function that will provide','line_number':362,'multiline':False]
['text':' the values for the free variables of this function; see Function.getFreeVars.','line_number':363,'multiline':False]
['text':' Null for toplevel functions and expressions, which have no free variables.','line_number':364,'multiline':False]
['text':' Bindings for names defined in this block.','line_number':367,'multiline':False]
['text':' Also, as an optimization, memoized lookups of enclosing bindings.','line_number':368,'multiline':False]
['text':' List whose order defines the numbering of global variables in this program.','line_number':386,'multiline':False]
['text':' A cache of PREDECLARED, UNIVERSAL, and GLOBAL bindings queried from the module.','line_number':388,'multiline':False]
['text':' Linked list of blocks, innermost first, for functions and comprehensions and (finally) file.','line_number':390,'multiline':False]
['text':' Formats and reports an error at the start of the specified node.','line_number':400,'multiline':False]
['text':' Formats and reports an error at the specified location.','line_number':406,'multiline':False]
['text':'*
   * First pass: add bindings for all variables to the current block. This is done because symbols
   * are sometimes used before their definition point (e.g. functions are not necessarily declared
   * in order).
   ','line_number':412,'multiline':True]
['text':'isLoad=','line_number':442,'multiline':True]
['text':' Reject load('...', '_private').','line_number':448,'multiline':False]
['text':' A load statement may not bind a single name more than once,','line_number':454,'multiline':False]
['text':' even if options.allowToplevelRebinding.','line_number':455,'multiline':False]
['text':'isLoad=','line_number':458,'multiline':True]
['text':' nothing to declare','line_number':467,'multiline':False]
['text':'isLoad=','line_number':473,'multiline':True]
['text':' Bindings are created by the first pass (createBindings),','line_number':479,'multiline':False]
['text':' so there's nothing to do here.','line_number':480,'multiline':False]
['text':' validate call arguments','line_number':513,'multiline':False]
['text':' Skip super.visit: don't revisit local Identifier as a use.','line_number':581,'multiline':False]
['text':' Do not visit the field.','line_number':595,'multiline':False]
['text':' Following Python3, the first for clause is resolved','line_number':602,'multiline':False]
['text':' outside the comprehension block. All the other loops','line_number':603,'multiline':False]
['text':' are resolved in the scope of their own bindings,','line_number':604,'multiline':False]
['text':' permitting forward references.','line_number':605,'multiline':False]
['text':' A comprehension defines a distinct lexical block in the same function's frame.','line_number':609,'multiline':False]
['text':' New bindings go in the frame but aren't visible to the parent block.','line_number':610,'multiline':False]
['text':' Disallow: [e, ...] += rhs','line_number':673,'multiline':False]
['text':' Other bad cases are handled in assign.','line_number':674,'multiline':False]
['text':' Resolves a non-binding identifier to an existing binding, or null.','line_number':684,'multiline':False]
['text':' Locally defined in this function, comprehension,','line_number':689,'multiline':False]
['text':' or file block, or an enclosing one?','line_number':690,'multiline':False]
['text':' Defined at toplevel (global, predeclared, universal)?','line_number':696,'multiline':False]
['text':' If Identifier was created by Parser.makeErrorExpression, it','line_number':706,'multiline':False]
['text':' contains misparsed text. Ignore ex and report an appropriate error.','line_number':707,'multiline':False]
['text':' Exception provided toplevel candidates.','line_number':710,'multiline':False]
['text':' Show spelling suggestions of all symbols in scope,','line_number':711,'multiline':False]
['text':' Accumulate globals in module.','line_number':722,'multiline':False]
['text':' index not used','line_number':727,'multiline':False]
['text':' lookupLexical finds a lexically enclosing local binding of the name,','line_number':736,'multiline':False]
['text':' plumbing it through enclosing functions as needed.','line_number':737,'multiline':False]
['text':' If a local binding was found in a parent block,','line_number':747,'multiline':False]
['text':' and this block is a function, then it is a free variable','line_number':748,'multiline':False]
['text':' of this function and must be plumbed through.','line_number':749,'multiline':False]
['text':' Add an implicit FREE binding (a hidden parameter) to this function,','line_number':750,'multiline':False]
['text':' and record the outer binding that will supply its value when','line_number':751,'multiline':False]
['text':' we construct the closure.','line_number':752,'multiline':False]
['text':' Also, mark the outer LOCAL as a CELL: a shared, indirect local.','line_number':753,'multiline':False]
['text':' (For a comprehension block there's nothing to do,','line_number':754,'multiline':False]
['text':' because it's part of the same frame as the enclosing block.)','line_number':755,'multiline':False]
['text':'','line_number':756,'multiline':False]
['text':' This step may occur many times if the lookupLexical','line_number':757,'multiline':False]
['text':' recursion returns through many functions.','line_number':758,'multiline':False]
['text':' Memoize, to avoid duplicate free vars and repeated walks.','line_number':771,'multiline':False]
['text':' Common code for def, lambda.','line_number':779,'multiline':False]
['text':' DefStatement or LambdaExpression','line_number':781,'multiline':False]
['text':' Resolve defaults in enclosing environment.','line_number':787,'multiline':False]
['text':' Enter function block.','line_number':794,'multiline':False]
['text':' Check parameter order and convert to run-time order:','line_number':799,'multiline':False]
['text':' positionals, keyword-only, *args, **kwargs.','line_number':800,'multiline':False]
['text':' TODO(adonovan): opt: when all Identifiers are resolved to bindings accumulated','line_number':805,'multiline':False]
['text':' in the function, params can be a prefix of the function's array of bindings.','line_number':806,'multiline':False]
['text':' e.g. id','line_number':811,'multiline':False]
['text':' e.g. id = default','line_number':829,'multiline':False]
['text':' * or *args','line_number':839,'multiline':False]
['text':' **kwargs','line_number':849,'multiline':False]
['text':' * or *args','line_number':857,'multiline':False]
['text':' **kwargs','line_number':866,'multiline':False]
['text':'isLoad=','line_number':889,'multiline':True]
['text':'*
   * Process a binding use of a name by adding a binding to the current block if not already bound,
   * and associate the identifier with it. Reports whether the name was already bound in this block.
   ','line_number':895,'multiline':True]
['text':' TODO(adonovan): factor out bindLocal/bindGlobal cases','line_number':904,'multiline':False]
['text':' and simply the condition below.','line_number':905,'multiline':False]
['text':' outside any function/comprehension, and not a (local) load? => global binding.','line_number':907,'multiline':False]
['text':' New global binding: add to module and to toplevel cache.','line_number':911,'multiline':False]
['text':' Does this new global binding conflict with a file-local load binding?','line_number':917,'multiline':False]
['text':' global, local','line_number':920,'multiline':False]
['text':' global, global','line_number':924,'multiline':False]
['text':' Binding is local to file, function, or comprehension.','line_number':928,'multiline':False]
['text':' New local binding: add to current block's bindings map, current function's frame.','line_number':931,'multiline':False]
['text':' (These are distinct entities in the case where the current block is a comprehension.)','line_number':932,'multiline':False]
['text':' Does this (file-local) load binding conflict with a previous one?','line_number':940,'multiline':False]
['text':' local, local','line_number':942,'multiline':False]
['text':' ...or a previous global?','line_number':945,'multiline':False]
['text':' local, global','line_number':948,'multiline':False]
['text':' Report conflicting top-level bindings of same scope, unless options.allowToplevelRebinding.','line_number':957,'multiline':False]
['text':' Report global/local scope conflict on top-level bindings.','line_number':967,'multiline':False]
['text':' Returns the union of accessible local and top-level symbols.','line_number':977,'multiline':False]
['text':' Report an error if a load statement appears after another kind of statement.','line_number':988,'multiline':False]
['text':' Ignore string literals (e.g. docstrings).','line_number':993,'multiline':False]
['text':'*
   * Performs static checks, including resolution of identifiers in {@code file} in the environment
   * defined by {@code module}. The StarlarkFile is mutated. Errors are appended to {@link
   * StarlarkFile#errors}.
   ','line_number':1013,'multiline':True]
['text':' Check that load statements are on top.','line_number':1022,'multiline':False]
['text':'freevars=','line_number':1028,'multiline':True]
['text':' First pass: creating bindings for statements in this block.','line_number':1030,'multiline':False]
['text':' Second pass: visit all references.','line_number':1033,'multiline':False]
['text':' If the final statement is an expression, synthesize a return statement.','line_number':1038,'multiline':False]
['text':' Annotate with resolved information about the toplevel function.','line_number':1049,'multiline':False]
['text':'params=','line_number':1054,'multiline':True]
['text':'body=','line_number':1055,'multiline':True]
['text':'hasVarargs=','line_number':1056,'multiline':True]
['text':'hasKwargs=','line_number':1057,'multiline':True]
['text':'numKeywordOnlyParams=','line_number':1058,'multiline':True]
['text':'freevars=','line_number':1060,'multiline':True]
['text':'*
   * Performs static checks, including resolution of identifiers in {@code expr} in the environment
   * defined by {@code module}. This operation mutates the Expression. Syntax must be resolved
   * before it is evaluated.
   ','line_number':1064,'multiline':True]
['text':'freevars=','line_number':1075,'multiline':True]
['text':' for bindings in list comprehensions','line_number':1075,'multiline':False]
['text':' Return no-arg function that computes the expression.','line_number':1083,'multiline':False]
['text':'params=','line_number':1087,'multiline':True]
['text':'hasVarargs=','line_number':1089,'multiline':True]
['text':'hasKwargs=','line_number':1090,'multiline':True]
['text':'numKeywordOnlyParams=','line_number':1091,'multiline':True]
['text':'freevars=','line_number':1093,'multiline':True]
