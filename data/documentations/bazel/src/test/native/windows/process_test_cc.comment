['text':' Copyright 2019 The Bazel Authors. All rights reserved.','line_number':1,'multiline':False]
['text':'','line_number':2,'multiline':False]
['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':3,'multiline':False]
['text':' you may not use this file except in compliance with the License.','line_number':4,'multiline':False]
['text':' You may obtain a copy of the License at','line_number':5,'multiline':False]
['text':'','line_number':6,'multiline':False]
['text':'    http://www.apache.org/licenses/LICENSE-2.0','line_number':7,'multiline':False]
['text':'','line_number':8,'multiline':False]
['text':' Unless required by applicable law or agreed to in writing, software','line_number':9,'multiline':False]
['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':10,'multiline':False]
['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':11,'multiline':False]
['text':' See the License for the specific language governing permissions and','line_number':12,'multiline':False]
['text':' limitations under the License.','line_number':13,'multiline':False]
['text':' Asserts argument escaping for subprocesses.','line_number':34,'multiline':False]
['text':'','line_number':35,'multiline':False]
['text':' For each pair in 'args', this method:','line_number':36,'multiline':False]
['text':' 1. asserts that WindowsEscapeArg(pair.first) == pair.second','line_number':37,'multiline':False]
['text':' 2. asserts that passing pair.second to a subprocess results in the subprocess','line_number':38,'multiline':False]
['text':'    receiving pair.first','line_number':39,'multiline':False]
['text':'','line_number':40,'multiline':False]
['text':' The method performs the second assertion by running "printarg.exe" (a','line_number':41,'multiline':False]
['text':' data-dependency of this test) once for each argument.','line_number':42,'multiline':False]
['text':' Assert that the WindowsEscapeArg produces what we expect.','line_number':45,'multiline':False]
['text':' Create a Runfiles object.','line_number':50,'multiline':False]
['text':' Look up the path of the printarg.exe utility.','line_number':56,'multiline':False]
['text':' Convert printarg.exe's path to a wchar_t Windows path.','line_number':61,'multiline':False]
['text':' SECURITY_ATTRIBUTES for inheritable HANDLEs.','line_number':67,'multiline':False]
['text':' Open /dev/null that will be redirected into the subprocess' stdin.','line_number':73,'multiline':False]
['text':' Create a pipe that the subprocess' stdout will be redirected to.','line_number':80,'multiline':False]
['text':' Duplicate stderr, where the subprocess' stderr will be redirected to.','line_number':88,'multiline':False]
['text':' Create the attribute object for the process creation. This object describes','line_number':98,'multiline':False]
['text':' exactly which handles the subprocess shall inherit.','line_number':99,'multiline':False]
['text':' MSDN says the maximum command line is 32767 characters, with a null','line_number':107,'multiline':False]
['text':' terminator that is exactly 2^15 (= 0x8000).','line_number':108,'multiline':False]
['text':' Copy printarg.exe's escaped path into the 'cmdline', and append a space.','line_number':112,'multiline':False]
['text':' We will append arguments to this command line in the for-loop below.','line_number':113,'multiline':False]
['text':' Run a subprocess for each of the arguments and assert that the argument','line_number':119,'multiline':False]
['text':' arrived to the subprocess as intended.','line_number':120,'multiline':False]
['text':' We already asserted for every element that WindowsEscapeArg(i.first)','line_number':122,'multiline':False]
['text':' produces the same output as i.second, so just use i.second instead of','line_number':123,'multiline':False]
['text':' converting i.first again.','line_number':124,'multiline':False]
['text':' Run the subprocess.','line_number':128,'multiline':False]
['text':' Wait for the subprocess to exit. Timeout is 5 seconds, which should be','line_number':141,'multiline':False]
['text':' more than enough for the subprocess to finish.','line_number':142,'multiline':False]
['text':' The subprocess printed its argv[1] (without a newline) to its stdout,','line_number':145,'multiline':False]
['text':' which is redirected into the pipe.','line_number':146,'multiline':False]
['text':' Let's write a null-terminator to the pipe to separate the output from the','line_number':147,'multiline':False]
['text':' output of the subsequent subprocess. The null-terminator also yields','line_number':148,'multiline':False]
['text':' null-terminated strings in the pipe, making it easy to read them out','line_number':149,'multiline':False]
['text':' later.','line_number':150,'multiline':False]
['text':' Read the output of the subprocesses from the pipe. They are divided by','line_number':155,'multiline':False]
['text':' null-terminators, so 'buf' will contain a sequence of null-terminated','line_number':156,'multiline':False]
['text':' strings.  We close the writing end so that ReadFile won't block until the','line_number':157,'multiline':False]
['text':' desired amount of bytes is available.','line_number':158,'multiline':False]
['text':' Assert that the subprocesses produced exactly the *unescaped* arguments.','line_number':167,'multiline':False]
['text':' Assert that there was enough data produced by the subprocesses.','line_number':170,'multiline':False]
['text':' Find the output of the corresponding subprocess. Since all subprocesses','line_number':173,'multiline':False]
['text':' printed into the same pipe and we added null-terminators between them,','line_number':174,'multiline':False]
['text':' the output is already there, conveniently as a null-terminated string.','line_number':175,'multiline':False]
['text':' 'args' contains wchar_t strings, but the subprocesses printed ASCII','line_number':179,'multiline':False]
['text':' (char) strings. To compare, we convert arg.first to a char-string.','line_number':180,'multiline':False]
['text':' Assert that the subprocess printed exactly the *unescaped* argument.','line_number':187,'multiline':False]
['text':' namespace','line_number':241,'multiline':False]
