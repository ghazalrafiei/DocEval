['text':' tests of JSON encoding/decoding','line_number':1,'multiline':False]
['text':' Some of these cases were inspired by github.com/nst/JSONTestSuite.','line_number':5,'multiline':False]
['text':'# json.encode','line_number':7,'multiline':False]
['text':' TODO(adonovan): test more control codes when Starlark/Java has string escapes','line_number':19,'multiline':False]
['text':' invalid UTF-16 -> replacement char U+FFFD','line_number':28,'multiline':False]
['text':' a built-in iterable','line_number':32,'multiline':False]
['text':' key, not insertion, order','line_number':34,'multiline':False]
['text':' a value with fields','line_number':35,'multiline':False]
['text':' field name order','line_number':36,'multiline':False]
['text':' struct keys are escaped too','line_number':37,'multiline':False]
['text':'# json.decode','line_number':58,'multiline':False]
['text':'assert_eq(json.decode('"\x7f"'), "\x7f")','line_number':89,'multiline':False]
['text':' whitespace other than ' '','line_number':90,'multiline':False]
['text':' same, with dict','line_number':91,'multiline':False]
['text':' TODO(adonovan): test \b\f when Starlark/Java supports them','line_number':92,'multiline':False]
['text':' We accept UTF-16 strings that have been arbitrarily truncated,','line_number':97,'multiline':False]
['text':' as many Java and JavaScript programs emit them.','line_number':98,'multiline':False]
['text':' Lists and dicts are mutable.','line_number':101,'multiline':False]
['text':' FIXME assert_fails(lambda: json.decode('{"one": 1]'), 'in object, got "]", want ',' or \'}\'')','line_number':143,'multiline':False]
['text':' Unescaped control codes (even tabs) are forbidden in strings.','line_number':146,'multiline':False]
['text':'# json.decode with default specified','line_number':152,'multiline':False]
['text':' string round-tripping','line_number':164,'multiline':False]
['text':' U+1F63F CRYING_CAT_FACE','line_number':172,'multiline':False]
['text':' CAT FACE + ZERO WIDTH JOINER + BUST IN SILHOUETTE','line_number':173,'multiline':False]
['text':' # codepoints is a string with every valid non-surrogate 16-bit code point.','line_number':177,'multiline':False]
['text':' TODO(adonovan): enable once %c is supported.','line_number':178,'multiline':False]
['text':' codepoints = ''.join(['%c' % c for c in range(65536) if c < 0xD800 or d > 0xDFFF])','line_number':179,'multiline':False]
['text':' assert_eq(codec(codepoints), codepoints)','line_number':180,'multiline':False]
['text':' number round-tripping','line_number':182,'multiline':False]
['text':'# json.indent','line_number':202,'multiline':False]
['text':' The current implementation may produce garbage output for garbage input.','line_number':264,'multiline':False]
['text':' TODO(adonovan): fix that.','line_number':265,'multiline':False]
['text':' no depth error: indentation is nonrecursive','line_number':277,'multiline':False]
['text':' assert.fails(lambda: json.indent("!@#$%^& this is not json"), 'invalid character')','line_number':282,'multiline':False]
