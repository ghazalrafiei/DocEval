['text':' Copyright 2020 The Bazel Authors. All rights reserved.','line_number':1,'multiline':False]
['text':'','line_number':2,'multiline':False]
['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':3,'multiline':False]
['text':' you may not use this file except in compliance with the License.','line_number':4,'multiline':False]
['text':' You may obtain a copy of the License at','line_number':5,'multiline':False]
['text':'','line_number':6,'multiline':False]
['text':'    http://www.apache.org/licenses/LICENSE-2.0','line_number':7,'multiline':False]
['text':'','line_number':8,'multiline':False]
['text':' Unless required by applicable law or agreed to in writing, software','line_number':9,'multiline':False]
['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':10,'multiline':False]
['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':11,'multiline':False]
['text':' See the License for the specific language governing permissions and','line_number':12,'multiline':False]
['text':' limitations under the License.','line_number':13,'multiline':False]
['text':' TODO(adonovan): document how to obtain a Java CPU profile.','line_number':34,'multiline':False]
['text':' TODO(adonovan): mitigate the effects of JVM warmup.','line_number':36,'multiline':False]
['text':' (See Oracle's JMH; we can't use it directly because it','line_number':37,'multiline':False]
['text':' seems to be entirely driven by Java annotations,','line_number':38,'multiline':False]
['text':' which is no good for a dynamic suite.)','line_number':39,'multiline':False]
['text':'*
 * Script-based benchmarks of the Starlark evaluator.
 *
 * <p>Scripts in testdata/bench_*.star are executed, and then each function named {@code bench_*} is
 * repeatedly called and measured. The function has one parameter, b, a Benchmark, that provides
 * b.n, the number of iterations to execute. The function must have resource costs linear in b.n.
 * Typically, the function body is a loop of the form {@code for _ in range(b.n): ...}. Using b.n
 * for other purposes leads to meaningless results. For example, it would be a mistake to use it as
 * the length of a random list to be sorted, because sorting does not run in linear time.
 *
 * <p>A benchmark with significant set-up costs may reset the timer ({@code b.restart()}) before
 * entering its loop. Example:
 *
 * <pre>
 * def bench_my_func(b):
 *     """Description goes here."""
 *     my_setup()
 *     b.restart()
 *     for _ in range(b.n):
 *         my_func()
 * </pre>
 ','line_number':41,'multiline':True]
['text':' default: all','line_number':76,'multiline':False]
['text':' parse flags','line_number':80,'multiline':False]
['text':' Read testdata/bench_* files.','line_number':142,'multiline':False]
['text':' blaze','line_number':143,'multiline':False]
['text':' bazel','line_number':145,'multiline':False]
['text':' for determinism','line_number':149,'multiline':False]
['text':' parse & execute','line_number':156,'multiline':False]
['text':' includes location','line_number':168,'multiline':False]
['text':' unhandled exception (incl. InterruptedException)','line_number':180,'multiline':False]
['text':' Sort bench_* functions by name.','line_number':187,'multiline':False]
['text':' Run benchmarks.','line_number':205,'multiline':False]
['text':'','line_number':208,'multiline':False]
['text':' help user identify a slow benchmark','line_number':212,'multiline':False]
['text':' Runs benchmark function f for the specified time budget','line_number':240,'multiline':False]
['text':' (which we may exceed by a factor of two) or number of iterations,','line_number':241,'multiline':False]
['text':' exactly one of which must be nonnegative. Reports success.','line_number':242,'multiline':False]
['text':' Exactly one of the parameters must be specified.','line_number':244,'multiline':False]
['text':' Run for a fixed number of iterations?','line_number':250,'multiline':False]
['text':' Run for a fixed amount of time (default behavior).','line_number':255,'multiline':False]
['text':' Keep doubling the number of iterations until we exceed the deadline.','line_number':262,'multiline':False]
['text':' TODO(adonovan): opt: extrapolate and predict the number of iterations','line_number':263,'multiline':False]
['text':' in the remaining time budget, being wary of extrapolation error.','line_number':264,'multiline':False]
['text':' overflow','line_number':266,'multiline':False]
['text':' The type of the parameter to each bench(b) function.','line_number':275,'multiline':False]
['text':' Provides n, the number of iterations.','line_number':276,'multiline':False]
['text':' The cast assumes we use the "Sun" JVM, which measures per-thread allocation and CPU.','line_number':283,'multiline':False]
['text':' Starlark attributes','line_number':286,'multiline':False]
['text':' requested number of iterations','line_number':287,'multiline':False]
['text':' current span  (time0 != 0 => started)','line_number':289,'multiline':False]
['text':' accumulators','line_number':295,'multiline':False]
['text':' iterations','line_number':296,'multiline':False]
['text':' CPU time (ns) in this thread','line_number':297,'multiline':False]
['text':' bytes allocated by this thread','line_number':298,'multiline':False]
['text':' wall time (ns)','line_number':299,'multiline':False]
['text':' Starlark computation steps','line_number':300,'multiline':False]
['text':' Runs n iterations of this benchmark and reports success.','line_number':307,'multiline':False]
['text':' unhandled exception (incl. InterruptedException)','line_number':323,'multiline':False]
['text':' stopped','line_number':363,'multiline':False]
['text':' stop, and discard current span','line_number':368,'multiline':False]
['text':' (Similar format to Go's time.Duration.)','line_number':379,'multiline':False]
