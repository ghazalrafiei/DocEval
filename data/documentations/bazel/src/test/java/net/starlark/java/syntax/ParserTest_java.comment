['text':' Copyright 2014 The Bazel Authors. All rights reserved.','line_number':1,'multiline':False]
['text':'','line_number':2,'multiline':False]
['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':3,'multiline':False]
['text':' you may not use this file except in compliance with the License.','line_number':4,'multiline':False]
['text':' You may obtain a copy of the License at','line_number':5,'multiline':False]
['text':'','line_number':6,'multiline':False]
['text':'    http://www.apache.org/licenses/LICENSE-2.0','line_number':7,'multiline':False]
['text':'','line_number':8,'multiline':False]
['text':' Unless required by applicable law or agreed to in writing, software','line_number':9,'multiline':False]
['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':10,'multiline':False]
['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':11,'multiline':False]
['text':' See the License for the specific language governing permissions and','line_number':12,'multiline':False]
['text':' limitations under the License.','line_number':13,'multiline':False]
['text':'* Tests of parser. ','line_number':31,'multiline':True]
['text':' Joins the lines, parse, and returns an expression.','line_number':46,'multiline':False]
['text':' Parses the expression, asserts that parsing fails,','line_number':52,'multiline':False]
['text':' and returns the first error message.','line_number':53,'multiline':False]
['text':' Joins the lines, parses, and returns a file.','line_number':64,'multiline':False]
['text':' Errors are added to this.events, or thrown if this.failFast;','line_number':65,'multiline':False]
['text':' TODO(adonovan): return these, and eliminate a stateful field.','line_number':73,'multiline':False]
['text':' Joins the lines, parses, and returns the sole statement.','line_number':79,'multiline':False]
['text':' Joins the lines, parses, and returns the statements.','line_number':84,'multiline':False]
['text':' helper func for testListExpressions:','line_number':103,'multiline':False]
['text':' helper func for testListExpressions:','line_number':108,'multiline':False]
['text':' helper func for testListExpressions:','line_number':113,'multiline':False]
['text':' helper func for testListExpressions:','line_number':118,'multiline':False]
['text':' helper func for testing arguments:','line_number':123,'multiline':False]
['text':' There is no way to evaluate the expression here, so we rely on string comparison.','line_number':346,'multiline':False]
['text':' We call parseFile, not parseExpression, as the latter is all-or-nothing.','line_number':360,'multiline':False]
['text':' Test that the arguments are (1, '[x for foo foo foo foo]', 3),','line_number':366,'multiline':False]
['text':' where the second, errant one is represented as an Identifier.','line_number':367,'multiline':False]
['text':' Make sure the parser does not get stuck when trying','line_number':392,'multiline':False]
['text':' to parse an expression containing a syntax error.','line_number':393,'multiline':False]
['text':' This usually results in OutOfMemoryError because the','line_number':394,'multiline':False]
['text':' parser keeps filling up the error log.','line_number':395,'multiline':False]
['text':' We need to make sure that we will always advance','line_number':396,'multiline':False]
['text':' in the token stream.','line_number':397,'multiline':False]
['text':' The behavior was 'inclusive' for a couple of years (see CL 170723732),','line_number':492,'multiline':False]
['text':' but this was a mistake. Arithmetic on half-open intervals is much simpler.','line_number':493,'multiline':False]
['text':' Also try it with another token at the end (newline), which broke the location in the past.','line_number':572,'multiline':False]
['text':'','line_number':582,'multiline':False]
['text':'','line_number':590,'multiline':False]
['text':' Also try it with another token at the end (newline), which broke the location in the past.','line_number':622,'multiline':False]
['text':' Also try it with another token at the end (newline), which broke the location in the past.','line_number':630,'multiline':False]
['text':'','line_number':639,'multiline':False]
['text':' Unlike Python, we require parens here.','line_number':700,'multiline':False]
['text':' not a tuple!','line_number':730,'multiline':False]
['text':' a singleton','line_number':751,'multiline':False]
['text':' a singleton dictionary','line_number':760,'multiline':False]
['text':' an empty dictionary','line_number':769,'multiline':False]
['text':' a singleton dictionary','line_number':776,'multiline':False]
['text':' parse error','line_number':854,'multiline':False]
['text':' parse error','line_number':857,'multiline':False]
['text':' parse error','line_number':861,'multiline':False]
['text':'','line_number':882,'multiline':False]
['text':'','line_number':900,'multiline':False]
['text':'','line_number':911,'multiline':False]
['text':'','line_number':924,'multiline':False]
['text':'','line_number':941,'multiline':False]
['text':'','line_number':957,'multiline':False]
['text':' 6 - find empty comment for syntax highlighting','line_number':962,'multiline':False]
['text':' Single genrule','line_number':972,'multiline':False]
['text':' Comments start and end on the same line','line_number':975,'multiline':False]
['text':' One per '#'','line_number':988,'multiline':False]
['text':' Regression test.','line_number':994,'multiline':False]
['text':' Note: missing comma after name='foo'','line_number':995,'multiline':False]
['text':' Regression test.','line_number':1004,'multiline':False]
['text':' lambda has lower predecence than binary or.','line_number':1021,'multiline':False]
['text':' This is a well known parsing ambiguity in Python.','line_number':1024,'multiline':False]
['text':' Python 2.7 accepts it but Python3 and Starlark reject it.','line_number':1025,'multiline':False]
['text':' ok in all dialects:','line_number':1028,'multiline':False]
['text':' An unparenthesized tuple is not allowed as the operand','line_number':1031,'multiline':False]
['text':' of an 'if' clause in a comprehension, but a lambda is ok.','line_number':1032,'multiline':False]
['text':' But the body of the unparenthesized lambda may not be a conditional:','line_number':1036,'multiline':False]
['text':' A lambda is not allowed as the operand of a 'for' clause.','line_number':1041,'multiline':False]
['text':' apparent location within string literal','line_number':1134,'multiline':False]
['text':' "This is not a parse error." --Magritte','line_number':1176,'multiline':False]
['text':' Regression test for b/148802200.','line_number':1235,'multiline':False]
['text':' no if','line_number':1258,'multiline':False]
['text':'','line_number':1267,'multiline':False]
['text':' includes stack','line_number':1333,'multiline':False]
['text':' includes file name','line_number':1335,'multiline':False]
['text':' includes stack','line_number':1343,'multiline':False]
['text':' includes expression','line_number':1345,'multiline':False]
