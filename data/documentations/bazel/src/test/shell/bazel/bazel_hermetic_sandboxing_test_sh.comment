['text':'!/bin/bash','line_number':1,'multiline':False]
['text':'','line_number':2,'multiline':False]
['text':' Copyright 2015 The Bazel Authors. All rights reserved.','line_number':3,'multiline':False]
['text':'','line_number':4,'multiline':False]
['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':5,'multiline':False]
['text':' you may not use this file except in compliance with the License.','line_number':6,'multiline':False]
['text':' You may obtain a copy of the License at','line_number':7,'multiline':False]
['text':'','line_number':8,'multiline':False]
['text':'    http://www.apache.org/licenses/LICENSE-2.0','line_number':9,'multiline':False]
['text':'','line_number':10,'multiline':False]
['text':' Unless required by applicable law or agreed to in writing, software','line_number':11,'multiline':False]
['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':12,'multiline':False]
['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':13,'multiline':False]
['text':' See the License for the specific language governing permissions and','line_number':14,'multiline':False]
['text':' limitations under the License.','line_number':15,'multiline':False]
['text':'','line_number':16,'multiline':False]
['text':' Test hermetic Linux sandbox','line_number':17,'multiline':False]
['text':'','line_number':18,'multiline':False]
['text':' Load test environment','line_number':21,'multiline':False]
['text':' Load the test setup defined in the parent directory','line_number':22,'multiline':False]
['text':' Testing the sandboxed strategy requires using the sandboxed strategy. While it is the default,','line_number':30,'multiline':False]
['text':' we want to make sure that this explicitly fails when the strategy is not available on the system','line_number':31,'multiline':False]
['text':' running the test.','line_number':32,'multiline':False]
['text':' The hermetic sandbox requires the Linux sandbox.','line_number':33,'multiline':False]
['text':' For the test to work we need to bind mount a couple of folders to','line_number':39,'multiline':False]
['text':' get access to bash, ls, python etc. Depending on linux distribution','line_number':40,'multiline':False]
['text':' these folders may vary. Mount all folders in the root directory '/'','line_number':41,'multiline':False]
['text':' except the project directory, the directory containing the bazel','line_number':42,'multiline':False]
['text':' workspace under test.','line_number':43,'multiline':False]
['text':' Get resolved link','line_number':51,'multiline':False]
['text':' In this case the ABSOLUTE_PATH will be expanded','line_number':74,'multiline':False]
['text':' and the absolute path will be written to script_absolute_path.sh','line_number':75,'multiline':False]
['text':'! /bin/sh','line_number':77,'multiline':False]
['text':'! /bin/sh','line_number':84,'multiline':False]
['text':' unknown_file.txt not referenced.','line_number':131,'multiline':False]
['text':' unknown_file.txt not referenced.','line_number':138,'multiline':False]
['text':' import_module.py not referenced.','line_number':145,'multiline':False]
['text':' Symlink become resolved to RegularFileArtifactValue.','line_number':181,'multiline':False]
['text':' Symlink become UnresolvedSymlinkArtifactValue and would be','line_number':188,'multiline':False]
['text':' dangling unless also providing the actual file as input to sandbox.','line_number':189,'multiline':False]
['text':' Try invalid write to the input file via the symlink','line_number':194,'multiline':False]
['text':' Try invalid write to input file, with file as implicit input','line_number':221,'multiline':False]
['text':' from declared directory.','line_number':222,'multiline':False]
['text':' Produce artifacts of other types','line_number':262,'multiline':False]
['text':' Test other artifact types as input to hermetic sandbox.','line_number':279,'multiline':False]
['text':' Test that the build can't escape the sandbox via absolute path.','line_number':301,'multiline':False]
['text':' Test that the build can't escape the sandbox by resolving symbolic link.','line_number':308,'multiline':False]
['text':' Test that the sandbox discover if the bazel python rule miss dependencies.','line_number':315,'multiline':False]
['text':' Test that the intermediate corrupt input file gets re:evaluated','line_number':323,'multiline':False]
['text':' Write an input file, this should cause the hermetic sandbox to fail with an exception','line_number':325,'multiline':False]
['text':' Build the input file again, this should not use the cache, but instead re:evaluate the file','line_number':332,'multiline':False]
['text':' Test that invalid write of input file is detected, when file is accessed via resolved symlink.','line_number':341,'multiline':False]
['text':' Test that invalid write of input file is detected, when file is accessed via unresolved symlink.','line_number':348,'multiline':False]
['text':' Test that invalid write of input file is detected, when file is found implicit via declared directory.','line_number':355,'multiline':False]
['text':' Test that the sandbox can handle deep directory trees from declared directory.','line_number':362,'multiline':False]
['text':' Test that the sandbox is able to handle various types of artifacts.','line_number':369,'multiline':False]
['text':' Regression test for Issue #15340','line_number':370,'multiline':False]
['text':' The test shouldn't fail if the environment doesn't support running it.','line_number':380,'multiline':False]
