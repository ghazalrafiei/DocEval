['text':'!/bin/bash','line_number':1,'multiline':False]
['text':'','line_number':2,'multiline':False]
['text':' Copyright 2018 The Bazel Authors. All rights reserved.','line_number':3,'multiline':False]
['text':'','line_number':4,'multiline':False]
['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':5,'multiline':False]
['text':' you may not use this file except in compliance with the License.','line_number':6,'multiline':False]
['text':' You may obtain a copy of the License at','line_number':7,'multiline':False]
['text':'','line_number':8,'multiline':False]
['text':'    http://www.apache.org/licenses/LICENSE-2.0','line_number':9,'multiline':False]
['text':'','line_number':10,'multiline':False]
['text':' Unless required by applicable law or agreed to in writing, software','line_number':11,'multiline':False]
['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':12,'multiline':False]
['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':13,'multiline':False]
['text':' See the License for the specific language governing permissions and','line_number':14,'multiline':False]
['text':' limitations under the License.','line_number':15,'multiline':False]
['text':' Test Python 2/3 version behavior. These tests require that the target platform','line_number':17,'multiline':False]
['text':' has both Python versions available.','line_number':18,'multiline':False]
['text':' --- begin runfiles.bash initialization ---','line_number':20,'multiline':False]
['text':' Copy-pasted from Bazel's Bash runfiles library (tools/bash/runfiles/runfiles.bash).','line_number':21,'multiline':False]
['text':' --- end runfiles.bash initialization ---','line_number':41,'multiline':False]
['text':' `uname` returns the current platform, e.g "MSYS_NT-10.0" or "Linux".','line_number':46,'multiline':False]
['text':' `tr` converts all upper case letters to lower case.','line_number':47,'multiline':False]
['text':' `case` matches the result if the `uname | tr` expression to string prefixes','line_number':48,'multiline':False]
['text':' that use the same wildcards as names do in Bash, i.e. "msys*" matches strings','line_number':49,'multiline':False]
['text':' starting with "msys", and "*" matches everything (it's the default case).','line_number':50,'multiline':False]
['text':' As of 2018-08-14, Bazel on Windows only supports MSYS Bash.','line_number':53,'multiline':False]
['text':' Disable MSYS path conversion that converts path-looking command arguments to','line_number':62,'multiline':False]
['text':' Windows paths (even if they arguments are not in fact paths).','line_number':63,'multiline':False]
['text':'### TESTS #############################################################','line_number':68,'multiline':False]
['text':' Check that our environment setup works.','line_number':70,'multiline':False]
['text':' Test that access to runfiles works (in general, and under our test environment','line_number':92,'multiline':False]
['text':' specifically).','line_number':93,'multiline':False]
['text':' Regression test for #5104. This test ensures that it's possible to use','line_number':128,'multiline':False]
['text':' --build_python_zip in combination with an in-workspace runtime, as opposed to','line_number':129,'multiline':False]
['text':' with a system runtime or not using a py_runtime at all (the legacy','line_number':130,'multiline':False]
['text':' --python_path mechanism).','line_number':131,'multiline':False]
['text':'','line_number':132,'multiline':False]
['text':' The specific issue #5104 was caused by file permissions being lost when','line_number':133,'multiline':False]
['text':' unzipping runfiles, which led to an unexecutable runtime.','line_number':134,'multiline':False]
['text':' The runfiles interpreter is either a sh script or bat script depending on','line_number':138,'multiline':False]
['text':' the current platform.','line_number':139,'multiline':False]
['text':' This doesn't actually run because we use a mock Python runtime that never','line_number':172,'multiline':False]
['text':' executes the Python code.','line_number':173,'multiline':False]
['text':'!/bin/sh','line_number':182,'multiline':False]
['text':' Verify that looking up runfiles that require repo mapping works','line_number':194,'multiline':False]
['text':' Test that running a zip app without RUN_UNDER_RUNFILES=1 removes the','line_number':225,'multiline':False]
['text':' temporary directory it creates','line_number':226,'multiline':False]
['text':' The pybin location is "<ms root>/runfiles/<workspace>/test/pybin.py",','line_number':243,'multiline':False]
['text':' so we have to go up 4 directories to get to the module space root','line_number':244,'multiline':False]
['text':' TODO(brandjon): Rename this file to python_test.sh or else move the below to','line_number':264,'multiline':False]
['text':' a separate suite.','line_number':265,'multiline':False]
['text':' Tests that a non-standard library module on the PYTHONPATH added by Bazel','line_number':267,'multiline':False]
['text':' can override the standard library. This behavior is not necessarily ideal, but','line_number':268,'multiline':False]
['text':' it is the current semantics; see #6532 about changing that.','line_number':269,'multiline':False]
['text':' Pass the empty string, to include the path to this package (within','line_number':278,'multiline':False]
['text':' runfiles) on the PYTHONPATH.','line_number':279,'multiline':False]
['text':' A src name that clashes with a standard library module, such that this','line_number':285,'multiline':False]
['text':' local file can take precedence over the standard one depending on its','line_number':286,'multiline':False]
['text':' order in PYTHONPATH. Not just any module name would work. For instance,','line_number':287,'multiline':False]
['text':' "import sys" gets the built-in module regardless of whether there's some','line_number':288,'multiline':False]
['text':' "sys.py" file on the PYTHONPATH. This is probably because built-in modules','line_number':289,'multiline':False]
['text':' (i.e., those implemented in C) use a different loader than','line_number':290,'multiline':False]
['text':' Python-implemented ones, even though they're both part of the standard','line_number':291,'multiline':False]
['text':' distribution of the interpreter.','line_number':292,'multiline':False]
['text':' Indicates that the local module overrode the system one.','line_number':305,'multiline':False]
['text':' Tests that targets appear under the expected roots.','line_number':309,'multiline':False]
['text':' It's hard to get build output paths reliably, so we'll just check the output','line_number':311,'multiline':False]
['text':' of bazel info.','line_number':312,'multiline':False]
['text':' Legacy behavior, PY3 case.','line_number':314,'multiline':False]
['text':' New behavior, PY3 case.','line_number':320,'multiline':False]
['text':' Tests that bazel-bin points to where targets get built by default (or at least','line_number':328,'multiline':False]
['text':' not to a directory with a -py2 or -py3 suffix), provided that','line_number':329,'multiline':False]
['text':' --incompatible_py3_is_default and --incompatible_py2_outputs_are_suffixed are','line_number':330,'multiline':False]
['text':' flipped together.','line_number':331,'multiline':False]
['text':' Regression test for (bazelbuild/continuous-integration#578): Ensure that a','line_number':350,'multiline':False]
['text':' py_binary built with the autodetecting toolchain works when used as a tool','line_number':351,'multiline':False]
['text':' from Starlark rule. In particular, the wrapper script that launches the real','line_number':352,'multiline':False]
['text':' second-stage interpreter must be able to tolerate PATH not being set.','line_number':353,'multiline':False]
['text':' cfg param is required but its value doesn't matter','line_number':385,'multiline':False]
['text':' We're testing for this flag's behavior, so force it to true.','line_number':428,'multiline':False]
['text':' TODO(https://github.com/bazelbuild/bazel/issues/12821): Remove this test','line_number':429,'multiline':False]
['text':' when this behavior is removed','line_number':430,'multiline':False]
['text':' By default, Python binaries are put into zip files on Windows and don't','line_number':442,'multiline':False]
['text':' have a real runfiles tree.','line_number':443,'multiline':False]
