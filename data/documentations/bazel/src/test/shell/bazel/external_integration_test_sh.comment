['text':'!/bin/bash','line_number':1,'multiline':False]
['text':'','line_number':2,'multiline':False]
['text':' Copyright 2015 The Bazel Authors. All rights reserved.','line_number':3,'multiline':False]
['text':'','line_number':4,'multiline':False]
['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':5,'multiline':False]
['text':' you may not use this file except in compliance with the License.','line_number':6,'multiline':False]
['text':' You may obtain a copy of the License at','line_number':7,'multiline':False]
['text':'','line_number':8,'multiline':False]
['text':'    http://www.apache.org/licenses/LICENSE-2.0','line_number':9,'multiline':False]
['text':'','line_number':10,'multiline':False]
['text':' Unless required by applicable law or agreed to in writing, software','line_number':11,'multiline':False]
['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':12,'multiline':False]
['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':13,'multiline':False]
['text':' See the License for the specific language governing permissions and','line_number':14,'multiline':False]
['text':' limitations under the License.','line_number':15,'multiline':False]
['text':'','line_number':16,'multiline':False]
['text':' Test //external mechanisms','line_number':17,'multiline':False]
['text':'','line_number':18,'multiline':False]
['text':' Load the test setup defined in the parent directory','line_number':20,'multiline':False]
['text':' Test downloading a file from a repository.','line_number':72,'multiline':False]
['text':' This creates a simple repository containing:','line_number':73,'multiline':False]
['text':'','line_number':74,'multiline':False]
['text':' repo/','line_number':75,'multiline':False]
['text':'   WORKSPACE','line_number':76,'multiline':False]
['text':'   zoo/','line_number':77,'multiline':False]
['text':'     BUILD','line_number':78,'multiline':False]
['text':'     female.sh','line_number':79,'multiline':False]
['text':'','line_number':80,'multiline':False]
['text':' And a .zip file, which contains:','line_number':81,'multiline':False]
['text':'','line_number':82,'multiline':False]
['text':' WORKSPACE','line_number':83,'multiline':False]
['text':' fox/','line_number':84,'multiline':False]
['text':'   BUILD','line_number':85,'multiline':False]
['text':'   male','line_number':86,'multiline':False]
['text':'   male_relative -> male','line_number':87,'multiline':False]
['text':'   male_absolute -> /fox/male','line_number':88,'multiline':False]
['text':' -gt 1 ]] && [[ "$2" = "nowrite" ]] && write_workspace=1 || write_workspace=0','line_number':92,'multiline':False]
['text':' Create a zipped-up repository HTTP response.','line_number':95,'multiline':False]
['text':'!/bin/sh','line_number':110,'multiline':False]
['text':' Add some padding to the .zip to test that Bazel's download logic can','line_number':117,'multiline':False]
['text':' handle breaking a response into chunks.','line_number':118,'multiline':False]
['text':'!/bin/sh','line_number':145,'multiline':False]
['text':' Test with the extension','line_number':184,'multiline':False]
['text':'!/bin/sh','line_number':259,'multiline':False]
['text':' Create a zipped-up repository HTTP response.','line_number':269,'multiline':False]
['text':'!/bin/sh','line_number':299,'multiline':False]
['text':' Bazel should not re-download the .zip unless the user requests it or the','line_number':309,'multiline':False]
['text':' WORKSPACE file changes, so doing a BUILD where the "wrong" .zip is available','line_number':310,'multiline':False]
['text':' on the server should work if the correct .zip is already available.','line_number':311,'multiline':False]
['text':' Download with correct sha256.','line_number':313,'multiline':False]
['text':' Tests downloading a jar and using it as a Java dependency.','line_number':342,'multiline':False]
['text':' Observes that we tried to follow redirect, but failed due to ridiculous','line_number':394,'multiline':False]
['text':' port.','line_number':395,'multiline':False]
['text':' This URL will definitely not work, but that's OK -- we don't need a','line_number':426,'multiline':False]
['text':' successful request for this test','line_number':427,'multiline':False]
['text':' Tell the rest of the test to unblock the HTTP server','line_number':476,'multiline':False]
['text':' Wait until the requess are done','line_number':479,'multiline':False]
['text':' Start Bazel','line_number':490,'multiline':False]
['text':' Wait until the .download() calls return','line_number':494,'multiline':False]
['text':' Tell the test server the strings it should serve. In parallel because the','line_number':497,'multiline':False]
['text':' test server apparently cannot serve two HTTP requests in parallel, so if we','line_number':498,'multiline':False]
['text':' wait for request A to be completely served while unblocking request B, it is','line_number':499,'multiline':False]
['text':' possible that the test server wants to serve request B first, which is a','line_number':500,'multiline':False]
['text':' deadlock.','line_number':501,'multiline':False]
['text':' Wait until Bazel returns','line_number':509,'multiline':False]
['text':' Start Bazel','line_number':538,'multiline':False]
['text':' Tell the rest of the test to unblock the HTTP server','line_number':572,'multiline':False]
['text':' Start Bazel','line_number':583,'multiline':False]
['text':' Wait until the .download() call returns','line_number':587,'multiline':False]
['text':' Tell the test server the string it should serve','line_number':590,'multiline':False]
['text':' Wait until Bazel returns','line_number':593,'multiline':False]
['text':' Tests downloading a file and using it as a dependency.','line_number':598,'multiline':False]
['text':'!/bin/sh','line_number':602,'multiline':False]
['text':' Tests downloading a file with a redirect.','line_number':658,'multiline':False]
['text':' Make sure we're on a different second to avoid false passes.','line_number':725,'multiline':False]
['text':' Create a zipped-up repository HTTP response.','line_number':747,'multiline':False]
['text':' Create the build file for the http archive based on the requested attr style.','line_number':762,'multiline':False]
['text':'!/bin/sh','line_number':813,'multiline':False]
['text':' Rerun fetch while nc isn't serving anything to make sure the fetched result','line_number':850,'multiline':False]
['text':' is cached.','line_number':851,'multiline':False]
['text':' Make sure fetch isn't needed after a bazel restart.','line_number':854,'multiline':False]
['text':' But it is required after a clean.','line_number':858,'multiline':False]
['text':' Make the remote repo and local repo slightly different.','line_number':1160,'multiline':False]
['text':' Bazel translates the integrity value back to the sha256 checksum.','line_number':1306,'multiline':False]
['text':' Changes to the BUILD file in the external repository should be tracked','line_number':1379,'multiline':False]
['text':' Verify that we don't call out unconditionally','line_number':1384,'multiline':False]
['text':' Verify that http_archive can use a BUILD file shipped with the','line_number':1395,'multiline':False]
['text':' external archive.','line_number':1396,'multiline':False]
['text':' Verify that external repositories are cached after being used once.','line_number':1443,'multiline':False]
['text':' Simulate going offline by removing the external archive','line_number':1478,'multiline':False]
['text':' Verify that --repository_cache works for query and caches soly','line_number':1490,'multiline':False]
['text':' based on the predicted hash, for a repository-cache location given as path','line_number':1491,'multiline':False]
['text':' relative to the WORKSPACE','line_number':1492,'multiline':False]
['text':' Use the external repository once to make sure it is cached.','line_number':1528,'multiline':False]
['text':' Now "go offline" and clean local resources.','line_number':1532,'multiline':False]
['text':' The value should still be available from the repository cache','line_number':1537,'multiline':False]
['text':' Clean again.','line_number':1543,'multiline':False]
['text':' Even with a different source URL, the cache should be consulted.','line_number':1545,'multiline':False]
['text':' Verify that the default cache works for query and caches soly','line_number':1564,'multiline':False]
['text':' based on the predicted hash, for a repository-cache location given as path','line_number':1565,'multiline':False]
['text':' relative to the WORKSPACE','line_number':1566,'multiline':False]
['text':' Use the external repository once to make sure it is cached.','line_number':1599,'multiline':False]
['text':' Now "go offline" and clean local resources.','line_number':1602,'multiline':False]
['text':' The value should still be available from the repository cache','line_number':1606,'multiline':False]
['text':' Clean again.','line_number':1610,'multiline':False]
['text':' Even with a different source URL, the cache should be consulted.','line_number':1612,'multiline':False]
['text':' Verify that the repository cache is enabled by default.','line_number':1628,'multiline':False]
['text':' Use the external repository once to make sure it is cached.','line_number':1657,'multiline':False]
['text':' Now "go offline" and clean local resources.','line_number':1660,'multiline':False]
['text':' Still, the file should be cached.','line_number':1664,'multiline':False]
['text':' Verify that the canonical_id is honored to logically split the cache','line_number':1669,'multiline':False]
['text':' Use the external repository once to make sure it is cached.','line_number':1697,'multiline':False]
['text':' Now "go offline" and clean local resources.','line_number':1700,'multiline':False]
['text':' Still, the file should be cached.','line_number':1704,'multiline':False]
['text':' Now, change the canonical_id','line_number':1707,'multiline':False]
['text':' The build should fail now','line_number':1714,'multiline':False]
['text':' However, removing the canonical_id, we should get a cache hit again','line_number':1717,'multiline':False]
['text':' Verify that the repository cache can be disabled.','line_number':1728,'multiline':False]
['text':' Prime the repository cache.','line_number':1758,'multiline':False]
['text':' Use `--repository_cache` with no path to explicitly disable repository cache','line_number':1761,'multiline':False]
['text':' make sure, the empty path is not interpreted relative to `pwd`; i.e., we do','line_number':1764,'multiline':False]
['text':' not expect any new directories generated in the workspace, in particular','line_number':1765,'multiline':False]
['text':' none named conent_addressable, which is the directory where the cache puts','line_number':1766,'multiline':False]
['text':' its artifacts into.','line_number':1767,'multiline':False]
['text':' Now "go offline" and clean local resources.','line_number':1771,'multiline':False]
['text':' Do a noop build with the cache enabled to ensure the cache can be disabled','line_number':1775,'multiline':False]
['text':' after the server starts.','line_number':1776,'multiline':False]
['text':' The build should fail since we are not using the repository cache, but the','line_number':1779,'multiline':False]
['text':' original file can no longer be "downloaded".','line_number':1780,'multiline':False]
['text':' Verify that --repository_cache works for query and caches soly','line_number':1786,'multiline':False]
['text':' based on the predicted hash.','line_number':1787,'multiline':False]
['text':' Use the external repository once to make sure it is cached.','line_number':1824,'multiline':False]
['text':' Now "go offline" and clean local resources.','line_number':1828,'multiline':False]
['text':' The value should still be available from the repository cache','line_number':1833,'multiline':False]
['text':' Clean again.','line_number':1839,'multiline':False]
['text':' Even with a different source URL, the cache should be consulted.','line_number':1841,'multiline':False]
['text':' Verify that repository rules are able to probe for cache hits.','line_number':1859,'multiline':False]
['text':' provide default implementation; a real probe','line_number':1911,'multiline':False]
['text':' should ask for credentials here and then download','line_number':1912,'multiline':False]
['text':' the actual (restricted) file.','line_number':1913,'multiline':False]
['text':' initially, no cache hit, should show default','line_number':1928,'multiline':False]
['text':' ensure the cache is filled','line_number':1934,'multiline':False]
['text':' now we should get the real external dependency','line_number':1938,'multiline':False]
['text':' Verify that information about a cache hit is reported','line_number':1945,'multiline':False]
['text':' if an error happend in that repository. This information','line_number':1946,'multiline':False]
['text':' is useful as users sometimes change the URL but do not','line_number':1947,'multiline':False]
['text':' update the hash.','line_number':1948,'multiline':False]
['text':' build to fill the cache','line_number':1987,'multiline':False]
['text':' go offline and clean everything','line_number':1990,'multiline':False]
['text':' We still should be able to build, as the file is in cache','line_number':1996,'multiline':False]
['text':' As a cache hit is a perfectly normal thing, we don't expect it to be','line_number':1998,'multiline':False]
['text':' reported.','line_number':1999,'multiline':False]
['text':' Now update ext-1.1 to ext-1.2, while forgetting to update the checksum','line_number':2004,'multiline':False]
['text':' The build should fail, as the prefix is not found. The available prefix','line_number':2013,'multiline':False]
['text':' should be reported as well as the information that the file was taken','line_number':2014,'multiline':False]
['text':' from cache.','line_number':2015,'multiline':False]
['text':' Now consider the case where no prefix is specified (and hence, the','line_number':2023,'multiline':False]
['text':' download_and_extract call will succeed), but a patch command has','line_number':2024,'multiline':False]
['text':' an assumption on a wrong path. As the fetching of the external','line_number':2025,'multiline':False]
['text':' repository will fail, we still expect being hinted at the','line_number':2026,'multiline':False]
['text':' cache hit.','line_number':2027,'multiline':False]
['text':' Verify that distdir searches at least for the local part of the URL,','line_number':2094,'multiline':False]
['text':' even if the output is renamed.','line_number':2095,'multiline':False]
['text':' The local distdirs all do no provide the file; still, it should work by fetching','line_number':2229,'multiline':False]
['text':' the file from upstream.','line_number':2230,'multiline':False]
['text':' As no --distdir option is given and upstream not available,','line_number':2319,'multiline':False]
['text':' we expect the build to fail','line_number':2320,'multiline':False]
['text':' Isse 7353 requested that even in the case of a syntactically invalid','line_number':2400,'multiline':False]
['text':' checksum, the file still should be fetched and its checksum computed.','line_number':2401,'multiline':False]
['text':' Verify that useful suggestions are made if an expected prefix','line_number':2432,'multiline':False]
['text':' is not found in an archive.','line_number':2433,'multiline':False]
['text':' Verify that a suggestion is made about dropping an unnecessary','line_number':2467,'multiline':False]
['text':' `strip_prefix` argument.','line_number':2468,'multiline':False]
['text':' Verify that upon a load in the WORKSPACE file with','line_number':2501,'multiline':False]
['text':' the repository not (yet) defined, the name of the','line_number':2502,'multiline':False]
['text':' file is reported in the error message.','line_number':2503,'multiline':False]
['text':' Verify that upon  a missing package, the places where a BUILD file was','line_number':2521,'multiline':False]
['text':' searched for are reported.','line_number':2522,'multiline':False]
['text':' Verify that a useful error message is shown for a BUILD','line_number':2552,'multiline':False]
['text':' file not found at the expected location in an external repository.','line_number':2553,'multiline':False]
['text':' Verify that some useful information is provided about where','line_number':2588,'multiline':False]
['text':' a failing repository definition occurred.','line_number':2589,'multiline':False]
['text':' ..forgot to add the repository bar','line_number':2607,'multiline':False]
['text':' Verify that bazel reports a useful error message upon','line_number':2635,'multiline':False]
['text':' detecting a circular definition of a repository.','line_number':2636,'multiline':False]
['text':' Also verify that the call stack of the definition is shown.','line_number':2637,'multiline':False]
['text':' We expect to find the call stack for the definition of the repositories','line_number':2706,'multiline':False]
['text':' a and b','line_number':2707,'multiline':False]
['text':' Verify that, if a WORKSPACE cycle is reported due to','line_number':2716,'multiline':False]
['text':' a missing repository definition, the name of the actually','line_number':2717,'multiline':False]
['text':' missing repository is reported.','line_number':2718,'multiline':False]
['text':' Also verify that the repository class and its definition is reported, to','line_number':2753,'multiline':False]
['text':' help finding out where the implicit dependency comes from.','line_number':2754,'multiline':False]
['text':' Verify that the WORKSPACE and BUILD files provided by','line_number':2762,'multiline':False]
['text':' the invocation of an http_archive rule correctly','line_number':2763,'multiline':False]
['text':' overwritel any such file packed in the archive.','line_number':2764,'multiline':False]
['text':' Targets in //external aren't supported yet.','line_number':2924,'multiline':False]
['text':' A minimal build to make sure bazel in Skymeld mode can build with external','line_number':2967,'multiline':False]
['text':' dependencies.','line_number':2968,'multiline':False]
