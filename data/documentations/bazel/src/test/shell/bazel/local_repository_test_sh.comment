['text':'!/bin/bash','line_number':1,'multiline':False]
['text':'','line_number':2,'multiline':False]
['text':' Copyright 2015 The Bazel Authors. All rights reserved.','line_number':3,'multiline':False]
['text':'','line_number':4,'multiline':False]
['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':5,'multiline':False]
['text':' you may not use this file except in compliance with the License.','line_number':6,'multiline':False]
['text':' You may obtain a copy of the License at','line_number':7,'multiline':False]
['text':'','line_number':8,'multiline':False]
['text':'    http://www.apache.org/licenses/LICENSE-2.0','line_number':9,'multiline':False]
['text':'','line_number':10,'multiline':False]
['text':' Unless required by applicable law or agreed to in writing, software','line_number':11,'multiline':False]
['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':12,'multiline':False]
['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':13,'multiline':False]
['text':' See the License for the specific language governing permissions and','line_number':14,'multiline':False]
['text':' limitations under the License.','line_number':15,'multiline':False]
['text':'','line_number':16,'multiline':False]
['text':' Test the local_repository binding','line_number':17,'multiline':False]
['text':'','line_number':18,'multiline':False]
['text':' Load the test setup defined in the parent directory','line_number':20,'multiline':False]
['text':' Uses a glob from a different repository for a runfile.','line_number':51,'multiline':False]
['text':' This create two repositories and populate them with basic build files:','line_number':52,'multiline':False]
['text':'','line_number':53,'multiline':False]
['text':' ${WORKSPACE_DIR}/','line_number':54,'multiline':False]
['text':'     WORKSPACE','line_number':55,'multiline':False]
['text':'     zoo/','line_number':56,'multiline':False]
['text':'       BUILD','line_number':57,'multiline':False]
['text':'       dumper.sh','line_number':58,'multiline':False]
['text':'     red/','line_number':59,'multiline':False]
['text':'       BUILD','line_number':60,'multiline':False]
['text':'       day-keeper','line_number':61,'multiline':False]
['text':' repo2/','line_number':62,'multiline':False]
['text':'   red/','line_number':63,'multiline':False]
['text':'     BUILD','line_number':64,'multiline':False]
['text':'     baby-panda','line_number':65,'multiline':False]
['text':'','line_number':66,'multiline':False]
['text':' dumper.sh should be able to dump the contents of baby-panda.','line_number':67,'multiline':False]
['text':'!/bin/sh','line_number':98,'multiline':False]
['text':' Tests using a Java dependency.','line_number':121,'multiline':False]
['text':' Create a non-Bazel directory.','line_number':202,'multiline':False]
['text':' Be tricky with absolute symlinks to make sure that Bazel still acts as','line_number':210,'multiline':False]
['text':' though external repositories are immutable.','line_number':211,'multiline':False]
['text':' Check that external repo changes are noticed and libmongoose.jar is rebuilt.','line_number':288,'multiline':False]
['text':'include <stdio.h>','line_number':303,'multiline':False]
['text':'include "greet_lib.h"','line_number':321,'multiline':False]
['text':'include "clib.h"','line_number':355,'multiline':False]
['text':'include <stdio.h>','line_number':384,'multiline':False]
['text':'include "clib.h"','line_number':386,'multiline':False]
['text':' All repositories can be used as a kind of marker and be queried, even if they can't be fetched.','line_number':480,'multiline':False]
['text':' Fetching the repositories should attempt to create symlinks to their directory.','line_number':485,'multiline':False]
['text':' Since the directories don't exist, we expect failure.','line_number':486,'multiline':False]
['text':' All repositories can be used as a kind of marker and be queried, even if they can't be fetched.','line_number':521,'multiline':False]
['text':' Fetching the repositories should attempt to create symlinks to their directory.','line_number':526,'multiline':False]
['text':' Although "~/missing" looks like a path under the home directory, "~/" is only a Bash shorthand','line_number':527,'multiline':False]
['text':' that Bazel does not resolve, and instead treats "~/missing" as a relative path under the','line_number':528,'multiline':False]
['text':' workspace. Assert that the error message clarifies this.','line_number':529,'multiline':False]
['text':' Since "~/" is a Bash shorthand for "$HOME" and setting an envvar is a Bash command, ANDROID_HOME','line_number':539,'multiline':False]
['text':' will actually be expanded to the full path of the home directory.','line_number':540,'multiline':False]
['text':' Since "~/" is a Bash shorthand for "$HOME" and setting an envvar is a Bash command,','line_number':547,'multiline':False]
['text':' ANDROID_NDK_HOME will actually be expanded to the full path of the home directory.','line_number':548,'multiline':False]
['text':'include "inc/bar.h"','line_number':1035,'multiline':False]
['text':'include <stdio.h>','line_number':1058,'multiline':False]
['text':'include "inc/bar.h"','line_number':1059,'multiline':False]
['text':' Regression test for https://github.com/bazelbuild/bazel/issues/792','line_number':1101,'multiline':False]
['text':' Regression test for #2841.','line_number':1147,'multiline':False]
['text':' Create the workspace and verify it now succeeds.','line_number':1170,'multiline':False]
['text':' Regression test for #1697.','line_number':1176,'multiline':False]
['text':' Creates an indirect dependency on X from A and make sure the error message','line_number':1297,'multiline':False]
['text':' refers to the correct label, both in an external repository and not.','line_number':1298,'multiline':False]
['text':' This test verifies that the `public` pattern includes external dependencies.','line_number':1373,'multiline':False]
['text':'','line_number':1374,'multiline':False]
['text':' ${WORKSPACE_DIR}/','line_number':1375,'multiline':False]
['text':'     WORKSPACE','line_number':1376,'multiline':False]
['text':'     green/','line_number':1377,'multiline':False]
['text':'       BUILD','line_number':1378,'multiline':False]
['text':' repo2/','line_number':1379,'multiline':False]
['text':'   blue/','line_number':1380,'multiline':False]
['text':'     BUILD','line_number':1381,'multiline':False]
['text':'','line_number':1382,'multiline':False]
['text':' repo2 contains a .sh file whose visibility is set to public.','line_number':1383,'multiline':False]
['text':' We verify that we can use this file from ${WORKSPACE_DIR} by running it as','line_number':1384,'multiline':False]
['text':' part of the "run-the-thing" binary.','line_number':1385,'multiline':False]
['text':'','line_number':1386,'multiline':False]
['text':' TODO(brandjon): Can this test be deleted in favor of an analysis-time unit','line_number':1387,'multiline':False]
['text':' test? Ideally PackageGroupTest should cover it, but that suite can't handle','line_number':1388,'multiline':False]
['text':' external repos.','line_number':1389,'multiline':False]
['text':'!/bin/sh','line_number':1406,'multiline':False]
['text':' Like test above, but testing an external dep can depend on a local target with','line_number':1427,'multiline':False]
['text':' with `public` visibility.','line_number':1428,'multiline':False]
['text':'','line_number':1429,'multiline':False]
['text':' TODO(brandjon): Eliminate this test, as described above?','line_number':1430,'multiline':False]
['text':'!/bin/sh','line_number':1460,'multiline':False]
