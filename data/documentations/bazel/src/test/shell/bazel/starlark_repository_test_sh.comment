['text':'!/bin/bash','line_number':1,'multiline':False]
['text':'','line_number':2,'multiline':False]
['text':' Copyright 2015 The Bazel Authors. All rights reserved.','line_number':3,'multiline':False]
['text':'','line_number':4,'multiline':False]
['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':5,'multiline':False]
['text':' you may not use this file except in compliance with the License.','line_number':6,'multiline':False]
['text':' You may obtain a copy of the License at','line_number':7,'multiline':False]
['text':'','line_number':8,'multiline':False]
['text':'    http://www.apache.org/licenses/LICENSE-2.0','line_number':9,'multiline':False]
['text':'','line_number':10,'multiline':False]
['text':' Unless required by applicable law or agreed to in writing, software','line_number':11,'multiline':False]
['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':12,'multiline':False]
['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':13,'multiline':False]
['text':' See the License for the specific language governing permissions and','line_number':14,'multiline':False]
['text':' limitations under the License.','line_number':15,'multiline':False]
['text':'','line_number':16,'multiline':False]
['text':' Test the local_repository binding','line_number':17,'multiline':False]
['text':'','line_number':18,'multiline':False]
['text':' --- begin runfiles.bash initialization ---','line_number':20,'multiline':False]
['text':' Copy-pasted from Bazel's Bash runfiles library (tools/bash/runfiles/runfiles.bash).','line_number':21,'multiline':False]
['text':' --- end runfiles.bash initialization ---','line_number':41,'multiline':False]
['text':' `uname` returns the current platform, e.g "MSYS_NT-10.0" or "Linux".','line_number':46,'multiline':False]
['text':' `tr` converts all upper case letters to lower case.','line_number':47,'multiline':False]
['text':' `case` matches the result if the `uname | tr` expression to string prefixes','line_number':48,'multiline':False]
['text':' that use the same wildcards as names do in Bash, i.e. "msys*" matches strings','line_number':49,'multiline':False]
['text':' starting with "msys", and "*" matches everything (it's the default case).','line_number':50,'multiline':False]
['text':' As of 2018-08-14, Bazel on Windows only supports MSYS Bash.','line_number':53,'multiline':False]
['text':' Disable MSYS path conversion that converts path-looking command arguments to','line_number':62,'multiline':False]
['text':' Windows paths (even if they arguments are not in fact paths).','line_number':63,'multiline':False]
['text':' Basic test.','line_number':73,'multiline':False]
['text':' Empty package for the .bzl file','line_number':95,'multiline':False]
['text':' Our macro','line_number':98,'multiline':False]
['text':' Invalidation','line_number':124,'multiline':False]
['text':' No invalidation','line_number':129,'multiline':False]
['text':' No invalidation','line_number':132,'multiline':False]
['text':' Test invalidation of the WORKSPACE file','line_number':136,'multiline':False]
['text':' Invalidation','line_number':158,'multiline':False]
['text':' No invalidation','line_number':163,'multiline':False]
['text':' No invalidation','line_number':166,'multiline':False]
['text':' Test load from repository.','line_number':191,'multiline':False]
['text':' Our macro','line_number':208,'multiline':False]
['text':' Test loading a repository with a load statement in the WORKSPACE file','line_number':231,'multiline':False]
['text':' Test cycle when loading a repository with a load statement in the WORKSPACE file that is not','line_number':268,'multiline':False]
['text':' yet defined.','line_number':269,'multiline':False]
['text':' Test build //...','line_number':310,'multiline':False]
['text':' Retest with query //...','line_number':318,'multiline':False]
['text':' Remove the WORKSPACE file in the symlinked repo, so our Starlark rule has to','line_number':330,'multiline':False]
['text':' create one.','line_number':331,'multiline':False]
['text':' Our custom repository rule','line_number':344,'multiline':False]
['text':' Need to be in a package','line_number':354,'multiline':False]
['text':' Need to be in a package','line_number':376,'multiline':False]
['text':' Symlink so a repository is created','line_number':386,'multiline':False]
['text':' Build with the special testing flag that appends a marker string to all','line_number':401,'multiline':False]
['text':' print() calls.','line_number':402,'multiline':False]
['text':' Our custom repository rule','line_number':417,'multiline':False]
['text':' Symlink so a repository is created','line_number':420,'multiline':False]
['text':' Test we are using the client environment, not the server one','line_number':437,'multiline':False]
['text':' Start up the server.','line_number':438,'multiline':False]
['text':' Symlink so a repository is created','line_number':450,'multiline':False]
['text':' Symlink so a repository is created','line_number':473,'multiline':False]
['text':' Our custom repository rule','line_number':496,'multiline':False]
['text':' Symlink so a repository is created','line_number':500,'multiline':False]
['text':' TODO(dmarting): We should seriously have something better to force a refetch...','line_number':505,'multiline':False]
['text':' Test that we don't re-run on server restart.','line_number':516,'multiline':False]
['text':' Test that --action_env value is taken','line_number':523,'multiline':False]
['text':' TODO(dmarting): The current implemnentation cannot invalidate on environment','line_number':524,'multiline':False]
['text':' but the incoming change can declare environment dependency, once this is','line_number':525,'multiline':False]
['text':' done, maybe we should update this test to remove clean --expunge and use the','line_number':526,'multiline':False]
['text':' invalidation mechanism instead?','line_number':527,'multiline':False]
['text':' Test modifying test.bzl invalidate the repository','line_number':539,'multiline':False]
['text':' Symlink so a repository is created','line_number':543,'multiline':False]
['text':' Shutdown and modify again','line_number':550,'multiline':False]
['text':' Symlink so a repository is created','line_number':555,'multiline':False]
['text':' This might cause a function restart, do it first','line_number':571,'multiline':False]
['text':' We use a counter to avoid other invalidation to hide repository','line_number':594,'multiline':False]
['text':' invalidation (e.g., --action_env will cause all action to re-run).','line_number':595,'multiline':False]
['text':' Our custom repository rule','line_number':598,'multiline':False]
['text':' Test invalidation based on environment variable','line_number':615,'multiline':False]
['text':' Test that changing FOO is causing a refetch','line_number':627,'multiline':False]
['text':' Test that changing BAR is causing a refetch','line_number':636,'multiline':False]
['text':' Test that changing BAZ is not causing a refetch','line_number':645,'multiline':False]
['text':' Test more change in the environment','line_number':650,'multiline':False]
['text':' Test that removing BEZ is not causing a refetch','line_number':655,'multiline':False]
['text':' Test that removing BAR is causing a refetch','line_number':660,'multiline':False]
['text':' Now try to depends on more variables','line_number':669,'multiline':False]
['text':' The Starlark rule has changed, so a rebuild should happen','line_number':672,'multiline':False]
['text':' Now a change to BAZ should trigger a rebuild','line_number':681,'multiline':False]
['text':' We use a counter to avoid other invalidation to hide repository','line_number':695,'multiline':False]
['text':' invalidation (e.g., --action_env will cause all action to re-run).','line_number':696,'multiline':False]
['text':' Set to FOO=BAZ BAR=FOO','line_number':699,'multiline':False]
['text':' Test with changing using --action_env','line_number':705,'multiline':False]
['text':' Same test as previous but with server restart between each invocation','line_number':725,'multiline':False]
['text':' Test invalidation based on change to the bzl files','line_number':738,'multiline':False]
['text':' Changing the Starlark file cause a refetch','line_number':752,'multiline':False]
['text':' Just add a comment','line_number':755,'multiline':False]
['text':' But also changing the environ.bzl file does a refetch','line_number':763,'multiline':False]
['text':' Just add a comment','line_number':766,'multiline':False]
['text':' Same test as previous but with server restart between each invocation','line_number':779,'multiline':False]
['text':' Test invalidation based on change to the bzl files','line_number':784,'multiline':False]
['text':' Changing the Starlark file cause a refetch','line_number':798,'multiline':False]
['text':' Same test as previous but with server restart between each invocation','line_number':813,'multiline':False]
['text':' Test invalidation based on changes of the Starlark semantics','line_number':818,'multiline':False]
['text':' Changing the starlark semantics should invalidate once','line_number':838,'multiline':False]
['text':' Make a rule depending on the environment variable FOO,','line_number':862,'multiline':False]
['text':' properly recording its value. Also add a time stamp','line_number':863,'multiline':False]
['text':' to verify that the rule is rerun.','line_number':864,'multiline':False]
['text':' Have a normal rule, unrelated to the external repository.','line_number':882,'multiline':False]
['text':' To test if it was rerun, make it non-hermetic and record a','line_number':883,'multiline':False]
['text':' time stamp.','line_number':884,'multiline':False]
['text':' ensure any rerun will have a different time stamp','line_number':905,'multiline':False]
['text':' nothing should change, as actions don't see FOO and for repositories','line_number':908,'multiline':False]
['text':' the value is fixed by --repo_env','line_number':909,'multiline':False]
['text':' The new config should be picked up, but the unrelated target should','line_number':920,'multiline':False]
['text':' not be rerun','line_number':921,'multiline':False]
['text':' The new config should be picked up, but the unrelated target should','line_number':932,'multiline':False]
['text':' not be rerun','line_number':933,'multiline':False]
['text':' This test makes sure that a repository rule that has no dependencies on','line_number':945,'multiline':False]
['text':' environment variables does _not_ get refetched when --repo_env changes.','line_number':946,'multiline':False]
['text':' Record a time stamp to verify that the rule is not rerun.','line_number':951,'multiline':False]
['text':' ensure any rerun will have a different time stamp','line_number':976,'multiline':False]
['text':' The new config should not trigger a rerun of repoenv.','line_number':979,'multiline':False]
['text':' regression test for https://github.com/bazelbuild/bazel/issues/8869','line_number':988,'multiline':False]
['text':' There is no executable flag on Windows.','line_number':1040,'multiline':False]
['text':' Our custom repository rule','line_number':1046,'multiline':False]
['text':' Prepare HTTP server with Python','line_number':1066,'multiline':False]
['text':' Start HTTP server with Python','line_number':1076,'multiline':False]
['text':' Our custom repository rule','line_number':1080,'multiline':False]
['text':' necessary directories should already created by download function','line_number':1089,'multiline':False]
['text':' Test download','line_number':1097,'multiline':False]
['text':' Test download','line_number':1102,'multiline':False]
['text':' No executable flag for file on Windows','line_number':1110,'multiline':False]
['text':' Test executable','line_number':1115,'multiline':False]
['text':' Prepare HTTP server with Python','line_number':1123,'multiline':False]
['text':' Start HTTP server with Python','line_number':1142,'multiline':False]
['text':' On Windows, a file url should be file:///C:/foo/bar,','line_number':1145,'multiline':False]
['text':' we need to add one more slash at the beginning.','line_number':1146,'multiline':False]
['text':' Our custom repository rule','line_number':1152,'multiline':False]
['text':' necessary directories should already created by download function','line_number':1175,'multiline':False]
['text':' This test case explicitly verifies that a checksum is returned, even if','line_number':1179,'multiline':False]
['text':' none was provided by the call to download_and_extract. So we do have to','line_number':1180,'multiline':False]
['text':' allow a download without provided checksum, even though it is plain http;','line_number':1181,'multiline':False]
['text':' nevertheless, localhost is pretty safe against man-in-the-middle attacks.','line_number':1182,'multiline':False]
['text':' Prepare HTTP server with Python','line_number':1198,'multiline':False]
['text':' Start HTTP server with Python','line_number':1207,'multiline':False]
['text':' Our custom repository rule','line_number':1228,'multiline':False]
['text':' Test download','line_number':1252,'multiline':False]
['text':' Prepare HTTP server with Python','line_number':1259,'multiline':False]
['text':' Start HTTP server with Python','line_number':1276,'multiline':False]
['text':' Our custom repository rule','line_number':1280,'multiline':False]
['text':' Test cleanup','line_number':1305,'multiline':False]
['text':' Test download_and_extract','line_number':1312,'multiline':False]
['text':' Test native.bazel_version','line_number':1330,'multiline':False]
['text':' Empty package for the .bzl file','line_number':1351,'multiline':False]
['text':' Our macro','line_number':1354,'multiline':False]
['text':' On release, Bazel binary get stamped, else we might run with an unstamped version.','line_number':1362,'multiline':False]
['text':' Test native.existing_rule(s), regression test for #1277','line_number':1373,'multiline':False]
['text':' Empty package for the .bzl file','line_number':1388,'multiline':False]
['text':' Our macro','line_number':1391,'multiline':False]
['text':' Here we explicitly copy a file where we constructed the name','line_number':1412,'multiline':False]
['text':' completely outside any build interfaces, so it is not registered','line_number':1413,'multiline':False]
['text':' as a dependency of the external repository.','line_number':1414,'multiline':False]
['text':' Set up two repositories that count how often they are fetched','line_number':1496,'multiline':False]
['text':' Normal sync should hit both repositories','line_number':1519,'multiline':False]
['text':' Only foo','line_number':1525,'multiline':False]
['text':' Only bar','line_number':1531,'multiline':False]
['text':' Only bar','line_number':1537,'multiline':False]
['text':' Regression test for #7850','line_number':1545,'multiline':False]
['text':' Verify that the for a failed download, it is clearly indicated','line_number':1546,'multiline':False]
['text':' what was attempted to download and how it fails.','line_number':1547,'multiline':False]
['text':' Extract the first error message printed','line_number':1601,'multiline':False]
['text':'','line_number':1602,'multiline':False]
['text':' ERROR: An error occurred during the fetch of repository 'this_is_the_root_cause':','line_number':1603,'multiline':False]
['text':'    Traceback (most recent call last):','line_number':1604,'multiline':False]
['text':' 	File ".../http.bzl", line 111, column 45, in _http_archive_impl','line_number':1605,'multiline':False]
['text':' 		download_info = ctx.download_and_extract(','line_number':1606,'multiline':False]
['text':' Error in download_and_extract: java.io.IOException: Error downloading \','line_number':1607,'multiline':False]
['text':'   [http://does.not.exist.example.com/some/file.tar] to ...file.tar: \','line_number':1608,'multiline':False]
['text':'   Unknown host: does.not.exist.example.com','line_number':1609,'multiline':False]
['text':' We expect it to contain the root cause, and the failure ...','line_number':1613,'multiline':False]
['text':' ...but not be cluttered with information not related to the root cause','line_number':1618,'multiline':False]
['text':' Verify that the same is true, if the error is caused by a fail statement.','line_number':1624,'multiline':False]
['text':' Extract the first error message printed (see previous awk command).','line_number':1637,'multiline':False]
['text':' Common setup logic for test_auth_*.','line_number':1718,'multiline':False]
['text':' Receives as arguments the username and password for basic authentication.','line_number':1719,'multiline':False]
['text':' If no arguments are provided, no authentication is used.','line_number':1720,'multiline':False]
['text':' -ne 0 && $# -ne 2 ]]; then','line_number':1722,'multiline':False]
['text':' -eq 2 ]]; then','line_number':1733,'multiline':False]
['text':' Skip on Windows: credential helper is a Python script.','line_number':1795,'multiline':False]
['text':' no auth','line_number':1801,'multiline':False]
['text':' expect credentials to have been cached','line_number':1814,'multiline':False]
['text':' Skip on Windows: credential helper is a Python script.','line_number':1819,'multiline':False]
['text':' Write a badly formatted, but correct, .netrc file','line_number':1832,'multiline':False]
['text':' this is a comment','line_number':1840,'multiline':False]
['text':' We expect that `read_netrc` can parse this file...','line_number':1845,'multiline':False]
['text':' ...and that from the parse result, we can read off the','line_number':1870,'multiline':False]
['text':' credentials for example.com.','line_number':1871,'multiline':False]
['text':' Also check the precise value of parsed file','line_number':1887,'multiline':False]
['text':' Test the starlark utility function use_netrc.','line_number':1924,'multiline':False]
['text':' following lines mix tabs and spaces','line_number':1934,'multiline':False]
['text':' Read a given .netrc file and combine it with a list of URL,','line_number':1938,'multiline':False]
['text':' and write the obtained authentication dictionary to disk; this','line_number':1939,'multiline':False]
['text':' is not the intended way of using, but makes testing easy.','line_number':1940,'multiline':False]
['text':' Here dicts give us the correct notion of equality, so we can simply','line_number':1979,'multiline':False]
['text':' compare against the expected value.','line_number':1980,'multiline':False]
['text':' After adding a good checksum, we expect success','line_number':2055,'multiline':False]
['text':' Skip on Windows: credential helper is a Python script.','line_number':2194,'multiline':False]
['text':' Skip on Windows: credential helper is a Python script.','line_number':2228,'multiline':False]
['text':' for some reason --repository_disable_download fails with bzlmod trying to download @platforms.','line_number':2357,'multiline':False]
['text':' no worker thread, restarts twice','line_number':2377,'multiline':False]
['text':' platform worker thread, never restarts','line_number':2382,'multiline':False]
['text':' Skip on Windows: credential helper is a Python script.','line_number':2414,'multiline':False]
