['text':'!/bin/bash','line_number':1,'multiline':False]
['text':'','line_number':2,'multiline':False]
['text':' Copyright 2016 The Bazel Authors. All rights reserved.','line_number':3,'multiline':False]
['text':'','line_number':4,'multiline':False]
['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':5,'multiline':False]
['text':' you may not use this file except in compliance with the License.','line_number':6,'multiline':False]
['text':' You may obtain a copy of the License at','line_number':7,'multiline':False]
['text':'','line_number':8,'multiline':False]
['text':'    http://www.apache.org/licenses/LICENSE-2.0','line_number':9,'multiline':False]
['text':'','line_number':10,'multiline':False]
['text':' Unless required by applicable law or agreed to in writing, software','line_number':11,'multiline':False]
['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':12,'multiline':False]
['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':13,'multiline':False]
['text':' See the License for the specific language governing permissions and','line_number':14,'multiline':False]
['text':' limitations under the License.','line_number':15,'multiline':False]
['text':'','line_number':16,'multiline':False]
['text':' bazel_query_test.sh: integration tests for bazel query','line_number':17,'multiline':False]
['text':' --- begin runfiles.bash initialization ---','line_number':19,'multiline':False]
['text':' Copy-pasted from Bazel's Bash runfiles library (tools/bash/runfiles/runfiles.bash).','line_number':20,'multiline':False]
['text':' --- end runfiles.bash initialization ---','line_number':40,'multiline':False]
['text':' `uname` returns the current platform, e.g "MSYS_NT-10.0" or "Linux".','line_number':45,'multiline':False]
['text':' `tr` converts all upper case letters to lower case.','line_number':46,'multiline':False]
['text':' `case` matches the result if the `uname | tr` expression to string prefixes','line_number':47,'multiline':False]
['text':' that use the same wildcards as names do in Bash, i.e. "msys*" matches strings','line_number':48,'multiline':False]
['text':' starting with "msys", and "*" matches everything (it's the default case).','line_number':49,'multiline':False]
['text':' As of 2018-08-14, Bazel on Windows only supports MSYS Bash.','line_number':52,'multiline':False]
['text':' Disable MSYS path conversion that converts path-looking command arguments to','line_number':61,'multiline':False]
['text':' Windows paths (even if they arguments are not in fact paths).','line_number':62,'multiline':False]
['text':'### TESTS #############################################################','line_number':76,'multiline':False]
['text':' There is no check for unspecified visibility because proto output format','line_number':145,'multiline':False]
['text':' adds every attribute to the output, regardless of whether they are specified','line_number':146,'multiline':False]
['text':' or have the default value','line_number':147,'multiline':False]
['text':' Running a deps query twice should return results in the same order','line_number':178,'multiline':False]
['text':' if output is sorted, otherwise just the same results.','line_number':179,'multiline':False]
['text':' Only compare the output stream with the query results.','line_number':192,'multiline':False]
['text':' This is documenting current behavior, rather than enforcing a contract. For','line_number':224,'multiline':False]
['text':' performance and code simplicity, we return targets if their package was','line_number':225,'multiline':False]
['text':' loaded, so //foo:BUILD exists as a target (although its deps and rdeps are','line_number':226,'multiline':False]
['text':' unknown).','line_number':227,'multiline':False]
['text':' This is documenting current behavior, rather than enforcing a contract. See','line_number':249,'multiline':False]
['text':' corresponding comment in test_universe_scope_with_without_star.','line_number':250,'multiline':False]
['text':' This is documenting current behavior, rather than enforcing a contract. See','line_number':255,'multiline':False]
['text':' corresponding comment in test_universe_scope_with_without_star. In this','line_number':256,'multiline':False]
['text':' case, even though we return //bar:dep, we do not see its rdep //bar:top.','line_number':257,'multiline':False]
['text':' Since all targets in deps(..., n) are accessible n steps away, none should','line_number':262,'multiline':False]
['text':' have a minrank greater than n.','line_number':263,'multiline':False]
['text':' TODO(bazel-team): Remove this once test clean-up is automated.','line_number':297,'multiline':False]
['text':' Clean up after ourselves.','line_number':298,'multiline':False]
['text':' TODO(bazel-team): Remove this once test clean-up is automated.','line_number':311,'multiline':False]
['text':' Clean up after ourselves.','line_number':312,'multiline':False]
['text':' TODO(bazel-team): Remove this once test clean-up is automated.','line_number':325,'multiline':False]
['text':' Clean up after ourselves.','line_number':326,'multiline':False]
['text':' TODO(bazel-team): Remove this once test clean-up is automated.','line_number':338,'multiline':False]
['text':' Clean up after ourselves.','line_number':339,'multiline':False]
['text':' TODO(bazel-team): Remove this once test clean-up is automated.','line_number':352,'multiline':False]
['text':' Clean up after ourselves.','line_number':353,'multiline':False]
['text':' TODO(bazel-team): Remove this once test clean-up is automated.','line_number':366,'multiline':False]
['text':' Clean up after ourselves.','line_number':367,'multiline':False]
['text':' TODO(bazel-team): Remove this once test clean-up is automated.','line_number':379,'multiline':False]
['text':' Clean up after ourselves.','line_number':380,'multiline':False]
['text':' TODO(bazel-team): Remove this once test clean-up is automated.','line_number':393,'multiline':False]
['text':' Clean up after ourselves.','line_number':394,'multiline':False]
['text':' TODO(bazel-team): Remove this once test clean-up is automated.','line_number':407,'multiline':False]
['text':' Clean up after ourselves.','line_number':408,'multiline':False]
['text':' Query with --relative_locations should not show full path','line_number':494,'multiline':False]
['text':' Check that Bazel displays the location of line 1 of the actual source file','line_number':511,'multiline':False]
['text':' Location should still be affected by relative_locations flag to display the','line_number':519,'multiline':False]
['text':' relative location of the source file','line_number':520,'multiline':False]
['text':' Somepath in genquery needs to output in dependency order instead of','line_number':652,'multiline':False]
['text':' lexicographical order (which is the default for all other expressions)','line_number':653,'multiline':False]
['text':' Allpaths in genquery outputs in lexicographical order (just like all other','line_number':662,'multiline':False]
['text':' expressions) as the dependency order is not preserved during computation','line_number':663,'multiline':False]
['text':' in GraphlessBlazeQueryEnvironment','line_number':664,'multiline':False]
['text':' Genquery uses a graphless blaze environment by default.','line_number':694,'multiline':False]
['text':' The --incompatible_lexicographical_output flag is used to','line_number':697,'multiline':False]
['text':' switch order_output=auto to use graphless query and output in','line_number':698,'multiline':False]
['text':' lexicographical order.','line_number':699,'multiline':False]
['text':' The outputs of graphless query and graphless genquery should be the same and','line_number':703,'multiline':False]
['text':' should both be in lexicographical order.','line_number':704,'multiline':False]
['text':' The --incompatible_lexicographical_output flag should not affect query','line_number':757,'multiline':False]
['text':' order_output=no. Note that there is a chance it may output in','line_number':758,'multiline':False]
['text':' lexicographical order since it is unordered.','line_number':759,'multiline':False]
['text':' Regression test for https://github.com/bazelbuild/bazel/issues/8582.','line_number':786,'multiline':False]
['text':' When we have a package //foo whose BUILD file','line_number':789,'multiline':False]
['text':' Defines a target //foo:foo, with input file foo/foo.sh,','line_number':791,'multiline':False]
['text':' And foo/foo.sh has some initial contents.','line_number':794,'multiline':False]
['text':' Then `rbuildfiles` correctly thinks //foo "depends" on foo/BUILD,','line_number':797,'multiline':False]
['text':' And that no package "depends" on foo/foo.sh.','line_number':803,'multiline':False]
['text':' But then, after we *build* //foo:foo (thus priming the Skyframe graph with','line_number':810,'multiline':False]
['text':' a transitive dep path from the input ArtifactValue for foo/foo.sh to the','line_number':811,'multiline':False]
['text':' FileStateValue for foo/foo.sh),','line_number':812,'multiline':False]
['text':' And we modify the contents of foo/foo.sh,','line_number':815,'multiline':False]
['text':' And we again do a `rbuildfiles(foo/foo.sh)`, Bazel again correctly thinks','line_number':818,'multiline':False]
['text':' no package "depends" on foo/foo.sh.','line_number':819,'multiline':False]
['text':'','line_number':820,'multiline':False]
['text':' Historically, Bazel would crash here because it would first invalidate the','line_number':821,'multiline':False]
['text':' UTC of FileStateValue for foo/foo.sh (invalidating the ArtifactValue for','line_number':822,'multiline':False]
['text':' foo/foo.sh), and then evaluate the DTC of the *skyquery-land* universe of','line_number':823,'multiline':False]
['text':' //foo:foo (*not* evaluating that ArtifactValue), and then observe an rdep','line_number':824,'multiline':False]
['text':' edge on the not-done ArtifactValue, and then crash.','line_number':825,'multiline':False]
['text':' When we have three targets //a:a, //b:b, //c:c, with //b:b depending','line_number':834,'multiline':False]
['text':' directly on //a:a, and //c:c depending directly on //b:b.','line_number':835,'multiline':False]
['text':' And we run 'bazel query' with both --infer_universe_scope and','line_number':841,'multiline':False]
['text':' --order_output=no set (making this invocation eligible for SkyQuery), with','line_number':842,'multiline':False]
['text':' a query expression of "allrdeps(//a)",','line_number':843,'multiline':False]
['text':' Then the invocation succeeds (confirming SkyQuery mode was enabled),','line_number':848,'multiline':False]
['text':' And also the result contains //a:a','line_number':849,'multiline':False]
['text':' But it does not contain //b:c or //c:c, because they aren't contained in','line_number':851,'multiline':False]
['text':' the inferred universe scope.','line_number':852,'multiline':False]
['text':' And also, when we run 'bazel clean' (just to be sure, since the semantics','line_number':856,'multiline':False]
['text':' of SkyQuery depends on the state of the Bazel server)','line_number':857,'multiline':False]
['text':' And then we run 'bazel query' again, with the same options as last time,','line_number':860,'multiline':False]
['text':' but this time with a query expression that contains target patterns whose','line_number':861,'multiline':False]
['text':' DTC covers //b:b and //c:c too,','line_number':862,'multiline':False]
['text':' Then the invocation also succeeds (confirming SkyQuery mode was enabled),','line_number':866,'multiline':False]
['text':' But this time the result contains all three targets.','line_number':867,'multiline':False]
['text':' When we have two targets, in two different packages, that do not depend on','line_number':892,'multiline':False]
['text':' each other,','line_number':893,'multiline':False]
['text':' And we run 'bazel query' with a --universe_scope value that covers only one','line_number':898,'multiline':False]
['text':' of the targets but a query expression that has target patterns for both','line_number':899,'multiline':False]
['text':' targets, but also pass --infer_universe_scope,','line_number':900,'multiline':False]
['text':' Then the query invocation fails, because of the missing target, thus','line_number':906,'multiline':False]
['text':' verifying that our value of --universe_scope was respected and','line_number':907,'multiline':False]
['text':' --infer_universe_scope was ignored.','line_number':908,'multiline':False]
['text':' And then, when we run 'bazel clean' (just to be sure, since the semantics','line_number':911,'multiline':False]
['text':' of SkyQuery depends on the state of the Bazel server)','line_number':912,'multiline':False]
['text':' And we run 'bazel query', this time without setting --universe_scope, but','line_number':915,'multiline':False]
['text':' with --infer_universe_scope and the same query expression,','line_number':916,'multiline':False]
['text':' Then the query expression succeeds, because both targets are in the','line_number':921,'multiline':False]
['text':' inferred universe.','line_number':922,'multiline':False]
['text':' Ensure that --keep_going works for both graphless and non-graphless blaze','line_number':952,'multiline':False]
['text':' query environments for each function.','line_number':953,'multiline':False]
['text':' For graphless query mode, pkg2 should not be loaded because','line_number':1053,'multiline':False]
['text':' same_pkg_direct_rdeps only cares about the targets in the same package','line_number':1054,'multiline':False]
['text':' as its inputs.','line_number':1055,'multiline':False]
['text':' the result of "same_pkg_direct_rdeps(//pkg1:t2+//pkg3:t5)"','line_number':1057,'multiline':False]
['text':' Verify that the appropriate attributes were included.','line_number':1083,'multiline':False]
