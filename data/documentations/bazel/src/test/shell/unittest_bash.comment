['text':'!/bin/bash','line_number':1,'multiline':False]
['text':'','line_number':2,'multiline':False]
['text':' Copyright 2015 The Bazel Authors. All rights reserved.','line_number':3,'multiline':False]
['text':'','line_number':4,'multiline':False]
['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':5,'multiline':False]
['text':' you may not use this file except in compliance with the License.','line_number':6,'multiline':False]
['text':' You may obtain a copy of the License at','line_number':7,'multiline':False]
['text':'','line_number':8,'multiline':False]
['text':'    http://www.apache.org/licenses/LICENSE-2.0','line_number':9,'multiline':False]
['text':'','line_number':10,'multiline':False]
['text':' Unless required by applicable law or agreed to in writing, software','line_number':11,'multiline':False]
['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':12,'multiline':False]
['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':13,'multiline':False]
['text':' See the License for the specific language governing permissions and','line_number':14,'multiline':False]
['text':' limitations under the License.','line_number':15,'multiline':False]
['text':'','line_number':16,'multiline':False]
['text':' Common utility file for Bazel shell tests','line_number':17,'multiline':False]
['text':'','line_number':18,'multiline':False]
['text':' unittest.bash: a unit test framework in Bash.','line_number':19,'multiline':False]
['text':'','line_number':20,'multiline':False]
['text':' A typical test suite looks like so:','line_number':21,'multiline':False]
['text':'','line_number':22,'multiline':False]
['text':'   ------------------------------------------------------------------------','line_number':23,'multiline':False]
['text':'   #!/bin/bash','line_number':24,'multiline':False]
['text':'','line_number':25,'multiline':False]
['text':'   source path/to/unittest.bash || exit 1','line_number':26,'multiline':False]
['text':'','line_number':27,'multiline':False]
['text':'   # Test that foo works.','line_number':28,'multiline':False]
['text':'   function test_foo() {','line_number':29,'multiline':False]
['text':'     foo >$TEST_log || fail "foo failed";','line_number':30,'multiline':False]
['text':'     expect_log "blah" "Expected to see 'blah' in output of 'foo'."','line_number':31,'multiline':False]
['text':'   }','line_number':32,'multiline':False]
['text':'','line_number':33,'multiline':False]
['text':'   # Test that bar works.','line_number':34,'multiline':False]
['text':'   function test_bar() {','line_number':35,'multiline':False]
['text':'     bar 2>$TEST_log || fail "bar failed";','line_number':36,'multiline':False]
['text':'     expect_not_log "ERROR" "Unexpected error from 'bar'."','line_number':37,'multiline':False]
['text':'     ...','line_number':38,'multiline':False]
['text':'     assert_equals $x $y','line_number':39,'multiline':False]
['text':'   }','line_number':40,'multiline':False]
['text':'','line_number':41,'multiline':False]
['text':'   run_suite "Test suite for blah"','line_number':42,'multiline':False]
['text':'   ------------------------------------------------------------------------','line_number':43,'multiline':False]
['text':'','line_number':44,'multiline':False]
['text':' Each test function is considered to pass iff fail() is not called','line_number':45,'multiline':False]
['text':' while it is active.  fail() may be called directly, or indirectly','line_number':46,'multiline':False]
['text':' via other assertions such as expect_log().  run_suite must be called','line_number':47,'multiline':False]
['text':' at the very end.','line_number':48,'multiline':False]
['text':'','line_number':49,'multiline':False]
['text':' A test suite may redefine functions "set_up" and/or "tear_down";','line_number':50,'multiline':False]
['text':' these functions are executed before and after each test function,','line_number':51,'multiline':False]
['text':' respectively.  Similarly, "cleanup" and "timeout" may be redefined,','line_number':52,'multiline':False]
['text':' and these function are called upon exit (of any kind) or a timeout.','line_number':53,'multiline':False]
['text':'','line_number':54,'multiline':False]
['text':' The user can pass --test_filter to blaze test to select specific tests','line_number':55,'multiline':False]
['text':' to run with Bash globs. A union of tests matching any of the provided globs','line_number':56,'multiline':False]
['text':' will be run. Additionally the user may define TESTS=(test_foo test_bar ...) to','line_number':57,'multiline':False]
['text':' specify a subset of test functions to execute, for example, a working set','line_number':58,'multiline':False]
['text':' during debugging. By default, all functions called test_* will be executed.','line_number':59,'multiline':False]
['text':'','line_number':60,'multiline':False]
['text':' This file provides utilities for assertions over the output of a','line_number':61,'multiline':False]
['text':' command.  The output of the command under test is directed to the','line_number':62,'multiline':False]
['text':' file $TEST_log, and then the expect_log* assertions can be used to','line_number':63,'multiline':False]
['text':' test for the presence of certain regular expressions in that file.','line_number':64,'multiline':False]
['text':'','line_number':65,'multiline':False]
['text':' The test framework is responsible for restoring the original working','line_number':66,'multiline':False]
['text':' directory before each test.','line_number':67,'multiline':False]
['text':'','line_number':68,'multiline':False]
['text':' The order in which test functions are run is not defined, so it is','line_number':69,'multiline':False]
['text':' important that tests clean up after themselves.','line_number':70,'multiline':False]
['text':'','line_number':71,'multiline':False]
['text':' Each test will be run in a new subshell.','line_number':72,'multiline':False]
['text':'','line_number':73,'multiline':False]
['text':' Functions named __* are not intended for use by clients.','line_number':74,'multiline':False]
['text':'','line_number':75,'multiline':False]
['text':' This framework implements the "test sharding protocol".','line_number':76,'multiline':False]
['text':'','line_number':77,'multiline':False]
['text':' Load the environment support utilities.','line_number':86,'multiline':False]
['text':'### Global variables:','line_number':89,'multiline':False]
['text':' The name of the current test.','line_number':91,'multiline':False]
['text':' The log file over which the','line_number':93,'multiline':False]
['text':' expect_log* assertions work.  Must','line_number':94,'multiline':False]
['text':' be absolute to be robust against','line_number':95,'multiline':False]
['text':' tests invoking 'cd'!','line_number':96,'multiline':False]
['text':' The result of the current test;','line_number':98,'multiline':False]
['text':' failed assertions cause this to','line_number':99,'multiline':False]
['text':' become false.','line_number':100,'multiline':False]
['text':' These variables may be overridden by the test suite:','line_number':102,'multiline':False]
['text':' A subset or "working set" of test','line_number':104,'multiline':False]
['text':' functions that should be run.  By','line_number':105,'multiline':False]
['text':' default, all tests called test_* are','line_number':106,'multiline':False]
['text':' run.','line_number':107,'multiline':False]
['text':' List of globs to use to filter the tests.','line_number':109,'multiline':False]
['text':' If non-empty, all tests matching at least one','line_number':110,'multiline':False]
['text':' of the globs are run and test list provided in','line_number':111,'multiline':False]
['text':' the arguments is ignored if present.','line_number':112,'multiline':False]
['text':' Indicates whether we are in `tear_down` phase','line_number':114,'multiline':False]
['text':' of test. Used to avoid re-entering `tear_down`','line_number':115,'multiline':False]
['text':' on failures within it.','line_number':116,'multiline':False]
['text':' > 0 )); then','line_number':118,'multiline':False]
['text':' Legacy behavior is to ignore missing regexp, but with errexit','line_number':124,'multiline':False]
['text':' the following line fails without || true.','line_number':125,'multiline':False]
['text':' TODO(dmarting): maybe we should revisit the way of selecting','line_number':126,'multiline':False]
['text':' test with that framework (use Bazel's environment variable instead).','line_number':127,'multiline':False]
['text':'TESTS[@]} == 0 )); then','line_number':129,'multiline':False]
['text':' TESTBRIDGE_TEST_ONLY contains the value of --test_filter, if any. We want to','line_number':133,'multiline':False]
['text':' preferentially use that instead of $@ to determine which tests to run.','line_number':134,'multiline':False]
['text':'TESTS[@]} != 0 )); then','line_number':136,'multiline':False]
['text':' Split TESTBRIDGE_TEST_ONLY on colon and store it in `_TEST_FILTERS` array.','line_number':140,'multiline':False]
['text':' Whether or not to be verbose.  A','line_number':144,'multiline':False]
['text':' command; "true" or "false" are','line_number':145,'multiline':False]
['text':' acceptable.  The default is: true.','line_number':146,'multiline':False]
['text':' Full path to test script','line_number':148,'multiline':False]
['text':' Check if the script path is absolute, if not prefix the PWD.','line_number':149,'multiline':False]
['text':'### Internal functions','line_number':155,'multiline':False]
['text':' Usage: __pad <title> <pad-char>','line_number':163,'multiline':False]
['text':' Print $title padded to 80 columns with $pad_char.','line_number':164,'multiline':False]
['text':' Ignore the subshell error -- `head` closes the fd before reading to the','line_number':168,'multiline':False]
['text':' end, therefore the subshell will get SIGPIPE while stuck in `write`.','line_number':169,'multiline':False]
['text':'### Exported functions','line_number':177,'multiline':False]
['text':' Usage: init_test ...','line_number':179,'multiline':False]
['text':' Deprecated.  Has no effect.','line_number':180,'multiline':False]
['text':' Usage: set_up','line_number':186,'multiline':False]
['text':' Called before every test function.  May be redefined by the test suite.','line_number':187,'multiline':False]
['text':' Usage: tear_down','line_number':192,'multiline':False]
['text':' Called after every test function.  May be redefined by the test suite.','line_number':193,'multiline':False]
['text':' Usage: cleanup','line_number':198,'multiline':False]
['text':' Called upon eventual exit of the test suite.  May be redefined by','line_number':199,'multiline':False]
['text':' the test suite.','line_number':200,'multiline':False]
['text':' Usage: timeout','line_number':205,'multiline':False]
['text':' Called upon early exit from a test due to timeout.','line_number':206,'multiline':False]
['text':' Usage: testenv_set_up','line_number':211,'multiline':False]
['text':' Called prior to set_up. For use by testenv.sh.','line_number':212,'multiline':False]
['text':' Usage: testenv_tear_down','line_number':217,'multiline':False]
['text':' Called after tear_down. For use by testenv.sh.','line_number':218,'multiline':False]
['text':' Usage: fail <message> [<message> ...]','line_number':223,'multiline':False]
['text':' Print failure message with context information, and mark the test as','line_number':224,'multiline':False]
['text':' a failure.  The context includes a stacktrace including the longest sequence','line_number':225,'multiline':False]
['text':' of calls outside this module.  (We exclude the top and bottom portions of','line_number':226,'multiline':False]
['text':' the stack because they just add noise.)  Also prints the contents of','line_number':227,'multiline':False]
['text':' $TEST_log.','line_number':228,'multiline':False]
['text':' Keep the original error message if we fail in `tear_down` after a failure.','line_number':232,'multiline':False]
['text':' Cleanup as we are leaving the subshell now','line_number':236,'multiline':False]
['text':' Skip `tear_down` after a failure in `tear_down` to prevent infinite','line_number':242,'multiline':False]
['text':' recursion.','line_number':243,'multiline':False]
['text':' Usage: warn <message>','line_number':251,'multiline':False]
['text':' Print a test warning with context information.','line_number':252,'multiline':False]
['text':' The context includes a stacktrace including the longest sequence','line_number':253,'multiline':False]
['text':' of calls outside this module.  (We exclude the top and bottom portions of','line_number':254,'multiline':False]
['text':' the stack because they just add noise.)','line_number':255,'multiline':False]
['text':' Usage: show_stack','line_number':266,'multiline':False]
['text':' Prints the portion of the stack that does not belong to this module,','line_number':267,'multiline':False]
['text':' i.e. the user's code that called a failing assertion.  Stack may not','line_number':268,'multiline':False]
['text':' be available if Bash is reading commands from stdin; an error is','line_number':269,'multiline':False]
['text':' printed in that case.','line_number':270,'multiline':False]
['text':' Skip over active calls within this module:','line_number':275,'multiline':False]
['text':'FUNCNAME[@]} )) && [[ ${BASH_SOURCE[i]:-} == "${BASH_SOURCE[0]}" ]]; do','line_number':276,'multiline':False]
['text':' Show all calls until the next one within this module (typically run_suite):','line_number':280,'multiline':False]
['text':'FUNCNAME[@]} )) && [[ ${BASH_SOURCE[i]:-} != "${BASH_SOURCE[0]}" ]]; do','line_number':281,'multiline':False]
['text':' Read online docs for BASH_LINENO to understand the strange offset.','line_number':282,'multiline':False]
['text':' Undefined can occur in the BASH_SOURCE stack apparently when one exits from a subshell','line_number':283,'multiline':False]
['text':' Usage: expect_log <regexp> [error-message]','line_number':292,'multiline':False]
['text':' Asserts that $TEST_log matches regexp.  Prints the contents of','line_number':293,'multiline':False]
['text':' $TEST_log and the specified (optional) error message otherwise, and','line_number':294,'multiline':False]
['text':' returns non-zero.','line_number':295,'multiline':False]
['text':' Usage: expect_log_warn <regexp> [error-message]','line_number':305,'multiline':False]
['text':' Warns if $TEST_log does not match regexp.  Prints the contents of','line_number':306,'multiline':False]
['text':' $TEST_log and the specified (optional) error message on mismatch.','line_number':307,'multiline':False]
['text':' Usage: expect_log_once <regexp> [error-message]','line_number':317,'multiline':False]
['text':' Asserts that $TEST_log contains one line matching <regexp>.','line_number':318,'multiline':False]
['text':' Prints the contents of $TEST_log and the specified (optional)','line_number':319,'multiline':False]
['text':' error message otherwise, and returns non-zero.','line_number':320,'multiline':False]
['text':' Usage: expect_log_n <regexp> <count> [error-message]','line_number':327,'multiline':False]
['text':' Asserts that $TEST_log contains <count> lines matching <regexp>.','line_number':328,'multiline':False]
['text':' Prints the contents of $TEST_log and the specified (optional)','line_number':329,'multiline':False]
['text':' error message otherwise, and returns non-zero.','line_number':330,'multiline':False]
['text':' Usage: expect_not_log <regexp> [error-message]','line_number':341,'multiline':False]
['text':' Asserts that $TEST_log does not match regexp.  Prints the contents','line_number':342,'multiline':False]
['text':' of $TEST_log and the specified (optional) error message otherwise, and','line_number':343,'multiline':False]
['text':' returns non-zero.','line_number':344,'multiline':False]
['text':' Usage: expect_query_targets <arguments>','line_number':354,'multiline':False]
['text':' Checks that log file contains exactly the targets in the argument list.','line_number':355,'multiline':False]
['text':' Checks that the number of lines started with '//' equals to the number of','line_number':361,'multiline':False]
['text':' arguments provided.','line_number':362,'multiline':False]
['text':'','line_number':363,'multiline':False]
['text':' Usage: expect_log_with_timeout <regexp> <timeout> [error-message]','line_number':366,'multiline':False]
['text':' Waits for the given regexp in the $TEST_log for up to timeout seconds.','line_number':367,'multiline':False]
['text':' Prints the contents of $TEST_log and the specified (optional)','line_number':368,'multiline':False]
['text':' error message otherwise, and returns non-zero.','line_number':369,'multiline':False]
['text':' Usage: expect_cmd_with_timeout <expected> <cmd> [timeout]','line_number':386,'multiline':False]
['text':' Repeats the command once a second for up to timeout seconds (10s by default),','line_number':387,'multiline':False]
['text':' until the output matches the expected value. Fails and returns 1 if','line_number':388,'multiline':False]
['text':' the command does not return the expected value in the end.','line_number':389,'multiline':False]
['text':' Usage: assert_one_of <expected_list>... <actual>','line_number':407,'multiline':False]
['text':' Asserts that actual is one of the items in expected_list','line_number':408,'multiline':False]
['text':'','line_number':409,'multiline':False]
['text':' Example:','line_number':410,'multiline':False]
['text':'     local expected=( "foo", "bar", "baz" )','line_number':411,'multiline':False]
['text':'     assert_one_of $expected $actual','line_number':412,'multiline':False]
['text':'args[@]} - 1))','line_number':415,'multiline':False]
['text':' Usage: assert_not_one_of <expected_list>... <actual>','line_number':426,'multiline':False]
['text':' Asserts that actual is not one of the items in expected_list','line_number':427,'multiline':False]
['text':'','line_number':428,'multiline':False]
['text':' Example:','line_number':429,'multiline':False]
['text':'     local unexpected=( "foo", "bar", "baz" )','line_number':430,'multiline':False]
['text':'     assert_not_one_of $unexpected $actual','line_number':431,'multiline':False]
['text':'args[@]} - 1))','line_number':434,'multiline':False]
['text':' Usage: assert_equals <expected> <actual>','line_number':447,'multiline':False]
['text':' Asserts [[ expected == actual ]].','line_number':448,'multiline':False]
['text':' Usage: assert_not_equals <unexpected> <actual>','line_number':457,'multiline':False]
['text':' Asserts [[ unexpected != actual ]].','line_number':458,'multiline':False]
['text':' Usage: assert_contains <regexp> <file> [error-message]','line_number':467,'multiline':False]
['text':' Asserts that file matches regexp.  Prints the contents of','line_number':468,'multiline':False]
['text':' file and the specified (optional) error message otherwise, and','line_number':469,'multiline':False]
['text':' returns non-zero.','line_number':470,'multiline':False]
['text':' Usage: assert_not_contains <regexp> <file> [error-message]','line_number':482,'multiline':False]
['text':' Asserts that file does not match regexp.  Prints the contents of','line_number':483,'multiline':False]
['text':' file and the specified (optional) error message otherwise, and','line_number':484,'multiline':False]
['text':' returns non-zero.','line_number':485,'multiline':False]
['text':' Updates the global variables TESTS if','line_number':522,'multiline':False]
['text':' sharding is enabled, i.e. ($TEST_TOTAL_SHARDS > 0).','line_number':523,'multiline':False]
['text':' Usage: __test_terminated <signal-number>','line_number':541,'multiline':False]
['text':' Handler that is called when the test terminated unexpectedly','line_number':542,'multiline':False]
['text':' Usage: __test_terminated_err','line_number':552,'multiline':False]
['text':' Handler that is called when the test terminated unexpectedly due to "errexit".','line_number':553,'multiline':False]
['text':' When a subshell exits due to signal ERR, its parent shell also exits,','line_number':555,'multiline':False]
['text':' thus the signal handler is called recursively and we print out the','line_number':556,'multiline':False]
['text':' error message and stack trace multiple times. We're only interested','line_number':557,'multiline':False]
['text':' in the first one though, as it contains the most information, so ignore','line_number':558,'multiline':False]
['text':' all following.','line_number':559,'multiline':False]
['text':' If $TEST_name is still empty, the test suite failed before we even started','line_number':571,'multiline':False]
['text':' to run tests, so we shouldn't call tear_down.','line_number':572,'multiline':False]
['text':' Usage: __trap_with_arg <handler> <signals ...>','line_number':579,'multiline':False]
['text':' Helper to install a trap handler for several signals preserving the signal','line_number':580,'multiline':False]
['text':' number, so that the signal number is available to the trap handler.','line_number':581,'multiline':False]
['text':' Usage: <node> <block>','line_number':589,'multiline':False]
['text':' Adds the block to the given node in the report file. Quotes in the in','line_number':590,'multiline':False]
['text':' arguments need to be escaped.','line_number':591,'multiline':False]
['text':' replace match on node with block and match','line_number':600,'multiline':False]
['text':' replacement expression only needs escaping for quotes','line_number':601,'multiline':False]
['text':' Usage: <total> <passed>','line_number':614,'multiline':False]
['text':' Adds the test summaries to the xml nodes.','line_number':615,'multiline':False]
['text':' Update the xml output with the suite name and total number of','line_number':622,'multiline':False]
['text':' passed/failed tests.','line_number':623,'multiline':False]
['text':' Multi-platform timestamp function','line_number':635,'multiline':False]
['text':' macOS and BSDs do not have %N, so Python is the best we can do.','line_number':643,'multiline':False]
['text':' LC_ALL=C works around python 3.8 and 3.9 crash on macOS when the','line_number':644,'multiline':False]
['text':' filesystem encoding is unspecified (e.g. when LANG=en_US).','line_number':645,'multiline':False]
['text':' Usage: run_tests <suite-comment>','line_number':659,'multiline':False]
['text':' Must be called from the end of the user's test suite.','line_number':660,'multiline':False]
['text':' Calls exit with zero on success, non-zero otherwise.','line_number':661,'multiline':False]
['text':' The name of the suite should be the script being run, which','line_number':664,'multiline':False]
['text':' will be the filename with the ".sh" extension removed.','line_number':665,'multiline':False]
['text':' If the user didn't specify an explicit list of tests (e.g. a','line_number':679,'multiline':False]
['text':' working set), use them all.','line_number':680,'multiline':False]
['text':'TESTS[@]} == 0 )); then','line_number':681,'multiline':False]
['text':' Even if there aren't any tests, this needs to succeed.','line_number':682,'multiline':False]
['text':' Use ${array[@]+"${array[@]}"} idiom to avoid errors when running with','line_number':688,'multiline':False]
['text':' Bash version <= 4.4 with `nounset` when `all_tests` is empty (','line_number':689,'multiline':False]
['text':' https://github.com/bminor/bash/blob/a0c0a00fc419b7bc08202a79134fcd5bc0427071/CHANGES#L62-L63).','line_number':690,'multiline':False]
['text':' We purposely want to glob match.','line_number':696,'multiline':False]
['text':' shellcheck disable=SC2053','line_number':697,'multiline':False]
['text':' Reset TESTS in the common case where it contains a single empty string.','line_number':713,'multiline':False]
['text':'TESTS[@]}','line_number':717,'multiline':False]
['text':' Reset the log.','line_number':723,'multiline':False]
['text':' Save exit handlers eventually set.','line_number':736,'multiline':False]
['text':' Run test in a subshell.','line_number':740,'multiline':False]
['text':' Remember -o pipefail value and disable it for the subshell result','line_number':744,'multiline':False]
['text':' collection.','line_number':745,'multiline':False]
['text':' if errexit is enabled, make sure we run cleanup and collect the log.','line_number':754,'multiline':False]
['text':' Note that tee will prevent the control flow continuing if the test','line_number':769,'multiline':False]
['text':' spawned any processes which are still running and have not closed','line_number':770,'multiline':False]
['text':' their stdout.','line_number':771,'multiline':False]
['text':' Ensure that an end time is recorded in case the test subshell','line_number':777,'multiline':False]
['text':' terminated prematurely.','line_number':778,'multiline':False]
['text':' Calculate run time for the testcase.','line_number':782,'multiline':False]
['text':' Eventually restore exit handlers.','line_number':789,'multiline':False]
['text':' Bad test explicitly specified in $TESTS.','line_number':794,'multiline':False]
['text':' end marker in CDATA cannot be escaped, we need to split the CDATA sections','line_number':816,'multiline':False]
['text':' Replacing '&' with '&amp;', '<' with '&lt;', '>' with '&gt;', and '"' with '&quot;'','line_number':819,'multiline':False]
