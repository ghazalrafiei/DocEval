['text':' Copyright 2016 The Bazel Authors. All rights reserved.','line_number':1,'multiline':False]
['text':'','line_number':2,'multiline':False]
['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':3,'multiline':False]
['text':' you may not use this file except in compliance with the License.','line_number':4,'multiline':False]
['text':' You may obtain a copy of the License at','line_number':5,'multiline':False]
['text':'','line_number':6,'multiline':False]
['text':'    http://www.apache.org/licenses/LICENSE-2.0','line_number':7,'multiline':False]
['text':'','line_number':8,'multiline':False]
['text':' Unless required by applicable law or agreed to in writing, software','line_number':9,'multiline':False]
['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':10,'multiline':False]
['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':11,'multiline':False]
['text':' See the License for the specific language governing permissions and','line_number':12,'multiline':False]
['text':' limitations under the License.','line_number':13,'multiline':False]
['text':' Note: gmock uses different regex syntax on different platforms. MatchesRegex','line_number':30,'multiline':False]
['text':' is still useful since the '.' wildcard can help match formatted log lines','line_number':31,'multiline':False]
['text':' like `[INFO 11:22:33.444 filename:134] message`','line_number':32,'multiline':False]
['text':' but should not be used for more fine grained testing.','line_number':33,'multiline':False]
['text':' Set the value of $TMP first, because CaptureStderr retrieves a temp','line_number':40,'multiline':False]
['text':' directory path and on Windows, the corresponding function (GetTempPathA)','line_number':41,'multiline':False]
['text':' reads $TMP.','line_number':42,'multiline':False]
['text':' Tests for when no log handler is set.','line_number':56,'multiline':False]
['text':' Log something.','line_number':62,'multiline':False]
['text':' Check that stderr does not receive the message.','line_number':66,'multiline':False]
['text':' Log something.','line_number':75,'multiline':False]
['text':' Check that stderr receives the message.','line_number':79,'multiline':False]
['text':' Log something.','line_number':88,'multiline':False]
['text':' Check that stderr receives the message.','line_number':92,'multiline':False]
['text':' Log something.','line_number':101,'multiline':False]
['text':' Check that stderr receives the message.','line_number':105,'multiline':False]
['text':' Tests for the BazelLogHandler, with no call to SetLoggingOutputStream.','line_number':110,'multiline':False]
['text':' Set up logging and be prepared to capture stderr at destruction.','line_number':113,'multiline':False]
['text':' Log something.','line_number':119,'multiline':False]
['text':' Check that stderr isn't getting anything yet.','line_number':123,'multiline':False]
['text':' Destruct the log handler and get the stderr remains.','line_number':128,'multiline':False]
['text':' Tests for the BazelLogHandler's buffer after SetLoggingOutputStream(nullptr).','line_number':134,'multiline':False]
['text':' Set up logging and be prepared to capture stderr at destruction.','line_number':137,'multiline':False]
['text':' Log something.','line_number':143,'multiline':False]
['text':' Destruct the log handler and check if stderr got anything.','line_number':148,'multiline':False]
['text':' Set up logging and be prepared to capture stderr at destruction.','line_number':155,'multiline':False]
['text':' Set up logging and be prepared to capture stderr at destruction.','line_number':170,'multiline':False]
['text':' Set up logging and be prepared to capture stderr at destruction.','line_number':185,'multiline':False]
['text':' Set up logging and be prepared to capture stderr at destruction.','line_number':200,'multiline':False]
['text':' Set up logging and be prepared to capture stderr at destruction.','line_number':216,'multiline':False]
['text':' Log something before telling the loghandler where to send it.','line_number':222,'multiline':False]
['text':' Ask that the debug logs not be kept.','line_number':226,'multiline':False]
['text':' Set a null log handler, which causes the BazelLogHandler to be destructed.','line_number':229,'multiline':False]
['text':' This prompts its logs to be flushed, so we can capture them.','line_number':230,'multiline':False]
['text':' Set up logging and be prepared to capture stderr at destruction.','line_number':238,'multiline':False]
['text':' Log something before telling the loghandler where to send it.','line_number':244,'multiline':False]
['text':' Ask that the debug logs not be kept.','line_number':250,'multiline':False]
['text':' Set a null log handler, which causes the BazelLogHandler to be destructed.','line_number':253,'multiline':False]
['text':' This prompts its logs to be flushed, so we can capture them.','line_number':254,'multiline':False]
['text':' Tests for the BazelLogHandler & SetLoggingOutputStream','line_number':260,'multiline':False]
['text':' Set up logging and be prepared to capture stderr at destruction.','line_number':263,'multiline':False]
['text':' Ask that the logs get output to a string buffer (keep a ptr to it so we can','line_number':269,'multiline':False]
['text':' check its contents)','line_number':270,'multiline':False]
['text':' Check that output went to the buffer.','line_number':278,'multiline':False]
['text':' Check that the output never went to stderr.','line_number':282,'multiline':False]
['text':' Set up logging and be prepared to capture stderr at destruction.','line_number':288,'multiline':False]
['text':' Check that stderr isn't getting anything.','line_number':298,'multiline':False]
['text':' Ask that the logs get output to a string buffer (keep a ptr to it so we can','line_number':303,'multiline':False]
['text':' check its contents)','line_number':304,'multiline':False]
['text':' Check that the buffered logs were sent.','line_number':309,'multiline':False]
['text':' Check that the output did not go to stderr.','line_number':315,'multiline':False]
['text':' Set up logging and be prepared to capture stderr at destruction.','line_number':321,'multiline':False]
['text':' Ask that the logs get output to a string buffer (keep a ptr to it so we can','line_number':327,'multiline':False]
['text':' check its contents)','line_number':328,'multiline':False]
['text':' Check that output went to the buffer.','line_number':336,'multiline':False]
['text':' Check that the output never went to stderr.','line_number':340,'multiline':False]
['text':' Set up logging and be prepared to capture stderr at destruction.','line_number':346,'multiline':False]
['text':' Ask that the logs get output to a string buffer (keep a ptr to it so we can','line_number':352,'multiline':False]
['text':' check its contents)','line_number':353,'multiline':False]
['text':' Check that output went to the buffer.','line_number':361,'multiline':False]
['text':' Check that the output never went to stderr.','line_number':365,'multiline':False]
['text':' Set up logging and be prepared to capture stderr at destruction.','line_number':371,'multiline':False]
['text':' Deliberately try to log to an impossible location, check that we error out.','line_number':377,'multiline':False]
['text':' Set a null log handler, which causes the BazelLogHandler to be destructed.','line_number':382,'multiline':False]
['text':' This prompts its logs to be flushed, so we can capture them..','line_number':383,'multiline':False]
['text':' Tests for the BazelLogHandler & SetLoggingOutputStreamToStderr','line_number':390,'multiline':False]
['text':' Set up logging and be prepared to capture stderr at destruction.','line_number':393,'multiline':False]
['text':' Ask that the logs get output to stderr','line_number':399,'multiline':False]
['text':' Log something.','line_number':402,'multiline':False]
['text':' Set a null log handler, which causes the BazelLogHandler to be destructed.','line_number':406,'multiline':False]
['text':' This prompts its logs to be flushed, so we can capture them.','line_number':407,'multiline':False]
['text':' Set up logging and be prepared to capture stderr at destruction.','line_number':414,'multiline':False]
['text':' Log something before telling the loghandler where to send it.','line_number':420,'multiline':False]
['text':' Ask that the logs get output to stderr','line_number':424,'multiline':False]
['text':' Set a null log handler, which causes the BazelLogHandler to be destructed.','line_number':427,'multiline':False]
['text':' This prompts its logs to be flushed, so we can capture them.','line_number':428,'multiline':False]
['text':' We use the LoggingDeathTest test case to make sure that the death tests are','line_number':434,'multiline':False]
['text':' run in a single threaded environment, where it is safe to fork. These tests','line_number':435,'multiline':False]
['text':' are run before the other tests, which can be run in parallel.','line_number':436,'multiline':False]
['text':' When no handler is specified, we still expect fatal messages to get','line_number':441,'multiline':False]
['text':' printed to stderr.','line_number':442,'multiline':False]
['text':' Ask that the logs get output to a file (the string buffer setup used','line_number':541,'multiline':False]
['text':' in the non-death tests doesn't work here.)','line_number':542,'multiline':False]
['text':' Check that the error is also in the custom stream.','line_number':550,'multiline':False]
['text':' Unlike in earlier tests, this string is read from a file, and since Windows','line_number':553,'multiline':False]
['text':' uses the newline '\r\n', compared to the linux \n, we prefer to keep the','line_number':554,'multiline':False]
['text':' test simple and not test the end of the line explicitly.','line_number':555,'multiline':False]
['text':' GTEST_HAS_DEATH_TEST','line_number':560,'multiline':False]
['text':' namespace blaze_util','line_number':561,'multiline':False]
