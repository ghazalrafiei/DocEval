['text':' Copyright 2010 The Bazel Authors. All Rights Reserved.','line_number':1,'multiline':False]
['text':'','line_number':2,'multiline':False]
['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':3,'multiline':False]
['text':' you may not use this file except in compliance with the License.','line_number':4,'multiline':False]
['text':' You may obtain a copy of the License at','line_number':5,'multiline':False]
['text':'','line_number':6,'multiline':False]
['text':'    http://www.apache.org/licenses/LICENSE-2.0','line_number':7,'multiline':False]
['text':'','line_number':8,'multiline':False]
['text':' Unless required by applicable law or agreed to in writing, software','line_number':9,'multiline':False]
['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':10,'multiline':False]
['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':11,'multiline':False]
['text':' See the License for the specific language governing permissions and','line_number':12,'multiline':False]
['text':' limitations under the License.','line_number':13,'multiline':False]
['text':'*
 * Main entry point for running JUnit4 tests.<p>
 ','line_number':43,'multiline':True]
['text':'*
   * Creates a runner.
   ','line_number':58,'multiline':True]
['text':'*
   * Runs the JUnit4 test.
   *
   * @return Result of running the test
   ','line_number':79,'multiline':True]
['text':' Sharding','line_number':92,'multiline':False]
['text':' Support for "premature exit files": Tests may write this to communicate','line_number':125,'multiline':False]
['text':' to the runner in case of premature exit.','line_number':126,'multiline':False]
['text':' Overwrite file content.','line_number':135,'multiline':False]
['text':' Just print the stack trace, to avoid masking a real test failure.','line_number':149,'multiline':False]
['text':' VisibleForTesting','line_number':155,'multiline':False]
['text':'*
   * Apply command-line and sharding filters, if appropriate.<p>
   *
   * Note that this is carefully written to avoid running into potential
   * problems with the way runners implement filtering. The JavaDoc for
   * {@link org.junit.runner.manipulation.Filterable} states that tests that
   * don't match the filter should be removed, which implies if you apply two
   * filters, you will always get an intersection of the two. Unfortunately, the
   * filtering implementation of {@link org.junit.runners.ParentRunner} does not
   * do this, and instead uses a "last applied filter wins" strategy.<p>
   *
   * We work around potential problems by ensuring that if we apply a second
   * filter, the filter is more restrictive than the first. We also assume that
   * if filtering fails, the request will have a runner that is a
   * {@link ErrorReportingRunner}. Luckily, we can cover this with tests to make
   * sure we don't break if JUnit changes in the future.
   *
   * @param request Request to filter
   * @param shardingFilter Sharding filter to use; {@link Filter#ALL} to not do sharding
   * @param testIncludeFilterRegexp String denoting a regular expression with which
   *     to filter tests.  Only test descriptions that match this regular
   *     expression will be run.  If {@code null}, tests will not be filtered.
   * @param testExcludeFilterRegexp String denoting a regular expression with which
   *     to filter tests.  Only test descriptions that do not match this regular
   *     expression will be run.  If {@code null}, tests will not be filtered.
   * @return Filtered request (may be a request that delegates to
   *         {@link ErrorReportingRunner}
   ','line_number':167,'multiline':True]
['text':' Allow the user to specify a filter on the command line','line_number':197,'multiline':False]
['text':'
       * If you filter a sharded test to run one test, we don't want all the
       * shards but one to fail.
       ','line_number':216,'multiline':True]
['text':' Sharding','line_number':223,'multiline':False]
['text':' set field after call to setSecurityManager() in case that call fails','line_number':258,'multiline':False]
['text':'*
   * A simple initializer which can be used to provide additional initialization logic in custom
   * runners.
   *
   * <p>Initializers will be run in unspecified order. If an exception is thrown it will not be
   * deemed recoverable and will cause the runner to error-out.
   ','line_number':280,'multiline':True]
['text':'* RunListener that requests test execution to stop upon first failure. ','line_number':291,'multiline':True]
