['text':' Copyright 2016 The Bazel Authors. All Rights Reserved.','line_number':1,'multiline':False]
['text':'','line_number':2,'multiline':False]
['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':3,'multiline':False]
['text':' you may not use this file except in compliance with the License.','line_number':4,'multiline':False]
['text':' You may obtain a copy of the License at','line_number':5,'multiline':False]
['text':'','line_number':6,'multiline':False]
['text':'    http://www.apache.org/licenses/LICENSE-2.0','line_number':7,'multiline':False]
['text':'','line_number':8,'multiline':False]
['text':' Unless required by applicable law or agreed to in writing, software','line_number':9,'multiline':False]
['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':10,'multiline':False]
['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':11,'multiline':False]
['text':' See the License for the specific language governing permissions and','line_number':12,'multiline':False]
['text':' limitations under the License.','line_number':13,'multiline':False]
['text':'*
 * Runner class used to generate code coverage report when using Jacoco offline instrumentation.
 *
 * <p>The complete list of features available for Jacoco offline instrumentation:
 * http://www.eclemma.org/jacoco/trunk/doc/offline.html
 *
 * <p>The structure is roughly following the canonical Jacoco example:
 * http://www.eclemma.org/jacoco/trunk/doc/examples/java/ReportGenerator.java
 *
 * <p>The following environment variables are expected:
 *
 * <ul>
 *   <li>JAVA_COVERAGE_FILE - specifies final location of the generated lcov file.
 *   <li>JACOCO_METADATA_JAR - specifies jar containing uninstrumented classes to be analyzed.
 * </ul>
 ','line_number':64,'multiline':True]
['text':'*
   * Creates a new coverage runner extracting the classes jars from a wrapper file. Uses
   * javaRunfilesRoot to compute the absolute path of the jars inside the wrapper file.
   ','line_number':88,'multiline':True]
['text':' Read the jacoco.exec file. Multiple data files could be merged at this point','line_number':120,'multiline':False]
['text':' Run the structure analyzer on a single class folder or jar file to build up the coverage','line_number':124,'multiline':False]
['text':' model. Typically you would create a bundle for each class folder and each jar you want in','line_number':125,'multiline':False]
['text':' your report. If you have more than one bundle you may need to add a grouping node to the','line_number':126,'multiline':False]
['text':' report. The lcov formatter doesn't seem to care, and we're only using one bundle anyway.','line_number':127,'multiline':False]
['text':' Initialize the report with all of the execution and session information. At this point the','line_number':143,'multiline':False]
['text':' report doesn't know about the structure of the report being created.','line_number':144,'multiline':False]
['text':' Populate the report structure with the bundle coverage information.','line_number':149,'multiline':False]
['text':' Call visitGroup if you need groups in your report.','line_number':150,'multiline':False]
['text':' Note the API requires a sourceFileLocator because the HTML and XML formatters display a','line_number':152,'multiline':False]
['text':' page of code annotated with coverage information. Having the source files is not actually','line_number':153,'multiline':False]
['text':' needed for generating the lcov report.','line_number':154,'multiline':False]
['text':' Signal end of structure information to allow report to write all information out','line_number':170,'multiline':False]
['text':' TODO(bazel-team): Find out where the name of the bundle can pop out in the report.','line_number':190,'multiline':False]
['text':' Additional pass to process the branch details of the classes','line_number':194,'multiline':False]
['text':'*
   * Analyzes all uninstrumented class files found in the given jar.
   *
   * <p>The uninstrumented classes are named using the .class.uninstrumented suffix.
   ','line_number':215,'multiline':True]
['text':'*
   * Creates a {@link Set} containing the paths of the covered Java files.
   *
   * <p>The paths are retrieved from a txt file that is found inside each jar containing
   * uninstrumented classes. Each line of the txt file represents a path to be added to the set.
   *
   * <p>This set is needed by {@link JacocoLCOVFormatter} in order to output the correct path for
   * each covered class.
   ','line_number':235,'multiline':True]
['text':'*
   * Adds to the given {@link Set} the paths found in a txt file inside the given jar.
   *
   * <p>If a jar contains uninstrumented classes it will also contain a txt file with the paths of
   * each of these classes, called "-paths-for-coverage.txt". This file expects one path per line
   * specified as either:
   *
   * <ul>
   *   <li>A single path (e.g. /dir/com/example/Foo.java).
   *   <li>A mapping between source and class paths delimited with by /// (e.g.
   *       /dir/Foo.java////com/example/Foo.java).
   * </ul>
   ','line_number':257,'multiline':True]
['text':' If we're running inside a deploy jar we have to open the manifest and read the value of','line_number':291,'multiline':False]
['text':' "Coverage-Main-Class", set by bazel.','line_number':292,'multiline':False]
['text':' Note ClassLoader#getResource() will only return the first result, most likely a manifest','line_number':293,'multiline':False]
['text':' from the bootclasspath.','line_number':294,'multiline':False]
['text':' Some test frameworks use dummy Coverage-Main-Class in the deploy jars','line_number':304,'multiline':False]
['text':' which should be ignored by JacocoCoverageRunner.','line_number':305,'multiline':False]
['text':' ignore this class and move on','line_number':310,'multiline':False]
['text':' Check JACOCO_MAIN_CLASS after making sure we're not running inside a deploy jar, otherwise','line_number':316,'multiline':False]
['text':' the deploy jar will be invoked using the wrong main class.','line_number':317,'multiline':False]
['text':' If pathTemplate is null, we're likely executing from a deploy jar and the test framework','line_number':329,'multiline':False]
['text':' did not properly set the environment for coverage reporting. This alone is not a reason for','line_number':330,'multiline':False]
['text':' throwing an exception, we're going to run anyway and write the coverage data to a temporary,','line_number':331,'multiline':False]
['text':' throw-away file.','line_number':332,'multiline':False]
['text':' bazel sets the path template to a file with the .dat extension. lcov_merger matches all','line_number':336,'multiline':False]
['text':' files having '.dat' in their name, so instead of appending we change the extension.','line_number':337,'multiline':False]
['text':'*
   * Returns an immutable list containing all the file paths found in mainFile. It uses the
   * javaRunfilesRoot prefix for every found file to compute its absolute path.
   ','line_number':348,'multiline':True]
['text':' If the classpath was too long then a temporary top-level jar is created containing nothing','line_number':364,'multiline':False]
['text':' but a manifest with','line_number':365,'multiline':False]
['text':' the original classpath. Those are the URLs we are looking for.','line_number':366,'multiline':False]
['text':' java 9 and later','line_number':393,'multiline':False]
['text':' Java 9-15:','line_number':402,'multiline':False]
['text':' jdk.internal.loader.ClassLoaders.AppClassLoader.ucp','line_number':403,'multiline':False]
['text':' Java 16+:','line_number':406,'multiline':False]
['text':' jdk.internal.loader.BuiltinClassLoader.ucp','line_number':407,'multiline':False]
['text':' https://github.com/openjdk/jdk/commit/03a4df0acd103702e52dcd01c3f03fda4d7b04f5#diff-32cc12c0e3172fe5f2da1f65a75fa1cb920c39040d06323c83ad2c4d84e095aaL147','line_number':408,'multiline':False]
['text':' jdk.internal.loader.URLClassPath.path','line_number':414,'multiline':False]
['text':' Special case for when there is only one deploy jar on the classpath.','line_number':443,'multiline':False]
['text':' Collect','line_number':449,'multiline':False]
['text':' - uninstrumented class files for coverage before starting the actual test','line_number':450,'multiline':False]
['text':' - paths considered for coverage','line_number':451,'multiline':False]
['text':' Collecting these in the shutdown hook is too expensive (we only have a 5s budget).','line_number':452,'multiline':False]
['text':' bazel can set JACOCO_METADATA_JAR to either one file (a deploy jar','line_number':484,'multiline':False]
['text':' or a merged jar) or to multiple jars.','line_number':485,'multiline':False]
['text':' Disable Jacoco's default output mechanism, which runs as a shutdown hook. We generate the','line_number':492,'multiline':False]
['text':' report in our own shutdown hook below, and we want to avoid the data race (shutdown hooks are','line_number':493,'multiline':False]
['text':' not guaranteed any particular order). Note that also by default, Jacoco appends coverage','line_number':494,'multiline':False]
['text':' data, which can have surprising results if running tests locally or somehow encountering','line_number':495,'multiline':False]
['text':' the previous .exec file.','line_number':496,'multiline':False]
['text':' We have no use for this sessionId property, but leaving it blank results in a DNS lookup','line_number':499,'multiline':False]
['text':' at runtime. A minor annoyance: the documentation insists the property name is "sessionId",','line_number':500,'multiline':False]
['text':' however on closer inspection of the source code, it turns out to be "sessionid"...','line_number':501,'multiline':False]
['text':' A JVM shutdown hook has a fixed amount of time (OS-dependent) before it is terminated.','line_number':504,'multiline':False]
['text':' For our purpose, it's more than enough to scan through the instrumented jar and match up','line_number':505,'multiline':False]
['text':' the bytecode with the coverage data. It wouldn't be enough for scanning the entire classpath,','line_number':506,'multiline':False]
['text':' or doing something else terribly inefficient.','line_number':507,'multiline':False]
['text':' If the test spawns multiple JVMs, they will race to write to the same files. We','line_number':514,'multiline':False]
['text':' need to generate unique paths for each execution. lcov_merger simply collects','line_number':515,'multiline':False]
['text':' all the .dat files in the current directory anyway, so we don't need to worry','line_number':516,'multiline':False]
['text':' about merging them.','line_number':517,'multiline':False]
['text':' Get a handle on the Jacoco Agent and write out the coverage data. Other options','line_number':521,'multiline':False]
['text':' included talking to the agent via TCP (useful when gathering coverage from','line_number':522,'multiline':False]
['text':' multiple JVMs), or via JMX (the agent's MXBean is called','line_number':523,'multiline':False]
['text':' 'org.jacoco:type=Runtime'). As we're running in the same JVM, these options','line_number':524,'multiline':False]
['text':' seemed overkill, we can just refer to the Jacoco runtime as RT.','line_number':525,'multiline':False]
['text':' See http://www.eclemma.org/jacoco/trunk/doc/agent.html for all the options','line_number':526,'multiline':False]
['text':' available.','line_number':527,'multiline':False]
['text':' We append to the output file, but run report generation only for the coverage','line_number':535,'multiline':False]
['text':' data from this JVM. The output file may contain data from other','line_number':536,'multiline':False]
['text':' subprocesses, etc.','line_number':537,'multiline':False]
['text':' In this case, we didn't execute a single instrumented file, so the agent','line_number':540,'multiline':False]
['text':' isn't live. There's no coverage to report, but it's otherwise a successful','line_number':541,'multiline':False]
['text':' invocation.','line_number':542,'multiline':False]
['text':' If running inside a deploy jar the classpath contains only that deploy jar.','line_number':577,'multiline':False]
['text':' It can happen that multiple deploy jars are on the classpath. In that case we are running','line_number':578,'multiline':False]
['text':' from a regular java binary where all the environment (e.g. JACOCO_MAIN_CLASS) is set','line_number':579,'multiline':False]
['text':' accordingly.','line_number':580,'multiline':False]
['text':' Another option would be to run the tests in a separate JVM, let Jacoco dump out the coverage','line_number':586,'multiline':False]
['text':' data, wait for the subprocess to finish and then generate the lcov report. The only benefit','line_number':587,'multiline':False]
['text':' of doing this is not being constrained by the hard 5s limit of the shutdown hook. Setting up','line_number':588,'multiline':False]
['text':' the subprocess to match all JVM flags, runtime classpath, bootclasspath, etc is doable.','line_number':589,'multiline':False]
['text':' We'd share the same limitation if the system under test uses shutdown hooks internally, as','line_number':590,'multiline':False]
['text':' there's no way to collect coverage data on that code.','line_number':591,'multiline':False]
