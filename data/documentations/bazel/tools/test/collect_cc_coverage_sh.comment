['text':'!/bin/bash','line_number':1,'multiline':False]
['text':' Copyright 2016 The Bazel Authors. All rights reserved.','line_number':2,'multiline':False]
['text':'','line_number':3,'multiline':False]
['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':4,'multiline':False]
['text':' you may not use this file except in compliance with the License.','line_number':5,'multiline':False]
['text':' You may obtain a copy of the License at','line_number':6,'multiline':False]
['text':'','line_number':7,'multiline':False]
['text':'    http://www.apache.org/licenses/LICENSE-2.0','line_number':8,'multiline':False]
['text':'','line_number':9,'multiline':False]
['text':' Unless required by applicable law or agreed to in writing, software','line_number':10,'multiline':False]
['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':11,'multiline':False]
['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':12,'multiline':False]
['text':' See the License for the specific language governing permissions and','line_number':13,'multiline':False]
['text':' limitations under the License.','line_number':14,'multiline':False]
['text':' This script collects code coverage data for C++ sources, after the tests','line_number':16,'multiline':False]
['text':' were executed.','line_number':17,'multiline':False]
['text':'','line_number':18,'multiline':False]
['text':' Bazel C++ code coverage collection support is poor and limited. There is','line_number':19,'multiline':False]
['text':' an ongoing effort to improve this (tracking issue #1118).','line_number':20,'multiline':False]
['text':'','line_number':21,'multiline':False]
['text':' Bazel uses the lcov tool for gathering coverage data. There is also','line_number':22,'multiline':False]
['text':' an experimental support for clang llvm coverage, which uses the .profraw','line_number':23,'multiline':False]
['text':' data files to compute the coverage report.','line_number':24,'multiline':False]
['text':'','line_number':25,'multiline':False]
['text':' This script assumes the following environment variables are set:','line_number':26,'multiline':False]
['text':' - COVERAGE_DIR            Directory containing metadata files needed for','line_number':27,'multiline':False]
['text':'                           coverage collection (e.g. gcda files, profraw).','line_number':28,'multiline':False]
['text':' - COVERAGE_MANIFEST       Location of the instrumented file manifest.','line_number':29,'multiline':False]
['text':' - COVERAGE_GCOV_PATH      Location of gcov. This is set by the TestRunner.','line_number':30,'multiline':False]
['text':' - COVERAGE_GCOV_OPTIONS   Additional options to pass to gcov.','line_number':31,'multiline':False]
['text':' - ROOT                    Location from where the code coverage collection','line_number':32,'multiline':False]
['text':'                           was invoked.','line_number':33,'multiline':False]
['text':' - VERBOSE_COVERAGE        Print debug info from the coverage scripts','line_number':34,'multiline':False]
['text':'','line_number':35,'multiline':False]
['text':' The script looks in $COVERAGE_DIR for the C++ metadata coverage files (either','line_number':36,'multiline':False]
['text':' gcda or profraw) and uses either lcov or gcov to get the coverage data.','line_number':37,'multiline':False]
['text':' The coverage data is placed in $COVERAGE_OUTPUT_FILE.','line_number':38,'multiline':False]
['text':' Checks if clang llvm coverage should be used instead of lcov.','line_number':44,'multiline':False]
['text':' Returns 0 if gcov must be used, 1 otherwise.','line_number':52,'multiline':False]
['text':' Symlink the gcov tool such with a link called gcov. Clang comes with a tool','line_number':59,'multiline':False]
['text':' called llvm-cov, which behaves like gcov if symlinked in this way (otherwise','line_number':60,'multiline':False]
['text':' we would need to invoke it with "llvm-cov gcov").','line_number':61,'multiline':False]
['text':' For more details see https://llvm.org/docs/CommandGuide/llvm-cov.html.','line_number':62,'multiline':False]
['text':' When using a tool from a toolchain COVERAGE_GCOV_PATH will be a relative','line_number':68,'multiline':False]
['text':' path. To make it work on different working directories it's required to','line_number':69,'multiline':False]
['text':' convert the path to an absolute one.','line_number':70,'multiline':False]
['text':' Computes code coverage data using the clang generated metadata found under','line_number':75,'multiline':False]
['text':' $COVERAGE_DIR.','line_number':76,'multiline':False]
['text':' Writes the collected coverage into the given output file.','line_number':77,'multiline':False]
['text':' Generates a code coverage report in gcov intermediate text format by invoking','line_number':105,'multiline':False]
['text':' gcov and using the profile data (.gcda) and notes (.gcno) files.','line_number':106,'multiline':False]
['text':'','line_number':107,'multiline':False]
['text':' The profile data files are expected to be found under $COVERAGE_DIR.','line_number':108,'multiline':False]
['text':' The notes file are expected to be found under $ROOT.','line_number':109,'multiline':False]
['text':'','line_number':110,'multiline':False]
['text':' - output_file     The location of the file where the generated code coverage','line_number':111,'multiline':False]
['text':'                   report is written.','line_number':112,'multiline':False]
['text':' We'll save the standard output of each the gcov command in this log.','line_number':116,'multiline':False]
['text':' Copy .gcno files next to their corresponding .gcda files in $COVERAGE_DIR','line_number':119,'multiline':False]
['text':' because gcov expects them to be in the same directory.','line_number':120,'multiline':False]
['text':' If the gcda file was not found we skip generating coverage from the gcno','line_number':125,'multiline':False]
['text':' file.','line_number':126,'multiline':False]
['text':' gcov expects both gcno and gcda files to be in the same directory.','line_number':128,'multiline':False]
['text':' We overcome this by copying the gcno to $COVERAGE_DIR where the gcda','line_number':129,'multiline':False]
['text':' files are expected to be.','line_number':130,'multiline':False]
['text':' Extract gcov's version: the output of `gcov --version` contains the','line_number':136,'multiline':False]
['text':' version as a set of major-minor-patch numbers, of which we extract','line_number':137,'multiline':False]
['text':' the major version.','line_number':138,'multiline':False]
['text':' gcov --version outputs a line like:','line_number':139,'multiline':False]
['text':'   gcov (Debian 7.3.0-5) 7.3.0','line_number':140,'multiline':False]
['text':' llvm-cov gcov --version outputs a line like:','line_number':141,'multiline':False]
['text':'   LLVM version 9.0.1','line_number':142,'multiline':False]
['text':' Invoke gcov to generate a code coverage report with the flags:','line_number':145,'multiline':False]
['text':' -i              Output gcov file in an intermediate text format.','line_number':146,'multiline':False]
['text':'                 The output is a single .gcov file per .gcda file.','line_number':147,'multiline':False]
['text':'                 No source code is required.','line_number':148,'multiline':False]
['text':' -o directory    The directory containing the .gcno and','line_number':149,'multiline':False]
['text':'                 .gcda data files.','line_number':150,'multiline':False]
['text':' "${gcda"}       The input file name. gcov is looking for data files','line_number':151,'multiline':False]
['text':'                 named after the input filename without its extension.','line_number':152,'multiline':False]
['text':' gcov produces files called <source file name>.gcov in the current','line_number':153,'multiline':False]
['text':' directory. These contain the coverage information of the source file','line_number':154,'multiline':False]
['text':' they correspond to. One .gcov file is produced for each source','line_number':155,'multiline':False]
['text':' (or header) file containing code which was compiled to produce the','line_number':156,'multiline':False]
['text':' .gcda files.','line_number':157,'multiline':False]
['text':' Don't generate branch coverage (-b) because of a gcov issue that','line_number':158,'multiline':False]
['text':' segfaults when both -i and -b are used (see','line_number':159,'multiline':False]
['text':' https://gcc.gnu.org/bugzilla/show_bug.cgi?id=84879).','line_number':160,'multiline':False]
['text':' Don't generate branch coverage (-b) when using gcov 7 or earlier','line_number':162,'multiline':False]
['text':' because of a gcov issue that segfaults when both -i and -b are used','line_number':163,'multiline':False]
['text':' (see https://gcc.gnu.org/bugzilla/show_bug.cgi?id=84879).','line_number':164,'multiline':False]
['text':' Check the type of output: gcov 9 or later outputs compressed JSON','line_number':171,'multiline':False]
['text':' files, but earlier versions of gcov, and all versions of llvm-cov,','line_number':172,'multiline':False]
['text':' do not. These output textual information.','line_number':173,'multiline':False]
['text':' Concatenating JSON documents does not yield a valid document, so they are moved individually','line_number':175,'multiline':False]
['text':' Append all .gcov files in the current directory to the output file.','line_number':178,'multiline':False]
['text':' Delete the .gcov files.','line_number':180,'multiline':False]
['text':' If llvm code coverage is used, we output the raw code coverage report in','line_number':191,'multiline':False]
['text':' the $COVERAGE_OUTPUT_FILE. This report will not be converted to any other','line_number':192,'multiline':False]
['text':' format by LcovMerger.','line_number':193,'multiline':False]
['text':' TODO(#5881): Convert profdata reports to lcov.','line_number':194,'multiline':False]
['text':' When using either gcov or lcov, have an output file specific to the test','line_number':203,'multiline':False]
['text':' and format used. For lcov we generate a ".dat" output file and for gcov','line_number':204,'multiline':False]
['text':' a ".gcov" output file. It is important that these files are generated under','line_number':205,'multiline':False]
['text':' COVERAGE_DIR.','line_number':206,'multiline':False]
['text':' When this script is invoked by tools/test/collect_coverage.sh either of','line_number':207,'multiline':False]
['text':' these two coverage reports will be picked up by LcovMerger and their','line_number':208,'multiline':False]
['text':' content will be converted and/or merged with other reports to an lcov','line_number':209,'multiline':False]
['text':' format, generating the final code coverage report.','line_number':210,'multiline':False]
