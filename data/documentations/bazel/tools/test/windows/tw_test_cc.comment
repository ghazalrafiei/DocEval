['text':' Copyright 2018 The Bazel Authors. All rights reserved.','line_number':1,'multiline':False]
['text':'','line_number':2,'multiline':False]
['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':3,'multiline':False]
['text':' you may not use this file except in compliance with the License.','line_number':4,'multiline':False]
['text':' You may obtain a copy of the License at','line_number':5,'multiline':False]
['text':'','line_number':6,'multiline':False]
['text':'    http://www.apache.org/licenses/LICENSE-2.0','line_number':7,'multiline':False]
['text':'','line_number':8,'multiline':False]
['text':' Unless required by applicable law or agreed to in writing, software','line_number':9,'multiline':False]
['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':10,'multiline':False]
['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':11,'multiline':False]
['text':' See the License for the specific language governing permissions and','line_number':12,'multiline':False]
['text':' limitations under the License.','line_number':13,'multiline':False]
['text':' Tests for the Windows implementation of the test wrapper.','line_number':15,'multiline':False]
['text':' !defined(_WIN32) && !defined(__CYGWIN__)','line_number':33,'multiline':False]
['text':' According to this StackOverflow post [1] `const` modifies what's on its','line_number':107,'multiline':False]
['text':' *left*, and "const char" is equivalent to "char const".','line_number':108,'multiline':False]
['text':' `ZipBuilder::EstimateSize`'s argument type is "char const* const*" meaning a','line_number':109,'multiline':False]
['text':' mutable array (right *) of const pointers (left *) to const data (char).','line_number':110,'multiline':False]
['text':'','line_number':111,'multiline':False]
['text':' [1] https://stackoverflow.com/a/8091846/7778502','line_number':112,'multiline':False]
['text':' Create a directory structure to parse.','line_number':161,'multiline':False]
['text':' Assert traversal of "root" -- should include all files, and also traverse','line_number':173,'multiline':False]
['text':' the junction.','line_number':174,'multiline':False]
['text':' Assert traversal of "foo" -- should include all files, but now with paths','line_number':189,'multiline':False]
['text':' relative to "foo".','line_number':190,'multiline':False]
['text':' Assert traversal limited to the current directory (depth of 0).','line_number':205,'multiline':False]
['text':' Assert traversal limited to depth of 1.','line_number':211,'multiline':False]
['text':' Pretend we already acquired a file list. The files don't have to exist.','line_number':221,'multiline':False]
['text':' Pretend we already acquired a file list. The files don't have to exist.','line_number':252,'multiline':False]
['text':' Assert that the root is allowed to have the `\\?\` prefix, but the zip','line_number':253,'multiline':False]
['text':' entry paths won't have it.','line_number':254,'multiline':False]
['text':' Create a directory structure to archive.','line_number':318,'multiline':False]
['text':' Extract the zip file into memory to verify its contents.','line_number':345,'multiline':False]
['text':' As of 2018-11-08, TestOnly_GetMimeType looks up the MIME type from the','line_number':382,'multiline':False]
['text':' registry under `HKCR\<extension>\Content Type`, e.g.','line_number':383,'multiline':False]
['text':' 'HKCR\.bmp\Content Type`.','line_number':384,'multiline':False]
['text':' Bazel's CI machines run Windows Server 2016 Core, whose registry contains','line_number':385,'multiline':False]
['text':' the Content Type for .ico and .bmp but not for common types such as .txt,','line_number':386,'multiline':False]
['text':' hence the file types we choose to test for.','line_number':387,'multiline':False]
['text':' Pretend we already acquired a file list. The files don't have to exist.','line_number':395,'multiline':False]
['text':' Assert that the root is allowed to have the `\\?\` prefix, but the zip','line_number':396,'multiline':False]
['text':' entry paths won't have it.','line_number':397,'multiline':False]
['text':' Create a directory structure to parse.','line_number':415,'multiline':False]
['text':' closes handle so the Tee thread can exit','line_number':475,'multiline':False]
['text':' page_size ','line_number':481,'multiline':True]
['text':' === Input ===','line_number':499,'multiline':False]
['text':' CDATA end sequence, followed by some arbitrary octet.','line_number':500,'multiline':False]
['text':' CDATA end sequence twice.','line_number':502,'multiline':False]
['text':' CDATA end sequence at the end of the string.','line_number':504,'multiline':False]
['text':' === Expected output ===','line_number':507,'multiline':False]
['text':' === Input ===','line_number':515,'multiline':False]
['text':' Legal single-octets.','line_number':516,'multiline':False]
['text':' Illegal single-octets.','line_number':518,'multiline':False]
['text':' === Expected output ===','line_number':522,'multiline':False]
['text':' Legal single-octets.','line_number':523,'multiline':False]
['text':' Illegal single-octets.','line_number':525,'multiline':False]
['text':' Legal range: [\xc0-\xdf][\x80-\xbf]','line_number':531,'multiline':False]
['text':' Legal double-octet sequences.','line_number':535,'multiline':False]
['text':' Illegal double-octet sequences, first octet is bad, second is good.','line_number':539,'multiline':False]
['text':' each are matched as single bad octets','line_number':540,'multiline':False]
['text':' Illegal double-octet sequences, first octet is good, second is bad.','line_number':542,'multiline':False]
['text':' 0x7F is legal as a single-octet, retained','line_number':543,'multiline':False]
['text':' 0xC0 starts a legal two-octet sequence...','line_number':544,'multiline':False]
['text':' Illegal double-octet sequences, both octets bad.','line_number':545,'multiline':False]
['text':' ...and 0xBF finishes that sequence','line_number':546,'multiline':False]
['text':' === Expected output ===','line_number':549,'multiline':False]
['text':' Legal double-octet sequences.','line_number':551,'multiline':False]
['text':' Illegal double-octet sequences, first octet is bad, second is good.','line_number':555,'multiline':False]
['text':' Illegal double-octet sequences, first octet is good, second is bad.','line_number':558,'multiline':False]
['text':' 0x7F is legal as a single-octet, retained','line_number':559,'multiline':False]
['text':' 0xC0 starts a legal two-octet sequence...','line_number':560,'multiline':False]
['text':' Illegal double-octet sequences, both octets bad.','line_number':561,'multiline':False]
['text':' ...and 0xBF finishes that sequence','line_number':562,'multiline':False]
['text':' === Input ===','line_number':571,'multiline':False]
['text':' === Output ===','line_number':585,'multiline':False]
['text':' The data is "abc" (3 bytes), page size is 6 bytes.','line_number':613,'multiline':False]
['text':' Read position is at "a".','line_number':618,'multiline':False]
['text':' Read position is at "b".','line_number':629,'multiline':False]
['text':' Read position is at "c".','line_number':638,'multiline':False]
['text':' The data is "abcdef" (6 bytes), page size is 6 bytes.','line_number':646,'multiline':False]
['text':' Read position is at "a".','line_number':651,'multiline':False]
['text':' Read position is at "f". No more peeking or moving.','line_number':670,'multiline':False]
['text':' Move near the page boundary.','line_number':680,'multiline':False]
['text':' Read position is at "e". Peek2 and Peek3 will need to read from next page.','line_number':684,'multiline':False]
['text':' Data is 15 bytes, page size is 6 bytes, we'll cross 2 page boundaries.','line_number':704,'multiline':False]
['text':' Move near the first page boundary.','line_number':709,'multiline':False]
['text':' Last read character is "k".','line_number':721,'multiline':False]
['text':' Peek(2) and Peek(3) will need to read from last page.','line_number':722,'multiline':False]
['text':' Move near the end of the last page.','line_number':733,'multiline':False]
['text':' namespace','line_number':743,'multiline':False]
