['text':'!/usr/bin/env bash','line_number':1,'multiline':False]
['text':' Copyright 2015 The Bazel Authors. All rights reserved.','line_number':3,'multiline':False]
['text':'','line_number':4,'multiline':False]
['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':5,'multiline':False]
['text':' you may not use this file except in compliance with the License.','line_number':6,'multiline':False]
['text':' You may obtain a copy of the License at','line_number':7,'multiline':False]
['text':'','line_number':8,'multiline':False]
['text':'    http://www.apache.org/licenses/LICENSE-2.0','line_number':9,'multiline':False]
['text':'','line_number':10,'multiline':False]
['text':' Unless required by applicable law or agreed to in writing, software','line_number':11,'multiline':False]
['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':12,'multiline':False]
['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':13,'multiline':False]
['text':' See the License for the specific language governing permissions and','line_number':14,'multiline':False]
['text':' limitations under the License.','line_number':15,'multiline':False]
['text':' shift stderr to stdout.','line_number':17,'multiline':False]
['text':' Executing the test log will page it.','line_number':20,'multiline':False]
['text':' The original execution root. Usually this script changes directory into the','line_number':28,'multiline':False]
['text':' runfiles directory, so using $PWD is not a reliable way to find the execution','line_number':29,'multiline':False]
['text':' root.','line_number':30,'multiline':False]
['text':' Declare that the executable is running in a `bazel test` environment','line_number':33,'multiline':False]
['text':' This allows test frameworks to enable output to the unprefixed environment variable','line_number':34,'multiline':False]
['text':' For example, if `BAZEL_TEST` and `XML_OUTPUT_FILE` are defined, write JUnit output','line_number':35,'multiline':False]
['text':' Bazel sets some environment vars to relative paths to improve caching and','line_number':38,'multiline':False]
['text':' support remote execution, where the absolute path may not be known to Bazel.','line_number':39,'multiline':False]
['text':' Convert them to absolute paths here before running the actual test.','line_number':40,'multiline':False]
['text':' Set USER to the current user, unless passed by Bazel via --test_env.','line_number':69,'multiline':False]
['text':' The test shard status file is only set for sharded tests.','line_number':74,'multiline':False]
['text':' TODO(ulfjack): Standardize on RUNFILES_DIR and remove the {JAVA,PYTHON}_RUNFILES vars.','line_number':82,'multiline':False]
['text':' Create directories for undeclared outputs and their annotations','line_number':86,'multiline':False]
['text':' Create the test temp directory, which may not exist on the remote host when','line_number':91,'multiline':False]
['text':' doing a remote build.','line_number':92,'multiline':False]
['text':' Unexport environment variables related to undeclared test outputs that are','line_number':95,'multiline':False]
['text':' only supposed to be used in this script.','line_number':96,'multiline':False]
['text':' Tell googletest about Bazel sharding.','line_number':101,'multiline':False]
['text':' TODO(ulfjack): Update Gunit to accept XML_OUTPUT_FILE and drop this env','line_number':109,'multiline':False]
['text':' variable.','line_number':110,'multiline':False]
['text':' If the file path is already fully specified, simply return it.','line_number':117,'multiline':False]
['text':' If the file exists in the $TEST_SRCDIR then just use it.','line_number':120,'multiline':False]
['text':' If a runfiles manifest file exists then use it.','line_number':123,'multiline':False]
['text':' If RUNFILES_MANIFEST_ONLY is set to 1 and the manifest file does exist,','line_number':130,'multiline':False]
['text':' then test programs should use manifest file to find runfiles.','line_number':131,'multiline':False]
['text':' normal commands are run in the exec-root where they have access to','line_number':144,'multiline':False]
['text':' the entire source tree. By chdir'ing to the runfiles root, tests only','line_number':145,'multiline':False]
['text':' have direct access to their declared dependencies.','line_number':146,'multiline':False]
['text':' This header marks where --test_output=streamed will start being printed.','line_number':151,'multiline':False]
['text':' Unused if EXPERIMENTAL_SPLIT_XML_GENERATION is set.','line_number':154,'multiline':False]
['text':' See generate-xml.sh for documentation.','line_number':156,'multiline':False]
['text':' Unused if EXPERIMENTAL_SPLIT_XML_GENERATION is set.','line_number':177,'multiline':False]
['text':' Keep this in sync with generate-xml.sh!','line_number':178,'multiline':False]
['text':' Create a default XML output file if the test runner hasn't generated it','line_number':186,'multiline':False]
['text':' Ensure that test shards have unique names in the xml output.','line_number':200,'multiline':False]
['text':' The path of this command-line is usually relative to the exec-root,','line_number':220,'multiline':False]
['text':' but when using --run_under it can be a "/bin/bash -c" command-line.','line_number':221,'multiline':False]
['text':' If the test is at the top of the tree, we have to add '.' to $PATH,','line_number':223,'multiline':False]
['text':' TODO(jsharpe): Use --test_env=TEST_SHORT_EXEC_PATH=true to activate this code','line_number':239,'multiline':False]
['text':' path to workaround a bug with long executable paths when executing remote','line_number':240,'multiline':False]
['text':' tests on Windows.','line_number':241,'multiline':False]
['text':' Note for the commands below: "ln -s" is equivalent to "cp" on Windows.','line_number':250,'multiline':False]
['text':' Needs to be in the same directory for sh_test. Ignore the error when it','line_number':252,'multiline':False]
['text':' doesn't exist.','line_number':253,'multiline':False]
['text':' Needs to be in the same directory for py_test. Ignore the error when it','line_number':255,'multiline':False]
['text':' doesn't exist.','line_number':256,'multiline':False]
['text':' Needed for all tests.','line_number':258,'multiline':False]
['text':' Helper to kill a process and its entire group.','line_number':263,'multiline':False]
['text':' For consistency with historical bazel behaviour, send signal to all child','line_number':277,'multiline':False]
['text':' processes, not just the first one. We use the process group for this','line_number':278,'multiline':False]
['text':' purpose.','line_number':279,'multiline':False]
['text':' SIGCHLD is expected when a subprocess dies','line_number':288,'multiline':False]
['text':' SIGCHLD is expected when a subprocess dies','line_number':294,'multiline':False]
['text':' We have a challenge here: we want to forward signals to our child processes,','line_number':301,'multiline':False]
['text':' but we also want them to send themselves signals like SIGINT. Catching signals','line_number':302,'multiline':False]
['text':' ourselves requires use of background processes, trap, and wait. But normally','line_number':303,'multiline':False]
['text':' background processes are themselves unable to receive signals like SIGINT,','line_number':304,'multiline':False]
['text':' since those signals are intended for interactive processes - the only way for','line_number':305,'multiline':False]
['text':' them to get SIGINT in bash is for us to run them in the foreground.','line_number':306,'multiline':False]
['text':' To achieve this, we have to use `set -m` to enable Job Control in bash. This','line_number':307,'multiline':False]
['text':' has the effect of putting the child processes and any children of their own','line_number':308,'multiline':False]
['text':' into their own process groups, which are then able to receive SIGINT, etc,','line_number':309,'multiline':False]
['text':' without our shell interfering. Of course, this has the new complication that','line_number':310,'multiline':False]
['text':' anyone trying to SIGKILL *us* by group (as we know bazel's legacy process','line_number':311,'multiline':False]
['text':' wrapper does) will only kill this process and not the children below it. Any','line_number':312,'multiline':False]
['text':' reasonable sandboxing uses at least a process namespace, but we don't have the','line_number':313,'multiline':False]
['text':' luxury of assuming one, so our children could be left behind in that','line_number':314,'multiline':False]
['text':' eventuality. So, what we do is spawn a *second* background process that','line_number':315,'multiline':False]
['text':' watches for us to be killed, and then chain-kills the test's process group.','line_number':316,'multiline':False]
['text':' Aren't processes fun?','line_number':317,'multiline':False]
['text':' Cleanup helper','line_number':336,'multiline':False]
['text':' It would be nice to use `kill -0 $PPID` here, but when whatever called this','line_number':337,'multiline':False]
['text':' is running as a different user (as happens in remote execution) that will','line_number':338,'multiline':False]
['text':' return an error, causing us to prematurely reap a running test.','line_number':339,'multiline':False]
['text':' `ps` is known to be unrunnable in the darwin sandbox-exec environment due','line_number':341,'multiline':False]
['text':' to being a set-uid root program. pgrep exists in most environments, but not','line_number':342,'multiline':False]
['text':' universally. In the event that we find ourselves running in an environment','line_number':343,'multiline':False]
['text':' where *neither* exists, we have no reliable way to check if our parent is','line_number':344,'multiline':False]
['text':' still alive - so simply disable this cleanup routine entirely.','line_number':345,'multiline':False]
['text':' Parent process not found - we've been abandoned! Clean up test processes.','line_number':351,'multiline':False]
['text':' Wait until $childPid fully exits.','line_number':358,'multiline':False]
['text':' We need to wait in a loop because wait is interrupted by any incoming trapped','line_number':359,'multiline':False]
['text':' signal (https://www.gnu.org/software/bash/manual/bash.html#Signals).','line_number':360,'multiline':False]
['text':' Wait one more time to retrieve the exit code.','line_number':364,'multiline':False]
['text':' By this point, we have everything we're willing to wait for. Tidy up our own','line_number':368,'multiline':False]
['text':' processes and move on.','line_number':369,'multiline':False]
['text':' This call to write_xml_output_file does nothing if a a test.xml already','line_number':378,'multiline':False]
['text':' exists, e.g., because we received SIGTERM and the trap handler created it.','line_number':379,'multiline':False]
['text':' Add all of the files from the undeclared outputs directory to the manifest.','line_number':383,'multiline':False]
['text':' Only write the manifest if there are any undeclared outputs.','line_number':386,'multiline':False]
['text':' For each file, write a tab-separated line with name (relative to','line_number':388,'multiline':False]
['text':' TEST_UNDECLARED_OUTPUTS_DIR), size, and mime type to the manifest. e.g.','line_number':389,'multiline':False]
['text':' foo.txt	9	text/plain','line_number':390,'multiline':False]
['text':' stat has different flags for different systems. -c is supported by GNU,','line_number':393,'multiline':False]
['text':' and -f by BSD (and thus OSX). Try both.','line_number':394,'multiline':False]
['text':' Add all of the custom manifest entries to the annotation file.','line_number':407,'multiline':False]
['text':' length-delimited proto files','line_number':416,'multiline':False]
['text':' Zip up undeclared outputs.','line_number':422,'multiline':False]
['text':' Capture the contents of TEST_UNDECLARED_OUTPUTS_DIR prior to creating the output.zip','line_number':425,'multiline':False]
['text':' Use 'rm' instead of 'zip -m' so that we don't follow symlinks when deleting the','line_number':431,'multiline':False]
['text':' contents.','line_number':432,'multiline':False]
['text':' Raise the original signal if the test terminated abnormally.','line_number':437,'multiline':False]
