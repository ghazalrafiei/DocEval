['text':' pylint: disable=g-direct-third-party-import','line_number':1,'multiline':False]
['text':' pylint: disable=g-bad-file-header','line_number':2,'multiline':False]
['text':' Copyright 2015 The Bazel Authors. All rights reserved.','line_number':3,'multiline':False]
['text':'','line_number':4,'multiline':False]
['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':5,'multiline':False]
['text':' you may not use this file except in compliance with the License.','line_number':6,'multiline':False]
['text':' You may obtain a copy of the License at','line_number':7,'multiline':False]
['text':'','line_number':8,'multiline':False]
['text':'    http://www.apache.org/licenses/LICENSE-2.0','line_number':9,'multiline':False]
['text':'','line_number':10,'multiline':False]
['text':' Unless required by applicable law or agreed to in writing, software','line_number':11,'multiline':False]
['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':12,'multiline':False]
['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':13,'multiline':False]
['text':' See the License for the specific language governing permissions and','line_number':14,'multiline':False]
['text':' limitations under the License.','line_number':15,'multiline':False]
['text':' Do not edit this line. Copybara replaces it with PY2 migration helper.','line_number':33,'multiline':False]
['text':' Some devices support ABIs other than those reported by getprop. In this case,','line_number':70,'multiline':False]
['text':' if the most specific ABI is not available in the .apk, we push the more','line_number':71,'multiline':False]
['text':' general ones.','line_number':72,'multiline':False]
['text':' TODO(ahumesky): Because multiple instances of adb are executed in','line_number':143,'multiline':False]
['text':' parallel, these debug logging lines will get interleaved.','line_number':144,'multiline':False]
['text':' adb sometimes requires the user's home directory to access things in','line_number':147,'multiline':False]
['text':' $HOME/.android (e.g. keys to authorize with the device). To avoid any','line_number':148,'multiline':False]
['text':' potential problems with python picking up things in the user's home','line_number':149,'multiline':False]
['text':' directory, HOME is not set in the environment around python and is instead','line_number':150,'multiline':False]
['text':' passed explicitly as a flag.','line_number':151,'multiline':False]
['text':' On Windows, adb requires the SystemRoot environment variable.','line_number':156,'multiline':False]
['text':' This hackery is to account for a change in what communicate() returns','line_number':171,'multiline':False]
['text':' in Python 3.7.  We just deal with it being either string or bytes.','line_number':172,'multiline':False]
['text':' Check these first so that the more specific error gets raised instead of','line_number':183,'multiline':False]
['text':' the more generic AdbError.','line_number':184,'multiline':False]
['text':' The error messages are from adb's transport.c, but something adds','line_number':190,'multiline':False]
['text':' "error: " to the beginning, so take it off so that we don't end up','line_number':191,'multiline':False]
['text':' printing "Error: error: ..."','line_number':192,'multiline':False]
['text':' Subtle stuff here.  We read the file as a blob of bytes, which is bytes','line_number':248,'multiline':False]
['text':' in python3, but want to return it as a str, so we do a no-op decode.','line_number':249,'multiline':False]
['text':' It is up to the caller to re-decode the content if they are reading','line_number':250,'multiline':False]
['text':' a text file that is really UTF-8.','line_number':251,'multiline':False]
['text':' FWIW: Earlier code decoded the content as if it were UTF-8, which is','line_number':252,'multiline':False]
['text':' arguably wrong. This tool sometimes pulls text files and sometimes','line_number':253,'multiline':False]
['text':' binaries. The caller should specify if they want it decoded or not.','line_number':254,'multiline':False]
['text':' adb install could fail with a message on stdout like this:','line_number':273,'multiline':False]
['text':'','line_number':274,'multiline':False]
['text':'   pkg: /data/local/tmp/Gmail_dev_sharded_incremental.apk','line_number':275,'multiline':False]
['text':'   Failure [INSTALL_PARSE_FAILED_INCONSISTENT_CERTIFICATES]','line_number':276,'multiline':False]
['text':'','line_number':277,'multiline':False]
['text':' and yet it will still have a return code of 0. At least for the install','line_number':278,'multiline':False]
['text':' command, it will print "Success" if it succeeded, so check for that in','line_number':279,'multiline':False]
['text':' standard out instead of relying on the return code.','line_number':280,'multiline':False]
['text':' No error checking. If this fails, we assume that the app was not installed','line_number':287,'multiline':False]
['text':' in the first place.','line_number':288,'multiline':False]
['text':' 'am kill' will only kill processes in the background, so we must make sure','line_number':310,'multiline':False]
['text':' our process is in the background first. We accomplish this by bringing up','line_number':311,'multiline':False]
['text':' the app switcher.','line_number':312,'multiline':False]
['text':' Fetch the manifest on the device','line_number':379,'multiline':False]
['text':' If the manifest is not found, maybe a previous installation attempt','line_number':394,'multiline':False]
['text':' was interrupted. Wipe the slate clean. Do this also in case we do a full','line_number':395,'multiline':False]
['text':' installation.','line_number':396,'multiline':False]
['text':' Figure out which dexes to upload: those that are present in the new manifest','line_number':403,'multiline':False]
['text':' but not in the old one and those whose checksum was changed','line_number':404,'multiline':False]
['text':' If we have nothing to do, don't bother removing and rewriting the manifest','line_number':411,'multiline':False]
['text':' Delete the manifest so that we know how to get back to a consistent state','line_number':415,'multiline':False]
['text':' if we are interrupted.','line_number':416,'multiline':False]
['text':' Tuple of (local, remote) files to push to the device.','line_number':419,'multiline':False]
['text':' Sort dexes to be uploaded by the zip file they are in so that we only need','line_number':422,'multiline':False]
['text':' to open each zip only once.','line_number':423,'multiline':False]
['text':' Now gather all the dexes that are not within a .zip file.','line_number':437,'multiline':False]
['text':' Delete the dexes that are not in the new manifest','line_number':447,'multiline':False]
['text':' Upload all the files.','line_number':450,'multiline':False]
['text':' If there is anything in not_done, then some adb call failed and we','line_number':457,'multiline':False]
['text':' can cancel the rest.','line_number':458,'multiline':False]
['text':' If any adb call resulted in an exception, re-raise it.','line_number':463,'multiline':False]
['text':' If no dex upload failed, upload the manifest. If any upload failed, the','line_number':467,'multiline':False]
['text':' exception should have been re-raised above.','line_number':468,'multiline':False]
['text':' Call result() to raise the exception if there was one.','line_number':469,'multiline':False]
['text':' Compute the checksum of the new resources file','line_number':499,'multiline':False]
['text':' Fetch the checksum of the resources file on the device, if it exists','line_number':502,'multiline':False]
['text':' Remove the checksum file on the device so that if the transfer is','line_number':510,'multiline':False]
['text':' interrupted, we know how to get the device back to a consistent state.','line_number':511,'multiline':False]
['text':' Write the new checksum to the device.','line_number':515,'multiline':False]
['text':' If we couldn't fetch the device manifest or if this is a non-incremental','line_number':573,'multiline':False]
['text':' install, wipe the slate clean','line_number':574,'multiline':False]
['text':' From Android 28 onwards, `adb push` creates directories with insufficient','line_number':577,'multiline':False]
['text':' permissions, resulting in errors when pushing files. `adb shell mkdir`','line_number':578,'multiline':False]
['text':' works correctly however, so we create the directory here.','line_number':579,'multiline':False]
['text':' See https://github.com/bazelbuild/examples/issues/77 for more information.','line_number':580,'multiline':False]
['text':' Otherwise, parse the manifest. Note that this branch is also taken if the','line_number':583,'multiline':False]
['text':' manifest is empty.','line_number':584,'multiline':False]
['text':' If there is anything in not_done, then some adb call failed and we','line_number':619,'multiline':False]
['text':' can cancel the rest.','line_number':620,'multiline':False]
['text':' If any adb call resulted in an exception, re-raise it.','line_number':625,'multiline':False]
['text':' The main app is not up to date or not present or something happened','line_number':686,'multiline':False]
['text':' with the on-device manifest. Start from scratch. Notably, we cannot','line_number':687,'multiline':False]
['text':' uninstall a split package, so if the set of packages changes, we also','line_number':688,'multiline':False]
['text':' need to do a full reinstall.','line_number':689,'multiline':False]
['text':' Nothing to do','line_number':699,'multiline':False]
['text':' Delete the device manifest so that if something goes wrong, we do a full','line_number':702,'multiline':False]
['text':' reinstall next time','line_number':703,'multiline':False]
['text':' TODO(ahumesky): UploadDexes waits for all the dexes to be uploaded, and','line_number':777,'multiline':False]
['text':' then UploadResources is called. We could instead enqueue everything','line_number':778,'multiline':False]
['text':' onto the threadpool so that uploading resources happens sooner.','line_number':779,'multiline':False]
['text':' 'verbosity' flag is defined in absl.logging','line_number':822,'multiline':False]
['text':' process any additional flags in --flagfile','line_number':853,'multiline':False]
