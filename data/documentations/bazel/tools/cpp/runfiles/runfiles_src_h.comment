['text':' Copyright 2018 The Bazel Authors. All rights reserved.','line_number':1,'multiline':False]
['text':'','line_number':2,'multiline':False]
['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':3,'multiline':False]
['text':' you may not use this file except in compliance with the License.','line_number':4,'multiline':False]
['text':' You may obtain a copy of the License at','line_number':5,'multiline':False]
['text':'','line_number':6,'multiline':False]
['text':'    http://www.apache.org/licenses/LICENSE-2.0','line_number':7,'multiline':False]
['text':'','line_number':8,'multiline':False]
['text':' Unless required by applicable law or agreed to in writing, software','line_number':9,'multiline':False]
['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':10,'multiline':False]
['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':11,'multiline':False]
['text':' See the License for the specific language governing permissions and','line_number':12,'multiline':False]
['text':' limitations under the License.','line_number':13,'multiline':False]
['text':' Runfiles lookup library for Bazel-built C++ binaries and tests.','line_number':15,'multiline':False]
['text':'','line_number':16,'multiline':False]
['text':' USAGE:','line_number':17,'multiline':False]
['text':' 1.  Depend on this runfiles library from your build rule:','line_number':18,'multiline':False]
['text':'','line_number':19,'multiline':False]
['text':'       cc_binary(','line_number':20,'multiline':False]
['text':'           name = "my_binary",','line_number':21,'multiline':False]
['text':'           ...','line_number':22,'multiline':False]
['text':'           deps = ["@bazel_tools//tools/cpp/runfiles"],','line_number':23,'multiline':False]
['text':'       )','line_number':24,'multiline':False]
['text':'','line_number':25,'multiline':False]
['text':' 2.  Include the runfiles library.','line_number':26,'multiline':False]
['text':'','line_number':27,'multiline':False]
['text':'       #include "tools/cpp/runfiles/runfiles.h"','line_number':28,'multiline':False]
['text':'','line_number':29,'multiline':False]
['text':'       using bazel::tools::cpp::runfiles::Runfiles;','line_number':30,'multiline':False]
['text':'','line_number':31,'multiline':False]
['text':' 3.  Create a Runfiles object and use rlocation to look up runfile paths:','line_number':32,'multiline':False]
['text':'','line_number':33,'multiline':False]
['text':'       int main(int argc, char** argv) {','line_number':34,'multiline':False]
['text':'         std::string error;','line_number':35,'multiline':False]
['text':'         std::unique_ptr<Runfiles> runfiles(','line_number':36,'multiline':False]
['text':'             Runfiles::Create(argv[0], BAZEL_CURRENT_REPOSITORY, &error));','line_number':37,'multiline':False]
['text':'','line_number':38,'multiline':False]
['text':'         // Important:','line_number':39,'multiline':False]
['text':'         //   If this is a test, use','line_number':40,'multiline':False]
['text':'         //   Runfiles::CreateForTest(BAZEL_CURRENT_REPOSITORY, &error).','line_number':41,'multiline':False]
['text':'','line_number':42,'multiline':False]
['text':'         if (runfiles == nullptr) {','line_number':43,'multiline':False]
['text':'           ...  // error handling','line_number':44,'multiline':False]
['text':'         }','line_number':45,'multiline':False]
['text':'         std::string path =','line_number':46,'multiline':False]
['text':'             runfiles->Rlocation("my_workspace/path/to/my/data.txt");','line_number':47,'multiline':False]
['text':'         ...','line_number':48,'multiline':False]
['text':'','line_number':49,'multiline':False]
['text':'      The code above creates a Runfiles object and retrieves a runfile path.','line_number':50,'multiline':False]
['text':'      The BAZEL_CURRENT_REPOSITORY macro is available in every target that','line_number':51,'multiline':False]
['text':'      depends on the runfiles library.','line_number':52,'multiline':False]
['text':'','line_number':53,'multiline':False]
['text':'      The Runfiles::Create function uses the runfiles manifest and the','line_number':54,'multiline':False]
['text':'      runfiles directory from the RUNFILES_MANIFEST_FILE and RUNFILES_DIR','line_number':55,'multiline':False]
['text':'      environment variables. If not present, the function looks for the','line_number':56,'multiline':False]
['text':'      manifest and directory near argv[0], the path of the main program.','line_number':57,'multiline':False]
['text':'','line_number':58,'multiline':False]
['text':' To start child processes that also need runfiles, you need to set the right','line_number':59,'multiline':False]
['text':' environment variables for them:','line_number':60,'multiline':False]
['text':'','line_number':61,'multiline':False]
['text':'   std::unique_ptr<Runfiles> runfiles(Runfiles::Create(','line_number':62,'multiline':False]
['text':'     argv[0], BAZEL_CURRENT_REPOSITORY, &error));','line_number':63,'multiline':False]
['text':'','line_number':64,'multiline':False]
['text':'   std::string path = runfiles->Rlocation("path/to/binary"));','line_number':65,'multiline':False]
['text':'   if (!path.empty()) {','line_number':66,'multiline':False]
['text':'     ... // create "args" argument vector for execv','line_number':67,'multiline':False]
['text':'     const auto envvars = runfiles->EnvVars();','line_number':68,'multiline':False]
['text':'     pid_t child = fork();','line_number':69,'multiline':False]
['text':'     if (child) {','line_number':70,'multiline':False]
['text':'       int status;','line_number':71,'multiline':False]
['text':'       waitpid(child, &status, 0);','line_number':72,'multiline':False]
['text':'     } else {','line_number':73,'multiline':False]
['text':'       for (const auto i : envvars) {','line_number':74,'multiline':False]
['text':'         setenv(i.first.c_str(), i.second.c_str(), 1);','line_number':75,'multiline':False]
['text':'       }','line_number':76,'multiline':False]
['text':'       execv(args[0], args);','line_number':77,'multiline':False]
['text':'     }','line_number':78,'multiline':False]
['text':' Returns a new `Runfiles` instance.','line_number':98,'multiline':False]
['text':'','line_number':99,'multiline':False]
['text':' Use this from within `cc_test` rules.','line_number':100,'multiline':False]
['text':'','line_number':101,'multiline':False]
['text':' Returns nullptr on error. If `error` is provided, the method prints an','line_number':102,'multiline':False]
['text':' error message into it.','line_number':103,'multiline':False]
['text':'','line_number':104,'multiline':False]
['text':' This method looks at the RUNFILES_MANIFEST_FILE and TEST_SRCDIR','line_number':105,'multiline':False]
['text':' environment variables.','line_number':106,'multiline':False]
['text':'','line_number':107,'multiline':False]
['text':' If source_repository is not provided, it defaults to the main repository','line_number':108,'multiline':False]
['text':' (also known as the workspace).','line_number':109,'multiline':False]
['text':' Returns a new `Runfiles` instance.','line_number':114,'multiline':False]
['text':'','line_number':115,'multiline':False]
['text':' Use this from `cc_binary` or `cc_library` rules. You may pass an empty','line_number':116,'multiline':False]
['text':' `argv0` if `argv[0]` from the `main` method is unknown.','line_number':117,'multiline':False]
['text':'','line_number':118,'multiline':False]
['text':' Returns nullptr on error. If `error` is provided, the method prints an','line_number':119,'multiline':False]
['text':' error message into it.','line_number':120,'multiline':False]
['text':'','line_number':121,'multiline':False]
['text':' This method looks at the RUNFILES_MANIFEST_FILE and RUNFILES_DIR','line_number':122,'multiline':False]
['text':' environment variables. If either is empty, the method looks for the','line_number':123,'multiline':False]
['text':' manifest or directory using the other environment variable, or using argv0','line_number':124,'multiline':False]
['text':' (unless it's empty).','line_number':125,'multiline':False]
['text':'','line_number':126,'multiline':False]
['text':' If source_repository is not provided, it defaults to the main repository','line_number':127,'multiline':False]
['text':' (also known as the workspace).','line_number':128,'multiline':False]
['text':' Returns a new `Runfiles` instance.','line_number':135,'multiline':False]
['text':'','line_number':136,'multiline':False]
['text':' Use this from any `cc_*` rule if you want to manually specify the paths to','line_number':137,'multiline':False]
['text':' the runfiles manifest and/or runfiles directory. You may pass an empty','line_number':138,'multiline':False]
['text':' `argv0` if `argv[0]` from the `main` method is unknown.','line_number':139,'multiline':False]
['text':'','line_number':140,'multiline':False]
['text':' This method is the same as `Create(argv0, error)`, except it uses','line_number':141,'multiline':False]
['text':' `runfiles_manifest_file` and `runfiles_dir` as the corresponding','line_number':142,'multiline':False]
['text':' environment variable values, instead of looking up the actual environment','line_number':143,'multiline':False]
['text':' variables.','line_number':144,'multiline':False]
['text':' Returns the runtime path of a runfile.','line_number':155,'multiline':False]
['text':'','line_number':156,'multiline':False]
['text':' Runfiles are data-dependencies of Bazel-built binaries and tests.','line_number':157,'multiline':False]
['text':'','line_number':158,'multiline':False]
['text':' The returned path may not exist. The caller should verify the path's','line_number':159,'multiline':False]
['text':' existence.','line_number':160,'multiline':False]
['text':'','line_number':161,'multiline':False]
['text':' The function may return an empty string if it cannot find a runfile.','line_number':162,'multiline':False]
['text':'','line_number':163,'multiline':False]
['text':' Args:','line_number':164,'multiline':False]
['text':'   path: runfiles-root-relative path of the runfile; must not be empty and','line_number':165,'multiline':False]
['text':'     must not contain uplevel references.','line_number':166,'multiline':False]
['text':'   source_repository: if provided, overrides the source repository set when','line_number':167,'multiline':False]
['text':'     this Runfiles instance was created.','line_number':168,'multiline':False]
['text':' Returns:','line_number':169,'multiline':False]
['text':'   the path to the runfile, which the caller should check for existence, or','line_number':170,'multiline':False]
['text':'   an empty string if the method doesn't know about this runfile','line_number':171,'multiline':False]
['text':' Returns environment variables for subprocesses.','line_number':176,'multiline':False]
['text':'','line_number':177,'multiline':False]
['text':' The caller should set the returned key-value pairs in the environment of','line_number':178,'multiline':False]
['text':' subprocesses, so that those subprocesses can also access runfiles (in case','line_number':179,'multiline':False]
['text':' they are also Bazel-built binaries).','line_number':180,'multiline':False]
['text':' Returns a new Runfiles instance that by default uses the provided source','line_number':185,'multiline':False]
['text':' repository as a default for all calls to Rlocation.','line_number':186,'multiline':False]
['text':'','line_number':187,'multiline':False]
['text':' The current instance remains valid.','line_number':188,'multiline':False]
['text':' The "testing" namespace contains functions that allow unit testing the code.','line_number':224,'multiline':False]
['text':' Do not use these outside of runfiles_test.cc, they are only part of the','line_number':225,'multiline':False]
['text':' public API for the benefit of the tests.','line_number':226,'multiline':False]
['text':' These functions and their interface may change without notice.','line_number':227,'multiline':False]
['text':' For testing only.','line_number':230,'multiline':False]
['text':'','line_number':231,'multiline':False]
['text':' Computes the path of the runfiles manifest and the runfiles directory.','line_number':232,'multiline':False]
['text':'','line_number':233,'multiline':False]
['text':' If the method finds both a valid manifest and valid directory according to','line_number':234,'multiline':False]
['text':' `is_runfiles_manifest` and `is_runfiles_directory`, then the method sets','line_number':235,'multiline':False]
['text':' the corresponding values to `out_manifest` and `out_directory` and returns','line_number':236,'multiline':False]
['text':' true.','line_number':237,'multiline':False]
['text':'','line_number':238,'multiline':False]
['text':' If the method only finds a valid manifest or a valid directory, but not','line_number':239,'multiline':False]
['text':' both, then it sets the corresponding output variable (`out_manifest` or','line_number':240,'multiline':False]
['text':' `out_directory`) to the value while clearing the other output variable. The','line_number':241,'multiline':False]
['text':' method still returns true in this case.','line_number':242,'multiline':False]
['text':'','line_number':243,'multiline':False]
['text':' If the method cannot find either a valid manifest or valid directory, it','line_number':244,'multiline':False]
['text':' clears both output variables and returns false.','line_number':245,'multiline':False]
['text':' For testing only.','line_number':253,'multiline':False]
['text':' Returns true if `path` is an absolute Unix or Windows path.','line_number':254,'multiline':False]
['text':' For Windows paths, this function does not regard drive-less absolute paths','line_number':255,'multiline':False]
['text':' (i.e. absolute-on-current-drive, e.g. "\foo\bar") as absolute and returns','line_number':256,'multiline':False]
['text':' false for these.','line_number':257,'multiline':False]
['text':' namespace testing','line_number':260,'multiline':False]
['text':' namespace runfiles','line_number':261,'multiline':False]
['text':' namespace cpp','line_number':262,'multiline':False]
['text':' namespace tools','line_number':263,'multiline':False]
['text':' namespace bazel','line_number':264,'multiline':False]
['text':' TOOLS_CPP_RUNFILES_RUNFILES_H_','line_number':266,'multiline':False]
