['text':'!/bin/bash','line_number':1,'multiline':False]
['text':' Copyright 2015 The Bazel Authors. All rights reserved.','line_number':3,'multiline':False]
['text':'','line_number':4,'multiline':False]
['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':5,'multiline':False]
['text':' you may not use this file except in compliance with the License.','line_number':6,'multiline':False]
['text':' You may obtain a copy of the License at','line_number':7,'multiline':False]
['text':'','line_number':8,'multiline':False]
['text':'    http://www.apache.org/licenses/LICENSE-2.0','line_number':9,'multiline':False]
['text':'','line_number':10,'multiline':False]
['text':' Unless required by applicable law or agreed to in writing, software','line_number':11,'multiline':False]
['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':12,'multiline':False]
['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':13,'multiline':False]
['text':' See the License for the specific language governing permissions and','line_number':14,'multiline':False]
['text':' limitations under the License.','line_number':15,'multiline':False]
['text':' Generate the release notes from the git history.','line_number':19,'multiline':False]
['text':' It uses the RELNOTES tag in the history to knows the important changes to','line_number':24,'multiline':False]
['text':' report:','line_number':25,'multiline':False]
['text':'   RELNOTES: indicates a change important the user.','line_number':26,'multiline':False]
['text':'   RELNOTES[NEW]: introduces a new feature.','line_number':27,'multiline':False]
['text':'   RELNOTES[INC]: indicates an incompatible change.','line_number':28,'multiline':False]
['text':' The previous releases base is detected using the CHANGELOG file from the','line_number':29,'multiline':False]
['text':' repository.','line_number':30,'multiline':False]
['text':' Get the baseline version and cherry-picks of the previous release','line_number':34,'multiline':False]
['text':'  Parameter: $1 is the path to the changelog file','line_number':35,'multiline':False]
['text':'  Output: "${BASELINE} ${CHERRYPICKS}"','line_number':36,'multiline':False]
['text':'    BASELINE is the hash of the baseline commit of the latest release','line_number':37,'multiline':False]
['text':'    CHERRYPICKS is the list of hash of cherry-picked commits of the latest release','line_number':38,'multiline':False]
['text':'  return 1 if there is no initial release','line_number':39,'multiline':False]
['text':' No changelog = initial release','line_number':42,'multiline':False]
['text':' No baseline = initial release','line_number':44,'multiline':False]
['text':' grep -B999 looks for all lines before the empty line and after that we','line_number':48,'multiline':False]
['text':' restrict to only lines with the cherry picked hash then finally we cut','line_number':49,'multiline':False]
['text':' the hash.','line_number':50,'multiline':False]
['text':' Now get the list of commit with a RELNOTES since latest release baseline ($1)','line_number':59,'multiline':False]
['text':' discarding cherry_picks ($2..) and rollbacks. The returned list of commits is','line_number':60,'multiline':False]
['text':' from the oldest to the newest','line_number':61,'multiline':False]
['text':' Extract the release note from a commit hash ($1). It extracts','line_number':75,'multiline':False]
['text':' the RELNOTES([??]): lines. A new empty line ends the relnotes tag.','line_number':76,'multiline':False]
['text':' It adds the relnotes, if not "None" ("None.") or "n/a" ("n/a.") to','line_number':77,'multiline':False]
['text':' the correct array:','line_number':78,'multiline':False]
['text':'   RELNOTES_INC for incompatible changes','line_number':79,'multiline':False]
['text':'   RELNOTES_NEW for new features changes','line_number':80,'multiline':False]
['text':'   RELNOTES for other changes','line_number':81,'multiline':False]
['text':' Build release notes arrays from a list of commits ($@) and return the release','line_number':100,'multiline':False]
['text':' note in an array of array.','line_number':101,'multiline':False]
['text':' Returns the list of release notes in arguments into a list of points in','line_number':111,'multiline':False]
['text':' a markdown list. The release notes are wrapped to 70 characters so it','line_number':112,'multiline':False]
['text':' displays nicely in a git history.','line_number':113,'multiline':False]
['text':'; i=$i+1 )); do','line_number':116,'multiline':False]
['text':' wrap to 70 counting the 4 leading spaces.','line_number':118,'multiline':False]
['text':' Create the release notes since commit $1 ($2...${[#]} are the cherry-picks,','line_number':124,'multiline':False]
['text':' so the commits to ignore.','line_number':125,'multiline':False]
['text':' Add a list of contributors to thank.','line_number':145,'multiline':False]
['text':' Stages:','line_number':146,'multiline':False]
['text':'   1. Get the list of authors from the last release til now, both name and','line_number':147,'multiline':False]
['text':'     email.','line_number':148,'multiline':False]
['text':'   2. Sort and uniqify.','line_number':149,'multiline':False]
['text':'   3. Remove googlers. (This is why the email is needed)','line_number':150,'multiline':False]
['text':'   4. Cut the email address, leaving only the name.','line_number':151,'multiline':False]
['text':'   5-n. Remove trailing spaces and newlines, substituting with a comman and a','line_number':152,'multiline':False]
['text':'     space, removing any trailing spaces again.','line_number':153,'multiline':False]
['text':' A wrapper around all the previous function, using the CHANGELOG.md','line_number':166,'multiline':False]
['text':' file in $1 to compute the last release commit hash.','line_number':167,'multiline':False]
['text':' Trim empty lines at the beginning and the end of the buffer.','line_number':175,'multiline':False]
['text':' Replace all new line by a linefeed, then using sed, remove the leading','line_number':177,'multiline':False]
['text':' and trailing linefeeds and convert them back to newline','line_number':178,'multiline':False]
['text':' Launch the editor and return the edited release notes.','line_number':182,'multiline':False]
['text':' Strip the release notes.','line_number':186,'multiline':False]
['text':' Create the revision information given a list of commits. The first','line_number':196,'multiline':False]
['text':' commit should be the baseline, and the other ones are the cherry-picks.','line_number':197,'multiline':False]
['text':' The result is of the form:','line_number':198,'multiline':False]
['text':' Baseline: BASELINE_COMMIT','line_number':199,'multiline':False]
['text':'','line_number':200,'multiline':False]
['text':' Cherry picks:','line_number':201,'multiline':False]
['text':'','line_number':202,'multiline':False]
['text':'    + CHERRY_PICK1: commit message summary of the CHERRY_PICK1. This','line_number':203,'multiline':False]
['text':'                    message will be wrapped into 70 columns.','line_number':204,'multiline':False]
['text':'    + CHERRY_PICK2: commit message summary of the CHERRY_PICK2.','line_number':205,'multiline':False]
['text':' 5 leading spaces.','line_number':218,'multiline':False]
['text':' Get the baseline of master.','line_number':225,'multiline':False]
['text':' Args: $1: release branch (or HEAD)','line_number':226,'multiline':False]
['text':' TODO(philwo) this gives the wrong baseline when HEAD == release == master.','line_number':227,'multiline':False]
['text':' Get the list of cherry-picks since master','line_number':232,'multiline':False]
['text':' Args:','line_number':233,'multiline':False]
['text':'   $1: branch, default to HEAD','line_number':234,'multiline':False]
['text':'   $2: baseline change, default to $(get_release_baseline $1)','line_number':235,'multiline':False]
['text':' List of changes since the baseline on the release branch','line_number':239,'multiline':False]
['text':' List of changes since the baseline on the master branch, and their patch-id','line_number':241,'multiline':False]
['text':' Now for each changes on the release branch','line_number':243,'multiline':False]
['text':' Find the change with the same patch-id on the master branch if the note is not present','line_number':245,'multiline':False]
['text':' We don't know which cherry-pick it is coming from, fall back to the new commit hash.','line_number':250,'multiline':False]
['text':' Generate the title of the release with the date from the release name ($1).','line_number':258,'multiline':False]
['text':' Generate the release message to be added to the changelog','line_number':263,'multiline':False]
['text':' from the release notes for release $1','line_number':264,'multiline':False]
['text':' Args:','line_number':265,'multiline':False]
['text':'   $1: release name','line_number':266,'multiline':False]
['text':'   $2: release ref (default HEAD)','line_number':267,'multiline':False]
['text':'   $3: delimiter around the revision information (default none)','line_number':268,'multiline':False]
['text':' Generate the release notes','line_number':299,'multiline':False]
['text':' Save the changelog so we compute the relnotes against HEAD.','line_number':303,'multiline':False]
['text':' Returns the release notes for the CHANGELOG.md for all releases -','line_number':316,'multiline':False]
['text':' release candidate, full release, and rolling release.','line_number':317,'multiline':False]
