['text':'!/bin/bash','line_number':1,'multiline':False]
['text':' Copyright 2015 The Bazel Authors. All rights reserved.','line_number':3,'multiline':False]
['text':'','line_number':4,'multiline':False]
['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':5,'multiline':False]
['text':' you may not use this file except in compliance with the License.','line_number':6,'multiline':False]
['text':' You may obtain a copy of the License at','line_number':7,'multiline':False]
['text':'','line_number':8,'multiline':False]
['text':'    http://www.apache.org/licenses/LICENSE-2.0','line_number':9,'multiline':False]
['text':'','line_number':10,'multiline':False]
['text':' Unless required by applicable law or agreed to in writing, software','line_number':11,'multiline':False]
['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':12,'multiline':False]
['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':13,'multiline':False]
['text':' See the License for the specific language governing permissions and','line_number':14,'multiline':False]
['text':' limitations under the License.','line_number':15,'multiline':False]
['text':' Script for building bazel from scratch without bazel','line_number':17,'multiline':False]
['text':' For protobuf jars, derived/jars/com_google_protobuf/java/core/libcore.jar must be in front of derived/jars/com_google_protobuf/java/core/liblite.jar, so we sort jars here','line_number':29,'multiline':False]
['text':' Exclude source files that are not needed for Bazel itself, which avoids dependencies like truth.','line_number':35,'multiline':False]
['text':' Exclude whole directories under the bazel src tree that bazel itself','line_number':37,'multiline':False]
['text':' doesn't depend on.','line_number':38,'multiline':False]
['text':' May be passed in from outside.','line_number':49,'multiline':False]
['text':' Check that javac -version returns a upper version than $JAVA_VERSION.','line_number':65,'multiline':False]
['text':' Ensures unzip won't create paths longer than 259 chars (MAX_PATH) on Windows.','line_number':72,'multiline':False]
['text':'output_path}))','line_number':78,'multiline':False]
['text':' Do not quote $jars, we rely on it being split on spaces.','line_number':79,'multiline':False]
['text':' Get the zip entries. Match lines with a date: they have the paths.','line_number':81,'multiline':False]
['text':'e} -gt $max_path ]]; then','line_number':84,'multiline':False]
['text':' Compiles java classes.','line_number':92,'multiline':False]
['text':' Compile .java files (incl. generated ones) using javac','line_number':112,'multiline':False]
['text':' Quotes around $excludes intentionally omitted in the for statement so that','line_number':115,'multiline':False]
['text':' it's split on spaces','line_number':116,'multiline':False]
['text':' Use BAZEL_JAVAC_OPTS to pass additional arguments to javac, e.g.,','line_number':135,'multiline':False]
['text':' export BAZEL_JAVAC_OPTS="-J-Xmx2g -J-Xms200m"','line_number':136,'multiline':False]
['text':' Useful if your system chooses too small of a max heap for javac.','line_number':137,'multiline':False]
['text':' We intentionally rely on shell word splitting to allow multiple','line_number':138,'multiline':False]
['text':' additional arguments to be passed to javac.','line_number':139,'multiline':False]
['text':' Create the deploy JAR','line_number':150,'multiline':False]
['text':' Recreate the derived directory','line_number':231,'multiline':False]
['text':' help files: all non java and BUILD files in src/main/java.','line_number':240,'multiline':False]
['text':' Create the bazel_tools repository.','line_number':246,'multiline':False]
['text':' Set up the MODULE.bazel file for `bazel_tools` and update the hash in the lockfile.','line_number':253,'multiline':False]
['text':' Create @bazel_tools//tools/cpp/runfiles','line_number':267,'multiline':False]
['text':' Transform //tools/cpp/runfiles:runfiles_src.cc to','line_number':271,'multiline':False]
['text':' @bazel_tools//tools/cpp/runfiles:runfiles.cc','line_number':272,'multiline':False]
['text':' Keep this transformation logic in sync with the','line_number':273,'multiline':False]
['text':' //tools/cpp/runfiles:srcs_for_embedded_tools genrule.','line_number':274,'multiline':False]
['text':' Create @bazel_tools//tools/sh','line_number':281,'multiline':False]
['text':' Create @bazel_tools//tools/jdk','line_number':287,'multiline':False]
['text':' Create @bazel_tools//tools/java/runfiles','line_number':292,'multiline':False]
['text':' Create @bazel_tools/tools/python/BUILD','line_number':298,'multiline':False]
['text':' Create @bazel_tools/tools/android/BUILD','line_number':302,'multiline':False]
['text':' Create the rest of @bazel_tools//tools/...','line_number':307,'multiline':False]
['text':' Set up @maven properly','line_number':313,'multiline':False]
['text':' Dummy build-runfiles (we can't compile C++ yet, so we can't have the real one)','line_number':324,'multiline':False]
['text':' We don't rely on runfiles trees on Windows','line_number':326,'multiline':False]
['text':'!/bin/sh','line_number':328,'multiline':False]
['text':' Skip over --allow_relative.','line_number':329,'multiline':False]
['text':'!/bin/sh','line_number':335,'multiline':False]
['text':' This is bash implementation of build-runfiles: reads space-separated paths','line_number':336,'multiline':False]
['text':' from each line in the file in $1, then creates a symlink under $2 for the','line_number':337,'multiline':False]
['text':' first element of the pair that points to the second element of the pair.','line_number':338,'multiline':False]
['text':'','line_number':339,'multiline':False]
['text':' bash is a terrible tool for this job, but in this case, that's the only one','line_number':340,'multiline':False]
['text':' we have (we could hand-compile a little .jar file like we hand-compile the','line_number':341,'multiline':False]
['text':' bootstrap version of Bazel, but we'd still need a shell wrapper around it, so','line_number':342,'multiline':False]
['text':' it's not clear whether that would be a win over a few lines of Lovecraftian','line_number':343,'multiline':False]
['text':' code)','line_number':344,'multiline':False]
['text':' Skip over --allow_relative.','line_number':345,'multiline':False]
['text':' Read the lines in $MANIFEST. the usual "for VAR in $(cat FILE)" idiom won't do','line_number':352,'multiline':False]
['text':' because the lines in FILE contain spaces.','line_number':353,'multiline':False]
['text':' Split each line into two parts on the first space','line_number':355,'multiline':False]
['text':' We need JNI on Windows because some filesystem operations are not (and','line_number':373,'multiline':False]
['text':' cannot be) implemented in native Java.','line_number':374,'multiline':False]
['text':' Keep this `find` command in sync with the `srcs` of','line_number':383,'multiline':False]
['text':' //src/main/native/windows:windows_jni','line_number':384,'multiline':False]
['text':' do not quote $srcs because we need to expand it to multiple args','line_number':388,'multiline':False]
['text':' We don't need JNI on other platforms. The Java NIO file system fallback is','line_number':396,'multiline':False]
['text':' sufficient.','line_number':397,'multiline':False]
['text':' TODO(b/28965185): Remove when xcode-locator is no longer required in embedded_binaries.','line_number':406,'multiline':False]
['text':' Propagate all environment variables to bootstrapped Bazel.','line_number':424,'multiline':False]
['text':' See https://stackoverflow.com/questions/41898503/loop-over-environment-variables-in-posix-sh','line_number':425,'multiline':False]
