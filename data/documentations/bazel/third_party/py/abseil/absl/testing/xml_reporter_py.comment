['text':' Copyright 2017 The Abseil Authors.','line_number':1,'multiline':False]
['text':'','line_number':2,'multiline':False]
['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':3,'multiline':False]
['text':' you may not use this file except in compliance with the License.','line_number':4,'multiline':False]
['text':' You may obtain a copy of the License at','line_number':5,'multiline':False]
['text':'','line_number':6,'multiline':False]
['text':'      http://www.apache.org/licenses/LICENSE-2.0','line_number':7,'multiline':False]
['text':'','line_number':8,'multiline':False]
['text':' Unless required by applicable law or agreed to in writing, software','line_number':9,'multiline':False]
['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':10,'multiline':False]
['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':11,'multiline':False]
['text':' See the License for the specific language governing permissions and','line_number':12,'multiline':False]
['text':' limitations under the License.','line_number':13,'multiline':False]
['text':' See http://www.w3.org/TR/REC-xml/#NT-Char','line_number':28,'multiline':False]
['text':' When class or module level function fails, unittest/suite.py adds a','line_number':46,'multiline':False]
['text':' _ErrorHolder instance instead of a real TestCase, and it has a description','line_number':47,'multiline':False]
['text':' like "setUpClass (__main__.MyTestCase)".','line_number':48,'multiline':False]
['text':' NOTE: while saxutils.quoteattr() theoretically does the same thing; it','line_number':52,'multiline':False]
['text':' seems to often end up being too smart for it's own good not escaping properly.','line_number':53,'multiline':False]
['text':' This function is much more reliable.','line_number':54,'multiline':False]
['text':' Note: saxutils doesn't escape the quotes.','line_number':57,'multiline':False]
['text':' Copy time.time which ensures the real time is used internally.','line_number':108,'multiline':False]
['text':' This prevents bad interactions with tests that stub out time.','line_number':109,'multiline':False]
['text':' Use the traceback module str function to format safely.','line_number':113,'multiline':False]
['text':' pylint: disable=invalid-name','line_number':116,'multiline':False]
['text':' Parse the test id to get its test name and full class path.','line_number':146,'multiline':False]
['text':' Unfortunately there is no better way of knowning the test and class.','line_number':147,'multiline':False]
['text':' Worse, unittest uses _ErrorHandler instances to represent class / module','line_number':148,'multiline':False]
['text':' level failures.','line_number':149,'multiline':False]
['text':' Check if it's something like "setUpClass (__main__.TestCase)".','line_number':151,'multiline':False]
['text':' If the test case is a _SubTest, the real TestCase instance is','line_number':159,'multiline':False]
['text':' available as _SubTest.test_case.','line_number':160,'multiline':False]
['text':' In a typical unittest.TestCase scenario, test.id() returns with','line_number':163,'multiline':False]
['text':' a class name formatted using unittest.util.strclass.','line_number':164,'multiline':False]
['text':' Otherwise make a best effort to guess the test name and full class','line_number':168,'multiline':False]
['text':' path.','line_number':169,'multiline':False]
['text':' pylint: disable=unpacking-non-sequence','line_number':215,'multiline':False]
['text':' _ErrorHolder is a special case created by unittest for class / module','line_number':237,'multiline':False]
['text':' level functions.','line_number':238,'multiline':False]
['text':' If the test case is a _SubTest, the real TestCase instance is','line_number':241,'multiline':False]
['text':' available as _SubTest.test_case.','line_number':242,'multiline':False]
['text':' Only count the first failure or error so that the sum is equal to the','line_number':248,'multiline':False]
['text':' total number of *testcases* that have failures or errors.','line_number':249,'multiline':False]
['text':' This lock guards any mutations on pending_test_case_results.','line_number':346,'multiline':False]
['text':' Grabbing the write lock to avoid conflicting with stopTestRun.','line_number':354,'multiline':False]
['text':' All pending_test_case_results will be added to the suite and removed from','line_number':375,'multiline':False]
['text':' the pending_test_case_results dictionary. Grabbing the write lock to avoid','line_number':376,'multiline':False]
['text':' results from being added during this process to avoid duplicating adds or','line_number':377,'multiline':False]
['text':' accidentally erasing newly appended pending results.','line_number':378,'multiline':False]
['text':' Errors in the test fixture (setUpModule, tearDownModule,','line_number':380,'multiline':False]
['text':' setUpClass, tearDownClass) can leave a pending result which','line_number':381,'multiline':False]
['text':' never gets added to the suite.  The runner calls stopTestRun','line_number':382,'multiline':False]
['text':' which gives us an opportunity to add these errors for','line_number':383,'multiline':False]
['text':' reporting here.','line_number':384,'multiline':False]
['text':' pylint: disable=invalid-name','line_number':487,'multiline':False]
['text':' else, do not set self._xml_stream to None -- this allows implicit fallback','line_number':532,'multiline':False]
['text':' to the class attribute's value.','line_number':533,'multiline':False]
