['text':' Helper functions.','line_number':13,'multiline':False]
['text':' Conditions for adding methods.  The boxes indicate what action the','line_number':22,'multiline':False]
['text':'  dataclass decorator takes.  For all of these tables, when I talk','line_number':23,'multiline':False]
['text':'  about init=, repr=, eq=, order=, unsafe_hash=, or frozen=, I'm','line_number':24,'multiline':False]
['text':'  referring to the arguments to the @dataclass decorator.  When','line_number':25,'multiline':False]
['text':'  checking if a dunder method already exists, I mean check for an','line_number':26,'multiline':False]
['text':'  entry in the class's __dict__.  I never check to see if an','line_number':27,'multiline':False]
['text':'  attribute is defined in a base class.','line_number':28,'multiline':False]
['text':' Key:','line_number':30,'multiline':False]
['text':' +=========+=========================================+','line_number':31,'multiline':False]
['text':' + Value   | Meaning                                 |','line_number':32,'multiline':False]
['text':' +=========+=========================================+','line_number':33,'multiline':False]
['text':' | <blank> | No action: no method is added.          |','line_number':34,'multiline':False]
['text':' +---------+-----------------------------------------+','line_number':35,'multiline':False]
['text':' | add     | Generated method is added.              |','line_number':36,'multiline':False]
['text':' +---------+-----------------------------------------+','line_number':37,'multiline':False]
['text':' | raise   | TypeError is raised.                    |','line_number':38,'multiline':False]
['text':' +---------+-----------------------------------------+','line_number':39,'multiline':False]
['text':' | None    | Attribute is set to None.               |','line_number':40,'multiline':False]
['text':' +=========+=========================================+','line_number':41,'multiline':False]
['text':' __init__','line_number':43,'multiline':False]
['text':'','line_number':44,'multiline':False]
['text':'   +--- init= parameter','line_number':45,'multiline':False]
['text':'   |','line_number':46,'multiline':False]
['text':'   v     |       |       |','line_number':47,'multiline':False]
['text':'         |  no   |  yes  |  <--- class has __init__ in __dict__?','line_number':48,'multiline':False]
['text':' +=======+=======+=======+','line_number':49,'multiline':False]
['text':' | False |       |       |','line_number':50,'multiline':False]
['text':' +-------+-------+-------+','line_number':51,'multiline':False]
['text':' | True  | add   |       |  <- the default','line_number':52,'multiline':False]
['text':' +=======+=======+=======+','line_number':53,'multiline':False]
['text':' __repr__','line_number':55,'multiline':False]
['text':'','line_number':56,'multiline':False]
['text':'    +--- repr= parameter','line_number':57,'multiline':False]
['text':'    |','line_number':58,'multiline':False]
['text':'    v    |       |       |','line_number':59,'multiline':False]
['text':'         |  no   |  yes  |  <--- class has __repr__ in __dict__?','line_number':60,'multiline':False]
['text':' +=======+=======+=======+','line_number':61,'multiline':False]
['text':' | False |       |       |','line_number':62,'multiline':False]
['text':' +-------+-------+-------+','line_number':63,'multiline':False]
['text':' | True  | add   |       |  <- the default','line_number':64,'multiline':False]
['text':' +=======+=======+=======+','line_number':65,'multiline':False]
['text':' __setattr__','line_number':68,'multiline':False]
['text':' __delattr__','line_number':69,'multiline':False]
['text':'','line_number':70,'multiline':False]
['text':'    +--- frozen= parameter','line_number':71,'multiline':False]
['text':'    |','line_number':72,'multiline':False]
['text':'    v    |       |       |','line_number':73,'multiline':False]
['text':'         |  no   |  yes  |  <--- class has __setattr__ or __delattr__ in __dict__?','line_number':74,'multiline':False]
['text':' +=======+=======+=======+','line_number':75,'multiline':False]
['text':' | False |       |       |  <- the default','line_number':76,'multiline':False]
['text':' +-------+-------+-------+','line_number':77,'multiline':False]
['text':' | True  | add   | raise |','line_number':78,'multiline':False]
['text':' +=======+=======+=======+','line_number':79,'multiline':False]
['text':' Raise because not adding these methods would break the "frozen-ness"','line_number':80,'multiline':False]
['text':'  of the class.','line_number':81,'multiline':False]
['text':' __eq__','line_number':83,'multiline':False]
['text':'','line_number':84,'multiline':False]
['text':'    +--- eq= parameter','line_number':85,'multiline':False]
['text':'    |','line_number':86,'multiline':False]
['text':'    v    |       |       |','line_number':87,'multiline':False]
['text':'         |  no   |  yes  |  <--- class has __eq__ in __dict__?','line_number':88,'multiline':False]
['text':' +=======+=======+=======+','line_number':89,'multiline':False]
['text':' | False |       |       |','line_number':90,'multiline':False]
['text':' +-------+-------+-------+','line_number':91,'multiline':False]
['text':' | True  | add   |       |  <- the default','line_number':92,'multiline':False]
['text':' +=======+=======+=======+','line_number':93,'multiline':False]
['text':' __lt__','line_number':95,'multiline':False]
['text':' __le__','line_number':96,'multiline':False]
['text':' __gt__','line_number':97,'multiline':False]
['text':' __ge__','line_number':98,'multiline':False]
['text':'','line_number':99,'multiline':False]
['text':'    +--- order= parameter','line_number':100,'multiline':False]
['text':'    |','line_number':101,'multiline':False]
['text':'    v    |       |       |','line_number':102,'multiline':False]
['text':'         |  no   |  yes  |  <--- class has any comparison method in __dict__?','line_number':103,'multiline':False]
['text':' +=======+=======+=======+','line_number':104,'multiline':False]
['text':' | False |       |       |  <- the default','line_number':105,'multiline':False]
['text':' +-------+-------+-------+','line_number':106,'multiline':False]
['text':' | True  | add   | raise |','line_number':107,'multiline':False]
['text':' +=======+=======+=======+','line_number':108,'multiline':False]
['text':' Raise because to allow this case would interfere with using','line_number':109,'multiline':False]
['text':'  functools.total_ordering.','line_number':110,'multiline':False]
['text':' __hash__','line_number':112,'multiline':False]
['text':'    +------------------- unsafe_hash= parameter','line_number':114,'multiline':False]
['text':'    |       +----------- eq= parameter','line_number':115,'multiline':False]
['text':'    |       |       +--- frozen= parameter','line_number':116,'multiline':False]
['text':'    |       |       |','line_number':117,'multiline':False]
['text':'    v       v       v    |        |        |','line_number':118,'multiline':False]
['text':'                         |   no   |  yes   |  <--- class has explicitly defined __hash__','line_number':119,'multiline':False]
['text':' +=======+=======+=======+========+========+','line_number':120,'multiline':False]
['text':' | False | False | False |        |        | No __eq__, use the base class __hash__','line_number':121,'multiline':False]
['text':' +-------+-------+-------+--------+--------+','line_number':122,'multiline':False]
['text':' | False | False | True  |        |        | No __eq__, use the base class __hash__','line_number':123,'multiline':False]
['text':' +-------+-------+-------+--------+--------+','line_number':124,'multiline':False]
['text':' | False | True  | False | None   |        | <-- the default, not hashable','line_number':125,'multiline':False]
['text':' +-------+-------+-------+--------+--------+','line_number':126,'multiline':False]
['text':' | False | True  | True  | add    |        | Frozen, so hashable, allows override','line_number':127,'multiline':False]
['text':' +-------+-------+-------+--------+--------+','line_number':128,'multiline':False]
['text':' | True  | False | False | add    | raise  | Has no __eq__, but hashable','line_number':129,'multiline':False]
['text':' +-------+-------+-------+--------+--------+','line_number':130,'multiline':False]
['text':' | True  | False | True  | add    | raise  | Has no __eq__, but hashable','line_number':131,'multiline':False]
['text':' +-------+-------+-------+--------+--------+','line_number':132,'multiline':False]
['text':' | True  | True  | False | add    | raise  | Not frozen, but hashable','line_number':133,'multiline':False]
['text':' +-------+-------+-------+--------+--------+','line_number':134,'multiline':False]
['text':' | True  | True  | True  | add    | raise  | Frozen, so hashable','line_number':135,'multiline':False]
['text':' +=======+=======+=======+========+========+','line_number':136,'multiline':False]
['text':' For boxes that are blank, __hash__ is untouched and therefore','line_number':137,'multiline':False]
['text':'  inherited from the base class.  If the base is object, then','line_number':138,'multiline':False]
['text':'  id-based hashing is used.','line_number':139,'multiline':False]
['text':' Note that a class may already have __hash__=None if it specified an','line_number':140,'multiline':False]
['text':'  __eq__ method in the class body (not one that was created by','line_number':141,'multiline':False]
['text':'  @dataclass).','line_number':142,'multiline':False]
['text':' See _hash_action (below) for a coded version of this table.','line_number':143,'multiline':False]
['text':' Raised when an attempt is made to modify a frozen class.','line_number':146,'multiline':False]
['text':' A sentinel object for default values to signal that a','line_number':149,'multiline':False]
['text':'  default factory will be used.','line_number':150,'multiline':False]
['text':' This is given a nice repr() which will appear in the function','line_number':151,'multiline':False]
['text':'  signature of dataclasses' constructors.','line_number':152,'multiline':False]
['text':' A sentinel object to detect if a parameter is supplied or not.  Use','line_number':158,'multiline':False]
['text':'  a class to give it a better repr.','line_number':159,'multiline':False]
['text':' Since most per-field metadata will be unused, create an empty','line_number':164,'multiline':False]
['text':'  read-only proxy that can be shared among all fields.','line_number':165,'multiline':False]
['text':' Markers for the various kinds of fields and pseudo-fields.','line_number':168,'multiline':False]
['text':' An actual field.','line_number':169,'multiline':False]
['text':' Not a field, but a ClassVar.','line_number':170,'multiline':False]
['text':' Not a field, but an InitVar.','line_number':171,'multiline':False]
['text':' The name of an attribute on the class where we store the Field','line_number':173,'multiline':False]
['text':'  objects. Also used to check if a class is a Data Class.','line_number':174,'multiline':False]
['text':' The name of an attribute on the class that stores the parameters to','line_number':177,'multiline':False]
['text':' @dataclass.','line_number':178,'multiline':False]
['text':' The name of the function, that if it exists, is called at the end of','line_number':181,'multiline':False]
['text':' __init__.','line_number':182,'multiline':False]
['text':' Instances of Field are only ever created from within this module,','line_number':194,'multiline':False]
['text':'  and only from the field() function, although Field instances are','line_number':195,'multiline':False]
['text':'  exposed externally as (conceptually) read-only objects.','line_number':196,'multiline':False]
['text':' name and type are filled in after the fact, not in __init__. They're','line_number':197,'multiline':False]
['text':'  not known at the time this class is instantiated, but it's','line_number':198,'multiline':False]
['text':'  convenient if they're available later.','line_number':199,'multiline':False]
['text':' When cls._FIELDS is filled in with a list of Field objects, the name','line_number':200,'multiline':False]
['text':'  and type fields will have been populated.','line_number':201,'multiline':False]
['text':' Private: not to be used by user code.','line_number':212,'multiline':False]
['text':' This is used to support the PEP 487 __set_name__ protocol in the','line_number':243,'multiline':False]
['text':'  case where we're using a field that contains a descriptor as a','line_number':244,'multiline':False]
['text':'  defaul value.  For details on __set_name__, see','line_number':245,'multiline':False]
['text':'  https://www.python.org/dev/peps/pep-0487/#implementation-details.','line_number':246,'multiline':False]
['text':' Note that in _process_class, this Field object is overwritten with','line_number':247,'multiline':False]
['text':'  the default value, so the end result is a descriptor that had','line_number':248,'multiline':False]
['text':'  __set_name__ called on it at the right time.','line_number':249,'multiline':False]
['text':' There is a __set_name__ method on the descriptor,','line_number':253,'multiline':False]
['text':'  call it.','line_number':254,'multiline':False]
['text':' This function is used instead of exposing Field creation directly,','line_number':286,'multiline':False]
['text':'  so that a type checker can be told (via overloads) that this is a','line_number':287,'multiline':False]
['text':'  function whose type depends on its parameters.','line_number':288,'multiline':False]
['text':' Return a string representing each field of obj_name as a tuple','line_number':312,'multiline':False]
['text':'  member. So, if fields is ['x', 'y'] and obj_name is "self",','line_number':313,'multiline':False]
['text':'  return "(self.x,self.y)".','line_number':314,'multiline':False]
['text':' Special case for the 0-tuple.','line_number':316,'multiline':False]
['text':' Note the trailing comma, needed if this turns out to be a 1-tuple.','line_number':319,'multiline':False]
['text':' Note that we mutate locals when exec() is called. Caller beware!','line_number':325,'multiline':False]
['text':'  The only callers are internal to this module, so no worries','line_number':326,'multiline':False]
['text':'  about external callers.','line_number':327,'multiline':False]
['text':' Compute the text of the entire function.','line_number':337,'multiline':False]
['text':' If we're a frozen class, then assign to our fields in __init__','line_number':345,'multiline':False]
['text':'  via object.__setattr__.  Otherwise, just use a simple','line_number':346,'multiline':False]
['text':'  assignment.','line_number':347,'multiline':False]
['text':' self_name is what "self" is called in this function: don't','line_number':348,'multiline':False]
['text':'  hard-code "self", since that might be a field name.','line_number':349,'multiline':False]
['text':' Return the text of the line in the body of __init__ that will','line_number':356,'multiline':False]
['text':'  initialize this field.','line_number':357,'multiline':False]
['text':' This field has a default factory.  If a parameter is','line_number':362,'multiline':False]
['text':'  given, use it.  If not, call the factory.','line_number':363,'multiline':False]
['text':' This is a field that's not in the __init__ params, but','line_number':369,'multiline':False]
['text':'  has a default factory function.  It needs to be','line_number':370,'multiline':False]
['text':'  initialized here by calling the factory function,','line_number':371,'multiline':False]
['text':'  because there's no other way to initialize it.','line_number':372,'multiline':False]
['text':' For a field initialized with a default=defaultvalue, the','line_number':374,'multiline':False]
['text':'  class dict just has the default value','line_number':375,'multiline':False]
['text':'  (cls.fieldname=defaultvalue). But that won't work for a','line_number':376,'multiline':False]
['text':'  default factory, the factory must be called in __init__','line_number':377,'multiline':False]
['text':'  and we must assign that to self.fieldname. We can't','line_number':378,'multiline':False]
['text':'  fall back to the class dict's value, both because it's','line_number':379,'multiline':False]
['text':'  not set, and because it might be different per-class','line_number':380,'multiline':False]
['text':'  (which, after all, is why we have a factory function!).','line_number':381,'multiline':False]
['text':' No default factory.','line_number':386,'multiline':False]
['text':' There's no default, just do an assignment.','line_number':389,'multiline':False]
['text':' This field does not need initialization. Signify that to','line_number':395,'multiline':False]
['text':'  the caller by returning None.','line_number':396,'multiline':False]
['text':' Only test this now, so that we can create variables for the','line_number':399,'multiline':False]
['text':'  default.  However, return None to signify that we're not going','line_number':400,'multiline':False]
['text':'  to actually do the assignment statement for InitVars.','line_number':401,'multiline':False]
['text':' Now, actually generate the field assignment.','line_number':405,'multiline':False]
['text':' Return the __init__ parameter string for this field.','line_number':410,'multiline':False]
['text':'  For example, the equivalent of 'x:int=3' (except instead of 'int',','line_number':411,'multiline':False]
['text':'  reference a variable set to int, and instead of '3', reference a','line_number':412,'multiline':False]
['text':'  variable set to 3).','line_number':413,'multiline':False]
['text':' There's no default, and no default_factory, just','line_number':415,'multiline':False]
['text':'  output the variable name and type.','line_number':416,'multiline':False]
['text':' There's a default, this will be the name that's used to look it up.','line_number':419,'multiline':False]
['text':' There's a factory function. Set a marker.','line_number':422,'multiline':False]
['text':' fields contains both real fields and InitVar pseudo-fields.','line_number':428,'multiline':False]
['text':' Make sure we don't have fields without defaults following fields','line_number':430,'multiline':False]
['text':'  with defaults.  This actually would be caught when exec-ing the','line_number':431,'multiline':False]
['text':'  function source code, but catching it here gives a better error','line_number':432,'multiline':False]
['text':'  message, and future-proofs us in case we build up the function','line_number':433,'multiline':False]
['text':'  using ast.','line_number':434,'multiline':False]
['text':' Only consider fields in the __init__ call.','line_number':437,'multiline':False]
['text':' line is None means that this field doesn't require','line_number':451,'multiline':False]
['text':'  initialization (it's a pseudo-field).  Just skip it.','line_number':452,'multiline':False]
['text':' Does this class have a post-init function?','line_number':456,'multiline':False]
['text':' If no body lines, use 'pass'.','line_number':462,'multiline':False]
['text':' XXX: globals is modified on the first call to _create_fn, then the','line_number':485,'multiline':False]
['text':'  modified version is used in the second call.  Is this okay?','line_number':486,'multiline':False]
['text':' Special case for the zero-length tuple.','line_number':492,'multiline':False]
['text':' Create a comparison function.  If the fields in the object are','line_number':510,'multiline':False]
['text':'  named 'x' and 'y', then self_tuple is the string','line_number':511,'multiline':False]
['text':'  '(self.x,self.y)' and other_tuple is the string','line_number':512,'multiline':False]
['text':'  '(other.x,other.y)'.','line_number':513,'multiline':False]
['text':' Return a Field object for this field name and type.  ClassVars','line_number':530,'multiline':False]
['text':'  and InitVars are also returned, but marked as such (see','line_number':531,'multiline':False]
['text':'  f._field_type).','line_number':532,'multiline':False]
['text':' If the default value isn't derived from Field, then it's','line_number':534,'multiline':False]
['text':'  only a normal default value.  Convert it to a Field().','line_number':535,'multiline':False]
['text':' This is a field in __slots__, so it has no default value.','line_number':541,'multiline':False]
['text':' Assume it's a normal field until proven otherwise.','line_number':545,'multiline':False]
['text':' Only at this point do we know the name and the type. Set them.','line_number':548,'multiline':False]
['text':' If typing has not been imported, then it's impossible for','line_number':552,'multiline':False]
['text':'  any annotation to be a ClassVar. So, only look for ClassVar','line_number':553,'multiline':False]
['text':'  if typing has been imported.','line_number':554,'multiline':False]
['text':' This test uses a typing internal class, but it's the best','line_number':557,'multiline':False]
['text':'  way to test if this is a ClassVar.','line_number':558,'multiline':False]
['text':' This field is a ClassVar, so it's not a field.','line_number':564,'multiline':False]
['text':' Check if this is an InitVar.','line_number':568,'multiline':False]
['text':' InitVars are not fields, either.','line_number':570,'multiline':False]
['text':' Validations for fields.  This is delayed until now, instead of','line_number':573,'multiline':False]
['text':' in the Field() constructor, since only here do we know the field','line_number':574,'multiline':False]
['text':' name, which allows better error reporting.','line_number':575,'multiline':False]
['text':' Special restrictions for ClassVar and InitVar.','line_number':577,'multiline':False]
['text':' Should I check for other field settings? default_factory','line_number':582,'multiline':False]
['text':'  seems the most serious to check for.  Maybe add others.','line_number':583,'multiline':False]
['text':'  For example, how about init=False (or really,','line_number':584,'multiline':False]
['text':'  init=<not-the-default-init-value>)?  It makes no sense for','line_number':585,'multiline':False]
['text':'  ClassVar and InitVar to specify init=<anything>.','line_number':586,'multiline':False]
['text':' For real fields, disallow mutable defaults for known types.','line_number':588,'multiline':False]
['text':' Never overwrites an existing attribute.  Returns True if the','line_number':597,'multiline':False]
['text':'  attribute already exists.','line_number':598,'multiline':False]
['text':' Decide if/how we're going to create a hash function.  Key is','line_number':606,'multiline':False]
['text':'  (unsafe_hash, eq, frozen, does-hash-exist).  Value is the action to','line_number':607,'multiline':False]
['text':'  take.  The common case is to do nothing, so instead of providing a','line_number':608,'multiline':False]
['text':'  function that is a no-op, use None to signify that.','line_number':609,'multiline':False]
['text':' Raise an exception.','line_number':619,'multiline':False]
['text':'','line_number':623,'multiline':False]
['text':'                +-------------------------------------- unsafe_hash?','line_number':624,'multiline':False]
['text':'                |      +------------------------------- eq?','line_number':625,'multiline':False]
['text':'                |      |      +------------------------ frozen?','line_number':626,'multiline':False]
['text':'                |      |      |      +----------------  has-explicit-hash?','line_number':627,'multiline':False]
['text':'                |      |      |      |','line_number':628,'multiline':False]
['text':'                |      |      |      |        +-------  action','line_number':629,'multiline':False]
['text':'                |      |      |      |        |','line_number':630,'multiline':False]
['text':'                v      v      v      v        v','line_number':631,'multiline':False]
['text':' See https://bugs.python.org/issue32929#msg312829 for an if-statement','line_number':649,'multiline':False]
['text':'  version of this table.','line_number':650,'multiline':False]
['text':' Now that dicts retain insertion order, there's no reason to use','line_number':654,'multiline':False]
['text':'  an ordered dict.  I am leveraging that ordering here, because','line_number':655,'multiline':False]
['text':'  derived class fields overwrite base class fields, but the order','line_number':656,'multiline':False]
['text':'  is defined by the base class, which is found first.','line_number':657,'multiline':False]
['text':' Find our base classes in reverse MRO order, and exclude','line_number':663,'multiline':False]
['text':'  ourselves.  In reversed order so that more derived classes','line_number':664,'multiline':False]
['text':'  override earlier field definitions in base classes.','line_number':665,'multiline':False]
['text':' As long as we're iterating over them, see if any are frozen.','line_number':666,'multiline':False]
['text':' Only process classes that have been processed by our','line_number':670,'multiline':False]
['text':'  decorator.  That is, they have a _FIELDS attribute.','line_number':671,'multiline':False]
['text':' Annotations that are defined in this class (not in base','line_number':680,'multiline':False]
['text':'  classes).  If __annotations__ isn't present, then this class','line_number':681,'multiline':False]
['text':'  adds no new annotations.  We use this to compute fields that','line_number':682,'multiline':False]
['text':'  are added by this class.','line_number':683,'multiline':False]
['text':' Fields are found from cls_annotations, which is guaranteed to be','line_number':684,'multiline':False]
['text':'  ordered.  Default values are from class attributes, if a field','line_number':685,'multiline':False]
['text':'  has a default.  If the default value is a Field(), then it','line_number':686,'multiline':False]
['text':'  contains additional info beyond (and possibly including) the','line_number':687,'multiline':False]
['text':'  actual default value.  Pseudo-fields ClassVars and InitVars are','line_number':688,'multiline':False]
['text':'  included, despite the fact that they're not real fields.','line_number':689,'multiline':False]
['text':'  That's dealt with later.','line_number':690,'multiline':False]
['text':' Now find fields in our class.  While doing so, validate some','line_number':693,'multiline':False]
['text':'  things, and set the default values (as class attributes)','line_number':694,'multiline':False]
['text':'  where we can.','line_number':695,'multiline':False]
['text':' If the class attribute (which is the default value for','line_number':701,'multiline':False]
['text':'  this field) exists and is of type 'Field', replace it','line_number':702,'multiline':False]
['text':'  with the real default.  This is so that normal class','line_number':703,'multiline':False]
['text':'  introspection sees a real default value, not a Field.','line_number':704,'multiline':False]
['text':' If there's no default, delete the class attribute.','line_number':707,'multiline':False]
['text':'  This happens if we specify field(repr=False), for','line_number':708,'multiline':False]
['text':'  example (that is, we specified a field object, but','line_number':709,'multiline':False]
['text':'  no default value).  Also if we're using a default','line_number':710,'multiline':False]
['text':'  factory.  The class attribute should not be set at','line_number':711,'multiline':False]
['text':'  all in the post-processed class.','line_number':712,'multiline':False]
['text':' Do we have any Field members that don't also have annotations?','line_number':717,'multiline':False]
['text':' Check rules that apply if we are derived from any dataclasses.','line_number':722,'multiline':False]
['text':' Raise an exception if any of our bases are frozen, but we're not.','line_number':724,'multiline':False]
['text':' Raise an exception if we're frozen, but none of our bases are.','line_number':729,'multiline':False]
['text':' Remember all of the fields on our class (including bases).  This also','line_number':734,'multiline':False]
['text':'  marks this class as being a dataclass.','line_number':735,'multiline':False]
['text':' Was this class defined with an explicit __hash__?  Note that if','line_number':738,'multiline':False]
['text':'  __eq__ is defined in this class, then python will automatically','line_number':739,'multiline':False]
['text':'  set __hash__ to None.  This is a heuristic, as it's possible','line_number':740,'multiline':False]
['text':'  that such a __hash__ == None was not auto-generated, but it','line_number':741,'multiline':False]
['text':'  close enough.','line_number':742,'multiline':False]
['text':' If we're generating ordering methods, we must be generating','line_number':747,'multiline':False]
['text':'  the eq methods.','line_number':748,'multiline':False]
['text':' Does this class have a post-init function?','line_number':753,'multiline':False]
['text':' Include InitVars and regular fields (so, not ClassVars).','line_number':756,'multiline':False]
['text':' The name to use for the "self" param','line_number':763,'multiline':False]
['text':'  in __init__.  Use "self" if possible.','line_number':764,'multiline':False]
['text':' Get the fields as a list, and include only real fields.  This is','line_number':769,'multiline':False]
['text':'  used in all of the following methods.','line_number':770,'multiline':False]
['text':' Create _eq__ method.  There's no need for a __ne__ method,','line_number':778,'multiline':False]
['text':'  since python will call __eq__ and negate it.','line_number':779,'multiline':False]
['text':' Create and set the ordering methods.','line_number':788,'multiline':False]
['text':' Decide if/how we're going to create a hash function.','line_number':809,'multiline':False]
['text':' No need to call _set_new_attribute here, since by the time','line_number':815,'multiline':False]
['text':'  we're here the overwriting is unconditional.','line_number':816,'multiline':False]
['text':' Create a class doc-string.','line_number':820,'multiline':False]
['text':' _cls should never be specified by keyword, so start it with an','line_number':827,'multiline':False]
['text':'  underscore. The presence of _cls is used to detect if this','line_number':828,'multiline':False]
['text':'  decorator is being called with parameters or not.','line_number':829,'multiline':False]
['text':' See if we're being called as @dataclass or @dataclass().','line_number':847,'multiline':False]
['text':' We're called with parens.','line_number':849,'multiline':False]
['text':' We're called as @dataclass without parens.','line_number':852,'multiline':False]
['text':' Might it be worth caching this, per class?','line_number':863,'multiline':False]
['text':' Exclude pseudo-fields.  Note that fields is sorted by insertion','line_number':869,'multiline':False]
['text':'  order, so the order of the tuple is as the fields were defined.','line_number':870,'multiline':False]
['text':' Copy namespace since we're going to mutate it.','line_number':994,'multiline':False]
['text':' We're going to mutate 'changes', but that's okay because it's a new','line_number':1030,'multiline':False]
['text':'  dict, even if called with 'replace(obj, **my_changes)'.','line_number':1031,'multiline':False]
['text':' It's an error to have init=False fields in 'changes'.','line_number':1036,'multiline':False]
['text':' If a field is not in 'changes', read its value from the provided obj.','line_number':1037,'multiline':False]
['text':' Error if this field is specified in changes.','line_number':1041,'multiline':False]
['text':' Create the new object, which calls __init__() and','line_number':1051,'multiline':False]
['text':'  __post_init__() (if defined), using all of the init fields','line_number':1052,'multiline':False]
['text':'  we've added and/or left in 'changes'.  If there are values','line_number':1053,'multiline':False]
['text':'  supplied in changes that aren't fields, this will correctly','line_number':1054,'multiline':False]
['text':'  raise a TypeError.','line_number':1055,'multiline':False]
