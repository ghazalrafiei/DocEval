['text':' Distributed under the OSI-approved BSD 3-Clause License.  See accompanying
   file Copyright.txt or https://cmake.org/licensing for details.  ','line_number':1,'multiline':True]
['text':'-------------------------------------------------------------------------
  Portions of this source have been derived from the 'bindexplib' tool
  provided by the CERN ROOT Data Analysis Framework project (root.cern.ch).
  Permission has been granted by Pere Mato <pere.mato@cern.ch> to distribute
  this derived work under the CMake license.
-------------------------------------------------------------------------','line_number':3,'multiline':True]
['text':'
*----------------------------------------------------------------------
* Program:  dumpexts.exe
* Author:   Gordon Chaffee
*
* History:  The real functionality of this file was written by
*           Matt Pietrek in 1993 in his pedump utility.  I've
*           modified it to dump the externals in a bunch of object
*           files to create a .def file.
*
* Notes:    Visual C++ puts an underscore before each exported symbol.
*           This file removes them.  I don't know if this is a problem
*           this other compilers.  If _MSC_VER is defined,
*           the underscore is removed.  If not, it isn't.  To get a
*           full dump of an object file, use the -f option.  This can
*           help determine the something that may be different with a
*           compiler other than Visual C++.
*   ======================================
* Corrections (Axel 2006-04-04):
*   Conversion to C++. Mostly.
*
 * Extension (Axel 2006-03-15)
 *    As soon as an object file contains an /EXPORT directive (which
 *    is generated by the compiler when a symbol is declared as
 *    declspec(dllexport)) no to-be-exported symbols are printed,
 *    as the linker will see these directives, and if those directives
 *    are present we only export selectively (i.e. we trust the
 *    programmer).
 *
 *   ======================================
*   ======================================
* Corrections (Valery Fine 23/02/98):
*
*           The "(vector) deleting destructor" MUST not be exported
*           To recognize it the following test are introduced:
*  "@@UAEPAXI@Z"  scalar deleting dtor
*  "@@QAEPAXI@Z"  vector deleting dtor
*  "AEPAXI@Z"     vector deleting dtor with thunk adjustor
*   ======================================
* Corrections (Valery Fine 12/02/97):
*
*    It created a wrong EXPORTS for the global pointers and constants.
*    The Section Header has been involved to discover the missing information
*    Now the pointers are correctly supplied  supplied with "DATA" descriptor
*        the constants  with no extra descriptor.
*
* Corrections (Valery Fine 16/09/96):
*
*     It didn't work for C++ code with global variables and class definitons
*     The DumpExternalObject function has been introduced to generate .DEF file
*
* Author:   Valery Fine 16/09/96  (E-mail: fine@vxcern.cern.ch)
*----------------------------------------------------------------------
','line_number':10,'multiline':True]
['text':' unique_ptr','line_number':69,'multiline':False]
['text':' same as ANON_OBJECT_HEADER_V2 ','line_number':83,'multiline':True]
['text':' Must be IMAGE_FILE_MACHINE_UNKNOWN','line_number':84,'multiline':False]
['text':' Must be 0xffff','line_number':85,'multiline':False]
['text':' >= 2 (implies the Flags field is present)','line_number':86,'multiline':False]
['text':' Actual machine - IMAGE_FILE_MACHINE_xxx','line_number':87,'multiline':False]
['text':' {D1BAA1C7-BAEE-4ba9-AF20-FAF66AA4DCB8}','line_number':89,'multiline':False]
['text':' Size of data that follows the header','line_number':90,'multiline':False]
['text':' 0x1 -> contains metadata','line_number':91,'multiline':False]
['text':' Size of CLR metadata','line_number':92,'multiline':False]
['text':' Offset of CLR metadata','line_number':93,'multiline':False]
['text':' bigobj specifics ','line_number':95,'multiline':True]
['text':' extended from WORD','line_number':96,'multiline':False]
['text':' if 0, use LongName','line_number':105,'multiline':False]
['text':' offset into string table','line_number':106,'multiline':False]
['text':' PBYTE  [2]','line_number':108,'multiline':False]
['text':'
+ * Utility func, strstr with size
+ ','line_number':131,'multiline':True]
['text':' cmANON_OBJECT_HEADER_BIGOBJ or IMAGE_FILE_HEADER','line_number':156,'multiline':False]
['text':' cmPIMAGE_SYMBOL_EX or PIMAGE_SYMBOL','line_number':158,'multiline':False]
['text':'
   *----------------------------------------------------------------------
   * Constructor --
   *
   *     Initialize variables from pointer to object header.
   *
   *----------------------------------------------------------------------
   ','line_number':162,'multiline':True]
['text':'
   *----------------------------------------------------------------------
   * DumpObjFile --
   *
   *      Dump an object file's exported symbols.
   *----------------------------------------------------------------------
   ','line_number':184,'multiline':True]
['text':'
   *----------------------------------------------------------------------
   * DumpExternalsObjects --
   *
   *      Dumps a COFF symbol table from an OBJ.
   *----------------------------------------------------------------------
   ','line_number':195,'multiline':True]
['text':'
     * The string table apparently starts right after the symbol table
     ','line_number':207,'multiline':True]
['text':'
          *    The name of the Function entry points
          ','line_number':216,'multiline':True]
['text':' clear out any leading spaces','line_number':226,'multiline':False]
['text':' if it starts with _ and has an @ then it is a __cdecl','line_number':229,'multiline':False]
['text':' so remove the @ stuff for the export','line_number':230,'multiline':False]
['text':' For i386 builds we need to remove _','line_number':237,'multiline':False]
['text':' Check whether it is "Scalar deleting destructor" and "Vector','line_number':242,'multiline':False]
['text':' deleting destructor"','line_number':243,'multiline':False]
['text':' if scalarPrefix and vectorPrefix are not found then print','line_number':244,'multiline':False]
['text':' the symbol','line_number':245,'multiline':False]
['text':' The original code had a check for','line_number':248,'multiline':False]
['text':'     symbol.find("real@") == string::npos)','line_number':249,'multiline':False]
['text':' but this disallows member functions with the name "real".','line_number':250,'multiline':False]
['text':' skip symbols containing a dot','line_number':255,'multiline':False]
['text':' Read only (i.e. constants) must be excluded','line_number':258,'multiline':False]
['text':'
      * Take into account any aux symbols
      ','line_number':271,'multiline':True]
['text':' Get the buffer length we need for the full path.','line_number':321,'multiline':False]
['text':' Does it look like a COFF OBJ file??? ','line_number':378,'multiline':True]
['text':'
    * The two tests above aren't what they look like.  They're
    * really checking for IMAGE_FILE_HEADER.Machine == i386 (0x14C)
    * and IMAGE_FILE_HEADER.SizeOfOptionalHeader == 0;
    ','line_number':384,'multiline':True]
['text':' check for /bigobj format','line_number':394,'multiline':False]
['text':' skip the LIBRAY and EXPORTS lines (if any)','line_number':430,'multiline':False]
['text':' remove leading tabs & spaces','line_number':435,'multiline':False]
['text':' Get file extension and convert it to lower case.','line_number':450,'multiline':False]
