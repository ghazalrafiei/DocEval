['text':'
;uInt longest_match_x64(
;    deflate_state *s,
;    IPos cur_match);                             // current match 

; gvmat64.S -- Asm portion of the optimized longest_match for 32 bits x86_64
;  (AMD64 on Athlon 64, Opteron, Phenom
;     and Intel EM64T on Pentium 4 with EM64T, Pentium D, Core 2 Duo, Core I5/I7)
; this file is translation from gvmat64.asm to GCC 4.x (for Linux, Mac XCode)
; Copyright (C) 1995-2010 Jean-loup Gailly, Brian Raiter and Gilles Vollant.
;
; File written by Gilles Vollant, by converting to assembly the longest_match
;  from Jean-loup Gailly in deflate.c of zLib and infoZip zip.
;  and by taking inspiration on asm686 with masm, optimised assembly code
;        from Brian Raiter, written 1998
;
;  This software is provided 'as-is', without any express or implied
;  warranty.  In no event will the authors be held liable for any damages
;  arising from the use of this software.
;
;  Permission is granted to anyone to use this software for any purpose,
;  including commercial applications, and to alter it and redistribute it
;  freely, subject to the following restrictions:
;
;  1. The origin of this software must not be misrepresented; you must not
;     claim that you wrote the original software. If you use this software
;     in a product, an acknowledgment in the product documentation would be
;     appreciated but is not required.
;  2. Altered source versions must be plainly marked as such, and must not be
;     misrepresented as being the original software
;  3. This notice may not be removed or altered from any source distribution.
;
;         http://www.zlib.net
;         http://www.winimage.com/zLibDll
;         http://www.muppetlabs.com/~breadbox/software/assembly.html
;
; to compile this file for zLib, I use option:
;   gcc -c -arch x86_64 gvmat64.S


;uInt longest_match(s, cur_match)
;    deflate_state *s;
;    IPos cur_match;                             // current match /
;
; with XCode for Mac, I had strange error with some jump on intel syntax
; this is why BEFORE_JMP and AFTER_JMP are used
 ','line_number':1,'multiline':True]
['text':'
; register used : rax,rbx,rcx,rdx,rsi,rdi,r8,r9,r10,r11,r12
; free register :  r14,r15
; register can be saved : rsp
','line_number':67,'multiline':True]
['text':'
;  all the +4 offsets are due to the addition of pending_buf_size (in zlib
;  in the deflate_state structure since the asm code was first written
;  (if you compile with zlib 1.0.4 or older, remove the +4).
;  Note : these value are good with a 8 bytes boundary pack structure
','line_number':86,'multiline':True]
['text':'
;;; Offsets for fields in the deflate_state structure. These numbers
;;; are calculated from the definition of deflate_state, with the
;;; assumption that the compiler will dword-align the fields. (Thus,
;;; changing the definition of deflate_state could easily cause this
;;; program to crash horribly, without so much as a warning at
;;; compile time. Sigh.)

;  all the +zlib1222add offsets are due to the addition of fields
;  in zlib in the deflate_state structure since the asm code was first written
;  (if you compile with zlib 1.0.4 or older, use "zlib1222add equ (-4)").
;  (if you compile with zlib between 1.0.5 and 1.2.2.1, use "zlib1222add equ 0").
;  if you compile with zlib 1.2.2.2 or later , use "zlib1222add equ 8").
','line_number':97,'multiline':True]
['text':' you can check the structure offset by running

#include <stdlib.h>
#include <stdio.h>
#include "deflate.h"

void print_depl()
{
deflate_state ds;
deflate_state *s=&ds;
printf("size pointer=%u\n",(int)sizeof(void*));

printf("#define dsWSize         %u\n",(int)(((char*)&(s->w_size))-((char*)s)));
printf("#define dsWMask         %u\n",(int)(((char*)&(s->w_mask))-((char*)s)));
printf("#define dsWindow        %u\n",(int)(((char*)&(s->window))-((char*)s)));
printf("#define dsPrev          %u\n",(int)(((char*)&(s->prev))-((char*)s)));
printf("#define dsMatchLen      %u\n",(int)(((char*)&(s->match_length))-((char*)s)));
printf("#define dsPrevMatch     %u\n",(int)(((char*)&(s->prev_match))-((char*)s)));
printf("#define dsStrStart      %u\n",(int)(((char*)&(s->strstart))-((char*)s)));
printf("#define dsMatchStart    %u\n",(int)(((char*)&(s->match_start))-((char*)s)));
printf("#define dsLookahead     %u\n",(int)(((char*)&(s->lookahead))-((char*)s)));
printf("#define dsPrevLen       %u\n",(int)(((char*)&(s->prev_length))-((char*)s)));
printf("#define dsMaxChainLen   %u\n",(int)(((char*)&(s->max_chain_length))-((char*)s)));
printf("#define dsGoodMatch     %u\n",(int)(((char*)&(s->good_match))-((char*)s)));
printf("#define dsNiceMatch     %u\n",(int)(((char*)&(s->nice_match))-((char*)s)));
}
','line_number':114,'multiline':True]
['text':'; 0ffffffffh on infozip','line_number':162,'multiline':False]
['text':'
; windows:
; parameter 1 in rcx(deflate state s), param 2 in rdx (cur match)

; see http://weblogs.asp.net/oldnewthing/archive/2004/01/14/58579.aspx and
; http://msdn.microsoft.com/library/en-us/kmarch/hh/kmarch/64bitAMD_8e951dd2-ee77-4728-8702-55ce4b5dd24a.xml.asp
;
; All registers must be preserved across the call, except for
;   rax, rcx, rdx, r8, r9, r10, and r11, which are scratch.

;
; gcc on macosx-linux:
; see http://www.x86-64.org/documentation/abi-0.99.pdf
; param 1 in rdi, param 2 in rsi
; rbx, rsp, rbp, r12 to r15 must be preserved

;;; Save registers that the compiler may be using, and adjust esp to
;;; make room for our stack frame.


;;; Retrieve the function arguments. r8d will hold cur_match
;;; throughout the entire function. edx will hold the pointer to the
;;; deflate_state structure during the function's setup (before
;;; entering the main loop.

; ms: parameter 1 in rcx (deflate_state* s), param 2 in edx -> r8 (cur match)
; mac: param 1 in rdi, param 2 rsi
; this clear high 32 bits of r8, which can be garbage in both r8 and rdx
','line_number':168,'multiline':True]
['text':';;; uInt wmask = s->w_mask;','line_number':212,'multiline':False]
['text':';;; unsigned chain_length = s->max_chain_length;','line_number':213,'multiline':False]
['text':';;; if (s->prev_length >= s->good_match) {','line_number':214,'multiline':False]
['text':';;;     chain_length >>= 2;','line_number':215,'multiline':False]
['text':';;; }','line_number':216,'multiline':False]
['text':';;; chainlen is decremented once beforehand so that the function can','line_number':228,'multiline':False]
['text':';;; use the sign flag instead of the zero flag for the exit test.','line_number':229,'multiline':False]
['text':';;; It is then shifted into the high word, to make room for the wmask','line_number':230,'multiline':False]
['text':';;; value, which it will always accompany.','line_number':231,'multiline':False]
['text':';;; on zlib only','line_number':237,'multiline':False]
['text':';;; if ((uInt)nice_match > s->lookahead) nice_match = s->lookahead;','line_number':238,'multiline':False]
['text':';;; register Bytef *scan = s->window + s->strstart;','line_number':251,'multiline':False]
['text':';;; Determine how many bytes the scan ptr is off from being','line_number':256,'multiline':False]
['text':';;; dword-aligned.','line_number':257,'multiline':False]
['text':';;; IPos limit = s->strstart > (IPos)MAX_DIST(s) ?','line_number':263,'multiline':False]
['text':';;;     s->strstart - (IPos)MAX_DIST(s) : NIL;','line_number':264,'multiline':False]
['text':';;; int best_len = s->prev_length;','line_number':278,'multiline':False]
['text':';;; Store the sum of s->window + best_len in esi locally, and in esi.','line_number':281,'multiline':False]
['text':';;; register ush scan_start = *(ushf*)scan;','line_number':285,'multiline':False]
['text':';;; register ush scan_end   = *(ushf*)(scan+best_len-1);','line_number':286,'multiline':False]
['text':';;; Posf *prev = s->prev;','line_number':287,'multiline':False]
['text':';;; Jump into the main loop.','line_number':294,'multiline':False]
['text':'
;;; do {
;;;     match = s->window + cur_match;
;;;     if (*(ushf*)(match+best_len-1) != scan_end ||
;;;         *(ushf*)match != scan_start) continue;
;;;     [...]
;;; } while ((cur_match = prev[cur_match & wmask]) > limit
;;;          && --chain_length != 0);
;;;
;;; Here is the inner loop of the function. The function will spend the
;;; majority of its time in this loop, and majority of that time will
;;; be spent in the first ten instructions.
;;;
;;; Within this loop:
;;; ebx = scanend
;;; r8d = curmatch
;;; edx = chainlenwmask - i.e., ((chainlen << 16) | wmask)
;;; esi = windowbestlen - i.e., (window + bestlen)
;;; edi = prev
;;; ebp = limit
','line_number':362,'multiline':True]
['text':';;; Store the current value of chainlen.','line_number':410,'multiline':False]
['text':'
;;; Point edi to the string under scrutiny, and esi to the string we
;;; are hoping to match it up with. In actuality, esi and edi are
;;; both pointed (MAX_MATCH_8 - scanalign) bytes ahead, and edx is
;;; initialized to -(MAX_MATCH_8 - scanalign).
','line_number':412,'multiline':True]
['text':'; -(MAX_MATCH_8)','line_number':419,'multiline':False]
['text':';MAX_MATCH_8]','line_number':420,'multiline':False]
['text':';MAX_MATCH_8]','line_number':421,'multiline':False]
['text':'
;;; Test the strings for equality, 8 bytes at a time. At the end,
;;; adjust rdx so that it is offset to the exact byte that mismatched.
;;;
;;; We already know at this point that the first three bytes of the
;;; strings match each other, and they can be safely passed over before
;;; starting the compare loop. So what this code does is skip over 0-3
;;; bytes, as much as necessary in order to dword-align the edi
;;; pointer. (rsi will still be misaligned three times out of four.)
;;;
;;; It should be confessed that this loop usually does not represent
;;; much of the total running time. Replacing it with a more
;;; straightforward "rep cmpsb" would not drastically degrade
;;; performance.
','line_number':426,'multiline':True]
['text':';;; Calculate the length of the match. If it is longer than MAX_MATCH,','line_number':488,'multiline':False]
['text':';;; then automatically accept it as the best possible match and leave.','line_number':489,'multiline':False]
['text':'
;;; If the length of the match is not longer than the best match we
;;; have so far, then forget it and return to the lookup loop.
;///////////////////////////////////
','line_number':497,'multiline':True]
['text':'
;;;         s->match_start = cur_match;
;;;         best_len = len;
;;;         if (len >= nice_match) break;
;;;         scan_end = *(ushf*)(scan+best_len-1);
','line_number':512,'multiline':True]
['text':';;; Accept the current string, with the maximum possible length.','line_number':535,'multiline':False]
['text':';;; if ((uInt)best_len <= s->lookahead) return (uInt)best_len;','line_number':541,'multiline':False]
['text':';;; return s->lookahead;','line_number':542,'multiline':False]
['text':';;; Restore the stack and return from whence we came.','line_number':551,'multiline':False]
['text':'        mov rsi,[save_rsi]','line_number':554,'multiline':False]
['text':'        mov rdi,[save_rdi]','line_number':555,'multiline':False]
['text':'; please don't remove this string !','line_number':565,'multiline':False]
['text':'; Your can freely use gvmat64 in any free or commercial app','line_number':566,'multiline':False]
['text':'; but it is far better don't remove the string in the binary!','line_number':567,'multiline':False]
['text':'   db     0dh,0ah,"asm686 with masm, optimised assembly code from Brian Raiter, written 1998, converted to amd 64 by Gilles Vollant 2005",0dh,0ah,0','line_number':568,'multiline':False]
