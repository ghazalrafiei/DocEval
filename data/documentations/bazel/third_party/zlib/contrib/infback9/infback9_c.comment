['text':' infback9.c -- inflate deflate64 data using a call-back interface
 * Copyright (C) 1995-2008 Mark Adler
 * For conditions of distribution and use, see copyright notice in zlib.h
 ','line_number':1,'multiline':True]
['text':'
   strm provides memory allocation functions in zalloc and zfree, or
   Z_NULL to use the library memory allocation functions.

   window is a user-supplied window and output buffer that is 64K bytes.
 ','line_number':13,'multiline':True]
['text':' in case we return an error ','line_number':28,'multiline':True]
['text':'
   Build and output length and distance decoding tables for fixed code
   decoding.
 ','line_number':43,'multiline':True]
['text':' literal/length table ','line_number':56,'multiline':True]
['text':' distance table ','line_number':67,'multiline':True]
['text':' write tables ','line_number':74,'multiline':True]
['text':' MAKEFIXED ','line_number':107,'multiline':True]
['text':' Macros for inflateBack(): ','line_number':109,'multiline':True]
['text':' Clear the input bit accumulator ','line_number':111,'multiline':True]
['text':' Assure that some input is available.  If input is requested, but denied,
   then return a Z_BUF_ERROR from inflateBack(). ','line_number':118,'multiline':True]
['text':' Get a byte of input into the bit accumulator, or return from inflateBack()
   with an error if there is no input available. ','line_number':132,'multiline':True]
['text':' Assure that there are at least n bits in the bit accumulator.  If there is
   not enough available input to do that, then return from inflateBack() with
   an error. ','line_number':142,'multiline':True]
['text':' Return the low n bits of the bit accumulator (n <= 16) ','line_number':151,'multiline':True]
['text':' Remove n bits from the bit accumulator ','line_number':155,'multiline':True]
['text':' Remove zero to seven bits as needed to go to a byte boundary ','line_number':162,'multiline':True]
['text':' Assure that some output space is available, by writing out the window
   if it's full.  If the write fails, return from inflateBack() with a
   Z_BUF_ERROR. ','line_number':169,'multiline':True]
['text':'
   strm provides the memory allocation functions and window buffer on input,
   and provides information on the unused input on return.  For Z_DATA_ERROR
   returns, strm will also provide an error message.

   in() and out() are the call-back input and output functions.  When
   inflateBack() needs more input, it calls in().  When inflateBack() has
   filled the window with output, or when it completes with data in the
   window, it calls out() to write out the data.  The application must not
   change the provided input until in() is called again or inflateBack()
   returns.  The application must not change the window/output buffer until
   inflateBack() returns.

   in() and out() are called with a descriptor parameter provided in the
   inflateBack() call.  This parameter can be a structure that provides the
   information required to do the read or write, as well as accumulated
   information on the input and output such as totals and check values.

   in() should return zero on failure.  out() should return non-zero on
   failure.  If either in() or out() fails, than inflateBack() returns a
   Z_BUF_ERROR.  strm->next_in can be checked for Z_NULL to see whether it
   was in() or out() that caused in the error.  Otherwise,  inflateBack()
   returns Z_STREAM_END on success, Z_DATA_ERROR for an deflate format
   error, or Z_MEM_ERROR if it could not allocate memory for the state.
   inflateBack() can also return Z_STREAM_ERROR if the input parameters
   are not correct, i.e. strm is Z_NULL or the state was not initialized.
 ','line_number':185,'multiline':True]
['text':' next input ','line_number':215,'multiline':True]
['text':' next output ','line_number':216,'multiline':True]
['text':' available input ','line_number':217,'multiline':True]
['text':' available output ','line_number':218,'multiline':True]
['text':' current inflate mode ','line_number':219,'multiline':True]
['text':' true if processing last block ','line_number':220,'multiline':True]
['text':' true if the window has wrapped ','line_number':221,'multiline':True]
['text':' allocated sliding window, if needed ','line_number':222,'multiline':True]
['text':' bit buffer ','line_number':223,'multiline':True]
['text':' bits in bit buffer ','line_number':224,'multiline':True]
['text':' extra bits needed ','line_number':225,'multiline':True]
['text':' literal or length of data to copy ','line_number':226,'multiline':True]
['text':' distance back to copy string from ','line_number':227,'multiline':True]
['text':' number of stored or match bytes to copy ','line_number':228,'multiline':True]
['text':' where to copy match bytes from ','line_number':229,'multiline':True]
['text':' starting table for length/literal codes ','line_number':230,'multiline':True]
['text':' starting table for distance codes ','line_number':231,'multiline':True]
['text':' index bits for lencode ','line_number':232,'multiline':True]
['text':' index bits for distcode ','line_number':233,'multiline':True]
['text':' current decoding table entry ','line_number':234,'multiline':True]
['text':' parent table entry ','line_number':235,'multiline':True]
['text':' length to copy for repeats, bits to drop ','line_number':236,'multiline':True]
['text':' return code ','line_number':237,'multiline':True]
['text':' permutation of code lengths ','line_number':238,'multiline':True]
['text':' Check that the strm exists and that the state was initialized ','line_number':242,'multiline':True]
['text':' Reset the state ','line_number':247,'multiline':True]
['text':' Inflate until end of block marked as last ','line_number':262,'multiline':True]
['text':' determine and dispatch block type ','line_number':266,'multiline':True]
['text':' stored block ','line_number':276,'multiline':True]
['text':' fixed block ','line_number':281,'multiline':True]
['text':' decode codes ','line_number':288,'multiline':True]
['text':' dynamic block ','line_number':290,'multiline':True]
['text':' get and verify stored block length ','line_number':303,'multiline':True]
['text':' go to byte boundary ','line_number':304,'multiline':True]
['text':' copy stored block from input to output ','line_number':316,'multiline':True]
['text':' get dynamic table entries descriptor ','line_number':335,'multiline':True]
['text':' get code length code lengths (not a typo) ','line_number':350,'multiline':True]
['text':' get length and distance code code lengths ','line_number':371,'multiline':True]
['text':' handle error breaks in while ','line_number':421,'multiline':True]
['text':' check for end-of-block code (better have one) ','line_number':424,'multiline':True]
['text':' build code tables -- note: do not change the lenbits or distbits
               values here (9 and 6) without reading the comments in inftree9.h
               concerning the ENOUGH constants, which depend on those values ','line_number':431,'multiline':True]
['text':' get a literal, length, or end-of-block code ','line_number':458,'multiline':True]
['text':' process literal ','line_number':477,'multiline':True]
['text':' process end of block ','line_number':489,'multiline':True]
['text':' invalid code ','line_number':496,'multiline':True]
['text':' length code -- get extra bits, if any ','line_number':503,'multiline':True]
['text':' get distance code ','line_number':512,'multiline':True]
['text':' get distance extra bits, if any ','line_number':536,'multiline':True]
['text':' copy match from window to output ','line_number':550,'multiline':True]
['text':' inflate stream terminated properly -- write leftover output ','line_number':572,'multiline':True]
['text':' can't happen, but makes compilers happy ','line_number':584,'multiline':True]
['text':' Return unused input ','line_number':589,'multiline':True]
