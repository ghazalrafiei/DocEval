['text':' Copyright 2016 Google Inc.','line_number':1,'multiline':False]
['text':'','line_number':2,'multiline':False]
['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':3,'multiline':False]
['text':' you may not use this file except in compliance with the License.','line_number':4,'multiline':False]
['text':' You may obtain a copy of the License at','line_number':5,'multiline':False]
['text':'','line_number':6,'multiline':False]
['text':'     http://www.apache.org/licenses/LICENSE-2.0','line_number':7,'multiline':False]
['text':'','line_number':8,'multiline':False]
['text':' Unless required by applicable law or agreed to in writing, software','line_number':9,'multiline':False]
['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':10,'multiline':False]
['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':11,'multiline':False]
['text':' See the License for the specific language governing permissions and','line_number':12,'multiline':False]
['text':' limitations under the License.','line_number':13,'multiline':False]
['text':' #### Introduction','line_number':26,'multiline':False]
['text':'','line_number':27,'multiline':False]
['text':' The Byte Stream API enables a client to read and write a stream of bytes to','line_number':28,'multiline':False]
['text':' and from a resource. Resources have names, and these names are supplied in','line_number':29,'multiline':False]
['text':' the API calls below to identify the resource that is being read from or','line_number':30,'multiline':False]
['text':' written to.','line_number':31,'multiline':False]
['text':'','line_number':32,'multiline':False]
['text':' All implementations of the Byte Stream API export the interface defined here:','line_number':33,'multiline':False]
['text':'','line_number':34,'multiline':False]
['text':' * `Read()`: Reads the contents of a resource.','line_number':35,'multiline':False]
['text':'','line_number':36,'multiline':False]
['text':' * `Write()`: Writes the contents of a resource. The client can call `Write()`','line_number':37,'multiline':False]
['text':'   multiple times with the same resource and can check the status of the write','line_number':38,'multiline':False]
['text':'   by calling `QueryWriteStatus()`.','line_number':39,'multiline':False]
['text':'','line_number':40,'multiline':False]
['text':' #### Service parameters and metadata','line_number':41,'multiline':False]
['text':'','line_number':42,'multiline':False]
['text':' The ByteStream API provides no direct way to access/modify any metadata','line_number':43,'multiline':False]
['text':' associated with the resource.','line_number':44,'multiline':False]
['text':'','line_number':45,'multiline':False]
['text':' #### Errors','line_number':46,'multiline':False]
['text':'','line_number':47,'multiline':False]
['text':' The errors returned by the service are in the Google canonical error space.','line_number':48,'multiline':False]
['text':' `Read()` is used to retrieve the contents of a resource as a sequence','line_number':50,'multiline':False]
['text':' of bytes. The bytes are returned in a sequence of responses, and the','line_number':51,'multiline':False]
['text':' responses are delivered as the results of a server-side streaming RPC.','line_number':52,'multiline':False]
['text':' `Write()` is used to send the contents of a resource as a sequence of','line_number':55,'multiline':False]
['text':' bytes. The bytes are sent in a sequence of request protos of a client-side','line_number':56,'multiline':False]
['text':' streaming RPC.','line_number':57,'multiline':False]
['text':'','line_number':58,'multiline':False]
['text':' A `Write()` action is resumable. If there is an error or the connection is','line_number':59,'multiline':False]
['text':' broken during the `Write()`, the client should check the status of the','line_number':60,'multiline':False]
['text':' `Write()` by calling `QueryWriteStatus()` and continue writing from the','line_number':61,'multiline':False]
['text':' returned `committed_size`. This may be less than the amount of data the','line_number':62,'multiline':False]
['text':' client previously sent.','line_number':63,'multiline':False]
['text':'','line_number':64,'multiline':False]
['text':' Calling `Write()` on a resource name that was previously written and','line_number':65,'multiline':False]
['text':' finalized could cause an error, depending on whether the underlying service','line_number':66,'multiline':False]
['text':' allows over-writing of previously written resources.','line_number':67,'multiline':False]
['text':'','line_number':68,'multiline':False]
['text':' When the client closes the request channel, the service will respond with','line_number':69,'multiline':False]
['text':' a `WriteResponse`. The service will not view the resource as `complete`','line_number':70,'multiline':False]
['text':' until the client has sent a `WriteRequest` with `finish_write` set to','line_number':71,'multiline':False]
['text':' `true`. Sending any requests on a stream after sending a request with','line_number':72,'multiline':False]
['text':' `finish_write` set to `true` will cause an error. The client **should**','line_number':73,'multiline':False]
['text':' check the `WriteResponse` it receives to determine how much data the','line_number':74,'multiline':False]
['text':' service was able to commit and whether the service views the resource as','line_number':75,'multiline':False]
['text':' `complete` or not.','line_number':76,'multiline':False]
['text':' `QueryWriteStatus()` is used to find the `committed_size` for a resource','line_number':79,'multiline':False]
['text':' that is being written, which can then be used as the `write_offset` for','line_number':80,'multiline':False]
['text':' the next `Write()` call.','line_number':81,'multiline':False]
['text':'','line_number':82,'multiline':False]
['text':' If the resource does not exist (i.e., the resource has been deleted, or the','line_number':83,'multiline':False]
['text':' first `Write()` has not yet reached the service), this method returns the','line_number':84,'multiline':False]
['text':' error `NOT_FOUND`.','line_number':85,'multiline':False]
['text':'','line_number':86,'multiline':False]
['text':' The client **may** call `QueryWriteStatus()` at any time to determine how','line_number':87,'multiline':False]
['text':' much data has been processed for this resource. This is useful if the','line_number':88,'multiline':False]
['text':' client is buffering data and needs to know which data can be safely','line_number':89,'multiline':False]
['text':' evicted. For any sequence of `QueryWriteStatus()` calls for a given','line_number':90,'multiline':False]
['text':' resource name, the sequence of returned `committed_size` values will be','line_number':91,'multiline':False]
['text':' non-decreasing.','line_number':92,'multiline':False]
['text':' Request object for ByteStream.Read.','line_number':96,'multiline':False]
['text':' The name of the resource to read.','line_number':98,'multiline':False]
['text':' The offset for the first byte to return in the read, relative to the start','line_number':101,'multiline':False]
['text':' of the resource.','line_number':102,'multiline':False]
['text':'','line_number':103,'multiline':False]
['text':' A `read_offset` that is negative or greater than the size of the resource','line_number':104,'multiline':False]
['text':' will cause an `OUT_OF_RANGE` error.','line_number':105,'multiline':False]
['text':' The maximum number of `data` bytes the server is allowed to return in the','line_number':108,'multiline':False]
['text':' sum of all `ReadResponse` messages. A `read_limit` of zero indicates that','line_number':109,'multiline':False]
['text':' there is no limit, and a negative `read_limit` will cause an error.','line_number':110,'multiline':False]
['text':'','line_number':111,'multiline':False]
['text':' If the stream returns fewer bytes than allowed by the `read_limit` and no','line_number':112,'multiline':False]
['text':' error occurred, the stream includes all data from the `read_offset` to the','line_number':113,'multiline':False]
['text':' end of the resource.','line_number':114,'multiline':False]
['text':' Response object for ByteStream.Read.','line_number':118,'multiline':False]
['text':' A portion of the data for the resource. The service **may** leave `data`','line_number':120,'multiline':False]
['text':' empty for any given `ReadResponse`. This enables the service to inform the','line_number':121,'multiline':False]
['text':' client that the request is still live while it is running an operation to','line_number':122,'multiline':False]
['text':' generate more data.','line_number':123,'multiline':False]
['text':' Request object for ByteStream.Write.','line_number':127,'multiline':False]
['text':' The name of the resource to write. This **must** be set on the first','line_number':129,'multiline':False]
['text':' `WriteRequest` of each `Write()` action. If it is set on subsequent calls,','line_number':130,'multiline':False]
['text':' it **must** match the value of the first request.','line_number':131,'multiline':False]
['text':' The offset from the beginning of the resource at which the data should be','line_number':134,'multiline':False]
['text':' written. It is required on all `WriteRequest`s.','line_number':135,'multiline':False]
['text':'','line_number':136,'multiline':False]
['text':' In the first `WriteRequest` of a `Write()` action, it indicates','line_number':137,'multiline':False]
['text':' the initial offset for the `Write()` call. The value **must** be equal to','line_number':138,'multiline':False]
['text':' the `committed_size` that a call to `QueryWriteStatus()` would return.','line_number':139,'multiline':False]
['text':'','line_number':140,'multiline':False]
['text':' On subsequent calls, this value **must** be set and **must** be equal to','line_number':141,'multiline':False]
['text':' the sum of the first `write_offset` and the sizes of all `data` bundles','line_number':142,'multiline':False]
['text':' sent previously on this stream.','line_number':143,'multiline':False]
['text':'','line_number':144,'multiline':False]
['text':' An incorrect value will cause an error.','line_number':145,'multiline':False]
['text':' If `true`, this indicates that the write is complete. Sending any','line_number':148,'multiline':False]
['text':' `WriteRequest`s subsequent to one in which `finish_write` is `true` will','line_number':149,'multiline':False]
['text':' cause an error.','line_number':150,'multiline':False]
['text':' A portion of the data for the resource. The client **may** leave `data`','line_number':153,'multiline':False]
['text':' empty for any given `WriteRequest`. This enables the client to inform the','line_number':154,'multiline':False]
['text':' service that the request is still live while it is running an operation to','line_number':155,'multiline':False]
['text':' generate more data.','line_number':156,'multiline':False]
['text':' Response object for ByteStream.Write.','line_number':160,'multiline':False]
['text':' The number of bytes that have been processed for the given resource.','line_number':162,'multiline':False]
['text':' Request object for ByteStream.QueryWriteStatus.','line_number':166,'multiline':False]
['text':' The name of the resource whose write status is being requested.','line_number':168,'multiline':False]
['text':' Response object for ByteStream.QueryWriteStatus.','line_number':172,'multiline':False]
['text':' The number of bytes that have been processed for the given resource.','line_number':174,'multiline':False]
['text':' `complete` is `true` only if the client has sent a `WriteRequest` with','line_number':177,'multiline':False]
['text':' `finish_write` set to true, and the server has processed that request.','line_number':178,'multiline':False]
