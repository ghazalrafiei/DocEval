['text':' Copyright 2016 Google Inc.','line_number':1,'multiline':False]
['text':'','line_number':2,'multiline':False]
['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':3,'multiline':False]
['text':' you may not use this file except in compliance with the License.','line_number':4,'multiline':False]
['text':' You may obtain a copy of the License at','line_number':5,'multiline':False]
['text':'','line_number':6,'multiline':False]
['text':'     http://www.apache.org/licenses/LICENSE-2.0','line_number':7,'multiline':False]
['text':'','line_number':8,'multiline':False]
['text':' Unless required by applicable law or agreed to in writing, software','line_number':9,'multiline':False]
['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':10,'multiline':False]
['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':11,'multiline':False]
['text':' See the License for the specific language governing permissions and','line_number':12,'multiline':False]
['text':' limitations under the License.','line_number':13,'multiline':False]
['text':' Represents a color in the RGBA color space. This representation is designed','line_number':28,'multiline':False]
['text':' for simplicity of conversion to/from color representations in various','line_number':29,'multiline':False]
['text':' languages over compactness; for example, the fields of this representation','line_number':30,'multiline':False]
['text':' can be trivially provided to the constructor of "java.awt.Color" in Java; it','line_number':31,'multiline':False]
['text':' can also be trivially provided to UIColor's "+colorWithRed:green:blue:alpha"','line_number':32,'multiline':False]
['text':' method in iOS; and, with just a little work, it can be easily formatted into','line_number':33,'multiline':False]
['text':' a CSS "rgba()" string in JavaScript, as well. Here are some examples:','line_number':34,'multiline':False]
['text':'','line_number':35,'multiline':False]
['text':' Example (Java):','line_number':36,'multiline':False]
['text':'','line_number':37,'multiline':False]
['text':'      import com.google.type.Color;','line_number':38,'multiline':False]
['text':'','line_number':39,'multiline':False]
['text':'      // ...','line_number':40,'multiline':False]
['text':'      public static java.awt.Color fromProto(Color protocolor) {','line_number':41,'multiline':False]
['text':'        float alpha = protocolor.hasAlpha()','line_number':42,'multiline':False]
['text':'            ? protocolor.getAlpha().getValue()','line_number':43,'multiline':False]
['text':'            : 1.0;','line_number':44,'multiline':False]
['text':'','line_number':45,'multiline':False]
['text':'        return new java.awt.Color(','line_number':46,'multiline':False]
['text':'            protocolor.getRed(),','line_number':47,'multiline':False]
['text':'            protocolor.getGreen(),','line_number':48,'multiline':False]
['text':'            protocolor.getBlue(),','line_number':49,'multiline':False]
['text':'            alpha);','line_number':50,'multiline':False]
['text':'      }','line_number':51,'multiline':False]
['text':'','line_number':52,'multiline':False]
['text':'      public static Color toProto(java.awt.Color color) {','line_number':53,'multiline':False]
['text':'        float red = (float) color.getRed();','line_number':54,'multiline':False]
['text':'        float green = (float) color.getGreen();','line_number':55,'multiline':False]
['text':'        float blue = (float) color.getBlue();','line_number':56,'multiline':False]
['text':'        float denominator = 255.0;','line_number':57,'multiline':False]
['text':'        Color.Builder resultBuilder =','line_number':58,'multiline':False]
['text':'            Color','line_number':59,'multiline':False]
['text':'                .newBuilder()','line_number':60,'multiline':False]
['text':'                .setRed(red / denominator)','line_number':61,'multiline':False]
['text':'                .setGreen(green / denominator)','line_number':62,'multiline':False]
['text':'                .setBlue(blue / denominator);','line_number':63,'multiline':False]
['text':'        int alpha = color.getAlpha();','line_number':64,'multiline':False]
['text':'        if (alpha != 255) {','line_number':65,'multiline':False]
['text':'          result.setAlpha(','line_number':66,'multiline':False]
['text':'              FloatValue','line_number':67,'multiline':False]
['text':'                  .newBuilder()','line_number':68,'multiline':False]
['text':'                  .setValue(((float) alpha) / denominator)','line_number':69,'multiline':False]
['text':'                  .build());','line_number':70,'multiline':False]
['text':'        }','line_number':71,'multiline':False]
['text':'        return resultBuilder.build();','line_number':72,'multiline':False]
['text':'      }','line_number':73,'multiline':False]
['text':'      // ...','line_number':74,'multiline':False]
['text':'','line_number':75,'multiline':False]
['text':' Example (iOS / Obj-C):','line_number':76,'multiline':False]
['text':'','line_number':77,'multiline':False]
['text':'      // ...','line_number':78,'multiline':False]
['text':'      static UIColor* fromProto(Color* protocolor) {','line_number':79,'multiline':False]
['text':'         float red = [protocolor red];','line_number':80,'multiline':False]
['text':'         float green = [protocolor green];','line_number':81,'multiline':False]
['text':'         float blue = [protocolor blue];','line_number':82,'multiline':False]
['text':'         FloatValue* alpha_wrapper = [protocolor alpha];','line_number':83,'multiline':False]
['text':'         float alpha = 1.0;','line_number':84,'multiline':False]
['text':'         if (alpha_wrapper != nil) {','line_number':85,'multiline':False]
['text':'           alpha = [alpha_wrapper value];','line_number':86,'multiline':False]
['text':'         }','line_number':87,'multiline':False]
['text':'         return [UIColor colorWithRed:red green:green blue:blue alpha:alpha];','line_number':88,'multiline':False]
['text':'      }','line_number':89,'multiline':False]
['text':'','line_number':90,'multiline':False]
['text':'      static Color* toProto(UIColor* color) {','line_number':91,'multiline':False]
['text':'          CGFloat red, green, blue, alpha;','line_number':92,'multiline':False]
['text':'          if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) {','line_number':93,'multiline':False]
['text':'            return nil;','line_number':94,'multiline':False]
['text':'          }','line_number':95,'multiline':False]
['text':'          Color* result = [Color alloc] init];','line_number':96,'multiline':False]
['text':'          [result setRed:red];','line_number':97,'multiline':False]
['text':'          [result setGreen:green];','line_number':98,'multiline':False]
['text':'          [result setBlue:blue];','line_number':99,'multiline':False]
['text':'          if (alpha <= 0.9999) {','line_number':100,'multiline':False]
['text':'            [result setAlpha:floatWrapperWithValue(alpha)];','line_number':101,'multiline':False]
['text':'          }','line_number':102,'multiline':False]
['text':'          [result autorelease];','line_number':103,'multiline':False]
['text':'          return result;','line_number':104,'multiline':False]
['text':'     }','line_number':105,'multiline':False]
['text':'     // ...','line_number':106,'multiline':False]
['text':'','line_number':107,'multiline':False]
['text':'  Example (JavaScript):','line_number':108,'multiline':False]
['text':'','line_number':109,'multiline':False]
['text':'     // ...','line_number':110,'multiline':False]
['text':'','line_number':111,'multiline':False]
['text':'     var protoToCssColor = function(rgb_color) {','line_number':112,'multiline':False]
['text':'        var redFrac = rgb_color.red || 0.0;','line_number':113,'multiline':False]
['text':'        var greenFrac = rgb_color.green || 0.0;','line_number':114,'multiline':False]
['text':'        var blueFrac = rgb_color.blue || 0.0;','line_number':115,'multiline':False]
['text':'        var red = Math.floor(redFrac * 255);','line_number':116,'multiline':False]
['text':'        var green = Math.floor(greenFrac * 255);','line_number':117,'multiline':False]
['text':'        var blue = Math.floor(blueFrac * 255);','line_number':118,'multiline':False]
['text':'','line_number':119,'multiline':False]
['text':'        if (!('alpha' in rgb_color)) {','line_number':120,'multiline':False]
['text':'           return rgbToCssColor_(red, green, blue);','line_number':121,'multiline':False]
['text':'        }','line_number':122,'multiline':False]
['text':'','line_number':123,'multiline':False]
['text':'        var alphaFrac = rgb_color.alpha.value || 0.0;','line_number':124,'multiline':False]
['text':'        var rgbParams = [red, green, blue].join(',');','line_number':125,'multiline':False]
['text':'        return ['rgba(', rgbParams, ',', alphaFrac, ')'].join('');','line_number':126,'multiline':False]
['text':'     };','line_number':127,'multiline':False]
['text':'','line_number':128,'multiline':False]
['text':'     var rgbToCssColor_ = function(red, green, blue) {','line_number':129,'multiline':False]
['text':'       var rgbNumber = new Number((red << 16) | (green << 8) | blue);','line_number':130,'multiline':False]
['text':'       var hexString = rgbNumber.toString(16);','line_number':131,'multiline':False]
['text':'       var missingZeros = 6 - hexString.length;','line_number':132,'multiline':False]
['text':'       var resultBuilder = ['#'];','line_number':133,'multiline':False]
['text':'       for (var i = 0; i < missingZeros; i++) {','line_number':134,'multiline':False]
['text':'          resultBuilder.push('0');','line_number':135,'multiline':False]
['text':'       }','line_number':136,'multiline':False]
['text':'       resultBuilder.push(hexString);','line_number':137,'multiline':False]
['text':'       return resultBuilder.join('');','line_number':138,'multiline':False]
['text':'     };','line_number':139,'multiline':False]
['text':'','line_number':140,'multiline':False]
['text':'     // ...','line_number':141,'multiline':False]
['text':' The amount of red in the color as a value in the interval [0, 1].','line_number':143,'multiline':False]
['text':' The amount of green in the color as a value in the interval [0, 1].','line_number':146,'multiline':False]
['text':' The amount of blue in the color as a value in the interval [0, 1].','line_number':149,'multiline':False]
['text':' The fraction of this color that should be applied to the pixel. That is,','line_number':152,'multiline':False]
['text':' the final pixel color is defined by the equation:','line_number':153,'multiline':False]
['text':'','line_number':154,'multiline':False]
['text':'   pixel color = alpha * (this color) + (1.0 - alpha) * (background color)','line_number':155,'multiline':False]
['text':'','line_number':156,'multiline':False]
['text':' This means that a value of 1.0 corresponds to a solid color, whereas','line_number':157,'multiline':False]
['text':' a value of 0.0 corresponds to a completely transparent color. This','line_number':158,'multiline':False]
['text':' uses a wrapper message rather than a simple float scalar so that it is','line_number':159,'multiline':False]
['text':' possible to distinguish between a default value and the value being unset.','line_number':160,'multiline':False]
['text':' If omitted, this color object is to be rendered as a solid color','line_number':161,'multiline':False]
['text':' (as if the alpha value had been explicitly given with a value of 1.0).','line_number':162,'multiline':False]
