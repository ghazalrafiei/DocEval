['text':' Copyright 2017 Google Inc.','line_number':1,'multiline':False]
['text':'','line_number':2,'multiline':False]
['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':3,'multiline':False]
['text':' you may not use this file except in compliance with the License.','line_number':4,'multiline':False]
['text':' You may obtain a copy of the License at','line_number':5,'multiline':False]
['text':'','line_number':6,'multiline':False]
['text':'     http://www.apache.org/licenses/LICENSE-2.0','line_number':7,'multiline':False]
['text':'','line_number':8,'multiline':False]
['text':' Unless required by applicable law or agreed to in writing, software','line_number':9,'multiline':False]
['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':10,'multiline':False]
['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':11,'multiline':False]
['text':' See the License for the specific language governing permissions and','line_number':12,'multiline':False]
['text':' limitations under the License.','line_number':13,'multiline':False]
['text':' Copyright 2017 Google Inc. All Rights Reserved.','line_number':27,'multiline':False]
['text':'','line_number':28,'multiline':False]
['text':' Proto file for the Google Cloud Machine Learning Engine.','line_number':29,'multiline':False]
['text':' Describes the online prediction service.','line_number':30,'multiline':False]
['text':' The Prediction API, which serves predictions for models managed by','line_number':34,'multiline':False]
['text':' ModelService.','line_number':35,'multiline':False]
['text':' Performs prediction on the data in the request.','line_number':37,'multiline':False]
['text':'','line_number':38,'multiline':False]
['text':' **** REMOVE FROM GENERATED DOCUMENTATION','line_number':39,'multiline':False]
['text':' Request for predictions to be issued against a trained model.','line_number':45,'multiline':False]
['text':'','line_number':46,'multiline':False]
['text':' The body of the request is a single JSON object with a single top-level','line_number':47,'multiline':False]
['text':' field:','line_number':48,'multiline':False]
['text':'','line_number':49,'multiline':False]
['text':' <dl>','line_number':50,'multiline':False]
['text':'   <dt>instances</dt>','line_number':51,'multiline':False]
['text':'   <dd>A JSON array containing values representing the instances to use for','line_number':52,'multiline':False]
['text':'       prediction.</dd>','line_number':53,'multiline':False]
['text':' </dl>','line_number':54,'multiline':False]
['text':'','line_number':55,'multiline':False]
['text':' The structure of each element of the instances list is determined by your','line_number':56,'multiline':False]
['text':' model's input definition. Instances can include named inputs or can contain','line_number':57,'multiline':False]
['text':' only unlabeled values.','line_number':58,'multiline':False]
['text':'','line_number':59,'multiline':False]
['text':' Not all data includes named inputs. Some instances will be simple','line_number':60,'multiline':False]
['text':' JSON values (boolean, number, or string). However, instances are often lists','line_number':61,'multiline':False]
['text':' of simple values, or complex nested lists. Here are some examples of request','line_number':62,'multiline':False]
['text':' bodies:','line_number':63,'multiline':False]
['text':'','line_number':64,'multiline':False]
['text':' CSV data with each row encoded as a string value:','line_number':65,'multiline':False]
['text':' <pre>','line_number':66,'multiline':False]
['text':' {"instances": ["1.0,true,\\"x\\"", "-2.0,false,\\"y\\""]}','line_number':67,'multiline':False]
['text':' </pre>','line_number':68,'multiline':False]
['text':' Plain text:','line_number':69,'multiline':False]
['text':' <pre>','line_number':70,'multiline':False]
['text':' {"instances": ["the quick brown fox", "la bruja le dio"]}','line_number':71,'multiline':False]
['text':' </pre>','line_number':72,'multiline':False]
['text':' Sentences encoded as lists of words (vectors of strings):','line_number':73,'multiline':False]
['text':' <pre>','line_number':74,'multiline':False]
['text':' {','line_number':75,'multiline':False]
['text':'   "instances": [','line_number':76,'multiline':False]
['text':'     ["the","quick","brown"],','line_number':77,'multiline':False]
['text':'     ["la","bruja","le"],','line_number':78,'multiline':False]
['text':'     ...','line_number':79,'multiline':False]
['text':'   ]','line_number':80,'multiline':False]
['text':' }','line_number':81,'multiline':False]
['text':' </pre>','line_number':82,'multiline':False]
['text':' Floating point scalar values:','line_number':83,'multiline':False]
['text':' <pre>','line_number':84,'multiline':False]
['text':' {"instances": [0.0, 1.1, 2.2]}','line_number':85,'multiline':False]
['text':' </pre>','line_number':86,'multiline':False]
['text':' Vectors of integers:','line_number':87,'multiline':False]
['text':' <pre>','line_number':88,'multiline':False]
['text':' {','line_number':89,'multiline':False]
['text':'   "instances": [','line_number':90,'multiline':False]
['text':'     [0, 1, 2],','line_number':91,'multiline':False]
['text':'     [3, 4, 5],','line_number':92,'multiline':False]
['text':'     ...','line_number':93,'multiline':False]
['text':'   ]','line_number':94,'multiline':False]
['text':' }','line_number':95,'multiline':False]
['text':' </pre>','line_number':96,'multiline':False]
['text':' Tensors (in this case, two-dimensional tensors):','line_number':97,'multiline':False]
['text':' <pre>','line_number':98,'multiline':False]
['text':' {','line_number':99,'multiline':False]
['text':'   "instances": [','line_number':100,'multiline':False]
['text':'     [','line_number':101,'multiline':False]
['text':'       [0, 1, 2],','line_number':102,'multiline':False]
['text':'       [3, 4, 5]','line_number':103,'multiline':False]
['text':'     ],','line_number':104,'multiline':False]
['text':'     ...','line_number':105,'multiline':False]
['text':'   ]','line_number':106,'multiline':False]
['text':' }','line_number':107,'multiline':False]
['text':' </pre>','line_number':108,'multiline':False]
['text':' Images can be represented different ways. In this encoding scheme the first','line_number':109,'multiline':False]
['text':' two dimensions represent the rows and columns of the image, and the third','line_number':110,'multiline':False]
['text':' contains lists (vectors) of the R, G, and B values for each pixel.','line_number':111,'multiline':False]
['text':' <pre>','line_number':112,'multiline':False]
['text':' {','line_number':113,'multiline':False]
['text':'   "instances": [','line_number':114,'multiline':False]
['text':'     [','line_number':115,'multiline':False]
['text':'       [','line_number':116,'multiline':False]
['text':'         [138, 30, 66],','line_number':117,'multiline':False]
['text':'         [130, 20, 56],','line_number':118,'multiline':False]
['text':'         ...','line_number':119,'multiline':False]
['text':'       ],','line_number':120,'multiline':False]
['text':'       [','line_number':121,'multiline':False]
['text':'         [126, 38, 61],','line_number':122,'multiline':False]
['text':'         [122, 24, 57],','line_number':123,'multiline':False]
['text':'         ...','line_number':124,'multiline':False]
['text':'       ],','line_number':125,'multiline':False]
['text':'       ...','line_number':126,'multiline':False]
['text':'     ],','line_number':127,'multiline':False]
['text':'     ...','line_number':128,'multiline':False]
['text':'   ]','line_number':129,'multiline':False]
['text':' }','line_number':130,'multiline':False]
['text':' </pre>','line_number':131,'multiline':False]
['text':' JSON strings must be encoded as UTF-8. To send binary data, you must','line_number':132,'multiline':False]
['text':' base64-encode the data and mark it as binary. To mark a JSON string','line_number':133,'multiline':False]
['text':' as binary, replace it with a JSON object with a single attribute named `b64`:','line_number':134,'multiline':False]
['text':' <pre>{"b64": "..."} </pre>','line_number':135,'multiline':False]
['text':' For example:','line_number':136,'multiline':False]
['text':'','line_number':137,'multiline':False]
['text':' Two Serialized tf.Examples (fake data, for illustrative purposes only):','line_number':138,'multiline':False]
['text':' <pre>','line_number':139,'multiline':False]
['text':' {"instances": [{"b64": "X5ad6u"}, {"b64": "IA9j4nx"}]}','line_number':140,'multiline':False]
['text':' </pre>','line_number':141,'multiline':False]
['text':' Two JPEG image byte strings (fake data, for illustrative purposes only):','line_number':142,'multiline':False]
['text':' <pre>','line_number':143,'multiline':False]
['text':' {"instances": [{"b64": "ASa8asdf"}, {"b64": "JLK7ljk3"}]}','line_number':144,'multiline':False]
['text':' </pre>','line_number':145,'multiline':False]
['text':' If your data includes named references, format each instance as a JSON object','line_number':146,'multiline':False]
['text':' with the named references as the keys:','line_number':147,'multiline':False]
['text':'','line_number':148,'multiline':False]
['text':' JSON input data to be preprocessed:','line_number':149,'multiline':False]
['text':' <pre>','line_number':150,'multiline':False]
['text':' {','line_number':151,'multiline':False]
['text':'   "instances": [','line_number':152,'multiline':False]
['text':'     {','line_number':153,'multiline':False]
['text':'       "a": 1.0,','line_number':154,'multiline':False]
['text':'       "b": true,','line_number':155,'multiline':False]
['text':'       "c": "x"','line_number':156,'multiline':False]
['text':'     },','line_number':157,'multiline':False]
['text':'     {','line_number':158,'multiline':False]
['text':'       "a": -2.0,','line_number':159,'multiline':False]
['text':'       "b": false,','line_number':160,'multiline':False]
['text':'       "c": "y"','line_number':161,'multiline':False]
['text':'     }','line_number':162,'multiline':False]
['text':'   ]','line_number':163,'multiline':False]
['text':' }','line_number':164,'multiline':False]
['text':' </pre>','line_number':165,'multiline':False]
['text':' Some models have an underlying TensorFlow graph that accepts multiple input','line_number':166,'multiline':False]
['text':' tensors. In this case, you should use the names of JSON name/value pairs to','line_number':167,'multiline':False]
['text':' identify the input tensors, as shown in the following exmaples:','line_number':168,'multiline':False]
['text':'','line_number':169,'multiline':False]
['text':' For a graph with input tensor aliases "tag" (string) and "image"','line_number':170,'multiline':False]
['text':' (base64-encoded string):','line_number':171,'multiline':False]
['text':' <pre>','line_number':172,'multiline':False]
['text':' {','line_number':173,'multiline':False]
['text':'   "instances": [','line_number':174,'multiline':False]
['text':'     {','line_number':175,'multiline':False]
['text':'       "tag": "beach",','line_number':176,'multiline':False]
['text':'       "image": {"b64": "ASa8asdf"}','line_number':177,'multiline':False]
['text':'     },','line_number':178,'multiline':False]
['text':'     {','line_number':179,'multiline':False]
['text':'       "tag": "car",','line_number':180,'multiline':False]
['text':'       "image": {"b64": "JLK7ljk3"}','line_number':181,'multiline':False]
['text':'     }','line_number':182,'multiline':False]
['text':'   ]','line_number':183,'multiline':False]
['text':' }','line_number':184,'multiline':False]
['text':' </pre>','line_number':185,'multiline':False]
['text':' For a graph with input tensor aliases "tag" (string) and "image"','line_number':186,'multiline':False]
['text':' (3-dimensional array of 8-bit ints):','line_number':187,'multiline':False]
['text':' <pre>','line_number':188,'multiline':False]
['text':' {','line_number':189,'multiline':False]
['text':'   "instances": [','line_number':190,'multiline':False]
['text':'     {','line_number':191,'multiline':False]
['text':'       "tag": "beach",','line_number':192,'multiline':False]
['text':'       "image": [','line_number':193,'multiline':False]
['text':'         [','line_number':194,'multiline':False]
['text':'           [138, 30, 66],','line_number':195,'multiline':False]
['text':'           [130, 20, 56],','line_number':196,'multiline':False]
['text':'           ...','line_number':197,'multiline':False]
['text':'         ],','line_number':198,'multiline':False]
['text':'         [','line_number':199,'multiline':False]
['text':'           [126, 38, 61],','line_number':200,'multiline':False]
['text':'           [122, 24, 57],','line_number':201,'multiline':False]
['text':'           ...','line_number':202,'multiline':False]
['text':'         ],','line_number':203,'multiline':False]
['text':'         ...','line_number':204,'multiline':False]
['text':'       ]','line_number':205,'multiline':False]
['text':'     },','line_number':206,'multiline':False]
['text':'     {','line_number':207,'multiline':False]
['text':'       "tag": "car",','line_number':208,'multiline':False]
['text':'       "image": [','line_number':209,'multiline':False]
['text':'         [','line_number':210,'multiline':False]
['text':'           [255, 0, 102],','line_number':211,'multiline':False]
['text':'           [255, 0, 97],','line_number':212,'multiline':False]
['text':'           ...','line_number':213,'multiline':False]
['text':'         ],','line_number':214,'multiline':False]
['text':'         [','line_number':215,'multiline':False]
['text':'           [254, 1, 101],','line_number':216,'multiline':False]
['text':'           [254, 2, 93],','line_number':217,'multiline':False]
['text':'           ...','line_number':218,'multiline':False]
['text':'         ],','line_number':219,'multiline':False]
['text':'         ...','line_number':220,'multiline':False]
['text':'       ]','line_number':221,'multiline':False]
['text':'     },','line_number':222,'multiline':False]
['text':'     ...','line_number':223,'multiline':False]
['text':'   ]','line_number':224,'multiline':False]
['text':' }','line_number':225,'multiline':False]
['text':' </pre>','line_number':226,'multiline':False]
['text':' If the call is successful, the response body will contain one prediction','line_number':227,'multiline':False]
['text':' entry per instance in the request body. If prediction fails for any','line_number':228,'multiline':False]
['text':' instance, the response body will contain no predictions and will contian','line_number':229,'multiline':False]
['text':' a single error entry instead.','line_number':230,'multiline':False]
['text':' Required. The resource name of a model or a version.','line_number':232,'multiline':False]
['text':'','line_number':233,'multiline':False]
['text':' Authorization: requires `Viewer` role on the parent project.','line_number':234,'multiline':False]
['text':'','line_number':237,'multiline':False]
['text':' Required. The prediction request body.','line_number':238,'multiline':False]
