['text':'
 * ProGuard -- shrinking, optimization, obfuscation, and preverification
 *             of Java bytecode.
 *
 * Copyright (c) 2002-2019 Guardsquare NV
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the Free
 * Software Foundation; either version 2 of the License, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 ','line_number':1,'multiline':True]
['text':'*
 * This class contains utility methods for strings.
 ','line_number':25,'multiline':True]
['text':'*
     * Returns the modified UTF-8 byte array representation of the given string.
     ','line_number':48,'multiline':True]
['text':' We're computing the byte array ourselves, because the implementation','line_number':53,'multiline':False]
['text':' of String.getBytes("UTF-8") has a bug, at least up to JRE 1.4.2.','line_number':54,'multiline':False]
['text':' Also note the special treatment of the 0 character.','line_number':55,'multiline':False]
['text':' Compute the byte array length.','line_number':57,'multiline':False]
['text':' The character is represented by one, two, or three bytes.','line_number':64,'multiline':False]
['text':' Allocate the byte array with the computed length.','line_number':71,'multiline':False]
['text':' Fill out the array.','line_number':74,'multiline':False]
['text':' The 0 character gets a two-byte representation in classes.','line_number':81,'multiline':False]
['text':' The character is represented by a single byte.','line_number':87,'multiline':False]
['text':' The character is represented by two bytes.','line_number':92,'multiline':False]
['text':' The character is represented by three bytes.','line_number':98,'multiline':False]
['text':'*
     * Returns the String representation of the given modified UTF-8 byte array.
     ','line_number':109,'multiline':True]
['text':'*
     * Returns the String representation of the given modified UTF-8 byte array.
     ','line_number':119,'multiline':True]
['text':' We're computing the string ourselves, because the implementation','line_number':125,'multiline':False]
['text':' of "new String(bytes)" doesn't honor the special treatment of','line_number':126,'multiline':False]
['text':' the 0 character in JRE 1.6_u11 and higher.','line_number':127,'multiline':False]
['text':' Allocate the byte array with the computed length.','line_number':129,'multiline':False]
['text':' Fill out the array.','line_number':132,'multiline':False]
['text':' Depending on the flag bits in the first byte, the character','line_number':140,'multiline':False]
['text':' is represented by a single byte, by two bytes, or by three','line_number':141,'multiline':False]
['text':' bytes. We're not checking the redundant flag bits in the','line_number':142,'multiline':False]
['text':' second byte and the third byte.','line_number':143,'multiline':False]
['text':'*
     * Joins the given strings using the provided separator.
     *
     * @param separator    The separator to use.
     * @param strings      The strings to join.
     * @return The input strings, concatenated together using the separator
     ','line_number':166,'multiline':True]
['text':'*
     * Returns the hexadecimal representation of the given byte array.
     ','line_number':188,'multiline':True]
['text':'*
     * Returns the hexadecimal representation of the given byte array.
     ','line_number':197,'multiline':True]
['text':'*
     * Returns the hexadecimal representation of the given nibble.
     ','line_number':215,'multiline':True]
